
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Объект.ПереноситьАктивыВУпп Тогда
		Элементы.СпособПереносаАктивов.Доступность = Ложь;
	КонецЕсли; 
	
	Если Не Объект.ОтражатьВыявленныеДефекты Тогда
		Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.Доступность = Ложь;
	КонецЕсли;	
	
	Если Объект.ОтражатьПринятиеКУчетуОСВУПП = Ложь
		И Объект.ОтражатьСписаниеОСВУПП = Ложь Тогда
		
		ПравилаОтправкиАктивов = "ТолькоОбъектыАктивы"
		
	ИначеЕсли Объект.ОтражатьПринятиеКУчетуОСВУПП = Истина
		И Объект.ОтражатьСписаниеОСВУПП = Ложь Тогда
		
		ПравилаОтправкиАктивов = "ОРИПринятиеКУчету"		
		
	ИначеЕсли Объект.ОтражатьПринятиеКУчетуОСВУПП = Истина
		И Объект.ОтражатьСписаниеОСВУПП = Истина Тогда
		
		ПравилаОтправкиАктивов = "ВыбытиеОР"
		
	КонецЕсли;
	
	Если Не Объект.ТаблицаСоответствияКритичностиИВремениУстранения.Количество() > 0 Тогда
		
		ОбновитьТаблицуКритичностей() 
				
	Иначе
		
		Для каждого Строка Из Объект.ТаблицаСоответствияКритичностиИВремениУстранения Цикл
			Строка.ВремяСтрокой = СформироватьПродолжительность(Строка.ВремяНаУстранение);
		КонецЦикла;
		
	КонецЕсли; 

	Объект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
	Объект.РежимВыгрузкиПоУсловию  = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
	объект.РежимВыгрузкиПриНеобходимости = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ИспользоватьОтборПоОрганизациям Тогда
		ОтборПоОрганизациям = "ПоВыбраннымОрганизациям";
	Иначе
		ОтборПоОрганизациям = "ПоВсемОрганизациям"; 
	КонецЕсли;
	
	Если Объект.ИспользоватьОтборПоСкладам Тогда
		ОтборПоСкладам = "ПоВыбраннымСкладам";
	Иначе
		ОтборПоСкладам = "ПоВсемСкладам"; 
	КонецЕсли;
	
	ОтборПоОрганизациямПриИзменении(Истина);
	ОтборПоСкладамПриИзменении(Истина);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Для каждого Строка Из Объект.ТаблицаСоответствияКритичностиИВремениУстранения Цикл
		Строка.ВремяСтрокой = СформироватьПродолжительность(Строка.ВремяНаУстранение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПравилаОтправкиАктивовПриИзменении(Элемент)
	РасставитьФлаги();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизациямПриИзменении(Элемент)
	Элементы.Организации.Видимость = (ОтборПоОрганизациям = "ПоВыбраннымОрганизациям");
	Объект.ИспользоватьОтборПоОрганизациям = (ОтборПоОрганизациям = "ПоВыбраннымОрганизациям");
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВыявленныеДефектыПриИзменении(Элемент)
	Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.Доступность = Объект.ОтражатьВыявленныеДефекты;
КонецПроцедуры

&НаКлиенте
Процедура ПереноситьАктивыВУппПриИзменении(Элемент)
	Элементы.СпособПереносаАктивов.Доступность = Объект.ПереноситьАктивыВУпп;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияКритичностиИВремениУстраненияВремяСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяНаУстранение, Элемент, Неопределено);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияКритичностиИВремениУстраненияВремяСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяСтрокой      = СформироватьПродолжительность(ВыбранноеЗначение);
		ТекущиеДанные.ВремяНаУстранение = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладамПриИзменении(Элемент)
	Элементы.Склады.Видимость = (ОтборПоСкладам  = "ПоВыбраннымСкладам");
	Объект.ИспользоватьОтборПоСкладам = (ОтборПоСкладам = "ПоВыбраннымСкладам");
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьЗаказыНаРемонтПриИзменении(Элемент)
	Элементы.РемонтыПоДефектам.Доступность = Объект.ОтражатьЗаказыНаРемонт;
	Элементы.РемонтыПоППР.Доступность = Объект.ОтражатьЗаказыНаРемонт;
	Элементы.РемонтыПоВнешнимОснованиям.Доступность = Объект.ОтражатьЗаказыНаРемонт;
	
	Если Не Объект.ОтражатьЗаказыНаРемонт Тогда
	    Объект.РемонтыПоДефектам = Объект.ОтражатьЗаказыНаРемонт;
		Объект.РемонтыПоППР = Объект.ОтражатьЗаказыНаРемонт;
		Объект.РемонтыПоВнешнимОснованиям = Объект.ОтражатьЗаказыНаРемонт;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	ТекущиеДанные = Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтрокаТаблицы = Объект.ТаблицаСоответствияКритичностиИВремениУстранения.НайтиСтроки(Новый Структура("КритичностьДефекта", ТекущиеДанные.КритичностьДефекта));
		Если Не СтрокаТаблицы.Количество() = 0 Тогда
			Объект.ТаблицаСоответствияКритичностиИВремениУстранения.Удалить(СтрокаТаблицы[0]);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ОбновитьТаблицуКритичностей()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСклады

&НаКлиенте
Процедура СкладыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПередОкончаниемРедактированияТЧ("Склады", "Склад", ОтменаРедактирования, Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОрганизации

&НаКлиенте
Процедура ОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПередОкончаниемРедактированияТЧ("Организации", "Организация", ОтменаРедактирования, Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТаблицуКритичностей()
	
	Объект.ТаблицаСоответствияКритичностиИВремениУстранения.Очистить();
	Выборка = Справочники.торо_КритичностьДефекта.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НС = Объект.ТаблицаСоответствияКритичностиИВремениУстранения.Добавить();
		НС.КритичностьДефекта = Выборка.Ссылка;
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура РасставитьФлаги()
	
	Если ПравилаОтправкиАктивов = "ТолькоОбъектыАктивы" Тогда
		Объект.ОтражатьПринятиеКУчетуОСВУПП = Ложь;
		Объект.ОтражатьСписаниеОСВУПП       = Ложь;
	ИначеЕсли ПравилаОтправкиАктивов = "ОРИПринятиеКУчету" Тогда
		Объект.ОтражатьПринятиеКУчетуОСВУПП = Истина;
		Объект.ОтражатьСписаниеОСВУПП       = Ложь;
	ИначеЕсли ПравилаОтправкиАктивов = "ВыбытиеОР" Тогда
		Объект.ОтражатьПринятиеКУчетуОСВУПП = Истина;
		Объект.ОтражатьСписаниеОСВУПП       = Истина;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах) 
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " м. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПередОкончаниемРедактированияТЧ(ИмяТЧ, ИмяКолонки, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
	    Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(ИмяКолонки, ТекущиеДанные[ИмяКолонки]);
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() < 2 Тогда
	    Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Данное значение уже добавлено!'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
КонецПроцедуры

#КонецОбласти