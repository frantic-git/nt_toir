
#Область ПрограммныйИнтерфейс

// Осуществляет проверку формулы при интерактивных действиях пользователя.
//
// Параметры:
//		Формула          - Строка - формула, которую нужно проверить на корректность.
//		Операнды         - Массив - операнды формулы.
//		Поле - Строка    - имя поля, к которому необходимо привязать сообщение.
//		СтроковаяФормула - Булево - признак, что формула строковая.
//		ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
Процедура ПроверитьФормулуИнтерактивно(Формула, Операнды, Знач Поле, СтроковаяФормула = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Формула) Тогда
		Если ПроверитьФормулу(Формула, Операнды, Поле, , СтроковаяФормула, , ДополнительныеПараметры) Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'В формуле ошибок не обнаружено'"),	, , БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Осуществляет проверку корректности формулы.
//
// Параметры:
//  Формула                  - Строка - текст формулы
//  Операнды                - Массив - операнды формулы
//  Поле                    - Строка - имя поля, к которому необходимо привязать сообщение
//  СообщениеОбОшибке       - Строка - текст сообщения об ошибке
//  СтроковаяФормула        - Булево - признак строковой формулы
//  ПутьКДанным             - Строка - путь к данным, для выдачи сообщения об ошибке
//  ДополнительныеПараметры - Структура - поддерживаемые параметры:
//         * НеВыводитьСообщения - Булево - признак того что не нужно выводить сообщения пользователю, по умолчанию выводятся
//         * ТипРезультата       - ОписаниеТипов - возможные типы, возвращаемые формулой.
//
// Возвращаемое значение:
//  Булево - Ложь, если есть ошибки, иначе Истина.
//
Функция ПроверитьФормулу(Формула, Операнды, Знач Поле = "", Знач СообщениеОбОшибке = "", СтроковаяФормула = Ложь,
								ПутьКДанным = "", ДополнительныеПараметры = Неопределено)
		
	Перем ТипРезультата;
		
	Результат = Истина;
	
	ВыводитьСообщения = Истина;
	Если ДополнительныеПараметры <> Неопределено 
		И ДополнительныеПараметры.Свойство("НеВыводитьСообщения") 
		И ДополнительныеПараметры.НеВыводитьСообщения Тогда
		ВыводитьСообщения = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Формула) Тогда
		
		Если СтроковаяФормула Тогда
			ТекстРасчета = """Строка"" + " + Формула;
			ЗначениеЗамены = """1""";
		Иначе
			ТипРезультата = Неопределено;
			Если ДополнительныеПараметры <> Неопределено Тогда
				ДополнительныеПараметры.Свойство("ТипРезультата", ТипРезультата);
			КонецЕсли;
			Если ТипРезультата = Новый ОписаниеТипов("Дата") Тогда
				ЗначениеЗамены = ТекущаяДата();
			Иначе
				ЗначениеЗамены = 1;
			КонецЕсли;
			ТекстРасчета = Формула;
		КонецЕсли;
		
		Для Каждого Операнд Из Операнды Цикл
			ТекстРасчета = СтрЗаменить(ТекстРасчета, торо_РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(Операнд), ЗначениеЗамены);
		КонецЦикла;
		
		Попытка
			
			РезультатРасчета = Вычислить(ТекстРасчета);
			
			ПроверитьНаличиеРазделителейОперандов(Формула, СтроковаяФормула, Поле, ПутьКДанным, ВыводитьСообщения, Результат);
			
			Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ТипРезультата") Тогда
				ПроверитьТипРезультата(РезультатРасчета, ДополнительныеПараметры, Поле, ПутьКДанным, ВыводитьСообщения);
			КонецЕсли;
		
		Исключение
			
			Результат = Ложь;
			
			Если ВыводитьСообщения Тогда
				ТекстСообщения = ?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке, НСтр("ru='В формуле обнаружены ошибки. Проверьте формулу. Формулы должны составляться по правилам написания выражений на встроенном языке 1С:Предприятия.'"));
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле, ПутьКДанным);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Процедура ПроверитьНаличиеРазделителейОперандов(Формула, СтроковаяФормула, Поле, ПутьКДанным, ВыводитьСообщения, Результат)
	
	Если СтроковаяФормула Тогда
		ТекстПроверки = СтрЗаменить(Формула, Символы.ПС, "");
		ТекстПроверки = СтрЗаменить(ТекстПроверки, " ", "");
		ОтсутствиеРазделителей = Найти(ТекстПроверки, "][")
		+ Найти(ТекстПроверки, """[")
		+ Найти(ТекстПроверки, "]""");
		Если ОтсутствиеРазделителей > 0 Тогда
			Если ВыводитьСообщения Тогда
				ТекстСообщения = НСтр("ru='В формуле обнаружены ошибки. Между операндами должен присутствовать оператор или разделитель'");
				#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, ПутьКДанным);
				#Иначе
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле, ПутьКДанным);
				#КонецЕсли
			КонецЕсли;
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТипРезультата(РезультатРасчета, ДополнительныеПараметры, Поле, ПутьКДанным, ВыводитьСообщения)
	
	ТипРезультатаРасчетаПравильный = Ложь;
	
	Для Каждого ДопустимыйТип Из ДополнительныеПараметры.ТипРезультата.Типы() Цикл
		Если ТипЗнч(РезультатРасчета) = ДопустимыйТип Тогда
			ТипРезультатаРасчетаПравильный = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипРезультатаРасчетаПравильный И ВыводитьСообщения Тогда
		ШаблонСообщения = НСтр("ru='В формуле обнаружены ошибки. Результат расчета должен быть типа %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДополнительныеПараметры.ТипРезультата);
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, ПутьКДанным);
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле, ПутьКДанным);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
