////////////////////////////////////////////////////////////////////////////////
// торо_НастройкаПорядкаЭлементовКлиент: методы, для работы с порядком элементов
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
// Обработчик команды "Переместить вверх" формы списка.
//
// Параметры:
//  РеквизитФормыДерево - ДинамическийСписок - реквизит формы, содержащий список;
//  ЭлементФормыДерево  - ТаблицаФормы       - элемент формы, содержащий список.
//  СтруктураИерархии - СправочникССылка.торо_СтруктурыОР - структура иерархии.
//
// Возвращаемое значение:
//  Структура - структура с параметрами сдвига.
Функция ПереместитьЭлементВверхВыполнить(РеквизитФормыДерево, ЭлементФормыДерево, СтруктураИерархии) Экспорт
	
	Возврат ПереместитьЭлемент(РеквизитФормыДерево, ЭлементФормыДерево, "Вверх", СтруктураИерархии);
	
КонецФункции

// Обработчик команды "Переместить вниз" формы списка.
//
// Параметры:
//  РеквизитФормыСписок - ДинамическийСписок - реквизит формы, содержащий список;
//  ЭлементФормыСписок  - ТаблицаФормы       - элемент формы, содержащий список.
//  СтруктураИерархии - СправочникССылка.торо_СтруктурыОР - структура иерархии.
//
// Возвращаемое значение:
//  Структура - структура с параметрами сдвига.
Функция ПереместитьЭлементВнизВыполнить(РеквизитФормыСписок, ЭлементФормыСписок, СтруктураИерархии) Экспорт
	
	Возврат ПереместитьЭлемент(РеквизитФормыСписок, ЭлементФормыСписок, "Вниз", СтруктураИерархии);
	
КонецФункции

// Визуально перемещает элемент в дереве, если это требуется. Также вызывает обновление списка.
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма списка объектов ремонта.
//		СтруктураСдвига - Структура - структура, возвращенная функцей ПереместитьЭлемент.
//		ИмяРеквизитаДерево - Строка - имя реквизита на форме с деревом.
//		ИмяЭлементаСписок - Строка - имя элемента на форме с динамическим списком.
//
Процедура ИзменитьПорядокЭлементаВДереве(Форма, СтруктураСдвига, ИмяРеквизитаДерево = "Дерево", ИмяЭлементаСписок = "Список") Экспорт
	
	Если ЗначениеЗаполнено(ИмяРеквизитаДерево) Тогда
		Дерево = Форма[ИмяРеквизитаДерево];
		
		СтрокаДерева = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(Дерево.ПолучитьЭлементы(), СтруктураСдвига.Ссылка, Форма.СтруктураПараметровИерархии, Форма.ПустойРодитель);
		Если СтрокаДерева <> Неопределено Тогда
			НовыйРеквизитДопУпорядочивания = СтруктураСдвига.РеквизитДопУпорядочивания;
			СтарыйРеквизитДопУпорядочивания = СтрокаДерева.РеквизитДопУпорядочивания;
			ЭлементДляОбмена = СтруктураСдвига.ЭлементДляОбмена;
			
			СтрокаРодителяВДереве = СтрокаДерева.ПолучитьРодителя();
			Если СтрокаРодителяВДереве = Неопределено Тогда
				ЭлементыРодителя = Дерево.ПолучитьЭлементы();
			Иначе
				ЭлементыРодителя = СтрокаРодителяВДереве.ПолучитьЭлементы();
			КонецЕсли;
			
			НайденныйСосед = Неопределено;
			Для каждого СтрокаСоседа из ЭлементыРодителя Цикл
				Если СтрокаСоседа.Ссылка = ЭлементДляОбмена Тогда
					СтрокаСоседа.РеквизитДопУпорядочивания = СтарыйРеквизитДопУпорядочивания;
					НайденныйСосед = СтрокаСоседа;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаДерева.РеквизитДопУпорядочивания = НовыйРеквизитДопУпорядочивания;
			
			Если НайденныйСосед <> Неопределено Тогда
				ИндексСтрокиДерева = ЭлементыРодителя.Индекс(СтрокаДерева);
				НовыйИндексДерева = ЭлементыРодителя.Индекс(НайденныйСосед);
				
				Если НовыйИндексДерева >= 0 И НовыйИндексДерева < ЭлементыРодителя.Количество() Тогда
					ЭлементыРодителя.Сдвинуть(ИндексСтрокиДерева, НовыйИндексДерева - ИндексСтрокиДерева);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяЭлементаСписок) Тогда
		Список = Форма.Элементы[ИмяЭлементаСписок];
		Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПереместитьЭлемент(ДеревоРеквизит, ДеревоЭлемент, Направление, СтруктураИерархии)
	
	Если ДеревоЭлемент.ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДеревоЭлемент.ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		  Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСдвига = Новый Структура("ВеличинаСдвига, РеквизитДопУпорядочивания",0, Неопределено);
	
	ЭлементДляОбмена = Неопределено;
	Если ТипЗнч(ДеревоРеквизит) = Тип("ДанныеФормыДерево") Тогда
		СтрокаРодителя = ДеревоЭлемент.ТекущиеДанные.ПолучитьРодителя();
		Если СтрокаРодителя = Неопределено Тогда
			ЭлементыРодителя = ДеревоРеквизит.ПолучитьЭлементы();
		Иначе
			ЭлементыРодителя = СтрокаРодителя.ПолучитьЭлементы();
		КонецЕсли;
		
		ИндексТекСтроки = ЭлементыРодителя.Индекс(ДеревоЭлемент.ТекущиеДанные);
		Если ИндексТекСтроки < 0 Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		Если Направление = "Вверх" Тогда
			Если ИндексТекСтроки = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СтрокаДляОбмена = ЭлементыРодителя[ИндексТекСтроки-1];
		Иначе
			Если ИндексТекСтроки = ЭлементыРодителя.Количество()-1 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СтрокаДляОбмена = ЭлементыРодителя[ИндексТекСтроки+1];
		КонецЕсли;
		
		ЭлементДляОбмена = СтрокаДляОбмена.Ссылка;
	КонецЕсли;
	
	СтруктураСдвига.Вставить("Ссылка", ДеревоЭлемент.ТекущиеДанные.Ссылка);
	СтруктураСдвига.Вставить("ИсходныйРеквизитДопУпорядочивания", ДеревоЭлемент.ТекущиеДанные.РеквизитДопУпорядочивания);
	СтруктураСдвига.Вставить("ЭлементДляОбмена", ЭлементДляОбмена);
	
	ТекстОшибки = торо_НастройкаПорядкаЭлементовСлужебныйВызовСервера.ИзменитьПорядокЭлементов(
		ДеревоЭлемент.ТекущиеДанные.Ссылка, ДеревоЭлемент.ТекущиеДанные.РеквизитДопУпорядочивания, Направление, СтруктураИерархии, СтруктураСдвига, ЭлементДляОбмена);
		
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(Неопределено, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураСдвига;
	
КонецФункции

#КонецОбласти


