#Область ПрограммныйИнтерфейс

// Функция формирует строку в формате ч. мин. с. по продолжительности в секундах.
// Есть возможность задания произвольного представления для нуля.
//
// Параметры:
//		ПродолжительностьВСекундах - Число - продолжительность в секундах.
//		ПредставлениеНуля - Строка - представление нулевого значения.
//
// Возвращаемое значение:
//		Строка - строковое представление времени.
Функция СформироватьЗаголовокПоПродолжительности(ПродолжительностьВСекундах,ПредставлениеНуля = Неопределено) Экспорт
	
	Если ПродолжительностьВСекундах = null Тогда
		
		Возврат "";
	
	ИначеЕсли ПродолжительностьВСекундах = 0 Тогда
		
		Если ПредставлениеНуля = Неопределено Тогда
			Возврат НСтр("ru = 'Ввести продолжительность'");
		Иначе
			Возврат ПредставлениеНуля;
		КонецЕсли;
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		ТекстШаблона = НСтр("ru = '%1 ч. %2 мин. %3 с.'");
		Если ТекстШаблона <> "" Тогда
			Возврат СтрШаблон(ТекстШаблона, Часы, Минуты, Секунды);
		Иначе
			Возврат СтрШаблон("%1 h. %2 min. %3 s.", Часы, Минуты, Секунды);
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции

// Возвращает фильтр, используемый для выбора файлов-изображений.
// Возвращаемое значение:
// 	Строка - строка, содержащая фильтр для файлов-изображений.
//
Функция ФильтрФайловИзображений() Экспорт
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
КонецФункции

// Функция находит строки (строку) в коллекции по отбору. 
// Полезно, когда необходимо в ДанныеФормыКоллекция вернуть одну строку или найти строки в массиве структур.  
// Возможно использовать вместо вызова функции "НайтиСтроки" на клиенте, чтобы исключить серверный вызовов. 
//
// Параметры:
//		Коллекция - Произвольный - коллекция для обхода.
//		СтруктураОтбора - Структура - структура отбора, где ключ - имя свойства для отбора, значение - значения свойства.
//		ВернутьОдну - Булево - при установленном признаке возвращается одна строка.
//
// Возвращаемое значение:
//		Массив, СтрокаКоллекции, Неопределено - при установленом значении параметра ВернутьОдну при нахождении в коллекции строки
//		возвращает строку или неопределено, если строку по отбору найти не удалось. Если ВернутьОдну = Ложь возвращает массив строк.
//
Функция НайтиСтрокиВКоллекции(Коллекция, СтруктураОтбора, ВернутьОдну = Ложь) Экспорт
	
    Результат = Новый Массив;
	
	Для Каждого Строка Из Коллекция Цикл
		
		ПроверкаПройдена = Истина;
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			
			Если НЕ Строка[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				ПроверкаПройдена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПроверкаПройдена И ВернутьОдну Тогда
			Возврат Строка; 
		ИначеЕсли ПроверкаПройдена Тогда
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
	Если ВернутьОдну Тогда
		Возврат Неопределено;
	Иначе	
		Возврат Результат;
	КонецЕсли;

КонецФункции	

// Возвращает строку дерева, расположенного на форме, с заданным значеним в колонке.
// Параметры:
//		СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - Строки дерева, в которых начинается поиск.
//		ИмяКолонкиПоиска - Строка - Имя колонки, по которой нужно искать.
//		Значение - Произвольный - Значение, которое нужно найти.
// Возвращаемое значение:
//		ДанныеФормыЭлементДерева, Неопределено - Первая найденная строка дерева или Неопределено.
//
Функция НайтиСтрокуВДеревеФормы(СтрокиДерева, ИмяКолонкиПоиска, Значение) Экспорт
	
	Для каждого СтрокаДерева из СтрокиДерева Цикл
		Если СтрокаДерева[ИмяКолонкиПоиска] = Значение Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		НайденнаяСтрокаВПоддереве = НайтиСтрокуВДеревеФормы(СтрокаДерева.ПолучитьЭлементы(), ИмяКолонкиПоиска, Значение);
		Если НайденнаяСтрокаВПоддереве <> Неопределено Тогда
			Возврат НайденнаяСтрокаВПоддереве;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет к переданной дате начала указанное количество периодов.
// В отличие от аналогичной процедуры в ОбщегоНазначенияУТКлиентСервер, возвращает значение без "КонецДня" 
// Параметры:
// 	ДатаНачала         - Дата - дата начала, от которой будет рассчитана дата окончания периода.
// 	Периодичность      - ПеречислениеСсылка.Периодичность - Периодичность.
// 	КоличествоПериодов - Число - количество повторов периода.
//
// Возвращаемое значение:
// 	Дата - Дата окончания периода.
//
Функция РассчитатьДатуОкончанияПериода(ДатаНачала, Периодичность, КоличествоПериодов) Экспорт

	ОдинДень = 86400;

	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда 
		
		ДатаОкончания = ДатаНачала + ОдинДень * КоличествоПериодов;

	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ДатаОкончания = ДатаНачала + ОдинДень * 7 * КоличествоПериодов;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада")) Тогда
		
		ДеньМесяца = День(ДатаНачала);
		НачМесяца = НачалоМесяца(ДатаНачала);
		Если ДеньМесяца <= 10 Тогда
			НомерДекады = 1;
		ИначеЕсли ДеньМесяца <= 20 Тогда
			НомерДекады = 2;
		Иначе
			НомерДекады = 3;
		КонецЕсли;
			
		НомерДекады = НомерДекады + КоличествоПериодов;
		
		Если НомерДекады > 0 Тогда
			Месяцев = Цел((НомерДекады-1)/3);
		Иначе
			Месяцев = -1 - Цел((-НомерДекады)/3);
		КонецЕсли;
			
		НомерДекады = НомерДекады - 3*Месяцев;
		Дт = ДобавитьМесяц(НачМесяца, Месяцев) + (НомерДекады-1) * 10 * ОдинДень;

		Если КоличествоПериодов > 0 Тогда
			ДатаОкончания = Дт;
		
		Иначе 
			ДеньМесяца = День(Дт);

			Если ДеньМесяца <= 10 Тогда
				ДатаОкончания = КонецДня(НачалоМесяца(Дт) + ОдинДень * 9);
			ИначеЕсли ДеньМесяца <= 20 Тогда
				ДатаОкончания = КонецДня(НачалоМесяца(Дт) + ОдинДень * 19);
			Иначе
				ДатаОкончания = КонецМесяца(Дт);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Периодичность= ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 3 * КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 6 * КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 12 * КоличествоПериодов);

	КонецЕсли;
			
	Возврат ДатаОкончания;

КонецФункции // РассчитатьДатуОкончанияПериода()

// Возвращает строковое представление типа штрихкода.
// Параметры:
//		Тип - ПеречислениеСсылка.торо_ТипыШтрихКодов - тип штрихкода.
//
// Возвращаемое значение:
//		Строка - строковое представление типа штрихкода.
//
Функция ТипШтрихКодаСтрокой(Тип) Экспорт
	
	Если Тип = ПредопределенноеЗначение("Перечисление.торо_ТипыШтрихКодов.Code128") Тогда 
		Возврат "Code128";
	ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.торо_ТипыШтрихКодов.EAN13") Тогда 
		Возврат "EAN13";
	ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.торо_ТипыШтрихКодов.EAN8") Тогда 
		Возврат "EAN8";
	Иначе
		Возврат "Авто";
	КонецЕсли;	
	
КонецФункции

#КонецОбласти