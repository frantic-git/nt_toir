
#Область СлужебныйПрограммныйИнтерфейс

/////////////////////////////////////////////////////////////////////////////////////////
// Формирование текстов запросов временных таблиц

Функция ЗапросВТФункциональныеОпцииОрганизаций(ТолькоРазрешенные, ИмяВТФункциональныеОпцииОрганизаций, МассивФункциональныхОпций) Экспорт
	
	Запрос = Новый Запрос;
	
	СоответствиеХранилищ = Новый Соответствие;
	МассивФункциональныхОпцийСправочникаОрганизации = Новый Массив;
	СоответствиеПериодичностиХранилищ = Новый Соответствие;
	
	Для каждого ИмяФункциональнойОпции Из МассивФункциональныхОпций Цикл
		
		Если ВРег(ИмяФункциональнойОпции) = "ОРГАНИЗАЦИЯ" Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеФункциональнойОпции = Метаданные.ФункциональныеОпции[ИмяФункциональнойОпции];
		ИмяОбъектаХранилища = МетаданныеФункциональнойОпции.Хранение.Родитель().ПолноеИмя();
		
		Если НЕ ИмяОбъектаХранилища = "Справочник.Организации" Тогда
						
			СоответствиеХранилища = СоответствиеХранилищ.Получить(ИмяОбъектаХранилища);
			Если СоответствиеХранилища = Неопределено Тогда
				СоответствиеХранилища = Новый Массив;
			КонецЕсли;
			
			СоответствиеХранилища.Добавить(Новый Структура("ИмяФункциональнойОпции,ИмяХранилища", ИмяФункциональнойОпции, МетаданныеФункциональнойОпции.Хранение.Имя));
			СоответствиеХранилищ.Вставить(ИмяОбъектаХранилища, СоответствиеХранилища);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Организации.Ссылка КАК Организация";
		
	Для каждого СтруктураОписания Из МассивФункциональныхОпцийСправочникаОрганизации Цикл

		ТекстЗапроса = ТекстЗапроса +
			",
			|	Организации." + СтруктураОписания.ИмяХранилища + " КАК " +  СтруктураОписания.ИмяФункциональнойОпции;
						
	КонецЦикла;
	
	Для каждого СоответствиеХранилища Из СоответствиеХранилищ Цикл
		
		МетаданныеОбъектаХранилища = Метаданные.НайтиПоПолномуИмени(СоответствиеХранилища.Ключ);
		
		СоответствиеПериодичностиХранилищ.Вставить(СоответствиеХранилища.Ключ, МетаданныеОбъектаХранилища.ПериодичностьРегистраСведений);
		
		Если ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъектаХранилища) = "РегистрыСведений" Тогда
			
			Для каждого СтруктураОписания Из СоответствиеХранилища.Значение Цикл

				ТекстЗапроса = ТекстЗапроса +
					",
					|	" + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + "." + СтруктураОписания.ИмяХранилища + " КАК " +  СтруктураОписания.ИмяФункциональнойОпции;
						
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ПОМЕСТИТЬ " + ИмяВТФункциональныеОпцииОрганизаций + "
		|ИЗ Справочник.Организации КАК Организации";
	
	Для каждого СоответствиеХранилища Из СоответствиеХранилищ Цикл
			
		ПериодичностьРегистраСведений = СоответствиеПериодичностиХранилищ.Получить(СоответствиеХранилища.Ключ);
		
		Если ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ПутьКОбъектуХранилища = СоответствиеХранилища.Ключ;
		Иначе
			ПутьКОбъектуХранилища = СоответствиеХранилища.Ключ + ".СрезПоследних";
		КонецЕсли;
				
		ТекстЗапроса = ТекстЗапроса +
			"
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПутьКОбъектуХранилища + " КАК " + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + "
			|		ПО Организации.Ссылка = " + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + ".Организация";
			
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Подготавливает запрос, формирующий временную таблицу ВТКадровыеДанныеФизическихЛиц.
//
//	Параметры - повторяют по своему смыслу одноименные параметры процедуры СоздатьНаДатуВТКадровыеДанныеФизическихЛиц
//			см. КадровыйУчет.КадровыеДанныеФизическихЛиц(), за исключением:
//
//		ИмяВременнойТаблицыОтборовФизическихЛиц - Строка, имя временной таблице в которой присутствует как минимум два поля
//													Период - Дата, ФизическоеЛицо - Справочник.ФизическиеЛица.
//
// Возвращаемое значение:
//	Запрос - подготовленный запрос.
//
Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ИмяВТКадровыеДанныеФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	
	ТекстЗапросаВременныхТаблиц = "";
	
	ИменаВТКУничтожению = Новый Массив;
	
	НеобходимаТаблицаДокументов  = Ложь;

	// Построим запрос для получения данных
	ТекстВыбрать = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " РАЗЛИЧНЫЕ";
 	ТекстЗапросаПоФизЛицам = ТекстВыбрать;
	ТекстЗапросаКадровыеДанные = ТекстВыбрать;
	
	ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам + 
		"
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	СписокФизЛиц.Период КАК Период";
		
	ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
		"
		|	ДанныеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеФизическихЛиц.Период КАК Период";
		
	НеобходимыеТаблицы = Новый Структура;
	НеобходимыеТаблицыКонтактнойИнформации = Новый Структура;
	МассивИсключаемыхДанных = Новый Массив;
	
	РеквизитыСправочникаФизическиеЛица = Метаданные.Справочники["ФизическиеЛица"].Реквизиты;
	
	Для Каждого ЭлементМассиваПолей Из КадровыеДанные Цикл
		
		ЭлементМассиваПолей = СокрЛП(ЭлементМассиваПолей);
		
		Если ОпуститьОбработкуПоляФизическогоЛица(ЭлементМассиваПолей) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементМассиваПолей <> "ФизическоеЛицо" Тогда
			
			Если НеобходимыДанныеДокументов(ЭлементМассиваПолей) Тогда 
				
	            ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные + 
					",
					|	ДокументыФизическихЛиц." + ЭлементМассиваПолей + " КАК " + ЭлементМассиваПолей; 
										
				НеобходимаТаблицаДокументов = Истина;
				
			ИначеЕсли НеобходимыФИО(ЭлементМассиваПолей) Тогда 
				
				 ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные + 
				 	",
					|	" + ПутьКДаннымФИОПоИмениЗапрашиваемыхДанных(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей; 
										
				НеобходимыеТаблицы.Вставить("ФИОФизическихЛиц");
				
			ИначеЕсли НеобходимоГражданство(ЭлементМассиваПолей) Тогда
				
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
					",
					|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхГражданства(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей; 
									
				НеобходимыеТаблицы.Вставить("ГражданствоФизическихЛиц");
				
			ИначеЕсли НеобходимаКонтактнаяИнформация(ЭлементМассиваПолей) Тогда
				
				ПозицияПредставление = Найти(ВРег(ЭлементМассиваПолей), "ПРЕДСТАВЛЕНИЕ");
				Если ПозицияПредставление > 0 Тогда
					
					ИмяПоляЗапрашиваемыхДанных = Лев(ЭлементМассиваПолей, ПозицияПредставление - 1);
					ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
						",
						|	ЕСТЬNULL(" + ИмяПоляЗапрашиваемыхДанных + "ФизическиеЛица.Представление, """") КАК " + ЭлементМассиваПолей;
						
				Иначе
					
					ИмяПоляЗапрашиваемыхДанных = ЭлементМассиваПолей;
					ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
						",
						|	ВЫРАЗИТЬ(ЕСТЬNULL(" + ЭлементМассиваПолей + "ФизическиеЛица.ЗначенияПолей, """") КАК СТРОКА(1000)) КАК " + ЭлементМассиваПолей;
						
				КонецЕсли; 
				
				НеобходимыеТаблицыКонтактнойИнформации.Вставить(ИмяПоляЗапрашиваемыхДанных);
				
			ИначеЕсли ВРег(ЭлементМассиваПолей) = "ФИЗИЧЕСКОЕЛИЦОКОД" Тогда
				
				ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
					",
					|	ФизическиеЛица.Код КАК " + ЭлементМассиваПолей;
					
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные + 
					",
					|	ДанныеФизическихЛиц.Код КАК " + ЭлементМассиваПолей;
									
			ИначеЕсли ВРег(ЭлементМассиваПолей) = "ФИЗИЧЕСКОЕЛИЦОНАИМЕНОВАНИЕ" Тогда
				
				ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
					",
					|	ФизическиеЛица.Наименование КАК " + ЭлементМассиваПолей;
					
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
					",
					|	ДанныеФизическихЛиц.Наименование КАК " + ЭлементМассиваПолей;
									
			ИначеЕсли РеквизитыСправочникаФизическиеЛица.Найти(ЭлементМассиваПолей) = Неопределено И ВРег(ЭлементМассиваПолей) <> "НАИМЕНОВАНИЕ"  И ВРег(ЭлементМассиваПолей) <> "КОД" Тогда
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Справочник ""Физические лица"" не содержит реквизита ""%1""'"),
									ЭлементМассиваПолей);
				
			Иначе
				
				ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
					",
					|	ФизическиеЛица." + ЭлементМассиваПолей + " КАК " + ЭлементМассиваПолей;
					
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
					",
					|	ДанныеФизическихЛиц." + ЭлементМассиваПолей + " КАК " + ЭлементМассиваПолей;								
					
			КонецЕсли;							
				
		КонецЕсли;
		
	КонецЦикла;	
	
	НеобходимыДопТаблицы = НеобходимаТаблицаДокументов ИЛИ НеобходимыеТаблицы.Количество() > 0 ИЛИ НеобходимыеТаблицыКонтактнойИнформации.Количество() > 0;
	
	Если НеобходимыДопТаблицы Тогда
		
		ИмяВТДанныеФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТДанныеФизическихЛиц");
		
		ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
			"
			|ПОМЕСТИТЬ " + ИмяВТДанныеФизическихЛиц;
			
		ИменаВТКУничтожению.Добавить(ИмяВТДанныеФизическихЛиц);
		
	Иначе
		
		ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
			"
			|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеФизическихЛиц;
														  
	КонецЕсли;                                     	
	
	ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
		" 
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВременнойТаблицыОтборовФизическихЛиц + " КАК СписокФизЛиц 
		|	ПО ФизическиеЛица.Ссылка = СписокФизЛиц." + ПоляОтбораФизическихЛиц.ФизическоеЛицо; 
		
	Если НеобходимаТаблицаДокументов Тогда
			
		ИмяВТДокументыФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТДокументыФизическихЛиц");
		ИмяВТМаксимальныеПериодыДокументов = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТМаксимальныеПериодыДокументов");
		
		ТекстЗапроса = ТекстВыбрать + "
			|	МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
			|	ИсточникДанных." + ПоляОтбораФизическихЛиц.Период + " КАК ПериодСреза,
			|	ДокументыФизическихЛиц.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ " + ИмяВТМаксимальныеПериодыДокументов + "
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВременнаяТаблицаОтборовФизическихЛиц КАК ИсточникДанных
			|		ПО ДокументыФизическихЛиц.Физлицо = ИсточникДанных." + ПоляОтбораФизическихЛиц.ФизическоеЛицо + "
			|			И ДокументыФизическихЛиц.Период <= ИсточникДанных." + ПоляОтбораФизическихЛиц.Период + "
			|ГДЕ
			|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
			|	
			|СГРУППИРОВАТЬ ПО
			|	ДокументыФизическихЛиц.Физлицо,
			|	ИсточникДанных." + ПоляОтбораФизическихЛиц.Период +
			ЗарплатаКадры.РазделительЗапросов() + 
			ТекстВыбрать + "
			|	ДокументыФизическихЛиц.Физлицо,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)) КАК ДокументВид,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.Серия, """") КАК ДокументСерия,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.Номер, """") КАК ДокументНомер,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументДатаВыдачи,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументСрокДействия,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.КемВыдан, """") КАК ДокументКемВыдан,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.КодПодразделения, """") КАК ДокументКодПодразделения,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.Представление, """") КАК ДокументПредставление,
			|	ДокументыСрез.ПериодСреза
			|ПОМЕСТИТЬ " + ИмяВТДокументыФизическихЛиц + "
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТМаксимальныеПериодыДокументов + " КАК ДокументыСрез
			|		ПО ДокументыФизическихЛиц.Период = ДокументыСрез.Период
			|			И ДокументыФизическихЛиц.Физлицо = ДокументыСрез.Физлицо
			|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВременнаяТаблицаОтборовФизическихЛиц", ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		ИменаВТКУничтожению.Добавить(ИмяВТДокументыФизическихЛиц);
		ИменаВТКУничтожению.Добавить(ИмяВТМаксимальныеПериодыДокументов);
		
	КонецЕсли;
														
	Если НеобходимыДопТаблицы Тогда
		
		ЗарплатаКадры.ОбъединитьТекстыЗапросов(
			ТекстЗапроса,
    		ТекстЗапросаПоФизЛицам +
				" 
				|ИНДЕКСИРОВАТЬ ПО 
				|	ФизическоеЛицо;
				|
				|//////////////////////////////////////////////////////////////////////
				|" + ТекстЗапросаКадровыеДанные + "
				|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеФизическихЛиц + "
				|ИЗ " + ИмяВТДанныеФизическихЛиц + " КАК ДанныеФизическихЛиц");
		
		Если НеобходимаТаблицаДокументов Тогда
				
			ТекстЗапроса = ТекстЗапроса +
				"
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТДокументыФизическихЛиц + " КАК ДокументыФизическихЛиц
				|	ПО ДанныеФизическихЛиц.ФизическоеЛицо = ДокументыФизическихЛиц.ФизЛицо
				|		И ДанныеФизическихЛиц.Период = ДокументыФизическихЛиц.ПериодСреза";
				
		КонецЕсли;

		Если НеобходимыеТаблицыКонтактнойИнформации.Количество() >  0 Тогда
			
			ИмяВТОтборКонтактнойИнформации = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОтборКонтактнойИнформации");
			ИмяВТКонтактнаяИнформация = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКонтактнаяИнформация");
			
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ОтборыФизическихЛиц.ФизическоеЛицо,
				|	ВидыКонтактнойИнформации.Ссылка КАК Вид
				|ПОМЕСТИТЬ ВТОтборКонтактнойИнформации
				|ИЗ
				|	ВТОтборовФизическихЛиц КАК ОтборыФизическихЛиц
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				|		ПО (ВидыКонтактнойИнформации.Ссылка В (&СписокВидовКонтактнойИнформации))";
				
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = СтрЗаменить(
				ТекстЗапросаФильтрДляПолученияКонтактнойИнформации,
				"ВТОтборовФизическихЛиц",
				ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = СтрЗаменить(
				ТекстЗапросаФильтрДляПолученияКонтактнойИнформации,
				"ФизическоеЛицо",
				ПоляОтбораФизическихЛиц.ФизическоеЛицо);
			
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = СтрЗаменить(
				ТекстЗапросаФильтрДляПолученияКонтактнойИнформации,
				"ВТОтборКонтактнойИнформации",
				ИмяВТОтборКонтактнойИнформации);
				
			СписокВидовКонтактнойИнформации = "";
				
			Для Каждого ЭлементНеобходимыеТаблицыКонтактнойИнформации Из НеобходимыеТаблицыКонтактнойИнформации Цикл
				
				ТаблицаКонтактнойИнформации = ЭлементНеобходимыеТаблицыКонтактнойИнформации.Ключ;
				
				СтрокаОтборКонтактнойИнформации = "ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации." + ТаблицаКонтактнойИнформации + "ФизическиеЛица)";
				
				СписокВидовКонтактнойИнформации = ?(ПустаяСтрока(СписокВидовКонтактнойИнформации), "", СписокВидовКонтактнойИнформации + ",")
					+ СтрокаОтборКонтактнойИнформации;
				
				ТекстЗапроса = ТекстЗапроса + "
					|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКонтактнаяИнформация + " КАК " + ТаблицаКонтактнойИнформации + "ФизическиеЛица
					|			ПО " + ТаблицаКонтактнойИнформации + "ФизическиеЛица.Объект = ДанныеФизическихЛиц.ФизическоеЛицо
					|				И " + ТаблицаКонтактнойИнформации + "ФизическиеЛица.Вид = " + СтрокаОтборКонтактнойИнформации;
			
			КонецЦикла;
				
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = СтрЗаменить(
				ТекстЗапросаФильтрДляПолученияКонтактнойИнформации,
				"&СписокВидовКонтактнойИнформации",
				СписокВидовКонтактнойИнформации);
				
			ОписаниеВременнойТаблицы = ОписаниеВременнойТаблицыОтборовКонтактнойИнформации(
				ИмяВТОтборКонтактнойИнформации,
				"ФизическоеЛицо",
				"Вид");
				
			ЗапросВТКонтактнаяИнформация = ЗапросВТКонтактнаяИнформация(
				ТолькоРазрешенные,
				ИмяВТКонтактнаяИнформация,
				"Справочник.ФизическиеЛица",
				ОписаниеВременнойТаблицы);
				
			ТекстЗапроса = ТекстЗапросаФильтрДляПолученияКонтактнойИнформации
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ЗапросВТКонтактнаяИнформация.Текст
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ТекстЗапроса;
				
			ИменаВТКУничтожению.Добавить(ИмяВТОтборКонтактнойИнформации);
			ИменаВТКУничтожению.Добавить(ИмяВТКонтактнаяИнформация);
			
		КонецЕсли;
		
		МассивИзмерений = Новый Массив;
		МассивИзмерений.Добавить("Период");
		МассивИзмерений.Добавить("ФизическоеЛицо");
		
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
		СоответствиеИзмеренийПолямТаблицы.Вставить("Период", ПоляОтбораФизическихЛиц.Период);
		СоответствиеИзмеренийПолямТаблицы.Вставить("ФизическоеЛицо", ПоляОтбораФизическихЛиц.ФизическоеЛицо);
			
		Для Каждого ЭлементНеобходимыеТаблицы Из НеобходимыеТаблицы Цикл
			
			ИмяТаблицыСрезаПоследних = ЭлементНеобходимыеТаблицы.Ключ;
			
			Если НЕ ПустаяСтрока(ТекстЗапросаВременныхТаблиц) Тогда
				ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ЗарплатаКадры.РазделительЗапросов();
			КонецЕсли; 
			
			ИмяВТСрезаПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТ" + ИмяТаблицыСрезаПоследних);
		
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			
				ПоляОтбораПериодическихДанных.Свойство(ИмяТаблицыСрезаПоследних, ПоляОтбора);
			
			КонецЕсли;
			 
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса(ИмяТаблицыСрезаПоследних, МассивИзмерений); 
			
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
					ТолькоРазрешенные, 
					КоллекцииПолей, 
					ИмяТаблицыСрезаПоследних, 
					ИмяВременнойТаблицыОтборовФизическихЛиц, 
					ИмяВТСрезаПоследних, 
					ПоляОтбора, 
					, 
					, 
					Истина,
					СоответствиеИзмеренийПолямТаблицы);
				
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
			
			ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ЗапросВТИмяРегистраСрез.Текст;
			
			ИменаВТКУничтожению.Добавить(ИмяВТСрезаПоследних);
			
			ТекстЗапроса = ТекстЗапроса +
				"
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСрезаПоследних + " КАК " + ИмяТаблицыСрезаПоследних + "СрезПоследних  
				|	ПО ДанныеФизическихЛиц.ФизическоеЛицо = " + ИмяТаблицыСрезаПоследних + "СрезПоследних.ФизическоеЛицо
				|		И ДанныеФизическихЛиц.Период = " + ИмяТаблицыСрезаПоследних + "СрезПоследних.Период";
				
		КонецЦикла;	

	Иначе	
		ТекстЗапроса = ТекстЗапросаПоФизЛицам;	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
	
	Если НЕ ПустаяСтрока(ТекстЗапросаВременныхТаблиц) Тогда
		ТекстЗапроса = ТекстЗапросаВременныхТаблиц + ЗарплатаКадры.РазделительЗапросов() + ТекстЗапроса;
	КонецЕсли;
	
	ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(ТекстЗапроса, ИменаВТКУничтожению);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Подготавливает запрос, Формирующий временную таблицу ВТКадровыеДанныеСотрудников.
//
//	Параметры - повторяют по своему смыслу одноименные параметры процедуры СоздатьНаДатуВТКадровыеДанныеСотрудников
//			см. КадровыйУчет.КадровыеДанныеСотрудников(), за исключением:
//
//		ИмяВременнойТаблицыОтборовСотрудников - Строка, имя временной таблице в которой присутствует как минимум два поля
//													Период - Дата, Сотрудник - Справочник.Сотрудники.
//
// Возвращаемое значение:
//	Запрос - подготовленный запрос.
//
Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ИмяВТКадровыеДанныеСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	ФОИспользоватьКадровыйУчет = Ложь;
	
	Запрос = Новый Запрос;
	
	РеквизитыСправочникаСотрудники = Метаданные.Справочники["Сотрудники"].Реквизиты;
	ИменаВТКУничтожению = Новый Массив;

	МассивКадровыхДанныхФизическогоЛица = Новый Массив;
	
	МассивФункциональныхОпций = Новый Массив;
	
	НеобходимыДанныеПодразделения = Ложь;
	НеобходимыДанныеДолжности = Ложь;
	
	НеобходимыТекущиеДанныеСотрудника  = Ложь;
	НеобходимаТекущаяТарифнаяСтавкаСотрудника  = Ложь;
	
	НеобходимыСведенияПриказаОПриеме = Ложь;
	НеобходимыСведенияПриказаОбУвольнении = Ложь;
	
	НеобходимПризнакОформленПриемНаРаботу = Ложь;
	
	СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеВидЗанятости = Ложь;
	
	ТекстЗапроса = "";
	
	ТекстЗапросаВременныхТаблиц = "";
	
	ТекстВыбрать = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " РАЗЛИЧНЫЕ";
	
	Для Каждого ЭлементМассиваПолей Из КадровыеДанные Цикл
		
		Если ОпуститьОбработкуПоляСотрудника(ЭлементМассиваПолей) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ЭлементМассиваПолей) = "ОРГАНИЗАЦИЯ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация = Истина;
		КонецЕсли; 
		
		Если ВРег(ЭлементМассиваПолей) = "ПОДРАЗДЕЛЕНИЕ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение = Истина;
		КонецЕсли; 
		
		Если ВРег(ЭлементМассиваПолей) = "ДОЛЖНОСТЬ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность = Истина;
		КонецЕсли;
		
		Если ВРег(ЭлементМассиваПолей) = "ВИДЗАНЯТОСТИ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеВидЗанятости = Истина;
		КонецЕсли;

		Если КадровыйУчет.НеобходимыСведенияПриказаОПриеме(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + КадровыйУчет.ПутьКДаннымПоИмениДанныхПриказаОПриеме(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
			НеобходимыСведенияПриказаОПриеме = Истина;
			
		ИначеЕсли НеобходимыСведенияПриказаОбУвольнении(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПоИмениДанныхПриказаОбУвольнении(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
			НеобходимыСведенияПриказаОбУвольнении = Истина;
			
		ИначеЕсли НеобходимыДанныеСотрудника(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
		ИначеЕсли КадровыйУчет.НеобходимыТекущиеДанныеСотрудника(ЭлементМассиваПолей) Тогда
				
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
			
			НеобходимыТекущиеДанныеСотрудника = Истина;
			
		ИначеЕсли НеобходимаТекущаяТарифнаяСтавкаСотрудника(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
			
			НеобходимаТекущаяТарифнаяСтавкаСотрудника = Истина;
							
		ИначеЕсли НеобходимПризнакОформленПриемНаРаботу(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПризнакаОформленПриемНаРаботу() + " КАК ОформленПриемНаРаботу";
				
			НеобходимПризнакОформленПриемНаРаботу = Истина;
				
		ИначеЕсли РеквизитыСправочникаСотрудники.Найти(ЭлементМассиваПолей) = Неопределено 
			И ВРег(ЭлементМассиваПолей) <> "НАИМЕНОВАНИЕ" 
			И ВРег(ЭлементМассиваПолей) <> "КОД" Тогда
			
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Справочник ""Сотрудники"" не содержит реквизита ""%1""'"),
					ЭлементМассиваПолей);
		Иначе
		
			ТекстЗапроса = ТекстЗапроса +
				",
				|	ДанныеСотрудников." + ЭлементМассиваПолей + " КАК " + ЭлементМассиваПолей;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивФункциональныхОпций.Количество() > 0 И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			",
			|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Организация") + " КАК Организация";
			
	КонецЕсли; 
		
	Если НеобходимыДанныеПодразделения И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			",
			|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Подразделение") + " КАК Подразделение";
			
	КонецЕсли; 
	
	ИмяВТКадровыеДанныеФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадровыеДанныеФизическихЛиц");
		
	Если МассивКадровыхДанныхФизическогоЛица.Количество() > 0 Тогда
		
		ИмяВТСписокФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСписокФизическихЛиц");
		
		ЗапросВТКадровыеДанныеФизическихЛиц = КадровыйУчет.ЗапросВТКадровыеДанныеФизическихЛиц(
				ТолькоРазрешенные, 
				ИмяВТКадровыеДанныеФизическихЛиц, 
				ИмяВТСписокФизическихЛиц,
				КадровыйУчет.ПоляОтбораФизическихЛиц("ФизическоеЛицо,Период"),
				МассивКадровыхДанныхФизическогоЛица, 
				ПоляОтбораПериодическихДанных);
		
		ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТКадровыеДанныеФизическихЛиц);
		
		ТекстЗапроса =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|   ДанныеСотрудников." + ПоляОтбораСотрудников.Период + " КАК Период,
			|	ДанныеСотрудников." + ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ " + ИмяВТСписокФизическихЛиц + "
			|ИЗ
			|	" + ИмяВременнойТаблицыОтборовСотрудников + " КАК ДанныеСотрудников" +
			ЗарплатаКадры.РазделительЗапросов() +
			ЗапросВТКадровыеДанныеФизическихЛиц.Текст +
			ЗарплатаКадры.РазделительЗапросов() +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	" + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " КАК Сотрудник" + ТекстЗапроса + ",
			|	КадровыеДанныеФизическихЛиц.*";
			
		ИменаВТКУничтожению.Добавить(ИмяВТСписокФизическихЛиц);
		ИменаВТКУничтожению.Добавить(ИмяВТКадровыеДанныеФизическихЛиц);
		
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	" + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " КАК Период,
			|	" + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " КАК Сотрудник" + ТекстЗапроса;
		
		Если КадровыеДанные.Найти("ФизическоеЛицо") <> Неопределено Тогда
				
			ТекстЗапроса = ТекстЗапроса +
				",
				|	ДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо";
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеСотрудников + "
		|ИЗ
		|	" + ИмяВременнойТаблицыОтборовСотрудников + " КАК " + ИмяВременнойТаблицыОтборовСотрудников + "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК ДанныеСотрудников
		|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ДанныеСотрудников.Ссылка";
		
	Если НеобходимыТекущиеДанныеСотрудника
		ИЛИ (НЕ ФОИспользоватьКадровыйУчет И (НеобходимыДанныеДолжности ИЛИ НеобходимыДанныеПодразделения)) Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ТекущиеКадровыеДанныеСотрудников.Сотрудник";
		
	КонецЕсли;
	
	Если МассивКадровыхДанныхФизическогоЛица.Количество() > 0 Тогда
			
		ТекстЗапроса = ТекстЗапроса +
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадровыеДанныеФизическихЛиц + " КАК КадровыеДанныеФизическихЛиц
			|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
			|			И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = КадровыеДанныеФизическихЛиц.Период";
		
	КонецЕсли;
	
	Если ФОИспользоватьКадровыйУчет Тогда
		
		МассивИзмерений = Новый Массив;
		МассивИзмерений.Добавить("Период");
		МассивИзмерений.Добавить("Сотрудник");
			
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
		СоответствиеИзмеренийПолямТаблицы.Вставить("Период", ПоляОтбораСотрудников.Период);
		СоответствиеИзмеренийПолямТаблицы.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
		
		Если НеобходимПризнакОформленПриемНаРаботу Тогда
			
			ИмяВТИзмеренияДатыДляТаблицыПриказов = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТИзмеренияДатыДляТаблицыПриказов");
			ИмяВТКадроваяИсторияСотрудниковВсеСобытия = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковСобытиеПрием");
			ИмяВТКадроваяИсторияСотрудниковКоличествоСобытий = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковКоличествоСобытий");
			
			ПоляОтбора = Неопределено;
				 
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
				
			ЗапросВТИмяРегистра = ЗарплатаКадры.ЗапросВТИмяРегистра(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"КадроваяИсторияСотрудников", 
				ИмяВТИзмеренияДатыДляТаблицыПриказов, 
				ИмяВТКадроваяИсторияСотрудниковВсеСобытия, 
				ПоляОтбора, 
				СоответствиеИзмеренийПолямТаблицы);
					
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистра);
					
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ИзмеренияДаты." + ПоляОтбораСотрудников.Сотрудник + " КАК Сотрудник,
				|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
				|	ИзмеренияДаты." + ПоляОтбораСотрудников.Период + " КАК ДатаОкончания
				|ПОМЕСТИТЬ " + ИмяВТИзмеренияДатыДляТаблицыПриказов + "
				|ИЗ
				|	" + ИмяВременнойТаблицыОтборовСотрудников + " КАК ИзмеренияДаты"
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ЗапросВТИмяРегистра.Текст
				+ ЗарплатаКадры.РазделительЗапросов()
				+ "ВЫБРАТЬ
				|	КадроваяИсторияСотрудников.Сотрудник,
				|	КОЛИЧЕСТВО(КадроваяИсторияСотрудников.Период) КАК Количество
				|ПОМЕСТИТЬ "+  ИмяВТКадроваяИсторияСотрудниковКоличествоСобытий + "
				|ИЗ
				|	" + ИмяВТКадроваяИсторияСотрудниковВсеСобытия + " КАК КадроваяИсторияСотрудников
				|СГРУППИРОВАТЬ ПО
				|	КадроваяИсторияСотрудников.Сотрудник
				|"
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ТекстЗапроса;
				
			ТекстЗапроса = ТекстЗапроса +
				"
				|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудниковКоличествоСобытий + " КАК КоличествоКадровыхСобытий
				| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = КоличествоКадровыхСобытий.Сотрудник";
				
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковКоличествоСобытий);
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковВсеСобытия);
			ИменаВТКУничтожению.Добавить(ИмяВТИзмеренияДатыДляТаблицыПриказов);
			
		КонецЕсли; 
		
		Если МассивФункциональныхОпций.Количество() > 0
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеВидЗанятости
			ИЛИ НеобходимыДанныеДолжности
			ИЛИ НеобходимыДанныеПодразделения Тогда
			
			ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковСрезПоследних");
			
			ПоляОтбора = Неопределено;
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
				ПоляОтбораПериодическихДанных.Свойство("КадроваяИсторияСотрудников", ПоляОтбора);
			КонецЕсли;
				 
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
				
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"КадроваяИсторияСотрудников", 
				ИмяВременнойТаблицыОтборовСотрудников, 
				ИмяВТКадроваяИсторияСотрудниковСрезПоследних, 
				ПоляОтбора, 
				, 
				, 
				Истина,
				СоответствиеИзмеренийПолямТаблицы);
					
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
				
			ТекстЗапроса = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстЗапроса;
				
			ТекстЗапроса = ТекстЗапроса +
				"
				|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудниковСрезПоследних + " КАК КадроваяИсторияСотрудников
				| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = КадроваяИсторияСотрудников.Сотрудник
				|		И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = КадроваяИсторияСотрудников.Период";
				
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковСрезПоследних);
			
		КонецЕсли;
		
		Если НеобходимыСведенияПриказаОПриеме
			ИЛИ НеобходимыСведенияПриказаОбУвольнении Тогда
			
			ИмяВТИзмеренияДатыДляТаблицыПриказов = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТИзмеренияДатыДляТаблицыПриказов");
			ИмяВТКадроваяИсторияСотрудников = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудников");
			
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
				
			ПоляОтбора = Новый Массив;
			СтруктураОтбора = Новый Структура(
				"ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				"ВидСобытия",
				"В",
				"ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
			ПоляОтбора.Добавить(СтруктураОтбора);
			
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистра(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"КадроваяИсторияСотрудников", 
				ИмяВТИзмеренияДатыДляТаблицыПриказов, 
				ИмяВТКадроваяИсторияСотрудников, 
				ПоляОтбора, 
				СоответствиеИзмеренийПолямТаблицы);
					
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
				
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ИзмеренияДаты." + ПоляОтбораСотрудников.Сотрудник + " КАК Сотрудник,
				|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
				|	ИзмеренияДаты." + ПоляОтбораСотрудников.Период + " КАК ДатаОкончания
				|ПОМЕСТИТЬ " + ИмяВТИзмеренияДатыДляТаблицыПриказов + "
				|ИЗ
				|	" + ИмяВременнойТаблицыОтборовСотрудников + " КАК ИзмеренияДаты"
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ЗапросВТИмяРегистраСрез.Текст
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ТекстЗапроса;
			
			Если НеобходимыСведенияПриказаОПриеме Тогда
				
				ТекстЗапроса = ТекстЗапроса +
					"
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудников + " КАК ПриказыОПриеме
					| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ПриказыОПриеме.Сотрудник
					|		И ПриказыОПриеме.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)";
				
			КонецЕсли; 
				
			Если НеобходимыСведенияПриказаОбУвольнении Тогда
				
				ТекстЗапроса = ТекстЗапроса +
					"
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудников + " КАК ПриказыОбУвольнении
					| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ПриказыОбУвольнении.Сотрудник
					|		И ПриказыОбУвольнении.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
				
			КонецЕсли; 
				
			ИменаВТКУничтожению.Добавить(ИмяВТИзмеренияДатыДляТаблицыПриказов);
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудников);
			
		КонецЕсли;
		
	КонецЕсли; 
		
	Если НеобходимыДанныеПодразделения Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ДанныеПодразделения
			| 	ПО " + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Подразделение") + " = ДанныеПодразделения.Ссылка";
			
	КонецЕсли; 
	
	Если МассивФункциональныхОпций.Количество() > 0 Тогда
		
		ИмяВТФункциональныеОпцииОрганизаций = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТФункциональныеОпцииОрганизаций");
		
		ЗапросВТФункциональныеОпцииОрганизаций = ЗапросВТФункциональныеОпцииОрганизаций(
				ТолькоРазрешенные, 
				ИмяВТФункциональныеОпцииОрганизаций,
				МассивФункциональныхОпций);
		
		ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТФункциональныеОпцииОрганизаций);
		
		ТекстЗапроса = 
			ЗапросВТФункциональныеОпцииОрганизаций.Текст +
			ЗарплатаКадры.РазделительЗапросов() +
			ТекстЗапроса +
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТФункциональныеОпцииОрганизаций + " КАК ФункциональныеОпции
			| 	ПО " + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Организация") + " = ФункциональныеОпции.Организация";
			
		ИменаВТКУничтожению.Добавить(ИмяВТФункциональныеОпцииОрганизаций);
		
	КонецЕсли; 
	
	ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(ТекстЗапроса, ИменаВТКУничтожению);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает структуру, содержащую описание временной таблицы, используемой в качестве фильтра
// для получения контактной информации.
//
//	Параметры:
//		ИмяВТОтборОбъектов - Строка, имя временной таблицы, служащей отбором для получаемой контактной информации.
//		ИмяРеквизитаОбъект - Строка, имя реквизита во временной таблице, содержащего объект отбора контактной информации.
//		ИмяРеквизитаВид - Строка, имя реквизита во временной таблице, содержащего вид контактной информации, если не указано
//							в результирующую таблицу будет помещена контактная информация любого вида.
//		ИмяРеквизитаТип - Строка, имя реквизита во временной таблице, содержащего тип контактной информации, если не указано
//							в результирующую таблицу будет помещена контактная информация любого типа.
//
//	Возвращаемое значение:
//		Структура - содержащая ключи:
//			ИмяВТОтборОбъектов,
//			ИмяРеквизитаОбъект,
//			ИмяРеквизитаВид,
//			ИмяРеквизитаТип.
//
Функция ОписаниеВременнойТаблицыОтборовКонтактнойИнформации(ИмяВТОтборОбъектов, ИмяРеквизитаОбъект, ИмяРеквизитаВид = "", ИмяРеквизитаТип = "") Экспорт
	
	ОписаниеВременнойТаблицы = Новый Структура;
	
	ОписаниеВременнойТаблицы.Вставить("ИмяВТОтборОбъектов", ИмяВТОтборОбъектов);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаОбъект", ИмяРеквизитаОбъект);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаВид", ИмяРеквизитаВид);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаТип", ИмяРеквизитаТип);
	
	Возврат ОписаниеВременнойТаблицы;
	
КонецФункции

Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если КадровыеДвижения.Количество() > 0 Тогда
		Движения.КадроваяИсторияСотрудников.Записывать = Истина;
	КонецЕсли; 
	
	Если ЗаполнятьНаборЗаписей Тогда
		КадровыеДвижения.Колонки.ДатаСобытия.Имя = "Период";
		Движения.КадроваяИсторияСотрудников.Загрузить(КадровыеДвижения);
	КонецЕсли; 
	
	Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
		И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
		
		Движения.КадроваяИсторияСотрудников.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
		
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизаций();
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("СписокФизическихЛиц");
	
	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("ДАТАПРИЕМА", 							"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1,1,1,0,0,0))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ДАТАУВОЛЬНЕНИЯ", 						"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1,1,1,0,0,0))");
	
	СоответствиеЗапрашиваемыхДанных.Вставить("ОРГАНИЗАЦИЯ", 	"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ПОДРАЗДЕЛЕНИЕ", 	"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ДОЛЖНОСТЬ", 		"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВИДЗАНЯТОСТИ", 	"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, """")");
	
	СоответствиеЗапрашиваемыхДанных.Вставить("КОЛИЧЕСТВОСТАВОК", 					"1");
	СоответствиеЗапрашиваемыхДанных.Вставить("ОСНОВНОЕРАБОЧЕЕМЕСТОВОРГАНИЗАЦИИ",	"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации, ЛОЖЬ)");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩАЯОРГАНИЗАЦИЯ", 					"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩЕЕПОДРАЗДЕЛЕНИЕ", 				"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩАЯДОЛЖНОСТЬ", 					"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩИЙВИДЗАНЯТОСТИ", 				"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, """")");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимаТарифнаяСтавкаСотрудника(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТарифнаяСтавка")
		ИЛИ ИмяПоля = ВРег("РазмерТарифнойСтавки")
		ИЛИ ИмяПоля = ВРег("Надбавка")
		ИЛИ ИмяПоля = "ФОТ";
		
КонецФункции
 
Функция НеобходимыТекущиеДанныеСотрудника(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДатаПриема")
		ИЛИ ИмяПоля = ВРег("ДатаУвольнения")
		ИЛИ ИмяПоля = ВРег("Организация")
		ИЛИ ИмяПоля = ВРег("Подразделение")
		ИЛИ ИмяПоля = ВРег("Должность")
		ИЛИ ИмяПоля = ВРег("ВидЗанятости")
		ИЛИ ИмяПоля = ВРег("КоличествоСтавок")
		ИЛИ ИмяПоля = ВРег("ОсновноеРабочееМестоВОрганизации")
		ИЛИ ИмяПоля = ВРег("ТекущаяОрганизация")
		ИЛИ ИмяПоля = ВРег("ТекущееПодразделение")
		ИЛИ ИмяПоля = ВРег("ТекущаяДолжность")
		ИЛИ ИмяПоля = ВРег("ТекущийВидЗанятости");

КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩАЯТАРИФНАЯСТАВКА", 		"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩИЙФОТ", 					"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
	СоответствиеЗапрашиваемыхДанных.Вставить("РАЗМЕРТЕКУЩЕЙТАРИФНОЙСТАВКИ", "ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОПриеме")
		ИЛИ ИмяПоля = ВРег("ПриказОПриемеДата")
		ИЛИ ИмяПоля = ВРег("ПриказОПриемеНомер")
		ИЛИ ИмяПоля = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора");
		
КонецФункции

Функция ПутьКДаннымПоИмениДанныхПриказаОПриеме(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
		
	СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕ",								"ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)");
	СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕДАТА",							"ДАТАВРЕМЯ(1,1,1)");
	СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕНОМЕР",							"""""");
	СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕДАТАЗАВЕРШЕНИЯТРУДОВОГОДОГОВОРА","ДАТАВРЕМЯ(1,1,1)");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает запрос, с подготовленным текстом, для создания временной таблицы, содержащей контактную информацию.
//
//	Параметры:
//		ТолькоРазрешенные - Булево - если истина - запрос строится с учетом прав доступа к объектам, содержащим
//							контактную информацию, если ложь - без учета прав доступа (возможно, для выполнения запроса
//							потребуется установить привилегированный режим).
//		ИмяВТКонтактнаяИнформация - Строка, имя временной таблицы, которая создастся в ходе выполнения запроса.
//		ПолноеИмяОбъектаМетаданных - Строка, полное имя объекта метаданных, содержащего контактную информацию
//							(например, "Справочник.ФизическиеЛица").
//		ОписаниеВременнойТаблицыОтборов - Структура, подготовленная с помощью метода
//										"ОписаниеВременнойТаблицыОтборовКонтактнойИнформации".
//
//	Возвращаемое значение:
//		Запрос.
//
Функция ЗапросВТКонтактнаяИнформация(ТолькоРазрешенные, ИмяВТКонтактнаяИнформация, ПолноеИмяОбъектаМетаданных, ОписаниеВременнойТаблицыОтборов)
	
	Запрос = Новый Запрос;
	
	// Формирование текста запроса
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.НомерСтроки,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.ЗначенияПолей
		|ПОМЕСТИТЬ ВТВсяКонтактнаяИнформация
		|ИЗ
		|	&КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборКонтактнойИнформации КАК ОтборКонтактнойИнформации
		|		ПО КонтактнаяИнформация.Ссылка = ОтборКонтактнойИнформации.РеквизитОбъекта
		|		И &ТекстОтбораКонтактнойИнформации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Вид,
		|	МИНИМУМ(ВсяКонтактнаяИнформация.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТПервыеЗначенияПоВидуКонтактнойИнформации
		|ИЗ
		|	ВТВсяКонтактнаяИнформация КАК ВсяКонтактнаяИнформация
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Тип,
		|	ВсяКонтактнаяИнформация.Вид,
		|	ВсяКонтактнаяИнформация.Представление,
		|	ВсяКонтактнаяИнформация.ЗначенияПолей
		|ПОМЕСТИТЬ ВТКонтактнаяИнформация
		|ИЗ
		|	ВТВсяКонтактнаяИнформация КАК ВсяКонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПервыеЗначенияПоВидуКонтактнойИнформации КАК ПервыеЗначенияПоВидуКонтактнойИнформации
		|		ПО ВсяКонтактнаяИнформация.Объект = ПервыеЗначенияПоВидуКонтактнойИнформации.Объект
		|			И ВсяКонтактнаяИнформация.Вид = ПервыеЗначенияПоВидуКонтактнойИнформации.Вид
		|			И ВсяКонтактнаяИнформация.НомерСтроки = ПервыеЗначенияПоВидуКонтактнойИнформации.НомерСтроки";
		
	ТекстОтбораКонтактнойИнформации = "";
	Если НЕ ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид) Тогда
		ТекстОтбораКонтактнойИнформации =  "
			|			И КонтактнаяИнформация.Вид = ОтборКонтактнойИнформации.РеквизитВид";
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип) Тогда
		ТекстОтбораКонтактнойИнформации = ТекстОтбораКонтактнойИнформации + "
			|			И КонтактнаяИнформация.Тип = ОтборКонтактнойИнформации.РеквизитТип";
	КонецЕсли;
		
	// Замена ключевых выражений
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли; 
	
	ИмяВТВсяКонтактнаяИнформация = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТВсяКонтактнаяИнформация");
	ИмяВТПервыеЗначенияПоВидуКонтактнойИнформации = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПервыеЗначенияПоВидуКонтактнойИнформации");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКонтактнаяИнформация", ИмяВТКонтактнаяИнформация);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборКонтактнойИнформации", ОписаниеВременнойТаблицыОтборов.ИмяВТОтборОбъектов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВсяКонтактнаяИнформация", ИмяВТВсяКонтактнаяИнформация);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПервыеЗначенияПоВидуКонтактнойИнформации", ИмяВТПервыеЗначенияПоВидуКонтактнойИнформации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтактнаяИнформация", ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитОбъекта", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаОбъект);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ТекстОтбораКонтактнойИнформации", ТекстОтбораКонтактнойИнформации);
	
	Если НЕ ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитВид", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид);
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитТип", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизаций()
		
	ПараметрыПолученияСотрудниковОрганизаций = Новый Структура("Организация,Подразделение");
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные", "");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода", '00010101');
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода", '00010101');

	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция НеобходимаКонтактнаяИнформация(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат 
		ИмяПоля = ВРег("АдресДляИнформирования")
		ИЛИ ИмяПоля = ВРег("АдресДляИнформированияПредставление")
		ИЛИ ИмяПоля = ВРег("АдресЗаПределамиРФ")
		ИЛИ ИмяПоля = ВРег("АдресЗаПределамиРФПредставление")
		ИЛИ ИмяПоля = ВРег("АдресМестаПроживания")
		ИЛИ ИмяПоля = ВРег("АдресМестаПроживанияПредставление")
		ИЛИ ИмяПоля = ВРег("АдресПоПрописке")
		ИЛИ ИмяПоля = ВРег("АдресПоПропискеПредставление")
		ИЛИ ИмяПоля = ВРег("ТелефонДомашний")
		ИЛИ ИмяПоля = ВРег("ТелефонДомашнийПредставление")
		ИЛИ ИмяПоля = ВРег("ТелефонРабочий")
		ИЛИ ИмяПоля = ВРег("ТелефонРабочийПредставление");
		
КонецФункции

Функция НеобходимыДанныеДокументов(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = "ДОКУМЕНТВИД"
		ИЛИ ИмяПоля = "ДОКУМЕНТСЕРИЯ"
		ИЛИ ИмяПоля = "ДОКУМЕНТНОМЕР"
		ИЛИ ИмяПоля = "ДОКУМЕНТДАТАВЫДАЧИ"
		ИЛИ ИмяПоля = "ДОКУМЕНТСРОКДЕЙСТВИЯ"
		ИЛИ ИмяПоля = "ДОКУМЕНТКЕМВЫДАН"
		ИЛИ ИмяПоля = "ДОКУМЕНТКОДПОДРАЗДЕЛЕНИЯ"
		ИЛИ ИмяПоля = "ДОКУМЕНТПРЕДСТАВЛЕНИЕ";
	
КонецФункции	

Функция НеобходимоГражданство(Знач ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = "СТРАНА";
	
КонецФункции	

Функция НеобходимыФИО(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = "ФАМИЛИЯ" 
		ИЛИ ИмяПоля = "ИМЯ" 
		ИЛИ ИмяПоля = "ОТЧЕСТВО"
		ИЛИ ИмяПоля = ВРег("ФамилияИО")
		ИЛИ ИмяПоля = ВРег("ИОФамилия")
		ИЛИ ИмяПоля = ВРег("ФИОПолные");

КонецФункции

Функция ПутьКДаннымФИОПоИмениЗапрашиваемыхДанных(Знач ИмяПоля)
	
	ИмяПоляВРег = ВРег(ИмяПоля);
	
	Если ИмяПоляВРег = "ФАМИЛИЯ"
		ИЛИ ИмяПоляВРег = "ИМЯ"
		ИЛИ ИмяПоляВРег = "ОТЧЕСТВО" Тогда
		
		Возврат "ЕСТЬNULL(ФИОФизическихЛицСрезПоследних." + ИмяПоля + ", """")";
		
	ИначеЕсли ИмяПоляВРег = ВРег("ФИОПолные") Тогда
		
		Возврат "ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия + "" "" + ФИОФизическихЛицСрезПоследних.Имя + "" "" + ФИОФизическихЛицСрезПоследних.Отчество, ДанныеФизическихЛиц.ФизическоеЛицо.Наименование)";
		
	ИначеЕсли ИмяПоляВРег = ВРег("ФамилияИО") Тогда
		
		Возврат "
				|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
				|			КОГДА ФИОФизическихЛицСрезПоследних.Имя = """"
				|				ТОГДА """"
				|			ИНАЧЕ ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) + ""."" + ВЫБОР
				|					КОГДА ФИОФизическихЛицСрезПоследних.Отчество = """"
				|						ТОГДА """"
				|					ИНАЧЕ ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) + "".""
				|				КОНЕЦ
				|		КОНЕЦ, """")";
		
	ИначеЕсли ИмяПоляВРег = ВРег("ИОФамилия") Тогда
				
		Возврат "
				|	ЕСТЬNULL(ВЫБОР
				|			КОГДА ФИОФизическихЛицСрезПоследних.Имя = """"
				|				ТОГДА """"
				|			ИНАЧЕ ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) + ""."" + ВЫБОР
				|					КОГДА ФИОФизическихЛицСрезПоследних.Отчество = """"
				|						ТОГДА """"
				|					ИНАЧЕ ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) + "".""
				|				КОНЕЦ + "" ""
				|		КОНЕЦ + ФИОФизическихЛицСрезПоследних.Фамилия, """")";
				
	КонецЕсли;
	
КонецФункции

Функция НеобходимыДанныеСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("Сотрудник")
		ИЛИ ИмяПоля = ВРег("ТабельныйНомер")
		ИЛИ ИмяПоля = ВРег("ГоловнаяОрганизация")
		ИЛИ ИмяПоля = ВРег("ТекущийПроцентСевернойНадбавки")
		ИЛИ ИмяПоля = ВРег("ПроцентСевернойНадбавки");
		
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("СОТРУДНИК", 							"ЕСТЬNULL(ДанныеСотрудников.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТАБЕЛЬНЫЙНОМЕР", 						"ЕСТЬNULL(ДанныеСотрудников.Код, """")");
	СоответствиеЗапрашиваемыхДанных.Вставить("ГОЛОВНАЯОРГАНИЗАЦИЯ", 				"ЕСТЬNULL(ДанныеСотрудников.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ПРОЦЕНТСЕВЕРНОЙНАДБАВКИ", 			"ЕСТЬNULL(ДанныеСотрудников.ТекущийПроцентСевернойНадбавки, 0)");
	
	Если СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля) = Неопределено Тогда
		Возврат "ДанныеСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимПризнакОформленПриемНаРаботу(ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = ВРег("ОформленПриемНаРаботу");
	
КонецФункции

Функция ПутьКДаннымПризнакаОформленПриемНаРаботу()
			
	Возврат
			"ВЫБОР
			|	КОГДА ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1,1,1,0,0,0)) <> ДАТАВРЕМЯ(1,1,1,0,0,0)
			|		ТОГДА ИСТИНА
			|	ИНАЧЕ ЛОЖЬ
			|КОНЕЦ
			|";
			
	
КонецФункции

Функция НеобходимаТекущаяТарифнаяСтавкаСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТекущаяТарифнаяСтавка")
		ИЛИ ИмяПоля = ВРег("ТекущийФОТ")
		ИЛИ ИмяПоля = ВРег("РазмерТекущейТарифнойСтавки");
		
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхГражданства(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("СТРАНА",					"ЕСТЬNULL(ГражданствоФизическихЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия))");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияПриказаОбУвольнении(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОбУвольнении")
		ИЛИ ИмяПоля = ВРег("ПриказОбУвольненииНомер")
		ИЛИ ИмяПоля = ВРег("ПриказОбУвольненииДата")
		ИЛИ ИмяПоля = ВРег("ПриказОбУвольненииСтатьяТКРФ");
		
КонецФункции

Функция ПутьКДаннымПоИмениДанныхПриказаОбУвольнении(ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	
	ФОИспользоватьКадровыйУчет = Ложь;
	Если ФОИспользоватьКадровыйУчет Тогда
		
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИ",				"ЕСТЬNULL(ПриказыОбУвольнении.Регистратор, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИДАТА",			"ЕСТЬNULL(ПриказыОбУвольнении.Регистратор.Дата, ДАТАВРЕМЯ(1,1,1))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИНОМЕР",			"ЕСТЬNULL(ПриказыОбУвольнении.Регистратор.Номер, """")");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИСТАТЬЯТКРФ",
			"ЕСТЬNULL(ВЫБОР
			|	КОГДА ПриказыОбУвольнении.Регистратор.СтатьяТКРФ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПустаяСсылка) ТОГДА """"
			|	ИНАЧЕ ПриказыОбУвольнении.Регистратор.СтатьяТКРФ.ТекстОснования + "", ""+ ПриказыОбУвольнении.Регистратор.СтатьяТКРФ.Наименование
			|КОНЕЦ, """")");
			
	Иначе
			
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИ",				"ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИДАТА",			"ДАТАВРЕМЯ(1,1,1)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИНОМЕР",			"""""");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИСТАТЬЯТКРФ",	"""""");
		
	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции
	
Функция ОпуститьОбработкуПоляФизическогоЛица(ИмяПоля)
	
	Возврат
		ПустаяСтрока(ИмяПоля) 
		ИЛИ ВРег(ИмяПоля) = "ПЕРИОД";
		
КонецФункции

Функция ОпуститьОбработкуПоляСотрудника(ИмяПоля)
	
	Возврат 
		ПустаяСтрока(ИмяПоля) 
		ИЛИ ВРег(ИмяПоля) = "ПЕРИОД"
		ИЛИ ВРег(ИмяПоля) = "СОТРУДНИК"
		ИЛИ ВРег(ИмяПоля) = "ФИЗИЧЕСКОЕЛИЦО";
	
КонецФункции

#КонецОбласти
