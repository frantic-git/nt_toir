////////////////////////////////////////////////////////////////////////////////
// торо_НастройкаПорядкаЭлементовСлужебный: методы, для работы с порядком элементов.
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Выполняет перемещение элемента вверх или вниз по списку.
//
// Параметры:
//		СсылкаНаОбъект      - Ссылка - ссылка на перемещаемый элемент.
//		РеквизитДопУпорядочивания - Число - текущее значение реквизита.
//		Направление         - Строка - направление перемещения элемента: "Вверх" или "Вниз" по списку.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//		СтруктураСдвига - Структура - структура с параметрами сдвига.
//		ЭлементДляОбмена - Ссылка - ссылка на элемент, с которым нужно поменяться местами.
//
// Возвращаемое значение:
//		Строка - описание ошибки.
Функция ИзменитьПорядокЭлементов(СсылкаНаОбъект, РеквизитДопУпорядочивания, Направление, СтруктураИерархии, СтруктураСдвига, ЭлементДляОбмена = Неопределено) Экспорт
	
	ПередвинутьЭлемент(СсылкаНаОбъект, Направление, СтруктураИерархии, РеквизитДопУпорядочивания, СтруктураСдвига, ЭлементДляОбмена);
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Меняет местами выбранный элемент списка с соседним отображаемым элементом.
//
Процедура ПередвинутьЭлемент(СсылкаНаОбъект, Знач Направление, СтруктураИерархии, РеквизитДопУпорядочивания, СтруктураСдвига, ЭлементДляОбмена)
	
	СтруктураСдвига.ВеличинаСдвига = 1;
	
	МассивСоседей = торо_РаботаСИерархией20.ПолучитьМассивСоседейОРПоИерархии(СтруктураИерархии, СсылкаНаОбъект);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	УстановитьБлокировкуРегистраСведенийПорядокОРПоИерархии(СтруктураИерархии);
	
	Если НЕ ЗначениеЗаполнено(ЭлементДляОбмена) Тогда
		ВыборкаСоседа = ПолучитьВыборкуСоседаПоИерархии(СтруктураИерархии, МассивСоседей, СсылкаНаОбъект, РеквизитДопУпорядочивания, Направление);
		Если ВыборкаСоседа = Неопределено Тогда
			СтруктураСдвига.ВеличинаСдвига = 0;
			Возврат;
		КонецЕсли;
		
		ЭлементДляОбмена = ВыборкаСоседа.ОбъектРемонта;
		ПорядокЭлементаДляОбмена = ВыборкаСоседа.РеквизитДопУпорядочиванияОР;
	Иначе
		ПорядокЭлементаДляОбмена = ПолучитьТекущийПорядокЭлемента(ЭлементДляОбмена, СтруктураИерархии);
		Если ПорядокЭлементаДляОбмена = Неопределено Тогда
			СтруктураСдвига.ВеличинаСдвига = 0;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Направление = "Вверх" Тогда
		СтруктураСдвига.ВеличинаСдвига = -1;
	КонецЕсли;
	
	СтруктураСдвига.РеквизитДопУпорядочивания = ПорядокЭлементаДляОбмена;
	СтруктураСдвига.ЭлементДляОбмена = ЭлементДляОбмена;
	
	ТаблицаПромежуточныхЭлементов = ПолучитьТаблицуПромежуточныхЭлементов(СтруктураИерархии, МассивСоседей, РеквизитДопУпорядочивания, ПорядокЭлементаДляОбмена, Направление); 
	
	// Цикличный сдвиг (невидимые в дереве элементы тоже должны сместиться).
	ИндексСледующейСтроки = 1;
	Для каждого СтрокаТаблицы из ТаблицаПромежуточныхЭлементов Цикл 
		Если ИндексСледующейСтроки < ТаблицаПромежуточныхЭлементов.Количество() Тогда
			НовыйПорядокСтроки = ТаблицаПромежуточныхЭлементов[ИндексСледующейСтроки].РеквизитДопУпорядочиванияОР;
		Иначе
			НовыйПорядокСтроки = ПорядокЭлементаДляОбмена;
		КонецЕсли;
		СтрокаТаблицы.РеквизитДопУпорядочиванияОР = НовыйПорядокСтроки;
		ИндексСледующейСтроки = ИндексСледующейСтроки + 1;
	КонецЦикла;
	
	БылаОшибка = Ложь;
	
	Попытка
		Для каждого СтрокаТаблицы из ТаблицаПромежуточныхЭлементов Цикл
			торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(СтрокаТаблицы.ОбъектРемонта, СтруктураИерархии, Ложь, СтрокаТаблицы.РеквизитДопУпорядочиванияОР);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		БылаОшибка = Истина;
		СтруктураСдвига.ВеличинаСдвига = 0;
		СтруктураСдвига.РеквизитДопУпорядочивания = Неопределено;
	КонецПопытки;
	
	Если БылаОшибка И ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Накладывает управляему блокировку на регистр сведений торо_ПорядокОРПоИерархии.
Процедура УстановитьБлокировкуРегистраСведенийПорядокОРПоИерархии(СтруктураИерархии) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ПорядокОРПоИерархии");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("СтруктураИерархии", СтруктураИерархии);
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ПолучитьВыборкуСоседаПоИерархии(СтруктураИерархии, МассивСоседей, СсылкаНаОбъект, РеквизитДопУпорядочивания, Направление)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
	|ИЗ
	|	РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
	|ГДЕ
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта В(&МассивСоседей)
	|	И торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии
	|	И торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР > &РеквизитДопУпорядочивания
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочиванияОР";
	
	Если Направление = "Вверх" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ">", "<");
		Запрос.Текст = Запрос.Текст + " УБЫВ";
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСоседей", МассивСоседей);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Запрос.УстановитьПараметр("РеквизитДопУпорядочивания", РеквизитДопУпорядочивания);
	
   Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьТекущийПорядокЭлемента(ОбъектРемонта, СтруктураИерархии)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
	|ИЗ
	|	РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
	|ГДЕ
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта = &ОбъектРемонта
	|	И торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РеквизитДопУпорядочиванияОР;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТаблицуПромежуточныхЭлементов(СтруктураИерархии, МассивСоседей, РеквизитДопУпорядочиванияСтарый, РеквизитДопУпорядочиванияНовый, Направление)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
	|ИЗ
	|	РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
	|ГДЕ
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта В(&МассивСоседей)
	|	И торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии
	|	И торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР МЕЖДУ &МеньшееЗначение И &БольшееЗначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР";
	
	Если Направление <> "Вверх" Тогда
		Запрос.Текст = Запрос.Текст + " УБЫВ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСоседей", МассивСоседей);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	
	Если РеквизитДопУпорядочиванияСтарый < РеквизитДопУпорядочиванияНовый Тогда
		Запрос.УстановитьПараметр("МеньшееЗначение", РеквизитДопУпорядочиванияСтарый);
		Запрос.УстановитьПараметр("БольшееЗначение", РеквизитДопУпорядочиванияНовый);
	Иначе
		Запрос.УстановитьПараметр("МеньшееЗначение", РеквизитДопУпорядочиванияНовый);
		Запрос.УстановитьПараметр("БольшееЗначение", РеквизитДопУпорядочиванияСтарый);
	КонецЕсли;
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


