
#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Сотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	СозданиеНового = Параметры.Ключ.Пустая();
	Форма.СозданиеНового = СозданиеНового;
	
	Если СозданиеНового Тогда
		Форма.ДоступенПросмотрДанныхФизическихЛиц = Пользователи.РолиДоступны("ЧтениеПерсональныхДанныхФизическихЛиц,ЧтениеФизическихЛиц,ДобавлениеИзменениеПерсональныхДанныхФизическихЛиц,ДобавлениеИзменениеФизическихЛиц,ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
	КонецЕсли;
	
	ЗаданоФизическоеЛицо = Ложь;
	
	// Открытие форму существующего сотрудника
	Если НЕ СозданиеНового Тогда
		
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;

	// Создание сотрудника из формы физического лица
	ИначеЕсли Параметры.Свойство("ФизическоеЛицо") 
		И ЗначениеЗаполнено(Параметры.ФизическоеЛицо) Тогда
		
		// возможно получение ссылки на физлицо через параметр формы
		Форма.ФизическоеЛицоСсылка = Параметры.ФизическоеЛицо;
		ЗаданоФизическоеЛицо = Истина;
		
	// Создание сотрудника путем копирования существующего
	ИначеЕсли ЗначениеЗаполнено(Форма.Сотрудник.ФизическоеЛицо) Тогда
		
		ЗаданоФизическоеЛицо = Истина;
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;
		
	// Просто создание сотрудника
	Иначе
		
		// ссылка для нового физлица
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		
	КонецЕсли;
	
	// если форма нового сотрудника
	Если СозданиеНового Тогда 
		
		Форма.СотрудникСсылка = Справочники.Сотрудники.ПолучитьСсылку();
		
		Если ЗаданоФизическоеЛицо Тогда
			
			СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
			
			УточнениеНаименованияФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ФизическоеЛицоСсылка, "УточнениеНаименования");
			Форма.Сотрудник.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
				Форма.ФИОФизическихЛиц.Фамилия, 
				Форма.ФИОФизическихЛиц.Имя, 
				Форма.ФИОФизическихЛиц.Отчество, 
				УточнениеНаименованияФизическогоЛица);
			
		Иначе
			
			Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
			
			РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
			РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);			
			
			СотрудникиФормы.ФизическиеЛицаОбновитьЭлементыФормы(Форма);

		КонецЕсли;
		
		СотрудникиФормы.ИнициализироватьТекущиеДанныеСотрудника(Форма);
		
	Иначе
		
		Форма.СотрудникСсылка = Форма.Сотрудник.Ссылка;
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
		
	Если СозданиеНового Тогда
		
		Форма.ЦветСтиляПоясняющийТекст		= ЦветаСтиля.ПоясняющийТекст;
		Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветСтиляЦветТекстаПоля 		= ЦветаСтиля.ЦветТекстаПоля;
	
	КонецЕсли;
	
	Форма.СотрудникНаименование  = Форма.Сотрудник.Наименование;
	
	Если Форма.Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Форма.Параметры.РежимОткрытияОкна) Тогда
		Форма.РежимОткрытияОкна = Форма.Параметры.РежимОткрытияОкна;
	КонецЕсли; 
	
	Форма.Заголовок = СотрудникиКлиентСервер.ЗаголовокФормыСотрудника(Форма);
	
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
		СотрудникиФормы.ЗаписатьФизическоеЛицоСотрудника(Форма);
	КонецЕсли; 
	
	ЗаписатьТекущиеДанные(Форма, ТекущийОбъект);
	СотрудникиФормы.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка, Форма.ТекущаяОрганизация);
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация) Экспорт
	
	ИзменилосьФИО = Ложь;
	ИзменилосьУдостоверениеЛичности = Ложь;
	
	НачатьТранзакцию();
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры") Тогда
		ИзменилосьФИО = РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, ИзменилосьФИО);
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	
	Если НЕ Форма.ИзмененыЛичныеДанные Тогда
		
		ИзменяемыеПоля = СотрудникиФормы.ИзменяемыеПоляФизическогоЛица();
		
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			
			Форма.ИзмененыЛичныеДанные = Форма[КлючИЗначение.Значение];
			
			Если Форма.ИзмененыЛичныеДанные Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если НЕ Форма.ИзмененыЛичныеДанные Тогда
			
			Форма.ИзмененыЛичныеДанные = ИзменилосьФИО 
				Или ИзменилосьУдостоверениеЛичности;
				
		Иначе
				
			Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
				
				Форма[КлючИЗначение.Значение] = Ложь;
				
			КонецЦикла;
			
		КонецЕсли; 
							
	КонецЕсли; 
								
КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
	
	Форма.ДоступенПросмотрДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеФизическихЛиц,ЧтениеПерсональныхДанныхФизическихЛиц,ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		
	Форма.ФизическоеЛицоСсылка = ТекущийОбъект.ФизическоеЛицо;
	Форма.СотрудникСсылка = ТекущийОбъект.Ссылка;
	СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФОИспользоватьКадровыйУчет = Ложь;
	
	Если НЕ ФОИспользоватьКадровыйУчет Тогда
		
		Если ЗначениеЗаполнено(Форма.ТекущаяОрганизация) Тогда
			
			Если ЗначениеЗаполнено(Форма.ДатаУвольнения) Тогда
				
				Если Форма.ДатаУвольнения <= Форма.ДатаПриема Тогда
					
					ТекстСообщения = НСтр("ru='Дата увольнения не может быть меньше или равна дате приема на работу'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДатаУвольнения",, Отказ);
					
				ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
					
					ТекстСообщения = НСтр("ru='Необходимо заполнить дату приема на работу'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДатаПриема",, Отказ);
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	СотрудникиФормы.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);
	
	ПравоНаДобавлениеИзменениеФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеПерсональныхДанныхФизическихЛиц,ДобавлениеИзменениеФизическихЛиц");
	Если ПравоНаДобавлениеИзменениеФизическихЛиц Тогда
		
		ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
		Отказ = НЕ ФизическоеЛицоОбъект.ПроверитьЗаполнение() ИЛИ Отказ;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормыФизическогоЛица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Перем ИмяТекущегоЭлемента;
	
	Форма.СозданиеНового = Форма.Параметры.Ключ.Пустая();
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	
	// Обработчик подсистемы "Свойства".
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Форма.ФизическоеЛицо);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, Контекст);
	
	УправлениеКонтактнойИнформациейЗарплатаКадры.ПриСозданииНаСервере(Форма, Форма.ФизическоеЛицо, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);

	Если Форма.СозданиеНового Тогда
		
		Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
		Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		Форма.ФизическоеЛицо.ФИО = Форма.ФизическоеЛицо.Наименование;
		
		// Если это форма нового объекта - инициализация реквизитов формы, 
		// предназначенных для редактирования дополнительных
		// данных (помимо основного редактируемого объекта).
		Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
			ИЛИ Пользователи.РолиДоступны("ЧтениеПерсональныхДанныхФизическихЛиц"); // Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
		
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ТекущийЭлемент", ИмяТекущегоЭлемента) Тогда
		ТекущийЭлемент = Форма.Элементы[ИмяТекущегоЭлемента];		
	КонецЕсли;	
	
	СотрудникиФормы.ОбновитьОтображениеПредупреждающихНадписей(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		
	Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
			ИЛИ Пользователи.РолиДоступны("ЧтениеПерсональныхДанныхФизическихЛиц");
		
	Форма.ФизическоеЛицоСсылка  = Форма.ФизическоеЛицо.Ссылка;
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц);
		
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Перем ДополнительныеСвойства;
	
	ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	
	Если Форма.СозданиеНового Тогда
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
	КонецЕсли;
	
	СотрудникиФормы.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка);	
	Если ДоступноДобавлениеИзменениеДанныхФизическихЛиц Тогда
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"ГражданствоФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
		ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц);
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	Попытка
		СотрудникиКлиентСервер.ОбработатьОтображениеПоляИНН(Форма.ФизическоеЛицо.ИНН, Форма.Элементы.ФизлицоИНН, Форма);
	Исключение
	КонецПопытки;
	Попытка
		СотрудникиКлиентСервер.ОбработатьОтображениеПоляСтраховойНомерПФР(Форма.ФизическоеЛицо.СтраховойНомерПФР, Форма.Элементы.ФизлицоСтраховойНомерПФР, Форма);
	Исключение
	КонецПопытки;
	Попытка
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Процедура ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация, ИзФормыСотрудника) Экспорт
	
	Если ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		
		Если Форма.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаЭлемента" Тогда
			РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
			Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
				Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0;
			Иначе
				Форма.ГражданствоФизическихЛицЛицоБезГражданства = 1;
			КонецЕсли;
			СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма, ТекущаяДатаСеанса());
		КонецЕсли;
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Процедура СотрудникиОбновитьЭлементыФормы(Форма) Экспорт
	
	ПараметрыФункциональныхОпций = Новый Структура;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
	СотрудникиКлиентСервер.УстановитьИнфоНадпись(Форма);
	
	Форма.ДополнятьПредставление = Ложь;
	
	ИспользуетсяКадровыйУчет = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяОрганизация",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущееПодразделение",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяДолжность",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущийВидЗанятости",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяТарифнаяСтавка",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаПриема",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет 
			И (ЗначениеЗаполнено(Форма.ПриказОПриеме)
			ИЛИ НЕ Форма.ОформленПриемНаРаботу));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаУвольнения",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
				
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяОрганизация",
		"Видимость",
		НЕ ИспользуетсяКадровыйУчет);
		
	// ТОиР++	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Оклад",
		"ТолькоПросмотр",
		НЕ Форма.ОформленПриемНаРаботу ИЛИ ЗначениеЗаполнено(Форма.ДатаУвольнения));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Премия",
		"ТолькоПросмотр",
		НЕ Форма.ОформленПриемНаРаботу ИЛИ ЗначениеЗаполнено(Форма.ДатаУвольнения));
	// ТОиР--
		
	Если ИспользуетсяКадровыйУчет Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГоловнаяОрганизация",
			"ТолькоПросмотр",
			Форма.ОформленПриемНаРаботу);
					
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТекущаяОрганизация",
			"Видимость",
			Ложь);
			
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			НЕ Форма.ОформленПриемНаРаботу);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьПриемНаРаботу",
			"Видимость",
			НЕ Форма.ОформленПриемНаРаботу);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьКадровыйПеревод",
			"Видимость",
			Форма.ОформленПриемНаРаботу И НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьУвольнение",
			"Видимость",
			Форма.ОформленПриемНаРаботу И НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			Ложь);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	ПрочитатьДанныеФизлица(Форма);
	
	ПрочитатьТекущиеДанныеСотрудника(Форма);
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц, Форма.ТекущаяОрганизация, Истина);
	
КонецПроцедуры

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	КлючиСтруктуры = "ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ДатаПриема,ДатаУвольнения,ОформленПриемНаРаботу,ПриказОПриеме";
	Возврат КлючиСтруктуры;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры чтения / записи данных документов удостоверяющих личность

Процедура ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	 Если Форма.Параметры.Свойство("Ключ") И НЕ Форма.Параметры.Ключ.Пустая() Тогда
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", ВедущийОбъект);
	КонецЕсли;

	МенеджерЗаписи = МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	// имя реквизита формы совпадает с именем регистра
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ДокументыФизическихЛиц");
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма["ДокументыФизическихЛицНоваяЗапись"] = Ложь;
	
КонецПроцедуры

Функция МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	МенеджерЗаписи = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи["Физлицо"] = ВедущийОбъект;
	
	// Ищем последнюю запись
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.Период,
	|	РегистрСведений.Физлицо,
	|	РегистрСведений.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК РегистрСведений
	|ГДЕ
	|	РегистрСведений.Физлицо = &ВедущийОбъект
	|	И РегистрСведений.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрСведений.Период УБЫВ";
	Запрос.УстановитьПараметр("ВедущийОбъект", ВедущийОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Возврат МенеджерЗаписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьДанныеФизлица(Форма)
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ФизическоеЛицоОбъект = Форма.ФизическоеЛицоСсылка.ПолучитьОбъект(); 	
	Иначе		
		ФизическоеЛицоОбъект = Форма.Сотрудник.ФизическоеЛицо.ПолучитьОбъект();
	КонецЕсли;	
	
	Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
	
	Если Не Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ФизическоеЛицоСсылка = Форма.Сотрудник.ФизическоеЛицо;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрочитатьТекущиеДанныеСотрудника(Форма)
	
	КлючиСтруктурыТекущихКадровыхДанныхСотрудника = СотрудникиФормы.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
	КадровыеДанные = КлючиСтруктурыТекущихКадровыхДанныхСотрудника;
	
	СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Сотрудник.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, КадровыеДанные, ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаКадровыхДанных.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Форма, ТаблицаКадровыхДанных[0], КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	КонецЕсли;
	
	ТекущиеДанныеКакСтруктура = Новый Структура(КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанныеКакСтруктура, Форма);
	
	Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(ТекущиеДанныеКакСтруктура);

КонецПроцедуры

Процедура ЗаписатьТекущиеКадровыеДанные(Форма, СотрудникОбъект)
	
	ЕстьИзменениеТекущихКадровыхДанных = Ложь;
	Для каждого ТекущиеКадровыеДанныеПрежние Из Форма.ТекущиеДанныеПрежняя Цикл
		ЕстьИзменениеТекущихКадровыхДанных = ТекущиеКадровыеДанныеПрежние.Значение <> Форма[ТекущиеКадровыеДанныеПрежние.Ключ];
		Если ЕстьИзменениеТекущихКадровыхДанных Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ ЕстьИзменениеТекущихКадровыхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеКадровыеДанныеНаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	ТекущиеКадровыеДанныеНаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
	
	Строка = ТекущиеКадровыеДанныеНаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Форма);
	Строка.Сотрудник = СотрудникОбъект.Ссылка; 
	Строка.ФизическоеЛицо = СотрудникОбъект.ФизическоеЛицо; 
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеКадровыеДанныеНаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры чтения / записи данных документов удостоверяющих личность

Функция ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	Если Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		Возврат ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;

	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ИзменилисьДанные = Форма["ДокументыФизическихЛиц"].Период <> Форма["ДокументыФизическихЛицПрежняя"].Период;
	Иначе
		ИзменилисьДанные = Ложь;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		ИзменилисьДанные = ИзменилисьДанные ИЛИ 
		(ВедущийОбъект <> Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения] И 
		ЗначениеЗаполнено(Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения]));
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Если Поле.Имя = ИмяИзмерения Тогда
				Продолжить;
			КонецЕсли; 
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		// пишем новое состояние записи
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение("ДокументыФизическихЛиц");
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
		// если нужно сохранить старую запись, то создадим новый менеджер записи
		Если Форма["ДокументыФизическихЛицНоваяЗапись"] Тогда
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,  МенеджерЗаписи);
			НоваяЗапись.Записать();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзменилисьДанные;
	
КонецФункции

Функция ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	ИзменилисьДанные = Ложь;
	
	СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект);

	ИмяИзмерения = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"].Измерения[0].Имя;
	
	// Подготовим к сравнению набор исходных сведений
	Набор = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьНаборЗаписей();
	Набор.Отбор[ИмяИзмерения].Установить(ВедущийОбъект);
	Набор.Прочитать();
	ТаблицаИсходногоНабора = Набор.Выгрузить();
	
	// Подготовим к сравнению набор, хранящийся в реквизите формы
	ТаблицаНовогоНабора = Форма["ДокументыФизическихЛицНаборЗаписей"].Выгрузить();
	ТаблицаНовогоНабора.Колонки.Удалить("ИсходныйНомерСтроки");
	
	// Проверим необходимость записи нового набора
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ТаблицаИсходногоНабора, ТаблицаНовогоНабора, , "Представление") Тогда
		
		ИзменилисьДанные = Истина;
		МассивСохраняемыхСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СохранитьСтроку = Истина;
			СтрокиТаблицыИсходногоНабора = ТаблицаИсходногоНабора.НайтиСтроки(Новый Структура("Период,ВидДокумента", СтрокаТаблицаНовогоНабора.Период, СтрокаТаблицаНовогоНабора.ВидДокумента));
			Если СтрокиТаблицыИсходногоНабора.Количество() > 0 Тогда
				СтрокаТаблицаИсходногоНабора = СтрокиТаблицыИсходногоНабора[0];
				Если ОбщегоНазначения.КоллекцииИдентичны(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаНовогоНабора), ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаИсходногоНабора), , "Представление") Тогда
					СохранитьСтроку = Ложь;
				КонецЕсли;
				// Удалим строку из таблицы исходного набора
				ТаблицаИсходногоНабора.Удалить(СтрокаТаблицаИсходногоНабора);
			КонецЕсли; 
			
			Если СохранитьСтроку Тогда
				МассивСохраняемыхСтрок.Добавить(СтрокаТаблицаНовогоНабора);
			КонецЕсли; 
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицаИсходногоНабора Из ТаблицаИсходногоНабора Цикл
			УдаляемаяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(УдаляемаяЗапись, СтрокаТаблицаИсходногоНабора);
			УдаляемаяЗапись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТаблицаНовогоНабора Из МассивСохраняемыхСтрок Цикл
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицаНовогоНабора);
			НоваяЗапись.Записать();
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ИзменилисьДанные;
	
КонецФункции

Процедура ЗаписатьТекущиеДанные(Форма, СотрудникОбъект)
	
	Если Форма.СозданиеНового Тогда
		ЗаписатьТекущиеКадровыеДанные(Форма, СотрудникОбъект);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти