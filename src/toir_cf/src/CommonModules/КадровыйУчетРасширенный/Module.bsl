
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Формирование временных таблиц с кадровыми данными

// Функция формирует временную таблицу с кадровыми данными. 
// Параметры:
//		ТолькоРазрешенные - Булево - только разрешенные.
//		ИмяВТКадровыеДанныеФизическихЛиц - Строка - имя ВТ.
//		ИмяВременнойТаблицыОтборовФизическихЛиц - строка - имя ВТ.
//		КадровыеДанные - Структура - см. КадровыйУчет.КадровыеДанныеФизическихЛиц. 
//		ПоляОтбораФизическихЛиц  - Структура - структура отбора.
//		ПоляОтбораПериодическихДанных -  Структура - см. КадровыйУчет.КадровыеДанныеФизическихЛиц.
//
// Возвращаемое значение:
//		Запрос - подготовленный запрос.
//
Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ИмяВТКадровыеДанныеФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	НеобходимыДанныеРасширеннойПодсистемы = Ложь;
	
	КадровыеДанныеБазовойПодсистемы = Новый Массив;
	КадровыеДанныеРасширеннойПодсистемы = Новый Массив;
	
	Для Каждого ЭлМассива Из КадровыеДанные Цикл
		КадровыеДанныеБазовойПодсистемы.Добавить(ЭлМассива);
	КонецЦикла;
	
	ЗапросВТКадровыеДанныеФизическихЛиц = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ИмяВТКадровыеДанныеФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц, КадровыеДанныеБазовойПодсистемы, ПоляОтбораПериодическихДанных);
	
	Возврат ЗапросВТКадровыеДанныеФизическихЛиц;
	
КонецФункции

// Осуществляет запрос во временную таблицу кадровых данных о сотрудниках.
// Параметры:
//			ТолькоРазрешенные - Булево - только разрешенные.
//			ИмяВТКадровыеДанныеСотрудников - Строка - имя ВТ.
//			ИмяВременнойТаблицыОтборовСотрудников - Строка - имя ВТ.
//			ПоляОтбораСотрудников - Структура - структура отбора.
//			КадровыеДанные - Структура - см. КадровыйУчет.КадровыеДанныеФизическихЛиц.
//			ПоляОтбораПериодическихДанных - Структура - см. КадровыйУчет.КадровыеДанныеФизическихЛиц.
//
// Возвращаемое значение:
//		Запрос - подготовленный запрос.
//
Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ИмяВТКадровыеДанныеСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	НеобходимыДанныеКадровойИстории = Ложь;
	
	НеобходимГрафик = Ложь;
	НеобходимыСвойстваГрафика = Ложь;
	
	НеобходимаТекущаяДолжностьПоШтатномуРасписанию = Ложь;
	
	СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность = Ложь;
	
	МассивПолейКадровойИстории = Новый Массив;
	МассивПолейГрафиков = Новый Массив;
	МассивПолейСвойствГрафика = Новый Массив;
	МассивПолейДанныхДолжности = Новый Массив;
	МассивПолейДанныхПодразделения = Новый Массив;
	МассивФункциональныхОпций = Новый Массив;
	МассивПолейТекущаяДолжностьПоШтатномуРасписанию = Новый Массив;
	
	МассивНеобходимыхКадровыхДанныхБазовогоУчета = Новый Массив;
	
	НеобходимПоказательТарифнойСтавки = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПоляТарифнойСтавки = Ложь;
	
	Для Каждого ЭлМассива Из КадровыеДанные Цикл
		
		Если ВРег(ЭлМассива) = "ДОЛЖНОСТЬ"  Тогда
			
			СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность = Истина;
			
		КонецЕсли; 
		
		Если ВРег(ЭлМассива) = "ПОДРАЗДЕЛЕНИЕ"  Тогда
			
			СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение = Истина;
			
		КонецЕсли; 
		
		Если ВРег(ЭлМассива) = "ОРГАНИЗАЦИЯ"  Тогда
			
			СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация = Истина;
			
		КонецЕсли;
		
		Если ВРег(ЭлМассива) = "ОСНОВНОЕНАЧИСЛЕНИЕ" Тогда
			
			НеобходимыДанныеОбОсновныхНачислениях = Истина;
							
		ИначеЕсли НеобходимаИсторияГрафиков(ЭлМассива) Тогда
			
			МассивПолейГрафиков.Добавить(ЭлМассива);
			НеобходимГрафик = Истина;
			
		Иначе
			
			Если КадровыйУчетБазовый.НеобходимаТарифнаяСтавкаСотрудника(ЭлМассива) Тогда
				
				СредиПолейЗапрашиваемыхДанныхЕстьПоляТарифнойСтавки = Истина;
				
			КонецЕсли; 
			
			МассивНеобходимыхКадровыхДанныхБазовогоУчета.Добавить(ЭлМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросВТКадровыеДанныеСотрудников = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ИмяВТКадровыеДанныеСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, МассивНеобходимыхКадровыхДанныхБазовогоУчета, ПоляОтбораПериодическихДанных);
	
	Если МассивНеобходимыхКадровыхДанныхБазовогоУчета.Количество() < КадровыеДанные.Количество() Тогда
		
		ИменаВТКУничтожению = Новый Массив;
		
		МассивТекстовЗапроса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗапросВТКадровыеДанныеСотрудников.Текст, ";");
		
		ТекстЗапросаВТКадровыеДанныеСотрудников = "";
		ТекстПоместить = "ПОМЕСТИТЬ " + ВРег(ИмяВТКадровыеДанныеСотрудников);
		
		Для Каждого ТекстЗапроса Из МассивТекстовЗапроса Цикл
			
			ПозицияПоместить = Найти(ВРег(ТекстЗапроса), ТекстПоместить);
			
			Если ПозицияПоместить > 0 Тогда
				
				ТекстЗапросаВТКадровыеДанныеСотрудников = ТекстЗапроса;
				ТекстОписанияПолей = СокрЛП(Лев(ТекстЗапросаВТКадровыеДанныеСотрудников, ПозицияПоместить - 1));
				ТекстПослеПоместить = СокрЛП(Сред(ТекстЗапросаВТКадровыеДанныеСотрудников, ПозицияПоместить + СтрДлина(ТекстПоместить)));
				
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если МассивФункциональныхОпций.Количество() > 0 И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация Тогда
			
			НеобходимыДанныеКадровойИстории = Истина;
			МассивПолейКадровойИстории.Добавить("Организация");
			
		КонецЕсли; 
		
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
		СоответствиеИзмеренийПолямТаблицы.Вставить("Период", ПоляОтбораСотрудников.Период);
		СоответствиеИзмеренийПолямТаблицы.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
		
		Если НеобходимыДанныеКадровойИстории Тогда
			
			ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковСрезПоследних");
			
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
				
				 ПоляОтбораПериодическихДанных.Свойство("КадроваяИсторияСотрудников", ПоляОтбора);
				 
			КонецЕсли;
				 
			МассивИзмерений = Новый Массив;
			МассивИзмерений.Добавить("Период");
			МассивИзмерений.Добавить("Сотрудник");
		
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
			
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"КадроваяИсторияСотрудников", 
				ИмяВременнойТаблицыОтборовСотрудников, 
				ИмяВТКадроваяИсторияСотрудниковСрезПоследних, 
				ПоляОтбора, 
				, 
				, 
				Истина,
				СоответствиеИзмеренийПолямТаблицы);
				
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(ЗапросВТКадровыеДанныеСотрудников, ЗапросВТИмяРегистраСрез);
					
			ТекстОписанияПолей = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
					
			Для Каждого ЭлМассива Из МассивПолейКадровойИстории Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника(ЭлМассива) + " КАК " + ЭлМассива;
				
			КонецЦикла;
				
			ТекстПослеПоместить = ТекстПослеПоместить +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудниковСрезПоследних + " КАК КадроваяИсторияСотрудниковСрезПоследних
				|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
				|			И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = КадроваяИсторияСотрудниковСрезПоследних.Период}";
				
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковСрезПоследних);	
			
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			
			ИмяВТГрафикРаботыСотрудниковСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТГрафикРаботыСотрудниковСрезПоследних");
			
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
				
				 ПоляОтбораПериодическихДанных.Свойство("ГрафикРаботыСотрудников", ПоляОтбора);
				 
			КонецЕсли;
			 
			МассивИзмерений = Новый Массив;
			МассивИзмерений.Добавить("Период");
			МассивИзмерений.Добавить("Сотрудник");
			
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("ГрафикРаботыСотрудников", МассивИзмерений); 
		
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"ГрафикРаботыСотрудников", 
				ИмяВременнойТаблицыОтборовСотрудников, 
				ИмяВТГрафикРаботыСотрудниковСрезПоследних, 
				ПоляОтбора, 
				, 
				, 
				Истина,
				СоответствиеИзмеренийПолямТаблицы);
				
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(ЗапросВТКадровыеДанныеСотрудников, ЗапросВТИмяРегистраСрез);
			
			ТекстОписанияПолей = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			Для Каждого ЭлМассива Из МассивПолейГрафиков Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК " + ЭлМассива;
				
			КонецЦикла;
			
			Для Каждого ЭлМассива Из МассивПолейСвойствГрафика Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	ОписаниеГрафика." + ЭлМассива;
				
			КонецЦикла;
				
			ТекстПослеПоместить = ТекстПослеПоместить +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТГрафикРаботыСотрудниковСрезПоследних + " КАК ГрафикРаботыСотрудниковСрезПоследних
				|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ГрафикРаботыСотрудниковСрезПоследних.Сотрудник
				|		И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = ГрафикРаботыСотрудниковСрезПоследних.Период}";
			
			Если НеобходимыСвойстваГрафика Тогда
				
				ТекстПослеПоместить = ТекстПослеПоместить +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ОписаниеГрафика
					|		ПО ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы = ОписаниеГрафика.Ссылка}";
				
			КонецЕсли;	
			
			ИменаВТКУничтожению.Добавить(ИмяВТГрафикРаботыСотрудниковСрезПоследних);
			
		КонецЕсли;
		
		Если МассивФункциональныхОпций.Количество() > 0 Тогда
			
			ИмяВТФункциональныеОпцииОрганизаций = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТФункциональныеОпцииОрганизаций");
			
			ЗапросВТФункциональныеОпцииОрганизаций = КадровыйУчетБазовый.ЗапросВТФункциональныеОпцииОрганизаций(
					ТолькоРазрешенные, 
					ИмяВТФункциональныеОпцииОрганизаций,
					МассивФункциональныхОпций);
			
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(ЗапросВТКадровыеДанныеСотрудников, ЗапросВТФункциональныеОпцииОрганизаций);
			
			ТекстОписанияПолей = 
				ЗапросВТФункциональныеОпцииОрганизаций.Текст +
				ЗарплатаКадры.РазделительЗапросов() +
				ТекстОписанияПолей;
				
			ТекстПослеПоместить = ТекстПослеПоместить +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТФункциональныеОпцииОрганизаций + " КАК ФункциональныеОпции
				| 		ПО " + ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника("Организация") + " = ФункциональныеОпции.Организация}";
				
			ИменаВТКУничтожению.Добавить(ИмяВТФункциональныеОпцииОрганизаций);
			
		КонецЕсли; 
		
		НовыйТекстЗапросаВТКадровыеДанныеСотрудников = 
			ТекстОписанияПолей + "
			|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеСотрудников + "
			|" +
			ТекстПослеПоместить;
			
		ЗапросВТКадровыеДанныеСотрудников.Текст = 
			СтрЗаменить(
				ЗапросВТКадровыеДанныеСотрудников.Текст, 
				ТекстЗапросаВТКадровыеДанныеСотрудников,
				НовыйТекстЗапросаВТКадровыеДанныеСотрудников);
	
		ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(ЗапросВТКадровыеДанныеСотрудников.Текст, ИменаВТКУничтожению);
		
	КонецЕсли;
	
	Возврат ЗапросВТКадровыеДанныеСотрудников;
	
КонецФункции

// Заполняет кадровые движения документа
//		КадроваяИсторияСотрудников
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//		РегистраторОбъект - ДокументОбъект - регистратор.
//		Движения - Движения - коллекция движений, в которой необходимо заполнить кадровые движения
//		КадровыеДвижения - ТаблицаЗначений - таблица значений с полями:
//			*ДатаСобытия - Дата - дата события.
//			*ВидСобытия - Перечисление.ВидыКадровыхСобытий - вид события.
//			*ДействуетДо - Дата - (не обязательно).
//			*Сотрудник - СправочникССылка.Сотрудники - Сотрудник.
//			*Позиция -  - (не обязательно).
//			*Подразделение - СправочникСсылка.СтруктураПредприятия - (не обязательно).
//			*Должность - СправочникСсылка.Должности - (не обязательно).
// 		*КоличествоСтавок - Число - (не обязательно).
// 		
Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения) Экспорт
	
	КадровыйУчетБазовый.СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, Ложь);
	
	Регистратор = РегистраторОбъект.Ссылка;
	
	ДействуетДоЕсть = (КадровыеДвижения.Колонки.Найти("ДействуетДо") <> НеОпределено);
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> НеОпределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> НеОпределено);
	КоличествоСтавокЕсть = (КадровыеДвижения.Колонки.Найти("КоличествоСтавок") <> НеОпределено);
	ВидЗанятостиЕсть = (КадровыеДвижения.Колонки.Найти("ВидЗанятости") <> НеОпределено);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, Ложь, Регистратор);
	
	Для Каждого СтрокаДанных Из КадровыеДвижения Цикл
		
		Если КоличествоСтавокЕсть И СтрокаДанных.КоличествоСтавок = 0 И СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
			СтрокаДанных.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
		КонецЕсли;
		
		// движение по КадроваяИсторияСотрудников
		НоваяСтрока = Движения.КадроваяИсторияСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.Организация = СтрокаДанных.Организация;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
			НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
			НоваяСтрока.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
			НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
		Иначе
			Если ПодразделениеЕсть Тогда
				НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
			КонецЕсли;
			Если ДолжностьЕсть Тогда
				НоваяСтрока.Должность = СтрокаДанных.Должность;
			КонецЕсли;
			Если КоличествоСтавокЕсть Тогда
				НоваяСтрока.КоличествоСтавок = СтрокаДанных.КоличествоСтавок;
			КонецЕсли;
			Если ВидЗанятостиЕсть Тогда
				НоваяСтрока.ВидЗанятости = СтрокаДанных.ВидЗанятости;
			Иначе
				НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
			КонецЕсли; 
		КонецЕсли;
		НоваяСтрока.ВидСобытия = СтрокаДанных.ВидСобытия;
		
		// если есть дата "обратного" события - вводим его данные
		Если ДействуетДоЕсть Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.ОрганизацияПоОкончании = СтрокаДанных.Организация;
					Если ПодразделениеЕсть Тогда
						НоваяСтрока.ПодразделениеПоОкончании = СтрокаДанных.Подразделение;
					КонецЕсли;
					Если ДолжностьЕсть Тогда
						НоваяСтрока.ДолжностьПоОкончании = СтрокаДанных.Должность;
					КонецЕсли;
					Если КоличествоСтавокЕсть Тогда
						НоваяСтрока.КоличествоСтавокПоОкончании = СтрокаДанных.КоличествоСтавок;
					КонецЕсли;
					Если ВидЗанятостиЕсть Тогда
						НоваяСтрока.ВидЗанятостиПоОкончании = СтрокаДанных.ВидЗанятости;
					Иначе
						НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
					КонецЕсли; 
				Иначе
					НоваяСтрока.ОрганизацияПоОкончании = СтрокаДанных.ТекущаяОрганизация;
					НоваяСтрока.ПодразделениеПоОкончании = СтрокаДанных.ТекущееПодразделение;
					НоваяСтрока.ДолжностьПоОкончании = СтрокаДанных.ТекущаяДолжность;
					НоваяСтрока.КоличествоСтавокПоОкончании = СтрокаДанных.ТекущееКоличествоСтавок;
					НоваяСтрока.ВидЗанятостиПоОкончании = СтрокаДанных.ТекущийВидЗанятости;
				Конецесли;
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Увольнение;
				ИначеЕсли СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
					НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Перемещение;
				ИначеЕсли СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
					НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Прием;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Движения.КадроваяИсторияСотрудников.Записывать Тогда
		Движения.КадроваяИсторияСотрудников.Записать();
		Движения.КадроваяИсторияСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет историю изменения графиков работы
//
// Параметры:
//		Движения - Движения - коллекция движений, в которой необходимо заполнить движения по графикам работы
//		ДвиженияГрафиков - ТаблицаЗначений - таблица значений с полями:
//			*ДатаСобытия - Дата - дата события.
//			*ВидСобытия - Перечисление.ВидыКадровыхСобытий - вид события.
//			*Сотрудник - СправочникСсылка.Сотрудники - сотрудник.
//			*ГрафикРаботы - СправочникСсылка.Календари - график работы.
//			*ДействуетДо - Дата - (не обязательно).
// 		
Процедура СформироватьИсториюИзмененияГрафиков(Движения, ДвиженияГрафиков) Экспорт
	Регистратор = Движения.ГрафикРаботыСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (ДвиженияГрафиков.Колонки.Найти("ДействуетДо") <> НеОпределено);
	
	Для Каждого СтрокаДанных Из ДвиженияГрафиков Цикл
		Движения.ГрафикРаботыСотрудников.Записывать = Истина;
		
		ТекущийГрафик = ПолучитьТекущийГрафикСотрудника(СтрокаДанных.ДатаСобытия, СтрокаДанных.Сотрудник);
		НоваяСтрока = Движения.ГрафикРаботыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.ГрафикРаботы = ТекущийГрафик;
		Иначе
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ГрафикРаботы;
		КонецЕсли;
		
		// если есть дата "обратного" события - вводим его данные
		Если ДействуетДоЕсть Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.ГрафикРаботыПоОкончании = СтрокаДанных.ГрафикРаботы;
				Иначе
					НоваяСтрока.ГрафикРаботыПоОкончании = ТекущийГрафик;
				Конецесли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверитьСоответствиеСотрудниковТабличнойЧастиОрганизации(Организация, ТабличнаяЧастьСотрудники, Отказ) Экспорт
	
	СписокСотрудников = ТабличнаяЧастьСотрудники.ВыгрузитьКолонку("Сотрудник");
	
	ГоловныеОрганизацииСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ГоловнаяОрганизация");
	Для каждого СтрокаСотрудника Из ТабличнаяЧастьСотрудники Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		ГоловнаяОрганизацияСотрудника = ГоловныеОрганизацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		Если ГоловнаяОрганизацияСотрудника <> Организация Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сотрудник %1 не соответствует организации %2.'"),
				СтрокаСотрудника.Сотрудник,
				Организация);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Сотрудники[" + (СтрокаСотрудника.НомерСтроки - 1) + "].Сотрудник",
				,
				Отказ);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(Сотрудники) Экспорт
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		ОбновляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		ОбновляемыеСотрудники = Сотрудники;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбновляемыеСотрудники", ОбновляемыеСотрудники);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение
		|ПОМЕСТИТЬ ВТСотрудникиКОбновлению
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудниковПоФизлицу
		|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудниковПоФизлицу.ФизическоеЛицо
		|			И (ТекущиеКадровыеДанныеСотрудниковПоФизлицу.ОсновноеРабочееМестоВОрганизации = ИСТИНА)
		|			И ТекущиеКадровыеДанныеСотрудников.Сотрудник <> ТекущиеКадровыеДанныеСотрудниковПоФизлицу.Сотрудник
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В(&ОбновляемыеСотрудники)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|	И ТекущиеКадровыеДанныеСотрудниковПоФизлицу.Сотрудник ЕСТЬ NULL 
		|;
		| 	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеДоговоры.Сотрудник,
		|	ПоследниеДоговоры.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПоследниеДоговоры.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(ПоследниеДоговоры.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
		|	ЕСТЬNULL(ПоследниеДоговоры.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ТекущееПодразделение,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоследниеДоговоры.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОсновноеРабочееМестоВОрганизации
		|ИЗ
		|	ВТСотрудникиКОбновлению КАК ПоследниеДоговоры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ПоследниеДоговоры.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	(ЕСТЬNULL(ПоследниеДоговоры.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|			ИЛИ ЕСТЬNULL(ПоследниеДоговоры.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) <> ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций. Структура содержит
// ключи возвращаемые КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
// Добавляет ключи РаботникиПоТрудовымДоговорам и РаботникиПоДоговорамГПХ. Позволяет формировать списки
// сотрудников с различными сочетаниями трудовых отношений.
//
// Возвращаемое значение:
//   Структура - Содержит дополнительные ключи:
//					РаботникиПоТрудовымДоговорам - Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//												Неопределено - неважно наличие ТД)
//					РаботникиПоДоговорамГПХ - Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//												действующих договоров ГПХ, Неопределено - неважно наличие действующего договора ГПХ).
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
		
	ПараметрыПолученияСотрудников = КадровыйУчетБазовый.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников;
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадроваяИсторияСотрудников.Период КАК Период,
	               |	КадроваяИсторияСотрудников.ВидСобытия
	               |ПОМЕСТИТЬ ВТ_СобытияПоПериод
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	               |ГДЕ
	               |	КадроваяИсторияСотрудников.Период <= &Период
	               |	И КадроваяИсторияСотрудников.ВидСобытия В (&Прием, &Увольнение)
	               |	И КадроваяИсторияСотрудников.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КадроваяИсторияСотрудников.ВидСобытия,
	               |	КадроваяИсторияСотрудников.Сотрудник,
	               |	КадроваяИсторияСотрудников.ФизическоеЛицо,
	               |	КадроваяИсторияСотрудников.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПоПериод.Сотрудник КАК Сотрудник,
	               |	ВТ_СобытияПоПериод.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(ВТ_СобытияПоПериод.Период) КАК Период
	               |ПОМЕСТИТЬ ВТ_СобытияПо_Период_Макс
	               |ИЗ
	               |	ВТ_СобытияПоПериод КАК ВТ_СобытияПоПериод
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СобытияПоПериод.Сотрудник,
	               |	ВТ_СобытияПоПериод.ФизическоеЛицо
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПоПериод.Сотрудник КАК Сотрудник,
	               |	ВТ_СобытияПоПериод.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТ_СобытияПоПериод.Период,
	               |	ВТ_СобытияПоПериод.ВидСобытия
	               |ПОМЕСТИТЬ ВТ_СобытияПо_Период_Срез
	               |ИЗ
	               |	ВТ_СобытияПоПериод КАК ВТ_СобытияПоПериод
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СобытияПо_Период_Макс КАК ВТ_СобытияПо_Период_Макс
	               |		ПО ВТ_СобытияПоПериод.Сотрудник = ВТ_СобытияПо_Период_Макс.Сотрудник
	               |			И ВТ_СобытияПоПериод.ФизическоеЛицо = ВТ_СобытияПо_Период_Макс.ФизическоеЛицо
	               |			И ВТ_СобытияПоПериод.Период = ВТ_СобытияПо_Период_Макс.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо,
	               |	КадроваяИсторияСотрудников.ВидСобытияПоОкончании
	               |ПОМЕСТИТЬ ВТ_СобытияПо_ДействуетДо
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	               |ГДЕ
	               |	КадроваяИсторияСотрудников.Период <= &Период
	               |	И КадроваяИсторияСотрудников.ВидСобытия В (&Прием, &Увольнение)
	               |	И КадроваяИсторияСотрудников.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КадроваяИсторияСотрудников.ФизическоеЛицо,
	               |	КадроваяИсторияСотрудников.ДействуетДо,
	               |	КадроваяИсторияСотрудников.Сотрудник,
	               |	КадроваяИсторияСотрудников.ВидСобытияПоОкончании
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо,
	               |	ДействуетДо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПо_ДействуетДо.Сотрудник КАК Сотрудник,
	               |	ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(ВТ_СобытияПо_ДействуетДо.ДействуетДо) КАК ДействуетДо
	               |ПОМЕСТИТЬ ВТ_СобытияПо_ДействуетДо_Макс
	               |ИЗ
	               |	ВТ_СобытияПо_ДействуетДо КАК ВТ_СобытияПо_ДействуетДо
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СобытияПо_ДействуетДо.Сотрудник,
	               |	ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо,
	               |	ДействуетДо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПо_ДействуетДо.Сотрудник КАК Сотрудник,
	               |	ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТ_СобытияПо_ДействуетДо.ДействуетДо,
	               |	ВТ_СобытияПо_ДействуетДо.ВидСобытияПоОкончании
	               |ПОМЕСТИТЬ ВТ_СобытияПо_ДействуетДо_Срез
	               |ИЗ
	               |	ВТ_СобытияПо_ДействуетДо КАК ВТ_СобытияПо_ДействуетДо
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СобытияПо_ДействуетДо_Макс КАК ВТ_СобытияПо_ДействуетДо_Макс
	               |		ПО ВТ_СобытияПо_ДействуетДо.Сотрудник = ВТ_СобытияПо_ДействуетДо_Макс.Сотрудник
	               |			И ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо = ВТ_СобытияПо_ДействуетДо_Макс.ФизическоеЛицо
	               |			И ВТ_СобытияПо_ДействуетДо.ДействуетДо = ВТ_СобытияПо_ДействуетДо_Макс.ДействуетДо
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПоПериод.Сотрудник,
	               |	ВТ_СобытияПоПериод.ФизическоеЛицо,
	               |	ВТ_СобытияПоПериод.Период,
	               |	ВТ_СобытияПоПериод.ВидСобытия,
	               |	ЕСТЬNULL(ВТ_СобытияПо_ДействуетДо.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДействуетДО,
	               |	ЕСТЬNULL(ВТ_СобытияПо_ДействуетДо.ВидСобытияПоОкончании, НЕОПРЕДЕЛЕНО) КАК ВидСобытияПоОкончании
	               |ПОМЕСТИТЬ ВТ_ОбщаяТаблица
	               |ИЗ
	               |	ВТ_СобытияПо_Период_Срез КАК ВТ_СобытияПоПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СобытияПо_ДействуетДо_Срез КАК ВТ_СобытияПо_ДействуетДо
	               |		ПО ВТ_СобытияПоПериод.Сотрудник = ВТ_СобытияПо_ДействуетДо.Сотрудник
	               |			И ВТ_СобытияПоПериод.ФизическоеЛицо = ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОбщаяТаблица.Сотрудник,
	               |	ВТ_ОбщаяТаблица.ФизическоеЛицо,
	               |	ВЫБОР
	               |		КОГДА ВТ_ОбщаяТаблица.Период >= ВТ_ОбщаяТаблица.ДействуетДО
	               |			ТОГДА ВТ_ОбщаяТаблица.ВидСобытия
	               |		ИНАЧЕ ВТ_ОбщаяТаблица.ВидСобытияПоОкончании
	               |	КОНЕЦ КАК Событие
	               |ПОМЕСТИТЬ ВТ_Финальная
	               |ИЗ
	               |	ВТ_ОбщаяТаблица КАК ВТ_ОбщаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_Финальная.Сотрудник
				   |ПОМЕСТИТЬ "+ ИмяВТСотрудникиОрганизации +"
	               |ИЗ
	               |	ВТ_Финальная КАК Вт_Финальная
	               |ГДЕ
	               |	Вт_Финальная.Событие = &Прием";
   
	Запрос.УстановитьПараметр("Период", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("Прием", Перечисления.ВидыКадровыхСобытий.Прием);
	Запрос.УстановитьПараметр("Увольнение", Перечисления.ВидыКадровыхСобытий.Увольнение);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
			
	Возврат Запрос;
			
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции получения данных для отчетов

Процедура ОбновитьТекущиеКадровыеДанныеСотрудников(Запрос) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ТекущееПодразделение,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжность,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.Период, ВЫБОР
	|			КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|		КОНЕЦ) КАК ДатаПриема,
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковУвольнение.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ТекущийВидЗанятости,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизацияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ТекущееПодразделениеПредыдущее,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжностьПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольненияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ВидЗанятостиПредыдущий
	|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПрием
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковПрием.Сотрудник
	|			И (КадроваяИсторияСотрудниковПрием.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковУвольнение
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковУвольнение.Сотрудник
	|			И (КадроваяИсторияСотрудниковУвольнение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеКадровыеДанные.Сотрудник,
	|	НовыеКадровыеДанные.ТекущаяОрганизация,
	|	НовыеКадровыеДанные.ТекущееПодразделение,
	|	НовыеКадровыеДанные.ТекущаяДолжность,
	|	НовыеКадровыеДанные.ДатаПриема,
	|	НовыеКадровыеДанные.ДатаУвольнения,
	|	НовыеКадровыеДанные.ТекущийВидЗанятости,
	|	НовыеКадровыеДанные.ФизическоеЛицо,
	|	НовыеКадровыеДанные.ТекущийВидЗанятости КАК ТекущийВидЗанятости
	|ИЗ
	|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
	|ГДЕ
	|	(НовыеКадровыеДанные.ТекущаяОрганизация <> НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущееПодразделение <> НовыеКадровыеДанные.ТекущееПодразделениеПредыдущее
	|			ИЛИ НовыеКадровыеДанные.ТекущаяДолжность <> НовыеКадровыеДанные.ТекущаяДолжностьПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ДатаПриема <> НовыеКадровыеДанные.ДатаПриемаПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ДатаУвольнения <> НовыеКадровыеДанные.ДатаУвольненияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущийВидЗанятости <> НовыеКадровыеДанные.ВидЗанятостиПредыдущий)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СотрудникиНеПринятые = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ТекущаяДолжность) Тогда
				СотрудникиНеПринятые.Добавить(Выборка.Сотрудник);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		Если СотрудникиНеПринятые.Количество() > 0 Тогда
			ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(СотрудникиНеПринятые);
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

Функция ПутьКДаннымПоИмениДанныхПриказаОПриеме(ИмяПоля) Экспорт
	
	Если ВРег(ИмяПоля) = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора") Тогда
		ПутьКДанным = "ЕСТЬNULL(ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ДатаЗавершенияТрудовогоДоговора, ДАТАВРЕМЯ(1,1,1))";
	Иначе
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымПоИмениДанныхПриказаОПриеме(ИмяПоля);
	КонецЕсли;
	
	Если ПутьКДанным = Неопределено Тогда
		
		Если ВРег(ИмяПоля) = ВРег("ТрудовойДоговорНомер") Тогда
			
			ПутьКДанным = "ЕСТЬNULL(ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ТрудовойДоговорНомер, """")";
			
		ИначеЕсли ВРег(ИмяПоля) = ВРег("ТрудовойДоговорДата") Тогда
			
			ПутьКДанным = "ЕСТЬNULL(ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ТрудовойДоговорДата, ДАТАВРЕМЯ(1,1,1))";
			
		ИначеЕсли ВРег(ИмяПоля) = ВРег("КраткосрочныйТрудовойДоговор") Тогда
			
			ПутьКДанным = 
				"ЕСТЬNULL(ВЫБОР
				|		КОГДА НЕ ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).Проведен
				|			ТОГДА ЛОЖЬ
				|		КОГДА ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ДатаЗавершенияТрудовогоДоговора = ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ЛОЖЬ
				|		КОГДА РАЗНОСТЬДАТ(ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ДатаПриема, ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ДатаЗавершенияТрудовогоДоговора, МЕСЯЦ) < 2
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ, ЛОЖЬ)";
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(ИмяПоля) Экспорт
	
	Возврат КадровыйУчетБазовый.НеобходимыСведенияПриказаОПриеме(ИмяПоля)
		ИЛИ ВРег(ИмяПоля) = ВРег("ТрудовойДоговорДата")
		ИЛИ ВРег(ИмяПоля) = ВРег("ТрудовойДоговорНомер")
		ИЛИ ВРег(ИмяПоля) = ВРег("КраткосрочныйТрудовойДоговор");
		
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = "ТЕКУЩИЙФОТ" Тогда
		Возврат "ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийФОТ, 0)";
	КонецЕсли; 
	
	Возврат КадровыйУчетБазовый.ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ИмяПоля);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные методы для получения кадровых данных

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("ОРГАНИЗАЦИЯ", 	"ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ПОДРАЗДЕЛЕНИЕ", 	"ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ДОЛЖНОСТЬ", 		"ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))");
	
	Если СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля) = Неопределено Тогда
		Возврат "КадроваяИсторияСотрудниковСрезПоследних." + ИмяПоля;
	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимаИсторияГрафиков(ИмяПоля)
	
	Если ВРег(ИмяПоля) = ВРег("ГрафикРаботы") 
		ИЛИ ВРег(ИмяПоля) = ВРег("ТекущийГрафикРаботы") Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции форм кадровых документов

// Дополняет переданную коллекцию колонками
//		Организация
//		ГоловнаяОрганизация
//		ТекущаяОрганизация
//		ТекущаяПозиция
//		ТекущееПодразделение
//		ТекущаяДолжность
//  	ТекущееКоличествоСтавок
// Колонки Текущая... заполняются только для записей перемещения и увольнения
// Колонки Организация, ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, ПозицияЕсть, Регистратор)
	
	КадровыеДвижения.Колонки.Добавить("ТекущаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДвижения.Колонки.Добавить("ТекущееПодразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяДолжность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КадровыеДвижения.Колонки.Добавить("ТекущееКоличествоСтавок", Новый ОписаниеТипов("Число"));
	КадровыеДвижения.Колонки.Добавить("ТекущийВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = КадровыеДвижения.Скопировать(, "Сотрудник,ДатаСобытия");
	ИзмеренияДаты.Колонки.ДатаСобытия.Имя = "Период";
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "<>", Регистратор));
	
	ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних(
		Запрос.МенеджерВременныхТаблиц, 
		Истина,
		"КадроваяИсторияСотрудников",
		ИзмеренияДаты,
		Отбор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник,
	|	КадроваяИсторияСотрудниковСрезПоследних.Период КАК ДатаСобытия,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ТекущееПодразделение,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжность,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.КоличествоСтавок, 0) КАК ТекущееКоличествоСтавок,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ТекущийВидЗанятости
	|ИЗ
	|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		НайденныеСтроки = КадровыеДвижения.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, 
			"ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущееКоличествоСтавок,ТекущийВидЗанятости");
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Организация) Тогда
				НайденнаяСтрока.Организация = Выборка.ТекущаяОрганизация;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекущийГрафикСотрудника(Дата, Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА &ДатаСобытия < ГрафикРаботыСотрудниковСрезПоследних.ДействуетДо
	               |			ТОГДА ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы
	               |		КОГДА ГрафикРаботыСотрудниковСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы
	               |		ИНАЧЕ ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботыПоОкончании
	               |	КОНЕЦ КАК ТекущийГрафик
				   	|ИЗ
	               |	РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних(&ДатаСобытия, Сотрудник = &Сотрудник) КАК ГрафикРаботыСотрудниковСрезПоследних";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаСобытия", НачалоДня(Дата) - 1);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекущийГрафик = Выборка.ТекущийГрафик;
	КонецЕсли;	
	
	Возврат ТекущийГрафик;
	
КонецФункции

Процедура ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников)
	
	ПараметрыПолученияСотрудников.Вставить("РаботникиПоТрудовымДоговорам", Истина);
	ПараметрыПолученияСотрудников.Вставить("РаботникиПоДоговорамГПХ", Неопределено);
	
КонецПроцедуры

Функция УстановитьВидЗанятостиНовогоСотрудникаВСтрокеПриемаНаРаботуСписком(СтрокаДокумента, СписокСотрудниковДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудниковДокумента", СписокСотрудниковДокумента);
	Запрос.УстановитьПараметр("Сотрудник", СтрокаДокумента.Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникТекущий
		|		ПО Сотрудники.ФизическоеЛицо = СотрудникТекущий.ФизическоеЛицо
		|			И (СотрудникТекущий.Ссылка = &Сотрудник)
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудниковДокумента)";
		
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		СтрокаДокумента.ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство;
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
