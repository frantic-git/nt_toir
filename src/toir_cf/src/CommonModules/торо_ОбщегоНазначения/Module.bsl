////////////////////////////////////////////////////////////////////////////////
// торо_ОбщегоНазначения: общие методы
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
// Функция устанавливает ссылку нового документа, лишь в том случае, если 
// ссылка не установлена.
//
// Параметры:
// 	ЭтотОбъект - Объект - объект.
// Возвращаемое значение:
//		Ссылка - ссылка объекта.
Функция ПолучитьСсылкуНаОбъект(ЭтотОбъект) Экспорт
	
	// Получаем тип объекта
	ТипДокумента = ЭтотОбъект.Метаданные().Имя;	
	Ссылка = Неопределено;
	
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
	
		ИмяОбъекта = ЭтотОбъект.Метаданные().Имя;
		Если Не Метаданные.Документы.Найти(ИмяОбъекта) = Неопределено Тогда
				Ссылка = Документы[ТипДокумента].ПолучитьСсылку();
		ИначеЕсли Не Метаданные.Справочники.Найти(ИмяОбъекта) = Неопределено Тогда
			Ссылка = Справочники[ТипДокумента].ПолучитьСсылку();
		КонецЕсли;
			
		ЭтотОбъект.УстановитьСсылкуНового(Ссылка);
		Ссылка = ЭтотОбъект.ПолучитьСсылкуНового();
	Иначе
		Ссылка = ЭтотОбъект.Ссылка;
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		Ссылка = Документы[ТипДокумента].ПустаяСсылка();
	КонецЕсли;

	Возврат Ссылка;
	
КонецФункции

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - ТаблицаЗначений - таблица значений, куда добавляются строки.
//  ЗаполнятьНомераСтрокПоИсточнику - Булево - заполнять реквизит НомерСтроки по номеру строки источника.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ЗаполнятьНомераСтрокПоИсточнику = Ложь) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		
		Если ЗаполнятьНомераСтрокПоИсточнику Тогда
			СтрокаТаблицыПриемника.НомерСтроки = СтрокаТаблицыИсточника.Владелец().Индекс(СтрокаТаблицыИсточника);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает строку продолжительности в часах, минутах и секундах (например: "4 ч. 45 м. 30 с.").
// Параметры:
//		ПродолжительностьВСекундах - Число - продолжительность в секундах.
//
// Возвращаемое значение:
//		Строка - продолжительность в часах, минутах и секундах.
Функция ПродолжительностьВЧасах(ПродолжительностьВСекундах) Экспорт
	
	Если ТипЗнч(ПродолжительностьВСекундах) <> Тип("Число") Тогда
		Возврат "0 с.";
	КонецЕсли;
	
	Часы    = Цел(ПродолжительностьВСекундах / 3600);
	Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
	Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
	
	Возврат "" + Часы + " ч. " + Минуты + " мин. " + Секунды + " с.";
	
КонецФункции

// Возвращает строку продолжительности в часах и минутах (например: "4 ч. 45 м.").
// При нулевом значении минут или секунд - нулевое значение не выводится.
// Параметры:
//		ПродолжительностьВСекундах - Число - продолжительность в секундах.
//
// Возвращаемое значение:
//		Строка - продолжительность в часах и минутах.
Функция ПродолжительностьВЧасахМинутах(ПродолжительностьВСекундах) Экспорт
	
	Если ТипЗнч(ПродолжительностьВСекундах) <> Тип("Число") Тогда
		Возврат "";
	КонецЕсли;
	
	Часы = Цел(ПродолжительностьВСекундах / 3600);
	Минуты = Окр(ПродолжительностьВСекундах / 60 - Часы * 60);
	
	ЧасыСтрокой = ?(Часы = 0, "", Строка(Часы) + " ч. ");
	МинутыСтрокой = ?(Минуты = 0, "", Строка(Минуты) + " м."); 
	
	Возврат СтрШаблон("%1%2", ЧасыСтрокой, МинутыСтрокой);
	
КонецФункции

// Проверяет, что открыто несколько сеансов у этого пользователя.
// Возвращаемое значение:
//		Булево - открыто несколько сеансов.
Функция ПроверитьОткрытиеНесколькихСеансов() Экспорт
	
	ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
	УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого ТекСоединение Из МассивСоединений Цикл
		Если (ТекСоединение.ИмяПриложения = "1CV8C") 
			И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
			И (НЕ ТекСоединение.Пользователь = неопределено)
			И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя)
			И ТекСоединение.НомерСеанса <> 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Функция помещает результат запроса в массив структур.
// Применима, когда необходимо передать данные с сервера на клиент.
//
// Параметры:
//		РезультатЗапроса - РезультатЗапроса - результат запроса.
//
// Возвращаемое значение:
//		Массив - массив структур.
Функция РезультатЗапросаВМассивСтруктур(РезультатЗапроса) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтрокаИменКолонок = "";
		Для Каждого Колонка ИЗ РезультатЗапроса.Колонки Цикл
			СтрокаИменКолонок = ?(СтрокаИменКолонок="", "", СтрокаИменКолонок+",")+Колонка.Имя;
		КонецЦикла;
		
		Если СтрокаИменКолонок = "" Тогда
			Возврат МассивВозврата;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураДанных = Новый Структура(СтрокаИменКолонок);
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			МассивВозврата.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Функция проверят наличие ролей с префиксом "торо", если отсутствует роль "Базовые права ТОиР".
// Возвращаемое значение:
//		Булево - доступна ли роль.
Функция ДоступностьРолиТОиРБазовыеПрава() Экспорт
	
	Если НЕ РольДоступна("торо_БазовыеПрава") Тогда	
		Для Каждого Роль Из ПользователиИнформационнойБазы.ТекущийПользователь().Роли Цикл
			Если Найти(Роль.Имя, "торо_") > 0 Тогда
				Возврат Ложь;	
			КонецЕсли;
		КонецЦикла;
	КонецЕслИ;
	Возврат Истина;
КонецФункции

// Извлекает временную таблицу из запроса. 
// Не используется непосредственно в коде, но используется при отладке. Не удалять.
//
// Параметры:
//		Запрос - Запрос - запрос с установленным менеджером временных таблиц.
//		ИмяВнутреннейТаблицы - Строка - имя таблицы для извлечения.
// Возвращаемое значение: 
//		ТаблицаЗначений - таблица значений из запроса.
 Функция ИзвлечьВТ(Запрос, ИмяВнутреннейТаблицы) Экспорт
	
	Перем ЗапросТМП, Результат;
	
	// Получаем таблицу из менеджера временных таблиц запроса.
	ЗапросТМП =	Новый Запрос("ВЫБРАТЬ * ИЗ " + ИмяВнутреннейТаблицы);
	ЗапросТМП.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц; 
	Результат = ЗапросТМП.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Получается таблицу всех родителей элемента иерархического справочника.
//
// Параметры:
//		Ссылка - Ссылка - ссылка на объект.
//		ВключатьСамОбъект - Булево - включать сам объект в таблицу.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица с колонками
//  		* Родитель - Ссылка - ссылка на родителя или объект,
//  		* Уровень - Число - Удаленность родителя от объекта (0 - сам объект, 1 - ближайший родитель и т.д.).
//
Функция ПолучитьТаблицуРодителейОбъекта(Ссылка, ВключатьСамОбъект = Истина) Экспорт
	
	ТипСсылки = ТипЗнч(Ссылка);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСсылки);
	
	ОбъектыРемонтаРодители = Новый ТаблицаЗначений;
	ОбъектыРемонтаРодители.Колонки.Добавить("Родитель", Новый ОписаниеТипов(МассивТипов));
	ОбъектыРемонтаРодители.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ОбъектыРемонтаРодители;
	КонецЕсли;
	
	Если ВключатьСамОбъект Тогда
		ТекСтр = ОбъектыРемонтаРодители.Добавить();
		ТекСтр.Родитель = Ссылка;
		ТекСтр.Уровень=0;
	КонецЕсли;
	
	Уровень = 1;
	РодительОбъекта = Ссылка;
	
	Пока ЗначениеЗаполнено(РодительОбъекта.Родитель) цикл
		РодительОбъекта=РодительОбъекта.Родитель;
		
		ТекСтр = ОбъектыРемонтаРодители.Добавить();
		ТекСтр.Родитель = РодительОбъекта;
		ТекСтр.Уровень = Уровень;

		Уровень = Уровень + 1;
	КонецЦикла;
	
	Возврат ОбъектыРемонтаРодители;
	
КонецФункции

// Получается таблицу всех родителей списка элементов иерархического справочника.
//
// Параметры:
//		СписокОбъектов - Массив - список объектов.
//		ВключатьСамОбъект - Булево - включать сам объект в таблицу.
//		ТипСсылки - Тип - тип ссылок в массиве для добавления колонки в таблицу значений.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - с колонками:
//  		Родитель - ссылка на родителя или объект,
//  		Уровень - Удаленность родителя от объекта (0 - сам объект, 1 - ближайший родитель и т.д.).
//  		Объект - элемент исходного списка.
Функция ПолучитьТаблицуРодителейСпискаОбъектов(СписокОбъектов, ТипСсылки, ВключатьСамОбъект = Истина) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСсылки);
	
	ОбъектыРемонтаРодители = Новый ТаблицаЗначений;
	ОбъектыРемонтаРодители.Колонки.Добавить("Родитель", Новый ОписаниеТипов(МассивТипов));
	ОбъектыРемонтаРодители.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ОбъектыРемонтаРодители.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов));
	
	Если ВключатьСамОбъект Тогда
		Для каждого Объект из СписокОбъектов Цикл
			НоваяСтрока = ОбъектыРемонтаРодители.Добавить();
			НоваяСтрока.Родитель = Объект;
			НоваяСтрока.Уровень = 0;
			НоваяСтрока.Объект = Объект;
		КонецЦикла;
	КонецЕсли;
	
	НомерУровня = 1;
	ТекущийМассивОбъектов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТекущийМассивОбъектов, СписокОбъектов);
	
	// Соответствие, где Ключ - один из родителей (узел дереа иерархии),
	// а значение - массив элементов нижнего уровня (листьев дерева), соответсвующих ему,
	// (не только непосредственно вложенных, но и вложенных в дочерние узлы).
	// Нужно, потому что в таблице в поле "Объект" требуется всегда указывать лист дерева.
	СоответствиеНачалаЦепочки = Новый Соответствие;
	
	// Рекурсивно получаем и записываем родителей по одному уровню вверх сразу для всех объектов, пока они не закончатся.
	Пока ТекущийМассивОбъектов.Количество() > 0 Цикл
		СоответствиеРодителей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТекущийМассивОбъектов, "Родитель", Истина);
		ТекущийМассивОбъектов.Очистить();
		
		Для каждого КлючИЗначение из СоответствиеРодителей Цикл
			Родитель = КлючИЗначение.Значение;
			
			Если ЗначениеЗаполнено(Родитель) Тогда
				
				// На первой итерации СоответствиеНачалаЦепочки еще пустое. Но ключом в
				// СоответствиеРодителей является нужный нам лист.
				Если НомерУровня = 1 Тогда
					МассивНачальныхОбъектов = Новый массив;
					МассивНачальныхОбъектов.Добавить(КлючИЗначение.Ключ);
				Иначе
					МассивНачальныхОбъектов = СоответствиеНачалаЦепочки[КлючИЗначение.Ключ];
				КонецЕсли;
				
				Для каждого НачальныйОбъект из МассивНачальныхОбъектов Цикл
					НоваяСтрока = ОбъектыРемонтаРодители.Добавить();
					НоваяСтрока.Родитель = Родитель;
					НоваяСтрока.Уровень = НомерУровня;
					НоваяСтрока.Объект = НачальныйОбъект;
				КонецЦикла;

				Если ТекущийМассивОбъектов.Найти(Родитель) = Неопределено Тогда
					ТекущийМассивОбъектов.Добавить(Родитель);
				КонецЕсли;
				
				// Добавляем сведения о листьях для родителя. 
				МассивНачальныхОбъектовРодителя = СоответствиеНачалаЦепочки[Родитель];
				Если МассивНачальныхОбъектовРодителя = Неопределено Тогда
					МассивНачальныхОбъектовРодителя = Новый Массив;
					СоответствиеНачалаЦепочки.Вставить(Родитель, МассивНачальныхОбъектовРодителя);
				КонецЕсли;
							
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачальныхОбъектовРодителя, МассивНачальныхОбъектов);
				// Очищаем массив у родителя, которого только что обработали во избежание дублировнаия строк в таблице.
				МассивНачальныхОбъектов.Очистить();
				
			КонецЕсли;
		КонецЦикла;
		
		НомерУровня = НомерУровня + 1;
	КонецЦикла;
	
	Возврат ОбъектыРемонтаРодители;
	
КонецФункции

// Проверяет пересечение интервалов работы сотрудника в рамках одного ремонта.
// 
// Параметры:
// 		Документ - ДокументОбъект - документ объект.
//		ТабЧасть - Строка - табличная часть исполнителей для проверки.
//
// Возвращаемое значение: 
//		Булево - Истина, если есть пересекающиеся интервалы работы.
Функция ПроверитьВремяРаботыСотрудников(Документ, ТабЧасть) Экспорт
	Отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.ID КАК ID,
	               |	Сотрудники.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	Сотрудники.Квалификация КАК Квалификация,
	               |	Сотрудники.Сотрудник КАК Сотрудник,
	               |	Сотрудники.ДатаНачала КАК ДатаНачала,
	               |	Сотрудники.ДатаОкончания КАК ДатаОкончания,
	               |	Сотрудники.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ Сотрудники
	               |ИЗ
	               |	&Сотрудники КАК Сотрудники
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.ID КАК ID,
	               |	Сотрудники.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	Сотрудники.Квалификация КАК Квалификация,
	               |	Сотрудники.Сотрудник КАК Сотрудник,
	               |	Сотрудники.ДатаНачала КАК ДатаНачала,
	               |	Сотрудники.ДатаОкончания КАК ДатаОкончания,
	               |	Сотрудники.НомерСтроки КАК НомерСтроки,
	               |	Сотрудники1.ДатаНачала КАК ДатаНачала1,
	               |	Сотрудники1.ДатаОкончания КАК ДатаОкончания1,
	               |	Сотрудники1.НомерСтроки КАК НомерСтроки1
	               |ИЗ
	               |	Сотрудники КАК Сотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники1
	               |		ПО Сотрудники.ID = Сотрудники1.ID
	               |			И Сотрудники.РемонтыОборудования_ID = Сотрудники1.РемонтыОборудования_ID
	               |			И Сотрудники.Квалификация = Сотрудники1.Квалификация
	               |			И Сотрудники.Сотрудник = Сотрудники1.Сотрудник
	               |			И Сотрудники.НомерСтроки <> Сотрудники1.НомерСтроки
	               |			И (ВЫБОР
	               |				КОГДА Сотрудники.ДатаНачала >= Сотрудники1.ДатаНачала
	               |						И Сотрудники.ДатаНачала <= Сотрудники1.ДатаОкончания
	               |					ТОГДА ИСТИНА
	               |				КОГДА Сотрудники.ДатаОкончания >= Сотрудники1.ДатаНачала
	               |						И Сотрудники.ДатаОкончания <= Сотрудники1.ДатаОкончания
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
	               |ГДЕ
	               |	НЕ Сотрудники1.ДатаНачала ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	ID,
	               |	РемонтыОборудования_ID,
	               |	Квалификация,
	               |	Сотрудник";
				   
	Запрос.УстановитьПараметр("Сотрудники", Документ[ТабЧасть].Выгрузить());
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВыборкаАйДИ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАйДИ.Следующий() Цикл
			ВыборкаРемонты = ВыборкаАйДИ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаРемонты.Следующий() Цикл
				ВыборкаКвалификация = ВыборкаРемонты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
				Пока ВыборкаКвалификация.Следующий() Цикл
					ВыборкаСотрудников = ВыборкаКвалификация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСотрудников.Следующий() Цикл
						Выборка = ВыборкаСотрудников.Выбрать();
						Стр = "";
						Пока Выборка.Следующий() Цикл
							Стр = Стр + Выборка.НомерСтроки + " и " + Выборка.НомерСтроки1 + ", ";
						КонецЦикла;
						Если Стр <> "" Тогда
							Стр = Лев(Стр, СтрДлина(Стр)-2);
							Работы = Документ.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ВыборкаКвалификация.ID));
							ШаблонСообщения = НСтр("ru = 'Для операции %1 у сотрудника %2 с квалификацией %3 введены пересекающиеся интервалы работы в строках %4'");
							ТекстСообщения = СтрШаблон(ШаблонСообщения, Работы[0].РемонтнаяРабота, ВыборкаКвалификация.Сотрудник, ВыборкаКвалификация.Квалификация, Стр);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						КонецЕсли; 
					КонецЦикла; 
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		Отказ = Истина;	
	КонецЕсли;	
	Возврат Отказ;
КонецФункции 

// Проверяет уникальность наименования по заданному объекту.
//
// Параметры:
// 		Объект - Строка - имя объекта метаданных, например "Справочник.торо_ОбъектыРемонта".
// 		Наименование - Строка - введенное пользователем наименование.
// 		Ссылка - ЛюбаяСсылка - ссылка на объект, чтобы исключить объект из проверки на уникальность (Чтобы не считать самого себя).
//
// Возвращаемое значение: 
//		Булево - Истина, если имя уникально.
Функция НаименованиеУникально(Объект, Наименование, Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(Объект.Ссылка) КАК Количество
	               |ИЗ
	               |	" + Объект + " КАК Объект
	               |ГДЕ
	               |	Объект.Наименование = &Наименование
	               |	И Объект.Ссылка <> &Ссылка";
				   
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Не Результат.Количество > 0;
	
КонецФункции

// Проверяет есть ли в справочнике элементы.
//
// Параметры:
// 		ИмяСправочника - Строка - имя справочника.
// 
// Возвращаемое значение:
// 		Булево - Истина, если есть данные в справочнике.
//
Функция ЕстьЭлементыСправочника(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ОсновнаяТаблица";
	# КонецОбласти
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Добавляет в запрос  для обработчика ОбработкаПолученияДанныхВыбора отборы 
// по данным Параметры.Отбор и Параметры.ВыборГруппИЭлементов.
// Необходимо, чтобы не терялись отборы на поле в случае, когда СтандартнаяОбработка = Ложь.
//
// Параметры:
//		Запрос - Запрос - Запрос, который нужно дополнить.
//		Параметры - Структура - Содержит параметры выбора из обработчика ОбработкаПолученияДанныхВыбора.
//		ИмяТаблицы - Строка - Имя основной таблицы запроса.
//		ТекстЗамены - Строка - какой текст в запросе заменить на строку отборов.
//
Процедура СформироватьСтрокуОтборовПоПараметрамПолученияДанныхВыбора(Запрос, Параметры, ИмяТаблицы = "Таблица", ТекстЗамены = "&ДополнительныеУсловияОтбора") Экспорт
	
	Отборы = Новый Массив;
	ПрефиксПараметраОтбора = "ПараметрыОтбора";
	
	// Общий отбор по параметрам
	Для Каждого КлючЗначение Из Параметры.Отбор Цикл
		ЗначениеПоля = КлючЗначение.Значение;
		ИмяПоля      = КлючЗначение.Ключ;
		ИмяПараметра = ПрефиксПараметраОтбора + ИмяПоля;
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Массив") Или ТипЗнч(ЗначениеПоля) = Тип("ФиксированныйМассив") 
			Или ТипЗнч(ЗначениеПоля) = Тип("СписокЗначений") Тогда
			Отборы.Добавить(" %1." + ИмяПоля + " В (&" + ИмяПараметра + ")");
		Иначе
			Отборы.Добавить(" %1." + ИмяПоля + " = &" + ИмяПараметра);
		КонецЕсли;
		
		Запрос.УстановитьПараметр(ИмяПараметра, КлючЗначение.Значение);
	КонецЦикла;
	
	// Дополнительные отборы
	Если Параметры.Свойство("ВыборГруппИЭлементов") Тогда
		Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
			
			Отборы.Добавить(" %1.ЭтоГруппа");
			
		ИначеЕсли Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			
			Отборы.Добавить(" (НЕ %1.ЭтоГруппа)");
			
		КонецЕсли;
	КонецЕсли;
	
	ШаблонОтбора = СтрСоединить(Отборы, " И ");
	ТекстОтбора = "ИСТИНА";

	Если НЕ ПустаяСтрока(ШаблонОтбора) Тогда
		ТекстОтбора = СтрШаблон(ШаблонОтбора, ИмяТаблицы);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗамены, ТекстОтбора);
	
КонецПроцедуры

#КонецОбласти
