
#Область ПрограммныйИнтерфейс

#Область ПолучениеИнформацииОЦенеОстаткахТоваровИзФормПодборов

// Переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное
// хранилище.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма подбора.
//
// Возвращаемое значение:
//	 Строка - Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыПараметровДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов        = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				
				СтрокаЗначенияОтбора = ПодчиненныеСтроки[0];
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

// Переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное хранилище.
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма подбора.
//
// Возвращаемое значение:
//		Строка - Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыСопостовленияДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалОт");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалДо");
	ТаблицаПараметров.Колонки.Добавить("Интервал");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			Если СтрокаДереваОтборов.ИнтервалОт <> Неопределено Тогда
				СтрокаТаблицы.Интервал = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			СтрокаТаблицы.Интервал = Ложь;
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаЗначенияОтбора Из ПодчиненныеСтроки Цикл
				
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
				СтрокаТаблицы.Интервал = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает отбор по группе номенклатыр в списке номенклатуры.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатуры(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ВариантНавигации = "ПоИерархии" Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено Тогда
		Родитель = Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		Родитель = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Родитель", Родитель, 
		ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры

// Добавляет отбор в указанную коллекцию области отбора.
//
// Параметры:
//	 ОбластьОтбора - ОтборКомпоновкиДанных - отбор динамического списка,
//	 ЛевоеЗначение - Строка - путь к данным поля отбора,
//	 ПравоеЗначение - Произвольный - значение отбора,
//	 ВидОтбора - ВидСравненияКомпоновкиДанных - вид сравнения,
//	 Представление - Строка - представление элемента отбора.
//
Процедура ДобавитьЭлементОтбора(ОбластьОтбора, ЛевоеЗначение, ПравоеЗначение, ВидОтбора, Представление = "") Экспорт
	
	ЭлементОтбора                   = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ПравоеЗначение    = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ВидСравнения      = ВидОтбора;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементОтбора.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт

	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		
		УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
		
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Если Форма.ИспользоватьФильтры Тогда
			
			Если Форма.ВариантНавигации = "ПоСвойствам" Тогда
				
				УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
				
			ИначеЕсли Форма.ВариантНавигации = "ПоИерархии" Тогда
				
				УстановитьОтборПоРодителюТекущейСтрокиНоменклатуры(Форма);
				УстановитьОтборПоИерархииНоменклатуры(Форма);
				
			КонецЕсли;
			
		Иначе
			
			УдалитьОтборПоИерархииНоменклатуры(Форма);
			УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении варианта навигации.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииВариантаНавигации(Форма) Экспорт
	
	УстановитьВариантНавигацииИИспользоватьФильтрДоТДК(Форма);
	УстановитьСтраницуВариантаНавигации(Форма);
	УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если Форма.ВариантНавигации = "ПоИерархии" Тогда
		
		УстановитьОтборПоИерархииНоменклатуры(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из форм подбороа при изменении вида номенклатуры.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка, форма выбора.
//
Процедура ПриИзмененииВидаНоменклатуры(Форма) Экспорт
	
	Если Форма.ВидНоменклатуры = Форма.ВидНоменклатурыДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если Не ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
		
		ОчиститьДеревоОтборов(Форма);
		УстановитьОтборПоВидуНоменклатуры(Форма);
		
	Иначе
		
		Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
			
			СохранитьПараметрыДереваОтбора(Форма, Ложь);
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
			
		Иначе
			
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			
		КонецЕсли;
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Для сброса флажков для свойств номенклатуры в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура СброситьОтборыПоСвойствам(Форма) Экспорт
	
	Для Каждого ОтборПервыйУровень Из Форма.ДеревоОтборов.ПолучитьЭлементы() Цикл
		
		Если ОтборПервыйУровень.Отбор Тогда
			
			ОтборПервыйУровень.Отбор = Ложь;
			
			Для Каждого ОтборВторойУровень Из ОтборПервыйУровень.ПолучитьЭлементы() Цикл
				ОтборВторойУровень.Отбор = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискНаФормахПодборов

// Выполняет поиск номенклатуры по строке поиска.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//  Булево - Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискНоменклатуры(Форма) Экспорт
	
	ПоискВыполнен = Ложь;
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не Форма.ИспользоватьПолнотекстовыйПоиск Или Форма.НайтиНоменклатуруПоТочномуСоответствию Тогда
			ВыполнитьНеПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска);
		Иначе
			ВыполнитьПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска);
		КонецЕсли;
		ПоискВыполнен = Истина;
	КонецЕсли;
	
	Форма.ПоискНоменклатурыНеУдачный = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	
	ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		РезультатПоиска.Номенклатура, 
		ПоискВыполнен);
		
	Форма.ЕстьФильтрПоПоискуНоменклатуры = ПоискВыполнен;
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(Форма);
	КонецЕсли;
	
	Возврат ПоискВыполнен;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Сохраняет значения реквизитов на форме в хранилище общих настроек.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора.
//
Процедура СохранитьНастройкиФормы(Форма) Экспорт
	
	НастройкиФормы = НастройкиФормы(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормы);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	СохранитьСпискиВыбора(Форма);
	
КонецПроцедуры

// Восстанавливает значение реквизитов на форме из хранилища общих настроек.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора.
//
Процедура УстановитьЗначенияПоНастройкамФормы(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	// Установить значения по умолчанию.
	Форма.ИспользоватьФильтры = Истина;
	Форма.ВариантНавигации = "ПоИерархии";
	Форма.ОтборКатегорииИерархияПереключатель = Ложь;
	
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		Форма.ИспользоватьФильтрыДоТДК = Истина;
		Форма.ВариантНавигацииДоТДК = "ПоИерархии";
	КонецЕсли;
	
	Форма.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Форма.ТекущаяИерархияНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	
	// Получить настройку вариант поиска товаров.
	НастройкиВариантПоискаТоваров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВариантПоискаТоваров", "");
	
	Если НастройкиВариантПоискаТоваров = Неопределено Тогда
		Форма.ВариантПоискаТоваров = "ПоУмолчанию";
	Иначе
		Форма.ВариантПоискаТоваров = НастройкиВариантПоискаТоваров;
	КонецЕсли;

	// Если есть сохраненные настройки, то установить значения по настройкам.
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы, "");
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ИспользоватьФильтры") Тогда
			Форма.ИспользоватьФильтры = Настройки.ИспользоватьФильтры;
		КонецЕсли;
		
		Если Настройки.Свойство("ИспользоватьФильтрНоменклатураПоставщика") Тогда
			Форма.ИспользоватьФильтрНоменклатураПоставщика = Настройки.ИспользоватьФильтрНоменклатураПоставщика;
		КонецЕсли;
		
		Если Настройки.Свойство("ВариантНавигации") Тогда
			Форма.ВариантНавигации = Настройки.ВариантНавигации;
			Если Настройки.ВариантНавигации = "ПоИерархии" Тогда 
				Форма.ОтборКатегорииИерархияПереключатель = Ложь;	
			Иначе
				Форма.ОтборКатегорииИерархияПереключатель = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
			Форма.ИспользоватьФильтрыДоТДК = Форма.ИспользоватьФильтры;
			Форма.ВариантНавигацииДоТДК = Форма.ВариантНавигации;
		КонецЕсли;
		
		Если Настройки.Свойство("ТаблицаПараметровОтбора") Тогда
			Если ЗначениеЗаполнено(Настройки.ТаблицаПараметровОтбора) Тогда
				Форма.ТаблицаПараметровОтбора.Загрузить(Настройки.ТаблицаПараметровОтбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ВидНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ВидНоменклатуры) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.ВидНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
					
					Форма.ВидНоменклатуры = Настройки.ВидНоменклатуры;
					
					Если Форма.ВариантНавигации = "ПоИерархии" Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
							ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
						КонецЕсли;
						
					КонецЕсли;
										
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатуры") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатуры) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатуры.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатуры;
					Форма.ТекущаяИерархияНоменклатуры = Настройки.ТекущаяИерархияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатурыПоставщика") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатурыПоставщика) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатурыПоставщика.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
					Форма.ТекущаяИерархияНоменклатурыПоставщика = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоФормаПодбора И Настройки.Свойство("ИспользоватьСерииНоменклатуры") Тогда 
			Форма.ИспользоватьСерииНоменклатуры = Настройки.ИспользоватьСерииНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить страницу варианта навигации по списку номенклатуры.
	УстановитьСтраницуВариантаНавигации(Форма);
	
	Если Форма.ВариантНавигации = "ПоСвойствам" Тогда
		ПриИзмененииВидаНоменклатуры(Форма);
	ИначеЕсли Форма.ВариантНавигации = "ПоИерархии" Тогда
		УстановитьОтборПоТекущейИерархииНоменклатуры(Форма);
	КонецЕсли;
	
	ПриИзмененииИспользованияФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеВидимостьюСтраницСПараметрамиНавигации

// Устанавливает страницу варианта навигации на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьСтраницуВариантаНавигации(Форма)
	
	Если Форма.ВариантНавигации = "ПоИерархии" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
	ИначеЕсли Форма.ВариантНавигации = "" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.ВариантНавигации = "ПоИерархии";
	ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияВидыНоменклатуры;
	КонецЕсли;
	
	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = СтраницаВариантаНавигации;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

// Возвращает структуру - текст запроса по дереву свойств вида номенклатуры
// и массив имен реквизитов номенклатуры по которым выполняется построение дерева свойств.
//
// Параметры:
//	ЕстьОтборПоРеквизитам (Булево) - признак наличия отбора по реквизитам,
//	ЕстьОтборПоДопРеквизитам (Булево) - признак наличия отбора по доп.реквизитам,
//	ЕстьОтборПоСегменту (Булево) - признак наличия отбора по сегменту.
//	РеквизитыБыстрогоОтбораНоменклатуры (Таблица значений) - таблица реквизитами быстрого отбора.
//
// Возвращаемое значение:
//	Структура.
//		- ТекстЗапроса (Строка) - текст запроса,
//		- МассивЗначений (Массив) - массив имен реквизитов номенклатуры у которых ссылочный тип.
//
Функция ТекстЗапросаПоДеревуСвойствВидаНоменклатуры(ЕстьОтборПоРеквизитам, ЕстьОтборПоДопРеквизитам, ЕстьОтборПоСегменту, РеквизитыБыстрогоОтбораНоменклатуры)
	
	Если ЕстьОтборПоРеквизитам Тогда
		
		РеквизитыНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты;
		
		МассивНеиспользуемыхРеквизитов = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовРеквизиты();
		
		ТекстВыбораРеквизитов                 = "";
		ТекстСвойстваНоменклатуры			  = "";
		ТекстВыбораРеквизитовПримитивныхТипов = "";
		
		МассивИменРеквизитов = Новый Массив;
		
		Для Каждого РеквизитНоменклатуры Из РеквизитыНоменклатуры Цикл
			
			Если МассивНеиспользуемыхРеквизитов.Найти(РеквизитНоменклатуры.Имя) = Неопределено 
				И РеквизитыБыстрогоОтбораНоменклатуры.Найти(РеквизитНоменклатуры.Имя, "ИмяРеквизита") <> Неопределено Тогда
				
				Если Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Строка"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Дата"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Число"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Булево")) Тогда
					
					ТекстСвойстваНоменклатуры = ?(ТекстСвойстваНоменклатуры = "", "", ТекстСвойстваНоменклатуры + ",") + "
					|	СправочникНоменклатура." + РеквизитНоменклатуры.Имя;					
					
					ТекстВыбораРеквизитов = ТекстВыбораРеквизитов + "
					|		КОГДА СписокСвойств.ИмяРеквизита = """ + РеквизитНоменклатуры.Имя + """
					|			ТОГДА СправочникНоменклатура." + РеквизитНоменклатуры.Имя;
					
					МассивИменРеквизитов.Добавить(РеквизитНоменклатуры.Имя);
					
				Иначе
					
					Если РеквизитНоменклатуры.Тип.СодержитТип(Тип("Строка")) Тогда
						ЗначениеПоУмолчанию = """""";
						
					ИначеЕсли РеквизитНоменклатуры.Тип.СодержитТип(Тип("Дата")) Тогда
						ЗначениеПоУмолчанию = "ДАТАВРЕМЯ(1,1,1)";
						
					ИначеЕсли  РеквизитНоменклатуры.Тип.СодержитТип(Тип("Число")) Тогда
						ЗначениеПоУмолчанию = "0";
						
					ИначеЕсли РеквизитНоменклатуры.Тип.СодержитТип(Тип("Булево")) Тогда
						ЗначениеПоУмолчанию = "ЛОЖЬ";
						
					КонецЕсли;
					
					ТекстВыбораРеквизитовПримитивныхТипов = ТекстВыбораРеквизитовПримитивныхТипов + "
					|		КОГДА СписокСвойств.ИмяРеквизита = """ + РеквизитНоменклатуры.Имя + """
					|			ТОГДА " + ЗначениеПоУмолчанию;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапросаПоСпискуСвойств = "
	|ВЫБРАТЬ
	|	ТаблицаРеквизитовОтбора.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаРеквизитовОтбора.Свойство               КАК Свойство,
	|	ТаблицаРеквизитовОтбора.ИмяРеквизита           КАК ИмяРеквизита,
	|	ТаблицаРеквизитовОтбора.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	ТаблицаРеквизитовОтбора.ЭтоДопРеквизит         КАК ЭтоДопРеквизит,
	|	ТаблицаРеквизитовОтбора.ТипЗначения            КАК ТипЗначения
	|ПОМЕСТИТЬ СписокСвойств
	|ИЗ
	|	&ТаблицаРеквизитов КАК ТаблицаРеквизитовОтбора
	|;";
	
	ТекстЗапросаЗначенийДопРеквизитов = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеОтбора,
	| 	ЛОЖЬ 										 КАК ТипЗначениеОтбора,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК ИмяРеквизита,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ПОМЕСТИТЬ СписокЗначенийОтбора
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
	|	И НоменклатураДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СписокСвойств.Свойство
	|			ИЗ
	|				СписокСвойств
	|			ГДЕ
	|				СписокСвойств.ЭтоДопРеквизит)
	|	%ТекстУсловияОтбораПоСегменту%
	|;";
	
	ТекстУсловияОтбораПоСегменту = "";
	
	Если ЕстьОтборПоСегменту Тогда
		
		ТекстУсловияОтбораПоСегменту = "
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.НоменклатураСегмента КАК Сегменты
		|			ГДЕ
		|				Сегменты.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
		|";
		
	КонецЕсли; 
	
	ТекстЗапросаЗначенийДопРеквизитов = СтрЗаменить(ТекстЗапросаЗначенийДопРеквизитов, "%ТекстУсловияОтбораПоСегменту%", ТекстУсловияОтбораПоСегменту);
	
	ТекстЗапросаПоДопРеквизитам = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки                          КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита               КАК ПредставлениеРеквизита,
	|	НоменклатураДополнительныеРеквизиты.Свойство       КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.ЗначениеОтбора КАК ЗначениеОтбора,
	| 	ЛОЖЬ 											   КАК ТипЗначениеОтбора,
	|	НоменклатураДополнительныеРеквизиты.ИмяРеквизита   КАК ИмяРеквизита,
	|	НоменклатураДополнительныеРеквизиты.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	НоменклатураДополнительныеРеквизиты.Отбор          КАК Отбор
	|ИЗ
	|	СписокЗначенийОтбора КАК НоменклатураДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСвойств КАК СписокСвойств
	|		ПО НоменклатураДополнительныеРеквизиты.Свойство = СписокСвойств.Свойство
	|ГДЕ
	|	СписокСвойств.ЭтоДопРеквизит
	|	И СписокСвойств.ТипЗначения <> ""Строка""
	|	И СписокСвойств.ТипЗначения <> ""Дата""
	|	И СписокСвойств.ТипЗначения <> ""Число""
	|	И СписокСвойств.ТипЗначения <> ""Булево""";
	
	ТекстЗапросаПоДопРеквизитамПримитивныхТипов = "
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки                       КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита            КАК ПредставлениеРеквизита,
	|	СписокСвойств.Свойство                          КАК Свойство,
	|	ВЫБОР
	|		КОГДА СписокСвойств.ТипЗначения = ""Строка""
	|			ТОГДА """"
	|		КОГДА СписокСвойств.ТипЗначения = ""Дата""
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СписокСвойств.ТипЗначения = ""Число""
	|			ТОГДА 0
	|		КОГДА СписокСвойств.ТипЗначения = ""Булево""
	|			ТОГДА ЛОЖЬ
	|	КОНЕЦ                                           КАК ЗначениеОтбора,
	| 	ЛОЖЬ 											КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита                      КАК ИмяРеквизита,
	|	СписокСвойств.ЭтоДопРеквизит                    КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	СписокСвойств.ЭтоДопРеквизит
	|	И (СписокСвойств.ТипЗначения = ""Строка""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Дата""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Число""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Булево"")";
	
	ТекстОбъединения = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапросаПоСвойствамНоменклатуры = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ" + ТекстСвойстваНоменклатуры + "
	|ПОМЕСТИТЬ СвойстваНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.ВидНоменклатуры = &ВидНоменклатуры
	|	%ТекстУсловияОтбораПоСегменту%
	|;";
	
	ТекстЗапросаПоРеквизитам = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	СписокСвойств.ПредставлениеРеквизита КАК Свойство,
	|	" + ?(ТекстВыбораРеквизитов = "","NULL","ВЫБОР" + ТекстВыбораРеквизитов + "
	|	КОНЕЦ") + "                                  КАК ЗначениеОтбора,
	|	" + ?(ТекстВыбораРеквизитов = "","ТИПЗНАЧЕНИЯ(NULL)","ТИПЗНАЧЕНИЯ(ВЫБОР" + ТекстВыбораРеквизитов + "
	|	КОНЕЦ)") + "                                  КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита КАК ИмяРеквизита,
	|	ЛОЖЬ КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваНоменклатуры КАК СправочникНоменклатура
	|		ПО (Истина)
	|ГДЕ
	|	НЕ СписокСвойств.ЭтоДопРеквизит
	|";
	
	ТекстУсловияОтбораПоСегменту = "";
	
	Если ЕстьОтборПоСегменту Тогда
		
		ТекстУсловияОтбораПоСегменту = "
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.НоменклатураСегмента КАК Сегменты
		|			ГДЕ
		|				Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
		|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
		|";
		
	КонецЕсли; 
	
	ТекстЗапросаПоСвойствамНоменклатуры = СтрЗаменить(ТекстЗапросаПоСвойствамНоменклатуры, "%ТекстУсловияОтбораПоСегменту%", ТекстУсловияОтбораПоСегменту);
	
	ТекстЗапросаПоРеквизитамПримитивныхТипов = "
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки              КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита   КАК ПредставлениеРеквизита,
	|	СписокСвойств.ПредставлениеРеквизита   КАК Свойство,
	|	" + ?(ТекстВыбораРеквизитовПримитивныхТипов = "","NULL","ВЫБОР" + ТекстВыбораРеквизитовПримитивныхТипов + "
	|	КОНЕЦ") + "                                  КАК ЗначениеОтбора,
	| 	ЛОЖЬ 								   КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита             КАК ИмяРеквизита,
	|	ЛОЖЬ                                   КАК ЭтоДопРеквизит,
	|	ЛОЖЬ                                   КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	(Не СписокСвойств.ЭтоДопРеквизит)";
	
	ТекстИтогов = "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Свойство,
	|	ТипЗначениеОтбора";
	
	ТекстЗапросаПоДереву = "";
	
	Если ЕстьОтборПоРеквизитам И Не ЕстьОтборПоДопРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаПоСвойствамНоменклатуры + ТекстЗапросаПоРеквизитам + ТекстОбъединения + 
		ТекстЗапросаПоРеквизитамПримитивныхТипов + ТекстИтогов;
		
	ИначеЕсли ЕстьОтборПоДопРеквизитам И Не ЕстьОтборПоРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаЗначенийДопРеквизитов + ТекстЗапросаПоДопРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоДопРеквизитамПримитивныхТипов + ТекстИтогов;
		
	ИначеЕсли ЕстьОтборПоДопРеквизитам И ЕстьОтборПоРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаЗначенийДопРеквизитов + ТекстЗапросаПоСвойствамНоменклатуры + ТекстЗапросаПоДопРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоДопРеквизитамПримитивныхТипов + ТекстОбъединения + ТекстЗапросаПоРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоРеквизитамПримитивныхТипов + ТекстИтогов;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ТекстЗапроса, МассивЗначений", ТекстЗапросаПоДереву, МассивИменРеквизитов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовНоменклатуры(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборовНоменклатуры(Форма, ДеревоОтборов);
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборовНоменклатуры(Форма, ДеревоОтборов)
	
	СтруктураЗапроса = ТекстЗапросаПоДеревуСвойствВидаНоменклатуры(Ложь, Ложь, Ложь,Новый ТаблицаЗначений());
	ТекстЗапроса = СтруктураЗапроса.ТекстЗапроса;
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат
	КонецЕсли;
	
	ЗапросПоДеревуОтборов = Новый Запрос;
	ЗапросПоДеревуОтборов.Текст = ТекстЗапроса;
	ЗапросПоДеревуОтборов.УстановитьПараметр("ВидНоменклатуры",   Форма.ВидНоменклатуры);
	
	ВыборкаПоСвойствам = ЗапросПоДеревуОтборов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСвойствам.Следующий() Цикл
		
		ВыборкаПоРеквизитам = ВыборкаПоСвойствам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоРеквизитам.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаПоРеквизитам.ТипЗначениеОтбора) <> Тип("Булево") Тогда
				МетаданныеСвойства = Метаданные.НайтиПоТипу(ВыборкаПоРеквизитам.ТипЗначениеОтбора);
				
				Если МетаданныеСвойства = Неопределено ИЛИ Не ПравоДоступа("Чтение", МетаданныеСвойства) Тогда
					Продолжить
				КонецЕсли;
			КонецЕсли;	
			
			ВыборкаЗначения = ВыборкаПоРеквизитам.Выбрать();
			
			Если ВыборкаЗначения.Количество() = 0 Тогда
				Продолжить
			КонецЕсли;     
			
			СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
			СтрокаРеквизита.ИмяРеквизита = ВыборкаПоРеквизитам.Свойство;
			
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ВыборкаПоРеквизитам);
			ВыборкаЗначения.Следующий();
			
			СтрокаРеквизита.Представление = ВыборкаЗначения.ПредставлениеРеквизита;
			ВыборкаЗначения.Сбросить();
			
			Пока ВыборкаЗначения.Следующий() Цикл
				
				Если ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число")
					Или ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Дата") Тогда
					
					СтрокаРеквизита.ИнтервалОт            = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
					СтрокаРеквизита.ИнтервалДо            = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
					СтрокаРеквизита.ИмяРеквизита          = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ЭтоДопРеквизит        = ВыборкаЗначения.ЭтоДопРеквизит;
					СтрокаРеквизита.ФиксированноеЗначение = Истина;
					СтрокаРеквизита.ОтборДоступен         = Истина;
					СтрокаРеквизита.ЗначениеОтбора        = ВыборкаЗначения.ЗначениеОтбора;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
					
					Прервать;
					
				ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Булево") Тогда
					
					СтрокаРеквизита.ИмяРеквизита   = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ОтборДоступен  = Истина;
					СтрокаРеквизита.ЗначениеОтбора = Истина;
					СтрокаРеквизита.ЭтоДопРеквизит = ВыборкаЗначения.ЭтоДопРеквизит;
					
					Прервать;
					
				ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Строка") Тогда
					
					СтрокаРеквизита.ИмяРеквизита          = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ЭтоДопРеквизит        = ВыборкаЗначения.ЭтоДопРеквизит;
					СтрокаРеквизита.ОтборДоступен         = Истина;
					СтрокаРеквизита.ЗначениеОтбора        = "";
					СтрокаРеквизита.ФиксированноеЗначение = Истина;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
					
					Прервать;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаЗначения.ЗначениеОтбора) Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗначения, ВыборкаЗначения);
				
				СтрокаЗначения.Представление = ВыборкаЗначения.ЗначениеОтбора;
				СтрокаЗначения.ОтборДоступен = Истина;
				
			КонецЦикла;
			
			Если СтрокаРеквизита.Строки.Количество() = 0 И Не СтрокаРеквизита.ОтборДоступен Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
			ИначеЕсли СтрокаРеквизита.Строки.Количество() > 0 И Не СтрокаРеквизита.ОтборДоступен Тогда
				СтрокаРеквизита.Строки.Сортировать("Представление");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает отбор списка номенклатуры по текущей иерархии номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
Процедура УстановитьОтборПоТекущейИерархииНоменклатуры(Форма)
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Родитель", 
		Форма.ТекущаяИерархияНоменклатуры, ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры

// Отключает установленный отбор по группе номенклатуры у списка номенклатуры
// на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатуры(Форма)
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура, "Родитель",,,,Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по родителю текущей строки списка номенклатуры
// в формах подборов товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоРодителюТекущейСтрокиНоменклатуры(Форма)
	
	ТекущаяСтрока = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Или ТипЗнч(ТекущаяСтрока) = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
КонецПроцедуры

// Устанавливает отборпо виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УстановитьОтборПоВидуНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Истина);
	
КонецПроцедуры

// Устанавливает отбор по списку значений из строк дерева отборов.
//
// Параметры:
//	ИмяЭлементаОтбора - Строка - имя элемента отбора,
//	Отбор - ОтборКомпоновкиДанных - коллекция элементов отбора списка номенклатуры,
//	СтрокиДереваОтборов - Массив - массив строк дерева отборов.
//
Процедура УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, Отбор, СтрокиДереваОтборов)
	
	ЗначенияОтборов = Новый Массив;
	Для Каждого Строка Из СтрокиДереваОтборов Цикл
		ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, ИмяЭлементаОтбора, ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
КонецПроцедуры

// Устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора, форма выбора.
//
Процедура УстановитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	Если ЭтоФормаВыбораХарактеристик Тогда
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список);
	Иначе
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	КонецЕсли;
	
	ИмяСсылки = "Ссылка.[";
	
	УстанавливатьОтборСпискаХарактеристик = Ложь;
	
	Если ЭтоФормаВыбораХарактеристик Тогда
		УстанавливатьОтборСпискаХарактеристик = Истина;
		ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики);
	КонецЕсли;
	
	Для каждого СтрокаДереваОтборов Из ДеревоОтборов.Строки Цикл
		
		Если СтрокаДереваОтборов.ОтборДоступен Тогда
			
			Если Не СтрокаДереваОтборов.Отбор Тогда
				Продолжить;
			КонецЕсли;
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаДереваОтборов.ИмяРеквизита;
			Если СтрокаДереваОтборов.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]";
			КонецЕсли;
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, Истина, 
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, Истина, 
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата") 
				Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// Отбор не доступен - это строка отбора, имеющая подчиненные строки.
			МассивСтрок = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = МассивСтрок[0];
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаОтбора.ИмяРеквизита;
			Если СтрокаОтбора.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаОтбора.ИмяРеквизита + "]";
			КонецЕсли;
			
			// Установить отбор по значениям подчиненных строк строки дерева отборов.
			Если Не СтрокаОтбора.ОтборХарактеристик Тогда 
				УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, ОтборСпискаНоменклатуры, МассивСтрок);
			ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
				УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, ОтборСпискаХарактеристик, МассивСтрок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает установленные отборы по виду номенклатуры и по свойствам выбранного
// вида номенклатуры на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора, форма выбора.
//
Процедура УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УдалитьОтборПоВидуНоменклатуры(Форма);
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "ВидНоменклатуры", Форма.ВидНоменклатуры, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоВидуНоменклатуры", Ложь);
	
КонецПроцедуры

// Удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = НеУдаляемыеЭлементыОтборов();
	
	// Удалить элементы отбора по свойствам вида номенклатуры.
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы;
		ВГраница = ОтборСпискаНоменклатуры.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
		ЭлементОтбора = ОтборСпискаНоменклатуры[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаНоменклатуры.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭтоФормаВыбораХарактеристик Тогда
		
		Если ЭтоФормаВыбораХарактеристик Тогда
			ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы;
		Иначе
			ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы;
		КонецЕсли;
		
		ВГраница = ОтборСпискаХарактеристик.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
			ЭлементОтбора = ОтборСпискаХарактеристик[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаХарактеристик.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НеУдаляемыеЭлементыОтборов() 
	
	НеУдаляемыеЭлементы = Новый Массив;
	
	НеУдаляемыеЭлементы.Добавить("ПоискПоПодстроке");
	НеУдаляемыеЭлементы.Добавить("ЦеныНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ЦенаХарактеристики");
	НеУдаляемыеЭлементы.Добавить("ГруппаТолькоВНаличии");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВидуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВладельцуХарактеристик");
	НеУдаляемыеЭлементы.Добавить("ОтборПоТипуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоУмолчанию");
	НеУдаляемыеЭлементы.Добавить("ОтборПоНоменклатуре");
	
	Возврат НеУдаляемыеЭлементы
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Сохраняет флаги для дерева отбора на формах подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//	Закрыть - Булево - признак показывыющий что форма закрывается, тогда нужно сохранять
//	все настройки отборов, а не только Качество в случае изменения вида номенклатуры.
//
Процедура СохранитьПараметрыДереваОтбора(Форма, Закрыть)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	Если Закрыть Тогда
		
		ТаблицаПараметровОтбора.Очистить(); 
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Отбор Тогда
				
				Если ПервыйУровень.ФиксированноеЗначение Тогда
					
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					НоваяСтрока.ИмяРеквизита = ПервыйУровень.Представление;
					НоваяСтрока.Представление = ПервыйУровень.Представление;
					НоваяСтрока.ЗначениеОтбора = ПервыйУровень.ЗначениеОтбора;
					НоваяСтрока.ПредставлениеОтбора = ПервыйУровень.ПредставлениеОтбора;
					НоваяСтрока.ФиксированноеЗначение = Истина;
					НоваяСтрока.Отбор = Истина;
					
					Если ПервыйУровень.ИнтервалОт<>Неопределено Или ПервыйУровень.ИнтервалДо<>Неопределено Тогда
						
						Если ТипЗнч(ПервыйУровень.ИнтервалОт) = Тип("Дата") Или ТипЗнч(ПервыйУровень.ИнтервалДо) = Тип("Дата") Тогда
							
							НоваяСтрока.ИнтервалДата = Истина;
							НоваяСтрока.ИнтервалДатаОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалДатаДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						Иначе
							
							НоваяСтрока.ИнтервалЧисла = Истина;
							НоваяСтрока.ИнтервалЧислаОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалЧислаДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ИмяРеквизита = ПервыйУровень.Представление;
					
					Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
						
						Если ВторойУровень.Отбор Тогда
							
							НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
							НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
							НоваяСтрока.Представление = ВторойУровень.Представление;
							НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ТаблицаПараметровОтбора.Загрузить(ТаблицаПараметровОтбора);
	
КонецПроцедуры

// Расставляет флаги для дерева отбора на формах подбора.
//
Процедура ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	ТекущиеИмяРеквизита = "";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Отбор",Истина);
	ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из ОтобранныеСтроки Цикл
		
		Если СтрокаТаблицы.ИмяРеквизита <> ТекущиеИмяРеквизита Тогда
			
			ТекущиеИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
			
			ЕстьПометкаНаВторомУровне = Ложь;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", ТекущиеИмяРеквизита);
			СтрокаДереваПервогоУровня = ДеревоОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаДереваПервогоУровня.Количество()>0 Тогда
				
				Если СтрокаТаблицы.ФиксированноеЗначение Тогда
					
					СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
					СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
					СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
					
					Если СтрокаТаблицы.ИнтервалДаты Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалДатыОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалДатыДо;
						
						Продолжить;
						
					ИначеЕсли СтрокаТаблицы.ИнтервалЧисла Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалЧислаОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалЧислаДо;
						
						Продолжить;
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокиДереваВторогоУровня = СтрокаДереваПервогоУровня[0].Строки;
				СтрокаНайдена= Истина;
				
			Иначе
				
				СтрокаНайдена = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаНайдена Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", СтрокаТаблицы.Представление);
			СтрокаПоиска = СтрокиДереваВторогоУровня.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаПоиска.Количество() > 0 Тогда
				
				СтрокаПоиска[0].Отбор = Истина;
				СтрокаДереваПервогоУровня[0].Отбор = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Сохраняет вариант навигации до выбора варианта навигации по товарам другого качества.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры, форма подбора, форма выбора.
//
Процедура УстановитьВариантНавигацииИИспользоватьФильтрДоТДК(Форма)
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодобныеТоварыНоменклатуры(Форма) И
		Не (Форма.ВариантНавигации = "ПоТоварамДругогоКачества") Тогда
		
		Форма.ВариантНавигацииДоТДК = Форма.ВариантНавигации;
		Форма.ИспользоватьФильтрыДоТДК = Форма.ИспользоватьФильтры;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПоискНаФормахПодборов

// Выполняет полнотекстовый поиск номенклатуры по строке поиска введенной в форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора. форма подбора,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска)
	
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	РезультатПоиска = СтруктураРезультатовПоиска();
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	// Создать список поиска.
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластиПоискаНоменклатуры(Форма);
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции = 20;
	НачальнаяПозиция = 0;
	ВГраница = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для Сч = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(Сч);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
	
КонецПроцедуры

// Выполняет неполнотекстовый поиск номенклатуры по строке поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма из которой была вызвана функция поиска,
//	РезультатПоиска - Неопределено - переменная, в которую записывается структура, результат поиска.
//
Процедура ВыполнитьНеПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска)
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СписокПоиска = РезультатПоискаНоменклатуры(Форма);
	УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска);
	ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска);
	ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
	
КонецПроцедуры

// Проверяет принадлежность элемента списка поиска, в зависиимости
// от принадлежности элемента к типу метаданных, включает значение элемента
// в нужный раздел результата поиска.
//
// Параметры:
//	ЭлементСписка - ЭлементСпискаЗначений - элемент списка поиска,
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска)
	
	МетаданныеЭлемента = ЭлементСписка.Метаданные;
	ЗначениеЭлемента = ЭлементСписка.Значение;
	
	Если ТипЗнч(МетаданныеЭлемента) = Тип("ОбъектМетаданных") Тогда
		
		Если МетаданныеЭлемента = Метаданные.Справочники.Номенклатура Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
		
	Иначе
		
		Если МетаданныеЭлемента = "Номенклатура" Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ХарактеристикиНоменклатуры" Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ШтрихкодыНоменклатуры" Тогда
			РезультатПоиска.ШтрихкодыНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "НоменклатураПоставщиков" Тогда
			РезультатПоиска.НоменклатураПоставщиков.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат поиска номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура - результат поиска товаров.
//
Функция РезультатПоискаНоменклатуры(Форма)
	
	ТочноеСоответствие = Форма.НайтиНоменклатуруПоТочномуСоответствию;
	
	СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаНоменклатура, ТочноеСоответствие);
	ОбластиПоиска = ОбластиПоискаНоменклатуры(Форма);
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	РезультатПоиска = СтруктураРезультатаПоиска();
	
	// Сформировать текст запроса по областям поиска.
	Запрос = Новый Запрос;
	
	РазделительВТекстеЗапросов = "
	|;
	|";
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		ТекстЗапросаПоискаПоОбласти = ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие);
		
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), РазделительВТекстеЗапросов, "") + ТекстЗапросаПоискаПоОбласти;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			РезультатПоиска.Элементы.Добавить(ЭлементПоиска);
			
			Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПоиска.ПолноеКоличество = РезультатПоиска.Элементы.Количество();
	РезультатПоиска.СлишкомМногоРезультатов = (РезультатПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает массив областей поиска товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив. Массив метаданных, областей поиска товаров.
//
Функция ОбластиПоискаНоменклатуры(Форма)
	
	// В зависимости от того, из какой формы выполняется вызов функции поиска,
	// список областей поиска будет различаться.
	ОбластиПоиска = Новый Массив;
	
	ОбластиПоиска.Добавить(Метаданные.Справочники.Номенклатура);
		
	Возврат ОбластиПоиска;
	
КонецФункции

// Возвращает структуру результатов поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураРезультатовПоиска()
	
	РезультатПоиска = Новый Структура();
	
	РезультатПоиска.Вставить("КодОшибки", "");
	РезультатПоиска.Вставить("Номенклатура", Новый Массив);
	РезультатПоиска.Вставить("ХарактеристикиНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("ШтрихкодыНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("НоменклатураПоставщиков", Новый Массив);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает структуру списка поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураРезультатаПоиска()
	
	СписокПоиска = Новый Структура;
	
	СписокПоиска.Вставить("Элементы", Новый Массив);
	СписокПоиска.Вставить("ПолноеКоличество", 0);
	СписокПоиска.Вставить("СлишкомМногоРезультатов", Ложь);
	
	Возврат СписокПоиска;
	
КонецФункции

// Возвращает максимальное количество элементов которое может быть обработано
// при выполнении полнотекстового или неполнотекствого поиска. Если количество найденных
// элементов превышает возвращаемое этой функцией значение, то считается что условие поиска задано
// размыто и предлагается уточнить его.
//
Функция МаксимальноеКоличествоЭлементовПоиска()
	
	Возврат 500;
	
КонецФункции

// Выполняет дополнительную обработку результатов поиска:
// если выполнялся поиск по характеристикам, штрихкодам или номенклатуре
// поставщиков, то процедура выполняет дополнительный запроса для поиска
// номенклатуры - владельцев найденных элементов. Найденная номенклатура
// включается в результат поиска в раздел "Номенклатура".
//
// Параметры:
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска)
	
	// Если найдены характеристики номенклатуры, номенклатура поставщиков или штрихкоды номенклатуры,
	// то для них нужно найти владельцев и добавить их в список номенклатуры.
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если РезультатПоиска.ХарактеристикиНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|				ИЛИ Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка В(&СписокХарактеристики)";
		
		Запрос.УстановитьПараметр("СписокХарактеристики", РезультатПоиска.ХарактеристикиНоменклатуры);
	КонецЕсли;
	
	Если РезультатПоиска.ШтрихкодыНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&СписокШтрихкодов)";
		
		Запрос.УстановитьПараметр("СписокШтрихкодов", РезультатПоиска.ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	Если РезультатПоиска.НоменклатураПоставщиков.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Ссылка В(&СписокНоменклатурыПоставщиков)";
		
		Запрос.УстановитьПараметр("СписокНоменклатурыПоставщиков", РезультатПоиска.НоменклатураПоставщиков);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса необходимый для выполнения поиска по области.
//
// Параметры:
//	ОбластьПоиска      - ОбъектМетаданных - идентификатор области поиска,
//	ТочноеСоответствие - Булево           - признак выполнения поиска по точному соответствию.
//
Функция ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие)
	
	МаксКоличество = МаксимальноеКоличествоЭлементовПоиска() + 1;
	ТекстЗапроса = "";
	
	Если ОбластьПоиска = Метаданные.Справочники.Номенклатура Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	СправочникНоменклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа И
		|	(СправочникНоменклатура.Наименование %ВидСравнения% &СтрокаПоиска
		|			ИЛИ СправочникНоменклатура.НаименованиеПолное %ВидСравнения% &СтрокаПоиска
		|			ИЛИ СправочникНоменклатура.Артикул %ВидСравнения% &СтрокаПоиска)";
		
	КонецЕсли;
		
	Если ОбластьПоиска = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	ХарактеристикиНоменклатуры.Ссылка КАК Значение,
		|	""ХарактеристикиНоменклатуры"" КАК Метаданные
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Наименование %ВидСравнения% &СтрокаПоиска
		|	ИЛИ ХарактеристикиНоменклатуры.НаименованиеПолное %ВидСравнения% &СтрокаПоиска";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%МаксКоличество%", Формат(МаксКоличество, "ЧЦ=10; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидСравнения%", ?(ТочноеСоответствие, "=", "ПОДОБНО"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает фоматированную строку поиска - строку с добавлением
// служебных символов. Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска,
//	ТочноеСоответствие - Булево - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка. Форматированная строка поиска.
//
Функция ФорматироватьСтрокуПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если Лев(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = "%" + СтрокаПоиска;
	КонецЕсли;
	
	Если Прав(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = СтрокаПоиска + "%";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

// Устанавливает код ошибки расширенного поиска в структуре результата поиска.
//
// Параметры:
//	СписокПоиска - СписокЗначений - список найденных элементов,
//	РезультатПоиска - Структура - структура результата поиска.
//
Функция УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска)
	
	Если СписокПоиска.СлишкомМногоРезультатов Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	ИначеЕсли СписокПоиска.ПолноеКоличество = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
	ИначеЕсли СписокПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	Иначе
		РезультатПоиска.КодОшибки = "";
	КонецЕсли;
	
КонецФункции

// Выполняет обрабтку списка результатов поиска. Вызывается функция определения принадлежности
// найденного элемента к разделу метаданных.
//
// Параметры:
//	СписокПоиска - СписокЗначений - список найденных элементов,
//	РезультатПоиска - Структура - структура результата поиска.
//
Процедура ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска)
	
	// Если количество найденных элементов не превышает заданного ограничения,
	// то включить элементы из списка поиска в результаты поиска.
	ВГраница = СписокПоиска.Элементы.ВГраница();
	
	Для Сч = 0 По ВГраница Цикл
		ЭлементСписка = СписокПоиска.Элементы[Сч];
		ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Возвращает структуру - значения настроек формы списка, формы выбора товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы списка, формы выбора.
//
Функция НастройкиФормы(Форма)
	
	НастройкиФормы = Новый Структура;
	
	НастройкиФормы.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтры);
	НастройкиФормы.Вставить("ВариантНавигации", Форма.ВариантНавигации);
	НастройкиФормы.Вставить("ВидНоменклатуры", Форма.ВидНоменклатуры);
	НастройкиФормы.Вставить("ТекущаяИерархияНоменклатуры", Форма.ТекущаяИерархияНоменклатуры);
		
	// Сохранение параметров отбора.
	Если ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
		Или ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Истина);
		НастройкиФормы.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		НастройкиФормы.Вставить("ИспользоватьСерииНоменклатуры", Форма.ИспользоватьСерииНоменклатуры);
	КонецЕсли;
	
	Возврат НастройкиФормы;
	
КонецФункции

// Сохраняет значения списков выбора на формах списков, формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
Процедура СохранитьСпискиВыбора(Форма)
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияФормПоПараметрам

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по типу номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма) Экспорт
	
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если ЭтоФормаВыбораНоменклатуры Тогда
		
		ОтборПоТипуНоменклатуры = Неопределено;
		
		Форма.Параметры.Отбор.Свойство("ТипНоменклатуры", ОтборПоТипуНоменклатуры);
		Форма.Параметры.Отбор.Удалить("ТипНоменклатуры");
		
		Если ОтборПоТипуНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Параметр <ОтборПоТипуНоменклатуры> произвольного типа. Может быть передан как отдельный тип
	// номенклатуры, так и массив типов.
	ОтборыПоТипуНоменклатуры = Новый СписокЗначений;
	
	Если ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		
		ОтборыПоТипуНоменклатуры.Добавить(ОтборПоТипуНоменклатуры);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого Значение Из ОтборПоТипуНоменклатуры Цикл
			ОтборыПоТипуНоменклатуры.Добавить(Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("Массив") Тогда
		
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Установить отбор по типам номенклатуры для списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "ТипНоменклатуры", ОтборыПоТипуНоменклатуры, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборыПоТипуНоменклатуры.Количество() > 0));
	
КонецПроцедуры

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по виду номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоВидНоменклатурыПоПараметрам(Форма) Экспорт

	ОтборПоВидуНоменклатуры = Неопределено;
	Форма.Параметры.Отбор.Свойство("ВидНоменклатуры", ОтборПоВидуНоменклатуры);
	Форма.Параметры.Отбор.Удалить("ВидНоменклатуры");
	
	Если ОтборПоВидуНоменклатуры = Неопределено Или Не ЗначениеЗаполнено(ОтборПоВидуНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьФильтры = Истина; 
	Форма.ВариантНавигации = "ПоСвойствам";
	Форма.ВидНоменклатуры = ОтборПоВидуНоменклатуры;

	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);	
	УстановитьСтраницуВариантаНавигации(Форма);
	ПриИзмененииВидаНоменклатуры(Форма);
	ПриИзмененииИспользованияФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
