#Область СлужебныйПрограммныйИнтерфейс

// Выполняет заполнение первоначальных значений при создании новых 
// объектов или открытии иных форм
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма, реквизиты которой необходимо заполнить
//		ЗапрашиваемыеЗначения - Структура - структура с запрашиваемыми значениями
//			Имя элемента структуры идентифицирует значение, которое 
//				необходимо заполнить
//			Значение элемента структуры - путь к реквизиту формы, значение
//				которого необходимо заполнить
//			Список поддерживаемых значений см. в описании ПолучитьЗначенияПоУмолчанию.
//
Процедура ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗапрашиваемыеЗначения) Экспорт
	
	ФиксированныеЗначения = Новый Массив;
	Для Каждого ЗапрашиваемоеЗначение Из ЗапрашиваемыеЗначения Цикл
		Если ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ЗапрашиваемоеЗначение.Значение)) Тогда
			ФиксированныеЗначения.Добавить(ЗапрашиваемоеЗначение.Ключ)
		КонецЕсли	
	КонецЦикла;

	ЗаполнитьЗначенияВФорме(Форма, ЗапрашиваемыеЗначения, ФиксированныеЗначения);
	
КонецПроцедуры

// Выполняет заполнение значений в форме на основании значений по умолчанию 
// 
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма, реквизиты которой необходимо заполнить
//		ЗапрашиваемыеЗначения - Структура - структура с запрашиваемыми значениями
//			Имя элемента структуры идентифицирует значение, которое 
//				необходимо заполнить
//			Значение элемента структуры - путь к реквизиту формы, значение
//				которого необходимо заполнить
//			Список поддерживаемых значений см. в описании ПолучитьЗначенияПоУмолчанию.
//
//		ФиксированныеЗначения - Массив - (необязательный) 
//				Содержит идентификаторы значений, 
//				которое не должны быть изменены при заполнении.
//
Процедура ЗаполнитьЗначенияВФорме(Форма, ЗапрашиваемыеЗначения, ФиксированныеЗначения = Неопределено) Экспорт
	
	Если ФиксированныеЗначения = Неопределено Тогда
		ФиксированныеЗначения = Новый Массив
	КонецЕсли;
	
	ЗаполняемыеЗначения = Новый Структура;
	Для Каждого ЗапрашиваемоеЗначение Из ЗапрашиваемыеЗначения Цикл
		Если ФиксированныеЗначения.Найти(ЗапрашиваемоеЗначение.Ключ) = Неопределено Тогда
			ЗначениеРеквизита = НеОпределено;
		Иначе
			ЗначениеРеквизита = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ЗапрашиваемоеЗначение.Значение)
		КонецЕсли;	
		ЗаполняемыеЗначения.Вставить(ЗапрашиваемоеЗначение.Ключ, ЗначениеРеквизита);
	КонецЦикла;
	
	// Заполняем значения
	Для Каждого ЗапрашиваемоеЗначение Из ЗапрашиваемыеЗначения Цикл
		Если ФиксированныеЗначения.Найти(ЗапрашиваемоеЗначение.Ключ) = Неопределено Тогда
			ЗначениеРеквизита = НеОпределено;
			ЗаполняемыеЗначения.Свойство(ЗапрашиваемоеЗначение.Ключ, ЗначениеРеквизита);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ЗапрашиваемоеЗначение.Значение, ЗначениеРеквизита);
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Выполняет формирование таблицы с набором значений доступа объекта (документа), 
// содержащего ссылки на организацию и сотрудника (сотрудников)
// Вызывается из процедуры ЗаполнитьНаборыЗначенийДоступа, реализованной в модуле таких 
// документов, доступ к которым выполняется через наборы значений доступа.
//
// Параметры:
//		Объект - Объект - объект.
//		Таблица - ТаблицаЗначений - переданная таблица значений
//		ПутьОрганизация - Строка - строка с именем реквизита, содержащего организацию
//		ПутьФизическоеЛицо - Строка - строка с именем реквизита, содержащего физическое лицо
//			Может быть идентификатором реквизита объекта (например, "ФизическоеЛицо") или
//			путем к реквизиту табличной части в 
//			формате <ИмяТабличнойЧасти>.<ИмяРеквизита> 
//			(например, "ФизическиеЛица.ФизическоеЛицо").
//		НомерНабора - Число - номер набора.
//
Процедура ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(Объект, Таблица, ПутьОрганизация, ПутьФизическоеЛицо, НомерНабора = 0) Экспорт
	
	// Логика ограничения:
	// объект доступен, если доступна организация и все физические лица.
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Объект[ПутьОрганизация];
	СтрокаТаб.НомерНабора = НомерНабора;
	
	СтрокиПутиФизическогоЛица = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьФизическоеЛицо, ".");
	Если СтрокиПутиФизическогоЛица.Количество() = 1 Тогда
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ЗначениеДоступа		= Объект[ПутьФизическоеЛицо];
		СтрокаТаб.НомерНабора = НомерНабора;
		
	Иначе
		Для Каждого СтрокаТаблицы Из Объект[СтрокиПутиФизическогоЛица[0]] Цикл
			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.ЗначениеДоступа	= СтрокаТаблицы[СтрокиПутиФизическогоЛица[1]];
			СтрокаТаб.НомерНабора = НомерНабора;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу с последними значениями ресурсов заданного регистра сведений.
//
// Создает в МенеджерВременныхТаблиц временную таблицу. 
// Поля временной таблицы
//	- Период
//	- Все измерения (не только переданные в качестве фильтра, а все)
//	- Все ресурсы без постфикса ПоОкончании
//	- Все реквизиты.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//		ТолькоРазрешенные - Булево - если истина, выбираются только разрешенные записи.
//		ИмяРегистра - Строка - имя регистра сведений (не полное).
//
//		ИзмеренияДаты - ТаблицаЗначений - таблица значений.
//			Должна обязательно содержать колонку "Период"
//			Может содержать колонки с именами, совпадающими с именами 
//			измерений регистра сведений.
//
//			Используется как фильтр - переданные в ней значения измерений "фильтруют" регистр.
//			В зависимости от значения параметра ВсеЗаписи строки ИзмеренияДаты используются 
//			не только как фильтр, но и как набор значений для дополнения результирующей 
//			временной таблицы.
//			Содержит даты получения последних значений ресурсов.
//			В предельном случае, когда нет колонок таблицы, соответствующих измерениям, 
//			(т.е. фильтрация по измерениям не выполняется), в таблице содержится одна строка 
//			с датой на которую нужно получить значения ресурсов.
//
//		Отбор - Коллекция - коллекция условий отбора, соединяемых по "И" и применяемых к регистру сведений.
//			Коллекция строки которой имеют поля
//				ЛевоеЗначение - строка, имя поля регистра сведений
//				ВидСравнения - строка, вид сравнения, допустимый в языке запросов
//				ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//
//		ВсеЗаписи - Булево - Если Истина, то в результирующей временной таблице
//			должно быть столько же записей, сколько передано в параметре ИзмеренияДаты
//			Если Ложь, то временная таблица содержит записи только для тех 
//			значений измерений, для которых существуют данные в регистре.
//			По умолчанию - Ложь.
//		
//		ВключаяГраницу - Булево - Если Истина, то записи на дату формирования среза учитываются
//			Если Ложь, то записи на дату формирования среза не учитываются
//			По умолчанию - Истина.  
//
//		ИмяРезультирующейТаблицы - Строка - имя временной таблицы в которую должен быть помещен результат.
//			Если имя не задано, то создается временная таблица с именем 
//			ВТ<ИмяРегистра>СрезПоследних, например: ВТПлановыеНачисленияСрезПоследних.
//
Процедура СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяРегистра, ИзмеренияДаты, Отбор = Неопределено, ВсеЗаписи = Ложь, ВключаяГраницу = Истина, ИмяРезультирующейТаблицы = "") Экспорт
	СоздатьПоТаблицеЗначенийВТИмяРегистраСрез(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяРегистра, ИзмеренияДаты, Отбор, ВсеЗаписи, ВключаяГраницу, Истина, ИмяРезультирующейТаблицы);
КонецПроцедуры

// Формирует временную таблицу с первыми значениями ресурсов заданного регистра сведений, описание 
// параметров см. СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних.
//
Процедура СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПервых(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяРегистра, ИзмеренияДаты, Отбор = Неопределено, ВсеЗаписи = Ложь, ВключаяГраницу = Истина, ИмяРезультирующейТаблицы = "") Экспорт
	СоздатьПоТаблицеЗначенийВТИмяРегистраСрез(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяРегистра, ИзмеренияДаты, Отбор, ВсеЗаписи, ВключаяГраницу, Ложь, ИмяРезультирующейТаблицы);
КонецПроцедуры

// Формирует временную таблицу с записями заданного регистра сведений.
//
// Создает в МенеджерВременныхТаблиц временную таблицу с именем ВТ<ИмяРегистра>.
// Например: ВТПлановыеНачисления
// Поля временной таблицы
//	- Период
//	- Все измерения 
//	- Все ресурсы 
//	- Все реквизиты
//	- Все стандартные реквизиты.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//		ТолькоРазрешенные - Булево - если истина, выбираются только разрешенные записи.
//		ИмяРегистра - Строка - имя регистра сведений (не полное).
//
//		ИзмеренияДаты - ТаблицаЗначений - таблица.
//			Должна обязательно содержать колонки "ДатаНачала" и "ДатаОкончания"
//			Может содержать колонки с именами, совпадающими с именами 
//			измерений регистра сведений
//			Используется как фильтр - переданные в ней значения измерений "фильтруют" регистр.
//
//		Отбор - Коллекция - коллекция условий отбора, соединяемых по "И" и применяемых к регистру сведений.
//			Коллекция строки которой имеют поля
//				ЛевоеЗначение - строка, имя поля регистра сведений
//				ВидСравнения - строка, вид сравнения, допустимый в языке запросов
//				ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//
//			
Процедура СоздатьПоТаблицеЗначенийВТИмяРегистра(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяРегистра, ИзмеренияДаты, Отбор = Неопределено) Экспорт
	
	МассивИзмерений = Новый Массив;
	Для Каждого Колонка Из ИзмеренияДаты.Колонки Цикл
		МассивИзмерений.Добавить(Колонка.Имя);		
	КонецЦикла;	
	
	КоллекцииПолей = КоллекцииПолейДляПодготовкиТекстаЗапроса(ИмяРегистра, МассивИзмерений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ИмяВТИзмеренияДаты = УникальноеИмяВременнойТаблицы("ВТИзмеренияДаты");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ";
	Для Каждого Измерение Из КоллекцииПолей.ИзмеренияФильтра Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ИзмеренияДаты." + Измерение + ",";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ИзмеренияДаты.ДатаНачала,
	|	ИзмеренияДаты.ДатаОкончания,";
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ " + ИмяВТИзмеренияДаты + "
	|ИЗ
	|	&ИзмеренияДаты КАК ИзмеренияДаты";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ЗапросВТИмяРегистра = ЗапросВТИмяРегистра(ТолькоРазрешенные, КоллекцииПолей, ИмяРегистра, ИмяВТИзмеренияДаты, "", Отбор);
	ЗапросВТИмяРегистра.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ДобавитьТекстУдаленияВременнойТаблицы(ЗапросВТИмяРегистра.Текст, ИмяВТИзмеренияДаты);
	
	ЗапросВТИмяРегистра.Выполнить();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции ЗАРПЛАТА И КАДРЫ

// Заполняет документ по основанию сотрудник, осуществляет проверку корректности ввода документа.
// В случае , когда проверка не проходит вызывает исключение.
//
// Параметры:
//		ДокументОбъект - ДокументОбъект - документ.
//		ДанныеЗаполнения - СправочникСсылка.Сотрудники - сотрудник.
//		ПроверкаОформленностиНаРаботу - Булево - когда Истина вызывает исключение, если сотрудник уже принят на работу,
//										Ложь - если сотрудник еще не принят
//		ОтключитьПроверкуЗанятости - Булево - отключает проверку принятости сотрудника.
//
// Возвращаемое значение:
//		Булево - Истина - ДанныеЗаполнения заполнен имеют тип 
//							СправочникСсылка.Сотрудники, Ложь - если 
//						   ДанныеЗаполнения содержат значение другого типа.
//
Процедура ЗаполнитьПоОснованиюСотрудником(ДокументОбъект, ДанныеЗаполнения, ПроверкаОформленностиНаРаботу = Ложь, ОтключитьПроверкуЗанятости = Ложь) Экспорт
	
	КадровыеДанные =  КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДанныеЗаполнения, "ГоловнаяОрганизация,Организация,ФизическоеЛицо,ДатаПриема,ОформленПриемНаРаботу,ДатаУвольнения");
	Если КадровыеДанные.Количество() > 0 Тогда
		
		СтрокаДанных = КадровыеДанные[0];
		
		Если НЕ ОтключитьПроверкуЗанятости Тогда
			
			Если ПроверкаОформленностиНаРаботу Тогда
				
				Если СтрокаДанных.ОформленПриемНаРаботу Тогда
					
					Если ЗначениеЗаполнено(СтрокаДанных.ДатаУвольнения) Тогда
						
						ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Сотрудник ""%1"" был оформлен на работу с %2, уволен %3'"),
							ДанныеЗаполнения,
							Формат(СтрокаДанных.ДатаПриема, "ДЛФ=DD"),
							Формат(СтрокаДанных.ДатаУвольнения, "ДЛФ=DD"));
						
					Иначе
						
						Если ЗначениеЗаполнено(СтрокаДанных.ДатаПриема) Тогда
							
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Сотрудник ""%1"" уже оформлен на работу с %2'"),
								ДанныеЗаполнения,
								Формат(СтрокаДанных.ДатаПриема, "ДЛФ=DD"));
							
						Иначе
								
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Сотрудник ""%1"" уже оформлен на работу'"),
								ДанныеЗаполнения);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
					
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаДанных.ГоловнаяОрганизация) Тогда
					
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сотрудник ""%1"" не оформлен на работу'"),
						ДанныеЗаполнения);
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ДатаУвольнения) Тогда
						
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сотрудник ""%1"" уволен %2'"),
						ДанныеЗаполнения,
						Формат(СтрокаДанных.ДатаУвольнения, "ДЛФ=DD"));
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаДанных.Организация) Тогда
			ДокументОбъект.Организация = СтрокаДанных.Организация;
		Иначе
			ДокументОбъект.Организация = СтрокаДанных.ГоловнаяОрганизация;
		КонецЕсли;
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("Сотрудник") <> Неопределено Тогда
			
			ДокументОбъект.Сотрудник 		= СтрокаДанных.Сотрудник;
			
		КонецЕсли; 
		
		Если МетаданныеДокумента.Реквизиты.Найти("ФизическоеЛицо") <> Неопределено Тогда
			
			ДокументОбъект.ФизическоеЛицо 	= СтрокаДанных.ФизическоеЛицо;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с полями
//	ИзмеренияФильтра - массив имен измерений по которым выполняется отбор
//	Измерения - массив имен всех измерений регистра
//	Ресурсы - массив имен ресурсов, которые не имеют "пары" ...ПоОкончании, кроме ДействуетДо
//	ВозвратныеРесурсы - массив имен ресурсов, которые имеют "пару" с именем ...ПоОкончании
//	Реквизиты - массив имен всех реквизитов
//  СтандартныеРеквизиты - массив имен стандартных реквизитов.
Функция КоллекцииПолейДляПодготовкиТекстаЗапроса(ИмяРегистра, МассивИзмерений) Экспорт
	// Измерения для отбора
	ИзмеренияФильтра = Новый Массив;
	Для Каждого Измерение Из МассивИзмерений Цикл
		Если 	ВРег(Измерение) = ВРег("Период") Или 
				ВРег(Измерение) = ВРег("ДатаНачала") Или 
				ВРег(Измерение) = ВРег("ДатаОкончания") Тогда
			Продолжить;
		КонецЕсли;
		ИзмеренияФильтра.Добавить(Измерение);
	КонецЦикла;
	
	РегистрСведенийМетаданные = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Все измерения
	Измерения = Новый Массив;
	Для Каждого Измерение Из РегистрСведенийМетаданные.Измерения Цикл
		Измерения.Добавить(Измерение.Имя);
	КонецЦикла;
	
	ЕстьВозвратныеСобытия = Ложь;
	
	// Ресурсы
	Ресурсы = Новый Массив;
	ВозвратныеРесурсы = Новый Массив;
	Для Каждого Ресурс Из РегистрСведенийМетаданные.Ресурсы Цикл
		Если ВРег(Ресурс.Имя) = ВРег("ДействуетДо") Тогда
			ЕстьВозвратныеСобытия = Истина;
			Продолжить; // не включаем ресурс ДействуетДо в список получаемых ресурсов
		КонецЕсли;	
		Если ВРег(Прав(Ресурс.Имя, 11)) <> ВРег("ПоОкончании") Тогда
			Ресурсы.Добавить(Ресурс.Имя);
		Иначе	
			ВозвратныеРесурсы.Добавить(Лев(Ресурс.Имя, СтрДлина(Ресурс.Имя) - 11));
		КонецЕсли;	
	КонецЦикла;
	
	// Удалим из списка "простых" ресурсов те, которые являются "возвратными"
	Для Каждого Ресурс Из ВозвратныеРесурсы Цикл
		ИндексРесурса = Ресурсы.Найти(Ресурс);
		Если ИндексРесурса <> Неопределено Тогда
			Ресурсы.Удалить(ИндексРесурса);
		КонецЕсли;			
	КонецЦикла;
	
	// Реквизиты
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из РегистрСведенийМетаданные.Реквизиты Цикл
		Реквизиты.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	// СтандартныеРеквизиты
	СтандартныеРеквизиты = Новый Массив;
	Для Каждого СтандартныйРеквизит Из РегистрСведенийМетаданные.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя <> "Период" Тогда
			СтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ИзмеренияФильтра,Измерения,ВозвратныеРесурсы,Ресурсы,Реквизиты,СтандартныеРеквизиты",
							ИзмеренияФильтра, Измерения, ВозвратныеРесурсы, Ресурсы, Реквизиты, СтандартныеРеквизиты);
	
КонецФункции

// Возвращает признак необходимости отключения бизнес логики при записи объекта
//
// Параметры:
//  Объект - прикладной объект, например СправочникОбъект - объект для которого
//   требуется проверить необходимость отключения бизнес логики при записи.
//
// Возвращаемое значение:
//  Булево - признак необходимости отключения бизнес логики при записи объекта.
//
Функция ОтключитьБизнесЛогикуПриЗаписи(Знач Объект) Экспорт
	
	Возврат Объект.ОбменДанными.Загрузка И (НЕ Объект.ДополнительныеСвойства.Свойство("ПроверятьБизнесЛогикуПриЗаписи")); 
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с личными данными физических лиц

Процедура ОбработатьЗаписьНабораФИО(НаборЗаписей) Экспорт
	ТаблицаФизЛиц = НаборЗаписей.Выгрузить();
	ОбновитьНаименованияФизЛицаИСотрудника(ТаблицаФизЛиц);	
КонецПроцедуры

Процедура ОбновитьНаименованияФизЛицаИСотрудника(ТаблицаФизЛиц)
	
 	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущаяДата", '20990101');
	Запрос.УстановитьПараметр("ТекущийНабор", ТаблицаФизЛиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущийНабор.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизЛицаТекущегоНабора
	|ИЗ
	|	&ТекущийНабор КАК ТекущийНабор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ ВТФИОФизЛицПоследнее
	|ИЗ
	|	ВТФизЛицаТекущегоНабора КАК ФизЛицаТекущегоНабора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|				&ТекущаяДата,
	|				ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						ФизЛицаТекущегоНабора.ФизическоеЛицо
	|					ИЗ
	|						ВТФизЛицаТекущегоНабора КАК ФизЛицаТекущегоНабора)) КАК ФИОФизическихЛицСрезПоследних
	|		ПО ФизЛицаТекущегоНабора.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицПоследнее.ФизическоеЛицо,
	|	ФИОФизЛицПоследнее.Фамилия,
	|	ФИОФизЛицПоследнее.Имя,
	|	ФИОФизЛицПоследнее.Отчество,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	ВТФИОФизЛицПоследнее КАК ФИОФизЛицПоследнее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФИОФизЛицПоследнее.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|				И (ФизическиеЛица.Наименование <> (ВЫРАЗИТЬ(ФИОФизЛицПоследнее.Фамилия + ВЫБОР
	|							КОГДА ФИОФизЛицПоследнее.Имя = """"
	|								ТОГДА """"
	|							ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Имя
	|						КОНЕЦ + ВЫБОР
	|							КОГДА ФИОФизЛицПоследнее.Отчество = """"
	|								ТОГДА """"
	|							ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Отчество
	|						КОНЕЦ КАК СТРОКА(50)))
	|					ИЛИ ФизическиеЛица.ФИО <> (ВЫРАЗИТЬ(ФИОФизЛицПоследнее.Фамилия + ВЫБОР
	|							КОГДА ФИОФизЛицПоследнее.Имя = """"
	|								ТОГДА """"
	|							ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Имя
	|						КОНЕЦ + ВЫБОР
	|							КОГДА ФИОФизЛицПоследнее.Отчество = """"
	|								ТОГДА """"
	|							ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Отчество
	|						КОНЕЦ КАК СТРОКА(50)))))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	ФИОФизЛицПоследнее.Фамилия,
	|	ФИОФизЛицПоследнее.Имя,
	|	ФИОФизЛицПоследнее.Отчество,
	|	Сотрудники.Наименование КАК СотрудникНаименование
	|ИЗ
	|	ВТФИОФизЛицПоследнее КАК ФИОФизЛицПоследнее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ПО ФИОФизЛицПоследнее.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|			И (Сотрудники.Наименование <> (ВЫРАЗИТЬ(ФИОФизЛицПоследнее.Фамилия + ВЫБОР
	|					КОГДА ФИОФизЛицПоследнее.Имя = """"
	|						ТОГДА """"
	|					ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Имя
	|				КОНЕЦ + ВЫБОР
	|					КОГДА ФИОФизЛицПоследнее.Отчество = """"
	|						ТОГДА """"
	|					ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Отчество
	|				КОНЕЦ КАК СТРОКА(50))))";
	
				   
	Результат = Запрос.ВыполнитьПакет();
	
	ИзменитьНаименованиеФизическихЛиц(Результат[2].Выбрать());
	ИзменитьНаименованиеСотрудников(Результат[3].Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Функция РазделительЗапросов() Экспорт
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции

Функция УникальноеИмяВременнойТаблицы(ИмяВременнойТаблицы) Экспорт
	
	Возврат ИмяВременнойТаблицы + "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "x");
	
КонецФункции

Процедура ДобавитьТекстУдаленияВременнойТаблицы(ТекстЗапроса, ИмяВременнойТаблицы) Экспорт
	
		ТекстЗапроса = ТекстЗапроса + РазделительЗапросов() + "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
		
КонецПроцедуры

Процедура ДобавитьТекстУдаленияВременныхТаблиц(ТекстЗапроса, МассивИменВременныхТаблиц) Экспорт
	
	Для каждого ИмяВТКУничтожению Из МассивИменВременныхТаблиц Цикл
		
		ДобавитьТекстУдаленияВременнойТаблицы(ТекстЗапроса, ИмяВТКУничтожению);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбъединитьТекстыЗапросов(ТекстЗапросаПриемник, ТекстЗапросаИсточник) Экспорт
	
	ТекстЗапросаПриемник = ?(ПустаяСтрока(ТекстЗапросаПриемник), "", ТекстЗапросаПриемник + РазделительЗапросов()) + ТекстЗапросаИсточник;
	
КонецПроцедуры

Процедура СкопироватьПараметрыЗапроса(ЗапросПриемник, ЗапросИсточник) Экспорт
	
	Для каждого Параметр Из ЗапросИсточник.Параметры Цикл
		
		ЗапросПриемник.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбъединитьЗапросы(ЗапросПриемник, ЗапросИсточник) Экспорт
	
	ОбъединитьТекстыЗапросов(ЗапросПриемник.Текст, ЗапросИсточник.Текст);
	СкопироватьПараметрыЗапроса(ЗапросПриемник,  ЗапросИсточник);
	
КонецПроцедуры

Функция ЗапросВТИмяРегистраСрез(ТолькоРазрешенные, КоллекцииПолей, ИмяРегистра, ИмяТаблицыИзмерений, ИмяСоздаваемойТаблицы = "", Отбор = Неопределено, ВсеЗаписи = Ложь, ВключаяГраницу = Истина, СрезПоследних = Истина, СоответствиеИзмеренийПолямТаблицы = Неопределено) Экспорт
	
	Если СоответствиеИзмеренийПолямТаблицы = Неопределено Тогда
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
	КонецЕсли;
	
	ИзмерениеФильтраПериод = СоответствиеИзмеренийПолямТаблицы.Получить("Период");
	Если ИзмерениеФильтраПериод = Неопределено Тогда
		ИзмерениеФильтраПериод = "Период";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ПустаяСтрока(ИмяСоздаваемойТаблицы) Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + ?(СрезПоследних,"СрезПоследних","СрезПервых");
	КонецЕсли; 
	
	ИмяВТМаксимальныеПериоды = УникальноеИмяВременнойТаблицы("ВТМаксимальныеПериоды");
	
	ТекстУсловийСКД = "{ВЫБРАТЬ
		|	ЗаданныйПериод";
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзмеренияДаты." + ИзмерениеФильтраПериод + " КАК ЗаданныйПериод";
		
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
			
		Если КоллекцииПолей.ИзмеренияФильтра.Найти(Измерение) <> НеОпределено Тогда
			
			ИзмерениеФильтра = СоответствиеИзмеренийПолямТаблицы.Получить(Измерение);
			Если ИзмерениеФильтра = Неопределено Тогда
				ИзмерениеФильтра = Измерение;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ",
				|	ИзмеренияДаты." + ИзмерениеФильтра + " КАК " + Измерение;
				
			ТекстУсловийСКД = ТекстУсловийСКД + ",
				|	" + Измерение;
		Иначе
				
			ТекстЗапроса = ТекстЗапроса + ",
				|	РегистрСведений." + Измерение;
				
			ТекстУсловийСКД = ТекстУсловийСКД + ",
				|	" + Измерение;
				
		Конецесли;
			
	КонецЦикла;
	
	Если СрезПоследних Тогда
		
		ТекстУсловийСКД = ТекстУсловийСКД + "
			|	Период}";
		
		ТекстЗапроса = ТекстЗапроса + ",
			|	МАКСИМУМ(РегистрСведений.Период) КАК Период
			|ПОМЕСТИТЬ " + ИмяВТМаксимальныеПериоды + "
			|" + ТекстУсловийСКД + "
			|ИЗ
			|	" + ИмяТаблицыИзмерений + " КАК ИзмеренияДаты
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
			|		ПО (РегистрСведений.Период <= ИзмеренияДаты." + ИзмерениеФильтраПериод + " ИЛИ ИзмеренияДаты." + ИзмерениеФильтраПериод + " = ДАТАВРЕМЯ(1,1,1,0,0,0))";
			
		Если НЕ ВключаяГраницу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"<=","<");
		КонецЕсли;
		
	Иначе
		
		ТекстУсловийСКД = ТекстУсловийСКД + "
			|	МИНИМУМ(РегистрСведений.Период) КАК Период}";
		
		ТекстЗапроса = ТекстЗапроса + ",
			|	МИНИМУМ(РегистрСведений.Период) КАК Период
			|ПОМЕСТИТЬ " + ИмяВТМаксимальныеПериоды + "
			|" + ТекстУсловийСКД + "
			|ИЗ
			|	" + ИмяТаблицыИзмерений + " КАК ИзмеренияДаты
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
			|		ПО (РегистрСведений.Период >= ИзмеренияДаты." + ИзмерениеФильтраПериод + ")";
			
		Если НЕ ВключаяГраницу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,">=",">");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Измерение Из КоллекцииПолей.ИзмеренияФильтра Цикл
		
		ИзмерениеФильтра = СоответствиеИзмеренийПолямТаблицы.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|			И (РегистрСведений." + Измерение + " = ИзмеренияДаты." + ИзмерениеФильтра + ")";
			
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "}";
	
	Если Отбор <> Неопределено И Отбор.Количество() > 0 Тогда
		
		СчПараметров = 1;
		
		ТекстОтбор = "
			|	И (";
			
		Для Каждого СтруктураОтбора Из Отбор Цикл
				
			Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
			Иначе
				
				ИмяПараметра = ИмяСоздаваемойТаблицы +"_Параметр" + СчПараметров;
				ОписаниеПараметра = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
				
			КонецЕсли;
			
			ТекстОтбор = ТекстОтбор + "
				|	РегистрСведений." + СтруктураОтбора.ЛевоеЗначение + " " + СтруктураОтбора.ВидСравнения + " (" + ОписаниеПараметра + ") И";
				
			СчПараметров = СчПараметров + 1;
			
		КонецЦикла;	
		
		ТекстОтбор = Лев(ТекстОтбор, СтрДлина(ТекстОтбор) - 1);
		ТекстОтбор = ТекстОтбор + ")";
		ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
		
	КонецЕсли;
	
	ТекстОтборовСКД = "";
	Для каждого Измерение Из КоллекцииПолей.ИзмеренияФильтра Цикл
		ТекстОтборовСКД = ?(ПустаяСтрока(ТекстОтборовСКД), "", ТекстОтборовСКД + "," + Символы.ПС) + "	РегистрСведений." + Измерение + ".*";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОтборовСКД) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|" + ТекстОтборовСКД + "}";
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмеренияДаты." + ИзмерениеФильтраПериод;
		
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
			
		Если КоллекцииПолей.ИзмеренияФильтра.Найти(Измерение) <> НеОпределено Тогда
			
			ИзмерениеФильтра = СоответствиеИзмеренийПолямТаблицы.Получить(Измерение);
			Если ИзмерениеФильтра = Неопределено Тогда
				ИзмерениеФильтра = Измерение;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ",
				|	ИзмеренияДаты." + ИзмерениеФильтра;
				
		Иначе
			ТекстЗапроса = ТекстЗапроса + ",
				|	РегистрСведений." + Измерение;
		Конецесли;
			
	КонецЦикла;
	
	ТекстУсловийСКД = "{ВЫБРАТЬ
		|	Период,
		|	ПериодЗаписи";

	
	ТекстЗапроса = ТекстЗапроса + РазделительЗапросов() + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеПериоды.ЗаданныйПериод КАК Период,
		|	РегистрСведений.Период КАК ПериодЗаписи";
		
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
			
		ТекстЗапроса = ТекстЗапроса + ",
			|	МаксимальныеПериоды." + Измерение;
			
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + Измерение;
			
	КонецЦикла;
	
	Если СрезПоследних Тогда
		
		ТекстЗапросаПолей = "";
		Для Каждого Ресурс Из КоллекцииПолей.ВозвратныеРесурсы Цикл
			
			ТекстЗапросаПолей = ТекстЗапросаПолей + ",
			|	ВЫБОР
			|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ РегистрСведений.ДействуетДо >= МаксимальныеПериоды.ЗаданныйПериод И МаксимальныеПериоды.ЗаданныйПериод <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА РегистрСведений." + Ресурс + "
			|		ИНАЧЕ РегистрСведений." + Ресурс + "ПоОкончании
			|	КОНЕЦ КАК " + Ресурс;
			
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + Ресурс;
		
		КонецЦикла;
		
		Если ВключаяГраницу Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей,">=",">");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПолей;
		
	Иначе
		
		Для Каждого Ресурс Из КоллекцииПолей.ВозвратныеРесурсы Цикл
			ТекстЗапроса = ТекстЗапроса + ",
				|	РегистрСведений." + Ресурс + " КАК " + Ресурс;
			ТекстЗапроса = ТекстЗапроса + ",
				|	РегистрСведений." + Ресурс + "ПоОкончании КАК " + Ресурс + "ПоОкончании";
				
			ТекстУсловийСКД = ТекстУсловийСКД + ",
				|	" + Ресурс + ",
				|	" + Ресурс + "ПоОкончании";
		
		КонецЦикла;
			
	КонецЕсли;
	
	Для Каждого Ресурс Из КоллекцииПолей.Ресурсы Цикл
		ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + Ресурс + " КАК " + Ресурс;
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + Ресурс;
	КонецЦикла;
	
	Для Каждого Реквизит Из КоллекцииПолей.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + Реквизит;
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + Реквизит;
	КонецЦикла;
	
	Для Каждого СтандартныйРеквизит Из КоллекцииПолей.СтандартныеРеквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + СтандартныйРеквизит;
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + СтандартныйРеквизит;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ПОМЕСТИТЬ " + ИмяСоздаваемойТаблицы + "
		|	" + ТекстУсловийСКД + "}
		|ИЗ
		|	" + ИмяВТМаксимальныеПериоды + " КАК МаксимальныеПериоды
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
		|		ПО (РегистрСведений.Период = МаксимальныеПериоды.Период)";
		
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
			|			И (РегистрСведений." + Измерение + " = МаксимальныеПериоды." + Измерение + ")";
	КонецЦикла;
		
	ТекстЗапроса = ТекстЗапроса + "}";
		
	Если НЕ ВсеЗаписи Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	(НЕ РегистрСведений.Период ЕСТЬ NULL)";
	КонецЕсли;
	
	ДобавитьТекстУдаленияВременнойТаблицы(ТекстЗапроса, ИмяВТМаксимальныеПериоды);
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТИмяРегистра(ТолькоРазрешенные, КоллекцииПолей, ИмяРегистра, ИмяТаблицыИзмерений, ИмяСоздаваемойТаблицы = "", Отбор = Неопределено, СоответствиеИзмеренийПолямТаблицы = Неопределено) Экспорт
	
	Если СоответствиеИзмеренийПолямТаблицы = Неопределено Тогда
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
	КонецЕсли;
	
	ИзмерениеФильтраДатаНачала = СоответствиеИзмеренийПолямТаблицы.Получить("ДатаНачала");
	Если ИзмерениеФильтраДатаНачала = Неопределено Тогда
		ИзмерениеФильтраДатаНачала = "ДатаНачала";
	КонецЕсли;
	
	ИзмерениеФильтраДатаОкончания = СоответствиеИзмеренийПолямТаблицы.Получить("ДатаОкончания");
	Если ИзмерениеФильтраДатаОкончания = Неопределено Тогда
		ИзмерениеФильтраДатаОкончания = "ДатаОкончания";
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Если ПустаяСтрока(ИмяСоздаваемойТаблицы) Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрСведений.Период";
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведений." + Измерение;
	КонецЦикла;
	Для Каждого Ресурс Из КоллекцииПолей.ВозвратныеРесурсы Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведений." + Ресурс;
	КонецЦикла;
	Для Каждого Ресурс Из КоллекцииПолей.Ресурсы Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведений." + Ресурс;
	КонецЦикла;
	Для Каждого Реквизит Из КоллекцииПолей.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведений." + Реквизит;
	КонецЦикла;
	Для Каждого СтандартныйРеквизит Из КоллекцииПолей.СтандартныеРеквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведений." + СтандартныйРеквизит;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ " + ИмяСоздаваемойТаблицы + "
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяТаблицыИзмерений + " КАК ИзмеренияДаты
	|		ПО (ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + " = ДАТАВРЕМЯ(1, 1, 1) ИЛИ РегистрСведений.Период >= ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + ")
	|	И (ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания + " = ДАТАВРЕМЯ(1, 1, 1) ИЛИ РегистрСведений.Период <= ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания + ") И ";
	
	Для Каждого Измерение Из КоллекцииПолей.ИзмеренияФильтра Цикл
		ИзмерениеФильтра = СоответствиеИзмеренийПолямТаблицы.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "(ИзмеренияДаты." + ИзмерениеФильтра + " = РегистрСведений." + Измерение + ") И ";
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	
	Если Отбор <> Неопределено И Отбор.Количество() > 0 Тогда
		СчПараметров = 1;
		ТекстОтбор = "
		|	ГДЕ (";
		
		Для Каждого СтруктураОтбора Из Отбор Цикл
			Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
			Иначе
				ИмяПараметра = ИмяСоздаваемойТаблицы +"_Параметр" + СчПараметров;
				ОписаниеПараметра = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
			КонецЕсли;
			ТекстОтбор = ТекстОтбор + "
			|	РегистрСведений." + СтруктураОтбора.ЛевоеЗначение + " " + СтруктураОтбора.ВидСравнения + " (" + ОписаниеПараметра + ") И";
			СчПараметров = СчПараметров + 1;
		КонецЦикла;	
		ТекстОтбор = Лев(ТекстОтбор, СтрДлина(ТекстОтбор) - 1);
		ТекстОтбор = ТекстОтбор + ")";
		ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
	КонецЕсли;	
	
	ТекстОтборовСКД = "";
	Для каждого Измерение Из КоллекцииПолей.ИзмеренияФильтра Цикл
		ТекстОтборовСКД = ?(ПустаяСтрока(ТекстОтборовСКД), "", ТекстОтборовСКД + "," + Символы.ПС) + "	РегистрСведений." + Измерение + ".*";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОтборовСКД) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|" + ТекстОтборовСКД + "}";
	КонецЕсли; 
	
	Если КоллекцииПолей.ВозвратныеРесурсы.Количество() > 0 Тогда
			
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РегистрСведений.ДействуетДо";
		
		Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + Измерение;
		КонецЦикла;
		Для Каждого Ресурс Из КоллекцииПолей.ВозвратныеРесурсы Цикл
			ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + Ресурс + "ПоОкончании";
		КонецЦикла;
		Для Каждого Ресурс Из КоллекцииПолей.Ресурсы Цикл
			ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + Ресурс;
		КонецЦикла;
		Для Каждого Реквизит Из КоллекцииПолей.Реквизиты Цикл
			ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + Реквизит;
		КонецЦикла;
		Для Каждого СтандартныйРеквизит Из КоллекцииПолей.СтандартныеРеквизиты Цикл
			ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + СтандартныйРеквизит;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяТаблицыИзмерений + " КАК ИзмеренияДаты
		|		ПО (ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + " = ДАТАВРЕМЯ(1, 1, 1) ИЛИ РегистрСведений.ДействуетДо >= ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + ")
		|	И (ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания + " = ДАТАВРЕМЯ(1, 1, 1) ИЛИ РегистрСведений.ДействуетДо <= ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания + ")
		|	И РегистрСведений.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1) И ";

		Для Каждого Измерение Из КоллекцииПолей.ИзмеренияФильтра Цикл
			Если ВРег(Измерение) <> ВРег("ДатаНачала") И ВРег(Измерение) <> ВРег("ДатаОкончания") Тогда
				ИзмерениеФильтра = СоответствиеИзмеренийПолямТаблицы.Получить(Измерение);
				Если ИзмерениеФильтра = Неопределено Тогда
					ИзмерениеФильтра = Измерение;
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + "(ИзмеренияДаты." + ИзмерениеФильтра + " = РегистрСведений." + Измерение + ") И ";
			КонецЕсли;	
		КонецЦикла;
	
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
		
		ТекстЗапроса = ТекстЗапроса + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведенийВспом
		|		ПО РегистрСведений.Период < РегистрСведенийВспом.Период
		|			И РегистрСведений.ДействуетДо >= РегистрСведенийВспом.Период";
		Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|			И РегистрСведений." + Измерение + " = РегистрСведенийВспом." + Измерение;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "}";
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	РегистрСведенийВспом.Период ЕСТЬ NULL";
		
		Если Отбор <> Неопределено И Отбор.Количество() > 0 Тогда
			СчПараметров = 1;
			ТекстОтбор = "
			|	И (";
			Для Каждого СтруктураОтбора Из Отбор Цикл
				Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
					ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
				Иначе
					ИмяПараметра = ИмяСоздаваемойТаблицы +"_Параметр" + СчПараметров;
					ОписаниеПараметра = "&" + ИмяПараметра;
					Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
				КонецЕсли;
				ТекстОтбор = ТекстОтбор + "
				|	РегистрСведений." + СтруктураОтбора.ЛевоеЗначение + " " + СтруктураОтбора.ВидСравнения + " (" + ОписаниеПараметра + ") И";
				СчПараметров = СчПараметров + 1;
			КонецЦикла;	
			ТекстОтбор = Лев(ТекстОтбор, СтрДлина(ТекстОтбор) - 1);
			ТекстОтбор = ТекстОтбор + ")";
			ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Преобразовывает переданные массивы сотрудников и физических лиц в строку 
// вида <Фамилия И.О., Фамилия И.О...>.
// Используется для заполнения краткого состава документов.
//
// Параметры:
//	- Сотрудники - массив элементов типа СправочникСсылка.Сотрудники,
//	- ДатаАктуальности - дата для получения фамилии, имени и отчества.
//	- Физлица - необязательный, массив элементов типа СправочникСсылка.ФизическиеЛица.
//	- ФизлицаСотрудников - соответствие Сотрудник - Физическое лицо.
//
Функция КраткийСоставСотрудников(Сотрудники, ДатаАктуальности, Физлица = Неопределено, ФизлицаСотрудников = Неопределено) Экспорт
	
	Если ФизлицаСотрудников = Неопределено Тогда
		ФизлицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	КонецЕсли;
	
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ФизлицаСотрудников, "Значение", Истина);
	
	Если Физлица <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФизическихЛиц, Физлица, Истина);
	КонецЕсли;
	
	Возврат КраткийСоставСотрудниковПоСпискуФизическихЛиц(СписокФизическихЛиц, ДатаАктуальности);
	
КонецФункции

Функция КраткийСоставСотрудниковПоСпискуФизическихЛиц(ФизическиеЛица, ДатаАктуальности) Экспорт
	
	// Первые N человек и M символов.
	МаксимальноеКоличествоФизическихЛиц = 10;
	МаксимальнаяДлинаСтроки = 100;

	Счетчик = 0;
	ПервыеФизлица = Новый Массив;
	УникальныеФизлица = Новый Соответствие;
	
	Для Каждого Физлицо Из ФизическиеЛица Цикл
		
		Если Счетчик = МаксимальноеКоличествоФизическихЛиц Тогда
			Прервать;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Физлицо) 
			Или УникальныеФизлица[Физлицо] <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПервыеФизлица.Добавить(Физлицо);
		УникальныеФизлица.Вставить(Физлицо, Истина);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ИменаФизлиц = СоответствиеФИОФизЛицСсылкам(ДатаАктуальности, ПервыеФизлица);
	
	КраткийСостав = "";
	
	Для Каждого Физлицо Из ПервыеФизлица Цикл
		
		Если Не ПустаяСтрока(КраткийСостав) Тогда
			КраткийСостав = КраткийСостав + ", ";
		КонецЕсли;
		
		ФИО = ИменаФизлиц[Физлицо];
		КраткийСостав = КраткийСостав + ФИО.ФамилияИО;
		
	КонецЦикла;
	
	Если СтрДлина(КраткийСостав) > МаксимальнаяДлинаСтроки Тогда
		КраткийСостав = Лев(КраткийСостав, МаксимальнаяДлинаСтроки - 3) + "...";
	КонецЕсли;
	
	Возврат КраткийСостав;
	
КонецФункции

// Возвращает соответствие Физлицо - ФИО на дату
// относящихся к персональным.
//
// Параметры:
//		ДатаАктуальности - дата, на которую определяется ФИО:
//		МассивФизЛиц - массив ссылок типа СправочникСсылка.ФизическиеЛица.
//
// Возвращаемое значение:
//		соответствие	
//			ключ - СправочникСсылка.ФизическиеЛица
//			значение - строка ФИО.
//
//
Функция СоответствиеФИОФизЛицСсылкам(ДатаАктуальности, МассивФизЛиц) Экспорт 
	
	МассивНеобходимыхПолей = Новый Массив;
	МассивНеобходимыхПолей.Добавить("ФамилияИО");
	МассивНеобходимыхПолей.Добавить("Фамилия");
	МассивНеобходимыхПолей.Добавить("Имя");
	МассивНеобходимыхПолей.Добавить("Отчество");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, МассивФизЛиц, МассивНеобходимыхПолей, ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанныеФизЛиц.ФизическоеЛицо,
	|	КадровыеДанныеФизЛиц.ФамилияИО,
	|	КадровыеДанныеФизЛиц.Фамилия,
	|	КадровыеДанныеФизЛиц.Имя,
	|	КадровыеДанныеФизЛиц.Отчество
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеФИОФизЛицСсылкам = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ФИО = Новый Структура("ФамилияИО, Фамилия, Имя, Отчество");
		ЗаполнитьЗначенияСвойств(ФИО, Выборка);
		СоответствиеФИОФизЛицСсылкам.Вставить(Выборка.ФизическоеЛицо, ФИО);		
	КонецЦикла;	
	
	Возврат СоответствиеФИОФизЛицСсылкам;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с личными данными физических лиц

Процедура ИзменитьНаименованиеФизическихЛиц(ДанныеФИО)
	
	Пока ДанныеФИО.Следующий() Цикл
		
		ФизЛицоОбъект = ДанныеФИО.ФизическоеЛицо.ПолучитьОбъект();
		
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеФИО.Наименование);
		НаименованиеФизЛица = СтруктураФИО.Фамилия + " " + СтруктураФИО.Имя + " " + СтруктураФИО.Отчество;
		
		Если СокрЛП(НаименованиеФизЛица) = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(ДанныеФИО.Фамилия, ДанныеФИО.Имя, ДанныеФИО.Отчество, "") Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка 
			ФизЛицоОбъект.Заблокировать();
		Исключение
			Отказ = Истина;
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить имя физического лица %1.
			|Возможно, данные сотрудника редактируются другим пользователем'"),
			ФизЛицоОбъект.Наименование);
			ВызватьИсключение ТекстИсключенияЗаписи;
			
		КонецПопытки;
		
		ФизЛицоОбъект.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
				ДанныеФИО.Фамилия,
				ДанныеФИО.Имя,
				ДанныеФИО.Отчество,
				"");
		
		ФизЛицоОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьНаименованиеСотрудников(ДанныеФИО)
	
	Пока ДанныеФИО.Следующий() Цикл
		
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеФИО.СотрудникНаименование);
		НаименованиеСотрудника = СтруктураФИО.Фамилия + " " + СтруктураФИО.Имя + " " + СтруктураФИО.Отчество;
		
		ПолноеНаименованиеСотрудника  = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
				ДанныеФИО.Фамилия,
				ДанныеФИО.Имя,
				ДанныеФИО.Отчество,
				"");
		
		Если СокрЛП(НаименованиеСотрудника) = ПолноеНаименованиеСотрудника Тогда
			Продолжить;
		КонецЕсли;
		
		СотрудникОбъект = ДанныеФИО.Сотрудник.ПолучитьОбъект();
		
		Попытка 
			СотрудникОбъект.Заблокировать();
		Исключение
			Отказ = Истина;
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить имя сотрудника %1.
			|Возможно, данные сотрудника редактируются другим пользователем'"),
			СотрудникОбъект.Наименование);
			ВызватьИсключение ТекстИсключенияЗаписи;
			
		КонецПопытки;
		
		СотрудникОбъект.Наименование = ПолноеНаименованиеСотрудника;
		
		СотрудникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

// Формирует временную таблицу с значениями ресурсов заданного регистра сведений.
// Параметры:
//		МенеджерВременныхТаблиц.
//
//		ТолькоРазрешенные - если истина, выбираются только разрешенные записи.
//
//		ИмяРегистра - имя регистра сведений (не полное).
//
//		ИзмеренияДаты - таблица значений.
//			Должна обязательно содержать колонку "Период"
//			Может содержать колонки с именами, совпадающими с именами 
//			измерений регистра сведений.
//
//			Используется как фильтр - переданные в ней значения измерений "фильтруют" регистр.
//			В зависимости от значения параметра ВсеЗаписи строки ИзмеренияДаты используются 
//			не только как фильтр, но и как набор значений для дополнения результирующей 
//			временной таблицы.
//			Содержит даты получения последних значений ресурсов.
//			В предельном случае, когда нет колонок таблицы, соответствующих измерениям, 
//			(т.е. фильтрация по измерениям не выполняется), в таблице содержится одна строка 
//			с датой на которую нужно получить значения ресурсов.
//
//		Отбор - коллекция условий отбора, соединяемых по "И" и применяемых к регистру сведений.
//			Коллекция строки которой имеют поля
//				ЛевоеЗначение - строка, имя поля регистра сведений
//				ВидСравнения - строка, вид сравнения, допустимый в языке запросов
//				ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//
//		ВсеЗаписи - булево значение. 
//			Если Истина, то в результирующей временной таблице
//			должно быть столько же записей, сколько передано в параметре ИзмеренияДаты.
//			Если Ложь, то временная таблица содержит записи только для тех 
//			значений измерений, для которых существуют данные в регистре.
//			По умолчанию - Ложь.
//	
//		ВключаяГраницу - булево значение.	
//			Если Истина, то записи на дату формирования среза учитываются
//			Если Ложь, то записи на дату формирования среза не учитываются
//			По умолчанию - Истина.  
//
//		СрезПоследних - булево значение. 
//			Если Истина, во временную таблицу выберется срез последних, иначе срез первых 
//			По умолчанию - Истина.  
//			
//		ИмяРезультирующейТаблицы - имя временной таблицы в которую должен быть помещен результат.
//			Если имя не задано, то создается временная таблица с именем 
//			ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых, например: ВТПлановыеНачисленияСрезПоследних.
//
// Создает в МенеджерВременныхТаблиц временную таблицу.
// Поля временной таблицы
//	- Период
//	- Все измерения (не только переданные в качестве фильтра, а все)
//	- Все ресурсы 
//	- Все реквизиты
//	- Все стандартные реквизиты.
//
Процедура СоздатьПоТаблицеЗначенийВТИмяРегистраСрез(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяРегистра, ИзмеренияДаты, Отбор, ВсеЗаписи, ВключаяГраницу, СрезПоследних, ИмяРезультирующейТаблицы)
	
	МассивИзмерений = Новый Массив;
	Для Каждого Колонка Из ИзмеренияДаты.Колонки Цикл
		МассивИзмерений.Добавить(Колонка.Имя);		
	КонецЦикла;	
	
	КоллекцииПолей = КоллекцииПолейДляПодготовкиТекстаЗапроса(ИмяРегистра, МассивИзмерений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ИмяВТИзмеренияДаты = УникальноеИмяВременнойТаблицы("ВТИзмеренияДаты");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИзмеренияДаты.Период";
	Для Каждого Измерение Из КоллекцииПолей.ИзмеренияФильтра Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	ИзмеренияДаты." + Измерение;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ " + ИмяВТИзмеренияДаты + "
	|ИЗ
	|	&ИзмеренияДаты КАК ИзмеренияДаты";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ЗапросВТИмяРегистраСрез = ЗапросВТИмяРегистраСрез(ТолькоРазрешенные, КоллекцииПолей, ИмяРегистра, ИмяВТИзмеренияДаты, ИмяРезультирующейТаблицы, Отбор, ВсеЗаписи, ВключаяГраницу, СрезПоследних);
	ЗапросВТИмяРегистраСрез.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ДобавитьТекстУдаленияВременнойТаблицы(ЗапросВТИмяРегистраСрез.Текст, ИмяВТИзмеренияДаты);
	
	ЗапросВТИмяРегистраСрез.Выполнить();
	
КонецПроцедуры

#КонецОбласти
