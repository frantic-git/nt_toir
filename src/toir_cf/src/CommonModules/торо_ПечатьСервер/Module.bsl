
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруДанныхРемонтовОборудования(СсылкаНаДок, ИмяТЧ) Экспорт
	
	РемонтыОборудования = Новый Массив;
	
	Для каждого Стр Из СсылкаНаДок[ИмяТЧ] Цикл
		СтруктураТЧ = Новый Структура("ID, ОбъектРемонта, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ДокументИсточник");
		ЗаполнитьЗначенияСвойств(СтруктураТЧ, Стр);
		РемонтыОборудования.Добавить(СтруктураТЧ);
	КонецЦикла;
	
	Возврат РемонтыОборудования;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхГарантийнхРемонтов(СсылкаНаДок, ИмяТЧ) Экспорт
	
	РемонтыОборудования = Новый Массив;
	
	Для каждого Стр Из СсылкаНаДок[ИмяТЧ] Цикл
		СтруктураТЧ = Новый Структура("ID, ОбъектРемонта, ОтказавшийЭлемент, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ДокументИсточник");
		Если Стр.ГарантийныйРемонт Тогда
			ЗаполнитьЗначенияСвойств(СтруктураТЧ, Стр);
			РемонтыОборудования.Добавить(СтруктураТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РемонтыОборудования;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхРемонтовОборудованияСПодрядчиками(СсылкаНаДок) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Исполнитель КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаПодрядчиков
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = &Ссылка
	|	И торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Исполнитель ССЫЛКА Справочник.Контрагенты
	|	И торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник КАК ДокументИсточник
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка
	|	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID В
	|			(ВЫБРАТЬ
	|				ТаблицаПодрядчиков.ID КАК ID
	|			ИЗ
	|				ТаблицаПодрядчиков КАК ТаблицаПодрядчиков)";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	РемонтыОборудования = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СтруктураТЧ = Новый Структура("ID, ОбъектРемонта, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ДокументИсточник");
		ЗаполнитьЗначенияСвойств(СтруктураТЧ, Выборка);
		РемонтыОборудования.Добавить(СтруктураТЧ);
	КонецЦикла;
	
	Возврат РемонтыОборудования;

КонецФункции

Функция ПолучитьСтруктуруДанныхРегламентныхМероприятий(СсылкаНаДок, ИмяТЧ) Экспорт
	
	мас = Новый Массив;
	Для каждого Стр Из СсылкаНаДок[ИмяТЧ] Цикл
		СтруктураТЧ = Новый Структура("ID, ОбъектРемонта, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания");
		ЗаполнитьЗначенияСвойств(СтруктураТЧ, Стр);
		мас.Добавить(СтруктураТЧ);
	КонецЦикла;
	
	Возврат мас;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхРемонтовОборудованияДляСпискаДокументов(Документ, ИмяТЧ) Экспорт
	
	РемонтыОборудования = Документ[ИмяТЧ].ВыгрузитьКолонку("ID");
	
	Возврат РемонтыОборудования;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхРегламентныхМероприятийДляСпискаДокументов(Документ, ИмяТЧ) Экспорт
	мас = Документ[ИмяТЧ].ВыгрузитьКолонку("ID");
	Возврат мас;
КонецФункции

Функция ПолучитьСписокПодрядчиков(Акт) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Исполнитель КАК Контрагент
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка
	|	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Исполнитель ССЫЛКА Справочник.Контрагенты";
	
	Запрос.УстановитьПараметр("Ссылка", Акт);
	
	МассивПодрядчиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат МассивПодрядчиков; 	
	
КонецФункции

Функция ПолучитьСписокПодрядчиковПоРемонтам(Документ, СписокIDРемонта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Исполнитель КАК Контрагент
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
	|	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка
	|	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Исполнитель ССЫЛКА Справочник.Контрагенты
	|	И НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Исполнитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокIDРемонта);
	
	МассивПодрядчиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат МассивПодрядчиков; 	
	
КонецФункции

Функция СтруктураПараметровППР(Документ) Экспорт
	
	Если ЗначениеЗаполнено(Документ.ПериодичностьДетализации) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(Документ.ПериодичностьДетализации) + ", "+?(Документ.КоличествоПериодов=0,1,Документ.КоличествоПериодов)+") КАК ДатаОкончания";
		
		Запрос.УстановитьПараметр("ДатаНачала", Документ.ДатаПланирования);
		
		Попытка
			Выборка = Запрос.Выполнить().Выбрать();
		Исключение
			Возврат Дата(3999,12,31,23,59,59);
		КонецПопытки;
		
		Если Выборка.Следующий() Тогда
			
			ДатаОкончанияПланирования = ?(Документ.ПериодичностьДетализации = Перечисления.Периодичность.День, Выборка.ДатаОкончания-1, НачалоДня(Выборка.ДатаОкончания)-1);
			
		КонецЕсли;
		
	Иначе 	
		
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	ОтборПечатнойФормы = Новый Структура;
	ОтборПечатнойФормы.Вставить("Имя", "Список объектов регламентного мероприятия");
	ОтборПечатнойФормы.Вставить("Значение");
	ОтборПечатнойФормы.Вставить("Использование", Ложь);
	ОтборПечатнойФормы.Вставить("ВидСравнения");
	
	МассивОтборПечатнойФормы = Новый Массив;
	МассивОтборПечатнойФормы.Добавить(ОтборПечатнойФормы);
	МассивОтборПечатнойФормы.Добавить(ОтборПечатнойФормы);
	
	ПередаваемыйПараметр = Новый Структура;
	ПередаваемыйПараметр.Вставить("ВыводитьВсеРемонты", Истина);
	ПередаваемыйПараметр.Вставить("ДатаНачала",Документ.ДатаПланирования);
	ПередаваемыйПараметр.Вставить("ДатаКонца",ДатаОкончанияПланирования);	
	ПередаваемыйПараметр.Вставить("ИнтервалРазбиения","Месяц");
	ПередаваемыйПараметр.Вставить("ОтборФормы", МассивОтборПечатнойФормы);
		
	Возврат ПередаваемыйПараметр;
	
КонецФункции

// Возвращает дату окончания планирования документа План-график ППР
Функция ДатаОкончанияПланированияПланГрафикППР(Ссылка) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка.ПериодичностьДетализации) Тогда		
		Возврат ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Ссылка.ДатаПланирования, Ссылка.ПериодичностьДетализации, Ссылка.КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Функция СтруктураПараметровОстановочныеРемонты(Документ) Экспорт
	
	ОтборПечатнойФормы = Новый Структура;
	ОтборПечатнойФормы.Вставить("Имя", "Список объектов остановочного ремонта");
	ОтборПечатнойФормы.Вставить("Значение");
	ОтборПечатнойФормы.Вставить("Использование", Ложь);
	ОтборПечатнойФормы.Вставить("ВидСравнения");
	
	МассивОтборПечатнойФормы = Новый Массив;
	МассивОтборПечатнойФормы.Добавить(ОтборПечатнойФормы);
	МассивОтборПечатнойФормы.Добавить(ОтборПечатнойФормы);
	
	ПередаваемыйПараметр = Новый Структура;
	
	ПередаваемыйПараметр.Вставить("ДатаНачала",Документ.ДатаНачалаРемонта);
	ПередаваемыйПараметр.Вставить("ДатаКонца",Документ.ДатаОкончанияРемонта);
	ПередаваемыйПараметр.Вставить("ИнтервалРазбиения","Месяц");
	ПередаваемыйПараметр.Вставить("ОтборФормы", МассивОтборПечатнойФормы);
	
	Возврат ПередаваемыйПараметр;
	
КонецФункции

Функция ПолучитьВидСравненияДляЗапроса(ВидСравненияОтбора) Экспорт
	
	СтруктураВидаСравнения = Новый Структура;
	СтруктураВидаСравнения.Вставить("ВидСравненияНачало");
	СтруктураВидаСравнения.Вставить("ВидСравненияКонец");
	
	Если ВидСравненияОтбора = ВидСравнения.Равно Тогда		
		СтруктураВидаСравнения.ВидСравненияНачало = "=";
		СтруктураВидаСравнения.ВидСравненияКонец = "";
		Возврат СтруктураВидаСравнения;		
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "<>";
		СтруктураВидаСравнения.ВидСравненияКонец = "";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "В(";
		СтруктураВидаСравнения.ВидСравненияКонец = ")";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "НЕ В(";
		СтруктураВидаСравнения.ВидСравненияКонец = ")";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "В ИЕРАРХИИ(";
		СтруктураВидаСравнения.ВидСравненияКонец = ")";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "В ИЕРАРХИИ(";
		СтруктураВидаСравнения.ВидСравненияКонец = ")";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "НЕ В ИЕРАРХИИ(";
		СтруктураВидаСравнения.ВидСравненияКонец = ")";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "НЕ В ИЕРАРХИИ(";
		СтруктураВидаСравнения.ВидСравненияКонец = ")";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = ">";
		СтруктураВидаСравнения.ВидСравненияКонец = "";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = ">=";
		СтруктураВидаСравнения.ВидСравненияКонец = "";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "<";
		СтруктураВидаСравнения.ВидСравненияКонец = "";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = "<=";
		СтруктураВидаСравнения.ВидСравненияКонец = "";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Содержит Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = " ПОДОБНО ВЫРАЗИТЬ(";
		СтруктураВидаСравнения.ВидСравненияКонец = " КАК Строка(900))";
		Возврат СтруктураВидаСравнения;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеСодержит Тогда
		СтруктураВидаСравнения.ВидСравненияНачало = " НЕ ПОДОБНО ВЫРАЗИТЬ(";
		СтруктураВидаСравнения.ВидСравненияКонец = " КАК Строка(900))";
		Возврат СтруктураВидаСравнения;
	Иначе // другие варианты 
		СтруктураВидаСравнения.ВидСравненияНачало = "=";
		СтруктураВидаСравнения.ВидСравненияКонец = "";
		Возврат СтруктураВидаСравнения;
	КонецЕсли;
	
КонецФункции // ПолучитьВидСравненияДляЗапроса()

// Формирование названия месяца с учетом падежа (именительный и родительный).
//
// Параметры:
// 	НомерМесяца - Число - номер месяца в году.
//		Падеж - Строка - указание паджа, в котором нужно сформировать название месяца
//				("Имен" - именительный, по-умолчанию; "Род" - родительный).
//
// Возвращаемое значение:
// 		Строка - название месяца с учетом падежа.
//
Функция НазваниеМесяцаСтрокойПадежное(Знач НомерМесяца, Знач Падеж="Имен") Экспорт
	
	Если Падеж="Род" Тогда
		
		Если НомерМесяца=1 Тогда
			Возврат "января";
		ИначеЕсли НомерМесяца=2 Тогда
			Возврат "февраля";
		ИначеЕсли НомерМесяца=3 Тогда
			Возврат "марта";
		ИначеЕсли НомерМесяца=4 Тогда
			Возврат "апреля";
		ИначеЕсли НомерМесяца=5 Тогда
			Возврат "мая";
		ИначеЕсли НомерМесяца=6 тогда
			Возврат "июня";
		ИначеЕсли НомерМесяца=7 тогда
			Возврат "июля";
		ИначеЕсли НомерМесяца=8 тогда
			Возврат "августа";
		ИначеЕсли НомерМесяца=9 тогда
			Возврат "сентября";
		ИначеЕсли НомерМесяца=10 тогда
			Возврат "октября";
		ИначеЕсли НомерМесяца=11 тогда
			Возврат "ноября";
		ИначеЕсли НомерМесяца=12 тогда
			Возврат "декабря";	
		КонецЕсли;
		
	КонецЕсли;
	
	Если Падеж="Имен" Тогда
		
		Если НомерМесяца=1 Тогда
			Возврат "январь";
		ИначеЕсли НомерМесяца=2 Тогда
			Возврат "февраль";
		ИначеЕсли НомерМесяца=3 Тогда
			Возврат "март";
		ИначеЕсли НомерМесяца=4 Тогда
			Возврат "апрель";
		ИначеЕсли НомерМесяца=5 Тогда
			Возврат "май";
		ИначеЕсли НомерМесяца=6 Тогда
			Возврат "июнь";
		ИначеЕсли НомерМесяца=7 Тогда
			Возврат "июль";
		ИначеЕсли НомерМесяца=8 Тогда
			Возврат "август";
		ИначеЕсли НомерМесяца=9 Тогда
			Возврат "сентябрь";
		ИначеЕсли НомерМесяца=10 Тогда
			Возврат "октябрь";
		ИначеЕсли НомерМесяца=11 Тогда
			Возврат "ноябрь";
		ИначеЕсли НомерМесяца=12 Тогда
			Возврат "декабрь";	
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПараметрыОтбора(ОтборПечатнойФормы,Запрос,ИмяТаблицы,СписокПодчиненных=Неопределено) Экспорт
	
	Сч = 0;
	Для Каждого СтрокаОтбора Из ОтборПечатнойФормы Цикл
		Если СтрокаОтбора.Использование Тогда
			Сч = Сч + 1;
			ВидСравненияВЗапросе = ПолучитьВидСравненияДляЗапроса(СтрокаОтбора.ВидСравнения);
			Если ЗначениеЗаполнено(СтрокаОтбора.Имя) И СтрНайти(СтрокаОтбора.Имя,"ОбъектРемонт") <> 0 Тогда
				
				Если Не СписокПодчиненных = Неопределено Тогда
					Если ВидСравненияВЗапросе.ВидСравненияНачало = "В ИЕРАРХИИ(" 
						ИЛИ ВидСравненияВЗапросе.ВидСравненияНачало = "НЕ В ИЕРАРХИИ(" Тогда
						
						Если ВидСравненияВЗапросе.ВидСравненияНачало = "НЕ В ИЕРАРХИИ(" Тогда 
							ВидСравненияВЗапросе.ВидСравненияНачало = "НЕ В(";
						Иначе	
							ВидСравненияВЗапросе.ВидСравненияНачало = "В(";
						КонецЕсли;
						
						Запрос.Текст = СтрЗаменить(Запрос.Текст,ИмяТаблицы+".Ссылка = &Ссылка", ИмяТаблицы + ".Ссылка = &Ссылка
						|И " + СтрокаОтбора.Имя + " " + ВидСравненияВЗапросе.ВидСравненияНачало + " &Параметр" + Сч + ВидСравненияВЗапросе.ВидСравненияКонец);
						Запрос.УстановитьПараметр("Параметр"+ Сч, СписокПодчиненных);
						
						Продолжить;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст,ИмяТаблицы+".Ссылка = &Ссылка", ИмяТаблицы + ".Ссылка = &Ссылка
				|И " + СтрокаОтбора.Имя + " " + ВидСравненияВЗапросе.ВидСравненияНачало + " &Параметр" + Сч + ВидСравненияВЗапросе.ВидСравненияКонец);	
				Если СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
					Запрос.УстановитьПараметр("Параметр"+ Сч, "%" + СтрокаОтбора.Значение + "%");
				Иначе
					Запрос.УстановитьПараметр("Параметр"+ Сч, СтрокаОтбора.Значение);
				КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьИнтервалРазбиения(ИнтервалСтрокой) Экспорт
			
		Если ИнтервалСтрокой = "Год" Тогда 
			ИнтервалРазбиения=Перечисления.Периодичность.Год;
		ИначеЕсли ИнтервалСтрокой = "Месяц" Тогда 
			ИнтервалРазбиения=Перечисления.Периодичность.Месяц;
		ИначеЕсли ИнтервалСтрокой = "Неделя" Тогда 
			ИнтервалРазбиения=Перечисления.Периодичность.Неделя;
		ИначеЕсли ИнтервалСтрокой = "День" Тогда 
			ИнтервалРазбиения=Перечисления.Периодичность.День;
		КонецЕсли;
		
		Возврат ИнтервалРазбиения;

	КонецФункции
	
Процедура ЗаполнитьИнтервалы(ПериодНач,ПериодКон, ИнтервалРазбиения, ТабДок, Макет, МассивВременныхИнтервалов,ШиринаТаблицы) Экспорт
	
	ТемпДата = НачалоДня(ПериодНач);	
	ПериодКонРасчетный = ПериодКон;		
	
	Если ИнтервалРазбиения = Перечисления.Периодичность.День Тогда
		ПериодКонРасчетный = КонецДня(ПериодКон);
		ПериодовВОтчете = 0;
		СледующийДень = Истина;
		Пока СледующийДень Цикл
			Область = Макет.ПолучитьОбласть("Интервал");
			ОбластьОформления = Область.Область("ЗначениеИнтервала");
			
			Область.Параметры.НомИнтервала = Формат(ТемпДата, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
			Если ДеньНедели(Дата(Год(ТемпДата), Месяц(ТемпДата), День(ТемпДата), 0,0,0))=6 или ДеньНедели(Дата(Год(ТемпДата), Месяц(ТемпДата), День(ТемпДата), 0,0,0))=7 Тогда
				ОбластьОформления.ЦветФона = новый Цвет(255,251,240);
				ОбластьОформления.ЦветТекста = новый Цвет(0,0,0);
			КонецЕсли;
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",НачалоДня(ТемпДата));
			ЕдиничныйИнтервал.Вставить("КонИнт",КонецДня(ТемпДата));	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТабДок.Присоединить(Область);
			ТемпДата = ТемпДата+60*60*24; 
			Если ТемпДата > ПериодКонРасчетный Тогда
				СледующийДень = Ложь;		
			КонецЕсли;
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла;
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;
	ИначеЕсли ИнтервалРазбиения = Перечисления.Периодичность.Неделя Тогда 
		ПериодКонРасчетный = КонецНедели(ПериодКон);
		ТемпДата = НачалоДня(НачалоНедели(ПериодНач));
		ПериодовВОтчете = 0;	
		СледующаяНеделя = Истина;
		Пока СледующаяНеделя Цикл 
			Область = Макет.ПолучитьОбласть("Интервал");
			ОбластьОформления = Область.Область("ЗначениеИнтервала");
			
			Область.Параметры.НомИнтервала = Формат(ТемпДата, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") + "-" + Формат(ТемпДата+60*60*24*6, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
			ТабДок.Присоединить(Область);
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",НачалоНедели(ТемпДата));
			ЕдиничныйИнтервал.Вставить("КонИнт",КонецНедели(ТемпДата));	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТемпДата = ТемпДата+60*60*24*7;
			Если НачалоДня(ТемпДата) > НачалоДня(ПериодКонРасчетный) Тогда
				СледующаяНеделя = Ложь;		
			КонецЕсли;	
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла;
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;
	ИначеЕсли ИнтервалРазбиения = Перечисления.Периодичность.Месяц Тогда 
		ПериодКонРасчетный = КонецМесяца(ПериодКон);
		ТемпДата = НачалоМесяца(ПериодНач);
		ПериодовВОтчете = 0;
		СледующийМесяц = Истина;
		Пока СледующийМесяц Цикл
			Область = Макет.ПолучитьОбласть("Интервал");
			ОбластьОформления = Область.Область("ЗначениеИнтервала");
			
			Область.Параметры.НомИнтервала = НазваниеМесяцаСтрокойПадежное(Месяц(ТемпДата)) + Символы.ПС + Сред(ТемпДата,7,4); 
			ТабДок.Присоединить(Область);
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",НачалоМесяца(ТемпДата));
			ЕдиничныйИнтервал.Вставить("КонИнт",КонецМесяца(ТемпДата));	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТемпДата = ДобавитьМесяц(ТемпДата,1);
			Если ТемпДата > ПериодКонРасчетный Тогда
				СледующийМесяц = Ложь;		
			КонецЕсли;	
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла;
	ИначеЕсли ИнтервалРазбиения = Перечисления.Периодичность.Год Тогда 
		ПериодКонРасчетный = КонецГода(ПериодКон);
		ТемпДата = НачалоГода(ПериодНач);
		ПериодовВОтчете = 0;
		СледующийГод = Истина;
		Пока СледующийГод Цикл
			Область = Макет.ПолучитьОбласть("Интервал");
			ОбластьОформления = Область.Область("ЗначениеИнтервала");
			
			Область.Параметры.НомИнтервала = Сред(ТемпДата,7,4); 
			ТабДок.Присоединить(Область);
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",НачалоГода(ТемпДата));
			ЕдиничныйИнтервал.Вставить("КонИнт",КонецГода(ТемпДата));	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТемпДата = ДобавитьМесяц(ТемпДата,12);
			Если ТемпДата > ПериодКонРасчетный Тогда
				СледующийГод = Ложь;		
			КонецЕсли;	
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла; 
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;
	ИначеЕсли ИнтервалРазбиения = Перечисления.торо_ДетализацияПлана.Час Тогда 
		ПериодКонРасчетный = ПериодКон;
		ТемпДата = ПериодНач;
		ПериодовВОтчете = 0;
		СледующийЧас = Истина;
		
		ДатаДня = НачалоДня(ТемпДата);
		НомерКолонки = 6;
		НомерСтроки  = 13;
		
		Пока СледующийЧас Цикл
			Область = Макет.ПолучитьОбласть("СтолбецЧасы");
			ОбластьОформления = Область.Область("ЗначЧас");
			
			Область.Параметры.Дата         = Формат(ТемпДата, "ДФ='dd MMMM'");
			Область.Параметры.НомИнтервала = Формат(ТемпДата, "ДФ='HH"":00""'");
			
			ТабДок.Присоединить(Область);
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",ТемпДата);
			ЕдиничныйИнтервал.Вставить("КонИнт",ТемпДата + 3599);	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТемпДата = ТемпДата + 3600;
			
			Если НЕ ДатаДня = НачалоДня(ТемпДата) Тогда // Нужно объединить ячейки с датами
				ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки + 1, НомерКолонки + 23).Объединить();
				НомерКолонки = НомерКолонки + 24;
				ДатаДня = НачалоДня(ТемпДата);
			КонецЕсли; 
			
			Если ТемпДата > ПериодКонРасчетный Тогда
				СледующийЧас = Ложь;		
			КонецЕсли;	
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла;
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокПодчиненных(ОтборПечатнойФормы,СтруктураИерархии) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя","Объект ремонта");
	НайденныеСтроки = ОтборПечатнойФормы.НайтиСтроки(ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		
		Если НайденныеСтроки[0].Использование = Истина И (НайденныеСтроки[0].ВидСравнения = ВидСравнения.ВИерархии
			ИЛИ НайденныеСтроки[0].ВидСравнения = ВидСравнения.НеВИерархии
			ИЛИ НайденныеСтроки[0].ВидСравнения = ВидСравнения.ВСпискеПоИерархии) Тогда
			
			ДополнительныеОтборы = Неопределено;
			
			Если НайденныеСтроки[0].Свойство("Отбор") Тогда
				ЭлементОтбора = Новый Структура;
				ЭлементОтбора.Вставить("Ключ","Ссылка");
				ЭлементОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.ВСписке);
				ЭлементОтбора.Вставить("Значение", НайденныеСтроки[0].Отбор);
				ДополнительныеОтборы = Новый СписокЗначений;
				ДополнительныеОтборы.Добавить(ЭлементОтбора);
			КонецЕсли;
			
			СписокПодчиненных = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(НайденныеСтроки[0].Значение, СтруктураИерархии,,,,ДополнительныеОтборы);
			
			Возврат СписокПодчиненных;
			
		КонецЕсли;
	КонецЕсли;
КонецФункции


#КонецОбласти
