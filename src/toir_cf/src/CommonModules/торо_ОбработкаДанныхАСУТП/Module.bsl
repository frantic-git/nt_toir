
#Область ПрограммныйИнтерфейс

// Процедура выполняет обработку данных, полученных из АСУ ТП:
// формирование документов по правилам и почтовых уведомлений.
//
Процедура ОбработатьДанные() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ДанныеАСУТП.МеткаВремени КАК МеткаВремени,
	               |	торо_ДанныеАСУТП.ИДСеанса КАК ИДСеанса
	               |ИЗ
	               |	РегистрСведений.торо_ДанныеАСУТП КАК торо_ДанныеАСУТП
	               |ГДЕ
	               |	торо_ДанныеАСУТП.Ошибка = ЛОЖЬ
	               |	И торо_ДанныеАСУТП.Обработан = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МеткаВремени";
	
	резЗапроса = Запрос.Выполнить();
	Если резЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = резЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбработатьПоСеансу(Выборка.ИДСеанса);
		СформироватьПочтовыеУведомление(Выборка.ИДСеанса);
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует почтовые уведомления по данным,
// полученным из АСУ ТП.
//
// Параметры:
//		ИДСеанса - УникальныйИдентификатор - идентификатор сеанса обмена данными с АСУ ТП.
//
Процедура СформироватьПочтовыеУведомление(ИДСеанса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СобытияИнтеграцииСАСУТП.Ошибка КАК Ошибка
	               |ИЗ
	               |	РегистрСведений.торо_СобытияИнтеграцииСАСУТП КАК торо_СобытияИнтеграцииСАСУТП
	               |ГДЕ
	               |	торо_СобытияИнтеграцииСАСУТП.ИДСеанса = &ИДСеанса
	               |	И торо_СобытияИнтеграцииСАСУТП.ТипСобытия = &ТипСобытия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОповещаемыеЛицаАСУТП.ОповещаемоеЛицо КАК ОповещаемоеЛицо
	               |ИЗ
	               |	РегистрСведений.торо_ОповещаемыеЛицаАСУТП КАК торо_ОповещаемыеЛицаАСУТП";
	
	Запрос.УстановитьПараметр("ИДСеанса", ИДСеанса);
	Запрос.УстановитьПараметр("ТипСобытия", Перечисления.торо_СобытияИнтеграции.Ошибка);
	
	резЗапроса = Запрос.ВыполнитьПакет();
	 
	Если резЗапроса[0].Пустой() или резЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = резЗапроса[0].Выбрать();
	СписокЛиц = резЗапроса[1].Выбрать();
	
	ТемаПисьма = "Ошибка при обмене с АСУ ТП (" + ТекущаяДата() + "). Зафиксировано " + СписокОшибок.Количество() + " ошибок.";
	ТелоПисьма = "";
	Пока СписокОшибок.Следующий() Цикл
		Если ТелоПисьма = "" Тогда
			ТелоПисьма = СписокОшибок.Ошибка + ";";
		Иначе 
			ТелоПисьма = ТелоПисьма + Символы.ПС + "===============" + Символы.ПС + СписокОшибок.Ошибка + ";";
		КонецЕсли;
	КонецЦикла;
	
	Пока СписокЛиц.следующий() Цикл
		мз = РегистрыСведений.торо_ОчередьУведомлений.СоздатьМенеджерЗаписи();
		мз.Пользователь = СписокЛиц.ОповещаемоеЛицо;
		мз.ID_уведомления = Новый УникальныйИдентификатор;
		мз.СпособУведомления = Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте;
		мз.ТемаПисьма = ТемаПисьма;
		мз.ТелоПисьма = ТелоПисьма;
		мз.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьСигналНаработка(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия)
	НовыйДокумент = Документы.торо_УчетНаработкиОборудования.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка);
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Комментарий = НСтр("ru = 'Документ сформирован автоматически при загрузке данных АСУ ТП.'");
	
	НоваяСтрока = НовыйДокумент.НаработкаОбъектов.Добавить();
	НоваяСтрока.Объект = Выборка.ОР;
	НоваяСтрока.Показатель = Выборка.ПараметрНаработки;
	НоваяСтрока.Наработка = Выборка.Значение;
	НоваяСтрока.ДатаРаботыПо = Выборка.Дата;
	
	ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(НоваяСтрока.Объект, НоваяСтрока.Показатель, Неопределено);
	Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
		НоваяСтрока.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
		НоваяСтрока.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
	КонецЕсли;
	НоваяСтрока.НовоеЗначение = НоваяСтрока.СтароеЗначение + НоваяСтрока.Наработка;
	НоваяСтрока.СтруктураИерархии = ОсновнаяИерархия;
	
	Если Выборка.РаспространятьНаработкуНаПодчиненных Тогда
	    НоваяСтрока.РаспространятьНаПодчиненных = Истина;
		
		Отказ = Ложь;
		ТаблицаИерархииОР = торо_РаботаСИерархией20.ПолучитьТаблицуИерархии(НоваяСтрока.СтруктураИерархии, НовыйДокумент.Дата);
		
		СинхронизироватьНаработкуСПодчиненнымиДляТекущейСтроки(НовыйДокумент, НоваяСтрока, ТаблицаИерархииОР, Отказ);
		Если Отказ Тогда
			НоваяСтрока.РаспространятьНаПодчиненных = Ложь;
		Иначе
		    ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(НоваяСтрока.Объект, НоваяСтрока.Показатель, НовыйДокумент.Ссылка);
			Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
				НоваяСтрока.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
				НоваяСтрока.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
				НоваяСтрока.НаработкаСНачалаЭксплуатации = НоваяСтрока.Наработка + НоваяСтрока.НаработкаСНачалаЭксплуатацииНачало;
				НоваяСтрока.НовоеЗначение = НоваяСтрока.Наработка + НоваяСтрока.СтароеЗначение;
			КонецЕсли;
			
			РаспространитьНаработкуНаПодчиненныхДляТекущейСтроки(НовыйДокумент, НоваяСтрока, ТаблицаИерархииОР, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПроврекаПройдена = НовыйДокумент.ПроверитьЗаполнение();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	Если ПроврекаПройдена Тогда
	    НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ОписаниеОшибки = НСтр("ru = 'В документе <%1> для объекта ремонта <%2> значение <Дата с> больше значения <Дата по>. Документ не может быть проведен!'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, НовыйДокумент.Ссылка, Выборка.ОР);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		торо_ПолучениеДанныхАСУТП.ЗарегистрироватьОшибкуИнтеграции(Выборка, Перечисления.торо_ОшибкиАСУТП.ПроведениеНовыхДокументов, ОписаниеОшибки, Выборка.ИДСеанса);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСигналПоказатель(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, РемонтыПоСостоянию)
	ДокОб = Документы.торо_УчетКонтролируемыхПоказателей.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(докОб, Выборка);
	докОб.Дата = ТекущаяДата();
	докОб.Комментарий = НСтр("ru='Документ сформирован автоматически при загрузке данных АСУ ТП.'");
	
	нс = ДокОб.Показатели.Добавить();
	ЗаполнитьЗначенияСвойств(нс, Выборка);
	нс.ОбъектРемонта = Выборка.ОР;
	нс.ДатаКонтроля = Выборка.Дата;
	
	докОб.Записать(РежимЗаписиДокумента.Запись);
	масСозданныхДокументов.Добавить(докОб.Ссылка);
	Если сооДокументыИИсхДанные[докОб.Ссылка] = Неопределено Тогда
		сооДокументыИИсхДанные.Вставить(докОб.Ссылка, выборка);
	КонецЕсли;

	Если РемонтыПоСостоянию Тогда
		ДокументыВДКСозданию = Новый СписокЗначений;
		торо_РемонтыПоСостоянию.СформироватьУведомленияИДефекты(ДокОб, ДокументыВДКСозданию);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСигналСостояние(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия)
	НовыйДокумент = Документы.торо_СостоянияОбъектовРемонта.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка);
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Комментарий = НСтр("ru = 'Документ сформирован автоматически при загрузке данных АСУ ТП.'");
	НовыйДокумент.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
	
	НоваяСтрока = НовыйДокумент.ОбъектыРемонта.Добавить();
	НоваяСтрока.ДатаОкончания = Выборка.Дата;
	НоваяСтрока.ОбъектРемонта = Выборка.ОР;
	НоваяСтрока.ВидЭксплуатации = Выборка.Состояние;
	НоваяСтрока.ПричинаПростоя = Выборка.ПричинаПростоя;
	НоваяСтрока.СтруктураИерархии = ОсновнаяИерархия;
	НоваяСтрока.ИзменятьСостояниеПодчиненныхОР = Выборка.РаспространятьСостояниеНаПодчиненных;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	масСозданныхДокументов.Добавить(НовыйДокумент.Ссылка);
	Если сооДокументыИИсхДанные[НовыйДокумент.Ссылка] = Неопределено Тогда
		сооДокументыИИсхДанные.Вставить(НовыйДокумент.Ссылка, Выборка);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСигналДефект(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные)
	докОб = Документы.торо_ВыявленныеДефекты.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(докОб, Выборка);
	докОб.Дата = ТекущаяДата();
	докОб.ДатаОбнаружения = Выборка.дата;
	докОб.ДефектВыявленВПроцессе = Справочники.торо_УсловияВыявленияДефекта.ПоДаннымАСУТП;
	докОб.Комментарий = НСтр("ru='Документ сформирован автоматически при загрузке данных АСУ ТП.'");
	
	нс = докОб.СписокДефектов.Добавить();
	ЗаполнитьЗначенияСвойств(нс, Выборка);
	нс.ОбъектРемонта = Выборка.ОР;
	нс.ОтказавшийЭлемент = Выборка.ОР;
	Если Выборка.ПричиныВозникновенияДефекта <> Неопределено И Выборка.ПричиныВозникновенияДефекта.Количество() > 0 Тогда
		нс.ДефектПричина = Выборка.ПричиныВозникновенияДефекта[0].Причина;
	КонецЕсли;
	
	докОб.Записать(РежимЗаписиДокумента.Запись);
	масСозданныхДокументов.Добавить(докОб.Ссылка);
	Если сооДокументыИИсхДанные[докОб.Ссылка] = Неопределено Тогда
		сооДокументыИИсхДанные.Вставить(докОб.Ссылка, выборка);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСигналKPI(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные)
	докОб = Документы.торо_РегистрацияЗначенийВнешнихПоказателейKPI.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(докОб, Выборка);
	докОб.Дата = ТекущаяДата();
	докОб.Комментарий = НСтр("ru='Документ сформирован автоматически при загрузке данных АСУ ТП.'");
	
	нс = докОб.ЗначенияПоказателей.Добавить();
	нс.Показатель = Выборка.ПоказательКПИ;
	нс.Период = Выборка.Дата;
	нс.Значение = Выборка.Значение;
	нс.Подразделение = Выборка.Подразделение;
	нс.ОбъектРемонта = Выборка.ОР;
	
	докОб.Записать(РежимЗаписиДокумента.Запись);
	масСозданныхДокументов.Добавить(докОб.Ссылка);
	Если сооДокументыИИсхДанные[докОб.Ссылка] = Неопределено Тогда
		сооДокументыИИсхДанные.Вставить(докОб.Ссылка, выборка);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьПоСеансу(ИДСеанса, НомерПопытки = 1)
	
	Если НомерПопытки > 100 Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяИерархия = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	УдалятьОбработанныеЗаписи = Константы.торо_УдалятьОбработанныеЗаписиАСУТП.Получить();
	СоздаватьДефекты = ПолучитьФункциональнуюОпцию("торо_УчетВыявленныхДефектовОборудования");
	РемонтыПоСостоянию = ПолучитьФункциональнуюОпцию("торо_ИспользоватьРемонтыПоСостоянию");
	СоздаватьДокументыКПИ = ПолучитьФункциональнуюОпцию("торо_ПоказыватьПодсистемуKPI");
	
	СоздаватьДокументыКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	СоздаватьДокументыНаработки = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	СоздаватьДокументыСостоянияОР = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ДанныеАСУТП.Тег КАК Тег,
	               |	торо_ДанныеАСУТП.НаименованиеОР КАК НаименованиеОР,
	               |	торо_ДанныеАСУТП.Дата КАК Дата,
	               |	торо_ДанныеАСУТП.МеткаВремени КАК МеткаВремени,
	               |	торо_ДанныеАСУТП.Значение КАК Значение,
	               |	торо_ДанныеАСУТП.ИДСеанса КАК ИДСеанса,
	               |	торо_ДанныеАСУТП.ИДЗаписи КАК ИДЗаписи,
	               |	торо_ДанныеАСУТП.Подключение КАК Подключение
	               |ПОМЕСТИТЬ табАСУТП
	               |ИЗ
	               |	РегистрСведений.торо_ДанныеАСУТП КАК торо_ДанныеАСУТП
	               |ГДЕ
	               |	торо_ДанныеАСУТП.ИДСеанса = &ИДСеанса
	               |	И торо_ДанныеАСУТП.Ошибка = ЛОЖЬ
	               |	И торо_ДанныеАСУТП.Обработан = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ДанныеАСУТП.Тег КАК Тег,
	               |	торо_ДанныеАСУТП.НаименованиеОР КАК НаименованиеОР,
	               |	торо_ДанныеАСУТП.Дата КАК Дата,
	               |	торо_ДанныеАСУТП.МеткаВремени КАК МеткаВремени,
	               |	торо_ДанныеАСУТП.Значение КАК Значение,
	               |	торо_ДанныеАСУТП.ИДСеанса КАК ИДСеанса,
	               |	торо_ДанныеАСУТП.ИДЗаписи КАК ИДЗаписи,
	               |	торо_ДанныеАСУТП.Подключение КАК Подключение,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.ОбъектРемонта КАК ОР,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.ТипСигнала КАК ТипСигнала,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.Показатель КАК Показатель,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.ПараметрНаработки КАК ПараметрНаработки,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.Состояние КАК Состояние,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.Ответственный КАК Ответственный,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.Подразделение КАК Подразделение,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.Организация КАК Организация,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.ВидДефекта КАК ТиповойДефект,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.ПричинаПростоя КАК ПричинаПростоя,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.ПоказательKPI КАК ПоказательКПИ,
	               |	торо_СоответствияТеговАСУТПОбъектамТОИР.РаспространятьНаработкуНаПодчиненных КАК РаспространятьНаработкуНаПодчиненных,
				   |	торо_СоответствияТеговАСУТПОбъектамТОИР.РаспространятьСостояниеНаПодчиненных КАК РаспространятьСостояниеНаПодчиненных
	               |ПОМЕСТИТЬ ИсхДанные
	               |ИЗ
	               |	табАСУТП КАК торо_ДанныеАСУТП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствияТеговАСУТПОбъектамТОИР КАК торо_СоответствияТеговАСУТПОбъектамТОИР
	               |		ПО торо_ДанныеАСУТП.Подключение = торо_СоответствияТеговАСУТПОбъектамТОИР.Подключение
	               |			И торо_ДанныеАСУТП.Тег = торо_СоответствияТеговАСУТПОбъектамТОИР.Тег
	               |			И торо_ДанныеАСУТП.НаименованиеОР = торо_СоответствияТеговАСУТПОбъектамТОИР.НаименованиеОР
	               |			И (торо_СоответствияТеговАСУТПОбъектамТОИР.Отключить = ЛОЖЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсхДанные.Тег КАК Тег,
	               |	ИсхДанные.НаименованиеОР КАК НаименованиеОР,
	               |	ИсхДанные.Дата КАК Дата,
	               |	ИсхДанные.МеткаВремени КАК МеткаВремени,
	               |	ИсхДанные.Значение КАК Значение,
	               |	ИсхДанные.ОР КАК ОР,
	               |	ИсхДанные.ТипСигнала КАК ТипСигнала,
	               |	ИсхДанные.Показатель КАК Показатель,
	               |	ИсхДанные.ПараметрНаработки КАК ПараметрНаработки,
	               |	ИсхДанные.Состояние КАК Состояние,
	               |	ИсхДанные.Ответственный КАК Ответственный,
	               |	ИсхДанные.Подразделение КАК Подразделение,
	               |	ИсхДанные.Организация КАК Организация,
	               |	ИсхДанные.ПричинаПростоя КАК ПричинаПростоя,
	               |	ИсхДанные.ПоказательКПИ КАК ПоказательКПИ,
				   |	ИсхДанные.РаспространятьНаработкуНаПодчиненных КАК РаспространятьНаработкуНаПодчиненных,
				   |	ИсхДанные.РаспространятьСостояниеНаПодчиненных КАК РаспространятьСостояниеНаПодчиненных,
	               |	ИсхДанные.ИДСеанса КАК ИДСеанса,
	               |	ИсхДанные.ИДЗаписи КАК ИДЗаписи,
	               |	ИсхДанные.Подключение КАК Подключение,
	               |	ВЫБОР
	               |		КОГДА ИсхДанные.ОР ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Ошибка,
	               |	ИСТИНА КАК Обработан,
	               |	ИсхДанные.ТиповойДефект КАК ТиповойДефект,
	               |	торо_ТиповыеДефектыОборудования.ВидДефекта КАК ВидДефекта,
	               |	торо_ТиповыеДефектыОборудования.КритичностьДефекта КАК КритичностьДефекта,
	               |	торо_ТиповыеДефектыОборудования.ОписаниеДефекта КАК ДефектОписание,
	               |	торо_ТиповыеДефектыОборудования.ПоследствиеДефекта КАК ПоследствияДефекта,
	               |	торо_ТиповыеДефектыОборудования.НаправлениеНаУстранение КАК НаправлениеНаУстранение,
	               |	торо_ТиповыеДефектыОборудования.ПричиныВозникновенияДефекта.(
	               |		НомерСтроки КАК НомерСтроки,
	               |		Причина КАК Причина
	               |	) КАК ПричиныВозникновенияДефекта
	               |ИЗ
	               |	ИсхДанные КАК ИсхДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеДефектыОборудования КАК торо_ТиповыеДефектыОборудования
	               |		ПО ИсхДанные.ТиповойДефект = торо_ТиповыеДефектыОборудования.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ДанныеАСУТП.Тег КАК Тег,
	               |	торо_ДанныеАСУТП.НаименованиеОР КАК НаименованиеОР,
	               |	торо_ДанныеАСУТП.Дата КАК Дата,
	               |	торо_ДанныеАСУТП.МеткаВремени КАК МеткаВремени,
	               |	торо_ДанныеАСУТП.Значение КАК Значение,
	               |	торо_ДанныеАСУТП.ИДСеанса КАК ИДСеанса,
	               |	торо_ДанныеАСУТП.ИДЗаписи КАК ИДЗаписи,
	               |	торо_ДанныеАСУТП.Подключение КАК Подключение
	               |ИЗ
	               |	РегистрСведений.торо_ДанныеАСУТП КАК торо_ДанныеАСУТП
	               |ГДЕ
	               |	торо_ДанныеАСУТП.ИДСеанса = &ИДСеанса
	               |	И торо_ДанныеАСУТП.Ошибка = ИСТИНА";
	
	Запрос.УстановитьПараметр("ИДСеанса", ИДСеанса);
	
	резЗапроса = Запрос.ВыполнитьПакет();
	ИсхДанные = резЗапроса[2];
	списокОшибок = резЗапроса[3].Выгрузить();
	
	масСозданныхДокументов = Новый Массив;
	сооДокументыИИсхДанные = Новый Соответствие;
	сооОбработчики = торо_ОбработкаДанныхАСУТППереопределяемый.ПолучитьСписокПереопределяемыхФункцийОбработчиков();
		
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		Если НЕ ИсхДанные.Пустой() Тогда
			ВыборкаТЗ = ИсхДанные.Выгрузить();
			Для каждого Выборка из ВыборкаТЗ Цикл
				
				Если Выборка.ТипСигнала = Перечисления.торо_ТипыСигналовАСУТП.Наработка Тогда
					Если СоздаватьДокументыНаработки Тогда
						Если сооОбработчики[Перечисления.торо_ТипыСигналовАСУТП.Наработка] = Ложь Тогда
							ОбработатьСигналНаработка(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия);
						Иначе
							торо_ОбработкаДанныхАСУТППереопределяемый.Наработка(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.ТипСигнала = Перечисления.торо_ТипыСигналовАСУТП.Показатель Тогда
					Если СоздаватьДокументыКонтролируемыхПоказателей Тогда
						Если сооОбработчики[Перечисления.торо_ТипыСигналовАСУТП.Показатель] = Ложь Тогда
							ОбработатьСигналПоказатель(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, РемонтыПоСостоянию И СоздаватьДефекты);
						Иначе
							торо_ОбработкаДанныхАСУТППереопределяемый.Показатель(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.ТипСигнала = Перечисления.торо_ТипыСигналовАСУТП.Состояние Тогда
					Если СоздаватьДокументыСостоянияОР Тогда
						Если сооОбработчики[Перечисления.торо_ТипыСигналовАСУТП.Состояние] = Ложь Тогда
							ОбработатьСигналСостояние(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия);
						Иначе
							торо_ОбработкаДанныхАСУТППереопределяемый.СостояниеОР(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.ТипСигнала = Перечисления.торо_ТипыСигналовАСУТП.Дефект Тогда
					Если СоздаватьДефекты Тогда
						Если сооОбработчики[Перечисления.торо_ТипыСигналовАСУТП.Дефект] = Ложь Тогда
							ОбработатьСигналДефект(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные);
						Иначе
							торо_ОбработкаДанныхАСУТППереопределяемый.Дефект(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.ТипСигнала = Перечисления.торо_ТипыСигналовАСУТП.KPI Тогда
					Если СоздаватьДокументыКПИ Тогда
						Если сооОбработчики[Перечисления.торо_ТипыСигналовАСУТП.KPI] = Ложь Тогда
							ОбработатьСигналKPI(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные);
						Иначе
							торо_ОбработкаДанныхАСУТППереопределяемый.KPI(Выборка, масСозданныхДокументов, сооДокументыИИсхДанные, ОсновнаяИерархия);
						КонецЕсли;
					КонецЕсли;
				Иначе 
					ВызватьИсключение НСтр("ru='Не распознан тип сигнала.'");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ОшибкаТранзакции = Истина;
		ОтменитьТранзакцию();
		ЗарегистрироватьОшибкуИнтеграции(Выборка, 
			Перечисления.торо_ОшибкиАСУТП.ГенерацияИЗаписьНовыхДокументов,
			ОписаниеОшибки());
	КонецПопытки;	
	
	Если ОшибкаТранзакции Тогда
		мз = РегистрыСведений.торо_ДанныеАСУТП.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(мз, Выборка);
		мз.Ошибка = Истина;
		мз.Записать();
		
		ОбработатьПоСеансу(ИДСеанса, НомерПопытки+1);
	Иначе
		нз = РегистрыСведений.торо_ДанныеАСУТП.СоздатьНаборЗаписей();
		нз.Отбор.ИДСеанса.установить(ИДСеанса);
		
		Если УдалятьОбработанныеЗаписи = Истина Тогда 
			нз.Загрузить(списокОшибок);
		Иначе
			нз.Прочитать();
			Для каждого текЗапись из нз цикл
				текЗапись.Обработан = Истина;
			КонецЦикла;
		КонецЕсли;
		нз.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Для каждого текДок из масСозданныхДокументов цикл
			попытка
				докОб = текДок.ПолучитьОбъект();
				докОб.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение,,,ОписаниеОшибки);
				ЗарегистрироватьОшибкуИнтеграции(сооДокументыИИсхДанные[текДок], Перечисления.торо_ОшибкиАСУТП.ПроведениеНовыхДокументов, ОписаниеОшибки, текДок);
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибкуИнтеграции(ТекИсточник, Этап, ОписаниеОшибки, СсылкаДок = Неопределено)
	
	ТекстОшибки = "";
	Если Этап = Перечисления.торо_ОшибкиАСУТП.ЧтениеДанныхИзРегистра Тогда
		мз = РегистрыСведений.торо_СобытияИнтеграцииСАСУТП.СоздатьМенеджерЗаписи();
		мз.Подключение = ТекИсточник.Подключение;
		мз.Дата = ТекущаяДата();
		мз.ИДСеанса = ТекИсточник.ИДСеанса;
		мз.ТипОшибки = Этап;
		мз.ТипСобытия = Перечисления.торо_СобытияИнтеграции.Ошибка;
		ТекстОшибки = "ОписаниеОшибки: " + ОписаниеОшибки;
		мз.Ошибка = ТекстОшибки;
		мз.Записать();
	ИначеЕсли Этап = Перечисления.торо_ОшибкиАСУТП.ГенерацияИЗаписьНовыхДокументов Тогда
		мз = РегистрыСведений.торо_СобытияИнтеграцииСАСУТП.СоздатьМенеджерЗаписи();
		мз.Подключение = ТекИсточник.Подключение;
		мз.Дата = ТекущаяДата();
		мз.ИДСеанса = ТекИсточник.ИДСеанса;
		мз.ИДЗаписи = ТекИсточник.ИДЗаписи;
		мз.ТипОшибки = Этап;
		мз.ТипСобытия = Перечисления.торо_СобытияИнтеграции.Ошибка;
		ТекстОшибки = "Тег: " + ТекИсточник.Тег + Символы.ПС
			+ "НаименованиеОР: " + ТекИсточник.НаименованиеОР + Символы.ПС
			+ "Дата: " + ТекИсточник.Дата + Символы.ПС
			+ "МеткаВремени: " + ТекИсточник.МеткаВремени + Символы.ПС
			+ "Значение: " + ТекИсточник.Значение + Символы.ПС
			+ "Ошибка: " + ТекИсточник.Ошибка + Символы.ПС
			+ "ОР: " + ТекИсточник.ОР + Символы.ПС
			+ "ТипСигнала: " + ТекИсточник.ТипСигнала + Символы.ПС
			+ "Показатель: " + ТекИсточник.Показатель + Символы.ПС
			+ "ПараметрНаработки: " + ТекИсточник.ПараметрНаработки + Символы.ПС
			+ "Состояние: " + ТекИсточник.Состояние + Символы.ПС
			+ "Ответственный: " + ТекИсточник.Ответственный + Символы.ПС
			+ "Подразделение: " + ТекИсточник.Подразделение + Символы.ПС
			+ "Организация: " + ТекИсточник.Организация + Символы.ПС
			+ "ВидДефекта: " + ТекИсточник.ВидДефекта + Символы.ПС
			+ "ПричинаПростоя: " + ТекИсточник.ПричинаПростоя + Символы.ПС
			+ "ОписаниеОшибки: " + ОписаниеОшибки;
		мз.Ошибка = ТекстОшибки;
		мз.Записать();
		
	ИначеЕсли Этап = Перечисления.торо_ОшибкиАСУТП.ПроведениеНовыхДокументов Тогда
		мз = РегистрыСведений.торо_СобытияИнтеграцииСАСУТП.СоздатьМенеджерЗаписи();
		мз.Подключение = ТекИсточник.Подключение;
		мз.Дата = ТекущаяДата();
		мз.ИДСеанса = ТекИсточник.ИДСеанса;
		мз.ИДЗаписи = ТекИсточник.ИДЗаписи;
		мз.ТипОшибки = Этап;
		мз.ТипСобытия = Перечисления.торо_СобытияИнтеграции.Ошибка;
		мз.СозданныйДокумент = СсылкаДок;
		
		ТекстОшибки = "Документ: " + СсылкаДок + Символы.ПС
			+ "Тег: " + ТекИсточник.Тег + Символы.ПС
			+ "НаименованиеОР: " + ТекИсточник.НаименованиеОР + Символы.ПС
			+ "Дата: " + ТекИсточник.Дата + Символы.ПС
			+ "МеткаВремени: " + ТекИсточник.МеткаВремени + Символы.ПС
			+ "Значение: " + ТекИсточник.Значение + Символы.ПС
			+ "Ошибка: " + ТекИсточник.Ошибка + Символы.ПС
			+ "ОР: " + ТекИсточник.ОР + Символы.ПС
			+ "ТипСигнала: " + ТекИсточник.ТипСигнала + Символы.ПС
			+ "Показатель: " + ТекИсточник.Показатель + Символы.ПС
			+ "ПараметрНаработки: " + ТекИсточник.ПараметрНаработки + Символы.ПС
			+ "Состояние: " + ТекИсточник.Состояние + Символы.ПС
			+ "Ответственный: " + ТекИсточник.Ответственный + Символы.ПС
			+ "Подразделение: " + ТекИсточник.Подразделение + Символы.ПС
			+ "Организация: " + ТекИсточник.Организация + Символы.ПС
			+ "ВидДефекта: " + ТекИсточник.ВидДефекта + Символы.ПС
			+ "ПричинаПростоя: " + ТекИсточник.ПричинаПростоя + Символы.ПС
			+ "ОписаниеОшибки: " + ОписаниеОшибки;
		мз.Ошибка = ТекстОшибки;
		мз.Записать();
	Иначе 
		мз = РегистрыСведений.торо_СобытияИнтеграцииСАСУТП.СоздатьМенеджерЗаписи();
		мз.Подключение = ТекИсточник.Подключение;
		мз.Дата = ТекущаяДата();
		мз.ИДСеанса = ТекИсточник.ИДСеанса;
		мз.ТипОшибки = Этап;
		мз.ТипСобытия = Перечисления.торо_СобытияИнтеграции.Ошибка;
		ТекстОшибки = "Неопознанный этап интеграции: " + Этап;
		мз.Ошибка = ТекстОшибки;
		мз.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьНаработкуСПодчиненнымиДляТекущейСтроки(Объект, ТекущаяСтрокаНаработкиОбъектов, ТаблицаИерархииОР, Отказ = Ложь)
	ТаблицаПодчиненныхОР = торо_РаботаСНаработкой.ПолучитьЗависимыеОР(ТаблицаИерархииОР, ТекущаяСтрокаНаработкиОбъектов.Объект, Неопределено, ТекущаяСтрокаНаработкиОбъектов.ДатаРаботыС, ТекущаяСтрокаНаработкиОбъектов.ДатаРаботыПо, ТекущаяСтрокаНаработкиОбъектов.Показатель);
	
	Для каждого СтрокаСНаработкой Из Объект.НаработкаОбъектов Цикл
		СтруктураПоиска = Новый Структура("ОбъектИерархии, Показатель", СтрокаСНаработкой.Объект, СтрокаСНаработкой.Показатель);
		Если ТаблицаПодчиненныхОР.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			Продолжить;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
	    Возврат;
	КонецЕсли;
	
	ТаблицаЗначенийНаработки = торо_РаботаСНаработкой.ТекущееЗначениеНаработкиТаблица(ТаблицаПодчиненныхОР, Объект.Ссылка);
	
	НеобходимаСинхронизация = Ложь;
	
	Для каждого СтрокаПодчиненнаяНаработка Из ТаблицаЗначенийНаработки Цикл
		Если СтрокаПодчиненнаяНаработка.НаработаноДата <> СтрокаПодчиненнаяНаработка.ДатаНачала Тогда
			НеобходимаСинхронизация = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НеобходимаСинхронизация Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтрокиНаработки = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, СтруктураИерархии");
	ЗаполнитьЗначенияСвойств(СтруктураСтрокиНаработки, ТекущаяСтрокаНаработкиОбъектов);
	
	МассивСтрокНаработкиДляСинхронизации = Новый Массив;
	МассивСтрокНаработкиДляСинхронизации.Добавить(СтруктураСтрокиНаработки);
	
	СтруктураДанных = торо_РаботаСНаработкой.ПолучитьСтруктуруДанныхДокументаСинхронизации(МассивСтрокНаработкиДляСинхронизации, Объект.Ссылка);
	
	НовыйДокумент = Документы.торо_УстановкаПроизвольногоЗначенияНаработки.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Подразделение = Объект.Подразделение;
	НовыйДокумент.Организация = Объект.Организация;
	НовыйДокумент.Ответственный = Объект.Ответственный;
	НовыйДокумент.ДокументОснование = Объект.Ссылка;
	
	Для каждого СтрокаНаработки Из СтруктураДанных.МассивНаработки Цикл
		НоваяСтрока = НовыйДокумент.НаработкаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаработки);
	КонецЦикла;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

Процедура РаспространитьНаработкуНаПодчиненныхДляТекущейСтроки(Объект, ТекущаяСтрокаНаработкиОбъектов, ТаблицаИерархииОР, Отказ = Ложь)
	ТаблицаПодчиненныхОР = торо_РаботаСНаработкой.ПолучитьЗависимыеОР(ТаблицаИерархииОР, ТекущаяСтрокаНаработкиОбъектов.Объект, Неопределено, ТекущаяСтрокаНаработкиОбъектов.ДатаРаботыС, ТекущаяСтрокаНаработкиОбъектов.ДатаРаботыПо, ТекущаяСтрокаНаработкиОбъектов.Показатель);
	ТаблицаЗначенийНаработки = торо_РаботаСНаработкой.ТекущееЗначениеНаработкиТаблица(ТаблицаПодчиненныхОР, Объект.Ссылка);
	
	СтруктураДляПередачи = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, Наработка");
	ЗаполнитьЗначенияСвойств(СтруктураДляПередачи, ТекущаяСтрокаНаработкиОбъектов);
	торо_РаботаСНаработкой.РаспространитьНаработкуНаПодчиненныхДляТекСтроки(СтруктураДляПередачи, ТаблицаЗначенийНаработки, ТаблицаПодчиненныхОР, Объект);
	
	Если Отказ Тогда
		ТекущаяСтрокаНаработкиОбъектов.РаспространятьНаПодчиненных = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
