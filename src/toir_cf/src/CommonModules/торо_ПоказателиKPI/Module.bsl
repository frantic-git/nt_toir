
#Область ПрограммныйИнтерфейс

// Возвращает свойства типов анализа - доступные типы диаграмм, 
// доступность объекта анализа, требуется ли оформление типа анализа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками ТипАнализа, ТипДиаграммы.
Функция ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм() Экспорт
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("ТипАнализа");
	ТаблицаСоответствий.Колонки.Добавить("ТипДиаграммы");
	
	ТипыСравнений = Перечисления.торо_ТипыАнализа;
	ТипыДиаграмм = Перечисления.торо_ТипыДиаграммПоказателей;
	
	// Динамика изменений
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.График;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикПоШагам;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	
	// Покомпонентное сравнение (динамика)
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.График;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСНакоплением;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластями;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластямиИНакоплением;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластямиНормированный;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикПоШагам;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяОбъемная;

	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплением;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемОбъемная;
	
	// Покомпонентное сравнение (структура)
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяОбъемная;

	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплением;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальнаяОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальнаяОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Круговая;
	
	// Текущее состояние
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ИзмерениеТекущегоСостояния;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Измерительная;
	
	// Сравнение с прошлым периодом
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Выделяет доступные аналитики и ресурсы из показателей
// Параметры:
//  Показатель - СправочникСсылка.торо_ПоказателиKPI - показатель KPI.
//  ДоступныеЗначенияАнализа - СписокЗначений - выходной параметр, список доступных значений анализа.
//  ДоступныеОбъектыАнализа - СписокЗначений - выходной параметр, список доступных объектов анализа.
Процедура ЗаполнитьДоступныеЗначенияИОбъектыАнализа(Показатель, ДоступныеЗначенияАнализа, ДоступныеОбъектыАнализа)  Экспорт
	
	Если Показатель.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.ВнешнийПоказатель Тогда
		ДобавитьЗначениеВСписокБезДублей(ДоступныеОбъектыАнализа, "Организация", "Организация");
		Если Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения 
			ИЛИ Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
			ДобавитьЗначениеВСписокБезДублей(ДоступныеОбъектыАнализа, "Подразделение", "Подразделение");
		КонецЕсли;
		
		Если Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
			ДобавитьЗначениеВСписокБезДублей(ДоступныеОбъектыАнализа, "ОбъектРемонта", "ОбъектРемонта");
		КонецЕсли;
		
		ДобавитьЗначениеВСписокБезДублей(ДоступныеЗначенияАнализа, "ЗначениеОборот", "ЗначениеОборот");
		ДобавитьЗначениеВСписокБезДублей(ДоступныеЗначенияАнализа, "ЗначениеКонечныйОстаток", "ЗначениеКонечныйОстаток");
		
	ИначеЕсли Показатель.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
		
		СКД = Показатель.СхемаКомпоновкиДанных.Получить();
		Если ТипЗнч(СКД) = Тип("СхемаКомпоновкиДанных") Тогда
			КоллекцияВыбранныхПолей = СКД.ВариантыНастроек.Основной.Настройки.Выбор.Элементы;
			Для каждого ВыбранноеПоле из КоллекцияВыбранныхПолей Цикл
				ИмяПоля = Строка(ВыбранноеПоле.Поле);
				ПолеИтога = СКД.ПоляИтога.Найти(ИмяПоля);
				Если ПолеИтога <> Неопределено Тогда
					ДобавитьЗначениеВСписокБезДублей(ДоступныеЗначенияАнализа, ИмяПоля, ИмяПоля);
				Иначе
					ДобавитьЗначениеВСписокБезДублей(ДоступныеОбъектыАнализа, ИмяПоля, ИмяПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Показатель.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.Формула Тогда
		
		ДобавитьЗначениеВСписокБезДублей(ДоступныеЗначенияАнализа, "Значение", "Значение");
		
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет таблицу значений операндами из формулы.
//
// Параметры:
//  ПоказательРодитель - СправочникСсылка.торо_ПоказателиKPI - показатель, к которму относится формула.
//  ТекстФормулы - Строка - текст формулы.
//  Рекурсивно - Булево - разбирать вложенные формулы.
//  Уровень - Число - текущий уровень рекурсии.
//  ТаблицаОперандов - ТаблицаЗначений
//   - ПоказательРодитель - СправочникСсылка.торо_ПоказателиKPI, показатель, формула которого разбирается.
//   - Уровень - 1 для операнда из переданного текста формулы; 2,3 и т.д. для операндов, 
//		полученных из вложенных формул при рекурсивной обработке.
//	  - ТекстОперанда - строка, представление операнда, включая квадратные скобки (Например, "[НаработкаОР.ЗначениеОборот]");
//   - ИмяПоказателя - строка, значение реквизита ИдентификаторДляФормул, выделенное из операнда ("НаработкаОР");
//   - ИмяРесурса - строка, значение ресурса, выделенное из операнда, если оно есть ("ЗначениеОборот");
//   - Показатель - СправочникСсылка.торо_ПоказателиKPI, элемент, найденный по значению ИмяПоказателя.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - с колонками
//   - ПоказательРодитель - СправочникСсылка.торо_ПоказателиKPI, показатель, формула которого разбирается.
//   - Уровень - 1 для операнда из переданного текста формулы; 2,3 и т.д. для операндов, 
//		полученных из вложенных формул при рекурсивной обработке.
//	  - ТекстОперанда - строка, представление операнда, включая квадратные скобки (Например, "[НаработкаОР.ЗначениеОборот]");
//   - ИмяПоказателя - строка, значение реквизита ИдентификаторДляФормул, выделенное из операнда ("НаработкаОР");
//   - ИмяРесурса - строка, значение ресурса, выделенное из операнда, если оно есть ("ЗначениеОборот");
//   - Показатель - СправочникСсылка.торо_ПоказателиKPI, элемент, найденный по значению ИмяПоказателя.
//
Функция ПолучитьТаблицуОперандовФормулы(ПоказательРодитель, Знач ТекстФормулы, Рекурсивно = Ложь, Уровень = 1, ТаблицаОперандов = Неопределено) Экспорт
	
	Если ТаблицаОперандов = Неопределено Тогда
		ТаблицаОперандов = Новый ТаблицаЗначений;
		ТаблицаОперандов.Колонки.Добавить("ПоказательРодитель", Новый ОписаниеТипов("СправочникСсылка.торо_ПоказателиKPI"));
		ТаблицаОперандов.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		ТаблицаОперандов.Колонки.Добавить("ТекстОперанда", Новый ОписаниеТипов("Строка"));
		ТаблицаОперандов.Колонки.Добавить("ИмяПоказателя", Новый ОписаниеТипов("Строка"));
		ТаблицаОперандов.Колонки.Добавить("ИмяРесурса", Новый ОписаниеТипов("Строка"));
		ТаблицаОперандов.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.торо_ПоказателиKPI"));
	КонецЕсли;
	
	НачальнаяПозицияПоиска = 1;
	Пока НачальнаяПозицияПоиска < СтрДлина(ТекстФормулы) Цикл
		ПозицияОткрывающейСкобки = СтрНайти(ТекстФормулы, "[", НаправлениеПоиска.СНачала, НачальнаяПозицияПоиска);
		Если ПозицияОткрывающейСкобки = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияЗакрывающейСкобки = СтрНайти(ТекстФормулы, "]", НаправлениеПоиска.СНачала, ПозицияОткрывающейСкобки);
		Если ПозицияЗакрывающейСкобки = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НачальнаяПозицияПоиска = ПозицияЗакрывающейСкобки + 1;
				
		ТекстОперанда = Сред(ТекстФормулы, ПозицияОткрывающейСкобки, ПозицияЗакрывающейСкобки-ПозицияОткрывающейСкобки+1);
		ТекстОперандаБезСкобок = Сред(ТекстФормулы, ПозицияОткрывающейСкобки+1, ПозицияЗакрывающейСкобки-ПозицияОткрывающейСкобки-1);
		
		Если СтрДлина(ТекстОперандаБезСкобок) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияТочки = СтрНайти(ТекстОперандаБезСкобок, ".");
		Если ПозицияТочки = 0 Тогда
			ИмяПоказателя = ТекстОперандаБезСкобок;
			ИмяРесурса = "";
		Иначе
			ИмяПоказателя = Лев(ТекстОперандаБезСкобок, ПозицияТочки-1);
			ИмяРесурса = Сред(ТекстОперандаБезСкобок, ПозицияТочки+1, СтрДлина(ТекстОперандаБезСкобок)-ПозицияТочки);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОперандов.Добавить();
		НоваяСтрока.ПоказательРодитель = ПоказательРодитель;
		НоваяСтрока.Уровень = Уровень;
		НоваяСтрока.ТекстОперанда = ТекстОперанда;
		НоваяСтрока.ИмяПоказателя = ИмяПоказателя;
		НоваяСтрока.ИмяРесурса = ИмяРесурса;
		НоваяСтрока.Показатель = ПолучитьПоказательПоИдентификаторуДляФормул(ИмяПоказателя);
		
		Если Рекурсивно И ЗначениеЗаполнено(НоваяСтрока.Показатель) 
			И НоваяСтрока.Показатель.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.Формула Тогда
			ПолучитьТаблицуОперандовФормулы(НоваяСтрока.Показатель, НоваяСтрока.Показатель.ТекстФормулы, Рекурсивно, Уровень+1, ТаблицаОперандов);
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаОперандов;
	
КонецФункции

// Устанавливает параметры, которые передавались в отчет-расшифровку (актуально для универсального отчета).
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - отчет.
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
//  НовыеПользовательскиеНастройкиКД - НастройкиКомпоновкиДанных - настройки отчета.
//
Процедура ОтчетРасшифровка_ПриЗагрузкеПользовательскихНастроекНаСервере(ОтчетОбъект, Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если Строка(ОтчетОбъект) = "ОтчетОбъект.УниверсальныйОтчет" Тогда
		
		НастройкиОтчета = Форма.НастройкиОтчета;
		НастройкиКомпоновщика = Форма.Отчет.КомпоновщикНастроек.Настройки;
		
		Если НастройкиОтчета.Свойство("ПараметрыОтчета") Тогда
			Для каждого Элемент из НовыеПользовательскиеНастройкиКД.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если НастройкиОтчета.ПараметрыОтчета.Свойство(ИмяПараметра) Тогда
						Значение = НастройкиОтчета.ПараметрыОтчета[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если НастройкиОтчета.ПараметрыОтчета.Свойство(ИмяПараметра) Тогда
						Значение = НастройкиОтчета.ПараметрыОтчета[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			Если НастройкиОтчета.ПараметрыОтчета.Свойство("ПараметрыОтбора") 
				И ТипЗнч(НастройкиОтчета.ПараметрыОтчета.ПараметрыОтбора) = Тип("Структура") Тогда
				ОтчетыСервер.УстановитьФиксированныеОтборы(НастройкиОтчета.ПараметрыОтчета.ПараметрыОтбора, НастройкиКомпоновщика, Форма.НастройкиОтчета);
			КонецЕсли;
			
		КонецЕсли;
		
		НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
		
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		Форма.НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
		
	Иначе
		
		НастройкиОтчета = Форма.НастройкиОтчета;
		НастройкиКомпоновщика = Форма.Отчет.КомпоновщикНастроек.Настройки;
		ПользовательскиеНастройкиКомпоновщика = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		Если НастройкиОтчета.Свойство("ПараметрыОтчета")
			И НастройкиОтчета.ПараметрыОтчета.Свойство("ПараметрыОтбора") Тогда
			ПараметрыОтбора = НастройкиОтчета.ПараметрыОтчета.ПараметрыОтбора;
			
			Для каждого Элемент из НовыеПользовательскиеНастройкиКД.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
						Значение = ПараметрыОтбора[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент из ПользовательскиеНастройкиКомпоновщика.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
						Значение = ПараметрыОтбора[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
						Значение = ПараметрыОтбора[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			торо_ПоказателиKPI.УстановитьФиксированныеОтборы(ПараметрыОтбора, НастройкиКомпоновщика, Форма.НастройкиОтчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры, которые передавались в отчет-расшифровку. 
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - отчет.
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных - настройки отчета.
//
Процедура ОтчетРасшифровка_ПриЗагрузкеВариантаНаСервере(ОтчетОбъект, Форма, НовыеНастройкиКД) Экспорт
	
	НастройкиОтчета = Форма.НастройкиОтчета;
	НастройкиКомпоновщика = Форма.Отчет.КомпоновщикНастроек.Настройки;
	НовыеПользовательскиеНастройкиКД = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Если НастройкиОтчета.Свойство("ПараметрыОтчета")
		И НастройкиОтчета.ПараметрыОтчета.Свойство("ПараметрыОтбора") Тогда
		ПараметрыОтбора = НастройкиОтчета.ПараметрыОтчета.ПараметрыОтбора;
		
		Для каждого Элемент из НовыеПользовательскиеНастройкиКД.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ИмяПараметра = Строка(Элемент.Параметр);
				Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
					Значение = ПараметрыОтбора[ИмяПараметра];
					
					Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
						Значение = Новый Массив(Значение);
					КонецЕсли;
					Если ТипЗнч(Значение) = Тип("Массив") Тогда
						Список = Новый СписокЗначений;
						Список.ЗагрузитьЗначения(Значение);
						Значение = Список;
					КонецЕсли;
					
					Элемент.Использование = Истина;
					Элемент.Значение = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Элемент из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ИмяПараметра = Строка(Элемент.Параметр);
				Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
					Значение = ПараметрыОтбора[ИмяПараметра];
					
					Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
						Значение = Новый Массив(Значение);
					КонецЕсли;
					Если ТипЗнч(Значение) = Тип("Массив") Тогда
						Список = Новый СписокЗначений;
						Список.ЗагрузитьЗначения(Значение);
						Значение = Список;
					КонецЕсли;
					
					Элемент.Использование = Истина;
					Элемент.Значение = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		торо_ПоказателиKPI.УстановитьФиксированныеОтборы(ПараметрыОтбора, НастройкиКомпоновщика, Форма.НастройкиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет справочники "Показатели KPI", "Варианты анализа показателей KPI"
// по заданному шаблону.
// Если ранее демонстрационные показатели уже были созданы, то восстанавливаются стандартные настройки.
// Процедура используется только при обновлении информационной базы, первом запуске
// и может быть вызвана из формы списка справочника "Показатели KPI".
//
Процедура ВосстановитьПоставляемуюМодельПоказателей() Экспорт
	
	КаталогВременныхФайлов = ФайловаяСистема.СоздатьВременныйКаталог("toir_kpitmp");
	
	// Извлечение файла модели
	АрхивПолноеИмя = КаталогВременныхФайлов + "KPIModelData.zip";
	Попытка
		ДвоичныеДанные = ПолучитьОбщийМакет("торо_ПоставляемаяМодельПоказателейKPI");
		ДвоичныеДанные.Записать(АрхивПолноеИмя);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Загрузка поставляемой модели показателей KPI'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(АрхивПолноеИмя);
	ЧтениеZipФайла.ИзвлечьВсе(КаталогВременныхФайлов, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	
	УдалитьФайлы(АрхивПолноеИмя);
	
	КореньПоставляемойМодели = ПолучитьКореньПоставляемойМоделиПоказателей();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогВременныхФайлов + "KPIModelData.xml");

	НачатьТранзакцию();
	ПоказательОбъект = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл  // ПоставляемаяМодельПоказателей
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
			Если ЛокальноеИмя = "Показатель" Тогда
				
				ПоказательОбъект = Неопределено;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.ЛокальноеИмя = "ИДПоставляемойМодели" Тогда
						ПоказательОбъект = ПолучитьСоздатьПоказательПоставляемойМодели(ЧтениеXML.Значение, КореньПоставляемойМодели);
					Иначе
						Если ПоказательОбъект = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЧтениеXML.ЛокальноеИмя = "Наименование" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "Описание"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ИдентификаторДляФормул"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "Отчет"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ТекстФормулы"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ИдентификаторВнешнегоПоказателя"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "Разделитель" Тогда
							ПоказательОбъект[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "РазделительКакЕдиницаИзмерения" Тогда
							ПоказательОбъект[ЧтениеXML.ЛокальноеИмя] = (ЧтениеXML.Значение = "1");
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ТипПоказателя" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ВариантЗаполнения"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ЦелевойТренд" Тогда	
							ПоказательОбъект[ЧтениеXML.ЛокальноеИмя] = ЗначениеИзСтрокиВнутр(ЧтениеXML.Значение);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЛокальноеИмя = "ВариантАнализа" Тогда
				
				ВариантОбъект = Неопределено;
				ИДВладельца = "";
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.ЛокальноеИмя = "ИДВладельца" Тогда
               	ИДВладельца = ЧтениеXML.Значение;
					ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ИДПоставляемойМодели" Тогда
						ВариантОбъект = ПолучитьСоздатьВариантАнализаПоставляемойМодели(ЧтениеXML.Значение, ИДВладельца, КореньПоставляемойМодели);
					Иначе
						Если ВариантОбъект = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЧтениеXML.ЛокальноеИмя = "Наименование" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ЗначениеАнализа"	Тогда
							ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ТипАнализа" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "АгрегацияДанных"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ВыбратьСортировку"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ВариантОтображенияПоУмолчанию"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ТипДиаграммы" Тогда	
							ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = ЗначениеИзСтрокиВнутр(ЧтениеXML.Значение);
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "КоличествоВыбираемыхЭлементов" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ОкруглениеДробнойЧасти"	Тогда
							Попытка
								ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = Число(ЧтениеXML.Значение);
							Исключение
								ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = 0;
							КонецПопытки;
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ВыполнитьНормализацию"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ОтображатьНулевыеЗначения" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ОтображатьЛегенду"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ОтображатьПодписи" Тогда
							ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = (ЧтениеXML.Значение = "1");
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЛокальноеИмя = "ЕдиницаИзмерения" Тогда
				
				СтруктураЕИ = Новый Структура; 
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					
					Если ЧтениеXML.ЛокальноеИмя = "Код" 
						ИЛИ ЧтениеXML.ЛокальноеИмя = "Наименование"
						ИЛИ ЧтениеXML.ЛокальноеИмя = "НаименованиеПолное"
						ИЛИ ЧтениеXML.ЛокальноеИмя = "МеждународноеСокращение" Тогда
						СтруктураЕИ.Вставить(ЧтениеXML.ЛокальноеИмя, ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ТипЕдиницыИзмерения" Тогда	
						СтруктураЕИ.Вставить(ЧтениеXML.ЛокальноеИмя, ЗначениеИзСтрокиВнутр(ЧтениеXML.Значение));
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПоказательОбъект <> Неопределено Тогда
					ПоказательОбъект["ЕдиницаИзмерения"] = НайтиСоздатьЕдиницуИзмерения(СтруктураЕИ);
				ИначеЕсли ВариантОбъект <> Неопределено Тогда
					ВариантОбъект["ЕдиницаИзмерения"] = НайтиСоздатьЕдиницуИзмерения(СтруктураЕИ);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ЛокальноеИмя = "СхемаКомпоновкиДанных" Тогда
				Если ПоказательОбъект = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ХранилищеСКД = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеXML.Значение);
				ДанныеСКД = ХранилищеСКД.Получить();
				ПоказательОбъект["СхемаКомпоновкиДанных"] = Новый ХранилищеЗначения(ДанныеСКД, Новый СжатиеДанных(9));
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
			
			Если ЛокальноеИмя = "Показатель" Тогда
				Если ПоказательОбъект <> Неопределено Тогда
					ПоказательОбъект.Записать();
					ПоказательОбъект = Неопределено;
				КонецЕсли;
			ИначеЕсли ЛокальноеИмя = "ВариантАнализа" Тогда
				Если ВариантОбъект <> Неопределено Тогда
					ВариантОбъект.Записать();
					ВариантОбъект = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ЧтениеXML.Закрыть();
	
	Константы.торо_ЗагруженнаяВерсияПоставляемойМодели.Установить(торо_ПоказателиKPI.АктуальнаяВерсияПоставляемойМодели());
	
КонецПроцедуры

// Формирует стандартный отчет-расшифровку для показателя KPI.
//
// Параметры:
//  Результат - ТабличныйДокумент - результат отчета.
//  Макет - ТабличныйДокумент - макет отчета.
//  СКД - СхемаКомпоновкиДанных - подготовленная СКД отчета.
//  ТабДанных - ТаблицаЗначений - таблица данных.
//  НастройкиКомпоновщика - НастройкиКомпоновкиДанных - настройки СКД.
//  ВариантАнализа - СправочникСсылка.торо_ВариантыАнализаПоказателейKPI - вариант анализа.
//  ПредставлениеПараметров - Строка - строковое представление параметров отчета.
//  Разделитель - Строка - разделитель данных.
//
Процедура СформироватьУниверсальныйОтчетРасшифровкуПоказателя(Результат, Макет, СКД, ТабДанных, НастройкиКомпоновщика, ВариантАнализа, ПредставлениеПараметров, Разделитель) Экспорт
	
	ПараметрыШапки = Новый Структура("Заголовок, ЗначениеПараметров", 
		СформироватьЗаголовокЭлемента(ВариантАнализа.Владелец, ВариантАнализа, Разделитель, "Монитор"), ПредставлениеПараметров);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
	Результат.Вывести(ОбластьШапка);
		
	Если ТипЗнч(СКД) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
			
	ВнешниеНаборыДанных = Новый Структура("ТабДанных", ТабДанных);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика,, БиблиотекаМакетовОформленияКомпоновкиДанных.Античный.ПолучитьМакет(), Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		
	ОбластьРезультатЗаголовок = Макет.ПолучитьОбласть("РезультатЗаголовок");
	Результат.Вывести(ОбластьРезультатЗаголовок);
	
	ПроцессорВыводаТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаТЗ.УстановитьДокумент(Результат);
	ПроцессорВыводаТЗ.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

// Функция сравнивает два элемента перечисления торо_ТипыПоказателейKPI. 
// Самый маленький - ПоказательОбъектаРемонта, самый большой - ПоказательОрганизации.
//
// Параметры:
//  Тип1 - ПеречислениеСсылка.торо_ТипыПоказателейKPI - тип для сравнения.
//  Тип2 - ПеречислениеСсылка.торо_ТипыПоказателейKPI - тип для сравнения.
//
// Возвращаемое значение: 
// 	Число -  1, если Тип1 > Тип2;
// 	         0, если Тип1 = Тип2;
// 	         -1, если Тип1 < Тип2;
//
Функция СравнитьТипыПоказателей(Тип1, Тип2) Экспорт
	
	Если Тип1 = Тип2 Тогда
		Возврат 0;
	ИначеЕсли Тип1 = Перечисления.торо_ТипыПоказателейKPI.ПоказательОрганизации Тогда
		Возврат 1;
	ИначеЕсли Тип2 = Перечисления.торо_ТипыПоказателейKPI.ПоказательОрганизации Тогда
		Возврат -1;
	ИначеЕсли  Тип1 = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		// Выше уже проверили, Тип2 - не организация и Тип2 <> Тип1. Значит Тип2 = объекты ремонта.
		Возврат 1;
	ИначеЕсли  Тип2 = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		Возврат -1;
	ИначеЕсли  Тип1 = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		Возврат 1;
	Иначе
		Возврат -1;
	КонецЕсли;
	
КонецФункции

// Процедура выгрузки поставляемой модели показателей KPI в архив для последующей вставки в конфигурацию.
// Только для использования разработчиками. Вызывается с помощью внешней обработки.
//
// Параметры:
//		ПутьКФайлу - Строка - путь к папке, в которую будет сохранен архив.
//		ПапкаДляВыгрузки - СправочникСсылка.торо_ПоказателиKPI - группа справочника торо_ПоказателиKPI, 
//							из которой будут выгружены элементы.
Процедура ВыгрузитьПоставляемуюМодельПоказателей(ПутьКФайлу, ПапкаДляВыгрузки) Экспорт
	
	Если Не СтрЗаканчиваетсяНа(ПутьКФайлу, "\") Тогда
		ПутьКФайлу = ПутьКФайлу + "\";
	КонецЕсли;
	ПутьКФайлуXML = ПутьКФайлу + "KPIModelData.xml";
	ПутьКФайлуЗип = ПутьКФайлу + "KPIModelData.zip";

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлуXML);
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Макет = ПолучитьОбщийМакет("торо_СоответствиеНаименованийИИдентификаторовПоставляемыхПоказателейKPI");
	ОбластьПоказатели = Макет.Область("Показатели");
	ОбластьВариантыАнализа = Макет.Область("ВариантыАнализа");
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьПоказатели);
	ПостроительЗапроса.Выполнить();
	ТаблицаИдПоказателей = ПостроительЗапроса.Результат.Выгрузить();
	
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьВариантыАнализа);
	ПостроительЗапроса.Выполнить();
	ТаблицаИдВариантов = ПостроительЗапроса.Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка,
	|	торо_ПоказателиKPI.Наименование,
	|	торо_ПоказателиKPI.ЕдиницаИзмерения,
	|	торо_ПоказателиKPI.ТипПоказателя,
	|	торо_ПоказателиKPI.Описание,
	|	торо_ПоказателиKPI.ИдентификаторДляФормул,
	|	торо_ПоказателиKPI.Отчет,
	|	торо_ПоказателиKPI.ВариантЗаполнения,
	|	торо_ПоказателиKPI.ТекстФормулы,
	|	торо_ПоказателиKPI.СхемаКомпоновкиДанных,
	|	торо_ПоказателиKPI.ИдентификаторВнешнегоПоказателя,
	|	торо_ПоказателиKPI.Разделитель,
	|	торо_ПоказателиKPI.РазделительКакЕдиницаИзмерения,
	|	торо_ПоказателиKPI.ЦелевойТренд
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.Родитель = &Родитель
	|	И НЕ торо_ПоказателиKPI.ПометкаУдаления
	|	И НЕ торо_ПоказателиKPI.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Ссылка,
	|	ВТ_Показатели.Наименование,
	|	ВТ_Показатели.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Показатели.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВТ_Показатели.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ВТ_Показатели.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВТ_Показатели.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	ВТ_Показатели.ЕдиницаИзмерения.ТипЕдиницыИзмерения КАК ЕдиницаИзмеренияТипЕдиницыИзмерения,
	|	ВТ_Показатели.ТипПоказателя,
	|	ВТ_Показатели.Описание,
	|	ВТ_Показатели.ИдентификаторДляФормул,
	|	ВТ_Показатели.Отчет,
	|	ВТ_Показатели.ВариантЗаполнения,
	|	ВТ_Показатели.ТекстФормулы,
	|	ВТ_Показатели.СхемаКомпоновкиДанных,
	|	ВТ_Показатели.ИдентификаторВнешнегоПоказателя,
	|	ВТ_Показатели.Разделитель,
	|	ВТ_Показатели.РазделительКакЕдиницаИзмерения,
	|	ВТ_Показатели.ЦелевойТренд
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели";
	
	Запрос.УстановитьПараметр("Родитель", ПапкаДляВыгрузки);
	
	ВыборкаПоказателей = Запрос.Выполнить().Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПоставляемаяМодель");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Показатели");
	Пока ВыборкаПоказателей.Следующий() Цикл
		СтрокаИД = ТаблицаИдПоказателей.Найти(ВыборкаПоказателей.Наименование, "Наименование"); 
		Если СтрокаИД = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не найден ИД показателя с наименованием ""'") + ВыборкаПоказателей.Наименование + """";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаПоказателей.Ссылка);
			Продолжить;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Показатель");
		ЗаписьXML.ЗаписатьАтрибут("ИДПоставляемойМодели", СтрокаИД.ИД);
		ЗаписьXML.ЗаписатьАтрибут("Наименование", ВыборкаПоказателей.Наименование);
		ЗаписьXML.ЗаписатьАтрибут("ТипПоказателя", ЗначениеВСтрокуВнутр(ВыборкаПоказателей.ТипПоказателя));
		ЗаписьXML.ЗаписатьАтрибут("ТипПоказателя_Представление", Строка(ВыборкаПоказателей.ТипПоказателя));
		ЗаписьXML.ЗаписатьАтрибут("Описание", ВыборкаПоказателей.Описание);
		ЗаписьXML.ЗаписатьАтрибут("ИдентификаторДляФормул", ВыборкаПоказателей.ИдентификаторДляФормул);
		ЗаписьXML.ЗаписатьАтрибут("Отчет", ВыборкаПоказателей.Отчет);
		ЗаписьXML.ЗаписатьАтрибут("ВариантЗаполнения", ЗначениеВСтрокуВнутр(ВыборкаПоказателей.ВариантЗаполнения));
		ЗаписьXML.ЗаписатьАтрибут("ВариантЗаполнения_Представление", Строка(ВыборкаПоказателей.ВариантЗаполнения));
		ЗаписьXML.ЗаписатьАтрибут("ТекстФормулы", ВыборкаПоказателей.ТекстФормулы);
		ЗаписьXML.ЗаписатьАтрибут("ИдентификаторВнешнегоПоказателя", ВыборкаПоказателей.ИдентификаторВнешнегоПоказателя);
		ЗаписьXML.ЗаписатьАтрибут("Разделитель", ВыборкаПоказателей.Разделитель);
		ЗаписьXML.ЗаписатьАтрибут("РазделительКакЕдиницаИзмерения", Формат(ВыборкаПоказателей.РазделительКакЕдиницаИзмерения, "БЛ=0; БИ=1"));
		ЗаписьXML.ЗаписатьАтрибут("ЦелевойТренд", ЗначениеВСтрокуВнутр(ВыборкаПоказателей.ЦелевойТренд));
		
		Если ЗначениеЗаполнено(ВыборкаПоказателей.ЕдиницаИзмерения) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЕдиницаИзмерения");
			ЗаписьXML.ЗаписатьАтрибут("Код", ВыборкаПоказателей.ЕдиницаИзмеренияКод);
			ЗаписьXML.ЗаписатьАтрибут("Наименование", ВыборкаПоказателей.ЕдиницаИзмеренияНаименование);
			ЗаписьXML.ЗаписатьАтрибут("НаименованиеПолное", ВыборкаПоказателей.ЕдиницаИзмеренияНаименованиеПолное);
			ЗаписьXML.ЗаписатьАтрибут("МеждународноеСокращение", ВыборкаПоказателей.ЕдиницаИзмеренияМеждународноеСокращение);
			ЗаписьXML.ЗаписатьАтрибут("ТипЕдиницыИзмерения", ЗначениеВСтрокуВнутр(ВыборкаПоказателей.ЕдиницаИзмеренияТипЕдиницыИзмерения));
			ЗаписьXML.ЗаписатьАтрибут("ТипЕдиницыИзмерения_Представление", Строка(ВыборкаПоказателей.ЕдиницаИзмеренияТипЕдиницыИзмерения));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;

		ЗаписьXML.ЗаписатьНачалоЭлемента("СхемаКомпоновкиДанных");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаПоказателей.СхемаКомпоновкиДанных));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка КАК Ссылка,
	|	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Владелец,
	|	торо_ВариантыАнализаПоказателейKPI.Владелец.Наименование КАК ВладелецНаименование,
	|	торо_ВариантыАнализаПоказателейKPI.Наименование КАК Наименование,
	|	торо_ВариантыАнализаПоказателейKPI.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_ВариантыАнализаПоказателейKPI.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	торо_ВариантыАнализаПоказателейKPI.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	торо_ВариантыАнализаПоказателейKPI.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	торо_ВариантыАнализаПоказателейKPI.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	торо_ВариантыАнализаПоказателейKPI.ЕдиницаИзмерения.ТипЕдиницыИзмерения КАК ЕдиницаИзмеренияТипЕдиницыИзмерения,
	|	торо_ВариантыАнализаПоказателейKPI.ТипАнализа КАК ТипАнализа,
	|	торо_ВариантыАнализаПоказателейKPI.АгрегацияДанных КАК АгрегацияДанных,
	|	торо_ВариантыАнализаПоказателейKPI.ВыбратьСортировку КАК ВыбратьСортировку,
	|	торо_ВариантыАнализаПоказателейKPI.КоличествоВыбираемыхЭлементов КАК КоличествоВыбираемыхЭлементов,
	|	торо_ВариантыАнализаПоказателейKPI.ВыполнитьНормализацию КАК ВыполнитьНормализацию,
	|	торо_ВариантыАнализаПоказателейKPI.ОкруглениеДробнойЧасти КАК ОкруглениеДробнойЧасти,
	|	торо_ВариантыАнализаПоказателейKPI.ВариантОтображенияПоУмолчанию КАК ВариантОтображенияПоУмолчанию,
	|	торо_ВариантыАнализаПоказателейKPI.ТипДиаграммы КАК ТипДиаграммы,
	|	торо_ВариантыАнализаПоказателейKPI.ЗначениеАнализа КАК ЗначениеАнализа,
	|	торо_ВариантыАнализаПоказателейKPI.ОтображатьНулевыеЗначения КАК ОтображатьНулевыеЗначения,
	|	торо_ВариантыАнализаПоказателейKPI.ОтображатьЛегенду КАК ОтображатьЛегенду,
	|	торо_ВариантыАнализаПоказателейKPI.ОтображатьПодписи КАК ОтображатьПодписи
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.Владелец В
	|			(ВЫБРАТЬ
	|				ВТ_Показатели.Ссылка
	|			ИЗ
	|				ВТ_Показатели КАК ВТ_Показатели)
	|	И НЕ торо_ВариантыАнализаПоказателейKPI.ПометкаУдаления";
	
	ВыборкаВариантовАнализа = Запрос.Выполнить().Выбрать();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантыАнализа");
	Пока ВыборкаВариантовАнализа.Следующий() Цикл
		СтрокаИД = ТаблицаИдПоказателей.Найти(ВыборкаВариантовАнализа.ВладелецНаименование, "Наименование"); 
		Если СтрокаИД = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не найден ИД показателя с наименованием ""'") + ВыборкаВариантовАнализа.ВладелецНаименование+"""";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаВариантовАнализа.Владелец);
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Наименование, ИДПоказателя", ВыборкаВариантовАнализа.Наименование, СтрокаИД.ИД);
		СтрокаИДВарианта = ТаблицаИдВариантов.НайтиСтроки(СтруктураПоиска);
		Если СтрокаИДВарианта.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не найден ИД варианта анализа ""'") + ВыборкаВариантовАнализа.Ссылка+"""";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаВариантовАнализа.Ссылка);
			Продолжить;
		КонецЕсли;
		СтрокаИДВарианта = СтрокаИДВарианта[0];
		ИДВарианта = СтрокаИД.ИД + "_" + СтрокаИДВарианта.ИД;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантАнализа");
		ЗаписьXML.ЗаписатьАтрибут("ИДВладельца", СтрокаИД.ИД);
		ЗаписьXML.ЗаписатьАтрибут("ИДПоставляемойМодели", ИДВарианта);
		ЗаписьXML.ЗаписатьАтрибут("Наименование", ВыборкаВариантовАнализа.Наименование);
		ЗаписьXML.ЗаписатьАтрибут("ТипАнализа", ЗначениеВСтрокуВнутр(ВыборкаВариантовАнализа.ТипАнализа));
		ЗаписьXML.ЗаписатьАтрибут("ТипАнализа_Представление", Строка(ВыборкаВариантовАнализа.ТипАнализа));
		ЗаписьXML.ЗаписатьАтрибут("АгрегацияДанных", ЗначениеВСтрокуВнутр(ВыборкаВариантовАнализа.АгрегацияДанных));
		ЗаписьXML.ЗаписатьАтрибут("АгрегацияДанных_Представление", Строка(ВыборкаВариантовАнализа.АгрегацияДанных));
		ЗаписьXML.ЗаписатьАтрибут("ВыбратьСортировку", ЗначениеВСтрокуВнутр(ВыборкаВариантовАнализа.ВыбратьСортировку));
		ЗаписьXML.ЗаписатьАтрибут("ВыбратьСортировку_Представление", Строка(ВыборкаВариантовАнализа.ВыбратьСортировку));
		ЗаписьXML.ЗаписатьАтрибут("КоличествоВыбираемыхЭлементов", Формат(ВыборкаВариантовАнализа.КоличествоВыбираемыхЭлементов, "ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("ВыполнитьНормализацию", Формат(ВыборкаВариантовАнализа.ВыполнитьНормализацию, "БЛ=0; БИ=1"));
		ЗаписьXML.ЗаписатьАтрибут("ОкруглениеДробнойЧасти", Формат(ВыборкаВариантовАнализа.ОкруглениеДробнойЧасти, "ЧН=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("ВариантОтображенияПоУмолчанию", ЗначениеВСтрокуВнутр(ВыборкаВариантовАнализа.ВариантОтображенияПоУмолчанию));
		ЗаписьXML.ЗаписатьАтрибут("ВариантОтображенияПоУмолчанию_Представление", Строка(ВыборкаВариантовАнализа.ВариантОтображенияПоУмолчанию));
		ЗаписьXML.ЗаписатьАтрибут("ТипДиаграммы", ЗначениеВСтрокуВнутр(ВыборкаВариантовАнализа.ТипДиаграммы));
		ЗаписьXML.ЗаписатьАтрибут("ТипДиаграммы_Представление", Строка(ВыборкаВариантовАнализа.ТипДиаграммы));
		ЗаписьXML.ЗаписатьАтрибут("ЗначениеАнализа", ВыборкаВариантовАнализа.ЗначениеАнализа);
		ЗаписьXML.ЗаписатьАтрибут("ОтображатьНулевыеЗначения", Формат(ВыборкаВариантовАнализа.ОтображатьНулевыеЗначения, "БЛ=0; БИ=1"));
		ЗаписьXML.ЗаписатьАтрибут("ОтображатьЛегенду", Формат(ВыборкаВариантовАнализа.ОтображатьЛегенду, "БЛ=0; БИ=1"));
		ЗаписьXML.ЗаписатьАтрибут("ОтображатьПодписи", Формат(ВыборкаВариантовАнализа.ОтображатьПодписи, "БЛ=0; БИ=1"));
		
		Если ЗначениеЗаполнено(ВыборкаВариантовАнализа.ЕдиницаИзмерения) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЕдиницаИзмерения");
		    ЗаписьXML.ЗаписатьАтрибут("Код", ВыборкаВариантовАнализа.ЕдиницаИзмеренияКод);
			ЗаписьXML.ЗаписатьАтрибут("Наименование", ВыборкаВариантовАнализа.ЕдиницаИзмеренияНаименование);
			ЗаписьXML.ЗаписатьАтрибут("НаименованиеПолное", ВыборкаВариантовАнализа.ЕдиницаИзмеренияНаименованиеПолное);
			ЗаписьXML.ЗаписатьАтрибут("МеждународноеСокращение", ВыборкаВариантовАнализа.ЕдиницаИзмеренияМеждународноеСокращение);
			ЗаписьXML.ЗаписатьАтрибут("ТипЕдиницыИзмерения", ЗначениеВСтрокуВнутр(ВыборкаВариантовАнализа.ЕдиницаИзмеренияТипЕдиницыИзмерения));
			ЗаписьXML.ЗаписатьАтрибут("ТипЕдиницыИзмерения_Представление", Строка(ВыборкаВариантовАнализа.ЕдиницаИзмеренияТипЕдиницыИзмерения));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	ЗаписьЗип = Новый ЗаписьZipФайла(ПутьКФайлуЗип);
	ЗаписьЗип.Добавить(ПутьКФайлуXML);
	ЗаписьЗип.Записать();

КонецПроцедуры

// Функция возвращает акутальную версию поставляемой модели показателей, соответствующую текущему релизу.
// Формат версии "x.x" (например, 1.12 или 2.1). Используется классическая схема версионирования программ,
// т.е. версия "1.2" считается меньше версии "1.12".
//
// Возвращаемое значение: 
// 	Строка - актуальная версия.
//
Функция АктуальнаяВерсияПоставляемойМодели() Экспорт
	// Начальное значение "1.1". При изменениях поставляемой модели в рамках релиза повышать версии
	// по следующему правилу:
	//	- если добавляются новые показатели, то повышаем первое число (т.е. 2.1, 3.1 и т.д.)
	//	- если выполняются только исправления ошибок в существующих показателях, то повышаем второе число (т.е. 1.2, 1.3 и т.д.).
	
	Возврат "4.7";
КонецФункции

#Область ИнтеграцияGIS

// Получает значение показателя для вывода на карту.
//
// Параметры:
//		ОбъектРемонта - СправочникСсылка.торо_объектыРемонта - объект ремонта.
//		ВариантАнализа - СправочникСсылка.торо_ВариантыАнализаПоказателейKPI - вариант анализа показателя KPI,
//			для которго нужно получить значение.
//		НачалоПериода - Дата - начало периода, за который нужно получить значение.
//		КонецПериода - Дата - конец периода, за который нужно получить значение.
//
// Возвращаемое значение:
//		Число - значение показателя за период или на дату окончания периода.
//
Функция ПолучитьЗначениеПоказателяДляГИС(ОбъектРемонта, ВариантАнализа, НачалоПериода, КонецПериода) Экспорт
	
	ПоказательKPI = ВариантАнализа.Владелец;
	
	СтруктураПараметровФормы = СформироватьСтруктуруРеквизитовФормыПоПараметрамГИС(ОбъектРемонта, ВариантАнализа, НачалоПериода, КонецПериода);
	ПериодДляОтбора = СтруктураПараметровФормы.ОтборПоПериоду;
	
	ТаблицаДанныхПоказателя = Неопределено;
	
	Если ПоказательKPI.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.ВнешнийПоказатель Тогда
		ТаблицаДанныхПоказателя = ПолучитьДанныеВнешнегоПоказателя(ПоказательKPI, ПериодДляОтбора, Ложь, СтруктураПараметровФормы);
	ИначеЕсли ПоказательKPI.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
		// Не реализовано.
	ИначеЕсли ПоказательKPI.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.Формула Тогда	
		// Не реализовано.
	КонецЕсли;
	
	Если ТаблицаДанныхПоказателя <> Неопределено И ТаблицаДанныхПоказателя.Количество() > 0 Тогда
		// Выполняем обработку значения как для типа анализа "Измерение текущего состояния".
		// Не выполняем агрегацию, т.к. ожидаем в таблице всегда не больше одной строки:
		// есть отбор по объекту ремонта и не используется разбивка по периодичности.
		ИмяКолонкиРесурса = ВариантАнализа.ЗначениеАнализа;
		ПрименитьНормализациюКТаблице(СтруктураПараметровФормы, ТаблицаДанныхПоказателя, ВариантАнализа, ИмяКолонкиРесурса);
		ПрименитьОкруглениеКТаблице(ТаблицаДанныхПоказателя, ВариантАнализа, ИмяКолонкиРесурса);
		ЗначениеПоказателя = ТаблицаДанныхПоказателя.Итог(ИмяКолонкиРесурса);
		Возврат ЗначениеПоказателя;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗначениеВСписокБезДублей(СписокЗначений, Значение, Представление)
	
	Если СписокЗначений.НайтиПоЗначению(Значение) = Неопределено Тогда
		СписокЗначений.Добавить(Значение, Представление);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив ссылок на элементы справочника торо_ПоказателиKPI
Функция ПолучитьСписокПоказателейИзФормулы(Показатель, Знач ТекстФормулы) Экспорт
	
	МассивПоказателей = Новый Массив;
	
	ТаблицаОперандов = ПолучитьТаблицуОперандовФормулы(Показатель, ТекстФормулы, Истина);
	Для каждого СтрокаТаблицы из ТаблицаОперандов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Показатель) 
			И МассивПоказателей.Найти(СтрокаТаблицы.Показатель) = Неопределено Тогда
			МассивПоказателей.Добавить(СтрокаТаблицы.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПоказателей;
	
КонецФункции

Функция ПолучитьПоказательПоИдентификаторуДляФормул(ИдентификаторДляФормул)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторДляФормул) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.ИдентификаторДляФормул = &ИдентификаторДляФормул
	|	И НЕ торо_ПоказателиKPI.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИдентификаторДляФормул", ИдентификаторДляФормул);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьФиксированныеОтборы(СтруктураОтборов, НастройкиКД, НастройкиОтчета) Экспорт
	ПараметрыКД = НастройкиКД.ПараметрыДанных;
	ОтборыКД = НастройкиКД.Отбор;
	Недоступный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
		Имя = КлючИЗначение.Ключ;
		Значение = КлючИЗначение.Значение;
		ВидСравненияПараметр = Неопределено;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			КлючИЗначение.Значение.Свойство("Значение", Значение);
			КлючИЗначение.Значение.Свойство("ВидСравнения", ВидСравненияПараметр);
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
			Значение = Новый Массив(Значение);
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Значение);
			Значение = Список;
		КонецЕсли;
		ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
		Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если ПараметрКД.ИдентификаторПользовательскойНастройки = "" Тогда 
				ПараметрКД.Использование    = Истина;
				ПараметрКД.Значение         = Значение;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидСравненияПараметр) Тогда
			ВидСравненияКД = ВидСравненияПараметр;
		ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, ВидСравненияКД, , Истина, Недоступный, "");
	КонецЦикла;
КонецПроцедуры

Функция ОбъединитьТаблицыДанныхИзПараметров(Параметры) Экспорт
	
	Если НЕ Параметры.Свойство("АдресТаблицыДанных") ИЛИ НЕ ЭтоАдресВременногоХранилища(Параметры.АдресТаблицыДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабИсходная = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыДанных);
	Если ТипЗнч(ТабИсходная) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДанных = ТабИсходная.Скопировать();
	
	Если Параметры.Свойство("АдресТаблицыДанныхПрошлогоПериода") И ЭтоАдресВременногоХранилища(Параметры.АдресТаблицыДанныхПрошлогоПериода) Тогда
		ТабИсходная2 = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыДанныхПрошлогоПериода);
		Если ТипЗнч(ТабИсходная2) = Тип("ТаблицаЗначений") Тогда
			торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабИсходная2, ТабДанных);
		КонецЕсли;
	КонецЕсли;

	Возврат ТабДанных;
	
КонецФункции

Функция ПодготовитьСКДДляВыводаТаблицыДанных(ТабДанных) Экспорт
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.Имя = "ТабДанных";
	НаборДанных.ИмяОбъекта = "ТабДанных";
	
	Для каждого КолонкаТаблицы из ТабДанных.Колонки Цикл
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = КолонкаТаблицы.Имя;
		Поле.ПутьКДанным = КолонкаТаблицы.Имя;
		Поле.ТипЗначения = КолонкаТаблицы.ТипЗначения;
		Поле.Заголовок = КолонкаТаблицы.Заголовок;
	КонецЦикла;
	
	СКД.НастройкиПоУмолчанию.Структура.Очистить();
	ЭлементСтруктуры = СКД.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Для каждого КолонкаТаблицы из ТабДанных.Колонки Цикл
		Поле = СКД.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Поле.Использование = Истина;
		Поле.Поле = Новый ПолеКомпоновкиДанных(КолонкаТаблицы.Имя);
	КонецЦикла;
	
	Возврат СКД;
	
КонецФункции

#Область ПоставляемаяМодель

Функция ПолучитьКореньПоставляемойМоделиПоказателей()
	
	Наименование = "Поставляемая модель показателей";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.ЭтоГруппа
	|	И торо_ПоказателиKPI.Наименование = &Наименование
	|	И НЕ торо_ПоказателиKPI.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		НовГруппа = Справочники.торо_ПоказателиKPI.СоздатьГруппу();
		НовГруппа.Наименование = Наименование;
		НовГруппа.Записать();
		Возврат НовГруппа.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоздатьПоказательПоставляемойМодели(ИДПоставляемойМодели, КореньПоставляемойМодели)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.Родитель = &Родитель
	|	И торо_ПоказателиKPI.ИДПоставляемойМодели = &ИДПоставляемойМодели";
	
	Запрос.УстановитьПараметр("Родитель", КореньПоставляемойМодели);
	Запрос.УстановитьПараметр("ИДПоставляемойМодели", ИДПоставляемойМодели);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка.ПолучитьОбъект();
	Иначе
		НовОбъект = Справочники.торо_ПоказателиKPI.СоздатьЭлемент();
		НовОбъект.Родитель = КореньПоставляемойМодели;
		НовОбъект.ИДПоставляемойМодели = ИДПоставляемойМодели;
		Возврат НовОбъект;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоздатьВариантАнализаПоставляемойМодели(ИДПоставляемойМодели, ИДВладельца, КореньПоставляемойМодели)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.Родитель = &Родитель
	|	И торо_ПоказателиKPI.ИДПоставляемойМодели = &ИДВладельца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.ИДПоставляемойМодели = &ИДПоставляемойМодели
	|	И торо_ВариантыАнализаПоказателейKPI.Владелец.Родитель = &Родитель
	|	И торо_ВариантыАнализаПоказателейKPI.Владелец.ИДПоставляемойМодели = &ИДВладельца";
	
	Запрос.УстановитьПараметр("ИДПоставляемойМодели", ИДПоставляемойМодели);
	Запрос.УстановитьПараметр("Родитель", КореньПоставляемойМодели);
	Запрос.УстановитьПараметр("ИДВладельца", ИДВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаВладельца = Результат[0].Выбрать();
	ВыборкаВариантов = Результат[1].Выбрать();

	Если ВыборкаВариантов.Следующий() Тогда
		Возврат ВыборкаВариантов.Ссылка.ПолучитьОбъект();
	Иначе
		НовОбъект = Справочники.торо_ВариантыАнализаПоказателейKPI.СоздатьЭлемент();
		НовОбъект.ИДПоставляемойМодели = ИДПоставляемойМодели;
		Если ВыборкаВладельца.Следующий() Тогда
			НовОбъект.Владелец = ВыборкаВладельца.Ссылка;
		КонецЕсли;
		Возврат НовОбъект;
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьЕдиницуИзмерения(СтруктураЕИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Код = &Код
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", СтруктураЕИ.Код);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		
		Попытка
			СправочникОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СправочникОбъект, СтруктураЕИ);
			СправочникОбъект.Записать();
			Возврат СправочникОбъект.Ссылка;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
				Метаданные.ОбщиеМодули.торо_ПоказателиKPI,,ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область МониторKPI

/////////////////////////////////////////////////////////////////////////////
// Расчет показателей

Процедура ПолучитьДанныеПоказателей(ЭтаФорма) Экспорт
	
	ЭтаФорма.ДанныеПоказателей.Очистить();
	ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Очистить();
	
	ЗаполнитьТаблицыДат(ЭтаФорма);
	
	// Получим все различные показатели
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Показатель,
	|	ИСТИНА КАК ПолучатьДанныеПрошлогоПериода
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Показатель КАК Показатель,
	|	ВТ_Показатели.ПолучатьДанныеПрошлогоПериода КАК ПолучатьДанныеПрошлогоПериода,
	|	ВТ_Показатели.Показатель.ТипПоказателя КАК ТипПоказателя,
	|	ВТ_Показатели.Показатель.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	ВТ_Показатели.Показатель.ВариантЗаполнения КАК ВариантЗаполнения,
	|	ВТ_Показатели.Показатель.ТекстФормулы КАК ТекстФормулы,
	|	ВТ_Показатели.Показатель.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
	|	ВТ_Показатели.Показатель.Разделитель КАК Разделитель
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтаФорма.СписокВариантовАнализа);
	
	ВыборкаПоказателей = Запрос.Выполнить().Выбрать();
	
	ОтборПоПериоду = ЭтаФорма.ОтборПоПериоду;
	ОтборПоПериодуСравнения = ЭтаФорма.ОтборПоПериодуСравнения;
	
	// Соответствие нужно для того, чтобы таблица показателей была в том же порядке, что и список вариантов,
	// который в мониторе выбрал пользователь. Т.к. показатели с формулами обрабатываются в конце, то для
	// сохранения порядка показателй вставляем их в нужные места, где они должны быть, но были пропущены.
	СоответствиеПоказателейСФормулами = Новый Соответствие();
	
	// Вначале обработаем внешние показатели и СКД, потом отдельно формулы
	Пока ВыборкаПоказателей.Следующий() Цикл
		Попытка
			Если ВыборкаПоказателей.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.ВнешнийПоказатель Тогда
				НовСтр = ЭтаФорма.ДанныеПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
				
				ДанныеПоказателя = ПолучитьДанныеВнешнегоПоказателя(ВыборкаПоказателей.Показатель, ОтборПоПериоду, Ложь, ЭтаФорма);
				НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
				
				ДанныеПоказателяСПериодами = ПолучитьДанныеВнешнегоПоказателя(ВыборкаПоказателей.Показатель, ОтборПоПериоду, Истина, ЭтаФорма);
				НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
				
				Если ВыборкаПоказателей.ПолучатьДанныеПрошлогоПериода Тогда
					
					НовСтр = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
					
					ДанныеПоказателя = ПолучитьДанныеВнешнегоПоказателя(ВыборкаПоказателей.Показатель, ОтборПоПериодуСравнения, Ложь, ЭтаФорма);
					НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
					
					ДанныеПоказателяСПериодами = ПолучитьДанныеВнешнегоПоказателя(ВыборкаПоказателей.Показатель, ОтборПоПериодуСравнения, Истина, ЭтаФорма);
					НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
					
				КонецЕсли;
				
			ИначеЕсли ВыборкаПоказателей.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
				ДобавитьДанныеПоказателяВТаблицу(ВыборкаПоказателей, ЭтаФорма);
			Иначе
				СоответствиеПоказателейСФормулами.Вставить(ВыборкаПоказателей.Показатель, ЭтаФорма.ДанныеПоказателей.Количество() + СоответствиеПоказателейСФормулами.Количество());
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонОшибки = НСтр("ru='При получении данных показателя ""%1"" произошла ошибка: %2'");
			ТекстСообщения = СтрШаблон(ШаблонОшибки, ВыборкаПоказателей.Показатель, ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Обработка формул
	ВыборкаПоказателей.Сбросить();
	Пока ВыборкаПоказателей.Следующий() Цикл
		Попытка
			Если ВыборкаПоказателей.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.Формула Тогда
				ИндексДляВставки = СоответствиеПоказателейСФормулами[ВыборкаПоказателей.Показатель];
				НовСтр = ЭтаФорма.ДанныеПоказателей.Вставить(ИндексДляВставки);
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
				
				ДанныеПоказателя = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.ИдентификаторДляФормул, ВыборкаПоказателей.ТекстФормулы, Ложь);
				НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
				
				ДанныеПоказателяСПериодами = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.ИдентификаторДляФормул, ВыборкаПоказателей.ТекстФормулы, Истина);
				НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
				
				Если ВыборкаПоказателей.ПолучатьДанныеПрошлогоПериода Тогда
					
					НовСтр = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
					
					ДанныеПоказателя = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.ИдентификаторДляФормул, ВыборкаПоказателей.ТекстФормулы, Ложь, Истина);
					НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
					
					ДанныеПоказателяСПериодами = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.ИдентификаторДляФормул, ВыборкаПоказателей.ТекстФормулы, Истина, Истина);
					НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
					
				КонецЕсли;

			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонОшибки = НСтр("ru='При получении данных показателя ""%1"" произошла ошибка: %2'");
			ТекстСообщения = СтрШаблон(ШаблонОшибки, ВыборкаПоказателей.Показатель, ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеВнешнегоПоказателя(Показатель, ПериодДляОтбора, СУчетомПериодичности, ЭтаФорма)
	
	БазовыйТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияВнешнихПоказателей.Организация,
	|	ЗначенияВнешнихПоказателей.Подразделение,
	|	ЗначенияВнешнихПоказателей.ОбъектРемонта,
	|	ЗначенияВнешнихПоказателей.ЗначениеОборот,
	|	ЗначенияВнешнихПоказателей.ЗначениеКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.торо_ЗначенияВнешнихПоказателейKPI.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , Движения, Показатель = &Показатель) КАК ЗначенияВнешнихПоказателей";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(БазовыйТекстЗапроса);
	
	ЗапросСхемыЗапроса = СхемаЗапроса.ПакетЗапросов.Получить(0);
	ОператорВыбратьСхемыЗапроса = ЗапросСхемыЗапроса.Операторы.Получить(0);
	ТаблицаОборотовСхемыЗапроса = ОператорВыбратьСхемыЗапроса.Источники.Получить(0);
	ПараметрыТаблицыОборотов = ТаблицаОборотовСхемыЗапроса.Источник.Параметры;
	
	Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
		ПараметрыТаблицыОборотов[2].Выражение = Новый ВыражениеСхемыЗапроса(Строка(ЭтаФорма.ДетализацияПоПериоду));
		ДоступноеПолеПериод = ТаблицаОборотовСхемыЗапроса.Источник.ДоступныеПоля.Найти("Период");
		ВыбираемоеПолеПериод = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Добавить(ДоступноеПолеПериод);
	КонецЕсли;
	
	ДоступенОбъектРемонта = Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта;
	ДоступноПодразделение = (Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта
									ИЛИ Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения);
									
	Если НЕ ДоступенОбъектРемонта Тогда
		ВыбираемоеПолеОбъектРемонта = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Найти("ЗначенияВнешнихПоказателей.ОбъектРемонта");
		Если ВыбираемоеПолеОбъектРемонта <> Неопределено Тогда
			ИндексПоля = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Индекс(ВыбираемоеПолеОбъектРемонта);
			ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Удалить(ИндексПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДоступноПодразделение Тогда
		ВыбираемоеПолеПодразделение = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Найти("ЗначенияВнешнихПоказателей.Подразделение");
		Если ВыбираемоеПолеПодразделение <> Неопределено Тогда
			ИндексПоля = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Индекс(ВыбираемоеПолеПодразделение);
			ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Удалить(ИндексПоля);
		КонецЕсли;
	КонецЕсли;
									
	Если ЭтаФорма.ИспользоватьОтборПоОрганизации Тогда
		ПараметрыТаблицыОборотов[4].Выражение = Новый ВыражениеСхемыЗапроса(Строка(ПараметрыТаблицыОборотов[4].Выражение) 
																	+ " И Организация В(&СписокОрганизаций)");
	КонецЕсли;

	Если ЭтаФорма.ИспользоватьОтборПоПодразделению И ДоступноПодразделение Тогда
		ПараметрыТаблицыОборотов[4].Выражение = Новый ВыражениеСхемыЗапроса(Строка(ПараметрыТаблицыОборотов[4].Выражение) 
																	+ " И Подразделение В(&СписокПодразделений)");
	КонецЕсли;

	Если ЭтаФорма.ИспользоватьОтборПоОР И ДоступенОбъектРемонта Тогда
		ПараметрыТаблицыОборотов[4].Выражение = Новый ВыражениеСхемыЗапроса(Строка(ПараметрыТаблицыОборотов[4].Выражение) 
																	+ " И ОбъектРемонта В(&СписокОР)");
	КонецЕсли;
	
	ИтоговыйЗекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос = Новый Запрос(ИтоговыйЗекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", ПериодДляОтбора.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ПериодДляОтбора.ДатаОкончания);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	Если ЭтаФорма.ИспользоватьОтборПоОрганизации Тогда
		Запрос.УстановитьПараметр("СписокОрганизаций", ЭтаФорма.ОтборПоОрганизации);
	КонецЕсли;
	Если ЭтаФорма.ИспользоватьОтборПоПодразделению Тогда
		Запрос.УстановитьПараметр("СписокПодразделений", ЭтаФорма.ОтборПоПодразделению);
	КонецЕсли;
	Если ЭтаФорма.ИспользоватьОтборПоОР Тогда
		Запрос.УстановитьПараметр("СписокОР", ЭтаФорма.ОтборПоОР);
	КонецЕсли;
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТабРезультат;
	
КонецФункции


Функция ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, Показатель, ХранилищеСКД, ПериодДляОтбора, СУчетомПериодичности, ЗаПрошлыйПериод = Ложь, Разделитель = "")
	
	СКД = ХранилищеСКД.Получить(); 
	
	Если СКД <> Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		
		Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		Если Настройки.Структура.Количество() = 0 Тогда
			Группировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Группировка.Использование = Истина;
		КонецЕсли;
		
		УстановитьОтборыИПараметрыВСКД(Настройки, ПериодДляОтбора, Показатель, ЭтаФорма);
			
		// добавление периодичности
		ВнешниеНаборыДанных = Новый Структура;
		ДобавитьНастройкиПериодичностиВСКД(СКД, Настройки, ПериодДляОтбора, СУчетомПериодичности, ВнешниеНаборыДанных, ЗаПрошлыйПериод, ЭтаФорма);
			
		
		// выполнение СКД
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
				
		ДеревоРезультат = Новый ДеревоЗначений;
		
		ПроцессорВыводаТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВыводаТЗ.УстановитьОбъект(ДеревоРезультат);
		ПроцессорВыводаТЗ.Вывести(ПроцессорКомпоновкиДанных);
		
		// Сделаем колонке "ПериодДень" и т.п., если такая есть, имя "Период". 
		// Предварительно удалим "Период", если вдруг он уже есть.
		Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
			ИмяПоляПериода = "Период"+Строка(ЭтаФорма.ДетализацияПоПериоду);
			КолонкаПериодПоПериодичности = ДеревоРезультат.Колонки.Найти(ИмяПоляПериода);
			КолонкаПериод = ДеревоРезультат.Колонки.Найти("Период");
			Если КолонкаПериодПоПериодичности <> Неопределено Тогда
				Если КолонкаПериод <> Неопределено Тогда
					ДеревоРезультат.Колонки.Удалить(КолонкаПериод);
				КонецЕсли;
				КолонкаПериодПоПериодичности.Имя = "Период";
			КонецЕсли;
		КонецЕсли;
		
		// формирование структуры результата
		МассивКолонокРесурсов = Новый Массив;
		Для каждого ДоступноеПолеВыбора ИЗ Настройки.ДоступныеПоляВыбора.Элементы Цикл
			ИмяПоля = Строка(ДоступноеПолеВыбора.Поле);
			Если ДоступноеПолеВыбора.Ресурс И ДеревоРезультат.Колонки.Найти(ИмяПоля) <> Неопределено Тогда
				МассивКолонокРесурсов.Добавить(ИмяПоля);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Разделитель) Тогда
			Результат = Новый Соответствие();
		    РазвернутьДеревоВТаблицыЗначенийПоРазделителю(ДеревоРезультат, Результат, МассивКолонокРесурсов, Разделитель);
		Иначе
			Результат = Новый ТаблицаЗначений;
			РазвернутьДеревоВТаблицуЗначений(ДеревоРезультат, Результат, МассивКолонокРесурсов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОтборыИПараметрыВСКД(Настройки, ПериодДляОтбора, Показатель, ЭтаФорма)
	
	// установка параметров и отбор по периоду
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Показатель"));
	Если Параметр <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Показатель", Показатель);
	КонецЕсли;
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если Параметр <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", ПериодДляОтбора.ДатаНачала);
	КонецЕсли;
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если Параметр <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", ПериодДляОтбора.ДатаОкончания);
	КонецЕсли;
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если Параметр <> Неопределено И ТипЗнч(Параметр.Значение) = Тип("СтандартныйПериод") Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПериодДляОтбора);
	КонецЕсли;
	
	ИмяПоля = "Период";
	ДоступноеПолеОтбора = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Если ДоступноеПолеОтбора <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПериодДляОтбора.ДатаНачала) Тогда
			Отбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			Отбор.ПравоеЗначение = ПериодДляОтбора.ДатаНачала;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПериодДляОтбора.ДатаОкончания) Тогда
			Отбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			Отбор.ПравоеЗначение = ПериодДляОтбора.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	// отборы
	Если ЭтаФорма.ИспользоватьОтборПоОрганизации Тогда
		УстановитьОтборСКДПоСпискуЗначений(Настройки, "Организация", ЭтаФорма.ОтборПоОрганизации);
	КонецЕсли;
	
	Если ЭтаФорма.ИспользоватьОтборПоПодразделению Тогда
		УстановитьОтборСКДПоСпискуЗначений(Настройки, "Подразделение", ЭтаФорма.ОтборПоПодразделению);
	КонецЕсли;
	
	Если ЭтаФорма.ИспользоватьОтборПоОР Тогда
		УстановитьОтборСКДПоСпискуЗначений(Настройки, "ОбъектРемонта", ЭтаФорма.ОтборПоОР);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьНастройкиПериодичностиВСКД(СКД, Настройки, ПериодДляОтбора, СУчетомПериодичности, ВнешниеНаборыДанных, ЗаПрошлыйПериод, ЭтаФорма)
	
	Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
		
		ИмяПоляПериода = "Период"+Строка(ЭтаФорма.ДетализацияПоПериоду);
		ДоступноеПолеВыбораПериода = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПериода));
		Если ДоступноеПолеВыбораПериода <> Неопределено Тогда
			ПолеВыбораПериода = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбораПериода.Использование = Истина;
			ПолеВыбораПериода.Заголовок = "Период";
			ПолеВыбораПериода.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПериода);
			
			// удалить другое поле Период, если есть
			ПолеПериодБезПериодичности = Неопределено;
			Для каждого ПолеВыбора из Настройки.Выбор.Элементы Цикл
				Если ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Период") Тогда
					ПолеПериодБезПериодичности = ПолеВыбора;
				КонецЕсли;
			КонецЦикла;
			Если ПолеПериодБезПериодичности <> Неопределено Тогда
				Настройки.Выбор.Элементы.Удалить(ПолеПериодБезПериодичности);
			КонецЕсли;
			
			// Создать группировку с дополнением по периоду
			ГруппировкаОсновная = Настройки.Структура.Получить(0);
			ГруппировкаОсновная.ПоляГруппировки.Элементы.Очистить();
			Для каждого ПолеВыбора из Настройки.Выбор.Элементы Цикл
				ДоступноеПолеВыбора = Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеВыбора.Поле);
				Если НЕ ДоступноеПолеВыбора.Ресурс Тогда
					Если ПолеВыбора.Поле <> Новый ПолеКомпоновкиДанных(ИмяПоляПериода) Тогда
						ПолеГруппировки = ГруппировкаОсновная.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеГруппировки.Использование = Истина;
						ПолеГруппировки.Поле = ПолеВыбора.Поле;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ГруппировкаПериода = ГруппировкаОсновная.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаПериода.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ГруппировкаПериода.Использование = Истина;
			Для каждого ПолеВыбора из Настройки.Выбор.Элементы Цикл
				Если ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПериода) Тогда
					ПолеГруппировки = ГруппировкаПериода.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ПолеГруппировки.Использование = Истина;
					ПолеГруппировки.Поле = ПолеВыбора.Поле;
					ПолеГруппировки.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[Строка(ЭтаФорма.ДетализацияПоПериоду)];
					ПолеГруппировки.НачалоПериода = ПериодДляОтбора.ДатаНачала;
					ПолеГруппировки.КонецПериода = ПериодДляОтбора.ДатаОкончания;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// выполним поиск набора данных ТаблицаДат
	ЕстьНаборДанныхТаблицаДат = Ложь;
	
	Для каждого НаборДанных из СКД.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") 
			И НаборДанных.ИмяОбъекта = "ТаблицаДат" Тогда
			ЕстьНаборДанныхТаблицаДат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЕстьНаборданныхТаблицаДат Тогда
		ИмяПоляПериода = "Период";
		ДоступноеПолеВыбораПериода = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПериода));
		Если ДоступноеПолеВыбораПериода <> Неопределено Тогда
			ПолеВыбораПериода = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбораПериода.Использование = Истина;
			ПолеВыбораПериода.Заголовок = "Период";
			ПолеВыбораПериода.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПериода);
		КонецЕсли;
		
		Если ЗаПрошлыйПериод Тогда
			Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
				ВнешниеНаборыДанных.Вставить("ТаблицаДат", ПолучитьКопиюТаблицыФормы(ЭтаФорма.ТаблицаДатЗаПрошлыйПериод));
			Иначе
				ВнешниеНаборыДанных.Вставить("ТаблицаДат", ПолучитьКопиюТаблицыФормы(ЭтаФорма.ТаблицаДатНаТекДатуЗаПрошлыйПериод));
			КонецЕсли;
		Иначе
			Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
				ВнешниеНаборыДанных.Вставить("ТаблицаДат", ПолучитьКопиюТаблицыФормы(ЭтаФорма.ТаблицаДат));
			Иначе
				ВнешниеНаборыДанных.Вставить("ТаблицаДат", ПолучитьКопиюТаблицыФормы(ЭтаФорма.ТаблицаДатНаТекДату));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры


Функция ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, Показатель, ИдентификаторДляФормул, Знач ИсходныйТекстФормулы, СУчетомПериодичности, ЗаПрошлыйПериод = Ложь) 
	
	ТабРезультат = Новый ТаблицаЗначений;
	
	Если СУчетомПериодичности Тогда
		ТабРезультат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
		
	ТабРезультат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения 
		ИЛИ Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		ТабРезультат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	Если Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		ТабРезультат.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	КонецЕсли;
	
	ТабРезультат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	СтрокаАналитикПоказателя = ПолучитьСтрокуАналитикПоТипуПоказателя(Показатель.ТипПоказателя, СУчетомПериодичности);
	ТабРезультат.Индексы.Добавить(СтрокаАналитикПоказателя);
	
	ИмяРеквизитаАдресХранилища = ?(СУчетомПериодичности, "АдресХранилищаДанныхСПериодами", "АдресХранилищаДанных");
	ИспользуемыйПериод = ?(ЗаПрошлыйПериод, ЭтаФорма.ОтборПоПериодуСравнения, ЭтаФорма.ОтборПоПериоду);

	ТаблицаОперандов = торо_ПоказателиKPI.ПолучитьТаблицуОперандовФормулы(Показатель, ИсходныйТекстФормулы, Ложь);
	
	ТаблицаОперандов.Колонки.Добавить("ВариантЗаполнения");
	ТаблицаОперандов.Колонки.Добавить("ТипПоказателя");
	ТаблицаОперандов.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число"));
	ТаблицаОперандов.Колонки.Добавить("ИдентификаторДляФормул");
	ТаблицаОперандов.Колонки.Добавить("ТекстФормулы");
	ТаблицаОперандов.Колонки.Добавить("ИмяКолонки");
	
	Для каждого СтрокаОперанда из ТаблицаОперандов Цикл
		СтрокаОперанда.ВариантЗаполнения = СтрокаОперанда.Показатель.ВариантЗаполнения;
		СтрокаОперанда.ТипПоказателя = СтрокаОперанда.Показатель.ТипПоказателя;
		СтрокаОперанда.ИдентификаторДляФормул = СтрокаОперанда.Показатель.ИдентификаторДляФормул;
		СтрокаОперанда.ТекстФормулы = СтрокаОперанда.Показатель.ТекстФормулы;
		
		Если СтрокаОперанда.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОрганизации Тогда
			СтрокаОперанда.ПорядокСортировки = 3;
		ИначеЕсли СтрокаОперанда.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
			СтрокаОперанда.ПорядокСортировки = 2;
		ИначеЕсли СтрокаОперанда.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
			СтрокаОперанда.ПорядокСортировки = 1;
		КонецЕсли;
		
		ИмяКолонки = СтрокаОперанда.ИмяПоказателя+"_"+СтрокаОперанда.ИмяРесурса;
		СтрокаОперанда.ИмяКолонки = ИмяКолонки;
		ТабРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"), СтрокаОперанда.ИмяПоказателя+"."+СтрокаОперанда.ИмяРесурса);
	КонецЦикла;
	
	ТаблицаОперандов.Сортировать("ПорядокСортировки");
	
	// Получим данные всех операндов для расчета
	Для каждого СтрокаОперанда из ТаблицаОперандов Цикл
		Если ЗаПрошлыйПериод Тогда
			СтрокаПоказателяОперанда = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
		Иначе
			СтрокаПоказателяОперанда = ЭтаФорма.ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
		КонецЕсли;
				
		НовСтр = Неопределено;
		Если СтрокаПоказателяОперанда.Количество() > 0 Тогда
			НовСтр = СтрокаПоказателяОперанда[0];
			Если ЭтоАдресВременногоХранилища(НовСтр[ИмяРеквизитаАдресХранилища]) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НовСтр = Неопределено Тогда
			Если ЗаПрошлыйПериод Тогда
				НовСтр = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
			Иначе
				НовСтр = ЭтаФорма.ДанныеПоказателей.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаОперанда);
		
		Если СтрокаОперанда.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.ВнешнийПоказатель Тогда
			ДанныеПоказателя = ПолучитьДанныеВнешнегоПоказателя(СтрокаОперанда.Показатель, ИспользуемыйПериод, СУчетомПериодичности, ЭтаФорма);
		ИначеЕсли СтрокаОперанда.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
			ДанныеПоказателя = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, СтрокаОперанда.Показатель, СтрокаОперанда.Показатель.СхемаКомпоновкиДанных, ИспользуемыйПериод, СУчетомПериодичности, ЗаПрошлыйПериод);
		ИначеЕсли СтрокаОперанда.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
			ДанныеПоказателя = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, СтрокаОперанда.Показатель, СтрокаОперанда.СхемаКомпоновкиДанных, СтрокаОперанда.ТекстФормулы, СУчетомПериодичности, ЗаПрошлыйПериод);
		КонецЕсли;
		
		НовСтр[ИмяРеквизитаАдресХранилища] = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
			
	КонецЦикла;
	
	// Заполним таблицу для расчета формулы
	Для каждого СтрокаОперанда из ТаблицаОперандов Цикл
		Если ЗаПрошлыйПериод Тогда
			СтрокиПоказателяОперанда = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
		Иначе
			СтрокиПоказателяОперанда = ЭтаФорма.ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
		КонецЕсли;
				
		Если СтрокиПоказателяОперанда.Количество() = 0 Тогда
			Продолжить;
		Иначе
			СтрокаПоказателяОперанда = СтрокиПоказателяОперанда[0];
			Если ЭтоАдресВременногоХранилища(СтрокаПоказателяОперанда[ИмяРеквизитаАдресХранилища]) Тогда
				ДанныеОперандаИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателяОперанда[ИмяРеквизитаАдресХранилища]);
				Если ДанныеОперандаИсх = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
			// Цикл ниже необходим в том случае, когда у показателя заполнен Разделитель, и в ТЗ данных формы
			// есть несколько строк для одного показателя (в разрезе значений каждого разделителя). В этой
			// ситуации получаем общую таблицу данных показателя и сворачиваем ее по аналитикам, суммируя
			// значения ресурса и откидывая разделитель.
			Для НомерЭлемента = 1 По СтрокиПоказателяОперанда.Количество() - 1 Цикл
			    СтрокаПоказателяОперанда = СтрокиПоказателяОперанда[НомерЭлемента];
				Если ЭтоАдресВременногоХранилища(СтрокаПоказателяОперанда[ИмяРеквизитаАдресХранилища]) Тогда
					ДанныеОперандаВременная = ПолучитьИзВременногоХранилища(СтрокаПоказателяОперанда[ИмяРеквизитаАдресХранилища]);
					Если ДанныеОперандаВременная = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для каждого СтрокаТаблицы Из ДанныеОперандаВременная Цикл
					    ЗаполнитьЗначенияСвойств(ДанныеОперандаИсх.Добавить(), СтрокаТаблицы);
					КонецЦикла;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокиПоказателяОперанда.Количество() > 1 Тогда
			    ДанныеОперандаИсх.Свернуть(СтрокаАналитикПоказателя, СтрокаОперанда.ИмяРесурса);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОперанда = ДанныеОперандаИсх.Скопировать();
		СтруктураПоискаДанныхОперанда = Новый Структура(СтрокаАналитикПоказателя);
		СравнениеТипов = торо_ПоказателиKPI.СравнитьТипыПоказателей(Показатель.ТипПоказателя, СтрокаОперанда.ТипПоказателя);
		Если СравнениеТипов > 0 Тогда
			ДанныеОперанда.Свернуть(СтрокаАналитикПоказателя, СтрокаОперанда.ИмяРесурса);
		ИначеЕсли СравнениеТипов = 0 Тогда	
			ДанныеОперанда.Индексы.Добавить(СтрокаАналитикПоказателя);
			ТабРезультат.Индексы.Добавить(СтрокаАналитикПоказателя);
		ИначеЕсли СравнениеТипов < 0 Тогда
			СтрокаАналитикОперанда = ПолучитьСтрокуАналитикПоТипуПоказателя(СтрокаОперанда.ТипПоказателя, СУчетомПериодичности);
			СтруктураПоискаДанныхОперанда = Новый Структура(СтрокаАналитикОперанда);
			ДанныеОперанда.Индексы.Добавить(СтрокаАналитикОперанда);
		КонецЕсли;
		
		Для каждого СтрокаТабРезультат из ТабРезультат Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаДанныхОперанда, СтрокаТабРезультат);
			НайденныеСтроки = ДанныеОперанда.НайтиСтроки(СтруктураПоискаДанныхОперанда);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				СтрокаТабРезультат[СтрокаОперанда.ИмяКолонки] = НайденнаяСтрока[СтрокаОперанда.ИмяРесурса];
			КонецЕсли;	
		КонецЦикла;
		
		Если СравнениеТипов >=0 Тогда
			Для каждого СтрокаДанныеОперанда из ДанныеОперанда Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДанныхОперанда, СтрокаДанныеОперанда);
				НайденныеСтроки = ТабРезультат.НайтиСтроки(СтруктураПоискаДанныхОперанда);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НовСтр = ТабРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтруктураПоискаДанныхОперанда);
					НовСтр[СтрокаОперанда.ИмяКолонки] = СтрокаДанныеОперанда[СтрокаОперанда.ИмяРесурса];
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
	// Расчет формулы в каждой строке
	Для каждого СтрокаРезультата из ТабРезультат Цикл
		ТекстФормулы = ИсходныйТекстФормулы;
		
		Для каждого СтрокаОперанда из ТаблицаОперандов Цикл
			ЗначениеОперанда = СтрокаРезультата[СтрокаОперанда.ИмяКолонки];
			ЗначениеОперандаСтрокой = Формат(ЗначениеОперанда, "ЧРД=.; ЧН=0; ЧГ=0");
			ТекстФормулы = СтрЗаменить(ТекстФормулы, СтрокаОперанда.ТекстОперанда, ЗначениеОперандаСтрокой);
		КонецЦикла;
		
		Попытка
			СтрокаРезультата.Значение = Вычислить(ТекстФормулы);
		Исключение
			СтрокаРезультата.Значение = 0;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТабРезультат;
	
КонецФункции

Функция ПолучитьЦелевыеЗначенияПоказателей(ЭтаФорма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Показатель
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Показатель КАК Показатель,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Показатель.ЦелевойТренд КАК ЦелевойТренд,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Организация КАК Организация,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Подразделение КАК Подразделение,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Значение КАК ЦелевоеЗначение,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.КритическоеЗначение КАК КритическоеЗначение,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.МинимальноеЗначение КАК МинимальноеЗначение,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.КритическийМинимум КАК КритическийМинимум,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.МаксимальноеЗначение КАК МаксимальноеЗначение,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.КритическийМаксимум КАК КритическийМаксимум
	|ИЗ
	|	РегистрСведений.торо_ЦелевыеЗначенияKPI.СрезПоследних(
	|			&Период,
	|			Показатель В
	|					(ВЫБРАТЬ
	|						ВТ_Показатели.Показатель
	|					ИЗ
	|						ВТ_Показатели КАК ВТ_Показатели)
	|				И Организация В (&СписокОрганизаций, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И Подразделение В (&СписокПодразделений, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|				И ОбъектРемонта В (&СписокОР, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка))) КАК торо_ЦелевыеЗначенияKPIСрезПоследних
	|ГДЕ
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.ДатаПО >= &Период";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтаФорма.СписокВариантовАнализа);
	Запрос.УстановитьПараметр("Период", ЭтаФорма.ОтборПоПериоду.ДатаОкончания);
	Если ЭтаФорма.ИспользоватьОтборПоОрганизации Тогда
		Запрос.УстановитьПараметр("СписокОрганизаций", ЭтаФорма.ОтборПоОрганизации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))", "Истина");
	КонецЕсли;
	
	Если ЭтаФорма.ИспользоватьОтборПоПодразделению Тогда
		Запрос.УстановитьПараметр("СписокПодразделений", ЭтаФорма.ОтборПоПодразделению);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Подразделение В (&СписокПодразделений, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))", "Истина");
	КонецЕсли;

	Если ЭтаФорма.ИспользоватьОтборПоОР Тогда
		Запрос.УстановитьПараметр("СписокОР", ЭтаФорма.ОтборПоОР);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОбъектРемонта В (&СписокОР, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка))", "Истина");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция НеобходимаКорректировкаЦелевыхЗначений(ПараметрыПроверки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Показатель,
	|	торо_ВариантыАнализаПоказателейKPI.Владелец.ЦелевойТренд КАК ЦелевойТренд
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка В(&ВариантыАнализа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_ОтсутствуетЦелевойТренд
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|ГДЕ
	|	ВТ_Показатели.ЦелевойТренд = ЗНАЧЕНИЕ(Перечисление.торо_ВидыЦелевыхТрендовПоказателейKPI.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_НекорректныеЦелевыеЗначения
	|ИЗ
	|	РегистрСведений.торо_ЦелевыеЗначенияKPI.СрезПоследних(
	|			&Период,
	|			Показатель В
	|					(ВЫБРАТЬ
	|						ВТ_Показатели.Показатель
	|					ИЗ
	|						ВТ_Показатели КАК ВТ_Показатели)
	|				И Организация В (&Организации, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И Подразделение В (&Подразделения, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|				И ОбъектРемонта В (&ОбъектыРемонта, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка))) КАК торо_ЦелевыеЗначенияKPIСрезПоследних
	|ГДЕ
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.ДатаПО > &Период
	|	И ВЫБОР
	|			КОГДА торо_ЦелевыеЗначенияKPIСрезПоследних.Показатель.ЦелевойТренд = ЗНАЧЕНИЕ(Перечисление.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон)
	|				ТОГДА торо_ЦелевыеЗначенияKPIСрезПоследних.МинимальноеЗначение = 0
	|						ИЛИ торо_ЦелевыеЗначенияKPIСрезПоследних.МаксимальноеЗначение = 0
	|			КОГДА торо_ЦелевыеЗначенияKPIСрезПоследних.Показатель.ЦелевойТренд = ЗНАЧЕНИЕ(Перечисление.торо_ВидыЦелевыхТрендовПоказателейKPI.Минимизация)
	|					ИЛИ торо_ЦелевыеЗначенияKPIСрезПоследних.Показатель.ЦелевойТренд = ЗНАЧЕНИЕ(Перечисление.торо_ВидыЦелевыхТрендовПоказателейKPI.Максимизация)
	|				ТОГДА торо_ЦелевыеЗначенияKPIСрезПоследних.Значение = 0
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_ЦелевыеЗначенияПоказателейТрендаДиапазон
	|ИЗ
	|	РегистрСведений.торо_ЦелевыеЗначенияKPI.СрезПоследних(
	|			&Период,
	|			Показатель В
	|					(ВЫБРАТЬ
	|						ВТ_Показатели.Показатель
	|					ИЗ
	|						ВТ_Показатели КАК ВТ_Показатели
	|					ГДЕ
	|						ВТ_Показатели.ЦелевойТренд = ЗНАЧЕНИЕ(Перечисление.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон))
	|				И Организация В (&Организации, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И Подразделение В (&Подразделения, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|				И ОбъектРемонта В (&ОбъектыРемонта, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка))) КАК торо_ЦелевыеЗначенияKPIСрезПоследних
	|ГДЕ
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.ДатаПО > &Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Показатель КАК Показатель
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦелевыеЗначенияПоказателейТрендаДиапазон КАК ВТ_ЦелевыеЗначенияПоказателейТрендаДиапазон
	|		ПО ВТ_Показатели.Показатель = ВТ_ЦелевыеЗначенияПоказателейТрендаДиапазон.Показатель
	|ГДЕ
	|	ВТ_Показатели.ЦелевойТренд = ЗНАЧЕНИЕ(Перечисление.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон)
	|	И ВТ_ЦелевыеЗначенияПоказателейТрендаДиапазон.Показатель ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОтсутствуетЦелевойТренд.Показатель
	|ИЗ
	|	ВТ_ОтсутствуетЦелевойТренд КАК ВТ_ОтсутствуетЦелевойТренд
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НекорректныеЦелевыеЗначения.Показатель
	|ИЗ
	|	ВТ_НекорректныеЦелевыеЗначения КАК ВТ_НекорректныеЦелевыеЗначения";
		
	Запрос.УстановитьПараметр("ВариантыАнализа", ПараметрыПроверки.ВариантыАнализа);
	Запрос.УстановитьПараметр("Период", ПараметрыПроверки.Период);
	
	Если ПараметрыПроверки.ОтборПоОрганизации Тогда
		Запрос.УстановитьПараметр("Организации", ПараметрыПроверки.Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&Организации, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))", "Истина");
	КонецЕсли;
	
	Если ПараметрыПроверки.ОтборПоПодразделению Тогда
		Запрос.УстановитьПараметр("Подразделения", ПараметрыПроверки.Подразделения);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Подразделение В (&Подразделения, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))", "Истина");
	КонецЕсли;

	Если ПараметрыПроверки.ОтборПоОР Тогда
		Запрос.УстановитьПараметр("ОбъектыРемонта", ПараметрыПроверки.ОбъектыРемонта);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОбъектРемонта В (&ОбъектыРемонта, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка))", "Истина");
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции	

Процедура РазвернутьДеревоВТаблицыЗначенийПоРазделителю(ДеревоРезультат, Результат, МассивКолонокРесурсов, Разделитель)
	СтруктураТаблицы = Новый ТаблицаЗначений();
	Для каждого КолонкаДерева Из ДеревоРезультат.Колонки Цикл
		СтруктураТаблицы.Колонки.Добавить(КолонкаДерева.Имя, КолонкаДерева.ТипЗначения, КолонкаДерева.Заголовок);
	КонецЦикла;

	ДобавитьКонечныеСтрокиДереваВТаблицыЗначенийПоРазделителю(ДеревоРезультат.Строки, Результат, МассивКолонокРесурсов, СтруктураТаблицы, Разделитель);
КонецПроцедуры

Процедура РазвернутьДеревоВТаблицуЗначений(ДеревоРезультат, ТабРезультат, МассивКолонокРесурсов)
	
	Для каждого КолонкаДерева из ДеревоРезультат.Колонки Цикл
		ТабРезультат.Колонки.Добавить(КолонкаДерева.Имя, КолонкаДерева.ТипЗначения, КолонкаДерева.Заголовок);
	КонецЦикла;

	ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(ДеревоРезультат.Строки, ТабРезультат, МассивКолонокРесурсов);

КонецПроцедуры

Процедура ДобавитьКонечныеСтрокиДереваВТаблицыЗначенийПоРазделителю(НаборСтрокДерева, Результат, МассивКолонокРесурсов, СтруктураТаблицы, Разделитель)
	Для каждого СтрокаДерева Из НаборСтрокДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДобавитьКонечныеСтрокиДереваВТаблицыЗначенийПоРазделителю(СтрокаДерева.Строки, Результат, МассивКолонокРесурсов, СтруктураТаблицы, Разделитель);
		Иначе
			ЗначениеРазделителя = СтрокаДерева[Разделитель];
			ТаблицаРазделителя = Результат[ЗначениеРазделителя];
			Если Результат[ЗначениеРазделителя] = Неопределено Тогда
			    Результат[ЗначениеРазделителя] = СтруктураТаблицы.Скопировать();
			КонецЕсли;
			
			СтрокаТаблицы = Результат[ЗначениеРазделителя].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
			Для каждого ИмяКолонки Из МассивКолонокРесурсов Цикл
				Если СтрокаТаблицы[ИмяКолонки] = Null Тогда
					СтрокаТаблицы[ИмяКолонки] = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(НаборСтрокДерева, ТабРезультат, МассивКолонокРесурсов)
	
	Для каждого СтрокаДерева Из НаборСтрокДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(СтрокаДерева.Строки, ТабРезультат, МассивКолонокРесурсов);
		Иначе
			СтрокаТаблицы = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
			Для каждого ИмяКолонки Из МассивКолонокРесурсов Цикл
				Если СтрокаТаблицы[ИмяКолонки] = Null Тогда
					СтрокаТаблицы[ИмяКолонки] = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыДат(ЭтаФорма)
	
	ДетализацияПоПериоду = ЭтаФорма.ДетализацияПоПериоду;
	ОтборПоПериоду = ЭтаФорма.ОтборПоПериоду;
	ОтборПоПериодуСравнения = ЭтаФорма.ОтборПоПериодуСравнения;
	
	ЭтаФорма.ТаблицаДатНаТекДату.Очистить();
	НовСтр = ЭтаФорма.ТаблицаДатНаТекДату.Добавить();
	НовСтр.Период = ОтборПоПериоду.ДатаОкончания;
	НовСтр.НачалоПериода = ОтборПоПериоду.ДатаНачала;
	НовСтр.КонецПериода = ОтборПоПериоду.ДатаОкончания;
	
	ЭтаФорма.ТаблицаДатНаТекДатуЗаПрошлыйПериод.Очистить();
	НовСтр = ЭтаФорма.ТаблицаДатНаТекДатуЗаПрошлыйПериод.Добавить();
	НовСтр.Период = ОтборПоПериодуСравнения.ДатаОкончания;
	НовСтр.НачалоПериода = ОтборПоПериодуСравнения.ДатаНачала;
	НовСтр.КонецПериода = ОтборПоПериодуСравнения.ДатаОкончания;
	
	ЭтаФорма.ТаблицаДат.Очистить();
	ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Очистить();
	Если ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ДетализацияПоПериоду) Тогда
		Если ДетализацияПоПериоду <> Перечисления.Периодичность.Декада
			И ДетализацияПоПериоду <> Перечисления.Периодичность.Полугодие Тогда
			
			текДата = ОтборПоПериоду.ДатаНачала;
			Пока текДата < ОтборПоПериоду.ДатаОкончания Цикл
				НовСтр = ЭтаФорма.ТаблицаДат.Добавить();
				НовСтр.Период = НачалоПериода(текДата, ДетализацияПоПериоду);
				НовСтр.НачалоПериода = Макс(ОтборПоПериоду.ДатаНачала, НачалоПериода(текДата, ДетализацияПоПериоду));
				НовСтр.КонецПериода = Мин(ОтборПоПериоду.ДатаОкончания, КонецПериода(текДата, ДетализацияПоПериоду));
				текДата = КонецПериода(текДата, ДетализацияПоПериоду)+1;
			КонецЦикла;

			текДата = ОтборПоПериодуСравнения.ДатаНачала;
			Пока текДата < ОтборПоПериодуСравнения.ДатаОкончания Цикл
				НовСтр = ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Добавить();
				НовСтр.Период = НачалоПериода(текДата, ДетализацияПоПериоду);
				НовСтр.НачалоПериода = Макс(ОтборПоПериодуСравнения.ДатаНачала, НачалоПериода(текДата, ДетализацияПоПериоду));
				НовСтр.КонецПериода = Мин(ОтборПоПериодуСравнения.ДатаОкончания, КонецПериода(текДата, ДетализацияПоПериоду));
				текДата = КонецПериода(текДата, ДетализацияПоПериоду)+1;
			КонецЦикла;
			
		Иначе // Используем запрос к производственному календарю, т.к. нет функций НачалоДекады и НачалоПолугодия
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА) КАК Период,
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА) < &ДатаНачала
			|			ТОГДА &ДатаНачала
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА)
			|	КОНЕЦ КАК НачалоПериода,
			|	ВЫБОР
			|		КОГДА КОНЕЦПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА) > &ДатаОкончания
			|			ТОГДА &ДатаОкончания
			|		ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА)
			|	КОНЕЦ КАК КонецПериода
			|ИЗ
			|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|ГДЕ
			|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
			|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			
			Если ДетализацияПоПериоду = Перечисления.Периодичность.Полугодие Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДЕКАДА","ПОЛУГОДИЕ");
			КонецЕсли;
			
			ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
			Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
			
			Запрос.УстановитьПараметр("ДатаНачала", ОтборПоПериоду.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ОтборПоПериоду.ДатаОкончания);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрРезультат из РезультатЗапроса Цикл
				НовСтр = ЭтаФорма.ТаблицаДат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрРезультат);
			КонецЦикла;
			
			Запрос.УстановитьПараметр("ДатаНачала", ОтборПоПериодуСравнения.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ОтборПоПериодуСравнения.ДатаОкончания);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрРезультат из РезультатЗапроса Цикл
				НовСтр = ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрРезультат);
			КонецЦикла;
			
			ШаблонСообщения = НСтр("ru='Проверьте заполнение производственного календаря на период с %1 по %2.'");
			Если ЭтаФорма.ТаблицаДат.Количество() = 0 И НачалоДня(ОтборПоПериоду.ДатаНачала) < НачалоДня(ОтборПоПериоду.ДатаОкончания) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ОтборПоПериоду.ДатаНачала, "ДЛФ=DD"), Формат(ОтборПоПериоду.ДатаОкончания, "ДЛФ=DD"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Если ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Количество() = 0 И НачалоДня(ОтборПоПериодуСравнения.ДатаНачала) < НачалоДня(ОтборПоПериодуСравнения.ДатаОкончания) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ОтборПоПериодуСравнения.ДатаНачала, "ДЛФ=DD"), Формат(ОтборПоПериодуСравнения.ДатаОкончания, "ДЛФ=DD"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Для каждого СтрРезультат из ЭтаФорма.ТаблицаДатНаТекДату Цикл
			НовСтр = ЭтаФорма.ТаблицаДат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрРезультат);
		КонецЦикла;
		
		Для каждого СтрРезультат из ЭтаФорма.ТаблицаДатНаТекДатуЗаПрошлыйПериод Цикл
			НовСтр = ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрРезультат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеПоказателяВТаблицу(ВыборкаПоказателей, ЭтаФорма)
	ОтборПоПериоду = ЭтаФорма.ОтборПоПериоду;
	ОтборПоПериодуСравнения = ЭтаФорма.ОтборПоПериодуСравнения;
	
	ДанныеПоказателя = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.СхемаКомпоновкиДанных, ОтборПоПериоду, Ложь,, ВыборкаПоказателей.Разделитель);
	ДанныеПоказателяСПериодами = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.СхемаКомпоновкиДанных, ОтборПоПериоду, Истина,, ВыборкаПоказателей.Разделитель);
	
	Если ВыборкаПоказателей.ПолучатьДанныеПрошлогоПериода Тогда
	    ДанныеПоказателяПрошлыйПериод = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.СхемаКомпоновкиДанных, ОтборПоПериодуСравнения, Ложь, Истина, ВыборкаПоказателей.Разделитель);
		ДанныеПоказателяСПериодамиПрошлыйПериод = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.СхемаКомпоновкиДанных, ОтборПоПериоду, Истина, Истина, ВыборкаПоказателей.Разделитель);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоказателей.Разделитель) Тогда
		НоваяСтрока = ЭтаФорма.ДанныеПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоказателей);
		
		НоваяСтрока.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
		НоваяСтрока.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
		
		Если ВыборкаПоказателей.ПолучатьДанныеПрошлогоПериода Тогда
			НоваяСтрока = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоказателей);
			
			НоваяСтрока.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателяПрошлыйПериод, ЭтаФорма.УникальныйИдентификатор);
			НоваяСтрока.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодамиПрошлыйПериод, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеПоказателяПоРазделителю Из ДанныеПоказателя Цикл
		Разделитель = ДанныеПоказателяПоРазделителю.Ключ;
		
		НоваяСтрока = ЭтаФорма.ДанныеПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоказателей);
		НоваяСтрока.Разделитель = Разделитель;
		
		НоваяСтрока.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателяПоРазделителю.Значение, ЭтаФорма.УникальныйИдентификатор);
		НоваяСтрока.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами[Разделитель], ЭтаФорма.УникальныйИдентификатор);
		
		Если ВыборкаПоказателей.ПолучатьДанныеПрошлогоПериода Тогда
			НоваяСтрока = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоказателей);
			НоваяСтрока.Разделитель = Разделитель;
			
			НоваяСтрока.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(?(ДанныеПоказателяПрошлыйПериод[Разделитель] = Неопределено, ДанныеПоказателяПоРазделителю.Значение.СкопироватьКолонки(), ДанныеПоказателяПрошлыйПериод[Разделитель])
																			, ЭтаФорма.УникальныйИдентификатор);
			НоваяСтрока.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(?(ДанныеПоказателяСПериодамиПрошлыйПериод[Разделитель] = Неопределено, ДанныеПоказателяПоРазделителю.Значение.СкопироватьКолонки(), ДанныеПоказателяСПериодамиПрошлыйПериод[Разделитель])
																						,ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Преобразование данных

Функция ПолучитьСтруктураДанныхДляВыводаВМонитор(Знач ТабДанных, Знач ТабДанныхСПериодами, ВариантАнализа, ЭтаФорма) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Показатель = ВариантАнализа.Владелец;
	ТипАнализа = ВариантАнализа.ТипАнализа;
	ИмяКолонкиРесурса = ВариантАнализа.ЗначениеАнализа;
	
	МасАналитикДляПроверки = Новый массив;
	Если ЭтаФорма.ТипПоказателей = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		ИмяКолонкиАналитики = "ОбъектРемонта";
		МасАналитикДляПроверки.Добавить("ОбъектРемонта");
		МасАналитикДляПроверки.Добавить("Подразделение");
		МасАналитикДляПроверки.Добавить("Организация");
	ИначеЕсли ЭтаФорма.ТипПоказателей = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		ИмяКолонкиАналитики = "Подразделение";
		МасАналитикДляПроверки.Добавить("Подразделение");
		МасАналитикДляПроверки.Добавить("Организация");
	Иначе
		ИмяКолонкиАналитики = "Организация";
		МасАналитикДляПроверки.Добавить("Организация");
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ТипАнализа", ТипАнализа);
	СтруктураВозврата.Вставить("ИмяКолонкиРесурса", ИмяКолонкиРесурса);
	СтруктураВозврата.Вставить("ИмяКолонкиАналитики", ИмяКолонкиАналитики);
	
	// Динамика изменения
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения Тогда

		Если НЕ ЕстьПериодИПериодичность(ЭтаФорма, ВариантАнализа, ТабДанныхСПериодами) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанныхСПериодами, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить("Период");
		
		ТабДанныхСПериодами = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанныхСПериодами);
		
	// Покомпонентное сравнение (структура)	
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеСтруктура Тогда

		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить(ИмяКолонкиАналитики);
		
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанных);
		
	// Покомпонентное сравнение (динамика)
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
		
		Если НЕ ЕстьПериодИПериодичность(ЭтаФорма, ВариантАнализа, ТабДанныхСПериодами) Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанныхСПериодами, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТабПериодов = ТабДанныхСПериодами.Скопировать();
		ТабПериодов.Свернуть("Период");
		ТабПериодов.Сортировать("Период");
		СтруктураВозврата.Вставить("ТаблицаПериодов", ТабПериодов);
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить("Период");
		МассивКолонокАналитик.Добавить(ИмяКолонкиАналитики);
				
		ТабДанныхСПериодами = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанныхСПериодами);
			
	// Сравнение с прошлым периодом
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.СравнениеСПрошлымПериодом Тогда
		
		СтрокаПоказателя = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.НайтиСтроки(Новый Структура("Показатель", Показатель));
		Если СтрокаПоказателя.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаПоказателя = СтрокаПоказателя[0];
		
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных) Тогда
			ТабДанныхПрошлогоПериодаИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных);
			ТабДанныхПрошлогоПериода = ТабДанныхПрошлогоПериодаИсх.Скопировать();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЦелевойТрендПоказателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "ЦелевойТренд");
		Если ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон Тогда
			
			ТабДанных.Колонки.Добавить("МинимальноеЗначение", Новый ОписаниеТипов("Число"));
			ТабДанных.Колонки.Добавить("КритическийМинимум", Новый ОписаниеТипов("Число"));
			ТабДанных.Колонки.Добавить("МаксимальноеЗначение", Новый ОписаниеТипов("Число"));
			ТабДанных.Колонки.Добавить("КритическийМаксимум", Новый ОписаниеТипов("Число"));
			
			МассивДопРесурсов = Новый Массив;
			МассивДопРесурсов.Добавить("МинимальноеЗначение");
			МассивДопРесурсов.Добавить("КритическийМинимум");
			МассивДопРесурсов.Добавить("МаксимальноеЗначение");
			МассивДопРесурсов.Добавить("КритическийМаксимум");
			
		Иначе	
			ТабДанных.Колонки.Добавить("ЦелевоеЗначение", Новый ОписаниеТипов("Число"));
			ТабДанных.Колонки.Добавить("КритическоеЗначение", Новый ОписаниеТипов("Число"));
			
			МассивДопРесурсов = Новый Массив;
			МассивДопРесурсов.Добавить("ЦелевоеЗначение");
			МассивДопРесурсов.Добавить("КритическоеЗначение");
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, Истина);
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса);
		
		МассивКолонокАналитик = Новый Массив;
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик, МассивДопРесурсов);
		ТабДанныхПрошлогоПериода = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		ПрименитьОкруглениеКТаблице(ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса);
		
		Значение = ?(ТабДанных.Количество() > 0, ТабДанных.Итог(ИмяКолонкиРесурса), 0);
		ЗначениеПрошлогоПериода = ?(ТабДанныхПрошлогоПериода.Количество() > 0, ТабДанныхПрошлогоПериода.Итог(ИмяКолонкиРесурса), 0); 
		
		СтруктураВозврата.Вставить("Значение", Значение);
		СтруктураВозврата.Вставить("ЗначениеПрошлогоПериода", ЗначениеПрошлогоПериода);
		СтруктураВозврата.Вставить("ЦелевойТренд", ЦелевойТрендПоказателя);  
		
		ЦентрЦелевогоДиапазона = ?(ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон, 
			(ТабДанных.Итог("МинимальноеЗначение") + ТабДанных.Итог("МаксимальноеЗначение")) / 2, 0); 
		СтруктураВозврата.Вставить("ЦентрЦелевогоДиапазона", ЦентрЦелевогоДиапазона);
		
	// Измерение текущего состояния
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЦелевойТрендПоказателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "ЦелевойТренд");
		Если ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон Тогда
			
			ТабДанных.Колонки.Добавить("МинимальноеЗначение", Новый ОписаниеТипов("Число"));
			ТабДанных.Колонки.Добавить("КритическийМинимум", Новый ОписаниеТипов("Число"));
			ТабДанных.Колонки.Добавить("МаксимальноеЗначение", Новый ОписаниеТипов("Число"));
			ТабДанных.Колонки.Добавить("КритическийМаксимум", Новый ОписаниеТипов("Число"));
			
			МассивДопРесурсов = Новый Массив;
			МассивДопРесурсов.Добавить("МинимальноеЗначение");
			МассивДопРесурсов.Добавить("КритическийМинимум");
			МассивДопРесурсов.Добавить("МаксимальноеЗначение");
			МассивДопРесурсов.Добавить("КритическийМаксимум");
			
		Иначе	
			ТабДанных.Колонки.Добавить("ЦелевоеЗначение", Новый ОписаниеТипов("Число"));
			ТабДанных.Колонки.Добавить("КритическоеЗначение", Новый ОписаниеТипов("Число"));
			
			МассивДопРесурсов = Новый Массив;
			МассивДопРесурсов.Добавить("ЦелевоеЗначение");
			МассивДопРесурсов.Добавить("КритическоеЗначение");
		КонецЕсли;
	
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, Истина);
		
		МассивКолонокАналитик = Новый Массив;
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик, МассивДопРесурсов);
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивДопРесурсов);
			
		ТекЗначение = ТабДанных.Итог(ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("Значение", ТекЗначение);
		СтруктураВозврата.Вставить("ЦелевойТренд", ЦелевойТрендПоказателя);
		
		Если ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон Тогда
			СтруктураВозврата.Вставить("МинимальноеЗначение", ТабДанных.Итог("МинимальноеЗначение"));
			СтруктураВозврата.Вставить("КритическийМинимум", ТабДанных.Итог("КритическийМинимум"));
            СтруктураВозврата.Вставить("МаксимальноеЗначение", ТабДанных.Итог("МаксимальноеЗначение"));
			СтруктураВозврата.Вставить("КритическийМаксимум", ТабДанных.Итог("КритическийМаксимум"));	
		Иначе
			СтруктураВозврата.Вставить("ЦелевоеЗначение", ТабДанных.Итог("ЦелевоеЗначение"));
			СтруктураВозврата.Вставить("КритическоеЗначение", ТабДанных.Итог("КритическоеЗначение"));
		КонецЕсли;

	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки)
	
	ШаблонСообщенияНетРесурса = НСтр("ru='В таблице данных для варианта анализа ""%1"" не найдено поле ""%2"".'");
	
	ЕстьРесурс = ТабДанных.Колонки.Найти(ИмяКолонкиРесурса) <> Неопределено;
	Если НЕ ЕстьРесурс Тогда
		ТекстСообщения = СтрШаблон(ШаблонСообщенияНетРесурса, ВариантАнализа, ИмяКолонкиРесурса);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Для каждого ИмяКолонкиАналитики из МасАналитикДляПроверки Цикл
		ЕстьАналитика = ТабДанных.Колонки.Найти(ИмяКолонкиАналитики) <> Неопределено;
		Если НЕ ЕстьАналитика Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщенияНетРесурса, ВариантАнализа, ИмяКолонкиАналитики);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ЕстьПериодИПериодичность(ЭтаФорма, ВариантАнализа, ТабДанных, ДляИнтегральнойОценки = Ложь)
	
	ШаблонСообщенияНетОбязательногоПоля = НСтр("ru='В таблице данных для варианта анализа ""%1"" отсутствует обязательное поле ""%2"" (Тип анализа ""%3"")'");
	ШаблонСообщенияНеЗаданаПериодичность = НСтр("ru='В  настройках монитора KPI не задана периодичность. Данные по варианту анализа ""%1"" выведены не будут (Тип анализа ""%2"")'");
	ШаблонСообщенияДляИнтегральнойОценки = НСтр("ru='В  настройках монитора KPI не задана периодичность. Данные в интегральную оценку выведены не будут'");
	
	ЕстьПериод = ТабДанных.Колонки.Найти("Период") <> Неопределено;
	Если НЕ ЕстьПериод Тогда
		
		Если ДляИнтегральнойОценки Тогда
			
			ТекстСообщения = ШаблонСообщенияДляИнтегральнойОценки;
			
		ИначеЕсли (НЕ ЭтаФорма.ИспользоватьДетализациюПоПериоду	ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду)) Тогда
			
			Если ВариантАнализа.ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения 
				ИЛИ ВариантАнализа.ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияНеЗаданаПериодичность, ВариантАнализа, ВариантАнализа.ТипАнализа);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщенияНетОбязательногоПоля, ВариантАнализа, "Период", ВариантАнализа.ТипАнализа);
			КонецЕсли;
			
		Иначе
			ТекстСообщения = СтрШаблон(ШаблонСообщенияНетОбязательногоПоля, ВариантАнализа, "Период", ВариантАнализа.ТипАнализа);
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции


Функция СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик, МассивДопРесурсов = Неопределено)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	// запрос помещения во временную таблицу
	ЗапросВыбораСхемыЗапроса = СхемаЗапроса.ПакетЗапросов.Получить(0);
	ОператорВыбора = ЗапросВыбораСхемыЗапроса.Операторы.Получить(0);
	//ОператорВыбора.ВыбиратьРазличные = Истина;
	
	Источник = ОператорВыбора.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&ТабДанных", "ТабДанных");
	ЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения = "ТабДанных";
	
	Для каждого ИмяКолонкиАналитики из МассивКолонокАналитик Цикл
		ТекстВыражения = "ТабДанных."+ИмяКолонкиАналитики;
		ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
		//ОператорВыбора.Группировка.Добавить(Новый ВыражениеСхемыЗапроса(ТекстВыражения));
	КонецЦикла;

	ТекстВыражения = "ТабДанных."+ИмяКолонкиРесурса;
	ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
	
	Если МассивДопРесурсов <> Неопределено Тогда
		Для каждого ИмяДопРесурса из МассивДопРесурсов Цикл
			ТекстВыражения = "ТабДанных."+ИмяДопРесурса;
			ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
		КонецЦикла;
	КонецЕсли;
	
	// запрос группировки и сортировки
	ЗапросВыбораСхемыЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ОператорВыбора = ЗапросВыбораСхемыЗапроса.Операторы.Получить(0);
	
	Источник = ОператорВыбора.Источники.Добавить("ТабДанных");
	
	Для каждого ИмяКолонкиАналитики из МассивКолонокАналитик Цикл
		ТекстВыражения = "ТабДанных."+ИмяКолонкиАналитики;
		ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
		ОператорВыбора.Группировка.Добавить(Новый ВыражениеСхемыЗапроса(ТекстВыражения));
	КонецЦикла;

	АгрегатнаяФункция = "СУММА";
	Если ВариантАнализа.АгрегацияДанных = Перечисления.торо_АгрегацияДанных.Максимум Тогда
		АгрегатнаяФункция = "МАКСИМУМ";
	ИначеЕсли ВариантАнализа.АгрегацияДанных = Перечисления.торо_АгрегацияДанных.Минимум Тогда
		АгрегатнаяФункция = "МИНИМУМ";
	ИначеЕсли ВариантАнализа.АгрегацияДанных = Перечисления.торо_АгрегацияДанных.Среднее Тогда
		АгрегатнаяФункция = "СРЕДНЕЕ";
	КонецЕсли;
	ТекстВыражения = АгрегатнаяФункция+"(ТабДанных."+ИмяКолонкиРесурса+")";
	ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
	
	Если МассивДопРесурсов <> Неопределено Тогда
		Для каждого ИмяДопРесурса из МассивДопРесурсов Цикл
			ТекстВыражения = АгрегатнаяФункция+"(ТабДанных."+ИмяДопРесурса+")";
			ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
		КонецЦикла;
	КонецЕсли;
	
	// сортировка

	ТабЛучшихХудших = Неопределено;
	
	Если ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.ПоВозрастанию Тогда
		ПолеПорядка = ЗапросВыбораСхемыЗапроса.Порядок.Добавить(ИмяКолонкиРесурса);
		ПолеПорядка.Направление = НаправлениеПорядкаСхемыЗапроса.ПоВозрастанию;
		
	ИначеЕсли ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.ПоУбыванию Тогда
		ПолеПорядка = ЗапросВыбораСхемыЗапроса.Порядок.Добавить(ИмяКолонкиРесурса);
		ПолеПорядка.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбыванию;
		
	ИначеЕсли ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.Лучшие 
		ИЛИ ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.Худшие Тогда
		
		Если МассивКолонокАналитик.Количество() <= 1 Тогда
			
			ПолеПорядка = ЗапросВыбораСхемыЗапроса.Порядок.Добавить(ИмяКолонкиРесурса);
			Если ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.Лучшие Тогда
				ПолеПорядка.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбыванию;
			Иначе
				ПолеПорядка.Направление = НаправлениеПорядкаСхемыЗапроса.ПоВозрастанию;
			КонецЕсли;
			ОператорВыбора.КоличествоПолучаемыхЗаписей = ВариантАнализа.КоличествоВыбираемыхЭлементов;
			
		Иначе
			
			МассивКолонокАналитикКопия = Новый Массив;
			ОснАналитика = МассивКолонокАналитик[1];
			МассивКолонокАналитикКопия.Добавить(ОснАналитика);
			ТабЛучшихХудших = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитикКопия, МассивДопРесурсов);
			
			ОператорВыбора.Отбор.Добавить("ТабДанных."+ОснАналитика+" В(&СписокОтбора)");
			
		КонецЕсли;
		
	Иначе // не используется, сортируем по умолчанию
		ЗапросВыбораСхемыЗапроса.Автопорядок = Истина;
	КонецЕсли;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТабДанных", ТабДанных);
	Если ТабЛучшихХудших <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокОтбора", ТабЛучшихХудших.ВыгрузитьКолонку(ОснАналитика));
	КонецЕсли;
	
	РезультатСвертки = Запрос.Выполнить().Выгрузить();
	
	Если ТабДанных.Количество() = 0 Тогда
		РезультатСвертки.Очистить();
	КонецЕсли;
	
	Возврат РезультатСвертки;
	
КонецФункции              

Процедура ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивДопРесурсов = Неопределено)
	
	Разрядность = ВариантАнализа.ОкруглениеДробнойЧасти;
	
	Для каждого СтрокаТаблицы из ТабДанных Цикл
		
		Если ТипЗнч(СтрокаТаблицы[ИмяКолонкиРесурса]) = Тип("Число") Тогда
			СтрокаТаблицы[ИмяКолонкиРесурса] = Окр(СтрокаТаблицы[ИмяКолонкиРесурса], Разрядность); 
		КонецЕсли;
		
		Если МассивДопРесурсов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Для каждого ИмяДопРесурса из МассивДопРесурсов Цикл
			Если ТипЗнч(СтрокаТаблицы[ИмяДопРесурса]) = Тип("Число") Тогда
				СтрокаТаблицы[ИмяДопРесурса] = Окр(СтрокаТаблицы[ИмяДопРесурса], Разрядность);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры              

Процедура ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, ЗаписыватьЦелевыеЗначенияВТаблицу = Ложь, ПринудительнаяНормализация = Ложь)
	
	Показатель = ВариантАнализа.Владелец;
	
	Если ПринудительнаяНормализация ИЛИ ВариантАнализа.ВыполнитьНормализацию Тогда
		
		Для каждого Строка из ТабДанных Цикл
			
			Значения = ПолучитьЦелевыеЗначенияДляСтрокиТаблицы(ЭтаФорма, Показатель, Строка, ТабДанных.Колонки);
			
			Если (Значения.ЦелевойТренд = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.ПустаяСсылка()
				ИЛИ Значения.ЦелевойТренд = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Максимизация
				ИЛИ Значения.ЦелевойТренд = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Минимизация)
				И ЗначениеЗаполнено(Значения.ЦелевоеЗначение) Тогда
				
				Строка[ИмяКолонкиРесурса] = (Строка[ИмяКолонкиРесурса] - Значения.ЦелевоеЗначение) / Значения.ЦелевоеЗначение * 100;	
				
				Если ЗаписыватьЦелевыеЗначенияВТаблицу Тогда
					Строка.ЦелевоеЗначение = 0;
					Если (ЗначениеЗаполнено(Значения.КритическоеЗначение) И Значения.КритическоеЗначение > Значения.ЦелевоеЗначение
						И Значения.ЦелевойТренд = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Минимизация)
						ИЛИ (ЗначениеЗаполнено(Значения.КритическоеЗначение) И Значения.КритическоеЗначение < Значения.ЦелевоеЗначение
						И (Значения.ЦелевойТренд = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.ПустаяСсылка()
						ИЛИ Значения.ЦелевойТренд = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Максимизация)) Тогда
						// Проверка на корректное заполнение критического значения.
						Строка.КритическоеЗначение = (Значения.КритическоеЗначение  - Значения.ЦелевоеЗначение) / Значения.ЦелевоеЗначение * 100;
					Иначе
						Строка.КритическоеЗначение = 0;
					КонецЕсли;
				КонецЕсли;	

			ИначеЕсли Значения.ЦелевойТренд = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон 
				И ЗначениеЗаполнено(Значения.МинимальноеЗначение) И ЗначениеЗаполнено(Значения.МаксимальноеЗначение) Тогда	
				
				СреднееЗначение = (Значения.МинимальноеЗначение + Значения.МаксимальноеЗначение) / 2;
			
				Строка[ИмяКолонкиРесурса] = (Строка[ИмяКолонкиРесурса] - СреднееЗначение) / СреднееЗначение * 100;
				
				Если ЗаписыватьЦелевыеЗначенияВТаблицу Тогда
					Строка.МинимальноеЗначение = (Значения.МинимальноеЗначение - СреднееЗначение) / СреднееЗначение * 100;
					Строка.КритическийМинимум = (Значения.КритическийМинимум - СреднееЗначение) / СреднееЗначение * 100;
					Строка.МаксимальноеЗначение = (Значения.МаксимальноеЗначение - СреднееЗначение) / СреднееЗначение * 100;
					Строка.КритическийМаксимум = (Значения.КритическийМаксимум - СреднееЗначение) / СреднееЗначение * 100;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
	ИначеЕсли ЗаписыватьЦелевыеЗначенияВТаблицу Тогда
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			СтруктураЦелевыхЗначений = ПолучитьЦелевыеЗначенияДляСтрокиТаблицы(ЭтаФорма, Показатель, СтрокаТаблицы, ТабДанных.Колонки);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураЦелевыхЗначений);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры 

Функция ПолучитьЦелевыеЗначенияДляСтрокиТаблицы(ЭтаФорма, Показатель, СтрокаТаблицы, КолонкиТаблицы)
	
	ЦелевыеЗначенияПоказателей = ЭтаФорма.ЦелевыеЗначенияПоказателей;
	
	СтруктураЦелевыхЗначений = Новый Структура("ЦелевоеЗначение, КритическоеЗначение, МинимальноеЗначение," + 
		"КритическийМинимум, МаксимальноеЗначение, КритическийМаксимум, ЦелевойТренд");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Показатель", Показатель);
	
	Если КолонкиТаблицы.Найти("ОбъектРемонта") <> Неопределено Тогда
		
		СтруктураПоиска.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		СтруктураПоиска.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		СтруктураПоиска.Вставить("ОбъектРемонта", СтрокаТаблицы.ОбъектРемонта);
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;
		
		СтруктураПоиска.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("ОбъектРемонта", СтрокаТаблицы.ОбъектРемонта);
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;


		СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураПоиска.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		СтруктураПоиска.Вставить("ОбъектРемонта", СтрокаТаблицы.ОбъектРемонта);
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;
		
		СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("ОбъектРемонта", СтрокаТаблицы.ОбъектРемонта);
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КолонкиТаблицы.Найти("Подразделение") <> Неопределено Тогда
		
		СтруктураПоиска.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;

		СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
	СтруктураПоиска.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	СтруктураПоиска.Вставить("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
	НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
		Возврат СтруктураЦелевыхЗначений;
	КонецЕсли;
	
	Возврат СтруктураЦелевыхЗначений;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// Вывод данных

Процедура ВывестиДанныеПоказателяВДиаграмму(СтруктураДанныхДляВывода, ВариантАнализа,  Диаграмма, ЭтаФорма) Экспорт

	Показатель = ВариантАнализа.Владелец;
	ПримененаНормализация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ВыполнитьНормализацию");
	ТипАнализа = СтруктураДанныхДляВывода.ТипАнализа; 
	ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
	ИмяКолонкиАналитики = СтруктураДанныхДляВывода.ИмяКолонкиАналитики;
	ЕдИзм = ПолучитьЕдиницуИзмерения(Показатель, ВариантАнализа);
	СтрокаЕдИзм = ?(ЗначениеЗаполнено(ЕдИзм), " "+ЕдИзм, "");
	
	Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
	Диаграмма.ВидПодписей = ?(ВариантАнализа.ОтображатьПодписи, ВидПодписейКДиаграмме.Значение, ВидПодписейКДиаграмме.Нет);
	
	// Динамика изменения
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		ТабДанных.Сортировать("Период");
		
		Диаграмма.ПропускатьБазовоеЗначение = НЕ ВариантАнализа.ОтображатьНулевыеЗначения;
		Диаграмма.ОсьЗначений.БазовоеЗначение = 0;
		ФорматДаты = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
		
		Для Каждого Стр Из ТабДанных Цикл
			ТекущаяТочка = Диаграмма.УстановитьТочку(Стр.Период);
			ТекущаяТочка.Текст = Формат(Стр.Период, ФорматДаты);
			ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(1);
			ТекущаяСерияДиаграммы.Текст = "";
			ТекстЗначения = ТекущаяТочка.Текст + " / " + Строка(Стр[ИмяКолонкиРесурса])+СтрокаЕдИзм;
			Диаграмма.УстановитьЗначение(ТекущаяТочка,ТекущаяСерияДиаграммы,Стр[ИмяКолонкиРесурса],,ТекстЗначения);
		КонецЦикла;
		
		// Покомпонентное сравнение (структура)	
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеСтруктура Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		
		ТекущаяТочка = Диаграмма.УстановитьТочку(1);
		ТекущаяТочка.Текст = " ";
		Для Каждого Стр Из ТабДанных Цикл
			Аналитика = Стр[ИмяКолонкиАналитики];
			ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(Аналитика);
			ТекущаяСерияДиаграммы.Значение = Аналитика;
			ТекущаяСерияДиаграммы.Текст = Аналитика;
			ТекстЗначения = ТекущаяСерияДиаграммы.Текст + " / " + Строка(Стр[ИмяКолонкиРесурса])+СтрокаЕдИзм;
			Диаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерияДиаграммы, Стр[ИмяКолонкиРесурса],,ТекстЗначения);
		КонецЦикла;
		
		// Покомпонентное сравнение (динамика)
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		ТабПериодов = СтруктураДанныхДляВывода.ТаблицаПериодов;
		
		СтрокаСвертки = "Период,"+ИмяКолонкиАналитики;
		ТабДанных.Индексы.Добавить(СтрокаСвертки);
		
		ТабАналитик = ТабДанных.Скопировать();
		ТабАналитик.Свернуть(ИмяКолонкиАналитики);
		
		Диаграмма.ПропускатьБазовоеЗначение = НЕ ВариантАнализа.ОтображатьНулевыеЗначения;
		Диаграмма.ОсьЗначений.БазовоеЗначение = 0;
		
		ФорматДаты = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
		
		Для каждого Стр Из ТабПериодов Цикл
			ТекущаяТочка = Диаграмма.УстановитьТочку(Стр.Период);
			ТекущаяТочка.Текст = Формат(Стр.Период, ФорматДаты);
			Для Каждого СтрАналитика Из ТабАналитик Цикл
				Аналитика = СтрАналитика[ИмяКолонкиАналитики];
				Значение = ТабДанных.НайтиСтроки(Новый Структура(СтрокаСвертки,Стр.Период, Аналитика));
				Если Значение.Количество() > 0 Тогда
					Если НЕ ЗначениеЗаполнено(Аналитика) И Значение[0][ИмяКолонкиРесурса] = 0 Тогда
						Продолжить;
					КонецЕсли;
					ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(Аналитика);
					ТекущаяСерияДиаграммы.Значение = Аналитика;
					ТекущаяСерияДиаграммы.Текст = Аналитика;
					
					ТекстЗначения = ТекущаяСерияДиаграммы.Текст+" "+ТекущаяТочка.Текст + " / " + Строка(Значение[0][ИмяКолонкиРесурса])+СтрокаЕдИзм;
					Диаграмма.УстановитьЗначение(ТекущаяТочка,ТекущаяСерияДиаграммы,Значение[0][ИмяКолонкиРесурса],,ТекстЗначения);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Сравнение с прошлым периодом
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.СравнениеСПрошлымПериодом Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЗначениеПрошлогоПериода = СтруктураДанныхДляВывода.ЗначениеПрошлогоПериода;
		
		ТекущаяТочка = Диаграмма.Точки.Добавить(1);
		ТекущаяТочка.Текст = "";
		
		ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию("Прошлый период");
		ТекущаяСерияДиаграммы.Значение = "Прошлый период";
		ТекущаяСерияДиаграммы.Текст = "Прошлый период";
		ТекстЗначения = Строка(ЗначениеПрошлогоПериода)+СтрокаЕдИзм;
		Диаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерияДиаграммы, ЗначениеПрошлогоПериода,,ТекстЗначения);
		
		ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию("Текущий период");
		ТекущаяСерияДиаграммы.Значение = "Текущий период";
		ТекущаяСерияДиаграммы.Текст = "Текущий период";
		ТекстЗначения = Строка(Значение)+СтрокаЕдИзм;
		Диаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерияДиаграммы, Значение,,ТекстЗначения);
		
		// Измерение текущего состояния
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЦелевойТрендПоказателя = СтруктураДанныхДляВывода.ЦелевойТренд;
		
		Если ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон Тогда
			МинимальноеЗначение = СтруктураДанныхДляВывода.МинимальноеЗначение;
			КритическийМинимум = СтруктураДанныхДляВывода.КритическийМинимум;
			МаксимальноеЗначение = СтруктураДанныхДляВывода.МаксимальноеЗначение;
			КритическийМаксимум = СтруктураДанныхДляВывода.КритическийМаксимум;
		Иначе  
			ЦелевоеЗначение = СтруктураДанныхДляВывода.ЦелевоеЗначение;	
			КритическоеЗначение = СтруктураДанныхДляВывода.КритическоеЗначение;
		КонецЕсли;
				
		Диаграмма.ОтображатьЛегенду = Ложь;
		
		МинимальноеЗначениеДиаграммы = Неопределено;
		МаксимальноеЗначениеДиаграммы = Неопределено;
		
		Если (ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Максимизация
			ИЛИ ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.ПустаяСсылка())
			И (ЗначениеЗаполнено(ЦелевоеЗначение) ИЛИ ПримененаНормализация) Тогда  // При нормализации ЦелевоеЗначение = 0%.
						
			Минимум = ?(ЗначениеЗаполнено(КритическоеЗначение), Мин(Значение, КритическоеЗначение), Мин(Значение, ЦелевоеЗначение));
			Максимум =  Макс(Значение, ЦелевоеЗначение);
			МинимальноеЗначениеДиаграммы = Минимум - Минимум * ?(Минимум < 0, -1, 1);
			МаксимальноеЗначениеДиаграммы = Максимум + Максимум * ?(Максимум < 0, -1, 1);
			КритическоеЗначениеЗаполненоКорректно = ЗначениеЗаполнено(КритическоеЗначение) И КритическоеЗначение < ЦелевоеЗначение;
			
			Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
			Интервал.Начало = ЦелевоеЗначение;
			Интервал.Конец = МаксимальноеЗначениеДиаграммы;
			Интервал.Цвет = WebЦвета.Зеленый;
			Интервал.ПроцентПолупрозрачности = 0;
			Интервал.Подсказка = НСтр("ru = 'Выше целевого значения'");
			
			Если КритическоеЗначениеЗаполненоКорректно Тогда
				Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
				Интервал.Начало = КритическоеЗначение;
				Интервал.Конец = ЦелевоеЗначение;
				Интервал.Цвет = WebЦвета.Оранжевый;
				Интервал.ПроцентПолупрозрачности = 0;
				Интервал.Подсказка = НСтр("ru = 'Интервал между критическим и целевым значениями'");
			КонецЕсли;
			
			Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
			Интервал.Начало = МинимальноеЗначениеДиаграммы;
			Интервал.Конец = ?(КритическоеЗначениеЗаполненоКорректно, КритическоеЗначение, ЦелевоеЗначение);
			Интервал.Цвет = WebЦвета.Красный;
			Интервал.ПроцентПолупрозрачности = 0;
			Интервал.Подсказка = НСтр("ru = 'Ниже критического значения'"); 
			
		ИначеЕсли ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Минимизация
			И (ЗначениеЗаполнено(ЦелевоеЗначение) ИЛИ ПримененаНормализация) Тогда	
			
			Минимум = Мин(Значение, ЦелевоеЗначение);
			Максимум = ?(ЗначениеЗаполнено(КритическоеЗначение), Макс(Значение, КритическоеЗначение), Макс(Значение, ЦелевоеЗначение));
			МинимальноеЗначениеДиаграммы = Минимум - Минимум * ?(Минимум < 0, -1, 1);
			МаксимальноеЗначениеДиаграммы = Максимум + Максимум * ?(Максимум < 0, -1, 1);
			КритическоеЗначениеЗаполненоКорректно = ЗначениеЗаполнено(КритическоеЗначение) И КритическоеЗначение > ЦелевоеЗначение;
			
			Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
			Интервал.Начало = МинимальноеЗначениеДиаграммы;
			Интервал.Конец = ЦелевоеЗначение;
			Интервал.Цвет = WebЦвета.Зеленый;
			Интервал.ПроцентПолупрозрачности = 0;
			Интервал.Подсказка = НСтр("ru = 'Ниже целевого значения'");
			
			Если КритическоеЗначениеЗаполненоКорректно Тогда
				Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
				Интервал.Начало = ЦелевоеЗначение;
				Интервал.Конец = КритическоеЗначение;
				Интервал.Цвет = WebЦвета.Оранжевый;
				Интервал.ПроцентПолупрозрачности = 0;
				Интервал.Подсказка = НСтр("ru = 'Интервал между целевым и критическим значениями'");
			КонецЕсли;
			
			Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
			Интервал.Начало = ?(КритическоеЗначениеЗаполненоКорректно, КритическоеЗначение, ЦелевоеЗначение);
			Интервал.Конец = МаксимальноеЗначениеДиаграммы;
			Интервал.Цвет = WebЦвета.Красный;
			Интервал.ПроцентПолупрозрачности = 0;
			Интервал.Подсказка = НСтр("ru = 'Выше критического значения'"); 
			
		ИначеЕсли ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон
			И ЗначениеЗаполнено(МинимальноеЗначение) И ЗначениеЗаполнено(МаксимальноеЗначение) Тогда
			
			Минимум = ?(ЗначениеЗаполнено(КритическийМинимум), Мин(Значение, КритическийМинимум), Мин(Значение, МинимальноеЗначение));
			Максимум = ?(ЗначениеЗаполнено(КритическийМинимум), Макс(Значение, КритическийМаксимум), Макс(Значение, МаксимальноеЗначение));
			МинимальноеЗначениеДиаграммы = Минимум - Минимум * ?(Минимум < 0, -1, 1);
			МаксимальноеЗначениеДиаграммы = Максимум + Максимум * ?(Максимум < 0, -1, 1);

			Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
			Интервал.Начало = МинимальноеЗначение;
			Интервал.Конец = МаксимальноеЗначение;
			Интервал.Цвет = WebЦвета.Зеленый;
			Интервал.ПроцентПолупрозрачности = 0;
			Интервал.Подсказка = "Целевой интервал";
			
			Если ЗначениеЗаполнено(КритическийМинимум) Тогда
				Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
				Интервал.Начало = КритическийМинимум;
				Интервал.Конец = МинимальноеЗначение;
				Интервал.Цвет = WebЦвета.Оранжевый;
				Интервал.ПроцентПолупрозрачности = 0;
				Интервал.Подсказка = НСтр("ru = 'Интервал между критическим минимумом и минимумом'");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КритическийМаксимум) Тогда
				Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
				Интервал.Начало = МаксимальноеЗначение;
				Интервал.Конец = КритическийМаксимум;
				Интервал.Цвет = WebЦвета.Оранжевый;
				Интервал.ПроцентПолупрозрачности = 0;
				Интервал.Подсказка = НСтр("ru = 'Интервал между максимумом и критическим максимумом'");
			КонецЕсли;
			
			Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
			Интервал.Начало = МинимальноеЗначениеДиаграммы;
			Интервал.Конец = ?(ЗначениеЗаполнено(КритическийМинимум), КритическийМинимум, МинимальноеЗначение);
			Интервал.Цвет = WebЦвета.Красный;
			Интервал.ПроцентПолупрозрачности = 0;
			Интервал.Подсказка = "Ниже критического значения";
			
			Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
			Интервал.Начало = ?(ЗначениеЗаполнено(КритическийМаксимум), КритическийМаксимум, МаксимальноеЗначение);
			Интервал.Конец = МаксимальноеЗначениеДиаграммы;
			Интервал.Цвет = WebЦвета.Красный;
			Интервал.ПроцентПолупрозрачности = 0;
			Интервал.Подсказка = "Выше критического значения";
		КонецЕсли;
		
		Если Не МинимальноеЗначениеДиаграммы = Неопределено И 
			Не МаксимальноеЗначениеДиаграммы = Неопределено Тогда
			
			Диаграмма.ОсьЗначений.МинимальноеЗначение = МинимальноеЗначениеДиаграммы;
			Диаграмма.ОсьЗначений.МаксимальноеЗначение = МаксимальноеЗначениеДиаграммы; 
			Диаграмма.ОсьЗначений.СпособОпределенияМинимальногоЗначения = СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
			Диаграмма.ОсьЗначений.СпособОпределенияМаксимальногоЗначения = СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
		КонецЕсли;
		
		Диаграмма.ОтображениеЗначенияИзмерительнойДиаграммы = ОтображениеЗначенияИзмерительнойДиаграммы.Стрелка;
		текТочка = Диаграмма.Точки.Добавить(ЭтаФорма.ОтборПоПериоду.ДатаОкончания);
		текСерия = Диаграмма.Серии.Добавить(Показатель);
		ТекстЗначения = Строка(Значение)+СтрокаЕдИзм;
		Диаграмма.УстановитьЗначение(текТочка, текСерия, Значение,, ТекстЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДанныеПоказателяВКраткомВиде(СтруктураДанныхДляВывода, ВариантАнализа, СтрокаРезультат) Экспорт
	
	Показатель = ВариантАнализа.Владелец;
	ТипАнализа = СтруктураДанныхДляВывода.ТипАнализа;
	ПримененаНормализация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ВыполнитьНормализацию");
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(Показатель, ВариантАнализа);
	
	// Сравнение с прошлым периодом
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.СравнениеСПрошлымПериодом Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЗначениеПрошлогоПериода = СтруктураДанныхДляВывода.ЗначениеПрошлогоПериода;
		ЦелевойТрендПоказателя = СтруктураДанныхДляВывода.ЦелевойТренд;
		ЦентрЦелевогоДиапазона = СтруктураДанныхДляВывода.ЦентрЦелевогоДиапазона;
		
		ПроцентИзменения = ОКР(?(ЗначениеПрошлогоПериода = 0, 100, (Значение-ЗначениеПрошлогоПериода)*100/ЗначениеПрошлогоПериода), ВариантАнализа.ОкруглениеДробнойЧасти);
		
		ТекстСтроки1 = Формат(Значение, "ЧН=0") + " " + ЕдиницаИзмерения;
		
		Если (ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Максимизация
			ИЛИ ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.ПустаяСсылка()) Тогда
			
			Если Значение > ЗначениеПрошлогоПериода Тогда
				ЦветШрифта = WebЦвета.Зеленый;
			ИначеЕсли Значение < ЗначениеПрошлогоПериода Тогда	
				ЦветШрифта = WebЦвета.Красный;
			КонецЕсли;  
			
		ИначеЕсли ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Минимизация Тогда	
			
			Если Значение < ЗначениеПрошлогоПериода Тогда
				ЦветШрифта = WebЦвета.Зеленый;
			ИначеЕсли Значение > ЗначениеПрошлогоПериода Тогда	
				ЦветШрифта = WebЦвета.Красный;
			КонецЕсли; 
			
		ИначеЕсли ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон Тогда
			
			РасстояниеДоЦентраДиапазона = 
				ЦентрЦелевогоДиапазона - Значение * ?((ЦентрЦелевогоДиапазона - Значение) < 0, -1, 1);
			РасстояниеДоЦентраДиапазонаПрошлыйПериод = 
				ЦентрЦелевогоДиапазона - ЗначениеПрошлогоПериода * ?((ЦентрЦелевогоДиапазона - ЗначениеПрошлогоПериода) < 0, -1, 1); 
			
			Если РасстояниеДоЦентраДиапазона < РасстояниеДоЦентраДиапазонаПрошлыйПериод Тогда
				ЦветШрифта = WebЦвета.Зеленый;
			ИначеЕсли РасстояниеДоЦентраДиапазона > РасстояниеДоЦентраДиапазонаПрошлыйПериод Тогда	
				ЦветШрифта = WebЦвета.Красный;
			КонецЕсли; 
		КонецЕсли;
		
		Если Значение = ЗначениеПрошлогоПериода Тогда
			СимволДельты = "";
			ЦветШрифта = WebЦвета.Черный;
		ИначеЕсли Значение > ЗначениеПрошлогоПериода Тогда
			СимволДельты = "▲";	
		ИначеЕсли Значение < ЗначениеПрошлогоПериода Тогда
			СимволДельты = "▼";	
		КонецЕсли;
		
		ТекстСтроки2 = СимволДельты + " " + Формат(ПроцентИзменения, "ЧН=0") + "% / "
							+ Формат(ЗначениеПрошлогоПериода, "ЧН=0") + " " + ЕдиницаИзмерения;
							
		СтрокаЗначенияПоказателя = Новый ФорматированнаяСтрока(ТекстСтроки1, Новый Шрифт("Arial", 20, Истина), ЦветШрифта);
		СтрокаРасшифровкиПоказателя = Новый ФорматированнаяСтрока(ТекстСтроки2, Новый Шрифт("Arial", 10), ЦветШрифта);
		
		СтрокаРезультат = Новый ФорматированнаяСтрока(СтрокаЗначенияПоказателя, Символы.ПС, СтрокаРасшифровкиПоказателя);
		
	// Измерение текущего состояния
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЦелевойТрендПоказателя = СтруктураДанныхДляВывода.ЦелевойТренд;
		
		Если ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон Тогда
			МинимальноеЗначение = СтруктураДанныхДляВывода.МинимальноеЗначение;
			КритическийМинимум = СтруктураДанныхДляВывода.КритическийМинимум;
			МаксимальноеЗначение = СтруктураДанныхДляВывода.МаксимальноеЗначение;
			КритическийМаксимум = СтруктураДанныхДляВывода.КритическийМаксимум;
		Иначе  
			ЦелевоеЗначение = СтруктураДанныхДляВывода.ЦелевоеЗначение;	
			КритическоеЗначение = СтруктураДанныхДляВывода.КритическоеЗначение;
		КонецЕсли;
		
		Если (ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Максимизация
			ИЛИ ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.ПустаяСсылка())
			И (ЗначениеЗаполнено(ЦелевоеЗначение) ИЛИ ПримененаНормализация) Тогда // При нормализации ЦелевоеЗначение = 0%.
			                                     
			Если Значение >= ЦелевоеЗначение Тогда
				ЦветШрифта = WebЦвета.Зеленый;
			ИначеЕсли ЗначениеЗаполнено(КритическоеЗначение) И Значение >= КритическоеЗначение Тогда	
				ЦветШрифта = WebЦвета.Оранжевый;	
			Иначе 	
				ЦветШрифта = WebЦвета.Красный;
			КонецЕсли;  
			
		ИначеЕсли ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Минимизация
			И (ЗначениеЗаполнено(ЦелевоеЗначение) ИЛИ ПримененаНормализация) Тогда	
			
			Если Значение <= ЦелевоеЗначение Тогда
				ЦветШрифта = WebЦвета.Зеленый;
			ИначеЕсли ЗначениеЗаполнено(КритическоеЗначение) И Значение <= КритическоеЗначение Тогда	
				ЦветШрифта = WebЦвета.Оранжевый;	
			Иначе 	
				ЦветШрифта = WebЦвета.Красный;
			КонецЕсли;  
			
		ИначеЕсли ЦелевойТрендПоказателя = Перечисления.торо_ВидыЦелевыхТрендовПоказателейKPI.Диапазон
			И ЗначениеЗаполнено(МинимальноеЗначение) И ЗначениеЗаполнено(МаксимальноеЗначение) Тогда
			
			Если Значение >= МинимальноеЗначение И Значение <= МаксимальноеЗначение Тогда
				ЦветШрифта = WebЦвета.Зеленый;
			ИначеЕсли ЗначениеЗаполнено(КритическийМаксимум) И Значение <= КритическийМаксимум И Значение > МаксимальноеЗначение Тогда
				ЦветШрифта = WebЦвета.Оранжевый;	
			ИначеЕсли ЗначениеЗаполнено(КритическийМинимум) И Значение >= КритическийМинимум И Значение < МинимальноеЗначение Тогда	
				ЦветШрифта = WebЦвета.Оранжевый;	
			Иначе 	
				ЦветШрифта = WebЦвета.Красный;
			КонецЕсли; 
		КонецЕсли;
		
		ТекстСтроки = Формат(Значение, "ЧН=0") + " " + ЕдиницаИзмерения;
		
		РеквизитРезультат = Новый ФорматированнаяСтрока(ТекстСтроки, Новый Шрифт("Arial", 20, Истина), ЦветШрифта); 
		СтрокаРезультат = РеквизитРезультат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДанныеПоказателяВТаблицу(СтруктураДанныхДляВывода, ВариантАнализа, РеквизитРезультат) Экспорт

	ТипАнализа = СтруктураДанныхДляВывода.ТипАнализа;
	ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
	ИмяКолонкиАналитики = СтруктураДанныхДляВывода.ИмяКолонкиАналитики;
	
	// Динамика изменения
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			НовСтр = РеквизитРезультат.Добавить();
			НовСтр.Период = СтрокаТаблицы.Период;
			НовСтр.Значение = СтрокаТаблицы[ИмяКолонкиРесурса];
		КонецЦикла;
		
	// Покомпонентное сравнение (структура)	
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеСтруктура Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			НовСтр = РеквизитРезультат.Добавить();
			НовСтр.Разрез = СтрокаТаблицы[ИмяКолонкиАналитики];
			НовСтр.Значение = СтрокаТаблицы[ИмяКолонкиРесурса];
		КонецЦикла;
		
	// Покомпонентное сравнение (динамика)
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			НовСтр = РеквизитРезультат.Добавить();
			НовСтр.Период = СтрокаТаблицы.Период;
			НовСтр.Разрез = СтрокаТаблицы[ИмяКолонкиАналитики];
			НовСтр.Значение = СтрокаТаблицы[ИмяКолонкиРесурса];
		КонецЦикла;
			
	// Сравнение с прошлым периодом
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.СравнениеСПрошлымПериодом Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЗначениеПрошлогоПериода = СтруктураДанныхДляВывода.ЗначениеПрошлогоПериода;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Прошлый период";
		НовСтр.Значение = ЗначениеПрошлогоПериода;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Текущий период";
		НовСтр.Значение = Значение;
			
	// Измерение текущего состояния
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		
		ЦелевоеЗначение = СтруктураДанныхДляВывода.ЦелевоеЗначение;
		КритическоеЗначение = СтруктураДанныхДляВывода.КритическоеЗначение;
		Значение = СтруктураДанныхДляВывода.Значение;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Текущее значение";
		НовСтр.Значение = Значение;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Целевое значение";
		НовСтр.Значение = ЦелевоеЗначение;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Критическое значение";
		НовСтр.Значение = КритическоеЗначение;

	КонецЕсли;
	
КонецПроцедуры
	
/////////////////////////////////////////////////////////////////////////////
// Интегральная оценка

Функция ПолучитьСписокПоказателейДляИнтегральнойОценки(СписокВариантовАнализа) Экспорт
	
	ЗапросСвернутогоСписка = Новый Запрос;
	ЗапросСвернутогоСписка.Текст =
	"ВЫБРАТЬ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка КАК ВариантАнализа,
	|	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Показатель,
	|	торо_ВариантыАнализаПоказателейKPI.АгрегацияДанных,
	|	торо_ВариантыАнализаПоказателейKPI.ЗначениеАнализа,
	|	ВЫБОР
	|		КОГДА торо_ВариантыАнализаПоказателейKPI.ВыбратьСортировку = ЗНАЧЕНИЕ(Перечисление.торо_ВариантыСортировки.Лучшие)
	|			ТОГДА ""Лучшие""
	|		КОГДА торо_ВариантыАнализаПоказателейKPI.ВыбратьСортировку = ЗНАЧЕНИЕ(Перечисление.торо_ВариантыСортировки.Худшие)
	|			ТОГДА ""Худшие""
	|		ИНАЧЕ ""По всем значениям""
	|	КОНЕЦ КАК Сортировка,
	|	торо_ВариантыАнализаПоказателейKPI.КоличествоВыбираемыхЭлементов
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка В(&ВариантыАнализа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_Показатели.ВариантАнализа) КАК ВариантАнализа,
	|	ВТ_Показатели.Показатель КАК Показатель,
	|	ВТ_Показатели.АгрегацияДанных,
	|	ВТ_Показатели.ЗначениеАнализа,
	|	ВТ_Показатели.Сортировка,
	|	ВТ_Показатели.КоличествоВыбираемыхЭлементов
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Показатели.Показатель,
	|	ВТ_Показатели.АгрегацияДанных,
	|	ВТ_Показатели.ЗначениеАнализа,
	|	ВТ_Показатели.Сортировка,
	|	ВТ_Показатели.КоличествоВыбираемыхЭлементов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатель";
	
	ЗапросСвернутогоСписка.УстановитьПараметр("ВариантыАнализа", СписокВариантовАнализа);
	СвернутаяТабВариантовАнализа = ЗапросСвернутогоСписка.Выполнить().Выгрузить();

	Возврат СвернутаяТабВариантовАнализа;
	
КонецФункции

Процедура ЗаполнитьИнтегральнуюОценку(ИнтегральнаяДиаграмма, СвернутаяТабВариантовАнализа, ЭтаФорма) Экспорт
	
	ИнтегральнаяДиаграмма.Очистить();

	Для каждого ЭлементСписка из СвернутаяТабВариантовАнализа Цикл
		ВариантАнализа = ЭлементСписка.ВариантАнализа;
		Показатель = ЭлементСписка.Показатель;
		
		РазделительКакЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "РазделительКакЕдиницаИзмерения");
		Разделитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "Разделитель");
		
		НайденныеСтроки = ЭтаФорма.ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель", Показатель));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаПоказателя Из НайденныеСтроки Цикл
			Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных) Тогда
				ТабДанныхИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных);
				ТабДанных = ТабДанныхИсх.Скопировать();
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанныхСПериодами) Тогда
				ТабДанныхСПериодамиИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанныхСПериодами);
				ТабДанныхСПериодами = ТабДанныхСПериодамиИсх.Скопировать();
			Иначе
				Продолжить;
			КонецЕсли;
			
			Попытка
				СтруктураДанныхДляВывода = ПолучитьСтруктураДанныхДляВыводаВИнтегральнуюОценку(ТабДанных, ТабДанныхСПериодами, ВариантАнализа, ЭтаФорма);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ШаблонОшибки = НСтр("ru='При обработке данных показателя ""%1"" для вывода в интегральную оценку произошла ошибка: %2'");
				ТекстСообщения = СтрШаблон(ШаблонОшибки, ВариантАнализа, ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			Если СтруктураДанныхДляВывода = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ПредставлениеТочки = СформироватьЗаголовокЭлемента(Показатель, ВариантАнализа, СтрокаПоказателя.Разделитель, "ИнтегральнаяОценка", ЭлементСписка);
			
			Попытка
				ВывестиДанныеПоказателяВИнтегральнуюОценку(ЭтаФорма, ИнтегральнаяДиаграмма, СтруктураДанныхДляВывода, ПредставлениеТочки);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ШаблонОшибки = НСтр("ru='При выводе данных показателя ""%1"" в интегральную оценку произошла ошибка: %2'");
				ТекстСообщения = СтрШаблон(ШаблонОшибки, ВариантАнализа, ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктураДанныхДляВыводаВИнтегральнуюОценку(Знач ТабДанных, Знач ТабДанныхСПериодами, ВариантАнализа, ЭтаФорма) 
	
	СтруктураВозврата = Новый Структура;
	
	Показатель = ВариантАнализа.Владелец;
	ИмяКолонкиРесурса = ВариантАнализа.ЗначениеАнализа;
	
	МасАналитикДляПроверки = Новый массив;
	Если ЭтаФорма.ТипПоказателей = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		ИмяКолонкиАналитики = "ОбъектРемонта";
		МасАналитикДляПроверки.Добавить("ОбъектРемонта");
		МасАналитикДляПроверки.Добавить("Подразделение");
		МасАналитикДляПроверки.Добавить("Организация");
	ИначеЕсли ЭтаФорма.ТипПоказателей = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		ИмяКолонкиАналитики = "Подразделение";
		МасАналитикДляПроверки.Добавить("Подразделение");
		МасАналитикДляПроверки.Добавить("Организация");
	Иначе
		ИмяКолонкиАналитики = "Организация";
		МасАналитикДляПроверки.Добавить("Организация");
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ИмяКолонкиРесурса", ИмяКолонкиРесурса);
	СтруктураВозврата.Вставить("ИмяКолонкиАналитики", ИмяКолонкиАналитики);
	
	// Сравнение с прошлым периодом
	Если ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.СравнениеСПрошлымПериодом Тогда
		
		СтрокаПоказателя = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.НайтиСтроки(Новый Структура("Показатель", Показатель));
		Если СтрокаПоказателя.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаПоказателя = СтрокаПоказателя[0];
		
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных) Тогда
			ТабДанныхПрошлогоПериодаИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных);
			ТабДанныхПрошлогоПериода = ТабДанныхПрошлогоПериодаИсх.Скопировать();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса,,Истина);
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса,,Истина);
		
		МассивКолонокАналитик = Новый Массив;
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ТабДанныхПрошлогоПериода = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		ПрименитьОкруглениеКТаблице(ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса);
		
		Значение = ?(ТабДанных.Количество() > 0, ТабДанных.Итог(ИмяКолонкиРесурса), 0);
		ЗначениеПрошлогоПериода = ?(ТабДанных.Количество() > 0, ТабДанныхПрошлогоПериода.Итог(ИмяКолонкиРесурса), 0); 
		
		СтруктураВозврата.Вставить("Значение", Значение);
		СтруктураВозврата.Вставить("ЗначениеПрошлогоПериода", ЗначениеПрошлогоПериода);

	ИначеЕсли ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.ПоЗаданнойПериодичности Тогда

		Если НЕ ЕстьПериодИПериодичность(ЭтаФорма, ВариантАнализа, ТабДанныхСПериодами, Истина) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса,,Истина);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить("Период");
		
		ТабДанныхСПериодами = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанныхСПериодами);
		
	ИначеЕсли ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.ПоОбъектамАнализа Тогда
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса,,Истина);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить(ИмяКолонкиАналитики);
		
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанных);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ВывестиДанныеПоказателяВИнтегральнуюОценку(ЭтаФорма, ИнтегральнаяДиаграмма, СтруктураДанныхДляВывода, ПредставлениеТочки)
	
	Если ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.СравнениеСПрошлымПериодом Тогда
		
		ТекущаяСерия = ИнтегральнаяДиаграмма.УстановитьСерию("Прошлый период");
		ТекущаяТочка = ИнтегральнаяДиаграмма.УстановитьТочку(ПредставлениеТочки);
		ИнтегральнаяДиаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, СтруктураДанныхДляВывода.ЗначениеПрошлогоПериода);
		
		ТекущаяСерия = ИнтегральнаяДиаграмма.УстановитьСерию("Текущий период");
		ТекущаяТочка = ИнтегральнаяДиаграмма.УстановитьТочку(ПредставлениеТочки);
		ИнтегральнаяДиаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, СтруктураДанныхДляВывода.Значение);
		
	ИначеЕсли ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.ПоЗаданнойПериодичности Тогда

		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
		ФорматДаты = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
		
		Для каждого Стр из ТабДанных Цикл
			ТекущаяСерия = ИнтегральнаяДиаграмма.УстановитьСерию(Стр.Период);
			ТекущаяСерия.Текст = Формат(Стр.Период, ФорматДаты);
			ТекущаяТочка = ИнтегральнаяДиаграмма.УстановитьТочку(ПредставлениеТочки);
			ИнтегральнаяДиаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, Стр[ИмяКолонкиРесурса]);
		КонецЦикла;
		
	ИначеЕсли ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.ПоОбъектамАнализа Тогда

		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
		ИмяКолонкиАналитики = СтруктураДанныхДляВывода.ИмяКолонкиАналитики;

		Для каждого Стр из ТабДанных Цикл
			ТекущаяСерия = ИнтегральнаяДиаграмма.УстановитьСерию(Стр[ИмяКолонкиАналитики]);
			ТекущаяТочка = ИнтегральнаяДиаграмма.УстановитьТочку(ПредставлениеТочки);
			ИнтегральнаяДиаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, Стр[ИмяКолонкиРесурса]);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Печать

Процедура ВывестиПоказательНаПечатьДиаграмма(ДокументРезультат, Макет, ДиаграммаИсточник) Экспорт

	Область = Макет.ПолучитьОбласть("ПоказательДиаграммаСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	// Вывод диаграммы
	Область = Макет.ПолучитьОбласть("ПоказательДиаграммаСтрока|ПоказательСтолбец");
	ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
	
	РисунокДиаграмма = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
	РисунокДиаграмма.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	РисунокДиаграмма.ЦветЛинии = WebЦвета.СеребристоСерый;
	
	Диаграмма = РисунокДиаграмма.Объект;

	КопируемыеСвойстваДиаграммы = Новый Структура("ТипДиаграммы, 
		|АвтоУстановкаТекстаСерий, АвтоУстановкаТекстаТочек, 
		|ПропускатьБазовоеЗначение, ВидПодписей,  
		|ОтображатьЗаголовок, ОтображатьЛегенду");
		
	Для каждого КлючИЗначение из КопируемыеСвойстваДиаграммы Цикл
		Попытка
			Диаграмма[КлючИЗначение.Ключ] = ДиаграммаИсточник[КлючИЗначение.Ключ];
		Исключение
		КонецПопытки;
	КонецЦикла;		
	
	КопируемыеСвойстваОсиЗначенийДиаграммы = Новый Структура("БазовоеЗначение, 
		|МинимальноеЗначение, МаксимальноеЗначение, 
		|СпособОпределенияМинимальногоЗначения, СпособОпределенияМаксимальногоЗначения");
	
	Для каждого КлючИЗначение из КопируемыеСвойстваОсиЗначенийДиаграммы Цикл
		Попытка
			Диаграмма.ОсьЗначений[КлючИЗначение.Ключ] = ДиаграммаИсточник.ОсьЗначений[КлючИЗначение.Ключ];
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Если ДиаграммаИсточник.ТипДиаграммы = ТипДиаграммы.Измерительная Тогда
		Для каждого ИнтревалИсточник из ДиаграммаИсточник.ИнформационныеИнтервалыЗначений Цикл
			Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
			Интервал.Начало = ИнтревалИсточник.Начало;
			Интервал.Конец = ИнтревалИсточник.Конец;
			Интервал.Подсказка = ИнтревалИсточник.Подсказка;
			Интервал.ТекстПодписи = ИнтревалИсточник.ТекстПодписи;
			Интервал.Цвет = ИнтревалИсточник.Цвет;
		КонецЦикла;
	КонецЕсли;
	
	Диаграмма.ПрозрачныйФон = Истина;
	
	Для каждого СерияИсточник из ДиаграммаИсточник.Серии Цикл
		Серия = Диаграмма.УстановитьСерию(СерияИсточник.Значение);
		Серия.Текст = СерияИсточник.Текст;
		
		Для каждого ТочкаИсточник из ДиаграммаИсточник.Точки Цикл
			Точка = Диаграмма.УстановитьТочку(ТочкаИсточник.Значение);
			Точка.Текст = ТочкаИсточник.Текст;
			
			Попытка 
				ЗначениеИсточник = ДиаграммаИсточник.ПолучитьЗначение(ТочкаИсточник, СерияИсточник);
				Диаграмма.УстановитьЗначение(Точка, Серия, ЗначениеИсточник.Значение,,ЗначениеИсточник.Подсказка);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
	Индекс = ДокументРезультат.Рисунки.Индекс(РисунокДиаграмма);
	
	ОбластьМакетаСДиаграммой = ДокументРезультат.Область(ВыведеннаяОбласть.Верх, ВыведеннаяОбласть.Лево, ВыведеннаяОбласть.Низ, ВыведеннаяОбласть.Право);
	ДокументРезультат.Рисунки[Индекс].Расположить(ОбластьМакетаСДиаграммой);
	
КонецПроцедуры

Процедура ВывестиПоказательНаПечатьКратко(ДокументРезультат, Макет, СтрокаДляВывода) Экспорт
	
	Область = Макет.ПолучитьОбласть("ПоказательКраткоСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	// Вывод маркера состояния
	Область = Макет.ПолучитьОбласть("ПоказательКраткоСтрока|ПоказательСтолбец");
	
	СтрокаЗначения = СтрПолучитьСтроку(СтрокаДляВывода, 1);
	СтрокаРасшифровки = СтрПолучитьСтроку(СтрокаДляВывода, 2);
	
	ЦветШрифта = WebЦвета.Черный;
	
	// В платформе отсутстует возможность получения цвета форматированной строки.
	// Определим цвет сравнивая строку входящую с новой форматированной строкой предполагаемого цвета.
	ПроверяемыеЦвета = Новый Массив;
	ПроверяемыеЦвета.Добавить(WebЦвета.Зеленый);
	ПроверяемыеЦвета.Добавить(WebЦвета.Оранжевый);
	ПроверяемыеЦвета.Добавить(WebЦвета.Красный);
	
	Для Каждого ПроверяемыйЦвет Из ПроверяемыеЦвета Цикл
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки) Тогда
			ФорматированнаяСтрокаЗначения = Новый ФорматированнаяСтрока(СтрокаЗначения, Новый Шрифт("Arial", 20, Истина), ПроверяемыйЦвет);
			ФорматированнаяСтрокаРасшифровки = Новый ФорматированнаяСтрока(СтрокаРасшифровки, Новый Шрифт("Arial", 10), ПроверяемыйЦвет);
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаЗначения, Символы.ПС, ФорматированнаяСтрокаРасшифровки);
		Иначе
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(СтрокаЗначения, Новый Шрифт("Arial", 20, Истина), ПроверяемыйЦвет);
		КонецЕсли;	
		
		Если ФорматированнаяСтрока = СтрокаДляВывода Тогда
			ЦветШрифта = ПроверяемыйЦвет;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
		
	Область.Область().ЦветТекста = ЦветШрифта;
	
	СвойстваОбласти = Новый Структура("Значение, Расшифровка", СтрокаЗначения, СтрокаРасшифровки);
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
	
КонецПроцедуры

Процедура ВывестиПоказательНаПечатьТаблица(ДокументРезультат, Макет, ВариантАнализа, ЭтаФорма, ТаблицаЗначений) Экспорт
	
	ОбластьОтступ = Макет.ПолучитьОбласть("ПоказательТаблицаЗаголовок|ОтступСтолбец");
	ДокументРезультат.Вывести(ОбластьОтступ);
	
	// Вывод шапки таблицы
	Область = Макет.ПолучитьОбласть("ПоказательТаблицаЗаголовок|ПоказательСтолбец");
	
	СвойстваОбласти = Новый Структура("ЗаголовокОбъектАнализа, ЗаголовокЗначение, Разделитель, Размерность",
		"Период/Разрез", "Значение", ", ", ПолучитьЕдиницуИзмерения(ВариантАнализа.Владелец, ВариантАнализа));
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
	// Вывод тела таблицы
	Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицы|ПоказательСтолбец");
	
	ОграничениеНаВыводСтрок = 12;
	КоличествоСтрок = ТаблицаЗначений.Количество();
	ЕстьПревышениеОграничения = (КоличествоСтрок > ОграничениеНаВыводСтрок);
	
	ФорматПериода = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
	
	КоличествоВыведенныхСтрок = 0;
	ЗначениеОстальные = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если КоличествоВыведенныхСтрок < 10 Тогда
			ДокументРезультат.Вывести(ОбластьОтступ);
			
			ПредставлениеОбъектаАнализа = "";
			Если ЗначениеЗаполнено(СтрокаТаблицы.Период) Тогда
				ПредставлениеОбъектаАнализа = Формат(СтрокаТаблицы.Период, ФорматПериода);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Разрез) Тогда
				ПредставлениеОбъектаАнализа = ?(ПредставлениеОбъектаАнализа="", "", ПредставлениеОбъектаАнализа+" / ")+СтрокаТаблицы.Разрез;
			КонецЕсли;
			
			СвойстваОбласти = Новый Структура("ОбъектАнализа, ЗначениеАнализа", ПредставлениеОбъектаАнализа, СтрокаТаблицы.Значение);
			
			ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
			ДокументРезультат.Присоединить(Область);
			
			КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок + 1; 
		Иначе
			ЗначениеОстальные = ЗначениеОстальные + СтрокаТаблицы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицыОтступ|ПоказательСтолбец");
	Если КоличествоСтрок < ОграничениеНаВыводСтрок Тогда
		КоличествоСтрокПустышек = ОграничениеНаВыводСтрок - КоличествоСтрок;
		Пока КоличествоСтрокПустышек > 0 Цикл 
			ДокументРезультат.Вывести(ОбластьОтступ);
			ДокументРезультат.Присоединить(Область);
			
			КоличествоСтрокПустышек = КоличествоСтрокПустышек - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПревышениеОграничения Тогда
		Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицыЕще|ПоказательСтолбец");
		
		ЗаголовокОстальные = НСтр("ru= 'Остальные'");
		СтрокСверхОграничения = КоличествоСтрок - ОграничениеНаВыводСтрок;
		
		СвойстваОбласти = Новый Структура("ЗаголовокОстальные, СтрокСверхОграничения, ЗначениеОстальные", 
		ЗаголовокОстальные, СтрокСверхОграничения, ЗначениеОстальные);
		
		ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
		
		ДокументРезультат.Вывести(ОбластьОтступ);
		ДокументРезультат.Присоединить(Область);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодробноПоказательНаПечатьТаблица(ДокументРезультат, Макет, ВариантАнализа, ЭтаФорма, ТаблицаЗначений) Экспорт
	
	ОбластьОтступ = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицы|ОтступСтолбец");
	ДокументРезультат.Вывести(ОбластьОтступ);
	
	// Вывод шапки таблицы
	Область = Макет.ПолучитьОбласть("ПоказательТаблицаЗаголовок|ПоказательСтолбец");
	
	СвойстваОбласти = Новый Структура("ЗаголовокОбъектАнализа, ЗаголовокЗначение, Разделитель, Размерность",
		"Период/Разрез", "Значение", ", ", ПолучитьЕдиницуИзмерения(ВариантАнализа.Владелец, ВариантАнализа));
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
	// Вывод тела таблицы
	Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицы|ПоказательСтолбец");
	
	ФорматПериода = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			ДокументРезультат.Вывести(ОбластьОтступ);
			
			ПредставлениеОбъектаАнализа = "";
			Если ЗначениеЗаполнено(СтрокаТаблицы.Период) Тогда
				ПредставлениеОбъектаАнализа = Формат(СтрокаТаблицы.Период, ФорматПериода);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Разрез) Тогда
				ПредставлениеОбъектаАнализа = ?(ПредставлениеОбъектаАнализа="", "", ПредставлениеОбъектаАнализа+" / ")+СтрокаТаблицы.Разрез;
			КонецЕсли;
			
			СвойстваОбласти = Новый Структура("ОбъектАнализа, ЗначениеАнализа", ПредставлениеОбъектаАнализа, СтрокаТаблицы.Значение);
			
			ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
			ДокументРезультат.Присоединить(Область);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиИнтегральнуюОценкуНаПечать(ДокументРезультат, Макет, ДиаграммаИсточник) Экспорт
	
	Область = Макет.ПолучитьОбласть("ДиаграммаСтрока|Отступ");
	ДокументРезультат.Вывести(Область);
	
	// Вывод диаграммы
	Область = Макет.ПолучитьОбласть("ДиаграммаСтрока|ДиаграммаСтолбец");
	ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
	
	РисунокДиаграмма = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
	РисунокДиаграмма.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	РисунокДиаграмма.ЦветЛинии = WebЦвета.СеребристоСерый;
	
	Диаграмма = РисунокДиаграмма.Объект;
	
	КопируемыеСвойстваДиаграммы = Новый Структура("ТипДиаграммы, 
		|АвтоУстановкаТекстаСерий, АвтоУстановкаТекстаТочек, 
		|ПропускатьБазовоеЗначение, ВидПодписей,  
		|ОтображатьЗаголовок, ОтображатьЛегенду");
		
	Для каждого КлючИЗначение из КопируемыеСвойстваДиаграммы Цикл
		Попытка
			Диаграмма[КлючИЗначение.Ключ] = ДиаграммаИсточник[КлючИЗначение.Ключ];
		Исключение
		КонецПопытки;
	КонецЦикла;		
	
	КопируемыеСвойстваОсиЗначенийДиаграммы = Новый Структура("БазовоеЗначение, 
		|МинимальноеЗначение, МаксимальноеЗначение, 
		|СпособОпределенияМинимальногоЗначения, СпособОпределенияМаксимальногоЗначения");
	
	Для каждого КлючИЗначение из КопируемыеСвойстваОсиЗначенийДиаграммы Цикл
		Попытка
			Диаграмма.ОсьЗначений[КлючИЗначение.Ключ] = ДиаграммаИсточник.ОсьЗначений[КлючИЗначение.Ключ];
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Диаграмма.ПрозрачныйФон = Истина;
	
	Для каждого СерияИсточник из ДиаграммаИсточник.Серии Цикл
		Серия = Диаграмма.УстановитьСерию(СерияИсточник.Значение);
		Серия.Текст = СерияИсточник.Текст;
		
		Для каждого ТочкаИсточник из ДиаграммаИсточник.Точки Цикл
			Точка = Диаграмма.УстановитьТочку(ТочкаИсточник.Значение);
			Точка.Текст = ТочкаИсточник.Текст;
			
			Попытка 
				ЗначениеИсточник = ДиаграммаИсточник.ПолучитьЗначение(ТочкаИсточник, СерияИсточник);
				Диаграмма.УстановитьЗначение(Точка, Серия, ЗначениеИсточник.Значение,,ЗначениеИсточник.Подсказка);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
	Индекс = ДокументРезультат.Рисунки.Индекс(РисунокДиаграмма);
	
	ОбластьМакетаСДиаграммой = ДокументРезультат.Область(ВыведеннаяОбласть.Верх, ВыведеннаяОбласть.Лево, ВыведеннаяОбласть.Низ, ВыведеннаяОбласть.Право);
	ДокументРезультат.Рисунки[Индекс].Расположить(ОбластьМакетаСДиаграммой);	
	
КонецПроцедуры


Процедура ВывестиЗаголовокПоказателяНаПечать(ДокументРезультат, Макет, Показатель, ВариантАнализа, Разделитель) Экспорт
	
	Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	СтруктураВозврата = СформироватьЗаголовокЭлемента(Показатель, ВариантАнализа, Разделитель, "ПечатьПоказателя");
	
	// Вывод наименования показателя
	Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|ЗаголовокПоказателяСтолбец");
	
	СвойстваОбласти = Новый Структура("ЗаголовокПоказателя", СтруктураВозврата.Заголовок);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
	// Вывод свойств показателя
	Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|СвойстваПоказателяСтолбец");

	СвойстваОбласти = Новый Структура("СвойстваПоказателя", СтруктураВозврата.ЗаголовокЕдиницыИзмерения);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
КонецПроцедуры

Процедура ВывестиОтступ(ДокументРезультат, Макет) Экспорт
	Область = Макет.ПолучитьОбласть("ОтступСтрока");
	ДокументРезультат.Вывести(Область);
КонецПроцедуры

Процедура ВывестиЗаголовок(ДокументРезультат, Макет) Экспорт
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	СвойстваОбласти = Новый Структура("Заголовок", НСтр("ru= 'Монитор KPI'"));
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	
	ВывестиОтступ(ДокументРезультат, Макет);
	ДокументРезультат.Вывести(Область);
	ВывестиОтступ(ДокументРезультат, Макет);
	
КонецПроцедуры

Процедура ВывестиПараметры(ДокументРезультат, Макет, СтруктураПараметров) Экспорт
	
	Область = Макет.ПолучитьОбласть("Параметры");
	
	СтрокаЗначениеПараметров = торо_ПоказателиKPIКлиентСервер.СфомироватьСтрокуПараметров(СтруктураПараметров);
	
	СвойстваОбласти = Новый Структура("ЗначениеПараметров", СтрокаЗначениеПараметров);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 

	ДокументРезультат.Вывести(Область);
		
КонецПроцедуры

Процедура ВывестиДатуВремяФормирования(ДокументРезультат, Макет)  Экспорт
	Область = Макет.ПолучитьОбласть("ДатаВремяФормирования");
	
	СвойстваОбласти = Новый Структура("ЗаголовокСформирован, ДатаВремяФормирования", 
		НСтр("ru= 'Сформирован'")+ ":",
		ТекущаяДатаСеанса());
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 

	ДокументРезультат.Вывести(Область);
КонецПроцедуры

Процедура ВывестиСообщениеНетДоступныхПоказателей(ДокументРезультат, Макет, Выводить) Экспорт
	Если Выводить Тогда
		Область = Макет.ПолучитьОбласть("НетДоступныхПоказателей");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Мелкие

Функция ПолучитьКопиюТаблицыФормы(ТаблицаФормы)
	
	Если ТипЗнч(ТаблицаФормы) = Тип("ТаблицаЗначений") Тогда
		Возврат ТаблицаФормы.Скопировать();
	Иначе
		Возврат ТаблицаФормы.Выгрузить();
	КонецЕсли;
	
КонецФункции

Процедура УстановитьОтборСКДПоСпискуЗначений(НастройкиКД, ИмяПоля, СписокЗначенияДляОтбора)
	
	ДоступноеПолеОтбора = НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Если ДоступноеПолеОтбора <> Неопределено Тогда
		Отбор = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.Использование = Истина;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.ПравоеЗначение = СписокЗначенияДляОтбора;
	КонецЕсли;
	
КонецПроцедуры

Функция НачалоПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(Дата);
	КонецЕсли;
	
КонецФункции

Функция КонецПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Возврат КонецДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат КонецГода(Дата);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтрокуАналитикПоТипуПоказателя(Тип, СУчетомПериодичности)
	
	СтрокаАналитик = "Организация";
	Если Тип = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		СтрокаАналитик = "Организация, Подразделение";
	ИначеЕсли Тип = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		СтрокаАналитик = "Организация, Подразделение, ОбъектРемонта";
	КонецЕсли;
	
	Если СУчетомПериодичности Тогда
		СтрокаАналитик = "Период, "+СтрокаАналитик;
	КонецЕсли;
	
	Возврат СтрокаАналитик;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(Показатель, ВариантАнализа) Экспорт 
	
	РеквизитыВариантаАнализа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа, "ЕдиницаИзмерения, ВыполнитьНормализацию");
	
	Если РеквизитыВариантаАнализа.ВыполнитьНормализацию Тогда
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ЕдиницаИзмеренияПоКоду("744"); // %	
	ИначеЕсли ЗначениеЗаполнено(РеквизитыВариантаАнализа.ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = РеквизитыВариантаАнализа.ЕдиницаИзмерения;		
	Иначе
		ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "ЕдиницаИзмерения");	
	КонецЕсли;	
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Функция СформироватьЗаголовокЭлемента(Показатель, ВариантАнализа, Разделитель, Назначение = "Монитор", ЭлементСписка = Неопределено) Экспорт
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(Показатель, ВариантАнализа);
	РазделительРеквизит = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "Разделитель");
	РазделительКакЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "РазделительКакЕдиницаИзмерения");
	
	Если Назначение = "ИнтегральнаяОценка" Тогда
		ПредставлениеСортировки = ?(ЭлементСписка.Сортировка = "По всем значениям", 
				ЭлементСписка.Сортировка, 
				ЭлементСписка.Сортировка + " " + ЭлементСписка.КоличествоВыбираемыхЭлементов);
		
		Если Не ЗначениеЗаполнено(РазделительРеквизит) Тогда
		    ШаблонЗаголовка = "%1, %2 (%3 / %4 / %5)";
			
			Возврат СтрШаблон(ШаблонЗаголовка, Показатель, ЕдиницаИзмерения, 
				ЭлементСписка.ЗначениеАнализа, ЭлементСписка.АгрегацияДанных, ПредставлениеСортировки);
		ИначеЕсли Не РазделительКакЕдиницаИзмерения
				Или (РазделительКакЕдиницаИзмерения И ЗначениеЗаполнено(ЕдиницаИзмерения)) Тогда
			ШаблонЗаголовка = "%1, %2, %3 (%4 / %5 / %6)";
			
			Возврат СтрШаблон(ШаблонЗаголовка, Разделитель, Показатель, ЕдиницаИзмерения, 
				ЭлементСписка.ЗначениеАнализа, ЭлементСписка.АгрегацияДанных, ПредставлениеСортировки);
		ИначеЕсли РазделительКакЕдиницаИзмерения И Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ШаблонЗаголовка = "%1, %2 (%3 / %4 / %5)";
			
			Возврат СтрШаблон(ШаблонЗаголовка, Показатель, Разделитель, 
				ЭлементСписка.ЗначениеАнализа, ЭлементСписка.АгрегацияДанных, ПредставлениеСортировки);
		КонецЕсли;
	ИначеЕсли Назначение = "Монитор" Тогда
		Если Не ЗначениеЗаполнено(РазделительРеквизит) Тогда
		    ШаблонЗаголовка = "%1, %2";
			Возврат СтрШаблон(ШаблонЗаголовка, ВариантАнализа, ЕдиницаИзмерения);
		ИначеЕсли Не РазделительКакЕдиницаИзмерения
				Или (РазделительКакЕдиницаИзмерения И ЗначениеЗаполнено(ЕдиницаИзмерения)) Тогда
			ШаблонЗаголовка = "%1, %2, %3";
			Возврат СтрШаблон(ШаблонЗаголовка, Разделитель, ВариантАнализа, ЕдиницаИзмерения);
		ИначеЕсли РазделительКакЕдиницаИзмерения И Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ШаблонЗаголовка = "%1, %2";
			Возврат СтрШаблон(ШаблонЗаголовка, ВариантАнализа, Разделитель);
		КонецЕсли;
	ИначеЕсли Назначение = "ПечатьПоказателя" Тогда
		СтруктураВозврата = Новый Структура("Заголовок, ЗаголовокЕдиницыИзмерения");
		Если Не ЗначениеЗаполнено(РазделительРеквизит) Тогда
		    СтруктураВозврата.Заголовок = ВариантАнализа;
			СтруктураВозврата.ЗаголовокЕдиницыИзмерения = ЕдиницаИзмерения;
		ИначеЕсли Не РазделительКакЕдиницаИзмерения
				Или (РазделительКакЕдиницаИзмерения И ЗначениеЗаполнено(ЕдиницаИзмерения)) Тогда
			ШаблонЗаголовка = "%1, %2";
			СтруктураВозврата.Заголовок = СтрШаблон(ШаблонЗаголовка, Разделитель, ВариантАнализа);
			СтруктураВозврата.ЗаголовокЕдиницыИзмерения = ЕдиницаИзмерения;
		ИначеЕсли РазделительКакЕдиницаИзмерения И Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			СтруктураВозврата.Заголовок = ВариантАнализа;
			СтруктураВозврата.ЗаголовокЕдиницыИзмерения = Разделитель;
		КонецЕсли;
		
		Возврат СтруктураВозврата;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокВариантовАнализаСУчетомРазделителя(ДанныеПоказателей, ВариантыАнализа) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДанныеПоказателей.Показатель КАК Показатель,
	               |	ДанныеПоказателей.Разделитель КАК Разделитель
	               |ПОМЕСТИТЬ ВТ_ДанныеПоказателей
	               |ИЗ
	               |	&ДанныеПоказателей КАК ДанныеПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Показатель,
	               |	торо_ВариантыАнализаПоказателейKPI.Ссылка КАК ВариантАнализа
	               |ПОМЕСТИТЬ ВТ_ВариантыАнализа
	               |ИЗ
	               |	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	               |ГДЕ
	               |	торо_ВариантыАнализаПоказателейKPI.Ссылка В(&ВариантыАнализа)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВариантыАнализа.Показатель КАК Показатель,
	               |	ВТ_ВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
	               |	ВТ_ДанныеПоказателей.Разделитель КАК Разделитель
	               |ИЗ
	               |	ВТ_ВариантыАнализа КАК ВТ_ВариантыАнализа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеПоказателей КАК ВТ_ДанныеПоказателей
	               |		ПО ВТ_ВариантыАнализа.Показатель = ВТ_ДанныеПоказателей.Показатель";
	
	Запрос.УстановитьПараметр("ДанныеПоказателей", ДанныеПоказателей.Выгрузить());
	Запрос.УстановитьПараметр("ВариантыАнализа", ВариантыАнализа);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область ИнтеграцияGIS

Функция СформироватьСтруктуруРеквизитовФормыПоПараметрамГИС(ОбъектРемонта, ВариантАнализа, НачалоПериода, КонецПериода)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДетализацияПоПериоду", Перечисления.Периодичность.ПустаяСсылка());
	СтруктураПараметров.Вставить("ИспользоватьДетализациюПоПериоду", Ложь);
	
	СтруктураПараметров.Вставить("ОтборПоОрганизации", Новый СписокЗначений);
	СтруктураПараметров.Вставить("ИспользоватьОтборПоОрганизации", Ложь);
	
	СтруктураПараметров.Вставить("ОтборПоПодразделению", Новый СписокЗначений);
	СтруктураПараметров.Вставить("ИспользоватьОтборПоПодразделению", Ложь);
	
	ОтборПоОР = Новый СписокЗначений;
	ОтборПоОР.Добавить(ОбъектРемонта);
	СтруктураПараметров.Вставить("ОтборПоОР", ОтборПоОР);
	СтруктураПараметров.Вставить("ИспользоватьОтборПоОР", Истина);
	
	СтруктураПараметров.Вставить("ОтборПоПериоду", Новый СтандартныйПериод(НачалоПериода, КонецПериода));
	СтруктураПараметров.Вставить("ОтборПоПериодуСравнения", Новый СтандартныйПериод);
	
	СписокВариантовАнализа = Новый СписокЗначений;
	СписокВариантовАнализа.Добавить(ВариантАнализа);
	СтруктураПараметров.Вставить("СписокВариантовАнализа", СписокВариантовАнализа);
	
	ЦелевыеЗначенияПоказателей = ПолучитьЦелевыеЗначенияПоказателей(СтруктураПараметров);
	СтруктураПараметров.Вставить("ЦелевыеЗначенияПоказателей", ЦелевыеЗначенияПоказателей);
	
	ТаблицаДатНаТекДату = Новый ТаблицаЗначений;
	ТаблицаДатНаТекДату.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДатНаТекДату.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаДатНаТекДату.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата"));
	
	НовСтр = ТаблицаДатНаТекДату.Добавить();
	НовСтр.Период = СтруктураПараметров.ОтборПоПериоду.ДатаОкончания;
	НовСтр.НачалоПериода = СтруктураПараметров.ОтборПоПериоду.ДатаНачала;
	НовСтр.КонецПериода = СтруктураПараметров.ОтборПоПериоду.ДатаОкончания;

	СтруктураПараметров.Вставить("ТаблицаДатНаТекДату", ТаблицаДатНаТекДату);
	СтруктураПараметров.Вставить("ТаблицаДат", ТаблицаДатНаТекДату.Скопировать());
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

