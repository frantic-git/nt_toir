////////////////////////////////////////////////////////////////////////////////
// торо_СЛКСервер: методы, для работы с защищенными обработками
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция предназначена для получения номера версии обработки.
//
// Параметры:
//		Имя - Строка - Имя обработки.
//		ОписаниеОшибки - Строка - Описание ошибки (выходной параметр).
// Возвращаемое значение:
//		Строка - Версия защищенной обработки.
//
Функция Версия_Session(Имя, ОписаниеОшибки = "") Экспорт

	Серия = ПолучитьИнициализированнуюСерию();
	Обработка = ПодключитьЗащищеннуюОбработку_Session(Имя, Серия, ОписаниеОшибки);
	Если Обработка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Обработка.Версия();
	
КонецФункции

// Функция подключает защищенную обработку.
//
// Параметры:
//		Имя - Строка - Имя обработки.
//		Серия - Строка - Серия ключа защиты.
//		ОписаниеОшибки - Строка - Описание ошибки (выходной параметр).
//
// Возвращаемое значение:
//		ВнешняяОбработка - обработка работы с мнемосхемами.
//
Функция ПодключитьЗащищеннуюОбработку_Session(Имя = "торо_ЗащитаРаботаСМнемосхемами", Серия = "", ОписаниеОшибки = "") Экспорт
	
	ОбработкаЗащита = Неопределено;
	Если Серия = "" Тогда 
		Серия = ПолучитьИнициализированнуюСерию();
	КонецЕсли;
	
	Если Метаданные.Отчеты.Найти(Имя) <> Неопределено Тогда
		ОбработкаЗащита = Отчеты[Имя].Создать();
	ИначеЕсли Метаданные.Обработки.Найти(Имя) <> Неопределено Тогда
		ОбработкаЗащита = Обработки[Имя].Создать();
	Иначе
		ОбработкаЗащита = слкМенеджерЗащиты.СоздатьОбъект(Серия, Имя, ОписаниеОшибки);
	КонецЕсли; 

	Возврат ОбработкаЗащита;
	
КонецФункции

// Функция выполняет заполнение таблицы данных плана-графика ППР.
//
// Параметры:
//		Имя - Строка - Имя внешней обработки.
//		СтруктураДанных - Структура - Структура параметров для передачи в защищенную обработку.
//		Серия - Строка - Серия ключа защиты.
//		СсылкаНаППР - ДокументСсылка.торо_ПланГрафикППР - ссылка на документ ППР.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица ремонтов.
//
Функция ЗаполнитьПланГрафикППР_Session(Имя, СтруктураДанных, Серия = "", СсылкаНаППР = Неопределено) Экспорт

	Если Серия = "" Тогда 
		Серия = ПолучитьИнициализированнуюСерию();
	КонецЕсли;
	Обработка = ПодключитьЗащищеннуюОбработку_Session(Имя, Серия);
	
	Если Обработка = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'Лицензия не обнаружена! Заполнение документа невозможно.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных.Вставить("СсылкаНаППР", СсылкаНаППР);
	
	Если ТипЗнч(СсылкаНаППР) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		Возврат Обработка.ЗаполнитьПланГрафикРегламентныхМероприятий(СтруктураДанных);
	Иначе
		Возврат Обработка.ЗаполнитьПланГрафикППР(СтруктураДанных);
	КонецЕсли;
						
КонецФункции

// Получает данные лицензии СЛК. Подробнее см. руководство разработчика СЛК,
// методы менеджера объектов, ПолучитьЛицензию().
//
// Параметры:
//		ОписаниеОшибки - Строка - Информация об ошибке.
//
// Возвращаемое значение:
//		Структура - стркутура параметров ключа защиты. 
//
Функция ПолучитьЛицензию(ОписаниеОшибки = "") Экспорт
	
	Серия = ПолучитьИнициализированнуюСерию();
	Попытка
		МенеджерОбъектов = слкМенеджерЗащиты.ПолучитьМенеджерОбъектовСерииЗащиты(Серия, ОписаниеОшибки);
	Исключение
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	Если ОписаниеОшибки <> "" Тогда
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураЛицензии = МенеджерОбъектов.ПопыткаПолучитьЛицензию();
	
	// Средства тестирования++
	СтруктураЛицензии = ЗаполнитьСтруктуруТестовымиДанными(СтруктураЛицензии);
	// Средства тестирования--
	
	Возврат СтруктураЛицензии;
	
КонецФункции

// См. слкМенеджерЗащитыСервер.СерияЗащитыИнициализирована.
//
Функция СерияЗащитыИнициализирована(Серия, ТолькоНаличиеКлюча) Экспорт
	Возврат слкМенеджерЗащитыСервер.СерияЗащитыИнициализирована(Серия, ТолькоНаличиеКлюча);
КонецФункции

// Выполняет проверку только наличия ключа без учета количества лицензий.
//
// Параметры:
//		Серия - Строка - Уникальная серия ключей защиты СЛК.
//
// Возвращаемое значение:
//  	Булево - в случае успеха возвращает Истина, в случае ошибки - Ложь.
//
Функция ПроверитьЛицензиюСеанса(Серия) Экспорт
	Попытка
 		МенеджерОбъектов = слкМенеджерЗащиты.ПолучитьМенеджерОбъектовСерииЗащиты(Серия);
		Если Серия = "28DD" И НЕ ПараметрыСеанса.торо_ПараметрыСерииКОРПИнициализированы Тогда 
			МенеджерОбъектов.УстановитьПараметрыКонтроляЛицензии(Истина);
			ПараметрыСеанса.торо_ПараметрыСерииКОРПИнициализированы = Истина;
		ИначеЕсли Серия = "5DD5" И НЕ ПараметрыСеанса.торо_ПараметрыСерииПРОФИнициализированы Тогда 
			МенеджерОбъектов.УстановитьПараметрыКонтроляЛицензии(Истина);
			ПараметрыСеанса.торо_ПараметрыСерииПРОФИнициализированы = Истина;
		КонецЕсли;
		
		Возврат МенеджерОбъектов.ПопыткаПроверитьЛицензиюСеанса(Истина);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверитьУстановитьНастройкиОповещенияПоУмолчанию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ПараметрыНапоминанийОПодпискахИТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ТаблицаПараметровПоУмолчанию = РегистрыСведений.торо_ПараметрыНапоминанийОПодпискахИТС.СоздатьНаборЗаписей().Выгрузить();
	
	НоваяСтрока = ТаблицаПараметровПоУмолчанию.Добавить();
	НоваяСтрока.Событие = Перечисления.торо_СобытияПодписокИТС.ЗавершаетсяПодпискаИТС;
	НоваяСтрока.СрокНапоминания = 10;
	
	НоваяСтрока = ТаблицаПараметровПоУмолчанию.Добавить();
	НоваяСтрока.Событие = Перечисления.торо_СобытияПодписокИТС.ЗавершаетсяПодпискаИТСОтраслевой;
	НоваяСтрока.СрокНапоминания = 10;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыПоУмолчанию.Событие КАК Событие,
	|	ПараметрыПоУмолчанию.СрокНапоминания КАК СрокНапоминания
	|ПОМЕСТИТЬ ПараметрыПоУмолчанию
	|ИЗ
	|	&ПараметрыПоУмолчанию КАК ПараметрыПоУмолчанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыПоУмолчанию.Событие КАК Событие,
	|	ПараметрыПоУмолчанию.СрокНапоминания КАК СрокНапоминания
	|ИЗ
	|	ПараметрыПоУмолчанию КАК ПараметрыПоУмолчанию
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыНапоминанийОПодпискахИТС КАК торо_ПараметрыНапоминанийОПодпискахИТС
	|		ПО ПараметрыПоУмолчанию.Событие = торо_ПараметрыНапоминанийОПодпискахИТС.Событие
	|ГДЕ
	|	торо_ПараметрыНапоминанийОПодпискахИТС.Событие ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ПараметрыПоУмолчанию", ТаблицаПараметровПоУмолчанию);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.торо_ПараметрыНапоминанийОПодпискахИТС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Записать(Истина);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура торо_ОповещениеОПодпискахИТС() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	СтруктураЛицензии = ПолучитьЛицензию();
	
	Если СтруктураЛицензии = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить информацию. Проверьте доступность сервера и ключей СЛК.'");
		ЗаписьЖурналаРегистрации("торо_ОповещениеОПодпискахИТС", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_ПараметрыНапоминанийОПодпискахИТС.Событие КАК Событие,
	|	торо_ПараметрыНапоминанийОПодпискахИТС.Напоминать КАК Напоминать,
	|	торо_ПараметрыНапоминанийОПодпискахИТС.СрокНапоминания КАК СрокНапоминания,
	|	торо_ПараметрыНапоминанийОПодпискахИТС.ПараметрыОповещения КАК ПараметрыОповещения
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНапоминанийОПодпискахИТС КАК торо_ПараметрыНапоминанийОПодпискахИТС
	|ГДЕ
	|	торо_ПараметрыНапоминанийОПодпискахИТС.Напоминать";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Событие = Перечисления.торо_СобытияПодписокИТС.ЗавершаетсяПодпискаИТС Тогда
			СформироватьУведомлениеОПриближенииДатыОкончания(СтруктураЛицензии.SupportEndDate, Выборка.СрокНапоминания, Выборка.ПараметрыОповещения, Выборка.Событие);
		ИначеЕсли Выборка.Событие = Перечисления.торо_СобытияПодписокИТС.ЗавершаетсяПодпискаИТСОтраслевой Тогда
			СформироватьУведомлениеОПриближенииДатыОкончания(СтруктураЛицензии.IndustrySupportEndDate, Выборка.СрокНапоминания, Выборка.ПараметрыОповещения, Выборка.Событие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЛицензииПередНачаломРаботыСистемы(ЗакрытьПрограмму) Экспорт 
	
	ОписаниеОшибкиПРОФ = "";
	ОписаниеОшибкиКОРП = "";
	Если НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("28DD", ОписаниеОшибкиКОРП) Тогда
		Если слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("5DD5", ОписаниеОшибкиПРОФ) Тогда
			ЗадатьФункциональныеОпцииДляПРОФ(Ложь);
		ИначеЕсли Пользователи.ЭтоПолноправныйПользователь(Пользователи.ТекущийПользователь(), , Ложь) Тогда
			ТекстСообщенияПРОФ = КраткоеОписаниеОшибки(ОписаниеОшибкиПРОФ);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПРОФ);
			
			ТекстСообщенияКОРП = КраткоеОписаниеОшибки(ОписаниеОшибкиКОРП);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияКОРП);
		Иначе
			ЗакрытьПрограмму = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОбменВТекущейСерииДоступен(Обмен) Экспорт
	Если НЕ ПроверитьЛицензиюСеанса("28DD") И ТипЗнч(Обмен) <> Тип("ПланОбменаСсылка.ОбменТОИР30УТ11") Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина
	КонецЕсли;
КонецФункции

Процедура ЗадатьФункциональныеОпцииДляПРОФ(Значение, СписокКонстант = Неопределено) Экспорт 

	Если СписокКонстант = Неопределено Тогда 
		СписокКонстант = ПолучитьНаборКонстантБлокируемыхВПРОФ();
	КонецЕсли;

	Для Каждого ИмяКонстанты Из СписокКонстант Цикл
		МенеджерКонстанты = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Ложь;
		МенеджерКонстанты.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаборКонстантБлокируемыхВПРОФ() Экспорт
	НаборИмен = Новый Массив;
	НаборИмен.Добавить("торо_ИспользоватьФункциональныеМеста");
	НаборИмен.Добавить("торо_ИспользоватьДокументыПринятияИСписанияОборудования"); 
	НаборИмен.Добавить("торо_НазначениеНаРемонтСУчетомРисков");
	НаборИмен.Добавить("торо_ИспользоватьАнализКоренныхПричин");
    НаборИмен.Добавить("торо_ИспользоватьЛимитыРемонтов"); 
	НаборИмен.Добавить("торо_ИспользоватьОценкиРМ");
	НаборИмен.Добавить("торо_ИспользоватьОстановочныеРемонты");
	НаборИмен.Добавить("торо_ИспользоватьСкользящееПланирование"); 
	НаборИмен.Добавить("торо_ИспользоватьОпасноеПроизводство");
	НаборИмен.Добавить("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно");
    НаборИмен.Добавить("торо_ИспользоватьАктПриемкиОборудования"); 
	НаборИмен.Добавить("торо_ПоказыватьПодсистемуKPI");
	НаборИмен.Добавить("торо_АвтоматическиОбновлятьПоставляемуюМодельПоказателейKPI");
	НаборИмен.Добавить("торо_ИспользоватьИнтеграциюСАИСДиспетчер"); 
	НаборИмен.Добавить("торо_ИспользоватьВыгрузкуЗагрузкуMSProject");
	НаборИмен.Добавить("ИспользоватьИнтеграциюС1СДокументооборот");
	НаборИмен.Добавить("торо_ИнтеграцияСПромБезопасностью");
	НаборИмен.Добавить("торо_ИспользоватьСинхронизациюСERP");
	Возврат НаборИмен;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьУведомлениеОПриближенииДатыОкончания(ДатаОкончания, СрокНапоминания, ПараметрыОповещения, Событие)
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) ИЛИ ТипЗнч(ДатаОкончания) <> Тип("Дата") Тогда
		Возврат;
	КонецЕсли;
	
	НачалоТекущейДаты = НачалоДня(ТекущаяДата());
	ЧислоДнейДоОкончания = (НачалоДня(ДатаОкончания) - НачалоТекущейДаты)/86400 + 1;

	Если ЧислоДнейДоОкончания <= СрокНапоминания Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("СобытиеПодпискиИТС", Событие);
		СтруктураДанных.Вставить("ДатаОкончанияПодпискиИТС", ДатаОкончания);
		СтруктураДанных.Вставить("ДнейДоОкончанияПодпискиИТС", ЧислоДнейДоОкончания);
		торо_РаботаСУведомлениями.ДобавитьЗаписиВОчередьУведомленийПоПараметрам(ПараметрыОповещения, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСтруктуруТестовымиДанными(СтруктураЛицензии)
	
	Если НЕ Константы.торо_ТестовыйРежим.Получить() Тогда
		Возврат СтруктураЛицензии;
	КонецЕсли;
	
	Если СтруктураЛицензии = Неопределено Тогда
		Возврат СтруктураЛицензии;
	КонецЕсли;
	
	СтруктураЛицензииРедактируемая = Новый Структура(СтруктураЛицензии);
	
	СтруктураЛицензииРедактируемая.SupportDate = Дата(2019, 11, 1);
	СтруктураЛицензииРедактируемая.IndustrySupportDate = Дата(2019, 11, 1);
	СтруктураЛицензииРедактируемая.SupportEndDate = Дата(2019, 12, 31);
	СтруктураЛицензииРедактируемая.IndustrySupportEndDate = Дата(2019, 12, 31);
	СтруктураЛицензииРедактируемая.SupportType = 1;
	СтруктураЛицензииРедактируемая.IndustrySupportType = 1;
	
	Возврат СтруктураЛицензииРедактируемая;
	
КонецФункции

Функция КраткоеОписаниеОшибки(ОписаниеОшибки)
	
	ТекстОшибки = ОписаниеОшибки;
	Позиция = СтрНайти(ТекстОшибки, "}:");
	Если Позиция > 0 Тогда
		ТекстОшибки = СокрЛП(Сред(ТекстОшибки, Позиция + 2, СтрДлина(ТекстОшибки)));
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПолучитьИнициализированнуюСерию()
	Если ПроверитьЛицензиюСеанса("28DD") Тогда 
		Возврат "28DD";
	ИначеЕсли ПроверитьЛицензиюСеанса("5DD5") Тогда 
		Возврат "5DD5";
	Иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти
