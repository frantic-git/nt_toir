
#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает запросы для наборов данных Иерархия и Контроль 
// в отчетах с иерархией по объектам ремонта.
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема компоновки данных.
//		ТекИерархия - СправочникСсылка.торо_СтруктурыОР - выбранная иерархия.
//		ИмяПараметраДатаСреза - Строка - название параметра для среза по иерархиии, изменяемой документами.
//		ИмяОсновногоНабораДанных - Строка - имя набора данных с основной информацией для отчета.
//
Процедура УстановитьЗапросыНаборовДанныхИерархииОР(СхемаКомпоновкиДанных, ТекИерархия, ИмяПараметраДатаСреза = "ДатаОкончания", ИмяОсновногоНабораДанных = "Объекты") Экспорт

	Если ТекИерархия.СтроитсяАвтоматически Тогда

		Если Метаданные.Справочники[ТекИерархия.ТипРеквизитаОР].Иерархический Тогда
			
			СхемаКомпоновкиДанных.НаборыДанных.Иерархия.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
			|	СправочникСсылка.Родитель КАК РодительИерархии
			|ИЗ
			|	Справочник." + ТекИерархия.ТипРеквизитаОР + " КАК СправочникСсылка
			|ГДЕ
			|	СправочникСсылка.Ссылка В (&Элемент)";
			
			СхемаКомпоновкиДанных.НаборыДанных.Контроль.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникСсылка.Ссылка КАК ЭлементКонтроль,
			|	СправочникСсылка.Родитель КАК РодительКонтроль
			|ИЗ
			|	Справочник." + ТекИерархия.ТипРеквизитаОР + " КАК СправочникСсылка
			|ГДЕ
			|	СправочникСсылка.Родитель В(&Родитель)";
			
		Иначе
			
			СхемаКомпоновкиДанных.НаборыДанных.Иерархия.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
			|	Значение(Справочник." + ТекИерархия.ТипРеквизитаОР + ".ПустаяСсылка) КАК РодительИерархии
			|ИЗ
			|	Справочник." + ТекИерархия.ТипРеквизитаОР + " КАК СправочникСсылка"; 
			
			СхемаКомпоновкиДанных.НаборыДанных.Контроль.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникСсылка.Ссылка КАК ЭлементКонтроль,
			|	Значение(Справочник." + ТекИерархия.ТипРеквизитаОР + ".ПустаяСсылка) КАК РодительКонтроль
			|ИЗ
			|	Справочник." + ТекИерархия.ТипРеквизитаОР + " КАК СправочникСсылка"; 
						
		КонецЕсли;
		
		ПолеИерархия = СхемаКомпоновкиДанных.НаборыДанных[ИмяОсновногоНабораДанных].Поля.Найти("ОбъектИерархии");
		Если ПолеИерархия <> Неопределено Тогда
			ПолеИерархия.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка."+ТекИерархия.ТипРеквизитаОР);
		КонецЕсли;

	Иначе

		Если ТекИерархия.ИзменяетсяДокументами Тогда
			
			СхемаКомпоновкиДанных.НаборыДанных.Иерархия.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Документами.ОбъектИерархии КАК ОбъектИерархии,
			|	Документами.РодительИерархии КАК РодительИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних({&"+ИмяПараметраДатаСреза+"}, СтруктураИерархии = &ИерархияТип) КАК Документами
			|ГДЕ
			|	Документами.ОбъектИерархии В(&Элемент)
			|	И НЕ Документами.Удален";
			
			СхемаКомпоновкиДанных.НаборыДанных.Контроль.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Документами.ОбъектИерархии КАК ЭлементКонтроль,
			|	Документами.РодительИерархии КАК РодительКонтроль
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних({&"+ИмяПараметраДатаСреза+"}, СтруктураИерархии = &ИерархияТип) КАК Документами
			|ГДЕ
			|	Документами.РодительИерархии В(&Родитель)
			|	И НЕ Документами.Удален";
			
		Иначе
			
			СхемаКомпоновкиДанных.НаборыДанных.Иерархия.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БезДокументов.ОбъектИерархии КАК ОбъектИерархии,
			|	БезДокументов.РодительИерархии КАК РодительИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК БезДокументов
			|ГДЕ
			|	БезДокументов.СтруктураИерархии = &ИерархияТип
			|	И БезДокументов.ОбъектИерархии В(&Элемент)";
			
			СхемаКомпоновкиДанных.НаборыДанных.Контроль.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БезДокументов.ОбъектИерархии КАК ЭлементКонтроль,
			|	БезДокументов.РодительИерархии КАК РодительКонтроль
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК БезДокументов
			|ГДЕ
			|	БезДокументов.СтруктураИерархии = &ИерархияТип
			|	И БезДокументов.РодительИерархии В(&Родитель)";
				
		КонецЕсли;
		
		ПолеИерархия = СхемаКомпоновкиДанных.НаборыДанных[ИмяОсновногоНабораДанных].Поля.Найти("ОбъектИерархии");
		Если ПолеИерархия <> Неопределено Тогда
			ПолеИерархия.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта");
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

// Устанавливает алгоритм получения данных для поля "ОбъектИерархии" 
// в отчетах с иерархией по объектам ремонта.
//
// Параметры:
//		ТекстЗапроса - Строка - текст запроса набора данных СКД.
//		ПолеОбъектРемонта - Строка - итоговый путь поля до объекта ремонта в запросе набора данных СКД.
//		ТекущаяИерархия - СправочникСсылка.торо_СтруктурыОР - название параметра для среза по иерархиии.
//
Процедура УстановитьПолеОбъектИерархии(ТекстЗапроса, ПолеОбъектРемонта, ТекущаяИерархия) Экспорт
	
	Если ТекущаяИерархия.СтроитсяАвтоматически Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеОбъектИерархии", ПолеОбъектРемонта + "." + ТекущаяИерархия.РеквизитОР);	
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеОбъектИерархии", ПолеОбъектРемонта);	
	КонецЕсли;

КонецПроцедуры	

// Устанавливает иерархический тип группировки для поля "ОбъектИерархии" 
// в отчетах с иерархией по объектам ремонта.
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компановщик настроек.
//		ТекущаяИерархия - СправочникСсылка.торо_СтруктурыОР - название параметра для среза по иерархиии.
//
Процедура УстановитьТипГруппировкиОбъектаИерархии(КомпоновщикНастроек, ТекущаяИерархия) Экспорт 
	
	Если ТекущаяИерархия.СтроитсяАвтоматически Тогда
		торо_ОтчетыКлиентСервер.УстановитьТипИерархическойГруппировкиВНастройках(КомпоновщикНастроек, "ОбъектИерархии", ТипГруппировкиКомпоновкиДанных.Иерархия);
	Иначе
		торо_ОтчетыКлиентСервер.УстановитьТипИерархическойГруппировкиВНастройках(КомпоновщикНастроек, "ОбъектИерархии", ТипГруппировкиКомпоновкиДанных.ТолькоИерархия);		
	КонецЕсли;

КонецПроцедуры	

Процедура ОбработатьТабличныйДокументПослеФормированияОтчета(ИмяФормы, ОтчетТабличныйДокумент) Экспорт
	
	Если ИмяФормы = "Отчет.торо_ПланФактныйАнализППР.Форма" Тогда
		ЯчейкаСЗаголовком = ОтчетТабличныйДокумент.НайтиТекст("План-фактный анализ ППР");
		Если ЯчейкаСЗаголовком <> Неопределено Тогда
			ОбластьНачалоПоиска = ОтчетТабличныйДокумент.Область(0, 0, ЯчейкаСЗаголовком.Низ, 0);
			ВтораяЯчейкаСЗаголовком = ОтчетТабличныйДокумент.НайтиТекст("План-фактный анализ ППР", ОбластьНачалоПоиска);
			Если ВтораяЯчейкаСЗаголовком <> Неопределено Тогда
				ОбластьДоШапки = ОтчетТабличныйДокумент.Область(0, 0, ВтораяЯчейкаСЗаголовком.Низ, 0); 
				ОбластьДоШапки.Сгруппировать("ШапкаОтчета");
			Иначе
				ОбластьДоШапки = ОтчетТабличныйДокумент.Область(0, 0, ЯчейкаСЗаголовком.Низ, 0); 
				ОбластьДоШапки.Сгруппировать("ШапкаОтчета");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяФормы = "Отчет.торо_АнализДефектовИПотерь.Форма" Тогда
		ДиаграммаВыявленныеДефекты = ОтчетТабличныйДокумент.Рисунки[0];
		ДиаграммаУстраненныеДефекты = ОтчетТабличныйДокумент.Рисунки[1];
		ДиаграммаСреднееВремяРемонтов = ОтчетТабличныйДокумент.Рисунки[2];
		ДиаграммаСуммарноеВремяРемонтов = ОтчетТабличныйДокумент.Рисунки[3];
		
		ВерхДиаграммаУстраненныеДефекты = ДиаграммаУстраненныеДефекты.Верх;
		ДиаграммаУстраненныеДефекты.Верх = ДиаграммаВыявленныеДефекты.Верх;
		ДиаграммаУстраненныеДефекты.Лево = ДиаграммаВыявленныеДефекты.Лево + ДиаграммаВыявленныеДефекты.Ширина + 10;
		
		ДиаграммаСреднееВремяРемонтов.Верх = ВерхДиаграммаУстраненныеДефекты;
		
		ДиаграммаСуммарноеВремяРемонтов.Верх = ВерхДиаграммаУстраненныеДефекты;
		ДиаграммаСуммарноеВремяРемонтов.Лево = ДиаграммаСреднееВремяРемонтов.Лево + ДиаграммаСреднееВремяРемонтов.Ширина + 10;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеВыбранногоПоляНаСервере(ДанныеРасшифровки, Расшифровка, ИменаТекущихПолей) Экспорт

	ДанныеОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки); 
	ПолеРасшифровки = ДанныеОтчета.Элементы.Получить(Расшифровка).ПолучитьПоля()[0];  
	
	Если Не ПолеРасшифровки = Неопределено Тогда 
	    Если Не ИменаТекущихПолей.Найти (ПолеРасшифровки.Поле) = Неопределено Тогда
	        Возврат ПолеРасшифровки.Значение;
	    КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьЗначениеСтруктурыИерархии(КомпоновщикНастроек) Экспорт
	
	Идентификатор = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИерархияТип")).ИдентификаторПользовательскойНастройки;
	СтрокаПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Идентификатор);
	
	Если СтрокаПараметр <> Неопределено И ЗначениеЗаполнено(СтрокаПараметр.Значение) Тогда
		ТекИерархия = СтрокаПараметр.Значение;
	Иначе
			
		ТекИерархия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяСтруктураИерархии",
		Справочники.торо_СтруктурыОР.ПустаяСсылка());
		
		Если Не ЗначениеЗаполнено(ТекИерархия) Тогда
			ТекИерархия = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
		КонецЕсли;
		
		Если СтрокаПараметр <> Неопределено Тогда
			СтрокаПараметр.Значение = ТекИерархия;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекИерархия;

КонецФункции


#КонецОбласти
