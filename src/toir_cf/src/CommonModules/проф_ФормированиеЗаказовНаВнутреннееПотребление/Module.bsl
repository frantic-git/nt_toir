#Область ПрограммныйИнтерфейс

//++ Проф-ИТ, #249, Горетовская.М.С., 18.08.2023

Процедура ФормированиеЗаказовНаВнутреннееПотребление() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование заказов на внутреннее потребление (регл. задание)'"),
		УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начало'"));
		
	СкладПоУмолчанию = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
							"ФормированиеЗаказовНаВнутреннееПотребление", "СкладПоУмолчанию");
	
	Если СкладПоУмолчанию = Неопределено Тогда
		СкладПоУмолчанию = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;	
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ЗаявкаНаРемонт.Ссылка КАК Ссылка,
		|	торо_ЗаявкаНаРемонт.Организация КАК Организация,
		|	торо_ЗаявкаНаРемонт.Подразделение КАК Подразделение,
		|	торо_ЗаявкаНаРемонт.проф_Назначение КАК проф_Назначение,
		|	торо_ЗаявкаНаРемонт.Ответственный КАК Ответственный,
		|	торо_ЗаявкаНаРемонт.проф_НаправлениеДеятельности КАК проф_НаправлениеДеятельности
		|ПОМЕСТИТЬ ВТ_ЗаявкиНаРемонт
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|		ПО торо_ЗаявкаНаРемонт.Ссылка = ЗаказНаВнутреннееПотребление.ДокументОснование
		|			И (ЗаказНаВнутреннееПотребление.Проведен)
		|			И (НЕ ЗаказНаВнутреннееПотребление.проф_ЗаказДляЗакупки)
		|ГДЕ
		|	торо_ЗаявкаНаРемонт.Проведен
		|	И торо_ЗаявкаНаРемонт.проф_СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден)
		|	И ЗаказНаВнутреннееПотребление.Ссылка ЕСТЬ NULL
		|	И НЕ торо_ЗаявкаНаРемонт.проф_Назначение = ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаявкиНаРемонт.Ссылка КАК Ссылка,
		|	ВТ_ЗаявкиНаРемонт.проф_НаправлениеДеятельности КАК проф_НаправлениеДеятельности,
		|	ВТ_ЗаявкиНаРемонт.Организация КАК Организация,
		|	ВТ_ЗаявкиНаРемонт.Подразделение КАК Подразделение,
		|	ВТ_ЗаявкиНаРемонт.проф_Назначение КАК проф_Назначение,
		|	ВТ_ЗаявкиНаРемонт.Ответственный КАК Ответственный,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID
		|ИЗ
		|	ВТ_ЗаявкиНаРемонт КАК ВТ_ЗаявкиНаРемонт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		|		ПО ВТ_ЗаявкиНаРемонт.Ссылка = торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка
		|ИТОГИ
		|	МАКСИМУМ(проф_НаправлениеДеятельности),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(Подразделение),
		|	МАКСИМУМ(проф_Назначение),
		|	МАКСИМУМ(Ответственный)
		|ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
	
		МассивID = Новый Массив;
		СтрокаКомментария = Строка(ВыборкаСсылка.Ссылка);
		
	    ДатаОтгрузки = Дата(1, 1, 1);
		
		Выборка = ВыборкаСсылка.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаКомментария = СтрокаКомментария + " " + Выборка.ОбъектРемонта + " "
				+ Выборка.ВидРемонтныхРабот + " " + Формат(Выборка.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'")) + " - "
				+ Формат(Выборка.ДатаОкончания, НСтр("ru = 'ДФ=dd.MM.yyyy'"));
			
			МассивID.Добавить(Выборка.ID);

			Если ДатаОтгрузки = Дата(1, 1, 1) Тогда
				ДатаОтгрузки = Выборка.ДатаНачала;
			КонецЕсли;
		КонецЦикла;
		
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(МассивID, ВыборкаСсылка.Ссылка);
		
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.
			// или по ремонту отсутствуют материальные затраты
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДатаОтгрузки", ДатаОтгрузки);
		СтруктураПараметров.Вставить("ДокументОснование", ВыборкаСсылка.Ссылка);
		СтруктураПараметров.Вставить("проф_НаправлениеДеятельности", ВыборкаСсылка.проф_НаправлениеДеятельности);
		СтруктураПараметров.Вставить("Склад", СкладПоУмолчанию);
		СтруктураПараметров.Вставить("Организация", ВыборкаСсылка.Организация);
		СтруктураПараметров.Вставить("Подразделение", ВыборкаСсылка.Подразделение);
		СтруктураПараметров.Вставить("Комментарий", СтрокаКомментария);
		СтруктураПараметров.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);
		СтруктураПараметров.Вставить("проф_Назначение", ВыборкаСсылка.проф_Назначение);
		
		ДобавитьЗаказСводный(МассивID, СтруктураПараметров);	
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование заказов на внутреннее потребление (регл. задание)'"),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Конец'"));
	
КонецПроцедуры

//-- Проф-ИТ, #249, Горетовская.М.С., 18.08.2023

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Проф-ИТ, #308, Корнилов М.С., 19.10.2023

Процедура ДобавитьЗаказСводный(МассивID, СтруктураПараметров)
		
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("МассивID", МассивID);
	
	НовыйДок = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
	НовыйДок.Заполнить(СтруктураПараметров);
	НовыйДок.Дата                       = ТекущаяДатаСеанса();
	НовыйДок.торо_СтатусУтверждения     = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден;
	НовыйДок.проф_ХозяйственнаяОперация = Перечисления.проф_ХозяйственнаяОперация.СписаниеТоваровПоТребованию;
	
	НовыйДок.Записать(РежимЗаписиДокумента.Запись);
	
	Результат = Неопределено;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("Ссылка", НовыйДок.Ссылка);
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("ДокументОснование", СтруктураПараметров.ДокументОснование);
	
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный(Результат, СтруктураПередаваемыхВОбработчикПараметров);
	Попытка
		НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки;
		Сообщение.Сообщить();		
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Попытка проведения документа'"),
			УровеньЖурналаРегистрации.Информация, , 
			НовыйДок.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

//-- Проф-ИТ, #308, Корнилов М.С., 19.10.2023

//++ Проф-ИТ, #249, Горетовская.М.С., 18.08.2023

Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
		|ИЗ
		|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		|ГДЕ
		|	торо_ИнтеграцияДокументов.ID = &ID
		|	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		|	И торо_ИнтеграцияДокументов.ДокументЕРП = &СсылкаНаДокЕРП";
		
		Запрос.УстановитьПараметр("ID",ДополнительныеПараметры.ТекущийРемонт_ID);
		Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДокументОснование);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП", ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.ТекущийРемонт_ID,
																	 ДополнительныеПараметры.ДокументОснование,
																	 ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный(Результат, ДополнительныеПараметры)
	
	МассивID = ДополнительныеПараметры.МассивID;
	Для Каждого ID Из МассивID Цикл
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекущийРемонт_ID", ID);
		СтруктураПараметров.Вставить("Ссылка", ДополнительныеПараметры.Ссылка);
		СтруктураПараметров.Вставить("ДокументОснование", ДополнительныеПараметры.ДокументОснование);
		ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ID, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID           = ID;
		Запись.ДокументТОИР = ДокументТОИР;
		Запись.ДокументЕРП  = ДокументЕРП;
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьМассивНоменклатурыКЗаказуСервере(ID, ДокСсылка)
	
	// из документа торо_ЗаявкаНаРемонт.Форма.ФормаДокумента.Форма.Модуль Функция ПолучитьТаблицуЗаказаннойНоменклатуры(ID)
	УжеЗаказаннаяНоменклатура = ПолучитьТаблицуЗаказаннойНоменклатуры(ID, ДокСсылка);  
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.Текст =
	//++ Проф-ИТ, #308, Корнилов М.С., 19.10.2023
	"ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЛОЖЬ КАК проф_ПризнакЗапчасти,
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.КоличествоЕдиниц КАК КоличествоЕдиниц,
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID КАК ID,
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.МатериальныеЗатраты КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
	|ГДЕ
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ХарактеристикаНоменклатуры,
	|	ИСТИНА,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Количество,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ID,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ЗапчастиРемонта КАК торо_ЗаявкаНаРемонтЗапчастиРемонта
	|ГДЕ
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Товары.проф_ПризнакЗапчасти КАК проф_ПризнакЗапчасти,
	|	СУММА(ВТ_Товары.КоличествоЕдиниц) КАК КоличествоЕдиниц,
	|	ВТ_Товары.ID КАК ID,
	|	ВТ_Товары.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.ХарактеристикаНоменклатуры,
	|	ВТ_Товары.проф_ПризнакЗапчасти,
	|	ВТ_Товары.ID,
	|	ВТ_Товары.РемонтыОборудования_ID";
	//-- Проф-ИТ, #308, Корнилов М.С., 19.10.2023
	
	НоменклатураКСписанию = Запрос.Выполнить().Выгрузить();
	
	Товары = Новый Массив;
	Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	Работа = Перечисления.ТипыНоменклатуры.Работа;
		
	Для каждого Строка Из НоменклатураКСписанию Цикл
		
		Если Строка.Номенклатура.ТипНоменклатуры = Услуга 
		ИЛИ Строка.Номенклатура.ТипНоменклатуры = Работа Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры(УжеЗаказаннаяНоменклатура, Строка);
				
		Если УжеЗаказаннаяНоменклатура.Количество() = 0
		ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			//++ Проф-ИТ, #308, Горетовская М.С., 19.10.2023 - Доработка после задачи #205
			Структура = Новый Структура("Номенклатура, Характеристика, Количество, ID,
				|РемонтыОборудования_ID, проф_ПризнакЗапчасти");
			ЗаполнитьЗначенияСвойств(Структура, Строка);
			Структура.Вставить("Характеристика", Строка.ХарактеристикаНоменклатуры);
			Структура.Вставить("Количество", Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры);			
			//-- Проф-ИТ, #308, Горетовская М.С., 19.10.2023 - Доработка после задачи #205
			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

//-- Проф-ИТ, #249, Горетовская.М.С., 18.08.2023

//++ Проф-ИТ, #308, Корнилов М.С., 19.10.2023

Функция КоличествоУжеЗаказаннойНоменклатуры(УжеЗаказаннаяНоменклатура, Строка)
	
	КоличествоУжеЗаказаннойНоменклатуры = 0;
	
	Если УжеЗаказаннаяНоменклатура.Количество() > 0 Тогда
		Отбор = Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры);
		НайдСтроки = УжеЗаказаннаяНоменклатура.НайтиСтроки(Отбор);
		
		Если Не НайдСтроки = Неопределено Тогда
			Для каждого НайденнаяСтрока Из НайдСтроки Цикл
				КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;	
	
	Возврат КоличествоУжеЗаказаннойНоменклатуры;
	
КонецФункции	

//-- Проф-ИТ, #308, Корнилов М.С., 19.10.2023

//++ Проф-ИТ, #249, Горетовская.М.С., 18.08.2023

Функция ПолучитьТаблицуЗаказаннойНоменклатуры(ID, ДокСсылка)
	// из документа торо_ЗаявкаНаРемонт.Форма.ФормаДокумента.Форма.Модуль,
	// Функция ПолучитьТаблицуЗаказаннойНоменклатуры
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
	|ПОМЕСТИТЬ втДокументыНаОсновании
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID В(&ID)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыНаВнутреннееПотребление.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотребление.Характеристика КАК Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказыНаВнутреннееПотребление.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ЗаказыНаВнутреннееПотребление.КОформлению) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|ГДЕ
	|	ЗаказыНаВнутреннееПотребление.Регистратор В
	|			(ВЫБРАТЬ
	|				втДокументыНаОсновании.ДокументЕРП КАК Регистратор
	|			ИЗ
	|				втДокументыНаОсновании КАК втДокументыНаОсновании)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	ЗаказыНаВнутреннееПотребление.Номенклатура";
	
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ПолучитьСводнуюДатуОтгрузки(МассивID, ДокСсылка)
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА торо_ЗаявкиПоРемонтамСрезПоследних.ДатаНачала > &ТекущаяДата
	               |				ТОГДА торо_ЗаявкиПоРемонтамСрезПоследних.ДатаНачала
	               |			ИНАЧЕ """"
	               |		КОНЕЦ) КАК ДатаНачала
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
	               |			,
	               |			IDРемонта В (&ID)
	               |				И Регистратор = &Ссылка) КАК торо_ЗаявкиПоРемонтамСрезПоследних";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ДатаНачала;
	КонецЕсли;
	
КонецФункции

//-- Проф-ИТ, #249, Горетовская.М.С., 18.08.2023

#КонецОбласти