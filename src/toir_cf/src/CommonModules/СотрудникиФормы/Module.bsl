
#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Сотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		СотрудникиОбновитьЭлементыФормы(Форма);
		
	КонецЕсли;

	// Заполнение группы информационных ссылок
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ИнформационныйЦентр") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСервер");
		Модуль.ВывестиКонтекстныеСсылки(Форма, Форма.Элементы.ИнформационныеСсылки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект);	Форма.ФизическоеЛицоСсылка = ТекущийОбъект.ФизическоеЛицо;
	
КонецПроцедуры

Процедура СотрудникиПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Обработчик подсистемы "Контактная информация"
	Если Форма.КонтактнаяИнформацияФизическогоЛица <> Неопределено Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма.КонтактнаяИнформацияФизическогоЛица, Форма.ФизическоеЛицо);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ФизическоеЛицо) Тогда
		ТекущийОбъект.ФизическоеЛицо = Форма.ФизическоеЛицоСсылка;
	КонецЕсли;
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			ЗаписатьФизическоеЛицоСотрудника(Форма);
		КонецЕсли; 
		
		ТекущийОбъект.УстановитьСсылкуНового(Форма.СотрудникСсылка);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты);
		
КонецПроцедуры

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ) Экспорт
	
	СотрудникиФормыВнутренний.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ);
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация = Неопределено) Экспорт
	
	СотрудникиФормыВнутренний.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Физического лица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		ФизическиеЛицаОбновитьЭлементыФормы(Форма);
		ОбновитьОтображениеФормыФизическогоЛица(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект);
	ОбновитьОтображениеФормыФизическогоЛица(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Для нового физического лица устанавливаем ссылку
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, Форма.ФизическоеЛицоСсылка, "ФизическоеЛицо");
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);	
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ФизическиеЛицаОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
	ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);			

КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация = Неопределено, ИзФормыСотрудника = Ложь) Экспорт
	
	СотрудникиФормыВнутренний.ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация, ИзФормыСотрудника);
	ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, ФизическоеЛицоСсылка, ПутьКДаннымФизическогоЛицаВФорме = "ФизическоеЛицо")
	
	ИзменяемыеПоля = ИзменяемыеПоляФизическогоЛица();
	
	Если ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			Форма[КлючИЗначение.Значение] = Ложь;
		КонецЦикла;
	Иначе
		СтарыеЛичныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицоСсылка, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ИзменяемыеПоля));
		ФизическоеЛицоДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымФизическогоЛицаВФорме);
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			Форма[КлючИЗначение.Значение] = (СтарыеЛичныеДанные[КлючИЗначение.Ключ] <> ФизическоеЛицоДанныеФормы[КлючИЗначение.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ОбновитьОтображениеФормыФизическогоЛица(Форма)
	
	ОбновитьОтображениеЛичныхДанных(Форма);
	
КонецПроцедуры

Процедура ОбновитьОтображениеЛичныхДанных(Форма) Экспорт
	Форма.ФизическоеЛицоМестоРождения = ПредставлениеМестаРождения(Форма.ФизическоеЛицо.МестоРождения);
КонецПроцедуры

Процедура ОбновитьОтображениеПредупреждающихНадписей(Форма) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Серия ,Форма.Элементы.ДокументыФизическихЛицСерия, Форма);
		СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Номер ,Форма.Элементы.ДокументыФизическихЛицНомер, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив сотрудников физического лица
//
// Параметры:
//  ФизическоеЛицо 		- СправочникСсылка.ФизическиеЛица, сотрудников которого необходимо получить
//	ИсключаяСотрудника 	- СправочникСсылка.СотрудникиОрганизации, если задать, указанный сотрудник, будет исключен
//						из массива возвращаемых ссылок
//	Организация			- СправочникСсылка.Организации, если задать, то будут отобраны сотрудники, имеющие отношение к
//						соответствующей ГоловнойОрганизации.
//
// Возвращаемое значение:
//   Массив   - Массив ссылок на сотрудников физического лица. 
//
Функция СотрудникиФизическогоЛица(ФизическоеЛицо, ИсключаяСотрудника = Неопределено, Организация = Неопределено) Экспорт
	
	ОтбиратьВсехСотрудников = (ИсключаяСотрудника = Неопределено ИЛИ ИсключаяСотрудника = Справочники.Сотрудники.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОтбиратьПоВсемГоловнымОрганизациям = Ложь;
		ГоловнаяОрганизация = Организация;
	Иначе
		ОтбиратьПоВсемГоловнымОрганизациям = Истина;
		ГоловнаяОрганизация = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И (&ОтбиратьВсехСотрудников
	|			ИЛИ Сотрудники.Ссылка <> &ИсключаяСотрудника)
	|	И (&ОтбиратьПоВсемГоловнымОрганизациям
	|			ИЛИ Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация)";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ОтбиратьВсехСотрудников", ОтбиратьВсехСотрудников);
	Запрос.УстановитьПараметр("ИсключаяСотрудника", ИсключаяСотрудника);
	Запрос.УстановитьПараметр("ОтбиратьПоВсемГоловнымОрганизациям", ОтбиратьПоВсемГоловнымОрганизациям);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

#Область ПроцедурыДругихМодулейERP

// Функция раскладывает строку с данными о месте рождения на элементы структуры
//
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт
	
	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";
	
	МассивМестоРождения	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве > 0 Тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" тогда
			Особое = 1;
		КонецЕсли;
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		НаселенныйПункт = СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Область = СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Страна = СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Процедуры чтения / записи данных ФизическогоЛица

Процедура ИнициализироватьТекущиеДанныеСотрудника(Форма) Экспорт
	ТекущиеДанныеКакСтруктура = Новый Структура("ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущийВидЗанятости,ТекущаяТарифнаяСтавка,ДатаПриема,ДатаУвольнения");
	Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(ТекущиеДанныеКакСтруктура);
КонецПроцедуры

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	Возврат СотрудникиФормыВнутренний.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
КонецФункции

Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор) Экспорт
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

// Возвращает список физлиц с похожим наименованием
// Параметры:
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое уже сопоставлено с сотрудником.
//
Функция ПодобратьСписокФизЛиц(ФизическоеЛицоСсылка, Знач Фамилия, Знач Имя, Знач Отчество, Знач Уточнение = Неопределено) Экспорт
	
	СтруктураВозврат = Новый Структура("ФизическоеЛицоУникально", Истина);
	
	СписокФизлиц = Новый СписокЗначений;
	Фамилия  = СОКРЛП(Фамилия);
	Имя 	 = СОКРЛП(Имя);
	Отчество = СОКРЛП(Отчество);
	Наименование = Фамилия +" "+ Имя +" "+ Отчество;
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат СтруктураВозврат;
	КонецЕсли;
	
	ПохожиеФизическиеЛица = ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение); 
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивФизлиц = ПохожиеФизическиеЛица.ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МассивФизлиц.Количество() > 0 Тогда
		
		СтруктураВозврат.ФизическоеЛицоУникально = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&МассивФизлиц)";
		
		Запрос.УстановитьПараметр("МассивФизлиц", МассивФизлиц);
		
		МассивДоступныхФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
		Если МассивДоступныхФизическихЛиц.Количество() = МассивФизлиц.Количество() Тогда
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Истина);
			
			ДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, 
				МассивФизлиц,
				"Фамилия,Имя,Отчество,ФИОПолные,ДатаРождения,ИНН,СтраховойНомерПФР,ДокументВид,ДокументСерия,ДокументНомер,ДокументДатаВыдачи,ДокументПредставление",
				ТекущаяДатаСеанса());
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛиц", ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеФизическихЛиц));
			
		Иначе
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Ложь);
			СтруктураВозврат.Вставить("ВозможнаПроверкаПоИНН", Ложь);
			СтруктураВозврат.Вставить("ВозможнаПроверкаПоСНИЛС", Ложь);
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			УстановитьПривилегированныйРежим(Истина);
			
			КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(
				Запрос.МенеджерВременныхТаблиц,
				Ложь,
				МассивФизлиц,
				"ИНН,СтраховойНомерПФР",
				ТекущаяДатаСеанса());
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(КадровыеДанныеФизическихЛиц.ИНН) КАК ИНН,
			|	МИНИМУМ(КадровыеДанныеФизическихЛиц.СтраховойНомерПФР) КАК СНИЛС
			|ПОМЕСТИТЬ ВТМинимальныеИННИСНИЛС
			|ИЗ
			|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА МинимальныеИННИСНИЛС.ИНН = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ВозможнаПроверкаПоИНН,
			|	ВЫБОР
			|		КОГДА МинимальныеИННИСНИЛС.СНИЛС = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ВозможнаПроверкаПоСНИЛС
			|ИЗ
			|	ВТМинимальныеИННИСНИЛС КАК МинимальныеИННИСНИЛС";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураВозврат, Выборка);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СтруктураВозврат;
	
КонецФункции

Процедура ОбновитьДанныеФизическогоЛица(Форма) Экспорт
	ПрочитатьДанныеСвязанныеССотрудником(Форма);
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Функция ИзменяемыеПоляФизическогоЛица() Экспорт
	
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Пол", "ИзмененПол");
	ИзменяемыеПоля.Вставить("ДатаРождения", "ИзмененаДатаРождения");
	
	Возврат ИзменяемыеПоля;
	
КонецФункции

Процедура СотрудникиПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если НЕ Форма.ИзмененыЛичныеДанные Тогда
		ПрочитатьДанныеСвязанныеССотрудником(Форма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаписатьФизическоеЛицоСотрудника(Форма) Экспорт
	
	// Запись физического лица
	Если Форма.ФизическоеЛицоЗаблокировано ИЛИ Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
		
		// проверим права на запись нового физлица
		ПравоНаДобавлениеИзменениеФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеПерсональныхДанныхФизическихЛиц,ДобавлениеИзменениеФизическихЛиц");
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() И НЕ ПравоНаДобавлениеИзменениеФизическихЛиц Тогда
			ВызватьИсключение НСТР("ru = 'Нет прав на запись нового физического лица. Сотрудник не записан.'");
		КонецЕсли;
	
		ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
		Если ФизическоеЛицоОбъект.Ссылка.Пустая() Тогда
			ФизическоеЛицоОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка);
		КонецЕсли;
		
		ФизическоеЛицоОбъект.Записать();
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			
			Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Сотрудник, ФизическоеЛицо, Организация, ВидЗанятости, ДатаПриема) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	
	ТекстСообщенияОКонфликте = "";
	Если ЗначениеЗаполнено(ДатаПриема) И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ВидЗанятости) Тогда
		
		ГоловнаяОрганизация = Организация;
		
		ЕстьОсновноеМестоРаботы = Ложь;
		
		СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ТабельныйНомер,Должность,ВидЗанятости,ДатаПриема,ДатаУвольнения";
		ТаблицаПоРабочимМестам = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФормы.СотрудникиФизическогоЛица(ФизическоеЛицо, Сотрудник), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
		
		МассивКонфликтныхРабочихМест = Новый Массив;
		Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
			
			Если НЕ (СтрокаТаблицаПоРабочимМестам.ДатаПриема <> '00010101000000' И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
				И (СтрокаТаблицаПоРабочимМестам.ДатаУвольнения > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаУвольнения = '00010101000000')) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
				Если СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				ИначеЕсли СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство 
							И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				КонецЕсли; 
			ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда 
				Если (СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
						ИЛИ СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
						И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				КонецЕсли;
			КонецЕсли;
			
			Если (СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
					ИЛИ СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
					И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
				ЕстьОсновноеМестоРаботы = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивКонфликтныхРабочихМест.Количество() > 0 Тогда
			
			ТекстСообщенияОКонфликте = "";
			Для каждого СтрокаКонфликтногоСотрудника Из МассивКонфликтныхРабочихМест Цикл
				ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликте + Символы.ПС +
					ТекстСообщенияОКонфликтеВидаЗанятости(
						ВидЗанятости,
						Организация,
						СтрокаКонфликтногоСотрудника.Организация,
						СтрокаКонфликтногоСотрудника.ВидЗанятости,
						СтрокаКонфликтногоСотрудника.ТабельныйНомер,
						СтрокаКонфликтногоСотрудника.Должность);
			КонецЦикла;	
					
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство И НЕ ЕстьОсновноеМестоРаботы Тогда
			ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСообщенияОКонфликте;
	
КонецФункции

Функция ПолучитьВидЗанятостиДляНовогоСотрудника(Сотрудник, Организация, ФизическоеЛицо) Экспорт

	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли; 
	
	СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ВидЗанятости,ДатаПриема,ДатаУвольнения";
	ТаблицаПоРабочимМестамПредварительно = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФизическогоЛица(ФизическоеЛицо), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
	
	// Рассчитаем актуальность сотрудника
	ТаблицаПоРабочимМестамПредварительно.Колонки.Добавить("СотрудникАктуален", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестамПредварительно Цикл
		СтрокаТаблицаПоРабочимМестам.СотрудникАктуален = СтрокаТаблицаПоРабочимМестам.ДатаПриема <> '00010101000000' И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
			И (СтрокаТаблицаПоРабочимМестам.ДатаУвольнения > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаУвольнения = '00010101000000');
		
	КонецЦикла;
	
	// Оставим записи только для актуальных сотрудников
	ТаблицаПоРабочимМестам =  ТаблицаПоРабочимМестамПредварительно.Скопировать(ТаблицаПоРабочимМестамПредварительно.НайтиСтроки(Новый Структура("СотрудникАктуален", Истина)));	
	Если ТаблицаПоРабочимМестам.Количество() > 0 Тогда
		ГоловнаяОрганизация = Организация;
		// Есть актуальные рабочие места
		// Проверим есть ли рабочие места по основному месту работы.
		СтруктураОтбора = Новый Структура("ВидЗанятости", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
		АктуальныеСотрудникиПоОсновномуМестуРаботы = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
		Если АктуальныеСотрудникиПоОсновномуМестуРаботы.Количество() > 0 Тогда
			// Проверим актуальные рабочие места с основным рабочим местом в выбранной организации.
			СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
			АктуальныеСотрудникиПоОсновномуМестуРаботыВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			Если АктуальныеСотрудникиПоОсновномуМестуРаботыВыбраннойОрганизации.Количество() > 0 Тогда
				// Уже работает в этой организации по основному месту работы
				Возврат Перечисления.ВидыЗанятости.ВнутреннееСовместительство;
			Иначе
				// Основное место работы в другой организации
				// Проверим рабочее места как внешнего совместителя в выбранной организации.
				СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, Перечисления.ВидыЗанятости.Совместительство);
				АктуальныеСотрудникиВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
				Если АктуальныеСотрудникиВыбраннойОрганизации.Количество() > 0 Тогда
					// Уже работает как внешний совместитель
					Возврат Перечисления.ВидыЗанятости.ВнутреннееСовместительство;
				Иначе
					// Значит можно предложить внешнее совместительство
					Возврат Перечисления.ВидыЗанятости.Совместительство;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Проверим вид занятости (внешнее совместительство) в выбранной организации
			СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, Перечисления.ВидыЗанятости.Совместительство);
			АктуальныеСотрудникиВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			Если АктуальныеСотрудникиВыбраннойОрганизации.Количество() > 0 Тогда
				// Уже работает по совместительству
				Возврат Перечисления.ВидыЗанятости.ВнутреннееСовместительство;
			Иначе
				// Значит можно предложить основное место работы
				Возврат Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Актуальных рабочих мест нет, значит основное место работы
	Возврат Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация, КонфликтныйСотрудникОрганизация = Неопределено, КонфликтныйСотрудникВидЗанятости = Неопределено, КонфликтныйСотрудникТабельныйНомер = "", КонфликтныйСотрудникДолжность = Неопределено)
	ТекстСообщения = "";
	Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		ТекстСообщения =  НСтр("ru = 'Нельзя оформить сотрудника по основному месту работы, так как он уже работает в %1 %2, Таб. номер: %3, %4.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
		ТекстСообщения =  НСтр("ru = 'Нельзя оформить сотрудника на внешнее совместительство, так как он уже работает в %1 %2, Таб. номер: %3, %4.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя оформить сотрудника на внутреннее совместительство, так как он не работает в %1.'");
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		?(Организация <> КонфликтныйСотрудникОрганизация И КонфликтныйСотрудникОрганизация <> Неопределено, КонфликтныйСотрудникОрганизация, НСтр("ru = 'нашей организации'")),
		?(КонфликтныйСотрудникВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы, НСтр("ru = 'по основному месту работы'"), НСтр("ru = 'как внешний совместитель'")),
		КонфликтныйСотрудникТабельныйНомер,
		КонфликтныйСотрудникДолжность,);
	КонецФункции

Процедура СотрудникиОбновитьЭлементыФормы(Форма)
	
	СотрудникиФормыВнутренний.СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

// Возвращает запрос для проверки физических лиц с похожими ФИО
// с установленными параметрами для текущей проверки.
// Параметры:
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое проверяем                             
//		Фамилия, Имя, Отчество, Уточнение - проверяемые ФИО и уточнение
//		ФИОПолностью - проверять полное совпадение ФИО (и возможно уточнения)					                             
//		ТочноеСовпадение - полное совпадение фамилии, имени и отчества.					                             
//
Функция ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение = "", ФИОПолностью = Ложь, ТочноеСовпадение = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка <> &ФизическоеЛицо
	|	И (ФизическиеЛица.Наименование ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмяОтчествоУточнение СПЕЦСИМВОЛ ""~"")";
	
	Если НЕ ТочноеСовпадение Тогда
				
		Запрос.УстановитьПараметр("ФамилияИмяОтчество", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),"%"," %" + Отчество));		
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("Фамилия", Фамилия);
	Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя));
	Запрос.УстановитьПараметр("ФамилияИмяОтчествоУточнение", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество) + ?(ПустаяСтрока(Отчество),""," %" + Уточнение));
		
	Если ФИОПолностью Тогда
		Запрос.УстановитьПараметр("Фамилия", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество));
		Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество));
	КонецЕсли;	

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает строковое представление места рождения
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения)  
	
	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
	
	Если СтруктураМестоРождения.Особое = 1 Тогда
		
		Представление	=	"особое" +
		?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
	Иначе
		
		Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", " + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
		Если Лев(Представление, 1) = ","  Тогда
			Представление = Сред(Представление, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

#КонецОбласти
