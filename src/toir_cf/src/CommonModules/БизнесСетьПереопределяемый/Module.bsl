

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-сеть".
// ОбщийМодуль.БизнесСетьПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполнение адресов организации и ее складов.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, по которой заполняются адреса.
//  Адреса - ТаблицаЗначения - таблица для заполнения. Содержит колонки:
//   * Представление - Строка - представление адреса.
//   * ЗначенияПолей - Строка - адрес в формате XML. Формат должен соответствовать XDTO-пакету Адрес.
//   * Описание - Строка - комментарий адреса.
//   * Ссылка - Ссылка - объект хранения контактной информации.
//   * Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//
Процедура ЗаполнитьАдресаОрганизации(Организация, Адреса) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
		|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
		|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
		|ГДЕ
		|	ОрганизацииКонтактнаяИнформация.Ссылка = &Организация
		|	И ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаАдреса = Адреса.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаАдреса, Выборка);
		
		СтрокаАдреса.Описание = СтрШаблон("%1 (%2)", Выборка.Вид, Выборка.Ссылка);
		
	КонецЦикла;
	
	Адреса.Сортировать("Представление");	
КонецПроцедуры	

// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	// Проверка прав для создания контрагента.
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для создания контрагента.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты,,
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента.Вставить("ЭтоЭлектронныйДокумент", Истина);
	РеквизитыКонтрагента.Вставить("НаименованиеПолное", РеквизитыКонтрагента.Наименование);
	
	Попытка
		
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.Заполнить(РеквизитыКонтрагента);
		
		Если СтрДлина(РеквизитыКонтрагента.ИНН) = 10 Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ИначеЕсли СтрДлина(РеквизитыКонтрагента.ИНН) = 12 Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
		СтруктураНаименования = РазложитьСтрокуНаименованияОрганизации(РеквизитыКонтрагента.НаименованиеПолное, Объект.ЮридическоеФизическоеЛицо);
		Объект.Наименование = СформироватьНаименование(СтруктураНаименования);
	
		Объект.Записать();
		Контрагент = Объект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при записи нового элемента справочника Контрагенты.'")
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает контакты пользователя для регистрации в сервисе.
//
// Параметры:
//   КонтактноеЛицо - СправочникСсылка - пользователь программы, контактное лицо.
//   Результат - Структура - информация о пользователе:
//     * ФИО - Строка - ФИО пользователя.
//     * Телефон - Строка - номер телефона.
//     * ЭлектроннаяПочта - Строка - адрес электронной почты пользователя.
//
Процедура ПолучитьКонтактнуюИнформациюПользователя(Знач КонтактноеЛицо, Результат) Экспорт
	
	Если КонтактноеЛицо = Пользователи.СсылкаНеуказанногоПользователя() Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Результат.ФИО = Строка(КонтактноеЛицо);
	Результат.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Результат.Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);

КонецПроцедуры

// Проверка соответствия реквизитов в документах. Выполняется перед формированием электронных документов
// и проверяет реквизиты перед отправкой. Должны быть одинаковыми Организация, Контрагент, вид формируемого
// электронного документа, а также дополнительные реквизиты связанные с формированием.
//
// Параметры:
//   ДокументыКонтроля - Массив из ДокументСсылка - проверяемые ссылки объектов.
//   ТекстСообщения    - Строка - текст сообщения в случае ошибки проверки.
//   Отказ             - Булево - результат проверки.
//
Процедура ВыполнитьКонтрольРеквизитовДокументов(Знач ДокументыКонтроля, ТекстСообщения, Отказ) Экспорт
	
	ИмяМетаданных = "";
	Для каждого Ссылка Из ДокументыКонтроля Цикл
		Если ИмяМетаданных = "" Тогда
			ИмяМетаданных = Ссылка.Метаданные().Имя;
		ИначеЕсли ИмяМетаданных <> Ссылка.Метаданные().Имя Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Операция невозможна для разных видов документов'");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяМетаданных = "РеализацияТоваровУслуг" Тогда
		Реквизиты = "Организация, Контрагент";
		
	ИначеЕсли ИмяМетаданных = "ЗаказПокупателя" ИЛИ ИмяМетаданных = "торо_ЗаказПоставщику" Тогда
		Реквизиты = "Организация, Контрагент, Валюта";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ";
	МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Реквизиты, ",");
	ПоследнийЭлемент = МассивРеквизитов.Получить(МассивРеквизитов.Количество()-1);
	Для каждого ЗначениеМассива Из МассивРеквизитов Цикл
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + ИмяМетаданных + "." + СокрЛП(ЗначениеМассива)
			+ ?(ЗначениеМассива = ПоследнийЭлемент, "", ",");
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ " + "Документ." + ИмяМетаданных + " КАК "
		+ ИмяМетаданных	+ " ГДЕ " + ИмяМетаданных + ".Ссылка В(&ДокументыКонтроля)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументыКонтроля", ДокументыКонтроля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Отказ = Истина;
		Шаблон = НСтр("ru = 'Операция невозможна. Отличаются реквизиты документов (%1)'");
		ТекстСообщения = СтрШаблон(Шаблон, Реквизиты);
	КонецЕсли;
		
КонецПроцедуры

// Получение списка контрагентов по сделкам для отправки приглашений.
//
// Параметры:
//  Организация			 - СправочникСсылка - ссылка на организацию, от которой производится приглашение.
//  РежимЗаполнения		 - Строка - режим заполнения контрагентов: "ЗаполнитьПоПоставкам", "ЗаполнитьПоЗакупкам", "ЗаполнитьПоВсемСделкам".
//  НачалоПериода		 - Дата - начало периода заполнения.
//  СписокКонтрагентов	 - ТаблицаЗначений - список контрагентов:
//    * Ссылка - СправочникСсылка - контрагент.
//    * ЭлектроннаяПочта - Строка - адрес электронной почты.
//
Процедура ПолучитьКонтрагентовПоСделкам(Знач Организация, Знач РежимЗаполнения, Знач НачалоПериода, СписокКонтрагентов) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаполнитьПоПоставкам",   РежимЗаполнения = "ЗаполнитьПоПоставкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоЗакупкам",    РежимЗаполнения = "ЗаполнитьПоЗакупкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоВсемСделкам", РежимЗаполнения = "ЗаполнитьПоВсемСделкам");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыЗакупки.Контрагент КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДокументыЗакупки
	|ГДЕ
	|	ДокументыЗакупки.Дата >= &НачалоПериода
	|	И НЕ ДокументыЗакупки.ПометкаУдаления
	|	И (&ЗаполнитьПоЗакупкам
	|			ИЛИ &ЗаполнитьПоВсемСделкам)
	|	И ДокументыЗакупки.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыЗакупки.Контрагент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		АдресЭлектроннойПочтыКонтрагента(
			Выборка.Ссылка, НоваяСтрока.ЭлектроннаяПочта);
	КонецЦикла;

КонецПроцедуры

#Область QRКод

// Формирует представление прикладного документа с QR-кодом, если включена ФО ВыводитьQRКодНаПечатныхФормахДокументов.
// По этим данным можно найти и загрузить в базу 1С документ из сервиса 1С:Бизнес-сеть.
//
// Параметры:
//  СсылкиНаДокументы         - Массив из ДокументСсылка  - ссылки на документы, по которым необходимо сформировать представления файла ЭД.
//  ВидЭД                     - ПеречислениеСсылка.ВидыЭД - ссылка на вид электронного документа.
//  ДанныеQRКодовПоДокументам - СписокЗначений            - объекты печати (значение - ссылка на объект, представление - имя области, в которой был выведен объект).
//  ПечатнаяФорма             - ТабличныйДокумент         - печатная форма, в которой должна быть область "ДанныеQRКода", в которой должны быть параметры:
//                                                          КартинкаQRКода        - Картинка - для заполнения рисунка QR-кода. 
//                                                          ПубличнаяСсылкаQRКода - Строка   - для заполнения публичной ссылки.
//
Процедура СформироватьПредставлениеПрикладногоДокументаСQRКодом(Знач СсылкиНаДокументы, Знач ВидЭД, Знач ДанныеQRКодовПоДокументам, ПечатнаяФорма) Экспорт
	
	
КонецПроцедуры

// Переопределяет картинку на форме поиска электронного документа с отображением подсказки, где искать QR-код.
//
// Параметры:
//  ЭлементФормыКартинка - ДекорацияФормы - элемент формы картинки подсказки.
//
Процедура УстановитьКартинкуПодсказкиОтображенияQRКодаНаДокументе(ЭлементФормыКартинка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает наименование организации без организационно-правовой Формы.
//
// Параметры:
//  Наименование - Строка - полное или сокращенное наименование организации.
//  ЮрФизЛицо - ПеречислениеСсылка.ЮридическоеФизическоеЛицо - вид лица.
//
// Возвращаемое значение:
//  Структура - части наименования организации.
//     * Наименование - Строка - наименование организации без организационно-правовой Формы.
//     * ОрганизационноПравоваяФорма - Строка - организационно-правовая форма предприятия.
//     * ОрганизационноПравоваяФормаСокращенно - Строка - организационно-правовая форма предприятия сокращенно.
//
Функция РазложитьСтрокуНаименованияОрганизации(Знач Наименование, ЮрФизЛицо) Экспорт
	
	Результат = Новый Структура("Наименование, ОрганизационноПравоваяФорма, ОрганизационноПравоваяФормаСокращенно");
	
	Наименование = СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ИП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ИП'");
	Иначе
		ОрганизационноПравоваяФорма           = "";
		ОрганизационноПравоваяФормаСокращенно = "";
	КонецЕсли;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
		И ЗначениеЗаполнено(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек = СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки = Найти(Наименование, """");
			ПозицияПоследнейКавычки = 0;
			
			ВремНаименование = Наименование;
			
			ПозицияКавычки = ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки = ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование = Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки = Найти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование = Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек % 2 = 0 Тогда
				Наименование = Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование = СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма = ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно = ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат = Ложь;
	
	Наименование = СокрЛП(Наименование);
	
	ДлинаНаименования         = СтрДлина(Наименование);
	ДлинаОрганизационнойФормы = СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование = СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат = Истина;
	КонецЕсли;
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование = СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует полное наименование организации.
//
// Параметры:
//  ЮрФизЛицо             - ПеречислениеСсылка.ЮрФизЛицо - содержит значение юр/физ лица.
//  СтруктураНаименования - Структура - см. РазложитьСтрокуНаименованияОрганизации.
//
// Возвращаемое значение:
//  Строка - полное наименование организации.
//
Функция СформироватьНаименованиеПолное(Знач ЮрФизЛицо, СтруктураНаименования) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
		НаименованиеПолное = СтруктураНаименования.Наименование;
	ИначеЕсли ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		НаименованиеПолное = СтрШаблон(НСтр("ru = '%1 ""%2""'"), СтруктураНаименования.ОрганизационноПравоваяФорма,
			СтруктураНаименования.Наименование);
	Иначе
		НаименованиеПолное = СтрШаблон(НСтр("ru = '%1 %2'"), СтруктураНаименования.ОрганизационноПравоваяФорма,
			СтруктураНаименования.Наименование);
	КонецЕсли;
	
	Возврат НаименованиеПолное;
	
КонецФункции

// Формирует наименование организации.
//
// Параметры:
//  СтруктураНаименования - Структура - см. РазложитьСтрокуНаименованияОрганизации.
// Возвращаемое значение:
//  Строка - наименование организации.
//
Функция СформироватьНаименование(СтруктураНаименования) Экспорт
	
	Возврат СтруктураНаименования.Наименование
		+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
		+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;
	
КонецФункции

Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	&ИмяТаблицыКонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидEmail";
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailКонтрагента"].Ссылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыКонтактнаяИнформация", 
		Контрагент.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация");
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Тип",      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидEmail", ВидEmail);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		АдресЭП = Выборка.АдресЭП;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти