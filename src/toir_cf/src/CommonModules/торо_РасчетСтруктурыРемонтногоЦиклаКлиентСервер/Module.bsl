#Область СлужебныйПрограммныйИнтерфейс

Процедура ВывестиКолонкуЗаголовковТаблицыРасшифровки(ПолеТД, Знач СдвигСтрокПоляТД, КоличествоКолонокПоляТД, Знач КоличествоРемонтов, ИндексСтроки, КолонкиНаработки) Экспорт
	
	флВсеНарисовано = Ложь;
	ЭтоПерваяЧастьТаблицы   = Истина;
	
	ШаблонОтПредшествующего = НСтр("ru='%1 (от предшествующего)'");
	ШаблонОтПредшествующегоТогоЖеВида = НСтр("ru='%1 (от предшествующего того же вида)'");
	
	Пока НЕ флВсеНарисовано Цикл
		
		Если КоличествоКолонокПоляТД <= 1 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоРемонтов + 1 > КоличествоКолонокПоляТД Тогда
			ЧертитьКолонок     = КоличествоКолонокПоляТД;
			КоличествоРемонтов = КоличествоРемонтов - КоличествоКолонокПоляТД + 1;
		Иначе 
			ЧертитьКолонок  = КоличествоРемонтов + 1;
			флВсеНарисовано = Истина;
		КонецЕсли;
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД, 2, 6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
		ОбластьВывода.ГраницаСверху           = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСлева            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСнизу            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСправа           = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьВывода.РазмещениеТекста        = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД, 3, 6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
		ОбластьВывода.ШиринаКолонки = 8;
		ОбластьВывода.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД, 2, 6 + ИндексСтроки - 7 + СдвигСтрокПоляТД);
		ОбластьВывода.ШиринаКолонки           = 20;
		ОбластьВывода.РазмещениеТекста        = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		Если НЕ ЭтоПерваяЧастьТаблицы Тогда
			ОбластьВывода       = ПолеТД.Область(3 + СдвигСтрокПоляТД - 1, 2);
			ОбластьВывода.Текст = НСтр("ru='Продолжение'");
		КонецЕсли;
		
		ЭтоПерваяЧастьТаблицы = Ложь;
		
		ОбластьВывода       = ПолеТД.Область(3 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = НСтр("ru='Вид ремонта'"); 
		ОбластьВывода       = ПолеТД.Область(4 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = НСтр("ru='Продолжительность (ч)'"); 
		ОбластьВывода       = ПолеТД.Область(5 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = НСтр("ru='Тек. рабочие дни (от предшествующего)'");
		ОбластьВывода       = ПолеТД.Область(6 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = НСтр("ru='Тек. календарные дни (от предшествующего)'");
		ОбластьВывода       = ПолеТД.Область(7 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = НСтр("ru='Время работы (от предшествующего того же вида)'");
		
		ИндексПоНаработке = 0;
		
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			ОбластьВывода = ПолеТД.Область(8 + ИндексПоНаработке + СдвигСтрокПоляТД, 2);
			Если КолонкаНаработки.ПредшествующийТогоЖеВида Тогда
				ОбластьВывода.Текст = СтрШаблон(ШаблонОтПредшествующегоТогоЖеВида, КолонкаНаработки.Показатель);
			Иначе
				ОбластьВывода.Текст = СтрШаблон(ШаблонОтПредшествующего, КолонкаНаработки.Показатель);
			КонецЕсли;
			ИндексПоНаработке = ИндексПоНаработке + 1;
		КонецЦикла;
		
		ОбластьВывода = ПолеТД.Область(8 + ИндексПоНаработке + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = НСтр("ru='Рассчитан по наработке'");
		
		СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиКолонкуДанныхТаблицыРасшифровки(ПолеТД, СдвигСтрокПоляТД, ИндексСтроки, НомерРемонта, СтрокаРемонта, КолонкиНаработки, ЗначенияНаработки) Экспорт
	
	НомерКолонки = НомерРемонта + 2;
	
	ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД, НомерКолонки);
	ОбластьВывода.Текст = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(СтрокаРемонта.ВидРемонтныхРабот, Истина);
	
	ОбластьВывода2 = ПолеТД.Область(4 + СдвигСтрокПоляТД, НомерКолонки);
	Продолжительность = Формат((СтрокаРемонта.Продолжительность) / 3600,"ЧДЦ=1"); 
	ОбластьВывода2.Текст = ?(СтрокаРемонта.НеУчитыватьПродолжительность,"(","") + Продолжительность + ?(СтрокаРемонта.НеУчитыватьПродолжительность,")","");   // продолжительность (часов)
	
	ОбластьВывода2 = ПолеТД.Область(5 + СдвигСтрокПоляТД, НомерКолонки);
	ОбластьВывода2.Текст = СтрокаРемонта.Дни; 	// рабочих дней от предыдущего 
	
	ОбластьВывода2 = ПолеТД.Область(6 + СдвигСтрокПоляТД, НомерКолонки);
	РазностьДат = (СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / 86400;
	ОбластьВывода2.Текст = ?(РазностьДат > 0,РазностьДат - 1, 0); 	// календарных дней от предыдущего
	
	ОбластьВывода2 = ПолеТД.Область(7 + СдвигСтрокПоляТД, НомерКолонки);
	ОбластьВывода2.Текст = СтрокаРемонта.ДниОтПредшествующего;
	
	ИндексПоНаработке = 0;
	
	Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
		СтрокиНаработки = ЗначенияНаработки.НайтиСтроки(Новый Структура("ID, ВидРемонтныхРабот, Показатель", СтрокаРемонта.ID, СтрокаРемонта.ВидРемонтныхРабот, КолонкаНаработки.ИмяКолонки));
		Если СтрокиНаработки.Количество() > 0 Тогда
			СтрНар = СтрокиНаработки[0];
			
			ОбластьВывода2 = ПолеТД.Область(8 + ИндексПоНаработке + СдвигСтрокПоляТД, НомерКолонки);
			ОбластьВывода2.Текст = СтрНар.Значение;
			
			ИндексПоНаработке = ИндексПоНаработке + 1;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьВывода2 = ПолеТД.Область(8 + ИндексПоНаработке + СдвигСтрокПоляТД, НомерКолонки);
	ОбластьВывода2.Текст = ?(СтрокаРемонта.РассчитанПоПериодичности = Ложь, "v", "");
	
КонецПроцедуры

#КонецОбласти