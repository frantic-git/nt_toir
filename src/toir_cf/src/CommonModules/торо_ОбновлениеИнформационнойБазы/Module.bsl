////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы ТОиР
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего
//									  модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "ТехническоеОбслуживаниеИРемонты3";
	Описание.Версия = "3.0.6.1";
	Описание.ИдентификаторИнтернетПоддержки = "TOIR30";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт                                              
	
#Область ОбновлениеПоставляемойМоделиПоказателейKPI
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "*";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновитьПоставляемуюМодельПоказателейKPI";
	ОбработчикОбновления.НачальноеЗаполнение = Ложь; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
#КонецОбласти
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьОбъектыКонфигурацииДляПользовательскогоПредставления";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение списка объектов конфигурации для пользовательских представлений...";
								
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеСценарияРаботы";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение данных в предопределенном элементе справочника ""Предопределенные сценарии работы системы""";
													
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗагрузитьПоставляемуюМодельПоказателейKPI";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Загрузка поставляемой модели показателей KPI...";
																
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "Справочники.Организации.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение значения константы ""Использовать несколько организаций"" ...";
												
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_СЛКСервер.ПроверитьУстановитьНастройкиОповещенияПоУмолчанию";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьПредставлениеВРВСтруктуреРЦ";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";					

	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОтчетыПоЗадачамРСНастройкиВариантовОтчетов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьПредставлениеОРДляПечати";
	ОбработчикОбновления.НачальноеЗаполнение = Истина; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.УстановитьЗначениеВремениУчетаРецидивностиДефектов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
		
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьСпособРезервированияМатериалов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.1.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьКоэффициентУчетаКритичности";
	ОбработчикОбновления.НачальноеЗаполнение = Истина; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.4.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ДополнитьРегистрПорядокОРПоИерархии";
	ОбработчикОбновления.НачальноеЗаполнение = Ложь; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.4.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.УстановитьПериодРасчетаСтатистики";
	ОбработчикОбновления.НачальноеЗаполнение = Истина; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.4.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.УстановитьФлагВЕдиницахИзмерения";
	ОбработчикОбновления.НачальноеЗаполнение = Истина; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ВключитьУчетСостоянийОборудованияПриУчетеНаработкиИППР";
	ОбработчикОбновления.НачальноеЗаполнение = Ложь; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";   
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьРегистрВремяНахожденияВСостоянииПоДатам";
	ОбработчикОбновления.НачальноеЗаполнение = Ложь; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно"; 
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.6.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.КорректировкаРегистраВремяНахожденияВСостоянииПоДатам";
	ОбработчикОбновления.НачальноеЗаполнение = Ложь; 
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "3.0.6.1";
	ОбработчикОбновления.Идентификатор 		 = Новый УникальныйИдентификатор("bf9c94ce-0f47-4362-b538-63631b01cbe5");
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьРегистрыПотребностей";
	ОбработчикОбновления.НачальноеЗаполнение = Ложь; 
	ОбработчикОбновления.РежимВыполнения     = "Отложенно";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//

КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Макет) Экспорт
	
	Если НЕ торо_СЛКСервер.СерияЗащитыИнициализирована("28DD", Истина) И торо_СЛКСервер.СерияЗащитыИнициализирована("5DD5", Истина) Тогда
		НовыйМакет = Новый ТабличныйДокумент;
		МакетПРОФ = ПолучитьОбщийМакет("ОписаниеИзмененийСистемыПРОФ");
		
		ТаблицаОбластей = Новый ТаблицаЗначений;
		ТаблицаОбластей.Колонки.Добавить("ИмяОбласти", Новый ОписаниеТипов("Строка"));
		ТаблицаОбластей.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		Для каждого Область из Макет.Области Цикл
			Если Область.Имя = "Отступ" Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаОбластей.Добавить();
			НоваяСтрока.ИмяОбласти = Область.Имя;
			НоваяСтрока.НомерСтроки = Область.Верх;
		КонецЦикла;
		
		ТаблицаОбластей.Сортировать("НомерСтроки");
		
		Для каждого СтрокаТаблицы из ТаблицаОбластей Цикл
			
			ИмяОбласти = СтрокаТаблицы.ИмяОбласти;
			ОбластьПРОФ = МакетПРОФ.Области.Найти(ИмяОбласти);
			
			Если ОбластьПРОФ = Неопределено Тогда
				ТДДляВывода = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ТДДляВывода = МакетПРОФ.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
			
			Если СтрНачинаетсяС(ИмяОбласти, "Версия") Тогда
				НовыйМакет.НачатьГруппуСтрок(ИмяОбласти);
				НовыйМакет.Вывести(ТДДляВывода);
				НовыйМакет.ЗакончитьГруппуСтрок();
				НовыйМакет.Вывести(МакетПРОФ.ПолучитьОбласть("Отступ"));
			Иначе
				НовыйМакет.Вывести(ТДДляВывода);
			КонецЕсли;
			
		КонецЦикла;
		
		Макет = НовыйМакет;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при добалении при переходе с другой конфигурации
// Используется для добавления необходимых обработчиков.
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазыСлужебный.НоваяТаблицаОбработчиковПереходаСДругойПрограммы.
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается при определнии режима обновления данных.
//
// Параметры:
//   РежимОбновленияДанных - Строка - режим обновления.
//   СтандартнаяОбработка - Булево - Ложь, если нужно изменить режим по умолчанию.
//  
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеПоставляемойМоделиПоказателейKPI

Процедура ОбновитьПоставляемуюМодельПоказателейKPI(Параметры = Неопределено) Экспорт
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	
	Попытка
		АктуальнаяВерсияМоделиKPI = торо_ПоказателиKPI.АктуальнаяВерсияПоставляемойМодели();
		ЗагруженнаяВерсияМоделиKPI = Константы.торо_ЗагруженнаяВерсияПоставляемойМодели.Получить();
		Если Не ЗначениеЗаполнено(ЗагруженнаяВерсияМоделиKPI) Тогда
		    ЗагруженнаяВерсияМоделиKPI = "1.1";
		КонецЕсли;
		
		// Просто привести значение версии к числу с помощью функции Число() не получится, т.к. используется
		// классическая схема версионирования программ, т.е. версия "1.2" считается меньше версии "1.12".
		// Т.е. при приведении к типу Число получится, что версия "1.2" будет больше версии "1.12".
		// Поэтому отдельно сравним первые числа версий и вторые.
		АктуальнаяВерсияМоделиKPIЧисла = СтрРазделить(АктуальнаяВерсияМоделиKPI, ".");
		ЗагруженнаяВерсияМоделиKPIЧисла = СтрРазделить(ЗагруженнаяВерсияМоделиKPI, ".");
		
		Если Не (Число(АктуальнаяВерсияМоделиKPIЧисла[0]) > Число(ЗагруженнаяВерсияМоделиKPIЧисла[0])
					Или Число(АктуальнаяВерсияМоделиKPIЧисла[0]) = Число(ЗагруженнаяВерсияМоделиKPIЧисла[0])
					И Число(АктуальнаяВерсияМоделиKPIЧисла[1]) > Число(ЗагруженнаяВерсияМоделиKPIЧисла[1])) Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
				
		Если Константы.торо_АвтоматическиОбновлятьПоставляемуюМодельПоказателейKPI.Получить() Тогда
			торо_ПоказателиKPI.ВосстановитьПоставляемуюМодельПоказателей();
			Константы.торо_ЗадатьВопросОбОбновленииПоставляемойМодели.Установить(Ложь);
		Иначе
			Константы.торо_ЗадатьВопросОбОбновленииПоставляемойМодели.Установить(Истина);
		КонецЕсли;
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось обновить поставляемую модель показателей KPI! По причине: '") + ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации);
	КонецПопытки;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Вызывается для выполения строк кода при завершении перехода с другой программы
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// Процедура заполняет РС ПараметрыПользовательскогоПредставленияОбъектов.
// Использование пользовательских представлений возможно только для объектов конфигурации, указанных в этом регистре.
// Пользовательское редактирование РС запрещено.
Процедура ЗаполнитьОбъектыКонфигурацииДляПользовательскогоПредставления() Экспорт
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.торо_ПараметрыПользовательскогоПредставленияОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			// Объекты ремонта
			НС = НаборЗаписей.Добавить();
			НС.ОбъектКонфигурации 			= "Справочники.торо_ОбъектыРемонта";
			НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
			НС.ОбъектКонфигурацииСиноним	= "Объекты ремонта";
			// Номенклатура
			НС = НаборЗаписей.Добавить();
			НС.ОбъектКонфигурации 			= "Справочники.Номенклатура";
			НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
			НС.ОбъектКонфигурацииСиноним	= "Номенклатура";
			// Тех карты
			НС = НаборЗаписей.Добавить();
			НС.ОбъектКонфигурации 			= "Справочники.торо_ИдентификаторыТехКарт";
			НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
			НС.ОбъектКонфигурацииСиноним	= "Технологические карты ремонтов";
			// Тех операции
			НС = НаборЗаписей.Добавить();
			НС.ОбъектКонфигурации 			= "Справочники.торо_ТехнологическиеОперации";
			НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
			НС.ОбъектКонфигурацииСиноним	= "Технологические операции";
			// Виды ремонта
			НС = НаборЗаписей.Добавить();
			НС.ОбъектКонфигурации 			= "Справочники.торо_ВидыРемонтов";
			НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
			НС.ОбъектКонфигурацииСиноним	= "Виды ремонтов";
			// Способы планирования
			НС = НаборЗаписей.Добавить();
			НС.ОбъектКонфигурации 			= "Справочники.торо_СпособыПланированияРемонтныхРабот";
			НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
			НС.ОбъектКонфигурацииСиноним	= "Способы планирования работ";
			
			НаборЗаписей.Записать();
			
		КонецЕсли; 
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки(); 
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Начальное заполнение параметров пользовательского представления объектов НЕ выполнено! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеДанныеСценарияРаботы() Экспорт
	
	НачатьТранзакцию();
	ОбработчикВыполненУспешно = Истина;
	
	ПолныйФункционал = Справочники.торо_ПредопределенныеСценарииРаботыСистемы.ПолныйФункционал;
	
	СпрОбъект = ПолныйФункционал.ПолучитьОбъект();
	
	Для каждого Рекв Из Метаданные.Справочники.торо_ПредопределенныеСценарииРаботыСистемы.Реквизиты Цикл
		Если Рекв.Имя = "Описание" Тогда
			Продолжить;
		КонецЕсли;
		СпрОбъект[Рекв.Имя] = Истина;
	КонецЦикла;
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_СостоянияОбъектовРемонта";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_УчетКонтролируемыхПоказателей";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_УчетНаработкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииЭтапаРабот_торо_СостоянияОбъектовРемонта";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииЭтапаРабот_торо_УчетКонтролируемыхПоказателей";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииЭтапаРабот_торо_УчетНаработкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииЭтапаРабот_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_ВыявленныеДефекты";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_ЗаявкаНаРемонт";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_НарядНаВыполнениеРемонтныхРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_ЗаявкаНаРемонт";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_НарядНаВыполнениеРемонтныхРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_СостоянияОбъектовРемонта";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_УчетКонтролируемыхПоказателей";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_УчетНаработкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ГрафикРегламентныхМероприятийТОиР_торо_АктОВыполненииРегламентногоМероприятия";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ГрафикРегламентныхМероприятийТОиР_торо_НарядНаРегламентноеМероприятие";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ЗаявкаНаРемонт_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ЗаявкаНаРемонт_торо_НарядНаВыполнениеРемонтныхРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ЗаявкаНаРемонт_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_НарядНаВыполнениеРемонтныхРабот_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_НарядНаРегламентноеМероприятие_торо_АктОВыполненииРегламентногоМероприятия";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_НарядНаРегламентноеМероприятие_торо_АктОВыполненииРегламентногоМероприятия";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ПланГрафикРемонта_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ПланГрафикРемонта_торо_ЗаявкаНаРемонт";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ПланГрафикРемонта_торо_НарядНаВыполнениеРемонтныхРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ПланГрафикРемонта_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_СостоянияОбъектовРемонта_торо_ВыявленныеДефекты";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_УчетКонтролируемыхПоказателей_торо_ВыявленныеДефекты";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_ВыявленныеДефекты";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_ВнешнееОснованиеДляРабот";
	
	Попытка
		
		СпрОбъект.Записать();
		
	Исключение
		
		ОбработчикВыполненУспешно = Ложь;
		
	КонецПопытки;
	
	Если ОбработчикВыполненУспешно Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось заполнить и записать элемент справочника ""Предопределенные сценарии работы системы""'");
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПоставляемуюМодельПоказателейKPI() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		
		торо_ПоказателиKPI.ВосстановитьПоставляемуюМодельПоказателей();
				
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Загрузка поставляемой модели показателей KPI не выполнена! По причине: '") + ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;   
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 	
	
КонецПроцедуры
		
Процедура ЗаполнитьПредставлениеВРВСтруктуреРЦ() Экспорт
	
	Попытка
		Константы.торо_ПредставлениеВРДляСтруктурыРЦ.Установить(Перечисления.торо_ВидыПредставленийВРДляПечати.КодВР);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось установить константе ""Представление вида ремонта в структуре ремонтного цикла"" значение ""Код вида ремонта""! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
		
КонецПроцедуры

Процедура ОтчетыПоЗадачамРСНастройкиВариантовОтчетов() Экспорт
	 // У четырех этих вариантов отчета основной вариант имеет название не Основной, поэтому БСП по умолчанию скрывает их
	 // из панелей. Установка признака ВидимостьПоУмолчанию не помогает. Никакие другие действия также не помогли.
	 // Для рещения проблемы записи по этим вариантам отчета формируются программно.
	 // Также были проблемы с отображением вариантов у отчетов наработки на отказ и состояния обеспечения заказов - тоже
	 // добавлены в обработчик.
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	
	Попытка
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВариантыОтчетов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
		               |		ПО ВариантыОтчетов.Ссылка = НастройкиВариантовОтчетов.Вариант
		               |ГДЕ
		               |	(ВариантыОтчетов.КлючВарианта = ""СводкаПоЗависшимЗадачам""
		               |			ИЛИ ВариантыОтчетов.КлючВарианта = ""ТекущиеЗадачи""
		               |			ИЛИ ВариантыОтчетов.КлючВарианта = ""ЗадачиИстекающиеНаДату""
		               |			ИЛИ ВариантыОтчетов.КлючВарианта = ""ЗадачиВыполненныеСНарушениемСроков""
		               |			ИЛИ ВариантыОтчетов.Наименование = ""Наработка на отказ: наработка""
		               |			ИЛИ ВариантыОтчетов.Наименование = ""Наработка на отказ: время работы""
		               |			ИЛИ ВариантыОтчетов.Наименование = ""Состояние обеспечения заказов"")
		               |	И НастройкиВариантовОтчетов.Вариант ЕСТЬ NULL";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ОтменитьТранзакцию();
		    Возврат;
		КонецЕсли;
		
		ВыборкаВариантовОтчета = РезультатЗапроса.Выбрать();
		Пока ВыборкаВариантовОтчета.Следующий() Цикл
		    РегистрыСведений.НастройкиВариантовОтчетов.ЗаписатьНастройкиДоступностиВариантаОтчета(ВыборкаВариантовОтчета.Ссылка, Ложь, Неопределено);
		КонецЦикла;
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не выполнено добавление записей в регистр сведений настроек вариантов отчета для отчетов по задачам! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;   
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПредставлениеОРДляПечати() Экспорт
	
	Попытка
		Если НЕ ЗначениеЗаполнено(Константы.торо_НаименованиеОРДляПечати.Получить()) Тогда 
			Константы.торо_НаименованиеОРДляПечати.Установить(Перечисления.торо_ПредставлениеОРДляПечати.КакВСистеме);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось установить константе ""Наименование ОР для печати"" значение ""Как в системе""! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
		
КонецПроцедуры

Процедура УстановитьЗначениеВремениУчетаРецидивностиДефектов() Экспорт
	
	Попытка
		Константы.торо_ВремяУчетаРецидивностиДефектов.Установить(5);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось установить значение по умолчанию для константы ""Время учета рецидивности дефектов""! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;   
	
КонецПроцедуры

Процедура ЗаполнитьСпособРезервированияМатериалов() Экспорт
	
	Попытка
		Если НЕ ЗначениеЗаполнено(Константы.торо_СпособРезервированияМатериалов.Получить()) Тогда 
			Константы.торо_СпособРезервированияМатериалов.Установить(Перечисления.торо_СпособыРезервированияМатериалов.ФИФО);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось установить значение константы ""Способ резервирования материалов""! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьКоэффициентУчетаКритичности() Экспорт
	
	Попытка
		Если НЕ ЗначениеЗаполнено(Константы.торо_КоэффициентУчетаКритичности.Получить()) Тогда 
			Константы.торо_КоэффициентУчетаКритичности.Установить(1);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось установить значение константы ""Коэффициент учета критичности""! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
		
КонецПроцедуры

Процедура УстановитьПериодРасчетаСтатистики() Экспорт
	
	Попытка
		Если НЕ ЗначениеЗаполнено(Константы.торо_ПериодРасчетаСтатистикиПотребления.Получить()) Тогда 
			Константы.торо_ПериодРасчетаСтатистикиПотребления.Установить(5);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось установить значение константы ""Период расчета статистики потребления""! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
		
КонецПроцедуры

Процедура УстановитьФлагВЕдиницахИзмерения() Экспорт
	
	Попытка
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕдиницыИзмерения.Ссылка КАК Ссылка,
		|	ЕдиницыИзмерения.ТипЕдиницыИзмерения КАК ТипЕдиницыИзмерения,
		|	ЕдиницыИзмерения.Код КАК Код
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	(ЕдиницыИзмерения.Код ПОДОБНО ""%796%""
		|			ИЛИ ЕдиницыИзмерения.ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Штучная))
		|	И ЕдиницыИзмерения.торо_ОкруглятьПриРасчетеСтатистики = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		    ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.торо_ОкруглятьПриРасчетеСтатистики = Истина;
			ЭлементСправочника.Записать();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось установить значение флага ""Округлять при расчете статистики в справочнике ""Единицы измерениф""""! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
		
КонецПроцедуры

// Процедура дополняет РС торо_ПорядокОРПоИерархии недостающими объектами. 
// (добавленные переносом в иерерархию изменяемую документами)
//
Процедура ДополнитьРегистрПорядокОРПоИерархии() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтруктурыОР.Ссылка КАК Ссылка,
	|	торо_СтруктурыОР.ИзменяетсяДокументами КАК ИзменяетсяДокументами
	|ПОМЕСТИТЬ втСтруктурыИерархии
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	НЕ торо_СтруктурыОР.СтроитсяАвтоматически
	|	И НЕ торо_СтруктурыОР.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии КАК ОбъектИерархии,
	|	торо_РасположениеОРВСтруктуреИерархии.СтруктураИерархии КАК СтруктураИерархии
	|ПОМЕСТИТЬ втОбъектыИерархии
	|ИЗ
	|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
	|			,
	|			СтруктураИерархии В
	|				(ВЫБРАТЬ
	|					втСтруктурыИерархии.Ссылка
	|				ИЗ
	|					втСтруктурыИерархии
	|				ГДЕ
	|					втСтруктурыИерархии.ИзменяетсяДокументами)) КАК торо_РасположениеОРВСтруктуреИерархии
	|ГДЕ
	|	НЕ торо_РасположениеОРВСтруктуреИерархии.Удален
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
	|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
	|ИЗ
	|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
	|ГДЕ
	|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии В
	|			(ВЫБРАТЬ
	|				втСтруктурыИерархии.Ссылка
	|			ИЗ
	|				втСтруктурыИерархии
	|			ГДЕ
	|				НЕ втСтруктурыИерархии.ИзменяетсяДокументами)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИерархии,
	|	СтруктураИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОбъектыИерархии.ОбъектИерархии КАК ОбъектИерархии,
	|	втОбъектыИерархии.СтруктураИерархии КАК СтруктураИерархии
	|ПОМЕСТИТЬ втОбъектыКУстановкеПорядка
	|ИЗ
	|	втОбъектыИерархии КАК втОбъектыИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
	|		ПО втОбъектыИерархии.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
	|			И втОбъектыИерархии.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
	|ГДЕ
	|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктураИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПорядокОРПоИерархии.СтруктураИерархии КАК СтруктураИерархии,
	|	МАКСИМУМ(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР) КАК РеквизитДопУпорядочивания
	|ИЗ
	|	РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
	|ГДЕ
	|	торо_ПорядокОРПоИерархии.СтруктураИерархии В
	|			(ВЫБРАТЬ
	|				втОбъектыКУстановкеПорядка.СтруктураИерархии КАК СтруктураИерархии
	|			ИЗ
	|				втОбъектыКУстановкеПорядка КАК втОбъектыКУстановкеПорядка)
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ПорядокОРПоИерархии.СтруктураИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыКУстановкеПорядка.ОбъектИерархии КАК ОбъектРемонта,
	|	втОбъектыКУстановкеПорядка.СтруктураИерархии КАК СтруктураИерархии
	|ИЗ
	|	втОбъектыКУстановкеПорядка КАК втОбъектыКУстановкеПорядка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[4].Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	МаксимальныйПорядокПоСтруктуре = РезультатЗапроса[3].Выгрузить();
	МаксимальныйПорядокПоСтруктуре.Индексы.Добавить("СтруктураИерархии");
	
	НаборЗаписей = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитДопУпорядочивания = 1;
				
		НайденнаяСтрока = МаксимальныйПорядокПоСтруктуре.Найти(Выборка.СтруктураИерархии, "СтруктураИерархии");
		Если НайденнаяСтрока <> Неопределено Тогда
			РеквизитДопУпорядочивания = НайденнаяСтрока.РеквизитДопУпорядочивания + 1;
			НайденнаяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
		Иначе
			НоваяСтрока = МаксимальныйПорядокПоСтруктуре.Добавить();
			НоваяСтрока.СтруктураИерархии = Выборка.СтруктураИерархии;
			НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.РеквизитДопУпорядочиванияОР = РеквизитДопУпорядочивания;
	КонецЦикла;	
	
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		ТекстДляЗаписиВЖурналРегистрации = СтрШаблон(НСтр("ru = 'Не удалось дополнить регистр ""Порядок ОР по иерархии""! По причине: %1'"), ОписаниеОшибки());
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
		
КонецПроцедуры

// С релиза 3.0.5.1 для корректного расчета ППР по наработке обязателен ввод состояний оборудования.
Процедура ВключитьУчетСостоянийОборудованияПриУчетеНаработкиИППР() Экспорт
	
	Если Константы.торо_УчетСостоянияОборудования.Получить() Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Если Константы.торо_УчетНаработкиОборудования.Получить() 
			И Константы.торо_ИспользоватьППР.Получить() Тогда
			Константы.торо_УчетСостоянияОборудования.Установить(Истина);
		КонецЕсли;
	Исключение
		ТекстДляЗаписиВЖурналРегистрации = СтрШаблон(НСтр("ru = 'Не удалось включить функциональную опцию ""Учет состояний оборудования""! По причине: %1'"), ОписаниеОшибки());
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрВремяНахожденияВСостоянииПоДатам() Экспорт

	Попытка
		
		Пока Истина Цикл
			
			// Обработка порциями во избежание слишком больших регистров,
			// которые могут слишком долго помещаться во временные таблицы.
			Запрос = Новый Запрос; 
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 10000
			|	торо_ВремяНахожденияВСостоянии.Регистратор КАК Регистратор,
			|	торо_ВремяНахожденияВСостоянии.ОбъектРемонта КАК ОбъектРемонта,
			|	торо_ВремяНахожденияВСостоянии.ОбъектРемонта.ПлановыйГрафикРаботы КАК ГрафикРаботы,
			|	торо_ВремяНахожденияВСостоянии.ВидЭксплуатации КАК ВидЭксплуатации,
			|	торо_ВремяНахожденияВСостоянии.ВидЭксплуатации.ТипЭксплуатации КАК ТипЭксплуатации,
			|	торо_ВремяНахожденияВСостоянии.Период КАК ДатаНачала,
			|	торо_ВремяНахожденияВСостоянии.ДатаИзмененияСостояния КАК ДатаОкончания,
			|	торо_ВремяНахожденияВСостоянии.ВремяНахожденияВСостоянии КАК ВремяНахожденияВСостоянии
			|ПОМЕСТИТЬ торо_ВремяНахожденияВСостоянии
			|ИЗ
			|	РегистрНакопления.торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ВремяНахожденияВСостоянииПоДатам КАК торо_ВремяНахожденияВСостоянииПоДатам
			|		ПО торо_ВремяНахожденияВСостоянии.ОбъектРемонта = торо_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта
			|			И торо_ВремяНахожденияВСостоянии.Регистратор = торо_ВремяНахожденияВСостоянииПоДатам.Регистратор
			|			И торо_ВремяНахожденияВСостоянии.ДатаИзмененияСостояния = торо_ВремяНахожденияВСостоянииПоДатам.ДатаОкончания
			|ГДЕ
			|	торо_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта ЕСТЬ NULL
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДатаНачала,
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(торо_ВремяНахожденияВСостоянии.ДатаНачала) КАК ДатаНачала,
			|	МАКСИМУМ(торо_ВремяНахожденияВСостоянии.ДатаОкончания) КАК ДатаОкончания
			|ИЗ
			|	торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	торо_ВремяНахожденияВСостоянии.ГрафикРаботы КАК ГрафикРаботы
			|ИЗ
			|	торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии";
			
			
			ИндексРезультатаДаты = 1;
			ИндексРезультатаГрафики = 2;
			
			РезультатПакета = Запрос.ВыполнитьПакет();
			
			ВыборкаДаты = РезультатПакета[ИндексРезультатаДаты].Выбрать();
			Если ВыборкаДаты.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ВыборкаДаты.Следующий();
			МассивГрафиков = РезультатПакета[ИндексРезультатаГрафики].Выгрузить().ВыгрузитьКолонку("ГрафикРаботы");
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДаты.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДаты.ДатаОкончания)
				ИЛИ МассивГрафиков.Количество() = 0 Тогда
				Прервать;	
			КонецЕсли;
			
			КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(Запрос.МенеджерВременныхТаблиц, МассивГрафиков, НачалоДня(ВыборкаДаты.ДатаНачала), ВыборкаДаты.ДатаОкончания);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВТРасписанияРаботы.ГрафикРаботы КАК ГрафикРаботы,
			|	ВТРасписанияРаботы.ДатаГрафика КАК ДатаГрафика,
			|	ВТРасписанияРаботы.ВремяНачала КАК ВремяНачала,
			|	ВТРасписанияРаботы.ВремяОкончания КАК ВремяОкончания,
			|	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА)) КАК НачалоРасписания,
			|	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК КонецРасписания
			|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
			|ИЗ
			|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ГрафикРаботы,
			|	ДатаГрафика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТРасписанияРаботыИзм.ГрафикРаботы КАК ГрафикРаботы,
			|	ВТРасписанияРаботыИзм.ДатаГрафика КАК ДатаГрафика,
			|	РАЗНОСТЬДАТ(ВТРасписанияРаботыИзм.ВремяНачала, ВТРасписанияРаботыИзм.ВремяОкончания, СЕКУНДА) КАК Секунды,
			|	РАЗНОСТЬДАТ(ВТРасписанияРаботыИзм.ВремяНачала, ВТРасписанияРаботыИзм.ВремяОкончания, ЧАС) КАК Часы
			|ПОМЕСТИТЬ ВремТабРаботы
			|ИЗ
			|	ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ГрафикРаботы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ВремяНахожденияВСостоянии.Регистратор КАК Регистратор,
			|	торо_ВремяНахожденияВСостоянии.ОбъектРемонта КАК ОбъектРемонта,
			|	торо_ВремяНахожденияВСостоянии.ГрафикРаботы КАК ГрафикРаботы,
			|	торо_ВремяНахожденияВСостоянии.ВидЭксплуатации КАК ВидЭксплуатации,
			|	торо_ВремяНахожденияВСостоянии.ТипЭксплуатации КАК ТипЭксплуатации,
			|	торо_ВремяНахожденияВСостоянии.ДатаНачала КАК ДатаНачала,
			|	торо_ВремяНахожденияВСостоянии.ДатаОкончания КАК ДатаОкончания,
			|	торо_ВремяНахожденияВСостоянии.ВремяНахожденияВСостоянии КАК ВремяНахожденияВСостоянии,
			|	торо_ТекущееСостояниеОР.ПричинаПростоя КАК ПричинаПростоя
			|ПОМЕСТИТЬ ТаблицаПериодовСостояний
			|ИЗ
			|	торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
			|		ПО торо_ВремяНахожденияВСостоянии.ДатаНачала = торо_ТекущееСостояниеОР.Период
			|			И торо_ВремяНахожденияВСостоянии.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ГрафикРаботы,
			|	ДатаНачала,
			|	ДатаОкончания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПериодовСостояний.ОбъектРемонта КАК ОбъектРемонта,
			|	ЕСТЬNULL(ГрафикиРаботыПоСменам.Секунды, 0) КАК Секунды,
			|	ТаблицаПериодовСостояний.ДатаНачала КАК ДатаНачала,
			|	ЕСТЬNULL(ГрафикиРаботыПоСменам.Часы, 0) КАК Часы,
			|	ТаблицаПериодовСостояний.ДатаОкончания КАК ДатаОкончания,
			|	ТаблицаПериодовСостояний.ПричинаПростоя КАК ПричинаПростоя,
			|	ТаблицаПериодовСостояний.ВидЭксплуатации КАК ВидЭксплуатации,
			|	ТаблицаПериодовСостояний.ТипЭксплуатации КАК ТипЭксплуатации,
			|	ЕСТЬNULL(ГрафикиРаботыПоСменам.ДатаГрафика, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаГрафика,
			|	ТаблицаПериодовСостояний.ГрафикРаботы КАК ГрафикРаботы,
			|	ТаблицаПериодовСостояний.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВремяВСостоянииОборудованияПолныеДни
			|ИЗ
			|	ТаблицаПериодовСостояний КАК ТаблицаПериодовСостояний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТабРаботы КАК ГрафикиРаботыПоСменам
			|		ПО ТаблицаПериодовСостояний.ГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
			|			И (КОНЕЦПЕРИОДА(ТаблицаПериодовСостояний.ДатаНачала, ДЕНЬ) < ГрафикиРаботыПоСменам.ДатаГрафика)
			|			И (НАЧАЛОПЕРИОДА(ТаблицаПериодовСостояний.ДатаОкончания, ДЕНЬ) > ГрафикиРаботыПоСменам.ДатаГрафика)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта,
			|	ДатаГрафика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПериодовСостояний.ОбъектРемонта КАК ОбъектРемонта,
			|	РАЗНОСТЬДАТ(ВЫБОР
			|			КОГДА ТаблицаПериодовСостояний.ДатаНачала >= ВТРасписанияРаботыИзм.НачалоРасписания
			|				ТОГДА ТаблицаПериодовСостояний.ДатаНачала
			|			ИНАЧЕ ВТРасписанияРаботыИзм.НачалоРасписания
			|		КОНЕЦ, ВЫБОР
			|			КОГДА ТаблицаПериодовСостояний.ДатаОкончания >= ВТРасписанияРаботыИзм.КонецРасписания
			|				ТОГДА ВТРасписанияРаботыИзм.КонецРасписания
			|			ИНАЧЕ ТаблицаПериодовСостояний.ДатаОкончания
			|		КОНЕЦ, СЕКУНДА) КАК ВремяНахожденияВСостоянии,
			|	ТаблицаПериодовСостояний.ДатаНачала КАК ДатаНачала,
			|	ТаблицаПериодовСостояний.ДатаОкончания КАК ДатаОкончания,
			|	ТаблицаПериодовСостояний.ПричинаПростоя КАК ПричинаПростоя,
			|	ТаблицаПериодовСостояний.ВидЭксплуатации КАК ВидЭксплуатации,
			|	ТаблицаПериодовСостояний.ТипЭксплуатации КАК ТипЭксплуатации,
			|	ТаблицаПериодовСостояний.Регистратор КАК Регистратор,
			|	ВЫБОР
			|		КОГДА ТаблицаПериодовСостояний.ДатаНачала >= ВТРасписанияРаботыИзм.НачалоРасписания
			|			ТОГДА ТаблицаПериодовСостояний.ДатаНачала
			|		ИНАЧЕ ВТРасписанияРаботыИзм.НачалоРасписания
			|	КОНЕЦ КАК Период,
			|	ТаблицаПериодовСостояний.ГрафикРаботы КАК ГрафикРаботы
			|ИЗ
			|	ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодовСостояний КАК ТаблицаПериодовСостояний
			|		ПО ВТРасписанияРаботыИзм.ГрафикРаботы = ТаблицаПериодовСостояний.ГрафикРаботы
			|			И (ВТРасписанияРаботыИзм.НачалоРасписания >= ТаблицаПериодовСостояний.ДатаНачала
			|					И ВТРасписанияРаботыИзм.НачалоРасписания < ТаблицаПериодовСостояний.ДатаОкончания
			|				ИЛИ ВТРасписанияРаботыИзм.КонецРасписания > ТаблицаПериодовСостояний.ДатаНачала
			|					И ВТРасписанияРаботыИзм.КонецРасписания <= ТаблицаПериодовСостояний.ДатаОкончания
			|				ИЛИ ВТРасписанияРаботыИзм.НачалоРасписания <= ТаблицаПериодовСостояний.ДатаНачала
			|					И ВТРасписанияРаботыИзм.КонецРасписания >= ТаблицаПериодовСостояний.ДатаОкончания)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВремяВСостоянииОборудованияПолныеДни КАК ВремяВСостоянииОборудованияПолныеДни
			|		ПО (ТаблицаПериодовСостояний.ОбъектРемонта = ВремяВСостоянииОборудованияПолныеДни.ОбъектРемонта)
			|			И ВТРасписанияРаботыИзм.ДатаГрафика = ВремяВСостоянииОборудованияПолныеДни.ДатаГрафика
			|ГДЕ
			|	ВремяВСостоянииОборудованияПолныеДни.ДатаГрафика ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПолныеДни.ОбъектРемонта,
			|	ПолныеДни.Секунды,
			|	ПолныеДни.ДатаНачала,
			|	ПолныеДни.ДатаОкончания,
			|	ПолныеДни.ПричинаПростоя,
			|	ПолныеДни.ВидЭксплуатации,
			|	ПолныеДни.ТипЭксплуатации,
			|	ПолныеДни.Регистратор,
			|	ПолныеДни.ДатаГрафика,
			|	ПолныеДни.ГрафикРаботы
			|ИЗ
			|	ВремяВСостоянииОборудованияПолныеДни КАК ПолныеДни
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОбъектРемонта,
			|	ДатаНачала
			|ИТОГИ ПО
			|	Регистратор";
			
			ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ЗаполнитьРегистрВремяНахожденияВСостоянииПоДатам_ОбработатьРегистраторы(ВыборкаПоРегистраторам);
			
		КонецЦикла;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не заполнить регистр ""Время нахождения в состоянии по датам""! По причине: '")
			+ ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрВремяНахожденияВСостоянииПоДатам_ОбработатьРегистраторы(ВыборкаПоРегистраторам)
	
	ДокументовВТранзакции = 100;
	СчетчикТранзакции = 0;
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Если НЕ ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.торо_ВремяНахожденияВСостоянииПоДатам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		ВыборкаДеталей = ВыборкаПоРегистраторам.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаДеталей.Следующий() Цикл
			Если ВыборкаДеталей.ВремяНахожденияВСостоянии > 0 Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДеталей);      
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Ложь);
		
		СчетчикТранзакции = СчетчикТранзакции+1; 
		
		Если СчетчикТранзакции = ДокументовВТранзакции Тогда
			ЗафиксироватьТранзакцию();
			СчетчикТранзакции = 0;
		КонецЕсли; 
		
	КонецЦикла;   
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура КорректировкаРегистраВремяНахожденияВСостоянииПоДатам() Экспорт
	
	// В релизе 3.0.5.1 формировались некорректные движения в РН "торо_ВремяНахожденияВСостоянииПоДатам" при проведении 
	// документов "торо_СостоянияОбъектовРемонта" с периодом состояний по объекту ремонта пересекающимся с уже введенным периодом.
	// Найдем документы "торо_СостоянияОбъектовРемонта" с ошибочными движениями и перепроведем их.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВремяНахожденияВСостоянии.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(торо_ВремяНахожденияВСостоянии.Регистратор) КАК РегистраторПредставление
	|ИЗ
	|	РегистрНакопления.торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ВремяНахожденияВСостоянииПоДатам КАК торо_ВремяНахожденияВСостоянииПоДатам
	|		ПО (торо_ВремяНахожденияВСостоянии.Период = торо_ВремяНахожденияВСостоянииПоДатам.ДатаНачала
	|				И торо_ВремяНахожденияВСостоянии.Регистратор = торо_ВремяНахожденияВСостоянииПоДатам.Регистратор
	|				И торо_ВремяНахожденияВСостоянии.ОбъектРемонта = торо_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта)
	|ГДЕ
	|	торо_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта ЕСТЬ NULL"; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
			
		Попытка
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение 
			
			Шаблон = НСтр("ru = 'Не удалось провести корректировку движений документа ""%1"". По причине: %2'");
			
			ТекстСообщения = СтрШаблон(Шаблон, Выборка.РегистраторПредставление , ОписаниеОшибки());
			ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьРегистрыПотребностей(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	// По очереди выполняем заполнение каждого регистра. 
	Параметры.ОбработкаЗавершена = ЗаполнитьРегистрИтоговойПлановойПотребностиВКвалификациях();
	Параметры.ОбработкаЗавершена = ЗаполнитьРегистрИтоговойФактическойПотребностиВКвалификациях();
	Параметры.ОбработкаЗавершена = ЗаполнитьРегистрИтоговойПлановойПотребностиВИнструментах();
	
	Если Не Параметры.ОбработкаЗавершена Тогда
		ТекстСообщения = НСтр("ru = 'Процедура %1 завершилась с ошибкой. Не по всем ремонтам заполнен регистр. Подробности см. в журнале регистрации'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, "торо_ОбновлениеИнформационнойБазы.ЗаполнитьРегистрыПотребностей");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнитьРегистрыПотребностей

Функция ЗаполнитьРегистрИтоговойПлановойПотребностиВКвалификациях()
	
	Попытка
		// Данный запрос отличается от того, который используется в методе торо_Ремонты.ОбновитьИтоговуюПлановуюПотребностьВКвалификациях,
		// т.к. здесь нужно еще выполнять проверку, что по этому ремонту еще нет записей в соответсвующем РС -
		// отложенный обработчик может прерываться и запускаться еще раз + он может выполняться не сразу после
		// обновления, поэтому может быть ситуация, что по некоторым (например новым) ремонтам в РС есть записи.
		//
		// Так же здесь не получится в цикле сразу отбирать ремонты порциями, например по 500, которых нет в РС,
		// и по ним получать данные. Это связано с тем, что некоторые ремонты в принципе не должны попадать
		// в этот РС (у которых не указаны квалификации, мало ли). Поэтому в теории может быть ситуация, когда у
		// пользователей по многим ремонтам не указываны инструменты, и запрос выбирает все эти 500 ремонтов - в
		// этом случае данных по потребностям у них не будет, результат запроса будет пустой, и обработчик будет
		// считаться выполненным.
		
		Пока Истина Цикл
			Запрос = Новый Запрос(); 
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
			               |	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК ДокументЗаявка
			               |ПОМЕСТИТЬ ВТ_Заявки
			               |ИЗ
			               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, ) КАК торо_ЗаявкиПоРемонтамСрезПоследних
			               |ГДЕ
			               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	IDРемонта,
			               |	ДокументЗаявка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка.IDРемонта КАК IDРемонта,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка КАК Документ,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID КАК ID,
			               |	ЕСТЬNULL(торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
			               |	ЕСТЬNULL(торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Количество, 0) КАК Количество
			               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
			               |ИЗ
			               |	Документ.торо_ПроектныеЗатратыНаРемонты.РемонтныеРаботы КАК торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты КАК торо_ПроектныеЗатратыНаРемонты
			               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
			               |			ПО торо_ПроектныеЗатратыНаРемонты.IDРемонта = ВТ_Заявки.IDРемонта
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИтоговаяПлановаяПотребностьВКвалификациях КАК торо_ИтоговаяПлановаяПотребностьВКвалификациях
			               |			ПО торо_ПроектныеЗатратыНаРемонты.IDРемонта = торо_ИтоговаяПлановаяПотребностьВКвалификациях.IDРемонта
			               |		ПО торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка = торо_ПроектныеЗатратыНаРемонты.Ссылка
			               |			И (НЕ торо_ПроектныеЗатратыНаРемонты.ПометкаУдаления)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты.ТрудовыеЗатраты КАК торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты
			               |		ПО торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка = торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Ссылка
			               |			И торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID = торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.ID
			               |ГДЕ
			               |	торо_ИтоговаяПлановаяПотребностьВКвалификациях.IDРемонта ЕСТЬ NULL
			               |	И ВТ_Заявки.IDРемонта ЕСТЬ NULL
			               |	И (торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
			               |			ИЛИ НЕ торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
			               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО),
			               |	СУММА(ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество, 0))
			               |ИЗ
			               |	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
			               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = ВТ_Заявки.ДокументЗаявка
			               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = ВТ_Заявки.IDРемонта
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
			               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID
			               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка
			               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИтоговаяПлановаяПотребностьВКвалификациях КАК торо_ИтоговаяПлановаяПотребностьВКвалификациях
			               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ИтоговаяПлановаяПотребностьВКвалификациях.IDРемонта
			               |ГДЕ
			               |	торо_ИтоговаяПлановаяПотребностьВКвалификациях.IDРемонта ЕСТЬ NULL
			               |	И (торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
			               |			ИЛИ НЕ торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
			               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО)
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Родитель_ID
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта
			               |ПОМЕСТИТЬ ВТ_Ремонты
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
			               |ГДЕ
			               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	IDРемонта
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
			               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
			               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
			               |		ПО ВТ_ИтоговыеДанные.IDРемонта = ВТ_Ремонты.IDРемонта
			               |ГДЕ
			               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
						   |
			               |ИТОГИ ПО
			               |	IDРемонта,
			               |	Документ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
			               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
			               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
			               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
			               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
			               |	ВТ_ИтоговыеДанные.ID КАК ID,
			               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
			               |	ВТ_ИтоговыеДанные.Количество КАК Количество
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
			               |		ПО ВТ_ИтоговыеДанные.IDРемонта = ВТ_Ремонты.IDРемонта";
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			Если РезультатЗапроса[3].Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			ВыборкаРемонтов = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаОбщая = РезультатЗапроса[4].Выбрать();
			
			ПараметрыРасчета = Новый Структура();
			ПараметрыРасчета.Вставить("ОбъектПотребности", "Квалификация");
			ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяПлановаяПотребностьВКвалификациях");
			ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяПлановаяПотребностьВКвалификациях");
			ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.торо_КвалификацииРемонтногоПерсонала");
			
			РассчитатьПотребностьПоРемонтам(ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета);			   
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось заполнить регистр ""Итоговая плановая потребность в квалификациях""! По причине: '") + ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьРегистрИтоговойФактическойПотребностиВКвалификациях()
	
	Попытка
		// Данный запрос отличается от того, который используется в методе торо_Ремонты.ОбновитьИтоговуюФактическуюПотребностьВКвалификациях,
		// т.к. здесь нужно еще выполнять проверку, что по этому ремонту еще нет записей в соответсвующем РС -
		// отложенный обработчик может прерываться и запускаться еще раз + он может выполняться не сразу после
		// обновления, поэтому может быть ситуация, что по некоторым (например новым) ремонтам в РС есть записи.
		//
		// Так же здесь не получится в цикле сразу отбирать ремонты порциями, например по 500, которых нет в РС,
		// и по ним получать данные. Это связано с тем, что некоторые ремонты в принципе не должны попадать
		// в этот РС (у которых не указаны квалификации, мало ли). Поэтому в теории может быть ситуация, когда у
		// пользователей по многим ремонтам не указываны инструменты, и запрос выбирает все эти 500 ремонтов - в
		// этом случае данных по потребностям у них не будет, результат запроса будет пустой, и обработчик будет
		// считаться выполненным.
		
		Пока Истина Цикл
			Запрос = Новый Запрос(); 
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка КАК Документ,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID КАК ID,
			               |	ЕСТЬNULL(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
			               |	КОЛИЧЕСТВО(ЕСТЬNULL(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID, 0)) КАК Количество
			               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
			               |ИЗ
			               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИтоговаяФактическаяПотребностьВКвалификациях КАК торо_ИтоговаяФактическаяПотребностьВКвалификациях
			               |		ПО торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID = торо_ИтоговаяФактическаяПотребностьВКвалификациях.IDРемонта
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.ТрудовыеЗатраты КАК торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты
			               |		ПО торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID = торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.РемонтыОборудования_ID
			               |			И торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Ссылка
			               |			И торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID = торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID
			               |ГДЕ
			               |	торо_ИтоговаяФактическаяПотребностьВКвалификациях.IDРемонта ЕСТЬ NULL
			               |	И (торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
			               |			ИЛИ НЕ торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID_ПараллельнойОперации,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Родитель_ID,
			               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID,
			               |	ЕСТЬNULL(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID_ПараллельнойОперации,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID,
			               |	ЕСТЬNULL(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО),
			               |	КОЛИЧЕСТВО(ЕСТЬNULL(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID, 0))
			               |ИЗ
			               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИтоговаяФактическаяПотребностьВКвалификациях КАК торо_ИтоговаяФактическаяПотребностьВКвалификациях
			               |		ПО торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID = торо_ИтоговаяФактическаяПотребностьВКвалификациях.IDРемонта
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРегламентногоМероприятия.ТрудовыеЗатраты КАК торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты
			               |		ПО торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID = торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.РемонтыОборудования_ID
			               |			И торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка
			               |			И торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID = торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID
			               |ГДЕ
			               |	торо_ИтоговаяФактическаяПотребностьВКвалификациях.IDРемонта ЕСТЬ NULL
			               |	И (торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
			               |			ИЛИ НЕ торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID_ПараллельнойОперации,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID,
			               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID,
			               |	ЕСТЬNULL(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО)
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Родитель_ID
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта
			               |ПОМЕСТИТЬ ВТ_Ремонты
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
						   |ГДЕ
			               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	IDРемонта
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
			               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
			               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
			               |		ПО ВТ_ИтоговыеДанные.IDРемонта = ВТ_Ремонты.IDРемонта
			               |ГДЕ
			               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
						   |
			               |ИТОГИ ПО
			               |	IDРемонта,
			               |	Документ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
			               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
			               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
			               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
			               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
			               |	ВТ_ИтоговыеДанные.ID КАК ID,
			               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
			               |	ВТ_ИтоговыеДанные.Количество КАК Количество
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
			               |		ПО ВТ_ИтоговыеДанные.IDРемонта = ВТ_Ремонты.IDРемонта";
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();

			Если РезультатЗапроса[2].Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			ВыборкаРемонтов = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаОбщая = РезультатЗапроса[3].Выбрать();
			
			ПараметрыРасчета = Новый Структура();
			ПараметрыРасчета.Вставить("ОбъектПотребности", "Квалификация");
			ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяФактическаяПотребностьВКвалификациях");
			ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяФактическаяПотребностьВКвалификациях");
			ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.торо_КвалификацииРемонтногоПерсонала");
			
			РассчитатьПотребностьПоРемонтам(ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета);
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось заполнить регистр ""Итоговая фактическая потребность в квалификациях""! По причине: '") + ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьРегистрИтоговойПлановойПотребностиВИнструментах()
	
	Попытка
		// Данный запрос отличается от того, который используется в методе торо_Ремонты.ОбновитьИтоговуюПлановуюПотребностьВИнструментах,
		// т.к. здесь нужно еще выполнять проверку, что по этому ремонту еще нет записей в соответсвующем РС -
		// отложенный обработчик может прерываться и запускаться еще раз + он может выполняться не сразу после
		// обновления, поэтому может быть ситуация, что по некоторым (например новым) ремонтам в РС есть записи.
		//
		// Так же здесь не получится в цикле сразу отбирать ремонты порциями, например по 500, которых нет в РС,
		// и по ним получать данные. Это связано с тем, что некоторые ремонты в принципе не должны попадать
		// в этот РС (у которых не указаны инструменты). Поэтому в теории может быть ситуация, когда у
		// пользователей по многим ремонтам не указываны инструменты, и запрос выбирает все эти 500 ремонтов - в
		// этом случае данных по потребностям у них не будет, результат запроса будет пустой, и обработчик будет
		// считаться выполненным.
		
		Пока Истина Цикл
			Запрос = Новый Запрос(); 
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
			               |	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК ДокументЗаявка
			               |ПОМЕСТИТЬ ВТ_Заявки
			               |ИЗ
			               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, ) КАК торо_ЗаявкиПоРемонтамСрезПоследних
			               |ГДЕ
			               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	IDРемонта,
			               |	ДокументЗаявка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка.IDРемонта КАК IDРемонта,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка КАК Документ,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
			               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID КАК ID,
			               |	ЕСТЬNULL(торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Инструмент, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
			               |	ЕСТЬNULL(торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Количество, 0) КАК Количество
			               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
			               |ИЗ
			               |	Документ.торо_ПроектныеЗатратыНаРемонты.РемонтныеРаботы КАК торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты КАК торо_ПроектныеЗатратыНаРемонты
			               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
			               |			ПО торо_ПроектныеЗатратыНаРемонты.IDРемонта = ВТ_Заявки.IDРемонта
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИтоговаяПлановаяПотребностьВИнструментах КАК торо_ИтоговаяПлановаяПотребностьВИнструментах
			               |			ПО торо_ПроектныеЗатратыНаРемонты.IDРемонта = торо_ИтоговаяПлановаяПотребностьВИнструментах.IDРемонта
			               |		ПО торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка = торо_ПроектныеЗатратыНаРемонты.Ссылка
			               |			И (НЕ торо_ПроектныеЗатратыНаРемонты.ПометкаУдаления)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты.ИнструментыИТехника КАК торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника
			               |		ПО торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка = торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Ссылка
			               |			И торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID = торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.ID
			               |ГДЕ
			               |	торо_ИтоговаяПлановаяПотребностьВИнструментах.IDРемонта ЕСТЬ NULL
			               |	И ВТ_Заявки.IDРемонта ЕСТЬ NULL
			               |	И (торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
			               |			ИЛИ НЕ торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Ссылка ЕСТЬ NULL
			               |				И НЕ торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Количество = 0)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
			               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтИнструменты.Инструмент, НЕОПРЕДЕЛЕНО),
			               |	СУММА(ВЫБОР
			               |			КОГДА торо_ЗаявкаНаРемонтИнструменты.Количество ЕСТЬ NULL
			               |				ТОГДА 0
			               |			КОГДА торо_ЗаявкаНаРемонтИнструменты.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			               |				ТОГДА торо_ЗаявкаНаРемонтИнструменты.Количество
			               |			ИНАЧЕ торо_ЗаявкаНаРемонтИнструменты.Количество * торо_ЗаявкаНаРемонтИнструменты.ЕдиницаИзмерения.Коэффициент
			               |		КОНЕЦ)
			               |ИЗ
			               |	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
			               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = ВТ_Заявки.ДокументЗаявка
			               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = ВТ_Заявки.IDРемонта
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.Инструменты КАК торо_ЗаявкаНаРемонтИнструменты
			               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтИнструменты.РемонтыОборудования_ID
			               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = торо_ЗаявкаНаРемонтИнструменты.Ссылка
			               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.ID = торо_ЗаявкаНаРемонтИнструменты.ID
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИтоговаяПлановаяПотребностьВИнструментах КАК торо_ИтоговаяПлановаяПотребностьВИнструментах
			               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ИтоговаяПлановаяПотребностьВИнструментах.IDРемонта
			               |ГДЕ
			               |	торо_ИтоговаяПлановаяПотребностьВИнструментах.IDРемонта ЕСТЬ NULL
			               |	И (торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
			               |			ИЛИ НЕ торо_ЗаявкаНаРемонтИнструменты.Ссылка ЕСТЬ NULL
			               |				И НЕ торо_ЗаявкаНаРемонтИнструменты.Количество = 0)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
			               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
			               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтИнструменты.Инструмент, НЕОПРЕДЕЛЕНО)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта
			               |ПОМЕСТИТЬ ВТ_Ремонты
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
						   |ГДЕ
			               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	IDРемонта
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
			               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
			               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
			               |		ПО ВТ_ИтоговыеДанные.IDРемонта = ВТ_Ремонты.IDРемонта
			               |ГДЕ
			               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
						   |
			               |ИТОГИ ПО
			               |	IDРемонта,
			               |	Документ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
			               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
			               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
			               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
			               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
			               |	ВТ_ИтоговыеДанные.ID КАК ID,
			               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
			               |	ВТ_ИтоговыеДанные.Количество КАК Количество
			               |ИЗ
			               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
			               |		ПО ВТ_ИтоговыеДанные.IDРемонта = ВТ_Ремонты.IDРемонта";
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			Если РезультатЗапроса[3].Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			ВыборкаРемонтов = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаОбщая = РезультатЗапроса[4].Выбрать();
			
			ПараметрыРасчета = Новый Структура();
			ПараметрыРасчета.Вставить("ОбъектПотребности", "Инструмент");
			ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяПлановаяПотребностьВИнструментах");
			ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяПлановаяПотребностьВИнструментах");
			ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.Номенклатура");
			
			РассчитатьПотребностьПоРемонтам(ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета);
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстДляЗаписиВЖурналРегистрации = НСтр("ru = 'Не удалось заполнить регистр ""Итоговая плановая потребность в инструментах""! По причине: '") + ОписаниеОшибки;
		ОбновлениеИнформационнойБазы.ЗаписатьСобытиеВЖурналРегистрации(ТекстДляЗаписиВЖурналРегистрации,,);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция РассчитатьПотребностьПоРемонтам(ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета)
	
	РемонтовВТранзакции = 50;
	СчетчикТранзакции = 0;
	
	Пока ВыборкаРемонтов.Следующий() Цикл
		СоответствиеПотребности = Новый Соответствие();
		
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		ВыборкаДокументов = ВыборкаРемонтов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументов.Следующий() Цикл
			ВыборкаОбъектовПотребности = ВыборкаДокументов.Выбрать();
			Пока ВыборкаОбъектовПотребности.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаОбъектовПотребности.ОбъектПотребности) Тогда
					Продолжить;
				КонецЕсли;
				
				ДеревоПотребности = Новый ДеревоЗначений();
				ДеревоПотребности.Колонки.Добавить("ID_ПараллельнойОперации");
				ДеревоПотребности.Колонки.Добавить("ID");
				ДеревоПотребности.Колонки.Добавить("Потребность");
				ДеревоПотребности.Колонки.Добавить("Документ");
				ДеревоПотребности.Колонки.Добавить("ОбъектПотребности");
				ДеревоПотребности.Колонки.Добавить("IDРемонта");
				ДеревоПотребности.Колонки.Добавить("РемонтнаяРабота");
				ДеревоПотребности.Колонки.Добавить("Количество");
				
				торо_Ремонты.ПостроитьДеревоПотребности(ДеревоПотребности, ВыборкаОбъектовПотребности, "", ВыборкаОбщая);
				Потребность = торо_Ремонты.РассчитатьПотребностьПоДереву(ДеревоПотребности);
				
				Если СоответствиеПотребности[ВыборкаОбъектовПотребности.ОбъектПотребности] = Неопределено Тогда
					СоответствиеПотребности.Вставить(ВыборкаОбъектовПотребности.ОбъектПотребности, Потребность);
				Иначе
					СоответствиеПотребности[ВыборкаОбъектовПотребности.ОбъектПотребности] = СоответствиеПотребности[ВыборкаОбъектовПотребности.ОбъектПотребности] + Потребность;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
		
		Для каждого КлючИЗначение Из СоответствиеПотребности Цикл
			НаборЗаписей = РегистрыСведений[ПараметрыРасчета.РСПотребностиИмя].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.IDРемонта.Установить(ВыборкаРемонтов.IDРемонта);
			Выполнить("НаборЗаписей.Отбор." + ПараметрыРасчета.ОбъектПотребности + ".Установить(КлючИЗначение.Ключ)");
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.IDРемонта = ВыборкаРемонтов.IDРемонта;
			НоваяСтрока[ПараметрыРасчета.ОбъектПотребности] = КлючИЗначение.Ключ;
			НоваяСтрока.Количество = КлючИЗначение.Значение;
			
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		
		СчетчикТранзакции = СчетчикТранзакции + 1; 
		
		Если СчетчикТранзакции = РемонтовВТранзакции Тогда
			ЗафиксироватьТранзакцию();
			СчетчикТранзакции = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецФункции
	
#КонецОбласти

#КонецОбласти