
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФункциональностьПрограммы

// Переопределяет настройки подсистемы.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//    Ключи:
//    * ДоступнаФункциональностьЗапросаЦен - Булево - флаг наличия функционала запроса цен в прикладном решении.
//    * ИспользоватьХарактеристики - Булево - флаг использования характеристик. 
//    * ВариантыПубликацииОстатков - Массив - из ПеречислениеСсылка.ВариантыПубликацииОстатковТорговыеПредложения 
//                                   список из доступных вариантов публикации остатков. Если массив заполнен 
//                                   не будет, функциональность публикации остатков будет отключена.
//    * ВариантыПубликацииСкидок   - Массив- из ПеречислениеСсылка.ВариантыПубликацииСкидок 
//                                   список из доступных вариантов публикации скидок. Если список заполнен
//                                   не будет, функциональность публикации скидок будет отключена.
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт  
	
	Настройки.ДоступнаФункциональностьЗапросаЦен = Истина;
	Настройки.ИспользоватьХарактеристики         = Истина;
	
	Настройки.ВариантыПубликацииОстатков.Добавить(Перечисления.ВариантыПубликацииОстатковТорговыеПредложения.Наличие);
	Настройки.ВариантыПубликацииОстатков.Добавить(Перечисления.ВариантыПубликацииОстатковТорговыеПредложения.Количество);
	Настройки.ВариантыПубликацииОстатков.Добавить(Перечисления.ВариантыПубликацииОстатковТорговыеПредложения.КоличествоИНаличие);
	
	Настройки.ВариантыПубликацииСкидок.Добавить(Перечисления.ВариантыПубликацииСкидок.ВидыЦен);

КонецПроцедуры

// Проверяет доступность функциональных опций перед открытием формы публикации торговых предложений.
//    В случае, если в процедуре параметр Результат не будет установлен в Истина, будет вызвана процедура 
//    ТорговыеПредложенияПереопределяемый.СообщитьОНеобходимостиИспользованияФункциональнойОпции.
//
// Параметры:
//   ИмяФормы - Строка - имя формы, для которой получаются данные.
//   Результат - Булево - признак того, что функциональные опции включены.
//
Процедура ФункциональнаяОпцияИспользуется(Знач ИмяФормы, Результат) Экспорт
	Результат = Истина;	
КонецПроцедуры

// Выдает сообщение пользователю о том, что функциональная опция использования видов номенклатуры отключена.
//
// Параметры:
//  ИмяФормы - Строка - имя формы из которой вызывается сообщение.
//  Используется - Булево - признак того, что функциональная опция включена или нет.
//  Отказ - Булево - признак того, что форму сопоставления номенклатуры открывать не нужно.
//
Процедура СообщитьОНеобходимостиИспользованияФункциональнойОпции(Знач ИмяФормы, Знач Используется, Отказ) Экспорт
		
КонецПроцедуры

// Заполнение адресов абонента по зарегистрированным организациям и складам.
//
// Параметры:
//  АдресаАбонента - ТаблицаЗначения - таблица для заполнения:
//   * Представление - Строка - представление адреса.
//   * ЗначенияПолей - Строка - адрес в формате XML.
//   * Описание - Строка - комментарий адреса.
//   * Ссылка - Ссылка - объект хранения контактной информации.
//   * Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//
Процедура ЗаполнитьАдресаАбонента(АдресаАбонента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ПО (ОрганизацииКонтактнаяИнформация.Ссылка = ОрганизацииБизнесСеть.Организация)
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаАдреса = АдресаАбонента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАдреса, Выборка);
		СтрокаАдреса.Описание = СтрШаблон("%1 (%2)", Выборка.Вид, Выборка.Ссылка);
	КонецЦикла;
	
	АдресаАбонента.Сортировать("Представление");
	
КонецПроцедуры

// Получение способов доставки для заполнения по умолчанию значений при формировании заказов.
//
// Параметры:
//  СпособыДоставки - СписокЗначений - возможные значения способа доставки.
//                                     Первое значение является значением по умолчанию.
//  ВидДоставки	- Строка - значение вида доставки, варианты "Самовывоз", "Доставка".
//
Процедура ПолучитьСпособыДоставки(СпособыДоставки, ВидДоставки = Неопределено) Экспорт

	СпособыДоставки = Новый СписокЗначений;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеИнформационнойБазы

// Получение валюты регламентированного учета.
// 
// Параметры:
//  Валюта - СправочникСсылка - валюта регламентированного учета.
//
Процедура ПолучитьВалютуРегламентированногоУчета(Валюта) Экспорт
	Валюта = Константы.торо_ВалютаРегламентированногоУчета.Получить();	
КонецПроцедуры

// Получение имени ставки НДС.
//
// Параметры:
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС, вида: "НДС0", "НДС10", НДС10_110, "НДС18", НДС18_118,
//        "НДС20", НДС20_120, "БезНДС".
//
Процедура ПолучитьИмяСтавкиНДС(Знач Ссылка, ИмяСтавкиНДС) Экспорт

	ОбъектМетаданных = Ссылка.Метаданные();
	ИндексЗначения = Перечисления.СтавкиНДС.Индекс(Ссылка);
	Если ИндексЗначения <> -1 Тогда
		ИмяСтавкиНДС = ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	Иначе
		ИмяСтавкиНДС = Неопределено;
	КонецЕсли;  
	
КонецПроцедуры

// Получение значения ставки НДС по идентификатору.
//
// Параметры:
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС, например "НДС0", "НДС10", "НДС18", "НДС20", "БезНДС".
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//
Процедура ПолучитьЗначениеСтавкиНДС(Знач ИмяСтавкиНДС, Ссылка) Экспорт

	Если Не ПустаяСтрока(ИмяСтавкиНДС)
		И Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти(ИмяСтавкиНДС) <> Неопределено Тогда
		Ссылка = Перечисления.СтавкиНДС[ИмяСтавкиНДС];
	Иначе
		Ссылка = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецПроцедуры

// Получить единицы измерения.
//
// Параметры:
//  Код	   - Строка - код единицы измерения.
//  Ссылка - Ссылка - ссылку на единицу измерения
//  Представление - Строка - представление единицы измерения в базе.
//
Процедура ПолучитьПараметрыЕдиницыИзмерения(Знач Код, Ссылка, Представление) Экспорт

	Ссылка = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование");
	КонецЕсли;

КонецПроцедуры

// Заполняет основные сведения о номенклатуре. В обработчике следует по колонке "Номенклатура"
//  заполнить колонки "ЕдиницаИзмерения", "Упаковка", "ИспользованиеХарактеристик". При заполнении
//  следует учитывать, что все заполняемые колонки не являются обязательными. Устанавливать значения
//  следует конструкцией ЗаполнитьЗначенияСвойств(Строка, ИсточникДанных, , "Номенклатура").
//
// Параметры:
//  ДанныеНоменклатуры - ТаблицаЗначений, ДанныеФормыКоллекция - заполняемая таблица номенклатуры:
//    * Номенклатура - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру
//    * ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры
//    * Упаковка - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - упаковка номенклатуры
//    * ИспользованиеХарактеристик - Булево - признак использования характеристик номенклатуры
//
Процедура ЗаполнитьСведенияОНоменклатуре(ДанныеНоменклатуры) Экспорт

	ИспользуемаяНоменклатура = Новый Массив;
	
	Для каждого Строка Из ДанныеНоменклатуры Цикл
		ИспользуемаяНоменклатура.Добавить(Строка.Номенклатура);
	КонецЦикла;
	
	ИспользуемаяНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИспользуемаяНоменклатура);
	
	ИспользованиеХарактеристик = Ложь;
	ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользованиеХарактеристик);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользуемаяНоменклатура", ИспользуемаяНоменклатура);
	Запрос.УстановитьПараметр("ИспользованиеХарактеристик", ИспользованиеХарактеристик);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА &ИспользованиеХарактеристик
	               |			ТОГДА Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ИспользованиеХарактеристик,
	               |	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Номенклатура.ЕдиницаИзмерения КАК Упаковка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Ссылка В(&ИспользуемаяНоменклатура)";
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ВыборкаЗапроса.Номенклатура);
		
		НайденныеСтроки = ДанныеНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаЗапроса, , "Номенклатура");
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

// Получение свойств торгового предложения.
//
// Параметры:
//  Источник        - СправочникСсылка - источник торгового соглашения, например СправочникСсылка.Соглашения.
//  ЗначенияСвойств - Структура - возвращаемое значение заполнения:
//      * Организация     - ОпределяемыйТип.Организация - организация торгового предложения.
//      * Валюта          - СправочникСсылка            - валюта торгового предложения.
//      * ЦенаВключаетНДС - Булево                      - признак указания цен с учетом НДС.
//
Процедура ПолучитьСвойстваТорговогоПредложения(Знач Источник, ЗначенияСвойств) Экспорт

	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ВидЦены");
	РеквизитыВидаЦен   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.ВидЦены, "Валюта, ЦенаВключаетНДС");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РеквизитыДокумента, РеквизитыВидаЦен, Ложь);
	
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств, РеквизитыДокумента);

КонецПроцедуры

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Товары - ТаблицаЗначений - исходная таблица с товарами, колонки:
//    Обязательные поля:
//    * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатурная позиция.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика номенклатуры.
//    * Упаковка       - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - упаковка номенклатуры.
//    * Количество     - Число - количество.
//    Заполняемые поля:
//    * УпаковкаКод         - Строка - код упаковки.
//    * ЕдиницаИзмеренияКод - Строка - код единицы измерения.
//    * УпаковкаЧислитель   - Число - числитель упаковки номенклатуры.
//    * УпаковкаЗнаменатель - Число - знаменатель упаковки номенклатуры.
//    * Артикул             - Строка - артикул номенклатуры.
//    * Наименование        - Строка - наименование номенклатуры.
//    * Штрихкоды           - Массив из Строка - штрихкоды номенклатуры.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//                               Для значения Ложь, штрихкоды не заполняются.
//
Процедура ДобавитьСлужебныеКолонкиТовары(Товары, Знач ПолучатьШтрихКоды = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Товары.Характеристика, НЕОПРЕДЕЛЕНО) КАК Характеристика,
	|	ЕСТЬNULL(Товары.Упаковка, НЕОПРЕДЕЛЕНО) КАК Упаковка,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.Код
	|	КОНЕЦ КАК УпаковкаКод
	|ИЗ
	|	Товары КАК Товары";
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСвойства = Результат.Выбрать();
	Пока ВыборкаСвойства.Следующий() Цикл
		СтрокиТовара = Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка",
			ВыборкаСвойства.Номенклатура, ВыборкаСвойства.Характеристика, ВыборкаСвойства.Упаковка));
		Для Каждого СтрокаТовара Из СтрокиТовара Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТовара, ВыборкаСвойства,, "Номенклатура, Характеристика, Упаковка");
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Получает значения контекста на основании которого будет производиться поиск предложений
// и которые будут переданы в шапку создаваемых заказов.
//
// Параметры:
//  ПараметрКоманды   - Массив из ДокументСсылка - ссылки на документы для заполнения таблицы поиска товаров в 1С:Бизнес-сеть.
//  КонтекстИсточника - Структура - свойства источника, используемые для формирования заказов.
//  ТаблицаТовары     - ТаблицаЗначений - товары для поиска с реквизитами, состав:
//    * Номенклатура     - СправочникСсылка - номенклатура.
//    * Характеристика   - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка         - СправочникСсылка - упаковка номенклатуры.
//    * Количество       - Число - количество.
//    * ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    * Числитель        - Число - числитель упаковки.
//    * Знаменатель      - Число - знаменатель номенклатуры.
//    * Склад            - СправочникСсылка - склад для заказа.
//    * КонтекстСтроки   - Произвольный - дополнительные свойства по источнику.
//
Процедура СвойстваКонтекстаДокументовДляПоискаПредложений(Знач ПараметрКоманды, КонтекстИсточника, ТаблицаТовары) Экспорт

		
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Ссылка = ПараметрКоманды[0];
	Иначе
		Ссылка = ПараметрКоманды;
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый Структура;
	ДополнительныеРеквизиты.Вставить("Организация");
	ДополнительныеРеквизиты.Вставить("Валюта");
	
	Запрос = Новый Запрос;
			
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.торо_ЗаказПоставщику") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество,
		|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.торо_ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка В(&Ссылки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуТовары.Номенклатура,
		|	ЗаказПоставщикуТовары.Характеристика,
		|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
		КонтекстИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ДополнительныеРеквизиты);
		
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда

		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Ссылки)";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылки", ПараметрКоманды);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Упаковка = Выборка.ЕдиницаИзмерения;
	КонецЦикла;
КонецПроцедуры

// Вызывается для определения кода единицы измерения по единице измерения.
//  В случае если не определять код единицы измерения внутри данной процедуры,
//  код будет определен как значение реквизита код элемента, в случае, если
//  справочник имеет длину кода не равную нулю.
//
// Параметры:
//  ЕдиницаИзмерения    - СправочникСсылка - единица измерения
//  КодЕдиницыИзмерения - Строка - Код единицы измерения
//
Процедура ОпределитьКодЕдиницыИзмерения(ЕдиницаИзмерения, КодЕдиницыИзмерения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	КодЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Код");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормами

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Если Форма.ИмяФормы = "ФормированиеЗаказов" Тогда
		
		Если Форма.РежимЗапросаЦен Тогда
			// Для режима запроса цен изменение элементов формы.
			Форма.Заголовок = НСтр("ru = 'Запрос цен на товары поставщиков'");
			
			// Переопределяемый текст заголовка формы.
			Форма.Элементы.КраткоеОписание.Заголовок =
				НСтр("ru = '• В программе будут созданы учетные документы для уточнения цен на товары.
				|• Электронные документы запроса цен будут отправлены поставщикам через сервис 1С:Бизнес-сеть.
				|• После получения документов, поставщики могут отправить уточнение цен на товары (Коммерческое предложение).'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора формы (переопределяемое событие).
// См. описание метода ОбработкаВыбора.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма источника события.
//  ВыбранноеЗначение - Произвольный - выбранное событие.
//  ИсточникВыбора    - Произвольный - форма, где осуществлен выбор.
//
Процедура ОбработатьВыбор(Форма, Знач ВыбранноеЗначение, Знач ИсточникВыбора) Экспорт


КонецПроцедуры

// Обработка оповещения формы (переопределяемое событие).
// См. описание метода ОбработкаОповещения.
//
// Параметры:
//  ИмяСобытия - Строка - имя оповещения.
//  Параметр   - Произвольный - параметр сообщения.
//  Источник   - ФормаКлиентскогоПриложения - форма источника события.
//
Процедура ОбработатьОповещение(Знач ИмяСобытия, Параметр, Источник) Экспорт
	
	// Из ERP
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена"
		И Источник.ИмяФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоТоварам" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливаем условное оформление для единиц измерения номенклатуры.
//
// Параметры:
// 	 Форма - Форма - управляемая форму.
// 	 ИмяПоляВводаЕдиницИзмерения - Строка - наименование элемента формы, содержащего ед. измерения номенклатуры.
// 	 ПутьКПолюОтбора - Строка - полный путь к реквизиту.
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, Знач ИмяПоляВводаЕдиницИзмерения, Знач ПутьКПолюОтбора) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаЕдиницИзмерения].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Подсказки

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Ссылка            - ДокументСсылка - ссылка на документ с товарами.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//  Товары            - ТаблицаЗначений - таблица с товарами:
//   * Номенклатура        - Ссылка - номенклатура.
//   * Характеристика      - Ссылка - характеристика.
//   * Упаковка            - Ссылка - упаковка.
//   * Количество          - Число - количество товара.
//   * УпаковкаКод         - Строка - код упаковки по классификатору ОКЕИ.
//   * ЕдиницаИзмеренияКод - Строка - код единицы измерений по классификатору ОКЕИ.
//   * УпаковкаЧислитель   - Число - числитель упаковки по отношению к единице измерения.
//   * УпаковкаЗнаменатель - Знаменатель - знаменатель упаковки по отношению к единице измерения.
//   * Артикул             - Строка - артикул товара.
//   * Наименование        - Строка - наименование товара.
//   * Штрихкоды           - Массив из Строка - штрихкоды товара.
//
Процедура ПолучитьТоварыДляПодсказокПоСсылке(Знач Ссылка, Знач ПолучатьШтрихКоды, Товары) Экспорт

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.торо_ЗаказПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
		|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	ЗаказПоставщикуТовары.Количество КАК Количество
		|ИЗ
		|	Документ.торо_ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), Выборка);
		КонецЦикла;
		ДобавитьСлужебныеКолонкиТовары(Товары, ПолучатьШтрихКоды);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), Выборка);
		КонецЦикла;
		ДобавитьСлужебныеКолонкиТовары(Товары, ПолучатьШтрихКоды);
		
	КонецЕсли
КонецПроцедуры

// Заполняет данных номенклатуры для выгрузки в сервис 1С:Бизнес-сеть. Выгрузка необходима для формирования
// уведомлений пользователю о наличии в сервисе предложений по товарам, которые он закупает, 
// а также уведомлений о наличии спроса на товар, который он продает.
// Данные должны формироваться на основании оборотов организации за день, предшествующий дню даты вызова метода.
//
// Параметры:
//  Организации	    - Массив из ОпределяемыйТип.Организация - список организаций, для которых производится выгрузка.
//  РежимПоставщика - Булево - выгружать только данные по продажам.
//  РежимПокупателя - Булево - выгружать только данные по покупкам.
//  Штрихкоды       - ТаблицаЗначений - данные по штрихкодам:
//    * Организация     - ОпределяемыйТип.Организация - ссылка на организацию.
//    * Штрихкод        - Строка - штрихкод товара.
//    * Артикул         - Строка - артикул товара.
//    * Наименование    - Строка - наименование товара.
//    * ВидНоменклатуры - Строка, Массив - наименование вида номенклатуры (категории, группы номенклатуры) 
//                                         или массив из наименований видов номенклатуры по иерархии.
//    * РежимПоставщика - Булево - признак использования штрихкода в продажах.
//    * РежимПокупателя - Булево - признак использования штрихкода в закупках.
//
Процедура ЗаполнитьШтрихкодыДляВыгрузки(Знач Организации, Знач РежимПоставщика, Знач РежимПокупателя, Штрихкоды) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказыПоставщикам

// Создает документ заказ поставщику на основании данных торгового предложения.
//
// Параметры:
//  ДанныеЗаполнения - Структура - данные торгового предложения:
//   * Организация       - ОпределяемыйТип.Организация   - организация торгового предложения.
//   * Контрагент        - ОпределяемыйТип.КонтрагентБЭД - поставщик торгового предложения.
//   * Валюта            - СправочникСсылка - валюта торгового предложения.
//   * СтрокиЗаказа      - ТаблицаЗначений - содержит данные табличной части.
//      ** Номенклатура     - СправочникСсылка.
//      ** Характеристика   - СправочникСсылка.
//      ** ЕдиницаИзмерения - СправочникСсылка.
//      ** Количество       - Число.
//      ** Цена             - Число.
//      ** ЦенаВключаетНДС  - Булево.
//      ** СтавкаНДС        - ПеречислениеСсылка.
//      ** СуммаНДС         - Число.
//      ** СуммаСНДС        - Число.
//      ** Сумма            - Число.
//      ** ИдентификаторНоменклатуры - Строка - идентификатор номенклатуры поставщика.
//   * КонтекстИсточника - Структура - набор данных из основания содержащий данные для заполнения шапки документа.
//   * СпособДоставки    - Ссылка - способ доставки прикладного решения.
//   * АдресДоставки     - Строка - представление адреса доставки.
//   * АдресДоставкиЗначенияПолей - Строка - значение адреса доставки в формате XML.
//  ДокументОбъект - ДокументОбъект - созданный документ для заказа товаров, может быть не записан.
//  Отказ - Булево - признак ошибки при работе метода.
//
Процедура СоздатьДокументЗаказПоставщикуНаОснованииТорговогоПредложения(Знач ДанныеЗаполнения, ДокументОбъект, Отказ) Экспорт

	ТекстОшибки = НСтр("ru = 'Создание заказа торгового предложения'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ДокументОбъект = Документы.торо_ЗаказПоставщику.СоздатьДокумент();
	ДокументОбъект.ДатаПоставки = ДокументОбъект.Дата; 
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
	
	ТаблицаТовары = ДокументОбъект.Товары.ВыгрузитьКолонки();
	
	ДополнитьТаблицуТоваровКолонкамиПоискаПоИдентификатору(ТаблицаТовары);
	
	Для каждого СтрокаТовары Из ДанныеЗаполнения.СтрокиЗаказа Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		НоваяСтрока.КоличествоУпаковок = СтрокаТовары.Количество;
		НоваяСтрока.Характеристика   = СтрокаТовары.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТовары.ЕдиницаИзмерения;
		ДокументОбъект.ЦенаВключаетНДС = СтрокаТовары.ЦенаВключаетНДС;

		Если Не ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) И ЗначениеЗаполнено(СтрокаТовары.КодЕдиницыИзмерения) Тогда
			НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(СтрокаТовары.КодЕдиницыИзмерения);
			// Проверка заполнения обязательного поля.
			Если Не ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не найдена единица измерения (%1, код %2)'"),
					СтрокаТовары.ПредставлениеЕдиницыИзмерения, СтрокаТовары.КодЕдиницыИзмерения);
				ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(),,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СопоставитьНоменклатуруКонтрагентовПоИдентификатору(ТаблицаТовары, ДокументОбъект.Контрагент);
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	
	// Если хотя бы одна цена не заполнена, в документе есть торговые предложения с ценой "по запросу".
	РежимЗапросаЦен = ДанныеЗаполнения.СтрокиЗаказа.Найти(0, "Цена") <> Неопределено;
	
	Попытка
		ДокументОбъект.Записать(?(РежимЗапросаЦен, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
	Исключение
		ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(),,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

// Удаляет созданные заказы поставщику при переходе на шаг назад.
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений - таблица документов для удаления, состав:
//    * Ссылка - ДокументСсылка - ссылка на удаляемый документ.
//  Отказ - Булево - признак результата удаления документов.
//
 Процедура УдалитьДокументыЗаказПоставщику(ТаблицаДокументы, Отказ) Экспорт

	Сообщение = Новый СообщениеПользователю;
	ТекстИмеютсяСсылки = НСтр("ru = 'Имеются ссылки на %1 - %2.'");
	ТекстПомечен       = НСтр("ru = '%1 - помечен на удаление.'");
	ТекстЗаблокирован  = НСтр("ru = '%1 - заблокирован. Пометить на удаление не удалось.'");
	ТекстУдален        = НСтр("ru = '%1 - удален.'");
	
	СсылкиНаУдаление = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаДокументы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
			СсылкиНаУдаление.Добавить(СтрокаТаблицы.Ссылка);
		КонецЕсли;
	КонецЦикла;
	

	ТаблицаСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	СсылкиПометокУдаления = Новый Массив;
	ВсегоСтрок = ТаблицаСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
		УчитыватьСсылку = Истина;
		// Проверка ссылки, а есть ли проблема
		Если Метаданные.РегистрыСведений.Содержит(Ссылка.Метаданные) Тогда
			Для Каждого Измерение Из Ссылка.Метаданные.Измерения Цикл
				Если Измерение.Тип.СодержитТип(Тип("ДокументСсылка.торо_ЗаказПоставщику"))
					И Измерение.Ведущее Тогда 
					
					ТаблицаСсылок.Удалить(Ссылка);
					УчитыватьСсылку = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если УчитыватьСсылку Тогда 
			Индекс = СсылкиНаУдаление.Найти(Ссылка[1]);
			Если Индекс = Неопределено Тогда
				Если СсылкиПометокУдаления.Найти(Ссылка[0]) = Неопределено Тогда
					СсылкиПометокУдаления.Добавить(Ссылка[0]);
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИмеютсяСсылки, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1]));
					Сообщение.Сообщить();
				КонецЕсли;
				ТаблицаСсылок.Удалить(Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаЗавершена = Ложь;
	Пока Не ОбработкаЗавершена Цикл
		ОбработкаЗавершена = Истина;
		ВсегоСтрок = ТаблицаСсылок.Количество();
		Для Счетчик = 1 По ВсегоСтрок Цикл
			Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
			Если СсылкиПометокУдаления.Найти(Ссылка[0]) <> Неопределено Тогда
				Если СсылкиПометокУдаления.Найти(Ссылка[1]) = Неопределено Тогда
					СсылкиПометокУдаления.Добавить(Ссылка[1]);
				КонецЕсли;
				ТаблицаСсылок.Удалить(Ссылка);
				ОбработкаЗавершена = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДокументы.Очистить();
	
	Для Каждого ЗначениеМассива Из СсылкиПометокУдаления Цикл
		Индекс = СсылкиНаУдаление.Найти(ЗначениеМассива);
		Если Индекс <> Неопределено Тогда
			СсылкиНаУдаление.Удалить(Индекс);
		КонецЕсли;
		ДокументОбъект = ЗначениеМассива.ПолучитьОбъект();
		Если Не ДокументОбъект.Заблокирован() Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПомечен, СокрЛП(ЗначениеМассива));
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаблокирован, СокрЛП(ЗначениеМассива));
		КонецЕсли;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого ЗначениеМассива Из СсылкиНаУдаление Цикл
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУдален, СокрЛП(ЗначениеМассива));
		Сообщение.Сообщить();
	КонецЦикла;
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);

КонецПроцедуры

// Производит пересчет суммы для заказа товаров.
//
// Параметры:
//  СтрокаТоваров - Структура - реквизиты строки товаров для пересчета суммы при формировании заказов:
//    * СтавкаНДС       - Ссылка - значение ставки НДС.
//    * Цена            - Число - цена товара для заказа.
//    * ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//    * Количество      - Число - количество товара для заказа.
//    * Сумма           - Число - сумма заказа по строке.
//    * СуммаНДС        - Число - сумма НДС строки.
//    * СуммаСНДС       - Число - значение суммы с НДС.
//    * ПроцентСкидки   - Число - процент скидки по строке.
//    * СуммаСкидки     - Число - сумма скидки по строке.
//
Процедура ПересчитатьСуммуПоСтроке(СтрокаТоваров) Экспорт
	
	СуммаБезСкидки = СтрокаТоваров.Количество * СтрокаТоваров.Цена;
	
	СтрокаТоваров.СуммаСкидки = Окр(СуммаБезСкидки * СтрокаТоваров.ПроцентСкидки / 100, 2);
	СтрокаТоваров.Сумма = Макс(СуммаБезСкидки - СтрокаТоваров.СуммаСкидки, 0);
	СтавкаНДСЧислом = ЦенообразованиеКлиентСервер.ЗначениеСтавкиНДСИзПеречисления(СтрокаТоваров.СтавкаНДС);
	СтрокаТоваров.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма,
																			СтавкаНДСЧислом,
																			СтрокаТоваров.ЦенаВключаетНДС);
	Если СтрокаТоваров.ЦенаВключаетНДС Тогда
		СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма;
	Иначе
		СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма + СтрокаТоваров.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение реквизитов заказов.
//
// Параметры:
//  ТаблицаЗаказов	 - ТаблицаЗначений - таблица с ссылками и реквизитами для заполнения:
//                       *Ссылка - ДокументСсылка - ссылка на документ заказа
//                       *Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент документа
//                       *Организация - ОпределяемыйТип.Организация - организация документа
//                       *СуммаДокумента - Число - сумма документа
//                       *Валюта - СправочникСсылка -валюта документа
//                       *ЗначениеКартинки - Число - индекс картинки документа коллекции 
//                          БиблиотекаКартинок.СтатусыДокумента для отображения статуса документа
//
Процедура ЗаполнитьРеквизитыЗаказов(ТаблицаЗаказов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Проведен
	|			ТОГДА 1
	|		КОГДА ЗаказПоставщику.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеКартинки
	|ИЗ
	|	Документ.торо_ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&СписокДокументов)";
	
	Запрос.УстановитьПараметр("СписокДокументов", ТаблицаЗаказов.ВыгрузитьКолонку("Ссылка"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗаказов.Найти(Выборка.Ссылка, "Ссылка");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;

КонецПроцедуры

// В обработчике требуется определить право текущего пользователя на создание
//   документов заказа поставщику.
//
// Параметры:
//  ЕстьПраво      - Булево - признак наличия прав у текущего пользователя на
//                         создание документов заказа поставщику
//                         Истина - пользователь имеет права создавать документы
//                         Ложь - права на создание документов отсутствуют
//  ТекстСообщения - Строка - текст сообщения пользователю, выводимое при отсутствии
//                         права на создание документов.
//
Процедура ПриОпределенииПраваСозданияЗаказовПоставщику(ЕстьПраво, ТекстСообщения) Экспорт 
	
	ЕстьПраво = ПравоДоступа("Добавление", Метаданные.Документы.торо_ЗаказПоставщику);
	ТекстСообщения = НСтр("ru = 'Отсутствуют права на создание документов.'");
	
КонецПроцедуры

#КонецОбласти

#Область ПубликацияТорговыхПредложений

// Инициализация запроса публикуемых прайс листов.
// В запросе необходимо описать получение временных таблицы с предопределенными полями.
// Возможно добавление дополнительных полей для использования в других временных таблицах.
//
// Параметры запроса:
//  * ПрайсЛист - ОпределяемыйТип.ТорговоеПредложение - ссылка на прайс-лист.
//  * Период    - дата - получения периодических данных, например дата установки цены.
//
// Временные таблицы и предопределенные поля:
// ПрайсЛисты - данные прайс листов:
//  * Ссылка                - ОпределяемыйТип.ТорговоеПредложение - ссылка на прайс-лист.
//  * Организация           - ОпределяемыйТип.Организация - ссылка на организацию.
//  * Наименование          - Строка - наименование.
//  * ДатаНачалаДействия    - Дата - дата начала действия.
//  * ДатаОкончанияДействия - Дата - дата окончания действия.
//  * Валюта                - СправочникСсылка.Валюты - валюта публикации.
//  * ЦенаВключаетНДС        - Булево - признак включения НДС в минимальную сумму заказа.
//  * СрокПоставки           - Число - срок поставки товара.
//  * ПоВсемТоварам          - Булево - признак того, что предложение формируется по всем товарам прайс листа.
//  * ВидЦены                - СправочникСсылка.ВидыЦен - вид цены.
//  * МинимальнаяСуммаЗаказа - Число - минимальная сумма для оформления заказа (0 - сумма заказа может быть любой).
//  * ПубликоватьЦены        - Булево - признак публикации цен на товары.
//
// Контрагенты - для которых доступны торговые предложения:
//  * ПрайсЛист - ОпределяемыйТип.ТорговоеПредложение - ссылка прайс-листа.
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента.
//
// Контакты - контактная информация:
//  * ПрайсЛист             - ОпределяемыйТип.ТорговоеПредложение - ссылка на прайс-лист.
//  * ПредставлениеКонтакта - Строка - представление контакта, например ФИО.
//  * Телефон               - Строка - телефон.
//  * ЭлектроннаяПочта      - Строка - адрес электронной почты.
//  * ВебСайт               - Строка - адрес сайта.
//
// Товары - данные товаров:
//  * ПрайсЛист        - ОпределяемыйТип.ТорговоеПредложение - ссылка на прайс-лист.
//  * Номенклатура     - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Характеристика   - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика.
//  * ЕдиницаИзмерения - СправочникСсылка - базовая единица измерения товара.
//  * НаименованиеНоменклатуры   - Строка - публикуемое представление номенклатуры.
//  * НаименованиеХарактеристики - Строка - публикуемое представление характеристики.
//  * ОписаниеНоменклатуры       - Строка - описание номенклатуры.
//  * Артикул              - Строка - артикул товара.
//  * Упаковка             - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - упаковка товара.
//  * НаименованиеУпаковки - Строка - наименование упаковки товара.
//  * ЧислительУпаковки    - Число  - числитель отношения упаковки к единице измерения.
//  * ЗнаменательУпаковки  - Число  - знаменатель отношения упаковки к единице измерения.
//  * КратностьУпаковки    - Число  - кратность количества логистических упаковок в торговом предложении.
//  * СтавкаНДС            - Ссылка - значение ставки НДС.
//  * ЦенаВключаетНДС      - Булево - признак включения НДС в цену
//  * Цена                 - Число  - стоимость товара в валюте публикации.
//  * СрокПоставки         - Число  - срок поставки на склад поставщика.
//  * Наличие              - Число - наличие товара на складах (0 - нет на складе, 1 - мало, 2 - достаточно, 3 - много).
//  * Количество           - Число - количество товара на складах. 
//  * ВидНоменклатуры      - СправочникСсылка - группировка номенклатуры в прикладном решении.
//  * Родитель             - СправочникСсылка - родитель номенклатуры в иерархии.
//  * ПричинаИсключенияИзПубликации - ОпределяемыйТип.ПричинаИсключенияИзПубликацииТорговыеПредложения - причина по которой
//         данная позиция не должна быть опубликована в сервисе. В случае, если данная позиция должна быть опубликована
//         содержит в себе пустое значение типа ОпределяемыйТип.ПричинаИсключенияИзПубликацииТорговыеПредложения.
//
// Свойства - характеристики номенклатуры:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика.
//  * Свойство       - Ссылка - свойство товара.
//  * Значение       - Ссылка - значение свойства товара.
//
// Штрихкоды - штрихкоды номенклатуры:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика.
//  * Упаковка       - СправочникСсылка - единица измерения упаковки товара.
//  * Значение       - Строка - штрихкод.
//
// Изображения - отбираются актуальные изображения товаров поставщика для публикации:
//  * Номенклатура    - ОпределяемыйТип.НоменклатураБЭД                                   - номенклатура.
//  * Характеристика  - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД                     - характеристика.
//  * ФайлИзображения - ОпределяемыйТип.ПрисоединенныеФайлыИзображенийТорговоеПредложение - ссылка на
//                        справочник "ПрисоединенныеФайлы", реализованный по технологии библиотеки стандартных подсистем,
//                        обрабатываются с расширением: jpeg, jpg, jpe, png, gif, bmp.
//
// СкидкиЗаОбъемПродаж - описывает цену одной логистической упаковки ТП при приобретении указанного объема товара
// при варианте публикации "Виды скидок". Из выборки необходимо исключить записи где количество = 1:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Количество     - Число  - при покупке заданного количества логистических упаковок, от.
//  * Цена           - Число  - стоимость товара в валюте публикации.
//  * ЦенаДоСкидки   - Число  - в случае, если товар имеет дополнительную скидку, по мимо скидки за объем продаж, 
//  								указывается стоимость товара до скидки в валюте публикации.
//  * Комментарий    - Строка - текстовое описание ценового условия.
//
// СкидкиЗаОбъемПродажВидыЦен - описывает цену одной логистической упаковки ТП при приобретении указанного объема товара
// при варианте публикации "Виды цен". Из выборки необходимо исключить записи где количество = 1:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Количество     - Число  - при покупке заданного количества логистических упаковок, от.
//  * Цена           - Число  - стоимость товара в валюте публикации.
//  * ЦенаДоСкидки   - Число  - в случае, если товар имеет дополнительную скидку, по мимо скидки за объем продаж, 
//  								указывается стоимость товара до скидки в валюте публикации.
//  * Комментарий    - Строка - текстовое описание ценового условия.
//
// СкидкиПроцентСумма - описывает цену одной логистической упаковки ТП для выбранной скидки, 
// при варианте публикации "Виды скидок". Из выборки необходимо исключить записи где количество > 1:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Цена           - Число  - стоимость товара в валюте публикации.
//  * Комментарий    - Строка - текстовое описание ценового условия.
//
// СкидкиПроцентСуммаВидыЦен - описывает цену одной логистической упаковки ТП для выбранной скидки,
// при варианте публикации "Виды цен". Из выборки необходимо исключить записи где количество > 1:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Цена           - Число  - стоимость товара в валюте публикации.
//  * Комментарий    - Строка - текстовое описание ценового условия.
//
// Параметры:
//  Запрос - Запрос - запрос для получения публикуемых прайс-листов и товаров.
//
Процедура ИнициализацияЗапросаПубликуемыхТоваров(Запрос) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ДиагностикаОшибокТорговыхПредложений

// Определяет возможность изменения реквизитов карточки торгового предложения, которые доступны
//    к интерактивному редактированию из печатной формы.
//
// Реквизиты, для которых доступность редактирования будет установлена в Истина будут выделены
//    цветом и пиктограммой в карточке торгового предложения. При нажатии на значение данного 
//    реквизита будет вызван метод ОбработатьНажатиеПоГиперссылкеРеквизитаКарточкиТорговогоПредложения
//    общего модуля ТорговыеПредложенияКлиентПереопределяемый.
//
// Параметры:
//  Реквизиты - Соответствие     - соответствие, определяющее доступность интерактивного изменения
//        реквизитов торгового предложения в карточке торгового предложения:
//            * Ключ - Строка - имя реквизита с учетом имени таблицы. Например:
//                    "Товары.НаименованиеНоменклатуры", "Контакты.Телефон"
//            * Значение - Булево - определяет, будет ли доступно интерактивное изменение реквизита
//
// Пример:
//    Реквизиты["Товары.НаименованиеНоменклатуры"] = Истина;
//    Реквизиты["Контакты.Телефон"] = Ложь;
//
Процедура ОпределитьОбрабатываемыеРеквизитыКарточкиТорговогоПредложения(Реквизиты) Экспорт 
	
	// Таблица "Товары"
	Реквизиты.Вставить("Товары.НаименованиеНоменклатуры"                 , Истина);
	Реквизиты.Вставить("Товары.Артикул"                                  , Истина);
	Реквизиты.Вставить("Товары.НаименованиеУпаковки"                     , Истина);
	Реквизиты.Вставить("Товары.Цена"                                     , Истина);
	Реквизиты.Вставить("Товары.СтавкаНДС"                                , Истина);
	Реквизиты.Вставить("Товары.СрокПоставки"                             , Истина);
	Реквизиты.Вставить("Товары.Наличие"                                  , Истина);
	
	// Таблица "ПрайсЛистыСлужебный"
	Реквизиты.Вставить("ПрайсЛистыСлужебный.НаименованиеОрганизации"     , Истина);
	Реквизиты.Вставить("ПрайсЛистыСлужебный.ИННОрганизации"              , Истина);
	Реквизиты.Вставить("ПрайсЛистыСлужебный.КППОрганизации"              , Истина);
	Реквизиты.Вставить("ПрайсЛистыСлужебный.ТелефонОрганизации"          , Истина);
	Реквизиты.Вставить("ПрайсЛистыСлужебный.СайтОрганизации"             , Истина);
	Реквизиты.Вставить("ПрайсЛистыСлужебный.ЭлектроннаяПочтаОрганизации" , Истина);
	
	// Таблица "Контакты"
	Реквизиты.Вставить("Контакты.Телефон"                                , Истина);
	Реквизиты.Вставить("Контакты.ЭлектроннаяПочта"                       , Истина);
	
	// Изображения.
	Реквизиты.Вставить("Изображения.ФайлИзображения"                     , Истина);

КонецПроцедуры

// Вызывается для получения информации о объектах-источниках незаполненных данных при
//    проверке заполнения обязательных реквизитов.
//
// В последствии выводит ссылки для диагностики на форму и при нажатии пользователем на 
//    ошибку открывает объект и выводит сообщение, позиционируясь на реквизите для заполнения.
//    В случае открытии формы сообщение выводится стандартно, без позиционирования.
//
// Параметры:
//  ПроверяемыйРеквизит        -     Строка - имя колонки и таблицы для публикации товаров
//            см. ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров
//  СтрокаТорговогоПредложения -     СтрокаТаблицыЗначений - строка таблицы для публикации товаров
//            см. ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров
//  ДополнительныйРеквизит     -     ОпределяемыйТип.ДополнительныеРеквизитыРаботаСНоменклатурой - 
//            ссылка на дополнительный реквизит. Используется только в случае, если
//            ПроверяемыйРеквизит равен "Свойства.Свойство" или "Свойства.Значение".
//            см. ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров
//  СсылкаНаОбъект             -     ЛюбаяСсылка - ссылка на объект-владелец данных.
//  ПутьКДанным                -     Строка - путь к данным объекта на открываемой форме
//                                            для заполнения. Если нужно открыть иную форму то указывается полный путь 
//                                            до формы и через "|" путь до реквизита указываемой формы.
//  ТекстСообщения             -     Строка - текст сообщения, выводимый пользователю при активации реквизита.
//
// Пример:
//    Если ПроверяемыйРеквизит = "Товары.Артикул" Тогда
//        СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
//        ПутьКДанным = "Объект.Артикул";
//        ТекстСообщения = "Не заполнен артикул номенклатуры";
//    ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеУпаковки" 
//        И СтрокаТорговогоПредложения.Упаковка.Пустая() Тогда
//        СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
//        ПутьКДанным = "Объект.ЕдиницаИзмерения";
//        ТекстСообщения = "Не заполнено наименование единицы измерения";
//    ИначеЕсли ПроверяемыйРеквизит = "ПрайсЛисты.АдресЭлектроннойПочты" Тогда
//		СсылкаНаОбъект  = СтрокаТорговогоПредложения.ПрайсЛист;
//		ПутьКДанным = "РегистрСведений.СостоянияСинхронизацииТорговыеПредложения.Форма.НастройкиПубликации|Запись.АдресЭлектроннойПочты";
//		ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Уведомление о заказах по эл.почте"".'");
//    КонецЕсли;.
//
Процедура ОпределитьВладельцевНезаполненныхРеквизитов(
	ПроверяемыйРеквизит, СтрокаТорговогоПредложения, ДополнительныйРеквизит, СсылкаНаОбъект, ПутьКДанным, 
	ТекстСообщения) Экспорт

	Если ПроверяемыйРеквизит = "Товары.Артикул" Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
		ПутьКДанным    = "Объект.Артикул";
		ТекстСообщения = НСтр("ru = 'Не заполнен артикул номенклатуры'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеНоменклатуры" Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
		ПутьКДанным    = "Объект.Наименование";
		ТекстСообщения = НСтр("ru = 'Не заполнено наименование номенклатуры'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеХарактеристики"
		И ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры") Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Характеристика;
		ПутьКДанным    = "Объект.Наименование";
		ТекстСообщения = НСтр("ru = '""Не заполнено наименование характеристики'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеУпаковки" 
		И СтрокаТорговогоПредложения.Упаковка.Пустая() Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
		ПутьКДанным    = "Объект.ЕдиницаИзмерения";
		ТекстСообщения = НСтр("ru = 'Не заполнена единица измерения'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеУпаковки" 
		И НЕ СтрокаТорговогоПредложения.Упаковка.Пустая() Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Упаковка;
		ПутьКДанным    = "Объект.Наименование";
		ТекстСообщения = НСтр("ru = 'Не заполнено наименование единицы измерения'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.УпаковкаКод" 
		И СтрокаТорговогоПредложения.Упаковка.Пустая() Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
		ПутьКДанным    = "Объект.ЕдиницаИзмерения";
		ТекстСообщения = НСтр("ru = 'Не заполнена единица измерения'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.УпаковкаКод" 
		И НЕ СтрокаТорговогоПредложения.Упаковка.Пустая() Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Упаковка;
		ПутьКДанным    = "Объект.Код";
		ТекстСообщения = НСтр("ru = 'Не заполнен код ОКЕИ'");
	ИначеЕсли ПроверяемыйРеквизит = "Свойства.Свойство" И ДополнительныйРеквизит = Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Артикул Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
		ПутьКДанным    = "Объект.Артикул";
		ТекстСообщения = НСтр("ru = 'Не заполнен артикул номенклатуры'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.СтавкаНДС" Тогда
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТорговогоПредложения.Номенклатура, "СтавкаНДС");
		
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
			ПутьКДанным    = "Объект.СтавкаНДС";
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ставка НДС %1 является недопустимой для публикации товаров'"), СтавкаНДС);
		Иначе
			СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
			ПутьКДанным    = "Объект.СтавкаНДС";
			ТекстСообщения = НСтр("ru = 'Некорректно заполнена ставка НДС'");
		КонецЕсли;
		
	ИначеЕсли ПроверяемыйРеквизит = "Свойства.Свойство" Тогда
		СсылкаНаОбъект  = СтрокаТорговогоПредложения.Номенклатура;
		ДанныеРеквизита = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДополнительныйРеквизит, "НаборСвойств, Заголовок");
		ПутьКДанным     = СтрШаблон("ДополнительныйРеквизитЗначение_%1_%2", 
			СтрЗаменить(ВРег(Строка(ДанныеРеквизита.НаборСвойств.УникальныйИдентификатор())), "-", "x"),
			СтрЗаменить(ВРег(Строка(ДополнительныйРеквизит.УникальныйИдентификатор())), "-", "x"));
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Некорректно заполнен реквизит ""%1""'"), ДанныеРеквизита.Заголовок);
	ИначеЕсли ПроверяемыйРеквизит = "Контакты.Телефон" Тогда
		СсылкаНаОбъект  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТорговогоПредложения.ПрайсЛист, "Организация");
		ПутьКДанным     = СтрШаблон("КонтактнаяИнформацияПоле%1%2", 
			СтрЗаменить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.УникальныйИдентификатор(), "-", "x"), 1);
		ТекстСообщения = НСтр("ru = 'Некорректно заполнен контактный телефон организации'");
	ИначеЕсли ПроверяемыйРеквизит = "ПрайсЛисты.Наименование" Тогда
		СсылкаНаОбъект  = СтрокаТорговогоПредложения.ПрайсЛист;
		ПутьКДанным     = "Объект.Наименование";
		ТекстСообщения = НСтр("ru = 'Не заполнено наименование торгового предложения'");
	ИначеЕсли ПроверяемыйРеквизит = "ПрайсЛисты.ДатаНачалаДействия" Тогда
		СсылкаНаОбъект  = СтрокаТорговогоПредложения.ПрайсЛист;
		ПутьКДанным     = "Объект.ДатаНачалаДействия";
		ТекстСообщения = НСтр("ru = 'Не заполнена дата начала публикации торгового предложения'");
	ИначеЕсли ПроверяемыйРеквизит = "ПрайсЛисты.ДатаОкончанияДействия" Тогда
		СсылкаНаОбъект  = СтрокаТорговогоПредложения.ПрайсЛист;
		ПутьКДанным     = "Объект.ДатаОкончанияДействия";
		ТекстСообщения = НСтр("ru = 'Не верно заполнена дата окончания публикации торгового предложения'");
	ИначеЕсли ПроверяемыйРеквизит = "КонтрагентыСлужебный.КонтрагентИНН" Тогда
		СсылкаНаОбъект  = ДополнительныйРеквизит;
		ПутьКДанным     = "Объект.ИНН";
		ТекстСообщения = НСтр("ru = 'Не верно задан ИНН контрагента'");
	ИначеЕсли ПроверяемыйРеквизит = "КонтрагентыСлужебный.КонтрагентКПП" Тогда
		СсылкаНаОбъект  = ДополнительныйРеквизит;
		ПутьКДанным     = "Объект.КПП";
		ТекстСообщения = НСтр("ru = 'Не верно задан КПП контрагента'");
	КонецЕсли;
	
 КонецПроцедуры

// Вызывается для определения причин отсутствия позиции торгового предложения в публикации,
//    доступных для исправления интерактивно.
//
// Для указанных в обработчике значений при расшифровке причины будет вызван обработчик
//    ТорговыеПредложенияКлиентПереопределяемый.ОбработатьНажатиеПоГиперссылкеПричиныИсключенияИзПубликации.
//
// Параметры:
//  Причины - Массив из ОпределяемыйТип.ПричинаИсключенияИзПубликацииТорговыеПредложения - значения,
//             для которых доступна расшифровка причины, по которой данная позиция не публикуется в
//             сервисе.
//
// Пример:
//    Причины.Добавить(Перечисления._ДемоПричиныИсключенияИзПубликации.ОтсутствуетНаСкладе);
//    Причины.Добавить(Перечисления._ДемоПричиныИсключенияИзПубликации.НеУказанаЦена);
//
Процедура ОпределитьОбрабатываемыеПричиныИсключенияИзПубликации(Причины) Экспорт 
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Не используется
// Заполнение пакета торговых предложений.
//
// Параметры:
//  ТорговоеПредложение	 - СправочникСсылка - ссылка на элемент справочника определяющего торговые предложения,
//                                            например СправочникСсылка.Соглашения.
//  ПакетПредложений	 - Структура - свойства публикуемого торгового предложения.
//                         см. ТорговыеПредложения.ОписаниеПакетаПредложений.
//
Процедура ЗаполнитьПакетПредложений(Знач ТорговоеПредложение, ПакетПредложений) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации.
// Получение публикуемых реквизитов номенклатуры.
// 
// Параметры:
//  ПубликуемыеРеквизиты - Соответствие - реквизиты справочника Номенклатура, публикуемые для торговых предложений.
//    * Ключ     - Произвольный - значение реквизита сопоставления, см. определяемый тип ДополнительныеРеквизитыРаботаСНоменклатурой.
//    * Значение - Структура - свойства реквизита:
//      ** Представление    - Строка - наименование для отображения.
//      ** ПутьКДанным      - Строка - текст запроса для получения данных.
//      ** ТипЗначения      - ОписаниеТипов - описание типа данных.
//      ** ПустоеЗначение   - Произвольный - Значение реквизита, при котором, он считается не заполненным.
//
Процедура ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления.
// Получение доступных типов значений свойств для сопоставления.
// 
// Параметры:
//  ТипыЗначенийСвойств - СписокЗначений - доступные типы значений, например Тип("СправочникСсылка.Производители").
//
Процедура ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ПустаяСсылкаРеквизитаОбъектаДляСопоставления.
// Возвращает пустую ссылку реквизита объекта для сопоставления.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка - пустая ссылка для заполнения сопоставления,
//                         например ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.
//
Процедура ПустаяСсылкаРеквизитаОбъектаДляСопоставления(Ссылка) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияНоменклатуры.
// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияНоменклатуры(Список) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ПолучитьДанныеСопоставленияРеквизитов
// Получение данных для сопоставления реквизитов и значений реквизитов информационной базы и сервиса.
//
// Параметры:
//  ОбъектСопоставления      - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  СопоставленныеРеквизиты	 - ТаблицаЗначений - сопоставленные реквизиты в ИБ.
//    * РеквизитОбъекта                 - Произвольный - реквизит.
//    * ИдентификаторРеквизитаКатегории - Строка - идентификатор реквизита категории в сервисе.
//    * Представление                   - Строка - представление реквизита.
//  ДополнительныеРеквизиты  - ТаблицаЗначений - дополнительные реквизиты номенклатуры.
//    * РеквизитОбъекта - Произвольный - реквизит.
//    * ТипЗначения     - ОписаниеТипов - тип реквизита.
//  РасчетСоответствий       - ТаблицаЗначений - таблица количества соответствий значений реквизитов.
//    * РеквизитОбъекта                    - Произвольный - реквизит.
//    * КоличествоЗначенийРеквизита        - Число - количество значений реквизита в ИБ.
//    * КоличествоСопоставленныхРеквизитов - Число - количество сопоставленных значений реквизитов.
//
Процедура ПолучитьДанныеСопоставленияРеквизитов(ОбъектСопоставления, СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры.
// Получение сопоставленных значений реквизита вида номенклатуры.
//
// Параметры:
//  ОбъектСопоставления - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  РеквизитОбъекта	    - Строка, СправочникСсылка - реквизит объекта.
//  ТипЗначения	        - ОписаниеТипов - тип значений реквизита.
//  ЗначенияРеквизита   - ТаблицаЗначений - список сопоставленных реквизитов, колонки:
//   * Значение                                - СправочникСсылка, Строка, Число, Булево - сопоставленное значение.
//   * ИдентификаторЗначенияРеквизитаКатегории - Строка - идентификатор сопоставленного значения.
//   * ПредставлениеЗначенияРеквизитаКатегории - Строка - представление сопоставленного значения.
//
Процедура ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры(Знач ОбъектСопоставления, Знач РеквизитОбъекта, Знач ТипЗначения, ЗначенияРеквизита) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияПоИерархии.
// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоИерархии(Список) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияПоНоменклатуре.
// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоНоменклатуре(Список) Экспорт
	
КонецПроцедуры

// Устарела. Используется метод РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры.
// Инициализация запроса соответствия значений реквизитов вида номенклатуры.
// 
// В запросе необходимо вернуть таблицу содержащую количество значений
// реквизита в информационной базе и количество сопоставленных реквизитов.
// Параметры запроса: &РеквизитОбъекта, &ОбъектСопоставления.
// Поля запроса:
//  * КоличествоЗначенийРеквизита - Число - количество возможных значений реквизита.
//  * КоличествоСопоставленныхРеквизитов - Число - количество реквизитов, сопоставленных в базе.
//
// Параметры:
//  Запрос - Запрос - запрос инициализации, установки параметров
//
Процедура ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(Запрос) Экспорт
	
КонецПроцедуры

// Устарела. Отсутствует необходимость в использовании.
// 
// Устанавливает значение свойства элементов формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы  - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов - Массив из Строка, Строка, Структура - имена искомых элементов.
//  ИмяСвойства    - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение       - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомых элементов.
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	
КонецПроцедуры

// Устарела. Отсутствует необходимость в использовании.
// 
// Заполнение контактной информации по контактному лицу.
//
// Параметры:
//  КонтактноеЛицо    - СправочникСсылка - контактное лицо в информационной базе, например СправочникСсылка.ФизическиеЛица.
//  ЭлектроннаяПочта  - Строка - адрес электронной почты.
//  Телефон           - Строка - номер телефона.
//  УведомлятьПоПочте - Булево - признак необходимости уведомления по электронной почте.
//  Перезаполнять     - Булево - признак необходимости перезаполнения информации.
//
Процедура ЗаполнитьКонтактнуюИнформациюПоКонтактномуЛицу(Знач КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте, Знач Перезаполнять = Ложь) Экспорт
	
		
КонецПроцедуры

// Устарела. Отсутствует необходимость в использовании.
// Получить параметры поиска номенклатуры сервиса.
//
// Параметры:
//  Номенклатура	 - Ссылка - номенклатура.
//  Характеристика	 - Ссылка - характеристика.
//  Результат		 - Структура - возвращаемые данные:
//   * НаименованиеНоменклатуры - Строка - имя номенклатуры.
//   * НаименованиеХарактеристики - Строка - наименование характеристики.
//   * Штрихкоды - Массив из Строка - штрихкоды по ссылке, тип строка.
//
Процедура ПолучитьПараметрыПоискаНоменклатурыСервиса(Знач Номенклатура, Знач Характеристика, Результат) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать ТорговыеПредложенияПереопределяемый.ЗаполнитьСведенияОНоменклатуре
// Заполнение реквизитов номенклатуры в процедуре формирования заказа.
//
// Параметры:
//  Номенклатура - СправочникСсылка - ссылка на справочник номенклатура.
//  Результат	 - Структура - возвращаемые реквизиты ссылки справочника:
//    * ИспользованиеХарактеристик - Булево - признак использования характеристик номенклатуры.
//    * ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    * Упаковка - СправочникСсылка - упаковка номенклатуры.
//
Процедура ЗаполнитьРеквизитыНоменклатурыДляФормированияЗаказа(Знач Номенклатура, Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры)
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры =
		ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");

КонецПроцедуры
	
// Установка доступность команд буфера обмена в форме.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма установки доступности команд.
//
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма)
	
	// Из ERP
	// Наименование элементов формы.
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ПустойБуферОбмена = ОбщегоНазначения.ПустойБуферОбмена("Строки");
	
	УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность",
		НЕ ПустойБуферОбмена);    
		
КонецПроцедуры	

// Добавляет в табличную часть колонки поиска номенклатуры контрагентов
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица в которую требуется добавить колонки
//    для поиска номенклатуры контрагентов.
//
Процедура ДополнитьТаблицуТоваровКолонкамиПоискаПоИдентификатору(Товары) Экспорт
	
	Товары.Колонки.Добавить("ИдентификаторКонтрагента", Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(300, ДопустимаяДлина.Переменная)));
	Товары.Колонки.Добавить("НаименованиеКонтрагента", Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная)));
	
КонецПроцедуры

// Заполняет колонку "НоменклатураКонтрагента" сопоставленными данными номенклатуры
//
// Параметры:
//  Товары               - ТаблицаЗначений - таблица для которой требуется произвести сопоставление.
//                                        Таблица должна содержать колонки:
//   * ИдентификаторКонтрагента - Строка                                        - идентификатор номенклатуры контрагента.
//   * НоменклатураКонтрагента  - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагента.
//   * Номенклатура             - ОпределяемыйТип.НоменклатураБЭД               - ссылка номенклатуры.
//   * Характеристика           - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка характеристики.
//   * ЕдиницаИзмерения         - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - ссылка упаковки.
//  ВладелецНоменклатуры - СправочникСсылка.Контрагенты - ссылка на владельца номенклатуры
//
Процедура СопоставитьНоменклатуруКонтрагентовПоИдентификатору(Товары, ВладелецНоменклатуры) Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПоиска.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(300, ДопустимаяДлина.Переменная)));
	ТаблицаПоиска.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПоиска.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПоиска.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	НомерСтроки = 0;
	
	Для каждого СтрокаТовара Из Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ПустаяСтрока(СтрокаТовара.ИдентификаторКонтрагента) Тогда
			Продолжить; // По пустым идентификаторам поиск не выполняем
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовара.НоменклатураКонтрагента) Тогда
			Продолжить; // Для заполненных значений номенклатуры контрагентов не выполняем поиск
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоиска.Добавить();
		НоваяСтрока.НомерСтроки    = НомерСтроки;
		НоваяСтрока.Владелец       = ВладелецНоменклатуры;
		НоваяСтрока.Идентификатор  = СтрокаТовара.ИдентификаторКонтрагента;
		НоваяСтрока.Номенклатура   = СтрокаТовара.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаТовара.Характеристика;
		НоваяСтрока.Упаковка       = СтрокаТовара.ЕдиницаИзмерения;
		
	КонецЦикла;
	
	РезультатЗапроса = СопоставлениеНоменклатурыКонтрагентов.РезультатЗапросаОднозначноСопоставленнойНоменклатурыКонтрагентаПоИдентификатору(ТаблицаПоиска);
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Товары[ВыборкаЗапроса.НомерСтроки - 1].НоменклатураКонтрагента = ВыборкаЗапроса.НоменклатураКонтрагента;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти