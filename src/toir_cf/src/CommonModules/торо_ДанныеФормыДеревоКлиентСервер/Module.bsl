#Область ПрограммныйИнтерфейс

// Функция - Функция выполняет поиск в коллекции ДанныеФормыДерево элементов ДанныеФормыЭлементДерева 
// в соответствии с заданныой структурой.
//
// Параметры:
//  Родитель							 - ДанныеФормыДерево, ДанныеФормыЭлементДерева - Родитель в котором осуществляем поиск элементов.
//		Для самого родителя если его тип ДанныеФормыЭлементДерева также происходит сравнение со структурой поиска.
//		Если такое поведение не нужно - можно родителя исключить используя параметр ИскатьНачинаяСУровняВкл
//
//  СтруктураПоиска						 - Структура - Структура поиска с которой сравниваются строки коллекции.
//		Ключами структуры являются колонки дерева, значениями - значения полей.
//
//  ИскатьНачинаяСУровняВкл				 - Число, Неопределено - Поиск в дереве осуществляется начиная с указанного уровня, включительно.
//		Уровнем на котором находится родитель считается значение 0, устанавливаемое по умолчанию и при значении Неопределено.
//
//  ИскатьПоУровеньВкл					 - Число, Неопределено - Поиск осуществляется включительно по указанный уровень.
//		Отсчет идет от корня, т.е. родителя, начиная с 0. При значении Неопределено уровень не ограничивается.
//
//  ОграничениеПоКоличествуНайденных	 - Число, Неопределено - В параметре указываем ограничение на количество 
//		найденных строк (например если нужна только одна). Если Неопределено выполняется поиск всех элементов.
// 
// Возвращаемое значение:
//  Массив - Массив найденных элементов ДанныеФормыЭлементДерева
//
Функция НайтиСтроки(
	Родитель,
	Знач СтруктураПоиска,
	Знач ИскатьНачинаяСУровняВкл=Неопределено,
	Знач ИскатьПоУровеньВкл=Неопределено,
	Знач ОграничениеПоКоличествуНайденных=Неопределено) Экспорт
	
	ИскатьНачинаяСУровняВкл = ?(ИскатьНачинаяСУровняВкл=Неопределено,0,ИскатьНачинаяСУровняВкл);
	ИскатьПоУровеньВкл = ?(ИскатьПоУровеньВкл=Неопределено,-1,ИскатьПоУровеньВкл);
	ОграничениеПоКоличествуНайденных = ?(ОграничениеПоКоличествуНайденных=Неопределено,-1,ОграничениеПоКоличествуНайденных);
	
	НайденныеРезультаты = Новый Массив;
	
	Если Не ОграничениеПоКоличествуНайденных = 0 Тогда
		
		Если ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") И ИскатьНачинаяСУровняВкл = 0 Тогда
			Если СравнитьСтрокуСоСтруктуройПоиска(Родитель, СтруктураПоиска) Тогда
				НайденныеРезультаты.Добавить(Родитель);
			КонецЕсли;
		КонецЕсли;
		
		ТекУровень = 0;
		НайтиРекурсивно(
			Родитель,
			СтруктураПоиска,
			ИскатьНачинаяСУровняВкл,
			ИскатьПоУровеньВкл,
			ОграничениеПоКоличествуНайденных,
			ТекУровень+1,
			НайденныеРезультаты,
			Ложь
		);
		
	КонецЕсли;
	
	Возврат НайденныеРезультаты;
	
КонецФункции

// Функция - Функция выполняет поиск в коллекции ДанныеФормыДерево элементов ДанныеФормыЭлементДерева 
// в соответствии с заданными составными условиями. Условия можно объединять в группы И и ИЛИ
//
// Параметры:
//  Родитель							 - ДанныеФормыДерево, ДанныеФормыЭлементДерева - Родитель в котором осуществляем поиск элементов.
//		Для самого родителя если его тип ДанныеФормыЭлементДерева также происходит сравнение со структурой поиска.
//		Если такое поведение не нужно - можно родителя исключить используя параметр ИскатьНачинаяСУровняВкл
//
//  УсловиеПоиска						 - Массив - Условия поиска с которыми сравниваются строки коллекции.
//		Условие создается с помощью Новый_ГруппаИли_Условия() или Новый_ГруппаИ_Условия().
//
//  ИскатьНачинаяСУровняВкл				 - Число, Неопределено - Поиск в дереве осуществляется начиная с указанного уровня, включительно.
//		Уровнем на котором находится родитель считается значение 0, устанавливаемое по умолчанию и при значении Неопределено.
//
//  ИскатьПоУровеньВкл					 - Число, Неопределено - Поиск осуществляется включительно по указанный уровень.
//		Отсчет идет от корня, т.е. родителя, начиная с 0. При значении Неопределено уровень не ограничивается.
//
//  ОграничениеПоКоличествуНайденных	 - Число, Неопределено - В параметре указываем ограничение на количество 
//		найденных строк (например если нужна только одна). Если Неопределено выполняется поиск всех элементов.
// 
// Возвращаемое значение:
//  Массив - Массив найденных элементов ДанныеФормыЭлементДерева
//
Функция НайтиСтрокиПоСоставномуУсловию(Родитель,
	Знач УсловиеПоиска,
	Знач ИскатьНачинаяСУровняВкл=Неопределено,
	Знач ИскатьПоУровеньВкл=Неопределено,
	Знач ОграничениеПоКоличествуНайденных=Неопределено) Экспорт
	
	ИскатьНачинаяСУровняВкл = ?(ИскатьНачинаяСУровняВкл=Неопределено,0,ИскатьНачинаяСУровняВкл);
	ИскатьПоУровеньВкл = ?(ИскатьПоУровеньВкл=Неопределено,-1,ИскатьПоУровеньВкл);
	ОграничениеПоКоличествуНайденных = ?(ОграничениеПоКоличествуНайденных=Неопределено,-1,ОграничениеПоКоличествуНайденных);
	
	НайденныеРезультаты = Новый Массив;
	
	Если Не ОграничениеПоКоличествуНайденных = 0 Тогда
		
		Если ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") И ИскатьНачинаяСУровняВкл = 0 Тогда
			Если СравнитьСтрокуСоСложнымУсловием(Родитель, УсловиеПоиска) Тогда
				НайденныеРезультаты.Добавить(Родитель);
			КонецЕсли;
		КонецЕсли;
		
		ТекУровень = 0;
		НайтиРекурсивно(
			Родитель,
			УсловиеПоиска,
			ИскатьНачинаяСУровняВкл,
			ИскатьПоУровеньВкл,
			ОграничениеПоКоличествуНайденных,
			ТекУровень+1,
			НайденныеРезультаты,
			Истина
		);
		
	КонецЕсли;
	
	Возврат НайденныеРезультаты;
	
КонецФункции

// Функция - Вспомогательная функция для НайтиСтрокиПоСоставномуУсловию() 
//	Возвращает новую группу условия. Добавляются элементы с помощью ДобавитьВГруппуУсловияЭлементИлиГруппу() 
// 
// Возвращаемое значение:
//  Массив - Группа условия
//
Функция Новый_ГруппаИли_Условия() Экспорт
	Группа = Новый Массив(1);
	Группа[0] = "ИЛИ";
	Возврат Группа;
КонецФункции

// Функция - Вспомогательная функция для НайтиСтрокиПоСоставномуУсловию() 
//	Возвращает новую группу условия. Добавляются элементы с помощью ДобавитьВГруппуУсловияЭлементИлиГруппу() 
// 
// Возвращаемое значение:
//  Массив - Группа условия
//
Функция Новый_ГруппаИ_Условия() Экспорт
	Группа = Новый Массив(1);
	Группа[0] = "И";
	Возврат Группа;
КонецФункции

// Функция - Вспомогательная функция для НайтиСтрокиПоСоставномуУсловию() 
//	Возвращает новую группу условия. Добавляются элементы с помощью ДобавитьВГруппуУсловияЭлементИлиГруппу() 
//
// Параметры:
//  ИмяКолонки		 	- Строка - Имя колонки.
//  Значение	 		- Строка - Значение.
//
// Возвращаемое значение:
//  Массив - Группа условия
//
Функция Новый_ЭлементУсловия(ИмяКолонки, Значение) Экспорт
	Элемент = Новый Массив(3);
	Элемент[0] = "ЭЛЕМЕНТ";
	Элемент[1] = ИмяКолонки;
	Элемент[2] = Значение;
	Возврат Элемент;
КонецФункции

 // Процедура - Добавить в группу условия элемент или группу
//
// Параметры:
//  ГруппаУсловия				 - Массив - Группа условия созданная Новый_ГруппаИ_Условия() или Новый_ГруппаИли_Условия()
//  ЭлементИлиГруппаДобавляемая	 - Массив - Группа условия созданная Новый_ГруппаИ_Условия() или Новый_ГруппаИли_Условия()
//		или элемент условия созданный с помощью Новый_ЭлементУсловия(ИмяКолонки, Значение)
//
Процедура ДобавитьВГруппуУсловияЭлементИлиГруппу(ГруппаУсловия, ЭлементИлиГруппаДобавляемая) Экспорт
	ГруппаУсловия.Добавить(ЭлементИлиГруппаДобавляемая);
КонецПроцедуры

// Процедура выполняет упорядочивание строк в табличной части ремонтных работ в соотвествии с тем, 
// в каком порядке они расположены в дереве ремонтных работ на форме.
// 
// Параметры: 
//  ДеревоРемонтныхРабот - ДанныеФормыДерево - дерево формы, которое заполняется из табличной части РемонтныеРаботы.    
//  РемонтныеРаботы - ДанныеФормыКоллекция - табличная часть документа с ремонтными работами.
// 
Процедура УпорядочитьРемонтныеРаботы(ДеревоРемонтныхРабот, РемонтныеРаботы) Экспорт 
	
	СтрокиДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() > 0 Тогда 
		Если СтрокиДерева[0].Свойство("РемонтыОборудования_ID") Тогда 
			НайдСтроки = РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокиДерева[0].РемонтыОборудования_ID));
		ИначеЕсли СтрокиДерева[0].Свойство("Предписание_ID") Тогда 
			НайдСтроки = РемонтныеРаботы.НайтиСтроки(Новый Структура("Предписание_ID", СтрокиДерева[0].Предписание_ID));
		КонецЕсли;
		
		Для каждого Работа ИЗ НайдСтроки Цикл
			РемонтныеРаботы.Удалить(Работа);
		КонецЦикла;
		
		УпорядочитьРемонтныеРаботыРекурсивно(СтрокиДерева, РемонтныеРаботы);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСДеревомФормыРемонтныхРабот

// Процедура обновляет дерево ремонтных работ на форме согласно активному ремонту(мероприятию).
// 
// Параметры: 
//  Форма - ФормаКлиентскогоПриложения - форма, которая в обязательном порядке имеет реквизит "ДеревоРемонтныхРабот",
//		а также объект формы имеет табличную часть "РемонтныеРаботы".    
//  РемонтID - Строка - идентификатор ремонта активной строки формы, по которому строится дерево ремонтных работ.
//
Процедура ОбновитьДеревоРемонтныхРабот(Форма, РемонтID) Экспорт
	
	КоллекцияЭлементовДереваРемонтныхРабот = Форма.ДеревоРемонтныхРабот.ПолучитьЭлементы(); 
	Если КоллекцияЭлементовДереваРемонтныхРабот.Количество() > 0 Тогда
		ПервыйЭлементДерева = КоллекцияЭлементовДереваРемонтныхРабот[0];
		ПервыйЭлементДерева.ПолучитьЭлементы().Очистить();
	Иначе
		ПервыйЭлементДерева = КоллекцияЭлементовДереваРемонтныхРабот.Добавить();
		ПервыйЭлементДерева.РемонтнаяРабота = "Ремонтные работы";	
		ПервыйЭлементДерева.Картинка = 4;
	КонецЕсли;
	
	Если РемонтID = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияДереваРемонтныхРабот(Форма, РемонтID);
				
	СоздатьВетвьДереваРемонтныхРабот(Форма, ПервыйЭлементДерева, ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.ЗаполнятьПроцентВыполненныхРабот Тогда
		
		ОбновитьПроцентыВыполненияВДеревеРемонтныхРабот(Форма.ДеревоРемонтныхРабот);

	КонецЕсли;	
	
	Если ПараметрыЗаполнения.РассчитыватьОпасность Тогда 
		
		ОбновитьПризнакиПовышеннойОпасностиВДеревеРемонтныхРабот(Форма.ДеревоРемонтныхРабот)
		
	КонецЕсли;
	
КонецПроцедуры	

// Процедура обновляет признаки повышенной опасности ремонтных работ в дереве ремонтных работ.
// 
// Параметры: 
//  ДеревоРемонтныхРабот - ДанныеФормыДерево -  реквизит формы, содежащий в себе дерево ремонтных работ.    
// 
Процедура ОбновитьПризнакиПовышеннойОпасностиВДеревеРемонтныхРабот(ДеревоРемонтныхРабот) Экспорт
	
	ЭлементыДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого ПодчиненныйЭлемент Из ЭлементыДерева[0].ПолучитьЭлементы() Цикл
		ПодчиненныйЭлемент.СодержитРаботыПовышеннойОпасности = ЕстьРаботаПовышеннойОпасностиВПодчиненныхЭлементах(ПодчиненныйЭлемент);;
	КонецЦикла;

КонецПроцедуры	

// Процедура обновляет проценты выполнения в дереве ремонтных работ.
// 
// Параметры: 
//  ДеревоРемонтныхРабот - ДанныеФормыДерево - реквизит формы, содежащий в себе дерево ремонтных работ. 
//
Процедура ОбновитьПроцентыВыполненияВДеревеРемонтныхРабот(ДеревоРемонтныхРабот) Экспорт
	
	Для каждого ПодчиненныйЭлемент Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		ДанныеПодчиненных = ДанныеПодчиненныхЭлементовДляРасчетаПроцентаВыполнения(ПодчиненныйЭлемент);
		ПодчиненныйЭлемент.ПроцентВыполненияРабот = 
			?(ДанныеПодчиненных.Количество = 0, ДанныеПодчиненных.Процент, ДанныеПодчиненных.Процент/ДанныеПодчиненных.Количество);
	КонецЦикла;
	
КонецПроцедуры  

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НайтиРекурсивно(
	ДанныеФормыДеревоИлиЭлементДерева,
	СтруктураПоиска,
	ИскатьНачинаяСУровняВкл,
	ИскатьПоУровеньВкл,
	МаксКолвоИскомых,
	Знач ТекУровень,
	ВыхНайденныеРезультаты,
	Сложный)
	
	Если МаксКолвоИскомых >= 0 И ВыхНайденныеРезультаты.Количество() >= МаксКолвоИскомых Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = ДанныеФормыДеревоИлиЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ТекУровень >= ИскатьНачинаяСУровняВкл И (ТекУровень <= ИскатьПоУровеньВкл Или ИскатьПоУровеньВкл = -1) Тогда
			Если Сложный = Ложь Тогда
				Если СравнитьСтрокуСоСтруктуройПоиска(ЭлементДерева, СтруктураПоиска) Тогда
					ВыхНайденныеРезультаты.Добавить(ЭлементДерева);
				КонецЕсли;
			Иначе
				Если СравнитьСтрокуСоСложнымУсловием(ЭлементДерева, СтруктураПоиска) Тогда
					ВыхНайденныеРезультаты.Добавить(ЭлементДерева);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекУровень <= ИскатьПоУровеньВкл Или ИскатьПоУровеньВкл = -1 Тогда
			НайтиРекурсивно(
				ЭлементДерева,
				СтруктураПоиска,
				ИскатьНачинаяСУровняВкл,
				ИскатьПоУровеньВкл,
				МаксКолвоИскомых,
				ТекУровень+1,
				ВыхНайденныеРезультаты,
				Сложный);
				
		КонецЕсли;
		
		Если ВыхНайденныеРезультаты.Количество() >= МаксКолвоИскомых И МаксКолвоИскомых >= 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СравнитьСтрокуСоСтруктуройПоиска(СтрокаДерева, СтруктураПоиска)
	
	флИскомое = Истина;
	Для Каждого КлючЗначение Из СтруктураПоиска Цикл
		Если Не СтрокаДерева[КлючЗначение.Ключ] = КлючЗначение.Значение Тогда
			флИскомое = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат флИскомое;
	
КонецФункции

Функция СравнитьСтрокуСоСложнымУсловием(СтрокаДерева, УсловиеПоиска)
	
	Если УсловиеПоиска[0] = "И" Тогда
		Возврат ВычислитьЗначениеГруппыИ(СтрокаДерева, УсловиеПоиска);
	ИначеЕсли УсловиеПоиска[0] = "ИЛИ" Тогда
		Возврат ВычислитьЗначениеГруппыИЛИ(СтрокаДерева, УсловиеПоиска);
	КонецЕсли;
	
КонецФункции

Функция ВычислитьЗначениеГруппыИ(СтрокаДерева, ГруппаУсловий)
	
	флПодходитПодУсловие = Истина;
	Для Сч = 1 По ГруппаУсловий.ВГраница() Цикл
		Если ГруппаУсловий[Сч][0] = "ЭЛЕМЕНТ" Тогда
			флПодходитПодУсловие = флПодходитПодУсловие И СтрокаДерева[ГруппаУсловий[Сч][1]] = ГруппаУсловий[Сч][2];
		ИначеЕсли ГруппаУсловий[Сч][0] = "И" Тогда
			флПодходитПодУсловие = флПодходитПодУсловие И ВычислитьЗначениеГруппыИ(СтрокаДерева, ГруппаУсловий[Сч]);
		ИначеЕсли ГруппаУсловий[Сч][0] = "ИЛИ" Тогда
			флПодходитПодУсловие = флПодходитПодУсловие И ВычислитьЗначениеГруппыИли(СтрокаДерева, ГруппаУсловий[Сч]);
		КонецЕсли;
		Если флПодходитПодУсловие = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат флПодходитПодУсловие;
	
КонецФункции

Функция ВычислитьЗначениеГруппыИЛИ(СтрокаДерева, ГруппаУсловий)
	
	флПодходитПодУсловие = Ложь;
	Для Сч = 1 По ГруппаУсловий.ВГраница() Цикл
		Если ГруппаУсловий[Сч][0] = "ЭЛЕМЕНТ" Тогда
			флПодходитПодУсловие = СтрокаДерева[ГруппаУсловий[Сч][1]] = ГруппаУсловий[Сч][2];
		ИначеЕсли ГруппаУсловий[Сч][0] = "И" Тогда
			флПодходитПодУсловие = ВычислитьЗначениеГруппыИ(СтрокаДерева, ГруппаУсловий[Сч]);
		ИначеЕсли ГруппаУсловий[Сч][0] = "ИЛИ" Тогда
			флПодходитПодУсловие = ВычислитьЗначениеГруппыИли(СтрокаДерева, ГруппаУсловий[Сч]);
		КонецЕсли;
		Если флПодходитПодУсловие = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат флПодходитПодУсловие;
	
КонецФункции

Процедура УпорядочитьРемонтныеРаботыРекурсивно(СтрокиДерева, РемонтныеРаботы) 
	
	Если СтрокиДерева.Количество() > 0 Тогда
		Для Каждого Строка ИЗ СтрокиДерева Цикл 
			НСтр = РемонтныеРаботы.Добавить(); 	
			ЗаполнитьЗначенияСвойств(НСтр, Строка);
			СтрДерева = Строка.ПолучитьЭлементы();
			УпорядочитьРемонтныеРаботыРекурсивно(СтрДерева, РемонтныеРаботы);			
		КонецЦикла;  
	КонецЕсли;
	
КонецПроцедуры


Функция ПараметрыЗаполненияДереваРемонтныхРабот(Форма, РемонтID)
	
	ПараметрыЗаполнения = Новый Структура;
		
	ПервыйЭлементДерева = Форма.ДеревоРемонтныхРабот.ПолучитьЭлементы()[0];
	
	Если ПервыйЭлементДерева.Свойство("Предписание_ID") Тогда
		СтрокаОтбора = "Предписание_ID";
	Иначе
		СтрокаОтбора = "РемонтыОборудования_ID";
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура(СтрокаОтбора, РемонтID); 
	РемонтныеРаботыПоОтбору = Форма.Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
	
	СсылкиРемонтныхРабот = Новый Массив;
	СоответствиеРемотныхРабот = Новый Соответствие;
	Для Каждого Строка Из РемонтныеРаботыПоОтбору Цикл
		СсылкиРемонтныхРабот.Добавить(Строка.РемонтнаяРабота);  
		
		МассивСтрокПоРодителю = СоответствиеРемотныхРабот.Получить(Строка.Родитель_ID);
		Если МассивСтрокПоРодителю = Неопределено Тогда
			МассивСтрокПоРодителю = Новый Массив;
			МассивСтрокПоРодителю.Добавить(Строка);
			СоответствиеРемотныхРабот.Вставить(Строка.Родитель_ID, МассивСтрокПоРодителю);	
		Иначе
			МассивСтрокПоРодителю.Добавить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	РассчитыватьОпасность = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ФОРассчитыватьОпасность") И Форма.ФОРассчитыватьОпасность;
	
	ПараметрыЗаполнения.Вставить("РемонтID", РемонтID);
	ПараметрыЗаполнения.Вставить("РассчитыватьОпасность", РассчитыватьОпасность);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПроцентВыполненныхРабот", ПервыйЭлементДерева.Свойство("ПроцентВыполненияРабот"));
	ПараметрыЗаполнения.Вставить("СоответствиеРемотныхРабот", СоответствиеРемотныхРабот);
	ПараметрыЗаполнения.Вставить("РеквизитыРемонтныхРабот", торо_Ремонты.РеквизитыДляЗаполненияДереваРемотныхРабот(СсылкиРемонтныхРабот));
	ПараметрыЗаполнения.Вставить("ЗаполнятьТехОперацию", ПервыйЭлементДерева.Свойство("ТехОперация"));
	ПараметрыЗаполнения.Вставить("ЗаполнятьЭтоТехКарта", ПервыйЭлементДерева.Свойство("ЭтоТехКарта"));
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура СоздатьВетвьДереваРемонтныхРабот(Форма, ЭлементДерева, ПараметрыЗаполнения)
	
	СтрокиРемонтныхРабот = ПараметрыЗаполнения.СоответствиеРемотныхРабот.Получить(ЭлементДерева.ID);
	
	Если СтрокиРемонтныхРабот = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаРемонтныхРабот Из СтрокиРемонтныхРабот Цикл	
		
		НовыйЭлементДерева = ЭлементДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлементДерева, СтрокаРемонтныхРабот);
		
		РеквизитыРемонтнойРаботы = ПараметрыЗаполнения.РеквизитыРемонтныхРабот.Получить(НовыйЭлементДерева.РемонтнаяРабота);
		//НовыйЭлементДерева.Картинка = ?(РеквизитыРемонтнойРаботы = Неопределено, Неопределено, РеквизитыРемонтнойРаботы.ИндексКартинки);
		
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НовыйЭлементДерева);
													
		НовыйЭлементДерева.ID_ПараллельнойОперации = СтрокаРемонтныхРабот.ID_ПараллельнойОперации;
													
		Если ПараметрыЗаполнения.ЗаполнятьТехОперацию Тогда
			НовыйЭлементДерева.ТехОперация = СтрокаРемонтныхРабот.РемонтнаяРабота;
		КонецЕсли;
		
		Если ПараметрыЗаполнения.ЗаполнятьЭтоТехКарта Тогда
			НовыйЭлементДерева.ЭтоТехКарта = 
				ТипЗнч(НовыйЭлементДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт");
		КонецЕсли;
		
		Если ПараметрыЗаполнения.РассчитыватьОпасность Тогда
			НовыйЭлементДерева.СодержитРаботыПовышеннойОпасности = 
				?(РеквизитыРемонтнойРаботы = Неопределено, Неопределено, РеквизитыРемонтнойРаботы.РаботаПовышеннойОпасности);
		КонецЕсли;
				
		СоздатьВетвьДереваРемонтныхРабот(Форма, НовыйЭлементДерева, ПараметрыЗаполнения); 
	КонецЦикла;	
	
КонецПроцедуры

Функция ДанныеПодчиненныхЭлементовДляРасчетаПроцентаВыполнения(ЭлементДерева)

	КоличествоПодчиненных = 0;
	ПроцентПодчиненных = 0;
	
	Для каждого ПодчиненныйЭлемент Из ЭлементДерева.ПолучитьЭлементы() Цикл
		
		Если ТипЗнч(ПодчиненныйЭлемент.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			ДанныеПодчиненных = Новый Структура("Количество, Процент", ПодчиненныйЭлемент.Количество, ПодчиненныйЭлемент.ПроцентВыполненияРабот);	
		Иначе
			ДанныеПодчиненных = ДанныеПодчиненныхЭлементовДляРасчетаПроцентаВыполнения(ПодчиненныйЭлемент);
		КонецЕсли; 
		
		КоличествоПодчиненных = КоличествоПодчиненных + ДанныеПодчиненных.Количество; 
		ПроцентПодчиненных = ПроцентПодчиненных + ДанныеПодчиненных.Процент * ДанныеПодчиненных.Количество;
	КонецЦикла;
	
	ЭлементДерева.ПроцентВыполненияРабот = ?(КоличествоПодчиненных = 0, 100, ПроцентПодчиненных / КоличествоПодчиненных);
	
	Результат = Новый Структура("Количество, Процент", ЭлементДерева.Количество, ЭлементДерева.ПроцентВыполненияРабот);
	
	Возврат Результат;	

КонецФункции

// Функция для дерева ремонтных работ проверяет, есть ли в подчиненных элементах работа с повышенной опасностью и в 
// зависимости от этого устанавливает значение реквизита "СодержитРаботыПовышеннойОпасности" в дереве.
// 
// Параметры: 
//  ЭлементДерева - ДанныеФормыЭлементДерева - элемент дерева, подчиненные элементы которого необходимо проверить.    
//  
// Возвращаемое значение:
//	Булево - если ли работа с повышенной опасностью
//
Функция ЕстьРаботаПовышеннойОпасностиВПодчиненныхЭлементах(ЭлементДерева) 
	
	ЕстьРаботаПовышеннойОпасности = Ложь;
	
	Для каждого ПодчиненныйЭлемент Из ЭлементДерева.ПолучитьЭлементы() Цикл 
		
		Если ТипЗнч(ПодчиненныйЭлемент.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ПодчиненныйЭлемент.СодержитРаботыПовышеннойОпасности = ЕстьРаботаПовышеннойОпасностиВПодчиненныхЭлементах(ПодчиненныйЭлемент);	
		Иначе
            ЕстьРаботаПовышеннойОпасности = ЕстьРаботаПовышеннойОпасности ИЛИ ПодчиненныйЭлемент.СодержитРаботыПовышеннойОпасности;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРаботаПовышеннойОпасности;
	
КонецФункции

#КонецОбласти