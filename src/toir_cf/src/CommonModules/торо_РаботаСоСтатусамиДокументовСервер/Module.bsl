////////////////////////////////////////////////////////////////////////////////
// торо_РаботаСоСтатусамиДокументовСервер: методы, для работы со статусами документов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура - Установить статус документа.
// Процедура предназначена для установки статуса документа. 
//
// Параметры:
//  ИзменяемыйДокумент - ДокументСсылка.торо_ВыявленныеДефекты,
//				ДокументСсылка.торо_ВнешнееОснованиеДляРабот,
//				ДокументСсылка.торо_ЗаявкаНаРемонт, 
//				ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//				ДокументСсылка.торо_НарядНаРегламентноеМероприятие - Ссылка на документ для которого требуется установить статус.
//  Регистратор - ДокументСсылка.торо_АктОВыполненииЭтапаРабот,
//					ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия,
//					ДокументСсылка.торо_ЗаявкаНаРемонт, 
//					ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//					ДокументСсылка.тоо_ЗакрытиеЗаявокИРемонтов - Ссылка на документ, которым устанавливается статус.
//  СтатусДокумента - ПеречислениеСсылка.торо_СтатусыДокументов - Статус устанавливаемый для документа.
//
Процедура УстановитьСтатусДокумента(ИзменяемыйДокумент, Регистратор, СтатусДокумента) Экспорт
	
	НаборЗаписей = РегистрыСведений.торо_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИзменяемыйДокумент.Установить(ИзменяемыйДокумент);
	НаборЗаписей.Прочитать();
	
	УдалитьЗаписиСтатусовВНабореЗаписейПоДокументуИсточнику(НаборЗаписей, Регистратор);
	
	Запись                    = НаборЗаписей.Добавить();
	Запись.ИзменяемыйДокумент = ИзменяемыйДокумент;
	Запись.ДокументИсточник   = Регистратор;
	Запись.Период 		      = Регистратор.Дата;
	Запись.Статус 			  = СтатусДокумента;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Изменить статусы документов ремонта.
// Процедура предназначена для изменения статусов документов по ремонту проводимого документа.
//
// Параметры:
//  Регистратор - 	ДокументСсылка.торо_ЗаявкаНаРемонт, 
//							ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//							ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия,
//							ДокументСсылка.торо_АктОВыполненииЭтапаРабот,
//							ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов - Ссылка на документ меняющий статус своих документов оснований.
//  ОтменаПроведения - Булево - Признак отмены проведения документа.
//
Процедура ИзменитьСтатусыДокументовРемонта(Регистратор, ОтменаПроведения = Ложь) Экспорт

	МассивID = ПолучитьМассивIDРемонтовРегистратора(Регистратор);
	ДокументыПоРемонтам = ПолучитьДокументыПоРемонтам(Регистратор, МассивID);
	
	СтруктураДокументов = Новый Структура;
	Для каждого Стр Из ДокументыПоРемонтам Цикл
		СтруктураДокументов.Вставить("Атрибут" + Формат(ДокументыПоРемонтам.Индекс(Стр), "ЧН=0; ЧГ=0"), Стр.ДокументПоРемонту);
	КонецЦикла;	
	ТаблицаПорядкаСтатусов = торо_РаботаСоСтатусамиДокументовПовтИсп.ПолучитьТаблицуПорядкаСтатусовДокументов(СтруктураДокументов);
		
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаДляИзмененияСтатусаДокументов();
	Запрос.УстановитьПараметр("ТаблицаПорядкаСтатусов",		ТаблицаПорядкаСтатусов);
	Запрос.УстановитьПараметр("ТаблицаДокументовИРемонтов",	ДокументыПоРемонтам);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументИсточник = ?(ОтменаПроведения, Выборка.ДокументИсточник, Регистратор);
		УстановитьСтатусДокумента(Выборка.ИзменяемыйДокумент, ДокументИсточник, Выборка.УстанавливаемыйСтатус);
	КонецЦикла;
	
КонецПроцедуры

// Функция - Добавить статус в заголовок формы
//
// Параметры:
//  Заголовок - Строка - Заголовок формы.
//  Форма - ФормаКлиентскогоПриложения - Форма которой в заголовок следует добавить статус документа.
//
// Возвращаемое значение:
//  Строка - заголовок формы.
Функция ДобавитьСтатусВЗаголовокФормы(Заголовок, Форма) Экспорт
	
	Ссылка = Форма.Объект.Ссылка;
		
	ТекущийСтатусДокумента = ПолучитьТекущийСтатусДокумента(Ссылка);
	
	Если ТекущийСтатусДокумента <> Неопределено Тогда
		Возврат Заголовок + " [" + Строка(ТекущийСтатусДокумента) + "]";
	Иначе
		Возврат Заголовок;
	КонецЕсли;
			
КонецФункции

// Процедура - Отмена проведения.
//	Необходимо вызывать при обработке удаления проведения для изменения статуса документа и статусов исполнителей.
//
// Параметры:
//  Регистратор			 - 	ДокументСсылка.торо_ЗаявкаНаРемонт, 
//							ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//							ДокументСсылка.торо_АктОВыполненииЭтапаРабот,
//							ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов - Ссылка на документ удаляющий свои движения. 
Процедура ОтменаПроведения(Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыДокументов.Период КАК Период,
	               |	торо_СтатусыДокументов.ИзменяемыйДокумент КАК ИзменяемыйДокумент,
	               |	торо_СтатусыДокументов.ДокументИсточник КАК ДокументИсточник
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыДокументов КАК торо_СтатусыДокументов
	               |ГДЕ
	               |	торо_СтатусыДокументов.ДокументИсточник = &ДокументИсточник";
	
	Запрос.УстановитьПараметр("ДокументИсточник", Регистратор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.торо_СтатусыДокументов.СоздатьМенеджерЗаписи();
		Запись.ИзменяемыйДокумент = Выборка.ИзменяемыйДокумент;
		Запись.Период = Выборка.Период;
		Запись.Удалить();
	КонецЦикла;
	
	ОткатСтатусаРемонтаВЗаявкеПриОтменеПроведения(Регистратор);	
	
КонецПроцедуры

// Процедура - Изменить статусы документов при отмене проведения.
//	Необходимо вызывать при обработке удаления проведения для изменения статуса документов по ремонту.
//
// Параметры:
//		Источник - ДокументОбъект - документ, у которого удаляется проведение.
//
Процедура ИзменитьСтатусыДокументовПриОтменеПроведения(Источник) Экспорт
	
	Источник.Движения.торо_СтатусыРемонтов.Записать();
	ИзменитьСтатусыДокументовРемонта(Источник.Ссылка, Истина);
	
КонецПроцедуры

// Функция - Получить текущий статус документа
//
// Параметры:
//  Ссылка	 -	ДокументСсылка.торо_ВыявленныеДефекты,
//				ДокументСсылка.торо_ВнешнееОснованиеДляРабот,
//				ДокументСсылка.торо_ЗаявкаНаРемонт, 
//				ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//				ДокументСсылка.торо_НарядНаРегламентноеМероприятие - Ссылка на документ для которого требуется получить статус.
// Возвращаемое значение:
//  ПеречислениеСсылка.торо_СтатусыДокументов, Неопределено - Текущий статус документа, 
//      либо Неопределено если получить не удалось.
Функция ПолучитьТекущийСтатусДокумента(Ссылка) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	торо_СтатусыДокументовСрезПоследних.Период КАК Период,
	                |	торо_СтатусыДокументовСрезПоследних.ДокументИсточник КАК ДокументИсточник,
	                |	торо_СтатусыДокументовСрезПоследних.ИзменяемыйДокумент КАК ИзменяемыйДокумент,
	                |	торо_СтатусыДокументовСрезПоследних.Статус КАК Статус
	                |ИЗ
	                |	РегистрСведений.торо_СтатусыДокументов.СрезПоследних(, ИзменяемыйДокумент = &Документ) КАК торо_СтатусыДокументовСрезПоследних";
					
	Запрос.УстановитьПараметр("Документ", Ссылка);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура - Установить вручную статус для ремонта в заявке.
//
// Параметры:
//		ДокументСсылка - ДокументСсылка - Ссылка на документ, по которому устанавливается статус.
//		ИДРемонта - Строка - Идентификатор ремонта, для которого устанавливается статус.
//		Статус - ПеречислениеСсылка.торо_СтатусыРемонтов - Устанавливаемый статус.
//		ВремяУстановки - Дата - Время, когда статус был установлен.
//		Регистратор - ДокументСсылка - Устанавливающий статус документ. 
//
Процедура УстановитьВручнуюСтатусДляРемонтаВЗаявке(Знач ДокументСсылка, Знач ИДРемонта, Знач Статус, Знач ВремяУстановки = Неопределено, Регистратор = Неопределено) Экспорт
	
	Если ВремяУстановки = Неопределено Тогда
		ВремяУстановки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТабИДРемонтов = Новый ТаблицаЗначений;
	ТабИДРемонтов.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	НСтр = ТабИДРемонтов.Добавить();
	НСтр.ID = ИДРемонта;
		
	НачатьТранзакцию();
	УстановитьУправляемыеБлокировкиНаСтатусыРемонтов(ДокументСсылка);
	
	СоответствиеТекущихСтатусов = ДанныеСтатусовРемонтов(ТабИДРемонтов);
	
	ПараметрыДляПроверки = ПолучитьСтруктуруПараметровДляПроверкиСменыСтатусаРемонта();
	ПараметрыДляПроверки.Документ = ДокументСсылка;
	ПараметрыДляПроверки.ДокументИсточник = Регистратор;
	ПараметрыДляПроверки.ПроверятьСтатусДокумента = Ложь;
	ПараметрыДляПроверки.ПолучатьДанныеТекущегоСтатуса = Ложь;
	
	флЗаписывать = Ложь;
	
	НЗСтатусыРемонта = РегистрыСведений.торо_СтатусыРемонтов.СоздатьНаборЗаписей();
	НЗСтатусыРемонта.Отбор.Регистратор.Установить(Регистратор);
	НЗСтатусыРемонта.Прочитать();

	Для Каждого Строка Из ТабИДРемонтов Цикл
		
		УстанавливаемыйСтатус = Статус;
		ДанныеТекущегоСтатуса = СоответствиеТекущихСтатусов[Строка.ID];
		
		ПараметрыДляПроверки.ИДРемонта = Строка.ID;
		ПараметрыДляПроверки.УстанавливаемыйСтатус = УстанавливаемыйСтатус;
		ПараметрыДляПроверки.ДанныеТекущегоСтатуса = ДанныеТекущегоСтатуса;
		ПараметрыДляПроверки.ИгнорироватьБлокирующиеСтатусы = Ложь;
		
		МожноУстановитьСтатус = ПроверитьВозможностьУстановкиСтатусаДляРемонта(ПараметрыДляПроверки, ТабИДРемонтов);
		
		Если МожноУстановитьСтатус Тогда
			
			флЗаписывать = Истина;
			
			Если ДанныеТекущегоСтатуса <> Неопределено И ДанныеТекущегоСтатуса.Период >= ВремяУстановки Тогда
				ВремяУстановки = ДанныеТекущегоСтатуса.Период + 1;
			КонецЕсли;
			
			Запись = НЗСтатусыРемонта.Добавить();
			Запись.Регистратор = Регистратор;
			Запись.IDРемонта = Строка.ID;
			Запись.Период = ВремяУстановки;
			Запись.Статус = УстанавливаемыйСтатус;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если флЗаписывать Тогда
		НЗСтатусыРемонта.Записать();
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Функция - Установить вручную статус для ремонта по исполнителю в заявке.
//
// Параметры:
//		ЗаявкаСсылка - ДокументСсылка.торо_ЗаявкаНаРемонт - Ссылка на заявку, по которой устанавливается статус.
//		ИДРемонта - Строка, Массив из Строка - Идентификатор(ы) ремонта, для которого устанавливается статус.
//		Исполнитель - СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Контрагенты - Исполнитель ремонта.
//		УточнениеИсполнителя - СправочникСсылка.торо_РемонтныеБригады, СправочникСсылка.ДоговорыКонтрагентов - Бригада	или договор.
//		Статус - ПеречислениеСсылка.торо_СтатусыРемонтов - Устанавливаемый статус.
//		ВремяУстановки - Дата - Время, когда статус был установлен.
//		Пользователь - СправочникСсылка.Пользователи - Устанавливающий статус пользователь.
//		КомментарийКСтатусу - Строка - Описание причины, по которой статус был установлен, доп. информация.
// 
// Возвращаемое значение:
//		Массив - Массив(Структура) - где: 
//			*ИДРемонта               - Строка - идентификатор ремонта.
//			*Успешно                 - Булево - успешность установки.
//			*СтатусУстановлен        - Булево - успешность установки статуса.
//			*ОписаниеРезультатаТекст - Строка - описание причины не установки статуса.
//
Функция УстановитьВручнуюСтатусДляРемонтаПоИсполнителюВЗаявке(Знач ЗаявкаСсылка, Знач ИДРемонта, Знач Исполнитель, Знач УточнениеИсполнителя, Знач Статус, Знач ВремяУстановки = Неопределено, Знач КомментарийКСтатусу = "", Знач Пользователь = Неопределено) Экспорт
	
	РезультатОбработкиРемонта = Новый Структура("ИДРемонта, Успешно, ОписаниеРезультатаТекст", ИДРемонта, Ложь, "");
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ВремяУстановки = Неопределено Тогда
		ВремяУстановки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачатьТранзакцию();
	
	УстановитьУправляемыеБлокировкиНаСтатусыРемонтов(ЗаявкаСсылка, ЗаявкаСсылка, ИДРемонта);
	ТаблицаТекущихСтатусовПоИсполнителям = ДанныеСтатусовРемонтовЗаявкиПоИсполнителям(ЗаявкаСсылка, ИДРемонта, Исполнитель, УточнениеИсполнителя);
	
	ДанныеТекущегоСтатусаПоИсполнителю = Неопределено;
	
	НайденныеСтроки = ТаблицаТекущихСтатусовПоИсполнителям.НайтиСтроки(Новый Структура("ИДРемонта, Исполнитель, УточнениеИсполнителя", ИДРемонта, Исполнитель, УточнениеИсполнителя));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		ДанныеТекущегоСтатусаПоИсполнителю = НайденныеСтроки[0];
	КонецЕсли;
	
	ПараметрыДляПроверки = ПолучитьСтруктуруПараметровДляПроверкиСменыСтатусаРемонта();
	ПараметрыДляПроверки.Документ = ЗаявкаСсылка;
	ПараметрыДляПроверки.ИДРемонта = ИДРемонта;
	ПараметрыДляПроверки.Подразделение = Исполнитель;
	ПараметрыДляПроверки.Бригада = УточнениеИсполнителя;
	ПараметрыДляПроверки.УстанавливаемыйСтатус = Статус;
	ПараметрыДляПроверки.ПолучатьДанныеТекущегоСтатусаПоИполнителю = Ложь;
	ПараметрыДляПроверки.ДанныеТекущегоСтатусаПоИсполнителю = ДанныеТекущегоСтатусаПоИсполнителю;
	
	МожноИзменитьСтатус = ПроверитьВозможностьУстановкиСтатусаДляРемонта(ПараметрыДляПроверки, ЗаявкаСсылка.РемонтыОборудования.Выгрузить(, "ID"), РезультатОбработкиРемонта.ОписаниеРезультатаТекст);
	
	Если МожноИзменитьСтатус Тогда
		
		Если ДанныеТекущегоСтатусаПоИсполнителю <> Неопределено И ДанныеТекущегоСтатусаПоИсполнителю.Период >= ВремяУстановки Тогда
			ВремяУстановки = ДанныеТекущегоСтатусаПоИсполнителю.Период + 1;
		КонецЕсли;
		
		Запись = РегистрыСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СоздатьМенеджерЗаписи();
		Запись.ЗаявкаНаРемонт = ЗаявкаСсылка;
		Запись.ИДРемонта = ИДРемонта;
		Запись.Исполнитель = Исполнитель;
		Запись.УточнениеИсполнителя = УточнениеИсполнителя;
		Запись.Период = ВремяУстановки;
		Запись.Статус = Статус;
		Запись.КомментарийКСтатусу = КомментарийКСтатусу;
		Запись.Пользователь = Пользователь;
		Запись.Записать(Истина);
		
		РезультатОбработкиРемонта.Успешно = Истина;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат РезультатОбработкиРемонта;
	
КонецФункции

// Проверяет, нужно ли изменить статус ремонта после изменения статуса у одного из исполнителей.
// При необходимости выполняет изменение.
//
// Параметры:
//		Заявка - ДокументСсылка.торо_ЗаявкаНаРемонт - Ссылка на заявку, по которой проверяется статус.
//		ИДРемонта - Строка - Идентификатор ремонта, для которого проверяется статус.
//
Процедура ОбновитьСтатусРемонтаВЗаявкеПоСтатусамИсполнителей(Заявка, ИДРемонта) Экспорт
	
	Если НЕ ТипЗнч(Заявка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТекущихСтатусовРемонтов = ДанныеСтатусовРемонтов(Заявка.РемонтыОборудования.Выгрузить(, "ID"), ИДРемонта);
	ДанныеТекущегоСтатуса = СоответствиеТекущихСтатусовРемонтов[ИДРемонта];
	
	Если ДанныеТекущегоСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПриоритетов = торо_РаботаСоСтатусамиДокументовПовтИсп.ПолучитьТаблицуПриоритетовСтатусовРемонта();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПриоритетов.Статус КАК Статус,
	               |	ТаблицаПриоритетов.Приоритет КАК Приоритет
	               |ПОМЕСТИТЬ ТаблицаПриоритетов
	               |ИЗ
	               |	&ТаблицаПриоритетов КАК ТаблицаПриоритетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.ИДРемонта КАК ИДРемонта,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Исполнитель КАК Исполнитель,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.УточнениеИсполнителя КАК УточнениеИсполнителя,
	               |	ВЫБОР
	               |		КОГДА торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.ВПути)
	               |				ИЛИ торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.Приостановлен)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.ВРаботе)
	               |		ИНАЧЕ торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Статус
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыПоИсполнителям
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СрезПоследних(
	               |			,
	               |			ЗаявкаНаРемонт = &ЗаявкаНаРемонт
	               |				И ИДРемонта = &ИДРемонта) КАК торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ТаблицаПриоритетов.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_МаксимальныйПриоритет
	               |ИЗ
	               |	ТаблицаПриоритетов КАК ТаблицаПриоритетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатусыПоИсполнителям КАК ВТ_СтатусыПоИсполнителям
	               |		ПО ТаблицаПриоритетов.Статус = ВТ_СтатусыПоИсполнителям.Статус
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПриоритетов.Статус КАК Статус,
	               |	ТаблицаПриоритетов.Приоритет КАК Приоритет
	               |ИЗ
	               |	ТаблицаПриоритетов КАК ТаблицаПриоритетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныйПриоритет КАК ВТ_МаксимальныйПриоритет
	               |		ПО ТаблицаПриоритетов.Приоритет = ВТ_МаксимальныйПриоритет.Приоритет";
	
	Запрос.УстановитьПараметр("ТаблицаПриоритетов", ТаблицаПриоритетов);
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", Заявка);
	Запрос.УстановитьПараметр("ИДРемонта", ИДРемонта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтатусРемонтаДляСмены = Выборка.Статус;
	
	Если СтатусРемонтаДляСмены = ДанныеТекущегоСтатуса.Статус Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыДляПроверки = ПолучитьСтруктуруПараметровДляПроверкиСменыСтатусаРемонта();
	ПараметрыДляПроверки.Документ = Заявка;
	ПараметрыДляПроверки.ИДРемонта = ИДРемонта;
	ПараметрыДляПроверки.УстанавливаемыйСтатус = СтатусРемонтаДляСмены;

	ПараметрыДляПроверки.ПроверятьСтатусДокумента = Ложь;
	ПараметрыДляПроверки.ПолучатьДанныеТекущегоСтатуса = Ложь;
	ПараметрыДляПроверки.ДанныеТекущегоСтатуса = ДанныеТекущегоСтатуса;
	ПараметрыДляПроверки.ПолучатьДанныеТекущегоСтатусаПоИполнителю = Ложь;
	ПараметрыДляПроверки.ДанныеТекущегоСтатусаПоИсполнителю = Неопределено;
	
	Если ПроверитьВозможностьУстановкиСтатусаДляРемонта(ПараметрыДляПроверки, Заявка.РемонтыОборудования.Выгрузить(, "ID")) Тогда
		
		Регистратор = ПолучитьДокументИзмененияСтатусаРемонта(ИДРемонта, СтатусРемонтаДляСмены);
		
		НаборЗаписей = РегистрыСведений.торо_СтатусыРемонтов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор.Ссылка);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей.Добавить();
		Запись.IDРемонта = ИДРемонта;
		Запись.Период = Регистратор.Дата;
		Запись.Статус = СтатусРемонтаДляСмены;
		Запись.Регистратор = Регистратор.Ссылка;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Установить статус ремонтов при проведении документа
//
// Параметры:
//		Источник - ДокументОбъект - документ, который проводится.
//
Процедура УстановитьСтатусРемонтовПриПроведении(Источник) Экспорт
	
	ДокументСсылка = Источник.Ссылка;
    ВремяУстановки = Источник.Дата;
	
	Статус = Перечисления.торо_СтатусыРемонтов.Зарегистрирован;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ТабИДРемонтов = Источник.ОбследованноеОборудование.Выгрузить(, "ID");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ТабИДРемонтов = Источник.СписокДефектов.Выгрузить(, "ID");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") 
	  ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		Если ДокументСсылка.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
			ТабИДРемонтов = Источник.ПланРемонтов.Выгрузить(Новый Структура("Отменен", Истина), "ID");
			Статус = Перечисления.торо_СтатусыРемонтов.Отменен;
		Иначе
			ТабИДРемонтов = Источник.ПланРемонтов.Выгрузить(, "ID");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ТабИДРемонтов = Источник.РемонтыОборудования.Выгрузить(, "ID");
		Статус = Перечисления.торо_СтатусыРемонтов.ЗапланированоУстранение;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
		ТабИДРемонтов = Источник.ЗакрываемыеРемонты.Выгрузить(, "ID, Перенесен");
		Статус = Перечисления.торо_СтатусыРемонтов.Отменен;		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ТабИДРемонтов = Источник.РегламентныеМероприятия.Выгрузить(, "ID");
		Статус = Перечисления.торо_СтатусыРемонтов.ВРаботе;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ТабИДРемонтов = Источник.Мероприятия.Выгрузить(, "ID, ЗавершитьРемонт");
		Статус = Перечисления.торо_СтатусыРемонтов.ВРаботе;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда 
		ТабИДРемонтов = Источник.РемонтыОборудования.Выгрузить(, "ID");
		Статус = Перечисления.торо_СтатусыРемонтов.ВРаботе;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ТабИДРемонтов = Источник.РемонтыОборудования.Выгрузить(, "ID, ЗавершитьРемонт");
		Статус = Перечисления.торо_СтатусыРемонтов.ВРаботе;
	КонецЕсли;
	
	УстановитьУправляемыеБлокировкиНаСтатусыРемонтов(ДокументСсылка);
	
	СоответствиеТекущихСтатусов = ДанныеСтатусовРемонтов(ТабИДРемонтов);
	
	ПараметрыДляПроверки = ПолучитьСтруктуруПараметровДляПроверкиСменыСтатусаРемонта();
	ПараметрыДляПроверки.Документ = ДокументСсылка;
	ПараметрыДляПроверки.ДокументИсточник = Источник.Ссылка;
	ПараметрыДляПроверки.ПроверятьСтатусДокумента = Ложь;
	ПараметрыДляПроверки.ПолучатьДанныеТекущегоСтатуса = Ложь;

	НЗСтатусыРемонта = РегистрыСведений.торо_СтатусыРемонтов.СоздатьНаборЗаписей();
	НЗСтатусыРемонта.Отбор.Регистратор.Установить(ДокументСсылка);
	НЗСтатусыРемонта.Прочитать();
	
	УдалитьЗаписиСтатусовВНабореЗаписейПоДокументуИсточнику(НЗСтатусыРемонта, Источник.Ссылка);
	
	Для Каждого Строка Из ТабИДРемонтов Цикл
		
		ДанныеТекущегоСтатуса = СоответствиеТекущихСтатусов[Строка.ID];
		
		УстанавливаемыйСтатус = Статус;
		Если ТабИДРемонтов.Колонки.Найти("Перенесен") <> Неопределено И Строка.Перенесен Тогда
			УстанавливаемыйСтатус = Перечисления.торо_СтатусыРемонтов.Зарегистрирован;
		КонецЕсли;
		Если ТабИДРемонтов.Колонки.Найти("ЗавершитьРемонт") <> Неопределено И Строка.ЗавершитьРемонт Тогда
			УстанавливаемыйСтатус = Перечисления.торо_СтатусыРемонтов.Выполнен;
		КонецЕсли;
		
		ПараметрыДляПроверки.ИДРемонта = Строка.ID;
		ПараметрыДляПроверки.УстанавливаемыйСтатус = УстанавливаемыйСтатус;
		ПараметрыДляПроверки.ДанныеТекущегоСтатуса = ДанныеТекущегоСтатуса;
		
		МожноСменитьСтатус = ПроверитьВозможностьУстановкиСтатусаДляРемонта(ПараметрыДляПроверки, ТабИДРемонтов);
		
		Если МожноСменитьСтатус Тогда
			Запись = НЗСтатусыРемонта.Добавить();
			Запись.Регистратор = ДокументСсылка;
			Запись.IDРемонта = Строка.ID;
			Запись.Период = ВремяУстановки;
			Запись.Статус = УстанавливаемыйСтатус;
		КонецЕсли;
		
	КонецЦикла;

	НЗСтатусыРемонта.Записать(Истина);
	
	ЗаявкиНаРемонт = ПолучитьЗаявки(ДокументСсылка);
	Для каждого Заявка Из ЗаявкиНаРемонт Цикл
		УстановитьСтатусыДляИсполнителейПриПроведенииДокумента(Источник, Заявка, Статус, СоответствиеТекущихСтатусов);
	КонецЦикла;
	
КонецПроцедуры

// Функция - Обработка события из мобильного приложения.
//
// Параметры:
//  ДатаВремяСобытия - Дата - Дата и время события как оно было записано в МП.
//  ИнформацияСобытия - Структура - Структура со свойствами:
//		* ГУИДЗаявки - Идентификатор заявки (из ссылки)
//		* ИДРемонта - Идентификатор конкретного ремонта
//		* Статус - Был установлен статус
//		* Комментарий - Примечание при установке статуса.
//  ТипСобытия - Строка - Имя события.
//  ДополнительныеПараметры - Структура - Дополнительные паарметры для обработки события.
// 
// Возвращаемое значение:
//  Структура - ИДРемонта, Успешно, СтатусУстановлен, ОписаниеРезультатаТекст.
//
Функция ОбработкаСобытияИзМобильногоПриложения(ДатаВремяСобытия, ИнформацияСобытия, ТипСобытия, ДополнительныеПараметры) Экспорт
	
	
	Если ТипСобытия = "ИзменениеФункции" Тогда
		
		СтруктураРезультат = Новый Структура("Успешно, ОписаниеРезультатаТекст", Ложь, "");
		
		УстановитьПривилегированныйРежим(Истина);
		
		Узел = ПланыОбмена.mobileBrigades.НайтиПоРеквизиту("ИДМобильногоУстройства", ДополнительныеПараметры.ИДУстройства);
		Если НЕ ЗначениеЗаполнено(Узел) Тогда
			СтруктураРезультат.Успешно = Ложь;
			СтруктураРезультат.ОписаниеРезультатаТекст = "Не найден узел обмена";
		Иначе
			ОбъектУзла = Узел.ПолучитьОбъект();
			ОбъектУзла.ДатаПоследнегоСоединения = ДатаВремяСобытия;
			
			Если НЕ ИнформацияСобытия.ИмяПользователя = Узел.ПоследнийПользователь Тогда
				ОбъектУзла.ПоследнийПользователь = ИнформацияСобытия.ИмяПользователя;
			КонецЕсли;
			
			Если ИнформацияСобытия.ТипФункции = "ИспользоватьЗаявки" Тогда
				ОбъектУзла.ИспользоватьЗаявки = ИнформацияСобытия.ЗначениеФункции;
			ИначеЕсли ИнформацияСобытия.ТипФункции = "ИспользоватьРегламентныеМероприятия" Тогда 
				ОбъектУзла.ИспользоватьРегламентныеМероприятия = ИнформацияСобытия.ЗначениеФункции;
			КонецЕсли;
			
			Попытка
				ОбъектУзла.Записать();
				СтруктураРезультат.Успешно = Истина;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
				Метаданные.WebСервисы.ExchangeMobileBrigades,,ОписаниеОшибки);
				
				СтруктураРезультат.Успешно = Ложь;
				СтруктураРезультат.ОписаниеРезультатаТекст = ОписаниеОшибки;
			КонецПопытки;
			
			Возврат СтруктураРезультат;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		ЗаявкаСсылка = Документы.торо_ЗаявкаНаРемонт.ПолучитьСсылку(Новый УникальныйИдентификатор(ИнформацияСобытия.ГУИДЗаявки));
		
		Бригада = ДополнительныеПараметры.Бригада;
		Подразделение = ДополнительныеПараметры.Подразделение;
		
		ЭтоСтатусВПути = Ложь;
		Если ИнформацияСобытия.Статус = "ВРаботе" Тогда
			Статус = Перечисления.торо_СтатусыРемонтов.ВРаботе;
		Иначе
			Статус = Перечисления.торо_СтатусыРемонтов[ИнформацияСобытия.Статус];
			ЭтоСтатусВПути = Статус = Перечисления.торо_СтатусыРемонтов.ВПути;
		КонецЕсли;
		
		Если ИнформацияСобытия.Статус = "ВРаботе" ИЛИ ИнформацияСобытия.Статус = "Приостановлен" Тогда
			СтатусДокумента = Перечисления.торо_СтатусыДокументов.ВРаботе;
		ИначеЕсли ИнформацияСобытия.Статус = "ОтказИсполнителя" ИЛИ ИнформацияСобытия.Статус = "ОтказПодразделения" Тогда
			СтатусДокумента = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
		ИначеЕсли НЕ ЭтоСтатусВПути Тогда
			СтатусДокумента = Перечисления.торо_СтатусыДокументов[ИнформацияСобытия.Статус];
		КонецЕсли;
		
		СтруктураРезультат = УстановитьВручнуюСтатусДляРемонтаПоИсполнителюВЗаявке(
		ЗаявкаСсылка, ИнформацияСобытия.ИДРемонта, Подразделение, Бригада, Статус, ДатаВремяСобытия, ИнформацияСобытия.Комментарий);
		
		Если СтруктураРезультат.Успешно Тогда
			ОбновитьСтатусРемонтаВЗаявкеПоСтатусамИсполнителей(ЗаявкаСсылка, ИнформацияСобытия.ИДРемонта);
			Если НЕ ЭтоСтатусВПути Тогда
				УстановитьВручнуюСтатусДокумента(ЗаявкаСсылка, ЗаявкаСсылка, СтатусДокумента,, ДатаВремяСобытия);
				Если СтатусДокумента = Перечисления.торо_СтатусыДокументов.ВРаботе Тогда
					МассивIDРемонтов = Новый Массив();
					МассивIDРемонтов.Добавить(ИнформацияСобытия.ИДРемонта);
					ИзменитьСтатусыДокументовРемонтаВручную(ЗаявкаСсылка, МассивIDРемонтов, СтатусДокумента, ДатаВремяСобытия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат СтруктураРезультат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру с полями для передачи в функцию ПроверитьВозможностьУстановкиСтатусаДляРемонтаВЗаявке.
//
// Возвращаемое значение:
//		Структура - структура с необходимыми полями. Описание полей 
//			см. в функции ПроверитьВозможностьУстановкиСтатусаДляРемонтаВЗаявке.
//
Функция ПолучитьСтруктуруПараметровДляПроверкиСменыСтатусаРемонта() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Документ", Неопределено);
	СтруктураПараметров.Вставить("ИДРемонта", Неопределено);
	СтруктураПараметров.Вставить("УстанавливаемыйСтатус", Неопределено);
	СтруктураПараметров.Вставить("Подразделение", Неопределено);
	СтруктураПараметров.Вставить("Бригада", Неопределено);
	СтруктураПараметров.Вставить("ДокументИсточник", Неопределено);
	
	СтруктураПараметров.Вставить("ПроверятьСтатусДокумента", Истина);
	СтруктураПараметров.Вставить("ПолучатьДанныеТекущегоСтатуса", Истина);
	СтруктураПараметров.Вставить("ДанныеТекущегоСтатуса", Неопределено);
	СтруктураПараметров.Вставить("ПолучатьДанныеТекущегоСтатусаПоИполнителю", Истина);
	СтруктураПараметров.Вставить("ДанныеТекущегоСтатусаПоИсполнителю", Неопределено);
	СтруктураПараметров.Вставить("ИгнорироватьБлокирующиеСтатусы", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Проверяет возможность смены статуса ремонта.
// 
// Параметры:
//		СтруктураПараметров - Структура с входными параметрами, возвращаемая функцией 
//				торо_РаботаСоСтатусамиДокументовСервер.ПолучитьСтруктуруПараметровДляПроверкиСменыСтатусаРемонтаВЗаявке.
//			*Заявка - ДокументСсылка.торо_ЗаявкаНаРемонт - Заявка, ремонт из которой изменяется.
//			*ИДРемонта - Строка - Уникальный идентификатор ремонта.
//			*УстанавливаемыйСтатус - ПеречислениеСсылка.торо_СтатусыРемонтов - новый статус ремонта.
//			*Подразделение - СправочникСсылка.СтруктураПредприятия - Необязательный. Подразделение-исполнитель ремонта.
//			*Бригада - СправочникСсылка.торо_РемонтныеБригады - Необязательный. Бригада-исполнитель ремонта. Указывается в случае, когда 
//				необходимо установить статус "Отказ исполнителя" или вернуть исполнителю, или когда в мобильном приложении
//				"Мобильная бригада" исполнитель изменяет статус ремонта.
//			*ДокументИсточник - ДокументСсылка - Необязательный. Указывается для статусов, устанавливаемых автоматически 
//				при проведении документов.
//			*ПроверятьСтатусЗаявки - Булево - Если ложь, значит эта проверка была выполнена заранее, здесь проверять не нужно.
//			*ПолучатьДанныеТекущегоСтатуса - Булево - Если ложь, значит будут использоваться переданные ДанныеТекущегоСтатуса.
//			*ДанныеТекущегоСтатуса - Структура, СтрокаТаблицыЗначений - Необязательный. Сведения о текущем статусе ремонта (до смены).
//				Указывается, если для параметра ПолучатьДанныеТекущегоСтатуса установлено значение Ложь.
//			*ПолучатьДанныеТекущегоСтатусаПоИполнителю - Булево - Если ложь, значит будут использоваться переданные ДанныеТекущегоСтатусаПоИсполнителю.
//			*ДанныеТекущегоСтатусаПоИсполнителю - Структура, СтрокаТаблицыЗначений - Необязательный. Сведения о текущем статусе ремонта (до смены).
//				в разрезе исполнителя. Указывается, если для параметра ПолучатьДанныеТекущегоСтатусаПоИполнителю установлено значение Ложь.
//			*ИгнорироватьБлокирующиеСтатусы - Булево - Если Истина, то не будет выполняться проверка на более приоритетный статус ремонта.
//		ОписаниеОшибки - Строка - Выходной параметр. Содержит текст описания ошибки в случае, если функция вернула значение Ложь.
//
//	Возвращаемое значение:
//		Булево - Истина, если статус установить можно.
//
Функция ПроверитьВозможностьУстановкиСтатусаДляРемонта(СтруктураПараметров, Знач ТабИДРемонтов, ОписаниеОшибки = "") Экспорт
	
	Документ = СтруктураПараметров.Документ;
	ИДРемонта = СтруктураПараметров.ИДРемонта;
	Подразделение = СтруктураПараметров.Подразделение;
	Бригада = СтруктураПараметров.Бригада;
	УстанавливаемыйСтатус = СтруктураПараметров.УстанавливаемыйСтатус;
	
	Если ТипЗнч(ТабИДРемонтов) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ТабИДРемонтов = ТабИДРемонтов.РемонтыОборудования.Выгрузить(, "ID");
	КонецЕсли;
		
	Если СтруктураПараметров.ПроверятьСтатусДокумента Тогда
		Если НЕ УстановленСтатусДокумента(Документ, ОписаниеОшибки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ПолучатьДанныеТекущегоСтатуса Тогда
		СоответствиеТекущихСтатусов = ДанныеСтатусовРемонтов(ТабИДРемонтов, ИДРемонта);
		ДанныеТекущегоСтатусаРемонта = СоответствиеТекущихСтатусов[ИДРемонта];
	Иначе
		ДанныеТекущегоСтатусаРемонта = СтруктураПараметров.ДанныеТекущегоСтатуса;
	КонецЕсли;
	
	Если ДанныеТекущегоСтатусаРемонта = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ремонт отсутствует в документе!'");
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеТекущегоСтатуса = ДанныеТекущегоСтатусаРемонта;
	
	Если ЗначениеЗаполнено(Бригада) ИЛИ ЗначениеЗаполнено(Подразделение) Тогда
		
		ДанныеТекущегоСтатусаБригады = Неопределено;
		
		Если СтруктураПараметров.ПолучатьДанныеТекущегоСтатусаПоИполнителю Тогда
			ТаблицаДанныеСтатусовПоБригадам = ДанныеСтатусовРемонтовЗаявкиПоИсполнителям(Документ, ИДРемонта, Подразделение, Бригада);
			Если ТаблицаДанныеСтатусовПоБригадам.Количество() > 0 Тогда
				ДанныеТекущегоСтатусаБригады = ТаблицаДанныеСтатусовПоБригадам[0];
			КонецЕсли;
		Иначе
			ДанныеТекущегоСтатусаБригады = СтруктураПараметров.ДанныеТекущегоСтатусаПоИсполнителю;
		КонецЕсли;
		
		Если ДанныеТекущегоСтатусаБригады = Неопределено Тогда
			// Не установлен никакой статус для этого исполнителя, можно ставить любой.
			Возврат Истина;	
		КонецЕсли;
		
		ДанныеТекущегоСтатуса = ДанныеТекущегоСтатусаБригады;
		
	КонецЕсли;
	
	// Основные проверки, сравнение с текущим статусом ремонта.
	Если ДанныеТекущегоСтатуса.Статус = УстанавливаемыйСтатус 
		И (СтруктураПараметров.ДокументИсточник = Неопределено 
				И ДанныеТекущегоСтатуса.ДокументИсточник = Неопределено) Тогда
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Статус %1 уже установлен!'"), УстанавливаемыйСтатус);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ИгнорироватьБлокирующиеСтатусы Тогда
		БлокирующиеСтатусы = БлокирующиеСменуСтатусаРемонтаСтатусы(УстанавливаемыйСтатус);
		Если БлокирующиеСтатусы.Найти(ДанныеТекущегоСтатуса.Статус) <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Более приоритетный статус %1 уже установлен!'"), ДанныеТекущегоСтатуса.Статус);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает статусы ремонтов заявки без разреза бригад.
//
// Параметры:
//  ЗаявкаСсылка - ДокументСсылка.торо_ЗаявкаНаРемонт - Документ статусы ремонтов которой нужно получить
// 
// Возвращаемое значение:
//  Соответствие - соответствие, где ключ - ИДРемонта, значение Структура с полями
//				Статус, КомментарийКСтатусу, Пользователь, ДокументИсточник, Период.
//
Функция ДанныеСтатусовРемонтов(ТабИДРемонтов, ИДРемонта = Неопределено) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТабИДРемонтов.ID КАК ID
	                      |ПОМЕСТИТЬ Ремонты
	                      |ИЗ
	                      |	&ТабИДРемонтов КАК ТабИДРемонтов
	                      |ГДЕ
	                      |	ТабИДРемонтов.ID = &ИДРемонта
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ID
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	торо_СтатусыРемонтовСрезПоследних.IDРемонта КАК ИДРемонта,
	                      |	торо_СтатусыРемонтовСрезПоследних.Период КАК Период,
	                      |	торо_СтатусыРемонтовСрезПоследних.Статус КАК Статус,
	                      |	торо_СтатусыРемонтовСрезПоследних.Регистратор КАК ДокументИсточник
	                      |ПОМЕСТИТЬ ВТ_СтатусыРемонтов
	                      |ИЗ
	                      |	РегистрСведений.торо_СтатусыРемонтов.СрезПоследних(, IDРемонта = &ИДРемонта) КАК торо_СтатусыРемонтовСрезПоследних
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ИДРемонта
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Ремонты.ID КАК ИДРемонта,
	                      |	ЕСТЬNULL(ВТ_СтатусыРемонтов.Статус, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.ПустаяСсылка)) КАК Статус,
	                      |	ЕСТЬNULL(ВТ_СтатусыРемонтов.ДокументИсточник, НЕОПРЕДЕЛЕНО) КАК ДокументИсточник,
	                      |	ЕСТЬNULL(ВТ_СтатусыРемонтов.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	                      |ИЗ
	                      |	Ремонты КАК Ремонты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыРемонтов КАК ВТ_СтатусыРемонтов
	                      |		ПО Ремонты.ID = ВТ_СтатусыРемонтов.ИДРемонта");
	
	Запрос.УстановитьПараметр("ТабИДРемонтов", ТабИДРемонтов);
	
	Если ИДРемонта = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабИДРемонтов.ID = &ИДРемонта", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "(, IDРемонта = &ИДРемонта)", "(, IDРемонта В (ВЫБРАТЬ Ремонты.ID ИЗ Ремонты))");
	Иначе
		Запрос.УстановитьПараметр("ИДРемонта", ИДРемонта);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаСтатусовРемонтов = Результат.Выбрать();
	
	Пока ВыборкаСтатусовРемонтов.Следующий() Цикл
		СтатусИКомментарий = Новый Структура("Статус, ДокументИсточник, Период");
		ЗаполнитьЗначенияСвойств(СтатусИКомментарий, ВыборкаСтатусовРемонтов);
		СоответствиеВозврата.Вставить(ВыборкаСтатусовРемонтов.ИДРемонта, СтатусИКомментарий);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает статусы ремонтов заявки в разрезе бригад.
//
// Параметры:
//		ЗаявкаСсылка - ДокументСсылка.торо_ЗаявкаНаРемонт - Заявка статусы ремонтов которой нужно получить.
//		ИДРемонта - Строка - Уникальный идентификатор ремонта.
//		Исполнитель - СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Контрагенты - Исполнитель ремонта.
//		УточнениеИсполнителя - СправочникСсылка.торо_РемонтныеБригады, СправочникСсылка.ДоговорыКонтрагентов - Бригада	или договор.
// 
// Возвращаемое значение:
//		ТаблицаЗначений - таблица с колонками:
//			*ИДРемонта - Строка - Идентификатор ремонта.
//			*Исполнитель - СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Контрагенты - Исполнитель (подразделение или контрагент).
//			*УточнениеИсполнителя - СправочникСсылка.торо_РемонтныеБригады, СправочникСсылка.ДоговорыКонтрагентов - Бригада или договор.
//			*Статус - ПеречислениеСсылка.торо_СтатусыРемонтов - Статус ремонта для бригады.
//			*КомментарийКСтатусу - Строка - Комментарий к статусу.
//			*ДокументИсточник - ДокументСсылка - Документ, установивший статус.
//			*Пользователь - СправочникСсылка.Пользователи - Пользователь, установивший статус.
//			*Период - Дата - Дата и время установки статуса.
//
Функция ДанныеСтатусовРемонтовЗаявкиПоИсполнителям(ЗаявкаСсылка, ИДРемонта = Неопределено, Исполнитель = Неопределено, УточнениеИсполнителя = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.ИДРемонта КАК ИДРемонта,
	|	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Исполнитель КАК Исполнитель,
	|	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Статус КАК Статус,
	|	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.КомментарийКСтатусу КАК КомментарийКСтатусу,
	|	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Пользователь КАК Пользователь,
	|	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.ДокументИсточник КАК ДокументИсточник,
	|	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СрезПоследних(
	|			,
	|			ЗаявкаНаРемонт = &ЗаявкаНаРемонт
	|				И ИДРемонта = &ИДРемонта
	|				И Исполнитель = &Исполнитель
	|				И УточнениеИсполнителя = &УточнениеИсполнителя) КАК торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних");
	
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", ЗаявкаСсылка);
	
	Если ИДРемонта = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИДРемонта = &ИДРемонта", "");
	Иначе
		Запрос.УстановитьПараметр("ИДРемонта", ИДРемонта);
	КонецЕсли;
	
	Если Исполнитель = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Исполнитель = &Исполнитель", "");
	Иначе
		Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УточнениеИсполнителя) Тогда
		Запрос.УстановитьПараметр("УточнениеИсполнителя", УточнениеИсполнителя);
	ИначеЕсли ЗначениеЗаполнено(Исполнитель) Тогда
		Запрос.УстановитьПараметр("УточнениеИсполнителя", Неопределено);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И УточнениеИсполнителя = &УточнениеИсполнителя", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ИДРемонта, Исполнитель, УточнениеИсполнителя");
	
	Возврат Результат;
	
КонецФункции

// Функция определяет завершен ли ремонт.
//
// Параметры:
//	 ИДРемонта - Строка - Идентификатор ремонта, для которого устанавливается статус.
//	 ТаблицаИсполнителей - ТаблицаЗначений - Таблица исполнителей ремонта, которые завершили работы. 
//
// Возвращаемое значение:
//		Булево - ремонт завершен.
Функция РемонтЗавершен(ИДРемонта, ТаблицаИсполнителей) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаИсполнителей.РемонтыОборудования_ID КАК IDРемонта,
	               |	ТаблицаИсполнителей.Исполнитель КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА ТаблицаИсполнителей.УточнениеИсполнителя = НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ТаблицаИсполнителей.Исполнитель) = ТИП(Справочник.Контрагенты)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |		КОГДА ТаблицаИсполнителей.УточнениеИсполнителя = НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ТаблицаИсполнителей.Исполнитель) = ТИП(Справочник.СтруктураПредприятия)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)
	               |		ИНАЧЕ ТаблицаИсполнителей.УточнениеИсполнителя
	               |	КОНЕЦ КАК УточнениеИсполнителя
	               |ПОМЕСТИТЬ ВТ_ТаблицаИсполнителей
	               |ИЗ
	               |	&ТаблицаИсполнителей КАК ТаблицаИсполнителей
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	Исполнитель,
	               |	УточнениеИсполнителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПлановыеИсполнителиРемонтов.IDРемонта КАК IDРемонта,
	               |	торо_ПлановыеИсполнителиРемонтов.Исполнитель КАК Исполнитель,
	               |	торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя КАК УточнениеИсполнителя
	               |ПОМЕСТИТЬ ВТ_ИсполнителиРемонта
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаИсполнителей КАК ВТ_ТаблицаИсполнителей
	               |		ПО торо_ПлановыеИсполнителиРемонтов.IDРемонта = ВТ_ТаблицаИсполнителей.IDРемонта
	               |			И торо_ПлановыеИсполнителиРемонтов.Исполнитель = ВТ_ТаблицаИсполнителей.Исполнитель
	               |			И торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя = ВТ_ТаблицаИсполнителей.УточнениеИсполнителя
	               |ГДЕ
	               |	торо_ПлановыеИсполнителиРемонтов.IDРемонта = &ИДРемонта
	               |	И ВТ_ТаблицаИсполнителей.Исполнитель ЕСТЬ NULL
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	Исполнитель,
	               |	УточнениеИсполнителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_СтатусыПоБригадам.ИДРемонта КАК IDРемонта,
	               |	торо_СтатусыПоБригадам.Исполнитель КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА торо_СтатусыПоБригадам.УточнениеИсполнителя = НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(торо_СтатусыПоБригадам.Исполнитель) = ТИП(Справочник.Контрагенты)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |		КОГДА торо_СтатусыПоБригадам.УточнениеИсполнителя = НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(торо_СтатусыПоБригадам.Исполнитель) = ТИП(Справочник.СтруктураПредприятия)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)
	               |		ИНАЧЕ торо_СтатусыПоБригадам.УточнениеИсполнителя
	               |	КОНЕЦ КАК УточнениеИсполнителя,
	               |	торо_СтатусыПоБригадам.Статус КАК Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыИсполнителей
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СрезПоследних(, ИДРемонта = &ИДРемонта) КАК торо_СтатусыПоБригадам
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	Исполнитель,
	               |	УточнениеИсполнителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИсполнителиРемонта.Исполнитель КАК Исполнитель,
	               |	ВТ_ИсполнителиРемонта.УточнениеИсполнителя КАК УточнениеИсполнителя,
	               |	ВТ_СтатусыИсполнителей.Статус КАК Статус
	               |ИЗ
	               |	ВТ_ИсполнителиРемонта КАК ВТ_ИсполнителиРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыИсполнителей КАК ВТ_СтатусыИсполнителей
	               |		ПО ВТ_ИсполнителиРемонта.IDРемонта = ВТ_СтатусыИсполнителей.IDРемонта
	               |			И ВТ_ИсполнителиРемонта.Исполнитель = ВТ_СтатусыИсполнителей.Исполнитель
	               |			И ВТ_ИсполнителиРемонта.УточнениеИсполнителя = ВТ_СтатусыИсполнителей.УточнениеИсполнителя
	               |ГДЕ
	               |	НЕ ВТ_СтатусыИсполнителей.Статус В (&СтатусВыполнен)";
	
	МассивВыполненныхСтатусов = Новый Массив;
	МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.Выполнен);
	МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.Отменен);
	МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.ОтказИсполнителя);
	МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.ОтказПодразделения);
	
	Запрос.УстановитьПараметр("ИДРемонта", ИДРемонта);
	Запрос.УстановитьПараметр("ТаблицаИсполнителей", ТаблицаИсполнителей);
	Запрос.УстановитьПараметр("СтатусВыполнен", МассивВыполненныхСтатусов);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Установить вручную статус документа. Используется для изменения статуса заявки при получении
// событий из МП Бригады.
//
// Параметры:
//		ДокументСсылка - ДокументСсылка.торо_ЗаявкаНаРемонт,
//						 ДокументСсылка.торо_ВыявленныеДефекты,
//						 ДокументСсылка.торо_ВнешнееОснованиеДляРабот - Ссылка на документ, для которого устанавливается статус.
//		Регистратор - ДокументСсылка.торо_ЗаявкаНаРемонт - Ссылка на документ, по которому устанавливается статус.
//		Статус - ПеречислениеСсылка.торо_СтатусыДокументов - Устанавливаемый статус.
//		Движения - КоллекцияДвижений - Коллекция движений документа. Если Неопределенно, то необходимо прочитать
//										наборы записей по нужным регистрам (вызывается для смены статусы заявки при
//										смене статуса ремонта в МП Бринады). Иначе наборы записей уже были прочитаны
//										в вызывающей функции: необходимо при изменении статусов документов-оснований
//										регистратора, данный метод вызывается последовательно для всех оснований,
//										в данном случае передбудет неэффективно для каждого документа читать набор
//										записей, менять запись и записывать набор.
//		ПроверятьПриоритетСтатуса - Булево - Указывает на необходимость проверить приоритет устанавливаемого статуса.
//											 Если Истина, то меняется статус одиночного документа (заявки), поэтому
//											 приоритет проверяем. Если Ложь, то меняется статус документов-оснований,
//											 и приоритет уже был учтен в вызывающей функции.
// 
// Возвращаемое значение:
//		Булево - Истина, если статус установлен, в противном случае Ложь
//
Функция УстановитьВручнуюСтатусДокумента(ДокументСсылка, Регистратор, Статус, ПроверятьПриоритетСтатуса = Истина, ВремяУстановки = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ВремяУстановки) Тогда
		ВремяУстановки = ТекущаяДата();
	КонецЕсли;
	
	ТекущийСтатус = ПолучитьТекущийСтатусДокумента(ДокументСсылка);
	Если Не ЗначениеЗаполнено(ТекущийСтатус) Или ТекущийСтатус = Статус Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Вычислить("ДокументСсылка." + торо_Ремонты.ПолучитьИмяТЧРемонтов(ДокументСсылка) + ".Количество()") > 1 И ПроверятьПриоритетСтатуса Тогда
		СтруктураДокументовОснований = Новый Структура("Атрибут0", ДокументСсылка);
		ТаблицаПорядкаСтатусов = торо_РаботаСоСтатусамиДокументовПовтИсп.ПолучитьТаблицуПорядкаСтатусовДокументов(СтруктураДокументовОснований);
		
		СтруктураПоиска = Новый Структура("Статус", ТекущийСтатус);
		НайденныеСтроки = ТаблицаПорядкаСтатусов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекущийСтатусПорядок = 0;
		КонецЕсли;
		
		ТекущийСтатусПорядок = НайденныеСтроки[0].Порядок;
		
		СтруктураПоиска.Статус = Статус;
		НайденныеСтроки = ТаблицаПорядкаСтатусов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтатусПорядок = 0;
		КонецЕсли;
		
		СтатусПорядок = НайденныеСтроки[0].Порядок;
		
		Если ТекущийСтатусПорядок > СтатусПорядок Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи                    = РегистрыСведений.торо_СтатусыДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период 			  = ВремяУстановки;
	МенеджерЗаписи.ИзменяемыйДокумент = ДокументСсылка;
	МенеджерЗаписи.ДокументИсточник   = Регистратор;
	МенеджерЗаписи.Статус 			  = Статус;
	МенеджерЗаписи.Записать();
	
	Возврат Истина;
	
КонецФункции

// Изменить статусы документов ремонта.
// Процедура предназначена для изменения статусов документов по ремонту проводимого документа.
//
// Параметры:
//  Регистратор - 	ДокументСсылка.торо_ЗаявкаНаРемонт, 
//							ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//							ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия,
//							ДокументСсылка.торо_АктОВыполненииЭтапаРабот,
//							ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов - Ссылка на документ меняющий статус своих документов оснований.
//	МассивIDРемонтов - Массив - Массив ремонтов, для которых получаются документы. Актуально для загрузки событий из МП Бригады:
//								при изменении в заявке статуса одного ремонта, не должны меняться статусы тех связанных документов,
//								которые не содержат данный ремонт
//	Статус - ПеречислениеСсылка.торо_СтатусыДокументов - Устанавливаемый статус.
Процедура ИзменитьСтатусыДокументовРемонтаВручную(Регистратор, МассивIDРемонтов, Статус, ВремяУстановки = Неопределено)
	
	ДокументыПоРемонтам = ПолучитьДокументыПоРемонтам(Регистратор, МассивIDРемонтов);
	
	СтруктураДокументов = Новый Структура;
	Для каждого Стр Из ДокументыПоРемонтам Цикл
		СтруктураДокументов.Вставить("Атрибут" + Формат(ДокументыПоРемонтам.Индекс(Стр), "ЧН=0; ЧГ=0"), Стр.ДокументПоРемонту);
	КонецЦикла;	
	ТаблицаПорядкаСтатусов = торо_РаботаСоСтатусамиДокументовПовтИсп.ПолучитьТаблицуПорядкаСтатусовДокументов(СтруктураДокументов);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаДляИзмененияСтатусаДокументов(Истина);
	Запрос.УстановитьПараметр("ТаблицаПорядкаСтатусов",		ТаблицаПорядкаСтатусов);
	Запрос.УстановитьПараметр("ТаблицаДокументовИРемонтов",	ДокументыПоРемонтам);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоТипамДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоТипамДокументов.Следующий() Цикл
		Выборка = ВыборкаПоТипамДокументов.Выбрать();
		Пока Выборка.Следующий() Цикл
			УстановитьВручнуюСтатусДокумента(Выборка.ИзменяемыйДокумент, Регистратор, Выборка.УстанавливаемыйСтатус, Ложь, ВремяУстановки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУправляемыеБлокировкиНаСтатусыРемонтов(ДокументСсылка, ЗаявкаНаРемонт = Неопределено, ИДРемонта = Неопределено)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_СтатусыРемонтов.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументСсылка);
	
	Если ЗначениеЗаполнено(ЗаявкаНаРемонт) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ЗаявкаНаРемонт", ЗаявкаНаРемонт);
		Если ЗначениеЗаполнено(ИДРемонта) Тогда
			ЭлементБлокировки.УстановитьЗначение("ИДРемонта", ИДРемонта);
		КонецЕсли;
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ОткатСтатусаРемонтаВЗаявкеПриОтменеПроведения(ИсточникСсылка)
	
	Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		НаборЗаписей = РегистрыСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаНаРемонт.Установить(ИсточникСсылка);
		НаборЗаписей.Записать(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_СтатусыРемонтов.Регистратор КАК Регистратор
		               |ИЗ
		               |	РегистрСведений.торо_СтатусыРемонтов КАК торо_СтатусыРемонтов
		               |ГДЕ
		               |	торо_СтатусыРемонтов.IDРемонта В(&IDРемонта)
		               |	И (торо_СтатусыРемонтов.Статус = Значение(Перечисление.торо_СтатусыРемонтов.ОтказИсполнителя)
					   |    ИЛИ торо_СтатусыРемонтов.Статус = Значение(Перечисление.торо_СтатусыРемонтов.ОтказПодразделения)
					   |    ИЛИ торо_СтатусыРемонтов.Статус = Значение(Перечисление.торо_СтатусыРемонтов.ВозобновленоПослеОтказа))";
		
		Запрос.УстановитьПараметр("IDРемонта", ИсточникСсылка.РемонтыОборудования.ВыгрузитьКолонку("ID"));
		                                                                                             
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			
			НаборЗаписей = РегистрыСведений.торо_СтатусыРемонтов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать(Истина);
			
			РегистраторОбъект = Выборка.Регистратор.ПолучитьОбъект();
			Если РегистраторОбъект <> Неопределено Тогда
				РегистраторОбъект.Удалить();
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") ИЛИ ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") 
		ИЛИ ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
			ТекстДляВТ = 
			"ВЫБРАТЬ
			|	торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеЗаявки.Заявка КАК Заявка
			|ПОМЕСТИТЬ Заявки
			|ИЗ
			|	Документ.торо_ЗакрытиеЗаявокИРемонтов.ЗакрываемыеЗаявки КАК торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеЗаявки
			|ГДЕ
			|	торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеЗаявки.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка
			|ИЗ
			|	Документ.торо_ЗакрытиеЗаявокИРемонтов.ЗакрываемыеРемонты КАК торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
			|		ПО (торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Ссылка = &Ссылка)
			|			И торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID = торо_ЗаявкаНаРемонтРемонтыОборудования.ID; ";
			
		ИначеЕсли ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда 
			ТекстДляВТ = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Заявка
			|ПОМЕСТИТЬ Заявки
			|ИЗ
			|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
			|		ПО (торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка = &Ссылка)
			|			И торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID = торо_ЗаявкаНаРемонтРемонтыОборудования.ID; ";
		
		Иначе
			ТекстДляВТ = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Заявка
			|ПОМЕСТИТЬ Заявки
			|ИЗ
			|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
			|		ПО (торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка)
			|			И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID = торо_ЗаявкаНаРемонтРемонтыОборудования.ID; ";
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстДляВТ);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Ссылка", ИсточникСсылка);
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_СтатусыРемонтовВЗаявкахПоБригадам.ЗаявкаНаРемонт КАК Документ
		|ИЗ
		|	РегистрСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам КАК торо_СтатусыРемонтовВЗаявкахПоБригадам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Заявки КАК Заявки
		|		ПО торо_СтатусыРемонтовВЗаявкахПоБригадам.ЗаявкаНаРемонт = Заявки.Заявка
		|			И (торо_СтатусыРемонтовВЗаявкахПоБригадам.ДокументИсточник = &Ссылка)";
				
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл				
				НаборЗаписей = РегистрыСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЗаявкаНаРемонт.Установить(Выборка.Документ);
				НаборЗаписей.Прочитать();
				УдалитьЗаписиСтатусовВНабореЗаписейПоДокументуИсточнику(НаборЗаписей, ИсточникСсылка);
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписиСтатусовВНабореЗаписейПоДокументуИсточнику(НаборЗаписей, ДокументИсточник)
	
	ЗаписиКУдалению = Новый Массив;
	
	Если ТипЗнч(НаборЗаписей)=Тип("РегистрСведенийНаборЗаписей.торо_СтатусыРемонтов") Тогда
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.Регистратор = ДокументИсточник Тогда
				ЗаписиКУдалению.Добавить(Запись);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.ДокументИсточник = ДокументИсточник Тогда
				ЗаписиКУдалению.Добавить(Запись);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ЗаписьКУдалению из ЗаписиКУдалению Цикл
		НаборЗаписей.Удалить(ЗаписьКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗаписиСтатусоВНабореЗаписейПоУдаленнымИсполнителям(НаборЗаписей, ДокументИсточник)
	
	ЗаписиКУдалению = Новый Массив;
	СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Исполнитель, УточнениеИсполнителя");
	
	Для каждого Запись Из НаборЗаписей Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Запись);
		СтруктураПоиска.РемонтыОборудования_ID = Запись.ИДРемонта;
		НайденныеСтроки = ДокументИсточник.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ЗаписьКУдалению из ЗаписиКУдалению Цикл
		НаборЗаписей.Удалить(ЗаписьКУдалению);
	КонецЦикла;

КонецПроцедуры

// Должно срабатывать при проведении документов, в которых указывается бригада-исполнитель ремонта.
// То есть заявка, наряд, акт.
Процедура УстановитьСтатусыДляИсполнителейПриПроведенииДокумента(Источник, ДокументСсылка, Статус, СоответствиеТекущихСтатусовРемонтов = Неопределено)
	
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.торо_ЗаявкаНаРемонт")
		И ТипЗнч(Источник) <> Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")
		И ТипЗнч(Источник) <> Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")
		И ТипЗнч(Источник) <> Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		И ТипЗнч(Источник) <> Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
		И ТипЗнч(Источник) <> Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		Возврат;
	КонецЕсли;
	
	ТабИДРемонтов = ДокументСсылка.РемонтыОборудования.Выгрузить(, "ID");
	Если СоответствиеТекущихСтатусовРемонтов = Неопределено Тогда
		СоответствиеТекущихСтатусовРемонтов = ДанныеСтатусовРемонтов(ТабИДРемонтов);
	КонецЕсли;
	
	ТаблицаТекущихСтатусовПоИсполнителям = ДанныеСтатусовРемонтовЗаявкиПоИсполнителям(ДокументСсылка);
	
	ПараметрыДляПроверки = ПолучитьСтруктуруПараметровДляПроверкиСменыСтатусаРемонта();
	ПараметрыДляПроверки.Документ = ДокументСсылка;
	ПараметрыДляПроверки.ДокументИсточник = Источник.Ссылка;
	ПараметрыДляПроверки.ПроверятьСтатусДокумента = Ложь;
	ПараметрыДляПроверки.ПолучатьДанныеТекущегоСтатуса = Ложь;
	ПараметрыДляПроверки.ПолучатьДанныеТекущегоСтатусаПоИполнителю = Ложь;
	
	НЗСтатусыВЗаявкахПоБригадам = РегистрыСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СоздатьНаборЗаписей();
	НЗСтатусыВЗаявкахПоБригадам.Отбор.ЗаявкаНаРемонт.Установить(ДокументСсылка);
	НЗСтатусыВЗаявкахПоБригадам.Прочитать();
	
	УдалитьЗаписиСтатусовВНабореЗаписейПоДокументуИсточнику(НЗСтатусыВЗаявкахПоБригадам, Источник.Ссылка);
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		УдалитьЗаписиСтатусоВНабореЗаписейПоУдаленнымИсполнителям(НЗСтатусыВЗаявкахПоБригадам, Источник);
	КонецЕсли;
	
	ЭтоАкт = ?(ТипЗнч(Источник) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот"), Истина, Ложь); 
	
	Для каждого СтрокаИсполнителя из Источник.ИсполнителиПоРемонтам Цикл
		ИДРемонта = СтрокаИсполнителя.РемонтыОборудования_ID;
		Исполнитель = СтрокаИсполнителя.Исполнитель;
		УточнениеИсполнителя = СтрокаИсполнителя.УточнениеИсполнителя;
		
		ДанныеТекущегоСтатуса = СоответствиеТекущихСтатусовРемонтов[ИДРемонта];
		ДанныеТекущегоСтатусаПоИсполнителю = Неопределено;
		
		НайденныеСтроки = ТаблицаТекущихСтатусовПоИсполнителям.НайтиСтроки(Новый Структура("ИДРемонта, Исполнитель, УточнениеИсполнителя", ИДРемонта, Исполнитель, УточнениеИсполнителя));
		Если НайденныеСтроки.Количество() > 0 Тогда 
			ДанныеТекущегоСтатусаПоИсполнителю = НайденныеСтроки[0];
		КонецЕсли;
		
		СтатусВыполнен = Ложь;
		Если ЭтоАкт Тогда
			СтатусВыполнен = СтрокаИсполнителя.ВсеРаботыИсполнителяЗавершены;
		КонецЕсли;

		ПараметрыДляПроверки.ИДРемонта = ИДРемонта;
		ПараметрыДляПроверки.Подразделение = Исполнитель;
		ПараметрыДляПроверки.Бригада = УточнениеИсполнителя;
		ПараметрыДляПроверки.УстанавливаемыйСтатус = ?(СтатусВыполнен, Перечисления.торо_СтатусыРемонтов.Выполнен, Статус);
		ПараметрыДляПроверки.ДанныеТекущегоСтатуса = ДанныеТекущегоСтатуса;
		ПараметрыДляПроверки.ДанныеТекущегоСтатусаПоИсполнителю = ДанныеТекущегоСтатусаПоИсполнителю;
				
		МожноСменитьСтатус = ПроверитьВозможностьУстановкиСтатусаДляРемонта(ПараметрыДляПроверки, ТабИДРемонтов);
		
		Если МожноСменитьСтатус Тогда			
			Запись = НЗСтатусыВЗаявкахПоБригадам.Добавить();
			Запись.ЗаявкаНаРемонт = ДокументСсылка;
			Запись.ИДРемонта = ИДРемонта;
			Запись.Исполнитель = Исполнитель;
			Запись.УточнениеИсполнителя = УточнениеИсполнителя;
			Запись.Период = Источник.Дата;
			Запись.Статус = ?(СтатусВыполнен, Перечисления.торо_СтатусыРемонтов.Выполнен, Статус);
			Запись.ДокументИсточник = Источник.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	НЗСтатусыВЗаявкахПоБригадам.Записать();

КонецПроцедуры

// Вспомогательная проверка перед изменением статуса ремонта.
//
// Параметры:
//		Заявка - ДокументСсылка.торо_ЗаявкаНаРемонт - ссылка на проверяему заявку.
//		ОписаниеОшибки - Строка - Выходной параметр, содержит текст в случае ошибки.
//
// Возвращаемое значение:
//		Булево - Истина, если статус установлен.
Функция ПолучитьДокументИзмененияСтатусаРемонта(ИДРемонта, Статус)
	
	НовыйДокумент = Документы.торо_ИзменениеСтатусаРемонта.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.IDРемонта = ИДРемонта;
	НовыйДокумент.Статус = Статус;
	НовыйДокумент.Ответственный = Пользователи.ТекущийПользователь();
	
	Попытка	
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат НовыйДокумент;
	
КонецФункции

Функция УстановленСтатусДокумента(Документ, ОписаниеОшибки = "")
	
	СтатусДокумента = ПолучитьТекущийСтатусДокумента(Документ);
	
	Если НЕ ЗначениеЗаполнено(СтатусДокумента) Тогда
		ОписаниеОшибки = НСтр("ru = 'Для документа не установлен никакой статус, документ не проведен!'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция БлокирующиеСменуСтатусаРемонтаСтатусы(Статус)
	
	МассивСтатусов = Новый Массив;
	Статусы = Перечисления.торо_СтатусыРемонтов;
	
	Если Статус = Статусы.ВРаботе Тогда
		МассивСтатусов.Добавить(Статусы.Выполнен);
		МассивСтатусов.Добавить(Статусы.Отменен);
		МассивСтатусов.Добавить(Статусы.ОтказПодразделения);
		МассивСтатусов.Добавить(Статусы.ОтказИсполнителя);
	ИначеЕсли Статус = Статусы.ОтказИсполнителя Тогда
		МассивСтатусов.Добавить(Статусы.Выполнен);
		МассивСтатусов.Добавить(Статусы.Отменен);
		МассивСтатусов.Добавить(Статусы.ВРаботе);
		МассивСтатусов.Добавить(Статусы.Приостановлен);
		МассивСтатусов.Добавить(Статусы.ОтказПодразделения);
	ИначеЕсли Статус = Статусы.ОтказПодразделения Тогда
		МассивСтатусов.Добавить(Статусы.Выполнен);
		МассивСтатусов.Добавить(Статусы.Отменен);
		МассивСтатусов.Добавить(Статусы.ВРаботе);
		МассивСтатусов.Добавить(Статусы.Приостановлен);
		МассивСтатусов.Добавить(Статусы.ОтказИсполнителя);
	ИначеЕсли Статус = Статусы.Зарегистрирован Тогда
		МассивСтатусов.Добавить(Статусы.Выполнен);
		МассивСтатусов.Добавить(Статусы.Отменен);
		МассивСтатусов.Добавить(Статусы.ВРаботе);
		МассивСтатусов.Добавить(Статусы.Приостановлен);
		МассивСтатусов.Добавить(Статусы.ОтказПодразделения);
		МассивСтатусов.Добавить(Статусы.ОтказИсполнителя);
		МассивСтатусов.Добавить(Статусы.ВозобновленоПослеОтказа);
	ИначеЕсли Статус = Статусы.ЗапланированоУстранение Тогда
		МассивСтатусов.Добавить(Статусы.Выполнен);
		МассивСтатусов.Добавить(Статусы.Отменен);
		МассивСтатусов.Добавить(Статусы.ВРаботе);
		МассивСтатусов.Добавить(Статусы.Приостановлен);
		МассивСтатусов.Добавить(Статусы.ОтказПодразделения);
		МассивСтатусов.Добавить(Статусы.ОтказИсполнителя);
		МассивСтатусов.Добавить(Статусы.ВозобновленоПослеОтказа);
	ИначеЕсли Статус = Статусы.ВозобновленоПослеОтказа Тогда
		МассивСтатусов.Добавить(Статусы.Выполнен);
		МассивСтатусов.Добавить(Статусы.Отменен);
		МассивСтатусов.Добавить(Статусы.ВРаботе);
		МассивСтатусов.Добавить(Статусы.Приостановлен);
	ИначеЕсли Статус = Статусы.Приостановлен Тогда
		МассивСтатусов.Добавить(Статусы.Выполнен);
		МассивСтатусов.Добавить(Статусы.Отменен);
		МассивСтатусов.Добавить(Статусы.ОтказПодразделения);
		МассивСтатусов.Добавить(Статусы.ОтказИсполнителя);
	ИначеЕсли Статус = Статусы.ВПути Тогда
		МассивСтатусов.Добавить(Статусы.Выполнен);
		МассивСтатусов.Добавить(Статусы.Отменен);
		МассивСтатусов.Добавить(Статусы.ВРаботе);
		МассивСтатусов.Добавить(Статусы.ОтказПодразделения);
		МассивСтатусов.Добавить(Статусы.ОтказИсполнителя);
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

Функция ПолучитьДокументыПоРемонтам(Регистратор, МассивID)
	
	ТипДокумента = ТипЗнч(Регистратор);
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	Если НЕ ТипДокумента = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
		МассивТиповДокументов.Добавить(Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот"));
		МассивТиповДокументов.Добавить(Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВсеДокументыПоРемонтам.ДокументПоРемонту КАК ДокументПоРемонту
	               |ПОМЕСТИТЬ ВТ_ДокументыПоРемонту
	               |ИЗ
	               |	РегистрСведений.торо_ВсеДокументыПоРемонтам КАК торо_ВсеДокументыПоРемонтам
	               |ГДЕ
	               |	торо_ВсеДокументыПоРемонтам.IDРемонта В(&МассивID)
	               |	И ТИПЗНАЧЕНИЯ(торо_ВсеДокументыПоРемонтам.ДокументПоРемонту) В (&МассивТиповДокументов)
	               |	И НЕ торо_ВсеДокументыПоРемонтам.ДокументПоРемонту В (&ДокументыИсключения)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДокументПоРемонту
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВсеДокументыПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ВсеДокументыПоРемонтам.ДокументПоРемонту КАК ДокументПоРемонту
	               |ИЗ
	               |	ВТ_ДокументыПоРемонту КАК ВТ_ДокументыПоРемонту
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВсеДокументыПоРемонтам КАК торо_ВсеДокументыПоРемонтам
	               |		ПО ВТ_ДокументыПоРемонту.ДокументПоРемонту = торо_ВсеДокументыПоРемонтам.ДокументПоРемонту";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("МассивТиповДокументов", МассивТиповДокументов);
	
	Если НЕ ТипЗнч(Регистратор) = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
		Запрос.УстановитьПараметр("ДокументыИсключения", Регистратор);
	Иначе
		ДокументыИсключения = Регистратор.ЗакрываемыеЗаявки.Выгрузить().ВыгрузитьКолонку("Заявка");
		ДокументыИсключения.Добавить(Регистратор);
		Запрос.УстановитьПараметр("ДокументыИсключения", ДокументыИсключения);
	КонецЕсли;
	
	СвязанныеДокументы = Запрос.Выполнить().Выгрузить();
	
	Возврат СвязанныеДокументы;
				
КонецФункции

Функция ПолучитьЗаявки(Регистратор)
	
	МассивЗаявок = Новый Массив;
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		МассивЗаявок.Добавить(Регистратор);
		Возврат МассивЗаявок;
	КонецЕсли;
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник КАК ДокументОснование
		               |ИЗ
		               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		               |ГДЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Регистратор
		               |	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник ССЫЛКА Документ.торо_ЗаявкаНаРемонт
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДокументИсточник
		               |ИЗ
		               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		               |		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник = торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка
		               |ГДЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Регистратор
		               |	И торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДокументИсточник ССЫЛКА Документ.торо_ЗаявкаНаРемонт
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДокументИсточник
		               |ИЗ
		               |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		               |ГДЕ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка = &Регистратор
		               |	И торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДокументИсточник ССЫЛКА Документ.торо_ЗаявкаНаРемонт";
		
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			МассивЗаявок = Результат.Выгрузить().ВыгрузитьКолонку("ДокументОснование");	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЗаявок;
	
КонецФункции

Функция ПолучитьМассивIDРемонтовРегистратора(Регистратор)
	
	ТипДокумента = ТипЗнч(Регистратор);
	СписокID = Новый Массив;
	
	Если ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
	
		СписокID = Регистратор.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		
		СписокID = Регистратор.СписокДефектов.Выгрузить().ВыгрузитьКолонку("ID");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
	    СписокID = Регистратор.Мероприятия.Выгрузить().ВыгрузитьКолонку("ID");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
		
		СписокID = Регистратор.ЗакрываемыеРемонты.Выгрузить().ВыгрузитьКолонку("ID");
		СписокIDЗакрываемыхЗаявок = Регистратор.ЗакрываемыеЗаявки.Выгрузить().ВыгрузитьКолонку("ИДРемонта");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокID, СписокIDЗакрываемыхЗаявок, Истина);
		
	КонецЕсли;
	
	Возврат СписокID;
	
КонецФункции

#Область ФормированиеТекстовЗапросов

Функция ПолучитьТекстЗапросаДляИзмененияСтатусаДокументов(ПолучитьИтоги = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаДокументовИРемонтов.ДокументПоРемонту КАК Ссылка,
	               |	ТаблицаДокументовИРемонтов.IDРемонта КАК ID
	               |ПОМЕСТИТЬ ВТ_ДокументыИРемонты
	               |ИЗ
	               |	&ТаблицаДокументовИРемонтов КАК ТаблицаДокументовИРемонтов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПорядкаСтатусов.ТипДокумента КАК ТипДокумента,
	               |	ТаблицаПорядкаСтатусов.Статус КАК Статус,
	               |	ТаблицаПорядкаСтатусов.Порядок КАК Порядок
	               |ПОМЕСТИТЬ ТаблицаПорядкаСтатусов
	               |ИЗ
	               |	&ТаблицаПорядкаСтатусов КАК ТаблицаПорядкаСтатусов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаПорядкаСтатусов.Порядок,
	               |	ТаблицаПорядкаСтатусов.ТипДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_СтатусыРемонтовСрезПоследних.IDРемонта КАК IDРемонта,
	               |	торо_СтатусыРемонтовСрезПоследних.Статус КАК Статус,
				   |	торо_СтатусыРемонтовСрезПоследних.Регистратор КАК ДокументИсточник,
	               |	ВЫБОР
	               |		КОГДА торо_СтатусыРемонтовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.Зарегистрирован)
	               |			ТОГДА 0
	               |		КОГДА торо_СтатусыРемонтовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.ЗапланированоУстранение)
	               |				ИЛИ торо_СтатусыРемонтовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.ОтказИсполнителя)
	               |				ИЛИ торо_СтатусыРемонтовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.ОтказПодразделения)
	               |				ИЛИ торо_СтатусыРемонтовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.ВозобновленоПослеОтказа)
	               |			ТОГДА 1
	               |		КОГДА торо_СтатусыРемонтовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.Выполнен)
	               |			ТОГДА 3
	               |		КОГДА торо_СтатусыРемонтовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыРемонтов.Отменен)
	               |			ТОГДА 4
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ТекущиеСтатусыРемонтов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтов.СрезПоследних(
	               |			,
	               |			IDРемонта В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ВТ_ДокументыИРемонты.ID КАК ID
	               |				ИЗ
	               |					ВТ_ДокументыИРемонты КАК ВТ_ДокументыИРемонты)) КАК торо_СтатусыРемонтовСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДокументыИРемонты.Ссылка КАК Ссылка,
				   |    МАКСИМУМ(ВТ_ТекущиеСтатусыРемонтов.ДокументИсточник) КАК ДокументИсточник,
	               |	МИНИМУМ(ВТ_ТекущиеСтатусыРемонтов.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ДокументыИПриоритетыСтатусов
	               |ИЗ
	               |	ВТ_ДокументыИРемонты КАК ВТ_ДокументыИРемонты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТекущиеСтатусыРемонтов КАК ВТ_ТекущиеСтатусыРемонтов
	               |		ПО ВТ_ДокументыИРемонты.ID = ВТ_ТекущиеСтатусыРемонтов.IDРемонта
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ДокументыИРемонты.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДокументыИПриоритетыСтатусов.Ссылка КАК ИзменяемыйДокумент,
				   |	ВТ_ДокументыИПриоритетыСтатусов.ДокументИсточник КАК ДокументИсточник,
	               |	ТаблицаПорядкаСтатусов.Статус КАК УстанавливаемыйСтатус,
	               |	ТаблицаПорядкаСтатусов.ТипДокумента КАК ТипДокумента
	               |ПОМЕСТИТЬ ВТ_ТаблицаУстанавливаемыхСтатусов
	               |ИЗ
	               |	ВТ_ДокументыИПриоритетыСтатусов КАК ВТ_ДокументыИПриоритетыСтатусов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПорядкаСтатусов КАК ТаблицаПорядкаСтатусов
	               |		ПО ВТ_ДокументыИПриоритетыСтатусов.Приоритет = ТаблицаПорядкаСтатусов.Порядок
	               |			И (ТИПЗНАЧЕНИЯ(ВТ_ДокументыИПриоритетыСтатусов.Ссылка) = ТИПЗНАЧЕНИЯ(ТаблицаПорядкаСтатусов.ТипДокумента))
				   |ГДЕ
				   |	НЕ ВТ_ДокументыИПриоритетыСтатусов.Ссылка = ВТ_ДокументыИПриоритетыСтатусов.ДокументИсточник 
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИзменяемыйДокумент,
	               |	УстанавливаемыйСтатус
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаУстанавливаемыхСтатусов.ИзменяемыйДокумент КАК ИзменяемыйДокумент,
				   |	ВТ_ТаблицаУстанавливаемыхСтатусов.ДокументИсточник КАК ДокументИсточник,
				   |    %ТипДокумента%
	               |	ВТ_ТаблицаУстанавливаемыхСтатусов.УстанавливаемыйСтатус КАК УстанавливаемыйСтатус
	               |ИЗ
	               |	ВТ_ТаблицаУстанавливаемыхСтатусов КАК ВТ_ТаблицаУстанавливаемыхСтатусов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыДокументов.СрезПоследних КАК торо_СтатусыДокументовСрезПоследних
	               |		ПО ВТ_ТаблицаУстанавливаемыхСтатусов.ИзменяемыйДокумент = торо_СтатусыДокументовСрезПоследних.ИзменяемыйДокумент
	               |			И (НЕ ВТ_ТаблицаУстанавливаемыхСтатусов.УстанавливаемыйСтатус = торо_СтатусыДокументовСрезПоследних.Статус)
				   |%Итоги%";
	
	Если ПолучитьИтоги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТипДокумента%", "ВТ_ТаблицаУстанавливаемыхСтатусов.ТипДокумента,");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Итоги%", "ИТОГИ ПО ТипДокумента");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТипДокумента%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Итоги%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти