
#Область ПрограммныйИнтерфейс

#Область ОберткиДляОпределенияТипаФормПодборов

// Проверяет, является ли форма формой подбора.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
// Возвращаемое значение:
//	 Булево - описание выше.
//
Функция ЭтоФормаПодбора(Форма) Экспорт
	
	КодФормы = Форма.КодФормы;
	
	Если КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма"
		Или КодФормы = "Обработка_ПодборТоваровВДокументЗакупки_Форма" 
		Или КодФормы = "Документ_ЧекККМ_ФормаДокументаМастер" 
		Или КодФормы = "Обработка_ПомощникПродаж_Форма" 
		Или КодФормы = "Обработка_ПодборПоТоварнымКатегориям_Форма" 
        Или КодФормы = "Обработка_ПодборНоменклатуры_Форма" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, является ли формой выбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма.
//
// Возвращаемое значение:
//	 Булево - описание выше.
//
Функция ЭтоФормаВыбораХарактеристик(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_ХарактеристикиНоменклатуры_ФормаВыбора");
	
КонецФункции

// Проверяет, является ли формой выбора справочника "Номенклатура".
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма.
//
// Возвращаемое значение:
//	 Булево - описание выше.
//
Функция ЭтоФормаВыбораНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ФормаВыбора");
	
КонецФункции

// Проверяет, является ли формой списка справочника "Номенклатура".
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма.
//
// Возвращаемое значение:
//	 Булево - описание выше.
//
Функция ЭтоФормаСпискаНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ФормаСписка");
	
КонецФункции

// Проверяет, является ли формой подобных товаров.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма.
//
// Возвращаемое значение:
//	 Булево - описание выше.
//
Функция ЭтоФормаПодобныеТоварыНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ПодобныеТовары");
	
КонецФункции

// Проверяет, является ли формой подбора по товарным категориям.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма подбора товаров по товарным категориям.
//
// Возвращаемое значение:
//	Булево - описание выше.
//
Функция ЭтоФормаПодбораТоваровПоКатегориям(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Обработка_ПодборПоТоварнымКатегориям_Форма");
	
КонецФункции

#КонецОбласти

#Область ОпределениеИменСписковНаФормеВЗависимостиОтВариантаПоиска

// Возвращает имя списка номенклатуры по варианту поиска.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	 Строка - имя списка номенклатуры.
//
Функция ИмяСпискаНоменклатурыПоВариантуПоиска(Форма) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		ИмяСписка = "СписокНоменклатура";
	Иначе
		ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
		ИмяСписка = ?(ВариантПоискаТоваров = "Расширенный", "СписокРасширенныйПоискНоменклатура", "СписокСтандартныйПоискНоменклатура");
	 КонецЕсли; 
	
	Возврат ИмяСписка;
	
КонецФункции

// Возвращает имя текущей страницы номенклатуры по варианту поиска.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма ывбора. списка, подбора.
//
// Возвращаемое значение:
//	 Строка - имя страницы номенклатуры.
//
Функция ИмяСтраницыНоменклатурыПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСтраницы = ?(ВариантПоискаТоваров = "Расширенный", "СтраницаРасширенныйПоискНоменклатура", "СтраницаСтандартныйПоискНоменклатура");
	
	Возврат ИмяСтраницы;
	
КонецФункции

// Возвращает имя страницы списка страниц на форме подбора, которую надо сделать текущей
// в зависимости от включенного типа поиска.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
// Возвращаемое значение:
//	 Строка - имя страницы.
//
Функция ИмяТекущейСтраницыПоВариантуПоиска(Форма) Экспорт
	
	ИмяСтраницыСписка = "";
	
	Если ЭтоФормаПодбора(Форма) Тогда
		НавигацияПоХарактеристикам = Форма.НавигацияПоХарактеристикам;
	Иначе
		НавигацияПоХарактеристикам = Ложь;
	КонецЕсли;
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	
	ИмяСтраницыСписка = ?(НавигацияПоХарактеристикам, "СтраницаСтандартныйПоискХарактеристики", "СтраницаСтандартныйПоискНоменклатура");
	
	Если ВариантПоискаТоваров = "Расширенный" Тогда
		ИмяСтраницыСписка = ?(НавигацияПоХарактеристикам, "СтраницаРасширенныйПоискХарактеристики", "СтраницаРасширенныйПоискНоменклатура");
	КонецЕсли;
	
	Возврат ИмяСтраницыСписка;
	
КонецФункции

// Возвращает идентфикатор действующего варианта поиска.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	 Строка - идентификатор варианта поиска.
//
Функция ДействующийВариантПоиска(Форма) Экспорт
	
	Если Форма.ВариантПоискаТоваров = "ПоУмолчанию" Тогда
		Если Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров Тогда
			Возврат "Стандартный";
		Иначе
			Возврат "Расширенный";
		КонецЕсли;
	Иначе
		Возврат Форма.ВариантПоискаТоваров;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФункцииДляРаботыМеханизмаПоиска

// Устанавливает отбор по строке поиска у динамического списка.
//
// Параметры:
//	 ЭлементыОтбора - Коллекция - коллекция элементов отбора,
//	 ЗначениеОтбора - Массив - массив значений отбора,
//	 ИспользованиеОтбора - Булево - флаг использования отбора.
//
Процедура УстановитьОтборСпискаПоСтрокеПоиска(ЭлементыОтбора, ЗначениеОтбора = Неопределено, ИспользованиеОтбора = Истина) Экспорт
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементыОтбора, "ПоискПоПодстроке", 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ссылка", ЗначениеОтбора, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ПоискПоПодстроке", ИспользованиеОтбора);
	
КонецПроцедуры

// Сбрасывает установленный отбор по строке поиска у списка номенклатуры.
//
// Параметры:
//	 Форма -ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
Процедура СнятьОтборПоСтрокеПоискаНоменклатуры(Форма) Экспорт
	
	Форма.КодОшибкиПоиска = "";
	Форма.ЕстьФильтрПоПоискуНоменклатуры = Ложь;
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	
	УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,, Ложь);
	
	Если Не ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		УстановитьОтборПоДиапазонуЦен(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииУстановкиИСбросаОтборов

// Устанавливает отбор по диапазону цен на список номенклатуры и 
// список характеристик в формах подборов.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура УстановитьОтборПоДиапазонуЦен(Форма) Экспорт
	
	ЭтоФормаПодбора = ЭтоФормаПодбора(Форма);
	
	Если Не ЭтоФормаПодбора Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор на список номенклатуры.
	ГруппаОтбораЦенаНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ЦеныНоменклатуры",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ГруппаОтборПоЦене = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораЦенаНоменклатура.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОт,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДо,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаДо));
	
	// Отбор на список характеристик.
	СписокВариантов = Новый СписокЗначений();
	СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры"));
	СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры"));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаНоменклатура,
		"ИспользованиеХарактеристик",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокВариантов,
		"ИспользованиеХарактеристик",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	// Установить фильтр на список характеристик.
	ГруппаОтбораЦенаХарактеристики = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
		"ЦенаХарактеристики",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаХарактеристики,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОт,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаХарактеристики,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДо,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаДо));
	
КонецПроцедуры

// Устанавливает значения доступности элементов фильтров в зависимости от значения
// флажка использования фильтров.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьДоступностьЭлементовФильтров(Форма) Экспорт
	
	ЭтоФормаВыбораХарактеристик = ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаПодбора = ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если Не ЭтоФормаВыбораХарактеристик Тогда
		
		Форма.Элементы.ОтборКатегорииИерархияПереключатель.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ИерархияНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ВидНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ВидНоменклатуры.АвтоОтметкаНезаполненного = Форма.ИспользоватьФильтры;
		
	КонецЕсли;
	
	Если ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		
		Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Форма.ИспользоватьФильтры;
		
	КонецЕсли;
	
	Форма.Элементы.ДеревоОтборовПредставление.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовОтбор.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовПредставлениеОтбора.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;

КонецПроцедуры

#КонецОбласти

#Область НастройкаОтображенияФормыПоВариантуПоиска

// Устанавлиает кнопку выбора по умолчанию в форме выбора номенклатуры в зависимости от варианта поиска.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура НазначитьКнопкуВыбораПоУмолчанию(Форма) Экспорт
	
	ВариантПоиска = ДействующийВариантПоиска(Форма);
	
	Если ВариантПоиска = "Расширенный" Тогда
		
		Форма.Элементы.СписокСтандартныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Ложь;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ВариантПоиска = "Стандартный" Тогда
		
		Форма.Элементы.СписокСтандартныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Истина;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения текущих страниц на формах подборов.
//
// Параметры:
//	 Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура УстановитьТекущиеСтраницыПоВариантуПоиска(Форма) Экспорт
	
	Если ДействующийВариантПоиска(Форма) = "Стандартный" Тогда
		СнятьОтборПоСтрокеПоискаНоменклатуры(Форма);
		Форма.СтрокаПоискаНоменклатура = "";
	КонецЕсли;
		
	ИмяСтраницы = ИмяТекущейСтраницыПоВариантуПоиска(Форма);
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ИмяСтраницы];
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Устанавливает значение свойства элемента формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента.
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = "толькопросмотр"
		И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("ФормаКлиентскогоПриложения, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
 	КонецЕсли;
 	
КонецПроцедуры // УстановитьСвойствоЭлементаФорма()

// Возвращает структуру необходимую для передачи данных о товаре в
// процедуры добавления товара в корзину.
//
// Параметры:
//	 Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//
// Возвращаемое значение:
//	 Структура - структура параметров товара.
//
Функция ПараметрыТовара(Номенклатура = Неопределено) Экспорт
	
	ПараметрыТовара = Новый Структура();
	ПараметрыТовара.Вставить("Номенклатура");
	ПараметрыТовара.Вставить("ТипНоменклатуры");
	ПараметрыТовара.Вставить("Характеристика");
	ПараметрыТовара.Вставить("ХарактеристикиИспользуются", Ложь);
	ПараметрыТовара.Вставить("Упаковка");
	ПараметрыТовара.Вставить("ВидЦены");
	ПараметрыТовара.Вставить("Цена",0);
	ПараметрыТовара.Вставить("Склад");
	ПараметрыТовара.Вставить("ДатаОтгрузки",'00010101');
	ПараметрыТовара.Вставить("СрокПоставки",0);
	ПараметрыТовара.Вставить("КоличествоУпаковок",0);
	ПараметрыТовара.Вставить("ЭтоТовар",Ложь);
	ПараметрыТовара.Вставить("ЭтоУслуга",Ложь);
	ПараметрыТовара.Вставить("УсловиеЦеныПоставщика");
	ПараметрыТовара.Вставить("НоменклатураПоставщика");
	ПараметрыТовара.Вставить("ЦеноваяГруппа");
	ПараметрыТовара.Вставить("ПроцентРучнойСкидки",0);
	ПараметрыТовара.Вставить("Продавец");
	ПараметрыТовара.Вставить("Помещение");
	
	Если Номенклатура <> Неопределено Тогда
		ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(Номенклатура);
	КонецЕсли; 
	
	Возврат ПараметрыТовара;
	
КонецФункции

#КонецОбласти

#КонецОбласти
