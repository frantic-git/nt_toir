////////////////////////////////////////////////////////////////////////////////
// торо_ОбщегоНазначенияКлиент: общие клиентские методы.
//
////////////////////////////////////////////////////////////////////////////////
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
	
	// Проверка версии компоненты СЛК.
	НеобходимаяВерсия = "3.0.18";
	Если НЕ слкМенеджерЗащиты.ПроверитьВерсиюКомпонентыСЛК(НеобходимаяВерсия) Тогда
		ШаблонСообщения = НСтр("ru = 'Устаревшая версия СЛК, для работы конфигурации необходима СЛК %1 или выше.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, НеобходимаяВерсия);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Проверка доступности ключей хотя бы одной серии.
	ЗакрытьПрограмму = Ложь;
	торо_СЛКСервер.ПроверитьЛицензииПередНачаломРаботыСистемы(ЗакрытьПрограмму);	
	Если ЗакрытьПрограмму Тогда
		ТекстПредупреждения = НСтр("ru = 'Лицензии не обнаружены. Запуск программы невозможен.'");
      ПараметрыПредупреждения = Новый Структура("ТекстПредупреждения", ТекстПредупреждения);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ПоказатьПредупреждениеОНевозможностиВходаВПрограмму", ЭтотОбъект, ПараметрыПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Наличие базовых прав для работы с системой.
	ДоступностьРоли = торо_ОбщегоНазначенияВызовСервера.ДоступностьРолиТОиРБазовыеПрава();	
	Если Не ДоступностьРоли Тогда
		ТекстПредупреждения = НСтр("ru = 'Роль ""Базовые права ТОиР"" не назначена, использование подсистемы ""ТОиР"" невозможно. Запуск конфигурации невозможен.'");
		ПараметрыПредупреждения = Новый Структура("ТекстПредупреждения", ТекстПредупреждения);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ПоказатьПредупреждениеОНевозможностиВходаВПрограмму", ЭтотОбъект, ПараметрыПредупреждения);
		Возврат;
	КонецЕсли; 
	
	// Проверка открытия нескольких сеансов.
	Если торо_ОбщегоНазначенияВызовСервера.ЕстьПравоУКонфигурации("АктивныеПользователи") Тогда
		ЗапретитьОткрытиеНесколькихСеансов = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР", "ЗапретитьОткрытиеНесколькихСеансов", Истина);

		Если ЗапретитьОткрытиеНесколькихСеансов Тогда
			ОткрываетсяНеПервыйСеанс = торо_ОбщегоНазначенияВызовСервера.ПроверитьОткрытиеНесколькихСеансов();
			
			Если ОткрываетсяНеПервыйСеанс Тогда
				ТекстПредупреждения = НСтр("ru = 'Пользователем с таким именем уже выполнен вход в систему'");
				ПараметрыПредупреждения = Новый Структура("ТекстПредупреждения", ТекстПредупреждения);
				Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ПоказатьПредупреждениеОНевозможностиВходаВПрограмму", ЭтотОбъект, ПараметрыПредупреждения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция предназначена для обхода зацикливания при вызове серверных функций
// из события ПриАктивизацииСтроки.
Функция СравнитьПараметрыТекущейСтроки(Ключ, Значение, Хранилище) Экспорт
	Если Хранилище = Неопределено Тогда
		Хранилище = Новый Соответствие;
	КонецЕсли;
	
	СохрЗначение = Хранилище.Получить(Ключ);
	Если СохрЗначение = Значение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Функция предназначена для обхода зацикливания при вызове серверных функций
// из события ПриАктивизацииСтроки.
Процедура ЗапомнитьПараметрыТекущейСтроки(Ключ, Значение, Хранилище) Экспорт
	Если Хранилище = Неопределено Тогда
		Хранилище = Новый Соответствие;
	КонецЕсли;
	
	СохрЗначение = Хранилище.Получить(Ключ);
	Если СохрЗначение <> Значение Тогда
		Хранилище.Удалить(Ключ);
		
		Хранилище.Вставить(Ключ, Значение);
	КонецЕсли;

КонецПроцедуры

// Рекурсивно заполняет массив значениями из указанной колонки дерева.
Процедура ДанныеФормыДеревоВМассив(МассивДанных,Дерево,ИмяКолонки) Экспорт
	
	Для Каждого ПодчиненнаяСтрока Из Дерево.ПолучитьЭлементы() Цикл
		МассивДанных.Добавить(ПодчиненнаяСтрока[ИмяКолонки]);
		ДанныеФормыДеревоВМассив(МассивДанных,ПодчиненнаяСтрока,ИмяКолонки);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик, вызываемый из процедуры ПередНачаломРаботыСистемы для показа сообщения,
// что воход в программу невозможен.
//
Процедура ПоказатьПредупреждениеОНевозможностиВходаВПрограмму(Результат, Параметры) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.торо_ВходВПрограммуНевозможен", Параметры,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти
