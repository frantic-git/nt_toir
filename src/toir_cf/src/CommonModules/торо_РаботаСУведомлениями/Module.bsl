////////////////////////////////////////////////////////////////////////////////
// торо_РаботаСУведомлениями: методы, для работы с уведомлениями и оповещениями
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПодпискиНаСобытия

// Регистрация уведомлений перед записью документа.
// Параметры:
//  Источник - ДокументОбъект - документ.
//  Отказ - Булево - отказ.
//  РежимЗаписи - РежимЗаписиДокумента - режим записи.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения.
Процедура торо_Обработка_ПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Источник.СтруктураДанных = Новый Структура;
	
	Источник.СтруктураДанных.Вставить("РежимЗаписи", РежимЗаписи);
	Источник.СтруктураДанных.Вставить("БылПроведен", Источник.Проведен);
	
КонецПроцедуры

// Регистрация уведомлений при записи документа.
// Параметры:
//  Источник - ДокументОбъект - документ.
//  Отказ - Булево - отказ.
Процедура торо_ОбработкаФормированияУведомленийПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Константы.торо_ИспользоватьУведомленияОСобытияхСистемы.Получить() Тогда
		СтруктураДанных = Источник.СтруктураДанных;
		СформироватьУведомленияОСтандартныхСобытияхДокументов(СтруктураДанных, Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаИВыводУведомлений

// Универсальная процедура формирования уведомлений с использованием справочника торо_СобытияУведомленийВДокументах.
// Результатом работы являются записи в регистре торо_ОчередьУведомлений.
//
// Параметры:
//		ПараметрыОповещения - СправочникСсылка.торо_СобытияУведомленийВДокументах - элемент справочника
//								с настройками оповещения.
//		СтруктураДанных - Структура - поля, используемые для подставновки в шаблон письма
// 							и для определения получателей (при необходимости).
//
Процедура ДобавитьЗаписиВОчередьУведомленийПоПараметрам(ПараметрыОповещения, СтруктураДанных) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	// Не читаем набор записей, т.к. запись будем выполнять через менеджеры записей.
	// Набор создан только для удобства заполнения.
	НаборЗаписей = РегистрыСведений.торо_ОчередьУведомлений.СоздатьНаборЗаписей();
	
	МассивПолучателей = ОпределитьМассивПолучателей(ПараметрыОповещения, СтруктураДанных);
	
	Если ПараметрыОповещения.ФормироватьВсплывающиеУведомления Тогда
		СформироватьУведомление(НаборЗаписей, СтруктураДанных, ПараметрыОповещения, МассивПолучателей, Перечисления.торо_СпособыУведомленияПользователей.УведомлениеВВидеВсплывающейПодсказки);
	КонецЕсли;
	
	Если ПараметрыОповещения.ФормироватьПочтовыеУведомления Тогда
		СформироватьУведомление(НаборЗаписей, СтруктураДанных, ПараметрыОповещения, МассивПолучателей, Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте);
	КонецЕсли;
	
	// Записываем по одной записи, чтобы не считываеть весь регистр в набор записей и не терять данные при параллельной записи.
	НачатьТранзакцию();
	ОшибкаВТранзакции = Ложь;
	Попытка
		Для каждого Строка из НаборЗаписей Цикл
			МенеджерЗаписи = РегистрыСведений.торо_ОчередьУведомлений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
	Исключение
		ОшибкаВТранзакции = Истина;
		ЗаписьЖурналаРегистрации("ФормированиеУведомлений", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
	
	Если ОшибкаВТранзакции Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Регламентное задание. Отправляет неотправленные почтовые уведомления.
Процедура ОтправитьПочтовыеУведомления() Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Если Не УчетнаяЗапись.ИспользоватьДляОтправки Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты, обратитесь к администратору системы.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НеСформированныеУведомления = ПолучитьНеСформированныеУведомления(Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте, УчетнаяЗапись.торо_МаксимальноеКоличествоОтправляемых);		
	
	УчетнаяЗаписьПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль");
	
	МассивНеОтправленных    = Новый Массив;
	МассивОтправленных = Новый Массив; 	
	
	Для каждого Уведомление Из НеСформированныеУведомления Цикл
		
		ПараметрыПисьма = Новый Структура;
		
		Если ЗначениеЗаполнено(УчетнаяЗаписьПароль) Тогда
			ПараметрыПисьма.Вставить("Пароль", УчетнаяЗаписьПароль);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Уведомление.АдресОтправления) Тогда
			ПараметрыПисьма.Вставить("Кому", Уведомление.АдресОтправления);
		Иначе
			ШаблонОшибки = НСтр("ru='У пользователя %1 не указано ни одного адреса электронной почты.'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Уведомление.Пользователь);
			
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ID_уведомления", Уведомление.ID_уведомления);
			СтруктураОшибки.Вставить("Пользователь", Уведомление.Пользователь);
			СтруктураОшибки.Вставить("Ошибка", Истина);
			СтруктураОшибки.Вставить("ОписаниеОшибки", ТекстОшибки);
			СтруктураОшибки.Вставить("СпособУведомления", Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте);
			СтруктураОшибки.Вставить("Источник", Уведомление.Источник);
			СтруктураОшибки.Вставить("ТелоПисьма", Уведомление.ТелоПисьма);
			СтруктураОшибки.Вставить("ТемаПисьма", Уведомление.ТемаПисьма);
			
			МассивНеОтправленных.Добавить(СтруктураОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Уведомление.ТемаПисьма) Тогда
			ПараметрыПисьма.Вставить("Тема", Уведомление.ТемаПисьма);
		Иначе
			ПараметрыПисьма.Вставить("Тема", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Уведомление.ТелоПисьма) Тогда
			ПараметрыПисьма.Вставить("Тело", Уведомление.ТелоПисьма);
		Иначе
			ПараметрыПисьма.Вставить("Тело", "");
		КонецЕсли;
		
		ПараметрыПисьма.Вставить("ID_уведомления", Уведомление.ID_уведомления);
		ПараметрыПисьма.Вставить("Пользователь"  , Уведомление.Пользователь);
		ПараметрыПисьма.Вставить("Источник"      , Уведомление.Источник);				
		
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
		ОписаниеОшибки = "";
		Попытка
			Результат = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
		Исключение
			ИдентификаторСообщения = Неопределено;
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
				Метаданные.ОбщиеМодули.торо_РаботаСУведомлениями,,ОписаниеОшибки);
		КонецПопытки;
			
		Если ОписаниеОшибки <> "" Или Результат.ОшибочныеПолучатели.Количество() > 0 Тогда
			
			Если ОписаниеОшибки <> "" Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка: %1'"), ОписаниеОшибки);
			Иначе 
				МасОшибок = Новый Массив;
				Для Каждого ТекСтрока из Результат.ОшибочныеПолучатели Цикл
					МасОшибок.Добавить(СтрШаблон(НСтр("ru='Адрес: %1, ошибка: %2'"), ТекСтрока.Ключ, ТекСтрока.Значение));
				КонецЦикла;
				ТекстОшибки = СтрСоединить(МасОшибок, "; ");
			КонецЕсли;	
			
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ID_уведомления", Уведомление.ID_уведомления);
			СтруктураОшибки.Вставить("Пользователь", Уведомление.Пользователь);
			СтруктураОшибки.Вставить("Ошибка", Истина);
			СтруктураОшибки.Вставить("ОписаниеОшибки", ТекстОшибки);
			СтруктураОшибки.Вставить("СпособУведомления", Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте);
			СтруктураОшибки.Вставить("Источник", Уведомление.Источник);
			СтруктураОшибки.Вставить("ТелоПисьма", Уведомление.ТелоПисьма);
			СтруктураОшибки.Вставить("ТемаПисьма", Уведомление.ТемаПисьма);
			
			МассивНеОтправленных.Добавить(СтруктураОшибки);
		Иначе
			
			СтруктураОтправленного = Новый Структура;
			СтруктураОтправленного.Вставить("ID_уведомления", ПараметрыПисьма.ID_уведомления);
			СтруктураОтправленного.Вставить("Пользователь", ПараметрыПисьма.Пользователь);
			СтруктураОтправленного.Вставить("СпособУведомления", Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте);
			СтруктураОтправленного.Вставить("Источник", ПараметрыПисьма.Источник);
			СтруктураОтправленного.Вставить("ТелоПисьма", ПараметрыПисьма.Тело);
			СтруктураОтправленного.Вставить("ТемаПисьма", ПараметрыПисьма.Тема);
			
			МассивОтправленных.Добавить(СтруктураОтправленного);								
		КонецЕсли;   		
		
	КонецЦикла;
	
	// указание ошибок для неотправленных
	РегистрыСведений.торо_ОчередьУведомлений.ЗаполнитьОписаниеОшибки(МассивНеОтправленных);
	ОтметитьУведомленияПользователя(МассивОтправленных); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в структуру данных значения всех реквизитов документа.
Процедура ЗаполнитьСтруктуруДанныхДокумента(СтруктураДанных, Документ, ПередЗаписью = Ложь) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		
		Если СтруктураДанных.Свойство(?(ПередЗаписью, "ПередЗаписью_", "") + Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураДанных.Вставить(?(ПередЗаписью, "ПередЗаписью_", "") + Реквизит.Имя, Документ[Реквизит.Имя]);
		
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
		
		Если СтруктураДанных.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураДанных.Вставить(Реквизит.Имя, Документ[Реквизит.Имя]);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура СформироватьУведомленияОСтандартныхСобытияхДокументов(СтруктураДанных, Источник) 
	
	Если ЗначениеЗаполнено(СтруктураДанных) Тогда
		
		СтруктураДанных.Вставить("ВидДокумента", Источник.Метаданные().Имя);
		
		МассивСобытий = Новый Массив;
		МассивСобытий.Добавить(Перечисления.торо_СобытияУведомленийПользователей.РегистрацияДокумента);
		МассивСобытий.Добавить(Перечисления.торо_СобытияУведомленийПользователей.ИзменениеДокумента);
		
		Выборка = ПолучитьВыборкуНастроекУведомлений(МассивСобытий, СтруктураДанных.ВидДокумента);
		
		Если Выборка.Количество() > 0 Тогда
			ЗаполнитьСтруктуруДанныхДокумента(СтруктураДанных, Источник);
			ДополнитьСтруктуруДанныхПоТипуДокумента(СтруктураДанных, Источник);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			// Если документ провели не в первый раз и событие - регистрация документа, тогда не отправлять уведомление.
			Если (СтруктураДанных.БылПроведен = Истина ИЛИ Источник.Проведен = Ложь) И Выборка.Событие = Перечисления.торо_СобытияУведомленийПользователей.РегистрацияДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьЗаписиВОчередьУведомленийПоПараметрам(Выборка.ПараметрыОповещения, СтруктураДанных);
		КонецЦикла;
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура СформироватьУведомленияСобытияхСогласованияДокументов(СтруктураДанных, Источник)  Экспорт
	
	Если ЗначениеЗаполнено(СтруктураДанных) Тогда
		
		СтруктураДанных.Вставить("ВидДокумента", Источник.Метаданные().Имя);
		
		МассивСобытий = Новый Массив;
		МассивСобытий.Добавить(Перечисления.торо_СобытияУведомленийПользователей.СменаСтатусаСогласования);
		
		Выборка = ПолучитьВыборкуНастроекУведомлений(МассивСобытий, СтруктураДанных.ВидДокумента);

		Если Выборка.Количество() > 0 Тогда
			
			ЗаполнитьСтруктуруДанныхДокумента(СтруктураДанных, Источник);
			ДополнитьСтруктуруДанныхПоТипуДокумента(СтруктураДанных);
			ДополнитьСтруктуруДанныхСледующимиСтатусами(СтруктураДанных);
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	торо_ИсторияСтатусовСогласованияДокументовСрезПоследних.Пользователь КАК Согласующий
			                      |ИЗ
			                      |	РегистрСведений.торо_ИсторияСтатусовСогласованияДокументов.СрезПоследних(, СогласуемыйДокумент = &Ссылка) КАК торо_ИсторияСтатусовСогласованияДокументовСрезПоследних
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	торо_ИсторияСтатусовСогласованияДокументовСрезПоследних.Период УБЫВ
			                      |;
			                      |
			                      |////////////////////////////////////////////////////////////////////////////////
			                      |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	торо_НастройкиСтатусовСогласованияДокументов.ШаблонУведомления КАК ШаблонУведомления
			                      |ИЗ
			                      |	РегистрСведений.торо_НастройкиСтатусовСогласованияДокументов КАК торо_НастройкиСтатусовСогласованияДокументов
			                      |ГДЕ
			                      |	торо_НастройкиСтатусовСогласованияДокументов.СпособСогласования = &СпособСогласования
			                      |	И торо_НастройкиСтатусовСогласованияДокументов.Статус = &СтатусДокумента");
			Запрос.УстановитьПараметр("Ссылка", СтруктураДанных.Ссылка);
			Запрос.УстановитьПараметр("СпособСогласования", СтруктураДанных.СпособСогласования);
			Запрос.УстановитьПараметр("СтатусДокумента", СтруктураДанных.СтатусДокумента);
			РезЗапроса = Запрос.ВыполнитьПакет();
			ВыборкаСогласующих = РезЗапроса[0].Выбрать();
			Если ВыборкаСогласующих.Следующий() Тогда
				СтруктураДанных.Вставить("Согласующий", ВыборкаСогласующих.Согласующий);
			КонецЕсли;
			ВыборкаШаблонов = РезЗапроса[1].Выбрать();
			Если ВыборкаШаблонов.Следующий() И ЗначениеЗаполнено(ВыборкаШаблонов.ШаблонУведомления) Тогда 
				СтруктураДанных.Вставить("ШаблонСообщения", ВыборкаШаблонов.ШаблонУведомления);
			КонецЕсли;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			ДобавитьЗаписиВОчередьУведомленийПоПараметрам(Выборка.ПараметрыОповещения, СтруктураДанных);
		КонецЦикла;
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура СформироватьУведомленияОСобытияхУтвержденияЗаказовНаВП(Источник) Экспорт
	
	СтруктураДанных = Новый Структура();
	
	Если Не Константы.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление.Получить() Тогда
		
		Возврат;
	КонецЕсли;
	
	СтруктураДанных.Вставить("ВидДокумента", Источник.Метаданные().Имя);
	
	МассивСобытий = Новый Массив();
	Если Источник.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении Тогда
		
		МассивСобытий.Добавить(Перечисления.торо_СобытияУведомленийПользователей.ОтправкаНаУтверждение);
		
	ИначеЕсли Источник.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден Тогда
		
		МассивСобытий.Добавить(Перечисления.торо_СобытияУведомленийПользователей.УспешноеУтверждение);
		
	ИначеЕсли Источник.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Отклонен
		Или Источник.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.ВозвращенНаДоработку
		Или Источник.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично Тогда
		
		МассивСобытий.Добавить(Перечисления.торо_СобытияУведомленийПользователей.НеуспешноеУтверждение);
		
	КонецЕсли;

	Выборка = ПолучитьВыборкуНастроекУведомлений(МассивСобытий, СтруктураДанных.ВидДокумента);

	Если Выборка.Количество() > 0 Тогда
		ЗаполнитьСтруктуруДанныхДокумента(СтруктураДанных, Источник);
		ДополнитьСтруктуруДанныхДаннымиКУтверждениюЗаказовНаВП(СтруктураДанных, Источник);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ДобавитьЗаписиВОчередьУведомленийПоПараметрам(Выборка.ПараметрыОповещения, СтруктураДанных);
	КонецЦикла;
		
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	
	Если ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ПолучатьУведомленияВВидеВсплывающихПодсказок", Истина) Тогда
		
		// Проверка всплывающих уведомлений пользователю.
		Оповещение = СерверныеОповещения.НовоеСерверноеОповещение(торо_РаботаСУведомлениямиКлиентСервер.ИмяСерверногоОповещения());
		Оповещение.ИмяМодуляОтправки  = "торо_РаботаСУведомлениями";
		Оповещение.ИмяМодуляПолучения = "торо_РаботаСУведомлениямиКлиент";
		Оповещение.ПериодПроверки = 60;
		Оповещения.Вставить(Оповещение.Имя, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриОтправкеСерверногоОповещения
Процедура ПриОтправкеСерверногоОповещения(ИмяОповещения, ВариантыПараметров) Экспорт
	
	ТаблицаУведомлений = ПолучитьНеСформированныеУведомления(ПредопределенноеЗначение("Перечисление.торо_СпособыУведомленияПользователей.УведомлениеВВидеВсплывающейПодсказки"), 1000);
	ТаблицаУведомлений.Индексы.Добавить("ИдентификаторПользователяИБ");
	
	Для каждого ВариантПараметров Из ВариантыПараметров Цикл
		Для Каждого Адресат Из ВариантПараметров.Адресаты Цикл
			
			СтрокиУведомлений = ТаблицаУведомлений.НайтиСтроки(Новый Структура("ИдентификаторПользователяИБ", Адресат.Ключ));
			Если СтрокиУведомлений.Количество() = 0 Тогда
				// Для этого пользователя уведомлений нет.
				Продолжить;
			КонецЕсли;
			
			МассивДляОтправки = Новый Массив;
			Для каждого СтрокаУведомления из СтрокиУведомлений Цикл
				СтруктураУведомления = Новый Структура("ID_уведомления, Источник, ТемаПисьма, ТелоПисьма");
				ЗаполнитьЗначенияСвойств(СтруктураУведомления, СтрокаУведомления);
				МассивДляОтправки.Добавить(СтруктураУведомления);
			КонецЦикла;
			
			АдресатыДляОтправки = Новый Соответствие;
			АдресатыДляОтправки.Вставить(Адресат.Ключ, Адресат.Значение);
			
			СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяОповещения, МассивДляОтправки, АдресатыДляОтправки);
			ОтметитьУведомленияПользователя(СтрокиУведомлений);
			
		КонецЦикла;		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтправкаИВыводУведомлений

Процедура СформироватьУведомление(НаборЗаписей, СтруктураДанных, Событие, МассивПолучателей, СпособУведомления)
	
	СсылкаНаИсточник = Неопределено;
	СтруктураДанных.Свойство("Ссылка", СсылкаНаИсточник);
	
	ТолькоПользователи = (СпособУведомления <> Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте);
	
	Для каждого СтруктураПолучателя из МассивПолучателей Цикл
		
		Если ТолькоПользователи И ТипЗнч(СтруктураПолучателя.Получатель) <> Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;
		
		ID_уведомления = Новый  УникальныйИдентификатор;
		
		ШаблонСообщения = ?(СтруктураДанных.Свойство("ШаблонСообщения"), СтруктураДанных.ШаблонСообщения, Событие.ШаблонСообщения);
		СтруктураПисьма = ПолучитьСодержимоеПисьмаПоШаблону(ШаблонСообщения, СтруктураПолучателя.Получатель, СтруктураДанных);
		
		// Была проблема с возможным созданием записей с одинаковыми измерениями, что вело к ошибке
		// Исправлено следующим костылем:
		ИзмеренияРегистраСтрокой = "Пользователь, ID_уведомления, СпособУведомления, Источник";
		НайденныеСтрокиССовпадающимиИзмерениями = НаборЗаписей.Выгрузить().НайтиСтроки(Новый Структура(ИзмеренияРегистраСтрокой, СтруктураПолучателя.Получатель, Строка(ID_уведомления), СпособУведомления, СсылкаНаИсточник));
		Если НайденныеСтрокиССовпадающимиИзмерениями.Количество() > 0 Тогда
			УжеЗаписаныТемаИТекстПисьма = Ложь;
			Для Каждого НайденнаяСтрока Из НайденныеСтрокиССовпадающимиИзмерениями Цикл
				Если НайденнаяСтрока.ТемаПисьма = СтруктураПисьма.ТемаУведомления И НайденнаяСтрока.ТелоПисьма = СтруктураПисьма.ТелоУведомления Тогда
					УжеЗаписаныТемаИТекстПисьма = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если УжеЗаписаныТемаИТекстПисьма Тогда
				Продолжить;
			Иначе
				ID_уведомления = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЕсли;

		// Добавляем дополнительные сведения для тела письма, связанные с получателем.
		Если СтруктураПолучателя.Свойство("ДополнительныеПараметры") Тогда
			Для каждого ЭлементДоп из СтруктураПолучателя.ДополнительныеПараметры Цикл
				СтруктураДанных.Вставить(ЭлементДоп.Ключ, ЭлементДоп.Значение);
			КонецЦикла;
		КонецЕсли;
		
		НС = НаборЗаписей.Добавить();
		
		НС.ТемаПисьма        = СтруктураПисьма.ТемаУведомления;
		НС.ТелоПисьма        = СтруктураПисьма.ТелоУведомления;
		
		НС.ID_уведомления    = ID_уведомления;
		НС.Источник          = СсылкаНаИсточник;
		НС.Пользователь      = СтруктураПолучателя.Получатель;
		НС.СпособУведомления = СпособУведомления;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет шаблон письма данными.
// Параметры:
//  Шаблон - СправочникСсылка.торо_ШаблоныСообщенийИУведомлений - шаблон письма.
//  Адресат - Строка - представление получателя.
//  СтруктураДанных - Структура - Структура параметров для подстановки.
// Возвращаемое значение:
//  Структура - структура письма с полями ТемаУведомления, ТелоУведомления.
Функция ПолучитьСодержимоеПисьмаПоШаблону(Шаблон, Адресат, СтруктураДанных)
	
	СтруктураПисьма = Новый Структура;
	
	ТемаПисьма = Шаблон.ТемаПисьма;
	ЗаменитьТегиНаДанные(ТемаПисьма,СтруктураДанных,Адресат);
	
	СтруктураПисьма.Вставить("ТемаУведомления", ТемаПисьма);
	
	ТелоПисьма = Шаблон.ТелоПисьма;
	ЗаменитьТегиНаДанные(ТелоПисьма,СтруктураДанных,Адресат);
	
	СтруктураПисьма.Вставить("ТелоУведомления", ТелоПисьма);
	
	Возврат СтруктураПисьма;
	
КонецФункции

Процедура ЗаменитьТегиНаДанные(Строка, СтруктураДанных, Адресат)
	
	Для каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		Строка = СтрЗаменить(Строка,"%" + ЭлементСтруктуры.Ключ + "%", ЭлементСтруктуры.Значение);
	КонецЦикла; 
	
	Строка = СтрЗаменить(Строка, "%Адресат%",Адресат);
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

// Возвращает неотправленные уведомления.
//
// Параметры:
//  СпособУведомления - ПеречислениеСсылка.торо_СпособыУведомленияПользователей - жеаемый способ уведомления.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого получаются уведомления.
//  МаксимальноеКоличество - Число - ограничение на количество получаемых уведомлений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - неотправленные уведомления.
//
Функция ПолучитьНеСформированныеУведомления(СпособУведомления, МаксимальноеКоличество = Неопределено)
	
	ТаблицаУведомлений = РегистрыСведений.торо_ОчередьУведомлений.ПолучитьНеОтправленныеУведомления(СпособУведомления, Неопределено, МаксимальноеКоличество);
	
	Возврат ТаблицаУведомлений;
	
КонецФункции

// Отмечает всплывающие уведомления как отправленные.
//
// Параметры:
//  МассивУведомлений - Массив - массив уведомлений.
//
Процедура ОтметитьУведомленияПользователя(МассивУведомлений) 
	
	Если МассивУведомлений.Количество() > 0 Тогда
		РегистрыСведений.торо_УведомленияПользователей.ЗаписатьУведомления(МассивУведомлений);
		РегистрыСведений.торо_ИсторияУведомленийПользователей.ЗаписатьУведомления(МассивУведомлений);
		РегистрыСведений.торо_ОчередьУведомлений.УдалитьУведомления(МассивУведомлений);
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДанныхСледующимиСтатусами(СтруктураДанных)
	СписокСледующихСтатусов = торо_РаботаССогласованиями.ПолучитьСписокСледующихСтатусовДокумента(СтруктураДанных.СпособСогласования, СтруктураДанных.СтатусДокумента);
	СписокСтатусов = "";
	Для Каждого ТекСтатус Из СписокСледующихСтатусов Цикл 
		СписокСтатусов = СписокСтатусов + Строка(ТекСтатус) + "; ";
	КонецЦикла;
	
	СтруктураДанных.Вставить("СледующийСтатусДокумента", СписокСтатусов);
	
КонецПроцедуры

Функция ПолучитьВыборкуНастроекУведомлений(МассивСобытий, ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НастройкиУведомлений.СобытиеПоДокументу КАК ПараметрыОповещения,
		|	торо_НастройкиУведомлений.Событие КАК Событие
		|ИЗ
		|	РегистрСведений.торо_НастройкиУведомлений КАК торо_НастройкиУведомлений
		|ГДЕ
		|	торо_НастройкиУведомлений.ВидДокумента = &ВидДокумента
		|	И торо_НастройкиУведомлений.Событие В(&Событие)";
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Событие", МассивСобытий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

Процедура ДополнитьСтруктуруДанныхПоТипуДокумента(СтруктураДанных, Источник = Неопределено)
	
	ФО_ИспользоватьУпрощеннуюФормуДефекта = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУпрощеннуюФормуДефекта");
	
	Если СтруктураДанных.ВидДокумента = "торо_ВыявленныеДефекты" Тогда  // Проверим на уведомление по видам дефекта
		СтрокаУведомления = "";
		СтрокаУведомленияРасшир = "";
		ПодразделениеИсполнительИзТЧ = Справочники.СтруктураПредприятия.ПустаяСсылка();
		
		Для Каждого СтрокаТаблицы Из СтруктураДанных.Ссылка.СписокДефектов Цикл
			
			Если НЕ ЗначениеЗаполнено(ПодразделениеИсполнительИзТЧ) Тогда
				ПодразделениеИсполнительИзТЧ = СтрокаТаблицы.ПодразделениеИсполнитель;
			КонецЕсли;
			
			СтрокаУведомления = СтрокаУведомления + "
			|" + ?(СтрокаТаблицы.ОтказавшийЭлемент = СтрокаТаблицы.ОбъектРемонта, "	", "	" + СтрокаТаблицы.ОбъектРемонта + "	|	") + СтрокаТаблицы.ОтказавшийЭлемент + "	|	"  + СтрокаТаблицы.КритичностьДефекта + "	|	" + СтрокаТаблицы.ВидДефекта;
			
			СтрокаУведомленияРасшир = СтрокаУведомленияРасшир + "
			|" + ?(СтрокаТаблицы.ОтказавшийЭлемент = СтрокаТаблицы.ОбъектРемонта, "	", "	" + СтрокаТаблицы.ОбъектРемонта + "	|	") + СтрокаТаблицы.ОтказавшийЭлемент + "	|	"  + СтрокаТаблицы.КритичностьДефекта + "	|	" + СтрокаТаблицы.ВидДефекта + "	|	" + СтрокаТаблицы.ДефектОписание + "	|	" + СтрокаТаблицы.ПоследствияДефекта;
			
			Если Не СтруктураДанных.Свойство("ВидДефекта") Тогда
				
				СтруктураДанных.Вставить("ВидДефекта");
				
			КонецЕсли;
			
		КонецЦикла;
				
		Если НЕ СтрокаУведомления = "" Тогда
				
			СтруктураДанных.Вставить("ДефектныеОбъектыРемонта", СтрокаУведомления);
			
		КонецЕсли;
		
		Если НЕ СтрокаУведомленияРасшир = "" Тогда
				
			СтруктураДанных.Вставить("ДефектныеОбъектыРемонтаСОписаниемИПоследствиями", СтрокаУведомленияРасшир);
			
		КонецЕсли;
		
		Если НЕ ФО_ИспользоватьУпрощеннуюФормуДефекта Тогда
			СтруктураДанных.Вставить("ПодразделениеИсполнитель", ПодразделениеИсполнительИзТЧ);
		КонецЕсли;
	ИначеЕсли СтруктураДанных.ВидДокумента = "торо_ЗаявкаНаРемонт" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID
		               |ПОМЕСТИТЬ ВТ_РемонтыЗаявки
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = &ЗаявкаНаРемонт
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_РемонтыЗаявки.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_РемонтыЗаявки.ДатаНачала КАК ДатаНачала,
		               |	ВТ_РемонтыЗаявки.ДатаОкончания КАК ДатаОкончания,
		               |	торо_ВыявленныеДефектыСписокДефектов.ДефектОписание КАК ДефектОписание
		               |ИЗ
		               |	ВТ_РемонтыЗаявки КАК ВТ_РемонтыЗаявки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		               |		ПО ВТ_РемонтыЗаявки.ID = торо_ВыявленныеДефектыСписокДефектов.ID
		               |			И (НЕ торо_ВыявленныеДефектыСписокДефектов.ДефектОписание = """")";
		
		Запрос.УстановитьПараметр("ЗаявкаНаРемонт", СтруктураДанных.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();
		ОписанияДефектов = "";
		НомерДефекта = 1;
		Для каждого ТекущаяСтрокаТЧ Из Результат Цикл
			ШаблонОписанияДефекта = НСтр("ru='%1) %2 (%3-%4): %5;'");
			ТекстОписанияДефекта = СтрШаблон(ШаблонОписанияДефекта, НомерДефекта, ТекущаяСтрокаТЧ.ОбъектРемонта, ТекущаяСтрокаТЧ.ДатаНачала, ТекущаяСтрокаТЧ.ДатаОкончания, ТекущаяСтрокаТЧ.ДефектОписание);
		    ОписанияДефектов = ОписанияДефектов + ТекстОписанияДефекта + Символы.ПС;
			
			НомерДефекта = НомерДефекта + 1;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОписанияДефектов) Тогда
		    ОписанияДефектов = Символы.ПС + "Описания дефектов:" + Символы.ПС + ОписанияДефектов;
		КонецЕсли;
		
		СтруктураДанных.Вставить("ОписанияДефектов", ОписанияДефектов);
		СтруктураДанных.Вставить("ОбъектРемонта", СтруктураДанных.ОбъектыРемонтаСтрокой);
	ИначеЕсли СтруктураДанных.ВидДокумента = "торо_УчетКонтролируемыхПоказателей" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_УчетКонтролируемыхПоказателейПоказатели.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_УчетКонтролируемыхПоказателейПоказатели.Показатель КАК Показатель,
		               |	торо_УчетКонтролируемыхПоказателейПоказатели.Значение КАК Значение,
		               |	торо_УчетКонтролируемыхПоказателейПоказатели.Показатель.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		               |ПОМЕСТИТЬ ВТ_ДанныеДокумента
		               |ИЗ
		               |	Документ.торо_УчетКонтролируемыхПоказателей.Показатели КАК торо_УчетКонтролируемыхПоказателейПоказатели
		               |ГДЕ
		               |	торо_УчетКонтролируемыхПоказателейПоказатели.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеДокумента.ОбъектРемонта) КАК ОбъектРемонта,
		               |	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеДокумента.Показатель) КАК Показатель,
		               |	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеДокумента.Значение) КАК Значение,
		               |	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеДокумента.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		               |ИЗ
		               |	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента";
		
		Запрос.УстановитьПараметр("Ссылка", СтруктураДанных.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			СтруктураДанных.Вставить("ЗначенияПоказателейОбъектовРемонта", "");
		    Возврат;
		КонецЕсли;
		
		ЗначенияПоказателейОбъектовРемонта = "";
		НомерСтроки = 1;
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ШаблонСтроки = НСтр("ru = '%1) %2, значение показателя ''%3'' - %4 %5;'");
			ТекстСтроки = СтрШаблон(ШаблонСтроки, НомерСтроки, ВыборкаЗапроса.ОбъектРемонта, ВыборкаЗапроса.Показатель, ВыборкаЗапроса.Значение, ВыборкаЗапроса.ЕдиницаИзмерения);
		    ЗначенияПоказателейОбъектовРемонта = ЗначенияПоказателейОбъектовРемонта + ТекстСтроки + Символы.ПС;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЗначенияПоказателейОбъектовРемонта) Тогда
		    ЗначенияПоказателейОбъектовРемонта = "Значения показателей объектов ремонта:" + Символы.ПС + ЗначенияПоказателейОбъектовРемонта;
		КонецЕсли;
		
		СтруктураДанных.Вставить("ЗначенияПоказателейОбъектовРемонта", ЗначенияПоказателейОбъектовРемонта);
		СтруктураДанных.Вставить("ОбъектРемонта", СтруктураДанных.ОбъектыРемонтаСтрокой);
	ИначеЕсли СтруктураДанных.ВидДокумента = "ЗаказНаВнутреннееПотребление" Тогда
		ДополнитьСтруктуруДанныхДаннымиКУтверждениюЗаказовНаВП(СтруктураДанных, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДанныхДаннымиКУтверждениюЗаказовНаВП(СтруктураДанных, Источник)

	СтруктураДанных.Вставить("СтатусУтверждения", Источник.торо_СтатусУтверждения);
	
	СтруктураДанных.Вставить("КомментарииКУтверждению", "");
	
	ХарактеристикиИспользуются = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних.Пользователь КАК Пользователь,
	               |	торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних.КодСтрокиНоменклатуры КАК КодСтрокиНоменклатуры,
	               |	торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних.Комментарий КАК Комментарий,
	               |	торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних.Период КАК Период
	               |ПОМЕСТИТЬ ВТ_АвторыКомментариевСрезПоследних
	               |ИЗ
	               |	РегистрСведений.торо_КомментарииКУтверждениюЗаказовНаВП.СрезПоследних(, ЗаказНаВнутреннееПотребление = &ЗаказНаВП) КАК торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВнутреннееПотребление,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_АвторыКомментариевСрезПоследних.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	МАКСИМУМ(ВТ_АвторыКомментариевСрезПоследних.Период) КАК Период
	               |ПОМЕСТИТЬ ВТ_ПериодыПоследнихАвторовКомментариев
	               |ИЗ
	               |	ВТ_АвторыКомментариевСрезПоследних КАК ВТ_АвторыКомментариевСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_АвторыКомментариевСрезПоследних.ЗаказНаВнутреннееПотребление
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВнутреннееПотребление,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_АвторыКомментариевСрезПоследних.Пользователь КАК Пользователь
	               |ПОМЕСТИТЬ ВТ_ПоследнийАвторКомментариев
	               |ИЗ
	               |	ВТ_АвторыКомментариевСрезПоследних КАК ВТ_АвторыКомментариевСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПоследнихАвторовКомментариев КАК ВТ_ПериодыПоследнихАвторовКомментариев
	               |		ПО ВТ_АвторыКомментариевСрезПоследних.ЗаказНаВнутреннееПотребление = ВТ_ПериодыПоследнихАвторовКомментариев.ЗаказНаВнутреннееПотребление
	               |			И ВТ_АвторыКомментариевСрезПоследних.Период = ВТ_ПериодыПоследнихАвторовКомментариев.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_АвторыКомментариевСрезПоследних.Период КАК Период,
	               |	ВТ_АвторыКомментариевСрезПоследних.Пользователь КАК Пользователь,
	               |	ВТ_АвторыКомментариевСрезПоследних.Комментарий КАК Комментарий,
	               |	ВТ_АвторыКомментариевСрезПоследних.КодСтрокиНоменклатуры КАК КодСтрокиНоменклатуры,
	               |	ПРЕДСТАВЛЕНИЕ(ЗаказНаВнутреннееПотреблениеТовары.Номенклатура) КАК Номенклатура,
	               |	ПРЕДСТАВЛЕНИЕ(ЗаказНаВнутреннееПотреблениеТовары.Характеристика) КАК Характеристика
	               |ИЗ
	               |	ВТ_АвторыКомментариевСрезПоследних КАК ВТ_АвторыКомментариевСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследнийАвторКомментариев КАК ВТ_ПоследнийАвторКомментариев
	               |		ПО ВТ_АвторыКомментариевСрезПоследних.Пользователь = ВТ_ПоследнийАвторКомментариев.Пользователь
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	               |		ПО ВТ_АвторыКомментариевСрезПоследних.ЗаказНаВнутреннееПотребление = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
	               |			И ВТ_АвторыКомментариевСрезПоследних.КодСтрокиНоменклатуры = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки
	               |ГДЕ
	               |	(НЕ ЗаказНаВнутреннееПотреблениеТовары.КодСтроки ЕСТЬ NULL
	               |			ИЛИ ВТ_АвторыКомментариевСрезПоследних.КодСтрокиНоменклатуры = 0)";
	
	Запрос.УстановитьПараметр("ЗаказНаВП", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ШаблонКомментария = НСтр("ru = '%1) %2%3: %4'");
	КомментарийКДокументу = "";
	КомментарииКУтверждению = "";
	
	Счетчик = 1;
	
	ВыборкаКомментариев = РезультатЗапроса.Выбрать();
	Пока ВыборкаКомментариев.Следующий() Цикл
		Если ВыборкаКомментариев.КодСтрокиНоменклатуры = 0 Тогда
		    КомментарийКДокументу = ВыборкаКомментариев.Комментарий;
			Продолжить;
		КонецЕсли;
		
		СтрокаКомментария = СтрШаблон(ШаблонКомментария, Счетчик, ВыборкаКомментариев.Номенклатура,
										?(Не ХарактеристикиИспользуются Или Не ЗначениеЗаполнено(ВыборкаКомментариев.Характеристика), "", ", " + ВыборкаКомментариев.Характеристика),
										ВыборкаКомментариев.Комментарий);
										
		КомментарииКУтверждению = КомментарииКУтверждению + СтрокаКомментария + Символы.ПС;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КомментарийКДокументу) И ЗначениеЗаполнено(КомментарииКУтверждению) Тогда
		ШаблонКомментариев = НСтр("ru = 'Комментарий по документу: %1.
										|
										|Комментарии к строкам:
										|%2'");
		СтруктураДанных.КомментарииКУтверждению = СтрШаблон(ШаблонКомментариев, КомментарийКДокументу, КомментарииКУтверждению);
	ИначеЕсли ЗначениеЗаполнено(КомментарийКДокументу) И Не ЗначениеЗаполнено(КомментарииКУтверждению) Тогда
		ШаблонКомментариев = НСтр("ru = 'Комментарий по документу: %1.
										|
										|Комментарии к строкам: -'");
		СтруктураДанных.КомментарииКУтверждению = СтрШаблон(ШаблонКомментариев, КомментарийКДокументу);
	ИначеЕсли Не ЗначениеЗаполнено(КомментарийКДокументу) И ЗначениеЗаполнено(КомментарииКУтверждению) Тогда
		ШаблонКомментариев = НСтр("ru = 'Комментарий по документу: -
										|Комментарии к строкам:
										|%1'");
		СтруктураДанных.КомментарииКУтверждению = СтрШаблон(ШаблонКомментариев, КомментарииКУтверждению);
	Иначе
		СтруктураДанных.КомментарииКУтверждению = НСтр("ru = 'Комментарий по документу: -
															|Комментарии к строкам: -'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет список получателей из элемента справочника торо_СобытияУведомленийВДокументах,
// с учетом контекста.
//
// Параметры:
//		Событие - СправочникСсылка.торо_СобытияУведомленийВДокументах  - параметры оповещения.
//		СтруктураДанных - Структура - конекст, сведения о документе, для которого формируется уведомление.
//
// Возвращаемое значение:
//		Массив (Структура) - массив структур с полями:
//			*Получатель - Строка, СправочникСсылка.Пользователи - получатель уведомления, строка значит e-mail.
//			*ДополнительныеПараметры - Структура - (не обязательное) структура дополнительных полей для подстановки 
//																в шаблон письма этому получателю.
//
Функция ОпределитьМассивПолучателей(Событие, СтруктураДанных) 
	
	МассивПолучателей = Новый Массив;
	
	Для каждого Строка из Событие.Оповещаемые Цикл
		
		Если НЕ ФормироватьУведомлениеДляЭтогоПолучателя(Строка, Событие, СтруктураДанных) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Строка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СтруктураПолучателя = Новый Структура("Получатель", Строка.Пользователь);
			МассивПолучателей.Добавить(СтруктураПолучателя);
			
		ИначеЕсли ТипЗнч(Строка.Пользователь) = Тип("Строка") Тогда
			
			Если Строка.Пользователь = "Ответственный по документу" Тогда
				
				Если СтруктураДанных.Свойство("Ответственный") Тогда
					СтруктураПолучателя = Новый Структура("Получатель", СтруктураДанных.Ответственный);
					МассивПолучателей.Добавить(СтруктураПолучателя);
				КонецЕсли;
				
			ИначеЕсли Строка.Пользователь = "Сотрудники бригады-исполнителя" Тогда
				
				ОповещаемыеРемонтнойБригады = ПолучитьОповещаемыхРемонтнойБригады(СтруктураДанных);
				Для каждого Оповещаемый Из ОповещаемыеРемонтнойБригады Цикл
					СтруктураПолучателя = Новый Структура("Получатель", Оповещаемый);
					МассивПолучателей.Добавить(СтруктураПолучателя);
				КонецЦикла;
				
			ИначеЕсли Строка.Пользователь = "Согласующие" Тогда
				
				МассивСогласующих = ПолучитьМассивСогласущихДляОтправкиУведомленим(СтруктураДанных);
				Для каждого Элемент из МассивСогласующих Цикл
					ДополнительныеПараметры = Новый Структура("СледующийСтатусДокумента", Элемент.СледующийСтатусДокумента);
					Получатель = Элемент.Пользователь;
					Если  Получатель = "Ответственный по документу" И СтруктураДанных.Свойство("Ответственный") Тогда
						Получатель = СтруктураДанных.Ответственный;
					КонецЕсли; 
					СтруктураПолучателя = Новый Структура("Получатель, ДополнительныеПараметры", Получатель, ДополнительныеПараметры);
					МассивПолучателей.Добавить(СтруктураПолучателя);
				КонецЦикла;
				
			// Ветка для получения e-mail адресов со вкладки "Оповещаемые лица" настройки способа согласования.
			// Получаем адреса всех оповещаемых лиц следующих статусов документа. Так как указаны не пользователи,
			// имеет смысл только для уведомлений на почту.
			ИначеЕсли Строка.Пользователь = "Оповещаемые" Тогда
				
				МассивОповещаемых = ПолучитьМассивОповещаемыхСогласованияДляОтправкиУведомления(СтруктураДанных);
				Для каждого Элемент из МассивОповещаемых Цикл
				   ДополнительныеПараметры = Новый Структура("СледующийСтатусДокумента", Элемент.СледующийСтатусДокумента);
					СтруктураПолучателя = Новый Структура("Получатель, ДополнительныеПараметры", Элемент.Пользователь, ДополнительныеПараметры);
					МассивПолучателей.Добавить(СтруктураПолучателя);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПолучателей;
	
КонецФункции

// Проверяет значение подразделения при установленном флаге "Разделять получателей по подразделениям"
// и организации при установленном флаге "Разделять получателей по организациям"
Функция ФормироватьУведомлениеДляЭтогоПолучателя(СтрокаОповещаемых, Событие, СтруктураДанных)
	
	ВозвращаемоеЗначение = Истина;
	
	Если Событие.РазделятьПолучателейПоПодразделениям Тогда
		
		ПодразделениеДляОтбора = Неопределено;
		
		Если СтруктураДанных.Свойство("ПодразделениеИсполнитель") Тогда
			ПодразделениеДляОтбора = СтруктураДанных.ПодразделениеИсполнитель;
		ИначеЕсли СтруктураДанных.Свойство("Подразделение") Тогда
			ПодразделениеДляОтбора = СтруктураДанных.Подразделение;
		КонецЕсли;
		
		Если ПодразделениеДляОтбора <> Неопределено
			И ЗначениеЗаполнено(СтрокаОповещаемых.Подразделение) 
			И СтрокаОповещаемых.Подразделение <> ПодразделениеДляОтбора Тогда
			ВозвращаемоеЗначение = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Если Событие.РазделятьПолучателейПоОрганизациям Тогда
		
		ОрганизацияДляОтбора = Неопределено;
		Если СтруктураДанных.Свойство("Организация") Тогда
			ОрганизацияДляОтбора = СтруктураДанных.Организация;
		КонецЕсли;
		
		Если ОрганизацияДляОтбора <> Неопределено
			И ЗначениеЗаполнено(СтрокаОповещаемых.Организация)
			И СтрокаОповещаемых.Организация <> ОрганизацияДляОтбора Тогда 
			ВозвращаемоеЗначение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьОповещаемыхРемонтнойБригады(СтруктураДанных)
	
	Результат = Новый Массив;
	
	Если Не СтруктураДанных.Свойство("ВидДокумента") 
		Или Не СтруктураДанных.ВидДокумента = "торо_ЗаявкаНаРемонт" Тогда
		Возврат Результат;
	КонецЕсли;
	
	// При заданном пользователе сотрудника - добавим пользователя, 
	// в ином случае добавим e-mail физического лица.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ЗаявкаНаРемонтИсполнителиПоРемонтам.УточнениеИсполнителя КАК РемонтнаяБригада
	|ПОМЕСТИТЬ ВТ_ИсполнителиПоЗаявке
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ИсполнителиПоРемонтам КАК торо_ЗаявкаНаРемонтИсполнителиПоРемонтам
	|ГДЕ
	|	торо_ЗаявкаНаРемонтИсполнителиПоРемонтам.Ссылка = &Ссылка
	|	И торо_ЗаявкаНаРемонтИсполнителиПоРемонтам.УточнениеИсполнителя ССЫЛКА Справочник.торо_РемонтныеБригады
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтнаяБригада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_СоставРемонтныхБригадСрезПоследних.Исполнитель КАК Сотрудник,
	|	торо_СоставРемонтныхБригадСрезПоследних.Исполнитель.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_СоставБригад
	|ИЗ
	|	РегистрСведений.торо_СоставРемонтныхБригад.СрезПоследних(
	|			,
	|			РемонтнаяБригада В
	|				(ВЫБРАТЬ
	|					ВТ_ИсполнителиПоЗаявке.РемонтнаяБригада
	|				ИЗ
	|					ВТ_ИсполнителиПоЗаявке)) КАК торо_СоставРемонтныхБригадСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				ВТ_СоставБригад.ФизическоеЛицо КАК ФизическоеЛицо
	|			ИЗ
	|				ВТ_СоставБригад КАК ВТ_СоставБригад)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВТ_Пользователи.Ссылка, ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.Представление, """")) КАК Оповещаемый
	|ИЗ
	|	ВТ_СоставБригад КАК ВТ_СоставБригад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Пользователи КАК ВТ_Пользователи
	|		ПО ВТ_СоставБригад.ФизическоеЛицо = ВТ_Пользователи.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО ВТ_СоставБригад.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|			И (ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	НЕ ЕСТЬNULL(ВТ_Пользователи.Ссылка, ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.Представление, """")) = """"";
	
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураДанных.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Оповещаемый);	
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивСогласущихДляОтправкиУведомленим(СтруктураДанных)
	
	МассивОповещаемых = Новый Массив;
	
	Если НЕ СтруктураДанных.Свойство("ВидДокумента") Тогда
		Возврат МассивОповещаемых;
	КонецЕсли;
	
	РегламентныйДокумент = (СтруктураДанных.ВидДокумента = "торо_ГрафикРегламентныхМероприятийТОиР"
	ИЛИ СтруктураДанных.ВидДокумента = "торо_НарядНаРегламентноеМероприятие"
	ИЛИ СтруктураДанных.ВидДокумента = "торо_АктОВыполненииРегламентногоМероприятия");
	
	Если торо_РаботаССогласованиями.ПроверитьИспользованиеСогласованияДокументов(СтруктураДанных.ВидДокумента, РегламентныйДокумент)
		И СтруктураДанных.Свойство("СпособСогласования") И ЗначениеЗаполнено(СтруктураДанных.СпособСогласования)
		И СтруктураДанных.Свойство("СтатусДокумента") Тогда
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.СтатусДокумента) Тогда
			СтруктураДанных.СтатусДокумента = торо_РаботаССогласованиями.ПолучитьНачальныйСтатус(СтруктураДанных.СпособСогласования);
		КонецЕсли;
		
		СписокСледующихСтатусов = торо_РаботаССогласованиями.ПолучитьСписокСледующихСтатусовДокумента(СтруктураДанных.СпособСогласования, СтруктураДанных.СтатусДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_СпособыСогласованияДокументовПорядокСогласования.Пользователь,
		|	торо_СпособыСогласованияДокументовПорядокСогласования.ТекущийСтатус
		|ИЗ
		|	Справочник.торо_СпособыСогласованияДокументов.ПорядокСогласования КАК торо_СпособыСогласованияДокументовПорядокСогласования
		|ГДЕ
		|	торо_СпособыСогласованияДокументовПорядокСогласования.Ссылка = &Ссылка
		|	И торо_СпособыСогласованияДокументовПорядокСогласования.ТекущийСтатус В(&СписокСледующихСтатусов)";
		
		
		Запрос.УстановитьПараметр("Ссылка"                  , СтруктураДанных.СпособСогласования);
		Запрос.УстановитьПараметр("СписокСледующихСтатусов" , СписокСледующихСтатусов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивОповещаемых.Добавить(Новый Структура("СледующийСтатусДокумента, Пользователь", Выборка.ТекущийСтатус, Выборка.Пользователь));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивОповещаемых;
	
КонецФункции

Функция ПолучитьМассивОповещаемыхСогласованияДляОтправкиУведомления(СтруктураДанных)
	
	МассивОповещаемых = Новый Массив;

	Если НЕ СтруктураДанных.Свойство("ВидДокумента") Тогда
		Возврат МассивОповещаемых;
	КонецЕсли;
	
	РегламентныйДокумент = (СтруктураДанных.ВидДокумента = "торо_ГрафикРегламентныхМероприятийТОиР"
	ИЛИ СтруктураДанных.ВидДокумента = "торо_НарядНаРегламентноеМероприятие"
	ИЛИ СтруктураДанных.ВидДокумента = "торо_АктОВыполненииРегламентногоМероприятия");
	
	Если торо_РаботаССогласованиями.ПроверитьИспользованиеСогласованияДокументов(СтруктураДанных.ВидДокумента, РегламентныйДокумент)
		И СтруктураДанных.Свойство("СпособСогласования") И ЗначениеЗаполнено(СтруктураДанных.СпособСогласования)
		И СтруктураДанных.Свойство("СтатусДокумента") Тогда
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.СтатусДокумента) Тогда
			СтруктураДанных.СтатусДокумента = торо_РаботаССогласованиями.ПолучитьНачальныйСтатус(СтруктураДанных.СпособСогласования);
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	торо_СпособыСогласованияДокументовОповещаемыеЛица.АдресЭлектроннойПочты КАК Пользователь,
		|	торо_СпособыСогласованияДокументовОповещаемыеЛица.ТекущийСтатус
		|ИЗ
		|	Справочник.торо_СпособыСогласованияДокументов.ОповещаемыеЛица КАК торо_СпособыСогласованияДокументовОповещаемыеЛица
		|ГДЕ
		|	торо_СпособыСогласованияДокументовОповещаемыеЛица.Ссылка = &Ссылка
		|	И торо_СпособыСогласованияДокументовОповещаемыеЛица.ТекущийСтатус В(&СписокСледующихСтатусов)");
		
		Запрос.УстановитьПараметр("Ссылка"                  , СтруктураДанных.СпособСогласования);
		Запрос.УстановитьПараметр("СписокСледующихСтатусов" , СтруктураДанных.СтатусДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МассивОповещаемых.Добавить(Новый Структура("СледующийСтатусДокумента, Пользователь", Выборка.ТекущийСтатус, Выборка.Пользователь));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивОповещаемых;
	
КонецФункции

#КонецОбласти

#КонецОбласти