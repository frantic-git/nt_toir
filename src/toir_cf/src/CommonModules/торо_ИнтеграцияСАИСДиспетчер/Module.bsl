#Область СлужебныйПрограммныйИнтерфейс

Функция СоздатьУзелПланаОбменаСоздан() Экспорт
	Узел = ПолучитьУзелПланаОбмена();
	Если ЗначениеЗаполнено(Узел) Тогда
	    Возврат Узел;
	КонецЕсли;
	
	НовыйУзел = ПланыОбмена.торо_ИнтеграцияСАИСДиспетчер.СоздатьУзел();
	НовыйУзел.Код = "ДИ";
	НовыйУзел.Наименование = "АИС Диспетчер";
	НовыйУзел.ОрганизацияПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Справочники.Организации.ПустаяСсылка());
	НовыйУзел.ДатаОтсчетаДляЗагрузкиДокументов = ТекущаяДата();
	НовыйУзел.ВыгружатьОбъектыРемонта = Истина;
	НовыйУзел.ЗагружатьВыявленныеДефекты = Истина;
	НовыйУзел.ЗагружатьСостоянияОР = Истина;
	НовыйУзел.ЗагружатьКонтролируемыеПоказателиОР = Истина;
	НовыйУзел.ЗагружатьНаработкуОР = Истина;
	
	НовыйУзел.Записать();
	
	Возврат НовыйУзел.Ссылка;
КонецФункции

Функция ПолучитьУзелПланаОбмена() Экспорт
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИнтеграцияСАИСДиспетчер.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.торо_ИнтеграцияСАИСДиспетчер КАК торо_ИнтеграцияСАИСДиспетчер
		|ГДЕ
		|	торо_ИнтеграцияСАИСДиспетчер.ЭтотУзел = ЛОЖЬ";
#КонецОбласти
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?(РезультатЗапроса.Пустой(), Неопределено, РезультатЗапроса.Выгрузить()[0].Ссылка);
КонецФункции

Функция ПолучитьРасписаниеРегламентногоЗадания() Экспорт
	Задание = ПолучитьРегламентноеЗадание();
	Если Задание = Неопределено Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Возврат Задание.Расписание;
КонецФункции

Функция ПолучитьРегламентноеЗадание() Экспорт
	СтруктураПоиска = Новый Структура("Ключ", "Интеграция с АИС Диспетчер");
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураПоиска);
	Если Задания.Количество() = 0 Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Возврат Задания[0];
КонецФункции

Процедура УстановитьНовоеРасписаниеРегламентногоЗадания(Расписание) Экспорт
	Задание = ПолучитьРегламентноеЗадание();
	Если Задание = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Задание.Расписание = Расписание;
	Задание.Записать();
КонецПроцедуры

Функция ПолучитьСобытияЖурналаРегистрации() Экспорт
	МассивСобытий = Новый Массив();
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Запуск");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка выполнения запроса");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка выполнения");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи подразделения");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи сотрудника");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи ОР");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи показателя эксплуатации");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи справочника <Виды эксплуатации>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи справочника <Причины простоя>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи справочника <Параметры наработки ОР>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи плана видов характеристик <Контролируемые показатели эксплуатации>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи плана видов характеристик <Дополнительные реквизиты и сведения>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи плана видов характеристик <Группы характеристик оборудования>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи кадрового документа");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи справочника <Типовые ОР>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи справочника <Направления ОР>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи справочника <Номенклатура>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи справочника <Производители>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи справочника <Контрагенты>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи документа <Состояния объектов ремонта>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи документа <Учет контролируемых показателей>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи документа <Учет наработки оборудования>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи документа <Выявленные дефекты>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи документа <Установка цен номенклатуры>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Ошибка записи документа <Принятие ОР к учету>");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Успешное выполнение");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Аварийное завершение");
	МассивСобытий.Добавить("Фоновое задание.торо_ИнтеграцияСАИСДиспетчер.Обработка данных мониторинга");
	
	Возврат МассивСобытий;
КонецФункции

#Область ИнтеграцияСАИСДиспетчер

#Область НачальнаяЗагрузкаИзАИСДиспетчер

Процедура НачальнаяЗагрузкаДанныхИзАИСДиспетчер(Параметры, АдресРезультата) Экспорт
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Запуск");
		
		СоответствиеКоличестваЭлементовТаблицам = Параметры.ПараметрыВыполнения.СоответствиеКоличестваЭлементовТаблицам;
		
		НазванияТаблиц = Новый Массив();
		НазванияТаблиц.Добавить("Подразделения");
		НазванияТаблиц.Добавить("ТиповыеОР");
		НазванияТаблиц.Добавить("НаправленияОР");
		НазванияТаблиц.Добавить("Производители");
		НазванияТаблиц.Добавить("Контрагенты");
		НазванияТаблиц.Добавить("ПаспортныеХарактеристикиОР");
		НазванияТаблиц.Добавить("ПоказателиЭксплуатации");
		НазванияТаблиц.Добавить("ВидыЭксплуатации");
		НазванияТаблиц.Добавить("ПричиныПростоя");
		НазванияТаблиц.Добавить("Сотрудники");
		НазванияТаблиц.Добавить("КадровыеДокументы");
		НазванияТаблиц.Добавить("ОбъектыРемонта");
		НазванияТаблиц.Добавить("Номенклатура");
		НазванияТаблиц.Добавить("ИерархияНоменклатуры");
		СтруктураТаблиц = ПолучитьОписанияВспомогательныхТаблиц(НазванияТаблиц);
		
		Узел = ПолучитьУзелПланаОбмена();
		ТаблицаСоответствия = ПолучитьТаблицуСоответствийВебСервисов();
		
		УспешноеВыполнение = Истина;
		
#Область Подразделения
		ДлительныеОперации.СообщитьПрогресс(8, "Выполняется загрузка подразделений из АИС Диспетчер");
		Результат = ЗагрузитьПодразделения(СтруктураТаблиц.Подразделения, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		                                                    
#Область ТиповыеОР
	    ДлительныеОперации.СообщитьПрогресс(16, "Выполняется загрузка типовых ОР из АИС Диспетчер");
		Результат = ЗагрузитьТиповыеОР(СтруктураТаблиц.ТиповыеОР, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область НаправленияОР
	    ДлительныеОперации.СообщитьПрогресс(24, "Выполняется загрузка направлений ОР из АИС Диспетчер");
		Результат = ЗагрузитьНаправленияОР(СтруктураТаблиц.НаправленияОР, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область Производители
		ДлительныеОперации.СообщитьПрогресс(32, "Выполняется загрузка производителей из АИС Диспетчер");
		Результат = ЗагрузитьПроизводителей(СтруктураТаблиц.Производители, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область Контрагенты
		ДлительныеОперации.СообщитьПрогресс(32, "Выполняется загрузка контрагентов из АИС Диспетчер");
		Результат = ЗагрузитьКонтрагентов(СтруктураТаблиц.Контрагенты, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ОбъектыРемонта
	    ДлительныеОперации.СообщитьПрогресс(40, "Выполняется загрузка объектов ремонта из АИС Диспетчер");
		Результат = ЗагрузитьОбъектыРемонта(СтруктураТаблиц, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ПаспортныеХарактеристикиОР
	    ДлительныеОперации.СообщитьПрогресс(48, "Выполняется загрузка паспортных характеристик ОР из АИС Диспетчер");
		Результат = ЗагрузитьПаспортныеХарактеристикиОР(СтруктураТаблиц.ПаспортныеХарактеристикиОР, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область ПоказателиЭксплуатации
		Если Узел.ЗагружатьКонтролируемыеПоказателиОР Или Узел.ЗагружатьНаработкуОР Тогда
		    ДлительныеОперации.СообщитьПрогресс(56, "Выполняется загрузка показателей эксплуатации из АИС Диспетчер");
			Результат = ЗагрузитьПоказателиЭксплуатации(СтруктураТаблиц.ПоказателиЭксплуатации, Узел, ТаблицаСоответствия);
			УспешноеВыполнение = УспешноеВыполнение И Результат;
		КонецЕсли;
#КонецОбласти
		
#Область ИерархияНоменклатуры
	    ДлительныеОперации.СообщитьПрогресс(64, "Выполняется загрузка иерархии номенклатуры из АИС Диспетчер");
		КоличествоГруппНоменклатуры = 0;
		Результат = ЗагрузитьИерархиюНоменклатуры(СтруктураТаблиц, Узел, ТаблицаСоответствия, КоличествоГруппНоменклатуры);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область Номенклатура
	    ДлительныеОперации.СообщитьПрогресс(72, "Выполняется загрузка номенклатуры из АИС Диспетчер");
		Результат = ЗагрузитьНоменклатуру(СтруктураТаблиц.Номенклатура, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ВидыЭксплуатации
		Если Узел.ЗагружатьСостоянияОР Тогда
		    ДлительныеОперации.СообщитьПрогресс(80, "Выполняется загрузка видов эксплуатации из АИС Диспетчер");
			Результат = ЗагрузитьВидыЭксплуатации(СтруктураТаблиц.ВидыЭксплуатации, Узел, ТаблицаСоответствия);
			УспешноеВыполнение = УспешноеВыполнение И Результат;
		КонецЕсли;
#КонецОбласти
		
#Область ПричиныПростоя
		Если Узел.ЗагружатьСостоянияОР Тогда
		    ДлительныеОперации.СообщитьПрогресс(88, "Выполняется загрузка причин простоя из АИС Диспетчер");
			Результат = ЗагрузитьПричиныПростоя(СтруктураТаблиц.ПричиныПростоя, Узел, ТаблицаСоответствия);
			УспешноеВыполнение = УспешноеВыполнение И Результат;
		КонецЕсли;
#КонецОбласти

#Область Сотрудники
	    ДлительныеОперации.СообщитьПрогресс(96, "Выполняется загрузка сотрудников из АИС Диспетчер");
		Результат = ЗагрузитьСотрудников(СтруктураТаблиц.Сотрудники, СтруктураТаблиц.Подразделения, СтруктураТаблиц.КадровыеДокументы, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

		ДлительныеОперации.СообщитьПрогресс(99, "Обработка загруженных данных из АИС Диспетчер");

		Для каждого КлючИЗначение Из СтруктураТаблиц Цикл
			Если КлючИЗначение.Ключ = "КадровыеДокументы"
				Или КлючИЗначение.Ключ = "ИерархияНоменклатуры"
				Или СтруктураТаблиц[КлючИЗначение.Ключ].Количество() = 0 Тогда
			    Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Сопоставлен", Истина);
			КоличествоСопоставленных = СтруктураТаблиц[КлючИЗначение.Ключ].НайтиСтроки(СтруктураПоиска).Количество();
			СтруктураКоличества = СоответствиеКоличестваЭлементовТаблицам[КлючИЗначение.Ключ];
			СтруктураКоличества.КоличествоСопоставленных = КоличествоСопоставленных;
			СтруктураКоличества.КоличествоНесопоставленных = КлючИЗначение.Значение.Количество() - КоличествоСопоставленных;
		КонецЦикла;
		
		КоличествоСопоставленныхГруппНоменклатуры = СтруктураТаблиц.ИерархияНоменклатуры.Строки.Итог("Объект", Истина);
		СоответствиеКоличестваЭлементовТаблицам["ИерархияНоменклатуры"].КоличествоСопоставленных = КоличествоСопоставленныхГруппНоменклатуры;
		СоответствиеКоличестваЭлементовТаблицам["ИерархияНоменклатуры"].КоличествоНесопоставленных = КоличествоГруппНоменклатуры - КоличествоСопоставленныхГруппНоменклатуры;
		
		Если УспешноеВыполнение Тогда
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("СтруктураТаблиц, СоответствиеКоличестваЭлементовТаблицам, Статус", СтруктураТаблиц, СоответствиеКоличестваЭлементовТаблицам, ?(УспешноеВыполнение, "Выполнено", "Ошибка"));
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при выполнении начальной загрузки данных НСИ по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
		
		СтруктураВозврата = Новый Структура("СтруктураТаблиц, СоответствиеКоличестваЭлементовТаблицам, Статус", Новый Структура(), Новый Соответствие(), "Ошибка");
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьСопоставленныеДанные(Параметры, АдресРезультата) Экспорт
	Если Не Параметры.Свойство("ПараметрыВыполнения") Или Не ТипЗнч(Параметры.ПараметрыВыполнения) = Тип("Структура") Тогда
	    Возврат;
	КонецЕсли;
	
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Запуск");
		
		СтруктураТаблиц = Параметры.ПараметрыВыполнения;
		Узел = ПолучитьУзелПланаОбмена();
		
		УспешноеВыполнение = Истина;
			
#Область Подразделения
		ДлительныеОперации.СообщитьПрогресс(8, "Выполняется запись подразделений в систему");
		УспешноеВыполнение = ЗаписатьПодразделения(Узел, СтруктураТаблиц.ТаблицаПодразделений);
#КонецОбласти
		
#Область ТиповыеОР
		ДлительныеОперации.СообщитьПрогресс(16, "Выполняется запись типовых ОР в систему");
		Результат = ЗаписатьТиповыеОР(СтруктураТаблиц.ТиповыеОР);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область НаправленияОР
		ДлительныеОперации.СообщитьПрогресс(24, "Выполняется запись направлений ОР в систему");
		Результат = ЗаписатьНаправленияОР(СтруктураТаблиц.НаправленияОР);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область Производители
		ДлительныеОперации.СообщитьПрогресс(32, "Выполняется запись производителей в систему");
		Результат = ЗаписатьПроизводителей(СтруктураТаблиц.Производители);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область Контрагенты
		ДлительныеОперации.СообщитьПрогресс(32, "Выполняется запись контрагентов в систему");
		Результат = ЗаписатьКонтрагентов(СтруктураТаблиц.Контрагенты);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область ОбъектыРемонта
	    ДлительныеОперации.СообщитьПрогресс(40, "Выполняется запись объектов ремонта в систему");
		Результат = ЗаписатьОбъектыРемонта(СтруктураТаблиц.ТаблицаОР, Узел);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ПаспортныеХарактеристикиОР
		ДлительныеОперации.СообщитьПрогресс(48, "Выполняется запись паспортных характеристик ОР в систему");
		Результат = ЗаписатьПаспортныеХарактеристикиОР(СтруктураТаблиц.ПаспортныеХарактеристикиОР);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ПоказателиЭксплуатации
		ДлительныеОперации.СообщитьПрогресс(56, "Выполняется запись показателей эксплуатации в систему");
		Результат = ЗаписатьПоказателиЭксплуатации(СтруктураТаблиц.ТаблицаПоказателейЭксплуатации);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область Номенклатура
		ДлительныеОперации.СообщитьПрогресс(64, "Выполняется запись показателей эксплуатации в систему");
		Результат = ЗаписатьНоменклатуру(СтруктураТаблиц.ИерархияНоменклатуры, СтруктураТаблиц.Номенклатура, Узел);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ВидыЭксплуатации
		ДлительныеОперации.СообщитьПрогресс(72, "Выполняется запись видов эксплуатации в систему");
		Результат = ЗаписатьВидыЭксплуатации(СтруктураТаблиц.ТаблицаВидовЭксплуатации);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ПричиныПростоя
		ДлительныеОперации.СообщитьПрогресс(80, "Выполняется запись причин простоя в систему");
		Результат = ЗаписатьПричиныПростоя(СтруктураТаблиц.ТаблицаПричинПростоя);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область Сотрудники
		ДлительныеОперации.СообщитьПрогресс(88, "Выполняется запись сотрудников в систему");
		Результат = ЗаписатьСотрудников(СтруктураТаблиц.ТаблицаСотрудников, СтруктураТаблиц.ТаблицаКадровыхДокументов, Узел);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

		ДлительныеОперации.СообщитьПрогресс(96, "Осталось совсем немного. Пожалуйста, подождите...");
		
		Если УспешноеВыполнение Тогда
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("Статус", ?(УспешноеВыполнение, "Выполнено", "Ошибка"));
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при выполнении записи сопоставленных данных по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
		
		СтруктураВозврата = Новый Структура("Статус", "Ошибка");
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхПоОР

Процедура ЗагрузкаДанныхПоОРИзАИСДиспетчер(Параметры, АдресРезультата) Экспорт
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Запуск");
		
		Узел = ПолучитьУзелПланаОбмена();
		ТаблицаСоответствия = ПолучитьТаблицуСоответствийВебСервисов();
		
		НазванияТаблиц = Новый Массив();
		НазванияТаблиц.Добавить("КонтролируемыеПоказатели");
		НазванияТаблиц.Добавить("ПараметрыНаработки");
		СтруктураТаблиц = ПолучитьОписанияВспомогательныхТаблиц(НазванияТаблиц);
		
		УспешноеВыполнение = Истина;

#Область ОбъектыРемонта
	    ДлительныеОперации.СообщитьПрогресс(25, "Выполняется загрузка объектов ремонта из АИС Диспетчер");
		УспешноеВыполнение = ЗагрузитьОбъектыРемонтаВторойЭтап(СтруктураТаблиц, Узел, ТаблицаСоответствия);
#КонецОбласти

#Область Запчасти
	    ДлительныеОперации.СообщитьПрогресс(50, "Выполняется загрузка объектов ремонта из АИС Диспетчер");
		Результат = ЗагрузитьЗапчасти(СтруктураТаблиц, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область ПоказателиЭксплуатации
		ДлительныеОперации.СообщитьПрогресс(75, "Выполняется загрузка показателей эксплуатации из АИС Диспетчер");
		Результат = ЗагрузитьПоказателиЭксплуатацииВторойЭтап(СтруктураТаблиц, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область ПаспортныеХарактеристикиОР
		ДлительныеОперации.СообщитьПрогресс(100, "Выполняется загрузка паспортных характеристик из АИС Диспетчер");
		Результат = ЗагрузитьПаспортныеХарактеристикиОРВторойЭтап(СтруктураТаблиц, Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область ПодготовкаТаблицыОР
		ПодготовитьТаблицуОР(СтруктураТаблиц);
#КонецОбласти
		
		Если УспешноеВыполнение Тогда
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("СтруктураТаблиц, Статус", СтруктураТаблиц, ?(УспешноеВыполнение, "Выполнено", "Ошибка"));
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при выполнении загрузки данных по ОР по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
		
		СтруктураВозврата = Новый Структура("СтруктураТаблиц, Статус", Новый Структура(), "Ошибка");
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьДанныеПоОР(Параметры, АдресРезультата) Экспорт
	Если Не Параметры.Свойство("ПараметрыВыполнения") Или Не ТипЗнч(Параметры.ПараметрыВыполнения) = Тип("Структура") Тогда
	    Возврат;
	КонецЕсли;
	
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Запуск");
		ДлительныеОперации.СообщитьПрогресс(10, "Начало записи данных по ОР из АИС Диспетчер");
		
		СтруктураТаблиц = Параметры.ПараметрыВыполнения;
		Узел = ПолучитьУзелПланаОбмена();
		
		УспешноеВыполнение = Истина;
		
#Область ПоказателиЭксплуатации
		Результат = ЗаписатьПоказателиОР(СтруктураТаблиц.КонтролируемыеПоказатели, СтруктураТаблиц.ПараметрыНаработки);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область Запчасти
		Результат = ЗаписатьЗапчасти(СтруктураТаблиц.Запчасти);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ПаспортныеХарактеристикиОР
		Результат = ЗаписатьПаспортныеХарактеристикиОРВторойЭтап(СтруктураТаблиц.ПаспортныеХарактеристикиОР);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
		Если УспешноеВыполнение Тогда
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("Статус", ?(УспешноеВыполнение, "Выполнено", "Ошибка"));
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при выполнении записи данных по ОР по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
		
		СтруктураВозврата = Новый Структура("Статус", "Ошибка");
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область Обмен

Процедура ВыполнитьОбменРЗ() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	Если Константы.торо_ИспользоватьИнтеграциюСАИСДиспетчер.Получить() 
		И торо_СЛКВнешнееСоединение.СерияЗащитыИнициализирована("28DD") Тогда
	    ВыполнитьОбмен(Неопределено, Неопределено);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьОбмен(Параметры, АдресРезультата) Экспорт
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Запуск");
		ДлительныеОперации.СообщитьПрогресс(8, "Начало обмена с АИС Диспетчер");
		
		Узел = ПолучитьУзелПланаОбмена();
		ТаблицаСоответствия = ПолучитьТаблицуСоответствийВебСервисов();
		
		СтруктураВыборки = Новый Структура();
		СтруктураВыборки.Вставить("ВыборкаПодразделений", ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.Справочники.СтруктураПредприятия));
		СтруктураВыборки.Вставить("ВыборкаСотрудников", ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.Справочники.Сотрудники));
		СтруктураВыборки.Вставить("ВыборкаОР", ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.Справочники.торо_ОбъектыРемонта));
		СтруктураВыборки.Вставить("ВыборкаТиповыхОР", ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.Справочники.торо_ТиповыеОР));
		СтруктураВыборки.Вставить("ВыборкаНаправленийОР", ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.Справочники.торо_НаправленияОбъектовРемонтныхРабот));
		СтруктураВыборки.Вставить("ВыборкаНоменклатуры", ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.Справочники.Номенклатура));
		СтруктураВыборки.Вставить("ВыборкаПаспортныхХарактеристикОР", ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения));
		СтруктураВыборки.Вставить("ВыборкаГруппХарактеристикОР", ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.ПланыВидовХарактеристик.торо_ГруппыХарактеристикОборудования));
		
		СтруктураВозврата = ПодготовитьДанныеКОтправке(Узел, СтруктураВыборки);
		ТипыИГруппыВКатегориях = ПолучитьТипыИГруппыВКатегориях(Узел, ТаблицаСоответствия);
		ОтправитьКатегориюОборудованияПоУмолчанию(Узел, ТаблицаСоответствия);
		
		УспешноеВыполнение = Истина;
		
#Область ОтправкаПодразделений
		Если Узел.ВыгружатьПодразделения Тогда
		    ДлительныеОперации.СообщитьПрогресс(16, "Выполняется отправка подразделений в АИС Диспетчер");
			УспешноеВыполнение = ОтправитьПодразделения(Узел, СтруктураВозврата.МассивПодразделений, ТаблицаСоответствия);
		КонецЕсли;
#КонецОбласти
		
#Область ОтправкаНаправленийОР
	    ДлительныеОперации.СообщитьПрогресс(24, "Выполняется отправка направлений ОР в АИС Диспетчер");
		Результат = ОтправитьНаправленияОР(Узел, СтруктураВозврата, ТипыИГруппыВКатегориях.ГруппыВКатегориях, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ОтправкаТиповыхОР
	    ДлительныеОперации.СообщитьПрогресс(32, "Выполняется отправка типовых ОР в АИС Диспетчер");
		Результат = ОтправитьТиповыеОР(Узел, СтруктураВозврата, ТипыИГруппыВКатегориях.ТипыВКатегориях, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ОтправкаОбъектовРемонта
		Если Узел.ВыгружатьОбъектыРемонта Тогда
			ТипыИГруппыВКатегориях = ПолучитьТипыИГруппыВКатегориях(Узел, ТаблицаСоответствия);
		    ДлительныеОперации.СообщитьПрогресс(40, "Выполняется отправка объектов ремонта в АИС Диспетчер");
			Результат = ОтправитьОбъектыРемонта(Узел, СтруктураВозврата.МассивОР, ТипыИГруппыВКатегориях, ТаблицаСоответствия);
			УспешноеВыполнение = УспешноеВыполнение И Результат;
		КонецЕсли;
#КонецОбласти
		
#Область ОтправкаНоменклатуры
	    ДлительныеОперации.СообщитьПрогресс(48, "Выполняется отправка номенклатуры в АИС Диспетчер");
		Результат = ОтправитьНоменклатуру(Узел, СтруктураВозврата, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ОтправкаПаспортныхХарактеристикОР
	    ДлительныеОперации.СообщитьПрогресс(56, "Выполняется отправка паспортных характеристик в АИС Диспетчер");
		Результат = ОтправитьПаспортныеХарактеристикиОР(Узел, СтруктураВозврата.МассивПаспортныхХарактеристикОР, СтруктураВозврата.МассивГруппХарактеристикОР, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти
		
#Область ОтправкаСотрудников
		Если Узел.ВыгружатьСотрудников Тогда
		    ДлительныеОперации.СообщитьПрогресс(64, "Выполняется отправка сотрудников в АИС Диспетчер");
		    Результат = ОтправитьСотрудников(Узел, СтруктураВозврата.МассивСотрудников, ТаблицаСоответствия);
		    УспешноеВыполнение = УспешноеВыполнение И Результат;
		КонецЕсли;
#КонецОбласти

#Область ЗагрузкаДанныхПоСостояниямОР
		Если Узел.ЗагружатьСостоянияОР Тогда
		    ДлительныеОперации.СообщитьПрогресс(72, "Выполняется загрузка состояний из АИС Диспетчер");
			Результат = ПолучитьДанныеПоСостояниямОборудования(Узел, ТаблицаСоответствия);
			УспешноеВыполнение = УспешноеВыполнение И Результат;
		КонецЕсли;
#КонецОбласти
		
#Область ЗагрузкаДанныхПоПоказателямЭксплуатации
		ДлительныеОперации.СообщитьПрогресс(80, "Выполняется загрузка показателей из АИС Диспетчер");
		Результат = ПолучитьДанныеПоПоказателямЭксплуатации(Узел, ТаблицаСоответствия);
		УспешноеВыполнение = УспешноеВыполнение И Результат;
#КонецОбласти

#Область ЗагрузкаВыявленныхДефектов
		Если Узел.ЗагружатьВыявленныеДефекты Тогда
		    ДлительныеОперации.СообщитьПрогресс(88, "Выполняется загрузка выявленных дефектов из АИС Диспетчер");
		    Результат = ПолучитьДанныеПоВыявленнымДефектам(Узел, ТаблицаСоответствия);
		    УспешноеВыполнение = УспешноеВыполнение И Результат;
		КонецЕсли;
#КонецОбласти
		
		Если УспешноеВыполнение Тогда
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(96, "Окончание обмена с АИС Диспетчер");
		
		СтруктураВозврата = Новый Структура("Статус", ?(УспешноеВыполнение, "Выполнено", "Ошибка"));
		
		Если ЗначениеЗаполнено(АдресРезультата) Тогда
		    ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при выполнении обмена данными по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
		
		СтруктураВозврата = Новый Структура("Статус", "Ошибка");
		Если ЗначениеЗаполнено(АдресРезультата) Тогда
		    ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		КонецЕсли;
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Аварийное завершение");
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФоновыеЗадания

Функция ВыполнитьФоновоеЗаданиеНаСервере(УникальныйИдентификатор, ДанныеЗадания, ПараметрыЗапуска) Экспорт
	ПараметрыЗадания = Новый Структура;
	
	Если Не ТипЗнч(ПараметрыЗапуска) = Тип("Структура") Тогда
	    ПараметрыЗапуска = Новый Структура();
	КонецЕсли;
	
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыЗапуска);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ДанныеЗадания.НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ДанныеЗадания.ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
КонецФункции

Процедура ОтменитьВыполнениеФоновогоЗадания(IDЗадания) Экспорт
	ДлительныеОперации.ОтменитьВыполнениеЗадания(IDЗадания);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СделатьЗаписьВЖурналеРегистрации(Комментарий, Уровень, Событие)
	ЗаписьЖурналаРегистрации(
							"Фоновое задание.торо_ИнтеграцияСАИСДиспетчер." + Событие,
							Уровень,
							Метаданные.РегламентныеЗадания.торо_ИнтеграцияСАИСДиспетчер
							,, Комментарий);
КонецПроцедуры

Процедура УдалитьРегистрациюИзмененийПривилегированно(Узел, Выборка)
	// Нет прав на объект, но регистрацию изменений все равно надо удалить.
	УстановитьПривилегированныйРежим(Истина);
	ТекущийОбъект = Выборка.Получить();
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция ПреобразоватьСтрокуВДату(ДатаСтрока, UnixTime = Ложь)
	Если Не ЗначениеЗаполнено(ДатаСтрока) Тогда
	    Возврат Дата(1, 1, 1, 0, 0, 0);
	КонецЕсли;
	
	Если UnixTime Тогда
		// Дата в формате unixtime: /Date(1583787600000+0300)/. Берутся первые 10 цифр
	    ДатаUnixTime = 0;
		ЧасовойПоясЧисло = 0;
		
		Если СтрДлина(ДатаСтрока) > 21 Тогда
		    ЧасовойПоясЧисло = Число(Сред(ДатаСтрока, 21, 2));
		Иначе
			ЧасовойПоясЧисло = 0;
		КонецЕсли;
		
	    ДатаUnixTime = Число(Сред(ДатаСтрока, 7, 10));
		
		Возврат Дата(1970, 1, 1, ЧасовойПоясЧисло, 0, 0) + ДатаUnixTime;
	Иначе
		Если СтрДлина(ДатаСтрока) = 19 Тогда
		    // Дата в формате 2020-07-20T00:00:00
			Возврат Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДатаСтрока, "T", ""), ":", ""), "-", ""));
		ИначеЕсли СтрДлина(ДатаСтрока) = 25 Тогда
		    // Дата в формате 2020-07-20T00:00:00+03:00
			ДатаСтрокаБезЧасовогоПояса = Лев(ДатаСтрока, 19);
			ДатаБезЧасовогоПояса = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДатаСтрокаБезЧасовогоПояса, "T", ""), ":", ""), "-", ""));
			Возврат ДатаБезЧасовогоПояса + 3600 * Число(Сред(ДатаСтрока, 21, 2)) + 60 * Число(Сред(ДатаСтрока, 24, 2));
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПреобразоватьДатуВСтроку(ДатаДляПеревода, UnixTime = Ложь)
	Если Не ЗначениеЗаполнено(ДатаДляПеревода) Или ДатаДляПеревода = Неопределено Тогда
	    Возврат "";
	КонецЕсли;
	
	Если UnixTime Тогда
		// Дата в формате unixtime: /Date(1583787600000)/
	    Возврат "/Date(" + Формат(ДатаДляПеревода - Дата(1970, 1, 1, 1, 0, 0), "ЧГ=0") + "000)/";
	Иначе
		// Дата в формате "2020-08-19 00:00:00"
		Возврат Формат(ДатаДляПеревода, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""");
	КонецЕсли;
КонецФункции

#Область ИнтеграцияСАИСДиспетчер

Функция РазобратьОтветСервера(ОтветСервера, ДанныеПодключения)
	Если ДанныеПодключения.ТипКонтента = "JSON" Тогда
	    ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСервера);
		
		Попытка
		    Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
		Исключение
			ОписаниеОшибки = Нстр("ru = 'Ошибка при чтении ответа сервера на запрос %1:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ДанныеПодключения.Метод);
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
		
			Возврат Неопределено;
		КонецПопытки;
		
		Возврат Данные;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура СопоставитьОбъектыНСИ(Объекты, ТипОбъекта, ЗаполнениеIntegrationID = "")
	Если Объекты.Количество() = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объекты) = Тип("ТаблицаЗначений") Тогда
		Объекты.Свернуть("IntegrationID, Ссылка");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьНаборЗаписей();
	Для каждого ОбъектТОИР Из Объекты Цикл
	    НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.УникальныйИдентификаторДиспетчер = ЗаполнениеIntegrationID + ОбъектТОИР.IntegrationID;
		НоваяЗапись.ТипОбъекта = ТипОбъекта;
		НоваяЗапись.ОбъектТОИР = ОбъектТОИР.Ссылка;
	КонецЦикла;
	
	Попытка
	    НаборЗаписей.Записать(Ложь);
	Исключение
		ОписаниеОшибки = Нстр("ru='Не удалось записать набор записей регситра торо_СоответствиеОбъектовНСИДиспетчер для новых еще несопоставленных объектов:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
	КонецПопытки;
КонецПроцедуры

Функция ЗаписатьДокумент(НовыйДокумент, ЕстьОшибки, ТипДокумента)
	Попытка
		Если ЕстьОшибки Тогда
		    НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ШаблонОписаниеОшибки = Нстр("ru='Не удалось %1 документ ""%2""!'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, ?(ЕстьОшибки, "записать", "провести"), ТипДокумента);
		ШаблонНазванияСобытия = Нстр("ru='Ошибка записи документа %1'");
		НазваниеСобытия = СтрШаблон(ШаблонНазванияСобытия, ТипДокумента);
		
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, НазваниеСобытия);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Не ЕстьОшибки;
КонецФункции

#Область ПодключениеКАИСДиспетчер

Функция ПолучитьТаблицуСоответствийВебСервисов()
	Макет = ПланыОбмена.торо_ИнтеграцияСАИСДиспетчер.ПолучитьМакет("СоответствиеВебСервисов");
	ОбластьДанных = Макет.ПолучитьОбласть("ТаблицаСоответствия");
	ОбластьЯчеек = Макет.Область(1, 1, ОбластьДанных.ВысотаСтраницы, ОбластьДанных.ВысотаТаблицы);
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	ПостроительЗапроса.Выполнить();
	РезультатЗапроса = ПостроительЗапроса.Результат;
	
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

Функция ПолучитьДанныеПодключения(ВебСервис, ТаблицаСоответствия = Неопределено)
	Если Не ЗначениеЗаполнено(ВебСервис) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаСоответствия) Тогда
	    ТаблицаСоответствия = ПолучитьТаблицуСоответствийВебСервисов();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ВебСервис", ВебСервис);
	НайденныеСтроки = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеСтроки[0];
КонецФункции

Функция ВыполнитьЗапросКАИСДиспетчер(Узел, ДанныеПодключения, СтрокаЗапроса = "", ТелоЗапроса = "", ДополнительноеОписание = "", ПараметрыЗапроса = Неопределено)
	СтрокаЗапроса = "/" + ДанныеПодключения.Сервер + "/" + ДанныеПодключения.ВебСервис;
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		СтрокаЗапроса = СтрокаЗапроса + "?";
		Для каждого КлючИЗначение из ПараметрыЗапроса Цикл
			СтрокаЗапроса = СтрокаЗапроса + КлючИЗначение.Ключ + "=" + КлючИЗначение.Значение + "&";
		КонецЦикла;
		
		СтрокаЗапроса = Лев(СтрокаЗапроса, СтрДлина(СтрокаЗапроса) - 1);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Узел);
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураВозврата = Новый Структура("КодСостояния, ТелоОтвета, УспешноеВыполнение", Неопределено, "", Ложь);
	
	Если Не ПроверитьРаботоспособностьСервера(Узел, ДанныеПодключения, Пароль) Тогда
	    Возврат СтруктураВозврата;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(Узел.АдресСервера, Число(ДанныеПодключения.Порт), Узел.ИмяПользователя, Пароль,,,,);
		
		Если ДанныеПодключения.Метод = "POST" Тогда
			Если ДанныеПодключения.ТипКонтента = "XML" Тогда
				ТипКонтента = "application/xml;";
			ИначеЕсли ДанныеПодключения.ТипКонтента = "JSON" Тогда
				ТипКонтента = "application/json;";
			КонецЕсли;
			   
			ФайлРезультата = ПолучитьИмяВременногоФайла();
			
			ЗаголовокHTTP = Новый Соответствие();
			ЗаголовокHTTP.Вставить("Content-Type", ТипКонтента + " charset=utf-8");
			
			HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса, ЗаголовокHTTP);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ФайлРезультата);
			
			ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
			ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
			СтруктураВозврата.ТелоОтвета = ТекстовыйФайлОтвет.ПолучитьТекст();
		ИначеЕсли ДанныеПодключения.Метод = "GET" Тогда
		    HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса);
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			
			СтруктураВозврата.ТелоОтвета =  HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		СтруктураВозврата.КодСостояния = HTTPОтвет.КодСостояния;
		СтруктураВозврата.УспешноеВыполнение = Истина;
		
		Если HTTPОтвет.КодСостояния >= 300 Тогда
			ОписаниеОшибки = Нстр("ru = 'Ошибка при выполнении запроса <%1> к серверу, код состояния %2 %3:'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, СтрокаЗапроса, HTTPОтвет.КодСостояния, ДополнительноеОписание);
			Если ЗначениеЗаполнено(СтруктураВозврата.ТелоОтвета) Тогда
				ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Символы.ПС + СтруктураВозврата.ТелоОтвета;
			    СтруктураВозврата.ТелоОтвета = СтруктураВозврата.ТелоОтвета;
			КонецЕсли;
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения запроса");
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при выполнении запроса <%1> к серверу %2:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, СтрокаЗапроса, ДополнительноеОписание);
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
	КонецПопытки;
	
	HTTPСоединение = Неопределено;
	Возврат СтруктураВозврата;
КонецФункции

Функция ЗагрузитьДанныеИзАИСДиспетчер(Узел, ИмяМетода, ИмяТаблицы, ТаблицаСоответствияВебСервисов, ДополнительноеОписание = "", ОбновлениеIntegrationID = Ложь, ОбязательнаяПроверка = "", ЗаполнениеIntegrationID = "", ПоляДатыСтрокой = "", ТелоЗапроса = "", ПараметрыЗапроса = Неопределено)
	НазванияТаблиц = Новый Массив();
	НазванияТаблиц.Добавить(ИмяТаблицы);
	СтруктураТаблиц = ПолучитьОписанияВспомогательныхТаблиц(НазванияТаблиц);
	
#Область Загрузка
	ДанныеПодключения = ПолучитьДанныеПодключения(ИмяМетода, ТаблицаСоответствияВебСервисов);
	ОтветСервера = ВыполнитьЗапросКАИСДиспетчер(Узел, ДанныеПодключения, "", ТелоЗапроса, ДополнительноеОписание, ПараметрыЗапроса);
	Если Не ОтветСервера.УспешноеВыполнение Или Не ЗначениеЗаполнено(ОтветСервера.ТелоОтвета) Тогда
		Возврат СтруктураТаблиц[ИмяТаблицы];
	КонецЕсли;
	
	Данные = РазобратьОтветСервера(ОтветСервера.ТелоОтвета, ДанныеПодключения);
	Если Не ЗначениеЗаполнено(Данные) Тогда
	    Возврат СтруктураТаблиц[ИмяТаблицы];
	КонецЕсли;
	
	Для каждого СтрокаДанных Из Данные Цикл
		ПроверкаПройдена = Истина;
		Если ЗначениеЗаполнено(ОбязательнаяПроверка) Тогда
		    Выполнить(ОбязательнаяПроверка);
		КонецЕсли;
		
		Если Не ПроверкаПройдена Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицы = СтруктураТаблиц[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаДанных,, ПоляДатыСтрокой);
		
		Если ЗначениеЗаполнено(ЗаполнениеIntegrationID) Тогда
		    НоваяСтрокаТаблицы.IntegrationID = ЗаполнениеIntegrationID + НоваяСтрокаТаблицы.IntegrationID;
		КонецЕсли;
		
		Если ОбновлениеIntegrationID Тогда
		    НоваяСтрокаТаблицы.IntegrationID = "toir_initial_" + НоваяСтрокаТаблицы.ID;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПоляДатыСтрокой) Тогда
		    Продолжить;
		КонецЕсли;
		
		ПоляДаты = СтрРазделить(ПоляДатыСтрокой, ",");
		Для каждого ПолеДаты Из ПоляДаты Цикл
		    НоваяСтрокаТаблицы[ПолеДаты] = ПреобразоватьСтрокуВДату(СтрокаДанных[ПолеДаты]);
		КонецЦикла;
	КонецЦикла;
#КонецОбласти

	Возврат СтруктураТаблиц[ИмяТаблицы];
КонецФункции

Функция ОтправитьДанныеВАИСДиспетчер(Узел, ИмяМетода, ТаблицаСоответствияВебСервисов, Данные, ДополнительноеОписание = "", СтруктураСвязанныхДанных = Неопределено)
	Если Данные.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	МассивИменКолонок = Новый Массив();
	Для каждого Колонка Из Данные.Колонки Цикл
		МассивИменКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для каждого СтрокаДанных Из Данные Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		Для каждого ИмяКолонки Из МассивИменКолонок Цикл
		    ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКолонки);
			ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных[ИмяКолонки]);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СтруктураСвязанныхДанных) Тогда
		    ЗаписьJSON.ЗаписатьКонецОбъекта();
			Продолжить;
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьИмяСвойства(СтруктураСвязанныхДанных.СвойствоТелаЗапроса);
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		СтруктураПоиска = Новый Структура(СтруктураСвязанныхДанных.ПолеПоиска, СтрокаДанных[СтруктураСвязанныхДанных.ПолеПоиска]);
		НайденныеСтроки = СтруктураСвязанныхДанных.СвязанныеДанные.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		    ЗаписьJSON.ЗаписатьЗначение(НайденнаяСтрока[СтруктураСвязанныхДанных.ПолеВыбора]);
		КонецЦикла;
		
		ЗаписьJSON.ЗаписатьКонецМассива();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	ДанныеПодключения = ПолучитьДанныеПодключения(ИмяМетода, ТаблицаСоответствияВебСервисов);
	ОтветСервера = ВыполнитьЗапросКАИСДиспетчер(Узел, ДанныеПодключения, "", СтрокаJSON, ДополнительноеОписание);
	Если Не ОтветСервера.УспешноеВыполнение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПроверитьРаботоспособностьСервера(Узел, ДанныеПодключения, Пароль)
	//ЕстьОшибка = Ложь;
	//Попытка
	//    HTTPСоединение = Новый HTTPСоединение(Узел.АдресСервера, Число(ДанныеПодключения.Порт), Узел.ИмяПользователя, Пароль);
	//	
	//	HTTPЗапрос = Новый HTTPЗапрос("/" + ДанныеПодключения.Сервер + "/Ping");
	//	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	//	СтрокаТелаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	//	
	//	Если Не HTTPОтвет.КодСостояния = 200 Тогда
	//	    ОписаниеОшибки = Нстр("ru='При соединении с сервером возникли ошибки. Ответ сервера:'") + Символы.ПС + Символы.ПС + СтрокаТелаОтвета;
	//		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения запроса");
	//		ЕстьОшибка = Истина;
	//	КонецЕсли;
	//	
	//	ЕстьОшибка = Ложь;
	//Исключение
	//	ОписаниеОшибки = Нстр("ru = 'Не удается установить соединение с сервером:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
	//	СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
	//	ЕстьОшибка = Истина;
	//КонецПопытки;
	//
	//HTTPСоединение = Неопределено;
	//Возврат Не ЕстьОшибка;
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ОтправкаДанныхВАИСДиспетчер

Функция ПолучитьОписанияВспомогательныхТаблиц(НазванияТаблиц)
	СтруктураВозврата = Новый Структура();
	
	НоменклатураОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	СтрокаОписаниеТипов = Новый ОписаниеТипов("Строка");
	СтрокаОписаниеТипов10 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10));
	СтрокаОписаниеТипов12 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12));
	СтрокаОписаниеТипов20 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	СтрокаОписаниеТипов36 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));
	СтрокаОписаниеТипов50 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));
	СтрокаОписаниеТипов100 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	СтрокаОписаниеТипов150 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150));
	СтрокаОписаниеТипов250 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250));
	СтрокаОписаниеТипов500 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500));
	СтрокаОписаниеТипов1024 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1024));
	ДатаОписаниеТипов = Новый ОписаниеТипов("Дата");
	ЧислоОписаниеТипов = Новый ОписаниеТипов("Число");
	БулевоОписаниеТипов = Новый ОписаниеТипов("Булево");
	ОбъектРемонтаОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта");
	ПНОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ПараметрыВыработкиОС");
	КПОписаниеТипов = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта");
	СвойствоОписаниеТипов = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	
	ЕстьТаблицы = Ложь;
	
	Если Не НазванияТаблиц.Найти("ТипыВКатегориях") = Неопределено Тогда
	    ТипыВКатегориях = Новый ТаблицаЗначений();
		ТипыВКатегориях.Колонки.Добавить("kEquipmentCategoryID", ЧислоОписаниеТипов);
		ТипыВКатегориях.Колонки.Добавить("kEquipmentCategoryIntegrationID", СтрокаОписаниеТипов36);
		ТипыВКатегориях.Колонки.Добавить("kEquipmentTypeID", ЧислоОписаниеТипов);
		ТипыВКатегориях.Колонки.Добавить("kEquipmentTypeIntegrationID", СтрокаОписаниеТипов36);
		
		СтруктураВозврата.Вставить("ТипыВКатегориях", ТипыВКатегориях);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ГруппыВКатегориях") = Неопределено Тогда
	    ГруппыВКатегориях = Новый ТаблицаЗначений();
		ГруппыВКатегориях.Колонки.Добавить("kEquipmentCategoryID", ЧислоОписаниеТипов);
		ГруппыВКатегориях.Колонки.Добавить("kEquipmentCategoryIntegrationID", СтрокаОписаниеТипов36);
		ГруппыВКатегориях.Колонки.Добавить("kEquipmentGroupID", ЧислоОписаниеТипов);
		ГруппыВКатегориях.Колонки.Добавить("kEquipmentGroupIntegrationID", СтрокаОписаниеТипов36);
		
		СтруктураВозврата.Вставить("ГруппыВКатегориях", ГруппыВКатегориях);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ГруппыНоменклатуры") = Неопределено Тогда
	    ГруппыНоменклатуры = Новый ТаблицаЗначений();
		ГруппыНоменклатуры.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ГруппыНоменклатуры.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		
		СтруктураВозврата.Вставить("ГруппыНоменклатуры", ГруппыНоменклатуры);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПаспортныеХарактеристикиОРВГруппах") = Неопределено Тогда
	    ПаспортныеХарактеристикиОРВГруппах = Новый ТаблицаЗначений();
		ПаспортныеХарактеристикиОРВГруппах.Колонки.Добавить("kEquipmentGroupId", ЧислоОписаниеТипов);
		ПаспортныеХарактеристикиОРВГруппах.Колонки.Добавить("kTechnologyParamId", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ПаспортныеХарактеристикиОРВГруппах", ПаспортныеХарактеристикиОРВГруппах);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПаспортныеХарактеристикиОборудования") = Неопределено Тогда
	    ПаспортныеХарактеристикиОборудования = Новый ТаблицаЗначений();
		ПаспортныеХарактеристикиОборудования.Колонки.Добавить("kEquipmentIntegrationId", СтрокаОписаниеТипов36);
		ПаспортныеХарактеристикиОборудования.Колонки.Добавить("kTechnologyParamIntegrationId", СтрокаОписаниеТипов36);
		ПаспортныеХарактеристикиОборудования.Колонки.Добавить("Value", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ПаспортныеХарактеристикиОборудования", ПаспортныеХарактеристикиОборудования);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПаспортныеХарактеристикиОборудованияПустая") = Неопределено Тогда
	    ПаспортныеХарактеристикиОборудования = Новый ТаблицаЗначений();
		ПаспортныеХарактеристикиОборудования.Колонки.Добавить("ОбъектРемонта", ОбъектРемонтаОписаниеТипов);
		ПаспортныеХарактеристикиОборудования.Колонки.Добавить("Характеристика", СвойствоОписаниеТипов);
		ПаспортныеХарактеристикиОборудования.Колонки.Добавить("Значение", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ПаспортныеХарактеристикиОборудованияПустая", ПаспортныеХарактеристикиОборудования);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("Подразделения") = Неопределено Тогда
	    Подразделения = Новый ТаблицаЗначений();
		Подразделения.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		Подразделения.Колонки.Добавить("ParentID", ЧислоОписаниеТипов);
		Подразделения.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		Подразделения.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		Подразделения.Колонки.Добавить("ParentName", СтрокаОписаниеТипов100);
		Подразделения.Колонки.Добавить("ParentIntegrationID", СтрокаОписаниеТипов36);
		
		СтруктураВозврата.Вставить("Подразделения", Подразделения);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ТиповыеОР") = Неопределено Тогда
	    ТиповыеОР = Новый ТаблицаЗначений();
		ТиповыеОР.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ТиповыеОР.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ТиповыеОР.Колонки.Добавить("EquipmentCategoryIntegrationId", СтрокаОписаниеТипов36);
		ТиповыеОР.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		ТиповыеОР.Колонки.Добавить("Description", СтрокаОписаниеТипов100);
		ТиповыеОР.Колонки.Добавить("Code", СтрокаОписаниеТипов36);
		
		СтруктураВозврата.Вставить("ТиповыеОР", ТиповыеОР);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("НаправленияОР") = Неопределено Тогда
	    НаправленияОР = Новый ТаблицаЗначений();
		НаправленияОР.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		НаправленияОР.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		НаправленияОР.Колонки.Добавить("EquipmentCategoryIntegrationId", СтрокаОписаниеТипов36);
		НаправленияОР.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		НаправленияОР.Колонки.Добавить("Description", СтрокаОписаниеТипов100);
		НаправленияОР.Колонки.Добавить("Code", СтрокаОписаниеТипов36);
		
		СтруктураВозврата.Вставить("НаправленияОР", НаправленияОР);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("Контрагенты") = Неопределено Тогда
	    Контрагенты = Новый ТаблицаЗначений();
		Контрагенты.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		Контрагенты.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		Контрагенты.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		Контрагенты.Колонки.Добавить("Description", СтрокаОписаниеТипов);
		Контрагенты.Колонки.Добавить("ТипВАИСДиспетчере", СтрокаОписаниеТипов12);
		
		СтруктураВозврата.Вставить("Контрагенты", Контрагенты);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("Производители") = Неопределено Тогда
	    Производители = Новый ТаблицаЗначений();
		Производители.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		Производители.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		Производители.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		Производители.Колонки.Добавить("Description", СтрокаОписаниеТипов);
		Производители.Колонки.Добавить("Country", СтрокаОписаниеТипов50);
		Производители.Колонки.Добавить("Address", СтрокаОписаниеТипов50);
		Производители.Колонки.Добавить("Email", СтрокаОписаниеТипов50);
		Производители.Колонки.Добавить("Phone", СтрокаОписаниеТипов50);
		Производители.Колонки.Добавить("Contacts", СтрокаОписаниеТипов50);
		
		СтруктураВозврата.Вставить("Производители", Производители);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("Поставщики") = Неопределено Тогда
	    Поставщики = Новый ТаблицаЗначений();
		Поставщики.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		Поставщики.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		Поставщики.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		Поставщики.Колонки.Добавить("Site", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("Address", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("additionalInfo", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("administratorName", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("administratorEmail", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("administratorPhone", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("administratorInfo", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("techName", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("techEmail", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("techPhone", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("techInfo", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("contactName", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("contactEmail", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("contactPhone", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("contactInfo", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("contactMobilePhone", СтрокаОписаниеТипов50);
		Поставщики.Колонки.Добавить("contactFax", СтрокаОписаниеТипов50);
		
		СтруктураВозврата.Вставить("Поставщики", Поставщики);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("СтанкиПолная") = Неопределено Тогда
	    СтанкиПолная = Новый ТаблицаЗначений();
		СтанкиПолная.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		СтанкиПолная.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		СтанкиПолная.Колонки.Добавить("Description", СтрокаОписаниеТипов);
		СтанкиПолная.Колонки.Добавить("DeptID", ЧислоОписаниеТипов);
		СтанкиПолная.Колонки.Добавить("MachineNum", СтрокаОписаниеТипов);
		СтанкиПолная.Колонки.Добавить("ShortName", СтрокаОписаниеТипов);
		СтанкиПолная.Колонки.Добавить("Name", СтрокаОписаниеТипов);
		
		СтруктураВозврата.Вставить("СтанкиПолная", СтанкиПолная);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("Станки") = Неопределено Тогда
	    Станки = Новый ТаблицаЗначений();
		Станки.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		Станки.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		Станки.Колонки.Добавить("kEquipmentId", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("Станки", Станки);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ОбъектыРемонта") = Неопределено Тогда
	    ОбъектыРемонта = Новый ТаблицаЗначений();
		ОбъектыРемонта.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("Name", СтрокаОписаниеТипов150);
		ОбъектыРемонта.Колонки.Добавить("DeptID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("Description", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("kEquipmentTypeIntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("kEquipmentGroupIntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("kEquipmentFirmIntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("Code", СтрокаОписаниеТипов12);
		ОбъектыРемонта.Колонки.Добавить("InventoryNumber", СтрокаОписаниеТипов20);
		ОбъектыРемонта.Колонки.Добавить("FactoryNumber", СтрокаОписаниеТипов250);
		ОбъектыРемонта.Колонки.Добавить("dtProducer", ДатаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("dtInput", ДатаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("ProviderID", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("dtGuarantee", ДатаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("ProductSite", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("ProductBuildingNumber", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("Местонахождение", СтрокаОписаниеТипов250);
		
		СтруктураВозврата.Вставить("ОбъектыРемонта", ОбъектыРемонта);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ОбъектыРемонтаПолная") = Неопределено Тогда
	    ОбъектыРемонта = Новый ТаблицаЗначений();
		ОбъектыРемонта.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("Name", СтрокаОписаниеТипов150);
		ОбъектыРемонта.Колонки.Добавить("ShortName", СтрокаОписаниеТипов150);
		ОбъектыРемонта.Колонки.Добавить("Code", СтрокаОписаниеТипов12);
		ОбъектыРемонта.Колонки.Добавить("Description", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("kEquipmentCategoryIntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("kEquipmentTypeIntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("kEquipmentGroupIntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("kEquipmentFirmIntegrationID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("DeptID", СтрокаОписаниеТипов36);
		ОбъектыРемонта.Колонки.Добавить("InventoryNumber", СтрокаОписаниеТипов20);
		ОбъектыРемонта.Колонки.Добавить("FactoryNumber", СтрокаОписаниеТипов250);
		ОбъектыРемонта.Колонки.Добавить("dtProducer", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("dtInput", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("ProviderID", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("dtGuarantee", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("Weight", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("Power", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("ServiceOrganizationID", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("Cost", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("PeriodAmortization", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("HourlyCost", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("IsUseMonitoring", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("ProductSite", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("ProductBuildingNumber", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("CadastralNumberOfBuilding", СтрокаОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("CncModelId", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("NumberOfControlledCoordinates", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("PhysicalDeteriorationPercent", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("Amortization", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("FinancialProjectId", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("TechnologicalGroupOfProductionTypeID", ЧислоОписаниеТипов);
		ОбъектыРемонта.Колонки.Добавить("machineSchedule", СтрокаОписаниеТипов);
		
		СтруктураВозврата.Вставить("ОбъектыРемонтаПолная", ОбъектыРемонта);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПаспортныеХарактеристикиОР") = Неопределено Тогда
	    ПаспортныеХарактеристикиОР = Новый ТаблицаЗначений();
		ПаспортныеХарактеристикиОР.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ПаспортныеХарактеристикиОР.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ПаспортныеХарактеристикиОР.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		ПаспортныеХарактеристикиОР.Колонки.Добавить("Code", СтрокаОписаниеТипов100);
		ПаспортныеХарактеристикиОР.Колонки.Добавить("EdIzm", СтрокаОписаниеТипов100);
		ПаспортныеХарактеристикиОР.Колонки.Добавить("Description", СтрокаОписаниеТипов);
		
		СтруктураВозврата.Вставить("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОР);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПоказателиЭксплуатации") = Неопределено Тогда
	    ПоказателиЭксплуатации = Новый ТаблицаЗначений();
		ПоказателиЭксплуатации.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ПоказателиЭксплуатации.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ПоказателиЭксплуатации.Колонки.Добавить("Name", СтрокаОписаниеТипов50);
		ПоказателиЭксплуатации.Колонки.Добавить("MachineParamTypeID", ЧислоОписаниеТипов);
		ПоказателиЭксплуатации.Колонки.Добавить("MeasureUnit", СтрокаОписаниеТипов50);
		ПоказателиЭксплуатации.Колонки.Добавить("IsCounter", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ПоказателиЭксплуатации", ПоказателиЭксплуатации);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПоказателиЭксплуатацииСтанков") = Неопределено Тогда//
	    ПоказателиЭксплуатацииСтанков = Новый ТаблицаЗначений();
		ПоказателиЭксплуатацииСтанков.Колонки.Добавить("MachineID", ЧислоОписаниеТипов);
		ПоказателиЭксплуатацииСтанков.Колонки.Добавить("MachineParamID", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ПоказателиЭксплуатацииСтанков", ПоказателиЭксплуатацииСтанков);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ИерархияНоменклатуры") = Неопределено Тогда
	    ИерархияНоменклатуры = Новый ДеревоЗначений();
		ИерархияНоменклатуры.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ИерархияНоменклатуры.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ИерархияНоменклатуры.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		ИерархияНоменклатуры.Колонки.Добавить("ИндексКартинки", ЧислоОписаниеТипов);
		ИерархияНоменклатуры.Колонки.Добавить("Обрабатывать", БулевоОписаниеТипов);
		ИерархияНоменклатуры.Колонки.Добавить("Сопоставлен", БулевоОписаниеТипов);
		ИерархияНоменклатуры.Колонки.Добавить("Объект", НоменклатураОписаниеТипов);
		
		СтруктураВозврата.Вставить("ИерархияНоменклатуры", ИерархияНоменклатуры);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ТаблицаИерархииНоменклатуры") = Неопределено Тогда
	    ТаблицаИерархииНоменклатуры = Новый ТаблицаЗначений();
		ТаблицаИерархииНоменклатуры.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ТаблицаИерархииНоменклатуры.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ТаблицаИерархииНоменклатуры.Колонки.Добавить("ParentID", ЧислоОписаниеТипов);
		ТаблицаИерархииНоменклатуры.Колонки.Добавить("ParentIntegrationID", СтрокаОписаниеТипов36);
		ТаблицаИерархииНоменклатуры.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		ТаблицаИерархииНоменклатуры.Колонки.Добавить("Description", СтрокаОписаниеТипов100);
		ТаблицаИерархииНоменклатуры.Колонки.Добавить("НомерСтроки", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ТаблицаИерархииНоменклатуры", ТаблицаИерархииНоменклатуры);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("Номенклатура") = Неопределено Тогда
	    Номенклатура = Новый ТаблицаЗначений();
		Номенклатура.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		Номенклатура.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		Номенклатура.Колонки.Добавить("MaterialAndComponentGroupID", ЧислоОписаниеТипов);
		Номенклатура.Колонки.Добавить("Name", СтрокаОписаниеТипов1024);
		Номенклатура.Колонки.Добавить("ShortName", СтрокаОписаниеТипов100);
		Номенклатура.Колонки.Добавить("Description", СтрокаОписаниеТипов);
		Номенклатура.Колонки.Добавить("Cost", ЧислоОписаниеТипов);
		Номенклатура.Колонки.Добавить("TypeId", ЧислоОписаниеТипов);
		Номенклатура.Колонки.Добавить("Number", СтрокаОписаниеТипов);
		Номенклатура.Колонки.Добавить("EdIzm", СтрокаОписаниеТипов);
		Номенклатура.Колонки.Добавить("Mark", СтрокаОписаниеТипов);
		Номенклатура.Колонки.Добавить("MaterialAndComponentGroupIntegrationID", СтрокаОписаниеТипов);
		
		СтруктураВозврата.Вставить("Номенклатура", Номенклатура);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ЗапчастиОР") = Неопределено Тогда//
	    ЗапчастиОР = Новый ТаблицаЗначений();
		ЗапчастиОР.Колонки.Добавить("MaterialAndComponentIntegrationID", СтрокаОписаниеТипов36);
		ЗапчастиОР.Колонки.Добавить("ОбъектРемонта", ОбъектРемонтаОписаниеТипов);
		ЗапчастиОР.Колонки.Добавить("kEquipmentID", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ЗапчастиОР", ЗапчастиОР);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ВидыЭксплуатации") = Неопределено Тогда
	    ВидыЭксплуатации = Новый ТаблицаЗначений();
		ВидыЭксплуатации.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ВидыЭксплуатации.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ВидыЭксплуатации.Колонки.Добавить("Name", СтрокаОписаниеТипов50);
		ВидыЭксплуатации.Колонки.Добавить("MachineParamTypeID", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ВидыЭксплуатации", ВидыЭксплуатации);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПричиныПростоя") = Неопределено Тогда
	    ПричиныПростоя = Новый ТаблицаЗначений();
		ПричиныПростоя.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		ПричиныПростоя.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		ПричиныПростоя.Колонки.Добавить("Name", СтрокаОписаниеТипов50);
		ПричиныПростоя.Колонки.Добавить("MachineParamTypeID", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ПричиныПростоя", ПричиныПростоя);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПараметрыСтанков") = Неопределено Тогда
	    ПараметрыСтанков = Новый ТаблицаЗначений();
		ПараметрыСтанков.Колонки.Добавить("MachineParamID", ЧислоОписаниеТипов);
		ПараметрыСтанков.Колонки.Добавить("FormulaText", СтрокаОписаниеТипов500);
		
		СтруктураВозврата.Вставить("ПараметрыСтанков", ПараметрыСтанков);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("Сотрудники") = Неопределено Тогда
	    Сотрудники = Новый ТаблицаЗначений();
		Сотрудники.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		Сотрудники.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		Сотрудники.Колонки.Добавить("TabNom", СтрокаОписаниеТипов10);
		Сотрудники.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		Сотрудники.Колонки.Добавить("FirstName", СтрокаОписаниеТипов100);
		Сотрудники.Колонки.Добавить("LastName", СтрокаОписаниеТипов100);
		Сотрудники.Колонки.Добавить("Patronymic", СтрокаОписаниеТипов100);
		Сотрудники.Колонки.Добавить("DeptID", ЧислоОписаниеТипов);
		Сотрудники.Колонки.Добавить("DeptIntegrationID", СтрокаОписаниеТипов36);
		Сотрудники.Колонки.Добавить("DeptName", СтрокаОписаниеТипов);
		Сотрудники.Колонки.Добавить("ProfName", СтрокаОписаниеТипов150);
		Сотрудники.Колонки.Добавить("dtAccept", ДатаОписаниеТипов);
		Сотрудники.Колонки.Добавить("dtFired", ДатаОписаниеТипов);
		
		СтруктураВозврата.Вставить("Сотрудники", Сотрудники);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("КадровыеДокументы") = Неопределено Тогда
		СтруктураВозврата.Вставить("КадровыеДокументы", Новый ТаблицаЗначений());
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("КонтролируемыеПоказатели") = Неопределено Тогда
		КонтролируемыеПоказатели = Новый ТаблицаЗначений();
		КонтролируемыеПоказатели.Колонки.Добавить("ОбъектРемонта", ОбъектРемонтаОписаниеТипов);
		КонтролируемыеПоказатели.Колонки.Добавить("Показатель", КПОписаниеТипов);
		КонтролируемыеПоказатели.Колонки.Добавить("ДопустимыйМинимум", ЧислоОписаниеТипов);
		КонтролируемыеПоказатели.Колонки.Добавить("ДопустимыйМаксимум", ЧислоОписаниеТипов);
		КонтролируемыеПоказатели.Колонки.Добавить("КритическийМинимум", ЧислоОписаниеТипов);
		КонтролируемыеПоказатели.Колонки.Добавить("КритическийМаксимум", ЧислоОписаниеТипов);
		КонтролируемыеПоказатели.Колонки.Добавить("Доступность", БулевоОписаниеТипов);
		
		СтруктураВозврата.Вставить("КонтролируемыеПоказатели", КонтролируемыеПоказатели);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ПараметрыНаработки") = Неопределено Тогда
		ПараметрыНаработки = Новый ТаблицаЗначений();
		ПараметрыНаработки.Колонки.Добавить("ОбъектРемонта", ОбъектРемонтаОписаниеТипов);
		ПараметрыНаработки.Колонки.Добавить("Показатель", ПНОписаниеТипов);
		ПараметрыНаработки.Колонки.Добавить("Период");
		ПараметрыНаработки.Колонки.Добавить("КоэффициентИспользованияОборудования", ЧислоОписаниеТипов);
		ПараметрыНаработки.Колонки.Добавить("ПродолжительностьПериодаПлановойНаработки", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ПараметрыНаработки", ПараметрыНаработки);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ДанныеПоСостояниямОР") = Неопределено Тогда
	    СостоянияОР = Новый ТаблицаЗначений();
		СостоянияОР.Колонки.Добавить("ID", СтрокаОписаниеТипов36);
		СостоянияОР.Колонки.Добавить("MachineID", ЧислоОписаниеТипов);
		СостоянияОР.Колонки.Добавить("MachineIntegrationID", СтрокаОписаниеТипов36);
		СостоянияОР.Колонки.Добавить("MachineParamName", СтрокаОписаниеТипов50);
		СостоянияОР.Колонки.Добавить("MachineParamID", ЧислоОписаниеТипов);
		СостоянияОР.Колонки.Добавить("StartTime", ДатаОписаниеТипов);
		СостоянияОР.Колонки.Добавить("EndTime", ДатаОписаниеТипов);
		
		СтруктураВозврата.Вставить("ДанныеПоСостояниямОР", СостоянияОР);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ДанныеПоСостояниямОР_ДляИнициаторов") = Неопределено Тогда
	    СостоянияОР = Новый ТаблицаЗначений();
		СостоянияОР.Колонки.Добавить("ID", СтрокаОписаниеТипов36);
		СостоянияОР.Колонки.Добавить("MachineIntegrationID", СтрокаОписаниеТипов36);
		СостоянияОР.Колонки.Добавить("StartTime", ДатаОписаниеТипов);
		СостоянияОР.Колонки.Добавить("EndTime", ДатаОписаниеТипов);
		СостоянияОР.Колонки.Добавить("workerSetterIntegrationId", СтрокаОписаниеТипов36);
		
		СтруктураВозврата.Вставить("ДанныеПоСостояниямОР_ДляИнициаторов", СостоянияОР);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ДанныеПоКонтролируемымПоказателям") = Неопределено Тогда
	    ДанныеПоКонтролируемымПоказателям = Новый ТаблицаЗначений();
		ДанныеПоКонтролируемымПоказателям.Колонки.Добавить("ID", СтрокаОписаниеТипов36);
		ДанныеПоКонтролируемымПоказателям.Колонки.Добавить("MachineID", ЧислоОписаниеТипов);
		ДанныеПоКонтролируемымПоказателям.Колонки.Добавить("MachineParamID", ЧислоОписаниеТипов);
		ДанныеПоКонтролируемымПоказателям.Колонки.Добавить("DateTime", ДатаОписаниеТипов);
		ДанныеПоКонтролируемымПоказателям.Колонки.Добавить("Average", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ДанныеПоКонтролируемымПоказателям", ДанныеПоКонтролируемымПоказателям);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ДанныеПоНаработке") = Неопределено Тогда
	    ДанныеПоНаработке = Новый ТаблицаЗначений();
		ДанныеПоНаработке.Колонки.Добавить("ID", СтрокаОписаниеТипов36);
		ДанныеПоНаработке.Колонки.Добавить("MachineID", ЧислоОписаниеТипов);
		ДанныеПоНаработке.Колонки.Добавить("MachineParamID", ЧислоОписаниеТипов);
		ДанныеПоНаработке.Колонки.Добавить("DateTime", ДатаОписаниеТипов);
		ДанныеПоНаработке.Колонки.Добавить("Average", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("ДанныеПоНаработке", ДанныеПоНаработке);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("Параметры") = Неопределено Тогда
	    Параметры = Новый ТаблицаЗначений();
		Параметры.Колонки.Добавить("ID", ЧислоОписаниеТипов);
		Параметры.Колонки.Добавить("IntegrationID", СтрокаОписаниеТипов36);
		Параметры.Колонки.Добавить("Name", СтрокаОписаниеТипов100);
		Параметры.Колонки.Добавить("MeasureUnit", СтрокаОписаниеТипов50);
		Параметры.Колонки.Добавить("MachineParamTypeID", ЧислоОписаниеТипов);
		Параметры.Колонки.Добавить("Priority", ЧислоОписаниеТипов);
		
		СтруктураВозврата.Вставить("Параметры", Параметры);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	
	Если Не НазванияТаблиц.Найти("ВыявленныеДефекты") = Неопределено Тогда
	    ВыявленныеДефекты = Новый ТаблицаЗначений();
		ВыявленныеДефекты.Колонки.Добавить("ID", СтрокаОписаниеТипов36);
		ВыявленныеДефекты.Колонки.Добавить("MachineIntegrationID", СтрокаОписаниеТипов36);
		ВыявленныеДефекты.Колонки.Добавить("Date", ДатаОписаниеТипов);
		ВыявленныеДефекты.Колонки.Добавить("Name", СтрокаОписаниеТипов36);
		ВыявленныеДефекты.Колонки.Добавить("Description", СтрокаОписаниеТипов);
		
		СтруктураВозврата.Вставить("ВыявленныеДефекты", ВыявленныеДефекты);
		ЕстьТаблицы = Истина;
	КонецЕсли;
	//
	//Если Не НазванияТаблиц.Найти("Запчасти") = Неопределено Тогда
	//    Запчасти = Новый ТаблицаЗначений();
	//	Запчасти.Колонки.Добавить("ОбъектРемонта", ОбъектРемонтаОписаниеТипов);
	//	
	//	СтруктураВозврата.Вставить("Запчасти", Запчасти);
	//	ЕстьТаблицы = Истина;
	//КонецЕсли;
	//
	//Если Не НазванияТаблиц.Найти("ПаспортныеХарактеристикиОР") = Неопределено Тогда
	//    ПаспортныеХарактеристикиОР = Новый ТаблицаЗначений();
	//	ПаспортныеХарактеристикиОР.Колонки.Добавить("ОбъектРемонта", ОбъектРемонтаОписаниеТипов);
	//	
	//	СтруктураВозврата.Вставить("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОР);
	//	ЕстьТаблицы = Истина;
	//КонецЕсли;
	
	Возврат ?(ЕстьТаблицы, СтруктураВозврата, Неопределено);
КонецФункции

Функция ПодготовитьДанныеКОтправке(Узел, СтруктураВыборки)
	СтруктураВозврата = Новый Структура();
	
#Область Подразделения
	МассивПодразделений = Новый Массив();
	ВыборкаПодразделений = СтруктураВыборки.ВыборкаПодразделений;
	Пока ВыборкаПодразделений.Следующий() Цикл
		Попытка
			ТекущееПодразделение = ВыборкаПодразделений.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, ВыборкаПодразделений);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущееПодразделение) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущееПодразделение);
			Продолжить;
		КонецЕсли;
		
		Если Узел.ВыгружатьПодразделения Тогда
		    МассивПодразделений.Добавить(ТекущееПодразделение.Ссылка);
		КонецЕсли;
	КонецЦикла;
#КонецОбласти
	
#Область Номенклатура
	МассивНаправленийОР = Новый Массив();
	ВыборкаНаправленийОР = СтруктураВыборки.ВыборкаНаправленийОР;
	Пока ВыборкаНаправленийОР.Следующий() Цикл
		Попытка
			ТекущееНаправлениеОР = ВыборкаНаправленийОР.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, ВыборкаНаправленийОР);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущееНаправлениеОР) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущееНаправлениеОР);
			Продолжить;
		КонецЕсли;
		
		МассивНаправленийОР.Добавить(ТекущееНаправлениеОР.Ссылка);
	КонецЦикла;
	
	СтруктураВозврата.Вставить("МассивНаправленийОР", МассивНаправленийОР);
#КонецОбласти
	
#Область ТиповыеОР
	МассивТиповыхОР = Новый Массив();
	ВыборкаТиповыхОР = СтруктураВыборки.ВыборкаТиповыхОР;
	Пока ВыборкаТиповыхОР.Следующий() Цикл
		Попытка
			ТекущийТиповойОР = ВыборкаТиповыхОР.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, ВыборкаТиповыхОР);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущийТиповойОР) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийТиповойОР);
			Продолжить;
		КонецЕсли;
		
		МассивТиповыхОР.Добавить(ТекущийТиповойОР.Ссылка);
	КонецЦикла;
	
	СтруктураВозврата.Вставить("МассивТиповыхОР", МассивТиповыхОР);
#КонецОбласти
	
#Область Номенклатура
	МассивНоменклатуры = Новый Массив();
	ВыборкаНоменклатуры = СтруктураВыборки.ВыборкаНоменклатуры;
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		Попытка
			ТекущаяНоменклатура = ВыборкаНоменклатуры.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, ВыборкаНоменклатуры);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущаяНоменклатура) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущаяНоменклатура);
			Продолжить;
		КонецЕсли;
		
		МассивНоменклатуры.Добавить(ТекущаяНоменклатура.Ссылка);
	КонецЦикла;
	
	СтруктураВозврата.Вставить("МассивНоменклатуры", МассивНоменклатуры);
#КонецОбласти

#Область ПаспортныеХарактеристики

#Область ДополнительныеРеквизитыИСведения
	МассивПаспортныхХарактеристикОР = Новый Массив();
	ВыборкаПаспортныхХарактеристикОР = СтруктураВыборки.ВыборкаПаспортныхХарактеристикОР;
	Пока ВыборкаПаспортныхХарактеристикОР.Следующий() Цикл
		Попытка
			ТекущаяПаспортнаяХарактериситкаОР = ВыборкаПаспортныхХарактеристикОР.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, ВыборкаПаспортныхХарактеристикОР);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущаяПаспортнаяХарактериситкаОР) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущаяПаспортнаяХарактериситкаОР);
			Продолжить;
		КонецЕсли;
		
		ТипыЗначений = ТекущаяПаспортнаяХарактериситкаОР.Ссылка.ТипЗначения.Типы();
		Если ТипыЗначений.Количество() = 1 И ТипыЗначений[0] = Тип("Число") Тогда
		    МассивПаспортныхХарактеристикОР.Добавить(ТекущаяПаспортнаяХарактериситкаОР.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_ДополнительныеРеквизиты
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Ссылка В(&МассивПаспортныхХарактеристикОР)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	торо_ОбъектыРемонта.ТиповойОР.НаборСвойствОР КАК НаборСвойствОР
	               |ПОМЕСТИТЬ ВТ_НаборыСвойствТиповыхИНаправлений
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	НЕ торо_ОбъектыРемонта.ТиповойОР ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ОбъектыРемонта.Направление.НаборСвойствОР
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	НЕ торо_ОбъектыРемонта.Направление ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НаборыДополнительныхРеквизитовИСведений.Ссылка
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	               |ГДЕ
	               |	НаборыДополнительныхРеквизитовИСведений.Ссылка = &НаборСвойств
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НаборыСвойствТиповыхИНаправлений КАК ВТ_НаборыСвойствТиповыхИНаправлений
	               |		ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ВТ_НаборыСвойствТиповыхИНаправлений.НаборСвойствОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДополнительныеРеквизиты КАК ВТ_ДополнительныеРеквизиты
	               |		ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство = ВТ_ДополнительныеРеквизиты.Характеристика";
#КонецОбласти
	Запрос.УстановитьПараметр("НаборСвойств", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_торо_ОбъектыРемонта"));
	Запрос.УстановитьПараметр("МассивПаспортныхХарактеристикОР", МассивПаспортныхХарактеристикОР);
	СтруктураВозврата.Вставить("МассивПаспортныхХарактеристикОР", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство"));
#КонецОбласти
	
#Область ГруппыХарактеристикОР
	ВыборкаГруппХарактеристикОР = СтруктураВыборки.ВыборкаГруппХарактеристикОР;
	МассивГруппХарактеристикОР = Новый Массив();
	Пока ВыборкаГруппХарактеристикОР.Следующий() Цикл
		Попытка
			ТекущаяГруппаХарактериситкОР = ВыборкаГруппХарактеристикОР.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, ВыборкаГруппХарактеристикОР);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущаяГруппаХарактериситкОР) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущаяГруппаХарактериситкОР);
			Продолжить;
		КонецЕсли;
		
		ТипыЗначений = ТекущаяГруппаХарактериситкОР.Ссылка.ТипЗначения.Типы();
		Если ТипыЗначений.Количество() = 1 И ТипыЗначений[0] = Тип("Число") Тогда
		    МассивГруппХарактеристикОР.Добавить(ТекущаяГруппаХарактериситкОР.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата.Вставить("МассивГруппХарактеристикОР", МассивГруппХарактеристикОР);
#КонецОбласти

#КонецОбласти
	
#Область Сотрудники
	МассивСотрудников = Новый Массив();
	ВыборкаСотрудников = СтруктураВыборки.ВыборкаСотрудников;
	Пока ВыборкаСотрудников.Следующий() Цикл
		Попытка
			ТекущийСотрудник = ВыборкаСотрудников.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, ВыборкаСотрудников);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущийСотрудник) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийСотрудник);
			Продолжить;
		КонецЕсли;
		
		Если Узел.ВыгружатьСотрудников Тогда
		    МассивСотрудников.Добавить(ТекущийСотрудник.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата.Вставить("МассивСотрудников", МассивСотрудников);
#КонецОбласти
	
#Область ОР
	МассивОР = Новый Массив();
	ВыборкаОР = СтруктураВыборки.ВыборкаОР;
	Пока ВыборкаОР.Следующий() Цикл
		Попытка
			ТекущийОР = ВыборкаОР.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, ВыборкаОР);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущийОР) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОР);
			Продолжить;
		КонецЕсли;
		
		ВыгружатьОР = (Узел.ВыгружатьОбъектыРемонта И Не ТекущийОР.ЭтоГруппа И Не (ЗначениеЗаполнено(ТекущийОР.ТиповойОР) И Не ТекущийОР.ТиповойОР.ПередаватьВАИСДиспетчер));
		Если ВыгружатьОР Тогда
		    МассивОР.Добавить(ТекущийОР.Ссылка);
			
			Если МассивПодразделений.Найти(ТекущийОР.Подразделение) = Неопределено Тогда
			    МассивПодразделений.Добавить(ТекущийОР.Подразделение);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ТекущийОР.ТиповойОР) И Не ЗначениеЗаполнено(МассивТиповыхОР.Найти(ТекущийОР.ТиповойОР)) Тогда
			    МассивТиповыхОР.Добавить(ТекущийОР.ТиповойОР);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущийОР.Направление) И Не ЗначениеЗаполнено(МассивНаправленийОР.Найти(ТекущийОР.Направление)) Тогда
			    МассивНаправленийОР.Добавить(ТекущийОР.Направление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата.Вставить("МассивОР", МассивОР);
#КонецОбласти

#Область ТекстЗапроса
	ЗапросИерархияПодразделений = Новый Запрос();
	ЗапросИерархияПодразделений.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                    |	КадроваяИсторияСотрудников.Подразделение КАК Подразделение
	                                    |ПОМЕСТИТЬ ВТ_ПодразделенияСотрудников
	                                    |ИЗ
	                                    |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(, Сотрудник В (&МассивСотрудников)) КАК КадроваяИсторияСотрудников
	                                    |
	                                    |ИНДЕКСИРОВАТЬ ПО
	                                    |	Подразделение
	                                    |;
	                                    |
	                                    |////////////////////////////////////////////////////////////////////////////////
	                                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                    |	СтруктураПредприятия.Ссылка КАК Ссылка
	                                    |ИЗ
	                                    |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	                                    |ГДЕ
	                                    |	(СтруктураПредприятия.Ссылка В (&МассивПодразделений)
	                                    |			ИЛИ СтруктураПредприятия.Ссылка В
	                                    |				(ВЫБРАТЬ
	                                    |					ВТ_ПодразделенияСотрудников.Подразделение КАК Сслыка
	                                    |				ИЗ
	                                    |					ВТ_ПодразделенияСотрудников КАК ВТ_ПодразделенияСотрудников))
	                                    |ИТОГИ ПО
	                                    |	Ссылка ТОЛЬКО ИЕРАРХИЯ";
#КонецОбласти
	ЗапросИерархияПодразделений.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	ЗапросИерархияПодразделений.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	РезультатЗапроса = ЗапросИерархияПодразделений.Выполнить();
	
	МассивИерархииПодразделений = Новый Массив();
	
	ВыборкаИерархииПодразделений = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаИерархииПодразделений.Следующий() Цикл
	    ВыборкаИерархииДочернихПодразделений = ВыборкаИерархииПодразделений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбойтиВыборкуИерархииПодразделенийРекурсивно(МассивИерархииПодразделений, ВыборкаИерархииДочернихПодразделений);
		
		Если МассивИерархииПодразделений.Найти(ВыборкаИерархииПодразделений.Ссылка) = Неопределено
			И ЗначениеЗаполнено(ВыборкаИерархииПодразделений.Ссылка) Тогда
		    МассивИерархииПодразделений.Добавить(ВыборкаИерархииПодразделений.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата.Вставить("МассивПодразделений", МассивИерархииПодразделений);
	Возврат СтруктураВозврата;
КонецФункции

Процедура ОбойтиВыборкуИерархииПодразделенийРекурсивно(МассивИерархииПодразделений, ВыборкаИерархииПодразделений)
	Пока ВыборкаИерархииПодразделений.Следующий() Цикл
	    ВыборкаИерархииДочернихПодразделений = ВыборкаИерархииПодразделений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбойтиВыборкуИерархииПодразделенийРекурсивно(МассивИерархииПодразделений, ВыборкаИерархииДочернихПодразделений);
		
		Если МассивИерархииПодразделений.Найти(ВыборкаИерархииПодразделений.Ссылка) = Неопределено
			И ЗначениеЗаполнено(ВыборкаИерархииПодразделений.Ссылка) Тогда
		    МассивИерархииПодразделений.Добавить(ВыборкаИерархииПодразделений.Ссылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Область КатегорииОборудования

Функция ОтправитьКатегориюОборудованияПоУмолчанию(Узел, ТаблицаСоответствияВебСервисов)
	ДанныеПодключения = ПолучитьДанныеПодключения("SendEquipmentCategoryModelList", ТаблицаСоответствияВебСервисов);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("Id");
	ЗаписьJSON.ЗаписатьЗначение(1000000);
	ЗаписьJSON.ЗаписатьИмяСвойства("IntegrationId");
	ЗаписьJSON.ЗаписатьЗначение("1C:TOIR");
	ЗаписьJSON.ЗаписатьИмяСвойства("Name");
	ЗаписьJSON.ЗаписатьЗначение("1С:ТОИР");
	ЗаписьJSON.ЗаписатьИмяСвойства("Description");
	ЗаписьJSON.ЗаписатьЗначение("Это категория по умолчанию для интеграции с 1С:ТОИР.
								|Если в 1С:ТОИР у ОР указаны такие типовой ОР и направление, что в АИС Диспетчер нет ни одной категории, в которой были бы соответствующие тип и группа, то они привязываются к этой категории, которая будет подставляться в оборудование, чтобы корректно указать тип и группу");
	ЗаписьJSON.ЗаписатьИмяСвойства("Code");
	ЗаписьJSON.ЗаписатьЗначение("");
	ЗаписьJSON.ЗаписатьИмяСвойства("isUseId");
	ЗаписьJSON.ЗаписатьЗначение(Ложь);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	ДополнительноеОписание = НСтр("ru = '(при отправке категории по умолчанию)'");
	ОтветСервера = ВыполнитьЗапросКАИСДиспетчер(Узел, ДанныеПодключения, "", СтрокаJSON, ДополнительноеОписание);
	Если Не ОтветСервера.УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьТипыИГруппыВКатегориях(Узел, ТаблицаСоответствияВебСервисов)
	СтруктураТаблиц = Новый Структура();
#Область ТипыВКатегориях
	ДополнительноеОписание = НСтр("ru = 'при получении типов в категориях'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.kEquipmentCategoryIntegrationID) Или Не ЗначениеЗаполнено(СтрокаДанных.kEquipmentTypeIntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	СтруктураТаблиц.Вставить("ТипыВКатегориях", ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentTypeInCategoryList", "ТипыВКатегориях", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка));
#КонецОбласти

#Область ГруппыВКатегориях
	ДополнительноеОписание = НСтр("ru = 'при получении групп в категориях'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.kEquipmentCategoryIntegrationID) Или Не ЗначениеЗаполнено(СтрокаДанных.kEquipmentGroupIntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	СтруктураТаблиц.Вставить("ГруппыВКатегориях", ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentGroupInCategoryList", "ГруппыВКатегориях", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка));
#КонецОбласти

	Возврат СтруктураТаблиц;
КонецФункции

Функция ПривязатьТипыИГруппыККатегориям(Узел, МассивОР, СтруктураВспомогательныхТаблиц, ТаблицаСоответствияВебСервисов)
#Область ТиповыеИНаправленияВКатеориях
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР.УникальныйИдентификаторДиспетчер КАК TypeIntegrationID,
	               |	торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.УникальныйИдентификаторДиспетчер КАК GroupIntegrationID,
	               |	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
	               |	торо_ОбъектыРемонта.Направление КАК Направление
	               |ПОМЕСТИТЬ ВТ_ТиповыеИНаправленияОР
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР
	               |		ПО торо_ОбъектыРемонта.ТиповойОР = торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР
	               |		ПО торо_ОбъектыРемонта.Направление = торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.ОбъектТОИР
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка В(&МассивОР)
	               |	И НЕ торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР.ОбъектТОИР ЕСТЬ NULL
	               |	И НЕ торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.ОбъектТОИР ЕСТЬ NULL
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	TypeIntegrationID,
	               |	GroupIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТипыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ТипыВКатегориях.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID
	               |ПОМЕСТИТЬ ВТ_ТипыВКатегориях
	               |ИЗ
	               |	&ТипыВКатегориях КАК ТипыВКатегориях
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentCategoryIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГруппыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ГруппыВКатегориях.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID
	               |ПОМЕСТИТЬ ВТ_ГруппыВКатегориях
	               |ИЗ
	               |	&ГруппыВКатегориях КАК ГруппыВКатегориях
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentCategoryIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТипыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ВТ_ТипыВКатегориях.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID,
	               |	ВТ_ГруппыВКатегориях.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID
	               |ПОМЕСТИТЬ ВТ_ГруппыИТипыВКатегориях
	               |ИЗ
	               |	ВТ_ТипыВКатегориях КАК ВТ_ТипыВКатегориях
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ГруппыВКатегориях КАК ВТ_ГруппыВКатегориях
	               |		ПО ВТ_ТипыВКатегориях.kEquipmentCategoryIntegrationID = ВТ_ГруппыВКатегориях.kEquipmentCategoryIntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentTypeIntegrationID,
	               |	kEquipmentGroupIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ВТ_ГруппыИТипыВКатегориях.kEquipmentCategoryIntegrationID, ""1C:TOIR"") КАК kEquipmentCategoryIntegrationID,
	               |	ВТ_ТиповыеИНаправленияОР.TypeIntegrationID КАК kEquipmentTypeIntegrationID,
	               |	ВТ_ТиповыеИНаправленияОР.GroupIntegrationID КАК kEquipmentGroupIntegrationID,
	               |	ВТ_ТиповыеИНаправленияОР.ТиповойОР КАК ТиповойОР,
	               |	ВТ_ТиповыеИНаправленияОР.Направление КАК Направление
	               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	               |ИЗ
	               |	ВТ_ТиповыеИНаправленияОР КАК ВТ_ТиповыеИНаправленияОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппыИТипыВКатегориях КАК ВТ_ГруппыИТипыВКатегориях
	               |		ПО ВТ_ТиповыеИНаправленияОР.TypeIntegrationID = ВТ_ГруппыИТипыВКатегориях.kEquipmentTypeIntegrationID
	               |			И ВТ_ТиповыеИНаправленияОР.GroupIntegrationID = ВТ_ГруппыИТипыВКатегориях.kEquipmentGroupIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК ID,
	               |	ВТ_ИтоговыеДанные.kEquipmentTypeIntegrationID КАК IntegrationID,
	               |	ВТ_ИтоговыеДанные.kEquipmentCategoryIntegrationID КАК EquipmentCategoryIntegrationID,
	               |	ВТ_ИтоговыеДанные.ТиповойОР.Наименование КАК Name,
	               |	ВТ_ИтоговыеДанные.ТиповойОР.Комментарий КАК Description,
	               |	ЛОЖЬ КАК IsUseID
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК ID,
	               |	ВТ_ИтоговыеДанные.kEquipmentGroupIntegrationID КАК IntegrationID,
	               |	ВТ_ИтоговыеДанные.kEquipmentCategoryIntegrationID КАК EquipmentCategoryIntegrationID,
	               |	ВТ_ИтоговыеДанные.Направление.Наименование КАК Name,
	               |	ВТ_ИтоговыеДанные.Направление.Комментарий КАК Description,
	               |	ЛОЖЬ КАК IsUseID
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивОР", МассивОР);
	Запрос.УстановитьПараметр("ТипыВКатегориях", СтруктураВспомогательныхТаблиц.ТипыВКатегориях);
	Запрос.УстановитьПараметр("ГруппыВКатегориях", СтруктураВспомогательныхТаблиц.ГруппыВКатегориях);
	Результат = Запрос.ВыполнитьПакет();
	
	ДополнительноеОписание = НСтр("ru = 'при привязке типов к категориям'");
	ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentTypeModelList", ТаблицаСоответствияВебСервисов, Результат[5].Выгрузить(), ДополнительноеОписание);
	
	ДополнительноеОписание = НСтр("ru = 'при привязке групп к категориям'");
	ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentGroupModelList", ТаблицаСоответствияВебСервисов, Результат[6].Выгрузить(), ДополнительноеОписание);
	
	Возврат Истина;
КонецФункции

#КонецОбласти
 
#Область Подразделения

Функция ОтправитьПодразделения(Узел, МассивПодразделений, ТаблицаСоответствияВебСервисов)
	Если МассивПодразделений.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтруктураПредприятия.Ссылка КАК Ссылка,
	               |	СтруктураПредприятия.Код КАК Код,
	               |	СтруктураПредприятия.Наименование КАК Наименование,
	               |	СтруктураПредприятия.Родитель КАК Родитель
	               |ПОМЕСТИТЬ ВТ_Подразделения
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.Ссылка В(&МассивПодразделений)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Подразделения.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, ""toir_"" + ВТ_Подразделения.Код) КАК Код,
	               |	ВТ_Подразделения.Наименование КАК Наименование,
	               |	ВТ_Подразделения.Родитель КАК Родитель,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПодразделения
	               |ИЗ
	               |	ВТ_Подразделения КАК ВТ_Подразделения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_Подразделения.Ссылка = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
				   |
				   |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	1 КАК ID,
	               |	ВТ_СопоставленныеПодразделения.Ссылка КАК Ссылка,
	               |	ВТ_СопоставленныеПодразделения.Код КАК IntegrationID,
	               |	ВТ_СопоставленныеПодразделения.Наименование КАК Name,
	               |	ЕСТЬNULL(ВТ_СопоставленныеПодразделенияРодители.Код, ""0"") КАК ParentIntegrationID,
				   |	ЛОЖЬ КАК IsUseID,
	               |	ВТ_СопоставленныеПодразделения.Сопоставлен КАК Сопоставлен
	               |ИЗ
	               |	ВТ_СопоставленныеПодразделения КАК ВТ_СопоставленныеПодразделения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПодразделения КАК ВТ_СопоставленныеПодразделенияРодители
	               |		ПО ВТ_СопоставленныеПодразделения.Родитель = ВТ_СопоставленныеПодразделенияРодители.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить();
	
	ТаблицаДляОтправки = Результат.Скопировать(, "ID, IntegrationID, Name, ParentIntegrationID, IsUseID");
	ДополнительноеОписание = НСтр("ru = 'при отправке подразделени'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendDeptModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.СтруктураПредприятия");
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.СтруктураПредприятия);
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область НаправленияОР

Функция ОтправитьНаправленияОР(Узел, СтруктураВозврата, ГруппыВКатегориях, ТаблицаСоответствияВебСервисов)
	Если СтруктураВозврата.МассивНаправленийОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;

#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГруппыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ГруппыВКатегориях.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID
	               |ПОМЕСТИТЬ ВТ_ГруппыВКатегорияхИсходная
	               |ИЗ
	               |	&ГруппыВКатегориях КАК ГруппыВКатегориях
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МИНИМУМ(ВТ_ГруппыВКатегорияхИсходная.kEquipmentCategoryIntegrationID) КАК kEquipmentCategoryIntegrationID,
	               |	ВТ_ГруппыВКатегорияхИсходная.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID
	               |ПОМЕСТИТЬ ВТ_ГруппыВКатегориях
	               |ИЗ
	               |	ВТ_ГруппыВКатегорияхИсходная КАК ВТ_ГруппыВКатегорияхИсходная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ГруппыВКатегорияхИсходная.kEquipmentGroupIntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentGroupIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_НаправленияОбъектовРемонтныхРабот.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, ""toir_"" + торо_НаправленияОбъектовРемонтныхРабот.Код) КАК IntegrationID,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	               |ИЗ
	               |	Справочник.торо_НаправленияОбъектовРемонтныхРабот КАК торо_НаправленияОбъектовРемонтныхРабот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО торо_НаправленияОбъектовРемонтныхРабот.Ссылка = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |ГДЕ
	               |	торо_НаправленияОбъектовРемонтныхРабот.Ссылка В(&МассивНаправленийОР)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодготовленныеДанные.Ссылка КАК Ссылка,
	               |	1 КАК ID,
	               |	ВТ_ПодготовленныеДанные.IntegrationID КАК IntegrationID,
	               |	ЕСТЬNULL(ВТ_ГруппыВКатегориях.kEquipmentCategoryIntegrationID, ""1C:TOIR"") КАК EquipmentCategoryIntegrationID,
	               |	ВТ_ПодготовленныеДанные.Ссылка.Наименование КАК Name,
	               |	ВТ_ПодготовленныеДанные.Ссылка.Комментарий КАК Description,
	               |	ЛОЖЬ КАК IsUseID,
	               |	ВТ_ПодготовленныеДанные.Сопоставлен КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппыВКатегориях КАК ВТ_ГруппыВКатегориях
	               |		ПО ВТ_ПодготовленныеДанные.IntegrationID = ВТ_ГруппыВКатегориях.kEquipmentGroupIntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивНаправленийОР", СтруктураВозврата.МассивНаправленийОР);
	Запрос.УстановитьПараметр("ГруппыВКатегориях", ГруппыВКатегориях);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДляОтправки = Результат.Скопировать(, "ID, IntegrationID, Name, Description, EquipmentCategoryIntegrationID, IsUseID");
	ДополнительноеОписание = НСтр("ru = 'при отправке направлений ОР'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentGroupModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.торо_НаправленияОбъектовРемонтныхРабот");
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.торо_НаправленияОбъектовРемонтныхРабот);
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ТиповыеОР

Функция ОтправитьТиповыеОР(Узел, СтруктураВозврата, ТипыВКатегориях, ТаблицаСоответствияВебСервисов)
	Если СтруктураВозврата.МассивТиповыхОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;

#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТипыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ТипыВКатегориях.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID
	               |ПОМЕСТИТЬ ВТ_ТипыВКатегорияхИсходная
	               |ИЗ
	               |	&ТипыВКатегориях КАК ТипыВКатегориях
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МИНИМУМ(ВТ_ТипыВКатегорияхИсходная.kEquipmentCategoryIntegrationID) КАК kEquipmentCategoryIntegrationID,
	               |	ВТ_ТипыВКатегорияхИсходная.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID
	               |ПОМЕСТИТЬ ВТ_ТипыВКатегориях
	               |ИЗ
	               |	ВТ_ТипыВКатегорияхИсходная КАК ВТ_ТипыВКатегорияхИсходная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТипыВКатегорияхИсходная.kEquipmentTypeIntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentTypeIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТиповыеОР.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, ""toir_"" + торо_ТиповыеОР.Код) КАК IntegrationID,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР КАК торо_ТиповыеОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО торо_ТиповыеОР.Ссылка = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |ГДЕ
	               |	торо_ТиповыеОР.Ссылка В(&МассивТиповыхОР)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодготовленныеДанные.Ссылка КАК Ссылка,
	               |	1 КАК ID,
	               |	ВТ_ПодготовленныеДанные.IntegrationID КАК IntegrationID,
	               |	ВТ_ПодготовленныеДанные.Ссылка.Наименование КАК Name,
	               |	ВТ_ПодготовленныеДанные.Ссылка.Комментарий КАК Description,
	               |	ЕСТЬNULL(ВТ_ТипыВКатегориях.kEquipmentCategoryIntegrationID, ""1C:TOIR"") КАК EquipmentCategoryIntegrationID,
	               |	ЛОЖЬ КАК IsUseID,
	               |	ВТ_ПодготовленныеДанные.Сопоставлен КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТипыВКатегориях КАК ВТ_ТипыВКатегориях
	               |		ПО ВТ_ПодготовленныеДанные.IntegrationID = ВТ_ТипыВКатегориях.kEquipmentTypeIntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивТиповыхОР", СтруктураВозврата.МассивТиповыхОР);
	Запрос.УстановитьПараметр("ТипыВКатегориях", ТипыВКатегориях);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДляОтправки = Результат.Скопировать(, "ID, IntegrationID, Name, Description, EquipmentCategoryIntegrationID, IsUseID");
	ДополнительноеОписание = НСтр("ru = 'при отправке типовых ОР'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentTypeModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.торо_ТиповыеОР");
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.торо_ТиповыеОР);
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Производители

Функция ОтправитьПроизводителей(Узел, МассивОР, ТаблицаСоответствияВебСервисов)
#Область Изготовители
	ДополнительноеОписание = НСтр("ru = 'при получении изготовителей для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Производители = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentFirmList", "Производители", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Изготовители.IntegrationID КАК IntegrationID,
	               |	Изготовители.Name КАК Name,
	               |	Изготовители.Description КАК Description,
	               |	Изготовители.Country КАК Country,
	               |	Изготовители.Address КАК Address,
	               |	Изготовители.Email КАК Email,
	               |	Изготовители.Phone КАК Phone,
	               |	Изготовители.Contacts КАК Contacts
	               |ПОМЕСТИТЬ ВТ_Изготовители
	               |ИЗ
	               |	&Изготовители КАК Изготовители
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОбъектыРемонта.Изготовитель КАК Ссылка,
				   |	1 КАК ID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, """") КАК IntegrationID,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(торо_ОбъектыРемонта.Изготовитель) = ТИП(Справочник.Производители)
	               |			ТОГДА ВЫРАЗИТЬ(торо_ОбъектыРемонта.Изготовитель КАК Справочник.Производители).Наименование
	               |		КОГДА ТИПЗНАЧЕНИЯ(торо_ОбъектыРемонта.Изготовитель) = ТИП(СТРОКА)
	               |			ТОГДА торо_ОбъектыРемонта.Изготовитель
	               |	КОНЕЦ КАК Name,
	               |	ЕСТЬNULL(ВТ_Изготовители.Country, """") КАК Country,
	               |	ЕСТЬNULL(ВТ_Изготовители.Address, """") КАК Address,
	               |	ЕСТЬNULL(ВТ_Изготовители.Email, """") КАК Email,
	               |	ЕСТЬNULL(ВТ_Изготовители.Phone, """") КАК Phone,
	               |	ЕСТЬNULL(ВТ_Изготовители.Contacts, """") КАК Contacts,
	               |	ЕСТЬNULL(ВТ_Изготовители.Description, """") КАК Description,
	               |	ЛОЖЬ КАК IsUseID,
	               |	ВЫБОР
	               |		КОГДА НЕ торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |				ИЛИ ТИПЗНАЧЕНИЯ(торо_ОбъектыРемонта.Изготовитель) = ТИП(СТРОКА)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Изготовители КАК ВТ_Изготовители
	               |			ПО торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер = ВТ_Изготовители.IntegrationID
	               |				И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.Производители"")
	               |		ПО торо_ОбъектыРемонта.Изготовитель = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |ГДЕ
	               |	НЕ торо_ОбъектыРемонта.Изготовитель ЕСТЬ NULL
	               |	И НЕ торо_ОбъектыРемонта.Изготовитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
				   |	И НЕ ТИПЗНАЧЕНИЯ(торо_ОбъектыРемонта.Изготовитель) = ТИП(Справочник.Контрагенты)
	               |	И торо_ОбъектыРемонта.Ссылка В(&МассивОР)";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивОР", МассивОР);
	Запрос.УстановитьПараметр("Изготовители", Производители);
	Результат = Запрос.Выполнить();
	
	УспешноеВыполнение = Истина;
	
#Область ОтправкаИзготовителей
	ПодготовленнаяТаблица = Результат.Выгрузить();
	ПодготовленнаяТаблица.Очистить();
	
	Производители = Результат.Выгрузить();
	Если Производители.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	Для каждого СтрокаИзготовителя Из Производители Цикл
		Если Не ЗначениеЗаполнено(СтрокаИзготовителя.Ссылка)  Тогда
		    Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаИзготовителя.IntegrationID) Тогда
		    IntegrationID = "toir_" + СтрокаИзготовителя.Name;
		Иначе
		    IntegrationID = СтрокаИзготовителя.IntegrationID;
		КонецЕсли;
		
		СтрокаИзготовителя.IntegrationID = IntegrationID;
		ЗаполнитьЗначенияСвойств(ПодготовленнаяТаблица.Добавить(), СтрокаИзготовителя);
	КонецЦикла;
	
	Если Не ПодготовленнаяТаблица.Количество() = 0 Тогда
		ТаблицаДляОтправки = ПодготовленнаяТаблица.Скопировать(, "ID, IntegrationID, Name, Country, Address, Email, Phone,
															|Contacts, Description, IsUseID");
		
		ДополнительноеОписание = НСтр("ru = 'при отправке изготовителей'");
		УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentFirmModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание);
		
		// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
		СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
		НайденныеСтроки = ПодготовленнаяТаблица.Скопировать(СтруктураПоиска);
		СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.Производители");
	КонецЕсли;
#КонецОбласти

	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Контрагенты

Функция ОтправитьКонтрагентов(Узел, МассивОР, ТаблицаСоответствияВебСервисов)
#Область Поставщики
	ДополнительноеОписание = НСтр("ru = 'при получении поставщиков для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Поставщики = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetServiceOrganizationList", "Поставщики", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Поставщики.IntegrationID КАК IntegrationID,
	               |	Поставщики.Name КАК Name,
	               |	Поставщики.Site КАК Site,
	               |	Поставщики.Address КАК Address,
	               |	Поставщики.additionalInfo КАК additionalInfo,
	               |	Поставщики.administratorName КАК administratorName,
	               |	Поставщики.administratorEmail КАК administratorEmail,
	               |	Поставщики.administratorPhone КАК administratorPhone,
	               |	Поставщики.administratorInfo КАК administratorInfo,
	               |	Поставщики.techName КАК techName,
	               |	Поставщики.techEmail КАК techEmail,
	               |	Поставщики.techPhone КАК techPhone,
	               |	Поставщики.techInfo КАК techInfo,
	               |	Поставщики.contactName КАК contactName,
	               |	Поставщики.contactEmail КАК contactEmail,
	               |	Поставщики.contactPhone КАК contactPhone,
	               |	Поставщики.contactInfo КАК contactInfo,
	               |	Поставщики.contactMobilePhone КАК contactMobilePhone,
	               |	Поставщики.contactFax КАК contactFax
	               |ПОМЕСТИТЬ ВТ_Поставщики
	               |ИЗ
	               |	&Поставщики КАК Поставщики
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	КОЛИЧЕСТВО(торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта) КАК КоличествоГарантий
	               |ПОМЕСТИТЬ ВТ_ОРСГарантией
	               |ИЗ
	               |	РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
	               |ГДЕ
	               |	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта В(&МассивОР)
	               |	И НЕ торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПроверятьНаработку
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта) = 1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СрокиГарантииОбъектовРемонта.ГарантирующаяОрганизация КАК Ссылка,
				   |	торо_СрокиГарантииОбъектовРемонта.ГарантирующаяОрганизация.ИНН КАК ИНН,
	               |	1 КАК ID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, """") КАК IntegrationID,
	               |	торо_СрокиГарантииОбъектовРемонта.ГарантирующаяОрганизация.Наименование КАК Name,
	               |	ЕСТЬNULL(ВТ_Поставщики.Site, """") КАК Site,
	               |	ЕСТЬNULL(ВТ_Поставщики.Address, """") КАК Address,
	               |	торо_СрокиГарантииОбъектовРемонта.ГарантирующаяОрганизация.ДополнительнаяИнформация КАК additionalInfo,
	               |	ЕСТЬNULL(ВТ_Поставщики.administratorName, """") КАК administratorName,
	               |	ЕСТЬNULL(ВТ_Поставщики.administratorEmail, """") КАК administratorEmail,
	               |	ЕСТЬNULL(ВТ_Поставщики.administratorPhone, """") КАК administratorPhone,
	               |	ЕСТЬNULL(ВТ_Поставщики.administratorInfo, """") КАК administratorInfo,
	               |	ЕСТЬNULL(ВТ_Поставщики.techName, """") КАК techName,
	               |	ЕСТЬNULL(ВТ_Поставщики.techEmail, """") КАК techEmail,
	               |	ЕСТЬNULL(ВТ_Поставщики.techPhone, """") КАК techPhone,
	               |	ЕСТЬNULL(ВТ_Поставщики.techInfo, """") КАК techInfo,
	               |	ЕСТЬNULL(ВТ_Поставщики.contactName, """") КАК contactName,
	               |	ЕСТЬNULL(ВТ_Поставщики.contactEmail, """") КАК contactEmail,
	               |	ЕСТЬNULL(ВТ_Поставщики.contactPhone, """") КАК contactPhone,
	               |	ЕСТЬNULL(ВТ_Поставщики.contactInfo, """") КАК contactInfo,
	               |	ЕСТЬNULL(ВТ_Поставщики.contactMobilePhone, """") КАК contactMobilePhone,
	               |	ЕСТЬNULL(ВТ_Поставщики.contactFax, """") КАК contactFax,
	               |	ЛОЖЬ КАК IsUseID,
	               |	ВЫБОР
	               |		КОГДА НЕ торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОРСГарантией КАК ВТ_ОРСГарантией
	               |		ПО торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта = ВТ_ОРСГарантией.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ВТ_Поставщики
	               |			ПО (торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер = ВТ_Поставщики.IntegrationID)
	               |				И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.Контрагенты"")
	               |		ПО торо_СрокиГарантииОбъектовРемонта.ГарантирующаяОрганизация = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивОР", МассивОР);
	Запрос.УстановитьПараметр("Поставщики", Поставщики);
	Результат = Запрос.Выполнить();
	
	УспешноеВыполнение = Истина;

#Область ОтправкаПоставщиков
	ПодготовленнаяТаблица = Результат.Выгрузить();
	ПодготовленнаяТаблица.Очистить();
	Поставщики = Результат.Выгрузить();
	Если Поставщики.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	Для каждого СтрокаПоставщика Из Поставщики Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоставщика.IntegrationID) И Не ЗначениеЗаполнено(СтрокаПоставщика.ИНН)  Тогда
			ОписаниеОшибки = Нстр("ru = 'Поставщик <%1> не будет отправлен в АИС Диспетчер, т.к. у него не заполнено ИНН'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, СтрокаПоставщика.Name);
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения");
			
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПоставщика.IntegrationID) Тогда
		    IntegrationID = "toir_" + СтрокаПоставщика.ИНН;
		Иначе
		    IntegrationID = СтрокаПоставщика.IntegrationID;
		КонецЕсли;
		
		СтрокаПоставщика.IntegrationID = IntegrationID;
		ЗаполнитьЗначенияСвойств(ПодготовленнаяТаблица.Добавить(), СтрокаПоставщика);
	КонецЦикла;
	
	ТаблицаДляОтправки = ПодготовленнаяТаблица.Скопировать(, "ID, IntegrationID, Name, Site, Address, additionalInfo,
															|administratorName, administratorEmail, administratorPhone,
															|administratorInfo, techName, techEmail, techPhone, techInfo,
															|contactName, contactEmail, contactPhone, contactInfo,
															|contactMobilePhone, contactFax, IsUseID");
	
	ДополнительноеОписание = НСтр("ru = 'при отправке поставщиков'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendServiceOrganizationModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = ПодготовленнаяТаблица.Скопировать(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.Контрагенты");
#КонецОбласти
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ОбъектыРемонта

Функция ОтправитьОбъектыРемонта(Узел, МассивОР, СтруктураВспомогательныхТаблиц, ТаблицаСоответствияВебСервисов)
	Если МассивОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ПривязатьТипыИГруппыККатегориям(Узел, МассивОР, СтруктураВспомогательныхТаблиц, ТаблицаСоответствияВебСервисов);
	СтруктураВспомогательныхТаблиц = ПолучитьТипыИГруппыВКатегориях(Узел, ТаблицаСоответствияВебСервисов);
	ОтправитьКонтрагентов(Узел, МассивОР, ТаблицаСоответствияВебСервисов);
	ОтправитьПроизводителей(Узел, МассивОР, ТаблицаСоответствияВебСервисов);
	
#Область Оборудование
	ДополнительноеОписание = НСтр("ru = 'при получении полной информации об оборудовании (для отправки ОР в АИС Диспетчер)'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Оборудование = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentList", "ОбъектыРемонтаПолная", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Оборудование.ID КАК ID,
	               |	Оборудование.IntegrationID КАК IntegrationID,
	               |	Оборудование.Name КАК Name,
	               |	Оборудование.ShortName КАК ShortName,
	               |	Оборудование.Code КАК Code,
	               |	Оборудование.Description КАК Description,
	               |	Оборудование.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	Оборудование.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID,
	               |	Оборудование.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID,
	               |	Оборудование.kEquipmentFirmIntegrationID КАК kEquipmentFirmIntegrationID,
	               |	Оборудование.DeptID КАК DeptIntegrationID,
	               |	Оборудование.InventoryNumber КАК InventoryNumber,
	               |	Оборудование.FactoryNumber КАК FactoryNumber,
	               |	Оборудование.dtProducer КАК dtProducer,
	               |	Оборудование.dtInput КАК dtInput,
	               |	Оборудование.ProviderID КАК ProviderID,
	               |	Оборудование.dtGuarantee КАК dtGuarantee,
	               |	Оборудование.Weight КАК Weight,
	               |	Оборудование.Power КАК Power,
	               |	Оборудование.ServiceOrganizationID КАК ServiceOrganizationID,
	               |	Оборудование.Cost КАК Cost,
	               |	Оборудование.PeriodAmortization КАК PeriodAmortization,
	               |	Оборудование.HourlyCost КАК HourlyCost,
	               |	Оборудование.IsUseMonitoring КАК IsUseMonitoring,
	               |	Оборудование.ProductSite КАК ProductSite,
	               |	Оборудование.ProductBuildingNumber КАК ProductBuildingNumber,
	               |	Оборудование.CadastralNumberOfBuilding КАК CadastralNumberOfBuilding,
	               |	Оборудование.CncModelId КАК CncModelId,
	               |	Оборудование.NumberOfControlledCoordinates КАК NumberOfControlledCoordinates,
	               |	Оборудование.PhysicalDeteriorationPercent КАК PhysicalDeteriorationPercent,
	               |	Оборудование.Amortization КАК Amortization,
	               |	Оборудование.FinancialProjectId КАК FinancialProjectId,
	               |	Оборудование.TechnologicalGroupOfProductionTypeID КАК TechnologicalGroupOfProductionTypeID,
	               |	Оборудование.machineSchedule КАК machineSchedule
	               |ПОМЕСТИТЬ ВТ_Оборудование
	               |ИЗ
	               |	&Оборудование КАК Оборудование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТипыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ТипыВКатегориях.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID
	               |ПОМЕСТИТЬ ВТ_ТипыВКатегориях
	               |ИЗ
	               |	&ТипыВКатегориях КАК ТипыВКатегориях
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentCategoryIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГруппыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ГруппыВКатегориях.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID
	               |ПОМЕСТИТЬ ВТ_ГруппыВКатегориях
	               |ИЗ
	               |	&ГруппыВКатегориях КАК ГруппыВКатегориях
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentCategoryIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТипыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ВТ_ТипыВКатегориях.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID,
	               |	ВТ_ГруппыВКатегориях.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID
	               |ПОМЕСТИТЬ ВТ_ГруппыИТипыВКатегориях
	               |ИЗ
	               |	ВТ_ТипыВКатегориях КАК ВТ_ТипыВКатегориях
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ГруппыВКатегориях КАК ВТ_ГруппыВКатегориях
	               |		ПО ВТ_ТипыВКатегориях.kEquipmentCategoryIntegrationID = ВТ_ГруппыВКатегориях.kEquipmentCategoryIntegrationID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование
	               |		ПО ВТ_ТипыВКатегориях.kEquipmentCategoryIntegrationID = ВТ_Оборудование.kEquipmentCategoryIntegrationID
	               |			И (ВТ_ГруппыВКатегориях.kEquipmentCategoryIntegrationID = ВТ_Оборудование.kEquipmentCategoryIntegrationID)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentTypeIntegrationID,
	               |	kEquipmentGroupIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
	               |	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
	               |	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
	               |	торо_ОбъектыРемонта.Направление КАК Направление,
	               |	торо_ОбъектыРемонта.Изготовитель КАК Изготовитель
	               |ПОМЕСТИТЬ ВТ_ОР
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка В(&МассивОР)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка,
	               |	Подразделение,
	               |	ТиповойОР,
	               |	Направление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	КОЛИЧЕСТВО(торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта) КАК КоличествоГарантий
	               |ПОМЕСТИТЬ ВТ_ОРСГарантией
	               |ИЗ
	               |	РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
	               |ГДЕ
	               |	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта В(&МассивОР)
	               |	И НЕ торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПроверятьНаработку
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта) = 1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерПоставщики.УникальныйИдентификаторДиспетчер, """") КАК ProviderIntegrationID,
	               |	ЕСТЬNULL(торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ДатаОкончанияГарантии, """") КАК УсловияГарантииДатаОкончанияГарантии
	               |ПОМЕСТИТЬ ВТ_ГарантииОР
	               |ИЗ
	               |	РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОРСГарантией КАК ВТ_ОРСГарантией
	               |		ПО торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта = ВТ_ОРСГарантией.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерПоставщики
	               |		ПО торо_СрокиГарантииОбъектовРемонта.ГарантирующаяОрганизация = торо_СоответствиеОбъектовНСИДиспетчерПоставщики.ОбъектТОИР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерОР.УникальныйИдентификаторДиспетчер, ""toir_"" + ВТ_ОР.Ссылка.Код) КАК IntegrationID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерПодразделения.УникальныйИдентификаторДиспетчер, ""-1"") КАК DeptIntegrationID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР.УникальныйИдентификаторДиспетчер, """") КАК kEquipmentTypeIntegrationID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.УникальныйИдентификаторДиспетчер, """") КАК kEquipmentGroupIntegrationID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерИзготовители.УникальныйИдентификаторДиспетчер, """") КАК kEquipmentFirmIntegrationID,
	               |	ЕСТЬNULL(ВТ_ГарантииОР.ProviderIntegrationID, """") КАК ProviderIntegrationID,
	               |	ЕСТЬNULL(ВТ_ГарантииОР.УсловияГарантииДатаОкончанияГарантии, """") КАК УсловияГарантииДатаОкончанияГарантии,
	               |	ВТ_ОР.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА НЕ торо_ПринятиеОРКУчету.ОбъектРемонта ЕСТЬ NULL
	               |				И &ИспользоватьПринятияКУчету
	               |			ТОГДА торо_ПринятиеОРКУчету.ДатаВводаВЭксплуатацию
	               |		КОГДА &ИспользоватьПринятияКУчету
	               |			ТОГДА ДАТАВРЕМЯ(1970, 1, 1)
	               |		ИНАЧЕ ВТ_ОР.Ссылка.ДатаВводаВЭксплуатацию
	               |	КОНЕЦ КАК ДатаВводаВЭксплуатацию,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчерОР.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ПОМЕСТИТЬ ПодготовленныеДанные
	               |ИЗ
	               |	ВТ_ОР КАК ВТ_ОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерОР
	               |		ПО ВТ_ОР.Ссылка = торо_СоответствиеОбъектовНСИДиспетчерОР.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерПодразделения
	               |		ПО ВТ_ОР.Подразделение = торо_СоответствиеОбъектовНСИДиспетчерПодразделения.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР
	               |		ПО ВТ_ОР.ТиповойОР = торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР
	               |		ПО ВТ_ОР.Направление = торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерИзготовители
	               |		ПО ВТ_ОР.Изготовитель = торо_СоответствиеОбъектовНСИДиспетчерИзготовители.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГарантииОР КАК ВТ_ГарантииОР
	               |		ПО ВТ_ОР.Ссылка = ВТ_ГарантииОР.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ПринятиеОРКУчету КАК торо_ПринятиеОРКУчету
	               |		ПО ВТ_ОР.Ссылка = торо_ПринятиеОРКУчету.ОбъектРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentTypeIntegrationID,
	               |	kEquipmentGroupIntegrationID,
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПодготовленныеДанные.IntegrationID КАК IntegrationID,
	               |	ВТ_Оборудование.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_КатегорииОборудованияНачальная
	               |ИЗ
	               |	ВТ_Оборудование КАК ВТ_Оборудование
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодготовленныеДанные КАК ПодготовленныеДанные
	               |		ПО ВТ_Оборудование.IntegrationID = ПодготовленныеДанные.IntegrationID
	               |			И ВТ_Оборудование.kEquipmentTypeIntegrationID = ПодготовленныеДанные.kEquipmentTypeIntegrationID
	               |			И ВТ_Оборудование.kEquipmentGroupIntegrationID = ПодготовленныеДанные.kEquipmentGroupIntegrationID
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПодготовленныеДанные.IntegrationID,
	               |	МАКСИМУМ(ВТ_ГруппыИТипыВКатегориях.kEquipmentCategoryIntegrationID),
	               |	2
	               |ИЗ
	               |	ПодготовленныеДанные КАК ПодготовленныеДанные
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГруппыИТипыВКатегориях КАК ВТ_ГруппыИТипыВКатегориях
	               |		ПО ПодготовленныеДанные.kEquipmentTypeIntegrationID = ВТ_ГруппыИТипыВКатегориях.kEquipmentTypeIntegrationID
	               |			И ПодготовленныеДанные.kEquipmentGroupIntegrationID = ВТ_ГруппыИТипыВКатегориях.kEquipmentGroupIntegrationID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПодготовленныеДанные.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentCategoryIntegrationID,
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КатегорииОборудованияНачальная.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_КатегорииОборудованияНачальная.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_КатегорииОборудованияСПриоритетами
	               |ИЗ
	               |	ВТ_КатегорииОборудованияНачальная КАК ВТ_КатегорииОборудованияНачальная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_КатегорииОборудованияНачальная.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КатегорииОборудованияНачальная.IntegrationID КАК IntegrationID,
	               |	ВТ_КатегорииОборудованияНачальная.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID
	               |ПОМЕСТИТЬ ВТ_КатегорииОборудования
	               |ИЗ
	               |	ВТ_КатегорииОборудованияНачальная КАК ВТ_КатегорииОборудованияНачальная
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КатегорииОборудованияСПриоритетами КАК ВТ_КатегорииОборудованияСПриоритетами
	               |		ПО ВТ_КатегорииОборудованияНачальная.IntegrationID = ВТ_КатегорииОборудованияСПриоритетами.IntegrationID
	               |			И ВТ_КатегорииОборудованияНачальная.Приоритет = ВТ_КатегорииОборудованияСПриоритетами.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПодготовленныеДанные.Ссылка КАК Ссылка,
	               |	1 КАК ID,
	               |	ПодготовленныеДанные.IntegrationID КАК IntegrationID,
	               |	""_"" КАК MachineIntegrationID,
	               |	ЛОЖЬ КАК IsUseID,
	               |	ПодготовленныеДанные.DeptIntegrationID КАК DeptIntegrationID,
	               |	ПодготовленныеДанные.Ссылка.Наименование КАК Name,
	               |	ПодготовленныеДанные.Ссылка.Наименование КАК ShotrName,
	               |	ПодготовленныеДанные.Ссылка.Код КАК Code,
	               |	ПодготовленныеДанные.Ссылка.Комментарий КАК Description,
	               |	ПодготовленныеДанные.Ссылка.ЗаводскойНомер КАК FactoryNumber,
	               |	ПодготовленныеДанные.Ссылка.ИнвентарныйНомер КАК InventoryNumber,
	               |	ЕСТЬNULL(ВТ_КатегорииОборудования.kEquipmentCategoryIntegrationID, """") КАК kEquipmentCategoryIntegrationID,
	               |	ПодготовленныеДанные.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID,
	               |	ПодготовленныеДанные.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID,
	               |	ПодготовленныеДанные.kEquipmentFirmIntegrationID КАК kEquipmentFirmIntegrationID,
	               |	ПодготовленныеДанные.ProviderIntegrationID КАК ProviderIntegrationID,
	               |	ЕСТЬNULL(ВТ_Оборудование.Weight, """") КАК Weight,
	               |	ЕСТЬNULL(ВТ_Оборудование.Power, """") КАК Power,
	               |	ЕСТЬNULL(ВТ_Оборудование.ServiceOrganizationID, """") КАК ServiceOrganizationIntegrationID,
	               |	ЕСТЬNULL(ВТ_Оборудование.Cost, """") КАК Cost,
	               |	ЕСТЬNULL(ВТ_Оборудование.HourlyCost, """") КАК HourlyCost,
	               |	ЕСТЬNULL(ВТ_Оборудование.IsUseMonitoring, ЛОЖЬ) КАК IsUseMonitoring,
	               |	ЕСТЬNULL(ВТ_Оборудование.ProductSite, """") КАК ProductSite,
	               |	ЕСТЬNULL(ВТ_Оборудование.ProductBuildingNumber, """") КАК ProductBuildingNumber,
	               |	ЕСТЬNULL(ВТ_Оборудование.CadastralNumberOfBuilding, """") КАК CadastralNumberOfBuilding,
	               |	ЕСТЬNULL(ВТ_Оборудование.CncModelId, """") КАК CncModelId,
	               |	ЕСТЬNULL(ВТ_Оборудование.NumberOfControlledCoordinates, """") КАК NumberOfControlledCoordinates,
	               |	ЕСТЬNULL(ВТ_Оборудование.PhysicalDeteriorationPercent, """") КАК PhysicalDeteriorationPercent,
	               |	ЕСТЬNULL(ВТ_Оборудование.Amortization, """") КАК Amortization,
	               |	ЕСТЬNULL(ВТ_Оборудование.machineSchedule, """") КАК machineSchedule,
	               |	ПодготовленныеДанные.УсловияГарантииДатаОкончанияГарантии КАК УсловияГарантииДатаОкончанияГарантии,
	               |	ПодготовленныеДанные.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(19)) КАК DtProducer,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(19)) КАК DtInput,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(19)) КАК dtGuarantee,
	               |	ПодготовленныеДанные.Сопоставлен КАК Сопоставлен
	               |ИЗ
	               |	ПодготовленныеДанные КАК ПодготовленныеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КатегорииОборудования КАК ВТ_КатегорииОборудования
	               |		ПО ПодготовленныеДанные.IntegrationID = ВТ_КатегорииОборудования.IntegrationID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование
	               |		ПО ПодготовленныеДанные.IntegrationID = ВТ_Оборудование.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивОР", МассивОР);
	Запрос.УстановитьПараметр("ИспользоватьПринятияКУчету", ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования"));
	Запрос.УстановитьПараметр("ГруппыВКатегориях", СтруктураВспомогательныхТаблиц.ГруппыВКатегориях);
	Запрос.УстановитьПараметр("ТипыВКатегориях", СтруктураВспомогательныхТаблиц.ТипыВКатегориях);
	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПодготовленнаяТаблица = Результат.СкопироватьКолонки();
	
	ЕстьНеотправленныеОР = Ложь;
	
	Для каждого СтрокаОР Из Результат Цикл
	    Если СтрокаОР.DeptIntegrationID = "-1" Тогда
			ЕстьНеотправленныеОР = Истина;
			ОписаниеОшибкиШаблон = Нстр("ru = 'Ошибка при отправке ОР: у ОР <%1> не заполнено подразделение, данный объект не будет выгружен в АИС Диспетчер. Для устранения ошибки заполните данное поле у ОР.'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибкиШаблон, СтрокаОР.Ссылка.Наименование);
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения запроса");
			
		    Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ПодготовленнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОР);
		
		НоваяСтрока.DtProducer = ПреобразоватьДатуВСтроку(СтрокаОР.Ссылка.ДатаВыпуска);
		НоваяСтрока.DtInput = ПреобразоватьДатуВСтроку(СтрокаОР.ДатаВводаВЭксплуатацию);
		НоваяСтрока.dtGuarantee = ПреобразоватьДатуВСтроку(СтрокаОР.УсловияГарантииДатаОкончанияГарантии);
	КонецЦикла;
	
	Если ЕстьНеотправленныеОР Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДляОтправки = ПодготовленнаяТаблица.Скопировать(, "ID, IntegrationID, MachineIntegrationID, Name, ShotrName, Code, Description, kEquipmentCategoryIntegrationID,
															|kEquipmentTypeIntegrationID, kEquipmentGroupIntegrationID, FactoryNumber, InventoryNumber,
															|DeptIntegrationID, DtProducer, kEquipmentFirmIntegrationID, DtInput, ProviderIntegrationId,
															|dtGuarantee, IsUseID, Power, ServiceOrganizationIntegrationID, Cost, HourlyCost,
															|IsUseMonitoring, ProductSite, ProductBuildingNumber, CadastralNumberOfBuilding, CncModelId,
															|NumberOfControlledCoordinates, PhysicalDeteriorationPercent, Amortization, machineSchedule");
	
	ДополнительноеОписание = НСтр("ru = 'при отправке ОР'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = ПодготовленнаяТаблица.НайтиСтроки(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.торо_ОбъектыРемонта");
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.торо_ОбъектыРемонта);
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Номенклатура

Функция ОтправитьНоменклатуру(Узел, СтруктураВозврата, ТаблицаСоответствияВебСервисов)
	Если СтруктураВозврата.МассивНоменклатуры.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;

#Область ОтправкаГруппНоменклатуры
	ОтправленныеГруппыНоменклатуры = Новый Соответствие();
	УспешноеВыполнение = ОтправитьИерархиюНоменклатуры(Узел, СтруктураВозврата, ТаблицаСоответствияВебСервисов, ОтправленныеГруппыНоменклатуры);
#КонецОбласти
	
#Область ПолучениеГруппНоменклатуры
	ДополнительноеОписание = НСтр("ru = 'при получении групп номенклатуры'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ГруппыНоменклатуры = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMaterialAndComponentGroupList", "ГруппыНоменклатуры", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
#Область ОсновнойЗапрос
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыНоменклатуры.IntegrationID КАК IntegrationID,
	               |	ГруппыНоменклатуры.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ГруппыНоменклатуры
	               |ИЗ
	               |	&ГруппыНоменклатуры КАК ГруппыНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Родитель КАК Родитель,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, ""toir_"" + Номенклатура.Код) КАК IntegrationID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерГруппыНоменклатуры.УникальныйИдентификаторДиспетчер, """") КАК ParentIntegrationID,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ПОМЕСТИТЬ ВТ_НоменклатураДляОтправки
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО Номенклатура.Ссылка = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерГруппыНоменклатуры
	               |		ПО Номенклатура.Родитель = торо_СоответствиеОбъектовНСИДиспетчерГруппыНоменклатуры.ОбъектТОИР
	               |ГДЕ
	               |	Номенклатура.Ссылка В(&МассивНоменклатуры)
	               |	И НЕ Номенклатура.Ссылка.ЭтоГруппа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ВерсииТехКарт.ТехКарта КАК ТехКарта
	               |ПОМЕСТИТЬ ВТ_ВерсииТехКарт
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(, ) КАК торо_ВерсииТехКарт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_НоменклатураДляОтправки.Ссылка КАК Ссылка,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ЗапчастиИМатериальныеЗатраты
	               |ИЗ
	               |	ВТ_НоменклатураДляОтправки КАК ВТ_НоменклатураДляОтправки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Запчасти КАК торо_Запчасти
	               |		ПО ВТ_НоменклатураДляОтправки.Ссылка = торо_Запчасти.Номенклатура
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура,
	               |	2
	               |ИЗ
	               |	ВТ_НоменклатураДляОтправки КАК ВТ_НоменклатураДляОтправки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВерсииТехКарт КАК ВТ_ВерсииТехКарт
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	               |			ПО ВТ_ВерсииТехКарт.ТехКарта = торо_ТехКартыМатериальныеЗатраты.Ссылка
	               |		ПО (ВТ_НоменклатураДляОтправки.Ссылка = торо_ТехКартыМатериальныеЗатраты.Номенклатура)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ТехнологическиеОперацииМатериальныеЗатраты.Номенклатура,
	               |	3
	               |ИЗ
	               |	ВТ_НоменклатураДляОтправки КАК ВТ_НоменклатураДляОтправки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации.МатериальныеЗатраты КАК торо_ТехнологическиеОперацииМатериальныеЗатраты
	               |		ПО ВТ_НоменклатураДляОтправки.Ссылка = торо_ТехнологическиеОперацииМатериальныеЗатраты.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ЗапчастиИМатериальныеЗатраты.Ссылка КАК Ссылка,
	               |	МИНИМУМ(ВТ_ЗапчастиИМатериальныеЗатраты.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ЗапчастиИМатериальныеЗатратыСПриоритетом
	               |ИЗ
	               |	ВТ_ЗапчастиИМатериальныеЗатраты КАК ВТ_ЗапчастиИМатериальныеЗатраты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ЗапчастиИМатериальныеЗатраты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	               |	МАКСИМУМ(ЦеныНоменклатуры.Цена) КАК Цена
	               |ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатуры
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЦеныНоменклатуры.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_НоменклатураДляОтправки.Ссылка КАК Ссылка,
	               |	ВТ_НоменклатураДляОтправки.Родитель КАК Родитель,
	               |	ВТ_НоменклатураДляОтправки.Сопоставлен КАК Сопоставлен,
	               |	ВЫБОР
	               |		КОГДА ВТ_ЗапчастиИМатериальныеЗатратыСПриоритетом.Приоритет = 1
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК TypeID,
				   |	1 КАК ID,
				   |	ВТ_НоменклатураДляОтправки.IntegrationID КАК IntegrationID,
				   |	ЛОЖЬ КАК IsUseID,
				   |	ВТ_НоменклатураДляОтправки.Ссылка.НаименованиеПолное КАК Name,
				   |	ВТ_НоменклатураДляОтправки.Ссылка.Наименование КАК ShortName,
				   |	ВТ_НоменклатураДляОтправки.Ссылка.Код КАК Number,
				   |	ВТ_НоменклатураДляОтправки.Ссылка.Ссылка.ЕдиницаИзмерения.Наименование КАК EdIzm,
				   |	ВТ_НоменклатураДляОтправки.Ссылка.Описание КАК Description,
				   |	ВТ_НоменклатураДляОтправки.Ссылка.Код КАК Mark,
				   |	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) КАК Cost,
	               |	ЕСТЬNULL(ВТ_ГруппыНоменклатуры.ID, 0) КАК MaterialAndComponentGroupID,
				   |	ЕСТЬNULL(ВТ_ГруппыНоменклатуры.IntegrationID, """") КАК MaterialAndComponentGroupIntegrationID
	               |ИЗ
	               |	ВТ_НоменклатураДляОтправки КАК ВТ_НоменклатураДляОтправки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗапчастиИМатериальныеЗатратыСПриоритетом КАК ВТ_ЗапчастиИМатериальныеЗатратыСПриоритетом
	               |		ПО ВТ_НоменклатураДляОтправки.Ссылка = ВТ_ЗапчастиИМатериальныеЗатратыСПриоритетом.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	               |		ПО ВТ_НоменклатураДляОтправки.Ссылка = ВТ_ЦеныНоменклатуры.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппыНоменклатуры КАК ВТ_ГруппыНоменклатуры
	               |		ПО ВТ_НоменклатураДляОтправки.ParentIntegrationID = ВТ_ГруппыНоменклатуры.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивНоменклатуры", СтруктураВозврата.МассивНоменклатуры);
	Запрос.УстановитьПараметр("ГруппыНоменклатуры", ГруппыНоменклатуры);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТаблицаДляОтправки = Результат.Скопировать(, "ID, IntegrationID, Name, Description, MaterialAndComponentGroupID, MaterialAndComponentGroupIntegrationID, Number, EdIzm, Cost, ShortName, Mark, TypeID, IsUseID");
	
	Для каждого СтрокаНоменклатуры Из ТаблицаДляОтправки Цикл
	    СтрокаНоменклатуры.IntegrationId = ?(СтрНайти(СтрокаНоменклатуры.IntegrationId, "Элемент_") = 0, СтрокаНоменклатуры.IntegrationId, СтрЗаменить(СтрокаНоменклатуры.IntegrationId, "Элемент_", ""));
	КонецЦикла;
		
#Область ЗапчастиОР
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	торо_Запчасти.Номенклатура КАК Ссылка,
				   |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерНоменклатура.УникальныйИдентификаторДиспетчер, ""toir_"" + торо_Запчасти.Номенклатура.Код) КАК IntegrationID,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер КАК GroupIntegrationID
	               |ИЗ
	               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
				   |		ПО торо_Запчасти.ОбъектРемонта = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерНоменклатура
				   |		ПО торо_Запчасти.Номенклатура = торо_СоответствиеОбъектовНСИДиспетчерНоменклатура.ОбъектТОИР
	               |ГДЕ
	               |	торо_Запчасти.Номенклатура В(&МассивНоменклатуры)";

	Запрос.УстановитьПараметр("МассивНоменклатуры", Результат.ВыгрузитьКолонку("Ссылка"));
	ЗапчастиОР = Запрос.Выполнить().Выгрузить();
#КонецОбласти
	
	СтруктураСвязанныхДанных = Новый Структура("ПолеПоиска, ПолеВыбора, СвязанныеДанные, СвойствоТелаЗапроса", "IntegrationID", "GroupIntegrationID", ЗапчастиОР, "equipmentIntegrationIdList");
	ДополнительноеОписание = НСтр("ru = 'при отправке паспортных характеристик'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendMaterialAndComponentList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание, СтруктураСвязанныхДанных);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.Номенклатура");
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Номенклатура);
	
	Возврат УспешноеВыполнение;
КонецФункции

Функция ОтправитьИерархиюНоменклатуры(Узел, СтруктураВозврата, ТаблицаСоответствияВебСервисов, ОтправленныеГруппыНоменклатуры)
	Если СтруктураВозврата.МассивНоменклатуры.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;

#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Ссылка В(&МассивНоменклатуры)
	               |ИТОГИ ПО
	               |	Ссылка ТОЛЬКО ИЕРАРХИЯ";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивНоменклатуры", СтруктураВозврата.МассивНоменклатуры);
	ВсяНоменклатура = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Ссылка.Родитель КАК Родитель,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, ""toir_group_"" + Номенклатура.Код) КАК IntegrationID,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО Номенклатура.Ссылка = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |ГДЕ
	               |	Номенклатура.Ссылка В(&ВсяНоменклатура)
	               |	И Номенклатура.Ссылка.ЭтоГруппа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодготовленныеДанные.Ссылка КАК Ссылка,
	               |	ВТ_ПодготовленныеДанные.Родитель КАК Родитель,
				   |	ВТ_ПодготовленныеДанные.Ссылка.Наименование КАК Name,
				   |	ЕСТЬNULL(ВТ_ПодготовленныеДанныеРодители.IntegrationID, """") КАК ParentIntegrationID,
				   |	1 КАК ID,
				   |	ВТ_ПодготовленныеДанные.IntegrationID КАК IntegrationID,
				   |	ЛОЖЬ КАК IsUseID,
				   |	"""" КАК Description,
	               |	ВТ_ПодготовленныеДанные.Сопоставлен КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанныеРодители
	               |		ПО ВТ_ПодготовленныеДанные.Родитель = ВТ_ПодготовленныеДанныеРодители.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
#КонецОбласти
	Запрос.УстановитьПараметр("ВсяНоменклатура", ВсяНоменклатура);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДляОтправки = Результат.Скопировать(, "ID, IntegrationID, Name, Description, ParentIntegrationID, IsUseID");
	
	Для каждого СтрокаГруппыНоменклатуры Из ТаблицаДляОтправки Цикл
		СтрокаГруппыНоменклатуры.IntegrationId = ?(СтрНайти(СтрокаГруппыНоменклатуры.IntegrationId, "Группа_") = 0, СтрокаГруппыНоменклатуры.IntegrationId, СтрЗаменить(СтрокаГруппыНоменклатуры.IntegrationId, "Группа_", ""));
	КонецЦикла;
	
	Для каждого СтрокаГруппыНоменклатуры Из Результат Цикл
		ОтправленныеГруппыНоменклатуры.Вставить(СтрокаГруппыНоменклатуры.Ссылка, СтрокаГруппыНоменклатуры.IntegrationID);
	КонецЦикла;
	
	ДополнительноеОписание = НСтр("ru = 'при отправке групп номенклатуры'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendMaterialAndComponentGroupModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.Номенклатура");
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПаспортныеХарактеристикиОР

Функция ОтправитьПаспортныеХарактеристикиОР(Узел, МассивПаспортныхХарактеристикОР, МассивГруппХарактеристикОР, ТаблицаСоответствияВебСервисов)
	Если МассивПаспортныхХарактеристикОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
#Область ОсновнойЗапрос
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	торо_ГруппыХарактеристикОборудованияСписокХарактеристик.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_ДополнительныеРеквизитыВГруппахХарактеристикОР
	               |ИЗ
	               |	ПланВидовХарактеристик.торо_ГруппыХарактеристикОборудования.СписокХарактеристик КАК торо_ГруппыХарактеристикОборудованияСписокХарактеристик
	               |ГДЕ
	               |	торо_ГруппыХарактеристикОборудованияСписокХарактеристик.Характеристика В(&МассивПаспортныхХарактеристикОР)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК ID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, ""toir_"" + ДополнительныеРеквизитыИСведения.Наименование) КАК IntegrationID,
	               |	ЛОЖЬ КАК IsUseID,
	               |	ДополнительныеРеквизитыИСведения.Наименование КАК Name,
	               |	ДополнительныеРеквизитыИСведения.Комментарий КАК Description,
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ДополнительныеРеквизитыИСведения.Ссылка = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеРеквизитыВГруппахХарактеристикОР КАК ВТ_ДополнительныеРеквизитыВГруппахХарактеристикОР
	               |		ПО ДополнительныеРеквизитыИСведения.Ссылка = ВТ_ДополнительныеРеквизитыВГруппахХарактеристикОР.Характеристика
	               |ГДЕ
	               |	НЕ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР ЕСТЬ NULL
	               |				И НЕ ВТ_ДополнительныеРеквизитыВГруппахХарактеристикОР.Характеристика ЕСТЬ NULL)
	               |	И ДополнительныеРеквизитыИСведения.Ссылка В(&МассивПаспортныхХарактеристикОР)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер, ""toir_"" + торо_ГруппыХарактеристикОборудования.Код),
	               |	ЛОЖЬ,
	               |	торо_ГруппыХарактеристикОборудования.Наименование,
	               |	"""",
	               |	торо_ГруппыХарактеристикОборудования.Ссылка,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ
	               |ИЗ
	               |	ПланВидовХарактеристик.торо_ГруппыХарактеристикОборудования КАК торо_ГруппыХарактеристикОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО торо_ГруппыХарактеристикОборудования.Ссылка = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |ГДЕ
	               |	торо_ГруппыХарактеристикОборудования.Ссылка В(&МассивГруппХарактеристикОР)";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивГруппХарактеристикОР", МассивГруппХарактеристикОР);
	Запрос.УстановитьПараметр("МассивПаспортныхХарактеристикОР", МассивПаспортныхХарактеристикОР);
	Результат = Запрос.Выполнить().Выгрузить();
	
#Область НаправленияХарактеристик
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерХарактеристики.УникальныйИдентификаторДиспетчер, ""toir_"" + НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Наименование) КАК IntegrationID,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер КАК GroupIntegrationID
	               |ИЗ
	               |	Справочник.торо_НаправленияОбъектовРемонтныхРабот КАК торо_НаправленияОбъектовРемонтныхРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	               |		ПО торо_НаправленияОбъектовРемонтныхРабот.НаборСвойствОР = НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО торо_НаправленияОбъектовРемонтныхРабот.Ссылка = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерХарактеристики
	               |		ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство = торо_СоответствиеОбъектовНСИДиспетчерХарактеристики.ОбъектТОИР
	               |ГДЕ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство В(&МассивПаспортныхХарактеристикОР)";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивПаспортныхХарактеристикОР", МассивПаспортныхХарактеристикОР);
	НаправленияХарактеристик = Запрос.Выполнить().Выгрузить();
	
	СтруктураСвязанныхДанных = Новый Структура("ПолеПоиска, ПолеВыбора, СвязанныеДанные, СвойствоТелаЗапроса", "IntegrationID", "GroupIntegrationID", НаправленияХарактеристик, "equipmentGroupIntegrationIdList");
	ТаблицаДляОтправки = Результат.Скопировать(, "ID, IntegrationID, Name, Description, IsUseID");
	ДополнительноеОписание = НСтр("ru = 'при отправке паспортных характеристик'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendTechnologyParamModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание, СтруктураСвязанныхДанных);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.Сотрудники");
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Сотрудники);
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Сотрудники

Функция ОтправитьСотрудников(Узел, МассивСотрудников, ТаблицаСоответствияВебСервисов)
	Если МассивСотрудников.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ФОИспользоватьУчетПерсонала = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУправлениеПерсоналом");
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
	               |	КадроваяИсторияСотрудников.Должность КАК Должность
	               |ПОМЕСТИТЬ ВТ_ПодразделенияСотрудников
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(, Сотрудник В (&МассивСотрудников)) КАК КадроваяИсторияСотрудников
				   |ГДЕ
				   |	&ФОИспользоватьУчетПерсонала
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Сотрудники.Ссылка КАК Ссылка,
	               |	Сотрудники.Код КАК Код,
	               |	Сотрудники.Наименование КАК Наименование
	               |ПОМЕСТИТЬ ВТ_Сотрудники
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Ссылка В(&МассивСотрудников)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Сотрудники.Ссылка КАК Ссылка,
	               |	ВТ_Сотрудники.Код КАК Код,
	               |	ВТ_Сотрудники.Наименование КАК Наименование,
	               |	ВТ_ПодразделенияСотрудников.Подразделение КАК Подразделение,
	               |	ВТ_ПодразделенияСотрудников.Должность КАК Должность
	               |ПОМЕСТИТЬ ВТ_СотрудникиСПодразделениями
	               |ИЗ
	               |	ВТ_Сотрудники КАК ВТ_Сотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодразделенияСотрудников КАК ВТ_ПодразделенияСотрудников
	               |		ПО ВТ_Сотрудники.Ссылка = ВТ_ПодразделенияСотрудников.Сотрудник
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	1 КАК ID,
				   |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерСотрудники.УникальныйИдентификаторДиспетчер, ""toir_"" + ВТ_СотрудникиСПодразделениями.Код) КАК IntegrationID,
				   |	ЛОЖЬ КАК IsUseID,
				   |	ВТ_СотрудникиСПодразделениями.Наименование КАК Наименование,
	               |	ВТ_СотрудникиСПодразделениями.Код КАК TabNum,
	               |	ВТ_СотрудникиСПодразделениями.Ссылка КАК Ссылка,
				   |	ВЫБОР
	               |		КОГДА ВТ_СотрудникиСПодразделениями.Должность ЕСТЬ NULL
	               |			ТОГДА """"
	               |		ИНАЧЕ ВТ_СотрудникиСПодразделениями.Должность.Наименование
	               |	КОНЕЦ КАК ProfName,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерПодразделения.УникальныйИдентификаторДиспетчер, ""-1"") КАК DeptIntegrationID,
				   |	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК FirstName,
				   |	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК LastName,
				   |	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК Patronymic,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчерСотрудники.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_СотрудникиСПодразделениями КАК ВТ_СотрудникиСПодразделениями
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерСотрудники
	               |		ПО ВТ_СотрудникиСПодразделениями.Ссылка = торо_СоответствиеОбъектовНСИДиспетчерСотрудники.ОбъектТОИР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерПодразделения
	               |		ПО ВТ_СотрудникиСПодразделениями.Подразделение = торо_СоответствиеОбъектовНСИДиспетчерПодразделения.ОбъектТОИР";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ФОИспользоватьУчетПерсонала", ФОИспользоватьУчетПерсонала);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПодготовленнаяТаблица = Результат.Скопировать();
	ПодготовленнаяТаблица.Очистить();
	
	ЕстьНеотправленныеСотрудники = Ложь;
	
	Для каждого СтрокаСотрудника Из Результат Цикл
		ТабельныйНомер = "";
		Попытка
		    ТабельныйНомер = Строка(Число(СтрокаСотрудника.TabNum));
		Исключение
			ЕстьНеотправленныеСотрудники = Истина;
			ОписаниеОшибкиШаблон = Нстр("ru = 'Ошибка при отправке сотрудника: у сотрудника <%1> табельный номер содержит символы, данный объект не будет выгружен в АИС Диспетчер. Для устранения ошибки указывайте для сотрудников табельные номера без символов.'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибкиШаблон, СтрокаСотрудника.Наименование);
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка выполнения запроса");
			
		    Продолжить;
		КонецПопытки;
		
		НоваяСтрока = ПодготовленнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСотрудника);
		
		МассивФИО = СтрРазделить(СтрокаСотрудника.Наименование, " ");
		НоваяСтрока.FirstName = ?(МассивФИО.Количество() > 1, МассивФИО[1], "");
		НоваяСтрока.LastName = ?(МассивФИО.Количество() > 0, МассивФИО[0], "");
		НоваяСтрока.Patronymic = ?(МассивФИО.Количество() > 2 ,МассивФИО[2], "");
		НоваяСтрока.TabNum = ТабельныйНомер;
	КонецЦикла;
	
	Если ЕстьНеотправленныеСотрудники Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДляОтправки = ПодготовленнаяТаблица.Скопировать(, "ID, IntegrationID, FirstName, LastName, Patronymic, TabNum, ProfName, DeptIntegrationID, IsUseID");
	ДополнительноеОписание = НСтр("ru = 'при отправке сотрудников'");
	УспешноеВыполнение = ОтправитьДанныеВАИСДиспетчер(Узел, "SendWorkerModelList", ТаблицаСоответствияВебСервисов, ТаблицаДляОтправки, ДополнительноеОписание);
	
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Если передаются объекты, для которых нет соответствия в регсире (новые), то нужно его записать
	СтруктураПоиска = Новый Структура("Сопоставлен", Ложь);
	НайденныеСтроки = ПодготовленнаяТаблица.НайтиСтроки(СтруктураПоиска);
	СопоставитьОбъектыНСИ(НайденныеСтроки, "СправочникСсылка.Сотрудники");
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.Сотрудники);
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаИСопоставление

#Область ЗагрузкаИзАИСДиспетчер

#Область Подразделения

Функция ЗагрузитьПодразделения(ТаблицаПодразделений, Узел, ТаблицаСоответствияВебСервисов)
	Если Не ЗаполнитьIntegrationIDПодразделенийВДиспетчере(Узел, ТаблицаСоответствияВебСервисов) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
#Область Загрузка
	ДополнительноеОписание = НСтр("ru = 'при получении подразделений'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Подразделения = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetDeptList", "Подразделения", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
	Если Подразделения.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсходнаяТаблицаПодразделений.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПодразделений.Name КАК Name,
	               |	ИсходнаяТаблицаПодразделений.ID КАК ID,
	               |	ИсходнаяТаблицаПодразделений.ParentID КАК ParentID
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаПодразделений
	               |ИЗ
	               |	&ТаблицаПодразделений КАК ИсходнаяТаблицаПодразделений
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ParentID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИсходнаяТаблицаПодразделений.ID КАК ID,
	               |	ВТ_ИсходнаяТаблицаПодразделений.IntegrationID КАК IntegrationID,
	               |	ВТ_ИсходнаяТаблицаПодразделений.Name КАК Name,
	               |	ТаблицаРодителей.IntegrationID КАК ParentIntegrationID,
	               |	ТаблицаРодителей.Name КАК ParentName
	               |ПОМЕСТИТЬ ВТ_ПодразделенияСРодителями
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаПодразделений КАК ВТ_ИсходнаяТаблицаПодразделений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяТаблицаПодразделений КАК ТаблицаРодителей
	               |		ПО (ТаблицаРодителей.ID = ВТ_ИсходнаяТаблицаПодразделений.ParentID)
	               |ГДЕ
	               |	НЕ ВТ_ИсходнаяТаблицаПодразделений.IntegrationID = """"
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодразделенияСРодителями.IntegrationID КАК IntegrationID,
	               |	ВТ_ПодразделенияСРодителями.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_Подразделения
	               |ИЗ
	               |	ВТ_ПодразделенияСРодителями КАК ВТ_ПодразделенияСРодителями
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Подразделения.IntegrationID КАК IntegrationID,
	               |	ВТ_Подразделения.Name КАК Name,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеПодразделения
	               |ИЗ
	               |	ВТ_Подразделения КАК ВТ_Подразделения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_Подразделения.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.СтруктураПредприятия"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_Подразделения.IntegrationID,
	               |	ВТ_Подразделения.Name,
	               |	СтруктураПредприятия.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_Подразделения КАК ВТ_Подразделения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |		ПО ВТ_Подразделения.IntegrationID = СтруктураПредприятия.Код
	               |			И (НЕ ВТ_Подразделения.IntegrationID = """")
	               |			И (НЕ СтруктураПредприятия.Код = """")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_Подразделения.IntegrationID,
	               |	ВТ_Подразделения.Name,
	               |	СтруктураПредприятия.Ссылка,
	               |	3
	               |ИЗ
	               |	ВТ_Подразделения КАК ВТ_Подразделения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |		ПО ВТ_Подразделения.Name = СтруктураПредприятия.Наименование
	               |			И (НЕ ВТ_Подразделения.Name = """")
	               |			И (НЕ СтруктураПредприятия.Наименование = """")
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Name
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеПодразделения.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсеСопоставленныеПодразделения.Name КАК Name,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеПодразделения.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПодразделенияСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПодразделения КАК ВТ_ВсеСопоставленныеПодразделения
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеПодразделения.IntegrationID,
	               |	ВТ_ВсеСопоставленныеПодразделения.Name
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Name,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеПодразделения.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсеСопоставленныеПодразделения.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПодразделения
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПодразделения КАК ВТ_ВсеСопоставленныеПодразделения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПодразделенияСПриоритетом КАК ВТ_СопоставленныеПодразделенияСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеПодразделения.IntegrationID = ВТ_СопоставленныеПодразделенияСПриоритетом.IntegrationID
	               |			И ВТ_ВсеСопоставленныеПодразделения.Name = ВТ_СопоставленныеПодразделенияСПриоритетом.Name
	               |			И ВТ_ВсеСопоставленныеПодразделения.Приоритет = ВТ_СопоставленныеПодразделенияСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодразделенияСРодителями.ID КАК ID,
	               |	ВТ_ПодразделенияСРодителями.IntegrationID КАК IntegrationID,
	               |	ВТ_ПодразделенияСРодителями.Name КАК Name,
	               |	ВТ_ПодразделенияСРодителями.ParentIntegrationID КАК ParentIntegrationID,
	               |	ВТ_ПодразделенияСРодителями.ParentName КАК ParentName,
	               |	ЕСТЬNULL(ВТ_СопоставленныеПодразделения.Объект, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеПодразделения.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ПодразделенияСРодителями КАК ВТ_ПодразделенияСРодителями
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПодразделения КАК ВТ_СопоставленныеПодразделения
	               |		ПО ВТ_ПодразделенияСРодителями.IntegrationID = ВТ_СопоставленныеПодразделения.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаПодразделений", Подразделения);
	ТаблицаПодразделений = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDПодразделенийВДиспетчере(Узел, ТаблицаСоответствияВебСервисов)	
#Область Загрузка
	ДополнительноеОписание = НСтр("ru = 'при получении подразделений для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "";
	Подразделения = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetDeptList", "Подразделения", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
	СоответствиеID = Новый Соответствие();
	ТаблицаКОтправке = Подразделения.Скопировать();
	ТаблицаКОтправке.Очистить();
	
	Для каждого СтрокаПодразделения Из Подразделения Цикл
		Если ЗначениеЗаполнено(СтрокаПодразделения.IntegrationID) Тогда
			СоответствиеID[СтрокаПодразделения.ID] = СтрокаПодразделения.IntegrationID;
		    Продолжить;
		КонецЕсли;
		
		СтрокаПодразделения.IntegrationID = "toir_initial_" + СтрокаПодразделения.ID;
		СоответствиеID[СтрокаПодразделения.ID] = СтрокаПодразделения.IntegrationID;
		
		ЗаполнитьЗначенияСвойств(ТаблицаКОтправке.Добавить(), СтрокаПодразделения);
	КонецЦикла;
	
	Если ТаблицаКОтправке.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	Для каждого СтрокаПодразделения Из ТаблицаКОтправке Цикл
		Если СоответствиеID[СтрокаПодразделения.ParentID] = Неопределено Тогда
		    Продолжить;
		КонецЕсли;
		
		СтрокаПодразделения.ParentIntegrationID = СоответствиеID[СтрокаПодразделения.ParentID];
	КонецЦикла;
	
	ТаблицаКОтправке.Колонки.Добавить("isUseId", Новый ОписаниеТипов("Булево"));
	ТаблицаКОтправке.ЗаполнитьЗначения(Истина, "isUseId");
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у подразделений В АИС Диспетчере'");
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendDeptModelList", ТаблицаСоответствияВебСервисов, ТаблицаКОтправке, ДополнительноеОписание);
КонецФункции

#КонецОбласти

#Область ТиповыеОР

Функция ЗагрузитьТиповыеОР(ТаблицаТиповыхОР, Узел, ТаблицаСоответствияВебСервисов)
	Если Не ЗаполнитьIntegrationIDТиповВДиспетчере(Узел, ТаблицаСоответствияВебСервисов) Тогда
	    Возврат Ложь;
	КонецЕсли;

#Область Загрузка
	ДополнительноеОписание = НСтр("ru = 'при получении типов'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ТиповыеОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentTypeList", "ТиповыеОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если ТиповыеОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаТиповыхОР.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаТиповыхОР.Name КАК Name,
	               |	ИсходнаяТаблицаТиповыхОР.Description КАК Description
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаТиповыхОР
	               |ИЗ
	               |	&ТаблицаТиповыхОР КАК ИсходнаяТаблицаТиповыхОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИсходнаяТаблицаТиповыхОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ИсходнаяТаблицаТиповыхОР.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_ТаблицаТиповыхОР
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаТиповыхОР КАК ВТ_ИсходнаяТаблицаТиповыхОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаТиповыхОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаТиповыхОР.Name КАК Name,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.торо_ТиповыеОР) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеТиповыеОР
	               |ИЗ
	               |	ВТ_ТаблицаТиповыхОР КАК ВТ_ТаблицаТиповыхОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаТиповыхОР.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ТиповыеОР"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаТиповыхОР.IntegrationID,
	               |	ВТ_ТаблицаТиповыхОР.Name,
	               |	торо_ТиповыеОР.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаТиповыхОР КАК ВТ_ТаблицаТиповыхОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР КАК торо_ТиповыеОР
	               |		ПО ВТ_ТаблицаТиповыхОР.Name = торо_ТиповыеОР.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеТиповыеОР.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеТиповыеОР.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеТиповыеОРСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеТиповыеОР КАК ВТ_ВсеСопоставленныеТиповыеОР
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеТиповыеОР.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеТиповыеОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсеСопоставленныеТиповыеОР.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеТиповыеОР
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеТиповыеОР КАК ВТ_ВсеСопоставленныеТиповыеОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеТиповыеОРСПриоритетом КАК ВТ_СопоставленныеТиповыеОРСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеТиповыеОР.IntegrationID = ВТ_СопоставленныеТиповыеОРСПриоритетом.IntegrationID
	               |			И ВТ_ВсеСопоставленныеТиповыеОР.Приоритет = ВТ_СопоставленныеТиповыеОРСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИсходнаяТаблицаТиповыхОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ИсходнаяТаблицаТиповыхОР.Name КАК Name,
	               |	ВТ_ИсходнаяТаблицаТиповыхОР.Description КАК Description,
	               |	ЕСТЬNULL(ВТ_СопоставленныеТиповыеОР.Объект, ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеТиповыеОР.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаТиповыхОР КАК ВТ_ИсходнаяТаблицаТиповыхОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеТиповыеОР КАК ВТ_СопоставленныеТиповыеОР
	               |		ПО ВТ_ИсходнаяТаблицаТиповыхОР.IntegrationID = ВТ_СопоставленныеТиповыеОР.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаТиповыхОР", ТиповыеОР);
	ТаблицаТиповыхОР = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDТиповВДиспетчере(Узел, ТаблицаСоответствияВебСервисов)
#Область ЗагрузкаГрупп
	ДополнительноеОписание = НСтр("ru = 'при получении типов для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	
	ТиповыеОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentTypeList", "ТиповыеОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
	
	Если ТиповыеОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
#Область ГруппыВКатегориях
	ДополнительноеОписание = НСтр("ru = 'при получении типов для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.kEquipmentCategoryIntegrationId) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	
	ТипыВКатегориях = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentTypeInCategoryList", "ТипыВКатегориях", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);

	Если ТипыВКатегориях.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТиповыхОР.ID КАК ID,
	               |	ТаблицаТиповыхОР.IntegrationID КАК IntegrationID,
	               |	ТаблицаТиповыхОР.Name КАК Name,
	               |	ТаблицаТиповыхОР.Code КАК Code,
	               |	ТаблицаТиповыхОР.Description КАК Description
	               |ПОМЕСТИТЬ ВТ_ТаблицаТиповыхОР
	               |ИЗ
	               |	&ТаблицаТиповыхОР КАК ТаблицаТиповыхОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТипыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ТипыВКатегориях.kEquipmentTypeID КАК kEquipmentTypeID
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаТиповВКатегориях
	               |ИЗ
	               |	&ТипыВКатегориях КАК ТипыВКатегориях
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentTypeID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВТ_ИсходнаяТаблицаТиповВКатегориях.kEquipmentCategoryIntegrationID) КАК kEquipmentCategoryIntegrationID,
	               |	ВТ_ИсходнаяТаблицаТиповВКатегориях.kEquipmentTypeID КАК kEquipmentTypeID
	               |ПОМЕСТИТЬ ВТ_ТаблицаТиповВКатегориях
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаТиповВКатегориях КАК ВТ_ИсходнаяТаблицаТиповВКатегориях
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ИсходнаяТаблицаТиповВКатегориях.kEquipmentTypeID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentTypeID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаТиповыхОР.ID КАК ID,
	               |	ВТ_ТаблицаТиповыхОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаТиповыхОР.Name КАК Name,
	               |	ВТ_ТаблицаТиповыхОР.Code КАК Code,
	               |	ВТ_ТаблицаТиповыхОР.Description КАК Description,
	               |	ЕСТЬNULL(ВТ_ТаблицаТиповВКатегориях.kEquipmentCategoryIntegrationID, ""Unknown"") КАК EquipmentCategoryIntegrationID,
				   |	ИСТИНА КАК IsUseId
	               |ИЗ
	               |	ВТ_ТаблицаТиповыхОР КАК ВТ_ТаблицаТиповыхОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаТиповВКатегориях КАК ВТ_ТаблицаТиповВКатегориях
	               |		ПО ВТ_ТаблицаТиповыхОР.ID = ВТ_ТаблицаТиповВКатегориях.kEquipmentTypeID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаТиповыхОР", ТиповыеОР);
	Запрос.УстановитьПараметр("ТипыВКатегориях", ТипыВКатегориях);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у типов В АИС Диспетчере'");
	
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentTypeModelList", ТаблицаСоответствияВебСервисов, Результат, ДополнительноеОписание);
КонецФункции

#КонецОбласти

#Область НаправленияОР

Функция ЗагрузитьНаправленияОР(ТаблицаНаправленийОР, Узел, ТаблицаСоответствияВебСервисов)
	Если Не ЗаполнитьIntegrationIDГруппВДиспетчере(Узел, ТаблицаСоответствияВебСервисов) Тогда
	    Возврат Ложь;
	КонецЕсли;

#Область Группы
	ДополнительноеОписание = НСтр("ru = 'при получении групп'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	НаправленияОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentGroupList", "НаправленияОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если НаправленияОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаНаправленийОР.ID КАК ID,
	               |	ИсходнаяТаблицаНаправленийОР.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаНаправленийОР.Name КАК Name,
	               |	ИсходнаяТаблицаНаправленийОР.Description КАК Description
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаНаправленийОР
	               |ИЗ
	               |	&ТаблицаНаправленийОР КАК ИсходнаяТаблицаНаправленийОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИсходнаяТаблицаНаправленийОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ИсходнаяТаблицаНаправленийОР.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_ТаблицаНаправленийОР
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаНаправленийОР КАК ВТ_ИсходнаяТаблицаНаправленийОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаНаправленийОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаНаправленийОР.Name КАК Name,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.торо_НаправленияОбъектовРемонтныхРабот) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеНаправленияОР
	               |ИЗ
	               |	ВТ_ТаблицаНаправленийОР КАК ВТ_ТаблицаНаправленийОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаНаправленийОР.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_НаправленияОбъектовРемонтныхРабот"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаНаправленийОР.IntegrationID,
	               |	ВТ_ТаблицаНаправленийОР.Name,
	               |	торо_НаправленияОбъектовРемонтныхРабот.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаНаправленийОР КАК ВТ_ТаблицаНаправленийОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_НаправленияОбъектовРемонтныхРабот КАК торо_НаправленияОбъектовРемонтныхРабот
	               |		ПО ВТ_ТаблицаНаправленийОР.Name = торо_НаправленияОбъектовРемонтныхРабот.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеНаправленияОР.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеНаправленияОР.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеНаправленияОРСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеНаправленияОР КАК ВТ_ВсеСопоставленныеНаправленияОР
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеНаправленияОР.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеНаправленияОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсеСопоставленныеНаправленияОР.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеНаправленияОР
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеНаправленияОР КАК ВТ_ВсеСопоставленныеНаправленияОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеНаправленияОРСПриоритетом КАК ВТ_СопоставленныеНаправленияОРСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеНаправленияОР.IntegrationID = ВТ_СопоставленныеНаправленияОРСПриоритетом.IntegrationID
	               |			И ВТ_ВсеСопоставленныеНаправленияОР.Приоритет = ВТ_СопоставленныеНаправленияОРСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИсходнаяТаблицаНаправленийОР.ID КАК ID,
	               |	ВТ_ИсходнаяТаблицаНаправленийОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ИсходнаяТаблицаНаправленийОР.Name КАК Name,
	               |	ВТ_ИсходнаяТаблицаНаправленийОР.Description КАК Description,
	               |	ЕСТЬNULL(ВТ_СопоставленныеНаправленияОР.Объект, ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеНаправленияОР.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаНаправленийОР КАК ВТ_ИсходнаяТаблицаНаправленийОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеНаправленияОР КАК ВТ_СопоставленныеНаправленияОР
	               |		ПО ВТ_ИсходнаяТаблицаНаправленийОР.IntegrationID = ВТ_СопоставленныеНаправленияОР.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаНаправленийОР", НаправленияОР);
	ТаблицаНаправленийОР = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDГруппВДиспетчере(Узел, ТаблицаСоответствияВебСервисов)
#Область Группы
	ДополнительноеОписание = НСтр("ru = 'при получении групп для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	НаправленияОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentGroupList", "НаправленияОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
	
	Если НаправленияОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
#Область ГруппыВКатегориях
	ДополнительноеОписание = НСтр("ru = 'при получении групп в категориях для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.kEquipmentCategoryIntegrationId) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ГруппыВКатегориях = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentGroupInCategoryList", "ГруппыВКатегориях", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если ГруппыВКатегориях.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаправленияОР.ID КАК ID,
	               |	НаправленияОР.IntegrationID КАК IntegrationID,
	               |	НаправленияОР.Name КАК Name,
	               |	НаправленияОР.Code КАК Code,
	               |	НаправленияОР.Description КАК Description
	               |ПОМЕСТИТЬ ВТ_ТаблицаНаправленийОР
	               |ИЗ
	               |	&НаправленияОР КАК НаправленияОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыВКатегориях.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ГруппыВКатегориях.kEquipmentGroupId КАК kEquipmentGroupId
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаГруппВКатегориях
	               |ИЗ
	               |	&ГруппыВКатегориях КАК ГруппыВКатегориях
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentGroupId
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВТ_ИсходнаяТаблицаГруппВКатегориях.kEquipmentCategoryIntegrationID) КАК kEquipmentCategoryIntegrationID,
	               |	ВТ_ИсходнаяТаблицаГруппВКатегориях.kEquipmentGroupId КАК kEquipmentGroupId
	               |ПОМЕСТИТЬ ВТ_ТаблицаТиповВКатегориях
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаГруппВКатегориях КАК ВТ_ИсходнаяТаблицаГруппВКатегориях
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ИсходнаяТаблицаГруппВКатегориях.kEquipmentGroupId
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentGroupId
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаНаправленийОР.ID КАК ID,
	               |	ВТ_ТаблицаНаправленийОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаНаправленийОР.Name КАК Name,
	               |	ВТ_ТаблицаНаправленийОР.Code КАК Code,
	               |	ВТ_ТаблицаНаправленийОР.Description КАК Description,
	               |	ЕСТЬNULL(ВТ_ИсходнаяТаблицаГруппВКатегориях.kEquipmentCategoryIntegrationID, ""Unknown"") КАК EquipmentCategoryIntegrationID,
				   |	ИСТИНА КАК IsUseId
	               |ИЗ
	               |	ВТ_ТаблицаНаправленийОР КАК ВТ_ТаблицаНаправленийОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяТаблицаГруппВКатегориях КАК ВТ_ИсходнаяТаблицаГруппВКатегориях
	               |		ПО ВТ_ТаблицаНаправленийОР.ID = ВТ_ИсходнаяТаблицаГруппВКатегориях.kEquipmentGroupId";
#КонецОбласти
	Запрос.УстановитьПараметр("НаправленияОР", НаправленияОР);
	Запрос.УстановитьПараметр("ГруппыВКатегориях", ГруппыВКатегориях);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у групп В АИС Диспетчере'");
	
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentGroupModelList", ТаблицаСоответствияВебСервисов, Результат, ДополнительноеОписание);
КонецФункции

#КонецОбласти

#Область Производители

Функция ЗагрузитьПроизводителей(ТаблицаПроизводителей, Узел, ТаблицаСоответствияВебСервисов)
	ЗаполнитьIntegrationIDПроизводителейВДиспетчере(Узел, ТаблицаСоответствияВебСервисов);
	
#Область ЗагрузкаПроизводителей
	ДополнительноеОписание = НСтр("ru = 'при получении производителей'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Производители = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentFirmList", "Производители", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти

	Если Производители.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаПроизводителей.ID КАК ID,
	               |	ИсходнаяТаблицаПроизводителей.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПроизводителей.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_ТаблицаПроизводителей
	               |ИЗ
	               |	&ТаблицаПроизводителей КАК ИсходнаяТаблицаПроизводителей
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПроизводителей.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаПроизводителей.Name КАК Name,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.Производители) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеПроизводители
	               |ИЗ
	               |	ВТ_ТаблицаПроизводителей КАК ВТ_ТаблицаПроизводителей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаПроизводителей.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.Производители"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПроизводителей.IntegrationID,
	               |	ВТ_ТаблицаПроизводителей.Name,
	               |	Производители.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаПроизводителей КАК ВТ_ТаблицаПроизводителей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Производители КАК Производители
	               |		ПО ВТ_ТаблицаПроизводителей.Name = Производители.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеПроизводители.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеПроизводители.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПроизводителиСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПроизводители КАК ВТ_ВсеСопоставленныеПроизводители
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеПроизводители.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеПроизводители.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсеСопоставленныеПроизводители.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПроизводители
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПроизводители КАК ВТ_ВсеСопоставленныеПроизводители
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПроизводителиСПриоритетом КАК ВТ_СопоставленныеПроизводителиСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеПроизводители.IntegrationID = ВТ_СопоставленныеПроизводителиСПриоритетом.IntegrationID
	               |			И ВТ_ВсеСопоставленныеПроизводители.Приоритет = ВТ_СопоставленныеПроизводителиСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПроизводителей.ID КАК ID,
	               |	ВТ_ТаблицаПроизводителей.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаПроизводителей.Name КАК Name,
	               |	ЕСТЬNULL(ВТ_СопоставленныеПроизводители.Объект, ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеПроизводители.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ТаблицаПроизводителей КАК ВТ_ТаблицаПроизводителей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПроизводители КАК ВТ_СопоставленныеПроизводители
	               |		ПО ВТ_ТаблицаПроизводителей.IntegrationID = ВТ_СопоставленныеПроизводители.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаПроизводителей", Производители);
	ТаблицаПроизводителей = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDПроизводителейВДиспетчере(Узел, ТаблицаСоответствияВебСервисов)
	ДополнительноеОписание = НСтр("ru = 'при получении изготовителей для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Производители = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentFirmList", "Производители", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
	
	Если Не Производители.Количество() = 0 Тогда
	    Производители.Колонки.Добавить("isUseId", Новый ОписаниеТипов("Булево"));
		Производители.ЗаполнитьЗначения(Истина, "isUseId");
		
		ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у изготовителей В АИС Диспетчере'");
		ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentFirmModelList", ТаблицаСоответствияВебСервисов, Производители, ДополнительноеОписание);
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Контрагенты

Функция ЗагрузитьКонтрагентов(ТаблицаКонтрагентов, Узел, ТаблицаСоответствияВебСервисов)
	ЗаполнитьIntegrationIDКонтрагентовВДиспетчере(Узел, ТаблицаСоответствияВебСервисов);
	
#Область Поставщики
	ДополнительноеОписание = НСтр("ru = 'при получении поставщиков'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Контрагенты = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetServiceOrganizationList", "Контрагенты", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти

	Если Контрагенты.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаКонтрагентов.ID КАК ID,
	               |	ИсходнаяТаблицаКонтрагентов.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаКонтрагентов.Name КАК Name,
	               |	ИсходнаяТаблицаКонтрагентов.Description КАК Description
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаКонтрагентов
	               |ИЗ
	               |	&ТаблицаКонтрагентов КАК ИсходнаяТаблицаКонтрагентов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИсходнаяТаблицаКонтрагентов.IntegrationID КАК IntegrationID,
	               |	ВТ_ИсходнаяТаблицаКонтрагентов.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_ТаблицаКонтрагентов
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаКонтрагентов КАК ВТ_ИсходнаяТаблицаКонтрагентов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаКонтрагентов.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаКонтрагентов.Name КАК Name,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.Контрагенты) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеКонтрагенты
	               |ИЗ
	               |	ВТ_ТаблицаКонтрагентов КАК ВТ_ТаблицаКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаКонтрагентов.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.Контрагенты"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаКонтрагентов.IntegrationID,
	               |	ВТ_ТаблицаКонтрагентов.Name,
	               |	Контрагенты.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаКонтрагентов КАК ВТ_ТаблицаКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ВТ_ТаблицаКонтрагентов.Name = Контрагенты.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеКонтрагенты.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеКонтрагенты.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеКонтрагентыСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеКонтрагенты КАК ВТ_ВсеСопоставленныеКонтрагенты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеКонтрагенты.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеКонтрагенты.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсеСопоставленныеКонтрагенты.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеКонтрагенты
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеКонтрагенты КАК ВТ_ВсеСопоставленныеКонтрагенты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеКонтрагентыСПриоритетом КАК ВТ_СопоставленныеКонтрагентыСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеКонтрагенты.IntegrationID = ВТ_СопоставленныеКонтрагентыСПриоритетом.IntegrationID
	               |			И ВТ_ВсеСопоставленныеКонтрагенты.Приоритет = ВТ_СопоставленныеКонтрагентыСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИсходнаяТаблицаКонтрагентов.ID КАК ID,
	               |	ВТ_ИсходнаяТаблицаКонтрагентов.IntegrationID КАК IntegrationID,
	               |	ВТ_ИсходнаяТаблицаКонтрагентов.Name КАК Name,
	               |	ВТ_ИсходнаяТаблицаКонтрагентов.Description КАК Description,
	               |	ЕСТЬNULL(ВТ_СопоставленныеКонтрагенты.Объект, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеКонтрагенты.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаКонтрагентов КАК ВТ_ИсходнаяТаблицаКонтрагентов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеКонтрагенты КАК ВТ_СопоставленныеКонтрагенты
	               |		ПО ВТ_ИсходнаяТаблицаКонтрагентов.IntegrationID = ВТ_СопоставленныеКонтрагенты.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов", Контрагенты);
	ТаблицаКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDКонтрагентовВДиспетчере(Узел, ТаблицаСоответствияВебСервисов)
#Область Поставщики
	ДополнительноеОписание = НСтр("ru = 'при получении поставщиков для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Поставщики = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetServiceOrganizationList", "Поставщики", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
	
	Если Поставщики.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Поставщики.Колонки.Добавить("isUseId", Новый ОписаниеТипов("Булево"));
	Поставщики.ЗаполнитьЗначения(Истина, "isUseId");
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у поставщиков В АИС Диспетчере'");
	ОтправитьДанныеВАИСДиспетчер(Узел, "SendServiceOrganizationModelList", ТаблицаСоответствияВебСервисов, Поставщики, ДополнительноеОписание);
#КонецОбласти
КонецФункции

#КонецОбласти

#Область ОбъектыРемонта

Функция ЗагрузитьОбъектыРемонта(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов)
	ЗаполнитьIntegrationIDОбъектовРемонтаВДиспетчере(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов);
	ЗаполнитьIntegrationIDСтанковВДиспетчере(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов);
	
#Область ОбъектыРемонта
	ДополнительноеОписание = НСтр("ru = 'при получении ОР'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоляДатыСтрокой = "dtProducer,dtInput,dtGuarantee";
	ОбъектыРемонта = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentList", "ОбъектыРемонта", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка,, ПоляДатыСтрокой);
	
	Если ОбъектыРемонта.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
	Для каждого СтрокаОР Из ОбъектыРемонта Цикл
		Если ЗначениеЗаполнено(СтрокаОР.ProductSite) Тогда
		    СтрокаОР.Местонахождение = "Производственная площадка: " + СтрокаОР.ProductSite;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОР.ProductBuildingNumber) Тогда
		    СтрокаОР.Местонахождение = СтрокаОР.Местонахождение + ?(ЗначениеЗаполнено(СтрокаОР.ProductSite), ", номер ", "Номер ") + "производственного корпуса: " + СтрокаОР.ProductBuildingNumber;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектыРемонта.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаПодразделений.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПодразделений.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_Подразделения
	               |ИЗ
	               |	&ТаблицаПодразделений КАК ИсходнаяТаблицаПодразделений
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаТиповыхОР.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаТиповыхОР.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_ТиповыеОР
	               |ИЗ
	               |	&ТиповыеОР КАК ИсходнаяТаблицаТиповыхОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаНаправленийОР.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаНаправленийОР.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_НаправленияОР
	               |ИЗ
	               |	&НаправленияОР КАК ИсходнаяТаблицаНаправленийОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаПроизводителей.ID КАК ID,
	               |	ИсходнаяТаблицаПроизводителей.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПроизводителей.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_Производители
	               |ИЗ
	               |	&Производители КАК ИсходнаяТаблицаПроизводителей
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаКонтрагентов.ID КАК ID,
	               |	ИсходнаяТаблицаКонтрагентов.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаКонтрагентов.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_Контрагенты
	               |ИЗ
	               |	&Контрагенты КАК ИсходнаяТаблицаКонтрагентов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаОР.Name КАК Name,
	               |	ИсходнаяТаблицаОР.DeptID КАК DeptIntegrationID,
	               |	ИсходнаяТаблицаОР.kEquipmentTypeIntegrationID КАК EquipmentTypeIntegrationID,
	               |	ИсходнаяТаблицаОР.kEquipmentGroupIntegrationID КАК EquipmentGroupIntegrationID,
	               |	ИсходнаяТаблицаОР.kEquipmentFirmIntegrationID КАК EquipmentFirmIntegrationID,
	               |	ИсходнаяТаблицаОР.Code КАК Code,
	               |	ИсходнаяТаблицаОР.InventoryNumber КАК InventoryNumber,
	               |	ИсходнаяТаблицаОР.FactoryNumber КАК FactoryNumber,
	               |	ИсходнаяТаблицаОР.dtProducer КАК dtProducer,
	               |	ИсходнаяТаблицаОР.dtInput КАК dtInput,
	               |	ИсходнаяТаблицаОР.ProviderID КАК ProviderID,
	               |	ИсходнаяТаблицаОР.Местонахождение КАК Местонахождение,
	               |	ИсходнаяТаблицаОР.dtGuarantee КАК dtGuarantee
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ИсходнаяТаблицаОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	DeptIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ИсходнаяТаблицаОР.Name КАК Name,
	               |	ВТ_ИсходнаяТаблицаОР.DeptIntegrationID КАК DeptIntegrationID,
	               |	ВТ_ИсходнаяТаблицаОР.EquipmentTypeIntegrationID КАК EquipmentTypeIntegrationID,
	               |	ВТ_ИсходнаяТаблицаОР.EquipmentGroupIntegrationID КАК EquipmentGroupIntegrationID,
	               |	ВТ_ИсходнаяТаблицаОР.EquipmentFirmIntegrationID КАК EquipmentFirmIntegrationID,
	               |	ВТ_ИсходнаяТаблицаОР.Code КАК Code,
	               |	ВТ_ИсходнаяТаблицаОР.InventoryNumber КАК InventoryNumber,
	               |	ВТ_ИсходнаяТаблицаОР.FactoryNumber КАК FactoryNumber,
	               |	ВТ_ИсходнаяТаблицаОР.dtProducer КАК dtProducer,
	               |	ВТ_ИсходнаяТаблицаОР.dtInput КАК dtInput,
	               |	ВТ_ИсходнаяТаблицаОР.Местонахождение КАК Местонахождение,
	               |	ВТ_ИсходнаяТаблицаОР.dtGuarantee КАК dtGuarantee,
	               |	ВТ_ТиповыеОР.Name КАК EquipmentTypeName,
	               |	ВТ_НаправленияОР.Name КАК EquipmentGroupName,
	               |	ВТ_Производители.Name КАК EquipmentFirmName,
	               |	ВТ_Контрагенты.Name КАК ProviderName,
	               |	ВТ_Контрагенты.IntegrationID КАК ProviderIntegrationID,
	               |	ВТ_Подразделения.Name КАК DeptName
	               |ПОМЕСТИТЬ ВТ_ОбъектыРемонта
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаОР КАК ВТ_ИсходнаяТаблицаОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	               |		ПО ВТ_ИсходнаяТаблицаОР.DeptIntegrationID = ВТ_Подразделения.IntegrationID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТиповыеОР КАК ВТ_ТиповыеОР
	               |		ПО ВТ_ИсходнаяТаблицаОР.EquipmentTypeIntegrationID = ВТ_ТиповыеОР.IntegrationID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаправленияОР КАК ВТ_НаправленияОР
	               |		ПО ВТ_ИсходнаяТаблицаОР.EquipmentGroupIntegrationID = ВТ_НаправленияОР.IntegrationID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Производители КАК ВТ_Производители
	               |		ПО ВТ_ИсходнаяТаблицаОР.EquipmentFirmIntegrationID = ВТ_Производители.IntegrationID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	               |		ПО ВТ_ИсходнаяТаблицаОР.ProviderID = ВТ_Контрагенты.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ОбъектыРемонта.IntegrationID КАК IntegrationID,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеОР
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ОбъектыРемонта.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ОбъектыРемонта"")
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ОбъектыРемонта.IntegrationID КАК IntegrationID,
	               |	торо_ОбъектыРемонта.Ссылка КАК Объект,
	               |	2 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеНайденныеОР
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ВТ_ОбъектыРемонта.InventoryNumber = торо_ОбъектыРемонта.ИнвентарныйНомер
	               |			И (НЕ ВТ_ОбъектыРемонта.InventoryNumber = """")
	               |			И (НЕ торо_ОбъектыРемонта.ИнвентарныйНомер = """")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОбъектыРемонта.IntegrationID,
	               |	торо_ОбъектыРемонта.Ссылка,
	               |	3
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ВТ_ОбъектыРемонта.FactoryNumber = торо_ОбъектыРемонта.ЗаводскойНомер
	               |			И (НЕ ВТ_ОбъектыРемонта.FactoryNumber = """")
	               |			И (НЕ торо_ОбъектыРемонта.ТехНомер = """")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОбъектыРемонта.IntegrationID,
	               |	торо_ОбъектыРемонта.Ссылка,
	               |	4
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ВТ_ОбъектыРемонта.FactoryNumber = торо_ОбъектыРемонта.ТехНомер
	               |			И (НЕ ВТ_ОбъектыРемонта.FactoryNumber = """")
	               |			И (НЕ торо_ОбъектыРемонта.ЗаводскойНомер = """")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОбъектыРемонта.IntegrationID,
	               |	торо_ОбъектыРемонта.Ссылка,
	               |	5
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ВТ_ОбъектыРемонта.Code = торо_ОбъектыРемонта.Код
	               |			И (НЕ ВТ_ОбъектыРемонта.Code = """")
	               |			И (НЕ торо_ОбъектыРемонта.Код = """")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОбъектыРемонта.IntegrationID,
	               |	торо_ОбъектыРемонта.Ссылка,
	               |	6
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ВТ_ОбъектыРемонта.Name = торо_ОбъектыРемонта.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеНайденныеОР.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсеНайденныеОР.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_НайденныеОРСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеНайденныеОР КАК ВТ_ВсеНайденныеОР
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеНайденныеОР.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеНайденныеОР.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсеНайденныеОР.Объект) КАК Объект
	               |ПОМЕСТИТЬ ВТ_НайденныеОР
	               |ИЗ
	               |	ВТ_ВсеНайденныеОР КАК ВТ_ВсеНайденныеОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НайденныеОРСПриоритетом КАК ВТ_НайденныеОРСПриоритетом
	               |		ПО ВТ_ВсеНайденныеОР.IntegrationID = ВТ_НайденныеОРСПриоритетом.IntegrationID
	               |			И ВТ_ВсеНайденныеОР.Приоритет = ВТ_НайденныеОРСПриоритетом.Приоритет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеНайденныеОР.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ОбъектыРемонта.IntegrationID КАК IntegrationID,
	               |	ВТ_ОбъектыРемонта.Name КАК Name,
	               |	ВТ_ОбъектыРемонта.DeptIntegrationID КАК DeptIntegrationID,
	               |	ВТ_ОбъектыРемонта.EquipmentTypeIntegrationID КАК EquipmentTypeIntegrationID,
	               |	ВТ_ОбъектыРемонта.EquipmentGroupIntegrationID КАК EquipmentGroupIntegrationID,
	               |	ВТ_ОбъектыРемонта.EquipmentFirmIntegrationID КАК EquipmentFirmIntegrationID,
	               |	ВТ_ОбъектыРемонта.Code КАК Code,
	               |	ВТ_ОбъектыРемонта.InventoryNumber КАК InventoryNumber,
	               |	ВТ_ОбъектыРемонта.FactoryNumber КАК FactoryNumber,
	               |	ВТ_ОбъектыРемонта.dtProducer КАК dtProducer,
	               |	ВТ_ОбъектыРемонта.dtInput КАК dtInput,
	               |	ВТ_ОбъектыРемонта.Местонахождение КАК Местонахождение,
	               |	ВТ_ОбъектыРемонта.dtGuarantee КАК dtGuarantee,
	               |	ВТ_ОбъектыРемонта.EquipmentTypeName КАК EquipmentTypeName,
	               |	ВТ_ОбъектыРемонта.EquipmentGroupName КАК EquipmentGroupName,
	               |	ВТ_ОбъектыРемонта.EquipmentFirmName КАК EquipmentFirmName,
	               |	ВТ_ОбъектыРемонта.ProviderName КАК ProviderName,
	               |	ВТ_ОбъектыРемонта.ProviderIntegrationID КАК ProviderIntegrationID,
	               |	ВТ_ОбъектыРемонта.DeptName КАК DeptName,
	               |	ЕСТЬNULL(ВТ_СопоставленныеОР.Объект, ЕСТЬNULL(ВТ_НайденныеОР.Объект, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка))) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеОР.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеОР КАК ВТ_СопоставленныеОР
	               |		ПО ВТ_ОбъектыРемонта.IntegrationID = ВТ_СопоставленныеОР.IntegrationID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НайденныеОР КАК ВТ_НайденныеОР
	               |		ПО ВТ_ОбъектыРемонта.IntegrationID = ВТ_НайденныеОР.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаОР", ОбъектыРемонта);
	Запрос.УстановитьПараметр("ТаблицаПодразделений", СтруктураТаблиц.Подразделения);
	Запрос.УстановитьПараметр("ТиповыеОР", СтруктураТаблиц.ТиповыеОР);
	Запрос.УстановитьПараметр("НаправленияОР", СтруктураТаблиц.НаправленияОР);
	Запрос.УстановитьПараметр("Производители", СтруктураТаблиц.Производители);
	Запрос.УстановитьПараметр("Контрагенты", СтруктураТаблиц.Контрагенты);
	СтруктураТаблиц.ОбъектыРемонта = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDОбъектовРемонтаВДиспетчере(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов)
#Область Станки
	ДополнительноеОписание = НСтр("ru = 'при получении станков для заполнения IntegrationID оборудования в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Станки = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineList", "Станки", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти

#Область ОбъектыРемонта
	ДополнительноеОписание = НСтр("ru = 'при получении ОР для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ОбъектыРемонта = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentList", "ОбъектыРемонтаПолная", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
	
	Если ОбъектыРемонта.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
#Область Запрос
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОбъектыРемонта.ID КАК ID,
	               |	ОбъектыРемонта.IntegrationID КАК IntegrationID,
	               |	ОбъектыРемонта.Name КАК Name,
	               |	ОбъектыРемонта.ShortName КАК ShortName,
	               |	ОбъектыРемонта.Code КАК Code,
	               |	ОбъектыРемонта.Description КАК Description,
	               |	ОбъектыРемонта.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ОбъектыРемонта.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID,
	               |	ОбъектыРемонта.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID,
	               |	ОбъектыРемонта.kEquipmentFirmIntegrationID КАК kEquipmentFirmIntegrationID,
	               |	ОбъектыРемонта.DeptID КАК DeptIntegrationID,
	               |	ОбъектыРемонта.InventoryNumber КАК InventoryNumber,
	               |	ОбъектыРемонта.FactoryNumber КАК FactoryNumber,
	               |	ОбъектыРемонта.dtProducer КАК dtProducer,
	               |	ОбъектыРемонта.dtInput КАК dtInput,
	               |	ОбъектыРемонта.ProviderID КАК ProviderID,
	               |	ОбъектыРемонта.dtGuarantee КАК dtGuarantee,
	               |	ОбъектыРемонта.Weight КАК Weight,
	               |	ОбъектыРемонта.Power КАК Power,
	               |	ОбъектыРемонта.ServiceOrganizationID КАК ServiceOrganizationID,
	               |	ОбъектыРемонта.Cost КАК Cost,
	               |	ОбъектыРемонта.PeriodAmortization КАК PeriodAmortization,
	               |	ОбъектыРемонта.HourlyCost КАК HourlyCost,
	               |	ОбъектыРемонта.IsUseMonitoring КАК IsUseMonitoring,
	               |	ОбъектыРемонта.ProductSite КАК ProductSite,
	               |	ОбъектыРемонта.ProductBuildingNumber КАК ProductBuildingNumber,
	               |	ОбъектыРемонта.CadastralNumberOfBuilding КАК CadastralNumberOfBuilding,
	               |	ОбъектыРемонта.CncModelId КАК CncModelId,
	               |	ОбъектыРемонта.NumberOfControlledCoordinates КАК NumberOfControlledCoordinates,
	               |	ОбъектыРемонта.PhysicalDeteriorationPercent КАК PhysicalDeteriorationPercent,
	               |	ОбъектыРемонта.Amortization КАК Amortization,
	               |	ОбъектыРемонта.FinancialProjectId КАК FinancialProjectId,
	               |	ОбъектыРемонта.TechnologicalGroupOfProductionTypeID КАК TechnologicalGroupOfProductionTypeID,
	               |	ОбъектыРемонта.machineSchedule КАК machineSchedule
	               |ПОМЕСТИТЬ ВТ_ОбъектыРемонта
	               |ИЗ
	               |	&ОбъектыРемонта КАК ОбъектыРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ProviderID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Поставщики.ID КАК ID,
	               |	Поставщики.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_Поставщики
	               |ИЗ
	               |	&Поставщики КАК Поставщики
				   |ГДЕ
				   |	Поставщики.ТипВАИСДиспетчере = ""Поставщик""
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Станки.kEquipmentID КАК kEquipmentID,
	               |	Станки.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_Станки
	               |ИЗ
	               |	&Станки КАК Станки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ОбъектыРемонта.ID КАК ID,
	               |	ВТ_ОбъектыРемонта.IntegrationID КАК IntegrationID,
	               |	ВТ_ОбъектыРемонта.Name КАК Name,
	               |	ВТ_ОбъектыРемонта.ShortName КАК ShortName,
	               |	ВТ_ОбъектыРемонта.Code КАК Code,
	               |	ВТ_ОбъектыРемонта.Description КАК Description,
	               |	ВТ_ОбъектыРемонта.kEquipmentCategoryIntegrationID КАК kEquipmentCategoryIntegrationID,
	               |	ВТ_ОбъектыРемонта.kEquipmentTypeIntegrationID КАК kEquipmentTypeIntegrationID,
	               |	ВТ_ОбъектыРемонта.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID,
	               |	ВТ_ОбъектыРемонта.kEquipmentFirmIntegrationID КАК kEquipmentFirmIntegrationID,
	               |	ВТ_ОбъектыРемонта.DeptIntegrationID КАК DeptIntegrationID,
	               |	ВТ_ОбъектыРемонта.InventoryNumber КАК InventoryNumber,
	               |	ВТ_ОбъектыРемонта.FactoryNumber КАК FactoryNumber,
	               |	ВТ_ОбъектыРемонта.dtProducer КАК dtProducer,
	               |	ВТ_ОбъектыРемонта.dtInput КАК dtInput,
	               |	ВТ_ОбъектыРемонта.dtGuarantee КАК dtGuarantee,
	               |	ВТ_ОбъектыРемонта.Weight КАК Weight,
	               |	ВТ_ОбъектыРемонта.Power КАК Power,
	               |	ЕСТЬNULL(ServiceOrganization.IntegrationID, """") КАК ServiceOrganizationIntegrationId,
	               |	ЕСТЬNULL(ВТ_Поставщики.IntegrationID, """") КАК ProviderIntegrationID,
	               |	ВЫБОР
	               |		КОГДА ВТ_ОбъектыРемонта.IsUseMonitoring = 1
	               |			ТОГДА ЕСТЬNULL(ВТ_Станки.IntegrationID, """")
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК MachineIntegrationID,
	               |	ВТ_ОбъектыРемонта.Cost КАК Cost,
	               |	ВТ_ОбъектыРемонта.PeriodAmortization КАК PeriodAmortization,
	               |	ВТ_ОбъектыРемонта.HourlyCost КАК HourlyCost,
	               |	ВТ_ОбъектыРемонта.IsUseMonitoring КАК IsUseMonitoring,
	               |	ВТ_ОбъектыРемонта.ProductSite КАК ProductSite,
	               |	ВТ_ОбъектыРемонта.ProductBuildingNumber КАК ProductBuildingNumber,
	               |	ВТ_ОбъектыРемонта.CadastralNumberOfBuilding КАК CadastralNumberOfBuilding,
	               |	ВТ_ОбъектыРемонта.CncModelId КАК CncModelId,
	               |	ВТ_ОбъектыРемонта.NumberOfControlledCoordinates КАК NumberOfControlledCoordinates,
	               |	ВТ_ОбъектыРемонта.PhysicalDeteriorationPercent КАК PhysicalDeteriorationPercent,
	               |	ВТ_ОбъектыРемонта.Amortization КАК Amortization,
	               |	ВТ_ОбъектыРемонта.FinancialProjectId КАК FinancialProjectId,
	               |	ВТ_ОбъектыРемонта.TechnologicalGroupOfProductionTypeID КАК TechnologicalGroupOfProductionTypeID,
	               |	ВТ_ОбъектыРемонта.machineSchedule КАК machineSchedule,
				   |	ИСТИНА КАК IsUseID
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Станки КАК ВТ_Станки
	               |		ПО ВТ_ОбъектыРемонта.ID = ВТ_Станки.kEquipmentID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ВТ_Поставщики
	               |		ПО ВТ_ОбъектыРемонта.ProviderID = ВТ_Поставщики.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ServiceOrganization
	               |		ПО ВТ_ОбъектыРемонта.ServiceOrganizationID = ServiceOrganization.ID";
#КонецОбласти
	Запрос.УстановитьПараметр("ОбъектыРемонта", ОбъектыРемонта);
	Запрос.УстановитьПараметр("Поставщики", СтруктураТаблиц.Контрагенты);
	Запрос.УстановитьПараметр("Станки", Станки);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у оборудования В АИС Диспетчере'");
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendEquipmentModelList", ТаблицаСоответствияВебСервисов, Результат, ДополнительноеОписание);
КонецФункции

Функция ЗаполнитьIntegrationIDСтанковВДиспетчере(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов)
#Область Станки
	ДополнительноеОписание = НСтр("ru = 'при получении станков для заполнения IntegrationID оборудования в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Станки = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineList", "СтанкиПолная", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
#КонецОбласти

#Область Запрос
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Станки.ID КАК ID,
				   |	Станки.IntegrationID КАК IntegrationID,
	               |	Станки.Name КАК Name,
	               |	Станки.ShortName КАК ShortName,
	               |	Станки.DeptID КАК DeptID,
	               |	Станки.Description КАК Description,
	               |	Станки.MachineNum КАК MachineNum
	               |ПОМЕСТИТЬ ВТ_Станки
	               |ИЗ
	               |	&Станки КАК Станки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	DeptID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПодразделений.ID КАК ID,
	               |	ТаблицаПодразделений.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_Подразделения
	               |ИЗ
	               |	&ТаблицаПодразделений КАК ТаблицаПодразделений
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   
	               |	ВТ_Станки.ID КАК ID,
				   |	ВТ_Станки.IntegrationID КАК IntegrationID,
	               |	ВТ_Станки.Name КАК Name,
	               |	ВТ_Станки.ShortName КАК ShortName,
	               |	ВТ_Подразделения.IntegrationID КАК DeptIntegrationID,
	               |	ВТ_Станки.Description КАК Description,
	               |	ВТ_Станки.MachineNum КАК Num,
	               |	ИСТИНА КАК IsUseID
	               |ИЗ
	               |	ВТ_Станки КАК ВТ_Станки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	               |		ПО ВТ_Станки.DeptID = ВТ_Подразделения.ID";
#КонецОбласти
	Запрос.УстановитьПараметр("Станки", Станки);
	Запрос.УстановитьПараметр("ТаблицаПодразделений", СтруктураТаблиц.Подразделения);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у станков В АИС Диспетчере'");
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendMachineModelList", ТаблицаСоответствияВебСервисов, Результат, ДополнительноеОписание);
КонецФункции

#КонецОбласти

#Область ПаспортныеХарактеристикиОР

Функция ЗагрузитьПаспортныеХарактеристикиОР(ТаблицаПаспортныхХарактеристикОР, Узел, ТаблицаСоответствияВебСервисов)
	ЗаполнитьIntegrationIDПаспортныхХарактеристикВДиспетчере(Узел, ТаблицаСоответствияВебСервисов);
	
#Область ЗагрузкаПаспортныхХарактеристикОР
	ДополнительноеОписание = НСтр("ru = 'при получении паспортных характеристик'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПаспортныеХарактеристикиОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetTechnologyParamList", "ПаспортныеХарактеристикиОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если ПаспортныеХарактеристикиОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаПаспортныхХарактеристикОР.ID КАК ID,
	               |	ИсходнаяТаблицаПаспортныхХарактеристикОР.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПаспортныхХарактеристикОР.Name КАК Name,
	               |	ИсходнаяТаблицаПаспортныхХарактеристикОР.Description КАК Description
	               |ПОМЕСТИТЬ ВТ_ТаблицаПаспортныхХарактеристикОР
	               |ИЗ
	               |	&ТаблицаПаспортныхХарактеристикОР КАК ИсходнаяТаблицаПаспортныхХарактеристикОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID КАК IntegrationID,
	               |	КОЛИЧЕСТВО(ДополнительныеРеквизитыИСведения.Ссылка) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ПодходящиеДополнительныеРеквизитыИСведения
	               |ИЗ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР КАК ВТ_ТаблицаПаспортныхХарактеристикОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ПО ВТ_ТаблицаПаспортныхХарактеристикОР.Name = ДополнительныеРеквизитыИСведения.Наименование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(ДополнительныеРеквизитыИСведения.Ссылка) = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID КАК IntegrationID,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР
	               |ИЗ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР КАК ВТ_ТаблицаПаспортныхХарактеристикОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID,
	               |	ДополнительныеРеквизитыИСведения.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР КАК ВТ_ТаблицаПаспортныхХарактеристикОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ПО ВТ_ТаблицаПаспортныхХарактеристикОР.Name = ДополнительныеРеквизитыИСведения.Наименование
	               |ГДЕ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID В
	               |			(ВЫБРАТЬ
	               |				ВТ_ПодходящиеДополнительныеРеквизитыИСведения.IntegrationID КАК IntegrationID
	               |			ИЗ
	               |				ВТ_ПодходящиеДополнительныеРеквизитыИСведения КАК ВТ_ПодходящиеДополнительныеРеквизитыИСведения)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID,
	               |	торо_ГруппыХарактеристикОборудования.Ссылка,
	               |	3
	               |ИЗ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР КАК ВТ_ТаблицаПаспортныхХарактеристикОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ГруппыХарактеристикОборудования КАК торо_ГруппыХарактеристикОборудования
	               |		ПО ВТ_ТаблицаПаспортныхХарактеристикОР.Name = торо_ГруппыХарактеристикОборудования.Наименование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID,
	               |	торо_ГруппыХарактеристикОборудованияПараметрыАвтозаполнения.Ссылка,
	               |	4
	               |ИЗ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР КАК ВТ_ТаблицаПаспортныхХарактеристикОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ГруппыХарактеристикОборудования.ПараметрыАвтозаполнения КАК торо_ГруппыХарактеристикОборудованияПараметрыАвтозаполнения
	               |		ПО ВТ_ТаблицаПаспортныхХарактеристикОР.Name = торо_ГруппыХарактеристикОборудованияПараметрыАвтозаполнения.НаименованиеХарактеристики
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПаспортныеХарактеристикиОРСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР КАК ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПаспортныеХарактеристикиОР
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР КАК ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПаспортныеХарактеристикиОРСПриоритетом КАК ВТ_СопоставленныеПаспортныеХарактеристикиОРСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР.IntegrationID = ВТ_СопоставленныеПаспортныеХарактеристикиОРСПриоритетом.IntegrationID
	               |			И ВТ_ВсеСопоставленныеПаспортныеХарактеристикиОР.Приоритет = ВТ_СопоставленныеПаспортныеХарактеристикиОРСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.ID КАК ID,
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.Name КАК Name,
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.Description КАК Description,
	               |	ЕСТЬNULL(ВТ_СопоставленныеПаспортныеХарактеристикиОР.Объект, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеПаспортныеХарактеристикиОР.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР КАК ВТ_ТаблицаПаспортныхХарактеристикОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПаспортныеХарактеристикиОР КАК ВТ_СопоставленныеПаспортныеХарактеристикиОР
	               |		ПО ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID = ВТ_СопоставленныеПаспортныеХарактеристикиОР.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаПаспортныхХарактеристикОР", ПаспортныеХарактеристикиОР);
	ТаблицаПаспортныхХарактеристикОР = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDПаспортныхХарактеристикВДиспетчере(Узел, ТаблицаСоответствияВебСервисов)
	ДополнительноеОписание = НСтр("ru = 'при получении паспортных характеристик для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПаспортныеХарактеристикиОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetTechnologyParamList", "ПаспортныеХарактеристикиОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
	
	Если ПаспортныеХарактеристикиОР.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПаспортныеХарактеристикиОР.Колонки.Добавить("isUseId", Новый ОписаниеТипов("Булево"));
	ПаспортныеХарактеристикиОР.ЗаполнитьЗначения(Истина, "isUseId");
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у паспортных характеристик ОР В АИС Диспетчере'");
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendTechnologyParamModelList", ТаблицаСоответствияВебСервисов, ПаспортныеХарактеристикиОР, ДополнительноеОписание);
КонецФункции

#КонецОбласти

#Область ПоказателиЭксплуатации

Функция ЗагрузитьПоказателиЭксплуатации(ТаблицаПоказателейЭксплуатации, Узел, ТаблицаСоответствияВебСервисов)
#Область ПоказателиЭксплуатации
	ДополнительноеОписание = НСтр("ru = 'при получении показателей эксплуатации'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Или Не СтрокаДанных.machineParamTypeID = 3 Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоказателиЭксплуатации = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineParamList", "ПоказателиЭксплуатации", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если ПоказателиЭксплуатации.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.ID КАК ID,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.Name КАК Name,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.MeasureUnit КАК MeasureUnit,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.IsCounter КАК IsCounter
	               |ПОМЕСТИТЬ ВТ_ТаблицаПоказателейЭксплуатации
	               |ИЗ
	               |	&ТаблицаПараметров КАК ИсходнаяТаблицаПоказателейЭксплуатации
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MeasureUnit
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit КАК MeasureUnit
	               |ПОМЕСТИТЬ ВТ_ЕдиницыИзмеренийДиспетчер
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |ГДЕ
	               |	НЕ ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit = """"
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MeasureUnit
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ЕдиницыИзмеренийДиспетчер.MeasureUnit КАК Наименование,
	               |	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеЕдиницыИзмерения
	               |ИЗ
	               |	ВТ_ЕдиницыИзмеренийДиспетчер КАК ВТ_ЕдиницыИзмеренийДиспетчер
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |		ПО ВТ_ЕдиницыИзмеренийДиспетчер.MeasureUnit = ЕдиницыИзмерения.Наименование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ЕдиницыИзмеренийДиспетчер.MeasureUnit,
	               |	ЕдиницыИзмерения.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ЕдиницыИзмеренийДиспетчер КАК ВТ_ЕдиницыИзмеренийДиспетчер
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |		ПО ВТ_ЕдиницыИзмеренийДиспетчер.MeasureUnit = ЕдиницыИзмерения.НаименованиеПолное
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ЕдиницыИзмеренийДиспетчер.MeasureUnit,
	               |	ЕдиницыИзмерения.Ссылка,
	               |	3
	               |ИЗ
	               |	ВТ_ЕдиницыИзмеренийДиспетчер КАК ВТ_ЕдиницыИзмеренийДиспетчер
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |		ПО ВТ_ЕдиницыИзмеренийДиспетчер.MeasureUnit = ЕдиницыИзмерения.МеждународноеСокращение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ВсеСопоставленныеЕдиницыИзмерения.Наименование КАК Наименование,
	               |	ВТ_ВсеСопоставленныеЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеЕдиницыИзмерения.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеЕдиницыИзмерения
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеЕдиницыИзмерения КАК ВТ_ВсеСопоставленныеЕдиницыИзмерения
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеЕдиницыИзмерения.Наименование,
	               |	ВТ_ВсеСопоставленныеЕдиницыИзмерения.ЕдиницаИзмерения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_СопоставленныеЕдиницыИзмерения.Наименование КАК Наименование,
	               |	ВТ_СопоставленныеЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВЫБОР
	               |		КОГДА ПараметрыВыработкиОС.ЕдиницаИзмерения ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПараметрНаработки
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеЕдиницыИзмерений
	               |ИЗ
	               |	ВТ_СопоставленныеЕдиницыИзмерения КАК ВТ_СопоставленныеЕдиницыИзмерения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыВыработкиОС КАК ПараметрыВыработкиОС
	               |		ПО ВТ_СопоставленныеЕдиницыИзмерения.ЕдиницаИзмерения = ПараметрыВыработкиОС.ЕдиницаИзмерения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.ID КАК ID,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеПоказателиЭксплуатации
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаПоказателейЭксплуатации.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.ПараметрыВыработкиОС""
	               |				ИЛИ торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.ID,
	               |	ПараметрыВыработкиОС.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПараметрыВыработкиОС КАК ПараметрыВыработкиОС
	               |		ПО ВТ_ТаблицаПоказателейЭксплуатации.Name = ПараметрыВыработкиОС.Наименование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.ID,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Ссылка,
	               |	3
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	               |		ПО ВТ_ТаблицаПоказателейЭксплуатации.Name = торо_ИзмеряемыеПоказателиОбъектовРемонта.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеПоказателиЭксплуатации.ID КАК ID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеПоказателиЭксплуатации.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПоказателиЭксплуатацииСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПоказателиЭксплуатации КАК ВТ_ВсеСопоставленныеПоказателиЭксплуатации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеПоказателиЭксплуатации.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеПоказателиЭксплуатации.ID КАК ID,
	               |	ВТ_ВсеСопоставленныеПоказателиЭксплуатации.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПоказателиЭксплуатации
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПоказателиЭксплуатации КАК ВТ_ВсеСопоставленныеПоказателиЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПоказателиЭксплуатацииСПриоритетом КАК ВТ_СопоставленныеПоказателиЭксплуатацииСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеПоказателиЭксплуатации.ID = ВТ_СопоставленныеПоказателиЭксплуатацииСПриоритетом.ID
	               |			И ВТ_ВсеСопоставленныеПоказателиЭксплуатации.Приоритет = ВТ_СопоставленныеПоказателиЭксплуатацииСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.ID КАК ID,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.Name КАК Name,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit КАК MeasureUnit,
	               |	ЕСТЬNULL(ВТ_ПодготовленныеЕдиницыИзмерений.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	               |	ЕСТЬNULL(ВТ_СопоставленныеПоказателиЭксплуатации.Объект, ЗНАЧЕНИЕ(ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеПоказателиЭксплуатации.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен,
	               |	ВЫБОР
	               |		КОГДА ВТ_СопоставленныеПоказателиЭксплуатации.Объект ССЫЛКА Справочник.ПараметрыВыработкиОС
	               |			ТОГДА ""Параметр наработки""
	               |		ИНАЧЕ ""Контролируемый показатель""
	               |	КОНЕЦ КАК ТипПараметра
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПоказателиЭксплуатации КАК ВТ_СопоставленныеПоказателиЭксплуатации
	               |		ПО ВТ_ТаблицаПоказателейЭксплуатации.ID = ВТ_СопоставленныеПоказателиЭксплуатации.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодготовленныеЕдиницыИзмерений КАК ВТ_ПодготовленныеЕдиницыИзмерений
	               |		ПО ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit = ВТ_ПодготовленныеЕдиницыИзмерений.Наименование";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаПараметров", ПоказателиЭксплуатации);
	ТаблицаПоказателейЭксплуатации = Запрос.Выполнить().Выгрузить();
	ТаблицаПоказателейЭксплуатации.Свернуть("ID,IntegrationID,Name,MeasureUnit,ЕдиницаИзмерения,Объект,Сопоставлен,ТипПараметра");
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ИерархияНоменклатуры

Функция ЗагрузитьИерархиюНоменклатуры(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов, КоличествоГруппНоменклатуры)
	ЗаполнитьIntegrationIDИерархииНоменклатурыВДиспетчере(Узел, ТаблицаСоответствияВебСервисов);
	
#Область Загрузка
	ДополнительноеОписание = НСтр("ru = 'при получении иерархии номенклатуры'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ТаблицаИерархииНоменклатуры = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMaterialAndComponentGroupList", "ТаблицаИерархииНоменклатуры", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка, "Группа_");
	
	НомерСтроки = 1;
	
	Для каждого СтрокаИерархииНоменклатуры Из ТаблицаИерархииНоменклатуры Цикл
	    СтрокаИерархииНоменклатуры.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если ТаблицаИерархииНоменклатуры.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаИерархииНоменклатуры.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаИерархииНоменклатуры.Name КАК Name,
	               |	ИсходнаяТаблицаИерархииНоменклатуры.ID КАК ID,
	               |	ИсходнаяТаблицаИерархииНоменклатуры.ParentID КАК ParentID,
	               |	ИсходнаяТаблицаИерархииНоменклатуры.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТ_ТаблицаИерархииНоменклатуры
	               |ИЗ
	               |	&ТаблицаИерархииНоменклатуры КАК ИсходнаяТаблицаИерархииНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаИерархииНоменклатуры.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаИерархииНоменклатуры.Name КАК Name,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.Номенклатура) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсяСопоставленнаяИерархияНоменклатуры
	               |ИЗ
	               |	ВТ_ТаблицаИерархииНоменклатуры КАК ВТ_ТаблицаИерархииНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаИерархииНоменклатуры.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.Номенклатура"")
	               |ГДЕ
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР.ЭтоГруппа
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаИерархииНоменклатуры.IntegrationID,
	               |	ВТ_ТаблицаИерархииНоменклатуры.Name,
	               |	Номенклатура.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаИерархииНоменклатуры КАК ВТ_ТаблицаИерархииНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ВТ_ТаблицаИерархииНоменклатуры.Name = Номенклатура.Наименование
	               |			И (Номенклатура.ЭтоГруппа)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсяСопоставленнаяИерархияНоменклатуры.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсяСопоставленнаяИерархияНоменклатуры.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленнаяИерархияНоменклатурыСПриоритетом
	               |ИЗ
	               |	ВТ_ВсяСопоставленнаяИерархияНоменклатуры КАК ВТ_ВсяСопоставленнаяИерархияНоменклатуры
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсяСопоставленнаяИерархияНоменклатуры.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсяСопоставленнаяИерархияНоменклатуры.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсяСопоставленнаяИерархияНоменклатуры.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленнаяИерархияНоменклатуры
	               |ИЗ
	               |	ВТ_ВсяСопоставленнаяИерархияНоменклатуры КАК ВТ_ВсяСопоставленнаяИерархияНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленнаяИерархияНоменклатурыСПриоритетом КАК ВТ_СопоставленнаяИерархияНоменклатурыСПриоритетом
	               |		ПО ВТ_ВсяСопоставленнаяИерархияНоменклатуры.IntegrationID = ВТ_СопоставленнаяИерархияНоменклатурыСПриоритетом.IntegrationID
	               |			И ВТ_ВсяСопоставленнаяИерархияНоменклатуры.Приоритет = ВТ_СопоставленнаяИерархияНоменклатурыСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаИерархииНоменклатуры.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаИерархииНоменклатуры.Name КАК Name,
	               |	ВТ_ТаблицаИерархииНоменклатуры.ID КАК ID,
	               |	ВТ_ТаблицаИерархииНоменклатуры.ParentID КАК ParentID,
				   |	ЕСТЬNULL(ВТ_СопоставленнаяИерархияНоменклатуры.Объект, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА ВТ_СопоставленнаяИерархияНоменклатуры.Объект ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ТаблицаИерархииНоменклатуры КАК ВТ_ТаблицаИерархииНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленнаяИерархияНоменклатуры КАК ВТ_СопоставленнаяИерархияНоменклатуры
	               |		ПО ВТ_ТаблицаИерархииНоменклатуры.IntegrationID = ВТ_СопоставленнаяИерархияНоменклатуры.IntegrationID
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_ТаблицаИерархииНоменклатуры.НомерСтроки";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаИерархииНоменклатуры", ТаблицаИерархииНоменклатуры);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);

	СоответствиеРодителей = Новый Соответствие();
	ВерхнийУровеньДерева = СтруктураТаблиц.ИерархияНоменклатуры.Строки;
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(СоответствиеРодителей[ВыборкаЗапроса.ParentID]) Тогда
		    НоваяСтрока = СоответствиеРодителей[ВыборкаЗапроса.ParentID].Строки.Добавить();
		Иначе
		    НоваяСтрока = ВерхнийУровеньДерева.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапроса);
		НоваяСтрока.ИндексКартинки = 1;
		СоответствиеРодителей[ВыборкаЗапроса.ID] = НоваяСтрока;
		
		КоличествоГруппНоменклатуры = КоличествоГруппНоменклатуры + 1;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDИерархииНоменклатурыВДиспетчере(Узел, ТаблицаСоответствияВебСервисов)
	ДополнительноеОписание = НСтр("ru = 'при получении иерархии номенклатуры для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ТаблицаИерархииНоменклатуры = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMaterialAndComponentGroupList", "ТаблицаИерархииНоменклатуры", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
	
	Если ТаблицаИерархииНоменклатуры.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаИерархииНоменклатуры.Колонки.Добавить("isUseId", Новый ОписаниеТипов("Булево"));
	ТаблицаИерархииНоменклатуры.ЗаполнитьЗначения(Истина, "isUseId");
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у иерархии номенклатуры В АИС Диспетчере'");
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendMaterialAndComponentGroupModelList", ТаблицаСоответствияВебСервисов, ТаблицаИерархииНоменклатуры, ДополнительноеОписание);
КонецФункции

#КонецОбласти

#Область Номенклатура

Функция ЗагрузитьНоменклатуру(ТаблицаНоменклатуры, Узел, ТаблицаСоответствияВебСервисов)
	ЗаполнитьIntegrationIDНоменклатурыВДиспетчере(Узел, ТаблицаСоответствияВебСервисов);
	
#Область Загрузка
	ДополнительноеОписание = НСтр("ru = 'при получении номенклатуры'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Номенклатура = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMaterialAndComponentList", "Номенклатура", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка, "Элемент_");
	
	Если Номенклатура.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти

	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаНоменклатуры.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаНоменклатуры.MaterialAndComponentGroupID КАК MaterialAndComponentGroupID,
	               |	ИсходнаяТаблицаНоменклатуры.Name КАК Name,
	               |	ИсходнаяТаблицаНоменклатуры.ShortName КАК ShortName,
	               |	ИсходнаяТаблицаНоменклатуры.Description КАК Description,
	               |	ИсходнаяТаблицаНоменклатуры.Cost КАК Cost,
	               |	ИсходнаяТаблицаНоменклатуры.TypeId КАК TypeId
	               |ПОМЕСТИТЬ ВТ_ТаблицаНоменклатуры
	               |ИЗ
	               |	&ТаблицаНоменклатуры КАК ИсходнаяТаблицаНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаНоменклатуры.IntegrationID КАК IntegrationID,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.Номенклатура) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсяСопоставленнаяНоменклатура
	               |ИЗ
	               |	ВТ_ТаблицаНоменклатуры КАК ВТ_ТаблицаНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаНоменклатуры.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.Номенклатура"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаНоменклатуры.IntegrationID,
	               |	Номенклатура.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаНоменклатуры КАК ВТ_ТаблицаНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ВТ_ТаблицаНоменклатуры.Name = Номенклатура.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсяСопоставленнаяНоменклатура.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсяСопоставленнаяНоменклатура.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленнаяНоменклатураСПриоритетом
	               |ИЗ
	               |	ВТ_ВсяСопоставленнаяНоменклатура КАК ВТ_ВсяСопоставленнаяНоменклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсяСопоставленнаяНоменклатура.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсяСопоставленнаяНоменклатура.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсяСопоставленнаяНоменклатура.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленнаяНоменклатура
	               |ИЗ
	               |	ВТ_ВсяСопоставленнаяНоменклатура КАК ВТ_ВсяСопоставленнаяНоменклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленнаяНоменклатураСПриоритетом КАК ВТ_СопоставленнаяНоменклатураСПриоритетом
	               |		ПО ВТ_ВсяСопоставленнаяНоменклатура.IntegrationID = ВТ_СопоставленнаяНоменклатураСПриоритетом.IntegrationID
	               |			И ВТ_ВсяСопоставленнаяНоменклатура.Приоритет = ВТ_СопоставленнаяНоменклатураСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаНоменклатуры.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаНоменклатуры.MaterialAndComponentGroupID КАК MaterialAndComponentGroupID,
	               |	ВТ_ТаблицаНоменклатуры.Name КАК Name,
	               |	ВТ_ТаблицаНоменклатуры.ShortName КАК ShortName,
	               |	ВТ_ТаблицаНоменклатуры.Description КАК Description,
	               |	ВТ_ТаблицаНоменклатуры.Cost КАК Cost,
	               |	ЕСТЬNULL(ВТ_СопоставленнаяНоменклатура.Объект, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА ВТ_СопоставленнаяНоменклатура.Объект ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен,
	               |	ВЫБОР
	               |		КОГДА ВТ_ТаблицаНоменклатуры.TypeId = 1
	               |			ТОГДА ""Комплектующее""
	               |		ИНАЧЕ ""Расходный материал""
	               |	КОНЕЦ КАК ТипВАИСДиспетчере,
	               |	ВЫБОР
	               |		КОГДА ВТ_ТаблицаНоменклатуры.TypeId = 1
	               |			ТОГДА &ВидНоменклатурыКомплектующее
	               |		ИНАЧЕ &ВидНоменклатурыРасходныйМатериал
	               |	КОНЕЦ КАК ВидНоменклатуры,
	               |	&ВидЦеныДляНоменклатуры КАК ВидЦены,
	               |	&ДатаУстановкиЦены КАК ДатаУстановкиЦены
	               |ИЗ
	               |	ВТ_ТаблицаНоменклатуры КАК ВТ_ТаблицаНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленнаяНоменклатура КАК ВТ_СопоставленнаяНоменклатура
	               |		ПО ВТ_ТаблицаНоменклатуры.IntegrationID = ВТ_СопоставленнаяНоменклатура.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", Номенклатура);
	Запрос.УстановитьПараметр("ВидНоменклатурыКомплектующее", Узел.ВидНоменклатурыКомплектующее);
	Запрос.УстановитьПараметр("ВидНоменклатурыРасходныйМатериал", Узел.ВидНоменклатурыРасходныйМатериал);
	Запрос.УстановитьПараметр("ВидЦеныДляНоменклатуры", Узел.ВидЦеныДляНоменклатуры);
	Запрос.УстановитьПараметр("ДатаУстановкиЦены", НачалоДня(ТекущаяДатаСеанса()));
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDНоменклатурыВДиспетчере(Узел, ТаблицаСоответствияВебСервисов)
ДополнительноеОписание = НСтр("ru = 'при получении номенклатуры для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Номенклатура = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMaterialAndComponentList", "Номенклатура", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка);
	
	Если Номенклатура.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
#Область ИерархияНоменклатуры
	ДополнительноеОписание = НСтр("ru = 'при получении иерархии номенклатуры для заполнения IntegrationID номенклатуры в АИС Диспетчер'");
	ТаблицаИерархииНоменклатуры = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMaterialAndComponentGroupList", "ТаблицаИерархииНоменклатуры", ТаблицаСоответствияВебСервисов, ДополнительноеОписание);
#КонецОбласти

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.TypeID КАК TypeID,
	               |	Номенклатура.ID КАК ID,
	               |	Номенклатура.IntegrationID КАК IntegrationID,
	               |	Номенклатура.Name КАК Name,
	               |	Номенклатура.ShortName КАК ShortName,
	               |	Номенклатура.Number КАК Number,
	               |	Номенклатура.EdIzm КАК EdIzm,
	               |	Номенклатура.Description КАК Description,
	               |	Номенклатура.Mark КАК Mark,
	               |	Номенклатура.Cost КАК Cost,
	               |	Номенклатура.MaterialAndComponentGroupID КАК MaterialAndComponentGroupID
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	&Номенклатура КАК Номенклатура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MaterialAndComponentGroupID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИерархияНоменклатуры.ID КАК ID,
	               |	ИерархияНоменклатуры.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_ИерархияНоменклатуры
	               |ИЗ
	               |	&ИерархияНоменклатуры КАК ИерархияНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИСТИНА КАК IsUseID,
	               |	ВТ_Номенклатура.TypeID КАК TypeID,
	               |	ВТ_Номенклатура.ID КАК ID,
	               |	ВТ_Номенклатура.IntegrationID КАК IntegrationID,
	               |	ВТ_Номенклатура.Name КАК Name,
	               |	ВТ_Номенклатура.ShortName КАК ShortName,
	               |	ВТ_Номенклатура.Number КАК Number,
	               |	ВТ_Номенклатура.EdIzm КАК EdIzm,
	               |	ВТ_Номенклатура.Description КАК Description,
	               |	ВТ_Номенклатура.Mark КАК Mark,
	               |	ВТ_Номенклатура.Cost КАК Cost,
	               |	ЕСТЬNULL(ВТ_ИерархияНоменклатуры.ID, """") КАК MaterialAndComponentGroupID,
	               |	ЕСТЬNULL(ВТ_ИерархияНоменклатуры.IntegrationID, """") КАК MaterialAndComponentGroupIntegrationID
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИерархияНоменклатуры КАК ВТ_ИерархияНоменклатуры
	               |		ПО ВТ_Номенклатура.MaterialAndComponentGroupID = ВТ_ИерархияНоменклатуры.ID";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ИерархияНоменклатуры", ТаблицаИерархииНоменклатуры);
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у номенклатуры В АИС Диспетчере'");
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendMaterialAndComponentList", ТаблицаСоответствияВебСервисов, Запрос.Выполнить().Выгрузить(), ДополнительноеОписание);
КонецФункции

#КонецОбласти

#Область ВидыЭксплуатации

Функция ЗагрузитьВидыЭксплуатации(ТаблицаВидовЭксплуатации, Узел, ТаблицаСоответствияВебСервисов)
#Область ВидыЭксплуатации
	ДополнительноеОписание = НСтр("ru = 'при получении видов эксплуатации'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ВидыЭксплуатации = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineParamList", "ВидыЭксплуатации", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если ВидыЭксплуатации.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти
	
#Область ВидыЭксплуатацииСтанков
	ДополнительноеОписание = НСтр("ru = 'при получении параметров станкоа'");
	ПараметрыСтанков = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetParamInMachineList", "ПараметрыСтанков", ТаблицаСоответствияВебСервисов, ДополнительноеОписание);
#КонецОбласти
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаВидовЭксплуатации.ID КАК ID,
	               |	ИсходнаяТаблицаВидовЭксплуатации.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаВидовЭксплуатации.Name КАК Name,
				   |	ВЫБОР
	               |		КОГДА ИсходнаяТаблицаВидовЭксплуатации.MachineParamTypeID = 2
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Эксплуатация)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой)
	               |	КОНЕЦ КАК ТипЭксплуатации
	               |ПОМЕСТИТЬ ВТ_ТаблицаВидовЭксплуатации
	               |ИЗ
	               |	&ТаблицаПараметров КАК ИсходнаяТаблицаВидовЭксплуатации
	               |ГДЕ
	               |	ИсходнаяТаблицаВидовЭксплуатации.MachineParamTypeID = 1
				   |	ИЛИ ИсходнаяТаблицаВидовЭксплуатации.MachineParamTypeID = 2
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаПричинПростоя.ID КАК ID,
	               |	ИсходнаяТаблицаПричинПростоя.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_ТаблицаПричинПростоя
	               |ИЗ
	               |	&ТаблицаПараметров КАК ИсходнаяТаблицаПричинПростоя
	               |ГДЕ
	               |	ИсходнаяТаблицаПричинПростоя.MachineParamTypeID = 1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Name
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаПараметровСтанков.MachineParamID КАК MachineParamID,
	               |	ИсходнаяТаблицаПараметровСтанков.FormulaText КАК FormulaText
	               |ПОМЕСТИТЬ ВТ_ТаблицаПараметровСтанков
	               |ИЗ
	               |	&ТаблицаПараметровСтанков КАК ИсходнаяТаблицаПараметровСтанков
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MachineParamID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПараметровСтанков.MachineParamID КАК MachineParamID,
	               |	ВТ_ТаблицаПараметровСтанков.FormulaText КАК FormulaText
	               |ПОМЕСТИТЬ ВТ_ВидыЭксплуатацииСтанков
	               |ИЗ
	               |	ВТ_ТаблицаВидовЭксплуатации КАК ВТ_ТаблицаВидовЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПараметровСтанков КАК ВТ_ТаблицаПараметровСтанков
	               |		ПО ВТ_ТаблицаВидовЭксплуатации.ID = ВТ_ТаблицаПараметровСтанков.MachineParamID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВидыЭксплуатацииСтанков.MachineParamID КАК MachineParamID,
	               |	КОЛИЧЕСТВО(ВТ_ВидыЭксплуатацииСтанков.MachineParamID) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ПараметрыСтанковСПричинамиПростояВФормуле
	               |ИЗ
	               |	ВТ_ВидыЭксплуатацииСтанков КАК ВТ_ВидыЭксплуатацииСтанков
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПричинПростоя КАК ВТ_ТаблицаПричинПростоя
	               |		ПО (ВТ_ВидыЭксплуатацииСтанков.FormulaText ПОДОБНО ""%ВТ_ТаблицаПричинПростоя.Name%"")
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВидыЭксплуатацииСтанков.MachineParamID
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(ВТ_ВидыЭксплуатацииСтанков.MachineParamID) > 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MachineParamID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаВидовЭксплуатации.ID КАК ID,
	               |	ВТ_ТаблицаВидовЭксплуатации.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаВидовЭксплуатации.Name КАК Name,
	               |	ВЫБОР
				   |		КОГДА ВТ_ТаблицаВидовЭксплуатации.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой)
	               |			ТОГДА ВТ_ТаблицаВидовЭксплуатации.ТипЭксплуатации
	               |		КОГДА ВТ_ПараметрыСтанковСПричинамиПростояВФормуле.MachineParamID ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Эксплуатация)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой)
	               |	КОНЕЦ КАК ТипЭксплуатации
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеВидыЭксплуатации
	               |ИЗ
	               |	ВТ_ТаблицаВидовЭксплуатации КАК ВТ_ТаблицаВидовЭксплуатации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыСтанковСПричинамиПростояВФормуле КАК ВТ_ПараметрыСтанковСПричинамиПростояВФормуле
	               |		ПО ВТ_ТаблицаВидовЭксплуатации.ID = ВТ_ПараметрыСтанковСПричинамиПростояВФормуле.MachineParamID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодготовленныеВидыЭксплуатации.ID КАК ID,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.торо_ВидыЭксплуатации) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеВидыЭксплуатации
	               |ИЗ
	               |	ВТ_ПодготовленныеВидыЭксплуатации КАК ВТ_ПодготовленныеВидыЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ПодготовленныеВидыЭксплуатации.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ВидыЭксплуатации"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ПодготовленныеВидыЭксплуатации.ID,
	               |	торо_ВидыЭксплуатации.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ПодготовленныеВидыЭксплуатации КАК ВТ_ПодготовленныеВидыЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ВидыЭксплуатации КАК торо_ВидыЭксплуатации
	               |		ПО ВТ_ПодготовленныеВидыЭксплуатации.Name = торо_ВидыЭксплуатации.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеВидыЭксплуатации.ID КАК ID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеВидыЭксплуатации.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеВидыЭксплуатацииСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеВидыЭксплуатации КАК ВТ_ВсеСопоставленныеВидыЭксплуатации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеВидыЭксплуатации.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеВидыЭксплуатации.ID КАК ID,
	               |	ВТ_ВсеСопоставленныеВидыЭксплуатации.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеВидыЭксплуатации
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеВидыЭксплуатации КАК ВТ_ВсеСопоставленныеВидыЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеВидыЭксплуатацииСПриоритетом КАК ВТ_СопоставленныеВидыЭксплуатацииСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеВидыЭксплуатации.ID = ВТ_СопоставленныеВидыЭксплуатацииСПриоритетом.ID
	               |			И ВТ_ВсеСопоставленныеВидыЭксплуатации.Приоритет = ВТ_СопоставленныеВидыЭксплуатацииСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодготовленныеВидыЭксплуатации.ID КАК ID,
	               |	ВТ_ПодготовленныеВидыЭксплуатации.IntegrationID КАК IntegrationID,
	               |	ВТ_ПодготовленныеВидыЭксплуатации.Name КАК Name,
	               |	ВЫБОР
	               |		КОГДА ВТ_СопоставленныеВидыЭксплуатации.Объект ЕСТЬ NULL
	               |			ТОГДА ВТ_ПодготовленныеВидыЭксплуатации.ТипЭксплуатации
	               |		ИНАЧЕ ВТ_СопоставленныеВидыЭксплуатации.Объект.ТипЭксплуатации
	               |	КОНЕЦ КАК ТипЭксплуатации,
	               |	ВЫБОР
	               |		КОГДА ВТ_СопоставленныеВидыЭксплуатации.Объект ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ВТ_СопоставленныеВидыЭксплуатации.Объект.ОбязательныйВводВидаПуска
	               |	КОНЕЦ КАК ОбязательныйВводВидаПуска,
	               |	ЕСТЬNULL(ВТ_СопоставленныеВидыЭксплуатации.Объект, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА ВТ_СопоставленныеВидыЭксплуатации.Объект ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ПодготовленныеВидыЭксплуатации КАК ВТ_ПодготовленныеВидыЭксплуатации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеВидыЭксплуатации КАК ВТ_СопоставленныеВидыЭксплуатации
	               |		ПО ВТ_ПодготовленныеВидыЭксплуатации.ID = ВТ_СопоставленныеВидыЭксплуатации.ID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаПараметров", ВидыЭксплуатации);
	Запрос.УстановитьПараметр("ТаблицаПараметровСтанков", ПараметрыСтанков);
	ТаблицаВидовЭксплуатации = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПричиныПростоя

Функция ЗагрузитьПричиныПростоя(ТаблицаПричинПростоя, Узел, ТаблицаСоответствияВебСервисов)
#Область ПричиныПростоя
	ДополнительноеОписание = НСтр("ru = 'при получении причин простоя'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПричиныПростоя = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineParamList", "ПричиныПростоя", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если ПричиныПростоя.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти

	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаПричинПростоя.ID КАК ID,
	               |	ИсходнаяТаблицаПричинПростоя.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПричинПростоя.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_ТаблицаПричинПростоя
	               |ИЗ
	               |	&ТаблицаПараметров КАК ИсходнаяТаблицаПричинПростоя
	               |ГДЕ
	               |	ИсходнаяТаблицаПричинПростоя.MachineParamTypeID = 1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПричинПростоя.ID КАК ID,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.торо_ПричиныПростояОборудования) КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеПричиныПростоя
	               |ИЗ
	               |	ВТ_ТаблицаПричинПростоя КАК ВТ_ТаблицаПричинПростоя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаПричинПростоя.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ПричиныПростояОборудования"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПричинПростоя.ID,
	               |	торо_ПричиныПростояОборудования.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_ТаблицаПричинПростоя КАК ВТ_ТаблицаПричинПростоя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ПричиныПростояОборудования КАК торо_ПричиныПростояОборудования
	               |		ПО ВТ_ТаблицаПричинПростоя.Name = торо_ПричиныПростояОборудования.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеПричиныПростоя.ID КАК ID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеПричиныПростоя.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПричиныПростояСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПричиныПростоя КАК ВТ_ВсеСопоставленныеПричиныПростоя
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеПричиныПростоя.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеПричиныПростоя.ID КАК ID,
	               |	ВТ_ВсеСопоставленныеПричиныПростоя.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеПричиныПростоя
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеПричиныПростоя КАК ВТ_ВсеСопоставленныеПричиныПростоя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПричиныПростояСПриоритетом КАК ВТ_СопоставленныеПричиныПростояСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеПричиныПростоя.ID = ВТ_СопоставленныеПричиныПростояСПриоритетом.ID
	               |			И ВТ_ВсеСопоставленныеПричиныПростоя.Приоритет = ВТ_СопоставленныеПричиныПростояСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПричинПростоя.ID КАК ID,
	               |	ВТ_ТаблицаПричинПростоя.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаПричинПростоя.Name КАК Name,
	               |	ВЫБОР
	               |		КОГДА ВТ_СопоставленныеПричиныПростоя.Объект ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.торо_ВидыПростояОборудования.ПустаяСсылка)
	               |		ИНАЧЕ ВТ_СопоставленныеПричиныПростоя.Объект.ВидПростоя
	               |	КОНЕЦ КАК ОбязательныйВводВидаПуска,
	               |	ЕСТЬNULL(ВТ_СопоставленныеПричиныПростоя.Объект, ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА ВТ_СопоставленныеПричиныПростоя.Объект ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_ТаблицаПричинПростоя КАК ВТ_ТаблицаПричинПростоя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеПричиныПростоя КАК ВТ_СопоставленныеПричиныПростоя
	               |		ПО ВТ_ТаблицаПричинПростоя.ID = ВТ_СопоставленныеПричиныПростоя.ID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаПараметров", ПричиныПростоя);
	ТаблицаПричинПростоя = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Сотрудники

Функция ЗагрузитьСотрудников(ТаблицаСотрудников, ТаблицаПодразделений, ТаблицаКадровыхДокументов, Узел, ТаблицаСоответствияВебСервисов)
	ЗаполнитьIntegrationIDСотрудниковВДиспетчере(ТаблицаПодразделений, Узел, ТаблицаСоответствияВебСервисов);
	
	ГрафикРаботы = Узел.ГрафикРаботы;
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
	    ГрафикРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойГрафикРаботы",
			Справочники.Календари.ПустаяСсылка());
	КонецЕсли;
	
	ДополнительноеОписание = НСтр("ru = 'при получении сотрудников'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Или Не ЗначениеЗаполнено(СтрокаДанных.dtAccept) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоляДатыСтрокой = "dtAccept,dtFired";
	Сотрудники = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetWorkerList", "Сотрудники", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка,, ПоляДатыСтрокой);
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого СтрокаСотрудника Из Сотрудники Цикл
		СтрокаСотрудника.Name = СтрокаСотрудника.LastName + " " + СтрокаСотрудника.FirstName + " " + СтрокаСотрудника.Patronymic;
		
		ТабельныйНомер = СтрокаСотрудника.TabNom;
		Пока Не СтрДлина(ТабельныйНомер) = 10 Цикл
		    ТабельныйНомер = "0" + ТабельныйНомер;
		КонецЦикла;
		
		СтрокаСотрудника.TabNom = ТабельныйНомер;
	КонецЦикла;
	
	Если Сотрудники.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	// Запрос получает кадровые документы, которые нужно будет создать.
	// В Диспетчере кадровый перевод сотрудника в другое подразделение происходит путем УВОЛЬНЕНИЯ его из текущего
	// подразделения и ПРИНЯТИЕМ на работу в новое, попутно СОЗДАВАЯ нового сотрудника (дублируется; повезло, что IntegrationID
	// переносится). Таким образом при переводе у сотрудника (старый объект) заполнены и дата приема, и дата увольнения.
	// При переводе дата увольнения равна не дате перевода, а дате перевода - 1 день. Таким образом если в качестве даты увольнения
	// просто брать максимальную дату увольнения, то в случае принятия и перевода сотрудника (без увольнения) получится, что нужно
	// будет создать документ увольнения на дату, равную последней дате перевода - 1 день.
	// Для решения этой проблемы используются временные таблицы ВТ_ДатыПриемаНаРаботуИПоследнихКадровыхПереводов
	// и ВТ_МинимальныеДатыУвольнения: документ увольнения нужно создавать, если его дата больше максимальной даты приема на
	// работу или кадрового перевода (если он есть).
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсходнаяТаблицаСотрудников.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаСотрудников.DeptID КАК DeptID,
	               |	ИсходнаяТаблицаСотрудников.ProfName КАК ProfName,
	               |	ИсходнаяТаблицаСотрудников.dtAccept КАК DateAccept,
	               |	ИсходнаяТаблицаСотрудников.dtFired КАК DateFired
	               |ПОМЕСТИТЬ ВТ_ТаблицаСотрудников
	               |ИЗ
	               |	&ТаблицаСотрудников КАК ИсходнаяТаблицаСотрудников
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	DeptID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаПодразделений.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПодразделений.Name КАК Name,
	               |	ИсходнаяТаблицаПодразделений.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ТаблицаПодразделений
	               |ИЗ
	               |	&ТаблицаПодразделений КАК ИсходнаяТаблицаПодразделений
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаСотрудников.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаСотрудников.DateAccept КАК DateAccept,
	               |	ВТ_ТаблицаСотрудников.DateFired КАК DateFired,
	               |	ВТ_ТаблицаПодразделений.IntegrationID КАК DeptIntegrationID,
	               |	ВТ_ТаблицаПодразделений.Name КАК DeptName,
	               |	ВТ_ТаблицаСотрудников.ProfName КАК ProfName
	               |ПОМЕСТИТЬ ВТ_ТаблицаКадровыхДокументов
	               |ИЗ
	               |	ВТ_ТаблицаСотрудников КАК ВТ_ТаблицаСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПодразделений КАК ВТ_ТаблицаПодразделений
	               |		ПО ВТ_ТаблицаСотрудников.DeptID = ВТ_ТаблицаПодразделений.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	DateAccept
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ТаблицаКадровыхДокументов.DateAccept) КАК DateAccept
	               |ПОМЕСТИТЬ ВТ_ДатыПриемаНаРаботу
	               |ИЗ
	               |	ВТ_ТаблицаКадровыхДокументов КАК ВТ_ТаблицаКадровыхДокументов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	DateAccept
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаКадровыхДокументов.DateAccept КАК DateAccept
	               |ПОМЕСТИТЬ ВТ_ДатыКадровыхПереводов
	               |ИЗ
	               |	ВТ_ТаблицаКадровыхДокументов КАК ВТ_ТаблицаКадровыхДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыПриемаНаРаботу КАК ВТ_ДатыПриемаНаРаботу
	               |		ПО ВТ_ТаблицаКадровыхДокументов.IntegrationID = ВТ_ДатыПриемаНаРаботу.IntegrationID
	               |			И ВТ_ТаблицаКадровыхДокументов.DateAccept > ВТ_ДатыПриемаНаРаботу.DateAccept
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	DateAccept
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДатыПриемаНаРаботу.IntegrationID КАК IntegrationID,
	               |	ВТ_ДатыПриемаНаРаботу.DateAccept КАК DateAccept
	               |ПОМЕСТИТЬ ВТ_ДатыПриемаНаРаботуИПоследнихКадровыхПереводов
	               |ИЗ
	               |	ВТ_ДатыПриемаНаРаботу КАК ВТ_ДатыПриемаНаРаботу
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ДатыКадровыхПереводов.IntegrationID,
	               |	МАКСИМУМ(ВТ_ДатыКадровыхПереводов.DateAccept)
	               |ИЗ
	               |	ВТ_ДатыКадровыхПереводов КАК ВТ_ДатыКадровыхПереводов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ДатыКадровыхПереводов.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	DateAccept
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДатыПриемаНаРаботуИПоследнихКадровыхПереводов.IntegrationID КАК IntegrationID,
	               |	МАКСИМУМ(ВТ_ДатыПриемаНаРаботуИПоследнихКадровыхПереводов.DateAccept) КАК DateFired
	               |ПОМЕСТИТЬ ВТ_МинимальныеДатыУвольнения
	               |ИЗ
	               |	ВТ_ДатыПриемаНаРаботуИПоследнихКадровыхПереводов КАК ВТ_ДатыПриемаНаРаботуИПоследнихКадровыхПереводов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ДатыПриемаНаРаботуИПоследнихКадровыхПереводов.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	DateFired
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID КАК IntegrationID,
	               |	МАКСИМУМ(ВТ_ТаблицаКадровыхДокументов.DateFired) КАК DateFired
	               |ПОМЕСТИТЬ ВТ_ДатыУвольнения
	               |ИЗ
	               |	ВТ_ТаблицаКадровыхДокументов КАК ВТ_ТаблицаКадровыхДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МинимальныеДатыУвольнения КАК ВТ_МинимальныеДатыУвольнения
	               |		ПО ВТ_ТаблицаКадровыхДокументов.IntegrationID = ВТ_МинимальныеДатыУвольнения.IntegrationID
	               |			И ВТ_ТаблицаКадровыхДокументов.DateFired > ВТ_МинимальныеДатыУвольнения.DateFired
	               |ГДЕ
	               |	НЕ ВТ_ТаблицаКадровыхДокументов.DateFired = ДАТАВРЕМЯ(1970, 1, 1, 0, 0, 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	DateFired
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаКадровыхДокументов.DateAccept КАК ДатаКадровойОперации,
	               |	ВТ_ТаблицаКадровыхДокументов.DeptIntegrationID КАК DeptIntegrationID,
	               |	ВТ_ТаблицаКадровыхДокументов.DeptName КАК DeptName,
	               |	ВТ_ТаблицаКадровыхДокументов.ProfName КАК ProfName,
	               |	&ГрафикРаботы КАК ГрафикРаботы,
	               |	""Прием на работу"" КАК Документ
	               |ИЗ
	               |	ВТ_ТаблицаКадровыхДокументов КАК ВТ_ТаблицаКадровыхДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыПриемаНаРаботу КАК ВТ_ДатыПриемаНаРаботу
	               |		ПО ВТ_ТаблицаКадровыхДокументов.IntegrationID = ВТ_ДатыПриемаНаРаботу.IntegrationID
	               |			И ВТ_ТаблицаКадровыхДокументов.DateAccept = ВТ_ДатыПриемаНаРаботу.DateAccept
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID,
	               |	ВТ_ТаблицаКадровыхДокументов.DateAccept,
	               |	ВТ_ТаблицаКадровыхДокументов.DeptIntegrationID,
	               |	ВТ_ТаблицаКадровыхДокументов.DeptName,
	               |	ВТ_ТаблицаКадровыхДокументов.ProfName,
	               |	&ГрафикРаботы,
	               |	""Кадровый перевод""
	               |ИЗ
	               |	ВТ_ТаблицаКадровыхДокументов КАК ВТ_ТаблицаКадровыхДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыКадровыхПереводов КАК ВТ_ДатыКадровыхПереводов
	               |		ПО ВТ_ТаблицаКадровыхДокументов.IntegrationID = ВТ_ДатыКадровыхПереводов.IntegrationID
	               |			И ВТ_ТаблицаКадровыхДокументов.DateAccept = ВТ_ДатыКадровыхПереводов.DateAccept
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID,
	               |	ВТ_ТаблицаКадровыхДокументов.DateFired,
	               |	ВТ_ТаблицаКадровыхДокументов.DeptIntegrationID,
	               |	ВТ_ТаблицаКадровыхДокументов.DeptName,
	               |	ВТ_ТаблицаКадровыхДокументов.ProfName,
	               |	&ГрафикРаботы,
	               |	""Увольнение""
	               |ИЗ
	               |	ВТ_ТаблицаКадровыхДокументов КАК ВТ_ТаблицаКадровыхДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыУвольнения КАК ВТ_ДатыУвольнения
	               |		ПО ВТ_ТаблицаКадровыхДокументов.IntegrationID = ВТ_ДатыУвольнения.IntegrationID
	               |			И ВТ_ТаблицаКадровыхДокументов.DateFired = ВТ_ДатыУвольнения.DateFired";
#КонецОбласти			
	Запрос.УстановитьПараметр("ТаблицаСотрудников", Сотрудники);
	Запрос.УстановитьПараметр("ТаблицаПодразделений", ТаблицаПодразделений);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	ТаблицаКадровыхДокументов = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаСотрудников.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаСотрудников.TabNom КАК TabNum,
	               |	ИсходнаяТаблицаСотрудников.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_ТаблицаСотрудников
	               |ИЗ
	               |	&ТаблицаСотрудников КАК ИсходнаяТаблицаСотрудников
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаСотрудников.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаСотрудников.TabNum КАК TabNum,
	               |	ВТ_ТаблицаСотрудников.Name КАК Name
	               |ПОМЕСТИТЬ ВТ_Сотрудники
	               |ИЗ
	               |	ВТ_ТаблицаСотрудников КАК ВТ_ТаблицаСотрудников
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТаблицаСотрудников.IntegrationID,
	               |	ВТ_ТаблицаСотрудников.TabNum,
	               |	ВТ_ТаблицаСотрудников.Name
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Сотрудники.IntegrationID КАК IntegrationID,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Объект,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеСотрудники
	               |ИЗ
	               |	ВТ_Сотрудники КАК ВТ_Сотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_Сотрудники.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.Сотрудники"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_Сотрудники.IntegrationID,
	               |	Сотрудники.Ссылка,
	               |	2
	               |ИЗ
	               |	ВТ_Сотрудники КАК ВТ_Сотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	               |		ПО ВТ_Сотрудники.TabNum = Сотрудники.Код
	               |			И (НЕ ВТ_Сотрудники.TabNum = """")
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеСопоставленныеСотрудники.IntegrationID КАК IntegrationID,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеСотрудники.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеСотрудникиСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеСотрудники КАК ВТ_ВсеСопоставленныеСотрудники
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеСотрудники.IntegrationID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеСопоставленныеСотрудники.IntegrationID КАК IntegrationID,
	               |	ВТ_ВсеСопоставленныеСотрудники.Объект КАК Объект
	               |ПОМЕСТИТЬ ВТ_СопоставленныеСотрудники
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеСотрудники КАК ВТ_ВсеСопоставленныеСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеСотрудникиСПриоритетом КАК ВТ_СопоставленныеСотрудникиСПриоритетом
	               |		ПО ВТ_ВсеСопоставленныеСотрудники.IntegrationID = ВТ_СопоставленныеСотрудникиСПриоритетом.IntegrationID
	               |			И ВТ_ВсеСопоставленныеСотрудники.Приоритет = ВТ_СопоставленныеСотрудникиСПриоритетом.Приоритет
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Сотрудники.IntegrationID КАК IntegrationID,
	               |	ВТ_Сотрудники.TabNum КАК TabNum,
	               |	ВТ_Сотрудники.Name КАК Name,
	               |	ЕСТЬNULL(ВТ_СопоставленныеСотрудники.Объект, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Объект,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_СопоставленныеСотрудники.Объект ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сопоставлен
	               |ИЗ
	               |	ВТ_Сотрудники КАК ВТ_Сотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеСотрудники КАК ВТ_СопоставленныеСотрудники
	               |		ПО ВТ_Сотрудники.IntegrationID = ВТ_СопоставленныеСотрудники.IntegrationID";
#КонецОбласти			
	Запрос.УстановитьПараметр("ТаблицаСотрудников", Сотрудники);
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

Функция ЗаполнитьIntegrationIDСотрудниковВДиспетчере(ТаблицаПодразделений, Узел, ТаблицаСоответствияВебСервисов)
	ДополнительноеОписание = НСтр("ru = 'при получении сотрудников для заполнения IntegrationID в АИС Диспетчер'");
	ОбязательнаяПроверка = "Если ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоляДатыСтрокой = "dtAccept,dtFired";
	Сотрудники = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetWorkerList", "Сотрудники", ТаблицаСоответствияВебСервисов, ДополнительноеОписание, Истина, ОбязательнаяПроверка,, ПоляДатыСтрокой);
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.ID КАК ID,
	               |	Сотрудники.IntegrationID КАК IntegrationID,
	               |	Сотрудники.DeptID КАК DeptID,
	               |	Сотрудники.TabNom КАК TabNum,
	               |	Сотрудники.ProfName КАК ProfName,
	               |	Сотрудники.FirstName КАК FirstName,
	               |	Сотрудники.LastName КАК LastName,
	               |	Сотрудники.Patronymic КАК Patronymic
	               |ПОМЕСТИТЬ ВТ_ТаблицаСотрудников
	               |ИЗ
	               |	&Сотрудники КАК Сотрудники
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	DeptID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Подразделения.IntegrationID КАК IntegrationID,
	               |	Подразделения.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ТаблицаПодразделений
	               |ИЗ
	               |	&Подразделения КАК Подразделения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаСотрудников.ID КАК ID,
	               |	ВТ_ТаблицаСотрудников.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаПодразделений.IntegrationID КАК DeptIntegrationID,
	               |	ВТ_ТаблицаСотрудников.TabNum КАК TabNum,
				   |	ВЫБОР
				   |		КОГДА ВТ_ТаблицаСотрудников.ProfName = """"
				   |			ТОГДА ""-""
				   |		ИНАЧЕ ВТ_ТаблицаСотрудников.ProfName
				   |	КОНЕЦ КАК ProfName,
	               |	ВТ_ТаблицаСотрудников.FirstName КАК FirstName,
	               |	ВТ_ТаблицаСотрудников.LastName КАК LastName,
	               |	ВТ_ТаблицаСотрудников.Patronymic КАК Patronymic,
	               |	ИСТИНА КАК IsUseId
	               |ИЗ
	               |	ВТ_ТаблицаСотрудников КАК ВТ_ТаблицаСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПодразделений КАК ВТ_ТаблицаПодразделений
	               |		ПО ВТ_ТаблицаСотрудников.DeptID = ВТ_ТаблицаПодразделений.ID";
#КонецОбласти
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Подразделения", ТаблицаПодразделений);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДополнительноеОписание = НСтр("ru = 'при заполнении IntegrationID у сотрудников В АИС Диспетчере'");
	Возврат ОтправитьДанныеВАИСДиспетчер(Узел, "SendWorkerModelList", ТаблицаСоответствияВебСервисов, Результат, ДополнительноеОписание);
КонецФункции

#КонецОбласти

#Область ДокументыСостоянийОР

Функция ПолучитьДанныеПоСостояниямОборудования(Узел, ТаблицаСоответствияВебСервисов)
	МассивТелЗапросов = ПодготовитьТелоЗапросаМетодаGetMonitoringValueList(Узел.ДатаОтсчетаДляЗагрузкиДокументов, Узел.ДетализацияПериодаЗагрузкиДанных);
	Если Не ЗначениеЗаполнено(МассивТелЗапросов) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
#Область Станки
	ДополнительноеОписание = НСтр("ru = 'при получении станков'");
	Станки = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineList", "Станки", ТаблицаСоответствияВебСервисов, ДополнительноеОписание);
#КонецОбласти

#Область ОбъектыРемонта
	ДополнительноеОписание = НСтр("ru = 'при получении ОР'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоляДатыСтрокой = "dtProducer,dtInput,dtGuarantee";
	ОбъектыРемонта = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentList", "ОбъектыРемонта", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка,, ПоляДатыСтрокой);
#КонецОбласти

#Область Параметры
	ДополнительноеОписание = НСтр("ru = 'при получении параметров'");
	ОбязательнаяПроверка = "Если СтрокаДанных.MachineParamTypeID = 2 И Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Параметры = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineParamList", "Параметры", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если Параметры.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти

#Область ДанныеПоСостояниям
	ДополнительноеОписание = НСтр("ru = 'при получении ОР'");
	ПоляДатыСтрокой = "StartTime,EndTime";
	
	УспешноеВыполнение = Истина;
	СозданныеПричиныПростоя = Новый Соответствие();
	
	Для каждого ПараметрыЗапроса Из МассивТелЗапросов Цикл
		ДанныеПоСостояниямОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMonitoringValueList", "ДанныеПоСостояниямОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,,,, ПоляДатыСтрокой,, ПараметрыЗапроса);
		
		Если ДанныеПоСостояниямОР.Количество() = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаДанныхПоСостояниям Из ДанныеПоСостояниямОР Цикл
			СтрокаДанныхПоСостояниям.EndTime = ?(СтрокаДанныхПоСостояниям.EndTime = Дата(1, 1, 1), Дата(3999, 12, 31), СтрокаДанныхПоСостояниям.EndTime);
		КонецЦикла;

		// В АИС Диспетчер на один период для одного ОР может быть несколько состояний. Поэтому изначально необходимо
		// разрешить эти конфликты. У состояний есть приоритеты, поэтому для пересекающихся интервалов выбирается
		// наиболее предпочтительное состояние (чем ниже приоритет, тем приоритетнее состояние, поэтому используется
		// агрегатная функция МИНИМУМ!!!). Подготовленная таблица состояний - ВТ_ПодготовленныеИнтервалыПоОР.
		// Далее для каждого простоя необходимо сопоставить причину простоя, результат - ВТ_ПодготовленныеДанныеПоПростоям.
		// Но так как в АИС Диспетчер одним из источников состояний является формула, то их можно настроить таким
		// образом, что с учетом приоритета для простоя на период (или его часть) не будет причины простоя. В таком
		// случае необходимо создавать и указывать причину простоя с наименованием вида эксплуатации, так как в ТОИР
		// нельзя указывать простой без причины простоя.
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
#Область ТекстЗапроса
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсходнаяТаблицаОР.ID КАК ID,
		               |	ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID
		               |ПОМЕСТИТЬ ВТ_ТаблицаОР
		               |ИЗ
		               |	&ТаблицаОР КАК ИсходнаяТаблицаОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИсходнаяТаблицаСтанков.ID КАК ID,
		               |	ИсходнаяТаблицаСтанков.IntegrationID КАК IntegrationID,
		               |	ИсходнаяТаблицаСтанков.kEquipmentID КАК kEquipmentID
		               |ПОМЕСТИТЬ ВТ_ТаблицаСтанков
		               |ИЗ
		               |	&ТаблицаСтанков КАК ИсходнаяТаблицаСтанков
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВТ_ТаблицаОР.ID КАК ID,
		               |	ВТ_ТаблицаОР.IntegrationID КАК IntegrationID,
		               |	ВТ_ТаблицаСтанков.ID КАК IDСтанка,
		               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК ОбъектРемонта
		               |ПОМЕСТИТЬ ВТ_СоответствиеСтанковИОборудования
		               |ИЗ
		               |	ВТ_ТаблицаОР КАК ВТ_ТаблицаОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
		               |		ПО ВТ_ТаблицаОР.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ОбъектыРемонта"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСтанков КАК ВТ_ТаблицаСтанков
		               |		ПО ВТ_ТаблицаОР.ID = ВТ_ТаблицаСтанков.kEquipmentID
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	IDСтанка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаСтанков
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ИсходнаяТаблицаДанныхПоСостояниямОР.ID КАК ID,
		               |	ИсходнаяТаблицаДанныхПоСостояниямОР.MachineID КАК MachineID,
		               |	ИсходнаяТаблицаДанныхПоСостояниямОР.MachineIntegrationID КАК MachineIntegrationID,
		               |	ИсходнаяТаблицаДанныхПоСостояниямОР.MachineParamID КАК MachineParamID,
		               |	ИсходнаяТаблицаДанныхПоСостояниямОР.StartTime КАК StartTime,
		               |	ИсходнаяТаблицаДанныхПоСостояниямОР.EndTime КАК EndTime
		               |ПОМЕСТИТЬ ВТ_ТаблицаДанныхПоСостояниямОР
		               |ИЗ
		               |	&ДанныеПоСостояниямОР КАК ИсходнаяТаблицаДанныхПоСостояниямОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineParamID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИсходнаяТаблицаПараметров.ID КАК ID,
		               |	ИсходнаяТаблицаПараметров.IntegrationID КАК IntegrationID,
		               |	ИсходнаяТаблицаПараметров.Name КАК Name,
		               |	ИсходнаяТаблицаПараметров.MachineParamTypeID КАК MachineParamTypeID,
		               |	ИсходнаяТаблицаПараметров.Priority КАК Priority
		               |ПОМЕСТИТЬ ВТ_ТаблицаПараметровИсходная
		               |ИЗ
		               |	&Параметры КАК ИсходнаяТаблицаПараметров
		               |ГДЕ
		               |	(ИсходнаяТаблицаПараметров.MachineParamTypeID = 1
		               |			ИЛИ ИсходнаяТаблицаПараметров.MachineParamTypeID = 2)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	IntegrationID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ТаблицаПараметровИсходная.ID КАК ID,
		               |	ВТ_ТаблицаПараметровИсходная.IntegrationID КАК IntegrationID,
		               |	ВТ_ТаблицаПараметровИсходная.Name КАК Name,
		               |	ВТ_ТаблицаПараметровИсходная.MachineParamTypeID КАК MachineParamTypeID,
		               |	ВТ_ТаблицаПараметровИсходная.Priority КАК Priority,
		               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.торо_ПричиныПростояОборудования) КАК ОбъектТОИР,
		               |	ЛОЖЬ КАК ВидЭксплуатации
		               |ПОМЕСТИТЬ ВТ_ТаблицаПараметров
		               |ИЗ
		               |	ВТ_ТаблицаПараметровИсходная КАК ВТ_ТаблицаПараметровИсходная
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
		               |		ПО ВТ_ТаблицаПараметровИсходная.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ПричиныПростояОборудования"")
		               |ГДЕ
		               |	ВТ_ТаблицаПараметровИсходная.MachineParamTypeID = 1
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаПараметровИсходная.ID,
		               |	ВТ_ТаблицаПараметровИсходная.IntegrationID,
		               |	ВТ_ТаблицаПараметровИсходная.Name,
		               |	ВТ_ТаблицаПараметровИсходная.MachineParamTypeID,
		               |	ВТ_ТаблицаПараметровИсходная.Priority,
		               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.торо_ВидыЭксплуатации),
		               |	ИСТИНА
		               |ИЗ
		               |	ВТ_ТаблицаПараметровИсходная КАК ВТ_ТаблицаПараметровИсходная
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
		               |		ПО ВТ_ТаблицаПараметровИсходная.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ВидыЭксплуатации"")
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаПараметровИсходная
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ТаблицаДанныхПоСостояниямОР.ID КАК ID,
		               |	ВТ_ТаблицаДанныхПоСостояниямОР.MachineID КАК MachineID,
		               |	ВТ_ТаблицаПараметров.Name КАК MachineParamName,
		               |	ВТ_ТаблицаДанныхПоСостояниямОР.MachineParamID КАК MachineParamID,
		               |	ВТ_ТаблицаДанныхПоСостояниямОР.StartTime КАК StartTime,
		               |	ВТ_ТаблицаДанныхПоСостояниямОР.EndTime КАК EndTime,
		               |	ВТ_ТаблицаПараметров.Priority КАК Priority,
		               |	ВЫРАЗИТЬ(ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
		               |	ВТ_ТаблицаПараметров.ОбъектТОИР КАК ВидЭксплуатации,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ТаблицаПараметров.ОбъектТОИР ЕСТЬ NULL
		               |				И ВТ_ТаблицаПараметров.ОбъектТОИР.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой)
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Простой,
		               |	ВТ_ТаблицаПараметровПричиныПростоя.ОбъектТОИР КАК ПричинаПростоя,
		               |	ВТ_ТаблицаПараметровПричиныПростоя.ID КАК ПричинаПростояID,
		               |	ВТ_ТаблицаПараметровПричиныПростоя.IntegrationID КАК ПричинаПростояIntegrationID,
		               |	ВТ_ТаблицаПараметровПричиныПростоя.Name КАК ПричинаПростояСтрока
		               |ПОМЕСТИТЬ ВТ_ТаблицаДанныхПоВидамЭксплуатации
		               |ИЗ
		               |	ВТ_ТаблицаДанныхПоСостояниямОР КАК ВТ_ТаблицаДанныхПоСостояниямОР
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПараметров КАК ВТ_ТаблицаПараметров
		               |		ПО ВТ_ТаблицаДанныхПоСостояниямОР.MachineParamID = ВТ_ТаблицаПараметров.ID
		               |			И (ВТ_ТаблицаПараметров.ВидЭксплуатации)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПараметров КАК ВТ_ТаблицаПараметровПричиныПростоя
		               |		ПО ВТ_ТаблицаДанныхПоСостояниямОР.MachineParamID = ВТ_ТаблицаПараметровПричиныПростоя.ID
		               |			И (НЕ ВТ_ТаблицаПараметров.ВидЭксплуатации)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеСтанковИОборудования КАК ВТ_СоответствиеСтанковИОборудования
		               |		ПО ВТ_ТаблицаДанныхПоСостояниямОР.MachineID = ВТ_СоответствиеСтанковИОборудования.IDСтанка
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineID,
		               |	StartTime,
		               |	EndTime,
		               |	Priority
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_СоответствиеСтанковИОборудования
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаПараметров
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineID КАК MachineID,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.StartTime КАК Time
		               |ПОМЕСТИТЬ ВТ_ДатыПоОРИсходная
		               |ИЗ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации КАК ВТ_ТаблицаДанныхПоВидамЭксплуатации
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineID,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.EndTime
		               |ИЗ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации КАК ВТ_ТаблицаДанныхПоВидамЭксплуатации
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_ДатыПоОРИсходная.MachineID КАК MachineID,
		               |	ВТ_ДатыПоОРИсходная.Time КАК Time
		               |ПОМЕСТИТЬ ВТ_ДатыПоОР
		               |ИЗ
		               |	ВТ_ДатыПоОРИсходная КАК ВТ_ДатыПоОРИсходная
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineID,
		               |	Time
		               |;
		               |
					   //|////////////////////////////////////////////////////////////////////////////////
					   //|УНИЧТОЖИТЬ ВТ_ДатыПоОРИсходная
					   //|;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_ДатыПоОР1.MachineID КАК MachineID,
		               |	ВТ_ДатыПоОР1.Time КАК StartTime,
		               |	МИНИМУМ(ВТ_ДатыПоОР2.Time) КАК EndTime
		               |ПОМЕСТИТЬ ВТ_ИнтервалыПоОР
		               |ИЗ
		               |	ВТ_ДатыПоОР КАК ВТ_ДатыПоОР1
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыПоОР КАК ВТ_ДатыПоОР2
		               |		ПО ВТ_ДатыПоОР1.MachineID = ВТ_ДатыПоОР2.MachineID
		               |			И ВТ_ДатыПоОР1.Time < ВТ_ДатыПоОР2.Time
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ДатыПоОР1.Time,
		               |	ВТ_ДатыПоОР1.MachineID
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineID,
		               |	StartTime
		               |;
		               |
					   //|////////////////////////////////////////////////////////////////////////////////
					   //|УНИЧТОЖИТЬ ВТ_ДатыПоОР
					   //|;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineID КАК MachineID,
		               |	ВТ_ИнтервалыПоОР.StartTime КАК StartTime,
		               |	ВТ_ИнтервалыПоОР.EndTime КАК EndTime,
		               |	МИНИМУМ(ВТ_ТаблицаДанныхПоВидамЭксплуатации.Priority) КАК Priority
		               |ПОМЕСТИТЬ ВТ_ИнтервалыПоОРСПриоритетом
		               |ИЗ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации КАК ВТ_ТаблицаДанныхПоВидамЭксплуатации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнтервалыПоОР КАК ВТ_ИнтервалыПоОР
		               |		ПО ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineID = ВТ_ИнтервалыПоОР.MachineID
		               |			И ВТ_ТаблицаДанныхПоВидамЭксплуатации.StartTime <= ВТ_ИнтервалыПоОР.StartTime
		               |			И ВТ_ТаблицаДанныхПоВидамЭксплуатации.EndTime > ВТ_ИнтервалыПоОР.StartTime
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineID,
		               |	ВТ_ИнтервалыПоОР.StartTime,
		               |	ВТ_ИнтервалыПоОР.EndTime
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineID,
		               |	StartTime,
		               |	Priority
		               |;
		               |
					   //|////////////////////////////////////////////////////////////////////////////////
					   //|УНИЧТОЖИТЬ ВТ_ИнтервалыПоОР
					   //|;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.ID КАК ID,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineID КАК MachineID,
		               |	ВТ_ИнтервалыПоОРСПриоритетом.StartTime КАК StartTime,
		               |	ВТ_ИнтервалыПоОРСПриоритетом.EndTime КАК EndTime,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineParamID КАК MachineParamID
		               |ПОМЕСТИТЬ ВТ_ПодготовленныеИнетрвалы
		               |ИЗ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации КАК ВТ_ТаблицаДанныхПоВидамЭксплуатации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнтервалыПоОРСПриоритетом КАК ВТ_ИнтервалыПоОРСПриоритетом
		               |		ПО ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineID = ВТ_ИнтервалыПоОРСПриоритетом.MachineID
		               |			И ВТ_ТаблицаДанныхПоВидамЭксплуатации.Priority = ВТ_ИнтервалыПоОРСПриоритетом.Priority
		               |			И ВТ_ТаблицаДанныхПоВидамЭксплуатации.StartTime <= ВТ_ИнтервалыПоОРСПриоритетом.StartTime
		               |			И ВТ_ТаблицаДанныхПоВидамЭксплуатации.EndTime > ВТ_ИнтервалыПоОРСПриоритетом.StartTime
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineID,
		               |	MachineParamID
		               |;
		               |
					   //|////////////////////////////////////////////////////////////////////////////////
					   //|УНИЧТОЖИТЬ ВТ_ИнтервалыПоОРСПриоритетом
					   //|;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВТ_ПодготовленныеИнетрвалы.MachineID КАК MachineID,
		               |	МАКСИМУМ(ВТ_ПодготовленныеИнетрвалы.EndTime) КАК EndTime,
		               |	ВТ_ПодготовленныеИнетрвалы.MachineParamID КАК MachineParamID
		               |ПОМЕСТИТЬ ВТ_МаксимальныеДатыОкончанияСостояний
		               |ИЗ
		               |	ВТ_ПодготовленныеИнетрвалы КАК ВТ_ПодготовленныеИнетрвалы
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ПодготовленныеИнетрвалы.MachineParamID,
		               |	ВТ_ПодготовленныеИнетрвалы.MachineID
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineID,
		               |	MachineParamID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВТ_ПодготовленныеИнетрвалы.ID КАК ID,
		               |	МИНИМУМ(ВТ_ПодготовленныеИнетрвалы.MachineID) КАК MachineID,
		               |	МИНИМУМ(ВТ_ПодготовленныеИнетрвалы.StartTime) КАК StartTime,
		               |	МИНИМУМ(ЕСТЬNULL(ВТ_ПодготовленныеИнетрвалы1.StartTime, ВТ_ПодготовленныеИнетрвалы.EndTime)) КАК EndTime,
		               |	МИНИМУМ(ВТ_ПодготовленныеИнетрвалы.MachineParamID) КАК MachineParamID
		               |ПОМЕСТИТЬ ВТ_СледующиеСостояния
		               |ИЗ
		               |	ВТ_ПодготовленныеИнетрвалы КАК ВТ_ПодготовленныеИнетрвалы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПодготовленныеИнетрвалы КАК ВТ_ПодготовленныеИнетрвалы1
		               |		ПО ВТ_ПодготовленныеИнетрвалы.MachineID = ВТ_ПодготовленныеИнетрвалы1.MachineID
		               |			И ВТ_ПодготовленныеИнетрвалы.EndTime <= ВТ_ПодготовленныеИнетрвалы1.StartTime
		               |ГДЕ
		               |	НЕ ВТ_ПодготовленныеИнетрвалы.MachineParamID = ВТ_ПодготовленныеИнетрвалы1.MachineParamID
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ПодготовленныеИнетрвалы.ID
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_ПодготовленныеИнетрвалы.ID,
		               |	ВТ_ПодготовленныеИнетрвалы.MachineID,
		               |	ВТ_ПодготовленныеИнетрвалы.StartTime,
		               |	ВТ_МаксимальныеДатыОкончанияСостояний.EndTime,
		               |	ВТ_ПодготовленныеИнетрвалы.MachineParamID
		               |ИЗ
		               |	ВТ_ПодготовленныеИнетрвалы КАК ВТ_ПодготовленныеИнетрвалы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодготовленныеИнетрвалы КАК ВТ_ПодготовленныеИнетрвалы1
		               |		ПО ВТ_ПодготовленныеИнетрвалы.MachineID = ВТ_ПодготовленныеИнетрвалы1.MachineID
		               |			И (НЕ ВТ_ПодготовленныеИнетрвалы.MachineParamID = ВТ_ПодготовленныеИнетрвалы1.MachineParamID)
		               |			И ВТ_ПодготовленныеИнетрвалы.EndTime <= ВТ_ПодготовленныеИнетрвалы1.StartTime
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныеДатыОкончанияСостояний КАК ВТ_МаксимальныеДатыОкончанияСостояний
		               |		ПО ВТ_ПодготовленныеИнетрвалы.MachineID = ВТ_МаксимальныеДатыОкончанияСостояний.MachineID
		               |			И ВТ_ПодготовленныеИнетрвалы.MachineParamID = ВТ_МаксимальныеДатыОкончанияСостояний.MachineParamID
		               |ГДЕ
		               |	ВТ_ПодготовленныеИнетрвалы1.MachineID ЕСТЬ NULL
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineID,
		               |	MachineParamID,
		               |	EndTime
		               |;
		               |
					   //|////////////////////////////////////////////////////////////////////////////////
					   //|УНИЧТОЖИТЬ ВТ_ПодготовленныеИнетрвалы
					   //|;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	МИНИМУМ(ВТ_СледующиеСостояния.ID) КАК ID,
		               |	МИНИМУМ(ВТ_СледующиеСостояния.StartTime) КАК StartTime,
		               |	ВТ_СледующиеСостояния.EndTime КАК EndTime
		               |ПОМЕСТИТЬ ВТ_СлитыеИнетрвалы
		               |ИЗ
		               |	ВТ_СледующиеСостояния КАК ВТ_СледующиеСостояния
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_СледующиеСостояния.MachineID,
		               |	ВТ_СледующиеСостояния.MachineParamID,
		               |	ВТ_СледующиеСостояния.EndTime
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
					   //|////////////////////////////////////////////////////////////////////////////////
					   //|УНИЧТОЖИТЬ ВТ_СледующиеСостояния
					   //|;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.ID КАК ID,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineID КАК MachineID,
		               |	ВТ_СлитыеИнетрвалы.StartTime КАК StartTime,
		               |	ВТ_СлитыеИнетрвалы.EndTime КАК EndTime,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineParamName КАК MachineParamName,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.MachineParamID КАК MachineParamID,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.Простой КАК Простой,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.ВидЭксплуатации КАК ВидЭксплуатации,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.ПричинаПростоя КАК ПричинаПростоя,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.ПричинаПростояID КАК ПричинаПростояID,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.ПричинаПростояIntegrationID КАК ПричинаПростояIntegrationID,
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации.ПричинаПростояСтрока КАК ПричинаПростояСтрока
		               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
		               |ИЗ
		               |	ВТ_ТаблицаДанныхПоВидамЭксплуатации КАК ВТ_ТаблицаДанныхПоВидамЭксплуатации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СлитыеИнетрвалы КАК ВТ_СлитыеИнетрвалы
		               |		ПО ВТ_ТаблицаДанныхПоВидамЭксплуатации.ID = ВТ_СлитыеИнетрвалы.ID
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВТ_ПодготовленныеДанные.ID КАК ID,
		               |	ВТ_ПодготовленныеДанные.MachineID КАК MachineID,
		               |	ВТ_ПодготовленныеДанные.StartTime КАК StartTime,
		               |	ВТ_ПодготовленныеДанные.EndTime КАК EndTime,
		               |	ВТ_ПодготовленныеДанные.MachineParamName КАК MachineParamName,
		               |	ВТ_ПодготовленныеДанные.MachineParamID КАК MachineParamID,
		               |	ВТ_ПодготовленныеДанные.Простой КАК Простой,
		               |	ВТ_ПодготовленныеДанные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ПодготовленныеДанные.ВидЭксплуатации КАК ВидЭксплуатации,
		               |	ВТ_ПодготовленныеДанные.ПричинаПростояID КАК ПричинаПростояID,
		               |	ВТ_ПодготовленныеДанные.ПричинаПростояIntegrationID КАК ПричинаПростояIntegrationID,
		               |	ВТ_ПодготовленныеДанные.ПричинаПростояСтрока КАК ПричинаПростояСтрока,
		               |	ВТ_ПодготовленныеДанные.ПричинаПростоя КАК ПричинаПростоя
		               |ИЗ
		               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеДокументовДиспетчер КАК торо_СоответствиеДокументовДиспетчер
		               |		ПО ВТ_ПодготовленныеДанные.ID = торо_СоответствиеДокументовДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеДокументовДиспетчер.ТипДокумента = ""ДокументСсылка.торо_СостоянияОбъектовРемонта"")
		               |ГДЕ
		               |	торо_СоответствиеДокументовДиспетчер.ДокументТОИР ЕСТЬ NULL
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	StartTime
		               |ИТОГИ ПО
		               |	MachineID";
#КонецОбласти
		Запрос.УстановитьПараметр("ДанныеПоСостояниямОР", ДанныеПоСостояниямОР);
		Запрос.УстановитьПараметр("Параметры", Параметры);
		Запрос.УстановитьПараметр("ТаблицаОР", ОбъектыРемонта);
		Запрос.УстановитьПараметр("ТаблицаСтанков", Станки);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДокументовСостоянийВерхнийУровень = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДокументовСостоянийВерхнийУровень.Следующий() Цикл
		    ВыборкаДокументовСостоянийНижнийУровень = ВыборкаДокументовСостоянийВерхнийУровень.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ДокументУспешноСоздан = СоздатьДокументыСостоянийОР(ВыборкаДокументовСостоянийНижнийУровень, Узел, СозданныеПричиныПростоя);
			УспешноеВыполнение = УспешноеВыполнение И ДокументУспешноСоздан;
		КонецЦикла;
		
		ШаблонОписаниеРезультата = Нстр("ru='Из АИС Диспетчер в систему загружены и обработаны данные мониторинга по состояниям за период %1-%2!'");
		ОписаниеРезультата = СтрШаблон(ШаблонОписаниеРезультата, ПараметрыЗапроса["from_date"], ПараметрыЗапроса["to_date"]);
		СделатьЗаписьВЖурналеРегистрации(ОписаниеРезультата, УровеньЖурналаРегистрации.Информация, "Обработка данных мониторинга");
	КонецЦикла;
#КонецОбласти
	
	Возврат УспешноеВыполнение;
КонецФункции

Функция ПодготовитьТелоЗапросаМетодаGetMonitoringValueList(ДатаОтсчетаДляЗагрузкиДокументов, Детализация)
	ДатаНачалаПериода = ДатаОтсчетаДляЗагрузкиДокументов;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ОР
	               |ИЗ
	               |	РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |ГДЕ
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ОбъектыРемонта""
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.торо_ВидыЭксплуатации) КАК ВидЭксплуатации
	               |ПОМЕСТИТЬ ВТ_ВидыЭксплуатации
	               |ИЗ
	               |	РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |ГДЕ
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ВидыЭксплуатации""
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидЭксплуатации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации КАК ВидЭксплуатации,
	               |	торо_ТекущееСостояниеОРСрезПоследних.Период КАК Период
	               |ПОМЕСТИТЬ ВТ_ТекущееСостояниеОР
	               |ИЗ
	               |	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних КАК торо_ТекущееСостояниеОРСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ВТ_ТекущееСостояниеОР.Период КАК Период
	               |ИЗ
	               |	ВТ_ТекущееСостояниеОР КАК ВТ_ТекущееСостояниеОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыЭксплуатации КАК ВТ_ВидыЭксплуатации
	               |		ПО ВТ_ТекущееСостояниеОР.ВидЭксплуатации = ВТ_ВидыЭксплуатации.ВидЭксплуатации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОР КАК ВТ_ОР
	               |		ПО ВТ_ТекущееСостояниеОР.ОбъектРемонта = ВТ_ОР.ОбъектРемонта
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	МАКСИМУМ(торо_СоответствиеДокументовДиспетчер.ДатаДокумента) КАК ДатаДокумента
	               |ИЗ
	               |	РегистрСведений.торо_СоответствиеДокументовДиспетчер КАК торо_СоответствиеДокументовДиспетчер
	               |ГДЕ
	               |	торо_СоответствиеДокументовДиспетчер.ТипДокумента = ""ДокументСсылка.торо_СостоянияОбъектовРемонта""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СоответствиеДокументовДиспетчер.ТипДокумента";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если Не РезультатЗапроса[3].Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса[3].Выбрать();
		ВыборкаЗапроса.Следующий();
	    ДатаНачалаПериода = ВыборкаЗапроса.Период;
	ИначеЕсли Не РезультатЗапроса[4].Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса[4].Выбрать();
		ВыборкаЗапроса.Следующий();
	    ДатаНачалаПериода = ВыборкаЗапроса.ДатаДокумента;
	КонецЕсли;
	
	Если ДатаНачалаПериода > ТекущаяДата() Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметровЗапроса = Новый Массив();
	
	Пока ДатаНачалаПериода < ТекущаяДата() Цикл
		ДатаОкончанияПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачалаПериода, Детализация, 1);
		
		// Период для этого метода не может превышать 30 дней (иначе метод не возвращает данные)! Если детализация месяц и количество дней больше 30,
		// разбиваем на два периода: 30 дней и один день.
		КоличествоДней = (ДатаОкончанияПериода - ДатаНачалаПериода) / 86400;
		Если КоличествоДней > 30 Тогда
			FromDate = ПреобразоватьДатуВСтроку(ДатаНачалаПериода);
			ToDate = ПреобразоватьДатуВСтроку(ДатаОкончанияПериода - 86400);
			
			ПараметрыЗапроса = Новый Соответствие();
			ПараметрыЗапроса.Вставить("from_date", FromDate);
			ПараметрыЗапроса.Вставить("to_date", ToDate);
			МассивПараметровЗапроса.Добавить(ПараметрыЗапроса);
			
			ДатаНачалаПериода = ДатаОкончанияПериода - 86400 + 1;
		КонецЕсли;
		
		FromDate = ПреобразоватьДатуВСтроку(ДатаНачалаПериода);
		ToDate = ПреобразоватьДатуВСтроку(ДатаОкончанияПериода);
		
		ПараметрыЗапроса = Новый Соответствие();
		ПараметрыЗапроса.Вставить("from_date", FromDate);
		ПараметрыЗапроса.Вставить("to_date", ToDate);
		
		МассивПараметровЗапроса.Добавить(ПараметрыЗапроса);
		ДатаНачалаПериода = ДатаОкончанияПериода + 1;
	КонецЦикла;
	
	Возврат МассивПараметровЗапроса;
КонецФункции

Функция СоздатьДокументыСостоянийОР(ВыборкаДокументовСостоянийНижнийУровень, Узел, СозданныеПричиныПростоя)
	КоличествоЗаписейВДокументе = 0;
	ЕстьОшибки = Ложь;
	
	ДанныеДокументаИзДиспетчера = Новый Соответствие();
	
	Пока ВыборкаДокументовСостоянийНижнийУровень.Следующий() Цикл
		Если КоличествоЗаписейВДокументе = 0 Тогда
		    НовыйДокумент = Документы.торо_СостоянияОбъектовРемонта.СоздатьДокумент();
			
			НовыйДокумент.Дата = ТекущаяДата();
			НовыйДокумент.Организация = Узел.ОрганизацияПоУмолчанию;
			НовыйДокумент.Подразделение = ?(ЗначениеЗаполнено(ВыборкаДокументовСостоянийНижнийУровень.ОбъектРемонта), ВыборкаДокументовСостоянийНижнийУровень.ОбъектРемонта.Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка());
			НовыйДокумент.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
			НовыйДокумент.Комментарий = "Загружен из АИС Диспетчер.";
		КонецЕсли;
		
		НоваяСтрокаТЧ = НовыйДокумент.ОбъектыРемонта.Добавить();
		НоваяСтрокаТЧ.ОбъектРемонта = ВыборкаДокументовСостоянийНижнийУровень.ОбъектРемонта;
		НоваяСтрокаТЧ.ДатаОкончания = ВыборкаДокументовСостоянийНижнийУровень.StartTime;
		НоваяСтрокаТЧ.ВидЭксплуатации = ВыборкаДокументовСостоянийНижнийУровень.ВидЭксплуатации;
		ЗаполнятьВидПуска = ?(ЗначениеЗаполнено(НоваяСтрокаТЧ.ВидЭксплуатации) И НоваяСтрокаТЧ.ВидЭксплуатации.ОбязательныйВводВидаПуска, Истина, Ложь);
		НоваяСтрокаТЧ.ВидПуска = ?(ЗаполнятьВидПуска, Узел.ВидПускаПоУмолчанию, Справочники.торо_ВидыПусковОР.ПустаяСсылка());
		
		// В АИС Диспетчер на один период для одного станка может быть несколько состояний. Одним из источников
		// состояний может являться формула. Получается состояния можно настроить таким образом, что для простоя
		// на какой-то период может отсутствовать причина простоя. 
		// Решение проблемы:
		//	- если для простоя на период причина простоя и ее наименование незаполнены, то создается причина
		//	простоя с наименованием вида эксплуатации;
		//	- если для простоя на период причина простоя незаполнена, то создается причина простоя с 
		// наименованием причины простоя из Диспетчера.
		Если ВыборкаДокументовСостоянийНижнийУровень.Простой
			И ЗначениеЗаполнено(ВыборкаДокументовСостоянийНижнийУровень.ПричинаПростоя) Тогда
			НоваяСтрокаТЧ.ПричинаПростоя = ВыборкаДокументовСостоянийНижнийУровень.ПричинаПростоя;
		ИначеЕсли ВыборкаДокументовСостоянийНижнийУровень.Простой Тогда
			Если ЗначениеЗаполнено(ВыборкаДокументовСостоянийНижнийУровень.ПричинаПростояСтрока) Тогда
			    ПричинаПростояНаименование = ВыборкаДокументовСостоянийНижнийУровень.ПричинаПростояСтрока;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаДокументовСостоянийНижнийУровень.ВидЭксплуатации) Тогда
				ПричинаПростояНаименование = ВыборкаДокументовСостоянийНижнийУровень.ВидЭксплуатации.Наименование;
			Иначе
				ПричинаПростояНаименование = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПричинаПростояНаименование)
				И ЗначениеЗаполнено(СозданныеПричиныПростоя[ПричинаПростояНаименование]) Тогда
				НоваяСтрокаТЧ.ПричинаПростоя = СозданныеПричиныПростоя[ПричинаПростояНаименование];
			ИначеЕсли ЗначениеЗаполнено(ПричинаПростояНаименование) Тогда
			    ПричинаПростоя = Справочники.торо_ПричиныПростояОборудования.СоздатьЭлемент();
				ПричинаПростоя.Наименование = ПричинаПростояНаименование;
				ПричинаПростоя.ВидПростоя = Перечисления.торо_ВидыПростояОборудования.Прочее;
				ПричинаПростоя.Записать();
				
				СозданныеПричиныПростоя[ПричинаПростояНаименование] = ПричинаПростоя.Ссылка;
				
				НоваяСтрокаТЧ.ПричинаПростоя = ПричинаПростоя.Ссылка;
				
				МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ТипОбъекта = "СправочникСсылка.торо_ПричиныПростояОборудования";
				МенеджерЗаписи.УникальныйИдентификаторДиспетчер = ВыборкаДокументовСостоянийНижнийУровень.ПричинаПростояIntegrationID;
				МенеджерЗаписи.ОбъектТОИР = ПричинаПростоя.Ссылка;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДокументаИзДиспетчера[ВыборкаДокументовСостоянийНижнийУровень.ID] = ВыборкаДокументовСостоянийНижнийУровень.StartTime;
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.ОбъектРемонта) Или Не ЗначениеЗаполнено(НоваяСтрокаТЧ.ВидЭксплуатации)
			Или (ВыборкаДокументовСостоянийНижнийУровень.Простой
					И Не ЗначениеЗаполнено(НоваяСтрокаТЧ.ПричинаПростоя)) Тогда
			ШаблонОписаниеОшибки = Нстр("ru='В документе <Состояния объектов ремонта> (строка %1) необходимо указать ОР (ID в АИС Диспетчер %2), вид эксплуатации <%3> (ID в АИС Диспетчер %4) или причину простоя <%5> (ID в АИС Диспетчер %6). Одно или несколько из этих полей не заполнено!'");
			ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, НоваяСтрокаТЧ.НомерСтроки, ВыборкаДокументовСостоянийНижнийУровень.MachineID,
										ВыборкаДокументовСостоянийНижнийУровень.MachineParamName, ВыборкаДокументовСостоянийНижнийУровень.MachineParamID,
										ВыборкаДокументовСостоянийНижнийУровень.ПричинаПростояСтрока, ВыборкаДокументовСостоянийНижнийУровень.ПричинаПростояID);
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи документа <Состояния объектов ремонта>");
			ЕстьОшибки = Истина;
			
			НовыйДокумент.Комментарий = НовыйДокумент.Комментарий + Символы.ПС + "Предупреждение! " + ОписаниеОшибки;
		КонецЕсли;
		
		КоличествоЗаписейВДокументе = КоличествоЗаписейВДокументе + 1;
		
	    Если КоличествоЗаписейВДокументе < 200 Тогда
		    Продолжить;
		КонецЕсли;
		
		КоличествоЗаписейВДокументе = 0;
		ЕстьОшибки = Не ЗаписатьДокумент(НовыйДокумент, ЕстьОшибки, "<Состояния объектов ремонта>");
		
		Если Не ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
		    Продолжить;
		КонецЕсли;
		
		Для каждого ДанныеДокумента Из ДанныеДокументаИзДиспетчера Цикл
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеДокументовДиспетчер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = "ДокументСсылка.торо_СостоянияОбъектовРемонта";
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = ДанныеДокумента.Ключ;
			МенеджерЗаписи.ДокументТОИР = НовыйДокумент.Ссылка;
			МенеджерЗаписи.ДатаДокумента = ДанныеДокумента.Значение;
			МенеджерЗаписи.ДатаЗагрузки = НовыйДокумент.Дата;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
		ДанныеДокументаИзДиспетчера.Очистить();
		ЕстьОшибки = Ложь;
	КонецЦикла;
	
	Если КоличествоЗаписейВДокументе > 0 И КоличествоЗаписейВДокументе < 200 Тогда
	    ЕстьОшибки = Не ЗаписатьДокумент(НовыйДокумент, ЕстьОшибки, "<Состояния объектов ремонта>");
		
		Если Не ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
		    Возврат Ложь;
		КонецЕсли;
		
		Для каждого ДанныеДокумента Из ДанныеДокументаИзДиспетчера Цикл
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеДокументовДиспетчер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = "ДокументСсылка.торо_СостоянияОбъектовРемонта";
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = ДанныеДокумента.Ключ;
			МенеджерЗаписи.ДокументТОИР = НовыйДокумент.Ссылка;
			МенеджерЗаписи.ДатаДокумента = ДанныеДокумента.Значение;
			МенеджерЗаписи.ДатаЗагрузки = НовыйДокумент.Дата;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
КонецФункции

#КонецОбласти

#Область ДокументыПоказателейЭксплуатации

Функция ПолучитьДанныеПоПоказателямЭксплуатации(Узел, ТаблицаСоответствияВебСервисов)
	МассивНазванийТаблиц = Новый Массив();
	МассивНазванийТаблиц.Добавить("Параметры");
	МассивНазванийТаблиц.Добавить("ОбъектыРемонта");
	СтруктураТаблиц = ПолучитьОписанияВспомогательныхТаблиц(МассивНазванийТаблиц);
	Если Не ЗначениеЗаполнено(СтруктураТаблиц) Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ЗагружатьКП = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей") И Узел.ЗагружатьКонтролируемыеПоказателиОР;
	ЗагружатьПН = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования") И Узел.ЗагружатьНаработкуОР;
	
	Если Не ЗагружатьКП И Не ЗагружатьПН Тогда
	    Возврат Истина;
	КонецЕсли;
	
	УспешноеВыполнение = ЗагрузитьВспомогательныеДанныеПоПоказателямЭксплуатации(Узел, СтруктураТаблиц, ТаблицаСоответствияВебСервисов);
	Если Не УспешноеВыполнение Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	Если ЗагружатьКП Тогда
		ДлительныеОперации.СообщитьПрогресс(65, "Выполняется загрузка данных по контролируемым показателям из АИС Диспетчер");
	    УспешноеВыполнение = ПолучитьДанныеПоИзмеряемымПоказателям(Узел, СтруктураТаблиц, ТаблицаСоответствияВебСервисов);
	КонецЕсли;
	
	Если ЗагружатьПН Тогда
		ДлительныеОперации.СообщитьПрогресс(75, "Выполняется загрузка данных по наработке из АИС Диспетчер");
	    УспешноеВыполнение = ПолучитьДанныеПоНаработке(Узел, СтруктураТаблиц, ТаблицаСоответствияВебСервисов);
	КонецЕсли;
	
	Возврат УспешноеВыполнение;
КонецФункции

Функция ЗагрузитьВспомогательныеДанныеПоПоказателямЭксплуатации(Узел, СтруктураТаблиц, ТаблицаСоответствияВебСервисов)
#Область ОбъектыРемонта
	ДополнительноеОписание = НСтр("ru = 'при получении ОР'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоляДатыСтрокой = "dtProducer,dtInput,dtGuarantee";
	СтруктураТаблиц.ОбъектыРемонта = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentList", "ОбъектыРемонта", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка,, ПоляДатыСтрокой);
#КонецОбласти
	
#Область СписокПоказателейЭксплуатации
	ДополнительноеОписание = НСтр("ru = 'при получении показателей эксплуатации'");
	ОбязательнаяПроверка = "Если Не СтрокаДанных.MachineParamTypeID = 3 Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	СтруктураТаблиц.Параметры = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineParamList", "Параметры", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
	Возврат Истина;
КонецФункции

Функция ПодготовитьТелоЗапросаМетодаGetAdditionalSignalAnalitics(ДатаОтсчетаДляЗагрузкиДокументов, ТипДокумента, Детализация)
	ДатаНачалаПериода = ДатаОтсчетаДляЗагрузкиДокументов;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	МАКСИМУМ(торо_СоответствиеДокументовДиспетчер.ДатаДокумента) КАК ДатаДокумента
	               |ИЗ
	               |	РегистрСведений.торо_СоответствиеДокументовДиспетчер КАК торо_СоответствиеДокументовДиспетчер
	               |ГДЕ
	               |	торо_СоответствиеДокументовДиспетчер.ТипДокумента = &ТипДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СоответствиеДокументовДиспетчер.ТипДокумента";
	
	ШаблонИмяПараметра = "ДокументСсылка.%1";
	ИмяПараметра = СтрШаблон(ШаблонИмяПараметра, ТипДокумента);
	
	Запрос.УстановитьПараметр("ТипДокумента", ИмяПараметра);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
	    ДатаНачалаПериода = ВыборкаЗапроса.ДатаДокумента;
	КонецЕсли;
	
	Если ДатаНачалаПериода > ТекущаяДата() Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	МассивТелЗапросов = Новый Массив();
	
	Пока ДатаНачалаПериода < ТекущаяДата() Цикл
		ДатаОкончанияПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачалаПериода, Детализация, 1);
		
	    // Период для этого метода не может превышать 30 дней!
		FromDate = ПреобразоватьДатуВСтроку(ДатаНачалаПериода);
		ToDate = ПреобразоватьДатуВСтроку(ДатаОкончанияПериода);
		
		ПараметрыЗапроса = Новый Соответствие();
		ПараметрыЗапроса.Вставить("from_date", FromDate);
		ПараметрыЗапроса.Вставить("to_date", ToDate);
		
		МассивТелЗапросов.Добавить(ПараметрыЗапроса);
		ДатаНачалаПериода = ДатаОкончанияПериода + 1;
	КонецЦикла;
	
	Возврат МассивТелЗапросов;
КонецФункции

#Область ДокументыКонтролируемыхПоказателей

Функция ПолучитьДанныеПоИзмеряемымПоказателям(Узел, СтруктураТаблиц, ТаблицаСоответствияВебСервисов)
	МассивТелЗапросов = ПодготовитьТелоЗапросаМетодаGetAdditionalSignalAnalitics(Узел.ДатаОтсчетаДляЗагрузкиДокументов, "торо_УчетКонтролируемыхПоказателей", Узел.ДетализацияПериодаЗагрузкиДанных);
	Если Не ЗначениеЗаполнено(МассивТелЗапросов) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
#Область Станки
	ДополнительноеОписание = НСтр("ru = 'при получении станков'");
	Станки = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineList", "Станки", ТаблицаСоответствияВебСервисов, ДополнительноеОписание);
#КонецОбласти

	УспешноеВыполнение = Истина;

#Область КонтролируемыеПоказатели
	ДополнительноеОписание = НСтр("ru = 'при получении данных по контролируемым показателям'");
	ПоляДатыСтрокой = "DateTime";
	
	Для каждого ПараметрыЗапроса Из МассивТелЗапросов Цикл
		ДанныеПоКонтролируемымПоказателям = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetAdditionalSignalAnalitics", "ДанныеПоКонтролируемымПоказателям", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,,,, ПоляДатыСтрокой,, ПараметрыЗапроса);
	
		Если ДанныеПоКонтролируемымПоказателям.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
#Область ТекстЗапроса
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсходнаяТаблицаОР.ID КАК ID,
		               |	ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID,
		               |	ИсходнаяТаблицаОР.Name КАК Name
		               |ПОМЕСТИТЬ ВТ_ТаблицаОР
		               |ИЗ
		               |	&ТаблицаОР КАК ИсходнаяТаблицаОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИсходнаяТаблицаСтанков.ID КАК ID,
		               |	ИсходнаяТаблицаСтанков.IntegrationID КАК IntegrationID,
		               |	ИсходнаяТаблицаСтанков.kEquipmentID КАК kEquipmentID
		               |ПОМЕСТИТЬ ВТ_ТаблицаСтанков
		               |ИЗ
		               |	&ТаблицаСтанков КАК ИсходнаяТаблицаСтанков
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВТ_ТаблицаОР.ID КАК ID,
		               |	ВТ_ТаблицаОР.IntegrationID КАК IntegrationID,
		               |	ВТ_ТаблицаСтанков.ID КАК IDСтанка,
		               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК ОбъектРемонта,
		               |	ВТ_ТаблицаОР.Name КАК Name
		               |ПОМЕСТИТЬ ВТ_СоответствиеСтанковИОборудования
		               |ИЗ
		               |	ВТ_ТаблицаОР КАК ВТ_ТаблицаОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
		               |		ПО ВТ_ТаблицаОР.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ОбъектыРемонта"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСтанков КАК ВТ_ТаблицаСтанков
		               |		ПО ВТ_ТаблицаОР.ID = ВТ_ТаблицаСтанков.kEquipmentID
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	IDСтанка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаСтанков
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИсходнаяТаблицаСостоянийОР.ID КАК ID,
		               |	ИсходнаяТаблицаСостоянийОР.MachineID КАК MachineID,
		               |	ИсходнаяТаблицаСостоянийОР.MachineParamID КАК MachineParamID,
		               |	ИсходнаяТаблицаСостоянийОР.DateTime КАК DateTime,
		               |	ИсходнаяТаблицаСостоянийОР.Average КАК Value
		               |ПОМЕСТИТЬ ВТ_ТаблицаДанныхПоКонтролируемымПоказателям
		               |ИЗ
		               |	&ТаблицаДанныхПоКонтролируемымПоказателям КАК ИсходнаяТаблицаСостоянийОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИсходнаяТаблицаПараметров.ID КАК ID,
		               |	ИсходнаяТаблицаПараметров.IntegrationID КАК IntegrationID,
		               |	ИсходнаяТаблицаПараметров.Name КАК Name,
		               |	ИсходнаяТаблицаПараметров.MeasureUnit КАК MeasureUnit
		               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаПараметров
		               |ИЗ
		               |	&ТаблицаПараметров КАК ИсходнаяТаблицаПараметров
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	IntegrationID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаДанныхПоКонтролируемымПоказателям.ID КАК ID,
		               |	ВТ_ТаблицаДанныхПоКонтролируемымПоказателям.MachineID КАК MachineID,
		               |	ВТ_ТаблицаДанныхПоКонтролируемымПоказателям.MachineParamID КАК MachineParamID,
		               |	ВТ_ТаблицаДанныхПоКонтролируемымПоказателям.DateTime КАК DateTime,
		               |	ВТ_ТаблицаДанныхПоКонтролируемымПоказателям.Value КАК Value
		               |ПОМЕСТИТЬ ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям
		               |ИЗ
		               |	ВТ_ТаблицаДанныхПоКонтролируемымПоказателям КАК ВТ_ТаблицаДанныхПоКонтролируемымПоказателям
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеДокументовДиспетчер КАК торо_СоответствиеДокументовДиспетчер
		               |		ПО ВТ_ТаблицаДанныхПоКонтролируемымПоказателям.ID = торо_СоответствиеДокументовДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеДокументовДиспетчер.ТипДокумента = ""ДокументСсылка.торо_УчетКонтролируемыхПоказателей"")
		               |ГДЕ
		               |	торо_СоответствиеДокументовДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineParamID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаДанныхПоКонтролируемымПоказателям
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ИсходнаяТаблицаПараметров.ID КАК ID,
		               |	ВТ_ИсходнаяТаблицаПараметров.Name КАК Name,
		               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта) КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ТаблицаПараметров
		               |ИЗ
		               |	ВТ_ИсходнаяТаблицаПараметров КАК ВТ_ИсходнаяТаблицаПараметров
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
		               |		ПО ВТ_ИсходнаяТаблицаПараметров.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерПН
		               |		ПО ВТ_ИсходнаяТаблицаПараметров.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчерПН.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчерПН.ТипОбъекта = ""СправочникСсылка.ПараметрыВыработкиОС"")
		               |ГДЕ
		               |	торо_СоответствиеОбъектовНСИДиспетчерПН.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ИсходнаяТаблицаПараметров
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям.ID КАК ID,
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям.MachineID КАК MachineID,
		               |	ЕСТЬNULL(ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК ОбъектРемонта,
		               |	ВТ_СоответствиеСтанковИОборудования.Name КАК MachineName,
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям.DateTime КАК ДатаКонтроля,
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям.MachineParamID КАК MachineParamID,
		               |	ВТ_ТаблицаПараметров.Ссылка КАК Показатель,
		               |	ВТ_ТаблицаПараметров.Name КАК ParamName,
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям.Value КАК Значение
		               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
		               |ИЗ
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям КАК ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеСтанковИОборудования КАК ВТ_СоответствиеСтанковИОборудования
		               |		ПО ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям.MachineID = ВТ_СоответствиеСтанковИОборудования.IDСтанка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПараметров КАК ВТ_ТаблицаПараметров
		               |		ПО ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям.MachineParamID = ВТ_ТаблицаПараметров.ID
		               |ГДЕ
		               |	НЕ ВТ_ТаблицаПараметров.Ссылка ЕСТЬ NULL
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	Показатель,
		               |	ДатаКонтроля
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПодготовленнаяТаблицаДанныхПоКонтролируемымПоказателям
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_СоответствиеСтанковИОборудования
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаПараметров
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ИтоговыеДанные.ID КАК ID,
		               |	ВТ_ИтоговыеДанные.MachineID КАК MachineID,
		               |	ВТ_ИтоговыеДанные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ИтоговыеДанные.MachineName КАК MachineName,
		               |	ВТ_ИтоговыеДанные.ДатаКонтроля КАК ДатаКонтроля,
		               |	ВТ_ИтоговыеДанные.MachineParamID КАК MachineParamID,
		               |	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель, ЗНАЧЕНИЕ(ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка)) КАК Показатель,
		               |	ВТ_ИтоговыеДанные.ParamName КАК ParamName,
		               |	ВТ_ИтоговыеДанные.Значение КАК Значение
		               |ИЗ
		               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
		               |		ПО ВТ_ИтоговыеДанные.ОбъектРемонта = торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта
		               |			И ВТ_ИтоговыеДанные.Показатель = торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗначенияКонтролируемыхПоказателей КАК торо_ЗначенияКонтролируемыхПоказателей
		               |		ПО ВТ_ИтоговыеДанные.ОбъектРемонта = торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта
		               |			И ВТ_ИтоговыеДанные.Показатель = торо_ЗначенияКонтролируемыхПоказателей.Показатель
		               |			И ВТ_ИтоговыеДанные.ДатаКонтроля = торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля
		               |ГДЕ
		               |	торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта ЕСТЬ NULL
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаКонтроля
		               |ИТОГИ ПО
		               |	MachineID";
#КонецОбласти
		Запрос.УстановитьПараметр("ТаблицаДанныхПоКонтролируемымПоказателям", ДанныеПоКонтролируемымПоказателям);
		Запрос.УстановитьПараметр("ТаблицаОР", СтруктураТаблиц.ОбъектыРемонта);
		Запрос.УстановитьПараметр("ТаблицаПараметров", СтруктураТаблиц.Параметры);
		Запрос.УстановитьПараметр("ТаблицаСтанков", Станки);
		ВыборкаДокументовКПВерхнийУровень = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДокументовКПВерхнийУровень.Следующий() Цикл
		    ВыборкаДокументовКПНижнийУровень = ВыборкаДокументовКПВерхнийУровень.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ДокументУспешноСоздан = СоздатьДокументКонтролируемыхПоказателей(ВыборкаДокументовКПНижнийУровень, Узел.ОрганизацияПоУмолчанию);
			УспешноеВыполнение = УспешноеВыполнение И ДокументУспешноСоздан;
		КонецЦикла;
		
		ШаблонОписаниеРезультата = Нстр("ru='Из АИС Диспетчер в систему загружены и обработаны данные мониторинга по контролируемым показателям за период %1-%2!'");
		ОписаниеРезультата = СтрШаблон(ШаблонОписаниеРезультата, ПараметрыЗапроса["from_date"], ПараметрыЗапроса["to_date"]);
		СделатьЗаписьВЖурналеРегистрации(ОписаниеРезультата, УровеньЖурналаРегистрации.Информация, "Обработка данных мониторинга");
	КонецЦикла;
#КонецОбласти
	
	Возврат УспешноеВыполнение;
КонецФункции

Функция СоздатьДокументКонтролируемыхПоказателей(ВыборкаДокументовКПНижнийУровень, Организация)
	КоличествоЗаписейВДокументе = 0;
	ЕстьОшибки = Ложь;
	
	ДанныеДокументаИзДиспетчера = Новый Массив();
	
	Пока ВыборкаДокументовКПНижнийУровень.Следующий() Цикл
		Если КоличествоЗаписейВДокументе = 0 Тогда
		    НовыйДокумент = Документы.торо_УчетКонтролируемыхПоказателей.СоздатьДокумент();
			
			НовыйДокумент.Дата = ТекущаяДата();
			НовыйДокумент.Организация = Организация;
			НовыйДокумент.Подразделение = ?(ЗначениеЗаполнено(ВыборкаДокументовКПНижнийУровень.ОбъектРемонта), ВыборкаДокументовКПНижнийУровень.ОбъектРемонта.Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка());
			НовыйДокумент.Комментарий = "Загружен из АИС Диспетчер.";
		КонецЕсли;
		
		НоваяСтрокаТЧ = НовыйДокумент.Показатели.Добавить();
		НоваяСтрокаТЧ.ОбъектРемонта = ВыборкаДокументовКПНижнийУровень.ОбъектРемонта;
		НоваяСтрокаТЧ.Показатель = ВыборкаДокументовКПНижнийУровень.Показатель;
		НоваяСтрокаТЧ.Значение = ВыборкаДокументовКПНижнийУровень.Значение;
		НоваяСтрокаТЧ.ДатаКонтроля = ВыборкаДокументовКПНижнийУровень.ДатаКонтроля;
		
		СтруктураДляРС = Новый Структура();
		СтруктураДляРС.Вставить("ID", ВыборкаДокументовКПНижнийУровень.ID);
		СтруктураДляРС.Вставить("ДатаДокумента", ВыборкаДокументовКПНижнийУровень.ДатаКонтроля);
		ДанныеДокументаИзДиспетчера.Добавить(СтруктураДляРС);
		
		Если Не ЗначениеЗаполнено(ВыборкаДокументовКПНижнийУровень.ОбъектРемонта)
			Или Не ЗначениеЗаполнено(ВыборкаДокументовКПНижнийУровень.Показатель) Тогда
	    	ШаблонОписаниеОшибки = Нстр("ru='В документе КП (строка %1) необходимо указать ОР ""%2"" (ID в АИС Диспетчер %3) и показатель ""%4"" (ID в АИС Диспетчер %5). Одно или несколько из этих полей не заполнено!'");
			ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, НоваяСтрокаТЧ.НомерСтроки,
										ВыборкаДокументовКПНижнийУровень.MachineName, ВыборкаДокументовКПНижнийУровень.MachineID,
										ВыборкаДокументовКПНижнийУровень.ParamName, ВыборкаДокументовКПНижнийУровень.MachineParamID);
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи документа <Учет контролируемых показателей>");
			ЕстьОшибки = Истина;
			
			НовыйДокумент.Комментарий = НовыйДокумент.Комментарий + Символы.ПС + "Предупреждение! " + ОписаниеОшибки;
		КонецЕсли;
		
		КоличествоЗаписейВДокументе = КоличествоЗаписейВДокументе + 1;
		
	    Если КоличествоЗаписейВДокументе < 200 Тогда
		    Продолжить;
		КонецЕсли;
		
		КоличествоЗаписейВДокументе = 0;
		ЕстьОшибки = Не ЗаписатьДокумент(НовыйДокумент, ЕстьОшибки, "<Учет контролируемых показателей>");
		
		ДанныеДокументаИзДиспетчера.Очистить();
		
		Если Не ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
		    Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.торо_СоответствиеДокументовДиспетчер.СоздатьНаборЗаписей();
		
		Для каждого ДанныеДокумента Из ДанныеДокументаИзДиспетчера Цикл
		    НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ТипДокумента = "ДокументСсылка.торо_УчетКонтролируемыхПоказателей";
			НоваяЗапись.УникальныйИдентификаторДиспетчер = ДанныеДокумента.ID;
			НоваяЗапись.ДокументТОИР = НовыйДокумент.Ссылка;
			НоваяЗапись.ДатаДокумента = ДанныеДокумента.ДатаДокумента;
			НоваяЗапись.ДатаЗагрузки = НовыйДокумент.Дата;
		КонецЦикла;
		
		НаборЗаписей.Записать(Ложь);
		
		ЕстьОшибки = Ложь;
	КонецЦикла;
	
	Если КоличествоЗаписейВДокументе > 0 И КоличествоЗаписейВДокументе < 200 Тогда
	    ЕстьОшибки = Не ЗаписатьДокумент(НовыйДокумент, ЕстьОшибки, "<Учет контролируемых показателей>");
		
		Если Не ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
		    Возврат Ложь;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.торо_СоответствиеДокументовДиспетчер.СоздатьНаборЗаписей();
		
		Для каждого ДанныеДокумента Из ДанныеДокументаИзДиспетчера Цикл
		    НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ТипДокумента = "ДокументСсылка.торо_УчетКонтролируемыхПоказателей";
			НоваяЗапись.УникальныйИдентификаторДиспетчер = Строка(ДанныеДокумента.ID);
			НоваяЗапись.ДокументТОИР = НовыйДокумент.Ссылка;
			НоваяЗапись.ДатаДокумента = ДанныеДокумента.ДатаДокумента;
			НоваяЗапись.ДатаЗагрузки = НовыйДокумент.Дата;
		КонецЦикла;
		
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
КонецФункции

#КонецОбласти

#Область ДокументыНаработки

Функция ПолучитьДанныеПоНаработке(Узел, СтруктураТаблиц, ТаблицаСоответствияВебСервисов)
	МассивТелЗапросов = ПодготовитьТелоЗапросаМетодаGetAdditionalSignalAnalitics(Узел.ДатаОтсчетаДляЗагрузкиДокументов, "торо_УчетНаработкиОборудования", Узел.ДетализацияПериодаЗагрузкиДанных);
	Если Не ЗначениеЗаполнено(МассивТелЗапросов) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
#Область Станки
	ДополнительноеОписание = НСтр("ru = 'при получении станков'");
	Станки = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineList", "Станки", ТаблицаСоответствияВебСервисов, ДополнительноеОписание);
#КонецОбласти

	УспешноеВыполнение = Истина;

#Область ПоказателиЭксплуатации
	ДополнительноеОписание = НСтр("ru = 'при получении данных по наработке'");
	ПоляДатыСтрокой = "DateTime";
	
	Для каждого ПараметрыЗапроса Из МассивТелЗапросов Цикл
		ДанныеПоНаработке = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetAdditionalSignalAnalitics", "ДанныеПоНаработке", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,,,, ПоляДатыСтрокой,, ПараметрыЗапроса);
		
		Если ДанныеПоНаработке.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос();
#Область ТекстЗапроса
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсходнаяТаблицаОР.ID КАК ID,
		               |	ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID,
		               |	ИсходнаяТаблицаОР.Name КАК Name
		               |ПОМЕСТИТЬ ВТ_ТаблицаОР
		               |ИЗ
		               |	&ТаблицаОР КАК ИсходнаяТаблицаОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИсходнаяТаблицаСтанков.ID КАК ID,
		               |	ИсходнаяТаблицаСтанков.IntegrationID КАК IntegrationID,
		               |	ИсходнаяТаблицаСтанков.kEquipmentID КАК kEquipmentID
		               |ПОМЕСТИТЬ ВТ_ТаблицаСтанков
		               |ИЗ
		               |	&ТаблицаСтанков КАК ИсходнаяТаблицаСтанков
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВТ_ТаблицаОР.ID КАК ID,
		               |	ВТ_ТаблицаОР.IntegrationID КАК IntegrationID,
		               |	ВТ_ТаблицаСтанков.ID КАК IDСтанка,
		               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК ОбъектРемонта,
		               |	ВТ_ТаблицаОР.Name КАК Name
		               |ПОМЕСТИТЬ ВТ_СоответствиеСтанковИОборудования
		               |ИЗ
		               |	ВТ_ТаблицаОР КАК ВТ_ТаблицаОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
		               |		ПО ВТ_ТаблицаОР.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ОбъектыРемонта"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСтанков КАК ВТ_ТаблицаСтанков
		               |		ПО ВТ_ТаблицаОР.ID = ВТ_ТаблицаСтанков.kEquipmentID
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	IDСтанка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаСтанков
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИсходнаяТаблицаНаработки.ID КАК ID,
		               |	ИсходнаяТаблицаНаработки.MachineID КАК MachineID,
		               |	ИсходнаяТаблицаНаработки.MachineParamID КАК MachineParamID,
		               |	ИсходнаяТаблицаНаработки.DateTime КАК DateTime,
		               |	ИсходнаяТаблицаНаработки.Average КАК Value
		               |ПОМЕСТИТЬ ВТ_ТаблицаДанныхПоНаработке
		               |ИЗ
		               |	&ТаблицаДанныхПоНаработке КАК ИсходнаяТаблицаНаработки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИсходнаяТаблицаПараметров.ID КАК ID,
		               |	ИсходнаяТаблицаПараметров.IntegrationID КАК IntegrationID,
		               |	ИсходнаяТаблицаПараметров.Name КАК Name,
		               |	ИсходнаяТаблицаПараметров.MeasureUnit КАК MeasureUnit
		               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаПараметров
		               |ИЗ
		               |	&ТаблицаПараметров КАК ИсходнаяТаблицаПараметров
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	IntegrationID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаДанныхПоНаработке.ID КАК ID,
		               |	ВТ_ТаблицаДанныхПоНаработке.MachineID КАК MachineID,
		               |	ВТ_ТаблицаДанныхПоНаработке.MachineParamID КАК MachineParamID,
		               |	ВТ_ТаблицаДанныхПоНаработке.DateTime КАК DateTime,
		               |	ВТ_ТаблицаДанныхПоНаработке.Value КАК Value
		               |ПОМЕСТИТЬ ВТ_ПодготовленнаяТаблицаДанныхПоНаработке
		               |ИЗ
		               |	ВТ_ТаблицаДанныхПоНаработке КАК ВТ_ТаблицаДанныхПоНаработке
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеДокументовДиспетчер КАК торо_СоответствиеДокументовДиспетчер
		               |		ПО ВТ_ТаблицаДанныхПоНаработке.ID = торо_СоответствиеДокументовДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеДокументовДиспетчер.ТипДокумента = ""ДокументСсылка.торо_УчетНаработкиОборудования"")
		               |ГДЕ
		               |	торо_СоответствиеДокументовДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	MachineParamID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаДанныхПоНаработке
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ИсходнаяТаблицаПараметров.ID КАК ID,
		               |	ВТ_ИсходнаяТаблицаПараметров.Name КАК Name,
		               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Справочник.ПараметрыВыработкиОС) КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ТаблицаПараметров
		               |ИЗ
		               |	ВТ_ИсходнаяТаблицаПараметров КАК ВТ_ИсходнаяТаблицаПараметров
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
		               |		ПО ВТ_ИсходнаяТаблицаПараметров.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.ПараметрыВыработкиОС"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерКП
		               |		ПО ВТ_ИсходнаяТаблицаПараметров.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчерКП.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчерКП.ТипОбъекта = ""ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта"")
		               |ГДЕ
		               |	торо_СоответствиеОбъектовНСИДиспетчерКП.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ИсходнаяТаблицаПараметров
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоНаработке.ID КАК ID,
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоНаработке.MachineID КАК MachineID,
		               |	ЕСТЬNULL(ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК ОбъектРемонта,
		               |	ВТ_СоответствиеСтанковИОборудования.Name КАК MachineName,
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоНаработке.DateTime КАК ДатаКонтроля,
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоНаработке.MachineParamID КАК MachineParamID,
		               |	ЕСТЬNULL(ВТ_ТаблицаПараметров.Ссылка, ЗНАЧЕНИЕ(Справочник.ПараметрыВыработкиОС.ПустаяСсылка)) КАК Показатель,
		               |	ВТ_ТаблицаПараметров.Name КАК ParamName,
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоНаработке.Value КАК Значение
		               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
		               |ИЗ
		               |	ВТ_ПодготовленнаяТаблицаДанныхПоНаработке КАК ВТ_ПодготовленнаяТаблицаДанныхПоНаработке
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеСтанковИОборудования КАК ВТ_СоответствиеСтанковИОборудования
		               |		ПО ВТ_ПодготовленнаяТаблицаДанныхПоНаработке.MachineID = ВТ_СоответствиеСтанковИОборудования.IDСтанка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПараметров КАК ВТ_ТаблицаПараметров
		               |		ПО ВТ_ПодготовленнаяТаблицаДанныхПоНаработке.MachineParamID = ВТ_ТаблицаПараметров.ID
		               |ГДЕ
		               |	НЕ ВТ_ТаблицаПараметров.Ссылка ЕСТЬ NULL
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	Показатель,
		               |	ДатаКонтроля
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПодготовленнаяТаблицаДанныхПоНаработке
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_СоответствиеСтанковИОборудования
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ТаблицаПараметров
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель
		               |ПОМЕСТИТЬ ВТ_ПараметрыНаработки
		               |ИЗ
		               |	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	Показатель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ПодготовленныеДанные.ID КАК ID,
		               |	ВТ_ПодготовленныеДанные.MachineID КАК MachineID,
		               |	ВТ_ПодготовленныеДанные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ПодготовленныеДанные.MachineName КАК MachineName,
		               |	ВТ_ПодготовленныеДанные.ДатаКонтроля КАК ДатаКонтроля,
		               |	ВТ_ПодготовленныеДанные.MachineParamID КАК MachineParamID,
		               |	ЕСТЬNULL(ВТ_ПараметрыНаработки.Показатель, ЗНАЧЕНИЕ(Справочник.ПараметрыВыработкиОС.ПустаяСсылка)) КАК Показатель,
		               |	ВТ_ПодготовленныеДанные.ParamName КАК ParamName,
		               |	ВТ_ПодготовленныеДанные.Значение КАК Значение
		               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
		               |ИЗ
		               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыНаработки КАК ВТ_ПараметрыНаработки
		               |		ПО ВТ_ПодготовленныеДанные.ОбъектРемонта = ВТ_ПараметрыНаработки.ОбъектРемонта
		               |			И ВТ_ПодготовленныеДанные.Показатель = ВТ_ПараметрыНаработки.Показатель
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	Показатель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПодготовленныеДанные
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПараметрыНаработки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НаработкаОбъектовРемонтаОстатки.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_НаработкаОбъектовРемонтаОстатки.Показатель КАК Показатель,
		               |	торо_НаработкаОбъектовРемонтаОстатки.НаработкаОстаток КАК НаработкаОстаток
		               |ПОМЕСТИТЬ ВТ_Остатки
		               |ИЗ
		               |	РегистрНакопления.торо_НаработкаОбъектовРемонта.Остатки(
		               |			,
		               |			(ОбъектРемонта, Показатель) В
		               |				(ВЫБРАТЬ
		               |					ВТ_ИтоговыеДанные.ОбъектРемонта КАК ОбъектРемонта,
		               |					ВТ_ИтоговыеДанные.Показатель
		               |				ИЗ
		               |					ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные)) КАК торо_НаработкаОбъектовРемонтаОстатки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	Показатель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель,
		               |	торо_ПериодыНаработкиОРСрезПоследних.Период КАК Период
		               |ПОМЕСТИТЬ ВТ_Даты
		               |ИЗ
		               |	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(
		               |			,
		               |			(ОбъектРемонта, Показатель) В
		               |				(ВЫБРАТЬ
		               |					ВТ_ИтоговыеДанные.ОбъектРемонта КАК ОбъектРемонта,
		               |					ВТ_ИтоговыеДанные.Показатель
		               |				ИЗ
		               |					ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные)) КАК торо_ПериодыНаработкиОРСрезПоследних
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	Показатель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Даты.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_Даты.Показатель КАК Показатель,
		               |	ВТ_Даты.Период КАК НаработаноДата,
		               |	ЕСТЬNULL(ВТ_Остатки.НаработкаОстаток, 0) КАК НаработаноЗначение
		               |ПОМЕСТИТЬ ВТ_ТекущиеЗначенияНаработки
		               |ИЗ
		               |	ВТ_Даты КАК ВТ_Даты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		               |		ПО ВТ_Даты.ОбъектРемонта = ВТ_Остатки.ОбъектРемонта
		               |			И ВТ_Даты.Показатель = ВТ_Остатки.Показатель
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	Показатель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Даты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Остатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ИтоговыеДанные.ID КАК ID,
		               |	ВТ_ИтоговыеДанные.MachineID КАК MachineID,
		               |	ВТ_ИтоговыеДанные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ИтоговыеДанные.MachineName КАК MachineName,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ТекущиеЗначенияНаработки.НаработаноДата ЕСТЬ NULL
		               |			ТОГДА ВТ_ТекущиеЗначенияНаработки.НаработаноДата
		               |		КОГДА НЕ ВТ_ИтоговыеДанные.ОбъектРемонта ЕСТЬ NULL
		               |			ТОГДА ВТ_ИтоговыеДанные.ОбъектРемонта.ДатаВводаВЭксплуатацию
		               |		ИНАЧЕ ДАТАВРЕМЯ(1970, 1, 1)
		               |	КОНЕЦ КАК ДатаРаботыС,
		               |	ВТ_ИтоговыеДанные.ДатаКонтроля КАК ДатаРаботыПо,
		               |	ВТ_ИтоговыеДанные.MachineParamID КАК MachineParamID,
		               |	ВТ_ИтоговыеДанные.Показатель КАК Показатель,
		               |	ВТ_ИтоговыеДанные.ParamName КАК ParamName,
		               |	ВТ_ИтоговыеДанные.Значение КАК НовоеЗначение,
		               |	ЕСТЬNULL(ВТ_ТекущиеЗначенияНаработки.НаработаноЗначение, 0) КАК СтароеЗначение,
		               |	ВТ_ИтоговыеДанные.Значение КАК Значение,
		               |	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение КАК МаксимальноеЗначение
		               |ИЗ
		               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеЗначенияНаработки КАК ВТ_ТекущиеЗначенияНаработки
		               |		ПО ВТ_ИтоговыеДанные.ОбъектРемонта = ВТ_ТекущиеЗначенияНаработки.ОбъектРемонта
		               |			И ВТ_ИтоговыеДанные.Показатель = ВТ_ТекущиеЗначенияНаработки.Показатель
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
		               |		ПО ВТ_ИтоговыеДанные.ОбъектРемонта = торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта
		               |			И ВТ_ИтоговыеДанные.Показатель = торо_МаксимальныеЗначенияНаработкиОР.Показатель
		               |ГДЕ
		               |	(ВТ_ТекущиеЗначенияНаработки.НаработаноДата ЕСТЬ NULL
		               |			ИЛИ НЕ ВТ_ТекущиеЗначенияНаработки.НаработаноДата ЕСТЬ NULL
		               |				И ВТ_ИтоговыеДанные.ДатаКонтроля >= ВТ_ТекущиеЗначенияНаработки.НаработаноДата)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаРаботыПо
		               |ИТОГИ ПО
		               |	MachineID";
#КонецОбласти
		Запрос.УстановитьПараметр("ТаблицаДанныхПоНаработке", ДанныеПоНаработке);
		Запрос.УстановитьПараметр("ТаблицаОР", СтруктураТаблиц.ОбъектыРемонта);
		Запрос.УстановитьПараметр("ТаблицаСтанков", Станки);
		Запрос.УстановитьПараметр("ТаблицаПараметров", СтруктураТаблиц.Параметры);
		
		ВыборкаДокументовПНВерхнийУровень = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		УспешноеВыполнение = Истина;
		
		Пока ВыборкаДокументовПНВерхнийУровень.Следующий() Цикл
		    ВыборкаДокументовПННижнийУровень = ВыборкаДокументовПНВерхнийУровень.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ДокументУспешноСоздан = СоздатьДокументНаработки(ВыборкаДокументовПННижнийУровень, Узел.ОрганизацияПоУмолчанию);
			УспешноеВыполнение = УспешноеВыполнение И ДокументУспешноСоздан;
		КонецЦикла;
		
		ШаблонОписаниеРезультата = Нстр("ru='Из АИС Диспетчер в систему загружены и обработаны данные мониторинга по параметрам наработки за период %1-%2!'");
		ОписаниеРезультата = СтрШаблон(ШаблонОписаниеРезультата, ПараметрыЗапроса["from_date"], ПараметрыЗапроса["to_date"]);
		СделатьЗаписьВЖурналеРегистрации(ОписаниеРезультата, УровеньЖурналаРегистрации.Информация, "Обработка данных мониторинга");
	КонецЦикла;
#КонецОбласти
	
	Возврат УспешноеВыполнение;
КонецФункции

Функция СоздатьДокументНаработки(ВыборкаДокументовПННижнийУровень, Организация)
	СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Справочники.торо_СтруктурыОР.ПустаяСсылка());
	
	ЕстьОшибки = Ложь;
	СтароеЗначениеНаработки = Неопределено;
	ДатаРаботыС = Неопределено;
	
	Пока ВыборкаДокументовПННижнийУровень.Следующий() Цикл
		НовыйДокумент = Документы.торо_УчетНаработкиОборудования.СоздатьДокумент();
			
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Организация = Организация;
		НовыйДокумент.Подразделение = ?(ЗначениеЗаполнено(ВыборкаДокументовПННижнийУровень.ОбъектРемонта), ВыборкаДокументовПННижнийУровень.ОбъектРемонта.Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка());
		НовыйДокумент.Комментарий = "Загружен из АИС Диспетчер.";
		
		НоваяСтрокаТЧ = НовыйДокумент.НаработкаОбъектов.Добавить();
		НоваяСтрокаТЧ.Объект = ВыборкаДокументовПННижнийУровень.ОбъектРемонта;
		НоваяСтрокаТЧ.Показатель = ВыборкаДокументовПННижнийУровень.Показатель;
		
		Если Не ЗначениеЗаполнено(СтароеЗначениеНаработки) Тогда
		    СтароеЗначениеНаработки = ВыборкаДокументовПННижнийУровень.СтароеЗначение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаРаботыС) Тогда
		    ДатаРаботыС = ВыборкаДокументовПННижнийУровень.ДатаРаботыС;
		КонецЕсли;
		
		НоваяСтрокаТЧ.ДатаРаботыС = ДатаРаботыС;
		НоваяСтрокаТЧ.ДатаРаботыПо = ВыборкаДокументовПННижнийУровень.ДатаРаботыПо;
		НоваяСтрокаТЧ.СтароеЗначение = СтароеЗначениеНаработки;
		НоваяСтрокаТЧ.Наработка = ВыборкаДокументовПННижнийУровень.Значение - НоваяСтрокаТЧ.СтароеЗначение;
		
		МаксимальноеЗначение = ВыборкаДокументовПННижнийУровень.МаксимальноеЗначение;
		Если МаксимальноеЗначение = Null Тогда
		    НоваяСтрокаТЧ.НовоеЗначение = ВыборкаДокументовПННижнийУровень.НовоеЗначение;
		Иначе
		    КоличествоСбросовСчетчика = Цел((НоваяСтрокаТЧ.СтароеЗначение + НоваяСтрокаТЧ.Наработка) / МаксимальноеЗначение);
			НоваяСтрокаТЧ.НовоеЗначение = ВыборкаДокументовПННижнийУровень.НовоеЗначение - КоличествоСбросовСчетчика * МаксимальноеЗначение;
		КонецЕсли;
		
		СтароеЗначениеНаработки = НоваяСтрокаТЧ.НовоеЗначение;
		ДатаРаботыС = НоваяСтрокаТЧ.ДатаРаботыПо;
		
		НоваяСтрокаТЧ.НаработкаСНачалаЭксплуатации = ВыборкаДокументовПННижнийУровень.НовоеЗначение;
		НоваяСтрокаТЧ.НаработкаСНачалаЭксплуатацииНачало = ВыборкаДокументовПННижнийУровень.СтароеЗначение;
		НоваяСтрокаТЧ.СтруктураИерархии = СтруктураИерархии;
		НоваяСтрокаТЧ.РаспространятьНаПодчиненных = Ложь;
		
		Если Не ЗначениеЗаполнено(ВыборкаДокументовПННижнийУровень.ОбъектРемонта)
			Или Не ЗначениеЗаполнено(ВыборкаДокументовПННижнийУровень.Показатель) Тогда
	    	ШаблонОписаниеОшибки = Нстр("ru='В документе наработки (строка %1) необходимо указать ОР ""%2"" (ID в АИС Диспетчер %3) и показатель ""%4"" (ID в АИС Диспетчер %5). Одно или несколько из этих полей не заполнено!'");
			ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, НоваяСтрокаТЧ.НомерСтроки,
										ВыборкаДокументовПННижнийУровень.MachineName, ВыборкаДокументовПННижнийУровень.MachineID,
										ВыборкаДокументовПННижнийУровень.ParamName, ВыборкаДокументовПННижнийУровень.MachineParamID);
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи документа <Учет наработки оборудования>");
			ЕстьОшибки = Истина;
			
			НовыйДокумент.Комментарий = НовыйДокумент.Комментарий + Символы.ПС + "Предупреждение! " + ОписаниеОшибки;
		КонецЕсли;
		
		ЕстьОшибки = Не ЗаписатьДокумент(НовыйДокумент, ЕстьОшибки, "<Учет наработки оборудования>");
		
		Если Не ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
		    Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.торо_СоответствиеДокументовДиспетчер.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипДокумента = "ДокументСсылка.торо_УчетНаработкиОборудования";
		МенеджерЗаписи.УникальныйИдентификаторДиспетчер = ВыборкаДокументовПННижнийУровень.ID;
		МенеджерЗаписи.ДокументТОИР = НовыйДокумент.Ссылка;
		МенеджерЗаписи.ДатаДокумента = ВыборкаДокументовПННижнийУровень.ДатаРаботыПо;
		МенеджерЗаписи.ДатаЗагрузки = НовыйДокумент.Дата;
		
		МенеджерЗаписи.Записать();
		
		ЕстьОшибки = Ложь;
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДокументыВыявленныхДефектов

Функция ПолучитьДанныеПоВыявленнымДефектам(Узел, ТаблицаСоответствияВебСервисов)
	ПараметрыЗапроса = ПодготовитьТелоЗапросаМетодаGetPprRequestList(Узел.ДатаОтсчетаДляЗагрузкиДокументов);
	Если Не ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
#Область ПолучениеВД
	ДополнительноеОписание = НСтр("ru = 'при получении данных по ВД'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.MachineIntegrationId) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоляДатыСтрокой = "Date";
	ВыявленныеДефекты = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetPprRequestList", "ВыявленныеДефекты", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка,, ПоляДатыСтрокой,, ПараметрыЗапроса);
#КонецОбласти
	
	Если ВыявленныеДефекты.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
		
#Область Станки
	ДополнительноеОписание = НСтр("ru = 'при получении станков'");
	Станки = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineList", "Станки", ТаблицаСоответствияВебСервисов, ДополнительноеОписание);
#КонецОбласти

#Область ОбъектыРемонта
	ДополнительноеОписание = НСтр("ru = 'при получении ОР'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоляДатыСтрокой = "dtProducer,dtInput,dtGuarantee";
	ОбъектыРемонта = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentList", "ОбъектыРемонта", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка,, ПоляДатыСтрокой);
#КонецОбласти

#Область Инициаторы
	ИнициаторыВД = ПолучитьИнициаторовВД(Узел, ВыявленныеДефекты.Скопировать(,"ID, Date, MachineIntegrationID"), ТаблицаСоответствияВебСервисов);
#КонецОбласти
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаОР.ID КАК ID,
	               |	ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ИсходнаяТаблицаОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаСтанков.ID КАК ID,
	               |	ИсходнаяТаблицаСтанков.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаСтанков.kEquipmentID КАК kEquipmentID
	               |ПОМЕСТИТЬ ВТ_ТаблицаСтанков
	               |ИЗ
	               |	&ТаблицаСтанков КАК ИсходнаяТаблицаСтанков
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ТаблицаОР.ID КАК ID,
	               |	ВТ_ТаблицаОР.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаСтанков.ID КАК IDСтанка,
	               |	ВТ_ТаблицаСтанков.IntegrationID КАК IntegrationIDСтанка,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_СоответствиеСтанковИОборудования
	               |ИЗ
	               |	ВТ_ТаблицаОР КАК ВТ_ТаблицаОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаОР.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ОбъектыРемонта"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСтанков КАК ВТ_ТаблицаСтанков
	               |		ПО ВТ_ТаблицаОР.ID = ВТ_ТаблицаСтанков.kEquipmentID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDСтанка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТаблицаСтанков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаВД.ID КАК ID,
	               |	ИсходнаяТаблицаВД.MachineIntegrationID КАК MachineIntegrationID,
	               |	ИсходнаяТаблицаВД.Date КАК Date,
	               |	ИсходнаяТаблицаВД.Name КАК Name,
	               |	ИсходнаяТаблицаВД.Description КАК Description
	               |ПОМЕСТИТЬ ВТ_ТаблицаВД
	               |ИЗ
	               |	&ТаблицаВыявленныхДефектов КАК ИсходнаяТаблицаВД
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИнициаторыВД.ID КАК ID,
	               |	ИнициаторыВД.LastName КАК LastName,
	               |	ИнициаторыВД.FirstName КАК FirstName,
	               |	ИнициаторыВД.Patronymic КАК Patronymic
	               |ПОМЕСТИТЬ ВТ_ИнициаторыВД
	               |ИЗ
	               |	&ИнициаторыВД КАК ИнициаторыВД
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаВД.ID КАК ID,
	               |	ВТ_ТаблицаВД.MachineIntegrationID КАК MachineIntegrationID,
	               |	ВТ_ТаблицаВД.Date КАК Date,
	               |	ВТ_ТаблицаВД.Name КАК Name,
	               |	ВТ_ТаблицаВД.Description КАК Description,
	               |	ЕСТЬNULL(ВТ_ИнициаторыВД.LastName, """") КАК LastName,
	               |	ЕСТЬNULL(ВТ_ИнициаторыВД.FirstName, """") КАК FirstName,
	               |	ЕСТЬNULL(ВТ_ИнициаторыВД.Patronymic, """") КАК Patronymic
	               |ПОМЕСТИТЬ ВТ_ПодготовленнаяТаблицаВД
	               |ИЗ
	               |	ВТ_ТаблицаВД КАК ВТ_ТаблицаВД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеДокументовДиспетчер КАК торо_СоответствиеДокументовДиспетчер
	               |		ПО ВТ_ТаблицаВД.ID = торо_СоответствиеДокументовДиспетчер.УникальныйИдентификаторДиспетчер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИнициаторыВД КАК ВТ_ИнициаторыВД
	               |		ПО ВТ_ТаблицаВД.ID = ВТ_ИнициаторыВД.ID
	               |ГДЕ
	               |	торо_СоответствиеДокументовДиспетчер.УникальныйИдентификаторДиспетчер ЕСТЬ NULL
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MachineIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТаблицаВД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодготовленнаяТаблицаВД.ID КАК ID,
	               |	ВТ_ПодготовленнаяТаблицаВД.MachineIntegrationID КАК MachineIntegrationID,
	               |	ЕСТЬNULL(ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК ОбъектРемонта,
	               |	ЕСТЬNULL(ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК ОтказавшийЭлемент,
	               |	ВТ_ПодготовленнаяТаблицаВД.Date КАК Дата,
	               |	ВТ_ПодготовленнаяТаблицаВД.Description КАК ДефектОписание,
	               |	ВТ_ПодготовленнаяТаблицаВД.LastName КАК LastName,
	               |	ВТ_ПодготовленнаяТаблицаВД.FirstName КАК FirstName,
	               |	ВТ_ПодготовленнаяТаблицаВД.Patronymic КАК Patronymic,
	               |	ВЫБОР
	               |		КОГДА ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |		ИНАЧЕ ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта.Подразделение
	               |	КОНЕЦ КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |		ИНАЧЕ ВТ_СоответствиеСтанковИОборудования.ОбъектРемонта.ПодразделениеИсполнитель
	               |	КОНЕЦ КАК ПодразделениеИсполнитель,
	               |	ЕСТЬNULL(торо_ТиповыеДефектыОборудования.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_ТиповыеДефектыОборудования.ПустаяСсылка)) КАК ТиповойДефект
	               |ИЗ
	               |	ВТ_ПодготовленнаяТаблицаВД КАК ВТ_ПодготовленнаяТаблицаВД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеСтанковИОборудования КАК ВТ_СоответствиеСтанковИОборудования
	               |		ПО ВТ_ПодготовленнаяТаблицаВД.MachineIntegrationID = ВТ_СоответствиеСтанковИОборудования.IntegrationIDСтанка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеДефектыОборудования КАК торо_ТиповыеДефектыОборудования
	               |		ПО ВТ_ПодготовленнаяТаблицаВД.Name = торо_ТиповыеДефектыОборудования.Наименование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаВыявленныхДефектов", ВыявленныеДефекты);
	Запрос.УстановитьПараметр("ТаблицаОР", ОбъектыРемонта);
	Запрос.УстановитьПараметр("ТаблицаСтанков", Станки);
	Запрос.УстановитьПараметр("ИнициаторыВД", ИнициаторыВД);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УспешноеВыполнение = Истина;
	
	ВыборкаВД = РезультатЗапроса.Выбрать();
	Пока ВыборкаВД.Следующий() Цикл
		ДокументУспешноСоздан = СоздатьДокументВД(ВыборкаВД, Узел);
		УспешноеВыполнение = УспешноеВыполнение И ДокументУспешноСоздан;
	КонецЦикла;

	Возврат УспешноеВыполнение;
КонецФункции

Функция ПодготовитьТелоЗапросаМетодаGetPprRequestList(ДатаОтсчетаДляЗагрузкиДокументов)
	ДатаНачалаПериода = ДатаОтсчетаДляЗагрузкиДокументов;
	ДатаОкончанияПериода = ТекущаяДата();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	МАКСИМУМ(торо_СоответствиеДокументовДиспетчер.ДатаДокумента) КАК ДатаДокумента
	               |ИЗ
	               |	РегистрСведений.торо_СоответствиеДокументовДиспетчер КАК торо_СоответствиеДокументовДиспетчер
	               |ГДЕ
	               |	торо_СоответствиеДокументовДиспетчер.ТипДокумента = ""ДокументСсылка.торо_ВыявленныеДефекты""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СоответствиеДокументовДиспетчер.ТипДокумента";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
	    ДатаНачалаПериода = ВыборкаЗапроса.ДатаДокумента;
	КонецЕсли;
	
	Если ДатаНачалаПериода > ДатаОкончанияПериода Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	FromDate = ПреобразоватьДатуВСтроку(ДатаНачалаПериода);
	ToDate = ПреобразоватьДатуВСтроку(ДатаОкончанияПериода);
	
	ПараметрыЗапроса = Новый Соответствие();
	ПараметрыЗапроса.Вставить("from_date", FromDate);
	ПараметрыЗапроса.Вставить("to_date", ToDate);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция СоздатьДокументВД(ДокументВД, Узел)
	ЕстьОшибки = Ложь;
	
	НовыйДокумент = Документы.торо_ВыявленныеДефекты.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.ДатаОбнаружения = ДокументВД.Дата;
	НовыйДокумент.Организация = Узел.ОрганизацияПоУмолчанию;
	НовыйДокумент.Подразделение = ДокументВД.Подразделение;
	НовыйДокумент.Комментарий = "Загружен из АИС Диспетчер.";
	НовыйДокумент.ДефектВыявленВПроцессе = Узел.УсловияВыявленияДефектаПоУмолчанию;
	НовыйДокумент.ОбъектРемонта = ДокументВД.ОбъектРемонта;
	ШаблонИнициатора = НСтр("ru='%1 %2 %3'");
	НовыйДокумент.Инициатор = СтрШаблон(ШаблонИнициатора, ДокументВД.LastName, ДокументВД.FirstName, ДокументВД.Patronymic);
	
	НоваяСтрокаТЧ = НовыйДокумент.СписокДефектов.Добавить();
	НоваяСтрокаТЧ.ОбъектРемонта = ДокументВД.ОбъектРемонта;
	НоваяСтрокаТЧ.ОтказавшийЭлемент = ДокументВД.ОбъектРемонта;
	НоваяСтрокаТЧ.ПодразделениеИсполнитель = ДокументВД.ПодразделениеИсполнитель;
	НоваяСтрокаТЧ.ВидДефекта = Узел.ВидДефекта;
	НоваяСтрокаТЧ.ДефектОписание = ДокументВД.ДефектОписание;
	НоваяСтрокаТЧ.ТиповойДефект = ДокументВД.ТиповойДефект;
	НоваяСтрокаТЧ.ДефектВыявленВПроцессе = Узел.УсловияВыявленияДефектаПоУмолчанию;
	
	Если ЗначениеЗаполнено(НоваяСтрокаТЧ.ТиповойДефект) Тогда
	    ТиповойДефект = ДокументВД.ТиповойДефект;
		НоваяСтрокаТЧ.ВидДефекта = ТиповойДефект.ВидДефекта;
		НоваяСтрокаТЧ.ДефектПричина = ?(ТиповойДефект.ПричиныВозникновенияДефекта.Количество() > 0, ТиповойДефект.ПричиныВозникновенияДефекта[0].Причина, Справочники.торо_УсловияВыявленияДефекта.ПустаяСсылка());
		НоваяСтрокаТЧ.КритичностьДефекта = ТиповойДефект.КритичностьДефекта;
		НоваяСтрокаТЧ.ДефектОписание = ТиповойДефект.ОписаниеДефекта;
		НоваяСтрокаТЧ.ПоследствияДефекта = ТиповойДефект.ПоследствиеДефекта;
		НоваяСтрокаТЧ.НаправлениеНаУстранение = ТиповойДефект.НаправлениеНаУстранение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументВД.ОбъектРемонта)
		Или Не ЗначениеЗаполнено(НоваяСтрокаТЧ.ВидДефекта)
		Или Не ЗначениеЗаполнено(НовыйДокумент.ДефектВыявленВПроцессе)Тогда
    	ШаблонОписаниеОшибки = Нстр("ru='В документе ВД необходимо указать ОР и отказавший элемент (ID в АИС Диспетчер %1), вид дефекта или условие выявления дефекта. Одно или несколько из этих полей не заполнено!'");
		ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, ДокументВД.MachineIntegrationID);
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи документа <Выявленные дефекты>");
		ЕстьОшибки = Истина;
		
		НовыйДокумент.Комментарий = НовыйДокумент.Комментарий + Символы.ПС + "Предупреждение! " + ОписаниеОшибки;
	КонецЕсли;
	
	ЕстьОшибки = Не ЗаписатьДокумент(НовыйДокумент, ЕстьОшибки, "<Выявленные дефекты>");
	
	Если Не ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
	    Возврат Не ЕстьОшибки;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.торо_СоответствиеДокументовДиспетчер.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипДокумента = "ДокументСсылка.торо_ВыявленныеДефекты";
	МенеджерЗаписи.УникальныйИдентификаторДиспетчер = ДокументВД.ID;
	МенеджерЗаписи.ДокументТОИР = НовыйДокумент.Ссылка;
	МенеджерЗаписи.ДатаДокумента = ДокументВД.Дата;
	МенеджерЗаписи.ДатаЗагрузки = НовыйДокумент.Дата;
	МенеджерЗаписи.Записать(Истина);
	
	Возврат Не ЕстьОшибки;
КонецФункции

Функция ПолучитьИнициаторовВД(Узел, ДанныеВД, ТаблицаСоответствияВебСервисов)
	НазванияТаблиц = Новый Массив();
	НазванияТаблиц.Добавить("Сотрудники");
	ПустаяТаблица =  ПолучитьОписанияВспомогательныхТаблиц(НазванияТаблиц)["Сотрудники"];
	
	Если Не Узел.ЗагружатьИнициатораВД Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	НазванияТаблиц = Новый Массив();
	НазванияТаблиц.Добавить("ДанныеПоСостояниямОР_ДляИнициаторов");
	ИнициаторыВД = ПолучитьОписанияВспомогательныхТаблиц(НазванияТаблиц)["ДанныеПоСостояниямОР_ДляИнициаторов"].СкопироватьКолонки("ID, workerSetterIntegrationId");
	
	// Метод GetPprRequestList не возвращает инйформацию по инициатору. Решение проблемы единственное - искать
	// среди ответа метода GetMonitoringValueList состояние с датой аварийной заявки в АИСе. Оттуда брать
	// интеграционный ID сотрудника и получать ФИО из справочника (из АИСа).
	// Получать данные за период от минимальной до максимальной даты загружаемых заявок не самая лучшая идея,
	// т.к. данных будет очень много + если данных больше какого-то значения, то API АИСа возвращает ошибку.
	// Единственный вариант - это в цикле получать инициатора для каждого дефекта. Метод будет возвращать
	// данных больше, чем хотелось бы, но не критично (обычно 100-200).
	// На момент реализации в методе работали отборы только по датам (по станку, например, нет). Отбор по датам
	// работает так, что хотя бы часть ремонта попадала в этот период. Т.е. указываем в параметрах даты начала и
	// окончания равными дате аварийной заявки, например 09.09.21 10:00, а возвращается больше записей, у которых
	// период, например, 08.09.21 15:00 - 09.09.21 11:00 и т.д. Поэтому после получения таблицы сразу происходит
	// отбор по станку и конкретной дате, чтобы в результате была одна строка. Для ограничения такой неоптимальной
	// загрузки сделана настройка ЗагружатьИнициатораВД.
	Для каждого ВД из ДанныеВД Цикл
		Если Не ЗначениеЗаполнено(ВД.MachineIntegrationId) Тогда
			Продолжить;
		КонецЕсли;
		
		FromDate = ПреобразоватьДатуВСтроку(ВД.Date);
		ToDate = ПреобразоватьДатуВСтроку(ВД.Date);
		
		ПараметрыЗапроса = Новый Соответствие();
		ПараметрыЗапроса.Вставить("from_date", FromDate);
		ПараметрыЗапроса.Вставить("to_date", ToDate);
		
		ДополнительноеОписание = НСтр("ru = 'при получении инициаторов для ВД'");
		ПоляДатыСтрокой = "StartTime,EndTime";
		ШаблонОбязательнаяПроверка = "Если СтрокаДанных.MachineIntegrationId = ""%1"" И СтрЗаменить(Строка(СтрокаДанных.startTime), ""T"", "" "") = ПараметрыЗапроса[""from_date""] И ЗначениеЗаполнено(СтрокаДанных.workerSetterIntegrationId) Тогда
									|	ПроверкаПройдена = Истина;
									|Иначе
									|	ПроверкаПройдена = Ложь;
									|КонецЕсли;";
		ОбязательнаяПроверка = СтрШаблон(ШаблонОбязательнаяПроверка, ВД.MachineIntegrationId);
		
		ДанныеПоСостояниямОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMonitoringValueList", "ДанныеПоСостояниямОР_ДляИнициаторов", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка,, ПоляДатыСтрокой,, ПараметрыЗапроса);
		
		Если ДанныеПоСостояниямОР.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ИнициаторыВД.Добавить();
		НоваяСтрока.ID = ВД.ID;
		НоваяСтрока.workerSetterIntegrationId = ДанныеПоСостояниямОР[0].workerSetterIntegrationId;
	КонецЦикла;
	
	Если ИнициаторыВД.Количество() = 0 Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	ДополнительноеОписание = НСтр("ru = 'при получении сотрудников (инициаторов) для ВД'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Сотрудники = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetWorkerList", "Сотрудники", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка,,);
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.LastName КАК LastName,
				   |	Сотрудники.FirstName КАК FirstName,
				   |	Сотрудники.Patronymic КАК Patronymic,
	               |	Сотрудники.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_Сотрудники
	               |ИЗ
	               |	&Сотрудники КАК Сотрудники
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИнициаторыВД.ID КАК ID,
	               |	ИнициаторыВД.workerSetterIntegrationId КАК workerSetterIntegrationId
	               |ПОМЕСТИТЬ ВТ_ИнициаторыВД
	               |ИЗ
	               |	&ИнициаторыВД КАК ИнициаторыВД
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	workerSetterIntegrationId
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ИнициаторыВД.ID КАК ID,
	               |	ВТ_Сотрудники.LastName КАК LastName,
				   |	ВТ_Сотрудники.FirstName КАК FirstName,
				   |	ВТ_Сотрудники.Patronymic КАК Patronymic
	               |ИЗ
	               |	ВТ_ИнициаторыВД КАК ВТ_ИнициаторыВД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	               |		ПО ВТ_ИнициаторыВД.workerSetterIntegrationId = ВТ_Сотрудники.IntegrationID";
#КонецОбласти
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ИнициаторыВД", ИнициаторыВД);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаписьДанныхВСистему

Функция ЗаписатьПодразделения(Узел, ТаблицаПодразделений)
	Если ТаблицаПодразделений.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.СтруктураПредприятия";
	
	Попытка
		СоответствиеIntegrationIDСозданныхРодителей = Новый Соответствие();
		Для каждого СтрокаПодразделения Из ТаблицаПодразделений Цикл
			СтруктураПоиска = Новый Структура("IntegrationID", СтрокаПодразделения.ParentIntegrationID);
			НайденныеСтроки = ТаблицаПодразделений.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
			    ПодразделениеРодитель = Справочники.СтруктураПредприятия.ПустаяСсылка();
				
				ШаблонОписаниеОшибки = Нстр("ru='Для подразделения %1 не удалось указать родителя с IntegrationID = %2'");
				ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, СтрокаПодразделения.Name, СтрокаПодразделения.ParentIntegrationID);
				СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи подразделения");
			ИначеЕсли СтрокаПодразделения.IntegrationID = СтрокаПодразделения.ParentIntegrationID Тогда
				ПодразделениеРодитель = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Иначе
				ПодразделениеРодитель = ЗаписатьПодразделенияРекурсивно(Узел, НайденныеСтроки[0], ТаблицаПодразделений, СоответствиеIntegrationIDСозданныхРодителей);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СоответствиеIntegrationIDСозданныхРодителей[СтрокаПодразделения.IntegrationID]) Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаПодразделения.Объект) Тогда
				ОбъектТОИР = СтрокаПодразделения.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.СтруктураПредприятия.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаПодразделения.Name;
			ОбъектТОИР.Родитель = ПодразделениеРодитель;
			ОбъектТОИР.Записать();
			
			СоответствиеIntegrationIDСозданныхРодителей.Вставить(СтрокаПодразделения.IntegrationID, ОбъектТОИР.Ссылка);
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаПодразделения.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
			
			Если ПланыОбмена.ИзменениеЗарегистрировано(Узел, ОбъектТОИР) Тогда
			    ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектТОИР);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи подразделения:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи подразделения");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьПодразделенияРекурсивно(Узел, СтрокаПодразделения, ТаблицаПодразделений, СоответствиеIntegrationIDСозданныхРодителей)
	ТипОбъекта = "СправочникСсылка.СтруктураПредприятия";
	
	Попытка
		СтруктураПоиска = Новый Структура("IntegrationID", СтрокаПодразделения.ParentIntegrationID);
		НайденныеСтроки = ТаблицаПодразделений.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
		    ПодразделениеРодитель = Справочники.СтруктураПредприятия.ПустаяСсылка();
			
			ШаблонОписаниеОшибки = Нстр("ru='Для подразделения %1 не удалось указать родителя с IntegrationID = %2'");
			ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, СтрокаПодразделения.Name, СтрокаПодразделения.ParentIntegrationID);
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи подразделения");
		ИначеЕсли СтрокаПодразделения.IntegrationID = СтрокаПодразделения.ParentIntegrationID Тогда
			ПодразделениеРодитель = Справочники.СтруктураПредприятия.ПустаяСсылка();
		Иначе
			ПодразделениеРодитель = ЗаписатьПодразделенияРекурсивно(Узел, НайденныеСтроки[0], ТаблицаПодразделений, СоответствиеIntegrationIDСозданныхРодителей);
		КонецЕсли;
		
		Если Не СоответствиеIntegrationIDСозданныхРодителей[СтрокаПодразделения.IntegrationID] = Неопределено Тогда
			Возврат СоответствиеIntegrationIDСозданныхРодителей[СтрокаПодразделения.IntegrationID];
		ИначеЕсли ЗначениеЗаполнено(СтрокаПодразделения.Объект) Тогда
			ОбъектТОИР = СтрокаПодразделения.Объект.ПолучитьОбъект();
		Иначе
			ОбъектТОИР = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		КонецЕсли;
		
		ОбъектТОИР.Наименование = СтрокаПодразделения.Name;
		ОбъектТОИР.Родитель = ПодразделениеРодитель;
		ОбъектТОИР.Записать();
		
		СоответствиеIntegrationIDСозданныхРодителей.Вставить(СтрокаПодразделения.IntegrationID, ОбъектТОИР.Ссылка);
		
		МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
	    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
		МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаПодразделения.IntegrationID;
		МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
		МенеджерЗаписи.Записать();
	
		Если ПланыОбмена.ИзменениеЗарегистрировано(Узел, ОбъектТОИР) Тогда
		    ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектТОИР);
		КонецЕсли;
		
		Возврат ОбъектТОИР.Ссылка;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи подразделения:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи подразделения");
		
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецПопытки;
КонецФункции

Функция ЗаписатьСотрудников(ТаблицаСотрудников, ТаблицаКадровыхДокументов, Узел)
	Если ТаблицаСотрудников.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	Организация = Узел.ОрганизацияПоУмолчанию;
	Если Не ЗначениеЗаполнено(Организация) Тогда
	    Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.Сотрудники";
	
	ФОИспользоватьУправлениеПерсоналом = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУправлениеПерсоналом");
	
	Попытка
		Запрос = Новый Запрос();
#Область ТекстЗапроса
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ИсходнаяТаблицаСотрудников.IntegrationID КАК IntegrationID,
					   |	ИсходнаяТаблицаСотрудников.TabNum КАК TabNum,
		               |	ИсходнаяТаблицаСотрудников.Name КАК Name,
		               |	ИсходнаяТаблицаСотрудников.Объект КАК Объект
		               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаСотрудников
		               |ИЗ
		               |	&ТаблицаСотрудников КАК ИсходнаяТаблицаСотрудников
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Name
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ИсходнаяТаблицаСотрудников.IntegrationID КАК IntegrationID,
					   |	ВТ_ИсходнаяТаблицаСотрудников.TabNum КАК TabNum,
		               |	ВТ_ИсходнаяТаблицаСотрудников.Name КАК Name,
		               |	ВТ_ИсходнаяТаблицаСотрудников.Объект КАК Объект,
					   |	ЕСТЬNULL(ФизическиеЛица.Ссылка, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо
		               |ИЗ
		               |	ВТ_ИсходнаяТаблицаСотрудников КАК ВТ_ИсходнаяТаблицаСотрудников
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ПО ВТ_ИсходнаяТаблицаСотрудников.Name = ФизическиеЛица.Наименование";
#КонецОбласти
		Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
		РезультатЗапроса = Запрос.Выполнить();
		ПодготовленнаяТаблицаСотрудников = РезультатЗапроса.Выгрузить();
		
		Для каждого СтрокаСотрудника Из ПодготовленнаяТаблицаСотрудников Цикл
			Если ЗначениеЗаполнено(СтрокаСотрудника.Объект) Тогда
				ОбъектТОИР = СтрокаСотрудника.Объект.ПолучитьОбъект();
				ОбъектТОИР.Наименование = СтрокаСотрудника.Name;
				
				ФизическоеЛицо = ОбъектТОИР.ФизическоеЛицо.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.Сотрудники.СоздатьЭлемент();
				ОбъектТОИР.Код = СтрокаСотрудника.TabNum;
				ОбъектТОИР.Наименование = СтрокаСотрудника.Name;
				ОбъектТОИР.ГоловнаяОрганизация = Организация;
				
				Если Не ЗначениеЗаполнено(СтрокаСотрудника.ФизическоеЛицо) Тогда
				    ФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
				Иначе
					ФизическоеЛицо = СтрокаСотрудника.ФизическоеЛицо.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
						
			ФизическоеЛицо.Наименование = СтрокаСотрудника.Name;
			ФизическоеЛицо.ФИО = СтрокаСотрудника.Name;
			
			НачатьТранзакцию();
				ФизическоеЛицо.Записать();
				ОбъектТОИР.ФизическоеЛицо = ФизическоеЛицо.Ссылка;
				ОбъектТОИР.Записать();
			ЗафиксироватьТранзакцию();
			
			МассивФИО = СтрРазделить(СтрокаСотрудника.Name, " ");
			МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо.Ссылка;
			МенеджерЗаписи.Фамилия = ?(МассивФИО.Количество() > 0, МассивФИО[0], "");
			МенеджерЗаписи.Имя = ?(МассивФИО.Количество() > 1, МассивФИО[1], "");
			МенеджерЗаписи.Отчество = ?(МассивФИО.Количество() > 2, МассивФИО[2], "");
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаСотрудника.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
			
			Если ПланыОбмена.ИзменениеЗарегистрировано(Узел, ОбъектТОИР) Тогда
			    ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектТОИР);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи сотрудников:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи сотрудника");
		Возврат Ложь;
	КонецПопытки;
	
	Если Не ФОИспользоватьУправлениеПерсоналом Тогда
		Возврат Истина;
	КонецЕсли;
	
	// В исходной таблице сотрудников ProfName - Строка (наименование должности из АИС Диспетчер),
	//								  DeptIntegrationID - Строка (подразделение из АИС Диспетчер).
	// Кадровые документы создаются, если включена ФО "торо_ИспользоватьУправлениеПерсоналом".
	// Документ "Прием на работу" создается, если для сотрудника нет кадровых документов (нет записи в РС кадровой истории).
	// Документ "Кадровый перевод" создается, если на отрудника уже оформлены кадровые документы (кроме докмента "Увольнение"??)
	// и новые подразделение или должность отличаются от предыдущих (поэтому необходимо получить текущие должность и подразделение
	// сотрудника в системе)
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаКадровыхДокументов.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаКадровыхДокументов.DeptIntegrationID КАК DeptIntegrationID,
	               |	ИсходнаяТаблицаКадровыхДокументов.ProfName КАК ProfName,
	               |	ИсходнаяТаблицаКадровыхДокументов.ГрафикРаботы КАК ГрафикРаботы,
	               |	ИсходнаяТаблицаКадровыхДокументов.ДатаКадровойОперации КАК ДатаКадровойОперации,
	               |	ИсходнаяТаблицаКадровыхДокументов.Документ КАК Документ
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаКадровыхДокументов
	               |ИЗ
	               |	&ТаблицаКадровыхДокументов КАК ИсходнаяТаблицаКадровыхДокументов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	DeptIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИсходнаяТаблицаКадровыхДокументов.IntegrationID КАК IntegrationID,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерПодразделения.ОбъектТОИР, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Dept,
	               |	ЕСТЬNULL(Должности.Ссылка, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК Prof,
				   |	ВТ_ИсходнаяТаблицаКадровыхДокументов.ProfName КАК ProfName,
	               |	ВТ_ИсходнаяТаблицаКадровыхДокументов.ГрафикРаботы КАК ГрафикРаботы,
	               |	ВТ_ИсходнаяТаблицаКадровыхДокументов.ДатаКадровойОперации КАК ДатаКадровойОперации,
	               |	ВТ_ИсходнаяТаблицаКадровыхДокументов.Документ КАК Документ,
	               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерСотрудники.ОбъектТОИР, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ВТ_ИсходнаяТаблицаКадровыхДокументов.Документ = ""Прием на работу""
	               |			ТОГДА 1
	               |		КОГДА ВТ_ИсходнаяТаблицаКадровыхДокументов.Документ = ""Кадровый перевод""
	               |			ТОГДА 2
	               |		ИНАЧЕ 3
	               |	КОНЕЦ КАК Порядок
	               |ПОМЕСТИТЬ ВТ_ТаблицаКадровыхДокументов
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаКадровыхДокументов КАК ВТ_ИсходнаяТаблицаКадровыхДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерПодразделения
	               |		ПО ВТ_ИсходнаяТаблицаКадровыхДокументов.DeptIntegrationID = торо_СоответствиеОбъектовНСИДиспетчерПодразделения.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчерПодразделения.ТипОбъекта = ""СправочникСсылка.СтруктураПредприятия"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерСотрудники
	               |		ПО ВТ_ИсходнаяТаблицаКадровыхДокументов.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчерСотрудники.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчерСотрудники.ТипОбъекта = ""СправочникСсылка.Сотрудники"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	               |		ПО ВТ_ИсходнаяТаблицаКадровыхДокументов.ProfName = Должности.Наименование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КадроваяИсторияСотрудниковСрезПоследних.Регистратор КАК Регистратор,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность
	               |ПОМЕСТИТЬ ВТ_КадроваяИсторияСотрудников
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(, ) КАК КадроваяИсторияСотрудниковСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
	               |	ЕСТЬNULL(ВТ_КадроваяИсторияСотрудников.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	               |	ЕСТЬNULL(ВТ_КадроваяИсторияСотрудников.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	               |	ЕСТЬNULL(ВТ_КадроваяИсторияСотрудников.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК Должность,
	               |	ВТ_ТаблицаКадровыхДокументов.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаКадровыхДокументов.Dept КАК Dept,
				   |	ВТ_ТаблицаКадровыхДокументов.Prof КАК Prof,
	               |	ВТ_ТаблицаКадровыхДокументов.ProfName КАК ProfName,
	               |	ВТ_ТаблицаКадровыхДокументов.ГрафикРаботы КАК ГрафикРаботы,
	               |	ВТ_ТаблицаКадровыхДокументов.ДатаКадровойОперации КАК ДатаКадровойОперации,
	               |	ВТ_ТаблицаКадровыхДокументов.Документ КАК Документ,
	               |	ВТ_ТаблицаКадровыхДокументов.Сотрудник КАК Сотрудник
	               |ИЗ
	               |	ВТ_ТаблицаКадровыхДокументов КАК ВТ_ТаблицаКадровыхДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КадроваяИсторияСотрудников КАК ВТ_КадроваяИсторияСотрудников
	               |		ПО ВТ_ТаблицаКадровыхДокументов.Сотрудник = ВТ_КадроваяИсторияСотрудников.Сотрудник
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_ТаблицаКадровыхДокументов.Порядок,
				   |	ВТ_ТаблицаКадровыхДокументов.ДатаКадровойОперации";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаКадровыхДокументов", ТаблицаКадровыхДокументов);
	РезультатЗапроса = Запрос.Выполнить();
	ПодготовленнаяТаблицаКадровыхДокументов = РезультатЗапроса.Выгрузить();
	
	УспешноеВыполнение = Ложь;
	ПринятыеНаРаботуСотрудники = Новый Массив();
	СозданныеДолжности = Новый Соответствие();
	Для каждого СтрокаКадровогоДокумента Из ПодготовленнаяТаблицаКадровыхДокументов Цикл
	    УспешноеВыполнение = СоздатьКадровыйДокумент(СтрокаКадровогоДокумента, Организация, ПринятыеНаРаботуСотрудники, СозданныеДолжности);
	КонецЦикла;
	
	Возврат УспешноеВыполнение;
КонецФункции

Функция СоздатьКадровыйДокумент(СтрокаКадровогоДокумента, Организация, ПринятыеНаРаботуСотрудники, СозданныеДолжности)
	Организация = ?(ЗначениеЗаполнено(СтрокаКадровогоДокумента.Организация), СтрокаКадровогоДокумента.Организация, Организация);	
	
	// Документы кадрового перевода и увольнения можно создать только если сотруник принят на работу (есть документ приема),
	// для этого перед вызовом данного метода получаются текущие подразделение и должность - если они пустые, то кадровых
	// документов нет. Следовательно перевести и уволить нельзя. Но если для такого сотрудника (новый сотрудник из АИС
	// Диспетчер, например) здесь создать документ принятия на работу, то для того, чтобы создать другие кадровые документы,
	// нужно хранить факт его принятия (именно в процессе текущей загрузки сотрудников). 
	// Для решения проблемы используется массив, хранящий сотрудников, для которых создан документ принятия на работу в процессе
	// записи сотрудников. Возможность создания кадрового перевода или увольнения определяется: если для сотрудника уже изначально
	// были созданы кадровые документы или документ принятия был создан сейчас, то их можно создавать.
	СозданДокументПриемаВТекущемОбмене = ПринятыеНаРаботуСотрудники.Найти(СтрокаКадровогоДокумента.Сотрудник);
	
	ЕстьКадровыеДокументы = ЗначениеЗаполнено(СтрокаКадровогоДокумента.Регистратор);
	
	Если ЕстьКадровыеДокументы И ТипЗнч(СтрокаКадровогоДокумента.Регистратор) = Тип("ДокументСсылка.Увольнение") Тогда
	    Возврат Истина;
	ИначеЕсли Не ЕстьКадровыеДокументы И СтрокаКадровогоДокумента.Документ = "Прием на работу" Тогда
	    НовыйДокумент = Документы.ПриемНаРаботу.СоздатьДокумент();
	ИначеЕсли (ЕстьКадровыеДокументы Или Не СозданДокументПриемаВТекущемОбмене = Неопределено)
				И СтрокаКадровогоДокумента.Документ = "Кадровый перевод"
				И (Не СтрокаКадровогоДокумента.Должность = СтрокаКадровогоДокумента.ProfName
					Или Не СтрокаКадровогоДокумента.Подразделение = СтрокаКадровогоДокумента.Dept) Тогда
		НовыйДокумент = Документы.КадровыйПеревод.СоздатьДокумент();
		НовыйДокумент.ИзменитьПодразделениеИДолжность = Истина;
	ИначеЕсли (ЕстьКадровыеДокументы Или Не СозданДокументПриемаВТекущемОбмене = Неопределено)
				И СтрокаКадровогоДокумента.Документ = "Увольнение" Тогда
	    НовыйДокумент = Документы.Увольнение.СоздатьДокумент();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Организация = Организация;
	НовыйДокумент.Подразделение = СтрокаКадровогоДокумента.Dept;
	НовыйДокумент.Сотрудник = СтрокаКадровогоДокумента.Сотрудник;
	НовыйДокумент.ФизическоеЛицо = СтрокаКадровогоДокумента.Сотрудник.ФизическоеЛицо;
	НовыйДокумент.Комментарий = "Загружен из АИС Диспетчер";
	
	Если СтрокаКадровогоДокумента.Документ = "Увольнение" Тогда
		НовыйДокумент.ДатаУвольнения = СтрокаКадровогоДокумента.ДатаКадровойОперации;
	Иначе
		Должность = Неопределено;
		Если ЗначениеЗаполнено(СтрокаКадровогоДокумента.Prof) Тогда
			Должность = СтрокаКадровогоДокумента.Prof;
		ИначеЕсли ЗначениеЗаполнено(СтрокаКадровогоДокумента.ProfName) И Не СозданныеДолжности[СтрокаКадровогоДокумента.ProfName] = Неопределено Тогда
			Должность = СозданныеДолжности[СтрокаКадровогоДокумента.ProfName];
		ИначеЕсли ЗначениеЗаполнено(СтрокаКадровогоДокумента.ProfName) Тогда
			Должность = Справочники.Должности.СоздатьЭлемент();
			Должность.Наименование = СтрокаКадровогоДокумента.ProfName;
			Должность.Записать();
			
			СозданныеДолжности.Вставить(СтрокаКадровогоДокумента.ProfName, Должность.Ссылка);
			
		    Должность = Должность.Ссылка;
		КонецЕсли;
		
		НовыйДокумент.Должность = Должность;
		НовыйДокумент.КоличествоСтавок = 1;
		НовыйДокумент.ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");
		НовыйДокумент.ГрафикРаботы = СтрокаКадровогоДокумента.ГрафикРаботы;
	КонецЕсли;
	
	Если СтрокаКадровогоДокумента.Документ = "Прием на работу" Тогда
		НовыйДокумент.ДатаПриема = СтрокаКадровогоДокумента.ДатаКадровойОперации;
	ИначеЕсли СтрокаКадровогоДокумента.Документ = "Кадровый перевод" Тогда
		НовыйДокумент.ДатаНачала = СтрокаКадровогоДокумента.ДатаКадровойОперации;
	КонецЕсли;
	
	Если (Не ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.Увольнение") И Не ЗначениеЗаполнено(НовыйДокумент.Должность))
		Или Не ЗначениеЗаполнено(СтрокаКадровогоДокумента.Dept) Тогда
    	ШаблонОписаниеОшибки = Нстр("ru='Для сотрудника %1 в кадровом документе необходимо дополнительно заполнить подразделение и должность!'");
		ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, СтрокаКадровогоДокумента.Сотрудник);
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи кадрового документа");
	КонецЕсли;
	
	Попытка
	    НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
		Если СтрокаКадровогоДокумента.Документ = "Прием на работу" Тогда
			ПринятыеНаРаботуСотрудники.Добавить(СтрокаКадровогоДокумента.Сотрудник);
		КонецЕсли;
	Исключение
		ШаблонОписаниеОшибки = Нстр("ru='Не удалось провести кадровый документ для сотрудника %1!'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		ОписаниеОшибки = СтрШаблон(ШаблонОписаниеОшибки, СтрокаКадровогоДокумента.Сотрудник);
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи кадрового документа");
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьОбъектыРемонта(ТаблицаОР, Узел)
	Если ТаблицаОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	СтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	Если Не ЗначениеЗаполнено(СтруктураИерархии) Тогда
	    СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Справочники.торо_СтруктурыОР.ПустаяСсылка());
	КонецЕсли;
	
	ГрафикРаботы = Узел.ГрафикРаботы;
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
	    ГрафикРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойГрафикРаботы",
			Справочники.Календари.ПустаяСсылка());
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.торо_ОбъектыРемонта";
	
	Попытка
		Запрос = Новый Запрос();
#Область ТекстЗапроса
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ИсходнаяТаблицаОР.DeptIntegrationID КАК DeptIntegrationID,
		               |	ИсходнаяТаблицаОР.Name КАК Name,
		               |	ИсходнаяТаблицаОР.Description КАК Description,
		               |	ИсходнаяТаблицаОР.Объект КАК Объект,
		               |	ИсходнаяТаблицаОР.EquipmentTypeIntegrationID КАК EquipmentTypeIntegrationID,
		               |	ИсходнаяТаблицаОР.EquipmentGroupIntegrationID КАК EquipmentGroupIntegrationID,
		               |	ИсходнаяТаблицаОР.EquipmentFirmIntegrationID КАК EquipmentFirmIntegrationID,
		               |	ИсходнаяТаблицаОР.InventoryNumber КАК InventoryNumber,
		               |	ИсходнаяТаблицаОР.FactoryNumber КАК FactoryNumber,
		               |	ИсходнаяТаблицаОР.dtProducer КАК dtProducer,
		               |	ИсходнаяТаблицаОР.dtInput КАК dtInput,
		               |	ИсходнаяТаблицаОР.ProviderIntegrationID КАК ProviderIntegrationID,
		               |	ИсходнаяТаблицаОР.dtGuarantee КАК dtGuarantee,
		               |	ИсходнаяТаблицаОР.Местонахождение КАК Местонахождение,
		               |	ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID
		               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаОР
		               |ИЗ
		               |	&ТаблицаОР КАК ИсходнаяТаблицаОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	DeptIntegrationID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_ИсходнаяТаблицаОР.Name КАК Name,
		               |	ВТ_ИсходнаяТаблицаОР.Description КАК Description,
		               |	ВТ_ИсходнаяТаблицаОР.Объект КАК Объект,
		               |	ВТ_ИсходнаяТаблицаОР.InventoryNumber КАК InventoryNumber,
		               |	ВТ_ИсходнаяТаблицаОР.FactoryNumber КАК FactoryNumber,
		               |	ВТ_ИсходнаяТаблицаОР.dtProducer КАК dtProducer,
		               |	ВТ_ИсходнаяТаблицаОР.dtInput КАК dtInput,
		               |	ВТ_ИсходнаяТаблицаОР.dtGuarantee КАК dtGuarantee,
		               |	ВТ_ИсходнаяТаблицаОР.Местонахождение КАК Местонахождение,
		               |	ВТ_ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID,
		               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерПодразделения.ОбъектТОИР, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Dept,
		               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР.ОбъектТОИР, ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)) КАК ТиповойОР,
		               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.ОбъектТОИР, ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)) КАК НаправлениеОР,
		               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерИзготовители.ОбъектТОИР, ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК Изготовитель,
		               |	ЕСТЬNULL(торо_СоответствиеОбъектовНСИДиспетчерПоставщики.ОбъектТОИР, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
					   |	ЕСТЬNULL(торо_ПринятиеОРКУчету.Ссылка, ЗНАЧЕНИЕ(Документ.торо_ПринятиеОРКУчету.ПустаяСсылка)) КАК ДокументПринятияКУчету
		               |ИЗ
		               |	ВТ_ИсходнаяТаблицаОР КАК ВТ_ИсходнаяТаблицаОР
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерПодразделения
		               |		ПО ВТ_ИсходнаяТаблицаОР.DeptIntegrationID = торо_СоответствиеОбъектовНСИДиспетчерПодразделения.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчерПодразделения.ТипОбъекта = ""СправочникСсылка.СтруктураПредприятия"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР
		               |		ПО ВТ_ИсходнаяТаблицаОР.EquipmentTypeIntegrationID = торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчерТиповыеОР.ТипОбъекта = ""СправочникСсылка.торо_ТиповыеОР"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР
		               |		ПО ВТ_ИсходнаяТаблицаОР.EquipmentGroupIntegrationID = торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.УникальныйИдентификаторДиспетчер
		               |			И (торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.ТипОбъекта = ""СправочникСсылка.торо_НаправленияОбъектовРемонтныхРабот"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерИзготовители
		               |		ПО (ВТ_ИсходнаяТаблицаОР.EquipmentFirmIntegrationID = торо_СоответствиеОбъектовНСИДиспетчерИзготовители.УникальныйИдентификаторДиспетчер)
		               |			И (торо_СоответствиеОбъектовНСИДиспетчерИзготовители.ТипОбъекта = ""СправочникСсылка.Производители"")
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерПоставщики
		               |		ПО (ВТ_ИсходнаяТаблицаОР.ProviderIntegrationID = торо_СоответствиеОбъектовНСИДиспетчерПоставщики.УникальныйИдентификаторДиспетчер)
		               |			И (торо_СоответствиеОбъектовНСИДиспетчерПоставщики.ТипОбъекта = ""СправочникСсылка.Контрагенты"")
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ПринятиеОРКУчету КАК торо_ПринятиеОРКУчету
		               |		ПО ВТ_ИсходнаяТаблицаОР.Объект = торо_ПринятиеОРКУчету.ОбъектРемонта";
#КонецОбласти
		Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаОР = РезультатЗапроса.Выгрузить();
		
		Результат = Истина;
		
		Для каждого СтрокаОР Из ТаблицаОР Цикл
			Если ЗначениеЗаполнено(СтрокаОР.Объект) Тогда
				ОбъектТОИР = СтрокаОР.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.торо_ОбъектыРемонта.СоздатьЭлемент();
				ОбъектТОИР.ПлановыйГрафикРаботы = ГрафикРаботы;
				ОбъектТОИР.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.Объект;
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаОР.Name;
			ОбъектТОИР.ИнвентарныйНомер = СтрокаОР.InventoryNumber;
			ОбъектТОИР.ЗаводскойНомер = СтрокаОР.FactoryNumber;
			ОбъектТОИР.ДатаВводаВЭксплуатацию = ?(Не СтрокаОР.dtInput = Дата(1970, 1, 1), СтрокаОР.dtInput, СтрокаОР.dtProducer);
			ОбъектТОИР.ДатаВыпуска = СтрокаОР.dtProducer;
			ОбъектТОИР.Комментарий = СтрокаОР.Description;
			ОбъектТОИР.Подразделение = СтрокаОР.Dept;
			ОбъектТОИР.ПодразделениеИсполнитель = СтрокаОР.Dept;
			ОбъектТОИР.ТиповойОР = СтрокаОР.ТиповойОР;
			ОбъектТОИР.Направление = СтрокаОР.НаправлениеОР;
			ОбъектТОИР.Изготовитель = СтрокаОР.Изготовитель;
			ОбъектТОИР.АдресМестонахождения = СтрокаОР.Местонахождение;
			ОбъектТОИР.Записать();
			
			Если Не ЗначениеЗаполнено(СтрокаОР.Объект) Тогда
			    торо_РаботаСИерархией20.ВключитьНовыйОбъектРемонтаВИерархию(ОбъектТОИР.Ссылка, СтруктураИерархии, Справочники.торо_ОбъектыРемонта.ПустаяСсылка(), Ложь, Ложь);
			КонецЕсли;
			
			ФОИспользоватьГарантии = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
			ИспользоватьГарантии = ФОИспользоватьГарантии И ЗначениеЗаполнено(СтрокаОР.dtGuarantee) И ЗначениеЗаполнено(СтрокаОР.Поставщик);
			Если ИспользоватьГарантии Тогда
				ТаблицаГарантий = торо_ГарантийноеОбслуживание.ПолучитьТаблицуГарантий(ОбъектТОИР.Ссылка);
				
				СтруктураПоиска = Новый Структура("ГарантирующаяОрганизация", СтрокаОР.Поставщик);
				НайденныеСтроки = ТаблицаГарантий.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 1 И Не НайденныеСтроки[0].УсловияГарантии.ДатаОкончанияГарантии = НачалоДня(СтрокаОР.dtGuarantee) Тогда
					УсловияГарантии = НайденныеСтроки[0].УсловияГарантии.ПолучитьОбъект();
					УсловияГарантии.ДатаОкончанияГарантии = СтрокаОР.dtGuarantee;
					УсловияГарантии.Записать();
				ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
					УсловияГарантии = Справочники.торо_УсловияГарантии.СоздатьЭлемент();
					УсловияГарантии.ДатаНачалаГарантии = ?(ОбъектТОИР.ДатаВводаВЭксплуатацию < СтрокаОР.dtGuarantee И Не ОбъектТОИР.ДатаВводаВЭксплуатацию = Дата(1970, 1, 1), ОбъектТОИР.ДатаВводаВЭксплуатацию, СтрокаОР.dtGuarantee);
					УсловияГарантии.ДатаОкончанияГарантии = СтрокаОР.dtGuarantee;
					УсловияГарантии.ПроверятьПериодГарантии = Истина;
					УсловияГарантии.Наименование = СтрокаОР.Name + " (" + УсловияГарантии.ДатаНачалаГарантии + "-" + УсловияГарантии.ДатаОкончанияГарантии + ")";
					УсловияГарантии.Записать();
					
					МенеджерЗаписи = РегистрыСведений.торо_СрокиГарантииОбъектовРемонта.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ОбъектРемонта = ОбъектТОИР.Ссылка;
					МенеджерЗаписи.УсловияГарантии = УсловияГарантии.Ссылка;
					МенеджерЗаписи.ГарантирующаяОрганизация = СтрокаОР.Поставщик;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
			
			Если Константы.торо_ИспользоватьДокументыПринятияИСписанияОборудования.Получить() И Не ЗначениеЗаполнено(СтрокаОР.ДокументПринятияКУчету) Тогда
			    НовыйДокумент = Документы.торо_ПринятиеОРКУчету.СоздатьДокумент();
				НовыйДокумент.Дата = ТекущаяДатаСеанса();
				НовыйДокумент.Организация = Узел.ОрганизацияПоУмолчанию;
				НовыйДокумент.Подразделение = СтрокаОР.Dept;
				НовыйДокумент.ОбъектРемонта = ОбъектТОИР.Ссылка;
				НовыйДокумент.ДатаВводаВЭксплуатацию = СтрокаОР.dtInput;
				Результат = ЗаписатьДокумент(НовыйДокумент, Ложь, "<Принятие ОР к учету>");
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаОР.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
			
			Если ПланыОбмена.ИзменениеЗарегистрировано(Узел, ОбъектТОИР) Тогда
			    ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектТОИР);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи объектов ремонта:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи ОР");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ЗаписатьВидыЭксплуатации(ТаблицаВидовЭксплуатации)
	Если ТаблицаВидовЭксплуатации.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.торо_ВидыЭксплуатации";
	
	Попытка
		Для каждого СтрокаВидаЭксплуатации Из ТаблицаВидовЭксплуатации Цикл
			Если ЗначениеЗаполнено(СтрокаВидаЭксплуатации.Объект) Тогда
				ОбъектТОИР = СтрокаВидаЭксплуатации.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.торо_ВидыЭксплуатации.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаВидаЭксплуатации.Name;
			ОбъектТОИР.ТипЭксплуатации = СтрокаВидаЭксплуатации.ТипЭксплуатации;
			ОбъектТОИР.ОбязательныйВводВидаПуска = СтрокаВидаЭксплуатации.ОбязательныйВводВидаПуска;
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаВидаЭксплуатации.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи видов эксплуатации:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Виды эксплуатации>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьПричиныПростоя(ТаблицаПричинПростоя)
	Если ТаблицаПричинПростоя.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.торо_ПричиныПростояОборудования";
	
	Попытка
		Для каждого СтрокаПричиныПростоя Из ТаблицаПричинПростоя Цикл
			Если ЗначениеЗаполнено(СтрокаПричиныПростоя.Объект) Тогда
				ОбъектТОИР = СтрокаПричиныПростоя.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.торо_ПричиныПростояОборудования.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаПричиныПростоя.Name;
			ОбъектТОИР.ВидПростоя = СтрокаПричиныПростоя.ВидПростоя;
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаПричиныПростоя.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи причины простоя:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Причины простоя>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьПоказателиЭксплуатации(ТаблицаПоказателейЭксплуатации)
	Если ТаблицаПоказателейЭксплуатации.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
#Область КлассификаторЕдиницыИзмерения
	СтрокаОписаниеТипов100 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	СтрокаОписаниеТипов4 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(4));

	ЕдиницыИзмеренияКлассификатор = Новый ТаблицаЗначений();
	ЕдиницыИзмеренияКлассификатор.Колонки.Добавить("Наименование", СтрокаОписаниеТипов100);
	ЕдиницыИзмеренияКлассификатор.Колонки.Добавить("КодЧисловой", СтрокаОписаниеТипов4);
	ЕдиницыИзмеренияКлассификатор.Колонки.Добавить("ВесоваяЕдиницаИзмерения", СтрокаОписаниеТипов100);
	ЕдиницыИзмеренияКлассификатор.Колонки.Добавить("КодовоеБуквенноеОбозначениеМеждународное", СтрокаОписаниеТипов100);
	ЕдиницыИзмеренияКлассификатор.Колонки.Добавить("КодовоеБуквенноеОбозначениеНациональное", СтрокаОписаниеТипов100);
	ЕдиницыИзмеренияКлассификатор.Колонки.Добавить("УсловноеОбозначениеМеждународное", СтрокаОписаниеТипов100);
	ЕдиницыИзмеренияКлассификатор.Колонки.Добавить("УсловноеОбозначениеНациональное", СтрокаОписаниеТипов100);

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Макет = Справочники.ЕдиницыИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	Макет.Записать(ИмяВременногоФайла);
	Дерево = ЗначениеИзФайла(ИмяВременногоФайла);
	
	Для каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Для каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
			Для каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
				ЗаполнитьЗначенияСвойств(ЕдиницыИзмеренияКлассификатор.Добавить(), СтрокаУровень3);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
#КонецОбласти

#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассификаторЕдиницИзмеренияТаблица.Наименование КАК Наименование,
	               |	КлассификаторЕдиницИзмеренияТаблица.КодЧисловой КАК КодЧисловой,
	               |	КлассификаторЕдиницИзмеренияТаблица.КодовоеБуквенноеОбозначениеМеждународное КАК КодовоеБуквенноеОбозначениеМеждународное,
	               |	КлассификаторЕдиницИзмеренияТаблица.КодовоеБуквенноеОбозначениеНациональное КАК КодовоеБуквенноеОбозначениеНациональное,
	               |	КлассификаторЕдиницИзмеренияТаблица.УсловноеОбозначениеМеждународное КАК УсловноеОбозначениеМеждународное,
	               |	КлассификаторЕдиницИзмеренияТаблица.УсловноеОбозначениеНациональное КАК УсловноеОбозначениеНациональное
	               |ПОМЕСТИТЬ ВТ_КлассификаторЕдиницИзмерения
	               |ИЗ
	               |	&КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмеренияТаблица
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КодЧисловой
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.ТипПараметра КАК ТипПараметра,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.Name КАК Name,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.MeasureUnit КАК MeasureUnit,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.Объект КАК Объект,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ ВТ_ТаблицаПоказателейЭксплуатации
	               |ИЗ
	               |	&ТаблицаПоказателейЭксплуатации КАК ИсходнаяТаблицаПоказателейЭксплуатации
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MeasureUnit,
	               |	ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit КАК MeasureUnit
	               |ПОМЕСТИТЬ ВТ_ЕдиницыИзмеренийДляСопоставления
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |ГДЕ
	               |	НЕ ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit = """"
	               |	И ВТ_ТаблицаПоказателейЭксплуатации.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MeasureUnit
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit КАК MeasureUnit,
	               |	ВТ_КлассификаторЕдиницИзмерения.КодЧисловой КАК КодЧисловой,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ВсеСопоставленныеЕдиницыИзмерения
	               |ИЗ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления КАК ВТ_ЕдиницыИзмеренийДляСопоставления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлассификаторЕдиницИзмерения КАК ВТ_КлассификаторЕдиницИзмерения
	               |		ПО ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit = ВТ_КлассификаторЕдиницИзмерения.УсловноеОбозначениеНациональное
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit,
	               |	ВТ_КлассификаторЕдиницИзмерения.КодЧисловой,
	               |	2
	               |ИЗ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления КАК ВТ_ЕдиницыИзмеренийДляСопоставления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлассификаторЕдиницИзмерения КАК ВТ_КлассификаторЕдиницИзмерения
	               |		ПО ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit = ВТ_КлассификаторЕдиницИзмерения.УсловноеОбозначениеМеждународное
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit,
	               |	ВТ_КлассификаторЕдиницИзмерения.КодЧисловой,
	               |	3
	               |ИЗ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления КАК ВТ_ЕдиницыИзмеренийДляСопоставления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлассификаторЕдиницИзмерения КАК ВТ_КлассификаторЕдиницИзмерения
	               |		ПО ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit = ВТ_КлассификаторЕдиницИзмерения.КодовоеБуквенноеОбозначениеНациональное
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit,
	               |	ВТ_КлассификаторЕдиницИзмерения.КодЧисловой,
	               |	4
	               |ИЗ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления КАК ВТ_ЕдиницыИзмеренийДляСопоставления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлассификаторЕдиницИзмерения КАК ВТ_КлассификаторЕдиницИзмерения
	               |		ПО ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit = ВТ_КлассификаторЕдиницИзмерения.КодовоеБуквенноеОбозначениеМеждународное
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit,
	               |	ВТ_КлассификаторЕдиницИзмерения.КодЧисловой,
	               |	5
	               |ИЗ
	               |	ВТ_ЕдиницыИзмеренийДляСопоставления КАК ВТ_ЕдиницыИзмеренийДляСопоставления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлассификаторЕдиницИзмерения КАК ВТ_КлассификаторЕдиницИзмерения
	               |		ПО ВТ_ЕдиницыИзмеренийДляСопоставления.MeasureUnit = ВТ_КлассификаторЕдиницИзмерения.Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ВсеСопоставленныеЕдиницыИзмерения.MeasureUnit КАК MeasureUnit,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеЕдиницыИзмерения.КодЧисловой) КАК КодЧисловой,
	               |	МИНИМУМ(ВТ_ВсеСопоставленныеЕдиницыИзмерения.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_СопоставленныеЕдиницыИзмеренияСПриоритетом
	               |ИЗ
	               |	ВТ_ВсеСопоставленныеЕдиницыИзмерения КАК ВТ_ВсеСопоставленныеЕдиницыИзмерения
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеСопоставленныеЕдиницыИзмерения.MeasureUnit
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КодЧисловой
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_КлассификаторЕдиницИзмерения.КодЧисловой КАК КодЧисловой,
	               |	ВТ_СопоставленныеЕдиницыИзмеренияСПриоритетом.MeasureUnit КАК Наименование,
	               |	ВТ_КлассификаторЕдиницИзмерения.Наименование КАК НаименованиеПолное,
	               |	ВТ_КлассификаторЕдиницИзмерения.КодовоеБуквенноеОбозначениеМеждународное КАК КодовоеБуквенноеОбозначениеМеждународное
	               |ПОМЕСТИТЬ ВТ_СопоставленныеЕдиницыИзмерения
	               |ИЗ
	               |	ВТ_КлассификаторЕдиницИзмерения КАК ВТ_КлассификаторЕдиницИзмерения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СопоставленныеЕдиницыИзмеренияСПриоритетом КАК ВТ_СопоставленныеЕдиницыИзмеренияСПриоритетом
	               |		ПО ВТ_КлассификаторЕдиницИзмерения.КодЧисловой = ВТ_СопоставленныеЕдиницыИзмеренияСПриоритетом.КодЧисловой
				   |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Наименование
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.ТипПараметра КАК ТипПараметра,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.Name КАК Name,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit КАК MeasureUnit,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.Объект КАК Объект,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	"""" КАК КодЧисловой,
	               |	"""" КАК Наименование,
	               |	"""" КАК НаименованиеПолное,
	               |	"""" КАК МеждународноеСокращение
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |ГДЕ
	               |	(ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit = """"
	               |			ИЛИ НЕ ВТ_ТаблицаПоказателейЭксплуатации.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.IntegrationID,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.ТипПараметра,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.Name,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.Объект,
	               |	ВТ_ТаблицаПоказателейЭксплуатации.ЕдиницаИзмерения,
	               |	ВТ_СопоставленныеЕдиницыИзмерения.КодЧисловой,
	               |	ВТ_СопоставленныеЕдиницыИзмерения.НаименованиеПолное,
	               |	ВТ_СопоставленныеЕдиницыИзмерения.Наименование,
	               |	ВТ_СопоставленныеЕдиницыИзмерения.КодовоеБуквенноеОбозначениеМеждународное
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СопоставленныеЕдиницыИзмерения КАК ВТ_СопоставленныеЕдиницыИзмерения
	               |		ПО ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit = ВТ_СопоставленныеЕдиницыИзмерения.Наименование
	               |ГДЕ
	               |	НЕ ВТ_ТаблицаПоказателейЭксплуатации.MeasureUnit = """"
	               |	И ВТ_ТаблицаПоказателейЭксплуатации.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаПоказателейЭксплуатации", ТаблицаПоказателейЭксплуатации);
	Запрос.УстановитьПараметр("КлассификаторЕдиницИзмерения", ЕдиницыИзмеренияКлассификатор);
	ТаблицаПоказателейЭксплуатации = Запрос.Выполнить().Выгрузить();
	
	ТипОбъектаКП = "ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта";
	ТипОбъектаПН = "СправочникСсылка.ПараметрыВыработкиОС";
	
	СозданныеЕдиницыИзмерения = Новый Соответствие();
	
	Попытка
		Для каждого СтрокаПоказателяЭксплуатации Из ТаблицаПоказателейЭксплуатации Цикл
			ПараметрНаработки = ?(СтрокаПоказателяЭксплуатации.ТипПараметра = "Параметр наработки", Истина, Ложь);
			
			Если ЗначениеЗаполнено(СтрокаПоказателяЭксплуатации.Объект) Тогда
				ОбъектТОИР = СтрокаПоказателяЭксплуатации.Объект.ПолучитьОбъект();
			ИначеЕсли ПараметрНаработки Тогда
				ОбъектТОИР = Справочники.ПараметрыВыработкиОС.СоздатьЭлемент();
			Иначе
				ОбъектТОИР = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьЭлемент();
				ОбъектТОИР.ТипЗначения = Новый ОписаниеТипов("Число");
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаПоказателяЭксплуатации.Name;
			
			Если ЗначениеЗаполнено(СтрокаПоказателяЭксплуатации.КодЧисловой)
				И ЗначениеЗаполнено(СозданныеЕдиницыИзмерения[СтрокаПоказателяЭксплуатации.КодЧисловой]) Тогда
				ЕдиницаИзмерения = СозданныеЕдиницыИзмерения[СтрокаПоказателяЭксплуатации.КодЧисловой];
			ИначеЕсли ЗначениеЗаполнено(СтрокаПоказателяЭксплуатации.КодЧисловой) Тогда
				ЕдиницаИзмеренияОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				ЕдиницаИзмеренияОбъект.Наименование = СтрокаПоказателяЭксплуатации.Наименование;
				ЕдиницаИзмеренияОбъект.НаименованиеПолное = СтрокаПоказателяЭксплуатации.НаименованиеПолное;
				ЕдиницаИзмеренияОбъект.Код = СтрокаПоказателяЭксплуатации.КодЧисловой;
				ЕдиницаИзмеренияОбъект.МеждународноеСокращение = СтрокаПоказателяЭксплуатации.МеждународноеСокращение;
				
				ЕдиницаИзмеренияОбъект.Записать();
				ЕдиницаИзмерения = ЕдиницаИзмеренияОбъект.Ссылка;
				СозданныеЕдиницыИзмерения[ЕдиницаИзмеренияОбъект.Код] = ЕдиницаИзмерения;
			Иначе
				ЕдиницаИзмерения = СтрокаПоказателяЭксплуатации.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				ОбъектТОИР.ЕдиницаИзмерения = ЕдиницаИзмерения;
			КонецЕсли;
			
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипОбъекта = ?(ПараметрНаработки, ТипОбъектаПН, ТипОбъектаКП);
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаПоказателяЭксплуатации.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи показателя эксплуатации:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи показателя эксплуатации");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьТиповыеОР(ТиповыеОР)
	Если ТиповыеОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.торо_ТиповыеОР";
	
	Попытка
		Для каждого СтрокаТиповогоОР Из ТиповыеОР Цикл
			Если ЗначениеЗаполнено(СтрокаТиповогоОР.Объект) Тогда
				ОбъектТОИР = СтрокаТиповогоОР.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.торо_ТиповыеОР.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаТиповогоОР.Name;
			ОбъектТОИР.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.Объект;
			ОбъектТОИР.Комментарий = СтрокаТиповогоОР.Description;
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаТиповогоОР.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи типовых ОР:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Типовые ОР>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьНаправленияОР(НаправленияОР)
	Если НаправленияОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.торо_НаправленияОбъектовРемонтныхРабот";
	
	Попытка
		Для каждого СтрокаНаправленияОР Из НаправленияОР Цикл
			Если ЗначениеЗаполнено(СтрокаНаправленияОР.Объект) Тогда
				ОбъектТОИР = СтрокаНаправленияОР.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.торо_НаправленияОбъектовРемонтныхРабот.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаНаправленияОР.Name;
			ОбъектТОИР.Комментарий = СтрокаНаправленияОР.Description;
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаНаправленияОР.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при записи направлений ОР:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Направления ОР>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьПаспортныеХарактеристикиОР(ПаспортныеХарактеристикиОР)
	Если ПаспортныеХарактеристикиОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	УспешноеВыполнение = Истина;
	МассивХарактеристик = Новый Массив();
	Для каждого ПаспортнаяХарактеристикаОР Из ПаспортныеХарактеристикиОР Цикл
		Если Не ЗначениеЗаполнено(ПаспортнаяХарактеристикаОР.Объект)
			Или ТипЗнч(ПаспортнаяХарактеристикаОР.Объект) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		    Результат = ЗаписатьДополнительныеРеквизитыИСведения(ПаспортнаяХарактеристикаОР, МассивХарактеристик);
			УспешноеВыполнение = УспешноеВыполнение И Результат;
		ИначеЕсли ТипЗнч(ПаспортнаяХарактеристикаОР.Объект) = Тип("ПланВидовХарактеристикСсылка.торо_ГруппыХарактеристикОборудования") Тогда
			Результат = ЗаписатьГруппыХарактеристикОборудования(ПаспортнаяХарактеристикаОР);
			УспешноеВыполнение = УспешноеВыполнение И Результат;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ПривязатьПаспортныХарактеристикиКНаправлениям(ПаспортныеХарактеристикиОР, МассивХарактеристик);
	
	Возврат УспешноеВыполнение И Результат;
КонецФункции

Функция ЗаписатьДополнительныеРеквизитыИСведения(ПаспортнаяХарактеристикаОР, МассивХарактеристик)
	ТипОбъекта = "ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения";
	
	Попытка
		Если ЗначениеЗаполнено(ПаспортнаяХарактеристикаОР.Объект) Тогда
			ОбъектТОИР = ПаспортнаяХарактеристикаОР.Объект.ПолучитьОбъект();
		Иначе
			ОбъектТОИР = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		КонецЕсли;
		
		ОбъектТОИР.Наименование = ПаспортнаяХарактеристикаОР.Name;
		ОбъектТОИР.Заголовок = ПаспортнаяХарактеристикаОР.Name;
		ОбъектТОИР.Комментарий = ПаспортнаяХарактеристикаОР.Description;
		ОбъектТОИР.ТипЗначения = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(12, 2));
		
		ОбъектТОИР.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
	    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
		МенеджерЗаписи.УникальныйИдентификаторДиспетчер = ПаспортнаяХарактеристикаОР.IntegrationID;
		МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
		МенеджерЗаписи.Записать();

		МассивХарактеристик.Добавить(ПаспортнаяХарактеристикаОР.IntegrationID);
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при записи паспортных характеристик ОР:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи плана видов характеристик <Дополнительные реквизиты и сведения>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьГруппыХарактеристикОборудования(ПаспортнаяХарактеристикаОР)
	ТипОбъекта = "ПланВидовХарактеристикСсылка.торо_ГруппыХарактеристикОборудования";
	
	Попытка
		Если ЗначениеЗаполнено(ПаспортнаяХарактеристикаОР.Объект) Тогда
			ОбъектТОИР = ПаспортнаяХарактеристикаОР.Объект.ПолучитьОбъект();
		Иначе
			ОбъектТОИР = ПланыВидовХарактеристик.торо_ГруппыХарактеристикОборудования.СоздатьЭлемент();
		КонецЕсли;
		
		ОбъектТОИР.Наименование = ПаспортнаяХарактеристикаОР.Name;
		ОбъектТОИР.ТипЗначения = Новый ОписаниеТипов("Число");
		
		ОбъектТОИР.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
	    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
		МенеджерЗаписи.УникальныйИдентификаторДиспетчер = ПаспортнаяХарактеристикаОР.IntegrationID;
		МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
		МенеджерЗаписи.Записать();
		
		Запрос = Новый Запрос();
#Область ТекстЗапроса
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ГруппыХарактеристикОборудованияСписокХарактеристик.Характеристика КАК Характеристика
		               |ИЗ
		               |	ПланВидовХарактеристик.торо_ГруппыХарактеристикОборудования.СписокХарактеристик КАК торо_ГруппыХарактеристикОборудованияСписокХарактеристик
		               |ГДЕ
		               |	торо_ГруппыХарактеристикОборудованияСписокХарактеристик.Ссылка = &ГруппаХарактеристик";
#КонецОбласти
		Запрос.УстановитьПараметр("ГруппаХарактеристик", ОбъектТОИР.Ссылка);
		СписокХарактеристик = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Характеристика");
		
		Для каждого Характеристика Из СписокХарактеристик Цикл
			ХарактеристикаОбъект = Характеристика.ПолучитьОбъект();
		    ХарактеристикаОбъект.ТипЗначения = Новый ОписаниеТипов("Число");
			
			Если Не ОбъектТОИР.ЗаполнятьАвтоматически Тогда
			    ХарактеристикаОбъект.Наименование = ПаспортнаяХарактеристикаОР.Name;
				ХарактеристикаОбъект.Заголовок = ПаспортнаяХарактеристикаОР.Name;
			КонецЕсли;
			
			ХарактеристикаОбъект.Записать();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при записи паспортных характеристик ОР:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи плана видов характеристик <Дополнительные реквизиты и сведения>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ПривязатьПаспортныХарактеристикиКНаправлениям(ПаспортныеХарактеристикиОР, МассивХарактеристик)
	НазванияТаблиц = Новый Массив();
	НазванияТаблиц.Добавить("ПаспортныеХарактеристикиОРВГруппах");
	НазванияТаблиц.Добавить("НаправленияОР");
	СтруктураТаблиц = ПолучитьОписанияВспомогательныхТаблиц(НазванияТаблиц);
	
	Узел = ПолучитьУзелПланаОбмена();
	ТаблицаСоответствияВебСервисов = ПолучитьТаблицуСоответствийВебСервисов();
	
#Область ПаспортныеХарактеристикиОРВГруппах
	ДополнительноеОписание = НСтр("ru = 'при получении паспортных характеристик ОР в группах'");
	ПаспортныеХарактеристикиОРВГруппах = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetTechnologyParamInGroupList", "ПаспортныеХарактеристикиОРВГруппах", ТаблицаСоответствияВебСервисов, ДополнительноеОписание);
	
	Если ПаспортныеХарактеристикиОРВГруппах.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти

#Область НаправленияОР
	ДополнительноеОписание = НСтр("ru = 'при получении групп ОР'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	НаправленияОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentGroupList", "НаправленияОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
	
	Если НаправленияОР.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
#КонецОбласти

#Область ТекстЗапроса
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПаспортныеХарактеристикиОРВГруппах.kEquipmentGroupID КАК kEquipmentGroupID,
	               |	ПаспортныеХарактеристикиОРВГруппах.kTechnologyParamID КАК kTechnologyParamID
	               |ПОМЕСТИТЬ ВТ_ПаспортныеХарактеристикиОРВГруппах
	               |ИЗ
	               |	&ПаспортныеХарактеристикиОРВГруппах КАК ПаспортныеХарактеристикиОРВГруппах
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПаспортныеХарактеристикиОР.ID КАК ID,
	               |	ПаспортныеХарактеристикиОР.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_ПаспортныеХарактеристикиОР
	               |ИЗ
	               |	&ПаспортныеХарактеристикиОР КАК ПаспортныеХарактеристикиОР
	               |ГДЕ
	               |	ПаспортныеХарактеристикиОР.IntegrationID В(&МассивХарактристик)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НаправленияОР.ID КАК ID,
	               |	НаправленияОР.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_НаправленияОР
	               |ИЗ
	               |	&НаправленияОР КАК НаправленияОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПаспортныеХарактеристикиОР.IntegrationID КАК TechnologyParamIntegrationID,
	               |	ВТ_НаправленияОР.IntegrationID КАК EquipmentGroupIntegrationID
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	               |ИЗ
	               |	ВТ_ПаспортныеХарактеристикиОРВГруппах КАК ВТ_ПаспортныеХарактеристикиОРВГруппах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПаспортныеХарактеристикиОР КАК ВТ_ПаспортныеХарактеристикиОР
	               |		ПО (ВТ_ПаспортныеХарактеристикиОР.ID = ВТ_ПаспортныеХарактеристикиОРВГруппах.kTechnologyParamID)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаправленияОР КАК ВТ_НаправленияОР
	               |		ПО (ВТ_НаправленияОР.ID = ВТ_ПаспортныеХарактеристикиОРВГруппах.kEquipmentGroupID)
	               |ГДЕ
	               |	НЕ ВТ_ПаспортныеХарактеристикиОР.IntegrationID ЕСТЬ NULL
	               |	И НЕ ВТ_НаправленияОР.IntegrationID ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СоответствиеОбъектовНСИДиспетчерХарактеристики.ОбъектТОИР КАК Характеристика,
	               |	ВЫРАЗИТЬ(торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.ОбъектТОИР КАК Справочник.торо_НаправленияОбъектовРемонтныхРабот).НаборСвойствОР КАК НаборСвойствОР
	               |ИЗ
	               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР
	               |		ПО ВТ_ПодготовленныеДанные.EquipmentGroupIntegrationID = торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.ТипОбъекта = ""СправочникСсылка.торо_НаправленияОбъектовРемонтныхРабот"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчерХарактеристики
	               |		ПО ВТ_ПодготовленныеДанные.TechnologyParamIntegrationID = торо_СоответствиеОбъектовНСИДиспетчерХарактеристики.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчерХарактеристики.ТипОбъекта = ""ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"")
	               |ГДЕ
	               |	НЕ торо_СоответствиеОбъектовНСИДиспетчерХарактеристики.ОбъектТОИР ЕСТЬ NULL
	               |	И НЕ торо_СоответствиеОбъектовНСИДиспетчерНаправленияОР.ОбъектТОИР ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	НаборСвойствОР";
#КонецОбласти
	Запрос.УстановитьПараметр("МассивХарактристик", МассивХарактеристик);
	Запрос.УстановитьПараметр("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОР);
	Запрос.УстановитьПараметр("НаправленияОР", НаправленияОР);
	Запрос.УстановитьПараметр("ПаспортныеХарактеристикиОРВГруппах", ПаспортныеХарактеристикиОРВГруппах);
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Результат.Следующий() Цикл
		Характеристики = Результат.Выбрать();
		НаборСвойствОбъект = Результат.НаборСвойствОР.ПолучитьОбъект();
		
		Пока Характеристики.Следующий() Цикл
		    СтруктураПоиска = Новый Структура("Свойство", Характеристики.Характеристика);
			НайденныеСтроки = НаборСвойствОбъект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
			    Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = Характеристики.Характеристика;
		КонецЦикла;
		
		НаборСвойствОбъект.Записать();
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьПроизводителей(Производители)
	Если Производители.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.Производители";
	
	Попытка
		Для каждого СтрокаПроизводителей Из Производители Цикл
			Если ЗначениеЗаполнено(СтрокаПроизводителей.Объект) Тогда
				ОбъектТОИР = СтрокаПроизводителей.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.Производители.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаПроизводителей.Name;
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаПроизводителей.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при записи производителей:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Производители>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьКонтрагентов(Контрагенты)
	Если Контрагенты.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.Контрагенты";
	
	Попытка
		Для каждого СтрокаКонтрагентов Из Контрагенты Цикл
			Если ЗначениеЗаполнено(СтрокаКонтрагентов.Объект) Тогда
				ОбъектТОИР = СтрокаКонтрагентов.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.Контрагенты.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаКонтрагентов.Name;
			ОбъектТОИР.НаименованиеПолное = СтрокаКонтрагентов.Name;
			ОбъектТОИР.ДополнительнаяИнформация = СтрокаКонтрагентов.Description;
			ОбъектТОИР.ЮридическоеФизическоеЛицо = СтрокаКонтрагентов.ЮридическоеФизическоеЛицо;
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаКонтрагентов.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при записи контрагентов:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Контрагенты>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьНоменклатуру(ИерархияНоменклатуры, Номенклатура, Узел)
	СозданныеГруппы = Новый Соответствие();
	Результат = ЗаписатьИерархиюНоменклатуры(ИерархияНоменклатуры.Строки, СозданныеГруппы, Справочники.Номенклатура.ПустаяСсылка());
	
	Если Номенклатура.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.Номенклатура";
	
	Попытка
		Для каждого СтрокаНоменклатуры Из Номенклатура Цикл
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.Объект) Тогда
				ОбъектТОИР = СтрокаНоменклатуры.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.Номенклатура.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаНоменклатуры.ShortName;
			ОбъектТОИР.НаименованиеПолное = СтрокаНоменклатуры.Name;
			ОбъектТОИР.Родитель = СозданныеГруппы[СтрокаНоменклатуры.MaterialAndComponentGroupID];
			ОбъектТОИР.ВидНоменклатуры = СтрокаНоменклатуры.ВидНоменклатуры;
			ОбъектТОИР.Описание = СтрокаНоменклатуры.Description;
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаНоменклатуры.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
			
			Если Узел.ЗагружатьЦеныНоменклатуры Тогда
			    СоздатьДокументУстановкиЦенНоменклатуры(СтрокаНоменклатуры, ОбъектТОИР.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при записи номенклатуры:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Номенклатура>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьИерархиюНоменклатуры(Строки, СозданныеОбъекты, Родитель)
	Результат = Истина;
	Если Строки.Количество() = 0 Тогда
	    Возврат Результат;
	КонецЕсли;
	
	ТипОбъекта = "СправочникСсылка.Номенклатура";
	
	Попытка
		Для каждого СтрокаИерархииНоменклатуры Из Строки Цикл
			Если Не СтрокаИерархииНоменклатуры.Обрабатывать Тогда
				Результат = ЗаписатьИерархиюНоменклатуры(СтрокаИерархииНоменклатуры.Строки, СозданныеОбъекты, Справочники.Номенклатура.ПустаяСсылка());
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИерархииНоменклатуры.Объект) Тогда
				ОбъектТОИР = СтрокаИерархииНоменклатуры.Объект.ПолучитьОбъект();
			Иначе
				ОбъектТОИР = Справочники.Номенклатура.СоздатьГруппу();
			КонецЕсли;
			
			ОбъектТОИР.Наименование = СтрокаИерархииНоменклатуры.Name;
			ОбъектТОИР.Родитель = Родитель;
			ОбъектТОИР.Записать();
			
			МенеджерЗаписи = РегистрыСведений.торо_СоответствиеОбъектовНСИДиспетчер.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
			МенеджерЗаписи.УникальныйИдентификаторДиспетчер = СтрокаИерархииНоменклатуры.IntegrationID;
			МенеджерЗаписи.ОбъектТОИР = ОбъектТОИР.Ссылка;
			МенеджерЗаписи.Записать();
			
			СозданныеОбъекты.Вставить(СтрокаИерархииНоменклатуры.ID, ОбъектТОИР.Ссылка);
			Результат = ЗаписатьИерархиюНоменклатуры(СтрокаИерархииНоменклатуры.Строки, СозданныеОбъекты, ОбъектТОИР.Ссылка);
		КонецЦикла;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при записи номенклатуры:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Номенклатура>");
		
		ЗаписатьИерархиюНоменклатуры(СтрокаИерархииНоменклатуры.Строки, СозданныеОбъекты, Справочники.Номенклатура.ПустаяСсылка());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция СоздатьДокументУстановкиЦенНоменклатуры(СтрокаНоменклатуры, Номенклатура)
	Попытка
		НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		НовыйДокумент.Дата = СтрокаНоменклатуры.ДатаУстановкиЦены;
		
		НоваяСтрокаТовара = НовыйДокумент.Товары.Добавить();
		НоваяСтрокаТовара.Номенклатура = Номенклатура;
		НоваяСтрокаТовара.ВидЦены = СтрокаНоменклатуры.ВидЦены;
		НоваяСтрокаТовара.Цена = СтрокаНоменклатуры.Cost;
		
		НоваяСтрокаВидовЦен = НовыйДокумент.ВидыЦен.Добавить();
		НоваяСтрокаВидовЦен.ВидЦены = СтрокаНоменклатуры.ВидЦены;
		
		ЕстьОшибки = Не ЗаписатьДокумент(НовыйДокумент, Ложь, "<Установка цен номенклатуры>");
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при записи документа <Установка цен номенклатуры>:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи документа <Установка цен номенклатуры>");
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ЕстьОшибки;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаИСопоставлениеДанныхПоОР

#Область ЗагрузкаДанныхПоОР

Функция ПодготовитьТаблицуОР(СтруктураТаблиц)
	Если СтруктураТаблиц.ОбъектыРемонта.Количество() = 0 Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсходнаяТаблицаОР.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ИсходнаяТаблицаОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КонтролируемыеПоказатели.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_КонтролируемыеПоказатели
	               |ИЗ
	               |	&КонтролируемыеПоказатели КАК КонтролируемыеПоказатели
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ПараметрыНаработки.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ПараметрыНаработки
	               |ИЗ
	               |	&ПараметрыНаработки КАК ПараметрыНаработки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Запчасти.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_Запчасти
	               |ИЗ
	               |	&Запчасти КАК Запчасти
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ПаспортныеХарактеристикиОР.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ПаспортныеХарактеристикиОР
	               |ИЗ
	               |	&ПаспортныеХарактеристикиОР КАК ПаспортныеХарактеристикиОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ТаблицаОР.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВЫБОР
	               |		КОГДА ВТ_КонтролируемыеПоказатели.ОбъектРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК КонтролируемыеПоказателиВведены,
	               |	ВЫБОР
	               |		КОГДА ВТ_ПараметрыНаработки.ОбъектРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПоказателиНаработкиВведены,
				   |	ВЫБОР
	               |		КОГДА ВТ_Запчасти.ОбъектРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЗапчастиУказаны,
				   |	ВЫБОР
	               |		КОГДА ВТ_ПаспортныеХарактеристикиОР.ОбъектРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПаспортныеХарактеристикиУказаны
	               |ИЗ
	               |	ВТ_ТаблицаОР КАК ВТ_ТаблицаОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтролируемыеПоказатели КАК ВТ_КонтролируемыеПоказатели
	               |		ПО ВТ_ТаблицаОР.ОбъектРемонта = ВТ_КонтролируемыеПоказатели.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыНаработки КАК ВТ_ПараметрыНаработки
	               |		ПО ВТ_ТаблицаОР.ОбъектРемонта = ВТ_ПараметрыНаработки.ОбъектРемонта
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запчасти КАК ВТ_Запчасти
	               |		ПО ВТ_ТаблицаОР.ОбъектРемонта = ВТ_Запчасти.ОбъектРемонта
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПаспортныеХарактеристикиОР КАК ВТ_ПаспортныеХарактеристикиОР
	               |		ПО ВТ_ТаблицаОР.ОбъектРемонта = ВТ_ПаспортныеХарактеристикиОР.ОбъектРемонта
				   |ГДЕ
				   |	НЕ ВТ_КонтролируемыеПоказатели.ОбъектРемонта ЕСТЬ NULL
				   |	ИЛИ НЕ ВТ_ПараметрыНаработки.ОбъектРемонта ЕСТЬ NULL
				   |	ИЛИ НЕ ВТ_Запчасти.ОбъектРемонта ЕСТЬ NULL
				   |	ИЛИ НЕ ВТ_ПаспортныеХарактеристикиОР.ОбъектРемонта ЕСТЬ NULL";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаОР", СтруктураТаблиц.ОбъектыРемонта);
	Запрос.УстановитьПараметр("КонтролируемыеПоказатели", СтруктураТаблиц.КонтролируемыеПоказатели);
	Запрос.УстановитьПараметр("ПараметрыНаработки", СтруктураТаблиц.ПараметрыНаработки);
	Запрос.УстановитьПараметр("Запчасти", СтруктураТаблиц.Запчасти);
	Запрос.УстановитьПараметр("ПаспортныеХарактеристикиОР", СтруктураТаблиц.ПаспортныеХарактеристикиОР);
	СтруктураТаблиц.ОбъектыРемонта = Запрос.Выполнить().Выгрузить();
	
	Возврат Истина;
КонецФункции

#Область ОбъектыРемонта

Функция ЗагрузитьОбъектыРемонтаВторойЭтап(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов)
#Область Станки
	ДополнительноеОписание = НСтр("ru = 'при получении станков'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Станки = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineList", "Станки", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
#Область ОР
	ДополнительноеОписание = НСтр("ru = 'при получении оборудования'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ОбъектыРемонта = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentList", "ОбъектыРемонта", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти

	Если ОбъектыРемонта.Количество() = 0 Тогда
		СтруктураТаблиц.Вставить("ОбъектыРемонта", Новый ТаблицаЗначений());
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаОР.ID КАК ID,
	               |	ИсходнаяТаблицаОР.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ИсходнаяТаблицаОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаСтанков.ID КАК ID,
	               |	ИсходнаяТаблицаСтанков.IntegrationID КАК IntegrationID,
				   |	ИсходнаяТаблицаСтанков.kEquipmentID КАК kEquipmentID
	               |ПОМЕСТИТЬ ВТ_ТаблицаСтанков
	               |ИЗ
	               |	&ТаблицаСтанков КАК ИсходнаяТаблицаСтанков
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				   |	ВТ_ТаблицаОР.ID КАК ID,
				   |	ВТ_ТаблицаОР.IntegrationID КАК IntegrationID,
				   |	ВТ_ТаблицаСтанков.ID КАК IDСтанка,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК ОбъектРемонта
	               |ИЗ
	               |	ВТ_ТаблицаОР КАК ВТ_ТаблицаОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаОР.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.торо_ОбъектыРемонта"")
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСтанков КАК ВТ_ТаблицаСтанков
	               |		ПО ВТ_ТаблицаОР.ID = ВТ_ТаблицаСтанков.kEquipmentID";
#КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаОР", ОбъектыРемонта);
	Запрос.УстановитьПараметр("ТаблицаСтанков", Станки);
	СтруктураТаблиц.Вставить("ОбъектыРемонта", Запрос.Выполнить().Выгрузить());
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПоказателиЭксплуатации

Функция ЗагрузитьПоказателиЭксплуатацииВторойЭтап(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов)
#Область ПоказателиЭксплуатации
	ДополнительноеОписание = НСтр("ru = 'при получении показателей эксплуатации'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Или Не СтрокаДанных.MachineParamTypeID = 3 Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПоказателиЭксплуатации = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMachineParamList", "ПоказателиЭксплуатации", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
	Если ПоказателиЭксплуатации.Количество() = 0 Тогда
	    Возврат Истина;
	КонецЕсли;
	
#Область ПоказателиЭксплуатацииСтанков
	ДополнительноеОписание = НСтр("ru = 'при получении показателей эксплуатации станков'");
	ПоказателиЭксплуатацииСтанков = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetParamInMachineList", "ПоказателиЭксплуатацииСтанков", ТаблицаСоответствияВебСервисов, ДополнительноеОписание);
#КонецОбласти

	// Показатели эксплуатации, не привязанные к ОР (без учета ТОР)
#Область ОсновнойЗапрос
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.ID КАК ID,
	               |	ИсходнаяТаблицаПоказателейЭксплуатации.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_ТаблицаПоказателейЭксплуатации
	               |ИЗ
	               |	&ТаблицаПоказателейЭксплуатации КАК ИсходнаяТаблицаПоказателейЭксплуатации
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходнаяТаблицаПоказателейЭксплуатацииСтанков.MachineParamID КАК MachineParamID,
	               |	ИсходнаяТаблицаПоказателейЭксплуатацииСтанков.MachineID КАК MachineID
	               |ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаПоказателейЭксплуатацииСтанков
	               |ИЗ
	               |	&ТаблицаПоказателейЭксплуатацииСтанков КАК ИсходнаяТаблицаПоказателейЭксплуатацииСтанков
				   |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	MachineParamID
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсходнаяТаблицаОбъектовРемонта.ID КАК ID,
	               |	ИсходнаяТаблицаОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
				   |	ИсходнаяТаблицаОбъектовРемонта.IDСтанка КАК IDСтанка
	               |ПОМЕСТИТЬ ВТ_ТаблицаОбъектовРемонта
	               |ИЗ
	               |	&ТаблицаОбъектовРемонта КАК ИсходнаяТаблицаОбъектовРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПоказателейЭксплуатации.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ТаблицаПоказателейЭксплуатацииСтанков
	               |ИЗ
	               |	ВТ_ИсходнаяТаблицаПоказателейЭксплуатацииСтанков КАК ВТ_ИсходнаяТаблицаПоказателейЭксплуатацииСтанков
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоказателейЭксплуатации КАК ВТ_ТаблицаПоказателейЭксплуатации
	               |		ПО ВТ_ИсходнаяТаблицаПоказателейЭксплуатацииСтанков.MachineParamID = ВТ_ТаблицаПоказателейЭксплуатации.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаОбъектовРемонта КАК ВТ_ТаблицаОбъектовРемонта
	               |		ПО ВТ_ИсходнаяТаблицаПоказателейЭксплуатацииСтанков.MachineID = ВТ_ТаблицаОбъектовРемонта.IDСтанка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаПоказателейЭксплуатацииСтанков.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаПоказателейЭксплуатацииСтанков.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Показатель,
	               |	ВЫБОР
	               |		КОГДА торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР ССЫЛКА Справочник.ПараметрыВыработкиОС
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПараметрНаработки
	               |ИЗ
	               |	ВТ_ТаблицаПоказателейЭксплуатацииСтанков КАК ВТ_ТаблицаПоказателейЭксплуатацииСтанков
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТаблицаПоказателейЭксплуатацииСтанков.IntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
	               |			И (торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.ПараметрыВыработкиОС""
	               |				ИЛИ торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта"")";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектовРемонта", СтруктураТаблиц.ОбъектыРемонта);
	Запрос.УстановитьПараметр("ТаблицаПоказателейЭксплуатации", ПоказателиЭксплуатации);
	Запрос.УстановитьПараметр("ТаблицаПоказателейЭксплуатацииСтанков", ПоказателиЭксплуатацииСтанков);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СписокОР = РезультатЗапроса.ВыгрузитьКолонку("ОбъектРемонта");
#КонецОбласти
	
	// Необходимо получать показатели эксплуатации, не привязанные к ОР с учетом ТОР
#Область ТаблицаТиповыхОР
	ЗапросТиповыхОР = Новый Запрос;
	ЗапросТиповыхОР.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                        |	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР
	                        |ИЗ
	                        |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	                        |ГДЕ
	                        |	торо_ОбъектыРемонта.Ссылка В(&Ссылка)
	                        |	И торо_ОбъектыРемонта.ТиповойОР <> ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)";
	
	ЗапросТиповыхОР.УстановитьПараметр("Ссылка", СписокОР);
	СписокТиповых = ЗапросТиповыхОР.Выполнить().Выгрузить().ВыгрузитьКолонку("ТиповойОР");
	
	ТаблицаРодителейТиповых = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейСпискаОбъектов(СписокТиповых, Тип("СправочникСсылка.торо_ТиповыеОР"), Истина);
	
	ЗапросТаблицаТиповых = Новый Запрос;
	ЗапросТаблицаТиповых.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                             |	ТаблицаРодителей.Родитель КАК Родитель,
	                             |	ТаблицаРодителей.Уровень КАК Уровень,
	                             |	ТаблицаРодителей.Объект КАК Объект
	                             |ПОМЕСТИТЬ ТаблицаРодителейТиповыхОР
	                             |ИЗ
	                             |	&ТаблицаРодителей КАК ТаблицаРодителей
								 |
								 |ИНДЕКСИРОВАТЬ ПО
								 |	Объект
								 |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                             |	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
	                             |	ТаблицаРодителейТиповыхОР.Родитель КАК ТиповойОР,
	                             |	ТаблицаРодителейТиповыхОР.Объект КАК Объект,
	                             |	ТаблицаРодителейТиповыхОР.Уровень КАК Уровень
	                             |ИЗ
	                             |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	                             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРодителейТиповыхОР КАК ТаблицаРодителейТиповыхОР
	                             |		ПО торо_ОбъектыРемонта.ТиповойОР = ТаблицаРодителейТиповыхОР.Объект
	                             |ГДЕ
	                             |	торо_ОбъектыРемонта.Ссылка В(&СписокОР)";

	ЗапросТаблицаТиповых.УстановитьПараметр("СписокОР",СписокОР);
	ЗапросТаблицаТиповых.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителейТиповых);
	
	ТаблицаТиповыхОР = ЗапросТаблицаТиповых.Выполнить().Выгрузить();
#КонецОбласти
	
#Область КонтролируемыеПоказатели
	ЗапросКП = Новый Запрос;
	ЗапросКП.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ТаблицаТиповыхОР.ОбъектРемонта КАК ОбъектРемонта,
	                 |	ТаблицаТиповыхОР.ТиповойОР КАК ТиповойОР,
	                 |	ТаблицаТиповыхОР.Уровень КАК Уровень
	                 |ПОМЕСТИТЬ ТаблицаТиповыхОР
	                 |ИЗ
	                 |	&ТаблицаТиповыхОР КАК ТаблицаТиповыхОР
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ТиповойОР
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ПоказателиЭксплуатации.ОбъектРемонта КАК ОбъектРемонта,
	                 |	ПоказателиЭксплуатации.Показатель КАК Показатель
	                 |ПОМЕСТИТЬ ТаблицаКП
	                 |ИЗ
	                 |	&ПоказателиЭксплуатации КАК ПоказателиЭксплуатации
	                 |ГДЕ
	                 |	НЕ ПоказателиЭксплуатации.ПараметрНаработки
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ОбъектРемонта,
	                 |	Показатель
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ВЫРАЗИТЬ(торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
	                 |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель КАК Показатель,
	                 |	ИСТИНА КАК Приоритет,
	                 |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален КАК Удален,
	                 |	-1 КАК Уровень
	                 |ПОМЕСТИТЬ ПоказателиОРИТиповогоОР
	                 |ИЗ
	                 |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	                 |ГДЕ
	                 |	ВЫРАЗИТЬ(торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) В (&СписокОР)
	                 |
	                 |ОБЪЕДИНИТЬ ВСЕ
	                 |
	                 |ВЫБРАТЬ
	                 |	ТаблицаТиповыхОР.ОбъектРемонта,
	                 |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
	                 |	ЛОЖЬ,
	                 |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален,
	                 |	ТаблицаТиповыхОР.Уровень
	                 |ИЗ
	                 |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТиповыхОР КАК ТаблицаТиповыхОР
	                 |		ПО ((ВЫРАЗИТЬ(торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК Справочник.торо_ТиповыеОР)) = ТаблицаТиповыхОР.ТиповойОР)
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ТаблицаПриоритетовПолная.ОбъектРемонта КАК ОбъектРемонта,
	                 |	ТаблицаПриоритетовПолная.Показатель КАК Показатель,
	                 |	НЕ МАКСИМУМ(ТаблицаПриоритетовПолная.Приоритет) КАК ИзТиповогоОР,
	                 |	МАКСИМУМ(ТаблицаПриоритетовПолная.Удален) КАК Удален
	                 |ПОМЕСТИТЬ ВТ_ПодготовленныеПоказателиОРИТиповогоОР
	                 |ИЗ
	                 |	ПоказателиОРИТиповогоОР КАК ТаблицаПриоритетовПолная
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ТаблицаПриоритетовПолная.ОбъектРемонта,
	                 |	ТаблицаПриоритетовПолная.Показатель
	                 |
	                 |ИМЕЮЩИЕ
	                 |	МАКСИМУМ(ТаблицаПриоритетовПолная.Удален) = ЛОЖЬ
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ОбъектРемонта,
	                 |	Показатель
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ТаблицаКП.ОбъектРемонта КАК ОбъектРемонта,
	                 |	ТаблицаКП.Показатель КАК Показатель
	                 |ИЗ
	                 |	ТаблицаКП КАК ТаблицаКП
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодготовленныеПоказателиОРИТиповогоОР КАК ВТ_ПодготовленныеПоказателиОРИТиповогоОР
	                 |		ПО ТаблицаКП.ОбъектРемонта = ВТ_ПодготовленныеПоказателиОРИТиповогоОР.ОбъектРемонта
	                 |			И ТаблицаКП.Показатель = ВТ_ПодготовленныеПоказателиОРИТиповогоОР.Показатель
	                 |ГДЕ
	                 |	ВТ_ПодготовленныеПоказателиОРИТиповогоОР.ОбъектРемонта ЕСТЬ NULL";

	ЗапросКП.УстановитьПараметр("СписокОР", СписокОР);
	ЗапросКП.УстановитьПараметр("ТаблицаТиповыхОР", ТаблицаТиповыхОР);
	ЗапросКП.УстановитьПараметр("ПоказателиЭксплуатации", РезультатЗапроса);
	
	Если Узел.ЗагружатьКонтролируемыеПоказателиОР Тогда
	    ВыборкаКП = ЗапросКП.Выполнить().Выбрать();
		Пока ВыборкаКП.Следующий() Цикл
			НоваяСтрока = СтруктураТаблиц.КонтролируемыеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаКП);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаКП.Показатель);
			НоваяСтрока.Доступность = НоваяСтрока.Показатель.ТипЗначения.СодержитТип(Тип("Число"));
		КонецЦикла;
	КонецЕсли;
#КонецОбласти
	
#Область ПараметрыНаработки
	ЗапросПН = Новый Запрос;
	ЗапросПН.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ТаблицаТиповыхОР.ОбъектРемонта КАК ОбъектРемонта,
	                 |	ТаблицаТиповыхОР.ТиповойОР КАК ТиповойОР,
	                 |	ТаблицаТиповыхОР.Уровень КАК Уровень
	                 |ПОМЕСТИТЬ ТаблицаТиповыхОР
	                 |ИЗ
	                 |	&ТаблицаТиповыхОР КАК ТаблицаТиповыхОР
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ТиповойОР
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ПоказателиЭксплуатации.ОбъектРемонта КАК ОбъектРемонта,
	                 |	ПоказателиЭксплуатации.Показатель КАК Показатель
	                 |ПОМЕСТИТЬ ТаблицаПН
	                 |ИЗ
	                 |	&ПоказателиЭксплуатации КАК ПоказателиЭксплуатации
	                 |ГДЕ
	                 |	ПоказателиЭксплуатации.ПараметрНаработки
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ОбъектРемонта,
	                 |	Показатель
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	                 |	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель КАК Показатель
	                 |ПОМЕСТИТЬ ВТ_ПараметрыНаработки
	                 |ИЗ
	                 |	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ОбъектРемонта
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ВЫРАЗИТЬ(ВТ_ПараметрыНаработки.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
	                 |	ВТ_ПараметрыНаработки.Показатель КАК Показатель,
	                 |	ИСТИНА КАК Приоритет,
	                 |	-1 КАК Уровень
	                 |ПОМЕСТИТЬ ПоказателиОРИТиповогоОР
	                 |ИЗ
	                 |	ВТ_ПараметрыНаработки КАК ВТ_ПараметрыНаработки
	                 |ГДЕ
	                 |	ВЫРАЗИТЬ(ВТ_ПараметрыНаработки.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) В (&СписокОР)
	                 |
	                 |ОБЪЕДИНИТЬ ВСЕ
	                 |
	                 |ВЫБРАТЬ
	                 |	ТаблицаТиповыхОР.ОбъектРемонта,
	                 |	ВТ_ПараметрыНаработки.Показатель,
	                 |	ЛОЖЬ,
	                 |	ТаблицаТиповыхОР.Уровень
	                 |ИЗ
	                 |	ВТ_ПараметрыНаработки КАК ВТ_ПараметрыНаработки
	                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТиповыхОР КАК ТаблицаТиповыхОР
	                 |		ПО ((ВЫРАЗИТЬ(ВТ_ПараметрыНаработки.ОбъектРемонта КАК Справочник.торо_ТиповыеОР)) = ТаблицаТиповыхОР.ТиповойОР)
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ТаблицаПриоритетовПолная.ОбъектРемонта КАК ОбъектРемонта,
	                 |	ТаблицаПриоритетовПолная.Показатель КАК Показатель,
	                 |	НЕ МАКСИМУМ(ТаблицаПриоритетовПолная.Приоритет) КАК ИзТиповогоОР
	                 |ПОМЕСТИТЬ ВТ_ПодготовленныеПоказателиОРИТиповогоОР
	                 |ИЗ
	                 |	ПоказателиОРИТиповогоОР КАК ТаблицаПриоритетовПолная
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ТаблицаПриоритетовПолная.ОбъектРемонта,
	                 |	ТаблицаПриоритетовПолная.Показатель
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ОбъектРемонта,
	                 |	Показатель
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ТаблицаПН.ОбъектРемонта КАК ОбъектРемонта,
	                 |	ТаблицаПН.Показатель КАК Показатель
	                 |ИЗ
	                 |	ТаблицаПН КАК ТаблицаПН
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодготовленныеПоказателиОРИТиповогоОР КАК ВТ_ПодготовленныеПоказателиОРИТиповогоОР
	                 |		ПО ТаблицаПН.ОбъектРемонта = ВТ_ПодготовленныеПоказателиОРИТиповогоОР.ОбъектРемонта
	                 |			И ТаблицаПН.Показатель = ВТ_ПодготовленныеПоказателиОРИТиповогоОР.Показатель
	                 |ГДЕ
	                 |	ВТ_ПодготовленныеПоказателиОРИТиповогоОР.ОбъектРемонта ЕСТЬ NULL";

	ЗапросПН.УстановитьПараметр("СписокОР", СписокОР);
	ЗапросПН.УстановитьПараметр("ТаблицаТиповыхОР", ТаблицаТиповыхОР);
	ЗапросПН.УстановитьПараметр("ПоказателиЭксплуатации", РезультатЗапроса);
	
	Если Узел.ЗагружатьНаработкуОР Тогда
	    ВыборкаПН = ЗапросПН.Выполнить().Выбрать();
		Пока ВыборкаПН.Следующий() Цикл
			НоваяСтрока = СтруктураТаблиц.ПараметрыНаработки.Добавить();
		    ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПН);
			НоваяСтрока.Период = НоваяСтрока.ОбъектРемонта.ДатаВводаВЭксплуатацию;
			НоваяСтрока.КоэффициентИспользованияОборудования = 1;
			НоваяСтрока.ПродолжительностьПериодаПлановойНаработки = 1;
		КонецЦикла;
	КонецЕсли;
#КонецОбласти

//	СтруктураТаблиц.Удалить("ПоказателиЭксплуатации");
//	СтруктураТаблиц.Удалить("ПоказателиЭксплуатацииСтанков");
//	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Запчасти

Функция ЗагрузитьЗапчасти(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов)
#Область Запчасти
	ДополнительноеОписание = НСтр("ru = 'при получении запчастей'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.MaterialAndComponentIntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	Запчасти = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetMaterialAndComponentInEquipment", "ЗапчастиОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти

	Если Не ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей") Или Запчасти.Количество() = 0 Тогда
		Запчасти.Очистить();
		СтруктураТаблиц.Вставить("Запчасти", Запчасти);
	    Возврат Истина;
	КонецЕсли;

#Область ОсновнойЗапрос
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	""Элемент_"" + ИсходнаяТалицаЗапчастей.MaterialAndComponentIntegrationID КАК MaterialAndComponentIntegrationID,
	               |	ИсходнаяТалицаЗапчастей.kEquipmentID КАК kEquipmentID
	               |ПОМЕСТИТЬ ВТ_ТалицаЗапчастей
	               |ИЗ
	               |	&ТалицаЗапчастей КАК ИсходнаяТалицаЗапчастей
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсходнаяТаблицаОбъектовРемонта.ID КАК ID,
	               |	ИсходнаяТаблицаОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ТаблицаОбъектовРемонта
	               |ИЗ
	               |	&ТаблицаОбъектовРемонта КАК ИсходнаяТаблицаОбъектовРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР КАК Номенклатура,
	               |	ВТ_ТаблицаОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ЗапчастиОборудования
	               |ИЗ
	               |	ВТ_ТалицаЗапчастей КАК ВТ_ТалицаЗапчастей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаОбъектовРемонта КАК ВТ_ТаблицаОбъектовРемонта
	               |		ПО ВТ_ТалицаЗапчастей.kEquipmentID = ВТ_ТаблицаОбъектовРемонта.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ТалицаЗапчастей.MaterialAndComponentIntegrationID = торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер
				   |			И торо_СоответствиеОбъектовНСИДиспетчер.ТипОбъекта = ""СправочникСсылка.Номенклатура""
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗапчастиОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ЗапчастиОборудования.Номенклатура КАК Номенклатура,
	               |	1 КАК Количество,
	               |	ВЫБОР
				   |		КОГДА НЕ ВТ_ЗапчастиОборудования.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК ХарактеристикиИспользуются
	               |ИЗ
	               |	ВТ_ЗапчастиОборудования КАК ВТ_ЗапчастиОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_Запчасти КАК торо_Запчасти
	               |		ПО ВТ_ЗапчастиОборудования.ОбъектРемонта = торо_Запчасти.ОбъектРемонта
	               |			И ВТ_ЗапчастиОборудования.Номенклатура = торо_Запчасти.Номенклатура
	               |ГДЕ
	               |	торо_Запчасти.ОбъектРемонта ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектовРемонта", СтруктураТаблиц.ОбъектыРемонта);
	Запрос.УстановитьПараметр("ТалицаЗапчастей", Запчасти);
	СтруктураТаблиц.Вставить("Запчасти", Запрос.Выполнить().Выгрузить());
#КонецОбласти
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПаспортныеХарактеристики

Функция ЗагрузитьПаспортныеХарактеристикиОРВторойЭтап(СтруктураТаблиц, Узел, ТаблицаСоответствияВебСервисов)
	НазванияТаблиц = Новый Массив();
	НазванияТаблиц.Добавить("ПаспортныеХарактеристикиОборудованияПустая");
	ПаспортныеХарактеристикиОборудованияПустая = ПолучитьОписанияВспомогательныхТаблиц(НазванияТаблиц).ПаспортныеХарактеристикиОборудованияПустая;
	
#Область ПаспортныеХарактеристики
	ДополнительноеОписание = НСтр("ru = 'при получении паспортных характеристик'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПаспортныеХарактеристикиОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetTechnologyParamList", "ПаспортныеХарактеристикиОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
	Если ПаспортныеХарактеристикиОР.Количество() = 0 Тогда
		СтруктураТаблиц.Вставить("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОборудованияПустая);
	    Возврат Истина;
	КонецЕсли;

#Область НаправленияОР
	ДополнительноеОписание = НСтр("ru = 'при получении групп оборудования'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.IntegrationID) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	НаправленияОР = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetEquipmentGroupList", "НаправленияОР", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
	Если НаправленияОР.Количество() = 0 Тогда
		ПаспортныеХарактеристикиОР.Очистить();
		СтруктураТаблиц.Вставить("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОборудованияПустая);
	    Возврат Истина;
	КонецЕсли;

#Область ПаспортныеХарактеристикиВГруппах
	ДополнительноеОписание = НСтр("ru = 'при получении паспортные характеристик в группах'");
	ПаспортныеХарактеристикиВГруппах = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetTechnologyParamInGroupList", "ПаспортныеХарактеристикиОРВГруппах", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,,);
#КонецОбласти
	
	Если ПаспортныеХарактеристикиВГруппах.Количество() = 0 Тогда
		ПаспортныеХарактеристикиОР.Очистить();
		СтруктураТаблиц.Вставить("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОборудованияПустая);
		Возврат Истина;
	КонецЕсли;

#Область ПаспортныеХарактеристикиОборудования
	ДополнительноеОписание = НСтр("ru = 'при получении паспортные характеристик оборудования'");
	ОбязательнаяПроверка = "Если Не ЗначениеЗаполнено(СтрокаДанных.kEquipmentIntegrationId) Или Не ЗначениеЗаполнено(СтрокаДанных.kTechnologyParamIntegrationId) Тогда
							|	ПроверкаПройдена = Ложь
							|КонецЕсли;";
	ПаспортныеХарактеристикиОборудования = ЗагрузитьДанныеИзАИСДиспетчер(Узел, "GetTechnologyParamInEquipmentList", "ПаспортныеХарактеристикиОборудования", ТаблицаСоответствияВебСервисов, ДополнительноеОписание,, ОбязательнаяПроверка);
#КонецОбласти
	
	Если ПаспортныеХарактеристикиОборудования.Количество() = 0 Тогда
		ПаспортныеХарактеристикиОР.Очистить();
		СтруктураТаблиц.Вставить("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОборудованияПустая);
		Возврат Истина;
	КонецЕсли;

#Область ОсновнойЗапрос
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПаспортныеХарактеристикиОборудования.kEquipmentIntegrationID КАК kEquipmentIntegrationID,
	               |	ПаспортныеХарактеристикиОборудования.kTechnologyParamIntegrationID КАК kTechnologyParamIntegrationID,
	               |	ПаспортныеХарактеристикиОборудования.Value КАК Value
	               |ПОМЕСТИТЬ ВТ_ТаблицаПаспортныхХарактеристикОборудования
	               |ИЗ
	               |	&ПаспортныеХарактеристикиОборудования КАК ПаспортныеХарактеристикиОборудования
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kTechnologyParamIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НаправленияОР.ID КАК ID,
	               |	НаправленияОР.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_ТаблицаНаправленийОР
	               |ИЗ
	               |	&НаправленияОР КАК НаправленияОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПаспортныеХарактеристикиОР.ID КАК ID,
	               |	ПаспортныеХарактеристикиОР.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_ТаблицаПаспортныхХарактеристикОР
	               |ИЗ
	               |	&ПаспортныеХарактеристикиОР КАК ПаспортныеХарактеристикиОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПаспортныеХарактеристикиВГруппах.kEquipmentGroupID КАК kEquipmentGroupID,
	               |	ПаспортныеХарактеристикиВГруппах.kTechnologyParamID КАК kTechnologyParamID
	               |ПОМЕСТИТЬ ВТ_ТаблицаПаспортныхХарактеристикВГруппах
	               |ИЗ
	               |	&ПаспортныеХарактеристикиВГруппах КАК ПаспортныеХарактеристикиВГруппах
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kTechnologyParamID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаНаправленийОР.IntegrationID КАК kEquipmentGroupIntegrationID,
	               |	ВТ_ТаблицаПаспортныхХарактеристикОР.IntegrationID КАК kTechnologyParamIntegrationID
	               |ПОМЕСТИТЬ ВТ_ПаспортныеХарактеристикиВГруппах
	               |ИЗ
	               |	ВТ_ТаблицаПаспортныхХарактеристикВГруппах КАК ВТ_ТаблицаПаспортныхХарактеристикВГруппах
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаНаправленийОР КАК ВТ_ТаблицаНаправленийОР
	               |		ПО ВТ_ТаблицаПаспортныхХарактеристикВГруппах.kEquipmentGroupID = ВТ_ТаблицаНаправленийОР.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПаспортныхХарактеристикОР КАК ВТ_ТаблицаПаспортныхХарактеристикОР
	               |		ПО ВТ_ТаблицаПаспортныхХарактеристикВГруппах.kTechnologyParamID = ВТ_ТаблицаПаспортныхХарактеристикОР.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kEquipmentGroupIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИсходнаяТаблицаОбъектовРемонта.ID КАК ID,
	               |	ИсходнаяТаблицаОбъектовРемонта.IntegrationID КАК IntegrationID,
	               |	ИсходнаяТаблицаОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ТаблицаОбъектовРемонта
	               |ИЗ
	               |	&ТаблицаОбъектовРемонта КАК ИсходнаяТаблицаОбъектовРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаОбъектовРемонта.ID КАК ID,
	               |	ВТ_ТаблицаОбъектовРемонта.IntegrationID КАК IntegrationID,
	               |	ВТ_ТаблицаОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ОбъектыРемонта.Направление КАК Направление,
	               |	торо_ОбъектыРемонта.Направление.НаборСвойствОР КАК НаборСвойствОР
	               |ПОМЕСТИТЬ ВТ_ОбъектыРемонтаИНаправления
	               |ИЗ
	               |	ВТ_ТаблицаОбъектовРемонта КАК ВТ_ТаблицаОбъектовРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ВТ_ТаблицаОбъектовРемонта.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ОбъектыРемонтаИНаправления.ID КАК ID,
	               |	ВТ_ОбъектыРемонтаИНаправления.IntegrationID КАК IntegrationID,
	               |	ВТ_ОбъектыРемонтаИНаправления.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ОбъектыРемонтаИНаправления.Направление КАК Направление,
	               |	ВТ_ОбъектыРемонтаИНаправления.НаборСвойствОР КАК НаборСвойствОР,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер КАК kEquipmentGroupIntegrationID
	               |ПОМЕСТИТЬ ВТ_ОбъектыРемонта
	               |ИЗ
	               |	ВТ_ОбъектыРемонтаИНаправления КАК ВТ_ОбъектыРемонтаИНаправления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО ВТ_ОбъектыРемонтаИНаправления.Направление = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ОбъектыРемонта.НаборСвойствОР КАК НаборСвойствОР
	               |ПОМЕСТИТЬ ВТ_НаборыСвойствНаправлений
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НаборСвойствОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_НаборыСвойствНаправлений.ОбъектРемонта КАК ОбъектРемонта,
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство,
	               |	торо_СоответствиеОбъектовНСИДиспетчер.УникальныйИдентификаторДиспетчер КАК kTechnologyParamIntegrationID
	               |ПОМЕСТИТЬ ВТ_ПаспортныеХарактеристикиОР
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НаборыСвойствНаправлений КАК ВТ_НаборыСвойствНаправлений
	               |		ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ВТ_НаборыСвойствНаправлений.НаборСвойствОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоответствиеОбъектовНСИДиспетчер КАК торо_СоответствиеОбъектовНСИДиспетчер
	               |		ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство = торо_СоответствиеОбъектовНСИДиспетчер.ОбъектТОИР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ОбъектыРемонта.ID КАК ID,
	               |	ВТ_ОбъектыРемонта.IntegrationID КАК IntegrationID,
	               |	ВТ_ОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ОбъектыРемонта.kEquipmentGroupIntegrationID КАК kEquipmentGroupIntegrationID,
	               |	ВТ_ПаспортныеХарактеристикиОР.Свойство КАК Свойство,
	               |	ВТ_ПаспортныеХарактеристикиОР.kTechnologyParamIntegrationID КАК kTechnologyParamIntegrationID
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеПаспортныеХарактеристикиОР
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПаспортныеХарактеристикиОР КАК ВТ_ПаспортныеХарактеристикиОР
	               |		ПО ВТ_ОбъектыРемонта.ОбъектРемонта = ВТ_ПаспортныеХарактеристикиОР.ОбъектРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	kTechnologyParamIntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПодготовленныеПаспортныеХарактеристикиОР.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ПодготовленныеПаспортныеХарактеристикиОР.Свойство КАК Характеристика,
	               |	ЕСТЬNULL(ВТ_ТаблицаПаспортныхХарактеристикОборудования.Value, 0) КАК Значение
	               |ИЗ
	               |	ВТ_ПодготовленныеПаспортныеХарактеристикиОР КАК ВТ_ПодготовленныеПаспортныеХарактеристикиОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПаспортныеХарактеристикиВГруппах КАК ВТ_ПаспортныеХарактеристикиВГруппах
	               |		ПО ВТ_ПодготовленныеПаспортныеХарактеристикиОР.kEquipmentGroupIntegrationID = ВТ_ПаспортныеХарактеристикиВГруппах.kEquipmentGroupIntegrationID
	               |			И ВТ_ПодготовленныеПаспортныеХарактеристикиОР.kTechnologyParamIntegrationID = ВТ_ПаспортныеХарактеристикиВГруппах.kTechnologyParamIntegrationID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта.ДополнительныеРеквизиты КАК торо_ОбъектыРемонтаДополнительныеРеквизиты
	               |		ПО ВТ_ПодготовленныеПаспортныеХарактеристикиОР.ОбъектРемонта = торо_ОбъектыРемонтаДополнительныеРеквизиты.Ссылка
	               |			И ВТ_ПодготовленныеПаспортныеХарактеристикиОР.Свойство = торо_ОбъектыРемонтаДополнительныеРеквизиты.Свойство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПаспортныхХарактеристикОборудования КАК ВТ_ТаблицаПаспортныхХарактеристикОборудования
	               |		ПО ВТ_ПодготовленныеПаспортныеХарактеристикиОР.IntegrationID = ВТ_ТаблицаПаспортныхХарактеристикОборудования.kEquipmentIntegrationID
	               |			И ВТ_ПодготовленныеПаспортныеХарактеристикиОР.kTechnologyParamIntegrationID = ВТ_ТаблицаПаспортныхХарактеристикОборудования.kTechnologyParamIntegrationID
	               |ГДЕ
	               |	торо_ОбъектыРемонтаДополнительныеРеквизиты.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектовРемонта", СтруктураТаблиц.ОбъектыРемонта);
	Запрос.УстановитьПараметр("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОР);
	Запрос.УстановитьПараметр("ПаспортныеХарактеристикиВГруппах", ПаспортныеХарактеристикиВГруппах);
	Запрос.УстановитьПараметр("ПаспортныеХарактеристикиОборудования", ПаспортныеХарактеристикиОборудования);
	Запрос.УстановитьПараметр("НаправленияОР", НаправленияОР);
	СтруктураТаблиц.Вставить("ПаспортныеХарактеристикиОР", Запрос.Выполнить().Выгрузить());
#КонецОбласти
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаписьДанныхПоОР

#Область ПоказателиЭксплуатации

Функция ЗаписатьПоказателиОР(КонтролируемыеПоказатели, ПараметрыНаработки)
	Попытка
		Если Не КонтролируемыеПоказатели.Количество() = 0 Тогда
		    НаборКонтролируемыхПоказателей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборКонтролируемыхПоказателей.Загрузить(КонтролируемыеПоказатели);
			НаборКонтролируемыхПоказателей.Записать(Ложь);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи контролируемых показателей ОР:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи плана видов характеристик <Контролируемые показатели эксплуатации>");
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если ПараметрыНаработки.Количество() = 0 Тогда
		    Возврат Истина;
		КонецЕсли;
		
		НаборПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
		НаборПараметровНаработки.Загрузить(ПараметрыНаработки);
		НаборПараметровНаработки.Записать(Ложь);
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи параметров наработки ОР:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Параметры наработки ОР>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

#КонецОбласти 

#Область Запчасти

Функция ЗаписатьЗапчасти(Запчасти)
	Попытка
		Если Запчасти.Количество() = 0 Или Не ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей") Тогда
		    Возврат Истина;
		КонецЕсли;
		
		НаборЗапчастей = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
		Для каждого СтрокаЗапчасти Из Запчасти Цикл
		    НоваяСтрока = НаборЗапчастей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапчасти);
			НоваяСтрока.Характеристика = СтрокаЗапчасти.ХарактеристикаНоменклатуры;
			НоваяСтрока.Качество = Перечисления.ГрадацииКачества.Новый;
			НоваяСтрока.Период = ТекущаяДатаСеанса();
		КонецЦикла;
		
		НаборЗапчастей.Записать(Ложь);
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи запчастей ОР:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Номенклатура>");
		Возврат Ложь;
	КонецПопытки;
	
	Для каждого ОбъектРемонта Из Запчасти.ВыгрузитьКолонку("ОбъектРемонта") Цикл
	    ОбъектОР = ОбъектРемонта.ПолучитьОбъект();
		ОбъектОР.ВестиУчетСерийныхЗапчастей = Истина;
		ОбъектОР.Записать();
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти 

#Область ПаспортныеХарактеристикиОР

Функция ЗаписатьПаспортныеХарактеристикиОРВторойЭтап(ПаспортныеХарактеристикиОР)
	Попытка
		Если ПаспортныеХарактеристикиОР.Количество() = 0 Тогда
		    Возврат Истина;
		КонецЕсли;
		
		Для каждого СтрокаПаспортнойХарактеристикиОР Из ПаспортныеХарактеристикиОР Цикл
			Объект = СтрокаПаспортнойХарактеристикиОР.ОбъектРемонта.ПолучитьОбъект();
			СтруктураПоиска = Новый Структура("Свойство", СтрокаПаспортнойХарактеристикиОР.Характеристика);
			НайденныеСтроки = Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
			    СтрокаТЧ = Объект.ДополнительныеРеквизиты.Добавить();
			Иначе
			    Продолжить;
			КонецЕсли;
			
			СтрокаТЧ.Свойство = СтрокаПаспортнойХарактеристикиОР.Характеристика;
			СтрокаТЧ.Значение = СтрокаПаспортнойХарактеристикиОР.Значение;
		КонецЦикла;
		
		Объект.Записать();
	Исключение
		ОписаниеОшибки = Нстр("ru='Ошибка при записи паспортных характеристик ОР:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Ошибка записи справочника <Номенклатура>");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти