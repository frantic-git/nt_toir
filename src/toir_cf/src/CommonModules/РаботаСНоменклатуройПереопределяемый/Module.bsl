

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область АвтоподборНоменклатуры

// Заполнение массива имен полей формы, по которым будет складываться поисковая строка
// для подбора 1С:Номенклатуры при заполнении номенклатуры информационной базы.
// Обрабатывается событие ИзменениеТекстаРедактирования.
//
// Параметры:
//  МассивПолей - Массив - (Строка) массив имен полей полей.
//
Процедура ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(МассивПолей) Экспорт
	МассивПолей.Добавить("Наименование");
КонецПроцедуры

// Заполнение массива имен полей формы, по которым будет складываться поисковая строка
// для подбора 1С:Номенклатуры при заполнении номенклатуры информационной базы.
// Обрабатывается событие ПриИзменении.
//
// Параметры:
//  МассивПолей - Массив - (Строка) массив имен полей полей.
//
Процедура ЗаполнитьМассивПолейСобытияПриИзменении(МассивПолей) Экспорт
	МассивПолей.Добавить("Наименование");
	МассивПолей.Добавить("ЕдиницаИзмерения");
	МассивПолей.Добавить("Артикул");
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбъектовИнформационнойБазы

// Создание или обновление значения реквизита.
//
// Параметры:
//  ДополнительныйРеквизит           - ЛюбаяСсылка - ссылка на реквизит.
//  СтрокаДанных                     - СтрокаТаблицыЗначений - строка таблицы значений.
//                                                             Описание таблицы см. РаботаСНоменклатурой.ДанныеКатегорийСервиса, 
//                                                             поле ДополнительныеРеквизиты, колонка Значения.
//  ЗначениеРеквизитаСсылка          - ЛюбаяСсылка - ссылка на новое значение.
//
Процедура СоздатьОбновитьЗначениеРеквизита(ДополнительныйРеквизит, СтрокаДанных, ЗначениеРеквизитаСсылка) Экспорт
	НачатьТранзакцию();
	Попытка
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаСсылка) Тогда
			
			УстановитьИсключительнуюБлокировкуПоСсылке(ЗначениеРеквизитаСсылка);
						
			ЗначениеОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
			
		Иначе		
			ЗначениеВБазе = РаботаСНоменклатурой.ЗначениеПоИдентификатору(ДополнительныйРеквизит, СтрокаДанных.Идентификатор);
			
			Если ЗначениеВБазе <> Неопределено Тогда
				ЗначениеРеквизитаСсылка = ЗначениеВБазе;
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ЗначениеОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		КонецЕсли;
		
		ЗначениеОбъект.Владелец           = ДополнительныйРеквизит;
		ЗначениеОбъект.Наименование       = СтрокаДанных.Наименование;
		ЗначениеОбъект.ПолноеНаименование = СтрокаДанных.Наименование;
		ЗначениеОбъект.Записать();
		
		ЗначениеРеквизитаСсылка = ЗначениеОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Создание или обновление дополнительного реквизита.
//
// Параметры:
//  ВидНоменклатуры  - СправочникСсылка - ссылка на вид номенклатуры.
//  СтрокаДанных     - Структура, СтрокаТаблицыЗначений - данные для заполнения реквизита.
//                                                        Описание таблицы см. РаботаСНоменклатурой.ДанныеКатегорийСервиса, 
//                                                        поле ДополнительныеРеквизиты.
//  РеквизитСсылка   - ЛюбаяСсылка - ссылка на новый реквизит.
//
Процедура СоздатьОбновитьДополнительныйРеквизит(ВидНоменклатуры, СтрокаДанных, РеквизитСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(РеквизитСсылка) Тогда
			
			УстановитьИсключительнуюБлокировкуПоСсылке(РеквизитСсылка);
			
			РеквизитОбъект = РеквизитСсылка.ПолучитьОбъект();

			ОписаниеТиповСервиса = РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
			
			ТипыСервиса = ОписаниеТиповСервиса.Типы();
			
			Если Не РеквизитОбъект.ТипЗначения.СодержитТип(ТипыСервиса[0]) Тогда
				РеквизитОбъект.ТипЗначения = Новый ОписаниеТипов(РеквизитОбъект.ТипЗначения, ТипыСервиса);
			КонецЕсли;
			
		Иначе
			РеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();

			РеквизитОбъект.ТипЗначения 
				= РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
			
			НаборСвойств       = ВидНоменклатуры.НаборСвойств;
			УИД                = Новый УникальныйИдентификатор();
			СтрокаУИД          = СтрЗаменить(Строка(УИД), "-", "");
			ИмяРеквизита       = СтрокаДанных.Наименование + "_" + СтрокаУИД;
			
			РеквизитОбъект.Имя          = ИмяРеквизита;
			РеквизитОбъект.НаборСвойств = НаборСвойств;
			РеквизитОбъект.Доступен     = Истина;
			
		КонецЕсли;
		
		РеквизитОбъект.Наименование = СтрокаДанных.Наименование;
		РеквизитОбъект.Заголовок    = СтрокаДанных.Наименование;
		
		РеквизитОбъект.Записать();
		
		РеквизитСсылка = РеквизитОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Создание вида номенклатуры в информационной базе.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение объекта. 
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеКатегорийСервиса
//  ВидНоменклатурыСсылка - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - ссылка на новый элемент.
//
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
	
	// Подготовка данных
	
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеЗаполнения.Тип, ТипНоменклатуры);
	
	// Заполнение объекта
	
	ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	
	ВидНоменклатурыОбъект.Заполнить(Неопределено);
	ВидНоменклатурыОбъект.УстановитьНовыйКод();
	
	ВидНоменклатурыОбъект.Наименование    = ДанныеЗаполнения.Наименование;
	ВидНоменклатурыОбъект.СтавкаНДС       = СтавкаНДС;
	ВидНоменклатурыОбъект.ТипНоменклатуры = ТипНоменклатуры;
	ВидНоменклатурыОбъект.Описание        = ДанныеЗаполнения.Описание;
	
	ВидНоменклатурыОбъект.Родитель = ДанныеЗаполнения.РодительИнформационнойБазы;
	
	ВидНоменклатурыОбъект.ИспользоватьХарактеристики = ДанныеЗаполнения.Характеристики.Идентификаторы.Количество() > 0;
	
	ВидНоменклатурыОбъект.Записать();
	
	ВидНоменклатурыСсылка = ВидНоменклатурыОбъект.Ссылка;

КонецПроцедуры

// Создание группы видов номенклатуры.
//
// Параметры:
//  ДанныеЗаполнения				 - СтрокаТаблицыЗначений - Колонки: Идентификатор, Наименование, 
//                                                             ИдентификаторРодителя, Уровень, РодительИнформационнойБазы.
//  ГруппаВидовНоменклатурыСсылка	 - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - ссылка на новую группу.
//
Процедура СоздатьОбновитьГруппуВидовНоменклатуры(ДанныеЗаполнения, ГруппаВидовНоменклатурыСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(ГруппаВидовНоменклатурыСсылка) Тогда
			
			УстановитьИсключительнуюБлокировкуПоСсылке(ГруппаВидовНоменклатурыСсылка);
			
			НоваяГруппа = ГруппаВидовНоменклатурыСсылка.ПолучитьОбъект();
		Иначе
			НоваяГруппа = Справочники.ВидыНоменклатуры.СоздатьГруппу();
		КонецЕсли; 
		
		НоваяГруппа.Наименование = ДанныеЗаполнения.Наименование;
		НоваяГруппа.Родитель     = ДанныеЗаполнения.РодительИнформационнойБазы;
		
		НоваяГруппа.Записать();
		
		ГруппаВидовНоменклатурыСсылка = НоваяГруппа.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Создание номенклатуры в информационной базе.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение объекта.
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса
//  НоменклатураСсылка - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на новый элемент.
//
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	
	НоменклатураОбъект.Заполнить(Неопределено);
	
	НоменклатураОбъект.УстановитьНовыйКод();
	
	ЗаполнитьРеквизитыНоменклатуры(НоменклатураОбъект, ДанныеЗаполнения);
	
	НоменклатураОбъект.Записать();
	
	НоменклатураСсылка = НоменклатураОбъект.Ссылка;
	
	// Сохранение изображения
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Изображения) Тогда
		СохранитьИзображенияНоменклатуры(НоменклатураСсылка, ДанныеЗаполнения.Изображения);
	КонецЕсли;

КонецПроцедуры

// Создание характеристики с заполнением дополнительных реквизитов.
//
// Параметры:
//  ДанныеЗаполнения     - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                                 Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                                 поле Характеристики
//  Владелец             - СправочникСсылка - ссылка на владельца характеристики.
//  ХарактеристикаСсылка - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на новый элемент.
//
Процедура СоздатьХарактеристикуСДополнительнымиРеквизитами(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	ХарактеристикаСсылка = Неопределено;
	СоздатьХарактеристику(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка);
	
	ЗаполнитьЗначенияРеквизитовХарактеристики(
		ЗначенияДополнительныхРеквизитов, 
		ДанныеЗаполнения);
	
	Если ЗначенияДополнительныхРеквизитов.Количество() <> 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ХарактеристикаСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;	
КонецПроцедуры

// Создание характеристики.
//
// Параметры:
//  ДанныеЗаполнения     - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                                 Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                                 поле Характеристики.
//  Владелец             - СправочникСсылка - ссылка на владельца характеристики.
//  ХарактеристикаСсылка - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на новый элемент.
//
Процедура СоздатьХарактеристику(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
	НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	
	НоваяХарактеристика.Владелец = Владелец;
	НоваяХарактеристика.Наименование = ДанныеЗаполнения.Наименование;
	
	НоваяХарактеристика.Записать();
	
	ХарактеристикаСсылка = НоваяХарактеристика.Ссылка;

КонецПроцедуры

// Создание дополнительных реквизитов номенклатуры.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                             поле ДополнительныеРеквизиты.
//  НоменклатураСсылка - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на элемент.
//
Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = ДополнительныйРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ДополнительныйРеквизит);
		
	КонецЦикла;
	
	Если ЗначенияДополнительныхРеквизитов.Количество() > 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
 
КонецПроцедуры

// Сформировать наименование номенклатуры по характеристике.
//
// Параметры:
//  НаименованиеНоменклатуры	 - Строка - текущее наименование объекта.
//  ПредставлениеХарактеристики  - Строка - представление характеристики в сервисе.
//  НаименованиеХарактеристики	 - Строка - итоговое наименование.
//
Процедура СформироватьНаименованиеПоХарактеристике(НаименованиеНоменклатуры, ПредставлениеХарактеристики, НаименованиеХарактеристики) Экспорт
	
	НаименованиеХарактеристики = СтрШаблон("%1, %2", НаименованиеНоменклатуры, ПредставлениеХарактеристики);

КонецПроцедуры

// Запись штрихкодов в информационную базу. Вызов метода идет в разрезе одной номенклатуры. 
// Процедура используется как для записи штрихкодов при загрузке номенклатуры, так и при обновлении. 
// Перед записью штрихкодов рекомендуется проверить их наличие в информационной базе.
//
// Параметры:
//  ДанныеПоШтрихкодам	 - ТаблицаЗначений - данные по штрихкодам.
//    Колонки:
//    * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой, Неопределено - ссылка на характеристику.
//    * Штрихкод - Строка - штрихкод.
//
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	
КонецПроцедуры

// Присвоение новых дополнительных реквизитов виду номенклатуры, которому они должны принадлежать.
//
// Параметры:
//  ВидНоменклатуры         - СправочникСсылка - ссылка на вид номенклатуры.
//  ДополнительныеРеквизиты - Массив - (СправочникСсылка) массив ссылок на новые дополнительные реквизиты.
//  ЯвляетсяРеквизитомХарактеристики - Булево - признак принадлежности реквизитам характеристик. В зависимости от этого
//												параметра, может быть реализован разный алгоритм присвоения.
//
Процедура ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	Если ЯвляетсяРеквизитомХарактеристики Тогда
		НаборСвойствСсылка = ВидНоменклатуры.НаборСвойствХарактеристик;	
	Иначе
		НаборСвойствСсылка = ВидНоменклатуры.НаборСвойств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборСвойствСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьИсключительнуюБлокировкуПоСсылке(НаборСвойствСсылка);
		
		НаборСвойствОбъект = НаборСвойствСсылка.ПолучитьОбъект();
		
		Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
			
			НоваяСтрокаРеквизита = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();	
			
			НоваяСтрокаРеквизита.Свойство = ДополнительныйРеквизит;
			
		КонецЦикла;
		
		НаборСвойствОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
 
КонецПроцедуры

// Сохранение изображений при загрузке номенклатуры.
//
// Параметры:
//  НоменклатураСсылка - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - владелец изображений.
//  Изображения - ТаблицаЗначений:
//   * ИзображениеURL - Строка - адрес изображения.
//
Процедура СохранитьИзображенияНоменклатуры(НоменклатураСсылка, Изображения) Экспорт
	СозданныеИзображения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Изображения Цикл
		
		ИзображениеURL = ЭлементКоллекции.ИзображениеURL;
		
		ДанныеИзображения = ДвоичныеДанныеПоАдресуURL(ИзображениеURL);
		
		ИмяИзображения = "";
		РасширениеИзображения = "";
		
		ПодстрокиАдреса = СтрРазделить(ИзображениеURL, "/");		
		
		Если ПодстрокиАдреса.Количество() > 0  Тогда
			ИмяИзображения = ПодстрокиАдреса[ПодстрокиАдреса.ВГраница()];
			
			ПодстрокиИмени = СтрРазделить(ИмяИзображения, ".");
			
			Если ПодстрокиИмени.Количество() = 2 Тогда
				ИмяИзображения = ПодстрокиИмени[0];	
				РасширениеИзображения = ПодстрокиИмени[1];	
			КонецЕсли;	
		КонецЕсли;
		
		ПараметрыФайла = Новый Структура();
		
		ПараметрыФайла.Вставить("Автор",              Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов",     НоменклатураСсылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения",   ИмяИзображения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеИзображения);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		СозданныеИзображения.Добавить(
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеИзображения)));
		
	КонецЦикла;
	
	Если СозданныеИзображения.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			УстановитьИсключительнуюБлокировкуПоСсылке(НоменклатураСсылка);
			
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			
			НоменклатураОбъект.ФайлКартинки          = СозданныеИзображения[0];
			НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
			
			НоменклатураОбъект.Записать();		
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// Получение штрихкодов в разрезе номенклатуры и характеристик номенклатуры. 
// Порядок строк должен порядку строк в исходной таблице (Номенклатура Возр, Характеристика Возр).
//
// Параметры:
//  НоменклатураИХарактеристики	 - ТаблицаЗначений - исходная таблица с номенклатурой и характеристиками.
//    Колонки:
//    * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  ДанныеПоШтрихкодам - ТаблицаЗначений - таблица с данными по штрихкодам.
//    Колонки:
//    * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//    * Штрихкод - Строка - штрихкод.
//
Процедура ПолучитьШтрихкоды(НоменклатураИХарактеристики, ДанныеПоШтрихкодам) Экспорт
	
КонецПроцедуры

// Формирование текста запроса номенклатуры и характеристик для последующего чтение из информационной базы.
// На основании текста запроса, на стороне библиотеки будет подготовлен итоговый запрос, 
// для порционного чтения объектов из информационной базы.
//
// Требование к запросу:
// - в результате запроса строки должны быть уникальны
// - не должны использоваться временные таблицы
// - в результате выполнения запроса должны попадать два поля: 
//		- Номенклатура (ОпределяемыйТип.НоменклатураРаботаСНоменклатурой)
//		- Характеристика (ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой)
// - если характеристики для номенклатуры не используются, в поле характеристики должно 
//   содержаться пустое значение объекта ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//    Поля результата запроса:
//    * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику (в запросе следует заложить проверку на NULL).
//
Процедура ТекстЗапросаНоменклатурыИХарактеристик(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа";

	
КонецПроцедуры

// Получение видов номенклатуры в разрезе номенклатуры.
//
// Параметры:
//  Номенклатура	 - Массив - (Ссылка) ссылки на номенклатуру.
//  ВидыНоменклатуры - ТаблицаЗначений - данные по видам номенклатуры.
//    Колонки:
//    * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//    * ВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - ссылка на вид номенклатуры.
//
Процедура ПолучитьВидыНоменклатурыПоНоменклатуре(Номенклатура, ВидыНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ВидыНоменклатуры = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

// Получение значений реквизитов из формы вида номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма вида номенклатуры.
//  ЗначенияРеквизитов	 - Структура - структура, где ключ - имя реквизита, значение - значение реквизита.
//
Процедура ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;		
КонецПроцедуры

// Получение значение свойств реквизитов характеристик информационной базы. Метод используется при поиске заведенных в базе
// характеристик. Поиск осуществляется по составу реквизитов и их значениям. Если характеристика с заданным набором
// реквизитов найдена, объект не создается.
//
// Параметры:
//  ВидНоменклатуры                  - СправочникСсылка - вид номенклатуры в разрезе которого
//                                                        анализируются характеристики.
//  ЗначенияХарактеристикТекущейБазы - ТаблицаЗначений - таблица данных информационной базы. Колонки:
//    * ХарактеристикаБазы - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//    * Свойство           - ЛюбаяСсылка - реквизит характеристики.
//    * Значение           - Произвольный - значение реквизита.
//
Процедура ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры(ВидНоменклатуры, ЗначенияХарактеристикТекущейБазы) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК ХарактеристикаБазы,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
	|	И НЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ЗначенияХарактеристикТекущейБазы = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение используемых для вида номенклатуры дополнительных реквизитов.
//
// Параметры:
//  ВидНоменклатуры   - СправочникСсылка - вид номенклатуры в разрезе которого производится поиск данных.
//  ТаблицаРеквизитов - ТаблицаЗначений - таблица реквизитов. Колонки:
//    * РеквизитВидаНоменклатуры              - ЛюбаяСсылка - ссылка дополнительный реквизит.
//    * РеквизитВидаНоменклатурыПредставление - Строка - представление реквизита.
//    * ЯвляетсяХарактеристикой               - Булево - Истина, если реквизит является реквизитом характеристики.
//
Процедура ПолучитьДополнительныеРеквизитыВидаНоменклатуры(ВидНоменклатуры, ТаблицаРеквизитов) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитВидаНоменклатуры,
	|	ЛОЖЬ КАК ЯвляетсяХарактеристикой,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК РеквизитВидаНоменклатурыПредставление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойств КАК НаборСвойств
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство,
	|	ИСТИНА,
	|	ДополнительныеРеквизиты.Свойство.Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойствХарактеристик КАК НаборСвойств
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение значений реквизитов вида номенклатуры. Используется для выявления расхождений в значениях реквизитов
// объектов информационной базы и объектов сервиса.
//
// Параметры:
//  ВидыНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой, Массив - виды номенклатуры по которым идет запрос значений реквизитов.
//  Результат        - ТаблицаЗначений - таблица значений реквизитов. Таблица обязательно должна содержать
//                                      колонку с ссылкой на вид номенклатуры и именем ВидНоменклатуры и иметь вид: 
//                                      ВидНоменклатуры, Реквизит1, Реквизит2...Реквизит N.
//
Процедура ПолучитьЗначенияРеквизитовВидовНоменклатуры(Знач ВидыНоменклатуры, Результат) Экспорт
	Если ТипЗнч(ВидыНоменклатуры) <> Тип("Массив") Тогда
		ВидыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.Наименование КАК Наименование,
	|	ВидыНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВидыНоменклатуры.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение значений реквизитов номенклатуры. Используется для выявления расхождений в значениях реквизитов
// объектов информационной базы и объектов сервиса.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой, Массив - номенклатура по которым идет запрос значений реквизитов.
//  Результат       - ТаблицаЗначений - таблица значений реквизитов. Таблица обязательно должна содержать
//                                      колонку с ссылкой на номенклатуру и именем Номенклатура и иметь вид: 
//                                      Номенклатура, Реквизит1, Реквизит2...Реквизит N.
//
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	Если ТипЗнч(Номенклатура) <> Тип("Массив") Тогда
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Описание КАК Описание,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение значений дополнительных реквизитов номенклатуры.
//
// Параметры:
//  Номенклатура         - Массив - (Ссылка) массив ссылок номенклатуры.
//  ЗначенияРеквизитов	 - ТаблицаЗначений - заполняемые данные значений свойство.
//    * ВладелецСвойств - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//    * Свойство - ЛюбаяСсылка - свойство номенклатуры.
//    * Значение - Произвольный - значение свойства.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Номенклатура, ЗначенияРеквизитов) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК ВладелецСвойств,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗначенияРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получение вида номенклатуры по номенклатуре.
//
// Параметры:
//  НоменклатураСсылка   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - номенклатура.
//  ВидНоменклатуры	     - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - вид номенклатуры.
//
Процедура ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры) Экспорт
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ВидНоменклатуры");	
КонецПроцедуры

// Получение вида номенклатуры из формы номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ВидНоменклатуры	     - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - вид номенклатуры.
//
Процедура ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры) Экспорт
	ВидНоменклатуры = Форма.Объект.ВидНоменклатуры;	
КонецПроцедуры

// Получение значений реквизитов из формы номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ЗначенияРеквизитов	 - Структура - структура, где ключ - имя реквизита, значение - значение реквизита.
//
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	ЗначенияРеквизитов.Вставить("Артикул");
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("НаименованиеПолное");
	ЗначенияРеквизитов.Вставить("ВидНоменклатуры");
	ЗначенияРеквизитов.Вставить("Описание");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
КонецПроцедуры

// Получение значений дополнительных реквизитов из формы.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ЗначенияРеквизитов	 - ТаблицаЗначений - таблица значений дополнительных реквизитов. Колонки:
//    * Свойство           - ЛюбаяСсылка - дополнительный реквизит.
//    * Значение           - Произвольный - значение реквизита.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма,Форма.Объект);
	
	ЗначенияРеквизитов = Форма.Объект.ДополнительныеРеквизиты.Выгрузить(, "Свойство, Значение");
КонецПроцедуры

// Получение номенклатуры по штрихкодам.
//
// Параметры:
//  Штрихкоды			 - Массив - массив штрихкодов (Строка).
//  ДанныеПоШтрихкодам	 - ТаблицаЗначений - итоговая таблица данных с колонками 
//                                           Штрихкод, Номенклатура, ЕдиницаИзмерения, Характеристика.
//
Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область ПриПолученииДанныхИзСервиса

// Процедура вызывается после получения данных номенклатуры из сервиса. Может использоваться
// для предварительной подготовки данных информационной базы 
// перед созданием, сравнением, заполнением объектов. Например на этом этапе можно 
// создать бренды, производителей, единицы измерения и так далее.
//
// Параметры:
//  ДанныеПоНоменклатуре - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.
//
Процедура ПриПолученииДанныхИзСервисаПоНоменклатуре(ДанныеПоНоменклатуре) Экспорт
	
КонецПроцедуры

// Процедура вызывается после получения данных категорий из сервиса. Может использоваться
// для предварительной подготовки данных информационной базы 
// перед созданием, сравнением, заполнением объектов.
//
// Параметры:
//  ДанныеПоКатегориям - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//
Процедура ПриПолученииДанныхИзСервисаПоКатегориям(ДанныеПоКатегориям) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеДанных

// Сравнение значений реквизитов вида номенклатуры и категории.
//
// Параметры:
//  ДанныеКатегории       - СтрокаТаблицыЗначений - данные по категории. Описание таблицы значений см. РаботаСНоменклатурой.ДанныеКатегорийСервиса
//  ДанныеВидаНоменклатуры - СтрокаТаблицыЗначений, Структура - данные по виду номенклатуре. См. ПолучитьЗначенияРеквизитовВидовНоменклатуры
//  ТаблицаОтличийРеквизитов - ТаблицаЗначений - см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеКатегории, ДанныеВидаНоменклатуры, ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка наименования
	
	Если ДанныеВидаНоменклатуры.Наименование <> ДанныеКатегории.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеКатегории.Наименование, ДанныеВидаНоменклатуры.Наименование);
	КонецЕсли; 
	
	// Проверка ставки НДС
	
	СтавкаНДССервиса = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеКатегории.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеВидаНоменклатуры.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"СтавкаНДС", СтавкаНДССервиса, ДанныеВидаНоменклатуры.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));		
	КонецЕсли; 
	
	// Проверка типа номенклатуры
	
	ТипНоменклатурыСервиса = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеКатегории.Тип, ТипНоменклатурыСервиса);
	
	Если ДанныеВидаНоменклатуры.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ТипНоменклатуры", ТипНоменклатурыСервиса, ДанныеВидаНоменклатуры.ТипНоменклатуры, НСтр("ru = 'Тип номенклатуры'"));		
	КонецЕсли;
	
КонецПроцедуры

// Сравнение значений реквизитов номенклатуры информационной базы и номенклатуры сервиса.
//
// Параметры:
//  ДанныеНоменклатурыСервиса - СтрокаТаблицыЗначений - Данные по номенклатуре.
//                              Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.
//  ДанныеНоменклатурыБазы    - СтрокаТаблицыЗначений, Структура - данные по номенклатуре.
//                              См. процедуры ПолучитьЗначенияРеквизитовНоменклатуры,
//                              ПолучитьЗначенияДополнительныхРеквизитовИзФормы.
//  ТаблицаОтличийРеквизитов  - ТаблицаЗначений - см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка простых типов.
	
	// Артикул
	
	Если ДанныеНоменклатурыБазы.Артикул <> ДанныеНоменклатурыСервиса.Артикул Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
		"Артикул", ДанныеНоменклатурыСервиса.Артикул, ДанныеНоменклатурыБазы.Артикул);
	КонецЕсли;
	
	// Наименование
	
	Если ДанныеНоменклатурыБазы.Наименование <> Лев(ДанныеНоменклатурыСервиса.Наименование, 100) Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
		"Наименование", Лев(ДанныеНоменклатурыСервиса.Наименование, 100), ДанныеНоменклатурыБазы.Наименование);
	КонецЕсли;
	
	// Полное наименование
	
	Если ДанныеНоменклатурыБазы.НаименованиеПолное <> ДанныеНоменклатурыСервиса.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
		"НаименованиеПолное", ДанныеНоменклатурыСервиса.Наименование, ДанныеНоменклатурыБазы.НаименованиеПолное, НСтр("ru = 'Полное наименование'"));
	КонецЕсли;
	
	// Проверка ставки НДС
	
	СтавкаНДССервиса = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеНоменклатурыСервиса.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеНоменклатурыБазы.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
		"СтавкаНДС", СтавкаНДССервиса, ДанныеНоменклатурыБазы.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));		
	КонецЕсли; 
	
	// Единица измерения
	
	ЕдиницаИзмеренияСервиса = ДанныеНоменклатурыСервиса.ЕдиницаИзмерения;
	
	Если Строка(ДанныеНоменклатурыБазы.ЕдиницаИзмерения) <> ЕдиницаИзмеренияСервиса.Наименование Тогда
		
		ЕдиницаИзмеренияВБазе = Справочники.ЕдиницыИзмерения.ЕдиницаИзмеренияПоКоду(ЕдиницаИзмеренияСервиса.ОКЕИ);
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
		"ЕдиницаИзмерения",  ЕдиницаИзмеренияВБазе, ДанныеНоменклатурыБазы.ЕдиницаИзмерения, НСтр("ru = 'Единица измерения'"), ЕдиницаИзмеренияСервиса.Наименование);
	КонецЕсли;
	
	// Описание
	
	ОписаниеПоДаннымСервиса = НеформализованноеОписаниеНоменклатуры(ДанныеНоменклатурыСервиса);
	
	Если ДанныеНоменклатурыБазы.Описание <> ОписаниеПоДаннымСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
		"Описание", ОписаниеПоДаннымСервиса, ДанныеНоменклатурыБазы.Описание, НСтр("ru = 'Описание'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// Процедура для интерактивного заполнения вида номенклатуры. Если параметр ТаблицаОтличий заполнен - 
// заполнение вида номенклатуры происходит после работы формы Обработка.РаботаСНоменклатурой.ЗаполнениеВидаНоменклатуры. 
// Если параметр ТаблицаОтличий не заполнен - происходит загрузка вида номенклатуры в интерактивном режиме.
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения - форма вида номенклатуры. 
//  ТаблицаОтличий					 - ТаблицаЗначений - таблица изменений реквизитов вида номенклатуры, 
//                                                       формируемая в методе РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначений - данные категории сервиса.
//
Процедура ЗаполнитьВидНоменклатурыВФорме(Форма, ТаблицаОтличий = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаОтличий <> Неопределено Тогда  // заполнение при наличии изменений
		
		// Заполнение при наличии отличий после работы формы заполнения.
		
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Форма.Прочитать(); // для обновления отображения дополнительных реквизитов
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
			Если ЭлементКоллекции.Пометка Тогда
				Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда	
		
		// Для новых объектов идет заполнение дополнительных реквизитов на форме для имитации их присутствия.
		
		ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения);
	КонецЕсли;

КонецПроцедуры

// Заполнение реквизитов вида номенклатуры.
//
// Параметры:
//  ВидНоменклатурыСсылка - СправочникСсылка - ссылка на вид номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьВидНоменклатуры(ВидНоменклатурыСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьИсключительнуюБлокировкуПоСсылке(ВидНоменклатурыСсылка);
		
		ЗаблокироватьДанныеДляРедактирования(ВидНоменклатурыСсылка);
		
		ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
		
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			ВидНоменклатурыОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЦикла;
		
		ВидНоменклатурыОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Заполнение реквизитов номенклатуры.
//
// Параметры:
//  НоменклатураСсылка - СправочникСсылка - ссылка на номенклатуру.
//  ТаблицаИзменений   - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                         сформирована в методе ПолучитьОтличияНоменклатуры.
//                                         см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьИсключительнуюБлокировкуПоСсылке(НоменклатураСсылка);
		
		ЗаблокироватьДанныеДляРедактирования(НоменклатураСсылка);
		
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			НоменклатураОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЦикла;
		
		НоменклатураОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Заполнение дополнительных реквизитов номенклатуры.
//
// Параметры:
//  НоменклатураСсылка      - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//  ДополнительныеРеквизиты - ТаблицаЗначений - реквизиты для записи в структуре:
//    * РеквизитОбъекта - ЛюбаяСсылка - свойство реквизита.
//    * НовоеЗначение   - Произвольный - значение реквизита.
//
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, ДополнительныеРеквизиты) Экспорт
	
	Если ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Реквизит.РеквизитОбъекта;
		НоваяСтрока.Значение = Реквизит.НовоеЗначение;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);

КонецПроцедуры

// Интерактивное заполнение реквизитов номенклатуры. Если параметр ТаблицаИзменений заполнен - 
// заполнение номенклатуры происходит после работы формы Обработка.РаботаСНоменклатурой.ЗаполнениеНоменклатуры. 
// Если параметр ТаблицаИзменений не заполнен - происходит загрузка номенклатуры в интерактивном режиме.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений -  таблица изменений реквизитов номенклатуры. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияНоменклатуры.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначений - данные номенклатуры сервиса.
//
Процедура ЗаполнитьНоменклатуруВФорме(Форма, ТаблицаИзменений = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаИзменений <> Неопределено Тогда 
		
		// Заполнение при наличии отличий после работы формы заполнения.
		
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
			Если ЭлементКоллекции.РеквизитОбъекта = "ВидНоменклатуры" Тогда 
				Форма.Объект.ТипНоменклатуры = ЭлементКоллекции.НовоеЗначение.ТипНоменклатуры;
				Форма.Объект.ИспользованиеХарактеристик = ЭлементКоллекции.НовоеЗначение.ИспользованиеХарактеристик;
			КонецЕсли;
		КонецЦикла;	
		
		// Отображение картинки на форме.
		
		Если Не ЗначениеЗаполнено(Форма.АдресКартинки)
			И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения)
			И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения[0].Изображения) Тогда
			
			Форма.Элементы.АдресКартинки.ТекстНевыбраннойКартинки 
			= НСтр("ru = 'Изображение появится после записи'");
		КонецЕсли;
		
	ИначеЕсли ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда 
		
		// Заполнение при интерактивном создании.
		
		ЗаполнитьНоменклатуруПриИнтерактивномСоздании(Форма, ДанныеИнтерактивногоЗаполнения[0]);
	КонецЕсли;
	
КонецПроцедуры

// Интерактивное заполнение дополнительных реквизитов номенклатуры.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Объект = Форма.Объект;
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		
		СтрокиРеквизита = Объект.ДополнительныеРеквизиты.
		НайтиСтроки(Новый Структура("Свойство", ЭлементКоллекции.РеквизитОбъекта));
		
		Если СтрокиРеквизита.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитОбъекта;
			НоваяСтрока.Значение = ЭлементКоллекции.НовоеЗначение;	
		Иначе
			СтрокиРеквизита[0].Значение = ЭлементКоллекции.НовоеЗначение; 
		КонецЕсли;
		
	КонецЦикла;	
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСХарактеристиками

// Текст запроса характеристик с отбором по владельцу.
// В полях запроса должна присутствовать ссылка на характеристику с псевдонимом Ссылка, таблица характеристик должна 
// иметь псевдоним Характеристики, при этом в качестве параметра отбора владельца характеристик
// использоваться параметр Владелец.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ТекстЗапросаХарактеристикПоВладельцу(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	Характеристики.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	Характеристики.Владелец = &Владелец";

КонецПроцедуры

// Вариант использования характеристик для вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры	 - Произвольный - вид номенклатуры.
//  Результат		 - Строка - вариант использования характеристик. Возможные значения: "Индивидуальные", "Общие", "НеВедутся".
//
Процедура ПолучитьВариантИспользованияХарактеристик(ВидНоменклатуры, Результат) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидНоменклатуры, "ИспользованиеХарактеристик, ИспользоватьХарактеристики");	
	
	Если ЗначенияРеквизитов.ИспользоватьХарактеристики 
		И ЗначенияРеквизитов.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		
		Результат = "Индивидуальные";
		
	ИначеЕсли ЗначенияРеквизитов.ИспользоватьХарактеристики 
		И Не ЗначенияРеквизитов.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
		
		Результат = "Общие";
		
	ИначеЕсли Не ЗначенияРеквизитов.ИспользоватьХарактеристики Тогда
		
		Результат = "НеВедутся";
		
	КонецЕсли;	

КонецПроцедуры

// Получение количество характеристик для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру информационной базы.
//  Результат	 - Число - число характеристик.
//
Процедура ПолучитьКоличествоХарактеристик(Номенклатура, Результат) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидНоменклатуры, "ИспользованиеХарактеристик, ИспользоватьХарактеристики");	
	
	Если Не ЗначенияРеквизитов.ИспользоватьХарактеристики Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		Владелец = Номенклатура;
	Иначе
		Владелец = ВидНоменклатуры;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ХарактеристикиНоменклатуры.Ссылка), 0) КАК КоличествоХарактеристик
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоХарактеристик;
	Иначе
		Результат = 0;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапретРедактированияРеквизитов

// Процедура позволяет переопределить перечень блокируемых реквизитов. Если используется подсистема запрета редактирования,
// и для объекта настроен список блокируемых реквизитов, перечень реквизитов будет передаваться в параметре БлокируемыеРеквизиты.
//
// Параметры:
//  ПолноеИмя			 - Строка - полное имя объекта метаданных.
//  БлокируемыеРеквизиты - Массив - (Строка) массив имен блокируемых реквизитов.
//
Процедура ПриФормированииСпискаБлокируемыхРеквизитов(ПолноеИмя, БлокируемыеРеквизиты) Экспорт
		
КонецПроцедуры

// Процедура позволяет переопределить проверку наличие прав на редактирование блокируемых реквизитов. По умолчанию 
// право на редактирование имеет пользователь с полными правами, Администратор и 
// пользователь с ролью РедактированиеРеквизитовОбъектов.
//
// Параметры:
//  ЕстьПравоРедактированияРеквизитов - Булево - Истина, если текущий пользователь имеет возможность редактирования реквизитов.
//
Процедура ПриОпределенииПравНаРедактированиеРеквизитов(ЕстьПравоРедактированияРеквизитов) Экспорт
	
КонецПроцедуры

// Процедура позволяет переопределить алгоритм поиска ссылок на объект, перед включением возможности редактирования 
// заблокированных реквизитов.
//
// Параметры:
//  СсылкаНаОбъект		 - ЛюбаяСсылка - ссылка на проверяемый объект.
//  ИзмененныеРеквизиты	 - Массив - (Строка) массив заблокированных реквизитов.
//  РезультатПроверки	 - Структура - ключи структуры:
//                                     СсылкиОбнаружены - Булево - Истина, если ссылки на объект были обнаружены.
//                                     ТекстСообщения - Строка - текст сообщения, выводимое пользователю, в случае если
//                                                               были обнаружены ссылки на объект.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ПриПроверкеИспользованияОбъекта(СсылкаНаОбъект, ИзмененныеРеквизиты, РезультатПроверки, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Разное

// Процедура, вызываемая из обработчика события ПриСозданииНаСервере формы ПанельАдминистрирования.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма ПанельАдминистрирования.
//
Процедура ПриСозданииНаСервереФормаПанельАдминистрирования(Форма) Экспорт
	
	Форма.Элементы.ГруппаРаботаСОблачнымиКлассификаторами.Видимость = Ложь;
	Форма.Автозаголовок = Ложь;
	Форма.Заголовок = НСтр("ru = 'Интеграция с 1С:Номенклатура'");
	
КонецПроцедуры

// Переопределяет настройки подсистемы.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//    Ключи:
//    * ИспользоватьВидыНоменклатуры - Булево - флаг использования видов номенклатуры.
//    * ИспользоватьХарактеристики - Булево - флаг использования характеристик.
//    * ИспользоватьПакетноеСозданиеНоменклатуры - Булево - флаг использования пакетного создания номенклатуры.
//    * ИспользоватьПоискПоШтрихкодуВСервисе - Булево - флаг использования поиска по штрихкоду в сервисе.
//    * СохранятьИерархиюКатегорийПриЗагрузке - Булево - создавать групповые категории по иерархии.
//    * РежимПредставленияНоменклатурыСХарактеристиками - Строка - вариант представления списка номенклатуры:
//                                                                 "БезХарактеристик", "Группировка", "Линейный", "Настраиваемый".
//    * ИспользоватьДополнительныеРеквизиты - Булево - флаг использования дополнительных реквизитов и свойств.
//    * ИспользоватьВыгрузкуВКаталог1С - Булево - использовать выгрузку в 1С:Номенклатуру
//    * ИспользоватьВыгрузкуВНациональныйКаталог - Булево - использовать выгрузку в "Национальный каталог"
//    * ИспользоватьПодборНоменклатурыСХарактеристиками - Булево - использовать характеристики при подборе номенклатуры к выгрузке 
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	Настройки.ИспользоватьВидыНоменклатуры             = Истина;
	Настройки.ИспользоватьХарактеристики               = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	Настройки.СохранятьИерархиюКатегорийПриЗагрузке    = Истина;
	Настройки.ИспользоватьПакетноеСозданиеНоменклатуры = Истина;
	Настройки.ИспользоватьДополнительныеРеквизиты      = Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить();
	Настройки.ИспользоватьВыгрузкуВНациональныйКаталог = Ложь;
КонецПроцедуры

// Возвращает контакты пользователя для регистрации в сервисе.
//
// Параметры:
//   КонтактноеЛицо - СправочникСсылка - пользователь программы, контактное лицо.
//   Результат - Структура - информация о пользователе:
//     * ФИО - Строка - ФИО пользователя.
//     * Телефон - Строка - номер телефона.
//     * ЭлектроннаяПочта - Строка - адрес электронной почты пользователя.
//
Процедура ПолучитьКонтактнуюИнформациюПользователя(Знач КонтактноеЛицо, Результат) Экспорт
	
КонецПроцедуры

// Заполняет читаемые/изменяемые методом данные. Информация используется для описания обработчиков обновления.
// Все указанные в методе объекты метаданных должны быть включены в состав плана обмена ОбновлениеИнформационнойБазы.
//
// Для обновления на версию 1.7.2 необходимо указать читаемые/изменяемые данные метода
//  РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре.
// 
// Параметры:
//  Метод - Строка - полное имя переопределяемого метода.
//  ЧитаемыеИзменяемыеДанные - Структура:
//   * Читаемые - Массив из Строка - полные имена читаемых объектов метаданных.
//   * Изменяемые - Массив из Строка - полные имена изменяемых объектов метаданных.
//
// Пример: 
// Если Метод = "РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре" Тогда
// 	ЧитаемыеИзменяемыеДанные.Читаемые.Добавить("Справочник.Номенклатура");
// ИначеЕсли Метод = "РаботаСНоменклатуройПереопределяемый.ПолучитьШтрихкоды" Тогда
// 	ЧитаемыеИзменяемыеДанные.Читаемые.Добавить("РегистрСведений.Штрихкоды");
// КонецЕсли;
//
Процедура ЗаполнитьЧитаемыеИзменяемыеДанныеМетода(Знач Метод, ЧитаемыеИзменяемыеДанные) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПоискНоменклатурыПоШтрихкоду

// Процедура, вызываемая из обработчика события ПриСозданииНаСервере формы ПоискНоменклатурыПоШтрихкоду.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма ПоискНоменклатурыПоШтрихкоду.
//
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события ОбработкаПроверкиЗаполнения формы ПоискНоменклатурыПоШтрихкоду.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма ПоискНоменклатурыПоШтрихкоду.
//  Отказ				 - Булево - признак отказа.
//  ПроверяемыеРеквизиты - Массив - проверяемые реквизиты.
//
Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
КонецПроцедуры

// Запись штрихкодов в информационную базу.
//
// Параметры:
//  ШтрихкодыНоменклатуры - ТаблицаЗначений:
//   * ИдентификаторНоменклатуры - Строка
//   * Штрихкод - Строка
//   * Количество - Число
//   * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой
//   * Состояние - Строка
//   * ЕдиницаИзмерения - Произвольный
//   * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой
//   * НоменклатураСервиса - Строка
//   * Зарегистрирован - Булево
//   * ХарактеристикиИспользуются - Булево
//   * ПоискВСервисеНеПроизводился - Булево
//   * НоменклатураНеНайденаВСервисе - Булево
//   * ИдентификаторХарактеристики - Строка
//   * ЗарегистрированОбработкой - Булево
//   * ХарактеристикаИспользуетсяВСервисе - Булево
//
Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	
КонецПроцедуры

// Метод вызывается после загрузки номенклатуры сервиса, найденной по штрихкоду, при заполнении
// таблицы штрихкодов.
//
// Параметры:
//  СтрокаТаблицыШтрихкодов	 - ДанныеФормыЭлементКоллекции - строка таблицы ШтрихкодыНоменклатуры.
//  НоменклатураСсылка		 - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на созданную номенклатуру.
//
Процедура ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры(СтрокаТаблицыШтрихкодов, НоменклатураСсылка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыСРубрикатором

// Метод формирует текст запроса, на основе которого создается компоновщик настроек СКД. 
// Созданный компоновщик настроек используется для интерактивной настройки отбора номенклатуры.
//
// Требования к запросу:
//   Все поля отборов должны быть описаны в фигурных скобках {} секции инструкций компоновки.
// 
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//    Поля результата запроса:
//    * Номенклатура    - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - товар.
//    * ВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - вид номенклатуры, указать NULL, если виды номенклатуры не используются.
//    * Родитель        - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - группа товара в иерархии, указать NULL, если справочник номенклатуры не иерархический.
//
Процедура ИнициализацияЗапросаОтбораДанныхНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СправочникНоменклатура.Ссылка КАК Номенклатура,
	               |	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	СправочникНоменклатура.Родитель КАК Родитель
	               |ИЗ
	               |	Справочник.Номенклатура КАК СправочникНоменклатура
	               |ГДЕ
	               |	НЕ СправочникНоменклатура.ПометкаУдаления
	               |{ГДЕ
	               |	СправочникНоменклатура.Ссылка.* КАК Номенклатура,
	               |	СправочникНоменклатура.ВидНоменклатуры.* КАК ВидНоменклатуры,
	               |	СправочникНоменклатура.Родитель.* КАК Родитель,
	               |	СправочникНоменклатура.Код,
	               |	СправочникНоменклатура.Артикул}
	               |{ХАРАКТЕРИСТИКИ
	               |	ТИП(Справочник.Номенклатура)
	               |	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
	               |			ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	               |			ДополнительныеРеквизитыИСведения.Наименование + "" ("" + ДополнительныеРеквизитыИСведения.НаборСвойств.Наименование + "")"" КАК Наименование,
	               |			ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
	               |		ИЗ
	               |			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения)
	               |	ПОЛЕКЛЮЧА Ссылка
	               |	ПОЛЕИМЕНИ Наименование
	               |	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
	               |	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
	               |			НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	               |			НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	               |			НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	               |		ИЗ
	               |			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты)
	               |	ПОЛЕОБЪЕКТА Ссылка
	               |	ПОЛЕВИДА Свойство
	               |	ПОЛЕЗНАЧЕНИЯ Значение }";
	

КонецПроцедуры

// Получение публикуемых реквизитов номенклатуры.
// 
// Параметры:
//  ПубликуемыеРеквизиты - Соответствие - реквизиты справочника Номенклатура, публикуемые для торговых предложений.
//    * Ключ     - ОпределяемыйТип.ДополнительныеРеквизитыРаботаСНоменклатурой - значение реквизита сопоставления.
//    * Значение - Структура - свойства реквизита:
//      ** Представление    - Строка - наименование для отображения.
//      ** ПутьКДанным      - Строка - текст запроса для получения данных.
//      ** ТипЗначения      - ОписаниеТипов - описание типа данных.
//      ** ПустоеЗначение   - Произвольный - Значение реквизита, при котором, он считается не заполненным.
//
Процедура ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты) Экспорт
	
	ПубликуемыеРеквизиты = Новый Соответствие;
	
	РеквизитАртикул = Новый Структура;
	РеквизитАртикул.Вставить("Представление",    НСтр("ru = 'Артикул'"));
	РеквизитАртикул.Вставить("ПутьКДанным",      "Номенклатура.Артикул");
	РеквизитАртикул.Вставить("ТипЗначения",      Новый ОписаниеТипов("Строка"));
	РеквизитАртикул.Вставить("ПустоеЗначение",   Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.ПустаяСсылка());
	ПубликуемыеРеквизиты.Вставить(Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Артикул, РеквизитАртикул);

КонецПроцедуры 

// Инициализация запроса, описывающего источники данных заполнения дополнительных реквизитов номенклатуры ссылочного типа.
// Задача метода - описать соответствие доп. реквизита набору возможных значений этого доп. реквизита.
// Текст запроса должен содержать описание 2х полей:
//  РеквизитОбъекта - ОпределяемыйТип.РеквизитыСопоставленияРаботаСНоменклатурой - доп.реквизит.
//  Значение - ОпределяемыйТип.ЗначенияСвойствОбъектовРаботаСНоменклатурой - значение доп.реквизита.
// При использовании БСП в качестве значений доп. реквизитов используются справочники
//  ЗначенияСвойствОбъектов или ЗначенияСвойствОбъектовИерархия, для таких значений в запросе следует описать отбор по владельцу.
// Если для учета доп. реквизитов применяется какая-то иная механика, не БСП, либо модифицированная БСП,
//  нужно сформировать произвольный текст запроса, позволяющий получить значения доп.реквизитов.
// Для реквизитов метаданных, которые для сервиса 1С:Номенклатура представляются как дополнительные реквизиты,
//  нужно описать произвольный запрос, получающий значения свойств.
// Например: допустим, на уровне метаданных конфигурации существует реквизит Номенклатуры СтранаПроисхождения,
//  которому нет аналогов в реквизитах модели 1С:Номенклатуры, но есть аналоги в дополнительных реквизитах 1С:Номенклатуры.
// В этом случае реквизит СтранаПроисхождения должен быть описан в методе ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации,
//  в составе ПубликуемыеРеквизиты, а так же в методе ИнициализацияЗапросаЗначенийДополнительныхРеквизитов нужно описать источник значений.
// Допустим, что реквизит СтранаПроисхождения имеет тип значения СправочникСсылка.СтраныМира.
// Тогда в запросе с использованием конструкции ОБЪЕДИНИТЬ ВСЕ добавляется подзапрос, где поле РеквизитОбъекта - константа,
//  устанавливается из параметра, а поле Значение - это ссылка на справочник СтраныМира.
// При этом может быть описана какая-то специфическая логика прикладного решения, например, могут выбираться не все значения
//  справочника, а с каким-то отбором, как например отбор по Владельцу для ЗначенияСвойствОбъектов БСП.
// ВАЖНО! Сам ссылочный тип данных, представляющий собой источник значений доп.реквизита должен быть включен в
//  определяемый тип ЗначенияСвойствОбъектовРаботаСНоменклатурой.
//
// Параметры:
//  Запрос - Запрос.
//  ДополнительныеРеквизиты - Массив из ОпределяемыйТип.РеквизитыСопоставленияРаботаСНоменклатурой, Неопределено - 
//   перечень доп.реквизитов, для которых нужно получить значения, если ДополнительныеРеквизиты = Неопределено,
//   то нужно получить значения для всех доп.реквизитов, включая и ПубликуемыеРеквизиты.
//
Процедура ИнициализацияЗапросаЗначенийДополнительныхРеквизитов(Запрос, Знач ДополнительныеРеквизиты) Экспорт 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Владелец КАК РеквизитОбъекта,
	               |	ЗначенияСвойствОбъектов.Ссылка КАК Значение
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Владелец,
	               |	ЗначенияСвойствОбъектов.Ссылка
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)";
	
	Если ДополнительныеРеквизиты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)", "ИСТИНА");
	Иначе 
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНоменклатуры

// В запросе должны быть описаны временные таблицы с предопределенными полями (псевдонимами).
// На основании данных таблиц формируются файлы выгрузки номенклатуры.
//
// Если в прикладном решении отсутствуют данные для заполнения какого-то поля, либо целой таблицы, кроме обязательных,
// то это поле (или таблицу) следует исключить из запроса полностью, либо инициализировать значением(значениями) NULL.
// Обязательные таблицы и поля должны присутствовать в запросе даже если нет источников данных для их заполнения - в этом случае инициализировать поля значениями NULL
//
// На входе запрос содержит текст создания временной таблицы ОтборНоменклатуры, которая служит для ограничения выборки.
// Формируется на основе текста запроса, полученного методом ИнициализацияЗапросаОтбораДанныхНоменклатуры.
// Поля таблицы:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//      Если подбор номенклатуры с характеристиками не используется 
//       (т.е. РаботаСНоменклатурой.ИспользоватьПодборНоменклатурыСХарактеристиками() - Ложь), то
//      для выгрузки всех характеристик будет в ОтборНоменклатуры.Характеристика будет NULL
//      В этом случае нужно получить данные по всем характеристикам номенклатуры.
//  * ВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - вид номенклатуры, может быть NULL, если виды номенклатуры не используются.
//  * Родитель        - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - группа товара в иерархии, может быть NULL, если справочник номенклатуры не иерархический.
// 
// Параметры запроса:
//  * ИсключенныеДополнительныеРеквизиты    - Массив - доп.реквизиты, запрещенные к выгрузке пользователем. Выгружать надо все доп.реквизиты кроме исключений, заданных этим параметром.
//  * ВыгружатьИндивидуальныеХарактеристики - Булево   - признак необходимости выгружать индивидуальные характеристики номенклатуры.
//  * ИсключенныеВидыНоменклатуры           - Массив - виды номенклатуры, по которым пользователь запретил выгружать характеристики. По всем остальным видам характеристики выгружаются.
//  * Организация                           - ОпределяемыйТип.Организация - организация, для которой выполняется выгрузка.
// * Параметры запроса - строковые константы:
// * Ставки НДС:
//  * НДС0  - Строка - без НДС (или НДС 0%).
//  * НДС10 - Строка - НДС 10%.
//  * НДС18 - Строка - НДС 18%.
//  * НДС20 - Строка - НДС 20%.
// * Типы номенклатуры:
//  * Товар  - Строка - тип номенклатуры "Товар".
//  * Услуга - Строка - тип номенклатуры "Услуга".
// * Типы измеряемых величин:
//  * Вес                - Строка
//  * Объем              - Строка
//  * Площадь            - Строка
//  * Длина              - Строка
//  * КоличествоШтук     - Строка
//  * Упаковка           - Строка
//  * Мощность           - Строка
//  * Энергия            - Строка
//  * ЭлектрическийЗаряд - Строка
//  * Время              - Строка
// Классификаторы:
//  * ОКПД2  - Строка
//  * ТНВЭД  - Строка
//  * ЕГАИС  - Строка
//  * ОКВЭД2 - Строка
//
// Временные таблицы и предопределенные поля:
// Товары
//  * Номенклатура                - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика              - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Наименование                - Строка - наименование товара.
//  * ХарактеристикаНаименование  - Строка - наименование характеристики.
//  * Артикул                     - Строка - артикул товара.
//  * СтавкаНДС                   - Строка - ставка НДС, значение из списка: &НДС0, &НДС10, &НДС18, &НДС20.
//  * ЕдиницаИзмерения                        - Строка - наименование базовой единицы измерения товара.
//  * ЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения товара.
//  * ЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - значение из списка: &Вес, &Объем, &Площадь, &Длина, &КоличествоШтук, &Упаковка, &Мощность, &Энергия, &ЭлектрическийЗаряд, &Время.
//  * ЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения товара.
//  * ЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения товара.
//  * ЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения товара.
//  * ЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения товара к базовой величине.
//  * ЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения товара к базовой величине.
//  * ТипНоменклатуры             - Строка - значение из списка: &Товар, &Услуга.
//  * Описание                    - Строка - текстовое описание товара.
//  * НаименованияДляПечатиЧека   - Строка - краткое наименование товара для печати чека.
//  * ВестиУчетПоГТД              - Булево - вести учет по ГТД.
//  * ПродукцияМаркируемаяДляГИСМ - Булево - продукция, маркируемая для ГИСМ.
//  * ПодакцизныйТовар            - Булево - подакцизный товар.
//  * СтранаПроисхождения         - Строка - код страны происхождения товара согласно ОКСМ.
//  * Производитель               - СправочникСсылка - ссылка (уникальный идентификатор) производителя.
//  * ПроизводительНаименование   - Строка - наименование производителя.
//  * ПроизводительИНН            - Строка - ИНН производителя.
//  * ПроизводительКПП            - Строка - КПП производителя.
//  * Марка                       - СправочникСсылка - ссылка (уникальный идентификатор) марки (бренда).
//  * МаркаНаименование           - Строка - наименование марки (бренда).
//  * КоличествоВУпаковке                                        - Число  - количество штук в 1 единице (упаковке) товара. Например: 1 пачка фломастеров содержит 10 штук фломастеров.
//  * КоличествоВУпаковкеЕдиницаИзмерения                        - Строка - наименование единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &КоличествоШтук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения количества штук к базовой величине.
//  * КоличествоВУпаковкеЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения количества штук к базовой величине.
//  * ВесЧислитель                               - Число  - числитель отношения единицы измерения веса к единице измерения товара.
//  * ВесЗнаменатель                             - Число  - знаменатель отношения единицы измерения веса к единице измерения товара.
//  * ВесЕдиницаИзмерения                        - Строка - наименование единицы измерения веса.
//  * ВесЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения веса.
//  * ВесЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Вес.
//  * ВесЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения веса.
//  * ВесЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения веса.
//  * ВесЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения веса.
//  * ВесЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения веса к базовой величине.
//  * ВесЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения веса к базовой величине.
//  * ДлинаЧислитель                               - Число  - числитель отношения единицы измерения длины к единице измерения товара.
//  * ДлинаЗнаменатель                             - Число  - знаменатель отношения единицы измерения длины к единице измерения товара.
//  * ДлинаЕдиницаИзмерения                        - Строка - наименование единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Длина.
//  * ДлинаЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения длины к базовой величине.
//  * ДлинаЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения длины к базовой величине.
//  * ОбъемЧислитель                               - Число  - числитель отношения единицы измерения объема к единице измерения товара.
//  * ОбъемЗнаменатель                             - Число  - знаменатель отношения единицы измерения объема к единице измерения товара.
//  * ОбъемЕдиницаИзмерения                        - Строка - наименование единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Объем.
//  * ОбъемЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения объема к базовой величине.
//  * ОбъемЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения объема к базовой величине.
//  * ПлощадьЧислитель                               - Число  - числитель отношения единицы измерения площади к единице измерения товара.
//  * ПлощадьЗнаменатель                             - Число  - знаменатель отношения единицы измерения площади к единице измерения товара.
//  * ПлощадьЕдиницаИзмерения                        - Строка - наименование единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - &Площадь.
//  * ПлощадьЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения площади к базовой величине.
//  * ПлощадьЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения площади к базовой величине.
//  * <Псевдоним доп.реквизита> - тип значения соответствует типу доп.реквизита - значения доп. реквизитов,
//                                подробнее об использовании псевдонимов доп. реквизитов см. в документации по встраиванию,
//                                список поддерживаемых псевдонимов описан в документации по встраиванию.
// КРИТИЧЕСКИ ВАЖНО! Таблица Товары должна содержать ровно по 1 строке на сочетание Номенклатура + Характеристика
// Поддерживается выгрузка дополнительных свойств Номенклатуры, не включенных в указанный выше список полей.
// Это означает, что все поля таблицы Товары будут включены в пакет выгрузки, как описанные выше, так и прочие.
// Например, таким образом можно добавлять данные из регистров сведений.
//
// Категории:
//  * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Категория    - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой ИЛИ ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - ссылка на категорию.
//  * Наименование - Строка - наименование категории.
//  * Родитель     - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой ИЛИ ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - родитель категории в иерархии.
// Пояснение.
// Категории - это способ деления товаров на группы.
// В общем случае предполагается, что категорией может быть вид номенклатуры, либо родитель в иерархии номенклатуры.
// Наличие таблицы в запросе обязательно.
// Если в конфигурации нет возможности разделить номенклатуру на категории, следует инициализировать таблицу значениями NULL по всем полям.
// Минимально необходимо описать 2 уровня иерархии. 
// То есть если справочник Номенклатура иерархический, то в список категорий должны попасть Родитель и Родитель.Родитель.
// Если виды номенклатуры используются, то в списке категорий должны быть ВидНоменклатуры и ВидНоменклатуры.Родитель.
// Допускается и более глубокое описание иерархии - 3, 4 и т.д. уровней.
// 
// Свойства:
//  * Номенклатура           - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика         - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Свойство               - ЛюбаяСсылка - свойство товара.
//  * Значение               - Произвольный - значение свойства товара.
//  * РеквизитХарактеристики - Булево - признак свойства характеристики.
// ВАЖНО! В разрезе характеристик указать только свойства характеристик (СвойствоХарактеристики = ИСТИНА).
// Для свойств номенклатуры (СвойствоХарактеристики = ЛОЖЬ) характеристику не заполнять, указать NULL.
// Свойства номенклатуры не должны дублироваться (размножаться на количество различных характеристик номенклатуры).
//
// Штрихкоды:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Упаковка       - СправочникСсылка - единица измерения упаковки товара.
//  * Штрихкод       - Строка - штрихкод.
//
// Упаковки:
//  * Номенклатура         - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика       - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Ссылка               - СправочникСсылка - ссылка (уникальный идентификатор) на упаковку.
//  * Наименование         - Строка - наименование упаковки.
//  * Родитель             - СправочникСсылка - «родительская» (внешняя, более крупная) упаковка.
//  * РодительНаименование - Строка - наименование «родительской» упаковки.
//  * ЕдиницаКодОКЕИ       - Строка - код ОКЕИ единицы измерения упаковки.
//  * ЕдиницаНаименование  - Строка - наименование единицы измерения упаковки.
//  * Числитель            - Число  - числитель отношения единицы измерения к упаковке.
//  * Знаменатель          - Число  - знаменатель отношения единицы измерения к упаковке.
//  * Вес                                        - Число  - вес упаковки (брутто).
//  * ВесЕдиницаИзмерения                        - Строка - наименование единицы измерения веса.
//  * ВесЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения веса.
//  * ВесЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Вес.
//  * ВесЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения веса.
//  * ВесЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения веса.
//  * ВесЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения веса.
//  * ВесЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения веса к базовой величине.
//  * ВесЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения веса к базовой величине.
//  * Объем                                        - Число  - объем упаковки.
//  * ОбъемЕдиницаИзмерения                        - Строка - наименование единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Объем.
//  * ОбъемЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения объема к базовой величине.
//  * ОбъемЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения объема к базовой величине.
//  * Высота                                        - Число  - высота упаковки.
//  * ВысотаЕдиницаИзмерения                        - Строка - наименование единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Длина.
//  * ВысотаЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения высоты к базовой величине.
//  * ВысотаЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения высоты к базовой величине.
//  * Ширина                                        - Число  - ширина упаковки.
//  * ШиринаЕдиницаИзмерения                        - Строка - наименование единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Длина.
//  * ШиринаЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения ширины к базовой величине.
//  * ШиринаЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения ширины к базовой величине.
//  * Глубина                                        - Число  - глубина упаковки.
//  * ГлубинаЕдиницаИзмерения                        - Строка - наименование единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Длина.
//  * ГлубинаЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения глубины к базовой величине.
//  * ГлубинаЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения глубины к базовой величине.
//
// Классификаторы:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Наименование   - Строка - имя классификатора, значение из списка &ОКПД2, &ТНВЭД, &ЕГАИС, &КодПродукцииЕГАИС, &ИдентификаторВЕТИС.
//  * Код            - Строка - код элемента классификатора.
//  * Описание       - Строка - название кода.
// Список поддерживаемых классификаторов может меняться. Актуальный список содержится в схеме catalog-partners.xsd, ссылка на ИТС.
// Значения перечисленных выше параметров (Наименование классификатора) устанавливаются в коде библиотеки.
// Допускается добавление новых классификаторов в код при встраивании, для этого добавляются новые параметры.
// Значения таких новых параметров необходимо устанавливать на переопределяемой части, значение параметра должно соответствовать XSD схеме.
// Примеры:
// Запрос.УстановитьПараметр("КодПродукцииЕГАИС", "EGAIS_code");
// Запрос.УстановитьПараметр("ИдентификаторВЕТИС", "Mercury");
//
// Изображения:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Файл           - ЛюбаяСсылка - ссылка (уникальный идентификатор) на файл.
//  * Наименование   - Строка - наименование файла.
//  * Гиперссылка    - Строка - URL файла.
//
// Вложения:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Файл           - ЛюбаяСсылка - ссылка (уникальный идентификатор) на файл.
//  * Наименование   - Строка - наименование файла.
//  * Гиперссылка    - Строка - URL файла.
// 
// Сертификаты:
//  * Номенклатура               - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика             - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Сертификат                 - СправочникСсылка - ссылка на сертификат.
//  * Номер                      - Строка - номер.
//  * ДатаНачалаСрокаДействия    - ДатаВремя - дата выдачи.
//  * ДатаОкончанияСрокаДействия - ДатаВремя - дата окончания срока действия.
//  * ТипСертификата             - Строка - тип сертификата.
//  * ОрганВыдавшийДокумент      - Строка - орган выдавший документ.
//
// ВложенияСертификатов:
//  * Сертификат   - СправочникСсылка - ссылка на сертификат.
//  * Файл         - ЛюбаяСсылка - ссылка (уникальный идентификатор) на файл.
//  * Наименование - Строка - наименование файла.
//  * Гиперссылка  - Строка - URL файла.
//
// Обязательные таблицы и поля:
// Товары
//  * Номенклатура,
//  * Характеристика.
// Свойства: все поля.
// Категории: все поля.
// Штрихкоды: Номенклатура.
//
// При необходимости возможно добавление в пакет данных выгрузки произвольных дополнительных сведений общего характера, без привязки к товарной позиции.
// Для этого в тексте запроса можно описать любое нужное количество дополнительных запросов без создания временной таблицы.
// Важно, чтобы все эти запросы не использовали никакие вышеописанные временные таблицы, относящиеся к номенклатуре, так как
//  выполняться эти запросы будут отдельно от запроса по номенклатуре, поскольку речь идет о сведениях, общих для всего пакета данных в целом.
// Если добавляемые в пакет дополнительные сведения имеют сложную структуру (не одномерный массив полей, а многомерный массив), то 
//  имя таблицы источника данных нужно сформировать по шаблону ДополнительныеДанные_ИмяТаблицы.
// В этом случае в пакет добавится дополнительное свойство ИмяТаблицы, значение которого будет заполнено данными запроса.
// Если таблица с префиксом ДополнительныеДанные_ в секции ИЗ не найдена,
//  то все полученные запросом дополнительные сведения добавляются в пакет как одномерный массив пар значений <имя поля> - <значение поля>.
//
// Примечание: в случае, если данные дополнительной таблицы хранятся без разреза Характеристика, то эту колонку следует исключить из запроса.
// Актуально для дополнительных таблиц: Упаковки, Классификаторы, Изображения, Вложения и Сертификаты.
// В смешанных случаях - например, для таблицы Классификаторы возможна ситуация, что часть данных имеют разрез Характеристика, другие нет, - 
//  указывается значение характеристики там, где возможно, в остальных случаях указать NULL
// 
// Параметры:
//  Запрос - Запрос - запрос для получения данных номенклатуры.
//
Процедура ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос) Экспорт
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС
	+ "ВЫБРАТЬ
	  |	СправочникНоменклатура.Ссылка КАК Номенклатура,
	  |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ХарактеристикиВидаНоменклатуры.Ссылка) КАК Характеристика,
	  |	СправочникНоменклатура.Наименование КАК Наименование,
	  |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, ХарактеристикиВидаНоменклатуры.Наименование) КАК ХарактеристикаНаименование,
	  |	СправочникНоменклатура.Артикул КАК Артикул,
	  |	ВЫБОР
	  |		КОГДА СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	  |			ТОГДА &НДС10
	  |		КОГДА СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	  |			ТОГДА &НДС10
	  |		КОГДА СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	  |			ТОГДА &НДС18
	  |		КОГДА СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	  |			ТОГДА &НДС18
	  |		КОГДА СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	  |			ТОГДА &НДС20
	  |		КОГДА СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	  |			ТОГДА &НДС20
	  |		КОГДА СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	  |			ТОГДА &НДС0
	  |		КОГДА СтавкиНДС.ПеречислениеСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	  |			ТОГДА &НДС0
	  |		ИНАЧЕ &НДС0
	  |	КОНЕЦ КАК СтавкаНДС,
	  |	СправочникЕдиницыИзмерения.Наименование КАК ЕдиницаИзмерения,
	  |	СправочникЕдиницыИзмерения.Код КАК ЕдиницаИзмеренияКодОКЕИ,
	  |	СправочникЕдиницыИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	  |	СправочникЕдиницыИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	  |	NULL КАК ЕдиницаИзмеренияБазоваяЕдиница,
	  |	NULL КАК ЕдиницаИзмеренияЧислитель,
	  |	NULL КАК ЕдиницаИзмеренияЗнаменатель,
	  |	ВЫБОР
	  |		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	  |			ТОГДА &Товар
	  |		ИНАЧЕ &Услуга
	  |	КОНЕЦ КАК ТипНоменклатуры,
	  |	СправочникНоменклатура.Описание КАК Описание,
	  |	NULL КАК НаименованияДляПечатиЧека,
	  |	NULL КАК ВестиУчетПоГТД,
	  |	NULL КАК ПродукцияМаркируемаяДляГИСМ,
	  |	NULL КАК ПодакцизныйТовар,
	  |	NULL КАК СтранаПроисхождения,
	  |	Производители.Ссылка КАК Производитель,
	  |	Производители.Наименование КАК ПроизводительНаименование,
	  |	NULL КАК ПроизводительИНН,
	  |	NULL КАК ПроизводительКПП,
	  |	NULL КАК Марка,
	  |	NULL КАК МаркаНаименование,
	  |	NULL КАК КоличествоВУпаковке,
	  |	NULL КАК КоличествоВУпаковкеЕдиницаИзмерения,
	  |	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияКодОКЕИ,
	  |	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияТипИзмеряемойВеличины,
	  |	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияНаименованиеПолное,
	  |	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияМеждународноеСокращение,
	  |	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияБазоваяЕдиница,
	  |	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияЧислитель,
	  |	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияЗнаменатель,
	  |	NULL КАК ВесЧислитель,
	  |	NULL КАК ВесЗнаменатель,
	  |	NULL КАК ВесЕдиницаИзмерения,
	  |	NULL КАК ВесЕдиницаИзмеренияКодОКЕИ,
	  |	NULL КАК ВесЕдиницаИзмеренияНаименованиеПолное,
	  |	NULL КАК ВесЕдиницаИзмеренияМеждународноеСокращение,
	  |	NULL КАК ВесЕдиницаИзмеренияБазоваяЕдиница,
	  |	NULL КАК ВесЕдиницаИзмеренияЧислитель,
	  |	NULL КАК ВесЕдиницаИзмеренияЗнаменатель,
	  |	NULL КАК ДлинаЧислитель,
	  |	NULL КАК ДлинаЗнаменатель,
	  |	NULL КАК ДлинаЕдиницаИзмерения,
	  |	NULL КАК ДлинаЕдиницаИзмеренияКодОКЕИ,
	  |	NULL КАК ДлинаЕдиницаИзмеренияНаименованиеПолное,
	  |	NULL КАК ДлинаЕдиницаИзмеренияМеждународноеСокращение,
	  |	NULL КАК ДлинаЕдиницаИзмеренияБазоваяЕдиница,
	  |	NULL КАК ДлинаЕдиницаИзмеренияЧислитель,
	  |	NULL КАК ДлинаЕдиницаИзмеренияЗнаменатель,
	  |	NULL КАК ОбъемЧислитель,
	  |	NULL КАК ОбъемЗнаменатель,
	  |	NULL КАК ОбъемЕдиницаИзмерения,
	  |	NULL КАК ОбъемЕдиницаИзмеренияКодОКЕИ,
	  |	NULL КАК ОбъемЕдиницаИзмеренияНаименованиеПолное,
	  |	NULL КАК ОбъемЕдиницаИзмеренияМеждународноеСокращение,
	  |	NULL КАК ОбъемЕдиницаИзмеренияБазоваяЕдиница,
	  |	NULL КАК ОбъемЕдиницаИзмеренияЧислитель,
	  |	NULL КАК ОбъемЕдиницаИзмеренияЗнаменатель,
	  |	NULL КАК ПлощадьЧислитель,
	  |	NULL КАК ПлощадьЗнаменатель,
	  |	NULL КАК ПлощадьЕдиницаИзмерения,
	  |	NULL КАК ПлощадьЕдиницаИзмеренияКодОКЕИ,
	  |	NULL КАК ПлощадьЕдиницаИзмеренияНаименованиеПолное,
	  |	NULL КАК ПлощадьЕдиницаИзмеренияМеждународноеСокращение,
	  |	NULL КАК ПлощадьЕдиницаИзмеренияБазоваяЕдиница,
	  |	NULL КАК ПлощадьЕдиницаИзмеренияЧислитель,
	  |	NULL КАК ПлощадьЕдиницаИзмеренияЗнаменатель,
	  |	&ПримерПоляТипаСтрока КАК ПримерДополнительногоПоляТипаСтрока,
	  |	100 КАК ПримерДополнительногоПоляТипаЧисло,
	  |	ИСТИНА КАК ПримерДополнительногоПоляТипаБулево,
	  |	ДАТАВРЕМЯ(2020, 2, 20, 20, 20, 20) КАК ПримерДополнительногоПоляТипаДата
	  |ПОМЕСТИТЬ Товары
	  |ИЗ
	  |	ОтборНоменклатуры КАК ОтборНоменклатуры
	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	  |		ПО ОтборНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	  |		ПО (СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиВидаНоменклатуры
	  |		ПО (ВидыНоменклатуры.Ссылка = ХарактеристикиВидаНоменклатуры.Владелец)
	  |			И (ВидыНоменклатуры.ИспользоватьХарактеристики = ИСТИНА)
	  |			И (ВидыНоменклатуры.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	  |			И (НЕ ВидыНоменклатуры.Ссылка В (&ИсключенныеВидыНоменклатуры))
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	  |		ПО ОтборНоменклатуры.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	  |			И (&ВыгружатьИндивидуальныеХарактеристики = ИСТИНА)
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	  |		ПО (СтавкиНДС.Ссылка = СправочникНоменклатура.СтавкаНДС)
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Производители КАК Производители
	  |		ПО (СправочникНоменклатура.Производитель = Производители.Ссылка)
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СправочникЕдиницыИзмерения
	  |		ПО (СправочникНоменклатура.ЕдиницаИзмерения = СправочникЕдиницыИзмерения.Ссылка)
	  |ГДЕ
	  |	(ОтборНоменклатуры.Характеристика ЕСТЬ NULL
	  |			ИЛИ ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ХарактеристикиВидаНоменклатуры.Ссылка) = ОтборНоменклатуры.Характеристика)
	  |
	  |ИНДЕКСИРОВАТЬ ПО
	  |	Номенклатура,
	  |	Характеристика
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ
	  |	ОтборНоменклатуры.Номенклатура КАК Номенклатура,
	  |	ОтборНоменклатуры.ВидНоменклатуры КАК Категория,
	  |	ОтборНоменклатуры.ВидНоменклатуры.Наименование КАК Наименование,
	  |	ОтборНоменклатуры.ВидНоменклатуры.Родитель КАК Родитель
	  |ПОМЕСТИТЬ Категории
	  |ИЗ
	  |	ОтборНоменклатуры КАК ОтборНоменклатуры
	  |ГДЕ
	  |	ОтборНоменклатуры.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	  |	И (ЕСТЬNULL(ОтборНоменклатуры.Характеристика, ИСТИНА), ИСТИНА) В
	  |			(ВЫБРАТЬ
	  |				МАКСИМУМ(ЕСТЬNULL(ТаблицаУсловия.Характеристика, ИСТИНА)),
	  |				ИСТИНА
	  |			ИЗ
	  |				ОтборНоменклатуры КАК ТаблицаУсловия
	  |			ГДЕ
	  |				ТаблицаУсловия.Номенклатура = ОтборНоменклатуры.Номенклатура)
	  |
	  |ОБЪЕДИНИТЬ ВСЕ
	  |
	  |ВЫБРАТЬ
	  |	ОтборНоменклатуры.Номенклатура,
	  |	ОтборНоменклатуры.ВидНоменклатуры.Родитель,
	  |	ОтборНоменклатуры.ВидНоменклатуры.Родитель.Наименование,
	  |	ОтборНоменклатуры.ВидНоменклатуры.Родитель.Родитель
	  |ИЗ
	  |	ОтборНоменклатуры КАК ОтборНоменклатуры
	  |ГДЕ
	  |	ОтборНоменклатуры.ВидНоменклатуры.Родитель <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	  |	И (ЕСТЬNULL(ОтборНоменклатуры.Характеристика, ИСТИНА), ИСТИНА) В
	  |			(ВЫБРАТЬ
	  |				МАКСИМУМ(ЕСТЬNULL(ТаблицаУсловия.Характеристика, ИСТИНА)),
	  |				ИСТИНА
	  |			ИЗ
	  |				ОтборНоменклатуры КАК ТаблицаУсловия
	  |			ГДЕ
	  |				ТаблицаУсловия.Номенклатура = ОтборНоменклатуры.Номенклатура)
	  |
	  |ОБЪЕДИНИТЬ ВСЕ
	  |
	  |ВЫБРАТЬ
	  |	ОтборНоменклатуры.Номенклатура,
	  |	ОтборНоменклатуры.Родитель,
	  |	ОтборНоменклатуры.Родитель.Наименование,
	  |	ОтборНоменклатуры.Родитель.Родитель
	  |ИЗ
	  |	ОтборНоменклатуры КАК ОтборНоменклатуры
	  |ГДЕ
	  |	ОтборНоменклатуры.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	  |	И (ЕСТЬNULL(ОтборНоменклатуры.Характеристика, ИСТИНА), ИСТИНА) В
	  |			(ВЫБРАТЬ
	  |				МАКСИМУМ(ЕСТЬNULL(ТаблицаУсловия.Характеристика, ИСТИНА)),
	  |				ИСТИНА
	  |			ИЗ
	  |				ОтборНоменклатуры КАК ТаблицаУсловия
	  |			ГДЕ
	  |				ТаблицаУсловия.Номенклатура = ОтборНоменклатуры.Номенклатура)
	  |
	  |ОБЪЕДИНИТЬ ВСЕ
	  |
	  |ВЫБРАТЬ
	  |	ОтборНоменклатуры.Номенклатура,
	  |	ОтборНоменклатуры.Родитель.Родитель,
	  |	ОтборНоменклатуры.Родитель.Родитель.Наименование,
	  |	ОтборНоменклатуры.Родитель.Родитель.Родитель
	  |ИЗ
	  |	ОтборНоменклатуры КАК ОтборНоменклатуры
	  |ГДЕ
	  |	ОтборНоменклатуры.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	  |	И (ЕСТЬNULL(ОтборНоменклатуры.Характеристика, ИСТИНА), ИСТИНА) В
	  |			(ВЫБРАТЬ
	  |				МАКСИМУМ(ЕСТЬNULL(ТаблицаУсловия.Характеристика, ИСТИНА)),
	  |				ИСТИНА
	  |			ИЗ
	  |				ОтборНоменклатуры КАК ТаблицаУсловия
	  |			ГДЕ
	  |				ТаблицаУсловия.Номенклатура = ОтборНоменклатуры.Номенклатура)
	  |
	  |ИНДЕКСИРОВАТЬ ПО
	  |	Номенклатура
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ
	  |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	  |	NULL КАК Характеристика,
	  |	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	  |	НоменклатураДополнительныеРеквизиты.Значение КАК Значение,
	  |	ЛОЖЬ КАК РеквизитХарактеристики
	  |ПОМЕСТИТЬ Свойства
	  |ИЗ
	  |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	  |ГДЕ
	  |	НЕ НоменклатураДополнительныеРеквизиты.Свойство В (&ИсключенныеДополнительныеРеквизиты)
	  |	И ИСТИНА В
	  |			(ВЫБРАТЬ ПЕРВЫЕ 1
	  |				ИСТИНА
	  |			ИЗ
	  |				ОтборНоменклатуры КАК Товары
	  |			ГДЕ
	  |				Товары.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка)
	  |
	  |ОБЪЕДИНИТЬ ВСЕ
	  |
	  |ВЫБРАТЬ
	  |	Товары.Номенклатура,
	  |	Товары.Характеристика,
	  |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство,
	  |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение,
	  |	ИСТИНА
	  |ИЗ
	  |	Товары КАК Товары
	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	  |		ПО Товары.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	  |ГДЕ
	  |	НЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство В (&ИсключенныеДополнительныеРеквизиты)
	  |
	  |ОБЪЕДИНИТЬ ВСЕ
	  |
	  |ВЫБРАТЬ
	  |	СправочникНоменклатура.Ссылка,
	  |	NULL,
	  |	&Свойство,
	  |	&Значение,
	  |	ЛОЖЬ
	  |ИЗ
	  |	Справочник.Номенклатура КАК СправочникНоменклатура
	  |ГДЕ
	  |	ИСТИНА В
	  |			(ВЫБРАТЬ ПЕРВЫЕ 1
	  |				ИСТИНА
	  |			ИЗ
	  |				ОтборНоменклатуры КАК Товары
	  |			ГДЕ
	  |				Товары.Номенклатура = СправочникНоменклатура.Ссылка)
	  |
	  |ИНДЕКСИРОВАТЬ ПО
	  |	Номенклатура,
	  |	Характеристика
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ
	  |	ОтборНоменклатуры.Номенклатура КАК Номенклатура,
	  |	ОтборНоменклатуры.Характеристика КАК Характеристика,
	  |	NULL КАК Упаковка,
	  |	NULL КАК Штрихкод
	  |ПОМЕСТИТЬ Штрихкоды
	  |ИЗ
	  |	ОтборНоменклатуры КАК ОтборНоменклатуры
	  |
	  |ИНДЕКСИРОВАТЬ ПО
	  |	Номенклатура
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ
	  |	СправочникНоменклатура.Ссылка КАК Номенклатура,
	  |	NULL КАК Характеристика,
	  |	&ТНВЭД КАК Наименование,
	  |	NULL КАК Код,
	  |	"""" КАК Описание
	  |ПОМЕСТИТЬ Классификаторы
	  |ИЗ
	  |	Справочник.Номенклатура КАК СправочникНоменклатура
	  |ГДЕ
	  |	ИСТИНА В
	  |			(ВЫБРАТЬ ПЕРВЫЕ 1
	  |				ИСТИНА
	  |			ИЗ
	  |				ОтборНоменклатуры КАК ОтборНоменклатуры
	  |			ГДЕ
	  |				ОтборНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ ПЕРВЫЕ 1
	  |	&ПримерПоляТипаСтрока КАК ПримерДополнительногоОбщегоПоляТипаСтрока,
	  |	100 КАК ПримерДополнительногоОбщегоПоляТипаЧисло,
	  |	ИСТИНА КАК ПримерДополнительногоОбщегоПоляТипаБулево,
	  |	ДАТАВРЕМЯ(2020, 2, 20, 20, 20, 20) КАК ПримерДополнительногоОбщегоПоляТипаДата
	  |ИЗ
	  |	Справочник.Номенклатура КАК ДополнительныеДанные_
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ
	  |	ДополнительныеДанные_ПримерДополнительныхСведений_Организации.Наименование КАК Наименование,
	  |	ДополнительныеДанные_ПримерДополнительныхСведений_Организации.ИНН КАК ИНН,
	  |	ДополнительныеДанные_ПримерДополнительныхСведений_Организации.КонтактнаяИнформация.(
	  |		Тип КАК Тип,
	  |		Вид КАК Вид,
	  |		Представление КАК Представление,
	  |		Страна КАК Страна,
	  |		Регион КАК Регион,
	  |		Город КАК Город,
	  |		АдресЭП КАК АдресЭП,
	  |		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	  |		НомерТелефона КАК НомерТелефона,
	  |		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
	  |		Вид КАК ВидДляСписка,
	  |		Значение КАК Значение
	  |	) КАК КонтактнаяИнформация
	  |ИЗ
	  |	Справочник.Организации КАК ДополнительныеДанные_ПримерДополнительныхСведений_Организации";
	
	Запрос.УстановитьПараметр("ПримерПоляТипаСтрока", НСтр("ru = 'Пример значения типа строка'"));
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("ПустаяКолонка", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	Запрос.УстановитьПараметр("ПустаяТаблица", ПустаяТаблица);
	ДобавитьРеквизитыНоменклатурыВЗапрос(Запрос);

КонецПроцедуры

// Позволяет переопределить пользовательское представление формализованных реквизитов выгрузки номенклатуры,
//  а так же связать формализованные реквизиты с публикуемыми, см. ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации.
// Множества ПубликуемыеРеквизиты и ФормализованныеРеквизиты решают различные задачи и могут пересекаться,
//  поэтому, для корректной работы библиотеки нужно указать их связь, если она есть.
// В этом случае в качестве значения ключа структуры ФормализованныеРеквизиты подставляется ключ из соответствия ПубликуемыеРеквизиты.
// То есть, если формализованный реквизит одновременно является публикуемым, то заполнение значения ключа обязательно.
// Для остальных реквизитов указание представления не обязательно.
// Если представление не переопределено, то при выводе в интерфейс будет поставлено библиотечное значение представления "по умолчанию".
// Представления формализованных реквизитов используются в форме ВыгружаемыеРеквизиты.
// Состав ключей параметра ФормализованныеРеквизиты ограничивается на основании текста запроса ИнициализацияЗапросаВыборкиДанныхДляВыгрузки.
// Например, если реквизит Производитель в запросе не описан, то 
//  * в форму ВыгружаемыеРеквизиты он не выводится;
//  * в составе параметра ФормализованныеРеквизиты ключа "Производитель" не будет.
//
// Параметры:
//  ФормализованныеРеквизиты - структура - см. РаботаСНоменклатуройСлужебный.ФормализованныеРеквизитыНоменклатурыДляВыгрузки
//
// Пример:
//  1. ФормализованныеРеквизиты.Артикул = Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Артикул; - связывает формализованный
//       реквизит с публикуемым.
//  2. ФормализованныеРеквизиты.ТипНоменклатуры = НСтр("ru = 'Тип номенклатуры'")); - задает пользовательское представление реквизита.
//
Процедура ФормализованныеРеквизитыНоменклатурыДляВыгрузки(ФормализованныеРеквизиты) Экспорт
	
	ФормализованныеРеквизиты.Артикул = Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Артикул;

КонецПроцедуры

// Формирует перечень доступных для выгрузки дополнительных реквизитов Номенклатуры.
// Если в конфигурации поддерживается группировка доп. реквизитов по видам номенклатуры,
//  то это должно быть отражено в результатах работы метода путем заполнения соответствующих колонок. 
// В противном случае все доп. реквизиты возвращаются как общие, без указания вида номенклатуры.
// Общие доп. реквизиты должны быть описаны всегда, независимо от значения параметра ВидыНоменклатуры.
// 
// Параметры:
//  ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты номенклатуры.
//    Колонки:
//    * Свойство - Произвольный - доп. реквизит.
//    * Синоним - Строка - пользовательское представление доп.реквизита.
//    * ТипЗначения - ОписаниеТипов.
//    * ВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - вид номенклатуры (соответствует набору доп.реквизитов). Для общих реквизитов не заполняется.
//    * ВидНоменклатурыНаименование - Строка - пользовательское представление набора доп.реквизитов. Пример: "Столы (вид номенклатуры)".
//    * ИспользоватьХарактеристики - Булево - признак использования характеристик по виду номенклатуры. Для общих реквизитов значение Ложь.
//    Если виды номенклатуры не используются, достаточно заполнить только первые 2 колонки.
//  ВидыНоменклатуры - СписокЗначений, Неопределено - виды номенклатуры, для которых нужно получить доп.реквизиты.
//                     Если передано Неопределено, то нужно получить доп.реквизиты по всем видам номенклатуры без отбора.
// 
Процедура ДополнительныеРеквизитыНоменклатурыДляВыгрузки(ДополнительныеРеквизиты, ВидыНоменклатуры) Экспорт
	
	ДополнительныеРеквизиты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизиты.Ссылка КАК Свойство,
	               |	ДополнительныеРеквизиты.Заголовок КАК Синоним,
	               |	ДополнительныеРеквизиты.ТипЗначения КАК ТипЗначения,
	               |	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка) КАК ВидНоменклатуры,
	               |	&ПояснениеОбщие КАК ВидНоменклатурыНаименование,
	               |	ЛОЖЬ КАК ИспользоватьХарактеристики
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
	               |ГДЕ
	               |	ДополнительныеРеквизиты.Ссылка В
	               |			(ВЫБРАТЬ
	               |				Наборы.Свойство
	               |			ИЗ
	               |				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	               |			ГДЕ
	               |				Наборы.Ссылка = &НаборСвойств)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПВХДополнительныеРеквизиты.Ссылка,
	               |	ПВХДополнительныеРеквизиты.Заголовок,
	               |	ПВХДополнительныеРеквизиты.ТипЗначения,
	               |	ВидыНоменклатуры.Ссылка,
	               |	ВидыНоменклатуры.Наименование + &ПояснениеВид,
	               |	ВидыНоменклатуры.ИспользоватьХарактеристики
	               |ИЗ
	               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	               |		ПО ВидыНоменклатуры.НаборСвойств = Наборы.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ПВХДополнительныеРеквизиты
	               |		ПО (Наборы.Свойство = ПВХДополнительныеРеквизиты.Ссылка)
	               |ГДЕ
	               |	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)";
	
	Если ВидыНоменклатуры = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	Запрос.УстановитьПараметр("НаборСвойств", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
	Запрос.УстановитьПараметр("ПояснениеВид", СтрШаблон(НСтр("ru = '%1(Вид номенклатуры)'"), " "));
	Запрос.УстановитьПараметр("ПояснениеОбщие", НСтр("ru = 'Общие доп.реквизиты'"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты.Добавить(), Выборка);
	КонецЦикла;

КонецПроцедуры

// Определяет товарную группу 1С:Номенклатуры для объектов информационной базы - номенклатуры или видов номенклатуры.
// 
// Параметры:
//  ТоварныеГруппыНоменклатуры - Соответствие - где:
//   * Ключ - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой, ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - номенклатура или вид номенклатуры.
//   * Значение - Строка - имя товарной группы 1С:Номенклатуры, например: "ЛегкаяПромышленность", "МолочнаяПродукция",
//                       так же см. ключи РаботаСНоменклатурой.ТоварныеГруппыСервиса()
//
Процедура ПолучитьТоварныеГруппыНоменклатуры(ТоварныеГруппыНоменклатуры) Экспорт
	
КонецПроцедуры

// Формирует пользовательское представление товарных групп сервиса 1С:Номенклатура
// 
// Параметры:
//  ЗаголовокТоварныхГрупп - Строка - представление самого термина "товарная группа" в именительном падеже единственном числе, например "особенность учета".
//  ТоварныеГруппыСервиса - Структура - ключи - имена товарных групп 1С:Номенклатуры, например: "ЛегкаяПромышленность", "МолочнаяПродукция",
//                                      значения - пользовательские представления товарных групп, например: "Товары легкой промышленности и одежда",
//                                      так же см. РаботаСНоменклатурой.ТоварныеГруппыСервиса()
//
Процедура ПредставлениеТоварныхГрупп(ЗаголовокТоварныхГрупп, ТоварныеГруппыСервиса) Экспорт 
	
КонецПроцедуры

// Формирует текст запроса, на основе которого создается компоновщик настроек СКД для отбора номенклатуры с характеристиками.
//
// Требования к запросу:
//   Все поля отборов должны быть описаны в фигурных скобках {} секции инструкций компоновки.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//    Поля результата запроса:
//    * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - номенклатура.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - характеристика номенклатуры.
//
Процедура ИнициализацияЗапросаОтбораНоменклатурыСХарактеристиками(ТекстЗапроса) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Не используется
Процедура ИнициализацияСпискаСопоставленияПоНоменклатуре(Список) Экспорт
	
КонецПроцедуры

// Устарела. Не используется
Процедура ИнициализацияСпискаСопоставленияПоИерархии(Список) Экспорт
	
КонецПроцедуры

// Устарела. Не используется
Процедура ИнициализацияСпискаСопоставленияНоменклатуры(Список) Экспорт
	
КонецПроцедуры

// Устарела. Не используется
Процедура ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств) Экспорт
	
КонецПроцедуры

// Устарела. Не используется
Процедура ПустаяСсылкаРеквизитаОбъектаДляСопоставления(Ссылка) Экспорт
	
КонецПроцедуры

// Устарела. Не используется
Процедура ПолучитьДанныеСопоставленияРеквизитов(ОбъектСопоставления, СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий) Экспорт
	
КонецПроцедуры

// Устарела. Не используется
Процедура ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(Запрос) Экспорт
	
КонецПроцедуры

// Устарела. Не используется
Процедура ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры(Знач ОбъектСопоставления, Знач РеквизитОбъекта, Знач ТипЗначения, ЗначенияРеквизита) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение значения ставки НДС по идентификатору.
//
// Параметры:
//  Значение - Строка - значение ставки НДС (-, 10, 18, 20).
//  Ссылка	 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//
Процедура ПреобразоватьСтавкуНДССервиса(Знач Значение, Ссылка)
	
	Если Значение = "10" Тогда
		ЗначениеПеречисления = Перечисления.СтавкиНДС.НДС10;
		Ставка = 10;
	ИначеЕсли Значение = "18" Тогда
		ЗначениеПеречисления = Перечисления.СтавкиНДС.НДС18;
		Ставка = 18;
	ИначеЕсли Значение = "20" Тогда
		ЗначениеПеречисления = Перечисления.СтавкиНДС.НДС20;
		Ставка = 20;
	ИначеЕсли Значение = "-" Тогда
		ЗначениеПеречисления = Перечисления.СтавкиНДС.БезНДС;
		Ставка = 0;
	Иначе
		ЗначениеПеречисления = Перечисления.СтавкиНДС.ПустаяСсылка();
		Ставка = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтавкиНДС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтавкиНДС КАК СтавкиНДС
	               |ГДЕ
	               |	СтавкиНДС.ПеречислениеСтавкаНДС = &ПеречислениеСтавкаНДС
	               |	И СтавкиНДС.Ставка = &Ставка";
	Запрос.УстановитьПараметр("ПеречислениеСтавкаНДС", ЗначениеПеречисления);
	Запрос.УстановитьПараметр("Ставка", Ставка);
	
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда 
		Ссылка = Справочники.СтавкиНДС.ПустаяСсылка();
	Иначе
		Выборка = РезЗапроса.Выбрать();
		Выборка.Следующий();
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Преобразование типа объекта сервиса в объект прикладного решения.
//
// Параметры:
//  Значение	 - Строка - тип объекта сервиса.
//  Результат	 - Произвольный - преобразованный тип.
//
Процедура ПреобразоватьТипНоменклатурыСервиса(Знач Значение, Результат)
	
	Если Значение = "Услуга" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Услуга;
	ИначеЕсли Значение = "Товар" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Товар;
	Иначе 
		Результат = Перечисления.ТипыНоменклатуры.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИсключительнуюБлокировкуПоСсылке(Ссылка)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНоменклатуры(НоменклатураОбъект, ДанныеЗаполнения)
	
	// Подготовка данных
	
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	СсылкаНаЕдиницуИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.ЕдиницаИзмерения, СсылкаНаЕдиницуИзмерения);
	
	// Заполнение объекта
	
	НаименованиеПолное = ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), 
		ДанныеЗаполнения.НаименованиеДляПечати, 
		ДанныеЗаполнения.Наименование);
	
	НоменклатураОбъект.Наименование       = ДанныеЗаполнения.Наименование;
	НоменклатураОбъект.Артикул            = ДанныеЗаполнения.Артикул;
	НоменклатураОбъект.НаименованиеПолное = НаименованиеПолное;
	НоменклатураОбъект.ЕдиницаИзмерения   = СсылкаНаЕдиницуИзмерения;
	НоменклатураОбъект.СтавкаНДС          = СтавкаНДС;
	НоменклатураОбъект.Описание           = НеформализованноеОписаниеНоменклатуры(ДанныеЗаполнения);
	ВидНоменклатуры = ВидНоменклатурыПоУмолчанию(ДанныеЗаполнения);
	НоменклатураОбъект.ВидНоменклатуры    = ВидНоменклатуры;
	НоменклатураОбъект.ТипНоменклатуры    = ВидНоменклатуры.ТипНоменклатуры;
КонецПроцедуры

// Поиск и создание единицы измерения, на основании данных сервиса
//
// Параметры:
//  ЕдиницаИзмеренияСервиса	 - Структура - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, колонка ЕдиницаИзмерения.
//  ЕдиницуИзмеренияСсылка	 - Справочник.Ссылка - ссылка на созданную единицу измерения.
//
Процедура ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка) 
	
	// Поиск элемента в базе
	
	ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка);
	
	Если ЕдиницуИзмеренияСсылка <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Создание элемента если не найдено
	
	ЕдиницуИзмеренияСсылка = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	
	ЕдиницуИзмеренияСсылка.Наименование = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	
	ЕдиницуИзмеренияСсылка.Записать();
	
КонецПроцедуры

// Поиск единицы измерения в информационной базе, на основании данных сервиса
//
// Параметры:
//  ЕдиницаИзмеренияСервиса	 - Структура - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, колонка ЕдиницаИзмерения.
//  ЕдиницуИзмеренияСсылка	 - Справочник.Ссылка - ссылка на созданную единицу измерения.
//
Процедура ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка)
	
	// Поиск по коду
	
	КодОКЕИ = "";
	СсылкаНаЕдиницуИзмерения = Неопределено;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ", КодОКЕИ) Тогда
		СсылкаНаЕдиницуИзмерения = Справочники.ЕдиницыИзмерения.ЕдиницаИзмеренияПоКоду(КодОКЕИ);
	КонецЕсли;
	
	Если СсылкаНаЕдиницуИзмерения <> Неопределено Тогда
		ЕдиницуИзмеренияСсылка = СсылкаНаЕдиницуИзмерения;
		Возврат ;
	КонецЕсли;
	
	// Поиск по наименованию
	
	НаименованиеЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	
	Если НЕ ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Наименование = &Наименование
	|	И ЕдиницыИзмерения.Код = """"";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеЕдиницыИзмерения);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		ЕдиницуИзмеренияСсылка = Выгрузка[0].Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает неформализованное описание номенклатуры в виде текста.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - Данные номенклатуры, полученные из сервиса.
// 
// Возвращаемое значение:
//  Строка - Текстовое описание номенклатуры.
//
Функция НеформализованноеОписаниеНоменклатуры(Знач ДанныеЗаполнения)
	
	ОписаниеНоменклатуры = "";
	
	СодержимоеОписания = Новый Массив;
	СодержимоеОписания.Добавить(ДанныеЗаполнения.Описание);
	СодержимоеОписания.Добавить(ПредставлениеПроизводителяНоменклатуры(ДанныеЗаполнения));
	СодержимоеОписания.Добавить(ПредставлениеМерныхХарактеристикНоменклатуры(ДанныеЗаполнения));
	
	Для Каждого ФрагментОписания Из СодержимоеОписания Цикл
		
		Если Не ПустаяСтрока(ФрагментОписания) Тогда
			ОписаниеНоменклатуры = ?(ПустаяСтрока(ОписаниеНоменклатуры), ФрагментОписания,
			ОписаниеНоменклатуры + Символы.ПС + ФрагментОписания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеНоменклатуры;
	
КонецФункции

Функция ВидНоменклатурыПоУмолчанию(ДанныеЗаполнения)
	
	Результат = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ДанныеЗаполнения, "ВидНоменклатурыПоУмолчанию")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию) Тогда
		Результат = ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеЗаполнения.Тип) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеЗаполнения.Тип, ТипНоменклатуры);
	
	Если Не ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры";
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1
		ИЛИ Не Выборка.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = Выборка.Ссылка;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеПроизводителяНоменклатуры(Знач ДанныеЗаполнения)
	
	ПредставлениеПроизводителя = "";
	
	Если НЕ (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "Производитель")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Производитель)) Тогда
		Возврат ПредставлениеПроизводителя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Производитель) Тогда
		
		НаименованиеПроизводителя = "";
		ДанныеЗаполнения.Производитель.Свойство("Наименование", НаименованиеПроизводителя);
		
		Если ЗначениеЗаполнено(НаименованиеПроизводителя) Тогда
			
			ИНН = "";
			КПП = "";
			ДанныеЗаполнения.Производитель.Свойство("ИНН", ИНН);
			ДанныеЗаполнения.Производитель.Свойство("КПП", КПП);
			
			Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда
				ПредставлениеПроизводителя = СтрШаблон(НСтр("ru = 'Производитель: %1 (ИНН/КПП: %2/%3)'"),
				НаименованиеПроизводителя, ИНН, КПП);
			ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
				ПредставлениеПроизводителя = СтрШаблон(НСтр("ru = 'Производитель: %1 (ИНН %2)'"),
				НаименованиеПроизводителя, ИНН);
			Иначе
				ПредставлениеПроизводителя = СтрШаблон(НСтр("ru = 'Производитель: %1'"), НаименованиеПроизводителя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеПроизводителя;
	
КонецФункции

Функция ПредставлениеМерныхХарактеристикНоменклатуры(Знач ДанныеЗаполнения)
	
	ПредставлениеМерныхХарактеристик = "";
	
	МерныеХарактеристики = Новый Соответствие;
	МерныеХарактеристики.Вставить("Вес",                 НСтр("ru = 'Вес'"));
	МерныеХарактеристики.Вставить("Длина",               НСтр("ru = 'Длина'"));
	МерныеХарактеристики.Вставить("Площадь",             НСтр("ru = 'Площадь'"));
	МерныеХарактеристики.Вставить("Объем",               НСтр("ru = 'Объем'"));
	МерныеХарактеристики.Вставить("КоличествоВУпаковке", НСтр("ru = 'Количество в упаковке'"));
	
	Для Каждого МернаяХарактеристика Из МерныеХарактеристики Цикл
		
		ТекущееПредставление = ПредставлениеМернойХарактеристикиНоменклатуры(ДанныеЗаполнения, МернаяХарактеристика);
		
		Если Не ПустаяСтрока(ТекущееПредставление) Тогда
			ПредставлениеМерныхХарактеристик = ?(ПустаяСтрока(ПредставлениеМерныхХарактеристик), ТекущееПредставление,
			ПредставлениеМерныхХарактеристик + Символы.ПС + ТекущееПредставление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставлениеМерныхХарактеристик;
	
КонецФункции

Функция ПредставлениеМернойХарактеристикиНоменклатуры(Знач ДанныеЗаполнения, Знач МернаяХарактеристика)
	
	ПредставлениеМернойХарактеристики = "";
	
	ИмяМернойХарактеристики       = МернаяХарактеристика.Ключ;
	ЗаголовокМернойХарактеристики = МернаяХарактеристика.Значение;
	
	Если ДанныеЗаполнения[ИмяМернойХарактеристики].Свойство("ЧислительКратности") Тогда
		ЗначениеМернойХарактеристики = ДанныеЗаполнения[ИмяМернойХарактеристики].ЧислительКратности;
	ИначеЕсли ДанныеЗаполнения[ИмяМернойХарактеристики].Свойство("Количество") Тогда
		ЗначениеМернойХарактеристики = ДанныеЗаполнения[ИмяМернойХарактеристики].Количество;
	Иначе
		ЗначениеМернойХарактеристики = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеМернойХарактеристики) Тогда
		
		НаименованиеЕдиницыИзмерения = ДанныеЗаполнения[ИмяМернойХарактеристики].ЕдиницаИзмерения.Наименование;
		
		ПредставлениеМернойХарактеристики = СтрШаблон("%1: %2 %3", ЗаголовокМернойХарактеристики,
		Строка(ЗначениеМернойХарактеристики), НаименованиеЕдиницыИзмерения);
		
	КонецЕсли;
	
	Возврат ПредставлениеМернойХарактеристики;
	
КонецФункции

Процедура ЗаполнитьЗначенияРеквизитовХарактеристики(ЗначенияДополнительныхРеквизитов, Характеристика)
	
	ЗначенияДополнительныхРеквизитов.Очистить();
	
	Для каждого Свойство Из Характеристика.ДополнительныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(Свойство.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Свойство.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(Свойство);
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ДвоичныеДанныеПоАдресуURL(АдресURL)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, АдресРесурса, Порт, Таймаут, ЗащищенноеСоединение, Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = 
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
		ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

// При объединении категорий в одну, метода заполняет представления дополнительных реквизитов на форма.
// Таким образом, до записи вида номенклатуры и до создания реквизитов, пользователь сможет увидеть 
// список реквизитов, которые будут созданы.
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения - форма вида номенклатуры.
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначения - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//
Процедура ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения)
	
	Объект = Форма.Объект;
	
	// Заполнение дополнительных реквизитов и реквизитов характеристик.	
	ДанныеДополнительныхРеквизитов = РаботаСНоменклатурой.ОбъединитьДанныеДополнительныхРеквизитов(ДанныеИнтерактивногоЗаполнения);
	
	Для каждого ТекущийРеквизит Из ДанныеДополнительныхРеквизитов.ДополнительныеРеквизиты Цикл
		НоваяСтрока = Форма.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = ТекущийРеквизит.Наименование;
	КонецЦикла;
	
	Для каждого ТекущийРеквизит Из ДанныеДополнительныхРеквизитов.Характеристики.ДополнительныеРеквизиты Цикл
		НоваяСтрока = Форма.ДополнительныеРеквизитыХарактеристик.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = ТекущийРеквизит.Наименование;
	КонецЦикла;
	
	// Установка варианта ведения учета характеристик.
	Если Форма.ДополнительныеРеквизитыХарактеристик.Количество() > 0 Тогда
		Объект.ИспользоватьХарактеристики = Истина;	
	КонецЕсли;
	
	// Блокировка дополнительных реквизитов.
	Форма.Элементы.ДополнительныеРеквизиты.ТолькоПросмотр = Истина;
	Форма.Элементы.ДополнительныеРеквизитыХарактеристик.ТолькоПросмотр = Истина
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПриИнтерактивномСоздании(Форма, ДанныеЗаполнения)
	
	ЗаполнитьРеквизитыНоменклатуры(Форма.Объект, ДанныеЗаполнения);
	
	Для Каждого ЭлементКоллекции Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.Значение)
			И Не ЗначениеЗаполнено(ЭлементКоллекции.ЗначениеИнформационнойБазы) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Форма.Объект.ДополнительныеРеквизиты.Добавить();
		
		НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитИнформационнойБазы;
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.ЗначениеИнформационнойБазы) Тогда
			НоваяСтрока.Значение = ЭлементКоллекции.ЗначениеИнформационнойБазы;
		Иначе
			НоваяСтрока.Значение = ЭлементКоллекции.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение дополнительных реквизитов требуется всегда, даже при отсутствии значений, 
	// для отображения дополнительных реквизитов на форме
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Форма.Объект);
	
КонецПроцедуры

// Получение количества дополнительных реквизитов у объекта
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения - форма номенклатуры.
//
//  Возвращаемое значение:
//  Число - полученные данные.
//
Функция КоличествоДополнительныхРеквизитов(Форма)
	
	Проверка = Новый Структура("Свойства_ОписаниеДополнительныхРеквизитов", Неопределено);
	ЗаполнитьЗначенияСвойств(Проверка, Форма);
	
	Если Проверка.Свойства_ОписаниеДополнительныхРеквизитов = Неопределено Тогда
		Ответ = 0;
	Иначе
		Ответ = Форма.Свойства_ОписаниеДополнительныхРеквизитов.Количество();
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Дополнение в запрос источников по дополнительным реквизитам номенклатуры.
//
// Параметры:
//   Запрос - Запрос - основной запрос сбора данных.
//
Процедура ДобавитьРеквизитыНоменклатурыВЗапрос(Запрос)
	
	БлокРеквизитовШаблон = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка,
	|	NULL,
	|	&Свойство,
	|	&Значение,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОтборНоменклатуры КАК Товары
	|			ГДЕ
	|				Товары.Номенклатура = СправочникНоменклатура.Ссылка)";
	
	ДоступныеДляПубликацииРеквизиты = Новый Соответствие;
	ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ДоступныеДляПубликацииРеквизиты);
	
	МассивПодзапросов = Новый Массив;
	СчетчикРеквизитов = 0;
	Для каждого СвойстваРеквизита Из ДоступныеДляПубликацииРеквизиты Цикл
		
		Если Запрос.Параметры.ИсключенныеДополнительныеРеквизиты.Найти(СвойстваРеквизита.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтрокой = XMLСтрока(СчетчикРеквизитов);
		ПутьКДанным   = СтрЗаменить(СвойстваРеквизита.Значение.ПутьКДанным, "Номенклатура.", "СправочникНоменклатура.");
		СчетчикРеквизитов = СчетчикРеквизитов + 1;
		ТекстПодзапроса = БлокРеквизитовШаблон;
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&Значение", ПутьКДанным);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&Свойство", "&Свойство" + ИндексСтрокой);
		
		Запрос.УстановитьПараметр("Свойство" + ИндексСтрокой, СвойстваРеквизита.Ключ);
		
		Если СвойстваРеквизита.Значение.Свойство("ПустоеЗначение") Тогда
			ТекстПодзапроса = ТекстПодзапроса + Символы.ПС
			+ "И НЕ "+ ПутьКДанным + " = &ПустоеЗначение" + ИндексСтрокой;
			Запрос.УстановитьПараметр("ПустоеЗначение" + ИндексСтрокой,
			СвойстваРеквизита.Значение.ПустоеЗначение);
		КонецЕсли;
		
		МассивПодзапросов.Добавить(ТекстПодзапроса);
		
	КонецЦикла;
	
	БлокРеквизитовПодстановка = СтрСоединить(МассивПодзапросов, Символы.ПС + Символы.ПС);
	
	// Если реквизиты не найдены, удалить БлокРеквизитовШаблон.
	Если ПустаяСтрока(БлокРеквизитовПодстановка) Тогда
		БлокРеквизитовПодстановка = "";
	КонецЕсли;
	
	Если СтрЧислоВхождений(Запрос.Текст, БлокРеквизитовШаблон) = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка компоновки запроса получения данных номенклатуры.'");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, БлокРеквизитовШаблон, БлокРеквизитовПодстановка);
	
КонецПроцедуры
#КонецОбласти