#Область ПрограммныйИнтерфейс

// Процедура - Рассчитать продолжительность по операциям
//
// Параметры:
//		ВерсияТехКарты - СправочникОбъект.торо_ТехКарты - версия тех. карты ремонта.
//		ПоНормамТО - Булево - выполнять ли расчет по нормам ТО.
//
Процедура РассчитатьПродолжительностьПоОперациям(ВерсияТехКарты, ПоНормамТО = Ложь) Экспорт
	
	Продолжительность = 0;
	Продолжительность = РассчитатьПродолжительность(ВерсияТехКарты, ПоНормамТО);
	
	ТекстПродолжительности = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Продолжительность);
	
	ВерсияТехКарты.НормаВремени = Продолжительность;
	ВерсияТехКарты.НормаВремениТекст = ТекстПродолжительности;
	
КонецПроцедуры

// Процедура - Рассчитать продолжительность по трудозатратам.
//
// Параметры:
//		ВерсияТехКарты - СправочникОбъект.торо_ТехКарты - версия тех. карты ремонта.
//
Процедура РассчитатьПродолжительностьПоТрудозатратам(ВерсияТехКарты) Экспорт
	
	Продолжительность = РассчитатьПродолжительностьВложеннойТехКартыПоТрудозатратам(ВерсияТехКарты);
	
	ТекстПродолжительности = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Продолжительность);
	
	ВерсияТехКарты.НормаВремени = Продолжительность;
	ВерсияТехКарты.НормаВремениТекст = ТекстПродолжительности;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьВерсииТехКартНаОдинУровеньВыше(ВерсияТехКарты) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_ВерсииТехКарт.ИдентификаторТехКарты КАК ИдентификаторТехКарты
	|ПОМЕСТИТЬ ВТ_ИдентификаторТехКарты
	|ИЗ
	|	РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|ГДЕ
	|	торо_ВерсииТехКарт.ТехКарта = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СоставИерархическихТехКартРемонтов.ТехКарта КАК ТехКарта
	|ПОМЕСТИТЬ ВсеТехКартыВерхнегоУровня
	|ИЗ
	|	РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
	|ГДЕ
	|	торо_СоставИерархическихТехКартРемонтов.Состав = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТехКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеТехКартыВерхнегоУровня.ТехКарта КАК ТехКарта
	|ИЗ
	|	ВсеТехКартыВерхнегоУровня КАК ВсеТехКартыВерхнегоУровня
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИдентификаторТехКарты КАК ВТ_ИдентификаторТехКарты
	|			ПО торо_ТехКартыСписокОпераций.Операция = ВТ_ИдентификаторТехКарты.ИдентификаторТехКарты
	|		ПО ВсеТехКартыВерхнегоУровня.ТехКарта = торо_ТехКартыСписокОпераций.Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ВерсияТехКарты);
	
	МассивВерсий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТехКарта");
	
	Возврат МассивВерсий;
	
КонецФункции

// Обновляет флаги наличия опасных операций в тех. карте при изменении флага в одной из вложенных операций.
//
// Параметры:
//		Выборка - ВыборкаИзРезульатаЗапрос - Выборка тех карт с полями ТехКарта, СодержитОпасныеОперации,
//						СодержитРаботыПовышеннойОпасности, ДатаПринятия. Должна сожержать только тех. карты,
//                непосредственно содержашие данную операцию. Остальные будут обновлены рекурсивно.
//		СодержитОпасныеОперации - Булево - признак опасной операции для текущей операции.
//		СодержитРаботыПовышеннойОпасности - Булево - признак работы повышенной опасности для текущей операции.
//
Процедура ОбновитьНаличиеОпасныхОперацийВТехКартах(ВыборкаТехКарт, СодержитОпасныеОперации, СодержитРаботыПовышеннойОпасности) Экспорт

	// Транзация не нужна, т.к. вызывается из тарнзакции записи тех. карты/тех. операции.
	
	Пока ВыборкаТехКарт.Следующий() Цикл
		ТехКартаОбъект = ВыборкаТехКарт.ТехКарта.ПолучитьОбъект();
		
		Если СодержитОпасныеОперации Тогда
			
			ТехКартаОбъект.СодержитОпасныеОперации = Истина;
			
		ИначеЕсли ВыборкаТехКарт.СодержитОпасныеОперации Тогда
			
			МассивОпераций = Новый Массив;
			Для каждого Стр Из ТехКартаОбъект.СписокОпераций Цикл
				МассивОпераций.Добавить(Стр.Операция);
			КонецЦикла; 
			
			ТехКартаОбъект.СодержитОпасныеОперации = ПроверитьНаличиеОпасныхОпераций(МассивОпераций, ВыборкаТехКарт.ДатаПринятия);
			
		КонецЕсли;
		
		Если СодержитРаботыПовышеннойОпасности Тогда
			
			ТехКартаОбъект.СодержитРаботыПовышеннойОпасности = Истина;
			
		ИначеЕсли ВыборкаТехКарт.СодержитРаботыПовышеннойОпасности Тогда
			
			МассивОпераций = Новый Массив;
			Для каждого Стр Из ТехКартаОбъект.СписокОпераций Цикл
				МассивОпераций.Добавить(Стр.Операция);
			КонецЦикла;
			
			ТехКартаОбъект.СодержитРаботыПовышеннойОпасности = ПроверитьНаличиеРаботПовышеннойОпасности(МассивОпераций, ВыборкаТехКарт.ДатаПринятия);
			
		КонецЕсли;
		
		ТехКартаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры	

Функция ПроверитьНаличиеОпасныхОпераций(Операции, ДатаПринятия) Экспорт
	
	флЕстьОпаснаяОперация = Ложь;
	
	Для каждого СтрокаМассива Из Операции Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Если СтрокаМассива.Опасная Тогда
				флЕстьОпаснаяОперация = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			ВерсияТК = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаМассива, ДатаПринятия);
			Если ЗначениеЗаполнено(ВерсияТК) И ВерсияТК.СодержитОпасныеОперации Тогда
				флЕстьОпаснаяОперация = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флЕстьОпаснаяОперация;
	
КонецФункции

Функция ПроверитьНаличиеРаботПовышеннойОпасности(Операции, ДатаПринятия) Экспорт
	
	флЕстьРаботаПовышеннойОпасности = Ложь;
	
	Для каждого СтрокаМассива Из Операции Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Если СтрокаМассива.РаботаПовышеннойОпасности Тогда
				флЕстьРаботаПовышеннойОпасности = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			ВерсияТК = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаМассива, ДатаПринятия);
			Если ЗначениеЗаполнено(ВерсияТК) И ВерсияТК.СодержитРаботыПовышеннойОпасности Тогда
				флЕстьРаботаПовышеннойОпасности = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флЕстьРаботаПовышеннойОпасности;
	
КонецФункции

#Область ПараллельноеВыполнениеТОТК

Процедура ДобавитьУсловноеОформлениеДляПараллельныхТОТК(Форма, ИмяЭлементаФорма = "ДеревоРемонтныхРабот", ИмяРеквизита = "ДеревоРемонтныхРабот") Экспорт
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы[ИмяЭлементаФорма].Имя);
	
	Группа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".ID_ПараллельнойОперации");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ID_ПараллельнойОперации");
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".ID_ПараллельнойОперации");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	Шрифт = Новый Шрифт(Форма.Элементы[ИмяЭлементаФорма].Шрифт,,, Истина);
    
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьПродолжительностьВложеннойТехКартыПоТрудозатратам(ВерсияТехКарты)
	
	Продолжительность = 0;
	ОбработанныеПараллельныеОперации = Новый Соответствие();
	
	Для каждого СтрокаОпераций Из ВерсияТехКарты.СписокОпераций Цикл
		Если ЗначениеЗаполнено(СтрокаОпераций.ID_ПараллельнойОперации) Тогда
			Если Не ОбработанныеПараллельныеОперации[СтрокаОпераций.ID_ПараллельнойОперации] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеПараллельныеОперации.Вставить(СтрокаОпераций.ID_ПараллельнойОперации, "");
			МаксимальнаяДлительность = 0;
			
			СтруктураПоиска = Новый Структура("ID_ПараллельнойОперации", СтрокаОпераций.ID_ПараллельнойОперации);
			МассивПараллельныхРабот = ВерсияТехКарты.СписокОпераций.НайтиСтроки(СтруктураПоиска);

			Для каждого НайденнаяСтрока Из МассивПараллельныхРабот Цикл
				Если ТипЗнч(НайденнаяСтрока.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					ДатаСреза = ?(ЗначениеЗаполнено(ВерсияТехКарты.ДатаПринятия), ВерсияТехКарты.ДатаПринятия, ТекущаяДата());
					ОперацияТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(НайденнаяСтрока.Операция, ДатаСреза);
					Если Не ЗначениеЗаполнено(ОперацияТехКарта) Тогда
						Продолжить;
					КонецЕсли;
				
					МаксимальнаяДлительность = Макс(МаксимальнаяДлительность, РассчитатьПродолжительностьВложеннойТехКартыПоТрудозатратам(ОперацияТехКарта));
				Иначе
					СтруктураПоиска = Новый Структура("ID", НайденнаяСтрока.ID);
					НайденныеСтроки = ВерсияТехКарты.ТрудовыеЗатраты.НайтиСтроки(СтруктураПоиска);

					ПродолжительностьТО = 0;
					
					Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
						 ПродолжительностьТО = ПродолжительностьТО + СтрокаТЧ.ВремяРаботы * СтрокаТЧ.Количество;
					КонецЦикла;
					 
					МаксимальнаяДлительность = Макс(МаксимальнаяДлительность, ПродолжительностьТО);
				КонецЕсли; 
			КонецЦикла; 
			
			Продолжительность = Продолжительность + МаксимальнаяДлительность;
		Иначе
			Если ТипЗнч(СтрокаОпераций.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				СтруктураПоиска = Новый Структура("ID", СтрокаОпераций.ID);
				НайденныеСтроки = ВерсияТехКарты.ТрудовыеЗатраты.НайтиСтроки(СтруктураПоиска);

				Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
					 Продолжительность = Продолжительность + СтрокаТЧ.ВремяРаботы * СтрокаТЧ.Количество;
				КонецЦикла;
			Иначе
				ДатаСреза = ?(ЗначениеЗаполнено(ВерсияТехКарты.ДатаПринятия), ВерсияТехКарты.ДатаПринятия, ТекущаяДата());
				ОперацияТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаОпераций.Операция, ДатаСреза);
				Если Не ЗначениеЗаполнено(ОперацияТехКарта) Тогда
					Продолжить;
				КонецЕсли;
				
				Продолжительность = Продолжительность + РассчитатьПродолжительностьВложеннойТехКартыПоТрудозатратам(ОперацияТехКарта);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Продолжительность;
	
КонецФункции

Функция РассчитатьПродолжительность(ВерсияТехКарты, ПоНормамТО = Ложь)
	
	Продолжительность = 0;
	ОбработанныеПараллельныеОперации = Новый Соответствие();
	
	Для каждого СтрокаОпераций Из ВерсияТехКарты.СписокОпераций Цикл
		Если ЗначениеЗаполнено(СтрокаОпераций.ID_ПараллельнойОперации) Тогда
			Если Не ОбработанныеПараллельныеОперации[СтрокаОпераций.ID_ПараллельнойОперации] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеПараллельныеОперации.Вставить(СтрокаОпераций.ID_ПараллельнойОперации, "");
			МаксимальнаяДлительность = 0;
			
			СтруктураПоиска = Новый Структура("ID_ПараллельнойОперации", СтрокаОпераций.ID_ПараллельнойОперации);
			МассивПараллельныхРабот = ВерсияТехКарты.СписокОпераций.НайтиСтроки(СтруктураПоиска);

			Для каждого НайдСтрока Из МассивПараллельныхРабот Цикл
				Если ТипЗнч(НайдСтрока.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					ДатаСреза = ?(ЗначениеЗаполнено(ВерсияТехКарты.ДатаПринятия), ВерсияТехКарты.ДатаПринятия, ТекущаяДата());
					ОперацияТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(НайдСтрока.Операция, ДатаСреза);
					
					МаксимальнаяДлительность = Макс(МаксимальнаяДлительность, ?(ПоНормамТО, ОперацияТехКарта.НормаВремени, НайдСтрока.НормаВремениВСекундах) * НайдСтрока.Количество);
				Иначе
					МаксимальнаяДлительность = Макс(МаксимальнаяДлительность, ?(ПоНормамТО, НайдСтрока.Операция.НормаВремени, НайдСтрока.НормаВремениВСекундах) * НайдСтрока.Количество);
				КонецЕсли; 
			КонецЦикла; 
			
			Продолжительность = Продолжительность + МаксимальнаяДлительность;
		Иначе
			Если ТипЗнч(СтрокаОпераций.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				ДатаСреза = ?(ЗначениеЗаполнено(ВерсияТехКарты.ДатаПринятия), ВерсияТехКарты.ДатаПринятия, ТекущаяДата());
				ВложеннаяТК = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаОпераций.Операция, ДатаСреза);
				Если Не ЗначениеЗаполнено(ВложеннаяТК) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			
			Продолжительность = Продолжительность + ?(ТипЗнч(СтрокаОпераций.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт")
													, ?(ПоНормамТО, ВложеннаяТК.НормаВремени, СтрокаОпераций.НормаВремениВСекундах) * СтрокаОпераций.Количество
													, ?(ПоНормамТО, СтрокаОпераций.Операция.НормаВремени, СтрокаОпераций.НормаВремениВСекундах) * СтрокаОпераций.Количество);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Продолжительность;
	
КонецФункции

#КонецОбласти
