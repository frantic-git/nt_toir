
////////////////////////////////////////////////////////////////////////////////
// торо_ЗаполнениеДокументов: процедуры и функции, получающие значения для подстановки в документы при их создании.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Представление наименования ОР исходя из кастроек константы "торо_ПредставлениеОРДляПечати".
//
// Параметры:
//  ОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта.
//
// Возвращаемое значение:
//  Строка - представление для печати.
//
Функция ПолучитьПредоставленияОРДляПечати(ОбъектРемонта) Экспорт 
	
	ПредставлениеОбъектаРемонта = Неопределено;
	
	Попытка	
		
		ЗначениеКонстантыОР = Константы.торо_НаименованиеОРДляПечати.Получить();
		
		Если НЕ ЗначениеЗаполнено(ЗначениеКонстантыОР)
			ИЛИ ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.НаименованиеОР Тогда
			ПредставлениеОбъектаРемонта = СокрЛП(ОбъектРемонта);
		ИначеЕсли ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.НаименованиеОР_КодОР Тогда
			ПредставлениеОбъектаРемонта = СокрЛП(ОбъектРемонта) + " (" + СокрЛП(ОбъектРемонта.Код) +")";
		ИначеЕсли ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.НаименованиеОР_ИнвНомОР Тогда
			ПредставлениеОбъектаРемонта = СокрЛП(ОбъектРемонта) + " (" + СокрЛП(ОбъектРемонта.ИнвентарныйНомер) +")";
		ИначеЕсли ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.ПолноеНаименованиеОР Тогда
			ПредставлениеОбъектаРемонта = торо_РаботаСИерархией20.ПолноеНаименованиеОР(ОбъектРемонта);
		ИначеЕсли ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.НаименованиеОР_ТехнНомОР Тогда
			ПредставлениеОбъектаРемонта = СокрЛП(ОбъектРемонта) + " (" + СокрЛП(ОбъектРемонта.ТехНомер) +")";
		ИначеЕсли ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.КакВСистеме Тогда 
			ПредставлениеОбъектаРемонта = СокрЛП(ОбъектРемонта);
		КонецЕсли;
		
	Исключение
		#Если Клиент Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПоказатьПредупреждение(Неопределено, ИнформацияОбОшибке.Причина.Описание);
		#КонецЕсли
	КонецПопытки;
	
	Возврат ПредставлениеОбъектаРемонта;
	
КонецФункции

// Представление наименования ВР исходя из кастроек константы "торо_ПредставлениеВРДляПечати".
//
// Параметры:
//  ВидРемонта - СправочникСсылка.торо_ВидыРемонта - вид ремонта.
//  ДляСтруктурыРЦ - Булево - Если Истина, то используется значение константы "торо_ПредставлениеВРДляСтруктурыРЦ".
//
// Возвращаемое значение:
//  Строка - представление для печати.
//
Функция ПолучитьПредоставленияВРДляПечати(ВидРемонта, ДляСтруктурыРЦ = Ложь) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		Возврат "";
	КонецЕсли;
		
	ВидРемонтаТекст = Неопределено;
		
	Если ДляСтруктурыРЦ Тогда
		ЗначениеКонстантыВР = Константы.торо_ПредставлениеВРДляСтруктурыРЦ.Получить();
	Иначе
		ЗначениеКонстантыВР = Константы.торо_ПредставлениеВРДляПечати.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеКонстантыВР) 
		ИЛИ ЗначениеКонстантыВР = Перечисления.торо_ВидыПредставленийВРДляПечати.КодВР Тогда
		ВидРемонтаТекст = СокрЛП(ВидРемонта.Код);
	ИначеЕсли ЗначениеКонстантыВР = Перечисления.торо_ВидыПредставленийВРДляПечати.НаименованиеВР Тогда
		ВидРемонтаТекст = СокрЛП(ВидРемонта);
	ИначеЕсли ЗначениеКонстантыВР = Перечисления.торо_ВидыПредставленийВРДляПечати.НаименованиеВР_КодВР Тогда
		ВидРемонтаТекст = СокрЛП(ВидРемонта) + " (" + СокрЛП(ВидРемонта.Код) +")";
	КонецЕсли;	
	
	Возврат ВидРемонтаТекст;
	
КонецФункции

// Процедура выполняет проверку на возможность ввода документа, на основании документа,
// переданного в параметре "Основание".
// Параметры:
//		Основание 			- ДокументСсылка - документ основание,
//		Отказ     			- Булево - параметр из обработчика события формы ПриСозданииНаСервере,
//		ВыводитьСообщение	- Булево - флаг вывода сообщения пользователю.
//		
Процедура ПроверитьВозможностьВводаНаОсновании(Основание, Отказ, ВыводитьСообщение = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Основание) И	ТипЗнч(Основание) <> Тип("Структура") И Не Основание.Проведен Тогда
		Если ВыводитьСообщение Тогда
			ТекстСообщения = НСтр("ru = 'Создание документа возможно только на основании проведенного документа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") 
		И ПолучитьФункциональнуюОпцию("торо_ИспользоватьФоновыйРасчетППР") 
		И торо_РасчетППР.ППРВОчередиНаРасчет(Основание) Тогда
		
		Если ВыводитьСообщение Тогда
			ШаблонСообщения = НСтр("ru = 'Создание документа невозможно, так как документ <%1> находится в очереди на фоновый расчет.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Основание);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Установка номера документа.
// Параметры:
//  Источник - ДокументОбъект - документ.
//  СтандартнаяОбработка - Булево - стандартная обработка события.
//  Префикс - Строка - префикс номера документа.
Процедура торо_УстановитьНомерДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	СтруктураСвойств = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, Источник);

	Префикс = ПолучитьПрефиксОрганизации(СтруктураСвойств.Организация);

КонецПроцедуры

// Замена префикса в номере документа. 
// Параметры:
//  Источник - ДокументОбъект - документ.
//  Отказ - Булево - отказ от выполнения операции.
//  РежимЗаписи - РежимЗаписиДокумента - режим записи.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения.
// 
Процедура торо_ЗаменитьПрефиксВДокументеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.Номер = "" Тогда 
		Возврат; // Это новый документ, номер и так будет установлен правильно.
	КонецЕсли; 
	
	СтруктураСвойств = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, Источник);

	Если СтруктураСвойств.Организация <> Неопределено Тогда
		
		Если Источник.Организация = Источник.Ссылка.Организация Тогда 
			Возврат; // Организация не изменилась.
		КонецЕсли; 
		
		НомерДок = Источник.Номер;
		Позиция = СтрНайти(НомерДок, "-");
		Если Позиция > 3 Тогда	
			// Номер не соответствует шаблону (скорее всего вводился руками).
			Возврат; 
		КонецЕсли; 
		
		Префикс = ПолучитьПрефиксОрганизации(СтруктураСвойств.Организация);
		Источник.УстановитьНовыйНомер(Префикс);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует список выбора типа документа основания для формы подбора
// ремонтных работ из документов оснований.
// Параметры:
//		Владелец - ДокументСсылка - ссылка на документ, для которого выбираются документы-основания.
// Возвращаемое значение:
//		СписокЗначений - список типов для выбора.
Функция СформироватьСписокВыбораТипаДокументаОснования(Владелец) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Владелец = Неопределено Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Если ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_ОстановочныеРемонты") Тогда 
		МассивТиповИсходный = Владелец.Метаданные().Реквизиты.ДокументОснование.Тип.Типы();
	Иначе 
		МассивТиповИсходный = Владелец.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.Типы();
	КонецЕсли;
	
	Для каждого Тип из МассивТиповИсходный Цикл
		СписокВыбора.Добавить(Тип);
	КонецЦикла;
	
	// Учет настроек ввода на основании
	НаборЗаписейВводНаОсновании = РегистрыСведений.торо_ВводНаОсновании.СоздатьНаборЗаписей();
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Значение = Владелец.Метаданные().Имя;
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Использование = Истина;
	НаборЗаписейВводНаОсновании.Прочитать();
	
	Для каждого ЗаписьРегистр из НаборЗаписейВводНаОсновании Цикл
		Если НЕ ЗаписьРегистр.Значение Тогда
			СтрокаЛишняя = СписокВыбора.НайтиПоЗначению(Тип("ДокументСсылка."+ЗаписьРегистр.ДокументОснование));		
			Если СтрокаЛишняя <> Неопределено Тогда
				СписокВыбора.Удалить(СтрокаЛишняя);	
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Ввод данного документа на основании запрещен настройками ввода на основании.
									|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

// Процедура выполняет начальное заполнение справочников данными из их макетов.
// Для работы этой процедуры в справочнике должен быть макет с типом Табличный документ
// в макете должны быть определены обалсти ЗаполняемыеРеквизиты и ДанныеДля заполнения
// макет должен иметь имя "НачальноеЗаполнение".
// Параметры:
//		ИмяСправочника - Строка - Имя справочника, для которого необходимо выполнить заполнение.
Процедура ЗаполнитьСправочникДаннымиИзМакета(ИмяСправочника) Экспорт
	
	Макет = Справочники[ИмяСправочника].ПолучитьМакет("НачальноеЗаполнение");
	
	ОбластьРеквизиты = Макет.ПолучитьОбласть("ЗаполняемыеРеквизиты");
	ОбластьДанные    = Макет.ПолучитьОбласть("ДанныеДляЗаполнения");
	
	Если ОбластьДанные.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	НомерКолонки = 1;
	
	СтруктураЗначенийРеквизитов = Новый Структура();
	
	Для каждого Реквизит Из Метаданные.Справочники[ИмяСправочника].СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = "Предопределенный"
			ИЛИ Реквизит.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураЗначенийРеквизитов.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Для каждого Реквизит Из Метаданные.Справочники[ИмяСправочника].Реквизиты Цикл
		СтруктураЗначенийРеквизитов.Вставить(Реквизит.Имя);
	КонецЦикла; 
	
	СоответствиеРеквизитовНомерамКолонок = Новый Соответствие;
	
	Пока Истина Цикл
		
		ЗначениеВЯчейке = ОбластьРеквизиты.Область(0, НомерКолонки, 0, НомерКолонки).Текст;
		
		Если Не ЗначениеЗаполнено(ЗначениеВЯчейке) Тогда
			Прервать;
		КонецЕсли; 	

		СоответствиеРеквизитовНомерамКолонок.Вставить(СокрЛП(ЗначениеВЯчейке), НомерКолонки);
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;  	
	
	Для СтрокаНомер = 1 По ОбластьДанные.ВысотаТаблицы Цикл
		
		ПрочитатьЗначенияРеквизитовВСтруктуруИзМакета(ОбластьДанные, СтрокаНомер, СоответствиеРеквизитовНомерамКолонок, СтруктураЗначенийРеквизитов);
		
		Наименование = "";
		ЕстьВБазе    = Ложь;
		СоздаваемыйОбъект = Неопределено;
		
		Если СтруктураЗначенийРеквизитов.Свойство("Наименование", Наименование) Тогда
			НайденныйЭлемент = Справочники[ИмяСправочника].НайтиПоНаименованию(Наименование, Истина);			
			Если НЕ НайденныйЭлемент = Справочники[ИмяСправочника].ПустаяСсылка() Тогда
				СоздаваемыйОбъект = НайденныйЭлемент.ПолучитьОбъект();
				ЕстьВБазе = Истина;
				СтруктураЗначенийРеквизитов.Удалить("Код");
			КонецЕсли; 
		КонецЕсли; 
		
		Если Не ЕстьВБазе Тогда
			СоздаваемыйОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
		КонецЕсли; 
		
		ОшибкиЗаполнения = Ложь;
		ЗаполнитьОбъектЗначениямиРеквизитовИзСтруктуры(СоздаваемыйОбъект, СтруктураЗначенийРеквизитов, ОшибкиЗаполнения);
		
		Если ОшибкиЗаполнения Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось заполнить справочник поставляемыми значениями.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Прервать;
		КонецЕсли; 
		
		Попытка
			СоздаваемыйОбъект.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось заполнить справочник поставляемыми значениями. Причина ошибки: %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Прервать;
		КонецПопытки; 
		
	КонецЦикла; 
		
КонецПроцедуры

// Процедура - Заполнить результаты подбора из матрицы оценки рисков.
//
// Параметры:
//  ДокументОбъект				 - ДокументСсылка.торо_ЗаявкаНаРемонт - заполняемый документ.
//  ТаблицаДокументовОснований	 - ТаблицаЗначений - Таблица с ремонтами, которые будут перенесены в Заявку, состав колонок см. в процедуре ЗаполнитьДокументНаОсновании.
//
Процедура ЗаполнитьРезультатыПодбораИзМатрицыОценкиРисков(ДокументОбъект, ТаблицаДокументовОснований) Экспорт
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДокументовОснований.Ключ КАК ID,
	               |	ТаблицаДокументовОснований.Значение КАК Ссылка
	               |ПОМЕСТИТЬ ТаблицаДокументовОснований
	               |ИЗ
	               |	&ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВыявленныеДефектыРезультатыПодбораИзМатрицыОценкиРисков.Ссылка КАК Ссылка,
	               |	торо_ВыявленныеДефектыРезультатыПодбораИзМатрицыОценкиРисков.ID_Ремонта КАК РемонтыОборудования_ID,
	               |	торо_ВыявленныеДефектыРезультатыПодбораИзМатрицыОценкиРисков.ОбъектВоздействия КАК ОбъектВоздействия,
	               |	торо_ВыявленныеДефектыРезультатыПодбораИзМатрицыОценкиРисков.КатегорияРиска КАК КатегорияРиска,
	               |	торо_ВыявленныеДефектыРезультатыПодбораИзМатрицыОценкиРисков.РезультатВыбора КАК РезультатВыбора
	               |ИЗ
	               |	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты.РезультатыПодбораИзМатрицыОценкиРисков КАК торо_ВыявленныеДефектыРезультатыПодбораИзМатрицыОценкиРисков
	               |		ПО ТаблицаДокументовОснований.ID = торо_ВыявленныеДефектыРезультатыПодбораИзМатрицыОценкиРисков.ID_Ремонта
	               |			И ТаблицаДокументовОснований.Ссылка = торо_ВыявленныеДефектыРезультатыПодбораИзМатрицыОценкиРисков.Ссылка
	               |ИТОГИ ПО
	               |	РемонтыОборудования_ID";
	
	# КонецОбласти
	Запрос.УстановитьПараметр("ТаблицаДокументовОснований", ТаблицаДокументовОснований);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаРемонты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРемонты.Следующий() Цикл
			Если ДокументОбъект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ВыборкаРемонты.РемонтыОборудования_ID)).Количество() > 0 Тогда
				Выборка = ВыборкаРемонты.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ДокументОбъект.РезультатыПодбораИзМатрицыОценкиРисков.Добавить(), Выборка);	
				КонецЦикла;
				
			КонецЕсли; 	
		КонецЦикла; 
	КонецЕсли; 		
КонецПроцедуры

// Выполняет заполнение реквизитов Организация, Подразделение, Ответсвенный
// значениями из настроек пользователя, если они не были заполнены ранее.
// Рекомендуется вызвать в конце процедуры ОбработкаЗаполнения модуля объекта.
//
// Параметры:
//		ДокументОбъект - ДокументОбъект - документ для заполнения.
//		ЗаполняемыеРеквизиты - Структура - Указывается, если нужно заполнить только часть реквизитов. 
//
Процедура ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ДокументОбъект, ЗаполняемыеРеквизиты = Неопределено) Экспорт
	
	Если ЗаполняемыеРеквизиты = Неопределено Тогда
		ЗаполняемыеРеквизиты = Новый Структура("Организация, Подразделение, Ответственный");
	КонецЕсли;
	
	Если ЗаполняемыеРеквизиты.Свойство("Организация") И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ЗаполняемыеРеквизиты.Свойство("Подразделение") И НЕ ЗначениеЗаполнено(ДокументОбъект.Подразделение) Тогда
		ДокументОбъект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение");
	КонецЕсли;
	
	Если ЗаполняемыеРеквизиты.Свойство("Ответственный") И НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный) Тогда
		ДокументОбъект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный) Тогда
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функци возвращает представление организации для печати исходя из заполненности реквизитов.
//
// Параметры:
//		Организация - СправочникСсылка.Организации - организация.
//		ПолноеНаименование - Булево - Если Истина, то будет выводиться полное наименование организации, если оно заполнено.
//
// Возвращаемое значение:
//		Строка - представление для печати.	
//
Функция ПолучитьПредставлениеОрганизацииДляПечати(Организация, ПолноеНаименование = Ложь) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,"Наименование,торо_НаименованиеСокращенное,торо_НаименованиеПолное");
	ПредставлениеОрганизации = "";
	Если ПолноеНаименование = Ложь Тогда
		ПредставлениеОрганизации = РеквизитыОрганизации.торо_НаименованиеСокращенное;
	Иначе
		ПредставлениеОрганизации = РеквизитыОрганизации.торо_НаименованиеПолное;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредставлениеОрганизации) Тогда
		ПредставлениеОрганизации = РеквизитыОрганизации.Наименование;
	КонецЕсли;
	
	Возврат ПредставлениеОрганизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект, ЭтоРегламентныеМероприятия) Экспорт
	
	Родитель_ID            = СтруктураДанных.ID_Родителя;
	РемонтыОборудования_ID = СтруктураДанных.РемонтыОборудования_ID;
	ТехКарта               = СтруктураДанных.РемонтнаяРабота;
	ДатаНачала             = СтруктураДанных.ДатаРемонта;
	
	РезультатЗапросаПоОперациям = ПолучитьСписокОперацийТехкартыСНормативами(ТехКарта,ЭтоРегламентныеМероприятия);
	
	СписокОпераций      = РезультатЗапросаПоОперациям[1].Выгрузить();
	МатериальныеЗатраты = РезультатЗапросаПоОперациям[3].Выгрузить();
	ТрудовыеЗатраты     = РезультатЗапросаПоОперациям[4].Выгрузить();
	
	ИнструментыИТехника = Неопределено;
	МерыБезопасности = Неопределено;
	Если Не ЭтоРегламентныеМероприятия Тогда
		ИнструментыИТехника = РезультатЗапросаПоОперациям[5].Выгрузить();
		МерыБезопасности = РезультатЗапросаПоОперациям[6].Выгрузить();
	КонецЕсли;
	
	Для каждого СтрокаОперации Из СписокОпераций Цикл
		
		РемРабота = ДокументОбъект.РемонтныеРаботы.Добавить();
		РемРабота.Родитель_ID            = Родитель_ID;
		РемРабота.РемонтыОборудования_ID = РемонтыОборудования_ID;
		
		Если Не ЭтоРегламентныеМероприятия Тогда
			РемРабота.Количество         = СтрокаОперации.Количество * ?(СтруктураДанных.Свойство("Количество") И СтруктураДанных.Количество <> 0, СтруктураДанных.Количество, 1);
		Иначе
			РемРабота.Количество         = СтрокаОперации.Количество;
		КонецЕсли;
		
		МассивИмеющихсяID =  ДокументОбъект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", СтрокаОперации.ID));
		Если МассивИмеющихсяID.Количество() > 0 Тогда
			ИДРаботы = Новый УникальныйИдентификатор;
		Иначе
			ИДРаботы = СтрокаОперации.ID;
		КонецЕсли; 
		
		РемРабота.ID                     = ИДРаботы;
		РемРабота.РемонтнаяРабота        = СтрокаОперации.Операция;
		
		РемРабота.ID_ПараллельнойОперации = СтрокаОперации.ID_ПараллельнойОперации;
		РемРабота.Картинка = ?(ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
		
		// процент выполнения пока не сделано
		Если ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда //заполняем нормативы
			
			МассивСтрок = МатериальныеЗатраты.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
			
			Для каждого СтрокаМатериалов Из МассивСтрок Цикл
				Если СтрокаМатериалов.КоличествоЕдиниц = 0 Тогда
					СтрокаМатериалов.КоличествоЕдиниц = (?(СтрокаМатериалов.Коэффициент = 0, 1, СтрокаМатериалов.Коэффициент)) * СтрокаМатериалов.Количество;
				КонецЕсли; 
				
				НСМатериалов = ДокументОбъект.МатериальныеЗатраты.Добавить();
				ЗаполнитьЗначенияСвойств(НСМатериалов,СтрокаМатериалов);
				НСМатериалов.РемонтыОборудования_ID = РемонтыОборудования_ID;
				НСМатериалов.ID                     = РемРабота.ID;
				НСМатериалов.ЕдиницаИзмерения		= СтрокаМатериалов.Упаковка;
				
			КонецЦикла; 
			
				
			МассивСтрок = ТрудовыеЗатраты.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
			Для каждого СтрокаТрудозатрат Из МассивСтрок Цикл
				
				// в заявке нет детализации до исполнителей 
				Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
					Для Счетчик = 1 По СтрокаТрудозатрат.Количество Цикл
						НСТрудозатрат = ДокументОбъект.ТрудовыеЗатраты.Добавить();
						ЗаполнитьЗначенияСвойств(НСТрудозатрат,СтрокаТрудозатрат);
						НСТрудозатрат.РемонтыОборудования_ID = РемонтыОборудования_ID;
						НСТрудозатрат.ID = ИДРаботы;
					КонецЦикла;
				Иначе
					НСТрудозатрат = ДокументОбъект.ТрудовыеЗатраты.Добавить();
					ЗаполнитьЗначенияСвойств(НСТрудозатрат,СтрокаТрудозатрат);
					НСТрудозатрат.РемонтыОборудования_ID = РемонтыОборудования_ID;
					НСТрудозатрат.ID = ИДРаботы;
				КонецЕсли; 
				
			КонецЦикла;	
			
			Если ИнструментыИТехника <> Неопределено Тогда
				МассивСтрок = ИнструментыИТехника.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				Для каждого СтрокаИИТ Из МассивСтрок Цикл
					НоваяСтрока = ДокументОбъект.Инструменты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИИТ);
					НоваяСтрока.РемонтыОборудования_ID = РемонтыОборудования_ID;
					НоваяСтрока.ID = ИДРаботы;
					НоваяСтрока.ЕдиницаИзмерения = СтрокаИИТ.Упаковка;
					НоваяСтрока.Количество = СтрокаИИТ.КоличествоУпаковок;
				КонецЦикла;	
			КонецЕсли;
			
			Если МерыБезопасности <> Неопределено Тогда
				МассивСтрок = МерыБезопасности.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				Для каждого СтрокаМБ Из МассивСтрок Цикл
					НоваяСтрока = ДокументОбъект.МерыБезопасности.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМБ);
					НоваяСтрока.РемонтыОборудования_ID = РемонтыОборудования_ID;
					НоваяСтрока.ID = ИДРаботы;
				КонецЦикла;	
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			ТехКартаВложенная = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(РемРабота.РемонтнаяРабота, ТехКарта.ДатаПринятия);
			
			СтруктураДанных = Новый Структура("ID_Родителя, РемонтнаяРабота, РемонтыОборудования_ID, Количество, ДатаРемонта"
			, ИДРаботы
			, ТехКартаВложенная
			, РемонтыОборудования_ID
			, СтрокаОперации.Количество
			, ДатаНачала);
			
			ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект, ЭтоРегламентныеМероприятия);
			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
	Отказ, Заголовок) Экспорт
	
	ПредставлениеТабличнойЧасти = Неопределено;
	МетаданныеРеквизиты         = Неопределено;
	ТабличнаяЧасть              = ДокументОбъект[ИмяТабличнойЧасти];
	
	// Цмкл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		// Цмкл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				
				Если ПредставлениеТабличнойЧасти = Неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;
				
				Если МетаданныеРеквизиты = Неопределено Тогда
					МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
				КонецЕсли;
				
				СтрокаНачалаСообщенияОбОшибке = НСтр("ru = 'В строке номер %1 табличной части ""%2"" '");
				СтрокаНачалаСообщенияОбОшибке = СтрШаблон(СтрокаНачалаСообщенияОбОшибке,СокрЛП(СтрокаТаблицы.НомерСтроки),ПредставлениеТабличнойЧасти);
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = НСтр("ru = 'не заполнено значение реквизита ""%1""!'");
					СтрокаСообщения = СтрШаблон(СтрокаСообщения, СокрЛП(ПредставлениеРеквизита));
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				Поле = СтрШаблон("Объект.%1[%2].%3", ИмяТабличнойЧасти, ТабличнаяЧасть.Индекс(СтрокаТаблицы), КлючЗначение.Ключ); 
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Поле,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокОперацийТехкартыСНормативами(ТехКарта, ЭтоРегламентныеМероприятия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТехКартыСписокОпераций.ID КАК ID,
	               |	торо_ТехКартыСписокОпераций.Операция КАК Операция,
	               |	торо_ТехКартыСписокОпераций.Количество КАК Количество,
	               |	торо_ТехКартыСписокОпераций.Ссылка КАК Ссылка,
				   |	торо_ТехКартыСписокОпераций.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации
	               |ПОМЕСТИТЬ СписокОпераций_Данные
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.ID КАК ID,
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокОпераций.Количество КАК Количество,
				   |	СписокОпераций.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации
	               |ИЗ
	               |	СписокОпераций_Данные КАК СписокОпераций
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.ID КАК ID,
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокОпераций.Количество КАК Количество,
	               |	СписокОпераций.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ СписокОпераций
	               |ИЗ
	               |	СписокОпераций_Данные КАК СписокОпераций
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(СписокОпераций.Операция) = ТИП(Справочник.торо_ТехнологическиеОперации)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Операция,
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКартыМатериальныеЗатраты.ID КАК ID,
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	               |	торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	торо_ТехКартыМатериальныеЗатраты.Упаковка КАК Упаковка,
	               |	ЕСТЬNULL(торо_ТехКартыМатериальныеЗатраты.Упаковка.Коэффициент, 0) КАК Коэффициент,
	               |	торо_ТехКартыМатериальныеЗатраты.Количество КАК КоличествоЕдиниц,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоНаЕдиницу КАК КоличествоНаЕдиницу,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок КАК Количество,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковокНаЕдиницу КАК КоличествоУпаковокНаЕдиницу,
	               |	торо_ТехКартыМатериальныеЗатраты.Характеристика КАК ХарактеристикаНоменклатуры
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	               |		ПО СписокОпераций.ID = торо_ТехКартыМатериальныеЗатраты.ID
	               |			И СписокОпераций.Операция = торо_ТехКартыМатериальныеЗатраты.Операция
	               |			И СписокОпераций.Ссылка = торо_ТехКартыМатериальныеЗатраты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКартыТрудовыеЗатраты.ID КАК ID,
	               |	торо_ТехКартыТрудовыеЗатраты.Количество КАК Количество,
	               |	торо_ТехКартыТрудовыеЗатраты.Квалификация КАК Квалификация,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботы КАК ВремяРаботы,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботыНаЕдиницу КАК ВремяРаботыНаЕдиницу
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
	               |		ПО СписокОпераций.ID = торо_ТехКартыТрудовыеЗатраты.ID
	               |			И СписокОпераций.Операция = торо_ТехКартыТрудовыеЗатраты.Операция
	               |			И СписокОпераций.Ссылка = торо_ТехКартыТрудовыеЗатраты.Ссылка";
	
	Если Не ЭтоРегламентныеМероприятия Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ТехКартыИнструментыИТехника.ID,
		|	торо_ТехКартыИнструментыИТехника.ЕдиницаИзмерения,
		|	торо_ТехКартыИнструментыИТехника.Инструмент,
		|	торо_ТехКартыИнструментыИТехника.Упаковка,
		|	торо_ТехКартыИнструментыИТехника.Количество,
		|	торо_ТехКартыИнструментыИТехника.КоличествоУпаковок
		|ИЗ
		|	СписокОпераций КАК СписокОпераций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ИнструментыИТехника КАК торо_ТехКартыИнструментыИТехника
		|		ПО СписокОпераций.ID = торо_ТехКартыИнструментыИТехника.ID
		|			И СписокОпераций.Операция = торо_ТехКартыИнструментыИТехника.Операция
		|			И СписокОпераций.Ссылка = торо_ТехКартыИнструментыИТехника.Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тзМерыБезопасности.ID,
		|	тзМерыБезопасности.МераБезопасности
		|ИЗ
		|	СписокОпераций КАК СписокОпераций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.МерыБезопасности КАК тзМерыБезопасности
		|		ПО СписокОпераций.ID = тзМерыБезопасности.ID
		|			И СписокОпераций.Операция = тзМерыБезопасности.Операция
		|			И СписокОпераций.Ссылка = тзМерыБезопасности.Ссылка";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Ссылка",ТехКарта);
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция ПолучитьПрефиксОрганизации(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Префикс
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Организация);
	РезЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезЗапроса.Пустой() Тогда
		Выборка = РезЗапроса.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.Префикс) Тогда
			Возврат Выборка.Префикс + "-";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "0";
	
КонецФункции 

// Загрузка справочников из макета
Процедура ПрочитатьЗначенияРеквизитовВСтруктуруИзМакета(ОбластьДанные, СтрокаНомер, СоответствиеРеквизитовНомерамКолонок, СтруктураЗначенийРеквизитов)
	
	Для каждого КлючИЗНачение Из СтруктураЗначенийРеквизитов Цикл
		
		НомерКолонки = СоответствиеРеквизитовНомерамКолонок.Получить(КлючИЗНачение.Ключ);
		
		Если НЕ НомерКолонки = Неопределено Тогда
			ЗначениеВЯчейке = ОбластьДанные.Область(СтрокаНомер,НомерКолонки,СтрокаНомер,НомерКолонки).Текст;
			СтруктураЗначенийРеквизитов[КлючИЗНачение.Ключ] = СокрЛП(ЗначениеВЯчейке);
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьОбъектЗначениямиРеквизитовИзСтруктуры(СоздаваемыйОбъект, СтруктураЗначенийРеквизитов, ОшибкиЗаполнения)
	
	Для каждого КлючИЗНачение Из СтруктураЗначенийРеквизитов Цикл
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СоздаваемыйОбъект[КлючИЗНачение.Ключ])) Тогда
			
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СоздаваемыйОбъект[КлючИЗНачение.Ключ]);
			НайдЗначение = Менеджер.НайтиПоНаименованию(КлючИЗНачение.Значение);
			
			Если ЗначениеЗаполнено(НайдЗначение) Тогда
				СоздаваемыйОбъект[КлючИЗНачение.Ключ] = НайдЗначение;
			Иначе
				ШаблонСообщения = НСтр("ru = 'Не удалось определить значение для реквизита %1 по наименованию <%2>'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, КлючИЗНачение.Ключ, КлючИЗНачение.Значение);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, ОшибкиЗаполнения);
			КонецЕсли; 
			
		Иначе
			СоздаваемыйОбъект[КлючИЗНачение.Ключ] = КлючИЗНачение.Значение; 
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция рассчитывает время работы ОР
Функция РасчитатьВремяРаботыОР(ТаблицаПериодовРаботыОборудования, Период) Экспорт
	
	СтрПериод = Строка(Период);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПериодовРаботыОборудования.ОбъектРемонта,
	|	ТаблицаПериодовРаботыОборудования.ДатаНачала,
	|	ТаблицаПериодовРаботыОборудования.ДатаОкончания,
	|	ТаблицаПериодовРаботыОборудования.ПлановыйГрафикРаботы
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	&ТаблицаПериодовРаботыОборудования КАК ТаблицаПериодовРаботыОборудования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоСменам.Часы,0) * 3600) КАК Секунды,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания,
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ГрафикиРаботыПоСменам.Дата, "+СтрПериод+")) КАК ЦелыхПериодов
	|ПОМЕСТИТЬ ТаблицаПолныеПериоды
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ПО ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
	|			И (КОНЕЦПЕРИОДА(ТаблицаПериодов.ДатаНачала, "+СтрПериод+") < ГрафикиРаботыПоСменам.Дата)
	|			И (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, "+СтрПериод+") > ГрафикиРаботыПоСменам.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	СУММА((ВЫБОР
	|				КОГДА (КОНЕЦПЕРИОДА(ТаблицаПериодов.ДатаНачала, День) < ГрафикиРаботыПоСменам.Дата И НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, День) > ГрафикиРаботыПоСменам.Дата)
	|						ТОГДА ГрафикиРаботыПоСменам.Часы * 3600
	|				ИНАЧЕ 0
	|			КОНЕЦ)) КАК Секунды,
	|	СУММА(ГрафикиРаботыПоСменам.Часы * 3600) КАК СекундыЗаПериод,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|ПОМЕСТИТЬ ТаблицаПолныеДниНачало
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ПО ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
	|			И (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, "+СтрПериод+") <= ГрафикиРаботыПоСменам.Дата)
	|			И (КОНЕЦПЕРИОДА(ТаблицаПериодов.ДатаНачала, "+СтрПериод+") > ГрафикиРаботыПоСменам.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	СУММА((ВЫБОР
	|				КОГДА (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, День) > ГрафикиРаботыПоСменам.Дата ) И НачалоПериода(ТаблицаПериодов.ДатаНачала,"+СтрПериод+") <> НачалоПериода(ТаблицаПериодов.ДатаОкончания,"+СтрПериод+")
	|						ТОГДА ГрафикиРаботыПоСменам.Часы * 3600
	|				ИНАЧЕ 0
	|			КОНЕЦ)) КАК Секунды,
	|	СУММА(ГрафикиРаботыПоСменам.Часы * 3600) КАК СекундыЗаПериод,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|ПОМЕСТИТЬ ТаблицаПолныеДниКонец
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ПО ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
	|			И (КОНЕЦПЕРИОДА(ТаблицаПериодов.ДатаОкончания, "+СтрПериод+") > ГрафикиРаботыПоСменам.Дата)
	|			И (НачалоПЕРИОДА(ТаблицаПериодов.ДатаОкончания, "+СтрПериод+") <= ГрафикиРаботыПоСменам.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ)
	|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|			ТОГДА РАЗНОСТЬДАТ(ТаблицаПериодов.ДатаНачала, ТаблицаПериодов.ДатаОкончания, СЕКУНДА)
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) > РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|			ТОГДА РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА) - РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА)
	|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|	КОНЕЦ КАК Секунды,
	|	ТаблицаПериодов.ДатаОкончания,
	|	ГрафикиРаботыПоСменам.Смена
	|ПОМЕСТИТЬ ВремяЗаПервыйДень
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|		ПО (ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы)
	|			И (ГрафикиРаботыПоСменам.Дата = НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|		ПО ГрафикиРаботыПоСменам.Смена = СменыПериодыСмены.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
	|		ПО ГрафикиРаботыПоСменам.Смена = ГрафикиРаботыПериодыСмены.Ссылка
	|			И (ВЫБОР
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 1
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 2
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 3
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 4
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 5
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 6
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 7
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|	И (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ)
	|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) МЕЖДУ РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА) И РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|				И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) МЕЖДУ РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА) И РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ)
	|				И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|						И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|					ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|						И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) > РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА))
	|			ТОГДА 0
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) - РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|	КОНЕЦ КАК Секунды,
	|	ТаблицаПериодов.ДатаОкончания
	|ПОМЕСТИТЬ ВремяЗаПоследнийДень
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|		ПО (ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы)
	|			И (ГрафикиРаботыПоСменам.Дата = НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|		ПО ГрафикиРаботыПоСменам.Смена = СменыПериодыСмены.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
	|		ПО ГрафикиРаботыПоСменам.Смена = ГрафикиРаботыПериодыСмены.Ссылка
	|			И (ВЫБОР
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 1
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 2
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 3
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 4
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 5
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 6
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 7
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|	И (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ)
	|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолныеДниНачало.ОбъектРемонта,
	|	ТаблицаПолныеДниНачало.Секунды,
	|	ТаблицаПолныеДниНачало.ДатаНачала,
	|	ТаблицаПолныеДниНачало.ДатаОкончания,
	|	ТаблицаПолныеДниНачало.СекундыЗаПериод
	|ПОМЕСТИТЬ ОбъединениеОтрезковВремениНачало
	|ИЗ
	|	ТаблицаПолныеДниНачало КАК ТаблицаПолныеДниНачало
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремяЗаПервыйДень.ОбъектРемонта,
	|	ВремяЗаПервыйДень.Секунды,
	|	ВремяЗаПервыйДень.ДатаНачала,
	|	ВремяЗаПервыйДень.ДатаОкончания,
	|	0
	|ИЗ
	|	ВремяЗаПервыйДень КАК ВремяЗаПервыйДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеОтрезковВремениНачало.ОбъектРемонта,
	|	Сумма(ОбъединениеОтрезковВремениНачало.Секунды) КАК Секунды,
	|	ОбъединениеОтрезковВремениНачало.ДатаНачала,
	|	ОбъединениеОтрезковВремениНачало.ДатаОкончания,
	|	Максимум(ОбъединениеОтрезковВремениНачало.СекундыЗаПериод) КАК СекундыЗаПериод
	|ПОМЕСТИТЬ ОбъединениеОтрезковНачалоСвертка
	|ИЗ
	|	ОбъединениеОтрезковВремениНачало КАК ОбъединениеОтрезковВремениНачало
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединениеОтрезковВремениНачало.ОбъектРемонта,
	|	ОбъединениеОтрезковВремениНачало.ДатаНачала,
	|	ОбъединениеОтрезковВремениНачало.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолныеДниКонец.ОбъектРемонта,
	|	ТаблицаПолныеДниКонец.Секунды,
	|	ТаблицаПолныеДниКонец.ДатаНачала,
	|	ТаблицаПолныеДниКонец.ДатаОкончания,
	|	ТаблицаПолныеДниКонец.СекундыЗаПериод
	|ПОМЕСТИТЬ ОбъединениеОтрезковВремениКонец
	|ИЗ
	|	ТаблицаПолныеДниКонец КАК ТаблицаПолныеДниКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремяЗаПоследнийДень.ОбъектРемонта,
	|	ВремяЗаПоследнийДень.Секунды,
	|	ВремяЗаПоследнийДень.ДатаНачала,
	|	ВремяЗаПоследнийДень.ДатаОкончания,
	|	0
	|ИЗ
	|	ВремяЗаПоследнийДень КАК ВремяЗаПоследнийДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеОтрезковВремениКонец.ОбъектРемонта,
	|	СУММА(ОбъединениеОтрезковВремениКонец.Секунды) КАК Секунды,
	|	ОбъединениеОтрезковВремениКонец.ДатаНачала,
	|	ОбъединениеОтрезковВремениКонец.ДатаОкончания,
	|	Максимум(ОбъединениеОтрезковВремениКонец.СекундыЗаПериод) КАК СекундыЗаПериод
	|ПОМЕСТИТЬ ОбъединениеОтрезковКонецСвертка
	|ИЗ
	|	ОбъединениеОтрезковВремениКонец КАК ОбъединениеОтрезковВремениКонец
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединениеОтрезковВремениКонец.ОбъектРемонта,
	|	ОбъединениеОтрезковВремениКонец.ДатаНачала,
	|	ОбъединениеОтрезковВремениКонец.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолныеПериоды.ОбъектРемонта,
	|	ТаблицаПолныеПериоды.Секунды,
	|	ТаблицаПолныеПериоды.ЦелыхПериодов КАК Периодов,
	|	ТаблицаПолныеПериоды.ДатаНачала,
	|	ТаблицаПолныеПериоды.ДатаОкончания
	|ПОМЕСТИТЬ ОбъединениеОтрезков
	|ИЗ
	|	ТаблицаПолныеПериоды КАК ТаблицаПолныеПериоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъединениеОтрезковНачалоСвертка.ОбъектРемонта,
	|	ОбъединениеОтрезковНачалоСвертка.Секунды,
	|	ЕСТЬNULL(ОбъединениеОтрезковНачалоСвертка.Секунды, 0) / (ВЫБОР КОГДА ОбъединениеОтрезковНачалоСвертка.СекундыЗаПериод = 0 ТОГДА 1 ИНАЧЕ ОбъединениеОтрезковНачалоСвертка.СекундыЗаПериод КОНЕЦ),  
	|	ОбъединениеОтрезковНачалоСвертка.ДатаНачала,
	|	ОбъединениеОтрезковНачалоСвертка.ДатаОкончания
	|ИЗ
	|	ОбъединениеОтрезковНачалоСвертка КАК ОбъединениеОтрезковНачалоСвертка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъединениеОтрезковКонецСвертка.ОбъектРемонта,
	|	ОбъединениеОтрезковКонецСвертка.Секунды,
	|	ЕСТЬNULL(ОбъединениеОтрезковКонецСвертка.Секунды, 0) / (ВЫБОР КОГДА ОбъединениеОтрезковКонецСвертка.СекундыЗаПериод = 0 ТОГДА 1 ИНАЧЕ ОбъединениеОтрезковКонецСвертка.СекундыЗаПериод КОНЕЦ),
	|	ОбъединениеОтрезковКонецСвертка.ДатаНачала,
	|	ОбъединениеОтрезковКонецСвертка.ДатаОкончания
	|ИЗ
	|	ОбъединениеОтрезковКонецСвертка КАК ОбъединениеОтрезковКонецСвертка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеОтрезков.ОбъектРемонта,
	|	ОбъединениеОтрезков.ДатаНачала,
	|	СУММА(ОбъединениеОтрезков.Секунды) КАК Секунды,
	|	СУММА(ОбъединениеОтрезков.Периодов)КАК Периодов,
	|	ОбъединениеОтрезков.ДатаОкончания
	|ИЗ
	|	ОбъединениеОтрезков КАК ОбъединениеОтрезков
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединениеОтрезков.ОбъектРемонта,
	|	ОбъединениеОтрезков.ДатаНачала,
	|	ОбъединениеОтрезков.ДатаОкончания
	|";
	
	Запрос.УстановитьПараметр("ТаблицаПериодовРаботыОборудования", ТаблицаПериодовРаботыОборудования);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Доступные способы возврата значения:
//		"Выборка" - выборка из результата запроса.
//		"Таблица" - таблица значений.
//		"Массив" - массив структур.
Функция ПолучитьАктуальныеПлановыеДанныеРемонтов(МассивID, СпособВозвратаЗначения = "Таблица")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	торо_АктуальныеПлановыеДатыРемонтов.IDРемонта КАК IDРемонта,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_АктуальныеДаты
	|ИЗ
	|	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|ГДЕ
	|	торо_АктуальныеПлановыеДатыРемонтов.IDРемонта В(&МассивID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПлановыеРемонтныеРаботы.ID КАК ID,
	|	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот КАК ОР,
	|	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботы.Исполнитель КАК Исполнитель,
	|	торо_ПлановыеРемонтныеРаботы.СпособВыполнения КАК СпособВыполнения,
	|	торо_ПлановыеРемонтныеРаботы.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ППР
	|ИЗ
	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, ID В (&МассивID)) КАК торо_ПлановыеРемонтныеРаботы
	|ГДЕ
	|	НЕ торо_ПлановыеРемонтныеРаботы.Отменен
	|	И НЕ торо_ПлановыеРемонтныеРаботы.Замещен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ППР.ID КАК ID,
	|	ВТ_ППР.ОР КАК ОР,
	|	ВТ_ППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ВТ_ППР.Исполнитель КАК Исполнитель,
	|	ВТ_ППР.СпособВыполнения КАК СпособВыполнения,
	|	ВТ_ППР.Период КАК Период,
	|	ВТ_АктуальныеДаты.ДатаНачала КАК ДатаНачала,
	|	ВТ_АктуальныеДаты.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТ_ППР КАК ВТ_ППР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктуальныеДаты КАК ВТ_АктуальныеДаты
	|		ПО ВТ_ППР.ID = ВТ_АктуальныеДаты.IDРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Результат = Запрос.Выполнить();
	
	Если СпособВозвратаЗначения = "Таблица" Тогда
		Возврат Результат.Выгрузить();
	ИначеЕсли СпособВозвратаЗначения = "Выборка" Тогда
		Возврат Результат.Выбрать();
	Иначе
		Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Результат);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАктуальныеПлановыеДанныеРемонтовРМ(МассивID, СпособВозвратаЗначения = "Таблица") 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктуальныеПлановыеДатыРемонтов.IDРемонта КАК IDРемонта,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_АктуальныеДаты
	|ИЗ
	|	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|ГДЕ
	|	торо_АктуальныеПлановыеДатыРемонтов.IDРемонта В(&МассивID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПлановыеРемонтныеРаботы.ID КАК ID,
	|	торо_ПлановыеРемонтныеРаботы.СписокОбъектов КАК ОР,
	|	торо_ПлановыеРемонтныеРаботы.ВидМероприятия КАК ВидРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботы.Исполнитель КАК Исполнитель,
	|	торо_ПлановыеРемонтныеРаботы.СпособВыполнения КАК СпособВыполнения,
	|	торо_ПлановыеРемонтныеРаботы.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ППР
	|ИЗ
	|	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних(, ID В (&МассивID)) КАК торо_ПлановыеРемонтныеРаботы
	|ГДЕ
	|	НЕ торо_ПлановыеРемонтныеРаботы.Отменен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ППР.ID КАК ID,
	|	ВТ_ППР.ОР КАК ОР,
	|	ВТ_ППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ВТ_ППР.Исполнитель КАК Исполнитель,
	|	ВТ_ППР.СпособВыполнения КАК СпособВыполнения,
	|	ВТ_ППР.Период КАК Период,
	|	ВТ_АктуальныеДаты.ДатаНачала КАК ДатаНачала,
	|	ВТ_АктуальныеДаты.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТ_ППР КАК ВТ_ППР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктуальныеДаты КАК ВТ_АктуальныеДаты
	|		ПО ВТ_ППР.ID = ВТ_АктуальныеДаты.IDРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";

	Запрос.УстановитьПараметр("МассивID", МассивID);
	Результат = Запрос.Выполнить();
	
	Если СпособВозвратаЗначения = "Таблица" Тогда
		Возврат Результат.Выгрузить();
	ИначеЕсли СпособВозвратаЗначения = "Выборка" Тогда
		Возврат Результат.Выбрать();
	Иначе
		Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Результат);
	КонецЕсли;
	
КонецФункции

Функция ВернутьIDНеотмененногоРемонта(СсылкаНаДок, ТабЧасть) Экспорт
	
	МассивНеотмененных = Новый Массив();

	Если ТипЗнч(СсылкаНаДок) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "ПериодичностьДетализации, КоличествоПериодов, ДатаПланирования");
		Если НЕ ЗначениеЗаполнено(Реквизиты.ПериодичностьДетализации) Тогда	
			Возврат "";
		КонецЕсли;
		
		ДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Реквизиты.ДатаПланирования, Реквизиты.ПериодичностьДетализации, Реквизиты.КоличествоПериодов);
		
		ТаблицаДанных = ПолучитьАктуальныеПлановыеДанныеРемонтов(ТабЧасть.ВыгрузитьКолонку("ID"), "Таблица");
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИД.ID КАК ID,
		|	ТаблицаИД.ДатаНачала КАК ДатаНачала
		|ПОМЕСТИТЬ ВТ_ТаблицаИД
		|ИЗ
		|	&ТаблицаИД КАК ТаблицаИД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаИД.ID КАК ID,
		|	ВТ_ТаблицаИД.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	ВТ_ТаблицаИД КАК ВТ_ТаблицаИД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|		ПО ВТ_ТаблицаИД.ID = торо_ЗавершенныеРемонтныеРаботы.ID
		|ГДЕ
		|	торо_ЗавершенныеРемонтныеРаботы.ID ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ТаблицаИД", ТаблицаДанных);
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДанных.Следующий() Цикл
			Если ВыборкаДанных.ДатаНачала > ДатаОкончанияПланирования Тогда
				Продолжить;
			КонецЕсли;
			МассивНеотмененных.Добавить(ВыборкаДанных.ID);
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.Текст = 	
		"ВЫБРАТЬ
		|	ТЗ.ID КАК ID
		|ПОМЕСТИТЬ ТабЧасть
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабЧасть.ID КАК ID
		|ИЗ
		|	ТабЧасть КАК ТабЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
		|		ПО ТабЧасть.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта
		|ГДЕ
		|	НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
		|	И НЕ торо_ОбщиеДанныеПоРемонтам.Завершен";
		
		Запрос.УстановитьПараметр("ТЗ", ТабЧасть.Выгрузить(, "ID"));
		Результат = Запрос.Выполнить().Выгрузить();
		МассивНеотмененных = Результат.ВыгрузитьКолонку("ID");
		
	КонецЕсли;	

	Если МассивНеотмененных.Количество() = 1 Тогда
		Возврат МассивНеотмененных[0];
	КонецЕсли; 	
	
	Возврат "";
	
КонецФункции

Функция ВернутьIDНеотмененногоРемонтаВРегламентныхМероприятиях(СсылкаНаДок, ТабЧасть) Экспорт 
	
	МассивНеотмененных = Новый Массив;
	
	Если ТипЗнч(СсылкаНаДок) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "ПериодичностьДетализации, КоличествоПериодов, ДатаПланирования");
		Если НЕ ЗначениеЗаполнено(Реквизиты.ПериодичностьДетализации) Тогда
			Возврат "";
		КонецЕсли;
		
		ДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Реквизиты.ДатаПланирования, Реквизиты.ПериодичностьДетализации, Реквизиты.КоличествоПериодов);
		
		ВыборкаДанных = ПолучитьАктуальныеПлановыеДанныеРемонтовРМ(ТабЧасть.ВыгрузитьКолонку("ID"), "Выборка");
		Пока ВыборкаДанных.Следующий() Цикл
			Если ВыборкаДанных.ДатаНачала > ДатаОкончанияПланирования Тогда
				Продолжить;
			КонецЕсли;
			МассивНеотмененных.Добавить(ВыборкаДанных.ID);
		КонецЦикла;
	Иначе
		МассивНеотмененных = ТабЧасть.ВыгрузитьКолонку("ID");	
	КонецЕсли;
	
	Если МассивНеотмененных.Количество() = 1 Тогда
		Возврат МассивНеотмененных[0];
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьДатуРемонтаПоID(ТабличнаяЧасть, ID) Экспорт
	МассивРемонтов = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ID", ID));	
	Если МассивРемонтов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивРемонтов[0].ДатаНачала;
	КонецЕсли;
КонецФункции

Процедура ВыполнитьАвтоподставлениеСотрудникаИКвалификации(СотрудникСсылка, КвалификацияСсылка, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(СотрудникСсылка) И ЗначениеЗаполнено(КвалификацияСсылка) Тогда
		СотрудникСсылка = РегистрыСведений.торо_КвалификацияРемонтногоПерсонала.ПолучитьОдногоСотрудникаСКвалификацией(КвалификацияСсылка, Дата);
	ИначеЕсли ЗначениеЗаполнено(СотрудникСсылка) И Не ЗначениеЗаполнено(КвалификацияСсылка) Тогда
		КвалификацияСсылка = РегистрыСведений.торо_КвалификацияРемонтногоПерсонала.ПолучитьОднуОсновнуюКвалификациюСотрудника(СотрудникСсылка, Дата);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокСотрудниковСКвалификацией(Квалификация, ДатаРемонта, Текст = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник КАК Сотрудник,
	                |	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия КАК ВидСобытия
					|ИЗ
	                |	РегистрСведений.торо_КвалификацияРемонтногоПерсонала.СрезПоследних(&ДатаРемонта, &ОтборПоКвалификации) КАК торо_КвалификацияРемонтногоПерсоналаСрезПоследних
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	                |		ПО торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	                |ГДЕ
	                |	НЕ торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Удаленная
	                |	И торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник.Наименование ПОДОБНО &СтрокаПоиска";
	
	Запрос.УстановитьПараметр("ДатаРемонта", ДатаРемонта);
	Если ТипЗнч(Квалификация) = Тип("СписокЗначений") Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКвалификации", "Квалификация В (&Квалификация)");
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"СГРУППИРОВАТЬ ПО
	    |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник,
	    |	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Квалификация) = &КоличествоКвалификаций";
		Запрос.УстановитьПараметр("КоличествоКвалификаций", Квалификация.Количество());
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКвалификации", "Квалификация = &Квалификация");
	КонецЕсли;
	Запрос.УстановитьПараметр("Квалификация", Квалификация);
	Если Текст <> Неопределено Тогда 
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Текст + "%");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник.Наименование ПОДОБНО &СтрокаПоиска", "ИСТИНА"); 
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Список = Новый СписокЗначений;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьУправлениеПерсоналом") Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидСобытия) 
				И ВыборкаДетальныеЗаписи.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием 
				Или ВыборкаДетальныеЗаписи.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
				Список.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Список.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
		КонецЦикла;
	КонецЕсли;
	
    Возврат Список;
	
КонецФункции

Функция ПолучитьСписокСотрудников(ДатаРемонта, Текст = Неопределено, Организация = Неопределено, Подразделение = Неопределено) Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьУправлениеПерсоналом") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник КАК Сотрудник,
		                |	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия КАК ВидСобытия
		                |ИЗ
		                |	РегистрСведений.торо_КвалификацияРемонтногоПерсонала.СрезПоследних(&ДатаРемонта, ) КАК торо_КвалификацияРемонтногоПерсоналаСрезПоследних
		                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		                |		ПО торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		                |ГДЕ
		                |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник.Наименование ПОДОБНО &СтрокаПоиска";
		
		Запрос.УстановитьПараметр("ДатаРемонта", ДатаРемонта);
		Если Текст <> Неопределено Тогда 
			Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Текст + "%");
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник.Наименование ПОДОБНО &СтрокаПоиска", "ИСТИНА"); 
		КонецЕсли;
		
		Если Организация <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст +"
			|	И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
		
		Если Подразделение <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст +"
			|	И КадроваяИсторияСотрудниковСрезПоследних.Подразделение = &Подразделение";
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Список = Новый СписокЗначений;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидСобытия) 
				И ВыборкаДетальныеЗаписи.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием 
				Или ВыборкаДетальныеЗаписи.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
				Список.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	    Возврат Список;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

#КонецОбласти