
#Область ПрограммныйИнтерфейс

// Функция инициализирует реквизиты формы, используемые для согласования документов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ВидДокумента - ПеречислениеСсылка.торо_ВидыДокументовСогласованияРемонтов - вид документа.
//  Регламентный - Булево - это документ регламентного мероприятия.
//  МТО - Булево - это документ МТО.
//  Контекст - Структура - дополнительная информация, возможные поля:
//			*ГруппаДляСтатуса - Строка - имя элемента формы (группы), в которую вывести текущий 
//													статус согласования документа.
//			*ГруппаДляРазмещения  - Строка - имя элемента форрмы (группы), в которую вывести элементы.
//
Процедура ПриСозданииНаСервере(Форма, ВидДокумента, Регламентный = Ложь, Контекст = Неопределено, МТО = Ложь) Экспорт
	
	СоздатьРеквизитыФормы(Форма);
	
	Форма.ИспользоватьСогласованиеДокументов = ПроверитьИспользованиеСогласованияДокументов(ВидДокумента, Регламентный, МТО);
	
	Если НЕ Форма.ИспользоватьСогласованиеДокументов Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЭлементыФормы(Форма, Контекст);
	ДобавитьУсловноеОформлениеДляДереваСогласования(Форма);  
	
	Если Не ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_УстановкаМинимальногоОстаткаНоменклатуры") Тогда
		Форма.ПараметрыСпособаСогласованияПоУмолчанию = ПолучитьСпособСогласованияПоУмолчанию(ВидДокумента, Форма.Объект.Организация, Форма.Объект.Подразделение, Истина);
	Иначе
		Форма.ПараметрыСпособаСогласованияПоУмолчанию = ПолучитьСпособСогласованияПоУмолчанию(ВидДокумента, Форма.Объект.Организация, Справочники.СтруктураПредприятия.ПустаяСсылка(), Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.СпособСогласования) Тогда
			Форма.Объект.СпособСогласования = Форма.ПараметрыСпособаСогласованияПоУмолчанию.СпособСогласования;
		КонецЕсли;
		
		Форма.СтатусДокументаРегистр = ПолучитьНачальныйСтатус(Форма.Объект.СпособСогласования);
		
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(Форма, Форма.СтатусДокументаРегистр);
		
	Иначе
		
		Форма.СтатусДокументаРегистр = ПолучитьТекущийСтатусСогласованияДокумента(Форма.Объект.Ссылка);
		ПрочитатьРегистрыСогласования(Форма);
		
	КонецЕсли;
	
	ОбновитьДеревоСогласующих(Форма);
	
	торо_РаботаССогласованиямиКлиентСервер.УстановитьВидимостьСогласованиеИУтверждение(Форма);
	
КонецПроцедуры

// Добавляет данные о согласовании в дополнительные свойства для проверки при проведении.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма документа.
//  ТекущийОбъект - ДокументОбъект - объект документа.
//
Процедура ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект) Экспорт
	
	Если ЭтаФорма.ИспользоватьСогласованиеДокументов Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", ЭтаФорма.СтатусДокументаРегистр);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Согласующие", ЭтаФорма.СогласующиеРегистр.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Функция сохраняет необходимые данные о согласовании при записи документа.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма документа.
//  ТекущийОбъект - ДокументОбъект - объект документа.
//
Процедура ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект) Экспорт
	
	Если ЭтаФорма.ИспользоватьСогласованиеДокументов Тогда
		торо_РаботаССогласованиямиКлиентСервер.ЗаписатьДеревоСогласования(ЭтаФорма);
		Если ЭтаФорма.СтатусДокументаРегистр = ПолучитьНачальныйСтатус(ТекущийОбъект.СпособСогласования) Тогда
			ЗаписатьРегистрыСогласования(ЭтаФорма, ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция обновляет реквизит ДеревоСогласования.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма документа.
// 
Процедура ОбновитьДеревоСогласующих(ЭтаФорма) Экспорт
	
	Дерево = ПолучитьДеревоСогласования(ЭтаФорма.Объект.СпособСогласования, ЭтаФорма.СтатусДокументаРегистр, ЭтаФорма.СогласующиеРегистр.Выгрузить(), ЭтаФорма.Объект.Ответственный);
	ЭтаФорма.ЗначениеВРеквизитФормы(Дерево,"ДеревоСогласования");
		
КонецПроцедуры

// Функция устанавливает способ согласования для вида документов.
//
// Параметры:
//  ВидДокумента - ПеречислениеСсылка.торо_ВидыДокументовСогласованияРемонтов - вид документа.
//  Организация - СправочникСылка.Организации - организация документа.
//  ПодразделениеОрганизации - СправочникСсылка.СтруктураПредприятия - подразделение документа.
//  ВернутьСтруктуруСНастройками - Булево - Если истина, то вместо ссылки наспособ согласования возвращается структура.
//
// Возвращаемое значение:
//  СправочникСсылка.торо_СпособыСогласованияДокументов, Структура - способ согласования по умолчанию или структура,
//			в зависимости от флага ВернутьСтруктуруСНастройками.
//
Функция ПолучитьСпособСогласованияПоУмолчанию(ВидДокумента, Организация, ПодразделениеОрганизации, ВернутьСтруктуруСНастройками = Ложь) Экспорт		
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СпособСогласования", Справочники.торо_СтатусыСогласованияДокументовРемонтныхРабот.ПустаяСсылка());
	СтруктураПараметров.Вставить("ЗапретПеревыбора", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	торо_НастройкиСогласованияДокументовТОиР.ВидДокумента КАК ВидДокумента,
	|	торо_НастройкиСогласованияДокументовТОиР.Организация КАК Организация,
	|	торо_НастройкиСогласованияДокументовТОиР.Подразделение КАК Подразделение,
	|	торо_НастройкиСогласованияДокументовТОиР.СпособСогласования КАК СпособСогласования,
	|	торо_НастройкиСогласованияДокументовТОиР.ЗапретПеревыбора КАК ЗапретПеревыбора,
	|	ВЫБОР
	|		КОГДА торо_НастройкиСогласованияДокументовТОиР.ВидДокумента = &ВидДокумента
	|				И торо_НастройкиСогласованияДокументовТОиР.Организация = &Организация
	|				И торо_НастройкиСогласованияДокументовТОиР.Подразделение = &Подразделение
	|			ТОГДА 1
	|		КОГДА торо_НастройкиСогласованияДокументовТОиР.ВидДокумента = &ВидДокумента
	|				И торо_НастройкиСогласованияДокументовТОиР.Организация = &Организация
	|				И торо_НастройкиСогласованияДокументовТОиР.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА торо_НастройкиСогласованияДокументовТОиР.ВидДокумента = &ВидДокумента
	|				И торо_НастройкиСогласованияДокументовТОиР.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_НастройкиСогласованияДокументовТОиР.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.торо_НастройкиСогласованияДокументовТОиР КАК торо_НастройкиСогласованияДокументовТОиР
	|ГДЕ
	|	торо_НастройкиСогласованияДокументовТОиР.ВидДокумента = &ВидДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() И ВыборкаДетальныеЗаписи.Приоритет <> 4 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Если ВернутьСтруктуруСНастройками Тогда
		Возврат СтруктураПараметров;	
	Иначе
		Возврат СтруктураПараметров.СпособСогласования;
	КонецЕсли;
	
КонецФункции

// Функция получает начальный статус документа по способу согласования.
//
// Параметры:
//		СпособСогласования - СправочникиОбъекта.торо_СпособыСогласованияДокументов - способ согласования.
//
// Возвращаемое значение:
//		СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот - начальный статус документа.
//
Функция ПолучитьНачальныйСтатус(СпособСогласования) Экспорт
	
	Возврат торо_РаботаССогласованиямиПовтИсп.ПолучитьНачальныйСтатус(СпособСогласования);
	
КонецФункции 

// Функция получает список следующих статусов документа по способу согласования.
//
// Параметры:
//		СпособСогласования - СправочникиОбъекта.торо_СпособыСогласованияДокументов - способ согласования.
//		ТекущийСтатус - СправочникиОбъекта.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//
// Возвращаемое значение:
//   СписокЗначений - список следующих статусов.
//
Функция ПолучитьСписокСледующихСтатусовДокумента(СпособСогласования, ТекущийСтатус) Экспорт
	
	СписокСледующихСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_МатрицаПереходаСтатусовДокументов.СледующийСтатус КАК СледующийСтатус
	|ИЗ
	|	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
	|ГДЕ
	|	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус = &ТекущийСтатус
	|	И торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = &СпособСогласования
	|
	|УПОРЯДОЧИТЬ ПО
	|	торо_МатрицаПереходаСтатусовДокументов.НомерСтатусаПерехода";
	
	Запрос.УстановитьПараметр("ТекущийСтатус", ТекущийСтатус);
	Запрос.УстановитьПараметр("СпособСогласования", СпособСогласования);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.СледующийСтатус) Тогда
			СписокСледующихСтатусов.Добавить(Выборка.СледующийСтатус);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СписокСледующихСтатусов;
	
КонецФункции 

// Функция получает список следующих статусов документа по способу согласования.
//
// Параметры:
//  СпособСогласования - СправочникОбъект.торо_СпособыСогласованияДокументов - способ согласования.
//  ТекущийСтатус - СправочникОбъект.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//
// Возвращаемое значение:
//   СписокЗначений - список следующих статусов.
//
Функция ПолучитьСписокСледующихСтатусовДокументаДетально(СпособСогласования, ТекущийСтатус) Экспорт
	
	СписокСледующихСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_МатрицаПереходаСтатусовДокументов.СледующийСтатус КАК СледующийСтатус,
	               |	торо_МатрицаПереходаСтатусовДокументов.НомерСтатусаПерехода КАК НомерСтатусаПерехода
	               |ПОМЕСТИТЬ ВТ_СледующиеСтатусы
	               |ИЗ
	               |	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
	               |ГДЕ
	               |	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус = &ТекущийСтатус
	               |	И торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = &СпособСогласования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_НастройкиСтатусовСогласованияДокументов.Статус КАК Статус,
	               |	торо_НастройкиСтатусовСогласованияДокументов.Начальный КАК Начальный
	               |ПОМЕСТИТЬ ВТ_НачальныеСтатусы
	               |ИЗ
	               |	РегистрСведений.торо_НастройкиСтатусовСогласованияДокументов КАК торо_НастройкиСтатусовСогласованияДокументов
	               |ГДЕ
	               |	торо_НастройкиСтатусовСогласованияДокументов.СпособСогласования = &СпособСогласования
	               |	И торо_НастройкиСтатусовСогласованияДокументов.Начальный = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СледующиеСтатусы.СледующийСтатус КАК СледующийСтатус,
	               |	ЕСТЬNULL(ВТ_НачальныеСтатусы.Начальный, ЛОЖЬ) КАК Начальный
	               |ИЗ
	               |	ВТ_СледующиеСтатусы КАК ВТ_СледующиеСтатусы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачальныеСтатусы КАК ВТ_НачальныеСтатусы
	               |		ПО ВТ_СледующиеСтатусы.СледующийСтатус = ВТ_НачальныеСтатусы.Статус
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_СледующиеСтатусы.НомерСтатусаПерехода";
	
	Запрос.УстановитьПараметр("ТекущийСтатус", ТекущийСтатус);
	Запрос.УстановитьПараметр("СпособСогласования", СпособСогласования);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СледующийСтатус) Тогда
			
			СтруктураВозврата = Новый Структура("СледующийСтатус, Начальный");
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
			СписокСледующихСтатусов.Добавить(СтруктураВозврата);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СписокСледующихСтатусов;
	
КонецФункции // РассчитатьПродолжительностьВСекундах()

// Функция получает список данных по статусу документа по способу согласования.
//
// Параметры:
//		СпособСогласования - СправочникиОбъекта.торо_СпособыСогласованияДокументов - способ согласования.
//		СтатусДокумента - СправочникиОбъекта.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//
// Возвращаемое значение:
//		СтруктураДанных - структура данных статуса.
//
Функция ПолучитьДанныеПоСтатусуДокумента(СпособСогласования, СтатусДокумента) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Начальный", Ложь);
	СтруктураДанных.Вставить("СогласованиеЗавершено", Ложь);
	СтруктураДанных.Вставить("ПроводитьДокумент", Ложь);
	СтруктураДанных.Вставить("ШаблонСообщенияЭлектроннойПочты", Неопределено);
	СтруктураДанных.Вставить("ЗапретитьРедактирование", Ложь);
	СтруктураДанных.Вставить("РазрешитьПометкуНаУдаление", Ложь);
	СтруктураДанных.Вставить("НеОтображатьВСпискеЗадач", Ложь);
	СтруктураДанных.Вставить("АвтоматическоеПроведение", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	торо_НастройкиСтатусовСогласованияДокументов.Начальный КАК Начальный,
	|	торо_НастройкиСтатусовСогласованияДокументов.СогласованиеЗавершено КАК СогласованиеЗавершено,
	|	торо_НастройкиСтатусовСогласованияДокументов.ПроводитьДокумент КАК ПроводитьДокумент,
	|	торо_НастройкиСтатусовСогласованияДокументов.ШаблонСообщенияЭлектроннойПочты КАК ШаблонСообщенияЭлектроннойПочты,
	|	торо_НастройкиСтатусовСогласованияДокументов.ЗапретитьРедактирование КАК ЗапретитьРедактирование,
	|	торо_НастройкиСтатусовСогласованияДокументов.РазрешитьПометкуНаУдаление КАК РазрешитьПометкуНаУдаление,
	|	торо_НастройкиСтатусовСогласованияДокументов.НеОтображатьВСпискеЗадач КАК НеОтображатьВСпискеЗадач,
	|	торо_НастройкиСтатусовСогласованияДокументов.АвтоматическоеПроведение КАК АвтоматическоеПроведение
	|ИЗ
	|	РегистрСведений.торо_НастройкиСтатусовСогласованияДокументов КАК торо_НастройкиСтатусовСогласованияДокументов
	|ГДЕ
	|	торо_НастройкиСтатусовСогласованияДокументов.Статус = &ТекущийСтатус
	|	И торо_НастройкиСтатусовСогласованияДокументов.СпособСогласования = &СпособСогласования";
	
	Запрос.УстановитьПараметр("ТекущийСтатус", СтатусДокумента);
	Запрос.УстановитьПараметр("СпособСогласования", СпособСогласования);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // РассчитатьПродолжительностьВСекундах()

// Функция проверяет, используется ли система согласования для документов данного типа.
//
// Параметры:
//  ИмяТипа - ПеречислениеСсылка.торо_ВидыДокументовСогласованияРемонтов - тип документа.
//  Регламентный - Булево - это документ регламентного мероприятия.
//  МТО - Булево - это документ МТО.
// Возвращаемое значение:
//  Булево - для документа включено согласование.
Функция ПроверитьИспользованиеСогласованияДокументов(Знач ИмяТипа = "", Регламентный = Ложь, МТО = Ложь) Экспорт
	
	ФОИспользоватьСогласование = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСогласование");
	КонстантаРемонты = Константы.торо_ИспользоватьСогласованиеДокументовРемонтов.Получить();
	КонстантаМероприятия = Константы.торо_ИспользоватьСогласованиеДокументовМероприятий.Получить();
	КонстантаМТО = Константы.торо_ИспользоватьСогласованиеДокументовМТО.Получить();
	Если ИмяТипа = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ОстановочныеРемонты 
			или ИмяТипа = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АктПриемкиОборудования
			Тогда
		СогласованиеИспользуется = Ложь;
	Иначе		
		СогласованиеИспользуется = Константы.ИспользоватьИнтеграциюС1СДокументооборот.Получить() И Константы.ИспользоватьПроцессыИЗадачи1СДокументооборота.Получить();
	КонецЕсли;
	
	Если НЕ ФОИспользоватьСогласование ИЛИ (НЕ КонстантаРемонты И НЕ КонстантаМероприятия И Не КонстантаМТО) Тогда
		Возврат Ложь;
	ИначеЕсли ИмяТипа = "" Тогда
		Возврат НЕ СогласованиеИспользуется;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	торо_ВидыДокументовСогласования.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	РегистрСведений.торо_ВидыДокументовСогласования КАК торо_ВидыДокументовСогласования
		|ГДЕ
		|	торо_ВидыДокументовСогласования.ВидДокумента = &ВидДокумента";
		
		// В случае формирования уведомлений передается строка с именем документа. На всякий случай возьмем в попытку.
		Если ТипЗнч(ИмяТипа) = Тип("Строка") Тогда

			Попытка
				Если Регламентный Тогда
					ИмяТипа = Перечисления.торо_ВидыДокументовСогласованияМероприятий[ИмяТипа];
				ИначеЕсли МТО Тогда
					ИмяТипа = Перечисления.торо_ВидыДокументовСогласованияМТО[ИмяТипа];
				Иначе
					ИмяТипа = Перечисления.торо_ВидыДокументовСогласованияРемонтов[ИмяТипа];
				КонецЕсли;
			Исключение
				// Значит документ с таким именем не участвует в согласованиях и можем спокойно возвращать ложь.
				Возврат Ложь;
			КонецПопытки;

		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидДокумента", ИмяТипа);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			// согласование по документу не используется
			Возврат Ложь;
		КонецЕсли;
		
		Если Регламентный Тогда
			СогласованиеДокументов = КонстантаМероприятия;
		ИначеЕсли МТО Тогда
			СогласованиеДокументов = КонстантаМТО;
		Иначе
			СогласованиеДокументов = КонстантаРемонты;
		КонецЕсли;
		
		Возврат СогласованиеДокументов И Не СогласованиеИспользуется;
	КонецЕсли;
	
КонецФункции

// Функция возвращает статус согласования документа из регистра торо_ТекущиеСтатусыСогласованияДокументов.
// Параметры:
//  Документ - ДокументСсылка - документ, для которого получается статус.
// Возвращаемое значение:
//  СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот - статус согласования.
Функция ПолучитьТекущийСтатусСогласованияДокумента(Документ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Справочники.торо_СтатусыСогласованияДокументовРемонтныхРабот.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТекущиеСтатусыСогласованияДокументов.СогласуемыйДокумент,
	|	торо_ТекущиеСтатусыСогласованияДокументов.СтатусДокумента
	|ИЗ
	|	РегистрСведений.торо_ТекущиеСтатусыСогласованияДокументов КАК торо_ТекущиеСтатусыСогласованияДокументов
	|ГДЕ
	|	торо_ТекущиеСтатусыСогласованияДокументов.СогласуемыйДокумент = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатусДокумента;
	КонецЕсли;
	
	Возврат Справочники.торо_СтатусыСогласованияДокументовРемонтныхРабот.ПустаяСсылка();
	
КонецФункции

// Функция возвращает список лиц, уже согласовавших документ на последней итерации.
// Параметры:
//  Документ - ДокументСсылка - документ, для которого получается статус.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица согласующих.
Функция ПолучитьТаблицуСогласующихДокумента(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТекущиеСогласующиеДокументов.СтатусДокумента,
	|	торо_ТекущиеСогласующиеДокументов.Согласующий,
	|	торо_ТекущиеСогласующиеДокументов.Замещающий,
	|	торо_ТекущиеСогласующиеДокументов.Согласовано
	|ИЗ
	|	РегистрСведений.торо_ТекущиеСогласующиеДокументов КАК торо_ТекущиеСогласующиеДокументов
	|ГДЕ
	|	торо_ТекущиеСогласующиеДокументов.СогласуемыйДокумент = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Возвращает ключ записи регистра сведений торо_ИсторияСтатусовСогласованияДокументов по структуре ключевых полей.
//
// Параметры:
//		СтруктураКлюча - Структура - Структура с полями, соответствующмими измерениям регистра.
// Возвращаемое значение:
//		РегистрСведенийКлючЗаписи.торо_ИсторияСтатусовСогласованияДокументов - ключ записи. 
Функция ПолучитьКлючЗаписиИсторииСтатусовДокументов(СтруктураКлюча) Экспорт
	
	Возврат РегистрыСведений.торо_ИсторияСтатусовСогласованияДокументов.СоздатьКлючЗаписи(СтруктураКлюча);
		
КонецФункции

// Возвращает комментарий к статусу согласования из записи 
// регистра сведений торо_ИсторияСтатусовСогласованияДокументов,
// определяемой по значениям измерений, переданных в параметре.
//
// Параметры:
//		СтруктураКлюча - Структура - Структура с полями, соответствующмими измерениям регистра.
// Возвращаемое значение:
//		Строка - текст комментария к статусу согласования. 
Функция ПолучитьКомментарийКСтатусуСогласования(СтруктураКлюча) Экспорт
	
	Запись = РегистрыСведений.торо_ИсторияСтатусовСогласованияДокументов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СтруктураКлюча);
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Возврат Запись.Комментарий;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗавершитьУтверждениеСтатусаДокумента(Форма, ПараметрыОповещения) Экспорт
	
	Объект = Форма.Объект;
	ВыбранныйСтатус = ПараметрыОповещения.ВыбранныйСтатус;
	СтарыйСтатус = Форма.СтатусДокументаРегистр;
	
	НачатьТранзакцию();
	
	Попытка
		
		СменитьСтатус = НужноИзменитьСтатусДокумента(Форма, ВыбранныйСтатус);
			
		СтруктураПараметров = Новый Структура;
		Если СменитьСтатус Тогда
			
			Форма.СтатусДокументаРегистр = ВыбранныйСтатус;
			
			ПроводитьДокумент = Ложь;
			СтруктураДанных = ПолучитьДанныеПоСтатусуДокумента(Объект.СпособСогласования, Форма.СтатусДокументаРегистр);
			ПроводитьДокумент = СтруктураДанных.ПроводитьДокумент;
			
			Если ПроводитьДокумент И (Объект.Проведен Или СтруктураДанных.АвтоматическоеПроведение) Тогда
				СтруктураПараметров.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
				СтруктураПараметров.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
			Иначе 
				СтруктураПараметров.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		Иначе
			СтруктураПараметров.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
			СтруктураДанных = ПолучитьДанныеПоСтатусуДокумента(Объект.СпособСогласования, Форма.СтатусДокументаРегистр);
		КонецЕсли;
		
		ЗаписатьРегистрыСогласования(Форма);
		Если СтруктураДанных.АвтоматическоеПроведение Тогда
			Форма.Записать(СтруктураПараметров);
		КонецЕсли;
		
		ДобавитьНапоминанияПоСтатусамСогласования(Объект.Ссылка);
		ОбновитьДеревоСогласующих(Форма);

		торо_РаботаССогласованиямиКлиентСервер.УстановитьВидимостьСогласованиеИУтверждение(Форма);
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение,, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
		// В случае ошибки перечитываем регистры и обновляем дерево, т.к. после выбора статуса сразу добавляется строка
		// в историю статусов и в дереве согласования проставляются флаги. Если не записались регистры или документ
		// не записался - откатываем назад.
		Форма.СтатусДокументаРегистр = СтарыйСтатус;
		
		ПрочитатьРегистрыСогласования(Форма);
		ОбновитьДеревоСогласующих(Форма);
		
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеДляДереваСогласования(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьСогласованиеДокументов Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	// Отображение статуса документа только на верхнем уровне.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСогласованияСтатусДокумента");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отображение согласующего только на втором уровне.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСогласованияСогласующий");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отображение замещающего только на третьем уровне.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСогласованияЗамещающий");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Возвращает признак того, что форму документа нужно запретить редактировать (кроме кнопок согласования).
//
// Параметры:
//		СпособСогласования - СправочникиОбъекта.торо_СпособыСогласованияДокументов - способ согласования.
//		СтатусДокумента - СправочникиОбъекта.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//
// Возвращаемое значение:
//		Булево - Истина, если форму нужно заблокировать.
//
Функция НужноЗаблокироватьФорму(СпособСогласования, СтатусДокумента) Экспорт
	
	СтруктураДанныхПоСтатусу = ПолучитьДанныеПоСтатусуДокумента(СпособСогласования, СтатусДокумента);
	
	Возврат СтруктураДанныхПоСтатусу.ЗапретитьРедактирование = Истина
				И НЕ Пользователи.ЭтоПолноправныйПользователь(Неопределено, Ложь, Ложь);
	
КонецФункции

// Проверяет, выбран ли переданный способ согласования уже в каких-либо документах.
Функция СпособСогласованияИспользуется(СпособСогласования) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СпособСогласования) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипыСогласуемыхДокументов = Метаданные.ОпределяемыеТипы.торо_СогласуемыеДокументы.Тип.Типы();
	Схема = Новый СхемаЗапроса;
	ЗапросВыбораСхемыЗапроса = Схема.ПакетЗапросов.Получить(0);
	
	Для каждого ТипДокумента из ТипыСогласуемыхДокументов Цикл
		ПолноеИмя = Метаданные.НайтиПоТипу(ТипДокумента).ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
		ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипДокумента);
		
		ИмяТаблицы = ВидОбъекта+"."+ИмяОбъекта;
		
		ОператорВыбрать = ЗапросВыбораСхемыЗапроса.Операторы.Добавить();
		ОператорВыбрать.КоличествоПолучаемыхЗаписей = 1;
		ОператорВыбрать.Источники.Добавить(ИмяТаблицы, "ТаблицаДокумента");
		ОператорВыбрать.ВыбираемыеПоля.Добавить("ТаблицаДокумента.Ссылка");
		ОператорВыбрать.Отбор.Добавить("ТаблицаДокумента.СпособСогласования = &СпособСогласования");
	КонецЦикла;
	
	// Удаляем пустой оператор выбора, созданный по умолчанию. 
	// Его нельзя удалить, если он единствнныый.
	ЗапросВыбораСхемыЗапроса.Операторы.Удалить(0);
	
	Запрос = Новый Запрос(Схема.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("СпособСогласования", СпособСогласования);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат НЕ Результат.Пустой();
	
КонецФункции

#Область ПодпискиНаСобытия

Процедура торо_СогласованиеОбработкаЗаполненияОбработчик(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.СпособСогласования) Тогда
		СтруктураПараметров = ПараметрыИспользованияСогласованияДокумента(Источник);
		
		Если НЕ СтруктураПараметров.ИспользоватьСогласование Тогда
			Возврат;
		КонецЕсли; 
		
		Если Не ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.торо_УстановкаМинимальногоОстаткаНоменклатуры") Тогда
			Источник.СпособСогласования = ПолучитьСпособСогласованияПоУмолчанию(СтруктураПараметров.ВидДокументаЗначение, Источник.Организация, Источник.Подразделение);
		Иначе
			Источник.СпособСогласования = ПолучитьСпособСогласованияПоУмолчанию(СтруктураПараметров.ВидДокументаЗначение, Источник.Организация, Справочники.СтруктураПредприятия.ПустаяСсылка());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура торо_СогласованиеПриКопированииДокументаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Источник.СпособСогласования = Неопределено;
	
	СтруктураПараметров = ПараметрыИспользованияСогласованияДокумента(Источник);
	Если НЕ СтруктураПараметров.ИспользоватьСогласование Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.торо_УстановкаМинимальногоОстаткаНоменклатуры") Тогда
			Источник.СпособСогласования = ПолучитьСпособСогласованияПоУмолчанию(СтруктураПараметров.ВидДокументаЗначение, Источник.Организация, Источник.Подразделение);
		Иначе
			Источник.СпособСогласования = ПолучитьСпособСогласованияПоУмолчанию(СтруктураПараметров.ВидДокументаЗначение, Источник.Организация, Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли; 
		
КонецПроцедуры

Процедура торо_СогласованиеПроверкиПередЗаписьюДокументаОбработчик(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыИспользованияСогласованияДокумента(Источник);
	
	Если НЕ СтруктураПараметров.ИспользоватьСогласование Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Согласование_ВидДокумента", СтруктураПараметров.ВидДокументаМетаданные);
	ДополнительныеСвойства.Вставить("Согласование_Регламентный", СтруктураПараметров.Регламентный);
	ДополнительныеСвойства.Вставить("Согласование_МТО", СтруктураПараметров.МТО);
	ДополнительныеСвойства.Вставить("ИспользоватьСогласование",  СтруктураПараметров.ИспользоватьСогласование);
	
	// Если документ новый, то в регистре данных еще не будет,
	// но в ДополнительныеСвойства будет статус с формы документа.
	Если ДополнительныеСвойства.Свойство("СтатусДокумента") Тогда
		СтатусДокумента = ДополнительныеСвойства.СтатусДокумента;
	ИначеЕсли НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		// Документ записывается через код без открытия формы.
		// Следует выполнить установку начального статуса.
		СтатусДокумента = ПолучитьНачальныйСтатус(Источник.СпособСогласования);
		ЗаполнитьСвойстваДокументаПередЗаписьюБезОткрытияФормы(Источник, СтатусДокумента);
	Иначе
		СтатусДокумента = ПолучитьТекущийСтатусСогласованияДокумента(Источник.Ссылка);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СтатусДокумента", СтатусДокумента);
	
	// Проверить разрешение на пометку удаления
	Если Источник.ПометкаУдаления Тогда
		ПроверитьРазрешениеНаПометкуУдаленияПередЗаписьюДокумента(Источник.СпособСогласования, СтатусДокумента, Источник.ПометкаУдаления, Источник.Ссылка.ПометкаУдаления, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверить, можно ли проводить документ
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьРазрешениеПроведенияПоСтатусу(Источник.СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Источник.Организация <> Источник.Ссылка.Организация Тогда
		ДополнительныеСвойства.Вставить("ИзмениласьОрганизация", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура торо_СогласованиеПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	
	Если НЕ ДополнительныеСвойства.Свойство("ИспользоватьСогласование") ИЛИ ДополнительныеСвойства.ИспользоватьСогласование <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СтатусДокумента = ДополнительныеСвойства.СтатусДокумента;
	
	Если ЗначениеЗаполнено(Источник.СпособСогласования) 
		И (СтатусДокумента = ПолучитьНачальныйСтатус(Источник.СпособСогласования)
		ИЛИ ДополнительныеСвойства.Свойство("ИзмениласьОрганизация"))	Тогда
		ДобавитьНапоминанияПоСтатусамСогласования(Источник.Ссылка, ДополнительныеСвойства);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Записать_СтатусДокумента") Тогда
		МенеджерЗаписи = РегистрыСведений.торо_ТекущиеСтатусыСогласованияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СогласуемыйДокумент = Источник.Ссылка;
		МенеджерЗаписи.СтатусДокумента = СтатусДокумента;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Записать_ИсторияСтатусовСогласования") Тогда
		НаборДляЗаписи = РегистрыСведений.торо_ИсторияСтатусовСогласованияДокументов.СоздатьНаборЗаписей();
		НаборДляЗаписи.Отбор.СогласуемыйДокумент.Установить(Источник.Ссылка);
		Для каждого Строка из ДополнительныеСвойства.ИсторияСтатусовСогласования Цикл
			НоваяСтрока = НаборДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.СогласуемыйДокумент = Источник.Ссылка;
		КонецЦикла;
		НаборДляЗаписи.Записать(Истина);
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("Записать_Согласующие") Тогда
		НаборДляЗаписи = РегистрыСведений.торо_ТекущиеСогласующиеДокументов.СоздатьНаборЗаписей();
		НаборДляЗаписи.Отбор.СогласуемыйДокумент.Установить(Источник.Ссылка);
		Для каждого Строка из ДополнительныеСвойства.Согласующие Цикл
			НоваяСтрока = НаборДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.СогласуемыйДокумент = Источник.Ссылка;
		КонецЦикла;
		НаборДляЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьРеквизитыФормы(Форма)
	
	СтруктураДляПроверки = Новый Структура("СтатусДокументаРегистр,
														|ДеревоСогласования,
														|ИсторияСтатусовРегистр,
														|СогласующиеРегистр");
	
	ЗаполнитьЗначенияСвойств(СтруктураДляПроверки, Форма);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеРевизита = Новый РеквизитФормы("СогласованиеТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
		
	ОписаниеРевизита = Новый РеквизитФормы("ИспользоватьСогласованиеДокументов", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
	
	// По факту тип реквизита Структура, но на форме ее можно хранить только в реквизите типа Произвольный.
	ОписаниеРевизита = Новый РеквизитФормы("ПараметрыСпособаСогласованияПоУмолчанию", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
	
	Если СтруктураДляПроверки.СтатусДокументаРегистр = Неопределено Тогда
		ОписаниеРевизита = Новый РеквизитФормы("СтатусДокументаРегистр", Новый ОписаниеТипов("СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
	КонецЕсли;
	
	Если СтруктураДляПроверки.ДеревоСогласования = Неопределено Тогда
		ИмяТаблицы = "ДеревоСогласования";
		ОписаниеРевизита = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ДеревоЗначений"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
		
		ОписаниеРевизита = Новый РеквизитФормы("СтатусДокумента", Новый ОписаниеТипов("СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот"), ИмяТаблицы, 
					НСтр("ru='Статус документа'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
		
		ОписаниеРевизита = Новый РеквизитФормы("Согласующий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"), ИмяТаблицы,
					НСтр("ru='Согласующий'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("Замещающий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"), ИмяТаблицы,
					НСтр("ru='Замещающий'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("Согласовано", Новый ОписаниеТипов("Булево"), ИмяТаблицы,
					НСтр("ru='Согласовано'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("Уровень", Новый ОписаниеТипов("Число"), ИмяТаблицы);
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("Начальный", Новый ОписаниеТипов("Булево"), ИмяТаблицы);
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
	КонецЕсли;
	
	Если СтруктураДляПроверки.ИсторияСтатусовРегистр = Неопределено Тогда
		ИмяТаблицы = "ИсторияСтатусовРегистр";
		ОписаниеРевизита = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
		
		ОписаниеРевизита = Новый РеквизитФормы("Период", Новый ОписаниеТипов("Дата"), ИмяТаблицы,
					НСтр("ru='Дата'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
		
		ОписаниеРевизита = Новый РеквизитФормы("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"), ИмяТаблицы,
					НСтр("ru='Пользователь'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("ЗаКого", Новый ОписаниеТипов("СправочникСсылка.Пользователи"), ИмяТаблицы,
					НСтр("ru='За кого'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("СтатусДокумента", Новый ОписаниеТипов("СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот"), ИмяТаблицы,
					НСтр("ru='Статус документа'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяТаблицы,
					НСтр("ru='Комментарий'"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
	КонецЕсли;
	
	Если СтруктураДляПроверки.СогласующиеРегистр = Неопределено Тогда
		ИмяТаблицы = "СогласующиеРегистр";
		ОписаниеРевизита = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
		
		ОписаниеРевизита = Новый РеквизитФормы("СтатусДокумента", Новый ОписаниеТипов("СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот"), ИмяТаблицы);
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
		
		ОписаниеРевизита = Новый РеквизитФормы("Согласующий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"), ИмяТаблицы);
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("Замещающий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"), ИмяТаблицы);
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);

		ОписаниеРевизита = Новый РеквизитФормы("Согласовано", Новый ОписаниеТипов("Булево"), ИмяТаблицы);
		ДобавляемыеРеквизиты.Добавить(ОписаниеРевизита);
	КонецЕсли;

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура СоздатьЭлементыФормы(Форма, Контекст)
	
	ГруппаДляСтатуса = "ГруппаСтатусСогласования";
	ГруппаДляРазмещения = "ГруппаСогласование";
	
	Если Контекст <> Неопределено Тогда
		Если Контекст.Свойство("ГруппаДляСтатуса") Тогда
			ГруппаДляСтатуса = Контекст.ГруппаДляСтатуса;
		КонецЕсли;
		Если Контекст.Свойство("ГруппаДляРазмещения") Тогда
			ГруппаДляРазмещения = Контекст.ГруппаДляРазмещения;
		КонецЕсли;
	КонецЕсли;
	
	// Статус согласования
	ЭлементГруппаДляСтатуса = Форма.Элементы.Найти(ГруппаДляСтатуса);
	Если ЭлементГруппаДляСтатуса <> Неопределено Тогда
		ШрифтНадписей = Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,,,,,Истина);
		
		НовыйЭлемент = Форма.Элементы.Добавить("НадписьТекущийСтатусСогласования", Тип("ДекорацияФормы"), ЭлементГруппаДляСтатуса);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = НСтр("ru='Текущий статус согласования:'");
		НовыйЭлемент.ЦветТекста = WebЦвета.КоролевскиГолубой;
		НовыйЭлемент.Шрифт = ШрифтНадписей;
		
		НовыйЭлемент = Форма.Элементы.Добавить("ТекущийСтатусСогласования", Тип("ПолеФормы"), ЭлементГруппаДляСтатуса);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "СтатусДокументаРегистр";
		НовыйЭлемент.ЦветТекста = WebЦвета.КоролевскиГолубой;
		НовыйЭлемент.Шрифт = ШрифтНадписей;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
	ЭлементДляРазмещения = Форма.Элементы.Найти(ГруппаДляРазмещения);
	Если ЭлементДляРазмещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДляРазмещения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	ГруппаВертикальная = Форма.Элементы.Добавить("Согласование_ГруппаВертикальная", Тип("ГруппаФормы"), ЭлементДляРазмещения);
	ГруппаВертикальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВертикальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаВертикальная.ОтображатьЗаголовок = Ложь;
	
	// Способ согласования
	НовыйЭлемент = Форма.Элементы.Добавить("СпособСогласования", Тип("ПолеФормы"), ГруппаВертикальная);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.СпособСогласования";
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СпособСогласованияПриИзменении");
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_СпособСогласованияНачалоВыбора");
	
	// Предупреждение о редактировании статуса согласования
	НовыйЭлемент = Форма.Элементы.Добавить("ПредупреждениеСпособРедактируется", Тип("ДекорацияФормы"), ГруппаВертикальная);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = НСтр("ru='Выбранный способ согласования находится на редактировании, согласование по нему невозможно. Для возобновления согласования необходимо перевести его в состояние ""Действует"".'");
	НовыйЭлемент.ЦветТекста = WebЦвета.ТемноБордовый;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
	// Команда "Утвердить статус"
	КоманднаяПанельДеревоСогласования  = Форма.Элементы.Добавить("КоманднаяПанель_ДеревоСогласования", Тип("ГруппаФормы"), ГруппаВертикальная);
   КоманднаяПанельДеревоСогласования.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	Команда = Форма.Команды.Добавить("УтвердитьСтатусСогласования");
	Команда.Заголовок = НСтр("ru='Утвердить статус'");
	Команда.Действие = "Подключаемый_УтвердитьСтатусСогласования";
	Команда.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДанныеПолучены;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	Кнопка = Форма.Элементы.Добавить("ДеревоСогласованияУтвердитьСтатус", Тип("КнопкаФормы"), КоманднаяПанельДеревоСогласования);
	Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Кнопка.ИмяКоманды = "УтвердитьСтатусСогласования";
	
	// Дерево согласования
	ЭлементДеревоСогласования = Форма.Элементы.Добавить("ДеревоСогласования", Тип("ТаблицаФормы"), ГруппаВертикальная);
	ЭлементДеревоСогласования.Отображение = ОтображениеТаблицы.Дерево;
	ЭлементДеревоСогласования.ПутьКДанным = "ДеревоСогласования";
	ЭлементДеревоСогласования.ТолькоПросмотр = Истина;
	ЭлементДеревоСогласования.ИзменятьПорядокСтрок = Ложь;
	ЭлементДеревоСогласования.ИзменятьСоставСтрок = Ложь;
	ЭлементДеревоСогласования.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	ГруппаКолонок = Форма.Элементы.Добавить("ДеревоСогласованияГруппа1", Тип("ГруппаФормы"), ЭлементДеревоСогласования);
	ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаКолонок.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаКолонок.Заголовок = НСтр("ru='Статус документа / Согласующий / Замещающий'");
	ГруппаКолонок.ОтображатьВШапке = Истина;
	
	Колонка = Форма.Элементы.Добавить("ДеревоСогласованияСтатусДокумента", Тип("ПолеФормы"), ГруппаКолонок);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ДеревоСогласования.СтатусДокумента";
	Колонка.ОтображатьВШапке = Ложь;
	
	Колонка = Форма.Элементы.Добавить("ДеревоСогласованияСогласующий", Тип("ПолеФормы"), ГруппаКолонок);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ДеревоСогласования.Согласующий";
	Колонка.ОтображатьВШапке = Ложь;
	
	Колонка = Форма.Элементы.Добавить("ДеревоСогласованияЗамещающий", Тип("ПолеФормы"), ГруппаКолонок);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ДеревоСогласования.Замещающий";
	Колонка.ОтображатьВШапке = Ложь;
	
	Колонка = Форма.Элементы.Добавить("ДеревоСогласованияСогласовано", Тип("ПолеФормы"), ЭлементДеревоСогласования);
	Колонка.Вид = ВидПоляФормы.ПолеФлажка;
	Колонка.ПутьКДанным = "ДеревоСогласования.Согласовано";
	
	Колонка = Форма.Элементы.Добавить("ДеревоСогласованияУровень", Тип("ПолеФормы"), ЭлементДеревоСогласования);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ДеревоСогласования.Уровень";
	Колонка.Видимость = Ложь;
	
	// История статусов
	ЭлементИсторияСтатусов = Форма.Элементы.Добавить("ИсторияСтатусовСогласования", Тип("ТаблицаФормы"), ЭлементДляРазмещения);
	ЭлементИсторияСтатусов.Отображение = ОтображениеТаблицы.Список;
	ЭлементИсторияСтатусов.ПутьКДанным = "ИсторияСтатусовРегистр";
	ЭлементИсторияСтатусов.ТолькоПросмотр = Истина;
	ЭлементИсторияСтатусов.ИзменятьПорядокСтрок = Ложь;
	ЭлементИсторияСтатусов.ИзменятьСоставСтрок = Ложь;
	ЭлементИсторияСтатусов.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	Колонка = Форма.Элементы.Добавить("ИсторияСтатусовСогласованияПериод", Тип("ПолеФормы"), ЭлементИсторияСтатусов);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ИсторияСтатусовРегистр.Период";
	
	Колонка = Форма.Элементы.Добавить("ИсторияСтатусовСогласованияПользователь", Тип("ПолеФормы"), ЭлементИсторияСтатусов);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ИсторияСтатусовРегистр.Пользователь";
	
	Колонка = Форма.Элементы.Добавить("ИсторияСтатусовСогласованияЗаКого", Тип("ПолеФормы"), ЭлементИсторияСтатусов);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ИсторияСтатусовРегистр.ЗаКого";
	
	Колонка = Форма.Элементы.Добавить("ИсторияСтатусовСогласованияСтатусДокумента", Тип("ПолеФормы"), ЭлементИсторияСтатусов);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ИсторияСтатусовРегистр.СтатусДокумента";
	
	Колонка = Форма.Элементы.Добавить("ИсторияСтатусовСогласованияКомментарий", Тип("ПолеФормы"), ЭлементИсторияСтатусов);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = "ИсторияСтатусовРегистр.Комментарий";

	ЭлементИсторияСтатусов.УстановитьДействие("Выбор", "Подключаемый_ИсторияСтатусовСогласованияВыбор");
	
КонецПроцедуры

// Строит дерево согласования для документа.
//
// Параметры:
//		СпособСогласования - СправочникСсылка.торо_СпособыСогласованияДокументов - способ соглсования.
//		СтатусДокумента - СправочникиОбъекта.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//		ТаблицаСогласовавших - ТаблицаЗначений - таблица согласовавших.
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево согласования.
//
Функция ПолучитьДеревоСогласования(СпособСогласования, СтатусДокумента, ТаблицаСогласовавших, Ответственный)
	
	ДеревоСогласования = Новый ДеревоЗначений;
	ДеревоСогласования.Колонки.Добавить("СтатусДокумента", Новый ОписаниеТипов("СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот"));
	ДеревоСогласования.Колонки.Добавить("Согласующий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоСогласования.Колонки.Добавить("Замещающий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоСогласования.Колонки.Добавить("Согласовано", Новый ОписаниеТипов("Булево"));
	ДеревоСогласования.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ДеревоСогласования.Колонки.Добавить("Начальный", Новый ОписаниеТипов("Булево"));
	
	// Создадим строки дерева согласования.
	СписокСледующихСтатусов = ПолучитьСписокСледующихСтатусовДокументаДетально(СпособСогласования, СтатусДокумента);
	Для Каждого ЭлементСписка из СписокСледующихСтатусов Цикл
		ДобавитьОтветственногоПоДокументу = Ложь;
		
		СтрокаСтатус = ДеревоСогласования.Строки.Добавить();
		СтрокаСтатус.СтатусДокумента = ЭлементСписка.Значение.СледующийСтатус;
		СтрокаСтатус.Уровень         = 0;
		СтрокаСтатус.Начальный = ЭлементСписка.Значение.Начальный;
		
		МассивПользователей = СпособСогласования.ПорядокСогласования.НайтиСтроки(Новый Структура("ТекущийСтатус", ЭлементСписка.Значение.СледующийСтатус));
		
		Для Каждого ЭлементМассива Из МассивПользователей Цикл
			
			Если ТипЗнч(ЭлементМассива.Пользователь) = Тип("Строка") Тогда
				ДобавитьОтветственногоПоДокументу = Истина;
				Продолжить;
			КонецЕсли;
			
			СтрокаСогласующий = СтрокаСтатус.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСогласующий, СтрокаСтатус);
			СтрокаСогласующий.Согласующий = ЭлементМассива.Пользователь;
			СтрокаСогласующий.Уровень     = 1;
			
			МассивЗамещающих = СпособСогласования.Замещающие.НайтиСтроки(Новый Структура("Пользователь, ТекущийСтатус", ЭлементМассива.Пользователь, ЭлементМассива.ТекущийСтатус));
			Для Каждого ЭлементМассиваЗамов Из МассивЗамещающих Цикл
				
				СтрокаЗамещающий = СтрокаСогласующий.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗамещающий, СтрокаСогласующий);
				СтрокаЗамещающий.Замещающий = ЭлементМассиваЗамов.Замещающий;
				СтрокаЗамещающий.Уровень    = 2;
			КонецЦикла; 
			
		КонецЦикла; 
		
		Если ДобавитьОтветственногоПоДокументу Тогда
			Если СтрокаСтатус.Строки.Найти(Ответственный, "Согласующий") = Неопределено Тогда
				СтрокаСогласующий = СтрокаСтатус.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСогласующий, СтрокаСтатус);
				СтрокаСогласующий.Согласующий = Ответственный;
				СтрокаСогласующий.Уровень     = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПроставитьФлагиСогласованоВДереве(ДеревоСогласования, СписокСледующихСтатусов, ТаблицаСогласовавших);
	
	Возврат ДеревоСогласования;
	
КонецФункции 

Процедура ПроставитьФлагиСогласованоВДереве(ДеревоСогласования, СписокСледующихСтатусов, ТаблицаСогласовавших)
	
	// Отметим уже согласовавших сотрудников
	Для Каждого ЭлементСписка из СписокСледующихСтатусов Цикл
		
		МассивСогласовавших = ТаблицаСогласовавших.НайтиСтроки(Новый Структура("СтатусДокумента", ЭлементСписка.Значение.СледующийСтатус));
		Для Каждого СтрокаСогласовавших Из МассивСогласовавших Цикл
			МассивСтрокДС = ДеревоСогласования.Строки.НайтиСтроки(Новый Структура("СтатусДокумента, Согласующий, Замещающий",
			ЭлементСписка.Значение.СледующийСтатус, СтрокаСогласовавших.Согласующий, СтрокаСогласовавших.Замещающий), Истина);
			
			Для Каждого СтрокаДС Из МассивСтрокДС Цикл
				СтрокаДС.Согласовано = СтрокаСогласовавших.Согласовано;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Уровень1 из ДеревоСогласования.Строки Цикл
		
		Уровень2ВсеСогласовали = Истина;
		Для каждого Уровень2 из Уровень1.Строки Цикл
			
			Уровень3ВсеСогласовали = Ложь;
			Для каждого Уровень3 из Уровень2.Строки Цикл
				Если Уровень3.Согласовано Тогда
					Уровень3ВсеСогласовали = Истина;
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			
			Если Уровень2.Строки.Количество() > 0 и Уровень3ВсеСогласовали	Тогда 
				Уровень2.Согласовано = Истина; 
			КонецЕсли;
			
			Если НЕ уровень2.Согласовано Тогда
				Уровень2ВсеСогласовали = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Уровень1.Строки.Количество()>0 и Уровень2ВсеСогласовали Тогда 
			Уровень1.Согласовано = Истина; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура записывает данные в регистры торо_ТекущиеСогласующиеДокументов,
// торо_ИсторияСтатусовСогласованияДокументов, торо_ТекущиеСтатусыСогласованияДокументов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ТекущийОбъект - ДокументОбъект - документ.
//
Процедура ЗаписатьРегистрыСогласования(Форма, ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект <> Неопределено Тогда
		Объект = ТекущийОбъект;
	Иначе
		Объект = Форма.Объект;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	// Запись таблицы Согласующие.
	Форма.СогласующиеРегистр.Очистить();
	
	МассивСогласованного = Новый Массив;			
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСогласованного, Форма.ДеревоСогласования.ПолучитьЭлементы());
	
	Для Каждого ЭлементМассива Из МассивСогласованного Цикл
		Если ЭлементМассива.Согласовано Тогда 
			ЗаполнитьЗначенияСвойств(Форма.СогласующиеРегистр.Добавить(), ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	НаборДляЗаписи = РегистрыСведений.торо_ТекущиеСогласующиеДокументов.СоздатьНаборЗаписей();
   НаборДляЗаписи.Отбор.СогласуемыйДокумент.Установить(Объект.Ссылка);
	Для каждого Строка из Форма.СогласующиеРегистр Цикл
		НоваяСтрока = НаборДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.СогласуемыйДокумент = Объект.Ссылка;
	КонецЦикла;
	НаборДляЗаписи.Записать(Истина);
	
	// Запись таблицы ИсторияСтатусов.
	НаборДляЗаписи = РегистрыСведений.торо_ИсторияСтатусовСогласованияДокументов.СоздатьНаборЗаписей();
   НаборДляЗаписи.Отбор.СогласуемыйДокумент.Установить(Объект.Ссылка);
	Для каждого Строка из Форма.ИсторияСтатусовРегистр Цикл
		НоваяСтрока = НаборДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.СогласуемыйДокумент = Объект.Ссылка;
	КонецЦикла;
	НаборДляЗаписи.Записать(Истина);

	// Запись текущего статуса документа.
	МенеджерЗаписи = РегистрыСведений.торо_ТекущиеСтатусыСогласованияДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СогласуемыйДокумент = Объект.Ссылка;
	МенеджерЗаписи.СтатусДокумента = Форма.СтатусДокументаРегистр;
	МенеджерЗаписи.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура читает данные из регистра торо_ТекущиеСогласующиеДокументов,
// торо_ИсторияСтатусовСогласованияДокументов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ПрочитатьРегистрыСогласования(Форма)
	
	Объект = Форма.Объект;
	
	НаборЗаписей = РегистрыСведений.торо_ИсторияСтатусовСогласованияДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СогласуемыйДокумент.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Форма["ИсторияСтатусовРегистр"].Очистить();
	
	Для каждого Запись из НаборЗаписей Цикл
		НоваяСтрока = Форма["ИсторияСтатусовРегистр"].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.торо_ТекущиеСогласующиеДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СогласуемыйДокумент.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Форма["СогласующиеРегистр"].Очистить();
	
	Для каждого Запись из НаборЗаписей Цикл
		НоваяСтрока = Форма["СогласующиеРегистр"].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыИспользованияСогласованияДокумента(Источник)

	СтруктураВозврата = Новый Структура;
	
	ИспользоватьСогласование	 = Ложь;
	Регламентный = Ложь;
	МТО = Ложь;
	ЗначениеПеречисления = Неопределено;
	
	МетаданныеИмяДокумента = Источник.Метаданные().Имя;
	
	ВидДокументаРемонтов = Метаданные.Перечисления.торо_ВидыДокументовСогласованияРемонтов.ЗначенияПеречисления.Найти(МетаданныеИмяДокумента);
	ВидДокументаМероприятий = Метаданные.Перечисления.торо_ВидыДокументовСогласованияМероприятий.ЗначенияПеречисления.Найти(МетаданныеИмяДокумента);
	ВидДокументаМТО = Метаданные.Перечисления.торо_ВидыДокументовСогласованияМТО.ЗначенияПеречисления.Найти(МетаданныеИмяДокумента);
	
	Если Не ВидДокументаРемонтов = Неопределено Тогда
		ВидДокумента = ВидДокументаРемонтов;
	ИначеЕсли Не ВидДокументаМероприятий = Неопределено Тогда
		ВидДокумента = ВидДокументаМероприятий;
		Регламентный = Истина;
	ИначеЕсли Не ВидДокументаМТО = Неопределено Тогда
		ВидДокумента = ВидДокументаМТО;
		МТО = Истина;
	КонецЕсли;

	Если Не ВидДокумента = Неопределено Тогда
		Если Регламентный Тогда
		    ЗначениеПеречисления = Перечисления.торо_ВидыДокументовСогласованияМероприятий[ВидДокумента.Имя];
		ИначеЕсли МТО Тогда
		    ЗначениеПеречисления = Перечисления.торо_ВидыДокументовСогласованияМТО[ВидДокумента.Имя];
		Иначе
			ЗначениеПеречисления = Перечисления.торо_ВидыДокументовСогласованияРемонтов[ВидДокумента.Имя];
		КонецЕсли;

		ИспользоватьСогласование = ПроверитьИспользованиеСогласованияДокументов(ЗначениеПеречисления, Регламентный, МТО);
	КонецЕсли;

	СтруктураВозврата.Вставить("Регламентный", Регламентный);
	СтруктураВозврата.Вставить("МТО", МТО);
	СтруктураВозврата.Вставить("ИспользоватьСогласование", ИспользоватьСогласование);
	СтруктураВозврата.Вставить("ВидДокументаМетаданные", ВидДокумента);
	СтруктураВозврата.Вставить("ВидДокументаЗначение", ЗначениеПеречисления);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Проверяет, можно ли помечать документ на удаление.
// Параметры:
//		СпособСогласования - СправочникСсылка.торо_СпособыСогласованияДокументов - способ соглсования документа.
//		СтатусДокумента - СправочникиОбъекта.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//		НоваяПометкаУдаления - Булево - новое значение пометки удаления.
//		СтараяПометкаУдаления - Булево - старое значение пометки удаления.
//		Отказ - Булево - устанавливается в истину, если пометку на удаление делать нельзя.
//
Процедура ПроверитьРазрешениеНаПометкуУдаленияПередЗаписьюДокумента(СпособСогласования, СтатусДокумента, НоваяПометкаУдаления, СтараяПометкаУдаления, Отказ) 
	
	Если НоваяПометкаУдаления = Истина Тогда
		
		СтруктураДанных = ПолучитьДанныеПоСтатусуДокумента(СпособСогласования, СтатусДокумента);
		РазрешитьПометкуНаУдаление = СтруктураДанных.РазрешитьПометкуНаУдаление;
		
		Если РазрешитьПометкуНаУдаление <> Истина Тогда
			
			Если СтараяПометкаУдаления <> НоваяПометкаУдаления Тогда
				ШаблонСообщения = НСтр("ru='В статусе ""%1"" пометка на удаление запрещена!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтатусДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				НоваяПометкаУдаления = Ложь;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку, что при данном статусе согласования документа разрешено проведение.
//
// Параметры:
//  СпособСогласования - СправочникСсылка.торо_СпособыСогласованияДокументов - способ согласования.
//  ДополнительныеСвойства - Структура - дополнительные свойства.
//  Отказ - Булево - отказ от выполнения операции.
//
Процедура ПроверитьРазрешениеПроведенияПоСтатусу(СпособСогласования, ДополнительныеСвойства, Отказ)
	
	СтатусДокумента = ДополнительныеСвойства.СтатусДокумента;
	
	СтруктураДанных = ПолучитьДанныеПоСтатусуДокумента(СпособСогласования, СтатусДокумента);
	ПроводитьДокумент = СтруктураДанных.ПроводитьДокумент;
	
	Если Не (ПроводитьДокумент = Истина) Тогда
		
		Если ЗначениеЗаполнено(СтатусДокумента) Тогда
			ШаблонСообщения = НСтр("ru = 'В статусе ""%1"" проведение документа невозможно!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтатусДокумента);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не заполнен текущий статус документа. Проведение документа невозможно!'");
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НужноИзменитьСтатусДокумента(Форма, ВыбранныйСтатус)
	
	СменитьСтатус = Ложь;
	СтрокаСтатус  = Новый Массив;
	Массив  = Форма.ДеревоСогласования.ПолучитьЭлементы();
	
	Для каждого Строка Из Массив Цикл
		Если Строка.СтатусДокумента = ВыбранныйСтатус Тогда
			СтрокаСтатус.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокаСтатус.Количество() = 0 Тогда
		Возврат СменитьСтатус;
	КонецЕсли;
		
	КоличествоСогласовавших = 0;
	ОбщееКоличествоСтрок    = 0;
	
	Для Каждого СтрокаДЗ Из СтрокаСтатус Цикл
		ОбщееКоличествоСтрок = ОбщееКоличествоСтрок + СтрокаДЗ.ПолучитьЭлементы().Количество();
		
		Если СтрокаДЗ.Согласовано Тогда
			КоличествоСогласовавших = ОбщееКоличествоСтрок;
		Иначе
			Для Каждого СтрокаДЗЗ Из СтрокаДЗ.ПолучитьЭлементы() Цикл
				Если СтрокаДЗЗ.Согласовано Тогда
					КоличествоСогласовавших = КоличествоСогласовавших + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	СменитьСтатус = (ОбщееКоличествоСтрок = КоличествоСогласовавших);
	
	Возврат СменитьСтатус;
	
КонецФункции

// Функция добавляет статусы согласования по документуъ
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка - ссылка на документ.
//  ДополнительныеСвойства - Структура - доп. свойства.
Процедура ДобавитьНапоминанияПоСтатусамСогласования(СсылкаНаДокумент, ДополнительныеСвойства = Неопределено) 
	
	// Дополнительные свойства заполняются на форме перед записью документа.
	// В регистрах информация на этот момент может быть устаревшая, т.к. 
	// событие ПриЗаписи в форме документа (когда выполняется запись в регистры)
	// срабатывает после событий ПриЗаписи и ОбработкаПроведения в модуле объекта.
	// Но если запись выполнялась не из формы, то берем, что есть в регистрах.
	Если ДополнительныеСвойства <> Неопределено Тогда
		
		Если ДополнительныеСвойства.Свойство("СтатусДокумента") Тогда
			СтатусДокумента = ДополнительныеСвойства.СтатусДокумента;
		Иначе 
			СтатусДокумента = ПолучитьТекущийСтатусСогласованияДокумента(СсылкаНаДокумент); 
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("Согласующие") Тогда
			СогласующиеДокумента = ДополнительныеСвойства.Согласующие;
		Иначе 
			СогласующиеДокумента = ПолучитьТаблицуСогласующихДокумента(СсылкаНаДокумент);
		КонецЕсли;
		
	Иначе
		СтатусДокумента = ПолучитьТекущийСтатусСогласованияДокумента(СсылкаНаДокумент);
		СогласующиеДокумента = ПолучитьТаблицуСогласующихДокумента(СсылкаНаДокумент);
	КонецЕсли;
	
	ДеревоСогласования = ПолучитьДеревоСогласования(СсылкаНаДокумент.СпособСогласования, СтатусДокумента, СогласующиеДокумента, СсылкаНаДокумент.Ответственный);
	ТаблицаСогласующих = ПодготовитьТаблицуНапоминанийДляСогласующих(ДеревоСогласования);
	
	НаборЗаписейСогласования = РегистрыСведений.торо_СтатусыСогласованияДокументовРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписейСогласования.Отбор.СогласуемыйДокумент.Установить(СсылкаНаДокумент);
	НаборЗаписейСогласования.Записать();
	
	НаборЗаписейСогласования.Отбор.Статус.Установить(СтатусДокумента);
	НаборЗаписейСогласования.Отбор.Организация.Установить(СсылкаНаДокумент.Организация);
	
	Для Каждого СтрокаТЗ Из ТаблицаСогласующих Цикл
		НоваяЗапись = НаборЗаписейСогласования.Добавить();
		НоваяЗапись.Организация  = СсылкаНаДокумент.Организация;
		НоваяЗапись.СогласуемыйДокумент     = СсылкаНаДокумент;
		НоваяЗапись.Пользователь = СтрокаТЗ.Согласующий;
		НоваяЗапись.Статус       = СтатусДокумента;
		НоваяЗапись.НеНапоминать = СтрокаТЗ.НеНапоминать;
		НоваяЗапись.Дата         = СтрокаТЗ.Дата;
	КонецЦикла;
	
	НаборЗаписейСогласования.Записать();
	
КонецПроцедуры

Функция ПодготовитьТаблицуНапоминанийДляСогласующих(ДеревоСогласования)
	
	ТаблицаСогласующих = Новый ТаблицаЗначений;
	ТаблицаСогласующих.Колонки.Добавить("Согласующий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Для Каждого СтрокаСтатусов Из ДеревоСогласования.Строки Цикл
		Для Каждого СтрокаСогласующих Из СтрокаСтатусов.Строки Цикл
			НовСтрокаТЗ = ТаблицаСогласующих.Добавить();
			НовСтрокаТЗ.Согласующий = СтрокаСогласующих.Согласующий;
			
			Для Каждого СтрокаЗамещающих Из СтрокаСогласующих.Строки Цикл
				НовСтрокаТЗ = ТаблицаСогласующих.Добавить();
				НовСтрокаТЗ.Согласующий = СтрокаЗамещающих.Замещающий;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	ТаблицаСогласующих.Свернуть("Согласующий");
	ТаблицаСогласующих.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаСогласующих.Колонки.Добавить("НеНапоминать", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаСогласующих Из ТаблицаСогласующих Цикл
		
		ОтключитьОповещение = Истина;
		
		// Этап 1 Проход по согласовавшим
		МассивСтрокСогласовавших = ДеревоСогласования.Строки.НайтиСтроки(Новый Структура("Согласующий, Замещающий", 
		СтрокаСогласующих.Согласующий, Справочники.Пользователи.ПустаяСсылка()), Истина);
		
		Для Каждого ЭлементМС Из МассивСтрокСогласовавших Цикл
			
			Если Не ЭлементМС.Согласовано Тогда
				
				ЕстьСогласованные = Ложь;
				Для Каждого СтрокаЗамещения Из ЭлементМС.Строки Цикл
					Если СтрокаЗамещения.Согласовано Тогда
						ЕстьСогласованные = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				
				Если Не ЕстьСогласованные Тогда
					ОтключитьОповещение = Ложь;
					Прервать;
				КонецЕсли; 
				
			КонецЕсли; 	
			
		КонецЦикла; 		
		
		Если Не ОтключитьОповещение Тогда
			Продолжить;
		КонецЕсли;
		
		// Этап №2 Проход по замещающим
		МассивСтрокЗамещающих = ДеревоСогласования.Строки.НайтиСтроки(Новый Структура("Замещающий",
		СтрокаСогласующих.Согласующий), Истина);
		
		Для Каждого ЭлементМЗ Из МассивСтрокЗамещающих Цикл
			
			Если (Не ЭлементМЗ.Согласовано) И (Не ЭлементМЗ.Родитель.Согласовано) Тогда
				
				ЕстьСогласованные = Ложь;
				Для Каждого СтрокаЗамещения Из ЭлементМЗ.Родитель.Строки Цикл
					
					Если СтрокаЗамещения.Согласовано Тогда
						ЕстьСогласованные = Истина;
						Прервать;
					КонецЕсли; 
					
				КонецЦикла; 
				
				Если Не ЕстьСогласованные Тогда
					ОтключитьОповещение = Ложь;
					Прервать;
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если Не ОтключитьОповещение Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСогласующих.Дата = ТекущаяДата();
		СтрокаСогласующих.НеНапоминать = Истина;
		
	КонецЦикла; 

	Возврат ТаблицаСогласующих;
	
КонецФункции

Процедура ЗаполнитьСвойстваДокументаПередЗаписьюБезОткрытияФормы(Источник, СтатусДокумента)
	
	Если НЕ ЗначениеЗаполнено(СтатусДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	ТекущаяДата = ТекущаяДата();
		
	ИсторияСтатусовРегистр = РегистрыСведений.торо_ИсторияСтатусовСогласованияДокументов.СоздатьНаборЗаписей();
	НоваяЗаписьИС = ИсторияСтатусовРегистр.Добавить();
	НоваяЗаписьИС.Период          = ТекущаяДата;
	НоваяЗаписьИС.Пользователь    = Пользователи.ТекущийПользователь();
	НоваяЗаписьИС.ЗаКого          = Неопределено;
	НоваяЗаписьИС.СтатусДокумента = СтатусДокумента;

	СогласующиеРегистр = РегистрыСведений.торо_ТекущиеСогласующиеДокументов.СоздатьНаборЗаписей();
	ДеревоСогласования = ПолучитьДеревоСогласования(Источник.СпособСогласования, СтатусДокумента, СогласующиеРегистр.Выгрузить(), Источник.Ответственный);
	
	МассивСогласованного = Новый Массив;		
	ЗаполнитьМассивИзДереваЗначений(МассивСогласованного, ДеревоСогласования.Строки);
	
	Для Каждого ЭлементМассива Из МассивСогласованного Цикл
		Если ЭлементМассива.Согласовано Тогда 
			ЗаполнитьЗначенияСвойств(СогласующиеРегистр.Добавить(), ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("Записать_СтатусДокумента", Истина);
	ДополнительныеСвойства.Вставить("Записать_ИсторияСтатусовСогласования", Истина);
	ДополнительныеСвойства.Вставить("Записать_Согласующие", Истина);
	
	ДополнительныеСвойства.Вставить("ИсторияСтатусовСогласования", ИсторияСтатусовРегистр.Выгрузить());
	ДополнительныеСвойства.Вставить("Согласующие", СогласующиеРегистр.Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьМассивИзДереваЗначений(Массив, СтрокиДерева) 
	
	Для каждого Строка Из СтрокиДерева Цикл
		Массив.Добавить(Строка);
		ЗаполнитьМассивИзДереваЗначений(Массив, Строка.Строки);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти



