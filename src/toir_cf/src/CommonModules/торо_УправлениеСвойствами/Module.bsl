
#Область ПрограммныйИнтерфейс

// Дополняет список наборов доп реквизитов на форме новым элементом, созданным при записи.
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма элемента.
//		ТекущийОбъект - СправочникОбъект - объект справочника.
//		ИмяРеквизитаНаборСвойств - Строка - название реквизита, являющегося ссылкой на набор доп. реквизитов.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ИмяРеквизитаНаборСвойств = "") Экспорт
	
	Структура = Новый Структура("Свойства_ИспользоватьДопРеквизиты");
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	
	Если ЗначениеЗаполнено(ИмяРеквизитаНаборСвойств) 
		И ТипЗнч(Структура.Свойства_ИспользоватьДопРеквизиты) = Тип("Булево") Тогда
		
		Если Форма.ПараметрыСвойств.Свойство("ВыполненаОтложеннаяИнициализация")
			И Не Форма.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
			Возврат;
		КонецЕсли;
		
		НаборСвойств = ТекущийОбъект[ИмяРеквизитаНаборСвойств];
		Если ЗначениеЗаполнено(НаборСвойств) 
			И Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта.НайтиПоЗначению(НаборСвойств) = Неопределено 
			И УправлениеСвойствамиСлужебный.ВидыСвойствНабора(НаборСвойств).ДополнительныеРеквизиты Тогда
			
		   Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта.Добавить(НаборСвойств);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполненность реквизитов обязательных для заполнения.
// 
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - уже настроена в процедуре ПриСозданииНаСервере.
//  Отказ                - Булево - параметр обработчика ОбработкаПроверкиЗаполненияНаСервере.
//  ПроверяемыеРеквизиты - Массив - параметр обработчика ОбработкаПроверкиЗаполненияНаСервере.
//  Объект - Объект - по типу объекта, если свойство не указано или Неопределено,
//           объект берется из реквизита формы "Объект".
//
Процедура ОбработкаПроверкиЗаполненияВТаблице(Форма, Отказ, ПроверяемыеРеквизиты, Объект = Неопределено) Экспорт
	
	Индекс = 0;
	
	Для каждого Строка Из Форма.Свойства_ЗначенияДополнительныхРеквизитов Цикл
		Если Строка.ЗаполнятьОбязательно И Строка.АвтоОтметкаНезаполненного И НЕ Строка.Удалено Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Поле ""%1"" не заполнено.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Свойства_ЗначенияДополнительныхРеквизитов["+Индекс+"].Значение",, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Доп. реквизиты в таблице++

Процедура ДобавитьОписаниеТаблицыЗначенийДополнительныхРеквизитов(Реквизиты) Экспорт
	
	// Добавление таблицы значений доп. реквизитов.
	ИмяОписанияЗначения = "Свойства_ЗначенияДополнительныхРеквизитов";
	
	Реквизиты.Добавить(Новый РеквизитФормы(ИмяОписанияЗначения, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"МногострочноеПолеВвода", Новый ОписаниеТипов("Число"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Удалено", Новый ОписаниеТипов("Булево"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Наименование", Новый ОписаниеТипов("Строка"), ИмяОписанияЗначения, "Характеристика"));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Набор", Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений"),	ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Значение", Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип, ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ЭтоУнаследованный", Новый ОписаниеТипов("Булево"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ОбщееСвойство", Новый ОписаниеТипов("Булево"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ИндексКартинки", Новый ОписаниеТипов("Число"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Видимость", Новый ОписаниеТипов("Булево"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"Доступность", Новый ОписаниеТипов("Булево"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"АвтоОтметкаНезаполненного", Новый ОписаниеТипов("Булево"), ИмяОписанияЗначения));
	
	Реквизиты.Добавить(Новый РеквизитФормы(
		"ОсобыйФормат", Новый ОписаниеТипов("Число"), ИмяОписанияЗначения));

КонецПроцедуры

Процедура ДобавитьНаФормуТаблицуЗначенийДополнительныхРеквизитов(Форма, Контекст) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаДляРазмещения = Форма.Свойства_ИмяЭлементаДляРазмещения;
	ЭлементРазмещения = ?(ИмяЭлементаДляРазмещения = "", Неопределено, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	Если Форма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		Если Контекст.Объект = Неопределено Тогда
			ОписаниеОбъекта = Форма.Объект;
		Иначе
			ОписаниеОбъекта = Контекст.Объект;
		КонецЕсли;
		
		НетСвоегоНабораСвойств = (ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта"));
		
		ЭлементТаблица = Форма.Элементы.Добавить("Свойства_ЗначенияДополнительныхРеквизитов", Тип("ТаблицаФормы"), ЭлементРазмещения);
		ЭлементТаблица.ПутьКДанным = "Свойства_ЗначенияДополнительныхРеквизитов";
		ЭлементТаблица.ПутьКДаннымКартинкиСтроки = "Свойства_ЗначенияДополнительныхРеквизитов.ИндексКартинки";
		ЭлементТаблица.КартинкаСтрок = БиблиотекаКартинок.ПиктограммыЭлементов;
		ЭлементТаблица.ТолькоПросмотр = Ложь;
		
		СписокКолонок = Форма.ПолучитьРеквизиты("Свойства_ЗначенияДополнительныхРеквизитов");
		
		Для каждого РеквизитТаблицы из СписокКолонок Цикл
			ИмяЭлемента = "Свойства_ЗначенияДополнительныхРеквизитов" + РеквизитТаблицы.Имя;
			ЭлементКолонка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементТаблица);
			ЭлементКолонка.ПутьКДанным = РеквизитТаблицы.Путь+"."+РеквизитТаблицы.Имя;
						
			Если РеквизитТаблицы.Имя <> "Наименование"
				И РеквизитТаблицы.Имя <> "Значение" 
				И РеквизитТаблицы.Имя <> "ЗаполнятьОбязательно" 
				Тогда
				ЭлементКолонка.Видимость = Ложь;
			ИначеЕсли РеквизитТаблицы.Имя = "Наименование" Тогда
				ЭлементКолонка.ТолькоПросмотр = Истина;
			ИначеЕсли РеквизитТаблицы.Имя = "Значение" Тогда
				ЭлементКолонка.ТолькоПросмотр = Ложь;
				ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
				ЭлементКолонка.СвязьПоТипу = Новый СвязьПоТипу("Элементы.Свойства_ЗначенияДополнительныхРеквизитов.ТекущиеДанные.Свойство");
				ЭлементКолонка.КнопкаОчистки = Истина;
				ЭлементКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
				
				НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Свойства_ЗначенияДополнительныхРеквизитов.ТекущиеДанные.Свойство");
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				ЭлементКолонка.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
			ИначеЕсли РеквизитТаблицы.Имя = "ЗаполнятьОбязательно" Тогда
				ЭлементКолонка.ТолькоПросмотр = Истина;
				ЭлементКолонка.Вид = ВидПоляФормы.ПолеФлажка;
				ЭлементКолонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ЭлементКолонка.КартинкаШапки = БиблиотекаКартинок.ВосклицательныйЗнак;
				ЭлементКолонка.Подсказка = "Заполнять обязательно";
			КонецЕсли;
			
		КонецЦикла;
		
		Если НетСвоегоНабораСвойств Тогда
			ЭлементТаблица.ИзменятьСоставСтрок = Ложь;
			ЭлементТаблица.ИзменятьПорядокСтрок = Ложь;
		КонецЕсли;
		
		ДобавитьУсловноеОформлениеТаблицыДополнительныхРеквизитов(Форма, Контекст);
		ПодключитьОбработчикиТаблицыДополнительныхРеквизитов(Форма, ЭлементТаблица);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеТаблицыДополнительныхРеквизитов(Форма, Контекст) 
	
	// Отметка незаполненного
	Если Контекст.УсловноеОформлениеЗаполнятьОбязательно Тогда
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовЗначение");
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.ЗаполнятьОбязательно");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.АвтоОтметкаНезаполненного");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.Значение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	КонецЕсли;
	
	// Оформление унаследованных значений
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовЗначение");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.ЭтоУнаследованный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
	
	// Оформление унаследованных реквизитов
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовНаименование");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
	
	// Оформление недоступных значений
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Оформление невидимых значений
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовЗначение");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовСвойство");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовТипЗначения");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовМногострочноеПолеВвода");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовУдалено");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовЗаполнятьОбязательно");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовНаименование");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовНабор");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовЭтоУнаследованный");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовОбщееСвойство");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовИндексКартинки");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовВидимость");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовДоступность");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовАвтоОтметкаНезаполненного");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.Видимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// формат даты "Дата" (без времени)
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовЗначение");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.ОсобыйФормат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
	// формат даты "Время" (только время)
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитовЗначение");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойства_ЗначенияДополнительныхРеквизитов.ОсобыйФормат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=T");

	
КонецПроцедуры

Процедура ПодключитьОбработчикиТаблицыДополнительныхРеквизитов(Форма, ЭлементТаблица)
	
	ЭлементТаблица.УстановитьДействие("ПриИзменении", "Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриИзменении");
	ЭлементТаблица.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки");
	ЭлементТаблица.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередНачаломДобавления");
	ЭлементТаблица.УстановитьДействие("ПередУдалением", "Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередУдалением");
	ЭлементТаблица.УстановитьДействие("ПриОкончанииРедактирования", "Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования");
	ЭлементТаблица.УстановитьДействие("Выбор", "Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовВыбор");
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыВФорме_ДобавитьСтрокуТаблицы(Форма, ОписаниеСвойства) Экспорт
	
	ФормаЗначениеСвойства = Форма.Свойства_ЗначенияДополнительныхРеквизитов.Добавить();
	ЗаполнитьЗначенияСвойств(ФормаЗначениеСвойства, ОписаниеСвойства);
	ФормаЗначениеСвойства.ИндексКартинки = ?(ОписаниеСвойства.Удалено, 4, 3);
	ФормаЗначениеСвойства.Доступность = Истина;
	ФормаЗначениеСвойства.Видимость = Истина;
	ФормаЗначениеСвойства.АвтоОтметкаНезаполненного = Истина;
	
	Если ОписаниеСвойства.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		Если ОписаниеСвойства.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
			ФормаЗначениеСвойства.ОсобыйФормат = 1;
		ИначеЕсли ОписаниеСвойства.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			ФормаЗначениеСвойства.ОсобыйФормат = 2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыВФорме_ВычислитьУсловияДопРеквизитаВТаблице(Форма, ОписаниеОбъекта) Экспорт
	
	// Установка видимости, доступности и обязательности заполнения дополнительных реквизитов.
	Для Каждого ОписаниеЗависимогоРеквизита Из Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов Цикл
		
		Если ОписаниеЗависимогоРеквизита.УсловиеДоступности <> Неопределено Тогда
			Результат = УправлениеСвойствами.РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеДоступности);
			СтрокаОписанияРеквизита = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение));
			Если СтрокаОписанияРеквизита.Количество() > 0 Тогда
				СтрокаОписанияРеквизита = СтрокаОписанияРеквизита[0];
				СтрокиЗначений = Форма.Свойства_ЗначенияДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",СтрокаОписанияРеквизита.Свойство));
				Для каждого СтрокаЗначения из СтрокиЗначений Цикл
					СтрокаЗначения.Доступность = Результат;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеЗависимогоРеквизита.УсловиеВидимости <> Неопределено Тогда
			Результат = УправлениеСвойствами.РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеВидимости);
			СтрокаОписанияРеквизита = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение));
			Если СтрокаОписанияРеквизита.Количество() > 0 Тогда
				СтрокаОписанияРеквизита = СтрокаОписанияРеквизита[0];
				СтрокиЗначений = Форма.Свойства_ЗначенияДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",СтрокаОписанияРеквизита.Свойство));
				Для каждого СтрокаЗначения из СтрокиЗначений Цикл
					СтрокаЗначения.Видимость = Результат;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения <> Неопределено Тогда
			Если Не ОписаниеЗависимогоРеквизита.ЗаполнятьОбязательно Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = УправлениеСвойствами.РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения);
			СтрокаОписанияРеквизита = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение));
			Если СтрокаОписанияРеквизита.Количество() > 0 Тогда
				СтрокаОписанияРеквизита = СтрокаОписанияРеквизита[0];
				СтрокиЗначений = Форма.Свойства_ЗначенияДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",СтрокаОписанияРеквизита.Свойство));
				Для каждого СтрокаЗначения из СтрокиЗначений Цикл
					СтрокаЗначения.АвтоОтметкаНезаполненного = Результат;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(Форма, НаборСвойств) Экспорт
	
	Структура = Новый Структура("Свойства_ОтображатьЗначенияВТаблице");
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	
	Если Структура.Свойства_ОтображатьЗначенияВТаблице = Истина Тогда
		
		Для каждого ТекущиеДанные из Форма.Свойства_ЗначенияДополнительныхРеквизитов Цикл
			ТекущиеДанные.ОбщееСвойство = (ТекущиеДанные.Набор <> НаборСвойств); 
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Доп. реквизиты в таблице--

Процедура ЗаписатьДопРеквизитыСведенияНабора(Форма, Отказ, ТипЭлемента, НаборСвойствДопРеквизитовСведений, ИмяТаблицыДопРеквизитовСведений = "") Экспорт
	
	Структура = Новый Структура("Свойства_ИспользоватьДопРеквизиты");
	ЗаполнитьЗначенияСвойств(Структура, Форма);

	Если ТипЗнч(Структура.Свойства_ИспользоватьДопРеквизиты) <> Тип("Булево") Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыДопРеквизитовСведений) Тогда
		ИмяТаблицыДопРеквизитовСведений = "Свойства_ЗначенияДополнительныхРеквизитов";
	Конецесли;
	
	Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНаборСвойств = НаборСвойствДопРеквизитовСведений.ПолучитьОбъект();
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеСведения;
	КонецЕсли;
	
	ТаблицаДопРеквизитов =  Форма[ИмяТаблицыДопРеквизитовСведений];
	ТЧДополнительныеРеквизитыСведения.Очистить();
	
	Для каждого ЭлементСтр Из ТаблицаДопРеквизитов Цикл
		Если Не ЭлементСтр.ОбщееСвойство Тогда
			НовСтр = ТЧДополнительныеРеквизитыСведения.Добавить();
			НовСтр.Свойство = ЭлементСтр.Свойство;
			НовСтр.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСтр.Свойство, "ПометкаУдаления");
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ОбъектНаборСвойств.Записать();
	Исключение
		
		// Установить признак отказа записи.
		Отказ = Истина;
		
		// Добавить запись в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Не удалось обновить состав дополнительных %3.'");
		
		ТипСведений  = ?(ТипЭлемента = "ДопРеквизит", НСтр("ru = 'реквизитов'"), НСтр("ru = 'сведений'"));
		
		ИмяСобытия = СтрШаблон(ИмяСобытия,	ТипСведений);
		
		КомментарийЖурнала  = НСтр("ru = 'При обновлении табличной части дополнительных реквизитов набора свойств ""%1"" произошла ошибка: ""%2""'");
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КомментарийЖурнала  = СтрШаблон(
			КомментарийЖурнала, 
			НаборСвойствДопРеквизитовСведений, 
			ПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			НаборСвойствДопРеквизитовСведений, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		// Вызвать исключение.
		ВыражениеИсключения = НСтр("ru = 'При записи дополнительных %1 произошла ошибка (см. журнал регистрации).'");
		
		ВыражениеИсключения = СтрШаблон(ВыражениеИсключения,	ТипСведений);
		
		ВызватьИсключение(ВыражениеИсключения);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПометитьТекущееСвойствоНаУдаление(НаборСвойствДопРеквизитовСведений, Свойство, ИндексКартинки, ТипЭлемента) Экспорт
	
	НачатьТранзакцию();
	
	ОбъектСвойства = Свойство.ПолучитьОбъект();
	ОбъектСвойства.ПометкаУдаления = НЕ ОбъектСвойства.ПометкаУдаления;
	ОбъектСвойства.Записать();
	
	Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНаборСвойств = НаборСвойствДопРеквизитовСведений.ПолучитьОбъект();
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеСведения;
	КонецЕсли;
	
	Для Каждого ЭлементСтр Из ТЧДополнительныеРеквизитыСведения Цикл
		Если ЭлементСтр.Свойство = Свойство Тогда
			ЭлементСтр.ПометкаУдаления = ОбъектСвойства.ПометкаУдаления;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектНаборСвойств.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ИндексКартинки = ?(ОбъектСвойства.ПометкаУдаления, 4, 3);
	
КонецПроцедуры

// Для формы элемента ПВХ ДополнительныеРеквизитыИСведения.

// Проверяет, что переданный набор свойств является набором свойств объектов ремонта. 
Функция ЭтоНаборСвойствОР(НаборСвойств) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НаборСвойств) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка В ИЕРАРХИИ(&ПапкиРеквизитовОР)
	|	И НаборыДополнительныхРеквизитовИСведений.Ссылка = &Ссылка";
	
	ПапкиРеквизитовОР = Новый Массив;
	ПапкиРеквизитовОР.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_торо_НаправленияОбъектовРемонтныхРабот_Общие"));
	ПапкиРеквизитовОР.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_торо_НаправленияОбъектовРемонтныхРабот"));
	ПапкиРеквизитовОР.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_торо_ТиповыеОР_Общие"));
	ПапкиРеквизитовОР.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_торо_ТиповыеОР"));
	ПапкиРеквизитовОР.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_торо_ОбъектыРемонта_Общие"));
	ПапкиРеквизитовОР.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_торо_ОбъектыРемонта"));
	
	Запрос.УстановитьПараметр("ПапкиРеквизитовОР", ПапкиРеквизитовОР);
	Запрос.УстановитьПараметр("Ссылка", НаборСвойств);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Обработчик подписки. Обновляет элементы ПВХ торо_ГруппыХарактеристикОборудования 
// при записи дополнительного реквизита.
Процедура торо_АктуализироватьГруппыХарактеристикОборудованияПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПланыВидовХарактеристик.торо_ГруппыХарактеристикОборудования.АктуализироватьГруппыХарактеристик(Источник);
	
КонецПроцедуры

// Функция проверяет, что у переданного элемента справочника есть собственный набор свойств с дополнительными реквизитами.
//
// Параметры:
//		ВладелецСвойств - СправочникСсылка.торо_ТиповыеОР - пока применяется для типовых, 
//								но технически возможно передать и другой тип.
//		ИмяРеквизитаНаборСвойств - Строка - название реквизита, в котором хранится ссылка на набор свойств.
//
// Возвращаемое значение:
//		Булево - Истина, если доп. реквизиты есть.
//
Функция ЕстьИндивидуальныеДополнительныеРеквизиты(ВладелецСвойств, ИмяРеквизитаНаборСвойств = "НаборСвойств") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВладелецСвойств) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений) Тогда
		Возврат Ложь;
	КонецЕсли;

	ОпцияИспользоватьСвойства = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	Если НЕ ОпцияИспользоватьСвойства Тогда
		Возврат Ложь;
	КонецЕсли;
		
	НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецСвойств, ИмяРеквизитаНаборСвойств);
	Если НЕ ЗначениеЗаполнено(НаборСвойств) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = &НаборСвойств";
	
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция СкопироватьОбъектСНаборомДополнительныхРеквизитов(КопируемыйЭлемент, ИмяРеквизитаНаборСвойств = "НаборСвойств") Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		НовыйТиповойОбъект = КопируемыйЭлемент.Скопировать();
		НовыйТиповойОбъект.Записать(); // При записи стандартными механизмами сформируется корректный пустой набор, 
		// останется только его дополнить.
		
		торо_РаботаСНормативамиСервер.СкопироватьНормативыТиповогоОР(КопируемыйЭлемент, НовыйТиповойОбъект.Ссылка);
		
		НовыйНаборОбъект = НовыйТиповойОбъект[ИмяРеквизитаНаборСвойств].ПолучитьОбъект();
		
		// В данном случае сознательно используется объектная модель, а не запрос, чтобы не
		// зависеть от возможных изменений состава реквизитов в справочнике в БСП.
		ТаблицаДляПереноса = КопируемыйЭлемент[ИмяРеквизитаНаборСвойств].ДополнительныеРеквизиты;
		
		Для каждого СтрокаТЧ из ТаблицаДляПереноса Цикл
			НоваяСтрока = НовыйНаборОбъект.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
		
		НовыйНаборОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат НовыйТиповойОбъект.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации("Копирование типового ОР", УровеньЖурналаРегистрации.Ошибка, КопируемыйЭлемент,,ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти
