
#Область ПрограммныйИнтерфейс

// Выполняет расчет структуры ремонтного цикла.
//
// Параметры:
//		ОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта, СправочникСсылка.торо_ТиповыеОР - объект, для которого выполняется расчет.
//		ВРНачалоЦикла - СправочникСсылка.торо_ВидыРемонтов - вид ремонта, с которого начинается цикл.
//		ТаблицаОбъектыРемонта - ТаблицаЗначений - служебная таблица с перечнем видов ремонта.
//		ТабПараметрыНаработки - ТаблицаЗначений - таблица параметров наработки для передачи в расчет ППР.
//		МассивГрафиковРаботы - Массив из СправочникСсылка.Календари - массив из графиковы выполнения ремонтных работ и графиков работы.
//		ДопПараметрыДляКалькулятораРЦ - Структура - структура с данными, которые добавляются только для калькулятора РЦ.
//
// Возвращаемое значение:
//		- ТаблицаЗначений- таблица с результатом расчета, если расчет удался.
//		- Булево - Ложь, если расчет не удался.
//
Функция РасчетСтруктурыРЦ(ОбъектРемонта, ВРНачалоЦикла, ТаблицаОбъектыРемонта, ТабПараметрыНаработки, МассивГрафиковРаботы, ДопПараметрыДляКалькулятораРЦ = Неопределено) Экспорт
	
	ДатаПланированияНачало = НачалоДня(ТекущаяДата());
	ДатаПланированияОкончание = РассчитатьДатуОкончанияПланированияДляСтруктурыРЦ(ОбъектРемонта, ВРНачалоЦикла, ДатаПланированияНачало, ТабПараметрыНаработки, МассивГрафиковРаботы[0]);
	
	Если ДатаПланированияОкончание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыполнятьРасчет = ПроверкаПередРасчетомСтруктурыРЦ(МассивГрафиковРаботы, ДатаПланированияНачало, ДатаПланированияОкончание);
	
	Если НЕ ВыполнятьРасчет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаПланРемонтов"     , Документы.торо_ПланГрафикРемонта.ПустаяСсылка().ПланРемонтов.ВыгрузитьКолонки());
	СтруктураДанных.Вставить("ТаблицаОбъектыРемонта"   , ТаблицаОбъектыРемонта.Скопировать(,"ОбъектРемонтныхРабот,ВидРемонтныхРабот,ПлановыйГрафикРаботы,РемонтнаяГруппа"));
	СтруктураДанных.Вставить("ДатаПланирования"        , ДатаПланированияНачало);
	СтруктураДанных.Вставить("ДатаОкончанияВизуализации",ДатаПланированияОкончание);
	СтруктураДанных.Вставить("ПериодичностьДетализации", Перечисления.Периодичность.Год);
	СтруктураДанных.Вставить("КоличествоПериодов"      , 1);
	СтруктураДанных.Вставить("ТабПараметрыНаработкиОбъектовРемонта", ТабПараметрыНаработки);
	СтруктураДанных.Вставить("ВРНачалоЦикла"           , ВРНачалоЦикла);
	СтруктураДанных.Вставить("ВизуализацияТипОР"       , ТипЗнч(ОбъектРемонта) = Тип("СправочникСсылка.торо_ТиповыеОР"));
	СтруктураДанных.Вставить("ТаблицаНормативов", Неопределено);
	
	// Для совместимости с расчетом ППР создаем пустую таблицу.
	ТаблицаЦепочки = Новый ТаблицаЗначений;
	ТаблицаЦепочки.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаЦепочки.Колонки.Добавить("Цепочка",              Новый ОписаниеТипов("СправочникСсылка.торо_ЦепочкиРемонта"));
	
	СтруктураДанных.Вставить("ТаблицаЦепочки", ТаблицаЦепочки);
	
	Если ДопПараметрыДляКалькулятораРЦ <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураДанных, ДопПараметрыДляКалькулятораРЦ, Истина);	
	КонецЕсли;
	
	// Вызов расчета ППР
	ТаблицаРемонтов = торо_РасчетППР.РасчетППР(Неопределено,,,СтруктураДанных);
	
	Если ТаблицаРемонтов = Ложь ИЛИ ТаблицаРемонтов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось рассчитать ремонтный цикл, проверьте настройки планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаРемонтов.Сортировать("ДатаНач");
	
	СтрокиНачало = ТаблицаРемонтов.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", ВРНачалоЦикла));
	Если СтрокиНачало.Количество() > 0 Тогда
		СтрНачало = СтрокиНачало[0];
		ИндексНачало = ТаблицаРемонтов.Индекс(СтрНачало);
		Пока ИндексНачало > 0 Цикл
			ТаблицаРемонтов.Удалить(0);
			ИндексНачало = ИндексНачало - 1;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоРемонтов = ТаблицаРемонтов.Количество();
	Пока КоличествоРемонтов > 0 Цикл
		Если ТаблицаРемонтов[КоличествоРемонтов - 1].ВидРемонтныхРабот = ВРНачалоЦикла Тогда
			Прервать;
		Иначе
			ТаблицаРемонтов.Удалить(КоличествоРемонтов - 1);
			КоличествоРемонтов = КоличествоРемонтов - 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаРемонтов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось рассчитать ремонтный цикл, проверьте настройки планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТаблицаРемонтов;
	
КонецФункции

// Выполняет вывод структуры ремонтного цикла на печать.
//
// Параметры:
//		Объект - ДанныеФормыСтруктура - объект ремонта или типовой ОР, для которого печатся структура РЦ.
//		ДополнительныеПараметры - Структура - дополнительная информация, используемая при печати.
//
// Возвращаемое значение:
//		ТабличныйДокумент - печатная форма структуры РЦ.
//
Функция ПечатьСтруктурыРЦ(Объект, ДополнительныеПараметры) Экспорт
	
	Нормировать = ДополнительныеПараметры.Нормировать;
	СписокВидовРемонтов = ДополнительныеПараметры.СписокВидовРемонтов;
	ЗапланированныеРемонты = ДополнительныеПараметры.ЗапланированныеРемонты;
	ПолеМнемосхемы = ДополнительныеПараметры.ПолеМнемосхемы;
	ТаблицаРемонтовВизуализация = ДополнительныеПараметры.ТаблицаРемонтовВизуализация;
	КолСтрокСхемы = ДополнительныеПараметры.КолСтрокСхемы;
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПолужирныйШрифт = Новый Шрифт("Arial", 9,ИСТИНА);
	
	ОбластьДляЗаголовка = ТабДок.ПолучитьОбласть(1,2,4,17);
	ОбластьЗаголовок = ОбластьДляЗаголовка.Область(1,2,4,17);
	ОбластьЗаголовок.Объединить();
	ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьЗаголовок.Текст = НСтр("ru = 'Структура ремонтного цикла'");
	ОбластьЗаголовок.Шрифт = Новый Шрифт("Arial", 18, Истина);  
	ОбластьЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьЗаголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ТабДок.Вывести(ОбластьДляЗаголовка);
	
	ОбластьПараметров = ТабДок.ПолучитьОбласть(6,2,12, 17);
	
	ОбластьОРЗголовок = ОбластьПараметров.Область(2,2,2,17);
	ОбластьОРЗголовок.Объединить();
	ОбластьОРЗголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьОРЗголовок.Шрифт = ПолужирныйШрифт;
	ОбластьОРЗголовок.Текст = НСтр("ru = 'Объект ремонта: '") + торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(Объект.Ссылка);
	ОбластьОРЗголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьГрафикЗаголовок = ОбластьПараметров.Область(3,2,3,17);
	ОбластьГрафикЗаголовок.Объединить();
	ОбластьГрафикЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьГрафикЗаголовок.Шрифт = ПолужирныйШрифт;
	ОбластьГрафикЗаголовок.Текст = НСтр("ru = 'Плановый график работы: '") + ДополнительныеПараметры.ПлановыйГрафикРаботы;
	ОбластьГрафикЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьНормироватьЗаголовок = ОбластьПараметров.Область(4,2,4,17);
	ОбластьНормироватьЗаголовок.Объединить();
	ОбластьНормироватьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьНормироватьЗаголовок.Шрифт = ПолужирныйШрифт;
	ОбластьНормироватьЗаголовок.Текст = НСтр("ru = 'Нормировать интервалы между ремонтами: '") + ?(Нормировать, НСтр("ru = 'Да'"), НСтр("ru = 'Нет'"));
	ОбластьНормироватьЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьВРЗаголовок = ОбластьПараметров.Область(5,2,5,17);
	ОбластьВРЗаголовок.Объединить();
	ОбластьВРЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьВРЗаголовок.Шрифт = ПолужирныйШрифт;
	
	ПредставлениеПланируемыхРемонтов = "";
	Для Каждого ПланируемыйВР Из СписокВидовРемонтов Цикл
		ПредставлениеВР = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ПланируемыйВР.Значение);
		ПредставлениеПланируемыхРемонтов = ?(ПредставлениеПланируемыхРемонтов = "", ПредставлениеПланируемыхРемонтов, ПредставлениеПланируемыхРемонтов + "; ") + ПредставлениеВР;
	КонецЦикла;
	
	ОбластьВРЗаголовок.Текст = НСтр("ru = 'Планируемые виды ремонтов: '") + ПредставлениеПланируемыхРемонтов;
	ОбластьВРЗаголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьВРЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьОтображВР = ОбластьПараметров.Область(6,2,6,17);
	ОбластьОтображВР.Объединить();
	ОбластьОтображВР.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьОтображВР.Шрифт = ПолужирныйШрифт;
	ОбластьОтображВР.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьОтображВР.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОтображаемыеВР = Новый СписокЗначений;
	ОтображаемыеВРТекст = "";
	Для Каждого ЗапланированныйРемонт Из ЗапланированныеРемонты Цикл
		Если ЗапланированныйРемонт.Выбран Тогда
			ПредставлениеВР = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ЗапланированныйРемонт.ВидРемонтныхРабот);
			ОтображаемыеВР.Добавить(ЗапланированныйРемонт.ВидРемонтныхРабот, ПредставлениеВР);
			ОтображаемыеВРТекст = ?(ОтображаемыеВРТекст = "", ОтображаемыеВРТекст, ОтображаемыеВРТекст + "; ") + ПредставлениеВР;
		КонецЕсли;
	КонецЦикла;
	ОбластьОтображВР.Текст = НСтр("ru = 'Отображаемые ремонты: '") + ОтображаемыеВРТекст;
	
	ТабДок.Вывести(ОбластьПараметров);
		
	ПолеМнемосхемы.ИспользоватьСетку = Ложь;
	ГрафСхема = ПолеМнемосхемы.ПолучитьКартинку();
	ПолеМнемосхемы.ИспользоватьСетку = Истина;
	
	КоличествоРемонтов      = ТаблицаРемонтовВизуализация.Количество();
 	Если КоличествоРемонтов + 1 > 16 Тогда
		КолвоКолонокМнемосхемы = 16;
	Иначе
		КолвоКолонокМнемосхемы = КоличествоРемонтов+1;
	КонецЕсли;
	
	ОбластьКартинка = ТабДок.ПолучитьОбласть(13,2,13,КолвоКолонокМнемосхемы+1);
	Рис = Областькартинка.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рис.Картинка = ГрафСхема;
	Рис.РазмерКартинки  = РазмерКартинки.Пропорционально;
	Рис.Расположить(ТабДок.Область(2,2,2,КолвоКолонокМнемосхемы+1));
	Рис.Высота = (50+ (90*КолСтрокСхемы) + 20)/4;
	Рис.ГраницаСверху = Ложь;
	Рис.ГраницаСлева = Ложь;
	рис.ГраницаСнизу = Ложь;
	Рис.ГраницаСправа = Ложь;
	
	ТабДок.Вывести(ОбластьКартинка);
	
	НарисоватьТаблицуДляПечати(ТабДок, ДополнительныеПараметры);
	
	Для Каждого Элемент Из ОтображаемыеВР Цикл
		ОбластьРасшифровкаКода = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1 ,2,	ТабДок.ВысотаТаблицы + 2, 17);
		ОбластьКод = ОбластьРасшифровкаКода.Область(2,2,2, 17);
		ОбластьКод.Объединить();
		ОбластьКод.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьКод.Шрифт = Новый Шрифт("Arial", 9, Ложь);
		ОбластьКод.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьКод.Текст = СокрЛП(Элемент.Значение.Код) + " - " + Элемент.Значение;
		ТабДок.Вывести(ОбластьРасшифровкаКода);
	КонецЦикла;
	
	ТабДок.ОтображатьСетку = Ложь;
	табДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.КлючПараметровПечати = "торо_РемонтныеГруппы_Визуализация";
	ТабДок.ИмяПараметровПечати = "торо_РемонтныеГруппы_Визуализация";
	
	Возврат ТабДок;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьТаблицуНормативныхРемонтов(ОбъектРемонта) Экспорт
	
	МассивНормативныхРемонтов = торо_РаботаСНормативамиСервер.ПолучитьТаблицуНормативныхРемонтов(ОбъектРемонта, Ложь);
	
	МассивДляУдаления = Новый Массив;
	Индекс = 0;
	Для каждого Строка из МассивНормативныхРемонтов Цикл
		Если Строка.Удален ИЛИ Строка.НеУчаствуетВПланировании Тогда
			МассивДляУдаления.Добавить(Индекс);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПоследнийИндекс = МассивДляУдаления.Количество()-1;
	Пока ПоследнийИндекс >= 0 Цикл
		МассивНормативныхРемонтов.Удалить(МассивДляУдаления[ПоследнийИндекс]);
		ПоследнийИндекс = ПоследнийИндекс - 1;
	КонецЦикла;
	
	Возврат МассивНормативныхРемонтов;
	
КонецФункции

Процедура ЗаполнитьДатыПредшествующихВТаблицеРемонтов(ТаблицаРемонтовВизуализация, ТаблицаНормативов, ПлановыйГрафикРаботы) Экспорт
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ДатаНачПервого = ТаблицаРемонтовВизуализация[0].ДатаНач;
		ДатаПредшествующего = ДатаНачПервого;
	КонецЕсли;
		
	Для Каждого СтрРемонт Из ТаблицаРемонтовВизуализация Цикл
		СтрРемонт.ДатаПредшествующего = Мин(НачалоДня(ДатаПредшествующего),СтрРемонт.ДатаНач);
		ДатаПредшествующего = СтрРемонт.ДатаКон;
	КонецЦикла;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ПоследняяСтрокаРемонта = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
		СтрокаДляПодвала = ТаблицаРемонтовВизуализация.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДляПодвала,ПоследняяСтрокаРемонта);
		СтрокаДляПодвала.Замещен = Ложь;
	КонецЕсли;

	МассивГрафиков = Новый Массив(1);
	МассивГрафиков[0] = ПлановыйГрафикРаботы;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	торо_РасчетППР.СоздатьВТРасписанияРаботыНаПериодСКопированиемПериода(МенеджерВТ, МассивГрафиков, ДатаНачПервого, ДатаПредшествующего, Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаРемонтов.ДатаНач,
	|	ТаблицаРемонтов.ДатаКон,
	|	ТаблицаРемонтов.ВидРемонтныхРабот,
	|	ТаблицаРемонтов.Замещен,
	|	ТаблицаРемонтов.ДатаПредшествующего,
	|	ТаблицаРемонтов.РассчитанПоПериодичности,
	|	ТаблицаРемонтов.ID
	|ПОМЕСТИТЬ ТаблицаРемонтов
	|ИЗ
	|	&ТаблицаРемонтов КАК ТаблицаРемонтов
	|ГДЕ
	|	НЕ ТаблицаРемонтов.Замещен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНормативов.ВидРемонтныхРабот,
	|	ТаблицаНормативов.ПлановыйГрафикРаботы,
	|	ТаблицаНормативов.НормативныйРемонт,
	|	ТаблицаНормативов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	ТаблицаНормативов.Продолжительность,
	|	ТаблицаНормативов.НеУчитыватьПродолжительность
	|ПОМЕСТИТЬ ТаблицаНормативов
	|ИЗ
	|	&ТаблицаНормативов КАК ТаблицаНормативов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ВТРасписанияРаботы.ДатаГрафика,
	|	РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяОкончания, ВТРасписанияРаботы.ВремяНачала, ЧАС) КАК ОсновноеЗначение
	|ПОМЕСТИТЬ ТаблицаГрафиковСоВременем
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтов.ДатаНач,
	|	ТаблицаРемонтов.ДатаКон,
	|	ТаблицаРемонтов.ВидРемонтныхРабот,
	|	ТаблицаРемонтов.Замещен,
	|	ТаблицаРемонтов.ДатаПредшествующего,
	|	ТаблицаРемонтов.РассчитанПоПериодичности,
	|	ТаблицаРемонтов.ID,
	|	ТаблицаНормативов.ПлановыйГрафикРаботы,
	|	ТаблицаНормативов.НормативныйРемонт,
	|	ТаблицаНормативов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	ТаблицаНормативов.НеУчитыватьПродолжительность,
	|	ЕСТЬNULL(ТаблицаНормативов.Продолжительность, 0) КАК Продолжительность
	|ПОМЕСТИТЬ ТаблицаСНормативами
	|ИЗ
	|	ТаблицаРемонтов КАК ТаблицаРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНормативов КАК ТаблицаНормативов
	|		ПО ТаблицаРемонтов.ВидРемонтныхРабот = ТаблицаНормативов.ВидРемонтныхРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСНормативами.ДатаНач КАК ДатаНач,
	|	ТаблицаСНормативами.ДатаКон,
	|	ТаблицаСНормативами.ВидРемонтныхРабот,
	|	ТаблицаСНормативами.Замещен,
	|	ТаблицаСНормативами.ДатаПредшествующего КАК ДатаПредшествующего,
	|	ТаблицаСНормативами.РассчитанПоПериодичности,
	|	ТаблицаСНормативами.ПлановыйГрафикРаботы,
	|	ТаблицаСНормативами.НормативныйРемонт,
	|	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	ТаблицаСНормативами.НеУчитыватьПродолжительность,
	|	ТаблицаСНормативами.Продолжительность,
	|	ТаблицаСНормативами.ID,
	|	СУММА(ЕСТЬNULL(ТаблицаГрафиковСоВременем.ОсновноеЗначение, 0)) КАК Часы,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаГрафиковСоВременем.ОсновноеЗначение ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Дни,
	|	0 КАК ФактическаяНаработка
	|ПОМЕСТИТЬ ТаблицаРемонтыИНормативы
	|ИЗ
	|	ТаблицаСНормативами КАК ТаблицаСНормативами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГрафиковСоВременем КАК ТаблицаГрафиковСоВременем
	|		ПО ТаблицаСНормативами.ПлановыйГрафикРаботы = ТаблицаГрафиковСоВременем.ГрафикРаботы
	|			И ТаблицаСНормативами.ДатаПредшествующего < ТаблицаГрафиковСоВременем.ДатаГрафика
	|			И ТаблицаСНормативами.ДатаНач > ТаблицаГрафиковСоВременем.ДатаГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСНормативами.Замещен,
	|	ТаблицаСНормативами.ПлановыйГрафикРаботы,
	|	ТаблицаСНормативами.ВидРемонтныхРабот,
	|	ТаблицаСНормативами.ДатаПредшествующего,
	|	ТаблицаСНормативами.РассчитанПоПериодичности,
	|	ТаблицаСНормативами.ДатаНач,
	|	ТаблицаСНормативами.ДатаКон,
	|	ТаблицаСНормативами.НеУчитыватьПродолжительность,
	|	ТаблицаСНормативами.НормативныйРемонт,
	|	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	ТаблицаСНормативами.Продолжительность,
	|	ТаблицаСНормативами.ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтов.ВидРемонтныхРабот,
	|	ТаблицаРемонтов.ID,
	|	ТаблицаРемонтов.ДатаНач КАК ДатаНач,
	|	ТаблицаРемонтов.ДатаКон,
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МАКСИМУМ(ТаблицаРемонтов1.ДатаКон), ДЕНЬ, 1), ТаблицаРемонтов.ДатаНач) КАК ДатаПредшествующегоТогожеВида,
	|	ТаблицаРемонтов.Замещен,
	|	ТаблицаРемонтов.ДатаПредшествующего,
	|	ТаблицаРемонтов.РассчитанПоПериодичности,
	|	ТаблицаРемонтов.ПлановыйГрафикРаботы,
	|	ТаблицаРемонтов.НормативныйРемонт,
	|	ТаблицаРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	ТаблицаРемонтов.НеУчитыватьПродолжительность,
	|	ТаблицаРемонтов.Продолжительность,
	|	ТаблицаРемонтов.Часы,
	|	ТаблицаРемонтов.Дни,
	|	ТаблицаРемонтов.ФактическаяНаработка
	|ПОМЕСТИТЬ РемонтыСПредшествующими
	|ИЗ
	|	ТаблицаРемонтыИНормативы КАК ТаблицаРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРемонтыИНормативы КАК ТаблицаРемонтов1
	|		ПО ТаблицаРемонтов.ВидРемонтныхРабот = ТаблицаРемонтов1.ВидРемонтныхРабот
	|			И ТаблицаРемонтов.ДатаНач > ТаблицаРемонтов1.ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРемонтов.ВидРемонтныхРабот,
	|	ТаблицаРемонтов.ID,
	|	ТаблицаРемонтов.ДатаНач,
	|	ТаблицаРемонтов.ДатаКон,
	|	ТаблицаРемонтов.Замещен,
	|	ТаблицаРемонтов.ДатаПредшествующего,
	|	ТаблицаРемонтов.РассчитанПоПериодичности,
	|	ТаблицаРемонтов.ПлановыйГрафикРаботы,
	|	ТаблицаРемонтов.НормативныйРемонт,
	|	ТаблицаРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	ТаблицаРемонтов.НеУчитыватьПродолжительность,
	|	ТаблицаРемонтов.Продолжительность,
	|	ТаблицаРемонтов.Часы,
	|	ТаблицаРемонтов.Дни,
	|	ТаблицаРемонтов.ФактическаяНаработка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РемонтыСПредшествующими.ВидРемонтныхРабот,
	|	РемонтыСПредшествующими.ДатаНач КАК ДатаНач,
	|	РемонтыСПредшествующими.ДатаКон,
	|	РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида,
	|	РемонтыСПредшествующими.Замещен,
	|	РемонтыСПредшествующими.ДатаПредшествующего КАК ДатаПредшествующего,
	|	РемонтыСПредшествующими.РассчитанПоПериодичности,
	|	РемонтыСПредшествующими.ПлановыйГрафикРаботы,
	|	РемонтыСПредшествующими.НормативныйРемонт,
	|	РемонтыСПредшествующими.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	РемонтыСПредшествующими.НеУчитыватьПродолжительность,
	|	РемонтыСПредшествующими.Продолжительность,
	|	РемонтыСПредшествующими.Часы,
	|	РемонтыСПредшествующими.Дни,
	|	РемонтыСПредшествующими.ФактическаяНаработка,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаГрафиковСоВременем.ОсновноеЗначение ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДниОтПредшествующего,
	|	РемонтыСПредшествующими.ID
	|ИЗ
	|	РемонтыСПредшествующими КАК РемонтыСПредшествующими
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГрафиковСоВременем КАК ТаблицаГрафиковСоВременем
	|		ПО РемонтыСПредшествующими.ПлановыйГрафикРаботы = ТаблицаГрафиковСоВременем.ГрафикРаботы
	|			И РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида < ТаблицаГрафиковСоВременем.ДатаГрафика
	|			И РемонтыСПредшествующими.ДатаНач > ТаблицаГрафиковСоВременем.ДатаГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	РемонтыСПредшествующими.ВидРемонтныхРабот,
	|	РемонтыСПредшествующими.ДатаНач,
	|	РемонтыСПредшествующими.ДатаКон,
	|	РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида,
	|	РемонтыСПредшествующими.Замещен,
	|	РемонтыСПредшествующими.ДатаПредшествующего,
	|	РемонтыСПредшествующими.РассчитанПоПериодичности,
	|	РемонтыСПредшествующими.ПлановыйГрафикРаботы,
	|	РемонтыСПредшествующими.НормативныйРемонт,
	|	РемонтыСПредшествующими.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	РемонтыСПредшествующими.НеУчитыватьПродолжительность,
	|	РемонтыСПредшествующими.Продолжительность,
	|	РемонтыСПредшествующими.Часы,
	|	РемонтыСПредшествующими.Дни,
	|	РемонтыСПредшествующими.ФактическаяНаработка,
	|	РемонтыСПредшествующими.ID
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНач,
	|	ДатаПредшествующего УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтовВизуализация.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаНормативов", ТаблицаНормативов);
	
	ТаблицаРемонтовВизуализация.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура РассчитатьНаработкуДляВизуализации(ТаблицаРемонтовВизуализация, МассивОР, КолонкиНаработки, ЗначенияНаработки, ИндексСтроки, ТипДатыНачала, ПолеТД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаРемонтов.ДатаНач КАК ДатаОкончания,
	|	ТаблицаРемонтов." + ТипДатыНачала + " КАК ДатаНачала,
	|	ТаблицаРемонтов.ПлановыйГрафикРаботы
	|ПОМЕСТИТЬ ТаблицаРемонтов
	|ИЗ
	|	&ТаблицаРемонтов КАК ТаблицаРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПродолжительностьПериодаПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ ТаблицаНаработки
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(, ОбъектРемонта В (&МассивОР)) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРемонтов.ДатаНачала,
	|	ТаблицаРемонтов.ДатаОкончания,
	|	ТаблицаНаработки.Показатель,
	|	ТаблицаНаработки.ОбъектРемонта,
	|	ТаблицаРемонтов.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
	|	ТаблицаНаработки.ПлановаяНаработка,
	|	ТаблицаНаработки.ПериодПлановойНаработки,
	|	ТаблицаНаработки.ПродолжительностьПериодаПлановойНаработки,
	|	ТаблицаНаработки.КоэффициентИспользованияОборудования
	|ИЗ
	|	ТаблицаНаработки КАК ТаблицаНаработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемонтов КАК ТаблицаРемонтов
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтовВизуализация.Выгрузить());
	Запрос.УстановитьПараметр("МассивОР", МассивОР);
	ТаблицаНаработка = Запрос.Выполнить().Выгрузить();
	
	ВариантыПериодов = ТаблицаНаработка.Скопировать(,"ПериодПлановойНаработки");
	ВариантыПериодов.Свернуть("ПериодПлановойНаработки");
	
	СоответсвиеИменКолонок = Новый Соответствие;
	
	ТабРемонтовВизуализация = ТаблицаРемонтовВизуализация.Выгрузить().Скопировать();
	
	Для Каждого Период Из ВариантыПериодов Цикл
		ТаблицаСПериодом = ТаблицаНаработка.Скопировать(Новый Структура("ПериодПлановойНаработки",Период.ПериодПлановойНаработки));
		ТаблицаСНаработкой = торо_РаботаСНаработкой.РассчитатьВремяРаботыОРСПериодами(ТаблицаСПериодом,Период.ПериодПлановойНаработки,Истина);
		Для Каждого ЗаписьСНаработкой Из ТаблицаСНаработкой Цикл
			
			МассивСПараметрами = ТаблицаНаработка.НайтиСтроки(Новый Структура("ДатаНачала,ДатаОкончания",
			ЗаписьСНаработкой.ДатаНачала,ЗаписьСНаработкой.ДатаОкончания));	
			
			Для Каждого СтрокаСПараметрами Из МассивСПараметрами Цикл 
				Показатель = СтрокаСПараметрами.Показатель;
				ПоказательID = Показатель.УникальныйИдентификатор();
				ИмяКолонки = СоответсвиеИменКолонок.Получить(ПоказательID);
				Если ИмяКолонки = Неопределено Тогда
					ИмяКолонки = "Колонка" + ИндексСтроки;
					
					НоваяКолонка = ТабРемонтовВизуализация.Колонки.Добавить(ИмяКолонки);
					
					СоответсвиеИменКолонок.Вставить(ПоказательID,ИмяКолонки);
					НоваяСтрокаКолнки = КолонкиНаработки.Добавить();
					НоваяСтрокаКолнки.Показатель = Показатель;
					НоваяСтрокаКолнки.ИмяКолонки = ИмяКолонки;
					НоваяСтрокаКолнки.ПредшествующийТогоЖеВида = ?(ТипДатыНачала = "ДатаПредшествующего", Ложь, Истина);
					ТабРемонтовВизуализация.ЗаполнитьЗначения(0,ИмяКолонки);
					
					ОбластьВывода = ПолеТД.Область(ИндексСтроки, 2);
					ОбластьВывода.Текст = Показатель;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить(ТипДатыНачала, ЗаписьСНаработкой.ДатаНачала);
				Отбор.Вставить("ДатаНач",ЗаписьСНаработкой.ДатаОкончания); 
				
				МассивСтрок = ТабРемонтовВизуализация.НайтиСтроки(Отбор);
				
				Для Каждого Строка Из МассивСтрок Цикл
					
					Строка[ИмяКолонки] = Строка[ИмяКолонки] 
					+ ЗаписьСНаработкой.Периодов / ?(СтрокаСПараметрами.ПродолжительностьПериодаПлановойНаработки = 0,1,СтрокаСПараметрами.ПродолжительностьПериодаПлановойНаработки) 
					* СтрокаСПараметрами.КоэффициентИспользованияОборудования * СтрокаСПараметрами.ПлановаяНаработка;									
					
					НС = ЗначенияНаработки.Добавить();
					НС.ID = Строка.ID;
					НС.ВидРемонтныхРабот = Строка.ВидРемонтныхРабот;
					НС.Показатель = ИмяКолонки;
					НС.Значение = Строка[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьДатуОкончанияПланированияДляСтруктурыРЦ(ОбъектРемонта, ВРНачалоЦикла, ДатаПланирования, ТабПараметрыНаработки, ПлановыйГрафикРаботы)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ОбъектРемонта) = Тип("СправочникСсылка.торо_ТиповыеОР") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	торо_ТиповыеОРНормативныеРемонты.СпособПланирования.ПериодичностьРемонтныхРабот КАК ПериодичностьРемонтныхРабот,
		|	торо_ТиповыеОРНормативныеРемонты.СпособПланирования.КоличествоПериодов КАК КоличествоПериодов
		|ИЗ
		|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
		|ГДЕ
		|	торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
		|	И торо_ТиповыеОРНормативныеРемонты.ВидРемонта = &ВидРемонта"; 
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	торо_НормативныеРемонтыОборудования.СпособПланирования.ПериодичностьРемонтныхРабот КАК ПериодичностьРемонтныхРабот,
		|	торо_НормативныеРемонтыОборудования.СпособПланирования.КоличествоПериодов КАК КоличествоПериодов
		|ИЗ
		|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|ГДЕ
		|	торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
		|	И торо_НормативныеРемонтыОборудования.ОбъектРемонта = &Ссылка
		|			И торо_НормативныеРемонтыОборудования.Приоритет";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектРемонта);
	Запрос.УстановитьПараметр("ВидРемонта", ВРНачалоЦикла);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Периодичность = Выборка.ПериодичностьРемонтныхРабот;
		КолПериодов = Выборка.КоличествоПериодов;
		
		Если Не ЗначениеЗаполнено(Периодичность) Или Не ЗначениеЗаполнено(КолПериодов) Тогда
			
			РассчитатьПоНаработке = ПроверитьЗаполненностьПараметровНаработки(ОбъектРемонта, ВРНачалоЦикла, ТабПараметрыНаработки);
			Если РассчитатьПоНаработке Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК Дата
				|ИЗ
				|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
				|ГДЕ
				|	КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
				|	И КалендарныеГрафики.Календарь = &График
				|	И КалендарныеГрафики.ДеньВключенВГрафик";
				
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
				Запрос.УстановитьПараметр("График", ПлановыйГрафикРаботы);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					КолвоРабДнейВМесяце = Выборка.Дата;
					Если КолвоРабДнейВМесяце = 0 Тогда
						ТекстСообщения = НСтр("ru = 'Не заполнен плановый график работы за текущий месяц'");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
			
				Запрос = Новый Запрос;
				Запрос.Текст = ПолучитьТекстЗапросаДляРасчетаДатыокончанияПланирования(ОбъектРемонта);
							
				Запрос.УстановитьПараметр("Ссылка", ОбъектРемонта);
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
				Запрос.УстановитьПараметр("График", ПлановыйГрафикРаботы);
				Запрос.УстановитьПараметр("ВидРемонта", ВРНачалоЦикла);
				Запрос.УстановитьПараметр("ТабПараметрыНаработки", ТабПараметрыНаработки);
				
				резЗапроса = Запрос.Выполнить();
				Выборка = резЗапроса.Выбрать();
				
				Если Выборка.Следующий() Тогда
					КолПериодов = Цел(Выборка.МесяцевНаработки) + 1;
					Периодичность = Перечисления.Периодичность.Месяц;
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Периодичность = Перечисления.Периодичность.Год И ((Год(ДатаПланирования) + 3*КолПериодов) > 3999)
			Или Периодичность = Перечисления.Периодичность.Месяц И (Год(ДатаПланирования)+Цел((Месяц(ДатаПланирования)+КолПериодов*3)/12)+1) > 3999 Тогда
			ТекстСообщения = НСтр("ru = 'В способе планирования указано слишком большое значение периодичности. Проверьте настройки планирования!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;                                                                                                                    
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(Периодичность) + ", " + Формат(?(КолПериодов = 0, 1, КолПериодов)*3,"ЧГ=0") + ") КАК ДатаОкончания";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат НачалоДня(Выборка.ДатаОкончания)-1;
		Иначе
			Возврат '39991231235959';
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРасчетаДатыокончанияПланирования(ОбъектРемонта)
	
	Если ТипЗнч(ОбъектРемонта) = Тип("СправочникСсылка.торо_ТиповыеОР") Тогда
		
		ЗапросТекст = 
      "ВЫБРАТЬ
		|	&Ссылка КАК ОбъектРемонта,
		|	ТабПараметрыНаработки.Показатель КАК Показатель,
		|	ТабПараметрыНаработки.Период КАК Период,
		|	ТабПараметрыНаработки.ПлановаяНаработка КАК ПлановаяНаработка,
		|	ТабПараметрыНаработки.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
		|	ТабПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
		|	ТабПараметрыНаработки.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования
		|ПОМЕСТИТЬ ТабПараметрыНаработки
		|ИЗ
		|	&ТабПараметрыНаработки КАК ТабПараметрыНаработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 7
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 10
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 30
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 90
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 183
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 365
		|		КОНЕЦ) КАК МаксНаработкаВДень
		|ПОМЕСТИТЬ НаработкаВДень
		|ИЗ
		|	ТабПараметрыНаработки КАК торо_ПараметрыНаработкиОбъектовРемонта
		|ГДЕ
		|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК Дата
		|ПОМЕСТИТЬ КоличествоДнейВМесяце
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
		|	И КалендарныеГрафики.Календарь = &График
		|	И КалендарныеГрафики.ДеньВключенВГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки КАК ЗначениеПараметраНаработки
		|ПОМЕСТИТЬ ПараметрНаработки
		|ИЗ
		|	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
		|		ПО торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = торо_ТиповыеОРНормативныеРемонты.СпособПланирования
		|ГДЕ
		|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта = &ВидРемонта
		|	И торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрНаработки.ЗначениеПараметраНаработки, 0) = 0
		|				ИЛИ ЕСТЬNULL(НаработкаВДень.МаксНаработкаВДень, 0) = 0
		|				ИЛИ ЕСТЬNULL(КоличествоДнейВМесяце.Дата, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПараметрНаработки.ЗначениеПараметраНаработки / НаработкаВДень.МаксНаработкаВДень / КоличествоДнейВМесяце.Дата
		|	КОНЕЦ КАК МесяцевНаработки
		|ИЗ
		|	ПараметрНаработки КАК ПараметрНаработки,
		|	КоличествоДнейВМесяце КАК КоличествоДнейВМесяце,
		|	НаработкаВДень КАК НаработкаВДень";
		
	Иначе
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	&Ссылка КАК ОбъектРемонта,
		|	ТабПараметрыНаработки.Показатель КАК Показатель,
		|	ТабПараметрыНаработки.Период КАК Период,
		|	ТабПараметрыНаработки.ПлановаяНаработка КАК ПлановаяНаработка,
		|	ТабПараметрыНаработки.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
		|	ТабПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
		|	ТабПараметрыНаработки.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования
		|ПОМЕСТИТЬ ТабПараметрыНаработки
		|ИЗ
		|	&ТабПараметрыНаработки КАК ТабПараметрыНаработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 7
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 10
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 28
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 90
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 182
		|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 365
		|		КОНЕЦ) КАК МаксНаработкаВДень
		|ПОМЕСТИТЬ НаработкаВДень
		|ИЗ
		|	ТабПараметрыНаработки КАК торо_ПараметрыНаработкиОбъектовРемонта
		|ГДЕ
		|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК Дата
		|ПОМЕСТИТЬ КоличествоДнейВМесяце
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
		|	И КалендарныеГрафики.Календарь = &График
		|	И КалендарныеГрафики.ДеньВключенВГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки КАК ЗначениеПараметраНаработки
		|ПОМЕСТИТЬ ПараметрНаработки
		|ИЗ
		|	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|		ПО торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = торо_НормативныеРемонтыОборудования.СпособПланирования
		|ГДЕ
		|	торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
		|	И торо_НормативныеРемонтыОборудования.ОбъектРемонта = &Ссылка
		|	И торо_НормативныеРемонтыОборудования.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НаработкаВДень.МаксНаработкаВДень = 0
		|				ИЛИ КоличествоДнейВМесяце.Дата = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ПараметрНаработки.ЗначениеПараметраНаработки / НаработкаВДень.МаксНаработкаВДень / КоличествоДнейВМесяце.Дата, 0)
		|	КОНЕЦ КАК МесяцевНаработки
		|ИЗ
		|	ПараметрНаработки КАК ПараметрНаработки,
		|	КоличествоДнейВМесяце КАК КоличествоДнейВМесяце,
		|	НаработкаВДень КАК НаработкаВДень";

	КонецЕсли;
	
	Возврат ЗапросТекст;
	
КонецФункции

Функция ПроверкаПередРасчетомСтруктурыРЦ(МассивГрафиковРаботы, ДатаПланированияНачало, ДатаПланированияОкончание)
	
	НужныеГода = Новый ТаблицаЗначений;
	НужныеГода.Колонки.Добавить("ГодГрафика", Новый ОписаниеТипов("Число"));
	
	НужныеГода.Добавить().ГодГрафика = Год(ТекущаяДата());
	
	ГрафикЗаполнен = ПроверитьЗаполненностьГрафика(МассивГрафиковРаботы, ДатаПланированияНачало, ДатаПланированияОкончание, НужныеГода);
	
	Возврат ГрафикЗаполнен;
	
КонецФункции

Функция ПроверитьЗаполненностьГрафика(МассивГрафиков, НачалоПериода, КонецПериода, НужныеГода)
	
	ГрафикЗаполнен = Истина;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(НачалоПериода), КонецПериода);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НужныеГода.ГодГрафика КАК ГодГрафика
	               |ПОМЕСТИТЬ НужныеГода
	               |ИЗ
	               |	&НужныеГода КАК НужныеГода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Календари.Ссылка КАК ГрафикРемонтныхРабот,
	               |	НужныеГода.ГодГрафика КАК ГодГрафика
	               |ПОМЕСТИТЬ ВремТабл
	               |ИЗ
	               |	Справочник.Календари КАК Календари,
	               |	НужныеГода КАК НужныеГода
	               |ГДЕ
	               |	Календари.Ссылка В(&МассивГрафиков)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРасписанияРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодГрафика,
	               |	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение
	               |ПОМЕСТИТЬ ВТРасписанияРаботыИзм
	               |ИЗ
	               |	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТРасписанияРаботы.ГрафикРаботы,
	               |	ГОД(ВТРасписанияРаботы.ДатаГрафика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремТабл.ГрафикРемонтныхРабот КАК ГрафикРаботы,
	               |	ВремТабл.ГодГрафика КАК ГодГрафика,
	               |	ЕСТЬNULL(ВТРасписанияРаботыИзм.ОсновноеЗначение, 0) КАК ОсновноеЗначение
	               |ИЗ
	               |	ВремТабл КАК ВремТабл
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	               |		ПО ВремТабл.ГодГрафика = ВТРасписанияРаботыИзм.ГодГрафика
	               |			И ВремТабл.ГрафикРемонтныхРабот = ВТРасписанияРаботыИзм.ГрафикРаботы";
	
	Запрос.УстановитьПараметр("НужныеГода", НужныеГода);
	Запрос.УстановитьПараметр("МассивГрафиков", МассивГрафиков);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОсновноеЗначение = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Не заполнен график %1 за %2 год'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ГрафикРаботы, Выборка.ГодГрафика);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ГрафикЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГрафикЗаполнен;
	
КонецФункции

Функция ПроверитьЗаполненностьПараметровНаработки(ОбъектРемонта, ВРНачалоЦикла, ТабПараметрыНаработки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТиповыеОРНормативныеРемонты.ВидРемонта КАК ВидРемонта,
	               |	торо_ТиповыеОРНормативныеРемонты.Ссылка КАК ТиповойОР
	               |ПОМЕСТИТЬ РассчитываемыеПоНаработке
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	               |ГДЕ
	               |	торо_ТиповыеОРНормативныеРемонты.ВидРемонта = &ВР
	               |	И торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	               |	И торо_ТиповыеОРНормативныеРемонты.СпособПланирования.ИспользоватьПараметрыНаработки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Ссылка КАК ОбъектРемонта,
	               |	ТабПараметрыНаработки.Показатель КАК Показатель,
	               |	ТабПараметрыНаработки.Период КАК Период,
	               |	ТабПараметрыНаработки.ПлановаяНаработка КАК ПлановаяНаработка,
	               |	ТабПараметрыНаработки.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
	               |	ТабПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
	               |	ТабПараметрыНаработки.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования
	               |ПОМЕСТИТЬ ТабПараметрыНаработки
	               |ИЗ
	               |	&ТабПараметрыНаработки КАК ТабПараметрыНаработки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РассчитываемыеПоНаработке.ВидРемонта КАК ВидРемонта,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель
	               |ПОМЕСТИТЬ ПараметрыПлановойНаработки
	               |ИЗ
	               |	РассчитываемыеПоНаработке КАК РассчитываемыеПоНаработке
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабПараметрыНаработки КАК торо_ПараметрыНаработкиОбъектовРемонта
	               |		ПО (торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = РассчитываемыеПоНаработке.ТиповойОР)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПараметрыПлановойНаработки.ВидРемонта КАК ВидРемонта
	               |ИЗ
	               |	ПараметрыПлановойНаработки КАК ПараметрыПлановойНаработки
	               |ГДЕ
	               |	ПараметрыПлановойНаработки.Показатель ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектРемонта);
	Запрос.УстановитьПараметр("ВР", ВРНачалоЦикла);
	Запрос.УстановитьПараметр("ТабПараметрыНаработки", ТабПараметрыНаработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Проверьте заполненность показателей плановой наработки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	Иначе
		
		ТиповойОР = Неопределено;
		Если ТипЗнч(ОбъектРемонта) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			ТиповойОР = ОбъектРемонта.ТиповойОР;
		Иначе
			ТиповойОР = ОбъектРемонта.Родитель;
		КонецЕсли;
		
		СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработки(ОбъектРемонта, ТиповойОР);
		Если СтруктураВозврата.Количество() <> 0 Тогда
			Для Каждого Строка из СтруктураВозврата Цикл
				Если Не ЗначениеЗаполнено(Строка.Период) ИЛИ Не ЗначениеЗаполнено(Строка.ПлановаяНаработка) ИЛИ Не ЗначениеЗаполнено(Строка.ПродолжительностьПериодаПлановойНаработки) Тогда
					ТекстСообщения = НСтр("ru = 'Проверьте заполненность показателей плановой наработки.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Возврат Ложь;
				Иначе
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверьте заполненность показателей плановой наработки.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура НарисоватьТаблицуДляПечати(ТабличныйДокумент, ДополнительныеПараметры)
	
	КолонкиНаработки = ДополнительныеПараметры.КолонкиНаработки;
	ЗначенияНаработки = ДополнительныеПараметры.ЗначенияНаработки;
	ТаблицаРемонтовВизуализация = ДополнительныеПараметры.ТаблицаРемонтовВизуализация;
	
	ПервичныйСдвигСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	ИндексСтроки = 8 + КолонкиНаработки.Количество() + 1;
	ШиринаПоляТД = 145;
	КоличествоКолонокПоляТД = 15;
	
	торо_РасчетСтруктурыРемонтногоЦиклаКлиентСервер.ВывестиКолонкуЗаголовковТаблицыРасшифровки(ТабличныйДокумент, ПервичныйСдвигСтрок, КоличествоКолонокПоляТД, ТаблицаРемонтовВизуализация.Количество(), ИндексСтроки, КолонкиНаработки);
	
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	НомерРемонта = 1;
	
	Для Каждого СтрокаРемонта Из ТаблицаРемонтовВизуализация Цикл
		Если Не ЗначениеЗаполнено(СтрокаРемонта.ВидРемонтныхРабот) Тогда
			Продолжить;
		КонецЕсли;
		
		торо_РасчетСтруктурыРемонтногоЦиклаКлиентСервер.ВывестиКолонкуДанныхТаблицыРасшифровки(ТабличныйДокумент, СдвигСтрокПоляТД, ИндексСтроки, НомерРемонта, СтрокаРемонта, КолонкиНаработки, ЗначенияНаработки);
		
		НомерРемонта = НомерРемонта + 1;
		
		Если Не (ТабличныйДокумент.ТекущаяОбласть = Неопределено) И (НомерРемонта + 2)*9 > ШиринаПоляТД Тогда 
			СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
			НомерРемонта = 1;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
