
#Область ПрограммныйИнтерфейс

// Возвращает таблицу значений, в которой для ОР, переданных в параметре МассивОР, указано наличие/отсутствие подчиненных.
//
// Параметры:
//		МассивОР - Массив - массив элементов СправочникСсылка.торо_ОбъектыРемонта, у которых будет проверяться наличие подчиненных.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктураОР - иерархия, в которой необходимо определить подчиненных.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица с колонками "ОбъектИерархии" и "ЕстьПодчиненные"
Функция ТаблицаНаличияПодчиненныхОР(МассивОР, СтруктураИерархии) Экспорт
	
	Запрос = Новый Запрос;
	
	Если СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ОбъектыРемонта
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка В(&МассивОР)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_ОРСПодчиненными
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии В
		|				(ВЫБРАТЬ
		|					ВТ_ОбъектыРемонта.Ссылка КАК Ссылка
		|				ИЗ
		|					ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта)
		|			И НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РодительИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
		|	ВЫБОР
		|		КОГДА ВТ_ОРСПодчиненными.РодительИерархии ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПодчиненные
		|ИЗ
		|	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОРСПодчиненными КАК ВТ_ОРСПодчиненными
		|		ПО ВТ_ОбъектыРемонта.Ссылка = ВТ_ОРСПодчиненными.РодительИерархии";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ОбъектыРемонта
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка В(&МассивОР)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_ОРСПодчиненными
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии В
		|			(ВЫБРАТЬ
		|				ВТ_ОбъектыРемонта.Ссылка КАК Ссылка
		|			ИЗ
		|				ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта)
		|	И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РодительИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
		|	ВЫБОР
		|		КОГДА ВТ_ОРСПодчиненными.РодительИерархии ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПодчиненные
		|ИЗ
		|	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОРСПодчиненными КАК ВТ_ОРСПодчиненными
		|		ПО ВТ_ОбъектыРемонта.Ссылка = ВТ_ОРСПодчиненными.РодительИерархии";
		
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивОР", МассивОР);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Заполняет на форме реквизит СтруктураПараметровИерархии.
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма списка, выбора или подбора объектов ремонта.
//
Процедура ЗаполнитьПараметрыИерархии(Форма) Экспорт
	
	Форма.СтруктураПараметровИерархии = ПолучитьПараметрыИерархии(Форма.ТекСтруктураИерархии);
	
КонецПроцедуры

// Формирует структуру параметров иерархии по ссылке.
// Параметры:
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
// Возвращаемое значение:
//		Структура - структура параметров иерархии.
Функция ПолучитьПараметрыИерархии(СтруктураИерархии) Экспорт
	
	СтруктураПараметровИерархии = Новый Структура;
	СтруктураПараметровИерархии.Вставить("ИзменяетсяДокументами", Ложь);
	СтруктураПараметровИерархии.Вставить("СтроитсяАвтоматически", Ложь);
	СтруктураПараметровИерархии.Вставить("ИерархическийСправочник", Ложь);
	СтруктураПараметровИерархии.Вставить("РеквизитОР", "");
	СтруктураПараметровИерархии.Вставить("ТипРеквизитаОР", "");
	СтруктураПараметровИерархии.Вставить("ТекСтруктураИерархии", Неопределено);
	СтруктураПараметровИерархии.Вставить("РазрешенВводНовыхОР", Ложь);
	СтруктураПараметровИерархии.Вставить("КонечныеЭлементыВДереве", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтруктурыОР.РазрешенВводНовыхОР КАК РазрешенВводНовыхОР,
	|	торо_СтруктурыОР.ИзменяетсяДокументами КАК ИзменяетсяДокументами,
	|	торо_СтруктурыОР.СтроитсяАвтоматически КАК СтроитсяАвтоматически,
	|	торо_СтруктурыОР.РеквизитОР КАК РеквизитОР,
	|	торо_СтруктурыОР.ТипРеквизитаОР КАК ТипРеквизитаОР,
	|	торо_СтруктурыОР.КонечныеЭлементыВДереве КАК КонечныеЭлементыВДереве
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	торо_СтруктурыОР.Ссылка = &СтруктураИерархии";
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПараметровИерархии.ТекСтруктураИерархии = СтруктураИерархии;
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметровИерархии, Выборка);
		Если Выборка.СтроитсяАвтоматически И Выборка.ТипРеквизитаОР <> "" Тогда
			СтруктураПараметровИерархии.ИерархическийСправочник = торо_ОбщегоНазначенияПовтИсп.СправочникИерархический(Выборка.ТипРеквизитаОР);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметровИерархии;
	
КонецФункции

// Устанавливает запрос в динамическом списке в зависимости от текущей структуры иерархии.
// Параметры:
//		Список - ДинамическийСписок - динамический список объектов ремонта.
//		СтруктураПараметровИерархии - Структура - структура параметров, см. ЗаполнитьПараметрыИерархии.
//		ПустойРодитель - ПустаяСсылка - значение ссылки, соответствующее незаполненному родителю.
//		ПолучатьСтатусыВУчете - Булево - нужно ли получать статусы в учете для списка ОР. Для формы списка не требуется,
//			для формы выбора зависит от значения функциональной опции "ИспользоватьДокументыЖЦОборудования".
//
Процедура УстановитьЗапросВСпискеПоИерархии(Список, СтруктураПараметровИерархии, ПустойРодитель, ПолучатьСтатусыВУчете = Ложь) Экспорт
	
	ИерархияРеквизитОР = СтруктураПараметровИерархии.РеквизитОР;
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		
		Список.ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
		|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
		|	торо_ОбъектыРемонта.Код КАК Код,
		|	торо_ОбъектыРемонта.Наименование КАК Наименование,
		|	торо_ОбъектыРемонта.АдресМестонахождения КАК АдресМестонахождения,
		|	торо_ОбъектыРемонта.ВестиУчетСерийныхЗапчастей КАК ВестиУчетСерийныхЗапчастей,
		|	торо_ОбъектыРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
		|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		|	торо_ОбъектыРемонта.ДатаВыпуска КАК ДатаВыпуска,
		|	торо_ОбъектыРемонта.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
		|	торо_ОбъектыРемонта.Изготовитель КАК Изготовитель,
		|	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	торо_ОбъектыРемонта.КодОР КАК КодОР,
		|	торо_ОбъектыРемонта.КодПоОКОФ КАК КодПоОКОФ,
		|	торо_ОбъектыРемонта.Комментарий КАК Комментарий,
		|	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
		|	торо_ОбъектыРемонта.КонтрагентИсполнительРемонта КАК КонтрагентИсполнительРемонта,
		|	торо_ОбъектыРемонта.Направление КАК Направление,
		|	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
		|	торо_ОбъектыРемонта.НомерПаспорта КАК НомерПаспорта,
		|	торо_ОбъектыРемонта.Организация КАК Организация,
		|	торо_ОбъектыРемонта.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
		|	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
		|	торо_ОбъектыРемонта.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
		|	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
		|	торо_ОбъектыРемонта.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
		|	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
		|	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
		|	торо_ОбъектыРемонта.ЭтоАктив КАК ЭтоАктив,
		|	торо_ОбъектыРемонта.ФайлКартинки КАК ФайлКартинки,
		|	торо_ОбъектыРемонта.УсловиеРемонта КАК УсловиеРемонта,
		|	торо_ОбъектыРемонта.ШтрихКод КАК ШтрихКод,
		|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
		|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
		|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьФайлы,
		|	0 КАК ИндексКартинки,
		|   Константы.торо_КартинкаДинамическогоСписка КАК КартинкаОтображаемая,
		|	ЛОЖЬ КАК ЭтоСоставной,
		|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочивания,
		|	торо_ОбъектыРемонта."+ИерархияРеквизитОР+" КАК Родитель,
		|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонты, ЛОЖЬ)
		|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ) КАК ЕстьНормативы,
		|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонтыДоступныеДляПодбора, ЛОЖЬ)
		|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ) КАК ЕстьНормативыДляПодбора,
		|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьИзмеряемыеПоказатели, ЛОЖЬ) КАК ЕстьИзмеряемыеПоказатели,
		|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьПараметрыНаработки, ЛОЖЬ) КАК ЕстьПараметрыНаработки,
		|" + ?(ПолучатьСтатусыВУчете,
				"	ВЫБОР
				|		КОГДА НЕ торо_ОбъектыРемонта.ЭтоГруппа
				|			ТОГДА ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету))
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПустаяСсылка)
				|	КОНЕЦ КАК СтатусВУчете",
				"НЕОПРЕДЕЛЕНО КАК СтатусВУчете") + "
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО торо_ОбъектыРемонта.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		|		ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
		|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НаличиеНормативовОбъектовРемонта КАК торо_НаличиеНормативовОбъектовРемонта
		|		ПО (торо_ОбъектыРемонта.Ссылка = торо_НаличиеНормативовОбъектовРемонта.ОбъектРемонта)
		|" + ?(ПолучатьСтатусыВУчете,
				" ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних КАК торо_СтатусыОбъектовРемонтаВУчете
				| ПО торо_ОбъектыРемонта.Ссылка = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта",
				"") + ",
		|     Константы КАК Константы		
		|ГДЕ
		|	НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|";
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
		
	Иначе
			
		Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
			
			Список.ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_СтруктураИерархии.РодительИерархии КАК РодительИерархии,
			|	ИСТИНА КАК ЭтоСоставной
			|ПОМЕСТИТЬ ВТ_РодителиИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК ВТ_СтруктураИерархии
			|ГДЕ
			|	ВТ_СтруктураИерархии.Удален = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РодительИерархии
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
			|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
			|	торо_ОбъектыРемонта.Код КАК Код,
			|	торо_ОбъектыРемонта.Наименование КАК Наименование,
			|	торо_ОбъектыРемонта.АдресМестонахождения КАК АдресМестонахождения,
			|	торо_ОбъектыРемонта.ВестиУчетСерийныхЗапчастей КАК ВестиУчетСерийныхЗапчастей,
			|	торо_ОбъектыРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
			|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
			|	торо_ОбъектыРемонта.ДатаВыпуска КАК ДатаВыпуска,
			|	торо_ОбъектыРемонта.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
			|	торо_ОбъектыРемонта.Изготовитель КАК Изготовитель,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	торо_ОбъектыРемонта.КодОР КАК КодОР,
			|	торо_ОбъектыРемонта.КодПоОКОФ КАК КодПоОКОФ,
			|	торо_ОбъектыРемонта.Комментарий КАК Комментарий,
			|	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
			|	торо_ОбъектыРемонта.КонтрагентИсполнительРемонта КАК КонтрагентИсполнительРемонта,
			|	торо_ОбъектыРемонта.Направление КАК Направление,
			|	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
			|	торо_ОбъектыРемонта.НомерПаспорта КАК НомерПаспорта,
			|	торо_ОбъектыРемонта.Организация КАК Организация,
			|	торо_ОбъектыРемонта.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
			|	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
			|	торо_ОбъектыРемонта.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
			|	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
			|	торо_ОбъектыРемонта.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
			|	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
			|	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
			|	торо_ОбъектыРемонта.ЭтоАктив КАК ЭтоАктив,
			|	торо_ОбъектыРемонта.ФайлКартинки КАК ФайлКартинки,
			|	торо_ОбъектыРемонта.УсловиеРемонта КАК УсловиеРемонта,
			|	торо_ОбъектыРемонта.ШтрихКод КАК ШтрихКод,
			|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
			|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
			|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьФайлы,
			|	0 КАК ИндексКартинки,
			|   Константы.торо_КартинкаДинамическогоСписка КАК КартинкаОтображаемая,
			|	ЕСТЬNULL(ВТ_РодителиИерархии.ЭтоСоставной, ЛОЖЬ) КАК ЭтоСоставной,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочивания,
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК Родитель,
			|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонты, ЛОЖЬ)
			|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ) КАК ЕстьНормативы,
			|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонтыДоступныеДляПодбора, ЛОЖЬ)
			|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ) КАК ЕстьНормативыДляПодбора,
			|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьИзмеряемыеПоказатели, ЛОЖЬ) КАК ЕстьИзмеряемыеПоказатели,
			|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьПараметрыНаработки, ЛОЖЬ) КАК ЕстьПараметрыНаработки,
			|" + ?(ПолучатьСтатусыВУчете,
					"	ВЫБОР
					|		КОГДА НЕ торо_ОбъектыРемонта.ЭтоГруппа
					|			ТОГДА ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету))
					|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПустаяСсылка)
					|	КОНЕЦ КАК СтатусВУчете",
					"НЕОПРЕДЕЛЕНО КАК СтатусВУчете") + "
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
			|			И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РодителиИерархии КАК ВТ_РодителиИерархии
			|		ПО торо_ОбъектыРемонта.Ссылка = ВТ_РодителиИерархии.РодительИерархии
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
			|		ПО торо_ОбъектыРемонта.Ссылка = НаличиеФайлов.ОбъектСФайлами
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НаличиеНормативовОбъектовРемонта КАК торо_НаличиеНормативовОбъектовРемонта
			|		ПО (торо_ОбъектыРемонта.Ссылка = торо_НаличиеНормативовОбъектовРемонта.ОбъектРемонта)
			|" + ?(ПолучатьСтатусыВУчете,
					" ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних КАК торо_СтатусыОбъектовРемонтаВУчете
					| ПО торо_ОбъектыРемонта.Ссылка = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта",
					"") + ",
			|     Константы КАК Константы		
			|";
			
		Иначе
			
			Список.ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
			|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
			|	торо_ОбъектыРемонта.Код КАК Код,
			|	торо_ОбъектыРемонта.Наименование КАК Наименование,
			|	торо_ОбъектыРемонта.АдресМестонахождения КАК АдресМестонахождения,
			|	торо_ОбъектыРемонта.ВестиУчетСерийныхЗапчастей КАК ВестиУчетСерийныхЗапчастей,
			|	торо_ОбъектыРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
			|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
			|	торо_ОбъектыРемонта.ДатаВыпуска КАК ДатаВыпуска,
			|	торо_ОбъектыРемонта.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
			|	торо_ОбъектыРемонта.Изготовитель КАК Изготовитель,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	торо_ОбъектыРемонта.КодОР КАК КодОР,
			|	торо_ОбъектыРемонта.КодПоОКОФ КАК КодПоОКОФ,
			|	торо_ОбъектыРемонта.Комментарий КАК Комментарий,
			|	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
			|	торо_ОбъектыРемонта.КонтрагентИсполнительРемонта КАК КонтрагентИсполнительРемонта,
			|	торо_ОбъектыРемонта.Направление КАК Направление,
			|	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
			|	торо_ОбъектыРемонта.НомерПаспорта КАК НомерПаспорта,
			|	торо_ОбъектыРемонта.Организация КАК Организация,
			|	торо_ОбъектыРемонта.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
			|	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
			|	торо_ОбъектыРемонта.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
			|	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
			|	торо_ОбъектыРемонта.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
			|	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
			|	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
			|	торо_ОбъектыРемонта.ЭтоАктив КАК ЭтоАктив,
			|	торо_ОбъектыРемонта.ФайлКартинки КАК ФайлКартинки,
			|	торо_ОбъектыРемонта.УсловиеРемонта КАК УсловиеРемонта,
			|	торо_ОбъектыРемонта.ШтрихКод КАК ШтрихКод,
			|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
			|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
			|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьФайлы,
			|	0 КАК ИндексКартинки,
			|   Константы.торо_КартинкаДинамическогоСписка КАК КартинкаОтображаемая,
			|	ЕСТЬNULL(торо_ОбъектыРемонтаГруппы.ОбъектГруппа, ЛОЖЬ) КАК ЭтоСоставной,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочивания,
			|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Родитель,
			|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонты, ЛОЖЬ)
			|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ) КАК ЕстьНормативы,
			|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонтыДоступныеДляПодбора, ЛОЖЬ)
			|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ) КАК ЕстьНормативыДляПодбора,
			|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьИзмеряемыеПоказатели, ЛОЖЬ) КАК ЕстьИзмеряемыеПоказатели,
			|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьПараметрыНаработки, ЛОЖЬ) КАК ЕстьПараметрыНаработки,
			|" + ?(ПолучатьСтатусыВУчете,
					"	ВЫБОР
					|		КОГДА НЕ торо_ОбъектыРемонта.ЭтоГруппа
					|			ТОГДА ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету))
					|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПустаяСсылка)
					|	КОНЕЦ КАК СтатусВУчете",
					"НЕОПРЕДЕЛЕНО КАК СтатусВУчете") + "
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			|			И (торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
			|			И (торо_ОбъектыРемонтаГруппы.СтруктураИерархии = &СтруктураИерархии)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
			|		ПО торо_ОбъектыРемонта.Ссылка = НаличиеФайлов.ОбъектСФайлами
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НаличиеНормативовОбъектовРемонта КАК торо_НаличиеНормативовОбъектовРемонта
			|		ПО (торо_ОбъектыРемонта.Ссылка = торо_НаличиеНормативовОбъектовРемонта.ОбъектРемонта)
			|" + ?(ПолучатьСтатусыВУчете,
					" ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних КАК торо_СтатусыОбъектовРемонтаВУчете
					| ПО торо_ОбъектыРемонта.Ссылка = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта",
					"") + ",
			|     Константы КАК Константы		
			|";
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
	КонецЕсли;

	торо_РаботаСИерархией20КлиентСервер.УстановитьОтборСпискаПоРодителю(Список, ПустойРодитель);
	
КонецПроцедуры

// Обработчик события ПриПолученииДанныхНаСервере для динамического списка объектов ремонта.
//
// Параметры:
//  ИмяЭлемента - Строка - Содержит имя таблицы формы, из которой вызван обработчик события.
//  Настройки	 - НастройкиКомпоновкиДанных - Содержит копию полных настроек динамического списка.
//  Строки		 - СтрокиДинамическогоСписка - Коллекция содержит данные и оформление всех строк, 
//															получаемых в списке, кроме строк группировок.
//  ИспользоватьКартинкиТОР - Булево - нужно ли использовать в качестве картинки ОР картинку типового объекта ремонта.
//
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки, ИспользоватьКартинкиТОР = Ложь) Экспорт
	
	СтруктураПараметровКартинки = торо_РаботаСИерархией20КлиентСервер.СтруктураПараметровДляОпределенияИндексаКартинки();
	
	Для каждого Строка из Строки Цикл
		ДанныеСтроки = Строка.Значение.Данные;
		Если ДанныеСтроки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПараметровКартинки, ДанныеСтроки);
			ДанныеСтроки.ИндексКартинки = торо_РаботаСИерархией20КлиентСервер.ПолучитьИндексКартинкиДереваНеавтоматическойИерархии(СтруктураПараметровКартинки);
			Если ИспользоватьКартинкиТОР И ТипЗнч(ДанныеСтроки.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта")
				И (Не ДанныеСтроки.Ссылка.ПометкаУдаления) И ЗначениеЗаполнено(ДанныеСтроки.Ссылка.ТиповойОР) Тогда
				КартинкаТОР = ДанныеСтроки.Ссылка.ТиповойОР.ФайлКартинки;
				Если НЕ КартинкаТОР = Справочники.торо_ТиповыеОРПрисоединенныеФайлы.ПустаяСсылка() Тогда
					УИД = ДанныеСтроки.Ссылка.ТиповойОР.УникальныйИдентификатор();
					
					ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
					ПараметрыДанныхФайла.ИдентификаторФормы = УИД;
					
					АдресКартинки = РаботаСФайлами.ДанныеФайла(КартинкаТОР, ПараметрыДанныхФайла).СсылкаНаДвоичныеДанныеФайла;
					ДанныеСтроки.КартинкаОтображаемая = АдресКартинки; 
				Иначе
					ДанныеСтроки.КартинкаОтображаемая = ДанныеСтроки.ИндексКартинки;
				КонецЕсли;
			Иначе 
				ДанныеСтроки.КартинкаОтображаемая = ДанныеСтроки.ИндексКартинки;
			КонецЕсли;	
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив структур данных строк на верхнем уровне иерархии.
// Параметры:
//		СтруктураПараметровИерархии - Структура - структура параметров, см. ЗаполнитьПараметрыИерархии.
//		РодительИерархии - СправочникСсылка - ссылка на родителя, от которого нужно получить подчиненных.
//		ПолучатьСтатусыВУчете - Булево - нужно ли получать статусы в учете для списка ОР. Для формы списка не требуется,
//			для формы выбора зависит от значения функциональной опции "ИспользоватьДокументыЖЦОборудования".
//		ОтборСтатусыВУчете - СписокЗначений - список статусов для отбора.
//		ВключаяКонечныеЭлементы - Булево - нужно ли получать элементы, не являющиеся группами.
//		ДополнительныеОтборы - СписокЗначений - список дополнительных отборов, где элементом является структура:
//			* Ключ - Строка - имя реквизита справочника "Объекты ремонта" для отбора.
//			* Значение - Значение - значение для отбора.
//			* ВидСравнения - ВидСравненияКомпоновкиДанных - нее обязательный, вид сравнения. Если поля в структуре нет,
//				то считается, что вид сранения Равно.
//
// Возвращаемое значение:
//		Массив - массив структур данных строк одного уровня иерархии.
//	
Функция ПолучитьМассивСтрокВерхнегоУровняИерархии(СтруктураПараметровИерархии, РодительИерархии, ПолучатьСтатусыВУчете = Ложь, ОтборСтатусыВУчете = Неопределено, ВключаяКонечныеЭлементы = Ложь, ДополнительныеОтборы = Неопределено) Экспорт
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически И НЕ СтруктураПараметровИерархии.ИерархическийСправочник Тогда
		
		Запрос = Новый Запрос;
		
		Если ВключаяКонечныеЭлементы Тогда
			
			ПолучатьСтатусыВУчетеФакт = (ПолучатьСтатусыВУчете = Истина) И ОтборСтатусыВУчете <> Неопределено И ОтборСтатусыВУчете.Количество() > 0;
			
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Если ПолучатьСтатусыВУчетеФакт Тогда
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
				|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР
				|ПОМЕСТИТЬ ВТ_СтатусыОРВУчете
				|ИЗ
				|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ОбъектРемонта";
			Иначе
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НЕОПРЕДЕЛЕНО КАК ОбъектРемонта,
				|	НЕОПРЕДЕЛЕНО КАК СтатусОР
				|ПОМЕСТИТЬ ВТ_СтатусыОРВУчете";
			КонецЕсли;
			
			Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ИСТИНА КАК ЕстьПодчиненные,
			|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " КАК РодительИерархии
			|ПОМЕСТИТЬ ВТ_НаличиеПодчиненных
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыОРВУчете КАК ВТ_СтатусыОРВУчете
			|		ПО торо_ОбъектыРемонта.Ссылка = ВТ_СтатусыОРВУчете.ОбъектРемонта
			|ГДЕ
			|	торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ
			|	И &УсловиеПоСтатусамВУчете
			|	И &ДополнительныеОтборы
			|	И торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " <> &РодительИерархии
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РодительИерархии
			|;
			|///////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
			|	НЕОПРЕДЕЛЕНО КАК ОбъектРемонта,
			|	&РодительИерархии КАК РодительИерархии,
			|	СправочникСсылка.Наименование КАК Наименование,
			|	СправочникСсылка.ПометкаУдаления КАК ПометкаУдаления,
			|	ЛОЖЬ КАК ЭтоГруппа,
			|	ВЫБОР
			|		КОГДА СправочникСсылка.ПометкаУдаления
			|			ТОГДА 10
			|		ИНАЧЕ 9
			|	КОНЕЦ КАК ИндексКартинки,
			|	0 КАК РеквизитДопУпорядочивания,
			|	НЕОПРЕДЕЛЕНО КАК ТипОбъекта,
			|	ЕСТЬNULL(ВТ_НаличиеПодчиненных.ЕстьПодчиненные, ЛОЖЬ) КАК ЕстьПодчиненные 
			|ИЗ
			|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК СправочникСсылка			
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаличиеПодчиненных КАК ВТ_НаличиеПодчиненных
			|		ПО СправочникСсылка.Ссылка = ВТ_НаличиеПодчиненных.РодительИерархии
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ПО СправочникСсылка.Ссылка = торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	торо_ОбъектыРемонта.Ссылка,
			|	торо_ОбъектыРемонта.Ссылка,
			|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + ",
			|	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонта.Ссылка),
			|	торо_ОбъектыРемонта.ПометкаУдаления,
			|	торо_ОбъектыРемонта.ЭтоГруппа,
			|	ВЫБОР
			|		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			|			ТОГДА ВЫБОР
			|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			|						ТОГДА 6
			|					ИНАЧЕ 5
			|				КОНЕЦ
			|		КОГДА торо_ОбъектыРемонта.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
			|			ТОГДА ВЫБОР
			|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			|						ТОГДА 12
			|					ИНАЧЕ 11
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0),
			|	торо_ОбъектыРемонта.ТипОбъекта,
			|	ЛОЖЬ КАК ЕстьПодчиненные
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыОРВУчете КАК ВТ_СтатусыОРВУчете
			|		ПО торо_ОбъектыРемонта.Ссылка = ВТ_СтатусыОРВУчете.ОбъектРемонта
			|ГДЕ
			|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " = &РодительИерархии
			|	И торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ
			|	И &УсловиеПоСтатусамВУчете
			|	И &ДополнительныеОтборы";
			
			Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
			
			Если ПолучатьСтатусыВУчетеФакт Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтатусамВУчете", 
				"ЕСТЬNULL(ВТ_СтатусыОРВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету)) В (&СписокСтатусов)");
				Запрос.УстановитьПараметр("СписокСтатусов", ОтборСтатусыВУчете);
			Иначе
				Запрос.УстановитьПараметр("УсловиеПоСтатусамВУчете", Истина);
			КонецЕсли;
			
			Если ДополнительныеОтборы <> Неопределено И ДополнительныеОтборы.Количество() > 0 Тогда
				ТекстДопОтбора = СформироватьСтрокуДополнительныхОтборовИУстановитьПараметры(ДополнительныеОтборы, "торо_ОбъектыРемонта", Запрос);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеОтборы",	ТекстДопОтбора);
			Иначе
				Запрос.УстановитьПараметр("ДополнительныеОтборы", Истина);
			КонецЕсли;
			
		Иначе
			
			Запрос.Текст =	
			СтрЗаменить("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
			|	НЕОПРЕДЕЛЕНО КАК ОбъектРемонта,
			|	&РодительИерархии КАК РодительИерархии,
			|	СправочникСсылка.Наименование КАК Наименование,
			|	СправочникСсылка.ПометкаУдаления КАК ПометкаУдаления,
			|	ЛОЖЬ КАК ЭтоГруппа,
			|	ВЫБОР
			|		КОГДА СправочникСсылка.ПометкаУдаления
			|			ТОГДА 10
			|		ИНАЧЕ 9
			|	КОНЕЦ КАК ИндексКартинки,
			|	0 КАК РеквизитДопУпорядочивания,
			|	НЕОПРЕДЕЛЕНО КАК ТипОбъекта,
			|	ЛОЖЬ КАК ЕстьПодчиненные
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СправочникСсылка
			|		ПО торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" = СправочникСсылка.Ссылка", 
			"СтруктураПредприятия", СтруктураПараметровИерархии.ТипРеквизитаОР);
			
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("РодительИерархии", РодительИерархии);
		Результат = Запрос.Выполнить();
		МассивСтруктур = торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Результат);
		
		Для каждого ДанныеСтроки из МассивСтруктур Цикл
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Наименование) Тогда
				ДанныеСтроки.Наименование = Строка(ДанныеСтроки.ОбъектИерархии);
			КонецЕсли;
		КонецЦикла;
		
		Возврат МассивСтруктур;
		
	Иначе
		
		РодителиИерархии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РодительИерархии);
		МассивСтрокПервогоУровня =  ПолучитьМассивСтрокОдногоУровняИерархииСКоличествомПодчиненных(СтруктураПараметровИерархии, РодителиИерархии, ПолучатьСтатусыВУчете, ОтборСтатусыВУчете, ВключаяКонечныеЭлементы, ДополнительныеОтборы); 

		Возврат МассивСтрокПервогоУровня;
		
	КонецЕсли;
	
КонецФункции

// Возвращает массив структур данных строк на 1 следующий уровень по иерархии.
// Параметры:
//		СтруктураПараметровИерархии - Структура - структура параметров, см. ЗаполнитьПараметрыИерархии.
//		РодителиИерархии - Массив - массив ссылок на родителей, от которых нужно получить подчиненных.
//		ПолучатьСтатусыВУчете - Булево - нужно ли получать статусы в учете для списка ОР. Для формы списка не требуется,
//			для формы выбора зависит от значения функциональной опции "ИспользоватьДокументыЖЦОборудования".
//		ОтборСтатусыВУчете - СписокЗначений - список статусов для отбора.
//		ВключаяКонечныеЭлементы - Булево - нужно ли получать элементы, не являющиеся группами.
//		ДополнительныеОтборы - СписокЗначений - список дополнительных отборов, где элементом является структура:
//			* Ключ - Строка - имя реквизита справочника "Объекты ремонта" для отбора.
//			* Значение - Значение - значение для отбора.
//			* ВидСравнения - ВидСравненияКомпоновкиДанных - нее обязательный, вид сравнения. Если поля в структуре нет,
//				то считается, что вид сранения Равно.
//
// Возвращаемое значение:
//		Массив - массив структур данных строк одного уровня иерархии.
//	
Функция ПолучитьМассивСтрокОдногоУровняИерархииСКоличествомПодчиненных(СтруктураПараметровИерархии, РодителиИерархии, ПолучатьСтатусыВУчете = Ложь, ОтборСтатусыВУчете = Неопределено, ВключаяКонечныеЭлементы = Ложь, ДополнительныеОтборы = Неопределено) Экспорт

	МассивСтрокПервогоУровня = ПолучитьМассивСтрокОдногоУровняИерархии(СтруктураПараметровИерархии, РодителиИерархии, ПолучатьСтатусыВУчете, ОтборСтатусыВУчете, ВключаяКонечныеЭлементы, ДополнительныеОтборы);	
	
	РодителиИерархииВторогоУровня = Новый массив;
	Для Каждого Строка Из МассивСтрокПервогоУровня Цикл
		РодителиИерархииВторогоУровня.Добавить(Строка.ОбъектИерархии);
	КонецЦикла;
	
	СоответствиеРодителейСПодчиненными = ОтобратьРодителейСПодчиненными(СтруктураПараметровИерархии, РодителиИерархииВторогоУровня, ПолучатьСтатусыВУчете, ОтборСтатусыВУчете, ВключаяКонечныеЭлементы, ДополнительныеОтборы);
	
	Для Каждого Строка Из МассивСтрокПервогоУровня Цикл
		Строка.ЕстьПодчиненные = (СоответствиеРодителейСПодчиненными[Строка.ОбъектИерархии] <> Неопределено);
	КонецЦикла;
	
	Возврат МассивСтрокПервогоУровня;
	
КонецФункции

// Возвращает массив структур данных строк на 1 следующий уровень по иерархии.
// Параметры:
//		СтруктураПараметровИерархии - Структура - структура параметров, см. ЗаполнитьПараметрыИерархии.
//		РодителиИерархии - Массив - массив ссылок на родителей, от которых нужно получить подчиненных.
//		ПолучатьСтатусыВУчете - Булево - нужно ли получать статусы в учете для списка ОР. Для формы списка не требуется,
//			для формы выбора зависит от значения функциональной опции "ИспользоватьДокументыЖЦОборудования".
//		ОтборСтатусыВУчете - СписокЗначений - список статусов для отбора.
//		ВключаяКонечныеЭлементы - Булево - нужно ли получать элементы, не являющиеся группами.
//		ДополнительныеОтборы - СписокЗначений - список дополнительных отборов, где элементом является структура:
//			* Ключ - Строка - имя реквизита справочника "Объекты ремонта" для отбора.
//			* Значение - Значение - значение для отбора.
//			* ВидСравнения - ВидСравненияКомпоновкиДанных - нее обязательный, вид сравнения. Если поля в структуре нет,
//				то считается, что вид сранения Равно.
//
// Возвращаемое значение:
//		Массив - массив структур данных строк одного уровня иерархии.
//	
Функция ПолучитьМассивСтрокОдногоУровняИерархии(СтруктураПараметровИерархии, РодителиИерархии, ПолучатьСтатусыВУчете = Ложь, ОтборСтатусыВУчете = Неопределено, ВключаяКонечныеЭлементы = Ложь, ДополнительныеОтборы = Неопределено) Экспорт
	
	// В этой функции поле "ЕстьПодчиненные" выбирается только для того, 
	// чтобы оно всегда было в структуре. Всегда выбирается ЛОЖЬ.
	// Настоящее значение проставляется с помощью дополнительной проверки в другой функции, с помощью ОтобратьРодителейСПодчиненными().
	
	ПолучатьСтатусыВУчетеФакт = (ПолучатьСтатусыВУчете = Истина) И ОтборСтатусыВУчете <> Неопределено И ОтборСтатусыВУчете.Количество() > 0;
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РодителиИерархии", РодителиИерархии);
		
		Если СтруктураПараметровИерархии.ИерархическийСправочник Тогда
			
			Если ВключаяКонечныеЭлементы Тогда
				
				МенеджерВТ = Новый МенеджерВременныхТаблиц;
				Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
				|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " КАК Родитель,
				|	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонта.Ссылка) КАК Наименование,
				|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
				|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
				|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа
				|ПОМЕСТИТЬ ВТ_ОР
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ
				|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " В(&РодителиИерархии)
				|	И НЕ торо_ОбъектыРемонта.ЭтоГруппа
				|	И &ДополнительныеОтборы";
				
				Если ДополнительныеОтборы <> Неопределено И ДополнительныеОтборы.Количество() > 0 Тогда
					ТекстДопОтбора = СформироватьСтрокуДополнительныхОтборовИУстановитьПараметры(ДополнительныеОтборы, "торо_ОбъектыРемонта", Запрос);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеОтборы",	ТекстДопОтбора);
				Иначе
					Запрос.УстановитьПараметр("ДополнительныеОтборы", Истина);
				КонецЕсли;
				
				Запрос.Выполнить();
				
				Если ПолучатьСтатусыВУчетеФакт Тогда
					СоздатьВременнуюТаблицуСОтборомПоСтатусу(МенеджерВТ, ОтборСтатусыВУчете, "ВТ_ОР");
				КонецЕсли; 
				
				ЗапросИерархия = Новый Запрос;
				ЗапросИерархия.Текст = СтрЗаменить("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	СправочникСсылка.Ссылка КАК ОбъектИерархии
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СправочникСсылка
				|ГДЕ
				|	СправочникСсылка.Родитель В(&РодителиИерархии)",
				"СтруктураПредприятия", СтруктураПараметровИерархии.ТипРеквизитаОР);
				
				ЗапросИерархия.УстановитьПараметр("РодителиИерархии", РодителиИерархии);
				
				РезультатИерархия = ЗапросИерархия.Выполнить().Выгрузить();
				
				ЗапросОР = Новый Запрос;
				ЗапросОР.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" КАК РеквизитОР
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ                                                               
				|	торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" В ИЕРАРХИИ(&РезультатИерархия)";
				
				ЗапросОР.УстановитьПараметр("РезультатИерархия", РезультатИерархия);
				РезультатОР = ЗапросОР.Выполнить().Выгрузить();
				
				ТаблицаСРодителями = ПолучитьРодителейВерхнегоУровня(РезультатИерархия, РезультатОР);
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаСРодителями.ВерхнийРодитель КАК ВерхнийРодитель
				|ПОМЕСТИТЬ ВТ_ТаблицаСВерхнемУровнемИерархии
				|ИЗ
				|	&ТаблицаСРодителями КАК ТаблицаСРодителями
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
				|	НЕОПРЕДЕЛЕНО КАК ОбъектРемонта,
				|	СправочникСсылка.Родитель КАК РодительИерархии,
				|	СправочникСсылка.Наименование КАК Наименование,
				|	СправочникСсылка.ПометкаУдаления КАК ПометкаУдаления,
				|	ЛОЖЬ КАК ЭтоГруппа,
				|	ВЫБОР
				|		КОГДА СправочникСсылка.ПометкаУдаления
				|			ТОГДА 10
				|		ИНАЧЕ 9
				|	КОНЕЦ КАК ИндексКартинки,
				|	0 КАК РеквизитДопУпорядочивания,
				|	НЕОПРЕДЕЛЕНО КАК ТипОбъекта,
				|	ЛОЖЬ КАК ЕстьПодчиненные
				|ИЗ
				|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК СправочникСсылка
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСВерхнемУровнемИерархии КАК ВТ_ТаблицаСВерхнемУровнемИерархии
				|		ПО СправочникСсылка.Ссылка = ВТ_ТаблицаСВерхнемУровнемИерархии.ВерхнийРодитель
				|ГДЕ
				|	СправочникСсылка.Родитель В(&РодителиИерархии)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ 
				|	ВТ_ОР.ОбъектИерархии КАК ОбъектИерархии,
				|	ВТ_ОР.ОбъектИерархии КАК ОбъектРемонта,
				|	ВТ_ОР.Родитель КАК РодительИерархии,
				|	ВТ_ОР.Наименование КАК Наименование,
				|	ВТ_ОР.ПометкаУдаления КАК ПометкаУдаления,
				|	ВТ_ОР.ЭтоГруппа КАК ЭтоГруппа,
				|	ВЫБОР
				|		КОГДА ВТ_ОР.ЭтоГруппа
				|			ТОГДА ВЫБОР
				|					КОГДА ВТ_ОР.ПометкаУдаления
				|						ТОГДА 6
				|					ИНАЧЕ 5
				|				КОНЕЦ
				|		КОГДА ВТ_ОР.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
				|			ТОГДА ВЫБОР
				|					КОГДА ВТ_ОР.ПометкаУдаления
				|						ТОГДА 12
				|					ИНАЧЕ 11
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ВТ_ОР.ПометкаУдаления
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК ИндексКартинки,
				|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочивания,
				|	ВТ_ОР.ТипОбъекта КАК ТипОбъекта,
				|	ЛОЖЬ КАК ЕстьПодчиненные
				|ИЗ
				|	ВТ_ОР КАК ВТ_ОР
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
				|		ПО ВТ_ОР.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
				|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
				|ГДЕ
				|	&УсловиеПоСтатусамВУчете
				|";
				
				Запрос.УстановитьПараметр("ТаблицаСРодителями",ТаблицаСРодителями);
				Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
				
				Если ПолучатьСтатусыВУчетеФакт Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтатусамВУчете", 
					"ВТ_ОР.ОбъектИерархии В
					|		(ВЫБРАТЬ
					|			ВТ_ОтборОРПоСтатусам.ОбъектИерархии КАК ОбъектИерархии
					|		ИЗ
					|			ВТ_ОтборОРПоСтатусам КАК ВТ_ОтборОРПоСтатусам)");
				Иначе
					Запрос.УстановитьПараметр("УсловиеПоСтатусамВУчете", Истина);
				КонецЕсли;
				
			Иначе	  
				
				ЗапросИерархия = Новый Запрос;
				ЗапросИерархия.Текст = СтрЗаменить("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	СправочникСсылка.Ссылка КАК ОбъектИерархии
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СправочникСсылка
				|ГДЕ
				|	СправочникСсылка.Родитель В(&РодителиИерархии)",
				"СтруктураПредприятия", СтруктураПараметровИерархии.ТипРеквизитаОР);
				
				ЗапросИерархия.УстановитьПараметр("РодителиИерархии", РодителиИерархии);
				
				РезультатИерархия = ЗапросИерархия.Выполнить().Выгрузить();
				
				ЗапросОР = Новый Запрос;
				ЗапросОР.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" КАК РеквизитОР
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ                                                               
				|	торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" В ИЕРАРХИИ(&РезультатИерархия)";
				
				ЗапросОР.УстановитьПараметр("РезультатИерархия", РезультатИерархия);
				РезультатОР = ЗапросОР.Выполнить().Выгрузить();
				
				ТаблицаСРодителями = ПолучитьРодителейВерхнегоУровня(РезультатИерархия, РезультатОР);
				
				Запрос.Текст = СтрЗаменить("ВЫБРАТЬ
				|	ТаблицаСРодителями.ВерхнийРодитель КАК ВерхнийРодитель
				|ПОМЕСТИТЬ ВТ_ТаблицаСВерхнемУровнемИерархии
				|ИЗ
				|	&ТаблицаСРодителями КАК ТаблицаСРодителями
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
				|	НЕОПРЕДЕЛЕНО КАК ОбъектРемонта,
				|	СправочникСсылка.Родитель КАК РодительИерархии,
				|	СправочникСсылка.Наименование КАК Наименование,
				|	СправочникСсылка.ПометкаУдаления КАК ПометкаУдаления,
				|	ЛОЖЬ КАК ЭтоГруппа,
				|	ВЫБОР
				|		КОГДА СправочникСсылка.ПометкаУдаления
				|			ТОГДА 10
				|		ИНАЧЕ 9
				|	КОНЕЦ КАК ИндексКартинки,
				|	0 КАК РеквизитДопУпорядочивания,
				|	НЕОПРЕДЕЛЕНО КАК ТипОбъекта,
				|	ЛОЖЬ КАК ЕстьПодчиненные
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СправочникСсылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСВерхнемУровнемИерархии КАК ВТ_ТаблицаСВерхнемУровнемИерархии
				|		ПО СправочникСсылка.Ссылка = ВТ_ТаблицаСВерхнемУровнемИерархии.ВерхнийРодитель
				|ГДЕ
				|	СправочникСсылка.Родитель В(&РодителиИерархии)", 
				"СтруктураПредприятия", СтруктураПараметровИерархии.ТипРеквизитаОР);
				Запрос.УстановитьПараметр("ТаблицаСРодителями",ТаблицаСРодителями);
				
			КонецЕсли;
			
		Иначе // Не иерархиеский.
			
			Если ВключаяКонечныеЭлементы Тогда
				
				МенеджерВТ = Новый МенеджерВременныхТаблиц;
				Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
				|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " КАК Родитель,
				|	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонта.Ссылка) КАК Наименование,
				|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
				|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
				|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа
				|ПОМЕСТИТЬ ВТ_ОР
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ
				|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " В(&РодителиИерархии)
				|	И НЕ торо_ОбъектыРемонта.ЭтоГруппа
				|	И &ДополнительныеОтборы";
				
				Если ДополнительныеОтборы <> Неопределено И ДополнительныеОтборы.Количество() > 0 Тогда
					ТекстДопОтбора = СформироватьСтрокуДополнительныхОтборовИУстановитьПараметры(ДополнительныеОтборы, "торо_ОбъектыРемонта", Запрос);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеОтборы",	ТекстДопОтбора);
				Иначе
					Запрос.УстановитьПараметр("ДополнительныеОтборы", Истина);
				КонецЕсли;
				
				Запрос.Выполнить();
				
				Если ПолучатьСтатусыВУчетеФакт Тогда
					СоздатьВременнуюТаблицуСОтборомПоСтатусу(МенеджерВТ, ОтборСтатусыВУчете, "ВТ_ОР");
				КонецЕсли;
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВТ_ОР.ОбъектИерархии КАК ОбъектИерархии,
				|	ВТ_ОР.ОбъектИерархии КАК ОбъектРемонта,
				|	ВТ_ОР.Родитель КАК РодительИерархии,
				|	ВТ_ОР.Наименование КАК Наименование,
				|	ВТ_ОР.ПометкаУдаления КАК ПометкаУдаления,
				|	ВТ_ОР.ЭтоГруппа КАК ЭтоГруппа,
				|	ВЫБОР
				|		КОГДА ВТ_ОР.ЭтоГруппа
				|			ТОГДА ВЫБОР
				|					КОГДА ВТ_ОР.ПометкаУдаления
				|						ТОГДА 6
				|					ИНАЧЕ 5
				|				КОНЕЦ
				|		КОГДА ВТ_ОР.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
				|			ТОГДА ВЫБОР
				|					КОГДА ВТ_ОР.ПометкаУдаления
				|						ТОГДА 12
				|					ИНАЧЕ 11
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ВТ_ОР.ПометкаУдаления
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК ИндексКартинки,
				|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочивания,
				|	ВТ_ОР.ТипОбъекта КАК ТипОбъекта,
				|	ЛОЖЬ КАК ЕстьПодчиненные
				|ИЗ
				|	ВТ_ОР КАК ВТ_ОР
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
				|		ПО ВТ_ОР.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
				|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
				|ГДЕ
				|	&УсловиеПоСтатусамВУчете
				|";
				
				Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
				
				Если ПолучатьСтатусыВУчетеФакт Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтатусамВУчете", 
					"ВТ_ОР.ОбъектИерархии В
					|		(ВЫБРАТЬ
					|			ВТ_ОтборОРПоСтатусам.ОбъектИерархии КАК ОбъектИерархии
					|		ИЗ
					|			ВТ_ОтборОРПоСтатусам КАК ВТ_ОтборОРПоСтатусам)");
				Иначе
					Запрос.УстановитьПараметр("УсловиеПоСтатусамВУчете", Истина);
				КонецЕсли;
				
			Иначе
				
				Возврат Новый Массив;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
	Иначе // Не строится автоматически.
		
		Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
			
			Запрос = Новый Запрос;
			
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_Иерархия.ОбъектИерархии КАК ОбъектИерархии,
			|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ОР_ПервогоУровня
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК ВТ_Иерархия
			|ГДЕ
			|	ВТ_Иерархия.РодительИерархии В(&РодителиИерархии)
			|	И ВТ_Иерархия.Удален = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектИерархии";
			
			Запрос.УстановитьПараметр("РодителиИерархии", РодителиИерархии);
			Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
			Запрос.Выполнить();
			
			Если ПолучатьСтатусыВУчетеФакт Тогда
				СоздатьВременнуюТаблицуСОтборомПоСтатусу(МенеджерВТ, ОтборСтатусыВУчете, "ОР_ПервогоУровня");
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ВТ_РодителиИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК ВТ_Иерархия
			|ГДЕ
			|	ВТ_Иерархия.РодительИерархии В
			|			(ВЫБРАТЬ
			|				ОР_ПервогоУровня.ОбъектИерархии
			|			ИЗ
			|				ОР_ПервогоУровня КАК ОР_ПервогоУровня)
			|	И ВТ_Иерархия.Удален = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РодительИерархии
			|";
			
			Запрос.Выполнить();
			
		Иначе
			
			Запрос = Новый Запрос;
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_Иерархия.ОбъектИерархии КАК ОбъектИерархии,
			|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ОР_ПервогоУровня
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ВТ_Иерархия
			|ГДЕ
			|	ВТ_Иерархия.РодительИерархии В(&РодителиИерархии)
			|	И ВТ_Иерархия.СтруктураИерархии = &СтруктураИерархии
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектИерархии";
			
			Запрос.УстановитьПараметр("РодителиИерархии", РодителиИерархии);
			Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
			Запрос.Выполнить();
			
			Если ПолучатьСтатусыВУчетеФакт Тогда
				СоздатьВременнуюТаблицуСОтборомПоСтатусу(МенеджерВТ, ОтборСтатусыВУчете, "ОР_ПервогоУровня");
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ВТ_РодителиИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ВТ_Иерархия
			|ГДЕ
			|	ВТ_Иерархия.РодительИерархии В
			|			(ВЫБРАТЬ
			|				ОР_ПервогоУровня.ОбъектИерархии
			|			ИЗ
			|				ОР_ПервогоУровня КАК ОР_ПервогоУровня)
			|	И ВТ_Иерархия.СтруктураИерархии = &СтруктураИерархии
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РодительИерархии";
			
			Запрос.Выполнить();
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОР_ПервогоУровня.ОбъектИерархии КАК ОбъектИерархии,
		|	ОР_ПервогоУровня.РодительИерархии КАК РодительИерархии,
		|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
		|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
		|	ОР_ПервогоУровня.ОбъектИерархии КАК ОбъектРемонта,
		|	ПРЕДСТАВЛЕНИЕ(ОР_ПервогоУровня.ОбъектИерархии) КАК Наименование,
		|	ВЫБОР
		|		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|						ТОГДА 6
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		КОГДА торо_ОбъектыРемонта.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
		|			И ВТ_РодителиИерархии.РодительИерархии ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|						ТОГДА 12
		|					ИНАЧЕ 11
		|				КОНЕЦ
		|		КОГДА торо_ОбъектыРемонта.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|						ТОГДА 14
		|					ИНАЧЕ 13
		|				КОНЕЦ
		|		КОГДА ВТ_РодителиИерархии.РодительИерархии ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|					ТОГДА 3
		|				ИНАЧЕ 2
		|			КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинки,
		|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочивания,
		|  торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
		|	ЛОЖЬ КАК ЕстьПодчиненные
		|ИЗ
		|	ОР_ПервогоУровня КАК ОР_ПервогоУровня
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО ОР_ПервогоУровня.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		|		ПО ОР_ПервогоУровня.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РодителиИерархии КАК ВТ_РодителиИерархии
		|		ПО ОР_ПервогоУровня.ОбъектИерархии = ВТ_РодителиИерархии.РодительИерархии
		|ГДЕ
		|	(торо_ОбъектыРемонта.ЭтоГруппа = ИСТИНА
		|			ИЛИ (&ВключаяКонечныеЭлементы = ИСТИНА
		|				ИЛИ НЕ ВТ_РодителиИерархии.РодительИерархии ЕСТЬ NULL)
		|				И &УсловиеПоСтатусамВУчете
		|				И &ДополнительныеОтборы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания";
		
		Если ПолучатьСтатусыВУчетеФакт Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтатусамВУчете", 
				"ОР_ПервогоУровня.ОбъектИерархии В
				|		(ВЫБРАТЬ
				|			ВТ_ОтборОРПоСтатусам.ОбъектИерархии КАК ОбъектИерархии
				|		ИЗ
				|			ВТ_ОтборОРПоСтатусам КАК ВТ_ОтборОРПоСтатусам)");
		Иначе
		  Запрос.УстановитьПараметр("УсловиеПоСтатусамВУчете", Истина);
		КонецЕсли;
		
		Если ДополнительныеОтборы <> Неопределено И ДополнительныеОтборы.Количество() > 0 Тогда
			ТекстДопОтбора = СформироватьСтрокуДополнительныхОтборовИУстановитьПараметры(ДополнительныеОтборы, "ОР_ПервогоУровня.ОбъектИерархии", Запрос);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеОтборы",	ТекстДопОтбора);
		Иначе
			Запрос.УстановитьПараметр("ДополнительныеОтборы", Истина);
		КонецЕсли;

		Запрос.УстановитьПараметр("ВключаяКонечныеЭлементы", ВключаяКонечныеЭлементы);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
		Результат = Запрос.Выполнить();

	КонецЕсли;

	МассивСтруктур = торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Результат);
	
	Для каждого ДанныеСтроки из МассивСтруктур Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Наименование) Тогда
			ДанныеСтроки.Наименование = Строка(ДанныеСтроки.ОбъектИерархии);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

// Возвращает структуру данных по одному объекту ремонта.
// Параметры:
//		СтруктураПараметровИерархии - Структура - структура параметров, см. ЗаполнитьПараметрыИерархии.
//		ОбъектРемонта - СправочникСсылка - объект ремонта.
//		ВключаяКонечныеЭлементы - Булево - нужно ли получать элементы, не являющиеся группами.
//
// Возвращаемое значение:
//		Структура, Неопределено - структура реквизитов для заполнения строки дерева иерархии. Если
//			объект ремонта не отображается в дереве, то будет возвращено Неопределено.
//	
Функция ПолучитьСтруктуруДанныхСтрокиДляДереваОР(СтруктураПараметровИерархии, ОбъектРемонта, ВключаяКонечныеЭлементы = Ложь) Экспорт
	
	СтруктураДанных = Новый Структура("ОбъектИерархии, Наименование, ПометкаУдаления, ЭтоГруппа, ИндексКартинки, РеквизитДопУпорядочивания");
	
	Запрос = Новый Запрос;
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		
		Если ВключаяКонечныеЭлементы Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонта.Ссылка) КАК Наименование,
			|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
			|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
			|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа
			|ПОМЕСТИТЬ ВТ_ОР
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|ГДЕ
			|	торо_ОбъектыРемонта.Ссылка = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_ОР.Ссылка КАК ОбъектИерархии,
			|	ВТ_ОР.Наименование КАК Наименование,
			|	ВТ_ОР.ПометкаУдаления КАК ПометкаУдаления,
			|	ВТ_ОР.ЭтоГруппа КАК ЭтоГруппа,
			|	ВЫБОР
			|		КОГДА ВТ_ОР.ЭтоГруппа
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_ОР.ПометкаУдаления
			|						ТОГДА 6
			|					ИНАЧЕ 5
			|				КОНЕЦ
			|		КОГДА ВТ_ОР.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_ОР.ПометкаУдаления
			|						ТОГДА 12
			|					ИНАЧЕ 11
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ВТ_ОР.ПометкаУдаления
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК ИндексКартинки,
			|	ВТ_ОР.ТипОбъекта КАК ТипОбъекта,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочивания
			|ИЗ
			|	ВТ_ОР КАК ВТ_ОР
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|		ПО ВТ_ОР.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)";
			
			Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
			Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
			Результат = Запрос.Выполнить();
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ВТ_РодителиИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			|ГДЕ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии = &ОбъектРемонта
			|	И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ВТ_РодителиИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &ОбъектРемонта";
			
		КонецЕсли;
			
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);

		Запрос.Выполнить();
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонта.Ссылка) КАК Наименование,
			|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
			|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
			|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа
			|ПОМЕСТИТЬ ВТ_ОР
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|ГДЕ
			|	торо_ОбъектыРемонта.Ссылка = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_ОР.Ссылка КАК ОбъектИерархии,
			|	ВТ_ОР.Наименование КАК Наименование,
			|	ВТ_ОР.ПометкаУдаления КАК ПометкаУдаления,
			|	ВТ_ОР.ЭтоГруппа КАК ЭтоГруппа,
			|	ВЫБОР
			|		КОГДА ВТ_ОР.ЭтоГруппа
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_ОР.ПометкаУдаления
			|						ТОГДА 6
			|					ИНАЧЕ 5
			|				КОНЕЦ
			|		КОГДА ВТ_ОР.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
			|			И ВТ_РодителиИерархии.РодительИерархии ЕСТЬ NULL
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_ОР.ПометкаУдаления
			|						ТОГДА 12
			|					ИНАЧЕ 11
			|				КОНЕЦ
			|		КОГДА ВТ_ОР.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_ОР.ПометкаУдаления
			|						ТОГДА 14
			|					ИНАЧЕ 13
			|				КОНЕЦ
			|		КОГДА ВТ_РодителиИерархии.РодительИерархии ЕСТЬ NULL
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_ОР.ПометкаУдаления
			|						ТОГДА 1
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ВТ_ОР.ПометкаУдаления
			|					ТОГДА 3
			|				ИНАЧЕ 2
			|			КОНЕЦ
			|	КОНЕЦ КАК ИндексКартинки,
			|	ВТ_ОР.ТипОбъекта КАК ТипОбъекта,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочивания
			|ИЗ
			|	ВТ_ОР КАК ВТ_ОР
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|		ПО ВТ_ОР.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РодителиИерархии КАК ВТ_РодителиИерархии
			|		ПО ВТ_ОР.Ссылка = ВТ_РодителиИерархии.РодительИерархии
			|ГДЕ
			|	(&ВключаяКонечныеЭлементы = ИСТИНА
			|			ИЛИ ВТ_ОР.ЭтоГруппа
			|			ИЛИ НЕ ВТ_РодителиИерархии.РодительИерархии ЕСТЬ NULL)";
		
			Запрос.УстановитьПараметр("ВключаяКонечныеЭлементы", ВключаяКонечныеЭлементы);
			Результат = Запрос.Выполнить();
			
	КонецЕсли;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Наименование) Тогда
			СтруктураДанных.Наименование = Строка(СтруктураДанных.ОбъектИерархии);
		КонецЕсли;
		
		Возврат СтруктураДанных;
	КонецЕсли;
	
КонецФункции

// Выполняет перезаполнение параметров иерархии и перестроение дерева иерархии.
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма списка, выбора или подбора объектов ремонта.
//		Список - ДинамическийСписок - динамический список объектов ремонта.
//		Дерево - ДанныеФормыДерево - дерево иерархии объектов ремонта.
//		ПолучатьСтатусыВУчете - Булево - нужно ли получать статусы в учете для списка ОР. Для формы списка не требуется,
//			для формы выбора зависит от значения функциональной опции "ИспользоватьДокументыЖЦОборудования".
//		ОтборСтатусыВУчете - СписокЗначений - список статусов в учете, по которым нужно выполнить отбор.
//			Если список пустой или Неопределено, то отбор не выполняется.
//		ОтборОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта, 
//			который должен располагаться в корне иерархии.
//		ДополнительныеОтборы - СписокЗначений - список дополнительных отборов, где элементом является структура:
//			* Ключ - Строка - имя реквизита справочника "Объекты ремонта" для отбора.
//			* Значение - Значение - значение для отбора.
//			* ВидСравнения - ВидСравненияКомпоновкиДанных - нее обязательный, вид сравнения. Если поля в структуре нет,
//				то считается, что вид сранения Равно.
//		ОтборПоНормативам - СписокЗначений - список дополнительных отборов, где элементом является структура:
//			* Ключ - Строка - имя норматива для отбора.
//			* Значение - Значение - значение для отбора.
//			* ВидСравнения - ВидСравненияКомпоновкиДанных - нее обязательный, вид сравнения. Если поля в структуре нет,
//				то считается, что вид сранения Равно.
//
Процедура ОбработатьИзменениеИерархииНаСервере(Форма, Список, Дерево, ПолучатьСтатусыВУчете = Ложь, Знач ОтборСтатусыВУчете = Неопределено, ОтборОбъектРемонта = Неопределено, ДополнительныеОтборы = Неопределено, ОтборПоНормативам = Неопределено) Экспорт
	
	торо_РаботаСИерархией20КлиентСервер.УстановитьСостояниеИерархическогоПросмотра(Форма, Истина);
	
	ЗаполнитьПараметрыИерархии(Форма);
	Форма.ПустойРодитель = ПустойРодительПоСтруктуреИерархии(Форма.СтруктураПараметровИерархии);
	УстановитьЗапросВСпискеПоИерархии(Список, Форма.СтруктураПараметровИерархии, Форма.ПустойРодитель, ПолучатьСтатусыВУчете);
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(Дерево, Форма.СтруктураПараметровИерархии, Форма.ПустойРодитель, ПолучатьСтатусыВУчете, ОтборСтатусыВУчете, ОтборОбъектРемонта, ДополнительныеОтборы);
	
	// СтандартныеПодсистемы.Мультиязычность
	МультиязычностьСервер.ПриСозданииНаСервере(Форма);
	// СтандартныеПодсистемы.Мультиязычность
	
	Если ПолучатьСтатусыВУчете Тогда
		ЗаполненОтборПоСтатусам = ОтборСтатусыВУчете <> Неопределено И ОтборСтатусыВУчете.Количество() > 0;
		Если ЗаполненОтборПоСтатусам Тогда
			ОтборСтатусыВУчете.Добавить(Перечисления.торо_СтатусыОРВУчете.ПустаяСсылка()); // Для отбора групп.
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусВУчете", ОтборСтатусыВУчете,,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеОтборы <> Неопределено И ДополнительныеОтборы.Количество() > 0 Тогда
		ГруппаОтборов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, "Дополнительные отборы группа ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборов, "ЭтоГруппа", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ГруппаОтборовВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтборов.Элементы, "Дополнительные отборы группа И", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		Для каждого ЭлементСписка из ДополнительныеОтборы Цикл
			СтруктураОтбора = ЭлементСписка.Значение;
			ВидСравненияФакт = ВидСравненияКомпоновкиДанных.Равно;
			Если СтруктураОтбора.Свойство("ВидСравнения") И ЗначениеЗаполнено(СтруктураОтбора.ВидСравнения) Тогда
				ВидСравненияФакт = СтруктураОтбора.ВидСравнения;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборовВложенная, СтруктураОтбора.Ключ, СтруктураОтбора.Значение, ВидСравненияФакт,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЦикла;
	КонецЕсли;
	
	Если ОтборПоНормативам <> Неопределено И ОтборПоНормативам.Количество() > 0 Тогда
			ГруппаОтборов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, "Отбор по нормативам группа ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборов, "ЭтоГруппа", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			Если ОтборПоНормативам.Количество() < 3 Тогда
				ГруппаОтборовВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтборов.Элементы, "Отбор по нормативам группа И", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			Иначе
				ГруппаОтборовВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтборов.Элементы, "Отбор по нормативам группа ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
			КонецЕсли;
			
			Для Каждого ЭлементСписка из ОтборПоНормативам Цикл
				СтруктураОтбора = ЭлементСписка.Значение;
				ВидСравненияФакт = ВидСравненияКомпоновкиДанных.Равно;
				Если СтруктураОтбора.Свойство("ВидСравнения") И ЗначениеЗаполнено(СтруктураОтбора.ВидСравнения) Тогда
					ВидСравненияФакт = СтруктураОтбора.ВидСравнения;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборовВложенная, СтруктураОтбора.Ключ, СтруктураОтбора.Значение, ВидСравненияФакт,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			КонецЦикла;				
	КонецЕсли;

КонецПроцедуры

// Функция возвращает соответствие текущих родителей ОР в иерархии.
// Параметры:
//		МассивОР - Массив - массив объектов ремонта.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//		ДатаСреза - Дата - дата среза для иерархии, изменяемой документами.
//		ВсеРодителиСсылками - Булево - Если Истина, то вместо "Корневая группа" и т.п. будет
//			возвращена настоящая ссылка на родителя.
//		ТолькоСуществующиеВИерархии - Булево - Если Истина, то в возвращаемом значении не будет элементов,
//			которых нет в данной иерархии.
//
// Возвращаемое значение:
//		Соответствие - соответствие, родителей:
//			* Ключ - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта из массива ОР.
//			* Значение - СправочникСсылка, Строка - ссылка на родителя; 
//					строка "Корневая группа", если объект ремонта в корне иерархии; 
//					строка "Внесен в структуру иерархии", если объекта ремонта нет в иерархии;
//					строка "<>" - для пустых родителей в автоматической иерархии.
//
Функция ПолучитьТекущихРодителейВИерархии(МассивОР, СтруктураИерархии, ДатаСреза = Неопределено, ВсеРодителиСсылками = Ложь, ТолькоСуществующиеВИерархии = Ложь) Экспорт
	
	ИзменяетсяДокументами = СтруктураИерархии.ИзменяетсяДокументами;
	АвтоматическаяИерархия = СтруктураИерархии.СтроитсяАвтоматически;
	
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если АвтоматическаяИерархия Тогда
		
		СтруктураПараметровИерархии = Новый Структура;
		СтруктураПараметровИерархии.Вставить("ТипРеквизитаОР", СтруктураИерархии.ТипРеквизитаОР);
		СтруктураПараметровИерархии.Вставить("РеквизитОР", СтруктураИерархии.РеквизитОР);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
		|	торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" КАК РодительИерархии,
		|	ЛОЖЬ КАК Удален
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка В (&МассивОР)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Справочник.Ссылка,
		|	Справочник.Родитель,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК Справочник
		|ГДЕ
		|	Справочник.Ссылка В (&МассивОР)";

		Если НЕ Метаданные.Справочники[СтруктураПараметровИерархии.ТипРеквизитаОР].Иерархический тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Родитель", "Null КАК Родитель");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивОР", МассивОР);
	
	ИначеЕсли ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			&Дата,
		|			ОбъектИерархии В (&МассивОР)
		|				И СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Дата", ДатаСреза);
		Запрос.УстановитьПараметр("МассивОР", МассивОР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК РодительИерархии,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии В(&МассивОР)";
		
		Запрос.УстановитьПараметр("Дата", ДатаСреза);
		Запрос.УстановитьПараметр("МассивОР", МассивОР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультата = РезультатЗапроса.Выбрать();
	
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ВыборкаРезультата.Следующий() Цикл
		
		Если ВсеРодителиСсылками Тогда
			СоответствиеВозврата.Вставить(ВыборкаРезультата.ОбъектИерархии, ВыборкаРезультата.РодительИерархии);
		Иначе
			
			Если АвтоматическаяИерархия Тогда
				Если ТипЗнч(ВыборкаРезультата.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ЗначениеЗаполнено(ВыборкаРезультата.РодительИерархии) Тогда
					СоответствиеВозврата.Вставить(ВыборкаРезультата.ОбъектИерархии, "<>");
				ИначеЕсли ЗначениеЗаполнено(ВыборкаРезультата.РодительИерархии) Тогда
					СоответствиеВозврата.Вставить(ВыборкаРезультата.ОбъектИерархии, ВыборкаРезультата.РодительИерархии);
				Иначе
					СоответствиеВозврата.Вставить(ВыборкаРезультата.ОбъектИерархии, "Корневая группа");
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ВыборкаРезультата.РодительИерархии) Тогда
					СоответствиеВозврата.Вставить(ВыборкаРезультата.ОбъектИерархии, ВыборкаРезультата.РодительИерархии);
				Иначе
					СоответствиеВозврата.Вставить(ВыборкаРезультата.ОбъектИерархии, "Корневая группа");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоСуществующиеВИерархии Тогда
		
		Для каждого ОР из МассивОР Цикл
			ЭлементСоответствия = СоответствиеВозврата[ОР];
			Если ЭлементСоответствия = Неопределено Тогда
				СоответствиеВозврата.Вставить(ОР, "Внесен в структуру иерархии");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Функция возвращает текущего ОДНОГО родителя для переданного ОР.
// Параметры:
//		ОР - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//		ДатаСреза - Дата - дата среза для иерархии, изменяемой документами.
//		ВсеРодителиСсылками - Булево - Если Истина, то вместо "Корневая группа" и т.п. будет
//			возвращена настоящая ссылка на родителя.
//		ТолькоСуществующиеВИерархии - Булево - Если Истина, то в возвращаемом значении не будет элементов,
//			которых нет в данной иерархии.
//
// Возвращаемое значение:
//		СправочникСсылка, Строка - родитель, полученных с помощью функции ПолучитьТекущихРодителейВИерархии.
//
Функция ПолучитьТекущегоРодителяВИерархии(ОР, СтруктураИерархии, ДатаСреза = Неопределено, ВсеРодителиСсылками = Ложь, ТолькоСуществующиеВИерархии = Ложь) Экспорт

	СоответствиеРодителей = ПолучитьТекущихРодителейВИерархии(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОР), СтруктураИерархии, ДатаСреза, ВсеРодителиСсылками, ТолькоСуществующиеВИерархии);
	Возврат СоответствиеРодителей[ОР];
	
КонецФункции

// Функция возвращает список всех используемых иерархий.
//	Параметры:
//		ИсключаемаяИерархия 	- СправочникСсылка.торо_СтруктурыОР - если заполнено, то эта иерархия не выводится в список,
//		ИсключитьАвтоматические - Булево - исключает автоматические иерархии.
//
// Возвращаемое значение:
//		СписокЗначений - список иерархий.
//
Функция ПолучитьСписокИерархий(ИсключаемаяИерархия = Неопределено, ИсключитьАвтоматические = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СтруктурыОР.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	торо_СтруктурыОР.ПометкаУдаления = ЛОЖЬ
	|	И НЕ торо_СтруктурыОР.ЭтоГруппа";
	
	Если ИсключаемаяИерархия <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И торо_СтруктурыОР.Ссылка <> &СтруктураИерархии";
		Запрос.УстановитьПараметр("СтруктураИерархии", ИсключаемаяИерархия);
	КонецЕсли;
	
	Если ИсключитьАвтоматические Тогда
		Запрос.Текст = Запрос.Текст + " И НЕ торо_СтруктурыОР.СтроитсяАвтоматически";
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокСтруктурОР = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокСтруктурОР.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат СписокСтруктурОР;
	
КонецФункции

// Процедура заполняет массив родителей переданного объекта ремонта.
// Параметры:
//		ОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта.
//		МассивРодителей - Массив - выходной параметр, массив, который нужно заполнить.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//
Процедура ЗаполнитьМассивРодителейОбъектаРемонта(ОбъектРемонта, МассивРодителей, СтруктураИерархии) Экспорт
	
	ЭлементРодитель = ПолучитьТекущегоРодителяВИерархии(ОбъектРемонта, СтруктураИерархии);
	
	Если (ЭлементРодитель <> "<>" И ТипЗнч(ЭлементРодитель) = Тип("Строка")) ИЛИ ОбъектРемонта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивРодителей.Добавить(ЭлементРодитель);
	ЗаполнитьМассивРодителейОбъектаРемонта(ЭлементРодитель, МассивРодителей, СтруктураИерархии);
	
КонецПроцедуры

// Функция возвращает массив всех объектов ремонта с тем же родителем в иерархии, 
// что у переданного объекта ремонта (массив включает и сам переданный ОР).
//
// Параметры:
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//		ОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта.
//
// Возвращаемое значение:
//		Массив - массив соседей по иерархии.
//
Функция ПолучитьМассивСоседейОРПоИерархии(СтруктураИерархии, ОбъектРемонта) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) ИЛИ НЕ ЗначениеЗаполнено(ОбъектРемонта) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ТаблицаИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РодительИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИерархии.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Родитель
		|ИЗ
		|	ТаблицаИерархии КАК ТаблицаИерархии
		|ГДЕ
		|	ТаблицаИерархии.ОбъектИерархии = &ОбъектРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИерархии.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	ТаблицаИерархии КАК ТаблицаИерархии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Родитель КАК ВТ_Родитель
		|		ПО ТаблицаИерархии.РодительИерархии = ВТ_Родитель.РодительИерархии";
		
	ИначеЕсли СтруктураИерархии.СтроитсяАвтоматически Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
		|	торо_ОбъектыРемонта." + СтруктураИерархии.РеквизитОР + " КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Родитель
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка = &ОбъектРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Родитель КАК ВТ_Родитель
		|		ПО торо_ОбъектыРемонта." + СтруктураИерархии.РеквизитОР + " = ВТ_Родитель.РодительИерархии
		|";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ТаблицаИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РодительИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИерархии.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Родитель
		|ИЗ
		|	ТаблицаИерархии КАК ТаблицаИерархии
		|ГДЕ
		|	ТаблицаИерархии.ОбъектИерархии = &ОбъектРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИерархии.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	ТаблицаИерархии КАК ТаблицаИерархии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Родитель КАК ВТ_Родитель
		|		ПО ТаблицаИерархии.РодительИерархии = ВТ_Родитель.РодительИерархии";
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("ОбъектИерархии");
	
КонецФункции

// Функцмя возвращает полную таблицу указанной иерархии.
// Параметры:
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//		ДатаСреза - Дата - Дата среза для иерархии, изменяемой документами.
//		БезУдаленныхИзИерархии - Булево - если Ложь, то в таблицу попадают и элементы, удаленные из иерархии.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица с колонками "ОбъектИерархии" и "РодительИерархии"
//
Функция ПолучитьТаблицуИерархии(СтруктураИерархии, ДатаСреза = Неопределено, БезУдаленныхИзИерархии = Истина) Экспорт
	
	Запрос = Новый Запрос;	
	Если СтруктураИерархии.СтроитсяАвтоматически Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Справочник.Ссылка КАК Ссылка,
		|	Справочник.Родитель
		|ПОМЕСТИТЬ ВТ_Справочник
		|ИЗ
		|	Справочник."+СтруктураИерархии.ТипРеквизитаОР+" КАК Справочник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта."+СтруктураИерархии.РеквизитОР+" КАК Родитель
		|ПОМЕСТИТЬ ВТ_ОР
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник
		|		ПО торо_ОбъектыРемонта."+СтруктураИерархии.РеквизитОР+" = ВТ_Справочник.Ссылка
		|ГДЕ
		|	НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОР.Ссылка КАК ОбъектИерархии,
		|	ВТ_ОР.Родитель КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Финальная
		|ИЗ
		|	ВТ_ОР КАК ВТ_ОР
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Справочник.Ссылка,
		|	ВТ_Справочник.Родитель
		|ИЗ
		|	ВТ_Справочник КАК ВТ_Справочник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Финальная.ОбъектИерархии,
		|	ВТ_Финальная.РодительИерархии
		|ИЗ
		|	ВТ_Финальная КАК ВТ_Финальная";
		
		Если НЕ Метаданные.Справочники[СтруктураИерархии.ТипРеквизитаОР].Иерархический тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "	Справочник.Родитель", "ЗНАЧЕНИЕ(Справочник."+СтруктураИерархии.ТипРеквизитаОР+".ПустаяСсылка) КАК Родитель");
		КонецЕсли;
		
	ИначеЕсли СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии КАК ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархии.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Иерархия
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&ДатаСреза, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархии
		|ГДЕ
		|	НЕ торо_РасположениеОРВСтруктуреИерархии.Удален
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Иерархия.ОбъектИерархии КАК ОбъектИерархии,
		|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
		|ИЗ
		|	ВТ_Иерархия КАК ВТ_Иерархия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО ВТ_Иерархия.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка";
		
		Если НЕ БезУдаленныхИзИерархии Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ торо_РасположениеОРВСтруктуреИерархии.Удален", "ИСТИНА");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаСреза",ДатаСреза);
		
	Иначе 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК РодительИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает полное наименование ОР в структуре иерархии.
//
// Параметры:
//		ОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта - ор наименование, которого будет получаться.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктураОР - иерархия, по которой будет формироваться 
//			полное наименование, если не указана будет взята основная структура для добавления.
//
// Возвращаемое значение:
//		Строка - полное наименование объекта ремонта.
//
Функция ПолноеНаименованиеОР(ОбъектРемонта, СтруктураИерархии = неопределено) Экспорт 
	
	Если СтруктураИерархии = Неопределено Тогда 
		СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяСтруктураИерархии", Справочники.торо_СтруктурыОР.ПустаяСсылка());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураИерархии) Тогда
		Возврат ОбъектРемонта.Наименование;
	КонецЕсли;
		
	МассивРодителей = Новый Массив;
	ЗаполнитьМассивРодителейОбъектаРемонта(ОбъектРемонта, МассивРодителей, СтруктураИерархии);
	
	ПолноеНаименование = "";
	Индекс = МассивРодителей.Количество()-1;
	ПервыйОР = Истина;
	Пока Индекс >= 0 Цикл
		ПолноеНаименование = ?(ПервыйОР, МассивРодителей[Индекс].Наименование, ПолноеНаименование + " / " + МассивРодителей[Индекс].Наименование);
		ПервыйОР = Ложь;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	ПолноеНаименование = ?(ПервыйОР, ОбъектРемонта.Наименование, ПолноеНаименование + " / " + ОбъектРемонта.Наименование);
	
	Возврат ПолноеНаименование;
	
КонецФункции

// Функция - Является группой.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.торо_ОбъектыРемонта - ссылка которую нужно проверить является ли группой.
// Возвращаемое значение:
//  Булево - значение свойства ЭтоГруппа.
Функция ЯвляетсяГруппой(Ссылка) Экспорт
	
	ЗначениеРеквизитаЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа", Истина);
	
	Возврат ЗначениеРеквизитаЭтоГруппа = Истина;
	
КонецФункции

// Возвращает массив подчиненных объектов ремонта.
//
// Параметры:
//		ОбъектРемонтаИлиМассив - СправочникСсылка.торо_ОбъектыРемонта, Массив - объект или объекты ремонта,
//				для которых получаем подчиненные.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии, в которой нужно искать подчиненных.
//		ДатаСреза - Дата - дата среза для иерархий, изменяемых документами.
//		ВключаяРодителей - Булево - включать ли родителей в результирующий массив.
//		ОтборСтатусыВУчете - СписокЗначений, Массив - список для отбора по статусам в учете. 
//			Если пустой или Неопределено - отбор не выполняется.
//		ДополнительныеОтборы - СписокЗначений - список дополнительных отборов, где элементом является структура:
//			* Ключ - Строка - имя реквизита справочника "Объекты ремонта" для отбора.
//			* Значение - Значение - значение для отбора.
//			* ВидСравнения - ВидСравненияКомпоновкиДанных - нее обязательный, вид сравнения. Если поля в структуре нет,
//				то считается, что вид сранения Равно.
//
// Возвращаемое значение:
//		Массив - массив подчиненных объектов ремонта.
//
Функция ПолучитьМассивПодчиненныхОбъектов(ОбъектРемонтаИлиМассив, СтруктураИерархии, ДатаСреза = Неопределено, ВключаяРодителей = Ложь, ОтборСтатусыВУчете = Неопределено, ДополнительныеОтборы = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектРемонтаИлиМассив) = Тип("Массив") Тогда
		МассивРодителей = ОбъектРемонтаИлиМассив;
	Иначе
		МассивРодителей = Новый массив;
		МассивРодителей.Добавить(ОбъектРемонтаИлиМассив);
	КонецЕсли;
	
	МассивПодчиненных = Новый Массив;
	Если ВключаяРодителей Тогда
		Для каждого Родитель из МассивРодителей Цикл
			МассивПодчиненных.Добавить(Родитель);
		КонецЦикла;
	КонецЕсли;
	
	ДополнитьМассивПодчиненнымиОР(МассивРодителей, МассивПодчиненных, Истина, СтруктураИерархии, ДатаСреза, ОтборСтатусыВУчете, ДополнительныеОтборы);
	Возврат МассивПодчиненных;
	
КонецФункции

// Используется для возврата объектов с подчиненными с формы выбора.
// Не рекомендуется использовать для единичных ОР, перебираемых в цикле. 
// Тесты на большиъ объемах данных показали, что
// функция ПолучитьМассивПодчиненныхОбъектов() работат быстрее.
// Для однократной (не в цикле) обработки массива ОР, как на форме выбора, использовать можно.
//
// Параметры:
//		МассивРодителейИерархии - Массив - массив объектов ремонта, для которых получаем подчиненные.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии, в которой нужно искать подчиненных.
//		ДатаСреза - Дата - дата среза для иерархий, изменяемых документами.
//		ВключаяРодителей - Булево - добавлять ли переданных родителей в возвращаемый массив.
//
// Возвращаемое значение:
//		Массив - массив подчиненных объектов ремонта.
//
Функция ПолучитьМассивПодчиненныхОбъектовПоТаблицеИерархии(МассивРодителейИерархии, СтруктураИерархии, ДатаСреза = Неопределено, ВключаяРодителей = Истина) Экспорт
	
	ТаблицаИерархии = ПолучитьТаблицуИерархии(СтруктураИерархии, ДатаСреза);
	ТаблицаИерархии.Индексы.Добавить("ОбъектИерархии");
	ТаблицаИерархии.Индексы.Добавить("РодительИерархии");
	
	МассивВозврата = Новый Массив;
	Для каждого РодительИерархии из МассивРодителейИерархии Цикл
		ДополнитьМассивПодчиненнымиОРПоТаблицеИерархии(МассивВозврата, РодительИерархии, ТаблицаИерархии, "ОбъектИерархии", "РодительИерархии", ВключаяРодителей);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции
	
// Проверяет фактическое наличие подчиненных ОР у объекта ремонта.
// Параметры:
//		ОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//
// Возвращаемое значение:
//		Булево - истина, если у ОР есть подчиненные.
//
Функция ЕстьПодчиненныеОР(ОбъектРемонта, СтруктураИерархии) Экспорт
	
	ТаблицаПодчиненных = ТаблицаНаличияПодчиненныхОР(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектРемонта), СтруктураИерархии);
	Если ТаблицаПодчиненных.Количество() > 0 Тогда
		Возврат ТаблицаПодчиненных[0].ЕстьПодчиненные;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обновляет картинки элементов полного дерева.
// Параметры:
//		ДеревоПолное - ДанныеФормыДерево - реквизит формы, отображающий полное дерево объектов ремонта.
//
Процедура ОбновитьКартинкиЭлементовПолногоДереваНаСервере(ДеревоПолное) Экспорт
	
	Если НЕ ДеревоПолное.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДерева = ДеревоПолное.ПолучитьЭлементы();
	ОбновитьКартинкиЭлементовДерева(СтрокиДерева, Истина);
	
КонецПроцедуры

// Обновляет картинки элементов дерева.
// Параметры:
//		Дерево - ДанныеФормыДерево - реквизит формы, отображающий дерево объектов ремонта.
//		ИдентификаторСтроки - Число - идентификатор ветви дерева, в которой нужно обновить картинки.
//
Процедура ОбновитьКартинкиЭлементовДереваНаСервере(Дерево, ИдентификаторСтроки = 0) Экспорт
	
	Если НЕ Дерево.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИдентификаторСтроки = 0 Тогда 
		СтрокиДерева = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьЭлементы();
		ОбновитьКартинкиЭлементовДерева(СтрокиДерева);
	Иначе 
		СтрокиДерева = Дерево.ПолучитьЭлементы();
		ОбновитьКартинкиЭлементовДерева(СтрокиДерева, Истина);
	КонецЕсли;
	
КонецПроцедуры 	

// Переносит параметры ОР (контролируемые показатели, параметры наработки и запчасти) при копировании.
// Параметры:
//		ЗначениеКопирования - СправочникСсылка.торо_ОбъектыРемонта - копируемый объект ремонта, параметры которого нужно перенести.
//		ОР - СправочникСсылка.торо_ОбъектыРемонта - скопированный объект ремонта, для которого нужно перенести параметры.
//		СписокПараметровКопирования - СписокЗначений - список параметров, которые необходимо перенести.
//
Процедура ПеренестиПараметрыОРПослеКопирования(ЗначениеКопирования, ОР, СписокПараметровКопирования) Экспорт
	Если Не ТипЗнч(СписокПараметровКопирования) = Тип("СписокЗначений") Тогда
	    Возврат;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из СписокПараметровКопирования Цикл
		Если ЭлементСписка.Значение = "Контролируемые показатели" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум,
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум,
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум,
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум,
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
			|ИЗ
			|	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
			|ГДЕ
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта";
			
			Запрос.УстановитьПараметр("ОбъектРемонта", ЗначениеКопирования);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			СписокИзмеряемыхПоказателейНЗ = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
			СписокИзмеряемыхПоказателейНЗ.Отбор.ОбъектРемонта.Установить(ОР);
			
			Пока Выборка.Следующий() Цикл
				СтрокаНЗ = СписокИзмеряемыхПоказателейНЗ.Добавить();
				СтрокаНЗ.ОбъектРемонта                         = ОР;
				СтрокаНЗ.Показатель                            = Выборка.Показатель;
				СтрокаНЗ.ДопустимыйМинимум                     = ?(ТипЗнч(Выборка.ДопустимыйМинимум) = Тип("Число"), Выборка.ДопустимыйМинимум, 0);
				СтрокаНЗ.ДопустимыйМаксимум                    = ?(ТипЗнч(Выборка.ДопустимыйМаксимум) = Тип("Число"), Выборка.ДопустимыйМаксимум, 0);
				СтрокаНЗ.КритическийМинимум                    = ?(ТипЗнч(Выборка.КритическийМинимум) = Тип("Число"), Выборка.КритическийМинимум, 0);
				СтрокаНЗ.КритическийМаксимум                   = ?(ТипЗнч(Выборка.КритическийМаксимум) = Тип("Число"), Выборка.КритическийМаксимум, 0);
				СтрокаНЗ.ЗначенияКонтролируемыхПоказателейИзОР = Выборка.ЗначенияКонтролируемыхПоказателейИзОР;
			КонецЦикла;
			
			СписокИзмеряемыхПоказателейНЗ.Записать();
		ИначеЕсли ЭлементСписка.Значение = "Параметры наработки (только действующие значения)" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
			|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
			|	торо_ПараметрыНаработкиОбъектовРемонта.Основной,
			|	торо_ПараметрыНаработкиОбъектовРемонта.Период
			|ИЗ
			|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(, ОбъектРемонта = &ОбъектРемонта) КАК торо_ПараметрыНаработкиОбъектовРемонта";
			
			Запрос.УстановитьПараметр("ОбъектРемонта", ЗначениеКопирования);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			СписокПараметровНаработкиНЗ = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
			СписокПараметровНаработкиНЗ.Отбор.ОбъектРемонта.Установить(ОР);
			
			Пока Выборка.Следующий() Цикл
				СтрокаНЗ = СписокПараметровНаработкиНЗ.Добавить();
				СтрокаНЗ.ОбъектРемонта = ОР;
				СтрокаНЗ.ПериодПлановойНаработки = Выборка.ПериодПлановойНаработки;
				СтрокаНЗ.ПлановаяНаработка = Выборка.ПлановаяНаработка;
				СтрокаНЗ.Показатель = Выборка.Показатель;
				СтрокаНЗ.КоэффициентИспользованияОборудования = Выборка.КоэффициентИспользованияОборудования;
				СтрокаНЗ.ПродолжительностьПериодаПлановойНаработки = Выборка.ПродолжительностьПериодаПлановойНаработки;
				СтрокаНЗ.Период = Выборка.Период;
				СтрокаНЗ.Основной = Выборка.Основной;
			КонецЦикла;
			
			СписокПараметровНаработкиНЗ.Записать();
		ИначеЕсли ЭлементСписка.Значение = "Параметры наработки (история изменения)" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
			|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
			|	торо_ПараметрыНаработкиОбъектовРемонта.Основной,
			|	торо_ПараметрыНаработкиОбъектовРемонта.Период
			|ИЗ
			|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
			|ГДЕ
			|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта";
			
			Запрос.УстановитьПараметр("ОбъектРемонта", ЗначениеКопирования);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			СписокПараметровНаработкиНЗ = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
			СписокПараметровНаработкиНЗ.Отбор.ОбъектРемонта.Установить(ОР);
			
			Пока Выборка.Следующий() Цикл
				СтрокаНЗ = СписокПараметровНаработкиНЗ.Добавить();
				СтрокаНЗ.ОбъектРемонта = ОР;
				СтрокаНЗ.ПериодПлановойНаработки=Выборка.ПериодПлановойНаработки;
				СтрокаНЗ.ПлановаяНаработка = Выборка.ПлановаяНаработка;
				СтрокаНЗ.Показатель=Выборка.Показатель;
				СтрокаНЗ.КоэффициентИспользованияОборудования = Выборка.КоэффициентИспользованияОборудования;
				СтрокаНЗ.ПродолжительностьПериодаПлановойНаработки = Выборка.ПродолжительностьПериодаПлановойНаработки;
				СтрокаНЗ.Период = Выборка.Период;
				СтрокаНЗ.Основной = Выборка.Основной;
			КонецЦикла;
			
			СписокПараметровНаработкиНЗ.Записать();
		ИначеЕсли ЭлементСписка.Значение = "Запчасти" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_Запчасти.ОбъектРемонта,
			|	торо_Запчасти.ТиповойОР,
			|	торо_Запчасти.Номенклатура,
			|	торо_Запчасти.Качество,
			|	торо_Запчасти.Характеристика,
			|	торо_Запчасти.Количество
			|ИЗ
			|	РегистрСведений.торо_Запчасти КАК торо_Запчасти
			|ГДЕ
			|	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ЗапчастиУдаленные.ОбъектРемонта,
			|	торо_ЗапчастиУдаленные.ТиповойОР,
			|	торо_ЗапчастиУдаленные.Номенклатура,
			|	торо_ЗапчастиУдаленные.Характеристика
			|ИЗ
			|	РегистрСведений.торо_ЗапчастиУдаленные КАК торо_ЗапчастиУдаленные
			|ГДЕ
			|	торо_ЗапчастиУдаленные.ОбъектРемонта = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта,
			|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
			|	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта,
			|	торо_НормыЗапчастейНаОбъектыРемонта.Количество,
			|	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР,
			|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика
			|ИЗ
			|	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
			|ГДЕ
			|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта,
			|	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура,
			|	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ВидРемонта,
			|	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ТиповойОР
			|ИЗ
			|	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные КАК торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
			|ГДЕ
			|	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта = &ОбъектРемонта";
			
			Запрос.УстановитьПараметр("ОбъектРемонта", ЗначениеКопирования);
			Результат = Запрос.ВыполнитьПакет();
			
			// записи в рс торо_Запчасти
			Выборка = Результат[0].Выбрать();
			
			ТаблицаЗапчастейОбъектовРемонтаНЗ = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
			ТаблицаЗапчастейОбъектовРемонтаНЗ.Отбор.ОбъектРемонта.Установить(ОР);
			Пока Выборка.Следующий() Цикл
				СтрокаЗЧ = ТаблицаЗапчастейОбъектовРемонтаНЗ.Добавить();
				СтрокаЗЧ.ОбъектРемонта = ОР;
				
				СтрокаЗЧ.Номенклатура = Выборка.Номенклатура;
				СтрокаЗЧ.Количество = Выборка.Количество;
				СтрокаЗЧ.Качество = Выборка.Качество;
				СтрокаЗЧ.Характеристика = Выборка.Характеристика;
				СтрокаЗЧ.ТиповойОР = Выборка.ТиповойОР;
			КонецЦикла;
			
			ТаблицаЗапчастейОбъектовРемонтаНЗ.Записать();
			
			// записи в рс торо_ЗапчастиУдаленные
			Выборка = Результат[1].Выбрать();
			
			ТаблицаЗапчастейОбъектовРемонтаУдаленныеНЗ = РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
			ТаблицаЗапчастейОбъектовРемонтаУдаленныеНЗ.Отбор.ОбъектРемонта.Установить(ОР);
			Пока Выборка.Следующий() Цикл
				СтрокаЗЧ = ТаблицаЗапчастейОбъектовРемонтаУдаленныеНЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗЧ, выборка);
				СтрокаЗЧ.ОбъектРемонта = ОР;
			КонецЦикла;
			
			ТаблицаЗапчастейОбъектовРемонтаУдаленныеНЗ.Записать();
			
			// записи в рс торо_НормыЗапчастейНаОбъектыРемонта
			Выборка = Результат[2].Выбрать();
			
			ТаблицаЗатратПоВидамРемонтаНЗ = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
			ТаблицаЗатратПоВидамРемонтаНЗ.Отбор.ОбъектРемонта.Установить(ОР);
			
			Пока Выборка.Следующий() Цикл
				СтрокаЗатрат = ТаблицаЗатратПоВидамРемонтаНЗ.Добавить();
				СтрокаЗатрат.ОбъектРемонта = ОР;
				
				СтрокаЗатрат.Номенклатура = Выборка.Номенклатура;
				СтрокаЗатрат.Количество = Выборка.Количество;
				СтрокаЗатрат.ВидРемонта = Выборка.ВидРемонта;
				СтрокаЗатрат.ТиповойОР = Выборка.ТиповойОР;
				СтрокаЗатрат.Характеристика = Выборка.Характеристика;
			КонецЦикла;
			
			ТаблицаЗатратПоВидамРемонтаНЗ.Записать();
			
			// записи в рс торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
			Выборка = Результат[3].Выбрать();
			
			ТаблицаЗатратПоВидамРемонтаУдаленныеНЗ = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
			ТаблицаЗатратПоВидамРемонтаУдаленныеНЗ.Отбор.ОбъектРемонта.Установить(ОР);
			
			Пока Выборка.Следующий() Цикл
				СтрокаЗатрат = ТаблицаЗатратПоВидамРемонтаУдаленныеНЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗатрат, Выборка);
				СтрокаЗатрат.ОбъектРемонта = ОР;
			КонецЦикла;
			
			ТаблицаЗатратПоВидамРемонтаУдаленныеНЗ.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Копирует объект ремонта (содержится в списке) с подчиненными.
// Параметры:
//		МассивОРДляКопирования - Массив - массив объектов ремонта, где элементом является структура:
//			* Ссылка - СправочникСсылка.торо_ОбъектыРемонта - ссылка на копируемый объект ремонта.
//			* Родитель - СправочникСсылка.торо_ОбъектыРемонта - родитель объекта ремонта.
//			* ТипОбъекта - ПеречислениеСсылка.торо_ТипыОбъектовRCM - тип объекта ремонта.
//			* ЭтоГруппа - Булево - признак того, является ли объект ремонта группой или нет.
//		РодительОР - СправочникСсылка - ссылка на родителя.
//		ТекСтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии, в которую нужно добавлять новые объекты ремонта.
//		СписокПараметровКопирования - СписокЗначений - список параметров, которые необходимо перенести.
//
// Возвращаемое значение:
//		Булево - истина, если у копирование прошло успешно.
//
Функция СкопироватьОРСПодчиненными(МассивОРДляКопирования, РодительОР, ТекСтруктураИерархии, СписокПараметровКопирования) Экспорт
	СоответствиеНовыхИСтарыхОР = Новый Соответствие;
	
	Если Не ТипЗнч(РодительОР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
	    РодительОР = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	КонецЕсли;
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	
	Для каждого ТекущийОР Из МассивОРДляКопирования Цикл
		КопияОбъект = ТекущийОР.Ссылка.Скопировать();
		СсылкаНаОбъект = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(КопияОбъект);
		
		Если ТекущийОР.Родитель = Неопределено Тогда
			РодительИерархии = РодительОР;
		Иначе
			ЗначениеСоответствия = СоответствиеНовыхИСтарыхОР[ТекущийОР.Родитель.Ссылка];
			Если ЗначениеСоответствия <> Неопределено Тогда
				РодительИерархии = ЗначениеСоответствия;
			Иначе
				РодительИерархии = РодительОР;
			КонецЕсли;
		КонецЕсли;
		
		ТипОбъекта = ТекущийОР.ТипОбъекта;
		Если ТекущийОР.ЭтоГруппа Тогда
			ТипОбъекта = Неопределено;
		КонецЕсли;
		
		Попытка
			торо_РаботаСИерархией20.ВключитьНовыйОбъектРемонтаВИерархию(СсылкаНаОбъект, ТекСтруктураИерархии, РодительИерархии, ОшибкаТранзакции,, ТипОбъекта);
			КопияОбъект.Записать();
			СоответствиеНовыхИСтарыхОР.Вставить(ТекущийОР.Ссылка, КопияОбъект.Ссылка);
			
			Если ЗначениеЗаполнено(СписокПараметровКопирования) Тогда
			    ПеренестиПараметрыОРПослеКопирования(ТекущийОР.Ссылка, КопияОбъект.Ссылка, СписокПараметровКопирования);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КопияОбъект.ТиповойОР) Тогда
			    торо_РаботаСНормативамиСервер.ЗаписатьНормативыОРПриИзмененииТиповогоОР(КопияОбъект.ТиповойОР, КопияОбъект.Ссылка,, Ложь,,, Ложь, Ложь);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ОшибкаТранзакции = Истина;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
				Метаданные.Справочники.торо_ОбъектыРемонта,,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Если Не ОшибкаТранзакции Тогда
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Иначе
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Завершение команды "Пометить на удаление".
Функция ПометитьНаУдалениеНаСервере(МассивОР, ЗначениеПометки, СПодчиненными = Ложь) Экспорт
	
	Если СПодчиненными Тогда
		МассивОРДляОбработки = Новый массив;
		Для каждого ОР из МассивОР Цикл
			МассивОРДляОбработки.Добавить(ОР);
		КонецЦикла;
		ДополнитьМассивПодчиненнымиОР(МассивОР, МассивОРДляОбработки, Истина);
	Иначе
		МассивОРДляОбработки = МассивОР;
	КонецЕсли;
	
	МассивУспешных = Новый массив;
	
	Для каждого ОбъектРемонта из МассивОРДляОбработки Цикл
		Попытка
			ОбъектРемонтаОбъект = ОбъектРемонта.ПолучитьОбъект();
			ОбъектРемонтаОбъект.ПометкаУдаления = ЗначениеПометки;
			ОбъектРемонтаОбъект.Записать();
			МассивУспешных.Добавить(ОбъектРемонта);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр("ru = 'Не удалось пометить объект на удаление по причине: '");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + ОписаниеОшибки, ОбъектРемонта);
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивУспешных;
	
КонецФункции

// Завершение команды "Удалить из иерархии".
Процедура УдалитьИзИерархииНаСервере(МассивОР, СтруктураИерархии, СПодчиненными = Ложь, ЭтоВложенныйУровень = Ложь) Экспорт
	
	ШаблонСообщенияНельзяУдалять = НСтр("ru = 'Объект ремонта ""%1"" не может быть удален из данной иерархии, так как используется только в ней.'");
	
	МассивКУдалению = Новый Массив;
	МассивНеудаляемых = Новый Массив;
	
	// Проверка: если объект ремонта входит только в текущую иерархию, то удалять его нельзя.
	ТаблицаСИерархиями = ПолучитьОРСКоличествомИерархий(МассивОР, СтруктураИерархии);
	
	Для каждого Строка из ТаблицаСИерархиями Цикл
		МожноУдалять = Строка.КоличествоИерархий > 0;
		
		Если НЕ МожноУдалять Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщенияНельзяУдалять, Строка.ОбъектРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Строка.ОбъектРемонта);
			МассивНеудаляемых.Добавить(Строка.ОбъектРемонта);
			Продолжить;
		КонецЕсли;

		МассивКУдалению.Добавить(Строка.ОбъектРемонта);
	КонецЦикла;
	
	// Собираем исходных родителей, чтобы потом перепроверить, остались ли они группами.
	МассивРодителей = Новый Массив;
	Если НЕ ЭтоВложенныйУровень Тогда
		СоответствиеОРИРодителей = ПолучитьТекущихРодителейВИерархии(МассивКУдалению, СтруктураИерархии,,Истина,Истина);
		
		Для каждого СтрокаДляОбработки из СоответствиеОРИРодителей Цикл
			Если ЗначениеЗаполнено(СтрокаДляОбработки.Значение) 
				И ТипЗнч(СтрокаДляОбработки.Значение) = Тип("СправочникСсылка.торо_ОбъектыРемонта")
				И МассивРодителей.Найти(СтрокаДляОбработки.Значение) = Неопределено Тогда
				МассивРодителей.Добавить(СтрокаДляОбработки.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СПодчиненными Тогда 
		
		// Если подчиненный не может удалиться, то переносится в корень.
		Если ЭтоВложенныйУровень И МассивНеудаляемых.Количество() > 0 Тогда
			ПеренестиЭлементыВКореньИерархии(МассивНеудаляемых, СтруктураИерархии);
		КонецЕсли;
		
	Иначе 
		
		// Подчиненные переносятся в корень.
		МассивКПеремещению = Новый Массив;
		ДополнитьМассивПодчиненнымиОР(МассивКУдалению, МассивКПеремещению, Ложь, СтруктураИерархии);
		
		Если МассивКПеремещению.Количество() > 0 Тогда
			ПеренестиЭлементыВКореньИерархии(МассивКПеремещению, СтруктураИерархии);
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаление элементов, которые можно удалить.
	Если МассивКУдалению.Количество() > 0 Тогда
		ВыполнитьПереносЭлементов(МассивКУдалению, СтруктураИерархии,,Истина);
	КонецЕсли;

	// Разделим на небольшие транзакции для оптимизации.
	МаксЭлементовВТранзакции = 500;
	СчетчикЭлементовВТранзакции = 0;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Для каждого ОбъектРемонта из МассивКУдалению Цикл
		УдалитьПорядокЭлементаИзРегистра(ОбъектРемонта, СтруктураИерархии);
		ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ОбъектРемонта, СтруктураИерархии, Ложь);
		
		СчетчикЭлементовВТранзакции = СчетчикЭлементовВТранзакции + 1;
		Если СчетчикЭлементовВТранзакции = МаксЭлементовВТранзакции Тогда
			ЗафиксироватьТранзакцию();
			СчетчикЭлементовВТранзакции = 0;
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		КонецЕсли;
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	// После удаления, проверяем иконки родителей.
	Если НЕ ЭтоВложенныйУровень Тогда
		ОбновитьИконкуГруппыУОбъектовРемонта(МассивРодителей, СтруктураИерархии);
	КонецЕсли;
	
	// Рекурсивное удаление подчиненных.
	Если СПодчиненными Тогда
		
		МассивПодчиненныхКУдалению = Новый Массив;
		ДополнитьМассивПодчиненнымиОР(МассивКУдалению, МассивПодчиненныхКУдалению, Ложь, СтруктураИерархии);
		
		Если МассивПодчиненныхКУдалению.Количество() > 0 Тогда
			УдалитьИзИерархииНаСервере(МассивПодчиненныхКУдалению, СтруктураИерархии, СПодчиненными, Истина);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Завершение команды добавления из другой иерархии.
Процедура ДобавитьВИерархиюНаСервере(МассивОР, СтруктураИерархии, РодительИерархии, СоответствиеОРСуществующихВТекИеррархии, ИерархияИсточник, РодительИсточник, НеСохранятьИерархию, Отказ) Экспорт
	
	Если СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("СтруктураИерархии", СтруктураИерархии);
		ДанныеЗаполнения.Вставить("ОбъектИерархии", МассивОР);
		ДанныеЗаполнения.Вставить("РодительИерархии", РодительИерархии);
		ДанныеЗаполнения.Вставить("НеСохранятьИерархию", НеСохранятьИерархию);
		
		Если ЗначениеЗаполнено(ИерархияИсточник) Тогда
			ДанныеЗаполнения.Вставить("ИерархияИсточник", ИерархияИсточник);
			ДанныеЗаполнения.Вставить("РодительИсточник", РодительИсточник);
		КонецЕсли;													
				
		НовыйДокумент = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
		НовыйДокумент.Заполнить(ДанныеЗаполнения);
		НовыйДокумент.Дата = ТекущаяДата();
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'Добавление Объектов ремонта не выполнено по причине: %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецПопытки;   
		
	Иначе   
		
		 ИспользоватьФункциональныеМеста = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
		 МассивСтарыхРодителейВНовойИерархии = Новый Массив;
	КонецЕсли;
		
	УзлыИРодителиИсходнойИерархии = ПолучитьТекущихРодителейВИерархии(МассивОР, ИерархияИсточник,,Истина,Истина);
	ПреобразованнаяТаблица = ПреобразоватьТаблицуРодителейВИерархииДляПереноса(УзлыИРодителиИсходнойИерархии, РодительИсточник);
	
	СортироватьТаблицуСОбъектамиРемонтовСогласноПорядку(ПреобразованнаяТаблица, ИерархияИсточник, "Ключ"); 
	
	// Развернем таблицу, чтобы ключами были родители, а значеними - массив подчиненных.
	СоответствиеПоРодителям = Новый Соответствие;
	Для каждого КлючИЗначение ИЗ ПреобразованнаяТаблица Цикл
		ТекущийРодитель = ?(КлючИЗначение.Ключ = РодительИсточник ИЛИ МассивОР.Количество() = 1 ИЛИ НеСохранятьИерархию = Истина, РодительИерархии, КлючИЗначение.Значение);
		
		ЭлементСоответствия = СоответствиеПоРодителям[ТекущийРодитель];
		Если  ЭлементСоответствия = Неопределено Тогда
			ЭлементСоответствия = Новый Массив;
		КонецЕсли;
		
		ЭлементСоответствия.Добавить(КлючИЗначение.Ключ);
		СоответствиеПоРодителям.Вставить(ТекущийРодитель, ЭлементСоответствия);
	КонецЦикла;
		
	// Транзакция необходима для установки управляемой блокировки.
	// Разделим на небольшие транзакции для оптимизации.
	МаксЭлементовВТранзакции = 500;
	СчетчикЭлементовВТранзакции = 0;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
	
	// Запретим параллельно добавлять элементы в одна и ту же иерархнию, т.к. это нарушит порядок
	// (значение реквизита доп. упорядочивания).
	торо_НастройкаПорядкаЭлементовСлужебный.УстановитьБлокировкуРегистраСведенийПорядокОРПоИерархии(СтруктураИерархии);
	ЗначениеРеквизитаДопУпорядочивания = торо_НастройкаПорядкаЭлементов.ПолучитьМаксимальноеЗначениеРеквизитаДопУпорядоивания(СтруктураИерархии);
		
	Для каждого КлючИЗначение из СоответствиеПоРодителям Цикл
		
		ТекущийРодитель = КлючИЗначение.Ключ;
		МассивОрПоРодителю = КлючИЗначение.Значение;
		
		Если Не СтруктураИерархии.ИзменяетсяДокументами Тогда
			
			// Новый родитель точно является группой.
			ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекущийРодитель, СтруктураИерархии, Истина);
			
			Если ИспользоватьФункциональныеМеста Тогда
				торо_РаботаСФункциональнымиМестами.ДобавлениеВИерархию(МассивОрПоРодителю, ТекущийРодитель, СтруктураИерархии);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ОбъектРемонта из МассивОрПоРодителю Цикл
			
			СтарыйРодительВНовойИерархии = СоответствиеОРСуществующихВТекИеррархии[КлючИЗначение.Ключ];
			Если СтарыйРодительВНовойИерархии = Неопределено ИЛИ СтарыйРодительВНовойИерархии <> ТекущийРодитель Тогда 
				
				Если Не СтруктураИерархии.ИзменяетсяДокументами Тогда
					
					ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектРемонта, ТекущийРодитель, СтруктураИерархии);
					
					Если ЗначениеЗаполнено(СтарыйРодительВНовойИерархии) Тогда
						МассивСтарыхРодителейВНовойИерархии.Добавить(СтарыйРодительВНовойИерархии);
					КонецЕсли;	
				КонецЕсли;
								
				торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(ОбъектРемонта, СтруктураИерархии, Ложь, ЗначениеРеквизитаДопУпорядочивания);
				ЗначениеРеквизитаДопУпорядочивания = ЗначениеРеквизитаДопУпорядочивания + 1;
				
				СчетчикЭлементовВТранзакции = СчетчикЭлементовВТранзакции + 1;
				Если СчетчикЭлементовВТранзакции = МаксЭлементовВТранзакции Тогда
					ЗафиксироватьТранзакцию();
					
					СчетчикЭлементовВТранзакции = 0;
					
					НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
					торо_НастройкаПорядкаЭлементовСлужебный.УстановитьБлокировкуРегистраСведенийПорядокОРПоИерархии(СтруктураИерархии);
					ЗначениеРеквизитаДопУпорядочивания = торо_НастройкаПорядкаЭлементов.ПолучитьМаксимальноеЗначениеРеквизитаДопУпорядоивания(СтруктураИерархии);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Не СтруктураИерархии.ИзменяетсяДокументами Тогда
		// Если часть добавляемых элементов уже была в иерархии и поменяла местоположение,
		// необходимо проверить, перестал ли быть группой старый родитель.
		ОбновитьИконкуГруппыУОбъектовРемонта(МассивСтарыхРодителейВНовойИерархии, СтруктураИерархии);
	КонецЕсли; 
	
КонецПроцедуры

// Завершение команды "Изменить положение в иерархии".
Процедура ИзменитьПоложениеВИерархииНаСервере(МассивОР, СтруктураИерархии, РодительИерархии, Отказ) Экспорт
	
	Если СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Если ПеремещениеПриведетКЗацикливанию(МассивОР, СтруктураИерархии, РодительИерархии) Тогда
			ТестСообщения = НСтр("ru = 'Перемещение объекта ремонта приведет к зацикливанию. Перемещение невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(ТестСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура("СтруктураИерархии, ОбъектИерархии, РодительИерархии", СтруктураИерархии, МассивОР, РодительИерархии);
				
		НовыйДокумент = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
		НовыйДокумент.Заполнить(ДанныеЗаполнения);
		НовыйДокумент.Дата = ТекущаяДата();
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'Перемещение Объектов ремонта не выполнено по причине: %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецПопытки;
		
	Иначе
		
		Если ПеремещениеПриведетКЗацикливанию(МассивОР, СтруктураИерархии, РодительИерархии) Тогда
			ТекстСообщения = НСтр("ru = 'Перемещение объекта ремонта приведет к зацикливанию. Перемещение невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
		
		СоответствиеОРИРодителей = ПолучитьТекущихРодителейВИерархии(МассивОР, СтруктураИерархии,,Истина,Истина);
		МассивСтарыхРодителей = Новый Массив;
		
		ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(РодительИерархии, СтруктураИерархии, Истина);
		
		ИспользоватьФункциональныеМеста = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
		Если ИспользоватьФункциональныеМеста Тогда
			торо_РаботаСФункциональнымиМестами.Перетаскивание(МассивОР, РодительИерархии, СтруктураИерархии);
		КонецЕсли;
		
		Для каждого КлючИЗначение из СоответствиеОРИРодителей Цикл
			
			ОбъектРемонта = КлючИЗначение.Ключ;
			СтарыйРодитель = КлючИЗначение.Значение;
			Если ТипЗнч(СтарыйРодитель) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				СтарыйРодитель = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
			КонецЕсли;
				
			Если СтарыйРодитель <> РодительИерархии Тогда
				ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектРемонта, РодительИерархии, СтруктураИерархии);
				
				Если ЗначениеЗаполнено(СтарыйРодитель) Тогда
					МассивСтарыхРодителей.Добавить(СтарыйРодитель);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Необходимо проверить, перестал ли быть группой старый родитель.
		ОбновитьИконкуГруппыУОбъектовРемонта(МассивСтарыхРодителей, СтруктураИерархии);
	КонецЕсли;
	
КонецПроцедуры

// Перенос массива ОР в корень указанной структуры иерархии.
// В качестве массива ОР может передаваться соответсвие, где ключ - структура иерархии,
// а значение - массив ОР для жтой иерархии.
Процедура ПеренестиЭлементыВКореньИерархии(МассивОР, СтруктураИерархии) Экспорт

	Если ТипЗнч(МассивОР) = Тип("Массив") Тогда
		ВыполнитьПереносЭлементов(МассивОР, СтруктураИерархии);
	Иначе 
		
		Для каждого Элем Из МассивОР Цикл
			ВыполнитьПереносЭлементов(Элем.Значение, Элем.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массивы подчиненных объектов ремонта (на один уровень ниже) в соответствии 
// с указанием структуры иерархии. Используется для перемещения в корень всех подчиненных ОР
// при пометке родителей на удаление.
//
// Параметры:
//		МассивОР - Массив - массив объектов ремонта.
//
// Возвращаемое значение:
//		Соответствие - соответствие подчиненных:
//			* Ключ - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//			* Значение - массив подчиненных ОР в этой структуре иерархии.
//
Функция ПолучитьСоответствиеПодчиненныхВоВсехИерархиях(МассивОР) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
	|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии КАК СтруктураИерархии
	|ПОМЕСТИТЬ ВТ_ТаблицаИерархии
	|ИЗ
	|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
	|ГДЕ
	|	торо_ИерархическиеСтруктурыОР.РодительИерархии В(&РодительИерархии)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии
	|ИЗ
	|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, ) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
	|ГДЕ
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии В(&РодительИерархии)
	|	И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИерархии.ОбъектИерархии КАК ОбъектИерархии,
	|	ВТ_ТаблицаИерархии.СтруктураИерархии КАК СтруктураИерархии
	|ИЗ
	|	ВТ_ТаблицаИерархии КАК ВТ_ТаблицаИерархии
	|ИТОГИ ПО
	|	СтруктураИерархии";

	Запрос.УстановитьПараметр("РодительИерархии", МассивОР);
	Результат = Запрос.Выполнить();
	
	ВыборкаПоСтруктурам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтруктураИерархии");
	
	Пока ВыборкаПоСтруктурам.Следующий() Цикл
		
		МассивПодчиненныхОР = Новый Массив;
		ВыборкаПоОР = ВыборкаПоСтруктурам.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаПоОР.Следующий() Цикл
			МассивПодчиненныхОР.Добавить(ВыборкаПоОР.ОбъектИерархии);
		КонецЦикла;
		
		СоответствиеВозврата.Вставить(ВыборкаПоСтруктурам.СтруктураИерархии, МассивПодчиненныхОР);
		
	КонецЦикла;

	Возврат СоответствиеВозврата;
	
КонецФункции

// Добавляет необходимые записи в регистры при записи нового объекта ремонта.
//
// Параметры:
//		СсылкаНаОбъект - СправочникСсылка.торо_ОбъектыРемонта - ссылка на новый объект ремонта.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии, в которой добавляется ОР.
//		РодительИерархии - СправочникСсылка.торо_ОбъектыРемонта - родитель объекта ремонта в этой структуре иерархии.
//		Отказ - Булево - признак ошибки.
//		ОбменДаннымиЗагрузка - Булево - признак выполняемой загрузки данных.
//		ТипОбъекта - ПеречислениеСсылка.торо_ТипыОбъектовRCM - значение реквизита ТипОбъекта для нового объекта. 
//						Для групп следует передавать Неопределено.
//
Процедура ВключитьНовыйОбъектРемонтаВИерархию(СсылкаНаОбъект, СтруктураИерархии, РодительИерархии, Отказ, ОбменДаннымиЗагрузка = Ложь, ТипОбъекта = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураИерархии.СтроитсяАвтоматически Тогда
		
		Если СтруктураИерархии.ИзменяетсяДокументами Тогда
			
			ПредыдущееПоложение = НСтр("ru='Внесен в структуру иерархии'");
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ОбъектИерархии", СсылкаНаОбъект);
			ПараметрыЗаполнения.Вставить("СтруктураИерархии", СтруктураИерархии);
			ПараметрыЗаполнения.Вставить("РодительИерархии", РодительИерархии);
			ПараметрыЗаполнения.Вставить("ПредыдущееПоложение", ПредыдущееПоложение);
			
			НовДок = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
			НовДок.Заполнить(ПараметрыЗаполнения);
			НовДок.Дата = ТекущаяДата();
			
			НовДок.ДополнительныеСвойства.Вставить("НеФормироватьДвиженияПоИстоииФМ", Истина);
			НовДок.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе 
			
			ДобавитьЗаписиВРегистрИерархическихСтруктур(СсылкаНаОбъект, РодительИерархии, СтруктураИерархии);
			ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(РодительИерархии, СтруктураИерархии, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ИспользоватьФункциональныеМеста = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
		Если ИспользоватьФункциональныеМеста И ЗначениеЗаполнено(РодительИерархии) И НЕ РодительИерархии.ЭтоГруппа
			И ТипОбъекта <> Неопределено И ТипОбъекта <> Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто 
			И РодительИерархии.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
			торо_РаботаСФункциональнымиМестами.УстановкаОР(РодительИерархии, СсылкаНаОбъект, СтруктураИерархии); 
			торо_РаботаСФункциональнымиМестами.ДобавитьОбъектДляПроверки(СсылкаНаОбъект);
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ОбменДаннымиЗагрузка Тогда
		
		торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(СсылкаНаОбъект, СтруктураИерархии, Отказ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_СтруктурыОР.Ссылка КАК Ссылка,
		|	торо_СтруктурыОР.РеквизитОР КАК РеквизитОР
		|ИЗ
		|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
		|ГДЕ
		|	торо_СтруктурыОР.СтроитсяАвтоматически
		|	И торо_СтруктурыОР.Ссылка <> &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СтруктураИерархии);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(СсылкаНаОбъект, Выборка.Ссылка, Отказ);		
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура удаляет все записи с указанными ОР из регистра торо_ОбъектыРемонтаГруппы.
// Применяется при пометке на удаление без полчиненных (после переноса подчиненных в корень иерархии).
Процедура СнятьСЭлементовОтметкуГруппыВоВсехИерархиях(МассивОР) Экспорт
	
	Для каждого ОбъектРемонта из МассивОР Цикл
		НаборЗаписей = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектИерархии.Установить(ОбъектРемонта);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// На формах выбора и подбора видоизменяет массив данных выделенных строк в соответствии
// с выбранным вариантом учета иерархии элементов.
Функция ДополнитьОтобратьМассивВыбранныхСтрок(МассивДанныхВыбранныхСтрок, ВариантУчетаИерархииЭлементов, СтруктураИерархии, РазрешитьВыборГрупп, ДатаСреза = Неопределено, ОтборСтатусыВУчете = Неопределено, ДополнительныеОтборы = Неопределено, РазрешитьВыборФМ = Истина) Экспорт

	МассивСсылок = Новый массив;
	Для каждого ДанныеСтр из МассивДанныхВыбранныхСтрок Цикл
		МассивСсылок.Добавить(ДанныеСтр.Ссылка);
	КонецЦикла;	
	
	ПолныйМассивСсылок = Новый Массив;
	
	Если ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.УчитыватьИерархию Тогда 
		
		// Нужна полная иерархия.
		ПолныйМассивСсылок = ПолучитьМассивПодчиненныхОбъектов(МассивСсылок, СтруктураИерархии, ДатаСреза, Истина, ОтборСтатусыВУчете, ДополнительныеОтборы);
		
	ИначеЕсли ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.УчитыватьИерархиюТолько1Уровня Тогда
		
		// Нужны только подчиненные одного уровня иерархии.
		ДополнитьМассивПодчиненнымиОР(МассивСсылок, ПолныйМассивСсылок, Ложь, СтруктураИерархии, ДатаСреза, ОтборСтатусыВУчете, ДополнительныеОтборы);
		
	ИначеЕсли ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.УчитыватьИерархию1Уровня Тогда
		
		// Нужны сами выбранные ОР и подчиненные одного уровня иерархии.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолныйМассивСсылок, МассивСсылок);
		ДополнитьМассивПодчиненнымиОР(МассивСсылок, ПолныйМассивСсылок, Ложь, СтруктураИерархии, ДатаСреза, ОтборСтатусыВУчете, ДополнительныеОтборы);
		
	КонецЕсли;
	
	// Индекс картинки получается не очень точно,
	// т.к. в цикле дальше имеют значение только свойства ЭтоГруппа и ПометкаУдаления.
	// Не группы с подчиненными нам безразличны.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
	|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
	|						ТОГДА 6
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&МассивСсылок)
	|	И торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ
	|	И торо_ОбъектыРемонта.ТипОбъекта В(&ТипОбъекта)";
	
	Запрос.УстановитьПараметр("МассивСсылок", ПолныйМассивСсылок);
	
	Если РазрешитьВыборГрупп Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И торо_ОбъектыРемонта.ЭтоГруппа = Ложь", ""); 
	КонецЕсли;
	
	Если РазрешитьВыборФМ Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И торо_ОбъектыРемонта.ТипОбъекта В(&ТипОбъекта)", "");
	Иначе
		МассивТиповОР = Новый Массив;
		МассивТиповОР.Добавить(Перечисления.торо_ТипыОбъектовRCM.Объект);
		МассивТиповОР.Добавить(Перечисления.торо_ТипыОбъектовRCM.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТипОбъекта", МассивТиповОР);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);
	
КонецФункции

Функция ЗаполнитьНаличиеПоказателейВДереве(СтрокаДерева = Неопределено, МассивПодчиненныхОР = Неопределено) Экспорт
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	
	ОбъектыРемонтаУзла = Новый ТаблицаЗначений;
	ОбъектыРемонтаУзла.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов(МассивТипов));
	
	Если СтрокаДерева = Неопределено Тогда
	    Для каждого ОР Из МассивПодчиненныхОР Цикл
			НС = ОбъектыРемонтаУзла.Добавить();
			НС.ОбъектРемонта = ОР;
		КонецЦикла;
	Иначе
		Для каждого СтрокаОР Из СтрокаДерева.ПолучитьЭлементы() Цикл
			НС = ОбъектыРемонтаУзла.Добавить();
			НС.ОбъектРемонта = СтрокаОР.ОбъектРемонта;
		КонецЦикла;
	КонецЕсли;
	
	ЗапросТиповых = Новый Запрос;
	ЗапросТиповых.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|ГДЕ
			|	торо_ОбъектыРемонта.ТиповойОР <> ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
			|	И торо_ОбъектыРемонта.Ссылка В(&Ссылка)";
	
	ЗапросТиповых.УстановитьПараметр("Ссылка", ОбъектыРемонтаУзла.ВыгрузитьКолонку("ОбъектРемонта"));
	СписокТиповых = ЗапросТиповых.Выполнить().Выгрузить().ВыгрузитьКолонку("ТиповойОР");
	
	ТаблицаРодителейТиповых = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейСпискаОбъектов(СписокТиповых, Тип("СправочникСсылка.торо_ТиповыеОР"), Истина);
	
	ЗапросОРСПоказателями = Новый Запрос;
	ЗапросОРСПоказателями.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаОР.ОбъектРемонта КАК ОбъектРемонта
			|ПОМЕСТИТЬ ОбъектыРемонтаУзла
			|ИЗ
			|	&ТаблицаОР КАК ТаблицаОР
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта КАК ОбъектРемонта
			|ПОМЕСТИТЬ ВТ_ОРСПараметрамиНаработки
			|ИЗ
			|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
			|			,
			|			ОбъектРемонта В
			|				(ВЫБРАТЬ
			|					ОбъектыРемонтаУзла.ОбъектРемонта КАК ОбъектРемонта
			|				ИЗ
			|					ОбъектыРемонтаУзла КАК ОбъектыРемонтаУзла)) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаРодителей.Объект КАК Объект,
			|	ТаблицаРодителей.Родитель КАК Родитель
			|ПОМЕСТИТЬ ТаблицаРодителейТиповыхОР
			|ИЗ
			|	&ТаблицаРодителей КАК ТаблицаРодителей
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
			|	ТаблицаРодителейТиповыхОР.Родитель КАК ТиповойОР
			|ПОМЕСТИТЬ ТаблицаТиповыхОР
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРодителейТиповыхОР КАК ТаблицаРодителейТиповыхОР
			|		ПО торо_ОбъектыРемонта.ТиповойОР = ТаблицаРодителейТиповыхОР.Объект
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ТиповойОР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален КАК Удален
			|ПОМЕСТИТЬ ПоказателиОРИТиповогоОР
			|ИЗ
			|	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРемонтаУзла КАК ОбъектыРемонтаУзла
			|		ПО торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта = ОбъектыРемонтаУзла.ОбъектРемонта
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаТиповыхОР.ОбъектРемонта,
			|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален
			|ИЗ
			|	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТиповыхОР КАК ТаблицаТиповыхОР
			|		ПО торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта = ТаблицаТиповыхОР.ТиповойОР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
			|	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации КАК ВидЭксплуатации,
			|	торо_ТекущееСостояниеОРСрезПоследних.ПричинаПростоя КАК ПричинаПростоя
			|ПОМЕСТИТЬ ВТ_СостоянияОР
			|ИЗ
			|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата
			|			,
			|			ОбъектРемонта В
			|				(ВЫБРАТЬ
			|					ОбъектыРемонтаУзла.ОбъектРемонта КАК ОбъектРемонта
			|				ИЗ
			|					ОбъектыРемонтаУзла КАК ОбъектыРемонтаУзла)) КАК торо_ТекущееСостояниеОРСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПриоритетовПолная.ОбъектРемонта КАК ОбъектРемонта,
			|	МАКСИМУМ(ТаблицаПриоритетовПолная.Удален) КАК Удален
			|ПОМЕСТИТЬ ВТ_ОРСКонтролируемымиПоказателями
			|ИЗ
			|	ПоказателиОРИТиповогоОР КАК ТаблицаПриоритетовПолная
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПриоритетовПолная.ОбъектРемонта
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(ТаблицаПриоритетовПолная.Удален) = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбъектыРемонтаУзла.ОбъектРемонта КАК ОбъектРемонта,
			|	ВЫБОР
			|		КОГДА ВТ_ОРСПараметрамиНаработки.ОбъектРемонта ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПоказателиНаработкиВведены,
			|	ВЫБОР
			|		КОГДА ВТ_ОРСКонтролируемымиПоказателями.ОбъектРемонта ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК КонтролируемыеПоказателиВведены,
			|	ВТ_СостоянияОР.ВидЭксплуатации КАК ВидЭксплуатации,
			|	ВТ_СостоянияОР.ПричинаПростоя КАК ПричинаПростоя
			|ИЗ
			|	ОбъектыРемонтаУзла КАК ОбъектыРемонтаУзла
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОРСПараметрамиНаработки КАК ВТ_ОРСПараметрамиНаработки
			|		ПО ОбъектыРемонтаУзла.ОбъектРемонта = ВТ_ОРСПараметрамиНаработки.ОбъектРемонта
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОРСКонтролируемымиПоказателями КАК ВТ_ОРСКонтролируемымиПоказателями
			|		ПО ОбъектыРемонтаУзла.ОбъектРемонта = ВТ_ОРСКонтролируемымиПоказателями.ОбъектРемонта
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияОР КАК ВТ_СостоянияОР
			|		ПО ОбъектыРемонтаУзла.ОбъектРемонта = ВТ_СостоянияОР.ОбъектРемонта";
	
	ЗапросОРСПоказателями.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителейТиповых);
	ЗапросОРСПоказателями.УстановитьПараметр("ТаблицаОР", ОбъектыРемонтаУзла);
	ЗапросОРСПоказателями.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Если СтрокаДерева = Неопределено Тогда
		РезультатЗапроса = ЗапросОРСПоказателями.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
		    Возврат Новый Соответствие();
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		СоответствиеОР = Новый Соответствие();
		
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура("ПоказателиНаработкиВведены, КонтролируемыеПоказателиВведены, ВидЭксплуатации, ПричинаПростоя");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
			СоответствиеОР.Вставить(Выборка.ОбъектРемонта, СтруктураСтроки);
		КонецЦикла;
		
		Возврат СоответствиеОР;
	Иначе
		ТЗОРСПоказателями = ЗапросОРСПоказателями.Выполнить().Выгрузить();
		ТЗОРСПоказателями.Индексы.Добавить("ОбъектРемонта");
		
		Для каждого СтрокаОР Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если СтрокаОР.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ОбъектРемонта", СтрокаОР.ОбъектРемонта);
			НайденныеСтроки = ТЗОРСПоказателями.НайтиСтроки(СтруктураПоиска);
			Если Не НайденныеСтроки.Количество() = 0 Тогда
			    СтрокаОР.КонтролируемыеПоказателиВведены = НайденныеСтроки[0].КонтролируемыеПоказателиВведены;
				СтрокаОР.ПоказателиНаработкиВведены		 = НайденныеСтроки[0].ПоказателиНаработкиВведены;
				СтрокаОР.Состояние						 = НайденныеСтроки[0].ВидЭксплуатации;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПустойРодительПоСтруктуреИерархии(СтруктураПараметровИерархии) Экспорт
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		Если СтруктураПараметровИерархии.ТипРеквизитаОР <> "" Тогда
			ПустойРодитель = Справочники[СтруктураПараметровИерархии.ТипРеквизитаОР].ПустаяСсылка();
		Иначе
			ПустойРодитель = Неопределено;
		КонецЕсли;
	Иначе
		ПустойРодитель = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПустойРодитель;
	
КонецФункции

// Добавляет в параметр ДополняемыйМассив объекты ремонта, починенные элементам из параметра МассивОР.
// Если не передавать структуру иерархии, то берутся подчиненные из всех иерархий.
// Если Рекурсивно = Ложь, то добавляеися только один уровень вложенности, иначе - все.
// Не обрабатывает автоматические иерархии, т.к. в автоматических иерархиях у 
// объектов ремонта нет других подчиненных объектов ремонта.
// Описание параметров см. в функции ПолучитьМассивПодчиненныхОбъектов.
Процедура ДополнитьМассивПодчиненнымиОР(МассивОР, ДополняемыйМассив, Рекурсивно = Истина, СтруктураИерархии = Неопределено, ДатаСреза = Неопределено, ОтборСтатусыВУчете = Неопределено, ДополнительныеОтборы = Неопределено) Экспорт
	
	Если МассивОР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКОбъектуРемонта = "ТаблицаИерархии.ОбъектИерархии";
	
	Запрос = Новый Запрос;
		
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаИерархии.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ТаблицаИерархии
		|ГДЕ
		|	ТаблицаИерархии.РодительИерархии В(&РодительИерархии)
		|	И &ДополнительныеОтборы
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаИерархии.ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&ДатаСреза, ) КАК ТаблицаИерархии
		|ГДЕ
		|	ТаблицаИерархии.РодительИерархии В(&РодительИерархии)
		|	И ТаблицаИерархии.Удален = ЛОЖЬ
		|	И &ДополнительныеОтборы";
		
	Иначе
		
		Если СтруктураИерархии.СтроитсяАвтоматически Тогда
			
			ИерархическийСправочник = Ложь;
			Если СтруктураИерархии.ТипРеквизитаОР <> "" Тогда
				ИерархическийСправочник = торо_ОбщегоНазначенияПовтИсп.СправочникИерархический(СтруктураИерархии.ТипРеквизитаОР);
			КонецЕсли;
			
			Если ИерархическийСправочник Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Спр.Ссылка КАК ОбъектИерархии
				|ИЗ
				|	Справочник."+СтруктураИерархии.ТипРеквизитаОР+" КАК Спр
				|ГДЕ
				|	Спр.Родитель В(&РодительИерархии)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ 
				|	торо_ОбъектыРемонта.Ссылка
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ
				|	торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ
				|	И торо_ОбъектыРемонта."+СтруктураИерархии.РеквизитОР+" В(&РодительИерархии)
				|	И &ДополнительныеОтборы";
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ
				|	торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ
				|	И торо_ОбъектыРемонта."+СтруктураИерархии.РеквизитОР+" В(&РодительИерархии)
				|	И &ДополнительныеОтборы";
				
			КонецЕсли;
			
			ПутьКОбъектуРемонта = "торо_ОбъектыРемонта";
			
		ИначеЕсли СтруктураИерархии.ИзменяетсяДокументами Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаИерархии.ОбъектИерархии КАК ОбъектИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&ДатаСреза, СтруктураИерархии = &СтруктураИерархии) КАК ТаблицаИерархии
			|ГДЕ
			|	ТаблицаИерархии.РодительИерархии В(&РодительИерархии)
			|	И ТаблицаИерархии.Удален = ЛОЖЬ
			|	И &ДополнительныеОтборы";
			
		Иначе	
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаИерархии.ОбъектИерархии КАК ОбъектИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ТаблицаИерархии
			|ГДЕ
			|	ТаблицаИерархии.РодительИерархии В(&РодительИерархии)
			|	И ТаблицаИерархии.СтруктураИерархии = &СтруктураИерархии
			|	И &ДополнительныеОтборы";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РодительИерархии", МассивОР);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	Если ДополнительныеОтборы <> Неопределено И ДополнительныеОтборы.Количество() > 0 Тогда
		ТекстДопОтбора = СформироватьСтрокуДополнительныхОтборовИУстановитьПараметры(ДополнительныеОтборы, ПутьКОбъектуРемонта, Запрос);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеОтборы", ТекстДопОтбора);
	Иначе
		Запрос.УстановитьПараметр("ДополнительныеОтборы", Истина);
	КонецЕсли;
	
	// Реквизит НеУчаствуетВПланировании используется только для элементов, соответственно для групп это значение
	// null. Поэтому "...НеУчаствуетВПланировании = Ложь" дает Ложь, т.е. группы не выбираются, следовательно их
	// подчиненные ОР получены не будут. Вручную добавим проверку, которая учитывает группы при проверке данного реквизита
	// (если в каком-то случае данного отбора не будет, то ошибка не появится, строка просто не заменится).
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ПутьКОбъектуРемонта + ".НеУчаствуетВПланировании = &ДопОтборНеУчаствуетВПланировании", "(" + ПутьКОбъектуРемонта + ".НеУчаствуетВПланировании = &ДопОтборНеУчаствуетВПланировании Или " + ПутьКОбъектуРемонта + ".ЭтоГруппа)");
	
	МассивПодчиненныхОР = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектИерархии");
	
	Если ОтборСтатусыВУчете <> Неопределено И ОтборСтатусыВУчете.Количество() > 0 Тогда
		МассивПодчиненныхОР = торо_СтатусыОРВУчете.ОтборатьОбъектыПоСтатусамВУчете(МассивПодчиненныхОР, ОтборСтатусыВУчете, ДатаСреза);
	КонецЕсли;
	
	Для каждого ОР из МассивПодчиненныхОР Цикл
		ДополняемыйМассив.Добавить(ОР);
	КонецЦикла;
	
	Если Рекурсивно Тогда
		ДополнитьМассивПодчиненнымиОР(МассивПодчиненныхОР, ДополняемыйМассив, Рекурсивно, СтруктураИерархии,ДатаСреза,ОтборСтатусыВУчете,ДополнительныеОтборы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура берёт таблицу со всеми ОР иерархии и выбирает все подчиненные родителю, помещая их в массив.
Процедура ДополнитьМассивПодчиненнымиОРПоТаблицеИерархии(ДополняемыйМассив, РодительИерархии, ТаблицаИерархии, ИмяКолонкиОР, ИмяКолонкиРодителя, ВключаяРодителя = Истина) Экспорт
	
	Если ВключаяРодителя Тогда
		СтрокаРодителя = ТаблицаИерархии.Найти(РодительИерархии, ИмяКолонкиОР);
		Если СтрокаРодителя = неопределено тогда
			Возврат;
		Иначе 
			ДополняемыйМассив.Добавить(СтрокаРодителя[ИмяКолонкиОР]);
		КонецЕсли;
	КонецЕсли;
	
	МассивПодчиненных = ТаблицаИерархии.НайтиСтроки(Новый Структура(ИмяКолонкиРодителя, РодительИерархии));
	Для Каждого Строка Из МассивПодчиненных Цикл
		ДополняемыйМассив.Добавить(Строка[ИмяКолонкиОР]);
		ДополнитьМассивПодчиненнымиОРПоТаблицеИерархии(ДополняемыйМассив, Строка[ИмяКолонкиОР], ТаблицаИерархии, ИмяКолонкиОР, ИмяКолонкиРодителя, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений с колонками:
//		* ОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта.
//		* КоличествоИерархий - Число - в скольких иерархиях, кроме ИсключаемаяИерархия, есть этот ОР.
//				Если ОР есть только в ИсключаемаяИерархия, то в колонке будет стоять 0.
//
Функция ПолучитьОРСКоличествомИерархий(МассивОР, ИсключаемаяИерархия)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ОР
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&МассивОР)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии,
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии КАК СтруктураИерархии
	|ПОМЕСТИТЬ ВТ_ОРСИерархиями
	|ИЗ
	|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
	|			,
	|			ОбъектИерархии В
	|					(ВЫБРАТЬ
	|						ВТ_ОР.Ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_ОР КАК ВТ_ОР)
	|				И СтруктураИерархии <> &ИсключаемаяИерархия) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
	|ГДЕ
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
	|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
	|ИЗ
	|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
	|ГДЕ
	|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии В
	|				(ВЫБРАТЬ
	|					ВТ_ОР.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_ОР КАК ВТ_ОР)
	|			И торо_ИерархическиеСтруктурыОР.СтруктураИерархии <> &ИсключаемаяИерархия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОР.Ссылка,
	|	торо_СтруктурыОР.Ссылка
	|ИЗ
	|	ВТ_ОР КАК ВТ_ОР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|		ПО торо_СтруктурыОР.СтроитсяАвтоматически = ИСТИНА
	|			И НЕ торо_СтруктурыОР.ПометкаУдаления
	|			И НЕ торо_СтруктурыОР.Ссылка = &ИсключаемаяИерархия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОРСИерархиями.ОбъектИерархии КАК ОбъектИерархии,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ОРСИерархиями.СтруктураИерархии) КАК КоличествоИерархий
	|ПОМЕСТИТЬ ВТ_КоличествоИерархий
	|ИЗ
	|	ВТ_ОРСИерархиями КАК ВТ_ОРСИерархиями
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОРСИерархиями.ОбъектИерархии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОР.Ссылка КАК ОбъектРемонта,
	|	ЕСТЬNULL(ВТ_КоличествоИерархий.КоличествоИерархий, 0) КАК КоличествоИерархий
	|ИЗ
	|	ВТ_ОР КАК ВТ_ОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоИерархий КАК ВТ_КоличествоИерархий
	|		ПО ВТ_ОР.Ссылка = ВТ_КоличествоИерархий.ОбъектИерархии";
	
	Запрос.УстановитьПараметр("МассивОР", МассивОР);
	Запрос.УстановитьПараметр("ИсключаемаяИерархия", ИсключаемаяИерархия);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив структур данных строк на 1 следующий уровень по иерархии.
// Параметры:
//		СтруктураПараметровИерархии - Структура - структура параметров, см. ЗаполнитьПараметрыИерархии.
//		РодителиИерархии - Массив - массив ссылок на родителей, от которых нужно получить подчиненных.
//		ПолучатьСтатусыВУчете - Булево - нужно ли получать статусы в учете для списка ОР. Для формы списка не требуется,
//			для формы выбора зависит от значения функциональной опции "ИспользоватьДокументыЖЦОборудования".
//		ОтборСтатусыВУчете - СписокЗначений - список статусов для отбора.
//		ДополнительныеОтборы - СписокЗначений - список дополнительных отборов, где элементом является структура:
//			* Ключ - Строка - имя реквизита справочника "Объекты ремонта" для отбора.
//			* Значение - Значение - значение для отбора.
//			* ВидСравнения - ВидСравненияКомпоновкиДанных - нее обязательный, вид сравнения. Если поля в структуре нет,
//				то считается, что вид сранения Равно.
//
// Возвращаемое значение:
//		Соответствие - соответствие, где ключем является ссылка на родителя,отбираются только родители с подчиненными.
//	
Функция ОтобратьРодителейСПодчиненными(СтруктураПараметровИерархии, РодителиИерархии, ПолучатьСтатусыВУчете, ОтборСтатусыВУчете, ВключаяКонечныеЭлементы, ДополнительныеОтборы)
	
	ПолучатьСтатусыВУчетеФакт = (ПолучатьСтатусыВУчете = Истина) И ОтборСтатусыВУчете <> Неопределено И ОтборСтатусыВУчете.Количество() > 0;
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РодителиИерархии", РодителиИерархии);
		
		Если СтруктураПараметровИерархии.ИерархическийСправочник Тогда
			
			Если ВключаяКонечныеЭлементы Тогда
				
				МенеджерВТ = Новый МенеджерВременныхТаблиц;
				Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
				|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " КАК Родитель
				|ПОМЕСТИТЬ ВТ_ОР
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ
				|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " В(&РодителиИерархии)
				|	И НЕ торо_ОбъектыРемонта.ЭтоГруппа
				|	И &ДополнительныеОтборы";
				
				Если ДополнительныеОтборы <> Неопределено И ДополнительныеОтборы.Количество() > 0 Тогда
					ТекстДопОтбора = СформироватьСтрокуДополнительныхОтборовИУстановитьПараметры(ДополнительныеОтборы, "торо_ОбъектыРемонта", Запрос);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеОтборы",	ТекстДопОтбора);
				Иначе
					Запрос.УстановитьПараметр("ДополнительныеОтборы", Истина);
				КонецЕсли;
				
				Запрос.Выполнить();
				
				Если ПолучатьСтатусыВУчетеФакт Тогда
					СоздатьВременнуюТаблицуСОтборомПоСтатусу(МенеджерВТ, ОтборСтатусыВУчете, "ВТ_ОР");
				КонецЕсли;
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	СправочникСсылка.Родитель КАК РодительИерархии
				|ИЗ
				|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК СправочникСсылка
				|ГДЕ
				|	СправочникСсылка.Родитель В(&РодителиИерархии)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ 
				|	ВТ_ОР.Родитель КАК РодительИерархии
				|ИЗ
				|	ВТ_ОР КАК ВТ_ОР
				|ГДЕ
				|	&УсловиеПоСтатусамВУчете
				|";
				
				Если ПолучатьСтатусыВУчетеФакт Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтатусамВУчете", 
					"ВТ_ОР.ОбъектИерархии В
					|		(ВЫБРАТЬ
					|			ВТ_ОтборОРПоСтатусам.ОбъектИерархии КАК ОбъектИерархии
					|		ИЗ
					|			ВТ_ОтборОРПоСтатусам КАК ВТ_ОтборОРПоСтатусам)");
				Иначе
					Запрос.УстановитьПараметр("УсловиеПоСтатусамВУчете", Истина);
				КонецЕсли;
				
			Иначе
				
				Запрос.Текст =	
				СтрЗаменить("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	СправочникСсылка.Родитель КАК РодительИерархии
				|ИЗ
				|    Справочник.СтруктураПредприятия КАК СправочникСсылка
				|ГДЕ
				|	СправочникСсылка.Родитель В(&РодителиИерархии)", 
				"СтруктураПредприятия", СтруктураПараметровИерархии.ТипРеквизитаОР);
				
			КонецЕсли;
			
		Иначе // Не иерархиеский.
			
			Возврат Новый Соответствие;
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
	Иначе // Не строится автоматически.
		
		Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
			
			Запрос = Новый Запрос;
			
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_Иерархия.ОбъектИерархии КАК ОбъектИерархии,
			|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ОР_ПервогоУровня
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК ВТ_Иерархия
			|ГДЕ
			|	ВТ_Иерархия.РодительИерархии В(&РодителиИерархии)
			|	И ВТ_Иерархия.Удален = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектИерархии";
			
			Запрос.УстановитьПараметр("РодителиИерархии", РодителиИерархии);
			Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
			Запрос.Выполнить();
			
			Если ПолучатьСтатусыВУчетеФакт Тогда
				СоздатьВременнуюТаблицуСОтборомПоСтатусу(МенеджерВТ, ОтборСтатусыВУчете, "ОР_ПервогоУровня");
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ВТ_РодителиИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК ВТ_Иерархия
			|ГДЕ
			|	ВТ_Иерархия.РодительИерархии В
			|			(ВЫБРАТЬ
			|				ОР_ПервогоУровня.ОбъектИерархии
			|			ИЗ
			|				ОР_ПервогоУровня КАК ОР_ПервогоУровня)
			|	И ВТ_Иерархия.Удален = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РодительИерархии
			|";
			
			Запрос.Выполнить();
			
		Иначе
			
			Запрос = Новый Запрос;
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_Иерархия.ОбъектИерархии КАК ОбъектИерархии,
			|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ОР_ПервогоУровня
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ВТ_Иерархия
			|ГДЕ
			|	ВТ_Иерархия.РодительИерархии В(&РодителиИерархии)
			|	И ВТ_Иерархия.СтруктураИерархии = &СтруктураИерархии
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектИерархии";
			
			Запрос.УстановитьПараметр("РодителиИерархии", РодителиИерархии);
			Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
			Запрос.Выполнить();
			
			Если ПолучатьСтатусыВУчетеФакт Тогда
				СоздатьВременнуюТаблицуСОтборомПоСтатусу(МенеджерВТ, ОтборСтатусыВУчете, "ОР_ПервогоУровня");
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВТ_Иерархия.РодительИерархии КАК РодительИерархии
			|ПОМЕСТИТЬ ВТ_РодителиИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ВТ_Иерархия
			|ГДЕ
			|	ВТ_Иерархия.РодительИерархии В
			|			(ВЫБРАТЬ
			|				ОР_ПервогоУровня.ОбъектИерархии
			|			ИЗ
			|				ОР_ПервогоУровня КАК ОР_ПервогоУровня)
			|	И ВТ_Иерархия.СтруктураИерархии = &СтруктураИерархии
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РодительИерархии";
			
			Запрос.Выполнить();
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОР_ПервогоУровня.РодительИерархии КАК РодительИерархии
		|ИЗ
		|	ОР_ПервогоУровня КАК ОР_ПервогоУровня
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО ОР_ПервогоУровня.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РодителиИерархии КАК ВТ_РодителиИерархии
		|		ПО ОР_ПервогоУровня.ОбъектИерархии = ВТ_РодителиИерархии.РодительИерархии
		|
		|ГДЕ
		|	(торо_ОбъектыРемонта.ЭтоГруппа = ИСТИНА
		|			ИЛИ (&ВключаяКонечныеЭлементы = ИСТИНА
		|				ИЛИ НЕ ВТ_РодителиИерархии.РодительИерархии ЕСТЬ NULL)
		|				И &УсловиеПоСтатусамВУчете
		|				И &ДополнительныеОтборы)";
		
		Если ПолучатьСтатусыВУчетеФакт Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтатусамВУчете", 
				"ОР_ПервогоУровня.ОбъектИерархии В
				|		(ВЫБРАТЬ
				|			ВТ_ОтборОРПоСтатусам.ОбъектИерархии КАК ОбъектИерархии
				|		ИЗ
				|			ВТ_ОтборОРПоСтатусам КАК ВТ_ОтборОРПоСтатусам)");
		Иначе
		  Запрос.УстановитьПараметр("УсловиеПоСтатусамВУчете", Истина);
		КонецЕсли;
		
		Если ДополнительныеОтборы <> Неопределено И ДополнительныеОтборы.Количество() > 0 Тогда
			ТекстДопОтбора = СформироватьСтрокуДополнительныхОтборовИУстановитьПараметры(ДополнительныеОтборы, "ОР_ПервогоУровня.ОбъектИерархии", Запрос);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеОтборы",	ТекстДопОтбора);
		Иначе
			Запрос.УстановитьПараметр("ДополнительныеОтборы", Истина);
		КонецЕсли;

		Запрос.УстановитьПараметр("ВключаяКонечныеЭлементы", ВключаяКонечныеЭлементы);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
		Результат = Запрос.Выполнить();

	КонецЕсли;

	СоответствиеРодителей = Новый Соответствие;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеРодителей.Вставить(Выборка.РодительИерархии, Истина);
	КонецЦикла;
	
	Возврат СоответствиеРодителей;
	
КонецФункции

// Для переданного массива объектов ремонта определяет наличие подчиненных 
// и обновляет запись в торо_ОбъектыРемонтаГруппы.
Процедура ОбновитьИконкуГруппыУОбъектовРемонта(МассивОР, СтруктураИерархии) 
	
	Если МассивОР.Количество() > 0 Тогда 
		ТаблицаНаличияПодчиненных = ТаблицаНаличияПодчиненныхОР(МассивОР, СтруктураИерархии);
		
		Для каждого Строка из ТаблицаНаличияПодчиненных Цикл
			ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(Строка.ОбъектРемонта, СтруктураИерархии, Строка.ЕстьПодчиненные);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, являтся ли новый родитель иерархии подчиненным для перемещаемых элементов.
Функция ПеремещениеПриведетКЗацикливанию(МассивОР, СтруктураИерархии, РодительИерархии) Экспорт
	
	МассивОРСПодчиненными = Новый массив;
	Для каждого ОР из МассивОР Цикл
		МассивОРСПодчиненными.Добавить(ОР);
	КонецЦикла;

	ДополнитьМассивПодчиненнымиОР(МассивОР, МассивОРСПодчиненными, Истина, СтруктураИерархии);
	
	Если МассивОРСПодчиненными.Найти(РодительИерархии) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, не являются ли добавляемые элементы родителями нового родителя иерархии.
Функция ДобавлениеПриведетКЗацикливанию(МассивОР, СтруктураИерархии, РодительИерархии) Экспорт
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(РодительИерархии);
	торо_РаботаСИерархией20.ЗаполнитьМассивРодителейОбъектаРемонта(РодительИерархии, МассивРодителей, СтруктураИерархии);
	
	МассивОРОР = Новый Массив;
	МассивОРНеОР = Новый Массив;
	Для каждого текОР из МассивОР Цикл
		Если ТипЗнч(текОР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			МассивОРОР.Добавить(текОР);
		Иначе 
			МассивОРНеОР.Добавить(текОР.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК ОРРодитель
	|ПОМЕСТИТЬ Вт_Родители
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&МассивРодителей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК Потомок
	|ПОМЕСТИТЬ Вт_Добавляемые
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&МассивПотомков_ОР)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ОбъектыРемонта.Ссылка
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Наименование В(&МассивНаименований)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Вт_Добавляемые.Потомок КАК Потомок
	|ПОМЕСТИТЬ ВТ_ПотомкиСИндексом
	|ИЗ
	|	Вт_Добавляемые КАК Вт_Добавляемые
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Потомок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ПотомкиСИндексом.Потомок.Наименование КАК Наименование
	|ИЗ
	|	Вт_Родители КАК Вт_Родители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПотомкиСИндексом КАК ВТ_ПотомкиСИндексом
	|		ПО Вт_Родители.ОРРодитель = ВТ_ПотомкиСИндексом.Потомок";
				   
	Запрос.УстановитьПараметр("МассивРодителей", МассивРодителей);
	Запрос.УстановитьПараметр("МассивПотомков_ОР", МассивОРОР);
	Запрос.УстановитьПараметр("МассивНаименований", МассивОРНеОР);
				   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	СписокЭлементов = "";
	Пока Выборка.Следующий() цикл
		СписокЭлементов = ?(СписокЭлементов = "", "", СписокЭлементов+",") + Выборка.Наименование;
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = 'В добавляемой ветке присутствуют элементы, которые встречаются выше по дереву иерархии: %1. Добавление отменено!'");
	ТекстСообщения  = СтрШаблон(ШаблонСообщения, СписокЭлементов);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	Возврат истина;				   
	
КонецФункции

// Выполняет перенос элементов в нового родителя в пределах одной структуры иерархии.
// Если параметр Удаление = Истина, то выполняет удаление из иерархии.
Процедура ВыполнитьПереносЭлементов(МассивОР, СтруктураИерархии, РодительИерархии = Неопределено, Удаление = Ложь, Отказ = Ложь)
	
	Если СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("СтруктураИерархии", СтруктураИерархии);
		ДанныеЗаполнения.Вставить("ОбъектИерархии", МассивОР);
		ДанныеЗаполнения.Вставить("РодительИерархии", РодительИерархии);
		ДанныеЗаполнения.Вставить("Удаление", Удаление);
		
		НовДокумент = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
		НовДокумент.Заполнить(ДанныеЗаполнения);
		НовДокумент.Дата = ТекущаяДата();
		
		Попытка
			НовДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Перенос Объектов ремонта не выполнен по причине: %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецПопытки;
		
	Иначе
		
		// Разделим на небольшие транзакции для оптимизации.
		МаксЭлементовВТранзакции = 500;
		СчетчикЭлементовВТранзакции = 0;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		ИспользоватьФункциональныеМеста = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
		Если ИспользоватьФункциональныеМеста Тогда
			торо_РаботаСФункциональнымиМестами.Перетаскивание(МассивОР, РодительИерархии, СтруктураИерархии);
		КонецЕсли;
		
		Для Каждого ОбъектРемонта Из МассивОР Цикл
			Если Удаление Тогда
				УдалитьЗаписиИзРегистраИерархическихСтруктур(ОбъектРемонта, СтруктураИерархии);
			Иначе
				ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектРемонта, Справочники.торо_ОбъектыРемонта.ПустаяСсылка(), СтруктураИерархии);
			КонецЕсли;
			
			СчетчикЭлементовВТранзакции = СчетчикЭлементовВТранзакции + 1;
			Если СчетчикЭлементовВТранзакции = МаксЭлементовВТранзакции Тогда
				ЗафиксироватьТранзакцию();
				СчетчикЭлементовВТранзакции = 0;
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			КонецЕсли;
		КонецЦикла;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Из исходного соответствия готовит таблицу значений, где все родители и элементы, не являющиеся объектами ремонта
// (такое получается при переносе из автоматической иерархии), превращены в объекты ремонта.
Функция ПреобразоватьТаблицуРодителейВИерархииДляПереноса(ИсходнаяТаблицаРодителей, РодительИсточник) Экспорт
	
	ПреобразованнаяТаблица = Новый ТаблицаЗначений;
	ПреобразованнаяТаблица.Колонки.Добавить("Ключ", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ПреобразованнаяТаблица.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	
	КореньВетки = РодительИсточник;
	
	Для Каждого текОР Из ИсходнаяТаблицаРодителей Цикл
		НоваяСтрока = ПреобразованнаяТаблица.Добавить();
		
		Значение = Неопределено;
		Если КореньВетки <> текОР.Ключ И типЗнч(текОР.Значение) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			
			Если НЕ ЗначениеЗаполнено(текОР.Значение) ИЛИ ТипЗнч(текОР.Значение) = Тип("Строка") Тогда
				Значение = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
			Иначе
				Наименование = текОР.Значение.Наименование;
				Значение = НайтиИлиСоздатьГруппуОРПоНаименованию(Наименование);
			КонецЕсли;
			
		КонецЕсли;
		
		Ключ = Неопределено;
		Если типЗнч(текОР.Ключ) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			Наименование = текОР.Ключ.Наименование;
			Ключ = НайтиИлиСоздатьГруппуОРПоНаименованию(Наименование);
		КонецЕсли;
		
		НоваяСтрока.Значение = ?(ЗначениеЗаполнено(Значение), Значение, текОР.значение);
		НоваяСтрока.Ключ = ?(ЗначениеЗаполнено(Ключ), Ключ, текОР.Ключ);
		
		Если КореньВетки = текОР.Ключ Тогда
			КореньВетки = НоваяСтрока.Ключ;
		КонецЕсли;
	КонецЦикла;	
	
	РодительИсточник = КореньВетки;
	
	Возврат ПреобразованнаяТаблица;
	
КонецФункции

Функция НайтиИлиСоздатьГруппуОРПоНаименованию(Наименование)
	
	СсылкаНаГруппу = Справочники.торо_ОбъектыРемонта.НайтиПоНаименованию(Наименование,Истина);
	Если НЕ ЗначениеЗаполнено(СсылкаНаГруппу) Тогда
		Объект = Справочники.торо_ОбъектыРемонта.СоздатьГруппу();
		Объект.Наименование = Наименование;
		Объект.Записать();
		СсылкаНаГруппу = Объект.Ссылка;
	КонецЕсли;
	
	Возврат СсылкаНаГруппу;
	
КонецФункции

// Изменяет или удаляет запись в регистре сведений торо_ОбъектыРемонтаГруппы.
Процедура ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ОбъектРемонта, СтруктураИерархии, ОбъектГруппа) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектРемонта) И ТипЗнч(ОбъектРемонта) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ОбъектИерархии.Установить(ОбъектРемонта);
		НаборЗаписей.Отбор.СтруктураИерархии.Установить(СтруктураИерархии);
		
		НаборЗаписей.Прочитать();
		
		Если ОбъектГруппа = Истина Тогда
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей[0].ОбъектГруппа = Истина;
			Иначе
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ОбъектГруппа      = Истина;
				НоваяЗапись.ОбъектИерархии    = ОбъектРемонта;
				НоваяЗапись.СтруктураИерархии = СтруктураИерархии;
			КонецЕсли;
			
		Иначе
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет запись из регистра сведений торо_ПорядокОРПоИерархии.
Процедура УдалитьПорядокЭлементаИзРегистра(ОбъектИерархии, СтруктураИерархии)
	
	МенеджерЗаписи = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектРемонта     = ОбъектИерархии;
	МенеджерЗаписи.СтруктураИерархии  = СтруктураИерархии;
	
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

// Добавляет запись в регистр сведений торо_ИерархическиеСтруктурыОР.
Процедура ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектИерархии, РодительИерархии, СтруктураИерархии) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИерархии     = ОбъектИерархии;
	МенеджерЗаписи.СтруктураИерархии  = СтруктураИерархии;
	МенеджерЗаписи.РодительИерархии   = ?(ТипЗнч(РодительИерархии) = Тип("СправочникСсылка.торо_СтруктурыОР"), Неопределено, РодительИерархии);
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет запись из регистра сведений торо_ИерархическиеСтруктурыОР.
Процедура УдалитьЗаписиИзРегистраИерархическихСтруктур(ОбъектИерархии, СтруктураИерархии) 
	
	Если ТипЗнч(ОбъектИерархии) <> Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		
		МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СтруктураИерархии = СтруктураИерархии;
		МенеджерЗаписи.ОбъектИерархии = ОбъектИерархии;
		МенеджерЗаписи.Удалить();
				
	КонецЕсли;
	
КонецПроцедуры

// Создает в менеджере временных таблиц таблицу ВТ_Иерархия. 
// Только для неавтоматических иерархий.
Процедура СоздатьВременнуюТаблицуИерархии(МенеджерВТ, СтруктураПараметровИерархии, ПоляИндексирования = "РодительИерархии") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Иерархия
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Иерархия
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляИндексирования) Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	" + ПоляИндексирования;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
	Запрос.Выполнить();
	
КонецПроцедуры

// В менеджер временных таблиц добавляет временную таблицу ВТ_ОтборОРПоСтатусам,
// где содержатся только ОР по списку статусов.
Процедура СоздатьВременнуюТаблицуСОтборомПоСтатусу(МенеджерВТ, ОтборСтатусыВУчете, ИмяТаблицыОР)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	СтрЗаменить("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР
	|ПОМЕСТИТЬ ВТ_СтатусыОР
	|ИЗ
	|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ТабОР.ОбъектИерархии
	|				ИЗ
	|					ОР_ДвухУровней КАК ТабОР)) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабОР.ОбъектИерархии КАК ОбъектИерархии
	|ПОМЕСТИТЬ ВТ_ОтборОРПоСтатусам
	|ИЗ
	|	ОР_ДвухУровней КАК ТабОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыОР КАК ВТ_СтатусыОР
	|		ПО ТабОР.ОбъектИерархии = ВТ_СтатусыОР.ОбъектРемонта
	|ГДЕ
	|	ЕСТЬNULL(ВТ_СтатусыОР.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету)) В (&СписокСтатусов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИерархии", "ОР_ДвухУровней", ИмяТаблицыОР);
	
	Запрос.УстановитьПараметр("СписокСтатусов", ОтборСтатусыВУчете);
	Запрос.Выполнить();
	
КонецПроцедуры

// Вспомогательная функция для наложения отборов на запрос для дерева иерархии ОР.
Функция СформироватьСтрокуДополнительныхОтборовИУстановитьПараметры(ДополнительныеОтборы, ПутьКОбъектуРемонта, Запрос)
	
	ТекстДопОтбора = "";
	
	НастройкиВидовСравнения = Новый Соответствие;
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Равно, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " = ", Ложь, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Больше, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " > ", Ложь, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " >= ", Ложь, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВИерархии, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " В ИЕРАРХИИ ", Истина, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВСписке, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " В ", Истина, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " В ИЕРАРХИИ ", Истина, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Меньше, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " < ", Ложь, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " <= ", Ложь, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВИерархии, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " В ИЕРАРХИИ ", Истина, Истина));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВСписке, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " В ", Истина, Истина));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " В ИЕРАРХИИ ", Истина, Истина));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеПодобно, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " ПОДОБНО ", Ложь, Истина));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Подобно, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " ПОДОБНО ", Ложь, Ложь));
	НастройкиВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеРавно, 
			Новый Структура("КлючевоеСлово, НужныСкобки, НужноОтрицание", " <> ", Ложь, Ложь));
	
	Для каждого ЭлементСписка из ДополнительныеОтборы Цикл
		СтруктураОтбора = ЭлементСписка.Значение;
		
		ВидСравненияФакт = ВидСравненияКомпоновкиДанных.Равно;
		Если СтруктураОтбора.Свойство("ВидСравнения") И ЗначениеЗаполнено(СтруктураОтбора.ВидСравнения) Тогда
			ВидСравненияФакт = СтруктураОтбора.ВидСравнения;
		КонецЕсли;

		ПараметрыВидаСравнения = НастройкиВидовСравнения[ВидСравненияФакт];
		Если ПараметрыВидаСравнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = "ДопОтбор"+СтруктураОтбора.Ключ;
		Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.Значение);
		
		ТекстДопОтбора = ?(ТекстДопОтбора = "", "", ТекстДопОтбора + Символы.ПС + " И ")
			+ ?(ПараметрыВидаСравнения.НужноОтрицание, "НЕ ", "")
			+ ПутьКОбъектуРемонта + "." + СтруктураОтбора.Ключ 
			+ ПараметрыВидаСравнения.КлючевоеСлово
			+ ?(ПараметрыВидаСравнения.НужныСкобки, "(", "")
			+ "&" + ИмяПараметра
			+ ?(ПараметрыВидаСравнения.НужныСкобки, ")", "");
	КонецЦикла;
	
	Если ТекстДопОтбора = "" Тогда
		ТекстДопОтбора = "ИСТИНА";
	КонецЕсли;
	
	Возврат ТекстДопОтбора;
	
КонецФункции

// Вспомогательная процедура обновления картинок дерева.
Процедура ОбновитьКартинкиЭлементовДерева(СтрокиДерева, Рекурсивно = Ложь)
	
	Для каждого Строка Из СтрокиДерева Цикл
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта")
		  И (Не Строка.ПометкаУдаления) И ЗначениеЗаполнено(Строка.Ссылка.ТиповойОР) Тогда
			КартинкаТОР = Строка.Ссылка.ТиповойОР.ФайлКартинки;
			Если НЕ КартинкаТОР = Справочники.торо_ТиповыеОРПрисоединенныеФайлы.ПустаяСсылка() Тогда
				УИД = Строка.Ссылка.ТиповойОР.УникальныйИдентификатор();
				
				ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
				ПараметрыДанныхФайла.ИдентификаторФормы = УИД;
				
				АдресКартинки = РаботаСФайлами.ДанныеФайла(КартинкаТОР, ПараметрыДанныхФайла).СсылкаНаДвоичныеДанныеФайла;
				Строка.КартинкаОтображаемая = АдресКартинки; 
			Иначе
				Строка.КартинкаОтображаемая = Строка.Картинка;
			КонецЕсли;
		Иначе
			Строка.КартинкаОтображаемая = Строка.Картинка;
		КонецЕсли;
		
		Если Рекурсивно Тогда
			ОбновитьКартинкиЭлементовДерева(Строка.ПолучитьЭлементы(), Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращающая, является ли объект ремонта функциональным местом.
Функция ОбъектРемонтаЭтоФункциональноеМесто(ОбъектРемонта) Экспорт
	Если ТипЗнч(ОбъектРемонта) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И ОбъектРемонта.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Процедура сортирует таблицу значений по колонке с объектом ремонта согласно РС торо_ПорядокОРПоИерархии.
//
// Параметры:
//		ВходнаяТаблица - ТаблицаЗначений - таблица значений, которую необходимо отсортировать.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии, для которой вычисляется порядок. 
//		ИмяПоляОбъектИерархии - Строка - имя колонки входной таблицы значений, содержащее ссылки на справочник торо_ОбъектыРемонта.
//
Процедура СортироватьТаблицуСОбъектамиРемонтовСогласноПорядку(ВходнаяТаблица, СтруктураИерархии, ИмяКолонкиОбъектИерархии)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходнаяТаблица.*
	|ПОМЕСТИТЬ ВходнаяТаблица
	|ИЗ
	|	&ВходнаяТаблица КАК ВходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	&ИмяКолонкиОбъектИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
	|ПОМЕСТИТЬ втПорядокОбъектовРемонта
	|ИЗ
	|	РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
	|ГДЕ
	|	торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии
	|	И торо_ПорядокОРПоИерархии.ОбъектРемонта В
	|			(ВЫБРАТЬ
	|				&ИмяКолонкиОбъектИерархии
	|			ИЗ
	|				ВходнаяТаблица)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходнаяТаблица.*,
	|	ЕСТЬNULL(втПорядокОбъектовРемонта.РеквизитДопУпорядочиванияОР, 0) КАК Порядок
	|ИЗ
	|	ВходнаяТаблица КАК ВходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокОбъектовРемонта КАК втПорядокОбъектовРемонта
	|		ПО ВходнаяТаблица.&ИмяКолонкиОбъектИерархии = втПорядокОбъектовРемонта.ОбъектРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиОбъектИерархии", ИмяКолонкиОбъектИерархии);
	
	Запрос.УстановитьПараметр("ВходнаяТаблица", ВходнаяТаблица);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	
	ВходнаяТаблица = Запрос.Выполнить().Выгрузить();
	ВходнаяТаблица.Колонки.Удалить("Порядок");
	
КонецПроцедуры

// Функция добавляет в таблицу значений колонку "Верхний родитель"
//
// Параметры:
//		РезультатИерархия - ТаблицаЗначений - таблица значений, по которой выполняется поиск.
//		ТаблицаОР - ТаблицаЗначений - таблица значений, в которую добавляется колонка. 
//		
Функция ПолучитьРодителейВерхнегоУровня(РезультатИерархия, ТаблицаОР)
	
	ТаблицаОР.Колонки.Добавить("ВерхнийРодитель",Справочники.ТипВсеСсылки());
    РезультатИерархия.Индексы.Добавить("ОбъектИерархии");
	
	ТаблицаСоответствий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаОР.ВыгрузитьКолонку("РеквизитОР"),"Родитель");
	
	Для Каждого ОР Из ТаблицаОР Цикл
		ЭлементИерархии = ОР.РеквизитОР;
		Если РезультатИерархия.Найти(ЭлементИерархии,"ОбъектИерархии") = Неопределено Тогда
			
			Пока РезультатИерархия.Найти(ЭлементИерархии,"ОбъектИерархии") = Неопределено Цикл
				Если ТаблицаСоответствий.Получить(ЭлементИерархии) <> Неопределено Тогда
					ЭлементИерархии = ТаблицаСоответствий.Получить(ЭлементИерархии);
				Иначе
					ЭлементИерархии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементИерархии,"Родитель");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ОР.ВерхнийРодитель = ЭлементИерархии;
		
	КонецЦикла; 
		
	Возврат ТаблицаОР;
	
КонецФункции 	
  
#КонецОбласти
