

////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкаИнтеграцииЭлектронныхДокументов

// Вызывается при определении типов электронных документов, которые можно формировать или отражать в учете в конфигурации.
// Для добавления типа электронного документа в коллекцию необходимо использовать процедуру см. ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента.
//
// Параметры:
//  ИспользуемыеТипы - Соответствие - типы актуальных электронных документов.
//
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(ИспользуемыеТипы) Экспорт
	
КонецПроцедуры

// Предназначена для распределения объектов, к которым подключаются команды ЭДО, по группам.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО. Для каждого из ключей указывается массив полных имен 
//                    объектов метаданных, к которым подключаются команды ЭДО.
//    Исходящие    - Массив Из Строка - объекты для команд работы с исходящими документами.
//    Входящие     - Массив Из Строка - объекты для команд работы со входящими документами.
//    БезПодписи   - Массив Из Строка - объекты для команд выполнения ЭДО без подписи.
//    Интеркампани - Массив Из Строка - объекты для команд обмена между организациями в рамках одной базы.
//    Контрагенты  - Массив Из Строка - объекты для команд работы с контрагентами.
//    Организации  - Массив Из Строка - объекты для команд работы с организациями.
//    Договоры     - Массив Из Строка - объекты для команд работы с договорами.
//
// Пример:
//  СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваровУслуг");
//	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
//	
//	СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеТоваровУслуг");
//	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
//	
//	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПокупателя");
//	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
//	
//	СоставКомандЭДО.Интеркампани.Добавить(Документ.ПередачаТоваровМеждуОрганизациями);
//	
//	СоставКомандЭДО.Контрагенты.Добавить("Справочник.Контрагенты");
//	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
//	СоставКомандЭДО.Договоры.Добавить("Справочник.ДоговорыКонтрагентов");
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт

	СоставКомандЭДО.Исходящие.Добавить("Документ.торо_ЗаказПоставщику");

	СоставКомандЭДО.Входящие.Добавить("Документ.торо_ЗаказПоставщику");
		
	СоставКомандЭДО.БезПодписи.Добавить("Документ.торо_ЗаказПоставщику");
	
	СоставКомандЭДО.Контрагенты.Добавить("Справочник.Контрагенты");
	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
	СоставКомандЭДО.Договоры.Добавить("Справочник.ДоговорыКонтрагентов");
	
КонецПроцедуры

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования аналитики "Партнеры".
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	ИспользуетсяСправочникПартнеры = Ложь;	
КонецПроцедуры

// Переопределяет разрешение использовать механизм прямого обмена между организациями (интеркампани).
//
// Параметры:
//  Отказ - Булево - Истина, если использование обмена между организациями запрещено;
//    Ложь - в противном случае;
//    Значение по умолчанию - Ложь;
//
// Пример:
//	Если <Выражение> Тогда
//		Отказ = Истина;
//	КонецЕсли;
//
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	Отказ = Истина;	
КонецПроцедуры

// Определяет возможность использования прямого обмена в конфигурации.
//
// Параметры:
//  Использовать - Булево - признак использования прямого обмена в конфигурации.
//                          Значение по умолчанию - Ложь.
//
Процедура ИспользоватьПрямойОбмен(Использовать) Экспорт
	Использовать = Истина;	
КонецПроцедуры

// Определяет состояние использования конфигурацией внутренних электронных документов.
//
// Параметры:
//  Использовать - Булево - признак использования внутреннего ЭДО в конфигурации.
//                          Значение по умолчанию - Истина.
//
//@skip-warning
Процедура РазрешеноИспользоватьВнутреннийЭДО(Использовать) Экспорт
	Использовать = Ложь;	
КонецПроцедуры

// Определяет, включать ли функциональную опцию "Использовать внутренние документы" при обновлении.
//
// Параметры:
//   Включать - Булево - если Истина, функциональная опция будет включена.
//
// Пример:
//  Включать = Истина;
//
Процедура ВключатьФункциональнуюОпциюИспользоватьВнутренниеДокументыЭДО(Включать) Экспорт
	Включать = Ложь;	
КонецПроцедуры

// Определяет список документов конфигурации (являющихся основаниями электронных документов),
// в модулях форм которых в обработчике события
// ПослеЗаписи размещен вызов процедуры ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента, показывающей
// список накопленных в процессе записи ошибок в форме, которая предоставляет инструменты их исправления.
// Если в модуле формы документа в обработчике события ПослеЗаписи не размещен вызов процедуры
// ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента, ошибки будут выведены пользователю стандартным способом.
//
// Параметры:
//   СписокДокументов - Массив Из ОбъектМетаданных - объекты метаданных, в модуле форм которых в обработчике
//                               события ПослеЗаписи размещен вызов см. ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента.
//
// Пример:
//  СписокДокументов.Добавить(Метаданные.Документы.ЗаказПокупателя);
//
Процедура ПриОпределенииДокументовСПоддержкойДиагностикиОшибок(СписокДокументов) Экспорт
	СписокДокументов.Добавить(Метаданные.Документы.торо_ЗаказПоставщику);	
КонецПроцедуры

// Определяет список идентификаторов печатных форм документов,
// исключаемых из списка доступных для формирования документов из печатных форм.
//
// Параметры:
//   СписокИдентификаторов - Массив Из Строка - идентификаторы печатных форм.
//
//@skip-warning
Процедура ПриОпределенииПечатныхФормЗапрещенныхДляФормированияДокумента(СписокИдентификаторов) Экспорт
	
КонецПроцедуры

// Определяет, включать ли прием информационной базой уведомлений от сервиса ЭДО.
// В случае, если использование включено, необходимо обеспечить доступность HTTP-сервиса /hs/events/newdocs.
// В частности, при публикации прикладного решения в модели сервиса необходимо опубликовать HTTP-сервис "ЭДО" с basic-авторизацией.
// Логин и пароль пользователя указаны в методе см. ОповещенияОСобытияхЭДО.СоздатьСлужебногоПользователяОповещенийЭДО .
//
// Параметры:
//  Используется - Булево - признак использования уведомлений в прикладном решении
//
Процедура ПриПроверкеИспользованияУведомлений(Используется) Экспорт
	Используется = Истина
КонецПроцедуры

// Определяет необходимость вывода в интерфейсах настроек отправки электронных документов опций формирования первичных /
// корректировочных документов и счетов-фактур в составе единого документа (т.е. использования УПД / УКД).
// 
// Параметры:
// 	Использовать - Булево - Выходной параметр. Необходимо присвоить Истина, в случае, если прикладное решение
// 	                        самостоятельно определяет для каждого экземпляра учетного документа необходимость формирования 
// 	                        универсальных документов (УПД / УКД) - см. ЗаполнитьПараметрыЭДПоИсточнику, либо не использует их.
//
//@skip-warning
Процедура ИспользованиеНастройкиФормированияУниверсальныхДокументов(Использовать = Истина) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеОбъектовУчетаОбъектамПодсистемы

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - Соответствие - соответствие библиотечных и прикладных перечислений. Рекомендуется
//                             определить соответствие для следующих перечислений подсистемы:
//                               * ЮрФизЛицо
//                               * ВариантыОплатыКлиентом
//                               * ВариантыОплатыПоставщику
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС",       "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮридическоеФизическоеЛицо");
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка - имя прикладного перечисления, заданное в см. ПолучитьСоответствиеПеречислений.
//  ПредставлениеПеречисления - Строка - идентификатор значения перечисления в библиотеке. Возможные значения по видам перечислений:
//    - ЮрФизЛицо - "ЮрЛицо", "ФизЛицо"
//    - ВариантыОплатыКлиентом - "Аванс (до обеспечения)", "Предоплата (до отгрузки)", "Кредит (после отгрузки)", ""
//    - ВариантыОплатыПоставщику - "Аванс (до подтверждения)", "Предоплата (до поступления)", "Кредит (после поступления)"
//  НайденноеЗначение - ПеречислениеСсылка - в параметр необходимо поместить найденное значение прикладного перечисления.
//                                           Выходной параметр.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт

	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Если ИмяПеречисления = "ЮридическоеФизическоеЛицо" Тогда
		Если ПредставлениеПеречисления = "ЮрЛицо" Тогда  
			НайденноеЗначение = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ИначеЕсли ПредставлениеПеречисления = "ФизЛицо" Тогда
			НайденноеЗначение = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			НайденноеЗначение = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель;
		КонецЕсли;
	Иначе
		Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
			Если СтрНайти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
				ИЛИ СтрНайти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
				
				НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемых в подсистеме)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС. Возможные значения ставок в подсистеме:
//                                   * "0"
//                                   * "10"
//                                   * "18"
//                                   * "10/110"
//                                   * "18/118"
//                                   * "20"
//                                   * "20/120"
//                                   * "без НДС"
//                                   * "НДС исчисляется налоговым агентом"
//
// Пример:
//   Соответствие.Вставить("0",                                  Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",                                 Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",                                 Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",                             Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",                             Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("20",                                 Перечисления.СтавкиНДС.НДС20);
//   Соответствие.Вставить("20/120",                             Перечисления.СтавкиНДС.НДС20_120);
//   Соответствие.Вставить("без НДС",                            Перечисления.СтавкиНДС.БезНДС);
//   Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом"");
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт

	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом");
	
КонецПроцедуры

// Заполняет соответствие исходящих типов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеТиповЭлектронныхДокументовДокументамИБ - Соответствие - перечень типов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - см. ОбменСКонтрагентами.ТипыДокументов - тип электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хозяйственной операции).
//
Процедура СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ(СоответствиеТиповЭлектронныхДокументовДокументамИБ) Экспорт 

	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();

КонецПроцедуры

// Задает соответствие типов и представлений объектов учета по типу электронного документа.
//
// Параметры:
//  ТипДокумента          - см. ОбменСКонтрагентами.ТипыДокументов   - тип электронного документа.
//  ОписанияОбъектовУчета - СписокЗначений - список ссылок на объекты учета. В качестве ключа задается пустая ссылка
//                          объекта, в качестве представления представление объекта учета, которое может быть показано пользователю.
//
Процедура СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипДокумента, ОписанияОбъектовУчета) Экспорт

	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипДокумента = ТипыДокументов.ТоварнаяНакладная
		ИЛИ ТипДокумента = ТипыДокументов.АктВыполненныхРабот
		ИЛИ ТипДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(),
			Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
		ОписанияОбъектовУчета.Добавить(Документы.торо_ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.торо_ЗаказПоставщику.Представление());	
	КонецЕсли;

КонецПроцедуры

// Выполняет получение соответствия ссылки на контрагента по связанному объекту.
// Используется для получения контрагента в случае если его функцию может выполнять другой объект конфигурации.
// Например при использовании опции прикладного решения ИспользоватьПартнеровКакКонтрагентов
// 
// Параметры:
//  СсылкиНаОбъекты - Массив Из ЛюбаяСсылка - ссылки на объекты.
//  СоответствиеКонтрагентов - Соответствие - соответствие объектов (возвращаемый параметр):
//   * Ключ - ЛюбаяСсылка - ссылка на объект.
//   * Значение - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента.
//
Процедура СвязанныеКонтрагенты(СсылкиНаОбъекты, СоответствиеКонтрагентов) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормированияДокументов

// Предназначена для получения параметров ЭДО по ссылке на объект учета.
// По одному источнику может быть несколько параметров, для каждого нужно добавить строку в таблицу значений.
//
// Параметры:
//  Источник                       - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭлектронногоДокумента - ТаблицаЗначений - параметры источника, необходимые для определения настроек обмена электронными документами: 
//    * Тип                - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.ТипыДокументов. Используются все ключи, кроме УПД, УКД. Обязательный.
//                           Необходимость формирования УПД, УКД определяется на основании нескольких критериев
//                           (указанный тип, вариант формирования универсальных документов, настройки отправки
//                           электронных документов). 
//    * ФормированиеУниверсальногоДокумента - Произвольный - значение элемента структуры, возвращаемой
//                           см. ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов. Обязательный при указании типов:
//                            - ТоварнаяНакладная
//                            - АктВыполненныхРабот
//                            - АктНаПередачуПрав
//                            - СоглашениеОбИзмененииСтоимости
//                            - СчетФактура
//                            - КорректировочныйСчетФактура
//    * Направление        - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.НаправленияДокументов(). Обязательный.
//    * Организация        - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент         - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭлектронногоДокумента) Экспорт

	ТипыДокументов        = ОбменСКонтрагентами.ТипыДокументов();
	НаправленияДокументов = ОбменСКонтрагентами.НаправленияДокументов();
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);

	Если ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Реквизиты = "Организация, Контрагент, Договор";
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		СтрокаПараметров = ПараметрыЭлектронногоДокумента.Добавить();
		СтрокаПараметров.Тип 				= ТипыДокументов.ТоварнаяНакладная; 
		СтрокаПараметров.Направление        = НаправленияДокументов.Входящий;
		СтрокаПараметров.Организация        = ЗначенияРеквизитов.Организация;
		СтрокаПараметров.Контрагент         = ЗначенияРеквизитов.Контрагент;
		СтрокаПараметров.ДоговорКонтрагента = ЗначенияРеквизитов.Договор;
		
						
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.торо_ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.торо_ЗаказПоставщику") Тогда
		
		Реквизиты = "Организация, Контрагент, Договор, ДатаПоставки";
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		СтрокаПараметров = ПараметрыЭлектронногоДокумента.Добавить();
		
		СтрокаПараметров.Тип =  ТипыДокументов.ЗаказТовара;
		СтрокаПараметров.Направление = НаправленияДокументов.Исходящий;
		СтрокаПараметров.Организация = Источник.Организация;
		СтрокаПараметров.Контрагент  = Источник.Контрагент;
		СтрокаПараметров.ДоговорКонтрагента = ЗначенияРеквизитов.Договор;
		
	
	КонецЕсли;

КонецПроцедуры

// Используется для получения возможных вариантов заполнения некоторых полей формализованных форматов.
//
// Параметры:
//  ВариантыЗаполненияПолей	 - Структура - описание полей и вариантов их заполнения. В качестве ключа задается идентификатор поля,
//     а в качестве значения - список значений возможных вариантов заполнения.
//     Возможные идентификаторы:
//       * УПД_ТоварКод - на входе содержит список значений: {"Код", "Внутренний код"}; {"Штрихкод", "Штрихкод"}
//       * ПередачаТоваров_ТоварКод - на входе содержит список значений: {"Код", "Внутренний код"}; {"Штрихкод", "Штрихкод"}
//
Процедура ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(ВариантыЗаполненияПолей) Экспорт

	ВариантыЗаполненияПолей.УПД_ТоварКод.Добавить("Артикул", НСтр("ru = 'Артикул'"));
	ВариантыЗаполненияПолей.ПередачаТоваров_ТоварКод.Добавить("Артикул", НСтр("ru = 'Артикул'"));

КонецПроцедуры

// Получает запросы, описывающие документы-источники данных для формирования электронного документа указанного типа.
// Запросы используются для указания пользователем формулы заполнения значений доп. полей по данным источника.
// Запрос должен включать в себя отбор по параметру Ссылка.
//
// Параметры:
//  Параметры - Структура - параметры электронного документа, для которого производится настройка.
//     * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов - тип электронного документа. Могут передаваться
//                                  следующие типы документов:
//                                  АктВыполненныхРабот, ТоварнаяНакладная, СчетФактура, КорректировочныйСчетФактура,
//                                  СоглашениеОбИзмененииСтоимости, АктНаПередачуПрав, УПД, УКД.
//  ТекстЗапроса - Строка - текст запроса, который должен быть использован в конструкторе доп. полей шапки.
//
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеИОтражениеВУчетеДокументов

#Область УКД2020

// Подготавливает данные для электронного документа УКД (информация продавца) по приказу ФНС № ММВ-7-15/???@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - тип документа, который нужно сформировать. Возможные значения представлены следующими 
//                                   свойствами результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - СоглашениеОбИзмененииСтоимости, 
//                                    - КорректировочныйСчетФактура, 
//                                    - УКД,
//                                    - КорректировкаСведенийОРеализацииКомиссионером,
//                                    - КорректировкаСведенийОЗакупкеКомиссионером.
//   * Отправитель - ОпределяемыйТип.Организация - отправитель электронного документа.
//   * Получатель - ОпределяемыйТип.КонтрагентБЭД - получатель электронного документа.
//   * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор с получателем электронного документа.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного см. ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "УКД_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца_2020. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУКД2020_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа УКД (информация покупателя) по приказу ФНС № ММВ-7-15/???@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца_УКД_ИнформацияПокупателя_2020.
//                            Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУКД2020_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
КонецПроцедуры

// Поиск и создание учетных документов при отражении в учете документа УКД (информация продавца). Вызывается для УКД всех
// возможных функций (КСЧФ, КСЧФДИС, ДИС). Приказ по формату в стадии согласования.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца_2020
//  СсылкиНаВладельцев	 - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на документы учета, если они уже
//                         прикреплены к электронному документу.
//  СпособОбработки		 - Структура - способы сохранения данных в информационной базе, выбранные пользователем. 
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьУКД_2020(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки  = Неопределено, ОписаниеОшибки = "") Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УПД_2019

// Подготавливает данные для электронного документа УПД (информация продавца) по приказу ФНС № ММВ-7-15/820@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - тип документа, который нужно сформировать. Возможные значения представлены следующими 
//                                   свойствами результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - АктВыполненныхРабот, 
//                                    - АктНаПередачуПрав, 
//                                    - ТоварнаяНакладная, 
//                                    - СчетФактура, 
//                                    - УПД,
//                                    - СведенияОРеализацииКомиссионером,
//                                    - СведенияОЗакупкеКомиссионером.
//   * Отправитель - ОпределяемыйТип.Организация - отправитель электронного документа.
//   * Получатель - ОпределяемыйТип.КонтрагентБЭД - получатель электронного документа.
//   * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор с получателем электронного документа.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного в ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "УПД_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПродавца_2019. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа УПД (информация покупателя) по приказу ФНС № ММВ-7-15/820@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПокупателя_2019. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
КонецПроцедуры

// Поиск и создание учетных документов при отражении в учете документа УПД (информация продавца). Вызывается для УПД всех
// возможных функций (СЧФ, СЧФДОП, ДОП). Формат по приказу ММВ-7-15/820@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПродавца_2019
//  СсылкиНаВладельцев	 - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на документы учета, если они уже
//                         прикреплены к электронному документу.
//  СпособОбработки		 - Структура - способы сохранения данных в информационной базе, выбранные пользователем. 
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт

	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	СпособОбработкиПервичногоДокумента = "";
	СпособОбработкиСчетаФактуры = "";
	
	Если ЗначениеЗаполнено(СпособОбработки) И ТипЗнч(СпособОбработки) = Тип("Структура") Тогда
		
		Если СпособОбработки.Свойство("ПервичныйДокумент") Тогда
			СпособОбработкиПервичногоДокумента = СпособОбработки.ПервичныйДокумент;
		КонецЕсли;
		
		Если СпособОбработки.Свойство("СчетФактура") Тогда
			СпособОбработкиСчетаФактуры = СпособОбработки.СчетФактура;
		КонецЕсли;
	Иначе
		СпособОбработкиПервичногоДокумента = СпособОбработки;
		СпособОбработкиСчетаФактуры = СпособОбработки;		
	КонецЕсли;
	
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	ДокументыУчета = Новый Массив;
	
	Если ФункцияУПД = "ДОП" Или ФункцияУПД = "СЧФДОП" Тогда
		НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработкиПервичногоДокумента, ОписаниеОшибки);
		ДокументыУчета.Добавить(ПервичныйДокумент);
	ИначеЕсли ФункцияУПД = "СвЗК" Или ФункцияУПД = "СвИСЗК" Тогда
		НайтиСоздатьУПД0Закупка_2019(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработкиПервичногоДокумента, ОписаниеОшибки);
		ДокументыУчета.Добавить(ПервичныйДокумент);
	КонецЕсли;
	
	СсылкиНаВладельцев = ДокументыУчета;
КонецПроцедуры

#КонецОбласти

#Область УПД

// Подготавливает данные для электронного документа УПД (информация покупателя) по приказу ФНС № ММВ-7-15/155@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПокупателя_2019. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУПД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
КонецПроцедуры

// Поиск и создание учетных документов при отражении в учете документа УПД (информация продавца). Вызывается для УПД всех
// возможных функций (СЧФ, СЧФДОП, ДОП). Формат по приказу ММВ-7-15/155@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПродавца_5_01
//  СсылкиНаВладельцев	 - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на документы учета, если они уже
//                         прикреплены к электронному документу.
//  СпособОбработки		 - Структура - способы сохранения данных в информационной базе, выбранные пользователем. 
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УКД

// Подготавливает данные для электронного документа УКД (информация продавца) по приказу ФНС № ММВ-7-15/189@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - тип документа, который нужно сформировать. Возможные значения представлены следующими 
//                                   свойствами результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                   - СоглашениеОбИзмененииСтоимости
//                                   - УКД.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного в ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "УКД_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУКД_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт 
	
КонецПроцедуры

// Подготавливает данные для электронного документа УКД (информация покупателя) по приказу ФНС № ММВ-7-15/189@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания для электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПокупателя. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУКД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
КонецПроцедуры

// Поиск и создание учетных документов при отражении в учете документа УКД (информация продавца). Вызывается для УКД всех
// возможных функций (КСЧФ, КСЧФДИС, ДИС). Формат по приказу ММВ-7-15/189@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца
//  СсылкиНаВладельцев	 - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на документы учета, если они уже
//                         прикреплены к электронному документу.
//  СпособОбработки		 - Структура - способы сохранения данных в информационной базе, выбранные пользователем. 
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	СпособОбработки  = Неопределено, ОписаниеОшибки = "") Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаТоваров

// Подготавливает данные для электронного документа Передача товаров (информация продавца). Формат по приказу ММВ-7-10/551@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - ожидаемый тип документа. Доступные значения представлены следующими свойствами
//                                   результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                   - ТоварнаяНакладная.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного в ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "ПередачаТоваров_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Продавец. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа Передача товаров (информация покупателя). Формат по приказу ММВ-7-10/551@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Покупатель. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт

	ДатаПолученияТоваров = Дата(1, 1, 1);
	СоставительДокумента = "-";
	
	Поступление = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Поступление = Основание;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Дата КАК Дата,
	|	ПоступлениеТоваровУслуг.Организация.Наименование КАК ОрганизацияНаименованиеПолное,
	|	ПоступлениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПоступлениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Поступление);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ДатаПолученияТоваров = Выборка.Дата;

	СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП), СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
		Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП), СтрШаблон(НСтр(
		"ru = '%1, ИНН %2'"), Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СоставительДокументаНаименование", СоставительДокумента);

	Если ЗначениеЗаполнено(ДатаПолученияТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "ДатаПолученияГруза", ДатаПолученияТоваров);
	КонецЕсли;

КонецПроцедуры

// Поиск и создание учетного документа при отражении в учете документа Передача товаров (информация продавца).
// Формат по приказу ММВ-7-10/551@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Продавец.
//  СсылкаНаВладельца	 - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ учета, если он уже
//                         прикреплен к электронному документу.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе, выбранный пользователем. Передается 
//                         значение элемента списка значений, заданного в см. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаРезультатовРабот

// Подготавливает данные для электронного документа Передачи результатов работ (информация продавца) по приказу ФНС № ММВ-7-10/552@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - ожидаемый тип документа. Доступные значения представлены следующими свойствами
//                                   результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - АктВыполненныхРабот.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.Акт501_Исполнитель. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа Передачи услуг (информация покупателя) по приказу ФНС № ММВ-7-10/552@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.Акт501_Заказчик. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	ДатаПолученияТоваров = Дата(1, 1, 1);
	СодержаниеОперации   = "-";
	СоставительДокумента = "-";
	
	Поступление = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Поступление = Основание;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Дата КАК Дата,
	|	ПоступлениеТоваровУслуг.Организация.Наименование КАК ОрганизацияНаименованиеПолное,
	|	ПоступлениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПоступлениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Поступление);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ДатаПолученияТоваров = Выборка.Дата;

	СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП), СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
		Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП), СтрШаблон(НСтр(
		"ru = '%1, ИНН %2'"), Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));

	Претензия = НСтр("ru = 'Результаты работ (оказанных услуг) приняты без претензий'");

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СоставительДокументаНаименование", СоставительДокумента);

	Если ЗначениеЗаполнено(ДатаПолученияТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "СведенияПоВыполнениюУслуг.ДатаЗаказа", ДатаПолученияТоваров);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СведенияПоВыполнениюУслуг.Претензия", Претензия);
	
КонецПроцедуры

// Поиск и создание учетного документа при отражении в учете документа Передача результатов работ (информация продавца). 
// Формат по приказу ММВ-7-10/552@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.Акт501_Исполнитель.
//  СсылкаНаВладельца	 - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ учета, если он уже
//                         прикреплен к электронному документу.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе, выбранный пользователем. Передается 
//                         значение элемента списка значений, заданного в см. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область АктОРасхождениях

// Подготавливает данные для электронного документа вида "Акт о расхождениях".
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - ожидаемый вид документа. Доступные значения представлены следующими свойствами
//                                   результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - АктОРасхождениях.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного в ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "АктОРасхождениях_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.АктОРасхождениях_2019. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
КонецПроцедуры

// Поиск и создание учетного документа при отражении в учете документа Акт о расхождениях (информация покупателя).
// Формат по приказу ММВ-7-15/423@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.АктОРасхождениях_2019.
//  ДокументУчета	     - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ учета, если он уже
//                         прикреплен к электронному документу.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе, выбранный пользователем. Передается 
//                         значение элемента списка значений, заданного в см. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоДанных, ДокументУчета = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область CML_Форматы

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.Организация - ссылка на организацию, реквизиты которой нужно сформировать.
//  Данные         - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                    см. Обработка.ОбменСКонтрагентами.Макет.РеквизитыОрганизации. Выходной параметр.
//  Отказ          - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                            После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                            нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, Данные, Отказ) Экспорт

	СведенияОбОрганизации = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект, СведенияОбОрганизации);
	
	ЗаполнитьДанныеУчастника(Данные, СведенияОбОрганизации, "Организация", Истина);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Наименование", "Реквизиты " + СсылкаНаОбъект.Наименование);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация    - ОпределяемыйТип.Организация - ссылка на организацию
//  ТоварыКаталога - Произвольный - список товаров в виде, возвращенном после выполнения метода
//                                  см. ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуПодбораТоваров.
//  ДеревоДанных   - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                    см. Обработка.ОбменСКонтрагентами.Макет.КаталогТоваров. Выходной параметр.
//  Отказ          - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТоварыКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация, СведенияОбОрганизации);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", Истина);
	
	ТоварыКаталога.Колонки.Добавить("Сопоставление");
	
	ЕстьКолонкаШтрихкодыНоменклатуры = ТоварыКаталога.Колонки.Найти("ШтрихкодыНоменклатуры") <> Неопределено;
	ЕстьКолонкаШтрихкодКомбинации    = ТоварыКаталога.Колонки.Найти("ШтрихкодКомбинации") <> Неопределено;
	
	Для Каждого СтрокаТовара Из ТоварыКаталога Цикл
		
		Сопоставление = Новый Структура;
		Сопоставление.Вставить("Наименование",        СтрокаТовара.Наименование);
		Сопоставление.Вставить("Характеристика",      СтрокаТовара.ХарактеристикаНаименование);
		Сопоставление.Вставить("ЕдиницаИзмерения",    СтрокаТовара.БазоваяЕдиницаНаименование);
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", СтрокаТовара.БазоваяЕдиницаКод);
		Сопоставление.Вставить("Артикул",             СтрокаТовара.Артикул);
		Сопоставление.Вставить("СтавкаНДС",           СтрокаТовара.СтавкаНДС);
		Если ЕстьКолонкаШтрихкодКомбинации Тогда
			Сопоставление.Вставить("ШтрихкодКомбинации",  СтрокаТовара.ШтрихкодКомбинации);
		КонецЕсли;
		Если ЕстьКолонкаШтрихкодыНоменклатуры Тогда
			Сопоставление.Вставить("ШтрихкодыНоменклатуры", СтрокаТовара.ШтрихкодыНоменклатуры);
		КонецЕсли;
		Сопоставление.Вставить("НоменклатураИБ",      СтрокаТовара.Номенклатура);
		Сопоставление.Вставить("ХарактеристикаИБ",    СтрокаТовара.Характеристика);
		Сопоставление.Вставить("УпаковкаИБ",          СтрокаТовара.БазоваяЕдиницаСсылка);
		СтрокаТовара.Сопоставление = Сопоставление;
		
	КонецЦикла;
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТоварыКаталога);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТоварыКаталога, "Товары");

КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ПрайсЛист. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.СчетНаОплату. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ЗаказТовара. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ОтветНаЗаказ. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ОтчетКомиссионераОПродажах. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ОтчетКомиссионераОСписании. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объект учета.
//
// Параметры:
//  СтрокаДляЗагрузки - СтрокаДереваЗначений - строка дерева, описывающая данные электронного документа. Реквизиты
//                                             документа содержатся в подчиненных строках. Сама строка обладает следующими свойствами:
//    * ВидЭД - см. ОбменСКонтрагентами.ТипыДокументов - используется для определения типа пришедшего документа.
//  ДеревоРазбора     - ДеревоЗначений - дерево с найденными ссылками на учетные сущности.
//  ПараметрыОбработки - Структура - дополнительные параметры для обработки объекта.
//    * СсылкаНаВладельца - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - владелец электронного документа (передается 
//    	                                                                     при перезаполнении уже существующего документа учета).
//    * Записывать        - Булево - если Истина, то объект должен быть записан. По умолчанию Истина.
//    * СпособОбработки   - Строка - способ сохранения данных в информационной базе.
//      См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД,
//      См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//	ДополнительныеДанные - Структура - Дополнительные данные для отражения в учете. Могут передаваться другими подсистемами
//	                                   из состава библиотеки. Состав данных должен быть описан в документации соответствующей подсистемы.
//  НайденныйОбъект - Произвольный - созданный объект.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки = Неопределено,
	ДополнительныеДанные, НайденныйОбъект = Неопределено, ОписаниеОшибки) Экспорт
	

	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ТоварнаяНакладная
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.АктНаПередачуПрав
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, 
			ПараметрыОбработки.СсылкаНаВладельца, ПараметрыОбработки.Записывать, ПараметрыОбработки.СпособОбработки);
				
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.РеквизитыОрганизации Тогда
		
		НайденныйОбъект = НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца)
				
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ОтветНаЗаказ Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца,
			ПараметрыОбработки.Записывать);
					
	КонецЕсли;

КонецПроцедуры

// Создает элементы справочников по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - СтрокаДереваЗначений - строка дерева, описывающая данные объекта электронного документа. Реквизиты
//                                         документа содержатся в подчиненных строках. Состав реквизитов зависит от типа
//                                         объекта. См. возможные варианты в описаниях деревьев документов CML в макетах обработки
//                                         см. Обработка.ОбменСКонтрагентами. Также строка содержит обязательные свойства:
//    * ОписаниеТипа - Строка - имя типа объекта
//  ДеревоРазбора     - ДеревоЗначений - дерево с найденными ссылками на учетные сущности.
//  НовыйЭлемент - СправочникСсылка - в этот параметр необходимо вернуть ссылку на созданный элемент справочника.
//
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
КонецПроцедуры

// Заполняет таблицу порядка создания типов объектов при загрузке электронных документов формата CML.
// Позволяет переопределить порядок создания типов объектов в дереве. Это может быть необходимо, когда одни типы
// зависимы от других, например, номенклатура поставщика, как правило, зависима от номенклатуры. Используется при
// заполнении в дереве электронного документа ссылок на объекты информационной базы.
//
// Параметры:
//  Таблица	 - ТаблицаЗначений - содержит колонки:
//    * ТипОбъекта - Строка - строковый идентификатор библиотечного типа. Возможные значения: БанковскиеСчетаКонтрагентов, НоменклатураКонтрагентов.
//    * Порядок - Число - порядок создания типа в дереве (нумеруется с 1).
//
//@skip-warning
Процедура ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(Таблица) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Интеркампани

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоЭД - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                              см. Обработка.ОбменСКонтрагентами.Макет.ПередачаВозвратТоваровМеждуОрганизациями. Выходной параметр.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, ДеревоЭД, Отказ) Экспорт
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоЭД - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                              см. Обработка.ОбменСКонтрагентами.Макет.ПередачаВозвратТоваровМеждуОрганизациями. Выходной параметр.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, ДеревоЭД, Отказ) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область ЗапросКоммерческихПредложений

// Подготавливает данные для формирования исходящего электронного документа по Запросу коммерческих предложений.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание электронного документа.
//  ДеревоДанных    - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ЗапросКоммерческихПредложений.
//                                     Если используется подсистема
//                                     ЭлектронноеВзаимодействие.КоммерческиеПредложения, то обработчик не вызывается 
//                                     (см. КоммерческиеПредложенияПереопределяемый.ЗаполнитьДанныеПоЗапросуКоммерческихПредложений).
//                                     Выходной параметр.
//  Отказ           - Булево         - Если нужно отказаться от создания электронного документа, необходимо установить
//                                     значение в Истина. После этого дальнейшие действия по формированию документа 
//                                     производиться не будут, поэтому нужно сформировать сообщения пользователю при
//                                     необходимости самостоятельно.
//
//@skip-warning
Процедура ЗаполнитьДанныеПоЗапросуКоммерческихПредложений(Знач СсылкаНаОбъект, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Создание нового или перезаполнение существующего прикладного документа Запрос коммерческих предложений от клиента
// по данным входящего электронного документа.
// Если существует подсистема КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента, обработчик
// не вызывается.
//
// Параметры:
//  ДанныеВходящегоДокумента - ДеревоЗначений - данные электронного документа, см. Обработка.ОбменСКонтрагентами.Макет.ЗапросКоммерческихПредложений.
//  УчетныйДокумент          - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на учетный документ Запрос коммерческих предложений от клиента.
//  СпособОбработки          - Строка - Способ сохранения данных в информационной базе.
//    См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД,
//    См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
//@skip-warning
Процедура НайтиСоздатьЗапросКоммерческихПредложений(Знач ДанныеВходящегоДокумента, УчетныйДокумент, СпособОбработки, ОписаниеОшибки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область КоммерческиеПредложения

// Подготавливает данные для формирования исходящего электронного документа по Коммерческому предложению.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание электронного документа.
//  ДеревоДанных    - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.КоммерческоеПредложение.
//                                     Если используется подсистема
//                                     ЭлектронноеВзаимодействие.КоммерческиеПредложения, то обработчик не вызывается 
//                                     (см. КоммерческиеПредложенияПереопределяемый.ЗаполнитьДанныеПоКоммерческомуПредложению).
//                                     Выходной параметр.
//  Отказ           - Булево         - Если нужно отказаться от создания электронного документа, необходимо установить
//                                     значение в Истина. После этого дальнейшие действия по формированию документа 
//                                     производиться не будут, поэтому нужно сформировать сообщения пользователю при
//                                     необходимости самостоятельно.
//
//@skip-warning
Процедура ЗаполнитьДанныеПоКоммерческомуПредложению(Знач СсылкаНаОбъект, ДеревоДанных,
		Отказ) Экспорт
	
КонецПроцедуры

// Создание нового или перезаполнение существующего прикладного документа Коммерческое предложение поставщика
// по данным входящего электронного документа.
// Если существует подсистема КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика, обработчик
// не вызывается.
//
// Параметры:
//  ДанныеВходящегоДокумента - ДеревоЗначений - данные электронного документа, см. Обработка.ОбменСКонтрагентами.Макет.КоммерческоеПредложение.
//  УчетныйДокумент          - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Ссылка на учетный документ Коммерческое предложение поставщика.
//  СпособОбработки          - Строка - Способ сохранения данных в информационной базе.
//    См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД,
//    См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
//@skip-warning
Процедура НайтиСоздатьКоммерческоеПредложение(Знач ДанныеВходящегоДокумента, УчетныйДокумент, СпособОбработки, ОписаниеОшибки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкаОтраженияВУчете

// Возвращает идентификаторы способов отражения в учете, доступных при загрузке электронного документа.
//
// Параметры:
//  ТипДокумента   - см. ОбменСКонтрагентами.ТипыДокументов   - тип электронного документа.
//  СпособыОтраженияВУчете - СписокЗначений - список способов отражения в учете. В качестве значения задается строковый
//                           идентификатор, который будет передан в переопределяемый методы создания учетных документов
//                           по данным электронных. В качестве представления - представление способа отражения, которое
//                           может быть отображено пользователю.
//                           Выходной параметр.
//
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
		
		СпособыОтраженияВУчете.Добавить("торо_ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
		
		СпособыОтраженияВУчете.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Поступление товаров и услуг'"), Истина);

	КонецЕсли;
		
КонецПроцедуры

// Переопределяет имя объекта метаданных для способа обработки входящего электронного документа, в случае, если оно не
// совпадает с именем способа обработки.
//
// Параметры:
//  СпособОтраженияВУчете - Строка - один из способов отражения в учете входящего документа, заданный в переопределении. 
//                          см. СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
//  ИмяДокумента - Строка - в параметр необходимо поместить имя объекта метаданных, соответствующее переданному способу обработки.
//                          Выходной параметр.
//
Процедура ИмяОбъектаМетаданныхПоСпособуОтраженияВУчете(СпособОтраженияВУчете, ИмяДокумента) Экспорт 
	
	Если СпособОтраженияВУчете = "ВозвратТоваровОтПокупателя"
		Или СпособОтраженияВУчете = "АктВыполненныхРабот"
		Или СпособОтраженияВУчете = "АктНаПередачуПрав" 
		Или СпособОтраженияВУчете = "СведенияОЗакупкеКомиссионером"
		Или СпособОтраженияВУчете = "КорректировкаСведенийОЗакупкеКомиссионером" Тогда
		ИмяДокумента = "ПоступлениеТоваровУслуг";
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет заполнение таблицы настройки отражения в учете по имени профиля.
//
// Параметры:
//  ТаблицаПрофиля - ТаблицаЗначений - таблица соответствия способов отражения в учете и электронных документов:
//   * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов() - тип электронного документа.
//   * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип документа.
//                              Указывается при встраивании в конфигурацию собственных типов электронных документов.
//   * СпособОбработки - Строка - идентификатор способа отражения в учете, заданный в см. СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
//  Профиль		   - Строка - имя профиля настроек. Возможные значения:
//   - Автоматически
//   - Вручную
//   - Поставщик
//   - Покупатель
//   - ПервоначальноеЗаполнение
//
//@skip-warning
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля, Профиль) Экспорт 
	
КонецПроцедуры

// Выполняется при проверке возможности создания учетного документа по электронному документу.
//
// Параметры:
//  Параметры - Структура - параметры электронного документа, отражаемого в учете.
//   * ЭтоСводныйУПД - Булево - электронный документ имеет формат УПД и содержит несколько продавцов, покупателей и т.п.
//  Отказ - Булево - признак отказа от отражения в учете. Если установить Истина, то документ не отражается в учете
//                   (для изменения). По умолчанию Ложь.
//  Описание - Строка - описание причины отказа от отражения в учете.
//
Процедура ПриПроверкеВозможностиСозданияУчетногоДокумента(Знач Параметры, Отказ, Описание) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлектронныхДокументов

// Событие возникает при формировании электронных документов. Данные электронных документов сформированы, но не записаны.
// На данном этапе можно отказаться от записи электронных документов.
// Событие может выполняться в фоновом задании, в связи с этим не следует помещать данные во временное хранилище.
//
// Параметры:
//  ДанныеДляПроверки - ТаблицаЗначений - сформированные данные электронных документов.
//    * Ключ - Число - ключ связи с данными для проверки. Используется для отказа от записи электронного документа
//                     при произвольной обработке результатов проверок.
//    * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов()
//    * ОписаниеФайла
//      ** ДвоичныеДанные - ДвоичныеДанные - данные xml.
//      ** ИмяФайла - Строка - имя файла с расширением.
//      ** Формат - см. ОбменСКонтрагентами.ФорматыДокументов()
//    * ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументов
//    * Отказ - Булево - признак отказа от записи электронного документа при обработке результата по умолчанию.
//    * ПричинаОтказа - Строка - описание причины отказа для отображения пользователю при обработке результата по умолчанию.
//  СтандартнаяОбработка - Булево - признак обработки результата проверки по умолчанию.
//  РезультатыПроверок - Структура - результаты проверок для произвольной обработки.
//     Используется при нестандартной обработке (см. ПриОбработкеРезультатовПроверокФормированияДокументовЭДО).
//
//@skip-warning
Процедура ПриПроверкеФормированияДокументовЭДО(ДанныеДляПроверки, СтандартнаяОбработка, РезультатыПроверок) Экспорт
	
КонецПроцедуры

// Событие возникает при нестандартной обработке результатов проверок данных электронных документов при формировании.
// Т.е. в процедуре см. ПриПроверкеФормированияДокументовЭДО флаг СтандартнаяОбработка установлен в Ложь.
//
// Параметры:
//  РезультатыПроверок - Структура - результаты проверок для произвольной обработки.
//  ПараметрыОбработкиНаКлиенте - Структура - параметры для передачи на клиент. Значения свойств должны сериализоваться.
//      См. ОбменСКонтрагентамиКлиентПереопределяемый.ПриОбработкеРезультатовПроверокФормированияДокументовЭДО
//
//@skip-warning
Процедура ПриОбработкеРезультатовПроверокФормированияДокументовЭДО(РезультатыПроверок, ПараметрыОбработкиНаКлиенте) Экспорт
	
КонецПроцедуры

// Событие возникает при формировании ответов по электронным документам. Данные ответов по электронным документам сформированы, но не записаны.
// На данном этапе можно отказаться от записи ответов по электронным документам.
// Событие может выполняться в фоновом задании, в связи с этим не следует помещать данные во временное хранилище.
//
// Параметры:
//  ДанныеДляПроверки - ТаблицаЗначений - сформированные данные электронных документов.
//    * Ключ - Число - ключ связи с данными для проверки. Используется для отказа от записи электронного документа
//                     при произвольной обработке результатов проверок.
//    * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов()
//    * ОписаниеФайлаИнформацииОтправителя
//      ** ДвоичныеДанные - ДвоичныеДанные - данные xml.
//      ** ИмяФайла - Строка - имя файла с расширением.
//      ** Формат - см. ОбменСКонтрагентами.ФорматыДокументов()
//    * ОписаниеФайлаИнформацииПолучателя
//      ** ДвоичныеДанные - ДвоичныеДанные - данные xml.
//      ** ИмяФайла - Строка - имя файла с расширением.
//      ** Формат - см. ОбменСКонтрагентами.ФорматыДокументов()
//    * ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументов
//    * Отказ - Булево - признак отказа от записи электронного документа при обработке результата по умолчанию.
//    * ПричинаОтказа - Строка - описание причины отказа для отображения пользователю при обработке результата по умолчанию.
//  СтандартнаяОбработка - Булево - признак обработки проверки по умолчанию.
//  РезультатыПроверок - Структура - результаты проверок для произвольной обработки.
//     Используется при нестандартной обработке (см. ПриОбработкеРезультатовПроверокФормированияДокументовЭДО).
//
//@skip-warning
Процедура ПриПроверкеФормированияОтветовПоДокументамЭДО(ДанныеДляПроверки, СтандартнаяОбработка, РезультатыПроверок) Экспорт
	
КонецПроцедуры

// Событие возникает при нестандартной обработке результатов проверок данных сформированных ответов по электронным документам.
// Т.е. в процедуре см. ПриПроверкеФормированияОтветовПоДокументамЭДО флаг СтандартнаяОбработка установлен в Ложь.
//
// Параметры:
//  РезультатыПроверок - Структура - результаты проверок для произвольной обработки.
//  ПараметрыОбработкиНаКлиенте - Структура - параметры для передачи на клиент. Значения свойств должны сериализоваться.
//      См. ОбменСКонтрагентамиКлиентПереопределяемый.ПриОбработкеРезультатовПроверокФормированияОтветовПоДокументамЭДО
//
//@skip-warning
Процедура ПриОбработкеРезультатовПроверокФормированияОтветовПоДокументамЭДО(РезультатыПроверок, ПараметрыОбработкиНаКлиенте) Экспорт
	
КонецПроцедуры

// Событие возникает после формирования электронного документа (в том числе входящего).
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
//@skip-warning
Процедура ПослеФормированияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после утверждения электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
//@skip-warning
Процедура ПослеУтвержденияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после полного подписания электронного документа.
// Для документов, отправляемых контрагентам, событие возникает после полного подписания на стороне отправителя.
// Для документов, получаемых от контрагентов, событие возникает после полного подписания на стороне получателя.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
//@skip-warning
Процедура ПослеПодписанияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после успешного получения ответа (утверждение или отклонение) по электронному документу.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ
//  ДокументУтвержден - Булево - Истина, если контрагент утвердил документ, Ложь - если отклонил.
Процедура ПослеПолученияОтветаОтКонтрагентаПоДокументу(ЭлектронныйДокумент, ДокументУтвержден) Экспорт
	
КонецПроцедуры

// Событие возникает после успешного завершения электронного документооборота.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
//@skip-warning
Процедура ПослеЗавершенияОбменаЭлектроннымДокументом(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после после аннулирования электронного документа.
// 
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//@skip-warning
Процедура ПослеАннулированияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после изменения списка объектов учета, привязанных к электронному документу (при отражении в учете,
// подборе объекта учета, разрыве связи с объектом учета и т.д.).
// 
// Параметры:
// 	ЭлектронныйДокумент     - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                          - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
// 	ДобавленныеОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - набор объектов учета, добавленных
// 	                            в список связанных с электронным документом.
// 	УдаленныеОбъектыУчета   - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - набор объектов учета, удаленных
// 	                            из списка связанных с электронным документом.
//@skip-warning
Процедура ПослеИзмененияОтраженияВУчете(ЭлектронныйДокумент, ДобавленныеОбъектыУчета, УдаленныеОбъектыУчета) Экспорт
	
КонецПроцедуры

// Обработчик ключевых событий по электронному счету-фактуре, описанных в приказе от 10 ноября 2015 г. N 174н.: 
// получение ПДО, ПДП, ИоП, ПДОИоП.
// 
// Параметры:
//  ДокументыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - документы учета, привязанные к электронному счету-фактуре.
// 	Событие - Строка - идентификатор события. Возможные события: 
// 	 * "ПолученПДО" - получено подтверждение даты отправки.
// 	 * "ПолученПДП" - получено подтверждение даты получения.
// 	 * "ПолученИоП" - получено извещение о получении электронного счета-фактуры.
// 	 * "ПолученИоППДО" - получено подтверждение даты отправки извещения о получении электронного счета-фактуры.
// 	СостояниеОбработки - Структура:
//	 * ПДППолучен - Булево - Истина, если по документу получен ПДП
//	 * ДатаПоступленияСФОператоруОтПродавца - Дата - дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
//     указанная в подтверждении (ПДП) этого Оператора ЭДО
//   * ПДОПолучен - Булево - Истина, если по документу получен ПДО
//	 * ДатаОтправкиСФПокупателюОператором - Дата - дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
//     указанная в подтверждении (ПДОЭСФ) Оператора ЭДО
//   * ИоППолучен - Булево - Истина, если по документу получено извещение о его получении покупателем.
//	 * ИоППДОПолучен - Булево - Истина, если по документу получено подтверждение даты отправки извещения о получении.  
Процедура ПослеВозникновенииСобытияПоЭлектронномуСчетуФактуре(ДокументыУчета, Событие, СостояниеОбработки) Экспорт
	
КонецПроцедуры

// Используется для простановки ответственного при создании / получении электронного документа.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента электронного документа.
//  Организация - ОпределяемыйТип.Организация - организация электронного документа.
//  ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор электронного документа. Может быть не указан.
//  ОтветственныйПоЭД - СправочникСсылка.Пользователи - ответственное за документ лицо. Выходной параметр.
//
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Организация, ДоговорКонтрагента, ОтветственныйПоЭД) Экспорт

	ОтветственныйПоЭД = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПрикладныхДанных

// Определяет является ли документ информационной базы счет-фактурой.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ информационной базы.
//  Результат - Булево - Истина, если документ является счет-фактурой.
//
//@skip-warning
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	Результат = Ложь;	
КонецПроцедуры

// Получает описание объекта учета, являющегося основанием электронного документа.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация.
//   * Контрагент - ОпределяемыйТип.УчастникЭДО - контрагент\организация.
//   * Дата - Дата - дата.
//   * Номер - Строка - номер.
//   * СуммаДокумента - Число - сумма документа.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПриПолученииОписанияОснованияЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт

	ТипОснования = ТипЗнч(ОснованиеОбъект);
	Если ТипОснования = Тип("ДокументОбъект.торо_ЗаказПоставщику")
		Или ТипОснования = Тип("ДокументСсылка.торо_ЗаказПоставщику") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Описание.Организация = ОснованиеОбъект.Организация;
		Описание.Контрагент  = ОснованиеОбъект.Контрагент;
		Описание.Дата  = ОснованиеОбъект.Дата;
		Описание.Номер = ОснованиеОбъект.НомерЭД;
		Описание.СуммаДокумента = ОснованиеОбъект.СуммаДокумента;		
	КонецЕсли;

КонецПроцедуры

// Ищет элемента справочника, хранящего контрагентов или организаций по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - строковый идентификатор сущности. Возможные значения:
//    - "Организации"
//    - "Контрагенты"
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  Ссылка - ОпределяемыйТип.Организация, ОпределяемыйТип.КонтрагентБЭД - ссылка на найденный объект.
//  ДатаСведений - Дата - дата сведений о ИНН/КПП объекта.
//               - Неопределено - дата сведений не определена.
//
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, ДатаСведений = Неопределено) Экспорт

	Ссылка = Неопределено;
	
	ИмяМетаданных = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника(ТипОбъекта);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник." + ИмяМетаданных + " КАК Выборка
	|ГДЕ
	|	НЕ Выборка.ПометкаУдаления И
	|	Выборка.ИНН = &ИНН";
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		ТекстЗапроса = ТекстЗапроса
			+ " И Выборка.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;

КонецПроцедуры

// Создает контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН.
//    * КПП - Строка - КПП.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - ОпределяемыйТип.КонтрагентБЭД - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт

	БизнесСетьПереопределяемый.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Отказ); 
	
КонецПроцедуры

// Заполняет реквизиты контрагента переданными данными.
//
// Параметры:
//  СтруктураРеквизитов - структура - реквизитов контрагента, которые нужно заполнить. Содержит ключи:
//    * Контрагент - ОпределяемыйТип.КонтрагентБЭД - если указан, требуется заполнить данные этого контрагента.
//                                                   В противном случае необходимо создать нового контрагента.
//    * ИНН_КПП - Строка - ИНН и КПП, разделенные знаком "_".
//    * ОКПО - Строка - ОКПО.
//    * Наименование - Строка - наименование контрагента.
//    * ЮрАдресПредставление - Строка - строковое представление юридического адреса контрагента.
//    * ЮрАдресЗначенияПолей - Строка - перечисление значений элементов адреса, разделенных переносом строки. Название
//                                      адресного элемента и его значение разделяются знаком "=". Возможные адресные элементы:
//      - Индекс
//      - НаселенныйПункт
//      - Страна
//      - Регион
//      - Район
//      - Город
//      - Улица
//      - Дом
//      - Корпус
//      - Квартира
//    * ФактАдресПредставление - Строка - строковое представление фактического адреса контрагента.
//    * ФактАдресЗначенияПолей - Строка - перечисление значений элементов адреса, разделенных переносом строки. Название
//                                      адресного элемента и его значение разделяются знаком "=". Возможные адресные элементы:
//      - Индекс
//      - НаселенныйПункт
//      - Страна
//      - Регион
//      - Район
//      - Город
//      - Улица
//      - Дом
//      - Корпус
//      - Квартира
//    * Телефон - Строка - телефон контрагента.
//    * БИК - Строка - БИК банка.
//    * КорреспондентскийСчет - строка - номер корреспондентского счета.
//    * Банк - Строка - Название банка.
//    * РасчетныйСчет - Строка - номер расчетного счета. 
//  КонтрагентСсылка    - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента. В данном параметре необходимо вернуть
//                                                        ссылку на контрагента, у которого были заполнены данные.
//                                                        Выходной параметр.
//
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт

	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтруктураРеквизитов.Контрагент);
			Блокировка.Заблокировать();
			
			Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
		Иначе
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		КонецЕсли;
		
		Контрагент.Наименование = СтруктураРеквизитов.Наименование;
		ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
		Контрагент.ИНН = Сред(ИНН_КПП, 1, СтрНайти(ИНН_КПП, "/") - 1);
		Контрагент.КПП = Сред(ИНН_КПП, СтрНайти(ИНН_КПП, "/") + 1);
		
		Контрагент.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	КонтрагентСсылка = Контрагент.Ссылка;

КонецПроцедуры

// Получает реквизиты элемента справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - элемент справочника организации;
//  СтруктураВозврата - Структура - перечень реквизитов организации:
//   * Наименование - Строка - наименование организации.
//   * НаименованиеПолное - Строка - полное наименование организации. 
//   * ИНН - Строка -ИНН организации.
//   * КПП - Строка - КПП организации.
//   * ОКПО - Строка - ОКПО организации.
//   * ДолжностьРуководителя - Строка - должность руководителя организации. 
//   * Руководитель - Строка - Ф.И.О. руководителя организации. 
//   * СвидетельствоДата - Дата - дата свидетельства о регистрации.
//   * СвидетельствоНомер - Строка - номер свидетельства о регистрации.
//   * ЮридическийАдрес - Строка - представление адреса организации.
//   * ЗначенияПолейЮрАдрес - Строка - значения адресных элементов, разделенные переносом строки. Значение от имени
//                                     адресного элемента отделяется знаком "=".
//   * ФактическийАдрес - Строка - представление фактического адреса.
//   * ЗначенияПолейФактАдрес - Строка - значения адресных элементов, разделенные переносом строки. Значение от имени
//                                     адресного элемента отделяется знаком "=".
//   * Телефон - Строка - телефон организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт

	ЗаполнитьЗначенияСвойств(СтруктураВозврата,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, ИНН, КПП, ЮрФизЛицо"));
	СтруктураВозврата.НаименованиеПолное = СтруктураВозврата.Наименование;
	
КонецПроцедуры

// Процедура заполняет данные для заполнения заявки на получение уникального идентификатора абонента, добавления 
// сертификата абонента
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на элемент справочника Организации;
//  ДанныеОрганизации - см. ИнтеграцияЭДО.НоваяСтруктураДанныхОрганизации
//
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт

	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
			"Наименование, ИНН, КПП, ЮридическоеФизическоеЛицо");
	
	ОрганизацияФизЛицо = (СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель
		ИЛИ СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
	
	ДанныеОрганизации.Вставить("Наименование" , СвойстваОрганизации.НаименованиеПолное);
	ДанныеОрганизации.Вставить("ИНН"          , СвойстваОрганизации.ИНН);
	ДанныеОрганизации.Вставить("КПП"          , СвойстваОрганизации.КПП);
	ДанныеОрганизации.Вставить("ОГРН"         , "");
	ДанныеОрганизации.Вставить("КодИМНС"      , "");
	
	Если ОрганизацияФизЛицо Тогда
		ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо", "ФизЛицо");
	Иначе
		ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо", "ЮрЛицо");
	КонецЕсли;
		
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	
	ДанныеОрганизации.Вставить("Индекс"         , "");
	ДанныеОрганизации.Вставить("Регион"         , "");
	ДанныеОрганизации.Вставить("КодРегиона"     , "");
	ДанныеОрганизации.Вставить("Район"          , "");
	ДанныеОрганизации.Вставить("Город"          , "");
	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	ДанныеОрганизации.Вставить("Улица"          , "");
	ДанныеОрганизации.Вставить("Дом"            , "");
	ДанныеОрганизации.Вставить("Корпус"         , "");
	ДанныеОрганизации.Вставить("Квартира"       , "");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Значение
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(Выборка.Значение);
		Если АдресСтруктурой.Свойство("Индекс") Тогда
			ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Регион") Тогда
			ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("КодРегиона") Тогда
			ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Район") Тогда
			ДанныеОрганизации.Район = АдресСтруктурой.Район;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Город") Тогда
			ДанныеОрганизации.Город = АдресСтруктурой.Город;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
			ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Улица") Тогда
			ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
			ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
			ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
			ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОрганизации.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));

КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке на контрагента или организацию.
//
// Параметры:
//  ИП - ОпределяемыйТип.Организация - организация
//     - ОпределяемыйТип.КонтрагентБЭД - контрагент
//  Сведения - Строка - в этот параметр необходимо поместить сведения о регистрации индивидуального предпринимателя.
//                      Выходной параметр.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт

	Сведения = "";

КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - ссылка на элемент справочника контрагенты, адрес которого надо получить.
//  АдресЭП - Строка - адрес электронной почты.
//
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	&ИмяТаблицыКонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидEmail";
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailКонтрагента"].Ссылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыКонтактнаяИнформация", 
		Контрагент.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация");
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Тип",      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидEmail", ВидEmail);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		АдресЭП = Выборка.АдресЭП;
	КонецЕсли;
		
КонецПроцедуры

// Получает банковские счета организации для выгрузки сведений о ней.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  Таблица - ТаблицаЗначений - таблица с перечнем банковских счетов. Содержит колонки:
//    * БанковскийСчет - ЛюбаяСсылка - ссылка на банковский счет.
//
Процедура ПолучитьБанковскиеСчета(Организация, Таблица) Экспорт
	
КонецПроцедуры

// Получает банковские реквизиты по переданным счетам для выгрузки сведений об организации.
//
// Параметры:
//  МассивСчетов - Массив - список ссылок на банковские счета организации.
//  Таблица - ТаблицаЗначений - перечень банковских реквизитов. Должна содержать следующие колонки:
//    * Ссылка - ЛюбаяСсылка - ссылка на банковский счет.
//    * РасчетныйСчет - Строка - номер расчетного счета.
//    * КорреспондентскийСчет - Строка - номер корреспондентского счета.
//    * БИК - Строка - БИК банка.
//    * Банк - Строка - наименование банка.
//    * БанкДляРасчетов - Строка - наименование банка для расчетов.
//    * БанкДляРасчетовБИК - Строка - БИК банка для расчетов.
//    * БанкДляРасчетовКоррСчет - Строка - Строка - корреспондентский счет банка для расчетов.
//
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
КонецПроцедуры

// Определяет, является ли переданная организация или контрагент физ. лицом.
//
// Параметры:
//  ДанныеКонтрагента - ОпределяемыйТип.Организация - ссылка на организацию.
//                    - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента.
//  ПризнакФизЛица - Булево - Истина если это физическое лицо. Выходной параметр.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента, "ЮридическоеФизическоеЛицо");
	Если ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		ИЛИ ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель Тогда
		ПризнакФизЛица = Истина;
	КонецЕсли;	
КонецПроцедуры

// Получает сведения физического лица по переданному пользователю ИБ и организации.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.Пользователь - пользователь ИБ.
//  Организация - ОпределяемыйТип.Организация - организация.
//  СведенияФизЛица - Структура - данные физического лица:
//   * ИмяПолное - Строка - полное имя физического лица пользователя, неапример "Иванов Иван Иванович" .
//   * Должность - Строка - занимаемая должность.
//
Процедура СведенияФизЛицаПользователя(Знач Пользователь, Знач Организация, СведенияФизЛица) Экспорт

	СведенияФизЛица.ИмяПолное = Пользователь.Наименование;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(, ФизическоеЛицо = &ФизЛицо) КАК КадроваяИсторияСотрудниковСрезПоследних";
	Запрос.УстановитьПараметр("ФизЛицо", Пользователь.ФизическоеЛицо);  
	РезЗапроса = Запрос.Выполнить();
	Если НЕ РезЗапроса.Пустой() Тогда 
		Выборка = РезЗапроса.Выбрать();
		Выборка.Следующий();
		СведенияФизЛица.Должность = Выборка.Должность;
	Иначе
		СведенияФизЛица.Должность = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция1СЭДОИ1СОтчетности

// Заполняет соответствие выгружаемым документам дату и номер основания (договора).
//
// Параметры:
//  МассивСсылок - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - массив ссылок на учетные документы 
//                 (в качестве возможных значений следует принимать те типы документов, на основании которых в данном 
//                 прикладном решении формируется электронный документ вида «Акт приемки-сдачи работ (услуг).
//  ВозвращаемоеСоответствие - Соответствие - в случае, если требуемые реквизиты у договора не заполнены
//                             или при невозможности получения данных реквизитов, нужно помещать пустые значения указанных типов.
//                             Соответствие со следующими свойствами:
//                             * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на выгружаемый учетный документ.
//                             * Значение - Структура:
//                               ** НомерДоговора - Строка;
//                               ** ДатаДоговора - Дата.
//
//@skip-warning
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеТипыЭлектронныхДокументов

// Определяет прикладные типы электронных документов.
//
// Параметры:
//  ТипыЭлектронныхДокументов - Массив Из ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - используемые прикладные 
//                              типы электронных документов.
//
Процедура ПриОпределенииПрикладныхТиповЭлектронныхДокументов(ТипыЭлектронныхДокументов) Экспорт
	
КонецПроцедуры

// Определяет сведения о прикладных форматах электронных документов.
// 
// Параметры:
//  ТаблицаФорматов - ТаблицаЗначений - Таблица сведений о прикладных форматах.
//     * ПрикладнойТипДокумента      - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип электронного документа.
//     * ИдентификаторФормата        - Строка - Текстовый идентификатор формата,
//          используется для идентификации формата в программном коде библиотеки.
//     * ПредставлениеФормата        - Строка - Пользовательское представление для вывода пользователю.
//     * Отключен                    - Булево - Если указано "Да", то формат не используется.
//     * ДатаНачалаДействия          - Дата - Дата, начиная с которой формат вступает в силу.
//     * ДатаОкончанияДействия       - Дата - Дата, после которой формат не должен использоваться.
//     * УсловиеВыводаПредупреждения - Строка - Задает условие вывода предупреждения для входящих документов.
//          Возможные значения:
//          ""ДатаФормированияЭлектронногоДокумента"" - предупреждение выводится только в том случае,
//          если электронный документ сформирован вне периода действия формата.
//          Пустая строка - предупреждение выводится в любом случае.
//     * ТекстПредупрежденияДляВходящегоДокумента - Строка - Содержит текст предупреждения,
//          который будет выводиться в форме визуализации входящего документа, сформированного по данному формату.
//          Используется для утративших силу форматов и для других предупреждений.
//          Может содержать в тексте символы ""%"", которые будут заменены на параметры из колонки ""ПараметрыПредупрежденияДляВходящегоДокумента"".
//          Если не задано, предупреждение выводиться не будет. Локализуется.
//
Процедура ПриОпределенииСведенийОПрикладныхФорматах(ТаблицаФорматов) Экспорт
	
КонецПроцедуры

// Определяет настройки регламента электронного документооборота для прикладных типов электронных документов.
//
// Параметры:
//  Настройки - Структура - 
//     * ТребуетсяИзвещениеОПолучении - Булево - По данному признаку, на стороне получателя определяется необходимость 
//                                      отправки извещения о получении.
//     * ТребуетсяОтветнаяПодпись     - Булево - По данному признаку, на стороне получателя определяется, требуется 
//                                      ответное подписание документа.
//     * РедактироватьПодпись         - Булево - Признак редактирования параметра "Подписывать документ" в форме 
//                                      настроек регламента ЭДО.
//     * РедактироватьИзвещение       - Булево - Признак редактирования параметра "Ожидать извещение о получении" в 
//                                      форме настроек регламента ЭДО.
//     * РедактироватьОтветнуюПодпись - Булево - Признак редактирования параметра "Ожидать ответную подпись" в форме 
//                                      настроек регламента ЭДО.
//  ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип
//                             электронного документа.
//  ВерсияФормата            - Строка - Текстовый идентификатор формата соответствующего прикладного вида электронного
//                             документа. См. ПриОпределенииСведенийОПрикладныхФорматах
//  СтандартнаяОбработка     - Булево - Признак использования настроек регламента по умолчанию.
//                             Если Ложь, то используются данные из параметра Настройки. По умолчанию Истина.
//
Процедура ПриОпределенииНастроекРегламентаЭДО(Настройки, ТипЭлектронногоДокумента, ВерсияФормата, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Определяет соответствие списка учетных документов прикладному типу электронного документа.
//
// Параметры:
//  ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
//  ТипыУчетныхДокументов    - СписокЗначений - список ссылок на объекты учета. В качестве ключа задается пустая ссылка
//                             объекта, в качестве представления представление объекта учета, которое может быть показано пользователю.
//
Процедура ПриОпределенииТиповУчетныхДокументовПоПрикладномуТипуЭлектронногоДокумента(ТипЭлектронногоДокумента, ТипыУчетныхДокументов) Экспорт
	
КонецПроцедуры

// Заполняет соответствие прикладных типов исходящих электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеТиповДокументам - Соответствие - перечень типов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хозяйственной операции).
//
Процедура ПриОпределенииСоответствияИсходящихПрикладныхТиповДокументамУчета(СоответствиеТиповДокументам) Экспорт 
	
КонецПроцедуры

// Возвращает идентификаторы способов отражения в учете, доступных при загрузке электронного документа.
//
// Параметры:
//  ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
//  СпособыОбработки         - СписокЗначений - список способов отражения в учете. В качестве значения задается строковый
//                             идентификатор, который будет передан в переопределяемый методы создания учетных документов
//                             по данным электронных. В качестве представления - представление способа отражения, которое
//                             может быть отображено пользователю.
//                             Выходной параметр.
//
Процедура ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента(ТипЭлектронногоДокумента, СпособыОбработки) Экспорт 
	
КонецПроцедуры

// Предназначена для распределения объектов, к которым подключаются команды ЭДО, по группам.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО. Для каждого из ключей указывается массив полных имен 
//                    объектов метаданных, к которым подключаются команды ЭДО.
//    Исходящие    - Массив Из Строка - объекты для команд работы с исходящими документами.
//    Входящие     - Массив Из Строка - объекты для команд работы со входящими документами.
//    БезПодписи   - Массив Из Строка - объекты для команд выполнения ЭДО без подписи.
//    Интеркампани - Массив Из Строка - объекты для команд обмена между организациями в рамках одной базы.
//
// Пример:
//  СоставКомандЭДО.Исходящие.Добавить("Документ.ТранспортнаяНакладная");
//	СоставКомандЭДО.Исходящие.Добавить("Документ.Извещение");
//
Процедура ПриОпределенииСоставаКомандЭДООснованияПрикладногоЭлектронногоДокумента(СоставКомандЭДО) Экспорт
	
КонецПроцедуры

// Получает описание объекта учета, являющегося основанием прикладного электронного документа.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент.
//   * Дата - Дата - дата.
//   * Номер - Строка - номер.
//   * СуммаДокумента - Число - сумма документа.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
//
Процедура ПриПолученииОписанияОснованияПрикладногоЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Предназначена для получения параметров ЭДО по ссылке на объект учета
//
// Параметры:
//  Источник  - Объект, ЛюбаяСсылка - документ или справочник источника.
//  Параметры - Структура - параметры источника, необходимые для определения настроек обмена электронными документами: 
//    * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип электронного документа.
//    * Входящий               - Булево - Признак того, что электронный документ является входящим.
//    * Организация            - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент             - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента     - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
//
Процедура ПриОпределенииПараметровПрикладногоЭлектронногоДокументаПоИсточнику(Источник, Параметры) Экспорт
	
КонецПроцедуры

// Определяет параметры прикладного электронного документа по данным файла.
//
// Параметры:
//  ДанныеФайла     - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  РасширениеФайла - Строка - Расширение файла без точки.
//  Параметры       - Структура - Параметры прикладного электронного документа.
//     * ТипЭлектронногоДокумента         - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип
//                                          электронного документа.
//     * НаименованиеДокументаОтправителя - Строка - Наименование документа по данным отправителя.
//     * НомерДокументаОтправителя        - Строка - Номер документа по данным отправителя.
//     * ДатаДокументаОтправителя         - Дата  - Дата документа по данным отправителя.
//     * СуммаДокумента                   - Число - Сумма документа по данным отправителя 
//     * Отправитель                      - см. НовоеОписаниеУчастникаЭДО
//     * Получатель                       - см. НовоеОписаниеУчастникаЭДО
//
Процедура ПриОпределенииПараметровФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла, РасширениеФайла, Параметры) Экспорт
	
КонецПроцедуры

// Формирует файл прикладного электронного документа.
//
// Параметры:
//  ПараметрыФормирования - Структура - данные для формирования файла электронного документа.
//     * СсылкаНаОбъект           - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект, по которому необходимо
//                                  сформировать электронный документ.
//     * ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - тип формируемого электронного 
//                                  документа.
//  РезультатФормирования - Структура - данные, которые необходимо заполнить по результатам формирования файла
//                          электронного документа.
//     * ДанныеФайла                      - ДвоичныеДанные - файл электронного документа.
//     * ИмяФайла                         - Строка - Имя файла без расширения.
//     * Расширение                       - Строка - Расширение файла (без точки вначале).
//     * НаименованиеДокументаОтправителя - Строка - наименование электронного документа в информационной базе.
//     * НомерДокументаОтправителя        - Строка - номер электронного документа в информационной базе.
//     * ДатаДокументаОтправителя         - Строка - дата электронного документа в информационной базе.
//     * СуммаДокумента                   - Число - сумма электронного документа в информационной базе.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ПриФормированииФайлаПрикладногоЭлектронногоДокумента(ПараметрыФормирования, РезультатФормирования, Отказ) Экспорт
	
КонецПроцедуры

// Формирование представления прикладного электронного документа по данным файла.
//
// Параметры:
//  ТабличныйДокумент   - ТабличныйДокумент - Визуализация прикладного электронного документа.
//  ДанныеФайла         - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  ПараметрыЗаполнения - Структура - Дополнительные параметры для формирования табличного документа.
//     * ВыводитьБанковскиеРеквизиты     - Булево - Значение настройки "Отображать банковские реквизиты",
//            установленной в форме просмотра электронного документа.
//            Если Истина, то в представлении участника ЭДО следует выводить банковские реквизиты.
//     * СкрыватьДопДанные               - Булево - Инвертированное значение настройки "Отображать дополнительную информацию",
//            установленной в форме просмотра электронного документа.
//            Если Ложь, то в табличном документе следует отображать дополнительную информацию, если она есть.
//     * ВыводитьПостраничныйРазделитель - Булево - Признак необходимости выводить постраничный разделитель.
//            Принимает значение Истина при выводе представления электронного документа на печать.
//     * ЭлектронныеПодписи              - Массив Из см. ЭлектроннаяПодпись.УстановленныеПодписи - Список установленных подписей.
//        ** ОтветнаяПодпись       - Булево - Признак ответной подписи.
//
Процедура ПриЗаполненииТабличногоДокументаИзФайлаПрикладногоЭлектронногоДокумента(ТабличныйДокумент, ДанныеФайла, ПараметрыЗаполнения) Экспорт
	
КонецПроцедуры

// Определяет необходимость использования механизма сопоставления номенклатуры контрагентов для прикладного типа 
// электронного документа.
//
// Параметры:
//  ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
//  Использовать             - Булево - Признак использования сопоставления номенклатуры контрагентов. По умолчанию Ложь.
//
//@skip-warning
Процедура ПриОпределенииИспользованияСопоставленияНоменклатурыКонтрагентов(ТипЭлектронногоДокумента, Использовать) Экспорт
	
	
	
КонецПроцедуры

// Заполнение информации о товаре прикладного электронного документа по данным в файла.
// Выполняется при использовании сопоставления номенклатуры контрагентов.
//
// Параметры:
//  ДанныеФайла       - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  РасширениеФайла   - Строка - Расширение файла без точки.
//  ИнформациюОТоваре - ТаблицаЗначений - Таблица товаров.
//     * ИД                                    - Строка - Идентификатор товара по данным поставщика.
//     * Наименование                          - Строка - Наименование номенклатуры.
//     * НаименованиеХарактеристики            - Строка - Наименование характеристики.
//     * КодТовара                             - Строка - Код товара.
//     * Артикул                               - Строка - Артикул.
//     * БазоваяЕдиницаКод                     - Строка - Код единицы измерения.
//     * БазоваяЕдиницаНаименование            - Строка - Наименование единицы измерения.
//     * БазоваяЕдиницаНаименованиеПолное      - Строка - Полное наименование единицы измерения.
//     * БазоваяЕдиницаМеждународноеСокращение - Строка - Международное сокращение единицы измерения.
//     * Описание                              - Строка - Произвольное описание товара.
//     * Сопоставление                         - Структура - Параметры сопоставления номенклатуры.
//                                               Заполняется, если необходимо переопределить стандартный механизм.
//        ** Идентификатор    - Строка - Идентификатор товара.
//        ** Наименование     - Строка - Наименование номенклатуры.
//        ** Характеристика   - Строка - Наименование характеристики.
//        ** ЕдиницаИзмерения - Строка - Наименование единицы измерения.
//        ** Артикул          - Строка - Артикул.
//
//@skip-warning
Процедура ПриЗаполненииИнформацииОТовареИзФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла, РасширениеФайла, ИнформациюОТоваре) Экспорт
	
	
	
КонецПроцедуры

// Выполняется при отражении в учете прикладного электронного документа, содержащего информацию для сопоставления номенклатуры.
// Позволяет определить необходимость сопоставления номенклатуры для указанного способа обработки электронных документов,
// а также отказаться от отражения в учете, если сопоставление не выполнено.
// Если в электронном документе не передана информация для сопоставления,
// то отражение в учете будет продолжено независимо от настроек.
// Выполняется при использовании сопоставления номенклатуры контрагентов.
//
// Параметры:
//  Документ - Структура - данные электронного документа (только чтение):
//   * СпособОбработки - Строка - способ отражения в учете электронного документа.
//                       См. ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//  Настройки - Структура - настройки сопоставления номенклатуры (для изменения):
//   * ОтражатьТолькоСопоставленные - Булево - признак разрешения отражать в учете только документы с сопоставленной номенклатурой. По умолчанию Истина.
//                                             Если в электронном документе не передана информация для сопоставления,
//                                             то отражение в учете будет продолжено независимо от настроек.
//
//@skip-warning
Процедура ПриОтраженииВУчетеПрикладногоЭлектронногоДокументаСНоменклатурой(Знач Документ, Настройки) Экспорт
	
	
	
КонецПроцедуры

// Выполняется при создании или при повторном заполнении документа учета по данным файла электронного документа.
//
// Параметры:
//  ПараметрыФайлаЭлектронногоДокумента - Структура - Параметры 
//     * ДанныеФайла     - ДвоичныеДанные - Данные файла прикладного электронного документа.
//     * СпособОбработки - Строка - Способ отражения в учете электронного документа.
//                         См. ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//     * Входящий        - Булево - Признак того, что электронный документ является входящим.
//  СсылкиНаОбъекты - Массив - Документы информационной базы, созданные ранее по электронному документу.
//
Процедура ПриСозданииОбъектовУчетаИзФайлаПрикладногоЭлектронногоДокумента(ПараметрыФайлаЭлектронногоДокумента, СсылкиНаОбъекты) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Заполняет сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число - преобразуемая сумма.
//  КодВалюты   - Число - код используемой валюты.
//  Результат   - Строка - сумма прописью. Выходной параметр.
//
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт

	Сумма             = ?(СуммаЧислом < 0, -СуммаЧислом, СуммаЧислом);
	ЦелаяЧасть        = Цел(Сумма);
	ФорматСтрока      = "Л=ru_RU;ДП=Ложь";
	ПараметрыПредмета = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	Результат = ЧислоПрописью(Сумма, ФорматСтрока, ПараметрыПредмета.ПараметрыПрописиНаРусском);   
	
КонецПроцедуры

// Задает имена связей параметров выбора для полей форм библиотеки, в которых выбирается договор контрагента.
//
// Параметры:
//  ИмяСвязиПоОрганизации  - Строка - Имя связи параметров выбора для связанного поля "Организация",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//  ИмяСвязиПоКонтрагенту  - Строка - Имя связи параметров выбора для связанного поля "Контрагент",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//
Процедура УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту) Экспорт
	
	ИмяСвязиПоОрганизации = "Отбор.Организация";
	ИмяСвязиПоКонтрагенту = "Отбор.Владелец";

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет данные участника ЭДО в дерево данных.
//
// Параметры:
//  ДеревоДанных        - ДеревоЗначений - Данные для формирования электронного документа.
//  СведенияОбУчастнике - Структура - Информация об участнике ЭДО.
//  ВидУчастника        - Строка - Роль участника сделки.
//  ФорматCML           - Булево - Признак формирования электронного документа в формате CML.
//  ВидАдреса           - Строка - Вид адреса для заполнения в электронный документ.
//     Принимает значения: ЮридическийАдрес, ФактическийАдрес, ПочтовыйАдрес, ПроизвольныйАдрес.
//
Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ФорматCML = Ложь, ВидАдреса = "ЮридическийАдрес") Экспорт 
	
	// Подготовим параметры обработки ошибок
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	ПараметрыОбработкиОшибокИНН = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.ИНН");
	ПараметрыОбработкиОшибокКПП = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.КПП");
	
	ТипУчастникаОрганизация = ТипЗнч(КлючДанных) = Тип("СправочникСсылка.Организации");
	
	ПутьКДаннымНаименования = "Объект.Наименование";
	
	ПараметрыОбработкиОшибокНаименование = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, ПутьКДаннымНаименования);
	
	// Передаем в дерево данные для заполнения адреса.
	ВидКонтактнойИнформации = Неопределено;
	
	Если ВидАдреса = "ПроизвольныйАдрес"
		И ЗначениеЗаполнено(СведенияОбУчастнике.ПроизвольныйАдресЗначенияПолей) Тогда
		
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОбУчастнике.ПроизвольныйАдресЗначенияПолей);
		
		Если ФорматCML Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.КодСтр", СведенияОбАдресе.КодСтраны);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.АдрТекст", СведенияОбАдресе.Представление);
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.КодСтраны", СведенияОбАдресе.КодСтраны);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.АдресТекст", СведенияОбАдресе.Представление);
		КонецЕсли;
		
	ИначеЕсли ВидАдреса = "ПочтовыйАдрес"
		И ЗначениеЗаполнено(СведенияОбУчастнике[ВидАдреса]) Тогда
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
		
	ИначеЕсли ВидАдреса = "ФактическийАдрес" 
		И ЗначениеЗаполнено(СведенияОбУчастнике[ВидАдреса]) Тогда
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		
	Иначе
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		
	КонецЕсли;
	
	Если ВидКонтактнойИнформации <> Неопределено Тогда
		
		ПостфиксПоляАдрес = ?(ТипУчастникаОрганизация, "Организации", "Контрагента");
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СведенияОбУчастнике.Ссылка, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес + ".");
		
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый",
			ПараметрыОбработкиОшибок);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации", КлючДанных);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации", ВидКонтактнойИнформации);
		
	КонецЕсли;
	
	Если СведенияОбУчастнике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, ПараметрыОбработкиОшибокКПП);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
																		
	ИначеЕсли СведенияОбУчастнике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель И Не ФорматCML Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									СведенияОбУчастнике.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									СведенияОбУчастнике.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									СведенияОбУчастнике.Отчество, ПараметрыОбработкиОшибокНаименование);
									
		Если ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Свидетельство №%1 от %2'"),
							СведенияОбУчастнике.СвидетельствоСерияНомер,
							Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				КлючДанных, "Объект.СвидетельствоСерияНомер");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
										Свидетельство, ПараметрыОбработкиОшибок);
		КонецЕсли;
		
	Иначе
		
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть,
				СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									СведенияОбУчастнике.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									СведенияОбУчастнике.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									СведенияОбУчастнике.Отчество, ПараметрыОбработкиОшибокНаименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Контакт.Телефон",
			СведенияОбУчастнике.Телефоны, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		КоррСчет = "";
		
		ПараметрыОбработкиОшибок = Неопределено;
		Если СведенияОбУчастнике.Свойство("БанковскийСчет") Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СведенияОбУчастнике.БанковскийСчетСсылка, "Объект.НомерСчета");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета, ПараметрыОбработкиОшибок);
				
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Наименование");
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Код");
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.КоррСчет");
			КонецЕсли;
			
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет.КорСчет") Тогда
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					ВидУчастника + ".БанковскийСчет.КорСчет",
					КоррСчет, ПараметрыОбработкиОшибок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(КлючДанных,
			"Объект.КодПоОКПО");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, ПараметрыОбработкиОшибок);
	КонецЕсли;

	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для обработки ошибок заполнения обязательных полей.
//
// Параметры:
//  ТаблицаТоваров   - ТаблицаЗначений - сведения о товарах для формирования электронного документа.
//  СсылкаНаДокумент - ДокументСсылка - Ссылка на основание электронного документа.
//
Процедура ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаДокумент = Неопределено) Экспорт

	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Артикул", "Номенклатура", "Объект.Артикул");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Наименование", "Номенклатура", "Объект.НаименованиеПолное");
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Если ТаблицаТоваров.Колонки.Найти("Количество") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Цена", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Сумма") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Сумма", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияКодПоОКЕИ", "ЕдиницаИзмерения", "Объект.Код");
		
		// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
		СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
		Если СтрокиСПустойЕдиницей.Количество() Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем единицу прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			Иначе
				// Иначе ссылаемся на незаполненность единицы в самой номенклатуре.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", "Номенклатура", "Объект.ЕдиницаИзмерения");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "БазоваяЕдиницаСсылка", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаМеждународноеСокращение", "БазоваяЕдиницаСсылка", "Объект.МеждународноеСокращение");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименование", "БазоваяЕдиницаСсылка", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименованиеПолное", "БазоваяЕдиницаСсылка", "Объект.НаименованиеПолное");
	
	// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
	СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("БазоваяЕдиницаСсылка", Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
	Если СтрокиСПустойЕдиницей.Количество() Тогда
		Если СсылкаНаДокумент <> Неопределено Тогда
			// Для документов берем единицу прямо из документа.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
		Иначе
			// Это каталог товаров - для него единица берется из номенклатуры.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", "Номенклатура", "Объект.ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ВалютаЦены") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ВалютаЦены", "Валюта", "Объект.Код");
		
		// Если валюта пустая, надо ссылаться на незаполненность самой валюты, а не ее полей.
		СтрокиСПустойВалютой = ТаблицаТоваров.НайтиСтроки(Новый Структура("Валюта", Справочники.Валюты.ПустаяСсылка()));
		Если СтрокиСПустойВалютой.Количество() И СсылкаНаДокумент <> Неопределено Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем валюту прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойВалютой,
					"ВалютаЦены", СсылкаНаДокумент, "Объект.Валюта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено,
	Записывать = Истина, СпособОбработки = "")
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		РеквизитыИБКонтрагента = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
			И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	ЗаписатьДокумент(ДокументОбъект);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
	КонецЕсли;
	
	ИспользоватьСопоставление = ПолучитьФункциональнуюОпцию("ИспользоватьСопоставлениеНоменклатуры");
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда
		ТаблицаТоваров = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
		ТорговыеПредложенияПереопределяемый.ДополнитьТаблицуТоваровКолонкамиПоискаПоИдентификатору(ТаблицаТоваров);
		Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
			Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
				СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
					Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
						Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
						Если ЗначениеЗаполнено(Реквизит) Тогда
							ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
						КонецЕсли;
					Иначе
						ЗаполнитьСтрокуТЧ(ТаблицаТоваров, СтрокаРеквизитаОписания.Строки, ДеревоРазбора, Ложь,,
							ИспользоватьСопоставление);
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
					
					Если ЗначениеЗаполнено(Реквизит) Тогда
						Если СтрокаРеквизита.Реквизит = "Номер" Тогда
							ДанныеЗаполненияШапки.Вставить("НомерЭД", Реквизит);
						ИначеЕсли СтрокаРеквизита.Реквизит = "Дата" Тогда
							ДанныеЗаполненияШапки.Вставить("ДатаЭД", Реквизит);
						Иначе
							ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
						КонецЕсли;
					ИначеЕсли СтрокаРеквизита.Реквизит = "Организация"  Тогда
						ТекстОшибки = ТекстОшибкиЗаполненияОрганизации(СтрокаРеквизита, ДеревоРазбора);
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
					
				Иначе
					ЗаполнитьСтрокуТЧ(ТаблицаТоваров, СтрокаРеквизита.Строки, ДеревоРазбора, Ложь,, ИспользоватьСопоставление);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаТоваров = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
		Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
					ДанныеЗаполненияШапки.Вставить("ДокументОснование", Реквизит);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Если СтрокаРеквизита.Реквизит = "Номер" Тогда
						ДанныеЗаполненияШапки.Вставить("НомерЭД", Реквизит);
					ИначеЕсли СтрокаРеквизита.Реквизит = "Дата" Тогда
						ДанныеЗаполненияШапки.Вставить("ДатаЭД", Реквизит);
					Иначе
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
					КонецЕсли;
				ИначеЕсли СтрокаРеквизита.Реквизит = "Организация" Тогда
					ТекстОшибки = ТекстОшибкиЗаполненияОрганизации(СтрокаРеквизита, ДеревоРазбора);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			Иначе
				ЗаполнитьСтрокуТЧ(ТаблицаТоваров, СтрокаРеквизита.Строки, ДеревоРазбора, Ложь,, ИспользоватьСопоставление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Поиск и заполнения договора контрагента.
	Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиНаименование") Тогда
		ДоговорКонтрагента = Неопределено; 
		НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Наименование",
			ДанныеЗаполненияШапки.ДокументСделкиНаименование, ДоговорКонтрагента, ДанныеЗаполненияШапки.Контрагент);
		Если ДоговорКонтрагента = Неопределено 
			И ДанныеЗаполненияШапки.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Контрагент)
			И ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
			
			НовыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговорКонтрагента.Владелец     = ДанныеЗаполненияШапки.Контрагент;
			НовыйДоговорКонтрагента.Организация  = ДанныеЗаполненияШапки.Организация;
			НовыйДоговорКонтрагента.Наименование = ДанныеЗаполненияШапки.ДокументСделкиНаименование;
			Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиНомер") Тогда
				НовыйДоговорКонтрагента.Номер = ДанныеЗаполненияШапки.ДокументСделкиНомер;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиДата") Тогда
				НовыйДоговорКонтрагента.Дата = ДанныеЗаполненияШапки.ДокументСделкиДата;
			КонецЕсли;
			// Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
			//	 НовыйДоговорКонтрагента.ВалютаРасчетов = ДанныеЗаполненияШапки.Валюта;
			// КонецЕсли;
			
			НовыйДоговорКонтрагента.ОбменДанными.Загрузка = Истина;
			НовыйДоговорКонтрагента.Записать();
			ДоговорКонтрагента = НовыйДоговорКонтрагента.Ссылка
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	// Поиск и заполнения договора контрагента.
	Если ДанныеЗаполненияШапки.Свойство("ДокОснованиеНаименование") Тогда
		ДоговорКонтрагента = Неопределено; 
		НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Наименование",
			ДанныеЗаполненияШапки.ДокОснованиеНаименование, ДоговорКонтрагента, ДанныеЗаполненияШапки.Контрагент);
		Если ДоговорКонтрагента = Неопределено 
			И ДанныеЗаполненияШапки.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Контрагент)
			И ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
			
			НовыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговорКонтрагента.Владелец     = ДанныеЗаполненияШапки.Контрагент;
			НовыйДоговорКонтрагента.Организация  = ДанныеЗаполненияШапки.Организация;
			НовыйДоговорКонтрагента.Наименование = ДанныеЗаполненияШапки.ДокОснованиеНаименование;
			Если ДанныеЗаполненияШапки.Свойство("ДокОснованиеНомер") Тогда
				НовыйДоговорКонтрагента.Номер = ДанныеЗаполненияШапки.ДокОснованиеНомер;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("ДокОснованиеДата") Тогда
				НовыйДоговорКонтрагента.Дата = ДанныеЗаполненияШапки.ДокОснованиеДата;
			КонецЕсли;
			// Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
			//	 НовыйДоговорКонтрагента.ВалютаРасчетов = ДанныеЗаполненияШапки.Валюта;
			// КонецЕсли;
			
			НовыйДоговорКонтрагента.ОбменДанными.Загрузка = Истина;
			НовыйДоговорКонтрагента.Записать();
			ДоговорКонтрагента = НовыйДоговорКонтрагента.Ссылка
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("ДоговорКонтрагента",     ДоговорКонтрагента);
	КонецЕсли;
	
	// Поиск и заполнения договора контрагента.
	Если ДанныеЗаполненияШапки.Свойство("НаименованиеОснования") Тогда
		ДоговорКонтрагента = Неопределено;
		НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Наименование",
			ДанныеЗаполненияШапки.НаименованиеОснования, ДоговорКонтрагента, ДанныеЗаполненияШапки.Контрагент);
		Если ДоговорКонтрагента = Неопределено 
			И ДанныеЗаполненияШапки.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Контрагент)
			И ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
			
			НовыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговорКонтрагента.Владелец     = ДанныеЗаполненияШапки.Контрагент;
			НовыйДоговорКонтрагента.Организация  = ДанныеЗаполненияШапки.Организация;
			НовыйДоговорКонтрагента.Наименование = ДанныеЗаполненияШапки.НаименованиеОснования;
			Если ДанныеЗаполненияШапки.Свойство("НомерПоДаннымКлиента") Тогда
				НовыйДоговорКонтрагента.Номер = ДанныеЗаполненияШапки.НомерПоДаннымКлиента;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("ДатаПоДаннымКлиента") Тогда
				НовыйДоговорКонтрагента.Дата = ДанныеЗаполненияШапки.ДатаПоДаннымКлиента;
			КонецЕсли;
			// Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
			//	 НовыйДоговорКонтрагента.ВалютаРасчетов = ДанныеЗаполненияШапки.Валюта;
			// КонецЕсли;
			
			НовыйДоговорКонтрагента.ОбменДанными.Загрузка = Истина;
			НовыйДоговорКонтрагента.Записать();
			ДоговорКонтрагента = НовыйДоговорКонтрагента.Ссылка
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("ДоговорКонтрагента",     ДоговорКонтрагента);
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТаблицаТоваров);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение = Истина)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверитьЗаполнениеБезВыводаОшибок");
	
	Если РежимЗаписиПроведение
		И (ДокументОбъект.Проведен ИЛИ (ДокументОбъект.ЭтоНовый() И ДокументОбъект.ПроверитьЗаполнение()))Тогда
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора, ЭтоЗаказ, ОблагаетсяНДСУПокупателя = Ложь,
	ИспользоватьСопоставление = Ложь, СведенияПрослеживаемости = Неопределено) Экспорт
	
	НовСтрока = ТЗ.Добавить();
	
	Если КолонкаСуществует(ТЗ, "ИдентификаторСтроки") Тогда
		НовСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
				
		Если ИмяРеквизитаВБД = "СуммаСНДС" Тогда
			Если ЭтоЗаказ Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "Сопоставление" Тогда
			Сопоставление = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "ИдентификаторКонтрагента")
				И Сопоставление.Свойство("Идентификатор") Тогда
				Если ЗначениеЗаполнено(Сопоставление.Идентификатор) Тогда
					НовСтрока.ИдентификаторКонтрагента = Сопоставление.Идентификатор;
				КонецЕсли;
			КонецЕсли;
			Если ИспользоватьСопоставление Тогда
				Если КолонкаСуществует(ТЗ, "Номенклатура")
					И Сопоставление.Свойство("НоменклатураИБ") Тогда
					Если ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
						НовСтрока.Номенклатура = Сопоставление.НоменклатураИБ;
					КонецЕсли;
				КонецЕсли;
				Если КолонкаСуществует(ТЗ, "Характеристика")
					И Сопоставление.Свойство("ХарактеристикаИБ") Тогда
					Если ЗначениеЗаполнено(Сопоставление.ХарактеристикаИБ) Тогда
						НовСтрока.Характеристика = Сопоставление.ХарактеристикаИБ;
					КонецЕсли;
				КонецЕсли;
				Если КолонкаСуществует(ТЗ, "ЕдиницаИзмерения")
					И Сопоставление.Свойство("УпаковкаИБ") Тогда
					Если ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
						НовСтрока.ЕдиницаИзмерения = Сопоставление.УпаковкаИБ;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение характеристики номенклатуры и упаковки.
		Если ИмяРеквизитаВБД = "НоменклатураКонтрагента" Тогда
			Если КолонкаСуществует(ТЗ, "Характеристика") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "ЦенаПродажи" Тогда
			Если КолонкаСуществует(ТЗ, "Цена") Тогда
				НовСтрока.Цена = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "СуммаПродажи" Тогда
			Если КолонкаСуществует(ТЗ, "Сумма") Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Цена" Тогда
			Если КолонкаСуществует(ТЗ, "ЦенаПоступления") Тогда
				НовСтрока.ЦенаПоступления =
					ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Сумма" Тогда
			Если КолонкаСуществует(ТЗ, "СуммаПоступления") Тогда
				НовСтрока.СуммаПоступления =
					ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Описание" Тогда
			Если КолонкаСуществует(ТЗ, "Содержание") Тогда
				НовСтрока.Содержание = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "ГТД" Тогда
			Если КолонкаСуществует(ТЗ, "НомерГТД") Тогда
				НовСтрока.НомерГТД = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "СтранаПроисхождения" Тогда
			Если КолонкаСуществует(ТЗ, "СтранаПроисхождения") Тогда
				СтранаПроисхождения = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				НовСтрока.СтранаПроисхождения = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(СтранаПроисхождения);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Наименование"
			ИЛИ ТекСтрока.Реквизит = "НаименованиеНоменклатуры" Тогда
			НаименованиеНоменклатуры = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			Если КолонкаСуществует(ТЗ, "НаименованиеКонтрагента") Тогда
				НовСтрока.НаименованиеКонтрагента = ПредставлениеНоменклатурыПоставщика(НаименованиеНоменклатуры);
			КонецЕсли;
			
			Если КолонкаСуществует(ТЗ, "НаименованиеПоставщика") Тогда
				НовСтрока.НаименованиеПоставщика = НаименованиеНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Количество" Тогда
			Если КолонкаСуществует(ТЗ, "КоличествоУпаковок") Тогда
				НовСтрока.КоличествоУпаковок = ПолучитьЗначениеРеквизитаДерева(
					ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;

		Если ТекСтрока.Реквизит = "КоличествоДоКорректировки" Тогда
			Если КолонкаСуществует(ТЗ, "КоличествоУпаковокДоКорректировки") Тогда
				НовСтрока.КоличествоУпаковокДоКорректировки = ПолучитьЗначениеРеквизитаДерева(
					ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "СведенияОПрослеживаемости" И СведенияПрослеживаемости <> Неопределено Тогда
			СведенияОПрослеживаемостиИзДерева = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		КонецЕсли;
		
		Если Не КолонкаСуществует(ТЗ, ИмяРеквизитаВБД) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		Если ИмяРеквизитаВБД = "СтавкаНДС" Тогда
			СтавкаНДССпр = УчетНДСВызовСервера.СтавкаНДСПоЗначениюПеречисления(НайденноеЗначение); 
			НайденноеЗначение = СтавкаНДССпр;
		КонецЕсли;

		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		
		Если ТекСтрока.Реквизит = "ДатаРеализации" Тогда
			Если КолонкаСуществует(ТЗ, "ДатаРеализации") Тогда
				
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(
					ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				ДатаРеализации = СтрЗаменить(НайденноеЗначение, "-", "");
				ДатаРеализации = СтрЗаменить(ДатаРеализации, "T", "");
				ДатаРеализации = СтрЗаменить(ДатаРеализации, ":", "");
				НовСтрока["ДатаРеализации"] = ?(ЗначениеЗаполнено(ДатаРеализации), Дата(ДатаРеализации), Неопределено);
				СтроковыеФункцииКлиентСервер.СтрокаВДату(НайденноеЗначение);
		
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Номенклатура"  И КолонкаСуществует(ТЗ, "ЕдиницаИзмерения") Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденнаяСтрока = СтрокаНоменклатура.Строки.Найти("ЕдиницаИзмерения", "Реквизит", Истина);
			Если НайденнаяСтрока <> Неопределено
				И ЗначениеЗаполнено(НайденнаяСтрока.ЗначениеРеквизита) Тогда;
				СтрокаЕдиницаИзмерения = ДеревоРазбора.Строки.Найти(НайденнаяСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаЕдиницаИзмерения <> Неопределено Тогда
					Если ЗначениеЗаполнено(СтрокаЕдиницаИзмерения.ЗначениеРеквизита) Тогда
						НовСтрока.ЕдиницаИзмерения = СтрокаЕдиницаИзмерения.ЗначениеРеквизита;
					Иначе
						НовСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ЕдиницаИзмеренияПоКоду(СтрокаЕдиницаИзмерения.ИД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(НовСтрока.СуммаСНДС)
		И КолонкаСуществует(ТЗ, "СуммаСНДС")
		И КолонкаСуществует(ТЗ, "Сумма")
		И КолонкаСуществует(ТЗ, "СуммаНДС") Тогда
		НовСтрока.СуммаСНДС = ?(ОблагаетсяНДСУПокупателя, НовСтрока.Сумма + НовСтрока.СуммаНДС, НовСтрока.Сумма);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки.
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			Если ДеревоЭлектронногоДокументаБЭД.ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора,
					Результат, НайденнаяСтрока) Тогда
				
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника, объект которого надо найти.
//  ИмяРеквизита - Строка - Имя реквизита, по которому будет проведен поиск.
//  ЗначРеквизита - Произвольный - значение реквизита, по которому будет проведен поиск.
//  Результат - СправочникСсылка - Ссылка на найденный объект.
//  Владелец - СправочникСсылка - Ссылка на владельца для поиска в иерархическом справочнике.
//  ТолькоНеПомеченные - Булево - Исключить из поиска помеченные на удаление.
//
Процедура НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Результат, 
	Владелец = Неопределено,
	ТолькоНеПомеченные = Ложь) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ЗначРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Если ТолькоНеПомеченные Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.ПометкаУдаления = Ложь";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);
	
	Если ПустаяСтрока(ОфициальноеНаименование) Тогда
		ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПолноеНаименование", Истина, ДеревоРазбора);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если СсылкаНаВладельца = Неопределено Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.УстановитьНовыйКод();
		Иначе
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаВладельца);
			Блокировка.Заблокировать();
			
			Контрагент = СсылкаНаВладельца.ПолучитьОбъект();
		КонецЕсли;
		
		Контрагент.Наименование = ОфициальноеНаименование;
		Контрагент.НаименованиеПолное = ОфициальноеНаименование;
		Контрагент.ИНН = ИНН;
		Контрагент.КПП = КПП;
		
		Контрагент.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	КонтрагентСсылка = Контрагент.Ссылка;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Функция КолонкаСуществует(Таблица, ИмяКолонки)
	
	Результат = Не (Таблица.Колонки.Найти(ИмяКолонки) = Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеНоменклатурыПоставщика(Наименование, Характеристика = "")
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Представление = СтрШаблон("%1, %2", Наименование, Характеристика);
	Иначе
		Представление = Наименование;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаЭД")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаЭД) Тогда
					
					РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаЭД);
				КонецЕсли;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерЭД")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерЭД) Тогда
					
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерЭД);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы.торо_ЗаказПоставщику.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
		ЗаполнитьНоменклатуруКонтрагентаВТаблицеТоваров(ДокументОбъект.Товары, ДокументОбъект.Контрагент);
		
		ДокументОбъект.СуммаДокумента = ДанныеДляЗагрузки.Товары.Итог("Сумма");
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
						
		Если Записывать Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ЗаписатьДокумент(ДокументОбъект, Ложь);
			УстановитьПривилегированныйРежим(Ложь);
			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки,,, СсылкаНаВладельца);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТекстОшибкиЗаполненияОрганизации(СтрокаРеквизита, ДеревоРазбора)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Не найдена организация по данным электронного документа.'"));
	ИндексСтроки = СтрокаРеквизита.ЗначениеРеквизита;
	СведенияОбОрганизации = ДеревоРазбора.Строки.Найти(ИндексСтроки, "ИндексСтроки", Истина);
	Если СведенияОбОрганизации <> Неопределено Тогда
		СтруктураСведений = Новый Структура("Наименование, ИНН, КПП");
		Для Каждого СтрокаСведений Из СведенияОбОрганизации.Строки Цикл
			Если СтрокаСведений.Реквизит = "ПолноеНаименование" Тогда
				СтруктураСведений.Наименование = СтрокаСведений.ЗначениеРеквизита;
			ИначеЕсли СтрокаСведений.Реквизит = "ИНН" Тогда
				СтруктураСведений.ИНН = СтрокаСведений.ЗначениеРеквизита;
			ИначеЕсли СтрокаСведений.Реквизит = "КПП" Тогда
				СтруктураСведений.КПП = СтрокаСведений.ЗначениеРеквизита;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтруктураСведений.Наименование) Тогда
			ПредставлениеОрганизации = СтруктураСведений.Наименование + ", "
				+ ?(ЗначениеЗаполнено(СтруктураСведений.КПП),
					СтрШаблон(НСтр("ru = 'ИНН/КПП %1/%2.'"), СтруктураСведений.ИНН, СтруктураСведений.КПП),
					СтрШаблон(НСтр("ru = 'ИНН %1.'"), СтруктураСведений.ИНН));
			МассивСтрок.Добавить(ПредставлениеОрганизации);
		КонецЕсли;
	КонецЕсли;
	МассивСтрок.Добавить(НСтр("ru = 'Добавьте организацию в справочник и повторите загрузку.'"));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы.торо_ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТорговыеПредложенияПереопределяемый.ДополнитьТаблицуТоваровКолонкамиПоискаПоИдентификатору(Товары);
	
	ОблагаетсяНДСУПокупателя = Ложь;
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			Если СтрокаРеквизита.Реквизит = "Валюта" Тогда
				ЗначениеРеквизита = ВалютаПоДаннымДереваРазбора(СтрокаРеквизита, ДеревоРазбора);
			Иначе
				ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
			
			Если СтрокаРеквизита.Реквизит = "Курс" Тогда
				ИмяРеквизита = "КурсВзаиморасчетов";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
				ИмяРеквизита = "ДатаЭД";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
				ИмяРеквизита = "НомерЭД";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументыСделки" Тогда
				ИмяРеквизита = "ДокументыСделки";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
				ИмяРеквизита = "Основание";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Дата" ИЛИ СтрокаРеквизита = "ДатаПоставки" 
				ИЛИ СтрНачинаетсяС(СтрокаРеквизита.Реквизит, "ДатаОтгрузки") Тогда 
            	ДанныеЗаполненияШапки.Вставить("ДатаПоставки", ЗначениеРеквизита);
				ИмяРеквизита = "Дата"; 		
			Иначе
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			// Добавим строку табличной части
			ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора, Истина, ОблагаетсяНДСУПокупателя, Истина);

		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ОблагаетсяНДСУПокупателя", ОблагаетсяНДСУПокупателя);
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Перезаполняет реквизиты шапки объекта.
//
// Параметры:
//  ТекущийОбъект    - Объект ИБ, реквизиты шапки которого необходимо заполнить,
//  ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруКонтрагентаВТаблицеТоваров(ТаблицаДокумента, Знач Контрагент)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСопоставлениеНоменклатуры")
		Или ТаблицаДокумента.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Товары = НовыйТаблицаТоваровДляСопоставления();
	Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		НоваяЗапись = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДокумента);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДокумента, "ЕдиницаИзмерения") Тогда
			НоваяЗапись.Упаковка = СтрокаДокумента.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПоиска = СопоставлениеНоменклатурыКонтрагентов.РезультатЗапросаПоискаНоменклатурыКонтрагентаПоНоменклатуреИБ(
		Контрагент, Товары);
	Если РезультатПоиска.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Сопоставления = РезультатПоиска.Выгрузить();
	Сопоставления.Индексы.Добавить("НомерСтроки");
	
	Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		СопоставлениеПоСтроке = Сопоставления.Найти(СтрокаДокумента.НомерСтроки, "НомерСтроки");
		Если СопоставлениеПоСтроке = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокумента.НоменклатураКонтрагента = СопоставлениеПоСтроке.НоменклатураКонтрагента;
	КонецЦикла;

КонецПроцедуры

Функция ВалютаПоДаннымДереваРазбора(СтрокаДерева, ДеревоРазбора)
	
	Результат = Неопределено;
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(СтрокаДерева.ЗначениеРеквизита, "ИндексСтроки", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Если НЕ ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(НайденнаяСтрока.ИД) Тогда
			Попытка
				СписокКодовВалют = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НайденнаяСтрока.ИД);
				СписокВалют = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокКодовВалют);
				Если СписокВалют.Количество() Тогда
					Результат = СписокВалют[0];
				КонецЕсли;
			Исключение
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось добавить валюту по коду %1.'"), НайденнаяСтрока.ИД)
					+ Символы.ПС + НСтр("ru = 'Подробности см. в Журнале регистрации.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание элемента справочника Валюта.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Валюты,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаТоваровДляСопоставления()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Упаковка",
		Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Результат.Колонки.Добавить("НоменклатураКонтрагента",
		Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	
	Возврат Результат;
	
КонецФункции

Процедура НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки, ОписаниеОшибки)
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
		
	ДокументОбъект.Валюта = ОбщегоНазначенияБЭД.НайтиСсылку("Валюты",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
		
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДокументОбъект.НомерЭД, Формат(ДокументОбъект.ДатаЭД,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ОсновнаяСтрокаПродавца = Неопределено;
	Для каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		ДокументОбъект.Контрагент = КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");
		ОсновнаяСтрокаПродавца = СтрокаПродавца;
		Прервать;
	КонецЦикла;
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки");
		Прервать;
	КонецЦикла;

	// Поиск и заполнение договора контрагента.
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОснованиеОтгрузки, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер");
			Если ЗначениеЗаполнено(ДоговорНомер) Тогда
				
				ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата");
				
				СвойстваДоговора = Новый Структура;
				СвойстваДоговора.Вставить("Номер", ДоговорНомер);
				СвойстваДоговора.Вставить("Дата", ДоговорДата);
				СвойстваДоговора.Вставить("Организация", ДокументОбъект.Организация);
				СвойстваДоговора.Вставить("Контрагент", ДокументОбъект.Контрагент);
				
				ДоговорКонтрагента = ОбщегоНазначенияБЭД.НайтиСсылку("ДоговорыКонтрагентов",, СвойстваДоговора);
				ДокументОбъект.Договор = ДоговорКонтрагента;
				
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
		
	ЕстьТовары = Ложь;
	ЕстьРаботы = Ложь;
	ЕстьПрава  = Ложь;
	
	ОблагаетсяНДСУПокупателя = Ложь;
	ИспользоватьСопоставлениеНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСопоставлениеНоменклатуры");
	
	ДокументОбъект.Товары.Очистить();
	
	ТаблицаТоваров = ДокументОбъект.Товары.ВыгрузитьКолонки();
	ТорговыеПредложенияПереопределяемый.ДополнитьТаблицуТоваровКолонкамиПоискаПоИдентификатору(ТаблицаТоваров);
	
	// Сведения таблицы.
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		
		Если Признак = "1" Тогда
			ЕстьТовары = Истина;
		ИначеЕсли Признак = "2" ИЛИ Признак = "3" Тогда
			ЕстьРаботы = Истина;
		ИначеЕсли Признак = "4" Тогда
			ЕстьПрава  = Истина;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.КоличествоУпаковок = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Количество"); 
		НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
		Если НоваяСтрока.Цена = 0 И НоваяСтрока.Количество <> 0
			И (Признак = "2" ИЛИ Признак = "3") Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		КонецЕсли;
		
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = "НДС исчисляется налоговым агентом" Тогда
			НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.СтавкаНДС = УчетНДСВызовСервера.СтавкаНДСПоЗначениюПеречисления(СтавкаНДС);
			НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЕсли;
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);  
		
		Если Сопоставление <> Неопределено Тогда
			
			Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Сопоставление.Идентификатор");
			Если ЗначениеЗаполнено(Идентификатор) Тогда
				НоваяСтрока.ИдентификаторКонтрагента = Идентификатор;
			КонецЕсли;
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТоваров);
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ДокументОбъект);
	
	РежимЗаписиПроведение = Ложь;
	
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ИнтерфейсДокументовЭДО.ЗагрузкаПросмотрЭлектронногоДокумента"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Контрагент = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Контрагенты.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		
		Фамилия  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		
		ЭлементыИмени = Новый Массив;
		Если ЗначениеЗаполнено(Фамилия) Тогда
			ЭлементыИмени.Добавить(Фамилия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Имя) Тогда
			ЭлементыИмени.Добавить(Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Отчество) Тогда
			ЭлементыИмени.Добавить(Отчество);
		КонецЕсли;
		ПолноеНаименование = СтрСоединить(ЭлементыИмени, " ");
		
		Если ЗначениеЗаполнено(ИНН) Или ЗначениеЗаполнено(НаименованиеПолное) Тогда 
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН";
			Если ЗначениеЗаполнено(ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ИНН);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.ИНН = &ИНН", "Контрагенты.НаименованиеПолное = &НаименованиеПолное");
				Запрос.УстановитьПараметр("НаименованиеПолное", ПолноеНаименование);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Организация = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		КПП = ?(КПП = Неопределено, "", КПП);
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Организации.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Процедура НайтиСоздатьУПД0Закупка_2019(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки, ОписаниеОшибки)
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
		
	ДокументОбъект.Валюта = ОбщегоНазначенияБЭД.НайтиСсылку("Валюты",
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДокументОбъект.НомерЭД, Формат(ДокументОбъект.ДатаЭД,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ОсновнаяСтрокаПродавца = Неопределено;
	Для каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		ДокументОбъект.Контрагент = КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			ДокументОбъект.Контрагент = СоздатьКонтрагентаПоДаннымУПД(СтрокаПродавца, "СведенияОПокупателе.НомерСтроки");
		КонецЕсли;
		ОсновнаяСтрокаПродавца = СтрокаПродавца;
		Прервать;
	КонецЦикла;
	
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОКомитенте");
		
	// Поиск и заполнение договора контрагента.
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОснованиеОтгрузки, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер");
			Если ЗначениеЗаполнено(ДоговорНомер) Тогда
				
				ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата");
				
				СвойстваДоговора = Новый Структура;
				СвойстваДоговора.Вставить("НомерДоговора", ДоговорНомер);
				СвойстваДоговора.Вставить("ДатаДоговора", ДоговорДата);
				СвойстваДоговора.Вставить("Организация", ДокументОбъект.Организация);
				СвойстваДоговора.Вставить("Владелец", ДокументОбъект.Контрагент);
				
				ДоговорКонтрагента = ОбщегоНазначенияБЭД.НайтиСсылку("ДоговорыКонтрагентов",, СвойстваДоговора);
				ДокументОбъект.Договор = ДоговорКонтрагента;
				
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	ИспользоватьСопоставлениеНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСопоставлениеНоменклатуры");
	
	ДокументОбъект.Товары.Очистить();
	
	ТаблицаТоваров = ДокументОбъект.Товары.ВыгрузитьКолонки();
	ТорговыеПредложенияПереопределяемый.ДополнитьТаблицуТоваровКолонкамиПоискаПоИдентификатору(ТаблицаТоваров);
	
	// Сведения таблицы.
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.КоличествоУпаковок = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
		Если НоваяСтрока.Цена = 0 И НоваяСтрока.Количество <> 0
			И (Признак = "2" ИЛИ Признак = "3") Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		КонецЕсли;
		
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = "НДС исчисляется налоговым агентом" Тогда
			НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЕсли;
				
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.Идентификатор");
			Если ЗначениеЗаполнено(Идентификатор) Тогда
				НоваяСтрока.ИдентификаторКонтрагента = Идентификатор;
			КонецЕсли;
			
			Если ИспользоватьСопоставлениеНоменклатуры Тогда
			
				Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					НоваяСтрока.Номенклатура = Номенклатура;
				КонецЕсли;
				
				Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
				Если ЗначениеЗаполнено(Характеристика) Тогда
					НоваяСтрока.Характеристика = Характеристика;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТоваров);
		
	ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом");
		
	РежимЗаписиПроведение = Истина;
	
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ИнтерфейсДокументовЭДО.ЗагрузкаПросмотрЭлектронногоДокумента"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьКонтрагентаПоДаннымУПД(ДеревоДанныхУПД, ВидУчастника)
	
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Контрагент.ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		Контрагент.КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Контрагент.Наименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель;
		Контрагент.ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Фамилия  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Имя 	 = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Отчество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Контрагент.Наименование = СокрЛП(СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество));
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Контрагент.Наименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Контрагент.ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		Фамилия  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанныхУПД, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		Контрагент.Наименование = СокрЛП(СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество));
		
	КонецЕсли;
	
	Контрагент.НаименованиеПолное = Контрагент.Наименование;
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции

#КонецОбласти