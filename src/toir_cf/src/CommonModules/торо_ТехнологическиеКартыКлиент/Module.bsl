#Область СлужебныйПрограммныйИнтерфейс

#Область ПараллельноеВыполнениеТОТК

Процедура УказатьПараллельноВыполняемые(ДеревоРемонтныхРабот, РемонтныеРаботы) Экспорт
	
	ТекущиеДанные = ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ЭтоДеревоРемонтныхРабот = Ложь;
	Если ДеревоРемонтныхРабот.Имя = "ДеревоРемонтныхРабот" Тогда
		// Для всех форм, где есть дерево РР (РМ диспетчера, ресурсное планирование, документы по ремонтам)
	    ЭтоДеревоРемонтныхРабот = Истина;
	КонецЕсли;

	// В РМ Диспетчера нет ТЧ ремонтных работ, поэтому передается список соседних строк через ПолучитьЭлементы().
	Если ДеревоРемонтныхРабот.Имя = "ДеревоРемонтныхРабот" И ТипЗнч(РемонтныеРаботы) = Тип("ДанныеФормыКоллекция") Тогда
		Если ТекущиеДанные.Свойство("РемонтыОборудования_ID") Тогда
			// Для документов и ресурсного планирования, чтобы сделать отбор по конкретному ремонту
		    СтруктураПоиска = Новый Структура("Родитель_ID, РемонтыОборудования_ID", ТекущиеДанные.Родитель_ID, ТекущиеДанные.РемонтыОборудования_ID);
		Иначе
			// Для РМ Диспетчера, т.к. списка ремонтов нет
			СтруктураПоиска = Новый Структура("Родитель_ID", ТекущиеДанные.Родитель_ID);
		КонецЕсли;
		
		КоллекцияДляОбхода = РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
	Иначе
		// Для формы элемента ТК, т.к. там не дерево, а плоский список
		КоллекцияДляОбхода = РемонтныеРаботы;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
    СтруктураПараметров.Вставить("ID_ПараллельнойОперации", ТекущиеДанные.ID_ПараллельнойОперации);
    СтруктураПараметров.Вставить("ID_Операции", ТекущиеДанные.ID);
	
	МассивСтруктур = Новый Массив();
	
	Для каждого СтрокаТЧ Из КоллекцияДляОбхода Цикл
		Если СтрокаТЧ.ID = ТекущиеДанные.ID Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтроки = Новый Структура();
		
		СтруктураСтроки.Вставить("ID_Операции", СтрокаТЧ.ID);
		СтруктураСтроки.Вставить("ID_ПараллельнойОперации", СтрокаТЧ.ID_ПараллельнойОперации);
		
		// Везде в дереве РР реквизит называется РемонтнаяРабота, а в ТК - Операция
		Если ЭтоДеревоРемонтныхРабот Тогда
			СтруктураСтроки.Вставить("ТехОперация", СтрокаТЧ.РемонтнаяРабота);
		Иначе
			СтруктураСтроки.Вставить("ТехОперация", СтрокаТЧ.Операция);
		КонецЕсли;
		
		МассивСтруктур.Добавить(СтруктураСтроки);
	КонецЦикла; 

	СтруктураПараметров.Вставить("СписокТехОпераций", МассивСтруктур);
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.Форма.ВыборПараллельныхРабот", СтруктураПараметров, ДеревоРемонтныхРабот,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(ТЧРемонтныхРабот, ID_ПараллельнойОперацииУдаляемая, СтрокаРодителя = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура("ID_ПараллельнойОперации", ID_ПараллельнойОперацииУдаляемая);
	НайденныеСтроки = ТЧРемонтныхРабот.НайтиСтроки(СтруктураПоиска);
	
	// Если параллельными были только две операции, то после удаления/перетаскивания на другой уровень
	// оставшаяся операция теперь является последовательной - снимаем ей признак параллельности.
	Если Не НайденныеСтроки.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].ID_ПараллельнойОперации = "";
	
	// Если было 2 параллельных операции и одну из них удалили, то для второй в дереве РР нужно очистить
	// ID_ПараллельнойОперации и обновить картинку, т.к. при удалении дерево не перестраивается (при
	// перетаскивании обновляется)
	Если СтрокаРодителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиДерева = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(СтрокаРодителя, СтруктураПоиска, 1, 1, 1);
	Если НайденныеСтрокиДерева.Количество() = 1 Тогда
		НайденныеСтрокиДерева[0].ID_ПараллельнойОперации = "";
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НайденныеСтрокиДерева[0]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти