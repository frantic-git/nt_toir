#Область ПрограммныйИнтерфейс

// Функция - Получить таблицу порядка статусов документов.
// Параметры:
//   ДокументыПоРемонтам - СписокЗначений - список документов по ремонтам.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с указанием порядка статусов документов, имеет колонки "ТипДокумента" пустая ссылка
//						на документ соответствующего типа,
//						Статус - Статус документа, тип - ПеречислениеСсылка.торо_СтатусыДокументов,
//						Порядок - прядок статусов, тип - число.
Функция ПолучитьТаблицуПорядкаСтатусовДокументов(ДокументыПоРемонтам) Экспорт 
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"));
	
	ТаблицаПорядкаСтатусов = Новый ТаблицаЗначений;
	ТаблицаПорядкаСтатусов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов(МассивТипов));
	ТаблицаПорядкаСтатусов.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыДокументов"));
	ТаблицаПорядкаСтатусов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого Элем Из ДокументыПоРемонтам Цикл
		
		// Порядок статусов выявленных дефектов
		Если ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_ВыявленныеДефекты.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 0;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ЗапланированоУстранение;
			НС.Порядок = 1;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ВРаботе;
			НС.Порядок = 2;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполнен;
			НС.Порядок = 3;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 4;
			
			// Порядок статусов предписаний
		ИначеЕсли ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 0;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ЗапланированоУстранение;
			НС.Порядок = 1;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ВРаботе;
			НС.Порядок = 2;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполнен;
			НС.Порядок = 3;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 4;
			
			// Порядок статусов заявок на ремонт
		ИначеЕсли ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 1;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ВРаботе;
			НС.Порядок = 2;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполнен;
			НС.Порядок = 3;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 4;
			
			// Порядок статусов нарядов на ремонтные работы
		ИначеЕсли ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 1;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ВРаботе;
			НС.Порядок = 2;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполнен;
			НС.Порядок = 3;
			
			// Порядок статусов нарядов на мероприятия
		ИначеЕсли ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 1;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ВРаботе;
			НС.Порядок = 2;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполнен;
			НС.Порядок = 3;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПорядкаСтатусов;
	
КонецФункции

// Возвращает таблицу с приоритетам смены статусов ремонта в зависимости 
// от статуса ремонтов у исполнителей. Более высокий приоритет означает, 
// что при наличии такого статуса хотя бы у одного исполнителя, статус ремонта
// будет изменен. Чем больше число - тем выше приоритет.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица приоритетов.
//
Функция ПолучитьТаблицуПриоритетовСтатусовРемонта() Экспорт
	
	ТаблицаПорядкаСтатусов = Новый ТаблицаЗначений;
	ТаблицаПорядкаСтатусов.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыРемонтов"));
	ТаблицаПорядкаСтатусов.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	НоваяСтрока = ТаблицаПорядкаСтатусов.Добавить();
	НоваяСтрока.Статус = Перечисления.торо_СтатусыРемонтов.Зарегистрирован;
	НоваяСтрока.Приоритет = 0;
	
	НоваяСтрока = ТаблицаПорядкаСтатусов.Добавить();
	НоваяСтрока.Статус = Перечисления.торо_СтатусыРемонтов.ЗапланированоУстранение;
	НоваяСтрока.Приоритет = 1;
	
	НоваяСтрока = ТаблицаПорядкаСтатусов.Добавить();
	НоваяСтрока.Статус = Перечисления.торо_СтатусыРемонтов.ВозобновленоПослеОтказа;
	НоваяСтрока.Приоритет = 2;

	НоваяСтрока = ТаблицаПорядкаСтатусов.Добавить();
	НоваяСтрока.Статус = Перечисления.торо_СтатусыРемонтов.ОтказИсполнителя;
	НоваяСтрока.Приоритет = 3;
	
	НоваяСтрока = ТаблицаПорядкаСтатусов.Добавить();
	НоваяСтрока.Статус = Перечисления.торо_СтатусыРемонтов.ОтказПодразделения;
	НоваяСтрока.Приоритет = 4;
	
	НоваяСтрока = ТаблицаПорядкаСтатусов.Добавить();
	НоваяСтрока.Статус = Перечисления.торо_СтатусыРемонтов.Выполнен;
	НоваяСтрока.Приоритет = 5;

	НоваяСтрока = ТаблицаПорядкаСтатусов.Добавить();
	НоваяСтрока.Статус = Перечисления.торо_СтатусыРемонтов.ВРаботе;
	НоваяСтрока.Приоритет = 6;
	
	Возврат ТаблицаПорядкаСтатусов;
	
КонецФункции

#КонецОбласти
