#Область ПрограммныйИнтерфейс
// Отправка группы уведомлений о заявке в мобильное приложение.
//
// Параметры:
//  СсылкаНаЗаявку - ДокументСсылка.торо_ЗаявкаНаРемонт - источник оповещения.
//  НоваяЗаявка    - Булево - признак, что заявка еще не была отправлена в мобильное приложение.  
//  Отказ          - Булево - отказ. 
//  СписокБригад   - Список значения - список бригад исполнителей по ремонтам из заявки.
Процедура ОтправитьУведомлениеОЗаявке(СсылкаНаЗаявку, НоваяЗаявка, Отказ, СписокБригад) Экспорт
	
	Если НЕ Отказ И СписокБригад.Количество() > 0 Тогда
		
		Если НоваяЗаявка Тогда
			Заголовок = "Новая заявка";
		Иначе
			Заголовок = "Изменение заявки";
		КонецЕсли;
		Текст = "Заявка " + СсылкаНаЗаявку.Номер;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		                |	торо_МобильныеПриложения.Узел КАК Узел,
		                |	mobileBrigades.ИДПодписчикаУведомлений КАК ИДПодписчикаУведомлений
		                |ИЗ
		                |	РегистрСведений.торо_МобильныеПриложения КАК торо_МобильныеПриложения
		                |		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.mobileBrigades КАК mobileBrigades
		                |		ПО торо_МобильныеПриложения.Узел = mobileBrigades.Ссылка
		                |ГДЕ
		                |	торо_МобильныеПриложения.МобильноеПриложение = ЗНАЧЕНИЕ(Перечисление.торо_МобильноеПриложение.МобильныеБригады)
		                |	И mobileBrigades.ИспользоватьЗаявки
		                |	И mobileBrigades.Бригада В(&СписокБригад)";
		
		Запрос.УстановитьПараметр("СписокБригад", СписокБригад);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИдентификаторПодписчикаУведомлений = Выборка.ИДПодписчикаУведомлений.Получить();
			Если ИдентификаторПодписчикаУведомлений <> Неопределено Тогда
				Данные = Строка(СсылкаНаЗаявку.УникальныйИдентификатор()); 
				Попытка
					ОтправитьPushУведомление(ИдентификаторПодписчикаУведомлений, Заголовок, Текст, Данные);	
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка push уведомления'"), УровеньЖурналаРегистрации.Ошибка,, ОписаниеОшибки);
				КонецПопытки;	
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Отправка группы уведомлений о наряде в мобильное приложение.
//
// Параметры:
//  СсылкаНаНаряд - ДокументСсылка.торо_НарядНаРегламентноеМероприятие - источник оповещения.
//  НовыйНаряд    - Булево - признак, что наряд еще не был отправлен в мобильное приложение.  
//  Отказ         - Булево - отказ.
Процедура ОтправитьУведомлениеОНаряде(СсылкаНаНаряд, НовыйНаряд, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_ГрафикРМПланРемонтов.Исполнитель КАК Исполнитель
		               |ИЗ
		               |	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_РегламентныеМероприятия
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРМПланРемонтов
		               |		ПО торо_РегламентныеМероприятия.ДокументИсточник = торо_ГрафикРМПланРемонтов.Ссылка
		               |			И торо_РегламентныеМероприятия.ID = торо_ГрафикРМПланРемонтов.ID
		               |ГДЕ
		               |	торо_РегламентныеМероприятия.Ссылка = &Ссылка
		               |	И торо_ГрафикРМПланРемонтов.Исполнитель ССЫЛКА Справочник.СтруктураПредприятия";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаНаряд);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		МассивПодразделений = Результат.Выгрузить().ВыгрузитьКолонку("Исполнитель");
		
		Если НовыйНаряд Тогда
			Заголовок = "Новый обход";
		Иначе
			Заголовок = "Изменение обхода";
		КонецЕсли;
		Текст = "Обход " + СсылкаНаНаряд.Номер;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		                |	торо_МобильныеПриложения.Узел КАК Узел,
		                |	mobileBrigades.ИДПодписчикаУведомлений КАК ИДПодписчикаУведомлений
		                |ИЗ
		                |	РегистрСведений.торо_МобильныеПриложения КАК торо_МобильныеПриложения
		                |		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.mobileBrigades КАК mobileBrigades
		                |		ПО торо_МобильныеПриложения.Узел = mobileBrigades.Ссылка
		                |ГДЕ
		                |	торо_МобильныеПриложения.МобильноеПриложение = ЗНАЧЕНИЕ(Перечисление.торо_МобильноеПриложение.МобильныеБригады)
		                |	И mobileBrigades.ИспользоватьРегламентныеМероприятия
		                |	И mobileBrigades.Подразделение В(&МассивПодразделений)";
		
		Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИдентификаторПодписчикаУведомлений = Выборка.ИДПодписчикаУведомлений.Получить();
			Если ИдентификаторПодписчикаУведомлений <> Неопределено Тогда
				Данные = Строка(СсылкаНаНаряд.УникальныйИдентификатор()); 
				Попытка
					ОтправитьPushУведомление(ИдентификаторПодписчикаУведомлений, Заголовок, Текст, Данные);	
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка push уведомления'"), УровеньЖурналаРегистрации.Ошибка,, ОписаниеОшибки);
				КонецПопытки;	
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Отправление самого push-уведомления.
//
// Параметры:
//  ИдентификаторПодписчикаУведомлений - ХранилищеЗначения - идентификатор получающего данные устройства.
//  Заголовок - Строка - заголовок уведомления.
//  Текст - Строка - текст уведомления.
//  Данные - Строка - ссылка на источник уведомления.
Процедура ОтправитьPushУведомление(ИдентификаторПодписчикаУведомлений, Заголовок, Текст, Данные) Экспорт
	
	Если НЕ ИдентификаторПодписчикаУведомлений.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.APNS Тогда
		
		КлючСервера = "AAAAGMb_R4s:APA91bHJTVUtHpnWckE7H0FvijkzrvJnZyMDwxP0mezJqt7QQDJRQ3KZ3vCog6LajtzaIseWMXGCG6WFWcDQlTU0v-z47qUK_0pcbyBPTVTqdQcuoR2VpGKNNwy5jh243OWvcCgfrxAP";
		
		HTTPСоединение = Новый HTTPСоединение("fcm.googleapis.com",,,,,, Новый ЗащищенноеСоединениеOpenSSL());
		
		Заголовки = Новый Соответствие(); 
		Заголовки.Вставить("Authorization", "key=" + КлючСервера); 
		Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		
		HTTPЗапрос = Новый HTTPЗапрос("/fcm/send", Заголовки);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("data");        
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("data");
		ЗаписьJSON.ЗаписатьЗначение(Данные);    
		ЗаписьJSON.ЗаписатьИмяСвойства("base");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторПодписчикаУведомлений.ИдентификаторИнформационнойБазы);
		ЗаписьJSON.ЗаписатьИмяСвойства("title");
		ЗаписьJSON.ЗаписатьЗначение(Заголовок);
		ЗаписьJSON.ЗаписатьИмяСвойства("text");
		ЗаписьJSON.ЗаписатьЗначение(Текст);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("collapse_key");
		ЗаписьJSON.ЗаписатьЗначение("desnol-toir30-mb");
		ЗаписьJSON.ЗаписатьИмяСвойства("to");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторПодписчикаУведомлений.ИдентификаторУстройства);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		СтрокаЗапроса = ЗаписьJSON.Закрыть();
		
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса, КодировкаТекста.UTF8);
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
		
		Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
		
	Иначе
		
		НаклейкаУведомления = 0;
		Сертификат = ПолучитьОбщийМакет("торо_APNsСертификат");
		
		ДанныеАвторизации = Новый Соответствие;
		ДанныеАвторизации.Вставить(ТипПодписчикаДоставляемыхУведомлений.APNS, Сертификат);
		
		Уведомление = Новый ДоставляемоеУведомление;
		Уведомление.Получатели.Добавить(ИдентификаторПодписчикаУведомлений);
		Уведомление.Заголовок = Заголовок;
		Уведомление.Текст = Текст;
		Уведомление.Данные = Данные;
		Уведомление.Наклейка = НаклейкаУведомления;
		Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.ПоУмолчанию;
		
		ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАвторизации);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти