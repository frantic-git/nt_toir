////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными"
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура Обмен_mobileBrigades_ЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Сотрудники.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |ГДЕ
		               |	Сотрудники.ФизическоеЛицо В(&ФизЛицо)";
		
		МассивФизЛиц = Новый Массив;
		Если ЗначениеЗаполнено(Источник.ФизическоеЛицо) Тогда
			МассивФизЛиц.Добавить(Источник.ФизическоеЛицо);
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.Ссылка)И ЗначениеЗаполнено(Источник.Ссылка.ФизическоеЛицо) Тогда
			МассивФизЛиц.Добавить(Источник.Ссылка.ФизическоеЛицо);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ФизЛицо", МассивФизЛиц);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Ссылка = Выборка.Ссылка;
				ОбъектСотрудник = Ссылка.ПолучитьОбъект();
				ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("mobileBrigades", ОбъектСотрудник, Отказ);
				
				Получатели = Новый Массив;
				Для Каждого Узел Из ОбъектСотрудник.ОбменДанными.Получатели Цикл
					Получатели.Добавить(Узел);
				КонецЦикла;
				
				Если Получатели.Количество() > 0 Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
			
	Иначе
		ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("mobileBrigades", Источник, Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура Обмен_mobileBrigades_ЗарегистрироватьИзменениеНабораЗаписейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.торо_ИерархическиеСтруктурыОР") Тогда
		ЗарегистрироватьИзмененияОбъектаРемонтаПриЗаписиИерархии(Источник, Отказ, Замещение);
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.торо_РасположениеОРВСтруктуреИерархии") Тогда
		ЗарегистрироватьИзмененияОбъектаРемонтаПриЗаписиИерархииДокументами(Источник, Отказ, Замещение);
	Иначе
		ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("mobileBrigades", Источник, Отказ, Замещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура Обмен_mobileBrigades_ЗарегистрироватьИзменениеПриЗаписи(Источник, Отказ) Экспорт

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		
		УстановитьПривилегированныйРежим(Истина);	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	mobileBrigades.Ссылка КАК Ссылка,
		               |	mobileBrigades.ИспользоватьЗаявки КАК ИспользоватьЗаявки
		               |ИЗ
		               |	ПланОбмена.mobileBrigades КАК mobileBrigades
		               |ГДЕ
		               |	mobileBrigades.ИспользоватьЗаявки = ИСТИНА
		               |	И НЕ mobileBrigades.Ссылка = &ЭтотУзел";
		
		
		ЭтотУзел = ПланыОбмена.mobileBrigades.ЭтотУзел();
		Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
		
		Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если Получатели.Количество() > 0 И ЗначениеЗаполнено(Источник.Ссылка) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Источник.Ссылка);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);	
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") Тогда
		
		УстановитьПривилегированныйРежим(Истина);	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	mobileBrigades.Ссылка КАК Ссылка,
		               |	mobileBrigades.ИспользоватьРегламентныеМероприятия КАК ИспользоватьРегламентныеМероприятия
		               |ИЗ
		               |	ПланОбмена.mobileBrigades КАК mobileBrigades
		               |ГДЕ
		               |	mobileBrigades.ИспользоватьРегламентныеМероприятия = ИСТИНА
		               |	И НЕ mobileBrigades.Ссылка = &ЭтотУзел";
		
		ЭтотУзел = ПланыОбмена.mobileBrigades.ЭтотУзел();
		Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
		
		Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если Получатели.Количество() > 0 И ЗначениеЗаполнено(Источник.Ссылка) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Источник.Ссылка);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);		
	КонецЕсли;
	
КонецПроцедуры

Процедура Обмен_mobileBrigades_ЗарегистрироватьИзменениеПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("mobileBrigades", Источник, Отказ);
	
КонецПроцедуры

// Выполняет регистрацию заявок на ремонт, 
// которые должны прийти на устройство всвязи с изменением внешних (по отношению к заявкам)
// параметров: изменение подразделения, назначенного устройству; 
// изменение подразделения-исполнителя в объекте ремонта и др.
Процедура ЗарегистрироватьЗаявкиПриИзмененииПараметров(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ИзменениеОР") 
		И СтруктураПараметров.ИзменениеОР = Истина
		И СтруктураПараметров.Свойство("ОбъектРемонта") Тогда
		
		Подразделение = СтруктураПараметров.ОбъектРемонта.ПодразделениеИсполнитель;
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	mobileBrigades.Ссылка КАК Ссылка
			               |ИЗ
			               |	ПланОбмена.mobileBrigades КАК mobileBrigades
			               |ГДЕ
			               |	mobileBrigades.Подразделение = &Подразделение
			               |	И mobileBrigades.ИспользоватьЗаявки = ИСТИНА
			               |	И НЕ mobileBrigades.Ссылка = &ЭтотУзел";
			
			
			ЭтотУзел = ПланыОбмена.mobileBrigades.ЭтотУзел();
			Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
			
			Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			Если Получатели.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Ссылка,
				|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID
				|ПОМЕСТИТЬ ВТ_ДанныеЗаявок
				|ИЗ
				|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
				|ГДЕ
				|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен = ИСТИНА
				|	И торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Ссылка,
				|	ID
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_СтатусыДокументовСрезПоследних.ИзменяемыйДокумент КАК Документ,
				|	торо_СтатусыДокументовСрезПоследних.Статус КАК СтатусДокумента
				|ПОМЕСТИТЬ ВТ_СтатусыДокументов
				|ИЗ
				|	РегистрСведений.торо_СтатусыДокументов.СрезПоследних(
				|			,
				|			ИзменяемыйДокумент В
				|				(ВЫБРАТЬ
				|					ВТ_ДанныеЗаявок.Ссылка КАК Ссылка
				|				ИЗ
				|					ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок)) КАК торо_СтатусыДокументовСрезПоследних
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_СтатусыРемонтовСрезПоследних.IDРемонта КАК ИДРемонта,
				|	торо_СтатусыРемонтовСрезПоследних.Статус КАК Статус
				|ПОМЕСТИТЬ ВТ_СтатусыРемонтов
				|ИЗ
				|	РегистрСведений.торо_СтатусыРемонтов.СрезПоследних(
				|			,
				|			(IDРемонта) В
				|				(ВЫБРАТЬ
				|					ВТ_ДанныеЗаявок.ID КАК ID
				|				ИЗ
				|					ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок)) КАК торо_СтатусыРемонтовСрезПоследних
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ИДРемонта
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ДанныеЗаявок.Ссылка КАК Ссылка
				|ИЗ
				|	ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыДокументов КАК ВТ_СтатусыДокументов
				|		ПО ВТ_ДанныеЗаявок.Ссылка = ВТ_СтатусыДокументов.Документ
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыРемонтов КАК ВТ_СтатусыРемонтов
				|		ПО ВТ_ДанныеЗаявок.ID = ВТ_СтатусыРемонтов.ИДРемонта
				|ГДЕ
				|	НЕ ЕСТЬNULL(ВТ_СтатусыРемонтов.Статус, ВТ_СтатусыДокументов.СтатусДокумента) В (&СтатусВыполнен)";
				
				МассивВыполненныхСтатусов = Новый Массив;
				МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.Выполнен);
				МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.Отменен);
				МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыДокументов.Выполнен);
				МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыДокументов.Отклонен);
				
				Запрос.УстановитьПараметр("СтатусВыполнен", МассивВыполненныхСтатусов);
				Запрос.УстановитьПараметр("ОбъектРемонта", СтруктураПараметров.ОбъектРемонта);
				
				ВыборкаЗаявок = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаЗаявок.Следующий() Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(Получатели, ВыборкаЗаявок.Ссылка);
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияОбъектаРемонтаПриЗаписиИерархии(НаборЗаписей, Отказ, Замещение)
	
	МассивОРДляРегистрации = Новый Массив;
	Если НаборЗаписей.Количество() > 0 Тогда
		Для каждого Запись из НаборЗаписей Цикл
			МассивОРДляРегистрации.Добавить(Запись.ОбъектИерархии); 
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(НаборЗаписей.Отбор.ОбъектИерархии.Значение) Тогда
			МассивОРДляРегистрации.Добавить(НаборЗаписей.Отбор.ОбъектИерархии.Значение);
		КонецЕсли;
	КонецЕсли;
	
	ЗарегистрироватьИзмененияПоМассивуОбъектовРемонта(МассивОРДляРегистрации, Отказ);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияОбъектаРемонтаПриЗаписиИерархииДокументами(НаборЗаписей, Отказ, Замещение)
	
	МассивОРДляРегистрации = Новый Массив;
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	
	Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросОРВСтаромНаборе = Новый Запрос;
	ЗапросОРВСтаромНаборе.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                              |	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии КАК ОбъектИерархии
	                              |ИЗ
	                              |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии КАК торо_РасположениеОРВСтруктуреИерархии
	                              |ГДЕ
	                              |	торо_РасположениеОРВСтруктуреИерархии.Регистратор = &Регистратор";
	
	ЗапросОРВСтаромНаборе.УстановитьПараметр("Регистратор", Регистратор);
	ВыборкаОРВстаровНаборе = ЗапросОРВСтаромНаборе.Выполнить().Выбрать();
	
	Пока ВыборкаОРВстаровНаборе.Следующий() Цикл
		МассивОРДляРегистрации.Добавить(ВыборкаОРВстаровНаборе.ОбъектИерархии);
	КонецЦикла;
	
	Для каждого Запись из НаборЗаписей Цикл
		Если МассивОРДляРегистрации.Найти(Запись.ОбъектИерархии) = Неопределено Тогда
			МассивОРДляРегистрации.Добавить(Запись.ОбъектИерархии);
		КонецЕсли;
	КонецЦикла;
	
	ЗарегистрироватьИзмененияПоМассивуОбъектовРемонта(МассивОРДляРегистрации, Отказ);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПоМассивуОбъектовРемонта(МассивОР, Отказ)
	
	Если МассивОР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	mobileBrigades.Ссылка КАК Ссылка,
	               |	mobileBrigades.ИспользоватьЗаявки КАК ИспользоватьЗаявки
	               |ИЗ
	               |	ПланОбмена.mobileBrigades КАК mobileBrigades
	               |ГДЕ
	               |	НЕ mobileBrigades.ПометкаУдаления
	               |	И НЕ mobileBrigades.Ссылка = &ЭтотУзел";
	
	ЭтотУзел = ПланыОбмена.mobileBrigades.ЭтотУзел();
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);

	Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОбъектРемонта из МассивОР Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, ОбъектРемонта);
	КонецЦикла;
				
КонецПроцедуры

#КонецОбласти
