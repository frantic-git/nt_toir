////////////////////////////////////////////////////////////////////////////////
// торо_ЗаполнениеДокументовКлиент:  процедуры и функции,
// получающие значения для подстановки в документы при их создании.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму подбора продолжительности.
// Параметры:
//		ПродолжительностьВСекундах - Число - исходная продолжительность в секундах.
//		Владелец - ПолеНадписи - элемент, в который выводится текст.
//		Уникальность - Произвольный - ключ уникальности формы.
//
Процедура ОткрытьФормуПодбораПродолжительности(ПродолжительностьВСекундах, Владелец, Уникальность = "") Экспорт
	
	СтруктураПараметров = Новый Структура("ПродолжительностьВСекундах", ПродолжительностьВСекундах);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности",СтруктураПараметров, Владелец, Уникальность, ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму выбора документов-оснований ремонтов с необходимыми параметрами.
// Параметры:
//		ТипДокумента - Тип - тип значения документа, форму выбора которогонужно открыть.
//		ТекущийДокументОснование - ДокументСсылка - ссылка на текущий выбранный в строке документ-основание.
//		Элемент - ПолеФормы - элемент-колонка таблицы на форме, в которую выбирается документ.
//		КлючУникальности - Произвольный - ключ уникальности для открываемой формы.
//		ДляПодбора - Булево - Если истина, то будет наложен дополнительный отбор по полю "НеИспользоватьВПодборах".
Процедура ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ТипДокумента, ТекущийДокументОснование, Элемент, КлючУникальности, ДляПодбора = Ложь) Экспорт
	
	Если ТипДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураФО = Новый Структура("торо_ИспользоватьСтатусыДокументовТОиР");
	торо_ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруФункциональныхОпций(СтруктураФО);
	
	ФОИспользоватьСтатусыДокументов = СтруктураФО.торо_ИспользоватьСтатусыДокументовТОиР;
	
	ТипСтрокой = торо_ОбщегоНазначенияВызовСервера.СтроковоеПредставлениеТипа(ТипДокумента);
	ИмяДокумента = СтрЗаменить(ТипСтрокой, "ДокументСсылка.", "");
	ИмяФормы = "Документ."+ИмяДокумента+".ФормаВыбора";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущийДокументОснование);	
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Проведен", Истина);
	
	Если ДляПодбора Тогда
		РегламентныйДокумент = (ИмяДокумента = "торо_ГрафикРегламентныхМероприятийТОиР"
								ИЛИ ИмяДокумента = "торо_НарядНаРегламентноеМероприятие"
								ИЛИ ИмяДокумента = "торо_АктОВыполненииРегламентногоМероприятия");
		
		СогласованиеИспользуется = торо_РаботаССогласованиями.ПроверитьИспользованиеСогласованияДокументов(ИмяДокумента, РегламентныйДокумент);
		Если СогласованиеИспользуется Тогда
			СтруктураОтбора.Вставить("НеИспользоватьВПодборах", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяДокумента = "торо_ПланГрафикРемонта" Тогда
	    СтруктураОтбора.Вставить("ПроверятьППРВОчередиНаФоновыйРасчет", Истина);
	КонецЕсли;
	
	Если ФОИспользоватьСтатусыДокументов = Истина 
		И Не (ИмяДокумента = "торо_ГрафикРегламентныхМероприятийТОиР" 
		  ИЛИ ИмяДокумента = "торо_ПланГрафикРемонта"
		  ИЛИ ИмяДокумента = "торо_АктОВыполненииЭтапаРабот") Тогда
		СтруктураОтбора.Вставить("СтатусДокумента", ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументов.Зарегистрирован"));
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Элемент, КлючУникальности);

КонецПроцедуры

// Заполняет поле склад в шапке формы документа, если заполнено поле подразделение и у подразделения указан склад.
// Параметры:
//		Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, реквизит Формы.
//		Склад - СправочникСсылка.Склады - склад, реквизит Формы. 
Процедура ЗаполнитьСклад (Подразделение, Склад) Экспорт
	
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		ПолучитьСклад = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Подразделение, "Склад");
		Если ЗначениеЗаполнено(ПолучитьСклад) Тогда 
			Склад = ПолучитьСклад;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет начальное заполнение справочников данными из их макетов.
// Для работы этой процедуры в справочнике должен быть макет с типом Табличный документ
// в макете должны быть определены области ЗаполняемыеРеквизиты и ДанныеДляЗаполнения
// макет должен иметь имя "НачальноеЗаполнение".
//
// Параметры:
//		ДанныеДляЗаполнения - Структура - Структура с полями:
//				*ИмяСправочника - Строка - Имя справочника, для которого необходимо выполнить заполнение.
//				*ОписаниеОповещения - ОписаниеОповещения - процедура, вызываемая после окончания загрузки.
//
Процедура ЗаполнитьСправочникДаннымиИзМакета(ДанныеДляЗаполнения) Экспорт
	
	ИмяСправочника = ДанныеДляЗаполнения.ИмяСправочника;
	
	Если торо_ОбщегоНазначения.ЕстьЭлементыСправочника(ИмяСправочника) Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные элементов, созданных из классификатора, будут перезаполнены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзКлассификатораОбработкаОтвета", ЭтотОбъект, ДанныеДляЗаполнения);
		
		СписокКнопок = Новый СписокЗначений;
        СписокКнопок.Добавить(КодВозвратаДиалога.Да    , "Да");
        СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Нет");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗагрузитьИзКлассификатораОбработкаОтвета(КодВозвратаДиалога.Да, ДанныеДляЗаполнения);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьСтрокиЗатратОперации(ДокументОбъект, ИмяТЧРемонтныхРабот, СтрокаДерева, ТекСтрокаРО_ID, мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот, ДеревоРемонтныхРабот) Экспорт
	
	РемРаботы = ДокументОбъект[ИмяТЧРемонтныхРабот];
	
	// удаляем рем работы из тч рем работ
	МассивСтрокКУдалению = РемРаботы.НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаДерева.ID, ТекСтрокаРО_ID));
	
	Для каждого Строка Из МассивСтрокКУдалению Цикл
		РемРаботы.Удалить(Строка);
	КонецЦикла; 
	
	// удаляем строки из связанных ТЧ
	Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот Цикл
		
		ТЧДляПоискаИДаленияСтрок = ДокументОбъект[КлючИЗначение.Ключ];
		
		СтруктураОтбораСтрок = Новый Структура("ID, РемонтыОборудования_ID", СтрокаДерева.ID, ТекСтрокаРО_ID);
		
		МассивСтрокКУдалению = ТЧДляПоискаИДаленияСтрок.НайтиСтроки(СтруктураОтбораСтрок);
		
		Для каждого Строка Из МассивСтрокКУдалению Цикл
			ТЧДляПоискаИДаленияСтрок.Удалить(Строка);
		КонецЦикла; 

		
	КонецЦикла;
	
	// делаем тоже самое для подчиненных строк
	ЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для каждого ПодчиненнаяСтрокаДерева Из ЭлементыСтроки Цикл
		УдалитьСтрокиЗатратОперации(ДокументОбъект, ИмяТЧРемонтныхРабот,ПодчиненнаяСтрокаДерева,ТекСтрокаРО_ID, мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот,ДеревоРемонтныхРабот);
	КонецЦикла; 
		
КонецПроцедуры

Процедура СформироватьСписокАвтоподбораКвалификацийСотрудника(Сотрудник, ДатаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных = Новый Структура("Отбор", Новый Структура("СтрокаПоиска,Сотрудник,Дата", Текст, Сотрудник, ДатаРемонта));
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокВыбораКвалификацийСотрудника(Элемент, Владелец, Сотрудник, ДатаРемонта, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных = Новый Структура("Отбор", Новый Структура("Сотрудник,Дата", Сотрудник, ДатаРемонта));
		СписокКвалификаций = ПолучитьДанныеВыбора(Тип("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"), ПараметрыПолученияДанных);
		ФормаВыбора = ПолучитьФорму("Справочник.торо_КвалификацииРемонтногоПерсонала.ФормаВыбора", Новый Структура("Отбор", Новый Структура("СписокКвалификаций", СписокКвалификаций)),Элемент, Владелец);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Квалификация) Тогда
		СтандартнаяОбработка = Ложь;
		СписокСотрудников = торо_ЗаполнениеДокументов.ПолучитьСписокСотрудниковСКвалификацией(Квалификация, ДатаРемонта, Текст);
		ДанныеВыбора = СписокСотрудников;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка, Организация = Неопределено, Подразделение = Неопределено) Экспорт
	
	СписокСотрудников = торо_ЗаполнениеДокументов.ПолучитьСписокСотрудников(ДатаРемонта, Текст, Организация, Подразделение);
	Если Не СписокСотрудников = Неопределено Тогда
		ДанныеВыбора = СписокСотрудников;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокВыбораСотрудниковСКвалификацией(Элемент, Владелец, Квалификация, ДатаРемонта, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Квалификация) Тогда
		СтандартнаяОбработка = Ложь;
		СписокСотрудников = торо_ЗаполнениеДокументов.ПолучитьСписокСотрудниковСКвалификацией(Квалификация, ДатаРемонта);
		ФормаВыбора = ПолучитьФорму("Справочник.Сотрудники.ФормаВыбора", Новый Структура("Отбор, РежимВыбора", Новый Структура("СписокСотрудников", СписокСотрудников), Истина), Элемент, Владелец);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьИзКлассификатораОбработкаОтвета(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		торо_ЗаполнениеДокументов.ЗаполнитьСправочникДаннымиИзМакета(ДопПараметры.ИмяСправочника);
		ВыполнитьОбработкуОповещения(ДопПараметры.ОписаниеОповещения, Результат);
	КонецЕсли; 	
КонецПроцедуры


#КонецОбласти

