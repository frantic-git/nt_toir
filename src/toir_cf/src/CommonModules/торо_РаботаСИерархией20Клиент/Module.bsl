
#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСДеревомИерархии

// Разворачивает и достраивает узел дерева иерархии.
Процедура ДеревоПередРазворачиванием(Дерево, ИдентификаторСтроки, СтруктураПараметровИерархии, ПолучатьСтатусыВУчете = Ложь, ОтборСтатусыВУчете = Неопределено, ДополнительныеОтборы = Неопределено) Экспорт
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически 
		И НЕ СтруктураПараметровИерархии.ИерархическийСправочник 
		И НЕ СтруктураПараметровИерархии.КонечныеЭлементыВДереве  Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ДанныеСтроки = Неопределено	ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Ссылка) 
		ИЛИ ДанныеСтроки.СвязиОбновлялись Тогда
		Возврат;
	КонецЕсли;
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(ДанныеСтроки.Ссылка);
	
	ДанныеСтроки.ПолучитьЭлементы().Очистить();
	
	МассивСтрок = торо_РаботаСИерархией20.ПолучитьМассивСтрокОдногоУровняИерархииСКоличествомПодчиненных(СтруктураПараметровИерархии, МассивРодителей, ПолучатьСтатусыВУчете, ОтборСтатусыВУчете, СтруктураПараметровИерархии.КонечныеЭлементыВДереве, ДополнительныеОтборы);
	торо_РаботаСИерархией20КлиентСервер.ДобавитьСтрокиВДеревоСФиктивнымиПодчиненнымиЭлементами(МассивСтрок, ДанныеСтроки);
	
	ДанныеСтроки.СвязиОбновлялись = Истина;
	
КонецПроцедуры

// Перестраивает дерево иерархии (разворачивает ранее развернутые узлы).
Процедура ОбновитьДеревоИерархии(Форма, ИмяЭлементаДерево = "Дерево") Экспорт
	
	ДеревоРеквизит = Форма[ИмяЭлементаДерево];
	ДеревоЭлемент = Форма.Элементы[ИмяЭлементаДерево];
	
	СтруктураРеквизитовФормы = Новый Структура("ОтборОбъектРемонта, ФОИспользоватьДокументыЖЦОборудования, СписокСтатусов, ДополнительныеОтборы");
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, Форма);
	
	СостояниеДереваОР = ПолучитьСостояниеДерева(Форма, ДеревоЭлемент, ДеревоРеквизит, Форма.ТекСтруктураИерархии);
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(ДеревоРеквизит, Форма.СтруктураПараметровИерархии, 
				Форма.ПустойРодитель, 
				СтруктураРеквизитовФормы.ФОИспользоватьДокументыЖЦОборудования, 
				СтруктураРеквизитовФормы.СписокСтатусов, 
				СтруктураРеквизитовФормы.ОтборОбъектРемонта, 
				СтруктураРеквизитовФормы.ДополнительныеОтборы);
				
	ЗаполнятьПризнакиВведенныхПоказателей = ?(Форма.ИмяФормы = "Обработка.торо_РабочееМестоУчетаПоказателейЭксплуатации.Форма.Форма"
		ИЛИ Форма.ИмяФормы = "Обработка.торо_НастройкаПоказателейЭксплуатацииОбъектовРемонта.Форма.Форма", Истина, Ложь);
	ВосстановитьСостояниеДереваНаКлиенте(СостояниеДереваОР, ДеревоРеквизит, ДеревоЭлемент, ЗаполнятьПризнакиВведенныхПоказателей);

КонецПроцедуры

// Выделяет в дереве элемент.
Процедура ВыделитьОРВДереве(Форма, ТекущийОР, ИмяЭлементаДерево = "Дерево") Экспорт
	ДостроитьДеревоДоЭлемента(Форма, ТекущийОР, ИмяЭлементаДерево);
КонецПроцедуры

// Выделяет в дереве родителя текущего элемента списка.
Процедура ВыделитьРодителяВДереве(Форма, ТекущиеДанныеСписка, ИмяЭлементаДерево = "Дерево") Экспорт
	
	ДеревоРеквизит = Форма[ИмяЭлементаДерево];
	ДеревоЭлемент = Форма.Элементы[ИмяЭлементаДерево];
	
	ТекущиеДанныеДерева = ДеревоЭлемент.ТекущиеДанные;
	Попытка
		Если ТекущиеДанныеДерева = Неопределено ИЛИ ТекущиеДанныеДерева.Ссылка <> ТекущиеДанныеСписка.Родитель Тогда
			СтрокаРодителя = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(ДеревоРеквизит.ПолучитьЭлементы(), ТекущиеДанныеСписка.Родитель, Форма.СтруктураПараметровИерархии, Форма.ПустойРодитель);
			
			Если СтрокаРодителя <> Неопределено Тогда
				ДеревоЭлемент.ТекущаяСтрока = СтрокаРодителя.ПолучитьИдентификатор();
			Иначе
				// Родителя еще нет в дереве, необходимо подгрузить ветви
				ДостроитьДеревоДоЭлемента(Форма, ТекущиеДанныеСписка.Родитель, ИмяЭлементаДерево);
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		// Обработка не требуется.
	КонецПопытки;
	
КонецПроцедуры

// Обработка оповещения события "ЗаписанОбъектРемонта".
Процедура ОбработкаОповещенияОЗаписиОбъектаРемонта(Форма, Параметр, ИмяРеквизитаДерево = "Дерево", Знач СтруктураПараметровИерархии = Неопределено, Знач ПустойРодитель = Неопределено) Экспорт
	
	Если СтруктураПараметровИерархии = Неопределено Тогда
		Если Форма.СтруктураПараметровИерархии = Неопределено Тогда
			// Иерархия не выбрана, делать нечего.
			Возврат;
		КонецЕсли;
		СтруктураПараметровИерархии = Форма.СтруктураПараметровИерархии;
	КонецЕсли;
	
	Если ПустойРодитель = Неопределено Тогда
		ПустойРодитель = Форма.ПустойРодитель;
	КонецЕсли;
	
	Дерево = Форма[ИмяРеквизитаДерево];
	СтрокаДерева = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(Дерево.ПолучитьЭлементы(), Параметр.Ссылка, СтруктураПараметровИерархии, ПустойРодитель);
	Если СтрокаДерева <> Неопределено Тогда
		СтрокаДерева.ПометкаУдаления = Параметр.ПометкаУдаления;
		Если Параметр.Свойство("ТипОбъекта") Тогда
			СтрокаДерева.ТипОбъекта = Параметр.ТипОбъекта;
		КонецЕсли;
		
		СтруктураПараметровКартинки = торо_РаботаСИерархией20КлиентСервер.СтруктураПараметровДляОпределенияИндексаКартинки();
		ЗаполнитьЗначенияСвойств(СтруктураПараметровКартинки, СтрокаДерева);
		СтруктураПараметровКартинки.ЭтоСоставной = (СтрокаДерева.ПолучитьЭлементы().Количество() > 0);
		
		СтрокаДерева.Картинка = торо_РаботаСИерархией20КлиентСервер.ПолучитьИндексКартинкиДереваНеавтоматическойИерархии(СтруктураПараметровКартинки);
		СтрокаДерева.Наименование = Строка(Параметр.Ссылка);
		
	ИначеЕсли Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый = Истина 
		И Параметр.Свойство("СтруктураИерархии") И Параметр.СтруктураИерархии = СтруктураПараметровИерархии.ТекСтруктураИерархии Тогда
		
		СтрокаРодителя = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(Дерево.ПолучитьЭлементы(), Параметр.РодительИерархии, СтруктураПараметровИерархии, ПустойРодитель);
		
		// Добавлем только по одной строке, т.к. следующая добавится при разворачивании дерева
		Если СтрокаРодителя = Неопределено Тогда
			РодительРодителя = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(Параметр.РодительИерархии, СтруктураПараметровИерархии.ТекСтруктураИерархии,,Истина,Истина);
			СтрокаРодителяРодителя = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(Дерево.ПолучитьЭлементы(), РодительРодителя, СтруктураПараметровИерархии, ПустойРодитель);
			Если СтрокаРодителяРодителя <> Неопределено Тогда
				ДанныеСтрокиРодителя = торо_РаботаСИерархией20.ПолучитьСтруктуруДанныхСтрокиДляДереваОР(СтруктураПараметровИерархии, Параметр.РодительИерархии, СтруктураПараметровИерархии.КонечныеЭлементыВДереве);
				Если ДанныеСтрокиРодителя <> Неопределено Тогда
					СтрокаРодителя = торо_РаботаСИерархией20КлиентСервер.ДобавитьСтрокуВДеревоИерархии(СтрокаРодителяРодителя, ДанныеСтрокиРодителя);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если Не торо_РаботаСИерархией20КлиентСервер.ЭтоКореньИерархииПоКартинке(СтрокаРодителя.Картинка) Тогда
				СтруктураПараметровКартинки = торо_РаботаСИерархией20КлиентСервер.СтруктураПараметровДляОпределенияИндексаКартинки();
				ЗаполнитьЗначенияСвойств(СтруктураПараметровКартинки, СтрокаРодителя);
				СтруктураПараметровКартинки.ЭтоСоставной = Истина;
				СтрокаРодителя.Картинка = торо_РаботаСИерархией20КлиентСервер.ПолучитьИндексКартинкиДереваНеавтоматическойИерархии(СтруктураПараметровКартинки);
			КонецЕсли;
			ДанныеСтроки = торо_РаботаСИерархией20.ПолучитьСтруктуруДанныхСтрокиДляДереваОР(СтруктураПараметровИерархии, Параметр.Ссылка, СтруктураПараметровИерархии.КонечныеЭлементыВДереве);
			Если ДанныеСтроки <> Неопределено Тогда
				торо_РаботаСИерархией20КлиентСервер.ДобавитьСтрокуВДеревоИерархии(СтрокаРодителя, ДанныеСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения события "ИзмененаПометкаУдаленияОР".
Процедура ОбработкаОповещенияОбИзмененииПометкиУдаленияОбъектаРемонта(Форма, Параметр, ИмяРеквизитаДерево = "Дерево", Знач СтруктураПараметровИерархии = Неопределено, Знач ПустойРодитель = Неопределено) Экспорт
	
	Если СтруктураПараметровИерархии = Неопределено Тогда
		СтруктураПараметровИерархии = Форма.СтруктураПараметровИерархии;
	КонецЕсли;
	
	Если ПустойРодитель = Неопределено Тогда
		ПустойРодитель = Форма.ПустойРодитель;
	КонецЕсли;
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически И НЕ СтруктураПараметровИерархии.КонечныеЭлементыВДереве Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = Форма[ИмяРеквизитаДерево];
	Для каждого ОбъектРемонта из Параметр.МассивСсылок Цикл
		СтрокаДерева = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(Дерево.ПолучитьЭлементы(), ОбъектРемонта, СтруктураПараметровИерархии, ПустойРодитель);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.ПометкаУдаления = Параметр.НовоеЗначениеПометки;
			
			СтруктураПараметровКартинки = торо_РаботаСИерархией20КлиентСервер.СтруктураПараметровДляОпределенияИндексаКартинки();
			ЗаполнитьЗначенияСвойств(СтруктураПараметровКартинки, СтрокаДерева);
			СтруктураПараметровКартинки.ЭтоСоставной = торо_РаботаСИерархией20КлиентСервер.ЭтоОРГруппаПоКартинке(СтрокаДерева.Картинка);
			
			СтрокаДерева.Картинка = торо_РаботаСИерархией20КлиентСервер.ПолучитьИндексКартинкиДереваНеавтоматическойИерархии(СтруктураПараметровКартинки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработка выбора ОР в дереве.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма.
//  ВыбранноеЗначение - Массив, Структура, СправочникСсылка - выбранное значение.
//
Процедура ОбработатьВыборОРДляДерева(Форма, ВыбранноеЗначение, ИмяЭлементаДерево = "Дерево") Экспорт
	
	ТекущиеДанныеДерева = Форма.Элементы[ИмяЭлементаДерево].ТекущиеДанные;
	ТекущийРодитель = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Ссылка);
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		ДобавитьМассивОРВИерархиюСПроверкой(Форма.ТекСтруктураИерархии, ВыбранноеЗначение, ТекущийРодитель);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ТипЗнч(ВыбранноеЗначение.ОбъектРемонта) = Тип("Массив") Тогда
			МассивОР = ВыбранноеЗначение.ОбъектРемонта;
		Иначе
			МассивОР = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение.ОбъектРемонта);
		КонецЕсли;
		ДобавитьМассивОРВИерархиюСПроверкой(Форма.ТекСтруктураИерархии, МассивОР, ТекущийРодитель, ВыбранноеЗначение.Иерархия, ВыбранноеЗначение.КореньВетки);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		ДобавитьМассивОРВИерархиюСПроверкой(Форма.ТекСтруктураИерархии, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение), ТекущийРодитель);
	КонецЕсли;
		
КонецПроцедуры

// Обработкик перед началом добавления ОР в дерево.
//
// Параметры:
//  Отказ - Булево - отказ от выполнения операции.
//  Копирование - Булево - это копирование.
//  Форма - ФормаКлиентскогоПриложения - форма.
//  Группа - Булево - признак добавления группы.
//  ИмяЭлементаДерево - Строка - имя элемента формы и реквизита с деревом.
//
Процедура ПередНачаломДобавленияВПолноеДерево(Отказ, Копирование, Форма, Группа, ИмяЭлементаДерево = "ДеревоПолное") Экспорт

	Отказ = Истина;
	
	Если Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически ИЛИ Копирование И НЕ Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР Тогда
		Возврат;
	КонецЕсли; 
	
	ДеревоЭлемент = Форма.Элементы[ИмяЭлементаДерево];
	
	ТекущиеДанныеДерева = ДеревоЭлемент.ТекущиеДанные;
	
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Копирование Тогда
		ТекущийРодитель = ТекущиеДанныеДерева.Ссылка;
		ТекущаяСсылка = Неопределено;
	Иначе
		ТекущаяСсылка = ТекущиеДанныеДерева.Ссылка;
		СтрокаРодителя = ТекущиеДанныеДерева.ПолучитьРодителя();
		ТекущийРодитель = ?(СтрокаРодителя = Неопределено, Неопределено, СтрокаРодителя.Ссылка);
	КонецЕсли;
	
	Если Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР ИЛИ Группа Тогда
		СоздатьОбъектРемонтаСОткрытиемФормы(Форма, Копирование, Группа, ТекущийРодитель, ТекущаяСсылка, ТекущиеДанныеДерева.Картинка);
	Иначе
		ВыбратьИерархиюИзКоторойДобавитьОР(Форма, ТекущаяСсылка, ИмяЭлементаДерево);
	КонецЕсли;
	
КонецПроцедуры

// Обновление пол
Процедура ОбновитьПолноеДеревоИерархии(Форма, СтруктураПараметровИерархии, ИмяЭлементаДерево = "ДеревоПолное") Экспорт
	
	ДеревоЭлемент = Форма.Элементы[ИмяЭлементаДерево];
	ДеревоРеквизит = Форма[ИмяЭлементаДерево];
	
	ТекущиеДанныеДерева = ДеревоЭлемент.ТекущиеДанные;
	ВыбранныйОР = ?(ТекущиеДанныеДерева <> Неопределено, ТекущиеДанныеДерева.Ссылка, Неопределено);
	
	торо_РаботаСИерархией20КлиентСервер.ПостроитьДеревоСКонечнымиЭлементами(ДеревоРеквизит, СтруктураПараметровИерархии, Форма.КореньПолногоДерева);
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(Форма, ИмяЭлементаДерево,,Истина);
	
	Если ВыбранныйОР <> Неопределено Тогда
		СтрокаВыбранногоОР = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(ДеревоРеквизит.ПолучитьЭлементы(), ВыбранныйОР, СтруктураПараметровИерархии, Форма.ПустойРодитель);
		Если СтрокаВыбранногоОР <> Неопределено Тогда
			ДеревоЭлемент.ТекущаяСтрока = СтрокаВыбранногоОР.ПолучитьИдентификатор();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДинамическимСпискомОбъектовРемонта

// Снимает или устанавливает отбор в динамическом списке в зависимости от 
// состояния флага "ВключенИерархическийПросмотр".
Процедура УправлениеОтборомВСписке(Форма, ИмяРеквизитаСписок = "Список", ИмяЭлементаДерево = "Дерево", ОтборОбъектРемонта = Неопределено, НеОтображатьГруппы = Ложь) Экспорт
	
	Список = Форма[ИмяРеквизитаСписок];
	ПустойРодитель = Форма.ПустойРодитель;
	
	ОтборПоГруппеМассив = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, "ЭтоГруппа");
	Если ОтборПоГруппеМассив.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЭтоГруппа", Ложь,,, НеОтображатьГруппы, 
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, "ЭтоГруппа");
	Иначе
		ОтборПоГруппе = ОтборПоГруппеМассив[0];
		Если ОтборПоГруппе.ПравоеЗначение Тогда 
			Использование = Форма.ВключенИерархическийПросмотр ИЛИ НеОтображатьГруппы = Ложь;
		Иначе
			Использование = НЕ Форма.ВключенИерархическийПросмотр И НеОтображатьГруппы;
		КонецЕсли;
		
		ОтборПоГруппе.Использование = Использование;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборОбъектРемонта) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", ОтборОбъектРемонта,,,Ложь,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
	Если Форма.ВключенИерархическийПросмотр Тогда
		ТекущиеДанные = Форма.Элементы[ИмяЭлементаДерево].ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
			торо_РаботаСИерархией20КлиентСервер.УстановитьОтборСпискаПоРодителю(Список, ТекущиеДанные.Ссылка);
		Иначе
			Если ЗначениеЗаполнено(ОтборОбъектРемонта) Тогда
				торо_РаботаСИерархией20КлиентСервер.УстановитьОтборСпискаПоРодителю(Список, ПустойРодитель, Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", ОтборОбъектРемонта,,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			Иначе
				торо_РаботаСИерархией20КлиентСервер.УстановитьОтборСпискаПоРодителю(Список, ПустойРодитель);
			КонецЕсли;
		КонецЕсли;                                                       
	Иначе
		торо_РаботаСИерархией20КлиентСервер.УстановитьОтборСпискаПоРодителю(Список, ПустойРодитель, Ложь);
		Если ЗначениеЗаполнено(ОтборОбъектРемонта) Тогда
			МассивПодчиненныхОР = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(ОтборОбъектРемонта, Форма.ТекСтруктураИерархии, ,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивПодчиненныхОР, ВидСравненияКомпоновкиДанных.ВСписке,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка двойного нажатия на строку в списке объектов ремонта.
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Форма, ИмяЭлементаДерево = "Дерево") Экспорт
	
	// Если элемент имеет подчиненных, то по двойному щелчку нужно войти внутрь этого элемента.
	// Реализуем это активизацией соответствующей строки в дереве.
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Форма.ВключенИерархическийПросмотр И НЕ Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически 
		И ТекущиеДанные.Свойство("ИндексКартинки") И торо_РаботаСИерархией20КлиентСервер.ЭтоОбъектСПодчиненнымиПоКартинке(ТекущиеДанные.ИндексКартинки) Тогда
		СтандартнаяОбработка = Ложь;
		
		ДеревоРеквизит = Форма[ИмяЭлементаДерево];
		ДеревоЭлемент = Форма.Элементы[ИмяЭлементаДерево];

		ТекущиеДанныеДерева = ДеревоЭлемент.ТекущиеДанные;
		ЭлементыДляПоиска = ?(ТекущиеДанныеДерева = Неопределено, ДеревоРеквизит.ПолучитьЭлементы(), ТекущиеДанныеДерева.ПолучитьЭлементы());
		СтрокаВДереве = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(ЭлементыДляПоиска, ВыбраннаяСтрока, Форма.СтруктураПараметровИерархии, Форма.ПустойРодитель);
		Если СтрокаВДереве <> Неопределено Тогда
			ДеревоЭлемент.ТекущаяСтрока = СтрокаВДереве.ПолучитьИдентификатор();
		Иначе
			ДостроитьДеревоДоЭлемента(Форма, ВыбраннаяСтрока, ИмяЭлементаДерево);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик открытия формы ОР.
//
// Параметры:
//		Элемент - ТаблицаФормы - дерево или список объектов ремонта.
//		Отказ - Булево - отказ от выполнения операции.
//		Форма - ФормаКлиентскогоПриложения - форма.
//
Процедура ПередНачаломИзменения(Элемент, Отказ, Форма, ТекСтруктураИерархии = Неопределено) Экспорт
	
	Отказ = Истина;
	
	Если (Форма.Элементы.Найти("Список") <> Неопределено И Форма.ТекущийЭлемент = Форма.Элементы.Список) 
		ИЛИ (Форма.Элементы.Найти("Дерево") <> Неопределено И Форма.ТекущийЭлемент = Форма.Элементы.Дерево) Тогда
		ТекДанные = Форма.ТекущийЭлемент.ТекущиеДанные;
	Иначе
		ТекДанные = Элемент.ТекущиеДанные;
	КонецЕсли;
		
	Если ТекДанные = Неопределено ИЛИ НЕ ТекДанные.Свойство("Ссылка") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтруктураИерархии = Неопределено Тогда
		ТекСтруктураИерархии = Форма.ТекСтруктураИерархии;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта") 
		И ТекДанные.Свойство("Ссылка") И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		
		ЭтоГруппа = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Ссылка, "ЭтоГруппа");
		
		ПараметрыФормы = Новый Структура("Ключ, СтруктураИерархии", ТекДанные.Ссылка, ТекСтруктураИерархии);
		Если ЭтоГруппа = Истина Тогда
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаГруппы", ПараметрыФормы);
		Иначе
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекДанные.Ссылка) <> Тип("СправочникСсылка.торо_СтруктурыОР") Тогда 
		ПоказатьЗначение(Неопределено, ТекДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

// Обработкик перед началом добавления ОР.
//
// Параметры:
//  Отказ - Булево - отказ от выполнения операции.
//  Копирование - Булево - это копирование.
//  Форма - ФормаКлиентскогоПриложения - форма.
//  Группа - Булево - признак добавления группы.
//  ИмяЭлементаСписок - Строка - имя элемента формы и реквизита с динамическим списком.
//  ИмяЭлементаДерево - Строка - имя элемента формы и реквизита с деревом.
//
Процедура ПередНачаломДобавления(Отказ, Копирование, Форма, Группа, ИмяЭлементаСписок = "Список", ИмяЭлементаДерево = "Дерево") Экспорт
	
	Отказ = Истина;
	
	ТекущиеДанныеСписка = Форма.Элементы[ИмяЭлементаСписок].ТекущиеДанные;
	ТекущаяСсылка = ?(ТекущиеДанныеСписка = Неопределено, Неопределено, ТекущиеДанныеСписка.Ссылка);
	
	ТекДанныеЭтоФМ = торо_РаботаСИерархией20.ОбъектРемонтаЭтоФункциональноеМесто(ТекущаяСсылка);
	
	Если Копирование И НЕ Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР И Не ТекДанныеЭтоФМ Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанныеДерева = Форма.Элементы[ИмяЭлементаДерево].ТекущиеДанные;
	ТекущийРодитель = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Ссылка);

	ИндексКартинки = ?(ТекущиеДанныеСписка = Неопределено, Неопределено, ТекущиеДанныеСписка.ИндексКартинки);
	
	Если Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР ИЛИ (Копирование И ТекДанныеЭтоФМ) ИЛИ Группа Тогда
		СоздатьОбъектРемонтаСОткрытиемФормы(Форма, Копирование, Группа, ТекущийРодитель, ТекущаяСсылка, ИндексКартинки);
	Иначе
		ВыбратьИерархиюИзКоторойДобавитьОР(Форма, ТекущаяСсылка, ИмяЭлементаДерево);
	КонецЕсли;
	
КонецПроцедуры

// Пометка на удаление выделенных объектов ремонта.
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма, с которой вызвана команда.
//		СПодчиненными - Булево - нужно ли помечать на удаление подчиненные объекты ремонта.
//			Если ложь, то подчиненные элементы переносятся в корень иерархии.
Процедура ПометитьНаУдалениеВыделенные(Форма, СПодчиненными) Экспорт

	МассивДанныхСтрок = ПолучитьМассивДанныхВыделенныхСтрок(Форма);
	
	Если ПроверитьПравоНаКлиенте("ИнтерактивнаяПометкаУдаления") Тогда
		
		ЕстьПомеченныеНаУдаление = Ложь;
		ЕстьГруппы = Ложь;
		ЕстьЭлементы = Ложь;
		ЕстьПодчиненные = Ложь;
		УдалениеИзСписка = Ложь;
		Для Каждого ДанныеСтроки из МассивДанныхСтрок Цикл
			Если ДанныеСтроки.ПометкаУдаления Тогда
				ЕстьПомеченныеНаУдаление = Истина;
			КонецЕсли;
			Если торо_РаботаСИерархией20КлиентСервер.ЭтоОбычнаяГруппаПоКартинке(ДанныеСтроки.ИндексКартинки) Тогда
				ЕстьГруппы = Истина;
			Иначе
				ЕстьЭлементы = Истина;
			КонецЕсли;
			Если Не ДанныеСтроки.Свойство("ЕстьПодчиненные") Тогда
				УдалениеИзСписка = Истина;
			ИначеЕсли ДанныеСтроки.ЕстьПодчиненные Тогда
				ЕстьПодчиненные = Истина;
			КонецЕсли;
		КонецЦикла;
				
		Если Не ЕстьПодчиненные И Не УдалениеИзСписка Тогда
			СПодчиненными = Истина;
		КонецЕсли;
		
		Если ЕстьПомеченныеНаУдаление Тогда
			ТекстСообщения = НСтр("ru = 'Снять с элементов пометку на удаление?'");
		Иначе
			Если ЕстьГруппы И ЕстьЭлементы Тогда
				Если СПодчиненными Тогда
					ТекстСообщения = НСтр("ru = 'Пометить на удаление выбранные группы и элементы?'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Пометить на удаление выбранные группы и элементы? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
				КонецЕсли;
			ИначеЕсли ЕстьГруппы Тогда
				Если МассивДанныхСтрок.Количество() > 1 Тогда
					Если СПодчиненными Тогда
						ТекстСообщения = НСтр("ru = 'Пометить группы на удаление?'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Пометить группы на удаление? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
					КонецЕсли;
				Иначе
					Если СПодчиненными Тогда
						ТекстСообщения = НСтр("ru = 'Пометить группу на удаление?'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Пометить группу на удаление? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если МассивДанныхСтрок.Количество() > 1 Тогда
					Если СПодчиненными Тогда
						ТекстСообщения = НСтр("ru = 'Пометить элементы на удаление?'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Пометить элементы на удаление? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
					КонецЕсли;
				Иначе
					Если СПодчиненными Тогда
						ТекстСообщения = НСтр("ru = 'Пометить элемент на удаление?'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Пометить элемент на удаление? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивДанныхСтрок", МассивДанныхСтрок);
		ДопПараметры.Вставить("ЭтаФорма", Форма);
		ДопПараметры.Вставить("НовоеЗначениеПометки", НЕ ЕстьПомеченныеНаУдаление);
		ДопПараметры.Вставить("СПодчиненными", СПодчиненными);
												
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометкаУдаленияОтветНаВопрос", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

// Удаление из иерархии выделенных объектов ремонта.
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма, с которой вызвана команда.
//		СПодчиненными - Булево - нужно ли удалять из иерархии подчиненные объекты ремонта.
//			Если ложь, то подчиненные элементы переносятся в корень иерархии.
Процедура УдалитьИзИерархииВыделенные(Форма, СПодчиненными) Экспорт

	Если Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически 
		ИЛИ Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР Тогда
		Возврат;
	КонецЕсли;

	МассивДанныхСтрок = ПолучитьМассивДанныхВыделенныхСтрок(Форма);
	
	Если ПроверитьПравоНаКлиенте("Редактирование") Тогда
		
		ЕстьГруппы = Ложь;
		ЕстьЭлементы = Ложь;
		ЕстьПодчиненные = Ложь;

		Для каждого ТекДанные из МассивДанныхСтрок Цикл
			Если торо_РаботаСИерархией20КлиентСервер.ЭтоОбычнаяГруппаПоКартинке(ТекДанные.ИндексКартинки) Тогда
				ЕстьГруппы = Истина;
			Иначе
				ЕстьЭлементы = Истина;
			КонецЕсли;
			Если ТекДанные.Свойство("ЕстьПодчиненные") И ТекДанные.ЕстьПодчиненные Тогда
				ЕстьПодчиненные = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьПодчиненные Тогда
			СПодчиненными = Истина;
		КонецЕсли;
		
		Если ЕстьГруппы И ЕстьЭлементы Тогда
			Если СПодчиненными Тогда
				ТекстСообщения = НСтр("ru = 'Удалить группы и объекты ремонта из иерархии?'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Удалить группы и объекты ремонта из иерархии? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
			КонецЕсли;
		ИначеЕсли ЕстьГруппы Тогда
			Если МассивДанныхСтрок.Количество() > 1 Тогда
				Если СПодчиненными Тогда
					ТекстСообщения = НСтр("ru = 'Удалить группы из иерархии?'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Удалить группы из иерархии? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
				КонецЕсли;
			Иначе
				Если СПодчиненными Тогда
					ТекстСообщения = НСтр("ru = 'Удалить группу из иерархии?'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Удалить группу из иерархии? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если МассивДанныхСтрок.Количество() > 1 Тогда
				Если СПодчиненными Тогда
					ТекстСообщения = НСтр("ru = 'Удалить объекты ремонта из иерархии?'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Удалить объекты ремонта из иерархии? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
				КонецЕсли;
			Иначе
				Если СПодчиненными Тогда
					ТекстСообщения = НСтр("ru = 'Удалить объект ремонта из иерархии?'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Удалить объект ремонта из иерархии? Подчиненные элементы в текущей иерархии будут перенесены в ее корень.'");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		ДопПараметры = Новый Структура("Форма, МассивДанныхСтрок, СПодчиненными", Форма, МассивДанныхСтрок, СПодчиненными);
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьИзИерархииЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик кнопки "Изменить положение в иерархии".
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма.
//
Процедура ИзменитьПоложениеВИерархии(ЭтаФорма) Экспорт
	
	Элементы = ЭтаФорма.Элементы;
	
	Если Элементы.Найти("Список") <> Неопределено
		И ЭтаФорма.ТекущийЭлемент = Элементы.Список Тогда
		ТекДанные = Элементы.Список.ТекущиеДанные;
	ИначеЕсли Элементы.Найти("ДеревоПолное") <> Неопределено
		И ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоПолное Тогда
		ТекДанные = Элементы.ДеревоПолное.ТекущиеДанные;
	Иначе
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПравоНаКлиенте("Редактирование") Тогда
		ПараметрыДляОповещения = Новый Структура("ЭтаФорма", ЭтаФорма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПоложениеВИерархииЗавершение", ЭтотОбъект, ПараметрыДляОповещения);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураИерархии", ЭтаФорма.ТекСтруктураИерархии);
		ПараметрыФормы.Вставить("ЗапретитьИзменениеИерархии", Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормы.Вставить("РазрешитьВыборКорняИерархии", Истина);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		ПараметрыФормы.Вставить("ТекущаяСтрока",  ТекДанные.Ссылка);

		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыФормы,  ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

// Обработка проверки перетаскивания в списке и в дереве.
Процедура ПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, ЭтоПеретаскиваниеИзДерева) Экспорт
	
	// Для автоматических иерархий перетаскивание запрещено, поэтому СтандартнаяОбработка
	// должна остаться Истина. В остальных случаях СтандартнаяОбработка = Ложь, 
	// чтобы перетаскивание сработало.
	СтандартнаяОбработка = Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически;
	
КонецПроцедуры

// Обработка перетаскивания элементов в списке и в дереве.
Процедура ОбработкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, ЭтоПеретаскиваниеВДерево, ИмяРеквизитаДерево = "Дерево") Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		Возврат;	
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПравоНаКлиенте("Редактирование") Тогда
		
		ДеревоРеквизит = Форма[ИмяРеквизитаДерево];
		
		Если ЭтоПеретаскиваниеВДерево Тогда
			СтрокаДереваНовогоРодителя = ДеревоРеквизит.НайтиПоИдентификатору(Строка);
			Если СтрокаДереваНовогоРодителя = Неопределено Тогда
				Возврат;
			КонецЕсли;
			НовыйРодитель = СтрокаДереваНовогоРодителя.Ссылка;
			Если ТипЗнч(НовыйРодитель) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				НовыйРодитель = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
			КонецЕсли;
		Иначе
			НовыйРодитель = Строка;
		КонецЕсли;
		
		МассивВыбранныхОбъектов = ПолучитьМассивССылокИзПарамтеровПеретаскивания(ПараметрыПеретаскивания, ДеревоРеквизит);
				
		Отказ = Ложь;
		торо_РаботаСИерархией20.ИзменитьПоложениеВИерархииНаСервере(МассивВыбранныхОбъектов, Форма.ТекСтруктураИерархии, НовыйРодитель, Отказ);
		
		Если НЕ Отказ Тогда
			Оповестить("ИзмененаСтруктураИерархииОР", Форма.ТекСтруктураИерархии, Форма);
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

// Снимает или устанавливает иерархический просмотр в списке.
// Параметры:
//		ЭтаФорма - ФормаКлиентскогоПриложения - форма, с которой вызвана команда.
//		Включен - Булево - текущее значение флага "ВключенИерархическийПросмотр" на форме.
//
Процедура ИерархическийПросмотр(ЭтаФорма, Включен) Экспорт
	
	Попытка
		ОтборОбъектРемонта = ЭтаФорма.ОтборОбъектРемонта;	
	Исключение
		ОтборОбъектРемонта = Неопределено;
	КонецПопытки;
	
	ЭтаФорма.Элементы.НеОтображатьГруппы.Доступность = ЭтаФорма.Элементы.ФормаИерархическийПросмотр.Пометка;
	ЭтаФорма.ВключенИерархическийПросмотр = Включен;
	Если ЭтаФорма.Элементы.Найти("ФормаИерархическийПросмотр") <> Неопределено Тогда
		ЭтаФорма.Элементы.ФормаИерархическийПросмотр.Пометка = Включен;
	КонецЕсли;
	
	Если ЭтаФорма.Элементы.ФормаИерархическийПросмотр.Пометка = Ложь Тогда
		ЭтаФорма.НеОтображатьГруппы = Истина;
		ЭтаФорма.Элементы.НеОтображатьГруппы.Пометка = Истина;
		УправлениеОтборомВСписке(ЭтаФорма,,,ОтборОбъектРемонта, ЭтаФорма.НеОтображатьГруппы);
		УстановитьДоступностьКомандДереваПриАктивизацииСтроки(ЭтаФорма, ЭтаФорма.Элементы.Дерево.ТекущиеДанные);
	Иначе
		ЭтаФорма.НеОтображатьГруппы = Ложь;
		ЭтаФорма.Элементы.НеОтображатьГруппы.Пометка = Ложь;
		УправлениеОтборомВСписке(ЭтаФорма,,, ОтборОбъектРемонта, ЭтаФорма.НеОтображатьГруппы);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область РаботаСТаблицейРодителейОР

// Перезаполняет на форме таблицу "ТаблицаРодителейОР" родителями 
// текущего выбранного объекта ремонта.
Процедура ОбновитьПутьКОбъектуРемонта(Форма, ИмяЭлементаДерево = "Дерево", ИспользоватьКартинкиТОР = Ложь) Экспорт
	
	ТекущиеДанныеДерева = Форма.Элементы[ИмяЭлементаДерево].ТекущиеДанные;
	ТаблицаРодителейОР = Форма.ТаблицаРодителейОР;
	Уровень = 1;
	ТаблицаРодителейОР.Очистить();
	
	Пока ТекущиеДанныеДерева <> Неопределено Цикл
		НовСтр = ТаблицаРодителейОР.Вставить(0);
		НовСтр.Уровень = Уровень;
		НовСтр.Родитель = ТекущиеДанныеДерева.Ссылка;
		Если ИспользоватьКартинкиТОР Тогда
			НовСтр.КартинкаОтображаемая = ТекущиеДанныеДерева.КартинкаОтображаемая;
		Иначе
			НовСтр.КартинкаОтображаемая = ТекущиеДанныеДерева.Картинка;
		КонецЕсли;
		
		Уровень = Уровень + 1;
		ТекущиеДанныеДерева = ТекущиеДанныеДерева.ПолучитьРодителя();
	КонецЦикла;
	
	Отступ = "";
	Для каждого Строка из ТаблицаРодителейОР Цикл
		Отступ = Отступ + "   ";
		Строка.Представление = Отступ + Строка(Строка.Родитель);
	КонецЦикла;
	
	Форма.СтрокаПутьКОР = "/";
	Для каждого СтрокаТаблицы из ТаблицаРодителейОР Цикл
		Форма.СтрокаПутьКОР = Форма.СтрокаПутьКОР + ?(Форма.СтрокаПутьКОР="/",""," /") + Строка(СтрокаТаблицы.Родитель);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаРодителейОРВыбор(ВыбраннаяСтрока, Форма, ИмяЭлементаДерево = "Дерево") Экспорт
	
	ДеревоРеквизит = Форма[ИмяЭлементаДерево];
	ДеревоЭлемент = Форма.Элементы[ИмяЭлементаДерево];
	
	ДанныеСтроки = Форма.ТаблицаРодителейОР.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки <> Неопределено Тогда
		ТекущиеДанныеДерева = ДеревоЭлемент.ТекущиеДанные;
		Если ТекущиеДанныеДерева = Неопределено ИЛИ ТекущиеДанныеДерева.Ссылка <> ДанныеСтроки.Родитель Тогда
			СтрокаРодителя = торо_РаботаСИерархией20КлиентСервер.НайтиСсылкуВДеревеБезДостраивания(ДеревоРеквизит.ПолучитьЭлементы(), ДанныеСтроки.Родитель, Форма.СтруктураПараметровИерархии, Форма.ПустойРодитель);
			Если СтрокаРодителя <> Неопределено Тогда
				ДеревоЭлемент.ТекущаяСтрока = СтрокаРодителя.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьОбновленияПутиКОбъектуРемонта(Форма, ИмяЭлементаДерево = "Дерево", ИспользоватьКартинкиТОР = Ложь) Экспорт
	
	ДеревоЭлемент = Форма.Элементы[ИмяЭлементаДерево];
	
	ТекущиеДанныеДерева = ДеревоЭлемент.ТекущиеДанные;
	КоличествоСтрок = Форма.ТаблицаРодителейОР.Количество();
	
	Если ТекущиеДанныеДерева <> Неопределено И КоличествоСтрок > 0 Тогда
		Если Форма.ТаблицаРодителейОР[КоличествоСтрок-1].Родитель <> ТекущиеДанныеДерева.Ссылка Тогда
			ОбновитьПутьКОбъектуРемонта(Форма, ИмяЭлементаДерево, ИспользоватьКартинкиТОР);
		КонецЕсли;
	ИначеЕсли КоличествоСтрок = 0 И ТекущиеДанныеДерева <> Неопределено Тогда
		ОбновитьПутьКОбъектуРемонта(Форма, ИмяЭлементаДерево, ИспользоватьКартинкиТОР);
	ИначеЕсли КоличествоСтрок <> 0 И ТекущиеДанныеДерева = Неопределено Тогда
		ОбновитьПутьКОбъектуРемонта(Форма, ИмяЭлементаДерево, ИспользоватьКартинкиТОР);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрочимиЭлементамиФормы

// Устанавливает на форме доступность команд в зависимости от выбранной иерархии и прав пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка или выбора объектов ремонта.
//
Процедура УстановитьДоступностьКомандФормы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Форма.ИмяФормы = "Справочник.торо_ОбъектыРемонта.Форма.ФормаСписка" 
		ИЛИ Форма.ИмяФормы = "Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора"
		ИЛИ Форма.ИмяФормы = "Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбораГруппы"
		ИЛИ Форма.ИмяФормы = "Обработка.торо_РабочееМестоТехнолога.Форма.Форма" Тогда
		
		РазрешенВводНовыхОР = Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР;
		СтроитсяАвтоматически = Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически;
		ПравоИнтерактивноеДобавление = Форма.ПравоИнтерактивноеДобавление;
		ПравоИнтерактивнаяПометкаУдаления = Форма.ПравоИнтерактивнаяПометкаУдаления;
		ПравоРедактирование = Форма.ПравоРедактирование;
					
		// Добавлять ОР (в т.ч. копированием) можно только в "основной" иерархии.
		ДоступностьСоздания = ПравоИнтерактивноеДобавление И Не (СтроитсяАвтоматически И Не РазрешенВводНовыхОР);
		
		Если Элементы.Найти("ФормаСоздать") <> Неопределено Тогда
			Элементы.ФормаСоздать.Доступность = ДоступностьСоздания;
		КонецЕсли;
		Если Элементы.Найти("СписокКонтекстноеМенюСоздать") <> Неопределено Тогда
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = ДоступностьСоздания;
		КонецЕсли;
		
		Если Элементы.Найти("ПолноеДерево_Создать") <> Неопределено Тогда
			Элементы.ПолноеДерево_Создать.Доступность = ДоступностьСоздания;
		КонецЕсли;
		Если Элементы.Найти("ПолноеДерево_Создать1") <> Неопределено Тогда
			Элементы.ПолноеДерево_Создать1.Доступность = ДоступностьСоздания;
		КонецЕсли;
		
		ДоступностьКопирования = РазрешенВводНовыхОР И ПравоИнтерактивноеДобавление;
		
		Если Элементы.Найти("ФормаСкопировать") <> Неопределено Тогда
			Элементы.ФормаСкопировать.Доступность = ДоступностьКопирования;
		КонецЕсли;
		
		Если Элементы.Найти("ПолноеДерево_Скопировать") <> Неопределено Тогда
			Элементы.ПолноеДерево_Скопировать.Доступность = ДоступностьКопирования;
		КонецЕсли;
		Если Элементы.Найти("ПолноеДерево_Скопировать1") <> Неопределено Тогда
			Элементы.ПолноеДерево_Скопировать1.Доступность = ДоступностьКопирования;
		КонецЕсли;
		
		// Создать группу можно в любой неавтоматической иерархии.
		ДоступностьСозданияГрупп = НЕ СтроитсяАвтоматически И ПравоИнтерактивноеДобавление;
		
		Если Элементы.Найти("ФормаСоздатьГруппу") <> Неопределено Тогда
			Элементы.ФормаСоздатьГруппу.Доступность = ДоступностьСозданияГрупп;
		КонецЕсли;
		Если Элементы.Найти("СписокКонтекстноеМенюСоздатьГруппу") <> Неопределено Тогда
			Элементы.СписокКонтекстноеМенюСоздатьГруппу.Доступность = ДоступностьСозданияГрупп;
		КонецЕсли;
		
		Если Элементы.Найти("ПолноеДерево_СоздатьГруппу") <> Неопределено Тогда
			Элементы.ПолноеДерево_СоздатьГруппу.Доступность = ДоступностьСозданияГрупп;
		КонецЕсли;
		Если Элементы.Найти("ПолноеДерево_СоздатьГруппу1") <> Неопределено Тогда
			Элементы.ПолноеДерево_СоздатьГруппу1.Доступность = ДоступностьСозданияГрупп;
		КонецЕсли;
		
		ДоступностьПометкиУдаления = ПравоИнтерактивнаяПометкаУдаления;
		
		Если Элементы.Найти("ФормаПометитьНаУдалениеТекущийЭлемент") <> Неопределено Тогда
			Элементы.ФормаПометитьНаУдалениеТекущийЭлемент.Доступность = ДоступностьПометкиУдаления;
		КонецЕсли;
		Если Элементы.Найти("ФормаПометитьНаУдалениеСПодчиненными") <> Неопределено Тогда
			Элементы.ФормаПометитьНаУдалениеСПодчиненными.Доступность = ДоступностьПометкиУдаления;
		КонецЕсли;
		
		// Удаление из иерархии и добавлении в иерархию имеет смысл только для "неосновных" иерархий.
		ДоступностьУдаленияИзИерархии = ПравоИнтерактивнаяПометкаУдаления И НЕ СтроитсяАвтоматически И НЕ РазрешенВводНовыхОР;
		
		Если Элементы.Найти("ФормаУдалитьИзИерархииТекущийЭлемент") <> Неопределено Тогда
			Элементы.ФормаУдалитьИзИерархииТекущийЭлемент.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;

		Если Элементы.Найти("ФормаУдалитьИзИерархииСПодчиненными") <> Неопределено Тогда
			Элементы.ФормаУдалитьИзИерархииСПодчиненными.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		
		// Здесь меняем видимость, а в функциях УстановитьДоступностьКомандДереваПриАктивизацииСтроки
		// и УстановитьДоступностьКомандСпискаПриАктивизацииСтроки дополнительно управляем доступностью.
		Если Элементы.Найти("СписокКонтекстноеМенюУдалитьИзИерархииТекущийЭлемент") <> Неопределено Тогда
			Элементы.СписокКонтекстноеМенюУдалитьИзИерархииТекущийЭлемент.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		Если Элементы.Найти("СписокКонтекстноеМенюУдалитьИзИерархииСПодчиненными") <> Неопределено Тогда
			Элементы.СписокКонтекстноеМенюУдалитьИзИерархииСПодчиненными.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		
		Если Элементы.Найти("ДеревоКонтекстноеМенюУдалитьИзИерархииТекущийЭлемент") <> Неопределено Тогда
			Элементы.ДеревоКонтекстноеМенюУдалитьИзИерархииТекущийЭлемент.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		Если Элементы.Найти("ДеревоКонтекстноеМенюУдалитьИзИерархииСПодчиненными") <> Неопределено Тогда
			Элементы.ДеревоКонтекстноеМенюУдалитьИзИерархииСПодчиненными.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		
		Если Элементы.Найти("ДеревоПолноеУдалитьИзИерархииТекущийЭлемент") <> Неопределено Тогда
			Элементы.ДеревоПолноеУдалитьИзИерархииТекущийЭлемент.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		Если Элементы.Найти("ДеревоПолноеУдалитьИзИерархииСПодчиненными") <> Неопределено Тогда
			Элементы.ДеревоПолноеУдалитьИзИерархииСПодчиненными.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		
		Если Элементы.Найти("ДеревоПолноеУдалитьИзИерархииТекущийЭлемент1") <> Неопределено Тогда
			Элементы.ДеревоПолноеУдалитьИзИерархииТекущийЭлемент1.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		Если Элементы.Найти("ДеревоПолноеУдалитьИзИерархииСПодчиненными1") <> Неопределено Тогда
			Элементы.ДеревоПолноеУдалитьИзИерархииСПодчиненными1.Видимость = ДоступностьУдаленияИзИерархии;
		КонецЕсли;
		
		ДоступностьИзмененияПоложения = НЕ СтроитсяАвтоматически И ПравоРедактирование;
		
		Если Элементы.Найти("ФормаИзменитьПоложениеВИерархии") <> Неопределено Тогда
			Элементы.ФормаИзменитьПоложениеВИерархии.Доступность = ДоступностьИзмененияПоложения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКомандДереваПриАктивизацииСтроки(Форма, ТекущиеДанные) Экспорт
	
	Элементы = Форма.Элементы;
	
	РазрешенВводНовыхОР = Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР;
	СтроитсяАвтоматически = Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически;
	
	СтруктураПрав = Новый Структура("ПравоИнтерактивнаяПометкаУдаления, ПравоРедактирование");
	ЗаполнитьЗначенияСвойств(СтруктураПрав, Форма);
	
	ПравоИнтерактивнаяПометкаУдаления = СтруктураПрав.ПравоИнтерактивнаяПометкаУдаления = Истина;
	ПравоРедактирование = СтруктураПрав.ПравоРедактирование = Истина;
	
	ДоступностьРедактирования = ПравоРедактирование И ТекущиеДанные <> Неопределено 
			И ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.торо_СтруктурыОР");
	
	Если Элементы.Найти("ДеревоКонтекстноеМенюИзменить") <> Неопределено Тогда
		Элементы.ДеревоКонтекстноеМенюИзменить.Доступность = ДоступностьРедактирования;
	КонецЕсли;
	
	ДоступностьПометкиУдаления = ПравоИнтерактивнаяПометкаУдаления И ТекущиеДанные <> Неопределено
			И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта");
	
	Если Элементы.Найти("ДеревоКонтекстноеМенюПометитьНаУдалениеТекущийЭлемент") <> Неопределено Тогда
		Элементы.ДеревоКонтекстноеМенюПометитьНаУдалениеТекущийЭлемент.Доступность = ДоступностьПометкиУдаления;
	КонецЕсли;
	Если Элементы.Найти("ДеревоКонтекстноеМенюПометитьНаУдалениеСПодчиненными") <> Неопределено Тогда
		Элементы.ДеревоКонтекстноеМенюПометитьНаУдалениеСПодчиненными.Доступность = ДоступностьПометкиУдаления;
	КонецЕсли;
	
	// Удаление из иерархии и добавлении в иерархию имеет смысл только для "неосновных" иерархий.
	ДоступностьУдаленияИзИерархии = ПравоИнтерактивнаяПометкаУдаления И НЕ СтроитсяАвтоматически И НЕ РазрешенВводНовыхОР
			И ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта");
	
	Если Элементы.Найти("ДеревоКонтекстноеМенюУдалитьИзИерархииТекущийЭлемент") <> Неопределено Тогда
		Элементы.ДеревоКонтекстноеМенюУдалитьИзИерархииТекущийЭлемент.Доступность = ДоступностьУдаленияИзИерархии;
	КонецЕсли;
	Если Элементы.Найти("ДеревоКонтекстноеМенюУдалитьИзИерархииСПодчиненными") <> Неопределено Тогда
		Элементы.ДеревоКонтекстноеМенюУдалитьИзИерархииСПодчиненными.Доступность = ДоступностьУдаленияИзИерархии;
	КонецЕсли;
	
	ДоступностьИзмененияПоложения = НЕ СтроитсяАвтоматически И ПравоРедактирование И ТекущиеДанные <> Неопределено
			И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта");
	
	Если Элементы.Найти("ДеревоКонтекстноеМенюИзменитьПоложениеВИерархии") <> Неопределено Тогда
		Элементы.ДеревоКонтекстноеМенюИзменитьПоложениеВИерархии.Доступность = ДоступностьИзмененияПоложения;
	КонецЕсли;
	
	ДоступностьПереходаКПолномуДереву = НЕ СтроитсяАвтоматически И ТекущиеДанные <> Неопределено
			И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта")
			И НЕ ТекущиеДанные.ЭтоГруппа;
			
	Если Элементы.Найти("ДеревоКонтекстноеМенюПереключитьНаВидДерева") <> Неопределено Тогда
		Элементы.ДеревоКонтекстноеМенюПереключитьНаВидДерева.Доступность = ДоступностьПереходаКПолномуДереву;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКомандСпискаПриАктивизацииСтроки(Форма, ТекущиеДанные) Экспорт
	
	Элементы = Форма.Элементы;
	
	РазрешенВводНовыхОР = Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР;
	СтроитсяАвтоматически = Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически;
	
	СтруктураПрав = Новый Структура("ПравоИнтерактивноеДобавление, ПравоИнтерактивнаяПометкаУдаления, ПравоРедактирование");
	ЗаполнитьЗначенияСвойств(СтруктураПрав, Форма);
	
	ПравоИнтерактивноеДобавление = СтруктураПрав.ПравоИнтерактивноеДобавление = Истина;
	ПравоИнтерактивнаяПометкаУдаления = СтруктураПрав.ПравоИнтерактивнаяПометкаУдаления = Истина;
	ПравоРедактирование = СтруктураПрав.ПравоРедактирование = Истина;

	// Добавлять ОР (в т.ч. копированием) можно только в "основной" иерархии.
	ДоступностьКопирования = ТекущиеДанные <> Неопределено И ((РазрешенВводНовыхОР И ПравоИнтерактивноеДобавление) ИЛИ (ТекущиеДанные.Свойство("Ссылка") И торо_РаботаСИерархией20.ОбъектРемонтаЭтоФункциональноеМесто(ТекущиеДанные.Ссылка)));

	Если Элементы.Найти("СписокКонтекстноеМенюСкопировать") <> Неопределено Тогда
		Элементы.ФормаСкопировать.Доступность = ДоступностьКопирования;
		Элементы.СписокКонтекстноеМенюСкопировать.Доступность = ДоступностьКопирования;
	КонецЕсли;
	
	ДоступностьРедактирования = ПравоРедактирование И ТекущиеДанные <> Неопределено;
	
	Если Элементы.Найти("СписокКонтекстноеМенюИзменить") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюИзменить.Доступность = ДоступностьРедактирования;
	КонецЕсли;
	
	ДоступностьПометкиУдаления = ПравоИнтерактивнаяПометкаУдаления И ТекущиеДанные <> Неопределено;
	
	Если Элементы.Найти("СписокКонтекстноеМенюПометитьНаУдалениеТекущийЭлемент") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюПометитьНаУдалениеТекущийЭлемент.Доступность = ДоступностьПометкиУдаления;
	КонецЕсли;
	Если Элементы.Найти("СписокКонтекстноеМенюПометитьНаУдалениеСПодчиненными") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюПометитьНаУдалениеСПодчиненными.Доступность = ДоступностьПометкиУдаления;
	КонецЕсли;
	
	// Удаление из иерархии и добавлении в иерархию имеет смысл только для "неосновных" иерархий.
	ДоступностьУдаленияИзИерархии = ПравоИнтерактивнаяПометкаУдаления И НЕ СтроитсяАвтоматически И НЕ РазрешенВводНовыхОР;
	
	Если Элементы.Найти("СписокКонтекстноеМенюУдалитьИзИерархииТекущийЭлемент") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюУдалитьИзИерархииТекущийЭлемент.Доступность = ДоступностьУдаленияИзИерархии;
	КонецЕсли;
	Если Элементы.Найти("СписокКонтекстноеМенюУдалитьИзИерархииСПодчиненными") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюУдалитьИзИерархииСПодчиненными.Доступность = ДоступностьУдаленияИзИерархии;
	КонецЕсли;
	
	ДоступностьИзмененияПоложения = НЕ СтроитсяАвтоматически И ПравоРедактирование И ТекущиеДанные <> Неопределено;
	
	Если Элементы.Найти("СписокКонтекстноеМенюИзменитьПоложениеВИерархии") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюИзменитьПоложениеВИерархии.Доступность = ДоступностьИзмененияПоложения;
	КонецЕсли;
	
	Попытка
		ДоступностьПереходаКПолномуДереву = НЕ СтроитсяАвтоматически И ТекущиеДанные <> Неопределено
			И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта")
			И НЕ ТекущиеДанные.ЭтоГруппа;
	Исключение
		ДоступностьПереходаКПолномуДереву = Ложь;	
	КонецПопытки;
		
	Если Элементы.Найти("СписокКонтекстноеМенюПереключитьНаВидДерева") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюПереключитьНаВидДерева.Доступность = ДоступностьПереходаКПолномуДереву;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКомандПолногоДереваПриАктивизацииСтроки(Форма, ТекущиеДанные) Экспорт
	
	Элементы = Форма.Элементы;
	
	РазрешенВводНовыхОР = Форма.СтруктураПараметровИерархии.РазрешенВводНовыхОР;
	СтроитсяАвтоматически = Форма.СтруктураПараметровИерархии.СтроитсяАвтоматически;
	
	СтруктураПрав = Новый Структура("ПравоИнтерактивнаяПометкаУдаления, ПравоРедактирование");
	ЗаполнитьЗначенияСвойств(СтруктураПрав, Форма);
	
	ПравоИнтерактивнаяПометкаУдаления = СтруктураПрав.ПравоИнтерактивнаяПометкаУдаления = Истина;
	ПравоРедактирование = СтруктураПрав.ПравоРедактирование = Истина;
	
	ДоступностьРедактирования = ПравоРедактирование И ТекущиеДанные <> Неопределено 
			И ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.торо_СтруктурыОР");
			
	Если Элементы.Найти("ДеревоПолноеИзменитьТекущийЭлемент") <> Неопределено Тогда
		Элементы.ДеревоПолноеИзменитьТекущийЭлемент.Доступность = ДоступностьРедактирования;
	КонецЕсли;
			
	Если Элементы.Найти("ДеревоПолноеИзменитьТекущийЭлемент1") <> Неопределено Тогда
		Элементы.ДеревоПолноеИзменитьТекущийЭлемент1.Доступность = ДоступностьРедактирования;
	КонецЕсли;
	
	ДоступностьПометкиУдаления = ПравоИнтерактивнаяПометкаУдаления И ТекущиеДанные <> Неопределено
			И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта");
	
	Если Элементы.Найти("ДеревоПолноеПометитьНаУдалениеТекущийЭлемент1") <> Неопределено Тогда
		Элементы.ДеревоПолноеПометитьНаУдалениеТекущийЭлемент1.Доступность = ДоступностьПометкиУдаления;
	КонецЕсли;
	Если Элементы.Найти("ДеревоПолноеПометитьНаУдалениеСПодчиненными1") <> Неопределено Тогда
		Элементы.ДеревоПолноеПометитьНаУдалениеСПодчиненными1.Доступность = ДоступностьПометкиУдаления;
	КонецЕсли;
	
	// Удаление из иерархии и добавлении в иерархию имеет смысл только для "неосновных" иерархий.
	ДоступностьУдаленияИзИерархии = ПравоИнтерактивнаяПометкаУдаления И НЕ СтроитсяАвтоматически И НЕ РазрешенВводНовыхОР
			И ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта");
	
	Если Элементы.Найти("ДеревоПолноеУдалитьИзИерархииТекущийЭлемент1") <> Неопределено Тогда
		Элементы.ДеревоПолноеУдалитьИзИерархииТекущийЭлемент1.Доступность = ДоступностьУдаленияИзИерархии;
	КонецЕсли;
	Если Элементы.Найти("ДеревоПолноеУдалитьИзИерархииСПодчиненными1") <> Неопределено Тогда
		Элементы.ДеревоПолноеУдалитьИзИерархииСПодчиненными1.Доступность = ДоступностьУдаленияИзИерархии;
	КонецЕсли;
	
	ДоступностьИзмененияПоложения = НЕ СтроитсяАвтоматически И ПравоРедактирование И ТекущиеДанные <> Неопределено
			И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта");
			
	Если Элементы.Найти("ДеревоПолноеИзменитьПоложениеВИерархии") <> Неопределено Тогда
		Элементы.ДеревоПолноеИзменитьПоложениеВИерархии.Доступность = ДоступностьИзмененияПоложения;
	КонецЕсли;

	Если Элементы.Найти("ДеревоПолноеИзменитьПоложениеВИерархии1") <> Неопределено Тогда
		Элементы.ДеревоПолноеИзменитьПоложениеВИерархии1.Доступность = ДоступностьИзмененияПоложения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеИерархииНаКлиенте(Форма, ИмяЭлементаДерево = "Дерево") Экспорт
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(Форма, ИмяЭлементаДерево);
	УстановитьДоступностьКомандФормы(Форма);
	
	СтрокиДерева = Форма[ИмяЭлементаДерево].ПолучитьЭлементы();
	Если СтрокиДерева.Количество() > 0 Тогда
		Форма.Элементы[ИмяЭлементаДерево].ТекущаяСтрока = СтрокиДерева[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТиповымиОР

Процедура ПередКопированиемТиповогоОбъектаРемонта(Форма, КопируемыйЭлемент, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КопируемыйЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДопРеквизиты = торо_УправлениеСвойствами.ЕстьИндивидуальныеДополнительныеРеквизиты(КопируемыйЭлемент, "НаборСвойствОР");
	
	Если НЕ ЕстьДопРеквизиты Тогда
		Возврат;	
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекстВопроса = НСтр("ru='Скопировать паспортные характеристики типового объекта? 
									|При ответе ""Да"" новый типовой объект будет сразу записан.
									|Остальные нормативы будут скопированы в любом случае.'");
	
	ДополнительныеПараметры = Новый Структура("КопируемыйЭлемент, Форма", КопируемыйЭлемент, Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("КопированиеТипового_ПослеВопросаОКопированииДопРеквизитов", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры
	
	
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСДеревомИерархии

// Достраивает разворачивает и достраивает дерево по родителям искомого объекта ремонта.
Процедура ДостроитьДеревоДоЭлемента(Форма, ИскомаяСсылка, ИмяЭлементаДерево = "Дерево")
	
	ДеревоРеквизит = Форма[ИмяЭлементаДерево];
	ДеревоЭлемент = Форма.Элементы[ИмяЭлементаДерево];
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(ИскомаяСсылка);
	торо_РаботаСИерархией20.ЗаполнитьМассивРодителейОбъектаРемонта(ИскомаяСсылка, МассивРодителей, Форма.ТекСтруктураИерархии);
	
	Если МассивРодителей.Количество() = 0 Тогда
		СтрокаРодителя = ДеревоРеквизит.ПолучитьЭлементы()[0];
		ДеревоЭлемент.ТекущаяСтрока = СтрокаРодителя.ПолучитьИдентификатор();
		Возврат;
	КонецЕсли;
	
	ИндексРодителя = МассивРодителей.Количество() - 1;
	СтрокиДерева = ДеревоРеквизит.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Пока ИндексРодителя >= 0 Цикл
		СтрокаРодителя = Неопределено;
		Для каждого ТекСтрокаДерева из СтрокиДерева Цикл 
			Если ТекСтрокаДерева.Ссылка = МассивРодителей[ИндексРодителя] Тогда
				СтрокаРодителя = ТекСтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаРодителя <> Неопределено Тогда
			ИдентификаторСтроки = СтрокаРодителя.ПолучитьИдентификатор();
			Если ИндексРодителя = 0 Тогда
				ДеревоЭлемент.ТекущаяСтрока = ИдентификаторСтроки;
			Иначе
				ДеревоЭлемент.Развернуть(ИдентификаторСтроки, Ложь);
				СтрокиДерева = СтрокаРодителя.ПолучитьЭлементы();
			КонецЕсли;
		КонецЕсли;
		
		ИндексРодителя = ИндексРодителя-1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСостояниеДерева(Форма, ДеревоЭлемент, ДеревоРеквизит, СтруктураИерархии = Неопределено) Экспорт
	
	ТекущиеДанные = ДеревоЭлемент.ТекущиеДанные;
	
	Если СтруктураИерархии = Неопределено Тогда
		СтруктураИерархии = Форма.ТекСтруктураИерархии;
	КонецЕсли;
	
	СостояниеДереваОР = Новый Структура;
	СостояниеДереваОР.Вставить("СтруктураИерархии",СтруктураИерархии);
	СостояниеДереваОР.Вставить("ТекОР",?(ТекущиеДанные = Неопределено, ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"),ТекущиеДанные.Ссылка));
	МассивОткрытыхОР = Новый Массив;
	МассивОткрытыхОР.Добавить(ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"));
	
	ЭлементыДерева = ДеревоРеквизит.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		ПолучитьМассивРазвернутыхОР(ДеревоЭлемент,МассивОткрытыхОР,СтрокаДерева);
	КонецЦикла;
	
	СостояниеДереваОР.Вставить("МассивОткрытыхОР",МассивОткрытыхОР);
	Возврат СостояниеДереваОР;
	
КонецФункции

Процедура ПолучитьМассивРазвернутыхОР(ДеревоЭлемент, МассивОткрытыхОР, Строка)
	
	Если ДеревоЭлемент.Развернут(Строка.ПолучитьИдентификатор()) Тогда
		МассивОткрытыхОР.Добавить(Строка.Ссылка);
		Для Каждого СтрокаПодчиненная Из Строка.ПолучитьЭлементы() Цикл
			ПолучитьМассивРазвернутыхОР(ДеревоЭлемент, МассивОткрытыхОР, СтрокаПодчиненная);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСостояниеДереваНаКлиенте(СостояниеДереваОР, ДеревоРеквизит, ДеревоЭлемент, ЗаполнятьПризнакиВведенныхПоказателей = Ложь) Экспорт
	
	МассивОткрытыхОР = СостояниеДереваОР.МассивОткрытыхОР;
	Для Каждого Строка Из ДеревоРеквизит.ПолучитьЭлементы() Цикл
		РазвернутьВетвиДерева(МассивОткрытыхОР, Строка, ДеревоЭлемент, СостояниеДереваОР.ТекОР, ЗаполнятьПризнакиВведенныхПоказателей);
	КонецЦикла;
	
КонецПроцедуры

Процедура РазвернутьВетвиДерева(МассивОР, СтрокаДерева, ДеревоЭлемент, ТекОР, ЗаполнятьПризнакиВведенныхПоказателей = Ложь)
	
	Если СтрокаДерева.Ссылка = ТекОР Тогда 
		ДеревоЭлемент.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если МассивОР.Найти(СтрокаДерева.Ссылка) <> Неопределено Тогда
		ДеревоЭлемент.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивПодчиненныхОР = Новый Массив();
	Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		РазвернутьВетвиДерева(МассивОР, СтрокаДереваПодчиненная, ДеревоЭлемент, ТекОР);
		
		Если ЗаполнятьПризнакиВведенныхПоказателей Тогда
		    МассивПодчиненныхОР.Добавить(СтрокаДереваПодчиненная.ОбъектРемонта);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗаполнятьПризнакиВведенныхПоказателей Тогда
	    Возврат;
	КонецЕсли;
	
	СоответствиеОР = торо_РаботаСИерархией20.ЗаполнитьНаличиеПоказателейВДереве(, МассивПодчиненныхОР);
	Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		СтруктураСтроки = СоответствиеОР[СтрокаДереваПодчиненная.ОбъектРемонта];
		Если ЗначениеЗаполнено(СтруктураСтроки) Тогда
		    ЗаполнитьЗначенияСвойств(СтрокаДереваПодчиненная, СтруктураСтроки);
			СтрокаДереваПодчиненная.Состояние = СтруктураСтроки.ВидЭксплуатации;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДинамическимСпискомОбъектовРемонта

Процедура СоздатьОбъектРемонтаСОткрытиемФормы(ФормаСписка, Копирование, Группа, ТекущийРодитель, ТекущаяСсылка, ИндексКартинки, ЭтоФМ = Ложь) Экспорт
	
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
		Если Не Копирование Тогда
			
			ПараметрыФормы = Новый Структура("СтруктураИерархии, РодительИерархии", ФормаСписка.ТекСтруктураИерархии, ТекущийРодитель);
			ЗначенияЗаполнения = Новый Структура("РодительИерархии", ТекущийРодитель);
			
			Если ЭтоФМ Тогда
				ЗначенияЗаполнения.Вставить("ТипОбъекта", ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто"));
			КонецЕсли;	
			
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
				
			Если Группа Тогда
				ПараметрыФормы.Вставить("ЭтоГруппа", Истина);
				ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаГруппы", ПараметрыФормы,	ФормаСписка);
			Иначе
				ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы, ФормаСписка);
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				
				Если торо_РаботаСИерархией20КлиентСервер.ЭтоОбъектСПодчиненнымиПоКартинке(ИндексКартинки) Тогда
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("Форма", ФормаСписка);
					ДопПараметры.Вставить("СтруктураИерархии", ФормаСписка.ТекСтруктураИерархии);
					ДопПараметры.Вставить("РодительИерархии", ТекущийРодитель);
					ДопПараметры.Вставить("ЗначениеКопирования", ТекущаяСсылка);
					ДопПараметры.Вставить("ЭтоГруппа", Группа);
					
					ОписаниеОповещения = Новый ОписаниеОповещения("Скопировать_ПослеВопросаОПодчиненных", ЭтотОбъект, ДопПараметры);
					ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Скопировать какие-либо объекты ремонта, входящие в состав выбранного?'"), РежимДиалогаВопрос.ДаНет);
					
				Иначе 
					СоздатьОбъектРемонтаКопированием(ФормаСписка, ТекущаяСсылка, Группа, ФормаСписка.ТекСтруктураИерархии, ТекущийРодитель);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьИерархиюИзКоторойДобавитьОР(ФормаСписка, ТекущаяСсылка, ИмяЭлементаДерево, ТолькоФМ = Ложь) Экспорт
	
	ТекСтруктураИерархии = ФормаСписка.ТекСтруктураИерархии;
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("Редактирование", "Справочники", "торо_ОбъектыРемонта") Тогда
		СписокИерархийОР = торо_РаботаСИерархией20.ПолучитьСписокИерархий(ТекСтруктураИерархии);
		КолЭлемВСписке = СписокИерархийОР.Количество();
		
		ДопПараметры = Новый Структура("Форма, ТекЭлемент, ИмяЭлементаДерево, ТолькоФМ", ФормаСписка, ТекущаяСсылка, ИмяЭлементаДерево, ТолькоФМ);
		
		Если КолЭлемВСписке > 1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВИерархиюЗавершение", ЭтотОбъект, ДопПараметры);
			ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекСтруктураИерархии);
			ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора",ПараметрыОткрытия, ФормаСписка,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли КолЭлемВСписке = 1 Тогда
			РезультатЗакрытия = СписокИерархийОР[0].Значение;
			ДобавитьВИерархиюЗавершение(РезультатЗакрытия, ДопПараметры);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нет других иерархий для добавления из них объектов ремонта!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ДобавлениеВИерархию++

// Обработчик завершения добавления в иерархию. 
// Открывает форму выбора ОР с иерархией, из которой будет перенесен ОР.
//
// Параметры:
//  РезультатЗакрытия - Структура - содержащая выбранную структуру иерархии.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ДобавитьВИерархиюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураИерархии", РезультатЗакрытия);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДобавлениеВИерархию");
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("ВернутьИерархию", Истина);
		ПараметрыФормы.Вставить("ТолькоФМ", ДополнительныеПараметры.ТолькоФМ);
		
		ДеревоЭлемент = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.ИмяЭлементаДерево];
		
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыФормы,	ДеревоЭлемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьМассивОРВИерархиюСПроверкой(СтруктураИерархии, МассивВыбранныхОР, РодительИерархии, ИерархияИсточник = Неопределено, РодительИсточник = Неопределено, НеСохранятьИерархию = Ложь) Экспорт
	
	Если торо_РаботаСИерархией20.ДобавлениеПриведетКЗацикливанию(МассивВыбранныхОР, СтруктураИерархии, РодительИерархии) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивВыбранныхОР.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Выбранное значение уже находится в иерархии. Изменить его положение?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Некоторые из выбранных значений уже находится в иерархии. Изменить их положение?'");
	КонецЕсли;
	
	СоответствиеОРСуществующихВТекИеррархии = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивВыбранныхОР, СтруктураИерархии,,Истина,Истина);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СтруктураИерархии", СтруктураИерархии);
	ДопПараметры.Вставить("МассивВыбранныхОР", МассивВыбранныхОР);
	ДопПараметры.Вставить("СоответствиеОРСуществующихВТекИеррархии", СоответствиеОРСуществующихВТекИеррархии);
	ДопПараметры.Вставить("РодительИерархии", РодительИерархии);
	ДопПараметры.Вставить("ИерархияИсточник", ИерархияИсточник);
	ДопПараметры.Вставить("РодительИсточник", РодительИсточник);
	ДопПараметры.Вставить("НеСохранятьИерархию", НеСохранятьИерархию);
											
	Если СоответствиеОРСуществующихВТекИеррархии.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьМассивОРВИерархиюПослеПроверки", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ДобавитьМассивОРВИерархиюПослеПроверки(КодВозвратаДиалога.Да, ДопПараметры);
	КонецЕсли;

КонецПроцедуры

// Завершщение процедуры выбора нескольких ОР.
//
// Параметры:
//		РезультатВопроса - КодВозвратаДиалога - ответ на вопрос.
//		ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ДобавитьМассивОРВИерархиюПослеПроверки(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивОР = ДополнительныеПараметры.МассивВыбранныхОР;
	СоответствиеОРСуществующихВТекИеррархии = ДополнительныеПараметры.СоответствиеОРСуществующихВТекИеррархии;
	РодительИерархии = ДополнительныеПараметры.РодительИерархии;
	СтруктураИерархии = ДополнительныеПараметры.СтруктураИерархии;
	ИерархияИсточник = ДополнительныеПараметры.ИерархияИсточник;
	РодительИсточник = ДополнительныеПараметры.РодительИсточник;
	НеСохранятьИерархию = ДополнительныеПараметры.НеСохранятьИерархию;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		МассивОРДляИзменения = МассивОР;
		
	Иначе
		
		МассивОРБезСуществующих = Новый Массив;
		Для Каждого ОР Из МассивОР Цикл
			Если СоответствиеОРСуществующихВТекИеррархии[ОР] = Неопределено Тогда
				МассивОРБезСуществующих.Добавить(ОР);
			КонецЕсли;
		КонецЦикла;
		
		МассивОРДляИзменения = МассивОРБезСуществующих;
	     
	КонецЕсли;
	
	Отказ = Ложь;
	торо_РаботаСИерархией20.ДобавитьВИерархиюНаСервере(МассивОРДляИзменения, СтруктураИерархии, РодительИерархии, СоответствиеОРСуществующихВТекИеррархии, ИерархияИсточник, РодительИсточник, НеСохранятьИерархию, Отказ);
	
	Если НЕ Отказ Тогда
		Оповестить("ИзмененаСтруктураИерархииОР", СтруктураИерархии);
	КонецЕсли;

КонецПроцедуры

// ДобавлениеВИерархию--

// СозданиеКопированием++

Процедура Скопировать_ПослеВопросаОПодчиненных(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РодительИерархии            = ДополнительныеПараметры.РодительИерархии;
	СтруктураИерархии           = ДополнительныеПараметры.СтруктураИерархии;
	ЗначениеКопирования         = ДополнительныеПараметры.ЗначениеКопирования;
	Форма                       = ДополнительныеПараметры.Форма;
	ЭтоГруппа                   = ДополнительныеПараметры.ЭтоГруппа;
	
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			КопироватьПодчиненных = Истина;

			ДополнительныеПараметры.Вставить("КопироватьПодчиненных", КопироватьПодчиненных);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("Скопировать_ПослеВыбораПодчиненных", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы = Новый Структура("ОРВерхнегоУровня, ТекСтруктураИерархии, РодительОР, СоздаватьПослеВыбора", 
														ЗначениеКопирования, СтруктураИерархии, РодительИерархии, Ложь);
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаДерева", ПараметрыФормы, Форма, Форма,,, ОписаниеОповещения);
			Возврат;
		Иначе 
			КопироватьПодчиненных = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
	СоздатьОбъектРемонтаКопированием(Форма, ЗначениеКопирования, ЭтоГруппа, СтруктураИерархии, РодительИерархии, КопироватьПодчиненных);
КонецПроцедуры

Процедура Скопировать_ПослеВыбораПодчиненных(Результат, ДополнительныеПараметры) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
	    Возврат;
	КонецЕсли;
	
	РодительИерархии            = ДополнительныеПараметры.РодительИерархии;
	СтруктураИерархии           = ДополнительныеПараметры.СтруктураИерархии;
	ЗначениеКопирования         = ДополнительныеПараметры.ЗначениеКопирования;
	Форма                       = ДополнительныеПараметры.Форма;
	ЭтоГруппа                   = ДополнительныеПараметры.ЭтоГруппа;
	КопироватьПодчиненных		= ДополнительныеПараметры.КопироватьПодчиненных;
	ПодчиненныеДляКопирования	= Результат;
	
	СоздатьОбъектРемонтаКопированием(Форма, ЗначениеКопирования, ЭтоГруппа, СтруктураИерархии, РодительИерархии, КопироватьПодчиненных, ПодчиненныеДляКопирования);
КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированием(Форма, ЗначениеКопирования, ЭтоГруппа, СтруктураИерархии, РодительИерархии, КопироватьПодчиненных = Ложь, ПодчиненныеДляКопирования = Неопределено) Экспорт
	
	Если Не ЭтоГруппа Или КопироватьПодчиненных Тогда
		
		СписокПараметровКопирования = Новый СписокЗначений;
		
		СтруктураФО = Новый Структура("торо_УчетКонтролируемыхПоказателей, торо_УчетНаработкиОборудования, торо_УчетЗапчастей");
		торо_ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруФункциональныхОпций(СтруктураФО);
		
		Если СтруктураФО.торо_УчетКонтролируемыхПоказателей = Истина Тогда
			СписокПараметровКопирования.Добавить("Контролируемые показатели");
		КонецЕсли;
		
		Если СтруктураФО.торо_УчетНаработкиОборудования = Истина Тогда
			СписокПараметровКопирования.Добавить("Параметры наработки (только действующие значения)");
			СписокПараметровКопирования.Добавить("Параметры наработки (история изменения)");
		КонецЕсли;
		
		Если СтруктураФО.торо_УчетЗапчастей = Истина И Не торо_РаботаСИерархией20.ОбъектРемонтаЭтоФункциональноеМесто(ЗначениеКопирования) Тогда
			СписокПараметровКопирования.Добавить("Запчасти");
		КонецЕсли;
		
		Если СписокПараметровКопирования.Количество() Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Форма", Форма);
			ДопПараметры.Вставить("СтруктураИерархии", СтруктураИерархии);
			ДопПараметры.Вставить("РодительИерархии", РодительИерархии);
			ДопПараметры.Вставить("СписокПараметровКопирования", СписокПараметровКопирования);
			ДопПараметры.Вставить("ЗначениеКопирования", ЗначениеКопирования);
			ДопПараметры.Вставить("ЭтоГруппа", ЭтоГруппа);
			ДопПараметры.Вставить("КопироватьПодчиненных", КопироватьПодчиненных);
			ДопПараметры.Вставить("ПодчиненныеДляКопирования", ПодчиненныеДляКопирования);
			
			ЗаголовокСпискаВыбора = ?(Не ЭтоГруппа, НСтр("ru = 'Переносить при копировании'"), НСтр("ru = 'Переносить подчиненных объектов ремонта группы при копировании'"));
			СписокПараметровКопирования.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("СоздатьОбъектРемонтаКопированием_ОбработатьВыборКопируемыхПараметров", ЭтотОбъект, ДопПараметры), ЗаголовокСпискаВыбора);
		Иначе
			СоздатьОбъектРемонтаКопированием_Завершение(Форма, СтруктураИерархии, РодительИерархии, СписокПараметровКопирования, ЗначениеКопирования, ЭтоГруппа, КопироватьПодчиненных, ПодчиненныеДляКопирования);
		КонецЕсли;
		
	Иначе
		СоздатьОбъектРемонтаКопированием_Завершение(Форма, СтруктураИерархии, РодительИерархии, Новый СписокЗначений, ЗначениеКопирования, ЭтоГруппа, КопироватьПодчиненных, ПодчиненныеДляКопирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированием_ОбработатьВыборКопируемыхПараметров(Результат, ДополнительныеПараметры) Экспорт
	
	РодительИерархии            = ДополнительныеПараметры.РодительИерархии;
	СтруктураИерархии           = ДополнительныеПараметры.СтруктураИерархии;
	СписокПараметровКопирования = ДополнительныеПараметры.СписокПараметровКопирования;
	ЗначениеКопирования         = ДополнительныеПараметры.ЗначениеКопирования;
	Форма                       = ДополнительныеПараметры.Форма;
	ЭтоГруппа                   = ДополнительныеПараметры.ЭтоГруппа;
	КопироватьПодчиненных		= ДополнительныеПараметры.КопироватьПодчиненных;
	ПодчиненныеДляКопирования	= ДополнительныеПараметры.ПодчиненныеДляКопирования;

	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		СписокОбхода = СписокПараметровКопирования.Скопировать();
		Для каждого ЭлементСписка Из СписокОбхода Цикл
			Если НЕ ЭлементСписка.Пометка Тогда
				СписокПараметровКопирования.Удалить(СписокПараметровКопирования.НайтиПоЗначению(ЭлементСписка.Значение));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокПараметровКопирования.Количество() Тогда 
		ТекстВопроса = НСтр("ru = 'Для копирования выбранных параметров необходимо записать новый объект ремонта. Записать?
		|(В случае отказа параметры не будут скопированы.)'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьОбъектРемонтаКопированием_ПослеВопросаОЗаписи", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СоздатьОбъектРемонтаКопированием_Завершение(Форма, СтруктураИерархии, РодительИерархии, СписокПараметровКопирования, ЗначениеКопирования, ЭтоГруппа, КопироватьПодчиненных, ПодчиненныеДляКопирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированием_ПослеВопросаОЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РодительИерархии            = ДополнительныеПараметры.РодительИерархии;
	СтруктураИерархии           = ДополнительныеПараметры.СтруктураИерархии;
	СписокПараметровКопирования = ДополнительныеПараметры.СписокПараметровКопирования;
	ЗначениеКопирования         = ДополнительныеПараметры.ЗначениеКопирования;
	Форма                       = ДополнительныеПараметры.Форма;
	ЭтоГруппа                   = ДополнительныеПараметры.ЭтоГруппа;
	КопироватьПодчиненных		= ДополнительныеПараметры.КопироватьПодчиненных;
	ПодчиненныеДляКопирования	= ДополнительныеПараметры.ПодчиненныеДляКопирования;

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		СписокПараметровКопирования.Очистить();
	КонецЕсли;
	
	СоздатьОбъектРемонтаКопированием_Завершение(Форма, СтруктураИерархии, РодительИерархии, СписокПараметровКопирования, ЗначениеКопирования, ЭтоГруппа, КопироватьПодчиненных, ПодчиненныеДляКопирования);
КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированием_Завершение(Форма, СтруктураИерархии, Знач РодительИерархии, Знач СписокПараметровКопирования, Знач ЗначениеКопирования, ЭтоГруппа, КопироватьПодчиненных = Ложь, ПодчиненныеДляКопирования = Неопределено)
	
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ЗначениеКопирования);
		ПараметрыФормы.Вставить("СтруктураИерархии", СтруктураИерархии);
		ПараметрыФормы.Вставить("РодительИерархии", РодительИерархии);
		
		Если КопироватьПодчиненных Тогда
			торо_РаботаСИерархией20.СкопироватьОРСПодчиненными(ПодчиненныеДляКопирования, РодительИерархии, СтруктураИерархии, СписокПараметровКопирования);
		ИначеЕсли Не ЭтоГруппа Тогда
			ПараметрыФормы.Вставить("СписокПараметровКопирования", СписокПараметровКопирования);
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы, Форма);
		Иначе
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаГруппы", ПараметрыФормы, Форма);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

// СозданиеКопированием--

// ПометкаНаУдаление++

Процедура ПометкаУдаленияОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;

	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	НовоеЗначениеПометки = ДополнительныеПараметры.НовоеЗначениеПометки;
	МассивДанныхСтрок = ДополнительныеПараметры.МассивДанныхСтрок;
	СПодчиненными = ДополнительныеПараметры.СПодчиненными;
	
	Если СПодчиненными ИЛИ НовоеЗначениеПометки = ЛОЖЬ Тогда
		ПометитьНаУдалениеНаКлиенте(ДополнительныеПараметры, СПодчиненными, Истина);
	Иначе // То есть НовоеЗначениеПометки = Истина И СПодчиненными = Ложь.
		
		// Перенести все подчиненные элементы в корень иерархий.
		МассивОРДляИзменения = Новый Массив;
		
		Для каждого ТекДанные из МассивДанныхСтрок Цикл
			Если ТекДанные.ПометкаУдаления = НовоеЗначениеПометки Тогда
				Продолжить;
			КонецЕсли;
			МассивОРДляИзменения.Добавить(ТекДанные.Ссылка);
		КонецЦикла;
		
		ОбъединеннаяКоллецияЭлементов = торо_РаботаСИерархией20.ПолучитьСоответствиеПодчиненныхВоВсехИерархиях(МассивОРДляИзменения);
		ЕстьГруппы = ОбъединеннаяКоллецияЭлементов.Количество() > 0;
		
		Если ЕстьГруппы Тогда
			// Перенести все подчиненные элементы в корень иерархий.
			ПометитьНаУдалениеНаКлиенте(ДополнительныеПараметры, СПодчиненными, Ложь);
			торо_РаботаСИерархией20.ПеренестиЭлементыВКореньИерархии(ОбъединеннаяКоллецияЭлементов, ЭтаФорма.ТекСтруктураИерархии);
			торо_РаботаСИерархией20.СнятьСЭлементовОтметкуГруппыВоВсехИерархиях(МассивОРДляИзменения);
			торо_РаботаСФункциональнымиМестами.ДемонтажПриПометкеНаУдаление(МассивОРДляИзменения, СПодчиненными);
			Оповестить("ИзмененаСтруктураИерархииОР", Неопределено, ЭтаФорма);
		Иначе
			ПометитьНаУдалениеНаКлиенте(ДополнительныеПараметры, СПодчиненными, Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПометитьНаУдалениеНаКлиенте(ДополнительныеПараметры, СПодчиненными = Ложь, Оповещать = Истина)
	
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	НовоеЗначениеПометки = ДополнительныеПараметры.НовоеЗначениеПометки;
	МассивДанныхСтрок = ДополнительныеПараметры.МассивДанныхСтрок;
	
	МассивСсылокДляИзменения = Новый Массив;
	
	Для каждого ДанныеСтроки из МассивДанныхСтрок Цикл
		Если ДанныеСтроки.ПометкаУдаления = НовоеЗначениеПометки Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылокДляИзменения.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	МассивИзмененных = торо_РаботаСИерархией20.ПометитьНаУдалениеНаСервере(МассивСсылокДляИзменения, НовоеЗначениеПометки, СПодчиненными);
	
	Если Оповещать Тогда
		ПараметрОповещения = Новый Структура("НовоеЗначениеПометки, МассивСсылок", НовоеЗначениеПометки, МассивИзмененных);
		Оповестить("ИзмененаПометкаУдаленияОР", ПараметрОповещения, ЭтаФорма);
	КонецЕсли;
	
	Для каждого ОР из МассивСсылокДляИзменения Цикл
		ОповеститьОбИзменении(ОР);
	КонецЦикла;
	
КонецПроцедуры

// ПометкаНаУдаление--

// УдалениеИзИерархии++

Процедура УдалитьИзИерархииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	МассивДанныхСтрок = ДополнительныеПараметры.МассивДанныхСтрок;
	СПодчиненными = ДополнительныеПараметры.СПодчиненными;
	ТекСтруктураИерархии = Форма.ТекСтруктураИерархии;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	МассивОР = Новый массив;
	Для каждого ТекущиеДанные из МассивДанныхСтрок Цикл
		МассивОР.Добавить(ТекущиеДанные.Ссылка);
	КонецЦикла;
	
	торо_РаботаСИерархией20.УдалитьИзИерархииНаСервере(МассивОР, ТекСтруктураИерархии, СПодчиненными);
	
	Оповестить("ИзмененаСтруктураИерархииОР", ТекСтруктураИерархии, Форма);
		
КонецПроцедуры

// УдалениеИзИерархии--

// ИзменениеПоложенияВИерархии++

Процедура ИзменитьПоложениеВИерархииЗавершение(НовыйРодитель, ДополнительныеПараметры) Экспорт
	
	Если НовыйРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(НовыйРодитель) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	МассивВыбранныхОбъектов = ПолучитьМассивДанныхВыделенныхСтрок(ЭтаФорма, Истина);
	
	Отказ = Ложь;
	торо_РаботаСИерархией20.ИзменитьПоложениеВИерархииНаСервере(МассивВыбранныхОбъектов, ЭтаФорма.ТекСтруктураИерархии, НовыйРодитель, Отказ);
	
	Если НЕ Отказ Тогда
		Оповестить("ИзмененаСтруктураИерархииОР", ЭтаФорма.ТекСтруктураИерархии, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// ИзменениеПоложенияВИерархии--

#КонецОбласти

#Область РаботаСТиповымиОР

Процедура КопированиеТипового_ПослеВопросаОКопированииДопРеквизитов(Результат, ДополнительныеПараметры) Экспорт

	КопируемыйЭлемент = ДополнительныеПараметры.КопируемыйЭлемент;
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НовыйТиповой = торо_УправлениеСвойствами.СкопироватьОбъектСНаборомДополнительныхРеквизитов(КопируемыйЭлемент, "НаборСвойствОР");
		
		Если НЕ ЗначениеЗаполнено(НовыйТиповой) Тогда
			ТекстСообщения = НСтр("ru='Не удалось выполнить копирование, подробности см. в журнале регистрации.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Ключ", НовыйТиповой);
		ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаОбъекта", ПараметрыФормы, Форма);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда	
		
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", КопируемыйЭлемент);
		ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаОбъекта", ПараметрыФормы, Форма); 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьМассивДанныхВыделенныхСтрок(Форма, ТолькоСсылки = Ложь, РазрешитьВыборКорня = Ложь, РазрешитьВыборНеОР = Ложь, РазрешитьВыборФункциональныхМест = Истина) Экспорт
	
	МассивДанныхСтрок = Новый Массив;
	Элементы = Форма.Элементы;
	
	ЭлементПолноеДерево = Элементы.Найти("ДеревоПолное");
	
	Если Форма.ТекущийЭлемент = Элементы.Дерево Тогда
		ЗаполнитьМассивДанныхВыделенныхСтрокИзДереваЗначений(МассивДанныхСтрок, Форма, "Дерево", ТолькоСсылки, РазрешитьВыборКорня, РазрешитьВыборНеОР, РазрешитьВыборФункциональныхМест);
	ИначеЕсли ЭлементПолноеДерево <> Неопределено И Форма.ТекущийЭлемент = ЭлементПолноеДерево Тогда
		ЗаполнитьМассивДанныхВыделенныхСтрокИзДереваЗначений(МассивДанныхСтрок, Форма, "ДеревоПолное", ТолькоСсылки, РазрешитьВыборКорня, РазрешитьВыборНеОР, РазрешитьВыборФункциональныхМест);
	Иначе
		ЗаполнитьМассивДанныхВыделенныхСтрокИзДинамическогоСписка(МассивДанныхСтрок, Форма, "Список", ТолькоСсылки, РазрешитьВыборФункциональныхМест);
	КонецЕсли;

	Возврат МассивДанныхСтрок;
	
КонецФункции

Процедура ЗаполнитьМассивДанныхВыделенныхСтрокИзДереваЗначений(МассивДанныхСтрок, Форма, ИмяЭлемента, ТолькоСсылки = Ложь, РазрешитьВыборКорня = Ложь, РазрешитьВыборНеОР = Ложь, РазрешитьВыборФункциональныхМест = Истина) Экспорт

	ДеревоЭлемент = Форма.Элементы[ИмяЭлемента];
	ДеревоРеквизит = Форма[ИмяЭлемента];
	
	ВыделенныеСтроки = ДеревоЭлемент.ВыделенныеСтроки;
	Для каждого ИДВыделеннойСтроки из ВыделенныеСтроки Цикл
		ДанныеВыделеннойСтроки = ДеревоРеквизит.НайтиПоИдентификатору(ИДВыделеннойСтроки);
		
		Если (торо_РаботаСИерархией20КлиентСервер.ЭтоКореньИерархииПоКартинке(ДанныеВыделеннойСтроки.Картинка) И НЕ РазрешитьВыборКорня)
			ИЛИ (торо_РаботаСИерархией20КлиентСервер.ЭтоНеОбъектРемонтаПоКартинке(ДанныеВыделеннойСтроки.Картинка) И НЕ РазрешитьВыборНеОР)
			ИЛИ (торо_РаботаСИерархией20КлиентСервер.ЭтоФункциональноеМестоПоКартинке(ДанныеВыделеннойСтроки.Картинка) И НЕ РазрешитьВыборФункциональныхМест) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТолькоСсылки Тогда
			МассивДанныхСтрок.Добавить(ДанныеВыделеннойСтроки.Ссылка);
		Иначе
			СтруктураДанных = Новый Структура("Ссылка, ИндексКартинки, ПометкаУдаления, ЕстьПодчиненные");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеВыделеннойСтроки);
			СтруктураДанных.ИндексКартинки = ДанныеВыделеннойСтроки.Картинка;
			СтруктураДанных.ЕстьПодчиненные = ЗначениеЗаполнено(ДанныеВыделеннойСтроки.ПолучитьЭлементы());
			МассивДанныхСтрок.Добавить(СтруктураДанных);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивДанныхВыделенныхСтрокИзДинамическогоСписка(МассивДанныхСтрок, Форма, ИмяЭлемента, ТолькоСсылки = Ложь, РазрешитьВыборФункциональныхМест = Истина) Экспорт
	
	СписокЭлемент = Форма.Элементы[ИмяЭлемента];
	
	ВыделенныеСтроки = СписокЭлемент.ВыделенныеСтроки;
	Для каждого ИДВыделеннойСтроки из ВыделенныеСтроки Цикл
		ДанныеВыделеннойСтроки = СписокЭлемент.ДанныеСтроки(ИДВыделеннойСтроки);
		
		Если торо_РаботаСИерархией20КлиентСервер.ЭтоФункциональноеМестоПоКартинке(ДанныеВыделеннойСтроки.ИндексКартинки) И НЕ РазрешитьВыборФункциональныхМест Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТолькоСсылки Тогда
			МассивДанныхСтрок.Добавить(ИДВыделеннойСтроки);
		Иначе
			СтруктураДанных = Новый Структура("Ссылка, ИндексКартинки, ПометкаУдаления");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеВыделеннойСтроки);
			ЕстьПодчиненные = Ложь;
			НайтиПодчиненныхДляСписка(Форма.Дерево, ДанныеВыделеннойСтроки.Ссылка, ЕстьПодчиненные);
			СтруктураДанных.Вставить("ЕстьПОдчиненные", ЕстьПОдчиненные);
			МассивДанныхСтрок.Добавить(СтруктураДанных);		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
Функция ПроверитьПравоНаКлиенте(Право)
	
	Возврат торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво(Право,"Справочники","торо_ОбъектыРемонта");	
	
КонецФункции

Функция ПолучитьМассивСсылокИзПарамтеровПеретаскивания(ПараметрыПеретаскивания, ДеревоРеквизит) Экспорт
	
	МассивВыбранныхОбъектов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Для каждого ПереносимыйЭлемент из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ПереносимыйЭлемент) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				МассивВыбранныхОбъектов.Добавить(ПереносимыйЭлемент);
			ИначеЕсли ТипЗнч(ПереносимыйЭлемент) = Тип("Число") Тогда
				СтрокаДерева = ДеревоРеквизит.НайтиПоИдентификатору(ПереносимыйЭлемент);
				Если СтрокаДерева <> Неопределено Тогда
					МассивВыбранныхОбъектов.Добавить(СтрокаДерева.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ПереносимыйЭлемент = ПараметрыПеретаскивания.Значение;
		Если ТипЗнч(ПереносимыйЭлемент) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			МассивВыбранныхОбъектов.Добавить(ПереносимыйЭлемент);
		ИначеЕсли ТипЗнч(ПереносимыйЭлемент) = Тип("Число") Тогда
			СтрокаДерева = ДеревоРеквизит.НайтиПоИдентификатору(ПереносимыйЭлемент);
			Если СтрокаДерева <> Неопределено Тогда
				МассивВыбранныхОбъектов.Добавить(СтрокаДерева.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Возврат МассивВыбранныхОбъектов;
	
КонецФункции

Процедура НайтиПодчиненныхДляСписка(Дерево, Ссылка, ЕстьПодчиненные)
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.Ссылка = Ссылка Тогда
			Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
				ЕстьПодчиненные = Истина;
			КонецЕсли;
		КонецЕсли;
		НайтиПодчиненныхДляСписка(Элемент, Ссылка, ЕстьПодчиненные)
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
