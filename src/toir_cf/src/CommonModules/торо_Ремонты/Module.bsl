////////////////////////////////////////////////////////////////////////////////
// торо_Ремонты: общие процедуры и функции для работы с ремонтами
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура выполняет построение диагрммы Ганта для графика ППР
//
// Параметры:
//  Диаграмма - Диаграмма - диаграмма Ганта.
//  ТаблицаДанныхППР - ТаблицаЗначений - таблица значений исходных данных.
//  СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//  ОтображатьИерархию - Булево - отображать иерархию.
//  ЭтоКорректировка - Булево - Это корректировка.
//  Редактировать - Булево - редактировать.
//  ИспользоватьРасшифровку - Булево - использовать расшифровку.
//  СортироватьПоНаименованию - Булево - выполнить сортировку по наименованию.
//
Процедура ПостроитьДиаграммуГантаДляППР(Диаграмма, ТаблицаДанныхППР, СтруктураИерархии = Неопределено, ОтображатьИерархию = Ложь, ЭтоКорректировка = Ложь, Редактировать = Истина, ИспользоватьРасшифровку = Истина, СортироватьПоНаименованию = Истина) Экспорт 
	
	ТекДата = ТекущаяДата();
	
	ОтображатьПоложение = ОтображатьИерархию И ЗначениеЗаполнено(СтруктураИерархии);
	ЕстьЦепочки = ТаблицаДанныхППР.Колонки.Найти("Цепочка") <> Неопределено;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьВЗ", Новый ОписаниеТипов("Булево"));
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьВЗ");
	КонецЕсли;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьДвиженияПоВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьДвиженияПоВЗ", Новый ОписаниеТипов("Булево"));
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьДвиженияПоВЗ");
	КонецЕсли;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ID") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
		ТаблицаДанныхППР.ЗаполнитьЗначения("","ID");
	КонецЕсли;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ДокументППР") = Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_ПланГрафикРемонта"));
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР"));
		ТаблицаДанныхППР.Колонки.Добавить("ДокументППР", Новый ОписаниеТипов(МассивТипов));
	КонецЕсли;
	
	Диаграмма.Очистить();
	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	
	СерияРемонт = Диаграмма.Серии.Добавить();
	СерияРемонт.Текст = "График ремонта";
	
	СтруктураЦветов = Новый Структура("ЦветИсходного, ЦветВыполненого, ЦветИзмененного, ЦветОтмененного, ЦветЗамещенного, ЦветЗапланированного, ЦветЗамещенногоИсходного");
	СтруктураЦветов.ЦветВыполненого 			= WebЦвета.Черный;
	СтруктураЦветов.ЦветИзмененного 			= WebЦвета.Томатный;
	СтруктураЦветов.ЦветОтмененного 			= WebЦвета.Красный;
	СтруктураЦветов.ЦветЗапланированного 		= WebЦвета.Васильковый;
	СтруктураЦветов.ЦветЗамещенногоИсходного 	= WebЦвета.СеребристоСерый;
	СтруктураЦветов.ЦветИсходного 				= WebЦвета.ГолубойСоСтальнымОттенком;
	СтруктураЦветов.ЦветЗамещенного 			= WebЦвета.СветлоСерый;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
	|	ТаблицаДанныхППР.ВидРемонтныхРабот,
	|	ТаблицаДанныхППР.ДокументППР,
	|	ТаблицаДанныхППР.ID,
	|	ТаблицаДанныхППР.ДатаНач,
	|	ТаблицаДанныхППР.ДатаКон,
	|	ТаблицаДанныхППР.ДатаНачСт,
	|	ТаблицаДанныхППР.ДатаКонСт,
	|	ТаблицаДанныхППР.ЕстьВЗ,
	|  ТаблицаДанныхППР.Отменен,
	|  ТаблицаДанныхППР.Замещен,
	|  ТаблицаДанныхППР.ЗамещенСт,
	|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
	|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
	Если НЕ СортироватьПоНаименованию Тогда
		Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
	КонецЕсли;
	Если ЕстьЦепочки Тогда
		Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ТаблицаДанныхППР
	|ИЗ
	|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
	Запрос.Выполнить();
	
	Если ОтображатьПоложение Тогда
		
		СтруктураПараметровИерархии = торо_РаботаСИерархией20.ПолучитьПараметрыИерархии(СтруктураИерархии);
		торо_РаботаСИерархией20.СоздатьВременнуюТаблицуИерархии(Запрос.МенеджерВременныхТаблиц, СтруктураПараметровИерархии, "ОбъектИерархии"); 
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК ОбъектИерархии,
		|	НЕОПРЕДЕЛЕНО КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Иерархия";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВТ_Иерархия.РодительИерархии, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК Положение,
	|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ТаблицаДанныхППР.ДокументППР,
	|	ТаблицаДанныхППР.ID,
	|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
	|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
	|	ТаблицаДанныхППР.ДатаНачСт,
	|	ТаблицаДанныхППР.ДатаКонСт,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот) КАК ОбъектРемонтныхРаботПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот) КАК ВидРемонтныхРаботПредставление,
	|	ТаблицаДанныхППР.ЕстьВЗ,
	|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
	|  ТаблицаДанныхППР.Отменен,
	|  ТаблицаДанныхППР.Замещен,
	|  ТаблицаДанныхППР.ЗамещенСт,
	|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
	Если НЕ СортироватьПоНаименованию Тогда
		Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
	КонецЕсли;
	Если ЕстьЦепочки Тогда
		Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Иерархия КАК ВТ_Иерархия
	|		ПО ТаблицаДанныхППР.ОбъектРемонтныхРабот = ВТ_Иерархия.ОбъектИерархии
	|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
	Если СортироватьПоНаименованию Тогда
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ОбъектРемонтныхРабот.Наименование,
			|	НомерСтрокиВРЦепочки,
			|	ВидРемонтныхРабот.Наименование,
			|	ДатаНач,
			|	ДатаКон ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ОбъектРемонтныхРабот.Наименование,
			|	ВидРемонтныхРабот.Наименование,
			|	ДатаНач,
			|	ДатаКон ";
		КонецЕсли;
	Иначе
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерОР,
			|	ВидРемонтныхРабот.Наименование,
			|	НомерСтрокиВРЦепочки";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерОР,
			|	ВидРемонтныхРабот.Наименование";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИТОГИ ПО
	|	Положение,
	|	ОбъектРемонтныхРабот";
	
	Если ЕстьЦепочки Тогда
		Запрос.Текст = Запрос.Текст + ", НомерСтрокиВРЦепочки";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ", ВидРемонтныхРабот";
	
	Результат = Запрос.Выполнить();
	ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоПоложению.Следующий() Цикл
		
		ТочкаПоложение = Диаграмма;
		
		Если ОтображатьПоложение Тогда
			ТочкаПоложение = Диаграмма.Точки.Добавить();
			ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.Положение);
			Если ИспользоватьРасшифровку Тогда
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.Положение;
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоОР.Следующий() Цикл
			
			ТочкаОРР = ТочкаПоложение.Точки.Добавить();
			ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
			Если ИспользоватьРасшифровку Тогда
				ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
			КонецЕсли;
			
			ВыборкаПоВРИлиЦепочкам = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоВРИлиЦепочкам.Следующий() Цикл  					
				Если ЕстьЦепочки Тогда
					ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПоВР.Следующий() Цикл
						ДобавитьИнтервалыНаДиаграммуППР(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать, ОтображатьПоложение);							
					КонецЦикла;
				Иначе
					ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам; 						
					ДобавитьИнтервалыНаДиаграммуППР(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать, ОтображатьПоложение);							
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПостроитьДиаграммуГантаДляППР()

// Функция считает продолжительность в часах по продолжительности в секундах
//
// Параметры:
//  ПродолжительностьВСекундах - Число - продолжительность в секундах.
//
// Возвращаемое значение:
//  Строка - представление продолжительности в часах.
Функция ПродолжительностьВЧасах(ПродолжительностьВСекундах) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПродолжительностьВСекундах) Тогда
		Возврат "";
	КонецЕсли;
	
	Часы    = Цел(ПродолжительностьВСекундах / 3600);
	Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
	Секунды = Окр(ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60, 2);
	
	Возврат "" + Часы + " ч. " + Минуты + " мин. " + Секунды + " с.";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДокументЯвляетсяНачаломЦепочки(Документ, УчитыватьКорректировки = Ложь) Экспорт
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.торо_ВыявленныеДефекты")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если УчитыватьКорректировки  Тогда
		Если (ТипЗнч(Документ) = Тип("ДокументОбъект.торо_ПланГрафикРемонта")
			Или ТипЗнч(Документ) = Тип("ДокументОбъект.торо_ГрафикРегламентныхМероприятийТОиР"))
			И Документ.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот Тогда
			Возврат Истина;
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Ссылка, "ВидОперации") = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.торо_ПланГрафикРемонта")
			Или ТипЗнч(Документ) = Тип("ДокументОбъект.торо_ГрафикРегламентныхМероприятийТОиР")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Функция обрабатывает выбор ремонта
Функция ОбработкаВыбораРемонта(ДеревоРемРабот, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтовОборудования, ТЧ_РемонтныхРабот, ТЧ_ДокументыОснования, ТекущиеЗначения, ВыходныеПараметры=Неопределено, КоличествоОпераций = Неопределено) Экспорт
	
	ВыходныеПараметры = Новый Структура;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		Возврат ОбработкаПодбораТехОперации(ДеревоРемРабот, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтныхРабот, ТекущиеЗначения, КоличествоОпераций);
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		Возврат ОбработкаПодбораТехКарты(ДеревоРемРабот, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтныхРабот, ТекущиеЗначения);
				
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("СтрокаРемонтовОборудования") Тогда
			
			СтрокаРемонтовОборудования = ВыбранноеЗначение.СтрокаРемонтовОборудования;
			
			Если ЗначениеЗаполнено(СтрокаРемонтовОборудования.ОбъектРемонта)
				И ЗначениеЗаполнено(СтрокаРемонтовОборудования.ID) Тогда
				
				ДокОснование = ВыбранноеЗначение.ДокументОснование;
				
				Если ТЧ_ДокументыОснования.НайтиСтроки(Новый Структура ("ДокументОснование", ДокОснование)).Количество() = 0 Тогда
					СтрокаДо = ТЧ_ДокументыОснования.Добавить();
					СтрокаДо.ДокументОснование = ДокОснование;
				КонецЕсли;
								
				// Ремонты оборудования
				ДобавленОР = Ложь;
				СтрокиРО = ТЧ_РемонтовОборудования.НайтиСтроки(Новый Структура("ID", СтрокаРемонтовОборудования.ID));
				Если СтрокиРО.Количество() = 0 Тогда
					СтрокаРО = ДобавитьСтрокуРемонтаОборудования(ТЧ_РемонтовОборудования, СтрокаРемонтовОборудования, ДокументОбъект, ДокОснование);
					ДобавленОР = Истина;
				Иначе
					СтрокаРО = СтрокиРО[0];
					
					// Очистим строки с результатами подбора из МОР.
					Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
						МассивСтрокКУдалению = ДокументОбъект.РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID));
						Для каждого Строка Из МассивСтрокКУдалению Цикл
							ДокументОбъект.РезультатыПодбораИзМатрицыОценкиРисков.Удалить(Строка);
						КонецЦикла; 
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") 
					И ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
					
					// Заполнить результаты подбора из МОР. 
					ТаблицаДокументовОснований = Новый ТаблицаЗначений;
					
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(Тип("Строка"));
					КвалификаторыСтроки = Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная);
					
					ТаблицаДокументовОснований.Колонки.Добавить("Ключ",Новый ОписаниеТипов(МассивТипов,,КвалификаторыСтроки));
					
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));		
					ТаблицаДокументовОснований.Колонки.Добавить("Значение",Новый ОписаниеТипов(МассивТипов));
					
					НС = ТаблицаДокументовОснований.Добавить();
					НС.Ключ     = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
					НС.Значение = ВыбранноеЗначение.ДокументОснование;
					
					торо_ЗаполнениеДокументов.ЗаполнитьРезультатыПодбораИзМатрицыОценкиРисков(ДокументОбъект, ТаблицаДокументовОснований); 
					
				КонецЕсли; 
				
				ДозаполнитьШапкуИзПоДокументуОснованию(ДокументОбъект, ДокОснование);
				
				ЗаполнятьЗатраты = Истина;
				
				ОбработкаВыбораРемонта_ДобавитьСтрокиРемонтныхРабот(ВыбранноеЗначение, СтрокаРО, ТЧ_РемонтныхРабот, ДокументОбъект, СтрокаРемонтовОборудования, ЗаполнятьЗатраты);
				ОбработкаВыбораРемонта_ЗаполнитьЗатратыПоОснованию(ДокументОбъект, ДокОснование, СтрокаРО);
								
			КонецЕсли;
		КонецЕсли;
		
		ВыходныеПараметры.Вставить("ДобавленОР",ДобавленОР);
		
		СтрСтрокаРО = Новый Структура("ID, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ДокументИсточник, ОбъектРемонта",
		СтрокаРО.ID, СтрокаРО.ВидРемонтныхРабот, СтрокаРО.ДатаНачала, СтрокаРО.ДатаОкончания, СтрокаРО.ДокументИсточник, СтрокаРО.ОбъектРемонта);
		Если ТипЗнч(ДокументОбъект.Ссылка) = тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			СтрСтрокаРО.Вставить("ОписаниеРемонта", СтрокаРО.ОписаниеРемонта);
		КонецЕсли;
		Если НЕ ТипЗнч(ДокументОбъект.Ссылка) = тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			СтрСтрокаРО.Вставить("ЗакрываетПредписание", СтрокаРО.ЗакрываетПредписание);
			СтрСтрокаРО.Вставить("ИДДефекта", СтрокаРО.ИДДефекта);
		КонецЕсли;
		ВыходныеПараметры.Вставить("СтрокаРО",СтрСтрокаРО); 
		
	КонецЕсли;
	
	Возврат Новый Структура("Дерево, ДокументОбъект", ДеревоРемРабот, ДокументОбъект);
	
КонецФункции

// Обрабатывает выбор значений в ТЧ "Закрываемые предписания".
//
// Параметры:
//  Форма				- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ВыбранноеЗначение	- Структура - значение, пришедее в обработчик события "Обработка выбора".
Процедура ЗакрываемыеПредписанияОбработкаВыбора(Форма, ВыбранноеЗначение) Экспорт 
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТекущиеДанныеРО = Объект.РемонтыОборудования.НайтиПоИдентификатору(Элементы.РемонтыОборудования.ТекущаяСтрока);
	
	СтрокаПредписания = Объект.ЗакрываемыеПредписания.Добавить();
	СтрокаПредписания.ID = ВыбранноеЗначение.РемонтОборудования.ID;
	СтрокаПредписания.ОбъектРемонта = ВыбранноеЗначение.РемонтОборудования.ОбъектРемонта;
	СтрокаПредписания.ПлановаяДатаРемонта = ВыбранноеЗначение.РемонтОборудования.ПлановаяДата;
	СтрокаПредписания.Описание = ВыбранноеЗначение.РемонтОборудования.ОписаниеРемонта;
	СтрокаПредписания.РемонтыОборудования_ID = ТекущиеДанныеРО.ID;
	СтрокаПредписания.ДокументВнешнегоОснования = ВыбранноеЗначение.ДокументОснование;
	
	// Добавим ремонтные работы из внешнего основания, а также заполним связанные с ними табличные части.
	ДеревоРРОбъект = Форма.РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	// Определим строку родителя для ремонтных работ.
	Если Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанныеРР = Форма.ДеревоРемонтныхРабот.НайтиПоИдентификатору(Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока);
		
		ДеревоРРОтбор = ДеревоРРОбъект.Строки.НайтиСтроки(Новый Структура("ID", ТекущиеДанныеРР.ID), Истина);	
		Если ДеревоРРОтбор.Количество() > 0 Тогда
			ТекущийРодительДереваРР = ДеревоРРОтбор[0];
		КонецЕсли;
		
		Пока ТипЗнч(ТекущийРодительДереваРР.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Цикл 
			ТекущийРодительДереваРР = ТекущийРодительДереваРР.Родитель;
		КонецЦикла;	
	КонецЕсли;
	
	ТекущийРодительДереваРР = ?(ТекущийРодительДереваРР = Неопределено, ДеревоРРОбъект.Строки[0], ТекущийРодительДереваРР);
	
	Для Каждого ВыбраннаяСтрока из ВыбранноеЗначение.РемонтныеРаботы Цикл   
		
		РодительСтрокиДереваРР = ТекущийРодительДереваРР;
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.Родитель_ID) Тогда // Значит родитель уже был добавлен в документ.
			ДеревоРРОтбор = ДеревоРРОбъект.Строки.НайтиСтроки(Новый Структура("ID", ВыбраннаяСтрока.Родитель_ID), Истина);
			Если ДеревоРРОтбор.Количество() > 0 Тогда
				РодительСтрокиДереваРР = ДеревоРРОтбор[0];
			КонецЕсли;
		КонецЕсли;	
		
		Если ТипЗнч(ВыбраннаяСтрока.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			
			ВходныеДанные = Новый Структура();
			ВходныеДанные.Вставить("СтрокаРодитель_ID", РодительСтрокиДереваРР.ID);
			ВходныеДанные.Вставить("СтрокаРодительРодитель_ID", РодительСтрокиДереваРР.Родитель_ID);
			ВходныеДанные.Вставить("СтрокаРодительРемонтыОборудования_ID", РодительСтрокиДереваРР.РемонтыОборудования_ID);
			ВходныеДанные.Вставить("ДатаНачалаРемонта", ТекущиеДанныеРО.ДатаНачала);
			ВходныеДанные.Вставить("ТекущийРемонт_ID", ТекущиеДанныеРО.ID);
			ВходныеДанные.Вставить("РемонтнаяРабота_ID", ВыбраннаяСтрока.ID);
			ВходныеДанные.Вставить("Предписание", ВыбранноеЗначение.ДокументОснование);
			ВходныеДанные.Вставить("ID_ПараллельнойОперации", ВыбраннаяСтрока.ID_ПараллельнойОперации);
			
			торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРРОбъект, ВыбраннаяСтрока.РемонтнаяРабота, ДокументОбъект, 
			ДокументОбъект.РемонтыОборудования, ДокументОбъект.РемонтныеРаботы, ДокументОбъект.ДокументыОснования, 
			ВходныеДанные,, ВыбраннаяСтрока.Количество);    
			
		Иначе // Добавим вручную (т.к. нет необходимости получать нормативы для ТК).
			
			НоваяСтрокаРР = ДокументОбъект.РемонтныеРаботы.Добавить();
			НоваяСтрокаРР.ID = ВыбраннаяСтрока.ID;
			НоваяСтрокаРР.Родитель_ID = РодительСтрокиДереваРР.ID;
			НоваяСтрокаРР.РемонтнаяРабота = ВыбраннаяСтрока.РемонтнаяРабота;
			НоваяСтрокаРР.РемонтыОборудования_ID = ТекущиеДанныеРО.ID;
			НоваяСтрокаРР.Количество = ВыбраннаяСтрока.Количество;
			НоваяСтрокаРР.Предписание = ВыбранноеЗначение.ДокументОснование;
			НоваяСтрокаРР.ID_ПараллельнойОперации = ВыбраннаяСтрока.ID_ПараллельнойОперации;
			торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НоваяСтрокаРР);
			
			НоваяСтрокаДереваРР = РодительСтрокиДереваРР.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваРР, НоваяСтрокаРР);
			НоваяСтрокаДереваРР.ЭтоТехКарта = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоРРОбъект, "ДеревоРемонтныхРабот");
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	// Текущей строкой сделаем строку, куда добавляли ремонтные работ.
	РодительСтроки = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(Форма.ДеревоРемонтныхРабот.ПолучитьЭлементы(), "ID", ТекущийРодительДереваРР.ID);	
	Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = РодительСтроки.ПолучитьИдентификатор();
	
	НоваяСтрока = Объект.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = ВыбранноеЗначение.ДокументОснование;  
	Элементы.ДокументыОснования.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры	

Процедура ЗаполнитьВремяРаботыПоНормативам(Форма, ИмяТЧ = "ТрудовыеЗатраты") Экспорт
	
	СтруктураТаблиц = Новый Структура("ТрудовыеЗатраты");
	МассивДанныхЗаполнения = ПолучитьДанныеДляЗаполненияЗатратПоНормам(Форма, СтруктураТаблиц, Неопределено, Неопределено);
	
	СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID");
	СтруктураПоискаКвалификаций = Новый Структура("ID, РемонтыОборудования_ID, Квалификация");
	
	Для каждого СтруктураДанныхЗаполнения из МассивДанныхЗаполнения Цикл
		Если СтруктураДанныхЗаполнения.СтруктураТаблиц.ТрудовыеЗатраты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураДанныхЗаполнения);
		МассивСтрок = Форма.Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		Для каждого Строка из МассивСтрок Цикл
			Строка.ВремяРаботы = 0;
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаКвалификаций, СтруктураДанныхЗаполнения);
		
		Для каждого СтрокаНормы из СтруктураДанныхЗаполнения.СтруктураТаблиц.ТрудовыеЗатраты Цикл
			КоличествоСтрок = Макс(1, СтрокаНормы.Количество);
			
			СтруктураПоискаКвалификаций.Квалификация = СтрокаНормы.Квалификация;
			МассивСтрокКвалификаций = Форма.Объект[ИмяТЧ].НайтиСтроки(СтруктураПоискаКвалификаций);
			
			Для Индекс = 0 по КоличествоСтрок-1 Цикл
				Если Индекс > МассивСтрокКвалификаций.Количество() - 1 Тогда
					Прервать;
				КонецЕсли;
				МассивСтрокКвалификаций[Индекс].ВремяРаботы = СтрокаНормы.ВремяРаботы;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область КомандыЗаполненияПоНормамИПоОснованию

// Заполняет табличную часть Исполнители(ТрудовыеЗатраты) по данным из тех.операций и тех.карт.
Процедура ЗаполнитьИсполнителейПоНормам(Форма, ИДТекущейОперации = Неопределено, ИДТекущегоРемонта = Неопределено, ИмяТЧ = "ТрудовыеЗатраты") Экспорт
	
	СтруктураТаблиц = Новый Структура("ТрудовыеЗатраты");
	ЭтоЗаявка = ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт");
	
	МассивДанныхЗаполнения = ПолучитьДанныеДляЗаполненияЗатратПоНормам(Форма, СтруктураТаблиц, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Для каждого СтруктураДанныхЗаполнения из МассивДанныхЗаполнения Цикл 
		Если СтруктураДанныхЗаполнения.СтруктураТаблиц.ТрудовыеЗатраты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДляСвертки = СтруктураДанныхЗаполнения.СтруктураТаблиц.ТрудовыеЗатраты.Скопировать();
		ТаблицаДляСвертки.Свернуть("ID");
		СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаИД из ТаблицаДляСвертки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИД);
			СтруктураПоиска.РемонтыОборудования_ID = СтруктураДанныхЗаполнения.РемонтыОборудования_ID;
			МассивСтрок = Форма.Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаКУдалению из МассивСтрок Цикл
				Форма.Объект[ИмяТЧ].Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтрокаНормы из СтруктураДанныхЗаполнения.СтруктураТаблиц.ТрудовыеЗатраты Цикл
			КоличествоСтрок = Макс(1, ?(ЭтоЗаявка, 1, СтрокаНормы.Количество));
			Для Инд = 1 по КоличествоСтрок Цикл
				НовСтр = Форма.Объект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаНормы);
				НовСтр.ID = СтруктураДанныхЗаполнения.ID;
				НовСтр.РемонтыОборудования_ID = СтруктураДанныхЗаполнения.РемонтыОборудования_ID;
				Если НЕ ЭтоЗаявка Тогда
					НовСтр.ДатаНачала = СтруктураДанныхЗаполнения.ДатаНачала;
					НовСтр.ДатаОкончания = СтруктураДанныхЗаполнения.ДатаОкончания;
					Если ИмяТЧ = "ТрудовыеЗатраты" Тогда
						НовСтр.КТУ = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть МатериальныеЗатраты по данным из тех.операций и тех.карт.
Процедура ЗаполнитьМатериалыПоНормам(Форма, ИДТекущейОперации = Неопределено, ИДТекущегоРемонта = Неопределено, ИмяТЧ = "МатериальныеЗатраты", ЗаполнятьИспользованиеХарактеристик = Истина) Экспорт
	
	СтруктураТаблиц = Новый Структура("МатериальныеЗатраты");
	
	МассивДанныхЗаполнения = ПолучитьДанныеДляЗаполненияЗатратПоНормам(Форма, СтруктураТаблиц, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Для каждого СтруктураДанныхЗаполнения из МассивДанныхЗаполнения Цикл 
		Если СтруктураДанныхЗаполнения.СтруктураТаблиц.МатериальныеЗатраты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДляСвертки = СтруктураДанныхЗаполнения.СтруктураТаблиц.МатериальныеЗатраты.Скопировать();
		ТаблицаДляСвертки.Свернуть("ID");
		СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаИД из ТаблицаДляСвертки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИД);
			СтруктураПоиска.РемонтыОборудования_ID = СтруктураДанныхЗаполнения.РемонтыОборудования_ID;
			МассивСтрок = Форма.Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаКУдалению из МассивСтрок Цикл
				Форма.Объект[ИмяТЧ].Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтрокаНормы из СтруктураДанныхЗаполнения.СтруктураТаблиц.МатериальныеЗатраты Цикл
			НовСтр = Форма.Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаНормы);
			НовСтр.ID = СтруктураДанныхЗаполнения.ID;
			НовСтр.РемонтыОборудования_ID = СтруктураДанныхЗаполнения.РемонтыОборудования_ID;
			
			НовСтр.ЕдиницаИзмерения = СтрокаНормы.Упаковка;
			Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
			Если Коэффициент = 0 Тогда
				Коэффициент = 1;
			КонецЕсли;
			НовСтр.Количество = СтрокаНормы.КоличествоУпаковок;
			НовСтр.КоличествоЕдиниц = СтрокаНормы.КоличествоУпаковок * Коэффициент;
			НовСтр.ХарактеристикаНоменклатуры = СтрокаНормы.Характеристика;
			Если ЗаполнятьИспользованиеХарактеристик И ЗначениеЗаполнено(НовСтр.Номенклатура) Тогда
				НовСтр.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(НовСтр.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть СерийныеЗапчасти по данным из тех.операций и тех.карт.
Процедура ЗаполнитьЗапчастиПоНормам(Форма, ИДТекущегоРемонта = Неопределено) Экспорт
	
	ИмяТаблицыРемонтов = "РемонтыОборудования";
	Объект = Форма.Объект;

	ТаблицаРемонтов = Новый ТаблицаЗначений;
	ТаблицаРемонтов.Колонки.Добавить("РемонтыОборудования_ID", Новый ОписаниеТипов("Строка"));
	ТаблицаРемонтов.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаРемонтов.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	
	Если ИДТекущегоРемонта <> Неопределено Тогда
		ТекущийРемонт = Форма.Объект[ИмяТаблицыРемонтов].НайтиПоИдентификатору(ИДТекущегоРемонта);
		Если ТекущийРемонт = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого	СтрокаРемонта из Объект[ИмяТаблицыРемонтов] Цикл
		Если ИДТекущегоРемонта = Неопределено 
			ИЛИ ТекущийРемонт.ID = СтрокаРемонта.ID Тогда
			НовСтр = ТаблицаРемонтов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаРемонта);
			НовСтр.РемонтыОборудования_ID = СтрокаРемонта.ID;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапчастей = ПолучитьДанныеДляЗаполненияЗапчастейПоНормам(ТаблицаРемонтов);
	
	УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.СерийныеЗапчасти, ТаблицаЗапчастей, "РемонтыОборудования_ID");
	
	Для каждого Строка из ТаблицаЗапчастей Цикл
		НовСтр = Объект.СерийныеЗапчасти.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка);
		НовСтр.СерииИспользуются = Строка.Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
		НовСтр.СерииИспользуютсяДляНовой = Строка.НоменклатураНовая.ВидНоменклатуры.ИспользоватьСерии;
		НовСтр.ХарактеристикиИспользуются = Строка.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики;
		НовСтр.ХарактеристикиИспользуютсяДляНовой = Строка.НоменклатураНовая.ВидНоменклатуры.ИспользоватьХарактеристики;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицы Исполнители, Подрядчики, ТрудовыеЗатраты из данных документов-оснований.
Процедура ЗаполнитьИсполнителейПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта) Экспорт
	
	Объект = Форма.Объект;
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта, "Исполнители");
	
	ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
	ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
	Если ИДТекущейОперации = Неопределено Тогда
		// При заполнении "Для текущей операции" не меняем данные, привязанные к ремонту.
		ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу МатериальныеЗатраты из данных документов-оснований.
Процедура ЗаполнитьМатериалыПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта) Экспорт
	
	Объект = Форма.Объект;
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта, "Материалы");
	ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
		
КонецПроцедуры

// Заполняет таблицу МатериальныеЗатраты из данных документов-оснований.
Процедура ЗаполнитьЗапчастиПоОснованию(Форма, ИДТекущегоРемонта) Экспорт
	
	Объект = Форма.Объект;
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованию(Форма, Неопределено, ИДТекущегоРемонта, "Запчасти");
	ЗаполнитьЗапчастиПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСвязаннымиДокументами

// Функция проверяет документ на наличие связанных документов по ID
// 
Функция ПроверитьДокументНаСвязанныеДокументыПоID(СсылкаНаТекущийДокумент, МассивID) Экспорт
	
	// Проверяем, что переданная ссылка не пустая. В противном случае следующий запрос вернёт ссылки на документы, 
	// у которых документ-основание не заполнен, что неверно.
	Если ЗначениеЗаполнено(СсылкаНаТекущийДокумент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	торо_РемонтДокументыОснования.Ссылка,
		|	торо_РемонтДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ДокументыОснования КАК торо_РемонтДокументыОснования
		|ГДЕ
		|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
		|	И торо_РемонтДокументыОснования.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтДокументыОснования.Ссылка,
		|	торо_РемонтДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_РемонтДокументыОснования
		|ГДЕ
		|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
		|	И торо_РемонтДокументыОснования.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтДокументыОснования.Ссылка,
		|	торо_РемонтДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ДокументыОснования КАК торо_РемонтДокументыОснования
		|ГДЕ
		|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
		|	И торо_РемонтДокументыОснования.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтДокументыОснования.Ссылка,
		|	торо_РемонтДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.торо_ПланГрафикРемонта КАК торо_РемонтДокументыОснования
		|ГДЕ
		|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
		|	И торо_РемонтДокументыОснования.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтДокументыОснования.Ссылка,
		|	торо_РемонтДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.торо_АктОВыполненииРегламентногоМероприятия.ДокументыОснования КАК торо_РемонтДокументыОснования
		|ГДЕ
		|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
		|	И торо_РемонтДокументыОснования.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтДокументыОснования.Ссылка,
		|	торо_РемонтДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.ДокументыОснования КАК торо_РемонтДокументыОснования
		|ГДЕ
		|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
		|	И торо_РемонтДокументыОснования.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтДокументыОснования.Ссылка,
		|	торо_РемонтДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_РемонтДокументыОснования
		|ГДЕ
		|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
		|	И торо_РемонтДокументыОснования.Ссылка.Проведен";		
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ТаблицаЗначенийДокументов = Результат.Выгрузить();
		МассивБлокирующихДокументов = ТаблицаЗначенийДокументов.ВыгрузитьКолонку("Ссылка");
		
	Иначе
		
		МассивБлокирующихДокументов = Новый Массив();
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СкользящийПланРабот.ID_Ремонта КАК ID_Ремонта
	|ПОМЕСТИТЬ ВТ_РемонтыИзПланов
	|ИЗ
	|	РегистрСведений.торо_СкользящийПланРабот КАК торо_СкользящийПланРабот
	|ГДЕ
	|	торо_СкользящийПланРабот.ID_Ремонта В(&ID)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВсеДокументыПоРемонтам.IDРемонта КАК IDРемонта
	|ИЗ
	|	РегистрСведений.торо_ВсеДокументыПоРемонтам КАК торо_ВсеДокументыПоРемонтам
	|ГДЕ
	|	торо_ВсеДокументыПоРемонтам.IDРемонта В(&ID)
	|	И (торо_ВсеДокументыПоРемонтам.ДокументПоРемонту В (&МассивРегистраторов)
	|			ИЛИ торо_ВсеДокументыПоРемонтам.IDРемонта В
	|				(ВЫБРАТЬ
	|					ВТ_РемонтыИзПланов.ID_Ремонта
	|				ИЗ
	|					ВТ_РемонтыИзПланов))";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивБлокирующихДокументов);
	
	Если ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.торо_СкользящийПланРабот КАК торо_СкользящийПланРабот", "РегистрСведений.торо_СкользящийПланРегламентныхМероприятий КАК торо_СкользящийПланРабот");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		МассивIDДляБлокировки = Новый СписокЗначений();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивIDДляБлокировки.Добавить(ВыборкаДетальныеЗаписи.IDРемонта);
		КонецЦикла;
	Иначе
		МассивIDДляБлокировки = Неопределено;
	КонецЕсли;
	
	Возврат МассивIDДляБлокировки;
КонецФункции

// Функция возвращает массив ID ремонтов которые не должны изменяться.
// 
Функция МассивIDДляБлокировкиРемонтовОборудования(СсылкаНаТекущийДокумент, МассивID) Экспорт
	
	// Проверяем, что переданная ссылка не пустая. В противном случае следующий запрос вернёт ссылки на документы, 
	// у которых документ-основание не заполнен, что неверно.
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаТекущийДокумент) И МассивID.Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	ПервыйЗапрос = Истина;
	
	Если Не ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	РемонтыОборудования.ID
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_РемонтДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
		|		ПО (торо_РемонтДокументыОснования.ДокументОснование = &Ссылка)
		|			И (торо_РемонтДокументыОснования.Ссылка.Проведен)
		|			И торо_РемонтДокументыОснования.Ссылка = РемонтыОборудования.Ссылка
		|			И (РемонтыОборудования.ID В (&МассивID))";
		ПервыйЗапрос = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьСметыРемонта") 
		И (ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
		Или ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")) Тогда
		
		Если ПервыйЗапрос Тогда
			ПервыйЗапрос = Ложь;
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ВЫБРАТЬ
		|	РемонтыОборудования.ID
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ДокументыОснования КАК торо_РемонтДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК РемонтыОборудования
		|		ПО (торо_РемонтДокументыОснования.ДокументОснование = &Ссылка)
		|			И (торо_РемонтДокументыОснования.Ссылка.Проведен)
		|			И торо_РемонтДокументыОснования.Ссылка = РемонтыОборудования.Ссылка
		|			И (РемонтыОборудования.ID В (&МассивID))";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаВыполнениеРабот") 
		И (ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
		Или ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")
		Или ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")) Тогда
		
		Если ПервыйЗапрос Тогда
			ПервыйЗапрос = Ложь;
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ВЫБРАТЬ
		|	РемонтыОборудования.ID
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК РемонтыОборудования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.ДокументыОснования КАК торо_РемонтДокументыОснования
		|		ПО (торо_РемонтДокументыОснования.ДокументОснование = &Ссылка)
		|			И (торо_РемонтДокументыОснования.Ссылка.Проведен)
		|			И торо_РемонтДокументыОснования.Ссылка = РемонтыОборудования.Ссылка
		|			И (РемонтыОборудования.ID В (&МассивID))";
	КонецЕсли;
	
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьАктПриемкиОборудования") Тогда
		
		Если ПервыйЗапрос Тогда
			ПервыйЗапрос = Ложь;
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ВЫБРАТЬ
		|	РемонтыОборудования.ID
		|ИЗ
		|	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК РемонтыОборудования
		|ГДЕ
		|	РемонтыОборудования.Ссылка.Проведен
		|	И РемонтыОборудования.ID В (&МассивID)";
	КонецЕсли;
	
	Если Запрос.Текст = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗначенийДокументов = Результат.Выгрузить();
	МассивIDСДублями = ТаблицаЗначенийДокументов.ВыгрузитьКолонку("ID");
	
	
	Если МассивIDСДублями.Количество()>0 Тогда
		МассивIDДляБлокировки = Новый Массив;
		
		Для Каждого ЭлементМассиваСДублями Из МассивIDСДублями Цикл
			Если МассивIDДляБлокировки.Найти(ЭлементМассиваСДублями) = Неопределено Тогда
				МассивIDДляБлокировки.Добавить(ЭлементМассиваСДублями);
			КонецЕсли;	
		КонецЦикла;
	Иначе
		МассивIDДляБлокировки = Неопределено;
	КонецЕсли;	
	
	Возврат МассивIDДляБлокировки;
	
КонецФункции

// Функция проверяет ремонты из таблицы ремонтов на наличие в документах-источниках по ID ремонта
// 
Функция ПроверитьНаличиеРемонтовВДокументахИсточникахПоIDРемонта(ТаблицаРемонтов) Экспорт
	
	Если ТаблицаРемонтов = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТаблицаРемонтов.Колонки.Найти("ОбъектРемонта") = Неопределено 
		  ИЛИ ТаблицаРемонтов.Колонки.Найти("ДокументИсточник") = Неопределено 
		  ИЛИ ТаблицаРемонтов.Колонки.Найти("ID") = Неопределено 
	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаРемонтов.ДокументИсточник КАК ДокументИсточник,
	|	ТаблицаРемонтов.ID КАК IDРемонта
	|ПОМЕСТИТЬ ВТ_ТаблицаРемонтов
	|ИЗ
	|	&ТаблицаРемонтов КАК ТаблицаРемонтов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ДокументИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ТаблицаРемонтов.ДокументИсточник КАК ДокументИсточник
	|ИЗ
	|	ВТ_ТаблицаРемонтов КАК ВТ_ТаблицаРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВсеДокументыПоРемонтам КАК торо_ВсеДокументыПоРемонтам
	|		ПО ВТ_ТаблицаРемонтов.IDРемонта = торо_ВсеДокументыПоРемонтам.IDРемонта
	|			И ВТ_ТаблицаРемонтов.ДокументИсточник = торо_ВсеДокументыПоРемонтам.ДокументПоРемонту
	|ГДЕ
	|	торо_ВсеДокументыПоРемонтам.IDРемонта ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;	
	
КонецФункции

// Функция проверяет наличие планов работ по ремонтам из списка
Функция ПроверитьРемонтыНаНаличиеПлановРемонтов(МассивID) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьСкользящееПланирование") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СкользящийПланРаботСрезПоследних.ID_Ремонта КАК ID
	               |ИЗ
	               |	РегистрСведений.торо_СкользящийПланРабот.СрезПоследних(, ID_Ремонта В (&МассивID)) КАК торо_СкользящийПланРаботСрезПоследних
	               |ГДЕ
	               |	торо_СкользящийПланРаботСрезПоследних.ДатаНачалаРемонта > торо_СкользящийПланРаботСрезПоследних.ДатаНачалаБазовогоПериода
	               |	И торо_СкользящийПланРаботСрезПоследних.ДатаНачалаРемонта < торо_СкользящийПланРаботСрезПоследних.ДатаОкончанияБазовогоПериода";

	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗначенийДокументов = Результат.Выгрузить();
	МассивIDДляБлокировки = ТаблицаЗначенийДокументов.ВыгрузитьКолонку("ID");
	
	Если МассивIDДляБлокировки.Количество() = 0 Тогда
		МассивIDДляБлокировки = Неопределено;
	КонецЕсли;	
	
	Возврат МассивIDДляБлокировки;
	
КонецФункции 

Функция ПолучитьМассивIDЛотов(МассивID) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЗапланированныеПодрядчикиРемонтов.ID КАК ID
	|ИЗ
	|	РегистрСведений.торо_ЗапланированныеПодрядчикиРемонтов КАК торо_ЗапланированныеПодрядчикиРемонтов
	|ГДЕ
	|	торо_ЗапланированныеПодрядчикиРемонтов.ID В(&МассивID)";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	МассивСвязанныхЛотов = Запрос.Выполнить().Выгрузить();
	
	Возврат МассивСвязанныхЛотов.ВыгрузитьКолонку("ID");
	
КонецФункции

#КонецОбласти 

#Область ОбновлениеНезависимыхРегистровПоРемонтам

// Процедура обновляет данные в независимых РС торо_ОбщиеДанныеПоРемонтам, торо_АктуальныеПлановыеДатыРемонтов,
// торо_СвернутыеФактическиеДатыРемонтов, торо_ПлановыеИсполнителиРемонтов
Процедура ОбновитьЗаписиНезависимыхРегистровПоРемонтам(Источник, РежимЗаписи) Экспорт
	Если ДокументОбщихДанныхПоРемонтам(Источник) Тогда
		ОбновитьОбщиеДанныеПоРемонтамОбработчикСобытий(Источник, РежимЗаписи = РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.торо_ДокументыПлановыхДатРемонтаОбъекты.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		    торо_ПланированиеРемонтов.торо_ОбновитьПлановыеДатыПриПроведенииОбработчик(Источник);
		Иначе
		    торо_ПланированиеРемонтов.торо_ОбновитьПлановыеДатыПриОтменеПроведенияОбработчик(Источник);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументФактическихДатРемонтов(Источник) Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		    ОбновитьСвернутыеФактическиеДатыРемонтовОбработкаПроведения(Источник, Истина, Неопределено);
		Иначе
		    ОбновитьСвернутыеФактическиеДатыРемонтовОбработкаУдаленияПроведения(Источник, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументПлановыхИсполнителейРемонтов(Источник) Тогда
		ОбновитьПлановыхИсполнителейРемонтовОбработчикСобытий(Источник, РежимЗаписи = РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если ДокументИтоговойПлановойПотребностиВКвалификацияхИИнструментах(Источник) Тогда
		ОбновитьИтоговуюПлановуюПотребностьВКвалификацияхОбработчикСобытий(Источник, РежимЗаписи = РежимЗаписиДокумента.Проведение);
		ОбновитьИтоговуюПлановуюПотребностьВИнструментахОбработчикСобытий(Источник, РежимЗаписи = РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если ДокументИтоговойФактическойПотребностиВКвалификациях(Источник) Тогда
		ОбновитьИтоговуюФактическуюПотребностьВКвалификацияхОбработчикСобытий(Источник, РежимЗаписи = РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры

#Область ОбновлениеПлановыхИсполнителейРемонтов

Процедура ОбновитьПлановыхИсполнителейРемонтовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	ОбновитьПлановыхИсполнителейРемонтовОбработчикСобытий(Источник);
КонецПроцедуры

Процедура ОбновитьПлановыхИсполнителейРемонтовОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	ОбновитьПлановыхИсполнителейРемонтовОбработчикСобытий(Источник, Ложь);
КонецПроцедуры

// Получает записи регистра торо_ПлановыеИсполнителиРемонтов.
//
// Параметры:
//		МассивID - Массив - массив идентификаторов ремонтов.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица, состав колонок повторяет структуру регистра.
//								Таблица проиндексирована по IDРемонта.
//
Функция ПолучитьАктуальныхПлановыхИсполнителейРемонтов(МассивID) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПлановыеИсполнителиРемонтов.IDРемонта КАК IDРемонта,
	               |	торо_ПлановыеИсполнителиРемонтов.Исполнитель КАК Исполнитель,
	               |	торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя КАК УточнениеИсполнителя,
	               |	торо_ПлановыеИсполнителиРемонтов.СпособВыполнения КАК СпособВыполнения
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
	               |ГДЕ
	               |	торо_ПлановыеИсполнителиРемонтов.IDРемонта В(&МассивID)";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("IDРемонта");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбновлениеОбщихДанныхПоРемонтам

Процедура ОбновитьОбщиеДанныеПоРемонтамОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	ОбновитьОбщиеДанныеПоРемонтамОбработчикСобытий(Источник);
КонецПроцедуры

Процедура ОбновитьОбщиеДанныеПоРемонтамОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	ОбновитьОбщиеДанныеПоРемонтамОбработчикСобытий(Источник, Ложь);
КонецПроцедуры

// Получает записи регистра торо_ОбщиеДанныеПоРемонтам.
//
// Параметры:
//		МассивID - Массив - массив идентификаторов ремонтов.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица, состав колонок повторяет структуру регистра.
//								Таблица проиндексирована по IDРемонта.
//
Функция ПолучитьОбщиеДанныеПоРемонтам(МассивID) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбщиеДанныеПоРемонтам.Организация КАК Организация,
	               |	торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор КАК ПодразделениеИнициатор,
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд КАК ЕстьНаряд,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАкт КАК ЕстьАкт,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАктПриемки КАК ЕстьАктПриемки,
	               |	торо_ОбщиеДанныеПоРемонтам.Отменен КАК Отменен,
	               |	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |ГДЕ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&МассивID)";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("IDРемонта");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбновитьСвернутыеФактическиеДатыРемонтов

Процедура ОбновитьСвернутыеФактическиеДатыРемонтовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	ОбновитьСвернутыеФактическиеДатыРемонтовОбработчикСобытий(Источник);
	торо_ПланированиеРемонтов.ЗаписатьРемонтыВРегистрРасчетаПроектныхЗатратПриПроведенииНарядаАкта(Источник);
КонецПроцедуры

Процедура ОбновитьСвернутыеФактическиеДатыРемонтовОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	ОбновитьСвернутыеФактическиеДатыРемонтовОбработчикСобытий(Источник, Ложь);
	торо_ПланированиеРемонтов.ЗаписатьРемонтыВРегистрРасчетаПроектныхЗатратПриОтменеПроведенияНарядаАкта(Источник);
КонецПроцедуры

// Получает записи регистра торо_СвернутыеФактическиеДатыРемонтов.
//
// Параметры:
//		МассивID - Массив - массив идентификаторов ремонтов.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица, состав колонок повторяет структуру регистра.
//								Таблица проиндексирована по IDРемонта.
//
Функция ПолучитьАктуальныеФактическиеДатыРемонтов(МассивID) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СвернутыеФактическиеДатыРемонтов.IDРемонта КАК IDРемонта,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ВидРемонта КАК ВидРемонта
	               |ИЗ
	               |	РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов КАК торо_СвернутыеФактическиеДатыРемонтов
	               |ГДЕ
	               |	торо_СвернутыеФактическиеДатыРемонтов.IDРемонта В(&МассивID)";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("IDРемонта");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область ПодпискиНаСобытия

Процедура торо_АктуализироватьЗаписиРегистраЗаказовНаРемонтПриЗаписи(Источник, Отказ) Экспорт
	
	Если Константы.торо_ИспользоватьСинхронизациюСERP.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не Отказ Тогда
		Источник.Движения.Записать();
		РегистрыСведений.торо_ЗаказыНаРемонтВЕРП.АктуализироватьЗаписиРегистра(Источник);
	КонецЕсли; 
	
КонецПроцедуры

Процедура торо_АктуализироватьЗаписиРегистраЗаказовНаРемонтПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) 
		Или Отказ
		Или Константы.торо_ИспользоватьСинхронизациюСERP.Получить() = Ложь
		Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		// Получим данные движений до проведения или отмены проведения.
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК ID,
		               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВЫБОР
		               |		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
		               |				И торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)
		               |			ТОГДА &ВидРемонтаДляВД
		               |		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
		               |				И торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот)
		               |			ТОГДА &ВидРемонтаДляВО
		               |		ИНАЧЕ торо_ОбщиеДанныеПоРемонтам.ВидРемонта
		               |	КОНЕЦ КАК ВидРемонта
		               |ИЗ
		               |	РегистрСведений.торо_ВсеДокументыПоРемонтам КАК торо_ВсеДокументыПоРемонтам
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
		               |		ПО торо_ВсеДокументыПоРемонтам.IDРемонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
		               |ГДЕ
		               |	торо_ВсеДокументыПоРемонтам.Регистратор = &Ссылка";
		
		Запрос.УстановитьПараметр("ВидРемонтаДляВД", Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить());
		Запрос.УстановитьПараметр("ВидРемонтаДляВО", Константы.торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований.Получить());
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		Результат = Запрос.Выполнить();
		Таблица_ID = Результат.Выгрузить();
		 
	    Источник.ДополнительныеСвойства.Вставить("Таблица_ID", Таблица_ID);
		
	КонецЕсли; 	
		
КонецПроцедуры

Процедура торо_АктуализироватьЗаписиРегистраЗаказовНаРемонтОбработкаУдаленияПроведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если Отказ Или Константы.торо_ИспользоватьСинхронизациюСERP.Получить() = Ложь Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Для каждого НаборЗаписей из Источник.Движения Цикл
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;

	Источник.Движения.Записать();
	РегистрыСведений.торо_ЗаказыНаРемонтВЕРП.АктуализироватьЗаписиРегистра(Источник, Истина);
	
КонецПроцедуры

Процедура торо_ЗапретИзмененияПроведенныхПриНаличииСозданныхНаОснованииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.БезусловнаяЗапись = Истина Или Источник.ЭтоНовый() Или (Не Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Возврат;
	КонецЕсли; 
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		СвязанныеДокументы = КритерииОтбора.СвязанныеДокументы.Найти(Источник.Ссылка);
		
		ЕстьСвязанныеПроведенные = Ложь;
		ЕстьОстановочныйПроведенный = Ложь;
		Для Каждого СвязанныйДокумент Из СвязанныеДокументы Цикл
			
			Если ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_ПроектныеЗатратыНаРемонты") Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.торо_УчетНаработкиОборудования") 
				И ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_УстановкаПроизвольногоЗначенияНаработки") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") 
				И ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_ОстановочныеРемонты") Тогда
				
				Если СвязанныйДокумент.Проведен Тогда
					ЕстьОстановочныйПроведенный = Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если (ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
				Или ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.торо_ВыявленныеДефекты"))
				И (ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_УчетКонтролируемыхПоказателей")
					Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_УчетНаработкиОборудования")
					Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_СостоянияОбъектовРемонта")) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")
				И (ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_УчетНаработкиОборудования")
				Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
				Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_СостоянияОбъектовРемонта")
				Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.торо_УчетКонтролируемыхПоказателей"))
				И СвязанныйДокумент.ИзМобильного Тогда
				Продолжить;
			КонецЕсли;
			
			Если СвязанныйДокумент.Проведен Тогда
				ЕстьСвязанныеПроведенные = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьСвязанныеПроведенные И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ШаблонСообщения = НСтр("ru = 'Невозможно проведение документа ""%1"", есть документы, введенные на основании данного!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Источник.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ИначеЕсли (ЕстьСвязанныеПроведенные Или ЕстьОстановочныйПроведенный) И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда			
			ШаблонСообщения = НСтр("ru = 'Нельзя отменить проведение документа ""%1"", есть связанные документы!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Источник.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьIDУдаленныхРемонтовДокумента(МассивID, ДокументСсылка) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВсеДокументыПоРемонтам.IDРемонта КАК IDРемонта
	               |ИЗ
	               |	РегистрСведений.торо_ВсеДокументыПоРемонтам КАК торо_ВсеДокументыПоРемонтам
	               |ГДЕ
	               |	торо_ВсеДокументыПоРемонтам.ДокументПоРемонту = &ДокументПоРемонту
	               |	И НЕ торо_ВсеДокументыПоРемонтам.IDРемонта В(&МассивID)";
	
	Запрос.УстановитьПараметр("ДокументПоРемонту", ДокументСсылка);
	Запрос.УстановитьПараметр("МассивID", МассивID);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат Новый Массив();
	КонецЕсли;
	
	МассивУдаленныхID = Новый Массив();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУдаленныхID.Добавить(Выборка.IDРемонта);
	КонецЦикла;
	
	Возврат МассивУдаленныхID;
КонецФункции

#КонецОбласти 

// Функция возвращает имя ТЧ ремонтов в документе. Если получить значение не удалось - возвращается Неопределено.
//
//	Параметры
//		Документ 	- ссылка на документ, для которонр требуется выполнить проверку.
//
Функция ПолучитьИмяТЧРемонтов(ДокументНаПроверку) Экспорт
	ТипДокумента = ТипЗнч(ДокументНаПроверку);
	
	Если ТипДокумента = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ИмяТЧРемонтов = "СписокДефектов";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ИмяТЧРемонтов = "ОбследованноеОборудование";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ПланГрафикРемонта") 
			ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
			
		ИмяТЧРемонтов = "ПланРемонтов";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") 
			ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") 
			ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_АктПриемкиОборудования") Тогда
			
		ИмяТЧРемонтов = "РемонтыОборудования";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ИмяТЧРемонтов = "Мероприятия";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ИмяТЧРемонтов = "РегламентныеМероприятия";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ОстановочныеРемонты") Тогда
  		ИмяТЧРемонтов = "СвязанныеРемонты";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ПланРаботПодразделения") Тогда
  		ИмяТЧРемонтов = "СписокРемонтовПлана";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
  		ИмяТЧРемонтов = "ЗакрываемыеРемонты";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяТЧРемонтов;
КонецФункции

// Для заполнения таблицы плановых ремонтов в обработке "Закрытие заявок и ремонтов".
// Возвращаемое значение:
//		РезультатЗапроса - результат выполнения запроса.
Функция ПолучитьПлановыеРемонтыДляЗакрытияЗаявокИРемонтов(ДатаАктуальности, ОтборРемонтовПоИД = Неопределено, ОтборРемонтовПоОРиВР = Неопределено, ОтборПоОР = Неопределено) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ОтборРемонтовПоОРиВР <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ПОМЕСТИТЬ ОтборОРиВР
		|ИЗ
		|	&ТаблицаОР КАК ТаблицаОР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаОР.ОбъектРемонтныхРабот,
		|	ВидРемонтныхРабот"; 
		
		Запрос.УстановитьПараметр("ТаблицаОР", ОтборРемонтовПоОРиВР);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктуальныеПлановыеДатыРемонтов.IDРемонта КАК IDРемонта,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
	|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ПлановыеРемонтныеРаботы
	|ИЗ
	|	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|		ПО торо_АктуальныеПлановыеДатыРемонтов.IDРемонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	|			И &ОтборПоОРиВР 
   |ГДЕ
	|	торо_АктуальныеПлановыеДатыРемонтов.ДокументНачалаЦепочки ССЫЛКА Документ.торо_ПланГрафикРемонта
	|	И торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала <= &ДатаАктуальности
	|	И торо_АктуальныеПлановыеДатыРемонтов.IDРемонта В(&ОтборПоID)
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.Замещен
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
	|	И торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = &ОтборПоОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК IDРемонта
	|ПОМЕСТИТЬ ВТ_Остановочные
	|ИЗ
	|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(
	|			,
	|			IDЗависимого В
	|				(ВЫБРАТЬ
	|					ВТ_ПлановыеРемонтныеРаботы.IDРемонта КАК IDРемонта
	|				ИЗ
	|					ВТ_ПлановыеРемонтныеРаботы КАК ВТ_ПлановыеРемонтныеРаботы)) КАК торо_ОстановочныеРемонтыСрезПоследних
	|ГДЕ
	|	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК Заявка,
	|	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта
	|ПОМЕСТИТЬ ВТ_ВсеРемонтыЗаявок
	|ИЗ
	|	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
	|			,
	|			IDРемонта В
	|				(ВЫБРАТЬ
	|					ВТ_ПлановыеРемонтныеРаботы.IDРемонта
	|				ИЗ
	|					ВТ_ПлановыеРемонтныеРаботы КАК ВТ_ПлановыеРемонтныеРаботы)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	|ГДЕ
	|	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_СкользящийПланРабот.ID_Ремонта КАК ID_Ремонта
	|ПОМЕСТИТЬ ВТ_СкользящийПлан
	|ИЗ
	|	РегистрСведений.торо_СкользящийПланРабот КАК торо_СкользящийПланРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПлановыеРемонтныеРаботы КАК ВТ_ПлановыеРемонтныеРаботы
	|		ПО торо_СкользящийПланРабот.ID_Ремонта = ВТ_ПлановыеРемонтныеРаботы.IDРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID_Ремонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПлановыеРемонтныеРаботы.IDРемонта КАК ID,
	|	ВТ_ПлановыеРемонтныеРаботы.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ПлановыеРемонтныеРаботы.ВидРемонта КАК ВидРемонта,
	|	ВТ_ПлановыеРемонтныеРаботы.ДатаНачала КАК ДатаНачала,
	|	ВТ_ПлановыеРемонтныеРаботы.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ПлановыеРемонтныеРаботы.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	ВТ_ПлановыеРемонтныеРаботы.ДокументОснование КАК ДокументОснование,
	|	ВТ_ПлановыеРемонтныеРаботы.ЕстьЗаявка КАК ЕстьЗаявка,
	|	ВТ_ВсеРемонтыЗаявок.Заявка КАК Заявка,
	|	ВЫБОР
	|		КОГДА ВТ_СкользящийПлан.ID_Ремонта ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РемонтВключенВОбщийПлан
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	ВТ_ПлановыеРемонтныеРаботы КАК ВТ_ПлановыеРемонтныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остановочные КАК ВТ_Остановочные
	|		ПО ВТ_ПлановыеРемонтныеРаботы.IDРемонта = ВТ_Остановочные.IDРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеРемонтыЗаявок КАК ВТ_ВсеРемонтыЗаявок
	|		ПО ВТ_ПлановыеРемонтныеРаботы.IDРемонта = ВТ_ВсеРемонтыЗаявок.IDРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкользящийПлан КАК ВТ_СкользящийПлан
	|		ПО ВТ_ПлановыеРемонтныеРаботы.IDРемонта = ВТ_СкользящийПлан.ID_Ремонта
	|ГДЕ
	|	ВТ_Остановочные.IDРемонта ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПланГрафикРемонта.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РазрешенныеДокументы
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	|ГДЕ
	|	торо_ПланГрафикРемонта.Ссылка В
	|			(ВЫБРАТЬ
	|				ПодготовленныеДанные.ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				ПодготовленныеДанные КАК ПодготовленныеДанные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонт.Ссылка
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	|ГДЕ
	|	торо_ЗаявкаНаРемонт.Ссылка В
	|			(ВЫБРАТЬ
	|				ПодготовленныеДанные.ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				ПодготовленныеДанные КАК ПодготовленныеДанные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗакрытиеЗаявокИРемонтов.Ссылка
	|ИЗ
	|	Документ.торо_ЗакрытиеЗаявокИРемонтов КАК торо_ЗакрытиеЗаявокИРемонтов
	|ГДЕ
	|	торо_ЗакрытиеЗаявокИРемонтов.Ссылка В
	|			(ВЫБРАТЬ
	|				ПодготовленныеДанные.ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				ПодготовленныеДанные КАК ПодготовленныеДанные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ПланРаботПодразделения.Ссылка
	|ИЗ
	|	Документ.торо_ПланРаботПодразделения КАК торо_ПланРаботПодразделения
	|ГДЕ
	|	торо_ПланРаботПодразделения.Ссылка В
	|			(ВЫБРАТЬ
	|				ПодготовленныеДанные.ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				ПодготовленныеДанные КАК ПодготовленныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.ID КАК ID,
	|	ПодготовленныеДанные.ОбъектРемонта КАК ОбъектРемонта,
	|	ПодготовленныеДанные.ВидРемонта КАК ВидРемонта,
	|	ПодготовленныеДанные.ДатаНачала КАК ДатаНачала,
	|	ПодготовленныеДанные.ДатаОкончания КАК ДатаОкончания,
	|	ПодготовленныеДанные.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	ПодготовленныеДанные.ДокументОснование КАК ДокументОснование,
	|	ПодготовленныеДанные.ЕстьЗаявка КАК ЕстьЗаявка,
	|	ПодготовленныеДанные.Заявка КАК Заявка,
	|	ПодготовленныеДанные.РемонтВключенВОбщийПлан КАК РемонтВключенВОбщийПлан,
	|	торо_ОтменятьЗакрытиеЗаявок.Значение КАК Отменен,
	|	торо_ПричинаЗакрытияЗаявок.Значение КАК ПричинаЗакрытияЗаявки,
	|	торо_ПричинаЗакрытияРемонтов.Значение КАК ПричинаЗакрытия
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РазрешенныеДокументы КАК ВТ_РазрешенныеДокументы
	|		ПО ПодготовленныеДанные.ДокументОснование = ВТ_РазрешенныеДокументы.Ссылка,
	|	Константа.торо_ПричинаЗакрытияЗаявок КАК торо_ПричинаЗакрытияЗаявок,
	|	Константа.торо_ПричинаЗакрытияРемонтов КАК торо_ПричинаЗакрытияРемонтов,
	|	Константа.торо_ОтменятьЗакрытиеЗаявок КАК торо_ОтменятьЗакрытиеЗаявок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания";
	
	Если ОтборРемонтовПоИД <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтборПоID", ОтборРемонтовПоИД);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И торо_АктуальныеПлановыеДатыРемонтов.IDРемонта В(&ОтборПоID)", "");
	КонецЕсли;
	
	Если ОтборРемонтовПоОРиВР <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоОРиВР", 
			"
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборОРиВР КАК ОтборОРиВР
			|		ПО торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = ОтборОРиВР.ОбъектРемонтныхРабот  
			|			И торо_ОбщиеДанныеПоРемонтам.ВидРемонта = ОтборОРиВР.ВидРемонтныхРабот");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОРиВР", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоОР) Тогда
		Запрос.УстановитьПараметр("ОтборПоОР", ОтборПоОР);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = &ОтборПоОР", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуОпасныхОперацийБезНарядов(ДокОснование, РемонтыОборудования_ID = "") Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
		|	торо_ТехнологическиеОперации.РаботаПовышеннойОпасности КАК РаботаПовышеннойОпасности
		|ПОМЕСТИТЬ РемРаб
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
		|		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота = торо_ТехнологическиеОперации.Ссылка
		|ГДЕ
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = &Ссылка
		|	И ВЫРАЗИТЬ(торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота КАК Справочник.торо_ТехнологическиеОперации) ССЫЛКА Справочник.торо_ТехнологическиеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РемРаб.РемонтнаяРабота,
		|	РемРаб.Родитель_ID,
		|	РемРаб.РемонтыОборудования_ID,
		|	РемРаб.ID,
		|	РемРаб.РаботаПОвышеннойОпасности,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка
		|ПОМЕСТИТЬ НарядыНаРемРаб
		|ИЗ
		|	РемРаб КАК РемРаб
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		|		ПО РемРаб.РемонтыОборудования_ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID
		|			И РемРаб.ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID
		|ГДЕ
		|	РемРаб.РаботаПОвышеннойОпасности = ИСТИНА
		|	И торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.Проведен
		|	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РемРаб.РемонтнаяРабота,
		|	РемРаб.РемонтыОборудования_ID,
		|	РемРаб.РаботаПОвышеннойОпасности,
		|	РемРаб.ID
		|ПОМЕСТИТЬ РаботыПовышеннойОпасности
		|ИЗ
		|	РемРаб КАК РемРаб
		|ГДЕ
		|	РемРаб.РаботаПОвышеннойОпасности = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ВводитьНаряд,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонта,
		|	РаботыПовышеннойОпасности.РемонтнаяРабота КАК РемонтнаяРабота,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачалаРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончанияРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
		|	РаботыПовышеннойОпасности.ID КАК ID_Операции
		|ИЗ
		|	РаботыПовышеннойОпасности КАК РаботыПовышеннойОпасности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		|		ПО РаботыПовышеннойОпасности.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтыОборудования.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ НарядыНаРемРаб КАК НарядыНаРемРаб
		|		ПО (РаботыПовышеннойОпасности.РемонтыОборудования_ID = НарядыНаРемРаб.РемонтыОборудования_ID
		|			И РаботыПовышеннойОпасности.ID = НарядыНаРемРаб.ID)
		|ГДЕ
		|	НарядыНаРемРаб.Ссылка ЕСТЬ NULL 
		|	И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = &Ссылка";
		
		Если РемонтыОборудования_ID <> "" Тогда
			Запрос.Текст = Запрос.Текст + " И торо_ЗаявкаНаРемонтРемонтыОборудования.ID = &РемонтыОборудования_ID";
			Запрос.УстановитьПараметр("РемонтыОборудования_ID", РемонтыОборудования_ID);
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ИСТИНА КАК ВводитьНаряд,
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований.Значение КАК ВидРемонта,
		|	торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаНачалаРемонта,
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ПлановаяДатаРемонта КАК ДатаОкончанияРемонта,
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID КАК ID,
		|	торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.ID КАК ID_Операции
		|ПОМЕСТИТЬ ВТ_ВнешниеОснованияОпасныеРаботы
		|ИЗ
		|	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК торо_ВнешнееОснованиеДляРаботОбследованноеОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВнешнееОснованиеДляРабот.РемонтныеРаботы КАК торо_ВнешнееОснованиеДляРаботРемонтныеРаботы
		|		ПО торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка = торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.Ссылка
		|			И торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID = торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.Предписание_ID,
		|	Константа.торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований КАК торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований
		|ГДЕ
		|	торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.РемонтнаяРабота.РаботаПовышеннойОпасности = ИСТИНА
		|	И торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка КАК Ссылка,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.НомерСтроки КАК НомерСтроки,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID КАК ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Количество КАК Количество,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Картинка КАК Картинка
		|ПОМЕСТИТЬ ВТ_Наряды
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.Проведен = ИСТИНА
		|	И торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID В
		|			(ВЫБРАТЬ
		|				ВТ_ВнешниеОснованияОпасныеРаботы.ID КАК ID
		|			ИЗ
		|				ВТ_ВнешниеОснованияОпасныеРаботы КАК ВТ_ВнешниеОснованияОпасныеРаботы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВнешниеОснованияОпасныеРаботы.ВводитьНаряд КАК ВводитьНаряд,
		|	ВТ_ВнешниеОснованияОпасныеРаботы.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ВнешниеОснованияОпасныеРаботы.ВидРемонта КАК ВидРемонта,
		|	ВТ_ВнешниеОснованияОпасныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		|	ВТ_ВнешниеОснованияОпасныеРаботы.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		|	ВТ_ВнешниеОснованияОпасныеРаботы.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	ВТ_ВнешниеОснованияОпасныеРаботы.ID КАК ID,
		|	ВТ_ВнешниеОснованияОпасныеРаботы.ID_Операции КАК ID_Операции
		|ИЗ
		|	ВТ_ВнешниеОснованияОпасныеРаботы КАК ВТ_ВнешниеОснованияОпасныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наряды КАК ВТ_Наряды
		|		ПО ВТ_ВнешниеОснованияОпасныеРаботы.ID = ВТ_Наряды.РемонтыОборудования_ID
		|			И ВТ_ВнешниеОснованияОпасныеРаботы.ID_Операции = ВТ_Наряды.ID
		|ГДЕ
		|	ВТ_Наряды.Ссылка ЕСТЬ NULL";
		Если РемонтыОборудования_ID <> "" Тогда
			Запрос.Текст = Запрос.Текст + " И ВТ_ВнешниеОснованияОпасныеРаботы.ID = &РемонтыОборудования_ID";
			Запрос.УстановитьПараметр("РемонтыОборудования_ID", РемонтыОборудования_ID);
		КонецЕсли;		
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		
		ВТ_ОпасныеОперации = Новый ТаблицаЗначений();
		ВТ_ОпасныеОперации.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ВидРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ДатаНачалаРемонта", Новый ОписаниеТипов("Дата"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ДатаОкончанияРемонта", Новый ОписаниеТипов("Дата"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
		ВТ_ОпасныеОперации.Колонки.Добавить("ID_Операции", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
		ВТ_ОпасныеОперации.Колонки.Добавить("РемонтнаяРабота", Новый ОписаниеТипов("СправочникСсылка.торо_ТехнологическиеОперации"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ВводитьНаряд", Новый ОписаниеТипов("Булево"));
		
		ТабТехКарт = Новый ТаблицаЗначений;
		ТабТехКарт.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		ТабТехКарт.Колонки.Добавить("ВидРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
		ТабТехКарт.Колонки.Добавить("ДатаНачалаРемонта", Новый ОписаниеТипов("Дата"));
		ТабТехКарт.Колонки.Добавить("ДатаОкончанияРемонта", Новый ОписаниеТипов("Дата"));
		ТабТехКарт.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
		ТабТехКарт.Колонки.Добавить("РемонтнаяРабота", Новый ОписаниеТипов("СправочникСсылка.торо_ИдентификаторыТехКарт"));
		ТабТехКарт.Колонки.Добавить("ВводитьНаряд", Новый ОписаниеТипов("Булево")) ; 
		
 		Запрос.УстановитьПараметр("Ссылка", ДокОснование);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент КАК ОбъектРемонта,
		               |	торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Значение КАК ВидРемонта,
		               |	торо_ВыявленныеДефектыСписокДефектов.ID КАК ID,
		               |	торо_ВыявленныеДефектыСписокДефектов.ТиповойДефект КАК ТиповойДефект,
		               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
		               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
		               |ПОМЕСТИТЬ ВТ_ОбъектыИВид
		               |ИЗ
		               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		               |		ПО торо_ВыявленныеДефектыСписокДефектов.Ссылка = торо_ВыявленныеДефекты.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		               |		ПО (торо_АктуальныеПлановыеДатыРемонтов.IDРемонта = торо_ВыявленныеДефектыСписокДефектов.ID),
		               |	Константа.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов КАК торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов
		               |ГДЕ
		               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ОбъектыИВид.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ОбъектыИВид.ВидРемонта КАК ВидРемонта,
		               |	ЕСТЬNULL(торо_ТиповыеДефектыОборудования.ТехнологическаяКарта, торо_НормативныеРемонтыОборудования.НормативныйРемонт) КАК НормативныйРемонт,
		               |	ВТ_ОбъектыИВид.ID КАК ID,
		               |	ВТ_ОбъектыИВид.ДатаНачала КАК ДатаНачала,
		               |	ВТ_ОбъектыИВид.ДатаОкончания КАК ДатаОкончания
		               |ПОМЕСТИТЬ ВТ_Нормативы
		               |ИЗ
		               |	ВТ_ОбъектыИВид КАК ВТ_ОбъектыИВид
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		               |		ПО (торо_НормативныеРемонтыОборудования.ОбъектРемонта = ВТ_ОбъектыИВид.ОбъектРемонта)
		               |			И (торо_НормативныеРемонтыОборудования.ВидРемонта = ВТ_ОбъектыИВид.ВидРемонта)
		               |			И (торо_НормативныеРемонтыОборудования.Приоритет = ИСТИНА)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеДефектыОборудования КАК торо_ТиповыеДефектыОборудования
		               |		ПО ВТ_ОбъектыИВид.ТиповойДефект = торо_ТиповыеДефектыОборудования.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Нормативы.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_Нормативы.ВидРемонта КАК ВидРемонта,
		               |	ВТ_Нормативы.ID КАК ID,
		               |	торо_ВерсииТехКарт.ТехКарта КАК ТехКарта,
		               |	торо_ВерсииТехКарт.Период КАК Период,
		               |	ВТ_Нормативы.ДатаНачала КАК ДатаНачала,
		               |	ВТ_Нормативы.ДатаОкончания КАК ДатаОкончания
		               |ПОМЕСТИТЬ ВТ_ВсеВерсииТК
		               |ИЗ
		               |	ВТ_Нормативы КАК ВТ_Нормативы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		               |		ПО ВТ_Нормативы.НормативныйРемонт = торо_ВерсииТехКарт.ИдентификаторТехКарты
		               |ГДЕ
		               |	торо_ВерсииТехКарт.Период <= ВЫБОР
		               |			КОГДА ВТ_Нормативы.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
		               |				ТОГДА ВТ_Нормативы.ДатаНачала
		               |			ИНАЧЕ &ТекущаяДата
		               |		КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ВсеВерсииТК.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ВсеВерсииТК.ВидРемонта КАК ВидРемонта,
		               |	ВТ_ВсеВерсииТК.ID КАК ID,
		               |	МАКСИМУМ(ВТ_ВсеВерсииТК.Период) КАК Период
		               |ПОМЕСТИТЬ ВТ_МаксимумыПериодовТК
		               |ИЗ
		               |	ВТ_ВсеВерсииТК КАК ВТ_ВсеВерсииТК
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ВсеВерсииТК.ОбъектРемонта,
		               |	ВТ_ВсеВерсииТК.ВидРемонта,
		               |	ВТ_ВсеВерсииТК.ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_МаксимумыПериодовТК.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_МаксимумыПериодовТК.ВидРемонта КАК ВидРемонта,
		               |	ВТ_МаксимумыПериодовТК.ID КАК ID,
		               |	ВТ_ВсеВерсииТК.ТехКарта КАК ТехКарта,
		               |	ВТ_ВсеВерсииТК.ДатаОкончания КАК ДатаОкончания,
		               |	ВТ_ВсеВерсииТК.ДатаНачала КАК ДатаНачала
		               |ПОМЕСТИТЬ ВТ_ВерсияТК
		               |ИЗ
		               |	ВТ_ВсеВерсииТК КАК ВТ_ВсеВерсииТК
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимумыПериодовТК КАК ВТ_МаксимумыПериодовТК
		               |		ПО (ВТ_МаксимумыПериодовТК.ID = ВТ_ВсеВерсииТК.ID)
		               |			И ВТ_ВсеВерсииТК.Период = ВТ_МаксимумыПериодовТК.Период
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИСТИНА КАК ВводитьНаряд,
		               |	ВТ_ВерсияТК.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ВерсияТК.ВидРемонта КАК ВидРемонта,
		               |	торо_ТехКартыСписокОпераций.Операция КАК РемонтнаяРабота,
		               |	ЕСТЬNULL(ВТ_ВерсияТК.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНачалаРемонта,
		               |	ЕСТЬNULL(ВТ_ВерсияТК.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОкончанияРемонта,
		               |	ВТ_ВерсияТК.ID КАК ID,
		               |	торо_ТехКартыСписокОпераций.ID КАК ID_Операции
		               |ИЗ
		               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВерсияТК КАК ВТ_ВерсияТК
		               |		ПО (ВТ_ВерсияТК.ТехКарта = торо_ТехКартыСписокОпераций.Ссылка)
		               |ГДЕ
		               |	НЕ ВТ_ВерсияТК.ОбъектРемонта ЕСТЬ NULL
		               |	И НЕ ВТ_ВерсияТК.ВидРемонта ЕСТЬ NULL
		               |	И ВЫБОР
		               |			КОГДА ТИПЗНАЧЕНИЯ(торо_ТехКартыСписокОпераций.Операция) = ТИП(Справочник.торо_ТехнологическиеОперации)
		               |				ТОГДА торо_ТехКартыСписокОпераций.Операция.РаботаПовышеннойОпасности = ИСТИНА
		               |			ИНАЧЕ торо_ТехКартыСписокОпераций.Ссылка.СодержитРаботыПовышеннойОпасности = ИСТИНА
		               |		КОНЕЦ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				НС = ТабТехКарт.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Выборка);						
			Иначе
				НС = ВТ_ОпасныеОперации.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Выборка);
			КонецЕсли;
		КонецЦикла;
		
		КЦ = 0;
		Пока Истина Цикл
			ЗапросОпераций = Новый Запрос;
			ЗапросОпераций.Параметры.Вставить("Таблица", ТабТехКарт);
			ЗапросОпераций.УстановитьПараметр("Дата", ДокОснование.ДатаОбнаружения);
			ЗапросОпераций.Текст = "ВЫБРАТЬ
			                       |	Таблица.ОбъектРемонта КАК ОбъектРемонта,
			                       |	Таблица.ВидРемонта КАК ВидРемонта,
			                       |	Таблица.ID КАК ID,
			                       |	Таблица.РемонтнаяРабота КАК ТехКарта,
			                       |	Таблица.ВводитьНаряд КАК ВводитьНаряд,
			                       |	Таблица.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
			                       |	Таблица.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта
			                       |ПОМЕСТИТЬ Таблица
			                       |ИЗ
			                       |	&Таблица КАК Таблица
			                       |;
			                       |
			                       |////////////////////////////////////////////////////////////////////////////////
			                       |ВЫБРАТЬ
			                       |	ВТ_Нормативы.ОбъектРемонта КАК ОбъектРемонта,
			                       |	ВТ_Нормативы.ВидРемонта КАК ВидРемонта,
			                       |	ВТ_Нормативы.ID КАК ID,
			                       |	торо_ВерсииТехКарт.ТехКарта КАК ТехКарта,
			                       |	торо_ВерсииТехКарт.Период КАК Период,
			                       |	торо_ВерсииТехКарт.ИдентификаторТехКарты КАК ИдентификаторТехКарты
			                       |ПОМЕСТИТЬ ВТ_ВсеВерсииТК
			                       |ИЗ
			                       |	Таблица КАК ВТ_Нормативы
			                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
			                       |		ПО ВТ_Нормативы.ТехКарта = торо_ВерсииТехКарт.ИдентификаторТехКарты
			                       |ГДЕ
			                       |	торо_ВерсииТехКарт.Период <= ВТ_Нормативы.ДатаНачалаРемонта
			                       |;
			                       |
			                       |////////////////////////////////////////////////////////////////////////////////
			                       |ВЫБРАТЬ
			                       |	ВТ_ВсеВерсииТК.ОбъектРемонта КАК ОбъектРемонта,
			                       |	ВТ_ВсеВерсииТК.ВидРемонта КАК ВидРемонта,
			                       |	ВТ_ВсеВерсииТК.ID КАК ID,
			                       |	МАКСИМУМ(ВТ_ВсеВерсииТК.Период) КАК Период
			                       |ПОМЕСТИТЬ ВТ_МаксимумыПериодовТК
			                       |ИЗ
			                       |	ВТ_ВсеВерсииТК КАК ВТ_ВсеВерсииТК
			                       |
			                       |СГРУППИРОВАТЬ ПО
			                       |	ВТ_ВсеВерсииТК.ОбъектРемонта,
			                       |	ВТ_ВсеВерсииТК.ВидРемонта,
			                       |	ВТ_ВсеВерсииТК.ID
			                       |;
			                       |
			                       |////////////////////////////////////////////////////////////////////////////////
			                       |ВЫБРАТЬ
			                       |	ВТ_МаксимумыПериодовТК.ОбъектРемонта КАК ОбъектРемонта,
			                       |	ВТ_МаксимумыПериодовТК.ВидРемонта КАК ВидРемонта,
			                       |	ВТ_МаксимумыПериодовТК.ID КАК ID,
			                       |	ВТ_ВсеВерсииТК.ТехКарта КАК ТехКарта,
			                       |	ВТ_ВсеВерсииТК.ИдентификаторТехКарты КАК ИдентификаторТехКарты
			                       |ПОМЕСТИТЬ ВТ_ВерсияТК
			                       |ИЗ
			                       |	ВТ_ВсеВерсииТК КАК ВТ_ВсеВерсииТК
			                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимумыПериодовТК КАК ВТ_МаксимумыПериодовТК
			                       |		ПО (ВТ_МаксимумыПериодовТК.ID = ВТ_ВсеВерсииТК.ID)
			                       |			И ВТ_ВсеВерсииТК.Период = ВТ_МаксимумыПериодовТК.Период
			                       |;
			                       |
			                       |////////////////////////////////////////////////////////////////////////////////
			                       |ВЫБРАТЬ
			                       |	Таблица.ВводитьНаряд КАК ВводитьНаряд,
			                       |	Таблица.ОбъектРемонта КАК ОбъектРемонта,
			                       |	Таблица.ВидРемонта КАК ВидРемонта,
			                       |	торо_ТехКартыСписокОпераций.Операция КАК РемонтнаяРабота,
			                       |	Таблица.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
			                       |	Таблица.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
			                       |	Таблица.ID КАК ID,
			                       |	торо_ТехнологическиеОперации.РаботаПовышеннойОпасности КАК РаботаПовышеннойОпасности,
			                       |	торо_ТехКартыСписокОпераций.ID КАК ID_Операции
			                       |ИЗ
			                       |	Таблица КАК Таблица
			                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
			                       |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВерсияТК КАК торо_ВерсииТехКартСрезПоследних
			                       |			ПО (торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКартыСписокОпераций.Ссылка)
			                       |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
			                       |			ПО торо_ТехКартыСписокОпераций.Операция = торо_ТехнологическиеОперации.Ссылка
			                       |		ПО (Таблица.ТехКарта = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты)
			                       |ГДЕ
			                       |	ВЫБОР
			                       |			КОГДА ТИПЗНАЧЕНИЯ(торо_ТехКартыСписокОпераций.Операция) = ТИП(Справочник.торо_ТехнологическиеОперации)
			                       |				ТОГДА торо_ТехКартыСписокОпераций.Операция.РаботаПовышеннойОпасности = ИСТИНА
			                       |			ИНАЧЕ торо_ТехКартыСписокОпераций.Ссылка.СодержитРаботыПовышеннойОпасности = ИСТИНА
			                       |		КОНЕЦ";
			
			Выборка = ЗапросОпераций.Выполнить().Выбрать();
			ТабТехКарт.Очистить();
			Пока Выборка.Следующий() Цикл
				Если ТипЗнч(Выборка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					НС = ТабТехКарт.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Выборка);						
				Иначе
					НС = ВТ_ОпасныеОперации.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Выборка);
				КонецЕсли;
			КонецЦикла;
			
			Если ТабТехКарт.Количество() = 0 или КЦ > 100 Тогда
				Прервать;
			КонецЕсли;
			
			КЦ = КЦ + 1;
			
		КонецЦикла;
		
		Запрос.Параметры.Вставить("ВТ_ОпасныеОперации", ВТ_ОпасныеОперации);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВТ_ОпасныеОперации.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ОпасныеОперации.ВидРемонта КАК ВидРемонта,
		|	ВТ_ОпасныеОперации.ID КАК ID,
		|	ВТ_ОпасныеОперации.РемонтнаяРабота КАК РемонтнаяРабота,
		|	ВТ_ОпасныеОперации.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		|	ВТ_ОпасныеОперации.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	ВТ_ОпасныеОперации.ВводитьНаряд КАК ВводитьНаряд,
		|	ВТ_ОпасныеОперации.ID_Операции
		|ПОМЕСТИТЬ ВТ_ОпасныеОперации
		|ИЗ
		|	&ВТ_ОпасныеОперации КАК ВТ_ОпасныеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка КАК Ссылка,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.НомерСтроки КАК НомерСтроки,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID КАК ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Количество КАК Количество,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Картинка КАК Картинка
		|ПОМЕСТИТЬ ВТ_Наряды
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.Проведен = ИСТИНА
		|	И торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID В
		|			(ВЫБРАТЬ
		|				ВТ_ОпасныеОперации.ID КАК ID
		|			ИЗ
		|				ВТ_ОпасныеОперации КАК ВТ_ОпасныеОперации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОпасныеОперации.ВводитьНаряд КАК ВводитьНаряд,
		|	ВТ_ОпасныеОперации.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ОпасныеОперации.ВидРемонта КАК ВидРемонта,
		|	ВТ_ОпасныеОперации.РемонтнаяРабота КАК РемонтнаяРабота,
		|	ВТ_ОпасныеОперации.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		|	ВТ_ОпасныеОперации.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	ВТ_ОпасныеОперации.ID КАК ID,
		|	ВТ_ОпасныеОперации.ID_Операции КАК ID_Операции
		|ИЗ
		|	ВТ_ОпасныеОперации КАК ВТ_ОпасныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наряды КАК ВТ_Наряды
		|		ПО ВТ_ОпасныеОперации.РемонтнаяРабота = ВТ_Наряды.РемонтнаяРабота
		|			И (ВТ_ОпасныеОперации.ID = ВТ_Наряды.РемонтыОборудования_ID)
		|			И (ВТ_ОпасныеОперации.ID_Операции = ВТ_Наряды.ID)
		|ГДЕ
		|	ВТ_Наряды.Ссылка ЕСТЬ NULL";
		
		Если РемонтыОборудования_ID <> "" Тогда
			Запрос.Текст = Запрос.Текст + " И ВТ_ОпасныеОперации.ID = &РемонтыОборудования_ID";
			Запрос.УстановитьПараметр("РемонтыОборудования_ID", РемонтыОборудования_ID);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		ВТ_ОпасныеОперации = Новый ТаблицаЗначений();
		ВТ_ОпасныеОперации.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ВидРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ДатаНачалаРемонта", Новый ОписаниеТипов("Дата"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ДатаОкончанияРемонта", Новый ОписаниеТипов("Дата"));
		ВТ_ОпасныеОперации.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
		ВТ_ОпасныеОперации.Колонки.Добавить("ID_Операции", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
		ВТ_ОпасныеОперации.Колонки.Добавить("РемонтнаяРабота", Новый ОписаниеТипов("СправочникСсылка.торо_ТехнологическиеОперации"));
		
		ТабТехКарт = Новый ТаблицаЗначений;
		ТабТехКарт.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		ТабТехКарт.Колонки.Добавить("ВидРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
		ТабТехКарт.Колонки.Добавить("ДатаНачалаРемонта", Новый ОписаниеТипов("Дата"));
		ТабТехКарт.Колонки.Добавить("ДатаОкончанияРемонта", Новый ОписаниеТипов("Дата"));
		ТабТехКарт.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
		ТабТехКарт.Колонки.Добавить("РемонтнаяРабота", Новый ОписаниеТипов("СправочникСсылка.торо_ИдентификаторыТехКарт"));
		
		Запрос.УстановитьПараметр("Ссылка", ДокОснование);
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон КАК ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач КАК ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ID КАК ID
		|ПОМЕСТИТЬ ВТ_РемонтныеРаботы
		|ИЗ
		|	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|ГДЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка = &Ссылка
		|	И торо_ПланГрафикРемонтаПланРемонтов.Замещен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РемонтныеРаботы.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ВТ_РемонтныеРаботы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ВТ_РемонтныеРаботы.ДатаКон КАК ДатаКон,
		|	ВТ_РемонтныеРаботы.ДатаНач КАК ДатаНач,
		|	ВТ_РемонтныеРаботы.ID КАК ID,
		|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт
		|ПОМЕСТИТЬ ВТ_Нормативы
		|ИЗ
		|	ВТ_РемонтныеРаботы КАК ВТ_РемонтныеРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|		ПО ВТ_РемонтныеРаботы.ОбъектРемонтныхРабот = торо_НормативныеРемонтыОборудования.ОбъектРемонта
		|			И ВТ_РемонтныеРаботы.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
		|ГДЕ
		|	торо_НормативныеРемонтыОборудования.Приоритет = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_РемонтныеРаботы.ОбъектРемонтныхРабот,
		|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
		|	ВТ_РемонтныеРаботы.ДатаКон,
		|	ВТ_РемонтныеРаботы.ДатаНач,
		|	ВТ_РемонтныеРаботы.ID,
		|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НормативныйРемонт
		|ИЗ
		|	ВТ_РемонтныеРаботы КАК ВТ_РемонтныеРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
		|			ПО торо_РемонтныеЦиклыОборудования.ВидЦепочки = торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
		|		ПО ВТ_РемонтныеРаботы.ОбъектРемонтныхРабот = торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов
		|			И (ВТ_РемонтныеРаботы.ВидРемонтныхРабот = торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Нормативы.НормативныйРемонт КАК НормативныйРемонт,
		|	МАКСИМУМ(торо_ВерсииТехКарт.Период) КАК Период,
		|	ВТ_Нормативы.ID КАК ID
		|ПОМЕСТИТЬ ВТ_Даты
		|ИЗ
		|	ВТ_Нормативы КАК ВТ_Нормативы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		|		ПО ВТ_Нормативы.НормативныйРемонт = торо_ВерсииТехКарт.ИдентификаторТехКарты
		|ГДЕ
		|	торо_ВерсииТехКарт.Период <= ВТ_Нормативы.ДатаНач
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Нормативы.НормативныйРемонт,
		|	ВТ_Нормативы.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Нормативы.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ВТ_Нормативы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ВТ_Нормативы.ДатаКон КАК ДатаКон,
		|	ВТ_Нормативы.ДатаНач КАК ДатаНач,
		|	ВТ_Нормативы.ID КАК ID,
		|	ВТ_Нормативы.НормативныйРемонт КАК НормативныйРемонт,
		|	ВТ_Даты.Период КАК Период
		|ПОМЕСТИТЬ ВТ_ДляВерсийТК
		|ИЗ
		|	ВТ_Нормативы КАК ВТ_Нормативы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Даты КАК ВТ_Даты
		|		ПО ВТ_Нормативы.НормативныйРемонт = ВТ_Даты.НормативныйРемонт
		|			И ВТ_Нормативы.ID = ВТ_Даты.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДляВерсийТК.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ВТ_ДляВерсийТК.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ВТ_ДляВерсийТК.ДатаКон КАК ДатаКон,
		|	ВТ_ДляВерсийТК.ДатаНач КАК ДатаНач,
		|	ВТ_ДляВерсийТК.ID КАК ID,
		|	торо_ВерсииТехКарт.ТехКарта КАК ТехКарта
		|ПОМЕСТИТЬ ВТ_ВерсииТехКарт
		|ИЗ
		|	ВТ_ДляВерсийТК КАК ВТ_ДляВерсийТК
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		|		ПО ВТ_ДляВерсийТК.НормативныйРемонт = торо_ВерсииТехКарт.ИдентификаторТехКарты
		|			И ВТ_ДляВерсийТК.Период = торо_ВерсииТехКарт.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВерсииТехКарт.ОбъектРемонтныхРабот КАК ОбъектРемонта,
		|	ВТ_ВерсииТехКарт.ВидРемонтныхРабот КАК ВидРемонта,
		|	ВТ_ВерсииТехКарт.ДатаКон КАК ДатаОкончанияРемонта,
		|	ВТ_ВерсииТехКарт.ДатаНач КАК ДатаНачалаРемонта,
		|	ВТ_ВерсииТехКарт.ID КАК ID,
		|	торо_ТехКартыСписокОпераций.Операция КАК РемонтнаяРабота,
		|	торо_ТехКартыСписокОпераций.ID КАК ID_Операции
		|ИЗ
		|	ВТ_ВерсииТехКарт КАК ВТ_ВерсииТехКарт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
		|		ПО ВТ_ВерсииТехКарт.ТехКарта = торо_ТехКартыСписокОпераций.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(торо_ТехКартыСписокОпераций.Операция) = ТИП(Справочник.торо_ТехнологическиеОперации)
		|				ТОГДА торо_ТехКартыСписокОпераций.Операция.РаботаПовышеннойОпасности = ИСТИНА
		|			ИНАЧЕ торо_ТехКартыСписокОпераций.Ссылка.СодержитРаботыПовышеннойОпасности = ИСТИНА
		|		КОНЕЦ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				НС = ТабТехКарт.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Выборка);						
			Иначе
				НС = ВТ_ОпасныеОперации.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Выборка);
			КонецЕсли;
		КонецЦикла;
		
		КЦ = 0;
		Пока Истина Цикл
			ЗапросОпераций = Новый Запрос;
			ЗапросОпераций.Параметры.Вставить("Таблица", ТабТехКарт);
			ЗапросОпераций.Текст = "ВЫБРАТЬ
			|	Таблица.ОбъектРемонта КАК ОбъектРемонта,
			|	Таблица.ВидРемонта КАК ВидРемонта,
			|	Таблица.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
			|	Таблица.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
			|	Таблица.ID КАК ID,
			|	Таблица.РемонтнаяРабота КАК ТехКарта
			|ПОМЕСТИТЬ Таблица
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таблица.ТехКарта КАК ТехКарта,
			|	МАКСИМУМ(торо_ВерсииТехКарт.Период) КАК Период,
			|	Таблица.ID КАК ID
			|ПОМЕСТИТЬ ВТ_Даты
			|ИЗ
			|	Таблица КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
			|		ПО Таблица.ТехКарта = торо_ВерсииТехКарт.ИдентификаторТехКарты
			|ГДЕ
			|	торо_ВерсииТехКарт.Период <= Таблица.ДатаНачалаРемонта
			|
			|СГРУППИРОВАТЬ ПО
			|	Таблица.ТехКарта,
			|	Таблица.ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таблица.ОбъектРемонта КАК ОбъектРемонта,
			|	Таблица.ВидРемонта КАК ВидРемонта,
			|	Таблица.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
			|	Таблица.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
			|	Таблица.ID КАК ID,
			|	Таблица.ТехКарта КАК ТехКарта,
			|	ВТ_Даты.Период КАК Период
			|ПОМЕСТИТЬ ВТ_ДляВерсийТК
			|ИЗ
			|	Таблица КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Даты КАК ВТ_Даты
			|		ПО Таблица.ТехКарта = ВТ_Даты.ТехКарта
			|			И Таблица.ID = ВТ_Даты.ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДляВерсийТК.ОбъектРемонта КАК ОбъектРемонта,
			|	ВТ_ДляВерсийТК.ВидРемонта КАК ВидРемонта,
			|	ВТ_ДляВерсийТК.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
			|	ВТ_ДляВерсийТК.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
			|	ВТ_ДляВерсийТК.ID КАК ID,
			|	торо_ВерсииТехКарт.ТехКарта КАК ТехКарта
			|ПОМЕСТИТЬ ВТ_ВерсииТехКарт
			|ИЗ
			|	ВТ_ДляВерсийТК КАК ВТ_ДляВерсийТК
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
			|		ПО ВТ_ДляВерсийТК.ТехКарта = торо_ВерсииТехКарт.ИдентификаторТехКарты
			|			И ВТ_ДляВерсийТК.Период = торо_ВерсииТехКарт.Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ВерсииТехКарт.ОбъектРемонта КАК ОбъектРемонта,
			|	ВТ_ВерсииТехКарт.ВидРемонта КАК ВидРемонта,
			|	ВТ_ВерсииТехКарт.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
			|	ВТ_ВерсииТехКарт.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
			|	ВТ_ВерсииТехКарт.ID КАК ID,
			|	торо_ТехКартыСписокОпераций.Операция КАК РемонтнаяРабота,
			|	торо_ТехнологическиеОперации.РаботаПовышеннойОпасности КАК РаботаПовышеннойОпасности,
			|	торо_ТехКартыСписокОпераций.ID КАК ID_Операции
			|ИЗ
			|	ВТ_ВерсииТехКарт КАК ВТ_ВерсииТехКарт
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
			|			ПО торо_ТехКартыСписокОпераций.Операция = торо_ТехнологическиеОперации.Ссылка
			|		ПО ВТ_ВерсииТехКарт.ТехКарта = торо_ТехКартыСписокОпераций.Ссылка
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(торо_ТехКартыСписокОпераций.Операция) = ТИП(Справочник.торо_ТехнологическиеОперации)
			|				ТОГДА торо_ТехКартыСписокОпераций.Операция.РаботаПовышеннойОпасности = ИСТИНА
			|			ИНАЧЕ торо_ТехКартыСписокОпераций.Ссылка.СодержитРаботыПовышеннойОпасности = ИСТИНА
			|		КОНЕЦ";
			Выборка = ЗапросОпераций.Выполнить().Выбрать();
			ТабТехКарт.Очистить();
			Пока Выборка.Следующий() Цикл
				Если ТипЗнч(Выборка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					НС = ТабТехКарт.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Выборка);						
				Иначе
					НС = ВТ_ОпасныеОперации.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Выборка);
				КонецЕсли;
			КонецЦикла;
			
			Если ТабТехКарт.Количество() = 0 или КЦ > 100 Тогда
				Прервать;
			КонецЕсли;
			
			КЦ = КЦ + 1;
			
		КонецЦикла;
		
		Запрос.Параметры.Вставить("ВТ_ОпасныеОперации", ВТ_ОпасныеОперации);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВТ_ОпасныеОперации.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ОпасныеОперации.ВидРемонта КАК ВидРемонта,
		|	ВТ_ОпасныеОперации.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		|	ВТ_ОпасныеОперации.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	ВТ_ОпасныеОперации.ID КАК ID,
		|	ВТ_ОпасныеОперации.РемонтнаяРабота КАК РемонтнаяРабота,
		|	ВТ_ОпасныеОперации.ID_Операции КАК ID_Операции
		|ПОМЕСТИТЬ ВТ_ОпасныеОперации
		|ИЗ
		|	&ВТ_ОпасныеОперации КАК ВТ_ОпасныеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка КАК Ссылка,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.НомерСтроки КАК НомерСтроки,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID КАК ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Количество КАК Количество,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Картинка КАК Картинка
		|ПОМЕСТИТЬ ВТ_Наряды
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.Проведен = ИСТИНА
		|	И торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID В
		|			(ВЫБРАТЬ
		|				ВТ_ОпасныеОперации.ID КАК ID
		|			ИЗ
		|				ВТ_ОпасныеОперации КАК ВТ_ОпасныеОперации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОпасныеОперации.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ОпасныеОперации.ВидРемонта КАК ВидРемонта,
		|	ВТ_ОпасныеОперации.РемонтнаяРабота КАК РемонтнаяРабота,
		|	ВТ_ОпасныеОперации.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		|	ВТ_ОпасныеОперации.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	ВТ_ОпасныеОперации.ID КАК ID,
		|	ИСТИНА КАК ВводитьНаряд,
		|	ВТ_ОпасныеОперации.ID_Операции КАК ID_Операции
		|ИЗ
		|	ВТ_ОпасныеОперации КАК ВТ_ОпасныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наряды КАК ВТ_Наряды
		|		ПО ВТ_ОпасныеОперации.РемонтнаяРабота = ВТ_Наряды.РемонтнаяРабота
		|			И ВТ_ОпасныеОперации.ID = ВТ_Наряды.РемонтыОборудования_ID
		|			И ВТ_ОпасныеОперации.ID_Операции = ВТ_Наряды.ID
		|ГДЕ
		|	ВТ_Наряды.Ссылка ЕСТЬ NULL";
		
		Если РемонтыОборудования_ID <> "" Тогда
			Запрос.Текст = Запрос.Текст + " И ВТ_ОпасныеОперации.ID = &РемонтыОборудования_ID";
			Запрос.УстановитьПараметр("РемонтыОборудования_ID", РемонтыОборудования_ID);
		КонецЕсли;		
		
	КонецЕсли; 	
	
	Запрос.УстановитьПараметр("Ссылка", ДокОснование);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

// Процедура обновляет реквизит формы "ВидРемонтаВОиВД" табличной части "РемонтыОборудования" для дальнейшейго запрета изменения
// реквизита "ВидРемонтныхРабот" условным оформлением. 
//
Процедура РемонтыОборудованияОбновитьВидРемонтаВОиВД(Ссылка, РемонтыОборудования) Экспорт
	
	ИдентификаторыРемонтов = РемонтыОборудования.Выгрузить(, "ID");
	Если ИдентификаторыРемонтов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК ID,
	|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта
	|ПОМЕСТИТЬ ВТ_РемонтыВОиВД
	|ИЗ
	|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|ГДЕ
	|	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&ID)
	|	И (торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот
	|			ИЛИ торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки ССЫЛКА Документ.торо_ВыявленныеДефекты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВсеДокументыПоРемонтам.IDРемонта КАК ID,
	|	ВТ_РемонтыВОиВД.ВидРемонта КАК ВидРемонта
	|ПОМЕСТИТЬ ВТ_РемонтыВОиВДСВведеннымиДокументами
	|ИЗ
	|	РегистрСведений.торо_ВсеДокументыПоРемонтам КАК торо_ВсеДокументыПоРемонтам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РемонтыВОиВД КАК ВТ_РемонтыВОиВД
	|		ПО торо_ВсеДокументыПоРемонтам.IDРемонта = ВТ_РемонтыВОиВД.ID
	|ГДЕ
	|	НЕ торо_ВсеДокументыПоРемонтам.Регистратор = &Ссылка
	|	И (торо_ВсеДокументыПоРемонтам.Регистратор ССЫЛКА Документ.торо_АктОВыполненииЭтапаРабот
	|			ИЛИ торо_ВсеДокументыПоРемонтам.Регистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт
	|			ИЛИ торо_ВсеДокументыПоРемонтам.Регистратор ССЫЛКА Документ.торо_НарядНаВыполнениеРемонтныхРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтыВОиВД.ID КАК ID,
	|	ЕСТЬNULL(ВТ_РемонтыВОиВДСВведеннымиДокументами.ВидРемонта, ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)) КАК ВидРемонта
	|ИЗ
	|	ВТ_РемонтыВОиВД КАК ВТ_РемонтыВОиВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РемонтыВОиВДСВведеннымиДокументами КАК ВТ_РемонтыВОиВДСВведеннымиДокументами
	|		ПО ВТ_РемонтыВОиВД.ID = ВТ_РемонтыВОиВДСВведеннымиДокументами.ID";
	
	Запрос.УстановитьПараметр("ID", ИдентификаторыРемонтов.ВыгрузитьКолонку("ID"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РемонтыОборудованияОтбор = РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Если РемонтыОборудованияОтбор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		РемонтыОборудованияСтрока = РемонтыОборудованияОтбор[0];
		РемонтыОборудованияСтрока.ВидРемонтаВОиВД = Выборка.ВидРемонта;
		РемонтыОборудованияСтрока.ДокументНачалаЦепочкиВОИлиВД = Истина;
		
		Если ЗначениеЗаполнено(РемонтыОборудованияСтрока.ВидРемонтаВОиВД) Тогда
			РемонтыОборудованияСтрока.ВидРемонтныхРабот = РемонтыОборудованияСтрока.ВидРемонтаВОиВД;	
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеРегистровПоРемонтам

Функция ДокументОбщихДанныхПоРемонтам(Источник)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ВыявленныеДефекты")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ПланГрафикРемонта")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ГрафикРегламентныхМероприятийТОиР")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ЗакрытиеЗаявокИРемонтов")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_АктПриемкиОборудования")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") Тогда
	    Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ДокументФактическихДатРемонтов(Источник)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") Тогда
	    Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ДокументПлановыхИсполнителейРемонтов(Источник)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ВыявленныеДефекты")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ПланГрафикРемонта")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ГрафикРегламентныхМероприятийТОиР")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ЗакрытиеЗаявокИРемонтов") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ДокументИтоговойПлановойПотребностиВКвалификацияхИИнструментах(Источник)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ПроектныеЗатратыНаРемонты")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ЗакрытиеЗаявокИРемонтов") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ДокументИтоговойФактическойПотребностиВКвалификациях(Источник)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

#Область ОбновлениеПлановыхИсполнителейРемонтов

Процедура ОбновитьПлановыхИсполнителейРемонтовОбработчикСобытий(Источник, Проведение = Истина)
	СтруктураДанныхРемонтов = торо_ПланированиеРемонтов.ПолучитьМассивIDРемонтов(Источник);
	Если СтруктураДанныхРемонтов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивID = СтруктураДанныхРемонтов.МассивID;
	МассивУдаленныхID = Источник.ДополнительныеСвойства.МассивУдаленныхID;
	МассивВсехID = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивID);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивУдаленныхID);
	
	УстановитьУправляемыеБлокировкиНаРегистрПлановыхИсполнителейРемонтов(СтруктураДанныхРемонтов.ТаблицаРемонтов);
	
	Если Не Проведение Тогда
		// Если отменяем проведение документа начала цепочки, то просто удаляем всех исполнителей его ремонтов,
		// т.к. в этом случае выборки исполнителей будут пустые, и записи сами не удалятся.
		УдалитьПлановыхИсполнителейУдаленныхРемонтовДокументаНачалаЦепочки(Источник);
		
		// Т.к. для документа начала цепочки все исполнители уже удалены выше, то нет смысла в пустую выполнять
		// попытку обновления исполнителей дальше, т.к. ни одного документа с исполнителями по ремонту уже нет.
		Если ДокументЯвляетсяНачаломЦепочки(Источник, Истина) Тогда
		    УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецЕсли;
		
		Для каждого НаборЗаписей Из Источник.Движения Цикл
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Источник.Движения.Записать();
	
	ОбновитьПлановыхИсполнителейРемонтов(МассивВсехID, Источник.Ссылка);
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура УстановитьУправляемыеБлокировкиНаРегистрПлановыхИсполнителейРемонтов(ТаблицаРемонтов)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ПлановыеИсполнителиРемонтов");
	ЭлементБлокировки.ИсточникДанных = ТаблицаРемонтов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "ID");
	Блокировка.Заблокировать();
КонецПроцедуры

Процедура УдалитьПлановыхИсполнителейУдаленныхРемонтовДокументаНачалаЦепочки(Документ)
	
	Если Не ДокументЯвляетсяНачаломЦепочки(Документ, Истина) Тогда
	    Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.торо_ПлановыеИсполнителиРемонтов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументНачалаЦепочки.Установить(Документ.Ссылка);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОбновитьПлановыхИсполнителейРемонтов(МассивID, ИсточникСсылка)
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		СоздатьВТПлановыхИсполнителейРемонтовПоГрафикамРМ(Запрос.МенеджерВременныхТаблиц, МассивID);
	Иначе
		Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")
			Или ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			СоздатьВТПлановыхИсполнителейРемонтовПоВОиВД(Запрос.МенеджерВременныхТаблиц, МассивID);
		ИначеЕсли ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
			СоздатьВТПлановыхИсполнителейРемонтовПоППР(Запрос.МенеджерВременныхТаблиц, МассивID);
		Иначе
			// торо_ЗаявкаНаРемонт или торо_ЗакрытиеЗаявокИРемонтов
			СоздатьВТПлановыхИсполнителейРемонтовПоВОВДиППР(Запрос.МенеджерВременныхТаблиц, МассивID);
		КонецЕсли;
				
		СоздатьВременнуюТаблицуПлановыхИсполнителейПоЗаявкам(Запрос.МенеджерВременныхТаблиц);

		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_ИсполнителиДокументовОснований.IDРемонта КАК IDРемонта,
		               |	ЕСТЬNULL(ВТ_ИсполнителиПоЗаявкам.Исполнитель, ВТ_ИсполнителиДокументовОснований.Исполнитель) КАК Исполнитель,
		               |	ЕСТЬNULL(ВТ_ИсполнителиПоЗаявкам.УточнениеИсполнителя, ВТ_ИсполнителиДокументовОснований.УточнениеИсполнителя) КАК УточнениеИсполнителя,
		               |	ЕСТЬNULL(ВТ_ИсполнителиПоЗаявкам.СпособВыполнения, ВТ_ИсполнителиДокументовОснований.СпособВыполнения) КАК СпособВыполнения,
		               |	ВТ_ИсполнителиДокументовОснований.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки
		               |ПОМЕСТИТЬ ВТ_ТекущиеИсполнители
		               |ИЗ
		               |	ВТ_ИсполнителиДокументовОснований КАК ВТ_ИсполнителиДокументовОснований
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсполнителиПоЗаявкам КАК ВТ_ИсполнителиПоЗаявкам
		               |		ПО ВТ_ИсполнителиДокументовОснований.IDРемонта = ВТ_ИсполнителиПоЗаявкам.IDРемонта
		               |ГДЕ
		               |	НЕ ЕСТЬNULL(ВТ_ИсполнителиПоЗаявкам.Исполнитель, ВТ_ИсполнителиДокументовОснований.Исполнитель) = НЕОПРЕДЕЛЕНО
		               |	И НЕ ЕСТЬNULL(ВТ_ИсполнителиПоЗаявкам.Исполнитель, ВТ_ИсполнителиДокументовОснований.Исполнитель) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		               |	И НЕ ЕСТЬNULL(ВТ_ИсполнителиПоЗаявкам.Исполнитель, ВТ_ИсполнителиДокументовОснований.Исполнитель) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	IDРемонта,
		               |	Исполнитель,
		               |	УточнениеИсполнителя,
		               |	СпособВыполнения";

		Запрос.Выполнить();
	КонецЕсли;
	
	СоздатьВременнуюТаблицуПлановыхИсполнителейПоРемонтам(Запрос.МенеджерВременныхТаблиц, МассивID);
	СформироватьИтоговыйТекстЗапросаПлановыхИсполнителей(Запрос, ИсточникСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗаписатьИзмененныхПлановыхИсполнителейРемонтов(Выборка, ИсточникСсылка);
КонецПроцедуры

Процедура СоздатьВТПлановыхИсполнителейРемонтовПоВОиВД(МенеджерВТ, МассивID)
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID КАК IDРемонта,
	               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Исполнитель КАК Исполнитель,
	               |	ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка) КАК УточнениеИсполнителя,
	               |	&Хозспособ КАК СпособВыполнения,
	               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка КАК ДокументНачалаЦепочки
	               |ПОМЕСТИТЬ ВТ_ИсполнителиДокументовОснований
	               |ИЗ
	               |	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК торо_ВнешнееОснованиеДляРаботОбследованноеОборудование
	               |ГДЕ
	               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка.Проведен
	               |	И торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID В(&МассивID)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ВыявленныеДефектыСписокДефектов.ID,
	               |	торо_ВыявленныеДефектыСписокДефектов.ПодразделениеИсполнитель,
	               |	ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка),
	               |	&Хозспособ,
	               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка
	               |ИЗ
	               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	               |ГДЕ
	               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка.Проведен
	               |	И торо_ВыявленныеДефектыСписокДефектов.ID В(&МассивID)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Хозспособ", Перечисления.СпособыСтроительства.Хозспособ);
	Запрос.УстановитьПараметр("Подрядный", Перечисления.СпособыСтроительства.Подрядный);
	Запрос.Выполнить();
КонецПроцедуры

Процедура СоздатьВТПлановыхИсполнителейРемонтовПоППР(МенеджерВТ, МассивID)
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК IDРемонта,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Исполнитель КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения = &Хозспособ
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	КОНЕЦ КАК УточнениеИсполнителя,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор КАК ДокументНачалаЦепочки
	               |ПОМЕСТИТЬ ВТ_ИсполнителиППР
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, ID В (&МассивID)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИсполнителиППР.IDРемонта КАК IDРемонта,
	               |	ВТ_ИсполнителиППР.Исполнитель КАК Исполнитель,
	               |	ВТ_ИсполнителиППР.УточнениеИсполнителя КАК УточнениеИсполнителя,
	               |	ВТ_ИсполнителиППР.СпособВыполнения КАК СпособВыполнения,
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки, ВТ_ИсполнителиППР.ДокументНачалаЦепочки) КАК ДокументНачалаЦепочки
	               |ПОМЕСТИТЬ ВТ_ИсполнителиДокументовОснований
	               |ИЗ
	               |	ВТ_ИсполнителиППР КАК ВТ_ИсполнителиППР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_ИсполнителиППР.IDРемонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ИсполнителиППР";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Хозспособ", Перечисления.СпособыСтроительства.Хозспособ);
	Запрос.УстановитьПараметр("Подрядный", Перечисления.СпособыСтроительства.Подрядный);
	Запрос.Выполнить();
КонецПроцедуры

Процедура СоздатьВТПлановыхИсполнителейРемонтовПоВОВДиППР(МенеджерВТ, МассивID)
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК IDРемонта,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Исполнитель КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения = &Хозспособ
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	КОНЕЦ КАК УточнениеИсполнителя,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор КАК ДокументНачалаЦепочки
	               |ПОМЕСТИТЬ ВТ_ИсполнителиППР
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, ID В (&МассивID)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID КАК IDРемонта,
	               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Исполнитель КАК Исполнитель,
	               |	ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка) КАК УточнениеИсполнителя,
	               |	&Хозспособ КАК СпособВыполнения,
	               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка КАК ДокументНачалаЦепочки
	               |ПОМЕСТИТЬ ВТ_ИсполнителиДокументовОснований
	               |ИЗ
	               |	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК торо_ВнешнееОснованиеДляРаботОбследованноеОборудование
	               |ГДЕ
	               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка.Проведен
	               |	И торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID В(&МассивID)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ВыявленныеДефектыСписокДефектов.ID,
	               |	торо_ВыявленныеДефектыСписокДефектов.ПодразделениеИсполнитель,
	               |	ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка),
	               |	&Хозспособ,
	               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка
	               |ИЗ
	               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	               |ГДЕ
	               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка.Проведен
	               |	И торо_ВыявленныеДефектыСписокДефектов.ID В(&МассивID)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ИсполнителиППР.IDРемонта,
	               |	ВТ_ИсполнителиППР.Исполнитель,
	               |	ВТ_ИсполнителиППР.УточнениеИсполнителя,
	               |	ВТ_ИсполнителиППР.СпособВыполнения,
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки, ВТ_ИсполнителиППР.ДокументНачалаЦепочки)
	               |ИЗ
	               |	ВТ_ИсполнителиППР КАК ВТ_ИсполнителиППР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_ИсполнителиППР.IDРемонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ИсполнителиППР";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Хозспособ", Перечисления.СпособыСтроительства.Хозспособ);
	Запрос.УстановитьПараметр("Подрядный", Перечисления.СпособыСтроительства.Подрядный);
	Запрос.Выполнить();
КонецПроцедуры

Процедура СоздатьВТПлановыхИсполнителейРемонтовПоГрафикамРМ(МенеджерВТ, МассивID)
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПлановыеМероприятияСрезПоследних.ID КАК IDРемонта,
	               |	торо_ПлановыеМероприятияСрезПоследних.Исполнитель КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА торо_ПлановыеМероприятияСрезПоследних.СпособВыполнения = &Хозспособ
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	КОНЕЦ КАК УточнениеИсполнителя,
	               |	торо_ПлановыеМероприятияСрезПоследних.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ПлановыеМероприятияСрезПоследних.Регистратор КАК ДокументНачалаЦепочки
	               |ПОМЕСТИТЬ ВТ_ИсполнителиППР
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних(, ID В (&МассивID)) КАК торо_ПлановыеМероприятияСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИсполнителиППР.IDРемонта КАК IDРемонта,
	               |	ВТ_ИсполнителиППР.Исполнитель КАК Исполнитель,
	               |	ВТ_ИсполнителиППР.УточнениеИсполнителя КАК УточнениеИсполнителя,
	               |	ВТ_ИсполнителиППР.СпособВыполнения КАК СпособВыполнения,
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки, ВТ_ИсполнителиППР.ДокументНачалаЦепочки) КАК ДокументНачалаЦепочки
	               |ПОМЕСТИТЬ ВТ_ТекущиеИсполнители
	               |ИЗ
	               |	ВТ_ИсполнителиППР КАК ВТ_ИсполнителиППР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_ИсполнителиППР.IDРемонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	Исполнитель,
	               |	УточнениеИсполнителя,
	               |	СпособВыполнения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ИсполнителиППР";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Хозспособ", Перечисления.СпособыСтроительства.Хозспособ);
	Запрос.УстановитьПараметр("Подрядный", Перечисления.СпособыСтроительства.Подрядный);
	Запрос.Выполнить();
КонецПроцедуры

Процедура СоздатьВременнуюТаблицуПлановыхИсполнителейПоЗаявкам(МенеджерВТ)
	// Принимает на вход менеджер временных таблиц, в котором должна уже быть создана временная таблица
	// ВТ_ИсполнителиДокументовОснований с колонкой IDРемонта для выполнения отбора.
	// Добавляет временную таблицу ВТ_ИсполнителиПоЗаявкам.
	//
	// Заявки приоритетнее ВД/ВО/ППР. Поэтому если есть заявки, то исполнители тянутся из них. Даже если введена
	// одна заявка, в которой не указаны исполнители ремонтов, то это значит, что по ремонту нет исполнителей.
	// Для обработки это ситуации соединяем все неотмененные заявки левым соединением с РС исполнителей ремонтов
	// в заявках. Левым, т.к. именно это позволит получить одного пустого исполнителя, если все-таки заявки есть,
	// но ни в одной не указаны исполнители. А в методе ОбновитьПлановыхИсполнителейРемонтов исполнители из документов
	// начала цепочки соединяются левым соединением с ВТ_ИсполнителиПоЗаявкам. И т.к. для случаев, когда есть заявка,
	// но нет исполнителей, соединение не даст null (будет неопределенно), то вышеописанная ситуация обработается корректно,
	// т.е. исполнителей не будет (там присутствует проверка, что исполнитель должен быть заполнен), если вообще заявок нет,
	// то подтянутся исполнители из документа начала цепочки.

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК ДокументЗаявка
	               |ПОМЕСТИТЬ ВТ_Заявки
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
	               |			,
	               |			IDРемонта В
	               |				(ВЫБРАТЬ
	               |					ВТ_ИсполнителиДокументовОснований.IDРемонта КАК IDРемонта
	               |				ИЗ
	               |					ВТ_ИсполнителиДокументовОснований КАК ВТ_ИсполнителиДокументовОснований)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	ДокументЗаявка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Заявки.IDРемонта КАК IDРемонта,
	               |	ЕСТЬNULL(торо_ИсполнителиВЗаявкахПоРемонтам.Исполнитель, НЕОПРЕДЕЛЕНО) КАК Исполнитель,
	               |	ЕСТЬNULL(торо_ИсполнителиВЗаявкахПоРемонтам.УточнениеИсполнителя, НЕОПРЕДЕЛЕНО) КАК УточнениеИсполнителя,
	               |	ВЫБОР
	               |		КОГДА торо_ИсполнителиВЗаявкахПоРемонтам.Исполнитель ЕСТЬ NULL
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		КОГДА торо_ИсполнителиВЗаявкахПоРемонтам.Исполнитель ССЫЛКА Справочник.Контрагенты
	               |			ТОГДА &Подрядный
	               |		ИНАЧЕ &Хозспособ
	               |	КОНЕЦ КАК СпособВыполнения
	               |ПОМЕСТИТЬ ВТ_ИсполнителиПоЗаявкам
	               |ИЗ
	               |	ВТ_Заявки КАК ВТ_Заявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИсполнителиВЗаявкахПоРемонтам КАК торо_ИсполнителиВЗаявкахПоРемонтам
	               |		ПО ВТ_Заявки.IDРемонта = торо_ИсполнителиВЗаявкахПоРемонтам.IDРемонта
	               |			И ВТ_Заявки.ДокументЗаявка = торо_ИсполнителиВЗаявкахПоРемонтам.ДокументЗаявка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Заявки";
	
	Запрос.УстановитьПараметр("Хозспособ", Перечисления.СпособыСтроительства.Хозспособ);
	Запрос.УстановитьПараметр("Подрядный", Перечисления.СпособыСтроительства.Подрядный);
	
	Запрос.Выполнить();
КонецПроцедуры

Процедура СоздатьВременнуюТаблицуПлановыхИсполнителейПоРемонтам(МенеджерВТ, МассивID)
	// Принимает на вход менеджер временных таблиц, в котором должна уже быть создана временная таблица
	// ВТ_ТекущиеИсполнители с колонкой IDРемонта для выполнения отбора.
	// Добавляет временную таблицу ВТ_ПлановыеИсполнителиРемонтов.

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПлановыеИсполнителиРемонтов.IDРемонта КАК IDРемонта,
	               |	торо_ПлановыеИсполнителиРемонтов.Исполнитель КАК Исполнитель,
	               |	торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя КАК УточнениеИсполнителя,
	               |	торо_ПлановыеИсполнителиРемонтов.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ПлановыеИсполнителиРемонтов.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки
	               |ПОМЕСТИТЬ ВТ_ПлановыеИсполнителиРемонтов
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
	               |ГДЕ
	               |	торо_ПлановыеИсполнителиРемонтов.IDРемонта В(&МассивID)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	Исполнитель,
	               |	УточнениеИсполнителя,
	               |	СпособВыполнения";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	Запрос.Выполнить();
КонецПроцедуры

Процедура СформироватьИтоговыйТекстЗапросаПлановыхИсполнителей(Запрос, Документ)
	// Принимает на вход запрос с менеджером временных таблиц, в котором должны уже быть созданы временные
	// таблицы ВТ_ТекущиеИсполнители и ВТ_ПлановыеИсполнителиРемонтов с колонками IDРемонта, Исполнитель
	// УточнениеИсполнителя, СпособВыполнения для выполнения отбора.
	//
	// Изначально получаем данные и по удаленным ремонтам, и по текущим. В итоговом запросе делаем полное
	// соединение текущих данных регистра и рассчитанных, и если рассчитанных данных нет, то значит ремонт
	// удален из докумета начала цепочки и мы удаляем его записи.
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.

	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ТекущиеИсполнители.IDРемонта, ВТ_ПлановыеИсполнителиРемонтов.IDРемонта) КАК IDРемонта,
	               |	ЕСТЬNULL(ВТ_ТекущиеИсполнители.Исполнитель, ВТ_ПлановыеИсполнителиРемонтов.Исполнитель) КАК Исполнитель,
	               |	ЕСТЬNULL(ВТ_ТекущиеИсполнители.УточнениеИсполнителя, ВТ_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя) КАК УточнениеИсполнителя,
	               |	ЕСТЬNULL(ВТ_ТекущиеИсполнители.СпособВыполнения, ВТ_ПлановыеИсполнителиРемонтов.СпособВыполнения) КАК СпособВыполнения,
	               |	ЕСТЬNULL(ВТ_ТекущиеИсполнители.ДокументНачалаЦепочки, ВТ_ПлановыеИсполнителиРемонтов.ДокументНачалаЦепочки) КАК ДокументНачалаЦепочки,
	               |	ВЫБОР
	               |		КОГДА ВТ_ТекущиеИсполнители.IDРемонта ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Удалить
	               |ИЗ
	               |	ВТ_ТекущиеИсполнители КАК ВТ_ТекущиеИсполнители
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПлановыеИсполнителиРемонтов КАК ВТ_ПлановыеИсполнителиРемонтов
	               |		ПО ВТ_ТекущиеИсполнители.IDРемонта = ВТ_ПлановыеИсполнителиРемонтов.IDРемонта
	               |			И ВТ_ТекущиеИсполнители.Исполнитель = ВТ_ПлановыеИсполнителиРемонтов.Исполнитель
	               |			И ВТ_ТекущиеИсполнители.УточнениеИсполнителя = ВТ_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя
	               |			И ВТ_ТекущиеИсполнители.СпособВыполнения = ВТ_ПлановыеИсполнителиРемонтов.СпособВыполнения
	               |ГДЕ
	               |	(ВТ_ТекущиеИсполнители.IDРемонта ЕСТЬ NULL
	               |			ИЛИ ВТ_ПлановыеИсполнителиРемонтов.IDРемонта ЕСТЬ NULL
	               |			ИЛИ НЕ(ВТ_ТекущиеИсполнители.IDРемонта = ВТ_ПлановыеИсполнителиРемонтов.IDРемонта
	               |					И ВТ_ТекущиеИсполнители.Исполнитель = ВТ_ПлановыеИсполнителиРемонтов.Исполнитель
	               |					И ВТ_ТекущиеИсполнители.УточнениеИсполнителя = ВТ_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя
	               |					И ВТ_ТекущиеИсполнители.СпособВыполнения = ВТ_ПлановыеИсполнителиРемонтов.СпособВыполнения)
	               |			ИЛИ ЕСТЬNULL(ВТ_ТекущиеИсполнители.ДокументНачалаЦепочки, ВТ_ПлановыеИсполнителиРемонтов.ДокументНачалаЦепочки) = &Документ)
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки,
	               |	IDРемонта";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
КонецПроцедуры

Процедура ЗаписатьИзмененныхПлановыхИсполнителейРемонтов(ВыборкаПоДокументам, Документ)
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ВыборкаРемонтов = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Оптимизация для документов ППР и Графиков РМ. Записываем одним набором все записи 
		// по этому документу источнику. Так значительно быстрее, чем записывать по 1 строке.
		Если ВыборкаПоДокументам.ДокументНачалаЦепочки = Документ Тогда
			
			НаборЗаписей = РегистрыСведений.торо_ПлановыеИсполнителиРемонтов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументНачалаЦепочки.Установить(Документ);

			Пока ВыборкаРемонтов.Следующий() Цикл
				ВыборкаИсполнителей = ВыборкаРемонтов.Выбрать();
				Пока ВыборкаИсполнителей.Следующий() Цикл
					Если НЕ ВыборкаИсполнителей.Удалить Тогда
						Запись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, ВыборкаИсполнителей);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
		Иначе
			
			Пока ВыборкаРемонтов.Следующий() Цикл
				ВыборкаИсполнителей = ВыборкаРемонтов.Выбрать();
				Пока ВыборкаИсполнителей.Следующий() Цикл
					Запись = РегистрыСведений.торо_ПлановыеИсполнителиРемонтов.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, ВыборкаИсполнителей);
					Если ВыборкаИсполнителей.Удалить Тогда
						Запись.Удалить();
					Иначе
						Запись.Записать(Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновитьСвернутыеФактическиеДатыРемонтов

Процедура ОбновитьСвернутыеФактическиеДатыРемонтовОбработчикСобытий(Источник, Проведение = Истина)
	СтруктураДанныхРемонтов = торо_ПланированиеРемонтов.ПолучитьМассивIDРемонтов(Источник);
	Если СтруктураДанныхРемонтов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивID = СтруктураДанныхРемонтов.МассивID;
	МассивУдаленныхID = Источник.ДополнительныеСвойства.МассивУдаленныхID;
	МассивВсехID = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивID);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивУдаленныхID);
	
	УстановитьУправляемыеБлокировкиНаРегистрСвертнутыхФактическихДатРемонтов(СтруктураДанныхРемонтов.ТаблицаРемонтов);

	// Т.к. при перепроведении документа, в котором удален ремонт, или при отмене проведения документа
	// начала цепочки удалить записи по документу начала цепочки не получится, т.к. наряды и акты не являются
	// таковыми, и в регистре нет нужного измерения/реквизита. Поэтому при обновлении данных регистра получаются
	// данные по всем ремонтам (и удаленным, и текущим) и если для каких-то ремонтов фактические даты не
	// рассчитались - удаляем их.
	Если Не Проведение Тогда
		Для каждого НаборЗаписей Из Источник.Движения Цикл
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Источник.Движения.Записать();
	
	ОбновитьСвернутыеФактическиеДатыРемонтов(МассивВсехID, МассивУдаленныхID, Источник.Ссылка);
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура УстановитьУправляемыеБлокировкиНаРегистрСвертнутыхФактическихДатРемонтов(ТаблицаРемонтов)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов");
	ЭлементБлокировки.ИсточникДанных = ТаблицаРемонтов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "ID");
	Блокировка.Заблокировать();
КонецПроцедуры

Процедура ОбновитьСвернутыеФактическиеДатыРемонтов(МассивВсехID, МассивУдаленныхID, ИсточникСсылка)
	// Изначально получаем данные и по удаленным ремонтам, и по текущим. В итоговом запросе делаем полное
	// соединение текущих данных регистра и рассчитанных, и если рассчитанных данных нет, то значит по ремонту
	// больше нет нарядов и актов и мы удаляем записи.
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СвернутыеФактическиеДатыРемонтов.IDРемонта КАК IDРемонта,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ДанныеРегистра
	               |ИЗ
	               |	РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов КАК торо_СвернутыеФактическиеДатыРемонтов
	               |ГДЕ
	               |	торо_СвернутыеФактическиеДатыРемонтов.IDРемонта В(&МассивВсехID)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_НарядыПоРемонтам.IDРемонта КАК IDРемонта,
	               |	МИНИМУМ(торо_НарядыПоРемонтам.ДатаНачала) КАК ДатаНачала,
	               |	МАКСИМУМ(торо_НарядыПоРемонтам.ДатаОкончания) КАК ДатаОкончания,
	               |	2 КАК Приоритет,
	               |	МАКСИМУМ(торо_НарядыПоРемонтам.ОбъектРемонта) КАК ОбъектРемонта,
	               |	МАКСИМУМ(торо_НарядыПоРемонтам.ВидРемонта) КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ФактическиеДатыПоНарядамИАктам
	               |ИЗ
	               |	РегистрСведений.торо_НарядыПоРемонтам КАК торо_НарядыПоРемонтам
	               |ГДЕ
	               |	торо_НарядыПоРемонтам.IDРемонта В(&МассивВсехID)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_НарядыПоРемонтам.IDРемонта
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_АктыПоРемонтам.IDРемонта,
	               |	МИНИМУМ(торо_АктыПоРемонтам.ДатаНачала),
	               |	МАКСИМУМ(торо_АктыПоРемонтам.ДатаОкончания),
	               |	1,
	               |	МАКСИМУМ(торо_АктыПоРемонтам.ОбъектРемонта),
	               |	МАКСИМУМ(торо_АктыПоРемонтам.ВидРемонта)
	               |ИЗ
	               |	РегистрСведений.торо_АктыПоРемонтам КАК торо_АктыПоРемонтам
	               |ГДЕ
	               |	торо_АктыПоРемонтам.IDРемонта В(&МассивВсехID)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктыПоРемонтам.IDРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ФактическиеДатыПоНарядамИАктам.IDРемонта КАК IDРемонта,
	               |	МИНИМУМ(ВТ_ФактическиеДатыПоНарядамИАктам.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_ПриоритетыДатРемонтов
	               |ИЗ
	               |	ВТ_ФактическиеДатыПоНарядамИАктам КАК ВТ_ФактическиеДатыПоНарядамИАктам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ФактическиеДатыПоНарядамИАктам.IDРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ФактическиеДатыПоНарядамИАктам.IDРемонта, ВТ_ДанныеРегистра.IDРемонта) КАК IDРемонта,
	               |	ЕСТЬNULL(ВТ_ФактическиеДатыПоНарядамИАктам.ДатаНачала, ВТ_ДанныеРегистра.ДатаНачала) КАК ДатаНачала,
	               |	ЕСТЬNULL(ВТ_ФактическиеДатыПоНарядамИАктам.ДатаОкончания, ВТ_ДанныеРегистра.ДатаОкончания) КАК ДатаОкончания,
	               |	ЕСТЬNULL(ВТ_ФактическиеДатыПоНарядамИАктам.ОбъектРемонта, ВТ_ДанныеРегистра.ОбъектРемонта) КАК ОбъектРемонта,
	               |	ЕСТЬNULL(ВТ_ФактическиеДатыПоНарядамИАктам.ВидРемонта, ВТ_ДанныеРегистра.ВидРемонта) КАК ВидРемонта,
				   |	ВЫБОР
	               |		КОГДА ВТ_ФактическиеДатыПоНарядамИАктам.IDРемонта ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Удалить
	               |ИЗ
	               |	ВТ_ФактическиеДатыПоНарядамИАктам КАК ВТ_ФактическиеДатыПоНарядамИАктам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыДатРемонтов КАК ВТ_ПриоритетыДатРемонтов
	               |		ПО ВТ_ФактическиеДатыПоНарядамИАктам.IDРемонта = ВТ_ПриоритетыДатРемонтов.IDРемонта
	               |			И ВТ_ФактическиеДатыПоНарядамИАктам.Приоритет = ВТ_ПриоритетыДатРемонтов.Приоритет
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
	               |		ПО ВТ_ФактическиеДатыПоНарядамИАктам.IDРемонта = ВТ_ДанныеРегистра.IDРемонта
	               |ГДЕ
	               |	(ВТ_ФактическиеДатыПоНарядамИАктам.IDРемонта ЕСТЬ NULL
	               |			ИЛИ ВТ_ДанныеРегистра.IDРемонта ЕСТЬ NULL
	               |			ИЛИ НЕ(ВТ_ФактическиеДатыПоНарядамИАктам.ДатаНачала = ВТ_ДанныеРегистра.ДатаНачала
	               |				И ВТ_ФактическиеДатыПоНарядамИАктам.ДатаОкончания = ВТ_ДанныеРегистра.ДатаОкончания))";
	
	Запрос.УстановитьПараметр("МассивВсехID", МассивВсехID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаРемонтов = РезультатЗапроса.Выбрать();
	Пока ВыборкаРемонтов.Следующий() Цикл
	    НаборЗаписей = РегистрыСведений.торо_СвернутыеФактическиеДатыРемонтов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.IDРемонта.Установить(ВыборкаРемонтов.IDРемонта);
		
		Если Не ВыборкаРемонтов.Удалить Тогда
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаРемонтов);
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеОбщихДанныхПоРемонтам

Процедура ОбновитьОбщиеДанныеПоРемонтамОбработчикСобытий(Источник, Проведение = Истина)
	СтруктураДанныхРемонтов = торо_ПланированиеРемонтов.ПолучитьМассивIDРемонтов(Источник);
	Если СтруктураДанныхРемонтов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивID = СтруктураДанныхРемонтов.МассивID;
	МассивУдаленныхID = Источник.ДополнительныеСвойства.МассивУдаленныхID;
	МассивВсехID = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивID);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивУдаленныхID);
	
	УстановитьУправляемыеБлокировкиНаРегистрОбщихДанныхПоРемонтам(СтруктураДанныхРемонтов.ТаблицаРемонтов);
	
	Если Не Проведение Тогда
		// Если отменяем проведение документа начала цепочки, то просто удаляем все записи его ремонтов,
		// чтобы они не висели в регистре.
		УдалитьОбщиеДанныеУдаленныхРемонтовДокументаНачалаЦепочки(Источник.Ссылка);
		
		// Т.к. для документа начала цепочки записи уже удалены выше, то нет смысла в пустую выполнять
		// попытку обновления дат дальше, т.к. ни одного документа по ремонту уже нет.
		Если ДокументЯвляетсяНачаломЦепочки(Источник, Истина) Тогда
		    УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецЕсли;
		
		Для каждого НаборЗаписей Из Источник.Движения Цикл
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Источник.Движения.Записать();
	
	ОбновитьОбщиеДанныеПоРемонтам(МассивВсехID, Источник.Ссылка, Проведение);
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура УстановитьУправляемыеБлокировкиНаРегистрОбщихДанныхПоРемонтам(ТаблицаРемонтов)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ОбщиеДанныеПоРемонтам");
	ЭлементБлокировки.ИсточникДанных = ТаблицаРемонтов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "ID");
	Блокировка.Заблокировать();
КонецПроцедуры

Процедура УдалитьОбщиеДанныеУдаленныхРемонтовДокументаНачалаЦепочки(Документ)
	Если Не ДокументЯвляетсяНачаломЦепочки(Документ, Истина) Тогда
	    Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.торо_ОбщиеДанныеПоРемонтам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументНачалаЦепочки.Установить(Документ);
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура ОбновитьОбщиеДанныеПоРемонтам(МассивID, Документ, Проведение)
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеВО(Документ, МассивID);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеВД(Документ, МассивID);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеППР(Документ, МассивID);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеГрафикомРМ(Документ, МассивID);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеЗаявкойНаРемонт(Документ, МассивID);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеНарядами(Документ, МассивID);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
	    Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеАктами(Документ, МассивID);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_АктПриемкиОборудования") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеАктомПриемки(Документ, МассивID, Проведение);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
	    ВычислитьОбщиеДанныеПоРемонтуИзменяемыеЗакрытиемЗаявокИРемонтов(Документ, МассивID);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьОбщиеДанныеПоРемонту(ВыборкаПоДокументам, Документ)
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ВыборкаДеталей = ВыборкаПоДокументам.Выбрать();
		
		// Оптимизация для документов ППР и Графиков РМ. Записываем одним набором все записи 
		// по этому документу источнику. Так значительно быстрее, чем записывать по 1 строке.
		Если ВыборкаПоДокументам.ДокументНачалаЦепочки = Документ Тогда
			НаборЗаписей = РегистрыСведений.торо_ОбщиеДанныеПоРемонтам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументНачалаЦепочки.Установить(Документ);
			
			Пока ВыборкаДеталей.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДеталей);
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
		Иначе
			Пока ВыборкаДеталей.Следующий() Цикл
				Запись = РегистрыСведений.торо_ОбщиеДанныеПоРемонтам.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДеталей);
				Запись.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВычислениеОбщихДанныхИзменяемыхКонкретнымДокументом

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеВО(Документ, МассивID)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВнешниеОснованияДляРабот.ID КАК IDРемонта,
	               |	торо_ВнешниеОснованияДляРабот.Регистратор КАК ДокументНачалаЦепочки,
	               |	ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот) КАК ВидДокументаНачалаЦепочки,
	               |	торо_ВнешниеОснованияДляРабот.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ВнешниеОснованияДляРабот.Подразделение КАК ПодразделениеИнициатор,
	               |	торо_ВнешниеОснованияДляРабот.Организация КАК Организация
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	               |ГДЕ
	               |	торо_ВнешниеОснованияДляРабот.ID В(&МассивID)
	               |	И торо_ВнешниеОснованияДляРабот.Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
	
КонецПроцедуры

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеВД(Документ, МассивID)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВыявленныеДефекты.Регистратор КАК ДокументНачалаЦепочки,
	               |	ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект) КАК ВидДокументаНачалаЦепочки,
	               |	торо_ВыявленныеДефекты.ОтказавшийЭлемент КАК ОбъектРемонта,
	               |	торо_ВыявленныеДефекты.ID КАК IDРемонта,
	               |	торо_ВыявленныеДефекты.Организация КАК Организация,
	               |	торо_ВыявленныеДефекты.Подразделение КАК ПодразделениеИнициатор
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	               |ГДЕ
	               |	торо_ВыявленныеДефекты.ID В(&МассивID)
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
	
КонецПроцедуры

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеППР(Документ, МассивID)
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор КАК ДокументНачалаЦепочки,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонта,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК IDРемонта,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Организация КАК Организация,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Подразделение КАК ПодразделениеИнициатор,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен КАК Отменен,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен КАК Замещен
	               |ПОМЕСТИТЬ ВТ_ДанныеПоРемонтам
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	               |			,
	               |			ID В (&МассивID)
	               |				И Регистратор ССЫЛКА Документ.торо_ПланГрафикРемонта) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки, ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)) КАК ВидДокументаНачалаЦепочки,
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки, ВТ_ДанныеПоРемонтам.ДокументНачалаЦепочки) КАК ДокументНачалаЦепочки,
	               |	ВТ_ДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	               |	ВТ_ДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	ВТ_ДанныеПоРемонтам.Организация КАК Организация,
	               |	ВТ_ДанныеПоРемонтам.ПодразделениеИнициатор КАК ПодразделениеИнициатор,
	               |	ВТ_ДанныеПоРемонтам.Отменен КАК Отменен,
	               |	ВТ_ДанныеПоРемонтам.Замещен КАК Замещен
	               |ИЗ
	               |	ВТ_ДанныеПоРемонтам КАК ВТ_ДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_ДанныеПоРемонтам.IDРемонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |ГДЕ
	               |	(торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта ЕСТЬ NULL
	               |			ИЛИ НЕ(ВТ_ДанныеПоРемонтам.ОбъектРемонта = торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта
	               |					И ВТ_ДанныеПоРемонтам.ВидРемонта = торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |					И ВТ_ДанныеПоРемонтам.ПодразделениеИнициатор = торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор
	               |					И ВТ_ДанныеПоРемонтам.Организация = торо_ОбщиеДанныеПоРемонтам.Организация
	               |					И ВТ_ДанныеПоРемонтам.Отменен = торо_ОбщиеДанныеПоРемонтам.Отменен
	               |					И ВТ_ДанныеПоРемонтам.Замещен = торо_ОбщиеДанныеПоРемонтам.Замещен)
	               |			ИЛИ ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки, ВТ_ДанныеПоРемонтам.ДокументНачалаЦепочки) = &Документ)
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
КонецПроцедуры

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеГрафикомРМ(Документ, МассивID)
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПлановыеМероприятияСрезПоследних.Регистратор КАК ДокументНачалаЦепочки,
	               |	торо_ПлановыеМероприятияСрезПоследних.СписокОбъектов КАК ОбъектРемонта,
	               |	торо_ПлановыеМероприятияСрезПоследних.ВидМероприятия КАК ВидРемонта,
	               |	торо_ПлановыеМероприятияСрезПоследних.ID КАК IDРемонта,
	               |	торо_ПлановыеМероприятияСрезПоследних.Организация КАК Организация,
	               |	торо_ПлановыеМероприятияСрезПоследних.Подразделение КАК ПодразделениеИнициатор,
	               |	торо_ПлановыеМероприятияСрезПоследних.Отменен КАК Отменен
	               |ПОМЕСТИТЬ ВТ_ДанныеПоРемонтам
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних(, ID В (&МассивID)) КАК торо_ПлановыеМероприятияСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки, ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)) КАК ВидДокументаНачалаЦепочки,
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки, ВТ_ДанныеПоРемонтам.ДокументНачалаЦепочки) КАК ДокументНачалаЦепочки,
	               |	ВТ_ДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	               |	ВТ_ДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	ВТ_ДанныеПоРемонтам.Организация КАК Организация,
	               |	ВТ_ДанныеПоРемонтам.ПодразделениеИнициатор КАК ПодразделениеИнициатор,
	               |	ВТ_ДанныеПоРемонтам.Отменен КАК Отменен
	               |ИЗ
	               |	ВТ_ДанныеПоРемонтам КАК ВТ_ДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_ДанныеПоРемонтам.IDРемонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |ГДЕ
	               |	(торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта ЕСТЬ NULL
	               |			ИЛИ НЕ(ВТ_ДанныеПоРемонтам.ОбъектРемонта = торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта
	               |					И ВТ_ДанныеПоРемонтам.ВидРемонта = торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |					И ВТ_ДанныеПоРемонтам.ПодразделениеИнициатор = торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор
	               |					И ВТ_ДанныеПоРемонтам.Организация = торо_ОбщиеДанныеПоРемонтам.Организация
	               |					И ВТ_ДанныеПоРемонтам.Отменен = торо_ОбщиеДанныеПоРемонтам.Отменен)
	               |			ИЛИ ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки, ВТ_ДанныеПоРемонтам.ДокументНачалаЦепочки) = &Документ)
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
КонецПроцедуры

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеЗаявкойНаРемонт(Документ, МассивID)
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ЗаявкиПоРемонтам
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, IDРемонта В (&МассивID)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОбщиеДанныеПоРемонтам.Организация КАК Организация,
	               |	торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор КАК ПодразделениеИнициатор,
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд КАК ЕстьНаряд,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАкт КАК ЕстьАкт,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАктПриемки КАК ЕстьАктПриемки,
	               |	торо_ОбщиеДанныеПоРемонтам.Отменен КАК Отменен,
	               |	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВЫБОР
	               |		КОГДА ВТ_ЗаявкиПоРемонтам.IDРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьЗаявка,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_ЗаявкиПоРемонтам.ВидРемонта ЕСТЬ NULL
	               |			ТОГДА ВТ_ЗаявкиПоРемонтам.ВидРемонта
	               |		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |			ТОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |	КОНЕЦ КАК ВидРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен,
	               |	торо_ОбщиеДанныеПоРемонтам.Замещен КАК Замещен
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаявкиПоРемонтам КАК ВТ_ЗаявкиПоРемонтам
	               |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = ВТ_ЗаявкиПоРемонтам.IDРемонта
	               |ГДЕ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&МассивID)
	               |	И НЕ(ВЫБОР
	               |					КОГДА ВТ_ЗаявкиПоРемонтам.IDРемонта ЕСТЬ NULL
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	               |				И ВЫБОР
	               |					КОГДА НЕ ВТ_ЗаявкиПоРемонтам.ВидРемонта ЕСТЬ NULL
	               |						ТОГДА ВТ_ЗаявкиПоРемонтам.ВидРемонта
	               |					КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |						ТОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ВидРемонта)
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
КонецПроцедуры

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеНарядами(Документ, МассивID)
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_НарядыПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_НарядыПоРемонтам.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_НарядыПоРемонтам
	               |ИЗ
	               |	РегистрСведений.торо_НарядыПоРемонтам КАК торо_НарядыПоРемонтам
	               |ГДЕ
	               |	торо_НарядыПоРемонтам.IDРемонта В(&МассивID)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОбщиеДанныеПоРемонтам.Организация КАК Организация,
	               |	торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор КАК ПодразделениеИнициатор,
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАкт КАК ЕстьАкт,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАктПриемки КАК ЕстьАктПриемки,
	               |	торо_ОбщиеДанныеПоРемонтам.Отменен КАК Отменен,
	               |	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВЫБОР
	               |		КОГДА ВТ_НарядыПоРемонтам.IDРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьНаряд,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_НарядыПоРемонтам.ВидРемонта ЕСТЬ NULL
	               |			ТОГДА ВТ_НарядыПоРемонтам.ВидРемонта
	               |		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	               |			ТОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |	КОНЕЦ КАК ВидРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен,
	               |	торо_ОбщиеДанныеПоРемонтам.Замещен КАК Замещен
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НарядыПоРемонтам КАК ВТ_НарядыПоРемонтам
	               |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = ВТ_НарядыПоРемонтам.IDРемонта
	               |ГДЕ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&МассивID)
	               |	И НЕ(ВЫБОР
	               |					КОГДА ВТ_НарядыПоРемонтам.IDРемонта ЕСТЬ NULL
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |				И ВЫБОР
	               |					КОГДА НЕ ВТ_НарядыПоРемонтам.ВидРемонта ЕСТЬ NULL
	               |						ТОГДА ВТ_НарядыПоРемонтам.ВидРемонта
	               |					КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	               |						ТОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ВидРемонта)
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
КонецПроцедуры

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеАктами(Документ, МассивID)
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_АктыПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_АктыПоРемонтам.ВидРемонта КАК ВидРемонта,
	               |	МАКСИМУМ(торо_АктыПоРемонтам.Завершен) КАК Завершен
	               |ПОМЕСТИТЬ ВТ_АктыПоРемонтам
	               |ИЗ
	               |	РегистрСведений.торо_АктыПоРемонтам КАК торо_АктыПоРемонтам
	               |ГДЕ
	               |	торо_АктыПоРемонтам.IDРемонта В(&МассивID)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктыПоРемонтам.IDРемонта,
	               |	торо_АктыПоРемонтам.ВидРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОбщиеДанныеПоРемонтам.Организация КАК Организация,
	               |	торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор КАК ПодразделениеИнициатор,
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд КАК ЕстьНаряд,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАктПриемки КАК ЕстьАктПриемки,
	               |	торо_ОбщиеДанныеПоРемонтам.Отменен КАК Отменен,
	               |	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	ЕСТЬNULL(ВТ_АктыПоРемонтам.Завершен, ЛОЖЬ) КАК Завершен,
	               |	ВЫБОР
	               |		КОГДА ВТ_АктыПоРемонтам.IDРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьАкт,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_АктыПоРемонтам.ВидРемонта ЕСТЬ NULL
	               |			ТОГДА ВТ_АктыПоРемонтам.ВидРемонта
	               |		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	               |			ТОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |	КОНЕЦ КАК ВидРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.Замещен КАК Замещен
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктыПоРемонтам КАК ВТ_АктыПоРемонтам
	               |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = ВТ_АктыПоРемонтам.IDРемонта
	               |ГДЕ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&МассивID)
	               |	И НЕ(ВЫБОР
	               |					КОГДА ВТ_АктыПоРемонтам.IDРемонта ЕСТЬ NULL
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |				И ЕСТЬNULL(ВТ_АктыПоРемонтам.Завершен, ЛОЖЬ) = торо_ОбщиеДанныеПоРемонтам.Завершен
	               |				И ВЫБОР
	               |					КОГДА НЕ ВТ_АктыПоРемонтам.ВидРемонта ЕСТЬ NULL
	               |						ТОГДА ВТ_АктыПоРемонтам.ВидРемонта
	               |					КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	               |						ТОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ВидРемонта)
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
КонецПроцедуры

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеАктомПриемки(Документ, МассивID, Проведение)
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ОбщиеДанныеПоРемонтам.Организация КАК Организация,
	               |	торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор КАК ПодразделениеИнициатор,
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд КАК ЕстьНаряд,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАкт КАК ЕстьАкт,
	               |	торо_ОбщиеДанныеПоРемонтам.Отменен КАК Отменен,
	               |	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	               |	ВЫБОР
	               |		КОГДА торо_АктПриемкиОборудованияРемонтыОборудования.ID ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		КОГДА торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка = &Документ
	               |			ТОГДА &Проведение
	               |		ИНАЧЕ торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка.Проведен
	               |	КОНЕЦ КАК ЕстьАктПриемки,
	               |	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен,
	               |	торо_ОбщиеДанныеПоРемонтам.Замещен КАК Замещен
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
	               |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_АктПриемкиОборудованияРемонтыОборудования.ID
	               |ГДЕ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&МассивID)
	               |	И НЕ ВЫБОР
	               |				КОГДА торо_АктПриемкиОборудованияРемонтыОборудования.ID ЕСТЬ NULL
	               |					ТОГДА ЛОЖЬ
	               |				КОГДА торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка = &Документ
	               |					ТОГДА &Проведение
	               |				ИНАЧЕ торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка.Проведен
	               |			КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ЕстьАктПриемки
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Проведение", Проведение);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
КонецПроцедуры

Процедура ВычислитьОбщиеДанныеПоРемонтуИзменяемыеЗакрытиемЗаявокИРемонтов(Документ, МассивID)
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ЗаявкиПоРемонтам
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, IDРемонта В (&МассивID)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ОтмененныеРемонтыСрезПоследних.ID КАК IDРемонта
	               |ПОМЕСТИТЬ ВТ_ОтмененныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ОтмененныеРемонты.СрезПоследних(, ID В (&МассивID)) КАК торо_ОтмененныеРемонтыСрезПоследних
	               |ГДЕ
	               |	торо_ОтмененныеРемонтыСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	торо_ОтмененныеРемонтыСрезПоследних.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОбщиеДанныеПоРемонтам.Организация КАК Организация,
	               |	торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор КАК ПодразделениеИнициатор,
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд КАК ЕстьНаряд,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАкт КАК ЕстьАкт,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАктПриемки КАК ЕстьАктПриемки,
	               |	ВЫБОР
	               |		КОГДА ВТ_ОтмененныеРемонты.IDРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Отменен,
	               |	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВЫБОР
	               |		КОГДА ВТ_ЗаявкиПоРемонтам.IDРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьЗаявка,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_ЗаявкиПоРемонтам.ВидРемонта ЕСТЬ NULL
	               |			ТОГДА ВТ_ЗаявкиПоРемонтам.ВидРемонта
	               |		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |			ТОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |	КОНЕЦ КАК ВидРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен,
	               |	торо_ОбщиеДанныеПоРемонтам.Замещен КАК Замещен
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаявкиПоРемонтам КАК ВТ_ЗаявкиПоРемонтам
	               |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = ВТ_ЗаявкиПоРемонтам.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтмененныеРемонты КАК ВТ_ОтмененныеРемонты
	               |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = ВТ_ОтмененныеРемонты.IDРемонта
	               |ГДЕ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&МассивID)
	               |	И НЕ(ВЫБОР
	               |					КОГДА ВТ_ОтмененныеРемонты.IDРемонта ЕСТЬ NULL
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.Отменен
	               |				И ВЫБОР
	               |					КОГДА ВТ_ЗаявкиПоРемонтам.IDРемонта ЕСТЬ NULL
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	               |				И ВЫБОР
	               |					КОГДА НЕ ВТ_ЗаявкиПоРемонтам.ВидРемонта ЕСТЬ NULL
	               |						ТОГДА ВТ_ЗаявкиПоРемонтам.ВидРемонта
	               |					КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |						ТОГДА торо_ОбщиеДанныеПоРемонтам.ВидРемонта
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |				КОНЕЦ = торо_ОбщиеДанныеПоРемонтам.ВидРемонта)
	               |ИТОГИ ПО
	               |	ДокументНачалаЦепочки";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьОбщиеДанныеПоРемонту(ВыборкаДанных, Документ);
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область ОбновитьИтоговыеПотребности

#Область ОбщиеМетодыОбновленияИтоговойПотребности

Процедура ПостроитьДеревоПотребности(ДеревоПотребности, ВыборкаОбъектовПотребности, Родитель_ID, ВыборкаОбщая) Экспорт
	
	// Для построения дерева нужны и ТК, но в ТЧ документов данные только по ТО. Поэтому в запросе левым
	// соединением получаются запис ТЧ, чтобы были в результате и ТК. ТК будут с пустым объектом
	// потребности. Поэтому для текущего уровня сначала добавляем все ТО (т.е. ищем в выборке конкретный
	// объект потребности), а потом ищем все ТК текущего уровня (с пустым объектом потребности)
	
	// Ищем потребности по всем ТО текущего уровня
	СтруктураОтбора = Новый Структура("IDРемонта, Документ, ОбъектПотребности, Родитель_ID", ВыборкаОбъектовПотребности.IDРемонта, ВыборкаОбъектовПотребности.Документ, ВыборкаОбъектовПотребности.ОбъектПотребности, Родитель_ID);
	Пока ВыборкаОбщая.НайтиСледующий(СтруктураОтбора) Цикл
		НоваяСтрока = ДеревоПотребности.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОбщая);
	КонецЦикла;
	
	ВыборкаОбщая.Сбросить();
	
	// Ищем все ТК текущего уровня
	СтруктураОтбора.ОбъектПотребности = Неопределено;
	Пока ВыборкаОбщая.НайтиСледующий(СтруктураОтбора) Цикл
		НоваяСтрока = ДеревоПотребности.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОбщая);
	КонецЦикла;
	
	ВыборкаОбщая.Сбросить();
	
	// Для ТК строим следующий уровень
	Для каждого СтрокаДерева Из ДеревоПотребности.Строки Цикл
		Если ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ПостроитьДеревоПотребности(СтрокаДерева, ВыборкаОбъектовПотребности, СтрокаДерева.ID, ВыборкаОбщая);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция РассчитатьПотребностьПоДереву(ДеревоПотребности) Экспорт
	
	// Выполняет рекурсивный обход дерева потребностей и рассчитывает итоговую потребность по документу
	
	Потребность = 0;
	
	// Для текущей ветки дерева хранит количество по каждой параллельной операции (в том числе и с пустым ID)
	СоответствиеПотребности = Новый Соответствие();
	
	Для каждого СтрокаДерева Из ДеревоПотребности.Строки Цикл
		Если ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Потребность = РассчитатьПотребностьПоДереву(СтрокаДерева);
		Иначе
			Потребность = СтрокаДерева.Количество;
		КонецЕсли;
		
		Если СоответствиеПотребности[СтрокаДерева.ID_ПараллельнойОперации] = Неопределено Тогда
			СоответствиеПотребности.Вставить(СтрокаДерева.ID_ПараллельнойОперации, 0);
		КонецЕсли;
		
		// Если операция параллельная, то количество суммируется
		Если ЗначениеЗаполнено(СтрокаДерева.ID_ПараллельнойОперации) Тогда
			СоответствиеПотребности[СтрокаДерева.ID_ПараллельнойОперации] = СоответствиеПотребности[СтрокаДерева.ID_ПараллельнойОперации] + Потребность;
		// Если последовательная, то берется максимум	
		Иначе
			СоответствиеПотребности[СтрокаДерева.ID_ПараллельнойОперации] = Макс(СоответствиеПотребности[СтрокаДерева.ID_ПараллельнойОперации], Потребность);
		КонецЕсли;
	КонецЦикла;
	
	Потребность = 0;
	
	// Для текущей ветки рассчитывается итоговая потребность - суммируется количество по каждой параллельной операции.
	Для каждого КлючИЗначение Из СоответствиеПотребности Цикл
		Потребность = Макс(Потребность, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Потребность;

КонецФункции

Функция ОбновитьПотребностьПоРемонтам(МассивВсехID, ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета, ОбновлятьДанныеВРегистре = Истина) Экспорт
	
	// Записываем все потребности в ТЗ, потом используем ее в запросе
	ТЗИтоговойПотребности = Новый ТаблицаЗначений();
	ТЗИтоговойПотребности.Колонки.Добавить("IDРемонта", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТЗИтоговойПотребности.Колонки.Добавить(ПараметрыРасчета.ОбъектПотребности, Новый ОписаниеТипов(ПараметрыРасчета.ТипОбъектаПотребности));
	ТЗИтоговойПотребности.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

	// Рассчитываем потребность по каждому объекту потребности ремонта последовательно для всех актуальных докумнетов,
	// после чего суммируем их
	Пока ВыборкаРемонтов.Следующий() Цикл
		СоответствиеПотребности = Новый Соответствие();

		ВыборкаДокументов = ВыборкаРемонтов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументов.Следующий() Цикл
			ВыборкаОбъектовПотребности = ВыборкаДокументов.Выбрать();
			
			Пока ВыборкаОбъектовПотребности.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаОбъектовПотребности.ОбъектПотребности) Тогда
					Продолжить;
				КонецЕсли;
				
				ДеревоПотребности = Новый ДеревоЗначений();
				ДеревоПотребности.Колонки.Добавить("ID_ПараллельнойОперации");
				ДеревоПотребности.Колонки.Добавить("ID");
				ДеревоПотребности.Колонки.Добавить("Потребность");
				ДеревоПотребности.Колонки.Добавить("Документ");
				ДеревоПотребности.Колонки.Добавить("ОбъектПотребности");
				ДеревоПотребности.Колонки.Добавить("IDРемонта");
				ДеревоПотребности.Колонки.Добавить("РемонтнаяРабота");
				ДеревоПотребности.Колонки.Добавить("Количество");
				
				// Сначала строим дерево потребностей по операциям
				ПостроитьДеревоПотребности(ДеревоПотребности, ВыборкаОбъектовПотребности, "", ВыборкаОбщая);
				
				// Обходим дерево потребностей и рассчитываем количество
				Потребность = РассчитатьПотребностьПоДереву(ДеревоПотребности);
				
				// Если в соответствии нет данных по текущему объекту потребности, то это первый обработанный документ,
				// просто добавляем количество. Если данные уже есть, значит не первый, суммируем количества
				Если СоответствиеПотребности[ВыборкаОбъектовПотребности.ОбъектПотребности] = Неопределено Тогда
					СоответствиеПотребности.Вставить(ВыборкаОбъектовПотребности.ОбъектПотребности, Потребность);
				Иначе
					СоответствиеПотребности[ВыборкаОбъектовПотребности.ОбъектПотребности] = СоответствиеПотребности[ВыборкаОбъектовПотребности.ОбъектПотребности] + Потребность;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
		
		// Заносим в ТЗ все потребности текущего ремонта
		Для каждого КлючИЗначение Из СоответствиеПотребности Цикл
			НоваяСтрока = ТЗИтоговойПотребности.Добавить();
			НоваяСтрока.IDРемонта = ВыборкаРемонтов.IDРемонта;
			НоваяСтрока[ПараметрыРасчета.ОбъектПотребности] = КлючИЗначение.Ключ;
			НоваяСтрока.Количество = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЦикла;
	
	// Этот метод используется в форме элемента справочника торо_ИдентификаторыТехКарт и в ПФ нарядов и заявок
	// (при получении данных из нормативов) для расчета потребности на лету. В этом случае никакие данные
	// обновлять в РС не нужно, просто возвращаем потребность.
	Если Не ОбновлятьДанныеВРегистре Тогда
		Возврат ТЗИтоговойПотребности;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрПотребности.IDРемонта КАК IDРемонта,
	               |	РегистрПотребности.ОбъектПотребности КАК ОбъектПотребности,
	               |	РегистрПотребности.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТ_ДанныеРегистра
	               |ИЗ
	               |	РСПотребности КАК РегистрПотребности
	               |ГДЕ
	               |	РегистрПотребности.IDРемонта В(&МассивВсехID)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	ОбъектПотребности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗИтоговойПотребности.IDРемонта КАК IDРемонта,
	               |	ТЗИтоговойПотребности.ОбъектПотребности КАК ОбъектПотребности,
	               |	ТЗИтоговойПотребности.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТ_ИтоговаяПотребность
	               |ИЗ
	               |	&ТЗИтоговойПотребности КАК ТЗИтоговойПотребности
				   |
				   |ГДЕ
	               |	НЕ ТЗИтоговойПотребности.Количество = 0
				   |
				   |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	ОбъектПотребности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ИтоговаяПотребность.IDРемонта, ВТ_ДанныеРегистра.IDРемонта) КАК IDРемонта,
	               |	ЕСТЬNULL(ВТ_ИтоговаяПотребность.ОбъектПотребности, ВТ_ДанныеРегистра.ОбъектПотребности) КАК ОбъектПотребности,
	               |	ЕСТЬNULL(ВТ_ИтоговаяПотребность.Количество, ВТ_ДанныеРегистра.Количество) КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ВТ_ИтоговаяПотребность.IDРемонта ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Удалить
	               |ИЗ
	               |	ВТ_ИтоговаяПотребность КАК ВТ_ИтоговаяПотребность
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
	               |		ПО ВТ_ИтоговаяПотребность.IDРемонта = ВТ_ДанныеРегистра.IDРемонта
	               |			И ВТ_ИтоговаяПотребность.ОбъектПотребности = ВТ_ДанныеРегистра.ОбъектПотребности
	               |ГДЕ
	               |	(ВТ_ИтоговаяПотребность.IDРемонта ЕСТЬ NULL
	               |			ИЛИ ВТ_ДанныеРегистра.IDРемонта ЕСТЬ NULL
	               |			ИЛИ НЕ ВТ_ИтоговаяПотребность.Количество = ВТ_ДанныеРегистра.Количество)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОбъектПотребности", ПараметрыРасчета.ОбъектПотребности);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РСПотребности", ПараметрыРасчета.РСПотребности);
	
	Запрос.УстановитьПараметр("МассивВсехID", МассивВсехID);
	Запрос.УстановитьПараметр("ТЗИтоговойПотребности", ТЗИтоговойПотребности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПотребностей = РезультатЗапроса.Выбрать();
	Пока ВыборкаПотребностей.Следующий() Цикл
	    НаборЗаписей = РегистрыСведений[ПараметрыРасчета.РСПотребностиИмя].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.IDРемонта.Установить(ВыборкаПотребностей.IDРемонта);
		Выполнить("НаборЗаписей.Отбор." + ПараметрыРасчета.ОбъектПотребности + ".Установить(ВыборкаПотребностей." + ПараметрыРасчета.ОбъектПотребности + ")");
		
		Если Не ВыборкаПотребностей.Удалить Тогда
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПотребностей);
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;

КонецФункции

Функция РассчитатьПотребностьПоРемонтуДокумента(IDРемонта, ДокументСсылка, ПараметрыРасчета) Экспорт
	
	// Используется при формировании ПФ нарядов и заявки, при получении потребности по конкретной заявки (в
	// нарядах используется, когда документ-источник ремонта заявка).
	//
	// Получение данных аналогично алгоритму при проведении, но здесь учитывается конкретный документ (+ не берутся
	// проектные затраты)
	
	Если Не ЗначениеЗаполнено(IDРемонта) Или Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Если ПараметрыРасчета.ОбъектПотребности = "Квалификация" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка КАК Документ,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID КАК ID,
		               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
		               |	СУММА(ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество, 0)) КАК Количество
		               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
		               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID
		               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка
		               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = &Ссылка
		               |	И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = &IDРемонта
		               |	И (торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
		               |			ИЛИ НЕ торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
		               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО)
					   |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |";
	ИначеЕсли ПараметрыРасчета.ОбъектПотребности = "Инструмент" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка КАК Документ,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID КАК ID,
		               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтИнструменты.Инструмент, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
		               |	СУММА(ВЫБОР
		               |			КОГДА торо_ЗаявкаНаРемонтИнструменты.Количество ЕСТЬ NULL
		               |				ТОГДА 0
		               |			КОГДА торо_ЗаявкаНаРемонтИнструменты.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		               |				ТОГДА торо_ЗаявкаНаРемонтИнструменты.Количество
		               |			ИНАЧЕ торо_ЗаявкаНаРемонтИнструменты.Количество * торо_ЗаявкаНаРемонтИнструменты.ЕдиницаИзмерения.Коэффициент
		               |		КОНЕЦ) КАК Количество
		               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.Инструменты КАК торо_ЗаявкаНаРемонтИнструменты
		               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтИнструменты.РемонтыОборудования_ID
		               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = торо_ЗаявкаНаРемонтИнструменты.Ссылка
		               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.ID = торо_ЗаявкаНаРемонтИнструменты.ID
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = &Ссылка
		               |	И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = &IDРемонта
		               |	И (торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
		               |			ИЛИ НЕ торо_ЗаявкаНаРемонтИнструменты.Ссылка ЕСТЬ NULL)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
		               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтИнструменты.Инструмент, НЕОПРЕДЕЛЕНО)
					   |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                              |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	                              |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	                              |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
	                              |ИЗ
	                              |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	                              |ГДЕ
	                              |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
	                              |ИТОГИ ПО
	                              |	IDРемонта,
	                              |	Документ
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	                              |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	                              |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	                              |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
	                              |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
	                              |	ВТ_ИтоговыеДанные.ID КАК ID,
	                              |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
	                              |	ВТ_ИтоговыеДанные.Количество КАК Количество
	                              |ИЗ
	                              |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные";
	
	Запрос.УстановитьПараметр("IDРемонта", IDРемонта);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРемонтов = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщая = РезультатЗапроса[2].Выбрать();
	
	Возврат ОбновитьПотребностьПоРемонтам(IDРемонта, ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбновитьИтоговуюПлановуюПотребностьВКвалификациях

Процедура ОбновитьИтоговуюПлановуюПотребностьВКвалификацияхОбработчикСобытий(Источник, Проведение = Истина)
	
	СтруктураДанныхРемонтов = торо_ПланированиеРемонтов.ПолучитьМассивIDРемонтов(Источник);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ПроектныеЗатратыНаРемонты") Тогда
		СтруктураДанныхРемонтов = Новый Структура();
		
		МассивID = Новый Массив();
        МассивID.Добавить(Источник.IDРемонта);
		
		ТаблицаРемонтов = Новый ТаблицаЗначений();
		ТаблицаРемонтов.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));

		СтруктураДанныхРемонтов.Вставить("МассивID", МассивID);
		СтруктураДанныхРемонтов.Вставить("ТаблицаРемонтов", ТаблицаРемонтов);

		НоваяСтрокаТЗ = СтруктураДанныхРемонтов.ТаблицаРемонтов.Добавить();
		НоваяСтрокаТЗ.ID = Источник.IDРемонта;
	Иначе
		МассивID = СтруктураДанныхРемонтов.МассивID;
		МассивУдаленныхID = Источник.ДополнительныеСвойства.МассивУдаленныхID;
		МассивВсехID = Новый Массив();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивID);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивУдаленныхID);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьУправляемыеБлокировкиНаРегистрИтоговыхПлановыхПотребностейВКвалификациях(СтруктураДанныхРемонтов.ТаблицаРемонтов);

	Если Не Проведение Тогда
		Для каждого НаборЗаписей Из Источник.Движения Цикл
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Источник.Движения.Записать();
	
	ОбновитьИтоговуюПлановуюПотребностьВКвалификациях(МассивID);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура УстановитьУправляемыеБлокировкиНаРегистрИтоговыхПлановыхПотребностейВКвалификациях(ТаблицаРемонтов)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ИтоговаяПлановаяПотребностьВКвалификациях");
	ЭлементБлокировки.ИсточникДанных = ТаблицаРемонтов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "ID");
	Блокировка.Заблокировать();

КонецПроцедуры

Процедура ОбновитьИтоговуюПлановуюПотребностьВКвалификациях(МассивВсехID)
	
	// Изначально получаем данные и по удаленным ремонтам, и по текущим. В итоговом запросе делаем полное
	// соединение текущих данных регистра и рассчитанных, и если рассчитанных данных нет, то значит по ремонту
	// больше нет документов или все квалификации удалили, и мы удаляем записи.
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	//
	// Данные берутся из заявок, если заявок нет, то из проектных затрат. Алгоритм расчета потребности основан
	// на построении дерева операций по каждой квалификации. Для этого нужны и ТК, но в ТЧ квалификаций записи
	// только по ТО. Чтобы в результирующем запросе были и ТК, в запросах выполняется ЛЕВОЕ соединение ТЧ РР
	// и квалификаций.
	//
	// В конце один запрос выбирает данные по каждой квалификации ремонта в разрезе документов (потребности квалификации
	// разных документов по ремонту складываются), на основании которых и определяется, что нужно рассчитывать. Второй
	// запрос выбирает просто все данные по трудозатратам, из которых при построении дерева будет браться информация.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК ДокументЗаявка
	               |ПОМЕСТИТЬ ВТ_Заявки
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, IDРемонта В (&МассивВсехID)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	ДокументЗаявка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка.IDРемонта КАК IDРемонта,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка КАК Документ,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID КАК ID,
	               |	ЕСТЬNULL(торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
	               |	ЕСТЬNULL(торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Количество, 0) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	               |ИЗ
	               |	Документ.торо_ПроектныеЗатратыНаРемонты.РемонтныеРаботы КАК торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты КАК торо_ПроектныеЗатратыНаРемонты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	               |			ПО торо_ПроектныеЗатратыНаРемонты.IDРемонта = ВТ_Заявки.IDРемонта
	               |		ПО торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка = торо_ПроектныеЗатратыНаРемонты.Ссылка
	               |			И (торо_ПроектныеЗатратыНаРемонты.IDРемонта В (&МассивВсехID))
	               |			И (НЕ торо_ПроектныеЗатратыНаРемонты.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты.ТрудовыеЗатраты КАК торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты
	               |		ПО торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка = торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Ссылка
	               |			И торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID = торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.ID
	               |ГДЕ
	               |	ВТ_Заявки.IDРемонта ЕСТЬ NULL
	               |	И (торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ИЛИ НЕ торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО),
	               |	СУММА(ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество, 0))
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = ВТ_Заявки.ДокументЗаявка
	               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = ВТ_Заявки.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
	               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка
	               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID
	               |ГДЕ
	               |	(торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ИЛИ НЕ торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |ГДЕ
	               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
	               |ИТОГИ ПО
	               |	IDРемонта,
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
	               |	ВТ_ИтоговыеДанные.ID КАК ID,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
	               |	ВТ_ИтоговыеДанные.Количество КАК Количество
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные";
	
	Запрос.УстановитьПараметр("МассивВсехID", МассивВсехID);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРемонтов = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщая = РезультатЗапроса[3].Выбрать();
	
	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("ОбъектПотребности", "Квалификация");
	ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяПлановаяПотребностьВКвалификациях");
	ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяПлановаяПотребностьВКвалификациях");
	ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.торо_КвалификацииРемонтногоПерсонала");
	
	ОбновитьПотребностьПоРемонтам(МассивВсехID, ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета);

КонецПроцедуры

#КонецОбласти

#Область ОбновитьИтоговуюФактическуюПотребностьВКвалификациях

Процедура ОбновитьИтоговуюФактическуюПотребностьВКвалификацияхОбработчикСобытий(Источник, Проведение = Истина)
	
	СтруктураДанныхРемонтов = торо_ПланированиеРемонтов.ПолучитьМассивIDРемонтов(Источник);
	Если СтруктураДанныхРемонтов = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивID = СтруктураДанныхРемонтов.МассивID;
	МассивУдаленныхID = Источник.ДополнительныеСвойства.МассивУдаленныхID;
	МассивВсехID = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивID);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивУдаленныхID);
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьУправляемыеБлокировкиНаРегистрИтоговыхФактическихПотребностейВКвалификациях(СтруктураДанныхРемонтов.ТаблицаРемонтов);

	Если Не Проведение Тогда
		Для каждого НаборЗаписей Из Источник.Движения Цикл
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Источник.Движения.Записать();
	
	ОбновитьИтоговуюФактическуюПотребностьВКвалификациях(МассивID);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура УстановитьУправляемыеБлокировкиНаРегистрИтоговыхФактическихПотребностейВКвалификациях(ТаблицаРемонтов)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ИтоговаяФактическаяПотребностьВКвалификациях");
	ЭлементБлокировки.ИсточникДанных = ТаблицаРемонтов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "ID");
	Блокировка.Заблокировать();

КонецПроцедуры

Процедура ОбновитьИтоговуюФактическуюПотребностьВКвалификациях(МассивВсехID)
	
	// Изначально получаем данные и по удаленным ремонтам, и по текущим. В итоговом запросе делаем полное
	// соединение текущих данных регистра и рассчитанных, и если рассчитанных данных нет, то значит по ремонту
	// больше нет документов или все квалификации удалили, и мы удаляем записи.
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	//
	// Данные берутся из актов. Алгоритм расчета потребности основан
	// на построении дерева операций по каждой квалификации. Для этого нужны и ТК, но в ТЧ квалификаций записи
	// только по ТО. Чтобы в результирующем запросе были и ТК, в запросах выполняется ЛЕВОЕ соединение ТЧ РР
	// и квалификаций.
	//
	// В конце один запрос выбирает данные по каждой квалификации ремонта в разрезе документов (потребности квалификации
	// разных документов по ремонту складываются), на основании которых и определяется, что нужно рассчитывать. Второй
	// запрос выбирает просто все данные по трудозатратам, из которых при построении дерева будет браться информация.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_АктыПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_АктыПоРемонтам.ДокументАкт КАК ДокументАкт
	               |ПОМЕСТИТЬ ВТ_Ремонты
	               |ИЗ
	               |	РегистрСведений.торо_АктыПоРемонтам КАК торо_АктыПоРемонтам
	               |ГДЕ
	               |	торо_АктыПоРемонтам.IDРемонта В(&МассивВсехID)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
				   |	ДокументАкт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка КАК Документ,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID КАК ID,
	               |	ЕСТЬNULL(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
	               |	КОЛИЧЕСТВО(ЕСТЬNULL(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID, 0)) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	               |ИЗ
	               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
	               |		ПО (торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = (ВЫРАЗИТЬ(ВТ_Ремонты.ДокументАкт КАК Документ.торо_АктОВыполненииЭтапаРабот)))
	               |			И (торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID = ВТ_Ремонты.IDРемонта)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.ТрудовыеЗатраты КАК торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты
	               |		ПО торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID = торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.РемонтыОборудования_ID
	               |			И торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Ссылка
	               |			И (торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID = торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID)
	               |ГДЕ
	               |	(торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ИЛИ НЕ торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID_ПараллельнойОперации,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Родитель_ID,
	               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID,
	               |	ЕСТЬNULL(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID_ПараллельнойОперации,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID,
	               |	ЕСТЬNULL(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО),
	               |	КОЛИЧЕСТВО(ЕСТЬNULL(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID, 0))
	               |ИЗ
	               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
	               |		ПО (торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = (ВЫРАЗИТЬ(ВТ_Ремонты.ДокументАкт КАК Документ.торо_АктОВыполненииРегламентногоМероприятия)))
	               |			И (торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID = ВТ_Ремонты.IDРемонта)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРегламентногоМероприятия.ТрудовыеЗатраты КАК торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты
	               |		ПО торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID = торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.РемонтыОборудования_ID
	               |			И торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка
	               |			И (торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID = торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID)
	               |ГДЕ
	               |	(торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ИЛИ НЕ торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID_ПараллельнойОперации,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID,
	               |	ЕСТЬNULL(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |ГДЕ
	               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
	               |ИТОГИ ПО
	               |	IDРемонта,
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
	               |	ВТ_ИтоговыеДанные.ID КАК ID,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
	               |	ВТ_ИтоговыеДанные.Количество КАК Количество
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные";
	
	Запрос.УстановитьПараметр("МассивВсехID", МассивВсехID);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРемонтов = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщая = РезультатЗапроса[3].Выбрать();
	
	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("ОбъектПотребности", "Квалификация");
	ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяФактическаяПотребностьВКвалификациях");
	ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяФактическаяПотребностьВКвалификациях");
	ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.торо_КвалификацииРемонтногоПерсонала");
	
	ОбновитьПотребностьПоРемонтам(МассивВсехID, ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета);

КонецПроцедуры

#КонецОбласти

#Область ОбновитьИтоговуюПлановуюПотребностьВИнструментах

Процедура ОбновитьИтоговуюПлановуюПотребностьВИнструментахОбработчикСобытий(Источник, Проведение = Истина)
	
	СтруктураДанныхРемонтов = торо_ПланированиеРемонтов.ПолучитьМассивIDРемонтов(Источник);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.торо_ПроектныеЗатратыНаРемонты") Тогда
		СтруктураДанныхРемонтов = Новый Структура();
		
		МассивID = Новый Массив();
        МассивID.Добавить(Источник.IDРемонта);
		
		ТаблицаРемонтов = Новый ТаблицаЗначений();
		ТаблицаРемонтов.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));

		СтруктураДанныхРемонтов.Вставить("МассивID", МассивID);
		СтруктураДанныхРемонтов.Вставить("ТаблицаРемонтов", ТаблицаРемонтов);

		НоваяСтрокаТЗ = СтруктураДанныхРемонтов.ТаблицаРемонтов.Добавить();
		НоваяСтрокаТЗ.ID = Источник.IDРемонта;
	Иначе
		МассивID = СтруктураДанныхРемонтов.МассивID;
		МассивУдаленныхID = Источник.ДополнительныеСвойства.МассивУдаленныхID;
		МассивВсехID = Новый Массив();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивID);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехID, МассивУдаленныхID);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьУправляемыеБлокировкиНаРегистрИтоговыхПлановыхПотребностейВИнструментах(СтруктураДанныхРемонтов.ТаблицаРемонтов);

	Если Не Проведение Тогда
		Для каждого НаборЗаписей Из Источник.Движения Цикл
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Источник.Движения.Записать();
	
	ОбновитьИтоговуюПлановуюПотребностьВИнструментах(МассивID);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура УстановитьУправляемыеБлокировкиНаРегистрИтоговыхПлановыхПотребностейВИнструментах(ТаблицаРемонтов)

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ИтоговаяПлановаяПотребностьВИнструментах");
	ЭлементБлокировки.ИсточникДанных = ТаблицаРемонтов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "ID");
	Блокировка.Заблокировать();

КонецПроцедуры

Процедура ОбновитьИтоговуюПлановуюПотребностьВИнструментах(МассивВсехID)
	
	// Изначально получаем данные и по удаленным ремонтам, и по текущим. В итоговом запросе делаем полное
	// соединение текущих данных регистра и рассчитанных, и если рассчитанных данных нет, то значит по ремонту
	// больше нет документов или все инструменты удалили, и мы удаляем записи.
	// Для минимизации операций записи/удаления по регистру в итоговом запросе происходит сравнение рассчитанных
	// данных с текущими по ключевым полям, которые меняются в регистре. Если такая запись уже существует, то
	// она не удаляется.
	//
	// Данные берутся из актов. Алгоритм расчета потребности основан
	// на построении дерева операций по каждому инструменту. Для этого нужны и ТК, но в ТЧ инструментов записи
	// только по ТО. Чтобы в результирующем запросе были и ТК, в запросах выполняется ЛЕВОЕ соединение ТЧ РР
	// и инструментов.
	//
	// В конце один запрос выбирает данные по каждому инструменту ремонта в разрезе документов (потребности инструментов
	// разных документов по ремонту складываются), на основании которых и определяется, что нужно рассчитывать. Второй
	// запрос выбирает просто все данные по инструментам, из которых при построении дерева будет браться информация.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК ДокументЗаявка
	               |ПОМЕСТИТЬ ВТ_Заявки
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, IDРемонта В (&МассивВсехID)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	ДокументЗаявка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка.IDРемонта КАК IDРемонта,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка КАК Документ,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	               |	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID КАК ID,
	               |	ЕСТЬNULL(торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Инструмент, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
	               |	ЕСТЬNULL(торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Количество, 0) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	               |ИЗ
	               |	Документ.торо_ПроектныеЗатратыНаРемонты.РемонтныеРаботы КАК торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты КАК торо_ПроектныеЗатратыНаРемонты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	               |			ПО торо_ПроектныеЗатратыНаРемонты.IDРемонта = ВТ_Заявки.IDРемонта
	               |		ПО торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка = торо_ПроектныеЗатратыНаРемонты.Ссылка
	               |			И (торо_ПроектныеЗатратыНаРемонты.IDРемонта В (&МассивВсехID))
	               |			И (НЕ торо_ПроектныеЗатратыНаРемонты.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты.ИнструментыИТехника КАК торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника
	               |		ПО торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка = торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Ссылка
	               |			И торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID = торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.ID
	               |ГДЕ
	               |	ВТ_Заявки.IDРемонта ЕСТЬ NULL
	               |	И (торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ИЛИ НЕ торо_ПроектныеЗатратыНаРемонтыИнструментыИТехника.Ссылка ЕСТЬ NULL)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтИнструменты.Инструмент, НЕОПРЕДЕЛЕНО),
	               |	СУММА(ВЫБОР
	               |			КОГДА торо_ЗаявкаНаРемонтИнструменты.Количество ЕСТЬ NULL
	               |				ТОГДА 0
	               |			КОГДА торо_ЗаявкаНаРемонтИнструменты.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |				ТОГДА торо_ЗаявкаНаРемонтИнструменты.Количество
	               |			ИНАЧЕ торо_ЗаявкаНаРемонтИнструменты.Количество * торо_ЗаявкаНаРемонтИнструменты.ЕдиницаИзмерения.Коэффициент
	               |		КОНЕЦ)
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = ВТ_Заявки.ДокументЗаявка
	               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = ВТ_Заявки.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.Инструменты КАК торо_ЗаявкаНаРемонтИнструменты
	               |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтИнструменты.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = торо_ЗаявкаНаРемонтИнструменты.Ссылка
	               |			И торо_ЗаявкаНаРемонтРемонтныеРаботы.ID = торо_ЗаявкаНаРемонтИнструменты.ID
	               |ГДЕ
	               |	(торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ИЛИ НЕ торо_ЗаявкаНаРемонтИнструменты.Ссылка ЕСТЬ NULL)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	ЕСТЬNULL(торо_ЗаявкаНаРемонтИнструменты.Инструмент, НЕОПРЕДЕЛЕНО)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |ГДЕ
	               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
	               |	И НЕ ВТ_ИтоговыеДанные.Количество = 0
	               |ИТОГИ ПО
	               |	IDРемонта,
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
	               |	ВТ_ИтоговыеДанные.ID КАК ID,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
	               |	ВТ_ИтоговыеДанные.Количество КАК Количество
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные";
	
	Запрос.УстановитьПараметр("МассивВсехID", МассивВсехID);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРемонтов = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщая = РезультатЗапроса[3].Выбрать();
	
	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("ОбъектПотребности", "Инструмент");
	ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяПлановаяПотребностьВИнструментах");
	ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяПлановаяПотребностьВИнструментах");
	ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.Номенклатура");
	
	ОбновитьПотребностьПоРемонтам(МассивВсехID, ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета);

КонецПроцедуры

#КонецОбласти
	
#КонецОбласти

#КонецОбласти

#Область ЗаполнениеТЧОсновныхДокументов

Функция ОбработкаПодбораТехОперации(Дерево, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтныхРабот, ТекущиеЗначения, КоличествоОпераций)
	
	Если ТекущиеЗначения.Свойство("ТекущийРемонт_ID") И ТекущиеЗначения.ТекущийРемонт_ID <> "" Тогда
		РемонтыОборудования_ID = ТекущиеЗначения.ТекущийРемонт_ID;
	Иначе
		Возврат Строка(НСтр("ru = 'Не выбран ремонт оборудования для добавления тех. операции!'"));
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("Предписание_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение)).Количество() > 0;
	Иначе
		ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение,ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
	КонецЕсли;
	
	Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID) Тогда
			ТЧ_РемонтныхРабот.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") 
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ЗаполнитьТиповыеЗатратыТехнологическойОперации(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение,,РемонтыОборудования_ID, КоличествоОпераций);
	КонецЕсли;

	Возврат Новый Структура("Дерево, ДокументОбъект", Дерево, ДокументОбъект);
	
КонецФункции

Функция ОбработкаПодбораТехКарты(Дерево, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтныхРабот, ТекущиеЗначения)
	
	Если ТекущиеЗначения.Свойство("ТекущийРемонт_ID") И ТекущиеЗначения.ТекущийРемонт_ID <> "" Тогда
		РемонтыОборудования_ID = ТекущиеЗначения.ТекущийРемонт_ID;
	Иначе
		Возврат Строка(НСтр("ru = 'Не выбран ремонт оборудования, для добавления тех. карты!'"));
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("Предписание_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение, ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
	Иначе
		ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение,ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
	КонецЕсли;
	
	Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID) Тогда
			ТЧ_РемонтныхРабот.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
			НовСтрокаРР = ?(ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID), ТЧ_РемонтныхРабот.Добавить(), ТЧ_РемонтныхРабот[0]);
		Иначе
			НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
		КонецЕсли;
		
		НовСтрокаРР.Родитель_ID            = ТекущиеЗначения.СтрокаРодитель_ID;
		НовСтрокаРР.РемонтыОборудования_ID = РемонтыОборудования_ID;	
		НовСтрокаРР.ID                     = Новый УникальныйИдентификатор();
		НовСтрокаРР.РемонтнаяРабота        = ВыбранноеЗначение;
		НовСтрокаРР.Картинка               = 0;	
		
		НовСтрокаРР.Количество = 1;
		
		ДатаНачала = ТекущиеЗначения.ДатаНачалаРемонта;
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			ДатаНачала = ТекущаяДата();
		КонецЕсли; 
		
		ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(ВыбранноеЗначение, ДатаНачала);
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("ID_Родителя"            , НовСтрокаРР.ID);
		СтруктураДанных.Вставить("РемонтыОборудования_ID" , РемонтыОборудования_ID);
		СтруктураДанных.Вставить("РемонтнаяРабота"        , ТехКарта);
		СтруктураДанных.Вставить("ДатаРемонта"            , ДатаНачала);
		
		торо_ЗаполнениеДокументов.ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект, Ложь);
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение, ТекущиеЗначения.ТекущийРемонт_ID);
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение, ТекущиеЗначения.ТекущийРемонт_ID);			
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда	
		
		ТекущиеЗначения.Вставить("ДатаНачалаРемонта", ?(ЗначениеЗаполнено(ДокументОбъект.ДатаСоздания), ДокументОбъект.ДатаСоздания, ДокументОбъект.Дата));
		ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение, ТекущиеЗначения.ТекущийРемонт_ID);			
		
		Для Каждого СтрокаРР Из ТЧ_РемонтныхРабот Цикл
			Если ПустаяСтрока(СтрокаРР.Предписание_ID) Тогда
				СтрокаРР.Предписание_ID = РемонтыОборудования_ID;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("Дерево, ДокументОбъект", Дерево, ДокументОбъект);

КонецФункции


Функция ДобавитьСтрокуРемонтаОборудования(ТЧ_РемонтовОборудования, СтрокаРемонтовОборудования, ДокументОбъект, ДокОснование)
	
	Если ТЧ_РемонтовОборудования.Количество() > 0 Тогда
		СтрокаРО = ТЧ_РемонтовОборудования.Получить(0);
	Иначе
		СтрокаРО = ТЧ_РемонтовОборудования.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаРО.ID) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРО, СтрокаРемонтовОборудования);
	Иначе
		СтрокаРО = ТЧ_РемонтовОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРО, СтрокаРемонтовОборудования);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии") И (ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") 
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")) Тогда
		СтрокаРО.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(СтрокаРО.ОбъектРемонта, СтрокаРО.ДатаНачала, СтрокаРО.ДатаОкончания);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаРО.ДатаНачала) Тогда
		Попытка
			СтрокаРО.ДатаНачала = СтрокаРемонтовОборудования.ПлановаяДата;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ИДДефекта = СтрокаРемонтовОборудования.ID;
	КонецЕсли;

	Если НЕ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		
		Если СтрокаРемонтовОборудования.Свойство("Предписания") 
			Или (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") И Не ЗначениеЗаполнено(СтрокаРемонтовОборудования.ВидРемонтныхРабот)) Тогда
			СтрокаРО.ЗакрываетПредписание = Истина;
			Если Не ЗначениеЗаполнено(СтрокаРО.ВидРемонтныхРабот) Тогда
				Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
					СтрокаРО.ВидРемонтныхРабот = Константы.торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований.Получить();
				Иначе
					СтрокаРО.ВидРемонтныхРабот = Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРО.ИДДефекта = ИДДефекта;
		
	КонецЕсли;
	
	СтрокаРО.ДокументИсточник = ДокОснование;
	
	Возврат СтрокаРО;
	
КонецФункции

Процедура ОбработкаВыбораРемонта_ДобавитьСтрокиРемонтныхРабот(ВыбранноеЗначение, СтрокаРО, ТЧ_РемонтныхРабот, ДокументОбъект, СтрокаРемонтовОборудования, ЗаполнятьЗатраты = Истина)
	
	// Получим нормативы
	СтруктураНормативов = ПолучитьСтруктуруНормативовРемонта(СтрокаРО.ОбъектРемонта, СтрокаРО.ВидРемонтныхРабот);
	Если СтруктураНормативов = Неопределено Тогда
		НормативныйРемонт = Неопределено;
	Иначе
		НормативныйРемонт = СтруктураНормативов.НормативныйРемонт;	
	КонецЕсли;
	
	ПерезаписыватьРодитель_ID = Ложь;
	
	Родитель_ID = "";
	
	// Выбрана строка ремонтных работ
	Если ВыбранноеЗначение.Свойство("СтрокаРемонтныхРабот") Тогда
		
		СтрокаРемонтныхРабот = ВыбранноеЗначение.СтрокаРемонтныхРабот;
		
		СтрокаОтсчета = СтрокаРемонтныхРабот;
		
		ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота",СтрокаОтсчета[0].РемонтыОборудования_ID, СтрокаОтсчета[0].РемонтнаяРабота);
		
		МассивНайденного = ТЧ_РемонтныхРабот.НайтиСтроки(ПараметрыПоиска);
		
		// Движение вверх по дереву
		Пока МассивНайденного.Количество() = 0 И Не СтрокаОтсчета[0].Родитель = Неопределено Цикл
			
			Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
				НовСтрокаРР = ?(ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID),ТЧ_РемонтныхРабот.Добавить(), ТЧ_РемонтныхРабот[0]);
			Иначе
				НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НовСтрокаРР, СтрокаОтсчета[0]);
			
			Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
				НовСтрокаРР.Количество = 1;
			КонецЕсли;
			
			Если ПерезаписыватьРодитель_ID И Не ЗначениеЗаполнено(НовСтрокаРР.Родитель_ID) Тогда
				НовСтрокаРР.Родитель_ID = Родитель_ID;
			КонецЕсли;
			
			// Затраты
			Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
				И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
				Если ВыбранноеЗначение.Свойство("ДокументОснование") Тогда
					
					ДокОснование = ВыбранноеЗначение.ДокументОснование;
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаОтсчета = СтрокаОтсчета[0].Родитель;
			
			ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, ID",СтрокаОтсчета.РемонтыОборудования_ID, СтрокаОтсчета.ID);
			
			МассивНайденного = ТЧ_РемонтныхРабот.НайтиСтроки(ПараметрыПоиска);
			
		КонецЦикла;
		
		
		// Выбрана строка ремонтов оборудования
	ИначеЕсли ВыбранноеЗначение.Свойство("МассивСтрокРемонтныхРабот") Тогда  // При вводе из рабочего места ТехСпец
		
		МассивСтрокРемонтныхРабот = ВыбранноеЗначение.МассивСтрокРемонтныхРабот;
		Для Каждого ЭлементМассива Из МассивСтрокРемонтныхРабот Цикл
			
			ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID, ID",ЭлементМассива.РемонтыОборудования_ID, ЭлементМассива.РемонтнаяРабота, ЭлементМассива.Родитель_ID, ЭлементМассива.ID);
			МассивНайденного = ТЧ_РемонтныхРабот.НайтиСтроки(ПараметрыПоиска);
			
			Если МассивНайденного.Количество() = 0 Тогда
				
				НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаРР, ЭлементМассива); 
				Если ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") И НЕ ЗначениеЗаполнено(НовСтрокаРР.Количество) Тогда
					НовСтрокаРР.Количество = 1;
				КонецЕсли;
				
				НомерСтрокиВТК = ?(ЭлементМассива.Свойство("НомерСтрокиВТК"), ЭлементМассива.НомерСтрокиВТК, 0);
				
				Если ПерезаписыватьРодитель_ID И Не ЗначениеЗаполнено(НовСтрокаРР.Родитель_ID) Тогда
					НовСтрокаРР.Родитель_ID = Родитель_ID;
				КонецЕсли;
				
				// Затраты
				Если ВыбранноеЗначение.Свойство("ДокументОснование") Тогда
					
					ДокОснование = ВыбранноеЗначение.ДокументОснование;
					Если НЕ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
						СтарыйID = НовСтрокаРР.ID;
						Если ЗаполнятьЗатраты Тогда
							Если ЭлементМассива.Свойство("ТехКартаРемонта") И ЗначениеЗаполнено(ЭлементМассива.ТехКартаРемонта) Тогда
								ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.ТехКартаРемонта, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала,, ВыбранноеЗначение.СтрокаРемонтовОборудования, НомерСтрокиВТК);
							ИначеЕсли ЭлементМассива.Свойство("РемонтнаяРабота") Тогда
								ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.РемонтнаяРабота, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала,, ВыбранноеЗначение.СтрокаРемонтовОборудования, НомерСтрокиВТК);
							КонецЕсли;	
						КонецЕсли;
						Если СтарыйID <> НовСтрокаРР.ID Тогда
							Для Каждого СтрокаМасс Из МассивСтрокРемонтныхРабот Цикл
								Если СтрокаМасс.Родитель_ID = СтарыйID Тогда
									СтрокаМасс.Родитель_ID = НовСтрокаРР.ID;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
					Иначе
						
						СтарыйID = НовСтрокаРР.ID;
						Если ЗаполнятьЗатраты Тогда
							Если ЭлементМассива.Свойство("ТехКартаРемонта") И ЗначениеЗаполнено(ЭлементМассива.ТехКартаРемонта) Тогда
								ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.ТехКартаРемонта, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала,,, НомерСтрокиВТК);
							ИначеЕсли ЭлементМассива.Свойство("РемонтнаяРабота") Тогда
								ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.РемонтнаяРабота, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала,,, НомерСтрокиВТК);
							КонецЕсли;
						КонецЕсли;
						Если СтарыйID <> НовСтрокаРР.ID Тогда
							Для Каждого СтрокаМасс Из МассивСтрокРемонтныхРабот Цикл
								Если СтрокаМасс.Родитель_ID = СтарыйID Тогда
									СтрокаМасс.Родитель_ID = НовСтрокаРР.ID;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не НормативныйРемонт = Неопределено Тогда
			МассивРемонтныхРаботНормативы = НормативныйРемонт.СписокОпераций;
			Для Каждого РемонтнаяРабота Из МассивРемонтныхРаботНормативы Цикл
				НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
				НовСтрокаРР.Родитель_ID 			= Родитель_ID;
				НовСтрокаРР.РемонтыОборудования_ID 	= СтрокаРемонтовОборудования.ID;
				НовСтрокаРР.РемонтнаяРабота 		= РемонтнаяРабота.Операция;
				НовСтрокаРР.ID 						= РемонтнаяРабота.ID;
				Если ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
					НовСтрокаРР.Количество 			= 1;
				КонецЕсли;
				Если ЗаполнятьЗатраты Тогда
					ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, НормативныйРемонт,СтрокаРемонтовОборудования.ДатаНачала);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет ремонтные работы по нормативам ремонтов оборудования или по основанию.
//
Функция ДобавитьСтрокуРемонтныхРабот(ДокументОбъект, СтрокаРемонтныхРабот, ДатаНачала, ТабличнаяЧастьРемонтныхРабот, ТехКартаРемонта,
	ЗаполнятьЗатраты, СтруктураСоответствияТЧ, НовыйИдентификатор = Ложь, МассивРемонтныхРабот = Неопределено, КоллекцияСтрокРР = Неопределено) Экспорт
	
	Результат = Ложь;
	
	// ИмяКолонкиРР = "РемонтнаяРабота" при создании наряда на основании ВО/Сметы, т.е. ремонтные работы заполняются из основания. В данном случае
	// КоллекцияСтрокРР содержит строки очередного уровня дерева операций из документа основания. Если основание - ВД/ППР, то ремонтные работы
	// заполняются из нормативов, тогда в этом случае коллекцией строк будет ТЧ операций ТК.
	ИмяКолонкиРР = "РемонтнаяРабота";
	
	Если Не ТипЗнч(КоллекцияСтрокРР) = Тип("КоллекцияСтрокДереваЗначений") Тогда
	    КоллекцияСтрокРР = ТехКартаРемонта.СписокОпераций;
		ИмяКолонкиРР = "Операция";
	КонецЕсли;
	
	Для Каждого СтрокаОперации Из КоллекцияСтрокРР Цикл
		Если ТипЗнч(СтрокаОперации[ИмяКолонкиРР]) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
			И ЗначениеЗаполнено(МассивРемонтныхРабот) И МассивРемонтныхРабот.Найти(СтрокаОперации.ID) = Неопределено Тогда
		    Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
			Или (ТипЗнч(СтрокаОперации[ИмяКолонкиРР]) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") И Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")) Тогда
			Идентификтор = ?(НовыйИдентификатор, Новый УникальныйИдентификатор(), СтрокаОперации.ID);
			РезультатЗапроса = торо_ПроцентыВыполнения.ПолучитьПроцентВыполненияОперации(СтрокаОперации[ИмяКолонкиРР], СтрокаРемонтныхРабот.ID, СтрокаРемонтныхРабот.РемонтыОборудования_ID, Неопределено, Идентификтор);
			Если РезультатЗапроса.Пустой() Тогда
				ПроцентВыполненияРабот = 100 * СтрокаОперации.Количество;	
			Иначе	
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					ПроцентВыполненияРабот = Выборка.Процент;
				КонецЦикла;
			КонецЕсли; 
			
			Если ПроцентВыполненияРабот = Неопределено Или ПроцентВыполненияРабот <= 0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		НоваяСтрокаРемонтныхРабот = ТабличнаяЧастьРемонтныхРабот.Добавить();
		НоваяСтрокаРемонтныхРабот.РемонтыОборудования_ID = СтрокаРемонтныхРабот.РемонтыОборудования_ID;
		НоваяСтрокаРемонтныхРабот.ID                     = ?(НовыйИдентификатор, Новый УникальныйИдентификатор(), СтрокаОперации.ID);
		НоваяСтрокаРемонтныхРабот.РемонтнаяРабота        = СтрокаОперации[ИмяКолонкиРР];
		НоваяСтрокаРемонтныхРабот.Родитель_ID            = СтрокаРемонтныхРабот.ID;
		НоваяСтрокаРемонтныхРабот.Количество             = СтрокаОперации.Количество;
		Если ЗначениеЗаполнено(ТехКартаРемонта) Тогда
			Попытка
				НоваяСтрокаРемонтныхРабот.ТехКартаРемонта = ТехКартаРемонта;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
			Или (ТипЗнч(СтрокаОперации[ИмяКолонкиРР]) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") И Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")) Тогда
			НоваяСтрокаРемонтныхРабот.ПроцентВыполненияРабот = ПроцентВыполненияРабот / НоваяСтрокаРемонтныхРабот.Количество;
		КонецЕсли; 
		
		// Затраты ТМЦ, Трудозатраты и т.д.
		Если ЗаполнятьЗатраты = Истина Тогда
			Если СтруктураСоответствияТЧ = Неопределено Тогда
				СтруктураСоответствияТЧ = Новый Структура;
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ", "МатериальныеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
				СтруктураСоответствияТЧ.Вставить("МатериальныеЗатраты", СоответствиеЗаполнения);
				
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ", "ТрудовыеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
				СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
				
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ", "Инструменты");
				СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
				СтруктураСоответствияТЧ.Вставить("ИнструментыИТехника", СоответствиеЗаполнения);
			КонецЕсли; 
		КонецЕсли;
		
		Если Не ТипЗнч(СтрокаОперации[ИмяКолонкиРР]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Результат = Истина;
			Продолжить;
		КонецЕсли;
		
		ВерсияТехКарты = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаОперации[ИмяКолонкиРР], ДатаНачала);
		Если Не ЗначениеЗаполнено(ВерсияТехКарты) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если КоллекцияСтрокРР, то коллекцией строк служит дерево операций, поэтому в данном случае будем использовать подчиненные строки.
		// Если заполняется из нормативов, то это значение будет не заполненным, и будет использоваться ТЧ операций ТК.
		КоллекцияПодчиненныхСтрокРР = ?(ТипЗнч(КоллекцияСтрокРР) = Тип("КоллекцияСтрокДереваЗначений"), СтрокаОперации.Строки, Неопределено);
		
		СтрокиДобавлены = ДобавитьСтрокуРемонтныхРабот(ДокументОбъект, НоваяСтрокаРемонтныхРабот, ДатаНачала, ТабличнаяЧастьРемонтныхРабот, ВерсияТехКарты,
			ЗаполнятьЗатраты, СтруктураСоответствияТЧ,
			, МассивРемонтныхРабот, КоллекцияПодчиненныхСтрокРР);
		
		Результат = Результат Или СтрокиДобавлены;
		
		// Если добавляем только определенные операции (создаем наряд из формы операций без нарядов), то ТК нужно удалить, если вложенные
		// в нее операции не были добавлены
		Если ЗначениеЗаполнено(МассивРемонтныхРабот) И Не СтрокиДобавлены Тогда
		    ТабличнаяЧастьРемонтныхРабот.Удалить(НоваяСтрокаРемонтныхРабот);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ОбработкаВыбораРемонта_ЗаполнитьЗатратыПоОснованию(ДокументОбъект, ДокОснование, СтрокаРО) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")
	   И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие")
		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументовОснований = Новый массив;
	МассивДокументовОснований.Добавить(ДокОснование);
	
	СписокИДРемонтов = Новый Массив;
	СписокИДРемонтов.Добавить(СтрокаРО.ID);
	
	СписокИДОпераций = Новый Массив;
	СписокИДТехКарт = Новый Массив;
	
	СтрокиОпераций = ДокументОбъект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРО.ID));
	
	Для каждого СтрокаОперации из СтрокиОпераций Цикл
		СписокИДОпераций.Добавить(СтрокаОперации.ID);
		Если ТипЗнч(СтрокаОперации.РемонтнаяРабота) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			СписокИДТехКарт.Добавить(СтрокаОперации.ID);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Материалы");
		ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
		ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Запчасти");
		ЗаполнитьЗапчастиПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Материалы");
		ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
		ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
		ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Материалы");
		ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
		ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
		
		ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Запчасти");
		ЗаполнитьЗапчастиПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);

	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение типовых затрат технологических операций.
//
// Параметры:
//  ДокументОбъект  – ДокументОбъект.торо_ЗаявкаНаРемонт – документ для которого
//                    необходимо заполнить типовые затраты.
//  СтрокаДерева    – СтрокаДереваЗначений – строка дерева ремонтных работ для
//                    которой заполняются типовые затраты.
//
Процедура ЗаполнитьТиповыеЗатратыТехнологическойОперации(Дерево, ДокументОбъект, СтруктураСтрокаРодитель, Значение, СтруктураСоответствияТЧ = Неопределено, РемонтыОборудования_ID = "", КоличествоОпераций = Неопределено) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		СтруктураПолей = "ID, Предписание_ID, Родитель_ID";
	Иначе
		СтруктураПолей = "ID, РемонтыОборудования_ID, Родитель_ID";
	КонецЕсли;
	
	МассивСтрок = Дерево.Строки.НайтиСтроки(
		Новый Структура(СтруктураПолей, 
		СтруктураСтрокаРодитель.СтрокаРодитель_ID, 
		СтруктураСтрокаРодитель.СтрокаРодительРемонтыОборудования_ID , 
		СтруктураСтрокаРодитель.СтрокаРодительРодитель_ID), Истина);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваРодитель = МассивСтрок[0];
	СтрокаДерева = СтрокаДереваРодитель.Строки.Добавить();
	СтрокаДерева.ID = Новый УникальныйИдентификатор;
	СтрокаДерева.Родитель_ID     = СтруктураСтрокаРодитель.СтрокаРодитель_ID;
	СтрокаДерева.РемонтнаяРабота = Значение;
	//СтрокаДерева.Картинка        = ИндексКартинкиДереваРемонтныхРабот(Значение);
	
	Если СтруктураСтрокаРодитель.Свойство("ID_ПараллельнойОперации") Тогда
		СтрокаДерева.ID_ПараллельнойОперации = СтруктураСтрокаРодитель.ID_ПараллельнойОперации;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(СтрокаДерева);
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		СтрокаДерева.Предписание_ID = ?(РемонтыОборудования_ID = "", СтруктураСтрокаРодитель.СтрокаРодительРемонтыОборудования_ID, РемонтыОборудования_ID);
	Иначе
		СтрокаДерева.РемонтыОборудования_ID = ?(РемонтыОборудования_ID = "", СтруктураСтрокаРодитель.СтрокаРодительРемонтыОборудования_ID, РемонтыОборудования_ID);
	КонецЕсли;

	Если Не (ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие")) Тогда
		СтрокаДерева.ТехОперация = Значение;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		СтрокаДерева.СодержитРаботыПовышеннойОпасности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "РаботаПовышеннойОпасности");;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") 
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		СтрокаДерева.Количество = 1;
		СтрокаДерева.НоваяОперация = Истина;
		СтрокаДерева.ПроцентВыполненияРабот = 100;
	КонецЕсли;
	
	Если КоличествоОпераций <> Неопределено Тогда
		СтрокаДерева.Количество = КоличествоОпераций;
	Иначе
		СтрокаДерева.Количество = 1;
	КонецЕсли; 
	
	// Для обработки выбора ТЧ "ЗакрываемыеПредписания".
	Если СтруктураСтрокаРодитель.Свойство("РемонтнаяРабота_ID") Тогда
		СтрокаДерева.ID = СтруктураСтрокаРодитель.РемонтнаяРабота_ID;
	КонецЕсли;
	Если СтруктураСтрокаРодитель.Свойство("Предписание") Тогда
		СтрокаДерева.Предписание = СтруктураСтрокаРодитель.Предписание;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект.РемонтныеРаботы.Добавить(), СтрокаДерева);
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСоответствияТЧ = Новый Структура;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", "Исполнители");
	Иначе
	    СтруктураСоответствияТЧ.Вставить("МатериальныеЗатраты", "МатериальныеЗатраты");
		СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", "ТрудовыеЗатраты");
	КонецЕсли;

	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		СтруктураСоответствияТЧ.Вставить("ИнструментыИТехника",  "Инструменты");
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураСоответствияТЧ Цикл
		
		ТЧ = Значение[КлючИЗначение.Ключ];
		
		Для Каждого СтрокаТЧ Из ТЧ Цикл
			
			Если Не ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")
				И КлючИЗначение.Ключ = "ТрудовыеЗатраты" Тогда
				Если СтрокаТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Счетчик = 1 По СтрокаТЧ.Количество Цикл
					НовСтрокаТЧ    = ДокументОбъект[КлючИЗначение.Значение].Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, СтрокаТЧ);
					НовСтрокаТЧ.ID = СтрокаДерева.ID;
					НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаДерева.РемонтыОборудования_ID;
					СтруктураСтрокаРодитель.Свойство("ДатаНачалаРемонта", НовСтрокаТЧ.ДатаНачала);
					СтруктураСтрокаРодитель.Свойство("ДатаОкончанияРемонта", НовСтрокаТЧ.ДатаОкончания);
				КонецЦикла;
			Иначе
				НовСтрокаТЧ    = ДокументОбъект[КлючИЗначение.Значение].Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, СтрокаТЧ);
				НовСтрокаТЧ.ID = СтрокаДерева.ID;
				НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаДерева.РемонтыОборудования_ID;
				
				Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
					НовСтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Упаковка;
					НовСтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок;
					НовСтрокаТЧ.ХарактеристикаНоменклатуры = СтрокаТЧ.Характеристика;
					
					Коэффициент = НовСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
					
					Если Коэффициент = 0 Тогда
						Коэффициент = 1;
					КонецЕсли;
					
					НовСтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.КоличествоУпаковок * Коэффициент;
				ИначеЕсли КлючИЗначение.Ключ = "ИнструментыИТехника" Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
						НовСтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Упаковка;
						НовСтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры 

// Процедура заполняет табличную часть ремонтных работ, а так же табличные части нормативов объекта
// ремонта по технологической карте ремонта.
//
// Параметры:
//  ДокументОбъект       – ДокументОбъект – документ рем. работ.
//  ВидРемонтныхРабот    – СправочникиОбъекта.торо_ВидыРемонтов
//                       – вид ремонтных работ.
// Возвращаемое значение:
//   СтруктураНормативов - Структура - структура нормативов ремонта.
//
Процедура ЗаполнитьРемонтныеРаботыПоНормативам(ДокументОбъект, ИмяТабличнойЧастиРемонтовОборудования, ИмяТабличнойЧастиРемонтныхРабот, ЗаполнятьЗатраты = Ложь, 
	СтруктураСоответствияТЧ = Неопределено, СписокРемонтов = Неопределено, НовыйИдентификатор = Ложь, ЗаполнятьРаботыПовышеннойОпасности = Ложь, СоответствиеРемонтовИРР = Неопределено) Экспорт
	
	ТЧ_РемонтыОборудования = ДокументОбъект[ИмяТабличнойЧастиРемонтовОборудования];
	ТЧ_РемонтныеРаботы     = ДокументОбъект[ИмяТабличнойЧастиРемонтныхРабот];
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТаблицаРемонтовОборудования.ОбъектРемонта,
	               |	ТаблицаРемонтовОборудования.ВидРемонтныхРабот,
				   |	ТаблицаРемонтовОборудования.ID КАК ID,
				   |	ТаблицаРемонтовОборудования.ДокументИсточник КАК ДокументИсточник
	               |ПОМЕСТИТЬ ТаблицаРемонтовОборудования
	               |ИЗ
	               |	&ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования "+ ?(СписокРемонтов<>Неопределено, " ГДЕ ТаблицаРемонтовОборудования.ID = &СписокРемонтов", "") +"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				   |	СписокДефектов.ТиповойДефект.ТехнологическаяКарта КАК НормативныйРемонт,
				   |	NULL КАК СпособПланирования,
				   |	NULL КАК ГрафикРемонтныхРабот,
				   |	NULL КАК СпособВыполнения,
				   |	ЛОЖЬ КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
				   |	NULL КАК СпособУчетаДатыОтсчета,
				   |	ТаблицаРемонтовОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
				   |	ТаблицаРемонтовОборудования.ОбъектРемонта КАК ОбъектРемонта,
				   |	СписокДефектов.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
				   |	ТаблицаРемонтовОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот1,
				   |	ТаблицаРемонтовОборудования.ID КАК ID
				   |ИЗ
				   |	ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты.СписокДефектов КАК СписокДефектов
				   |		ПО ТаблицаРемонтовОборудования.ДокументИсточник = СписокДефектов.Ссылка
				   |		И ТаблицаРемонтовОборудования.ID = СписокДефектов.ID
				   |ГДЕ 
				   |	СписокДефектов.ТиповойДефект.ТехнологическаяКарта <> ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)
				   |
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ 
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования,
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	               |	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
	               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
	               |	ТаблицаРемонтовОборудования.ОбъектРемонта,
	               |	ТаблицаРемонтовОборудования.ВидРемонтныхРабот,
				   |	ТаблицаРемонтовОборудования.ID
	               |ИЗ
	               |	ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |		ПО ТаблицаРемонтовОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	               |			И ТаблицаРемонтовОборудования.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	               |ГДЕ
	               |	торо_НормативныеРемонтыОборудования.Приоритет
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт,
	               |	торо_РегламентныеМероприятияИСпискиОбъектов.СпособПланирования,
	               |	торо_РегламентныеМероприятияИСпискиОбъектов.ГрафикРемонтныхРабот,
	               |	торо_РегламентныеМероприятияИСпискиОбъектов.СпособВыполнения,
	               |	ЛОЖЬ КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_РегламентныеМероприятияИСпискиОбъектов.СпособУчетаДатыОтсчета,
	               |	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия КАК ВидРемонта,
	               |	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов КАК ГруппаОбьектовРемонтов,
	               |	ТаблицаРемонтовОборудования.ОбъектРемонта,
	               |	ТаблицаРемонтовОборудования.ВидРемонтныхРабот,
				   |	ТаблицаРемонтовОборудования.ID
	               |ИЗ
	               |	ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
	               |		ПО ТаблицаРемонтовОборудования.ОбъектРемонта = торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов
	               |			И ТаблицаРемонтовОборудования.ВидРемонтныхРабот = торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НормативныйРемонт,
	               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособПланирования,
	               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ГрафикРемонтныхРабот,
	               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособВыполнения,
	               |	ЛОЖЬ КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_РемонтныеЦиклыОборудования.ВидЦепочки.СпособУчетаДатыОтсчета,
	               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	               |	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов,
	               |	ТаблицаРемонтовОборудования.ОбъектРемонта,
	               |	ТаблицаРемонтовОборудования.ВидРемонтныхРабот,
				   |	ТаблицаРемонтовОборудования.ID
	               |ИЗ
	               |	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	               |			ПО ТаблицаРемонтовОборудования.ВидРемонтныхРабот = торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта
	               |		ПО торо_РемонтныеЦиклыОборудования.ВидЦепочки = торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
				   |				И ТаблицаРемонтовОборудования.ОбъектРемонта = торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов";

	
	Если ТипЗнч(ТЧ_РемонтыОборудования) = Тип("ДанныеФормыКоллекция") Тогда
	    Запрос.УстановитьПараметр("ТаблицаРемонтовОборудования", ТЧ_РемонтыОборудования.Выгрузить());
	Иначе
	    Запрос.УстановитьПараметр("ТаблицаРемонтовОборудования", ТЧ_РемонтыОборудования);
	КонецЕсли;
		
	
	Если СписокРемонтов <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокРемонтов", СписокРемонтов);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаДанныхНормативов = Результат.Выгрузить();
	
	Для Каждого СтрокаТЧ_РО Из ТЧ_РемонтыОборудования Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ОбъектРемонта"    , СтрокаТЧ_РО.ОбъектРемонта);
		СтруктураПоиска.Вставить("ВидРемонтныхРабот", СтрокаТЧ_РО.ВидРемонтныхРабот);
		СтруктураПоиска.Вставить("ID", СтрокаТЧ_РО.ID);
		
		МассивСтрокНормативов = ТаблицаДанныхНормативов.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокНормативов.Количество() = 0 Тогда 	
			Продолжить;
		КонецЕсли;
		
		ТехКартаРемонта = МассивСтрокНормативов[0].НормативныйРемонт;
		Если ЗначениеЗаполнено(СтрокаТЧ_РО.ДатаНачала) Тогда
			ДатаВерсииТехКарты = СтрокаТЧ_РО.ДатаНачала;
		Иначе
			ДатаВерсииТехКарты = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДата());
		КонецЕсли;
		
		ВерсияТехКарты = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(ТехКартаРемонта, ДатаВерсииТехКарты);
		
		Если Не ЗначениеЗаполнено(ВерсияТехКарты) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаРемонтныхРабот = ТЧ_РемонтныеРаботы.Добавить();
		НоваяСтрокаРемонтныхРабот.РемонтыОборудования_ID = СтрокаТЧ_РО.ID;
		НоваяСтрокаРемонтныхРабот.ID                     = ПолучитьИдентификаторТехКарты(СтрокаТЧ_РО.ID, ТехКартаРемонта);
		
		НоваяСтрокаРемонтныхРабот.РемонтнаяРабота        = ТехКартаРемонта;
		НоваяСтрокаРемонтныхРабот.Родитель_ID            = "";
		НоваяСтрокаРемонтныхРабот.Количество             = 1;
		
		// СоответствиеРемонтовИРР заполнено, если наряд создается из формы операций без нарядов (содержит выбранные
		// операции по ремонтам).
		МассивРемонтныхРабот = СоответствиеРемонтовИРР[СтрокаТЧ_РО.ID];
		
		СтрокиДобавлены = ДобавитьСтрокуРемонтныхРабот(ДокументОбъект,
			НоваяСтрокаРемонтныхРабот, 
			СтрокаТЧ_РО.ДатаНачала, // Для получения даты начала ремонта
			ТЧ_РемонтныеРаботы,
			ВерсияТехКарты, 
			ЗаполнятьЗатраты,
			СтруктураСоответствияТЧ, 
			НовыйИдентификатор, МассивРемонтныхРабот);
			
		// Если добавляем только определенные операции (создаем наряд из формы операций без нарядов), то ТК нужно удалить, если вложенные
		// в нее операции не были добавлены.
	    Если ЗначениеЗаполнено(МассивРемонтныхРабот) И Не СтрокиДобавлены Тогда
		    ТЧ_РемонтныеРаботы.Удалить(НоваяСтрокаРемонтныхРабот);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполняет табличную часть ремонтных работ, а так же табличные части нормативов объекта
// ремонта по технологической карте ремонта.
//
// Параметры:
//  ДокументОбъект       – ДокументОбъект – документ рем. работ.
//  ВидРемонтныхРабот    – СправочникиОбъекта.торо_ВидыРемонтов
//                       – вид ремонтных работ.
// Возвращаемое значение:
//   СтруктураНормативов - Структура - структура нормативов ремонта.
//
Процедура ЗаполнитьРемонтныеРаботыПоОснованию(ДокументОбъект, ДокументОснование, ИмяТабличнойЧастиРемонтовОборудования, ИмяТабличнойЧастиРемонтныхРабот, СоответствиеРемонтовИРР = Неопределено) Экспорт
	ТЧ_РемонтыОборудования = ДокументОбъект[ИмяТабличнойЧастиРемонтовОборудования];
	ТЧ_РемонтныеРаботы     = ДокументОбъект[ИмяТабличнойЧастиРемонтныхРабот];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРемонтныхРабот.Ссылка КАК Ссылка,
		|	ТЧРемонтныхРабот.НомерСтроки КАК НомерСтроки,
		|	ТЧРемонтныхРабот.ID КАК ID,
		|	ТЧРемонтныхРабот.РемонтнаяРабота КАК РемонтнаяРабота,
		|	ТЧРемонтныхРабот.Родитель_ID КАК Родитель_ID,
		|	ТЧРемонтныхРабот.Количество КАК Количество,
		|	ТЧРемонтныхРабот.Предписание_ID КАК РемонтыОборудования_ID
		|ИЗ
		|	Документ.торо_ВнешнееОснованиеДляРабот.РемонтныеРаботы КАК ТЧРемонтныхРабот
		|ГДЕ
		|	ТЧРемонтныхРабот.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ВнешнееОснованиеДляРабот", "торо_ЗаявкаНаРемонт");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Предписание_ID", "РемонтыОборудования_ID");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	ТаблицаОпераций = Запрос.Выполнить().Выгрузить();
	
	ДатаСоздания = Неопределено;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
	    ДатаСоздания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДатаСоздания");
	КонецЕсли;
	
	Для каждого ТекущийРемонт Из ТЧ_РемонтыОборудования Цикл
		ДеревоОпераций = Новый ДеревоЗначений;
		ДеревоОпераций.Колонки.Добавить("ID");
		ДеревоОпераций.Колонки.Добавить("РемонтнаяРабота");
		ДеревоОпераций.Колонки.Добавить("Родитель_ID");
		ДеревоОпераций.Колонки.Добавить("РемонтыОборудования_ID");
		ДеревоОпераций.Колонки.Добавить("Количество");
		ДеревоОпераций.Колонки.Добавить("НомерОперацииПоПорядку");
		торо_Ремонты.ПостроитьДеревоОпераций(ДеревоОпераций, ТаблицаОпераций, ТекущийРемонт.ID);
		
		ДатаВерсииТехКарт = ТекущийРемонт.ДатаНачала;
		Если Не ЗначениеЗаполнено(ДатаВерсииТехКарт) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ДатаВерсииТехКарт = ДатаСоздания;
		КонецЕсли;
		
		// СоответствиеРемонтовИРР заполнено, если наряд создается из формы операций без нарядов (содержит выбранные
		// операции по ремонтам).
		МассивРемонтныхРабот = СоответствиеРемонтовИРР[ТекущийРемонт.ID];
		
		Для каждого СтрокаДереваОпераций Из ДеревоОпераций.Строки Цикл
			Если ЗначениеЗаполнено(МассивРемонтныхРабот) И ТипЗнч(СтрокаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
				И МассивРемонтныхРабот.Найти(СтрокаДереваОпераций.ID) = Неопределено Тогда
			    Продолжить;
			КонецЕсли;
			
			НоваяСтрокаРемонтныхРабот = ТЧ_РемонтныеРаботы.Добавить();
			НоваяСтрокаРемонтныхРабот.РемонтыОборудования_ID = ТекущийРемонт.ID;
			НоваяСтрокаРемонтныхРабот.ID                     = СтрокаДереваОпераций.ID;
			НоваяСтрокаРемонтныхРабот.РемонтнаяРабота        = СтрокаДереваОпераций.РемонтнаяРабота;
			НоваяСтрокаРемонтныхРабот.Родитель_ID            = "";
			НоваяСтрокаРемонтныхРабот.Количество             = СтрокаДереваОпераций.Количество;
			
		    Если Не ТипЗнч(СтрокаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Продолжить;
			КонецЕсли;
			
			ВерсияТехКарты = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаДереваОпераций.РемонтнаяРабота, ДатаВерсииТехКарт);
			Если Не ЗначениеЗаполнено(ВерсияТехКарты) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиДобавлены = ДобавитьСтрокуРемонтныхРабот(ДокументОбъект,
				НоваяСтрокаРемонтныхРабот, 
				ДатаСоздания, // Для получения даты начала ремонта
				ТЧ_РемонтныеРаботы,
				ВерсияТехКарты,,,
				, МассивРемонтныхРабот, СтрокаДереваОпераций.Строки);
				
			// Если добавляем только определенные операции (создаем наряд из формы операций без нарядов), то ТК нужно удалить, если вложенные
			// в нее операции не были добавлены
		    Если ЗначениеЗаполнено(МассивРемонтныхРабот) И Не СтрокиДобавлены Тогда
			    ТЧ_РемонтныеРаботы.Удалить(НоваяСтрокаРемонтныхРабот);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьИдентификаторТехКарты(РемонтыОборудования_ID, ТехКартаРемонта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID КАК ID
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		|ГДЕ
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота = &РемонтнаяРабота
		|	И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = &РемонтыОборудования_ID
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота = &РемонтнаяРабота
		|	И торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID = &РемонтыОборудования_ID
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.ID
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID = &РемонтыОборудования_ID
		|	И торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтнаяРабота = &РемонтнаяРабота
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ПлановыеЗатратыТехКарты.ТехКарта_ID
		|ИЗ
		|	Документ.торо_ПлановыеЗатраты.ТехКарты КАК торо_ПлановыеЗатратыТехКарты
		|ГДЕ
		|	торо_ПлановыеЗатратыТехКарты.ТехКарта = &РемонтнаяРабота
		|	И торо_ПлановыеЗатратыТехКарты.Ссылка.РемонтыОборудования_ID = &РемонтыОборудования_ID";
	
	Запрос.УстановитьПараметр("РемонтнаяРабота", ТехКартаРемонта);
	Запрос.УстановитьПараметр("РемонтыОборудования_ID", РемонтыОборудования_ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ID;
	КонецЕсли;
	
	Возврат Новый УникальныйИдентификатор();
	
КонецФункции 

// Функция получает структуру нормативов объекта ремонта по виду ремонтных работ.
//
// Параметры:
//  ОбъектРемонтныхРабот – СправочникиОбъекта.торо_ОбъектыРемонта – объект рем. работ.
//  ВидРемонтныхРабот    – СправочникиОбъекта.торо_ВидыРемонтов
//                       – вид ремонтных работ.
// Возвращаемое значение:
//   СтруктураНормативов - Структура - структура нормативов ремонта.
//
Функция ПолучитьСтруктуруНормативовРемонта(ОбъектРемонтныхРабот, ВидРемонтныхРабот)
	
	СтруктураНормативов = Новый Структура();
	СтруктураНормативов.Вставить("НормативныйРемонт");
	СтруктураНормативов.Вставить("СпособПланирования");
	СтруктураНормативов.Вставить("НормативныйРемонт");
	СтруктураНормативов.Вставить("ГрафикРемонтныхРабот");
	СтруктураНормативов.Вставить("НеИспользоватьВПланированииДатуВводаВЭксплуатацию");
	СтруктураНормативов.Вставить("СпособУчетаДатыОтсчета");
	СтруктураНормативов.Вставить("ВидРемонта");
	СтруктураНормативов.Вставить("ОбъектРемонта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	|	торо_НормативныеРемонтыОборудования.СпособПланирования,
	|	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	|	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	|	торо_НормативныеРемонтыОборудования.ВидРемонта,
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта
	|ИЗ
	|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
	|	И торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонтныхРабот
	|	И торо_НормативныеРемонтыОборудования.Приоритет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособПланирования,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ГрафикРемонтныхРабот,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособВыполнения,
	|	ЛОЖЬ КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособУчетаДатыОтсчета,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия КАК ВидРемонта,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов КАК ГруппаОбьектовРемонтов
	|ИЗ
	|	РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
	|ГДЕ
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия = &ВидРемонта
	|	И торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов = &ОбъектРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ОбъектРемонтныхРабот", ОбъектРемонтныхРабот);
	
	Запрос.УстановитьПараметр("ВидРемонта", ВидРемонтныхРабот);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураНормативов, Выборка);
		Возврат СтруктураНормативов;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьНормативнуюТехКартуРемонтаОбъекта()

// Процедура заполнения затрат по документу основанию строки табличной части "Ремонтные работы".
//
Процедура ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ЭтотОбъект, СтрокаРемРабот, ДокОснование, ТехКарта, ДатаНачала = Неопределено, Знач ПараметрыЗаполнения = Неопределено, СтрокаРемонтовОборудования = Неопределено, НомерСтрокиВТК = 0)
	
	Если ТипЗнч(ТехКарта) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ТехКартаРемонта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(ТехКарта, ДатаНачала);
	Иначе
		ТехКартаРемонта = ТехКарта;
	КонецЕсли;
	
	// Параметры, передаваемые в рекурсию
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьИсполнителейИзТехКарты") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьИсполнителейИзТехКарты", Истина);
	КонецЕсли;
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьМатериалыИзТехКарты") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьМатериалыИзТехКарты", Истина);
	КонецЕсли;
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьПодрядчиковИзОснования") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьПодрядчиковИзОснования", Ложь);
	КонецЕсли;
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьИсполнителейИзОснования") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьИсполнителейИзОснования", Ложь);
	КонецЕсли;
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьМатериалыИзОснования") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьМатериалыИзОснования", Ложь);
	КонецЕсли;
	
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьЗапчасти") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьЗапчасти", Истина);
	КонецЕсли;
	
	ЗаполнятьИзТехКарты = Истина;
	ЗаполнятьИзОснований = Ложь;
	
	// Для заполнения из оснований 
	МассивДокументовОснований = Новый массив;
	МассивДокументовОснований.Добавить(ДокОснование);
	
	СписокИДРемонтов = Новый Массив;
	СписокИДРемонтов.Добавить(СтрокаРемРабот.РемонтыОборудования_ID);
	
	СписокИДОпераций = Новый Массив;
	СписокИДОпераций.Добавить(СтрокаРемРабот.ID);
	
	СписокИДТехКарт = Новый Массив;
	СписокИДТехКарт.Добавить(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРемРабот.ID, СтрокаРемРабот.РемонтыОборудования_ID));
	
	// Проверка документа-основания		
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		
		ЗаполнятьИзТехКарты = Истина;
		
		// заполнить подрядчиков
		Если ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
			ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования = Ложь;
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
			ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		
		ЗаполнятьИзТехКарты = Истина;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		ЗаполнятьИзТехКарты = Ложь;
		ПараметрыЗаполнения.ЗаполнятьИсполнителейИзТехКарты = Ложь;
		ПараметрыЗаполнения.ЗаполнятьМатериалыИзТехКарты = Ложь;
		
		// заполнить материалы
		Если ПараметрыЗаполнения.ЗаполнятьМатериалыИзОснования Тогда
			ПараметрыЗаполнения.ЗаполнятьМатериалыИзОснования = Ложь;
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Материалы");
			ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
		КонецЕсли;
		
		Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования 
			ИЛИ ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
			
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
			
			// заполнить исполнителей
			Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования Тогда
				ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования = Ложь;
				ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			КонецЕсли;
			
			// заполнить подрядчиков
			Если ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
				ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования = Ложь;
				ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
				ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		
		ЗаполнятьИзТехКарты = Истина;
		ПараметрыЗаполнения.ЗаполнятьИсполнителейИзТехКарты = Ложь;
		ЗаполнятьИзОснований = Истина;
		
		Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования 
			ИЛИ ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
			
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
			
			// заполнить исполнителей
			Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования Тогда
				ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования = Ложь;
				ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			КонецЕсли;
			
			// заполнить подрядчиков
			Если ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
				ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования = Ложь;
				ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
				ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;  
	
	Если ТипЗнч(ЭтотОбъект) = Тип("ДанныеФормыСтруктура") И ЭтотОбъект.Свойство("СерийныеЗапчасти") И НЕ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		Если ПараметрыЗаполнения.ЗаполнятьЗапчасти Тогда
			ПараметрыЗаполнения.ЗаполнятьЗапчасти = Ложь;
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Запчасти");			
			ЗаполнитьЗапчастиПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения); 
		КонецЕсли;	
	КонецЕсли;
	
	// если нигде больше ничего нет, то берем из тех. карты
	Если ЗаполнятьИзТехКарты И ЗначениеЗаполнено(ТехКартаРемонта) Тогда
		
		СоответствиеТЧОснования = Новый Структура;
		
		Если ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")  
			ИЛИ ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			
			Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзТехКарты Тогда
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ"           , "Исполнители");
				СоответствиеЗаполнения.Вставить("Разбивать"       , Истина);
				СоответствиеТЧОснования.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыЗаполнения.ЗаполнятьМатериалыИзТехКарты Тогда
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ"               , "МатериальныеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать"           , Ложь);
				СоответствиеТЧОснования.Вставить("МатериальныеЗатраты", СоответствиеЗаполнения);
			КонецЕсли;
			
			Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзТехКарты Тогда
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ"           , "ТрудовыеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать"       , ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") ИЛИ ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") );
				СоответствиеТЧОснования.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			СоответствиеЗаполнения = Новый Соответствие();
			СоответствиеЗаполнения.Вставить("ИмяТЧ"               , "Инструменты");
			СоответствиеЗаполнения.Вставить("Разбивать"           , Ложь);
			СоответствиеТЧОснования.Вставить("ИнструментыИТехника", СоответствиеЗаполнения);
			
			СоответствиеЗаполнения = Новый Соответствие();
			СоответствиеЗаполнения.Вставить("ИмяТЧ"            , "МерыБезопасности");
			СоответствиеЗаполнения.Вставить("Разбивать"        , Ложь);
			СоответствиеТЧОснования.Вставить("МерыБезопасности", СоответствиеЗаполнения);
			
		КонецЕсли;
		
		ЗаполнитьНормативыРемонтнойРаботы(ЭтотОбъект,
		СтрокаРемРабот,
		ТехКартаРемонта,
		СоответствиеТЧОснования,,
		СтрокаРемонтовОборудования, НомерСтрокиВТК);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет нормативы ремонтной работы.
//
Процедура ЗаполнитьНормативыРемонтнойРаботы(ДокументОбъект, СтрокаРемонтныхРабот, ТехКартаРемонта, СтруктураСоответствияТЧ = Неопределено, НовСтрока_ID = "", ТекущиеЗначения = Неопределено, НомерСтрокиВТК = 0)
	
	Если ТехКартаРемонта <> Неопределено Тогда
		
		Если ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			СтрокаОперации = СтрокаРемонтныхРабот;
		Иначе
			СтрокаОперации = ТехКартаРемонта.СписокОпераций.Найти(СтрокаРемонтныхРабот.ID, "ID");
			Если СтрокаОперации = Неопределено Тогда
				СтруктураПоиска = Новый Структура("Операция", СтрокаРемонтныхРабот.РемонтнаяРабота); 
				СтрокиОперации = ТехКартаРемонта.СписокОпераций.НайтиСтроки(СтруктураПоиска);
				Если СтрокиОперации.Количество() = 1 Тогда
					СтрокаОперации = СтрокиОперации[0];	
				ИначеЕсли СтрокиОперации.Количество() > 1 Тогда
					// Чтобы затраты тянулись из правильных операций, на случай
					// двух одинаковых операций в ТК, но с разными затратами
				    Для каждого Строка Из СтрокиОперации Цикл
						Если Строка.НомерСтроки = НомерСтрокиВТК Тогда
							СтрокаОперации = Строка;	
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОперации <> Неопределено 
			ИЛИ ТипЗнч(СтрокаРемонтныхРабот.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
			Тогда
			
			Если СтруктураСоответствияТЧ = Неопределено Тогда
				
				СтруктураСоответствияТЧ = Новый Структура;
				
				Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		  			Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
					СоответствиеЗаполнения = Новый Соответствие();
					СоответствиеЗаполнения.Вставить("ИмяТЧ", "Исполнители");
					СоответствиеЗаполнения.Вставить("Разбивать", Истина);
					СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
				Иначе
					СоответствиеЗаполнения = Новый Соответствие();
					СоответствиеЗаполнения.Вставить("ИмяТЧ", "МатериальныеЗатраты");
					СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
					СтруктураСоответствияТЧ.Вставить("МатериальныеЗатраты", СоответствиеЗаполнения);
					
					СоответствиеЗаполнения = Новый Соответствие();
					СоответствиеЗаполнения.Вставить("ИмяТЧ", "ТрудовыеЗатраты");
					
					Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
					    СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
					Иначе
						СоответствиеЗаполнения.Вставить("Разбивать", Истина);
					КонецЕсли;
					
					СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
				КонецЕсли;
				
				Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
					
					СоответствиеЗаполнения = Новый Соответствие();
					СоответствиеЗаполнения.Вставить("ИмяТЧ", "Инструменты");
					СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
					СтруктураСоответствияТЧ.Вставить("ИнструментыИТехника", СоответствиеЗаполнения);
					
					Если ТипЗнч(ТехКартаРемонта) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
						СоответствиеЗаполнения = Новый Соответствие();
						СоответствиеЗаполнения.Вставить("ИмяТЧ", "МерыБезопасности");
						СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
						СтруктураСоответствияТЧ.Вставить("МерыБезопасности", СоответствиеЗаполнения);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Для Каждого КлючИЗначение Из СтруктураСоответствияТЧ Цикл
				
				Если СтрокаОперации <> Неопределено 
					И ТипЗнч(ТехКартаРемонта) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда // берем из тех. карты
					СтруктураПоиска = Новый Структура("ID", СтрокаОперации.ID);
					МассивСтрокНормативов = ТехКартаРемонта[КлючИЗначение.Ключ].НайтиСтроки(СтруктураПоиска);
				Иначе // берем напрямую из тех. операции
					Если КлючИЗначение.Ключ = "МерыБезопасности" Тогда
						Продолжить; // В тех. операциях нет такой ТЧ.
					КонецЕсли;
					МассивСтрокНормативов = СтрокаРемонтныхРабот.РемонтнаяРабота[КлючИЗначение.Ключ];
				КонецЕсли;
				
				Если КлючИЗначение.Значение.Получить("Разбивать") = Ложь Тогда // Не нужно разбивать строки по количеству
					
					Для Каждого ЭлементМассива Из МассивСтрокНормативов Цикл
						
						НовСтрокаТЧ    = ДокументОбъект[КлючИЗначение.Значение.Получить("ИмяТЧ")].Добавить();
						
						ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, ЭлементМассива);
						
						Если ЗначениеЗаполнено(НовСтрока_ID) Тогда
							НовСтрокаТЧ.ID = НовСтрока_ID;
						Иначе 
							НовСтрокаТЧ.ID = СтрокаРемонтныхРабот.ID;
						КонецЕсли;
						НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаРемонтныхРабот.РемонтыОборудования_ID;
						
						Если КлючИЗначение.Значение.Получить("ИмяТЧ") = "МатериальныеЗатраты" тогда
							Если СтрокаОперации <> Неопределено 
								И ТипЗнч(ТехКартаРемонта) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
								
								НовСтрокаТЧ.ЕдиницаИзмерения = ЭлементМассива.Упаковка;
								НовСтрокаТЧ.Количество = ЭлементМассива.КоличествоУпаковок;
								НовСтрокаТЧ.КоличествоЕдиниц = ЭлементМассива.КоличествоНаЕдиницу;
								НовСтрокаТЧ.ХарактеристикаНоменклатуры = ЭлементМассива.Характеристика;
								
							Иначе
								НовСтрокаТЧ.ЕдиницаИзмерения = ЭлементМассива.Упаковка;
								Коэффициент = НовСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
								НовСтрокаТЧ.ХарактеристикаНоменклатуры = ЭлементМассива.Характеристика;
								Если Коэффициент = 0 Тогда
									Коэффициент = 1;
								КонецЕсли;
								Если ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
									НовСтрокаТЧ.КоличествоЕдиниц = ЭлементМассива.КоличествоУпаковок * Коэффициент * СтрокаРемонтныхРабот.Количество;
									НовСтрокаТЧ.Количество = ЭлементМассива.КоличествоУпаковок * СтрокаРемонтныхРабот.Количество;
								Иначе
									НовСтрокаТЧ.КоличествоЕдиниц = ЭлементМассива.КоличествоУпаковок * Коэффициент;
								КонецЕсли;
							КонецЕсли;
							
						ИначеЕсли КлючИЗначение.Значение.Получить("ИмяТЧ") = "ТрудовыеЗатраты" Тогда
							
							Если ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
								НовСтрокаТЧ.ВремяРаботы = НовСтрокаТЧ.ВремяРаботы * СтрокаРемонтныхРабот.Количество;
								Если ЗначениеЗаполнено(ТекущиеЗначения) Тогда
									// При ручном добавлении ТК/ТО в качестве ТекущиеЗначения передается структура, среди полей которой
									// есть ДатаНачалаРемонта и ДатаОкончанияРемонта.
									НовСтрокаТЧ.ДатаНачала = ?(ТекущиеЗначения.Свойство("ДатаНачалаРемонта"), ТекущиеЗначения.ДатаНачалаРемонта, НовСтрокаТЧ.ДатаНачала);
									НовСтрокаТЧ.ДатаОкончания = ?(ТекущиеЗначения.Свойство("ДатаОкончанияРемонта"), ТекущиеЗначения.ДатаОкончанияРемонта, НовСтрокаТЧ.ДатаОкончания);
									
									// При добавлении строки ремонта оборудования в качестве ТекущиеЗначения передается структура с данными ремонта,
									// среди полей которой есть ДатаНачала и ДатаОкончания.
									НовСтрокаТЧ.ДатаНачала = ?(ТекущиеЗначения.Свойство("ДатаНачала"), ТекущиеЗначения.ДатаНачала, НовСтрокаТЧ.ДатаНачала);
									НовСтрокаТЧ.ДатаОкончания = ?(ТекущиеЗначения.Свойство("ДатаОкончания"), ТекущиеЗначения.ДатаОкончания, НовСтрокаТЧ.ДатаОкончания);
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли КлючИЗначение.Значение.Получить("ИмяТЧ") = "Инструменты" Тогда
							
							Если СтрокаОперации <> Неопределено 
								И ТипЗнч(ТехКартаРемонта) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
								
								НовСтрокаТЧ.ЕдиницаИзмерения = ЭлементМассива.Упаковка;
								НовСтрокаТЧ.Количество = ЭлементМассива.КоличествоУпаковок;
								
							Иначе
								НовСтрокаТЧ.ЕдиницаИзмерения = ЭлементМассива.Упаковка;
								Коэффициент = НовСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
								Если Коэффициент = 0 Тогда
									Коэффициент = 1;
								КонецЕсли;
								Если ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
									Попытка
										НовСтрокаТЧ.КоличествоЕдиниц = ЭлементМассива.КоличествоУпаковок * Коэффициент;
									Исключение
									
									КонецПопытки; 
									НовСтрокаТЧ.Количество = ЭлементМассива.КоличествоУпаковок;
								Иначе
									Попытка
										НовСтрокаТЧ.КоличествоЕдиниц = ЭлементМассива.КоличествоУпаковок;
									Исключение
									
									КонецПопытки; 
								КонецЕсли;
							КонецЕсли;
							
							
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли КлючИЗначение.Значение.Получить("Разбивать") = Истина Тогда // Надо добавить нужное количество строк
					
					Для Каждого ЭлементМассива Из МассивСтрокНормативов Цикл
						
						Для Сч = 1 По ЭлементМассива.Количество Цикл
							
							НовСтрокаТЧ    = ДокументОбъект[КлючИЗначение.Значение.Получить("ИмяТЧ")].Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, ЭлементМассива);
							Если ЗначениеЗаполнено(НовСтрока_ID) Тогда
								НовСтрокаТЧ.ID = НовСтрока_ID;
							Иначе
								НовСтрокаТЧ.ID = СтрокаРемонтныхРабот.ID;
							КонецЕсли;
							НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаРемонтныхРабот.РемонтыОборудования_ID;
							Если КлючИЗначение.Значение.Получить("ИмяТЧ") = "ТрудовыеЗатраты" Тогда
								//И ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
								НовСтрокаТЧ.ВремяРаботы = НовСтрокаТЧ.ВремяРаботы * СтрокаРемонтныхРабот.Количество;
								НовСтрокаТЧ.КТУ = 1;
							КонецЕсли;
							
							// В заявке даты у исполнителей не указываются
							Если КлючИЗначение.Ключ = "ТрудовыеЗатраты" И ЗначениеЗаполнено(ТекущиеЗначения)
								И Не ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
								// При ручном добавлении ТК/ТО в качестве ТекущиеЗначения передается структура, среди полей которой
								// есть ДатаНачалаРемонта и ДатаОкончанияРемонта.
								НовСтрокаТЧ.ДатаНачала = ?(ТекущиеЗначения.Свойство("ДатаНачалаРемонта"), ТекущиеЗначения.ДатаНачалаРемонта, НовСтрокаТЧ.ДатаНачала);
								НовСтрокаТЧ.ДатаОкончания = ?(ТекущиеЗначения.Свойство("ДатаОкончанияРемонта"), ТекущиеЗначения.ДатаОкончанияРемонта, НовСтрокаТЧ.ДатаОкончания);
								
								// При добавлении строки ремонта оборудования в качестве ТекущиеЗначения передается структура с данными ремонта,
								// среди полей которой есть ДатаНачала и ДатаОкончания.
								НовСтрокаТЧ.ДатаНачала = ?(ТекущиеЗначения.Свойство("ДатаНачала"), ТекущиеЗначения.ДатаНачала, НовСтрокаТЧ.ДатаНачала);
								НовСтрокаТЧ.ДатаОкончания = ?(ТекущиеЗначения.Свойство("ДатаОкончания"), ТекущиеЗначения.ДатаОкончания, НовСтрокаТЧ.ДатаОкончания);
							КонецЕсли;
							
						КонецЦикла; 
						                                                        
					КонецЦикла;
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьШапкуИзПоДокументуОснованию(ДокументОбъект, ДокументОснование) Экспорт
	
	ЕстьРеквизитКомиссияВОбъекте = ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
		ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктПриемкиОборудования")
		ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ВыявленныеДефекты");
		
	ЕстьРеквизитКомиссияВОсновании = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот");
	
	Если ЕстьРеквизитКомиссияВОбъекте И ЕстьРеквизитКомиссияВОсновании И НЕ ЗначениеЗаполнено(ДокументОбъект.Комиссия) Тогда
		ДокументОбъект.Комиссия = ДокументОснование.Комиссия;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗаполненияПоНормамИПоОснованию

Функция ПолучитьДанныеДляЗаполненияЗатратПоНормам(Форма, СтруктураТаблиц, ИДТекущейОперации = Неопределено, ИДТекущегоРемонта = Неопределено)
	
	ИмяТаблицыРемонтов = "РемонтыОборудования";
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ИмяТаблицыРемонтов = "РегламентныеМероприятия";
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ИмяТаблицыРемонтов = "Мероприятия";
	КонецЕсли;
	
	Если ИДТекущегоРемонта <> Неопределено Тогда
		ТекущийРемонт = Форма.Объект[ИмяТаблицыРемонтов].НайтиПоИдентификатору(ИДТекущегоРемонта);
		Если ТекущийРемонт = Неопределено Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
		Если ИДТекущейОперации <> Неопределено Тогда
			ВеткаДереваОпераций =  Форма.ДеревоРемонтныхРабот.НайтиПоИдентификатору(ИДТекущейОперации);
			Если ВеткаДереваОпераций = Неопределено Тогда
				Возврат Новый Массив;
			КонецЕсли;
		Иначе
			ВеткаДереваОпераций = Форма.ДеревоРемонтныхРабот;
		КонецЕсли;
		
		Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыДерево") Тогда
			ДеревоОпераций = ДанныеФормыВЗначение(ВеткаДереваОпераций, Тип("ДеревоЗначений"));
			ДеревоОпераций.Колонки.Добавить("НомерОперацииПоПорядку");
			торо_ЗаполнениеДокументов20.ПроставитьНомераОпераций(ДеревоОпераций);			
		Иначе
			ДеревоОпераций = ВеткаДереваОпераций;
		КонецЕсли;
		
		МассивДанныхЗаполнения = ПолучитьНормыЗатратИзВетвиДереваОпераций(ДеревоОпераций, ТекущийРемонт.ДатаНачала, ТекущийРемонт.ДатаОкончания, ТекущийРемонт.ДатаНачала, СтруктураТаблиц);
	Иначе
		
		// Дерево операций на форме построено только для текущего ремонта.
		// Если нужны все, то придеься строить самостоятельно из таблицы.
		МассивДанныхЗаполнения = ПолучитьНормыЗатратИзТаблицыОпераций(Форма.Объект.РемонтныеРаботы, Форма.Объект[ИмяТаблицыРемонтов], СтруктураТаблиц);
		
	КонецЕсли;

	Возврат МассивДанныхЗаполнения;
	
КонецФункции

// Возвращает массив структур с полями:
// -РемонтнаяРабота - ссылка на тех. операцию.
// -РемонтыОборудования_ID - ID ремонта.
// -ID - ID строки в дереве тех. операций.
// -СтруктураТаблиц - структура с таблицами значений МатериальныеЗатраты, ТрудовыеЗатраты, ИнструментыИТехника,
//  соответствующими одной тех. операции.
Функция ПолучитьНормыЗатратИзТаблицыОпераций(ТаблицаОпераций, ТаблицаРемонтов, Знач СтруктураТаблиц = Неопределено) Экспорт
	
	МассивРезультат = Новый массив;
	
	ТаблицаОперацийТЗ = ТаблицаОпераций;
	Если ТипЗнч(ТаблицаОпераций) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаОперацийТЗ = ТаблицаОпераций.Выгрузить();
	КонецЕсли;
	
	ТаблицаОперацийТЗ.Индексы.Добавить("РемонтыОборудования_ID, Родитель_ID");
	
	Для каждого ТекущийРемонт из ТаблицаРемонтов Цикл
		ДеревоОпераций = Новый ДеревоЗначений;
		ДеревоОпераций.Колонки.Добавить("ID");
		ДеревоОпераций.Колонки.Добавить("РемонтнаяРабота");
		ДеревоОпераций.Колонки.Добавить("Родитель_ID");
		ДеревоОпераций.Колонки.Добавить("РемонтыОборудования_ID");
		ДеревоОпераций.Колонки.Добавить("Количество");
		ДеревоОпераций.Колонки.Добавить("НомерОперацииПоПорядку");
		
		ПостроитьДеревоОпераций(ДеревоОпераций, ТаблицаОперацийТЗ, ТекущийРемонт.ID);
		торо_ЗаполнениеДокументов20.ПроставитьНомераОпераций(ДеревоОпераций);
		
		МассивДанныхЗаполнения = ПолучитьНормыЗатратИзВетвиДереваОпераций(ДеревоОпераций, ТекущийРемонт.ДатаНачала, ТекущийРемонт.ДатаОкончания, ТекущийРемонт.ДатаНачала, СтруктураТаблиц);
		Для каждого СтруктураДанныхЗаполнения из МассивДанныхЗаполнения Цикл
			МассивРезультат.Добавить(СтруктураДанныхЗаполнения);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

Процедура ПостроитьДеревоОпераций(ДеревоОпераций, ТаблицаОпраций, IDРемонта, IDРодителя = "") Экспорт
	
	МассивСтрок = ТаблицаОпраций.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, Родитель_ID", IDРемонта, IDРодителя));
	
	Для каждого СтрокаОперации из МассивСтрок Цикл
		НоваяСтрокаДерева = ДеревоОпераций.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаОперации);
		ПостроитьДеревоОпераций(НоваяСтрокаДерева, ТаблицаОпраций, IDРемонта, СтрокаОперации.ID);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив структур с полями:
// -РемонтнаяРабота - ссылка на тех. операцию.
// -РемонтыОборудования_ID - ID ремонта.
// -ID - ID строки в дереве тех. операций.
// -СтруктураТаблиц - структура с таблицами значений МатериальныеЗатраты, ТрудовыеЗатраты, ИнструментыИТехника,
//  соответствующими одной тех. операции.
Функция ПолучитьНормыЗатратИзВетвиДереваОпераций(ВеткаДереваОпераций, ДатаНачалаРемонта, ДатаОкончанияРемонта, ДатаВерсииТехКарт, Знач СтруктураТаблиц = Неопределено, ТехКартаРодитель = Неопределено, КорректироватьЗатратыПоКоличествуОпераций = Ложь) Экспорт
	
	Если СтруктураТаблиц = Неопределено Тогда
		СтруктураТаблиц = Новый Структура("МатериальныеЗатраты, ТрудовыеЗатраты, ИнструментыИТехника, МерыБезопасности");
	КонецЕсли;
	
	МассивРезультатов = Новый Массив;
	
	Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыДерево")
		ИЛИ ТипЗнч(ВеткаДереваОпераций) = Тип("ДеревоЗначений")
		ИЛИ ТипЗнч(ВеткаДереваОпераций.РемонтнаяРабота) = Тип("Строка") Тогда
		
		Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыДерево")
			ИЛИ ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыЭлементДерева") Тогда
			ВложенныеВетки = ВеткаДереваОпераций.ПолучитьЭлементы();
		Иначе
			ВложенныеВетки = ВеткаДереваОпераций.Строки;
		КонецЕсли;
		
		Для каждого Подветка из ВложенныеВетки Цикл 
			МассивРезультатовПодветки = ПолучитьНормыЗатратИзВетвиДереваОпераций(Подветка, ДатаНачалаРемонта, ДатаОкончанияРемонта, ДатаВерсииТехКарт, СтруктураТаблиц,,КорректироватьЗатратыПоКоличествуОпераций);
			Для каждого РезультатПодветки из МассивРезультатовПодветки Цикл
				МассивРезультатов.Добавить(РезультатПодветки);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВеткаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(ВеткаДереваОпераций.РемонтнаяРабота, ДатаВерсииТехКарт);
		
		Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыЭлементДерева") Тогда
			ВложенныеВетки = ВеткаДереваОпераций.ПолучитьЭлементы();
		Иначе
			ВложенныеВетки = ВеткаДереваОпераций.Строки;
		КонецЕсли;
		
		Для каждого Подветка из ВложенныеВетки Цикл 
			МассивРезультатовПодветки = ПолучитьНормыЗатратИзВетвиДереваОпераций(Подветка, ДатаНачалаРемонта, ДатаОкончанияРемонта, ДатаВерсииТехКарт, СтруктураТаблиц, ТехКарта,КорректироватьЗатратыПоКоличествуОпераций);
			Для каждого РезультатПодветки из МассивРезультатовПодветки Цикл
				МассивРезультатов.Добавить(РезультатПодветки);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВеткаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		ИДТехКартыРодителя = Неопределено;
		Если НЕ ЗначениеЗаполнено(ТехКартаРодитель) Тогда
			Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыЭлементДерева") Тогда
				РодительскаяВетка = ВеткаДереваОпераций.ПолучитьРодителя();
			Иначе
				РодительскаяВетка = ВеткаДереваОпераций.Родитель;
			КонецЕсли;
			
			Если РодительскаяВетка <> Неопределено Тогда
				ИДТехКартыРодителя = РодительскаяВетка.РемонтнаяРабота;
			КонецЕсли;
		КонецЕсли;
		
		Попытка 
			НомерОперацииПоПорядку = ВеткаДереваОпераций.НомерОперацииПоПорядку;
		Исключение
		    НомерОперацииПоПорядку = Неопределено;
		КонецПопытки;
		
		СтруктураТаблиц = ПолучитьЗатратыИзТехОперации(ВеткаДереваОпераций.РемонтнаяРабота, СтруктураТаблиц, ИДТехКартыРодителя, ТехКартаРодитель, ДатаВерсииТехКарт, ВеткаДереваОпераций.ID, ВеткаДереваОпераций.Количество, НомерОперацииПоПорядку, КорректироватьЗатратыПоКоличествуОпераций);
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("РемонтнаяРабота", ВеткаДереваОпераций.РемонтнаяРабота);
		СтруктураРезультата.Вставить("Количество", ВеткаДереваОпераций.Количество);
		СтруктураРезультата.Вставить("РемонтыОборудования_ID", ВеткаДереваОпераций.РемонтыОборудования_ID);
		СтруктураРезультата.Вставить("ID", ВеткаДереваОпераций.ID);
		СтруктураРезультата.Вставить("ДатаНачала", ДатаНачалаРемонта);
		СтруктураРезультата.Вставить("ДатаОкончания", ДатаОкончанияРемонта);
		СтруктураРезультата.Вставить("СтруктураТаблиц", СтруктураТаблиц);
		МассивРезультатов.Добавить(СтруктураРезультата);
	КонецЕсли;
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьЗатратыИзТехОперации(ТехОперация, Знач СтруктураТаблиц = Неопределено, ИдентификаторТехКарты = Неопределено, ТехКарта = Неопределено, 
												ДатаВерсииТехКарт = Неопределено, ИдентификаторТехОперации = Неопределено, КоличествоОпераций = Неопределено, 
												НомерОперацииПоПорядку = Неопределено, КорректироватьЗатратыПоКоличествуОпераций = Ложь)
	
	Если СтруктураТаблиц = Неопределено Тогда
		СтруктураТаблиц = Новый Структура("МатериальныеЗатраты, ТрудовыеЗатраты, ИнструментыИТехника, МерыБезопасности");
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	Для каждого КлючИЗначение из СтруктураТаблиц Цикл 
		СтруктураРезультата.Вставить(КлючИЗначение.Ключ, Неопределено);
	КонецЦикла;
	
	СтрокаОперацииВТехКарте = Неопределено;
	БратьИзТехКарты = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТехКарта) И ЗначениеЗаполнено(ИдентификаторТехКарты) Тогда
		ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(ИдентификаторТехКарты, ДатаВерсииТехКарт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТехКарта) Тогда
		Если НомерОперацииПоПорядку <> Неопределено Тогда
			// отбор напрямую по НомерСтроки не работает
			ТаблицаСпискаОпераций = ТехКарта.СписокОпераций.Выгрузить();
			СтруктураПоиска = Новый Структура("Операция, НомерСтроки", ТехОперация, НомерОперацииПоПорядку); 
			СтрокиОперацииВТехКарте = ТаблицаСпискаОпераций.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОперацииВТехКарте.Количество() > 0 Тогда
				БратьИзТехКарты = Истина;
				СтрокаОперацииВТехКарте = СтрокиОперацииВТехКарте[0];
			КонецЕсли;
		Иначе
			СтруктураПоиска = Новый Структура("Операция, ID", ТехОперация, ИдентификаторТехОперации);
			СтрокиОперацииВТехКарте = ТехКарта.СписокОпераций.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОперацииВТехКарте.Количество() > 0 Тогда
				БратьИзТехКарты = Истина;
				СтрокаОперацииВТехКарте = СтрокиОперацииВТехКарте[0];
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если БратьИзТехКарты Тогда
		
		Для каждого КлючИЗначение из СтруктураТаблиц Цикл 
			МассивСтрок = ТехКарта[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаОперацииВТехКарте.ID));
			МассивСтрокДляИзменения = ТехКарта[КлючИЗначение.Ключ].Выгрузить(МассивСтрок);
			Для каждого Строка Из МассивСтрокДляИзменения Цикл
				Если ЗначениеЗаполнено(ИдентификаторТехОперации) Тогда
					Строка.ID = ИдентификаторТехОперации;
				КонецЕсли;
			КонецЦикла; 
			
			Если КорректироватьЗатратыПоКоличествуОпераций И ЗначениеЗаполнено(КоличествоОпераций) Тогда
				Множитель = КоличествоОпераций / СтрокаОперацииВТехКарте.Количество;
				Если КлючИЗначение.Ключ = "ТрудовыеЗатраты" Тогда
					Для каждого Строка Из МассивСтрокДляИзменения Цикл
						Строка.ВремяРаботы = Строка.ВремяРаботы * Множитель;
					КонецЦикла;	
				ИначеЕсли КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
					Для каждого Строка Из МассивСтрокДляИзменения Цикл
						Строка.Количество = Строка.Количество * Множитель;
					КонецЦикла;						
                КонецЕсли;
			КонецЕсли; 
			
			СтруктураРезультата[КлючИЗначение.Ключ] = МассивСтрокДляИзменения;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого КлючИЗначение из СтруктураТаблиц Цикл 
			
			Если КлючИЗначение.Ключ = "МерыБезопасности" Тогда
				Продолжить;
			КонецЕсли; 
			
			ТаблицаТО = ТехОперация[КлючИЗначение.Ключ].Выгрузить();
			ТаблицаТО.Колонки.Добавить("ID");
			ТаблицаТО.Колонки.Добавить("Операция");
			ТаблицаТО.ЗаполнитьЗначения(ИдентификаторТехОперации, "ID");
			ТаблицаТО.ЗаполнитьЗначения(ТехОперация,"Операция");
		
			Если КлючИЗначение.Ключ = "ТрудовыеЗатраты" Тогда
				
				Если ЗначениеЗаполнено(КоличествоОпераций) И Не КоличествоОпераций = 1 Тогда
					Для каждого ТрудоваяЗатрата Из ТаблицаТО Цикл
					    ТрудоваяЗатрата.ВремяРаботы = ТрудоваяЗатрата.ВремяРаботы * КоличествоОпераций;
					КонецЦикла; 
				КонецЕсли;
				
				ТаблицаТО.Колонки.Добавить("ВремяРаботыНаЕдиницу");
				ТаблицаТО.ЗагрузитьКолонку(ТаблицаТО.ВыгрузитьКолонку("ВремяРаботы"), "ВремяРаботыНаЕдиницу");
				
			ИначеЕсли КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
				
				ТаблицаТО.Колонки.Добавить("КоличествоНаЕдиницу");
				ТаблицаТО.Колонки.Добавить("КоличествоУпаковокНаЕдиницу");
				ТаблицаТО.ЗагрузитьКолонку(ТаблицаТО.ВыгрузитьКолонку("Количество"),"КоличествоНаЕдиницу");
				ТаблицаТО.ЗагрузитьКолонку(ТаблицаТО.ВыгрузитьКолонку("КоличествоУпаковок"),"КоличествоУпаковокНаЕдиницу");
				Если ЗначениеЗаполнено(КоличествоОпераций) Тогда
					Для каждого МатериальнаяЗатрата Из ТаблицаТО Цикл
					    МатериальнаяЗатрата.Количество = МатериальнаяЗатрата.Количество * КоличествоОпераций;
						МатериальнаяЗатрата.КоличествоУпаковок = МатериальнаяЗатрата.КоличествоУпаковок * КоличествоОпераций;
					КонецЦикла; 
				КонецЕсли;
				
			ИначеЕсли КлючИЗначение.Ключ = "ИнструментыИТехника" Тогда
				
				ТаблицаТО.Колонки.Добавить("ВремяРаботыНаЕдиницу");
				ТаблицаТО.ЗагрузитьКолонку(ТаблицаТО.ВыгрузитьКолонку("ВремяРаботы"),"ВремяРаботыНаЕдиницу");
				
			КонецЕсли;
			
			СтруктураРезультата[КлючИЗначение.Ключ] = ТаблицаТО;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ПолучитьДанныеДляЗаполненияПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта, КомандаЗаполнения)
	
	ИмяТаблицыРемонтов = "РемонтыОборудования";
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ИмяТаблицыРемонтов = "РегламентныеМероприятия";
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ИмяТаблицыРемонтов = "Мероприятия";
	КонецЕсли;
	
	СписокИДРемРабот = Новый Массив;
	СписокИДТехКарт = Новый Массив;
	
	Если ИДТекущегоРемонта <> Неопределено Тогда
		ТекущийРемонт = Форма.Объект[ИмяТаблицыРемонтов].НайтиПоИдентификатору(ИДТекущегоРемонта);
		Если ТекущийРемонт = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СписокИДРемонтов = Новый Массив;
		СписокИДРемонтов.Добавить(ТекущийРемонт.ID);
		
		Если КомандаЗаполнения <> "Запчасти" Тогда
			
			СписокИДРемРабот = Новый Массив;
			СписокИДТехКарт = Новый Массив;
			Если ИДТекущейОперации <> Неопределено Тогда
				ВеткаДереваОпераций =  Форма.ДеревоРемонтныхРабот.НайтиПоИдентификатору(ИДТекущейОперации);
				Если ВеткаДереваОпераций = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
				СписокИДРемРабот.Добавить(ВеткаДереваОпераций.ID);
				Если ТипЗнч(ВеткаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					СписокИДТехКарт.Добавить(Новый Структура("ID, РемонтыОборудования_ID",ВеткаДереваОпераций.ID, ВеткаДереваОпераций.РемонтыОборудования_ID));
				КонецЕсли;
			Иначе
				ВеткаДереваОпераций = Форма.ДеревоРемонтныхРабот;
			КонецЕсли;
			
			МассивСтрокДереваОпераций = Новый массив;
			торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДереваОпераций, ВеткаДереваОпераций.ПолучитьЭлементы());
			Для каждого СтрокаДереваОпераций из МассивСтрокДереваОпераций Цикл
				СписокИДРемРабот.Добавить(СтрокаДереваОпераций.ID);
				Если ТипЗнч(СтрокаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					СписокИДТехКарт.Добавить(Новый Структура("ID, РемонтыОборудования_ID",СтрокаДереваОпераций.ID, СтрокаДереваОпераций.РемонтыОборудования_ID));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		СписокИДРемонтов = Форма.Объект[ИмяТаблицыРемонтов].Выгрузить().ВыгрузитьКолонку("ID");
		
		Если КомандаЗаполнения <> "Запчасти" Тогда
			
			СписокИДРемРабот = Форма.Объект["РемонтныеРаботы"].Выгрузить().ВыгрузитьКолонку("ID");
			СписокИДТехКарт = Новый Массив;
			Для каждого СтрокаДереваОпераций из Форма.Объект["РемонтныеРаботы"] Цикл
				Если ТипЗнч(СтрокаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					СписокИДТехКарт.Добавить(Новый Структура("ID, РемонтыОборудования_ID",СтрокаДереваОпераций.ID, СтрокаДереваОпераций.РемонтыОборудования_ID));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивДокументовОснований = Форма.Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	СтруктураДанных = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, Форма.Объект, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, КомандаЗаполнения);
		
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, КомандаЗаполнения) Экспорт
	
	СтруктураДанных = Новый Структура;
	КвалификаторыСтроки = Новый КвалификаторыСтроки(36);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив, , КвалификаторыСтроки);
	
	Если КомандаЗаполнения = "Исполнители" Тогда
		табИсполнителей = Новый ТаблицаЗначений;
		табИсполнителей.Колонки.Добавить("РемонтыОборудования_ID");
		табИсполнителей.Колонки.Добавить("ID");
		табИсполнителей.Колонки.Добавить("Квалификация");
		табИсполнителей.Колонки.Добавить("ДатаНачала");
		табИсполнителей.Колонки.Добавить("ДатаОкончания");
		табИсполнителей.Колонки.Добавить("Сотрудник");
		табИсполнителей.Колонки.Добавить("КТУ");
		табИсполнителей.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
		табИсполнителей.Колонки.Добавить("СуммаКНачислению", Новый ОписаниеТипов("Число"));
		табИсполнителей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
				
		табПодрядчиков = Новый ТаблицаЗначений;
		табПодрядчиков.Колонки.Добавить("РемонтыОборудования_ID");
		табПодрядчиков.Колонки.Добавить("ID");
		табПодрядчиков.Колонки.Добавить("Контрагент");
		табПодрядчиков.Колонки.Добавить("ДоговорКонтрагента");
		табПодрядчиков.Колонки.Добавить("ДатаНачала");
		табПодрядчиков.Колонки.Добавить("ДатаОкончания");
		
		табИсполнителейСПодразделениями = Новый ТаблицаЗначений;
		табИсполнителейСПодразделениями.Колонки.Добавить("РемонтыОборудования_ID");
		табИсполнителейСПодразделениями.Колонки.Добавить("Исполнитель");
		табИсполнителейСПодразделениями.Колонки.Добавить("УточнениеИсполнителя");
		табИсполнителейСПодразделениями.Колонки.Добавить("ДатаНачала");
		табИсполнителейСПодразделениями.Колонки.Добавить("ДатаОкончания");
		
		Для каждого ДокументОснование из МассивДокументовОснований Цикл
			ПолучитьИсполнителейИзДокументаОснования(ДокументОснование, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, табИсполнителей, табПодрядчиков, табИсполнителейСПодразделениями);	
		КонецЦикла;
		
		табИсполнителей.Свернуть("РемонтыОборудования_ID, ID, Квалификация, ДатаНачала, ДатаОкончания, Сотрудник, КТУ, ВремяРаботы, СуммаКНачислению, Количество");
		табПодрядчиков.Свернуть("РемонтыОборудования_ID, ID, Контрагент, ДоговорКонтрагента, ДатаНачала, ДатаОкончания");
		табИсполнителейСПодразделениями.Свернуть("РемонтыОборудования_ID, Исполнитель, УточнениеИсполнителя, ДатаНачала, ДатаОкончания");
		
		СтруктураДанных.Вставить("Исполнители", табИсполнителей);
		СтруктураДанных.Вставить("Подрядчики", табПодрядчиков);
		СтруктураДанных.Вставить("ИсполнителиСПодразделениями", табИсполнителейСПодразделениями);		
		
	ИначеЕсли КомандаЗаполнения = "Материалы" Тогда
		
		табМатериалов = Новый ТаблицаЗначений;
		
		табМатериалов.Колонки.Добавить("РемонтыОборудования_ID", ОписаниеТиповСтрока);
		табМатериалов.Колонки.Добавить("ID", ОписаниеТиповСтрока);
		табМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		табМатериалов.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
		табМатериалов.Колонки.Добавить("ЕдиницаИзмерения");
		табМатериалов.Колонки.Добавить("Количество");
		табМатериалов.Колонки.Добавить("ХарактеристикиИспользуются");
		табМатериалов.Колонки.Добавить("Сумма");
		табМатериалов.Колонки.Добавить("КоличествоЕдиниц");
		табМатериалов.Колонки.Добавить("КоличествоРемонтныхРабот");
		
		Для каждого ДокументОснование из МассивДокументовОснований Цикл
			ПолучитьМатериалыИзДокументаОснования(ДокументОснование, СписокИДРемонтов, СписокИДРемРабот, табМатериалов, ЗаполняемыйДокумент);
		КонецЦикла;
		
		СтруктураДанных.Вставить("Материалы", табМатериалов);
		
	ИначеЕсли КомандаЗаполнения = "Запчасти" Тогда
		табЗапчастей = Новый ТаблицаЗначений;
		табЗапчастей.Колонки.Добавить("РемонтыОборудования_ID", ОписаниеТиповСтрока);
		
		табЗапчастей.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		табЗапчастей.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		табЗапчастей.Колонки.Добавить("Количество");
		табЗапчастей.Колонки.Добавить("ЕдиницаИзмерения");
		
		табЗапчастей.Колонки.Добавить("НоменклатураНовая");
		табЗапчастей.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
		табЗапчастей.Колонки.Добавить("КоличествоНовое");
		табЗапчастей.Колонки.Добавить("ЕдиницаИзмеренияНовая");
		
		Для каждого ДокументОснование из МассивДокументовОснований Цикл
			ПолучитьЗапчастиИзДокументаОснования(ДокументОснование, СписокИДРемонтов, табЗапчастей);
		КонецЦикла;
		
		СтруктураДанных.Вставить("Запчасти", табЗапчастей);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ПолучитьИсполнителейИзДокументаОснования(ДокументОснование, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, табИсполнителей, табПодрядчиков, табИсполнителейСПодразделениями)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка КАК Ссылка,
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID КАК РемонтыОборудования_ID,
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Исполнитель КАК Контрагент,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
		|	1 КАК Количество
		|ИЗ
		|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		|		ПО торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		|ГДЕ
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка = &Ссылка
		|	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID В(&ID)";		
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.торо_ГрафикРегламентныхМероприятийТОиР", "Документ.торо_ПланГрафикРемонта");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ID", СписокИДРемонтов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		стрПоиска = Новый Структура("РемонтыОборудования_ID", "");
		тзРР = ЗаполняемыйДокумент.РемонтныеРаботы.Выгрузить();
		тзРР.Индексы.Добавить("РемонтыОборудования_ID");
		
		МассивИДТехКартДляПоиска = Новый Массив;
		Если СписокИДТехКарт.Количество() > 0 Тогда
			Если ТипЗнч(СписокИДТехКарт[0]) = Тип("Строка") Тогда
				МассивИДТехКартДляПоиска = СписокИДТехКарт;
			Иначе
				Для каждого ИДТехКарты из СписокИДТехКарт Цикл
					МассивИДТехКартДляПоиска.Добавить(ИДТехКарты.ID);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				стрПоиска.РемонтыОборудования_ID = Выборка.РемонтыОборудования_ID;
				
				масСтрок = тзРР.НайтиСтроки(стрПоиска);
				Для каждого текСтрока из масСтрок Цикл
					Если ТипЗнч(текСтрока.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
						Если МассивИДТехКартДляПоиска.Найти(текСтрока.ID) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						НовСтр = табПодрядчиков.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
						НовСтр.ID = текСтрока.ID;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			НовСтр = табИсполнителейСПодразделениями.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
			НовСтр.Исполнитель = Выборка.Контрагент;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")	Тогда
		
		ПолучитьИсполнителейИзДокументаОснования_Наряд(ДокументОснование, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, табИсполнителей, табПодрядчиков, табИсполнителейСПодразделениями);

   ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка КАК Ссылка,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID КАК ID,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы КАК ВремяРаботы,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация КАК Квалификация,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество КАК Количество,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	1 КАК КТУ,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		|		ПО торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		|ГДЕ
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка = &Ссылка
		|	И торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
		|	И торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID В(&ID)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Ссылка КАК Ссылка,
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Исполнитель КАК Исполнитель,
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.УточнениеИсполнителя КАК УточнениеИсполнителя,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ИсполнителиПоРемонтам КАК торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		|		ПО торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.РемонтыОборудования_ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		|ГДЕ
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Ссылка = &Ссылка
		|	И торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.РемонтыОборудования_ID В(&РемонтыОборудования_ID)";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		Запрос.УстановитьПараметр("ID", СписокИДРемРабот);
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаТрудозатрат = Результат[0].Выбрать();
		ВыборкаИсполнителей = Результат[1].Выбрать();
		
		Пока ВыборкаТрудозатрат.Следующий() Цикл
			Если ТипЗнч(ЗаполняемыйДокумент.Ссылка) <> Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
				// от задвоения 
				Для Счетчик = 1 По ВыборкаТрудозатрат.Количество Цикл
					НовСтр = табИсполнителей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаТрудозатрат);
				КонецЦикла; 
			Иначе
				НовСтр = табИсполнителей.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаТрудозатрат);
			КонецЕсли; 
		КонецЦикла;
		
		Пока ВыборкаИсполнителей.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаИсполнителей.Исполнитель) Тогда
				НовСтр = табИсполнителейСПодразделениями.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаИсполнителей);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК Ссылка,
		               |	торо_ВыявленныеДефектыСписокДефектов.ID КАК РемонтыОборудования_ID,
		               |	торо_ВыявленныеДефектыСписокДефектов.ПодразделениеИсполнитель КАК Исполнитель,
		               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
		               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		               |		ПО торо_ВыявленныеДефектыСписокДефектов.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
					   |ГДЕ
					   |	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка
		               |	И торо_ВыявленныеДефектыСписокДефектов.ID В (&ID)";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ID", СписокИДРемонтов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
				НовСтр = табИсполнителейСПодразделениями.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ОбследованноеОборудование.Ссылка КАК Ссылка,
		               |	ОбследованноеОборудование.ID КАК РемонтыОборудования_ID,
		               |	ОбследованноеОборудование.Исполнитель КАК Исполнитель,
		               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
		               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК ОбследованноеОборудование
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		               |		ПО ОбследованноеОборудование.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
					   |ГДЕ
					   |	ОбследованноеОборудование.Ссылка = &Ссылка
		               |	И ОбследованноеОборудование.ID В (&ID)";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ID", СписокИДРемонтов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
				НовСтр = табИсполнителейСПодразделениями.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьИсполнителейИзДокументаОснования_Наряд(ДокументОснование, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, табИсполнителей, табПодрядчиков, табИсполнителейСПодразделениями)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID КАК ID,
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаНачала КАК ДатаНачала,
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ТаблицаРемонтов
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка = &Ссылка
	|	И торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID В(&РемонтыОборудования_ID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.Ссылка КАК Ссылка,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.ID КАК ID,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.Квалификация КАК Квалификация,
	|	ВЫБОР
	|		КОГДА торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ТаблицаРемонтов.ДатаНачала
	|		ИНАЧЕ торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ТаблицаРемонтов.ДатаОкончания
	|		ИНАЧЕ торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА торо_НарядНаРегламентноеМероприятиеИсполнители.ВремяРаботы = 0
	|			ТОГДА ВЫБОР
	|					КОГДА торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА 0
	|					ИНАЧЕ РАЗНОСТЬДАТ(торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаНачала, торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаОкончания, СЕКУНДА)
	|				КОНЕЦ
	|		ИНАЧЕ торо_НарядНаРегламентноеМероприятиеИсполнители.ВремяРаботы
	|	КОНЕЦ КАК ВремяРаботы,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.Сотрудник КАК Сотрудник,
	|	1 КАК КТУ
	|ПОМЕСТИТЬ ВТ_ТаблицаИсполнителей
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.Исполнители КАК торо_НарядНаРегламентноеМероприятиеИсполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаРемонтов КАК ВТ_ТаблицаРемонтов
	|		ПО торо_НарядНаРегламентноеМероприятиеИсполнители.РемонтыОборудования_ID = ВТ_ТаблицаРемонтов.ID
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.Ссылка = &Ссылка
	|	И торо_НарядНаРегламентноеМероприятиеИсполнители.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
	|	И торо_НарядНаРегламентноеМероприятиеИсполнители.ID В(&ID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиямОстатки.IDРемонта КАК IDРемонта,
	|	торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиямОстатки.IDОперации КАК IDОперации,
	|	торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиямОстатки.ПроцентРемонтаОстаток КАК ПроцентВыполненный
	|ПОМЕСТИТЬ ВТ_ВыполняемыеРаботыОстатки
	|ИЗ
	|	РегистрНакопления.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Остатки(
	|			&Дата,
	|			IDОперации В (&ID)
	|				И IDРемонта В (&РемонтыОборудования_ID)) КАК торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиямОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ЗапланированныеРемонтныеРаботы.IDРемонта КАК IDРемонта,
	|	торо_ЗапланированныеРемонтныеРаботы.IDОперации КАК IDОперации,
	|	СУММА(торо_ЗапланированныеРемонтныеРаботы.ПроцентРемонта) КАК ПроцентПлановый
	|ПОМЕСТИТЬ ВТ_ЗапланированныеРемонтыОбороты
	|ИЗ
	|	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
	|ГДЕ
	|	торо_ЗапланированныеРемонтныеРаботы.Активность
	|	И торо_ЗапланированныеРемонтныеРаботы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И торо_ЗапланированныеРемонтныеРаботы.Период <= &Дата
	|	И торо_ЗапланированныеРемонтныеРаботы.IDРемонта В(&РемонтыОборудования_ID)
	|	И торо_ЗапланированныеРемонтныеРаботы.IDОперации В(&ID)
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ЗапланированныеРемонтныеРаботы.IDРемонта,
	|	торо_ЗапланированныеРемонтныеРаботы.IDОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.ID КАК ID,
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ВТ_ТаблицаОпераций
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Ссылка = &Ссылка
	|	И торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОпераций_ТехОперации.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаОпераций_ТехОперации.ID КАК ID,
	|	ВТ_ТаблицаОпераций_ТехОперации.РемонтнаяРабота КАК ТехОперация,
	|	ЕСТЬNULL(ВТ_ТаблицаОпераций_ТехКарты.РемонтнаяРабота, НЕОПРЕДЕЛЕНО) КАК ИдТехКарты,
	|	ВТ_ТаблицаРемонтов.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТ_ТаблицаОперацийСРодителями
	|ИЗ
	|	ВТ_ТаблицаОпераций КАК ВТ_ТаблицаОпераций_ТехОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаОпераций КАК ВТ_ТаблицаОпераций_ТехКарты
	|		ПО ВТ_ТаблицаОпераций_ТехОперации.РемонтыОборудования_ID = ВТ_ТаблицаОпераций_ТехКарты.РемонтыОборудования_ID
	|			И ВТ_ТаблицаОпераций_ТехОперации.Родитель_ID = ВТ_ТаблицаОпераций_ТехКарты.ID
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаРемонтов КАК ВТ_ТаблицаРемонтов
	|		ПО ВТ_ТаблицаОпераций_ТехОперации.РемонтыОборудования_ID = ВТ_ТаблицаРемонтов.ID
	|ГДЕ
	|	ВТ_ТаблицаОпераций_ТехОперации.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации
	|	И ВТ_ТаблицаОпераций_ТехОперации.ID В(&ID)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРемонтов.ID КАК ID,
	|	ВТ_ТаблицаРемонтов.ДатаНачала КАК ДатаНачала,
	|	торо_СтоимостьЧасаКвалификации.Квалификация КАК Квалификация,
	|	МАКСИМУМ(торо_СтоимостьЧасаКвалификации.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыСрезаСтоимостиКвалификаций
	|ИЗ
	|	ВТ_ТаблицаРемонтов КАК ВТ_ТаблицаРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК торо_СтоимостьЧасаКвалификации
	|		ПО ВТ_ТаблицаРемонтов.ДатаНачала >= торо_СтоимостьЧасаКвалификации.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаРемонтов.ДатаНачала,
	|	ВТ_ТаблицаРемонтов.ID,
	|	торо_СтоимостьЧасаКвалификации.Квалификация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	торо_СтоимостьЧасаКвалификации.Квалификация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыСрезаСтоимостиКвалификаций.ID КАК ID,
	|	ВТ_ДатыСрезаСтоимостиКвалификаций.ДатаНачала КАК ДатаНачала,
	|	торо_СтоимостьЧасаКвалификации.Квалификация КАК Квалификация,
	|	торо_СтоимостьЧасаКвалификации.Валюта КАК Валюта,
	|	торо_СтоимостьЧасаКвалификации.Стоимость КАК Стоимость
	|ПОМЕСТИТЬ ВТ_СтоимостиКвалификаций
	|ИЗ
	|	ВТ_ДатыСрезаСтоимостиКвалификаций КАК ВТ_ДатыСрезаСтоимостиКвалификаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК торо_СтоимостьЧасаКвалификации
	|		ПО ВТ_ДатыСрезаСтоимостиКвалификаций.Период = торо_СтоимостьЧасаКвалификации.Период
	|			И ВТ_ДатыСрезаСтоимостиКвалификаций.Квалификация = торо_СтоимостьЧасаКвалификации.Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СтоимостиКвалификаций.ID КАК ID,
	|	ВТ_СтоимостиКвалификаций.ДатаНачала КАК ДатаНачала,
	|	ВТ_СтоимостиКвалификаций.Квалификация КАК Квалификация,
	|	ВТ_СтоимостиКвалификаций.Валюта КАК Валюта,
	|	ВТ_СтоимостиКвалификаций.Стоимость КАК Стоимость,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыСрезаКурсовВалют
	|ИЗ
	|	ВТ_СтоимостиКвалификаций КАК ВТ_СтоимостиКвалификаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_СтоимостиКвалификаций.ДатаНачала >= КурсыВалют.Период
	|			И ВТ_СтоимостиКвалификаций.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СтоимостиКвалификаций.ДатаНачала,
	|	ВТ_СтоимостиКвалификаций.Квалификация,
	|	ВТ_СтоимостиКвалификаций.Валюта,
	|	ВТ_СтоимостиКвалификаций.Стоимость,
	|	ВТ_СтоимостиКвалификаций.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыСрезаКурсовВалют.ID КАК ID,
	|	ВТ_ДатыСрезаКурсовВалют.ДатаНачала КАК ДатаНачала,
	|	ВТ_ДатыСрезаКурсовВалют.Квалификация КАК Квалификация,
	|	ВТ_ДатыСрезаКурсовВалют.Валюта КАК Валюта,
	|	ВТ_ДатыСрезаКурсовВалют.Стоимость КАК Стоимость,
	|	КурсыВалют.Курс КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_СтоимостиКвалификацийСКурсамиВалют
	|ИЗ
	|	ВТ_ДатыСрезаКурсовВалют КАК ВТ_ДатыСрезаКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_ДатыСрезаКурсовВалют.Валюта = КурсыВалют.Валюта
	|			И ВТ_ДатыСрезаКурсовВалют.Период = КурсыВалют.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID,
	|	Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаОперацийСРодителями.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаОперацийСРодителями.ID КАК ID,
	|	ВТ_ТаблицаОперацийСРодителями.ТехОперация КАК ТехОперация,
	|	ВТ_ТаблицаОперацийСРодителями.ИдТехКарты КАК ИдТехКарты,
	|	ВТ_ТаблицаОперацийСРодителями.ДатаНачала КАК ДатаНачала,
	|	МАКСИМУМ(торо_ВерсииТехКарт.Период) КАК ДатаВерсииТехКарты
	|ПОМЕСТИТЬ ВТ_ДатыСрезаТехКарт
	|ИЗ
	|	ВТ_ТаблицаОперацийСРодителями КАК ВТ_ТаблицаОперацийСРодителями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|		ПО ВТ_ТаблицаОперацийСРодителями.ДатаНачала >= торо_ВерсииТехКарт.Период
	|			И ВТ_ТаблицаОперацийСРодителями.ИдТехКарты = торо_ВерсииТехКарт.ИдентификаторТехКарты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОперацийСРодителями.РемонтыОборудования_ID,
	|	ВТ_ТаблицаОперацийСРодителями.ID,
	|	ВТ_ТаблицаОперацийСРодителями.ТехОперация,
	|	ВТ_ТаблицаОперацийСРодителями.ИдТехКарты,
	|	ВТ_ТаблицаОперацийСРодителями.ДатаНачала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВерсииТехКарты,
	|	ИдТехКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДатыСрезаТехКарт.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ДатыСрезаТехКарт.ID КАК ID,
	|	ВТ_ДатыСрезаТехКарт.ТехОперация КАК ТехОперация,
	|	ЕСТЬNULL(торо_ВерсииТехКарт.ТехКарта, НЕОПРЕДЕЛЕНО) КАК ТехКарта
	|ПОМЕСТИТЬ ВТ_ТаблицаОперацийСТехКартами
	|ИЗ
	|	ВТ_ДатыСрезаТехКарт КАК ВТ_ДатыСрезаТехКарт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|		ПО ВТ_ДатыСрезаТехКарт.ДатаВерсииТехКарты = торо_ВерсииТехКарт.Период
	|			И ВТ_ДатыСрезаТехКарт.ИдТехКарты = торо_ВерсииТехКарт.ИдентификаторТехКарты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТехОперация,
	|	ТехКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаОперацийСТехКартами.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаОперацийСТехКартами.ID КАК ID,
	|	ВТ_ТаблицаОперацийСТехКартами.ТехОперация КАК ТехОперация,
	|	ВТ_ТаблицаОперацийСТехКартами.ТехКарта КАК ТехКарта,
	|	ЕСТЬNULL(торо_ТехКартыТрудовыеЗатраты.ВремяРаботы, торо_ТехнологическиеОперацииТрудовыеЗатраты.ВремяРаботы) КАК ВремяРаботы,
	|	ЕСТЬNULL(торо_ТехКартыТрудовыеЗатраты.Квалификация, торо_ТехнологическиеОперацииТрудовыеЗатраты.Квалификация) КАК Квалификация,
	|	ЕСТЬNULL(торо_ТехКартыТрудовыеЗатраты.Количество, торо_ТехнологическиеОперацииТрудовыеЗатраты.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаНорм
	|ИЗ
	|	ВТ_ТаблицаОперацийСТехКартами КАК ВТ_ТаблицаОперацийСТехКартами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
	|		ПО ВТ_ТаблицаОперацийСТехКартами.ТехКарта = торо_ТехКартыТрудовыеЗатраты.Ссылка
	|			И ВТ_ТаблицаОперацийСТехКартами.ТехОперация = торо_ТехКартыТрудовыеЗатраты.Операция
	|			И ВТ_ТаблицаОперацийСТехКартами.ID = торо_ТехКартыТрудовыеЗатраты.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации.ТрудовыеЗатраты КАК торо_ТехнологическиеОперацииТрудовыеЗатраты
	|		ПО (ВЫБОР
	|				КОГДА торо_ТехКартыТрудовыеЗатраты.Ссылка ЕСТЬ NULL
	|					ТОГДА ВТ_ТаблицаОперацийСТехКартами.ТехОперация = торо_ТехнологическиеОперацииТрудовыеЗатраты.Ссылка
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ(торо_ТехКартыТрудовыеЗатраты.Ссылка ЕСТЬ NULL
	|				И торо_ТехнологическиеОперацииТрудовыеЗатраты.Ссылка ЕСТЬ NULL)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID,
	|	Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИсполнителей.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаИсполнителей.ID КАК ID,
	|	ВТ_ТаблицаИсполнителей.Квалификация КАК Квалификация,
	|	ВТ_ТаблицаИсполнителей.ДатаНачала КАК ДатаНачала,
	|	ВТ_ТаблицаИсполнителей.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ТаблицаИсполнителей.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаИсполнителей.КТУ КАК КТУ,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаИсполнителей.ВремяРаботы = 0
	|			ТОГДА ЕСТЬNULL(ВТ_ТаблицаНорм.ВремяРаботы, 0)
	|		ИНАЧЕ ВТ_ТаблицаИсполнителей.ВремяРаботы
	|	КОНЕЦ КАК ВремяРаботыПолное,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ЗапланированныеРемонтыОбороты.ПроцентПлановый, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ВыполняемыеРаботыОстатки.ПроцентВыполненный, 0) / ВТ_ЗапланированныеРемонтыОбороты.ПроцентПлановый
	|	КОНЕЦ КАК ДоляВыолнения,
	|	ЕСТЬNULL(ВТ_СтоимостиКвалификацийСКурсамиВалют.Стоимость, 0) * ЕСТЬNULL(ВТ_СтоимостиКвалификацийСКурсамиВалют.Курс, 0) / ЕСТЬNULL(ВТ_СтоимостиКвалификацийСКурсамиВалют.Кратность, 1) КАК СтоимостьЧаса
	|ПОМЕСТИТЬ ВТ_ТаблицаРасчетЧастейФормул
	|ИЗ
	|	ВТ_ТаблицаИсполнителей КАК ВТ_ТаблицаИсполнителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыполняемыеРаботыОстатки КАК ВТ_ВыполняемыеРаботыОстатки
	|		ПО ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID = ВТ_ВыполняемыеРаботыОстатки.IDРемонта
	|			И ВТ_ТаблицаИсполнителей.ID = ВТ_ВыполняемыеРаботыОстатки.IDОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗапланированныеРемонтыОбороты КАК ВТ_ЗапланированныеРемонтыОбороты
	|		ПО ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID = ВТ_ЗапланированныеРемонтыОбороты.IDРемонта
	|			И ВТ_ТаблицаИсполнителей.ID = ВТ_ЗапланированныеРемонтыОбороты.IDОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаНорм КАК ВТ_ТаблицаНорм
	|		ПО ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID = ВТ_ТаблицаНорм.РемонтыОборудования_ID
	|			И ВТ_ТаблицаИсполнителей.ID = ВТ_ТаблицаНорм.ID
	|			И ВТ_ТаблицаИсполнителей.Квалификация = ВТ_ТаблицаНорм.Квалификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостиКвалификацийСКурсамиВалют КАК ВТ_СтоимостиКвалификацийСКурсамиВалют
	|		ПО ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID = ВТ_СтоимостиКвалификацийСКурсамиВалют.ID
	|			И ВТ_ТаблицаИсполнителей.Квалификация = ВТ_СтоимостиКвалификацийСКурсамиВалют.Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРасчетЧастейФормул.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаРасчетЧастейФормул.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаРасчетЧастейФормул.ID КАК ID,
	|	ВТ_ТаблицаРасчетЧастейФормул.Квалификация КАК Квалификация,
	|	ВТ_ТаблицаРасчетЧастейФормул.ДатаНачала КАК ДатаНачала,
	|	ВТ_ТаблицаРасчетЧастейФормул.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ТаблицаРасчетЧастейФормул.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаРасчетЧастейФормул.КТУ КАК КТУ,
	|	1 КАК Количество,
	|	ВТ_ТаблицаРасчетЧастейФормул.ВремяРаботыПолное * ВТ_ТаблицаРасчетЧастейФормул.ДоляВыолнения КАК ВремяРаботы,
	|	ВТ_ТаблицаРасчетЧастейФормул.ВремяРаботыПолное * ВТ_ТаблицаРасчетЧастейФормул.ДоляВыолнения * ВТ_ТаблицаРасчетЧастейФормул.СтоимостьЧаса / 3600 КАК СуммаКНачислению
	|ПОМЕСТИТЬ ВТ_ТаблицаИтог
	|ИЗ
	|	ВТ_ТаблицаРасчетЧастейФормул КАК ВТ_ТаблицаРасчетЧастейФормул
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID,
	|	Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИтог.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаИтог.ID КАК ID,
	|	ВТ_ТаблицаИтог.Квалификация КАК Квалификация,
	|	СУММА(ВТ_ТаблицаИтог.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_КоличествоСотрудников
	|ИЗ
	|	ВТ_ТаблицаИтог КАК ВТ_ТаблицаИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаИтог.РемонтыОборудования_ID,
	|	ВТ_ТаблицаИтог.ID,
	|	ВТ_ТаблицаИтог.Квалификация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID,
	|	Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИтог.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаИтог.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаИтог.ID КАК ID,
	|	ВТ_ТаблицаИтог.Квалификация КАК Квалификация,
	|	ВТ_ТаблицаИтог.ДатаНачала КАК ДатаНачала,
	|	ВТ_ТаблицаИтог.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ТаблицаИтог.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаИтог.КТУ КАК КТУ,
	|	ВТ_ТаблицаИтог.ВремяРаботы КАК ВремяРаботы,
	|	ВТ_ТаблицаИтог.СуммаКНачислению / ВТ_КоличествоСотрудников.Количество КАК СуммаКНачислению,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	ВТ_ТаблицаИтог КАК ВТ_ТаблицаИтог
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоСотрудников КАК ВТ_КоличествоСотрудников
	|		ПО ВТ_ТаблицаИтог.РемонтыОборудования_ID = ВТ_КоличествоСотрудников.РемонтыОборудования_ID
	|			И ВТ_ТаблицаИтог.ID = ВТ_КоличествоСотрудников.ID
	|			И ВТ_ТаблицаИтог.Квалификация = ВТ_КоличествоСотрудников.Квалификация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаИтог.Ссылка,
	|	ВТ_ТаблицаИтог.РемонтыОборудования_ID,
	|	ВТ_ТаблицаИтог.ID,
	|	ВТ_ТаблицаИтог.Квалификация,
	|	ВТ_ТаблицаИтог.ДатаНачала,
	|	ВТ_ТаблицаИтог.ДатаОкончания,
	|	ВТ_ТаблицаИтог.Сотрудник,
	|	ВТ_ТаблицаИтог.КТУ,
	|	ВТ_ТаблицаИтог.ВремяРаботы,
	|	ВТ_ТаблицаИтог.СуммаКНачислению / ВТ_КоличествоСотрудников.Количество";
		
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ID", СписокИДРемРабот);
	Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
	Запрос.УстановитьПараметр("Дата", ЗаполняемыйДокумент.Дата);
	Запрос.УстановитьПараметр("ДатаОснования", ДокументОснование.Дата);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия", "Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.торо_НарядНаРегламентноеМероприятие", "Документ.торо_НарядНаВыполнениеРемонтныхРабот");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям", "РегистрНакопления.торо_ВыполняемыеРемонтныеРаботы");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПроцентРемонта", ".ПроцентОпераций");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаИсполнителей = Результат.Выбрать();
	
	Пока ВыборкаИсполнителей.Следующий() Цикл
		НовСтр = табИсполнителей.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаИсполнителей);
	КонецЦикла;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		ЗапросИсполнители = Новый Запрос;
		ЗапросИсполнители.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботИсполнителиПоРемонтам.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботИсполнителиПоРемонтам.Исполнитель КАК Исполнитель,
		|	торо_НарядНаВыполнениеРемонтныхРаботИсполнителиПоРемонтам.УточнениеИсполнителя КАК УточнениеИсполнителя,
		|	торо_НарядНаВыполнениеРемонтныхРаботИсполнителиПоРемонтам.ДатаНачала КАК ДатаНачала,
		|	торо_НарядНаВыполнениеРемонтныхРаботИсполнителиПоРемонтам.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ИсполнителиПоРемонтам КАК торо_НарядНаВыполнениеРемонтныхРаботИсполнителиПоРемонтам
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботИсполнителиПоРемонтам.Ссылка = &Ссылка
		|	И торо_НарядНаВыполнениеРемонтныхРаботИсполнителиПоРемонтам.РемонтыОборудования_ID В(&РемонтыОборудования_ID)";
		
		ЗапросИсполнители.УстановитьПараметр("Ссылка", ДокументОснование);
		ЗапросИсполнители.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		
		Результат = ЗапросИсполнители.Выполнить();
		ВыборкаИсполнители = Результат.Выбрать();
		
		Пока ВыборкаИсполнители.Следующий() Цикл
			НовСтр = табИсполнителейСПодразделениями.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаИсполнители);
		КонецЦикла;
		
	Иначе
		
		ЗапросПодрядчики = Новый Запрос;
		ЗапросПодрядчики.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_НарядНаРегламентноеМероприятиеПодрядчики.Ссылка КАК Ссылка,
		|	торо_НарядНаРегламентноеМероприятиеПодрядчики.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_НарядНаРегламентноеМероприятиеПодрядчики.ID КАК ID,
		|	торо_НарядНаРегламентноеМероприятиеПодрядчики.Контрагент КАК Контрагент,
		|	торо_НарядНаРегламентноеМероприятиеПодрядчики.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	торо_НарядНаРегламентноеМероприятиеПодрядчики.ДатаНачала КАК ДатаНачала,
		|	торо_НарядНаРегламентноеМероприятиеПодрядчики.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.Подрядчики КАК торо_НарядНаРегламентноеМероприятиеПодрядчики
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеПодрядчики.Ссылка = &Ссылка
		|	И торо_НарядНаРегламентноеМероприятиеПодрядчики.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
		|	И торо_НарядНаРегламентноеМероприятиеПодрядчики.ID В(&ID)";
		
		ЗапросПодрядчики.УстановитьПараметр("Ссылка", ДокументОснование);
		ЗапросПодрядчики.УстановитьПараметр("ID", СписокИДРемРабот);
		ЗапросПодрядчики.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		
		Результат = ЗапросПодрядчики.Выполнить();
		ВыборкаПодрядчиков = Результат.Выбрать();
		
		Пока ВыборкаПодрядчиков.Следующий() Цикл
			НовСтр = табПодрядчиков.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПодрядчиков);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьМатериалыИзДокументаОснования(ДокументОснование, СписокИДРемонтов, СписокИДРемРабот, табМатериалов, ЗаполняемыйДокумент = Неопределено)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		// Вариант с регистром торо_ПлановыеМатериальныеЗатратыРемонтныхРабот не подходит, так как в нем нет упаковок.
		
		// Учитываем уже добавленные материалы, актуально для цепочки смета-наряд-акт для документов с 2 ремонтами из РМТС
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабМатериалы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	ТабМатериалы.ID КАК ID,
		|	ТабМатериалы.Номенклатура КАК Номенклатура,
		|	ТабМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ВТ_УжеИмеющиесяМатериалы
		|ИЗ
		|	&табМатериалов КАК ТабМатериалы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID,
		|	РемонтыОборудования_ID,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка КАК Ссылка,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID КАК ID,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Количество КАК Количество,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.КоличествоЕдиниц КАК КоличествоЕдиниц,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Количество КАК КоличествоРемонтныхРабот
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.МатериальныеЗатраты КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УжеИмеющиесяМатериалы КАК ВТ_УжеИмеющиесяМатериалы
		|			ПО торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID = ВТ_УжеИмеющиесяМатериалы.ID
		|				И торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID = ВТ_УжеИмеющиесяМатериалы.РемонтыОборудования_ID
		|				И торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура = ВТ_УжеИмеющиесяМатериалы.Номенклатура
		|				И торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры = ВТ_УжеИмеющиесяМатериалы.ХарактеристикаНоменклатуры
		|		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.ID = торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID
		|			И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID
		|ГДЕ
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = &Ссылка
		|	И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
		|	И торо_ЗаявкаНаРемонтРемонтныеРаботы.ID В(&ID)
		|	И ВТ_УжеИмеющиесяМатериалы.РемонтыОборудования_ID ЕСТЬ NULL
		|	И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		Запрос.УстановитьПараметр("ID", СписокИДРемРабот);
		Запрос.УстановитьПараметр("табМатериалов", табМатериалов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НовСтр = табМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		КонецЦикла;		
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		// В табМатериалы добавляем только материальные затраты из документов оснований. Затраты по нормативам получены были
		// ранее. Далее в процедуре "ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании" затраты из оснований (если ТК или ТО есть в основании)
		// заменяют нормативные затраты.   
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID КАК ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДокументИсточник КАК ДокументИсточник
		|ПОМЕСТИТЬ втДанныеНаряда
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		|		ПО торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID
		|			И торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка
		|			И (торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID В (&РемонтыОборудования_ID))
		|			И (торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID В (&ID))
		|			И (торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка = &Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РемонтыОборудования_ID,
		|	ID,
		|	ДокументИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втДанныеНаряда.ID КАК ID,
		|	втДанныеНаряда.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	втДанныеНаряда.ДокументИсточник КАК ДокументИсточник
		|ИЗ
		|	втДанныеНаряда КАК втДанныеНаряда
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		|		ПО втДанныеНаряда.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтыОборудования.ID
		|			И втДанныеНаряда.ДокументИсточник = торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		|		ПО втДанныеНаряда.ДокументИсточник = торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка
		|			И втДанныеНаряда.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
		|			И втДанныеНаряда.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.ID
		|ИТОГИ ПО
		|	ДокументИсточник,
		|	РемонтыОборудования_ID";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		Запрос.УстановитьПараметр("ID", СписокИДРемРабот);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаПоОснованиям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		// Заполняем затраты из документов оснований.
		Пока ВыборкаПоОснованиям.Следующий() Цикл
		    IDРемонтов = Новый Массив;
			IDРемонтныхРабот = Новый Массив;
			ВыборкаПоРемонтам = ВыборкаПоОснованиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоРемонтам.Следующий() Цикл
				IDРемонтов.Добавить(ВыборкаПоРемонтам.РемонтыОборудования_ID);
				ВыборкаРабот = ВыборкаПоРемонтам.Выбрать();
				Пока ВыборкаРабот.Следующий() Цикл
					IDРемонтныхРабот.Добавить(ВыборкаРабот.ID);
				КонецЦикла;
			КонецЦикла;
			
			ПолучитьМатериалыИзДокументаОснования(ВыборкаПоОснованиям.ДокументИсточник, IDРемонтов, IDРемонтныхРабот, табМатериалов, ЗаполняемыйДокумент);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") ИЛИ 
		ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") ИЛИ
		ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		Основания = Новый Соответствие;
		Для каждого Ремонт Из СписокИДРемонтов Цикл
			Основания.Вставить(Ремонт, ДокументОснование);
		КонецЦикла; 
		ИмяТаблицыРемонтов = "РемонтыОборудования";
		ДанныеДляЗаполнения = торо_ЗаполнениеДокументов20.ПолучитьНормыЗатрат(ЗаполняемыйДокумент.РемонтныеРаботы, ЗаполняемыйДокумент[ИмяТаблицыРемонтов], Основания);
		Для каждого ДанныеРР Из ДанныеДляЗаполнения Цикл
			табМатериаловРР = ДанныеРР.СтруктураТаблиц.МатериальныеЗатраты;
			табМатериаловРР.Колонки.Добавить("Ссылка");
			табМатериаловРР.Колонки.Добавить("ХарактеристикиИспользуются");
			табМатериаловРР.Колонки.Добавить("ХарактеристикаНоменклатуры");
			табМатериаловРР.Колонки.Добавить("РемонтыОборудования_ID");
			табМатериаловРР.Колонки.Добавить("КоличествоРемонтныхРабот");
			Для каждого Строка Из табМатериаловРР Цикл
				Строка.Ссылка = ДокументОснование;
				Строка.ХарактеристикиИспользуются = (Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
				Строка.ХарактеристикаНоменклатуры = Строка.Характеристика;
				Строка.РемонтыОборудования_ID = ДанныеРР.РемонтыОборудования_ID;
				Строка.КоличествоРемонтныхРабот = ДанныеРР.Количество;
				НоваяСтрока = табМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗапчастиИзДокументаОснования(ДокументОснование, СписокИДРемонтов, табЗапчастей)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	табЗапчастей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	табЗапчастей.Номенклатура КАК Номенклатура,
		|	табЗапчастей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ВТ_УжеИмеющиесяЗапчасти
		|ИЗ
		|	&табЗапчастей КАК табЗапчастей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Ссылка КАК Ссылка,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура КАК Номенклатура,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Количество КАК Количество,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура КАК НоменклатураНовая,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНовая,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыНовая,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Количество КАК КоличествоНовое
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ЗапчастиРемонта КАК торо_ЗаявкаНаРемонтЗапчастиРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УжеИмеющиесяЗапчасти КАК ВТ_УжеИмеющиесяЗапчасти
		|		ПО торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID = ВТ_УжеИмеющиесяЗапчасти.РемонтыОборудования_ID
		|			И торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура = ВТ_УжеИмеющиесяЗапчасти.Номенклатура
		|			И торо_ЗаявкаНаРемонтЗапчастиРемонта.ХарактеристикаНоменклатуры = ВТ_УжеИмеющиесяЗапчасти.ХарактеристикаНоменклатуры
		|ГДЕ
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Ссылка = &Ссылка
		|	И торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
		|	И ВТ_УжеИмеющиесяЗапчасти.РемонтыОборудования_ID ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		Запрос.УстановитьПараметр("табЗапчастей", табЗапчастей);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НовСтр = табЗапчастей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		Для каждого СтрокаОснования из ДокументОснование.ДокументыОснования Цикл
			ПолучитьЗапчастиИзДокументаОснования(СтрокаОснования.ДокументОснование, СписокИДРемонтов, табЗапчастей);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.ID КАК РемонтыОборудования_ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот КАК ОбъектРемонта,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ИЗ
		|	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|ГДЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка = &Ссылка
		|	И торо_ПланГрафикРемонтаПланРемонтов.ID В(&ID)
		|	И торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот.ВестиУчетСерийныхЗапчастей";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ID", СписокИДРемонтов);
		
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапчастей = ПолучитьДанныеДляЗаполненияЗапчастейПоНормам(ТаблицаРемонтов);
		
		Для каждого Строка из ТаблицаЗапчастей Цикл 
			НовСтр = табЗапчастей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Строка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		
		ВидРемонтныхРабот = Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ВыявленныеДефектыСписокДефектов.ID КАК РемонтыОборудования_ID,
		|	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент КАК ОбъектРемонта,
		|	&ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ИЗ
		|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		|ГДЕ
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка
		|	И торо_ВыявленныеДефектыСписокДефектов.ID В(&ID)
		|	И торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта.ВестиУчетСерийныхЗапчастей";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ID", СписокИДРемонтов);
		Запрос.УстановитьПараметр("ВидРемонтныхРабот", ВидРемонтныхРабот);
		
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапчастей = ПолучитьДанныеДляЗаполненияЗапчастейПоНормам(ТаблицаРемонтов);
		
		Для каждого Строка из ТаблицаЗапчастей Цикл 
			НовСтр = табЗапчастей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Строка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		
		ВидРемонтныхРабот = Константы.торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований.Получить();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID КАК РемонтыОборудования_ID,
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта КАК ОбъектРемонта,
		|	&ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ИЗ
		|	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК торо_ВнешнееОснованиеДляРаботОбследованноеОборудование
		|ГДЕ
		|	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка = &Ссылка
		|	И торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID В(&ID)
		|	И торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта.ВестиУчетСерийныхЗапчастей";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ID", СписокИДРемонтов);
		Запрос.УстановитьПараметр("ВидРемонтныхРабот", ВидРемонтныхРабот);
		
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапчастей = ПолучитьДанныеДляЗаполненияЗапчастейПоНормам(ТаблицаРемонтов);
		
		Для каждого Строка из ТаблицаЗапчастей Цикл 
			НовСтр = табЗапчастей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляЗаполненияЗапчастейПоНормам(ТаблицаРемонтов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРемонтов.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ТаблицаРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	|ПОМЕСТИТЬ ТаблицаРемонтов
	|ИЗ
	|	&ТаблицаРемонтов КАК ТаблицаРемонтов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ВидРемонтныхРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтов.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ТаблицаРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК ХарактеристикаНоменклатуры,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК НоменклатураНовая,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНовая,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК ХарактеристикаНоменклатурыНовая,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК КоличествоНовое
	|ИЗ
	|	ТаблицаРемонтов КАК ТаблицаРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	|		ПО ТаблицаРемонтов.ОбъектРемонта = торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта
	|			И ТаблицаРемонтов.ВидРемонтныхРабот = торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта
	|ГДЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.Приоритет
	|	И торо_НормыЗапчастейНаОбъектыРемонта.Количество <> 0
	|	И торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта.ВестиУчетСерийныхЗапчастей";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(ТаблицаДокумента, ТаблицаДанных, КлючевыеПоля)
	
	ТаблицаДляСвертки = ТаблицаДанных.Скопировать();
	ТаблицаДляСвертки.Свернуть(КлючевыеПоля);
	СтруктураПоиска = Новый Структура(КлючевыеПоля);
	
	Для каждого СтрокаИД из ТаблицаДляСвертки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИД);
		МассивСтрок = ТаблицаДокумента.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаКУдалению из МассивСтрок Цикл
			ТаблицаДокумента.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения) Экспорт 
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.Исполнители, ДанныеДляЗаполнения.Исполнители, "ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаДанных Из ДанныеДляЗаполнения.Исполнители Цикл
			КоличествоСтрок = СтрокаДанных.Количество;
			
			// У сотрудников количество равно 0
			Если КоличествоСтрок <> 0 Тогда
				Для Счетчик = 1 По КоличествоСтрок Цикл 				
					НовСтр = Объект.Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
				КонецЦикла;
			Иначе
				НовСтр = Объект.Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);			
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда	
			
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.ТрудовыеЗатраты, ДанныеДляЗаполнения.Исполнители, "ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаДанных Из ДанныеДляЗаполнения.Исполнители Цикл
			КоличествоСтрок = СтрокаДанных.Количество;
			
			// У сотрудников количество равно 0
			Если КоличествоСтрок <> 0 Тогда
				Для Счетчик = 1 По КоличествоСтрок Цикл
					НовСтр = Объект.ТрудовыеЗатраты.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
				КонецЦикла;
			Иначе
				НовСтр = Объект.ТрудовыеЗатраты.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);			
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения) Экспорт 
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.Подрядчики, ДанныеДляЗаполнения.Подрядчики, "ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Подрядчики Цикл
			НовСтр = Объект.Подрядчики.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда	
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.ПодрядчикиРемонтныхРабот, ДанныеДляЗаполнения.Подрядчики, "ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Подрядчики Цикл
			НовСтр = Объект.ПодрядчикиРемонтныхРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсполнителейСПодразделениямиПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения) Экспорт 

	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.ИсполнителиПоРемонтам, ДанныеДляЗаполнения.ИсполнителиСПодразделениями, "РемонтыОборудования_ID");
		
		Для Каждого СтрокаДанных из ДанныеДляЗаполнения.ИсполнителиСПодразделениями Цикл
			НовСтр = Объект.ИсполнителиПоРемонтам.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);	
			ЗаполнитьУточнениеИсполнителя(НовСтр.Исполнитель, НовСтр.УточнениеИсполнителя);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения) Экспорт 
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда	
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.МатериальныеЗатраты, ДанныеДляЗаполнения.Материалы, "ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Материалы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", СтрокаДанных.ID));
			СтрокаРР = МассивСтрок[0];
			
			Коэффициент = 1;
			Если СтрокаРР <> Неопределено Тогда
				Коэффициент = СтрокаРР.Количество / СтрокаДанных.КоличествоРемонтныхРабот;
			КонецЕсли; 
			НовСтр = Объект.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
			НовСтр.Количество = НовСтр.Количество * Коэффициент;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗапчастиПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.ЗапчастиРемонта, ДанныеДляЗаполнения.Запчасти, "РемонтыОборудования_ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Запчасти Цикл
			НовСтр = Объект.ЗапчастиРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда	
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.СерийныеЗапчасти, ДанныеДляЗаполнения.Запчасти, "РемонтыОборудования_ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Запчасти Цикл
			НовСтр = Объект.СерийныеЗапчасти.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
			Попытка
				НовСтр.СерииИспользуются = СтрокаДанных.Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
				НовСтр.СерииИспользуютсяДляНовой = СтрокаДанных.НоменклатураНовая.ВидНоменклатуры.ИспользоватьСерии;
				НовСтр.ХарактеристикиИспользуются = СтрокаДанных.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики;
				НовСтр.ХарактеристикиИспользуютсяДляНовой = СтрокаДанных.НоменклатураНовая.ВидНоменклатуры.ИспользоватьХарактеристики;
			Исключение
			КонецПопытки;
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУточнениеИсполнителя(Исполнитель, УточнениеИсполнителя) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УточнениеИсполнителя) И ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_РемонтныеБригады.Ссылка КАК Бригада
		               |ИЗ
		               |	Справочник.торо_РемонтныеБригады КАК торо_РемонтныеБригады
		               |ГДЕ
		               |	торо_РемонтныеБригады.Подразделение = &Подразделение";
		
		Запрос.УстановитьПараметр("Подразделение", Исполнитель);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			УточнениеИсполнителя = Результат[0].Бригада;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомРемонтныхРабот

// Функция определяет индекс картинки дерева ремонтных работ.
//
Функция ИндексКартинкиДереваРемонтныхРабот(Работа) Экспорт
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		Возврат ?(Работа.ПометкаУдаления, 1, 0);
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		Если Работа.ЭтоГруппа Тогда Возврат 4;
		Иначе Возврат ?(Работа.ПометкаУдаления, 3, 2);
		КонецЕсли;	
	Иначе
		Возврат 4;
	КонецЕсли;
	
КонецФункции

// Функция для массива ссылок на ремонтные работы получает индексы картинок
// и при необходимости получает значение реквизиты "РаботаПовышеннойОпасности".
//
// Параметры:
//  Работы – Массив – массив ссылок на ремонтные работы содержащиеся в дереве 
//		(справочники торо_ИдентификаторыТехКарт или торо_ТехнологическиеОперации).
//
// Возвращаемое значение:
//   РеквизитыРемонтныхРабот - Соответствие - соответвие ссылок к индексам на картинок.
//
Функция РеквизитыДляЗаполненияДереваРемотныхРабот(РемонтныеРаботы) Экспорт
	
	РеквизитыРемонтныхРабот = Новый Соответствие;
	   
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ИдентификаторыТехКарт.Ссылка КАК РемонтнаяРабота,
	|	ВЫБОР
	|		КОГДА торо_ИдентификаторыТехКарт.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	НЕОПРЕДЕЛЕНО КАК РаботаПовышеннойОпасности
	|ИЗ
	|	Справочник.торо_ИдентификаторыТехКарт КАК торо_ИдентификаторыТехКарт
	|ГДЕ
	|	торо_ИдентификаторыТехКарт.Ссылка В(&РемонтныеРаботы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ТехнологическиеОперации.Ссылка,
	|	ВЫБОР
	|		КОГДА торо_ТехнологическиеОперации.ЭтоГруппа
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА торо_ТехнологическиеОперации.ПометкаУдаления
	|					ТОГДА 3
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ,
	|	торо_ТехнологическиеОперации.РаботаПовышеннойОпасности
	|ИЗ
	|	Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
	|ГДЕ
	|	торо_ТехнологическиеОперации.Ссылка В(&РемонтныеРаботы)";
	
	Запрос.УстановитьПараметр("РемонтныеРаботы", РемонтныеРаботы);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл 
		Реквизиты = Новый Структура("ИндексКартинки, РаботаПовышеннойОпасности");
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		РеквизитыРемонтныхРабот.Вставить(Выборка.РемонтнаяРабота, Реквизиты);
	КонецЦикла;
		
	Возврат РеквизитыРемонтныхРабот;
	
КонецФункции

// Процедура выполняет заполнение дерева значений заданной структуры
// Параметры:
//  СтрокаДерева         - строка дерева значений; 
//  ТабличнаяЧастьДерева - табличная часть содержащая данные дерева значений; 
//  СтруктураДерева      - структура полей строки дерева.
//
Процедура СоздатьВетвьДереваПоТабличнойЧасти(Дерево, ТекущиеЗначения, ТабличнаяЧастьДерева, ЕстьКартинка = Истина) Экспорт
	
	СтрокиДерева = Дерево.Строки.НайтиСтроки(ТекущиеЗначения, Истина);
	
	Если СтрокиДерева.Количество() > 0 Тогда
		
		СтрокаДерева = СтрокиДерева[0];
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		
		МассивСтрок = ТабличнаяЧастьДерева.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из МассивСтрок Цикл
			
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Попытка
				НовСтрокаДерева.Выполнено = НовСтрокаДерева.ПроцентВыполненияРабот = 100;
			Исключение
			КонецПопытки;
			
			Если ЕстьКартинка Тогда  
				//НовСтрокаДерева.Картинка = ИндексКартинкиДереваРемонтныхРабот(Элемент.РемонтнаяРабота);
				торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НовСтрокаДерева);
			КонецЕсли;
			
			СтруктураТекущиеЗначения = Новый Структура("Родитель_ID, РемонтыОборудования_ID, ID", НовСтрокаДерева.Родитель_ID, НовСтрокаДерева.РемонтыОборудования_ID, НовСтрокаДерева.ID);
			
			СоздатьВетвьДереваПоТабличнойЧасти(Дерево, СтруктураТекущиеЗначения, ТабличнаяЧастьДерева, ЕстьКартинка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает процент невыполненных работ по по нормам времени.
//
Процедура ЗаполнитьПроцентыНевыполненныхРаботПоНормамВремени(ID_Поиска, ТаблицаРабот) Экспорт
	
	МассивСтрок = ТаблицаРабот.НайтиСтроки(Новый Структура("Родитель_ID", ID_Поиска));
	
	ОбщаяПродолжительность = 0;
	Для Каждого Элемент Из МассивСтрок Цикл
		
		Если ТипЗнч(Элемент.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(Элемент.РемонтнаяРабота, Элемент.ДатаНачалаРемонта);
			
			Если ЗначениеЗаполнено(ТехКарта) Тогда
				ОбщаяПродолжительность = ОбщаяПродолжительность + ТехКарта.НормаВремени * Элемент.Количество;
			КонецЕсли;
		Иначе
			ОбщаяПродолжительность = ОбщаяПродолжительность + Элемент.РемонтнаяРабота.НормаВремени * Элемент.Количество;
		КонецЕсли;
		
		ЗаполнитьПроцентыНеВыполненныхРаботПоНормамВремени(Элемент.ID, ТаблицаРабот);
		
	КонецЦикла; 
	
	СуммаБезПоследнего = 0;
	РазмерМассиваСтрок = МассивСтрок.Количество();
	
	Если РазмерМассиваСтрок > 0 Тогда
		
		Для Сч = 0 По РазмерМассиваСтрок - 2 Цикл
			
			СтрокаТЗ  = МассивСтрок[Сч];
			
			Если ТипЗнч(СтрокаТЗ.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаТЗ.РемонтнаяРабота, СтрокаТЗ.ДатаНачалаРемонта);
				
				Если ЗначениеЗаполнено(ТехКарта) Тогда
					Если ID_Поиска = "" Тогда
						СтрокаТЗ.ПроцентНевыполненныхРабот = 100;
					Иначе
						СтрокаТЗ.ПроцентНевыполненныхРабот = ?(ОбщаяПродолжительность = 0,
						100 / МассивСтрок.Количество(),
						ТехКарта.НормаВремени * СтрокаТЗ.Количество / ОбщаяПродолжительность * 100);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ID_Поиска = "" Тогда
					СтрокаТЗ.ПроцентНевыполненныхРабот = 100;
				Иначе
					СтрокаТЗ.ПроцентНевыполненныхРабот = ?(ОбщаяПродолжительность = 0,
					100 / МассивСтрок.Количество(),
					СтрокаТЗ.РемонтнаяРабота.НормаВремени * СтрокаТЗ.Количество / ОбщаяПродолжительность * 100);
				КонецЕсли;
			КонецЕсли;
			
			СуммаБезПоследнего = СуммаБезПоследнего + СтрокаТЗ.ПроцентНевыполненныхРабот;
			
		КонецЦикла;
		
		Если ID_Поиска = "" Тогда
			СтрокаТЗ  = МассивСтрок[РазмерМассиваСтрок-1];
			СтрокаТЗ.ПроцентНевыполненныхРабот = 100;
		Иначе 
			Если РазмерМассиваСтрок > 0 Тогда
				
				СтрокаТЗ  = МассивСтрок[РазмерМассиваСтрок-1];
				СтрокаТЗ.ПроцентНеВыполненныхРабот = 100 - СуммаБезПоследнего;
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

// Процедура проставляет проценты у подчиненных строк
//
Процедура РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, СтрокаДерева) Экспорт
	
	МассивТекСтрок = ДеревоОбъект.Строки.НайтиСтроки(СтрокаДерева, Истина);
	Если МассивТекСтрок.Количество() Тогда
		ТекСтрока = МассивТекСтрок[0];
		Для Каждого СтрДерева Из ТекСтрока.Строки Цикл
			
			СтрДерева.ПроцентВыполненияРабот = ТекСтрока.ПроцентВыполненияРабот;
			СтрДерева.Выполнено = (СтрДерева.ПроцентВыполненияРабот = 100);
			РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID));
			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры // РасставитьПроцентыПодчиненныхСтрок()

// Процедура проставляет проценты родительских строк
//
Процедура РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтрокаРодитель) Экспорт
	
	Если СтрокаРодитель = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроцентРодителя = 0;
	КоличествоПодчиненных = 0;
	
	МассивТекСтрок = ДеревоОбъект.Строки.НайтиСтроки(СтрокаРодитель, Истина);
	Если МассивТекСтрок.Количество() Тогда
		ТекСтрока = МассивТекСтрок[0];	
		
		Для Каждого СтрДерева Из ТекСтрока.Строки Цикл
			
			ПроцентРодителя = ПроцентРодителя + СтрДерева.ПроцентВыполненияРабот * СтрДерева.Количество;
			КоличествоПодчиненных = КоличествоПодчиненных + СтрДерева.Количество;
			
		КонецЦикла;
		
		Если КоличествоПодчиненных > 0 Тогда
			
			ТекСтрока.ПроцентВыполненияРабот = Окр(ПроцентРодителя / КоличествоПодчиненных, 2);
			ТекСтрока.Выполнено = (ТекСтрока.ПроцентВыполненияРабот = 100);
			
		КонецЕсли; 
		СтрРодитель = ТекСтрока.Родитель;
		Если НЕ СтрРодитель = Неопределено Тогда
			РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрРодитель.ID, СтрРодитель.РемонтыОборудования_ID, СтрРодитель.Родитель_ID));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РасставитьПроцентыРодительскихСтрок()

// Процедура добавляет строки по операциям и ремонтам в дерево ремонтных работ.
// 
Функция ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, Знач ТекущиеЗначения, Значение, ID = "", Знач ТехКарта = Неопределено, Количество = Неопределено) 
	
	Если Количество = Неопределено Тогда
		Количество = 1;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ID, Родитель_ID, Предписание_ID", ТекущиеЗначения.СтрокаРодитель_ID, ТекущиеЗначения.СтрокаРодительРодитель_ID,ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID),Истина);
	Иначе
		МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ID, Родитель_ID, РемонтыОборудования_ID", ТекущиеЗначения.СтрокаРодитель_ID, ТекущиеЗначения.СтрокаРодительРодитель_ID,ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID),Истина);
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаРодитель = МассивСтрок[0];	
		НовСтрокаДерева = СтрокаРодитель.Строки.Добавить();
		НовСтрокаДерева.ID = Новый УникальныйИдентификатор;
		НовСтрокаДерева.Родитель_ID     		= ТекущиеЗначения.СтрокаРодитель_ID;
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			НовСтрокаДерева.Предписание_ID 	= ?(ТекущиеЗначения.Свойство("ТекущийРемонт_ID"), ТекущиеЗначения.ТекущийРемонт_ID, ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID);
		Иначе
			НовСтрокаДерева.РемонтыОборудования_ID 	= ?(ТекущиеЗначения.Свойство("ТекущийРемонт_ID"), ТекущиеЗначения.ТекущийРемонт_ID, ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID);
		КонецЕсли;
		
		НовСтрокаДерева.РемонтнаяРабота 		= Значение;
		//НовСтрокаДерева.Картинка        		= ИндексКартинкиДереваРемонтныхРабот(Значение);
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НовСтрокаДерева);
		
		Если (ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
			ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")) И ТипЗнч(Значение) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			НовСтрокаДерева.НоваяОперация = Истина;
			НовСтрокаДерева.ПроцентВыполненияРабот = 100;
		КонецЕсли; 
		
		Если Не НовСтрокаДерева.Владелец().Колонки.Найти("Количество") = Неопределено Тогда
			НовСтрокаДерева.Количество      = Количество * ?(СтрокаРодитель.Количество = 0, 1, СтрокаРодитель.Количество);
		КонецЕсли;
		
		Если ТекущиеЗначения.Свойство("ID_ПараллельнойОперации") Тогда
		    НовСтрокаДерева.ID_ПараллельнойОперации = ТекущиеЗначения.ID_ПараллельнойОперации;
		Иначе
			ТекущиеЗначения.Вставить("ID_ПараллельнойОперации", "");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект.РемонтныеРаботы.Добавить(), НовСтрокаДерева);
		
		ДатаНачалаРемонта = Неопределено;
		ТекущиеЗначения.Свойство("ДатаНачалаРемонта", ДатаНачалаРемонта);
		
		Если (ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") 
		  ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
		  ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		  ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"))
		  И ТипЗнч(Значение) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		  
		    СтрокаРемРабот = Новый Структура("ID, РемонтыОборудования_ID, РемонтнаяРабота, Количество", ID, НовСтрокаДерева.РемонтыОборудования_ID, Значение, Количество);
		    ЗаполнитьНормативыРемонтнойРаботы(ДокументОбъект, СтрокаРемРабот, ТехКарта, , НовСтрокаДерева.ID, ТекущиеЗначения);
		КонецЕсли;
				
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(Значение, ДатаНачалаРемонта);
			Если Не ЗначениеЗаполнено(ТехКарта) Тогда
				Возврат НовСтрокаДерева;				
			КонецЕсли;
			
			Для Каждого ОперацияРемонта Из ТехКарта.СписокОпераций Цикл
				ТекущиеЗначения.СтрокаРодитель_ID = НовСтрокаДерева.ID;
				ТекущиеЗначения.СтрокаРодительРодитель_ID = НовСтрокаДерева.Родитель_ID;
				ТекущиеЗначения.ID_ПараллельнойОперации = ОперацияРемонта.ID_ПараллельнойОперации;
				
				Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
					ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID = НовСтрокаДерева.Предписание_ID;
				Иначе
					ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID = НовСтрокаДерева.РемонтыОборудования_ID;
				КонецЕсли;

				ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ОперацияРемонта.Операция, ОперацияРемонта.ID, ТехКарта, ОперацияРемонта.Количество);
 			КонецЦикла;
			
		КонецЕсли;
		
		Возврат НовСтрокаДерева;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ВспомогательныеФункцииДляРасчетаППР

Процедура ДобавитьИнтервалыНаДиаграммуППР(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать, ОтображатьПоложение = Истина)
	
	ТочкаВРР = ТочкаОРР.Точки.Добавить();
	ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
	
	Если ИспользоватьРасшифровку Тогда
		ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
	КонецЕсли;
	
	Если ЭтоКорректировка Тогда
		// корректировка
		ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
		ТочкаВРРСт.Текст = НСтр("ru='План до корректировки'");
		Если ИспользоватьРасшифровку Тогда
			ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = ВыборкаПоВР.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
			
			Если ОтображатьПоложение Тогда
				Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
				Интервал = Значение.Добавить();
				Интервал.Начало = Выборка.ДатаНач;
				Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
				Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
				Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
				
				Если ИспользоватьРасшифровку Тогда
					Интервал.Расшифровка = ЗаполнитьРасшифровкуИнтеравалаДиаграммыППР(ВыборкаПоОР, ВыборкаПоВР, Выборка);
				КонецЕсли;
			КонецЕсли;
			
			Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.ДатаНач;
			Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
			Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
			Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
			
			Если ИспользоватьРасшифровку Тогда
				Интервал.Расшифровка = ЗаполнитьРасшифровкуИнтеравалаДиаграммыППР(ВыборкаПоОР, ВыборкаПоВР, Выборка);
			КонецЕсли;
		
		КонецЕсли;
		
		Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
		Значение.Редактирование = Редактировать;
		Если ИспользоватьРасшифровку Тогда
			Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
		КонецЕсли;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Выборка.ДатаНач;
		Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, ?(Выборка.Отменен, СтруктураЦветов.ЦветОтмененного, ?(Выборка.Замещен,СтруктураЦветов.ЦветЗамещенного,СтруктураЦветов.ЦветЗапланированного)));
		
		Если ИспользоватьРасшифровку Тогда
			Интервал.Расшифровка = ЗаполнитьРасшифровкуИнтеравалаДиаграммыППР(ВыборкаПоОР, ВыборкаПоВР, Выборка);
		КонецЕсли;
		
		Если ЭтоКорректировка И Не Выборка.Отменен Тогда
			Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
				// корректировка
				Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
				ИнтервалСтарый = Значение.Добавить();
				ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
				ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
				ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);       
				ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт,СтруктураЦветов.ЦветЗамещенногоИсходного, СтруктураЦветов.ЦветИсходного);
				
				Если ИспользоватьРасшифровку Тогда
					ИнтервалСтарый.Расшифровка = ЗаполнитьРасшифровкуИнтеравалаДиаграммыППР(ВыборкаПоОР, ВыборкаПоВР, Выборка);
				КонецЕсли;
		
				Если Не Выборка.Отменен Тогда
					Связь = ИнтервалСтарый.Добавить(Интервал);
					Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
		
		Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + НСтр("ru='Начата работа по внутренним заказам.'");
		ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + НСтр("ru='Введены внутренние заказы.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьРасшифровкуИнтеравалаДиаграммыППР(ВыборкаПоОР, ВыборкаПоВР, Выборка)
	
	Расшифровка = Новый Структура;
	Расшифровка.Вставить("ОР", ВыборкаПоОР.ОбъектРемонтныхРабот);
	Расшифровка.Вставить("ВР", ВыборкаПоВР.ВидРемонтныхРабот);
	Расшифровка.Вставить("ДатаНач", Выборка.ДатаНач);
	Расшифровка.Вставить("ДоступенДляРедактирования", Выборка.ДоступенДляРедактирования);
	
	Попытка
		Расшифровка.Вставить("ДокументППР", Выборка.ДокументППР);
	Исключение
		Расшифровка.Вставить("ДокументППР", Неопределено);
	КонецПопытки;
	
	Расшифровка.Вставить("ID", Выборка.ID);

	Возврат Расшифровка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

