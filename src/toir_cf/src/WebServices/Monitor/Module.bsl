#Область ОбработчикиСобытий

Функция ВерсияОбмена()
	Возврат 1;
КонецФункции

Функция ПроверитьДобавитьРегистрациюУстройстваМонитор(Запрос, ИмяУстройства, ИмяПользователя)
	Возврат Обработки.торо_МобильныеПриложения.ПроверитьДобавитьРегистрациюУстройстваМонитор_Session(Запрос, ИмяУстройства, ИмяПользователя);
КонецФункции

Функция ПолучитьСписокОбъектовРемонтов(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	СтруктураОтвета = Новый Структура;
	
	// Получение основного списка
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
	               |	торо_ОбъектыРемонта.Наименование КАК Наименование,
	               |	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер
	               |ПОМЕСТИТЬ ОбъектыРемонтаБезСостояний
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ
	               |	И торо_ОбъектыРемонта.ПометкаУдаления = ЛОЖЬ
	               |	И торо_ОбъектыРемонта.Ссылка В(&СписокОбъектовРемонтов)
	               |	И торо_ОбъектыРемонта.Организация В(&СписокОрганизаций)
	               |	И торо_ОбъектыРемонта.Подразделение В(&СписокПодразделений)
	               |	И торо_ОбъектыРемонта.ПодразделениеИсполнитель В(&СписокПодразделенийИсполнителей)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	торо_ОбъектыРемонта.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации.ТипЭксплуатации КАК ТипЭксплуатации,
	               |	торо_ТекущееСостояниеОРСрезПоследних.ПричинаПростоя КАК ПричинаПростоя,
	               |	торо_ТекущееСостояниеОРСрезПоследних.Период КАК ДатаНачалаДействияСостояния
	               |ПОМЕСТИТЬ Состояния
	               |ИЗ
	               |	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(
	               |			&ТекущаяДата,
	               |			ОбъектРемонта В
	               |				(ВЫБРАТЬ
	               |					ОбъектыРемонтаБезСостояний.Ссылка
	               |				ИЗ
	               |					ОбъектыРемонтаБезСостояний)) КАК торо_ТекущееСостояниеОРСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 100
	               |	ОбъектыРемонтаБезСостояний.Ссылка КАК Ссылка,
	               |	ОбъектыРемонтаБезСостояний.Наименование КАК Наименование,
	               |	ОбъектыРемонтаБезСостояний.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	Состояния.ТипЭксплуатации КАК ТипЭксплуатации,
	               |	Состояния.ПричинаПростоя КАК ПричинаПростоя,
	               |	Состояния.ДатаНачалаДействияСостояния КАК ДатаНачалаДействияСостояния
	               |ПОМЕСТИТЬ ОбъектыРемонта
	               |ИЗ
	               |	ОбъектыРемонтаБезСостояний КАК ОбъектыРемонтаБезСостояний
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Состояния КАК Состояния
	               |		ПО ОбъектыРемонтаБезСостояний.Ссылка = Состояния.ОбъектРемонта
	               |ГДЕ
	               |	ЕСТЬNULL(Состояния.ТипЭксплуатации, ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.ПустаяСсылка)) В (&СписокСостоянийОР)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектыРемонтаБезСостояний.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд КАК ЕстьНаряд
	               |ПОМЕСТИТЬ ВТ_Ремонты
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |ГДЕ
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта В
	               |			(ВЫБРАТЬ
	               |				ОбъектыРемонта.Ссылка
	               |			ИЗ
	               |				ОбъектыРемонта)
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.Завершен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВыявленныеДефекты.ОбъектРемонта КАК ОбъектРемонта,
	               |	КОЛИЧЕСТВО(*) КАК КоличествоВыявленныхДефектов,
	               |	МАКСИМУМ(торо_ВыявленныеДефекты.Период) КАК ПоследнееИзменение
	               |ПОМЕСТИТЬ ВыявленныеДефекты
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
	               |		ПО торо_ВыявленныеДефекты.ID = ВТ_Ремонты.IDРемонта
	               |ГДЕ
	               |	торо_ВыявленныеДефекты.ОбъектРемонта В
	               |			(ВЫБРАТЬ
	               |				ОбъектыРемонта.Ссылка
	               |			ИЗ
	               |				ОбъектыРемонта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ВыявленныеДефекты.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВнешниеОснованияСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	КОЛИЧЕСТВО(*) КАК КоличествоВнешнихОснований,
	               |	МАКСИМУМ(торо_ВнешниеОснованияСрезПоследних.Период) КАК ПоследнееИзменение
	               |ПОМЕСТИТЬ ВнешниеОснования
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(
	               |			&ТекущаяДата,
	               |			ОбъектРемонта В
	               |					(ВЫБРАТЬ
	               |						ОбъектыРемонта.Ссылка
	               |					ИЗ
	               |						ОбъектыРемонта)
	               |				И ID В
	               |					(ВЫБРАТЬ
	               |						ВТ_Ремонты.IDРемонта КАК IDРемонта
	               |					ИЗ
	               |						ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_ВнешниеОснованияСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ВнешниеОснованияСрезПоследних.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	               |	КОЛИЧЕСТВО(*) КАК КоличествоПлановыхРабот
	               |ПОМЕСТИТЬ ПлановыеРаботы
	               |ИЗ
	               |	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |ГДЕ
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала > &ТекущаяДата
	               |	И торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта В
	               |			(ВЫБРАТЬ
	               |				ОбъектыРемонта.Ссылка
	               |			ИЗ
	               |				ОбъектыРемонта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Ремонты.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ СтатусВыявленДефект
	               |ИЗ
	               |	ВТ_Ремонты КАК ВТ_Ремонты
	               |ГДЕ
	               |	ВТ_Ремонты.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Ремонты.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Ремонты.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ СтатусВыполняетсяРемонт
	               |ИЗ
	               |	ВТ_Ремонты КАК ВТ_Ремонты
	               |ГДЕ
	               |	ВТ_Ремонты.ЕстьНаряд
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Ремонты.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА торо_СтатусыОбъектовРемонтаВУчете.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПринятоКУчету)
	               |				ТОГДА торо_СтатусыОбъектовРемонтаВУчете.Период
	               |		КОНЕЦ) КАК ДатаПринятияКУчету,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА торо_СтатусыОбъектовРемонтаВУчете.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.СнятоСУчета)
	               |				ТОГДА торо_СтатусыОбъектовРемонтаВУчете.Период
	               |		КОНЕЦ) КАК ДатаСнятияСУчета,
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ПоследниеДатыСтатусов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
	               |ГДЕ
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта В
	               |			(ВЫБРАТЬ
	               |				ОбъектыРемонта.Ссылка
	               |			ИЗ
	               |				ОбъектыРемонта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследниеДатыСтатусов.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_СтатусыОбъектовРемонтаВУчете.Регистратор КАК РегистраторПринятияКУчету,
	               |	ВЫБОР
	               |		КОГДА НЕ ПоследниеДатыСтатусов.ДатаСнятияСУчета ЕСТЬ NULL
	               |				И ПоследниеДатыСтатусов.ДатаПринятияКУчету < ПоследниеДатыСтатусов.ДатаСнятияСУчета
	               |			ТОГДА торо_СтатусыОбъектовРемонтаВУчете1.Регистратор
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Документ.торо_ВыбытиеОбъектаРемонта.ПустаяСсылка)
	               |	КОНЕЦ КАК РегистраторСнятияСУчета
	               |ПОМЕСТИТЬ РегистрацияУчета
	               |ИЗ
	               |	ПоследниеДатыСтатусов КАК ПоследниеДатыСтатусов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
	               |		ПО ПоследниеДатыСтатусов.ДатаПринятияКУчету = торо_СтатусыОбъектовРемонтаВУчете.Период
	               |			И ПоследниеДатыСтатусов.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете1
	               |		ПО ПоследниеДатыСтатусов.ДатаСнятияСУчета = торо_СтатусыОбъектовРемонтаВУчете1.Период
	               |			И ПоследниеДатыСтатусов.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчете1.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыРемонта.Ссылка КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ОбъектыРемонтаВПростое
	               |ИЗ
	               |	ОбъектыРемонта КАК ОбъектыРемонта
	               |ГДЕ
	               |	ОбъектыРемонта.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыРемонтаВПростое.ОбъектРемонта КАК ОбъектРемонта,
	               |	МИНИМУМ(торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала) КАК ДатаНачала
	               |ПОМЕСТИТЬ БлижайщиеРемонтыДатыНачала
	               |ИЗ
	               |	ОбъектыРемонтаВПростое КАК ОбъектыРемонтаВПростое
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |		ПО ОбъектыРемонтаВПростое.ОбъектРемонта = торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта
	               |			И (торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала > &ТекущаяДата)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбъектыРемонтаВПростое.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БлижайщиеРемонтыДатыНачала.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
	               |ПОМЕСТИТЬ БлижайщиеРемонты
	               |ИЗ
	               |	БлижайщиеРемонтыДатыНачала КАК БлижайщиеРемонтыДатыНачала
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |		ПО БлижайщиеРемонтыДатыНачала.ОбъектРемонта = торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта
	               |			И БлижайщиеРемонтыДатыНачала.ДатаНачала = торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыРемонта.Ссылка КАК Ссылка,
	               |	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Родитель,
	               |	ОбъектыРемонта.Наименование КАК Наименование,
	               |	ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	ЕСТЬNULL(ОбъектыРемонта.ТипЭксплуатации, ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.ПустаяСсылка)) КАК ТипЭксплуатации,
	               |	ОбъектыРемонта.ПричинаПростоя КАК ПричинаПростоя,
	               |	ЕСТЬNULL(ОбъектыРемонта.ДатаНачалаДействияСостояния, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНачалаДействияСостояния,
	               |	ЕСТЬNULL(ВыявленныеДефекты.КоличествоВыявленныхДефектов, 0) КАК ВыявленныеДефекты,
	               |	ЕСТЬNULL(ВнешниеОснования.КоличествоВнешнихОснований, 0) КАК ВнешниеОснования,
	               |	ЕСТЬNULL(ПлановыеРаботы.КоличествоПлановыхРабот, 0) КАК ПлановыеРаботы,
	               |	ЕСТЬNULL(ВыявленныеДефекты.ПоследнееИзменение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПоследнееИзменениеВыявленныеДефекты,
	               |	ЕСТЬNULL(ВнешниеОснования.ПоследнееИзменение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПоследнееИзменениеВнешниеОснования,
	               |	ВЫБОР
	               |		КОГДА СтатусВыявленДефект.ОбъектРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СтатусВыявленДефект,
	               |	ВЫБОР
	               |		КОГДА СтатусВыполняетсяРемонт.ОбъектРемонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СтатусВыполняетсяРемонт,
	               |	ЕСТЬNULL(РегистрацияУчета.РегистраторПринятияКУчету, НЕОПРЕДЕЛЕНО) КАК РегистраторПринятияКУчету,
	               |	ЕСТЬNULL(РегистрацияУчета.РегистраторСнятияСУчета, НЕОПРЕДЕЛЕНО) КАК РегистраторСнятияСУчета,
	               |	ЕСТЬNULL(БлижайщиеРемонты.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК БлижайшийРемонтДатаНачала,
	               |	ЕСТЬNULL(БлижайщиеРемонты.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК БлижайшийРемонтДатаОкончания
	               |ИЗ
	               |	ОбъектыРемонта КАК ОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВыявленныеДефекты КАК ВыявленныеДефекты
	               |		ПО ОбъектыРемонта.Ссылка = ВыявленныеДефекты.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВнешниеОснования КАК ВнешниеОснования
	               |		ПО ОбъектыРемонта.Ссылка = ВнешниеОснования.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеРаботы КАК ПлановыеРаботы
	               |		ПО ОбъектыРемонта.Ссылка = ПлановыеРаботы.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
	               |		ПО (торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии)
	               |			И ОбъектыРемонта.Ссылка = торо_ИерархическиеСтруктурыОР.ОбъектИерархии
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СтатусВыявленДефект КАК СтатусВыявленДефект
	               |		ПО ОбъектыРемонта.Ссылка = СтатусВыявленДефект.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СтатусВыполняетсяРемонт КАК СтатусВыполняетсяРемонт
	               |		ПО ОбъектыРемонта.Ссылка = СтатусВыполняетсяРемонт.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрацияУчета КАК РегистрацияУчета
	               |		ПО ОбъектыРемонта.Ссылка = РегистрацияУчета.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ БлижайщиеРемонты КАК БлижайщиеРемонты
	               |		ПО ОбъектыРемонта.Ссылка = БлижайщиеРемонты.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала
	               |ИЗ
	               |	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |ГДЕ
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала > &ТекущаяДата
	               |	И торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта В(&СписокОбъектовРемонтов)";
	
	Если Данные.ОРПодКонтролем.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ";" + "ВЫБРАТЬ
		                                    |	ОбъектыРемонта.ОбъектРемонта КАК Ссылка
		                                    |ПОМЕСТИТЬ ОбъектыРемонтаИзСписка
		                                    |ИЗ
		                                    |	&СписокОРПодКонтролем КАК ОбъектыРемонта
		                                    |;
		                                    |
		                                    |////////////////////////////////////////////////////////////////////////////////
		                                    |ВЫБРАТЬ
		                                    |	торо_ВыявленныеДефекты.ОбъектРемонта КАК ОбъектРемонта,
		                                    |	торо_ВыявленныеДефекты.ID КАК ID,
		                                    |	торо_ВыявленныеДефекты.Период КАК Период,
		                                    |	торо_ВыявленныеДефекты.ВидДефекта КАК ВидДефекта,
		                                    |	торо_ВыявленныеДефекты.ДефектПричина КАК ПричинаДефекта
		                                    |ПОМЕСТИТЬ НезавершенныеРемонты
		                                    |ИЗ
		                                    |	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		                                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
		                                    |		ПО торо_ВыявленныеДефекты.ID = ВТ_Ремонты.IDРемонта
		                                    |;
		                                    |
		                                    |////////////////////////////////////////////////////////////////////////////////
		                                    |ВЫБРАТЬ
		                                    |	НезавершенныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
		                                    |	НезавершенныеРемонты.ID КАК ID,
		                                    |	НезавершенныеРемонты.Период КАК Период,
		                                    |	НезавершенныеРемонты.ВидДефекта КАК ВидДефекта,
		                                    |	НезавершенныеРемонты.ПричинаДефекта КАК ПричинаДефекта
		                                    |ИЗ
		                                    |	ОбъектыРемонтаИзСписка КАК ОбъектыРемонтаИзСписка
		                                    |		ЛЕВОЕ СОЕДИНЕНИЕ НезавершенныеРемонты КАК НезавершенныеРемонты
		                                    |		ПО ОбъектыРемонтаИзСписка.Ссылка = НезавершенныеРемонты.ОбъектРемонта
		                                    |ГДЕ
		                                    |	НЕ НезавершенныеРемонты.ID ЕСТЬ NULL
		                                    |;
		                                    |
		                                    |////////////////////////////////////////////////////////////////////////////////
		                                    |ВЫБРАТЬ
		                                    |	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
		                                    |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации.ТипЭксплуатации КАК ТипЭксплуатации
		                                    |ИЗ
		                                    |	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ОбъектРемонта В (&СписокОРПодКонтролем)) КАК торо_ТекущееСостояниеОРСрезПоследних";
		
		ТЗОР = Новый ТаблицаЗначений;
		ТЗОР.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		
		Для Каждого ОР Из Данные.ОРПодКонтролем Цикл
			НС = ТЗОР.Добавить();
			НС.ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(ОР);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокОРПодКонтролем", ТЗОР);
		ТЗОР = Неопределено; // Очистка памяти
	КонецЕсли;
	
	ИспользоватьСогласование = Константы.торо_ИспользоватьСогласование.Получить();
	СтруктураОтвета.Вставить("ИспользоватьСогласование", ИспользоватьСогласование);
	
	Если ИспользоватьСогласование Тогда
		Запрос.Текст = Запрос.Текст + ";" + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.СогласуемыйДокумент КАК Документ,
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.Порядок КАК Порядок,
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.Статус КАК Статус,
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.СогласуемыйДокумент.СпособСогласования КАК ДокументСпособСогласования,
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.НеНапоминать КАК НеНапоминать,
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.Пользователь КАК Пользователь
		                                    |ПОМЕСТИТЬ ДокументыСоСпособамиСогласования
		                                    |ИЗ
		                                    |	РегистрСведений.торо_СтатусыСогласованияДокументовРемонтныхРабот КАК торо_СтатусыСогласованияДокументовРемонтныхРабот
		                                    |ГДЕ
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.Дата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		                                    |
		                                    |ИНДЕКСИРОВАТЬ ПО
		                                    |	ДокументСпособСогласования,
		                                    |	Статус
		                                    |;
		                                    |
		                                    |////////////////////////////////////////////////////////////////////////////////
		                                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                                    |	торо_МатрицаПереходаСтатусовДокументов.СпособСогласования КАК СпособСогласования,
		                                    |	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус КАК ТекущийСтатус,
		                                    |	торо_МатрицаПереходаСтатусовДокументов.СледующийСтатус КАК СледующийСтатус,
		                                    |	торо_НастройкиСтатусовСогласованияДокументов.НеОтображатьВСпискеЗадач КАК НеОтображатьВСпискеЗадач
		                                    |ПОМЕСТИТЬ ВТ_ОтображаемыеСтатусы
		                                    |ИЗ
		                                    |	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
		                                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкиСтатусовСогласованияДокументов КАК торо_НастройкиСтатусовСогласованияДокументов
		                                    |		ПО торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = торо_НастройкиСтатусовСогласованияДокументов.СпособСогласования
		                                    |			И торо_МатрицаПереходаСтатусовДокументов.СледующийСтатус = торо_НастройкиСтатусовСогласованияДокументов.Статус
		                                    |ГДЕ
		                                    |	(торо_МатрицаПереходаСтатусовДокументов.СпособСогласования, торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус) В
		                                    |			(ВЫБРАТЬ
		                                    |				ДокументыСоСпособамиСогласования.ДокументСпособСогласования,
		                                    |				ДокументыСоСпособамиСогласования.Статус
		                                    |			ИЗ
		                                    |				ДокументыСоСпособамиСогласования КАК ДокументыСоСпособамиСогласования)
		                                    |	И торо_НастройкиСтатусовСогласованияДокументов.НеОтображатьВСпискеЗадач = ЛОЖЬ
		                                    |
		                                    |ИНДЕКСИРОВАТЬ ПО
		                                    |	СпособСогласования,
		                                    |	ТекущийСтатус
		                                    |;
		                                    |
		                                    |////////////////////////////////////////////////////////////////////////////////
		                                    |ВЫБРАТЬ
		                                    |	ДокументыСоСпособамиСогласования.Документ КАК Документ,
		                                    |	ДокументыСоСпособамиСогласования.Порядок КАК Порядок,
		                                    |	ДокументыСоСпособамиСогласования.Статус КАК Статус,
		                                    |	ДокументыСоСпособамиСогласования.ДокументСпособСогласования КАК ДокументСпособСогласования,
		                                    |	ДокументыСоСпособамиСогласования.НеНапоминать КАК НеНапоминать,
		                                    |	ДокументыСоСпособамиСогласования.Пользователь КАК Пользователь
		                                    |ПОМЕСТИТЬ ВТ_ОтобранныеЗаписи
		                                    |ИЗ
		                                    |	ДокументыСоСпособамиСогласования КАК ДокументыСоСпособамиСогласования
		                                    |ГДЕ
		                                    |	(ДокументыСоСпособамиСогласования.ДокументСпособСогласования, ДокументыСоСпособамиСогласования.Статус) В
		                                    |			(ВЫБРАТЬ
		                                    |				ВТ_ОтображаемыеСтатусы.СпособСогласования КАК СпособСогласования,
		                                    |				ВТ_ОтображаемыеСтатусы.ТекущийСтатус КАК ТекущийСтатус
		                                    |			ИЗ
		                                    |				ВТ_ОтображаемыеСтатусы КАК ВТ_ОтображаемыеСтатусы)
		                                    |
		                                    |ИНДЕКСИРОВАТЬ ПО
		                                    |	Документ,
		                                    |	Порядок
		                                    |;
		                                    |
		                                    |////////////////////////////////////////////////////////////////////////////////
		                                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.Документ КАК Документ,
		                                    |	МИНИМУМ(торо_СтатусыСогласованияДокументовРемонтныхРабот.Порядок) КАК Порядок
		                                    |ПОМЕСТИТЬ ТекущийПорядок
		                                    |ИЗ
		                                    |	ВТ_ОтобранныеЗаписи КАК торо_СтатусыСогласованияДокументовРемонтныхРабот
		                                    |
		                                    |СГРУППИРОВАТЬ ПО
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.Документ
		                                    |
		                                    |ИНДЕКСИРОВАТЬ ПО
		                                    |	Документ,
		                                    |	Порядок
		                                    |;
		                                    |
		                                    |////////////////////////////////////////////////////////////////////////////////
		                                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.Документ КАК Документ
		                                    |ИЗ
		                                    |	ТекущийПорядок КАК ТекущийПорядок
		                                    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтобранныеЗаписи КАК торо_СтатусыСогласованияДокументовРемонтныхРабот
		                                    |		ПО ТекущийПорядок.Документ = торо_СтатусыСогласованияДокументовРемонтныхРабот.Документ
		                                    |			И ТекущийПорядок.Порядок = торо_СтатусыСогласованияДокументовРемонтныхРабот.Порядок
		                                    |ГДЕ
		                                    |	торо_СтатусыСогласованияДокументовРемонтныхРабот.Пользователь = &Пользователь
		                                    |	И НЕ торо_СтатусыСогласованияДокументовРемонтныхРабот.НеНапоминать";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СтруктураИерархии", Константы.торо_ИерархияДляВводаНовыхОР.Получить());
	
	ПрименитьПарметрыОтбораСписка(Запрос, Данные, Истина);
	
	Результаты = Запрос.ВыполнитьПакет();
	ИтераторРезультатов = 15;
	
	РезультатСписокТЗ = Результаты[ИтераторРезультатов].Выгрузить();
	ИтераторРезультатов = ИтераторРезультатов + 1;
	
	РезультатСписокТЗ.Колонки.Добавить("ПоследнееИзменение", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Для Каждого СтрокаТЗ Из РезультатСписокТЗ Цикл
		СтрокаТЗ.ПоследнееИзменение = Макс(СтрокаТЗ.ПоследнееИзменениеВыявленныеДефекты, СтрокаТЗ.ПоследнееИзменениеВнешниеОснования, СтрокаТЗ.ДатаНачалаДействияСостояния);
	КонецЦикла;
	
	Если Данные.СортироватьПоХронологииВоздействия Тогда
		РезультатСписокТЗ.Сортировать("ПоследнееИзменение УБЫВ");
	Иначе
		РезультатСписокТЗ.Сортировать("Наименование");
	КонецЕсли;
	
	ИспользоватьДокументыПринятияИСписанияОборудования = Константы.торо_ИспользоватьДокументыПринятияИСписанияОборудования.Получить();
	
	МассивБлоков = Новый Массив;
	Для Каждого СтрокаТЗ Из РезультатСписокТЗ Цикл
		Блок = Новый Структура;
		
		Блок.Вставить("Ссылка", СтрокаТЗ.Ссылка.УникальныйИдентификатор());
		Блок.Вставить("Родитель", СтрокаТЗ.Родитель.УникальныйИдентификатор());
		Блок.Вставить("РодительНаименование", Строка(СтрокаТЗ.Родитель));
		Блок.Вставить("Наименование", СтрокаТЗ.Наименование);
		Блок.Вставить("ИнвентарныйНомер", СтрокаТЗ.ИнвентарныйНомер);
		Блок.Вставить("ТипЭксплуатации", XMLСтрока(СтрокаТЗ.ТипЭксплуатации));
		Блок.Вставить("ПричинаПростоя", Строка(СтрокаТЗ.ПричинаПростоя));
		Блок.Вставить("ДатаНачалаДействияСостояния", СтрокаТЗ.ДатаНачалаДействияСостояния);
		Блок.Вставить("ВыявленныеДефекты", СтрокаТЗ.ВыявленныеДефекты);
		Блок.Вставить("ВнешниеОснования", СтрокаТЗ.ВнешниеОснования);
		Блок.Вставить("ПлановыеРаботы", СтрокаТЗ.ПлановыеРаботы);
		Блок.Вставить("ПоследнееИзменение", СтрокаТЗ.ПоследнееИзменение);
		Блок.Вставить("БлижайшийРемонтДатаНачала", СтрокаТЗ.БлижайшийРемонтДатаНачала);
		Блок.Вставить("БлижайшийРемонтДатаОкончания", СтрокаТЗ.БлижайшийРемонтДатаОкончания);
		
		Если СтрокаТЗ.СтатусВыполняетсяРемонт Тогда
			Блок.Вставить("Статус", 1); // Выполняется ремонт
		ИначеЕсли СтрокаТЗ.СтатусВыявленДефект Тогда
			Блок.Вставить("Статус", 2); // Выявлен дефект
		Иначе
			Если Не (ЗначениеЗаполнено(СтрокаТЗ.РегистраторПринятияКУчету) И ЗначениеЗаполнено(СтрокаТЗ.РегистраторСнятияСУчета) И ИспользоватьДокументыПринятияИСписанияОборудования) Тогда
				Блок.Вставить("Статус", 3); // Работает
			Иначе
				Блок.Вставить("Статус", 0); // Отсутствует
			КонецЕсли;
		КонецЕсли;
		
		МассивБлоков.Добавить(Блок);
	КонецЦикла;
	
	СтруктураОтвета.Вставить("ОбъектыРемонта", МассивБлоков);
	
	РезультатСписокТЗ = Неопределено; // Очистка памяти
	
	// Получение плановых ремонтов
	Выборка = Результаты[ИтераторРезультатов].Выбрать();
	ИтераторРезультатов = ИтераторРезультатов + 1;
	
	МассивПлановыхРабот = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПлановаяРабота = Новый Структура;
		
		ПлановаяРабота.Вставить("ОбъектРемонта", Выборка.ОбъектРемонта.УникальныйИдентификатор());
		ПлановаяРабота.Вставить("ДатаНачала", Выборка.ДатаНачала);
		
		МассивПлановыхРабот.Добавить(ПлановаяРабота);
	КонецЦикла;
	
	СтруктураОтвета.Вставить("ПлановыеРаботы", МассивПлановыхРабот);
	
	// Получение данных о объектах под контролем
	МассивРемонтов = Новый Массив;
	МассивСостояний = Новый Массив;
	
	Если Данные.ОРПодКонтролем.Количество() > 0 Тогда
		ИтераторРезультатов = ИтераторРезультатов + 3;
		
		ВыборкаРемонты = Результаты[ИтераторРезультатов].Выбрать();
		ИтераторРезультатов = ИтераторРезультатов + 1;
		Пока ВыборкаРемонты.Следующий() Цикл
			Ремонт = Новый Структура;
			Ремонт.Вставить("ОбъектРемонта", ВыборкаРемонты.ОбъектРемонта.УникальныйИдентификатор());
			Ремонт.Вставить("ИДРемонта", ВыборкаРемонты.ID);
			Ремонт.Вставить("Период", ВыборкаРемонты.Период);
			Ремонт.Вставить("ВидДефекта", Строка(ВыборкаРемонты.ВидДефекта));
			Ремонт.Вставить("ПричинаДефекта", Строка(ВыборкаРемонты.ПричинаДефекта));
			МассивРемонтов.Добавить(Ремонт);
		КонецЦикла;
		
		ВыборкаСостояния = Результаты[ИтераторРезультатов].Выбрать();
		ИтераторРезультатов = ИтераторРезультатов + 1;
		Пока ВыборкаСостояния.Следующий() Цикл
			Состояние = Новый Структура;
			Состояние.Вставить("ОбъектРемонта", ВыборкаСостояния.ОбъектРемонта.УникальныйИдентификатор());
			Состояние.Вставить("ТипЭксплуатации", XMLСтрока(ВыборкаСостояния.ТипЭксплуатации));
			МассивСостояний.Добавить(Состояние);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОтвета.Вставить("Ремонты", МассивРемонтов);
	СтруктураОтвета.Вставить("Состояния", МассивСостояний);
	
	//  Получение данных о соглосованиях
	МассивСогласований = Новый Массив;
	
	Если Константы.торо_ИспользоватьСогласование.Получить() Тогда
		ИтераторРезультатов = ИтераторРезультатов + 4;
		
		Выборка = Результаты[ИтераторРезультатов].Выбрать();
		ИтераторРезультатов = ИтераторРезультатов + 1;
		
		Пока Выборка.Следующий() Цикл
			Согласование = Новый Структура;
			
			Согласование.Вставить("ИДДокумента", Выборка.Документ.УникальныйИдентификатор());
			Согласование.Вставить("ПредставлениеДокумента", Строка(Выборка.Документ));
			Согласование.Вставить("ТипДокумента", Строка(ТипЗнч(Выборка.Документ)));
			
			МассивСогласований.Добавить(Согласование);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОтвета.Вставить("Согласования", МассивСогласований);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьСписокЭлементовСправочника(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ЭтоОбъектыРемонта = Данные.Справочник = "торо_ОбъектыРемонта";
	
	Запрос = Новый Запрос;
	
	Если ЭтоОбъектыРемонта Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК Ссылка,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Родитель
		               |ПОМЕСТИТЬ ИерархическиеСтруктурыОР
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		               |	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &Родитель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИерархическиеСтруктурыОР.Ссылка КАК Ссылка,
		               |	торо_ОбъектыРемонта.Наименование КАК Наименование,
		               |	ИерархическиеСтруктурыОР.Родитель КАК Родитель,
		               |	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
		               |	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления
		               |ИЗ
		               |	ИерархическиеСтруктурыОР КАК ИерархическиеСтруктурыОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |		ПО ИерархическиеСтруктурыОР.Ссылка = торо_ОбъектыРемонта.Ссылка
		               |ГДЕ
		               |	торо_ОбъектыРемонта.Наименование ПОДОБНО &СтрокаПоиска
		               |	И торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	торо_ОбъектыРемонта.ЭтоГруппа УБЫВ,
		               |	торо_ОбъектыРемонта.Наименование";
		
		Запрос.УстановитьПараметр("СтруктураИерархии", Константы.торо_ИерархияДляВводаНовыхОР.Получить());
		
		СправочникМенеджер = Справочники.торо_ОбъектыРемонта;
		
		Если Данные.Родитель = Неопределено Тогда
			СсылкаНаРодителя = СправочникМенеджер.ПустаяСсылка();
		Иначе
			СсылкаНаРодителя = СправочникМенеджер.ПолучитьСсылку(Данные.Родитель);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Родитель", СсылкаНаРодителя);
		
		Если ЗначениеЗаполнено(Данные.СтрокаПоиска) Тогда
			Запрос.УстановитьПараметр("СтрокаПоиска", Данные.СтрокаПоиска);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ИерархическиеСтруктурыОР.РодительИерархии = &Родитель", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Наименование ПОДОБНО &СтрокаПоиска", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ", "ИСТИНА");
		КонецЕсли;
	Иначе
		Если Данные.Иерархический Тогда
			Если Данные.ИерархияЭлементов Тогда
				Запрос.Текст = "ВЫБРАТЬ
				               |	Справочник.Ссылка КАК Ссылка,
				               |	Справочник.Наименование КАК Наименование,
				               |	Справочник.Родитель КАК Родитель,
				               |	Справочник.ПометкаУдаления КАК ПометкаУдаления
				               |ИЗ
				               |	Справочник.%СПРАВОЧНИК% КАК Справочник
				               |ГДЕ
				               |	Справочник.Родитель = &Родитель
				               |	И Справочник.Наименование ПОДОБНО &СтрокаПоиска
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	Наименование";
				
				Если ЗначениеЗаполнено(Данные.СтрокаПоиска) Тогда
					Запрос.УстановитьПараметр("СтрокаПоиска", Данные.СтрокаПоиска);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Родитель = &Родитель", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Наименование ПОДОБНО &СтрокаПоиска", "ИСТИНА");
				КонецЕсли;
			Иначе
				Запрос.Текст = "ВЫБРАТЬ
				               |	Справочник.Ссылка КАК Ссылка,
				               |	Справочник.Наименование КАК Наименование,
				               |	Справочник.Родитель КАК Родитель,
				               |	Справочник.ЭтоГруппа КАК ЭтоГруппа,
				               |	Справочник.ПометкаУдаления КАК ПометкаУдаления
				               |ИЗ
				               |	Справочник.%СПРАВОЧНИК% КАК Справочник
				               |ГДЕ
				               |	Справочник.Родитель = &Родитель
				               |	И Справочник.Наименование ПОДОБНО &СтрокаПоиска
				               |	И Справочник.ЭтоГруппа = ЛОЖЬ
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	ЭтоГруппа УБЫВ,
				               |	Наименование";
				
				Если ЗначениеЗаполнено(Данные.СтрокаПоиска) Тогда
					Запрос.УстановитьПараметр("СтрокаПоиска", Данные.СтрокаПоиска);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Родитель = &Родитель", "ИСТИНА");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Наименование ПОДОБНО &СтрокаПоиска", "ИСТИНА");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ЭтоГруппа = ЛОЖЬ", "ИСТИНА");
				КонецЕсли;
			КонецЕсли;
			
			СправочникМенеджер = Справочники[Данные.Справочник];
			
			Если Данные.Родитель = Неопределено Тогда
				СсылкаНаРодителя = СправочникМенеджер.ПустаяСсылка();
			Иначе
				СсылкаНаРодителя = СправочникМенеджер.ПолучитьСсылку(Данные.Родитель);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Родитель", СсылкаНаРодителя);
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			               |	Справочник.Ссылка КАК Ссылка,
			               |	Справочник.Наименование КАК Наименование,
			               |	Справочник.ПометкаУдаления КАК ПометкаУдаления
			               |ИЗ
			               |	Справочник.%СПРАВОЧНИК% КАК Справочник
			               |ГДЕ
			               |	Справочник.Наименование ПОДОБНО &СтрокаПоиска
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Наименование";
			
			Если ЗначениеЗаполнено(Данные.СтрокаПоиска) Тогда
				Запрос.УстановитьПараметр("СтрокаПоиска", Данные.СтрокаПоиска);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Наименование ПОДОБНО &СтрокаПоиска", "ИСТИНА");
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СПРАВОЧНИК%", Данные.Справочник);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Элемент = Новый Структура;
		
		Элемент.Вставить("Ссылка", Выборка.Ссылка.УникальныйИдентификатор());
		Элемент.Вставить("Наименование", Выборка.Наименование);
		Элемент.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		
		Если Данные.Иерархический Тогда
			Элемент.Вставить("Родитель", Выборка.Родитель.УникальныйИдентификатор());
			
			Если Не Данные.ИерархияЭлементов Или ЭтоОбъектыРемонта Тогда
				Элемент.Вставить("ЭтоГруппа", Выборка.ЭтоГруппа);
			КонецЕсли;
		КонецЕсли;
		
		Массив.Добавить(Элемент);
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Элементы", Массив);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьСостояния(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	               |	торо_ТекущееСостояниеОР.Период КАК Период,
	               |	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК ВидЭксплуатации,
	               |	торо_ТекущееСостояниеОР.ПричинаПростоя КАК ПричинаПростоя,
	               |	торо_ТекущееСостояниеОР.ВидЭксплуатации.ТипЭксплуатации КАК ТипЭксплуатации
	               |ИЗ
	               |	РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	               |ГДЕ
	               |	торо_ТекущееСостояниеОР.ОбъектРемонта = &ОбъектРемонта
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	торо_ТекущееСостояниеОР.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивБлоков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Блок = Новый Структура;
		
		Блок.Вставить("Период", Строка(Выборка.Период));
		Блок.Вставить("ВидЭксплуатации", Строка(Выборка.ВидЭксплуатации));
		Блок.Вставить("ПричинаПростоя", Строка(Выборка.ПричинаПростоя));
		Блок.Вставить("ТипЭксплуатации", Строка(Выборка.ТипЭксплуатации));
		
		МассивБлоков.Добавить(Блок);
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Состояния", МассивБлоков);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьНаработки(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	               |	торо_НаработкаОбъектовРемонта.Период КАК Период,
	               |	торо_НаработкаОбъектовРемонта.Показатель КАК Показатель,
	               |	торо_НаработкаОбъектовРемонта.Наработка КАК Наработка
	               |ИЗ
	               |	РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	               |ГДЕ
	               |	торо_НаработкаОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	               |	И торо_НаработкаОбъектовРемонта.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	торо_НаработкаОбъектовРемонта.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивБлоков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Блок = Новый Структура;
		
		Блок.Вставить("Период", Строка(Выборка.Период));
		Блок.Вставить("Показатель", Строка(Выборка.Показатель));
		Блок.Вставить("Наработка", Выборка.Наработка);
		
		МассивБлоков.Добавить(Блок);
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Наработки", МассивБлоков);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьВыявленныеДефекты(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВыявленныеДефектыСрезПоследних.ID КАК ID,
	               |	торо_ВыявленныеДефектыСрезПоследних.ДефектПричина КАК ДефектПричина,
	               |	торо_ВыявленныеДефектыСрезПоследних.Период КАК Период,
	               |	торо_ВыявленныеДефектыСрезПоследних.ВидДефекта КАК ВидДефекта,
	               |	торо_ВыявленныеДефектыСрезПоследних.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	торо_ВыявленныеДефектыСрезПоследних.КритичностьДефекта КАК КритичностьДефекта,
	               |	торо_ВыявленныеДефектыСрезПоследних.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
	               |	торо_ВыявленныеДефектыСрезПоследних.ДефектОписание КАК ДефектОписание
	               |ПОМЕСТИТЬ ВыявленныеДефекты
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ВыявленныеДефектыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыявленныеДефекты.Период КАК Период,
	               |	ВыявленныеДефекты.ВидДефекта КАК ВидДефекта,
	               |	ВыявленныеДефекты.ДефектПричина КАК ПричинаДефекта,
	               |	ВыявленныеДефекты.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	ВыявленныеДефекты.КритичностьДефекта КАК КритичностьДефекта,
	               |	ВыявленныеДефекты.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
	               |	ВыявленныеДефекты.ДефектОписание КАК ДефектОписание
	               |ИЗ
	               |	ВыявленныеДефекты КАК ВыявленныеДефекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗавершенныеРемонты КАК ЗавершенныеРемонты
	               |		ПО ВыявленныеДефекты.ID = ЗавершенныеРемонты.ID
	               |ГДЕ
	               |	ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивБлоков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Блок = Новый Структура;
		
		Блок.Вставить("Период", Строка(Выборка.Период));
		Блок.Вставить("ВидДефекта", Строка(Выборка.ВидДефекта));
		Блок.Вставить("ПричинаДефекта", Строка(Выборка.ПричинаДефекта));
		Блок.Вставить("ОтказавшийЭлемент", Строка(Выборка.ОтказавшийЭлемент));
		Блок.Вставить("КритичностьДефекта", Строка(Выборка.КритичностьДефекта));
		Блок.Вставить("ДатаНачалаРемонта", Выборка.ДатаНачалаРемонта);
		Блок.Вставить("ДефектОписание", Выборка.ДефектОписание);
		
		МассивБлоков.Добавить(Блок);
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ВыявленныеДефекты", МассивБлоков);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьВнешниеОснования(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВнешниеОснованияДляРаботСрезПоследних.ID КАК ID,
	               |	торо_ВнешниеОснованияДляРаботСрезПоследних.Период КАК Период,
	               |	торо_ВнешниеОснованияДляРаботСрезПоследних.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	               |	торо_ВнешниеОснованияДляРаботСрезПоследних.Описание КАК Описание
	               |ПОМЕСТИТЬ ВнешниеОснования
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ВнешниеОснованияДляРаботСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВнешниеОснования.Период КАК Период,
	               |	ВнешниеОснования.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	               |	ВнешниеОснования.Описание КАК Описание
	               |ИЗ
	               |	ВнешниеОснования КАК ВнешниеОснования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗавершенныеРемонты КАК ЗавершенныеРемонты
	               |		ПО ВнешниеОснования.ID = ЗавершенныеРемонты.ID
	               |ГДЕ
	               |	ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивБлоков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Блок = Новый Структура;
		
		Блок.Вставить("Период", Строка(Выборка.Период));
		Блок.Вставить("ПлановаяДатаРемонта", Строка(Выборка.ПлановаяДатаРемонта));
		Блок.Вставить("Описание", Выборка.Описание);
		
		МассивБлоков.Добавить(Блок);
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ВнешниеОснования", МассивБлоков);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьПлановыеРаботы(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК ID,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Исполнитель КАК Исполнитель,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.СтоимостьРемонта КАК СтоимостьРемонта
	               |ПОМЕСТИТЬ ПлановыеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(&ТекущаяДата, ОбъектРемонтныхРабот = &ОбъектРемонта) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ПлановоеНачало,
	               |	ПлановыеРемонты.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ПлановыеРемонты.СпособВыполнения КАК СпособВыполнения,
	               |	ПлановыеРемонты.Исполнитель КАК Исполнитель,
	               |	ПлановыеРемонты.СтоимостьРемонта КАК СтоимостьРемонта
	               |ИЗ
	               |	ПлановыеРемонты КАК ПлановыеРемонты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |		ПО ПлановыеРемонты.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	               |ГДЕ
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала > &ТекущаяДата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПлановоеНачало";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивБлоков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Блок = Новый Структура;
		
		Блок.Вставить("ПлановоеНачало", Строка(Выборка.ПлановоеНачало));
		Блок.Вставить("ВидРемонтныхРабот", Строка(Выборка.ВидРемонтныхРабот));
		Блок.Вставить("СпособВыполнения", Строка(Выборка.СпособВыполнения));
		Блок.Вставить("Исполнитель", Строка(Выборка.Исполнитель));
		Блок.Вставить("СтоимостьРемонта", Выборка.СтоимостьРемонта);
		
		МассивБлоков.Добавить(Блок);
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ПлановыеРаботы", МассивБлоков);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьДанныеПоОбъектуРемонта(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВыявленныеДефектыСрезПоследних.ID КАК ID,
	               |	торо_ВыявленныеДефектыСрезПоследних.ДефектПричина КАК ДефектПричина,
	               |	торо_ВыявленныеДефектыСрезПоследних.Период КАК Период,
	               |	торо_ВыявленныеДефектыСрезПоследних.ВидДефекта КАК ВидДефекта
	               |ПОМЕСТИТЬ ВыявленныеДефекты
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ВыявленныеДефектыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыявленныеДефекты.ID КАК ID,
	               |	ВыявленныеДефекты.Период КАК Период,
	               |	ВыявленныеДефекты.ВидДефекта КАК ВидДефекта,
	               |	ВыявленныеДефекты.ДефектПричина КАК ПричинаДефекта
	               |ИЗ
	               |	ВыявленныеДефекты КАК ВыявленныеДефекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗавершенныеРемонты КАК ЗавершенныеРемонты
	               |		ПО ВыявленныеДефекты.ID = ЗавершенныеРемонты.ID
	               |ГДЕ
	               |	ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации.ТипЭксплуатации КАК ТипЭксплуатации
	               |ИЗ
	               |	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ТекущееСостояниеОРСрезПоследних";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта));
	
	Результаты = Запрос.ВыполнитьПакет();
	
	МассивРемонтов = Новый Массив;
	
	ВыборкаРемонты = Результаты[2].Выбрать();
	Пока ВыборкаРемонты.Следующий() Цикл
		Ремонт = Новый Структура;
		Ремонт.Вставить("ИДРемонта", ВыборкаРемонты.ID);
		Ремонт.Вставить("Период", ВыборкаРемонты.Период);
		Ремонт.Вставить("ВидДефекта", Строка(ВыборкаРемонты.ВидДефекта));
		Ремонт.Вставить("ПричинаДефекта", Строка(ВыборкаРемонты.ПричинаДефекта));
		МассивРемонтов.Добавить(Ремонт);
	КонецЦикла;
	
	МассивСостояний = Новый Массив;
	
	ВыборкаСостояние = Результаты[3].Выбрать();
	Если ВыборкаСостояние.Следующий() Тогда
		МассивСостояний.Добавить(XMLСтрока(ВыборкаСостояние.ТипЭксплуатации));
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ремонты", МассивРемонтов);
	СтруктураОтвета.Вставить("Состояния", МассивСостояний);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьНомерПодразделенияОбъектаРемонта(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта);
	
	СтруктураОтвета = ПолучитьНомерРуководителяПодразделения(ОбъектРемонта.Подразделение);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьНомерПодразделенияИсполнителяОбъектаРемонта(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта);
	
	СтруктураОтвета = ПолучитьНомерРуководителяПодразделения(ОбъектРемонта.ПодразделениеИсполнитель);
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьПараметрыФормыОбъектаРемонта(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Данные.ОбъектРемонта);
	
	СтруктураОтвета = Новый Структура("ВыявленныеДефекты, ВнешниеОснования, ПлановыеРаботы", 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(*) КАК КоличествоВыявленныхДефектов
	               |ПОМЕСТИТЬ ВыявленныеДефекты
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ВыявленныеДефектыСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗавершенныеРемонты КАК ЗавершенныеРемонты
	               |		ПО торо_ВыявленныеДефектыСрезПоследних.ID = ЗавершенныеРемонты.ID
	               |ГДЕ
	               |	ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(*) КАК КоличествоВнешнихОснований
	               |ПОМЕСТИТЬ ВнешниеОснования
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ВнешниеОснованияСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗавершенныеРемонты КАК ЗавершенныеРемонты
	               |		ПО торо_ВнешниеОснованияСрезПоследних.ID = ЗавершенныеРемонты.ID
	               |ГДЕ
	               |	ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(*) КАК КоличествоПлановыхРабот
	               |ПОМЕСТИТЬ ПлановыеРаботы
	               |ИЗ
	               |	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |ГДЕ
	               |	торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта = &ОбъектРемонта
	               |	И торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала > &ТекущаяДата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыявленныеДефекты.КоличествоВыявленныхДефектов КАК КоличествоВыявленныхДефектов,
	               |	ВнешниеОснования.КоличествоВнешнихОснований КАК КоличествоВнешнихОснований,
	               |	ПлановыеРаботы.КоличествоПлановыхРабот КАК КоличествоПлановыхРабот
	               |ИЗ
	               |	ВыявленныеДефекты КАК ВыявленныеДефекты,
	               |	ВнешниеОснования КАК ВнешниеОснования,
	               |	ПлановыеРаботы КАК ПлановыеРаботы";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураОтвета.ВыявленныеДефекты = Выборка.КоличествоВыявленныхДефектов;
		СтруктураОтвета.ВнешниеОснования = Выборка.КоличествоВнешнихОснований;
		СтруктураОтвета.ПлановыеРаботы = Выборка.КоличествоПлановыхРабот;
	КонецЕсли;
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьДанныеОДокументеДляСогласования(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ИДДокумента = Данные.ИДДокумента;
	ТипДокумента = Данные.ТипДокумента;
	
	СтруктураОтвета = Новый Структура("ОшибкаПолученияДанных", Ложь);
	
	Если ТипДокумента = "Выявленные дефекты" Тогда
		Документ = Документы.торо_ВыявленныеДефекты.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ВыявленныеДефекты.Организация КАК Организация,
		               |	торо_ВыявленныеДефекты.Подразделение КАК Подразделение,
		               |	торо_ВыявленныеДефекты.ДефектВыявленВПроцессе КАК ДефектВыявленВПроцессе
		               |ИЗ
		               |	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		               |ГДЕ
		               |	торо_ВыявленныеДефекты.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ВыявленныеДефектыСписокДефектов.ВидДефекта КАК ВидДефекта,
		               |	торо_ВыявленныеДефектыСписокДефектов.ДефектВыявленВПроцессе КАК ДефектВыявленВПроцессе,
		               |	торо_ВыявленныеДефектыСписокДефектов.ДефектПричина КАК ДефектПричина
		               |ИЗ
		               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		               |ГДЕ
		               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			СтруктураОтвета.Вставить("ДефектВыявленВПроцессе", Строка(ВыборкаДокумент.ДефектВыявленВПроцессе));
			
			ВыборкаСписокДефектов = Результаты[1].Выбрать();
			
			СписокДефектов = Новый Массив;
			
			Пока ВыборкаСписокДефектов.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаСписокДефектов.ОбъектРемонта));
				Структура.Вставить("ВидДефекта", Строка(ВыборкаСписокДефектов.ВидДефекта));
				Структура.Вставить("ДефектПричина", Строка(ВыборкаСписокДефектов.ДефектПричина));
				
				СписокДефектов.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("СписокДефектов", СписокДефектов);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Внешнее основание для работ" Тогда
		Документ = Документы.торо_ВнешнееОснованиеДляРабот.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ВнешнееОснованиеДляРабот.Организация КАК Организация,
		               |	торо_ВнешнееОснованиеДляРабот.Подразделение КАК Подразделение
		               |ИЗ
		               |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
		               |ГДЕ
		               |	торо_ВнешнееОснованиеДляРабот.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID КАК ID,
		               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта
		               |ИЗ
		               |	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК торо_ВнешнееОснованиеДляРаботОбследованноеОборудование
		               |ГДЕ
		               |	торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.Предписание_ID КАК Предписание_ID,
		               |	торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.Количество КАК Количество
		               |ИЗ
		               |	Документ.торо_ВнешнееОснованиеДляРабот.РемонтныеРаботы КАК торо_ВнешнееОснованиеДляРаботРемонтныеРаботы
		               |ГДЕ
		               |	торо_ВнешнееОснованиеДляРаботРемонтныеРаботы.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			ВыборкаОбследованноеОборудование = Результаты[1].Выбрать();
			
			ОбследованноеОборудование = Новый Массив;
			
			Пока ВыборкаОбследованноеОборудование.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ID", ВыборкаОбследованноеОборудование.ID);
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаОбследованноеОборудование.ОбъектРемонта));
				Структура.Вставить("ПлановаяДатаРемонта", ВыборкаОбследованноеОборудование.ПлановаяДатаРемонта);
				
				ОбследованноеОборудование.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("ОбследованноеОборудование", ОбследованноеОборудование);
			
			ВыборкаРемонтныеРаботы = Результаты[2].Выбрать();
			
			РемонтныеРаботы = Новый Массив;
			
			Пока ВыборкаРемонтныеРаботы.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("Предписание_ID", ВыборкаРемонтныеРаботы.Предписание_ID);
				Структура.Вставить("РемонтнаяРабота", Строка(ВыборкаРемонтныеРаботы.РемонтнаяРабота));
				Структура.Вставить("Количество", ВыборкаРемонтныеРаботы.Количество);
				
				РемонтныеРаботы.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РемонтныеРаботы", РемонтныеРаботы);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Наряд на регламентное мероприятие" Тогда
		Документ = Документы.торо_НарядНаРегламентноеМероприятие.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_НарядНаРегламентноеМероприятие.Организация КАК Организация,
		               |	торо_НарядНаРегламентноеМероприятие.Подразделение КАК Подразделение
		               |ИЗ
		               |	Документ.торо_НарядНаРегламентноеМероприятие КАК торо_НарядНаРегламентноеМероприятие
		               |ГДЕ
		               |	торо_НарядНаРегламентноеМероприятие.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID КАК ID,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаНачала КАК ДатаНачала,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
		               |ГДЕ
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Количество КАК Количество
		               |ИЗ
		               |	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы
		               |ГДЕ
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			ВыборкаРегламентныеМероприятия = Результаты[1].Выбрать();
			
			РегламентныеМероприятия = Новый Массив;
			
			Пока ВыборкаРегламентныеМероприятия.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ID", ВыборкаРегламентныеМероприятия.ID);
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаРегламентныеМероприятия.ОбъектРемонта));
				Структура.Вставить("ВидРемонтныхРабот", Строка(ВыборкаРегламентныеМероприятия.ВидРемонтныхРабот));
				Структура.Вставить("ДатаНачала", ВыборкаРегламентныеМероприятия.ДатаНачала);
				Структура.Вставить("ДатаОкончания", ВыборкаРегламентныеМероприятия.ДатаОкончания);
				
				РегламентныеМероприятия.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РегламентныеМероприятия", РегламентныеМероприятия);
			
			ВыборкаРемонтныеРаботы = Результаты[2].Выбрать();
			
			РемонтныеРаботы = Новый Массив;
			
			Пока ВыборкаРемонтныеРаботы.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("РемонтыОборудования_ID", ВыборкаРемонтныеРаботы.РемонтыОборудования_ID);
				Структура.Вставить("РемонтнаяРабота", Строка(ВыборкаРемонтныеРаботы.РемонтнаяРабота));
				Структура.Вставить("Количество", ВыборкаРемонтныеРаботы.Количество);
				
				РемонтныеРаботы.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РемонтныеРаботы", РемонтныеРаботы);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "План-график ППР" Тогда
		Документ = Документы.торо_ПланГрафикРемонта.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ПланГрафикРемонта.Организация КАК Организация,
		               |	торо_ПланГрафикРемонта.Подразделение КАК Подразделение,
		               |	торо_ПланГрафикРемонта.ДатаПланирования КАК ДатаПланирования,
		               |	торо_ПланГрафикРемонта.КоличествоПериодов КАК КоличествоПериодов,
		               |	торо_ПланГрафикРемонта.ПериодичностьДетализации КАК ПериодичностьДетализации
		               |ИЗ
		               |	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
		               |ГДЕ
		               |	торо_ПланГрафикРемонта.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач КАК ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон КАК ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта КАК СуммаРемонта
		               |ИЗ
		               |	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |ГДЕ
		               |	торо_ПланГрафикРемонтаПланРемонтов.Ссылка = &Документ
		               |ИТОГИ ПО
		               |	ОбъектРемонтныхРабот,
		               |	ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			СтруктураОтвета.Вставить("ДатаПланирования", ВыборкаДокумент.ДатаПланирования);
			СтруктураОтвета.Вставить("КоличествоПериодов", ВыборкаДокумент.КоличествоПериодов);
			СтруктураОтвета.Вставить("ПериодичностьДетализации", Строка(ВыборкаДокумент.ПериодичностьДетализации));
			
			ВыборкаОбъектРемонтныхРабот = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ОбъектыРемонтныхРабот = Новый Массив;
			
			Пока ВыборкаОбъектРемонтныхРабот.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ОбъектРемонтныхРабот", Строка(ВыборкаОбъектРемонтныхРабот.ОбъектРемонтныхРабот));
				
				ВидыРемонтныхРабот = Новый Массив;
				
				ВыборкаВидыРемонтныхРабот = ВыборкаОбъектРемонтныхРабот.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыРемонтныхРабот.Следующий() Цикл
					ВидРемонтныхРабот = Новый Структура;
					
					ВидРемонтныхРабот.Вставить("ВидРемонтныхРабот", Строка(ВыборкаВидыРемонтныхРабот.ВидРемонтныхРабот));
					
					ПланРемонтов = Новый Массив;
					
					ВыборкаПланРемонтов = ВыборкаВидыРемонтныхРабот.Выбрать();
					Пока ВыборкаПланРемонтов.Следующий() Цикл
						План = Новый Структура;
						
						План.Вставить("ДатаНач", ВыборкаПланРемонтов.ДатаНач);
						План.Вставить("ДатаКон", ВыборкаПланРемонтов.ДатаКон);
						План.Вставить("СуммаРемонта", ВыборкаПланРемонтов.СуммаРемонта);
						
						ПланРемонтов.Добавить(План);
					КонецЦикла;
						
					ВидРемонтныхРабот.Вставить("ПланРемонтов", ПланРемонтов);
					
					ВидыРемонтныхРабот.Добавить(ВидРемонтныхРабот);
				КонецЦикла;
				
				Структура.Вставить("ВидыРемонтныхРабот", ВидыРемонтныхРабот);
				
				ОбъектыРемонтныхРабот.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("ОбъектыРемонтныхРабот", ОбъектыРемонтныхРабот);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Наряд на выполнение ремонтных работ" Тогда
		Документ = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_НарядНаВыполнениеРемонтныхРабот.Организация КАК Организация,
		               |	торо_НарядНаВыполнениеРемонтныхРабот.Подразделение КАК Подразделение
		               |ИЗ
		               |	Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
		               |ГДЕ
		               |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID КАК ID,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		               |ГДЕ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Количество КАК Количество
		               |ИЗ
		               |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		               |ГДЕ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			ВыборкаРемонтыОборудования = Результаты[1].Выбрать();
			
			РемонтыОборудования = Новый Массив;
			
			Пока ВыборкаРемонтыОборудования.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ID", ВыборкаРемонтыОборудования.ID);
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаРемонтыОборудования.ОбъектРемонта));
				Структура.Вставить("ВидРемонтныхРабот", Строка(ВыборкаРемонтыОборудования.ВидРемонтныхРабот));
				Структура.Вставить("ДатаНачала", ВыборкаРемонтыОборудования.ДатаНачала);
				Структура.Вставить("ДатаОкончания", ВыборкаРемонтыОборудования.ДатаОкончания);
				
				РемонтыОборудования.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РемонтыОборудования", РемонтыОборудования);
			
			ВыборкаРемонтныеРаботы = Результаты[2].Выбрать();
			
			РемонтныеРаботы = Новый Массив;
			
			Пока ВыборкаРемонтныеРаботы.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("РемонтыОборудования_ID", ВыборкаРемонтныеРаботы.РемонтыОборудования_ID);
				Структура.Вставить("РемонтнаяРабота", Строка(ВыборкаРемонтныеРаботы.РемонтнаяРабота));
				Структура.Вставить("Количество", ВыборкаРемонтныеРаботы.Количество);
				
				РемонтныеРаботы.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РемонтныеРаботы", РемонтныеРаботы);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "График регламентных мероприятий" Тогда
		Документ = Документы.торо_ГрафикРегламентныхМероприятийТОиР.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ГрафикРегламентныхМероприятийТОиР.Организация КАК Организация,
		               |	торо_ГрафикРегламентныхМероприятийТОиР.Подразделение КАК Подразделение
		               |ИЗ
		               |	Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_ГрафикРегламентныхМероприятийТОиР
		               |ГДЕ
		               |	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта КАК СписокОбъектовРемонта,
		               |	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаНач КАК ДатаНач,
		               |	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаКон КАК ДатаКон,
		               |	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СуммаРемонта КАК СуммаРемонта
		               |ИЗ
		               |	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
		               |ГДЕ
		               |	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка = &Документ
		               |ИТОГИ ПО
		               |	СписокОбъектовРемонта,
		               |	ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			ВыборкаСписокОбъектовРемонта = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			СпискиОбъектовРемонта = Новый Массив;
			
			Пока ВыборкаСписокОбъектовРемонта.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("СписокОбъектовРемонта", Строка(ВыборкаСписокОбъектовРемонта.СписокОбъектовРемонта));
				
				ВидыРемонтныхРабот = Новый Массив;
				
				ВыборкаВидыРемонтныхРабот = ВыборкаСписокОбъектовРемонта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыРемонтныхРабот.Следующий() Цикл
					ВидРемонтныхРабот = Новый Структура;
					
					ВидРемонтныхРабот.Вставить("ВидРемонтныхРабот", Строка(ВыборкаВидыРемонтныхРабот.ВидРемонтныхРабот));
					
					ПланРемонтов = Новый Массив;
					
					ВыборкаПланРемонтов = ВыборкаВидыРемонтныхРабот.Выбрать();
					Пока ВыборкаПланРемонтов.Следующий() Цикл
						План = Новый Структура;
						
						План.Вставить("ДатаНач", ВыборкаПланРемонтов.ДатаНач);
						План.Вставить("ДатаКон", ВыборкаПланРемонтов.ДатаКон);
						План.Вставить("СуммаРемонта", ВыборкаПланРемонтов.СуммаРемонта);
						
						ПланРемонтов.Добавить(План);
					КонецЦикла;
						
					ВидРемонтныхРабот.Вставить("ПланРемонтов", ПланРемонтов);
					
					ВидыРемонтныхРабот.Добавить(ВидРемонтныхРабот);
				КонецЦикла;
				
				Структура.Вставить("ВидыРемонтныхРабот", ВидыРемонтныхРабот);
				
				СпискиОбъектовРемонта.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("СпискиОбъектовРемонта", СпискиОбъектовРемонта);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Акт о выполнении регламентного мероприятия" Тогда
		Документ = Документы.торо_АктОВыполненииРегламентногоМероприятия.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_АктОВыполненииРегламентногоМероприятия.Организация КАК Организация,
		               |	торо_АктОВыполненииРегламентногоМероприятия.Подразделение КАК Подразделение
		               |ИЗ
		               |	Документ.торо_АктОВыполненииРегламентногоМероприятия КАК торо_АктОВыполненииРегламентногоМероприятия
		               |ГДЕ
		               |	торо_АктОВыполненииРегламентногоМероприятия.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID КАК ID,
		               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ДатаНачала КАК ДатаНачала,
		               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ДатаОкончания КАК ДатаОкончания,
		               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ЗавершитьРемонт КАК ЗавершитьРемонт
		               |ИЗ
		               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК торо_АктОВыполненииРегламентногоМероприятияМероприятия
		               |ГДЕ
		               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Количество КАК Количество
		               |ИЗ
		               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			ВыборкаРемонтыОборудования = Результаты[1].Выбрать();
			
			РемонтыОборудования = Новый Массив;
			
			Пока ВыборкаРемонтыОборудования.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ID", ВыборкаРемонтыОборудования.ID);
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаРемонтыОборудования.ОбъектРемонта));
				Структура.Вставить("ВидРемонтныхРабот", Строка(ВыборкаРемонтыОборудования.ВидРемонтныхРабот));
				Структура.Вставить("ДатаНачала", ВыборкаРемонтыОборудования.ДатаНачала);
				Структура.Вставить("ДатаОкончания", ВыборкаРемонтыОборудования.ДатаОкончания);
				Структура.Вставить("ЗавершитьРемонт", ВыборкаРемонтыОборудования.ЗавершитьРемонт);
				
				РемонтыОборудования.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РемонтыОборудования", РемонтыОборудования);
			
			ВыборкаСписокРабот = Результаты[2].Выбрать();
			
			СписокРабот = Новый Массив;
			
			Пока ВыборкаСписокРабот.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("РемонтыОборудования_ID", ВыборкаСписокРабот.РемонтыОборудования_ID);
				Структура.Вставить("РемонтнаяРабота", Строка(ВыборкаСписокРабот.РемонтнаяРабота));
				Структура.Вставить("Количество", ВыборкаСписокРабот.Количество);
				
				СписокРабот.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("СписокРабот", СписокРабот);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Остановочный ремонт" Тогда
		Документ = Документы.торо_ОстановочныеРемонты.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ОстановочныеРемонты.Организация КАК Организация,
		               |	торо_ОстановочныеРемонты.Подразделение КАК Подразделение,
		               |	торо_ОстановочныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ОстановочныеРемонты.ВидРемонта КАК ВидРемонта,
		               |	торо_ОстановочныеРемонты.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		               |	торо_ОстановочныеРемонты.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта
		               |ИЗ
		               |	Документ.торо_ОстановочныеРемонты КАК торо_ОстановочныеРемонты
		               |ГДЕ
		               |	торо_ОстановочныеРемонты.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ВидРемонта КАК ВидРемонта,
		               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта
		               |ИЗ
		               |	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
		               |ГДЕ
		               |	торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			СтруктураОтвета.Вставить("ОбъектРемонта", Строка(ВыборкаДокумент.ОбъектРемонта));
			СтруктураОтвета.Вставить("ВидРемонта", Строка(ВыборкаДокумент.ВидРемонта));
			СтруктураОтвета.Вставить("ДатаНачалаРемонта", ВыборкаДокумент.ДатаНачалаРемонта);
			СтруктураОтвета.Вставить("ДатаОкончанияРемонта", ВыборкаДокумент.ДатаОкончанияРемонта);
			
			ВыборкаСвязанныеРемонты = Результаты[1].Выбрать();
			
			СвязанныеРемонты = Новый Массив;
			
			Пока ВыборкаСвязанныеРемонты.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаСвязанныеРемонты.ОбъектРемонта));
				Структура.Вставить("ВидРемонта", Строка(ВыборкаСвязанныеРемонты.ВидРемонта));
				Структура.Вставить("ДатаНачалаРемонта", ВыборкаСвязанныеРемонты.ДатаНачалаРемонта);
				Структура.Вставить("ДатаОкончанияРемонта", ВыборкаСвязанныеРемонты.ДатаОкончанияРемонта);
				
				СвязанныеРемонты.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("СвязанныеРемонты", СвязанныеРемонты);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Акт о выполнении этапа работ" Тогда
		Документ = Документы.торо_АктОВыполненииЭтапаРабот.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_АктОВыполненииЭтапаРабот.Организация КАК Организация,
		               |	торо_АктОВыполненииЭтапаРабот.Подразделение КАК Подразделение
		               |ИЗ
		               |	Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
		               |ГДЕ
		               |	торо_АктОВыполненииЭтапаРабот.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт КАК ЗавершитьРемонт
		               |ИЗ
		               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		               |ГДЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Количество КАК Количество
		               |ИЗ
		               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
		               |ГДЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			ВыборкаРемонтыОборудования = Результаты[1].Выбрать();
			
			РемонтыОборудования = Новый Массив;
			
			Пока ВыборкаРемонтыОборудования.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ID", ВыборкаРемонтыОборудования.ID);
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаРемонтыОборудования.ОбъектРемонта));
				Структура.Вставить("ВидРемонтныхРабот", Строка(ВыборкаРемонтыОборудования.ВидРемонтныхРабот));
				Структура.Вставить("ДатаНачала", ВыборкаРемонтыОборудования.ДатаНачала);
				Структура.Вставить("ДатаОкончания", ВыборкаРемонтыОборудования.ДатаОкончания);
				Структура.Вставить("ЗавершитьРемонт", ВыборкаРемонтыОборудования.ЗавершитьРемонт);
				
				РемонтыОборудования.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РемонтыОборудования", РемонтыОборудования);
			
			ВыборкаСписокРабот = Результаты[2].Выбрать();
			
			СписокРабот = Новый Массив;
			
			Пока ВыборкаСписокРабот.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("РемонтыОборудования_ID", ВыборкаСписокРабот.РемонтыОборудования_ID);
				Структура.Вставить("РемонтнаяРабота", Строка(ВыборкаСписокРабот.РемонтнаяРабота));
				Структура.Вставить("Количество", ВыборкаСписокРабот.Количество);
				
				СписокРабот.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("СписокРабот", СписокРабот);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "План работ" Тогда
		Документ = Документы.торо_ПланРаботПодразделения.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ПланРаботПодразделения.Организация КАК Организация,
		               |	торо_ПланРаботПодразделения.Подразделение КАК Подразделение,
		               |	торо_ПланРаботПодразделения.ВидПлана КАК ВидПлана,
		               |	торо_ПланРаботПодразделения.КоличествоПериодов КАК КоличествоПериодов,
		               |	торо_ПланРаботПодразделения.ПериодичностьПланирования КАК ПериодичностьПланирования,
		               |	торо_ПланРаботПодразделения.ТочностьПланирования КАК ТочностьПланирования
		               |ИЗ
		               |	Документ.торо_ПланРаботПодразделения КАК торо_ПланРаботПодразделения
		               |ГДЕ
		               |	торо_ПланРаботПодразделения.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ПланРаботПодразделенияСписокРемонтовПлана.ВидРемонта КАК ВидРемонта,
		               |	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаНачала КАК ДатаНачала,
		               |	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_ПланРаботПодразделения.СписокРемонтовПлана КАК торо_ПланРаботПодразделенияСписокРемонтовПлана
		               |ГДЕ
		               |	торо_ПланРаботПодразделенияСписокРемонтовПлана.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			СтруктураОтвета.Вставить("ВидПлана", Строка(ВыборкаДокумент.ВидПлана));
			СтруктураОтвета.Вставить("КоличествоПериодов", ВыборкаДокумент.КоличествоПериодов);
			СтруктураОтвета.Вставить("ПериодичностьПланирования", XMLСтрока(ВыборкаДокумент.ПериодичностьПланирования));
			СтруктураОтвета.Вставить("ТочностьПланирования", Строка(ВыборкаДокумент.ТочностьПланирования));
			
			ВыборкаСписокРемонтовПлана = Результаты[1].Выбрать();
			
			СписокРемонтовПлана = Новый Массив;
			
			Пока ВыборкаСписокРемонтовПлана.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаСписокРемонтовПлана.ОбъектРемонта));
				Структура.Вставить("ВидРемонта", Строка(ВыборкаСписокРемонтовПлана.ВидРемонта));
				Структура.Вставить("ДатаНачала", ВыборкаСписокРемонтовПлана.ДатаНачала);
				Структура.Вставить("ДатаОкончания", ВыборкаСписокРемонтовПлана.ДатаОкончания);
				
				СписокРемонтовПлана.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("СписокРемонтовПлана", СписокРемонтовПлана);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Смета ремонта (Заявка на ремонт)" Тогда
		Документ = Документы.торо_ЗаявкаНаРемонт.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ЗаявкаНаРемонт.Организация КАК Организация,
		               |	торо_ЗаявкаНаРемонт.Подразделение КАК Подразделение
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонт.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Количество КАК Количество
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			ВыборкаРемонтыОборудования = Результаты[1].Выбрать();
			
			РемонтыОборудования = Новый Массив;
			
			Пока ВыборкаРемонтыОборудования.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ID", ВыборкаРемонтыОборудования.ID);
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаРемонтыОборудования.ОбъектРемонта));
				Структура.Вставить("ВидРемонтныхРабот", Строка(ВыборкаРемонтыОборудования.ВидРемонтныхРабот));
				Структура.Вставить("ДатаНачала", ВыборкаРемонтыОборудования.ДатаНачала);
				Структура.Вставить("ДатаОкончания", ВыборкаРемонтыОборудования.ДатаОкончания);
				
				РемонтыОборудования.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РемонтыОборудования", РемонтыОборудования);
			
			ВыборкаСписокРабот = Результаты[2].Выбрать();
			
			СписокРабот = Новый Массив;
			
			Пока ВыборкаСписокРабот.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("РемонтыОборудования_ID", ВыборкаСписокРабот.РемонтыОборудования_ID);
				Структура.Вставить("РемонтнаяРабота", Строка(ВыборкаСписокРабот.РемонтнаяРабота));
				Структура.Вставить("Количество", ВыборкаСписокРабот.Количество);
				
				СписокРабот.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("СписокРабот", СписокРабот);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Акт приемки оборудования" Тогда
		Документ = Документы.торо_АктПриемкиОборудования.ПолучитьСсылку(ИДДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_АктПриемкиОборудования.Организация КАК Организация,
		               |	торо_АктПриемкиОборудования.Подразделение КАК Подразделение
		               |ИЗ
		               |	Документ.торо_АктПриемкиОборудования КАК торо_АктПриемкиОборудования
		               |ГДЕ
		               |	торо_АктПриемкиОборудования.Ссылка = &Документ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот
		               |ИЗ
		               |	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
		               |ГДЕ
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВыборкаДокумент = Результаты[0].Выбрать();
		
		Если ВыборкаДокумент.Следующий() Тогда
			СтруктураОтвета.Вставить("Организация", Строка(ВыборкаДокумент.Организация));
			СтруктураОтвета.Вставить("Подразделение", Строка(ВыборкаДокумент.Подразделение));
			
			ВыборкаРемонтыОборудования = Результаты[1].Выбрать();
			
			РемонтыОборудования = Новый Массив;
			
			Пока ВыборкаРемонтыОборудования.Следующий() Цикл
				Структура = Новый Структура;
				
				Структура.Вставить("ОбъектРемонта", Строка(ВыборкаРемонтыОборудования.ОбъектРемонта));
				Структура.Вставить("ВидРемонтныхРабот", Строка(ВыборкаРемонтыОборудования.ВидРемонтныхРабот));
				
				РемонтыОборудования.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("РемонтыОборудования", РемонтыОборудования);
		Иначе
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
		КонецЕсли;
	Иначе
		СтруктураОтвета.ОшибкаПолученияДанных = Истина;
	КонецЕсли;
	
	Если Не СтруктураОтвета.ОшибкаПолученияДанных Тогда
		Статусы = Новый Массив;
		
		ТекущийСтатус = торо_РаботаССогласованиями.ПолучитьТекущийСтатусСогласованияДокумента(Документ);
		СледующиеСтатусы = торо_РаботаССогласованиями.ПолучитьСписокСледующихСтатусовДокумента(Документ.СпособСогласования, ТекущийСтатус);
		
		Для Каждого Статус Из СледующиеСтатусы Цикл
			ТекСтатус = Статус.Значение;
			
			Структура = Новый Структура;
			
			Структура.Вставить("ИДСтатуса", ТекСтатус.УникальныйИдентификатор());
			Структура.Вставить("СтатусПредставление", Строка(ТекСтатус));
			
			Статусы.Добавить(Структура);
		КонецЦикла;
		
		СтруктураОтвета.Вставить("Статусы", Статусы);
	КонецЕсли;
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция УтвердитьСтатусДокумента(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ИДДокумента = Данные.ИДДокумента;
	ТипДокумента = Данные.ТипДокумента;
	ИДСтатуса = Данные.ИДСтатуса;
	
	СтруктураОтвета = Новый Структура("ОшибкаПолученияДанных", Ложь);
	
	Если ТипДокумента = "Выявленные дефекты" Тогда
		Документ = Документы.торо_ВыявленныеДефекты.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "Внешнее основание для работ" Тогда
		Документ = Документы.торо_ВнешнееОснованиеДляРабот.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "Наряд на регламентное мероприятие" Тогда
		Документ = Документы.торо_НарядНаРегламентноеМероприятие.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "План-график ППР" Тогда
		Документ = Документы.торо_ПланГрафикРемонта.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "Наряд на выполнение ремонтных работ" Тогда
		Документ = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "График регламентных мероприятий" Тогда
		Документ = Документы.торо_ГрафикРегламентныхМероприятийТОиР.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "Акт о выполнении регламентного мероприятия" Тогда
		Документ = Документы.торо_АктОВыполненииРегламентногоМероприятия.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "Остановочный ремонт" Тогда
		Документ = Документы.торо_ОстановочныеРемонты.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "Акт о выполнении этапа работ" Тогда
		Документ = Документы.торо_АктОВыполненииЭтапаРабот.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "План работ" Тогда
		Документ = Документы.торо_ПланРаботПодразделения.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "Смета ремонта (Заявка на ремонт)" Тогда
		Документ = Документы.торо_ЗаявкаНаРемонт.ПолучитьСсылку(ИДДокумента);
	ИначеЕсли ТипДокумента = "Акт приемки оборудования" Тогда
		Документ = Документы.торо_АктПриемкиОборудования.ПолучитьСсылку(ИДДокумента);
	Иначе
		СтруктураОтвета.ОшибкаПолученияДанных = Истина;
	КонецЕсли;
	
	Если Не СтруктураОтвета.ОшибкаПолученияДанных Тогда
		Статус = Справочники.торо_СтатусыСогласованияДокументовРемонтныхРабот.ПолучитьСсылку(ИДСтатуса);
		
		Попытка
			Объект = Документ.ПолучитьОбъект();
			
			ТекущийСтатус = торо_РаботаССогласованиями.ПолучитьТекущийСтатусСогласованияДокумента(Документ);
			СогласующиеДокумента = торо_РаботаССогласованиями.ПолучитьТаблицуСогласующихДокумента(Объект.Ссылка);
			ДеревоСогласования = ПолучитьДеревоСогласования(Объект.СпособСогласования, ТекущийСтатус, СогласующиеДокумента, Объект.Ответственный);
			ИсторияСтатусовРегистр = ПолучитьИсторияСтатусовРегистр(Объект.Ссылка);			
			
			ВыбранныйЭлемент = Новый Структура("ВыбранныйСтатус, Комментарий", Статус, "");
			ДополнительныеПараметры = Новый Структура("ТекущийПользователь", Пользователи.ТекущийПользователь());
			
			ПроставитьГалочкиЗаТекущегоПользователя(Объект, ВыбранныйЭлемент, ДополнительныеПараметры, ДеревоСогласования, ИсторияСтатусовРегистр);
			ЗавершитьУтверждениеСтатусаДокумента(Объект, Статус, ДеревоСогласования, ИсторияСтатусовРегистр);
			
			Статусы = Новый Массив;
			
			ТекущийСтатус = торо_РаботаССогласованиями.ПолучитьТекущийСтатусСогласованияДокумента(Документ);
			СледующиеСтатусы = торо_РаботаССогласованиями.ПолучитьСписокСледующихСтатусовДокумента(Документ.СпособСогласования, ТекущийСтатус);
			
			Для Каждого Статус Из СледующиеСтатусы Цикл
				ТекСтатус = Статус.Значение;
				
				Структура = Новый Структура;
				
				Структура.Вставить("ИДСтатуса", ТекСтатус.УникальныйИдентификатор());
				Структура.Вставить("СтатусПредставление", Строка(ТекСтатус));
				
				Статусы.Добавить(Структура);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("СледующиеСтатусы", Статусы);
		Исключение
			СтруктураОтвета.ОшибкаПолученияДанных = Истина;
			СтруктураОтвета.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьKPIУстранениеДефектов(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ПериодПросмотраKPI = Данные.ПериодПросмотраKPI;
	ДатаНачала = ПолучитьДатуНачалаПоПериодуПросмотраKPI(ПериодПросмотраKPI);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьНачалоТекстаЗапросаKPI();
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен,
	                              |	КОЛИЧЕСТВО(торо_ОбщиеДанныеПоРемонтам.IDРемонта) КАК Количество
	                              |ИЗ
	                              |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	                              |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_ВыявленныеДефекты.ID
	                              |ГДЕ
	                              |	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)
	                              |	И торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта В
	                              |			(ВЫБРАТЬ
	                              |				ОбъектыРемонта.Ссылка
	                              |			ИЗ
	                              |				ОбъектыРемонта)
	                              |	И торо_ВыявленныеДефекты.Период > &ДатаНачала
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	торо_ОбщиеДанныеПоРемонтам.Завершен";
	
	ПрименитьПарметрыОтбораСписка(Запрос, Данные);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Завершено = 0;
	НеЗавершено = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Завершен Тогда
			Завершено = Выборка.Количество;
		Иначе
			НеЗавершено = Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура("Завершено, НеЗавершено", Завершено, НеЗавершено);
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьKPIРаботаСВнешнимиОснованиями(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ПериодПросмотраKPI = Данные.ПериодПросмотраKPI;
	ДатаНачала = ПолучитьДатуНачалаПоПериодуПросмотраKPI(ПериодПросмотраKPI);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьНачалоТекстаЗапросаKPI();
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен,
	                              |	КОЛИЧЕСТВО(торо_ОбщиеДанныеПоРемонтам.IDРемонта) КАК Количество
	                              |ИЗ
	                              |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	                              |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_ВнешниеОснованияДляРабот.ID
	                              |			И (торо_ВнешниеОснованияДляРабот.Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот)
	                              |ГДЕ
	                              |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта В
	                              |			(ВЫБРАТЬ
	                              |				ОбъектыРемонта.Ссылка
	                              |			ИЗ
	                              |				ОбъектыРемонта)
								  |	И торо_ВнешниеОснованияДляРабот.Период > &ДатаНачала
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	торо_общиеДанныеПоРемонтам.Завершен";
	
	ПрименитьПарметрыОтбораСписка(Запрос, Данные);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Завершено = 0;
	НеЗавершено = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Завершен Тогда
			Завершено = Выборка.Количество;
		Иначе
			НеЗавершено = Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура("Завершено, НеЗавершено", Завершено, НеЗавершено);
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьKPIПроцентПодтвержденныхЧасовПоППР(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ПериодПросмотраKPI = Данные.ПериодПросмотраKPI;
	ДатаНачала = ПолучитьДатуНачалаПоПериодуПросмотраKPI(ПериодПросмотраKPI);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьНачалоТекстаЗапросаKPI();
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID,
	                              |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	                              |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	                              |	РАЗНОСТЬДАТ(торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ДатаНачала, торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ДатаОкончания, СЕКУНДА) КАК ФактическиеЗатраты
	                              |ПОМЕСТИТЬ ЗавершенныеРемонты
	                              |ИЗ
	                              |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(
	                              |			&ТекущаяДата,
	                              |			ОбъектРемонта В
	                              |				(ВЫБРАТЬ
	                              |					ОбъектыРемонта.Ссылка
	                              |				ИЗ
	                              |					ОбъектыРемонта)) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	                              |ГДЕ
	                              |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	                              |	И торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	ЗавершенныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
	                              |	ЗавершенныеРемонты.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	                              |	ЗавершенныеРемонты.ФактическиеЗатраты КАК ФактическиеЗатраты,
	                              |	торо_ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот КАК ПлановаяДатаНачала
	                              |ПОМЕСТИТЬ ПлановыеРемонты
	                              |ИЗ
	                              |	ЗавершенныеРемонты КАК ЗавершенныеРемонты
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы КАК торо_ПлановыеРемонтныеРаботы
	                              |		ПО ЗавершенныеРемонты.ID = торо_ПлановыеРемонтныеРаботы.ID
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	АВТОНОМЕРЗАПИСИ() КАК Номер,
	                              |	ПлановыеРемонты.ФактическиеЗатраты КАК ФактическиеЗатраты,
	                              |	ПлановыеРемонты.ПлановаяДатаНачала КАК ПлановаяДатаНачала,
	                              |	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК ИДТехКарты
	                              |ПОМЕСТИТЬ НормативныеРемонты
	                              |ИЗ
	                              |	ПлановыеРемонты КАК ПлановыеРемонты
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	                              |		ПО ПлановыеРемонты.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	                              |			И ПлановыеРемонты.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	НормативныеРемонты.ПлановаяДатаНачала КАК ДатаСреза,
	                              |	НормативныеРемонты.ИДТехКарты КАК ИД,
	                              |	НормативныеРемонты.Номер КАК Номер
	                              |ПОМЕСТИТЬ ДанныеДляСреза
	                              |ИЗ
	                              |	НормативныеРемонты КАК НормативныеРемонты
	                              |
	                              |ИНДЕКСИРОВАТЬ ПО
	                              |	НормативныеРемонты.ИДТехКарты
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	ДанныеДляСреза.ИД КАК ИД,
	                              |	ДанныеДляСреза.Номер КАК Номер,
	                              |	МАКСИМУМ(торо_ВерсииТехКарт.Период) КАК ПериодРегистра
	                              |ПОМЕСТИТЬ ПериодыРегистра
	                              |ИЗ
	                              |	ДанныеДляСреза КАК ДанныеДляСреза
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	                              |		ПО ДанныеДляСреза.ИД = торо_ВерсииТехКарт.ИдентификаторТехКарты
	                              |			И (торо_ВерсииТехКарт.Период <= ДанныеДляСреза.ДатаСреза)
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	ДанныеДляСреза.ИД,
	                              |	ДанныеДляСреза.Номер
	                              |
	                              |ИНДЕКСИРОВАТЬ ПО
	                              |	ИД
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	ПериодыРегистра.Номер КАК Номер,
	                              |	торо_ВерсииТехКарт.ТехКарта КАК ТехКарта
	                              |ПОМЕСТИТЬ ВерсииТехКарт
	                              |ИЗ
	                              |	ПериодыРегистра КАК ПериодыРегистра
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	                              |		ПО ПериодыРегистра.ИД = торо_ВерсииТехКарт.ИдентификаторТехКарты
	                              |			И ПериодыРегистра.ПериодРегистра = торо_ВерсииТехКарт.Период
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	СУММА(НормативныеРемонты.ФактическиеЗатраты) КАК ФактическиеЗатраты,
	                              |	СУММА(ВерсииТехКарт.ТехКарта.НормаВремени) КАК НормаВремени
	                              |ИЗ
	                              |	НормативныеРемонты КАК НормативныеРемонты
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВерсииТехКарт КАК ВерсииТехКарт
	                              |		ПО НормативныеРемонты.Номер = ВерсииТехКарт.Номер";
	
	ПрименитьПарметрыОтбораСписка(Запрос, Данные);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ФактическиеЗатраты = 0;
	НормаВремени = 0;
	
	Если Выборка.Следующий() Тогда
		ФактическиеЗатраты = ?(Выборка.ФактическиеЗатраты = Null, 0, Выборка.ФактическиеЗатраты);
		НормаВремени = ?(Выборка.НормаВремени = Null, 0, Выборка.НормаВремени);
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("ФактическиеЗатраты, НормаВремени", ФактическиеЗатраты, НормаВремени);
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьKPIПроцентДефектовУстраненныхНеВСрок(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ПериодПросмотраKPI = Данные.ПериодПросмотраKPI;
	ДатаНачала = ПолучитьДатуНачалаПоПериодуПросмотраKPI(ПериодПросмотраKPI);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьНачалоТекстаЗапросаKPI();
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID,
	                              |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ДатаОкончания КАК ДатаОкончания
	                              |ПОМЕСТИТЬ ЗавершенныеРемонты
	                              |ИЗ
	                              |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(
	                              |			&ТекущаяДата,
	                              |			ОбъектРемонта В
	                              |				(ВЫБРАТЬ
	                              |					ОбъектыРемонта.Ссылка
	                              |				ИЗ
	                              |					ОбъектыРемонта)) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	                              |ГДЕ
	                              |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.Период > &ДатаНачала
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	торо_ВыявленныеДефектыСрезПоследних.ID КАК ID
	                              |ПОМЕСТИТЬ ВыявленныеДефекты
	                              |ИЗ
	                              |	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(
	                              |			&ТекущаяДата,
	                              |			ОбъектРемонта В
	                              |				(ВЫБРАТЬ
	                              |					ОбъектыРемонта.Ссылка
	                              |				ИЗ
	                              |					ОбъектыРемонта)) КАК торо_ВыявленныеДефектыСрезПоследних
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	ЗавершенныеРемонты.ID КАК ID,
	                              |	ЗавершенныеРемонты.ДатаОкончания КАК ДатаОкончания
	                              |ПОМЕСТИТЬ ЗавершенныеДефекты
	                              |ИЗ
	                              |	ЗавершенныеРемонты КАК ЗавершенныеРемонты
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыявленныеДефекты КАК ВыявленныеДефекты
	                              |		ПО ЗавершенныеРемонты.ID = ВыявленныеДефекты.ID
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	ВЫБОР
	                              |		КОГДА ЗавершенныеДефекты.ДатаОкончания > торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания
	                              |			ТОГДА ИСТИНА
	                              |		ИНАЧЕ ЛОЖЬ
	                              |	КОНЕЦ КАК Просрочено,
	                              |	КОЛИЧЕСТВО(*) КАК Количество
	                              |ИЗ
	                              |	ЗавершенныеДефекты КАК ЗавершенныеДефекты
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	                              |		ПО ЗавершенныеДефекты.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	                              |			И (НЕ торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	ВЫБОР
	                              |		КОГДА ЗавершенныеДефекты.ДатаОкончания > торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания
	                              |			ТОГДА ИСТИНА
	                              |		ИНАЧЕ ЛОЖЬ
	                              |	КОНЕЦ";
	
	ПрименитьПарметрыОтбораСписка(Запрос, Данные);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Просрочено = 0;
	ВСрок = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Просрочено Тогда
			Просрочено = Выборка.Количество;
		Иначе
			ВСрок = Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура("Просрочено, ВСрок", Просрочено, ВСрок);
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции

Функция ПолучитьKPIПлановоПредупредительныеРаботы(Данные)
	Данные = ДанныеВСтруктуру(Данные);
	
	ПериодПросмотраKPI = Данные.ПериодПросмотраKPI;
	ДатаНачала = ПолучитьДатуНачалаПоПериодуПросмотраKPI(ПериодПросмотраKPI);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьНачалоТекстаЗапросаKPI();
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК ID
	                              |ПОМЕСТИТЬ ПлановыеРемонты
	                              |ИЗ
	                              |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	                              |			&ТекущаяДата,
	                              |			ОбъектРемонтныхРабот В
	                              |				(ВЫБРАТЬ
	                              |					ОбъектыРемонта.Ссылка
	                              |				ИЗ
	                              |					ОбъектыРемонта)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	                              |ГДЕ
	                              |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен = ЛОЖЬ
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	ПлановыеРемонты.ID КАК ID
	                              |ПОМЕСТИТЬ АктуальныеПлановыеРемонты
	                              |ИЗ
	                              |	ПлановыеРемонты КАК ПлановыеРемонты
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	                              |		ПО ПлановыеРемонты.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	                              |ГДЕ
	                              |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала >= &ДатаНачала
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	                              |ПОМЕСТИТЬ ЗавершенныеРемонты
	                              |ИЗ
	                              |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(
	                              |			&ТекущаяДата,
	                              |			ОбъектРемонта В
	                              |				(ВЫБРАТЬ
	                              |					ОбъектыРемонта.Ссылка
	                              |				ИЗ
	                              |					ОбъектыРемонта)) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	НЕ ЗавершенныеРемонты.ID ЕСТЬ NULL КАК Завершен,
	                              |	КОЛИЧЕСТВО(*) КАК Количество
	                              |ИЗ
	                              |	АктуальныеПлановыеРемонты КАК АктуальныеПлановыеРемонты
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ЗавершенныеРемонты КАК ЗавершенныеРемонты
	                              |		ПО АктуальныеПлановыеРемонты.ID = ЗавершенныеРемонты.ID
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	НЕ ЗавершенныеРемонты.ID ЕСТЬ NULL";
	
	ПрименитьПарметрыОтбораСписка(Запрос, Данные);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Завершено = 0;
	НеЗавершено = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Завершен Тогда
			Завершено = Выборка.Количество;
		Иначе
			НеЗавершено = Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура("Завершено, НеЗавершено", Завершено, НеЗавершено);
	Возврат СтруктуруВДанные(СтруктураОтвета);
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функции преобразования
Функция ДанныеВСтруктуру(Данные)
	Структура = Новый Структура;
	
	СписокВСтруктуру(Данные.Список, Структура);
	
	Возврат Структура;
КонецФункции

Функция СтруктуруВДанные(Структура)
	ТипДанные = ФабрикаXDTO.Тип("monitor", "Данные");
	Данные = ФабрикаXDTO.Создать(ТипДанные);
	
	СтруктуруВДанныеДляОтправки(Структура, Данные.Список);
	
	Возврат Данные;
КонецФункции

// Служебные функции преобразования
Функция СписокВСтруктуру(Список, Структура)
	Для Каждого Элемент Из Список Цикл
		Значение = Неопределено;
		
		Если Элемент.Тип = "Число" Тогда
			Значение = Элемент.Число;
		ИначеЕсли Элемент.Тип = "Строка" Тогда
			Значение = Элемент.Значение;
		ИначеЕсли Элемент.Тип = "Дата" Тогда
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Значение = Дата(Элемент.Значение);
			Иначе
				Значение = Дата(1, 1, 1);
			КонецЕсли;
		ИначеЕсли Элемент.Тип = "Булево" Тогда
			Значение = Элемент.Значение = "1";
		ИначеЕсли Элемент.Тип = "УникальныйИдентификатор" Тогда
			Значение = Новый УникальныйИдентификатор(Элемент.Значение);
		ИначеЕсли Элемент.Тип = "Неопределено" Тогда
			Значение = Неопределено;
		ИначеЕсли Элемент.Тип = "Структура" Тогда
			Значение = Новый Структура;
			СписокВСтруктуру(Элемент.Список, Значение);
		ИначеЕсли Элемент.Тип = "Массив" Тогда
			Значение = Новый Массив;
			СписокВМассив(Элемент.Список, Значение);
		КонецЕсли;
		
		Структура.Вставить(Элемент.Ключ, Значение);
	КонецЦикла;
КонецФункции

Функция СписокВМассив(Список, Массив)
	Для Каждого Элемент Из Список Цикл
		Значение = Неопределено;
		
		Если Элемент.Тип = "Число" Тогда
			Значение = Элемент.Число;
		ИначеЕсли Элемент.Тип = "Строка" Тогда
			Значение = Элемент.Значение;
		ИначеЕсли Элемент.Тип = "Дата" Тогда
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Значение = Дата(Элемент.Значение);
			Иначе
				Значение = Дата(1, 1, 1);
			КонецЕсли;
		ИначеЕсли Элемент.Тип = "Булево" Тогда
			Значение = Элемент.Значение = "1";
		ИначеЕсли Элемент.Тип = "УникальныйИдентификатор" Тогда
			Значение = Новый УникальныйИдентификатор(Элемент.Значение);
		ИначеЕсли Элемент.Тип = "Неопределено" Тогда
			Значение = Неопределено;
		ИначеЕсли Элемент.Тип = "Структура" Тогда
			Значение = Новый Структура;
			СписокВСтруктуру(Элемент.Список, Значение);
		ИначеЕсли Элемент.Тип = "Массив" Тогда
			Значение = Новый Массив;
			СписокВМассив(Элемент.Список, Значение);
		КонецЕсли;
		
		Массив.Добавить(Значение);
	КонецЦикла;
КонецФункции

Функция СтруктуруВДанныеДляОтправки(Структура, Данные)
	ТипПеременная = ФабрикаXDTO.Тип("monitor", "Переменная");
	
	Для Каждого Элемент Из Структура Цикл
		ТипЗначения = Неопределено;
		Значение = Неопределено;
		ЭтоСписок = Ложь;
		
		Переменная = ФабрикаXDTO.Создать(ТипПеременная);
		
		Если ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ТипЗначения = "Число";
			Переменная.Число = Элемент.Значение;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ТипЗначения = "Строка";
			Значение = Элемент.Значение;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ТипЗначения = "Дата";
			Значение = Формат(Элемент.Значение, "ДФ=yyyyMMddHHmmss; ДП=");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			ТипЗначения = "Булево";
			Значение = ?(Элемент.Значение, "1", "0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("УникальныйИдентификатор") Тогда
			ТипЗначения = "УникальныйИдентификатор";
			Значение = Строка(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Неопределено") Тогда
			ТипЗначения = "Неопределено";
			Значение = "";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ТипЗначения = "Структура";
			ЭтоСписок = Истина;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ТипЗначения = "Массив";
			ЭтоСписок = Истина;
		КонецЕсли;
		
		Если ТипЗначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Переменная.Ключ = Элемент.Ключ;
		Переменная.Тип = ТипЗначения;
		
		Если ЭтоСписок Тогда
			Если ТипЗначения = "Структура" Тогда
				СтруктуруВДанныеДляОтправки(Элемент.Значение, Переменная.Список);
			ИначеЕсли ТипЗначения = "Массив" Тогда
				МассивВДанныеДляОтправки(Элемент.Значение, Переменная.Список);
			КонецЕсли;
		Иначе
			Переменная.Значение = Значение;
		КонецЕсли;
		
		Данные.Добавить(Переменная);
	КонецЦикла;
КонецФункции

Функция МассивВДанныеДляОтправки(Массив, Данные)
	ТипПеременная = ФабрикаXDTO.Тип("monitor", "Переменная");
	
	Для Каждого Элемент Из Массив Цикл
		ТипЗначения = Неопределено;
		Значение = Неопределено;
		ЭтоСписок = Ложь;
		
		Переменная = ФабрикаXDTO.Создать(ТипПеременная);
		
		Если ТипЗнч(Элемент) = Тип("Число") Тогда
			ТипЗначения = "Число";
			Переменная.Число = Элемент.Значение;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Строка") Тогда
			ТипЗначения = "Строка";
			Значение = Элемент;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Дата") Тогда
			ТипЗначения = "Дата";
			Значение = Формат(Элемент, "ДФ=yyyyMMddHHmmss");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Булево") Тогда
			ТипЗначения = "Булево";
			Значение = ?(Элемент, "1", "0");
		ИначеЕсли ТипЗнч(Элемент) = Тип("УникальныйИдентификатор") Тогда
			ТипЗначения = "УникальныйИдентификатор";
			Значение = Строка(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Неопределено") Тогда
			ТипЗначения = "Неопределено";
			Значение = "";
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			ТипЗначения = "Структура";
			ЭтоСписок = Истина;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
			ТипЗначения = "Массив";
			ЭтоСписок = Истина;
		КонецЕсли;
		
		Если ТипЗначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Переменная.Тип = ТипЗначения;
		
		Если ЭтоСписок Тогда
			Если ТипЗначения = "Структура" Тогда
				СтруктуруВДанныеДляОтправки(Элемент, Переменная.Список);
			ИначеЕсли ТипЗначения = "Массив" Тогда
				МассивВДанныеДляОтправки(Элемент, Переменная.Список);
			КонецЕсли;
		Иначе
			Переменная.Значение = Значение;
		КонецЕсли;
		
		Данные.Добавить(Переменная);
	КонецЦикла;
КонецФункции

// Служебные функции
Функция ПрименитьПарметрыОтбораСписка(Запрос, Данные, ОсновнойСписок = Ложь)
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Если Данные.СписокОбъектовРемонтов.Количество() > 0 Тогда
		СписокОбъектовРемонтов = Новый Массив;
		
		Для Каждого Строка Из Данные.СписокОбъектовРемонтов Цикл
			СписокОбъектовРемонтов.Добавить(Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Строка));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокОбъектовРемонтов", СписокОбъектовРемонтов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Ссылка В(&СписокОбъектовРемонтов)", "ИСТИНА");
		
		Если ОсновнойСписок Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта В(&СписокОбъектовРемонтов)", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.СписокОрганизаций.Количество() > 0 Тогда
		СписокОрганизаций = Новый Массив;
		
		Для Каждого Строка Из Данные.СписокОрганизаций Цикл
			СписокОрганизаций.Добавить(Справочники.Организации.ПолучитьСсылку(Строка));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Организация В(&СписокОрганизаций)", "ИСТИНА");
	КонецЕсли;
	
	Если Данные.СписокПодразделений.Количество() > 0 Тогда
		СписокПодразделений = Новый Массив;
		
		Для Каждого Строка Из Данные.СписокПодразделений Цикл
			СписокПодразделений.Добавить(Справочники.СтруктураПредприятия.ПолучитьСсылку(Строка));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Подразделение В(&СписокПодразделений)", "ИСТИНА");
	КонецЕсли;
	
	Если Данные.СписокПодразделенийИсполнителей.Количество() > 0 Тогда
		СписокПодразделенийИсполнителей = Новый Массив;
		
		Для Каждого Строка Из Данные.СписокПодразделенийИсполнителей Цикл
			СписокПодразделенийИсполнителей.Добавить(Справочники.СтруктураПредприятия.ПолучитьСсылку(Строка));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокПодразделенийИсполнителей", СписокПодразделенийИсполнителей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.ПодразделениеИсполнитель В(&СписокПодразделенийИсполнителей)", "ИСТИНА");
	КонецЕсли;
	
	Если Данные.СписокСостоянийОР.Количество() > 0 Тогда
		СписокСостоянийОР = Новый Массив;
		
		Для Каждого Строка Из Данные.СписокСостоянийОР Цикл
			Если Не Строка = Неопределено Тогда
				СписокСостоянийОР.Добавить(Перечисления.торо_ТипЭксплуатации[Строка]);
			Иначе
				СписокСостоянийОР.Добавить(Перечисления.торо_ТипЭксплуатации.ПустаяСсылка());
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокСостоянийОР", СписокСостоянийОР);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(Состояния.ТипЭксплуатации, ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.ПустаяСсылка)) В (&СписокСостоянийОР)", "ИСТИНА");
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерРуководителяПодразделения(Подразделение)
	Ответ = Новый Структура("Номер, Ошибка");
	Ответ.Ошибка = Ложь;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Руководитель = Подразделение.ТекущийРуководитель;
		
		Если ЗначениеЗаполнено(Руководитель) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
			               |ИЗ
			               |	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
			               |ГДЕ
			               |	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Руководитель
			               |	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
			
			Запрос.УстановитьПараметр("Руководитель", Руководитель);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представление) Тогда
				Ответ.Номер = Выборка.Представление;
			Иначе
				Ответ.Ошибка = Истина;
				Ответ.Вставить("КодОшибки", 3); // У физического лица не заполнен номер телефона
			КонецЕсли;
		Иначе
			Ответ.Ошибка = Истина;
			Ответ.Вставить("КодОшибки", 2); // У подразделения не заполнен руководитель
		КонецЕсли;
	Иначе
		Ответ.Ошибка = Истина;
		Ответ.Вставить("КодОшибки", 1); // У объекта ремонта не заполнено поле подразделения
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьДатуНачалаПоПериодуПросмотраKPI(ПериодПросмотраKPI)
	ТекДата = ТекущаяДата();
	
	Если ПериодПросмотраKPI = "Сегодня" Тогда
		Возврат НачалоДня(ТекДата);
	ИначеЕсли ПериодПросмотраKPI = "НаЭтойНеделе" Тогда
		Возврат НачалоНедели(ТекДата);
	ИначеЕсли ПериодПросмотраKPI = "ВЭтомМесяце" Тогда
		Возврат НачалоМесяца(ТекДата);
	ИначеЕсли ПериодПросмотраKPI = "ВЭтомГоду" Тогда
		Возврат НачалоГода(ТекДата);
	ИначеЕсли ПериодПросмотраKPI = "ЗаПоследние24Часа" Тогда
		Возврат ТекДата - 60 * 60 * 24;
	ИначеЕсли ПериодПросмотраKPI = "ЗаПоследние7Дней" Тогда
		Возврат ТекДата - 60 * 60 * 24 * 7;
	ИначеЕсли ПериодПросмотраKPI = "ЗаПоследние30Дней" Тогда
		Возврат ТекДата - 60 * 60 * 24 * 30;
	ИначеЕсли ПериодПросмотраKPI = "ЗаПоследнийГод" Тогда
		Возврат ДобавитьМесяц(ТекДата, -12);
	КонецЕсли;
	
	Возврат Дата(1, 1, 1);
КонецФункции

Функция ПолучитьНачалоТекстаЗапросаKPI()
	Возврат "ВЫБРАТЬ
	        |	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	        |ПОМЕСТИТЬ ОбъектыРемонтаБезСостояний
	        |ИЗ
	        |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	        |ГДЕ
	        |	торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ
	        |	И торо_ОбъектыРемонта.ПометкаУдаления = ЛОЖЬ
	        |	И торо_ОбъектыРемонта.Ссылка В(&СписокОбъектовРемонтов)
	        |	И торо_ОбъектыРемонта.Организация В(&СписокОрганизаций)
	        |	И торо_ОбъектыРемонта.Подразделение В(&СписокПодразделений)
	        |	И торо_ОбъектыРемонта.ПодразделениеИсполнитель В(&СписокПодразделенийИсполнителей)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	торо_ОбъектыРемонта.Ссылка
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	        |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации.ТипЭксплуатации КАК ТипЭксплуатации,
	        |	торо_ТекущееСостояниеОРСрезПоследних.ПричинаПростоя КАК ПричинаПростоя,
	        |	торо_ТекущееСостояниеОРСрезПоследних.Период КАК ДатаНачалаДействияСостояния
	        |ПОМЕСТИТЬ Состояния
	        |ИЗ
	        |	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(
	        |			&ТекущаяДата,
	        |			ОбъектРемонта В
	        |				(ВЫБРАТЬ
	        |					ОбъектыРемонтаБезСостояний.Ссылка
	        |				ИЗ
	        |					ОбъектыРемонтаБезСостояний)) КАК торо_ТекущееСостояниеОРСрезПоследних
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ОбъектыРемонтаБезСостояний.Ссылка КАК Ссылка
	        |ПОМЕСТИТЬ ОбъектыРемонта
	        |ИЗ
	        |	ОбъектыРемонтаБезСостояний КАК ОбъектыРемонтаБезСостояний
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Состояния КАК Состояния
	        |		ПО ОбъектыРемонтаБезСостояний.Ссылка = Состояния.ОбъектРемонта
	        |ГДЕ
	        |	ЕСТЬNULL(Состояния.ТипЭксплуатации, ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.ПустаяСсылка)) В (&СписокСостоянийОР)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	ОбъектыРемонтаБезСостояний.Ссылка" + ";";
КонецФункции

// Функции для согласования
Процедура ПроставитьГалочкиЗаТекущегоПользователя(Объект, ВыбранныйЭлемент, ДополнительныеПараметры, ДеревоСогласования, ИсторияСтатусовРегистр)
	ВыбранныйСтатус = ВыбранныйЭлемент.ВыбранныйСтатус;
	КомментарийКСтатусу = ВыбранныйЭлемент.Комментарий;
	ТекущийПользователь = ДополнительныеПараметры.ТекущийПользователь;
	
	МассивСтрокСогласования = Новый Массив;
	МассивСтрокДереваСогласования = Новый Массив;			
	ЗаполнитьМассивИзДерева(МассивСтрокДереваСогласования, ДеревоСогласования.Строки);
	
	// Отбор строк, где пользователь является согласующим
	Для Каждого Строка Из МассивСтрокДереваСогласования Цикл
		Если (Строка.Согласующий = ТекущийПользователь)
			И Строка.Замещающий = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")
			И Строка.Согласовано = Ложь 
			Тогда
			МассивСтрокСогласования.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла; 
	
	// Отбор строк, где пользователь является замещающим
	МассивСтрокЗамещения = Новый Массив;
	
	Для Каждого Строка Из МассивСтрокДереваСогласования Цикл
		Если Строка.Замещающий  = ТекущийПользователь
			И Строка.Согласовано = Ложь 
			Тогда
			МассивСтрокЗамещения.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла;
	
	// Отбор строк, где пользователь является замещающим (но не согласующим при этом)
	МассивОсновнойНеЗамещающий = Новый Массив; 
	Для Каждого Строка Из МассивСтрокЗамещения Цикл
		Если Строка.Согласующий <> ТекущийПользователь Тогда
			МассивОсновнойНеЗамещающий.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	СогласующийИлиЗамещающий = Ложь;
	
	// Обработка строк, где пользователь является согласующим
	Для Каждого СтрокаДЗ Из МассивСтрокСогласования Цикл
		Для Каждого СтрокаДЗП Из СтрокаДЗ.Строки Цикл
			СтрокаДЗП.Согласовано = Ложь;
		КонецЦикла; 
		
		СтрокаДЗ.Согласовано = (СтрокаДЗ.СтатусДокумента = ВыбранныйСтатус);
		
		Если СтрокаДЗ.СтатусДокумента = ВыбранныйСтатус Тогда
			СогласующийИлиЗамещающий = Истина;
			ДобавитьСтрокуВИсториюСтатусов(Объект, ИсторияСтатусовРегистр, ВыбранныйСтатус, ТекущийПользователь,, КомментарийКСтатусу);
        КонецЕсли; 
	КонецЦикла;
	
	// Обработка строк, где пользователь является замещающим, но не согласующим
	Для Каждого СтрокаДЗ Из МассивОсновнойНеЗамещающий Цикл
		СтрокаДЗ.Согласовано = (СтрокаДЗ.СтатусДокумента = ВыбранныйСтатус);
		Если СтрокаДЗ.СтатусДокумента = ВыбранныйСтатус Тогда
			СогласующийИлиЗамещающий = Истина;
			ДобавитьСтрокуВИсториюСтатусов(Объект, ИсторияСтатусовРегистр, ВыбранныйСтатус, СтрокаДЗ.Согласующий,, КомментарийКСтатусу);
			
			// Поднимаем галочку и за согласующего тоже
			Для каждого Строка Из МассивСтрокДереваСогласования Цикл
				Если (Строка.Согласующий = СтрокаДЗ.Согласующий)
					И Строка.Замещающий = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")
					И Строка.СтатусДокумента = ВыбранныйСтатус
					Тогда
					Строка.Согласовано = Истина;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не СогласующийИлиЗамещающий Тогда
		ВызватьИсключение НСтр("ru = 'Текущий пользователь не является ни согласующим, ни замещающим для выбранного статуса!'");
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьСтрокуВИсториюСтатусов(Объект, ИсторияСтатусовРегистр, СтатусДокумента, ЗаКого = Неопределено, Очистить = Ложь, Комментарий = "")
	Если Очистить Тогда
		ИсторияСтатусовРегистр.Очистить();
	КонецЕсли;
	
	НоваяЗаписьИС = ИсторияСтатусовРегистр.Добавить();
	НоваяЗаписьИС.Период = ТекущаяДата();
	НоваяЗаписьИС.СогласуемыйДокумент = Объект.Ссылка;
	НоваяЗаписьИС.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗаписьИС.ЗаКого = ЗаКого;
	НоваяЗаписьИС.СтатусДокумента = СтатусДокумента;
	НоваяЗаписьИС.Комментарий = Комментарий;
	
КонецПроцедуры

Процедура ЗаполнитьМассивИзДерева(Массив, ЭлементыДерева)
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Массив.Добавить(Элемент);
		Если Элемент.Строки.Количество() > 0 Тогда
			ЗаполнитьМассивИзДерева(Массив, Элемент.Строки);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура ЗавершитьУтверждениеСтатусаДокумента(Объект, Статус, ДеревоСогласования, ИсторияСтатусовРегистр)
	СменитьСтатус = НужноИзменитьСтатусДокумента(Объект, Статус, ДеревоСогласования);
		
	СтруктураПараметров = Новый Структура;
	Если СменитьСтатус Тогда
		
		ПроводитьДокумент = Ложь;
		СтруктураДанных = торо_РаботаССогласованиями.ПолучитьДанныеПоСтатусуДокумента(Объект.СпособСогласования, Статус);
		ПроводитьДокумент = СтруктураДанных.ПроводитьДокумент;
		
		Если ПроводитьДокумент И Объект.Проведен Тогда
			СтруктураПараметров.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			СтруктураПараметров.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
		Иначе 
			СтруктураПараметров.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	Иначе
		СтруктураПараметров.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	СогласующиеРегистр = ПолучитьСогласующиеРегистр(Объект.Ссылка);
	ЗаписатьРегистрыСогласования(Объект, Статус, СогласующиеРегистр, ДеревоСогласования, ИсторияСтатусовРегистр);
	
	ДобавитьНапоминанияПоСтатусамСогласования(Объект.Ссылка);
КонецПроцедуры

Функция НужноИзменитьСтатусДокумента(Объект, Статус, ДеревоСогласования)
	СменитьСтатус = Ложь;
	СтрокаСтатус  = Новый Массив;
	
	Массив = ДеревоСогласования.Строки;
	
	Для каждого Строка Из Массив Цикл
		Если Строка.СтатусДокумента = Статус Тогда
			СтрокаСтатус.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокаСтатус.Количество() = 0 Тогда
		Возврат СменитьСтатус;
	КонецЕсли;
		
	КоличествоСогласовавших = 0;
	ОбщееКоличествоСтрок    = 0;
	
	Для Каждого СтрокаДЗ Из СтрокаСтатус Цикл
		ОбщееКоличествоСтрок = ОбщееКоличествоСтрок + СтрокаДЗ.Строки.Количество();
		
		Если СтрокаДЗ.Согласовано Тогда
			КоличествоСогласовавших = ОбщееКоличествоСтрок;
		Иначе
			Для Каждого СтрокаДЗЗ Из СтрокаДЗ.Строки Цикл
				Если СтрокаДЗЗ.Согласовано Тогда
					КоличествоСогласовавших = КоличествоСогласовавших + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	СменитьСтатус = (ОбщееКоличествоСтрок = КоличествоСогласовавших);
	
	Возврат СменитьСтатус;
КонецФункции

Функция ПолучитьДеревоСогласования(СпособСогласования, СтатусДокумента, ТаблицаСогласовавших, Ответственный)
	ДеревоСогласования = Новый ДеревоЗначений;
	ДеревоСогласования.Колонки.Добавить("СтатусДокумента", Новый ОписаниеТипов("СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот"));
	ДеревоСогласования.Колонки.Добавить("Согласующий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоСогласования.Колонки.Добавить("Замещающий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоСогласования.Колонки.Добавить("Согласовано", Новый ОписаниеТипов("Булево"));
	ДеревоСогласования.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ДеревоСогласования.Колонки.Добавить("Начальный", Новый ОписаниеТипов("Булево"));
	
	// Создадим строки дерева согласования.
	СписокСледующихСтатусов = торо_РаботаССогласованиями.ПолучитьСписокСледующихСтатусовДокументаДетально(СпособСогласования, СтатусДокумента);
	Для Каждого ЭлементСписка из СписокСледующихСтатусов Цикл
		ДобавитьОтветственногоПоДокументу = Ложь;
		
		СтрокаСтатус = ДеревоСогласования.Строки.Добавить();
		СтрокаСтатус.СтатусДокумента = ЭлементСписка.Значение.СледующийСтатус;
		СтрокаСтатус.Уровень         = 0;
		СтрокаСтатус.Начальный = ЭлементСписка.Значение.Начальный;
		
		МассивПользователей = СпособСогласования.ПорядокСогласования.НайтиСтроки(Новый Структура("ТекущийСтатус", ЭлементСписка.Значение.СледующийСтатус));
		
		Для Каждого ЭлементМассива Из МассивПользователей Цикл
			
			Если ТипЗнч(ЭлементМассива.Пользователь) = Тип("Строка") Тогда
				ДобавитьОтветственногоПоДокументу = Истина;
				Продолжить;
			КонецЕсли;
			
			СтрокаСогласующий = СтрокаСтатус.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСогласующий, СтрокаСтатус);
			СтрокаСогласующий.Согласующий = ЭлементМассива.Пользователь;
			СтрокаСогласующий.Уровень     = 1;
			
			МассивЗамещающих = СпособСогласования.Замещающие.НайтиСтроки(Новый Структура("Пользователь, ТекущийСтатус", ЭлементМассива.Пользователь, ЭлементМассива.ТекущийСтатус));
			Для Каждого ЭлементМассиваЗамов Из МассивЗамещающих Цикл
				
				СтрокаЗамещающий = СтрокаСогласующий.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗамещающий, СтрокаСогласующий);
				СтрокаЗамещающий.Замещающий = ЭлементМассиваЗамов.Замещающий;
				СтрокаЗамещающий.Уровень    = 2;
			КонецЦикла; 
			
		КонецЦикла; 
		
		Если ДобавитьОтветственногоПоДокументу Тогда
			Если СтрокаСтатус.Строки.Найти(Ответственный, "Согласующий") = Неопределено Тогда
				СтрокаСогласующий = СтрокаСтатус.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСогласующий, СтрокаСтатус);
				СтрокаСогласующий.Согласующий = Ответственный;
				СтрокаСогласующий.Уровень     = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПроставитьФлагиСогласованоВДереве(ДеревоСогласования, СписокСледующихСтатусов, ТаблицаСогласовавших);
	
	Возврат ДеревоСогласования;
КонецФункции

Функция ПолучитьСогласующиеРегистр(Документ)
	НаборЗаписей = РегистрыСведений.торо_ТекущиеСогласующиеДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СогласуемыйДокумент.Установить(Документ);
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;
КонецФункции

Функция ПолучитьИсторияСтатусовРегистр(Документ)
	НаборЗаписей = РегистрыСведений.торо_ИсторияСтатусовСогласованияДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СогласуемыйДокумент.Установить(Документ);
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;
КонецФункции

Процедура ПроставитьФлагиСогласованоВДереве(ДеревоСогласования, СписокСледующихСтатусов, ТаблицаСогласовавших)
	// Отметим уже согласовавших сотрудников
	Для Каждого ЭлементСписка из СписокСледующихСтатусов Цикл
		МассивСогласовавших = ТаблицаСогласовавших.НайтиСтроки(Новый Структура("СтатусДокумента", ЭлементСписка.Значение.СледующийСтатус));
		Для Каждого СтрокаСогласовавших Из МассивСогласовавших Цикл
			МассивСтрокДС = ДеревоСогласования.Строки.НайтиСтроки(Новый Структура("СтатусДокумента, Согласующий, Замещающий",
			ЭлементСписка.Значение.СледующийСтатус, СтрокаСогласовавших.Согласующий, СтрокаСогласовавших.Замещающий), Истина);
			
			Для Каждого СтрокаДС Из МассивСтрокДС Цикл
				СтрокаДС.Согласовано = СтрокаСогласовавших.Согласовано;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Уровень1 из ДеревоСогласования.Строки Цикл
		Уровень2ВсеСогласовали = Истина;
		Для каждого Уровень2 из Уровень1.Строки Цикл
			
			Уровень3ВсеСогласовали = Ложь;
			Для каждого Уровень3 из Уровень2.Строки Цикл
				Если Уровень3.Согласовано Тогда
					Уровень3ВсеСогласовали = Истина;
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			
			Если Уровень2.Строки.Количество() > 0 и Уровень3ВсеСогласовали	Тогда 
				Уровень2.Согласовано = Истина; 
			КонецЕсли;
			
			Если НЕ уровень2.Согласовано Тогда
				Уровень2ВсеСогласовали = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Уровень1.Строки.Количество()>0 и Уровень2ВсеСогласовали Тогда 
			Уровень1.Согласовано = Истина; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьРегистрыСогласования(Объект, Статус, СогласующиеРегистр, ДеревоСогласования, ИсторияСтатусовРегистр)
	НачатьТранзакцию();

	// Запись таблицы Согласующие.
	СогласующиеРегистр.Очистить();

	МассивСогласованного = Новый Массив;			
	ЗаполнитьМассивИзДерева(МассивСогласованного, ДеревоСогласования.Строки);

	Для Каждого ЭлементМассива Из МассивСогласованного Цикл
		Если ЭлементМассива.Согласовано Тогда 
			ЗаполнитьЗначенияСвойств(СогласующиеРегистр.Добавить(), ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	НаборДляЗаписи = РегистрыСведений.торо_ТекущиеСогласующиеДокументов.СоздатьНаборЗаписей();
	НаборДляЗаписи.Отбор.СогласуемыйДокумент.Установить(Объект.Ссылка);
	Для Каждого Строка из СогласующиеРегистр Цикл
		НоваяСтрока = НаборДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.СогласуемыйДокумент = Объект.Ссылка;
	КонецЦикла;
	НаборДляЗаписи.Записать(Истина);
	
	// Запись таблицы ИсторияСтатусов.
	НаборДляЗаписи = РегистрыСведений.торо_ИсторияСтатусовСогласованияДокументов.СоздатьНаборЗаписей();
	НаборДляЗаписи.Отбор.СогласуемыйДокумент.Установить(Объект.Ссылка);
	Для Каждого Строка из ИсторияСтатусовРегистр Цикл
		НоваяСтрока = НаборДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.СогласуемыйДокумент = Объект.Ссылка;
	КонецЦикла;
	НаборДляЗаписи.Записать(Истина);

	// Запись текущего статуса документа.
	МенеджерЗаписи = РегистрыСведений.торо_ТекущиеСтатусыСогласованияДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СогласуемыйДокумент = Объект.Ссылка;
	МенеджерЗаписи.СтатусДокумента = Статус;
	МенеджерЗаписи.Записать(Истина);

    ЗафиксироватьТранзакцию();	
КонецПроцедуры

Процедура ДобавитьНапоминанияПоСтатусамСогласования(СсылкаНаДокумент) 
	СтатусДокумента = торо_РаботаССогласованиями.ПолучитьТекущийСтатусСогласованияДокумента(СсылкаНаДокумент);
	СогласующиеДокумента = торо_РаботаССогласованиями.ПолучитьТаблицуСогласующихДокумента(СсылкаНаДокумент);
	
	ДеревоСогласования = ПолучитьДеревоСогласования(СсылкаНаДокумент.СпособСогласования, СтатусДокумента, СогласующиеДокумента, СсылкаНаДокумент.Ответственный);
	ТаблицаСогласующих = ПодготовитьТаблицуНапоминанийДляСогласующих(ДеревоСогласования);
	
	НаборЗаписейСогласования = РегистрыСведений.торо_СтатусыСогласованияДокументовРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписейСогласования.Отбор.СогласуемыйДокумент.Установить(СсылкаНаДокумент);
	НаборЗаписейСогласования.Записать();
	
	НаборЗаписейСогласования.Отбор.Статус.Установить(СтатусДокумента);
	НаборЗаписейСогласования.Отбор.Организация.Установить(СсылкаНаДокумент.Организация);
	
	Для Каждого СтрокаТЗ Из ТаблицаСогласующих Цикл
		НоваяЗапись = НаборЗаписейСогласования.Добавить();
		НоваяЗапись.Организация  = СсылкаНаДокумент.Организация;
		НоваяЗапись.СогласуемыйДокумент     = СсылкаНаДокумент;
		НоваяЗапись.Пользователь = СтрокаТЗ.Согласующий;
		НоваяЗапись.Статус       = СтатусДокумента;
		НоваяЗапись.НеНапоминать = СтрокаТЗ.НеНапоминать;
		НоваяЗапись.Дата         = СтрокаТЗ.Дата;
	КонецЦикла;
	
	НаборЗаписейСогласования.Записать();
КонецПроцедуры

Функция ПодготовитьТаблицуНапоминанийДляСогласующих(ДеревоСогласования)
	ТаблицаСогласующих = Новый ТаблицаЗначений;
	ТаблицаСогласующих.Колонки.Добавить("Согласующий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Для Каждого СтрокаСтатусов Из ДеревоСогласования.Строки Цикл
		Для Каждого СтрокаСогласующих Из СтрокаСтатусов.Строки Цикл
			НовСтрокаТЗ = ТаблицаСогласующих.Добавить();
			НовСтрокаТЗ.Согласующий = СтрокаСогласующих.Согласующий;
			
			Для Каждого СтрокаЗамещающих Из СтрокаСогласующих.Строки Цикл
				НовСтрокаТЗ = ТаблицаСогласующих.Добавить();
				НовСтрокаТЗ.Согласующий = СтрокаЗамещающих.Замещающий;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	ТаблицаСогласующих.Свернуть("Согласующий");
	ТаблицаСогласующих.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаСогласующих.Колонки.Добавить("НеНапоминать", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаСогласующих Из ТаблицаСогласующих Цикл
		
		ОтключитьОповещение = Истина;
		
		// Этап 1 Проход по согласовавшим
		МассивСтрокСогласовавших = ДеревоСогласования.Строки.НайтиСтроки(Новый Структура("Согласующий, Замещающий", 
		СтрокаСогласующих.Согласующий, Справочники.Пользователи.ПустаяСсылка()), Истина);
		
		Для Каждого ЭлементМС Из МассивСтрокСогласовавших Цикл
			
			Если Не ЭлементМС.Согласовано Тогда
				
				ЕстьСогласованные = Ложь;
				Для Каждого СтрокаЗамещения Из ЭлементМС.Строки Цикл
					Если СтрокаЗамещения.Согласовано Тогда
						ЕстьСогласованные = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				
				Если Не ЕстьСогласованные Тогда
					ОтключитьОповещение = Ложь;
					Прервать;
				КонецЕсли; 
				
			КонецЕсли; 	
			
		КонецЦикла; 		
		
		Если Не ОтключитьОповещение Тогда
			Продолжить;
		КонецЕсли;
		
		// Этап №2 Проход по замещающим
		МассивСтрокЗамещающих = ДеревоСогласования.Строки.НайтиСтроки(Новый Структура("Замещающий",
		СтрокаСогласующих.Согласующий), Истина);
		
		Для Каждого ЭлементМЗ Из МассивСтрокЗамещающих Цикл
			
			Если (Не ЭлементМЗ.Согласовано) И (Не ЭлементМЗ.Родитель.Согласовано) Тогда
				
				ЕстьСогласованные = Ложь;
				Для Каждого СтрокаЗамещения Из ЭлементМЗ.Родитель.Строки Цикл
					
					Если СтрокаЗамещения.Согласовано Тогда
						ЕстьСогласованные = Истина;
						Прервать;
					КонецЕсли; 
					
				КонецЦикла; 
				
				Если Не ЕстьСогласованные Тогда
					ОтключитьОповещение = Ложь;
					Прервать;
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если Не ОтключитьОповещение Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСогласующих.Дата = ТекущаяДата();
		СтрокаСогласующих.НеНапоминать = Истина;
		
	КонецЦикла; 

	Возврат ТаблицаСогласующих;
КонецФункции
#КонецОбласти
