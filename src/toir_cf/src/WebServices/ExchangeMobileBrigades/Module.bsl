
#Область СлужебныеПроцедурыИФункции

// Общее

Функция ВерсияОбмена()
	
	Возврат 2012;
	
КонецФункции

Функция ПроверитьДобавитьРегистрациюУстройства(ИДУстройства, ИмяУстройства, ИмяПользователя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СозданНовый = Ложь;
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		НовыйУзел = ПланыОбмена.mobileBrigades.СоздатьУзел();
		НовыйУзел.ИДМобильногоУстройства = ИДУстройства;
		НовыйУзел.Наименование = ИДУстройства;
		НовыйУзел.ИмяУстройства = ИмяУстройства;
		НовыйУзел.ПоследнийПользователь = ИмяПользователя;
		НовыйУзел.ДатаПоследнегоСоединения = ТекущаяДата();
		НовыйУзел.УстановитьНовыйКод();
		НовыйУзел.Записать();
		Узел = НовыйУзел.Ссылка;
		СозданНовый = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СозданНовый;
КонецФункции

Функция ПроверитьДобавитьРегистрациюУстройстваБригады(Запрос, ИмяУстройства, ИмяПользователя)
	Возврат Обработки.торо_МобильныеПриложения.ПроверитьДобавитьРегистрациюУстройстваБригады_Session(Запрос, ИмяУстройства, ИмяПользователя);
КонецФункции

Функция ПолучитьУзелПланаОбмена(ИДУстройства)
	Узел = ПланыОбмена.mobileBrigades.НайтиПоРеквизиту("ИДМобильногоУстройства", ИДУстройства);
	Возврат Узел;
КонецФункции

Функция Hello()
	
	СисИнфо = Новый СистемнаяИнформация;
	СтрокаВерсии = СисИнфо.ВерсияПриложения;
	ИмяОбработки = ?(Лев(СтрокаВерсии, 3) = "8.2" ИЛИ Лев(СтрокаВерсии, 3) = "8.3", "торо_ЗащитаУправлениеРемонтами82", "торо_ЗащитаУправлениеРемонтами");
	
	УИД = Строка(Новый УникальныйИдентификатор());
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Ч0 = Строка(ГСЧ.СлучайноеЧисло(1,7));
	Ч0 = 3;
	КоличествоДней = Цел((ТекущаяДата() - Дата(2014,1,1,0,0,0))/86400);
		
	КоличествоДнейСтрока = Формат(КоличествоДней, "ЧГ=0");
	Пока СтрДлина(КоличествоДнейСтрока) <4 Цикл
		КоличествоДнейСтрока = "0"+КоличествоДнейСтрока;
	КонецЦикла;
	Ч1 =  Лев(КоличествоДнейСтрока,1);
	Ч2 =  Сред(КоличествоДнейСтрока,2,1);
	Ч3 =  Сред(КоличествоДнейСтрока,3,1);
	Ч4 =  Прав(КоличествоДнейСтрока,1);
	
	Уид = Строка(Ч0)+ Сред(УИД,2,Ч0)+Ч1+Сред(УИД,Ч0+2,Ч0)+Ч2+Сред(УИД,Ч0*2+2,Ч0)+Ч3+Сред(УИД,Ч0*3+2,Ч0)+Ч4+ Прав(УИД,31-Ч0*4);
	
	Возврат Уид;
	
КонецФункции

Функция НовыйИдентификаторПодписчикаУведомлений(ИДУстройства, ИДПодписчикаУведомлений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитанныеДанные = ДесериализоватьОбъект(ИДПодписчикаУведомлений);
	УзелОбмена = ПолучитьУзелПланаОбмена(ИДУстройства);
	Узел = УзелОбмена.ПолучитьОбъект();
	Узел.ИДПодписчикаУведомлений = Новый ХранилищеЗначения(ПрочитанныеДанные, Новый СжатиеДанных(9));
	Узел.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

// Выгрузка данных в МП

Функция ПолучитьОР(Все, ИДУстройства, ИДСтруктуры)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Если Все Тогда
		ВыполнитьПервоначальнуюРегистрациюДанных("торо_ОбъектыРемонта", Узел);
	КонецЕсли;
	
	СтруктураИерархии = Справочники.торо_СтруктурыОР.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтруктуры));
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокОбъектовРемонта");
	ТипОР = ФабрикаXDTO.Тип("android", "ОбъектРемонта");
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	торо_ОбъектыРемонтаИзменения.Ссылка КАК Ссылка
	                |ПОМЕСТИТЬ ВсеИзмененныеОР
	                |ИЗ
	                |	Справочник.торо_ОбъектыРемонта.Изменения КАК торо_ОбъектыРемонтаИзменения
	                |ГДЕ
	                |	торо_ОбъектыРемонтаИзменения.Узел = &Узел
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ВсеИзмененныеОР.Ссылка КАК Ссылка,
	                |	торо_ОбъектыРемонта.Ссылка ЕСТЬ NULL КАК Удалить,
	                |	торо_ОбъектыРемонта.Код КАК Код,
	                |	торо_ОбъектыРемонта.Наименование КАК Наименование,
	                |	торо_ОбъектыРемонта.Организация КАК Организация,
	                |	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
	                |	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
	                |	торо_ОбъектыРемонта.ДатаВыпуска КАК ДатаВыпуска,
	                |	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
	                |	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	                |	торо_ОбъектыРемонта.Комментарий КАК Комментарий,
	                |	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
	                |	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
	                |	торо_ОбъектыРемонта.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
	                |	торо_ОбъектыРемонта.ШтрихКод КАК ШтрихКод,
	                |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	                |	торо_ОбъектыРемонта.НомерПаспорта КАК НомерПаспорта,
	                |	торо_ОбъектыРемонта.Направление КАК Направление,
	                |	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
	                |	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
	                |	торо_ОбъектыРемонта.Широта КАК Широта,
	                |	торо_ОбъектыРемонта.Долгота КАК Долгота,
	                |	торо_ОбъектыРемонта.Высота КАК Высота,
	                |	торо_ОбъектыРемонта.АдресМестонахождения КАК АдресМестонахождения,
	                |	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
	                |	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
					|	торо_ОбъектыРемонта.ЭтоПротяженныйОбъект
	                |ИЗ
	                |	ВсеИзмененныеОР КАК ВсеИзмененныеОР
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	                |		ПО ВсеИзмененныеОР.Ссылка = торо_ОбъектыРемонта.Ссылка
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	торо_ОбъектыРемонта.ЭтоГруппа ИЕРАРХИЯ,
	                |	торо_ОбъектыРемонта.Наименование";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + РазмерПакета);
	Запрос.УстановитьПараметр("Узел", Узел);
	ТабОР = Запрос.Выполнить().Выгрузить();
	
	МассивДляПоискаРодителей = ТабОР.ВыгрузитьКолонку("Ссылка");
	РодителиОР = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивДляПоискаРодителей, СтруктураИерархии, ТекущаяДата(), Истина, Истина);
	
	Для каждого ТекущийОР Из ТабОР Цикл 
		
		Если НЕ ТекущийОР.Удалить Тогда
			ОР = ФабрикаXDTO.Создать(ТипОР);
			ОР.ГУИД = Строка(ТекущийОР.Ссылка.УникальныйИдентификатор());
			ОР.Код = ТекущийОР.Код;
			ОР.Наименование =ТекущийОР.Наименование; 
			Родитель = РодителиОР.Получить(ТекущийОР.Ссылка);
			ОР.Родитель = ?(ЗначениеЗаполнено(Родитель), Строка(Родитель.УникальныйИдентификатор()), "");  
			ОР.Организация = ?(ЗначениеЗаполнено(ТекущийОР.Организация),ТекущийОР.Организация.Код,0);
			ОР.ЭтоГруппа = ТекущийОР.ЭтоГруппа;
			ОР.ПометкаУдаления = ТекущийОР.ПометкаУдаления;
			ОР.НеВИерархии = Родитель = Неопределено;
			ОР.Удалить = Ложь;
			Если НЕ ТекущийОР.ЭтоГруппа Тогда
				ОР.ДатаВыпуска = ТекущийОР.ДатаВыпуска;
				ОР.РемонтнаяГруппа =?(ЗначениеЗаполнено(ТекущийОР.ТиповойОР),ТекущийОР.ТиповойОР.Код,0);
				ОР.ИнвентарныйНомер = ТекущийОР.ИнвентарныйНомер;
				ОР.Комментарий    = ТекущийОР.Комментарий;
				ОР.Контрагент   = Строка(ТекущийОР.Контрагент);
				ОР.Подразделение    =?(ЗначениеЗаполнено(ТекущийОР.Подразделение),ТекущийОР.Подразделение.Код,0);
				ОР.ПодразделениеИсполнитель =?(ЗначениеЗаполнено(ТекущийОР.ПодразделениеИсполнитель),ТекущийОР.ПодразделениеИсполнитель.Код,0);
				ОР.ШтрихКод = ТекущийОР.ШтрихКод;
				ОР.ДатаВводаВЭксплуатацию = ТекущийОР.ДатаВводаВЭксплуатацию ;
				ОР.НомерПаспорта    = ТекущийОР.НомерПаспорта ;
				ОР.Направление    = ?(ЗначениеЗаполнено(ТекущийОР.Направление),ТекущийОР.Направление.Код,0);
				ОР.ЗаводскойНомер = ТекущийОР.ЗаводскойНомер;
				ОР.ТехНомер = ТекущийОР.ТехНомер;
				ОР.Широта = ТекущийОР.Широта;
				ОР.Долгота = ТекущийОР.Долгота;
				ОР.Высота = ТекущийОР.Высота;
				ОР.ЭтоПротяженныйОбъект = ТекущийОР.ЭтоПротяженныйОбъект;
				ОР.Местонахождение = ТекущийОР.АдресМестонахождения;
				АдресОР = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ТекущийОР.Ссылка, Справочники.ВидыКонтактнойИнформации.АдресОР); 
				ОР.Адрес = ?(ЗначениеЗаполнено(АдресОР), АдресОР, "");
				ОР.Приоритет = ?(ЗначениеЗаполнено(ТекущийОР.Приоритет), Строка(ТекущийОР.Приоритет.УникальныйИдентификатор()), Неопределено);
				
				ОР.ЭтоФМ = Ложь;
				Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") 
					И ТекущийОР.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
					ОР.ЭтоФМ = Истина;
				КонецЕсли;
			КонецЕсли;	
		Иначе
			ОР = ФабрикаXDTO.Создать(ТипОР);
			ОР.ГУИД = Строка(ТекущийОР.Ссылка.УникальныйИдентификатор());
			ОР.Код  = 0;
			ОР.Наименование = "";
			ОР.ЭтоГруппа = Ложь;
			ОР.Удалить = Истина;	
		КонецЕсли;
		
		Список.ОР.Добавить(ОР);
		
	КонецЦикла;
	
	Если Список.ОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОрганизации(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокОрганизаций");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Организации");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.Организации, ТипФабрики, "Организации");
	
	Если Список.Организации.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьВидыДефектов(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокВидовДефектов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ВидыДефектов");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ВидыДефектов, ТипФабрики, "торо_ВидыДефектов",, Истина);
		
	Если Список.ВидыДефектов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСклады(Все, ИДУстройства)
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокСкладов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Склады");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ИмяСправочника = "Склады";
	
	Если Все Тогда
		Выборка = Справочники[ИмяСправочника].Выбрать();	
	Иначе
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.Справочники[ИмяСправочника]);	
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если Все Тогда
			ТекущийОбъект = Выборка;
		Иначе
			ТекущийОбъект = Выборка.Получить();
			Если ТипЗнч(ТекущийОбъект) = Тип("УдалениеОбъекта") Тогда
				ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
				ДобавляемыйОбъект.УИД = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
				ДобавляемыйОбъект.Наименование = "";
				ДобавляемыйОбъект.УИДРодителя = "";
				ДобавляемыйОбъект.ЭтоГруппа = Ложь;
				ДобавляемыйОбъект.ПометкаУдаления = Ложь;
				ДобавляемыйОбъект.Удалить = Истина;
				Список.Склады.Добавить(ДобавляемыйОбъект);
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
		ДобавляемыйОбъект.УИД = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
		ДобавляемыйОбъект.Наименование = ТекущийОбъект.Наименование;
		ДобавляемыйОбъект.ЭтоГруппа = ТекущийОбъект.ЭтоГруппа;
		
		Если ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда
			ДобавляемыйОбъект.УИДРодителя = Строка(ТекущийОбъект.Родитель.УникальныйИдентификатор());
		Иначе
			ДобавляемыйОбъект.УИДРодителя = "";
		КонецЕсли;
		
		ДобавляемыйОбъект.ПометкаУдаления = ТекущийОбъект.ПометкаУдаления;
		ДобавляемыйОбъект.Удалить = Ложь;
		
		Список.Склады.Добавить(ДобавляемыйОбъект);
		
		Если Не Все Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
		КонецЕсли;
	КонецЦикла;
		
	Если Список.Склады.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
КонецФункции

Функция ПолучитьВидыРемонтов(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокВидовРемонтов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ВидыРемонтов");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ВидыРемонтов, ТипФабрики, "торо_ВидыРемонтов",, Истина);
		
	Если Список.ВидыРемонтов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТехОперации(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокТехОпераций");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ТехОперации");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ТехОперации, ТипФабрики, "торо_ТехнологическиеОперации",, Истина);
		
	Если Список.ТехОперации.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТехКарты(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокТехКарт");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ТехКарты");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ТехКарты, ТипФабрики, "торо_ИдентификаторыТехКарт",, Истина);
		
	Если Список.ТехКарты.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЕдиницыИзмерения(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокЕдиницИзмерения");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЕдиницыИзмерения");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ЕдиницыИзмерения, ТипФабрики, "ЕдиницыИзмерения");
	
	Если Список.ЕдиницыИзмерения.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;

КонецФункции

Функция ПолучитьНоменклатуру(Все, ИДУстройства)
		
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокНоменклатуры");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Номенклатура");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.Номенклатура, ТипФабрики, "Номенклатура",, Истина);
		
	Если Список.Номенклатура.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИспользованиеХарактеристик()

	Возврат Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	
КонецФункции

Функция ПолучитьВидыНоменклатуры(Все, ИДУстройства)
		
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокВидовНоменклатуры");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ВидыНоменклатуры");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ВидыНоменклатуры, ТипФабрики, "ВидыНоменклатуры",, Истина);
		
	Если Список.ВидыНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;

КонецФункции

Функция ПолучитьХарактеристикиНоменклатуры(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокХарактеристикНоменклатуры");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ХарактеристикиНоменклатуры");
	Список = ФабрикаXDTO.Создать(ТипСписок);

	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ХарактеристикиНоменклатуры, ТипФабрики, "ХарактеристикиНоменклатуры");
	
	Если Список.ХарактеристикиНоменклатуры.Количество() = 0 Тогда 
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьПричиныДефектов(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПричинДефектов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПричиныДефектов");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ПричиныДефектов, ТипФабрики, "торо_ПричиныДефектов");
		
	Если Список.ПричиныДефектов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРемонтныеГруппы(Все, ИДУстройства)
 	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Если Все Тогда
		ВыполнитьПервоначальнуюРегистрациюДанных("торо_ТиповыеОР", Узел);
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокРемонтныхГрупп");
	ТипФабрики = ФабрикаXDTO.Тип("android", "РемонтныеГруппы");

	Список = ФабрикаXDTO.Создать(ТипСписок);
		
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТиповыеОР.Код КАК Код,
	               |	торо_ТиповыеОР.Наименование КАК Наименование,
	               |	торо_ТиповыеОР.Родитель КАК Родитель,
	               |	торо_ТиповыеОР.Ссылка КАК Ссылка,
	               |	торо_ТиповыеОР.ЭтоГруппа КАК ЭтоГруппа,
	               |	торо_ТиповыеОР.ПометкаУдаления КАК ПометкаУдаления,
	               |	торо_ТиповыеОР.Комментарий КАК Комментарий
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР КАК торо_ТиповыеОР";
	
	
	ТипМетаданных = Метаданные.Справочники.торо_ТиповыеОР;
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, 1, ТипМетаданных);
	
	МассивСсылок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Получить();
		
		Если ТипЗнч(ТекущийОбъект) = Тип("УдалениеОбъекта") Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			
			ДобавляемыйОбъект.ГУИД =			Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
			ДобавляемыйОбъект.Код =				0;
			ДобавляемыйОбъект.Наименование =	"";
			ДобавляемыйОбъект.Родитель =        Неопределено;
			ДобавляемыйОбъект.ЭтоГруппа =		Ложь;
			ДобавляемыйОбъект.ПометкаУдаления =	Ложь;
			ДобавляемыйОбъект.Комментарий = 	"";
			ДобавляемыйОбъект.Удалить =         Истина;
			
			Список.РемонтныеГруппы.Добавить(ДобавляемыйОбъект); 
			Продолжить;
		КонецЕсли;
		
		Если ТекущийОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(ТекущийОбъект.Ссылка);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + " ГДЕ торо_ТиповыеОР.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить();
	ВыборкаЭлементов = Результат.Выбрать();
	
	ЗначенияПоУмолчанию = Новый Структура("ЭтоГруппа, ПометкаУдаления, Комментарий", Истина, Ложь, "");
	
    Пока ВыборкаЭлементов.Следующий() Цикл
				
		Количество = Количество + 1;
		Если Количество > РазмерПакета Тогда
			Прервать;
		КонецЕсли;
		
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
		
		ТиповойОР = ВыборкаЭлементов.Ссылка;
		
		ДобавляемыйОбъект.ГУИД =				Строка(ТиповойОР.УникальныйИдентификатор());
		ДобавляемыйОбъект.Код =					ВыборкаЭлементов.Код;
		ДобавляемыйОбъект.Наименование =		ВыборкаЭлементов.Наименование;
		ДобавляемыйОбъект.ЭтоГруппа =			ВыборкаЭлементов.ЭтоГруппа;
		ДобавляемыйОбъект.ПометкаУдаления =		ВыборкаЭлементов.ПометкаУдаления;
		ДобавляемыйОбъект.Комментарий = 		ВыборкаЭлементов.Комментарий;
		ДобавляемыйОбъект.Удалить =             Ложь;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаЭлементов.Родитель) Тогда
			ДобавляемыйОбъект.Родитель = Неопределено;
		Иначе
			Попытка
				ОбъектРодитель = ФабрикаXDTO.Создать(ТипФабрики);
				ЗаполнитьЗначенияСвойств(ОбъектРодитель, ЗначенияПоУмолчанию);
				ОбъектРодитель.Родитель = Неопределено;
				ОбъектРодитель.ГУИД = Строка(ВыборкаЭлементов.Родитель.УникальныйИдентификатор());
				ОбъектРодитель.Наименование = ВыборкаЭлементов.Родитель.Наименование;
				ОбъектРодитель.Код = ВыборкаЭлементов.Родитель.Код;
				
				ДобавляемыйОбъект.Родитель = ОбъектРодитель;
			Исключение
				ДобавляемыйОбъект.Родитель = Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		
		Список.РемонтныеГруппы.Добавить(ДобавляемыйОбъект);
	КонецЦикла;
		
	Если Список.РемонтныеГруппы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;

КонецФункции

Функция ПолучитьКритичностиДефектов(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокКритичностейДефекта");
	ТипФабрики = ФабрикаXDTO.Тип("android", "КритичностиДефекта");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.КритичностиДефекта, ТипФабрики, "торо_КритичностьДефекта");
		
	Если Список.КритичностиДефекта.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУсловияВыявления(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокУсловийВыявленияДефекта");
	ТипФабрики = ФабрикаXDTO.Тип("android", "УсловияВыявленияДефекта");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.УсловияВыявленияДефекта, ТипФабрики, "торо_УсловияВыявленияДефекта");
			
	Если Список.УсловияВыявленияДефекта.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьПодразделения(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПодразделений");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Подразделения");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.Подразделения, ТипФабрики, "СтруктураПредприятия",,Истина);
	
	Если Список.Подразделения.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьБригады(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокБригад");
	ТипФабрики = ФабрикаXDTO.Тип("android", "РемонтныеБригады");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.Элементы, ТипФабрики, "торо_РемонтныеБригады",,Истина, Истина);
	
	Если Список.Элементы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНаправления(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокНаправления");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Направления");
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.Направления, ТипФабрики, "торо_НаправленияОбъектовРемонтныхРабот");
		
	Если Список.Направления.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПриоритетыОР(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПриоритетовОР");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПриоритетыОР");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ПриоритетыОР, ТипФабрики, "торо_ПриоритетыОбъектовРемонта");
		
	Если Список.ПриоритетыОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруИерархии(ИмяПользователя)
	
	ТипСтруктура = ФабрикаXDTO.Тип("android", "СтруктураИерархии");
	СтруктураИерархии = ФабрикаXDTO.Создать(ТипСтруктура);
	
	ИерархияДляМобильногоПриложения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ИерархияДляМобильногоПриложения",
		Справочники.торо_СтруктурыОР.ПустаяСсылка(),,
		ИмяПользователя);
		
	Если ЗначениеЗаполнено(ИерархияДляМобильногоПриложения) Тогда
		СтруктураИерархии.Ссылка = Строка(ИерархияДляМобильногоПриложения.УникальныйИдентификатор());
		СтруктураИерархии.Наименование = ИерархияДляМобильногоПриложения.Наименование;
	Иначе
		СтруктураИерархии.Ссылка = "";
		СтруктураИерархии.Наименование = "";
	КонецЕсли;	
	
	Возврат СтруктураИерархии;	
		
КонецФункции

Функция ПолучитьИерархиюОР(Все, ИДУстройства, ИДСтруктуры, СписокОР)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	СтруктураИерархии = Справочники.торо_СтруктурыОР.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтруктуры));
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИзменяетсяДокументами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураИерархии, "ИзменяетсяДокументами");
	
	ТипСписок = ФабрикаXDTO.Тип("android", "ИерархияОРСписок");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЭлементИерархииОР");
	ТипОР = ФабрикаXDTO.Тип("android", "ОР");
	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Если Все Тогда 
		ВыполнитьПервоначальнуюРегистрациюИерархииОР(Узел, СтруктураИерархии, ИзменяетсяДокументами);
	КонецЕсли;

	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	Количество = 0;
	
	Если ИзменяетсяДокументами = Истина Тогда
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_РасположениеОРВСтруктуреИерархии);
		// данные второго регистра не нужны, очищаем сразу
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.РегистрыСведений.торо_ИерархическиеСтруктурыОР);
	Иначе
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_ИерархическиеСтруктурыОР);
		// данные второго регистра не нужны, очищаем сразу
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.РегистрыСведений.торо_РасположениеОРВСтруктуреИерархии);
	КонецЕсли;
	
	СписокОРДляОбновления = Новый Массив;
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Количество = Количество + 1;
		Если Количество > РазмерПакета Тогда
			Прервать;
		КонецЕсли;
		
		НаборЗаписей = ВыборкаИзменений.Получить();
		
		Если ТипЗнч(НаборЗаписей) = Тип("УдалениеОбъекта") Тогда
			СписокОРДляОбновления.Добавить(НаборЗаписей.Ссылка);
		ИначеЕсли ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.торо_ИерархическиеСтруктурыОР") 
			ИЛИ ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.торо_РасположениеОРВСтруктуреИерархии") Тогда
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.СтруктураИерархии <> СтруктураИерархии Тогда
					Продолжить;
				КонецЕсли;
				СписокОРДляОбновления.Добавить(Запись.ОбъектИерархии);
			КонецЦикла;
		КонецЕсли;
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		КонецЕсли;
	КонецЦикла;	
	
	Выборка = ПолучитьВыборкуДанныхИерархииИзРегистра(СтруктураИерархии, ИзменяетсяДокументами, СписокОРДляОбновления);
	
	Пока Выборка.Следующий() Цикл
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
		
		ОбъектРемонта = ФабрикаXDTO.Создать(ТипОР);
		ОбъектРемонта.ГУИД = Строка(Выборка.ОбъектРемонта.УникальныйИдентификатор());
		ОбъектРемонта.Код = Выборка.ОбъектРемонтаКод;
		ОбъектРемонта.Наименование = Выборка.ОбъектРемонтаНаименование;
		ОбъектРемонта.ЭтоГруппа = Выборка.ОбъектРемонтаЭтоГруппа;
		ОбъектРемонта.Регистратор = ?(ЗначениеЗаполнено(Выборка.Регистратор), Строка(Выборка.Регистратор.УникальныйИдентификатор()), "");
		ДобавляемыйОбъект.ОбъектРемонта = ОбъектРемонта;
		
		Если Выборка.НеВИерархии = Истина Тогда
			ДобавляемыйОбъект.Родитель = Неопределено;
		Иначе
			Родитель = ФабрикаXDTO.Создать(ТипОР);
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				Родитель.Код = Выборка.РодительКод;
				Родитель.Наименование = Выборка.РодительНаименование;
				Родитель.ЭтоГруппа = Выборка.РодительЭтоГруппа;
			Иначе
				Родитель.Код = "";
				Родитель.Наименование = "";
				Родитель.ЭтоГруппа = Ложь;
			КонецЕсли;
			ДобавляемыйОбъект.Родитель = Родитель;
		КонецЕсли;
		
		Список.ИерархияОР.Добавить(ДобавляемыйОбъект);							
	КонецЦикла;
	
	Если Список.ИерархияОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСостояниеОР(КодОбъектаРемонта)
	
	ОбъектРемонта = НайтиОРпоКоду(КодОбъектаРемонта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации КАК ВидЭксплуатации
	               |ИЗ
	               |	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ТекущееСостояниеОРСрезПоследних";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Строка(Выборка.ВидЭксплуатации);
		
	Иначе
	
		Возврат "Данные недоступны";
	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВерсииТехКарт(Все, ИДУстройства)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокВерсийТехКарт");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ВерсииТехКарт");
	ОперацииТипСписок = ФабрикаXDTO.Тип("android", "СписокОперацийТехКарты");
	ОперацииТипФабрики = ФабрикаXDTO.Тип("android", "ОперацииТехКарты");
	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_ТехКартыИзменения.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТабИзменения
	               |ИЗ
	               |	Справочник.торо_ТехКарты.Изменения КАК торо_ТехКартыИзменения
	               |ГДЕ
	               |	торо_ТехКартыИзменения.Узел = &Узел
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабИзменения.Ссылка КАК Ссылка,
	               |	торо_ТехКарты.Ссылка ЕСТЬ NULL КАК Удалить,
	               |	торо_ТехКарты.ДатаПринятия КАК ДатаПринятия
	               |ПОМЕСТИТЬ ВсеИзмененияПоТК
	               |ИЗ
	               |	ТабИзменения КАК ТабИзменения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты КАК торо_ТехКарты
	               |		ПО ТабИзменения.Ссылка = торо_ТехКарты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКартыСписокОпераций.ID КАК ID,
	               |	торо_ТехКартыСписокОпераций.Операция КАК Операция,
	               |	торо_ТехКартыСписокОпераций.Продолжительность КАК Продолжительность,
	               |	торо_ТехКартыСписокОпераций.Количество КАК Количество,
	               |	торо_ТехКартыСписокОпераций.НормаВремениВСекундах КАК НормаВремениВСекундах,
				   |	торо_ТехКартыСписокОпераций.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ВсеИзмененияПоТК.ДатаПринятия КАК ДатаПринятия,
	               |	ВсеИзмененияПоТК.Ссылка КАК Ссылка,
	               |	ВсеИзмененияПоТК.Удалить КАК Удалить
	               |ИЗ
	               |	ВсеИзмененияПоТК КАК ВсеИзмененияПоТК
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ПО (торо_ТехКартыСписокОпераций.Ссылка = ВсеИзмененияПоТК.Ссылка)
	               |ИТОГИ
	               |	МАКСИМУМ(ДатаПринятия),
	               |	МАКСИМУМ(Удалить)
	               |ПО
	               |	Ссылка";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + РазмерПакета);
	Запрос.УстановитьПараметр("Узел", Узел);
	ВыборкаЭлементов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивСсылок = Новый Массив;
	МассивОбъектов = Новый Соответствие;
	
	Пока ВыборкаЭлементов.Следующий() Цикл
		ТехКарта = ВыборкаЭлементов.Ссылка;
		
		Если ВыборкаЭлементов.Удалить Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			
			ДобавляемыйОбъект.ГУИД =				Строка(ТехКарта.УникальныйИдентификатор());
			ДобавляемыйОбъект.Код =					0;
			ДобавляемыйОбъект.Наименование =		"";
			ДобавляемыйОбъект.Родитель =            Неопределено;
			ДобавляемыйОбъект.ЭтоГруппа =			Ложь;
			ДобавляемыйОбъект.ПометкаУдаления =		Ложь;
			ДобавляемыйОбъект.Удалить =             Истина;
			ДобавляемыйОбъект.ДатаПринятия = 		ТекущаяДата();
			ДобавляемыйОбъект.Операции =            ФабрикаXDTO.Создать(ОперацииТипСписок); 
			
			Список.ВерсииТехКарт.Добавить(ДобавляемыйОбъект);
			Продолжить;
		КонецЕсли;
				
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
		
		ДобавляемыйОбъект.ГУИД =				Строка(ТехКарта.УникальныйИдентификатор());
		ДобавляемыйОбъект.Код =					ТехКарта.Код;
		ДобавляемыйОбъект.Наименование =		ТехКарта.Наименование;
		ДобавляемыйОбъект.ЭтоГруппа =			ТехКарта.ЭтоГруппа;
		ДобавляемыйОбъект.ПометкаУдаления =		ТехКарта.ПометкаУдаления;
		ДобавляемыйОбъект.Удалить =             Ложь;
		ДобавляемыйОбъект.ДатаПринятия = 		ВыборкаЭлементов.ДатаПринятия;
		
		Если НЕ ЗначениеЗаполнено(ТехКарта.Родитель) Тогда
			ДобавляемыйОбъект.Родитель = Неопределено;
		Иначе
			ОбъектРодитель = ФабрикаXDTO.Создать(ТипФабрики);
			
			ОбъектРодитель.Родитель = Неопределено;
			ОбъектРодитель.Код = ТехКарта.Родитель.Код;
			ОбъектРодитель.Наименование = ТехКарта.Родитель.Наименование;
			
			ДобавляемыйОбъект.Родитель = ОбъектРодитель;
		КонецЕсли;
		
		Операции = ФабрикаXDTO.Создать(ОперацииТипСписок);
		
		ВыборкаОпераций = ВыборкаЭлементов.Выбрать();
		
		Пока ВыборкаОпераций.Следующий() Цикл
			
			Если ВыборкаОпераций.ID = NULL
				Или ВыборкаОпераций.Операция = NULL
				Или ВыборкаОпераций.Продолжительность = NULL
				Или ВыборкаОпераций.НормаВремениВСекундах = NULL
				Или ВыборкаОпераций.Количество = NULL 
				Или ВыборкаОпераций.Операция = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Операция = ФабрикаXDTO.Создать(ОперацииТипФабрики);
			
			Операция.ID = ВыборкаОпераций.ID;
			Операция.Продолжительность = ВыборкаОпераций.Продолжительность;
			Операция.НормаВремениВСекундах = ВыборкаОпераций.НормаВремениВСекундах;
			Операция.Количество= ВыборкаОпераций.Количество;
			Операция.ID_ПараллельнойОперации = ВыборкаОпераций.ID_ПараллельнойОперации;
			
			Если ТипЗнч(ВыборкаОпераций.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				Операция.Операция = "о";
			ИначеЕсли ТипЗнч(ВыборкаОпераций.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Операция.Операция = "т";
			КонецЕсли;
			
			Операция.ГУИД = Строка(ВыборкаОпераций.Операция.УникальныйИдентификатор());
			
			Операции.ОперацииТехКарты.Добавить(Операция);
			
		КонецЦикла;
		ДобавляемыйОбъект.Операции = Операции;
		
		Список.ВерсииТехКарт.Добавить(ДобавляемыйОбъект);
		
	КонецЦикла;
	
	Если Список.ВерсииТехКарт.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВерсииТехКарт_Регистр(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокВерсииТехКарт");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_ВерсииТехКарт");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	торо_ВерсииТехКартИзменения.Период КАК Период,
	               |	торо_ВерсииТехКартИзменения.ИдентификаторТехКарты КАК ИдентификаторТехКарты
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.Изменения КАК торо_ВерсииТехКартИзменения
	               |ГДЕ
	               |	торо_ВерсииТехКартИзменения.Узел = &Узел
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + РазмерПакета);
	Запрос.УстановитьПараметр("Узел", Узел);
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	НаборЗаписей = РегистрыСведений.торо_ВерсииТехКарт.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл 
		
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ИдентификаторТехКарты.Установить(Выборка.ИдентификаторТехКарты);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ДобавляемыйОбъект.ИдентификаторТехКарты = "Удалить_" + Строка(Выборка.ИдентификаторТехКарты.УникальныйИдентификатор());
			ДобавляемыйОбъект.Период = Выборка.Период;
			ДобавляемыйОбъект.ТехКарта = "None";
			Список.рс_ВерсииТехКарт.Добавить(ДобавляемыйОбъект);
		Иначе 
			Для каждого ТекущийОбъект из НаборЗаписей Цикл
				ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
				ДобавляемыйОбъект.ИдентификаторТехКарты = Строка(ТекущийОбъект.ИдентификаторТехКарты.УникальныйИдентификатор());
				ДобавляемыйОбъект.ТехКарта = Строка(ТекущийОбъект.ТехКарта.УникальныйИдентификатор());
				ДобавляемыйОбъект.Период = ТекущийОбъект.Период;
				Список.рс_ВерсииТехКарт.Добавить(ДобавляемыйОбъект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Список.рс_ВерсииТехКарт.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСотрудников(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокСотрудников");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Сотрудники");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.Сотрудники, ТипФабрики, "Сотрудники");
	
	Если Список.Сотрудники.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКвалификации(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокКвалификаций");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Квалификации");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.Квалификации, ТипФабрики, "торо_КвалификацииРемонтногоПерсонала");
	
	Если Список.Квалификации.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОРПоШК(ШтрихКод, ИДСтруктуры)
	
	СтруктураИерархии = Справочники.торо_СтруктурыОР.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтруктуры));
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокОбъектовРемонта");
	ТипОР = ФабрикаXDTO.Тип("android", "ОбъектРемонта");
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
	               |	торо_ОбъектыРемонта.Код КАК Код,
	               |	торо_ОбъектыРемонта.Наименование КАК Наименование,
	               |	торо_ОбъектыРемонта.Организация КАК Организация,
	               |	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
	               |	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
	               |	торо_ОбъектыРемонта.ДатаВыпуска КАК ДатаВыпуска,
	               |	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
	               |	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	торо_ОбъектыРемонта.Комментарий КАК Комментарий,
	               |	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
	               |	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
	               |	торо_ОбъектыРемонта.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
	               |	торо_ОбъектыРемонта.ШтрихКод КАК ШтрихКод,
	               |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	               |	торо_ОбъектыРемонта.НомерПаспорта КАК НомерПаспорта,
	               |	торо_ОбъектыРемонта.Направление КАК Направление,
	               |	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
	               |	торо_ОбъектыРемонта.Широта КАК Широта,
	               |	торо_ОбъектыРемонта.Долгота КАК Долгота,
	               |	торо_ОбъектыРемонта.Высота КАК Высота,
	               |	торо_ОбъектыРемонта.АдресМестонахождения КАК АдресМестонахождения,
	               |	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
	               |	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
				   |	торо_ОбъектыРемонта.ЭтоПротяженныйОбъект КАК ЭтоПротяженныйОбъект
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.ШтрихКод = &ШтрихКод";
	
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	ТабОР = Запрос.Выполнить().Выгрузить();
	МассивДляПоискаРодителей = ТабОР.ВыгрузитьКолонку("Ссылка");
	
	РодителиОР = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивДляПоискаРодителей, СтруктураИерархии, ТекущаяДата(), Истина, Истина);
	
	Для каждого ТекущийОР Из ТабОР Цикл 
		ОР = ФабрикаXDTO.Создать(ТипОР);
		ОР.ГУИД = Строка(ТекущийОР.Ссылка.УникальныйИдентификатор());
		ОР.Код = ТекущийОР.Код;
		ОР.Наименование =ТекущийОР.Наименование; 
		Родитель = РодителиОР.Получить(ТекущийОР.Ссылка);
		ОР.Родитель = ?(ЗначениеЗаполнено(Родитель), Строка(Родитель.УникальныйИдентификатор()), "");  
		ОР.Организация = ?(ЗначениеЗаполнено(ТекущийОР.Организация),ТекущийОР.Организация.Код,0);
		ОР.ЭтоГруппа = ТекущийОР.ЭтоГруппа;
		ОР.ПометкаУдаления = ТекущийОР.ПометкаУдаления;
		ОР.НеВИерархии = Родитель = Неопределено;
		ОР.Удалить = Ложь;
		Если НЕ ТекущийОР.ЭтоГруппа Тогда
			ОР.ДатаВыпуска = ТекущийОР.ДатаВыпуска;
			ОР.РемонтнаяГруппа =?(ЗначениеЗаполнено(ТекущийОР.ТиповойОР),ТекущийОР.ТиповойОР.Код,0);
			ОР.ИнвентарныйНомер = ТекущийОР.ИнвентарныйНомер;
			ОР.Комментарий    = ТекущийОР.Комментарий;
			ОР.Контрагент   = Строка(ТекущийОР.Контрагент);
			ОР.Подразделение    =?(ЗначениеЗаполнено(ТекущийОР.Подразделение),ТекущийОР.Подразделение.Код,0);
			ОР.ПодразделениеИсполнитель =?(ЗначениеЗаполнено(ТекущийОР.ПодразделениеИсполнитель),ТекущийОР.ПодразделениеИсполнитель.Код,0);
			ОР.ШтрихКод = ТекущийОР.ШтрихКод;
			ОР.ДатаВводаВЭксплуатацию = ТекущийОР.ДатаВводаВЭксплуатацию ;
			ОР.НомерПаспорта    = ТекущийОР.НомерПаспорта ;
			ОР.Направление    = ?(ЗначениеЗаполнено(ТекущийОР.Направление),ТекущийОР.Направление.Код,0);
			ОР.ЗаводскойНомер = ТекущийОР.ЗаводскойНомер;
			ОР.ТехНомер = ТекущийОР.ТехНомер;
			ОР.Широта = ТекущийОР.Широта;
			ОР.Долгота = ТекущийОР.Долгота;
			ОР.Высота = ТекущийОР.Высота;
			ОР.ЭтоПротяженныйОбъект = ТекущийОР.ЭтоПротяженныйОбъект;
			ОР.Местонахождение = ТекущийОР.АдресМестонахождения;
			АдресОР = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ТекущийОР.Ссылка, Справочники.ВидыКонтактнойИнформации.АдресОР); 
			ОР.Адрес = ?(ЗначениеЗаполнено(АдресОР), АдресОР, "");
			ОР.Приоритет = ?(ЗначениеЗаполнено(ТекущийОР.Приоритет), Строка(ТекущийОР.Приоритет.УникальныйИдентификатор()), Неопределено);
			
			ОР.ЭтоФМ = Ложь;
			Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") 
				И ТекущийОР.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
				ОР.ЭтоФМ = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		Список.ОР.Добавить(ОР);		
	КонецЦикла;
	
	Если Список.ОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИерархиюОРПоШК(ИДСтруктуры, ШтрихКод)
	
	СтруктураИерархии = Справочники.торо_СтруктурыОР.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтруктуры));
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИзменяетсяДокументами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураИерархии, "ИзменяетсяДокументами");
	
	ТипСписок = ФабрикаXDTO.Тип("android", "ИерархияОРСписок");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЭлементИерархииОР");
	ТипОР = ФабрикаXDTO.Тип("android", "ОР");
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	СписокОРДляОбновления = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.ШтрихКод = &ШтрихКод";
	
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокОРДляОбновления.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Выборка = ПолучитьВыборкуДанныхИерархииИзРегистра(СтруктураИерархии, ИзменяетсяДокументами, СписокОРДляОбновления);
	
	Пока Выборка.Следующий() Цикл
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
		
		ОбъектРемонта = ФабрикаXDTO.Создать(ТипОР);
		ОбъектРемонта.ГУИД = Строка(Выборка.ОбъектРемонта.УникальныйИдентификатор());
		ОбъектРемонта.Код = Выборка.ОбъектРемонтаКод;
		ОбъектРемонта.Наименование = Выборка.ОбъектРемонтаНаименование;
		ОбъектРемонта.ЭтоГруппа = Выборка.ОбъектРемонтаЭтоГруппа;
		ДобавляемыйОбъект.ОбъектРемонта = ОбъектРемонта;
		
		Если Выборка.НеВИерархии = Истина Тогда
			ДобавляемыйОбъект.Родитель = Неопределено;
		Иначе
			Родитель = ФабрикаXDTO.Создать(ТипОР);
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				Родитель.Код = Выборка.РодительКод;
				Родитель.Наименование = Выборка.РодительНаименование;
				Родитель.ЭтоГруппа = Выборка.РодительЭтоГруппа;
			Иначе
				Родитель.Код = "";
				Родитель.Наименование = "";
				Родитель.ЭтоГруппа = Ложь;
			КонецЕсли;
			ДобавляемыйОбъект.Родитель = Родитель;
		КонецЕсли;
		
		Список.ИерархияОР.Добавить(ДобавляемыйОбъект);							
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьЗаявкиНаРемонт(Все, ИДУстройства)
	
	Подразделение = ПолучитьПодразделениеУстройства(ИДУстройства);
	Бригада = ПолучитьБригадуУстройства(ИДУстройства);
	
	Если Подразделение = Неопределено ИЛИ Бригада = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Все Тогда
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		Если Не ЗначениеЗаполнено(Узел) Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивОбъектов = Новый Соответствие;
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокЗаявокНаРемонт");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЗаявкиНаРемонт");	
	ОперацииТипСписок = ФабрикаXDTO.Тип("android", "СписокРемонтныхРабот");
	ОперацииТипФабрики = ФабрикаXDTO.Тип("android", "РемонтныеРаботы");
	МатериалыТипСписок = ФабрикаXDTO.Тип("android", "СписокМатериалов");
	МатериалыТипФабрики = ФабрикаXDTO.Тип("android", "Материалы");
	КвалификацииТипСписок = ФабрикаXDTO.Тип("android", "СписокТрудовыхЗатрат");
	КвалификацииТипФабрики = ФабрикаXDTO.Тип("android", "ТрудовыеЗатраты");
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ВыборкаЗаявок = ПолучитьВыборкуЗаявок(Все, Узел, Подразделение, Бригада, МассивОбъектов);
	
	Пока ВыборкаЗаявок.Следующий() Цикл
		
		Заявка = ВыборкаЗаявок.Ссылка;
		ВыборкаРемонтов = ВыборкаЗаявок.Выбрать();
		
		Пока ВыборкаРемонтов.Следующий() Цикл
			
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			
			// Основная информация
			ДобавляемыйОбъект.Дата = ВыборкаРемонтов.Дата;
			ДобавляемыйОбъект.Номер = ВыборкаРемонтов.Номер;
			ДобавляемыйОбъект.ПометкаУдаления = ВыборкаРемонтов.ПометкаУдаления;
			ДобавляемыйОбъект.Проведен = ВыборкаРемонтов.Проведен;
			ДобавляемыйОбъект.УИДДокументаВБазеТОиР = Строка(Заявка.УникальныйИдентификатор());
			ДобавляемыйОбъект.Подразделение = ВыборкаРемонтов.ПодразделениеКод;
			ДобавляемыйОбъект.Организация = ВыборкаРемонтов.ОрганизацияКод;
			ДобавляемыйОбъект.Комментарий = ВыборкаРемонтов.Комментарий;
			ДобавляемыйОбъект.КомментарийКСтатусу = "";
			
			Если ЗначениеЗаполнено(ВыборкаРемонтов.СтатусРемонтаПоИсполнителю) 
				И ВыборкаРемонтов.СтатусРемонтаПоИсполнителю <> Перечисления.торо_СтатусыРемонтов.ЗапланированоУстранение Тогда
				
				// Статусы "В работе", "Приостановлен", "Отказ исполнителя", "Возобновлено после отказа".
				// Должны отображаться по исполнителю, независимо от общего статуса ремонта.
				
				Если ВыборкаРемонтов.СтатусРемонтаПоИсполнителю = Перечисления.торо_СтатусыРемонтов.ВРаботе Тогда
					ДобавляемыйОбъект.СтатусДокумента = XMLСтрока("ВРаботе");
				Иначе
					ДобавляемыйОбъект.СтатусДокумента = XMLСтрока(ВыборкаРемонтов.СтатусРемонтаПоИсполнителю);
				КонецЕсли;
				ДобавляемыйОбъект.КомментарийКСтатусу = ВыборкаРемонтов.КомментарийКСтатусуИсполнителя;
				
			ИначеЕсли ВыборкаРемонтов.СтатусДокумента = Перечисления.торо_СтатусыРемонтов.ЗапланированоУстранение Тогда
				
				ДобавляемыйОбъект.СтатусДокумента = XMLСтрока("Зарегистрирован");
				
			ИначеЕсли ВыборкаРемонтов.СтатусДокумента = Перечисления.торо_СтатусыРемонтов.ВРаботе 
				ИЛИ ВыборкаРемонтов.СтатусДокумента = Перечисления.торо_СтатусыРемонтов.Приостановлен Тогда
				
				// Ремонт в работе у кого-то другого, а у этой бригады не в работе.
				// Установим статус "УжеВыполняется" (присутствует только в мобильном приложении).
				ДобавляемыйОбъект.СтатусДокумента = XMLСтрока("УжеВыполняется");
				
			ИначеЕсли ВыборкаРемонтов.СтатусДокумента = Перечисления.торо_СтатусыРемонтов.ОтказИсполнителя Тогда
				
				// У какого-то исполнителя выставлен отказ, но не у этого. Игнорируем его.
				Если ЗначениеЗаполнено(ВыборкаРемонтов.СтатусРемонтаПоИсполнителю) 
				  И ВыборкаРемонтов.СтатусРемонтаПоИсполнителю <> Перечисления.торо_СтатусыРемонтов.ЗапланированоУстранение Тогда
					ДобавляемыйОбъект.СтатусДокумента = XMLСтрока(ВыборкаРемонтов.СтатусРемонтаПоИсполнителю);
					ДобавляемыйОбъект.КомментарийКСтатусу = ВыборкаРемонтов.КомментарийКСтатусуИсполнителя;
				Иначе
					ДобавляемыйОбъект.СтатусДокумента = XMLСтрока("Зарегистрирован");
				КонецЕсли;
				
			Иначе
				ДобавляемыйОбъект.СтатусДокумента = XMLСтрока(ВыборкаРемонтов.СтатусДокумента);
				ДобавляемыйОбъект.КомментарийКСтатусу = ВыборкаРемонтов.КомментарийКСтатусу;
			КонецЕсли;
				
			// Ремонт оборудования
			ДобавляемыйОбъект.ID = ВыборкаРемонтов.ID;
			ДобавляемыйОбъект.ОбъектРемонта = Строка(ВыборкаРемонтов.ОбъектРемонта.УникальныйИдентификатор());
			ДобавляемыйОбъект.ВидРемонта = ВыборкаРемонтов.ВидРемонтныхРаботКод;
			ДобавляемыйОбъект.ДатаНачала = ВыборкаРемонтов.ДатаНачала;
			ДобавляемыйОбъект.ДатаОкончания = ВыборкаРемонтов.ДатаОкончания;
			ДобавляемыйОбъект.ОписаниеРемонта = ВыборкаРемонтов.ОписаниеРемонта;
			ДобавляемыйОбъект.Высота = ВыборкаРемонтов.Высота;
			ДобавляемыйОбъект.Долгота = ВыборкаРемонтов.Долгота; 
			ДобавляемыйОбъект.Широта = ВыборкаРемонтов.Широта;  
			
			Если ЗначениеЗаполнено(ВыборкаРемонтов.КритичностьДефекта) Тогда
				ДобавляемыйОбъект.КритичностьДефекта = Строка(ВыборкаРемонтов.КритичностьДефекта.УникальныйИдентификатор());
			Иначе
				ДобавляемыйОбъект.КритичностьДефекта = Неопределено;
			КонецЕсли;
			
			// Данные дефекта
			ДобавляемыйОбъект.ДатаИнцидента = ВыборкаРемонтов.ДатаИнцидента;
			ДобавляемыйОбъект.КонтактноеЛицоИнициатора = Строка(ВыборкаРемонтов.КонтактноеЛицоИнициатора);
			ДобавляемыйОбъект.ДефектОписание = ВыборкаРемонтов.ДефектОписание;
				
			// Операции
			Операции = ФабрикаXDTO.Создать(ОперацииТипСписок);
			
			РемРаботы = Заявка.РемонтныеРаботы;
			
			Для Каждого Работа Из РемРаботы Цикл
				
				Если Не Работа.РемонтыОборудования_ID = ВыборкаРемонтов.ID Тогда
					Продолжить;
				КонецЕсли;
				
				Операция = ФабрикаXDTO.Создать(ОперацииТипФабрики);
				
				Операция.ID = Работа.ID;
				Операция.Родитель_ID = Работа.Родитель_ID;
				Операция.Количество = Работа.Количество;
				Операция.Картинка = Работа.Картинка;
				Операция.ID_ПараллельнойОперации = Работа.ID_ПараллельнойОперации;
				
				Префикс = "";
				
				Если ТипЗнч(Работа.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
					Префикс = "о";
				ИначеЕсли ТипЗнч(Работа.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					Префикс = "т";
				КонецЕсли;
				
				Операция.РемонтнаяРабота = Префикс + Работа.РемонтнаяРабота.Код;
				
				Если ТипЗнч(Работа.Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
					Операция.Исполнитель = Строка(Работа.Исполнитель);
					Операция.Бригада = Строка(Работа.ДоговорБригада);
					Операция.ИсполнительКонтрагент = Истина; 
				Иначе
					Операция.Исполнитель = ?(ЗначениеЗаполнено(Работа.Исполнитель),XMLСтрока(Работа.Исполнитель.УникальныйИдентификатор()),Неопределено);
					Операция.Бригада = ?(ЗначениеЗаполнено(Работа.ДоговорБригада),XMLСтрока(Работа.ДоговорБригада.УникальныйИдентификатор()),Неопределено);
					Операция.ИсполнительКонтрагент = Ложь; 
				КонецЕсли;
				
				Операции.РемонтныеРаботы.Добавить(Операция);
				
			КонецЦикла;
			
			ДобавляемыйОбъект.Операции = Операции;
			
			// Материалы
			Материалы = ФабрикаXDTO.Создать(МатериалыТипСписок);
			
			МатЗатраты = Заявка.МатериальныеЗатраты;
			
			Для Каждого Материал Из МатЗатраты Цикл
				
				Если Не Материал.РемонтыОборудования_ID = ВыборкаРемонтов.ID Тогда
					Продолжить;
				КонецЕсли;
				
				Ном = ФабрикаXDTO.Создать(МатериалыТипФабрики);
				
				Ном.ID = Материал.ID;
				Ном.Количество = Материал.Количество;
				Ном.Номенклатура = Материал.Номенклатура.Код;
				Ном.ХарактеристикаНоменклатуры = Материал.ХарактеристикаНоменклатуры.Код;
				Ном.КоличествоЕдиниц = Материал.КоличествоЕдиниц;
				
				Материалы.Материалы.Добавить(Ном);
				
			КонецЦикла;
			
			ДобавляемыйОбъект.Материалы = Материалы;
			
			// Квалификации
			Квалификации = ФабрикаXDTO.Создать(КвалификацииТипСписок);
			
			ТрудЗатраты = Заявка.ТрудовыеЗатраты;
			
			Для Каждого Затрата Из ТрудЗатраты Цикл
				
				Если Не Затрата.РемонтыОборудования_ID = ВыборкаРемонтов.ID Тогда
					Продолжить;
				КонецЕсли;
				
				Кв = ФабрикаXDTO.Создать(КвалификацииТипФабрики);
				
				Кв.ID = Затрата.ID;
				Кв.ВремяРаботы = Затрата.ВремяРаботы;
				Кв.Квалификация = Затрата.Квалификация.Код;
				Кв.Количество = Затрата.Количество;
				
				Квалификации.ТрудовыеЗатраты.Добавить(Кв);
				
			КонецЦикла;
			
			ДобавляемыйОбъект.Квалификации = Квалификации;
			
			Список.ЗаявкиНаРемонт.Добавить(ДобавляемыйОбъект);
			
		КонецЦикла;
		
		Если Не Все Тогда
			Если Не МассивОбъектов[Заявка] = Неопределено Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, МассивОбъектов[Заявка]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Список.ЗаявкиНаРемонт.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаявкиБезЗатрат(Все, ИДУстройства)
	
	Подразделение = ПолучитьПодразделениеУстройства(ИДУстройства);
	Бригада = ПолучитьБригадуУстройства(ИДУстройства);
	
	Если Подразделение = Неопределено ИЛИ Бригада = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Все Тогда
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		Если Не ЗначениеЗаполнено(Узел) Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивОбъектов = Новый Соответствие;
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокЗаявокНаРемонт");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЗаявкиНаРемонт");	
	ОперацииТипСписок = ФабрикаXDTO.Тип("android", "СписокРемонтныхРабот");
	МатериалыТипСписок = ФабрикаXDTO.Тип("android", "СписокМатериалов");
	КвалификацииТипСписок = ФабрикаXDTO.Тип("android", "СписокТрудовыхЗатрат");

	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ВыборкаЗаявок = ПолучитьВыборкуЗаявок(Все, Узел, Подразделение, Бригада, МассивОбъектов);
	
	Пока ВыборкаЗаявок.Следующий() Цикл
		
		Заявка = ВыборкаЗаявок.Ссылка;
		ВыборкаРемонтов = ВыборкаЗаявок.Выбрать();
		
		Пока ВыборкаРемонтов.Следующий() Цикл
			
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			
			// Основная информация
			ДобавляемыйОбъект.Дата = ВыборкаРемонтов.Дата;
			ДобавляемыйОбъект.Номер = ВыборкаРемонтов.Номер;
			ДобавляемыйОбъект.ПометкаУдаления = ВыборкаРемонтов.ПометкаУдаления;
			ДобавляемыйОбъект.Проведен = ВыборкаРемонтов.Проведен;
			ДобавляемыйОбъект.УИДДокументаВБазеТОиР = Строка(Заявка.УникальныйИдентификатор());
			ДобавляемыйОбъект.Подразделение = ВыборкаРемонтов.ПодразделениеКод;
			ДобавляемыйОбъект.Организация = ВыборкаРемонтов.ОрганизацияКод;
			ДобавляемыйОбъект.Комментарий = ВыборкаРемонтов.Комментарий;
			ДобавляемыйОбъект.КомментарийКСтатусу = "";
			
			Если ЗначениеЗаполнено(ВыборкаРемонтов.СтатусРемонтаПоИсполнителю) 
				И ВыборкаРемонтов.СтатусРемонтаПоИсполнителю <> Перечисления.торо_СтатусыРемонтов.Зарегистрирован Тогда
				
				// Статусы "В работе", "Приостановлен", "Отказ исполнителя", "Возобновлено после отказа".
				// Должны отображаться по исполнителю, независимо от общего статуса ремонта. 
				Если ВыборкаРемонтов.СтатусРемонтаПоИсполнителю = Перечисления.торо_СтатусыРемонтов.ВРаботе Тогда
					ДобавляемыйОбъект.СтатусДокумента = XMLСтрока("ВРаботе");
				Иначе
					ДобавляемыйОбъект.СтатусДокумента = XMLСтрока(ВыборкаРемонтов.СтатусРемонтаПоИсполнителю);
				КонецЕсли;
				ДобавляемыйОбъект.КомментарийКСтатусу = ВыборкаРемонтов.КомментарийКСтатусуИсполнителя;
				
			ИначеЕсли ВыборкаРемонтов.СтатусДокумента = Перечисления.торо_СтатусыРемонтов.ВРаботе 
				ИЛИ ВыборкаРемонтов.СтатусДокумента = Перечисления.торо_СтатусыРемонтов.Приостановлен Тогда
				
				// Ремонт в работе у кого-то другого, а у этой бригады не в работе.
				// Установим статус "УжеВыполняется" (присутствует только в мобильном приложении).
				ДобавляемыйОбъект.СтатусДокумента = XMLСтрока("УжеВыполняется");
				
			ИначеЕсли ВыборкаРемонтов.СтатусДокумента = Перечисления.торо_СтатусыРемонтов.ОтказИсполнителя Тогда
				
				// У какого-то исполнителя выставлен отказ, но не у этого. Игнорируем его.
				Если ЗначениеЗаполнено(ВыборкаРемонтов.СтатусРемонтаПоИсполнителю) Тогда
					ДобавляемыйОбъект.СтатусДокумента = XMLСтрока(ВыборкаРемонтов.СтатусРемонтаПоИсполнителю);
					ДобавляемыйОбъект.КомментарийКСтатусу = ВыборкаРемонтов.КомментарийКСтатусуИсполнителя;
				Иначе
					ДобавляемыйОбъект.СтатусДокумента = XMLСтрока("Зарегистрирован");
				КонецЕсли;
				
			Иначе
				ДобавляемыйОбъект.СтатусДокумента = XMLСтрока(ВыборкаРемонтов.СтатусДокумента);
				ДобавляемыйОбъект.КомментарийКСтатусу = ВыборкаРемонтов.КомментарийКСтатусу;
			КонецЕсли;
				
			// Ремонт оборудования
			ДобавляемыйОбъект.ID = ВыборкаРемонтов.ID;
			ДобавляемыйОбъект.ОбъектРемонта = Строка(ВыборкаРемонтов.ОбъектРемонта.УникальныйИдентификатор());
			ДобавляемыйОбъект.ВидРемонта = ВыборкаРемонтов.ВидРемонтныхРаботКод;
			ДобавляемыйОбъект.ДатаНачала = ВыборкаРемонтов.ДатаНачала;
			ДобавляемыйОбъект.ДатаОкончания = ВыборкаРемонтов.ДатаОкончания;
			ДобавляемыйОбъект.ОписаниеРемонта = ВыборкаРемонтов.ОписаниеРемонта;
			ДобавляемыйОбъект.Высота = ВыборкаРемонтов.Высота;
			ДобавляемыйОбъект.Долгота = ВыборкаРемонтов.Долгота; 
			ДобавляемыйОбъект.Широта = ВыборкаРемонтов.Широта;
			
			Если ЗначениеЗаполнено(ВыборкаРемонтов.КритичностьДефекта) Тогда
				ДобавляемыйОбъект.КритичностьДефекта = Строка(ВыборкаРемонтов.КритичностьДефекта.УникальныйИдентификатор());
			Иначе
				ДобавляемыйОбъект.КритичностьДефекта = Неопределено;
			КонецЕсли;
			
			// Данные дефекта
			ДобавляемыйОбъект.ДатаИнцидента = ВыборкаРемонтов.ДатаИнцидента;
			ДобавляемыйОбъект.КонтактноеЛицоИнициатора = Строка(ВыборкаРемонтов.КонтактноеЛицоИнициатора);
			ДобавляемыйОбъект.ДефектОписание = ВыборкаРемонтов.ДефектОписание;
			
			ДобавляемыйОбъект.Операции = ФабрикаXDTO.Создать(ОперацииТипСписок);
			ДобавляемыйОбъект.Материалы = ФабрикаXDTO.Создать(МатериалыТипСписок);
			ДобавляемыйОбъект.Квалификации = ФабрикаXDTO.Создать(КвалификацииТипСписок);
			
			Список.ЗаявкиНаРемонт.Добавить(ДобавляемыйОбъект);
		КонецЦикла;
		
		Если Не Все Тогда
			Если Не МассивОбъектов[Заявка] = Неопределено Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, МассивОбъектов[Заявка]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Список.ЗаявкиНаРемонт.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
				
КонецФункции

Функция ПолучитьИзмененияВАктах(ИДУстройства)
		
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокИзмененныхАктов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Акт");
	
	ТипСписокРемонтныхРабот = ФабрикаXDTO.Тип("android", "СписокРемонтныхРабот");
	ТипРемонтныеРаботы      = ФабрикаXDTO.Тип("android", "РемонтныеРаботы");
	ТипСписокМатериалов     = ФабрикаXDTO.Тип("android", "СписокМатериалов");
	ТипМатериалы            = ФабрикаXDTO.Тип("android", "Материалы");
	ТипСписокСотрудников    = ФабрикаXDTO.Тип("android", "СписокТрудовыхЗатратАкта");
	ТипСотрудники           = ФабрикаXDTO.Тип("android", "ТрудовыеЗатратыАкта");
	Список                  = ФабрикаXDTO.Создать(ТипСписок);
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, 1, Метаданные.Документы.торо_АктОВыполненииЭтапаРабот);
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ТекущийОбъект = Выборка.Получить();
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, Выборка);
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ТекущийОбъект) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
			Продолжить;
		КонецЕсли;
		
		Если ТекущийОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Ремонты = ТекущийОбъект.РемонтыОборудования; 
		Для каждого Ремонт Из Ремонты Цикл
			ИзмененныйАкт = ФабрикаXDTO.Создать(ТипФабрики);
			ИзмененныйАкт.УИДДокументаВБазеТОиР = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
			ИзмененныйАкт.Ссылка = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
			ИзмененныйАкт.Проведен = ТекущийОбъект.Проведен;
			ИзмененныйАкт.ПометкаУдаления = ТекущийОбъект.ПометкаУдаления;
			
			ИзмененныйАкт.Дата = ТекущийОбъект.Дата;
			ИзмененныйАкт.Подразделение = Строка(ТекущийОбъект.Подразделение.Код);
			ИзмененныйАкт.Организация = Строка(ТекущийОбъект.Организация.Код);
			ИзмененныйАкт.Комментарий = Строка(ТекущийОбъект.Комментарий);
			ИзмененныйАкт.Ответственный = Строка(ТекущийОбъект.Ответственный);
			
			ИзмененныйАкт.ЗавершитьРемонт = Ремонт.ЗавершитьРемонт;
			
			ИзмененныйАкт.ID = Ремонт.ID;
			ИзмененныйАкт.ОбъектРемонта = Строка(Ремонт.ОбъектРемонта.Код);
			ИзмененныйАкт.ВидРемонта = Строка(Ремонт.ВидРемонтныхРабот.Код);
			ИзмененныйАкт.ДатаНачала = Ремонт.ДатаНачала;
			ИзмененныйАкт.ДатаОкончания = Ремонт.ДатаОкончания;
			
			//Операции
			Операции = ФабрикаXDTO.Создать(ТипСписокРемонтныхРабот);
			
			РемРаботы = ТекущийОбъект.РемонтныеРаботы;
			Для каждого РемРабота Из РемРаботы Цикл
				
				Если Не РемРабота.РемонтыОборудования_ID = Ремонт.ID Тогда
					Продолжить;
				КонецЕсли;
				
				Операция = ФабрикаXDTO.Создать(ТипРемонтныеРаботы);;
				
				Операция.ID = РемРабота.ID;
				Операция.Родитель_ID = РемРабота.Родитель_ID;
				Операция.ID_ПараллельнойОперации = РемРабота.ID_ПараллельнойОперации;
				Операция.Количество = РемРабота.Количество;
				Операция.Картинка = РемРабота.Картинка;
				
				Префикс = "";
				
				Если ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
					Префикс = "о";
				ИначеЕсли ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					Префикс = "т";
				КонецЕсли;
				
				Операция.РемонтнаяРабота = Префикс + РемРабота.РемонтнаяРабота.Код;
				Операции.РемонтныеРаботы.Добавить(Операция);
				
			КонецЦикла;
			
			ИзмененныйАкт.Операции = Операции;
			
			// Материалы
			Материалы = ФабрикаXDTO.Создать(ТипСписокМатериалов);
			
			МатериальныеЗатраты = ТекущийОбъект.МатериальныеЗатраты;
			Для каждого Материал Из МатериальныеЗатраты Цикл
				
				Если Не Материал.РемонтыОборудования_ID = Ремонт.ID Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавляемыйМатериал = ФабрикаXDTO.Создать(ТипМатериалы);
				
				ДобавляемыйМатериал.ID =				Материал.ID;
				ДобавляемыйМатериал.Количество =		Материал.Количество;
				ДобавляемыйМатериал.Номенклатура =		Строка(Материал.Номенклатура.Код);
				ДобавляемыйМатериал.ХарактеристикаНоменклатуры = Строка(Материал.ХарактеристикаНоменклатуры.Код);
				ДобавляемыйМатериал.КоличествоЕдиниц =	Материал.КоличествоЕдиниц;
				
				Материалы.Материалы.Добавить(ДобавляемыйМатериал);
				
			КонецЦикла;
			
			ИзмененныйАкт.Материалы = Материалы;
			
			// Сотрудники
			Сотрудники = ФабрикаXDTO.Создать(ТипСписокСотрудников);
			
			ТрудовыеЗатраты = ТекущийОбъект.ТрудовыеЗатраты;
			Для Каждого Сотрудник Из ТрудовыеЗатраты Цикл
				
				Если Не Сотрудник.РемонтыОборудования_ID = Ремонт.ID Тогда
					Продолжить;
				КонецЕсли;

				ДобавляемыйСотрудник = ФабрикаXDTO.Создать(ТипСотрудники);
				
				ДобавляемыйСотрудник.ID =				Сотрудник.ID;
				ДобавляемыйСотрудник.ДатаНачала =		Сотрудник.ДатаНачала;
				ДобавляемыйСотрудник.ДатаОкончания =	Сотрудник.ДатаОкончания;
				ДобавляемыйСотрудник.Квалификация =		Строка(Сотрудник.Квалификация.Код);
				ДобавляемыйСотрудник.Сотрудник =		Строка(Сотрудник.Сотрудник.Код);
				ДобавляемыйСотрудник.ВремяРаботы =		Сотрудник.ВремяРаботы;
				
				Сотрудники.ТрудовыеЗатраты.Добавить(ДобавляемыйСотрудник);
				
			КонецЦикла;
			
			ИзмененныйАкт.ТрудовыеЗатраты = Сотрудники;
			
			Список.ИзмененныеАкты.Добавить(ИзмененныйАкт);
		КонецЦикла;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
	КонецЦикла;
	
	Если Список.ИзмененныеАкты.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусыЗаявок(СписокИдЗаявок, ИДУстройства)
	
	Подразделение = ПолучитьПодразделениеУстройства(ИДУстройства);
	Бригада = ПолучитьБригадуУстройства(ИДУстройства);
	
	Если Подразделение = Неопределено ИЛИ Бригада = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("Заявка", Новый ОписаниеТипов("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	ТаблицаЗаявок.Колонки.Добавить("УИДДокументаВБазеТОиР", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	ТаблицаЗаявок.Колонки.Добавить("ИДРемонта", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	
	Для каждого Элемент из СписокИдЗаявок.Элементы Цикл
		СсылкаНаДокумент = Документы.торо_ЗаявкаНаРемонт.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.УИДДокументаВБазеТОиР));
		НоваяСтрока = ТаблицаЗаявок.Добавить();
		НоваяСтрока.Заявка = СсылкаНаДокумент;
		НоваяСтрока.УИДДокументаВБазеТОиР = Элемент.УИДДокументаВБазеТОиР;
		НоваяСтрока.ИДРемонта = Элемент.ИДРемонта;
	КонецЦикла;
	
	МассивСтатусовДляУдаления = Новый Массив;
	МассивСтатусовДляУдаления.Добавить(Перечисления.торо_СтатусыДокументов.Отклонен);
	
	МассивСтатусовДляУдаленияПоИсполнителю = Новый Массив;
	МассивСтатусовДляУдаленияПоИсполнителю.Добавить(Перечисления.торо_СтатусыРемонтов.Отменен);
	МассивСтатусовДляУдаленияПоИсполнителю.Добавить(Перечисления.торо_СтатусыРемонтов.ОтказИсполнителя);
	МассивСтатусовДляУдаленияПоИсполнителю.Добавить(Перечисления.торо_СтатусыРемонтов.ОтказПодразделения);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаявок.Заявка КАК Заявка,
	               |	ТаблицаЗаявок.УИДДокументаВБазеТОиР КАК УИДДокументаВБазеТОиР,
	               |	ТаблицаЗаявок.ИДРемонта КАК ИДРемонта
	               |ПОМЕСТИТЬ ТаблицаЗаявок
	               |ИЗ
	               |	&ТаблицаЗаявок КАК ТаблицаЗаявок
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Заявка,
	               |	ИДРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыДокументовСрезПоследних.ИзменяемыйДокумент КАК Документ,
	               |	торо_СтатусыДокументовСрезПоследних.Статус КАК СтатусДокумента
	               |ПОМЕСТИТЬ ВТ_СтатусыДокументов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыДокументов.СрезПоследних(
	               |			,
	               |			ИзменяемыйДокумент В
	               |				(ВЫБРАТЬ
	               |					ТаблицаЗаявок.Заявка КАК Ссылка
	               |				ИЗ
	               |					ТаблицаЗаявок КАК ТаблицаЗаявок)) КАК торо_СтатусыДокументовСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыРемонтовСрезПоследних.Регистратор КАК Регистратор,
	               |	торо_СтатусыРемонтовСрезПоследних.IDРемонта КАК ИДРемонта,
	               |	торо_СтатусыРемонтовСрезПоследних.Статус КАК Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыРемонтов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтов.СрезПоследних(
	               |			,
	               |			(IDРемонта) В
	               |				(ВЫБРАТЬ
	               |					ТаблицаЗаявок.ИДРемонта КАК ИДРемонта
	               |				ИЗ
	               |					ТаблицаЗаявок КАК ТаблицаЗаявок)) КАК торо_СтатусыРемонтовСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИДРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.ИДРемонта КАК ИДРемонта,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Статус КАК Статус,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.КомментарийКСтатусу КАК КомментарийКСтатусу
	               |ПОМЕСТИТЬ ВТ_СтатусыРемонтовПоИсполнителю
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СрезПоследних(
	               |			,
	               |			(ЗаявкаНаРемонт, ИДРемонта) В
	               |					(ВЫБРАТЬ
	               |						ТаблицаЗаявок.Заявка КАК Ссылка,
	               |						ТаблицаЗаявок.ИДРемонта КАК ИДРемонта
	               |					ИЗ
	               |						ТаблицаЗаявок КАК ТаблицаЗаявок)
	               |				И Исполнитель = &Подразделение
	               |				И УточнениеИсполнителя = &Бригада) КАК торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаНаРемонт,
	               |	ИДРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТаблицаЗаявок.Заявка КАК Заявка,
	               |	ТаблицаЗаявок.УИДДокументаВБазеТОиР КАК УИДДокументаВБазеТОиР,
	               |	ТаблицаЗаявок.ИДРемонта КАК ИДРемонта,
	               |	ВЫБОР
	               |		КОГДА торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		КОГДА ЕСТЬNULL(ВТ_СтатусыРемонтовПоИсполнителю.Статус, НЕОПРЕДЕЛЕНО) В (&СтатусыДляУдаленияПоИсполнителю)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Удалить
	               |ИЗ
	               |	ТаблицаЗаявок КАК ТаблицаЗаявок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ИсполнителиПоРемонтам КАК торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот
	               |			ПО торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Ссылка
	               |				И торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.РемонтыОборудования_ID
	               |				И (торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Исполнитель = &Подразделение)
	               |				И (торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.УточнениеИсполнителя = &Бригада)
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатусыДокументов КАК ВТ_СтатусыДокументов
	               |			ПО торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = ВТ_СтатусыДокументов.Документ
	               |				И (НЕ ВТ_СтатусыДокументов.СтатусДокумента В (&СтатусыДляУдаления))
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатусыРемонтов КАК ВТ_СтатусыРемонтов
	               |			ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = ВТ_СтатусыРемонтов.ИДРемонта
	               |				И (НЕ ВТ_СтатусыРемонтов.Статус В (&СтатусыДляУдаления))
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыРемонтовПоИсполнителю КАК ВТ_СтатусыРемонтовПоИсполнителю
	               |			ПО торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = ВТ_СтатусыРемонтовПоИсполнителю.ЗаявкаНаРемонт
	               |				И торо_ЗаявкаНаРемонтРемонтыОборудования.ID = ВТ_СтатусыРемонтовПоИсполнителю.ИДРемонта
	               |		ПО ТаблицаЗаявок.Заявка = торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка
	               |			И ТаблицаЗаявок.ИДРемонта = торо_ЗаявкаНаРемонтРемонтыОборудования.ID
	               |			И (торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен)";

	Запрос.УстановитьПараметр("ТаблицаЗаявок", ТаблицаЗаявок);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Бригада", Бригада);
	Запрос.УстановитьПараметр("СтатусыДляУдаления", МассивСтатусовДляУдаления);
	Запрос.УстановитьПараметр("СтатусыДляУдаленияПоИсполнителю", МассивСтатусовДляУдаленияПоИсполнителю);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокСтатусовЗаявокНаРемонт");
	ТипФабрики = ФабрикаXDTO.Тип("android", "СтатусЗаявкиНаРемонт");
	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Пока Выборка.Следующий() Цикл
		ЭлементСписка = ФабрикаXDTO.Создать(ТипФабрики);
		ЭлементСписка.УИДДокументаВБазеТОиР = Выборка.УИДДокументаВБазеТОиР;
		ЭлементСписка.ИДРемонта = Выборка.ИДРемонта;
		ЭлементСписка.Удалить = Выборка.Удалить;
				
		Список.Элементы.Добавить(ЭлементСписка);
	КонецЦикла;
	
	Если Список.Элементы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбновляемоеРасстояние(ИДУстройства)
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат 0;
	КонецЕсли;
	
	Расстояние = Узел.ОбновляемоеРасстояние;
	
	Если Расстояние = 0 Тогда
		Возврат Константы.торо_ОбновляемоеРасстояниеПоУмолчанию.Получить();
	Иначе
		Возврат Расстояние;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗначенияКонтроляПрисутствияНаОбъекте(ИДУстройства)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат 0;
	КонецЕсли;
	
	МетодКонтроля = Узел.МетодКонтроляПрисутствияНаОбъекте;
	Погрешность = Узел.ПогрешностьГеоконтроля;
	
 	Если МетодКонтроля = Перечисления.торо_МетодыКонтроляПрисутствияНаОбъекте.ПустаяСсылка() Тогда
		МетодКонтроляПоУмолчанию = Константы.торо_МетодКонтроляПрисутствияНаОбъектеПоУмолчанию.Получить();
		Если МетодКонтроляПоУмолчанию = Перечисления.торо_МетодыКонтроляПрисутствияНаОбъекте.ПустаяСсылка() Тогда 
			МетодКонтроля = Перечисления.торо_МетодыКонтроляПрисутствияНаОбъекте.НеКонтролировать;
		Иначе 
			МетодКонтроля = МетодКонтроляПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	 
	Если Погрешность = 0  Тогда
		Погрешность = Константы.торо_ПогрешностьГеоконтроляПоУмолчанию.Получить();
	КонецЕсли; 
	
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "СтруктураЗначенийКонтроляПрисутствияНаОбъекте");
	СтруктураЗначений = ФабрикаXDTO.Создать(ТипСтруктуры);
	СтруктураЗначений.МетодКонтроля = XMLСтрока(МетодКонтроля);;
	СтруктураЗначений.ПогрешностьГеоконтроля = Погрешность;
	
	Возврат СтруктураЗначений;
	
КонецФункции

Функция ПолучитьУИДПодразделенияУстройства(ИДУстройства)
	
	Подразделение = ПолучитьПодразделениеУстройства(ИДУстройства);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Возврат  XMLСтрока(Подразделение.УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьУИДБригадыУстройства(ИДУстройства)
	
	Бригада = ПолучитьБригадуУстройства(ИДУстройства);
	Если ЗначениеЗаполнено(Бригада) Тогда
		Возврат  XMLСтрока(Бригада.УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьФайлТехКарты(ГУИД)
	
	НовыйУИД = Новый УникальныйИдентификатор(ГУИД);
	СсылкаНаФайл = Справочники.торо_ТехКартыПрисоединенныеФайлы.ПолучитьСсылку(НовыйУИД);
	
	Если ЗначениеЗаполнено(СсылкаНаФайл) Тогда
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл, Ложь);
		Если ДвоичныеДанныеФайла <> Неопределено Тогда
			Возврат Base64Строка(ДвоичныеДанныеФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "Ошибка";
		
КонецФункции

Функция ПолучитьНевыполненныеОперации(УИДЗаявкиВБазеТОиР, ИДРемонта)
	
	ОперацииТипСписок = ФабрикаXDTO.Тип("android", "СписокРемонтныхРабот");
	ОперацииТипФабрики = ФабрикаXDTO.Тип("android", "РемонтныеРаботы");
	
	Операции = ФабрикаXDTO.Создать(ОперацииТипСписок);
	
	НовыйУИД = Новый УникальныйИдентификатор(УИДЗаявкиВБазеТОиР);
	СсылкаНаЗаявку = Документы.торо_ЗаявкаНаРемонт.ПолучитьСсылку(НовыйУИД);
	Заявка = СсылкаНаЗаявку.ПолучитьОбъект();
	
	Если Заявка <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID КАК ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Количество КАК Количество,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Картинка КАК Картинка,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Исполнитель КАК Исполнитель,
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДоговорБригада КАК ДоговорБригада,
					   |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации, 
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ ВТ_ТаблицаРемонтовОборудования
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = &СсылкаНаЗаявку
		               |	И торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID = &ИДРемонта";
		
		торо_ЗаполнениеДокументов20.ДополнитьЗапросПроцентами(Запрос, Перечисления.торо_ВидДокумента.ЗаявкаНаРемонт);
		
		Запрос.УстановитьПараметр("СсылкаНаЗаявку", СсылкаНаЗаявку);
		Запрос.УстановитьПараметр("ИДРемонта", ИДРемонта);
		
		Результат = Запрос.Выполнить();
		РемРаботыСПроцентами = Результат.Выгрузить();

		МассивСтрок = РемРаботыСПроцентами.НайтиСтроки(Новый Структура("Родитель_ID", ""));
		Для каждого Строка Из МассивСтрок Цикл
			Если ТипЗнч(Строка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				СтруктураПолученная = ПроцентВыполненияПодчиненных(РемРаботыСПроцентами, Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Работа Из РемРаботыСПроцентами Цикл
			
			Операция = ФабрикаXDTO.Создать(ОперацииТипФабрики);
			
			Операция.ID = Работа.ID;
			Операция.Родитель_ID = Работа.Родитель_ID;
			Операция.Картинка = Работа.Картинка;
			Операция.ID_ПараллельнойОперации = Работа.ID_ПараллельнойОперации;
			Префикс = "";
			
			Если ТипЗнч(Работа.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				Префикс = "о";
				Операция.Количество = Окр(Работа.ПроцентВыполненияРабот*Работа.Количество/100, 2);
			ИначеЕсли ТипЗнч(Работа.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Префикс = "т";
				Операция.Количество = Окр(Работа.ПроцентВыполненияРабот*Работа.Количество/100, 2);
			КонецЕсли;
			
			Операция.РемонтнаяРабота = Префикс + Работа.РемонтнаяРабота.Код;

			Операции.РемонтныеРаботы.Добавить(Операция);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Операции;
	
КонецФункции

Функция ПолучитьКвалификацииСотрудниковБригады_Регистры(Все, ИДУстройства)
	
	Бригада = ПолучитьБригадуУстройства(ИДУстройства);
	
	Если Бригада = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокКвалификацийСотрудниковБригады");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_КвалификацииСотрудниковБригады");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Если Все Тогда
		ЗаполнитьСписокКвалификацииСотрудниковБригады(Бригада, Список, ТипФабрики);
	Иначе
		
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		ВыборкаРСКвалификации = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_КвалификацияРемонтногоПерсонала);
		ВыборкаРССоставБригады = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_СоставРемонтныхБригад);
		ЗагрузитьИзменения = Ложь;
		
		Пока ВыборкаРСКвалификации.Следующий() Цикл
			НаборЗаписей = ВыборкаРСКвалификации.Получить();
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			ЗагрузитьИзменения = Истина;
		КонецЦикла;
		
		Пока ВыборкаРССоставБригады.Следующий() Цикл
			НаборЗаписей = ВыборкаРССоставБригады.Получить();
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			ЗагрузитьИзменения = Истина;
		КонецЦикла;
		
		Если ЗагрузитьИзменения Тогда
			ЗаполнитьСписокКвалификацииСотрудниковБригады(Бригада, Список, ТипФабрики);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Список.рс_КвалификацииСотрудниковБригады.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьНаличиеАктовУБригады(ИДУстройства, ИДРемонта, АктСсылка)
	
	ЕстьАктыБригады = Ложь;
	Бригада = ПолучитьБригадуУстройства(ИДУстройства);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадам.ДокументИсточник КАК Акт,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадам.ДокументИсточник.ИзМобильного КАК ИзМобильного
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам КАК торо_СтатусыРемонтовВЗаявкахПоБригадам
	               |ГДЕ
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадам.УточнениеИсполнителя = &Бригада
	               |	И торо_СтатусыРемонтовВЗаявкахПоБригадам.ИДРемонта = &ИДРемонта
	               |	И торо_СтатусыРемонтовВЗаявкахПоБригадам.ДокументИсточник ССЫЛКА Документ.торо_АктОВыполненииЭтапаРабот";
	
	Запрос.УстановитьПараметр("Бригада", Бригада);
	Запрос.УстановитьПараметр("ИДРемонта", ИДРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПередаваемыйАкт = Документы.торо_АктОВыполненииЭтапаРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(АктСсылка));
		Если Выборка.ИзМобильного И ПередаваемыйАкт <> Выборка.Акт Тогда
			ЕстьАктыБригады = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьАктыБригады;

КонецФункции

Функция ПолучитьОперацииИЗатратыЗаявки(УИДЗаявкиВБазеТОиР, ИДРемонта)
	
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЗаявкаНаРемонт");	
	ОперацииТипСписок = ФабрикаXDTO.Тип("android", "СписокРемонтныхРабот");
	ОперацииТипФабрики = ФабрикаXDTO.Тип("android", "РемонтныеРаботы");
	МатериалыТипСписок = ФабрикаXDTO.Тип("android", "СписокМатериалов");
	МатериалыТипФабрики = ФабрикаXDTO.Тип("android", "Материалы");
	КвалификацииТипСписок = ФабрикаXDTO.Тип("android", "СписокТрудовыхЗатрат");
	КвалификацииТипФабрики = ФабрикаXDTO.Тип("android", "ТрудовыеЗатраты");
	
	ТабЧастиЗаявки = ФабрикаXDTO.Создать(ТипФабрики);
	
	НовыйУИД = Новый УникальныйИдентификатор(УИДЗаявкиВБазеТОиР);
	СсылкаНаЗаявку = Документы.торо_ЗаявкаНаРемонт.ПолучитьСсылку(НовыйУИД);
	Заявка = СсылкаНаЗаявку.ПолучитьОбъект();
	
	Если Заявка <> Неопределено Тогда
		
		// Операции
		Операции = ФабрикаXDTO.Создать(ОперацииТипСписок);
		РемРаботы = Заявка.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ИДРемонта));
		
		Для Каждого Работа Из РемРаботы Цикл
			
			Операция = ФабрикаXDTO.Создать(ОперацииТипФабрики);
			
			Операция.ID = Работа.ID;
			Операция.Родитель_ID = Работа.Родитель_ID;
			Операция.ID_ПараллельнойОперации = Работа.ID_ПараллельнойОперации;
			Операция.Количество = Работа.Количество;
			Операция.Картинка = Работа.Картинка;
			
			Префикс = "";
			
			Если ТипЗнч(Работа.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				Префикс = "о";
			ИначеЕсли ТипЗнч(Работа.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Префикс = "т";
			КонецЕсли;
			
			Операция.РемонтнаяРабота = Префикс + Работа.РемонтнаяРабота.Код;
			
			Если ТипЗнч(Работа.Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
				Операция.Исполнитель = Строка(Работа.Исполнитель);
				Операция.Бригада = Строка(Работа.ДоговорБригада);
				Операция.ИсполнительКонтрагент = Истина; 
			Иначе
				Операция.Исполнитель = ?(ЗначениеЗаполнено(Работа.Исполнитель),XMLСтрока(Работа.Исполнитель.УникальныйИдентификатор()),Неопределено);
				Операция.Бригада = ?(ЗначениеЗаполнено(Работа.ДоговорБригада),XMLСтрока(Работа.ДоговорБригада.УникальныйИдентификатор()),Неопределено);
				Операция.ИсполнительКонтрагент = Ложь; 
			КонецЕсли;
			
			Операции.РемонтныеРаботы.Добавить(Операция);
			
		КонецЦикла;
		
		ТабЧастиЗаявки.Операции = Операции;
		
		// Материалы
		Материалы = ФабрикаXDTO.Создать(МатериалыТипСписок);
		
		МатЗатраты = Заявка.МатериальныеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ИДРемонта));;
		
		Для Каждого Материал Из МатЗатраты Цикл
				
			Ном = ФабрикаXDTO.Создать(МатериалыТипФабрики);
			
			Ном.ID = Материал.ID;
			Ном.Количество = Материал.Количество;
			Ном.Номенклатура = Материал.Номенклатура.Код;
			Ном.ХарактеристикаНоменклатуры = Материал.ХарактеристикаНоменклатуры.Код;
			Ном.КоличествоЕдиниц = Материал.КоличествоЕдиниц;
			
			Материалы.Материалы.Добавить(Ном);
			
		КонецЦикла;
		
		ТабЧастиЗаявки.Материалы = Материалы;
		
		// Квалификации
		Квалификации = ФабрикаXDTO.Создать(КвалификацииТипСписок);
		
		ТрудЗатраты = Заявка.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ИДРемонта));;
		
		Для Каждого Затрата Из ТрудЗатраты Цикл
				
			Кв = ФабрикаXDTO.Создать(КвалификацииТипФабрики);
			
			Кв.ID = Затрата.ID;
			Кв.ВремяРаботы = Затрата.ВремяРаботы;
			Кв.Квалификация = Затрата.Квалификация.Код;
			Кв.Количество = Затрата.Количество;
			
			Квалификации.ТрудовыеЗатраты.Добавить(Кв);
			
		КонецЦикла;
		
		ТабЧастиЗаявки.Квалификации = Квалификации;
		
	КонецЕсли;
	
	Возврат ТабЧастиЗаявки;
	
КонецФункции

Функция ПолучитьКоличествоПакетов(ИДУстройства, ИДСтруктуры, ИмяОбъектаМетаданных, ВыполнитьРегистрацию)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИДСтруктуры) Тогда 
		СтруктураИерархии = Справочники.торо_СтруктурыОР.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтруктуры));
		Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
			ВызватьИсключение "Не найдена структура иерархии";
		КонецЕсли;

		Если ИмяОбъектаМетаданных = "торо_ПорядокОРПоИерархии" Тогда
			ТаблицаИзменений = "РегистрСведений.торо_ПорядокОРПоИерархии";
			Если ВыполнитьРегистрацию Тогда 
				ПланыОбмена.mobileBrigades.РегистрацияПорядокОР(Узел, СтруктураИерархии);
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ИмяОбъектаМетаданных = "торо_ИзмеряемыеПоказателиОбъектовРемонта_РС" Тогда
		ТаблицаИзменений = "РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта";
		Если ВыполнитьРегистрацию Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта);
		КонецЕсли;	
	ИначеЕсли ИмяОбъектаМетаданных = "торо_ПараметрыНаработкиОбъектовРемонта_РС" Тогда
		ТаблицаИзменений = "РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта";
		Если ВыполнитьРегистрацию Тогда
			ВыполнитьРегистрациюПараметровНаработкиОР(Узел);
		КонецЕсли;
	ИначеЕсли ИмяОбъектаМетаданных = "торо_ВерсииТехКарт_РС" Тогда
		ТаблицаИзменений = "РегистрСведений.торо_ВерсииТехКарт";
		Если ВыполнитьРегистрацию Тогда
			ВыполнитьРегистрациюВерсийТК(Узел);
		КонецЕсли;
	ИначеЕсли ИмяОбъектаМетаданных = "торо_ОбщиеПрисоединенныеФайлы" Тогда
		ТаблицаИзменений = "РегистрСведений.торо_ОбщиеПрисоединенныеФайлы";
		Если ВыполнитьРегистрацию Тогда
			ВыполнитьРегистрациюОбщихФайлов(Узел);
		КонецЕсли;
	ИначеЕсли НЕ Метаданные.Справочники.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда 
		ТаблицаИзменений = "Справочник." + ИмяОбъектаМетаданных;
		Если ВыполнитьРегистрацию Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.Справочники[ИмяОбъектаМетаданных]);
		КонецЕсли;
	ИначеЕсли НЕ Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
		ТаблицаИзменений = "ПланВидовХарактеристик." + ИмяОбъектаМетаданных;
		Если ВыполнитьРегистрацию Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.ПланыВидовХарактеристик[ИмяОбъектаМетаданных]);
		КонецЕсли;
	ИначеЕсли НЕ Метаданные.РегистрыСведений.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
		ТаблицаИзменений = "РегистрСведений." + ИмяОбъектаМетаданных;
		Если ВыполнитьРегистрацию Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.РегистрыСведений[ИмяОбъектаМетаданных]);
		КонецЕсли;
	КонецЕсли;
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	                |	КОЛИЧЕСТВО(ТаблицаИзменений.Узел) КАК КоличествоИзмененных
	                |ИЗ
	                |	" + ТаблицаИзменений + ".Изменения КАК ТаблицаИзменений
	                |ГДЕ
	                |	ТаблицаИзменений.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Результат = Запрос.Выполнить();
	КоличествоИзмененных = Результат.Выгрузить()[0].КоличествоИзмененных;
	
	КоличествоПакетов = Окр(КоличествоИзмененных/РазмерПакета+0.5,0,0);
	
	Возврат КоличествоПакетов;
	
КонецФункции

Процедура ВыполнитьРегистрациюВерсийТК(Узел) 
	
	Выборка = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(); 
	НаборЗаписей = РегистрыСведений.торо_ВерсииТехКарт.СоздатьНаборЗаписей();
	
	Для каждого ТекущийОбъект из Выборка Цикл
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Период);
		НаборЗаписей.Отбор.ИдентификаторТехКарты.Установить(ТекущийОбъект.ИдентификаторТехКарты);
		НаборЗаписей.Прочитать();
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюОбщихФайлов(Узел)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОбщиеПрисоединенныеФайлы.Файл КАК Файл,
	               |	торо_ОбщиеПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеПрисоединенныеФайлы КАК торо_ОбщиеПрисоединенныеФайлы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	               |		ПО торо_ОбщиеПрисоединенныеФайлы.Файл = Файлы.Ссылка
	               |ГДЕ
	               |	НЕ Файлы.ПометкаУдаления
	               |	И (ТИПЗНАЧЕНИЯ(торо_ОбщиеПрисоединенныеФайлы.ВладелецФайла) = ТИП(Справочник.торо_ОбъектыРемонта)
	               |			ИЛИ ТИПЗНАЧЕНИЯ(торо_ОбщиеПрисоединенныеФайлы.ВладелецФайла) = ТИП(Справочник.торо_ТиповыеОР)
	               |			ИЛИ ТИПЗНАЧЕНИЯ(торо_ОбщиеПрисоединенныеФайлы.ВладелецФайла) = ТИП(Справочник.торо_ТехКарты))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.торо_ОбщиеПрисоединенныеФайлы.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей.Отбор.Файл.Установить(Выборка.Файл);
		НаборЗаписей.Отбор.ВладелецФайла.Установить(Выборка.ВладелецФайла);
		НаборЗаписей.Прочитать();
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюПараметровНаработкиОР(Узел)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта
		|ПОМЕСТИТЬ вт_ОР
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка ССЫЛКА Справочник.торо_ОбъектыРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Период КАК Период,
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель КАК Показатель
		|ИЗ
		|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
		|			,
		|			ОбъектРемонта В
		|				(ВЫБРАТЬ
		|					вт_ОР.ОбъектРемонта КАК ОбъектРемонта
		|				ИЗ
		|					вт_ОР КАК вт_ОР)) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(Выборка.ОбъектРемонта);
		НаборЗаписей.Отбор.Показатель.Установить(Выборка.Показатель);
		НаборЗаписей.Прочитать();
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

Функция ПервоначальнаяРегистрацияВыполнена(ИДУстройства)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Узел.РегистрацияНачальныхДанных;
	
КонецФункции

Функция УдалитьРегистрациюПринятыхОбъектов(ИДУстройства, ИДСтруктуры, ИмяОбъектаМетаданных, СписокПринятыхОбъектов)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось найти узел плана обмена!");
		Возврат Ложь;
	КонецЕсли;
	
	МассивПринятыхОбъектов = СтрРазделить(СписокПринятыхОбъектов, ";", Ложь);

	Если ИмяОбъектаМетаданных = "торо_ИзмеряемыеПоказателиОбъектовРемонта_РС" Тогда
		УдалитьРегистрацию_Показатели(Узел, МассивПринятыхОбъектов);	
	ИначеЕсли ИмяОбъектаМетаданных = "торо_ПараметрыНаработкиОбъектовРемонта_РС" Тогда
		УдалитьРегистрацию_Наработка(Узел, МассивПринятыхОбъектов);
	ИначеЕсли ИмяОбъектаМетаданных = "торо_МаршрутыРегламентныхМероприятий" Тогда
		УдалитьРегистрацию_МаршрутыРМ(Узел, МассивПринятыхОбъектов);
	ИначеЕсли ИмяОбъектаМетаданных = "торо_ВыходныеДокументы" Тогда
		УдалитьРегистрацию_ВыходныеДокументы(Узел, МассивПринятыхОбъектов);
	ИначеЕсли ИмяОбъектаМетаданных = "торо_ВерсииТехКарт_РС" Тогда
		УдалитьРегистрацию_ВерсииТК(Узел, МассивПринятыхОбъектов);
	ИначеЕсли ИмяОбъектаМетаданных = "торо_ОбщиеПрисоединенныеФайлы" Тогда
		УдалитьРегистрацию_ОбщиеФайлы(Узел, МассивПринятыхОбъектов);
	ИначеЕсли НЕ Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
		УдалитьРегистрацию_ПВХ(Узел, ИмяОбъектаМетаданных, МассивПринятыхОбъектов);
	ИначеЕсли НЕ Метаданные.Справочники.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
		УдалитьРегистрацию_Справочник(Узел, ИмяОбъектаМетаданных, МассивПринятыхОбъектов);	
	Иначе
		
		СтруктураИерархии = ?(ЗначениеЗаполнено(ИДСтруктуры), Справочники.торо_СтруктурыОР.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтруктуры)), Неопределено);
		Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
			ВызватьИсключение "Не найдена структура иерархии";
		КонецЕсли;		
		
		Если ИмяОбъектаМетаданных = "торо_ПорядокОРПоИерархии" Тогда 
			УдалитьРегистрацию_ПорядокОР(Узел, СтруктураИерархии, МассивПринятыхОбъектов);		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

Процедура УдалитьРегистрацию_ОбщиеФайлы(Узел, МассивПринятыхОбъектов)
	
	Для каждого Строка Из МассивПринятыхОбъектов Цикл
		Попытка
			МассивГУИД = СтрРазделить(Строка, "_", Ложь);
			Файл = Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[1]));
			Если МассивГУИД[0] = "ТОР" Тогда 
				ВладелецФайла = Справочники.торо_ТиповыеОР.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[2]));
			ИначеЕсли МассивГУИД[0] = "ТК" Тогда
				ВладелецФайла = Справочники.торо_ТехКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[2]));	
			Иначе    
				ВладелецФайла = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[2]));
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.торо_ОбщиеПрисоединенныеФайлы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Файл.Установить(Файл);
			НаборЗаписей.Отбор.ВладелецФайла.Установить(ВладелецФайла);
			НаборЗаписей.Прочитать();
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей); 
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);	
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьРегистрацию_ВерсииТК(Узел, МассивПринятыхОбъектов) 
	
	Для каждого Строка Из МассивПринятыхОбъектов Цикл 
		Попытка 
			МассивГУИД = СтрРазделить(Строка, "_", Ложь);
			ИдентификаторТехКарты = Справочники.торо_ИдентификаторыТехКарт.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[0]));
			Период = Дата(МассивГУИД[1]);
			
			НаборЗаписей = РегистрыСведений.торо_ВерсииТехКарт.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Период);
            НаборЗаписей.Отбор.ИдентификаторТехКарты.Установить(ИдентификаторТехКарты);
			НаборЗаписей.Прочитать();
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);	
		КонецПопытки; 
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьРегистрацию_ПВХ(Узел, ИмяОбъектаМетаданных, МассивПринятыхОбъектов)
	
	Для каждого ГУИД Из МассивПринятыхОбъектов Цикл
		Попытка
			Ссылка = ПланыВидовХарактеристик[ИмяОбъектаМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ссылка);
		Исключение 
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);	
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьРегистрацию_Справочник(Узел, ИмяОбъектаМетаданных, МассивПринятыхОбъектов) 
	
	Для каждого ГУИД Из МассивПринятыхОбъектов Цикл
		Попытка
			Ссылка = Справочники[ИмяОбъектаМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ссылка);
		Исключение 
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);	
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

Процедура УдалитьРегистрацию_ПорядокОР(Узел, СтруктураИерархии, МассивПринятыхОбъектов)
	
	Для каждого ГУИД Из МассивПринятыхОбъектов Цикл	
		Попытка
			ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД)); 
			НаборЗаписей = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
			НаборЗаписей.Отбор.СтруктураИерархии.Установить(СтруктураИерархии);
			НаборЗаписей.Прочитать();
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		Исключение 
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьРегистрацию_Показатели(Узел, МассивПринятыхОбъектов)
	
	Для каждого Строка Из МассивПринятыхОбъектов Цикл	
		Попытка
			МассивГУИД = СтрРазделить(Строка, "_", Ложь);
			Если МассивГУИД[0] = "ТОР" Тогда 
				ОбъектРемонта = Справочники.торо_ТиповыеОР.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[1]));
			Иначе
				ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[1]));
			КонецЕсли;
			Показатель = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[2]));
			
			НаборЗаписей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
			НаборЗаписей.Отбор.Показатель.Установить(Показатель);
			НаборЗаписей.Прочитать();
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		Исключение 
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьРегистрацию_Наработка(Узел, МассивПринятыхОбъектов)
	
	ТаблицаОбъектовСПоказателями = Новый ТаблицаЗначений;
	ТаблицаОбъектовСПоказателями.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаОбъектовСПоказателями.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПараметрыВыработкиОС"));

	Для каждого Строка Из МассивПринятыхОбъектов Цикл	
		МассивГУИД = СтрРазделить(Строка, "_", Ложь);
		НСтр = ТаблицаОбъектовСПоказателями.Добавить();
		НСтр.ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[0]));
		НСтр.Показатель = Справочники.ПараметрыВыработкиОС.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[1]));
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабОбъектовСПоказателями.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТабОбъектовСПоказателями.Показатель КАК Показатель
	               |ПОМЕСТИТЬ ВТ_ОРиПоказатели
	               |ИЗ
	               |	&ТаблицаОбъектовСПоказателями КАК ТабОбъектовСПоказателями
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПараметрыНаработкиОбъектовРемонтаИзменения.Период КАК Период,
	               |	торо_ПараметрыНаработкиОбъектовРемонтаИзменения.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ПараметрыНаработкиОбъектовРемонтаИзменения.Показатель КАК Показатель
	               |ИЗ
	               |	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.Изменения КАК торо_ПараметрыНаработкиОбъектовРемонтаИзменения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОРиПоказатели КАК ВТ_ОРиПоказатели
	               |		ПО торо_ПараметрыНаработкиОбъектовРемонтаИзменения.ОбъектРемонта = ВТ_ОРиПоказатели.ОбъектРемонта
				   |        И  торо_ПараметрыНаработкиОбъектовРемонтаИзменения.Показатель = ВТ_ОРиПоказатели.Показатель
	               |ГДЕ
	               |	торо_ПараметрыНаработкиОбъектовРемонтаИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("ТаблицаОбъектовСПоказателями", ТаблицаОбъектовСПоказателями);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Попытка	
			НаборЗаписей = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(Выборка.ОбъектРемонта);
			НаборЗаписей.Отбор.Показатель.Установить(Выборка.Показатель);
			НаборЗаписей.Прочитать();
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		Исключение 
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьРегистрацию_МаршрутыРМ(Узел, МассивПринятыхОбъектов) 
	
	Для каждого Строка Из МассивПринятыхОбъектов Цикл	
		Попытка
			МассивГУИД = СтрРазделить(Строка, "_", Ложь);
			СписокОбъектов = Справочники.торо_СписокОбъектовРегламентногоМероприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[0]));
			ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[1]));
			НаборЗаписей = РегистрыСведений.торо_МаршрутыРегламентныхМероприятий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СписокОбъектов.Установить(СписокОбъектов);
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
			НаборЗаписей.Прочитать();
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);	
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьРегистрацию_ВыходныеДокументы(Узел, МассивПринятыхОбъектов) 
	
	Для каждого Строка Из МассивПринятыхОбъектов Цикл	
		Попытка
			МассивГУИД = СтрРазделить(Строка, "_", Ложь);
			СписокОбъектов = Справочники.торо_СписокОбъектовРегламентногоМероприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[0]));
			ВидМероприятия = Справочники.торо_ВидыРемонтов.ПолучитьСсылку(Новый УникальныйИдентификатор(МассивГУИД[1]));
			ВыходнойДокумент = Перечисления.торо_ВидыВыходныхДокументов[МассивГУИД[2]];
			
			НаборЗаписей = РегистрыСведений.торо_ВыходныеДокументы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СписокОбъектов.Установить(СписокОбъектов);
			НаборЗаписей.Отбор.ВидМероприятия.Установить(ВидМероприятия);
			НаборЗаписей.Отбор.ВыходнойДокумент.Установить(ВыходнойДокумент);
			НаборЗаписей.Прочитать();
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обмен с мобильным приложением", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось снять регистрацию с объекта по причине: " + ОписаниеОшибки);	
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Загрузка данных из МП

Функция ПередатьАкт(Акт, ПропуститьПроверки, ИДУстройства)
	
	Подразделение = ПолучитьПодразделениеУстройства(ИДУстройства);
	Бригада = ПолучитьБригадуУстройства(ИДУстройства);
	
	Отказ = Ложь;
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();
	
	МетаданныеДокумента = Метаданные.Документы.торо_АктОВыполненииЭтапаРабот;
	
	Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
		СтруктураОтвета.Успех = Ложь;
		ТекстСообщения = НСтр("ru='Нет прав на чтение документов ""Акт о выполнении этапа работ"".'");
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	СсылкаНаДокумент = Документы.торо_АктОВыполненииЭтапаРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(Акт.Ссылка));
	НовыйДок = СсылкаНаДокумент.ПолучитьОбъект();
	ЭтоНовыйДокумент = Ложь;
	Если НовыйДок <> Неопределено Тогда
		Если НЕ ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на изменение документов ""Акт о выполнении этапа работ"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		// очистка тч
		НовыйДок.РемонтыОборудования.Очистить();
		НовыйДок.РемонтныеРаботы.Очистить();
		НовыйДок.МатериальныеЗатраты.Очистить();
		НовыйДок.ТрудовыеЗатраты.Очистить();
		НовыйДок.ИсполнителиПоРемонтам.Очистить();
	Иначе
		Если НЕ ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на добавление документов ""Акт о выполнении этапа работ"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок = Документы.торо_АктОВыполненииЭтапаРабот.СоздатьДокумент();
		НовыйДок.УстановитьСсылкуНового(СсылкаНаДокумент);
		ЭтоНовыйДокумент = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		СтруктураОтвета.Успех = Ложь;
		Возврат СтруктураОтвета;
	КонецЕсли;

	// заполнение тч
	// Операции
	МассивТО = Новый Массив();
	Для Каждого Операция Из Акт.Операции.РемонтныеРаботы Цикл
		
		НС = НовыйДок.РемонтныеРаботы.Добавить();
		
		НС.ID =						 Операция.ID;
		НС.Родитель_ID =			 Операция.Родитель_ID;
		НС.ID_ПараллельнойОперации = Операция.ID_ПараллельнойОперации;
		НС.Количество =				 Операция.Количество;
		НС.Картинка =				 Операция.Картинка;
		
		НС.РемонтыОборудования_ID = Акт.ID;
		
		Префикс = Лев(Операция.РемонтнаяРабота, 1);
		Код = Прав(Операция.РемонтнаяРабота, СтрДлина(Операция.РемонтнаяРабота) - 1);
		
		Ссылка = Неопределено;
		
		Если Префикс = "о" Тогда
			Ссылка = Справочники.торо_ТехнологическиеОперации.НайтиПоКоду(Код);
			МассивТО.Добавить(Операция.ID);
		ИначеЕсли Префикс = "т" Тогда
			Ссылка = Справочники.торо_ИдентификаторыТехКарт.НайтиПоКоду(Код);
		КонецЕсли;
		
		НС.РемонтнаяРабота = Ссылка;
		Если ТипЗнч(НС.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			НС.Исполнитель = Подразделение;
			НС.ДоговорБригада = Бригада;
		КонецЕсли;
		
		НС.ПроцентВыполненияРабот = 100;
		НС.Выполнено = Истина;
		
	КонецЦикла;
	
	// Материалы
	Для Каждого Материал Из Акт.Материалы.Материалы Цикл
		
		НС = НовыйДок.МатериальныеЗатраты.Добавить();
		
		НС.ID =					        Материал.ID;
		НС.Количество =			        Материал.Количество;
		НС.Номенклатура =		        Справочники.Номенклатура.НайтиПоКоду(Материал.Номенклатура);
		НС.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(Материал.ХарактеристикаНоменклатуры);
		НС.КоличествоЕдиниц =	        Материал.КоличествоЕдиниц;
		
		НС.РемонтыОборудования_ID = Акт.ID;
		
	КонецЦикла;
	
	// Сотрудники
	Если Акт.ТрудовыеЗатраты.ТрудовыеЗатраты.Количество() = 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_СоставРемонтныхБригадСрезПоследних.Исполнитель КАК Исполнитель,
		               |	торо_СоставРемонтныхБригадСрезПоследних.Квалификация КАК Квалификация
		               |ИЗ
		               |	РегистрСведений.торо_СоставРемонтныхБригад.СрезПоследних(, РемонтнаяБригада = &Бригада) КАК торо_СоставРемонтныхБригадСрезПоследних
		               |ГДЕ
		               |	НЕ торо_СоставРемонтныхБригадСрезПоследних.ИсключенИзБригады";
		
		Запрос.УстановитьПараметр("Бригада", Бригада);
		ИсполнителиБригады = Запрос.Выполнить().Выгрузить();
		
		ВремяРаботы = Акт.ДатаОкончания - Акт.ДатаНачала;
		Для каждого ТехОперация Из МассивТО Цикл
			Для каждого Сотрудник Из ИсполнителиБригады Цикл
				
				НС = НовыйДок.ТрудовыеЗатраты.Добавить();
				
				НС.ID =					ТехОперация;
				НС.ДатаНачала =			Акт.ДатаНачала;
				НС.ДатаОкончания =		Акт.ДатаОкончания;
				НС.Квалификация =		Сотрудник.Квалификация;
				НС.Сотрудник =          Сотрудник.Исполнитель;
				НС.ВремяРаботы =		ВремяРаботы;
				НС.КТУ =                1;
				
				НС.РемонтыОборудования_ID = Акт.ID;
				
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Сотрудник Из Акт.ТрудовыеЗатраты.ТрудовыеЗатраты Цикл
			
			НС = НовыйДок.ТрудовыеЗатраты.Добавить();
			
			НС.ID =					Сотрудник.ID;
			НС.ДатаНачала =			Сотрудник.ДатаНачала;
			НС.ДатаОкончания =		Сотрудник.ДатаОкончания;
			НС.Квалификация =		Справочники.торо_КвалификацииРемонтногоПерсонала.НайтиПоКоду(Сотрудник.Квалификация);
			НС.Сотрудник =          НайтиСотрудника(Сотрудник.Сотрудник);
			НС.ВремяРаботы =		Сотрудник.ВремяРаботы;
			НС.КТУ =                1;
			
			НС.РемонтыОборудования_ID = Акт.ID;
			
		КонецЦикла;
	КонецЕсли;
	
	// Исполнители
	Если ЗначениеЗаполнено(Подразделение) Тогда
		НС = НовыйДок.ИсполнителиПоРемонтам.Добавить();
		НС.РемонтыОборудования_ID = Акт.ID;
		НС.Исполнитель = Подразделение;
		НС.УточнениеИсполнителя = Бригада;
		НС.ДатаНачала = Акт.ДатаНачала;
		НС.ДатаОкончания = Акт.ДатаОкончания;
		НС.ВсеРаботыИсполнителяЗавершены = Акт.ЗавершитьРемонт;
	КонецЕсли;
	
	УИДЗаявки = Акт.УИДДокументаВБазеТОиР;
	Заявка = Документы.торо_ЗаявкаНаРемонт.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДЗаявки));
	
	ДО = НовыйДок.ДокументыОснования.Добавить();
	ДО.ДокументОснование = Заявка;
	
	НовыйДок.ПометкаУдаления = Ложь;
	НовыйДок.ИзМобильного = Истина;
	НовыйДок.Дата = Акт.Дата;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(Акт.Подразделение);
	НовыйДок.Организация = Справочники.Организации.НайтиПоКоду(Акт.Организация);
	НовыйДок.ДатыИзмененыВручную = Акт.ДатыИзмененыВручную;
	НовыйДок.Комментарий = НСтр("ru='Создан из мобильного приложения.'"); 
	НовыйДок.Ответственный = НайтиПользователя(Акт.Ответственный);
	
	Ремонт = НовыйДок.РемонтыОборудования.Добавить();
	Ремонт.ID = Акт.ID;
	Ремонт.ОбъектРемонта = НайтиОРпоКоду(Акт.ОбъектРемонта);
	Ремонт.ВидРемонтныхРабот = Справочники.торо_ВидыРемонтов.НайтиПоКоду(Акт.ВидРемонта);
	Ремонт.ДатаНачала = Акт.ДатаНачала;
	Ремонт.ДатаОкончания = Акт.ДатаОкончания;
	Ремонт.Комментарий = Акт.Комментарий;
	Ремонт.ДокументИсточник = Заявка;
	
	СтруктураОтбора = Новый Структура("РемонтыОборудования_ID, ВсеРаботыИсполнителяЗавершены", Акт.ID, Истина);
	ИсполнителиЗавершившиеРаботы = НовыйДок.ИсполнителиПоРемонтам.Выгрузить(СтруктураОтбора);
	Ремонт.ЗавершитьРемонт = торо_РаботаСоСтатусамиДокументовСервер.РемонтЗавершен(Акт.ID, ИсполнителиЗавершившиеРаботы);
	
	НовыйДок.ЗавершитьРемонтныеРаботы = Ремонт.ЗавершитьРемонт;
	
	Если ЭтоНовыйДокумент Тогда
		НовыйДок.Заполнить(Неопределено);
	КонецЕсли;
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьАкта");
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПроверитьФизЛицоПользователя(ИмяПользователя)
	
	ТекПользователь = НайтиПользователя(ИмяПользователя);
	
	Если ЗначениеЗаполнено(ТекПользователь) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекПользователь, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиСотрудника(КодСотрудника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	Сотрудники.Ссылка КАК Сотрудник
	                |ИЗ
	                |	Справочник.Сотрудники КАК Сотрудники
	                |ГДЕ
	                |	Сотрудники.Код = &КодСотрудника";
	
	Запрос.УстановитьПараметр("КодСотрудника", КодСотрудника);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сотрудник;
	Иначе 
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции

Процедура ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, ИмяСобытияЖурналаРегистрации)
	
	СтруктураОтвета.Успех = Ложь;
	Проверка = НовыйДок.ПроверитьЗаполнение();
	
	Если Проверка Тогда
		Попытка	
			НовыйДок.Записать(РежимЗаписиДокумента.Запись);	
			СтруктураОтвета.Успех = Истина;
			СтруктураОтвета.НомерДокумента = НовыйДок.Номер;
			
			Попытка	
				НовыйДок.Записать(РежимЗаписиДокумента.Проведение);		
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
				
				ТекстСообщения = НСтр("ru='Не удалось провести документ, подробнее см. в журнале регистрации в базе ТОиР.'");
				ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
			ТекстСообщения = НСтр("ru='Не удалось записать документ, подробнее см. в журнале регистрации в базе ТОиР.'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;

	МассивСообщений = ПолучитьСообщенияПользователю(Истина);
	Для каждого СообщениеПользователю из МассивСообщений Цикл
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, СообщениеПользователю.Текст);
	КонецЦикла;

КонецПроцедуры

Процедура ПопробоватьЗаписатьЗаявку(НовыйДок, СтруктураОтвета)
	
	Проверка = НовыйДок.ПроверитьЗаполнение();
	
	Если Проверка Тогда
		Попытка	
			НовыйДок.Записать(РежимЗаписиДокумента.Запись);	
			
			Попытка	
				НовыйДок.Записать(РежимЗаписиДокумента.Проведение);		
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ОбменМП.АвтоформированиеЗаявки", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
				
				ТекстСообщения = НСтр("ru='Не удалось провести заявку на ремонт, подробнее см. в журнале регистрации в базе ТОиР.'");
				ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОбменМП.АвтоформированиеЗаявки",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
			ТекстСообщения = НСтр("ru='Не удалось записать заявку на ремонт, подробнее см. в журнале регистрации в базе ТОиР.'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;

	МассивСообщений = ПолучитьСообщенияПользователю(Истина);
	Для каждого СообщениеПользователю из МассивСообщений Цикл
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, "Ошибка формирования заявки: " + СообщениеПользователю.Текст);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЗаявку(НоваяЗаявка, ДокументОснование, ИДУстройства)
	
	ДатаЗаявки = ТекущаяДата();
	Если ДатаЗаявки <= ДокументОснование.Дата Тогда
		ДатаЗаявки = ДокументОснование.Дата + 1;
	КонецЕсли;
	
	НоваяЗаявка.Заполнить(ДокументОснование);
	НоваяЗаявка.Дата = ДатаЗаявки;
	НоваяЗаявка.ИзМобильного = Истина;
	Для каждого Ремонт ИЗ НоваяЗаявка.РемонтыОборудования Цикл
		Ремонт.ДатаНачала = ДатаЗаявки;
		Ремонт.ДатаОкончания = ДатаЗаявки;
		Если НоваяЗаявка.ИсполнителиПоРемонтам.Количество() > 0 Тогда
			Для каждого Строка Из НоваяЗаявка.ИсполнителиПоРемонтам Цикл
				Строка.Исполнитель = ПолучитьПодразделениеУстройства(ИДУстройства);
				Строка.УточнениеИсполнителя = ПолучитьБригадуУстройства(ИДУстройства); 
			КонецЦикла;
		Иначе
			НС = НоваяЗаявка.ИсполнителиПоРемонтам.Добавить();
			НС.РемонтыОборудования_ID = Ремонт.ID;
			НС.Исполнитель = ПолучитьПодразделениеУстройства(ИДУстройства);
			НС.УточнениеИсполнителя = ПолучитьБригадуУстройства(ИДУстройства);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция WriteObjectPhoto(Code, Photo, Comment, Type)
	
	Попытка
		ВладелецФайла = Неопределено;
		НаименованиеФайла = "";
		
		//Если Type = "ОР" Тогда // Изображение объекта
		//КонецЕсли;
		
		ДвоичныеДанные = Base64Значение(Photo);
		Картинка = Новый Картинка(ДвоичныеДанные);
		Расширение = Строка(Картинка.Формат());
		ВрХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		ПараметрыФайла                    = РаботаСФайлами.ПараметрыДобавленияФайла(Новый Структура());
		ПараметрыФайла.Автор              = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ВладелецФайлов     = ВладелецФайла;
		ПараметрыФайла.ИмяБезРасширения   = НаименованиеФайла;
		ПараметрыФайла.РасширениеБезТочки = Расширение;
		
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ВрХранилище); 
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьТехническойДокументации",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";
	
КонецФункции

Функция ЗаполненоПодразделение(ИДУстройства)
	Подразделение = ПолучитьПодразделениеУстройства(ИДУстройства);
	Возврат Не Подразделение = Неопределено;
КонецФункции

Функция ПередатьМестоположения(СписокКоординат)
	Попытка
		НЗ = РегистрыСведений.торо_ПередвиженияМобильныхБригад.СоздатьНаборЗаписей();
		
		Для Каждого Координаты Из СписокКоординат.Координаты Цикл
			Пользователь = НайтиПользователя(Координаты.Пользователь);
			Если ЗначениеЗаполнено(Пользователь) Тогда
				НС = НЗ.Добавить();
				
				НС.Период = Координаты.Период;
				НС.Пользователь = Пользователь;
				НС.Широта = Координаты.Широта;
				НС.Долгота = Координаты.Долгота;
				НС.Высота = Координаты.Высота;
				НС.ВидУстановкиМестоположения = Перечисления.торо_ВидУстановкиМестоположения[Координаты.ВидУстановкиМестоположения];
				
				Если НС.ВидУстановкиМестоположения = Перечисления.торо_ВидУстановкиМестоположения.ПроведениеАкта Тогда
					НС.СозданныйДокумент = Документы.торо_АктОВыполненииЭтапаРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(Координаты.Документ));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НЗ.Записать(Ложь);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
			Метаданные.WebСервисы.ExchangeMobileBrigades,,ОписаниеОшибки());
		Возврат "fail";
	КонецПопытки;
	
	Возврат "ok";
КонецФункции

Функция ПередатьФайлыИзАкта(АктСсылка, ИдентификаторПакета, Комментарий)
		
	Попытка 
		
		ВладелецФайла = Документы.торо_АктОВыполненииЭтапаРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(АктСсылка));
		
		Если ВладелецФайла.ПолучитьОбъект() = Неопределено Тогда
			Возврат "Error";
		КонецЕсли;
		
		ПараметрыФайла                = РаботаСФайлами.ПараметрыДобавленияФайла(Новый Структура());
		ПараметрыФайла.Автор          = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ВладелецФайлов = ВладелецФайла;
	
		ПутьКФайлуНаДиске = ПолучитьФайл(ИдентификаторПакета, ПараметрыФайла);
		ДобавитьФайл(ПараметрыФайла, ПутьКФайлуНаДиске, Комментарий);
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьФайлаИзАкта",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";

КонецФункции

Функция ПередатьСобытияИзМП(События, ИДУстройства)
	
	Подразделение = ПолучитьПодразделениеУстройства(ИДУстройства);
	Бригада = ПолучитьБригадуУстройства(ИДУстройства);
	
	ТипСписок = ФабрикаXDTO.Тип("android", "События");
	ТипФабрикиСобытия = ФабрикаXDTO.Тип("android", "СобытиеИзМП");	
	
	СобытияОтвет = ФабрикаXDTO.Создать(ТипСписок);
	
	ОбработчикиСобытий = Новый Структура;
	ОбработчикиСобытий.Вставить("ИзменениеСтатуса", торо_РаботаСоСтатусамиДокументовСервер);
	ОбработчикиСобытий.Вставить("ИзменениеФункции", торо_РаботаСоСтатусамиДокументовСервер);
	
	ДополнительныеПараметры = Новый Структура("Подразделение, Бригада, ИДУстройства", Подразделение, Бригада, ИДУстройства);
	
	Для Каждого СобытиеИзМП ИЗ События.Элементы Цикл
		
		МодульОбработчика = ОбработчикиСобытий[СобытиеИзМП.ТипСобытия];
		
		РезультатОбработки = МодульОбработчика.ОбработкаСобытияИзМобильногоПриложения(
			СобытиеИзМП.ДатаВремяСобытия,
			?(СобытиеИзМП.Сериализовано, ДесериализоватьОбъект(СобытиеИзМП.ИнформацияСобытия), СобытиеИзМП.ИнформацияСобытия),
			СобытиеИзМП.ТипСобытия,
			ДополнительныеПараметры);
		
		СобытиеОтвет = ФабрикаXDTO.Создать(ТипФабрикиСобытия);
		
		ЗаполнитьЗначенияСвойств(СобытиеОтвет, СобытиеИзМП);
		СобытиеОтвет.ИнформацияСобытия = СериализоватьОбъект(РезультатОбработки);
		СобытиеОтвет.Сериализовано = Истина;
		СобытияОтвет.Элементы.Добавить(СобытиеОтвет);
		
	КонецЦикла;
	
	Возврат СобытияОтвет;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

Функция НайтиПользователя(ИмяПользователяИБ)
	
	Пользователь = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ <> Неопределено Тогда
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Пользователь;
	
КонецФункции

Функция НайтиОРпоКоду(Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ОбъектыРемонта.Ссылка
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Код = &Код
	|	И торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Код", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, СписокXDTO, ТипФабрики, ИмяСправочника, ПропускатьГруппы = Ложь, СИерархией = Ложь, РодителиУИДом = Ложь)
	
	Узел =  ПолучитьУзелПланаОбмена(ИДУстройства);
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
  	
	Если ИмяСправочника = "торо_ИзмеряемыеПоказателиОбъектовРемонта" Тогда
		ТипМетаданных = Метаданные.ПланыВидовХарактеристик[ИмяСправочника];
		ЕстьРеквизитЭтоГруппа = ТипМетаданных.Иерархический;
	Иначе
		ТипМетаданных = Метаданные.Справочники[ИмяСправочника];
		ЕстьРеквизитЭтоГруппа = (ТипМетаданных.Иерархический И ТипМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов);
	КонецЕсли;
	Выборка = ПолучитьВыборкуИзмененныхДанных(Узел, ИмяСправочника, РазмерПакета);
	
	СтрокаИсключений = "";
	Если ИмяСправочника = "торо_ИзмеряемыеПоказателиОбъектовРемонта" Тогда 
		СтрокаИсключений = "ЕдиницаИзмерения, ТипЗначения";
	ИначеЕсли ИмяСправочника = "ПараметрыВыработкиОС" Тогда
		СтрокаИсключений = "ЕдиницаИзмерения";
	ИначеЕсли ИмяСправочника = "Номенклатура" Тогда 
		СтрокаИсключений = "ЕдиницаИзмерения, ВидНоменклатуры, ИспользованиеХарактеристик";
	ИначеЕсли ИмяСправочника = "торо_ПричиныПростояОборудования" Тогда
		СтрокаИсключений = "ВидПростоя";
	ИначеЕсли ИмяСправочника = "торо_ТиповыеДефектыОборудования" Тогда
		СтрокаИсключений = "ВидДефекта, КритичностьДефекта";
	ИначеЕсли ИмяСправочника = "торо_ИдентификаторыТехКарт" Тогда
		СтрокаИсключений = "Статус";
	ИначеЕсли ИмяСправочника = "ХарактеристикиНоменклатуры" Тогда
		СтрокаИсключений = "Владелец";
	ИначеЕсли ИмяСправочника = "ВидыНоменклатуры" Тогда 
		СтрокаИсключений = "ТипНоменклатуры, ИспользованиеХарактеристик";
	ИначеЕсли ИмяСправочника = "торо_РемонтныеБригады" Тогда 
		СтрокаИсключений = "Подразделение";
	ИначеЕсли ИмяСправочника = "торо_ВидыЭксплуатации" Тогда
		СтрокаИсключений = "ТипЭксплуатации";
	ИначеЕсли ИмяСправочника = "торо_СписокОбъектовРегламентногоМероприятия" Тогда
		СтрокаИсключений = "ПодразделениеИсполнитель";
	КонецЕсли;
	
	Если СИерархией Тогда
		СтрокаИсключений = ?(СтрокаИсключений = "", "", СтрокаИсключений+", ") + "Родитель";
	КонецЕсли;
	
	СтрокаИсключенийДляГрупп = СтрокаИсключений;
	Если ИмяСправочника = "торо_ТиповыеДефектыОборудования" Тогда
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "ОписаниеДефекта, ПоследствиеДефекта, НаправлениеНаУстранение";
	ИначеЕсли ИмяСправочника = "торо_ВидыДефектов" 
		ИЛИ ИмяСправочника = "торо_ТиповыеОР" 
		ИЛИ ИмяСправочника = "торо_СписокОбъектовРегламентногоМероприятия" Тогда
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "Комментарий";
	ИначеЕсли ИмяСправочника = "торо_ИдентификаторыТехКарт" Тогда
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "Статус";
	ИначеЕсли ИмяСправочника = "Номенклатура" Тогда
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "Артикул";
	ИначеЕсли ИмяСправочника = "ВидыНоменклатуры" Тогда 
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "ИспользоватьХарактеристики";
	ИначеЕсли ИмяСправочника = "торо_ТехнологическиеОперации" Тогда
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "СодержаниеРабот";
	ИначеЕсли ИмяСправочника = "торо_ВидыЭксплуатации" Тогда
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "ОбязательныйВводВидаПуска"; 
	КонецЕсли;

	ЗначенияПоУмолчанию = Новый Структура("ЭтоГруппа, ПометкаУдаления, Комментарий, ОписаниеДефекта, Удалить", Истина, Ложь, "", "", Ложь);
	ЗначенияПоУмолчанию.Вставить("ВидПростоя", "0");
	ЗначенияПоУмолчанию.Вставить("ЕдиницаИзмерения", "0");
	ЗначенияПоУмолчанию.Вставить("ВидДефекта", "0");
	ЗначенияПоУмолчанию.Вставить("КритичностьДефекта", "0");
	ЗначенияПоУмолчанию.Вставить("Направление", "0");
	ЗначенияПоУмолчанию.Вставить("Статус", "");
	ЗначенияПоУмолчанию.Вставить("Артикул", "");
	ЗначенияПоУмолчанию.Вставить("Владелец", "0");
	ЗначенияПоУмолчанию.Вставить("ВидНоменклатуры", "0");
	ЗначенияПоУмолчанию.Вставить("ИспользованиеХарактеристик", "");
	ЗначенияПоУмолчанию.Вставить("ТипНоменклатуры", "");
	ЗначенияПоУмолчанию.Вставить("Подразделение", "");
	ЗначенияПоУмолчанию.Вставить("Код", "");
	ЗначенияПоУмолчанию.Вставить("ПоследствиеДефекта", "");
	ЗначенияПоУмолчанию.Вставить("НаправлениеНаУстранение", "");
	ЗначенияПоУмолчанию.Вставить("ТипЭксплуатации", "");
	ЗначенияПоУмолчанию.Вставить("ПодразделениеИсполнитель", "0");
	ЗначенияПоУмолчанию.Вставить("ТипЗначения", "");
	ЗначенияПоУмолчанию.Вставить("ДляНоменклатуры", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	УстановитьПривилегированныйРежим(Ложь);

	Пока Выборка.Следующий() Цикл
		
		Попытка
			ТекущийОбъект = Выборка.Ссылка;
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, Выборка);
			Продолжить;
		КонецПопытки;
		
		Если Выборка.Удалить Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект, ЗначенияПоУмолчанию);
			ДобавляемыйОбъект.ГУИД = Строка(ТекущийОбъект.УникальныйИдентификатор());
			ДобавляемыйОбъект.Наименование = "";
			ДобавляемыйОбъект.Удалить = Истина;
			Если СИерархией Тогда
				Если РодителиУИДом Тогда
					ДобавляемыйОбъект.Родитель = "";
				Иначе
					ДобавляемыйОбъект.Родитель = Неопределено;
				КонецЕсли;
			КонецЕсли;
			СписокXDTO.Добавить(ДобавляемыйОбъект);
			
			Продолжить;
		КонецЕсли;
		
		Если ТекущийОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПропускатьГруппы И ТекущийОбъект.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
		ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект, ЗначенияПоУмолчанию);
		
		ДобавляемыйОбъект.ГУИД = Строка(ТекущийОбъект.УникальныйИдентификатор());
		
		Если ЕстьРеквизитЭтоГруппа И ТекущийОбъект.ЭтоГруппа Тогда
			ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект, ТекущийОбъект,,СтрокаИсключенийДляГрупп);
		Иначе
			ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект, ТекущийОбъект,,СтрокаИсключений);
		КонецЕсли;
		
		Если ИмяСправочника = "торо_ИзмеряемыеПоказателиОбъектовРемонта" Тогда
						
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ТекущийОбъект.ЕдиницаИзмерения),ТекущийОбъект.ЕдиницаИзмерения.Код, 0);
				МассивТипов = ТекущийОбъект.ТипЗначения.Типы();
				Если МассивТипов.Количество() > 1 Тогда
					ДобавляемыйОбъект.ТипЗначения = "ЧислоЗначение";
				ИначеЕсли МассивТипов.Количество() = 1 Тогда
					Если МассивТипов[0] = Тип("Число") Тогда
						ДобавляемыйОбъект.ТипЗначения = "Число";
					Иначе
						ДобавляемыйОбъект.ТипЗначения = "Значение";
					КонецЕсли;;
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "ПараметрыВыработкиОС"	Тогда
			
			ДобавляемыйОбъект.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ТекущийОбъект.ЕдиницаИзмерения),ТекущийОбъект.ЕдиницаИзмерения.Код, 0);
			
		ИначеЕсли ИмяСправочника = "Номенклатура" Тогда 
			
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ТекущийОбъект.ЕдиницаИзмерения),ТекущийОбъект.ЕдиницаИзмерения.Код, 0);
				ДобавляемыйОбъект.ВидНоменклатуры = ?(ЗначениеЗаполнено(ТекущийОбъект.ВидНоменклатуры),Строка(ТекущийОбъект.ВидНоменклатуры.Ссылка.УникальныйИдентификатор()), 0);
				ДобавляемыйОбъект.ИспользованиеХарактеристик = ?(ЗначениеЗаполнено(ТекущийОбъект.ИспользованиеХарактеристик), XMLСтрока(ТекущийОбъект.ИспользованиеХарактеристик), 
				                                                 XMLСтрока(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать));

			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "торо_ПричиныПростояОборудования" Тогда
			
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.ВидПростоя = Строка(ТекущийОбъект.ВидПростоя);
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "торо_ТиповыеДефектыОборудования" Тогда
			
			ДобавляемыйОбъект.Направление = ?(ЗначениеЗаполнено(ТекущийОбъект.Владелец),ТекущийОбъект.Владелец.Код, 0);
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.ВидДефекта =?(ЗначениеЗаполнено(ТекущийОбъект.ВидДефекта),ТекущийОбъект.ВидДефекта.Код, 0);
				ДобавляемыйОбъект.КритичностьДефекта = ?(ЗначениеЗаполнено(ТекущийОбъект.КритичностьДефекта),ТекущийОбъект.КритичностьДефекта.Код, 0);
				Если ТекущийОбъект.ПричиныВозникновенияДефекта.Количество()>0 Тогда
					ДобавляемыйОбъект.ПричинаДефекта = Строка(ТекущийОбъект.ПричиныВозникновенияДефекта[0].Причина.Код);
				КонецЕсли;
				ДобавляемыйОбъект.ПоследствиеДефекта = ТекущийОбъект.ПоследствиеДефекта;
				ДобавляемыйОбъект.НаправлениеНаУстранение = ТекущийОбъект.НаправлениеНаУстранение;
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "торо_ВидыЭксплуатации" Тогда
			
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда	
				ДобавляемыйОбъект.ТипЭксплуатации = Строка(ТекущийОбъект.ТипЭксплуатации);
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "торо_ИдентификаторыТехКарт" Тогда
			
			ДобавляемыйОбъект.Статус = XMLСтрока(ТекущийОбъект.Статус);
			
		ИначеЕсли ИмяСправочника = "ХарактеристикиНоменклатуры" Тогда 
			
			Если ТипЗнч(ТекущийОбъект.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда 
				ДобавляемыйОбъект.Владелец = ?(ЗначениеЗаполнено(ТекущийОбъект.Владелец),Строка(ТекущийОбъект.Владелец.Ссылка.УникальныйИдентификатор()), 0);
				ДобавляемыйОбъект.ДляНоменклатуры = Ложь;
			Иначе
				ДобавляемыйОбъект.Владелец = ?(ЗначениеЗаполнено(ТекущийОбъект.Владелец),ТекущийОбъект.Владелец.Код, 0);
				ДобавляемыйОбъект.ДляНоменклатуры = Истина;
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "ВидыНоменклатуры" Тогда 
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.ИспользованиеХарактеристик = ?(ЗначениеЗаполнено(ТекущийОбъект.ИспользованиеХарактеристик), XMLСтрока(ТекущийОбъект.ИспользованиеХарактеристик), 
				                                                 XMLСтрока(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать));
				ДобавляемыйОбъект.ТипНоменклатуры = XMLСтрока(ТекущийОбъект.ТипНоменклатуры);
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "торо_РемонтныеБригады" Тогда 

			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.Подразделение = XMLСтрока(ТекущийОбъект.Подразделение.УникальныйИдентификатор());
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "торо_СписокОбъектовРегламентногоМероприятия" Тогда
			Попытка
				ДобавляемыйОбъект.ПодразделениеИсполнитель = ?(ЗначениеЗаполнено(ТекущийОбъект.ПодразделениеИсполнитель), ТекущийОбъект.ПодразделениеИсполнитель.Код, 0);
			Исключение
				ДобавляемыйОбъект.ПодразделениеИсполнитель = 0;
			КонецПопытки;
		
		КонецЕсли;
		
		Если СИерархией Тогда
			
			Если РодителиУИДом Тогда
				
				Если ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда
					ДобавляемыйОбъект.Родитель = Строка(ТекущийОбъект.Родитель.УникальныйИдентификатор());
				Иначе
					ДобавляемыйОбъект.Родитель = "";
				КонецЕсли;
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда
					ДобавляемыйОбъект.Родитель = Неопределено;
				Иначе
					Попытка
						ОбъектРодитель = ФабрикаXDTO.Создать(ТипФабрики);
						ЗаполнитьЗначенияСвойств(ОбъектРодитель, ЗначенияПоУмолчанию);
						ОбъектРодитель.Родитель = Неопределено;
						ОбъектРодитель.ГУИД = Строка(ТекущийОбъект.Родитель.УникальныйИдентификатор());
						ОбъектРодитель.Наименование = ТекущийОбъект.Родитель.Наименование;
						ДобавляемыйОбъект.Родитель = ОбъектРодитель;
					Исключение
						ДобавляемыйОбъект.Родитель = Неопределено;
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяСправочника = "торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта" Тогда
			ДобавляемыйОбъект.КодВладельца = ТекущийОбъект.Владелец.Код;
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.Недопустимое = ТекущийОбъект.ВыделятьКакНедопустимоеЗначение;
				ДобавляемыйОбъект.Критическое  = ТекущийОбъект.ВыделятьКакКритическоеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяСправочника = "Сотрудники" Тогда				
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Пользователи.Наименование КАК Пользователь
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО Пользователи.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
			|ГДЕ
			|	Сотрудники.Ссылка = &Сотрудник";
			
			Запрос.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ссылка);
			
			ВыборкаПользователей = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаПользователей.Следующий() Цикл
				Имя = Неопределено;
				
				Для Каждого Пользователь Из СписокПользователей Цикл
					Если Пользователь.ПолноеИмя = ВыборкаПользователей.Пользователь Тогда
						Имя = Пользователь.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не Имя = Неопределено Тогда
					ДобавляемыйОбъект.Пользователи.Добавить(Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СписокXDTO.Добавить(ДобавляемыйОбъект);
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьВыборкуИзмененныхДанных(Узел, ИмяОбъектаМетаданных, РазмерПакета)

	Запрос = Новый Запрос;
	Если ИмяОбъектаМетаданных <> "торо_ИзмеряемыеПоказателиОбъектовРемонта" Тогда

		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ %1
						|	Изменения.Ссылка КАК Ссылка
						|ПОМЕСТИТЬ ТАбИзменений
						|ИЗ
						|	Справочник.%2.Изменения КАК Изменения
						|ГДЕ
						|	Изменения.Узел = &Узел
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ТАбИзменений.Ссылка КАК Ссылка,
						|	Таблица.Ссылка ЕСТЬ NULL КАК Удалить
						|ИЗ
						|	ТАбИзменений КАК ТАбИзменений
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%2 КАК Таблица
						|		ПО (ТАбИзменений.Ссылка = Таблица.Ссылка)";  
		
	Иначе 
		
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ %1
						|	Изменения.Ссылка КАК Ссылка
						|ПОМЕСТИТЬ ТАбИзменений
						|ИЗ
						|	ПланВидовХарактеристик.%2.Изменения КАК Изменения
						|ГДЕ
						|	Изменения.Узел = &Узел
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ТАбИзменений.Ссылка КАК Ссылка,
						|	Таблица.Ссылка ЕСТЬ NULL КАК Удалить
						|ИЗ
						|	ТАбИзменений КАК ТАбИзменений
						|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.%2 КАК Таблица
						|		ПО (ТАбИзменений.Ссылка = Таблица.Ссылка)"; 
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(ТекстЗапроса, РазмерПакета, ИмяОбъектаМетаданных);
	Запрос.УстановитьПараметр("Узел", Узел);
	Выборка = Запрос.Выполнить().Выбрать();

    Возврат Выборка;
	
КонецФункции

Функция ПолучитьВыборкуДанныхИерархииИзРегистра(СтруктураИерархии, ИзменяетсяДокументами, СписокОР = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ИзменяетсяДокументами = Истина Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабРег.ОбъектИерархии КАК ОбъектИерархии,
		|	ТабРег.РодительИерархии КАК РодительИерархии,
		|	ТабРег.Регистратор КАК Регистратор,
		|	ТабРег.Удален КАК Удален
		|ПОМЕСТИТЬ ВТ_СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			,
		|			СтруктураИерархии = &СтруктураИерархии
		|				И ОбъектИерархии В (&СписокОР)) КАК ТабРег
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
		|	ЕСТЬNULL(ВТ_СтруктураИерархии.РодительИерархии, НЕОПРЕДЕЛЕНО) КАК Родитель,
		|	ЕСТЬNULL(ВТ_СтруктураИерархии.Регистратор, """") КАК Регистратор,
		|	ЕСТЬNULL(ВТ_СтруктураИерархии.Удален, ИСТИНА) КАК НеВИерархии
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтруктураИерархии КАК ВТ_СтруктураИерархии
		|		ПО торо_ОбъектыРемонта.Ссылка = ВТ_СтруктураИерархии.ОбъектИерархии
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка В(&СписокОР)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Список.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ОбъектыРемонта.Код КАК ОбъектРемонтаКод,
		|	ВТ_ОбъектыРемонта.Наименование КАК ОбъектРемонтаНаименование,
		|	ВТ_ОбъектыРемонта.ЭтоГруппа КАК ОбъектРемонтаЭтоГруппа,
		|	ЕСТЬNULL(ВТ_РодителиОР.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК Родитель,
		|	ВТ_РодителиОР.Код КАК РодительКод,
		|	ВТ_РодителиОР.Наименование КАК РодительНаименование,
		|	ВТ_РодителиОР.ЭтоГруппа КАК РодительЭтоГруппа,
		|	ВТ_Список.Регистратор КАК Регистратор,
		|	ВТ_Список.НеВИерархии КАК НеВИерархии
		|ИЗ
		|	ВТ_Список КАК ВТ_Список
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
		|		ПО ВТ_Список.ОбъектРемонта = ВТ_ОбъектыРемонта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК ВТ_РодителиОР
		|		ПО ВТ_Список.Родитель = ВТ_РодителиОР.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Список.ОбъектРемонта,
		|	ВТ_ОбъектыРемонта.Код,
		|	ВТ_ОбъектыРемонта.Наименование,
		|	ВТ_ОбъектыРемонта.ЭтоГруппа,
		|	ВТ_Список.Родитель,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТ_Список.Регистратор КАК Регистратор,
		|	ВТ_Список.НеВИерархии
		|ИЗ
		|	ВТ_Список КАК ВТ_Список
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
		|		ПО ВТ_Список.ОбъектРемонта = ВТ_ОбъектыРемонта.Ссылка
		|ГДЕ
		|	ВТ_Список.Родитель = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)";

		
		Если СписокОР = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОбъектИерархии В (&СписокОР)", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Ссылка В(&СписокОР)", "ИСТИНА");
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабРег.ОбъектИерархии КАК ОбъектИерархии,
		|	ТабРег.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ТабРег
		|ГДЕ
		|	ТабРег.СтруктураИерархии = &СтруктураИерархии
		|	И ТабРег.ОбъектИерархии В(&СписокОР)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТабРег.ОбъектИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
		|	ЕСТЬNULL(ВТ_СтруктураИерархии.РодительИерархии, НЕОПРЕДЕЛЕНО) КАК Родитель,
		|	ВЫБОР
		|		КОГДА ВТ_СтруктураИерархии.ОбъектИерархии ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеВИерархии
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтруктураИерархии КАК ВТ_СтруктураИерархии
		|		ПО торо_ОбъектыРемонта.Ссылка = ВТ_СтруктураИерархии.ОбъектИерархии
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка В(&СписокОР)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Список.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ОбъектыРемонта.Код КАК ОбъектРемонтаКод,
		|	ВТ_ОбъектыРемонта.Наименование КАК ОбъектРемонтаНаименование,
		|	ВТ_ОбъектыРемонта.ЭтоГруппа КАК ОбъектРемонтаЭтоГруппа,
		|	ЕСТЬNULL(ВТ_РодителиОР.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК Родитель,
		|	ВТ_РодителиОР.Код КАК РодительКод,
		|	ВТ_РодителиОР.Наименование КАК РодительНаименование,
		|	ВТ_РодителиОР.ЭтоГруппа КАК РодительЭтоГруппа,
		|	"""" КАК Регистратор,
		|	ВТ_Список.НеВИерархии КАК НеВИерархии
		|ИЗ
		|	ВТ_Список КАК ВТ_Список
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
		|		ПО ВТ_Список.ОбъектРемонта = ВТ_ОбъектыРемонта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК ВТ_РодителиОР
		|		ПО ВТ_Список.Родитель = ВТ_РодителиОР.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Список.ОбъектРемонта,
		|	ВТ_ОбъектыРемонта.Код,
		|	ВТ_ОбъектыРемонта.Наименование,
		|	ВТ_ОбъектыРемонта.ЭтоГруппа,
		|	ВТ_Список.Родитель,
		|	NULL,
		|	NULL,
		|	NULL,
		|	"""" КАК Регистратор,	
		|	ВТ_Список.НеВИерархии КАК НеВИерархии
		|ИЗ
		|	ВТ_Список КАК ВТ_Список
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
		|		ПО ВТ_Список.ОбъектРемонта = ВТ_ОбъектыРемонта.Ссылка
		|ГДЕ 
		|   ВТ_Список.Родитель = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)";
		
		Если СписокОР = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТабРег.ОбъектИерархии В(&СписокОР)", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Ссылка В(&СписокОР)", "ИСТИНА");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Если СписокОР <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокОР", СписокОР);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ПодготовитьПустуюСтруктуруОтвета()
	
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "СтруктураОтвета");
	СтруктураОтвета = ФабрикаXDTO.Создать(ТипСтруктуры);
	СтруктураОтвета.ДокументПроведен = Ложь;
	СтруктураОтвета.НомерДокумента = "";
	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ДобавитьОшибкуВМассив(МассивОшибок, ТекстОшибки, КодОшибки = 0)
	
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "СтруктураТекстаОшибки");
	СтруктураОшибки = ФабрикаXDTO.Создать(ТипСтруктуры);

	СтруктураОшибки.ТекстОшибки = ТекстОшибки;
	СтруктураОшибки.КодОшибки = КодОшибки;
	
	МассивОшибок.Добавить(СтруктураОшибки);
	
КонецФункции

Функция ПолучитьПодразделениеУстройства(ИДУстройства)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	
	Если ЗначениеЗаполнено(Узел) И ЗначениеЗаполнено(Узел.Подразделение) Тогда
		Возврат Узел.Подразделение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьБригадуУстройства(ИДУстройства)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	
	Если ЗначениеЗаполнено(Узел) И ЗначениеЗаполнено(Узел.Бригада) Тогда
		Возврат Узел.Бригада;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СериализоватьОбъект(Значение)
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

Функция ДесериализоватьОбъект(СтрокаXML)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Попытка
		Значение = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОшибкаДесериализации'"), УровеньЖурналаРегистрации.Ошибка, 
		   Метаданные.WebСервисы.ExchangeMobileBrigades,,ОписаниеОшибки);
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

Процедура ВыполнитьПервоначальнуюРегистрациюИерархииОР(Узел, СтруктураИерархии, ИзменяетсяДокументами)
	
	Если ИзменяетсяДокументами Тогда 
		
		Запрос =  Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	торо_РасположениеОР.Регистратор КАК Регистратор
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОР";
		
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.торо_РасположениеОРВСтруктуреИерархии.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
		КонецЦикла;
		
	Иначе
		
		Запрос =  Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии КАК СтруктураИерархии
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
		
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ОбъектИерархии.Установить(Выборка.ОбъектИерархии);
			НаборЗаписей.Отбор.СтруктураИерархии.Установить(СтруктураИерархии);
			НаборЗаписей.Прочитать();
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьПервоначальнуюРегистрациюДанных(ИмяСправочника, Узел, РегистрироватьПомеченныеОбъекты = Истина) 

	Если НЕ ИмяСправочника = "торо_ИзмеряемыеПоказателиОбъектовРемонта" Тогда
		Выборка = ВыборкаСправочникаСУчетомПравДоступа(ИмяСправочника, РегистрироватьПомеченныеОбъекты);
	Иначе
		Выборка = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.Выбрать();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаСправочникаСУчетомПравДоступа(ИмяСправочника, ВключатьПомеченныеОбъекты)
	
	Запрос = Новый Запрос;
	
	Если ИмяСправочника = "СтруктураПредприятия" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СтруктураПредприятия.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		               |ГДЕ
		               |	НЕ СтруктураПредприятия.Расформировано";
		
	ИначеЕсли ИмяСправочника = "торо_РемонтныеБригады" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СтруктураПредприятия.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_Подразделения
		               |ИЗ
		               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		               |ГДЕ
		               |	НЕ СтруктураПредприятия.Расформировано
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_РемонтныеБригады.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.торо_РемонтныеБригады КАК торо_РемонтныеБригады
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
		               |		ПО торо_РемонтныеБригады.Подразделение = ВТ_Подразделения.Ссылка";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	*
		               |ИЗ
		               |	Справочник."+ИмяСправочника+" КАК Спр";
		
		Если НЕ ВключатьПомеченныеОбъекты Тогда
			Запрос.Текст = Запрос.Текст + " ГДЕ НЕ Спр.ПометкаУдаления";	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура УдалитьРегистрациюИзмененийПривилегированно(Узел, Выборка)
	
	// Нет прав на объект, но регистрацию изменений все равно надо удалить.
	УстановитьПривилегированныйРежим(Истина);
	ТекущийОбъект = Выборка.Получить();
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПроцентВыполненияПодчиненных(ТаблицаРемонтныхРабот, СтрокаТаблицы)

	КоличествоПодчиненных = 0;
	ПроцентПодчиненных = 0;
	
	МассивПодчиненных = ТаблицаРемонтныхРабот.НайтиСтроки(Новый Структура("Родитель_ID", СтрокаТаблицы.ID));
	Для каждого СтрокаПодчиненная Из МассивПодчиненных Цикл
		Если ТипЗнч(СтрокаПодчиненная.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			СтруктураПолученная = Новый Структура("Количество, Процент", СтрокаПодчиненная.Количество, СтрокаПодчиненная.ПроцентВыполненияРабот);	
		Иначе
			СтруктураПолученная = ПроцентВыполненияПодчиненных(ТаблицаРемонтныхРабот, СтрокаПодчиненная);
		КонецЕсли; 
		КоличествоПодчиненных = КоличествоПодчиненных + СтруктураПолученная.Количество; 
		ПроцентПодчиненных = ПроцентПодчиненных + СтруктураПолученная.Процент * СтруктураПолученная.Количество;
	КонецЦикла;
	
	СтрокаТаблицы.ПроцентВыполненияРабот = ?(КоличествоПодчиненных = 0, 100, ПроцентПодчиненных / КоличествоПодчиненных);
	СтруктураВозврата = Новый Структура("Количество, Процент", СтрокаТаблицы.Количество, СтрокаТаблицы.ПроцентВыполненияРабот);
	
	Возврат СтруктураВозврата;	

КонецФункции

Процедура ДобавитьОРВМассив(МассивДляДобавления, ДобавляемыйОР)

	Если ЗначениеЗаполнено(ДобавляемыйОР) Тогда
		Если ТипЗнч(ДобавляемыйОР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			Если МассивДляДобавления.Найти(ДобавляемыйОР) = Неопределено Тогда
				МассивДляДобавления.Добавить(ДобавляемыйОР);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьМассивНеповторяющихсяЭлементов(ИсключаемыеЭлементы, МассивНеповторяющихся)
	
	Для каждого Элемент Из ИсключаемыеЭлементы Цикл
		НайденныйЭлемент = МассивНеповторяющихся.Найти(Элемент);
		Если НайденныйЭлемент <> Неопределено Тогда
			МассивНеповторяющихся.Удалить(НайденныйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивНеповторяющихся;
		
КонецФункции

Процедура ЗаполнитьСписокКвалификацииСотрудниковБригады(Бригада, СписокДанных, ТипФабрики)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СоставРемонтныхБригадСрезПоследних.Исполнитель КАК Сотрудник,
	               |	торо_СоставРемонтныхБригадСрезПоследних.Квалификация КАК Квалификация,
	               |	ИСТИНА КАК КвалификацияИзСоставаБригады
	               |ПОМЕСТИТЬ ВТ_СоставБригады
	               |ИЗ
	               |	РегистрСведений.торо_СоставРемонтныхБригад.СрезПоследних(, РемонтнаяБригада = &Бригада) КАК торо_СоставРемонтныхБригадСрезПоследних
	               |ГДЕ
	               |	НЕ торо_СоставРемонтныхБригадСрезПоследних.ИсключенИзБригады
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник КАК Сотрудник,
	               |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Квалификация КАК Квалификация,
	               |	ЛОЖЬ КАК КвалификацияИзСоставаБригады
	               |ПОМЕСТИТЬ ВТ_Квалификации
	               |ИЗ
	               |	РегистрСведений.торо_КвалификацияРемонтногоПерсонала.СрезПоследних(
	               |			,
	               |			Сотрудник В
	               |				(ВЫБРАТЬ
	               |					ВТ_СоставБригады.Сотрудник КАК Сотрудник
	               |				ИЗ
	               |					ВТ_СоставБригады КАК ВТ_СоставБригады)) КАК торо_КвалификацияРемонтногоПерсоналаСрезПоследних
	               |ГДЕ
	               |	НЕ торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Удаленная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СоставБригады.Сотрудник КАК Сотрудник,
	               |	ВТ_СоставБригады.Квалификация КАК Квалификация,
	               |	ВТ_СоставБригады.КвалификацияИзСоставаБригады КАК КвалификацияИзСоставаБригады
	               |ПОМЕСТИТЬ ВТ_ВсеКвалификацииСотрудников
	               |ИЗ
	               |	ВТ_СоставБригады КАК ВТ_СоставБригады
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_Квалификации.Сотрудник,
	               |	ВТ_Квалификации.Квалификация,
	               |	ВТ_Квалификации.КвалификацияИзСоставаБригады
	               |ИЗ
	               |	ВТ_Квалификации КАК ВТ_Квалификации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеКвалификацииСотрудников.Сотрудник КАК Сотрудник,
	               |	ВТ_ВсеКвалификацииСотрудников.Квалификация КАК Квалификация,
	               |	МАКСИМУМ(ВТ_ВсеКвалификацииСотрудников.КвалификацияИзСоставаБригады) КАК КвалификацияИзСоставаБригады
	               |ИЗ
	               |	ВТ_ВсеКвалификацииСотрудников КАК ВТ_ВсеКвалификацииСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	               |		ПО ВТ_ВсеКвалификацииСотрудников.Сотрудник = Сотрудники.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеКвалификацииСотрудников.Сотрудник,
	               |	ВТ_ВсеКвалификацииСотрудников.Квалификация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник";
	
	Запрос.УстановитьПараметр("Бригада", Бригада);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
		ДобавляемыйОбъект.Сотрудник = ?(ЗначениеЗаполнено(Выборка.Сотрудник),Выборка.Сотрудник.Код, 0);
		ДобавляемыйОбъект.Квалификация = ?(ЗначениеЗаполнено(Выборка.Квалификация),Выборка.Квалификация.Код, 0);
		ДобавляемыйОбъект.КвалификацияИзСоставаБригады = Выборка.КвалификацияИзСоставаБригады;
		СписокДанных.рс_КвалификацииСотрудниковБригады.Добавить(ДобавляемыйОбъект);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкаОтбораПоСотруднику(ТабИсполнителей, ID, Сотрудники)
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсполнителиРемонта = ТабИсполнителей.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ID));
	Если ИсполнителиРемонта.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого Строка Из ИсполнителиРемонта Цикл
		МассивСтрок = Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Строка.Сотрудник));
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьВыборкуЗаявок(Все, Узел, Подразделение, Бригада, МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Ссылка,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДокументИсточник КАК ДокументИсточник,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОписаниеРемонта КАК ОписаниеРемонта,
				   |	торо_ЗаявкаНаРемонтРемонтыОборудования.Высота КАК Высота,
				   |	торо_ЗаявкаНаРемонтРемонтыОборудования.Долгота КАК Долгота, 
				   |	торо_ЗаявкаНаРемонтРемонтыОборудования.Широта КАК Широта
	               |ПОМЕСТИТЬ ВТ_ДанныеЗаявок
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ИсполнителиПоРемонтам КАК торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот
	               |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Ссылка
	               |			И торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.РемонтыОборудования_ID
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка В(&МассивСсылок)
	               |	И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен = ИСТИНА
	               |	И торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Исполнитель = &Подразделение
	               |	И торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.УточнениеИсполнителя = &Бригада
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка,
	               |	ID";
	
	Если Все Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка В(&МассивСсылок)", "ИСТИНА");	
		
	Иначе
		
		МассивСсылок = Новый Массив;
		
		ТипМетаданных = Метаданные.Документы.торо_ЗаявкаНаРемонт;
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, 1, ТипМетаданных);
		
		Пока Выборка.Следующий() Цикл
			Попытка
				ТекущийОбъект = Выборка.Получить();
			Исключение
				УдалитьРегистрациюИзмененийПривилегированно(Узел, Выборка);
				Продолжить;
			КонецПопытки;
			
			Если ТипЗнч(ТекущийОбъект) = Тип("УдалениеОбъекта") Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
				Продолжить;
			КонецЕсли;
			
			Если ТекущийОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(ТекущийОбъект.Ссылка);
			МассивОбъектов.Вставить(ТекущийОбъект.Ссылка, ТекущийОбъект);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Бригада", Бригада);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыРемонтовСрезПоследних.Регистратор КАК Регистратор,
	               |	торо_СтатусыРемонтовСрезПоследних.IDРемонта КАК ИДРемонта,
	               |	торо_СтатусыРемонтовСрезПоследних.Статус КАК Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыРемонтов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтов.СрезПоследних(
	               |			,
	               |			IDРемонта В
	               |				(ВЫБРАТЬ
	               |					ВТ_ДанныеЗаявок.ID КАК ID
	               |				ИЗ
	               |					ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок)) КАК торо_СтатусыРемонтовСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИДРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_СтатусыДокументовСрезПоследних.ИзменяемыйДокумент КАК Документ,
	               |	торо_СтатусыДокументовСрезПоследних.Статус КАК Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыДокументов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыДокументов.СрезПоследних(
	               |			,
	               |			ИзменяемыйДокумент В
	               |				(ВЫБРАТЬ
	               |					ВТ_ДанныеЗаявок.Ссылка КАК Ссылка
	               |				ИЗ
	               |					ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок)) КАК торо_СтатусыДокументовСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.ИДРемонта КАК ИДРемонта,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.Статус КАК Статус,
	               |	торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних.КомментарийКСтатусу КАК КомментарийКСтатусу
	               |ПОМЕСТИТЬ ВТ_СтатусыРемонтовПоИсполнителю
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтовВЗаявкахПоБригадам.СрезПоследних(
	               |			,
	               |			(ЗаявкаНаРемонт, ИДРемонта) В
	               |					(ВЫБРАТЬ
	               |						ВТ_ДанныеЗаявок.Ссылка КАК Ссылка,
	               |						ВТ_ДанныеЗаявок.ID КАК ID
	               |					ИЗ
	               |						ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок)
	               |				И Исполнитель = &Подразделение
	               |				И УточнениеИсполнителя = &Бригада) КАК торо_СтатусыРемонтовВЗаявкахПоБригадамСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаНаРемонт,
	               |	ИДРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ДанныеЗаявок.Ссылка КАК Ссылка,
	               |	ВТ_ДанныеЗаявок.Ссылка.Дата КАК Дата,
	               |	ВТ_ДанныеЗаявок.Ссылка.Номер КАК Номер,
	               |	ВТ_ДанныеЗаявок.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	               |	ВТ_ДанныеЗаявок.Ссылка.Проведен КАК Проведен,
	               |	ВТ_ДанныеЗаявок.Ссылка.Комментарий КАК Комментарий,
	               |	ВТ_ДанныеЗаявок.Ссылка.Организация КАК Организация,
	               |	ВТ_ДанныеЗаявок.Ссылка.Организация.Код КАК ОрганизацияКод,
	               |	ВТ_ДанныеЗаявок.Ссылка.Подразделение КАК Подразделение,
	               |	ВТ_ДанныеЗаявок.Ссылка.Подразделение.Код КАК ПодразделениеКод,
	               |	ВТ_ДанныеЗаявок.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ДанныеЗаявок.ОбъектРемонта.Код КАК ОбъектРемонтаКод,
	               |	ВТ_ДанныеЗаявок.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ВТ_ДанныеЗаявок.ВидРемонтныхРабот.Код КАК ВидРемонтныхРаботКод,
	               |	ВТ_ДанныеЗаявок.ДатаНачала КАК ДатаНачала,
	               |	ВТ_ДанныеЗаявок.ДатаОкончания КАК ДатаОкончания,
	               |	ВТ_ДанныеЗаявок.ДокументИсточник КАК ДокументИсточник,
	               |	ВТ_ДанныеЗаявок.ID КАК ID,
	               |	ВТ_ДанныеЗаявок.ОписаниеРемонта КАК ОписаниеРемонта,
				   |	ВТ_ДанныеЗаявок.Высота КАК Высота,
				   |	ВТ_ДанныеЗаявок.Долгота КАК Долгота,
				   |	ВТ_ДанныеЗаявок.Широта КАК Широта,
	               |	ВТ_СтатусыРемонтов.Статус КАК СтатусДокумента,
	               |	"""" КАК КомментарийКСтатусу,
	               |	торо_ВыявленныеДефекты.КритичностьДефекта КАК КритичностьДефекта,
	               |	ЕСТЬNULL(торо_ВыявленныеДефекты.ДефектОписание, """") КАК ДефектОписание,
	               |	ЕСТЬNULL(торо_ВыявленныеДефекты1.ДатаОбнаружения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИнцидента,
	               |	ЕСТЬNULL(торо_ВыявленныеДефекты1.КонтактноеЛицоИнициатора, """") КАК КонтактноеЛицоИнициатора,
	               |	ЕСТЬNULL(ВТ_СтатусыРемонтовПоИсполнителю.Статус, НЕОПРЕДЕЛЕНО) КАК СтатусРемонтаПоИсполнителю,
	               |	ЕСТЬNULL(ВТ_СтатусыРемонтовПоИсполнителю.КомментарийКСтатусу, """") КАК КомментарийКСтатусуИсполнителя
	               |ИЗ
	               |	ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыРемонтов КАК ВТ_СтатусыРемонтов
	               |		ПО ВТ_ДанныеЗаявок.ID = ВТ_СтатусыРемонтов.ИДРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыДокументов КАК ВТ_СтатусыДокументов
	               |		ПО ВТ_ДанныеЗаявок.Ссылка = ВТ_СтатусыДокументов.Документ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	               |		ПО ВТ_ДанныеЗаявок.ДокументИсточник = торо_ВыявленныеДефекты.Регистратор
	               |			И ВТ_ДанныеЗаявок.ID = торо_ВыявленныеДефекты.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты1
	               |		ПО ВТ_ДанныеЗаявок.ДокументИсточник = торо_ВыявленныеДефекты1.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыРемонтовПоИсполнителю КАК ВТ_СтатусыРемонтовПоИсполнителю
	               |		ПО ВТ_ДанныеЗаявок.Ссылка = ВТ_СтатусыРемонтовПоИсполнителю.ЗаявкаНаРемонт
	               |			И ВТ_ДанныеЗаявок.ID = ВТ_СтатусыРемонтовПоИсполнителю.ИДРемонта
	               |ГДЕ
	               |	НЕ ВТ_СтатусыРемонтов.Статус В (&СтатусыРемонтов)
	               |	И НЕ ВТ_СтатусыДокументов.Статус В (&СтатусыДокументов)
	               |	И НЕ ЕСТЬNULL(ВТ_СтатусыРемонтовПоИсполнителю.Статус, НЕОПРЕДЕЛЕНО) В (&СтатусыПоИсполнителям)
	               |ИТОГИ ПО
	               |	Ссылка";
	
	Если Все Тогда    
		МассивВыполненныхСтатусов = Новый Массив;
		МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.Выполнен);
		МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.Отменен);
		
		МассивВыполненныхСтатусовПоИсполнителям = Новый Массив;
		МассивВыполненныхСтатусовПоИсполнителям.Добавить(Перечисления.торо_СтатусыРемонтов.Выполнен);
		МассивВыполненныхСтатусовПоИсполнителям.Добавить(Перечисления.торо_СтатусыРемонтов.Отменен);
		МассивВыполненныхСтатусовПоИсполнителям.Добавить(Перечисления.торо_СтатусыРемонтов.ОтказИсполнителя);
		МассивВыполненныхСтатусовПоИсполнителям.Добавить(Перечисления.торо_СтатусыРемонтов.ОтказПодразделения);	
		
		МассивВыполненныхСтатусовДокументов = Новый Массив;
		МассивВыполненныхСтатусовДокументов.Добавить(Перечисления.торо_СтатусыДокументов.Выполнен);
		МассивВыполненныхСтатусовДокументов.Добавить(Перечисления.торо_СтатусыДокументов.Отклонен);
		
		Запрос.УстановитьПараметр("СтатусыРемонтов", МассивВыполненныхСтатусов);
		Запрос.УстановитьПараметр("СтатусыПоИсполнителям", МассивВыполненныхСтатусовПоИсполнителям);
		Запрос.УстановитьПараметр("СтатусыДокументов", МассивВыполненныхСтатусовДокументов);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ВТ_СтатусыРемонтов.Статус В (&СтатусыРемонтов)", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ВТ_СтатусыДокументов.Статус В (&СтатусыДокументов)", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ЕСТЬNULL(ВТ_СтатусыРемонтовПоИсполнителю.Статус, НЕОПРЕДЕЛЕНО) В (&СтатусыПоИсполнителям)", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаЗаявок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаЗаявок;
	
КонецФункции

Функция ПолучитьФайл(ИдентификаторПакета, ПараметрыФайла)
	
    КаталогВременныхФайлов = КаталогВременныхФайлов() +"ReceivingMessageWS\";
    ВременныйКаталог = КаталогВременныхФайлов + ИдентификаторПакета;
    СоздатьКаталог(ВременныйКаталог);
    ИмяРезультатирующегоФайла = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |    торо_ПринятыеЧастиПакета.ИдентификаторПакета,
        |    торо_ПринятыеЧастиПакета.НомерЧасти,
        |    торо_ПринятыеЧастиПакета.ДанныеЧастиСообщения,
        |    торо_ПринятыеЧастиПакета.ДатаСоздания,
        |    торо_ПринятыеЧастиПакета.ВсегоЧастей,
        |    торо_ПринятыеЧастиПакета.РасширениеФайла,
        |    торо_ПринятыеЧастиПакета.ИмяФайла,
        |    торо_ПринятыеЧастиПакета.РазмерФайла
        |ИЗ
        |    РегистрСведений.торо_ПринятыеЧастиПакета КАК торо_ПринятыеЧастиПакета
        |ГДЕ
        |    торо_ПринятыеЧастиПакета.ИдентификаторПакета = &ИдентификаторПакета";
	
    Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);    
    РезультатЗапроса = Запрос.Выполнить();
    Если НЕ РезультатЗапроса.Пустой() Тогда
        Выборка = РезультатЗапроса.Выбрать();
        
        МассивИменФайловДляОбъединения = Новый Массив;

        Пока Выборка.Следующий() Цикл
            ИмяЧастиФайла = ВременныйКаталог + Символ(92) + Выборка.ИмяФайла + "." + Выборка.РасширениеФайла + "." + Формат(Выборка.НомерЧасти, "ЧГ=0");
            Выборка.ДанныеЧастиСообщения.Получить().Записать(ИмяЧастиФайла);
            МассивИменФайловДляОбъединения.Добавить(ИмяЧастиФайла);
        КонецЦикла;
		
		ПараметрыФайла.ИмяБезРасширения   = Выборка.ИмяФайла;
		ПараметрыФайла.РасширениеБезТочки = Выборка.РасширениеФайла;

        ИмяРезультатирующегоФайла = КаталогВременныхФайлов + Выборка.ИмяФайла + "." + Выборка.РасширениеФайла;
        ОбъединитьФайлы(МассивИменФайловДляОбъединения, ИмяРезультатирующегоФайла); 
        
        Попытка
            УдалитьФайлы(ВременныйКаталог, "*");			
        Исключение КонецПопытки;
        
    КонецЕсли;
    
    Возврат ИмяРезультатирующегоФайла;
    
КонецФункции

Процедура ДобавитьФайл(ПараметрыФайла, ПутьКФайлуНаДиске, Комментарий, СсылкаНаФайл = Неопределено)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлуНаДиске);
	ВрХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Описание = "";
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Описание = Комментарий;
	КонецЕсли;
	
	СсылкаНаФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ВрХранилище, , Описание);
	
	Попытка 
		УдалитьФайлы(ПутьКФайлуНаДиске);
	Исключение КонецПопытки;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// Объединение с Регистратором

Функция WriteZipCode(Code, ZipCode)
	
	Если ЗначениеЗаполнено(ZipCode) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ОбъектыРемонта.Ссылка
		               |ИЗ
		               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |ГДЕ
		               |	торо_ОбъектыРемонта.ШтрихКод = &ШтрихКод";
		
		Запрос.УстановитьПараметр("ШтрихКод", ZipCode);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат "Fail";
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Объект = НайтиОРпоКоду(Code).ПолучитьОбъект();
		Объект.ШтрихКод = ZipCode;
		Объект.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьШтрихкода", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";
	
КонецФункции

Функция ПередатьАктОВыполненииРМ(АктОВыполненииРМ, ПропуститьПроверки)
	
	Отказ = Ложь;
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();
	
	МетаданныеДокумента = Метаданные.Документы.торо_АктОВыполненииРегламентногоМероприятия;
	
	Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
		СтруктураОтвета.Успех = Ложь;
		ТекстСообщения = НСтр("ru='Нет прав на чтение документов ""Акт о выполнении регламентного мероприятия"".'");
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	СсылкаНаДокумент = Документы.торо_АктОВыполненииРегламентногоМероприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(АктОВыполненииРМ.Ссылка));
	НовыйДок = СсылкаНаДокумент.ПолучитьОбъект();
	ЭтоНовыйДокумент = Ложь;
	Если НовыйДок <> Неопределено Тогда
		Если НЕ ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на изменение документов ""Акт о выполнении регламентного мероприятия"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок.МероприятияОбъектов.Очистить();
	Иначе
		Если НЕ ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на добавление документов ""Акт о выполнении регламентного мероприятия"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок = Документы.торо_АктОВыполненииРегламентногоМероприятия.СоздатьДокумент();
		НовыйДок.УстановитьСсылкуНового(СсылкаНаДокумент);
		ЭтоНовыйДокумент = Истина;
	КонецЕсли;

	Если Отказ Тогда
		СтруктураОтвета.Успех = Ложь;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	УИДНаряда = АктОВыполненииРМ.УИДНарядаВБазеТОиР;
	Наряд = Документы.торо_НарядНаРегламентноеМероприятие.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДНаряда));
	
	Для каждого ОР Из АктОВыполненииРМ.МероприятияОбъектов.МероприятияОбъектов Цикл
		НС = НовыйДок.МероприятияОбъектов.Добавить();
		НС.ОбъектРемонта = НайтиОРпоКоду(ОР.ОбъектРемонта);
		НС.Выполнено = ОР.Выполнено;
		НС.Комментарий = ОР.Комментарий;
		НС.Мероприятие_ID = АктОВыполненииРМ.ID;
	КонецЦикла;
	
	Если ЭтоНовыйДокумент Тогда
		
		НовыйДок.Дата = АктОВыполненииРМ.Дата;
		НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(АктОВыполненииРМ.Подразделение);
		НовыйДок.Организация = Справочники.Организации.НайтиПоКоду(АктОВыполненииРМ.Организация);
		НовыйДок.Ответственный = НайтиПользователя(АктОВыполненииРМ.Ответственный);
		НовыйДок.ЗавершитьРемонтныеРаботы = АктОВыполненииРМ.ЗавершитьРемонт;
		НовыйДок.ИзМобильного = Истина;
		
		Мероприятие = НовыйДок.Мероприятия.Добавить();
		Мероприятие.ID =  АктОВыполненииРМ.ID;
		Мероприятие.ОбъектРемонта = НайтиСписокОбъектовНаРМроКоду(АктОВыполненииРМ.ОбъектРемонта);
		Мероприятие.ВидРемонтныхРабот = Справочники.торо_ВидыРемонтов.НайтиПоКоду(АктОВыполненииРМ.ВидРемонта);
		Мероприятие.ДатаНачала =  АктОВыполненииРМ.ДатаНачала;
		Мероприятие.ДатаОкончания =  АктОВыполненииРМ.ДатаОкончания;
		Мероприятие.ЗавершитьРемонт =  АктОВыполненииРМ.ЗавершитьРемонт;
		Мероприятие.ДокументИсточник = Наряд;
		
		ДО = НовыйДок.ДокументыОснования.Добавить();
		ДО.ДокументОснование = Наряд;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.ID КАК ID,
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Количество КАК Количество,
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Картинка КАК Картинка
		               |ИЗ
		               |	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы
		               |ГДЕ
		               |	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID = &РемонтыОборудования_ID
		               |	И торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", АктОВыполненииРМ.ID);
		Запрос.УстановитьПараметр("Ссылка", Наряд);
		
		ТабРемРабот = Запрос.Выполнить().Выгрузить();
		
		Для каждого РемРабота Из ТабРемРабот Цикл
			
			НС = НовыйДок.РемонтныеРаботы.Добавить();
			
			НС.ID =							РемРабота.ID;
			НС.Родитель_ID =				РемРабота.Родитель_ID;
			НС.ID_ПараллельнойОперации =	РемРабота.ID_ПараллельнойОперации; 
			НС.Количество =					РемРабота.Количество;
			НС.Картинка =					РемРабота.Картинка;
			НС.РемонтыОборудования_ID =		АктОВыполненииРМ.ID;		
			НС.РемонтнаяРабота =			РемРабота.РемонтнаяРабота;
			НС.ПроцентВыполненияРабот =		100;
			НС.Выполнено =					Истина;
			
		КонецЦикла;
		
		СтруктураТаблиц = Новый Структура("МатериальныеЗатраты");
		СтрутураРезультата = торо_Ремонты.ПолучитьНормыЗатратИзТаблицыОпераций(ТабРемРабот, НовыйДок.Мероприятия.Выгрузить(), СтруктураТаблиц);
		
		Для каждого Таб Из СтрутураРезультата Цикл
			Для каждого Материал Из Таб.СтруктураТаблиц.МатериальныеЗатраты Цикл
				
				НС = НовыйДок.МатериальныеЗатраты.Добавить();
				
				НС.ID =					        Материал.ID;
				НС.Количество =			        Материал.Количество;
				НС.Номенклатура =		        Материал.Номенклатура;
				НС.ХарактеристикаНоменклатуры = Материал.Характеристика;
				НС.КоличествоЕдиниц =	        Материал.КоличествоУпаковок;
				
				НС.РемонтыОборудования_ID = АктОВыполненииРМ.ID;
				
			КонецЦикла;
		КонецЦикла;
		
		ОтветственныйСотрудник = ПолучитьСотрудникаДляТекущегоПользователя(Пользователи.ТекущийПользователь());
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		                |	торо_НарядНаРегламентноеМероприятиеИсполнители.ID КАК ID,
		                |	торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаНачала КАК ДатаНачала,
		                |	торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаОкончания КАК ДатаОкончания,
		                |	торо_НарядНаРегламентноеМероприятиеИсполнители.Квалификация КАК Квалификация,
		                |	торо_НарядНаРегламентноеМероприятиеИсполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		                |	торо_НарядНаРегламентноеМероприятиеИсполнители.Сотрудник КАК Сотрудник
		                |ИЗ
		                |	Документ.торо_НарядНаРегламентноеМероприятие.Исполнители КАК торо_НарядНаРегламентноеМероприятиеИсполнители
		                |ГДЕ
		                |	торо_НарядНаРегламентноеМероприятиеИсполнители.РемонтыОборудования_ID = &РемонтыОборудования_ID
		                |	И торо_НарядНаРегламентноеМероприятиеИсполнители.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", АктОВыполненииРМ.ID);
		Запрос.УстановитьПараметр("Ссылка", Наряд);

		ТабИсполнителей = Запрос.Выполнить().Выгрузить();
		ВыполненныеОбъекты = НовыйДок.МероприятияОбъектов.НайтиСтроки(Новый Структура("Выполнено", Истина));
		КоличествоВыполненных = ? (ВыполненныеОбъекты.Количество() > 0, ВыполненныеОбъекты.Количество(), 1);
		Для каждого Сотрудник Из ТабИсполнителей Цикл
			
			НС = НовыйДок.ТрудовыеЗатраты.Добавить();
			
			НС.ID            = Сотрудник.ID;
			НС.ДатаНачала    = АктОВыполненииРМ.ДатаНачала;
			НС.ДатаОкончания = АктОВыполненииРМ.ДатаОкончания;
			НС.ВремяРаботы   = (АктОВыполненииРМ.ДатаОкончания - АктОВыполненииРМ.ДатаНачала) / КоличествоВыполненных;
			НС.Квалификация  = Сотрудник.Квалификация;
			НС.Сотрудник     = ОтветственныйСотрудник;
			НС.КТУ           = 1;
			НС.РассчитыватьАвтоматически = Истина;
			НС.РемонтыОборудования_ID = АктОВыполненииРМ.ID;
			
		КонецЦикла;
	Иначе
		НовыйДок.ЗавершитьРемонтныеРаботы = АктОВыполненииРМ.ЗавершитьРемонт;
		НовыйДок.Мероприятия[0].ЗавершитьРемонт = АктОВыполненииРМ.ЗавершитьРемонт;
		НовыйДок.Мероприятия[0].ДатаОкончания =  АктОВыполненииРМ.ДатаОкончания;
		ВыполненныеОбъекты = НовыйДок.МероприятияОбъектов.НайтиСтроки(Новый Структура("Выполнено", Истина));
		КоличествоВыполненных = ? (ВыполненныеОбъекты.Количество() > 0, ВыполненныеОбъекты.Количество(), 1);
		Для каждого Сотрудник Из НовыйДок.ТрудовыеЗатраты Цикл
			Сотрудник.ДатаОкончания = АктОВыполненииРМ.ДатаОкончания;
			Сотрудник.ВремяРаботы   = (АктОВыполненииРМ.ДатаОкончания - АктОВыполненииРМ.ДатаНачала) / КоличествоВыполненных;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоНовыйДокумент Тогда
		НовыйДок.Заполнить(Неопределено);
	КонецЕсли;
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьАкта");
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПередатьДефект(ИДУстройства, ВыявленныйДефект, ПропуститьПроверки, НезакрытыеДефекты)

	Отказ = Ложь;
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();

	МетаданныеДокумента = Метаданные.Документы.торо_ВыявленныеДефекты;
	
	Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
		СтруктураОтвета.Успех = Ложь;
		ТекстСообщения = НСтр("ru='Нет прав на чтение документов ""Выявленные дефекты"".'");
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
		Возврат СтруктураОтвета;
	КонецЕсли;
		
	СсылкаНаДокумент = Документы.торо_ВыявленныеДефекты.ПолучитьСсылку(Новый УникальныйИдентификатор(ВыявленныйДефект.Ссылка));
	НовыйДок = СсылкаНаДокумент.ПолучитьОбъект();
	ЭтоНовыйДокумент = Ложь;
	Если НовыйДок <> Неопределено Тогда
		Если НЕ ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на изменение документов ""Выявленные дефекты"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок.СписокДефектов.Очистить();
	Иначе
		Если НЕ ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на добавление документов ""Выявленные дефекты"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок = Документы.торо_ВыявленныеДефекты.СоздатьДокумент();
		НовыйДок.УстановитьСсылкуНового(СсылкаНаДокумент);
		ЭтоНовыйДокумент = Истина;
	КонецЕсли;
	
	ТаблицаДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка().СписокДефектов.Выгрузить();
	Для каждого Дефект ИЗ ВыявленныйДефект.ТЧВыявленныйДефект Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ID = Дефект.ID;
		НоваяСтрока.ВидДефекта = Справочники.торо_ВидыДефектов.НайтиПоКоду(Дефект.ВидДефекта);
		НоваяСтрока.ДефектВыявленВПроцессе = Справочники.торо_УсловияВыявленияДефекта.НайтиПоКоду(Дефект.ДефектВыявленВПроцессе);
		НоваяСтрока.ТиповойДефект = Справочники.торо_ТиповыеДефектыОборудования.НайтиПоКоду(Дефект.ТиповойДефект);
		НоваяСтрока.ДефектОписание = Дефект.ДефектОписание;
		
		ПричинаДефекта = Справочники.торо_ПричиныДефектов.НайтиПоКоду(Дефект.ДефектПричина);
		Если НЕ ЗначениеЗаполнено(ПричинаДефекта) Тогда
			ПричинаДефекта = Справочники.торо_ПричиныДефектов.НайтиПоНаименованию(Дефект.ДефектПричинаНаименование, Истина);
		КонецЕсли;
		
		НоваяСтрока.ДефектПричина = ПричинаДефекта;
		НоваяСтрока.НаправлениеНаУстранение = Дефект.НаправлениеНаУстранение;
		НоваяСтрока.ОбъектРемонта = НайтиОРпоКоду(Дефект.ОбъектРемонта);
		НоваяСтрока.ПодразделениеИсполнитель = Справочники.СтруктураПредприятия.НайтиПоКоду(Дефект.ПодразделениеИсполнитель);
		НоваяСтрока.ОтказавшийЭлемент = НайтиОРпоКоду(Дефект.ОтказавшийЭлемент);
		НоваяСтрока.Высота = Дефект.Высота;
		НоваяСтрока.Долгота = Дефект.Долгота;
		НоваяСтрока.Широта = Дефект.Широта;
		НоваяСтрока.ПоследствияДефекта = Дефект.ПоследствияДефекта;
		НоваяСтрока.КритичностьДефекта = Справочники.торо_КритичностьДефекта.НайтиПоКоду(Дефект.КритичностьДефекта);
	КонецЦикла;	
	
	// Выполнить проверки, установить Отказ, если требуется.
	Если НЕ ПропуститьПроверки Тогда
		Если ВыявленныйДефект.ТЧВыявленныйДефект.Количество() > 0 Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ОбъектРемонта", ВыявленныйДефект.ТЧВыявленныйДефект[0].ОбъектРемонта);
			СтруктураПараметров.Вставить("ОтказавшийЭлемент", ВыявленныйДефект.ТЧВыявленныйДефект[0].ОтказавшийЭлемент);
			СтруктураПараметров.Вставить("ВидДефекта", ВыявленныйДефект.ТЧВыявленныйДефект[0].ВидДефекта);
			СтруктураПараметров.Вставить("КритичностьДефекта", ВыявленныйДефект.ТЧВыявленныйДефект[0].КритичностьДефекта);
			СтруктураПараметров.Вставить("ДатаОбнаружения", ВыявленныйДефект.ДатаОбнаружения);
			СтруктураПараметров.Вставить("Ответственный", ВыявленныйДефект.Ответственный);
			СтруктураПараметров.Вставить("Ссылка", ВыявленныйДефект.Ссылка);
			СтруктураПараметров.Вставить("ДефектПричина", ВыявленныйДефект.ТЧВыявленныйДефект[0].ДефектПричина);
			СтруктураПараметров.Вставить("ДефектОписание", ВыявленныйДефект.ТЧВыявленныйДефект[0].ДефектОписание);
			
			НезакрытыеДефекты = ПолучитьНезакрытыеДефекты(СтруктураПараметров);
			Если НезакрытыеДефекты.Элементы <> Неопределено И НезакрытыеДефекты.Элементы.Количество() > 0 Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru='В 1С:ТОИР обнаружены незакрытые дефекты, похожие на регистрируемый.'");
				ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения, 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		СтруктураОтвета.Успех = Ложь;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ТекПользователь = НайтиПользователя(ВыявленныйДефект.Ответственный);
	
	НовыйДок.ИзМобильного = Истина;	
	НовыйДок.Дата = ВыявленныйДефект.Дата;
	НовыйДок.Комментарий = ВыявленныйДефект.Комментарий;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(ВыявленныйДефект.Подразделение); 
	НовыйДок.Организация = Справочники.Организации.НайтиПоКоду(ВыявленныйДефект.Организация);
	НовыйДок.Инициатор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойИнициаторДефекта");
	НовыйДок.КонтактноеЛицоИнициатора = ПолучитьСотрудникаДляТекущегоПользователя(ТекПользователь);
	НовыйДок.ДатаОбнаружения = ВыявленныйДефект.ДатаОбнаружения;
	НовыйДок.ДефектВыявленВПроцессе = Справочники.торо_УсловияВыявленияДефекта.НайтиПоКоду(ВыявленныйДефект.ДефектВыявленВПроцессе);
	НовыйДок.Ответственный = ТекПользователь;
	
	Если ЗначениеЗаполнено(ВыявленныйДефект.ДокументОснование) Тогда
		ДО = НовыйДок.ДокументыОснования.Добавить();
		ДО.ДокументОснование = Документы.торо_АктОВыполненииРегламентногоМероприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(ВыявленныйДефект.ДокументОснование));
	КонецЕсли;
	
	НовыйДок.СписокДефектов.Загрузить(ТаблицаДокумента);
	
	ФОИспользоватьУпрощеннуюФормуДефекта = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУпрощеннуюФормуДефекта");
	Если ФОИспользоватьУпрощеннуюФормуДефекта И ТаблицаДокумента.Количество() > 0 Тогда
		НовыйДок.ОбъектРемонта = ТаблицаДокумента[0].ОбъектРемонта;
	КонецЕсли;
	
	Если ЭтоНовыйДокумент Тогда
		НовыйДок.Заполнить(Неопределено);
	КонецЕсли;
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьВыявленныйДефект");
	
	Если СтруктураОтвета.Успех И ВыявленныйДефект.НазначитьЗаявку <> Неопределено И ВыявленныйДефект.НазначитьЗаявку Тогда
		НоваяЗаявка = Документы.торо_ЗаявкаНаРемонт.СоздатьДокумент();
		ЗаполнитьЗаявку(НоваяЗаявка, НовыйДок.Ссылка, ИДУстройства);
		ПопробоватьЗаписатьЗаявку(НоваяЗаявка, СтруктураОтвета);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПередатьКоординатыОР(Код, Широта, Долгота, Высота)
	
	ОбъектРемонта = НайтиОРпоКоду(Код).ПолучитьОбъект();
	
	Успешно = Истина;
	
	Попытка
		ОбъектРемонта.Широта = Число(Широта);
		ОбъектРемонта.Долгота = Число(Долгота);
		ОбъектРемонта.Высота = Число(Высота);
		ОбъектРемонта.Записать();
	Исключение
		Успешно = Ложь;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
			Метаданные.WebСервисы.ExchangeMobileBrigades,,ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

Функция ПередатьСостояниеОР(СостояниеОР, ПропуститьПроверки)
		
	Отказ = Ложь;
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();
	
	МетаданныеДокумента = Метаданные.Документы.торо_СостоянияОбъектовРемонта;
	
	Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
		СтруктураОтвета.Успех = Ложь;
		ТекстСообщения = НСтр("ru='Нет прав на чтение документов ""Состояния объектов ремонта"".'");
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	СсылкаНаДокумент = Документы.торо_СостоянияОбъектовРемонта.ПолучитьСсылку(Новый УникальныйИдентификатор(СостояниеОР.Ссылка));
	НовыйДок = СсылкаНаДокумент.ПолучитьОбъект();
	Если НовыйДок <> Неопределено Тогда
		Если НЕ ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на изменение документов ""Состояния объектов ремонта"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок.ОбъектыРемонта.Очистить();
	Иначе
		Если НЕ ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на добавление документов ""Состояния объектов ремонта"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок = Документы.торо_СостоянияОбъектовРемонта.СоздатьДокумент();
		НовыйДок.УстановитьСсылкуНового(СсылкаНаДокумент);
	КонецЕсли;

	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ИерархияДляМобильногоПриложения",
				Истина);
	
	ТаблицаДокумента = Документы.торо_СостоянияОбъектовРемонта.ПустаяСсылка().ОбъектыРемонта.Выгрузить();
	Для каждого Состояние ИЗ СостояниеОР.ТЧСостояниеОР Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ОбъектРемонта = НайтиОРпоКоду(Состояние.ОбъектРемонта);
		НоваяСтрока.ДатаОкончания = Состояние.ДатаОкончания;
		НоваяСтрока.ПричинаПростоя  = Справочники.торо_ПричиныПростояОборудования.НайтиПоКоду(Состояние.ПричинаПростоя );
		НоваяСтрока.ВидЭксплуатации = Справочники.торо_ВидыЭксплуатации.НайтиПоКоду(Состояние.ВидЭксплуатации);
		НоваяСтрока.ВидПуска = Справочники.торо_ВидыПусковОР.НайтиПоКоду(Состояние.ВидПуска);
		НоваяСтрока.ИзменятьСостояниеПодчиненныхОР = Состояние.РаспространятьНаПодчиненных;
		НоваяСтрока.СтруктураИерархии = ТекСтруктураИерархии;
	КонецЦикла;	
	
	// Выполнить проверки, установить Отказ, если требуется.
	Если НЕ ПропуститьПроверки Тогда
		// Tсли между датой изменения состояния из МП и текущей датой зарегистрированы 
		// изменения состояний интересующего нас ОР - ошибка. 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
		|	ТаблицаДокумента.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ТекущееСостояниеОРСрезПоследних.Период КАК Период,
		|	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта
		|ПОМЕСТИТЬ ВТ_ПоследниеСостояния
		|ИЗ
		|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(
		|			&Период,
		|			ОбъектРемонта В
		|					(ВЫБРАТЬ
		|						ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта
		|					ИЗ
		|						ТаблицаДокумента КАК ТаблицаДокумента)
		|				И Регистратор <> &Регистратор) КАК торо_ТекущееСостояниеОРСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ПоследниеСостояния.Период КАК Период
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеСостояния КАК ВТ_ПоследниеСостояния
		|		ПО ТаблицаДокумента.ОбъектРемонта = ВТ_ПоследниеСостояния.ОбъектРемонта
		|			И ТаблицаДокумента.ДатаОкончания < ВТ_ПоследниеСостояния.Период";
		
		Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru='Для объекта ремонта ""%1"" уже зарегистрировано состяние на более позднюю дату %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.Период);
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения, 1);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		СтруктураОтвета.Успех = Ложь;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НовыйДок.ИзМобильного = Истина;
	НовыйДок.Дата = СостояниеОР.Дата;
	НовыйДок.Комментарий = СостояниеОР.Комментарий;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(СостояниеОР.Подразделение);
	НовыйДок.Организация = Справочники.Организации.НайтиПоКоду(СостояниеОР.Организация);
	НовыйДок.ВидЭксплуатации = Справочники.торо_ВидыЭксплуатации.НайтиПоКоду(СостояниеОР.ВидЭксплуатации);
	НовыйДок.Ответственный = НайтиПользователя(СостояниеОР.Ответственный);
	НовыйДок.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
	
	Если ЗначениеЗаполнено(СостояниеОР.ДокументОснование) Тогда
		Если СостояниеОР.ТипДокументаОснования = "Акт" Тогда
			НовыйДок.ДокументОснование = Документы.торо_АктОВыполненииРегламентногоМероприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(СостояниеОР.ДокументОснование));
		ИначеЕсли СостояниеОР.ТипДокументаОснования = "Дефект" Тогда
			НовыйДок.ДокументОснование = Документы.торо_ВыявленныеДефекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СостояниеОР.ДокументОснование));
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок.ОбъектыРемонта.Загрузить(ТаблицаДокумента);
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьСостояниеОР");
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПередатьУчетКонтролируемыхПоказателей(УчетКонтролируемыхПоказателей, ПропуститьПроверки)
		
	Отказ = Ложь;
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();
	
	МетаданныеДокумента = Метаданные.Документы.торо_УчетКонтролируемыхПоказателей;
	
	Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
		СтруктураОтвета.Успех = Ложь;
		ТекстСообщения = НСтр("ru='Нет прав на чтение документов ""Учет контролируемых показателей"".'");
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	СсылкаНаДокумент = Документы.торо_УчетКонтролируемыхПоказателей.ПолучитьСсылку(Новый УникальныйИдентификатор(УчетКонтролируемыхПоказателей.Ссылка));
	НовыйДок = СсылкаНаДокумент.ПолучитьОбъект();
	Если НовыйДок <> Неопределено Тогда
		Если НЕ ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на изменение документов ""Учет контролируемых показателей"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок.Показатели.Очистить();
	Иначе
		Если НЕ ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на добавление документов ""Учет контролируемых показателей"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок = Документы.торо_УчетКонтролируемыхПоказателей.СоздатьДокумент();
		НовыйДок.УстановитьСсылкуНового(СсылкаНаДокумент);
	КонецЕсли;

	ТаблицаДокумента = Документы.торо_УчетКонтролируемыхПоказателей.ПустаяСсылка().Показатели.Выгрузить();
	Для каждого Показатель ИЗ УчетКонтролируемыхПоказателей.ТЧУчетКонтролируемыхПоказателей Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ОбъектРемонта = НайтиОРпоКоду(Показатель.ОбъектРемонта);
		НоваяСтрока.ДатаКонтроля = Показатель.ДатаКонтроля;
		НоваяСтрока.Показатель  = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.НайтиПоКоду(Показатель.Показатель);
		
		ЗначениеБезПрефикса = Прав(Показатель.Значение, СтрДлина(Показатель.Значение) - 1);
		ПрефиксЗначения = Лев(Показатель.Значение, 1);
		
		Если ПрефиксЗначения = "п" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта КАК торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
			               |ГДЕ
			               |	торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта.Код = &Код";
			
			Запрос.УстановитьПараметр("Код", ЗначениеБезПрефикса);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ЗначениеПоказателя = Выборка.Ссылка;
			
		КонецЕсли;
		
		Если ПрефиксЗначения = "ч" Тогда
			ЗначениеПоказателя = Число(ЗначениеБезПрефикса);
		КонецЕсли;
		
		НоваяСтрока.Значение = ЗначениеПоказателя;
	КонецЦикла;
	
	// Выполнить проверки, установить Отказ, если требуется.
	Если НЕ ПропуститьПроверки Тогда
		// ...
	КонецЕсли;
	
	Если Отказ Тогда
		СтруктураОтвета.Успех = Ложь;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НовыйДок.ИзМобильного = Истина;
	НовыйДок.Дата = УчетКонтролируемыхПоказателей.Дата;
	НовыйДок.Комментарий = УчетКонтролируемыхПоказателей.Комментарий;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(УчетКонтролируемыхПоказателей.Подразделение);
	НовыйДок.Организация = Справочники.Организации.НайтиПоКоду(УчетКонтролируемыхПоказателей.Организация);
	НовыйДок.Ответственный = НайтиПользователя(УчетКонтролируемыхПоказателей.Ответственный);
	
	Если ЗначениеЗаполнено(УчетКонтролируемыхПоказателей.ДокументОснование) Тогда
		НовыйДок.ДокументОснование = Документы.торо_АктОВыполненииРегламентногоМероприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(УчетКонтролируемыхПоказателей.ДокументОснование));
	КонецЕсли;
	
	НовыйДок.Показатели.Загрузить(ТаблицаДокумента);
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьКонтролируемыхПоказателей");
	
	Если НовыйДок.Проведен
		И ПолучитьФункциональнуюОпцию("торо_ИспользоватьРемонтыПоСостоянию") Тогда
		торо_РемонтыПоСостоянию.СформироватьУведомленияИДефекты(НовыйДок, Новый СписокЗначений());
	КонецЕсли;
	
	Возврат СтруктураОтвета;

КонецФункции

Функция ПередатьУчетНаработкиОборудования(УчетНаработкиОборудования, ПропуститьПроверки)
	
	Отказ = Ложь;
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();
		
	МетаданныеДокумента = Метаданные.Документы.торо_УчетНаработкиОборудования;
	
	Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
		СтруктураОтвета.Успех = Ложь;
		ТекстСообщения = НСтр("ru='Нет прав на чтение документов ""Учет наработки оборудования"".'");
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	СсылкаСуществующая = Ложь;
	СсылкаНаДокумент = Документы.торо_УчетНаработкиОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(УчетНаработкиОборудования.Ссылка));
	НовыйДок = СсылкаНаДокумент.ПолучитьОбъект();
	Если НовыйДок <> Неопределено Тогда
		Если НЕ ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на изменение документов ""Учет наработки оборудования"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		СсылкаСуществующая = Истина;
		НовыйДок.НаработкаОбъектов.Очистить();
		НовыйДок.НаработкаПодчиненныхОбъектов.Очистить();
	Иначе
		Если НЕ ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
			СтруктураОтвета.Успех = Ложь;
			ТекстСообщения = НСтр("ru='Нет прав на добавление документов ""Учет наработки оборудования"".'");
			ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		НовыйДок = Документы.торо_УчетНаработкиОборудования.СоздатьДокумент();
		НовыйДок.УстановитьСсылкуНового(СсылкаНаДокумент);
	КонецЕсли;
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ИерархияДляМобильногоПриложения",
				Истина);
	
	ТаблицаДокумента = Документы.торо_УчетНаработкиОборудования.ПустаяСсылка().НаработкаОбъектов.Выгрузить();
	МассивОР = Новый массив;
	МассивПоказателей = Новый массив;
	Для каждого Наработка ИЗ УчетНаработкиОборудования.ТЧУчетНаработкиОборудования Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.Объект = НайтиОРпоКоду(Наработка.ОбъектРемонта);
		НоваяСтрока.Показатель  = Справочники.ПараметрыВыработкиОС.НайтиПоКоду(Наработка.Показатель);
		НоваяСтрока.ДатаРаботыПо = Наработка.ДатаРаботыПо;
		НоваяСтрока.НовоеЗначение = Наработка.НовоеЗначение;
		НоваяСтрока.Наработка = Наработка.Наработка;
		НоваяСтрока.РаспространятьНаПодчиненных = Наработка.РаспространятьНаПодчиненных;
		НоваяСтрока.СтруктураИерархии = ТекСтруктураИерархии;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Объект) Тогда
      	МассивОР.Добавить(НоваяСтрока.Объект);
			МассивПоказателей.Добавить(НоваяСтрока.Показатель);
		КонецЕсли;
	КонецЦикла;	
	
	ТаблицаМаксЗначенийНаработки = ПолучитьМаксимальныеЗначенияНаработки(МассивОР, МассивПоказателей);
	ТаблицаМаксЗначенийНаработки.Индексы.Добавить("ОбъектРемонта, Показатель");
	ТаблицаНаработки = ПолучитьАктуальнуюНаработкуДляОР(МассивОР, МассивПоказателей, ?(СсылкаСуществующая, СсылкаНаДокумент, Неопределено)); 
	ТаблицаНаработки.Индексы.Добавить("ОбъектРемонта, Показатель");

	Для каждого СтрокаТабДокумента из ТаблицаДокумента Цикл
		СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель", СтрокаТабДокумента.Объект, СтрокаТабДокумента.Показатель);
		СтрокаНаработки = ТаблицаНаработки.НайтиСтроки(СтруктураПоиска);
		Если СтрокаНаработки.Количество() > 0 Тогда
			СтрокаНаработки = СтрокаНаработки[0];
			СтрокаТабДокумента.ДатаРаботыС = СтрокаНаработки.ДатаКон;
			СтрокаТабДокумента.СтароеЗначение = СтрокаНаработки.Наработка;
			
			Если СтрокаТабДокумента.ДатаРаботыС >= СтрокаТабДокумента.ДатаРаботыПо Тогда
				ШаблонСообщения = НСтр("ru='Для объекта ремонта ""%1"" и показателя ""%2"" уже введена наработка на более позднюю дату!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаТабДокумента.Объект, СтрокаТабДокумента.Показатель);
				ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
				
		Иначе
			СтрокаТабДокумента.ДатаРаботыС = СтрокаТабДокумента.Объект.ДатаВводаВЭксплуатацию;
			
			Если СтрокаТабДокумента.ДатаРаботыС >= СтрокаТабДокумента.ДатаРаботыПо Тогда
				ШаблонСообщения = НСтр("ru='Для объекта ремонта ""%1"" и показателя ""%2"" дата наработки меньше даты ввода в эксплуатацию!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаТабДокумента.Объект, СтрокаТабДокумента.Показатель);
				ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТабДокумента.ДатаРаботыС >= СтрокаТабДокумента.ДатаРаботыПо Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТабДокумента.НовоеЗначение <> 0 Тогда
			// Если задан только конечный остаток, то надо вычислить оборот
			
			Если СтрокаТабДокумента.НовоеЗначение >= СтрокаТабДокумента.СтароеЗначение Тогда
				СтрокаТабДокумента.Наработка = СтрокаТабДокумента.НовоеЗначение - СтрокаТабДокумента.СтароеЗначение;
			Иначе
				СтрокаМаксНаработки = ТаблицаМаксЗначенийНаработки.НайтиСтроки(СтруктураПоиска);
				Если СтрокаМаксНаработки.Количество() > 0 Тогда
					СтрокаМаксНаработки = СтрокаМаксНаработки[0];
					СтрокаТабДокумента.Наработка = (СтрокаМаксНаработки.МаксимальноеЗначение - СтрокаТабДокумента.СтароеЗначение)+СтрокаТабДокумента.НовоеЗначение;
				Иначе
					ШаблонСообщения = НСтр("ru='Для объекта ремонта ""%1"" и показателя ""%2"" новое значение наработки меньше, чем уже введенное в ТОиР!'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаТабДокумента.Объект, СтрокаТабДокумента.Показатель);
					ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Задан оборот, надо вычислить конечный остаток
			СтрокаТабДокумента.НовоеЗначение = СтрокаТабДокумента.СтароеЗначение + СтрокаТабДокумента.Наработка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		СтруктураОтвета.Успех = Ложь;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НовыйДок.ИзМобильного = Истина;	
	НовыйДок.Дата = УчетНаработкиОборудования.Дата;
	НовыйДок.Комментарий = УчетНаработкиОборудования.Комментарий;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(УчетНаработкиОборудования.Подразделение);
	НовыйДок.Организация = Справочники.Организации.НайтиПоКоду(УчетНаработкиОборудования.Организация);
	НовыйДок.Ответственный = НайтиПользователя(УчетНаработкиОборудования.Ответственный);
	
	Если ЗначениеЗаполнено(УчетНаработкиОборудования.ДокументОснование) Тогда
		НовыйДок.ДокументОснование = Документы.торо_АктОВыполненииРегламентногоМероприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(УчетНаработкиОборудования.ДокументОснование));
	КонецЕсли;
	
	НовыйДок.НаработкаОбъектов.Загрузить(ТаблицаДокумента);
	
	Если ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		БылиОшибки = Ложь;
		ТаблицаИерархииОР = торо_РаботаСИерархией20.ПолучитьТаблицуИерархии(ТекСтруктураИерархии,НовыйДок.Дата,Истина);
				
		Для каждого ТеСтрокаНаработки из НовыйДок.НаработкаОбъектов Цикл
			Если ТеСтрокаНаработки.РаспространятьНаПодчиненных Тогда
				ТекстОшибки = "";
				РаспространитьНаработкуНаПодчиненныхДляТекущейСтроки(НовыйДок, ТеСтрокаНаработки, ТаблицаИерархииОР, БылиОшибки, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьНаработки");
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПередатьФайлыДефекта(ВыявленныйДефект, ИдентификаторПакета, Комментарий)
	
	Попытка
		
		ВладелецФайла = Документы.торо_ВыявленныеДефекты.ПолучитьСсылку(Новый УникальныйИдентификатор(ВыявленныйДефект));
		
		Если ВладелецФайла.ПолучитьОбъект() = Неопределено Тогда
			Возврат "Error";
		КонецЕсли;
		
		ПараметрыФайла                = РаботаСФайлами.ПараметрыДобавленияФайла(Новый Структура());
		ПараметрыФайла.Автор          = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ВладелецФайлов = ВладелецФайла;
	
		ПутьКФайлуНаДиске = ПолучитьФайл(ИдентификаторПакета, ПараметрыФайла);
		ДобавитьФайл(ПараметрыФайла, ПутьКФайлуНаДиске, Комментарий);
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьФайлаДефекта",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";
	
КонецФункции

Функция ПередатьФайлыОР(КодОбъекта, ИдентификаторПакета, Комментарий)
	
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "СтруктураОтветаФайлы");
	СтруктураОтвета = ФабрикаXDTO.Создать(ТипСтруктуры);
	СтруктураОтвета.Успех = Ложь;
	СтруктураОтвета.УИДФайлаВБазеТОИР = "";
		
	Попытка
		
		СсылкаНаФайл = Неопределено;
		ВладелецФайла = НайтиОРпоКоду(КодОбъекта);

		Если ВладелецФайла.ПолучитьОбъект() = Неопределено Тогда
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		ПараметрыФайла                = РаботаСФайлами.ПараметрыДобавленияФайла(Новый Структура());
		ПараметрыФайла.Автор          = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ВладелецФайлов = ВладелецФайла;
	
		ПутьКФайлуНаДиске = ПолучитьФайл(ИдентификаторПакета, ПараметрыФайла);
		ДобавитьФайл(ПараметрыФайла, ПутьКФайлуНаДиске, Комментарий, СсылкаНаФайл);
 
		СтруктураОтвета.УИДФайлаВБазеТОИР = Строка(СсылкаНаФайл.УникальныйИдентификатор());
		СтруктураОтвета.Успех = Истина;
		
	Исключение 
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьТехническойДокументации", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат СтруктураОтвета;
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПередатьФайлыСостоянияОР(СостояниеОР, ИдентификаторПакета, Комментарий)
	
	Попытка

		ВладелецФайла = Документы.торо_СостоянияОбъектовРемонта.ПолучитьСсылку(Новый УникальныйИдентификатор(СостояниеОР));
		
		Если ВладелецФайла.ПолучитьОбъект() = Неопределено Тогда
			Возврат "Error";
		КонецЕсли;
		
		ПараметрыФайла                = РаботаСФайлами.ПараметрыДобавленияФайла(Новый Структура());
		ПараметрыФайла.Автор          = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ВладелецФайлов = ВладелецФайла;
	
		ПутьКФайлуНаДиске = ПолучитьФайл(ИдентификаторПакета, ПараметрыФайла);
		ДобавитьФайл(ПараметрыФайла, ПутьКФайлуНаДиске, Комментарий);		
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьФайлаСостоянияОР",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";

КонецФункции

Функция ПередатьФайлыУчетаПоказателей(УчетПоказателей, ИдентификаторПакета, Комментарий)
	
	Попытка
		
		ВладелецФайла = Документы.торо_УчетКонтролируемыхПоказателей.ПолучитьСсылку(Новый УникальныйИдентификатор(УчетПоказателей));
		
		Если ВладелецФайла.ПолучитьОбъект() = Неопределено Тогда
			Возврат "Error";
		КонецЕсли;
		
		ПараметрыФайла                = РаботаСФайлами.ПараметрыДобавленияФайла(Новый Структура());
		ПараметрыФайла.Автор          = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ВладелецФайлов = ВладелецФайла;
	
		ПутьКФайлуНаДиске = ПолучитьФайл(ИдентификаторПакета, ПараметрыФайла);
		ДобавитьФайл(ПараметрыФайла, ПутьКФайлуНаДиске, Комментарий);		
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьФайлаСостоянияОР",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";

КонецФункции

Функция ПередатьФайлыУчетаНаработки(УчетНаработки, ИдентификаторПакета, Комментарий)
	
	Попытка

		ВладелецФайла = Документы.торо_УчетНаработкиОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(УчетНаработки));
		
		Если ВладелецФайла.ПолучитьОбъект() = Неопределено Тогда
			Возврат "Error";
		КонецЕсли;
		
		ПараметрыФайла                = РаботаСФайлами.ПараметрыДобавленияФайла(Новый Структура());
		ПараметрыФайла.Автор          = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ВладелецФайлов = ВладелецФайла;
	
		ПутьКФайлуНаДиске = ПолучитьФайл(ИдентификаторПакета, ПараметрыФайла);
		ДобавитьФайл(ПараметрыФайла, ПутьКФайлуНаДиске, Комментарий);
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьФайлаСостоянияОР",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";

КонецФункции

Функция ПолучитьВидыПусковОР(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокВидовПусковОр");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ВидыПусковОр");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ВидыПусковОр, ТипФабрики, "торо_ВидыПусковОР");
	
	Если Список.ВидыПусковОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидыЭксплуатации(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокВидовЭксплуатации");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ВидыЭксплуатации");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ВидыЭксплуатации, ТипФабрики, "торо_ВидыЭксплуатации", , Истина);
	
	Если Список.ВидыЭксплуатации.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВыходныеДокументы_Регистр(Все, ИДУстройства)
		
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокВыходныеДокументы");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_ВыходныеДокументы");	
	Список = ФабрикаXDTO.Создать(ТипСписок);	
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = " ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                |	торо_ВыходныеДокументыИзменения.СписокОбъектов КАК СписокОбъектов,
	                |	торо_ВыходныеДокументыИзменения.ВидМероприятия КАК ВидМероприятия,
	                |	торо_ВыходныеДокументыИзменения.ВыходнойДокумент КАК ВыходнойДокумент
	                |ИЗ
	                |	РегистрСведений.торо_ВыходныеДокументы.Изменения КАК торо_ВыходныеДокументыИзменения
	                |ГДЕ
	                |	торо_ВыходныеДокументыИзменения.Узел = &Узел
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	СписокОбъектов,
	                |	ВидМероприятия,
	                |	ВыходнойДокумент";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + РазмерПакета);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ВыходныеДокументы.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.СписокОбъектов.Установить(Выборка.СписокОбъектов);
		НаборЗаписей.Отбор.ВидМероприятия.Установить(Выборка.ВидМероприятия);
		НаборЗаписей.Отбор.ВыходнойДокумент.Установить(Выборка.ВыходнойДокумент);
		НаборЗаписей.Прочитать(); 
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ДобавляемыйОбъект.СписокОбъектов = "Удалить_" + Строка(Выборка.СписокОбъектов.УникальныйИдентификатор());
			ДобавляемыйОбъект.ВидМероприятия = Строка(Выборка.ВидМероприятия.УникальныйИдентификатор());
			ДобавляемыйОбъект.ВыходнойДокумент = XMLСтрока(Выборка.ВыходнойДокумент);
			Список.рс_ВыходныеДокументы.Добавить(ДобавляемыйОбъект);
		Иначе 
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ДобавляемыйОбъект.СписокОбъектов = Строка(Выборка.СписокОбъектов.УникальныйИдентификатор());
			ДобавляемыйОбъект.ВидМероприятия = Строка(Выборка.ВидМероприятия.УникальныйИдентификатор());
			ДобавляемыйОбъект.ВыходнойДокумент = XMLСтрока(Выборка.ВыходнойДокумент);
			Список.рс_ВыходныеДокументы.Добавить(ДобавляемыйОбъект);
		КонецЕсли;
		
    КонецЦикла;

	Если Список.рс_ВыходныеДокументы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗарегистрированныеДефектыОР(ОбъектРемонта)
	
	ТипСписка = ФабрикаXDTO.Тип("android", "СписокДефектов");
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "ИнформацияОДефекте");
	СписокДефектов = ФабрикаXDTO.Создать(ТипСписка);
		
	ОбъектРемонтаСсылка = НайтиОРпоКоду(ОбъектРемонта);
	
	Если НЕ ЗначениеЗаполнено(ОбъектРемонтаСсылка) Тогда
		Возврат СписокДефектов;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ВыявленныеДефектыСрезПоследних.Период КАК ДатаОбнаружения,
	               |	торо_ВыявленныеДефектыСрезПоследних.Регистратор КАК Регистратор,
	               |	торо_ВыявленныеДефектыСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ВыявленныеДефектыСрезПоследних.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	торо_ВыявленныеДефектыСрезПоследних.ID КАК ID,
	               |	торо_ВыявленныеДефектыСрезПоследних.ДефектПричина КАК ДефектПричина,
	               |	торо_ВыявленныеДефектыСрезПоследних.ВидДефекта КАК ВидДефекта,
	               |	торо_ВыявленныеДефектыСрезПоследних.КритичностьДефекта КАК КритичностьДефекта,
	               |	торо_ВыявленныеДефектыСрезПоследних.ДефектОписание КАК ДефектОписание
	               |ПОМЕСТИТЬ ВТ_ВыявленныеДефекты
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(
	               |			,
	               |			ОбъектРемонта = &ОбъектРемонта
	               |				ИЛИ ОтказавшийЭлемент = &ОбъектРемонта) КАК торо_ВыявленныеДефектыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					ВТ_ВыявленныеДефекты.ID КАК ID
	               |				ИЗ
	               |					ВТ_ВыявленныеДефекты КАК ВТ_ВыявленныеДефекты)) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОтмененныеРемонтыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ОтмененныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ОтмененныеРемонты.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					ВТ_ВыявленныеДефекты.ID КАК ID
	               |				ИЗ
	               |					ВТ_ВыявленныеДефекты КАК ВТ_ВыявленныеДефекты)) КАК торо_ОтмененныеРемонтыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВыявленныеДефекты.ДатаОбнаружения КАК ДатаОбнаружения,
	               |	ВТ_ВыявленныеДефекты.Регистратор КАК Регистратор,
	               |	ВТ_ВыявленныеДефекты.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ВыявленныеДефекты.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	ВТ_ВыявленныеДефекты.ID КАК ID,
	               |	ВТ_ВыявленныеДефекты.ДефектПричина КАК ДефектПричина,
	               |	ВТ_ВыявленныеДефекты.ВидДефекта КАК ВидДефекта,
	               |	ВТ_ВыявленныеДефекты.КритичностьДефекта КАК КритичностьДефекта,
	               |	ВТ_ВыявленныеДефекты.ДефектОписание КАК ДефектОписание,
	               |	ВТ_ВыявленныеДефекты.Регистратор.Ответственный КАК Ответственный
	               |ИЗ
	               |	ВТ_ВыявленныеДефекты КАК ВТ_ВыявленныеДефекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗавершенныеРемонты КАК ВТ_ЗавершенныеРемонты
	               |		ПО ВТ_ВыявленныеДефекты.ID = ВТ_ЗавершенныеРемонты.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтмененныеРемонты КАК ВТ_ОтмененныеРемонты
	               |		ПО ВТ_ВыявленныеДефекты.ID = ВТ_ОтмененныеРемонты.ID
	               |ГДЕ
	               |	ВТ_ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |	И ВТ_ОтмененныеРемонты.ID ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонтаСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураДефекта = ФабрикаXDTO.Создать(ТипСтруктуры);
		СтруктураДефекта.ДатаОбнаружения = Выборка.ДатаОбнаружения;
		СтруктураДефекта.ОбъектРемонта = Строка(Выборка.ОбъектРемонта);
		СтруктураДефекта.ОтказавшийЭлемент = Строка(Выборка.ОтказавшийЭлемент);
		СтруктураДефекта.ДефектПричина = Строка(Выборка.ДефектПричина);
		СтруктураДефекта.ВидДефекта = Строка(Выборка.ВидДефекта);
		СтруктураДефекта.КритичностьДефекта = Строка(Выборка.КритичностьДефекта);
		СтруктураДефекта.ДефектОписание = Выборка.ДефектОписание;
		СтруктураДефекта.Ответственный = Строка(Выборка.Ответственный);
		СписокДефектов.Элементы.Добавить(СтруктураДефекта);
	КонецЦикла;
	
	Возврат СписокДефектов;
	
КонецФункции

Функция ПолучитьЗначенияИзмеряемыхПоказателейОР(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокЗначенийИзмеряемыхПоказателей");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЗначенияИзмеряемыхПоказателейОбъектовРемонта");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ЗначенияИзмеряемыхПоказателейОбъектовРемонта, ТипФабрики, "торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта",, Истина);
	
	Если Список.ЗначенияИзмеряемыхПоказателейОбъектовРемонта.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИзмеряемыеПоказатели(Все, ИДУстройства)
	
    ТипСписок = ФабрикаXDTO.Тип("android", "СписокИзмеряемыхПоказателей");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ИзмеряемыеПоказателиОбъектовРемонта");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ИзмеряемыеПоказателиОбъектовРемонта, ТипФабрики, "торо_ИзмеряемыеПоказателиОбъектовРемонта",, Истина);
	
	Если Список.ИзмеряемыеПоказателиОбъектовРемонта.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;

КонецФункции

Функция ПолучитьИзмеряемыеПоказателиОР_Регистр(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокИзмеряемыеПоказателиОР");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_ИзмеряемыеПоказателиОР");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонтаИзменения.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонтаИзменения.Показатель КАК Показатель
	               |ИЗ
	               |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.Изменения КАК торо_ИзмеряемыеПоказателиОбъектовРемонтаИзменения
	               |ГДЕ
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонтаИзменения.Узел = &Узел
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОбъектРемонта,
	               |	Показатель";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + РазмерПакета);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(Выборка.ОбъектРемонта);
		НаборЗаписей.Отбор.Показатель.Установить(Выборка.Показатель);
		НаборЗаписей.Прочитать();
		
		ТипОбъекта = "";
		Если ТипЗнч(НаборЗаписей.Отбор.ОбъектРемонта.Значение) = Тип("СправочникСсылка.торо_ТиповыеОР") Тогда 
			ТипОбъекта = "ТОР_";
		Иначе
			ТипОбъекта = "ОР_";
		КонецЕсли;
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ДобавляемыйОбъект.ОбъектРемонта = "Удалить_" + ТипОбъекта + Строка(НаборЗаписей.Отбор.ОбъектРемонта.Значение.УникальныйИдентификатор());
			ДобавляемыйОбъект.Показатель = Строка(НаборЗаписей.Отбор.Показатель.Значение.УникальныйИдентификатор());
			Список.рс_ИзмеряемыеПоказателиОР.Добавить(ДобавляемыйОбъект);
		Иначе
			Для каждого ТекущийОбъект из НаборЗаписей Цикл		
				ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
				ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта), ТипОбъекта + Строка(ТекущийОбъект.ОбъектРемонта.УникальныйИдентификатор()), 0);
				ДобавляемыйОбъект.Показатель = ?(ЗначениеЗаполнено(ТекущийОбъект.Показатель), Строка(ТекущийОбъект.Показатель.УникальныйИдентификатор()), 0);
				ДобавляемыйОбъект.КритическийМинимум = ?(ЗначениеЗаполнено(ТекущийОбъект.КритическийМинимум), ТекущийОбъект.КритическийМинимум, Неопределено);
				ДобавляемыйОбъект.КритическийМаксимум = ?(ЗначениеЗаполнено(ТекущийОбъект.КритическийМаксимум), ТекущийОбъект.КритическийМаксимум, Неопределено);
				ДобавляемыйОбъект.ДопустимыйМинимум = ?(ЗначениеЗаполнено(ТекущийОбъект.ДопустимыйМинимум), ТекущийОбъект.ДопустимыйМинимум, Неопределено);
				ДобавляемыйОбъект.ДопустимыйМаксимум = ?(ЗначениеЗаполнено(ТекущийОбъект.ДопустимыйМаксимум), ТекущийОбъект.ДопустимыйМаксимум, Неопределено);
				Список.рс_ИзмеряемыеПоказателиОР.Добавить(ДобавляемыйОбъект);			
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Список.рс_ИзмеряемыеПоказателиОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМаршрутыРегламентныхМероприятий_Регистр(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокМаршрутыРМ");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_МаршрутыРМ");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	торо_МаршрутыРегламентныхМероприятийИзменения.СписокОбъектов КАК СписокОбъектов,
	               |	торо_МаршрутыРегламентныхМероприятийИзменения.ОбъектРемонта КАК ОбъектРемонта
	               |ИЗ
	               |	РегистрСведений.торо_МаршрутыРегламентныхМероприятий.Изменения КАК торо_МаршрутыРегламентныхМероприятийИзменения
	               |ГДЕ
	               |	торо_МаршрутыРегламентныхМероприятийИзменения.Узел = &Узел
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СписокОбъектов,
	               |	ОбъектРемонта";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + РазмерПакета);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_МаршрутыРегламентныхМероприятий.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.СписокОбъектов.Установить(Выборка.СписокОбъектов);
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(Выборка.ОбъектРемонта);
		НаборЗаписей.Прочитать(); 
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ДобавляемыйОбъект.СписокОбъектов = "Удалить_" + Строка(Выборка.СписокОбъектов.УникальныйИдентификатор());
			ДобавляемыйОбъект.ОбъектРемонта = Строка(Выборка.ОбъектРемонта.УникальныйИдентификатор());
			ДобавляемыйОбъект.НомерПоПорядку = 0;
			Список.рс_МаршрутыРМ.Добавить(ДобавляемыйОбъект);	
		Иначе
			Для каждого ТекущийОбъект из НаборЗаписей Цикл
				ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
				ДобавляемыйОбъект.ОбъектРемонта = Строка(ТекущийОбъект.ОбъектРемонта.УникальныйИдентификатор());
				ДобавляемыйОбъект.СписокОбъектов = Строка(ТекущийОбъект.СписокОбъектов.УникальныйИдентификатор());
				ДобавляемыйОбъект.НомерПоПорядку = ТекущийОбъект.НомерПоПорядку;
				Список.рс_МаршрутыРМ.Добавить(ДобавляемыйОбъект);
			КонецЦикла;
		КонецЕсли;
	
    КонецЦикла;    
	
	Если Список.рс_МаршрутыРМ.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьНарядыНаРегламентноеМероприятие(Все, ИДУстройства)
	
	Подразделение = ПолучитьПодразделениеУстройства(ИДУстройства);
	
	Если Подразделение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокНарядовНаРМ");
	ТипФабрики = ФабрикаXDTO.Тип("android", "НарядыНаРМ");	
	ОперацииТипСписок = ФабрикаXDTO.Тип("android", "СписокРемонтныхРабот");
	ОперацииТипФабрики = ФабрикаXDTO.Тип("android", "РемонтныеРаботы");
	Список = ФабрикаXDTO.Создать(ТипСписок);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_РегламентныеМероприятия.ID КАК ID,
	               |	торо_РегламентныеМероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_РегламентныеМероприятия.ДатаНачала КАК ДатаНачала,
	               |	торо_РегламентныеМероприятия.ДатаОкончания КАК ДатаОкончания,
	               |	торо_РегламентныеМероприятия.МестоПроведенияРабот КАК МестоПроведенияРабот,
	               |	торо_РегламентныеМероприятия.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_РегламентныеМероприятия.ОпаснаяРабота КАК ОпаснаяРабота,
	               |	торо_РегламентныеМероприятия.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ДанныеНарядов
	               |ИЗ
	               |	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_РегламентныеМероприятия
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРМПланРемонтов
	               |		ПО торо_РегламентныеМероприятия.ДокументИсточник = торо_ГрафикРМПланРемонтов.Ссылка
	               |			И торо_РегламентныеМероприятия.ID = торо_ГрафикРМПланРемонтов.ID
				   |            И торо_ГрафикРМПланРемонтов.Исполнитель = &Подразделение
	               |ГДЕ
	               |	торо_РегламентныеМероприятия.Ссылка В(&МассивСсылок)
	               |	И торо_РегламентныеМероприятия.Ссылка.Проведен = ИСТИНА
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка,
	               |	ID";
	
	Если Все Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_РегламентныеМероприятия.Ссылка В(&МассивСсылок)", "ИСТИНА");	
	Иначе
		
		ТипМетаданных = Метаданные.Документы.торо_НарядНаРегламентноеМероприятие;
		
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		Если Не ЗначениеЗаполнено(Узел) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, 1, ТипМетаданных);
		
		МассивСсылок = Новый Массив;
		МассивОбъектов = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			Попытка
				ТекущийОбъект = Выборка.Получить();
			Исключение
				УдалитьРегистрациюИзмененийПривилегированно(Узел, Выборка);
				Продолжить;
			КонецПопытки;
			
			Если ТипЗнч(ТекущийОбъект) = Тип("УдалениеОбъекта") Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
				Продолжить;
			КонецЕсли;
			
			Если ТекущийОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(ТекущийОбъект.Ссылка);
			МассивОбъектов.Вставить(ТекущийОбъект.Ссылка, ТекущийОбъект);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыРемонтовСрезПоследних.IDРемонта КАК IDРемонта,
	               |	торо_СтатусыРемонтовСрезПоследних.Статус КАК СтатусРемонта
	               |ПОМЕСТИТЬ ВТ_Статусы
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыРемонтов.СрезПоследних(
	               |			,
	               |			IDРемонта В
	               |				(ВЫБРАТЬ
	               |					ВТ_ДанныеНарядов.ID КАК ID
	               |				ИЗ
	               |					ВТ_ДанныеНарядов КАК ВТ_ДанныеНарядов)) КАК торо_СтатусыРемонтовСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ДанныеНарядов.Ссылка КАК Ссылка,
	               |	ВТ_ДанныеНарядов.Ссылка.Дата КАК Дата,
	               |	ВТ_ДанныеНарядов.Ссылка.Номер КАК Номер,
	               |	ВТ_ДанныеНарядов.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	               |	ВТ_ДанныеНарядов.Ссылка.Проведен КАК Проведен,
	               |	ВТ_ДанныеНарядов.Ссылка.Организация КАК Организация,
	               |	ВТ_ДанныеНарядов.Ссылка.Организация.Код КАК ОрганизацияКод,
	               |	ВТ_ДанныеНарядов.Ссылка.Подразделение КАК Подразделение,
	               |	ВТ_ДанныеНарядов.Ссылка.Подразделение.Код КАК ПодразделениеКод,
				   |    ВТ_ДанныеНарядов.Ссылка.Комментарий КАК Комментарий,
	               |	ВТ_ДанныеНарядов.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ДанныеНарядов.ОбъектРемонта.Код КАК ОбъектРемонтаКод,
	               |	ВТ_ДанныеНарядов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ВТ_ДанныеНарядов.ВидРемонтныхРабот.Код КАК ВидРемонтныхРаботКод,
	               |	ВТ_ДанныеНарядов.ДатаНачала КАК ДатаНачала,
	               |	ВТ_ДанныеНарядов.ДатаОкончания КАК ДатаОкончания,
	               |	ВТ_ДанныеНарядов.ID КАК ID,
	               |	ВТ_ДанныеНарядов.МестоПроведенияРабот КАК МестоПроведенияРабот,
	               |	ВТ_ДанныеНарядов.ОпаснаяРабота КАК ОпаснаяРабота,
	               |	ВТ_Статусы.СтатусРемонта КАК СтатусДокумента
	               |ИЗ
	               |	ВТ_ДанныеНарядов КАК ВТ_ДанныеНарядов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Статусы КАК ВТ_Статусы
	               |		ПО ВТ_ДанныеНарядов.ID = ВТ_Статусы.IDРемонта
	               |ГДЕ
	               |	НЕ ВТ_Статусы.СтатусРемонта В (&СтатусВыполнен)
	               |ИТОГИ ПО
	               |	Ссылка";
	
	МассивВыполненныхСтатусов = Новый Массив;
	МассивВыполненныхСтатусов.Добавить(Перечисления.торо_СтатусыРемонтов.Выполнен);
		
	Запрос.УстановитьПараметр("СтатусВыполнен", МассивВыполненныхСтатусов);
	
	Результат = Запрос.Выполнить();
	ВыборкаНарядов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Сотрудники = ПолучитьСотрудникаДляТекущегоПользователя(Пользователи.ТекущийПользователь(), Истина);
	
	Пока ВыборкаНарядов.Следующий() Цикл
		
		Наряд = ВыборкаНарядов.Ссылка;
		ВыборкаРемонтов = ВыборкаНарядов.Выбрать();
		
		Пока ВыборкаРемонтов.Следующий() Цикл
			
			Если НЕ ПроверкаОтбораПоСотруднику(Наряд.Исполнители, ВыборкаРемонтов.ID, Сотрудники) Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			
			// Основная информация
			ДобавляемыйОбъект.Дата = ВыборкаРемонтов.Дата;
			ДобавляемыйОбъект.Номер = ВыборкаРемонтов.Номер;
			ДобавляемыйОбъект.ПометкаУдаления = ВыборкаРемонтов.ПометкаУдаления;
			ДобавляемыйОбъект.Проведен = ВыборкаРемонтов.Проведен;
			ДобавляемыйОбъект.УИДДокументаВБазеТОиР = Строка(Наряд.УникальныйИдентификатор());
			Попытка
				ДобавляемыйОбъект.Подразделение = ?(ЗначениеЗаполнено(ВыборкаРемонтов.ПодразделениеКод), ВыборкаРемонтов.ПодразделениеКод, 0);
			Исключение
				ДобавляемыйОбъект.Подразделение = 0;
			КонецПопытки;
			
			Попытка
				ДобавляемыйОбъект.Организация = ?(ЗначениеЗаполнено(ВыборкаРемонтов.ОрганизацияКод), ВыборкаРемонтов.ОрганизацияКод, 0);
			Исключение
				ДобавляемыйОбъект.Организация = 0;
			КонецПопытки;
			ДобавляемыйОбъект.Комментарий = ВыборкаРемонтов.Комментарий;
						
			// Ремонт оборудования
			ДобавляемыйОбъект.ID = ВыборкаРемонтов.ID;
			ДобавляемыйОбъект.ОбъектРемонта = Строка(ВыборкаРемонтов.ОбъектРемонта.УникальныйИдентификатор());
			ДобавляемыйОбъект.ВидРемонта = ВыборкаРемонтов.ВидРемонтныхРаботКод;
			ДобавляемыйОбъект.ДатаНачала = ВыборкаРемонтов.ДатаНачала;
			ДобавляемыйОбъект.ДатаОкончания = ВыборкаРемонтов.ДатаОкончания;
			ДобавляемыйОбъект.МестоПроведенияРабот = ВыборкаРемонтов.МестоПроведенияРабот;
			ДобавляемыйОбъект.ОпаснаяРабота = ВыборкаРемонтов.ОпаснаяРабота;

			// Операции
			Операции = ФабрикаXDTO.Создать(ОперацииТипСписок);
			
			РемРаботы = Наряд.РемонтныеРаботы;
			
			Для Каждого Работа Из РемРаботы Цикл
				
				Если Не Работа.РемонтыОборудования_ID = ВыборкаРемонтов.ID Тогда
					Продолжить;
				КонецЕсли;
				
				Операция = ФабрикаXDTO.Создать(ОперацииТипФабрики);
				
				Операция.ID = Работа.ID;
				Операция.Родитель_ID = Работа.Родитель_ID;
				Операция.ID_ПараллельнойОперации = Работа.ID_ПараллельнойОперации;
				Операция.Количество = Работа.Количество;
				Операция.Картинка = Работа.Картинка;
				
				Префикс = "";
				
				Если ТипЗнч(Работа.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
					Префикс = "о";
				ИначеЕсли ТипЗнч(Работа.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					Префикс = "т";
				КонецЕсли;
				
				Операция.РемонтнаяРабота = Префикс + Работа.РемонтнаяРабота.Код;
				Операции.РемонтныеРаботы.Добавить(Операция);
				
			КонецЦикла;
			
			ДобавляемыйОбъект.Операции = Операции;
			Список.НарядыНаРМ.Добавить(ДобавляемыйОбъект);

	КонецЦикла;
	
		
		Если Не Все Тогда
			Если Не МассивОбъектов[Наряд] = Неопределено Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, МассивОбъектов[Наряд]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Список.НарядыНаРМ.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНарядыНаУдаление(СписокИДНарядов, ИДУстройства)
	
	ТаблицаНарядов = Новый ТаблицаЗначений;
	ТаблицаНарядов.Колонки.Добавить("Наряд", Новый ОписаниеТипов("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"));
	ТаблицаНарядов.Колонки.Добавить("УИДДокументаВБазеТОиР", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	ТаблицаНарядов.Колонки.Добавить("ИДРемонта", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	
	Для каждого Элемент из СписокИДНарядов.Элементы Цикл
		СсылкаНаДокумент = Документы.торо_НарядНаРегламентноеМероприятие.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.УИДДокументаВБазеТОиР));
		НоваяСтрока = ТаблицаНарядов.Добавить();
		НоваяСтрока.Наряд = СсылкаНаДокумент;
		НоваяСтрока.УИДДокументаВБазеТОиР = Элемент.УИДДокументаВБазеТОиР;
		НоваяСтрока.ИДРемонта = Элемент.ИДРемонта;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаНарядов.Наряд КАК Наряд,
	               |	ТаблицаНарядов.УИДДокументаВБазеТОиР КАК УИДДокументаВБазеТОиР,
	               |	ТаблицаНарядов.ИДРемонта КАК ИДРемонта
	               |ПОМЕСТИТЬ ТаблицаНарядов
	               |ИЗ
	               |	&ТаблицаНарядов КАК ТаблицаНарядов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Наряд,
	               |	ИДРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТаблицаНарядов.Наряд КАК Наряд,
	               |	ТаблицаНарядов.УИДДокументаВБазеТОиР КАК УИДДокументаВБазеТОиР,
	               |	ТаблицаНарядов.ИДРемонта КАК ИДРемонта,
	               |	ВЫБОР
	               |		КОГДА торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Удалить
	               |ИЗ
	               |	ТаблицаНарядов КАК ТаблицаНарядов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
	               |		ПО ТаблицаНарядов.Наряд = торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка
	               |			И ТаблицаНарядов.ИДРемонта = торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID
	               |			И (торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.Проведен)";
	
	Запрос.УстановитьПараметр("ТаблицаНарядов", ТаблицаНарядов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокИДНарядовНаУдаление");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ИДНарядаНаУдаление");
	
	Список = ФабрикаXDTO.Создать(ТипСписок);

	Пока Выборка.Следующий() Цикл
		ЭлементСписка = ФабрикаXDTO.Создать(ТипФабрики);
		ЭлементСписка.УИДДокументаВБазеТОиР = Выборка.УИДДокументаВБазеТОиР;
		ЭлементСписка.ИДРемонта = Выборка.ИДРемонта;
		ЭлементСписка.Удалить = Выборка.Удалить;
		
		Список.Элементы.Добавить(ЭлементСписка);
	КонецЦикла;
	
	Если Список.Элементы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНезакрытыеДефекты(ИнформацияОДефекте)
	
	ТипСписка = ФабрикаXDTO.Тип("android", "СписокДефектов");
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "ИнформацияОДефекте");
	СписокДефектов = ФабрикаXDTO.Создать(ТипСписка);
		
	ОбъектРемонта = НайтиОРпоКоду(ИнформацияОДефекте.ОбъектРемонта);
	ОтказавшийЭлемент = НайтиОРпоКоду(ИнформацияОДефекте.ОтказавшийЭлемент);
	ВидДефекта = Справочники.торо_ВидыДефектов.НайтиПоКоду(ИнформацияОДефекте.ВидДефекта);
	
	Если НЕ ЗначениеЗаполнено(ОбъектРемонта) ИЛИ Не ЗначениеЗаполнено(ОтказавшийЭлемент) 
		ИЛИ НЕ ЗначениеЗаполнено(ВидДефекта) Тогда
		Возврат СписокДефектов;
	КонецЕсли;
	
	Если ИнформацияОДефекте.Ссылка <> "" Тогда
		СсылкаНаДокумент = Документы.торо_ВыявленныеДефекты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИнформацияОДефекте.Ссылка));
	Иначе
		СсылкаНаДокумент = Неопределено;
	КонецЕсли;
	
	КритичностьДефекта = Справочники.торо_КритичностьДефекта.НайтиПоКоду(ИнформацияОДефекте.КритичностьДефекта);
	ДатаОбнаружения = ИнформацияОДефекте.ДатаОбнаружения;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ВыявленныеДефектыСрезПоследних.Период КАК ДатаОбнаружения,
	               |	торо_ВыявленныеДефектыСрезПоследних.Регистратор КАК Регистратор,
	               |	торо_ВыявленныеДефектыСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ВыявленныеДефектыСрезПоследних.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	торо_ВыявленныеДефектыСрезПоследних.ID КАК ID,
	               |	торо_ВыявленныеДефектыСрезПоследних.ДефектПричина КАК ДефектПричина,
	               |	торо_ВыявленныеДефектыСрезПоследних.ВидДефекта КАК ВидДефекта,
	               |	торо_ВыявленныеДефектыСрезПоследних.КритичностьДефекта КАК КритичностьДефекта,
	               |	торо_ВыявленныеДефектыСрезПоследних.ДефектОписание КАК ДефектОписание
	               |ПОМЕСТИТЬ ВТ_ВыявленныеДефекты
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(
	               |			,
	               |			ОбъектРемонта = &ОбъектРемонта
	               |				И ОтказавшийЭлемент = &ОтказавшийЭлемент
	               |				И Регистратор <> &Ссылка) КАК торо_ВыявленныеДефектыСрезПоследних
	               |ГДЕ
	               |	торо_ВыявленныеДефектыСрезПоследних.ВидДефекта = &ВидДефекта
	               |	И торо_ВыявленныеДефектыСрезПоследних.КритичностьДефекта = &КритичностьДефекта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					ВТ_ВыявленныеДефекты.ID КАК ID
	               |				ИЗ
	               |					ВТ_ВыявленныеДефекты КАК ВТ_ВыявленныеДефекты)) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОтмененныеРемонтыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ОтмененныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ОтмененныеРемонты.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					ВТ_ВыявленныеДефекты.ID КАК ID
	               |				ИЗ
	               |					ВТ_ВыявленныеДефекты КАК ВТ_ВыявленныеДефекты)) КАК торо_ОтмененныеРемонтыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВыявленныеДефекты.ДатаОбнаружения КАК ДатаОбнаружения,
	               |	ВТ_ВыявленныеДефекты.Регистратор КАК Регистратор,
	               |	ВТ_ВыявленныеДефекты.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ВыявленныеДефекты.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	ВТ_ВыявленныеДефекты.ID КАК ID,
	               |	ВТ_ВыявленныеДефекты.ДефектПричина КАК ДефектПричина,
	               |	ВТ_ВыявленныеДефекты.ВидДефекта КАК ВидДефекта,
	               |	ВТ_ВыявленныеДефекты.КритичностьДефекта КАК КритичностьДефекта,
	               |	ВТ_ВыявленныеДефекты.ДефектОписание КАК ДефектОписание,
	               |	ВТ_ВыявленныеДефекты.Регистратор.Ответственный КАК Ответственный
	               |ИЗ
	               |	ВТ_ВыявленныеДефекты КАК ВТ_ВыявленныеДефекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗавершенныеРемонты КАК ВТ_ЗавершенныеРемонты
	               |		ПО ВТ_ВыявленныеДефекты.ID = ВТ_ЗавершенныеРемонты.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтмененныеРемонты КАК ВТ_ОтмененныеРемонты
	               |		ПО ВТ_ВыявленныеДефекты.ID = ВТ_ОтмененныеРемонты.ID
	               |ГДЕ
	               |	ВТ_ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |	И ВТ_ОтмененныеРемонты.ID ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ОтказавшийЭлемент", ОтказавшийЭлемент);
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ВидДефекта", ВидДефекта);
	
	Если ЗначениеЗаполнено(КритичностьДефекта) Тогда
		Запрос.УстановитьПараметр("КритичностьДефекта", КритичностьДефекта);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ВыявленныеДефектыСрезПоследних.КритичностьДефекта = &КритичностьДефекта", "ИСТИНА");
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураДефекта = ФабрикаXDTO.Создать(ТипСтруктуры);
		СтруктураДефекта.ДатаОбнаружения = Выборка.ДатаОбнаружения;
		СтруктураДефекта.ОбъектРемонта = Строка(Выборка.ОбъектРемонта);
		СтруктураДефекта.ОтказавшийЭлемент = Строка(Выборка.ОтказавшийЭлемент);
		СтруктураДефекта.ДефектПричина = Строка(Выборка.ДефектПричина);
		СтруктураДефекта.ВидДефекта = Строка(Выборка.ВидДефекта);
		СтруктураДефекта.КритичностьДефекта = Строка(Выборка.КритичностьДефекта);
		СтруктураДефекта.ДефектОписание = Выборка.ДефектОписание;
		СтруктураДефекта.Ответственный = Строка(Выборка.Ответственный);
		СписокДефектов.Элементы.Добавить(СтруктураДефекта);
	КонецЦикла;
	
	Возврат СписокДефектов;
	
КонецФункции

Функция ПолучитьОсобыеОР()
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокСсылокОР");
	ТипФабрики = ФабрикаXDTO.Тип("android", "СсылкаОР");	
	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	// Получение списка ОР
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта.Код КАК Код,
	               |	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент.Код КАК КодОЭ,
	               |	торо_ВыявленныеДефекты.ДатаОбнаружения КАК ДатаОбнаружения
	               |ИЗ
	               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	               |		ПО торо_ВыявленныеДефектыСписокДефектов.Ссылка = торо_ВыявленныеДефекты.Ссылка
	               |ГДЕ
	               |	торо_ВыявленныеДефекты.Проведен
	               |	И НЕ торо_ВыявленныеДефектыСписокДефектов.ID В
	               |				(ВЫБРАТЬ
	               |					торо_ЗавершенныеРемонтныеРаботы.ID КАК ID
	               |				ИЗ
	               |					РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Код = Null Тогда 
			ОР = ФабрикаXDTO.Создать(ТипФабрики);
			ОР.Код = Выборка.Код;
			ОР.КодОЭ = Выборка.КодОЭ;
			ОР.ДатаВД = Выборка.ДатаОбнаружения;
			Список.ОбъектыРемонта.Добавить(ОР);
		КонецЕсли;
	КонецЦикла;
	
	Если Список.ОбъектыРемонта.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПорядокОР(Все, ИДУстройства, ИДСтруктуры)
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	СтруктураИерархии = Справочники.торо_СтруктурыОР.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтруктуры));
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокПорядокОР");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_ПорядокОР");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                |	торо_ПорядокОРПоИерархииИзменения.ОбъектРемонта КАК ОбъектРемонта,
	                |	торо_ПорядокОРПоИерархииИзменения.СтруктураИерархии КАК СтруктураИерархии
	                |ИЗ
	                |	РегистрСведений.торо_ПорядокОРПоИерархии.Изменения КАК торо_ПорядокОРПоИерархииИзменения
	                |ГДЕ
	                |	торо_ПорядокОРПоИерархииИзменения.Узел = &Узел";
	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + РазмерПакета);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивОР = Новый Массив;
	МассивОРСРеквизитом = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(Выборка.ОбъектРемонта);
		НаборЗаписей.Отбор.СтруктураИерархии.Установить(Выборка.СтруктураИерархии);
		НаборЗаписей.Прочитать();
		
		Если Выборка.СтруктураИерархии <> СтруктураИерархии Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		ДобавитьОРВМассив(МассивОР, НаборЗаписей.Отбор.ОбъектРемонта.Значение);   				
		
		Для каждого ТекущийОбъект из НаборЗаписей Цикл		
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта), Строка(ТекущийОбъект.ОбъектРемонта.УникальныйИдентификатор()), 0);
			ДобавляемыйОбъект.РеквизитДопУпорядочивания = ТекущийОбъект.РеквизитДопУпорядочиванияОР;
			Список.рс_ПорядокОР.Добавить(ДобавляемыйОбъект);
			
			ДобавитьОРВМассив(МассивОРСРеквизитом, ТекущийОбъект.ОбъектРемонта); 
		КонецЦикла;

	КонецЦикла;
	
	МассивОРБезРеквизита = ПолучитьМассивНеповторяющихсяЭлементов(МассивОРСРеквизитом, МассивОР);
	Если МассивОРБезРеквизита.Количество() > 0 Тогда
		Для каждого ОР Из МассивОРБезРеквизита Цикл
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ДобавляемыйОбъект.ОбъектРемонта = Строка(ОР.УникальныйИдентификатор());
			ДобавляемыйОбъект.РеквизитДопУпорядочивания = "None";
			Список.рс_ПорядокОР.Добавить(ДобавляемыйОбъект);
		КонецЦикла;
	КонецЕсли;
	
	Если Список.рс_ПорядокОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;

КонецФункции

Функция ПолучитьПараметрыВыработки(Все, ИДУстройства)
		
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПараметровВыработкиОС");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПараметрыВыработкиОС");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ПараметрыВыработкиОС, ТипФабрики, "ПараметрыВыработкиОС");
				
	Если Список.ПараметрыВыработкиОС.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;

КонецФункции

Функция ПолучитьПараметрыНаработкиОР_Регистр(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокПараметрыНаработки");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_ПараметрыНаработки");	
	Список = ФабрикаXDTO.Создать(ТипСписок); 
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	Количество = 0;
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта);
	
	Пока Выборка.Следующий() Цикл
		
		Количество = Количество + 1;
		Если Количество > РазмерПакета Тогда
			Прервать;
		КонецЕсли;
		
		НаборЗаписей = Выборка.Получить();	
		
		Если ТипЗнч(НаборЗаписей) = Тип("УдалениеОбъекта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(НаборЗаписей.Отбор.ОбъектРемонта.Значение) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.торо_ПараметрыНаработкиОбъектовРемонта") Тогда
			
			Если НаборЗаписей.Количество() = 0 Тогда
				ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
				ДобавляемыйОбъект.ОбъектРемонта = "Удалить_" + Строка(НаборЗаписей.Отбор.ОбъектРемонта.Значение.УникальныйИдентификатор());
				ДобавляемыйОбъект.Показатель = Строка(НаборЗаписей.Отбор.Показатель.Значение.УникальныйИдентификатор());
				ДобавляемыйОбъект.Период = НаборЗаписей.Отбор.Период.Значение;
				ДобавляемыйОбъект.ПериодПлановойНаработки = "None";
				ДобавляемыйОбъект.ПлановаяНаработка = "None";
				ДобавляемыйОбъект.ПродолжительностьПериодаПлановойНаработки = "None";
				ДобавляемыйОбъект.КоэффициентИспользованияОборудования = "None";
				Список.рс_ПараметрыНаработки.Добавить(ДобавляемыйОбъект);
			Иначе
				Для каждого ТекущийОбъект из НаборЗаписей Цикл				
					ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
					ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта), Строка(ТекущийОбъект.ОбъектРемонта.УникальныйИдентификатор()), 0);
					ДобавляемыйОбъект.Показатель = ?(ЗначениеЗаполнено(ТекущийОбъект.Показатель), Строка(ТекущийОбъект.Показатель.УникальныйИдентификатор()), 0);
					ДобавляемыйОбъект.ПериодПлановойНаработки = Строка(ТекущийОбъект.ПериодПлановойНаработки);
					ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект,ТекущийОбъект,"Период, ПлановаяНаработка, ПродолжительностьПериодаПлановойНаработки,КоэффициентИспользованияОборудования");
					Список.рс_ПараметрыНаработки.Добавить(ДобавляемыйОбъект);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Список.рс_ПараметрыНаработки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнююНаработку(ОбъектРемонта, Показатель, РегистраторИсключение)
		
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "СтруктураПоследнейНаработки");
	СтруктураВозврата = ФабрикаXDTO.Создать(ТипСтруктуры);
	
	ОбъектРемонтаСсылка = НайтиОРпоКоду(ОбъектРемонта);
	ПоказательСсылка = Справочники.ПараметрыВыработкиОС.НайтиПоКоду(Показатель);
	Если НЕ ЗначениеЗаполнено(ОбъектРемонтаСсылка) ИЛИ НЕ ЗначениеЗаполнено(ПоказательСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистраторИсключение) Тогда
		СсылкаНаДокумент = Документы.торо_УчетНаработкиОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(РегистраторИсключение));
	Иначе
		СсылкаНаДокумент = Неопределено;
	КонецЕсли;

	СтруктураВозврата.ПоказательКод = Показатель;
	СтруктураВозврата.ПоказательНаименование = ПоказательСсылка.Наименование;
	
	ТаблицаНаработки = ПолучитьАктуальнуюНаработкуДляОР(ОбъектРемонтаСсылка, ПоказательСсылка, СсылкаНаДокумент);
	Если ТаблицаНаработки.Количество() > 0 Тогда
		СтруктураВозврата.Наработка = ТаблицаНаработки[0].Наработка;
		СтруктураВозврата.Период = ТаблицаНаработки[0].ДатаКон;
	Иначе
		СтруктураВозврата.Наработка = 0;
		СтруктураВозврата.Период = ОбъектРемонтаСсылка.ДатаВводаВЭксплуатацию;
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ПолучитьПоследнююНаработкуОР(ОбъектРемонта)
	
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "СтруктураПоследнейНаработки");
	ТипСписка = ФабрикаXDTO.Тип("android", "СписокПоследнейНаработки");
	Список = ФабрикаXDTO.Создать(ТипСписка);
	
	ОбъектРемонтаСсылка = НайтиОРпоКоду(ОбъектРемонта);
	Если НЕ ЗначениеЗаполнено(ОбъектРемонтаСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПоказателей = ПолучитьСписокПоказателейНаработкиОР(ОбъектРемонтаСсылка);
	
	ТаблицаНаработки = ПолучитьАктуальнуюНаработкуДляОР(ОбъектРемонтаСсылка, МассивПоказателей, Неопределено);
	Для каждого СтрокаНаработки из ТаблицаНаработки Цикл
		Структура = ФабрикаXDTO.Создать(ТипСтруктуры);
		Структура.Наработка = СтрокаНаработки.Наработка;
		Структура.Период = СтрокаНаработки.ДатаКон;
		Структура.ПоказательКод = СтрокаНаработки.Показатель.Код;
		Структура.ПоказательНаименование = СтрокаНаработки.Показатель.Наименование;
		Список.Элементы.Добавить(Структура);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьПричиныПростоев(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПричинПростоев");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПричиныПростояОборудования");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ПричиныПростояОборудования, ТипФабрики, "торо_ПричиныПростояОборудования",,Истина);
	
	Если Список.ПричиныПростояОборудования.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;

КонецФункции

Функция ПолучитьСпискиОбъектовРМ(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокСписковОРМ");
	ТипФабрики = ФабрикаXDTO.Тип("android", "СписокОбъектовРМ");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.СписокОбъектовРМ, ТипФабрики, "торо_СписокОбъектовРегламентногоМероприятия",,Истина);
	
	Если Список.СписокОбъектовРМ.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТиповыеДефекты(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокТиповыхДефектовОборудования");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ТиповыеДефектыОборудования");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Все, ИДУстройства, Список.ТиповыеДефектыОборудования, ТипФабрики, "торо_ТиповыеДефектыОборудования",,Истина);
	
	Если Список.ТиповыеДефектыОборудования.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФОУчетПусковОборудования()
	Возврат ПолучитьФункциональнуюОпцию("торо_УчетПусковОборудования");
КонецФункции

Функция НайтиСписокОбъектовНаРМроКоду(Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СписокОбъектовРегламентногоМероприятия.Ссылка
	|ИЗ
	|	Справочник.торо_СписокОбъектовРегламентногоМероприятия КАК торо_СписокОбъектовРегламентногоМероприятия
	|ГДЕ
	|	торо_СписокОбъектовРегламентногоМероприятия.Код = &Код
	|	И торо_СписокОбъектовРегламентногоМероприятия.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Код", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка();

КонецФункции

Функция ПолучитьАктуальнуюНаработкуДляОР(СписокОР, СписокПоказателей, РегистраторИсключение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_НаработкаОбъектовРемонтаОбороты.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_НаработкаОбъектовРемонтаОбороты.Показатель КАК Показатель,
	|	СУММА(торо_НаработкаОбъектовРемонтаОбороты.НаработкаОборот) КАК Наработка
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ОбъектРемонта В (&СписокОР)
	|				И Показатель В (&СписокПоказателей)) КАК торо_НаработкаОбъектовРемонтаОбороты
	|ГДЕ
	|	торо_НаработкаОбъектовРемонтаОбороты.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_НаработкаОбъектовРемонтаОбороты.ОбъектРемонта,
	|	торо_НаработкаОбъектовРемонтаОбороты.Показатель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПериодыНаработкиОРСрезПоследних.Период КАК ДатаКон,
	|	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_Даты
	|ИЗ
	|	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(
	|			,
	|			ОбъектРемонта В (&СписокОР)
	|				И Показатель В (&СписокПоказателей)
	|				И Регистратор <> &Регистратор) КАК торо_ПериодыНаработкиОРСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Даты.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_Даты.Показатель КАК Показатель,
	|	ВТ_Даты.ДатаКон КАК ДатаКон,
	|	ЕСТЬNULL(ВТ_Остатки.Наработка, 0) КАК Наработка
	|ИЗ
	|	ВТ_Даты КАК ВТ_Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО (ВТ_Остатки.ОбъектРемонта = ВТ_Даты.ОбъектРемонта)
	|			И (ВТ_Остатки.Показатель = ВТ_Даты.Показатель)";
	
	Запрос.УстановитьПараметр("СписокОР", СписокОР);
	Запрос.УстановитьПараметр("СписокПоказателей", СписокПоказателей);
	Запрос.УстановитьПараметр("Регистратор", РегистраторИсключение);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМаксимальныеЗначенияНаработки(СписокОР, СписокПоказателей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_МаксимальныеЗначенияНаработкиОР.Показатель КАК Показатель,
	|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение КАК МаксимальноеЗначение
	|ИЗ
	|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|ГДЕ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта В(&СписокОР)
	|	И торо_МаксимальныеЗначенияНаработкиОР.Показатель В(&СписокПоказателей)";
	
	Запрос.УстановитьПараметр("СписокОР", СписокОР);
	Запрос.УстановитьПараметр("СписокПоказателей", СписокПоказателей);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокПоказателейНаработкиОР(ОбъектРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель
	|ПОМЕСТИТЬ ПоказателиОР
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	|ГДЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРодителей.Родитель КАК Родитель
	|ПОМЕСТИТЬ ТаблицаРодителей
	|ИЗ
	|	&ТаблицаРодителей КАК ТаблицаРодителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель
	|ПОМЕСТИТЬ ПоказателиГрупп
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ТаблицаРодителей.Родитель
	|				ИЗ
	|					ТаблицаРодителей КАК ТаблицаРодителей)) КАК торо_ПараметрыНаработкиОбъектовРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиОР.Показатель КАК Показатель
	|ИЗ
	|	ПоказателиОР КАК ПоказателиОР
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПоказателиГрупп.Показатель
	|ИЗ
	|	ПоказателиГрупп КАК ПоказателиГрупп";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	
	СписокТиповых = Новый Массив;
	Если ЗначениеЗаполнено(ОбъектРемонта.ТиповойОР) Тогда
		СписокТиповых.Добавить(ОбъектРемонта.ТиповойОР);
	КонецЕсли;
	ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейСпискаОбъектов(СписокТиповых, Тип("СправочникСсылка.торо_ТиповыеОР"), Истина);
	
	Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Показатель");
	
КонецФункции

Функция ПолучитьСотрудникаДляТекущегоПользователя(ТекПользователь, ПолучитьВсехСотрудников = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Сотрудники.Ссылка КАК Сотрудник
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	               |		ПО Пользователи.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	               |ГДЕ
	               |	Пользователи.Ссылка = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	
	Результат = Запрос.Выполнить();
	
	Если ПолучитьВсехСотрудников Тогда
		Возврат Результат.Выгрузить();
	Иначе
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Сотрудник;
		КонецЕсли;
		
		Возврат Справочники.Сотрудники.ПустаяСсылка();	
	КонецЕсли;
	
КонецФункции

Процедура РаспространитьНаработкуНаПодчиненныхДляТекущейСтроки(Объект, ТекСтрокаНаработкаОбъектов, ТаблицаИерархииОР, мОтказ = Ложь, ТекстОшибки = "")
			
	ТаблицаПодчиненныхОР = торо_РаботаСНаработкой.ПолучитьЗависимыеОР(ТаблицаИерархииОР, ТекСтрокаНаработкаОбъектов.Объект, Неопределено, ТекСтрокаНаработкаОбъектов.ДатаРаботыС, ТекСтрокаНаработкаОбъектов.ДатаРаботыПо, ТекСтрокаНаработкаОбъектов.Показатель);
	
	Для Каждого СтрокаСНаработкой Из Объект.НаработкаОбъектов Цикл
		Если ТаблицаПодчиненныхОР.НайтиСтроки(Новый Структура("ОбъектИерархии,Показатель", СтрокаСНаработкой.Объект,СтрокаСНаработкой.Показатель)).Количество() = 0 Тогда
			Продолжить;
		Иначе
			ШаблонСообщения = НСтр("ru = 'Невозможно распространить наработку на подчиненные объекты ремонта. Объект ремонта ""%1"" встречается повторно среди подчиненных объектов ремонта объекта ""%2"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСНаработкой.Объект, ТекСтрокаНаработкаОбъектов.Объект);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, мОтказ);
			
		КонецЕсли;
	КонецЦикла; 
	
	Если Не мОтказ Тогда
		ТабЗначенийНаработки = торо_РаботаСНаработкой.ТекущееЗначениеНаработкиТаблица(ТаблицаПодчиненныхОР, Объект.Ссылка);
	
		НеобходимаСинхронизация = Ложь;
		Для Каждого СтрПодчиненнаяНаработка Из ТабЗначенийНаработки Цикл
			Если СтрПодчиненнаяНаработка.НаработаноДата <> СтрПодчиненнаяНаработка.ДатаНачала Тогда
				НеобходимаСинхронизация = Истина;
				//ТекСтрокаНаработкаОбъектов.Синхронизировать = Истина;
				ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных = Ложь;
				мОтказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НеобходимаСинхронизация Тогда
			ШаблонСообщения = НСтр("ru = 'Для распространения наработки на подчиненные ""%1"" ОР необходимо выполнить синхронизацию периодов регистрации наработки!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСНаработкой.Объект);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Иначе
			СтруктураДляПередачи = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, Наработка");
			ЗаполнитьЗначенияСвойств(СтруктураДляПередачи, ТекСтрокаНаработкаОбъектов);
			торо_РаботаСНаработкой.РаспространитьНаработкуНаПодчиненныхДляТекСтроки(СтруктураДляПередачи, ТабЗначенийНаработки, ТаблицаПодчиненныхОР, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Если мОтказ Тогда
		ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ПередатьФункцииПриложения(ИмяПользователя, ИДУстройства, ИспользоватьЗаявки, ИспользоватьРегламентныеМероприятия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат Неопределено;
	Иначе
		ОбъектУзла = Узел.ПолучитьОбъект();
		ОбъектУзла.ДатаПоследнегоСоединения = ТекущаяДата();
		
		Если НЕ ИмяПользователя = Узел.ПоследнийПользователь Тогда
			ОбъектУзла.ПоследнийПользователь = ИмяПользователя;
		КонецЕсли;

		ОбъектУзла.ИспользоватьЗаявки = ИспользоватьЗаявки;
		ОбъектУзла.ИспользоватьРегламентныеМероприятия = ИспользоватьРегламентныеМероприятия;
		
		Попытка
			ОбъектУзла.Записать();
			Возврат Истина;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
			Метаданные.WebСервисы.ExchangeMobileBrigades,,ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПередатьПодразделениеБригаду(ИмяПользователя, ИДУстройства, Подразделение, Бригада)
	
	УстановитьПривилегированныйРежим(Истина);

	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат Неопределено;
	Иначе
		ПодразделениеУтройства = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(Подразделение));
		БригадаУстройства = Справочники.торо_РемонтныеБригады.ПолучитьСсылку(Новый УникальныйИдентификатор(Бригада));
		
		ОбъектУзла = Узел.ПолучитьОбъект();
		ОбъектУзла.ДатаПоследнегоСоединения = ТекущаяДата();
		
		Если НЕ ИмяПользователя = Узел.ПоследнийПользователь Тогда
			ОбъектУзла.ПоследнийПользователь = ИмяПользователя;
		КонецЕсли;
		
		ОбъектУзла.Подразделение = ПодразделениеУтройства;
		ОбъектУзла.Бригада = БригадаУстройства;
		
		Попытка
			ОбъектУзла.Записать();
			Возврат Истина;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
				Метаданные.WebСервисы.ExchangeMobileBrigades,,ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПолучитьОбщиеФайлы(Все, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПрисоединенныхФайлов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПрисоединенныеФайлы");
	
	Список = ФабрикаXDTO.Создать(ТипСписок);

	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_ОбщиеПрисоединенныеФайлыИзменения.Файл КАК Файл,
	               |	торо_ОбщиеПрисоединенныеФайлыИзменения.ВладелецФайла КАК ВладелецФайла
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеПрисоединенныеФайлы.Изменения КАК торо_ОбщиеПрисоединенныеФайлыИзменения
	               |ГДЕ
	               |	торо_ОбщиеПрисоединенныеФайлыИзменения.Узел = &Узел
	               |	И (ТИПЗНАЧЕНИЯ(торо_ОбщиеПрисоединенныеФайлыИзменения.ВладелецФайла) = ТИП(Справочник.торо_ОбъектыРемонта)
	               |			ИЛИ ТИПЗНАЧЕНИЯ(торо_ОбщиеПрисоединенныеФайлыИзменения.ВладелецФайла) = ТИП(Справочник.торо_ТиповыеОР)
	               |			ИЛИ ТИПЗНАЧЕНИЯ(торо_ОбщиеПрисоединенныеФайлыИзменения.ВладелецФайла) = ТИП(Справочник.торо_ТехКарты))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВладелецФайла,
	               |	Файл";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + РазмерПакета);
	Запрос.УстановитьПараметр("Узел", Узел);
	Выборка = Запрос.Выполнить().Выбрать();  
	
	НаборЗаписей = РегистрыСведений.торо_ОбщиеПрисоединенныеФайлы.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.ВладелецФайла.Установить(Выборка.ВладелецФайла);
		НаборЗаписей.Отбор.Файл.Установить(Выборка.Файл);
		НаборЗаписей.Прочитать();
		
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);			
		ДанныеФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Файл, "ПометкаУдаления, Наименование, Расширение, Описание");
		ДобавляемыйОбъект.ГУИД = Строка(Выборка.Файл.УникальныйИдентификатор());
		ДобавляемыйОбъект.ВладелецФайла = Строка(Выборка.ВладелецФайла.УникальныйИдентификатор());
		ДобавляемыйОбъект.Наименование = ?(ЗначениеЗаполнено(ДанныеФайла.Наименование), ДанныеФайла.Наименование, "None");
		ДобавляемыйОбъект.Расширение = ?(ЗначениеЗаполнено(ДанныеФайла.Расширение), ДанныеФайла.Расширение, "None");
		ДобавляемыйОбъект.Комментарий = ДанныеФайла.Описание; 
		ДобавляемыйОбъект.Удалить = НаборЗаписей.Количество() = 0 ИЛИ ДанныеФайла.ПометкаУдаления; 
		
		Если ТипЗнч(Выборка.ВладелецФайла) = Тип("СправочникСсылка.торо_ТехКарты") Тогда
			ДобавляемыйОбъект.ТипВладельца = "ТК";
		ИначеЕсли ТипЗнч(Выборка.ВладелецФайла) = Тип("СправочникСсылка.торо_ТиповыеОР") Тогда 
			ДобавляемыйОбъект.ТипВладельца = "ТОР";
		Иначе
			ДобавляемыйОбъект.ТипВладельца = "ОР";
		КонецЕсли;
		
		Список.ПрисоединенныеФайлы.Добавить(ДобавляемыйОбъект);
		
	КонецЦикла;	
		
	Если Список.ПрисоединенныеФайлы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПрисоединенныйФайл(ГУИД, Владелец)
	
	НовыйУИД = Новый УникальныйИдентификатор(ГУИД);
	Если Владелец = "ОР" Тогда
		СсылкаНаФайл = Справочники.торо_ОбъектыРемонтаПрисоединенныеФайлы.ПолучитьСсылку(НовыйУИД);
	ИначеЕсли Владелец = "ТОР" Тогда
		СсылкаНаФайл = Справочники.торо_ТиповыеОРПрисоединенныеФайлы.ПолучитьСсылку(НовыйУИД);
	ИначеЕсли Владелец = "ОбщийФайл" Тогда
		СсылкаНаФайл = Справочники.Файлы.ПолучитьСсылку(НовыйУИД);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаФайл) Тогда
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл, Ложь);
		Если ДвоичныеДанныеФайла <> Неопределено Тогда
			Возврат Base64Строка(ДвоичныеДанныеФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "Ошибка";

КонецФункции

Функция ПередатьПакет(Пакет)
	
	Попытка
	
		Идентификатор = Новый УникальныйИдентификатор(Пакет.ИдентификаторПакета);
		
		Набор = РегистрыСведений.торо_ПринятыеЧастиПакета.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторПакета.Установить(Идентификатор);
		Набор.Отбор.НомерЧасти.Установить(Пакет.НомерЧасти);
		Запись = Набор.Добавить();
		Запись.ДанныеЧастиСообщения = Новый ХранилищеЗначения(Пакет.Данные);
		Запись.ИдентификаторПакета = Идентификатор;
		Запись.НомерЧасти = Пакет.НомерЧасти;
		Запись.ДатаСоздания = ТекущаяДата();
		Запись.ВсегоЧастей = Пакет.ВсегоЧастей;
		Запись.РасширениеФайла = Пакет.Расширение;
		Запись.ИмяФайла = Пакет.ИмяФайла;
		Запись.РазмерФайла = Пакет.РазмерФайла;
		Набор.Записать();

        Успех = Истина;
    Исключение
        Успех = Ложь;    
    КонецПопытки;
    
    Возврат Успех;

КонецФункции

Функция ПолучитьПрисоединенныеФайлы(Все, ИДУстройства, Владелец)
			
	Если Владелец = "ОР" Тогда
		ИмяСправочника = "торо_ОбъектыРемонтаПрисоединенныеФайлы";	
	ИначеЕсли Владелец = "ТОР" Тогда
		ИмяСправочника = "торо_ТиповыеОРПрисоединенныеФайлы";	
	ИначеЕсли Владелец = "ТК" Тогда
		ИмяСправочника = "торо_ТехКартыПрисоединенныеФайлы";	
	КонецЕсли;
	
	РазмерПакета = Константы.торо_МобильноеПриложениеРазмерПакета.Получить();
	Если РазмерПакета = 0 Тогда
		РазмерПакета = 200;
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПрисоединенныхФайлов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПрисоединенныеФайлы");
	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	ТипМетаданных = Метаданные.Справочники[ИмяСправочника];
	
	Выборка = ПолучитьВыборкуИзмененныхДанных(Узел, ИмяСправочника, РазмерПакета);
	
	Пока Выборка.Следующий() Цикл

		Попытка
			ТекущийФайл = Выборка.Ссылка;
		Исключение
			УдалитьРегистрациюИзмененийПривилегированно(Узел, Выборка);
			Продолжить;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекущийФайл) И ЗначениеЗаполнено(ТекущийФайл.ВладелецФайла) Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			ДобавляемыйОбъект.ГУИД = Строка(ТекущийФайл.УникальныйИдентификатор());
			ДобавляемыйОбъект.ВладелецФайла = Строка(ТекущийФайл.ВладелецФайла.УникальныйИдентификатор());
			ДобавляемыйОбъект.Наименование = ТекущийФайл.Наименование;
			ДобавляемыйОбъект.Расширение = ТекущийФайл.Расширение;
			ДобавляемыйОбъект.Комментарий = ТекущийФайл.Описание;
			Если ТипЗнч(ТекущийФайл) = Тип("УдалениеОбъекта") Тогда
				ДобавляемыйОбъект.Удалить = Истина;
			КонецЕсли;
			
			Список.ПрисоединенныеФайлы.Добавить(ДобавляемыйОбъект);
		КонецЕсли;
		
	КонецЦикла;

	Если Список.ПрисоединенныеФайлы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
		
КонецФункции

#КонецОбласти
