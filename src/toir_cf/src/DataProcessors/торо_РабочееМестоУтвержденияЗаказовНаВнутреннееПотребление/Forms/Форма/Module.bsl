#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	Если Не ИспользоватьХарактеристики Тогда
		Элементы.ТаблицаНоменклатурыХарактеристика.Видимость = Ложь;
	КонецЕсли;
	
	торо_ФОИспользоватьАналоги = Константы.торо_ИспользоватьАналогиНоменклатурыДляРемонтов.Получить();
	Если Не торо_ФОИспользоватьАналоги Тогда
	    Элементы.ТаблицаНоменклатурыЕстьАналоги.Видимость = Ложь;
		Элементы.ДеревоЗаказовИРемонтовГруппаЕстьАналоги.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда 
		Подразделение = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение");
	КонецЕсли;
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Возврат с замечанием. Когда открылась форма истории комментариев и в ней удалили записи.
	Если ИмяСобытия = "УдаленыКомментарииКУтверждениюСтрокПоДокументу" Тогда
		ВернутьСЗамечаниемНаСервере("", Параметр);
		ОбновитьНаСервере();
	// При ручном интерактивном изменении статуса заказа
	ИначеЕсли ИмяСобытия = "ИзмененСтатусУтвержденияЗаказаНаВП" Тогда
		ОбновитьНаСервере();
	// Результат замены на аналоги	
	ИначеЕсли ИмяСобытия = "СохранениеЗаменыНоменклатурыНаАналогиЗаказовНаВП" И Не Параметр.ИзДокумента Тогда
		ОбработатьЗаменуНоменклатурыНаАналоги(Параметр);
		ОбновитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьВсе(Команда)
	
	Для каждого ТекущаяСтрока Из ТаблицаЗаказовНаВП Цикл
		УтвердитьЗаказНаВП(ТекущаяСтрока.ЗаказНаВП);
	КонецЦикла;
	
	Если ТаблицаЗаказовНаВП.Количество() > 0 Тогда
		ОбновитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#Область ТаблицаНоменклатуры

&НаКлиенте
Процедура ТаблицаНоменклатурыУтвердитьОтменитьУтверждение(Команда)

	ТаблицаНоменклатурыУтвердитьОтменитьУтверждениеНаСервере(Элементы.ТаблицаНоменклатурыУтвердитьОтменитьУтверждение.Заголовок = "Утвердить");
	
	Если Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки.Количество() > 0 Тогда
		ОбновитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоЗаказовИРемонтов

&НаКлиенте
Процедура УстановитьВсеФлаги(Команда)
	
	ИзменитьВсеФлаги(Истина);
	
	УстановитьЗаголовкиКомандДереваЗаказовИРемонтов();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлаги(Команда)
	
	ИзменитьВсеФлаги(Ложь);
	
	УстановитьЗаголовкиКомандДереваЗаказовИРемонтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьВсеФлаги(Команда)
	
	ИзменитьВсеФлаги(, Истина);
	
	УстановитьЗаголовкиКомандДереваЗаказовИРемонтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаказовИРемонтовУтвердитьОтменитьУтверждение(Команда)
	
	ДеревоЗаказовИРемонтовУтвердитьОтменитьУтверждениеНаСервере(Элементы.ДеревоЗаказовИРемонтовУтвердитьОтменитьУтверждение.Заголовок = "Утвердить");
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьСЗамечанием(Команда)

	СтруктураВозврата = ПодготовитьДанныеДляВозвратаСЗамечанием();
	
	Если СтруктураВозврата.ВсеСтрокиВСтатусеЕстьЗамечания Тогда
		ПараметрыФормы = Новый Структура("АдресВХТаблицыСтрок, КомментарийКУтверждениюПоДокументу, ИзДокумента, МожноУдалятьСтроки", СтруктураВозврата.АдресВХТаблицыСтрок, "", Ложь, Истина);
		ОткрытьФорму("РегистрСведений.торо_КомментарииКУтверждениюЗаказовНаВП.Форма.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	Иначе
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект, Неопределено);
	    ПоказатьВводСтроки(ОповещениеОЗакрытии, "", "Замечание",, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСнятьОтмену(Команда)
	
	ОтменитьСнятьОтменуНаСервере(Элементы.ДеревоЗаказовИРемонтовОтменитьСнятьОтмену.Заголовок = "Отменить");
	ОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЗаказовНаВП

&НаКлиенте
Процедура ТаблицаЗаказовНаВПУтвердитьОтменитьУтверждение(Команда)
	
	Для каждого ВыбраннаяСтрока Из Элементы.ТаблицаЗаказовНаВП.ВыделенныеСтроки Цикл
		ТекущаяСтрока = ТаблицаЗаказовНаВП.НайтиПоИдентификатору(ВыбраннаяСтрока);
		УтвердитьЗаказНаВП(ТекущаяСтрока.ЗаказНаВП, Элементы.ТаблицаЗаказовНаВПУтвердитьОтменитьУтверждение.Заголовок = "Утвердить");
	КонецЦикла;
	
	Если Элементы.ТаблицаЗаказовНаВП.ВыделенныеСтроки.Количество() > 0 Тогда
		ОбновитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНоменклатуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПостроитьДеревоЗаказовИРемонтов(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	
	УстановитьЗаголовокКоманды_ТаблицаНоменклатурыУтвердитьОтменитьУтверждение();
	УстановитьЗаголовкиКомандДереваЗаказовИРемонтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "ТаблицаНоменклатурыНоменклатура" Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Номенклатура);
	ИначеЕсли Поле.Имя = "ТаблицаНоменклатурыХарактеристика" Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Характеристика);
	ИначеЕсли Поле.Имя = "ТаблицаНоменклатурыЕдиницаИзмерения" Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЕдиницаИзмерения);
	ИначеЕсли Поле.Имя = "ТаблицаНоменклатурыЕстьАналоги" И ТекущиеДанные.ЕстьАналоги = 0 Тогда 
		ПодобратьАналогиНаКлиенте(Поле.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗаказовИРемонтов

&НаКлиенте
Процедура ДеревоЗаказовИРемонтовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗаказовИРемонтов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоЗаказовИРемонтовКоличество.ТолькоПросмотр = Не ТекущиеДанные.РедактированиеДоступно;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаказовИРемонтовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "ДеревоЗаказовИРемонтовОтветственный" Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ответственный);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовИРемонтовПодразделение" Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Подразделение);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовИРемонтовОбъектРемонта" Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ОбъектРемонта);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовИРемонтовЕдиницаИзмерения" Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЕдиницаИзмерения);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовИРемонтовВидРемонта" Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ВидРемонта);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовИРемонтовЗаказНаВП" Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗаказНаВП);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовИРемонтовДокументНачалаЦепочки" Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ДокументНачалаЦепочки);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовИРемонтовЕстьЗамечания" И Не ТекущиеДанные.ЕстьЗамечания = 1 Тогда
		ПараметрыФормы = Новый Структура("ЗаказНаВП, КодСтроки, КомментарийКУтверждениюПоДокументу, ИзДокумента", ТекущиеДанные.ЗаказНаВП, ТекущиеДанные.КодСтроки, "", Ложь);
		ОткрытьФорму("РегистрСведений.торо_КомментарииКУтверждениюЗаказовНаВП.Форма.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	ИначеЕсли (Поле.Имя = "ДеревоЗаказовИРемонтовЕстьАналогиНоменклатура" Или Поле.Имя = "ДеревоЗаказовИРемонтовЕстьАналогиРемонт")
			И Не ?(ТекущиеДанные.НомерУровня = 1, ТекущиеДанные.ЕстьАналогиНоменклатура = 2, ТекущиеДанные.ЕстьАналогиРемонт = 2)
			И ТекущиеДанные.РедактированиеДоступно Тогда
		ПодобратьАналогиНаКлиенте(Поле.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаказовИРемонтовОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗаказовИРемонтов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЗаказНаВП, КодСтроки", ТекущиеДанные.ЗаказНаВП, ТекущиеДанные.КодСтроки);
	НайденныеСтроки = ТаблицаЗаказовИРемонтов.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Отметка = ТекущиеДанные.Отметка;
	КонецЕсли;
	
	УстановитьЗаголовкиКомандДереваЗаказовИРемонтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаказовИРемонтовКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоЗаказовИРемонтов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКоличествоВДокументе(ТекущиеДанные.ЗаказНаВП, ТекущиеДанные.КодСтроки, ТекущиеДанные.Количество);
	ОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗаказовНаВП

&НаКлиенте
Процедура ТаблицаЗаказовНаВППередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовНаВПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "ТаблицаЗаказовНаВПЗаказНаВП" Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗаказНаВП);
	ИначеЕсли Поле.Имя = "ТаблицаЗаказовНаВПОтветственный" Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ответственный);
	ИначеЕсли Поле.Имя = "ТаблицаЗаказовНаВППодразделение" Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовНаВППриАктивизацииСтроки(Элемент)
	
	УстановитьЗаголовокКоманды_ТаблицаЗаказовНаВПУтвердитьОтменитьУтверждение();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьНаСервере()
	
	МенеджерВТ = СоздатьВТТоваров();
	
	ОбновитьТаблицуНоменклатуры(МенеджерВТ);
	ОбновитьТаблицуЗаказовИРемонтов(МенеджерВТ);
	ОбновитьТаблицуЗаказовНаВП(МенеджерВТ);
	ОбновитьНадписьИтогов(МенеджерВТ);
	
КонецПроцедуры

&НаСервере
Функция СоздатьВТТоваров()
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказНаВнутреннееПотребление.Ссылка КАК ЗаказНаВП,
	               |	ЗаказНаВнутреннееПотребление.Склад КАК Склад,
	               |	ЗаказНаВнутреннееПотребление.ДатаОтгрузки КАК ДатаПотребности,
	               |	ЗаказНаВнутреннееПотребление.Ответственный КАК Ответственный,
	               |	ЗаказНаВнутреннееПотребление.Подразделение КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА ЗаказНаВнутреннееПотребление.торо_СтатусУтверждения = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден)
	               |				ИЛИ ЗаказНаВнутреннееПотребление.торо_СтатусУтверждения = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично)
				   |				ИЛИ НЕ ЗаказНаВнутреннееПотребление.торо_IDРемонта = """"
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК РедактированиеДоступно,
	               |	ЗаказНаВнутреннееПотребление.торо_СтатусУтверждения КАК СтатусУтверждения,
	               |	ЗаказНаВнутреннееПотребление.торо_IDРемонта КАК IDРемонта,
	               |	ЗаказНаВнутреннееПотребление.торо_ОбъектРемонта КАК ОбъектРемонта,
	               |	ЗаказНаВнутреннееПотребление.торо_ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ЗаказыНаВП
	               |ИЗ
	               |	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	               |ГДЕ
	               |	ЗаказНаВнутреннееПотребление.Проведен = ИСТИНА
	               |	И НЕ ЗаказНаВнутреннееПотребление.торо_СтатусУтверждения = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.ПустаяСсылка)
	               |	И (НЕ &ИспользоватьОтборПоПериодуДокументовДатаНачала
	               |			ИЛИ ЗаказНаВнутреннееПотребление.Дата >= &ПериодДокументовДатаНачала)
	               |	И (НЕ &ИспользоватьОтборПоПериодуДокументовДатаОкончания
	               |			ИЛИ ЗаказНаВнутреннееПотребление.Дата <= &ПериодДокументовДатаОкончания)
	               |	И (НЕ &ИспользоватьОтборПоПериодуПотребностиДатаНачала
	               |			ИЛИ ЗаказНаВнутреннееПотребление.ДатаОтгрузки >= &ПериодПотребностиДатаНачала)
	               |	И (НЕ &ИспользоватьОтборПоПериодуПотребностиДатаОкончания
	               |			ИЛИ ЗаказНаВнутреннееПотребление.ДатаОтгрузки <= &ПериодПотребностиДатаОкончания)
	               |	И (НЕ &ИспользоватьОтборПоОрганизации
	               |			ИЛИ ЗаказНаВнутреннееПотребление.Организация = &Организация)
	               |	И (НЕ &ИспользоватьОтборПоПодразделению
	               |			ИЛИ ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение)
	               |	И (НЕ &ИспользоватьОтборПоОтветственному
	               |			ИЛИ ЗаказНаВнутреннееПотребление.Ответственный = &Ответственный)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВП
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗаказыНаВП.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_ЗаказыНаВП.Склад КАК Склад,
	               |	ВТ_ЗаказыНаВП.ДатаПотребности КАК ДатаПотребности,
	               |	ВТ_ЗаказыНаВП.Ответственный КАК Ответственный,
	               |	ВТ_ЗаказыНаВП.Подразделение КАК Подразделение,
	               |	ВТ_ЗаказыНаВП.РедактированиеДоступно КАК РедактированиеДоступно,
	               |	ВТ_ЗаказыНаВП.СтатусУтверждения КАК СтатусУтверждения,
	               |	ВТ_ЗаказыНаВП.IDРемонта КАК IDРемонта,
	               |	ВТ_ЗаказыНаВП.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ЗаказыНаВП.ВидРемонта КАК ВидРемонта,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура.СхемаОбеспечения КАК СхемаОбеспечения,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЗаказНаВнутреннееПотреблениеТовары.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ХарактеристикиИспользуются,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика КАК Характеристика,
	               |	ВЫБОР
	               |		КОГДА ЗаказНаВнутреннееПотреблениеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ЗаказНаВнутреннееПотреблениеТовары.Количество
	               |		ИНАЧЕ ЗаказНаВнутреннееПотреблениеТовары.Упаковка.Коэффициент * ЗаказНаВнутреннееПотреблениеТовары.Количество
	               |	КОНЕЦ КАК Количество,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Упаковка КАК Упаковка,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	ЗаказНаВнутреннееПотреблениеТовары.торо_СтатусУтверждения КАК СтатусУтвержденияСтроки,
	               |	торо_ТипЦеныДляРасчетаСебестоимостиРемонта.Значение КАК ВидЦены,
	               |	ВалютаУправленческогоУчета.Значение КАК Валюта,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КодСтроки КАК КодСтроки
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	ВТ_ЗаказыНаВП КАК ВТ_ЗаказыНаВП
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	               |		ПО ВТ_ЗаказыНаВП.ЗаказНаВП = ЗаказНаВнутреннееПотреблениеТовары.Ссылка,
	               |	Константа.торо_ТипЦеныДляРасчетаСебестоимостиРемонта КАК торо_ТипЦеныДляРасчетаСебестоимостиРемонта,
	               |	Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	ВидЦены,
	               |	Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ЗаказыНаВП
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	               |ПОМЕСТИТЬ ВТ_Цены
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			,
	               |			(Номенклатура, Характеристика, ВидЦены, Валюта) В
	               |				(ВЫБРАТЬ
	               |					ВТ_Товары.Номенклатура,
	               |					ВТ_Товары.Характеристика,
	               |					ВТ_Товары.ВидЦены,
	               |					ВТ_Товары.Валюта
	               |				ИЗ
	               |					ВТ_Товары)) КАК ЦеныНоменклатурыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних.КодСтрокиНоменклатуры КАК КодСтрокиНоменклатуры
	               |ПОМЕСТИТЬ ВТ_КомментарииКУтверждению
	               |ИЗ
	               |	РегистрСведений.торо_КомментарииКУтверждениюЗаказовНаВП.СрезПоследних(
	               |			,
	               |			(ЗаказНаВнутреннееПотребление, КодСтрокиНоменклатуры) В
	               |				(ВЫБРАТЬ
	               |					ВТ_Товары.ЗаказНаВП,
	               |					ВТ_Товары.КодСтроки
	               |				ИЗ
	               |					ВТ_Товары)) КАК торо_КомментарииКУтверждениюЗаказовНаВПСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВнутреннееПотребление,
	               |	КодСтрокиНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.Номенклатура КАК Номенклатура,
	               |	ВТ_Товары.Характеристика КАК Характеристика,
	               |	ВТ_Товары.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_Товары.ДатаПотребности КАК ДатаДействия,
	               |	ВТ_Товары.КодСтроки КАК КодСтроки
	               |ПОМЕСТИТЬ ВТ_ТаблицаЗаказовНаВП
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВП
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаЗаказовНаВП.Номенклатура КАК Номенклатура,
	               |	ВТ_ТаблицаЗаказовНаВП.Характеристика КАК Характеристика,
	               |	ВТ_ТаблицаЗаказовНаВП.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_ТаблицаЗаказовНаВП.КодСтроки КАК КодСтроки,
	               |	ВЫБОР
	               |		КОГДА торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта ССЫЛКА Справочник.торо_ОбъектыРемонта
	               |			ТОГДА торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта.Направление
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	               |	КОНЕЦ КАК Направление,
	               |	ВЫБОР
	               |		КОГДА торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта ССЫЛКА Справочник.торо_ОбъектыРемонта
	               |			ТОГДА торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта.Организация
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |	КОНЕЦ КАК Организация,
	               |	ВТ_ТаблицаЗаказовНаВП.ДатаДействия КАК ДатаДействия,
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ЗаказыПоРемонтам
	               |ИЗ
	               |	ВТ_ТаблицаЗаказовНаВП КАК ВТ_ТаблицаЗаказовНаВП
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |			ПО торо_ИнтеграцияДокументов.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |		ПО (ВТ_ТаблицаЗаказовНаВП.ЗаказНаВП = (ВЫРАЗИТЬ(торо_ИнтеграцияДокументов.ДокументЕРП КАК Документ.ЗаказНаВнутреннееПотребление)))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗаказыПоРемонтам.IDРемонта КАК IDРемонта,
	               |	торо_ПлановыеИсполнителиРемонтов.Исполнитель КАК Исполнитель
	               |ПОМЕСТИТЬ ВТ_ИсполнителиПоРемонтам
	               |ИЗ
	               |	ВТ_ЗаказыПоРемонтам КАК ВТ_ЗаказыПоРемонтам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
	               |		ПО ВТ_ЗаказыПоРемонтам.IDРемонта = торо_ПлановыеИсполнителиРемонтов.IDРемонта
	               |ГДЕ
	               |	торо_ПлановыеИсполнителиРемонтов.Исполнитель ССЫЛКА Справочник.СтруктураПредприятия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаЗаказовНаВП.Номенклатура КАК Номенклатура,
	               |	ВТ_ТаблицаЗаказовНаВП.Характеристика КАК Характеристика,
	               |	ВТ_ТаблицаЗаказовНаВП.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_ТаблицаЗаказовНаВП.КодСтроки КАК КодСтроки,
	               |	ВТ_ТаблицаЗаказовНаВП.ДатаДействия КАК ДатаДействия,
	               |	"""" КАК IDРемонта,
	               |	НЕОПРЕДЕЛЕНО КАК ОбъектРемонта,
	               |	НЕОПРЕДЕЛЕНО КАК ВидРемонта,
	               |	НЕОПРЕДЕЛЕНО КАК Направление,
	               |	НЕОПРЕДЕЛЕНО КАК Организация
	               |ПОМЕСТИТЬ ВТ_ЗаказыНаВП
	               |ИЗ
	               |	ВТ_ТаблицаЗаказовНаВП КАК ВТ_ТаблицаЗаказовНаВП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказыПоРемонтам КАК ВТ_ЗаказыПоРемонтам
	               |		ПО ВТ_ТаблицаЗаказовНаВП.ЗаказНаВП = ВТ_ЗаказыПоРемонтам.ЗаказНаВП
	               |ГДЕ
	               |	ВТ_ЗаказыПоРемонтам.ЗаказНаВП ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ЗаказыПоРемонтам.Номенклатура,
	               |	ВТ_ЗаказыПоРемонтам.Характеристика,
	               |	ВТ_ЗаказыПоРемонтам.ЗаказНаВП,
	               |	ВТ_ЗаказыПоРемонтам.КодСтроки,
	               |	ВТ_ЗаказыПоРемонтам.ДатаДействия,
	               |	ВТ_ЗаказыПоРемонтам.IDРемонта,
	               |	ВТ_ЗаказыПоРемонтам.ОбъектРемонта,
	               |	ВТ_ЗаказыПоРемонтам.ВидРемонта,
	               |	ВТ_ЗаказыПоРемонтам.Направление,
	               |	ВТ_ЗаказыПоРемонтам.Организация
	               |ИЗ
	               |	ВТ_ЗаказыПоРемонтам КАК ВТ_ЗаказыПоРемонтам
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КодСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗаказыНаВП.Номенклатура КАК Номенклатура,
	               |	ВТ_ЗаказыНаВП.Характеристика КАК Характеристика,
	               |	ВТ_ЗаказыНаВП.КодСтроки КАК КодСтроки,
	               |	ВТ_ЗаказыНаВП.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_ЗаказыНаВП.IDРемонта КАК IDРемонта,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НЕ ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога ЕСТЬ NULL
	               |				ТОГДА 0
	               |			КОГДА торо_АналогиНоменклатурыДляРемонтов.Регистратор ЕСТЬ NULL
	               |				ТОГДА 2
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК ЕстьАналоги
	               |ПОМЕСТИТЬ ВТ_НаличиеАналогов
	               |ИЗ
	               |	ВТ_ЗаказыНаВП КАК ВТ_ЗаказыНаВП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
	               |		ПО ВТ_ЗаказыНаВП.КодСтроки = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога
	               |			И ВТ_ЗаказыНаВП.ЗаказНаВП = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АналогиНоменклатурыДляРемонтов КАК торо_АналогиНоменклатурыДляРемонтов
	               |		ПО (торо_АналогиНоменклатурыДляРемонтов.Материал = ВТ_ЗаказыНаВП.Номенклатура)
	               |			И (торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала = ВТ_ЗаказыНаВП.Характеристика)
	               |			И (торо_АналогиНоменклатурыДляРемонтов.Период <= ВТ_ЗаказыНаВП.ДатаДействия)
	               |			И (ВЫБОР
	               |				КОГДА торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ВТ_ЗаказыНаВП.ДатаДействия <= торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения
	               |			КОНЕЦ)
	               |			И (торо_АналогиНоменклатурыДляРемонтов.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	               |				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка)
	               |				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ОбъектРемонта = НЕОПРЕДЕЛЕНО
	               |				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ОбъектРемонта = ВТ_ЗаказыНаВП.ОбъектРемонта)
	               |			И (торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	               |				ИЛИ торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ВТ_ЗаказыНаВП.Направление)
	               |			И (торо_АналогиНоменклатурыДляРемонтов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |				ИЛИ торо_АналогиНоменклатурыДляРемонтов.Организация = ВТ_ЗаказыНаВП.Организация)
	               |			И (торо_АналогиНоменклатурыДляРемонтов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |				ИЛИ (ВТ_ЗаказыНаВП.IDРемонта, торо_АналогиНоменклатурыДляРемонтов.Подразделение) В
	               |					(ВЫБРАТЬ
	               |						ВТ_ИсполнителиПоРемонтам.IDРемонта,
	               |						ВТ_ИсполнителиПоРемонтам.Исполнитель
	               |					ИЗ
	               |						ВТ_ИсполнителиПоРемонтам КАК ВТ_ИсполнителиПоРемонтам))
	               |			И (торо_АналогиНоменклатурыДляРемонтов.ВидРемонта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	               |				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ВидРемонта = ВТ_ЗаказыНаВП.ВидРемонта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ЗаказыНаВП.Номенклатура,
	               |	ВТ_ЗаказыНаВП.Характеристика,
	               |	ВТ_ЗаказыНаВП.КодСтроки,
	               |	ВТ_ЗаказыНаВП.ЗаказНаВП,
	               |	ВТ_ЗаказыНаВП.IDРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВП,
				   |	КодСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_Товары.Склад КАК Склад,
	               |	ВТ_Товары.ДатаПотребности КАК ДатаПотребности,
	               |	ВТ_Товары.Ответственный КАК Ответственный,
	               |	ВТ_Товары.Подразделение КАК Подразделение,
	               |	ВТ_Товары.РедактированиеДоступно КАК РедактированиеДоступно,
	               |	ВТ_Товары.СтатусУтверждения КАК СтатусУтверждения,
	               |	ЕСТЬNULL(ВТ_НаличиеАналогов.IDРемонта, ВТ_Товары.IDРемонта) КАК IDРемонта,
	               |	ВТ_Товары.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_Товары.ВидРемонта КАК ВидРемонта,
	               |	ВТ_Товары.СхемаОбеспечения КАК СхемаОбеспечения,
	               |	ВТ_Товары.Номенклатура КАК Номенклатура,
	               |	ВТ_Товары.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	               |	ВТ_Товары.Характеристика КАК Характеристика,
	               |	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВТ_Товары.Упаковка КАК Упаковка,
	               |	ВТ_Товары.Количество КАК Количество,
	               |	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	ВТ_Товары.СтатусУтвержденияСтроки КАК СтатусУтвержденияСтроки,
	               |	ВТ_Товары.КодСтроки КАК КодСтроки,
	               |	ВЫРАЗИТЬ(ВТ_Товары.Количество * ЕСТЬNULL(ВТ_Цены.Цена, 0) КАК ЧИСЛО(10, 2)) КАК Стоимость,
	               |	ВТ_Цены.Цена КАК Цена,
	               |	ВЫБОР
	               |		КОГДА НЕ ВТ_КомментарииКУтверждению.ЗаказНаВнутреннееПотребление ЕСТЬ NULL
	               |				И НЕ ВТ_КомментарииКУтверждению.КодСтрокиНоменклатуры = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК ЕстьЗамечания,
	               |	ВЫБОР
	               |		КОГДА ВТ_Товары.СтатусУтвержденияСтроки = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено)
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Отменено,
	               |	ВЫБОР
	               |		КОГДА ВТ_Товары.СтатусУтвержденияСтроки = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден)
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Утверждено,
	               |	ЕСТЬNULL(ВТ_НаличиеАналогов.ЕстьАналоги, 2) КАК ЕстьАналоги
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ВТ_Цены
	               |		ПО ВТ_Товары.Номенклатура = ВТ_Цены.Номенклатура
	               |			И ВТ_Товары.Характеристика = ВТ_Цены.Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КомментарииКУтверждению КАК ВТ_КомментарииКУтверждению
	               |		ПО ВТ_Товары.ЗаказНаВП = ВТ_КомментарииКУтверждению.ЗаказНаВнутреннееПотребление
	               |			И ВТ_Товары.КодСтроки = ВТ_КомментарииКУтверждению.КодСтрокиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаличиеАналогов КАК ВТ_НаличиеАналогов
	               |		ПО ВТ_Товары.ЗаказНаВП = ВТ_НаличиеАналогов.ЗаказНаВП
	               |			И ВТ_Товары.КодСтроки = ВТ_НаличиеАналогов.КодСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Цены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_КомментарииКУтверждению";
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПериодуДокументовДатаНачала", ЗначениеЗаполнено(ПериодДокументов.ДатаНачала));
	Запрос.УстановитьПараметр("ПериодДокументовДатаНачала", ПериодДокументов.ДатаНачала);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПериодуДокументовДатаОкончания", ЗначениеЗаполнено(ПериодДокументов.ДатаОкончания));
	Запрос.УстановитьПараметр("ПериодДокументовДатаОкончания", ПериодДокументов.ДатаОкончания);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПериодуПотребностиДатаНачала", ЗначениеЗаполнено(ПериодПотребности.ДатаНачала));
	Запрос.УстановитьПараметр("ПериодПотребностиДатаНачала", ПериодПотребности.ДатаНачала);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПериодуПотребностиДатаОкончания", ЗначениеЗаполнено(ПериодПотребности.ДатаОкончания));
	Запрос.УстановитьПараметр("ПериодПотребностиДатаОкончания", ПериодПотребности.ДатаОкончания);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОрганизации", ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПодразделению", ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОтветственному", ЗначениеЗаполнено(Ответственный));
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуНоменклатуры(МенеджерВТ)
	
	ТаблицаНоменклатуры.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Данные.Номенклатура КАК Номенклатура,
	               |	ВТ_Данные.Характеристика КАК Характеристика,
	               |	ВТ_Данные.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	               |	ВТ_Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВТ_Данные.Цена КАК Цена,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВТ_Данные.СтатусУтвержденияСтроки = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено)
	               |				ТОГДА 0
	               |			ИНАЧЕ ВТ_Данные.Количество
	               |		КОНЕЦ) КАК Количество,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВТ_Данные.СтатусУтвержденияСтроки = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено)
	               |				ТОГДА 0
	               |			ИНАЧЕ ВТ_Данные.Стоимость
	               |		КОНЕЦ) КАК Стоимость,
	               |	ВЫБОР
	               |		КОГДА СРЕДНЕЕ(ВТ_Данные.Отменено) = 0
	               |			ТОГДА 0
	               |		КОГДА СРЕДНЕЕ(ВТ_Данные.Отменено) = 1
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Отменено,
	               |	ВЫБОР
	               |		КОГДА СРЕДНЕЕ(ВТ_Данные.Утверждено) = 0
	               |			ТОГДА 0
	               |		КОГДА СРЕДНЕЕ(ВТ_Данные.Утверждено) = 1
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Утверждено,
	               |	НЕ СУММА(ВЫБОР
	               |			КОГДА ВТ_Данные.ЕстьАналоги = 1
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) > 0 КАК ЕстьАналоги
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |ГДЕ
	               |	НЕ ВТ_Данные.СтатусУтвержденияСтроки В (&МассивИсключающихСтатусов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Данные.Номенклатура,
	               |	ВТ_Данные.ХарактеристикиИспользуются,
	               |	ВТ_Данные.Характеристика,
	               |	ВТ_Данные.ЕдиницаИзмерения,
	               |	ВТ_Данные.Цена";
	
	МассивИсключающихСтатусов = Новый Массив();
	
	Если Не СкрыватьОтмененные И СкрыватьУтвержденные Тогда
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден);
	ИначеЕсли СкрыватьОтмененные И Не СкрыватьУтвержденные Тогда
	    МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
	ИначеЕсли СкрыватьОтмененные И СкрыватьУтвержденные Тогда
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден);
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивИсключающихСтатусов", МассивИсключающихСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗаказов = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗаказов.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), ВыборкаЗаказов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЗаказовИРемонтов(МенеджерВТ)
	
	ДеревоЗаказовИРемонтов.ПолучитьЭлементы().Очистить();
	ТаблицаЗаказовИРемонтов.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Данные.Подразделение КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА ВТ_Данные.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ВТ_Данные.ЕдиницаИзмерения
	               |		ИНАЧЕ ВТ_Данные.Упаковка
	               |	КОНЕЦ КАК ЕдиницаИзмерения,
	               |	ВТ_Данные.Стоимость КАК Стоимость,
	               |	ВТ_Данные.ДатаПотребности КАК ДатаОтгрузки,
	               |	ВТ_Данные.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_Данные.КоличествоУпаковок КАК Количество,
	               |	ВТ_Данные.Ответственный КАК Ответственный,
	               |	ВТ_Данные.РедактированиеДоступно КАК РедактированиеДоступно,
	               |	ВТ_Данные.IDРемонта КАК IDРемонта,
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта, ВТ_Данные.ОбъектРемонта) КАК ОбъектРемонта,
	               |	ЕСТЬNULL(торо_ОбщиеДанныеПоРемонтам.ВидРемонта, ВТ_Данные.ВидРемонта) КАК ВидРемонта,
	               |	ВТ_Данные.Номенклатура КАК Номенклатура,
	               |	ВТ_Данные.Характеристика КАК Характеристика,
	               |	ВТ_Данные.Отменено КАК Отменено,
	               |	ВТ_Данные.Утверждено КАК Утверждено,
	               |	ВТ_Данные.СтатусУтвержденияСтроки КАК СтатусУтвержденияСтроки,
	               |	ВТ_Данные.ЕстьЗамечания КАК ЕстьЗамечания,
	               |	ВТ_Данные.КодСтроки КАК КодСтроки,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыРемонтов.ДокументНачалаЦепочки, НЕОПРЕДЕЛЕНО) КАК ДокументНачалаЦепочки,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА НЕ ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей ЕСТЬ NULL
	               |			ТОГДА ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей
	               |		КОГДА НЕ СхемыОбеспечения.СпособОбеспеченияПотребностей ЕСТЬ NULL
	               |			ТОГДА СхемыОбеспечения.СпособОбеспеченияПотребностей
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)
	               |	КОНЕЦ КАК СпособОбеспеченияПотребностей,
	               |	ВТ_Данные.ЕстьАналоги КАК ЕстьАналоги
	               |ПОМЕСТИТЬ ВТ_ТаблицаЗаказовИРемонтовНачальная
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |		ПО ВТ_Данные.IDРемонта = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_Данные.IDРемонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК ВариантыОбеспеченияТоварами
	               |		ПО ВТ_Данные.Номенклатура = ВариантыОбеспеченияТоварами.Номенклатура
	               |			И ВТ_Данные.Характеристика = ВариантыОбеспеченияТоварами.Характеристика
	               |			И ВТ_Данные.Склад = ВариантыОбеспеченияТоварами.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
	               |		ПО ВТ_Данные.СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения
	               |			И ВТ_Данные.Склад = СхемыОбеспечения.Склад
	               |ГДЕ
	               |	НЕ ВТ_Данные.СтатусУтвержденияСтроки В (&МассивИсключающихСтатусов)";
				   
	МассивИсключающихСтатусов = Новый Массив();
	
	Если Не СкрыватьОтмененные И СкрыватьУтвержденные Тогда
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден);
	ИначеЕсли СкрыватьОтмененные И Не СкрыватьУтвержденные Тогда
	    МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
	ИначеЕсли СкрыватьОтмененные И СкрыватьУтвержденные Тогда
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден);
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивИсключающихСтатусов", МассивИсключающихСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	торо_МТОСервер.РассчитатьКрайнийСрок(Запрос.МенеджерВременныхТаблиц, "ВТ_ТаблицаЗаказовИРемонтовНачальная");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.Подразделение КАК Подразделение,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.Стоимость КАК Стоимость,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ДатаОтгрузки КАК ДатаПотребности,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.Количество КАК Количество,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.Ответственный КАК Ответственный,
				   |	ВТ_ТаблицаЗаказовИРемонтовНачальная.РедактированиеДоступно КАК РедактированиеДоступно,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.IDРемонта КАК IDРемонта,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ВидРемонта КАК ВидРемонта,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.Номенклатура КАК Номенклатура,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.Характеристика КАК Характеристика,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.Отменено КАК Отменено,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.Утверждено КАК Утверждено,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.СтатусУтвержденияСтроки КАК СтатусУтвержденияСтроки,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ЕстьЗамечания КАК ЕстьЗамечания,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.КодСтроки КАК КодСтроки,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ДатаНачала КАК ДатаНачала,
	               |	ЕСТЬNULL(ВТ_КрайниеДатыЗаказов.ДатаПоКалендарю, ДАТАВРЕМЯ(1, 1, 1)) КАК КрайнийСрокЗаказа,
				   |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ЕстьАналоги КАК ЕстьАналогиНоменклатура,
				   |	ВТ_ТаблицаЗаказовИРемонтовНачальная.ЕстьАналоги КАК ЕстьАналогиРемонт
				   |ИЗ
	               |	ВТ_ТаблицаЗаказовИРемонтовНачальная КАК ВТ_ТаблицаЗаказовИРемонтовНачальная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КрайниеДатыЗаказов КАК ВТ_КрайниеДатыЗаказов
	               |		ПО ВТ_ТаблицаЗаказовИРемонтовНачальная.СпособОбеспеченияПотребностей = ВТ_КрайниеДатыЗаказов.СпособОбеспеченияПотребностей
	               |			И ВТ_ТаблицаЗаказовИРемонтовНачальная.ДатаОтгрузки = ВТ_КрайниеДатыЗаказов.ДатаОтгрузки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗаказов = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗаказов.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗаказовИРемонтов.Добавить(), ВыборкаЗаказов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЗаказовНаВП(МенеджерВТ)
	
	ТаблицаЗаказовНаВП.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Данные.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_Данные.ДатаПотребности КАК ДатаПотребности,
	               |	ВТ_Данные.Ответственный КАК Ответственный,
	               |	ВТ_Данные.Подразделение КАК Подразделение,
	               |	ВТ_Данные.СтатусУтверждения КАК СтатусУтверждения,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВТ_Данные.СтатусУтвержденияСтроки = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено)
	               |				ТОГДА 0
	               |			ИНАЧЕ ВТ_Данные.Стоимость
	               |		КОНЕЦ) КАК Стоимость
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |ГДЕ
	               |	ВТ_Данные.СтатусУтверждения В(&МассивСтатусов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Данные.ЗаказНаВП,
	               |	ВТ_Данные.ДатаПотребности,
	               |	ВТ_Данные.Ответственный,
	               |	ВТ_Данные.Подразделение,
	               |	ВТ_Данные.СтатусУтверждения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПотребности";
	
	МассивСтатусов = Новый Массив();
	МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении);
	МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.ВозвращенНаДоработку);
	
	Если Не СкрыватьОтмененные И СкрыватьУтвержденные Тогда
	    МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Отклонен);
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично);
	ИначеЕсли СкрыватьОтмененные И Не СкрыватьУтвержденные Тогда
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично);
	ИначеЕсли Не СкрыватьОтмененные И Не СкрыватьУтвержденные Тогда
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Отклонен);
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 1;
	ВыборкаЗаказов = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗаказов.Следующий() Цикл
		НоваяСтрокаТЗ = ТаблицаЗаказовНаВП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ВыборкаЗаказов);
		
		НоваяСтрокаТЗ.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки +1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьИтогов(МенеджерВТ)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА ВТ_Данные.СтатусУтвержденияСтроки = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден)
	               |				ТОГДА ВТ_Данные.Стоимость
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Утверждено,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВТ_Данные.СтатусУтвержденияСтроки = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении)
	               |					ИЛИ ВТ_Данные.СтатусУтвержденияСтроки = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЗамечанияИсправлены)
	               |				ТОГДА ВТ_Данные.Стоимость
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НеПроверено
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |ГДЕ
	               |	НЕ ВТ_Данные.СтатусУтвержденияСтроки В (&МассивИсключающихСтатусов)";
	
	МассивИсключающихСтатусов = Новый Массив();
	
	Если Не СкрыватьОтмененные И СкрыватьУтвержденные Тогда
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден);
	ИначеЕсли СкрыватьОтмененные И Не СкрыватьУтвержденные Тогда
	    МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
	ИначеЕсли СкрыватьОтмененные И СкрыватьУтвержденные Тогда
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден);
		МассивИсключающихСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивИсключающихСтатусов", МассивИсключающихСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Утверждено = 0;
		НеПроверено = 0;
	Иначе
		ВыборкаКоличества = РезультатЗапроса.Выбрать();
		ВыборкаКоличества.Следующий();
		Утверждено = ВыборкаКоличества.Утверждено;
		НеПроверено = ВыборкаКоличества.НеПроверено;
	КонецЕсли;
	
	КоличествоЗаказов = ТаблицаЗаказовНаВП.Количество();
	СуммаЗаказов = ТаблицаНоменклатуры.Итог("Стоимость");
	
	ШаблонЗаголовка = "Итого %1 %2 на сумму:";
	ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, КоличествоЗаказов, "заказов");
	
	Элементы.ДекорацияИтогоДокументов.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияИтогоСуммаДокументов.Заголовок = Строка(СуммаЗаказов) + " руб.";
	Элементы.ДекорацияИтогоУтвержденоСумма.Заголовок = Строка(Утверждено) + " руб.";
	Элементы.ДекорацияИтогоНеПровереноСумма.Заголовок = Строка(НеПроверено) + " руб.";
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоЗаказовИРемонтов(Номенклатура, Характеристика)
	
	ДеревоЗаказовИРемонтов.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаказовИРемонтов.Подразделение КАК Подразделение,
	               |	ТаблицаЗаказовИРемонтов.Отметка КАК Отметка,
	               |	ТаблицаЗаказовИРемонтов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТаблицаЗаказовИРемонтов.Стоимость КАК Стоимость,
	               |	ТаблицаЗаказовИРемонтов.ДатаПотребности КАК ДатаПотребности,
	               |	ТаблицаЗаказовИРемонтов.ЗаказНаВП КАК ЗаказНаВП,
	               |	ТаблицаЗаказовИРемонтов.Количество КАК Количество,
	               |	ТаблицаЗаказовИРемонтов.Ответственный КАК Ответственный,
	               |	ТаблицаЗаказовИРемонтов.РедактированиеДоступно КАК РедактированиеДоступно,
	               |	ТаблицаЗаказовИРемонтов.КрайнийСрокЗаказа КАК КрайнийСрокЗаказа,
	               |	ТаблицаЗаказовИРемонтов.КодСтроки КАК КодСтроки,
	               |	ТаблицаЗаказовИРемонтов.СтатусУтвержденияСтроки КАК СтатусУтвержденияСтроки,
	               |	ТаблицаЗаказовИРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаЗаказовИРемонтов.Отменено КАК Отменено,
	               |	ТаблицаЗаказовИРемонтов.Утверждено КАК Утверждено,
	               |	ТаблицаЗаказовИРемонтов.ЕстьЗамечания КАК ЕстьЗамечания,
	               |	ТаблицаЗаказовИРемонтов.ВидРемонта КАК ВидРемонта,
	               |	ТаблицаЗаказовИРемонтов.Номенклатура КАК Номенклатура,
	               |	ТаблицаЗаказовИРемонтов.Характеристика КАК Характеристика,
	               |	ТаблицаЗаказовИРемонтов.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	ТаблицаЗаказовИРемонтов.ДатаНачала КАК ДатаНачала,
	               |	ТаблицаЗаказовИРемонтов.ЕстьАналогиНоменклатура КАК ЕстьАналогиНоменклатура,
	               |	ТаблицаЗаказовИРемонтов.ЕстьАналогиРемонт КАК ЕстьАналогиРемонт
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&ТаблицаЗаказовИРемонтов КАК ТаблицаЗаказовИРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Подразделение КАК Подразделение,
	               |	ВТ_Данные.Отметка КАК Отметка,
	               |	ВТ_Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВТ_Данные.Стоимость КАК Стоимость,
	               |	ВТ_Данные.ДатаПотребности КАК ДатаПотребности,
	               |	ВТ_Данные.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_Данные.Количество КАК Количество,
	               |	ВТ_Данные.Ответственный КАК Ответственный,
	               |	ВТ_Данные.РедактированиеДоступно КАК РедактированиеДоступно,
	               |	ВТ_Данные.КрайнийСрокЗаказа КАК КрайнийСрокЗаказа,
	               |	ВТ_Данные.КодСтроки КАК КодСтроки,
	               |	ВТ_Данные.СтатусУтвержденияСтроки КАК СтатусУтвержденияСтроки,
	               |	ВТ_Данные.Отменено КАК Отменено,
	               |	ВТ_Данные.Утверждено КАК Утверждено,
	               |	ВТ_Данные.ЕстьЗамечания КАК ЕстьЗамечания,
	               |	ВТ_Данные.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_Данные.ВидРемонта КАК ВидРемонта,
	               |	ВТ_Данные.Номенклатура КАК Номенклатура,
	               |	ВТ_Данные.Характеристика КАК Характеристика,
	               |	ВТ_Данные.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	ВТ_Данные.ДатаНачала КАК ДатаНачала,
	               |	ВТ_Данные.ЕстьАналогиНоменклатура КАК ЕстьАналогиНоменклатура,
	               |	ВТ_Данные.ЕстьАналогиРемонт КАК ЕстьАналогиРемонт
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |ИТОГИ
	               |	МАКСИМУМ(Подразделение),
	               |	МАКСИМУМ(Отметка),
	               |	МАКСИМУМ(ЕдиницаИзмерения),
	               |	МАКСИМУМ(Стоимость),
	               |	МАКСИМУМ(ДатаПотребности),
	               |	МАКСИМУМ(Количество),
	               |	МАКСИМУМ(Ответственный),
	               |	МАКСИМУМ(РедактированиеДоступно),
	               |	МИНИМУМ(КрайнийСрокЗаказа),
	               |	МАКСИМУМ(СтатусУтвержденияСтроки),
	               |	МАКСИМУМ(Отменено),
	               |	МАКСИМУМ(Утверждено),
	               |	МАКСИМУМ(ЕстьЗамечания),
	               |	МИНИМУМ(ЕстьАналогиНоменклатура),
	               |	МИНИМУМ(ЕстьАналогиРемонт)
	               |ПО
	               |	КодСтроки,
	               |	ЗаказНаВП";
				   
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	Запрос.УстановитьПараметр("ТаблицаЗаказовИРемонтов", ТаблицаЗаказовИРемонтов.Выгрузить(СтруктураПоиска));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаСтроки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтроки.Следующий() Цикл
		ВыборкаЗаказыНаВП = ВыборкаСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказыНаВП.Следующий() Цикл
			СтрокаВерхнегоУровня = ДеревоЗаказовИРемонтов.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВерхнегоУровня, ВыборкаЗаказыНаВП);
			СтрокаВерхнегоУровня.НомерУровня = 1;
			
			Если ВыборкаСтроки.СтатусУтвержденияСтроки = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении
				Или ВыборкаСтроки.СтатусУтвержденияСтроки = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания Тогда
				СтрокаВерхнегоУровня.Отметка = Истина;
			КонецЕсли;
			
			ВыборкаРемонтов = ВыборкаЗаказыНаВП.Выбрать();
			Пока ВыборкаРемонтов.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаРемонтов.ОбъектРемонта) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаНижнегоУровня = СтрокаВерхнегоУровня.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНижнегоУровня, ВыборкаРемонтов);
				СтрокаНижнегоУровня.НомерУровня = 2;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	НайденныеСтроки = ТаблицаЗаказовИРемонтов.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.СтатусУтвержденияСтроки = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении
			Или НайденнаяСтрока.СтатусУтвержденияСтроки = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания Тогда
			НайденнаяСтрока.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВсеФлаги(ЗначениеФлагов = Ложь, Инвертировать = Ложь)
	
	Для каждого СтрокаДерева Из ДеревоЗаказовИРемонтов.ПолучитьЭлементы() Цикл
	    СтрокаДерева.Отметка = ?(Инвертировать, Не СтрокаДерева.Отметка, ЗначениеФлагов);
	КонецЦикла;
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	НайденныеСтроки = ТаблицаЗаказовИРемонтов.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	    НайденнаяСтрока.Отметка = ?(Инвертировать, Не НайденнаяСтрока.Отметка, ЗначениеФлагов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКоманды_ТаблицаНоменклатурыУтвердитьОтменитьУтверждение()
	
	ВыбранныеСтроки = Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
	    Элементы.ТаблицаНоменклатурыУтвердитьОтменитьУтверждение.Заголовок = "Утвердить";
		Возврат;
	КонецЕсли;
	
	ВсеСтрокиУтверждены = Истина;
	Для каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		ТекущаяСтрока = ТаблицаНоменклатуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Не ТекущаяСтрока.Утверждено = 0 Тогда
		    ВсеСтрокиУтверждены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеСтрокиУтверждены Тогда
		Элементы.ТаблицаНоменклатурыУтвердитьОтменитьУтверждение.Заголовок = "Отменить утверждение";
	Иначе
		Элементы.ТаблицаНоменклатурыУтвердитьОтменитьУтверждение.Заголовок = "Утвердить";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКоманды_ТаблицаЗаказовНаВПУтвердитьОтменитьУтверждение()
	
	ВыбранныеСтроки = Элементы.ТаблицаЗаказовНаВП.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
	    Элементы.ТаблицаЗаказовНаВПУтвердитьОтменитьУтверждение.Заголовок = "Утвердить";
		Возврат;
	КонецЕсли;
	
	ВсеСтрокиУтверждены = Истина;
	Для каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		ТекущаяСтрока = ТаблицаЗаказовНаВП.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Не ТекущаяСтрока.СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден")
			И Не ТекущаяСтрока.СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично")Тогда
		    ВсеСтрокиУтверждены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеСтрокиУтверждены Тогда
		Элементы.ТаблицаЗаказовНаВПУтвердитьОтменитьУтверждение.Заголовок = "Отменить утверждение";
	Иначе
		Элементы.ТаблицаЗаказовНаВПУтвердитьОтменитьУтверждение.Заголовок = "Утвердить";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовкиКомандДереваЗаказовИРемонтов()
	
	ВсеСтрокиУтверждены = Истина;
	ВсеСтрокиОтменены = Истина;
	ЕстьВыбранныеСтроки = Ложь;
	
	Для каждого СтрокаДерева Из ДеревоЗаказовИРемонтов.ПолучитьЭлементы() Цикл
		Если Не СтрокаДерева.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьВыбранныеСтроки = Истина;
		
		Если Не СтрокаДерева.Утверждено = 0 Тогда
		    ВсеСтрокиУтверждены = Ложь;
		КонецЕсли;
		
		Если Не СтрокаДерева.Отменено = 0 Тогда
			ВсеСтрокиОтменены = Ложь;
		КонецЕсли;
		
		Если Не ВсеСтрокиОтменены И Не ВсеСтрокиУтверждены Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВыбранныеСтроки И ВсеСтрокиУтверждены Тогда
		Элементы.ДеревоЗаказовИРемонтовУтвердитьОтменитьУтверждение.Заголовок = "Отменить утверждение";
	Иначе
		Элементы.ДеревоЗаказовИРемонтовУтвердитьОтменитьУтверждение.Заголовок = "Утвердить";
	КонецЕсли;
	
	Если ЕстьВыбранныеСтроки И ВсеСтрокиОтменены Тогда
		Элементы.ДеревоЗаказовИРемонтовОтменитьСнятьОтмену.Заголовок = "Снять отмену";
	Иначе
		Элементы.ДеревоЗаказовИРемонтовОтменитьСнятьОтмену.Заголовок = "Отменить";
	КонецЕсли;
	
	Если ЕстьВыбранныеСтроки Тогда
		Элементы.ДеревоЗаказовИРемонтовУтвердитьОтменитьУтверждение.Доступность = Истина;
		Элементы.ДеревоЗаказовИРемонтовОтменитьСнятьОтмену.Доступность = Истина;
		Элементы.ДеревоЗаказовИРемонтовВернутьСЗамечанием.Доступность = Истина;
	Иначе
		Элементы.ДеревоЗаказовИРемонтовУтвердитьОтменитьУтверждение.Доступность = Ложь;
		Элементы.ДеревоЗаказовИРемонтовОтменитьСнятьОтмену.Доступность = Ложь;
		Элементы.ДеревоЗаказовИРемонтовВернутьСЗамечанием.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаНоменклатурыУтвердитьОтменитьУтверждениеНаСервере(Утвердить)

	ТаблицаВыбранныхСтрок = Новый ТаблицаЗначений();
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Для каждого ВыбраннаяСтрока Из Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки Цикл
		ТекущаяСтрока = ТаблицаНоменклатуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ЗаполнитьЗначенияСвойств(ТаблицаВыбранныхСтрок.Добавить(), ТекущаяСтрока);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаВыбранныхСтрок.Номенклатура КАК Номенклатура,
	               |	ТаблицаВыбранныхСтрок.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_ТаблицаВыбранныхСтрок
	               |ИЗ
	               |	&ТаблицаВыбранныхСтрок КАК ТаблицаВыбранныхСтрок
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗаказовИРемонтов.ЗаказНаВП КАК ЗаказНаВП,
	               |	ТаблицаЗаказовИРемонтов.КодСтроки КАК КодСтроки,
	               |	ТаблицаЗаказовИРемонтов.Отменено КАК Отменено,
	               |	ТаблицаЗаказовИРемонтов.Утверждено КАК Утверждено,
	               |	ТаблицаЗаказовИРемонтов.Номенклатура КАК Номенклатура,
	               |	ТаблицаЗаказовИРемонтов.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_ТаблицаЗаказовИРемонтов
	               |ИЗ
	               |	&ТаблицаЗаказовИРемонтов КАК ТаблицаЗаказовИРемонтов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаЗаказовИРемонтов.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_ТаблицаЗаказовИРемонтов.КодСтроки КАК КодСтроки,
	               |	ВТ_ТаблицаЗаказовИРемонтов.Отменено КАК Отменено,
	               |	ВТ_ТаблицаЗаказовИРемонтов.Утверждено КАК Утверждено
	               |ИЗ
	               |	ВТ_ТаблицаВыбранныхСтрок КАК ВТ_ТаблицаВыбранныхСтрок
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаЗаказовИРемонтов КАК ВТ_ТаблицаЗаказовИРемонтов
	               |		ПО ВТ_ТаблицаВыбранныхСтрок.Номенклатура = ВТ_ТаблицаЗаказовИРемонтов.Номенклатура
	               |			И ВТ_ТаблицаВыбранныхСтрок.Характеристика = ВТ_ТаблицаЗаказовИРемонтов.Характеристика
	               |ИТОГИ ПО
	               |	ЗаказНаВП";
				   
	Запрос.УстановитьПараметр("ТаблицаВыбранныхСтрок", ТаблицаВыбранныхСтрок);
	Запрос.УстановитьПараметр("ТаблицаЗаказовИРемонтов", ТаблицаЗаказовИРемонтов.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаЗаказовНаВП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УтвердитьСтрокиЗаказовНаВП(ВыборкаЗаказовНаВП, Утвердить, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УтвердитьСтрокиЗаказовНаВП(ВыборкаЗаказовНаВП, Утвердить, УчитыватьОтмененные)
	
	Пока ВыборкаЗаказовНаВП.Следующий() Цикл
		ДокументОбъект = ВыборкаЗаказовНаВП.ЗаказНаВП.ПолучитьОбъект();
		
		ЕстьИзменения = Ложь;
		
		ВыборкаСтрок = ВыборкаЗаказовНаВП.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураПоиска = Новый Структура("КодСтроки", ВыборкаСтрок.КодСтроки);
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0
				Или Не УчитыватьОтмененные И НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено Тогда
			    Продолжить;
			КонецЕсли;
			
			Если Утвердить И НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден
				Или Не Утвердить И НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении Тогда
				Продолжить;
			КонецЕсли;
			
			Если Утвердить Тогда
				НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден;
			Иначе
				НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
			КонецЕсли;
			
			НайденныеСтроки[0].Отменено = Ложь;
			
			ЕстьИзменения = Истина;
		КонецЦикла;
		
		Если Не ЕстьИзменения Тогда
			Продолжить;
		КонецЕсли;
		
		РассчитатьСтатусУтвержденияДокументаПоСтрокамТЧ(ДокументОбъект);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		    ОписаниеОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'При записи документа %1 произошла ошибка по причине: %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка, ОписаниеОшибки);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗаказовИРемонтовУтвердитьОтменитьУтверждениеНаСервере(Утвердить)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаказовИРемонтов.ЗаказНаВП КАК ЗаказНаВП,
	               |	ТаблицаЗаказовИРемонтов.КодСтроки КАК КодСтроки,
	               |	ТаблицаЗаказовИРемонтов.Отменено КАК Отменено,
	               |	ТаблицаЗаказовИРемонтов.Утверждено КАК Утверждено
				   |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&ТаблицаЗаказовИРемонтов КАК ТаблицаЗаказовИРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_Данные.КодСтроки КАК КодСтроки,
	               |	ВТ_Данные.Отменено КАК Отменено,
	               |	ВТ_Данные.Утверждено КАК Утверждено
				   |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |ИТОГИ ПО
	               |	ЗаказНаВП";
				   
	СтруктураПоиска = Новый Структура("Отметка", Истина);
	Запрос.УстановитьПараметр("ТаблицаЗаказовИРемонтов", ТаблицаЗаказовИРемонтов.Выгрузить(СтруктураПоиска));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаЗаказовНаВП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УтвердитьСтрокиЗаказовНаВП(ВыборкаЗаказовНаВП, Утвердить, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийЗавершениеВвода(ВведенныйТекст, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВведенныйТекст) Тогда
		ТекстСообщения = НСтр("ru = 'Для возврата ввод замечания обязателен!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;	
	
	ВернутьСЗамечаниемНаСервере(ВведенныйТекст);
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВернутьСЗамечаниемНаСервере(ВведенныйТекст = "", АдресВХУдаленныхСтрок = "")
	
	Если ЗначениеЗаполнено(АдресВХУдаленныхСтрок) Тогда
		ТаблицаУдаленныхСтрок = ПолучитьИзВременногоХранилища(АдресВХУдаленныхСтрок);
	КонецЕсли;
	
	Для каждого СтрокаДерева Из ДеревоЗаказовИРемонтов.ПолучитьЭлементы() Цикл
		Если Не СтрокаДерева.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВведенныйТекст) Тогда
			РегистрыСведений.торо_КомментарииКУтверждениюЗаказовНаВП.СохранитьКомментарийКУтверждению(СтрокаДерева.ЗаказНаВП, ВведенныйТекст, СтрокаДерева.КодСтроки);
		КонецЕсли;
		
		ДокументОбъект = СтрокаДерева.ЗаказНаВП.ПолучитьОбъект();
		
		СтруктураПоиска = Новый Структура("КодСтроки", СтрокаДерева.КодСтроки);
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресВХУдаленныхСтрок) Тогда
			СтруктураПоискаУдаленныхСтрок = Новый Структура("ЗаказНаВП, КодСтрокиНоменклатуры", СтрокаДерева.ЗаказНаВП, СтрокаДерева.КодСтроки);
			НайденныеУдаленныеСтроки = ТаблицаУдаленныхСтрок.НайтиСтроки(СтруктураПоискаУдаленныхСтрок);
			Если НайденныеУдаленныеСтроки.Количество() = 0 Тогда
			    НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания;
			ИначеЕсли НайденныеУдаленныеСтроки[0].ЕстьКомментарии Тогда
				НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЗамечанияИсправлены;
			Иначе
				НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
			КонецЕсли;
		Иначе
			НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания;
		КонецЕсли;
		
		НайденныеСтроки[0].Отменено = Ложь;
		
		РассчитатьСтатусУтвержденияДокументаПоСтрокамТЧ(ДокументОбъект);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		    ОписаниеОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'При записи документа %1 произошла ошибка по причине: %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка, ОписаниеОшибки);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСнятьОтменуНаСервере(Отменить)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаказовИРемонтов.ЗаказНаВП КАК ЗаказНаВП,
	               |	ТаблицаЗаказовИРемонтов.КодСтроки КАК КодСтроки,
	               |	ТаблицаЗаказовИРемонтов.Отменено КАК Отменено,
	               |	ТаблицаЗаказовИРемонтов.Утверждено КАК Утверждено
				   |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&ТаблицаЗаказовИРемонтов КАК ТаблицаЗаказовИРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_Данные.КодСтроки КАК КодСтроки,
	               |	ВТ_Данные.Отменено КАК Отменено,
	               |	ВТ_Данные.Утверждено КАК Утверждено
				   |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные
	               |ИТОГИ ПО
	               |	ЗаказНаВП";
				   
	СтруктураПоиска = Новый Структура("Отметка", Истина);
	Запрос.УстановитьПараметр("ТаблицаЗаказовИРемонтов", ТаблицаЗаказовИРемонтов.Выгрузить(СтруктураПоиска));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаЗаказовНаВП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказовНаВП.Следующий() Цикл
		ДокументОбъект = ВыборкаЗаказовНаВП.ЗаказНаВП.ПолучитьОбъект();
		
		ЕстьИзменения = Ложь;
		
		ВыборкаСтрок = ВыборкаЗаказовНаВП.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураПоиска = Новый Структура("КодСтроки", ВыборкаСтрок.КодСтроки);
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
			    Продолжить;
			КонецЕсли;
			
			Если Отменить И НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено
				Или Не Отменить И НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении Тогда
				Продолжить;
			КонецЕсли;
			
			Если Отменить Тогда
				НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено;
				НайденныеСтроки[0].Отменено = Истина;
			Иначе
				НайденныеСтроки[0].торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
				НайденныеСтроки[0].Отменено = Ложь;
			КонецЕсли;
			
			ЕстьИзменения = Истина;
		КонецЦикла;
		
		Если Не ЕстьИзменения Тогда
			Продолжить;
		КонецЕсли;
		
		РассчитатьСтатусУтвержденияДокументаПоСтрокамТЧ(ДокументОбъект);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		    ОписаниеОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'При записи документа %1 произошла ошибка по причине: %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка, ОписаниеОшибки);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УтвердитьЗаказНаВП(ЗаказНаВП, Утвердить = Истина)
	
	Если Не ЗначениеЗаполнено(ЗаказНаВП) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ЗаказНаВП.ПолучитьОбъект();
	
	ЕстьОтмененные = Ложь;
	
	Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
		Если СтрокаТЧ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено Тогда
			ЕстьОтмененные = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Утвердить Тогда
			СтрокаТЧ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден;
		Иначе
			СтрокаТЧ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
		КонецЕсли;
		
		СтрокаТЧ.Отменено = Ложь;
	КонецЦикла;
	
	Если Утвердить Тогда
		ДокументОбъект.торо_СтатусУтверждения = ?(ЕстьОтмененные, Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично, Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
	Иначе
		ДокументОбъект.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	    ОписаниеОшибки = ОписаниеОшибки();
		ШаблонСообщения = НСтр("ru = 'При записи документа %1 произошла ошибка по причине: %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка, ОписаниеОшибки);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляВозвратаСЗамечанием()

	ВсеСтрокиВСтатусеЕстьЗамечания = Истина;
	МассивСтрок = Новый Массив();
	
	ТаблицаВыбранныхСтрок = Новый ТаблицаЗначений();
	ТаблицаВыбранныхСтрок.Колонки.Добавить("ЗаказНаВП", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));

	Для каждого СтрокаДерева Из ДеревоЗаказовИРемонтов.ПолучитьЭлементы() Цикл
		Если Не СтрокаДерева.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаДерева.СтатусУтвержденияСтроки = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания") Тогда
		    ВсеСтрокиВСтатусеЕстьЗамечания = Ложь;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаВыбранныхСтрок.Добавить(), СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеСтрокиВСтатусеЕстьЗамечания Тогда
		АдресВХТаблицыСтрок = ПоместитьВоВременноеХранилище(ТаблицаВыбранныхСтрок);
	Иначе
		АдресВХТаблицыСтрок = "";
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ВсеСтрокиВСтатусеЕстьЗамечания, АдресВХТаблицыСтрок", ВсеСтрокиВСтатусеЕстьЗамечания, АдресВХТаблицыСтрок);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура РассчитатьСтатусУтвержденияДокументаПоСтрокамТЧ(ДокументОбъект)
	
	ЕстьСтрокиНаУтверждении_ЗамечанияИсправлены = Ложь;
	ВсеСтрокиОтменены = Истина;
	ВсеСтрокиУтверждены = Истина;
	ВсеСтрокиОтмененыИУтверждены = Истина;
	ВсеСтрокиОтменены = Истина;
	ВсеСтрокиОтменен_Утвержден_ЕстьЗамечания = Истина;
	ЕстьСтрокиЕстьЗамечания = Ложь;
	
	Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
	    Если СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении") Тогда
		    ЕстьСтрокиНаУтверждении_ЗамечанияИсправлены = Истина;
			ВсеСтрокиОтменены = Ложь;
			ВсеСтрокиУтверждены = Ложь;
			ВсеСтрокиОтмененыИУтверждены = Ложь;
			ВсеСтрокиОтменен_Утвержден_ЕстьЗамечания = Ложь;
		ИначеЕсли СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден") Тогда
			ВсеСтрокиОтменены = Ложь;
		ИначеЕсли СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено") Тогда
			ВсеСтрокиУтверждены = Ложь;
		ИначеЕсли СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания") Тогда
			ВсеСтрокиОтменены = Ложь;
			ВсеСтрокиУтверждены = Ложь;
			ВсеСтрокиОтмененыИУтверждены = Ложь;
			ЕстьСтрокиЕстьЗамечания = Истина;
		ИначеЕсли СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЗамечанияИсправлены") Тогда
			ЕстьСтрокиНаУтверждении_ЗамечанияИсправлены = Истина;
			ВсеСтрокиОтменены = Ложь;
			ВсеСтрокиУтверждены = Ложь;
			ВсеСтрокиОтмененыИУтверждены = Ложь;
			ВсеСтрокиОтменен_Утвержден_ЕстьЗамечания = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСтрокиНаУтверждении_ЗамечанияИсправлены Тогда
	    ДокументОбъект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении");
	ИначеЕсли ВсеСтрокиОтменены Тогда
	    ДокументОбъект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Отклонен");
	ИначеЕсли ВсеСтрокиУтверждены Тогда
	    ДокументОбъект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден");
	ИначеЕсли ВсеСтрокиОтмененыИУтверждены Тогда
	    ДокументОбъект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично");
	ИначеЕсли ВсеСтрокиОтменен_Утвержден_ЕстьЗамечания И ЕстьСтрокиЕстьЗамечания Тогда
	    ДокументОбъект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.ВозвращенНаДоработку");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьКоличествоВДокументе(ЗаказНаВП, КодСтроки, Количество)
	
	ДокументОбъект = ЗаказНаВП.ПолучитьОбъект();
		
	СтруктураПоиска = Новый Структура("КодСтроки", КодСтроки);
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Или НайденныеСтроки[0].КоличествоУпаковок = Количество Тогда
	    Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].КоличествоУпаковок = Количество;
	Если ЗначениеЗаполнено(НайденныеСтроки[0].Упаковка) Тогда
		НайденныеСтроки[0].Количество = Количество * ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныеСтроки[0].Упаковка, "Коэффициент");
	Иначе
		НайденныеСтроки[0].Количество = Количество;
	КонецЕсли;
		
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	    ОписаниеОшибки = ОписаниеОшибки();
		ШаблонСообщения = НСтр("ru = 'При записи документа %1 произошла ошибка по причине: %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка, ОписаниеОшибки);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналогиНаКлиенте(ИмяПоля)
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИзДокумента", Ложь);
	
	Если ИмяПоля = "ТаблицаНоменклатурыЕстьАналоги" Тогда
		ПолучитьДанныеДляОткрытияФормыЗаменыНаАналоги(ПараметрыФормы, ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, 0);
	ИначеЕсли ИмяПоля = "ДеревоЗаказовИРемонтовЕстьАналогиНоменклатура"
		Или ИмяПоля = "ДеревоЗаказовИРемонтовЕстьАналогиРемонт" Тогда
		
		ТекущиеДанныеДерева = Элементы.ДеревоЗаказовИРемонтов.ТекущиеДанные;
		Если ТекущиеДанныеДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьДанныеДляОткрытияФормыЗаменыНаАналоги(ПараметрыФормы, ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанныеДерева.КодСтроки);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыФормы.Свойство("АдресВХ_ЗаказыДоЗамены") Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаЗаменыНоменклатурыНаАналогиЗаказовНаВП", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеДляОткрытияФормыЗаменыНаАналоги(ПараметрыФормы, Номенклатура, Характеристика, КодСтроки)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаЗаказов.Номенклатура КАК Номенклатура,
	               |	ТаблицаЗаказов.Характеристика КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаЗаказов.КодСтроки КАК КодСтроки,
	               |	ТаблицаЗаказов.ЗаказНаВП КАК ЗаказНаВП,
	               |	ТаблицаЗаказов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТаблицаЗаказов.Количество КАК Количество,
	               |	ТаблицаЗаказов.ЕстьАналогиНоменклатура КАК ЕстьАналоги
	               |ПОМЕСТИТЬ ВТ_ТаблицаЗаказов
	               |ИЗ
	               |	&ТаблицаЗаказов КАК ТаблицаЗаказов
	               |ГДЕ
	               |	НЕ ТаблицаЗаказов.ЕстьАналогиНоменклатура = 2
				   |	И ТаблицаЗаказов.РедактированиеДоступно
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |    ЗаказНаВП,
				   |	КодСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаЗаказов.Номенклатура КАК Номенклатура,
	               |	ВТ_ТаблицаЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ВТ_ТаблицаЗаказов.Номенклатура КАК НоменклатураИсходная,
	               |	ВТ_ТаблицаЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыИсходная,
	               |	ВТ_ТаблицаЗаказов.КодСтроки КАК КодСтрокиНоменклатуры,
	               |	0 КАК КодСтрокиАналога,
	               |	ВТ_ТаблицаЗаказов.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВТ_ТаблицаЗаказов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВТ_ТаблицаЗаказов.Количество КАК ДоступноКЗамене,
	               |	ВТ_ТаблицаЗаказов.Количество КАК ИсходноеКоличествоПоДокументу,
	               |	0 КАК ЗамененноеКоличество,
	               |	ИСТИНА КАК Исходная
	               |ПОМЕСТИТЬ ВТ_ИсходныеСтрокиНачальная
	               |ИЗ
	               |	ВТ_ТаблицаЗаказов КАК ВТ_ТаблицаЗаказов
	               |ГДЕ
	               |	ВТ_ТаблицаЗаказов.ЕстьАналоги = 1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаЗаказов.Номенклатура,
	               |	ВТ_ТаблицаЗаказов.ХарактеристикаНоменклатуры,
	               |	ВТ_ТаблицаЗаказов.Номенклатура,
	               |	ВТ_ТаблицаЗаказов.ХарактеристикаНоменклатуры,
	               |	ВТ_ТаблицаЗаказов.КодСтроки,
	               |	0,
	               |	ВТ_ТаблицаЗаказов.ЗаказНаВП,
	               |	ВТ_ТаблицаЗаказов.ЕдиницаИзмерения,
	               |	0,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КоличествоУпаковок,
	               |	0,
	               |	ИСТИНА
	               |ИЗ
	               |	ВТ_ТаблицаЗаказов КАК ВТ_ТаблицаЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
	               |		ПО ВТ_ТаблицаЗаказов.ЗаказНаВП = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка
	               |			И ВТ_ТаблицаЗаказов.КодСтроки = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры
	               |ГДЕ
	               |	ВТ_ТаблицаЗаказов.ЕстьАналоги = 1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КодСтроки,
	               |	0,
	               |	ВТ_ТаблицаЗаказов.ЗаказНаВП,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Упаковка,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КоличествоУпаковок,
	               |	0,
	               |	ИСТИНА
	               |ИЗ
	               |	ВТ_ТаблицаЗаказов КАК ВТ_ТаблицаЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги
	               |			ПО ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.Ссылка
	               |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиНоменклатуры
				   |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиАналога
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	               |			ПО ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
	               |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки
	               |		ПО ВТ_ТаблицаЗаказов.ЗаказНаВП = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка
	               |			И ВТ_ТаблицаЗаказов.КодСтроки = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога
	               |ГДЕ
	               |	ВТ_ТаблицаЗаказов.ЕстьАналоги = 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КодСтроки,
	               |	0,
	               |	ВТ_ТаблицаЗаказов.ЗаказНаВП,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Упаковка,
	               |	0,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок,
	               |	0,
	               |	ИСТИНА
	               |ИЗ
	               |	ВТ_ТаблицаЗаказов КАК ВТ_ТаблицаЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	               |			ПО ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
	               |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки
	               |		ПО ВТ_ТаблицаЗаказов.ЗаказНаВП = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка
	               |			И ВТ_ТаблицаЗаказов.КодСтроки = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога
	               |ГДЕ
	               |	ВТ_ТаблицаЗаказов.ЕстьАналоги = 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.ХарактеристикаНоменклатуры,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.ХарактеристикаНоменклатуры,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры,
	               |	0,
	               |	ВТ_ТаблицаЗаказов.ЗаказНаВП,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Упаковка,
	               |	0,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КоличествоУпаковок,
	               |	0,
	               |	ИСТИНА
	               |ИЗ
	               |	ВТ_ТаблицаЗаказов КАК ВТ_ТаблицаЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
	               |		ПО ВТ_ТаблицаЗаказов.ЗаказНаВП = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка
	               |			И ВТ_ТаблицаЗаказов.КодСтроки = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога
	               |			И (ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры = 0)
	               |ГДЕ
	               |	ВТ_ТаблицаЗаказов.ЕстьАналоги = 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.ХарактеристикаНоменклатуры,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиНоменклатуры,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиАналога,
	               |	ВТ_ТаблицаЗаказов.ЗаказНаВП,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Упаковка,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КоличествоУпаковок,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КоличествоУпаковок,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ВТ_ТаблицаЗаказов КАК ВТ_ТаблицаЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги
	               |			ПО ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.Ссылка
	               |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиНоменклатуры
				   |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиАналога
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	               |			ПО ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
	               |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки
	               |		ПО ВТ_ТаблицаЗаказов.ЗаказНаВП = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка
	               |			И ВТ_ТаблицаЗаказов.КодСтроки = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры
	               |ГДЕ
	               |	ВТ_ТаблицаЗаказов.ЕстьАналоги = 1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.ХарактеристикаНоменклатуры,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиНоменклатуры,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиАналога,
	               |	ВТ_ТаблицаЗаказов.ЗаказНаВП,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Упаковка,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КоличествоУпаковок,
	               |	ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КоличествоУпаковок,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ВТ_ТаблицаЗаказов КАК ВТ_ТаблицаЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги
	               |			ПО ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.Ссылка
	               |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиНоменклатуры
				   |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы_Аналоги.КодСтрокиАналога
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	               |			ПО ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
	               |				И ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки
	               |		ПО ВТ_ТаблицаЗаказов.ЗаказНаВП = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка
	               |			И ВТ_ТаблицаЗаказов.КодСтроки = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога
	               |ГДЕ
	               |	ВТ_ТаблицаЗаказов.ЕстьАналоги = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИсходныеСтрокиНачальная.Номенклатура КАК Номенклатура,
	               |	ВТ_ИсходныеСтрокиНачальная.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ВТ_ИсходныеСтрокиНачальная.КодСтрокиНоменклатуры КАК КодСтроки,
	               |	ВТ_ИсходныеСтрокиНачальная.ЗаказНаВП КАК ЗаказНаВП,
				   |	ВЫРАЗИТЬ(ВТ_ИсходныеСтрокиНачальная.ЗаказНаВП КАК Документ.ЗаказНаВнутреннееПотребление).Склад КАК Склад,
				   |	ВЫРАЗИТЬ(ВТ_ИсходныеСтрокиНачальная.ЗаказНаВП КАК Документ.ЗаказНаВнутреннееПотребление).Ответственный КАК Ответственный,
				   |	ВЫРАЗИТЬ(ВТ_ИсходныеСтрокиНачальная.ЗаказНаВП КАК Документ.ЗаказНаВнутреннееПотребление).Подразделение КАК Подразделение,
				   |	ВЫБОР
				   |		КОГДА ВТ_ИсходныеСтрокиНачальная.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
				   |			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
				   |		ИНАЧЕ ВТ_ИсходныеСтрокиНачальная.ЕдиницаИзмерения
				   |	КОНЕЦ КАК ЕдиницаИзмерения,
				   |	СУММА(ВТ_ИсходныеСтрокиНачальная.ИсходноеКоличествоПоДокументу) КАК Количество,
	               |	СУММА(ВТ_ИсходныеСтрокиНачальная.ДоступноКЗамене) КАК ДоступноКЗамене,
	               |	МАКСИМУМ(ВТ_ИсходныеСтрокиНачальная.Исходная) КАК Исходная
	               |ИЗ
	               |	ВТ_ИсходныеСтрокиНачальная КАК ВТ_ИсходныеСтрокиНачальная
	               |ГДЕ
	               |	ВТ_ИсходныеСтрокиНачальная.Исходная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ИсходныеСтрокиНачальная.Номенклатура,
	               |	ВТ_ИсходныеСтрокиНачальная.ХарактеристикаНоменклатуры,
	               |	ВТ_ИсходныеСтрокиНачальная.КодСтрокиНоменклатуры,
	               |	ВТ_ИсходныеСтрокиНачальная.ЗаказНаВП,
	               |	ВТ_ИсходныеСтрокиНачальная.ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИсходныеСтрокиНачальная.Номенклатура КАК Номенклатура,
	               |	ВТ_ИсходныеСтрокиНачальная.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ВТ_ИсходныеСтрокиНачальная.КодСтрокиНоменклатуры КАК КодСтрокиНоменклатуры,
	               |	ВТ_ИсходныеСтрокиНачальная.КодСтрокиАналога КАК КодСтрокиАналога,
	               |	ВТ_ИсходныеСтрокиНачальная.ЗаказНаВП КАК ЗаказНаВП,
	               |	ВЫБОР
				   |		КОГДА ВТ_ИсходныеСтрокиНачальная.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
				   |			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
				   |		ИНАЧЕ ВТ_ИсходныеСтрокиНачальная.ЕдиницаИзмерения
				   |	КОНЕЦ КАК ЕдиницаИзмерения,
				   |	СУММА(ВТ_ИсходныеСтрокиНачальная.ЗамененноеКоличество) КАК ЗамененноеКоличество,
	               |	СУММА(ВТ_ИсходныеСтрокиНачальная.ДоступноКЗамене) КАК Количество,
	               |	МАКСИМУМ(ВТ_ИсходныеСтрокиНачальная.Исходная) КАК Исходная,
	               |	МАКСИМУМ(ВТ_ИсходныеСтрокиНачальная.НоменклатураИсходная) КАК НоменклатураИсходная,
	               |	МАКСИМУМ(ВТ_ИсходныеСтрокиНачальная.ХарактеристикаНоменклатурыИсходная) КАК ХарактеристикаНоменклатурыИсходная
	               |ИЗ
	               |	ВТ_ИсходныеСтрокиНачальная КАК ВТ_ИсходныеСтрокиНачальная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ИсходныеСтрокиНачальная.Номенклатура,
	               |	ВТ_ИсходныеСтрокиНачальная.ХарактеристикаНоменклатуры,
	               |	ВТ_ИсходныеСтрокиНачальная.КодСтрокиНоменклатуры,
	               |	ВТ_ИсходныеСтрокиНачальная.КодСтрокиАналога,
	               |	ВТ_ИсходныеСтрокиНачальная.ЗаказНаВП,
	               |	ВТ_ИсходныеСтрокиНачальная.ЕдиницаИзмерения";
	
	Если ЗначениеЗаполнено(КодСтроки) Тогда
		СтруктураПоиска = Новый Структура("КодСтроки, Номенклатура, Характеристика", КодСтроки, Номенклатура, Характеристика);
	Иначе
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказовИРемонтов.Выгрузить(СтруктураПоиска));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЗаказыДоЗамены = Новый ТаблицаЗначений();
	РезультатЗамены = Новый ТаблицаЗначений();
	
	Если РезультатЗапроса[2].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыДоЗамены = РезультатЗапроса[2].Выгрузить();
	
	Если РезультатЗапроса[3].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗамены = РезультатЗапроса[3].Выгрузить();
	
	ПараметрыФормы.Вставить("АдресВХ_ЗаказыДоЗамены", ПоместитьВоВременноеХранилище(ЗаказыДоЗамены));
	ПараметрыФормы.Вставить("АдресВХ_РезультатЗамены", ПоместитьВоВременноеХранилище(РезультатЗамены));
	
	ПараметрыФормы.Вставить("Номенклатура", ЗаказыДоЗамены[0].Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ЗаказыДоЗамены[0].ХарактеристикаНоменклатуры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьЗаменуНоменклатурыНаАналоги(СтруктураПараметров)
	
	// 1. найти исходную строку строку в ТЧ товаров. Если ее нет, а замену отменили (количество > 0), то создать строку. 
	//    Если количество после замены = 0, то удалить, иначе присвоить количество
	// 2. Найти строку-аналог. Если ее нет, а она не удалена - создать новую и записать туда количество. Если она есть, но удалена
	//    с формы - удалить в ТЧ Товаров. Если она есть и не удалена - заполнить количество
	// 3. Найти строку в ТЧ замененных материалов по КодСтрокиНоменклатуры+КодСтрокиАналога. Если есть и исходная строка не нулевая
	//    то поменять количество замененное
	// 4. Если ее нет (уже ранее полностью заменили) найти строку в ТЧ замененных материалов по КодСтрокиАналога. Если есть и исходная строка не нулевая
	//    то поменять количество замененное
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресВХ_ТаблицаДанных);
	
	ТаблицаЗаказов = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресВХ_ТаблицаЗаказов);
	
	Для каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
		СтруктураПоискаПоЗаказу = Новый Структура("ЗаказНаВП", СтрокаЗаказа.ЗаказНаВП);
		НайденныеСтрокиПоЗаказу = ТаблицаДанных.НайтиСтроки(СтруктураПоискаПоЗаказу);
		
		Если НайденныеСтрокиПоЗаказу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаЗаказа.ЗаказНаВП.ПолучитьОбъект();
		
		КодСтрокиНоменклатуры = НайденныеСтрокиПоЗаказу[0].КодСтрокиНоменклатуры;
		
		Для каждого НайденнаяСтрокаПоЗаказу Из НайденныеСтрокиПоЗаказу Цикл
			ОбработатьЗаменуНаАналогВСтроке(ДокументОбъект, НайденнаяСтрокаПоЗаказу, КодСтрокиНоменклатуры);
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка проведения документа по причине'") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьЗаменуНаАналогВСтроке(ДокументОбъект, СтрокаТЗ, КодСтрокиНоменклатуры)

	Номенклатура = СтрокаТЗ.НоменклатураИсходная;
	Характеристика = СтрокаТЗ.ХарактеристикаНоменклатурыИсходная;
	
	Если СтрокаТЗ.Исходная Тогда
		СтруктураПоискаИсходногоТовара = Новый Структура("КодСтроки", СтрокаТЗ.КодСтрокиНоменклатуры);
		НайденныеСтрокиИсходногоТовара = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоискаИсходногоТовара);
		
		Если НайденныеСтрокиИсходногоТовара.Количество() = 0 И СтрокаТЗ.Количество > 0 Тогда
			КодСтрокиНоменклатуры = ДокументОбъект.МаксимальныйКодСтроки + 1;
			
			НоваяСтрокаТЗ = ДокументОбъект.Товары.Добавить();
			НоваяСтрокаТЗ.КодСтроки = КодСтрокиНоменклатуры;
			НоваяСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
			НоваяСтрокаТЗ.Характеристика = СтрокаТЗ.ХарактеристикаНоменклатуры;
			НоваяСтрокаТЗ.КоличествоУпаковок = СтрокаТЗ.Количество;
			НоваяСтрокаТЗ.Упаковка = СтрокаТЗ.ЕдиницаИзмерения;
			НоваяСтрокаТЗ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
			НоваяСтрокаТЗ.Количество = НоваяСтрокаТЗ.КоличествоУпаковок * ПолучитьКоэффициентУпаковки(НоваяСтрокаТЗ.Упаковка);
			
			СтруктураПоискаЗамененныхАналогов = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Упаковка", НоваяСтрокаТЗ.Номенклатура, НоваяСтрокаТЗ.Характеристика, НоваяСтрокаТЗ.Упаковка);
			НайденныеСтрокиЗамененныхАналогов = ДокументОбъект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
			
			Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
				СтрокаТЧ.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
			КонецЦикла;
		ИначеЕсли НайденныеСтрокиИсходногоТовара.Количество() > 0 И СтрокаТЗ.Количество > 0 Тогда
			НайденныеСтрокиИсходногоТовара[0].КоличествоУпаковок = СтрокаТЗ.Количество;
			КодСтрокиНоменклатуры = НайденныеСтрокиИсходногоТовара[0].КодСтроки;
			НайденныеСтрокиИсходногоТовара[0].Количество = НайденныеСтрокиИсходногоТовара[0].КоличествоУпаковок * ПолучитьКоэффициентУпаковки(НайденныеСтрокиИсходногоТовара[0].Упаковка);
		ИначеЕсли НайденныеСтрокиИсходногоТовара.Количество() > 0 И СтрокаТЗ.Количество = 0 Тогда
			ДокументОбъект.Товары.Удалить(НайденныеСтрокиИсходногоТовара[0]);
			
			СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиНоменклатуры", СтрокаТЗ.КодСтрокиНоменклатуры);
			НайденныеСтрокиЗамененныхАналогов = ДокументОбъект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
			
			Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
				СтрокаТЧ.КодСтрокиНоменклатуры = 0;
			КонецЦикла;
			
			КодСтрокиНоменклатуры = 0;
		КонецЕсли;
	Иначе
		СтруктураПоискаАналога = Новый Структура("КодСтроки", СтрокаТЗ.КодСтрокиАналога);
		НайденныеСтрокиАналога = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоискаАналога);
		
		Если НайденныеСтрокиАналога.Количество() = 0 И Не СтрокаТЗ.Удален Тогда
			ТекущийКодСтроки = ДокументОбъект.МаксимальныйКодСтроки + 1;
			
			НоваяСтрокаТЗ = ДокументОбъект.Товары.Добавить();
			НоваяСтрокаТЗ.КодСтроки = ТекущийКодСтроки;
			НоваяСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
			НоваяСтрокаТЗ.Характеристика = СтрокаТЗ.ХарактеристикаНоменклатуры;
			НоваяСтрокаТЗ.КоличествоУпаковок = СтрокаТЗ.Количество;
			НоваяСтрокаТЗ.Упаковка = СтрокаТЗ.ЕдиницаИзмерения;
			НоваяСтрокаТЗ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
			НоваяСтрокаТЗ.Количество = НоваяСтрокаТЗ.КоличествоУпаковок * ПолучитьКоэффициентУпаковки(НоваяСтрокаТЗ.Упаковка);
			
			НоваяСтрокаЗамененныхАналогов = ДокументОбъект.торо_ЗамененныеАналогамиМатериалы.Добавить();
			НоваяСтрокаЗамененныхАналогов.КодСтрокиАналога = ТекущийКодСтроки;
			НоваяСтрокаЗамененныхАналогов.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
			НоваяСтрокаЗамененныхАналогов.ХарактеристикаНоменклатуры = Характеристика;
			НоваяСтрокаЗамененныхАналогов.Номенклатура = Номенклатура;
			НоваяСтрокаЗамененныхАналогов.КоличествоУпаковок = СтрокаТЗ.ЗамененноеКоличество;
			НоваяСтрокаЗамененныхАналогов.Упаковка = СтрокаТЗ.ЕдиницаИзмерения;
			НоваяСтрокаЗамененныхАналогов.Количество = НоваяСтрокаЗамененныхАналогов.КоличествоУпаковок * ПолучитьКоэффициентУпаковки(НоваяСтрокаЗамененныхАналогов.Упаковка);
			
			ДокументОбъект.МаксимальныйКодСтроки = ТекущийКодСтроки;
		ИначеЕсли НайденныеСтрокиАналога.Количество() > 0 И Не СтрокаТЗ.Удален Тогда
			НайденныеСтрокиАналога[0].КоличествоУпаковок = СтрокаТЗ.Количество;
			НайденныеСтрокиАналога[0].Количество = СтрокаТЗ.Количество * ПолучитьКоэффициентУпаковки(НайденныеСтрокиАналога[0].Упаковка);
			
			СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиАналога, Номенклатура, ХарактеристикаНоменклатуры", СтрокаТЗ.КодСтрокиАналога, Номенклатура, Характеристика);
			НайденныеСтрокиЗамененныхАналогов = ДокументОбъект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
			
			Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЗ.ЗамененноеКоличество;
				СтрокаТЧ.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
				СтрокаТЧ.Количество = СтрокаТЗ.ЗамененноеКоличество * ПолучитьКоэффициентУпаковки(СтрокаТЧ.Упаковка);
			КонецЦикла;
		ИначеЕсли НайденныеСтрокиАналога.Количество() > 0 И СтрокаТЗ.Удален Тогда
			ДокументОбъект.Товары.Удалить(НайденныеСтрокиАналога[0]);
			
			СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиАналога", СтрокаТЗ.КодСтрокиАналога);
			НайденныеСтрокиЗамененныхАналогов = ДокументОбъект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
			
			Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
				ДокументОбъект.торо_ЗамененныеАналогамиМатериалы.Удалить(СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковки(Упаковка)

	Если ЗначениеЗаполнено(Упаковка) Тогда
		Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
	Иначе
		Коэффициент = 1;
	КонецЕсли;

	Возврат Коэффициент;

КонецФункции

&НаКлиенте
Процедура ДеревоЗаказовИРемонтовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗаказовИРемонтов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.РедактированиеДоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти