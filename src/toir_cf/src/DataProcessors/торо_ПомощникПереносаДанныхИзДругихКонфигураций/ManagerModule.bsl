#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗагрузитьПравилаДляОбменаДанными(Отказ, ВидПравил, ИсточникПравил, ИмяМакетаПравил, ИмяМакетаПравилКорреспондента = "", ИмяФайла = "", АдресВременногоХранилища = "") Экспорт
	Попытка
		СтруктураЗаписи = Новый Структура();
		СтруктураЗаписи.Вставить("ИмяПланаОбмена", "ОбменТОИР20ТОИР30");
		СтруктураЗаписи.Вставить("ВидПравил", ВидПравил);
		СтруктураЗаписи.Вставить("ИсточникПравил",  ИсточникПравил);
		СтруктураЗаписи.Вставить("ИспользоватьФильтрВыборочнойРегистрацииОбъектов", Ложь);
		
		Если ИсточникПравил = Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации Тогда
		    Если Не ПустаяСтрока(ИмяМакетаПравилКорреспондента) Тогда
				СтруктураЗаписи.Вставить("ИмяМакетаПравилКорреспондента", ИмяМакетаПравилКорреспондента);
			КонецЕсли;
			СтруктураЗаписи.Вставить("ИмяМакетаПравил", ИмяМакетаПравил);
			
			ЭтоАрхив = Ложь;
		Иначе
			Если Не ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			КонецЕсли;
			
			ЭтоАрхив = Истина;
		КонецЕсли;
		
		// Получаем набор записей регистра.
		НаборЗаписей = ОбменДаннымиСлужебный.СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, "ПравилаДляОбменаДанными");
		
		// Добавляем только одну запись в новый набор записей.
		НоваяЗапись = НаборЗаписей.Добавить();
		
		// Заполняем значения свойств записи из структуры.
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
		
		// Загружаем правила для обмена данными в ИБ.
		РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, НаборЗаписей[0], АдресВременногоХранилища, ИмяФайла, ЭтоАрхив);
		
		Если Не Отказ Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при загрузке правил по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка правил.Ошибка выполнения");
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка правил.Аварийное завершение");
		
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьУзелПланаОбмена(ЗагружатьПравилаИзКонфигурации = Истина) Экспорт
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбменТОИР20ТОИР30.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ОбменТОИР20ТОИР30 КАК ОбменТОИР20ТОИР30
		|ГДЕ
		|	ОбменТОИР20ТОИР30.ЭтотУзел = ЛОЖЬ";
#КонецОбласти
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Узел = СоздатьУзелПланаОбмена(ЗагружатьПравилаИзКонфигурации);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
		    Узел = Выборка.Ссылка;
		Иначе
			Узел = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Узел;
КонецФункции

Функция ПолучитьСобытияЖурналаРегистрации(НазваниеШага) Экспорт
	МассивСобытий = Новый Массив();
	
	Если НазваниеШага = "ЗагрузкаДанных" Тогда
	    Шаг = "Загрузка данных";
		
		МассивСобытий.Добавить("Обмен данными.ОбменТОИР20ТОИР30.Получение данных");
		МассивСобытий.Добавить("Обмен данными.ОбменТОИР20ТОИР30.Отправка данных");
		МассивСобытий.Добавить("Обмен данными");
	ИначеЕсли НазваниеШага = "ЗагрузкаКлючейМП" Тогда
	    Шаг = "Загрузка ключей МП";
	ИначеЕсли НазваниеШага = "ЗагрузкаНастроек" Тогда
	    Шаг = "Загрузка настроек";
	ИначеЕсли НазваниеШага = "ЗагрузкаИсторииСистемыВзаимодействия" Тогда
	    Шаг = "Загрузка истории системы взаимодействия";
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
	МассивСобытий.Добавить("Фоновое задание.торо_ПомощникПереносаДанныхИзДругихКонфигураций." + Шаг + ".Запуск");
	МассивСобытий.Добавить("Фоновое задание.торо_ПомощникПереносаДанныхИзДругихКонфигураций." + Шаг + ".Ошибка выполнения");
	МассивСобытий.Добавить("Фоновое задание.торо_ПомощникПереносаДанныхИзДругихКонфигураций." + Шаг + ".Успешное выполнение");
	МассивСобытий.Добавить("Фоновое задание.торо_ПомощникПереносаДанныхИзДругихКонфигураций." + Шаг + ".Аварийное завершение");
	
	Возврат МассивСобытий;
КонецФункции

Функция ПолучитьОписаниеСтруктурыВыполненияФЗ() Экспорт
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗагрузкаДанных", Новый Структура("Статус, ДатаЗапускаФЗ", "Не обработано", ТекущаяДата()));
	РезультатВыполнения.Вставить("ЗагрузкаКлючейМП", Новый Структура("Статус, ДатаЗапускаФЗ", "Не обработано", ТекущаяДата()));
	РезультатВыполнения.Вставить("ЗагрузкаНастроек", Новый Структура("Статус, ДатаЗапускаФЗ", "Не обработано", ТекущаяДата()));
	РезультатВыполнения.Вставить("ЗагрузкаИсторииСистемыВзаимодействия", Новый Структура("Статус, ДатаЗапускаФЗ", "Не обработано", ТекущаяДата()));
	
	Возврат РезультатВыполнения;
КонецФункции

Процедура ЗагрузитьДанные(ПараметрыЗагрузки, АдресХранилища) Экспорт
	ПроверитьКонстантуИспользованияСинхронизацииДанных();
	
	Попытка
		Если ПараметрыЗагрузки.ПараметрыВыполнения.ЭтоКлиент Тогда
			ИмяФайлаДанных = ПолучитьИмяВременногоФайла("zip");
			ПараметрыЗагрузки.ПараметрыВыполнения.ДвоичныеДанныеАрхива.Записать(ИмяФайлаДанных);
			
			ПараметрыЗагрузки.ПараметрыВыполнения.ИмяФайлаДанных = ИмяФайлаДанных;
		КонецЕсли;
	Исключение
		РезультатВыполнения = ПолучитьОписаниеСтруктурыВыполненияФЗ();
		
		РезультатВыполнения.ЗагрузкаДанных.Статус = "Ошибка";
		РезультатВыполнения.ЗагрузкаКлючейМП.Статус = "Ошибка";
		РезультатВыполнения.ЗагрузкаНастроек.Статус = "Ошибка";
		РезультатВыполнения.ЗагрузкаИсторииСистемыВзаимодействия.Статус = "Ошибка";
		
		ОписаниеОшибки = Нстр("ru = 'Ошибка при получении архива данных по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Ошибка выполнения");
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка данных.Аварийное завершение");
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		
		Возврат;
	КонецПопытки;
	
	Если ПараметрыЗагрузки.ПараметрыВыполнения.КонфигурацияИсточник = "ТОИР13" Тогда
		ЗагрузитьДанные_ТОИР13(ПараметрыЗагрузки, АдресХранилища);
	ИначеЕсли ПараметрыЗагрузки.ПараметрыВыполнения.КонфигурацияИсточник = "ТОИР20" Тогда
		ЗагрузитьДанные_ТОИР20(ПараметрыЗагрузки, АдресХранилища);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСПланомОбмена

Функция СоздатьУзелПланаОбмена(ЗагружатьПравилаИзКонфигурации = Истина)
	НовыйУзел = ПланыОбмена.ОбменТОИР20ТОИР30.СоздатьУзел();
	НовыйУзел.Код = "20";
	НовыйУзел.Наименование = "1С:ТОИР КОРП, ред. 2.0";
	НовыйУзел.Записать();
	
	ТекущийУзел = ПолучитьТекущийУзелПланаОбмена();
	ТекущийУзел = ТекущийУзел.ПолучитьОбъект();
	ТекущийУзел.Код = "30";
	ТекущийУзел.Записать();
	
	Если ЗагружатьПравилаИзКонфигурации Тогда
	    ЗагрузитьПравилаДляОбменаДанными(Ложь, Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов, Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации, "ПравилаОбмена", "ПравилаОбменаКорреспондента");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Корреспондент.Установить(НовыйУзел.Ссылка);
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Корреспондент = НовыйУзел.Ссылка;
	НоваяСтрока.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	НоваяСтрока.FILEКаталогОбменаИнформацией = КаталогВременныхФайлов();
	НоваяСтрока.FILEСжиматьФайлИсходящегоСообщения = Ложь;
	НоваяСтрока.FILEТранслитерироватьИменаФайловСообщенийОбмена = Ложь;
	НаборЗаписей.Записать();
	
	Возврат НовыйУзел.Ссылка;
КонецФункции

Функция ПолучитьТекущийУзелПланаОбмена()
	Запрос = Новый Запрос();
#Область ТекстЗапроса
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбменТОИР20ТОИР30.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ОбменТОИР20ТОИР30 КАК ОбменТОИР20ТОИР30
		|ГДЕ
		|	ОбменТОИР20ТОИР30.ЭтотУзел = ИСТИНА";
#КонецОбласти
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?(РезультатЗапроса.Пустой(), Неопределено, РезультатЗапроса.Выгрузить()[0].Ссылка);
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзТОИР13

Процедура ЗагрузитьДанные_ТОИР13(ПараметрыЗагрузки, АдресХранилища)
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка данных.Запуск");
		
		РезультатВыполнения = ПолучитьОписаниеСтруктурыВыполненияФЗ();
		РезультатВыполнения.ЗагрузкаДанных.Статус = "Выполняется";
		ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
		
		ЗагрузитьДанные_УниверсальныйОбменДаннымиXML(ПараметрыЗагрузки.ПараметрыВыполнения.ИмяФайлаДанных, РезультатВыполнения);
		
		ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка данных. Успешное выполнение");
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	Исключение
		РезультатВыполнения.ЗагрузкаДанных.Статус = "Ошибка";
		
		ОписаниеОшибки = Нстр("ru = 'Ошибка при загрузке данных по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Ошибка выполнения");
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка данных.Аварийное завершение");
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	КонецПопытки;
КонецПроцедуры

Процедура ЗагрузитьДанные_УниверсальныйОбменДаннымиXML(ИмяФайла, РезультатВыполненияФЗ)
	РезультатВыполнения = РезультатВыполненияФЗ.ЗагрузкаДанных;
	
	ИмяФайлаПротокола = ПолучитьИмяВременногоФайла("txt");
	
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	ОбработкаОбмена.РежимОтладкиАлгоритмов = 1;
	ОбработкаОбмена.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
	ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
	ОбработкаОбмена.ВыводВПротоколСообщенийОбОшибках = Истина;
	ОбработкаОбмена.ИмяФайлаПротоколаОбмена = ИмяФайлаПротокола;
	
	Кодировка = КодировкаТекста.ANSI;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбработкаОбмена, "КодировкаФайлаПротоколаОбмена") Тогда
		Кодировка = КодировкаТекста.UTF8;
		ОбработкаОбмена.КодировкаФайлаПротоколаОбмена = Кодировка;
	КонецЕсли;
	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайла;
	Попытка
		ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
	Исключение
		ОписаниеОшибки = Нстр("ru = 'При чтении данных произошла ошибка (ошибка в формате файла данных):'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Ошибка выполнения");
		
		РезультатВыполнения.Статус = "Ошибка";
		УдалитьФайлы(ИмяФайла);
		Возврат;
	КонецПопытки;
	
	Если Не ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаПротокола);
		ТекстПротоколаОбмена = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ОписаниеОшибки = Нстр("ru = 'При чтении правил обмена произошла ошибка:'") + Символы.ПС + Символы.ПС + ТекстПротоколаОбмена;
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Ошибка выполнения");
		
		РезультатВыполнения.Статус = "Ошибка";
		УдалитьФайлы(ИмяФайла);
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработкаОбмена.ВыполнитьЗагрузку();
	Исключение
		ОписаниеОшибки = Нстр("ru = 'При загрузке данных произошла ошибка: '") + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Ошибка выполнения");
		
		РезультатВыполнения.Статус = "Ошибка";
		УдалитьФайлы(ИмяФайла);
		Возврат;
	КонецПопытки;
	
	Если ОбработкаОбмена.ФлагОшибки Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаПротокола);
		ТекстПротоколаОбмена = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ОписаниеОшибки = Нстр("ru = 'При загрузке данных произошла ошибка:'") + Символы.ПС + Символы.ПС + ТекстПротоколаОбмена;
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Ошибка выполнения");
		
		РезультатВыполнения.Статус = "Ошибка";
	Иначе
		РезультатВыполнения.Статус = "Выполнено успешно";
	КонецЕсли;
	
	//УдалитьФайлы(ИмяФайла);
	УдалитьФайлы(ИмяФайлаПротокола);
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзТОИР20

Процедура ЗагрузитьДанные_ТОИР20(ПараметрыЗагрузки, АдресХранилища)

	РезультатВыполнения = ПолучитьОписаниеСтруктурыВыполненияФЗ();
	РезультатВыполнения.ЗагрузкаДанных.Статус = "Выполняется";
	ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
	
	КаталогДляИзвлечения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
			
	Попытка
	    Архив = Новый ЧтениеZipФайла(ПараметрыЗагрузки.ПараметрыВыполнения.ИмяФайлаДанных);
	Исключение
		РезультатВыполнения.ЗагрузкаДанных.Статус = "Ошибка";
		РезультатВыполнения.ЗагрузкаКлючейМП.Статус = "Ошибка";
		РезультатВыполнения.ЗагрузкаНастроек.Статус = "Ошибка";
		РезультатВыполнения.ЗагрузкаИсторииСистемыВзаимодействия.Статус = "Ошибка";
		
		ОписаниеОшибки = Нстр("ru = 'Ошибка при открытии архива:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка.Ошибка выполнения");
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка.Аварийное завершение");
		
		РезультатВыполнения.Вставить("ТекстОшибки", "Ошибка открытия архива для чтения. Возможно, файл не существует или открыт в другой программе.");
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		
		Возврат;
	КонецПопытки;
	
	ДлительныеОперации.СообщитьПрогресс(0,,);
		
#Область ЗагрузкаДанных
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка данных.Запуск");
		
		Узел = ПолучитьУзелПланаОбмена(Ложь);
		FILEКаталогОбменаИнформацией = ПроверитьДоступностьКаталогаИзНастроекТранспорта(Узел);
		
		ИмяФайла_ЗагрузкаДанных = "Message_20_30.xml";
		
		ЭлементАрхива = Архив.Элементы.Найти(ИмяФайла_ЗагрузкаДанных);
		Если ЭлементАрхива = Неопределено Тогда
			РезультатВыполнения.ЗагрузкаДанных.Статус = "Файл не найден";
			ВызватьИсключение Нстр("ru = 'Ошибка распаковки архива: не найден файл Message_20_30.xml, содержащий данные из системы 1С:ТОИР, ред. 2'");
		КонецЕсли;
		
		Попытка
			Архив.Извлечь(ЭлементАрхива, FILEКаталогОбменаИнформацией);
		Исключение
			РезультатВыполнения.ЗагрузкаДанных.Статус = "Ошибка";
			ВызватьИсключение Нстр("ru = 'При извлечении файла данных Data.xml из архива произошла ошибка: '")  + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
		ИмяФайла_ЗагрузкаДанных = FILEКаталогОбменаИнформацией + ИмяФайла_ЗагрузкаДанных;
		
		ЗагрузитьДанные_Данные(РезультатВыполнения);
		
		УдалитьФайлы(ИмяФайла_ЗагрузкаДанных);
		
		ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		
		Если РезультатВыполнения.ЗагрузкаДанных.Статус = "Выполнено успешно" Тогда
		    СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка данных.Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Аварийное завершение");
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при загрузке данных по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Ошибка выполнения");
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Аварийное завершение");
		
		Если Не РезультатВыполнения.ЗагрузкаДанных.Статус = "Файл не найден" Тогда
		    РезультатВыполнения.ЗагрузкаДанных.Статус = "Ошибка";
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	КонецПопытки;
#КонецОбласти

	РезультатВыполнения.ЗагрузкаКлючейМП.Статус = "Выполняется";
	ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
	
	ДлительныеОперации.СообщитьПрогресс(0,,);

#Область ЗагрузкаКлючей
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка ключей МП.Запуск");
		
		ИмяФайла_ЗагрузкаКлючей = "Keys.xml";
	    
		ЭлементАрхива = Архив.Элементы.Найти(ИмяФайла_ЗагрузкаКлючей);
		Если ЭлементАрхива = Неопределено Тогда
			РезультатВыполнения.ЗагрузкаКлючейМП.Статус = "Файл не найден";
			ВызватьИсключение Нстр("ru = 'Ошибка распаковки архива: не найден файл Keys.xml, содержащий ключи для приложения ""Мобильная бригада""'");
		КонецЕсли;
		
		Попытка
			Архив.Извлечь(ЭлементАрхива, КаталогДляИзвлечения);
		Исключение
			РезультатВыполнения.ЗагрузкаКлючейМП.Статус = "Ошибка";
			ВызватьИсключение Нстр("ru = 'При извлечении файла ключей Keys.xml из архива произошла ошибка: '")  + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
		ИмяФайла_ЗагрузкаКлючей = КаталогДляИзвлечения + ИмяФайла_ЗагрузкаКлючей;
		
		ЗагрузитьДанные_КлючиМП(ИмяФайла_ЗагрузкаКлючей, РезультатВыполнения);
		
		УдалитьФайлы(ИмяФайла_ЗагрузкаКлючей);
		
		ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		
		Если РезультатВыполнения.ЗагрузкаКлючейМП.Статус = "Выполнено успешно" Тогда
		    СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка ключей МП.Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка ключей МП.Аварийное завершение");
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при загрузке ключей МП по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка ключей МП.Ошибка выполнения");
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка ключей МП.Аварийное завершение");
		
		Если Не РезультатВыполнения.ЗагрузкаКлючейМП.Статус = "Файл не найден" Тогда
		    РезультатВыполнения.ЗагрузкаКлючейМП.Статус = "Ошибка";
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	КонецПопытки;
#КонецОбласти

	РезультатВыполнения.ЗагрузкаНастроек.Статус = "Выполняется";
	ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
	
	ДлительныеОперации.СообщитьПрогресс(0,,);

#Область ЗагрузкаНастроек
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка настроек.Запуск");
		
		ИмяФайла_ЗагрузкаНастроек = "Settings.xml";
	    
		ЭлементАрхива = Архив.Элементы.Найти(ИмяФайла_ЗагрузкаНастроек);
		Если ЭлементАрхива = Неопределено Тогда
			РезультатВыполнения.ЗагрузкаНастроек.Статус = "Файл не найден";
			ВызватьИсключение Нстр("ru = 'Ошибка распаковки архива: не найден файл Settings.xml, содержащий настройки из системы 1С:ТОИР, ред. 2'");
		КонецЕсли;
		
		Попытка
			Архив.Извлечь(ЭлементАрхива, КаталогДляИзвлечения);
		Исключение
			РезультатВыполнения.ЗагрузкаНастроек.Статус = "Ошибка";
			ВызватьИсключение Нстр("ru = 'При извлечении файла ключей Settings.xml из архива произошла ошибка: '")  + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
		ИмяФайла_ЗагрузкаНастроек = КаталогДляИзвлечения + ИмяФайла_ЗагрузкаНастроек;
		
		ЗагрузитьДанные_Настройки(ИмяФайла_ЗагрузкаНастроек, РезультатВыполнения);
		
		УдалитьФайлы(ИмяФайла_ЗагрузкаНастроек);
		
		ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		
		Если РезультатВыполнения.ЗагрузкаНастроек.Статус = "Выполнено успешно" Тогда
		    СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка настроек.Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка настроек.Аварийное завершение");
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при загрузке настроек по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка настроек.Ошибка выполнения");
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка настроек.Аварийное завершение");
		
		Если Не РезультатВыполнения.ЗагрузкаНастроек.Статус = "Файл не найден" Тогда
		    РезультатВыполнения.ЗагрузкаНастроек.Статус = "Ошибка";
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	КонецПопытки;
#КонецОбласти

	РезультатВыполнения.ЗагрузкаИсторииСистемыВзаимодействия.Статус = "Выполняется";
	ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
	
	ДлительныеОперации.СообщитьПрогресс(0,,);

#Область ЗагрузкаИсторииСистемыВзаимодействия
	Попытка
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка истории системы взаимодействия.Запуск");
		
		ИмяФайла_ЗагрузкаИсторииСистемыВзаимодействия = "CollaborationSystem.xml";
	    
		ЭлементАрхива = Архив.Элементы.Найти(ИмяФайла_ЗагрузкаИсторииСистемыВзаимодействия);
		Если ЭлементАрхива = Неопределено Тогда
			РезультатВыполнения.ЗагрузкаИсторииСистемыВзаимодействия.Статус = "Файл не найден";
			ВызватьИсключение Нстр("ru = 'Ошибка распаковки архива: не найден файл CollaborationSystem.xml, содержащий историю обсуждений системы взаимодействия из системы 1С:ТОИР, ред. 2'");
		КонецЕсли;
		
		Попытка
			Архив.Извлечь(ЭлементАрхива, КаталогДляИзвлечения);
		Исключение
			РезультатВыполнения.ЗагрузкаНастроек.Статус = "Ошибка";
			ВызватьИсключение Нстр("ru = 'При извлечении файла истории системы взаимодействия CollaborationSystem.xml из архива произошла ошибка: '")  + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
		ИмяФайла_ЗагрузкаИсторииСистемыВзаимодействия = КаталогДляИзвлечения + ИмяФайла_ЗагрузкаИсторииСистемыВзаимодействия;
		
		ЗагрузитьДанные_ИсториюСистемыВзаимодействия(ИмяФайла_ЗагрузкаИсторииСистемыВзаимодействия, РезультатВыполнения);
		
		УдалитьФайлы(ИмяФайла_ЗагрузкаИсторииСистемыВзаимодействия);
		
		ДлительныеОперации.СообщитьПрогресс(РезультатВыполнения, "", РезультатВыполнения);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		
		Если РезультатВыполнения.ЗагрузкаИсторииСистемыВзаимодействия.Статус = "Выполнено успешно" Тогда
		    СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Информация, "Загрузка истории системы взаимодействия.Успешное выполнение");
		Иначе
			СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка истории системы взаимодействия.Аварийное завершение");
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'Ошибка при загрузке истории системы взаимодействия по причине:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка истории системы взаимодействия.Ошибка выполнения");
		
		СделатьЗаписьВЖурналеРегистрации("", УровеньЖурналаРегистрации.Ошибка, "Загрузка истории системы взаимодействия.Аварийное завершение");
		
		Если Не РезультатВыполнения.ЗагрузкаИсторииСистемыВзаимодействия.Статус = "Файл не найден" Тогда
		    РезультатВыполнения.ЗагрузкаИсторииСистемыВзаимодействия.Статус = "Ошибка";
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	КонецПопытки;
#КонецОбласти

	Архив.Закрыть();
	
КонецПроцедуры

#Область ЗагрузкаДанных

Процедура ЗагрузитьДанные_Данные(РезультатВыполненияФЗ)
	РезультатВыполнения = РезультатВыполненияФЗ.ЗагрузкаДанных;
	
	Попытка
		Узел = ПолучитьУзелПланаОбмена();
		
		Отказ = Ложь;
		ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
		ПараметрыОбмена.ВыполнятьВыгрузку = Ложь;
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Узел, ПараметрыОбмена, Отказ);
		
		Если Отказ Тогда
		    РезультатВыполнения.Статус = "Ошибка";
		Иначе
			РезультатВыполнения.Статус = "Выполнено успешно";
		КонецЕсли;
	Исключение
		ОписаниеОшибки = Нстр("ru = 'При загрузке данных произошла ошибка:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка данных.Ошибка выполнения");
		
		РезультатВыполнения.Статус = "Ошибка";
		Возврат;
	КонецПопытки;
КонецПроцедуры

Функция ПроверитьДоступностьКаталогаИзНастроекТранспорта(Узел)
	
	// Бывают ситуации, когда каталог в данном регистре будет уже неактуальным (например, сделать файловую копию
	// серверной базы или наоборот). Если ничего не поменять, то из-за этого будут падать ошибки, т.к. каталога не будет.
	// (или будут проблемы с правами). Чтобы не лезть в РС и вручную не менять каталог, делаем перед каждым переносом
	// проверку доступности каталога: если его не сущесвует (для конкретного пользователя есть такой каталог), то меняем
	// в РС путь на каталог временных файлов. К нему точно будет доступ.
	
	НаборЗаписей = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Корреспондент.Установить(Узел);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Корреспондент = Узел;
		НоваяСтрока.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		НоваяСтрока.FILEКаталогОбменаИнформацией = КаталогВременныхФайлов();
		НоваяСтрока.FILEСжиматьФайлИсходящегоСообщения = Ложь;
		НоваяСтрока.FILEТранслитерироватьИменаФайловСообщенийОбмена = Ложь;
		НаборЗаписей.Записать();
		
		Возврат "";
	КонецЕсли;
	
	Попытка
		Каталог = Новый Файл(НаборЗаписей[0].FILEКаталогОбменаИнформацией);
		Если Каталог.Существует() Тогда
			Возврат НаборЗаписей[0].FILEКаталогОбменаИнформацией;
		КонецЕсли;
		
		НаборЗаписей[0].FILEКаталогОбменаИнформацией = КаталогВременныхФайлов();
		НаборЗаписей.Записать();
		
		Возврат НаборЗаписей[0].FILEКаталогОбменаИнформацией;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаКлючей

Процедура ЗагрузитьДанные_КлючиМП(ИмяФайла, РезультатВыполненияФЗ)
	РезультатВыполнения = РезультатВыполненияФЗ.ЗагрузкаКлючейМП;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		
		Пока ЧтениеXML.Прочитать() Цикл
		    Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ФайлКлючей") Тогда
				Продолжить;
			КонецЕсли;
			
			ПрочитатьКлючиМП(ЧтениеXML, Перечисления.торо_МобильноеПриложение.МобильныеБригады);
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
	Исключение
		ОписаниеОшибки = Нстр("ru = 'При загрузке ключей МП произошла ошибка:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка ключей МП.Ошибка выполнения");
		
		РезультатВыполнения.Статус = "Ошибка";
		
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяФайла);
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Статус = "Выполнено успешно";
	
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Процедура ПрочитатьКлючиМП(ЧтениеXML, МобильноеПриложение)
	Пока ЧтениеXML.Прочитать() Цикл
	    Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Ключи") Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Ключ")
				Или ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			Наименование = ЧтениеXML.ЗначениеАтрибута("Наименование");
			ID = Новый УникальныйИдентификатор(ЧтениеXML.ЗначениеАтрибута("ID"));
			
			ЧтениеXML.Прочитать();
			Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ЗначениеКлюча") Тогда
				Продолжить;
			КонецЕсли;
			
			ЧтениеXML.Прочитать();
			Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаОкончания = ЧтениеXML.Значение;
			
			НаборЗаписей = РегистрыСведений.торо_МобильныеПриложения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ID.Установить(ID);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ID = ID;
			НоваяЗапись.Наименование = Наименование;
			НоваяЗапись.ДатаОкончания = ДатаОкончания;
			НоваяЗапись.МобильноеПриложение = МобильноеПриложение;
			
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаНастроек

Процедура ЗагрузитьДанные_Настройки(ИмяФайла, РезультатВыполненияФЗ)
	РезультатВыполнения = РезультатВыполненияФЗ.ЗагрузкаНастроек;
	
	Попытка
	    ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		
		ЧтениеXML.Прочитать();
		Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ФайлПользовательскихНастроек") Тогда
			ОписаниеОшибки = Нстр("ru = 'При загрузке настроек произошла ошибка: не верная структура файла настроек.'");
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка настроек.Ошибка выполнения");
			
			РезультатВыполнения.Статус = "Ошибка";
			ЧтениеXML.Закрыть();
			УдалитьФайлы(ИмяФайла);
			
			Возврат;
		КонецЕсли;
		
		КоличествоПользователей = Число(ЧтениеXML.ЗначениеАтрибута("Количество"));
		КоличествоЗагруженныхПользователей = 0;
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "ФайлПользовательскихНастроек" Тогда
				Прервать;
			КонецЕсли;
			
			Пользователь = ЧтениеXML.ЗначениеАтрибута("Имя");
			ЧтениеXML.Прочитать();
			
			ПрочитатьПользовательскеНастройки(ЧтениеXML, Пользователь);
			ЧтениеXML.Прочитать();
			ПрочитатьНастройкиИнтерфейса(ЧтениеXML, Пользователь);
			ЧтениеXML.Прочитать();
			
			КоличествоЗагруженныхПользователей = КоличествоЗагруженныхПользователей + 1;
			Если КоличествоЗагруженныхПользователей % 5 = 0 Тогда
			    Процент = КоличествоЗагруженныхПользователей / КоличествоПользователей * 100;
				ШаблонТекстаДопИнформации = НСтр("ru = 'Обработано %1 из %2 пользователей.'");
				ТекстДопИнформации = СтрШаблон(ШаблонТекстаДопИнформации, КоличествоЗагруженныхПользователей, КоличествоПользователей);
				
				ДлительныеОперации.СообщитьПрогресс(Процент, ТекстДопИнформации, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
	Исключение
		ОписаниеОшибки = Нстр("ru = 'При загрузке настроек произошла ошибка:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка настроек.Ошибка выполнения");
		
		РезультатВыполнения.Статус = "Ошибка";
		
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяФайла);
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Статус = "Выполнено успешно";
	
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Процедура ПрочитатьПользовательскеНастройки(ЧтениеXML, Пользователь)
		
	// Узел ГруппаНастроек
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "ПользовательскиеНастройки" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
		
		Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ГруппаНастроек")
			Или ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		КлючОбъекта = ЧтениеXML.ЗначениеАтрибута("КлючОбъекта");
		ЗаписыватьВместе = ЧтениеXML.ЗначениеАтрибута("ЗаписыватьВместе");
		
		ГруппаНастроек = Новый Соответствие();
		
		// Узел ПользовательскаяНастройка
		Пока ЧтениеXML.Прочитать() Цикл
		    Если ЧтениеXML.Имя = "ГруппаНастроек" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
			
			Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ПользовательскаяНастройка")
				Или ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			ТипНастройки = ЧтениеXML.ЗначениеАтрибута("Тип");
			КлючНастроек = ЧтениеXML.ЗначениеАтрибута("Имя");
			
			ЗначениеНастройки = ПрочитатьЗначение(ЧтениеXML, ТипНастройки);
			
			Если КлючОбъекта = "Общее/НастройкиКлиентскогоПриложения" Тогда
				НастройкиИнтерфейса = Новый НастройкиКлиентскогоПриложения();
				НастройкиИнтерфейса.ВариантМасштабаФормКлиентскогоПриложения = ЗначениеНастройки;
				ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения",, НастройкиИнтерфейса,, Пользователь);
			ИначеЕсли ЗаписыватьВместе Тогда
				ГруппаНастроек.Вставить(КлючНастроек, ЗначениеНастройки);
			Иначе
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, ЗначениеНастройки,, Пользователь);
			КонецЕсли;
			
			Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "ПользовательскаяНастройка") Тогда
				ЧтениеXML.Прочитать();
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаписыватьВместе Тогда
		    ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта,, ГруппаНастроек,, Пользователь);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьНастройкиИнтерфейса(ЧтениеXML, Пользователь)
	
	// НастройкиНачальнойСтраницы
	ЧтениеXML.Прочитать();
	ПрочитатьНастройкиНачальнойСтраницы(ЧтениеXML, Пользователь);
	
	// НастройкиИнтерфейсаКлиентскогоПриложения
	ЧтениеXML.Прочитать();
	ПрочитатьНастройкиИнтерфейсаКлиентскогоПриложения(ЧтениеXML, Пользователь);
	
	ЧтениеXML.Прочитать();
	ПрочитатьИзбранноеРаботыПользователя(ЧтениеXML, Пользователь);
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

Процедура ПрочитатьНастройкиНачальнойСтраницы(ЧтениеXML, ИмяПользователя)
	
	СоставФормНачальнойСтраницы = Новый СоставФормНачальнойСтраницы();
	
	// ЛеваяКолонка
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	    ПрочитатьМассив(ЧтениеXML, СоставФормНачальнойСтраницы.ЛеваяКолонка);
	КонецЕсли;
	
	// ПраваяКолонка
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	    ПрочитатьМассив(ЧтениеXML, СоставФормНачальнойСтраницы.ПраваяКолонка);
	КонецЕсли;
	
	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы();
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФормНачальнойСтраницы);
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкиНачальнойСтраницы,, ИмяПользователя);
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

Процедура ПрочитатьНастройкиИнтерфейсаКлиентскогоПриложения(ЧтениеXML, ИмяПользователя)
	
	НастройкиИнтерфейса = Новый НастройкиИнтерфейсаКлиентскогоПриложения();
    НастройкиСостава = НастройкиИнтерфейса.ПолучитьСостав();
    
    // Очистить настройки состава
    НастройкиСостава.Верх.Очистить();
    НастройкиСостава.Лево.Очистить();
    НастройкиСостава.Низ.Очистить();
    НастройкиСостава.Право.Очистить();
	
	// Верх
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	ПрочитатьГруппуНастроекИнтерфейсаКлиентскогоПриложения(ЧтениеXML, НастройкиСостава.Верх);
	ЧтениеXML.Прочитать();
	
	// Лево
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	ПрочитатьГруппуНастроекИнтерфейсаКлиентскогоПриложения(ЧтениеXML, НастройкиСостава.Лево);
	ЧтениеXML.Прочитать();
	
	// Низ
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	ПрочитатьГруппуНастроекИнтерфейсаКлиентскогоПриложения(ЧтениеXML, НастройкиСостава.Низ);
	ЧтениеXML.Прочитать();
	
	// Право
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	ПрочитатьГруппуНастроекИнтерфейсаКлиентскогоПриложения(ЧтениеXML, НастройкиСостава.Право);
	ЧтениеXML.Прочитать();
	
	НастройкиИнтерфейса.УстановитьСостав(НастройкиСостава);
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения",, НастройкиИнтерфейса,, ИмяПользователя);
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

Процедура ПрочитатьГруппуНастроекИнтерфейсаКлиентскогоПриложения(ЧтениеXML, НастройкиСостава)
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.Имя = "Значение" Тогда
			Значение = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
			ЭлементНастройки = Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения(Значение);
    		НастройкиСостава.Добавить(ЭлементНастройки);
		ИначеЕсли ЧтениеXML.Имя = "ГруппаНастроекСостава" Тогда
			ГруппаНастройки = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения();
    		ПрочитатьГруппуНастроекИнтерфейсаКлиентскогоПриложения(ЧтениеXML, ГруппаНастройки);
			НастройкиСостава.Добавить(ГруппаНастройки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьИзбранноеРаботыПользователя(ЧтениеXML, ИмяПользователя)
	
	ИзбранноеРаботыПользователя = Новый ИзбранноеРаботыПользователя();
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "ИзбранноеРаботыПользователя" Тогда
			Прервать;
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		
		ЭлементИзбранногоРаботыПользователя = Новый ЭлементИзбранногоРаботыПользователя();
		
		ЭлементИзбранногоРаботыПользователя.Важное = ПрочитатьТекстУзла(ЧтениеXML, "Булево");
		ЧтениеXML.Прочитать();
		
		ЭлементИзбранногоРаботыПользователя.НавигационнаяСсылка = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		ЧтениеXML.Прочитать();
		
		ЭлементИзбранногоРаботыПользователя.Представление = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		ЧтениеXML.Прочитать();
		
		ИзбранноеРаботыПользователя.Добавить(ЭлементИзбранногоРаботыПользователя);
	КонецЦикла;
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя",, ИзбранноеРаботыПользователя,, ИмяПользователя);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИсторииСистемыВзаимодействия

Процедура ЗагрузитьДанные_ИсториюСистемыВзаимодействия(ИмяФайла, РезультатВыполненияФЗ)
	РезультатВыполнения = РезультатВыполненияФЗ.ЗагрузкаИсторииСистемыВзаимодействия;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Если Не СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
			ВызватьИсключение НСтр("ru = 'Данная информационная база не подключена к системе взаимодействия! Выгрузка истории обсуждений невозможна.'");
		КонецЕсли;
	
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		
		ЧтениеXML.Прочитать();
		Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ФайлИсторииСистемыВзаимодействия") Тогда
			ОписаниеОшибки = Нстр("ru = 'При загрузке истории системы взаимодействия произошла ошибка: не верная структура файла.'");
			СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка истории системы взаимодействия.Ошибка выполнения");
			
			РезультатВыполнения.Статус = "Ошибка";
			ЧтениеXML.Закрыть();
			УдалитьФайлы(ИмяФайла);
			
			Возврат;
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		
		СоответствиеПользователей = ПрочитатьПользователейСВ(ЧтениеXML);
		ЧтениеXML.Прочитать();
			
		ПрочитатьОбсуждения(ЧтениеXML, СоответствиеПользователей);
		ЧтениеXML.Закрыть();
	Исключение
		ОписаниеОшибки = Нстр("ru = 'При загрузке истории системы взаимодействия произошла ошибка:'") + Символы.ПС + Символы.ПС + ОписаниеОшибки();
		СделатьЗаписьВЖурналеРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, "Загрузка истории системы взаимодействия.Ошибка выполнения");
		
		РезультатВыполнения.Статус = "Ошибка";
		
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяФайла);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Статус = "Выполнено успешно";
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Процедура ПрочитатьОбсуждения(ЧтениеXML, СоответствиеПользователей)
	
	КоличествоОбсуждений = Число(ЧтениеXML.ЗначениеАтрибута("Количество"));
	КоличествоЗагруженныхОбсуждений = 0;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Обсуждения" Тогда
			Прервать;
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		
		Групповое = ПрочитатьТекстУзла(ЧтениеXML, "Булево");
		ЧтениеXML.Прочитать();
		
		Заголовок = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		ЧтениеXML.Прочитать();
		
		Идентификатор = ПрочитатьТекстУзла(ЧтениеXML, "ИдентификаторОбсужденияСистемыВзаимодействия");
		ЧтениеXML.Прочитать();
		
		НавигационнаяСсылка = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		ЧтениеXML.Прочитать();
		
		Отображаемое = ПрочитатьТекстУзла(ЧтениеXML, "Булево");
		ЧтениеXML.Прочитать();
		
		ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия();
		ОтборОбсуждений.Ключ = Строка(Идентификатор);
		ОтборОбсуждений.Групповое = Групповое;
		ОтборОбсуждений.Отображаемое = Отображаемое;
		ОтборОбсуждений.НаправлениеСортировки = НаправлениеСортировки.Возр;
		
		Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		    ОтборОбсуждений.КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(НавигационнаяСсылка);
			ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
		КонецЕсли;
		
		ОтборОбсуждений.Ключ = Строка(Идентификатор);
		МассивОбсуждений = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
            
		Если МассивОбсуждений.Количество() = 0 Тогда
		    Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
			Обсуждение.Групповое = Групповое;
			Обсуждение.Заголовок = Заголовок;
			Обсуждение.Отображаемое = Отображаемое;
			Обсуждение.Ключ = Строка(Идентификатор);
			
			Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
			    Обсуждение.КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(НавигационнаяСсылка);
			КонецЕсли;
		Иначе
			Обсуждение = МассивОбсуждений[0];
		КонецЕсли;
		
		ПрочитатьУчастников(ЧтениеXML, Обсуждение.Участники,, СоответствиеПользователей);
		ЧтениеXML.Прочитать();
		
		Обсуждение.Записать();
		
		ПрочитатьСообщения(ЧтениеXML, Обсуждение, СоответствиеПользователей);
		ЧтениеXML.Прочитать();
		
		КоличествоЗагруженныхОбсуждений = КоличествоЗагруженныхОбсуждений + 1;
		Если КоличествоЗагруженныхОбсуждений % 5 = 0 Тогда
		    Процент = КоличествоЗагруженныхОбсуждений / КоличествоОбсуждений * 100;
			ШаблонТекстаДопИнформации = НСтр("ru = 'Обработано %1 из %2 обсуждений.'");
			ТекстДопИнформации = СтрШаблон(ШаблонТекстаДопИнформации, КоличествоЗагруженныхОбсуждений, КоличествоОбсуждений);
			
			ДлительныеОперации.СообщитьПрогресс(Процент, ТекстДопИнформации, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьУчастников(ЧтениеXML, Коллекция, ИмяУзла = "Участники", СоответствиеПользователей = Неопределено)
	
	Коллекция.Очистить();
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяУзла Тогда
			Возврат;
		КонецЕсли;
		
		УчастникИсточник = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		// Пропускаем внешних пользователей
		Если Не УчастникИсточник = "" Тогда
		    //Участник = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(Новый УникальныйИдентификатор(УчастникИсточник));
			Участник = СоответствиеПользователей[УчастникИсточник];
			Если Не Участник = Неопределено Тогда
			    Коллекция.Добавить(Участник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСообщения(ЧтениеXML, Обсуждение, СоответствиеПользователей)
	
	// В отличие от обсуждений, у сообщений есть только идентификатор, который нельзя установить вручную. Поэтому выполнять поиск сообщений по
	// идентификатору будет некорректный - если в 3.0 ранее было загружено это сообщение, у него будет другой идентификатор, поэтому поиск
	// ничего не даст и будет создан дубль. Таким образом, для реализации дозагрузки сообщений нужно применять другой подход к поиску.
	
	// В данном случае загрузка работает так. В файл данных узлу Сообщения записывается атрибут Количество, который хранит количество
	// выгруженных из 2.0 сообщений. В 3.0 получаются все сообщения обсуждения и так же сохраняется количество сообщений.
	// 1) Если в 2.0 сообщений больше, то выполняется загрузка. Для этого в 3.0 все сообщения обсуждения удаляются и загружаются
	// заново (т.к. корректно найти не получится).
	// 2) Количество в 2.0 = количество в 3.0 - в 3.0 ранее были загружены обращение с сообщениями и по ним в 3.0 еще не было новых сообщений.
	// Дозагрузка не нужна, т.к. не было изменений.
	// 3) Количество в 2.0 < количество в 3.0 - в 3.0 ранее были загружены обращение с сообщениями и по ним в 3.0 были новые сообщения.
	// Дозагрузка не нужна, чтобы не затереть новые сообщения.
	
	СообщенияОбсуждения = ПолучитьВсеСообщения(Обсуждение);
	
	КоличествоСообщенийИсточник = Число(ЧтениеXML.ЗначениеАтрибута("Количество"));
	КоличествоСообщенийПриемник = СообщенияОбсуждения.Количество();
	
	// Обрабатываем ситуацию, когда сообщения дозагружаются. Грузим только если в 2.0 их больше, чем в 3.0.
	Если КоличествоСообщенийИсточник = КоличествоСообщенийПриемник
		Или КоличествоСообщенийИсточник < КоличествоСообщенийПриемник Тогда
		ПропуститьУзлы(ЧтениеXML);
		Возврат;
	КонецЕсли;
	
	Для каждого СообщениеОбсуждения Из СообщенияОбсуждения Цикл
	    СистемаВзаимодействия.УдалитьСообщение(СообщениеОбсуждения.Идентификатор);
	КонецЦикла;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Сообщения" Тогда
			Возврат;
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		
		Идентификатор = ПрочитатьТекстУзла(ЧтениеXML, "ИдентификаторСообщенияСистемыВзаимодействия");
		Сообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
		
		ЧтениеXML.Прочитать();
		
		ИдентификаторОбсужденияСистемыВзаимодействия = ПрочитатьТекстУзла(ЧтениеXML, "ИдентификаторОбсужденияСистемыВзаимодействия");
		ЧтениеXML.Прочитать();
		
		АвторИсточник = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		// Пропускаем внешних пользователей
		Если Не АвторИсточник = "" Тогда
		    //Автор = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(Новый УникальныйИдентификатор(АвторИсточник));
			Автор = СоответствиеПользователей[АвторИсточник];
			Если Не Автор = Неопределено Тогда
			    Сообщение.Автор = Автор;
			КонецЕсли;
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		
		Сообщение.Дата = ПрочитатьТекстУзла(ЧтениеXML, "Дата");
		ЧтениеXML.Прочитать();
		
		Сообщение.Текст = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		ЧтениеXML.Прочитать();
		
		ПрочитатьУчастников(ЧтениеXML, Сообщение.Получатели, "Получатели", СоответствиеПользователей);
		ЧтениеXML.Прочитать();
		
		Если СистемаВзаимодействия.ПоддерживаетсяРаботаСВложениями() Тогда
		    ПрочитатьВложения(ЧтениеXML, Сообщение);
			ЧтениеXML.Прочитать();
		Иначе
			ПропуститьУзлы(ЧтениеXML, "Вложения");
		КонецЕсли;
		
		// Если, например, поменять в обсуждении тему, то в чат добавляется новое сообщение об этом, но при попытке записать в 3.0
		// такое сообщение, падает исключение. Для обхода этих ситуаций записываем в попытке.
		Попытка
		    Сообщение.Записать();
		Исключение
		
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьВсеСообщения(Обсуждение)
	
	МассивСообщений = Новый Массив();
	
	ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия();
	ОтборСообщений.НаправлениеСортировки = НаправлениеСортировки.Возр;
	ОтборСообщений.Обсуждение = Обсуждение.Идентификатор;
	МассивЧастиСообщений = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
	
	Если МассивЧастиСообщений.Количество() = 0 Тогда
	    Возврат МассивСообщений;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщений, МассивЧастиСообщений);
	
	ПоследнееСообщение = МассивЧастиСообщений[МассивЧастиСообщений.Количество() - 1].Идентификатор;
	
	Пока Истина Цикл
	    ОтборСообщений.После = ПоследнееСообщение;
		МассивЧастиСообщений = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
		
		Если МассивЧастиСообщений.Количество() = 0 Тогда
		    Прервать;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщений, МассивЧастиСообщений);
		ПоследнееСообщение = МассивЧастиСообщений[МассивЧастиСообщений.Количество() - 1].Идентификатор;
	КонецЦикла;
	
	Возврат МассивСообщений;
	
КонецФункции

Процедура ПрочитатьВложения(ЧтениеXML, Сообщение)
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Вложения" Тогда
			Возврат;
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		
		Наименование = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		ЧтениеXML.Прочитать();
		
		ТипСодержимого = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
		ЧтениеXML.Прочитать();
		
		Отображаемое = ПрочитатьТекстУзла(ЧтениеXML, "Булево");
		ЧтениеXML.Прочитать();
		
		ДвоичныеДанные = ПрочитатьТекстУзла(ЧтениеXML, "ДвоичныеДанные");
		ЧтениеXML.Прочитать();
		
		Если Не ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		    Продолжить;
		КонецЕсли;
		
		Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		
		Сообщение.Вложения.Добавить(Поток, Наименование, ТипСодержимого, Отображаемое);
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьПользователейСВ(ЧтениеXML)
	
	СоответствиеПользователей = Новый Соответствие();
	
	МассивПользователей = Новый Массив();
	ПрочитатьМассив(ЧтениеXML, МассивПользователей);
	
	Для каждого ИдентификаторПользователя Из МассивПользователей Цикл
		ПользовательСсылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПользователя));
		Если Не ЗначениеЗаполнено(ПользовательСсылка) Тогда
		    Продолжить;
		КонецЕсли;
		
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательСсылка, "ИдентификаторПользователяИБ");
		Если ИдентификаторПользователяИБ = Неопределено Тогда
		    Продолжить;
		КонецЕсли;
		
		Попытка
		    ПользовательСВ = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторПользователяИБ);
		Исключение
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
			    НовыйПользовательСВ = СистемаВзаимодействия.СоздатьПользователя(ПользовательИБ);
				НовыйПользовательСВ.Записать();
				
				ПользовательСВ = НовыйПользовательСВ.Идентификатор;
			КонецЕсли;
		КонецПопытки;
		
		СоответствиеПользователей[ИдентификаторПользователя] = ПользовательСВ;
	КонецЦикла;
	
	Возврат СоответствиеПользователей;
	
	//Пока ЧтениеXML.Прочитать() Цикл
	//	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "ПользователиСВ" Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ИдентификаторПользователяИБСтрока = ПрочитатьТекстУзла(ЧтениеXML, "Строка");
	//	ИдентификаторПользователяИБ = Новый УникальныйИдентификатор(ИдентификаторПользователяИБСтрока);
	//	
	//	Попытка
	//	    ПользовательСВ = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторПользователяИБ);
	//	Исключение
	//		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	//		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
	//		    ПользовательСВ = СистемаВзаимодействия.СоздатьПользователя(ПользовательИБ);
	//			ПользовательСВ.Записать();
	//		КонецЕсли;
	//	КонецПопытки;
	//КонецЦикла;
КонецФункции

#КонецОбласти

#Область ЧтениеКоллекций

Функция ПрочитатьТекстУзла(ЧтениеXML, ТипНастройки = "")
	ЧтениеXML.Прочитать();
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Возврат "";
	КонецЕсли;
	
	ЗначениеСтрока = ЧтениеXML.Значение;
	Значение = ПолучитьЗначениеИзСтрокиПоТипу(ЗначениеСтрока, ТипНастройки);
	
	// Конец элемента "Значение"
	ЧтениеXML.Прочитать();
	Возврат Значение;
КонецФункции

Функция ПрочитатьЗначение(ЧтениеXML, ТипНастройки = "")
	Если ТипНастройки = "Соответствие" Или ТипНастройки = "Массив" Или ТипНастройки = "Структура" Тогда
	    Значение = ПрочитатьКоллекциюЭлементов(ЧтениеXML, ТипНастройки);
		Возврат Значение;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Значение") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипНастройки) Тогда
	    ТипНастройки = ЧтениеXML.ЗначениеАтрибута("Тип");
	КонецЕсли;
	
	Если ТипНастройки = "Соответствие" Или ТипНастройки = "Массив" Или ТипНастройки = "Структура" Тогда
	    Значение = ПрочитатьКоллекциюЭлементов(ЧтениеXML, ТипНастройки);
		Возврат Значение;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Возврат "";
	КонецЕсли;
	
	ЗначениеСтрока = ЧтениеXML.Значение;
	Значение = ПолучитьЗначениеИзСтрокиПоТипу(ЗначениеСтрока, ТипНастройки);
	
	// Конец элемента "Значение"
	ЧтениеXML.Прочитать();
	Возврат Значение;
КонецФункции

Функция ПрочитатьКоллекциюЭлементов(ЧтениеXML, ТипНастройки)
	ШаблонКонструктора = НСтр("ru = 'Новый %1()'");
	ТекстКонструктора = СтрШаблон(ШаблонКонструктора, ТипНастройки);
	КоллекцияЭлементов = Вычислить(ТекстКонструктора);
	
	Если ТипНастройки = "Массив" Тогда
		ПрочитатьМассив(ЧтениеXML, КоллекцияЭлементов);
		Возврат КоллекцияЭлементов;
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "КлючИЗначение" Тогда
			Прервать;
		КонецЕсли;
		
		Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "КлючИЗначение") Тогда
			Возврат КоллекцияЭлементов;
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Ключ") Тогда
			Возврат КоллекцияЭлементов;
		КонецЕсли;
		
		ТипКлюча = ЧтениеXML.ЗначениеАтрибута("Тип");
		Ключ = ПрочитатьЗначение(ЧтениеXML, ТипКлюча);
		
		// Конец элемента "Ключ"
		ЧтениеXML.Прочитать();
		
		Значение = ПрочитатьЗначение(ЧтениеXML);
		
		КоллекцияЭлементов.Вставить(Ключ, Значение);
		
		// Конец элемента "КлючИЗначение"
		ЧтениеXML.Прочитать();
	КонецЦикла;
	
	Возврат КоллекцияЭлементов;
КонецФункции

Функция ПрочитатьМассив(ЧтениеXML, КоллекцияЭлементов)
	ИмяРодительскогоУзла = ЧтениеXML.Имя;
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяРодительскогоУзла Тогда
		    Прервать;
		КонецЕсли;
		
		Если Не (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ЭлементМассива") Тогда
			Возврат КоллекцияЭлементов;
		КонецЕсли;
		
	    Значение = ПрочитатьЗначение(ЧтениеXML);
		
		КоллекцияЭлементов.Добавить(Значение);
		
		// Конец элемента "ЭлементМассива"
		ЧтениеXML.Прочитать();
		//
		// Читаем следующий элемент
		//ЧтениеXML.Прочитать();
	КонецЦикла;
	
	Возврат КоллекцияЭлементов;
КонецФункции

// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего).
//
// Параметры:
//  Объект   - объект типа ЧтениеXML.
//  Имя      - имя узла, до конца которого пропускаем элементы.
//
Процедура ПропуститьУзлы(ЧтениеXML, ИмяУзла = "")

	КоличествоВложений = 0;

	Если ИмяУзла = "" Тогда
		ИмяУзла = ЧтениеXML.ЛокальноеИмя;
	КонецЕсли; 
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ЛокальноеИмя <> ИмяУзла Тогда
			Продолжить;
		КонецЕсли;
		
		ТипУзла = ЧтениеXML.ТипУзла;
			
		Если ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если КоличествоВложений = 0 Тогда
				Прервать;
			Иначе
				КоличествоВложений = КоличествоВложений - 1;
			КонецЕсли;
		ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			КоличествоВложений = КоличествоВложений + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьЗначениеИзСтрокиПоТипу(ЗначениеНастройкиСтрока, ТипНастройки)
	Если ТипНастройки = "ДвоичныеДанные" Тогда
		Попытка
			Возврат XMLЗначение(Тип("ДвоичныеДанные"), ЗначениеНастройкиСтрока);
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	
	МенеджерОбъектов = ПолучитьМенеджераОбъектовПоТипуИзСтроки(ТипНастройки);
	
	Если Не МенеджерОбъектов = Неопределено Тогда
		Если Не СтрНайти(ТипНастройки, "СправочникСсылка") = 0 Тогда
			// Справочник
		    ЗначениеНастройки = МенеджерОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеНастройкиСтрока));
		ИначеЕсли Не СтрНайти(ТипНастройки, "ПеречислениеСсылка") = 0 Тогда
			// Перечисление
		    ЗначениеНастройки = МенеджерОбъектов[ЗначениеНастройкиСтрока];
		Иначе
			ЗначениеНастройки = Неопределено;
		КонецЕсли;
		
		Возврат ЗначениеНастройки;
	КонецЕсли;
	
	// Может быть передано системное перечисление
	Попытка
		ШаблонВыражения = НСтр("ru = '%1.%2'");
		ТекстВыражения = СтрШаблон(ШаблонВыражения, ТипНастройки, ЗначениеНастройкиСтрока);
		ЗначениеНастройки = Вычислить(ТекстВыражения);
		
		Возврат ЗначениеНастройки;
	Исключение
		
	КонецПопытки;
	
	// Примитивный тип данных (Строка, Булево, Дата, Число) - приводим к нужному типу с помощью соответствующих
	// одноименных функций глобального контекста
	Попытка
		ШаблонВыраженияПреобразования = НСтр("ru = '%1(""%2"")'");
		ВыражениеПреобразования = СтрШаблон(ШаблонВыраженияПреобразования, ТипНастройки, ЗначениеНастройкиСтрока);
		ЗначениеНастройки = Вычислить(ВыражениеПреобразования);
		Возврат ЗначениеНастройки;
	Исключение
		//Возврат Неопределено;
	КонецПопытки;
	
	// Платформенный тип данных
	Попытка
		ШаблонВыраженияПреобразования = НСтр("ru = 'Новый %1(""%2"")'");
		ВыражениеПреобразования = СтрШаблон(ШаблонВыраженияПреобразования, ТипНастройки, ЗначениеНастройкиСтрока);
		ЗначениеНастройки = Вычислить(ВыражениеПреобразования);
		Возврат ЗначениеНастройки;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция ПолучитьМенеджераОбъектовПоТипуИзСтроки(ТипНастройки)
	Попытка
	    МенеджерОбъектовСтрока = СтрЗаменить(ТипНастройки, "СправочникСсылка", "СправочникМенеджер");
		МенеджерОбъектовСтрока = СтрЗаменить(МенеджерОбъектовСтрока, "ПеречислениеСсылка", "ПеречислениеМенеджер");
		
		МенеджерОбъектов = Новый(МенеджерОбъектовСтрока);
		Возврат МенеджерОбъектов;
	Исключение
		Возврат Неопределено
	КонецПопытки;
КонецФункции

#КонецОбласти

Процедура СделатьЗаписьВЖурналеРегистрации(Комментарий, Уровень, Событие)
	ЗаписьЖурналаРегистрации(
							"Фоновое задание.торо_ПомощникПереносаДанныхИзДругихКонфигураций." + Событие,
							Уровень,
							Метаданные.Обработки.торо_ПомощникПереносаДанныхИзДругихКонфигураций
							,, Комментарий);
КонецПроцедуры

Процедура ПроверитьКонстантуИспользованияСинхронизацииДанных()
	Если Не Константы.ИспользоватьСинхронизациюДанных.Получить() Тогда
	    Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли