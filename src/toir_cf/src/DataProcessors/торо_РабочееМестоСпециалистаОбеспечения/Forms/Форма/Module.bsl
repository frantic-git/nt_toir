#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	КрайняяДатаГоризонта = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), ГоризонтПланирования));
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда 
		Подразделение = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение");
	КонецЕсли;
	
	ОбновитьНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьМТО" И Параметр.Проведен Тогда
		ОбновитьНаКлиенте();
	ИначеЕсли ИмяСобытия = "ЗаказПоставщикуЗакрытие" И Параметр.Проведен Тогда 
		ОбновитьДанныеПослеЗаказаПоставщику(Параметр.Ссылка); 
		
		УстановитьОтборНаСвязанныеТаблицы();
	КонецЕсли;   
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТолькоНеобеспеченныеПриИзменении(Элемент) 
	
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоризонтПланированияПриИзменении(Элемент)
	
	ОбновитьНаКлиенте();
	
	КрайняяДатаГоризонта = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), ГоризонтПланирования)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодУчетаКрайнихСроковЗаказовПриИзменении(Элемент)
	
	ОбновитьНаКлиенте(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьНаКлиенте();
	УстановитьОтборНаСвязанныеТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент) 
	
	ОбновитьНаКлиенте();
	УстановитьОтборНаСвязанныеТаблицы(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаДанныхПриИзменении(Элемент)
		
	ОбновитьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеДерево

&НаКлиенте
Процедура ДанныеДеревоПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборНаСвязанныеТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
			
	Если Поле = Элементы.ДанныеДеревоСоздатьРезерв И ЗначениеЗаполнено(ТекущиеДанные.СоздатьРезерв) Тогда
		
		СообщениеОПревышенииМинимальногоОстатка = ПодготовитьСообщениеОПревышенииМинимальногоОстатка(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(СообщениеОПревышенииМинимальногоОстатка) Тогда 
			ПараметрыОповещения = Новый Структура("ИдентификаторСтрокиДерева", ВыбраннаяСтрока);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьРезервирование", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(ОписаниеОповещения, СообщениеОПревышенииМинимальногоОстатка, РежимДиалогаВопрос.ДаНет);
		Иначе 
			ЗарезервироватьНоменклатуру(ВыбраннаяСтрока); 
			
			УстановитьОтборНаСвязанныеТаблицы();
		КонецЕсли;     
		
	ИначеЕсли Поле = Элементы.ДанныеДеревоСнятьРезерв И ЗначениеЗаполнено(ТекущиеДанные.СнятьРезерв) Тогда 
		
		ОтменитьРезервирование(ВыбраннаяСтрока);
		
		УстановитьОтборНаСвязанныеТаблицы(); 
		
	ИначеЕсли Поле = Элементы.ДанныеДеревоПереместить И ЗначениеЗаполнено(ТекущиеДанные.Переместить) Тогда
		
		ПереместитьТоварОбработкаВыбораИзДерева(ВыбраннаяСтрока);
		
	ИначеЕсли Поле = Элементы.ДанныеДеревоСнятьПотребность И ЗначениеЗаполнено(ТекущиеДанные.СнятьПотребность) Тогда 
		
		СнятьПотребность(ВыбраннаяСтрока);   
		
	ИначеЕсли Поле = Элементы.ДанныеДеревоДатаПотребности ИЛИ Поле = Элементы.ДанныеДеревоДанные Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.ЭтоНоменклатура Тогда 
			ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		Иначе
			ПоказатьЗначение(, ТекущиеДанные.Данные);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура ДанныеДеревоСоздатьЗаказПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	
	Если ГруппировкаДанных = 0 Тогда
		
		Если ТекущиеДанные.ЭтоНоменклатура Тогда
			
			Для Каждого СтрокаСклад Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				
				СтрокаСклад.СоздатьЗаказ = ТекущиеДанные.СоздатьЗаказ И Не СтрокаСклад.СкрытьФлагЗаказа;	
				
			КонецЦикла;	
			
		ИначеЕсли ТекущиеДанные.ЭтоСклад Тогда
			
			СоздатьЗаказПоНоменклатуре = Ложь;		
			
			СтрокаНоменклатура = ТекущиеДанные.ПолучитьРодителя();
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				Если СтрокаСклад.СоздатьЗаказ Тогда    
					СоздатьЗаказПоНоменклатуре = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаНоменклатура.СоздатьЗаказ = СоздатьЗаказПоНоменклатуре;
		КонецЕсли;	
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Если ТекущиеДанные.ЭтоЗаказ Тогда
			
			Для Каждого СтрокаНоменклатура Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				
				СтрокаНоменклатура.СоздатьЗаказ = ТекущиеДанные.СоздатьЗаказ И Не СтрокаНоменклатура.СкрытьФлагЗаказа;	
				
			КонецЦикла;
			
		ИначеЕсли ТекущиеДанные.ЭтоНоменклатура Тогда
			
			СоздатьЗаказПоЗаказу = Ложь;		
			
			СтрокаЗаказ = ТекущиеДанные.ПолучитьРодителя();
			Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
				
				Если СтрокаНоменклатура.СоздатьЗаказ Тогда    
					СоздатьЗаказПоЗаказу = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаЗаказ.СоздатьЗаказ = СоздатьЗаказПоЗаказу;
		КонецЕсли;			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОстаткиПоСкладам

&НаКлиенте
Процедура ОстаткиПоСкладамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОстаткиПоСкладамПереместить Тогда 
		ПереместитьТоварОбработкаВыбораИзТЧ(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезервыСписок

&НаКлиенте
Процедура РезервыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыДерево

&НаКлиенте
Процедура РемонтыДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДерева = РемонтыДерево.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.РемонтыДеревоСоздатьРезерв И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ID) Тогда
		
		ЗарезервироватьНоменклатуруПоРемонту(ВыбраннаяСтрока);
		
	ИначеЕсли ТипЗнч(СтрокаДерева.Данные) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		ПоказатьЗначение(, СтрокаДерева.ЗаказНаВнутреннееПотребление); 
		
	ИначеЕсли ТипЗнч(СтрокаДерева.Данные) <> Тип("Строка") Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Данные);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыНаВнутреннееПотребление = Новый Массив;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗаказНаВнутреннееПотребление) Тогда
		
		ПодчиненныеСтроки = ТекущиеДанные.ПолучитьЭлементы();
		Если ПодчиненныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.ЗаказНаВнутреннееПотребление) Тогда
				
				ПодчиненныеПодчиненнойСтроки = ПодчиненнаяСтрока.ПолучитьЭлементы();
				Если ПодчиненныеПодчиненнойСтроки = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				Для Каждого ПодчиненнаяПодчиненнойСтроки Из ПодчиненныеПодчиненнойСтроки Цикл
					ЗаказыНаВнутреннееПотребление.Добавить(ПодчиненнаяПодчиненнойСтроки.ЗаказНаВнутреннееПотребление);		
				КонецЦикла;
			Иначе
				ЗаказыНаВнутреннееПотребление.Добавить(ПодчиненнаяСтрока.ЗаказНаВнутреннееПотребление);	
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ЗаказыНаВнутреннееПотребление.Добавить(ТекущиеДанные.ЗаказНаВнутреннееПотребление);
	КонецЕсли;	
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			ИтогПоНоменклатуре = Ложь;
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				ИтогПоСкладу = Ложь;
				Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
					
					Если Не ЗаказыНаВнутреннееПотребление.Найти(СтрокаЗаказ.Данные) = Неопределено Тогда
						
						ИтогПоНоменклатуре = Истина;
						ИтогПоСкладу = Истина;
						СтрокаЗаказ.СвязанСТекущейСтрокойРемонтыДерево = Истина;
					Иначе
						СтрокаЗаказ.СвязанСТекущейСтрокойРемонтыДерево = Ложь;	
					КонецЕсли;
				КонецЦикла;	
				
				СтрокаСклад.СвязанСТекущейСтрокойРемонтыДерево = ИтогПоСкладу;	
			КонецЦикла;
			
			СтрокаНоменклатура.СвязанСТекущейСтрокойРемонтыДерево = ИтогПоНоменклатуре;
		КонецЦикла;			
 		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
				СтрокаЗаказ.СвязанСТекущейСтрокойРемонтыДерево = Не ЗаказыНаВнутреннееПотребление.Найти(СтрокаЗаказ.Данные) = Неопределено;	
			КонецЦикла; 
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыПоставщикуСписок

&НаКлиенте
Процедура ЗаказыПоставщикуСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого СтрокаДерева Из ДанныеДерево.ПолучитьЭлементы() Цикл 
		Элементы.ДанныеДерево.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)

	Для Каждого СтрокаДерева Из ДанныеДерево.ПолучитьЭлементы() Цикл  
		Элементы.ДанныеДерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПоставщику(Команда)
	 
	АдресХранилища = АдресДанныхДляЗаказовПоставщикам(); 
	
	Если АдресХранилища <> Неопределено Тогда;	
		ПараметрыФормы = Новый Структура("ИзРабочегоМестаМТО, АдресХранилища", Истина, АдресХранилища);
		ОткрытьФорму("Обработка.торо_РабочееМестоСпециалистаОбеспечения.Форма.ФормаВыбораПоставщиковДляЗаказа", ПараметрыФормы);
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбраны позиции для заказа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			СтрокаНоменклатура.СоздатьЗаказ = Ложь;
			
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				СтрокаСклад.СоздатьЗаказ = Ложь;
				
			КонецЦикла;
		КонецЦикла;  
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл	
				
				СтрокаЗаказ.СоздатьЗаказ = Ложь;
				
				Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
					
					СтрокаНоменклатура.СоздатьЗаказ = Ложь;	
					
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаНоменклатура.СкрытьФлагЗаказа Тогда
				
				СтрокаНоменклатура.СоздатьЗаказ = Истина;
				
				Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
					
					Если Не СтрокаСклад.СкрытьФлагЗаказа Тогда  
						
						СтрокаСклад.СоздатьЗаказ = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;  
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл	
				
				Если Не СтрокаЗаказ.СкрытьФлагЗаказа Тогда
					
					СтрокаЗаказ.СоздатьЗаказ = Истина;
					
					Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
						
						Если Не СтрокаНоменклатура.СкрытьФлагЗаказа Тогда
							
							СтрокаНоменклатура.СоздатьЗаказ = Истина;	
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеРемонты(Команда)
	
	Для Каждого СтрокаДатРемонтов Из РемонтыДерево.ПолучитьЭлементы() Цикл 
		Элементы.РемонтыДерево.Развернуть(СтрокаДатРемонтов.ПолучитьИдентификатор(), Истина);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеРемонты(Команда)

	Для Каждого СтрокаДатРемонтов Из РемонтыДерево.ПолучитьЭлементы() Цикл 
		Элементы.РемонтыДерево.Свернуть(СтрокаДатРемонтов.ПолучитьИдентификатор());
	КонецЦикла;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВедомости(Команда) 
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка с номенклатурой.'"));
		Возврат;
	КонецЕсли;
	
	ОтборОтчета = Новый Структура;
	ОтборОтчета.Вставить("Номенклатура");
	ОтборОтчета.Вставить("Склад"); 
	Если ИспользоватьХарактеристики Тогда
		ОтборОтчета.Вставить("Характеристика");	
	КонецЕсли;	
	
	Если ГруппировкаДанных = 0 Тогда
		
		ЗаполнитьЗначенияСвойств(ОтборОтчета, ТекущиеДанные);
		Склады = Новый Массив;

		Если ТекущиеДанные.ЭтоНоменклатура Тогда
			
			Для Каждого СтрокаСклад Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				Склады.Добавить(СтрокаСклад.Данные);	
			КонецЦикла;	
			
		ИначеЕсли ТекущиеДанные.ЭтоСклад Тогда
			
			Склады.Добавить(ТекущиеДанные.Данные);
			
		ИначеЕсли ТекущиеДанные.ЭтоЗаказ Тогда
			
			Склады.Добавить(ТекущиеДанные.ПолучитьРодителя().Данные);
		КонецЕсли;
		
		ОтборОтчета.Склад = Склады;
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Номенклатура = Новый Массив;
		Склады = Новый Массив;
		Если ИспользоватьХарактеристики Тогда
			Характеристики = Новый Массив;
		КонецЕсли;	
		
		Если ТекущиеДанные.ЭтоСклад Тогда
			
			Склады.Добавить(ТекущиеДанные.Данные);	
			
			Для Каждого СтрокаЗаказ Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				
				Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
					
					Если Номенклатура.Найти(СтрокаНоменклатура.Номенклатура) = Неопределено Тогда
						Номенклатура.Добавить(СтрокаНоменклатура.Номенклатура); 
					КонецЕсли;
					Если ИспользоватьХарактеристики 
						И Характеристики.Найти(СтрокаНоменклатура.Характеристика) = Неопределено Тогда
						Характеристики.Добавить(СтрокаНоменклатура.Характеристика);
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ТекущиеДанные.ЭтоЗаказ Тогда
			
			Склады.Добавить(ТекущиеДанные.ПолучитьРодителя().Данные);
			
			Для Каждого СтрокаНоменклатура Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				
				Номенклатура.Добавить(СтрокаНоменклатура.Номенклатура);
				Если ИспользоватьХарактеристики 
					И Характеристики.Найти(СтрокаНоменклатура.Характеристика) = Неопределено Тогда
					Характеристики.Добавить(СтрокаНоменклатура.Характеристика);
				КонецЕсли;	
			КонецЦикла;
		ИначеЕсли ТекущиеДанные.ЭтоНоменклатура Тогда
			
			СтрокаЗаказ = ТекущиеДанные.ПолучитьРодителя();
			Склады.Добавить(СтрокаЗаказ.ПолучитьРодителя().Данные);
			
			Номенклатура.Добавить(ТекущиеДанные.Номенклатура);
			Если ИспользоватьХарактеристики Тогда
				Характеристики.Добавить(ТекущиеДанные.Характеристика);
			КонецЕсли;	
		КонецЕсли;
		
		ОтборОтчета.Номенклатура = Номенклатура;
		ОтборОтчета.Склад = Склады;
		Если ИспользоватьХарактеристики Тогда
			ОтборОтчета.Характеристика = Характеристики;
		КонецЕсли;	
	КонецЕсли;
	
	ПараметрыФормыОтчета = Новый Структура;
	ПараметрыФормыОтчета.Вставить("Отбор", ОтборОтчета);
	ПараметрыФормыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ВедомостьПоТоварамНаСкладах.Форма", ПараметрыФормыОтчета); 

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ЭтоЗаказ Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ИзРабочегоМестаМТО", Истина);
		ЗначенияЗаполнения.Вставить("ЗаказНаВнутреннееПотребление", ТекущиеДанные.Данные);
		ЗначенияЗаполнения.Вставить("Организация", ТекущиеДанные.Организация);
		ЗначенияЗаполнения.Вставить("Подразделение", ТекущиеДанные.Подразделение); 
		
		ПараметрыОткрываемойФормы = Новый Структура;
		ПараметрыОткрываемойФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);  
		
		ОткрытьФорму("Документ.торо_ЗакрытиеЗаказаНаВнутреннееПотребление.Форма.ФормаДокумента", ПараметрыОткрываемойФормы);
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран заказ для закрытия'"));
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПереместитьТоварОбработкаВыбораИзДерева(ВыбраннаяСтрока)
	
	ТекущиеДанные = ДанныеДерево.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	КоличествоПоСкладам = Новый Соответствие;
	
	Если ГруппировкаДанных = 0 Тогда  // ТекущиеДанные = СтрокаСклад.
		
		СтрокаНоменклатура = ТекущиеДанные.ПолучитьРодителя();
		СкладОтправитель = ТекущиеДанные.Данные;	
		
		Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
			Если СтрокаСклад.Данные <> СкладОтправитель Тогда 
				КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву);
			КонецЕсли;
		КонецЦикла; 
			
	ИначеЕсли ГруппировкаДанных = 1 Тогда // ТекущиеДанные = СтрокаНоменклатура.
		
		СтрокаЗаказ = ТекущиеДанные.ПолучитьРодителя();
		СтрокаСклад = СтрокаЗаказ.ПолучитьРодителя();
		СкладОтправитель = СтрокаСклад.Данные;
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			Если СтрокаСклад.Данные <> СкладОтправитель Тогда 
				КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, 0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склады", КоличествоПоСкладам);
	ПараметрыФормы.Вставить("ОстатокСклада", ТекущиеДанные.СвободныйОстаток);
	ПараметрыФормы.Вставить("СкладОтправитель", СкладОтправитель);
	ПараметрыФормы.Вставить("МинОстаток", ТекущиеДанные.МинОстаток);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыОповещения.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьСкладПолучательЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.торо_РабочееМестоСпециалистаОбеспечения.Форма.ФормаВыбораСкладовДляПеремещения", 
		ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПереместитьТоварОбработкаВыбораИзТЧ(ВыбраннаяСтрока)
	
	ТекущиеДанныеТЧ = ОстаткиПоСкладам.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ТекущиеДанныеДерево = Элементы.ДанныеДерево.ТекущиеДанные; 
	
	КоличествоПоСкладам = Новый Соответствие;

	Если ГруппировкаДанных = 0 Тогда
		
		Если ТекущиеДанныеДерево.ЭтоНоменклатура Тогда
			
			Для Каждого СтрокаСклад Из ТекущиеДанныеДерево.ПолучитьЭлементы() Цикл
				КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву);
			КонецЦикла;	
				
		ИначеЕсли ТекущиеДанныеДерево.ЭтоСклад Тогда
			
			СтрокаСклад = ТекущиеДанныеДерево;
			КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву);
			
		ИначеЕсли ТекущиеДанныеДерево.ЭтоЗаказ Тогда
			
			СтрокаСклад = ТекущиеДанныеДерево.ПолучитьРодителя();
			КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву);
		КонецЕсли;	
		
			
	ИначеЕсли ГруппировкаДанных = 1 Тогда 
		
		Если Не ТекущиеДанныеДерево.ЭтоНоменклатура Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана строка с номенклатурой.'"));
			Возврат;
		КонецЕсли;
		
		СтрокаНоменклатура = ТекущиеДанныеДерево;
		СтрокаЗаказ = СтрокаНоменклатура.ПолучитьРодителя();
		СтрокаСклад = СтрокаЗаказ.ПолучитьРодителя();
		
		КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаНоменклатура.ОсталосьОбеспечить - СтрокаНоменклатура.РекомендованоКРезерву);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склады", КоличествоПоСкладам);
	ПараметрыФормы.Вставить("ОстатокСклада", ТекущиеДанныеТЧ.СвободныйОстаток);
	ПараметрыФормы.Вставить("СкладОтправитель", ТекущиеДанныеТЧ.Склад);
	ПараметрыФормы.Вставить("МинОстаток", ТекущиеДанныеТЧ.МинОстаток);

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Номенклатура", ТекущиеДанныеДерево.Номенклатура);
	ПараметрыОповещения.Вставить("Характеристика", ТекущиеДанныеДерево.Характеристика);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьСкладПолучательЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.торо_РабочееМестоСпециалистаОбеспечения.Форма.ФормаВыбораСкладовДляПеремещения", 
		ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиенте()
	
	Если ГруппировкаДанных = 0 Тогда
		Элементы.ДанныеДеревоДанные.Заголовок = НСтр("ru = 'Номенклатура / Склад / Дата, Заказ'"); 
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		Элементы.ДанныеДеревоДанные.Заголовок = НСтр("ru = 'Склад / Дата, Заказ / Номенклатура'"); 
	КонецЕсли;
	
	ДанныеДерево.ПолучитьЭлементы().Очистить();
	РемонтыДерево.ПолучитьЭлементы().Очистить();
	ОстаткиПоСкладам.Очистить();
	ОбновитьДанные();
	
	Если ГруппировкаДанных = 1 Тогда
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			Элементы.ДанныеДерево.Развернуть(СтрокаСклад.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРемонтов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДатаОтгрузки КАК ДатаПотребности,
	|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК торо_ОбъектРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК торо_ВидРемонта,
	|	торо_ИнтеграцияДокументов.ID КАК торо_IDРемонта,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(Резервы.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) <= 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Обеспечено,
	|	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотреблениеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление = торо_ИнтеграцияДокументов.ДокументЕРП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|		ПО (торо_ИнтеграцияДокументов.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоЗаказам КАК Резервы
	|		ПО (Резервы.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (Резервы.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (Резервы.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|			И (Резервы.ЗаказНаВнутреннееПотребление = ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК ТоварыНаруках
	|		ПО (ТоварыНаруках.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (ТоварыНаруках.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (ТоварыНаруках.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|			И (ТоварыНаруках.ЗаказНаВнутреннееПотребление = ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление)
	|ГДЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДатаОтгрузки,
	|	торо_ИнтеграцияДокументов.ID,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление,
	|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.Завершен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПотребности,
	|	торо_ОбъектРемонта,
	|	торо_ВидРемонта
	|ИТОГИ
	|	МАКСИМУМ(ЗаказНаВнутреннееПотребление),
	|	МАКСИМУМ(торо_IDРемонта),
	|	МИНИМУМ(Обеспечено),
	|	МИНИМУМ(Завершен)
	|ПО
	|	ДатаПотребности,
	|	торо_ОбъектРемонта,
	|	торо_ВидРемонта";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КореньДерева = РемонтыДерево.ПолучитьЭлементы(); 
	
	ВыборкаПоДатам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДатам.Следующий() Цикл
		
		Если ТолькоНеобеспеченные И ВыборкаПоДатам.Обеспечено Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаДата = КореньДерева.Добавить();
		СтрокаДата.Данные = Формат(ВыборкаПоДатам.ДатаПотребности, "ДФ=dd.MM.yyyy");
		СтрокаДата.Дата = ВыборкаПоДатам.ДатаПотребности;
		СтрокаДата.Обеспечено = ВыборкаПоДатам.Обеспечено;
		СтрокаДата.Завершен = ВыборкаПоДатам.Завершен;
		
		СтрокиОР = СтрокаДата.ПолучитьЭлементы();
		ВыборкаОР = ВыборкаПоДатам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОР.Следующий() Цикл
			
			Если ТолькоНеобеспеченные И ВыборкаОР.Обеспечено Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаОР = СтрокиОР.Добавить();
			СтрокаОР.Дата = ВыборкаПоДатам.ДатаПотребности;
			СтрокаОР.Данные = ?(ЗначениеЗаполнено(ВыборкаОР.торо_ОбъектРемонта), ВыборкаОР.торо_ОбъектРемонта, "Ручной заказ");
			СтрокаОР.Обеспечено = ВыборкаОР.Обеспечено;
			СтрокаОР.Завершен = ВыборкаОР.Завершен;
			
			СтрокиВидыРемонтов = СтрокаОР.ПолучитьЭлементы();
			ВыборкаВидовРемонта = ВыборкаОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидовРемонта.Следующий() Цикл
				
				Если ТолькоНеобеспеченные И ВыборкаВидовРемонта.Обеспечено Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаВидовРемонта.торо_ВидРемонта) Тогда 
					СтрокаВидаРемонта = СтрокиВидыРемонтов.Добавить();
					СтрокаВидаРемонта.Дата = ВыборкаПоДатам.ДатаПотребности;
					СтрокаВидаРемонта.Данные = ВыборкаВидовРемонта.торо_ВидРемонта;
					СтрокаВидаРемонта.ЗаказНаВнутреннееПотребление =  ВыборкаВидовРемонта.ЗаказНаВнутреннееПотребление;
					СтрокаВидаРемонта.Обеспечено = ВыборкаВидовРемонта.Обеспечено;
					СтрокаВидаРемонта.Завершен = ВыборкаВидовРемонта.Завершен;
					Если ЗначениеЗаполнено(ВыборкаВидовРемонта.торо_IDРемонта) И НЕ ВыборкаВидовРемонта.Обеспечено И НЕ ВыборкаВидовРемонта.Завершен Тогда
						СтрокаВидаРемонта.ID = ВыборкаВидовРемонта.торо_IDРемонта;
						СтрокаВидаРемонта.СоздатьРезерв = БиблиотекаКартинок.ПереключитьАктивность;
					КонецЕсли;
				Иначе
					ВыборкаВнутреннихЗаказов = ВыборкаВидовРемонта.Выбрать();
					Пока ВыборкаВнутреннихЗаказов.Следующий() Цикл
						
						Если ТолькоНеобеспеченные И ВыборкаВнутреннихЗаказов.Обеспечено Тогда 
							Продолжить;
						КонецЕсли;
						
						СтрокаВидаРемонта = СтрокиВидыРемонтов.Добавить();
						СтрокаВидаРемонта.Дата = ВыборкаПоДатам.ДатаПотребности;
						СтрокаВидаРемонта.Данные = ВыборкаВнутреннихЗаказов.ЗаказНаВнутреннееПотребление;
						СтрокаВидаРемонта.ЗаказНаВнутреннееПотребление =  ВыборкаВнутреннихЗаказов.ЗаказНаВнутреннееПотребление;
						СтрокаВидаРемонта.Обеспечено = ВыборкаВнутреннихЗаказов.Обеспечено;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры
                                                                        
&НаСервере
Процедура ОбновитьДанные() 
	
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	ИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();
	ИспользоватьУтверждениеЗаказовНаВП = Константы.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление.Получить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Регистр.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	Регистр.Номенклатура КАК Номенклатура,
	               |	Регистр.Номенклатура.СхемаОбеспечения КАК СхемаОбеспечения,
	               |	&Характеристика КАК Характеристика,
	               |	Регистр.Склад КАК Склад,
	               |	Регистр.КОформлениюОстаток КАК КОформлениюОстаток
	               |ПОМЕСТИТЬ ЗаказыНаВнутреннееПотреблениеРС
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
	               |			,
	               |			&ОтборПоОрганизации
	               |				И &ОтборПоПодразделению
	               |				И &ОтборПоСтатусуУтверждения) КАК Регистр
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	СхемаОбеспечения,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыНаВнутреннееПотреблениеРС.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	Документ.ДатаОтгрузки КАК ДатаОтгрузки,
	               |	Документ.Организация КАК Организация,
	               |	Документ.Подразделение КАК Подразделение,
	               |	Документ.торо_СозданПоПотребности КАК торо_СозданПоПотребности,
	               |	ЗаказыНаВнутреннееПотреблениеРС.Номенклатура КАК Номенклатура,
	               |	ЗаказыНаВнутреннееПотреблениеРС.СхемаОбеспечения КАК СхемаОбеспечения,
	               |	ЗаказыНаВнутреннееПотреблениеРС.Характеристика КАК Характеристика,
	               |	ЗаказыНаВнутреннееПотреблениеРС.Склад КАК Склад,
	               |	ЗаказыНаВнутреннееПотреблениеРС.КОформлениюОстаток КАК КОформлениюОстаток,
	               |	ВЫБОР
	               |		КОГДА НЕ ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей ЕСТЬ NULL
	               |			ТОГДА ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей
	               |		КОГДА НЕ СхемыОбеспечения.СпособОбеспеченияПотребностей ЕСТЬ NULL
	               |			ТОГДА СхемыОбеспечения.СпособОбеспеченияПотребностей
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)
	               |	КОНЕЦ КАК СпособОбеспеченияПотребностей
	               |ПОМЕСТИТЬ ЗаказыНаВнутреннееПотреблениеНачальная
	               |ИЗ
	               |	ЗаказыНаВнутреннееПотреблениеРС КАК ЗаказыНаВнутреннееПотреблениеРС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК ВариантыОбеспеченияТоварами
	               |		ПО ЗаказыНаВнутреннееПотреблениеРС.Номенклатура = ВариантыОбеспеченияТоварами.Номенклатура
	               |			И ЗаказыНаВнутреннееПотреблениеРС.Характеристика = ВариантыОбеспеченияТоварами.Характеристика
	               |			И ЗаказыНаВнутреннееПотреблениеРС.Склад = ВариантыОбеспеченияТоварами.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
	               |		ПО ЗаказыНаВнутреннееПотреблениеРС.СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения
	               |			И ЗаказыНаВнутреннееПотреблениеРС.Склад = СхемыОбеспечения.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК Документ
	               |		ПО ЗаказыНаВнутреннееПотреблениеРС.ЗаказНаВнутреннееПотребление = Документ.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	СхемаОбеспечения,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление";
	
	
	Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Регистр.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ЗаказНаВнутреннееПотребление.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоПодразделению", "ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению", Истина);
	КонецЕсли;
	
	Если ИспользоватьУтверждениеЗаказовНаВП Тогда
		МассивСтатусов = Новый Массив();
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтатусуУтверждения", "ЗаказНаВнутреннееПотребление.торо_СтатусУтверждения В(&МассивСтатусов)");
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтатусуУтверждения", Истина);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	торо_МТОСервер.РассчитатьКрайнийСрок(Запрос.МенеджерВременныхТаблиц, "ЗаказыНаВнутреннееПотреблениеНачальная");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки КАК ДатаОтгрузки
	               |ПОМЕСТИТЬ ВТ_ИсходныеДатыПоставки
	               |ИЗ
	               |	ЗаказыНаВнутреннееПотреблениеНачальная КАК ЗаказыНаВнутреннееПотреблениеНачальная
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДатаОтгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИсходныеДатыПоставки.ДатаОтгрузки КАК ДатаОтгрузки,
	               |	МАКСИМУМ(ВТРасписанияРаботы.ДатаГрафика) КАК ДатаГрафика
	               |ПОМЕСТИТЬ ВТ_ДатыПоставок
	               |ИЗ
	               |	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсходныеДатыПоставки КАК ВТ_ИсходныеДатыПоставки
	               |		ПО ВТРасписанияРаботы.ДатаГрафика < ВТ_ИсходныеДатыПоставки.ДатаОтгрузки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ИсходныеДатыПоставки.ДатаОтгрузки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДатаОтгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.Номенклатура КАК Номенклатура,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.Характеристика КАК Характеристика,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.Склад КАК Склад,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток КАК КОформлениюОстатокВсего,
	               |	ВЫБОР
	               |		КОГДА ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки <= &ДатаГоризонтаПланирования
	               |				И ЕСТЬNULL(ВТ_КрайниеДатыЗаказов.ДатаПоКалендарю, ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) <= &ПериодУчетаКрайнихСроковЗаказов
	               |			ТОГДА ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КОформлениюОстаток,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки КАК ДатаОтгрузки,
	               |	ЕСТЬNULL(ВТ_КрайниеДатыЗаказов.ДатаПоКалендарю, ДАТАВРЕМЯ(1, 1, 1)) КАК КрайнийСрокЗаказа,
	               |	ЕСТЬNULL(ВТ_ДатыПоставок.ДатаГрафика, ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) КАК ДатаПоставки,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.Организация КАК Организация,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.Подразделение КАК Подразделение,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Количество КАК ПотребностьВЗаказе,
	               |	ЗаказыНаВнутреннееПотреблениеНачальная.торо_СозданПоПотребности
	               |		ИЛИ ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток <> ЗаказНаВнутреннееПотреблениеТовары.Количество КАК ЕстьСвязанные
	               |ПОМЕСТИТЬ ЗаказыНаВнутреннееПотребление
	               |ИЗ
	               |	ЗаказыНаВнутреннееПотреблениеНачальная КАК ЗаказыНаВнутреннееПотреблениеНачальная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КрайниеДатыЗаказов КАК ВТ_КрайниеДатыЗаказов
	               |		ПО ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей = ВТ_КрайниеДатыЗаказов.СпособОбеспеченияПотребностей
	               |			И ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки = ВТ_КрайниеДатыЗаказов.ДатаОтгрузки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыПоставок КАК ВТ_ДатыПоставок
	               |		ПО ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки = ВТ_ДатыПоставок.ДатаОтгрузки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	               |		ПО ЗаказыНаВнутреннееПотреблениеНачальная.ЗаказНаВнутреннееПотребление = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
	               |			И ЗаказыНаВнутреннееПотреблениеНачальная.Номенклатура = ЗаказНаВнутреннееПотреблениеТовары.Номенклатура
	               |			И ЗаказыНаВнутреннееПотреблениеНачальная.Характеристика = ЗаказНаВнутреннееПотреблениеТовары.Характеристика
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Регистр.Номенклатура КАК Номенклатура,
	               |	Регистр.Характеристика КАК Характеристика,
	               |	Регистр.Склад КАК Склад,
	               |	Регистр.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	Регистр.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ РезервыПоЗаказам
	               |ИЗ
	               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	               |			,
	               |			(Номенклатура, Характеристика) В
	               |				(ВЫБРАТЬ
	               |					Потребность.Номенклатура,
	               |					Потребность.Характеристика
	               |				ИЗ
	               |					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	               |	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	               |	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	               |ПОМЕСТИТЬ ТоварыНаРуках
	               |ИЗ
	               |	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	               |			,
	               |			(Номенклатура, Характеристика, Склад, ЗаказНаВнутреннееПотребление) В
	               |				(ВЫБРАТЬ
	               |					Потребность.Номенклатура,
	               |					Потребность.Характеристика,
	               |					Потребность.Склад,
	               |					Потребность.ЗаказНаВнутреннееПотребление
	               |				ИЗ
	               |					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК торо_ТоварыНаРукахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление";
	
	Запрос.УстановитьПараметр("ДатаГоризонтаПланирования", КонецМесяца(ДобавитьМесяц(ТекущаяДата(), ГоризонтПланирования)));
	Запрос.УстановитьПараметр("ПериодУчетаКрайнихСроковЗаказов", ТекущаяДата() + ПериодУчетаКрайнихСроковЗаказов * 86400);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновитьДеревоРемонтов(Запрос.МенеджерВременныхТаблиц);
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезервыПоЗаказам.Номенклатура КАК Номенклатура,
	|	РезервыПоЗаказам.Характеристика КАК Характеристика,
	|	РезервыПоЗаказам.Склад КАК Склад,
	|	СУММА(РезервыПоЗаказам.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ РезервыПоСкладам
	|ИЗ
	|	РезервыПоЗаказам КАК РезервыПоЗаказам
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыПоЗаказам.Номенклатура,
	|	РезервыПоЗаказам.Характеристика,
	|	РезервыПоЗаказам.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезервыПоЗаказам.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ПОМЕСТИТЬ СвязанныеДокументы
	|ИЗ
	|	РезервыПоЗаказам КАК РезервыПоЗаказам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыНаРуках.ЗаказНаВнутреннееПотребление
	|ИЗ
	|	ТоварыНаРуках КАК ТоварыНаРуках
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.ВНаличииОстаток КАК ВНаличииОстаток
	|ПОМЕСТИТЬ ОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Склад КАК Склад,
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.МинимальныйОстаток КАК МинимальныйОстаток,
	|	Регистр.ХарактеристикаНоменклатуры КАК Характеристика
	|ПОМЕСТИТЬ МинимальныеОстатки
	|ИЗ
	|	РегистрСведений.торо_МинимальныеОстаткиНоменклатуры.СрезПоследних(
	|			,
	|			(Номенклатура, ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.КоличествоОстаток КАК КоличествоОстаток,
	|	Регистр.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Регистр.ЗаказПоставщику.ДатаПоставки КАК ДатаПоставки
	|ПОМЕСТИТЬ ЗаказыПоставщику
	|ИЗ
	|	РегистрНакопления.торо_ЗаказыПоставщику.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Потребность.Номенклатура,
	|						Потребность.Характеристика
	|					ИЗ
	|						ЗаказыНаВнутреннееПотребление КАК Потребность)
	|				И &ОтборПоОрганизации
	|				И &ОтборПоПодразделению) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	|	ОстаткиПоСкладам.ВНаличииОстаток КАК ОстатокНаСкладе,
	|	ОстаткиПоСкладам.Склад КАК Склад,
	|	ЕСТЬNULL(МинимальныеОстатки.МинимальныйОстаток, 0) КАК МинОстаток,
	|	ЕСТЬNULL(Резервы.КоличествоОстаток, 0) КАК Резерв,
	|	ОстаткиПоСкладам.ВНаличииОстаток - ЕСТЬNULL(Резервы.КоличествоОстаток, 0) КАК СвободныйОстаток,
	|	СУММА(ЕСТЬNULL(ЗаказыПоставщику.КоличествоОстаток, 0)) КАК Заказано
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотреблениеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиПоСкладам КАК ОстаткиПоСкладам
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = ОстаткиПоСкладам.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = ОстаткиПоСкладам.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|		ПО (ЗаказыНаВнутреннееПотребление.Номенклатура = ОстаткиПоСкладам.Номенклатура)
	|			И (ЗаказыНаВнутреннееПотребление.Характеристика = ОстаткиПоСкладам.Характеристика)
	|			И (ЗаказыНаВнутреннееПотребление.Склад = ОстаткиПоСкладам.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеОстатки КАК МинимальныеОстатки
	|		ПО (МинимальныеОстатки.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (МинимальныеОстатки.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (МинимальныеОстатки.Склад = ОстаткиПоСкладам.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоСкладам КАК Резервы
	|		ПО (Резервы.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (Резервы.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (Резервы.Склад = ОстаткиПоСкладам.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПоставщику КАК ЗаказыПоставщику
	|		ПО (ЗаказыПоставщику.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (ЗаказыПоставщику.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (ЗаказыПоставщику.Склад = ОстаткиПоСкладам.Склад)
	|ГДЕ
	|	ЗаказыНаВнутреннееПотребление.Склад ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика,
	|	ОстаткиПоСкладам.Склад,
	|	ЕСТЬNULL(МинимальныеОстатки.МинимальныйОстаток, 0),
	|	ОстаткиПоСкладам.ВНаличииОстаток,
	|	ЕСТЬNULL(Резервы.КоличествоОстаток, 0),
	|	ОстаткиПоСкладам.ВНаличииОстаток - ЕСТЬNULL(Резервы.КоличествоОстаток, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	ВЫБОР
	|		КОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) > 0
	|			ТОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОбеспечению,
	|	ВЫБОР
	|		КОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) - ЕСТЬNULL(Резервы.КоличествоОстаток, 0) > 0
	|			ТОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) - ЕСТЬNULL(Резервы.КоличествоОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсталосьОбеспечить,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДатаОтгрузки КАК ДатаПотребности,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДатаПоставки КАК ДатаПоставки,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.КрайнийСрокЗаказа КАК КрайнийСрокЗаказа,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Организация КАК Организация,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ОстаткиПоСкладам.ВНаличииОстаток, 0) КАК ОстатокНаСкладе,
	|	ЕСТЬNULL(ОстаткиПоСкладам.ВНаличииОстаток, 0) - ЕСТЬNULL(РезервыПоСкладам.КоличествоОстаток, 0) КАК СвободныйОстатокНаСкладе,
	|	ЕСТЬNULL(Резервы.КоличествоОстаток, 0) КАК Резерв,
	|	ЕСТЬNULL(МинимальныеОстатки.МинимальныйОстаток, 0) КАК МинОстаток,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ПотребностьВЗаказе КАК ПотребностьВЗаказе,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЕстьСвязанные
	|		ИЛИ НЕ СвязанныеДокументы.ЗаказНаВнутреннееПотребление ЕСТЬ NULL КАК ЕстьСвязанныеДокументы
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотреблениеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоСкладам КАК ОстаткиПоСкладам
	|		ПО (ОстаткиПоСкладам.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (ОстаткиПоСкладам.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (ОстаткиПоСкладам.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоЗаказам КАК Резервы
	|		ПО (Резервы.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (Резервы.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (Резервы.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|			И (Резервы.ЗаказНаВнутреннееПотребление = ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеОстатки КАК МинимальныеОстатки
	|		ПО (МинимальныеОстатки.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (МинимальныеОстатки.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (МинимальныеОстатки.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК ТоварыНаруках
	|		ПО (ТоварыНаруках.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (ТоварыНаруках.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (ТоварыНаруках.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|			И (ТоварыНаруках.ЗаказНаВнутреннееПотребление = ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязанныеДокументы КАК СвязанныеДокументы
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление = СвязанныеДокументы.ЗаказНаВнутреннееПотребление
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоСкладам КАК РезервыПоСкладам
	|		ПО (РезервыПоСкладам.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (РезервыПоСкладам.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (РезервыПоСкладам.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|ГДЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПотребности,
	|	Номенклатура,
	|	Склад
	|ИТОГИ
	|	СУММА(КОбеспечению),
	|	СУММА(ОсталосьОбеспечить),
	|	СУММА(ПотребностьВЗаказе),
	|	МИНИМУМ(ДатаПотребности),
	|	МАКСИМУМ(СпособОбеспеченияПотребностей),
	|	МИНИМУМ(ДатаПоставки),
	|	МАКСИМУМ(ОстатокНаСкладе),
	|	СУММА(Резерв),
	|	МИНИМУМ(МинОстаток)
	|ПО
	|	%СтрокаИтогов%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщику.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщику.Характеристика КАК Характеристика,
	|	ЗаказыПоставщику.Склад КАК Склад,
	|	СУММА(ЗаказыПоставщику.КоличествоОстаток) КАК Количество,
	|	ЗаказыПоставщику.ДатаПоставки КАК ДатаПоставки
	|ИЗ
	|	ЗаказыПоставщику КАК ЗаказыПоставщику
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщику.Номенклатура,
	|	ЗаказыПоставщику.Характеристика,
	|	ЗаказыПоставщику.Склад,
	|	ЗаказыПоставщику.ДатаПоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоставки";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ЗаказПоставщику.Организация =  &Организация"); 
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоПодразделению", "ЗаказПоставщику.Подразделение = &Подразделение");
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению", Истина);                                                                                                                                 
	КонецЕсли;      
    Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Регистр.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;

	Если ГруппировкаДанных = 0 Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СтрокаИтогов%", "Номенклатура, Характеристика, Склад");	
	ИначеЕсли ГруппировкаДанных = 1 Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СтрокаИтогов%", "Склад, ЗаказНаВнутреннееПотребление");	
	КонецЕсли;	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОстаткиПоСкладам.Загрузить(РезультатЗапроса[5].Выгрузить());
	Для Каждого Строка Из ОстаткиПоСкладам Цикл 
		Если Строка.СвободныйОстаток > 0 Тогда 
			Строка.Переместить = БиблиотекаКартинок.СтартБизнесПроцесса;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатЗапроса[6].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказанныеПозиции = РезультатЗапроса[7].Выгрузить();
	
	Если ЭтоАдресВременногоХранилища(АдресЗаказовПоставщикам) Тогда
		ПоместитьВоВременноеХранилище(ЗаказанныеПозиции, АдресЗаказовПоставщикам);
	Иначе
		АдресЗаказовПоставщикам = ПоместитьВоВременноеХранилище(ЗаказанныеПозиции, УникальныйИдентификатор);
	КонецЕсли;	
		
	ЗаполнитьДанныеДерево(РезультатЗапроса[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ЗаказанныеПозиции);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДерево(ВыборкаДанных, ЗаказанныеПозиции)
	
	СтруктураПоискаЗаказов = Новый Структура("Номенклатура, Характеристика, Склад");
	ЗаказанныеПозиции.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	
	ЭлементыКорняДерева = ДанныеДерево.ПолучитьЭлементы();
	
	Если ГруппировкаДанных = 1 Тогда // По заказам.
		
		ВыборкаПоСкладам = ВыборкаДанных;
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			Если ТолькоНеобеспеченные и ВыборкаПоСкладам.ОсталосьОбеспечить = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокаСклад = ЭлементыКорняДерева.Добавить();
			
			СтрокаСклад.Данные = ВыборкаПоСкладам.Склад;			
			СтрокаСклад.СкрытьФлагЗаказа = Истина;
			СтрокаСклад.ЭтоСклад = Истина;
			
			СтрокиЗаказов = СтрокаСклад.ПолучитьЭлементы();
			ВыборкаПоЗаказам = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоЗаказам.Следующий() Цикл
				
				Если ТолькоНеобеспеченные и ВыборкаПоЗаказам.ОсталосьОбеспечить = 0 Тогда
					Продолжить;
				КонецЕсли;  
				
				СтрокаЗаказ = СтрокиЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаПоЗаказам,, "ОстатокНаСкладе");
				
				СтрокаЗаказ.Данные = ВыборкаПоЗаказам.ЗаказНаВнутреннееПотребление;				
				СтрокаЗаказ.ЭтоЗаказ = Истина;
								
				СтрокиНоменклатур = СтрокаЗаказ.ПолучитьЭлементы();
				ВыборкаПоНоменклатуре = ВыборкаПоЗаказам.Выбрать();
				Пока ВыборкаПоНоменклатуре.Следующий() Цикл
					
					Если ТолькоНеобеспеченные и ВыборкаПоНоменклатуре.ОсталосьОбеспечить = 0 Тогда
						Продолжить;
					КонецЕсли; 
					
					СтрокаНоменклатура = СтрокиНоменклатур.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаПоНоменклатуре);
					
					Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Характеристика) Тогда 
						СтрокаНоменклатура.Данные = СтрШаблон("%1 [%2]", ВыборкаПоНоменклатуре.Номенклатура, ВыборкаПоНоменклатуре.Характеристика);	
					Иначе
						СтрокаНоменклатура.Данные = ВыборкаПоНоменклатуре.Номенклатура;
					КонецЕсли;
					СтрокаНоменклатура.СвободныйОстаток = ВыборкаПоНоменклатуре.СвободныйОстатокНаСкладе;
					СтрокаНоменклатура.ЭтоНоменклатура = Истина;
										
					ЗаполнитьЗначенияСвойств(СтруктураПоискаЗаказов, СтрокаНоменклатура);
					СтруктураПоискаЗаказов.Склад = СтрокаСклад.Данные;
					ЗаказанныеПозицииОтбор = ЗаказанныеПозиции.НайтиСтроки(СтруктураПоискаЗаказов);
					
					Для Каждого ЗаказаннаяПозиция Из ЗаказанныеПозицииОтбор Цикл 
						
						Если ЗаказаннаяПозиция.ДатаПоставки <= СтрокаНоменклатура.ДатаПотребности Тогда
							СтрокаНоменклатура.ЗаказНаДатуПотребности = СтрокаНоменклатура.ЗаказНаДатуПотребности + ЗаказаннаяПозиция.Количество;
						КонецЕсли;  
						СтрокаНоменклатура.ЗаказВсего = СтрокаНоменклатура.ЗаказВсего + ЗаказаннаяПозиция.Количество;
					КонецЦикла;    
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(СтрокаЗаказ, СтрокаНоменклатура, 
					"ЕстьСвязанныеДокументы, Организация, Подразделение");
				
			КонецЦикла;	
		КонецЦикла;
		
	ИначеЕсли ГруппировкаДанных = 0 Тогда // По номенклатуре.
		
		ВыборкаНоменклатур = ВыборкаДанных;
		Пока ВыборкаНоменклатур.Следующий() Цикл
			
			Если ТолькоНеобеспеченные и ВыборкаНоменклатур.ОсталосьОбеспечить = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ВыборкаХарактеристик = ВыборкаНоменклатур.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл
				
				Если ТолькоНеобеспеченные и ВыборкаХарактеристик.ОсталосьОбеспечить = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаНоменклатура = ЭлементыКорняДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаХарактеристик);
				Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ВыборкаХарактеристик.Характеристика) Тогда 
					СтрокаНоменклатура.Данные = СтрШаблон("%1 [%2]", ВыборкаНоменклатур.Номенклатура, ВыборкаХарактеристик.Характеристика);	
				Иначе
					СтрокаНоменклатура.Данные = ВыборкаНоменклатур.Номенклатура;
				КонецЕсли;
				СтрокаНоменклатура.МинОстаток = 0;
				СтрокаНоменклатура.ЭтоНоменклатура = Истина;
				
				ОстатокПоНоменклатуре = 0;
				СвободныйОстаток = 0;
				ЗаказПоНоменклатуре = 0;
				
				МинимальныйКрайнийСрокСкладов = Дата(3999, 1, 1);
				
				СтрокиСклады = СтрокаНоменклатура.ПолучитьЭлементы();
				
				ВыборкаСкладов = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСкладов.Следующий() Цикл
					Если ТолькоНеобеспеченные и ВыборкаСкладов.ОсталосьОбеспечить = 0 Тогда
						Продолжить;
					КонецЕсли; 
					СтрокаСклад = СтрокиСклады.Добавить();
					
					СтрокаСклад.Данные = ВыборкаСкладов.Склад;
					ЗаполнитьЗначенияСвойств(СтрокаСклад, ВыборкаСкладов);
					СтрокаСклад.СвободныйОстаток = ВыборкаСкладов.ОстатокНаСкладе - ВыборкаСкладов.Резерв;
					СтрокаСклад.ЭтоСклад = Истина;
					
					Если СтрокаСклад.СвободныйОстаток > 0 Тогда
						СтрокаСклад.Переместить = БиблиотекаКартинок.СтартБизнесПроцесса;
					КонецЕсли;
					
					ОстатокПоНоменклатуре = ОстатокПоНоменклатуре + ВыборкаСкладов.ОстатокНаСкладе; 
					СвободныйОстаток = СвободныйОстаток + СтрокаСклад.СвободныйОстаток;

					ЗаказПоСкладу = 0;
					ВнешниеЗаказыДобавлены = Ложь;
					
					ЗаполнитьЗначенияСвойств(СтруктураПоискаЗаказов, ВыборкаСкладов);
					НайденныеЗаказыПоставщику = ЗаказанныеПозиции.НайтиСтроки(СтруктураПоискаЗаказов);
					
					МинимальныйКрайнийСрокЗаказов = Дата(3999, 1, 1);
					
					СтрокиВнутренниеЗаказы = СтрокаСклад.ПолучитьЭлементы(); 
					
					ВыборкаЗаказов = ВыборкаСкладов.Выбрать();
					Пока ВыборкаЗаказов.Следующий() Цикл 
						Если ТолькоНеобеспеченные и ВыборкаЗаказов.ОсталосьОбеспечить = 0 Тогда
							Продолжить;
						КонецЕсли; 
						СтрокаЗаказ = СтрокиВнутренниеЗаказы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаЗаказов);
						СтрокаЗаказ.ОстатокНаСкладе = 0;
						СтрокаЗаказ.МинОстаток = 0;
						СтрокаЗаказ.СкрытьФлагЗаказа = Истина;
						СтрокаЗаказ.ЭтоЗаказ = Истина;
						СтрокаЗаказ.Данные = ВыборкаЗаказов.ЗаказНаВнутреннееПотребление;
						ОсталосьОбеспечить = СтрокаЗаказ.ОсталосьОбеспечить - СтрокаЗаказ.РекомендованоКРезерву;
						Для Каждого ЗаказПоставщику Из НайденныеЗаказыПоставщику Цикл 
							Если НЕ ВнешниеЗаказыДобавлены Тогда
								СтрокаСклад.ЗаказВсего = СтрокаСклад.ЗаказВсего + ЗаказПоставщику.Количество;
							КонецЕсли;
							Если ОсталосьОбеспечить > 0 И ЗаказПоставщику.Количество <> 0 И ЗаказПоставщику.ДатаПоставки <= ВыборкаЗаказов.ДатаПотребности Тогда
								Количество = Мин(ОсталосьОбеспечить, ЗаказПоставщику.Количество); 
								СтрокаЗаказ.ЗаказНаДатуПотребности = СтрокаЗаказ.ЗаказНаДатуПотребности + Количество;
								ЗаказПоставщику.Количество = ЗаказПоставщику.Количество - Количество;
								ОсталосьОбеспечить = ОсталосьОбеспечить - Количество;
							КонецЕсли;
						КонецЦикла;
						
						ВнешниеЗаказыДобавлены = Истина;

						ЗаказПоСкладу = ЗаказПоСкладу + СтрокаЗаказ.ЗаказНаДатуПотребности;
						
						Если ЗначениеЗаполнено(ВыборкаЗаказов.КрайнийСрокЗаказа)
							И ВыборкаЗаказов.КрайнийСрокЗаказа < МинимальныйКрайнийСрокЗаказов Тогда
							МинимальныйКрайнийСрокЗаказов = ВыборкаЗаказов.КрайнийСрокЗаказа;
						КонецЕсли; 
						
					КонецЦикла;
					СтрокаСклад.ЗаказНаДатуПотребности = ЗаказПоСкладу;

					ЗаказПоНоменклатуре = ЗаказПоНоменклатуре + ЗаказПоСкладу;
					СтрокаНоменклатура.ЗаказВсего = СтрокаНоменклатура.ЗаказВсего + СтрокаСклад.ЗаказВсего;
										
					Если МинимальныйКрайнийСрокЗаказов = Дата(3999, 1, 1) Тогда
						МинимальныйКрайнийСрокЗаказов = Дата(1, 1, 1);
					КонецЕсли; 
					
					СтрокаСклад.КрайнийСрокЗаказа = МинимальныйКрайнийСрокЗаказов;
					
					Если ЗначениеЗаполнено(МинимальныйКрайнийСрокЗаказов)
						И СтрокаСклад.КрайнийСрокЗаказа < МинимальныйКрайнийСрокСкладов Тогда
						МинимальныйКрайнийСрокСкладов = СтрокаСклад.КрайнийСрокЗаказа;
					КонецЕсли; 
					
				КонецЦикла;
				
				СтрокаНоменклатура.ОстатокНаСкладе = ОстатокПоНоменклатуре;
				СтрокаНоменклатура.СвободныйОстаток = СвободныйОстаток;
				СтрокаНоменклатура.ЗаказНаДатуПотребности = ЗаказПоНоменклатуре;

				Если МинимальныйКрайнийСрокСкладов = Дата(3999, 1, 1) Тогда
					МинимальныйКрайнийСрокСкладов = Дата(1, 1, 1);
				КонецЕсли;
				
				СтрокаНоменклатура.КрайнийСрокЗаказа = МинимальныйКрайнийСрокСкладов; 
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьЗависимыеПоказателиДанныеДерево();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаСвязанныеТаблицы()
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	
	// Остатки по складам.
	Если ТекущиеДанные = Неопределено Тогда 
		ПустойОтбор = Новый Структура("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		Элементы.ОстаткиПоСкладам.ОтборСтрок = Новый ФиксированнаяСтруктура(ПустойОтбор);
		Возврат;
	Иначе
		ОтборСтрок = Новый Структура("Номенклатура, Характеристика", ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
		Элементы.ОстаткиПоСкладам.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	КонецЕсли;
	
	// Резервы и заказы поставщику.
	Если ГруппировкаДанных = 1 И ТекущиеДанные.ЭтоЗаказ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Номенклатура", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Характеристика", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "ЗаказНаВП", ТекущиеДанные.Данные);
	ИначеЕсли ГруппировкаДанных = 1 И ТекущиеДанные.ЭтоНоменклатура Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Номенклатура", ТекущиеДанные.Номенклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Характеристика", ТекущиеДанные.Характеристика);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "ЗаказНаВП", ТекущиеДанные.ПолучитьРодителя().Данные);	
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Номенклатура", ТекущиеДанные.Номенклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Характеристика", ТекущиеДанные.Характеристика);	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "ЗаказНаВП", Неопределено, Ложь);
	КонецЕсли;

	Если ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Организация", Организация); 
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Организация", Организация);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Организация", Неопределено, Ложь); 
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Организация", Неопределено, Ложь); 
	КонецЕсли;    
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Подразделение", Подразделение);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Подразделение", Подразделение);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Подразделение", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Подразделение", Неопределено, Ложь);
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Номенклатура", ТекущиеДанные.Номенклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Характеристика", ТекущиеДанные.Характеристика);

КонецПроцедуры	

&НаКлиенте
Процедура ВыбратьСкладПолучательЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеремещения = Результат;
	ПараметрыПеремещения.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);	
	ПараметрыПеремещения.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
	ПараметрыПеремещения.Вставить("Серии", Новый Соответствие);
	ПараметрыПеремещения.Вставить("ИзРабочегоМестаМТО", Истина);
	
	Если ИспользоватьСерии Тогда
		ПолучитьСерииДляПеремещения(ПараметрыПеремещения);
	КонецЕсли;	
	
	Если ПараметрыПеремещения.Серии = Неопределено Тогда
		Возврат; // Была ошибка при получении серий.
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьПеремещениеТоваров", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыПеремещения);  
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента", ПараметрыФормы,,,,, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПеремещениеТоваров(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеПослеПеремещения(Результат.Документ);
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьСерииДляПеремещения(ПараметрыПеремещения)
	
	Если Не НоменклатураИспользуетСерии(ПараметрыПеремещения.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Склад КАК Склад
	|ПОМЕСТИТЬ втТовары";
	
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыПеремещения.Номенклатура);
	Запрос.УстановитьПараметр("Склад", ПараметрыПеремещения.СкладОтправитель);
	Запрос.УстановитьПараметр("Характеристика", ПараметрыПеремещения.Характеристика); 
	
	Запрос.Выполнить();
	
	ОстаткиСерий = ПолучитьОстаткиСерий(МенеджерВременныхТаблиц);

	ОсталосьРаспределить = ПараметрыПеремещения.Количество;
	Для Каждого Строка Из ОстаткиСерий Цикл
		Если ОсталосьРаспределить = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Распределяем = Мин(Строка.Количество, ОсталосьРаспределить);
		
		ПараметрыПеремещения.Серии.Вставить(Строка.Серия, Распределяем);
		
		ОсталосьРаспределить = ОсталосьРаспределить - Распределяем;
	КонецЦикла;	
	
	Если ОсталосьРаспределить > 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Недостаточно серийных номеров при резервировании товара:
			|Номенклатура - ""%1"",
			|Характеристика - ""%2"",
			|Склад - ""%3"".'"), 
			ПараметрыПеремещения.Номенклатура, ПараметрыПеремещения.Характеристика, ПараметрыПеремещения.СкладОтправитель));
			
		ПараметрыПеремещения.Серии = Неопределено;	
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры


&НаКлиенте
Процедура НачатьРезервирование(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗарезервироватьНоменклатуру(ДополнительныеПараметры.ИдентификаторСтрокиДерева);
		
		УстановитьОтборНаСвязанныеТаблицы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСообщениеОПревышенииМинимальногоОстатка(ИдентификаторСтрокиДерева)
	
	СообщениеОПревышении = "";
	
	СтрокаДерева = ДанныеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	Если ГруппировкаДанных = 0 Тогда
		
		Если СтрокаДерева.ЭтоНоменклатура Тогда 
			
			СкладыСПревышением = Новый Массив;
			
			СтрокиСкладов = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаСклад Из СтрокиСкладов Цикл  
				
				Если СтрокаСклад.РекомендованоКРезерву <> 0 И СтрокаСклад.МинОстаток <> 0 Тогда 
					
					ОстатокПослеРезерва = СтрокаСклад.СвободныйОстаток - СтрокаСклад.РекомендованоКРезерву; 
					Если СтрокаСклад.МинОстаток > ОстатокПослеРезерва Тогда
					СкладыСПревышением.Добавить(СтрШаблон("""%1""", СтрокаСклад.Данные));
					КонецЕсли;				
				КонецЕсли;	
			КонецЦикла; 
			
			КоличествоСкладовСПревышение = СкладыСПревышением.Количество();
			Если КоличествоСкладовСПревышение = 1 Тогда
				СообщениеОПревышении = СтрШаблон(
					НСтр("ru = 'При резервировании номенклатуры ""%1"" по складу ""%2"" 
					|свободный остаток станет меньше минимально установленного. Продолжить?'"), 
					СтрокаДерева.Данные,
					СтрСоединить(СкладыСПревышением, ", "));
			ИначеЕсли КоличествоСкладовСПревышение > 1 Тогда
				СообщениеОПревышении = СтрШаблон(
					НСтр("ru = 'При резервировании номенклатуры ""%1"" по складам ""%2"" 
					|свободный остаток станет меньше минимально установленного. Продолжить?'"), 
					СтрокаДерева.Данные,
					СтрСоединить(СкладыСПревышением, ", "));
			КонецЕсли; 
				
		ИначеЕсли СтрокаДерева.ЭтоСклад Тогда
			
			Если СтрокаДерева.РекомендованоКРезерву <> 0 И СтрокаДерева.МинОстаток <> 0 Тогда
				ОстатокПослеРезерва = СтрокаДерева.СвободныйОстаток - СтрокаДерева.РекомендованоКРезерву;
				Если СтрокаДерева.МинОстаток > ОстатокПослеРезерва Тогда
					СообщениеОПревышении = СтрШаблон(
						НСтр("ru = 'При резервировании номенклатуры ""%1"" по складу ""%2"" 
						|свободный остаток станет меньше минимально установленного. Продолжить?'"), 
						СтрокаДерева.Номенклатура,
						СтрокаДерева.Данные);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.ЭтоЗаказ Тогда
			
			СтрокаСклад = СтрокаДерева.ПолучитьРодителя(); 
			
			Если СтрокаДерева.РекомендованоКРезерву <> 0 И СтрокаСклад.МинОстаток <> 0 Тогда
				ОстатокПослеРезерва = СтрокаСклад.СвободныйОстаток - СтрокаДерева.РекомендованоКРезерву;
				Если СтрокаСклад.МинОстаток > ОстатокПослеРезерва Тогда
					СообщениеОПревышении = СтрШаблон(
						НСтр("ru = 'При резервировании номенклатуры ""%1"" по складу ""%2"" 
						|свободный остаток станет меньше минимально установленного. Продолжить?'"), 
						СтрокаСклад.Номенклатура,
						СтрокаСклад.Данные);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли; 	
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда	
		
		Если СтрокаДерева.ЭтоНоменклатура Тогда 
			
			Если СтрокаДерева.РекомендованоКРезерву <> 0 И СтрокаДерева.МинОстаток <> 0 Тогда
				
				ОстатокПослеРезерва = СтрокаДерева.СвободныйОстаток - СтрокаДерева.РекомендованоКРезерву;
				Если СтрокаДерева.МинОстаток > ОстатокПослеРезерва Тогда
					СообщениеОПревышении = СтрШаблон(
						НСтр("ru = 'При резервировании номенклатуры ""%1"" свободный остаток станет меньше минимально установленного. Продолжить?'"),
						СтрокаДерева.Данные);
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли СтрокаДерева.ЭтоЗаказ Тогда
			
			НоменклатураСПревышением = Новый Массив;
			
			СтрокиНоменклатур = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатур Цикл
				
				Если СтрокаНоменклатуры.РекомендованоКРезерву <> 0 И СтрокаНоменклатуры.МинОстаток <> 0 Тогда  
					
					ОстатокПослеРезерва = СтрокаНоменклатуры.СвободныйОстаток - СтрокаНоменклатуры.РекомендованоКРезерву;
					Если СтрокаНоменклатуры.МинОстаток > ОстатокПослеРезерва Тогда
						НоменклатураСПревышением.Добавить(СтрШаблон("""%1""", СтрокаНоменклатуры.Данные));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			
			КоличествоНоменклатурыСПревышением = НоменклатураСПревышением.Количество();
			Если КоличествоНоменклатурыСПревышением = 1 Тогда
				СообщениеОПревышении = СтрШаблон(
					НСтр("ru = 'При резервировании номенклатуры %1 свободный остаток станет меньше минимально установленного. Продолжить?'"),
					СтрСоединить(НоменклатураСПревышением, ", "));
			ИначеЕсли КоличествоНоменклатурыСПревышением > 1 Тогда  
				СообщениеОПревышении = СтрШаблон(
					НСтр("ru = 'При резервировании номенклатур %1 их свободный остаток станет меньше минимально установленного. Продолжить?'"),
					СтрСоединить(НоменклатураСПревышением, ", "));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СообщениеОПревышении;
	
КонецФункции


&НаСервере
Процедура ЗарезервироватьНоменклатуру(ИдентификаторСтрокиДерева)  
	
	СтрокаДерева = ДанныеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	
	ТоварыКРезерву = ТоварыКИзменениюРезерва(СтрокаДерева);	
	
	ТоварыЗарезервированные = СоздатьДокументыРезервирования(ТоварыКРезерву);
	
	ОбновитьДанныеПослеИзмененияРезервов(ТоварыЗарезервированные);
		
КонецПроцедуры

&НаСервере
Процедура ОтменитьРезервирование(ИдентификаторСтрокиДерева) 
	
	СтрокаДерева = ДанныеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	
	ТоварыКОтменеРезерва = ТоварыКИзменениюРезерва(СтрокаДерева, Истина);
	
	ТоварыСОтмененнымРезервом = СоздатьДокументыОтменыРезервирования(ТоварыКОтменеРезерва);
	
	ОбновитьДанныеПослеИзмененияРезервов(ТоварыСОтмененнымРезервом);
	
КонецПроцедуры

&НаСервере
Процедура СнятьПотребность(ИдентификаторСтрокиДерева) 
	
	СтрокаДерева = ДанныеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
		
	ПотребностьСнята = ОтменитьЗаказыНаВНутреннееПотребление(СтрокаДерева);
	
	Если ПотребностьСнята Тогда
		ОбновитьДанныеПослеСнятияПотребности(СтрокаДерева);
	КонецЕсли;
	  
КонецПроцедуры

&НаСервере
Процедура ЗарезервироватьНоменклатуруПоРемонту(ИдентификаторСтрокиДерева)
	
	СтрокаДерева = РемонтыДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);	
	
	ТоварыКРезерву = ТоварыКРезервуПоРемонту(СтрокаДерева.ID);
	
	ТоварыЗарезервированные = СоздатьДокументыРезервирования(ТоварыКРезерву, Истина);
	
	ОбновитьДанныеПослеИзмененияРезервов(ТоварыЗарезервированные);
	
	Если ТоварыКРезерву.Количество() = ТоварыЗарезервированные.Количество() Тогда
		ОбновитьРемонтыДеревоПослеРезерваПоРемонту(СтрокаДерева); 
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция СоздатьДокументыРезервирования(ТоварыКРезерву, ВыводитьСообщенияОЗарезервированныхПозициях = Ложь)
		
	Запрос = Новый Запрос;
	Если ИспользоватьСерии Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Организация КАК Организация,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Склад КАК Склад,
	|	Товары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Организация КАК Организация,
	|	втТовары.Подразделение КАК Подразделение,
	|	втТовары.Склад КАК Склад,
	|	втТовары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Количество КАК Количество
	|ИЗ
	|	втТовары КАК втТовары
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(Склад)
	|ПО
	|	ЗаказНаВнутреннееПотребление";
	
	Запрос.УстановитьПараметр("Товары", ТоварыКРезерву);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ИспользоватьСерии Тогда
		ОстаткиСерий = ПолучитьОстаткиСерий(МенеджерВременныхТаблиц); 
		СтруктураОтбораСерий = Новый Структура("Склад, Номенклатура, Характеристика");
		ОстаткиСерий.Индексы.Добавить("Склад, Номенклатура, Характеристика");
	КонецЕсли;
	
	СтруктураОтбораТоваров = Новый Структура("ЗаказНаВнутреннееПотребление");
	ТоварыКРезерву.Индексы.Добавить("ЗаказНаВнутреннееПотребление");
	
	ВыборкаПоЗаказам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаказам.Следующий() Цикл
		
		ДокументОбъект = Документы.торо_РезервПодВнутреннийЗаказ.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаПоЗаказам);
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
        ДокументОбъект.Дата = ТекущаяДата();
		
		СерийДостаточно = Истина;
		
		ВыборкаПоТоварам = ВыборкаПоЗаказам.Выбрать();
		Пока ВыборкаПоТоварам.Следующий() Цикл
						
			Если ИспользоватьСерии И ВыборкаПоТоварам.ИспользоватьСерии Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураОтбораСерий, ВыборкаПоТоварам);
				СерииНоменклатуры = ОстаткиСерий.НайтиСтроки(СтруктураОтбораСерий);
				
				ОсталосьСписать = ВыборкаПоТоварам.Количество;
				Для Каждого СерияНоменклатуры Из СерииНоменклатуры Цикл
					Если ОсталосьСписать = 0 Тогда
						Прервать;
					ИначеЕсли СерияНоменклатуры.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Списываем = Мин(ОсталосьСписать, СерияНоменклатуры.Количество);
					
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СерияНоменклатуры, "Номенклатура, Характеристика, Серия");
					НоваяСтрока.Количество = Списываем;
					НоваяСтрока.КоличествоУпаковок = Списываем;
					СерияНоменклатуры.Количество = СерияНоменклатуры.Количество - Списываем;
					ОсталосьСписать = ОсталосьСписать - Списываем;
				КонецЦикла;  
				
				Если ОсталосьСписать > 0 Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Недостаточно серийных номеров при резервировании товара:
						|Номенклатура - ""%1"",
						|Характеристика - ""%2"",
						|Склад - ""%3"".'"), 
						СерияНоменклатуры.НоменклатураПредставление, 
						СерияНоменклатуры.ХарактеристикаПредставление, 
						СерияНоменклатуры.СкладПредставление);
						
					СообщениеВыведено = Ложь;
					Для Каждого Сообщение Из ПолучитьСообщенияПользователю() Цикл 
						Если Сообщение.Текст = ТекстСообщения Тогда
							СообщениеВыведено = Истина;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					
					Если Не СообщениеВыведено Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
					КонецЕсли;
					
					СерийДостаточно = Ложь;	
				КонецЕсли;
			Иначе
				НоваяСтрока = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "Номенклатура, Характеристика, Количество");
				НоваяСтрока.КоличествоУпаковок = ВыборкаПоТоварам.Количество;
			КонецЕсли;	
		КонецЦикла;	
		
		Если СерийДостаточно И ДокументОбъект.Товары.Количество() > 0 Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'Не удалось зарезервировать товар под ""%1"". Подробнее в журнале регистрации.'"), 
					ВыборкаПоЗаказам.ЗаказНаВнутреннееПотребление));

				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка проведения при попытке резервирования из рабочего места специалиста по обеспечению.'"),
						УровеньЖурналаРегистрации.Ошибка,
						ДокументОбъект,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
				Продолжить;	
			КонецПопытки;
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораТоваров, ВыборкаПоЗаказам);
			ТоварыКРезервуПоОтбору = ТоварыКРезерву.НайтиСтроки(СтруктураОтбораТоваров);
			Для Каждого ТоварКРезерву Из ТоварыКРезервуПоОтбору Цикл 
				
				Если ВыводитьСообщенияОЗарезервированныхПозициях Тогда 
					Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ТоварКРезерву.Характеристика) Тогда
						ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
							НСтр("ru = 'Зарезервировано %1 ед. номенклатуры %2 [%3] на складе ""%4"" под ""%5"".'"), 
							ТоварКРезерву.Количество, ТоварКРезерву.Номенклатура, ТоварКРезерву.Характеристика,
							ТоварКРезерву.Склад, ТоварКРезерву.ЗаказНаВнутреннееПотребление));
					Иначе 
						ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
							НСтр("ru = 'Зарезервировано %1 ед. номенклатуры %2 на складе ""%3"" под ""%4"".'"), 
							ТоварКРезерву.Количество, ТоварКРезерву.Номенклатура,
							ТоварКРезерву.Склад, ТоварКРезерву.ЗаказНаВнутреннееПотребление))
					КонецЕсли;
				КонецЕсли;
				
				ТоварКРезерву.ДействиеВыполнено = Истина;		
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолучитьТоварыСИзменнымРезервом(ТоварыКРезерву);
	
КонецФункции	

&НаСервере
Функция СоздатьДокументыОтменыРезервирования(ТоварыКОтменеРезерва) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Склад КАК Склад,
	|	Товары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	|	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление.Организация КАК Организация,
	|	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление.Подразделение КАК Подразделение,
	|	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Серия КАК Серия,
	|	торо_РезервыНаСкладахОстатки.ДокументРезерв КАК ДокументРезерв,
	|	-торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	|	-торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			,
	|			(ЗаказНаВнутреннееПотребление, Склад, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					втТовары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|					втТовары.Склад КАК Склад,
	|					втТовары.Номенклатура КАК Номенклатура,
	|					втТовары.Характеристика КАК Характеристика
	|				ИЗ
	|					втТовары КАК втТовары)) КАК торо_РезервыНаСкладахОстатки
	|ИТОГИ
	|	МАКСИМУМ(Склад)
	|ПО
	|	ЗаказНаВнутреннееПотребление";	
	
	Запрос.УстановитьПараметр("Товары", ТоварыКОтменеРезерва);
	
	Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "торо_РезервыНаСкладахОстатки.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()); 
	КонецЕсли;	
	Если ИспользоватьСерии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Серия", "торо_РезервыНаСкладахОстатки.Серия");
	Иначе
		Запрос.УстановитьПараметр("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка()); 
	КонецЕсли;  
	
	СтруктураОтбораТоваров = Новый Структура("ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика");
	ТоварыКОтменеРезерва.Индексы.Добавить("ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоЗаказам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаказам.Следующий() Цикл
		
		ДокументОбъект = Документы.торо_РезервПодВнутреннийЗаказ.СоздатьДокумент();
        ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаПоЗаказам); 
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокументОбъект.ОтменаРезерва = Истина;
		
		ВыборкаПоТоварам = ВыборкаПоЗаказам.Выбрать();
		Пока ВыборкаПоТоварам.Следующий() Цикл 
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		КонецЦикла;	
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Не удалось отменить резервирование для ""%1"". Подробнее в журнале регистрации.'"), 
				ВыборкаПоЗаказам.ЗаказНаВнутреннееПотребление));
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка проведения при отмене резервирования из рабочего места специалиста по обеспечению.'"),
				УровеньЖурналаРегистрации.Ошибка,
				ДокументОбъект,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Продолжить;	
		КонецПопытки;
		
		ВыборкаПоТоварам.Сбросить();
		Пока ВыборкаПоТоварам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбораТоваров, ВыборкаПоТоварам);
			ТоварыКРезервуПоОтбору = ТоварыКОтменеРезерва.НайтиСтроки(СтруктураОтбораТоваров);
			
			СтрокаТовараПоОтбору = ТоварыКРезервуПоОтбору[0];
			СтрокаТовараПоОтбору.Количество = СтрокаТовараПоОтбору.Количество + ВыборкаПоТоварам.Количество;
			СтрокаТовараПоОтбору.ДействиеВыполнено = Истина;
		КонецЦикла;
	КонецЦикла;	
	
	Возврат ПолучитьТоварыСИзменнымРезервом(ТоварыКОтменеРезерва);

КонецФункции

&НаСервере
Функция ОтменитьЗаказыНаВНутреннееПотребление(СтрокаДерева)
	
	ОтменитьЗаказПолностью = Ложь;
	Если ГруппировкаДанных = 0 Тогда
		
		ЗаказНаВнутреннееПотребление = СтрокаДерева.Данные;
		Номенклатура = СтрокаДерева.Номенклатура;
		Характеристика = СтрокаДерева.Характеристика;
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Если СтрокаДерева.ЭтоЗаказ Тогда
			
			ЗаказНаВнутреннееПотребление = СтрокаДерева.Данные;
			ОтменитьЗаказПолностью = Истина;   
			
		ИначеЕсли СтрокаДерева.ЭтоНоменклатура Тогда
			
			ЗаказНаВнутреннееПотребление = СтрокаДерева.ПолучитьРодителя().Данные;
			Номенклатура = СтрокаДерева.Номенклатура;
			Характеристика = СтрокаДерева.Характеристика;
		КонецЕсли;
	КонецЕсли;	
	
	ДокументОбъект = ЗаказНаВнутреннееПотребление.ПолучитьОбъект();
	Если ОтменитьЗаказПолностью Тогда
		ТоварыКОтмене = ДокументОбъект.Товары;
	Иначе 
		ОтборПоТовару = Новый Структура;
		ОтборПоТовару.Вставить("Номенклатура", Номенклатура);
		ОтборПоТовару.Вставить("Характеристика", Характеристика); 
		
		ТоварыКОтмене = ДокументОбъект.Товары.НайтиСтроки(ОтборПоТовару);
	КонецЕсли; 
	
	Для Каждого Товар Из ТоварыКОтмене Цикл
		Товар.Отменено = Истина;
	КонецЦикла;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось снять потребность с ""%1"". Подробнее в журнале регистрации.'"), 
			ЗаказНаВнутреннееПотребление));

		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка проведения при попытке отмены потребности из рабочего места специалиста по обеспечению.'"),
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;	
	КонецПопытки;  
	
	Возврат Истина;
	
КонецФункции


&НаСервере
Процедура ОбновитьДанныеПослеИзмененияРезервов(ТоварыСИзмененнымРезервом)
	
	Если ТоварыСИзмененнымРезервом.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
		
	Если ГруппировкаДанных = 0 Тогда
		
		СтруктураОтбораДляНоменклатуры = Новый Структура("Номенклатура, Характеристика");
		СтруктураОтбораДляСклада = Новый Структура("Номенклатура, Характеристика, Склад");
		СтруктураОтбораПоЗаказу = Новый Структура("Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление");
		
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Номенклатура, Характеристика");
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Номенклатура, Характеристика, Склад");
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление");
		
		СтрокиНоменклатур = ДанныеДерево.ПолучитьЭлементы();
		Для Каждого СтрокаНоменклатура Из СтрокиНоменклатур Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораДляНоменклатуры, СтрокаНоменклатура);
			
			ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляНоменклатуры);
			ИзмененоРезерваПоНоменклатуре = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
			
			Если ИзмененоРезерваПоНоменклатуре = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаНоменклатура, ИзмененоРезерваПоНоменклатуре);
					
			СтрокиСкладов = СтрокаНоменклатура.ПолучитьЭлементы();
			Для Каждого СтрокаСклад Из СтрокиСкладов Цикл 
				
				ЗаполнитьЗначенияСвойств(СтруктураОтбораДляСклада, СтрокаСклад);
					СтруктураОтбораДляСклада.Склад = СтрокаСклад.Данные;	
				
				ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляСклада);
				ИзмененоРезерваПоСкладу = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
								
				Если ИзмененоРезерваПоСкладу = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаСклад, ИзмененоРезерваПоСкладу);
				
				СтрокиЗаказов = СтрокаСклад.ПолучитьЭлементы();
				Для Каждого СтрокаЗаказ Из СтрокиЗаказов Цикл 
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораПоЗаказу, СтрокаСклад);
					СтруктураОтбораПоЗаказу.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;
					
					ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораПоЗаказу);
					ИзмененоРезерваПоЗаказу = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
					
					Если ИзмененоРезерваПоЗаказу = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаЗаказ, ИзмененоРезерваПоЗаказу, Истина, ТоварыСИзмененнымРезервомПоОтбору[0].ЕстьСвязанныеДокументы);	
				КонецЦикла;	
			КонецЦикла;		
		КонецЦикла;	

	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		СтруктураОтбораДляСклада = Новый Структура("Склад");
		СтруктураОтбораДляЗаказа = Новый Структура("ЗаказНаВнутреннееПотребление");
		СтруктураОтбораДляНоменклатуры = Новый Структура("Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление"); 
		
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Склад");
		ТоварыСИзмененнымРезервом.Индексы.Добавить("ЗаказНаВнутреннееПотребление");
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление");
		
		СтрокиСкладов = ДанныеДерево.ПолучитьЭлементы();
		Для Каждого СтрокаСклад Из СтрокиСкладов Цикл
			
			СтруктураОтбораДляСклада.Склад = СтрокаСклад.Данные;	
			
			ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляСклада);
			ИзмененоРезерваПоСкладу = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
			
			Если ИзмененоРезерваПоСкладу = 0 Тогда
				Продолжить;
			КонецЕсли;
	
			СтрокиЗаказов = СтрокаСклад.ПолучитьЭлементы();
			Для Каждого СтрокаЗаказ Из СтрокиЗаказов Цикл
				
				СтруктураОтбораДляЗаказа.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;	
				
				ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляЗаказа);
				ИзмененоРезерваПоЗаказу = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
				
				Если ИзмененоРезерваПоЗаказу = 0 Тогда
					Продолжить; 
				КонецЕсли;
				
				ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаЗаказ, ИзмененоРезерваПоЗаказу, Истина, ТоварыСИзмененнымРезервомПоОтбору[0].ЕстьСвязанныеДокументы);
								
				СтрокиНоменклатур = СтрокаЗаказ.ПолучитьЭлементы();
				Для Каждого СтрокаНоменклатура Из СтрокиНоменклатур Цикл 
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДляНоменклатуры, СтрокаНоменклатура);
					СтруктураОтбораДляНоменклатуры.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;	
					
					ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляНоменклатуры);
					ИзмененоРезерваПоНоменклатуре = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
					
					Если ИзмененоРезерваПоНоменклатуре = 0 Тогда
						Продолжить;
					КонецЕсли;
	
					ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаНоменклатура, ИзмененоРезерваПоНоменклатуре,, ТоварыСИзмененнымРезервомПоОтбору[0].ЕстьСвязанныеДокументы);
										
					// Уменьшим свободный остаток по этой номенклатуре в соседних по ветке заказах.
					Для Каждого СтрокаСоседнийЗаказ Из СтрокиЗаказов Цикл
						Если СтрокаСоседнийЗаказ = СтрокаЗаказ Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокиСоседнихНоменклатур = СтрокаСоседнийЗаказ.ПолучитьЭлементы();
						Для Каждого СтрокаСоседняяНоменклатура Из СтрокиСоседнихНоменклатур Цикл
							Если Не (СтрокаСоседняяНоменклатура.Номенклатура = СтрокаНоменклатура.Номенклатура
								И СтрокаСоседняяНоменклатура.Характеристика = СтрокаНоменклатура.Характеристика) Тогда
								Продолжить;
							КонецЕсли;	
														
							СтрокаСоседняяНоменклатура.СвободныйОстаток = СтрокаСоседняяНоменклатура.СвободныйОстаток - ИзмененоРезерваПоНоменклатуре;	
						КонецЦикла;
					КонецЦикла;  
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
	ОбновитьЗависимыеПоказателиДанныеДерево();
	
	ОбновитьОбеспечениеВДеревеРемонтов();
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеПослеСнятияПотребности(СтрокаДерева)
	
	Если ГруппировкаДанных = 0 Тогда
		
		СтрокаСклад = СтрокаДерева.ПолучитьРодителя();
		СтрокаНоменклатура = СтрокаСклад.ПолучитьРодителя();
		
		СтрокаСклад.ПотребностьВЗаказе = СтрокаСклад.ПотребностьВЗаказе - СтрокаДерева.ПотребностьВЗаказе;
		СтрокаСклад.КОбеспечению = СтрокаСклад.КОбеспечению - СтрокаДерева.КОбеспечению;
		СтрокаСклад.ОсталосьОбеспечить = СтрокаСклад.ОсталосьОбеспечить - СтрокаДерева.ОсталосьОбеспечить;
		
		СтрокаНоменклатура.ПотребностьВЗаказе = СтрокаНоменклатура.ПотребностьВЗаказе - СтрокаДерева.ПотребностьВЗаказе;
		СтрокаНоменклатура.КОбеспечению = СтрокаНоменклатура.КОбеспечению - СтрокаДерева.КОбеспечению;
		СтрокаНоменклатура.ОсталосьОбеспечить = СтрокаНоменклатура.ОсталосьОбеспечить - СтрокаДерева.ОсталосьОбеспечить;
		
		ЭлементыСтрокиСклад = СтрокаСклад.ПолучитьЭлементы();
		
		ЭлементыСтрокиСклад.Удалить(СтрокаДерева);
		Если ЭлементыСтрокиСклад.Количество() = 0 Тогда
			
			ЭлементыСтрокиНоменклатура = СтрокаНоменклатура.ПолучитьЭлементы();
			ЭлементыСтрокиНоменклатура.Удалить(СтрокаСклад);
			
			Если ЭлементыСтрокиНоменклатура.Количество() = 0 Тогда
				ДанныеДерево.ПолучитьЭлементы().Удалить(СтрокаНоменклатура);
			КонецЕсли;	
		КонецЕсли;
			
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Если СтрокаДерева.ЭтоНоменклатура Тогда
						
			СтрокаЗаказ = СтрокаДерева.ПолучитьРодителя(); 
			
			СтрокаЗаказ.ПотребностьВЗаказе = СтрокаЗаказ.ПотребностьВЗаказе - СтрокаДерева.ПотребностьВЗаказе;
			СтрокаЗаказ.КОбеспечению = СтрокаЗаказ.КОбеспечению - СтрокаДерева.КОбеспечению;
			СтрокаЗаказ.ОсталосьОбеспечить = СтрокаЗаказ.ОсталосьОбеспечить -  СтрокаДерева.ОсталосьОбеспечить; 
			
			ЭлементыСтрокиЗаказ = СтрокаЗаказ.ПолучитьЭлементы();
			ЭлементыСтрокиЗаказ.Удалить(СтрокаДерева);
			
			Если ЭлементыСтрокиЗаказ.Количество() = 0 Тогда
				
				СтрокаСклад = СтрокаЗаказ.ПолучитьРодителя();
				ЭлементыСтрокиСклад = СтрокаСклад.ПолучитьЭлементы();
				ЭлементыСтрокиСклад.Удалить(СтрокаЗаказ);
				
				Если ЭлементыСтрокиСклад.Количество() = 0 Тогда
					ДанныеДерево.ПолучитьЭлементы().Удалить(СтрокаСклад);
				КонецЕсли;	
			КонецЕсли; 
			
		ИначеЕсли СтрокаДерева.ЭтоЗаказ Тогда 
			
			СтрокаСклад = СтрокаДерева.ПолучитьРодителя();
			ЭлементыСтрокиСклад = СтрокаСклад.ПолучитьЭлементы();
			ЭлементыСтрокиСклад.Удалить(СтрокаДерева);
			
			Если ЭлементыСтрокиСклад.Количество() = 0 Тогда
				ДанныеДерево.ПолучитьЭлементы().Удалить(СтрокаСклад);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	

	ОбновитьЗависимыеПоказателиДанныеДерево();
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеПослеЗаказаПоставщику(ЗаказПоставщикуСсылка) 
		
	ОбновитьСлужебнуюТаблицуЗаказыПоставщикам();    
	
	ЗаказыПоставщикам = ПолучитьИзВременногоХранилища(АдресЗаказовПоставщикам);
	ЗаказыПоставщикам.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	
	ОтборПоТоварам = Новый Структура;
	ОтборПоТоварам.Вставить("Номенклатура");
	ОтборПоТоварам.Вставить("Характеристика");
	ОтборПоТоварам.Вставить("Склад");
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			ЗаказаноВсегоПоНоменклатуре = 0;
			ЗаказаноКДатеПоНоменклатуре = 0;
			
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				ЗаказаноКДатеПоСкладу = 0;
				
				ОтборПоТоварам.Склад = СтрокаСклад.Данные; 
				ЗаполнитьЗначенияСвойств(ОтборПоТоварам, СтрокаСклад, "Номенклатура, Характеристика");
				ЗаказыПоставщикамПоОтбору = ЗаказыПоставщикам.НайтиСтроки(ОтборПоТоварам);
				
				СтрокаСклад.ЗаказВсего = ИтогПоМассивуСтрокТаблицыЗначений(ЗаказыПоставщикамПоОтбору, "Количество");
				
				Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
					
					СтрокаЗаказ.ЗаказНаДатуПотребности = 0;
					
					ОсталосьСписать = СтрокаЗаказ.ОсталосьОбеспечить - СтрокаЗаказ.РекомендованоКРезерву;
					Для Каждого ЗаказПоставщику Из ЗаказыПоставщикамПоОтбору Цикл 
						Если ОсталосьСписать = 0 Тогда
							Прервать;
						ИначеЕсли ЗаказПоставщику.Количество = 0 
							ИЛИ ЗаказПоставщику.ДатаПоставки > СтрокаЗаказ.ДатаПотребности Тогда
							Продолжить;
						КонецЕсли;	 
						
						Списываем = Мин(ОсталосьСписать, ЗаказПоставщику.Количество);  
						
						СтрокаЗаказ.ЗаказНаДатуПотребности = СтрокаЗаказ.ЗаказНаДатуПотребности + Списываем;
						ЗаказПоставщику.Количество = ЗаказПоставщику.Количество - Списываем;
						
						ОсталосьСписать = ОсталосьСписать - Списываем;
                    КонецЦикла;
					
					ЗаказаноКДатеПоСкладу = ЗаказаноКДатеПоСкладу + СтрокаЗаказ.ЗаказНаДатуПотребности;	
				КонецЦикла;
				
				СтрокаСклад.ЗаказНаДатуПотребности = ЗаказаноКДатеПоСкладу;
				
				ЗаказаноВсегоПоНоменклатуре = ЗаказаноВсегоПоНоменклатуре + СтрокаСклад.ЗаказВсего;
				ЗаказаноКДатеПоНоменклатуре = ЗаказаноКДатеПоНоменклатуре + СтрокаСклад.ЗаказНаДатуПотребности;
			КонецЦикла; 
			
			СтрокаНоменклатура.ЗаказВсего = ЗаказаноВсегоПоНоменклатуре;
			СтрокаНоменклатура.ЗаказНаДатуПотребности = ЗаказаноКДатеПоНоменклатуре;
		КонецЦикла;  
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			ОтборПоТоварам.Склад = СтрокаСклад.Данные;
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл	
				
					Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
						
						ЗаполнитьЗначенияСвойств(ОтборПоТоварам, СтрокаНоменклатура, "Номенклатура, Характеристика");
						ЗаказыПоставщикамПоОтбору = ЗаказыПоставщикам.НайтиСтроки(ОтборПоТоварам);	
						
						СтрокаНоменклатура.ЗаказВсего = ИтогПоМассивуСтрокТаблицыЗначений(ЗаказыПоставщикамПоОтбору, "Количество");
						
						ДатаПотребности = ?(ЗначениеЗаполнено(СтрокаНоменклатура.КрайнийСрокЗаказа), 
							СтрокаНоменклатура.КрайнийСрокЗаказа,
							Дата(3999, 12, 31, 23, 59, 59));
						СтрокаОтбор = СтрШаблон("Строка.ДатаПоставки <= '%1'", Формат(ДатаПотребности, "ДФ=ггггММддЧЧммсс"));	
						
						СтрокаНоменклатура.ЗаказНаДатуПотребности = ИтогПоМассивуСтрокТаблицыЗначений(ЗаказыПоставщикамПоОтбору, "Количество", СтрокаОтбор);
					КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьЗависимыеПоказателиДанныеДерево();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПеремещения(ПеремещениеТоваровСсылка) 
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПеремещениеТоваровСсылка, "Проведен") Тогда
		Возврат;
	КонецЕсли;	
	
	ОстаткиТоваров = ПолучитьОстаткиТоваров();
	ОстаткиТоваров.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	
	ОтборПоТоварам = Новый Структура;
	ОтборПоТоварам.Вставить("Номенклатура");
	ОтборПоТоварам.Вставить("Характеристика");
	ОтборПоТоварам.Вставить("Склад");
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			ОстатокПоНоменклатуре = 0;
			СвободныйОстатокПоНоменклатуре = 0;
			
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				ЗаполнитьЗначенияСвойств(ОтборПоТоварам, СтрокаСклад);
				ОтборПоТоварам.Склад = СтрокаСклад.Данные;
				ТоварыПоОтбору = ОстаткиТоваров.НайтиСтроки(ОтборПоТоварам);
				
				СтрокаСклад.ОстатокНаСкладе = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыПоОтбору, "Остаток");
				СтрокаСклад.СвободныйОстаток = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыПоОтбору, "СвободныйОстаток"); 
				
				ОстатокПоНоменклатуре = ОстатокПоНоменклатуре + СтрокаСклад.ОстатокНаСкладе;
				СвободныйОстатокПоНоменклатуре = СвободныйОстатокПоНоменклатуре + СтрокаСклад.СвободныйОстаток;		
			КонецЦикла;
			
			СтрокаНоменклатура.ОстатокНаСкладе = ОстатокПоНоменклатуре;
			СтрокаНоменклатура.СвободныйОстаток = СвободныйОстатокПоНоменклатуре;
		КонецЦикла;  
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл	
				
				Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
					
					ЗаполнитьЗначенияСвойств(ОтборПоТоварам, СтрокаНоменклатура);
					ОтборПоТоварам.Склад = СтрокаСклад.Данные;
					ТоварыПоОтбору = ОстаткиТоваров.НайтиСтроки(ОтборПоТоварам);
					
					СтрокаНоменклатура.ОстатокНаСкладе = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыПоОтбору, "Остаток");
					СтрокаНоменклатура.СвободныйОстаток = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыПоОтбору, "СвободныйОстаток"); 
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;

	ОбновитьЗависимыеПоказателиДанныеДерево();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеПоказателиДанныеДерево()
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			ИтогоРекомендованоКЗаказуПоНоменклатуре = 0;
			ИтогоРекомендованоКРезервуПоНоменклатуре = 0;
			
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				РекомендованоКРезервуПоСкладу = 0;
				СвободныйОстатокПоСкладу = СтрокаСклад.СвободныйОстаток;

				Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
					
					СтрокаЗаказ.РекомендованоКРезерву = Мин(СтрокаЗаказ.ОсталосьОбеспечить, СвободныйОстатокПоСкладу);
					СтрокаЗаказ.РекомендованоКЗаказу = СтрокаЗаказ.ОсталосьОбеспечить - СтрокаЗаказ.РекомендованоКРезерву - СтрокаЗаказ.ЗаказНаДатуПотребности;
					
					ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаЗаказ, Ложь, Ложь);
					
					СвободныйОстатокПоСкладу = СвободныйОстатокПоСкладу - СтрокаЗаказ.РекомендованоКРезерву;				
					РекомендованоКРезервуПоСкладу = РекомендованоКРезервуПоСкладу + СтрокаЗаказ.РекомендованоКРезерву;	
				КонецЦикла;	
				
				СтрокаСклад.РекомендованоКРезерву = РекомендованоКРезервуПоСкладу;
				СтрокаСклад.РекомендованоКЗаказу = СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву - СтрокаСклад.ЗаказНаДатуПотребности;
				
				ЗаказноПозжеПотребности = СтрокаСклад.ЗаказВсего - СтрокаСклад.ЗаказНаДатуПотребности;
				
				Если СтрокаСклад.РекомендованоКЗаказу > 0 Тогда // Не хватает свободного остатка.
					КомпенсацияДоМинимальногоОстатка = СтрокаСклад.МинОстаток - ЗаказноПозжеПотребности - (СтрокаСклад.СвободныйОстаток - СтрокаСклад.РекомендованоКРезерву);
				Иначе	
				    КомпенсацияДоМинимальногоОстатка = СтрокаСклад.МинОстаток - ЗаказноПозжеПотребности - СтрокаСклад.СвободныйОстаток;
				КонецЕсли;
								
				СтрокаСклад.РекомендованоКЗаказу = СтрокаСклад.РекомендованоКЗаказу + ?(КомпенсацияДоМинимальногоОстатка < 0, 0, КомпенсацияДоМинимальногоОстатка);
				
				ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаСклад,,, Ложь);
				
				ИтогоРекомендованоКЗаказуПоНоменклатуре = ИтогоРекомендованоКЗаказуПоНоменклатуре + СтрокаСклад.РекомендованоКЗаказу;
				ИтогоРекомендованоКРезервуПоНоменклатуре = ИтогоРекомендованоКРезервуПоНоменклатуре + СтрокаСклад.РекомендованоКРезерву;
			КонецЦикла; 
			
			СтрокаНоменклатура.РекомендованоКЗаказу = ИтогоРекомендованоКЗаказуПоНоменклатуре;
			СтрокаНоменклатура.РекомендованоКРезерву = ИтогоРекомендованоКРезервуПоНоменклатуре;
						
			ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаНоменклатура,, Ложь, Ложь);

		КонецЦикла;			
 		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		СписанныйСвободныйОстаток = Новый ТаблицаЗначений;
		СписанныйСвободныйОстаток.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		СписанныйСвободныйОстаток.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписанныйСвободныйОстаток.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		СписанныйСвободныйОстаток.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3))); 
		
		СписанныйСвободныйОстаток.Индексы.Добавить("Номенклатура, Характеристика, Склад");
		
		ЗаказыПоставщикам = ПолучитьИзВременногоХранилища(АдресЗаказовПоставщикам);
		ЗаказыПоставщикам.Индексы.Добавить("Номенклатура, Характеристика, Склад");
		
		ОтборПоТаблицам = Новый Структура;
		ОтборПоТаблицам.Вставить("Номенклатура");
		ОтборПоТаблицам.Вставить("Характеристика");
		ОтборПоТаблицам.Вставить("Склад");
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			ОтборПоТаблицам.Склад = СтрокаСклад.Данные;
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
				
				ИтогоРекомендуемыйЗаказПоЗаказу = 0; 
				ИтогоРекомендуемыйРезервПоЗаказу = 0;
				
				Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
					
                    // Расчет рекомендованного резерва.
					ЗаполнитьЗначенияСвойств(ОтборПоТаблицам, СтрокаНоменклатура);
					СписаныйОстаток = ИтогПоМассивуСтрокТаблицыЗначений(
						СписанныйСвободныйОстаток.НайтиСтроки(ОтборПоТаблицам), 
						"Количество");
					СвободныйОстаток = СтрокаНоменклатура.СвободныйОстаток - СписаныйОстаток;	

					СтрокаНоменклатура.РекомендованоКРезерву = Мин(СвободныйОстаток, СтрокаНоменклатура.ОсталосьОбеспечить);
					
					Если СтрокаНоменклатура.РекомендованоКРезерву > 0 Тогда 
						НоваяСтрока = СписанныйСвободныйОстаток.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура, "Номенклатура, Характеристика");
						НоваяСтрока.Склад = СтрокаСклад.Данные;
						НоваяСтрока.Количество = СтрокаНоменклатура.РекомендованоКРезерву;
					КонецЕсли;
					
					// Расчет рекомендованного заказа.
					ЗаполнитьЗначенияСвойств(ОтборПоТаблицам, СтрокаНоменклатура, "Номенклатура, Характеристика");
					ЗаказыПоставщикамПоОтбору = ЗаказыПоставщикам.НайтиСтроки(ОтборПоТаблицам);
					
					ДатаПотребности = ?(ЗначениеЗаполнено(СтрокаНоменклатура.КрайнийСрокЗаказа), 
						СтрокаНоменклатура.КрайнийСрокЗаказа,
						Дата(3999, 12, 31, 23, 59, 59));
					СтрокаОтбор = СтрШаблон("Строка.ДатаПоставки <= '%1'", Формат(ДатаПотребности, "ДФ=ггггММддЧЧммсс"));	
					 
					ЗаказаноКДате = ИтогПоМассивуСтрокТаблицыЗначений(ЗаказыПоставщикамПоОтбору, "Количество", СтрокаОтбор);
					
					СтрокаНоменклатура.РекомендованоКЗаказу = 
						СтрокаНоменклатура.ОсталосьОбеспечить - СтрокаНоменклатура.РекомендованоКРезерву - ЗаказаноКДате;
					
					ОсталосьСписать = СтрокаНоменклатура.РекомендованоКЗаказу;
					
					Для Каждого Строка Из ЗаказыПоставщикамПоОтбору Цикл
						Если ОсталосьСписать = 0 
							ИЛИ Строка.ДатаПоставки > ДатаПотребности Тогда 
							Прервать; // Сортировка по ДатеПоставки, можно прерывать.
						ИначеЕсли Строка.Количество = 0 Тогда
							Продолжить;
						КонецЕсли;		
						
						Списываем = Мин(Строка.Количество, ОсталосьСписать);
						Строка.Количество = Строка.Количество - Списываем;
						ОсталосьСписать = ОсталосьСписать = Списываем;
					КонецЦикла;
					
					ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаНоменклатура); 
					
					ИтогоРекомендуемыйЗаказПоЗаказу = ИтогоРекомендуемыйЗаказПоЗаказу + СтрокаНоменклатура.РекомендованоКЗаказу;
					ИтогоРекомендуемыйРезервПоЗаказу = ИтогоРекомендуемыйРезервПоЗаказу + СтрокаНоменклатура.РекомендованоКРезерву;
				КонецЦикла;
				
				СтрокаЗаказ.РекомендованоКЗаказу = ИтогоРекомендуемыйЗаказПоЗаказу;
				СтрокаЗаказ.РекомендованоКРезерву = ИтогоРекомендуемыйРезервПоЗаказу;
				
				ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаЗаказ,, Ложь);
			КонецЦикла; 
		КонецЦикла;			
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Процедура ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаДерева, ОбновитьФлагЗаказа = Истина, ОбновитьПереместить = Истина, ОбновитьСнятьПотребность = Истина)
	
	Если ОбновитьФлагЗаказа Тогда
		Если СтрокаДерева.РекомендованоКЗаказу = 0 Тогда
			СтрокаДерева.СкрытьФлагЗаказа = Истина;
		Иначе
			СтрокаДерева.СкрытьФлагЗаказа = Ложь;
		КонецЕсли;           
	КонецЕсли;
	
	Если ОбновитьСнятьПотребность Тогда
		Если СтрокаДерева.ПотребностьВЗаказе = СтрокаДерева.ОсталосьОбеспечить И НЕ СтрокаДерева.ЕстьСвязанныеДокументы Тогда 
			СтрокаДерева.СнятьПотребность = БиблиотекаКартинок.Очистить; 
		Иначе
			СтрокаДерева.СнятьПотребность = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьПереместить Тогда
		Если СтрокаДерева.СвободныйОстаток > 0 Тогда
			СтрокаДерева.Переместить = БиблиотекаКартинок.СтартБизнесПроцесса; 
		Иначе
			СтрокаДерева.Переместить = Неопределено;
		КонецЕсли;
	КонецЕсли;			
	
	Если СтрокаДерева.РекомендованоКРезерву > 0 Тогда 
		СтрокаДерева.СоздатьРезерв = БиблиотекаКартинок.ПереключитьАктивность;
	Иначе
		СтрокаДерева.СоздатьРезерв = Неопределено;
	КонецЕсли;     
	
	Если СтрокаДерева.Резерв > 0 Тогда
		СтрокаДерева.СнятьРезерв = БиблиотекаКартинок.Очистить; 
	Иначе
		СтрокаДерева.СнятьРезерв = Неопределено;
	КонецЕсли;   	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьОбеспечениеВДеревеРемонтов()
	
	ТаблицаОбеспечения = Новый ТаблицаЗначений;
	ТаблицаОбеспечения.Колонки.Добавить("ЗаказНаВП", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление"));
	ТаблицаОбеспечения.Колонки.Добавить("ОсталосьОбеспечить", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	ТаблицаОбеспечения.Колонки.Добавить("РекомендованоКРезерву", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
					
					НоваяСтрока = ТаблицаОбеспечения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказ);
					НоваяСтрока.ЗаказНаВП = СтрокаЗаказ.Данные;
				
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;  
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл	
				
				НоваяСтрока = ТаблицаОбеспечения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказ);
				НоваяСтрока.ЗаказНаВП = СтрокаЗаказ.Данные;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаОбеспечения.Свернуть("ЗаказНаВП", "ОсталосьОбеспечить, РекомендованоКРезерву");
	ТаблицаОбеспечения.Индексы.Добавить("ЗаказНаВП");
	
	Для Каждого СтрокаДатаРемонта Из РемонтыДерево.ПолучитьЭлементы() Цикл
		
		ОбеспеченоПоДате = Истина;
		
		Для Каждого СтрокаОР Из СтрокаДатаРемонта.ПолучитьЭлементы() Цикл
			
			ОбеспеченоПоОР = Истина;
			
			Для Каждого СтрокаРемонта Из СтрокаОР.ПолучитьЭлементы() Цикл
				
				СтрокаОбеспечения = ТаблицаОбеспечения.Найти(СтрокаРемонта.ЗаказНаВнутреннееПотребление, "ЗаказНаВП");
				Если СтрокаОбеспечения = Неопределено Тогда
					СтрокаРемонта.Обеспечено = Истина;
					СтрокаРемонта.СоздатьРезерв = Неопределено;
				Иначе	
				    СтрокаРемонта.Обеспечено = СтрокаОбеспечения.ОсталосьОбеспечить = 0;
					СтрокаРемонта.СоздатьРезерв = ?(СтрокаОбеспечения.РекомендованоКРезерву > 0, БиблиотекаКартинок.ПереключитьАктивность, Неопределено);
				КонецЕсли;	
				
				ОбеспеченоПоОР = ОбеспеченоПоОР И СтрокаРемонта.Обеспечено;	
			КонецЦикла;
			
			СтрокаОР.Обеспечено = ОбеспеченоПоОР;
			
			ОбеспеченоПоДате = ОбеспеченоПоДате И СтрокаОР.Обеспечено;
		КонецЦикла; 
		
		СтрокаДатаРемонта.Обеспечено = ОбеспеченоПоДате;
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере    
Процедура ОбновитьРемонтыДеревоПослеРезерваПоРемонту(СтрокаРемонта)
	
	СтрокаРемонта.Обеспечено = Истина;
	СтрокаРемонта.СоздатьРезерв = Неопределено;   
	
	СтрокаОР = СтрокаРемонта.ПолучитьРодителя();
	ЭлементыСтрокиОР = СтрокаОР.ПолучитьЭлементы();
	
	ОбеспеченоПоОР = Истина;
	Для Каждого СоседняяСтрокаРемонта Из ЭлементыСтрокиОР Цикл 
		Если НЕ СоседняяСтрокаРемонта.Обеспечено Тогда 
			ОбеспеченоПоОР = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтрокаОР.Обеспечено = ОбеспеченоПоОР;
	
	СтрокаДаты = СтрокаОР.ПолучитьРодителя();
	ЭлементыСтрокиДаты = СтрокаДаты.ПолучитьЭлементы();
	
	ОбеспеченоПоДате = Истина;
	Для Каждого СоседняяСтрокаДаты Из ЭлементыСтрокиДаты Цикл 
		Если НЕ СоседняяСтрокаРемонта.Обеспечено Тогда 
			ОбеспеченоПоДате = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтрокаОР.Обеспечено = ОбеспеченоПоДате;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТоварыИзДанныеДерево(КолонкаСклад = Ложь)
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
    Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Если КолонкаСклад Тогда
		Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл 
			
			Если КолонкаСклад Тогда
				
				Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСклад);	
					НоваяСтрока.Склад = СтрокаСклад.Данные;
				КонецЦикла;
			Иначе	
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
			КонецЕсли;
		КонецЦикла;	
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл	
				
				Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
					
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
					Если КолонкаСклад Тогда
						НоваяСтрока.Склад = СтрокаСклад.Данные;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	Если КолонкаСклад Тогда
		КолонкиСвертывания = "Номенклатура, Характеристика, Склад";
	Иначе
		КолонкиСвертывания = "Номенклатура, Характеристика";
	КонецЕсли;
	
	Товары.Свернуть(КолонкиСвертывания);
	
	Возврат Товары;
	
КонецФункции	

&НаСервере 
// Процедура получает остатки по товарам из "ДанныеДерево", а также 
// обновляет таблицу "ОстаткиТоваров".
//
Функция ПолучитьОстаткиТоваров()
	
	Товары = ПолучитьТоварыИзДанныеДерево(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ втРезервы
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					втТовары.Номенклатура,
	|					втТовары.Характеристика
	|				ИЗ
	|					втТовары КАК втТовары)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.ВНаличииОстаток КАК Количество
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					втТовары.Номенклатура,
	|					втТовары.Характеристика
	|				ИЗ
	|					втТовары КАК втТовары)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Склад КАК Склад,
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.МинимальныйОстаток КАК Количество,
	|	Регистр.ХарактеристикаНоменклатуры КАК Характеристика
	|ПОМЕСТИТЬ втМинимальныеОстатки
	|ИЗ
	|	РегистрСведений.торо_МинимальныеОстаткиНоменклатуры.СрезПоследних(
	|			,
	|			(Номенклатура, ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					втТовары.Номенклатура,
	|					втТовары.Характеристика
	|				ИЗ
	|					втТовары КАК втТовары)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ втЗаказыПоставщику
	|ИЗ
	|	РегистрНакопления.торо_ЗаказыПоставщику.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						втТовары.Номенклатура,
	|						втТовары.Характеристика
	|					ИЗ
	|						втТовары КАК втТовары)
	|				И &ОтборПоОрганизации
	|				И &ОтборПоПодразделению) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстатки.Номенклатура КАК Номенклатура,
	|	втОстатки.Характеристика КАК Характеристика,
	|	втОстатки.Количество КАК ОстатокНаСкладе,
	|	втОстатки.Склад КАК Склад,
	|	ЕСТЬNULL(втМинимальныеОстатки.Количество, 0) КАК МинОстаток,
	|	ЕСТЬNULL(втРезервы.Количество, 0) КАК Резерв,
	|	втОстатки.Количество - ЕСТЬNULL(втРезервы.Количество, 0) КАК СвободныйОстаток,
	|	ЕСТЬNULL(втЗаказыПоставщику.Количество, 0) КАК Заказано
	|ИЗ
	|	втОстатки КАК втОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО втОстатки.Номенклатура = втТовары.Номенклатура
	|			И втОстатки.Характеристика = втТовары.Характеристика
	|			И втОстатки.Склад = втТовары.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМинимальныеОстатки КАК втМинимальныеОстатки
	|		ПО (втМинимальныеОстатки.Номенклатура = втОстатки.Номенклатура)
	|			И (втМинимальныеОстатки.Характеристика = втОстатки.Характеристика)
	|			И (втМинимальныеОстатки.Склад = втОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервы КАК втРезервы
	|		ПО (втРезервы.Номенклатура = втОстатки.Номенклатура)
	|			И (втРезервы.Характеристика = втОстатки.Характеристика)
	|			И (втРезервы.Склад = втОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказыПоставщику КАК втЗаказыПоставщику
	|		ПО (втЗаказыПоставщику.Номенклатура = втОстатки.Номенклатура)
	|			И (втЗаказыПоставщику.Характеристика = втОстатки.Характеристика)
	|			И (втЗаказыПоставщику.Склад = втОстатки.Склад)
	|ГДЕ
	|	втТовары.Склад ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(втОстатки.Количество, 0) КАК Остаток,
	|	ЕСТЬNULL(втОстатки.Склад, 0) КАК Склад,
	|	ЕСТЬNULL(втОстатки.Количество, 0) - ЕСТЬNULL(втРезервы.Количество, 0) КАК СвободныйОстаток
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО втТовары.Номенклатура = втОстатки.Номенклатура
	|			И втТовары.Характеристика = втОстатки.Характеристика
	|			И втТовары.Склад = втОстатки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервы КАК втРезервы
	|		ПО (втРезервы.Номенклатура = втТовары.Номенклатура)
	|			И (втРезервы.Характеристика = втТовары.Характеристика)
	|			И (втРезервы.Склад = втОстатки.Склад)";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ЗаказПоставщику.Организация =  &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоПодразделению", "ЗаказПоставщику.Подразделение = &Подразделение"); 
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению", Истина);                                                                                                                                 
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОстаткиПоСкладам.Очистить();
	ОстаткиПоСкладам.Загрузить(РезультатЗапроса[5].Выгрузить());
	Для Каждого Строка Из ОстаткиПоСкладам Цикл 
		Если Строка.СвободныйОстаток > 0 Тогда 
			Строка.Переместить = БиблиотекаКартинок.СтартБизнесПроцесса;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатЗапроса[6].Выгрузить();
	
КонецФункции	

&НаСервере
Функция ПолучитьОстаткиСерий(МенеджерВременныхТаблиц) 
	
	Запрос = Новый Запрос;                                           
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =  "ВЫБРАТЬ
	|	втТовары.Склад КАК Склад,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТоварыДляСерий
	|ИЗ
	|	втТовары КАК втТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	втТовары.Склад,
	|	втТовары.Номенклатура,
	|	втТовары.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.Серия КАК Серия,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Количество
	|ПОМЕСТИТЬ втОстаткиПоСериям
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			(Склад, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					втТоварыДляСерий.Склад КАК Склад,
	|					втТоварыДляСерий.Номенклатура КАК Номенклатура,
	|					втТоварыДляСерий.Характеристика КАК Характеристика
	|				ИЗ
	|					втТоварыДляСерий КАК втТоварыДляСерий)) КАК ТоварыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	|	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	торо_РезервыНаСкладахОстатки.Серия КАК Серия,
	|	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	|	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втРезервыПоСериям
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			(Склад, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					втТоварыДляСерий.Склад КАК Склад,
	|					втТоварыДляСерий.Номенклатура КАК Номенклатура,
	|					втТоварыДляСерий.Характеристика КАК Характеристика
	|				ИЗ
	|					втТоварыДляСерий КАК втТоварыДляСерий)) КАК торо_РезервыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия,
	|	Характеристика,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстаткиПоСериям.Склад КАК Склад,
	|	втОстаткиПоСериям.Номенклатура КАК Номенклатура,
	|	втОстаткиПоСериям.Характеристика КАК Характеристика,
	|	втОстаткиПоСериям.Серия КАК Серия,
	|	втОстаткиПоСериям.Количество - ЕСТЬNULL(втРезервыПоСериям.Количество, 0) КАК Количество,
	|	втОстаткиПоСериям.Номенклатура.Представление КАК НоменклатураПредставление,
	|	втОстаткиПоСериям.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	втОстаткиПоСериям.Склад.Представление КАК СкладПредставление
	|ИЗ
	|	втОстаткиПоСериям КАК втОстаткиПоСериям
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервыПоСериям КАК втРезервыПоСериям
	|		ПО втОстаткиПоСериям.Серия = втРезервыПоСериям.Серия
	|			И втОстаткиПоСериям.Номенклатура = втРезервыПоСериям.Номенклатура
	|			И втОстаткиПоСериям.Склад = втРезервыПоСериям.Склад
	|			И втОстаткиПоСериям.Характеристика = втРезервыПоСериям.Характеристика
	|ГДЕ
	|	втОстаткиПоСериям.Количество - ЕСТЬNULL(втРезервыПоСериям.Количество, 0) > 0";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить();		
	
КонецФункции	

&НаСервере
Процедура ОбновитьСлужебнуюТаблицуЗаказыПоставщикам()
	
	ПозицииКОбновлению = ПолучитьТоварыИзДанныеДерево();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПозицииКОбновлению.Номенклатура КАК Номенклатура,
	|	ПозицииКОбновлению.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втПозицииКОбновлению
	|ИЗ
	|	&ПозицииКОбновлению КАК ПозицииКОбновлению
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ЗаказыПоставщикуОстатки.Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	торо_ЗаказыПоставщикуОстатки.Склад КАК Склад,
	|	торо_ЗаказыПоставщикуОстатки.КоличествоОстаток КАК Количество,
	|	торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику.ДатаПоставки КАК ДатаПоставки
	|ПОМЕСТИТЬ втЗаказыПоставщику
	|ИЗ
	|	РегистрНакопления.торо_ЗаказыПоставщику.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Потребность.Номенклатура,
	|						Потребность.Характеристика
	|					ИЗ
	|						втПозицииКОбновлению КАК Потребность)
	|				И &ОтборПоОрганизации
	|				И &ОтборПоПодразделению) КАК торо_ЗаказыПоставщикуОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыПоставщику.Номенклатура КАК Номенклатура,
	|	втЗаказыПоставщику.Характеристика КАК Характеристика,
	|	втЗаказыПоставщику.Склад КАК Склад,
	|	СУММА(втЗаказыПоставщику.Количество) КАК Количество,
	|	втЗаказыПоставщику.ДатаПоставки КАК ДатаПоставки
	|ИЗ
	|	втЗаказыПоставщику КАК втЗаказыПоставщику
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗаказыПоставщику.Номенклатура,
	|	втЗаказыПоставщику.Характеристика,
	|	втЗаказыПоставщику.Склад,
	|	втЗаказыПоставщику.ДатаПоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоставки";
	
	Запрос.УстановитьПараметр("ПозицииКОбновлению", ПозицииКОбновлению); 
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ЗаказПоставщику.Организация =  &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоПодразделению", "ЗаказПоставщику.Подразделение = &Подразделение"); 
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению", Истина);                                                                                                                                 
	КонецЕсли;      
    Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "торо_ЗаказыПоставщикуОстатки.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;

	ЗаказыПоставщикам = Запрос.Выполнить().Выгрузить();
	
	ПоместитьВоВременноеХранилище(ЗаказыПоставщикам, АдресЗаказовПоставщикам);
	
КонецПроцедуры

&НаСервере
Функция НоменклатураИспользуетСерии(Номенклатура)
		
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользоватьСерии");
	
КонецФункции


&НаСервере
Функция ТоварыКРезервуПоРемонту(ИдентификаторРемонта) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ID КАК ID,
	|	торо_ИнтеграцияДокументов.ДокументЕРП КАК ЗаказНаВнутреннееПотребление,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток КАК Количество
	|ПОМЕСТИТЬ Потребность
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки КАК ЗаказыНаВнутреннееПотреблениеОстатки
	|		ПО торо_ИнтеграцияДокументов.ДокументЕРП = ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ЗаказНаВнутреннееПотребление)
	|	И торо_ИнтеграцияДокументов.ID = &ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	|ПОМЕСТИТЬ ТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика,
	|					Потребность.Склад
	|				ИЗ
	|					Потребность)) КАК ТоварыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	|	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	|	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	|	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ТоварыНаРуках
	|ИЗ
	|	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад, ЗаказНаВнутреннееПотребление) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика,
	|					Потребность.Склад,
	|					Потребность.ЗаказНаВнутреннееПотребление
	|				ИЗ
	|					Потребность)) КАК торо_ТоварыНаРукахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	|	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ Резервы
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика,
	|					Потребность.Склад
	|				ИЗ
	|					Потребность)) КАК торо_РезервыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Потребность.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Потребность.Номенклатура КАК Номенклатура,
	|	Потребность.Характеристика КАК Характеристика,
	|	Потребность.Склад КАК Склад,
	|	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) - ЕСТЬNULL(ДругиеРезервы.КоличествоОстаток, 0) КАК СвободныйОстаток,
	|	Потребность.Количество - ЕСТЬNULL(НаРуках.КоличествоОстаток, 0) - ЕСТЬNULL(Зарезервировано.КоличествоОстаток, 0) КАК НадоЗарезервировать
	|ПОМЕСТИТЬ втТоварыКРезервуПредварительно
	|ИЗ
	|	Потребность КАК Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ПО Потребность.Номенклатура = ТоварыНаСкладах.Номенклатура
	|			И Потребность.Характеристика = ТоварыНаСкладах.Характеристика
	|			И Потребность.Склад = ТоварыНаСкладах.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК НаРуках
	|		ПО Потребность.ЗаказНаВнутреннееПотребление = НаРуках.ЗаказНаВнутреннееПотребление
	|			И Потребность.Номенклатура = НаРуках.Номенклатура
	|			И Потребность.Характеристика = НаРуках.Характеристика
	|			И Потребность.Склад = НаРуках.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Резервы КАК ДругиеРезервы
	|		ПО Потребность.ЗаказНаВнутреннееПотребление <> ДругиеРезервы.ЗаказНаВнутреннееПотребление
	|			И Потребность.Номенклатура = ДругиеРезервы.Номенклатура
	|			И Потребность.Характеристика = ДругиеРезервы.Характеристика
	|			И Потребность.Склад = ДругиеРезервы.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Резервы КАК Зарезервировано
	|		ПО Потребность.ЗаказНаВнутреннееПотребление = Зарезервировано.ЗаказНаВнутреннееПотребление
	|			И Потребность.Номенклатура = Зарезервировано.Номенклатура
	|			И Потребность.Характеристика = Зарезервировано.Характеристика
	|			И Потребность.Склад = Зарезервировано.Склад
	|ГДЕ
	|	Потребность.Количество - ЕСТЬNULL(НаРуках.КоличествоОстаток, 0) - ЕСТЬNULL(Зарезервировано.КоличествоОстаток, 0) > 0
	|	И ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) - ЕСТЬNULL(ДругиеРезервы.КоличествоОстаток, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыКРезервуПредварительно.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	втТоварыКРезервуПредварительно.Номенклатура КАК Номенклатура,
	|	втТоварыКРезервуПредварительно.Характеристика КАК Характеристика,
	|	втТоварыКРезервуПредварительно.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА втТоварыКРезервуПредварительно.СвободныйОстаток <= втТоварыКРезервуПредварительно.НадоЗарезервировать
	|			ТОГДА втТоварыКРезервуПредварительно.СвободныйОстаток
	|		ИНАЧЕ втТоварыКРезервуПредварительно.НадоЗарезервировать
	|	КОНЕЦ КАК Количество,
	|	ЛОЖЬ КАК ДействиеВыполнено,
	|	ВЫРАЗИТЬ(втТоварыКРезервуПредварительно.ЗаказНаВнутреннееПотребление КАК Документ.ЗаказНаВнутреннееПотребление).Организация КАК Организация,
	|	ВЫРАЗИТЬ(втТоварыКРезервуПредварительно.ЗаказНаВнутреннееПотребление КАК Документ.ЗаказНаВнутреннееПотребление).Подразделение КАК Подразделение
	|ИЗ
	|	втТоварыКРезервуПредварительно КАК втТоварыКРезервуПредварительно
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втТоварыКРезервуПредварительно.СвободныйОстаток <= втТоварыКРезервуПредварительно.НадоЗарезервировать
	|				ТОГДА втТоварыКРезервуПредварительно.СвободныйОстаток
	|			ИНАЧЕ втТоварыКРезервуПредварительно.НадоЗарезервировать
	|		КОНЕЦ > 0";
	
	Запрос.УстановитьПараметр("ID", ИдентификаторРемонта);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаСервере
Функция ТоварыКИзменениюРезерва(СтрокаДерева, ОтменаРезервирования = Ложь)
	
	Товары = Новый ТаблицаЗначений;
		
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("ЗаказНаВнутреннееПотребление", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление"));	
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
    Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("ДействиеВыполнено", Новый ОписаниеТипов("Булево"));
	
	Если ОтменаРезервирования Тогда
		ИмяКоличестваРезерва = "Резерв";
	Иначе
		ИмяКоличестваРезерва = "РекомендованоКРезерву";
		Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
		Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	Если ГруппировкаДанных = 0 Тогда
		
		Если СтрокаДерева.ЭтоНоменклатура Тогда
			
			СтрокиСкладов = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаСклад Из СтрокиСкладов Цикл
				
				Если СтрокаСклад[ИмяКоличестваРезерва] = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				СтрокиЗаказов = СтрокаСклад.ПолучитьЭлементы();
				Для Каждого СтрокаЗаказ Из СтрокиЗаказов Цикл
					Если СтрокаЗаказ[ИмяКоличестваРезерва] = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаЗаказ,, ОтменаРезервирования, ИмяКоличестваРезерва);	
				КонецЦикла;	
			КонецЦикла;	
			
		ИначеЕсли СтрокаДерева.ЭтоСклад Тогда
			
			СтрокиЗаказов = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаЗаказ Из СтрокиЗаказов Цикл
				Если СтрокаЗаказ[ИмяКоличестваРезерва] = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаДерева, СтрокаЗаказ,, ОтменаРезервирования, ИмяКоличестваРезерва);		
			КонецЦикла;		
			
		ИначеЕсли СтрокаДерева.ЭтоЗаказ Тогда
			
			СтрокаСклад = СтрокаДерева.ПолучитьРодителя();
			
			ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаДерева,, ОтменаРезервирования, ИмяКоличестваРезерва);
		КонецЕсли;	
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Если СтрокаДерева.ЭтоНоменклатура Тогда
			
			СтрокаЗаказ = СтрокаДерева.ПолучитьРодителя();
			СтрокаСклад = СтрокаЗаказ.ПолучитьРодителя();
						
			ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаЗаказ, СтрокаДерева, ОтменаРезервирования, ИмяКоличестваРезерва);

		ИначеЕсли СтрокаДерева.ЭтоЗаказ Тогда
			
			СтрокиНоменклатур = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаНоменклатура Из СтрокиНоменклатур Цикл
				Если СтрокаНоменклатура[ИмяКоличестваРезерва] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаСклад = СтрокаДерева.ПолучитьРодителя();
				
				ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаДерева, СтрокаНоменклатура, ОтменаРезервирования, ИмяКоличестваРезерва);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Товары;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаЗаказ, СтрокаНоменклатура = Неопределено, ОтменаРезервирования, ИмяКоличестваРезерва)
	
	НовыйТовар = Товары.Добавить();
	НовыйТовар.Склад = СтрокаСклад.Данные;
	НовыйТовар.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;
 	
	Если ГруппировкаДанных = 0 Тогда
		СтрокаСКоличеством = СтрокаЗаказ;	
	ИначеЕсли ГруппировкаДанных = 1 Тогда 
		СтрокаСКоличеством = СтрокаНоменклатура;
	КонецЕсли;	
	
	НовыйТовар.Номенклатура = СтрокаСКоличеством.Номенклатура;
	НовыйТовар.Характеристика = СтрокаСКоличеством.Характеристика;
	
	Если Не ОтменаРезервирования Тогда	
		НовыйТовар.Количество = СтрокаСКоличеством[ИмяКоличестваРезерва]; 
		НовыйТовар.Организация = СтрокаЗаказ.Организация;
		НовыйТовар.Подразделение =  СтрокаЗаказ.Подразделение;
	КонецЕсли;	
		
КонецПроцедуры					

&НаСервере
Функция ПолучитьТоварыСИзменнымРезервом(ТоварыКИзменениюРезерва)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Склад КАК Склад,
	|	Товары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Товары.ДействиеВыполнено КАК ДействиеВыполнено,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТоварыКИзменениюРезерва КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Склад КАК Склад,
	|	втТовары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Количество КАК Количество
	|ПОМЕСТИТЬ втТоварыСИзмененнымРезервом
	|ИЗ
	|	втТовары КАК втТовары
	|ГДЕ
	|	втТовары.ДействиеВыполнено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВнутреннееПотреблениеТоваров.ЗаказНаВнутреннееПотребление КАК Заказ
	|ПОМЕСТИТЬ втЗаказыСоСвязями
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.ЗаказНаВнутреннееПотребление В
	|			(ВЫБРАТЬ
	|				втТоварыСИзмененнымРезервом.ЗаказНаВнутреннееПотребление
	|			ИЗ
	|				втТоварыСИзмененнымРезервом)
	|	И ВнутреннееПотреблениеТоваров.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РезервыНаСкладах.ЗаказНаВнутреннееПотребление
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			,
	|			ЗаказНаВнутреннееПотребление В
	|				(ВЫБРАТЬ
	|					втТоварыСИзмененнымРезервом.ЗаказНаВнутреннееПотребление
	|				ИЗ
	|					втТоварыСИзмененнымРезервом)) КАК РезервыНаСкладах
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление
	|ИЗ
	|	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	|			,
	|			ЗаказНаВнутреннееПотребление В
	|				(ВЫБРАТЬ
	|					втТоварыСИзмененнымРезервом.ЗаказНаВнутреннееПотребление
	|				ИЗ
	|					втТоварыСИзмененнымРезервом)) КАК ТоварыНаРукахОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗакрытиеЗаказаНаВнутреннееПотребление.ЗаказНаВнутреннееПотребление
	|ИЗ
	|	Документ.торо_ЗакрытиеЗаказаНаВнутреннееПотребление КАК ЗакрытиеЗаказаНаВнутреннееПотребление
	|ГДЕ
	|	ЗакрытиеЗаказаНаВнутреннееПотребление.ЗаказНаВнутреннееПотребление В
	|			(ВЫБРАТЬ
	|				втТоварыСИзмененнымРезервом.ЗаказНаВнутреннееПотребление
	|			ИЗ
	|				втТоварыСИзмененнымРезервом)
	|	И ЗакрытиеЗаказаНаВнутреннееПотребление.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыСИзмененнымРезервом.Склад КАК Склад,
	|	втТоварыСИзмененнымРезервом.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	втТоварыСИзмененнымРезервом.Номенклатура КАК Номенклатура,
	|	втТоварыСИзмененнымРезервом.Характеристика КАК Характеристика,
	|	втТоварыСИзмененнымРезервом.Количество КАК Количество,
	|	НЕ втЗаказыСоСвязями.Заказ ЕСТЬ NULL КАК ЕстьСвязанныеДокументы
	|ИЗ
	|	втТоварыСИзмененнымРезервом КАК втТоварыСИзмененнымРезервом
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказыСоСвязями КАК втЗаказыСоСвязями
	|		ПО втТоварыСИзмененнымРезервом.ЗаказНаВнутреннееПотребление = втЗаказыСоСвязями.Заказ";	
	
	Запрос.УстановитьПараметр("ТоварыКИзменениюРезерва", ТоварыКИзменениюРезерва);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаСервере 
Процедура ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаДанныеДерево, ЗарезервированоПоСтроке, ИсключитьОстаток = Ложь, ЕстьСвязанныеДокументы = Неопределено)
	
	СтрокаДанныеДерево.ОсталосьОбеспечить = СтрокаДанныеДерево.ОсталосьОбеспечить - ЗарезервированоПоСтроке;
	СтрокаДанныеДерево.Резерв = СтрокаДанныеДерево.Резерв + ЗарезервированоПоСтроке;	
	
	Если Не ИсключитьОстаток Тогда
		СтрокаДанныеДерево.СвободныйОстаток = СтрокаДанныеДерево.СвободныйОстаток - ЗарезервированоПоСтроке;
	КонецЕсли;
	
	Если ЕстьСвязанныеДокументы <> Неопределено Тогда
		СтрокаДанныеДерево.ЕстьСвязанныеДокументы = ЕстьСвязанныеДокументы;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ИтогПоМассивуСтрокТаблицыЗначений(МассивСтрок, Колонка, СтрокаОтбор = Неопределено)
	
	Результат = 0;
	Для Каждого Строка Из МассивСтрок Цикл 
		Если СтрокаОтбор <> Неопределено И Не Вычислить(СтрокаОтбор) Тогда
			Продолжить;
		КонецЕсли;	
		Результат = Результат + Строка[Колонка];
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	
	
&НаСервере
Функция АдресДанныхДляЗаказовПоставщикам()
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3))); 
	ТаблицаТоваров.Колонки.Добавить("КомпенсацияДоМинимальногоОстатка", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("ДатаПоставки", Новый ОписаниеТипов("Дата"));
	ТаблицаТоваров.Колонки.Добавить("СпособОбеспеченияПотребностей", Новый ОписаниеТипов("СправочникСсылка.СпособыОбеспеченияПотребностей"));
	ТаблицаТоваров.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));
	
	ТаблицаЗаказовНаВП = Новый ТаблицаЗначений;
	ТаблицаЗаказовНаВП.Колонки.Добавить("ЗаказНаВП", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление"));
	ТаблицаЗаказовНаВП.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ТаблицаЗаказовНаВП.Колонки.Добавить("ИдентификаторТовара", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Если СтрокаНоменклатура.СоздатьЗаказ Тогда
								
				Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
					
					Если СтрокаСклад.СоздатьЗаказ Тогда  
						
						НоваяСтрокаТовара = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаСклад);
						НоваяСтрокаТовара.Склад = СтрокаСклад.Данные;
						НоваяСтрокаТовара.Количество = СтрокаСклад.РекомендованоКЗаказу; 
						НоваяСтрокаТовара.Идентификатор = Строка(Новый УникальныйИдентификатор);
						
						РекомендованоКЗаказуПоЗаказам = 0;
						
						Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
							
							Если СтрокаЗаказ.РекомендованоКЗаказу > 0 Тогда 
								НоваяСтрокаЗаказа = ТаблицаЗаказовНаВП.Добавить();
								НоваяСтрокаЗаказа.ЗаказНаВП = СтрокаЗаказ.Данные; 
								НоваяСтрокаЗаказа.Количество = СтрокаЗаказ.РекомендованоКЗаказу;
								НоваяСтрокаЗаказа.ИдентификаторТовара = НоваяСтрокаТовара.Идентификатор;
							КонецЕсли;
							
							РекомендованоКЗаказуПоЗаказам = РекомендованоКЗаказуПоЗаказам + СтрокаЗаказ.РекомендованоКЗаказу;
						КонецЦикла;
						
						НоваяСтрокаТовара.КомпенсацияДоМинимальногоОстатка = СтрокаСклад.РекомендованоКЗаказу - РекомендованоКЗаказуПоЗаказам;
					КонецЕсли;
					СтрокаСклад.СоздатьЗаказ = Ложь;
				КонецЦикла;
				СтрокаНоменклатура.СоздатьЗаказ = Ложь;
			КонецЕсли;
		КонецЦикла;  
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		СтруктураПоискаДублей = Новый Структура;
		СтруктураПоискаДублей.Вставить("Номенклатура");
		СтруктураПоискаДублей.Вставить("Характеристика");
		СтруктураПоискаДублей.Вставить("Склад");
		
		ТаблицаТоваров.Индексы.Добавить("Номенклатура, Характеристика, Склад");
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			СтруктураПоискаДублей.Склад = СтрокаСклад.Данные;
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл	
				
				Если СтрокаЗаказ.СоздатьЗаказ Тогда
										
					Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
						
						Если СтрокаНоменклатура.СоздатьЗаказ Тогда
							
							ЗаполнитьЗначенияСвойств(СтруктураПоискаДублей, СтрокаНоменклатура, "Номенклатура, Характеристика");
							ТаблицаТоваровПоОтбору = ТаблицаТоваров.НайтиСтроки(СтруктураПоискаДублей);							
							
							Если ТаблицаТоваровПоОтбору.Количество() > 0 Тогда
								НоваяСтрокаТовар = ТаблицаТоваровПоОтбору[0];
								НоваяСтрокаТовар.Количество = НоваяСтрокаТовар.Количество + СтрокаНоменклатура.РекомендованоКЗаказу;
								НоваяСтрокаТовар.ДатаПоставки = Мин(НоваяСтрокаТовар.ДатаПоставки, СтрокаНоменклатура.ДатаПоставки);
							Иначе
								НоваяСтрокаТовар = ТаблицаТоваров.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаТовар, СтрокаНоменклатура);
								НоваяСтрокаТовар.Склад = СтрокаСклад.Данные;
								НоваяСтрокаТовар.КомпенсацияДоМинимальногоОстатка = СтрокаНоменклатура.МинОстаток - (СтрокаНоменклатура.ЗаказВсего - СтрокаНоменклатура.ЗаказНаДатуПотребности); 
								НоваяСтрокаТовар.Идентификатор = Строка(Новый УникальныйИдентификатор); 
								НоваяСтрокаТовар.Количество = СтрокаНоменклатура.РекомендованоКЗаказу + НоваяСтрокаТовар.КомпенсацияДоМинимальногоОстатка;
							КонецЕсли;	
											
							НоваяСтрокаЗаказ = ТаблицаЗаказовНаВП.Добавить();
							НоваяСтрокаЗаказ.ЗаказНаВП = СтрокаЗаказ.Данные; 
							НоваяСтрокаЗаказ.Количество = СтрокаНоменклатура.РекомендованоКЗаказу;
							НоваяСтрокаЗаказ.ИдентификаторТовара = НоваяСтрокаТовар.Идентификатор;
							
							СтрокаНоменклатура.СоздатьЗаказ = Ложь;
						КонецЕсли;
					КонецЦикла;
					СтрокаЗаказ.СоздатьЗаказ = Ложь;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла; 
	КонецЕсли;

	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ДанныеДляЗаказов = Новый Структура;
	ДанныеДляЗаказов.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	ДанныеДляЗаказов.Вставить("ПотребностиПоЗаказамНаВП", ТаблицаЗаказовНаВП);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеДляЗаказов, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти
