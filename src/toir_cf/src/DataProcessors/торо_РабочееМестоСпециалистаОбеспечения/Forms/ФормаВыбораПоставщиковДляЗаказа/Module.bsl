#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("АдресХранилища") Тогда
	    Возврат;
	КонецЕсли;
	
	ОбновитьДанные(Параметры.АдресХранилища);
	
	Элементы.ГруппаМинимальныйОстатокПоСтатистике.Видимость = ПолучитьФункциональнуюОпцию("торо_УчитыватьСтатистикуПотребления");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбора" Тогда
	    ИзменитьПоставщикаНаСервере(ВыбранноеЗначение);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЗаказы(Команда) 
	
	ИдентификаторФормыВладельца = Неопределено;
	Если ЭтотОбъект.ВладелецФормы <> Неопределено 
		И ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИдентификаторФормыВладельца = ЭтотОбъект.ВладелецФормы.УникальныйИдентификатор;
	КонецЕсли;	
		
	АдресаХранилищ = ПодготовитьДанныеЗаказовПоставщикам(ИдентификаторФормыВладельца);
	
	Для каждого АдресХранилища Из АдресаХранилищ Цикл
		ЗначенияЗаполнения = Новый Структура("ИзРабочегоМестаМТО, АдресХранилища", Истина, АдресХранилища);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.торо_ЗаказПоставщику.Форма.ФормаДокумента", ПараметрыФормы,, Новый УникальныйИдентификатор());
	КонецЦикла;
	
	Закрыть(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоставщика(Команда) 
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора",, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоставщика(Команда)
	
	ИзменитьПоставщикаНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоМаксимуму(Команда)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поставщик",ТекущиеДанные.Поставщик);
		Если ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда
			ПараметрыОтбора.Вставить("ДатаПоставки",ТекущиеДанные.ДатаПоставки);
		КонецЕсли;
		НайденныеСтроки = НоменклатураЗаказовПоставщикам.НайтиСтроки(ПараметрыОтбора);
		СписокНоменклатуры = Новый СписокЗначений;
		
		Для Каждого Строка из НайденныеСтроки Цикл
			СписокНоменклатуры.Добавить(Строка.Номенклатура);
		КонецЦикла;
		
		РасчитатьСтатистику("МАКСИМУМ",ТекущиеДанные.ДатаПоставки,СписокНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоМинимуму(Команда)
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поставщик",ТекущиеДанные.Поставщик);
		Если ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда
			ПараметрыОтбора.Вставить("ДатаПоставки",ТекущиеДанные.ДатаПоставки);
		КонецЕсли;
		НайденныеСтроки = НоменклатураЗаказовПоставщикам.НайтиСтроки(ПараметрыОтбора);
		СписокНоменклатуры = Новый СписокЗначений;
		
		Для Каждого Строка из НайденныеСтроки Цикл
			СписокНоменклатуры.Добавить(Строка.Номенклатура);
		КонецЦикла;
		
		РасчитатьСтатистику("МИНИМУМ",ТекущиеДанные.ДатаПоставки,СписокНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоСреднему(Команда)
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поставщик",ТекущиеДанные.Поставщик);
		Если ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда
			ПараметрыОтбора.Вставить("ДатаПоставки",ТекущиеДанные.ДатаПоставки);
		КонецЕсли;
		НайденныеСтроки = НоменклатураЗаказовПоставщикам.НайтиСтроки(ПараметрыОтбора);
		СписокНоменклатуры = Новый СписокЗначений;
		
		Для Каждого Строка из НайденныеСтроки Цикл
			СписокНоменклатуры.Добавить(Строка.Номенклатура);
		КонецЦикла;
		
		РасчитатьСтатистику("СРЕДНЕЕ",ТекущиеДанные.ДатаПоставки,СписокНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоПрошломуГоду(Команда)
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поставщик",ТекущиеДанные.Поставщик);
		Если ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда
			ПараметрыОтбора.Вставить("ДатаПоставки",ТекущиеДанные.ДатаПоставки);
		КонецЕсли;
		НайденныеСтроки = НоменклатураЗаказовПоставщикам.НайтиСтроки(ПараметрыОтбора);
		СписокНоменклатуры = Новый СписокЗначений;
		
		Для Каждого Строка из НайденныеСтроки Цикл
			СписокНоменклатуры.Добавить(Строка.Номенклатура);
		КонецЦикла;
		
		РасчитатьСтатистикуПоПрошломуГоду(Ложь, ТекущиеДанные.ДатаПоставки, СписокНоменклатуры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоПрошломуГодуССтраховкой(Команда)
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поставщик",ТекущиеДанные.Поставщик);
		Если ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда
			ПараметрыОтбора.Вставить("ДатаПоставки",ТекущиеДанные.ДатаПоставки);
		КонецЕсли;
		НайденныеСтроки = НоменклатураЗаказовПоставщикам.НайтиСтроки(ПараметрыОтбора);
		СписокНоменклатуры = Новый СписокЗначений;
		
		Для Каждого Строка из НайденныеСтроки Цикл
			СписокНоменклатуры.Добавить(Строка.Номенклатура);
		КонецЦикла;
		
		РасчитатьСтатистикуПоПрошломуГоду(Истина, ТекущиеДанные.ДатаПоставки, СписокНоменклатуры);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоставщики

&НаКлиенте
Процедура ПоставщикиПриАктивизацииСтроки(Элемент)
	
	Поставщик = Неопределено;
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
	    Поставщик = ТекущиеДанные.Поставщик;
	КонецЕсли;
	
	Элементы.НоменклатураЗаказовПоставщикам.ОтборСтрок = Новый ФиксированнаяСтруктура("Поставщик", Поставщик);
	
	Если Элементы.НоменклатураЗаказовПоставщикам.ТекущиеДанные <> Неопределено Тогда
		Элементы.НоменклатураЗаказовПоставщикам.ТекущаяСтрока = Элементы.НоменклатураЗаказовПоставщикам.ТекущиеДанные.ПолучитьИдентификатор();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНоменклатураЗаказовПоставщикам

&НаКлиенте
Процедура НоменклатураЗаказовПоставщикамПриАктивизацииСтроки(Элемент) 
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ДоступностьКоманд = ДоступноИзменениеПоставщика();
	Элементы.НоменклатураЗаказовПоставщикамИзменитьПоставщика.Доступность = ДоступностьКоманд;
	Элементы.НоменклатураЗаказовПоставщикамОчиститьПоставщика.Доступность = ДоступностьКоманд;
	
	Если ТекущиеДанные <> Неопределено Тогда  
		Элементы.РасшифровкаПотребностей.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторТовара", ТекущиеДанные.Идентификатор);
	Иначе 
		Элементы.РасшифровкаПотребностей.ОтборСтрок = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЗаказовПоставщикамПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина; 
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЗаказовПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	ТекущиеДанные = Элементы.НоменклатураЗаказовПоставщикам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(Поле.Имя, "НоменклатураЗаказовПоставщикам", "");
	
	Если ИмяРеквизита = "Количество" Тогда
	    Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные[ИмяРеквизита]); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПотребностей

&НаКлиенте
Процедура РасшифровкаПотребностейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РасшифровкаПотребностей.ТекущиеДанные;	
	
	Если Поле.Имя = "РасшифровкаПотребностейПотребность"
		И ТипЗнч(ТекущиеДанные.Потребность) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		ПоказатьЗначение(, ТекущиеДанные.Потребность); 	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДанные(АдресВходныхДанных)
	
	ВходныеДанные = ПолучитьИзВременногоХранилища(АдресВходныхДанных);
	УдалитьИзВременногоХранилища(АдресВходныхДанных); 
		
	ТаблицаТоваров = ВходныеДанные.ТаблицаТоваров; 
	ТаблицаПотребностей = ВходныеДанные.ПотребностиПоЗаказамНаВП;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.КомпенсацияДоМинимальногоОстатка КАК КомпенсацияДоМинимальногоОстатка,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.ДатаПоставки КАК ДатаПоставки,
	|	ТаблицаТоваров.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ТаблицаТоваров.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОбеспеченияПотребностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПотребностей.ЗаказНаВП КАК ЗаказНаВП,
	|	ТаблицаПотребностей.Количество КАК Количество,
	|	ТаблицаПотребностей.ИдентификаторТовара КАК ИдентификаторТовара
	|ПОМЕСТИТЬ втТаблицаПотребностей
	|ИЗ
	|	&ТаблицаПотребностей КАК ТаблицаПотребностей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	втТаблицаТоваров.Характеристика КАК Характеристика,
	|	втТаблицаТоваров.Количество КАК Количество,
	|	втТаблицаТоваров.Склад КАК Склад,
	|	втТаблицаТоваров.ДатаПоставки КАК ДатаПоставки,
	|	втТаблицаТоваров.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ЕСТЬNULL(СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
	|	ВЫБОР
	|		КОГДА СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноИзменениеПоставщика,
	|	втТаблицаТоваров.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втПодготовленныеДанные
	|ИЗ
	|	втТаблицаТоваров КАК втТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпособыОбеспеченияПотребностей
	|		ПО втТаблицаТоваров.СпособОбеспеченияПотребностей = СпособыОбеспеченияПотребностей.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров); 
	Запрос.УстановитьПараметр("ТаблицаПотребностей", ТаблицаПотребностей);
	Запрос.Выполнить();
	
	ОбновитьДанные_Поставщики(Запрос.МенеджерВременныхТаблиц);
	ОбновитьДанные_НоменклатураЗаказовПоставщикам(Запрос.МенеджерВременныхТаблиц); 
	ОбновитьДанные_РасшифровкаПотребностей(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные_Поставщики(МенеджерВТ)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
				   |	втПодготовленныеДанные.Поставщик КАК Поставщик,
				   |	МИНИМУМ(втПодготовленныеДанные.ДатаПоставки) КАК ДатаПоставки
				   |ИЗ
	               |	втПодготовленныеДанные КАК втПодготовленныеДанные
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	Поставщик
				   |";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Поставщики.Загрузить(РезультатЗапроса.Выгрузить()); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные_НоменклатураЗаказовПоставщикам(МенеджерВТ)
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	втПодготовленныеДанные.Номенклатура КАК Номенклатура,
	|	втПодготовленныеДанные.Характеристика КАК Характеристика,
	|	втПодготовленныеДанные.Количество КАК РекомендуемоКЗаказу,
	|	втПодготовленныеДанные.Количество КАК Количество,
	|	втПодготовленныеДанные.Склад КАК Склад,
	|	втПодготовленныеДанные.ДатаПоставки КАК ДатаПоставки,
	|	втПодготовленныеДанные.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	втПодготовленныеДанные.Поставщик КАК Поставщик,
	|	втПодготовленныеДанные.ДоступноИзменениеПоставщика КАК ДоступноИзменениеПоставщика,
	|	втПодготовленныеДанные.Идентификатор КАК Идентификатор
	|ИЗ
	|	втПодготовленныеДанные КАК втПодготовленныеДанные";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НоменклатураЗаказовПоставщикам.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные_РасшифровкаПотребностей(МенеджерВТ) 
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	втТаблицаТоваров.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(втТаблицаТоваров.КомпенсацияДоМинимальногоОстатка) КАК Количество
	|ПОМЕСТИТЬ втКомпенсацииДоМинимальногоОстатка
	|ИЗ
	|	втТаблицаТоваров КАК втТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаТоваров.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаПотребностей.ЗаказНаВП КАК Потребность,
	|	втТаблицаПотребностей.Количество КАК Количество,
	|	втТаблицаПотребностей.ИдентификаторТовара КАК ИдентификаторТовара,
	|	втКомпенсацииДоМинимальногоОстатка.Количество КАК КомпенсацииДоМинимальногоОстатка
	|ИЗ
	|	втТаблицаПотребностей КАК втТаблицаПотребностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКомпенсацииДоМинимальногоОстатка КАК втКомпенсацииДоМинимальногоОстатка
	|		ПО втТаблицаПотребностей.ИдентификаторТовара = втКомпенсацииДоМинимальногоОстатка.Идентификатор
	|ИТОГИ
	|	МАКСИМУМ(КомпенсацииДоМинимальногоОстатка)
	|ПО
	|	ИдентификаторТовара";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоТовару = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаПоТовару.Следующий() Цикл
		
		Если ВыборкаПоТовару.КомпенсацииДоМинимальногоОстатка > 0 Тогда
			
			НоваяСтрока = РасшифровкаПотребностей.Добавить();
			НоваяСтрока.Потребность = НСтр("ru = 'Компенсация до минимального остатка'");
			НоваяСтрока.Количество = ВыборкаПоТовару.КомпенсацииДоМинимальногоОстатка;
			НоваяСтрока.ИдентификаторТовара = ВыборкаПоТовару.ИдентификаторТовара;
		КонецЕсли;
		
		ВыборкаПоЗаказам = ВыборкаПоТовару.Выбрать();
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			НоваяСтрока = РасшифровкаПотребностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоЗаказам);
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция ДоступноИзменениеПоставщика()
	
	Для каждого ВыделеннаяСтрока Из Элементы.НоменклатураЗаказовПоставщикам.ВыделенныеСтроки Цикл
	    НайденнаяСтрока = НоменклатураЗаказовПоставщикам.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если НайденнаяСтрока.ДоступноИзменениеПоставщика Тогда
		    Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ИзменитьПоставщикаНаСервере(Поставщик = Неопределено) 
	
	Для каждого ВыделеннаяСтрока Из Элементы.НоменклатураЗаказовПоставщикам.ВыделенныеСтроки Цикл
	    НайденнаяСтрока = НоменклатураЗаказовПоставщикам.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если НайденнаяСтрока.ДоступноИзменениеПоставщика Тогда
		    НайденнаяСтрока.Поставщик = Поставщик;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НоменклатураЗаказовПоставщикам.Поставщик КАК Поставщик,
	               |	НоменклатураЗаказовПоставщикам.ДатаПоставки КАК ДатаПоставки
	               |ПОМЕСТИТЬ втПодготовленныеДанные
	               |ИЗ
	               |	&НоменклатураЗаказовПоставщикам КАК НоменклатураЗаказовПоставщикам";
	
	Запрос.УстановитьПараметр("НоменклатураЗаказовПоставщикам", НоменклатураЗаказовПоставщикам.Выгрузить());
	Запрос.Выполнить();
	
	ОбновитьДанные_Поставщики(Запрос.МенеджерВременныхТаблиц);  

КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеЗаказовПоставщикам(ИдентификаторФормыВладельца)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатураЗаказовПоставщикам.Номенклатура КАК Номенклатура,
	|	НоменклатураЗаказовПоставщикам.Характеристика КАК Характеристика,
	|	НоменклатураЗаказовПоставщикам.Количество КАК Количество,
	|	НоменклатураЗаказовПоставщикам.Склад КАК Склад,
	|	НоменклатураЗаказовПоставщикам.ДатаПоставки КАК ДатаПоставки,
	|	НоменклатураЗаказовПоставщикам.Поставщик КАК Поставщик,
	|	НоменклатураЗаказовПоставщикам.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	|ИЗ
	|	&НоменклатураЗаказовПоставщикам КАК НоменклатураЗаказовПоставщикам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПодготовленныеДанные.Номенклатура КАК Номенклатура,
	|	ВТ_ПодготовленныеДанные.Характеристика КАК Характеристика,
	|	ВТ_ПодготовленныеДанные.Количество КАК Количество,
	|	ВТ_ПодготовленныеДанные.Количество КАК КоличествоУпаковок,
	|	ВТ_ПодготовленныеДанные.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ПодготовленныеДанные.Склад КАК Склад,
	|	ВТ_ПодготовленныеДанные.ДатаПоставки КАК ДатаПоставки,
	|	ВТ_ПодготовленныеДанные.Поставщик КАК Поставщик,
	|	ВТ_ПодготовленныеДанные.Идентификатор КАК Идентификатор
	|ИЗ
	|	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	|ИТОГИ
	|	МИНИМУМ(ДатаПоставки)
	|ПО
	|	Поставщик";
	
	Запрос.УстановитьПараметр("НоменклатураЗаказовПоставщикам", НоменклатураЗаказовПоставщикам.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	АдресаХранилищ = Новый Массив;
	
	ПустаяСсылкаНаЗаказ = Документы.торо_ЗаказПоставщику.ПустаяСсылка();
	
	ВыборкаПоставщиков = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоставщиков.Следующий() Цикл
		
		Товары = ПустаяСсылкаНаЗаказ.Товары.ВыгрузитьКолонки();
		ДокументыОснования = ПустаяСсылкаНаЗаказ.ДокументыОснования.ВыгрузитьКолонки();
		
		Выборка = ВыборкаПоставщиков.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			ЗаказыПоТовару = РасшифровкаПотребностей.НайтиСтроки(Новый Структура("ИдентификаторТовара", Выборка.Идентификатор));
			Для Каждого Строка Из ЗаказыПоТовару Цикл
				Если ТипЗнч(Строка.Потребность) = Тип("Строка") Тогда
					Продолжить;
				КонецЕсли;	
				
				Если ДокументыОснования.Найти(Строка.Потребность, "ДокументОснование") = Неопределено Тогда
					НоваяСтрока = ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Строка.Потребность;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		ДанныеЗаказа = Новый Структура();
		ДанныеЗаказа.Вставить("Товары", Товары);
		ДанныеЗаказа.Вставить("ДокументыОснования", ДокументыОснования);
		ДанныеЗаказа.Вставить("ДатаПоставки", ВыборкаПоставщиков.ДатаПоставки);
		ДанныеЗаказа.Вставить("Контрагент", ВыборкаПоставщиков.Поставщик);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеЗаказа, ИдентификаторФормыВладельца);
		АдресаХранилищ.Добавить(АдресХранилища);
	КонецЦикла;

	Возврат АдресаХранилищ;
	
КонецФункции

&НаКлиенте
Процедура ПоставщикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда
	    Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Поставщик);  
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСтатистику(АгрегатнаяФункция,ДатаПоставки,СписокНоменклатуры)
	
	Результат = торо_СтатистикаПотребления.РасчитатьСтатистикуПоАгрегатнойФункции(АгрегатнаяФункция, ДатаПоставки, СписокНоменклатуры);
	Результат.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	
	Если Результат.Количество() > 0 Тогда
		Для Каждого СтрокаНоменклатуры Из НоменклатураЗаказовПоставщикам Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",СтрокаНоменклатуры.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика",СтрокаНоменклатуры.Характеристика);
			ПараметрыОтбора.Вставить("Склад",СтрокаНоменклатуры.Склад);
			
			НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
			СтатистикаЗаМесяц = 0;
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
			    СтатистикаЗаМесяц = НайденныеСтроки[0].СуммаРасход / День(КонецМесяца(ДатаПоставки));
				
				ДнейПоставки = СтрокаНоменклатуры.СпособОбеспеченияПотребностей.СрокИсполненияЗаказа;
				Если ДнейПоставки = 0 Тогда
					ДнейПоставки = 1;
				КонецЕсли;
				
				Если НайденныеСтроки[0].ОкруглятьКоличество = Истина Тогда
					СтрокаНоменклатуры.Количество = Окр(СтрокаНоменклатуры.РекомендуемоКЗаказу + СтатистикаЗаМесяц * ДнейПоставки);
				Иначе
					СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.РекомендуемоКЗаказу + СтатистикаЗаМесяц * ДнейПоставки;
				КонецЕсли;
				
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСтатистикуПоПрошломуГоду(Страховка, ДатаПоставки, СписокНоменклатуры)
	
	Результат = торо_СтатистикаПотребления.РасчитатьСтатистикуПоПрошломуГоду(ДатаПоставки, СписокНоменклатуры);
	Результат.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	
	Если Результат.Количество() > 0 Тогда
		Для Каждого СтрокаНоменклатуры Из НоменклатураЗаказовПоставщикам Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",СтрокаНоменклатуры.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика",СтрокаНоменклатуры.Характеристика);
			ПараметрыОтбора.Вставить("Склад",СтрокаНоменклатуры.Склад);
			
			НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
			СтатистикаПотребления = 0;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если Страховка = Ложь Тогда
					СтатистикаПотребления = НайденныеСтроки[0].ОбщийРасход / 365;			
				Иначе
					СуммаОтклонений = 0;
					Для Каждого Строка Из НайденныеСтроки Цикл
						СуммаОтклонений = СуммаОтклонений + Pow(Окр(Строка.СреднееЗаМесяц) - Строка.КоличествоРасход,2);
						РасходЗаДень = Строка.ОбщийРасход / 365;
					КонецЦикла;
					
					СтатистикаПотребления = РасходЗаДень + Sqrt(СуммаОтклонений / 12);
					
				КонецЕсли;
				ОкруглятьКоличество = НайденныеСтроки[0].ОкруглятьКоличество; 
			Иначе
				ОкруглятьКоличество = Ложь;
			КонецЕсли;
			
			ДнейПоставки = СтрокаНоменклатуры.СпособОбеспеченияПотребностей.СрокИсполненияЗаказа;
			Если ДнейПоставки = 0 Тогда
				ДнейПоставки = 1;
			КонецЕсли;
			
			Если ОкруглятьКоличество = Истина Тогда
				СтрокаНоменклатуры.Количество = Окр(СтрокаНоменклатуры.РекомендуемоКЗаказу + СтатистикаПотребления * ДнейПоставки);	
			Иначе
				СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.РекомендуемоКЗаказу + СтатистикаПотребления * ДнейПоставки;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти