
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	НастроитьФормуПоПравамИФункциональнымОпциям();
	
	НастроитьФормуПоПараметрам();
	Если СхемаОбеспечения.Ссылка.Пустая() И Не ЗначениеЗаполнено(СхемаОбеспечения.Наименование) Тогда
		СхемаОбеспечения.Наименование = НСтр("ru = '<Новая схема обеспечения>'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_СпособОбеспеченияПотребностей" Тогда
		Если Элементы.СтраницаСпособыОбеспеченияСклада.Видимость Тогда
			Элементы.СписокСпособовОбеспеченияСклада.Обновить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СпособыОбеспеченияПотребностей.Форма.ФормаВыбора" Тогда
		
		Если Контекст = "СпособыОбеспеченияСклада" Тогда
			МассивДанных = Новый Массив;
			Для каждого Идентификатор Из Элементы.СписокСпособовОбеспеченияСклада.ВыделенныеСтроки Цикл
				СтрокаСписка = Элементы.СписокСпособовОбеспеченияСклада.ДанныеСтроки(Идентификатор);
				Данные = Новый Структура("Номенклатура, Характеристика, Склад",
					СтрокаСписка.Номенклатура, СтрокаСписка.Характеристика, ОтборСклад);
				МассивДанных.Добавить(Данные);
			КонецЦикла;
			ЗаполнитьСпособОбеспеченияСкладаНаСревере(МассивДанных, ВыбранноеЗначение);
			Элементы.СписокСпособовОбеспеченияСклада.Обновить();
		ИначеЕсли Контекст = "СпособыОбеспеченияНоменклатурой" Тогда
			Если НЕ ЗаполнитьСпособОбеспеченияНоменклатуройНаСервере(ВыбранноеЗначение) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одной строки со складом. Выполнение команды невозможно.'"));
			КонецЕсли;
		КонецЕсли;
		Контекст = "";

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтоСхемаОбеспечения И Модифицированность Тогда
		Отказ = Истина;
		
		Если НЕ ЗавершениеРаботы Тогда 
			ТекстВопроса = Нстр("ru = 'Данные были изменены. Записать объект?'");
			ПараметрыВыполненияКоманды = Новый Структура("Имя", "Закрыть");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьКомандуПослеВопроса", ЭтотОбъект, ПараметрыВыполненияКоманды);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'При закрытии формы все данные будут утеряны. Продолжить?'");
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИспользованиеСхемыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("СхемаОбеспечения", ОтборСхемаОбеспечения); 
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОтчета.Вставить("ЭтоРасшифровка", Истина);
	ПараметрыОтчета.Вставить("КлючВарианта", "ТоварыСхемыОбеспеченияКонтекст");
	
	ОткрытьФорму("Отчет.ТоварыСхемыОбеспечения.Форма", ПараметрыОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСкладов,
		"Характеристика", ОтборХарактеристика);
	
	Если УстановкаСпособовДоступна Тогда
		СостояниеДоступностиИзмененияСпособа = ?(ЗначениеЗаполнено(ОтборХарактеристика), "",
			НСтр("ru = 'Установка способа обеспечения доступна только при заданном отборе по характеристике'"));
		Элементы.КомандыУстановкиСпособаОбеспеченияНоменклатурой.Доступность = ЗначениеЗаполнено(ОтборХарактеристика);
		Элементы.СписокСкладовКонтекстноеМенюКомандыУстановкиСпособаОбеспеченияНоменклатурой.Доступность =
			ЗначениеЗаполнено(ОтборХарактеристика);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОбеспечиваемаяНоменклатураПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			СписокСпособовОбеспеченияСклада,
			"ТолькоОбеспечиваемаяНоменклатура",
			ТолькоОбеспечиваемаяНоменклатура,
			ТолькоОбеспечиваемаяНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Не ЭтоСхемаОбеспечения Тогда
	    Возврат;
	КонецЕсли;
	
	ЗаписатьНаКлиенте();
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаКлиенте();
	Модифицированность = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСпособовОбеспеченияСклада

&НаКлиенте
Процедура СписокСпособовОбеспеченияСкладаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.СписокСпособовОбеспеченияСкладаНоменклатура Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура);
	ИначеЕсли Поле = Элементы.СписокСпособовОбеспеченияСкладаХарактеристика Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Характеристика);
	ИначеЕсли Поле = Элементы.СписокСпособовОбеспеченияСкладаИсточникОбеспечения
		И Элемент.ТекущиеДанные.ИсточникОбеспечения <> Неопределено Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.ИсточникОбеспечения);
	ИначеЕсли Поле = Элементы.СписокСпособовОбеспеченияСкладаСхемаОбеспечения
		ИЛИ Поле = Элементы.СписокСпособовОбеспеченияСкладаСпособОбеспечения
		ИЛИ Поле = Элементы.СписокСпособовОбеспеченияСкладаСрокПоставки  Тогда
		Если Элемент.ТекущиеДанные.ЭтоИндивидуальнаяНастройка Тогда
			ПоказатьЗначение(,Элемент.ТекущиеДанные.СпособОбеспечения);
		Иначе
			ПараметрыФормы = Новый Структура("Ключ, Склад", Элемент.ТекущиеДанные.СхемаОбеспечения, ОтборСклад);
			ОткрытьФорму("Справочник.СхемыОбеспечения.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСпособовОбеспечения

&НаКлиенте
Процедура СписокСкладовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.СписокСкладовСклад Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Склад);
	ИначеЕсли Поле = Элементы.СписокСкладовСпособОбеспечения
		ИЛИ Поле = Элементы.СписокСкладовСрокПоставки
		ИЛИ Поле = Элементы.СписокСкладовЕстьНастройкаДляТовара Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.СпособОбеспечения);
	ИначеЕсли Поле = Элементы.СписокСкладовИсточникОбеспечения
		И Элемент.ТекущиеДанные.ИсточникОбеспечения <> Неопределено Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ИсточникОбеспечения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Команды_СпособыОбеспеченияСклада

&НаКлиенте
Процедура ЗаполнитьСпособОбеспеченияСклада(Команда)
	
	Контекст = "СпособыОбеспеченияСклада";
	
	Если ЕстьВыделенныеСтрокиВТаблице(Элементы.СписокСпособовОбеспеченияСклада) Тогда
		
		ПараметрыФормы = Новый Структура("Склад", ОтборСклад);
		ОткрытьФорму("Справочник.СпособыОбеспеченияПотребностей.ФормаВыбора", ПараметрыФормы, ЭтаФорма,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСпособОбеспеченияСклада(Команда)
	
	Если ЕстьВыделенныеСтрокиВТаблице(Элементы.СписокСпособовОбеспеченияСклада) Тогда
		МассивДанных = Новый Массив;
		Для каждого Идентификатор Из Элементы.СписокСпособовОбеспеченияСклада.ВыделенныеСтроки Цикл
			СтрокаСписка = Элементы.СписокСпособовОбеспеченияСклада.ДанныеСтроки(Идентификатор);
			Данные = Новый Структура("Номенклатура, Характеристика, Склад",
						СтрокаСписка.Номенклатура, СтрокаСписка.Характеристика, ОтборСклад);
			МассивДанных.Добавить(Данные);
		КонецЦикла;
		ЗаполнитьСпособОбеспеченияСкладаНаСревере(МассивДанных);
		Элементы.СписокСпособовОбеспеченияСклада.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды_СпособыОбеспеченияНоменклатурой

&НаКлиенте
Процедура ЗаполнитьСпособОбеспеченияНоменклатурой(Команда)
	
	Если ЕстьВыделенныеСтрокиВТаблице(Элементы.СписокСкладов) Тогда
		ЗаписатьПередВыполнениемКоманды(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСпособОбеспеченияНоменклатурой(Команда)
	
	Если ЕстьВыделенныеСтрокиВТаблице(Элементы.СписокСкладов) Тогда
		ЗаписатьПередВыполнениемКоманды(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДерево(Команда)
	
	Элементы.СписокСкладов.Обновить();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьСправкуОбработки(Команда)
	ОткрытьСправку("Обработка.НастройкаСпособовОбеспеченияПотребностей");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаписатьНаКлиенте()
	
	ОчиститьСообщения();
	ЗаписьНаСервере();
	Шаблон = НСтр("ru = '%1 (Схема обеспечения)'");
	Заголовок = СтрШаблон(Шаблон, СхемаОбеспечения.Наименование);
	ОповеститьОбИзменении(СхемаОбеспечения.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьНаСервере()
	
	ОбъектДляЗаписи = РеквизитФормыВЗначение("СхемаОбеспечения");
	ОбъектДляЗаписи.Записать();
	ЗначениеВРеквизитФормы(ОбъектДляЗаписи, "СхемаОбеспечения");
	
	Если ОтборСхемаОбеспечения <> СхемаОбеспечения.Ссылка Тогда
		ОтборСхемаОбеспечения = СхемаОбеспечения.Ссылка;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСкладов,
			"СхемаОбеспечения", ОтборСхемаОбеспечения);
	КонецЕсли;
	
КонецПроцедуры

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОформляемыеПоля = Новый Массив;
	
	#Область СписокСпособовОбеспеченияСклада
	УсловноеОформлениеСписка = СписокСпособовОбеспеченияСклада.УсловноеОформление;
	
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, "Характеристика",
		"ХарактеристикиИспользуются", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",			НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",	WebЦвета.НейтральноСерый);
	
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, "СпособОбеспечения",
		"ЭтоИндивидуальнаяНастройка", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать",		Ложь);
	
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, "СхемаОбеспечения",
		"ЭтоИндивидуальнаяНастройка", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать",		Ложь);
	
	ОформляемыеПоля.Добавить("СпособОбеспечения");
	ОформляемыеПоля.Добавить("ИсточникОбеспечения");
	ОформляемыеПоля.Добавить("СрокПоставки");
	ОформляемыеПоля.Добавить("ОбеспечиваемыйПериод");
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, ОформляемыеПоля, 
		"СпособОбеспечения",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",			НСтр("ru = '<не установлен>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",	WebЦвета.НейтральноСерый);
	ОформляемыеПоля.Очистить();
	
	ОформитьИсточникОбеспечения(УсловноеОформлениеСписка, "ИсточникОбеспечения",
		"ИсточникОбеспечения", "ТипОбеспечения");
	
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, "СрокПоставки", "СрокПоставки", 0);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СпособОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",			НСтр("ru = '<в любой день>'"));
	
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, "СхемаОбеспечения",
		"СхемаОбеспечения",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СпособОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",			НСтр("ru = '<не указана>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",	WebЦвета.НейтральноСерый);
	#КонецОбласти
	
	#Область СписокСкладов
	УсловноеОформлениеСписка = СписокСкладов.УсловноеОформление;
	
	ОформляемыеПоля.Добавить("ЕстьНастройкаДляТовара");
	ОформляемыеПоля.Добавить("СпособОбеспечения");
	ОформляемыеПоля.Добавить("ИсточникОбеспечения");
	ОформляемыеПоля.Добавить("СрокПоставки");
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, ОформляемыеПоля, "ЭтоГруппа", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",			НСтр("ru = '<только для элементов>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",	WebЦвета.НейтральноСерый);
	ОформляемыеПоля.Очистить();
	
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, "ЕстьНастройкаДляТовара",
		"ЕстьНастройкаДляТовара", Ложь);
	УстановитьОтборОформеленияНеДляГруппы(Элемент);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",		НСтр("ru = 'Схема обеспечения'"));
	
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, "ЕстьНастройкаДляТовара",
		"ЕстьНастройкаДляТовара", Истина);
	УстановитьОтборОформеленияНеДляГруппы(Элемент);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",		НСтр("ru = 'Способ обеспечения'"));
	
	ОформляемыеПоля.Добавить("СпособОбеспечения");
	ОформляемыеПоля.Добавить("ИсточникОбеспечения");
	ОформляемыеПоля.Добавить("СрокПоставки");
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, ОформляемыеПоля, "СпособОбеспечения",,
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	УстановитьОтборОформеленияНеДляГруппы(Элемент);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",			НСтр("ru = '<не установлен>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",	WebЦвета.НейтральноСерый);
	ОформляемыеПоля.Очистить();
	
	ОформитьИсточникОбеспечения(УсловноеОформлениеСписка, "ИсточникОбеспечения", "ИсточникОбеспечения",
		"ТипОбеспечения");
	
	Элемент = ДобавитьЭлементОформленияСУсловием(УсловноеОформлениеСписка, "СрокПоставки", "СрокПоставки", 0);
	УстановитьОтборОформеленияНеДляГруппы(Элемент);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СпособОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",			НСтр("ru = '<в любой день>'"));
	#КонецОбласти
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОформитьИсточникОбеспечения(УсловноеОформление, ИмяПоляВводаИсточникаОбеспечения,
									ПутьКПолюИсточникОбеспечения, ПутьКПолюТипОбеспечения)

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаИсточникаОбеспечения);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюТипОбеспечения);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.Покупка;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюИсточникОбеспечения);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любые поставщики>'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборОформеленияНеДляГруппы(Элемент)
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементОформленияСУсловием(УсловноеОформление, ОформляемыеПоля, ПутьКДанным,
											Значение = Неопределено, ВидСравнения = Неопределено)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Если ТипЗнч(ОформляемыеПоля) = Тип("Строка") Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемыеПоля);
	Иначе
		Для Каждого Поле Из ОформляемыеПоля Цикл
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЦикла;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли; 
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравнения;
	Если Значение <> Неопределено Тогда
		ОтборЭлемента.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ВыполнитьКомандуПослеВопроса(Результат, ПараметрыВыполненияКоманды) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ЗаписатьНаКлиенте();
		Если Не ЗначениеЗаполнено(СхемаОбеспечения.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПараметрыВыполненияКоманды.Имя = "ЗаполнитьСпособОбеспеченияНоменклатурой" Тогда
		
		Контекст = "СпособыОбеспеченияНоменклатурой";
		Если Элементы.СписокСкладов.ТекущиеДанные.ЭтоГруппа Тогда
			ПараметрыФормы = Новый Структура();
		Иначе
			ПараметрыФормы = Новый Структура("Склад", Элементы.СписокСкладов.ТекущаяСтрока);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.СпособыОбеспеченияПотребностей.ФормаВыбора", ПараметрыФормы, ЭтаФорма,
			УникальныйИдентификатор);
		
	ИначеЕсли ПараметрыВыполненияКоманды.Имя = "ОчиститьСпособОбеспеченияНоменклатурой" Тогда
		
		Если НЕ ЗаполнитьСпособОбеспеченияНоменклатуройНаСервере() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одной строки со складом. Выполнение команды невозможно.'"));
		КонецЕсли;
		
	ИначеЕсли ПараметрыВыполненияКоманды.Имя = "Закрыть" Тогда
		ЗаписатьНаКлиенте();
		Модифицированность = Ложь;
	
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#Конецобласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьФормуПоПараметрам()
	
	// Определение источника вызова формы, заполнение реквизитов параметров отбора и заголовка формы.
	Источник = Неопределено;
	Параметры.Свойство("Источник", Источник);
	
	Если Источник = "Склад" Тогда
		
		Параметры.Отбор.Свойство("Склад", ОтборСклад);
				
		Шаблон = НСтр("ru = 'Настройка способов обеспечения потребностей (Склад: ""%1"")'");
		Заголовок = СтрШаблон(Шаблон, ОтборСклад);
		
	ИначеЕсли Источник = "Номенклатура" Тогда
		
		Параметры.Отбор.Свойство("Номенклатура", ОтборНоменклатура);
		
		ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтборНоменклатура,
			"СхемаОбеспечения");
		ОтборСхемаОбеспечения	= ЗначенияРеквизитовНоменклатуры.СхемаОбеспечения;
		
		Шаблон = НСтр("ru = 'Настройка способов обеспечения потребностей (Номенклатура: ""%1"")'");
		Заголовок = СтрШаблон(Шаблон, ОтборНоменклатура);
		
	ИначеЕсли Источник = "ТоварыСхемыОбеспечения" Тогда
		
		Параметры.Свойство("Номенклатура",	ОтборНоменклатура);
		Параметры.Свойство("Характеристика",ОтборХарактеристика);
		Параметры.Свойство("Склад",			ОтборСклад);
		
		ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтборНоменклатура,
			"СхемаОбеспечения");
		ОтборСхемаОбеспечения	= ЗначенияРеквизитовНоменклатуры.СхемаОбеспечения;
		
		Шаблон = НСтр("ru = 'Настройка способов обеспечения потребностей (Номенклатура: ""%1"")'");
		Заголовок = СтрШаблон(Шаблон, ОтборНоменклатура);
		
	ИначеЕсли Источник = "СхемаОбеспечения" Тогда
		
		Параметры.Свойство("Ключ",	ОтборСхемаОбеспечения);
		Параметры.Свойство("Склад",	ОтборСклад);
		
		Если ЗначениеЗаполнено(ОтборСхемаОбеспечения) Тогда
			ЗначениеВРеквизитФормы(ОтборСхемаОбеспечения.ПолучитьОбъект(), "СхемаОбеспечения");
			Шаблон = НСтр("ru = '%1 (Схема обеспечения)'");
			Заголовок = СтрШаблон(Шаблон, СхемаОбеспечения.Наименование);
		Иначе
			Заголовок = НСтр("ru = 'Схема обеспечения (создание)'");
		КонецЕсли;
		
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			СхемаОбеспечения.Наименование = Строка(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Непосредственное открытие этой формы не предусмотрено!'");
	КонецЕсли;
	
	// Настройка элементов формы.
	ЭтоСхемаОбеспечения = Источник = "СхемаОбеспечения";
	
	Элементы.ШапкаСхемыОбеспечения.Видимость			= ЭтоСхемаОбеспечения;
	Элементы.ГруппаСхемаОбеспечения.Видимость = ЭтоСхемаОбеспечения;
	
	Элементы.КоманднаяПанельСхемыОбеспечения.Видимость = Ложь;
	
	Элементы.КомандыФормыСпособовОбеспеченияНоменклатурой.Видимость	= НЕ ЭтоСхемаОбеспечения;
	Элементы.ОткрытьСправкуКнопка.Видимость	= НЕ ЭтоСхемаОбеспечения;
	
	Элементы.СтраницаСпособыОбеспеченияСклада.Видимость = Источник = "Склад";
	Элементы.СтраницаСпособыОбеспеченияНоменклатурой.Видимость	=
		ЭтоСхемаОбеспечения ИЛИ Источник = "Номенклатура" ИЛИ Источник = "ТоварыСхемыОбеспечения";
	
	Элементы.ОтборПоХарактеристике.Видимость = НЕ ЭтоСхемаОбеспечения И
		Справочники.Номенклатура.ХарактеристикиИспользуются(ОтборНоменклатура);
	
	Если Элементы.ШапкаСхемыОбеспечения.Видимость Тогда
		
		КоличествоИспользований = Справочники.СхемыОбеспечения.КоличествоИспользований(ОтборСхемаОбеспечения);
		Если КоличествоИспользований > 0 Тогда
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Используется для товаров'"));
			МассивСтрок.Добавить(" (");
			ТекстВсего = СтрШаблон(НСтр("ru = 'всего: %1'"),
				КоличествоИспользований);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстВсего,,,, "#Перейти"));
			МассивСтрок.Добавить(")");
			Элементы.НадписьИспользованиеСхемы.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Иначе
			Элементы.НадписьИспользованиеСхемы.Заголовок = НСтр("ru = 'Не назначена ни одному товару'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.СтраницаСпособыОбеспеченияСклада.Видимость Тогда
		
		Элементы.СтраницыПараметрыОбеспечения.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСпособовОбеспеченияСклада,
			"Склад", ОтборСклад);
		
		ТолькоОбеспечиваемаяНоменклатура = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСпособовОбеспеченияСклада,
			"ТолькоОбеспечиваемаяНоменклатура", ТолькоОбеспечиваемаяНоменклатура, ТолькоОбеспечиваемаяНоменклатура);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСпособовОбеспеченияСклада,
			"ИсточникСхема", НСтр("ru = 'Схема обеспечения'"));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСпособовОбеспеченияСклада,
			"ИсточникСпособ", НСтр("ru = 'Способ обеспечения'"));
		
	КонецЕсли;
	
	Если Элементы.СтраницаСпособыОбеспеченияНоменклатурой.Видимость Тогда
		
		Если Не ЭтоСхемаОбеспечения Тогда
			Элементы.СтраницыПараметрыОбеспечения.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСкладов,
			"СхемаОбеспечения", ОтборСхемаОбеспечения);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСкладов,
			"Номенклатура", ОтборНоменклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСкладов,
			"Характеристика", ОтборХарактеристика);
		
		Если Элементы.ОтборПоХарактеристике.Видимость И УстановкаСпособовДоступна Тогда
			СостояниеДоступностиИзмененияСпособа = ?(ЗначениеЗаполнено(ОтборХарактеристика), "",
				НСтр("ru = 'Установка способа обеспечения доступна только при заданном отборе по характеристике'"));
			Элементы.КомандыУстановкиСпособаОбеспеченияНоменклатурой.Доступность = ЗначениеЗаполнено(ОтборХарактеристика);
			Элементы.СписокСкладовКонтекстноеМенюКомандыУстановкиСпособаОбеспеченияНоменклатурой.Доступность =
				ЗначениеЗаполнено(ОтборХарактеристика);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборСклад) Тогда
			
			Элементы.СписокСкладов.ТекущаяСтрока = ОтборСклад;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравамИФункциональнымОпциям()
	
	Элементы.СтраницыРежимОтображения.ТекущаяСтраница = Элементы.СтраницаСклады;
	
	Если Не ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры") Тогда
		Элементы.СписокСпособовОбеспеченияСкладаХарактеристика.Видимость	= Ложь;
	КонецЕсли;
	
	Если Параметры.Источник = "СхемаОбеспечения" Тогда
		УстановитьВидимостьДоступностьПоРолямСхемаОбеспечения();
		УстановкаСпособовДоступна = ПравоДоступа("Редактирование", Метаданные.Справочники.СхемыОбеспечения);
	Иначе
		УстановкаСпособовДоступна = Истина;
	КонецЕсли;
	
	Если НЕ УстановкаСпособовДоступна Тогда
		Элементы.СостояниеДоступностиИзмененияСпособа.Видимость = Ложь;
		
		Элементы.КомандыУстановкиСпособаОбеспеченияНоменклатурой.Доступность = Ложь;
		Элементы.КомандыУстановкиСпособаОбеспеченияСклада.Доступность = Ложь;
		
		Элементы.СписокСкладовКонтекстноеМенюКомандыУстановкиСпособаОбеспеченияНоменклатурой.Доступность = Ложь;
		Элементы.КомандыУстановкиСпособаОбеспеченияСклада.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСпособыОбеспеченияСклада

&НаСервереБезКонтекста
Процедура ЗаполнитьСпособОбеспеченияСкладаНаСревере(МассивДанных, СпособОбеспечения = Неопределено)
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособОбеспечения = Неопределено Тогда
		СпособОбеспечения = ПредопределенноеЗначение("Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка");
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Идентификатор",	Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Склад",			Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Для каждого Данные Из МассивДанных Цикл
		СтрокаТовара = ТаблицаТоваров.Добавить();
		СтрокаТовара.Номенклатура	= Данные.Номенклатура;
		СтрокаТовара.Характеристика	= Данные.Характеристика;
		СтрокаТовара.Склад			= Данные.Склад;
	КонецЦикла;
	
	РегистрыСведений.ВариантыОбеспеченияТоварами.ЗаполнитьСпособОбеспечения(ТаблицаТоваров, СпособОбеспечения);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСхемаОбеспечения

&НаСервере
Процедура УстановитьВидимостьДоступностьПоРолямСхемаОбеспечения()
	
	РедактированиеДоступно = ПравоДоступа("Редактирование", Метаданные.Справочники.СхемыОбеспечения);
	Элементы.Наименование.Доступность = РедактированиеДоступно;
	
	ДобавлениеИзменениеЛогистическихПараметровДоступно = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СхемыОбеспечения);
	Если Не ДобавлениеИзменениеЛогистическихПараметровДоступно Тогда
		
		Элементы.СтраницыРежимОтображения.Видимость = Ложь;
		Элементы.ШапкаСпискаСпособовОбеспечения.Видимость = Ложь;
		Элементы.НадписьИспользованиеСхемы.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПередВыполнениемКоманды(ИмяКоманды)
	
	ПараметрыВыполненияКоманды = Новый Структура("Имя", ИмяКоманды);
	Если Параметры.Источник = "СхемаОбеспечения" И Не ЗначениеЗаполнено(СхемаОбеспечения.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Для выполнения команды необходимо записать объект. Записать?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьКомандуПослеВопроса", ЭтотОбъект, ПараметрыВыполненияКоманды);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВыполнитьКомандуПослеВопроса(Неопределено, ПараметрыВыполненияКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСпособыОбеспеченияНоменклатурой

&НаСервере
Функция ЗаполнитьСпособОбеспеченияНоменклатуройНаСервере(СпособОбеспечения = Неопределено)
	
	Если СпособОбеспечения = Неопределено Тогда
		СпособОбеспечения = ПредопределенноеЗначение("Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка");
	КонецЕсли;
	
	ЭтоДляТовара	= ЗначениеЗаполнено(ОтборНоменклатура);
	ЭтоУстановка	= ЗначениеЗаполнено(СпособОбеспечения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Идентификатор,
		|	Склады.Ссылка КАК Склад,
		|	&Номенклатура,
		|	&Характеристика
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|	И Склады.Ссылка В(&Склады)";
	
	Запрос.УстановитьПараметр("Номенклатура", ОтборНоменклатура);
	Запрос.УстановитьПараметр("Характеристика", ОтборХарактеристика);
	Запрос.УстановитьПараметр("Склады", Элементы.СписокСкладов.ВыделенныеСтроки);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоДляТовара Тогда
		ОбработанныеСтроки = РегистрыСведений.ВариантыОбеспеченияТоварами.ЗаполнитьСпособОбеспечения(
			РезультатЗапроса.Выгрузить(), СпособОбеспечения);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененныеСклады, ОбработанныеСтроки, Истина);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЭтоУстановка Тогда
				РегистрыСведений.СхемыОбеспечения.Добавить(Выборка.Склад, ОтборСхемаОбеспечения, СпособОбеспечения);
			Иначе
				РегистрыСведений.СхемыОбеспечения.Удалить(Выборка.Склад, ОтборСхемаОбеспечения);
			КонецЕсли;
			ИзмененныеСклады.Добавить(Выборка.Склад);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СписокСкладов.Обновить();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ЕстьВыделенныеСтрокиВТаблице(ТаблицаФормы)
	
	Если ТаблицаФормы.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одной строки. Выполнение команды невозможно.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти