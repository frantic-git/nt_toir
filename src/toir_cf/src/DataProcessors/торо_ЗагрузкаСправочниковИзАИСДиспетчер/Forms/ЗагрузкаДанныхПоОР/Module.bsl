////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем ДанныеЗадания;

&НаКлиенте
Перем ДатаНачалаСинхронизации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	
	Узел = торо_ИнтеграцияСАИСДиспетчер.ПолучитьУзелПланаОбмена();
	Элементы.СписокИзмеряемыхПоказателей.Видимость = Узел.ЗагружатьКонтролируемыеПоказателиОР;
	Элементы.СписокПараметровНаработки.Видимость = Узел.ЗагружатьНаработкуОР;
	Элементы.ПоказателиЭксплуатацииПредупреждение.Видимость = Узел.ЗагружатьКонтролируемыеПоказателиОР Или Узел.ЗагружатьНаработкуОР;
	Элементы.СписокЗапчастейХарактеристикаНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	
	Если Не ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей") Тогда
	    Элементы.СтраницаЗапчасти.Видимость = Ложь;
	КонецЕсли;   
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("СписокПараметровНаработки");
	ИменаТаблицФормы.Добавить("СписокИзмеряемыхПоказателей"); 
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.СтраницыПомощникаЗагрузкиДанныхПоОР.ТекущаяСтраница = Элементы.ЗагрузкаДанных;
		
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Число"));
	Элементы.СписокИзмеряемыхПоказателейДопустимыйМаксимум.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Элементы.СписокИзмеряемыхПоказателейДопустимыйМинимум.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Элементы.СписокИзмеряемыхПоказателейКритическийМинимум.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Элементы.СписокИзмеряемыхПоказателейКритическийМаксимум.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Или Не (Элементы.СтраницыПомощникаЗагрузкиДанныхПоОР.ТекущаяСтраница = Элементы.СопоставлениеДанныхПоОР И Не ЗначениеЗаполнено(IDЗадания)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные не записаны. При закрытии формы данные не будут записаны в систему. Продолжить?'");
	ОписаниеОповещенияПередЗакрытием = Новый ОписаниеОповещения("ПередЗакрытиемПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияПередЗакрытием, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОкончаниеВыполненияДлительнойОперацииСАИСДиспетчер" И Источник = "ФормаВыполненияДлительнойОперацииСАИСДиспетчер" Тогда
	    ОбработчикОкончанияФоновогоЗадания(Параметр, Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	ДатаНачалаСинхронизации = ТекущаяДата();
	ЗапуститьВыполнение();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	ЗапуститьВыполнение();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуСопоставления(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрации(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", торо_ИнтеграцияСАИСДиспетчер.ПолучитьСобытияЖурналаРегистрации());
	ПараметрыФормы.Вставить("ДатаНачала", ДатаНачалаСинхронизации);
	ПараметрыФормы.Вставить("ДатаОкончания", ТекущаяДата());
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта

&НаКлиенте
Процедура ОбъектыРемонтаПриАктивизацииСтроки(Элемент)
	УстановитьОтборСтрокСвязанныхТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ТекущиеДанные.ОбъектРемонта), ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИзмеряемыхПоказателей

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	МассивПолейДляПроверки = Новый Массив();
	МассивПолейДляПроверки.Добавить("Показатель");
	ПроверкаЗаполненияПолейТаблиц("СписокИзмеряемыхПоказателей", МассивПолейДляПроверки, Отказ);
	
	ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если Не (ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР
			И ТипЗнч(ТекущиеДанные.КритическийМинимум) = Тип("Число") 
			И ТипЗнч(ТекущиеДанные.ДопустимыйМинимум) = Тип("Число") 
			И ТипЗнч(ТекущиеДанные.ДопустимыйМаксимум) = Тип("Число") 
			И ТипЗнч(ТекущиеДанные.КритическийМаксимум) = Тип("Число")) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	Если ТекущиеДанные.КритическийМинимум > ТекущиеДанные.ДопустимыйМинимум Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Критический минимум превышает допустимый минимум! '");
	КонецЕсли;
	Если ТекущиеДанные.ДопустимыйМинимум > ТекущиеДанные.ДопустимыйМаксимум Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Допустимый минимум превышает допустимый максимум! '");
	КонецЕсли;
	Если ТекущиеДанные.ДопустимыйМаксимум > ТекущиеДанные.КритическийМаксимум Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Допустимый максимум превышает критический максимум! '");
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Попробуйте отредактировать границы допустимых значений!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ОтменаРедактирования Тогда
	    ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
		СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ТекущиеДанные.Показатель, ТекущиеДанные.ОбъектРемонта);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗначенийПолей);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПараметровНаработки

&НаКлиенте
Процедура СписокПараметровНаработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	ТекущиеДанныеОР = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанныеОР = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ОтменаРедактирования Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
	ДатаВыпуска = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанныеОР.ОбъектРемонта, "ДатаВыпуска");
	Если ТекущиеДанные.Период < ДатаВыпуска Тогда
		ТекущаяСтрока = Элементы.СписокПараметровНаработки.ТекущаяСтрока;
	    ТекстСообщения = Нстр("ru = 'Дата ввода наработки не может быть меньше даты выпуска ОР!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	МассивПолейДляПроверки = Новый Массив();
	МассивПолейДляПроверки.Добавить("Показатель");
	МассивПолейДляПроверки.Добавить("Период");
	МассивПолейДляПроверки.Добавить("ПериодПлановойНаработки");
	МассивПолейДляПроверки.Добавить("ПлановаяНаработка");
	МассивПолейДляПроверки.Добавить("ПродолжительностьПериодаПлановойНаработки");
	МассивПолейДляПроверки.Добавить("КоэффициентИспользованияОборудования");
	ПроверкаЗаполненияПолейТаблиц("СписокПараметровНаработки", МассивПолейДляПроверки, Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверкаЗаполненияПолейТаблиц(ИмяТаблицы, МассивПолей, Отказ = Ложь)
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы[ИмяТаблицы].ТекущаяСтрока;
	
	Для каждого ПолеТаблицы Из МассивПолей Цикл
		Если Не ЗначениеЗаполнено(ТекущиеДанные[ПолеТаблицы]) Тогда
			ЗаголовокПоля = Элементы[ИмяТаблицы + ПолеТаблицы].Заголовок;
			ШаблонСообщения = НСтр("ru = 'Поле <%1> не может быть пустым!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаголовокПоля);
			
			ШаблонПоля = НСтр("ru = '%1[%2].%3'");
			Поле = СтрШаблон(ШаблонПоля, ИмяТаблицы, ТекущаяСтрока, ПолеТаблицы);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			//ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаЗаполненияПолейСтроки(СтрокаДанных, МассивПолей)
	Если СтрокаДанных = Неопределено Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	ПоляЗаполнены = Истина;
	Для каждого ПолеТаблицы Из МассивПолей Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных[ПолеТаблицы]) Тогда
			ПоляЗаполнены = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоляЗаполнены;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборСтрокСвязанныхТаблиц()
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    СтруктураОтбора = Новый ФиксированнаяСтруктура();
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;
	
	Элементы.СписокИзмеряемыхПоказателей.ОтборСтрок = СтруктураОтбора;
	Элементы.СписокПараметровНаработки.ОтборСтрок = СтруктураОтбора;
	Элементы.СписокЗапчастей.ОтборСтрок = СтруктураОтбора;
	Элементы.СписокПаспортныхХарактеристик.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(IDЗадания) Тогда
	    торо_ИнтеграцияСАИСДиспетчер.ОтменитьВыполнениеФоновогоЗадания(IDЗадания);
	КонецЕсли;
	
	Элементы.СтраницыПомощникаЗагрузкиДанныхПоОР.ТекущаяСтраница = Элементы.ОбменЗавершенСОшибкой;
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДанныеНаСервере(АдресВоВременномХранилище)
	Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтруктураВозврата = Новый Структура("Статус", Результат.Статус);
	
	Если Результат.Статус = "Ошибка" Тогда
	    Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураТаблиц = Результат.СтруктураТаблиц;
	ОбъектыРемонта.Загрузить(СтруктураТаблиц.ОбъектыРемонта);
	СписокПараметровНаработки.Загрузить(СтруктураТаблиц.ПараметрыНаработки);
	СписокИзмеряемыхПоказателей.Загрузить(СтруктураТаблиц.КонтролируемыеПоказатели);
	СписокЗапчастей.Загрузить(СтруктураТаблиц.Запчасти);
	СписокПаспортныхХарактеристик.Загрузить(СтруктураТаблиц.ПаспортныеХарактеристикиОР);
	
	ОбновитьКартинкиТаблицыОР();
	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Процедура ОбновитьКартинкиТаблицыОР()
	СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Справочники.торо_СтруктурыОР.ПустаяСсылка());
			
	ТаблицаНаличияПодчиненныхОР = торо_РаботаСИерархией20.ТаблицаНаличияПодчиненныхОР(ОбъектыРемонта.Выгрузить().ВыгрузитьКолонку("ОбъектРемонта"), СтруктураИерархии);
	
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	ПолеКартинки = "КартинкаОтображаемая";
	ИндексКартинки = 0;
	
	Для каждого СтрокаОР Из ОбъектыРемонта Цикл
		ОбъектРемонта = СтрокаОР.ОбъектРемонта;
		
		СтруктураПоиска = Новый Структура("ОбъектРемонта", ОбъектРемонта);
		НайденныеСтроки = ТаблицаНаличияПодчиненныхОР.НайтиСтроки(СтруктураПоиска);
		
		ЭтоСоставной = ?(НайденныеСтроки.Количество() > 0 И НайденныеСтроки[0].ЕстьПодчиненные, Истина, Ложь);
		СтруктураПараметровКартинки = торо_РаботаСИерархией20КлиентСервер.СтруктураПараметровДляОпределенияИндексаКартинки();
		ЗаполнитьЗначенияСвойств(СтруктураПараметровКартинки, ОбъектРемонта);
		СтруктураПараметровКартинки.ЭтоСоставной = ЭтоСоставной;
		
		СтрокаОР[ПолеКартинки] = торо_РаботаСИерархией20КлиентСервер.ПолучитьИндексКартинкиДереваНеавтоматическойИерархии(СтруктураПараметровКартинки);
		
		Если (Не ОбъектРемонта.ПометкаУдаления) И ЗначениеЗаполнено(ОбъектРемонта.ТиповойОР) И ИспользоватьКартинкиТОР Тогда
			КартинкаТОР = ОбъектРемонта.ТиповойОР.ФайлКартинки;
			Если Не КартинкаТОР = Справочники.торо_ТиповыеОРПрисоединенныеФайлы.ПустаяСсылка() Тогда
				УИД = ОбъектРемонта.ТиповойОР.УникальныйИдентификатор();
				
				ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
				ПараметрыДанныхФайла.ИдентификаторФормы = УИД;
				
				АдресКартинки = РаботаСФайлами.ДанныеФайла(КартинкаТОР, ПараметрыДанныхФайла).СсылкаНаДвоичныеДанныеФайла;
				СтрокаОР.КартинкаОтображаемая = АдресКартинки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПереходСтраниц(Ошибка = Ложь)
	КоличетсвоСтрокВТаблицах = СписокИзмеряемыхПоказателей.Количество() + СписокПараметровНаработки.Количество() + СписокЗапчастей.Количество() + СписокПаспортныхХарактеристик.Количество();
	
	СтраницыПомощника = Элементы.СтраницыПомощникаЗагрузкиДанныхПоОР;
	Если Ошибка Тогда
		СтраницыПомощника.ТекущаяСтраница = Элементы.ОбменЗавершенСОшибкой;
	ИначеЕсли СтраницыПомощника.ТекущаяСтраница = Элементы.ЗагрузкаДанных И КоличетсвоСтрокВТаблицах > 0 Тогда
		СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеДанныхПоОР;
	ИначеЕсли СтраницыПомощника.ТекущаяСтраница = Элементы.ЗагрузкаДанных И КоличетсвоСтрокВТаблицах = 0 Тогда
		СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаписьЗавершенаУспешно;
		Элементы.СтатусЗаписьЗавершенаУспешно.Заголовок = НСтр("ru = 'По объектам ремонта нет данных.'");
	ИначеЕсли СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеДанныхПоОР Тогда
		СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаписьЗавершенаУспешно;
	КонецЕсли;
	
	Элементы.ЗагрузитьДанные.Видимость = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияКонтролируемыхПоказателей(ИзмеряемыйПоказатель, ОР)
	СтруктураЗначенийПолей = Новый Структура();
	СтруктураЗначенийПолей.Вставить("ДопустимыйМинимум", ИзмеряемыйПоказатель.ДопустимыйМинимум);
	СтруктураЗначенийПолей.Вставить("ДопустимыйМаксимум", ИзмеряемыйПоказатель.ДопустимыйМаксимум);
	СтруктураЗначенийПолей.Вставить("КритическийМинимум", ИзмеряемыйПоказатель.КритическийМинимум);
	СтруктураЗначенийПолей.Вставить("КритическийМаксимум", ИзмеряемыйПоказатель.КритическийМаксимум);
	
	Если ИзмеряемыйПоказатель.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Не ТипЗнч(СтруктураЗначенийПолей.ДопустимыйМаксимум) = Тип("Число") Тогда
			СтруктураЗначенийПолей.ДопустимыйМаксимум = 0;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураЗначенийПолей.КритическийМинимум) = Тип("Число") Тогда
			СтруктураЗначенийПолей.КритическийМинимум = 0;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураЗначенийПолей.КритическийМаксимум) = Тип("Число") Тогда
			СтруктураЗначенийПолей.КритическийМаксимум = 0;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураЗначенийПолей.ДопустимыйМинимум) = Тип("Число") Тогда
			СтруктураЗначенийПолей.ДопустимыйМинимум = 0;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураЗначенийПолей;
КонецФункции

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьВыполнение()
	ЭтаФорма.Доступность = Ложь;
	
	ДанныеЗадания = ПодготовитьДанныеДляФоновогоЗадания();
	ПараметрыЗапуска = ПодготовитьПараметрыДляФоновогоЗадания(ДанныеЗадания);
	ПараметрыФормы = Новый Структура("ДанныеЗадания, АдресПараметровЗапуска", ДанныеЗадания, ПараметрыЗапуска);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОкончанияФоновогоЗадания", ЭтотОбъект);
	ОткрытьФорму("ПланОбмена.торо_ИнтеграцияСАИСДиспетчер.Форма.ФормаВыполненияДлительнойОперацииСАИСДиспетчер", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Функция ОпределитьЗадание()
	ТекущаяСтраница = Элементы.СтраницыПомощникаЗагрузкиДанныхПоОР.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.ЗагрузкаДанных Тогда
		Возврат "ЗагрузитьИзАИСДиспетчер";
	ИначеЕсли ТекущаяСтраница = Элементы.СопоставлениеДанныхПоОР Тогда
	    Возврат "ЗаписатьДанныеВСистему";
	КонецЕсли;
КонецФункции

#Область ПараметрыФоновыхЗаданий

&НаКлиенте
Функция ПодготовитьДанныеДляФоновогоЗадания()
	СтруктураПараметров = Новый Структура("НаименованиеЗадания, ВыполняемыйМетод, ВариантЗадания,
											|ПодключитьОбработчикОповещенияОПрогрессе, ОбработчикОповещенияОПрогрессе,
											|ПодключитьОбработчикЗавершения, ОбработчикЗавершения,
											|ЗакрыватьФормуВыполненияПриЗавершении, ЗапускатьВыполнениеАвтоматически, ЗакрыватьФормуВладельцаПриВыполнении");
	ВариантЗадания = ОпределитьЗадание();
	
	СтруктураПараметров.ВариантЗадания = ВариантЗадания;
	СтруктураПараметров.ПодключитьОбработчикЗавершения = Истина;
	СтруктураПараметров.ОбработчикЗавершения = "ОбработчикОкончанияФоновогоЗадания";
	СтруктураПараметров.ЗапускатьВыполнениеАвтоматически = Истина;
	
	Если ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
		СтруктураПараметров.НаименованиеЗадания = "Загрузка данных по ОР из АИС Диспетчер";
		СтруктураПараметров.ВыполняемыйМетод = "торо_ИнтеграцияСАИСДиспетчер.ЗагрузкаДанныхПоОРИзАИСДиспетчер";
		СтруктураПараметров.ПодключитьОбработчикОповещенияОПрогрессе = Истина;
		СтруктураПараметров.ОбработчикОповещенияОПрогрессе = "ОбработчикОповещенияОПрогрессе";
		СтруктураПараметров.ЗакрыватьФормуВыполненияПриЗавершении = Истина;
		СтруктураПараметров.ЗакрыватьФормуВладельцаПриВыполнении = Ложь;
    ИначеЕсли ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
	    СтруктураПараметров.НаименованиеЗадания = "Запись данных по ОР из АИС Диспетчер в систему";
		СтруктураПараметров.ВыполняемыйМетод = "торо_ИнтеграцияСАИСДиспетчер.ЗаписатьДанныеПоОР";
		СтруктураПараметров.ПодключитьОбработчикОповещенияОПрогрессе = Истина;
		СтруктураПараметров.ОбработчикОповещенияОПрогрессе = "ОбработчикОповещенияОПрогрессе";
		СтруктураПараметров.ЗакрыватьФормуВыполненияПриЗавершении = Ложь;
		СтруктураПараметров.ЗакрыватьФормуВладельцаПриВыполнении = Истина;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыДляФоновогоЗадания(ДанныеЗадания)
	Если ДанныеЗадания.ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
		Результат = ПолучитьДанныеДляЗагрузки();
	ИначеЕсли ДанныеЗадания.ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
		Результат = ПолучитьДанныеДляЗаписи();
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляЗагрузки()
	СтруктураВозврата = Новый Структура();
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляЗаписи()
	СтруктураВозврата = Новый Структура();
	
	СтруктураВозврата.Вставить("КонтролируемыеПоказатели", СписокИзмеряемыхПоказателей.Выгрузить());
	СтруктураВозврата.Вставить("ПараметрыНаработки", СписокПараметровНаработки.Выгрузить().СкопироватьКолонки());
	СтруктураВозврата.Вставить("Запчасти", СписокЗапчастей.Выгрузить().СкопироватьКолонки());
	СтруктураВозврата.Вставить("ПаспортныеХарактеристикиОР", СписокПаспортныхХарактеристик.Выгрузить().СкопироватьКолонки());
	
	МассивПолейДляПроверки = Новый Массив();
	МассивПолейДляПроверки.Добавить("Показатель");
	МассивПолейДляПроверки.Добавить("Период");
	МассивПолейДляПроверки.Добавить("ПериодПлановойНаработки");
	МассивПолейДляПроверки.Добавить("ПлановаяНаработка");
	МассивПолейДляПроверки.Добавить("ПродолжительностьПериодаПлановойНаработки");
	МассивПолейДляПроверки.Добавить("КоэффициентИспользованияОборудования");
	
	Для каждого СтрокаПараметра Из СписокПараметровНаработки Цикл
	    Если ПроверкаЗаполненияПолейСтроки(СтрокаПараметра, МассивПолейДляПроверки) Тогда
		    ЗаполнитьЗначенияСвойств(СтруктураВозврата.ПараметрыНаработки.Добавить(), СтрокаПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаПаспортнойХарактеристики Из СписокПаспортныхХарактеристик Цикл
	    Если ЗначениеЗаполнено(СтрокаПаспортнойХарактеристики.Значение) Тогда
		    ЗаполнитьЗначенияСвойств(СтруктураВозврата.ПаспортныеХарактеристикиОР.Добавить(), СтрокаПаспортнойХарактеристики);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры") Тогда
	    СтруктураВозврата.Вставить("Запчасти", СписокЗапчастей.Выгрузить());
	Иначе
		Для каждого СтрокаЗапчасти Из СписокЗапчастей Цикл
		    Если Не (СтрокаЗапчасти.ХарактеристикиИспользуются И Не ЗначениеЗаполнено(СтрокаЗапчасти.ХарактеристикаНоменклатуры)) Тогда
				ЗаполнитьЗначенияСвойств(СтруктураВозврата.Запчасти.Добавить(), СтрокаЗапчасти);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

#Область ОбработчикиОповещенийФоновыхЗаданий

&НаКлиенте 
Процедура ОбработчикОповещенияОПрогрессе(Результат, ДополнительныеПараметры) Экспорт
	Прогресс = Результат.Прогресс;
	Если Не ТипЗнч(Прогресс) = Тип("Структура")
		Или ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("ЗавершеноАварийно")
		Или Результат.Свойство("Статус") И Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗадания.ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
	    Если Прогресс.Свойство("Текст") Тогда
			Элементы.СтатусЗагрузкиДанных.Заголовок = Прогресс.Текст;
		КонецЕсли;
	ИначеЕсли ДанныеЗадания.ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
	    Если Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Прогресс.Процент;
		КонецЕсли;
		Если Прогресс.Свойство("Текст") Тогда
			Элементы.СтатусЗаписиДанныхВСистему.Заголовок = Прогресс.Текст;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОкончанияФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	ЭтаФорма.Доступность = Истина;
	
	Если Результат = Неопределено Тогда
		ОбработатьПереходСтраниц(Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ОбработчикОкончанияФоновогоЗаданияНаСервере(Результат.АдресРезультата, ДанныеЗадания.ВариантЗадания);
	Если СтруктураВозврата.Статус = "Ошибка" Тогда
	    ОбработатьПереходСтраниц(Истина);
		Возврат;
	КонецЕсли;
	
	ОбработатьПереходСтраниц();
	IDЗадания = "";
	ДанныеЗадания = Неопределено;
	ЭтаФорма.Доступность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбработчикОкончанияФоновогоЗаданияНаСервере(АдресРезультата, ВариантЗадания)
	Если ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
		СтруктураВозврата = ЗагрузитьДанныеНаСервере(АдресРезультата);
	ИначеЕсли ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
	    Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		СтруктураВозврата = Новый Структура("Статус", Результат.Статус);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецОбласти