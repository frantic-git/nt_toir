////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем СоответствиеКоличестваЭлементовТаблицам;

&НаКлиенте
Перем ДанныеЗадания;

&НаКлиенте
Перем ДатаНачалаСинхронизации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Узел = торо_ИнтеграцияСАИСДиспетчер.ПолучитьУзелПланаОбмена();
	Если Не ЗначениеЗаполнено(Узел) Тогда
	    Элементы.СтраницыПомощникаЗагрузкиИСопоставленияДанных.Видимость = Ложь;
		Элементы.ЗагрузитьДанные.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницаПоказателиЭксплуатации.Видимость = Узел.ЗагружатьКонтролируемыеПоказателиОР Или Узел.ЗагружатьНаработкуОР;
	Элементы.СтраницаВидыЭксплуатации.Видимость = Узел.ЗагружатьСостоянияОР;
	Элементы.СтраницаПричиныПростоя.Видимость = Узел.ЗагружатьСостоянияОР;
	Элементы.ВидыЭксплуатацииОбязательныйВводВидаПуска.Видимость = ПолучитьФункциональнуюОпцию("торо_УчетПусковОборудования");
	Элементы.НоменклатураCost.Видимость = Узел.ЗагружатьЦеныНоменклатуры;
	Элементы.НоменклатураВидЦены.Видимость = Узел.ЗагружатьЦеныНоменклатуры;
	Элементы.НоменклатураДатаУстановкиЦены.Видимость = Узел.ЗагружатьЦеныНоменклатуры;
	
	ФОИспользоватьУправлениеПерсоналом = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУправлениеПерсоналом");
	Элементы.КадровыеДокументы.Видимость = ФОИспользоватьУправлениеПерсоналом;
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("Подразделения");
	ИменаТаблицФормы.Добавить("Сотрудники");
	ИменаТаблицФормы.Добавить("ОбъектыРемонта");
	ИменаТаблицФормы.Добавить("ВидыЭксплуатации");
	ИменаТаблицФормы.Добавить("ПричиныПростоя");
	ИменаТаблицФормы.Добавить("ПоказателиЭксплуатации");
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СоответствиеКоличестваЭлементовТаблицам = Новый Соответствие();
	СтруктураКоличестваЭлементовТаблицы = Новый Структура("КоличествоСопоставленных, ОбновлятьСопоставленные, КоличествоНесопоставленных, СоздаватьЕслиНеСопоставлено", 0, 0, 0, 0);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("Подразделения", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("Сотрудники", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("ОбъектыРемонта", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("ВидыЭксплуатации", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("ПричиныПростоя", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("ПоказателиЭксплуатации", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("ТиповыеОР", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("НаправленияОР", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("ПаспортныеХарактеристикиОР", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("Производители", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("Контрагенты", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("ИерархияНоменклатуры", СтруктураКоличестваЭлементовТаблицы);
	СоответствиеКоличестваЭлементовТаблицам.Вставить("Номенклатура", СтруктураКоличестваЭлементовТаблицы);
	
	Элементы.СтраницыПомощникаЗагрузкиИСопоставленияДанных.ТекущаяСтраница = Элементы.ЗагрузкаДанных;
		
	СтруктураОтбора = Новый ФиксированнаяСтруктура("ПодходитПодОтбор", Истина);
	Элементы.КадровыеДокументы.ОтборСтрок = СтруктураОтбора;
	Элементы.Номенклатура.ОтборСтрок = СтруктураОтбора;
	
	ИспользоватьФильтрПоИерархии = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Или Не (Элементы.СтраницыПомощникаЗагрузкиИСопоставленияДанных.ТекущаяСтраница = Элементы.СопоставлениеДанных И Не ЗначениеЗаполнено(IDЗадания)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные не сопоставлены. При закрытии формы данные не будут записаны в систему. Продолжить?'");
	ОписаниеОповещенияПередЗакрытием = Новый ОписаниеОповещения("ПередЗакрытиемПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияПередЗакрытием, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Отказ = Истина;
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыДанныеДляСопоставленияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПриИзмененииСопоставления();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрТаблицыСопоставленияПриИзменении(Элемент)
	УстановитьОтборВТаблицах();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСуществующиеПриИзменении(Элемент)
	ПриИзмененииНастройкиОбновленияСозданияДанных(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЕслиНеСопоставленоПриИзменении(Элемент)
	ПриИзмененииНастройкиОбновленияСозданияДанных(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	ДатаНачалаСинхронизации = ТекущаяДата();
	ЗапуститьВыполнение();
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьДанные(Команда)
	ЗапуститьВыполнение();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуСопоставления(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрации(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", торо_ИнтеграцияСАИСДиспетчер.ПолучитьСобытияЖурналаРегистрации());
	ПараметрыФормы.Вставить("ДатаНачала", ДатаНачалаСинхронизации);
	ПараметрыФормы.Вставить("ДатаОкончания", ТекущаяДата());
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлаги(Команда)
	ИзменитьВсеФлаги(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлаги(Команда)
	ИзменитьВсеФлаги(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлагиИерархияНоменклатуры(Команда)
	ИерархияНоменклатурыРаспространитьНаПодчиненныхРекурсивно(ИерархияНоменклатуры.ПолучитьЭлементы(), Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлагиИерархияНоменклатуры(Команда)
	ИерархияНоменклатурыРаспространитьНаПодчиненныхРекурсивно(ИерархияНоменклатуры.ПолучитьЭлементы(), Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодразделения

&НаКлиенте
Процедура ПодразделенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("Подразделения");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	УстановитьОтборКадровыхДокументов();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("Сотрудники");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКадровыеДокументы

&НаКлиенте
Процедура КадровыеДокументыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	МассивПолейДляПроверки = Новый Массив();
	МассивПолейДляПроверки.Добавить("ГрафикРаботы");
	ПроверкаЗаполненияПолейТаблиц("КадровыеДокументы", МассивПолейДляПроверки, Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта

&НаКлиенте
Процедура ОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("ОбъектыРемонта");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыЭксплуатации

&НаКлиенте
Процедура ВидыЭксплуатацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВидыЭксплуатацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	МассивПолейДляПроверки = Новый Массив();
	МассивПолейДляПроверки.Добавить("ТипЭксплуатации");
	ПроверкаЗаполненияПолейТаблиц("ВидыЭксплуатации", МассивПолейДляПроверки, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ВидыЭксплуатацииОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("ВидыЭксплуатации");
КонецПроцедуры

&НаКлиенте
Процедура ВидыЭксплуатацииТипЭксплуатацииПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ВидыЭксплуатации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипЭксплуатации = ПредопределенноеЗначение("Перечисление.торо_ТипЭксплуатации.Простой") Тогда
	    ТекущиеДанные.ОбязательныйВводВидаПуска = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныПростоя

&НаКлиенте
Процедура ПричиныПростояПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПричиныПростояОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("ПричиныПростоя");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказателиЭксплуатации

&НаКлиенте
Процедура ПоказателиЭксплуатацииПередНачаломИзменения(Элемент, Отказ)
	УстановитьОграничениеТипаПоказателяЭксплуатации();
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиЭксплуатацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиЭксплуатацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	МассивПолейДляПроверки = Новый Массив();
	МассивПолейДляПроверки.Добавить("ТипПараметра");
	ПроверкаЗаполненияПолейТаблиц("ПоказателиЭксплуатации", МассивПолейДляПроверки, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиЭксплуатацииОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("ПоказателиЭксплуатации");
	
	ТекущиеДанные = Элементы.ПоказателиЭксплуатации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Объект) = Тип("СправочникСсылка.ПараметрыВыработкиОС") Тогда
	    ТекущиеДанные.ТипПараметра = "Параметр наработки";
	ИначеЕсли ТипЗнч(ТекущиеДанные.Объект) = Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
	    ТекущиеДанные.ТипПараметра = "Контролируемый показатель";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиЭксплуатацииТипПараметраПриИзменении(Элемент)
	УстановитьОграничениеТипаПоказателяЭксплуатации();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТиповыеОР

&НаКлиенте
Процедура ТиповыеОРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТиповыеОРОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("ТиповыеОР");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаправленияОР

&НаКлиенте
Процедура НаправленияОРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НаправленияОРОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("НаправленияОР");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПаспортныеХарактеристикиОР

&НаКлиенте
Процедура ПаспортныеХарактеристикиОРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеХарактеристикиОРОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("ПаспортныеХарактеристикиОР");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроизводители

&НаКлиенте
Процедура ПроизводителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("Производители");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагенты

&НаКлиенте
Процедура КонтрагентыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("Контрагенты");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	УстановитьОтборНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("ИерархияНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыОбрабатыватьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИерархияНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ИспользоватьФильтрПоИерархии И Не ТекущиеДанные.Обрабатывать Тогда
	    ИзменитьФлагиНоменклатурыИерархии(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыРаспространитьНаПодчиненных(Команда)
	ТекущиеДанные = Элементы.ИерархияНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	ИдентификаторСтроки = Элементы.ИерархияНоменклатуры.ТекущиеДанные.ПолучитьИдентификатор();
	ПодчиненныеСтрокиИерархии = ИерархияНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьЭлементы();
	ИерархияНоменклатурыРаспространитьНаПодчиненныхРекурсивно(ПодчиненныеСтрокиИерархии, ТекущиеДанные.Обрабатывать);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНоменклатура

&НаКлиенте
Процедура НоменклатураПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Или Элементы.Номенклатура.ТекущийЭлемент.Имя = "НоменклатураОбрабатывать" Тогда
	    Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Номенклатура.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидНоменклатуры) Тогда
	    ТекстСообщения = НСтр("ru = 'Вид номенклатуры должен быть заполнен!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Не ТекущиеДанные.Cost = 0 И Не ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
	    ТекстСообщения = НСтр("ru = 'Вид цены должен быть заполнен, так как цена ненулевая!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Не ТекущиеДанные.Cost = 0 И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаУстановкиЦены) Тогда
	    ТекстСообщения = НСтр("ru = 'Дата установки цены должна быть заполнена, так как цена ненулевая!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОбъектПриИзменении(Элемент)
	ОбъектПриИзменении("Номенклатура");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоИерархии(Команда)
	ПометкаКнопки = Элементы.НоменклатураФильтрПоИерархии.Пометка;
	Если ПометкаКнопки Тогда
	    Элементы.НоменклатураФильтрПоИерархии.Пометка = Не ПометкаКнопки;
		ИспользоватьФильтрПоИерархии = Не ПометкаКнопки;
		УстановитьОтборНоменклатуры();
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ПометкаКнопки", Не ПометкаКнопки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ФильтрПоИерархииПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'После включения фильтра по иерархии у номенклатуры будет сброшен флаг ""Обрабатывать"", если у соответствующей группы данный флаг сброшен. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИерархияНоменклатурыРаспространитьНаПодчиненныхРекурсивно(Строки, Обрабатывать = Неопределено, ИмяНастройкиСопоставленныхНесопоставленных = Неопределено)
	Для каждого СтрокаИерархии Из Строки Цикл
		Если ЗначениеЗаполнено(ИмяНастройкиСопоставленныхНесопоставленных) Тогда
			МенятьЗначение = (ИмяНастройкиСопоставленныхНесопоставленных = "СоздаватьЕслиНеСопоставлено" И Не ЗначениеЗаполнено(СтрокаИерархии.Объект))
								Или (ИмяНастройкиСопоставленныхНесопоставленных = "ОбновлятьСуществующие" И ЗначениеЗаполнено(СтрокаИерархии.Объект));
								
			СтрокаИерархии.Обрабатывать = ?(МенятьЗначение, ЭтотОбъект[ИмяНастройкиСопоставленныхНесопоставленных], СтрокаИерархии.Обрабатывать);
		ИначеЕсли ЗначениеЗаполнено(Обрабатывать) Тогда
			СтрокаИерархии.Обрабатывать = Обрабатывать;
		Иначе
			Возврат;
		КонецЕсли;
		
		ИерархияНоменклатурыРаспространитьНаПодчиненныхРекурсивно(СтрокаИерархии.ПолучитьЭлементы(), Обрабатывать, ИмяНастройкиСопоставленныхНесопоставленных);
		
		Если ИспользоватьФильтрПоИерархии И Не СтрокаИерархии.Обрабатывать Тогда
		    ИзменитьФлагиНоменклатурыИерархии(СтрокаИерархии);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлагиНоменклатурыИерархииРекурсивно(Строки)
	Для каждого СтрокаИерархии Из Строки Цикл
		Если СтрокаИерархии.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменитьФлагиНоменклатурыИерархии(СтрокаИерархии);
		ИерархияНоменклатурыРаспространитьНаПодчиненныхРекурсивно(СтрокаИерархии.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлагиНоменклатурыИерархии(СтрокаИерархии, Обрабатывать = Ложь)
	Если СтрокаИерархии = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("MaterialAndComponentGroupID", СтрокаИерархии.ID);
	НайденныеСтроки = Номенклатура.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
	    СтрокаНоменклатуры.Обрабатывать = Обрабатывать;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОбъектУказанВИерархииНоменклатуры(СтрокиИрерархии, ОбъектИерархии, ИдентификаторСтроки)
	Для каждого СтрокаИерархии Из СтрокиИрерархии.ПолучитьЭлементы() Цикл
	    Если СтрокаИерархии.Объект = ОбъектИерархии И Не СтрокаИерархии.ПолучитьИдентификатор() = ИдентификаторСтроки Тогда
			Возврат Истина;
		КонецЕсли;
		
		ОбъектУказанВИерархииНоменклатуры(СтрокаИерархии, ОбъектИерархии, ИдентификаторСтроки);
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ФильтрПоИерархииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Или Не ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
	    Возврат;
	КонецЕсли;
	
	ПометкаКнопки = ДополнительныеПараметры.ПометкаКнопки;
	Элементы.НоменклатураФильтрПоИерархии.Пометка = ПометкаКнопки;
	ИспользоватьФильтрПоИерархии = ПометкаКнопки;
	УстановитьОтборНоменклатуры();
	ИзменитьФлагиНоменклатурыИерархииРекурсивно(ИерархияНоменклатуры.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияПолейТаблиц(ИмяТаблицы, МассивПолей, Отказ)
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы[ИмяТаблицы].ТекущаяСтрока;
	
	Для каждого ПолеТаблицы Из МассивПолей Цикл
		Если Не ЗначениеЗаполнено(ТекущиеДанные[ПолеТаблицы]) Тогда
			ЗаголовокПоля = Элементы[ИмяТаблицы + ПолеТаблицы].Заголовок;
			ШаблонСообщения = НСтр("ru = 'Поле <%1> не может быть пустым!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаголовокПоля);
			
			ШаблонПоля = НСтр("ru = '%1[%2].%3'");
			Поле = СтрШаблон(ШаблонПоля, ИмяТаблицы, ТекущаяСтрока, ПолеТаблицы);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаПоказателяЭксплуатации()
	ТекущиеДанные = Элементы.ПоказателиЭксплуатации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив();
	Если ТекущиеДанные.ТипПараметра = "Контролируемый показатель" Тогда
	    МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта"));
	ИначеЕсли ТекущиеДанные.ТипПараметра = "Параметр наработки" Тогда
	    МассивТипов.Добавить(Тип("СправочникСсылка.ПараметрыВыработкиОС"));
	Иначе
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ПараметрыВыработкиОС"));
	КонецЕсли;
	
	Элементы.ПоказателиЭксплуатацииОбъект.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(IDЗадания) Тогда
	    торо_ИнтеграцияСАИСДиспетчер.ОтменитьВыполнениеФоновогоЗадания(IDЗадания);
	КонецЕсли;
	
	Элементы.СтраницыПомощникаЗагрузкиИСопоставленияДанных.ТекущаяСтраница = Элементы.ОбменЗавершенСОшибкой;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСопоставления()
	ИмяТекущейСтраницыСопоставления = ИмяТекущейСтраницыСопоставления();
	
	ОбновлятьСуществующие = СоответствиеКоличестваЭлементовТаблицам[ИмяТекущейСтраницыСопоставления].ОбновлятьСопоставленные;
	СоздаватьЕслиНеСопоставлено = СоответствиеКоличестваЭлементовТаблицам[ИмяТекущейСтраницыСопоставления].СоздаватьЕслиНеСопоставлено;
	
	Если ИмяТекущейСтраницыСопоставления = "Номенклатура" Тогда
	    ИерархияКоличествоСопоставленных = СоответствиеКоличестваЭлементовТаблицам["ИерархияНоменклатуры"].КоличествоСопоставленных;
		ИерархияКоличествоНесопоставленных = СоответствиеКоличестваЭлементовТаблицам["ИерархияНоменклатуры"].КоличествоНесопоставленных;
		
		НоменклатураКоличествоСопоставленных = СоответствиеКоличестваЭлементовТаблицам["Номенклатура"].КоличествоСопоставленных;
		НоменклатураКоличествоНесопоставленных = СоответствиеКоличестваЭлементовТаблицам["Номенклатура"].КоличествоНесопоставленных;
		
		Элементы.ОбновлятьСуществующие.Заголовок = "Сопоставленные данные: папки (" + ИерархияКоличествоСопоставленных + "), элементы (" + НоменклатураКоличествоСопоставленных + ")";
		Элементы.СоздаватьЕслиНеСопоставлено.Заголовок = "Несопоставленные данные: папки (" + ИерархияКоличествоНесопоставленных + "), элементы (" + НоменклатураКоличествоНесопоставленных + ")";
		
		// Все
		ЭлементСписка = Элементы.ФильтрТаблицыСопоставления.СписокВыбора.НайтиПоЗначению(0);
		ЭлементСписка.Представление = "Всю номенклатуру (" + (НоменклатураКоличествоСопоставленных + НоменклатураКоличествоНесопоставленных) + ")";
		// Сопоставленные
		ЭлементСписка = Элементы.ФильтрТаблицыСопоставления.СписокВыбора.НайтиПоЗначению(1);
		ЭлементСписка.Представление = "Сопоставленную номенклатуру (" + НоменклатураКоличествоСопоставленных + ")";
		// Несопоставленные
		ЭлементСписка = Элементы.ФильтрТаблицыСопоставления.СписокВыбора.НайтиПоЗначению(2);
		ЭлементСписка.Представление = "Несопоставленную номенклатуру (" + НоменклатураКоличествоНесопоставленных + ")";
	Иначе
	    КоличествоСопоставленных = СоответствиеКоличестваЭлементовТаблицам[ИмяТекущейСтраницыСопоставления].КоличествоСопоставленных;
		КоличествоНесопоставленных = СоответствиеКоличестваЭлементовТаблицам[ИмяТекущейСтраницыСопоставления].КоличествоНесопоставленных;;
		
		Элементы.ОбновлятьСуществующие.Заголовок = "Сопоставленные данные (" + КоличествоСопоставленных + ")";
		Элементы.СоздаватьЕслиНеСопоставлено.Заголовок = "Несопоставленные данные (" + КоличествоНесопоставленных + ")";
		
		// Все
		ЭлементСписка = Элементы.ФильтрТаблицыСопоставления.СписокВыбора.НайтиПоЗначению(0);
		ЭлементСписка.Представление = "Все (" + (КоличествоСопоставленных + КоличествоНесопоставленных) + ")";
		// Сопоставленные
		ЭлементСписка = Элементы.ФильтрТаблицыСопоставления.СписокВыбора.НайтиПоЗначению(1);
		ЭлементСписка.Представление = "Сопоставленные (" + КоличествоСопоставленных + ")";
		// Несопоставленные
		ЭлементСписка = Элементы.ФильтрТаблицыСопоставления.СписокВыбора.НайтиПоЗначению(2);
		ЭлементСписка.Представление = "Несопоставленные (" + КоличествоНесопоставленных + ")";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастройкиОбновленияСозданияДанных(ИмяНастройки)
	ИмяТекущейСтраницыСопоставления = ИмяТекущейСтраницыСопоставления();
	
	СоответствиеКоличестваЭлементовТаблицам[ИмяТекущейСтраницыСопоставления].ОбновлятьСопоставленные = ОбновлятьСуществующие;
	СоответствиеКоличестваЭлементовТаблицам[ИмяТекущейСтраницыСопоставления].СоздаватьЕслиНеСопоставлено = СоздаватьЕслиНеСопоставлено;
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТекущейСтраницыСопоставления] Цикл
	    Если ИмяНастройки = "ОбновлятьСуществующие" И ЗначениеЗаполнено(СтрокаТаблицы.Объект) Тогда
		    СтрокаТаблицы.Обрабатывать = ОбновлятьСуществующие;
		ИначеЕсли ИмяНастройки = "СоздаватьЕслиНеСопоставлено" И Не ЗначениеЗаполнено(СтрокаТаблицы.Объект) Тогда
		    СтрокаТаблицы.Обрабатывать = СоздаватьЕслиНеСопоставлено;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ИмяТекущейСтраницыСопоставления = "Номенклатура" Тогда
	    Возврат;
	КонецЕсли;
	
	ИерархияНоменклатурыРаспространитьНаПодчиненныхРекурсивно(ИерархияНоменклатуры.ПолучитьЭлементы(),, ИмяНастройки);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПриИзменении(ИмяЭлемента)
	ТекущиеДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		Если ИмяЭлемента = "ИерархияНоменклатуры" И Не торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Объект, "ЭтоГруппа") Тогда
		    ТекстСообщения = НСтр("ru = 'В качестве объекта для сопоставления можно выбирать только группы!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			ТекущиеДанные.Объект = СтруктураДанныхДоРедактирования[ИмяЭлемента].Объект;
			Возврат;
		КонецЕсли;
		
		Если ИмяЭлемента = "ИерархияНоменклатуры" Тогда
			ОбъектУказан = ОбъектУказанВИерархииНоменклатуры(ИерархияНоменклатуры, ТекущиеДанные.Объект, ТекущиеДанные.ПолучитьИдентификатор());
		Иначе
			СтруктураПоиска = Новый Структура("Объект", ТекущиеДанные.Объект);
			НайденныеСтроки = ЭтотОбъект[ИмяЭлемента].НайтиСтроки(СтруктураПоиска);
			ОбъектУказан = НайденныеСтроки.Количество() > 1;
		КонецЕсли;
		
		Если ОбъектУказан Тогда
		    ШаблонСообщения = НСтр("ru = 'Объект <%1> уже выбран в качестве соответсвия для объекта из АИС Диспетчер!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.Объект);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			ТекущиеДанные.Объект = СтруктураДанныхДоРедактирования[ИмяЭлемента].Объект;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементСоответствия = СоответствиеКоличестваЭлементовТаблицам[ИмяЭлемента];
	
	Если (ЗначениеЗаполнено(ТекущиеДанные.Объект) И ЗначениеЗаполнено(СтруктураДанныхДоРедактирования[ИмяЭлемента].Объект))
			Или (Не ЗначениеЗаполнено(ТекущиеДанные.Объект) И Не ЗначениеЗаполнено(СтруктураДанныхДоРедактирования[ИмяЭлемента].Объект)) Тогда
	    Возврат;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		ЭлементСоответствия.КоличествоСопоставленных = ЭлементСоответствия.КоличествоСопоставленных + 1;
		ЭлементСоответствия.КоличествоНесопоставленных = ЭлементСоответствия.КоличествоНесопоставленных - 1;
		ТекущиеДанные.Сопоставлен = Истина;
	Иначе
		ЭлементСоответствия.КоличествоСопоставленных = ЭлементСоответствия.КоличествоСопоставленных - 1;
		ЭлементСоответствия.КоличествоНесопоставленных = ЭлементСоответствия.КоличествоНесопоставленных + 1;
		ТекущиеДанные.Сопоставлен = Ложь;
	КонецЕсли;
	
	ПриИзмененииСопоставления();
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДанныеНаСервере(АдресВоВременномХранилище)
	Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтруктураВозврата = Новый Структура("СоответствиеКоличестваЭлементовТаблицам, Статус", Результат.СоответствиеКоличестваЭлементовТаблицам, Результат.Статус);
	
	Если Результат.Статус = "Ошибка" Тогда
	    Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураТаблиц = Результат.СтруктураТаблиц;
	
	Подразделения.Загрузить(СтруктураТаблиц.Подразделения);
	Сотрудники.Загрузить(СтруктураТаблиц.Сотрудники);
	КадровыеДокументы.Загрузить(СтруктураТаблиц.КадровыеДокументы);
	ОбъектыРемонта.Загрузить(СтруктураТаблиц.ОбъектыРемонта);
	ВидыЭксплуатации.Загрузить(СтруктураТаблиц.ВидыЭксплуатации);
	ПричиныПростоя.Загрузить(СтруктураТаблиц.ПричиныПростоя);
	ПоказателиЭксплуатации.Загрузить(СтруктураТаблиц.ПоказателиЭксплуатации);
	ТиповыеОР.Загрузить(СтруктураТаблиц.ТиповыеОР);
	НаправленияОР.Загрузить(СтруктураТаблиц.НаправленияОР);
	ПаспортныеХарактеристикиОР.Загрузить(СтруктураТаблиц.ПаспортныеХарактеристикиОР);
	Производители.Загрузить(СтруктураТаблиц.Производители);
	Контрагенты.Загрузить(СтруктураТаблиц.Контрагенты);
	Номенклатура.Загрузить(СтруктураТаблиц.Номенклатура);
	ЗначениеВРеквизитФормы(СтруктураТаблиц.ИерархияНоменклатуры, "ИерархияНоменклатуры");
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборВТаблицах()
	Если ФильтрТаблицыСопоставления = 0 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура();
	ИначеЕсли ФильтрТаблицыСопоставления = 1 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Сопоставлен", Истина);
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Сопоставлен", Ложь);
	КонецЕсли;
	
	Элементы.Подразделения.ОтборСтрок = СтруктураОтбора;
	Элементы.Сотрудники.ОтборСтрок = СтруктураОтбора;
	Элементы.ОбъектыРемонта.ОтборСтрок = СтруктураОтбора;
	Элементы.ВидыЭксплуатации.ОтборСтрок = СтруктураОтбора;
	Элементы.ПричиныПростоя.ОтборСтрок = СтруктураОтбора;
	Элементы.ПоказателиЭксплуатации.ОтборСтрок = СтруктураОтбора;
	Элементы.ТиповыеОР.ОтборСтрок = СтруктураОтбора;
	Элементы.НаправленияОР.ОтборСтрок = СтруктураОтбора;
	Элементы.ПаспортныеХарактеристикиОР.ОтборСтрок = СтруктураОтбора;
	Элементы.Производители.ОтборСтрок = СтруктураОтбора;
	Элементы.Контрагенты.ОтборСтрок = СтруктураОтбора;
	
	УстановитьОтборНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКадровыхДокументов()
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Для каждого КадровыйДокумент Из КадровыеДокументы Цикл
		Если КадровыйДокумент.ПодходитПодОтбор Тогда
		    КадровыйДокумент.ПодходитПодОтбор = Ложь;
		КонецЕсли;
		
		Если КадровыйДокумент.IntegrationID = ТекущиеДанные.IntegrationID Тогда
		    КадровыйДокумент.ПодходитПодОтбор = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНоменклатуры()
	ТекущиеДанные = Элементы.ИерархияНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Для каждого СтрокаНоменклатуры Из Номенклатура Цикл
		Если СтрокаНоменклатуры.ПодходитПодОтбор Тогда
		    СтрокаНоменклатуры.ПодходитПодОтбор = Ложь;
		КонецЕсли;
		
		Если (Не ИспользоватьФильтрПоИерархии Или ИспользоватьФильтрПоИерархии И СтрокаНоменклатуры.MaterialAndComponentGroupID = ТекущиеДанные.ID)
			И (ФильтрТаблицыСопоставления = 1 И ЗначениеЗаполнено(СтрокаНоменклатуры.Объект)
				Или ФильтрТаблицыСопоставления = 2 И Не ЗначениеЗаполнено(СтрокаНоменклатуры.Объект)
				Или ФильтрТаблицыСопоставления = 0) Тогда
		    СтрокаНоменклатуры.ПодходитПодОтбор = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтбора = Новый ФиксированнаяСтруктура("ПодходитПодОтбор", Истина);
	Элементы.Номенклатура.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПереходСтраниц(Ошибка = Ложь)
	СтраницыПомощника = Элементы.СтраницыПомощникаЗагрузкиИСопоставленияДанных;
	
	Если Ошибка Тогда
		СтраницыПомощника.ТекущаяСтраница = Элементы.ОбменЗавершенСОшибкой;
    ИначеЕсли СтраницыПомощника.ТекущаяСтраница = Элементы.ЗагрузкаДанных Тогда
		СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеДанных;
	ИначеЕсли СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеДанных Тогда
		СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаписьЗавершенаУспешно;
	КонецЕсли;
	
	Элементы.ЗагрузитьДанные.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВсеФлаги(ЗначениеФлагов)
	ИмяТекущейСтраницы = ИмяТекущейСтраницыСопоставления();
	
	ТаблицаФормы = ЭтотОбъект[ИмяТекущейСтраницы];
	
	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
	    СтрокаТаблицы.Обрабатывать = ЗначениеФлагов;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ИмяТекущейСтраницыСопоставления()
	ИмяТекущейСтраницы = Элементы.СтраницыДанныеДляСопоставления.ТекущаяСтраница.Имя;
	Возврат СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
КонецФункции

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьВыполнение()
	ЭтаФорма.Доступность = Ложь;
	
	ДанныеЗадания = ПодготовитьДанныеДляФоновогоЗадания();
	ПараметрыЗапуска = ПодготовитьПараметрыДляФоновогоЗадания(ДанныеЗадания, СоответствиеКоличестваЭлементовТаблицам);//
	
	ПараметрыФормы = Новый Структура("ДанныеЗадания, АдресПараметровЗапуска", ДанныеЗадания, ПараметрыЗапуска);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОкончанияФоновогоЗадания", ЭтотОбъект);
	ОткрытьФорму("ПланОбмена.торо_ИнтеграцияСАИСДиспетчер.Форма.ФормаВыполненияДлительнойОперацииСАИСДиспетчер", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Функция ОпределитьЗадание()
	ТекущаяСтраница = Элементы.СтраницыПомощникаЗагрузкиИСопоставленияДанных.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.ЗагрузкаДанных Тогда
		Возврат "ЗагрузитьИзАИСДиспетчер";
	ИначеЕсли ТекущаяСтраница = Элементы.СопоставлениеДанных Тогда
	    Возврат "ЗаписатьДанныеВСистему";
	КонецЕсли;
КонецФункции

#Область ПараметрыФоновыхЗаданий

&НаКлиенте
Функция ПодготовитьДанныеДляФоновогоЗадания()
	СтруктураПараметров = Новый Структура("НаименованиеЗадания, ВыполняемыйМетод, ВариантЗадания,
											|ПодключитьОбработчикОповещенияОПрогрессе, ОбработчикОповещенияОПрогрессе,
											|ПодключитьОбработчикЗавершения, ОбработчикЗавершения,
											|ЗакрыватьФормуВыполненияПриЗавершении, ЗапускатьВыполнениеАвтоматически, ЗакрыватьФормуВладельцаПриВыполнении");
	ВариантЗадания = ОпределитьЗадание();
	
	СтруктураПараметров.ВариантЗадания = ВариантЗадания;
	СтруктураПараметров.ПодключитьОбработчикЗавершения = Истина;
	СтруктураПараметров.ОбработчикЗавершения = "ОбработчикОкончанияФоновогоЗадания";
	СтруктураПараметров.ЗапускатьВыполнениеАвтоматически = Истина;
	
	Если ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
		СтруктураПараметров.НаименованиеЗадания = "Загрузить справочные данные из АИС Диспетчер";
		СтруктураПараметров.ВыполняемыйМетод = "торо_ИнтеграцияСАИСДиспетчер.НачальнаяЗагрузкаДанныхИзАИСДиспетчер";
		СтруктураПараметров.ПодключитьОбработчикОповещенияОПрогрессе = Истина;
		СтруктураПараметров.ОбработчикОповещенияОПрогрессе = "ОбработчикОповещенияОПрогрессе";
		СтруктураПараметров.ЗакрыватьФормуВыполненияПриЗавершении = Истина;
		СтруктураПараметров.ЗакрыватьФормуВладельцаПриВыполнении = Ложь;
    ИначеЕсли ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
	    СтруктураПараметров.НаименованиеЗадания = "Записать данные из АИС Диспетчер в систему";
		СтруктураПараметров.ВыполняемыйМетод = "торо_ИнтеграцияСАИСДиспетчер.ЗаписатьСопоставленныеДанные";
		СтруктураПараметров.ПодключитьОбработчикОповещенияОПрогрессе = Истина;
		СтруктураПараметров.ОбработчикОповещенияОПрогрессе = "ОбработчикОповещенияОПрогрессе";
		СтруктураПараметров.ЗакрыватьФормуВыполненияПриЗавершении = Ложь;
		СтруктураПараметров.ЗакрыватьФормуВладельцаПриВыполнении = Истина;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыДляФоновогоЗадания(ДанныеЗадания, СоответствиеКоличестваЭлементовТаблицам)
	Результат_ = Неопределено;
	Если ДанныеЗадания.ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
		Результат_ = ПолучитьДанныеДляЗагрузки(СоответствиеКоличестваЭлементовТаблицам);
	ИначеЕсли ДанныеЗадания.ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
		Результат_ = ПолучитьДанныеДляЗаписи(СоответствиеКоличестваЭлементовТаблицам);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Результат_, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляЗагрузки(СоответствиеКоличестваЭлементовТаблицам)
	СтруктураВозврата = Новый Структура("СоответствиеКоличестваЭлементовТаблицам", СоответствиеКоличестваЭлементовТаблицам);
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляЗаписи(СоответствиеКоличестваЭлементовТаблицам)
	
	СтруктураВозврата = Новый Структура();
	
	СтруктураОтбора = Новый Структура("Обрабатывать", Истина);
	
	СтруктураВозврата.Вставить("ТаблицаПодразделений", Подразделения.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("ТаблицаСотрудников", Сотрудники.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("ТаблицаОР", ОбъектыРемонта.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("ТаблицаВидовЭксплуатации", ВидыЭксплуатации.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("ТаблицаПричинПростоя", ПричиныПростоя.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("ТаблицаПоказателейЭксплуатации", ПоказателиЭксплуатации.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("ТиповыеОР", ТиповыеОР.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("НаправленияОР", НаправленияОР.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("ПаспортныеХарактеристикиОР", ПаспортныеХарактеристикиОР.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("Производители", Производители.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("Контрагенты", Контрагенты.Выгрузить(СтруктураОтбора));
	СтруктураВозврата.Вставить("ИерархияНоменклатуры", ДанныеФормыВЗначение(ИерархияНоменклатуры, Тип("ДеревоЗначений")));
	СтруктураВозврата.Вставить("Номенклатура", Номенклатура.Выгрузить(СтруктураОтбора));
	
	Запрос = Новый Запрос();
	
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.IntegrationID КАК IntegrationID
	               |ПОМЕСТИТЬ ВТ_Сотрудники
	               |ИЗ
	               |	&ТаблицаСотрудников КАК Сотрудники
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КадровыеДокументы.IntegrationID КАК IntegrationID,
	               |	КадровыеДокументы.DeptIntegrationID КАК DeptIntegrationID,
	               |	КадровыеДокументы.DeptName КАК DeptName,
	               |	КадровыеДокументы.ProfName КАК ProfName,
	               |	КадровыеДокументы.ГрафикРаботы КАК ГрафикРаботы,
	               |	КадровыеДокументы.ДатаКадровойОперации КАК ДатаКадровойОперации,
	               |	КадровыеДокументы.Документ КАК Документ
	               |ПОМЕСТИТЬ ВТ_КадровыеДокументы
	               |ИЗ
	               |	&ТаблицаКадровыехДокументов КАК КадровыеДокументы
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IntegrationID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КадровыеДокументы.IntegrationID КАК IntegrationID,
	               |	ВТ_КадровыеДокументы.DeptIntegrationID КАК DeptIntegrationID,
	               |	ВТ_КадровыеДокументы.DeptName КАК DeptName,
	               |	ВТ_КадровыеДокументы.ProfName КАК ProfName,
	               |	ВТ_КадровыеДокументы.ГрафикРаботы КАК ГрафикРаботы,
	               |	ВТ_КадровыеДокументы.ДатаКадровойОперации КАК ДатаКадровойОперации,
	               |	ВТ_КадровыеДокументы.Документ КАК Документ
	               |ИЗ
	               |	ВТ_КадровыеДокументы КАК ВТ_КадровыеДокументы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	               |		ПО ВТ_КадровыеДокументы.IntegrationID = ВТ_Сотрудники.IntegrationID";
#КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", СтруктураВозврата.ТаблицаСотрудников);
	Запрос.УстановитьПараметр("ТаблицаКадровыехДокументов", КадровыеДокументы.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураВозврата.Вставить("ТаблицаКадровыхДокументов", РезультатЗапроса.Выгрузить());
	
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

#Область ОбработчикиОповещенийФоновыхЗаданий

&НаКлиенте 
Процедура ОбработчикОповещенияОПрогрессе(Результат, ДополнительныеПараметры) Экспорт
	Прогресс = Результат.Прогресс;
	Если Не ТипЗнч(Прогресс) = Тип("Структура")
		Или ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("ЗавершеноАварийно")
		Или Результат.Свойство("Статус") И Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	ОбработатьОповещенияОПрогрессе(Прогресс);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОкончанияФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	ЭтаФорма.Доступность = Истина;
	Если Результат = Неопределено Тогда
		ОбработатьПереходСтраниц(Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ОбработчикОкончанияФоновогоЗаданияНаСервере(Результат.АдресРезультата, ДанныеЗадания.ВариантЗадания);
	Если СтруктураВозврата.Статус = "Ошибка" Тогда
	    ОбработатьПереходСтраниц(Истина);
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗадания.ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
		СоответствиеКоличестваЭлементовТаблицам = СтруктураВозврата.СоответствиеКоличестваЭлементовТаблицам;
		УстановитьОтборВТаблицах();
		ПриИзмененииСопоставления();
		IDЗадания = "";
		ДанныеЗадания = Неопределено;
		ЭтаФорма.Доступность = Истина;
	ИначеЕсли ДанныеЗадания.ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
	    
	КонецЕсли;
	
	ОбработатьПереходСтраниц();
КонецПроцедуры

&НаКлиенте 
Процедура ОбработатьОповещенияОПрогрессе(Прогресс)
	Если ДанныеЗадания.ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
	    Если Прогресс.Свойство("Текст") Тогда
			Элементы.СтатусЗагрузкиДанных.Заголовок = Прогресс.Текст;
		КонецЕсли;
	ИначеЕсли ДанныеЗадания.ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
	    Если Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Прогресс.Процент;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбработчикОкончанияФоновогоЗаданияНаСервере(АдресРезультата, ВариантЗадания)
	Если ВариантЗадания = "ЗагрузитьИзАИСДиспетчер" Тогда
		СтруктураВозврата = ЗагрузитьДанныеНаСервере(АдресРезультата);
	ИначеЕсли ВариантЗадания = "ЗаписатьДанныеВСистему" Тогда
	    Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		СтруктураВозврата = Новый Структура("Статус", Результат.Статус);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецОбласти