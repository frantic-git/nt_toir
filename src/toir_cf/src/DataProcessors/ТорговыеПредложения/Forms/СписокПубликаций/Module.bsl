
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	Если Не ТорговыеПредложения.ПравоНастройкиТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ИспользоватьВидыНоменклатуры = Ложь;
	ТорговыеПредложенияПереопределяемый.ФункциональнаяОпцияИспользуется(ИмяФормы, ИспользоватьВидыНоменклатуры);
	Если Не ИспользоватьВидыНоменклатуры Тогда
		ТорговыеПредложенияПереопределяемый.СообщитьОНеобходимостиИспользованияФункциональнойОпции(
			ИмяФормы, ИспользоватьВидыНоменклатуры, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТорговыхПредложений = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.Типы()[0]);
	ЕстьПравоПросмотраТаблицыТорговыхПредложений = ПравоДоступа("Просмотр", ТаблицаТорговыхПредложений);
	Элементы.Добавить.Доступность = ЕстьПравоПросмотраТаблицыТорговыхПредложений;
	УстановитьЗапросДинамическогоСписка(ТаблицаТорговыхПредложений);
	
	ЗаполнитьСписокЗарегистрированныхОрганизаций();
	
	Элементы.СписокОрганизация.Видимость = ОбщегоНазначенияБЭД.ИспользуетсяНесколькоОрганизаций();
	
	Элементы.СписокПубликоватьОстатки.Видимость = ТорговыеПредложения.НастройкиПодсистемы().ИспользоватьПубликациюОстатков;
	
	АвтоматическиСинхронизировать = АвтоматическаяСинхронизацияВключена();
	Элементы.Расписание.Заголовок = ТекущееРасписание();
	Элементы.Расписание.Доступность = АвтоматическиСинхронизировать;
	Элементы.НастроитьРасписание.Доступность = АвтоматическиСинхронизировать;
	Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
	Элементы.ДекорацияДлительнаяОперацияНадписьРасширеннаяПодсказка.Заголовок = НСтр("ru = 'Подготовка данных...'");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.НастроитьРасписание.Видимость = Ложь;
		Элементы.Расписание.Видимость = Ложь;
	КонецЕсли;
	
	ИмяОбъектаСоглашения = "Справочник." + Метаданные.НайтиПоТипу(Метаданные.РегистрыСведений.
		СостоянияСинхронизацииТорговыеПредложения.Измерения.ТорговоеПредложение.Тип.Типы()[0]).Имя;
		
	Элементы.СписокТорговоеПредложение.Заголовок = Метаданные.НайтиПоТипу(
		Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.Типы()[0]).ПредставлениеОбъекта;
	
	ВыполнитьДлительнуюОперацию();
	
	ПроверитьИзменениеПрайсЛистов(ДлительнаяОперацияПроверкаИзменений, УникальныйИдентификатор);
	
	ТорговыеПредложенияСлужебный.НайтиДлительнуюОперациюТорговогоСинхронизацииТорговыхПредложений(ДлительнаяОперацияСинхронизацияТорговыхПредложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	Элементы.Список.Обновить();
	
	Оповестить("ТорговыеПредложения_ИзменениеСинхронизации", ВыбранноеЗначение, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ПослеЗаписи" Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "СинхронизацияТорговыхПредложений_ПриИзменении" Тогда
		
		АвтоматическиСинхронизировать = АвтоматическаяСинхронизацияВключена();
		Элементы.Расписание.Заголовок = ТекущееРасписание();
		Элементы.Расписание.Доступность = АвтоматическиСинхронизировать;
		Элементы.НастроитьРасписание.Доступность = АвтоматическиСинхронизировать;
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ОбновлениеПубликаций" Тогда
		
		ВыполнитьДлительнуюОперацию();
		ОжидатьДлительнуюОперацию();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ОбновлениеСостоянийТорговыхПредложений" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ОбработкаОповещенияСинхронизацииТорговыхПредложений(ИмяСобытия, Источник, Параметр,
		ДлительнаяОперацияСинхронизацияТорговыхПредложений, ПараметрыСинхронизации());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьДлительнуюОперацию();
	
	ОжидатьПроверкиПрайсЛистов();
	
	ТорговыеПредложенияКлиент.ОтобразитьСостояниеСинхронизацииТорговыхПредложений(ПараметрыСинхронизации(), 
		ДлительнаяОперацияСинхронизацияТорговыхПредложений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияДлительнаяОперацияНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьФоновоеЗадание" Тогда
		СтандартнаяОбработка = Ложь;
		ТорговыеПредложенияВызовСервера.ОтменитьФоновоеЗадание(ДлительнаяОперацияСинхронизацияТорговыхПредложений);
		Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
		УстановитьТорговоеПредложениеСинхронизации(Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоляДополнительныхНастроек           = "СписокАдресЭлектроннойПочты, СписокДополнительноеОписание";
	ПоляДополнительныхНастроекПубликации = "СписокПубликоватьЦены, СписокПубликоватьСрокиПоставки, 
										   |СписокПубликоватьОстатки, СписокПубликоватьРегионыДоступностиТоваров";
	
	ОткрытьФормуДиагностики = Ложь;
	Если Поле = Элементы.СписокОписаниеОшибки 
		И ТекущиеДанные.Состояние = 
			ПредопределенноеЗначение(
				"Перечисление.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации") Тогда
		ОткрытьФормуДиагностики = Истина;
	КонецЕсли;
	Если Поле = Элементы.НомерКартинкиПредупреждения И ТекущиеДанные.НомерКартинкиПредупреждения = 0 Тогда
		ОткрытьФормуДиагностики = Истина;
	КонецЕсли;
	
	Если СтрНайти(ПоляДополнительныхНастроек, Поле.Имя) Тогда
		ТорговыеПредложенияКлиент.ОткрытьФормуНастроекПубликации(ТекущиеДанные.ТорговоеПредложение, ЭтотОбъект);
	ИначеЕсли СтрНайти(ПоляДополнительныхНастроекПубликации, Поле.Имя) Тогда
		ТекущийЭлементИмя = Поле.Имя;
		ИмяРеквизита = СтрЗаменить(ТекущийЭлементИмя, "Список", "");
		ИзменитьЗаписьРегистра(ТекущиеДанные.ТорговоеПредложение, ИмяРеквизита, Не ТекущиеДанные[ИмяРеквизита]);
		Элементы.Список.Обновить();
	ИначеЕсли ОткрытьФормуДиагностики Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ПрайсЛист", ТекущиеДанные.ТорговоеПредложение);
		ПараметрыОткрытияФормы.Вставить("ТребуетсяВыполнитьПроверкуДанных", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИсправленияОшибокТорговыхПредложений", ЭтотОбъект);
		
		ТорговыеПредложенияКлиент.ОткрытьФормуДиагностикиТорговыхПредложений(
			ПараметрыОткрытияФормы, ЭтотОбъект, ОписаниеОповещения);
		
	ИначеЕсли Поле = Элементы.СписокОписаниеОшибки И Не ТекущиеДанные.Отключено И ТекущиеДанные.Состояние
		= ПредопределенноеЗначение(
				"Перечисление.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично") Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПрайсЛист", ТекущиеДанные.ТорговоеПредложение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("СостояниеПубликации", "Ошибка, ОжидаетПубликации");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИсправленияОшибокТорговыхПредложений", ЭтотОбъект);
		
		ПараметрыОткрытияФормы = ТорговыеПредложенияКлиент.ПараметрыОткрытияФормы();
		
		ПараметрыОткрытияФормы.ПараметрыФормы     = ПараметрыФормы;
		ПараметрыОткрытияФормы.ВладелецФормы      = ЭтотОбъект;
		ПараметрыОткрытияФормы.ОписаниеОповещения = ОписаниеОповещения;
		
		ТорговыеПредложенияКлиент.ОткрытьФормуСостоянияПубликацииТоваров(ПараметрыОткрытияФормы);
		
	Иначе
		ОчиститьСообщения();
		ФормаОбъектаСоглашения = ИмяОбъектаСоглашения + ".ФормаОбъекта";
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.ТорговоеПредложение);
		ОткрытьФорму(ФормаОбъектаСоглашения, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	УдалитьВосстановитьПубликацию(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Добавить(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", ЗарегистрированныеОрганизации);
	ОчиститьСообщения();
	ОткрытьФорму(ИмяОбъектаСоглашения + ".ФормаВыбора", Новый Структура("Отбор", Отбор),ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВосстановитьПубликацию(Элемент, Отказ = Неопределено)

	Отказ = Истина;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыМетода = ПараметрыИзмененияСостоянияТорговыхПредложений();
		ПараметрыМетода.ТорговыеПредложения = Элементы.Список.ВыделенныеСтроки;
		
		Если Элементы.Список.ТекущиеДанные.ДействиеСинхронизации = ПредопределенноеЗначение("Перечисление.ДействияСинхронизацииТорговыеПредложения.Удаление") Тогда
			Действие = НСтр("ru = 'Восстановить'");
			ПараметрыМетода.ЭтоОтменаУдаления = Истина;
		Иначе
			Действие = НСтр("ru = 'Удалить'");
			ПараметрыМетода.ЭтоУдаление = Истина;
		КонецЕсли;
		
		УдалитьВосстановитьПубликациюПродолжение = Новый ОписаниеОповещения("УдалитьВосстановитьПубликациюПродолжение",
			ЭтотОбъект, ПараметрыМетода);
			
		ТекстВопроса = СтрШаблон(НСтр("ru = '%1 публикацию торгового предложения?'"), Действие);
		
		ПоказатьВопрос(УдалитьВосстановитьПубликациюПродолжение,
			ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,
			НСтр("ru = 'Удаление (восстановление) публикации.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВключитьПубликацию(Элемент, Отказ = Неопределено)
	
	Отказ = Истина;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыМетода = ПараметрыИзмененияСостоянияТорговыхПредложений();
		ПараметрыМетода.ТорговыеПредложения = Элементы.Список.ВыделенныеСтроки;
		
		Если Элементы.Список.ТекущиеДанные.Отключено = Истина Тогда
			Действие = НСтр("ru = 'Включить'");
			ПараметрыМетода.ЭтоВключениеПубликации = Истина;
		Иначе
			Действие = НСтр("ru = 'Отключить'");
			ПараметрыМетода.ЭтоОтключениеПубликации = Истина;
		КонецЕсли;
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтключитьВключитьПубликациюПродолжение",
			ЭтотОбъект, ПараметрыМетода);
			
		ТекстВопроса = СтрШаблон(НСтр("ru = '%1 публикацию торгового предложения?'"), Действие);
		
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, НСтр("ru = 'Отключение (включение) публикации.'")); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьТорговыеПредложения(Команда)
	
	Отказ = Ложь;
	ОрганизацииТорговыхПредложений = ПолучитьОрганизацииОпубликованныхТорговыхПредложений();
	ПодключитьОрганизацииТорговыхПредложений(ОрганизацииТорговыхПредложений, Отказ, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ВыполнитьСинхронизациюТорговыхПредложений(ПараметрыСинхронизации(),
		ДлительнаяОперацияСинхронизацияТорговыхПредложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОрганизацииТорговыхПредложений(Организации, Отказ, ВыполнитьСинхронизацию = Ложь)
	
	ТекущийИндекс = Организации.ВГраница();
	Пока ТекущийИндекс >= 0 Цикл
		
		Организация = Организации[ТекущийИндекс];
		
		Если ИнтеграцияТорговыеПредложенияКлиент.ОрганизацияНеПодключенаТребуетсяПовторноеПодключение(Организация) Тогда
			
			Отказ = Истина;
			
			Организации.Удалить(ТекущийИндекс);
			
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Доступ к сервису 1С:Бизнес-сеть приостановлен: 
				|Токен обновления Бизнес-сети не действителен. 
				|Необходимо повторное подключение организации к Бизнес-сети.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Организации", Организации);
			ДополнительныеПараметры.Вставить("ВыполнитьСинхронизацию", ВыполнитьСинхронизацию);
			Оповещение = Новый ОписаниеОповещения("ПослеПодключенияОрганизации", ЭтотОбъект,
				ДополнительныеПараметры);
			
			ИнтеграцияТорговыеПредложенияКлиент.ОткрытьФормуПодключенияОрганизации(Организация, ЭтотОбъект, Оповещение);
			Возврат;
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(ТекущееРасписание());
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиСинхронизироватьПриИзменении(Элемент)
	
	УстановитьПараметрРегламентногоЗадания("Использование", АвтоматическиСинхронизировать);
	Элементы.Расписание.Доступность = АвтоматическиСинхронизировать;
	Элементы.НастроитьРасписание.Доступность = АвтоматическиСинхронизировать;
	
	Оповестить("СинхронизацияТорговыхПредложений_ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьПокупателей(Команда)
	
	ОчиститьСообщения();
	
	// Приглашение покупателей в сервис.
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимПриглашения", "Покупатели");
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ОтправкаПриглашенийКонтрагентам", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеПубликации(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ТорговыеПредложения.Форма.СостояниеПубликацииТоваров.ОткрытиеФормы");
	
	Отбор = Новый Структура("ПрайсЛист", ТекущиеДанные.ТорговоеПредложение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ПараметрыОткрытияФормы = ТорговыеПредложенияКлиент.ПараметрыОткрытияФормы();
	
	ПараметрыОткрытияФормы.ПараметрыФормы = ПараметрыФормы;
	ПараметрыОткрытияФормы.ВладелецФормы  = ЭтотОбъект;
	
	ТорговыеПредложенияКлиент.ОткрытьФормуСостоянияПубликацииТоваров(ПараметрыОткрытияФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УдалитьВосстановитьПубликациюПродолжение(РезультатВопроса, ПараметрыМетода) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода);
		Элементы.Список.Обновить();
		
		Оповестить("ТорговыеПредложения_ИзменениеСинхронизации",, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВключитьПубликациюПродолжение(РезультатВопроса, ПараметрыМетода) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода);
		Элементы.Список.Обновить();
		
		Оповестить("ТорговыеПредложения_ИзменениеСинхронизации",, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаВыбораНаСервере(ТорговоеПредложение, ДополнительныеПараметры = Неопределено)
	
	Отбор = Новый Структура("ТорговоеПредложение", ТорговоеПредложение);
	Выборка = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.Выбрать(Отбор);
	
	Если Не Выборка.Следующий() Тогда
		РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьИзменитьЗаписьРегистра(
			ТорговоеПредложение, "ПубликоватьЦены", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода)
	
	ТорговыеПредложенияСлужебный.ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление.
	УсловноеОформление.Элементы.Очистить();
	
	// Отображение информации об ошибке.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отображение информации об ошибке'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОписаниеОшибки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отображение гиперссылки перехода к списку проблемных позиций
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отображение информации об ошибке'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОписаниеОшибки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Перейти к неопубликованным товарам'"));
	
	// Представление состояния при статусе к удалению.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление состояния при удалении'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояние.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДействиеСинхронизации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Удаление публикации. Требуется синхронизация'"));
	
	// Представление состояния при отключении публикации (до синхронизации).
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление состояния при отключении публикации'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояние.Имя);
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлементаСостояние = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаСостояние.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлементаСостояние.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаСостояние.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
	ОтборЭлементаОтключено = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаОтключено.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Отключено");
	ОтборЭлементаОтключено.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаОтключено.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отключение публикации. Требуется синхронизация'"));
	
	// Представление состояния при отключении публикации (после синхронизации).
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление состояния при отключении публикации'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояние.Имя);
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлементаСостояние = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаСостояние.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлементаСостояние.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаСостояние.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано;
	ОтборЭлементаОтключено = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаОтключено.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Отключено");
	ОтборЭлементаОтключено.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаОтключено.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отключено'"));
	
	// Цвет текста при статусе к удалению.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Цвет текста при статусе к удалению'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДействиеСинхронизации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Представление пустого значения почты для уведомления.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление пустого значения электронной почты для уведомления'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокАдресЭлектроннойПочты.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.АдресЭлектроннойПочты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<заполнить>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Представление пустого значения описания для описания.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление пустого дополнительного описания'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДополнительноеОписание.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДополнительноеОписание");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Укажите описание>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Представление состояния торгового предложения в момент синхронизации
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление торгового предложения в момент синхронизации'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояние.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ТорговоеПредложение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТорговоеПредложениеСинхронизации");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Выполняется синхронизация'"));
	
	// Представление даты синхронизации в момент синхронизации
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление даты синхронизации в момент синхронизации'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДатаСинхронизации.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОписаниеОшибки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ТорговоеПредложение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТорговоеПредложениеСинхронизации");
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗарегистрированныхОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
	УстановитьПривилегированныйРежим(Истина);
	ЗарегистрированныеОрганизации.ЗагрузитьЗначения(
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"));
	
КонецПроцедуры

&НаСервере
Функция АвтоматическаяСинхронизацияВключена()
	
	Возврат ПолучитьПараметрРегламентногоЗадания("Использование", Ложь);
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПараметра)
	
	БизнесСеть.ИзменитьРегламентноеЗадание(Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений.Имя,
		ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПоУмолчанию)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Для каждого Задание Из СписокЗаданий Цикл
		Возврат Задание[ИмяПараметра];
	КонецЦикла;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

&НаСервере
Функция ТекущееРасписание()
	
	Возврат ПолучитьПараметрРегламентногоЗадания("Расписание", Новый РасписаниеРегламентногоЗадания);
	
КонецФункции

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрРегламентногоЗадания("Расписание", Расписание);
	Элементы.Расписание.Заголовок = Расписание;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапросДинамическогоСписка(ТаблицаТорговыхПредложений)
	
	ОсновнаяТаблица = ТаблицаТорговыхПредложений.ПолноеИмя();
	ТекстЗапросаСписка =
	"ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ТорговыеПредложенияТорговойПлощадки.ЕстьПредупреждения
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК НомерКартинкиПредупреждения
	|ПОМЕСТИТЬ НомераКартинокПредупреждений
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|СГРУППИРОВАТЬ ПО
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеСинхронизации.ТорговоеПредложение КАК ТорговоеПредложение,
	|	СостояниеСинхронизации.ДатаСинхронизации КАК ДатаСинхронизации,
	|	СостояниеСинхронизации.Состояние КАК Состояние,
	|	СостояниеСинхронизации.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	СостояниеСинхронизации.ОписаниеОшибки КАК ОписаниеОшибки,
	|	ВЫБОР
	|		КОГДА СостояниеСинхронизации.АдресЭлектроннойПочты = """"
	|			ТОГДА СостояниеСинхронизации.АдресЭлектроннойПочты
	|		ИНАЧЕ СостояниеСинхронизации.АдресЭлектроннойПочты + &АдресЭлектроннойПочтыИзменить
	|	КОНЕЦ КАК АдресЭлектроннойПочты,
	|	СостояниеСинхронизации.ДополнительноеОписание КАК ДополнительноеОписание,
	|	СостояниеСинхронизации.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(СостояниеСинхронизации.ТорговоеПредложение) КАК Наименование,
	|	ВЫБОР
	|		КОГДА СостояниеСинхронизации.ТорговоеПредложение = &ТорговоеПредложениеСинхронизации
	|			ТОГДА 5
	|		КОГДА
	|			СостояниеСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано)
	|		И НЕ СостояниеСинхронизации.Отключено
	|			ТОГДА 0
	|		КОГДА
	|			СостояниеСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично)
	|		И НЕ СостояниеСинхронизации.Отключено
	|			ТОГДА 4
	|		КОГДА
	|			СостояниеСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано)
	|		И СостояниеСинхронизации.Отключено
	|			ТОГДА 3
	|		КОГДА
	|			СостояниеСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинкиСтроки,
	|	СостояниеСинхронизации.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостояниеСинхронизации.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостояниеСинхронизации.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	СостояниеСинхронизации.ПубликоватьРегионыДоступностиТоваров КАК ПубликоватьРегионыДоступностиТоваров,
	|	СостояниеСинхронизации.Отключено КАК Отключено,
	|	ВЫБОР
	|		КОГДА СостояниеСинхронизации.Отключено
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(НомераКартинокПредупреждений.НомерКартинкиПредупреждения, 1)
	|	КОНЕЦ КАК НомерКартинкиПредупреждения
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостояниеСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТорговыхПредложений КАК ТорговыеПредложения
	|		ПО СостояниеСинхронизации.ТорговоеПредложение = ТорговыеПредложения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераКартинокПредупреждений КАК НомераКартинокПредупреждений
	|		ПО СостояниеСинхронизации.ТорговоеПредложение = НомераКартинокПредупреждений.ПрайсЛист";
	ТекстЗапросаСписка = СтрЗаменить(ТекстЗапросаСписка, "ТаблицаТорговыхПредложений", ОсновнаяТаблица);
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = ОсновнаяТаблица;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапросаСписка;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Список.Параметры.УстановитьЗначениеПараметра("ТорговоеПредложениеСинхронизации", Неопределено);
	
	ЗначениеПараметра = СтрШаблон(" %1", НСтр("ru='<изменить>'"));
	Список.Параметры.УстановитьЗначениеПараметра("АдресЭлектроннойПочтыИзменить", ЗначениеПараметра);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыИзмененияСостоянияТорговыхПредложений()
	
	Результат = ТорговыеПредложенияСлужебный.НовыйПараметрыИзмененияСостоянияТорговыхПредложений();
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВыполнитьДлительнуюОперацию()
	
	Элементы.ГруппаВнешниеПубликации.Видимость = Ложь;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = НСтр("ru = '1С:Торговая площадка. Получение внешних публикаций.'");
	Задание.ИмяПроцедуры = "ТорговыеПредложенияСлужебный.ПолучитьВнешниеПрайсЛисты";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0.2;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьДлительнуюОперацию()
	
	Если ДлительнаяОперация <> Неопределено И ДлительнаяОперация.Статус = "Выполняется" Тогда
	
		// Инициализация обработчика ожидания завершения длительной операции.
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение внешних публикаций.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);
		ПараметрыОжидания.Интервал = 1;
		ОбработкаЗавершенияПоиска = Новый ОписаниеОповещения("ПолучитьВнешниеПрайсЛистыЗавершение",
			ЭтотОбъект, ДлительнаяОперация);
			
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОбработкаЗавершенияПоиска, ПараметрыОжидания);
		
	Иначе
		
		ПолучитьВнешниеПрайсЛистыЗавершение(ДлительнаяОперация, ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВнешниеПрайсЛистыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Вывод сообщений из фонового задания.
	Отказ = Ложь;
	ТорговыеПредложенияКлиент.ОбработатьОшибкиФоновогоЗадания(Результат, Отказ);
	
	Организации = Новый Массив;
	Для Каждого Организация Из ЗарегистрированныеОрганизации Цикл
		Организации.Добавить(Организация.Значение);
	КонецЦикла;
	
	ПодключитьОрганизацииТорговыхПредложений(Организации, Отказ, Ложь);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		ПолучитьВнешниеПрайсЛистыОбработка(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияОрганизации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыполнитьСинхронизацию = Ложь;
	Если ДополнительныеПараметры.Свойство("ВыполнитьСинхронизацию") Тогда
		ВыполнитьСинхронизацию = ДополнительныеПараметры.ВыполнитьСинхронизацию;
	КонецЕсли;
	
	Если Не ВыполнитьСинхронизацию И РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организации = Неопределено;
	Отказ = Ложь;
	Если ДополнительныеПараметры.Свойство("Организации", Организации) И Организации <> Неопределено Тогда
		ПодключитьОрганизацииТорговыхПредложений(Организации, Отказ, ВыполнитьСинхронизацию);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если ВыполнитьСинхронизацию Тогда
		ТорговыеПредложенияКлиент.ВыполнитьСинхронизациюТорговыхПредложений(ПараметрыСинхронизации(),
			ДлительнаяОперацияСинхронизацияТорговыхПредложений);
	Иначе
		ВыполнитьДлительнуюОперацию();
		ОжидатьДлительнуюОперацию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВнешниеПрайсЛистыОбработка(АдресРезультата)
	
	ДлительнаяОперация = Неопределено;
	Результат = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		РезультатЗапроса = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(АдресРезультата);
		Если РезультатЗапроса <> Неопределено И РезультатЗапроса.Количество() > 0 Тогда
			Элементы.ВнешниеПубликации.Заголовок = НСтр("ru = 'Внешние публикации'")
				+ " (" + РезультатЗапроса.Количество() + ")";
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаВнешниеПубликации.Видимость = Результат <> Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеПубликацииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ВнешниеПубликации");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьИзменениеПрайсЛистов(ДлительнаяОперация, УникальныйИдентификатор)

	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ИнтеграцияБСПБЭД.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	НаименованиеЗадания	 = НСтр(
		"ru = 'Обновление статистики состояний публикации позиций торговых предложений.'");
	ИмяПроцедуры		 = "ТорговыеПредложенияСлужебный.ПроверитьИзменениеПрайсЛистовВФоне";
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.КлючФоновогоЗадания         = "ПроверитьИзменениеПрайсЛистовВФоне";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры,
		ПараметрыПроцедуры, ПараметрыВыполнения);


КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкиПрайсЛистов()

	Если ДлительнаяОперацияПроверкаИзменений.Статус = "Выполнено" Тогда
		ПослеПроверкиПрайсЛистов(ДлительнаяОперацияПроверкаИзменений, Неопределено);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиПрайсЛистов", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроверкаИзменений, 
			ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПрайсЛистов(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеИсправленияОшибокТорговыхПредложений(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТорговоеПредложениеСинхронизации(ТорговоеПредложение)

	ТорговоеПредложениеСинхронизации = ТорговоеПредложение;
	Список.Параметры.УстановитьЗначениеПараметра("ТорговоеПредложениеСинхронизации", ТорговоеПредложениеСинхронизации);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗаписьРегистра(ТорговоеПредложение, ИмяРеквизита, Значение)
	
	РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьИзменитьЗаписьРегистра(
		ТорговоеПредложение, ИмяРеквизита, Значение);
	
КонецПроцедуры

#Область СинхронизацияТорговыхПредложений

&НаКлиенте
Функция ПараметрыСинхронизации()
	
	ПараметрыСинхронизации = ТорговыеПредложенияКлиент.ПараметрыСинхронизацииТорговыхПредложений(ЭтотОбъект);
	ПараметрыСинхронизации.ВыводитьПрогрессВыполнения     = Истина;
	ПараметрыСинхронизации.ГруппаДлительнойОперации       = Элементы.ГруппаДлительнаяОперация;
	ПараметрыСинхронизации.ОповещениеОПрогрессеВыполнения = 
		Новый ОписаниеОповещения("ОповещениеСинхронизации", ЭтотОбъект);
	ПараметрыСинхронизации.ОповещениеОЗавершении          = 
		Новый ОписаниеОповещения("СинхронизироватьТорговыеПредложенияЗавершение", ЭтотОбъект);
	ПараметрыСинхронизации.НадписьПрогресса               = Элементы.ДекорацияДлительнаяОперацияНадпись;
	
	Возврат ПараметрыСинхронизации;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеСинхронизации(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения.Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Прогресс.Свойство("ДополнительныеПараметры")
		И ЗначениеЗаполнено(РезультатВыполнения.Прогресс.ДополнительныеПараметры) Тогда
		УстановитьТорговоеПредложениеСинхронизации(РезультатВыполнения.Прогресс.ДополнительныеПараметры.ТорговоеПредложениеСинхронизации);
	Иначе
		УстановитьТорговоеПредложениеСинхронизации(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьТорговыеПредложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Или Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТорговоеПредложениеСинхронизации(Неопределено);
	
	Элементы.Список.Обновить();
	
	ДлительнаяОперацияСинхронизацияТорговыхПредложений = Неопределено;
	
	ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОрганизацииОпубликованныхТорговыхПредложений()
	Возврат ТорговыеПредложенияСлужебный.ПолучитьОрганизацииОпубликованныхТорговыхПредложений();
КонецФункции

#КонецОбласти

#Область ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки

&НаКлиенте
Процедура ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки()
	
	ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиНаСервере(
		ДлительнаяОперацияПроверкаТорговыхПредложений, УникальныйИдентификатор);
	ОжидатьПроверкуТорговыхПредложений();
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиНаСервере(
	ДлительнаяОперация, Знач УникальныйИдентификаторФормы)
	
	Отбор = Новый Структура;
	
	ТорговыеПредложенияСлужебный.ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиВФоне(
		ДлительнаяОперация, Отбор, УникальныйИдентификаторФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкуТорговыхПредложений()

	Если ДлительнаяОперацияПроверкаТорговыхПредложений.Статус = "Выполнено" Тогда
		ПослеПроверкиТорговыхПредложений(ДлительнаяОперацияПроверкаТорговыхПредложений, Неопределено);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиТорговыхПредложений", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроверкаТорговыхПредложений, 
			ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиТорговыхПредложений(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения = Неопределено
			ИЛИ НЕ РезультатВыполнения.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ТорговыеПредложения_ОбновлениеСостоянийТорговыхПредложений");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти