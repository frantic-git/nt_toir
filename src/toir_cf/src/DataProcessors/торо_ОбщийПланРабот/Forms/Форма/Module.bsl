////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

&НаКлиенте
Перем СтрокаДереваРедактируется;

&НаКлиенте
Перем ИмяРедактируемойКолонки;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФОИспользоватьСкользящееПланирование = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСкользящееПланирование");
	ФОНазначениеНаРемонтыСУчетомРисков   = ПолучитьФункциональнуюОпцию("торо_НазначениеНаРемонтСУчетомРисков");
	ФОИспользоватьЗагрузкуВыгрузкуВMSProject = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВыгрузкуЗагрузкуMSProject");
	
	Если ФОИспользоватьСкользящееПланирование Тогда
		Для каждого Элемент Из Элементы.ГруппаГлубинаПланирования.ПодчиненныеЭлементы Цикл
			Элемент.ТолькоПросмотр = Истина;
		КонецЦикла; 
		Элементы.ГруппаОтборыПоИсполнителям.Заголовок = Элементы.ГруппаОтборыПоИсполнителям.Заголовок + ", план работ";
		Элементы.ДеревоРемонтыДокументПлановыхДат.Видимость = Ложь;
	Иначе
        Элементы.ВидПлана.Видимость                             = Ложь;
        Элементы.ФормаСохранитьПланПодразделения.Видимость      = Ложь;
        Элементы.ГруппаПланРабот.Видимость                      = Ложь;
        Элементы.ДеревоРемонтыГруппаРедактируемыеДаты.Видимость = Ложь;
		ВидПлана = Неопределено;
		Элементы.ГруппаРаспределениеДатПоГрафику.Видимость		= Ложь;
	КонецЕсли;
	
	Элементы.ОтобразитьНезапланированныеРемонты.Видимость = Ложь;
	Элементы.НезапланированныеРемонтыГруппа.Видимость	  = Ложь;
	
	Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
	ПоказыватьВнешниеОснования		= Истина;
	ПоказыватьДефекты               = Истина;
	ПоказыватьРемонтыППР            = Истина;
	ПоказыватьРемонтыРегламентные   = Истина;
	
	ДатаОтсчета = ТекущаяДата();
	
	ГруппироватьПоИсполнителю = 0;
	ВерхнийУровень = "4";
	НижнийУровень  = "2";
	
	ДиаграммаГантаПодразделения.ОтображатьЗаголовок = Ложь;
	ДиаграммаГантаПодразделения.ОтображатьЛегенду   = Ложь;
	ДиаграммаГантаПодразделения.АвтоОпределениеПолногоИнтервала = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВариантГруппировкиПриИзменении(Элементы.ВариантГруппировки);
	СформироватьЗаголовокСвернутойГруппы(Элементы.ПоказыватьВнешниеОснования);
	УстановитьЗаголовкиКолонок();
	РемонтыТаблицаИДиаграммаПриСменеСтраницы(Элементы.РемонтыТаблицаИДиаграмма,Элементы.РемонтыТаблицаИДиаграмма.ТекущаяСтраница);
	УстановитьДоступностьРедактированияпПлана();
	
	Если ФОИспользоватьСкользящееПланирование Тогда
	    ВидПланаПриИзменении(Элементы.ВидПлана);
	КонецЕсли;
	
	Если ФОИспользоватьЗагрузкуВыгрузкуВMSProject Тогда
		Элементы.ГруппаMSProject.Видимость = Истина;
		Элементы.ГруппаMSProject.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.торо_ПланРаботПодразделения") Тогда
		ПланРабот = ВыбранноеЗначение;
		ОбновитьЗаголовокКнопкиПланРабот();
		СтруктураДанныхПлана = ПолучитьСтруктуруДанныхИзСохраненногоПлана(ПланРабот);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПлана);
		
		ВидПланаПриИзменении(Элементы.ВидПлана);
		Элементы.ОтобразитьНезапланированныеРемонты.Видимость = Истина;
		Элементы.НезапланированныеРемонтыГруппа.Видимость	  = Истина;
		
		ПодразделениеИсполнитель.Очистить();
		Контрагент.Очистить();
		Бригада.Очистить();
		ДоговорКонтрагента.Очистить();
		ВидыРемонтов.Очистить();
		ОбъектРемонта.Очистить();
		ВладелецОР.Очистить();
		
		ПодразделениеИсполнитель.ЗагрузитьЗначения(СтруктураДанныхПлана.МассивПодразделений);
		Контрагент.ЗагрузитьЗначения(СтруктураДанныхПлана.МассивКонтрагентов);
		Бригада.ЗагрузитьЗначения(СтруктураДанныхПлана.МассивБригад);
		ДоговорКонтрагента.ЗагрузитьЗначения(СтруктураДанныхПлана.МассивДоговоров);
		ВидыРемонтов.ЗагрузитьЗначения(СтруктураДанныхПлана.ВидыРемонтовМассив);
		ОбъектРемонта.ЗагрузитьЗначения(СтруктураДанныхПлана.МассивОР);
		ВладелецОР.ЗагрузитьЗначения(СтруктураДанныхПлана.МассивВладельцев);
		
		УстановитьДоступностьРедактированияпПлана();
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	#Область ПериодичностьПриИзменении
	СписокВыбора = Новый Массив;
	Элементы.Детализация.ТолькоПросмотр = Ложь;
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Если КоличествоПериодов = 1 Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День"));
		Иначе
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год"));
		КонецЕсли;
		
	Иначе   
		Если ЗначениеЗаполнено(Периодичность) Тогда
			
			Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") 
				ИЛИ Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя"));
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День"));
			Иначе
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Час"));
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 	
	
	Элементы.Детализация.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	НайдЗначение = СписокВыбора.Найти(Детализация);
	
	Если НайдЗначение = Неопределено Тогда
		Детализация = Неопределено;
	КонецЕсли; 
	
	Если СписокВыбора.Количество() = 1 Тогда
		Элементы.Детализация.ТолькоПросмотр = Истина;
		Детализация = СписокВыбора[0];
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ДетализацияПриИзменении
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Год"   , Ложь);
	Соответствие.Вставить("Месяц" , Ложь);
	Соответствие.Вставить("Неделя", Ложь);
	Соответствие.Вставить("День"  , Ложь);
	Соответствие.Вставить("Час"   , Ложь);
	
	Если Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год") Тогда
		
		Соответствие["Год"]   = Истина;
		Соответствие["Месяц"] = Истина;
		
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц") Тогда
		
		Соответствие["Месяц"] = Истина;
		
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя") Тогда
		Соответствие["Неделя"]  = Истина;
		
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Час") Тогда
		
		Соответствие["Час"]  = Истина;
		Соответствие["День"]  = Истина;
		
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День") Тогда
		Соответствие["День"]  = Истина;
	Иначе
		Соответствие["Неделя"]= Истина;
		Соответствие["День"]  = Истина;
	КонецЕсли; 
	
	Для каждого ЭлементНастройки Из ДиаграммаГантаподразделения.ОбластьПостроения.ШкалаВремени.Элементы Цикл
		НастройкаИспользования = Соответствие.Получить(Строка(ЭлементНастройки.Единица));
		Если НЕ НастройкаИспользования = Неопределено Тогда
			ЭлементНастройки.Видимость = НастройкаИспользования;
		КонецЕсли; 
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ГруппироватьПоПриИзменении
	СписокВыбораВерхнийУровень = Элементы.ВерхнийУровень.СписокВыбора;
	СписокВыбораВерхнийУровень.Очистить();
	Если ГруппироватьПоИсполнителю = 1 Тогда
		СписокВыбораВерхнийУровень.Добавить("1", "Подразделение / Контрагент");
		
		Если ВидИсполнителяРабот = ПредопределенноеЗначение("Перечисление.торо_ДетализацияИсполнителя.Бригада") Тогда
			СписокВыбораВерхнийУровень.Добавить("2", "Подразделение + Бригада / Контрагент + Договор");
			СписокВыбораВерхнийУровень.Добавить("3", "Бригада / Договор");
		КонецЕсли;
	Иначе
		СписокВыбораВерхнийУровень.Добавить("4", "Подразделение / Контрагент");
	КонецЕсли; 
	
	#КонецОбласти

	#Область ОбновитьЗаголовокВГруппеДерева
	Если ВерхнийУровень = "1" Тогда
		Текст1 = "Исполнитель (Подразделение, контрагент)";
	ИначеЕсли ВерхнийУровень = "2" Тогда
		Текст1 = "Исполнитель | Уточнение исполнителя";
	ИначеЕсли ВерхнийУровень = "3" Тогда
		Текст1 = "Уточнение исполнителя (Бригада, договор)";
	Иначе
		Текст1 = "Владелец ОР";
	КонецЕсли; 
	
	Если НижнийУровень = "1" Тогда
		Текст2 = "Объекты ремонта";
	Иначе
		Текст2 = "Виды ремонта";
	КонецЕсли; 

	Элементы.ДеревоРемонтыГруппаИерархия.Заголовок = Текст1;
	Элементы.ДеревоРемонтыГруппа2.Заголовок        = Текст2;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПланаПриИзменении(Элемент)
	
	ВидыРемонтов.Очистить();
	
	ДанныеПоВидуПлана = ПолучитьДанныеПоВидуПлана(ВидПлана);
	
	МассивРемонтов = ДанныеПоВидуПлана.МассивРемонтов;
	ВидыРемонтов.ЗагрузитьЗначения(МассивРемонтов);
	ДоступныеВидыРемонтов.ЗагрузитьЗначения(МассивРемонтов);

	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПоВидуПлана, "Периодичность, КоличествоПериодов, Детализация, ВидИсполнителяРабот");
	
	Если ДанныеПоВидуПлана.ВидИсполнителяРабот = ПредопределенноеЗначение("Перечисление.торо_ДетализацияИсполнителя.Подразделение") Тогда
		Элементы.Бригада.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Бригада = Неопределено;
		ДоговорКонтрагента = Неопределено;
	Иначе
		Элементы.Бригада.Видимость = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
	КонецЕсли;
	
	ПериодичностьПриИзменении(Элементы.Периодичность);
	ВариантГруппировкиПриИзменении(Элементы.ВариантГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантГруппировкиПриИзменении(Элемент)
	
	СписокВыбораВерхнийУровень = Элементы.ВерхнийУровень.СписокВыбора;
	СписокВыбораВерхнийУровень.Очистить();
	
	Если ГруппироватьПоИсполнителю = 1 Тогда
		СписокВыбораВерхнийУровень.Добавить("1", "Подразделение / Контрагент");
		
		Если ВидИсполнителяРабот = ПредопределенноеЗначение("Перечисление.торо_ДетализацияИсполнителя.Бригада") Тогда
			СписокВыбораВерхнийУровень.Добавить("2", "Подразделение + Бригада / Контрагент + Договор");
			СписокВыбораВерхнийУровень.Добавить("3", "Бригада / Договор");
		КонецЕсли;

		Если ВерхнийУровень = "4" Тогда
			ВерхнийУровень = "1";
		КонецЕсли; 
		
	Иначе
		СписокВыбораВерхнийУровень.Добавить("4", "Подразделение / Контрагент");
		Если НЕ ВерхнийУровень = "4" Тогда
			ВерхнийУровень = "4";
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьЗаголовкиКолонок();

КонецПроцедуры

&НаКлиенте
Процедура ВерхнийУровеньПриИзменении(Элемент)
	УстановитьЗаголовкиКолонок();
КонецПроцедуры

&НаКлиенте
Процедура НижнийУровеньПриИзменении(Элемент)
	УстановитьЗаголовкиКолонок();
КонецПроцедуры

&НаКлиенте
Процедура ВидИсполнителяРаботПриИзменении(Элемент)
	Если ВидИсполнителяРабот = ПредопределенноеЗначение("Перечисление.торо_ДетализацияИсполнителя.Подразделение") Тогда
		Элементы.Бригада.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Бригада = Неопределено;
		ДоговорКонтрагента = Неопределено;
	Иначе
		Элементы.Бригада.Видимость = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ЗаполнитьСписокВыборкаДетализации();
	ДетализацияПриИзменении(Элементы.Детализация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияПриИзменении(Элемент)

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Год"   , Ложь);
	Соответствие.Вставить("Месяц" , Ложь);
	Соответствие.Вставить("Неделя", Ложь);
	Соответствие.Вставить("День"  , Ложь);
	Соответствие.Вставить("Час"   , Ложь);
	
	ФорматОтображения = "ДФ=dd.MM.yyyy";
	
	Если Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год") Тогда
		
		Соответствие["Год"]   = Истина;
		
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц") Тогда
		
		Соответствие["Месяц"] = Истина;
		
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя") Тогда
		
		Соответствие["Неделя"]  = Истина;
		
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Час") Тогда
		
		Соответствие["Месяц"]= Истина;
		Соответствие["Час"]  = Истина;
		Соответствие["День"] = Истина;
		ФорматОтображения = "";
		
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День") Тогда
		
		Соответствие["День"]  = Истина;
		Соответствие["Месяц"] = Истина;
		
	Иначе
		Соответствие["Неделя"]= Истина;
		Соответствие["День"]  = Истина;
	КонецЕсли; 
	
	Для каждого ЭлементНастройки Из ДиаграммаГантаподразделения.ОбластьПостроения.ШкалаВремени.Элементы Цикл
		НастройкаИспользования = Соответствие.Получить(Строка(ЭлементНастройки.Единица));
		Если Не НастройкаИспользования = Неопределено Тогда
			ЭлементНастройки.Видимость = НастройкаИспользования;
		КонецЕсли; 
	КонецЦикла;
	
	Элементы.ДеревоРемонтыДатаНачалаПлановаяДляОтображения.Формат = ФорматОтображения;
	Элементы.ДеревоРемонтыДатаОкончанияПлановаяДляОтображения.Формат = ФорматОтображения;
	Элементы.ДеревоРемонтыКрайняяДатаЗавершенияПлановаяДляОтображения.Формат = ФорматОтображения;
	Элементы.ДеревоРемонтыДатаНачалаРедактируемаяДляОтображения.Формат = ФорматОтображения;
	Элементы.ДеревоРемонтыДатаОкончанияРедактируемаяДляОтображения.Формат = ФорматОтображения;
	Элементы.ДеревоРемонтыКрайняяДатаЗавершенияРедактируемаяДляОтображения.Формат = ФорматОтображения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		ДиаграммаГантаПодразделения.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДиаграммаГантаПодразделения.УстановитьПолныйИнтервал(ДатаОтсчета, ДатаОкончания);
		КонецЕсли;
	Иначе
		ДиаграммаГантаПодразделения.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГантаПодразделения.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаГантаПодразделения.КратностьПериодическогоВарианта = 101 - ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыТаблицаИДиаграммаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ВидимостьДляДиаграммы = Элементы.РемонтыТаблицаИДиаграмма.ТекущаяСтраница = Элементы.ДиаграммаРемонтов;
	Элементы.ГруппаНастройкиДиаграммы.Видимость = ВидимостьДляДиаграммы;
	Элементы.ОтображениеЛегенды.Видимость       = ВидимостьДляДиаграммы;
КонецПроцедуры

#Область ЗаполениеСписковОтбора
&НаКлиенте
Процедура ПодразделениеИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПодбора = Новый Структура;
    СтруктураПодбора.Вставить("МассивВыбранных"                          , ПодразделениеИсполнитель.ВыгрузитьЗначения());
    СтруктураПодбора.Вставить("ТипЗначений"                              , Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
    СтруктураПодбора.Вставить("ИспользоватьВариантУчетаИерархииЭлементов", Истина);
    СтруктураПодбора.Вставить("ФОИспользоватьСкользящееПланирование"     , ФОИспользоватьСкользящееПланирование);
	СтруктураПодбора.Вставить("Заголовок"                                , НСтр("ru = 'Отбор по подразделениям-исполнителям'")); 
	
	ОткрытьПодбор(СтруктураПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПодразделениеИсполнитель.Очистить();
		ПодразделениеИсполнитель.ЗагрузитьЗначения(ВыбранноеЗначение);
		
		БригадаОбработкаВыбора(Элементы.Бригада, ОтобратьБригадыПоМассивуПодразделений(ВыбранноеЗначение, Бригада.ВыгрузитьЗначения()), Ложь);
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	
	СтруктураПодбора = Новый Структура;
    СтруктураПодбора.Вставить("МассивВыбранных"                          , ВладелецОР.ВыгрузитьЗначения());
    СтруктураПодбора.Вставить("ТипЗначений"                              , Новый ОписаниеТипов(МассивТипов));
    СтруктураПодбора.Вставить("ИспользоватьВариантУчетаИерархииЭлементов", Истина);
	СтруктураПодбора.Вставить("Заголовок"                                , НСтр("ru = 'Отбор по владельцам оборудования'")); 

	ОткрытьПодбор(СтруктураПодбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеВладелецОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВладелецОР.Очистить();
		ВладелецОР.ЗагрузитьЗначения(ВыбранноеЗначение);
	КонецЕсли; 
КонецПроцедуры
 
&НаКлиенте
Процедура БригадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПодбора = Новый Структура;
    СтруктураПодбора.Вставить("МассивВыбранныхПодразделений", ПодразделениеИсполнитель.ВыгрузитьЗначения());
    СтруктураПодбора.Вставить("МассивВыбранных"             , Бригада.ВыгрузитьЗначения());
    СтруктураПодбора.Вставить("ТипЗначений"                 , Новый ОписаниеТипов("СправочникСсылка.торо_РемонтныеБригады"));
    СтруктураПодбора.Вставить("Заголовок"                   , НСтр("ru = 'Отбор по бригадам'")); 
	
	ОткрытьПодбор(СтруктураПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БригадаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Бригада.Очистить();
		Бригада.ЗагрузитьЗначения(ВыбранноеЗначение);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтруктураПодбора = Новый Структура;
	СтруктураПодбора.Вставить("МассивВыбранных" , Контрагент.ВыгрузитьЗначения());
	СтруктураПодбора.Вставить("ТипЗначений"     , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	СтруктураПодбора.Вставить("Заголовок"       , НСтр("ru = 'Отбор по контрагентам'")); 
	
	ОткрытьПодбор(СтруктураПодбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Контрагент.Очистить();
		Контрагент.ЗагрузитьЗначения(ВыбранноеЗначение);
		
		ДоговорКонтрагентаОбработкаВыбора(Элементы.ДоговорКонтрагента, ОтобратьДоговорыПоМассивуКонтрагентов(ВыбранноеЗначение, ДоговорКонтрагента.ВыгрузитьЗначения()), Ложь);

	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПодбора = Новый Структура;
    СтруктураПодбора.Вставить("МассивВыбранных"            , ДоговорКонтрагента.ВыгрузитьЗначения());
    СтруктураПодбора.Вставить("МассивВыбранныхКонтрагентов", Контрагент.ВыгрузитьЗначения());
    СтруктураПодбора.Вставить("ТипЗначений"                , Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
    СтруктураПодбора.Вставить("Заголовок"                  , НСтр("ru = 'Отбор по договорам контрагентов'")); 
	
	ОткрытьПодбор(СтруктураПодбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ДоговорКонтрагента.Очистить();
		ДоговорКонтрагента.ЗагрузитьЗначения(ВыбранноеЗначение);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПодбора = Новый Структура;
    СтруктураПодбора.Вставить("МассивВыбранных", ВидыРемонтов.ВыгрузитьЗначения());
    СтруктураПодбора.Вставить("ТипЗначений", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	СтруктураПодбора.Вставить("Заголовок", НСтр("ru = 'Отбор по видам ремонтов'"));
	ФОИспользоватьСкользящееПланирование = ПолучитьФОИСП();
	Если ФОИспользоватьСкользящееПланирование Тогда
		СтруктураПодбора.Вставить("ВидПлана", ВидПлана);
	КонецЕсли;
	ОткрытьПодбор(СтруктураПодбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВидыРемонтов.Очистить();
		ВидыРемонтов.ЗагрузитьЗначения(ВыбранноеЗначение);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));

	СтруктураПодбора = Новый Структура;
    СтруктураПодбора.Вставить("МассивВыбранных"            , ОбъектРемонта.ВыгрузитьЗначения());
    СтруктураПодбора.Вставить("ТипЗначений"                , Новый ОписаниеТипов(МассивТипов));
    СтруктураПодбора.Вставить("Заголовок"                  , НСтр("ru = 'Отбор по объектам ремонта'"));
	СтруктураПодбора.Вставить("ИспользоватьВариантУчетаИерархииЭлементов", Истина);
	
	ОткрытьПодбор(СтруктураПодбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОбъектРемонта.Очистить();
		ОбъектРемонта.ЗагрузитьЗначения(ВыбранноеЗначение);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокСвернутойГруппы(Элемент)
	
	ЗаголовокСвернутойГруппы = НСтр("ru = 'Выводить информацию по%1'");
	
	МассивСтрокДокументов = Новый Массив;
	
	Если ПоказыватьРемонтыППР Тогда
		МассивСтрокДокументов.Добавить(НСтр("ru = ' план-графикам ППР'"));
	КонецЕсли;
	
	Если ПоказыватьРемонтыРегламентные Тогда
		МассивСтрокДокументов.Добавить(НСтр("ru = ' графикам регламентных мероприятий'"));
	КонецЕсли;
	
	Если ПоказыватьДефекты Тогда
		МассивСтрокДокументов.Добавить(НСтр("ru = ' заявкам по дефектам'"));
	КонецЕсли;
	
	Если ПоказыватьВнешниеОснования Тогда
		МассивСтрокДокументов.Добавить(НСтр("ru = ' заявкам по внешним основаниям'"));
	КонецЕсли;

	Элементы.ГруппаВыводитьИнформациюПо.ЗаголовокСвернутогоОтображения = СтрШаблон(ЗаголовокСвернутойГруппы, СтрСоединить(МассивСтрокДокументов, ","));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДиаграммаГантаПодразделения

&НаКлиенте
Процедура ДиаграммаГантаПодразделенияПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	Если Интервал.Расшифровка.НедоступенДляРедактирования Или
		(Интервал.Начало < ДатаОтсчета И Не Интервал.Начало = Интервал.Расшифровка.ДатаНачалаПериода) Или 
		(Интервал.Начало > ДатаОкончания) Тогда
	    ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьДатыДляИнтервала(Интервал);

	ID = Интервал.Расшифровка.ID;
	Если НижнийУровень = "2" Тогда
	    ВР = Интервал.Значение.Точка.Родитель.Расшифровка;
		ОР = Интервал.Значение.Точка.Расшифровка;
	Иначе
	    ОР = Интервал.Значение.Точка.Родитель.Расшифровка;
		ВР = Интервал.Значение.Точка.Расшифровка;
	КонецЕсли;
	
	СтрокаДерева = Неопределено;
	Для каждого СтрокаПервогоУровня Из ДеревоРемонты.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВторогоУровня Из СтрокаПервогоУровня.ПолучитьЭлементы() Цикл
			Если Не (НижнийУровень = "1" И СтрокаВторогоУровня.ОбъектРемонта = ОР) И Не (НижнийУровень = "2" И СтрокаВторогоУровня.ВидРемонта = ВР) Тогда
			    Продолжить;
			КонецЕсли;
			
		    Для каждого СтрокаТретьегоУровня Из СтрокаВторогоУровня.ПолучитьЭлементы() Цикл
				Если ID = СтрокаТретьегоУровня.ID_Ремонта И ((НижнийУровень = "2" И СтрокаТретьегоУровня.ОбъектРемонта = ОР) Или (НижнийУровень = "1" И СтрокаТретьегоУровня.ВидРемонта = ВР)) Тогда
					СтрокаДерева = СтрокаТретьегоУровня;
				    Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если СтрокаДерева = Неопределено Тогда
	    ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли; 
	
	Если Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год") Тогда
		ДатаНачалаПериода = НачалоГода(Интервал.Начало);
		ДатаОкончанияПериода = КонецГода(Интервал.Конец);
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц") Тогда
		ДатаНачалаПериода = НачалоМесяца(Интервал.Начало);
		ДатаОкончанияПериода = КонецМесяца(Интервал.Конец);
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя") Тогда
		ДатаНачалаПериода = НачалоНедели(Интервал.Начало);
		ДатаОкончанияПериода = КонецНедели(Интервал.Конец);
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День") Тогда
		ДатаНачалаПериода = НачалоДня(Интервал.Начало);
		ДатаОкончанияПериода = КонецДня(Интервал.Конец);
	Иначе
		ДатаНачалаПериода = Интервал.Начало;
		ДатаОкончанияПериода = ?(Интервал.Конец > Интервал.Начало, Интервал.Конец, Интервал.Начало + 3600);
	КонецЕсли;
	
	ДатаНач = ?(Интервал.Начало = Интервал.Расшифровка.ДатаНачалаПериода, Интервал.Расшифровка.ДатаНачала, Интервал.Начало);
	ДатаОконч = ?(Интервал.Конец = Интервал.Расшифровка.ДатаОкончанияПериода, Интервал.Расшифровка.ДатаОкончания, Интервал.Конец);
	
	Если ДатаНач > ДатаОконч Тогда
	    ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли; 
	
	СтрокаДерева.ДатаНачала = ДатаНач;
	СтрокаДерева.ДатаОкончания = ДатаОконч;
	
	СтрокаДерева.ДатаНачалаДляОтображения = ДатаНач;
	СтрокаДерева.ДатаОкончанияДляОтображения = ДатаОконч;
	
	Интервал.Начало = ДатаНач;
	Интервал.Конец = ДатаОконч;
	Интервал.Текст = Строка(ДатаНач) + " - " + Строка(ДатаОконч);
	Интервал.Расшифровка.ДатаНачала = СтрокаДерева.ДатаНачала;
	Интервал.Расшифровка.ДатаНачалаПериода = ДатаНач;
	Интервал.Расшифровка.ДатаОкончания = СтрокаДерева.ДатаОкончания;
	Интервал.Расшифровка.ДатаОкончанияПериода = ДатаОконч;
	
	ТочкаВторойУровень = Интервал.Значение.Точка.Родитель;
	ТочкаПервыйУровень = ТочкаВторойУровень.Родитель;
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(ДиаграммаГантаПодразделения.ПолучитьЗначение(ТочкаПервыйУровень, ДиаграммаГантаПодразделения.Серии[0]));
	МассивЗначений.Добавить(ДиаграммаГантаПодразделения.ПолучитьЗначение(ТочкаВторойУровень, ДиаграммаГантаПодразделения.Серии[0]));
	
	Для каждого ТекущееЗначение Из МассивЗначений Цикл
		Для каждого ТекущийИнтервал Из ТекущееЗначение Цикл
			Если ТекущийИнтервал.Расшифровка.ID = ID Тогда
				ТекущийИнтервал.Начало = ДатаНач;
				ТекущийИнтервал.Конец = ДатаОконч;
				ТекущийИнтервал.Текст = Строка(ДатаНач) + " - " + Строка(ДатаОконч);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПодразделенияВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонты

&НаКлиенте
Процедура ДеревоРемонтыПриАктивизацииЯчейки(Элемент)
	Если Не ЗначениеЗаполнено(СтрокаДереваРедактируется) Или (ЗначениеЗаполнено(СтрокаДереваРедактируется) И Не СтрокаДереваРедактируется) Тогда
	    Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.ДеревоРемонты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
	
	ЗаполнитьДатыСтрокиСУчетомДетализации(ИмяРедактируемойКолонки, ТекущиеДанные);
	
	ИмяРедактируемойКолонки = Элемент.ТекущийЭлемент.Имя;
	ИмяКолонки = СтрЗаменить(ИмяРедактируемойКолонки, "ДеревоРемонты", "");
	ИмяИсходнойКолонки = СтрЗаменить(ИмяКолонки, "РедактируемаяДляОтображения", "");
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "Редактируемая", "");
	ТекущиеДанные[ИмяКолонки] = ТекущиеДанные[ИмяИсходнойКолонки];
КонецПроцедуры
 
&НаКлиенте
Процедура ДеревоРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ИмяКолонки = Элементы.ДеревоРемонты.ТекущийЭлемент.Имя;
	ИмяРедактируемойКолонки = ИмяКолонки;
	СтрокаДереваРедактируется = Истина;
	Если ИмяКолонки = "ДеревоРемонтыДатаНачалаРедактируемаяДляОтображения"
		Или ИмяКолонки = "ДеревоРемонтыДатаОкончанияРедактируемаяДляОтображения" 
		Или ИмяКолонки = "ДеревоРемонтыКрайняяДатаЗавершенияРедактируемаяДляОтображения" Тогда
		ИмяКолонки = СтрЗаменить(ИмяКолонки, "ДеревоРемонты", "");
		ИмяИсходнойКолонки = СтрЗаменить(ИмяКолонки, "РедактируемаяДляОтображения", "");
		ИмяКолонки = СтрЗаменить(ИмяКолонки, "Редактируемая", "");
	    ТекущиеДанные = Элементы.ДеревоРемонты.ТекущиеДанные;
		ТекущиеДанные[ИмяКолонки] = ТекущиеДанные[ИмяИсходнойКолонки];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элементы.ДеревоРемонты.ТекущиеДанные;
	
	Если Не ТекущиеДанные.КрайняяДатаЗавершенияДляОтображения = Дата(1, 1, 1) И ТекущиеДанные.КрайняяДатаЗавершенияДляОтображения < ТекущиеДанные.ДатаОкончания Тогда
	    ТекстСообщения = НСтр("ru = 'Крайняя дата завершения ремонта не может быть меньше даты окончания!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	ИначеЕсли ТекущиеДанные.ДатаОкончанияДляОтображения < ТекущиеДанные.ДатаНачала Тогда
	    ТекстСообщения = НСтр("ru = 'Дата окончания ремонта не может быть меньше даты начала!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	ЗаполнитьДатыСтрокиСУчетомДетализации(ИмяКолонки, ТекущиеДанные);
	
	СтрокаДереваРедактируется = Ложь;
	Если ГруппироватьПоИсполнителюПередПостроением = 0 Тогда
	    Возврат;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура("ID_Ремонта", ТекущиеДанные.ID_Ремонта);
	МассивИзменённыхДатРемонтов = ТаблицаИзмененныхДатРемонтовДляЗаписи.НайтиСтроки(СтруктураПоиска);
	Если МассивИзменённыхДатРемонтов.Количество() = 0 Тогда
	    СтрокаТаблицы = ТаблицаИзмененныхДатРемонтовДляЗаписи.Добавить();
	Иначе
		СтруктураПоиска.Вставить("Исполнитель", ТекущиеДанные.Исполнитель);
		СтруктураПоиска.Вставить("УточнениеИсполнителя", ТекущиеДанные.УточнениеИсполнителя);
		МассивИзменённыхДатРемонтов = ТаблицаИзмененныхДатРемонтовДляЗаписи.НайтиСтроки(СтруктураПоиска);
		
		Если МассивИзменённыхДатРемонтов.Количество() = 0 Тогда
		    СтрокаТаблицы = ТаблицаИзмененныхДатРемонтовДляЗаписи.Добавить();
		Иначе
		    СтрокаТаблицы = МассивИзменённыхДатРемонтов[0];
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущиеДанные);
	СтрокаТаблицы.ДатаНачала = ТекущиеДанные.ДатаНачала;
	СтрокаТаблицы.ДатаОкончания = ТекущиеДанные.ДатаОкончания;
	СтрокаТаблицы.КрайняяДатаЗавершения = ТекущиеДанные.КрайняяДатаЗавершения;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элемент.ТекущиеДанные;
	Если Поле.Имя = "ДеревоРемонтыИсполнитель" И ЗначениеЗаполнено(ТекДанные.Исполнитель) Тогда 
		ПоказатьЗначение(, ТекДанные.Исполнитель);
	ИначеЕсли Поле.Имя = "ДеревоРемонтыОбъектРемонта" И ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) Тогда
		ПоказатьЗначение(, ТекДанные.ОбъектРемонта);
	ИначеЕсли Поле.Имя = "ДеревоРемонтыВидРемонта" И ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
		ПоказатьЗначение(, ТекДанные.ВидРемонта);
	ИначеЕсли Поле.Имя = "ДеревоРемонтыДокументОснование" И ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
		ПоказатьЗначение(, ТекДанные.ДокументОснование);
	ИначеЕсли Поле.Имя = "ДеревоРемонтыПланПодразделения" И ЗначениеЗаполнено(ТекДанные.ПланПодразделения) Тогда
		ПоказатьЗначение(, ТекДанные.ПланПодразделения);
	ИначеЕсли Поле.Имя = "ДеревоРемонтыДокументПлановыхДат" И ЗначениеЗаполнено(ТекДанные.ДокументПлановыхДат) Тогда
		ПоказатьЗначение(, ТекДанные.ДокументПлановыхДат);
	ИначеЕсли Поле.Имя = "ДеревоРемонтыДокументПлановыхДат" И ЗначениеЗаполнено(ТекДанные.ДокументПлановыхДат) Тогда
		ПоказатьЗначение(, ТекДанные.ДокументПлановыхДат);
		ИначеЕсли Поле.Имя = "ДеревоРемонтыДатаОкончанияРедактируемаяДляОтображения" 
		Или Поле.Имя = "ДеревоРемонтыДатаНачалаРедактируемаяДляОтображения" 
		Или Поле.Имя = "ДеревоРемонтыКрайняяДатаЗавершенияРедактируемаяДляОтображения" Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтыДатаОкончанияРедактируемаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонты.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПроверитьДатыРемонтовВСтроке(ТекущиеДанные);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтыДатаНачалаРедактируемаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонты.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПроверитьДатыРемонтовВСтроке(ТекущиеДанные);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтыКрайняяДатаЗавершенияРедактируемаяПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРемонты.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПроверитьДатыРемонтовВСтроке(ТекущиеДанные);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	ОткрытьФорму("Обработка.торо_ОбщийПланРабот.Форма.ФормаНастройки",, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьОбновить(Команда)
	
	МожноВыполнитьПостроение = Истина;
	
	СписокПроверяемыхПолей = Новый СписокЗначений;
	СписокПроверяемыхПолей.Добавить(ДатаОтсчета, "Дата отсчета");
	СписокПроверяемыхПолей.Добавить(КоличествоПериодов, "Количество периодов");
	СписокПроверяемыхПолей.Добавить(Периодичность, "Периодичность");
	СписокПроверяемыхПолей.Добавить(Детализация, "Детализация");
	СписокПроверяемыхПолей.Добавить(ВерхнийУровень, "Верхний уровень");
	СписокПроверяемыхПолей.Добавить(НижнийУровень, "Нижний уровень");
	
	Для каждого ЭлементСписка Из СписокПроверяемыхПолей Цикл
		Если Не ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Не заполнено поле %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭлементСписка.Представление);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			МожноВыполнитьПостроение = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Если Не МожноВыполнитьПостроение Тогда
		Возврат;
	КонецЕсли; 
	
	ДеревоРемонты.ПолучитьЭлементы().Очистить();
	ТаблицаИзмененныхДатРемонтовДляЗаписи.Очистить();
	ГруппироватьПоИсполнителюПередПостроением = ГруппироватьПоИсполнителю;
	
	СтруктураДанныхПервогоУровня = Новый Структура();
	СтруктураДанныхВторогоУровня = Новый Структура();
	СтруктураДанныхУровеньДанные = Новый Структура();
	
	ПроставитьСвойстваОтображенияВСтруктурах(СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные);
	
	ЗаполнитьСписокРемонтовНаСервере(СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные);
	
	РазвернутьДерево();

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНезапланированныеРемонты(Команда)
	
	МожноВыполнитьПостроение = Истина;
	
	СписокПроверяемыхПолей = Новый СписокЗначений;
	СписокПроверяемыхПолей.Добавить(ДатаОтсчета, "Дата отсчета");
	СписокПроверяемыхПолей.Добавить(КоличествоПериодов, "Количество периодов");
	СписокПроверяемыхПолей.Добавить(Периодичность, "Периодичность");
	СписокПроверяемыхПолей.Добавить(Детализация, "Детализация");
	СписокПроверяемыхПолей.Добавить(ВерхнийУровень, "Верхний уровень");
	СписокПроверяемыхПолей.Добавить(НижнийУровень, "Нижний уровень");
	
	Для каждого ЭлементСписка Из СписокПроверяемыхПолей Цикл
		Если Не ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Не заполнено поле %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭлементСписка.Представление);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			МожноВыполнитьПостроение = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Если Не МожноВыполнитьПостроение Тогда
		Возврат;
	КонецЕсли; 
	
	ДеревоРемонты.ПолучитьЭлементы().Очистить();
	
	СтруктураДанныхПервогоУровня = Новый Структура();
	СтруктураДанныхВторогоУровня = Новый Структура();
	СтруктураДанныхУровеньДанные = Новый Структура();
	
	ПроставитьСвойстваОтображенияВСтруктурах(СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные);
	
	ЗаполнитьСписокРемонтовНаСервере(СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные, Истина);
	
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПланПодразделения(Команда)
	МожноСоздатьПлан = Истина;
	МассивID = Новый Массив;
	Для каждого СтрокаПервыйУровень Из ДеревоРемонты.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВторойУровень Из СтрокаПервыйУровень.ПолучитьЭлементы() Цикл
			Для каждого ДетальнаяЗапись Из СтрокаВторойУровень.ПолучитьЭлементы() Цикл
				МассивID.Добавить(ДетальнаяЗапись.ID_Ремонта); 
				Если (НачалоДня(ДетальнаяЗапись.ДатаОкончания) - НачалоДня(ДетальнаяЗапись.ДатаНачала)) / (60 * 60 * 24 * 365) > 100 Тогда
					Элементы.ДеревоРемонты.ТекущаяСтрока = ДетальнаяЗапись.ПолучитьИдентификатор();
					МожноСоздатьПлан = Ложь;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	СтруктураВозврата = НаУказанныйПериодУжеИмеютсяДокументы(ПланРабот, Организация, ВидПлана, ДатаОтсчета, Периодичность, КоличествоПериодов, МассивID);
	
	Если МожноСоздатьПлан Тогда
		
		Если Не ЗначениеЗаполнено(ПланРабот) И Не СтруктураВозврата.ПланРабот = Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьПланПодразделенияПродолжение", ЭтаФорма, СтруктураВозврата);
			ТекстВопроса = НСтр("ru = 'На указанный период уже создан документ %1. Выполнить обновление данных в нем?'");
			ТекстВопроса = СтрШаблон(ТекстВопроса, СтруктураВозврата.ПланРабот);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			СохранитьПланПодразделенияПродолжение(КодВозвратаДиалога.Нет, СтруктураВозврата);
		КонецЕсли;
	Иначе  
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Указана некорректная дата, создание документа невозможно!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПланРабот(Команда)
	ПланРабот = Неопределено;
	ОбновитьЗаголовокКнопкиПланРабот();
	УстановитьДоступностьРедактированияпПлана();
	Элементы.ОтобразитьНезапланированныеРемонты.Видимость = Ложь;
	Элементы.НезапланированныеРемонтыГруппа.Видимость	  = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПланРабот(Команда)
	Если ЗначениеЗаполнено(ПланРабот) Тогда
		ПоказатьЗначение(, ПланРабот);
	Иначе
		ОткрытьФорму("Документ.торо_ПланРаботПодразделения.Форма.ФормаВыбора",Новый Структура("Отбор", Новый Структура("Проведен", Истина)), ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Если Элементы.РемонтыТаблицаИДиаграмма.ТекущаяСтраница = Элементы.ДиаграммаРемонтов  Тогда
		Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаПодразделения.Точки Цикл
			ДиаграммаГантаПодразделения.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
		КонецЦикла;
	Иначе
		СвернутьДерево();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Если Элементы.РемонтыТаблицаИДиаграмма.ТекущаяСтраница = Элементы.ДиаграммаРемонтов  Тогда
		Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаПодразделения.Точки Цикл
			ДиаграммаГантаПодразделения.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
		КонецЦикла;    
	Иначе
		РазвернутьДерево();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЛегенды(Команда)
	
	Элементы.ОтображениеЛегенды.Пометка = НЕ Элементы.ОтображениеЛегенды.Пометка;
	Элементы.ГруппаЛегенда.Видимость = Элементы.ОтображениеЛегенды.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьПланаРабот(Команда)
	
	ПроверяемыеПоля = Новый СписокЗначений;
	ПроверяемыеПоля.Добавить(ДатаОтсчета, "Дата отсчета");
	ПроверяемыеПоля.Добавить(КоличествоПериодов, "Количество периодов");
	ПроверяемыеПоля.Добавить(Периодичность, "Периодичность");
	ПроверяемыеПоля.Добавить(Детализация, "Детализация");
	
	УдачнаяПроверка = Истина;
	Для каждого ЭлементСписка Из ПроверяемыеПоля Цикл
		Если Не ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнено поле %1'"), ЭлементСписка.Представление);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			УдачнаяПроверка = Ложь;
		КонецЕсли;	
	КонецЦикла; 
	
	Если Не УдачнаяПроверка Тогда
		Возврат;
	КонецЕсли;	
		
	ДатаОкончания = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаОтсчета, Периодичность, КоличествоПериодов);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ИнтервалРазбиения", Детализация);
	ПараметрыПечати.Вставить("ДатаНачала", ДатаОтсчета);
	ПараметрыПечати.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыПечати.Вставить("Организация", Организация);
	ПараметрыПечати.Вставить("ВидПлана", ВидПлана); 
	
	ПараметрыПечати.Вставить("ВладельцыОР", ВладелецОР);
	ПараметрыПечати.Вставить("ОбъектыРемонта", ОбъектРемонта);
	ПараметрыПечати.Вставить("ВидыРемонта", ВидыРемонтов);
	ПараметрыПечати.Вставить("ПодразделенияИсполнители", ПодразделениеИсполнитель);
	ПараметрыПечати.Вставить("Контрагенты", Контрагент);
	ПараметрыПечати.Вставить("Бригады", Бригада);
	ПараметрыПечати.Вставить("ДоговораКонтрагентов", ДоговорКонтрагента);

 	ПараметрыПечати.Вставить("ПоказыватьРемонтыППР", ПоказыватьРемонтыППР);
	ПараметрыПечати.Вставить("ПоказыватьРемонтыРегламентные", ПоказыватьРемонтыРегламентные);
	ПараметрыПечати.Вставить("ПоказыватьДефекты", ПоказыватьДефекты);
	ПараметрыПечати.Вставить("ПоказыватьВнешниеОснования", ПоказыватьВнешниеОснования);
	
	торо_Печать.НапечататьДокумент("Обработка.торо_ОбщийПланРабот",
		"ПФ_MXL_МакетПланаРемонтовНаПериод", ПланРабот, ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПланМТО(Команда)
	
	МассивID = Новый СписокЗначений;
	Для каждого СтрокаПервыйУровень Из ДеревоРемонты.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВторойУровень Из СтрокаПервыйУровень.ПолучитьЭлементы() Цикл
			Для каждого ДетальнаяЗапись Из СтрокаВторойУровень.ПолучитьЭлементы() Цикл
				МассивID.Добавить(ДетальнаяЗапись.ID_Ремонта);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	Если МассивID.Количество() = 0 Тогда
	    ТекстСообщения = НСтр("ru = 'Невозможно сформировать отчет, так как таблица ремонтов пустая!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	Если Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год") Тогда
	    ПериодичностьДляОтчета = ПредопределенноеЗначение("Перечисление.Периодичность.Год");
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц") Тогда
		ПериодичностьДляОтчета = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя") Тогда
		ПериодичностьДляОтчета = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя");
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День")
			  Или Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Час") Тогда
		ПериодичностьДляОтчета = ПредопределенноеЗначение("Перечисление.Периодичность.День");
	КонецЕсли; 
		
	ПараметрыФормы = Новый Структура;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("IDРемонта", МассивID);
	
	СтруктураОтбора.Вставить("ПериодОтчета", Новый СтандартныйПериод(ДатаОтсчета, ДатаОкончания));
	СтруктураОтбора.Вставить("Периодичность", ПериодичностьДляОтчета);
	СтруктураОтбора.Вставить("УчитыватьППР", ПоказыватьРемонтыППР);
	СтруктураОтбора.Вставить("УчитыватьРегламентныеМероприятия", ПоказыватьРемонтыРегламентные);
	СтруктураОтбора.Вставить("УчитыватьСметыПоДефектам", ПоказыватьДефекты);
	СтруктураОтбора.Вставить("УчитыватьСметыПоВнешнимОснованиям", ПоказыватьВнешниеОснования);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("КлючВарианта", "ПланМТО");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_ПланМТОТрудозатратИнструментов.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВProject(Команда)
	
	СписокРемонтов = Новый Массив;
	Для каждого СтрокаИсполнитель из ДеревоРемонты.ПолучитьЭлементы() Цикл
		Для каждого СтрокаОР из СтрокаИсполнитель.ПолучитьЭлементы() Цикл
			Для каждого СтрокаРемонта из СтрокаОР.ПолучитьЭлементы() Цикл
				СписокРемонтов.Добавить(Новый Структура("ДокументРегистратор, ID", СтрокаРемонта.ДокументОснование, СтрокаРемонта.ID_Ремонта));
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Торо_ИнтеграцияСmsProject.ОтправитьВProject(СписокРемонтов,Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзProject(Команда)
	
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормы", ЭтотОбъект);
	Форма = ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораФайлаProjectКЗагрузке",,,,,, Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновленныеДокументы = Новый Массив;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") И РезультатЗакрытия <> "" Тогда
		Если НРег(Прав(РезультатЗакрытия, 3)) = "mpp" Тогда
			ОбновленныеДокументы = Торо_ИнтеграцияСmsProject.ЗагрузитьЗаявки(РезультатЗакрытия, "ПланРабот");
			
		ИначеЕсли НРег(Прав(РезультатЗакрытия, 3)) = "xml" Тогда
			ОбновленныеДокументы = Торо_ИнтеграцияСmsProject.ЗагрузитьЗаявкиИзXML(РезультатЗакрытия, "ПланРабот");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ОбновленныйДокумент из ОбновленныеДокументы Цикл
		Оповестить("ЗагрузкаИзПроджект", ОбновленныйДокумент);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыПоГрафикуДляВсех(Команда)
	Отказ = Ложь;
	ПроверитьЗаполненностьДляРасчетаДат(Отказ);
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицуРасчета();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыПоГрафикуДляВыбранных(Команда)
	Отказ = Ложь;
	ПроверитьЗаполненностьДляРасчетаДат(Отказ);
	ВыделенныеСтроки = Элементы.ДеревоРемонты.ВыделенныеСтроки;
	Если Отказ Тогда
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет выделенных строк.'"));
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицуРасчета(ВыделенныеСтроки);	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура СохранитьПланПодразделенияПродолжение(Результат, СтруктураПараметров) Экспорт
	СтруктураПараметров.Вставить("ОбновитьПлан", Ложь);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураПараметров.ОбновитьПлан = Истина;
		СтруктураПараметров.МассивIDИзДругихПланов = Новый Массив;
	    СохранитьПланПодразделенияОкончание(Результат, СтруктураПараметров);
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ПланРабот) Тогда
		СтруктураПараметров.ОбновитьПлан = Истина;
		СтруктураПараметров.ПланРабот = ПланРабот;
	КонецЕсли;
	
	Если Не СтруктураПараметров.МассивIDИзДругихПланов.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьПланПодразделенияОкончание", ЭтаФорма, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Не все ремонты попадут в новый документ, так как для них уже имеются планы работ. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СохранитьПланПодразделенияОкончание(КодВозвратаДиалога.Да, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура СохранитьПланПодразделенияОкончание(Результат, СтруктураПараметров) Экспорт
	
	Отказ = Ложь;
	
	Если СтруктураПараметров.ОбновитьПлан И Не Результат = КодВозвратаДиалога.Нет Тогда
	    СохранитьПланНаСервере(СтруктураПараметров.ПланРабот, СтруктураПараметров.МассивIDИзДругихПланов, Отказ);
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		СохранитьПланНаСервере(ПланРабот, СтруктураПараметров.МассивIDИзДругихПланов, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;	
	
	Если Не Отказ Тогда
		
		ДеревоРемонты.ПолучитьЭлементы().Очистить();
		
		СтруктураДанныхПервогоУровня = Новый Структура();
		СтруктураДанныхВторогоУровня = Новый Структура();
		СтруктураДанныхУровеньДанные = Новый Структура();
		
		ПроставитьСвойстваОтображенияВСтруктурах(СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные);
		
		ЗаполнитьСписокРемонтовНаСервере(СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные);
		
		РазвернутьДерево();
		
		ОбновитьЗаголовокКнопкиПланРабот();
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервереБезКонтекста 
Функция НаУказанныйПериодУжеИмеютсяДокументы(ПланРабот, Организация, ВидПлана, ДатаОтсчета, Периодичность, КоличествоПериодов, МассивID = Неопределено)
	
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
					|	торо_ПланРаботПодразделения.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ ВТ_ИмеющиесяПланы
					|ИЗ
					|	Документ.торо_ПланРаботПодразделения КАК торо_ПланРаботПодразделения
					|ГДЕ
					|	НЕ торо_ПланРаботПодразделения.ПометкаУдаления
					|	И НЕ торо_ПланРаботПодразделения.Ссылка = &Ссылка
					|	И торо_ПланРаботПодразделения.ОрганизацияПлана = &Организация
					|	И торо_ПланРаботПодразделения.ВидПлана = &ВидПлана
					|	И торо_ПланРаботПодразделения.ДатаОтсчета = &ДатаОтсчета
					|	И торо_ПланРаботПодразделения.ПериодичностьПланирования = &ПериодичностьПланирования
					|	И торо_ПланРаботПодразделения.КоличествоПериодов = &КоличествоПериодов
					|	И торо_ПланРаботПодразделения.Проведен
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СУММА(1) КАК КоличествоПланов
					|ИЗ
					|	ВТ_ИмеющиесяПланы КАК ВТ_ИмеющиесяПланы
					|
					|СГРУППИРОВАТЬ ПО
					|	ВТ_ИмеющиесяПланы.Ссылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТ_ИмеющиесяПланы.Ссылка КАК ПланРабот
					|ИЗ
					|	ВТ_ИмеющиесяПланы КАК ВТ_ИмеющиесяПланы
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	торо_СкользящийПланРаботСрезПоследних.ID_Ремонта КАК ID
					|ИЗ
					|	РегистрСведений.торо_СкользящийПланРабот.СрезПоследних(
					|			,
					|			ID_Ремонта В (&МассивID)
					|			И Регистратор В
					|				(ВЫБРАТЬ
					|					ВТ_ИмеющиесяПланы.Ссылка
					|				ИЗ
					|					ВТ_ИмеющиесяПланы)) КАК торо_СкользящийПланРаботСрезПоследних
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	торо_СкользящийПланРегламентныхМероприятийСрезПоследних.ID_Ремонта
					|ИЗ
					|	РегистрСведений.торо_СкользящийПланРегламентныхМероприятий.СрезПоследних(
					|			,
					|			ID_Ремонта В (&МассивID)
					|			И Регистратор В
					|				(ВЫБРАТЬ
					|					ВТ_ИмеющиесяПланы.Ссылка
					|				ИЗ
					|					ВТ_ИмеющиесяПланы)) КАК торо_СкользящийПланРегламентныхМероприятийСрезПоследних";
	# КонецОбласти
	
	Запрос.УстановитьПараметр("Ссылка" , ПланРабот);
    Запрос.УстановитьПараметр("Организация" , Организация);
    Запрос.УстановитьПараметр("ВидПлана" , ВидПлана);
    Запрос.УстановитьПараметр("ДатаОтсчета" , ДатаОтсчета);
    Запрос.УстановитьПараметр("ПериодичностьПланирования" , Периодичность);
    Запрос.УстановитьПараметр("КоличествоПериодов", КоличествоПериодов);
	Запрос.УстановитьПараметр("МассивID", МассивID);

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураВозврата = Новый Структура("ПланРабот, МассивIDИзДругихПланов, КоличествоПланов");
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		КоличествоПланов = РезультатЗапроса[2].Выгрузить().Количество();
		
		Если КоличествоПланов = 1 Тогда
		    СтруктураВозврата.ПланРабот = РезультатЗапроса[2].Выгрузить()[0].ПланРабот;
		Иначе
			СтруктураВозврата.ПланРабот = Неопределено;
		КонецЕсли;
		
		СтруктураВозврата.МассивIDИзДругихПланов = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("ID");
		СтруктураВозврата.КоличествоПланов = КоличествоПланов;
	Иначе
		СтруктураВозврата.ПланРабот = Неопределено;
		СтруктураВозврата.МассивIDИзДругихПланов = Новый Массив;
		СтруктураВозврата.КоличествоПланов = 0;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции
 
&НаСервере
Процедура ЗаполнитьСписокРемонтовНаСервере(СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные, ВыводСНезапланированными = Ложь)
	
	ДатаОкончания = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаОтсчета, Периодичность, КоличествоПериодов);
	
	Запрос = Новый Запрос;
	
	Если Не ЗначениеЗаполнено(ПланРабот) ИЛИ ВыводСНезапланированными Тогда
		# Область ТекстЗапроса
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
		|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
		|	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
		|	торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд КАК ЕстьНаряд,
		|	торо_ОбщиеДанныеПоРемонтам.ЕстьАкт КАК ЕстьАкт,
		|	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
		|	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование КАК ДокументОснование,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
		|	торо_АктуальныеПлановыеДатыРемонтов.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
		|	ВЫБОР
		|		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
		|			ТОГДА ""ППР""
		|		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)
		|			ТОГДА ""СПД""
		|		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот)
		|			ТОГДА ""СПВО""
		|		КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)
		|			ТОГДА ""РМ""
		|	КОНЕЦ КАК ИсточникДанных
		|ПОМЕСТИТЬ ВТ_АктуальныеДаты
		|ИЗ
		|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		|		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		|ГДЕ
		|	ВЫБОР
		|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
		|				ТОГДА &ПоказыватьРемонтыППР
		|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)
		|				ТОГДА &ПоказыватьДефекты
		|						И торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
		|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот)
		|				ТОГДА &ПоказыватьВнешниеОснования
		|						И торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
		|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)
		|				ТОГДА &ПоказыватьРемонтыРегламентные
		|		КОНЕЦ
		|	И торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала <= &ОкончаниеПериода
		|	И торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания >= &НачалоПериода
		|	И (НЕ &ИспользоватьОтборПоОР
		|			ИЛИ торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта В (&ОбъектРемонта))
		|	И (НЕ &ИспользоватьОтборПоВР
		|			ИЛИ торо_ОбщиеДанныеПоРемонтам.ВидРемонта В (&ВидыРемонтов))
		|	И НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
		|	И НЕ торо_ОбщиеДанныеПоРемонтам.Замещен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_АктуальныеДаты.IDРемонта КАК IDРемонта,
		|	ВТ_АктуальныеДаты.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_АктуальныеДаты.ВидРемонта КАК ВидРемонта,
		|	ВТ_АктуальныеДаты.ЕстьЗаявка КАК ЕстьЗаявка,
		|	ВТ_АктуальныеДаты.ЕстьНаряд КАК ЕстьНаряд,
		|	ВТ_АктуальныеДаты.ЕстьАкт КАК ЕстьАкт,
		|	ВТ_АктуальныеДаты.ВидДокументаНачалаЦепочки КАК ВидДокументаНачалаЦепочки,
		|	ВТ_АктуальныеДаты.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
		|	ВТ_АктуальныеДаты.ДокументОснование КАК ДокументОснование,
		|	ВТ_АктуальныеДаты.ДатаНачала КАК ДатаНачала,
		|	ВТ_АктуальныеДаты.ДатаОкончания КАК ДатаОкончания,
		|	ВТ_АктуальныеДаты.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
		|	ВТ_АктуальныеДаты.ИсточникДанных КАК ИсточникДанных,
		|	ВЫБОР
		|		КОГДА торо_ОбъектыРемонта.ВнешнийОбъект
		|			ТОГДА торо_ОбъектыРемонта.Контрагент
		|		ИНАЧЕ торо_ОбъектыРемонта.Подразделение
		|	КОНЕЦ КАК ВладелецОР,
		|	торо_ОбъектыРемонта.Приоритет КАК КритичностьОборудования,
		|	ЛОЖЬ КАК Регламентный
		|ПОМЕСТИТЬ ВТ_РемонтыНачальная
		|ИЗ
		|	ВТ_АктуальныеДаты КАК ВТ_АктуальныеДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО ВТ_АктуальныеДаты.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
		|ГДЕ
		|	(НЕ &ИспользоватьОтборПоВладельцу
		|			ИЛИ (ВТ_АктуальныеДаты.ОбъектРемонта.ВнешнийОбъект
		|					И ВТ_АктуальныеДаты.ОбъектРемонта.Контрагент В (&Владелец)
		|				ИЛИ ВТ_АктуальныеДаты.ОбъектРемонта.Подразделение В (&Владелец)))
		|	И (&ИспользоватьОтборПоВсемОрганизациям
		|			ИЛИ ВТ_АктуальныеДаты.ОбъектРемонта.Организация = &Организация)
		|	И НЕ ВТ_АктуальныеДаты.ДокументНачалаЦепочки.Организация ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_АктуальныеДаты.IDРемонта,
		|	ВТ_АктуальныеДаты.ОбъектРемонта,
		|	ВТ_АктуальныеДаты.ВидРемонта,
		|	ВТ_АктуальныеДаты.ЕстьЗаявка,
		|	ВТ_АктуальныеДаты.ЕстьНаряд,
		|	ВТ_АктуальныеДаты.ЕстьАкт,
		|	ВТ_АктуальныеДаты.ВидДокументаНачалаЦепочки,
		|	ВТ_АктуальныеДаты.ДокументНачалаЦепочки,
		|	ВТ_АктуальныеДаты.ДокументОснование,
		|	ВТ_АктуальныеДаты.ДатаНачала,
		|	ВТ_АктуальныеДаты.ДатаОкончания,
		|	ВТ_АктуальныеДаты.КрайняяДатаЗавершения,
		|	ВТ_АктуальныеДаты.ИсточникДанных,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.торо_ПриоритетыОбъектовРемонта.ПустаяСсылка),
		|	ИСТИНА
		|ИЗ
		|	ВТ_АктуальныеДаты КАК ВТ_АктуальныеДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_ГрафикРегламентныхМероприятийТОиР
		|		ПО ((ВЫРАЗИТЬ(ВТ_АктуальныеДаты.ДокументНачалаЦепочки КАК Документ.торо_ГрафикРегламентныхМероприятийТОиР)) = торо_ГрафикРегламентныхМероприятийТОиР.Ссылка)
		|ГДЕ
		|	(НЕ &ИспользоватьОтборПоВладельцу
		|			ИЛИ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) В (&Владелец))
		|	И (&ИспользоватьОтборПоВсемОрганизациям
		|			ИЛИ торо_ГрафикРегламентныхМероприятийТОиР.Организация = &Организация)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	IDРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_РемонтыНачальная.IDРемонта КАК IDРемонта,
		|	ВТ_РемонтыНачальная.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_РемонтыНачальная.ВидРемонта КАК ВидРемонта,
		|	ВТ_РемонтыНачальная.ЕстьЗаявка КАК ЕстьЗаявка,
		|	ВТ_РемонтыНачальная.ЕстьНаряд КАК ЕстьНаряд,
		|	ВТ_РемонтыНачальная.ЕстьАкт КАК ЕстьАкт,
		|	ВТ_РемонтыНачальная.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
		|	ВТ_РемонтыНачальная.ДокументОснование КАК ДокументОснование,
		|	ВТ_РемонтыНачальная.ДатаНачала КАК ДатаНачала,
		|	ВТ_РемонтыНачальная.ДатаОкончания КАК ДатаОкончания,
		|	ВТ_РемонтыНачальная.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
		|	ВТ_РемонтыНачальная.ИсточникДанных КАК ИсточникДанных,
		|	ВТ_РемонтыНачальная.ВладелецОР КАК ВладелецОР,
		|	ВТ_РемонтыНачальная.КритичностьОборудования КАК КритичностьОборудования,
		|	ВТ_РемонтыНачальная.Регламентный КАК Регламентный,
		|	ВЫБОР
		|		КОГДА &ГруппироватьПоИсполнителю
		|			ТОГДА ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.Исполнитель, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Исполнитель,
		|	ВЫБОР
		|		КОГДА &ГруппироватьПоИсполнителю
		|			ТОГДА торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК УточнениеИсполнителя
		|ПОМЕСТИТЬ ВТ_Ремонты
		|ИЗ
		|	ВТ_РемонтыНачальная КАК ВТ_РемонтыНачальная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
		|		ПО ВТ_РемонтыНачальная.IDРемонта = торо_ПлановыеИсполнителиРемонтов.IDРемонта
		|ГДЕ
		|	(НЕ &ИспользоватьОтборПоИсполнителю
		|			ИЛИ ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.Исполнитель, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) В (&Исполнители))
		|	И (НЕ &ИспользоватьОтборПоУточнениюИсполнителя
		|			ИЛИ ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя, ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)) В (&УточнениеИсполнителя))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	IDРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID_Ремонта
		|ПОМЕСТИТЬ ВТ_Остановочные
		|ИЗ
		|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(
		|			,
		|			IDЗависимого В
		|				(ВЫБРАТЬ
		|					ВТ_Ремонты.IDРемонта КАК IDРемонта
		|				ИЗ
		|					ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_ОстановочныеРемонтыСрезПоследних
		|ГДЕ
		|	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID_Ремонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ВыявленныеДефектыСрезПоследних.ID КАК ID,
		|	торо_ВыявленныеДефектыСрезПоследних.КритичностьДефекта КАК КритичностьДефекта
		|ПОМЕСТИТЬ ВТ_ДефектыКритичность
		|ИЗ
		|	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(
		|			,
		|			ID В
		|				(ВЫБРАТЬ
		|					ВТ_Ремонты.IDРемонта КАК IDРемонта
		|				ИЗ
		|					ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_ВыявленныеДефектыСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_СкользящийПлан.ID_Ремонта КАК ID_Ремонта,
		|	торо_СкользящийПлан.Регистратор КАК ПланРабот,
		|	ВЫБОР
		|		КОГДА торо_СкользящийПлан.ВидПлана = &ВидПлана
		|			ТОГДА торо_СкользящийПлан.ДатаНачалаРемонта >= торо_СкользящийПлан.ДатаНачалаБазовогоПериода
		|					И торо_СкользящийПлан.ДатаНачалаРемонта <= торо_СкользящийПлан.ДатаОкончанияБазовогоПериода
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВБазовомПериоде
		|ПОМЕСТИТЬ ТаблицаИмеющихсяПлановРазвернутая
		|ИЗ
		|	РегистрСведений.торо_СкользящийПланРабот.СрезПоследних(
		|			,
		|			ID_Ремонта В
		|				(ВЫБРАТЬ
		|					ВТ_Ремонты.IDРемонта КАК IDРемонта
		|				ИЗ
		|					ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_СкользящийПлан
		|ГДЕ
		|	торо_СкользящийПлан.ВидПлана В(&ВидыПлана)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_СкользящийПлан.ID_Ремонта,
		|	торо_СкользящийПлан.Регистратор,
		|	ВЫБОР
		|		КОГДА торо_СкользящийПлан.ВидПлана = &ВидПлана
		|			ТОГДА торо_СкользящийПлан.ДатаНачалаРемонта >= торо_СкользящийПлан.ДатаНачалаБазовогоПериода
		|					И торо_СкользящийПлан.ДатаНачалаРемонта <= торо_СкользящийПлан.ДатаОкончанияБазовогоПериода
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.торо_СкользящийПланРегламентныхМероприятий.СрезПоследних(
		|			,
		|			ID_Ремонта В
		|				(ВЫБРАТЬ
		|					ВТ_Ремонты.IDРемонта КАК IDРемонта
		|				ИЗ
		|					ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_СкользящийПлан
		|ГДЕ
		|	торо_СкользящийПлан.ВидПлана В(&ВидыПлана)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID_Ремонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаИмеющихсяПлановРазвернутая.ID_Ремонта КАК ID_Ремонта,
		|	ТаблицаИмеющихсяПлановРазвернутая.ПланРабот КАК ПланРабот
		|ПОМЕСТИТЬ ТаблицаИмеющихсяПланов
		|ИЗ
		|	ТаблицаИмеющихсяПлановРазвернутая КАК ТаблицаИмеющихсяПлановРазвернутая
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID_Ремонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаИмеющихсяПлановРазвернутая.ID_Ремонта КАК ID_Ремонта
		|ПОМЕСТИТЬ РемонтыБазовогоПлана
		|ИЗ
		|	ТаблицаИмеющихсяПлановРазвернутая КАК ТаблицаИмеющихсяПлановРазвернутая
		|ГДЕ
		|	ТаблицаИмеющихсяПлановРазвернутая.ВБазовомПериоде
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID_Ремонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ID КАК IDРемонта
		|ПОМЕСТИТЬ ВТ_РемонтыПлана
		|ИЗ
		|	Документ.торо_ПланРаботПодразделения.СписокРемонтовПлана КАК торо_ПланРаботПодразделенияСписокРемонтовПлана
		|ГДЕ
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.Ссылка = &ПланРабот
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	IDРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Ремонты.IDРемонта КАК ID_Ремонта,
		|	ВТ_Ремонты.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_Ремонты.ВидРемонта КАК ВидРемонта,
		|	ВТ_Ремонты.ЕстьЗаявка КАК ЕстьЗаявка,
		|	ВТ_Ремонты.ЕстьНаряд КАК ЕстьНаряд,
		|	ВТ_Ремонты.ЕстьАкт КАК ЕстьАкт,
		|	ВТ_Ремонты.ДокументНачалаЦепочки КАК ДокументОснование,
		|	ВТ_Ремонты.ДокументОснование КАК ДокументПлановыхДат,
		|	ВТ_Ремонты.ДатаНачала КАК ДатаНачала,
		|	ВТ_Ремонты.ДатаОкончания КАК ДатаОкончания,
		|	ВТ_Ремонты.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
		|	ВТ_Ремонты.ДатаНачала КАК ДатаНачалаИсходная,
		|	ВТ_Ремонты.ДатаОкончания КАК ДатаОкончанияИсходная,
		|	ВТ_Ремонты.КрайняяДатаЗавершения КАК КрайняяДатаЗавершенияИсходная,
		|	ВТ_Ремонты.ИсточникДанных КАК ИсточникДанных,
		|	ВТ_Ремонты.ВладелецОР КАК ВладелецОР,
		|	ВТ_Ремонты.КритичностьОборудования КАК КритичностьОборудования,
		|	ВТ_Ремонты.Регламентный КАК Регламентный,
		|	ВТ_Ремонты.Исполнитель КАК Исполнитель,
		|	ВТ_Ремонты.УточнениеИсполнителя КАК УточнениеИсполнителя,
		|	ВТ_ДефектыКритичность.КритичностьДефекта КАК КритичностьДефекта,
		|	ВЫБОР
		|		КОГДА ВТ_Остановочные.ID_Ремонта ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстановочный,
		|	ТаблицаИмеющихсяПланов.ПланРабот КАК ПланПодразделения,
		|	ВЫБОР
		|		КОГДА &ВыделятьНезапланированные
		|				И ВТ_РемонтыПлана.IDРемонта ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НезапланированныйРемонт
		|ИЗ
		|	ВТ_Ремонты КАК ВТ_Ремонты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДефектыКритичность КАК ВТ_ДефектыКритичность
		|		ПО ВТ_Ремонты.IDРемонта = ВТ_ДефектыКритичность.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остановочные КАК ВТ_Остановочные
		|		ПО ВТ_Ремонты.IDРемонта = ВТ_Остановочные.ID_Ремонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИмеющихсяПланов КАК ТаблицаИмеющихсяПланов
		|		ПО ВТ_Ремонты.IDРемонта = ТаблицаИмеющихсяПланов.ID_Ремонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РемонтыПлана КАК ВТ_РемонтыПлана
		|		ПО ВТ_Ремонты.IDРемонта = ВТ_РемонтыПлана.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РемонтыБазовогоПлана КАК РемонтыБазовогоПлана
		|		ПО ВТ_Ремонты.IDРемонта = РемонтыБазовогоПлана.ID_Ремонта
		|ГДЕ
		|	&УсловиеПоНезапланированным
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА &ПоВидам
		|			ТОГДА ВТ_Ремонты.ВидРемонта.Наименование
		|		ИНАЧЕ ВТ_Ремонты.ОбъектРемонта.Наименование
		|	КОНЕЦ,
		|	ВТ_Ремонты.ДатаНачала";
		# КонецОбласти
		
		Если ВыводСНезапланированными Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНезапланированным",
			      "	(РемонтыБазовогоПлана.ID_Ремонта ЕСТЬ NULL
					|	ИЛИ НЕ ВТ_РемонтыПлана.IDРемонта ЕСТЬ NULL)");
		Иначе
			Запрос.УстановитьПараметр("УсловиеПоНезапланированным", Истина);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВыделятьНезапланированные", ВыводСНезапланированными);

	Иначе
		#Область ТекстЗапроса
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ID КАК ID_Ремонта,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта КАК ОбъектРемонта,
		|	ВЫРАЗИТЬ(торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОРДляПолученияВладельца,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ВидРемонта КАК ВидРемонта,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДокументОснование КАК ДокументОснование,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаНачала КАК ДатаНачала,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаОкончания КАК ДатаОкончания,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаНачалаРемонтаИсходная КАК ДатаНачалаРемонтаИсходная,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаОкончанияРемонтаИсходная КАК ДатаОкончанияРемонтаИсходная,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.КрайняяДатаЗавершенияИсходная КАК КрайняяДатаЗавершенияИсходная,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.Регламентный КАК Регламентный,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ИсточникДанных КАК ИсточникДанных
		|ПОМЕСТИТЬ вт_СохраненныеДанныеПлана
		|ИЗ
		|	Документ.торо_ПланРаботПодразделения.СписокРемонтовПлана КАК торо_ПланРаботПодразделенияСписокРемонтовПлана
		|ГДЕ
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.Ссылка = &ПланРабот
		|	И (НЕ &ИспользоватьОтборПоВР
		|			ИЛИ торо_ПланРаботПодразделенияСписокРемонтовПлана.ВидРемонта В (&ВидыРемонтов))
		|	И (НЕ &ИспользоватьОтборПоОР
		|			ИЛИ торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта В (&ОбъектРемонта))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID_Ремонта,
		|	Регламентный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК IDЗависимого
		|ПОМЕСТИТЬ Остановочный
		|ИЗ
		|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(
		|			,
		|			IDЗависимого В
		|				(ВЫБРАТЬ
		|					вт_СохраненныеДанныеПлана.ID_Ремонта КАК ID_Ремонта
		|				ИЗ
		|					вт_СохраненныеДанныеПлана КАК вт_СохраненныеДанныеПлана)) КАК торо_ОстановочныеРемонтыСрезПоследних
		|ГДЕ
		|	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	IDЗависимого
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ВыявленныеДефектыСрезПоследних.ID КАК ID,
		|	торо_ВыявленныеДефектыСрезПоследних.КритичностьДефекта КАК КритичностьДефекта
		|ПОМЕСТИТЬ ВТ_ДефектыКритичность
		|ИЗ
		|	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(
		|			,
		|			ID В
		|				(ВЫБРАТЬ
		|					вт_СохраненныеДанныеПлана.ID_Ремонта КАК ID_Ремонта
		|				ИЗ
		|					вт_СохраненныеДанныеПлана КАК вт_СохраненныеДанныеПлана)) КАК торо_ВыявленныеДефектыСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ " + ?(ГруппироватьПоИсполнителю = 0, "РАЗЛИЧНЫЕ", "") + "
		|	вт_СохраненныеДанныеПлана.ID_Ремонта КАК ID_Ремонта,
		|	вт_СохраненныеДанныеПлана.ОбъектРемонта КАК ОбъектРемонта,
		|	вт_СохраненныеДанныеПлана.ВидРемонта КАК ВидРемонта,
		|	вт_СохраненныеДанныеПлана.ДокументОснование КАК ДокументОснование,
		|	вт_СохраненныеДанныеПлана.ДатаНачала КАК ДатаНачала,
		|	вт_СохраненныеДанныеПлана.ДатаОкончания КАК ДатаОкончания,
		|	вт_СохраненныеДанныеПлана.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
		|	вт_СохраненныеДанныеПлана.ДатаНачалаРемонтаИсходная КАК ДатаНачалаРемонтаИсходная,
		|	вт_СохраненныеДанныеПлана.ДатаОкончанияРемонтаИсходная КАК ДатаОкончанияРемонтаИсходная,
		|	вт_СохраненныеДанныеПлана.КрайняяДатаЗавершенияИсходная КАК КрайняяДатаЗавершенияИсходная,
		|	вт_СохраненныеДанныеПлана.Регламентный КАК Регламентный,
		|	вт_СохраненныеДанныеПлана.ИсточникДанных КАК ИсточникДанных,
		|	ВЫБОР
		|		КОГДА НЕ вт_СохраненныеДанныеПлана.ОРДляПолученияВладельца = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА вт_СохраненныеДанныеПлана.ОРДляПолученияВладельца.ВнешнийОбъект
		|						ТОГДА вт_СохраненныеДанныеПлана.ОРДляПолученияВладельца.Контрагент
		|					ИНАЧЕ вт_СохраненныеДанныеПлана.ОРДляПолученияВладельца.Подразделение
		|				КОНЕЦ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
		|	КОНЕЦ КАК ВладелецОР,
		|	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
		|	торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд КАК ЕстьНаряд,
		|	торо_ОбщиеДанныеПоРемонтам.ЕстьАкт КАК ЕстьАкт,
		|	торо_ОбщиеДанныеПоРемонтам.Отменен КАК Отменен,
		|	ВЫБОР
		|		КОГДА Остановочный.IDЗависимого ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстановочный,
		|	ВЫБОР
		|		КОГДА &ГруппироватьПоИсполнителю
		|			ТОГДА ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.Исполнитель, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Исполнитель,
		|	ВЫБОР
		|		КОГДА &ГруппироватьПоИсполнителю
		|			ТОГДА ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя, ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка))
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК УточнениеИсполнителя,
		|	вт_СохраненныеДанныеПлана.ОРДляПолученияВладельца.Приоритет КАК КритичностьОборудования,
		|	ВТ_ДефектыКритичность.КритичностьДефекта КАК КритичностьДефекта
		|ПОМЕСТИТЬ вт_Итоговая
		|ИЗ
		|	вт_СохраненныеДанныеПлана КАК вт_СохраненныеДанныеПлана
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
		|		ПО вт_СохраненныеДанныеПлана.ID_Ремонта = торо_ОбщиеДанныеПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
		|		ПО вт_СохраненныеДанныеПлана.ID_Ремонта = торо_ПлановыеИсполнителиРемонтов.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДефектыКритичность КАК ВТ_ДефектыКритичность
		|		ПО вт_СохраненныеДанныеПлана.ID_Ремонта = ВТ_ДефектыКритичность.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остановочный КАК Остановочный
		|		ПО вт_СохраненныеДанныеПлана.ID_Ремонта = Остановочный.IDЗависимого
		|ГДЕ
		|	ВЫБОР
		|			КОГДА вт_СохраненныеДанныеПлана.ИсточникДанных = ""ППР""
		|				ТОГДА &ПоказыватьРемонтыППР
		|			КОГДА вт_СохраненныеДанныеПлана.ИсточникДанных = ""СПД""
		|				ТОГДА &ПоказыватьДефекты
		|			КОГДА вт_СохраненныеДанныеПлана.ИсточникДанных = ""СПВО""
		|				ТОГДА &ПоказыватьВнешниеОснования
		|			КОГДА вт_СохраненныеДанныеПлана.ИсточникДанных = ""РМ""
		|				ТОГДА &ПоказыватьРемонтыРегламентные
		|		КОНЕЦ
		|	И (НЕ &ИспользоватьОтборПоВладельцу
		|			ИЛИ ВЫБОР
		|				КОГДА вт_СохраненныеДанныеПлана.ОРДляПолученияВладельца.ВнешнийОбъект
		|					ТОГДА вт_СохраненныеДанныеПлана.ОРДляПолученияВладельца.Контрагент В (&Владелец)
		|				ИНАЧЕ вт_СохраненныеДанныеПлана.ОРДляПолученияВладельца.Подразделение В (&Владелец)
		|			КОНЕЦ)
		|	И (НЕ &ИспользоватьОтборПоИсполнителю
		|			ИЛИ ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.Исполнитель, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) В (&Исполнители))
		|	И (НЕ &ИспользоватьОтборПоУточнениюИсполнителя
		|			ИЛИ ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя, ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)) В (&УточнениеИсполнителя))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_СкользящийПланРаботСрезПоследних.ID_Ремонта КАК ID_Ремонта,
		|	ЛОЖЬ КАК Регламентный,
		|	торо_СкользящийПланРаботСрезПоследних.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ТаблицаИмеющихсяПланов
		|ИЗ
		|	РегистрСведений.торо_СкользящийПланРабот.СрезПоследних(
		|			,
		|			Регистратор = &ПланРабот
		|				И ID_Ремонта В
		|					(ВЫБРАТЬ
		|						ВТ_Итоговая.ID_Ремонта КАК ID_Ремонта
		|					ИЗ
		|						вт_Итоговая КАК ВТ_Итоговая
		|					ГДЕ
		|						НЕ ВТ_Итоговая.Регламентный)) КАК торо_СкользящийПланРаботСрезПоследних
		|ГДЕ
		|	торо_СкользящийПланРаботСрезПоследних.ВидПлана В(&ВидыПлана)
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_СкользящийПланРаботСрезПоследних.ID_Ремонта,
		|	торо_СкользящийПланРаботСрезПоследних.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_СкользящийПланРегламентныхМероприятийСрезПоследних.ID_Ремонта,
		|	ИСТИНА,
		|	торо_СкользящийПланРегламентныхМероприятийСрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.торо_СкользящийПланРегламентныхМероприятий.СрезПоследних(
		|			,
		|			Регистратор = &ПланРабот
		|				И ID_Ремонта В
		|					(ВЫБРАТЬ
		|						ВТ_Итоговая.ID_Ремонта КАК ID_Ремонта
		|					ИЗ
		|						вт_Итоговая КАК ВТ_Итоговая
		|					ГДЕ
		|						ВТ_Итоговая.Регламентный)) КАК торо_СкользящийПланРегламентныхМероприятийСрезПоследних
		|ГДЕ
		|	торо_СкользящийПланРегламентныхМероприятийСрезПоследних.ВидПлана В(&ВидыПлана)
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_СкользящийПланРегламентныхМероприятийСрезПоследних.ID_Ремонта,
		|	торо_СкользящийПланРегламентныхМероприятийСрезПоследних.ДатаНачалаРемонта,
		|	торо_СкользящийПланРегламентныхМероприятийСрезПоследних.ДатаОкончанияРемонта,
		|	торо_СкользящийПланРегламентныхМероприятийСрезПоследних.Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID_Ремонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Итоговая.ID_Ремонта КАК ID_Ремонта,
		|	вт_Итоговая.ОбъектРемонта КАК ОбъектРемонта,
		|	вт_Итоговая.ВидРемонта КАК ВидРемонта,
		|	вт_Итоговая.ДокументОснование КАК ДокументОснование,
		|	вт_Итоговая.ДатаНачала КАК ДатаНачала,
		|	вт_Итоговая.ДатаОкончания КАК ДатаОкончания,
		|	вт_Итоговая.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
		|	вт_Итоговая.ДатаНачалаРемонтаИсходная КАК ДатаНачалаИсходная,
		|	вт_Итоговая.ДатаОкончанияРемонтаИсходная КАК ДатаОкончанияИсходная,
		|	вт_Итоговая.КрайняяДатаЗавершенияИсходная КАК КрайняяДатаЗавершенияИсходная,
		|	вт_Итоговая.Регламентный КАК Регламентный,
		|	вт_Итоговая.ИсточникДанных КАК ИсточникДанных,
		|	вт_Итоговая.ВладелецОР КАК ВладелецОР,
		|	вт_Итоговая.ЕстьЗаявка КАК ЕстьЗаявка,
		|	вт_Итоговая.ЕстьНаряд КАК ЕстьНаряд,
		|	вт_Итоговая.ЕстьАкт КАК ЕстьАкт,
		|	вт_Итоговая.ЕстьОстановочный КАК ЕстьОстановочный,
		|	вт_Итоговая.Исполнитель КАК Исполнитель,
		|	вт_Итоговая.УточнениеИсполнителя КАК УточнениеИсполнителя,
		|	вт_Итоговая.КритичностьОборудования КАК КритичностьОборудования,
		|	вт_Итоговая.КритичностьДефекта КАК КритичностьДефекта,
		|	ЕСТЬNULL(ТаблицаИмеющихсяПланов.Регистратор, ЗНАЧЕНИЕ(Документ.торо_ПланРаботПодразделения.ПустаяСсылка)) КАК ПланПодразделения,
		|	вт_Итоговая.Отменен КАК Отменен,
		|	ЛОЖЬ КАК НезапланированныйРемонт
		|ИЗ
		|	вт_Итоговая КАК вт_Итоговая
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИмеющихсяПланов КАК ТаблицаИмеющихсяПланов
		|		ПО вт_Итоговая.ID_Ремонта = ТаблицаИмеющихсяПланов.ID_Ремонта
		|			И вт_Итоговая.Регламентный = ТаблицаИмеющихсяПланов.Регламентный
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА &ПоВидам
		|			ТОГДА вт_Итоговая.ВидРемонта.Наименование
		|		ИНАЧЕ вт_Итоговая.ОбъектРемонта.Наименование
		|	КОНЕЦ,
		|	вт_Итоговая.ДатаНачала"; 
		#КонецОбласти 
	КонецЕсли; 
	
	ПервыйУровеньИтоги = "";
	ПервыйУровеньГруппировка = "";
	ВторойУровеньГруппировка = "";
	
	// Итоги первого уровня
	Если ВерхнийУровень = "1" Тогда 
		ПервыйУровеньГруппировка = "Исполнитель";
	ИначеЕсли ВерхнийУровень = "2" Тогда
		ПервыйУровеньИтоги = "МАКСИМУМ(Исполнитель)";
		ПервыйУровеньГруппировка = "УточнениеИсполнителя";
	ИначеЕсли ВерхнийУровень = "3" Тогда 
		ПервыйУровеньГруппировка = "УточнениеИсполнителя";
	Иначе
		ПервыйУровеньГруппировка = "ВладелецОР";
	КонецЕсли; 
	
	Если НижнийУровень = "1" Тогда
		ВторойУровеньГруппировка = "ОбъектРемонта";
	Иначе
		ВторойУровеньГруппировка = "ВидРемонта";		
	КонецЕсли; 
	
	ТекстИтогов = "ИТОГИ";
	
	Если НЕ ПервыйУровеньИтоги = "" Тогда
		ТекстИтогов = ТекстИтогов + Символы.ПС + ПервыйУровеньИтоги;
	КонецЕсли;
	
	ТекстИтогов = ТекстИтогов + Символы.ПС + "ПО" + Символы.ПС + ПервыйУровеньГруппировка;
	ТекстИтогов = ТекстИтогов + Символы.ПС + "," + Символы.ПС + ВторойУровеньГруппировка;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ТекстИтогов;
			
	УстановитьПараметрыЗапросаДляЗаполнения(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПостроитьДиаграммуГантаДляППР(ДиаграммаГантаПодразделения, СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, РезультатЗапроса);
	
	ДиаграммаГантаПодразделения.УстановитьПолныйИнтервал(ДатаОтсчета, ДатаОкончания);
	ДиаграммаГантаПодразделения.ОтображатьЛегенду = Ложь; 
	
	ВывестиРезультатЗапросаВДеревоФормы(РезультатЗапроса, СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные);
 
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросаДляЗаполнения(Запрос)
	
	Исполнители = ПодразделениеИсполнитель.ВыгрузитьЗначения();
	
	Для каждого ЭлементСписка Из Контрагент Цикл
		Исполнители.Добавить(ЭлементСписка.Значение);
	КонецЦикла; 
	
	МассивУточнениеИсполнителя = Бригада.ВыгрузитьЗначения();
	
	Для каждого ЭлементСписка Из ДоговорКонтрагента Цикл
		МассивУточнениеИсполнителя.Добавить(ЭлементСписка.Значение);
	КонецЦикла; 
	
	ВидыПлана = Новый Массив;
	
	Если ВидПлана = Справочники.торо_ВидыСкользящихПланов.Долгосрочный Тогда
		
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Оперативный);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Среднесрочный);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Годовой);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Долгосрочный);
		
	ИначеЕсли ВидПлана = Справочники.торо_ВидыСкользящихПланов.Годовой Тогда
		
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Оперативный);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Среднесрочный);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Годовой);
		
	ИначеЕсли ВидПлана = Справочники.торо_ВидыСкользящихПланов.Среднесрочный Тогда
		
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Оперативный);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Среднесрочный);
		
	ИначеЕсли ВидПлана = Справочники.торо_ВидыСкользящихПланов.Оперативный Тогда
		
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Оперативный);
		
	ИначеЕсли ВидПлана = Справочники.торо_ВидыСкользящихПланов.Стратегический Тогда 
		
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Оперативный);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Среднесрочный);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Годовой);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Стратегический);
		ВидыПлана.Добавить(Справочники.торо_ВидыСкользящихПланов.Долгосрочный);
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВР", ДоступныеВидыРемонтов.Количество() > 0 Или ВидыРемонтов.Количество() > 0);
	Запрос.УстановитьПараметр("ВидыРемонтов", ?(ВидыРемонтов.Количество() > 0, ВидыРемонтов.ВыгрузитьЗначения(), ДоступныеВидыРемонтов.ВыгрузитьЗначения()));
	Запрос.УстановитьПараметр("Владелец", ВладелецОР.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Исполнители", Исполнители);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВладельцу", ВладелецОР.Количество()   > 0);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоИсполнителю", Исполнители.Количество()  > 0);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОР", ОбъектРемонта.Количество()> 0);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаОтсчета);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ОкончаниеПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("ПоказыватьВнешниеОснования", ПоказыватьВнешниеОснования);
	Запрос.УстановитьПараметр("ПоказыватьДефекты", ПоказыватьДефекты);
	Запрос.УстановитьПараметр("ПоказыватьРемонтыППР", ПоказыватьРемонтыППР);
	Запрос.УстановитьПараметр("ПоказыватьРемонтыРегламентные", ПоказыватьРемонтыРегламентные);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПланРабот", ПланРабот);
	Запрос.УстановитьПараметр("ПоВидам", НижнийУровень = "2");
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВсемОрганизациям",Не ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("ИспользоватьОтборПоУточнениюИсполнителя", МассивУточнениеИсполнителя.Количество() > 0);
	Запрос.УстановитьПараметр("УточнениеИсполнителя", МассивУточнениеИсполнителя);
	Запрос.УстановитьПараметр("ГруппироватьПоИсполнителю", ГруппироватьПоИсполнителю = 1);
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаОтсчета", ДатаОтсчета);

	Запрос.УстановитьПараметр("ВидыПлана", ВидыПлана);
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);

КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатЗапросаВДеревоФормы(РезультатЗапроса, СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные)
	
	ФункцияНачалаПериода = "";
	ФункцияКонцаПериода = "";
	Если Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год") Тогда
		ФункцияНачалаПериода = "НачалоГода(";
		ФункцияКонцаПериода = "КонецГода(";
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц") Тогда
		ФункцияНачалаПериода = "НачалоМесяца(";
		ФункцияКонцаПериода = "КонецМесяца(";
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя") Тогда
		ФункцияНачалаПериода = "НачалоНедели(";
		ФункцияКонцаПериода = "КонецНедели(";
	КонецЕсли;
	
	ШаблонЗаполнения = "СтрокаДанные.ДатаНачалаИсходнаяДляОтображения = %1 СтрокаДанные.ДатаНачалаИсходная %3;
						|СтрокаДанные.ДатаОкончанияИсходнаяДляОтображения = %2 СтрокаДанные.ДатаОкончанияИсходная %3;
						|СтрокаДанные.КрайняяДатаЗавершенияИсходнаяДляОтображения = ?(ЗначениеЗаполнено(СтрокаДанные.КрайняяДатаЗавершенияИсходная),
						|																				%2 СтрокаДанные.КрайняяДатаЗавершенияИсходная %3,
						|																				СтрокаДанные.КрайняяДатаЗавершенияИсходная);
						|СтрокаДанные.ДатаНачалаДляОтображения = %1 СтрокаДанные.ДатаНачала %3;
						|СтрокаДанные.ДатаОкончанияДляОтображения = %2 СтрокаДанные.ДатаОкончания %3;
						|СтрокаДанные.КрайняяДатаЗавершенияДляОтображения = ?(ЗначениеЗаполнено(СтрокаДанные.КрайняяДатаЗавершения),
						|													  %2 СтрокаДанные.КрайняяДатаЗавершения %3,
						|													  СтрокаДанные.КрайняяДатаЗавершения);";
	
	СтрокаЗаполнения = СтрШаблон(ШаблонЗаполнения, ФункцияНачалаПериода, ФункцияКонцаПериода, ?(ЗначениеЗаполнено(ФункцияНачалаПериода), ")", ""));
	
	ВыборкаПервыйУровень = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПервыйУровень.Следующий() Цикл
		СтрокаПервогоУровня = ДеревоРемонты.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПервогоУровня, ВыборкаПервыйУровень);
		ЗаполнитьЗначенияСвойств(СтрокаПервогоУровня, СтруктураДанныхПервогоУровня);
		
		ВыборкаВторойУровень = ВыборкаПервыйУровень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВторойУровень.Следующий() Цикл
			
			СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВторогоУровня, ВыборкаВторойУровень);
			ЗаполнитьЗначенияСвойств(СтрокаВторогоУровня, СтруктураДанныхВторогоУровня);

			ВыборкаДанные = ВыборкаВторойУровень.Выбрать();
			
			Пока ВыборкаДанные.Следующий() Цикл
				СтрокаДанные = СтрокаВторогоУровня.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанные, ВыборкаДанные);
				ЗаполнитьЗначенияСвойств(СтрокаДанные, СтруктураДанныхУровеньДанные);
				
				Выполнить(СтрокаЗаполнения);
			КонецЦикла; 
			
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьДанныеПоВидуПлана(ВидПлана)
	
	Возврат Справочники.торо_ВидыСкользящихПланов.ПолучитьДанныеПоВидуПлана(ВидПлана);
	 	
КонецФункции

&НаКлиенте 
Процедура УстановитьЗаголовкиКолонок()
	
	Если ВерхнийУровень = "1" Тогда
		Текст1 = "Исполнитель (Подразделение, контрагент)";
	ИначеЕсли ВерхнийУровень = "2" Тогда
		Текст1 = "Исполнитель | Уточнение исполнителя";
	ИначеЕсли ВерхнийУровень = "3" Тогда
		Текст1 = "Уточнение исполнителя (Бригада, договор)";
	Иначе
		Текст1 = "Владелец ОР";
	КонецЕсли; 
	
	Если НижнийУровень = "1" Тогда
		Текст2 = "Объекты ремонта";
	Иначе
		Текст2 = "Виды ремонта";
	КонецЕсли; 

	Элементы.ДеревоРемонтыГруппаИерархия.Заголовок = Текст1;
	Элементы.ДеревоРемонтыГруппа2.Заголовок        = Текст2;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	
	Дерево = ДеревоРемонты.ПолучитьЭлементы();
	
	Для Каждого Строка Из Дерево Цикл    
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоРемонты.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте 
Процедура СвернутьДерево()
	
	Дерево = ДеревоРемонты.ПолучитьЭлементы();
	
	Для Каждого Строка Из Дерево Цикл    
		Элементы.ДеревоРемонты.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьСвойстваОтображенияВСтруктурах(СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, СтруктураДанныхУровеньДанные)
	
	Если ВерхнийУровень = "1" Тогда // отобразить на первом уровне только исполнителя
		
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьИсполнитель", Истина);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьВладелец", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьВидРемонта", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьДанные", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьОбъектРемонта", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьУточнениеИсполнителя", Ложь);
		
	ИначеЕсли ВерхнийУровень = "2" Тогда
		
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьИсполнитель", Истина);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьВладелец", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьВидРемонта", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьДанные", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьОбъектРемонта", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьУточнениеИсполнителя", Истина);
		
	ИначеЕсли ВерхнийУровень = "3" Тогда 
		
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьИсполнитель", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьВладелец", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьВидРемонта", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьДанные", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьОбъектРемонта", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьУточнениеИсполнителя", Истина);
		
	Иначе
		
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьИсполнитель", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьВладелец", Истина);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьВидРемонта", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьДанные", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьОбъектРемонта", Ложь);
		СтруктураДанныхПервогоУровня.Вставить("ОтображатьУточнениеИсполнителя", Ложь);
		
	КонецЕсли; 
	
	Если НижнийУровень = "1" Тогда
		
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьИсполнитель", Ложь);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьВладелец", Ложь);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьВидРемонта", Ложь);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьДанные", Ложь);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьОбъектРемонта", Истина);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьУточнениеИсполнителя", Ложь);
		
	Иначе
		
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьИсполнитель", Ложь);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьВладелец", Ложь);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьВидРемонта", Истина);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьДанные", Ложь);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьОбъектРемонта", Ложь);
		СтруктураДанныхВторогоУровня.Вставить("ОтображатьУточнениеИсполнителя", Ложь);
		
	КонецЕсли; 
	
	СтруктураДанныхУровеньДанные.Вставить("ОтображатьВидРемонта", ?(СтруктураДанныхВторогоУровня.ОтображатьВидРемонта, Ложь, Истина));
	СтруктураДанныхУровеньДанные.Вставить("ОтображатьДанные", Истина);
	СтруктураДанныхУровеньДанные.Вставить("ОтображатьОбъектРемонта", ?(СтруктураДанныхВторогоУровня.ОтображатьВидРемонта, Истина, Ложь));
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьСписокВыборкаДетализации()
	
	СписокВыбора = Новый Массив;
	Если Не ФОИспользоватьСкользящееПланирование Тогда
	    Элементы.Детализация.ТолькоПросмотр = Ложь;
	КонецЕсли;

	Если ФОИспользоватьСкользящееПланирование Тогда
		СписокВыбора.Добавить(Детализация);
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Если КоличествоПериодов = 1 Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День"));
		Иначе
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год"));
		КонецЕсли;
		
	Иначе   
		Если ЗначениеЗаполнено(Периодичность) Тогда
			
			Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") 
				Или Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц"));
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя"));
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День"));
			Иначе
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Час"));
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 	
	
	Элементы.Детализация.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	НайдЗначение = СписокВыбора.Найти(Детализация);
	
	Если НайдЗначение = Неопределено Тогда
		Детализация = Неопределено;
	КонецЕсли; 
	
	Если СписокВыбора.Количество() = 1 Тогда
		Элементы.Детализация.ТолькоПросмотр = Истина;
		Детализация = СписокВыбора[0];
	КонецЕсли; 

	
КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьПодбор(СтруктураПодбора, Элемент)
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораВСписок", СтруктураПодбора, Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ОтобратьБригадыПоМассивуПодразделений(МассивПодразделений, МассивБригады)
	
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_РемонтныеБригады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.торо_РемонтныеБригады КАК торо_РемонтныеБригады
	|ГДЕ
	|	торо_РемонтныеБригады.Подразделение В (&Подразделение)
	|	И торо_РемонтныеБригады.Ссылка В (&Ссылка)";
	# КонецОбласти
	
	Запрос.УстановитьПараметр("Подразделение", МассивПодразделений);
	Запрос.УстановитьПараметр("Ссылка"       , МассивБригады);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		
		Массив = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Массив.Добавить(Выборка.Ссылка);	
		КонецЦикла; 
		
		Возврат Массив;
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста 
Функция ОтобратьДоговорыПоМассивуКонтрагентов(МассивКонтрагентов, МассивДоговоры)
	
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Ссылка В(&Ссылка)
	               |	И ДоговорыКонтрагентов.Контрагент В(&Контрагент)";
	# КонецОбласти
	
	Запрос.УстановитьПараметр("Контрагент", МассивКонтрагентов);
	Запрос.УстановитьПараметр("Ссылка"    , МассивДоговоры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		
		Массив = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Массив.Добавить(Выборка.Ссылка);	
		КонецЦикла; 
		
		Возврат Массив;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура СохранитьПланНаСервере(ПланРаботДляЗаписи = Неопределено, МассивIDИзДругихПланов, Отказ)
	
	Если ДеревоРемонты.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена таблица ремонтов. Невозможно сохранить план работ'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли; 
	
	СозданНовый = Ложь;
	Если ЗначениеЗаполнено(ПланРаботДляЗаписи) Тогда
		Документ = ПланРаботДляЗаписи.ПолучитьОбъект();
	Иначе
		Документ = Документы.торо_ПланРаботПодразделения.СоздатьДокумент();
		СозданНовый = Истина;
	КонецЕсли; 
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("ВидПлана", ВидПлана);
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДата());
	ДанныеЗаполнения.Вставить("ДатаОтсчета", ДатаОтсчета);
	ДанныеЗаполнения.Вставить("ПериодичностьПланирования", Периодичность);
	ДанныеЗаполнения.Вставить("ТочностьПланирования", Детализация);
	ДанныеЗаполнения.Вставить("КоличествоПериодов", КоличествоПериодов);
	ДанныеЗаполнения.Вставить("Автор", Пользователи.ТекущийПользователь());

	Документ.Заполнить(ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Документ.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'В обработке и в пользовательских настройках не заполнена организация. Невозможно сохранить план ремонтов'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ТаблицаСРемонтамиИсходная = Документ.СписокРемонтовПлана.Выгрузить();

	Если Не ЗначениеЗаполнено(ПланРабот) Тогда  // Если не редактируется план, то ремонты из документов не сохраняем.
		Документ.СписокВидовРемонта.Очистить();
		Документ.СписокРемонтовПлана.Очистить();
		Документ.Исполнители.Очистить();
		Документ.УточненияИсполнителей.Очистить();
		Документ.ВладельцыОР.Очистить();
		Документ.ОбъектыРемонтов.Очистить();
		ТаблицаСРемонтамиИсходная.Очистить(); 
	КонецЕсли;
	
	Исполнители = ПодразделениеИсполнитель.ВыгрузитьЗначения();
	
	Для каждого ЭлементСписка Из Контрагент Цикл
		Исполнители.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	МассивУточнениеИсполнителя = Бригада.ВыгрузитьЗначения();
	
	Для каждого ЭлементСписка Из ДоговорКонтрагента Цикл
		МассивУточнениеИсполнителя.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Для каждого Исполнитель Из Исполнители Цикл
		СтруктураПоиска = Новый Структура("Исполнитель", Исполнитель);
		МассивСтрок = Документ.Исполнители.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НС = Документ.Исполнители.Добавить();
			НС.Исполнитель = Исполнитель;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого УточнениеИсполнителя Из МассивУточнениеИсполнителя Цикл
		СтруктураПоиска = Новый Структура("УточнениеИсполнителя", УточнениеИсполнителя);
		МассивСтрок = Документ.УточненияИсполнителей.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НС = Документ.УточненияИсполнителей.Добавить();
			НС.УточнениеИсполнителя = УточнениеИсполнителя;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Владелец Из ВладелецОР Цикл
		СтруктураПоиска = Новый Структура("Владелец", Владелец.Значение);
		МассивСтрок = Документ.ВладельцыОР.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НС = Документ.ВладельцыОР.Добавить();
			НС.Владелец = Владелец.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ОР Из ОбъектРемонта Цикл
		СтруктураПоиска = Новый Структура("ОбъектРемонта", ОР.Значение);
		МассивСтрок = Документ.ОбъектыРемонтов.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НС = Документ.ОбъектыРемонтов.Добавить();
			НС.ОбъектРемонта = ОР.Значение;
		КонецЕсли;
	КонецЦикла;
		
	Для каждого ЭлементСписка Из ВидыРемонтов Цикл
		СтруктураПоиска = Новый Структура("ВидРемонта", ЭлементСписка.Значение);
		МассивСтрок = Документ.СписокВидовРемонта.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НС = Документ.СписокВидовРемонта.Добавить();
			НС.ВидРемонта = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла; 
	
	ТаблицаСРемонтами = ПодготовитьТаблицуДляЗаполненияСпискаРемонтовПлана(ТаблицаСРемонтамиИсходная, МассивIDИзДругихПланов, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Документ.СписокРемонтовПлана.Загрузить(ТаблицаСРемонтами);
	
	ТаблицаИзмененныхДатРемонтовДляЗаписи.Очистить();
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ПланРаботПодразделения;
	мИспользоватьСогласованиеДокументов = торо_РаботаССогласованиями.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);

	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Если Не мИспользоватьСогласованиеДокументов Или Документ.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Попытка 
		
		Документ.ДополнительныеСвойства.Вставить("ИзОбработки", Истина);
		Документ.Записать(РежимЗаписи);
		
		Если СозданНовый Тогда
			ШаблонСообщения = НСтр("ru = 'Создан документ %1'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Изменен документ %1'");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Документ.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ.Ссылка);
			
		ПланРабот = Документ.Ссылка;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Не удалось сохранить план работ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
		ЗаписьЖурналаРегистрации("ЗаписьОбщегоПланаРабот",УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения + Символы.ПС + ОписаниеОшибки);
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуДляЗаполненияСпискаРемонтовПлана(ТаблицаСРемонтамиИсходная, МассивIDИзДругихПланов, Отказ)
	
	ТаблицаСРемонтамиИзОбработки = ТаблицаСРемонтамиИсходная.СкопироватьКолонки();
	
	Для каждого СтрокаПервыйУровень Из ДеревоРемонты.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВторойУровень Из СтрокаПервыйУровень.ПолучитьЭлементы() Цикл
			Для каждого ДетальнаяЗапись Из СтрокаВторойУровень.ПолучитьЭлементы() Цикл
				Если Не МассивIDИзДругихПланов.Найти(ДетальнаяЗапись.ID_Ремонта) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				НС = ТаблицаСРемонтамиИзОбработки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ДетальнаяЗапись);
				НС.ДатаНачалаРемонтаИсходная    = ДетальнаяЗапись.ДатаНачалаИсходная;
				НС.ДатаОкончанияРемонтаИсходная = ДетальнаяЗапись.ДатаОкончанияИсходная;
				НС.ID                           = ДетальнаяЗапись.ID_Ремонта;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Если ТаблицаСРемонтамиИзОбработки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось сохранить план работ, так как ни один ремонт не попадает в документ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	# Область ТекстЗапроса
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзмененныхДатРемонтовДляЗаписи.ID_Ремонта КАК ID,
	|	ТаблицаИзмененныхДатРемонтовДляЗаписи.ДатаНачала КАК ДатаНачала,
	|	ТаблицаИзмененныхДатРемонтовДляЗаписи.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаИзмененныхДатРемонтовДляЗаписи.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения
	|ПОМЕСТИТЬ ТаблицаСИзмененнымиДатамиРемонтовИсходная
	|ИЗ
	|	&ТаблицаИзмененныхДатРемонтовДляЗаписи КАК ТаблицаИзмененныхДатРемонтовДляЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСИзмененнымиДатамиРемонтовИсходная.ID КАК ID,
	|	МИНИМУМ(ТаблицаСИзмененнымиДатамиРемонтовИсходная.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ТаблицаСИзмененнымиДатамиРемонтовИсходная.ДатаОкончания) КАК ДатаОкончания,
	|	МАКСИМУМ(ТаблицаСИзмененнымиДатамиРемонтовИсходная.КрайняяДатаЗавершения) КАК КрайняяДатаЗавершения,
	|	СУММА(1) КАК КоличествоСтрокРемонта
	|ПОМЕСТИТЬ ТаблицаСИзмененнымиДатамиРемонтов
	|ИЗ
	|	ТаблицаСИзмененнымиДатамиРемонтовИсходная КАК ТаблицаСИзмененнымиДатамиРемонтовИсходная
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСИзмененнымиДатамиРемонтовИсходная.ID
	|ИМЕЮЩИЕ
	|	СУММА(1) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСРемонтамиИзОбработки.ID КАК ID,
	|	ТаблицаСРемонтамиИзОбработки.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаСРемонтамиИзОбработки.ВидРемонта КАК ВидРемонта,
	|	ТаблицаСРемонтамиИзОбработки.ДокументОснование КАК ДокументОснование,
	|	ТаблицаСРемонтамиИзОбработки.ДатаНачала КАК ДатаНачала,
	|	ТаблицаСРемонтамиИзОбработки.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаСРемонтамиИзОбработки.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
	|	ТаблицаСРемонтамиИзОбработки.ДатаНачалаРемонтаИсходная КАК ДатаНачалаРемонтаИсходная,
	|	ТаблицаСРемонтамиИзОбработки.ДатаОкончанияРемонтаИсходная КАК ДатаОкончанияРемонтаИсходная,
	|	ТаблицаСРемонтамиИзОбработки.КрайняяДатаЗавершенияИсходная КАК КрайняяДатаЗавершенияИсходная,
	|	ТаблицаСРемонтамиИзОбработки.Регламентный КАК Регламентный,
	|	ТаблицаСРемонтамиИзОбработки.ИсточникДанных КАК ИсточникДанных
	|ПОМЕСТИТЬ ТаблицаСРемонтамиИзОбработки
	|ИЗ
	|	&ТаблицаСРемонтамиИзОбработки КАК ТаблицаСРемонтамиИзОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСРемонтамиИзОбработки.ID КАК ID,
	|	ТаблицаСРемонтамиИзОбработки.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаСРемонтамиИзОбработки.ВидРемонта КАК ВидРемонта,
	|	ТаблицаСРемонтамиИзОбработки.ДокументОснование КАК ДокументОснование,
	|	МИНИМУМ(ЕСТЬNULL(ТаблицаСИзмененнымиДатамиРемонтов.ДатаНачала, ТаблицаСРемонтамиИзОбработки.ДатаНачала)) КАК ДатаНачала,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаСИзмененнымиДатамиРемонтов.ДатаОкончания, ТаблицаСРемонтамиИзОбработки.ДатаОкончания)) КАК ДатаОкончания,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаСИзмененнымиДатамиРемонтов.КрайняяДатаЗавершения, ТаблицаСРемонтамиИзОбработки.КрайняяДатаЗавершения)) КАК КрайняяДатаЗавершения,
	|	ТаблицаСРемонтамиИзОбработки.ДатаНачалаРемонтаИсходная КАК ДатаНачалаРемонтаИсходная,
	|	ТаблицаСРемонтамиИзОбработки.ДатаОкончанияРемонтаИсходная КАК ДатаОкончанияРемонтаИсходная,
	|	ТаблицаСРемонтамиИзОбработки.КрайняяДатаЗавершенияИсходная КАК КрайняяДатаЗавершенияИсходная,
	|	ТаблицаСРемонтамиИзОбработки.Регламентный КАК Регламентный,
	|	ТаблицаСРемонтамиИзОбработки.ИсточникДанных КАК ИсточникДанных
	|ПОМЕСТИТЬ вт_ДанныеДляЗаписи
	|ИЗ
	|	ТаблицаСРемонтамиИзОбработки КАК ТаблицаСРемонтамиИзОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСИзмененнымиДатамиРемонтов КАК ТаблицаСИзмененнымиДатамиРемонтов
	|		ПО ТаблицаСРемонтамиИзОбработки.ID = ТаблицаСИзмененнымиДатамиРемонтов.ID
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСРемонтамиИзОбработки.ID,
	|	ТаблицаСРемонтамиИзОбработки.ОбъектРемонта,
	|	ТаблицаСРемонтамиИзОбработки.ВидРемонта,
	|	ТаблицаСРемонтамиИзОбработки.ДатаНачалаРемонтаИсходная,
	|	ТаблицаСРемонтамиИзОбработки.ДатаОкончанияРемонтаИсходная,
	|	ТаблицаСРемонтамиИзОбработки.КрайняяДатаЗавершенияИсходная,
	|	ТаблицаСРемонтамиИзОбработки.Регламентный,
	|	ТаблицаСРемонтамиИзОбработки.ИсточникДанных,
	|	ТаблицаСРемонтамиИзОбработки.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ID КАК ID,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ВидРемонта КАК ВидРемонта,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДокументОснование КАК ДокументОснование,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаНачала КАК ДатаНачала,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаОкончания КАК ДатаОкончания,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаНачалаРемонтаИсходная КАК ДатаНачалаРемонтаИсходная,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаОкончанияРемонтаИсходная КАК ДатаОкончанияРемонтаИсходная,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.КрайняяДатаЗавершенияИсходная КАК КрайняяДатаЗавершенияИсходная,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.Регламентный КАК Регламентный,
	|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ИсточникДанных КАК ИсточникДанных
	|ПОМЕСТИТЬ вт_ДанныеИзДокумента
	|ИЗ
	|	&ТаблицаСРемонтамиИсходная КАК торо_ПланРаботПодразделенияСписокРемонтовПлана
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ID, вт_ДанныеИзДокумента.ID) КАК ID,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ОбъектРемонта, вт_ДанныеИзДокумента.ОбъектРемонта) КАК ОбъектРемонта,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ВидРемонта, вт_ДанныеИзДокумента.ВидРемонта) КАК ВидРемонта,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ДокументОснование, вт_ДанныеИзДокумента.ДокументОснование) КАК ДокументОснование,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ДатаНачала, вт_ДанныеИзДокумента.ДатаНачала) КАК ДатаНачала,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ДатаОкончания, вт_ДанныеИзДокумента.ДатаОкончания) КАК ДатаОкончания,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.КрайняяДатаЗавершения, вт_ДанныеИзДокумента.КрайняяДатаЗавершения) КАК КрайняяДатаЗавершения,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ДатаНачалаРемонтаИсходная, вт_ДанныеИзДокумента.ДатаНачалаРемонтаИсходная) КАК ДатаНачалаРемонтаИсходная,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ДатаОкончанияРемонтаИсходная, вт_ДанныеИзДокумента.ДатаОкончанияРемонтаИсходная) КАК ДатаОкончанияРемонтаИсходная,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.КрайняяДатаЗавершенияИсходная, вт_ДанныеИзДокумента.КрайняяДатаЗавершенияИсходная) КАК КрайняяДатаЗавершенияИсходная,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.Регламентный, вт_ДанныеИзДокумента.Регламентный) КАК Регламентный,
	|	ЕСТЬNULL(вт_ДанныеДляЗаписи.ИсточникДанных, вт_ДанныеИзДокумента.ИсточникДанных) КАК ИсточникДанных
	|ИЗ
	|	вт_ДанныеДляЗаписи КАК вт_ДанныеДляЗаписи
	|		ПОЛНОЕ СОЕДИНЕНИЕ вт_ДанныеИзДокумента КАК вт_ДанныеИзДокумента
	|		ПО вт_ДанныеДляЗаписи.ID = вт_ДанныеИзДокумента.ID";
	# КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаСРемонтамиИзОбработки", ТаблицаСРемонтамиИзОбработки);
	Запрос.УстановитьПараметр("ТаблицаСРемонтамиИсходная", ТаблицаСРемонтамиИсходная);
	Запрос.УстановитьПараметр("ТаблицаИзмененныхДатРемонтовДляЗаписи", ТаблицаИзмененныхДатРемонтовДляЗаписи.Выгрузить());
	
	ТаблицаСРемонтами = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСРемонтами;
	
КонецФункции

// Процедура выполняет построение диагрммы Ганта для графика ППР
//
// Параметры:
//  Диаграмма - диаграмма Ганта.
//  ИсхДанные - таблица значений исходных данных.
//
&НаСервере
Процедура ПостроитьДиаграммуГантаДляППР(Диаграмма, СтруктураДанныхПервогоУровня, СтруктураДанныхВторогоУровня, РезультатЗапроса = Неопределено) 
	
	//////////////////////////////////////////////////////
	ТекДата = ТекущаяДата();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
		
	Диаграмма.Очистить();
	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
		
	СерияРемонт = Диаграмма.Серии.Добавить();
	СерияРемонт.Текст = "График ремонта";
		
	ВыборкаПервыйУровень = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПервыйУровень.Следующий() Цикл
		
        ЗаголовокТочки = "";
		
		Если СтруктураДанныхПервогоУровня.ОтображатьВладелец Тогда
			Если ЗначениеЗаполнено(ВыборкаПервыйУровень.ВладелецОР) Тогда
				ЗаголовокТочки = ВыборкаПервыйУровень.ВладелецОР;
			Иначе
				ЗаголовокТочки = "<Владелец ОР не указан>";
			КонецЕсли;
			
		ИначеЕсли СтруктураДанныхПервогоУровня.ОтображатьИсполнитель Тогда
			
			Если ЗначениеЗаполнено(ВыборкаПервыйУровень.Исполнитель) Тогда
				ЗаголовокТочки = Строка(ВыборкаПервыйУровень.Исполнитель);
			Иначе
				Если ТипЗнч(ВыборкаПервыйУровень.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
					ЗаголовокТочки = "<Подразделение-исполнитель не указано>";
				Иначе
					ЗаголовокТочки = "<Контрагент-исполнитель не указан>";
				КонецЕсли; 
			КонецЕсли; 
			
			Если СтруктураДанныхПервогоУровня.ОтображатьУточнениеИсполнителя Тогда
				
				Если ЗначениеЗаполнено(ВыборкаПервыйУровень.УточнениеИсполнителя) Тогда
					ЗаголовокТочки = ЗаголовокТочки + "/" + Строка(ВыборкаПервыйУровень.УточнениеИсполнителя);
				Иначе
					Если ТипЗнч(ВыборкаПервыйУровень.УточнениеИсполнителя) = Тип("СправочникСсылка.торо_РемонтныеБригады") Тогда
						ЗаголовокТочки = ЗаголовокТочки + "/" +"<Ремонтная бригада не указана>";
					Иначе
						ЗаголовокТочки = ЗаголовокТочки + "/" +"<Договор контрагента не указан>";
					КонецЕсли; 
				КонецЕсли; 

			КонецЕсли;
			
		ИначеЕсли СтруктураДанныхПервогоУровня.ОтображатьУточнениеИсполнителя Тогда 
			Если ТипЗнч(ВыборкаПервыйУровень.УточнениеИсполнителя) = Тип("СправочникСсылка.торо_РемонтныеБригады") Тогда
				ЗаголовокТочки = "<Ремонтная бригада не указана>";
			Иначе
				ЗаголовокТочки = "<Договор контрагента не указан>";
			КонецЕсли;
		КонецЕсли; 
		
		ТочкаПервыйУровень = Диаграмма.Точки.Добавить();
		ТочкаПервыйУровень.Текст = ЗаголовокТочки;
		ТочкаПервыйУровень.Расшифровка = ВыборкаПервыйУровень.Исполнитель;
		
		ВыборкаВторойУровень = ВыборкаПервыйУровень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВторойУровень.Следующий() Цикл
			
			ТочкаВторойУровень = ТочкаПервыйУровень.Точки.Добавить();
			
			Если СтруктураДанныхВторогоУровня.ОтображатьВидРемонта Тогда
				ТочкаВторойУровень.Текст = ВыборкаВторойУровень.ВидРемонта;
				ТочкаВторойУровень.Расшифровка = ВыборкаВторойУровень.ВидРемонта;
			Иначе
				ТочкаВторойУровень.Текст = ВыборкаВторойУровень.ОбъектРемонта;
				ТочкаВторойУровень.Расшифровка = ВыборкаВторойУровень.ОбъектРемонта;
			КонецЕсли; 
			
			ВыборкаДанные = ВыборкаВторойУровень.Выбрать();
			
			СоответствиеТочек = Новый Соответствие;
			
			Пока ВыборкаДанные.Следующий() Цикл
				СтруктураРасшифровки = Новый Структура("ID, ВР, ОР, НедоступенДляРедактирования, ДатаНачала, ДатаОкончания");
				СтруктураРасшифровки.ДатаНачала = ВыборкаДанные.ДатаНачала;
				СтруктураРасшифровки.ДатаОкончания = ВыборкаДанные.ДатаОкончания;
				СтруктураРасшифровки.ID = ВыборкаДанные.ID_Ремонта;
				СтруктураРасшифровки.НедоступенДляРедактирования = ВыборкаДанные.ЕстьНаряд Или ВыборкаДанные.ЕстьАкт Или
																   ВыборкаДанные.ЕстьОстановочный Или
																   (ЗначениеЗаполнено(ВыборкаДанные.ПланПодразделения) 
																    И Не ВыборкаДанные.ПланПодразделения = ПланРабот);
				
				Если СтруктураДанныхВторогоУровня.ОтображатьВидРемонта Тогда // Если на втором уровне виды ремонта, значит на 3 объекты.
					
					Если СоответствиеТочек.Получить(ВыборкаДанные.ОбъектРемонта) = Неопределено Тогда
						ДетальныеЗаписи = ТочкаВторойУровень.Точки.Добавить();
						СоответствиеТочек.Вставить(ВыборкаДанные.ОбъектРемонта, ТочкаВторойУровень.Точки.Индекс(ДетальныеЗаписи));
					Иначе
						ДетальныеЗаписи = ТочкаВторойУровень.Точки.Получить(СоответствиеТочек.Получить(ВыборкаДанные.ОбъектРемонта));
					КонецЕсли; 
					
					Текст = ВыборкаДанные.ОбъектРемонта;
					Расшифровка = ВыборкаДанные.ОбъектРемонта;
					
					СтруктураРасшифровки.ОР = ВыборкаДанные.ОбъектРемонта;
					СтруктураРасшифровки.ВР = ВыборкаВторойУровень.ВидРемонта;
					
				Иначе
					Если СоответствиеТочек.Получить(ВыборкаДанные.ВидРемонта) = Неопределено Тогда
						ДетальныеЗаписи = ТочкаВторойУровень.Точки.Добавить();
						СоответствиеТочек.Вставить(ВыборкаДанные.ВидРемонта, ТочкаВторойУровень.Точки.Индекс(ДетальныеЗаписи));
					Иначе
						ДетальныеЗаписи = ТочкаВторойУровень.Точки.Получить(СоответствиеТочек.Получить(ВыборкаДанные.ВидРемонта));
					КонецЕсли; 
					
					Текст = ВыборкаДанные.ВидРемонта;
					Расшифровка = ВыборкаДанные.ВидРемонта;
					
					СтруктураРасшифровки.ОР = ВыборкаВторойУровень.ОбъектРемонта;
					СтруктураРасшифровки.ВР = ВыборкаДанные.ВидРемонта;
					
				КонецЕсли;
				
				ДетальныеЗаписи.Текст = Текст;
				ДетальныеЗаписи.Расшифровка = Расшифровка;
				
				ВставитьИнтервал(Диаграмма, ВыборкаДанные,ТочкаПервыйУровень, ТочкаВторойУровень, ДетальныеЗаписи, СерияРемонт, ТекДата, СтруктураРасшифровки);
				
			КонецЦикла; 
			
		КонецЦикла; 
	КонецЦикла; 
КонецПроцедуры // ПостроитьДиаграммуГантаДляППР()

 &НаСервере
Процедура ВставитьИнтервал(Диаграмма, Выборка, ТочкаОРР, ТочкаВРР, ДетЗаписи, СерияРемонт, ТекДата, СтруктураРасшифровки)
	
	ЦветВыполненогоППР 						= WebЦвета.Синий;
	ЦветЗапланированногоППР 				= WebЦвета.Васильковый;	
	
	ЦветВыполненогоМероприятия 				= WebЦвета.ТемноЗеленый;
	ЦветЗапланированногоМероприятия			= WebЦвета.ЖелтоЗеленый;	
	
	ЦветВыполненогоСметыПоДефектам 			= WebЦвета.Красный;
	ЦветЗапланированногоСметыПоДефектам 	= WebЦвета.Кирпичный;
	
	ЦветВыполненогоСметыПоПредписаниям		= WebЦвета.Желтый;
	ЦветЗапланированногоСметыПоПредписаниям	= WebЦвета.Оранжевый; 	
	
	ЦветВыполненого				= WebЦвета.Синий;	
	ЦветИзмененного 			= WebЦвета.Томатный;
	ЦветОтмененного 			= WebЦвета.Красный;
	ЦветЗапланированного 		= WebЦвета.Васильковый;
	ЦветЗамещенногоИсходного 	= WebЦвета.СеребристоСерый;
	ЦветИсходного 				= WebЦвета.ГолубойСоСтальнымОттенком;
	ЦветЗамещенного 			= WebЦвета.СветлоСерый;

	
	ЦветИнтервала = ЦветЗапланированного;
	ТекДата = ТекущаяДата();
	
	Если Выборка.НезапланированныйРемонт Тогда
	    ЦветИнтервала = WebЦвета.ТемноСерый;
	ИначеЕсли Выборка.ИсточникДанных = "ППР" Тогда
		ЦветИнтервала = ?(КонецДня(Выборка.ДатаОкончания) < ТекДата, ЦветВыполненогоППР,  ЦветЗапланированногоППР);	
	ИначеЕсли Выборка.ИсточникДанных = "РМ" Тогда
		ЦветИнтервала = ?(КонецДня(Выборка.ДатаОкончания) < ТекДата, ЦветВыполненогоМероприятия,  ЦветЗапланированногоМероприятия);	
	ИначеЕсли Выборка.ИсточникДанных = "СПД" Тогда
		ЦветИнтервала = ?(Выборка.ДатаОкончания < ТекДата, ЦветВыполненогоСметыПоДефектам,  ЦветЗапланированногоСметыПоДефектам);
	ИначеЕсли Выборка.ИсточникДанных = "СПВО" Тогда
		ЦветИнтервала = ?(Выборка.ДатаОкончания < ТекДата, ЦветВыполненогоСметыПоПредписаниям,  ЦветЗапланированногоСметыПоПредписаниям);
	КонецЕсли;
	
 	Если Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год") Тогда
		ДатаНачалаПериода = НачалоГода(Выборка.ДатаНачала);
		ДатаОкончанияПериода = КонецГода(Выборка.ДатаОкончания);
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц") Тогда
		ДатаНачалаПериода = НачалоМесяца(Выборка.ДатаНачала);
		ДатаОкончанияПериода = КонецМесяца(Выборка.ДатаОкончания);
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя") Тогда
		ДатаНачалаПериода = НачалоНедели(Выборка.ДатаНачала);
		ДатаОкончанияПериода = КонецНедели(Выборка.ДатаОкончания);
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.День") Тогда
		ДатаНачалаПериода = НачалоДня(Выборка.ДатаНачала);
		ДатаОкончанияПериода = КонецДня(Выборка.ДатаОкончания);
	Иначе
		ДатаНачалаПериода = Выборка.ДатаНачала;
		ДатаОкончанияПериода = ?(Выборка.ДатаОкончания > Выборка.ДатаНачала, Выборка.ДатаОкончания, Выборка.ДатаНачала + 3600);
	КонецЕсли;
	
	СтруктураРасшифровки.Вставить("ДатаНачалаПериода", ДатаНачалаПериода);
	СтруктураРасшифровки.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериода);
	
	ДатаНачалаТекст = Выборка.ДатаНачала;
	ДатаОкончанияТекст = ?(Выборка.ДатаОкончания > Выборка.ДатаНачала, Выборка.ДатаОкончания, Выборка.ДатаНачала + 3600);
	
	Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
	Значение.Редактирование = Ложь;
	Попытка	
		Интервал = Значение.Добавить();
		Интервал.Начало = ДатаНачалаПериода;
		Интервал.Конец = ДатаОкончанияПериода;
		Интервал.Расшифровка = СтруктураРасшифровки;
		
		Интервал.Цвет   = ЦветИнтервала;	
		Интервал.Текст  = Строка(ДатаНачалаПериода) + " - " + Строка(ДатаОкончанияПериода); 					
		
		Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
		Значение.Редактирование = Ложь;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = ДатаНачалаПериода;
		Интервал.Конец = ДатаОкончанияПериода;
		Интервал.Расшифровка = СтруктураРасшифровки;
		
		Интервал.Цвет   = ЦветИнтервала;		
		Интервал.Текст  = Строка(ДатаНачалаПериода) + " - " + Строка(ДатаОкончанияПериода); 					
		
		Значение = Диаграмма.ПолучитьЗначение(ДетЗаписи, СерияРемонт);
		Значение.Редактирование = Истина;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = ДатаНачалаПериода;
		Интервал.Конец = ДатаОкончанияПериода;
		
		Интервал.Цвет   = ЦветИнтервала;
		Интервал.Текст  = Строка(ДатаНачалаПериода) + " - " + Строка(ДатаОкончанияПериода);
		Интервал.Расшифровка = СтруктураРасшифровки;
	Исключение
		 
	КонецПопытки;
	
КонецПроцедуры
 
&НаКлиенте 
Процедура ОбновитьЗаголовокКнопкиПланРабот()
	Элементы.ВыбратьПланРабот.Заголовок = ?(ЗначениеЗаполнено(ПланРабот), Строка(ПланРабот), НСтр("ru = 'Выбрать план работ'"));

	Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(ПланРабот);
	Элементы.ВидПлана.ТолькоПросмотр = ЗначениеЗаполнено(ПланРабот);
	Элементы.ДатаОтсчета.ТолькоПросмотр = ЗначениеЗаполнено(ПланРабот);
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьСтруктуруДанныхИзСохраненногоПлана(ПланРабот)
	
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПланРаботПодразделения.Организация КАК Организация,
	               |	торо_ПланРаботПодразделения.ВидПлана КАК ВидПлана,
	               |	торо_ПланРаботПодразделения.ДатаОтсчета КАК ДатаОтсчета,
	               |	торо_ПланРаботПодразделения.ПериодичностьПланирования КАК Периодичность,
	               |	торо_ПланРаботПодразделения.ТочностьПланирования КАК Детализация,
	               |	торо_ПланРаботПодразделения.КоличествоПериодов КАК КоличествоПериодов,
	               |	торо_ПланРаботПодразделения.СписокВидовРемонта.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		ВидРемонта КАК ВидРемонта
	               |	) КАК СписокВидовРемонта,
	               |	торо_ПланРаботПодразделения.Исполнители.(
	               |		Исполнитель КАК Исполнитель
	               |	) КАК Исполнители,
	               |	торо_ПланРаботПодразделения.УточненияИсполнителей.(
	               |		УточнениеИсполнителя КАК УточнениеИсполнителя
	               |	) КАК УточненияИсполнителей,
	               |	торо_ПланРаботПодразделения.ОбъектыРемонтов.(
	               |		ОбъектРемонта КАК ОбъектРемонта
	               |	) КАК ОбъектыРемонтов,
	               |	торо_ПланРаботПодразделения.ВладельцыОР.(
	               |		Владелец КАК Владелец
	               |	) КАК ВладельцыОР
	               |ИЗ
	               |	Документ.торо_ПланРаботПодразделения КАК торо_ПланРаботПодразделения
	               |ГДЕ
	               |	торо_ПланРаботПодразделения.Ссылка = &ПланРабот";
	# КонецОбласти
	Запрос.УстановитьПараметр("ПланРабот", ПланРабот);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();                                                                                                                 
		СтруктураВозврата = Новый Структура("Организация, ВидПлана, ДатаОтсчета, Периодичность, Детализация,
											|КоличествоПериодов, ВидыРемонтовМассив, МассивПодразделений,
											|МассивКонтрагентов, МассивДоговоров, МассивБригад, МассивВладельцев, МассивОР");
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		
		МассивВидовРемонтов = Новый Массив;
		МассивПодразделений = Новый Массив;
		МассивКонтрагентов = Новый Массив;
		МассивВладельцев = Новый Массив;
		МассивДоговоров = Новый Массив;
		МассивБригад = Новый Массив;
		МассивОР = Новый Массив;
		
		ВыборкаРемонты = Выборка.СписокВидовРемонта.Выбрать();
		Пока ВыборкаРемонты.Следующий() Цикл
			МассивВидовРемонтов.Добавить(ВыборкаРемонты.ВидРемонта);	
		КонецЦикла;
		
		ВыборкаИсполнители = Выборка.Исполнители.Выбрать();
		Пока ВыборкаИсполнители.Следующий() Цикл
			Если ТипЗнч(ВыборкаИсполнители.Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
			    МассивКонтрагентов.Добавить(ВыборкаИсполнители.Исполнитель);
			Иначе
			    МассивПодразделений.Добавить(ВыборкаИсполнители.Исполнитель);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаУточненияИсполнителей = Выборка.УточненияИсполнителей.Выбрать();
		Пока ВыборкаУточненияИсполнителей.Следующий() Цикл
			Если ТипЗнч(ВыборкаУточненияИсполнителей.УточнениеИсполнителя) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			    МассивДоговоров.Добавить(ВыборкаУточненияИсполнителей.УточнениеИсполнителя);
			Иначе
			    МассивБригад.Добавить(ВыборкаУточненияИсполнителей.УточнениеИсполнителя);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаОР = Выборка.ОбъектыРемонтов.Выбрать();
		Пока ВыборкаОР.Следующий() Цикл
			МассивОР.Добавить(ВыборкаОР.ОбъектРемонта);	
		КонецЦикла;
		
		ВыборкаВладельцы = Выборка.ВладельцыОР.Выбрать();
		Пока ВыборкаВладельцы.Следующий() Цикл
			МассивВладельцев.Добавить(ВыборкаВладельцы.Владелец);	
		КонецЦикла;
		
		СтруктураВозврата.ВидыРемонтовМассив = МассивВидовРемонтов;
		СтруктураВозврата.МассивПодразделений = МассивПодразделений;
		СтруктураВозврата.МассивКонтрагентов = МассивКонтрагентов;
		СтруктураВозврата.МассивДоговоров = МассивДоговоров;
		СтруктураВозврата.МассивБригад = МассивБригад;
		СтруктураВозврата.МассивВладельцев = МассивВладельцев;
		СтруктураВозврата.МассивОР = МассивОР;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли; 
	
	Возврат Новый Структура;
КонецФункции 

&НаКлиенте 
Процедура ПроверитьДатыРемонтовВСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные.ДатаНачала > ТекущиеДанные.ДатаОкончания Тогда
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Дата окончания ремонта не может быть раньше даты начала ремонта'"); 
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить(); 
		ТекущиеДанные.ДатаОкончания = ТекущиеДанные.ДатаНачала;
	КонецЕсли; 
	
	Если ФОНазначениеНаРемонтыСУчетомРисков И ТекущиеДанные.КрайняяДатаЗавершения < ТекущиеДанные.ДатаОкончания Тогда
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Крайняя дата завершения не может быть раньше даты окончания ремонта'"); 
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить(); 
		ТекущиеДанные.КрайняяДатаЗавершения = ТекущиеДанные.ДатаОкончания;
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРедактированияпПлана()
	ДопступностьРедактирования = Истина;
	Если ЗначениеЗаполнено(ПланРабот) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_ПланРаботПодразделения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.торо_ПланРаботПодразделения КАК торо_ПланРаботПодразделения
			|ГДЕ
			|	торо_ПланРаботПодразделения.Организация = &Организация
			|	И торо_ПланРаботПодразделения.ВидПлана = &ВидПлана
			|	И торо_ПланРаботПодразделения.ДатаОтсчета > &ДатаОтсчета
			|	И торо_ПланРаботПодразделения.ПериодичностьПланирования = &ПериодичностьПланирования
			|	И торо_ПланРаботПодразделения.ТочностьПланирования = &ТочностьПланирования
			|	И торо_ПланРаботПодразделения.КоличествоПериодов = &КоличествоПериодов
			|	И торо_ПланРаботПодразделения.ОбъектыРемонтов.ОбъектРемонта В(&ОбъектРемонта)
			|	И торо_ПланРаботПодразделения.ВладельцыОР.Владелец В(&Владелец)
			|	И (торо_ПланРаботПодразделения.УточненияИсполнителей.УточнениеИсполнителя В (&Бригада)
			|			ИЛИ торо_ПланРаботПодразделения.УточненияИсполнителей.УточнениеИсполнителя В (&ДоговорКонтрагента))
			|	И торо_ПланРаботПодразделения.Ссылка <> &ПланРабот
			|	И (торо_ПланРаботПодразделения.Исполнители.Исполнитель В (&ПодразделениеИсполнитель)
			|			ИЛИ торо_ПланРаботПодразделения.Исполнители.Исполнитель В (&Контрагент))";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
		Запрос.УстановитьПараметр("ДатаОтсчета", ДатаОтсчета);
		Запрос.УстановитьПараметр("ПериодичностьПланирования", Периодичность);
		Запрос.УстановитьПараметр("ТочностьПланирования", Детализация);
		Запрос.УстановитьПараметр("КоличествоПериодов", КоличествоПериодов); 
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		Запрос.УстановитьПараметр("КоличествоОбъектов", ОбъектРемонта.Количество());
		
		Запрос.УстановитьПараметр("Владелец", ВладелецОР);
		Запрос.УстановитьПараметр("КоличествоВладельцев", ВладелецОР.Количество());
		
		Запрос.УстановитьПараметр("ПодразделениеИсполнитель", ПодразделениеИсполнитель);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("КоличествоПодразделенийИИсполнителей", Контрагент.Количество() + ПодразделениеИсполнитель.Количество());
		
		Запрос.УстановитьПараметр("Бригада", Бригада);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("КоличествоДоговоровИБригад", Бригада.Количество() + ДоговорКонтрагента.Количество());

		Запрос.УстановитьПараметр("ПланРабот", ПланРабот);

		
		ДопступностьРедактирования = Не Запрос.Выполнить().Выбрать().Следующий();

	КонецЕсли;
	
	Элементы.ФормаСохранитьПланПодразделения.Доступность = Не ЗапретРедактированияДокументаПоСпособуСогласования(ПланРабот) И ДопступностьРедактирования;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапретРедактированияДокументаПоСпособуСогласования(Документ)
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ПланРаботПодразделения;
	ИспользоватьСогласованиеДокументов = торо_РаботаССогласованиями.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);
	
	Если Не ИспользоватьСогласованиеДокументов Тогда
	    Возврат Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ТекущиеСтатусыСогласованияДокументов.СтатусДокумента КАК СтатусДокумента
		|ПОМЕСТИТЬ ВТ_ТекущиеСтатусыСогласования
		|ИЗ
		|	РегистрСведений.торо_ТекущиеСтатусыСогласованияДокументов КАК торо_ТекущиеСтатусыСогласованияДокументов
		|ГДЕ
		|	торо_ТекущиеСтатусыСогласованияДокументов.СогласуемыйДокумент = &СогласуемыйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НастройкиСтатусовСогласованияДокументов.ЗапретитьРедактирование КАК ЗапретитьРедактирование
		|ИЗ
		|	РегистрСведений.торо_НастройкиСтатусовСогласованияДокументов КАК торо_НастройкиСтатусовСогласованияДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТекущиеСтатусыСогласования КАК ВТ_ТекущиеСтатусыСогласования
		|		ПО торо_НастройкиСтатусовСогласованияДокументов.Статус = ВТ_ТекущиеСтатусыСогласования.СтатусДокумента
		|ГДЕ
		|	торо_НастройкиСтатусовСогласованияДокументов.СпособСогласования = &СпособСогласования";
	
	Запрос.УстановитьПараметр("СогласуемыйДокумент", Документ);
	Запрос.УстановитьПараметр("СпособСогласования", Документ.СпособСогласования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	    Возврат ВыборкаДетальныеЗаписи.ЗапретитьРедактирование;
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДатыСтрокиСУчетомДетализации(ИмяКолонки, ТекущиеДанные)
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "ДеревоРемонты", "");
	ИмяИсходнойКолонки = СтрЗаменить(ИмяКолонки, "РедактируемаяДляОтображения", "");
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "Редактируемая", "");
	ТекущиеДанные[ИмяИсходнойКолонки] = ТекущиеДанные[ИмяКолонки];
	
	Если Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Год") Тогда
		ДатаНачала = НачалоГода(ТекущиеДанные.ДатаНачалаДляОтображения);
		ДатаОкончания = КонецГода(ТекущиеДанные.ДатаОкончанияДляОтображения);
		КрайняяДатаЗавершения = КонецГода(ТекущиеДанные.КрайняяДатаЗавершенияДляОтображения);
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Месяц") Тогда
		ДатаНачала = НачалоМесяца(ТекущиеДанные.ДатаНачалаДляОтображения);
		ДатаОкончания = КонецМесяца(ТекущиеДанные.ДатаОкончанияДляОтображения);
		КрайняяДатаЗавершения = КонецМесяца(ТекущиеДанные.КрайняяДатаЗавершенияДляОтображения);
	ИначеЕсли Детализация = ПредопределенноеЗначение("Перечисление.торо_ДетализацияПлана.Неделя") Тогда
		ДатаНачала = НачалоНедели(ТекущиеДанные.ДатаНачалаДляОтображения);
		ДатаОкончания = КонецНедели(ТекущиеДанные.ДатаОкончанияДляОтображения);
		КрайняяДатаЗавершения = КонецНедели(ТекущиеДанные.КрайняяДатаЗавершенияДляОтображения);
	Иначе
		ДатаНачала = ТекущиеДанные.ДатаНачалаДляОтображения;
		ДатаОкончания = ТекущиеДанные.ДатаОкончанияДляОтображения;
		КрайняяДатаЗавершения = ТекущиеДанные.КрайняяДатаЗавершенияДляОтображения;
	КонецЕсли;
	
	ТекущиеДанные.ДатаНачалаДляОтображения = ДатаНачала;
	ТекущиеДанные.ДатаОкончанияДляОтображения = ДатаОкончания;
	ТекущиеДанные.КрайняяДатаЗавершенияДляОтображения = ?(ТекущиеДанные.КрайняяДатаЗавершенияДляОтображения = Дата(1, 1, 1), Дата(1, 1, 1), КрайняяДатаЗавершения);
КонецПроцедуры

&НаСервере
Функция ПолучитьФОИСП()
	Возврат ПолучитьФункциональнуюОпцию("торо_ИспользоватьСкользящееПланирование");
КонецФункции

&НаКлиенте
Процедура УстановитьДатыДляИнтервала(Интервал)
	Время = Интервал.Начало - НачалоДня(Интервал.Начало);
	Если Время < 12*60*60 Тогда
		Интервал.Начало = НачалоДня(Интервал.Начало);
		Интервал.Конец = КонецДня(Интервал.Конец-60*60*24);
	Иначе
		Интервал.Начало = НачалоДня(Интервал.Начало+60*60*24);
		Интервал.Конец = КонецДня(Интервал.Конец);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицуРасчета(ВыделенныеСтроки = Неопределено)
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ИДСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ЕстьЗаявка", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ЕстьНаряд", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ЕстьАкт", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ID_Ремонта", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	МассивТиповОР = Новый Массив;
	МассивТиповОР.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	МассивТиповОР.Добавить(Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));
	ТаблицаДанных.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов(МассивТиповОР));
	ТаблицаДанных.Колонки.Добавить("ВидРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	
	МассивСтрокДерева = Новый Массив;
	Если ВыделенныеСтроки <> Неопределено Тогда 
		Для Каждого ИДСтроки Из ВыделенныеСтроки Цикл
			СтрокаДерева = ДеревоРемонты.НайтиПоИдентификатору(ИДСтроки);
			Если ЗначениеЗаполнено(СтрокаДерева.ID_Ремонта) И НЕ СтрокаДерева.ЕстьНаряд И НЕ СтрокаДерева.ЕстьАкт
				И НЕ СтрокаДерева.ЕстьОстановочный И НЕ СтрокаДерева.Отменен Тогда 
				СтрокаТаблицы = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
				СтрокаТаблицы.ИДСтроки = ИДСтроки;
				МассивСтрокДерева.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекУровень = ДеревоРемонты.ПолучитьЭлементы();
		ПолучитьСтрокиДерева(ТекУровень, МассивСтрокДерева, ТаблицаДанных);
	КонецЕсли;
	
	ЗаполнитьДатыСервер(ТаблицаДанных, МассивСтрокДерева);

КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиДерева(ТекУровень, МассивСтрокДерева, ТаблицаДанных)
	Для Каждого СтрокаДерева Из ТекУровень Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ID_Ремонта) И НЕ СтрокаДерева.ЕстьНаряд И НЕ СтрокаДерева.ЕстьАкт 
			И НЕ СтрокаДерева.ЕстьОстановочный И НЕ СтрокаДерева.Отменен Тогда
			МассивСтрокДерева.Добавить(СтрокаДерева);
			СтрокаТаблицы = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
			СтрокаТаблицы.ИДСтроки = СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		НовыйУровень = СтрокаДерева.ПолучитьЭлементы();
		ПолучитьСтрокиДерева(НовыйУровень, МассивСтрокДерева, ТаблицаДанных);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуРасписания(График, ДатаНачала, Периодичность, КоличествоПериодов)
	// Расчет приблизительной даты конца расписания
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ДатаКонцаРасписания = ДатаНачала + (366 * КоличествоПериодов) * 24 * 3600;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда 
		ДатаКонцаРасписания = ДатаНачала + (6 * 31 * КоличествоПериодов) * 24 * 3600;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда 
		ДатаКонцаРасписания = ДатаНачала + (3 * 31 * КоличествоПериодов) * 24 * 3600;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда 
		ДатаКонцаРасписания = ДатаНачала + (31 * КоличествоПериодов) * 24 * 3600;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда 
		ДатаКонцаРасписания = ДатаНачала + (10 * КоличествоПериодов) * 24 * 3600;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда 
		ДатаКонцаРасписания = ДатаНачала + (7 * КоличествоПериодов) * 24 * 3600;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда 
		ДатаКонцаРасписания = ДатаНачала + КоличествоПериодов * 24 * 3600;
	КонецЕсли;
	Графики = Новый Массив;
	Графики.Добавить(График);
	Возврат ГрафикиРаботы.РасписанияРаботыНаПериод(Графики, ДатаНачала, ДатаКонцаРасписания);
КонецФункции

&НаСервере
Процедура ЗаполнитьДатыСервер(ТаблицаДанных, МассивСтрокДерева)
	Расписание = ПолучитьТаблицуРасписания(ГрафикРаботы, ДатаНачалаРасчета, Периодичность, КоличествоПериодов);
	
	Если Расписание.Количество() = 0 Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для выбранного графика не заполнено расписание на указанную дату начала.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеПоРемонтам.ИДСтроки КАК ИДСтроки,
	               |	ДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	ДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	               |	ДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
	               |	ДанныеПоРемонтам.ID_Ремонта КАК ID_Ремонта
	               |ПОМЕСТИТЬ ДанныеПоРемонтам
	               |ИЗ
	               |	&ДанныеПоРемонтам КАК ДанныеПоРемонтам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеПоРемонтам.ИДСтроки КАК ИДСтроки,
	               |	ДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	ДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	               |	ЕСТЬNULL(торо_НормативныеРемонтыОборудования.НормативныйРемонт, торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт) КАК НормативныйРемонт
	               |ПОМЕСТИТЬ Нормативы
	               |ИЗ
	               |	ДанныеПоРемонтам КАК ДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |		ПО ДанныеПоРемонтам.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	               |			И ДанныеПоРемонтам.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
	               |		ПО ДанныеПоРемонтам.ОбъектРемонта = торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов
	               |			И ДанныеПоРемонтам.ВидРемонта = торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия
	               |ГДЕ
	               |	НЕ ДанныеПоРемонтам.ЕстьЗаявка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВерсииТехКартСрезПоследних.Период КАК Период,
	               |	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
	               |	торо_ВерсииТехКартСрезПоследних.ТехКарта КАК ТехКарта
	               |ПОМЕСТИТЬ АктуальныеТК
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(
	               |			&Период,
	               |			ИдентификаторТехКарты В
	               |				(ВЫБРАТЬ
	               |					Нормативы.НормативныйРемонт
	               |				ИЗ
	               |					Нормативы)) КАК торо_ВерсииТехКартСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Нормативы.ИДСтроки КАК ИДСтроки,
	               |	ЕСТЬNULL(торо_ТехКарты.НормаВремени, 0) КАК НормаВремени
	               |ИЗ
	               |	Нормативы КАК Нормативы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеТК КАК АктуальныеТК
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты КАК торо_ТехКарты
	               |			ПО АктуальныеТК.ТехКарта = торо_ТехКарты.Ссылка
	               |		ПО Нормативы.НормативныйРемонт = АктуальныеТК.ИдентификаторТехКарты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеПоРемонтам.ИДСтроки,
	               |	СУММА(ЕСТЬNULL(торо_ТехнологическиеОперации.НормаВремени, 0) * ЕСТЬNULL(РемонтныеРаботы.Количество, 0))
	               |ИЗ
	               |	ДанныеПоРемонтам КАК ДанныеПоРемонтам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК РемонтныеРаботы
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
	               |			ПО РемонтныеРаботы.РемонтнаяРабота = торо_ТехнологическиеОперации.Ссылка
	               |		ПО (РемонтныеРаботы.РемонтыОборудования_ID = ДанныеПоРемонтам.ID_Ремонта)
	               |ГДЕ
	               |	ДанныеПоРемонтам.ЕстьЗаявка
	               |	И РемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации
	               |	И РемонтныеРаботы.Ссылка.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеПоРемонтам.ИДСтроки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИДСтроки";
	Запрос.УстановитьПараметр("ДанныеПоРемонтам", ТаблицаДанных);
	Запрос.УстановитьПараметр("Период", ДатаНачалаРасчета);
	РезЗапроса = Запрос.Выполнить();
	Если НЕ РезЗапроса.Пустой() И МассивСтрокДерева.Количество() Тогда
		ТаблицаСТК = РезЗапроса.Выгрузить();
		ТаблицаСТК.Индексы.Добавить("ИДСтроки");
		ПараметрыПоиска = Новый Структура;
		ИндексСтрокиРасписания = 0;
		СтрокаРасписания = Расписание[ИндексСтрокиРасписания];
		ТекДатаНачала = СтрокаРасписания.ДатаГрафика + (СтрокаРасписания.ВремяНачала - Дата(1, 1, 1));
		ВремяРаботы = СтрокаРасписания.ВремяОкончания - СтрокаРасписания.ВремяНачала;
		КонецРабочегоДня = ТекДатаНачала + ВремяРаботы;
		
		Если НачалоДня(ДатаНачалаРасчета) = СтрокаРасписания.ДатаГрафика И ДатаНачалаРасчета > ТекДатаНачала И ДатаНачалаРасчета < КонецРабочегоДня Тогда 
			ТекДатаНачала = ДатаНачалаРасчета;	
		КонецЕсли;
		
		Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
			ПараметрыПоиска.Вставить("ИДСтроки", СтрокаДерева.ПолучитьИдентификатор());
			СтрокаНормы = ТаблицаСТК.НайтиСтроки(ПараметрыПоиска);
			СтрокаДерева.ДатаНачалаДляОтображения = ТекДатаНачала;
			СтрокаДерева.ДатаНачала = ТекДатаНачала;
			Если СтрокаНормы.Количество() Тогда 
				НормаВремени = СтрокаНормы[0].НормаВремени;
				Пока Истина Цикл 
					ДоКонцаТекДня = КонецРабочегоДня - ТекДатаНачала;
					Если НормаВремени - ДоКонцаТекДня <= 0 Тогда
						ДатаОкончанияРемонта = ТекДатаНачала + НормаВремени;
						СтрокаДерева.ДатаОкончанияДляОтображения = ДатаОкончанияРемонта; 
						СтрокаДерева.ДатаОкончания = ДатаОкончанияРемонта;
						ТекДатаНачала = ДатаОкончанияРемонта;
						Прервать;
					КонецЕсли;
					
					ИндексСтрокиРасписания = ИндексСтрокиРасписания + 1;
					Если ИндексСтрокиРасписания >= Расписание.Количество() Тогда
						Расписание = ПолучитьТаблицуРасписания(ГрафикРаботы, НачалоДня(ТекДатаНачала) + 24*3600, Периодичность, КоличествоПериодов);
						Если Расписание.Количество() = 0 Тогда
							СтрокаДерева.ДатаОкончанияДляОтображения = ТекДатаНачала;
							ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
								НСтр("ru = 'Для выбранного графика не заполнено расписание после %1. Расчет выполнен не до конца.'"),
								Формат(ТекДатаНачала, "ДФ=dd.MM.yyyy")));
							Возврат;
						Иначе
							ИндексСтрокиРасписания = 0;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаРасписания = Расписание[ИндексСтрокиРасписания];
					ТекДатаНачала = СтрокаРасписания.ДатаГрафика + (СтрокаРасписания.ВремяНачала - Дата(1, 1, 1));
					ВремяРаботы = СтрокаРасписания.ВремяОкончания - СтрокаРасписания.ВремяНачала;
					КонецРабочегоДня = ТекДатаНачала + ВремяРаботы;
					
					НормаВремени = НормаВремени - ДоКонцаТекДня;
				КонецЦикла;
				
				СтруктураПоиска = Новый Структура("ID_Ремонта", СтрокаДерева.ID_Ремонта);
				МассивИзменённыхДатРемонтов = ТаблицаИзмененныхДатРемонтовДляЗаписи.НайтиСтроки(СтруктураПоиска);
				Если МассивИзменённыхДатРемонтов.Количество() = 0 Тогда
					СтрокаТаблицыДат = ТаблицаИзмененныхДатРемонтовДляЗаписи.Добавить();
				Иначе
					СтруктураПоиска.Вставить("Исполнитель", СтрокаДерева.Исполнитель);
					СтруктураПоиска.Вставить("УточнениеИсполнителя", СтрокаДерева.УточнениеИсполнителя);
					МассивИзменённыхДатРемонтов = ТаблицаИзмененныхДатРемонтовДляЗаписи.НайтиСтроки(СтруктураПоиска);
					
					Если МассивИзменённыхДатРемонтов.Количество() = 0 Тогда
						СтрокаТаблицыДат = ТаблицаИзмененныхДатРемонтовДляЗаписи.Добавить();
					Иначе
						СтрокаТаблицыДат = МассивИзменённыхДатРемонтов[0];
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДат, СтрокаДерева);
				СтрокаТаблицыДат.ДатаНачала = СтрокаДерева.ДатаНачалаДляОтображения;
				СтрокаТаблицыДат.ДатаОкончания = СтрокаДерева.ДатаОкончанияДляОтображения;
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполненностьДляРасчетаДат(Отказ)
	Если НЕ ЗначениеЗаполнено(ГрафикРаботы) Тогда                                                              
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен график работы'"),,,, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаРасчета) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнена дата начала для расчетов'"),,,, Отказ);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти