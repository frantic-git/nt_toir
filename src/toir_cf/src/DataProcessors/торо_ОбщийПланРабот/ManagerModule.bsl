#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_МакетПланаРемонтовНаПериод") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"ПФ_MXL_МакетПланаРемонтовНаПериод", 
		НСтр("ru='Общий план работ'"), 
		СформироватьПечатнуюФормуПланРабот(МассивОбъектов, ПараметрыПечати));
	КонецЕсли;
КонецПроцедуры

// Процедура вывода на экран печатной формы документа
// торо_ПланГрафикРемонта.
//  
Функция СформироватьПечатнуюФормуПланРабот(ПланРабот, ПараметрыПечати)
	
    ДатаНачала = ПараметрыПечати.ДатаНачала;
	ДатаОкончания = ПараметрыПечати.ДатаОкончания;
	ВидПлана = ПараметрыПечати.ВидПлана;
	ИспользоватьСкользящееПланирование = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСкользящееПланирование");
	
	Исполнители = ПараметрыПечати.ПодразделенияИсполнители;
	Для Каждого ЭлементКонтрагент Из ПараметрыПечати.Контрагенты Цикл
		Исполнители.Добавить(ЭлементКонтрагент.Значение);
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляПечатиПланаРабот(ПланРабот);
	
	Запрос.УстановитьПараметр("ПланРабот", ПланРабот);	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания); 
	
	Запрос.УстановитьПараметр("ПоказыватьРемонтыППР", ПараметрыПечати.ПоказыватьРемонтыППР);
	Запрос.УстановитьПараметр("ПоказыватьРемонтыРегламентные", ПараметрыПечати.ПоказыватьРемонтыРегламентные);
	Запрос.УстановитьПараметр("ПоказыватьДефекты", ПараметрыПечати.ПоказыватьДефекты);
	Запрос.УстановитьПараметр("ПоказыватьВнешниеОснования", ПараметрыПечати.ПоказыватьВнешниеОснования);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОрганизации", Не ЗначениеЗаполнено(ПараметрыПечати.Организация));
	Запрос.УстановитьПараметр("Организация", ПараметрыПечати.Организация);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОР", ПараметрыПечати.ОбъектыРемонта.Количество() > 0);
	Запрос.УстановитьПараметр("ОбъектыРемонта", ПараметрыПечати.ОбъектыРемонта);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВР", ПараметрыПечати.ВидыРемонта.Количество() > 0);
	Запрос.УстановитьПараметр("ВидыРемонта", ПараметрыПечати.ВидыРемонта);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВладельцу",  ПараметрыПечати.ВладельцыОР.Количество() > 0);
	Запрос.УстановитьПараметр("ВладелецОР", ПараметрыПечати.ВладельцыОР);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоИсполнителям", Исполнители.Количество() > 0);
	Запрос.УстановитьПараметр("ИсполнительРемонта", Исполнители);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоДоговоруКонтрагента", ПараметрыПечати.ДоговораКонтрагентов.Количество() > 0);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыПечати.ДоговораКонтрагентов);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоБригадам", ПараметрыПечати.Бригады.Количество() > 0);
	Запрос.УстановитьПараметр("Бригады", ПараметрыПечати.Бригады);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "торо_ПечатьПланаРабот_ПФ_MXL_МакетПланаРемонтовНаПериод";
	ТабличныйДокумент.ИмяПараметровПечати = "торо_ПечатьПланаРабот_ПФ_MXL_МакетПланаРемонтовНаПериод";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ТолькоПросмотр = Истина;

	МакетПечатнойФормы = УправлениеПечатью.МакетПечатнойФормы("Обработка.торо_ОбщийПланРабот.ПФ_MXL_МакетПланаРемонтовНаПериод");
	
	ОбластьЗаголовок = МакетПечатнойФормы.ПолучитьОбласть("Заголовок");	
	ОбластьЗаголовок.Параметры.НачалоПериода = Формат(ДатаНачала, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
	ОбластьЗаголовок.Параметры.КонецПериода = Формат(ДатаОкончания, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения"""); 	
	ОбластьЗаголовок.Параметры.Организация = Строка(ПараметрыПечати.Организация);
	ОбластьЗаголовок.Параметры.ВидПлана = ?(ИспользоватьСкользящееПланирование И ЗначениеЗаполнено(ВидПлана), СтрШаблон("(%1)", Строка(ВидПлана)), "");
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка = МакетПечатнойФормы.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	МассивВременныхИнтервалов = Новый Массив;
	ПечатьПланаРаботВывестиСтолбцыПоПериодичности(ТабличныйДокумент, МакетПечатнойФормы, ПараметрыПечати, МассивВременныхИнтервалов);
			
	НомерСтроки = 1;
	ВыборкаОбъектыРемонта = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектыРемонта.Следующий() Цикл
		
		ОбластьСтрокаЗаполнения = МакетПечатнойФормы.ПолучитьОбласть("СтрокаЗаполнения");
		ФорматнаяОбласть = ОбластьСтрокаЗаполнения.Область("НаимПрим");
		Если ТипЗнч(ВыборкаОбъектыРемонта.ОбъектРемонта) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			ФорматнаяОбласть.Примечание.Текст = ВыборкаОбъектыРемонта.ГрафикОбъектаРемонта;
		КонецЕсли; 
		
		ОбластьСтрокаЗаполнения.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтрокаЗаполнения.Параметры.НаименовОбъекта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ВыборкаОбъектыРемонта.ОбъектРемонта);			
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаЗаполнения);	
		
		ЛинияСплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЛинияНикакая = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				 		
		Для Индекс = 1 По  МассивВременныхИнтервалов.Количество() Цикл
			
			ВидыРемонтаЗаПериод = "";
			ТекущийПериодНачало = МассивВременныхИнтервалов[Индекс-1].НачИнт;
			ТекущийПериодКонец = МассивВременныхИнтервалов[Индекс-1].КонИнт;
			
			Если ПараметрыПечати.ИнтервалРазбиения = Перечисления.торо_ДетализацияПлана.Час Тогда
				Область = МакетПечатнойФормы.ПолучитьОбласть("ЗначенияДняЧас");
			Иначе
				Область = МакетПечатнойФормы.ПолучитьОбласть("ЗначенияДня");
			КонецЕсли; 
			
			ОбластьФормат = Область.Область();
			
			Выборка = ВыборкаОбъектыРемонта.Выбрать();
			Пока Выборка.Следующий() Цикл 
				
				Если Выборка.ДатаОкончания < Выборка.ДатаНачала Тогда
					КонечнаяДата = КонецДня(Выборка.ДатаНачала);	
				Иначе
					КонечнаяДата = Выборка.ДатаОкончания;
				КонецЕсли; 
				
				Если ((ТекущийПериодКонец >= Выборка.ДатаНачала) И (ТекущийПериодНачало <= КонечнаяДата))
					Или ((ТекущийПериодКонец > Выборка.ДатаНачала) И (ТекущийПериодНачало <= КонечнаяДата)) Тогда
					
					ОбластьФормат.ЦветФона = Новый Цвет(255, 251, 240);
					ОбластьФормат.ГраницаСлева = ЛинияНикакая;
					ОбластьФормат.ГраницаСправа = ЛинияСплошная;
					
					ПредставлениеВидаРемонта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(Выборка.ВидРемонта);
					ВидыРемонтаЗаПериод = ВидыРемонтаЗаПериод + ПредставлениеВидаРемонта + ", ";
					ОбластьФормат.Примечание.Текст = ОбластьФормат.Примечание.Текст + ПредставлениеВидаРемонта 
						+ " (" + Лев(Выборка.ДатаНачала, 10) + " - " + Лев(Выборка.ДатаОкончания, 10) + ") " + Символы.ПС;
				КонецЕсли;	
			КонецЦикла;
			
			Область.Параметры.Заполнение = Лев(ВидыРемонтаЗаПериод, СтрДлина(ВидыРемонтаЗаПериод) - 2);
			ТабличныйДокумент.Присоединить(Область);
		КонецЦикла;	
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	
	
	ОбъединитьЯчейки(ТабличныйДокумент);
	
	Область = МакетПечатнойФормы.ПолучитьОбласть("Пояснение");	
	ТабличныйДокумент.Вывести(Область);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗапросаДляПечатиПланаРабот(ПланРабот)
	
	Если ЗначениеЗаполнено(ПланРабот) Тогда
		
		Результат =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта КАК ОбъектРемонта,
		|	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонта.ПлановыйГрафикРаботы) КАК ГрафикОбъектаРемонта,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ВидРемонта КАК ВидРемонта,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаНачала КАК ДатаНачала,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаОкончания КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА торо_ОбъектыРемонта.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|		КОГДА торо_ОбъектыРемонта.ВнешнийОбъект
		|			ТОГДА торо_ОбъектыРемонта.Контрагент
		|		ИНАЧЕ торо_ОбъектыРемонта.Подразделение
		|	КОНЕЦ КАК Владелец,
		|	ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Бригада,
		|	ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.Исполнитель, ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)) КАК Исполнитель
		|ПОМЕСТИТЬ ВТ_ПланРабот
		|ИЗ
		|	Документ.торо_ПланРаботПодразделения.СписокРемонтовПлана КАК торо_ПланРаботПодразделенияСписокРемонтовПлана
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
		|		ПО торо_ПланРаботПодразделенияСписокРемонтовПлана.ID = торо_ПлановыеИсполнителиРемонтов.IDРемонта
		|ГДЕ
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.Ссылка = &ПланРабот
		|	И ВЫБОР
		|			КОГДА торо_ПланРаботПодразделенияСписокРемонтовПлана.ИсточникДанных = ""ППР""
		|				ТОГДА &ПоказыватьРемонтыППР
		|			КОГДА торо_ПланРаботПодразделенияСписокРемонтовПлана.ИсточникДанных = ""СПД""
		|				ТОГДА &ПоказыватьДефекты
		|			КОГДА торо_ПланРаботПодразделенияСписокРемонтовПлана.ИсточникДанных = ""СПВО""
		|				ТОГДА &ПоказыватьВнешниеОснования
		|			КОГДА торо_ПланРаботПодразделенияСписокРемонтовПлана.ИсточникДанных = ""РМ""
		|				ТОГДА &ПоказыватьРемонтыРегламентные
		|		КОНЕЦ
		|	И (НЕ &ИспользоватьОтборПоВР
		|			ИЛИ торо_ПланРаботПодразделенияСписокРемонтовПлана.ВидРемонта В (&ВидыРемонта))
		|	И (НЕ &ИспользоватьОтборПоОР
		|			ИЛИ торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта В (&ОбъектыРемонта))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПланРабот.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ПланРабот.ГрафикОбъектаРемонта КАК ГрафикОбъектаРемонта,
		|	ВТ_ПланРабот.ВидРемонта КАК ВидРемонта,
		|	ВТ_ПланРабот.ДатаНачала КАК ДатаНачала,
		|	ВТ_ПланРабот.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	ВТ_ПланРабот КАК ВТ_ПланРабот
		|ГДЕ
		|	(НЕ &ИспользоватьОтборПоВладельцу
		|			ИЛИ ВТ_ПланРабот.Владелец В (&ВладелецОР))
		|	И (НЕ &ИспользоватьОтборПоИсполнителям
		|			ИЛИ ВТ_ПланРабот.Исполнитель В (&ИсполнительРемонта))
		|	И (НЕ &ИспользоватьОтборПоБригадам
		|			ИЛИ ВТ_ПланРабот.Бригада В (&Бригады))
		
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала
		|ИТОГИ ПО
		|	ОбъектРемонта";
		
	Иначе  
		
		Результат = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
		|	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонта.ПлановыйГрафикРаботы) КАК ГрафикОбъектаРемонта,
		|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
		|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА торо_ОбъектыРемонта.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|		КОГДА торо_ОбъектыРемонта.ВнешнийОбъект
		|			ТОГДА торо_ОбъектыРемонта.Контрагент
		|		ИНАЧЕ торо_ОбъектыРемонта.Подразделение
		|	КОНЕЦ КАК Владелец,
		|	ВЫБОР
		|		КОГДА торо_ОбъектыРемонта.Ссылка ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ(торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК Документ.торо_ГрафикРегламентныхМероприятийТОиР).Организация
		|		ИНАЧЕ торо_ОбъектыРемонта.Организация
		|	КОНЕЦ КАК Организация,
		|	ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Бригада,
		|	ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.Исполнитель, ЗНАЧЕНИЕ(Справочник.торо_РемонтныеБригады.ПустаяСсылка)) КАК Исполнитель
		|ПОМЕСТИТЬ ВТ_АктуальныеДаты
		|ИЗ
		|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		|		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
		|		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_ПлановыеИсполнителиРемонтов.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
		|				ТОГДА &ПоказыватьРемонтыППР
		|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)
		|				ТОГДА &ПоказыватьДефекты
		|						И торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
		|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот)
		|				ТОГДА &ПоказыватьВнешниеОснования
		|						И торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
		|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)
		|				ТОГДА &ПоказыватьРемонтыРегламентные
		|		КОНЕЦ
		|	И торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала <= &ДатаОкончания
		|	И торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания >= &ДатаНачала
		|	И (НЕ &ИспользоватьОтборПоОР
		|			ИЛИ торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта В (&ОбъектыРемонта))
		|	И (НЕ &ИспользоватьОтборПоВР
		|			ИЛИ торо_ОбщиеДанныеПоРемонтам.ВидРемонта В (&ВидыРемонта))
		|	И НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
		|	И НЕ торо_ОбщиеДанныеПоРемонтам.Замещен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_АктуальныеДаты.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_АктуальныеДаты.ГрафикОбъектаРемонта КАК ГрафикОбъектаРемонта,
		|	ВТ_АктуальныеДаты.ВидРемонта КАК ВидРемонта,
		|	ВТ_АктуальныеДаты.ДатаНачала КАК ДатаНачала,
		|	ВТ_АктуальныеДаты.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	ВТ_АктуальныеДаты КАК ВТ_АктуальныеДаты
		|ГДЕ
		|	(НЕ &ИспользоватьОтборПоВладельцу
		|			ИЛИ ВТ_АктуальныеДаты.Владелец В (&ВладелецОР))
		|	И (&ИспользоватьОтборПоОрганизации
		|			ИЛИ ВТ_АктуальныеДаты.Организация = &Организация)
		|	И (НЕ &ИспользоватьОтборПоИсполнителям
		|			ИЛИ ВТ_АктуальныеДаты.Исполнитель В (&ИсполнительРемонта))
		|	И (НЕ &ИспользоватьОтборПоБригадам
		|			ИЛИ ВТ_АктуальныеДаты.Бригада В (&Бригады))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала
		|ИТОГИ ПО
		|	ОбъектРемонта";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Процедура ПечатьПланаРаботВывестиСтолбцыПоПериодичности(ТабличныйДокумент, МакетПечатнойФормы, ПараметрыПечати, МассивВременныхИнтервалов)
	
	ДатаНачала = ПараметрыПечати.ДатаНачала;
	ДатаОкончания = ПараметрыПечати.ДатаОкончания;
	
	ПериодовВОтчете = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / (60*60*24);
	ШиринаТаблицы = ТабличныйДокумент.ПолучитьОбласть("Шапка").ШиринаТаблицы;
	
	ИнтервалРазбиения = ПараметрыПечати.ИнтервалРазбиения;
	ТемпДата = НачалоДня(ДатаНачала);
	ПериодКонРасчетный = ДатаОкончания;
	
	Если ИнтервалРазбиения = Перечисления.торо_ДетализацияПлана.День Тогда
		
		ПериодКонРасчетный = КонецДня(ДатаОкончания);
		ПериодовВОтчете = 0; 
		
		СледующийДень = Истина;
		Пока СледующийДень Цикл
			Область = МакетПечатнойФормы.ПолучитьОбласть("СтолбецДня");
			ОбластьОформления = Область.Область("Знач");
			
			Область.Параметры.НомИнтервала = Формат(ТемпДата, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
			Если ДеньНедели(Дата(Год(ТемпДата), Месяц(ТемпДата), День(ТемпДата), 0,0,0))=6 Или ДеньНедели(Дата(Год(ТемпДата), Месяц(ТемпДата), День(ТемпДата), 0,0,0))=7 Тогда
				ОбластьОформления.ЦветФона = Новый Цвет(255,251,240);
				ОбластьОформления.ЦветТекста = Новый Цвет(0,0,0);
			КонецЕсли;
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",НачалоДня(ТемпДата));
			ЕдиничныйИнтервал.Вставить("КонИнт",КонецДня(ТемпДата));	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТабличныйДокумент.Присоединить(Область);
			ТемпДата = ТемпДата+60*60*24; 
			Если ТемпДата > ПериодКонРасчетный Тогда
				СледующийДень = Ложь;		
			КонецЕсли;  
			
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла;  
		
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;
		
	ИначеЕсли ИнтервалРазбиения = Перечисления.торо_ДетализацияПлана.Неделя Тогда
		
		ПериодКонРасчетный = КонецНедели(ДатаОкончания);
		ТемпДата = НачалоДня(НачалоНедели(ДатаНачала));
		ПериодовВОтчете = 0;
		
		СледующаяНеделя = Истина;
		Пока СледующаяНеделя Цикл 
			Область = МакетПечатнойФормы.ПолучитьОбласть("СтолбецДня");
			ОбластьОформления = Область.Область("Знач");
			
			Область.Параметры.НомИнтервала = Формат(ТемпДата, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") + "-" + Формат(ТемпДата+60*60*24*6, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
			ТабличныйДокумент.Присоединить(Область);
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",НачалоНедели(ТемпДата));
			ЕдиничныйИнтервал.Вставить("КонИнт",КонецНедели(ТемпДата));	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТемпДата = ТемпДата+60*60*24*7;
			Если НачалоДня(ТемпДата) > НачалоДня(ПериодКонРасчетный) Тогда
				СледующаяНеделя = Ложь;		
			КонецЕсли;
			
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла;  
		
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;
		
	ИначеЕсли ИнтервалРазбиения = Перечисления.торо_ДетализацияПлана.Месяц Тогда
		
		ПериодКонРасчетный = КонецМесяца(ДатаОкончания);
		ТемпДата = НачалоМесяца(ДатаНачала);
		ПериодовВОтчете = 0;
		
		СледующийМесяц = Истина;
		Пока СледующийМесяц Цикл
			Область = МакетПечатнойФормы.ПолучитьОбласть("СтолбецДня");
			ОбластьОформления = Область.Область("Знач");
			
			Область.Параметры.НомИнтервала =  торо_ПечатьСервер.НазваниеМесяцаСтрокойПадежное(Месяц(ТемпДата)) + Символы.ПС + Сред(ТемпДата,7,4); 
			ТабличныйДокумент.Присоединить(Область);
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",НачалоМесяца(ТемпДата));
			ЕдиничныйИнтервал.Вставить("КонИнт",КонецМесяца(ТемпДата));	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТемпДата = ДобавитьМесяц(ТемпДата,1);
			Если ТемпДата > ПериодКонРасчетный Тогда
				СледующийМесяц = Ложь;		
			КонецЕсли;
			
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла; 
		
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;
		
	ИначеЕсли ИнтервалРазбиения = Перечисления.торо_ДетализацияПлана.Год Тогда 
		
		ПериодКонРасчетный = КонецГода(ДатаОкончания);
		ТемпДата = НачалоГода(ДатаНачала);
		ПериодовВОтчете = 0;
		
		СледующийГод = Истина;
		Пока СледующийГод Цикл
			Область = МакетПечатнойФормы.ПолучитьОбласть("СтолбецДня");
			ОбластьОформления = Область.Область("Знач");
			
			Область.Параметры.НомИнтервала = Сред(ТемпДата,7,4); 
			ТабличныйДокумент.Присоединить(Область);
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",НачалоГода(ТемпДата));
			ЕдиничныйИнтервал.Вставить("КонИнт",КонецГода(ТемпДата));	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТемпДата = ДобавитьМесяц(ТемпДата,12);
			Если ТемпДата > ПериодКонРасчетный Тогда
				СледующийГод = Ложь;		
			КонецЕсли;	 
			
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла; 
		
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;
		
	ИначеЕсли ИнтервалРазбиения = Перечисления.торо_ДетализацияПлана.Час Тогда
		
		ПериодКонРасчетный = ДатаОкончания;
		ТемпДата = ДатаНачала;
		ПериодовВОтчете = 0;
		СледующийЧас = Истина;
		
		ДатаДня = НачалоДня(ТемпДата);
		НомерКолонки = 6;
		НомерСтроки  = 13;
		
		Пока СледующийЧас Цикл
			Область = МакетПечатнойФормы.ПолучитьОбласть("СтолбецЧасы");
			ОбластьОформления = Область.Область("ЗначЧас");
			
			Область.Параметры.Дата         = Формат(ТемпДата, "ДФ='dd MMMM'");
			Область.Параметры.НомИнтервала = Формат(ТемпДата, "ДФ='HH"":00""'");
			
			ТабличныйДокумент.Присоединить(Область);
			
			ЕдиничныйИнтервал = Новый Структура;
			ЕдиничныйИнтервал.Вставить("НачИнт",ТемпДата);
			ЕдиничныйИнтервал.Вставить("КонИнт",ТемпДата + 3599);	
			МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
			
			ТемпДата = ТемпДата + 3600;
			
			Если НЕ ДатаДня = НачалоДня(ТемпДата) Тогда //Нужно объединить ячейки с датами
				ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки + 1, НомерКолонки + 23).Объединить();
				НомерКолонки = НомерКолонки + 24;
				ДатаДня = НачалоДня(ТемпДата);
			КонецЕсли; 
			
			Если ТемпДата > ПериодКонРасчетный Тогда
				СледующийЧас = Ложь;		
			КонецЕсли;
			
			ПериодовВОтчете = ПериодовВОтчете + 1;
		КонецЦикла;  
		
		ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете*Область.ШиринаТаблицы;
	КонецЕсли;	
	
КонецПроцедуры	

Функция ОбъединитьЯчейки(ТаблицаПлана);
	Высота = ТаблицаПлана.ВысотаТаблицы+1;
	Ширина = ТаблицаПлана.ШиринаТаблицы+1;
	НомерСтроки = 16;
	НомерКолонки = 6;
	
	ТекущийНомерСтроки = 16;
	ТекущийНомерКолонки = 6;
	Объединение = Ложь;
	Пока ТекущийНомерСтроки < Высота Цикл
		ТекОбласть = ТаблицаПлана.Область(ТекущийНомерСтроки, ТекущийНомерКолонки);
		ТекущееЗначение = ТекОбласть.Текст;
		ТекущееПримечание = ТекОбласть.Примечание.Текст;
		Если Не ТекущееЗначение = "" Тогда
			
			НомерСтроки = ТекущийНомерСтроки;
			НомерКолонки = ТекущийНомерКолонки;
			
			Пока ТаблицаПлана.Область(ТекущийНомерСтроки, ТекущийНомерКолонки + 1).Текст = ТекущееЗначение 
				И ТаблицаПлана.Область(ТекущийНомерСтроки, ТекущийНомерКолонки + 1).Примечание.Текст = ТекущееПримечание Цикл
				Если Не ТекущийНомерКолонки > Ширина Тогда
					ТекущийНомерКолонки = ТекущийНомерКолонки + 1;
					Объединение = Истина;
				КонецЕсли;
			КонецЦикла; 
			Если Объединение Тогда
				ТаблицаПлана.Область(НомерСтроки, НомерКолонки, ТекущийНомерСтроки, ТекущийНомерКолонки).Объединить();
				Объединение = Ложь;
			Иначе
				ТекущийНомерКолонки = ТекущийНомерКолонки + 1;
			КонецЕсли;
		Иначе
			ТекущийНомерКолонки = ТекущийНомерКолонки + 1;
		КонецЕсли;
		
		Если ТекущийНомерКолонки > Ширина Тогда
			ТекущийНомерКолонки = 6;
			ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		КонецЕсли;
					
	КонецЦикла;

КонецФункции

#КонецОбласти

#КонецЕсли