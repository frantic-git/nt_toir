#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДатаАктуальности") Тогда
		Объект.ДатаАктуальности = Параметры.ДатаАктуальности;
	Иначе
		Объект.ДатаАктуальности = ТекущаяДата();
	КонецЕсли; 
	                                           
	Если Параметры.Свойство("Владелец") Тогда
		Владелец = Параметры.Владелец;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборПоОР") Тогда
		ОтборПоОР = Параметры.ОтборПоОР;
		Элементы.ОтборПоОР.Видимость = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ДоступностьКнопкиЗаполнить") Тогда
		Элементы.ЗакрываемыеРемонтыЗаполнитьПлановыеРемонты.Доступность = Параметры.ДоступностьКнопкиЗаполнить;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗакрываемыеРемонты") Тогда
		
		Для каждого Стр Из Параметры.ЗакрываемыеРемонты Цикл
			
			НС = Объект.ЗакрываемыеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
			
		КонецЦикла;
		
	Иначе
		
		Если Параметры.Свойство("ОтборРемонтов") Тогда
			ЗаполнитьПлановыеРемонтыНаСервере(Параметры.ОтборРемонтов.ID);
			ЗаполнитьАварийныеРемонтыНаСервере(Параметры.ОтборРемонтов.ID);
			ЗаполнитьРемонтыПоВнешнимОснованиямНаСервере(Параметры.ОтборРемонтов.ID);
			ОтборРемонтов.ЗагрузитьЗначения(Параметры.ОтборРемонтов.ID);
		Иначе
			ЗаполнитьПлановыеРемонтыНаСервере();
			ЗаполнитьАварийныеРемонтыНаСервере();
			ЗаполнитьРемонтыПоВнешнимОснованиямНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ФОИспользоватьППР = ПолучитьФункциональнуюОпцию("торо_ИспользоватьППР");
	ФОИспользоватьВД = ПолучитьФункциональнуюОпцию("торо_УчетВыявленныхДефектовОборудования");
	ФОИспользоватьСкользящееПланирование = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСкользящееПланирование");
	ФОИспользоватьОбщийПлан = ПолучитьФункциональнуюОпцию("торо_ИспользоватьОбщийПланРабот");
	ФОИспользоватьВО = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот");
	ПричинаЗакрытияЗаявок = Константы.торо_ПричинаЗакрытияЗаявок.Получить();
	
	Элементы.ГруппаЗакрываемыеРемонты.Видимость = ФОИспользоватьППР;
	Элементы.ГруппаАварийныеРемонты.Видимость = ФОИспользоватьВД;
	Элементы.ГруппаРемонтыПоВнешним.Видимость = ФОИспользоватьВО;
	Элементы.ЗакрываемыеРемонтыРемонтВключенВОбщийПлан.Видимость = ФОИспользоватьСкользящееПланирование;
	Элементы.АварийныеРемонтыРемонтВключенВОбщийПлан.Видимость = ФОИспользоватьОбщийПлан;
	Элементы.РемонтыПоВнешнимОснованиямРемонтВключенВОбщийПлан.Видимость = ФОИспользоватьОбщийПлан;
КонецПроцедуры  
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрываемыеРемонты
&НаКлиенте
Процедура ЗакрываемыеРемонтыПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.ЗакрываемыеРемонты.ТекущийЭлемент.Имя <> "ЗакрываемыеРемонтыОбрабатывать" Тогда
		Если Не Элементы.ЗакрываемыеРемонты.ТекущиеДанные.Обрабатывать Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеРемонтыОтмененПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗакрываемыеРемонты.ТекущиеДанные;
	Если ТекСтрока.Отменен И ТекСтрока.Перенесен Тогда
		ТекСтрока.Перенесен = Ложь;
	КонецЕсли;
	ЗакрытиеЗаявки(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеРемонтыПеренесенПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗакрываемыеРемонты.ТекущиеДанные;
	Если ТекСтрока.Перенесен И ТекСтрока.Отменен Тогда
		ТекСтрока.Отменен = Ложь;
	КонецЕсли;
	ЗакрытиеЗаявки(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "ЗакрываемыеРемонтыОбъектРемонта" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.ОбъектРемонта);
		
	ИначеЕсли Поле.Имя = "ЗакрываемыеРемонтыЗаявка" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.Заявка);
		
	ИначеЕсли Поле.Имя = "ЗакрываемыеРемонтыДокументОснование" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.ДокументОснование);
		
	ИначеЕсли Поле.Имя = "ЗакрываемыеРемонтыДокументНачалаЦепочки" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.ДокументНачалаЦепочки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеРемонтыОбрабатыватьПриИзменении(Элемент)
	ТекДанные = Элементы.ЗакрываемыеРемонты.ТекущиеДанные; 
	Если НЕ ТекДанные.Обрабатывать Тогда
		ТекДанные.Отменен = Ложь;
		ТекДанные.Перенесен = Ложь;
		ТекДанные.ЗакрытьЗаявку = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАварийныеРемонты
&НаКлиенте
Процедура АварийныеРемонтыПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.АварийныеРемонты.ТекущийЭлемент.Имя <> "АварийныеРемонтыОбрабатывать" Тогда
		Если Не Элементы.АварийныеРемонты.ТекущиеДанные.Обрабатывать Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АварийныеРемонтыОтмененПриИзменении(Элемент)
	ТекСтрока = Элементы.АварийныеРемонты.ТекущиеДанные;
	ЗакрытиеЗаявки(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура АварийныеРемонтыОбрабатыватьПриИзменении(Элемент)
	ТекДанные = Элементы.АварийныеРемонты.ТекущиеДанные; 
	Если НЕ ТекДанные.Обрабатывать Тогда
		ТекДанные.Отменен = Ложь;
		ТекДанные.ЗакрытьЗаявку = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыПоВнешнимОснованиям

&НаКлиенте
Процедура РемонтыПоВнешнимОснованиямВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "РемонтыПоВнешнимОснованиямОбъектРемонта" Тогда
		
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.ОбъектРемонта);
		
	ИначеЕсли Поле.Имя = "РемонтыПоВнешнимОснованиямЗаявка" Тогда
		
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Заявка);
		
	ИначеЕсли Поле.Имя = "РемонтыПоВнешнимОснованиямДокументОснование" Тогда
		
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.ДокументОснование);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыПоВнешнимОснованиямОтмененПриИзменении(Элемент)
	ТекСтрока = Элементы.РемонтыПоВнешнимОснованиям.ТекущиеДанные;
	ЗакрытиеЗаявки(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыПоВнешнимОснованиямОбрабатыватьПриИзменении(Элемент)
	ТекДанные = Элементы.РемонтыПоВнешнимОснованиям.ТекущиеДанные; 
	Если НЕ ТекДанные.Обрабатывать Тогда
		ТекДанные.Отменен = Ложь;
		ТекДанные.ЗакрытьЗаявку = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	отказ = ВыполнитьОбработкуНаСервере();
		
	ПричиныНеЗаполнены = Ложь;
	Для Каждого Строка Из ОбрабатываемыеСтроки Цикл
		Если ((Строка.Отменен ИЛИ Строка.Перенесен) И НЕ ЗначениеЗаполнено(Строка.ПричинаЗакрытия))
			ИЛИ (Строка.ЗакрытьЗаявку И НЕ ЗначениеЗаполнено(Строка.ПричинаЗакрытияЗаявки)) Тогда
			Если ЗначениеЗаполнено(Владелец) Тогда
				ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не для всех закрываемых ремонтов (Смет ремонта(Заявок на ремонт) указана Причина закрытия! Обработка не выполнена!'"));
			Иначе
				ТекстСообщения = НСтр("ru = 'Не для всех закрываемых ремонтов (Смет ремонта(Заявок на ремонт) указана Причина закрытия! Обработка не выполнена!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ПричиныНеЗаполнены = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если отказ или ПричиныНеЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	МассивНезаполненныхСтрок = ОбрабатываемыеСтроки.НайтиСтроки(Новый Структура("Обрабатывать, Отменен, Перенесен, ЗакрытьЗаявку", Истина, Ложь, Ложь, Ложь));
	Если МассивНезаполненныхСтрок.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьОбработкуЗавершение", ЭтотОбъект, Новый Структура("МассивНезаполненныхСтрок", МассивНезаполненныхСтрок)), НСтр("ru = 'Не для всех обрабатываемых строк указан вид обработки ремонта (отменен или перенесен) или заявки. Все равно выполнить обработку?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	// Выполняем создание нового документа торо_ЗакрытиеЗаявокИРемонтов.
	ВыполнитьОбработкуФрагмент(МассивНезаполненныхСтрок);
	
	Оповестить("ЗакрытиеЗаявокИРемонтов", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлановыеРемонты(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаАктуальности) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно заполнить табличную часть, т.к. не заполнена дата актуальности!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборРемонтов) Тогда
		ЗаполнитьПлановыеРемонтыНаСервере(ОтборРемонтов);
	Иначе
		ЗаполнитьПлановыеРемонтыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАварийныеРемонты(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаАктуальности) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно заполнить табличную часть, т.к. не заполнена дата актуальности!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборРемонтов) Тогда
		ЗаполнитьАварийныеРемонтыНаСервере(ОтборРемонтов);
	Иначе
		ЗаполнитьАварийныеРемонтыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРемонтыПоВнешнимОснованиям(Команда)
	Если Не ЗначениеЗаполнено(Объект.ДатаАктуальности) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно заполнить табличную часть, т.к. не заполнена дата актуальности!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборРемонтов) Тогда
		ЗаполнитьРемонтыПоВнешнимОснованиямНаСервере(ОтборРемонтов);
	Иначе
		ЗаполнитьРемонтыПоВнешнимОснованиямНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеПлановые(Команда)
	Для каждого Стр Из Объект.ЗакрываемыеРемонты Цикл
	
		Стр.Обрабатывать = Истина;
	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПлановые(Команда)
	Для каждого Стр Из Объект.ЗакрываемыеРемонты Цикл
	
		Стр.Обрабатывать = Ложь;
	    Стр.Отменен = Ложь;
		Стр.Перенесен = Ложь;
		Стр.ЗакрытьЗаявку = Ложь; 
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеАварийные(Команда)
	Для каждого Стр Из Объект.АварийныеРемонты Цикл
	
		Стр.Обрабатывать = Истина;
	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеАварийные(Команда)
	Для каждого Стр Из Объект.АварийныеРемонты Цикл
		
		Стр.Обрабатывать = Ложь;
		Стр.Отменен = Ложь;
		Стр.ЗакрытьЗаявку = Ложь; 
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура АварийныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "АварийныеРемонтыОбъектРемонта" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.ОбъектРемонта);
		
	ИначеЕсли Поле.Имя = "АварийныеРемонтыЗаявка" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.Заявка);
		
	ИначеЕсли Поле.Имя = "АварийныеРемонтыДокументОснование" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.ДокументОснование);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеПлановыеКОтмене(Команда)
	УстановитьСнятьОтметкуОтменыПереноса(Объект.ЗакрываемыеРемонты, "Отменен", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуОтменыПлановые(Команда)
	УстановитьСнятьОтметкуОтменыПереноса(Объект.ЗакрываемыеРемонты, "Отменен", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеПлановыеКПереносу(Команда)
	УстановитьСнятьОтметкуОтменыПереноса(Объект.ЗакрываемыеРемонты, "Перенесен", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуПереносаПлановые(Команда)
	УстановитьСнятьОтметкуОтменыПереноса(Объект.ЗакрываемыеРемонты, "Перенесен", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеАварийныеКОтмене(Команда)
	УстановитьСнятьОтметкуОтменыПереноса(Объект.АварийныеРемонты, "Отменен", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуОтменыАварийные(Команда)
	УстановитьСнятьОтметкуОтменыПереноса(Объект.АварийныеРемонты, "Отменен", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеВнешние(Команда)
	Для каждого Стр Из Объект.РемонтыПоВнешнимОснованиям Цикл
		Стр.Обрабатывать = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеВнешние(Команда)
	Для Каждого Стр Из Объект.РемонтыПоВнешнимОснованиям Цикл
		Стр.Обрабатывать = Ложь;
		Стр.Отменен = Ложь;
		Стр.ЗакрытьЗаявку = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеВнешниеКОтмене(Команда)
	УстановитьСнятьОтметкуОтменыПереноса(Объект.РемонтыПоВнешнимОснованиям, "Отменен", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуОтменыВнешние(Команда)
	УстановитьСнятьОтметкуОтменыПереноса(Объект.РемонтыПоВнешнимОснованиям, "Отменен", Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьАварийныеРемонтыНаСервере(ОтборРемонтов = Неопределено)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	|	торо_ВыявленныеДефекты.Период КАК ДатаОбнаружения,
	|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
	|	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_АварийныеРемонты
	|ИЗ
	|	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|		ПО торо_ВыявленныеДефекты.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	|ГДЕ
	|	торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)
	|	И торо_ВыявленныеДефекты.Период <= &ДатаАктуальности
	|	И торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&ОтборПоID)
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.Замещен
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
	|	И торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = &ОтборПоОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК IDРемонта
	|ПОМЕСТИТЬ ВТ_Остановочные
	|ИЗ
	|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(
	|			,
	|			IDЗависимого В
	|				(ВЫБРАТЬ
	|					ВТ_АварийныеРемонты.IDРемонта КАК IDРемонта
	|				ИЗ
	|					ВТ_АварийныеРемонты КАК ВТ_АварийныеРемонты)) КАК торо_ОстановочныеРемонтыСрезПоследних
	|ГДЕ
	|	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК Заявка,
	|	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта
	|ПОМЕСТИТЬ ВТ_ВсеРемонтыЗаявок
	|ИЗ
	|	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
	|			,
	|			IDРемонта В
	|				(ВЫБРАТЬ
	|					ВТ_АварийныеРемонты.IDРемонта
	|				ИЗ
	|					ВТ_АварийныеРемонты КАК ВТ_АварийныеРемонты)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	|ГДЕ
	|	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_СкользящийПланРабот.ID_Ремонта КАК ID_Ремонта
	|ПОМЕСТИТЬ ВТ_СкользящийПлан
	|ИЗ
	|	РегистрСведений.торо_СкользящийПланРабот КАК торо_СкользящийПланРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АварийныеРемонты КАК ВТ_АварийныеРемонты
	|		ПО торо_СкользящийПланРабот.ID_Ремонта = ВТ_АварийныеРемонты.IDРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID_Ремонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АварийныеРемонты.IDРемонта КАК ID,
	|	ВТ_АварийныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Значение КАК ВидРемонта,
	|	ВТ_АварийныеРемонты.ДатаОбнаружения КАК ДатаОбнаружения,
	|	ВТ_АварийныеРемонты.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	ВТ_АварийныеРемонты.ДокументОснование КАК ДокументОснование,
	|	ВТ_АварийныеРемонты.ЕстьЗаявка КАК ЕстьЗаявка,
	|	ВТ_ВсеРемонтыЗаявок.Заявка КАК Заявка,
	|	ВЫБОР
	|		КОГДА ВТ_СкользящийПлан.ID_Ремонта ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РемонтВключенВОбщийПлан
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	ВТ_АварийныеРемонты КАК ВТ_АварийныеРемонты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остановочные КАК ВТ_Остановочные
	|		ПО ВТ_АварийныеРемонты.IDРемонта = ВТ_Остановочные.IDРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеРемонтыЗаявок КАК ВТ_ВсеРемонтыЗаявок
	|		ПО ВТ_АварийныеРемонты.IDРемонта = ВТ_ВсеРемонтыЗаявок.IDРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкользящийПлан КАК ВТ_СкользящийПлан
	|		ПО ВТ_АварийныеРемонты.IDРемонта = ВТ_СкользящийПлан.ID_Ремонта,
	|	Константа.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов КАК торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов
	|ГДЕ
	|	ВТ_Остановочные.IDРемонта ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВыявленныеДефекты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РазрешенныеДокументы
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	|ГДЕ
	|	торо_ВыявленныеДефекты.Ссылка В
	|			(ВЫБРАТЬ
	|				ПодготовленныеДанные.ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				ПодготовленныеДанные КАК ПодготовленныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.ID КАК ID,
	|	ПодготовленныеДанные.ОбъектРемонта КАК ОбъектРемонта,
	|	ПодготовленныеДанные.ВидРемонта КАК ВидРемонта,
	|	ПодготовленныеДанные.ДатаОбнаружения КАК ДатаОбнаружения,
	|	ПодготовленныеДанные.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	ПодготовленныеДанные.ДокументОснование КАК ДокументОснование,
	|	ПодготовленныеДанные.ЕстьЗаявка КАК ЕстьЗаявка,
	|	ПодготовленныеДанные.Заявка КАК Заявка,
	|	ПодготовленныеДанные.РемонтВключенВОбщийПлан КАК РемонтВключенВОбщийПлан,
	|	торо_ОтменятьЗакрытиеЗаявок.Значение КАК Отменен,
	|	торо_ПричинаЗакрытияЗаявок.Значение КАК ПричинаЗакрытияЗаявки,
	|	торо_ПричинаЗакрытияРемонтов.Значение КАК ПричинаЗакрытия
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РазрешенныеДокументы КАК ВТ_РазрешенныеДокументы
	|		ПО ПодготовленныеДанные.ДокументОснование = ВТ_РазрешенныеДокументы.Ссылка,
	|	Константа.торо_ПричинаЗакрытияЗаявок КАК торо_ПричинаЗакрытияЗаявок,
	|	Константа.торо_ПричинаЗакрытияРемонтов КАК торо_ПричинаЗакрытияРемонтов,
	|	Константа.торо_ОтменятьЗакрытиеЗаявок КАК торо_ОтменятьЗакрытиеЗаявок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОбнаружения";

	Запрос.УстановитьПараметр("ДатаАктуальности", КонецДня(Объект.ДатаАктуальности));
	
	Если ОтборРемонтов <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтборПоID", ОтборРемонтов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&ОтборПоID)", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоОР) Тогда
		Запрос.УстановитьПараметр("ОтборПоОР", ОтборПоОР);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = &ОтборПоОР", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Объект.АварийныеРемонты.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлановыеРемонтыНаСервере(ОтборРемонтов = Неопределено)
	
	Результат = торо_Ремонты.ПолучитьПлановыеРемонтыДляЗакрытияЗаявокИРемонтов(Объект.ДатаАктуальности, ОтборРемонтов,, ОтборПоОР);
	Объект.ЗакрываемыеРемонты.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МассивНезаполненныхСтрок = ДополнительныеПараметры.МассивНезаполненныхСтрок;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ВыполнитьОбработкуФрагмент(МассивНезаполненныхСтрок);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуФрагмент(Знач МассивНезаполненныхСтрок)
    
    Для Каждого Строка Из МассивНезаполненныхСтрок Цикл
        ОбрабатываемыеСтроки.Удалить(Строка);
    КонецЦикла;
    
	Если ОбрабатываемыеСтроки.Количество() = 0 Тогда 
		Если МассивНезаполненныхСтрок.Количество() Тогда
			ТекстСообщения = НСтр("ru = 'Ни для одной из выбранных строк не указан вид обработки: отмена/перенос ремонта или закрытие заявки! Обработка не выполнена!'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбраны строки для отмены/переноса ремонта или закрытия заявки! Обработка не выполнена!'");
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
        Возврат;
    КонецЕсли;
    
    ДокументСоздан = СоздатьДокументЗакрытияЗаявокНаСервере();
    
    Если ДокументСоздан Тогда
        
        Если НЕ ЗначениеЗаполнено(Владелец) Тогда
            Оповестить("ВыполненПереносРемонтов", ЭтаФорма.КлючУникальности, ЭтаФорма);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокументЗакрытияЗаявокНаСервере()
	
	ТаблицаЗакрываемыхРемонтов = ОбрабатываемыеСтроки.Выгрузить(Новый Структура("Отменен", Истина));
	ТаблицаПеренесенныхРемонтов = ОбрабатываемыеСтроки.Выгрузить(Новый Структура("Перенесен", Истина));
	Для Каждого СтрокаПеренесенных Из ТаблицаПеренесенныхРемонтов Цикл
		СтрокаЗакрываемых = ТаблицаЗакрываемыхРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗакрываемых,СтрокаПеренесенных);
	КонецЦикла;
	
	ТаблицаЗакрываемыхРемонтов.Колонки.Удалить("ДокументОснование");
	ТаблицаЗакрываемыхРемонтов.Колонки.ДокументНачалаЦепочки.Имя = "ДокументОснование";
	
	ТаблицаЗакрываемыхЗаявок = ОбрабатываемыеСтроки.Выгрузить(Новый Структура("ЗакрытьЗаявку", Истина), "Заявка, ID, ПричинаЗакрытияЗаявки");
	ТаблицаЗакрываемыхЗаявок.Колонки.ПричинаЗакрытияЗаявки.Имя = "ПричинаЗакрытия";
	ТаблицаЗакрываемыхЗаявок.Колонки.ID.Имя = "ИДРемонта";
	
	ДокументЗакрытиеЗаявокИРемонтов = Документы.торо_ЗакрытиеЗаявокИРемонтов.СоздатьДокумент();
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ДокументЗакрытиеЗаявокИРемонтов.ППРИнициатор = Владелец;
	КонецЕсли;
	
	ДокументЗакрытиеЗаявокИРемонтов.ЗакрываемыеЗаявки.Загрузить(ТаблицаЗакрываемыхЗаявок);
	ДокументЗакрытиеЗаявокИРемонтов.ЗакрываемыеРемонты.Загрузить(ТаблицаЗакрываемыхРемонтов);
	ДокументЗакрытиеЗаявокИРемонтов.ДатаАктуальности = Объект.ДатаАктуальности;
	ДокументЗакрытиеЗаявокИРемонтов.Дата = ТекущаяДата();
	
	ДокументЗакрытиеЗаявокИРемонтов.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация", Истина);
	ДокументЗакрытиеЗаявокИРемонтов.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный", Справочники.Пользователи.ПустаяСсылка());	
	
	ДокументЗакрытиеЗаявокИРемонтов.ДополнительныеСвойства.Вставить("ИзОбработки", Истина);
	Попытка
		
		ДокументЗакрытиеЗаявокИРемонтов.Записать(РежимЗаписиДокумента.Проведение);
		
		мУдаления = Новый Массив;
		Для каждого текСтрока Из Объект.ЗакрываемыеРемонты Цикл
			Если текСтрока.Обрабатывать И (текСтрока.Отменен Или текСтрока.Перенесен Или текСтрока.ЗакрытьЗаявку) Тогда
				мУдаления.Добавить(текСтрока);
			КонецЕсли;
		КонецЦикла;
		Для каждого текСтрока Из мУдаления Цикл
			Объект.ЗакрываемыеРемонты.Удалить(текСтрока);
		КонецЦикла;
		
		мУдаления.Очистить();
		Для каждого текСтрока Из Объект.АварийныеРемонты Цикл
			Если текСтрока.Обрабатывать И (текСтрока.Отменен или текСтрока.ЗакрытьЗаявку) Тогда
				мУдаления.Добавить(текСтрока);
			КонецЕсли;
		КонецЦикла;
		Для каждого текСтрока Из мУдаления Цикл
			Объект.АварийныеРемонты.Удалить(текСтрока);
		КонецЦикла;
		
		мУдаления.Очистить();
		Для каждого текСтрока Из Объект.РемонтыПоВнешнимОснованиям Цикл
			Если текСтрока.Обрабатывать И (текСтрока.Отменен или текСтрока.ЗакрытьЗаявку) Тогда
				мУдаления.Добавить(текСтрока);
			КонецЕсли;
		КонецЦикла;
		Для каждого текСтрока Из мУдаления Цикл
			Объект.РемонтыПоВнешнимОснованиям.Удалить(текСтрока);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОтборРемонтов) Тогда
			ЗаполнитьПлановыеРемонтыНаСервере(ОтборРемонтов);
			ЗаполнитьАварийныеРемонтыНаСервере(ОтборРемонтов);
			ЗаполнитьРемонтыПоВнешнимОснованиямНаСервере(ОтборРемонтов);
		ИначеЕсли Не ЗначениеЗаполнено(Владелец) Тогда
			ЗаполнитьПлановыеРемонтыНаСервере();
			ЗаполнитьАварийныеРемонтыНаСервере();
			ЗаполнитьРемонтыПоВнешнимОснованиямНаСервере();
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать документ ""Закрытие заявок и ремонтов""! '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ВыполнитьОбработкуНаСервере()
	
	ОбрабатываемыеСтроки.Загрузить(Объект.ЗакрываемыеРемонты.Выгрузить(Новый Структура("Обрабатывать", Истина)));
	
	НовыеДатыЗаполнены = Истина;
	Для Каждого Строка Из ОбрабатываемыеСтроки Цикл
		Если Строка.Перенесен И Не ЗначениеЗаполнено(Строка.НоваяДатаНачала) и Не ЗначениеЗаполнено(Строка.НоваяДатаОкончания) Тогда
			НовыеДатыЗаполнены = Ложь;
			НомерСтроки = ОбрабатываемыеСтроки.Индекс(Строка) + 1;
			ШаблонСообщения = НСтр("ru = 'В строке № %1 не заполнен новый период ремонта!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Строка.Перенесен И (Строка.НоваяДатаНачала > Строка.НоваяДатаОкончания 
			ИЛИ (Не ЗначениеЗаполнено(Строка.НоваяДатаНачала) И ЗначениеЗаполнено(Строка.НоваяДатаОкончания))) Тогда
			НовыеДатыЗаполнены = Ложь;
			НомерСтроки = ОбрабатываемыеСтроки.Индекс(Строка) + 1;
			ШаблонСообщения = НСтр("ru = 'В строке № %1 неверно заполнен новый период ремонта!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Если не НовыеДатыЗаполнены Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбрабатываемыеАварийныеРемонты = Объект.АварийныеРемонты.Выгрузить(Новый Структура("Обрабатывать", Истина));
	Для Каждого Строка Из ОбрабатываемыеАварийныеРемонты Цикл
		НовСтрока = ОбрабатываемыеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		НовСтрока.Перенесен = Ложь;
	КонецЦикла;
	
	ОбрабатываемыеРемонтыВО = Объект.РемонтыПоВнешнимОснованиям.Выгрузить(Новый Структура("Обрабатывать", Истина));
	Для Каждого Строка Из ОбрабатываемыеРемонтыВО Цикл
		НовСтрока = ОбрабатываемыеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		НовСтрока.Перенесен = Ложь;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытиеЗаявки(ТекДанные)
	
	ШаблонСообщенияЗаявка = НСтр("ru='Заявка %1 не будет отменена, т.к. на ее основании уже введен наряд или акт.'");
	
	Если ТекДанные.Отменен И ТекДанные.ЕстьЗаявка Тогда
		
		Если НЕ ТекДанные.ЕстьНарядПоЗаявке И НЕ ТекДанные.ЕстьАктПоЗаявке Тогда
			ТекДанные.ЗакрытьЗаявку = Истина;
			ТекДанные.ПричинаЗакрытияЗаявки = ПредопределенноеЗначение("Справочник.торо_ПричиныЗакрытияЗаявок.ОтменаРемонта");
		Иначе
			ТекстСообщения = СтрШаблон(ШаблонСообщенияЗаявка, ТекДанные.Заявка);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ТекДанные.Заявка);
		КонецЕсли;
		
	ИначеЕсли ТекДанные.Свойство("Перенесен") И (ТекДанные.Перенесен И ТекДанные.ЕстьЗаявка) Тогда
		
		Если НЕ ТекДанные.ЕстьНарядПоЗаявке И НЕ ТекДанные.ЕстьАктПоЗаявке Тогда
			ТекДанные.ЗакрытьЗаявку = Истина;
			ТекДанные.ПричинаЗакрытияЗаявки = ПредопределенноеЗначение("Справочник.торо_ПричиныЗакрытияЗаявок.ПереносРемонта");
		Иначе
			ТекстСообщения = СтрШаблон(ШаблонСообщенияЗаявка, ТекДанные.Заявка);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ТекДанные.Заявка);
		КонецЕсли;
		
	ИначеЕсли ТекДанные.ЕстьЗаявка Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытиеЗаявкиЗавершение", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), НСтр("ru = 'Отменить закрытие заявки?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеЗаявкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекДанные.ЗакрытьЗаявку = Ложь;
	КонецЕсли;
	
	ТекДанные.ПричинаЗакрытияЗаявки = ПричинаЗакрытияЗаявок;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметкуОтменыПереноса(Таблица, Колонка, Значение)
	ПротивоположнаяКолонка = ?(Колонка = "Отменен", "Перенесен", "Отменен");
	Для Каждого Строка Из Таблица Цикл
		Строка[Колонка] = Значение;
		Если Строка.Свойство("Перенесен") И Строка.Отменен И Строка.Перенесен Тогда
			Строка[ПротивоположнаяКолонка] = Ложь;
		КонецЕсли;
		
		Если Строка.ЕстьЗаявка Тогда 
			Если Строка.Отменен И НЕ Строка.ЕстьНарядПоЗаявке И НЕ Строка.ЕстьАктПоЗаявке Тогда
				Строка.ЗакрытьЗаявку = Истина;
				Строка.ПричинаЗакрытияЗаявки = ПредопределенноеЗначение("Справочник.торо_ПричиныЗакрытияЗаявок.ОтменаРемонта");	
			ИначеЕсли Строка.Свойство("Перенесен") И Строка.Перенесен 
				И НЕ Строка.ЕстьНарядПоЗаявке И НЕ Строка.ЕстьАктПоЗаявке Тогда
					Строка.ЗакрытьЗаявку = Истина;
					Строка.ПричинаЗакрытияЗаявки = ПредопределенноеЗначение("Справочник.торо_ПричиныЗакрытияЗаявок.ПереносРемонта");	
			Иначе 
				Строка.ЗакрытьЗаявку = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРемонтыПоВнешнимОснованиямНаСервере(ОтборРемонтов = Неопределено)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ВнешниеОснованияДляРаботСрезПослених.ID КАК ID,
	               |	торо_ВнешниеОснованияДляРаботСрезПослених.Период КАК ДатаСоздания,
	               |	торо_ВнешниеОснованияДляРаботСрезПослених.ПлановаяДатаРемонта КАК Срок
	               |ПОМЕСТИТЬ ВТ_ПредписанияНачальная
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(, Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот) КАК торо_ВнешниеОснованияДляРаботСрезПослених
	               |ГДЕ
	               |	торо_ВнешниеОснованияДляРаботСрезПослених.Период <= &ДатаАктуальности
	               |	И торо_ВнешниеОснованияДляРаботСрезПослених.ID В(&ОтборПоID)
	               |	И торо_ВнешниеОснованияДляРаботСрезПослених.ОбъектРемонта = &ОтборПоОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	               |	ВТ_ПредписанияНачальная.ДатаСоздания КАК ДатаСоздания,
	               |	ВТ_ПредписанияНачальная.Срок КАК Срок,
	               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка,
	               |	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументОснование
	               |ПОМЕСТИТЬ ВТ_Предписания
	               |ИЗ
	               |	ВТ_ПредписанияНачальная КАК ВТ_ПредписанияНачальная
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_ПредписанияНачальная.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |ГДЕ
	               |	НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.Замещен
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК IDРемонта
	               |ПОМЕСТИТЬ ВТ_Остановочные
	               |ИЗ
	               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(
	               |			,
	               |			IDЗависимого В
	               |				(ВЫБРАТЬ
	               |					ВТ_Предписания.IDРемонта КАК IDРемонта
	               |				ИЗ
	               |					ВТ_Предписания КАК ВТ_Предписания)) КАК торо_ОстановочныеРемонтыСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК Заявка,
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта
	               |ПОМЕСТИТЬ ВТ_ВсеРемонтыЗаявок
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
	               |			,
	               |			IDРемонта В
	               |				(ВЫБРАТЬ
	               |					ВТ_Предписания.IDРемонта
	               |				ИЗ
	               |					ВТ_Предписания КАК ВТ_Предписания)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	торо_СкользящийПланРабот.ID_Ремонта КАК ID_Ремонта
	               |ПОМЕСТИТЬ ВТ_СкользящийПлан
	               |ИЗ
	               |	РегистрСведений.торо_СкользящийПланРабот КАК торо_СкользящийПланРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Предписания КАК ВТ_Предписания
	               |		ПО торо_СкользящийПланРабот.ID_Ремонта = ВТ_Предписания.IDРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID_Ремонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Предписания.IDРемонта КАК ID,
	               |	ВТ_Предписания.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований.Значение КАК ВидРемонта,
	               |	ВТ_Предписания.ДатаСоздания КАК ДатаСоздания,
	               |	ВТ_Предписания.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	ВТ_Предписания.ДокументОснование КАК ДокументОснование,
	               |	ВТ_Предписания.ЕстьЗаявка КАК ЕстьЗаявка,
	               |	ВТ_ВсеРемонтыЗаявок.Заявка КАК Заявка,
	               |	ВЫБОР
	               |		КОГДА ВТ_СкользящийПлан.ID_Ремонта ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК РемонтВключенВОбщийПлан,
	               |	ВТ_Предписания.Срок КАК Срок
	               |ПОМЕСТИТЬ ПодготовленныеДанные
	               |ИЗ
	               |	ВТ_Предписания КАК ВТ_Предписания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остановочные КАК ВТ_Остановочные
	               |		ПО ВТ_Предписания.IDРемонта = ВТ_Остановочные.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеРемонтыЗаявок КАК ВТ_ВсеРемонтыЗаявок
	               |		ПО ВТ_Предписания.IDРемонта = ВТ_ВсеРемонтыЗаявок.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкользящийПлан КАК ВТ_СкользящийПлан
	               |		ПО ВТ_Предписания.IDРемонта = ВТ_СкользящийПлан.ID_Ремонта,
	               |	Константа.торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований КАК торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований
	               |ГДЕ
	               |	ВТ_Остановочные.IDРемонта ЕСТЬ NULL
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ВнешнееОснованиеДляРабот.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_РазрешенныеДокументы
	               |ИЗ
	               |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	               |ГДЕ
	               |	торо_ВнешнееОснованиеДляРабот.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ПодготовленныеДанные.ДокументОснование КАК ДокументОснование
	               |			ИЗ
	               |				ПодготовленныеДанные КАК ПодготовленныеДанные)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонт.Ссылка
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонт.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ПодготовленныеДанные.ДокументОснование КАК ДокументОснование
	               |			ИЗ
	               |				ПодготовленныеДанные КАК ПодготовленныеДанные)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПодготовленныеДанные.ID КАК ID,
	               |	ПодготовленныеДанные.ОбъектРемонта КАК ОбъектРемонта,
	               |	ПодготовленныеДанные.ВидРемонта КАК ВидРемонта,
	               |	ПодготовленныеДанные.ДатаСоздания КАК ДатаСоздания,
	               |	ПодготовленныеДанные.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	ПодготовленныеДанные.ДокументОснование КАК ДокументОснование,
	               |	ПодготовленныеДанные.ЕстьЗаявка КАК ЕстьЗаявка,
	               |	ПодготовленныеДанные.Заявка КАК Заявка,
	               |	ПодготовленныеДанные.РемонтВключенВОбщийПлан КАК РемонтВключенВОбщийПлан,
	               |	торо_ОтменятьЗакрытиеЗаявок.Значение КАК Отменен,
	               |	торо_ПричинаЗакрытияЗаявок.Значение КАК ПричинаЗакрытияЗаявки,
	               |	торо_ПричинаЗакрытияРемонтов.Значение КАК ПричинаЗакрытия,
	               |	ПодготовленныеДанные.Срок КАК Срок
	               |ИЗ
	               |	ПодготовленныеДанные КАК ПодготовленныеДанные
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РазрешенныеДокументы КАК ВТ_РазрешенныеДокументы
	               |		ПО ПодготовленныеДанные.ДокументОснование = ВТ_РазрешенныеДокументы.Ссылка,
	               |	Константа.торо_ПричинаЗакрытияЗаявок КАК торо_ПричинаЗакрытияЗаявок,
	               |	Константа.торо_ПричинаЗакрытияРемонтов КАК торо_ПричинаЗакрытияРемонтов,
	               |	Константа.торо_ОтменятьЗакрытиеЗаявок КАК торо_ОтменятьЗакрытиеЗаявок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСоздания";
	Запрос.УстановитьПараметр("ДатаАктуальности", КонецДня(Объект.ДатаАктуальности));
	
	Если ОтборРемонтов <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтборПоID", ОтборРемонтов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ВнешниеОснованияДляРаботСрезПослених.ID В(&ОтборПоID)", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоОР) Тогда
		Запрос.УстановитьПараметр("ОтборПоОР", ОтборПоОР);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ВнешниеОснованияДляРаботСрезПослених.ОбъектРемонта = &ОтборПоОР", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Объект.РемонтыПоВнешнимОснованиям.Загрузить(Результат.Выгрузить());
КонецПроцедуры

#КонецОбласти