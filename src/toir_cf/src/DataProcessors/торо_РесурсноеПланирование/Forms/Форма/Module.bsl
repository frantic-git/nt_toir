
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	НастройкиВосстановлены = ВосстановитьНастройки();

	Если НЕ НастройкиВосстановлены Тогда
		Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР",	"ОсновнаяОрганизация");
		Объект.Направление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР",	"ОсновноеНаправлениеОР");
		Объект.Исполнитель = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР",	"ОсновноеПодразделение");
		Объект.ОтображатьЗавершенные = Ложь;
		Объект.КоличествоПериодов = 7;
		Объект.Периодичность = Перечисления.Периодичность.День;
	КонецЕсли;
	
	ФОИспользоватьППР							  = ПолучитьФункциональнуюОпцию("торо_ИспользоватьППР");
	ФОИспользоватьВнешниеОснования		          = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот");
	ФОИспользоватьДефекты					      = ПолучитьФункциональнуюОпцию("торо_УчетВыявленныхДефектовОборудования");
		
	ЗаполнитьРемонтыОборудованияИЗанятостьСотрудников();
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ДеревоРемонтныхРабот");
	ИменаТаблицФормы.Добавить("ИсполнителиРабот");

	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Модифицированность Тогда  
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Несохраненные изменения будут потерены. Продолжить?", 
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если НЕ Модифицированность Тогда
		ОбновитьНаСервере();
		ОбновитьМодифицированность();
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Несохраненные изменения будут потерены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Отказ = Ложь;
	
	ПрименитьИзмененияНаСервере(Отказ);
	
	Если Не Отказ Тогда 
		
		ОбновитьМодифицированность();
		
		РемонтыОборудованияПриАктивизацииСтроки(Неопределено); // Для обновления дерева ремонтных работы.
		ИсполнителиРаботПриАктивизацииСтроки(Неопределено); // Строка исполниетелей не поменяется, обновим вручную.
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось применить изменения. При проверки заполненности данных произошли ошибки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура("ОтображатьЗавершенные, ВключатьПодчиненныхИсполнителей, ВидДатыАктуальности, 
		|ДатаАктуальности, КоличествоПериодов, Периодичность, ОтображатьРемонтыБезЗаявок, 
	    |ОтображатьОбеспеченные, ОтображатьПрошедшие, ВключатьСотрудниковВсехПодразделений");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗакрытиеФормы", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.торо_РесурсноеПланирование.Форма.ФормаНастройки", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДокументам(Команда)
	
	Элементы.СтраницыПланированиеИДокументы.ТекущаяСтраница = Элементы.СтраницаДокументы; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПланированию(Команда)
	
	Элементы.СтраницыПланированиеИДокументы.ТекущаяСтраница = Элементы.СтраницаПланирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРаботыСотрудника(Команда)
	
	ТекущиеДанные = Элементы.РесурсИсполнителей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДатаГрафика, Сотрудник");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	ОткрытьФорму("Обработка.торо_РесурсноеПланирование.Форма.ФормаГрафикРаботыСотрудника", ПараметрыФормы,, УникальныйИдентификатор);
	
КонецПроцедуры

 &НаКлиенте
Процедура СписокНазначенныхРабот(Команда)
	
	ТекущиеДанные = Элементы.РесурсИсполнителей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДатаГрафика, Сотрудник");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	ОткрытьФорму("Обработка.торо_РесурсноеПланирование.Форма.ФормаНазначенныеРаботыСотрудника", ПараметрыФормы,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТО(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", ПараметрыФормы, Элементы.ДеревоРемонтныхРабот);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТК(Команда)
		ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ОтборПоСтатусам", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
	
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", ПараметрыФормы, Элементы.ДеревоРемонтныхРабот);

КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьРаботу(Команда)
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	СтрокаРемонтнойРаботы = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные; 
	СтрокаИсполнителей = Элементы.ИсполнителиРабот.ТекущиеДанные;
	
	Если СтрокаИсполнителей = Неопределено Тогда
		Отказ = Истина; 
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаИсполнителей.Сотрудник) ИЛИ Не ЗначениеЗаполнено(СтрокаИсполнителей.ДатаНачала) Тогда 
		ТекстСообщения = НСтр("ru = 'В строке исполнителей необходимо заполнить сотрудника и дату начала работы!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	ИначеЕсли СтрокаРемонтнойРаботы = Неопределено
		ИЛИ Не ТипЗнч(СтрокаРемонтнойРаботы.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		ТекстСообщения = НСтр("ru = 'Необходимо в дереве ремонтных работ выделить строку с технологической операцией!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ПериодыРаботы = РассчитатьПериодыРаботыСУчетомГрафика(СтрокаИсполнителей.Сотрудник, СтрокаИсполнителей.ДатаНачала, СтрокаИсполнителей.ВремяРаботы);
	
	КоличествоПериодов = ПериодыРаботы.Количество();
	Если КоличествоПериодов = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено состояние работы сотрудника, начиная с установленной даты начала работы!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	ИначеЕсли КоличествоПериодов = 1 Тогда
		Если ПериодыРаботы[0].ДатаНачала = СтрокаИсполнителей.ДатаНачала 
			И ПериодыРаботы[0].ДатаОкончания = СтрокаИсполнителей.ДатаОкончания Тогда
		ТекстСообщения = НСтр("ru = 'Установленный период соответствует периоду рабочего времени по графику работы сотрудника.'"); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
	Иначе
		ТекстСообщения = НСтр("ru = 'Период работы изменен в соответствии с периодом рабочего времени по графику работы сотрудника. Разбиение строк не требуется.'"); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
		КонецЕсли;
    КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ПерваяИтерация = Истина;
	Для Каждого ПериодРаботы Из ПериодыРаботы Цикл
		
		Если ПерваяИтерация Тогда
			
			Если Не ПериодРаботы.ДатаГрафика = СтрокаИсполнителей.ДатаГрафика Тогда
				ПересчитатьРесурсИсполнителя(СтрокаИсполнителей.ДатаГрафика, СтрокаИсполнителей.Сотрудник, -СтрокаИсполнителей.ВремяРаботы);
				ДобавляемоеВремяРаботы = ПериодРаботы.ВремяРаботы;
			Иначе
				ДобавляемоеВремяРаботы = ПериодРаботы.ВремяРаботы - СтрокаИсполнителей.ВремяРаботы;
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(СтрокаИсполнителей, ПериодРаботы);
			СтрокаИсполнителей.ЕстьИзменения = Истина;
			
			ПересчитатьРесурсИсполнителя(СтрокаИсполнителей.ДатаГрафика, СтрокаИсполнителей.Сотрудник, ДобавляемоеВремяРаботы);
			
			ПерваяИтерация = Ложь;
			
		Иначе
			
			НоваяСтрока = Объект.ИсполнителиРабот.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсполнителей,
				"ID, РемонтыОборудования_ID, Квалификация, Сотрудник, ДокументИсточник, ЕстьИзменения, ЕстьНаряд");
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПериодРаботы);
			НоваяСтрока.НоваяСтрока = Истина;
			
			ПересчитатьРесурсИсполнителя(НоваяСтрока.ДатаГрафика, НоваяСтрока.Сотрудник, НоваяСтрока.ВремяРаботы);
		КонецЕсли;	
	КонецЦикла;	
	
	УстановитьМодифицированность(СтрокаИсполнителей.РемонтыОборудования_ID, СтрокаИсполнителей.ID, СтрокаИсполнителей.ДокументИсточник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ВыделенныеСтроки = Элементы.РемонтыОборудования.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьТабличныеЧастиПоРемонтам(ВыделенныеСтроки);
	
	СформироватьДеревоРемонтныхРабот(ВыделенныеСтроки);
	
	РазвернутьДеревоРемонтныхРабот();
		
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Поле = Элементы.РемонтыОборудованияОбъектРемонта И ЗначениеЗаполнено(ТекущиеДанные.ОбъектРемонта) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ОбъектРемонта); 
				
	ИначеЕсли Поле = Элементы.РемонтыОборудованияДокументНачалаЦепочки И ЗначениеЗаполнено(ТекущиеДанные.ДокументНачалаЦепочки) Тогда 
		
		ПоказатьЗначение(, ТекущиеДанные.ДокументНачалаЦепочки);		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Поле = Элементы.ДеревоРемонтныхРаботЕстьАкт И ЗначениеЗаполнено(ТекущиеДанные.Акт) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Акт);
		
	ИначеЕсли Поле = Элементы.ДеревоРемонтныхРаботРемонтнаяРабота
		И Не ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("Строка") Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.РемонтнаяРабота);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ID_ПараллельнойОперации = ?(ТекущиеДанные = Неопределено, "", ТекущиеДанные.ID_ПараллельнойОперации);
	
	УстановитьОтборИсполнителиРабот();
	
	ОбновитьОтображениеКомандДобавитьТКТО();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	// Установлен режим выбора - одиночный.

	Отказ = Истина;
	
	СтрокиКУдалению = Новый Массив;	
	
	УдаляемаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Не ТипЗнч(УдаляемаяСтрока.РемонтнаяРабота) = Тип("Строка") Тогда
		СтрокиКУдалению.Добавить(УдаляемаяСтрока);	
	КонецЕсли;
	
	ДобавитьПодчиненныеСтрокиДереваВМассив(УдаляемаяСтрока, СтрокиКУдалению);
	
	ТекущееЗначениеКУдалению = УдаляемаяСтрока.КУдалению;
	ЕстьИзменения = Ложь;
	IDРемонта = УдаляемаяСтрока.РемонтыОборудования_ID;
	
	ИндексМассива = СтрокиКУдалению.Количество() - 1;
	Пока ИндексМассива >= 0 Цикл
	
		СтрокаДерева = СтрокиКУдалению[ИндексМассива];
		ИндексМассива = ИндексМассива - 1;
		
		Если СтрокаДерева.ЕстьАкт ИЛИ СтрокаДерева.Завершена Тогда
			
			ШаблонСообщения = НСтр("ru = 'Нельзя удалить ремонтную работу ""%1"" т.к. по ней введен акт ""%2"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаДерева.РемонтнаяРабота, СтрокаДерева.Акт);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;	     
		
		УдалитьСвязанныеСтрокиИсполнителейРабот(СтрокаДерева);
		
		Если Не СтрокаДерева.НоваяСтрока И СтрокаДерева.ЕстьНаряд Тогда
			
			СтрокаДерева.ЕстьИзменения = Истина;
			СтрокаДерева.КУдалению = Не ТекущееЗначениеКУдалению;
			
			Если СтрокаДерева.КУдалению = Ложь Тогда
				// Проверим, чтобы строки выше по иерархии не были помечены к удалению.
				
				СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
				Пока Не СтрокаРодитель = Неопределено Цикл
					СтрокаРодитель.КУдалению = Ложь;
					
					СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
				КонецЦикла;	
			КонецЕсли;	
			
			ОбновитьОбеспеченностьСтрокиДереваРемонтныхРабот(СтрокаДерева);
			
			ПеренестиПравкиДереваРемонтныхРабот(СтрокаДерева);
			
		Иначе
			
			СтруктураОтбора = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДерева);
			
			СтрокаРемонтныхРабот = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтныеРаботы, СтруктураОтбора, Истина);
			Если Не СтрокаРемонтныхРабот = Неопределено Тогда
				Объект.РемонтныеРаботы.Удалить(СтрокаРемонтныхРабот);
			КонецЕсли;
			
			СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаДерева);
		КонецЕсли;
		
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		УстановитьМодифицированность(IDРемонта);
	КонецЕсли;

	Для Каждого СтрокаДерева Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		ОбновитьОбеспеченностьТК(СтрокаДерева);
	КонецЦикла;	
	
	ОбновитьОбеспеченностьРемонта(IDРемонта);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	
КонецПроцедуры

 &НаКлиенте
Процедура ДеревоРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Доступно к редактированию только "Количество". При смене ячейке будет сразу вызван этот обработчик.
	// Обработчик при изменении не требуется.
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = Элемент.Имя;
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	ИмяСвойства = СтрЗаменить(ИмяЭлемента, ИмяТаблицы, "");
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ДанныеДоИзменения = СтруктураДанныхДоРедактирования[ИмяТаблицы]; 
	
	ЗначениеДоИзменения = ДанныеДоИзменения[ИмяСвойства];
	
	Если Не ТекущиеДанные[ИмяСвойства] = ЗначениеДоИзменения Тогда
		
		ТекущиеДанные.ЕстьИзменения = Истина; 
		
		ПеренестиПравкиДереваРемонтныхРабот(ТекущиеДанные);
		
		УстановитьМодифицированность(ТекущиеДанные.РемонтыОборудования_ID);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьКолонкиПараллельногоВыполненияТО(
			Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы, ID_ПараллельнойОперации, ВыбранноеЗначение.СоответствиеРезультата);
		
		ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Для Каждого СтрокаДерева Из ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			
			Если СтрокаДерева.ID_ПараллельнойОперации = ID_ПараллельнойОперации Тогда	
				СтрокаДерева.ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		ОбновитьПланируемыеДатыНачалаРемонтныхРабот(ТекущиеДанные.ПолучитьРодителя());
		
		УстановитьМодифицированность(ТекущиеДанные.РемонтыОборудования_ID);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") 
		И ВыбранноеЗначение.Количество() > 0  Тогда
		
		ОбработкаПодбораТехнологическихКартОпераций(ВыбранноеЗначение);
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиРабот

&НаКлиенте
Процедура ИсполнителиРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиРабот.ТекущиеДанные;
	
	Если Поле = Элементы.ИсполнителиРаботСотрудник И ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Сотрудник);
		
	ИначеЕсли Поле = Элементы.ИсполнителиРаботКвалификация И ЗначениеЗаполнено(ТекущиеДанные.Квалификация) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Квалификация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиРабот.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.ДатаГрафика = НачалоДня(ТекущиеДанные.ДатаНачала);
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ДатаГрафика", ТекущиеДанные.ДатаГрафика);
		
		НайденнаяСтрока = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РесурсИсполнителей, СтруктураОтбора, Истина);
		Если НайденнаяСтрока = Неопределено Тогда
			// Ресурс исполнителей на эту дату не заполнен.
			
			ДополнитьРесурсИсполнителей(ТекущиеДанные.ДатаГрафика);
		КонецЕсли;
	КонецЕсли;

	УстановитьОтборРесурсИсполнителей();
	УправлениеДоступностьюКомандыРазбитьРаботу();
	
	ИдентификаторРемонта = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.РемонтыОборудования_ID);
	
	Для Каждого СтрокаДерева Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Если Не ИдентификаторРемонта = Неопределено 
			И Не СтрокаДерева.РемонтыОборудования_ID = ИдентификаторРемонта Тогда
			Продолжить;	
		КонецЕсли;
		
		ИдентификаторРемонтнойРаботы = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ID);	
		ДокументИсточник = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ДокументИсточник);	
		ОтметитьСвязанностьСтрокДереваРемонтныхРабот(СтрокаДерева, ИдентификаторРемонтнойРаботы, ДокументИсточник);
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКомандыРазбитьРаботу()
	
	ТекущиеДанные = Элементы.ИсполнителиРабот.ТекущиеДанные;
	
	Элементы.ИсполнителиРаботРазбитьРаботу.Доступность = ?(ТекущиеДанные = Неопределено, Ложь, Не ТекущиеДанные.ЕстьАкт);
	
КонецПроцедуры	

&НаКлиенте
Процедура ИсполнителиРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтрокаРемонтнойРаботы = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Не Копирование И СтрокаРемонтнойРаботы = Неопределено 
		ИЛИ Не ТипЗнч(СтрокаРемонтнойРаботы.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		ТекстСообщения = НСтр("ru = 'Добавление исполнителей возможно только для технологических операций!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);

	ИначеЕсли СтрокаРемонтнойРаботы.ЕстьАкт ИЛИ СтрокаРемонтнойРаботы.Завершена Тогда
		
		ШаблонСообщения = НСтр("ru = 'Для ремонтной работы ""%1"" введен акт ""%2"". Добавление исполнителей для неё невозможно!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРемонтнойРаботы.РемонтнаяРабота, СтрокаРемонтнойРаботы.Акт);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРаботПередУдалением(Элемент, Отказ)
	// Установлен режим выбора - одиночный.
	
	Отказ = Истина;
	
	СтрокаРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	СтрокаИсполнителиРабот = Элементы.ИсполнителиРабот.ТекущиеДанные; 
		
	Если СтрокаИсполнителиРабот.ЕстьАкт Тогда
		
		ШаблонСообщения = НСтр("ru = 'Невозможно удалить исполнителя. Для ремонтной работы введен акт ""%1"".'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаИсполнителиРабот.Акт);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПроставитьКУдалению = Не СтрокаИсполнителиРабот.НоваяСтрока И СтрокаИсполнителиРабот.ЕстьНаряд;	
		
	ИдентификаторРемонта = СтрокаИсполнителиРабот.РемонтыОборудования_ID;	
	ИдентификаторРемонтнойРаботы = СтрокаИсполнителиРабот.ID;
	ДокументИсточник = СтрокаИсполнителиРабот.ДокументИсточник;
	
	ДатаГрафика = СтрокаИсполнителиРабот.ДатаГрафика;
	Сотрудник = СтрокаИсполнителиРабот.Сотрудник;
	
	Если ПроставитьКУдалению Тогда
		
		Если СтрокаИсполнителиРабот.КУдалению = Истина Тогда
			ИзменениеВремениРаботы = СтрокаИсполнителиРабот.ВремяРаботы;
		Иначе
			ИзменениеВремениРаботы = - СтрокаИсполнителиРабот.ВремяРаботы;
		КонецЕсли;
		
		СтрокаИсполнителиРабот.ЕстьИзменения = Истина;
		СтрокаИсполнителиРабот.КУдалению = Не СтрокаИсполнителиРабот.КУдалению;
		
		Если СтрокаИсполнителиРабот.КУдалению = Ложь Тогда
			
			СтрокаРемонтныхРабот.КУдалению = Ложь;
			
			// Проверим, чтобы строки выше по иерархии не были помечены к удалению.
			
			СтрокаРодитель = СтрокаРемонтныхРабот.ПолучитьРодителя();
			Пока Не СтрокаРодитель = Неопределено Цикл
				СтрокаРодитель.КУдалению = Ложь;
				
				СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;	
	Иначе
		
		ИзменениеВремениРаботы = - СтрокаИсполнителиРабот.ВремяРаботы;
		
		Объект.ИсполнителиРабот.Удалить(СтрокаИсполнителиРабот);
	КонецЕсли;
	
	ОбновитьОбеспеченностьПриИзмененииИсполнителей(ИдентификаторРемонтнойРаботы);
	
	ПересчитатьРесурсИсполнителя(ДатаГрафика, Сотрудник, ИзменениеВремениРаботы);
	
	УстановитьМодифицированность(ИдентификаторРемонта, ИдентификаторРемонтнойРаботы, ДокументИсточник);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		СтрокаРемонтнойРаботы = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
        
		Если Копирование Тогда
			
			ТекущиеДанные.Акт = Неопределено;
			
			ТекущиеДанные.НоваяСтрока = Истина;
			ТекущиеДанные.ЕстьИзменения = Истина;
			ТекущиеДанные.КУдалению = Ложь;
			ТекущиеДанные.ЕстьАкт = Ложь;
			ТекущиеДанные.Нормативная = Ложь;
						
			ПересчитатьРесурсИсполнителя(ТекущиеДанные.ДатаГрафика, ТекущиеДанные.Сотрудник, ТекущиеДанные.ВремяРаботы);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаРемонтнойРаботы, 
				"ID, РемонтыОборудования_ID, ДокументИсточник, ЕстьНаряд"); 

			ТекущиеДанные.ВремяРаботы = СтрокаРемонтнойРаботы.НормаВремени;
			ТекущиеДанные.ДатаНачала = СтрокаРемонтнойРаботы.ДатаНачала;		
			ТекущиеДанные.ДатаОкончания = ТекущиеДанные.ДатаНачала + ТекущиеДанные.ВремяРаботы;
			ТекущиеДанные.НеВПределахДня = Не НачалоДня(ТекущиеДанные.ДатаНачала) = НачалоДня(ТекущиеДанные.ДатаОкончания);
			ТекущиеДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТекущиеДанные.ВремяРаботы);
			ТекущиеДанные.ДатаГрафика = НачалоДня(ТекущиеДанные.ДатаНачала);

			ТекущиеДанные.НоваяСтрока = Истина;
			ТекущиеДанные.ЕстьИзменения = Истина;
  		КонецЕсли;
		
		ИсполнителиРаботПриАктивизацииСтроки(Неопределено);
		
		УстановитьМодифицированность(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ID, ТекущиеДанные.ДокументИсточник); 
	КонецЕсли;
	
	// Запись данных до редактирования
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Выбор времени работы с формы "ОбщаяФорма.торо_ФормаПодбораПродолжительности"
	
	ТекущиеДанные = Элементы.ИсполнителиРабот.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекущиеДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекущиеДанные.ВремяРаботыТекст = 
			торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТекущиеДанные.ВремяРаботы);
			
		ПриИзмененииЗначенияРеквизитаИсполнителейРабот("ВремяРаботы");
	КонецЕсли; 
	
КонецПроцедуры

 &НаКлиенте
Процедура ИсполнителиРаботПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;

	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	
	Если Не ИсточникПеретаскивания = "РесурсИсполнителей" Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаДереваРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если СтрокаДереваРР = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ПеремещениеРазрешено = Ложь;
	
	Если Строка = Неопределено И ТипЗнч(СтрокаДереваРР.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
		И Не СтрокаДереваРР.ЕстьАкт Тогда
		
		ПеремещениеРазрешено = Истина;
		
	ИначеЕсли Не Строка = Неопределено Тогда
		
		СтрокаИсполнитель = Объект.ИсполнителиРабот.НайтиПоИдентификатору(Строка);
		Если Не СтрокаИсполнитель.ЕстьАкт Тогда
			ПеремещениеРазрешено = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПеремещениеРазрешено Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не ИсточникПеретаскивания = "РесурсИсполнителей" Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
		
	ДобавитьНовуюСтроку = Строка = Неопределено;
	
	Если ДобавитьНовуюСтроку Тогда
		
		НоваяСтрока = Объект.ИсполнителиРабот.Добавить();
		
		СтрокаРемонтнойРаботы = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРемонтнойРаботы, 
			"ID, РемонтыОборудования_ID, ДатаНачала, ДатаОкончания, ДокументИсточник"); 
		
		НоваяСтрока.Сотрудник = ЗначениеПеретаскивания.Сотрудник;
		НоваяСтрока.Квалификация = ЗначениеПеретаскивания.Квалификация;
		
		НоваяСтрока.ДатаГрафика = НачалоДня(НоваяСтрока.ДатаНачала);
		НоваяСтрока.ВремяРаботы  = СтрокаРемонтнойРаботы.НормаВремени;
		НоваяСтрока.НеВПределахДня = Не НачалоДня(НоваяСтрока.ДатаНачала) = НачалоДня(НоваяСтрока.ДатаОкончания);
		НоваяСтрока.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(НоваяСтрока.ВремяРаботы);
		
		НоваяСтрока.НоваяСтрока = Истина;
		НоваяСтрока.ЕстьИзменения = Истина;
		
		ПересчитатьРесурсИсполнителя(НоваяСтрока.ДатаГрафика, НоваяСтрока.Сотрудник, НоваяСтрока.ВремяРаботы);
		
		ИдентификаторРемонта = НоваяСтрока.РемонтыОборудования_ID;
		ИдентификаторРемонтнойРаботы = НоваяСтрока.ID; 
		ДокументИсточник = НоваяСтрока.ДокументИсточник;
	Иначе
		
		СтрокаИсполнителей = Объект.ИсполнителиРабот.НайтиПоИдентификатору(Строка);
		
		Если ЗначениеЗаполнено(СтрокаИсполнителей.Сотрудник) И Не СтрокаИсполнителей.Сотрудник = ЗначениеПеретаскивания.Сотрудник Тогда
			ПересчитатьРесурсИсполнителя(СтрокаИсполнителей.ДатаГрафика, СтрокаИсполнителей.Сотрудник, -СтрокаИсполнителей.ВремяРаботы);
		КонецЕсли;
		
		Если Не СтрокаИсполнителей.Сотрудник = ЗначениеПеретаскивания.Сотрудник Тогда
			ПересчитатьРесурсИсполнителя(ЗначениеПеретаскивания.ДатаГрафика, ЗначениеПеретаскивания.Сотрудник, СтрокаИсполнителей.ВремяРаботы);
		КонецЕсли;
		
		СтрокаИсполнителей.Сотрудник = ЗначениеПеретаскивания.Сотрудник;
		СтрокаИсполнителей.Квалификация = ?(СтрокаИсполнителей.НоваяСтрока И Не СтрокаИсполнителей.Нормативная, 
			ЗначениеПеретаскивания.Квалификация, СтрокаИсполнителей.Квалификация);
		СтрокаИсполнителей.ЕстьИзменения = Истина;
		
		ИдентификаторРемонта = СтрокаИсполнителей.РемонтыОборудования_ID;
		ИдентификаторРемонтнойРаботы = СтрокаИсполнителей.ID; 
		ДокументИсточник = СтрокаИсполнителей.ДокументИсточник;
	КонецЕсли;	
	
	ОбновитьОбеспеченностьПриИзмененииИсполнителей(ИдентификаторРемонтнойРаботы);

	УстановитьМодифицированность(ИдентификаторРемонта, ИдентификаторРемонтнойРаботы, ДокументИсточник);
	
	ИсточникПеретаскивания = "";
	
КонецПроцедуры


&НаКлиенте
Процедура ИсполнителиРаботВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиРабот.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура("ПродолжительностьВСекундах", ТекущиеДанные.ВремяРаботы);
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ПараметрыФормы, Элементы.ИсполнителиРабот); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРаботДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииЗначенияРеквизитаИсполнителейРабот("ДатаНачала");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРаботДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииЗначенияРеквизитаИсполнителейРабот("ДатаОкончания");
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсыИсполнителей

&НаКлиенте
Процедура РесурсИсполнителейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	
	ТекущиеДанныеРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущиеДанныеИсполнители = Элементы.ИсполнителиРабот.ТекущиеДанные;
	ТекущиеДанныеРесурс = Элементы.РесурсИсполнителей.ТекущиеДанные;
		
	Если ТекущиеДанныеРР = Неопределено ИЛИ ТекущиеДанныеИсполнители = Неопределено	ИЛИ ТекущиеДанныеРесурс = Неопределено ИЛИ ТекущиеДанныеИсполнители.ЕстьАкт
		ИЛИ (ТекущиеДанныеИсполнители.Сотрудник = ТекущиеДанныеРесурс.Сотрудник И ТекущиеДанныеИсполнители.Квалификация = ТекущиеДанныеРесурс.Квалификация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанныеИсполнители.Сотрудник) И Не ТекущиеДанныеИсполнители.Сотрудник = ТекущиеДанныеРесурс.Сотрудник Тогда
		ПересчитатьРесурсИсполнителя(ТекущиеДанныеИсполнители.ДатаГрафика, ТекущиеДанныеИсполнители.Сотрудник, -ТекущиеДанныеИсполнители.ВремяРаботы);
	КонецЕсли;
	
	Если Не ТекущиеДанныеИсполнители.Сотрудник = ТекущиеДанныеРесурс.Сотрудник Тогда
		ПересчитатьРесурсИсполнителя(ТекущиеДанныеРесурс.ДатаГрафика, ТекущиеДанныеРесурс.Сотрудник, ТекущиеДанныеИсполнители.ВремяРаботы);
	КонецЕсли;
	
	ТекущиеДанныеИсполнители.Сотрудник = ТекущиеДанныеРесурс.Сотрудник;
	ТекущиеДанныеИсполнители.Квалификация = ?(ТекущиеДанныеИсполнители.НоваяСтрока И Не ТекущиеДанныеИсполнители.Нормативная, 
		ТекущиеДанныеРесурс.Квалификация, ТекущиеДанныеИсполнители.Квалификация);
	ТекущиеДанныеИсполнители.ЕстьИзменения = Истина;
		
	ОбновитьОбеспеченностьПриИзмененииИсполнителей(ТекущиеДанныеИсполнители.ID);

	УстановитьМодифицированность(ТекущиеДанныеИсполнители.РемонтыОборудования_ID, ТекущиеДанныеИсполнители.ID, ТекущиеДанныеИсполнители.ДокументИсточник);
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсИсполнителейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = "РесурсИсполнителей";
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыНаряды

&НаКлиенте
Процедура ДокументыНарядыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыНаряды.ТекущиеДанные;

	ПоказатьЗначение(, ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРемонтыОборудованияИЗанятостьСотрудников()
	
	Объект.РемонтыОборудования.Очистить();
	Объект.ЗанятостьСотрудников.Очистить();
	
	ДатаАктуальности = ?(Объект.ВидДатыАктуальности = 0, ТекущаяДата(), Объект.ДатаАктуальности);
	
	ПлановыхДней = ВычислитьКоличествоПлановыхДней();
	
	ДанныеПоВсемОрганизациям = Не ЗначениеЗаполнено(Объект.Организация);
	ДанныеПоВсемПодразделениям = Не ЗначениеЗаполнено(Объект.Исполнитель);
	ДанныеПоВсемНаправлениям = Не ЗначениеЗаполнено(Объект.Направление);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущаяДата"                   , ТекущаяДата());
    Запрос.УстановитьПараметр("ДатаАктуальности"              , ДатаАктуальности);
	Запрос.УстановитьПараметр("ПериодПланирования"            , КонецДня(ДатаАктуальности + (ПлановыхДней*60*60*24)));
	
	Запрос.УстановитьПараметр("ФОИспользоватьВнешниеОснования", ФОИспользоватьВнешниеОснования);
	Запрос.УстановитьПараметр("ФОИспользоватьДефекты"         , ФОИспользоватьДефекты);
	Запрос.УстановитьПараметр("ФОИспользоватьППР"             , ФОИспользоватьППР);

	Запрос.УстановитьПараметр("Организация"                   , Объект.Организация);
	Запрос.УстановитьПараметр("Исполнитель"                   , Объект.Исполнитель);
	Запрос.УстановитьПараметр("Направление"                   , Объект.Направление);
	
	Запрос.УстановитьПараметр("ПоВсемОрганизациям"            , ДанныеПоВсемОрганизациям);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям"          , ДанныеПоВсемПодразделениям);
	Запрос.УстановитьПараметр("ПоВсемНаправлениям"            , ДанныеПоВсемНаправлениям);
	
	Запрос.УстановитьПараметр("ОтображатьЗавершенные"         , Объект.ОтображатьЗавершенные);
	Запрос.УстановитьПараметр("ОтображатьПрошедшие"      	  , Объект.ОтображатьПрошедшие);
	Запрос.УстановитьПараметр("ОтображатьОбеспеченные"     	  , Объект.ОтображатьОбеспеченные);
	Запрос.УстановитьПараметр("ОтображатьРемонтыБезЗаявок"    , Объект.ОтображатьРемонтыБезЗаявок);

	#Область ТекстЗапроса
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК ID,
	|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.Организация КАК Организация,
	|	торо_ОбщиеДанныеПоРемонтам.ПодразделениеИнициатор КАК Подразделение,
	|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта.Приоритет КАК ПриоритетОР,
	|	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен,
	|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта.Направление КАК Направление,
	|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_РемонтыПредварительно
	|ИЗ
	|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	|ГДЕ
	|	НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.Замещен
	|	И НЕ торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий)
	|	И ВЫБОР
	|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	|				ТОГДА &ФОИспользоватьППР
	|						И (&ОтображатьРемонтыБезЗаявок
	|							ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка)
	|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)
	|				ТОГДА &ФОИспользоватьДефекты
	|						И торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	|			КОГДА торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот)
	|				ТОГДА &ФОИспользоватьВнешниеОснования
	|						И торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	|		КОНЕЦ
	|	И торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала <= &ПериодПланирования
	|	И (&ПоВсемОрганизациям
	|			ИЛИ торо_ОбщиеДанныеПоРемонтам.Организация = &Организация)
	|	И (&ОтображатьЗавершенные
	|			ИЛИ НЕ торо_ОбщиеДанныеПоРемонтам.Завершен)
	|	И (&ПоВсемНаправлениям
	|			ИЛИ торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта.Направление В (&Направление))
	|	И (&ОтображатьПрошедшие
	|			ИЛИ торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала >= &ДатаАктуальности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПлановыеИсполнителиРемонтов.IDРемонта КАК IDРемонта,
	|	МАКСИМУМ(торо_ПлановыеИсполнителиРемонтов.Исполнитель) КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_ИсполнителиРемонтов
	|ИЗ
	|	ВТ_РемонтыПредварительно КАК ВТ_РемонтыПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
	|		ПО ВТ_РемонтыПредварительно.ID = торо_ПлановыеИсполнителиРемонтов.IDРемонта
	|			И (торо_ПлановыеИсполнителиРемонтов.Исполнитель ССЫЛКА Справочник.СтруктураПредприятия)
	|			И (НЕ торо_ПлановыеИсполнителиРемонтов.СпособВыполнения = ЗНАЧЕНИЕ(Перечисление.торо_СпособыВыполненияРемонтов.Подрядный))
	|ГДЕ
	|	(&ПоВсемПодразделениям
	|			ИЛИ &УсловныйОтборПоИсполнителям)
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ПлановыеИсполнителиРемонтов.IDРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтыПредварительно.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	ВТ_РемонтыПредварительно.ID КАК ID,
	|	ВТ_РемонтыПредварительно.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_РемонтыПредварительно.Организация КАК Организация,
	|	ВТ_РемонтыПредварительно.Подразделение КАК Подразделение,
	|	ВТ_РемонтыПредварительно.ПриоритетОР КАК ПриоритетОР,
	|	ВТ_РемонтыПредварительно.Завершен КАК Завершен,
	|	ВТ_РемонтыПредварительно.Направление КАК Направление,
	|	ВТ_РемонтыПредварительно.ВидРемонта КАК ВидРемонта,
	|	ВТ_РемонтыПредварительно.ДатаНачала КАК ДатаНачала,
	|	ВТ_РемонтыПредварительно.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ИсполнителиРемонтов.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_Ремонты
	|ИЗ
	|	ВТ_РемонтыПредварительно КАК ВТ_РемонтыПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсполнителиРемонтов КАК ВТ_ИсполнителиРемонтов
	|		ПО ВТ_РемонтыПредварительно.ID = ВТ_ИсполнителиРемонтов.IDРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.IDРемонта КАК IDРемонта,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДокументИсточник КАК ДокументИсточник,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДокументЗатрат КАК ДокументЗатрат,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ВидДокументаИсточника КАК ВидДокументаИсточника,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ТехКарта КАК ТехКарта,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ТиповойДефект КАК ТиповойДефект,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДатаСрезаТехКарты КАК ДатаСрезаТехКарты
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыРасчетаПроектныхЗатратНаРемонты КАК торо_СтатусыРасчетаПроектныхЗатратНаРемонты
	|		ПО ВТ_Ремонты.ID = торо_СтатусыРасчетаПроектныхЗатратНаРемонты.IDРемонта
	|			И (торо_СтатусыРасчетаПроектныхЗатратНаРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыДокументовПроектныхЗатратНаРемонты.КОбновлению))";
	
	#КонецОбласти 
	
	Если Объект.ВключатьПодчиненныхИсполнителей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловныйОтборПоИсполнителям", "торо_ПлановыеИсполнителиРемонтов.Исполнитель В ИЕРАРХИИ (&Исполнитель)");
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловныйОтборПоИсполнителям", "торо_ПлановыеИсполнителиРемонтов.Исполнитель = &Исполнитель");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьДокументПроектныхЗатратИОбновитьСтатусРасчета(Выборка);
	КонецЦикла;
	
	#Область ТекстЗапроса

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка КАК ДокументИсточник,
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID КАК ID,
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	|	ВТ_Ремонты.ID КАК IDРемонта,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_РемонтныеРаботыПредварительно
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыРасчетаПроектныхЗатратНаРемонты КАК торо_СтатусыРасчетаПроектныхЗатратНаРемонты
	|		ПО ВТ_Ремонты.ID = торо_СтатусыРасчетаПроектныхЗатратНаРемонты.IDРемонта
	|			И (торо_СтатусыРасчетаПроектныхЗатратНаРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыДокументовПроектныхЗатратНаРемонты.Актуален))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты.РемонтныеРаботы КАК торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы
	|		ПО (торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДокументЗатрат = торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	|	2
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	|		ПО ВТ_Ремонты.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
	|			И (торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID,
	|	3
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
	|		ПО ВТ_Ремонты.ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID
	|			И (торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтныеРаботыПредварительно.ID КАК ID,
	|	ВТ_РемонтныеРаботыПредварительно.IDРемонта КАК IDРемонта,
	|	МАКСИМУМ(ВТ_РемонтныеРаботыПредварительно.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ПриоритетыРемонтныхРабот
	|ИЗ
	|	ВТ_РемонтныеРаботыПредварительно КАК ВТ_РемонтныеРаботыПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РемонтныеРаботыПредварительно.ID,
	|	ВТ_РемонтныеРаботыПредварительно.IDРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтныеРаботыПредварительно.ДокументИсточник КАК ДокументИсточник,
	|	ВТ_РемонтныеРаботыПредварительно.ID КАК ID,
	|	ВТ_РемонтныеРаботыПредварительно.РемонтнаяРабота КАК РемонтнаяРабота,
	|	ВТ_РемонтныеРаботыПредварительно.IDРемонта КАК IDРемонта
	|ПОМЕСТИТЬ ВТ_РемонтныеРаботы
	|ИЗ
	|	ВТ_РемонтныеРаботыПредварительно КАК ВТ_РемонтныеРаботыПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыРемонтныхРабот КАК ВТ_ПриоритетыРемонтныхРабот
	|		ПО ВТ_РемонтныеРаботыПредварительно.IDРемонта = ВТ_ПриоритетыРемонтныхРабот.IDРемонта
	|			И ВТ_РемонтныеРаботыПредварительно.ID = ВТ_ПриоритетыРемонтныхРабот.ID
	|			И ВТ_РемонтныеРаботыПредварительно.Приоритет = ВТ_ПриоритетыРемонтныхРабот.Приоритет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	ДокументИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.Ссылка КАК ДокументИсточник,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.ID КАК ID,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.Сотрудник КАК Сотрудник,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.ВремяРаботы КАК ВремяРаботы,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.ДатаНачала КАК ДатаНачала,
	|	ВТ_РемонтныеРаботы.IDРемонта КАК IDРемонта
	|ПОМЕСТИТЬ ВТ_ОбеспеченныеРемонтныеРаботы
	|ИЗ
	|	ВТ_РемонтныеРаботы КАК ВТ_РемонтныеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.Исполнители КАК торо_НарядНаВыполнениеРемонтныхРаботИсполнители
	|		ПО ВТ_РемонтныеРаботы.IDРемонта = торо_НарядНаВыполнениеРемонтныхРаботИсполнители.РемонтыОборудования_ID
	|			И ВТ_РемонтныеРаботы.ID = торо_НарядНаВыполнениеРемонтныхРаботИсполнители.ID
	|			И ВТ_РемонтныеРаботы.ДокументИсточник = торо_НарядНаВыполнениеРемонтныхРаботИсполнители.Ссылка
	|			И (торо_НарядНаВыполнениеРемонтныхРаботИсполнители.Ссылка.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_РемонтныеРаботы.IDРемонта КАК ID,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ВТ_ОбеспеченныеРемонтныеРаботы.ID ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Обеспечен
	|ПОМЕСТИТЬ ВТ_ОбеспечениеРемонтов
	|ИЗ
	|	ВТ_РемонтныеРаботы КАК ВТ_РемонтныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбеспеченныеРемонтныеРаботы КАК ВТ_ОбеспеченныеРемонтныеРаботы
	|		ПО ВТ_РемонтныеРаботы.IDРемонта = ВТ_ОбеспеченныеРемонтныеРаботы.IDРемонта
	|			И ВТ_РемонтныеРаботы.ID = ВТ_ОбеспеченныеРемонтныеРаботы.ID
	|			И ВТ_РемонтныеРаботы.ДокументИсточник = ВТ_ОбеспеченныеРемонтныеРаботы.ДокументИсточник
	|ГДЕ
	|	ВТ_РемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РемонтныеРаботы.IDРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации КАК СостояниеОР
	|ПОМЕСТИТЬ ВТ_СостоянияОР
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(
	|			&ТекущаяДата,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ВТ_Ремонты.ОбъектРемонта
	|				ИЗ
	|					ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_ТекущееСостояниеОРСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыРемонтовСрезПоследних.IDРемонта КАК IDРемонта,
	|	торо_СтатусыРемонтовСрезПоследних.Статус КАК Статус
	|ПОМЕСТИТЬ ВТ_СтатусыРемонтов
	|ИЗ
	|	РегистрСведений.торо_СтатусыРемонтов.СрезПоследних(
	|			,
	|			IDРемонта В
	|				(ВЫБРАТЬ
	|					ВТ_Ремонты.ID
	|				ИЗ
	|					ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_СтатусыРемонтовСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ГарантийностьРемонтовСрезПоследних.IDРемонта КАК IDРемонта,
	|	торо_ГарантийностьРемонтовСрезПоследних.Гарантийный КАК Гарантийный
	|ПОМЕСТИТЬ ВТ_ГарантийностьРемонтов
	|ИЗ
	|	РегистрСведений.торо_ГарантийностьРемонтов.СрезПоследних(
	|			,
	|			IDРемонта В
	|				(ВЫБРАТЬ
	|					ВТ_Ремонты.ID
	|				ИЗ
	|					ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_ГарантийностьРемонтовСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбеспеченныеРемонтныеРаботы.Сотрудник КАК Сотрудник,
	|	СУММА(ВТ_ОбеспеченныеРемонтныеРаботы.ВремяРаботы) КАК ВремяРаботы,
	|	НАЧАЛОПЕРИОДА(ВТ_ОбеспеченныеРемонтныеРаботы.ДатаНачала, ДЕНЬ) КАК ДатаГрафика
	|ИЗ
	|	ВТ_ОбеспеченныеРемонтныеРаботы КАК ВТ_ОбеспеченныеРемонтныеРаботы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОбеспеченныеРемонтныеРаботы.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВТ_ОбеспеченныеРемонтныеРаботы.ДатаНачала, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ремонты.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	|	ВТ_Ремонты.ID КАК ID,
	|	ВТ_Ремонты.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_Ремонты.Организация КАК Организация,
	|	ВТ_Ремонты.Подразделение КАК Подразделение,
	|	ВТ_Ремонты.ПриоритетОР КАК ПриоритетОР,
	|	ВТ_Ремонты.Завершен КАК Завершен,
	|	ВТ_Ремонты.Направление КАК Направление,
	|	ВТ_Ремонты.ВидРемонта КАК ВидРемонта,
	|	ВТ_Ремонты.ДатаНачала КАК ДатаНачала,
	|	ВТ_Ремонты.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_СтатусыРемонтов.Статус КАК СтатусРемонта,
	|	ЕСТЬNULL(ВТ_ГарантийностьРемонтов.Гарантийный, ЛОЖЬ) КАК ГарантийныйРемонт,
	|	ЕСТЬNULL(торо_ВыявленныеДефекты.КритичностьДефекта, """") КАК КритичностьДефекта,
	|	ЕСТЬNULL(торо_ВыявленныеДефекты.ДефектОписание, """") КАК ОписаниеДефекта,
	|	ЕСТЬNULL(торо_ВыявленныеДефекты.ID, """") КАК IDДефекта,
	|	ЕСТЬNULL(ВТ_ОбеспечениеРемонтов.Обеспечен, ЛОЖЬ) КАК Обеспечен,
	|	ВТ_Ремонты.Исполнитель КАК Исполнитель,
	|	ЕСТЬNULL(ВТ_СостоянияОР.СостояниеОР, ""Не установлено"") КАК СостояниеОР
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	|		ПО ВТ_Ремонты.ID = торо_ВыявленныеДефекты.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыРемонтов КАК ВТ_СтатусыРемонтов
	|		ПО ВТ_Ремонты.ID = ВТ_СтатусыРемонтов.IDРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГарантийностьРемонтов КАК ВТ_ГарантийностьРемонтов
	|		ПО ВТ_Ремонты.ID = ВТ_ГарантийностьРемонтов.IDРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияОР КАК ВТ_СостоянияОР
	|		ПО ВТ_Ремонты.ОбъектРемонта = ВТ_СостоянияОР.ОбъектРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбеспечениеРемонтов КАК ВТ_ОбеспечениеРемонтов
	|		ПО ВТ_Ремонты.ID = ВТ_ОбеспечениеРемонтов.ID
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтображатьОбеспеченные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЕСТЬNULL(ВТ_ОбеспечениеРемонтов.Обеспечен, ЛОЖЬ) = ЛОЖЬ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
	
	#КонецОбласти
	
	РезультатЗапроса =  Запрос.ВыполнитьПакет();
	
	ВыборкаЗанятостьСотрудников = РезультатЗапроса[8].Выбрать();
	Пока ВыборкаЗанятостьСотрудников.Следующий() Цикл
		
		НоваяСтрока = Объект.ЗанятостьСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗанятостьСотрудников);
	КонецЦикла;
	
	ВыборкаРемонтныеРаботы = РезультатЗапроса[9].Выбрать();
	Пока ВыборкаРемонтныеРаботы.Следующий() Цикл
		
		НоваяСтрока = Объект.РемонтыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРемонтныеРаботы);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ВычислитьКоличествоПлановыхДней()
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&ДатаНачала, ДОБАВИТЬКДАТЕ(&ДатаНачала, &Периодичность, &КоличествоПериодов), ДЕНЬ) КАК КоличествоДней";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Периодичность", Строка(Объект.Периодичность));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КоличествоПериодов", Строка(Объект.КоличествоПериодов));
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаАктуальности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоДней;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	


&НаКлиенте
Процедура ОбновитьПродолжение(Результат, ДополнительныеПараметры) Экспорт

	Если Не Результат = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновитьНаСервере();
	ОбновитьМодифицированность();
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьНаСервере()
	
	Объект.РемонтныеРаботы.Очистить();
	Объект.ИсполнителиРабот.Очистить();
	Объект.РесурсИсполнителей.Очистить();
	
	ЗаполнитьРемонтыОборудованияИЗанятостьСотрудников();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодифицированность()

	СтруктураОтбора = Новый Структура("ЕстьИзменения", Истина); 
	
	ЕстьИзменения = Не торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтыОборудования, СтруктураОтбора, Истина) = Неопределено; 
	
	Модифицированность = ЕстьИзменения;
	
	Элементы.ГруппаПредупреждение.Видимость = Модифицированность;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированность(ИдентификаторРемонта, ИдентификаторРемонтнойРаботы = Неопределено, ДокументИсточник = Неопределено)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ID", ИдентификаторРемонта); 
	
	СтрокаРемонтыОборудования = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтыОборудования, СтруктураОтбора, Истина);
	Если Не СтрокаРемонтыОборудования = Неопределено Тогда
		СтрокаРемонтыОборудования.ЕстьИзменения = Истина;
	КонецЕсли;	
	
	Если Не ИдентификаторРемонтнойРаботы = Неопределено И Не ДокументИсточник = Неопределено Тогда
		
		СтруктураОтбора.Вставить("РемонтыОборудования_ID", ИдентификаторРемонта);
		СтруктураОтбора.Вставить("ДокументИсточник", ДокументИсточник);
		СтруктураОтбора.ID = ИдентификаторРемонтнойРаботы;	
		
		ДеревоРемонтныхРаботОтбор = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(ДеревоРемонтныхРабот, СтруктураОтбора);
		Для Каждого СтрокаДерева Из ДеревоРемонтныхРаботОтбор Цикл
			
			СтрокаДерева.ЕстьИзменения = Истина;
			ПеренестиПравкиДереваРемонтныхРабот(СтрокаДерева);
		КонецЦикла;	
	КонецЕсли;	
	
	Модифицированность = Истина;
	
	Элементы.ГруппаПредупреждение.Видимость = Истина;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	СохраненнаяНастройка = Новый Структура;
	
	СохраненнаяНастройка.Вставить("ВидДатыАктуальности",Объект.ВидДатыАктуальности);
	СохраненнаяНастройка.Вставить("ДатаАктуальности", Объект.ДатаАктуальности);
	СохраненнаяНастройка.Вставить("КоличествоПериодов", Объект.КоличествоПериодов);
	СохраненнаяНастройка.Вставить("Периодичность", Объект.Периодичность); 
	
	СохраненнаяНастройка.Вставить("ОтображатьЗавершенные", Объект.ОтображатьЗавершенные);
	СохраненнаяНастройка.Вставить("ВключатьПодчиненныхИсполнителей", Объект.ВключатьПодчиненныхИсполнителей);
	СохраненнаяНастройка.Вставить("ОтображатьОбеспеченные", Объект.ОтображатьОбеспеченные);
	СохраненнаяНастройка.Вставить("ОтображатьПрошедшие", Объект.ОтображатьПрошедшие);
	СохраненнаяНастройка.Вставить("ОтображатьРемонтыБезЗаявок", Объект.ОтображатьРемонтыБезЗаявок);
	
	СохраненнаяНастройка.Вставить("ВключатьСотрудниковВсехПодразделений", Объект.ВключатьСотрудниковВсехПодразделений);
	
	СохраненнаяНастройка.Вставить("Организация", Объект.Организация);
	СохраненнаяНастройка.Вставить("Направление", Объект.Направление);
	СохраненнаяНастройка.Вставить("Исполнитель", Объект.Исполнитель);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.торо_РесурсноеПланирование", Пользователи.ТекущийПользователь().УникальныйИдентификатор(), СохраненнаяНастройка);
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.торо_РесурсноеПланирование", Пользователи.ТекущийПользователь().УникальныйИдентификатор());
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
	
		Возврат Истина;
	
	Иначе
	
		Возврат Ложь;
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НастройкиЗакрытиеФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	
	СохранитьНастройки();
	
	Если Не Модифицированность Тогда
		ОбновитьНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Закрыть();
	   
КонецПроцедуры	


&НаКлиенте
Процедура УстановитьОтборИсполнителиРабот()
	
	СтрокаРемонтныеРаботы = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ОтборСтрок = Новый Структура();
	
	Если СтрокаРемонтныеРаботы = Неопределено Тогда
		
		ОтборСтрок.Вставить("РемонтыОборудования_ID", Неопределено);
		
	ИначеЕсли ТипЗнч(СтрокаРемонтныеРаботы.РемонтнаяРабота) = Тип("Строка") Тогда
		
		ОтборСтрок.Вставить("РемонтыОборудования_ID", СтрокаРемонтныеРаботы.РемонтыОборудования_ID);
		
	Иначе
		
		ОтборСтрок.Вставить("РемонтыОборудования_ID", СтрокаРемонтныеРаботы.РемонтыОборудования_ID);
		ОтборСтрок.Вставить("ID", СтрокаРемонтныеРаботы.ID);
		ОтборСтрок.Вставить("ДокументИсточник", СтрокаРемонтныеРаботы.ДокументИсточник);
    КонецЕсли;
		 
	Элементы.ИсполнителиРабот.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборРесурсИсполнителей()
	
	СтрокаИсполнители = Элементы.ИсполнителиРабот.ТекущиеДанные;
	СтрокаРемонтыхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если СтрокаИсполнители = Неопределено Тогда	
		ДатаГрафика = ?(СтрокаРемонтыхРабот = Неопределено, Неопределено, НачалоДня(СтрокаРемонтыхРабот.ДатаНачала));
	Иначе
		ДатаГрафика = СтрокаИсполнители.ДатаГрафика;
	КонецЕсли;
 
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("ДатаГрафика", ДатаГрафика);
			
	Элементы.РесурсИсполнителей.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);

КонецПроцедуры


&НаКлиенте
Процедура ДополнитьТабличныеЧастиПоРемонтам(ВыделенныеСтроки)
	
	ИдентификаторыРемонтов = Новый Массив;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаРемонта = Объект.РемонтыОборудования.НайтиПоИдентификатору(Идентификатор);
		
		Если Не СтрокаРемонта.СвязанныеТабличныеЧастиДополнены Тогда
			ИдентификаторыРемонтов.Добавить(СтрокаРемонта.ID);	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ИдентификаторыРемонтов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДополнения = ДанныеДополненияТабличныеЧастиПоРемонтам(ИдентификаторыРемонтов);
	
	Для Каждого Строка Из ДанныеДополнения.РемонтныеРаботы Цикл
		НоваяСтрока = Объект.РемонтныеРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.НормаВремениВЧасах = НоваяСтрока.НормаВремени / 3600;
	КонецЦикла;
	
	Для Каждого Строка Из ДанныеДополнения.ИсполнителиРабот Цикл
		НоваяСтрока = Объект.ИсполнителиРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ВремяРаботыТекст = 
			торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(НоваяСтрока.ВремяРаботы);
			
		НоваяСтрока.НеВПределахДня = Не НачалоДня(НоваяСтрока.ДатаНачала) = НачалоДня(НоваяСтрока.ДатаОкончания);	
	КонецЦикла;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаРемонта = Объект.РемонтыОборудования.НайтиПоИдентификатору(Идентификатор);
		
		СтрокаРемонта.СвязанныеТабличныеЧастиДополнены = Истина;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ДанныеДополненияТабличныеЧастиПоРемонтам(ИдентификаторыРемонтов)
	
    Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("IDРемонтов", ИдентификаторыРемонтов);
	
	#Область ТекстЗапроса
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК ID,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_Ремонты
	|ИЗ
	|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	|ГДЕ
	|	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&IDРемонтов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.IDРемонта КАК IDРемонта,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДокументИсточник КАК ДокументИсточник,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДокументЗатрат КАК ДокументЗатрат,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ВидДокументаИсточника КАК ВидДокументаИсточника,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ТехКарта КАК ТехКарта,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ТиповойДефект КАК ТиповойДефект,
	|	торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДатаСрезаТехКарты КАК ДатаСрезаТехКарты
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыРасчетаПроектныхЗатратНаРемонты КАК торо_СтатусыРасчетаПроектныхЗатратНаРемонты
	|		ПО ВТ_Ремонты.ID = торо_СтатусыРасчетаПроектныхЗатратНаРемонты.IDРемонта
	|			И (торо_СтатусыРасчетаПроектныхЗатратНаРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыДокументовПроектныхЗатратНаРемонты.КОбновлению))";
	
	#КонецОбласти
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьДокументПроектныхЗатратИОбновитьСтатусРасчета(Выборка);  
	КонецЦикла;
	
	#Область ТекстЗапроса
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка КАК ДокументИсточник,
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.НомерСтроки КАК НомерСтроки,
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID КАК ID,
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Количество КАК Количество,
	|	торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	|	ВТ_Ремонты.ID КАК IDРемонта,
	|	ВТ_Ремонты.ДатаНачала КАК ДатаНачалаРемонта,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_РемонтныеРаботыПредварительно
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыРасчетаПроектныхЗатратНаРемонты КАК торо_СтатусыРасчетаПроектныхЗатратНаРемонты
	|		ПО ВТ_Ремонты.ID = торо_СтатусыРасчетаПроектныхЗатратНаРемонты.IDРемонта
	|			И (торо_СтатусыРасчетаПроектныхЗатратНаРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыДокументовПроектныхЗатратНаРемонты.Актуален))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты.РемонтныеРаботы КАК торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы
	|		ПО (торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДокументЗатрат = торо_ПроектныеЗатратыНаРемонтыРемонтныеРаботы.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.НомерСтроки,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Количество,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации,
	|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	|	ВТ_Ремонты.ДатаНачала,
	|	2
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	|		ПО ВТ_Ремонты.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
	|			И (торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.НомерСтроки,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Родитель_ID,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Количество,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID_ПараллельнойОперации,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID,
	|	ВТ_Ремонты.ДатаНачала,
	|	3
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
	|		ПО ВТ_Ремонты.ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID
	|			И (торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтныеРаботыПредварительно.IDРемонта КАК IDРемонта,
	|	ВТ_РемонтныеРаботыПредварительно.ID КАК ID,
	|	МАКСИМУМ(ВТ_РемонтныеРаботыПредварительно.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ПриоритетыРемонтныхРабот
	|ИЗ
	|	ВТ_РемонтныеРаботыПредварительно КАК ВТ_РемонтныеРаботыПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РемонтныеРаботыПредварительно.IDРемонта,
	|	ВТ_РемонтныеРаботыПредварительно.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтныеРаботыПредварительно.ДокументИсточник КАК ДокументИсточник,
	|	ВТ_РемонтныеРаботыПредварительно.НомерСтроки КАК НомерСтроки,
	|	ВТ_РемонтныеРаботыПредварительно.ID КАК ID,
	|	ВТ_РемонтныеРаботыПредварительно.РемонтнаяРабота КАК РемонтнаяРабота,
	|	ВТ_РемонтныеРаботыПредварительно.Родитель_ID КАК Родитель_ID,
	|	ВТ_РемонтныеРаботыПредварительно.Количество КАК Количество,
	|	ВТ_РемонтныеРаботыПредварительно.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	|	ВТ_РемонтныеРаботыПредварительно.IDРемонта КАК IDРемонта,
	|	ВТ_РемонтныеРаботыПредварительно.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
	|	ВЫБОР
	|		КОГДА ВТ_РемонтныеРаботыПредварительно.ДокументИсточник ССЫЛКА Документ.торо_НарядНаВыполнениеРемонтныхРабот
	|				И НЕ ВТ_РемонтныеРаботыПредварительно.ДокументИсточник = ЗНАЧЕНИЕ(Документ.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьНаряд
	|ПОМЕСТИТЬ ВТ_РемонтныеРаботы
	|ИЗ
	|	ВТ_РемонтныеРаботыПредварительно КАК ВТ_РемонтныеРаботыПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыРемонтныхРабот КАК ВТ_ПриоритетыРемонтныхРабот
	|		ПО ВТ_РемонтныеРаботыПредварительно.IDРемонта = ВТ_ПриоритетыРемонтныхРабот.IDРемонта
	|			И ВТ_РемонтныеРаботыПредварительно.ID = ВТ_ПриоритетыРемонтныхРабот.ID
	|			И ВТ_РемонтныеРаботыПредварительно.Приоритет = ВТ_ПриоритетыРемонтныхРабот.Приоритет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	ДокументИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Выполнено КАК Завершена,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка КАК Акт,
	|	ВТ_РемонтныеРаботы.ДокументИсточник КАК ДокументИсточник
	|ПОМЕСТИТЬ ВТ_РемонтныеРаботыАктов
	|ИЗ
	|	ВТ_РемонтныеРаботы КАК ВТ_РемонтныеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_АктОВыполненииЭтапаРаботДокументыОснования
	|			ПО торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка
	|		ПО ВТ_РемонтныеРаботы.ID = торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID
	|			И ВТ_РемонтныеРаботы.IDРемонта = торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID
	|			И (торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка.Проведен)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_РемонтныеРаботы.ДокументИсточник ССЫЛКА Документ.торо_ПроектныеЗатратыНаРемонты
	|				ТОГДА ВЫРАЗИТЬ(ВТ_РемонтныеРаботы.ДокументИсточник КАК Документ.торо_ПроектныеЗатратыНаРемонты).ДокументИсточник = торо_АктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование
	|			ИНАЧЕ ВТ_РемонтныеРаботы.ДокументИсточник = торо_АктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	ДокументИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Ссылка КАК ДокументИсточник,
	|	торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.НомерСтроки КАК НомерСтроки,
	|	торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.ID КАК ID,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.ВремяРаботы КАК ВремяРаботы,
	|	NULL КАК ДатаНачала,
	|	NULL КАК ДатаОкончания,
	|	торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Квалификация КАК Квалификация,
	|	ВТ_Ремонты.ID КАК IDРемонта,
	|	ЛОЖЬ КАК Обеспечена,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ИсполнителиРаботПредварительно
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыРасчетаПроектныхЗатратНаРемонты КАК торо_СтатусыРасчетаПроектныхЗатратНаРемонты
	|		ПО ВТ_Ремонты.ID = торо_СтатусыРасчетаПроектныхЗатратНаРемонты.IDРемонта
	|			И (торо_СтатусыРасчетаПроектныхЗатратНаРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыДокументовПроектныхЗатратНаРемонты.Актуален))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ПроектныеЗатратыНаРемонты.ТрудовыеЗатраты КАК торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты
	|		ПО (торо_СтатусыРасчетаПроектныхЗатратНаРемонты.ДокументЗатрат = торо_ПроектныеЗатратыНаРемонтыТрудовыеЗатраты.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.Регистратор,
	|	торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.НомерСтроки,
	|	торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.ID,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
	|	торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.ВремяРаботы,
	|	NULL,
	|	NULL,
	|	торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.Квалификация,
	|	торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.РемонтыОборудования_ID,
	|	ЛОЖЬ,
	|	2
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ПлановыеТрудовыеЗатратыРемонтныхРабот КАК торо_ПлановыеТрудовыеЗатратыРемонтныхРабот
	|		ПО ВТ_Ремонты.ID = торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.РемонтыОборудования_ID
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.Ссылка,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.НомерСтроки,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.ID,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.Сотрудник,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.ВремяРаботы,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.ДатаНачала,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.ДатаОкончания,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.Квалификация,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсполнители.РемонтыОборудования_ID,
	|	ИСТИНА,
	|	3
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.Исполнители КАК торо_НарядНаВыполнениеРемонтныхРаботИсполнители
	|		ПО ВТ_Ремонты.ID = торо_НарядНаВыполнениеРемонтныхРаботИсполнители.РемонтыОборудования_ID
	|			И (торо_НарядНаВыполнениеРемонтныхРаботИсполнители.Ссылка.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсполнителиРаботПредварительно.IDРемонта КАК IDРемонта,
	|	ВТ_ИсполнителиРаботПредварительно.ID КАК ID,
	|	МАКСИМУМ(ВТ_ИсполнителиРаботПредварительно.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ПриоритетыИсполнителейРабот
	|ИЗ
	|	ВТ_ИсполнителиРаботПредварительно КАК ВТ_ИсполнителиРаботПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсполнителиРаботПредварительно.IDРемонта,
	|	ВТ_ИсполнителиРаботПредварительно.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсполнителиРаботПредварительно.ДокументИсточник КАК ДокументИсточник,
	|	ВТ_ИсполнителиРаботПредварительно.НомерСтроки КАК НомерСтроки,
	|	ВТ_ИсполнителиРаботПредварительно.ID КАК ID,
	|	ВТ_ИсполнителиРаботПредварительно.Сотрудник КАК Сотрудник,
	|	ВТ_ИсполнителиРаботПредварительно.ВремяРаботы КАК ВремяРаботы,
	|	ВТ_ИсполнителиРаботПредварительно.ДатаНачала КАК ДатаНачала,
	|	ВТ_ИсполнителиРаботПредварительно.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ИсполнителиРаботПредварительно.Квалификация КАК Квалификация,
	|	ВТ_ИсполнителиРаботПредварительно.IDРемонта КАК IDРемонта,
	|	ВТ_ИсполнителиРаботПредварительно.Обеспечена КАК Обеспечена
	|ПОМЕСТИТЬ ВТ_ИсполнителиРабот
	|ИЗ
	|	ВТ_ИсполнителиРаботПредварительно КАК ВТ_ИсполнителиРаботПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыИсполнителейРабот КАК ВТ_ПриоритетыИсполнителейРабот
	|		ПО ВТ_ИсполнителиРаботПредварительно.IDРемонта = ВТ_ПриоритетыИсполнителейРабот.IDРемонта
	|			И ВТ_ИсполнителиРаботПредварительно.ID = ВТ_ПриоритетыИсполнителейРабот.ID
	|			И ВТ_ИсполнителиРаботПредварительно.Приоритет = ВТ_ПриоритетыИсполнителейРабот.Приоритет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	ДокументИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсполнителиРабот.IDРемонта КАК IDРемонта,
	|	ВТ_ИсполнителиРабот.ID КАК ID,
	|	ВТ_ИсполнителиРабот.ДокументИсточник КАК ДокументИсточник,
	|	МИНИМУМ(ВТ_ИсполнителиРабот.Обеспечена) КАК Обеспечена
	|ПОМЕСТИТЬ ВТ_ОбеспечениеРемонтныхРабот
	|ИЗ
	|	ВТ_ИсполнителиРабот КАК ВТ_ИсполнителиРабот
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсполнителиРабот.IDРемонта,
	|	ВТ_ИсполнителиРабот.ID,
	|	ВТ_ИсполнителиРабот.ДокументИсточник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	ID,
	|	ДокументИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РемонтныеРаботыПредварительно.РемонтнаяРабота КАК ИдентификаторТехКарты,
	|	ВТ_РемонтныеРаботыПредварительно.ДатаНачалаРемонта КАК ДатаНачалаРемонта
	|ПОМЕСТИТЬ ВТ_ИдентфикаторыТехКарт
	|ИЗ
	|	ВТ_РемонтныеРаботыПредварительно КАК ВТ_РемонтныеРаботыПредварительно
	|ГДЕ
	|	ВТ_РемонтныеРаботыПредварительно.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторТехКарты,
	|	ДатаНачалаРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИдентфикаторыТехКарт.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
	|	МАКСИМУМ(торо_ВерсииТехКарт.Период) КАК ДатаСреза,
	|	ВТ_ИдентфикаторыТехКарт.ИдентификаторТехКарты КАК ИдентификаторТехКарты
	|ПОМЕСТИТЬ ВТ_ДатыСрезаВерсииТехКарт
	|ИЗ
	|	ВТ_ИдентфикаторыТехКарт КАК ВТ_ИдентфикаторыТехКарт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|		ПО ВТ_ИдентфикаторыТехКарт.ИдентификаторТехКарты = торо_ВерсииТехКарт.ИдентификаторТехКарты
	|			И ВТ_ИдентфикаторыТехКарт.ДатаНачалаРемонта >= торо_ВерсииТехКарт.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИдентфикаторыТехКарт.ДатаНачалаРемонта,
	|	ВТ_ИдентфикаторыТехКарт.ИдентификаторТехКарты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторТехКарты,
	|	ДатаСреза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыСрезаВерсииТехКарт.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
	|	ВТ_ДатыСрезаВерсииТехКарт.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
	|	торо_ВерсииТехКарт.ТехКарта.НормаВремени КАК НормаВремени
	|ПОМЕСТИТЬ ВТ_НормаВремениТехКарт
	|ИЗ
	|	ВТ_ДатыСрезаВерсииТехКарт КАК ВТ_ДатыСрезаВерсииТехКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|		ПО ВТ_ДатыСрезаВерсииТехКарт.ИдентификаторТехКарты = торо_ВерсииТехКарт.ИдентификаторТехКарты
	|			И ВТ_ДатыСрезаВерсииТехКарт.ДатаСреза = торо_ВерсииТехКарт.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторТехКарты,
	|	ДатаНачалаРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтныеРаботы.ДокументИсточник КАК ДокументИсточник,
	|	ВТ_РемонтныеРаботы.НомерСтроки КАК НомерСтрокиВДокументе,
	|	ВТ_РемонтныеРаботы.ID КАК ID,
	|	ВТ_РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	|	ВТ_РемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	|	ВТ_РемонтныеРаботы.Количество КАК Количество,
	|	ВТ_РемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	|	ВТ_РемонтныеРаботы.IDРемонта КАК РемонтыОборудования_ID,
	|	ВТ_РемонтныеРаботы.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
	|	ВЫБОР
	|		КОГДА ВТ_РемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_РемонтныеРаботы.РемонтнаяРабота КАК Справочник.торо_ТехнологическиеОперации).НормаВремени, 0)
	|		КОГДА ВТ_РемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	|			ТОГДА ЕСТЬNULL(ВТ_НормаВремениТехКарт.НормаВремени, 0)
	|	КОНЕЦ КАК НормаВремени,
	|	ВЫБОР
	|		КОГДА ВТ_РемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	|				И ВТ_РемонтныеРаботы.ID_ПараллельнойОперации = """"
	|			ТОГДА 0
	|		КОГДА ВТ_РемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	|			ТОГДА 5
	|		КОГДА ВТ_РемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации
	|				И ВТ_РемонтныеРаботы.ID_ПараллельнойОперации = """"
	|			ТОГДА 2
	|		ИНАЧЕ 7
	|	КОНЕЦ КАК Картинка,
	|	ЕСТЬNULL(ВТ_ОбеспечениеРемонтныхРабот.Обеспечена, ЛОЖЬ) КАК Обеспечена,
	|	ЕСТЬNULL(ВТ_РемонтныеРаботыАктов.Акт, ЗНАЧЕНИЕ(Документ.торо_АктОВыполненииЭтапаРабот.ПустаяСсылка)) КАК Акт,
	|	ЕСТЬNULL(ВТ_РемонтныеРаботыАктов.Завершена, ЛОЖЬ) КАК Завершена,
	|	ВЫБОР
	|		КОГДА ВТ_РемонтныеРаботыАктов.Акт ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьАкт,
	|	ВТ_РемонтныеРаботы.ЕстьНаряд КАК ЕстьНаряд
	|ИЗ
	|	ВТ_РемонтныеРаботы КАК ВТ_РемонтныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбеспечениеРемонтныхРабот КАК ВТ_ОбеспечениеРемонтныхРабот
	|		ПО ВТ_РемонтныеРаботы.IDРемонта = ВТ_ОбеспечениеРемонтныхРабот.IDРемонта
	|			И ВТ_РемонтныеРаботы.ID = ВТ_ОбеспечениеРемонтныхРабот.ID
	|			И ВТ_РемонтныеРаботы.ДокументИсточник = ВТ_ОбеспечениеРемонтныхРабот.ДокументИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормаВремениТехКарт КАК ВТ_НормаВремениТехКарт
	|		ПО ВТ_РемонтныеРаботы.РемонтнаяРабота = ВТ_НормаВремениТехКарт.ИдентификаторТехКарты
	|			И ВТ_РемонтныеРаботы.ДатаНачалаРемонта = ВТ_НормаВремениТехКарт.ДатаНачалаРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РемонтныеРаботыАктов КАК ВТ_РемонтныеРаботыАктов
	|		ПО ВТ_РемонтныеРаботы.IDРемонта = ВТ_РемонтныеРаботыАктов.IDРемонта
	|			И ВТ_РемонтныеРаботы.ID = ВТ_РемонтныеРаботыАктов.ID
	|			И ВТ_РемонтныеРаботы.ДокументИсточник = ВТ_РемонтныеРаботыАктов.ДокументИсточник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_РемонтныеРаботы.IDРемонта,
	|	ДокументИсточник,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсполнителиРабот.ДокументИсточник КАК ДокументИсточник,
	|	ВТ_ИсполнителиРабот.НомерСтроки КАК НомерСтрокиВДокументе,
	|	ВТ_ИсполнителиРабот.ID КАК ID,
	|	ВТ_ИсполнителиРабот.Сотрудник КАК Сотрудник,
	|	ВТ_ИсполнителиРабот.ВремяРаботы КАК ВремяРаботы,
	|	НАЧАЛОПЕРИОДА(ВТ_ИсполнителиРабот.ДатаНачала, ДЕНЬ) КАК ДатаГрафика,
	|	ВТ_ИсполнителиРабот.ДатаНачала КАК ДатаНачала,
	|	ВТ_ИсполнителиРабот.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ИсполнителиРабот.Квалификация КАК Квалификация,
	|	ВТ_ИсполнителиРабот.IDРемонта КАК РемонтыОборудования_ID,
	|	ЕСТЬNULL(ВТ_РемонтныеРаботыАктов.Акт, ЗНАЧЕНИЕ(Документ.торо_АктОВыполненииЭтапаРабот.ПустаяСсылка)) КАК Акт,
	|	ВЫБОР
	|		КОГДА ВТ_РемонтныеРаботыАктов.Акт ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьАкт,
	|	ВТ_РемонтныеРаботы.ЕстьНаряд КАК ЕстьНаряд
	|ИЗ
	|	ВТ_ИсполнителиРабот КАК ВТ_ИсполнителиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РемонтныеРаботы КАК ВТ_РемонтныеРаботы
	|		ПО ВТ_ИсполнителиРабот.IDРемонта = ВТ_РемонтныеРаботы.IDРемонта
	|			И ВТ_ИсполнителиРабот.ID = ВТ_РемонтныеРаботы.ID
	|			И ВТ_ИсполнителиРабот.ДокументИсточник = ВТ_РемонтныеРаботы.ДокументИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РемонтныеРаботыАктов КАК ВТ_РемонтныеРаботыАктов
	|		ПО (ВТ_РемонтныеРаботы.IDРемонта = ВТ_РемонтныеРаботыАктов.IDРемонта)
	|			И (ВТ_РемонтныеРаботы.ID = ВТ_РемонтныеРаботыАктов.ID)
	|			И (ВТ_РемонтныеРаботы.ДокументИсточник = ВТ_РемонтныеРаботыАктов.ДокументИсточник)";	
	
	#КонецОбласти
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// 1. Ремонтные работы.
	РемонтныеРаботы = Новый Массив;
	
	ВыборкаРабот = РезультатЗапроса[11].Выбрать();
	Пока ВыборкаРабот.Следующий() Цикл 
		
		СтрокаРемонтныхРабот = Новый Структура("НомерСтрокиВДокументе, ID, РемонтнаяРабота, Родитель_ID, Количество, РемонтыОборудования_ID, Картинка,			
			|ДатаНачала, ДатаОкончания, НормаВремени, Завершена, ДокументИсточник, Обеспечена, ID_ПараллельнойОперации, Акт, ЕстьАкт, ЕстьНаряд");	
		
		ЗаполнитьЗначенияСвойств(СтрокаРемонтныхРабот, ВыборкаРабот);
		
		РемонтныеРаботы.Добавить(СтрокаРемонтныхРабот);
	КонецЦикла;	
	
	// 2. Исполнители Работ.	
	ИсполнителиРабот = Новый Массив;
		
	ВыборкаИсполнителей = РезультатЗапроса[12].Выбрать();
	Пока ВыборкаИсполнителей.Следующий() Цикл 
		
		СтрокаИсполнителей = Новый Структура("НомерСтрокиВДокументе, ID, РемонтыОборудования_ID, ДатаГрафика, Квалификация,
			|Сотрудник, ВремяРаботы, ДатаНачала, ДатаОкончания, ДокументИсточник, НоваяСтрока, Акт, ЕстьАкт, ЕстьНаряд"); 
		
		ЗаполнитьЗначенияСвойств(СтрокаИсполнителей, ВыборкаИсполнителей);
				
		ИсполнителиРабот.Добавить(СтрокаИсполнителей);
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("РемонтныеРаботы", РемонтныеРаботы);
	Результат.Вставить("ИсполнителиРабот", ИсполнителиРабот);
	
	Возврат Результат;
	
КонецФункции

 &НаСервереБезКонтекста
Процедура ЗаполнитьДокументПроектныхЗатратИОбновитьСтатусРасчета(Выборка) 
		
	ДокументЗатрат = торо_ЗаполнениеДокументов20.ЗаполнитьДокументПроектныеЗатратыНаРемонты(Выборка.ДокументЗатрат, Выборка); 

	Если НЕ ЗначениеЗаполнено(ДокументЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяЗапись = РегистрыСведений.торо_СтатусыРасчетаПроектныхЗатратНаРемонты.СоздатьМенеджерЗаписи(); 
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
	Если НЕ ЗначениеЗаполнено(Выборка.ДокументЗатрат) Тогда
		НоваяЗапись.ДокументЗатрат = ДокументЗатрат;
	КонецЕсли;
	
	НоваяЗапись.Статус = Перечисления.торо_СтатусыДокументовПроектныхЗатратНаРемонты.Актуален;
	
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ДополнитьРесурсИсполнителей(ДатаГрафика)
	
	ПараметрыДополнения = Новый Структура();
	ПараметрыДополнения.Вставить("ДатаГрафика", ДатаГрафика);
	ПараметрыДополнения.Вставить("Организация", Объект.Организация);
	ПараметрыДополнения.Вставить("Исполнитель", Объект.Исполнитель);
	ПараметрыДополнения.Вставить("ВключатьСотрудниковВсехПодразделений", Объект.ВключатьСотрудниковВсехПодразделений);
	ПараметрыДополнения.Вставить("ВключатьПодчиненныхИсполнителей", Объект.ВключатьПодчиненныхИсполнителей);	
	
	ДанныеДополнения = ДанныеДополненияРесурсаИсполнителей(ПараметрыДополнения);
	
	СтруктураОтбора = Новый Структура("ДатаГрафика, Сотрудник");
	
	Для Каждого Строка Из ДанныеДополнения.РесурсИсполнителей Цикл
		
		НоваяСтрока = Объект.РесурсИсполнителей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		НайденнаяСтрока = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.ЗанятостьСотрудников, СтруктураОтбора, Истина);
		
		НоваяСтрока.ВремяРаботы = ?(НайденнаяСтрока = Неопределено, 0, НайденнаяСтрока.ВремяРаботы);
		НоваяСтрока.ДоступноеВремяРаботы = НоваяСтрока.ПлановоеВремяРаботы - НоваяСтрока.ВремяРаботы;
		
		НоваяСтрока.ВремяРаботыПредставление    = НоваяСтрока.ВремяРаботы / 3600;
		НоваяСтрока.ПлановоеВремяПредставление  = НоваяСтрока.ПлановоеВремяРаботы / 3600;
		НоваяСтрока.ДоступноеВремяПредставление = НоваяСтрока.ДоступноеВремяРаботы / 3600;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ДанныеДополненияРесурсаИсполнителей(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СостояниеРаботыСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	торо_СостояниеРаботыСотрудниковСрезПоследних.ДатаГрафика КАК ДатаГрафика,
	|	торо_СостояниеРаботыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	СУММА(торо_СостояниеРаботыСотрудниковСрезПоследних.ВремяРаботы) КАК ВремяРаботы
	|ПОМЕСТИТЬ ВТ_ПлановоеВремяРаботы
	|ИЗ
	|	РегистрСведений.торо_СостояниеРаботыСотрудников.СрезПоследних(
	|			,
	|			(&ПоВсемОрганизациям
	|				ИЛИ Организация = &Организация)
	|				И (&ПоВсемПодразделениям
	|					ИЛИ &УсловыйОтборПодразделения)
	|				И ДатаГрафика = &ДатаГрафика) КАК торо_СостояниеРаботыСотрудниковСрезПоследних
	|ГДЕ
	|	НЕ торо_СостояниеРаботыСотрудниковСрезПоследних.Отменен
	|	И торо_СостояниеРаботыСотрудниковСрезПоследних.СостояниеСотрудника = ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.Явка)
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_СостояниеРаботыСотрудниковСрезПоследних.Подразделение,
	|	торо_СостояниеРаботыСотрудниковСрезПоследних.ДатаГрафика,
	|	торо_СостояниеРаботыСотрудниковСрезПоследних.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник КАК Сотрудник,
	|	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Квалификация КАК Квалификация,
	|	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Основная КАК Основная
	|ПОМЕСТИТЬ ВТ_КвалификацияПерсонала
	|ИЗ
	|	РегистрСведений.торо_КвалификацияРемонтногоПерсонала.СрезПоследних(
	|			,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТ_плановоеВремяРаботы.Сотрудник
	|				ИЗ
	|					ВТ_плановоеВремяРаботы)) КАК торо_КвалификацияРемонтногоПерсоналаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПлановоеВремяРаботы.Подразделение КАК Подразделение,
	|	ВТ_ПлановоеВремяРаботы.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_ПлановоеВремяРаботы.Сотрудник КАК Сотрудник,
	|	ВТ_ПлановоеВремяРаботы.ВремяРаботы КАК ПлановоеВремяРаботы,
	|	ВТ_КвалификацияПерсонала.Квалификация КАК Квалификация,
	|	ВТ_КвалификацияПерсонала.Основная КАК ОсновнаяКвалификация
	|ИЗ
	|	ВТ_ПлановоеВремяРаботы КАК ВТ_ПлановоеВремяРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КвалификацияПерсонала КАК ВТ_КвалификацияПерсонала
	|		ПО ВТ_ПлановоеВремяРаботы.Сотрудник = ВТ_КвалификацияПерсонала.Сотрудник";

	Если Параметры.ВключатьПодчиненныхИсполнителей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловыйОтборПодразделения", "Подразделение В ИЕРАРХИИ (&Подразделение)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловыйОтборПодразделения", "Подразделение = &Подразделение");
    КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаГрафика", Параметры.ДатаГрафика);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Подразделение", Параметры.Исполнитель);
	
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(Параметры.Организация));
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Параметры.ВключатьСотрудниковВсехПодразделений ИЛИ Не ЗначениеЗаполнено(Параметры.Исполнитель));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РесурсИсполнителей = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаРесурса = Новый Структура("Подразделение, Квалификация, Сотрудник, ДатаГрафика, 
			|ПлановоеВремяРаботы, ВремяРаботы, ОсновнаяКвалификация, ДоступноеВремяРаботы");
		
		ЗаполнитьЗначенияСвойств(СтрокаРесурса, Выборка);
		
		РесурсИсполнителей.Добавить(СтрокаРесурса);
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("РесурсИсполнителей", РесурсИсполнителей);
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ОтметитьСвязанностьСтрокДереваРемонтныхРабот(СтрокаДерева, IDИсполнителя, ДокументИсточник)

	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ПодчиненнаяСтрока.СвязанаСТекущейСтрокойИсполнителя 
			= ПодчиненнаяСтрока.ID = IDИсполнителя И ПодчиненнаяСтрока.ДокументИсточник = ДокументИсточник;
			
		ОтметитьСвязанностьСтрокДереваРемонтныхРабот(ПодчиненнаяСтрока, IDИсполнителя, ДокументИсточник);
	КонецЦикла;	
	
КонецПроцедуры	


&НаКлиенте
Процедура ОбработкаПодбораТехнологическихКартОпераций(ВыбранноеЗначение)
	
	ПодборТехКарт = ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт");
	
	ТекущиеДанныеРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущиеДанныеРО = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекущиеДанныеРР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка ремонтной работы. Добавления элементов невозможно!'"); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанныеРР.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ТекущиеДанныеРодителя = ТекущиеДанныеРР.ПолучитьРодителя();
	Иначе
		ТекущиеДанныеРодителя = ТекущиеДанныеРР;
	КонецЕсли;
	
	// Удалим подобранные значения, которые не могут быть включены в состав самого себя.
	Если ПодборТехКарт И ТекущиеДанныеРодителя.РемонтнаяРабота = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда 
		
		ЗначенияКУдалению = Новый Массив();
		Для Каждого Значение Из ВыбранноеЗначение Цикл
			
			Если Значение = ТекущиеДанныеРодителя.РемонтнаяРабота Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'"), Значение);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
				
				ЗначенияКУдалению.Добавить(Значение);
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого Значение Из ЗначенияКУдалению Цикл
			ВыбранноеЗначение.Удалить(Значение);
		КонецЦикла;
		
		Если ВыбранноеЗначение.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
			
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ВыбранныеЗначения", ВыбранноеЗначение);
	ПараметрыОбработки.Вставить("ИдентификаторРодителя", ТекущиеДанныеРодителя.ПолучитьИдентификатор());
	
	ОбработкаПодбораТехнологическихКартОперацийСервер(ПараметрыОбработки);
	
	IDРемонта = ТекущиеДанныеРР.РемонтыОборудования_ID;
	Для Каждого СтрокаДерева Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаДерева.РемонтыОборудования_ID = IDРемонта Тогда
			Продолжить;
		КонецЕсли;	
		
		ОбновитьОбеспеченностьТК(СтрокаДерева);  
		ОбновитьПланируемыеДатыНачалаРемонтныхРабот(СтрокаДерева);
	КонецЦикла;	
	
	ОбновитьОбеспеченностьРемонта(IDРемонта);
	
	УстановитьМодифицированность(IDРемонта);
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ТекущиеДанныеРодителя.ПолучитьИдентификатор(), Истина);
	
	СтрокиРодителя = ТекущиеДанныеРодителя.ПолучитьЭлементы();
	ПоследняяСтрокаРодителя = СтрокиРодителя[СтрокиРодителя.Количество() - 1];
	
	Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ПоследняяСтрокаРодителя.ПолучитьИдентификатор();
	
КонецПроцедуры	

&НаСервере
Процедура ОбработкаПодбораТехнологическихКартОперацийСервер(ПараметрыОбработки)
	
	ТекущиеДанныеРодителя = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ПараметрыОбработки.ИдентификаторРодителя);
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("РемонтыОборудования_ID", ТекущиеДанныеРодителя.РемонтыОборудования_ID);	
	ДанныеЗаполнения.Вставить("РодительТК", ТекущиеДанныеРодителя.РемонтнаяРабота);
	ДанныеЗаполнения.Вставить("РодительТКВерсия", Неопределено);
	ДанныеЗаполнения.Вставить("РемонтнаяРабота", Неопределено);
	ДанныеЗаполнения.Вставить("НормаВремени", Неопределено);
	ДанныеЗаполнения.Вставить("Количество", 1);
	ДанныеЗаполнения.Вставить("ID_ПараллельнойОперации", "");
	ДанныеЗаполнения.Вставить("ID", "");

	Для Каждого Значение Из ПараметрыОбработки.ВыбранныеЗначения Цикл
		
		ДанныеЗаполнения.РемонтнаяРабота = Значение;
		ДанныеЗаполнения.НормаВремени = НормаВремениРаботы(Значение);
		
		ОбработатьПодборТехнологическойКартыИлиОперации(Значение, ТекущиеДанныеРодителя, ДанныеЗаполнения);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ОбработатьПодборТехнологическойКартыИлиОперации(Значение, СтрокаРодитель, ДанныеЗаполнения)
	
	// Заполнение дерева формы ремонтных работ.
	НоваяСтрокаДереваРР = СтрокаРодитель.ПолучитьЭлементы().Добавить();
	
	НоваяСтрокаДереваРР.ID = Новый УникальныйИдентификатор();
   	НоваяСтрокаДереваРР.ЕстьИзменения = Истина;
	НоваяСтрокаДереваРР.НоваяСтрока = Истина;

	НоваяСтрокаДереваРР.РемонтнаяРабота = ДанныеЗаполнения.РемонтнаяРабота;
	НоваяСтрокаДереваРР.РемонтыОборудования_ID = ДанныеЗаполнения.РемонтыОборудования_ID;
	НоваяСтрокаДереваРР.ID_ПараллельнойОперации = ДанныеЗаполнения.ID_ПараллельнойОперации;
	НоваяСтрокаДереваРР.Количество = ДанныеЗаполнения.Количество;
	
	НоваяСтрокаДереваРР.НормаВремени = ДанныеЗаполнения.НормаВремени;
	НоваяСтрокаДереваРР.НормаВремениВЧасах = НоваяСтрокаДереваРР.НормаВремени / 3600;
	
	НоваяСтрокаДереваРР.ДатаНачала = СтрокаРодитель.ДатаНачала;
	НоваяСтрокаДереваРР.ДатаОкончания = НоваяСтрокаДереваРР.ДатаНачала + НоваяСтрокаДереваРР.НормаВремени;

	НоваяСтрокаДереваРР.Родитель_ID = СтрокаРодитель.ID;	
	НоваяСтрокаДереваРР.ДокументИсточник = СтрокаРодитель.ДокументИсточник;
	НоваяСтрокаДереваРР.ЕстьНаряд = ТипЗнч(НоваяСтрокаДереваРР.ДокументИсточник) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот");
	
	торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НоваяСтрокаДереваРР);
		
   	// Заполнение табличной части ремонтных работ.
	НоваяСтрокаРР = Объект.РемонтныеРаботы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаРР, НоваяСтрокаДереваРР);
	
	Если ТипЗнч(ДанныеЗаполнения.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		ЗаполнитьТрудозатратыТОПоНормативамТК(НоваяСтрокаДереваРР, ДанныеЗаполнения); 
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ВерсииТехКартСрезПоследних.ТехКарта КАК ТехКарта
		|ПОМЕСТИТЬ ВТ_ВерсияТехКарты
		|ИЗ
		|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(, ИдентификаторТехКарты = &ТехКарта) КАК торо_ВерсииТехКартСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	торо_ВерсииТехКартСрезПоследних.ТехКарта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ТехКартыТрудовыеЗатраты.ID КАК ID,
		|	торо_ТехКартыТрудовыеЗатраты.НормаВремениВСекундах КАК НормаВремени,
		|	торо_ТехКартыТрудовыеЗатраты.Количество КАК Количество,
		|	торо_ТехКартыТрудовыеЗатраты.Операция КАК РемонтнаяРабота,
		|	торо_ТехКартыТрудовыеЗатраты.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
		|	&ТехКарта КАК РодительТК,
		|	торо_ТехКартыТрудовыеЗатраты.Ссылка КАК РодительТКВерсия
		|ИЗ
		|	ВТ_ВерсияТехКарты КАК ВТ_ВерсияТехКарты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыТрудовыеЗатраты
		|		ПО ВТ_ВерсияТехКарты.ТехКарта = торо_ТехКартыТрудовыеЗатраты.Ссылка";
		
		Запрос.УстановитьПараметр("ТехКарта", ДанныеЗаполнения.РемонтнаяРабота);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			
			ОбработатьПодборТехнологическойКартыИлиОперации(Выборка.РемонтнаяРабота, НоваяСтрокаДереваРР, ДанныеЗаполнения);
		КонецЦикла;		
	КонецЕсли;
	
	Возврат НоваяСтрокаДереваРР;

КонецФункции

&НаСервереБезКонтекста
Функция НормаВремениРаботы(Работа)

	Результат = 0;
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Работа, "НормаВремени");
		
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ТехКарты.НормаВремени
		|ИЗ
		|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних КАК торо_ВерсииТехКартСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты КАК торо_ТехКарты
		|		ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты.Ссылка
		|ГДЕ
		|	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты = &Работа";
		
		Запрос.УстановитьПараметр("Работа", Работа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.НормаВремени;
		КонецЕсли; 
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьТрудозатратыТОПоНормативамТК(СтрокаДереваРР, ДанныеЗаполнения)

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ID", СтрокаДереваРР.ID);
	СтруктураОтбора.Вставить("РемонтыОборудования_ID", СтрокаДереваРР.РемонтыОборудования_ID);

	Запрос = Новый Запрос();
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ID) Тогда
		// Добавляется вложенная ТО из ТК  
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ТехКартыТрудовыеЗатраты.Квалификация КАК Квалификация,
		|	торо_ТехКартыТрудовыеЗатраты.ВремяРаботы КАК ВремяРаботы,
		|	торо_ТехКартыТрудовыеЗатраты.Количество КАК Количество
		|ИЗ
		|	Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
		|ГДЕ
		|	торо_ТехКартыТрудовыеЗатраты.Ссылка = &РемонтнаяРабота
		|	И торо_ТехКартыТрудовыеЗатраты.ID = &ID";
		
		Запрос.УстановитьПараметр("ID", ДанныеЗаполнения.ID);
		Запрос.УстановитьПараметр("РемонтнаяРабота", ДанныеЗаполнения.РодительТКВерсия);
	Иначе
		// Добавляется отдельно подобранная ТО  
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ТехнологическиеОперацииТрудовыеЗатраты.Квалификация КАК Квалификация,
		|	торо_ТехнологическиеОперацииТрудовыеЗатраты.Количество КАК Количество,
		|	торо_ТехнологическиеОперацииТрудовыеЗатраты.ВремяРаботы КАК ВремяРаботы
		|ИЗ
		|	Справочник.торо_ТехнологическиеОперации.ТрудовыеЗатраты КАК торо_ТехнологическиеОперацииТрудовыеЗатраты
		|ГДЕ
		|	торо_ТехнологическиеОперацииТрудовыеЗатраты.Ссылка = &РемонтнаяРабота";
		
		Запрос.УстановитьПараметр("РемонтнаяРабота", СтрокаДереваРР.РемонтнаяРабота);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДатаОкончанияПредыдущейСтроки = Дата(1, 1, 1);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.ИсполнителиРабот.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДереваРР, "ID, РемонтыОборудования_ID, ДокументИсточник, ЕстьНаряд, НоваяСтрока"); 
		
		НоваяСтрока.Нормативная = Истина;
		НоваяСтрока.ВремяРаботыТекст = 
			торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(НоваяСтрока.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКомандДобавитьТКТО()
	
	ТекущиеДанныеДереваРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ID", ?(ТекущиеДанныеДереваРР = Неопределено, Неопределено, ТекущиеДанныеДереваРР.РемонтыОборудования_ID));
	
	СтрокаРемонтыОборудования = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтыОборудования, СтруктураОтбора, Истина);
	
	КомандыДоступны = ?(СтрокаРемонтыОборудования = Неопределено, Ложь, НЕ СтрокаРемонтыОборудования.Завершен);
	
	Элементы.ДеревоРемонтныхРаботДобавитьТК.Доступность = КомандыДоступны;
	Элементы.ДеревоРемонтныхРаботДобавитьТО.Доступность = КомандыДоступны;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииЗначенияРеквизитаИсполнителейРабот(ИмяРеквизита)
	
    ТекущиеДанные = Элементы.ИсполнителиРабот.ТекущиеДанные;
	
	ИмяТаблицы = Элементы.ИсполнителиРабот.Имя;
		
	ДанныеДоИзменения = СтруктураДанныхДоРедактирования[ИмяТаблицы]; 
	ЗначениеДоИзменения = ДанныеДоИзменения[ИмяРеквизита];

	Если ТекущиеДанные[ИмяРеквизита] = ЗначениеДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ДатаНачала" Тогда
		
		ТекущиеДанные.ДатаОкончания = ТекущиеДанные.ДатаНачала + ТекущиеДанные.ВремяРаботы;
		
	ИначеЕсли ИмяРеквизита = "ДатаОкончания" Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Тогда
			ТекущиеДанные.ВремяРаботы = ТекущиеДанные.ДатаОкончания - ТекущиеДанные.ДатаНачала;
			ТекущиеДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТекущиеДанные.ВремяРаботы);
		Иначе
			ТекущиеДанные.ДатаНачала = ТекущиеДанные.ДатаОкончания - ТекущиеДанные.ВремяРаботы;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВремяРаботы" Тогда
				
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Тогда
			ТекущиеДанные.ДатаОкончания = ТекущиеДанные.ДатаНачала + ТекущиеДанные.ВремяРаботы;
		Иначе
			ТекущиеДанные.ДатаНачала = ТекущиеДанные.ДатаОкончания - ТекущиеДанные.ВремяРаботы;
		КонецЕсли;
	КонецЕсли;  
	
	ТекущиеДанные.НеВПределахДня = Не НачалоДня(ТекущиеДанные.ДатаНачала) = НачалоДня(ТекущиеДанные.ДатаОкончания);
	Если ТекущиеДанные.НеВПределахДня Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеДоИзменения);	
				
		ОбщегоНазначенияКлиент.СообщитьПользователю("Интервал работы исполнителя должен быть в пределах одного дня!");
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные.ДатаГрафика = НачалоДня(ТекущиеДанные.ДатаНачала);
	ТекущиеДанные.ЕстьИзменения = Истина;
	
	Если Не ТекущиеДанные.ДатаГрафика = ДанныеДоИзменения.ДатаГрафика Тогда
		ПересчитатьРесурсИсполнителя(ДанныеДоИзменения.ДатаГрафика, ДанныеДоИзменения.Сотрудник, -ДанныеДоИзменения.ВремяРаботы);
		ПересчитатьРесурсИсполнителя(ТекущиеДанные.ДатаГрафика, ТекущиеДанные.Сотрудник, ТекущиеДанные.ВремяРаботы);

		ИсполнителиРаботПриАктивизацииСтроки(Неопределено); 
	Иначе
		ПересчитатьРесурсИсполнителя(ТекущиеДанные.ДатаГрафика, ТекущиеДанные.Сотрудник, ТекущиеДанные.ВремяРаботы - ДанныеДоИзменения.ВремяРаботы);
	КонецЕсли;	
	
	
	УстановитьМодифицированность(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ID, ТекущиеДанные.ДокументИсточник);
	
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, ИмяТаблицы, ТекущиеДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОбеспеченностьПриИзмененииИсполнителей(ИдентификаторРемонтнойРаботы)
	
	ТекущиеДанныеРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ИдентификаторРемонта = ТекущиеДанныеРР.РемонтыОборудования_ID;
	
	Если ТипЗнч(ТекущиеДанныеРР.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		
		ОбновитьОбеспеченностьСтрокиДереваРемонтныхРабот(ТекущиеДанныеРР);
		ПеренестиПравкиДереваРемонтныхРабот(ТекущиеДанныеРР);
		
	Иначе                                                      
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("РемонтыОборудования_ID", ИдентификаторРемонта);
		СтруктураОтбора.Вставить("ID", ИдентификаторРемонтнойРаботы);
		
		ДеревоРемонтныхРаботОтбор = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(ДеревоРемонтныхРабот, СтруктураОтбора);
		Для Каждого СтрокаДерева Из ДеревоРемонтныхРаботОтбор Цикл
			ОбновитьОбеспеченностьСтрокиДереваРемонтныхРабот(СтрокаДерева);
			ПеренестиПравкиДереваРемонтныхРабот(СтрокаДерева);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаДерева.РемонтыОборудования_ID = ИдентификаторРемонта Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновитьОбеспеченностьТК(СтрокаДерева);
	КонецЦикла;	
	
	ОбновитьОбеспеченностьРемонта(ИдентификаторРемонта);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОбеспеченностьСтрокиДереваРемонтныхРабот(СтрокаДерева) 
	
	СтруктураОтбора = Новый Структура("РемонтыОборудования_ID, ID, ДокументИсточник");
	СтруктураОтбора.Вставить("КУдалению", Ложь);
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДерева);
	
	ИсполнителиРаботОтбор = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.ИсполнителиРабот, СтруктураОтбора); 
	
	РемонтнаяРаботаОбеспечена = ИсполнителиРаботОтбор.Количество() > 0;
	
	Для Каждого Строка Из ИсполнителиРаботОтбор Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Сотрудник) Тогда
			РемонтнаяРаботаОбеспечена = Ложь;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	СтрокаДерева.Обеспечена = РемонтнаяРаботаОбеспечена;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОбеспеченностьРемонта(IDРемонта) 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ID", IDРемонта);
		
	СтрокаРемонтыОборудования = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтыОборудования, СтруктураОтбора, Истина);
	Если СтрокаРемонтыОборудования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора.Очистить();
	
	СтруктураОтбора.Вставить("РемонтыОборудования_ID", IDРемонта);
	СтруктураОтбора.Вставить("КУдалению", Ложь);
	
	РемонтОбеспечен = Истина;
	
	РемонтныеРаботыОтбор = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтныеРаботы, СтруктураОтбора);
	Для Каждого Строка Из РемонтныеРаботыОтбор Цикл
		
		Если ТипЗнч(Строка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") И Не Строка.Обеспечена Тогда
			
			РемонтОбеспечен = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаРемонтыОборудования.Обеспечен = РемонтОбеспечен;
	
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьСвязанныеСтрокиИсполнителейРабот(СтрокаДереваРемонтныхРабот) 
	
    СтруктураОтбора = Новый Структура("РемонтыОборудования_ID, ID, ДокументИсточник");
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДереваРемонтныхРабот);
	
	ПроставитьКУдалению = НЕ СтрокаДереваРемонтныхРабот.НоваяСтрока 
		И ТипЗнч(СтрокаДереваРемонтныхРабот.ДокументИсточник) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот");
	
	ИсполнителиРаботОтбор = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.ИсполнителиРабот, СтруктураОтбора);
	Для Каждого Строка Из ИсполнителиРаботОтбор Цикл
		
		ПересчитатьРесурсИсполнителя(Строка.ДатаГрафика, Строка.Сотрудник, - Строка.ВремяРаботы);
		
		Если ПроставитьКУдалению И Не Строка.НоваяСтрока Тогда
			
			Строка.ЕстьИзменения = Истина;
			Строка.КУдалению = Истина;
							
		Иначе
			
			Объект.ИсполнителиРабот.Удалить(Строка);
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьРесурсИсполнителя(ДатаГрафика, Сотрудник, ИзменениеВремениРаботы)
	
	Если Не ЗначениеЗаполнено(Сотрудник) ИЛИ Не ЗначениеЗаполнено(ДатаГрафика) ИЛИ ИзменениеВремениРаботы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ДатаГрафика", ДатаГрафика);
	СтруктураОтбора.Вставить("Сотрудник", Сотрудник);
	
	РесурсИсполнителейОтбор = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РесурсИсполнителей, СтруктураОтбора);
	Для Каждого Строка Из РесурсИсполнителейОтбор Цикл
		
		Строка.ВремяРаботы = Строка.ВремяРаботы + ИзменениеВремениРаботы;
		Строка.ДоступноеВремяРаботы = Строка.ПлановоеВремяРаботы - Строка.ВремяРаботы;
		
		Строка.ВремяРаботыПредставление = Строка.ВремяРаботы / 3600;
		Строка.ДоступноеВремяПредставление = Строка.ДоступноеВремяРаботы / 3600;
	КонецЦикла;	
	
	СтрокаЗанятостьСотрудников = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.ЗанятостьСотрудников, СтруктураОтбора, Истина);
	Если СтрокаЗанятостьСотрудников = Неопределено Тогда  
		
		НоваяСтрока = Объект.ЗанятостьСотрудников.Добавить();
		НоваяСтрока.ДатаГрафика = ДатаГрафика; 
		НоваяСтрока.Сотрудник = Сотрудник;                
		НоваяСтрока.ВремяРаботы = ИзменениеВремениРаботы;
		
	Иначе  
		
		СтрокаЗанятостьСотрудников.ВремяРаботы = СтрокаЗанятостьСотрудников.ВремяРаботы + ИзменениеВремениРаботы;
	КонецЕсли;;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьПериодыРаботыСУчетомГрафика(Сотрудник, Знач ДатаНачала, ВремяРаботы)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_СостояниеРаботыСотрудниковСрезПоследних.ВремяНачала КАК ДатаНачала,
		|	торо_СостояниеРаботыСотрудниковСрезПоследних.ВремяОкончания КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.торо_СостояниеРаботыСотрудников.СрезПоследних(
		|			,
		|			Сотрудник = &Сотрудник
		|				И ДатаГрафика >= &ДатаНачала) КАК торо_СостояниеРаботыСотрудниковСрезПоследних
		|ГДЕ
		|	торо_СостояниеРаботыСотрудниковСрезПоследних.СостояниеСотрудника = ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.Явка)";
	                                                                          
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	ОстатокВремениРаботы = ВремяРаботы;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() И ОстатокВремениРаботы > 0 Цикл
		
		Если ДатаНачала > Выборка.ДатаОкончания Тогда
			Продолжить;
		ИначеЕсли ДатаНачала < Выборка.ДатаНачала Тогда
			ДатаНачала = Выборка.ДатаНачала;
		КонецЕсли;
		
		Строка = Новый Структура("ДатаНачала, ДатаОкончания, ВремяРаботы, ДатаГрафика, ВремяРаботыТекст, НеВПределахДня");
		
		РасчетнаяДатаОкончания = ДатаНачала + ОстатокВремениРаботы;
		
		Строка.ДатаНачала = ДатаНачала;
		Строка.ДатаОкончания = Мин(РасчетнаяДатаОкончания, Выборка.ДатаОкончания);
		Строка.ВремяРаботы = Строка.ДатаОкончания - Строка.ДатаНачала;
		Строка.ДатаГрафика = НачалоДня(Строка.ДатаНачала);
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
		Строка.НеВПределахДня = Не НачалоДня(Строка.ДатаНачала) = НачалоДня(Строка.ДатаОкончания);

		ДатаНачала = Строка.ДатаОкончания;
		ОстатокВремениРаботы = ОстатокВремениРаботы - Строка.ВремяРаботы;
		
		Результат.Добавить(Строка);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции	


&НаКлиенте
Процедура СформироватьДеревоРемонтныхРабот(ВыделенныеСтрокиРемонтов)
	
	СтрокиДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	СтрокиДерева.Очистить();
	
	Для каждого ИдентификаторСтрокиРемонта Из ВыделенныеСтрокиРемонтов Цикл
	
		СтрокаРемонта = Объект.РемонтыОборудования.НайтиПоИдентификатору(ИдентификаторСтрокиРемонта);
		
		Если СтрокаРемонта = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.РемонтыОборудования_ID = СтрокаРемонта.ID;
		НоваяСтрока.Завершена              = СтрокаРемонта.Завершен;
		НоваяСтрока.Картинка               = 4;
		НоваяСтрока.Количество             = 1;
		НоваяСтрока.ДатаНачала             = СтрокаРемонта.ДатаНачала;
		
		НоваяСтрока.РемонтнаяРабота        = СтрШаблон("%1 (%2)", СтрокаРемонта.ОбъектРемонта, СтрокаРемонта.ВидРемонта);
		
		ЗаполнитьСтрокиДереваРемонтныхРабот(НоваяСтрока);
		
		ОбновитьОбеспеченностьТК(НоваяСтрока);
		
		ОбновитьПланируемыеДатыНачалаРемонтныхРабот(НоваяСтрока);
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланируемыеДатыНачалаРемонтныхРабот(ВходнаяСтрокаДерева)
		
	СтрокиДерева = ВходнаяСтрокаДерева.ПолучитьЭлементы();
	
	ДатаРемонтнойРаботы = ВходнаяСтрокаДерева.ДатаНачала;
	
	СтруктураОтбораПараллельныхОпераций = Новый Структура("ID_ПараллельнойОперации");
	
	СтруктураОтбораИсполнителей = Новый Структура("ID, ДокументИсточник, РемонтыОборудования_ID");
	СтруктураОтбораИсполнителей.Вставить("ЕстьИзменения", Ложь);

	ОбработанныеПараллельныеОперации = Новый Массив;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
	
		Если ЗначениеЗаполнено(СтрокаДерева.ID_ПараллельнойОперации) Тогда		
			
			Если ОбработанныеПараллельныеОперации.Найти(СтрокаДерева.ID_ПараллельнойОперации) = Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураОтбораПараллельныхОпераций, СтрокаДерева);
				
				ДатаОкончанияПараллельныхОпераций = Дата(1, 1, 1);
				
				СтрокиПараллельныхОпераций = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(СтрокиДерева, СтруктураОтбораПараллельныхОпераций);
				Для Каждого Строка Из СтрокиПараллельныхОпераций Цикл
					
					Строка.ДатаНачала = ДатаРемонтнойРаботы;
					Строка.ДатаОкончания = Строка.ДатаНачала + Строка.НормаВремени;
					
					ДатаОкончанияПараллельныхОпераций = Макс(ДатаОкончанияПараллельныхОпераций, Строка.ДатаОкончания);
				КонецЦикла; 
				
				ДатаРемонтнойРаботы = ДатаОкончанияПараллельныхОпераций;
				
				ОбработанныеПараллельныеОперации.Добавить(СтрокаДерева.ID_ПараллельнойОперации);
			КонецЕсли;	
			
		Иначе
			
			СтрокаДерева.ДатаНачала = ДатаРемонтнойРаботы;
			СтрокаДерева.ДатаОкончания = СтрокаДерева.ДатаНачала + СтрокаДерева.НормаВремени;
			
			ДатаРемонтнойРаботы = СтрокаДерева.ДатаОкончания;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ОбновитьПланируемыеДатыНачалаРемонтныхРабот(СтрокаДерева);	
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбораИсполнителей, СтрокаДерева, "ID, ДокументИсточник, РемонтыОборудования_ID");
		
		ИсполнителиРаботОтбор = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.ИсполнителиРабот, СтруктураОтбораИсполнителей);
		Для Каждого Строка Из ИсполнителиРаботОтбор Цикл
			
			Если Не Строка.НоваяСтрока И Строка.ЕстьНаряд Тогда
				Продолжить;
			КонецЕсли;	
			
			Строка.ДатаНачала = СтрокаДерева.ДатаНачала;
			Строка.ДатаОкончания = Строка.ДатаНачала + Строка.ВремяРаботы;
			
			Строка.ДатаГрафика = НачалоДня(Строка.ДатаНачала); 
			Строка.НеВПределахДня = Не НачалоДня(Строка.ДатаНачала) = НачалоДня(Строка.ДатаОкончания);
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОбеспеченностьТК(СтрокаДерева)
		
	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	
	Для каждого ПодчиненнаяСтрока Из СтрокиДерева Цикл 
		
		Если СтрокаДерева.КУдалению Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ТипЗнч(ПодчиненнаяСтрока.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			ОбновитьОбеспеченностьТК(ПодчиненнаяСтрока);
		КонецЕсли;		
	КонецЦикла;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("Строка") Тогда
		
		ВсеОбеспечены = Истина;
		Для Каждого ПодчиненнаяСтрока Из СтрокиДерева Цикл 
			
			Если СтрокаДерева.КУдалению Тогда
				Продолжить;
			КонецЕсли;	
			
			ВсеОбеспечены = ВсеОбеспечены И ПодчиненнаяСтрока.Обеспечена;
		КонецЦикла;		
		
		СтрокаДерева.Обеспечена = ВсеОбеспечены;
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьСтрокиДереваРемонтныхРабот(СтрокаДерева)
	
	СтруктураОтбора = Новый Структура("РемонтыОборудования_ID, Родитель_ID");
	
	Если ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		// Во избежании дублей сделаем проверку, что тех. карта с таким ID всего одна,
		// иначе будет отбирать еще и по документу источнику;
		
		СтруктураОтбораТехКарт = Новый Структура("РемонтыОборудования_ID, ID");
		ЗаполнитьЗначенияСвойств(СтруктураОтбораТехКарт, СтрокаДерева);
		
		РемонтныеРаботыОтбор = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтныеРаботы, СтруктураОтбораТехКарт);
		Если РемонтныеРаботыОтбор.Количество() > 1 Тогда
			СтруктураОтбора.Вставить("ДокументИсточник");	
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДерева,, "Родитель_ID");
	СтруктураОтбора.Родитель_ID = СтрокаДерева.ID;
	
	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	
	РемонтныеРаботыОтбор = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтныеРаботы, СтруктураОтбора);
	Для Каждого Строка Из РемонтныеРаботыОтбор Цикл
				
		НоваяСтрока = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		ЗаполнитьСтрокиДереваРемонтныхРабот(НоваяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот()

	Для каждого КорневыеЭлементы Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРемонтныхРабот.Развернуть(КорневыеЭлементы.ПолучитьИдентификатор(),Истина);
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПравкиДереваРемонтныхРабот(СтрокаДерева)

	СтруктураОтбора = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДерева);
	
	СтрокаРемотныхРабот = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтныеРаботы, СтруктураОтбора, Истина);
	
	Если Не СтрокаРемотныхРабот = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРемотныхРабот, СтрокаДерева);
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура ДобавитьПодчиненныеСтрокиДереваВМассив(СтрокаДерева, МассивСтрок)

	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
	
		Если МассивСтрок.Найти(ПодчиненнаяСтрока) = Неопределено Тогда
			МассивСтрок.Добавить(ПодчиненнаяСтрока);
		КонецЕсли;
		
		ДобавитьПодчиненныеСтрокиДереваВМассив(ПодчиненнаяСтрока, МассивСтрок);
	
	КонецЦикла; 

КонецПроцедуры


&НаСервере
Процедура ПрименитьИзмененияНаСервере(Отказ)
		
	// Удалить / изменить исполнителей и удаляить ремонтные работы в существующих нарядах.
	СохранитьИзмененияВНарядах(Отказ);
		
	// Создать новые наряды.
	СоздатьНаряды(Отказ);

КонецПроцедуры


&НаСервере
Процедура СохранитьИзмененияВНарядах(Отказ)
		
	ДокументыКЗаписи = Новый Соответствие; // Хранит в себе документы к проведению.
	                                           // Ключ - ссылка, Значение - объект. 
											   
	СтруктураОтбора = Новый Структура("ЕстьИзменения, ЕстьНаряд", Истина, Истина);
    СтруктураОтбораРемонтовОборудования = Новый Структура("ID");

	ИзмененныеИсполнители = Объект.ИсполнителиРабот.НайтиСтроки(СтруктураОтбора); 	
	Для Каждого Строка Из ИзмененныеИсполнители Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Сотрудник) 
			ИЛИ Не ЗначениеЗаполнено(Строка.Квалификация)
			ИЛИ Не ЗначениеЗаполнено(Строка.ВремяРаботы) Тогда
			
			СтруктураОтбораРемонтовОборудования.ID = Строка.РемонтыОборудования_ID; 
			СтрокаРемонтовОборудования = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтыОборудования, СтруктураОтбораРемонтовОборудования, Истина);
			
			Если Не СтрокаРемонтовОборудования = Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'По ремонту объекта ""%1"" в измененном исполнителе не заполнены сотрудник, квалификация или время работы!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРемонтовОборудования.ОбъектРемонта);
				ПутьКДанным = СтрШаблон("Объект.РемонтыОборудования[%1].ОбъектРемонта", СтрокаРемонтовОборудования.НомерСтроки - 1); 
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
			КонецЕсли;
		КонецЕсли;	
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;	
		
		ОбработатьИзменениеСтрокиВНаряде(Строка, "Исполнители", ДокументыКЗаписи);
	КонецЦикла;	
			
	ИзмененныеРемонтныеРаботы = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураОтбора);
	Для Каждого Строка Из ИзмененныеРемонтныеРаботы Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Количество) Тогда
			
			СтруктураОтбораРемонтовОборудования.ID = Строка.РемонтыОборудования_ID; 
			СтрокаРемонтовОборудования = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтыОборудования, СтруктураОтбораРемонтовОборудования, Истина);
			
			Если Не СтрокаРемонтовОборудования = Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'По ремонту объекта ""%1"" для ремонтной работы ""2"" не заполнено количество!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРемонтовОборудования.ОбъектРемонта);
				ПутьКДанным = СтрШаблон("Объект.РемонтыОборудования[%1].ОбъектРемонта", СтрокаРемонтовОборудования.НомерСтроки - 1); 
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
			КонецЕсли;
		КонецЕсли;	
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;	
		
		ОбработатьИзменениеСтрокиВНаряде(Строка, "РемонтныеРаботы", ДокументыКЗаписи);
	КонецЦикла;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ДокументыКЗаписи Цикл
		
		ДокументСсылка = КлючИЗначение.Ключ;
		ДокументОбъект = КлючИЗначение.Значение;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		Попытка 
			ДокументОбъект.Записать(РежимЗаписи);
			
			НоваяСтрока = ДокументыНаряды.Добавить();
			НоваяСтрока.Документ = ДокументСсылка;
			НоваяСтрока.ДатаИзменения = ТекущаяДатаСеанса();
			НоваяСтрока.Событие = НСтр("ru = 'Документ изменен'");
			
		Исключение
				
			ШаблонСообщения = НСтр("ru = 'Не удалось записать наряд ""%1"". Подробнее в журнале регистрации!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументСсылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка записи наряда из рабочего места ""Ресурсное планирование"".'"), 
				УровеньЖурналаРегистрации.Ошибка, ДокументОбъект, ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		КонецПопытки;	
	КонецЦикла;	
		
КонецПроцедуры	

&НаСервере
Процедура ОбработатьИзменениеСтрокиВНаряде(Строка, ИмяТаблицыДокумента, ДокументыКЗаписи) 
	
	ДокументОбъект = ДокументыКЗаписи.Получить(Строка.ДокументИсточник); 
	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = Строка.ДокументИсточник.ПолучитьОбъект();
		
		ДокументыКЗаписи.Вставить(Строка.ДокументИсточник, ДокументОбъект);
	КонецЕсли;
	
	Если Строка.НоваяСтрока Тогда
		
		СтрокаВДокументе = ДокументОбъект[ИмяТаблицыДокумента].Добавить();
		
	Иначе
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("РемонтыОборудования_ID", Строка.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("ID", Строка.ID);
		СтруктураОтбора.Вставить("НомерСтроки", Строка.НомерСтрокиВДокументе);

		СтрокаВДокументе = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(ДокументОбъект[ИмяТаблицыДокумента], СтруктураОтбора, Истина);
	КонецЕсли;
	
	Если СтрокаВДокументе = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Строка.КУдалению Тогда
		// Удалим строку.
		
		ДокументОбъект[ИмяТаблицыДокумента].Удалить(СтрокаВДокументе);
		
		Если ИмяТаблицыДокумента = "РемонтныеРаботы" Тогда
			
			СтруктураОтбора = Новый Структура("РемонтыОборудования_ID, ID");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
 
			ИсполнителиДокументаОтбор = ДокументОбъект.Исполнители.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаИсполнительВДокументе Из ИсполнителиДокументаОтбор Цикл
				ДокументОбъект.Исполнители.Удалить(СтрокаИсполнительВДокументе);	
			КонецЦикла;
			
			Объект[ИмяТаблицыДокумента].Удалить(Строка);
			
		Иначе
			
			Объект.ИсполнителиРабот.Удалить(Строка);
		КонецЕсли;
		
	Иначе // Изменим строку.
		
		ЗаполнитьЗначенияСвойств(СтрокаВДокументе, Строка);
		
		Строка.НомерСтрокиВДокументе = СтрокаВДокументе.НомерСтроки;
		Строка.НоваяСтрока = Ложь;
		Строка.ЕстьИзменения = Ложь;
		Строка.ЕстьНаряд = Истина;
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Процедура СоздатьНаряды(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураОтбораРО = Новый Структура("ЕстьИзменения", Истина);
	СтруктураОтбораРР = Новый Структура("ЕстьИзменения, ЕстьНаряд, РемонтыОборудования_ID", Истина, Ложь);
	СтруктураОтбораИсполнителейРР = Новый Структура("РемонтыОборудования_ID, ID, ДокументИсточник");
	
	РемонтыОборудованияОтбор = Объект.РемонтыОборудования.НайтиСтроки(СтруктураОтбораРО);
	Для каждого СтрокаРО Из РемонтыОборудованияОтбор Цикл
				
		СтруктураОтбораРР.РемонтыОборудования_ID = СтрокаРО.ID;
		
		РемонтныеРаботыОтбор = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураОтбораРР);
		РемонтныеРаботыОтбор = ДополнитьРемонтныеРаботыРодителями(РемонтныеРаботыОтбор);
		Если РемонтныеРаботыОтбор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;			
		
		ДокументСсылка = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПолучитьСсылку();
		
		ДокументОбъект = Документы.торо_НарядНаВыполнениеРемонтныхРабот.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();  
		
		РеквизитыДокументаНачалаЦепочки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаРО.ДокументНачалаЦепочки, "Организация, Подразделение"); 
		
		ДокументОбъект.Организация = РеквизитыДокументаНачалаЦепочки.Организация;
		ДокументОбъект.Подразделение = РеквизитыДокументаНачалаЦепочки.Подразделение;
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокументОбъект.Комментарий = "Документ сформирован из рабочего места ""Ресурсное планирование работ"".";
		
		ДокументыОснования = Новый Массив;
		СтрокиИсполнителейКОбновлению = Новый Массив;
		
		// Ремонтные работы.
		Для Каждого СтрокаРР Из РемонтныеРаботыОтбор Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаРР.Количество) Тогда
				
				ШаблонСообщения = НСтр("ru = 'По ремонту объекта ""%1"" для ремонтной работы ""2"" не заполнено количество!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРО.ОбъектРемонта);
				ПутьКДанным = СтрШаблон("Объект.РемонтыОборудования[%1].ОбъектРемонта", СтрокаРО.НомерСтроки - 1); 
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.РемонтныеРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРР);
			торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НоваяСтрока);
			
			Если ТипЗнч(СтрокаРР.ДокументИсточник) = Тип("ДокументСсылка.торо_ПроектныеЗатратыНаРемонты") 
				ИЛИ Не ЗначениеЗаполнено(СтрокаРР.ДокументИсточник) Тогда
				ДокументИсточник = СтрокаРО.ДокументНачалаЦепочки;
			Иначе
				ДокументИсточник = СтрокаРР.ДокументИсточник;
			КонецЕсли;
			
			Если ДокументыОснования.Найти(ДокументИсточник) = Неопределено Тогда
				ДокументыОснования.Добавить(ДокументИсточник);	
			КонецЕсли;
						
			СтрокаРР.НомерСтрокиВДокументе = НоваяСтрока.НомерСтроки;

			ЗаполнитьЗначенияСвойств(СтруктураОтбораИсполнителейРР, СтрокаРР);
			
			// Исполнители ремонтных работ.
			ИсполнителиРаботОтбор = Объект.ИсполнителиРабот.НайтиСтроки(СтруктураОтбораИсполнителейРР);
			Для Каждого СтрокаИсполнитель Из ИсполнителиРаботОтбор Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаИсполнитель.Сотрудник) 
					ИЛИ Не ЗначениеЗаполнено(СтрокаИсполнитель.Квалификация)
					ИЛИ Не ЗначениеЗаполнено(СтрокаИсполнитель.ВремяРаботы) Тогда
					
					ШаблонСообщения = НСтр("ru = 'По ремонту объекта ""%1"" в исполнителе не заполнены сотрудник, квалификация или время работы!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРО.ОбъектРемонта);
					ПутьКДанным = СтрШаблон("Объект.РемонтыОборудования[%1].ОбъектРемонта", СтрокаРО.НомерСтроки - 1); 
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
				КонецЕсли;	
				
				НоваяСтрока = ДокументОбъект.Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсполнитель);
				
				СтрокиИсполнителейКОбновлению.Добавить(СтрокаИсполнитель);
				
				СтрокаИсполнитель.НомерСтрокиВДокументе = НоваяСтрока.НомерСтроки;
			КонецЦикла;
		КонецЦикла;	
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;	
		
		// Документы основания
		ДокументОснование = Неопределено;
		Для Каждого ДокументОснование Из ДокументыОснования Цикл
			НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ДокументОснование;
		КонецЦикла;
		
		// Ремонты оборудования
		НоваяСтрока = ДокументОбъект.РемонтыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРО);
		НоваяСтрока.ВидРемонтныхРабот = СтрокаРО.ВидРемонта;
		НоваяСтрока.ИДДефекта = СтрокаРО.IDДефекта;
		НоваяСтрока.ДокументИсточник = ДокументОснование;
		
		// Исполнители по ремонтам.
		НоваяСтрока = ДокументОбъект.ИсполнителиПоРемонтам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРО);
		НоваяСтрока.РемонтыОборудования_ID = СтрокаРО.ID;
		
		// Запись документа.
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			НоваяСтрока = ДокументыНаряды.Добавить();
			НоваяСтрока.Документ = ДокументСсылка;
			НоваяСтрока.ДатаИзменения = ТекущаяДатаСеанса();
			НоваяСтрока.Событие = НСтр("ru = 'Создан новый документ'");
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
				
			ШаблонСообщения = НСтр("ru = 'Не удалось записать наряд ""%1"". Подробнее в журнале регистрации!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументСсылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка записи наряда из рабочего места ""Ресурсное планирование"".'"), 
				УровеньЖурналаРегистрации.Ошибка, ДокументОбъект, ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		КонецПопытки;
		
		// Обновляем ремонтные работы и исполнителей в рабочем месте
		Для каждого СтрокаРР Из РемонтныеРаботыОтбор Цикл
			
			СтрокаРР.ЕстьИзменения = Ложь;
			СтрокаРР.НоваяСтрока = Ложь;
			СтрокаРР.ДокументИсточник = ДокументСсылка;
			СтрокаРР.ЕстьНаряд = Истина;
		КонецЦикла; 
		
		Для Каждого СтрокаИсполнитель Из СтрокиИсполнителейКОбновлению Цикл 
			
			СтрокаИсполнитель.ЕстьИзменения = Ложь;
			СтрокаИсполнитель.НоваяСтрока = Ложь;
			СтрокаИсполнитель.ДокументИсточник = ДокументСсылка;
			СтрокаИсполнитель.ЕстьНаряд = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если Не Отказ Тогда
		Для Каждого СтрокаРО Из РемонтыОборудованияОтбор Цикл
			СтрокаРО.ЕстьИзменения = Ложь;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры 

&НаСервере
Функция ДополнитьРемонтныеРаботыРодителями(СтрокиРемонтныхРабот)

	Результат = Новый Массив;
	СтруктураОтбора = Новый Структура("ID, РемонтыОборудования_ID");
	
	Для каждого СтрокаРР Из СтрокиРемонтныхРабот Цикл
		
		ТекущаяРР = СтрокаРР; 
		
		Пока ЗначениеЗаполнено(СтрокаРР.Родитель_ID) Цикл
			
			СтруктураОтбора.ID = СтрокаРР.Родитель_ID;
			СтруктураОтбора.РемонтыОборудования_ID = СтрокаРР.РемонтыОборудования_ID;
			
			СтрокаРР = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокиВКоллекции(Объект.РемонтныеРаботы, СтруктураОтбора, Истина);
			
			Если Результат.Найти(СтрокаРР) = Неопределено Тогда
				Результат.Добавить(СтрокаРР);
			КонецЕсли;
		КонецЦикла;
		
		Результат.Добавить(ТекущаяРР);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции 

#КонецОбласти
