
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СоответствиеСписковДляМультиязычности = Новый Соответствие;
	СоответствиеСписковДляМультиязычности.Вставить("ВидыНоменклатуры", "Справочник.ВидыНоменклатуры");
	торо_МультиязычностьСервер.ПриСозданииНаСервереОбработкаДинамическихСписков(ЭтотОбъект, СоответствиеСписковДляМультиязычности);
	
	ЗапрашиватьКоличество = Истина;

	Если ЭтаФорма.КлючНазначенияИспользования = "ПростойПодборНоменклатуры" Тогда
		
		ЗапрашиватьЦены = Ложь;
		ЗапрашиватьОстаток = Ложь;
		
		Элементы.КорзинаВидЦены.Видимость = Ложь;
		Элементы.КорзинаСумма.Видимость = Ложь;
		Элементы.КорзинаЦена.Видимость = Ложь;
		
		// Может быть указан как конкретный тип номенклатуры для отбора, а может массив типов.
		ПараметрОтбораПоТипу = Неопределено;
		Если Параметры.Свойство("ОтборПоТипуНоменклатуры", ПараметрОтбораПоТипу) И ПараметрОтбораПоТипу <> Неопределено Тогда
			ЭлементОтбора = СписокНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));			
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.ТипНоменклатуры");
			Если ТипЗнч(ПараметрОтбораПоТипу) = Тип("Массив") Тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ПравоеЗначение = ПараметрОтбораПоТипу;
		ИначеЕсли Параметры.свойство("ОтборПоУслугам") Тогда 
			
			ЭлементОтбора = СписокНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));			
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.ТипНоменклатуры");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга;
			
		КонецЕсли;
		
		Если Параметры.Свойство("ЗапрашиватьКоличество") Тогда
			Если  Параметры.ЗапрашиватьКоличество = Ложь Тогда
				ЗапрашиватьКоличество = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтаФорма.КлючНазначенияИспользования = "ПодборСЦенами" Тогда
		
		ЗапрашиватьЦены = Истина;
		ЗапрашиватьОстаток = Истина;
		Валюта = Параметры.Валюта;
		ЗапрашиватьОстаток = Истина;
		
	КонецЕсли; 
	
	Дата = ЭтаФорма.Параметры.Дата;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли; 
	Объект.Склад = ЭтаФорма.Параметры.Склад;
	
	фПеренестиВДокумент = Ложь;
	ВопросПриЗакрытии = Истина;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	Элементы.СписокНоменклатура.ПодчиненныеЭлементы.СписокНоменклатураХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
	СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("Дата", Дата);
	КодФормы = "Обработка_ПодборНоменклатуры_Форма";
		
	ПодборТоваровСервер.УстановитьЗначенияПоНастройкамФормы(ЭтаФорма);
	
	ФОИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Элементы.ИспользоватьСерииНоменклатуры.Видимость = Параметры.ВидимостьСерий И ФОИспользоватьСерииНоменклатуры;
	ВидимостьСерий = Параметры.ВидимостьСерий И ФОИспользоватьСерииНоменклатуры И ИспользоватьСерииНоменклатуры;
	СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьСерииНоменклатуры", ВидимостьСерий);
	Элементы.СписокНоменклатураСерия.Видимость = ВидимостьСерий; 
	Элементы.КорзинаСерия.Видимость = ВидимостьСерий; 

	ПараметрОтбораНоменклатуры = Неопределено;
	Если Параметры.Свойство("ОтборНоменклатуры", ПараметрОтбораНоменклатуры) И ПараметрОтбораНоменклатуры <> Неопределено Тогда
		ЭлементОтбора = СписокНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));			
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ПараметрОтбораНоменклатуры;
		
		ОтборНоменклатуры.ЗагрузитьЗначения(ПараметрОтбораНоменклатуры);		
		Элементы.ОтобразитьВсюНоменклатуру.Видимость = Истина;
	Иначе
		ОтобразитьВсюНоменклатуру = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СкладПриИзменении(Элементы.Склад);
	УстановитьОтборВСпискеНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если фПеренестиВДокумент или Объект.Корзина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВопросПриЗакрытии Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Подобранная номенклатура не перенесена. Перенести?'"), РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		фПеренестиВДокумент = Истина;
	КонецЕсли;

	Если Результат <> КодВозвратаДиалога.Отмена Тогда 
		ВопросПриЗакрытии = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте                     
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		Если фПеренестиВДокумент Тогда
			ЗакрытьСПереносом();
		КонецЕсли;
		СохранитьНастройкиФормыНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	ИспользоватьФильтрыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииИерархияПереключательПриИзменении(Элемент)	
	
	Если ОтборКатегорииИерархияПереключатель Тогда
		ВариантНавигации = "ПоСвойствам";
	Иначе
		ВариантНавигации = "ПоИерархии";
	КонецЕсли;

	ВариантНавигацииПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
	     ИспользоватьОтборПоСкладу = Истина;
	Иначе
	     ИспользоватьОтборПоСкладу = Ложь;
	КонецЕсли; 
	
	СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("Склад", Объект.Склад);
	СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ИспользоватьОтборПоСкладу", ИспользоватьОтборПоСкладу);
	
	текДанные = Элементы.СписокНоменклатура.ТекущиеДанные;
	
	Если текДанные <> Неопределено Тогда
		Если ТекДанные.Свойство("Серия") Тогда 
			ЗаполнитьОстаткиТоваров(Объект.Склад, текДанные.Номенклатура, текДанные.Характеристика, текДанные.Серия);
		Иначе
			ЗаполнитьОстаткиТоваров(Объект.Склад, текДанные.Номенклатура, текДанные.Характеристика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииНоменклатурыПриИзменении(Элемент)
	СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьСерииНоменклатуры", ИспользоватьСерииНоменклатуры);
	Элементы.СписокНоменклатураСерия.Видимость = ИспользоватьСерииНоменклатуры;
	Элементы.КорзинаСерия.Видимость = ИспользоватьСерииНоменклатуры;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	фПеренестиВДокумент = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)
	ТекущиеДанные = Элементы.СписокНоменклатура.ТекущиеДанные;	
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", СтруктураПараметров);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры
&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборВСпискеНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатура

&НаКлиенте
Процедура СписокНоменклатураПриАктивизацииСтроки(Элемент)
	
	текДанные = Элемент.текущиеДанные;
	
	Если текДанные <> Неопределено Тогда
		Если ТекДанные.Свойство("Серия") Тогда 
			ЗаполнитьОстаткиТоваров(Объект.Склад, текДанные.Номенклатура, текДанные.Характеристика, текДанные.Серия);
		Иначе
			ЗаполнитьОстаткиТоваров(Объект.Склад, текДанные.Номенклатура, текДанные.Характеристика);
		КонецЕсли;
	Иначе
		ЗаполнитьОстаткиТоваров(Объект.Склад, Неопределено, Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Не ЗапрашиватьКоличество Тогда
			СписокНоменклатураВыборЗавершение(1,Новый Структура("ТекДанные", ТекДанные));
		Иначе
			ВыбЗнач = 0;
			ПоказатьВводЗначения(Новый ОписаниеОповещения("СписокНоменклатураВыборЗавершение", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), ВыбЗнач, НСтр("ru = 'Введите количество'"), Новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(12,3)));
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураВыборЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	
	Если Значение = Неопределено ИЛИ Значение = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", ТекДанные.Номенклатура, ТекДанные.Характеристика);
	Если ИспользоватьСерииНоменклатуры И ТекДанные.Свойство("Серия") Тогда 
		СтруктураПоиска.Вставить("Серия", ТекДанные.Серия);
	КонецЕсли;
	НайС = Объект.Корзина.НайтиСтроки(СтруктураПоиска);
	Если НайС.Количество() = 0 Тогда
		нс = Объект.Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(нс, ТекДанные);
		нс.КоличествоУпаковок = Значение;
		нс.Склад = Объект.Склад;
	Иначе
		текСтрока = НайС[0];
		текСтрока.КоличествоУпаковок = текСтрока.КоличествоУпаковок + Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсюНоменклатуруПриИзменении(Элемент)
	Если ОтобразитьВсюНоменклатуру Тогда
		УдалитьОтборНоменклатуры();
	Иначе
		УстановитьОтборНоменклатуры();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзина

&НаКлиенте
Процедура КорзинаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.Корзина.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаПриИзменении(Элемент)
	ПросчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоУпаковокПриИзменении(Элемент)
	ПросчитатьСумму();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыНоменклатуры

&НаКлиенте
Процедура ВидыНоменклатурыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
	 	СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		СтандартнаяОбработка = Ложь;
		ВидыНоменклатурыПеретаскиваниеНаСервере(ПараметрыПеретаскивания.Значение, СтандартнаяОбработка, Строка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	ПодборТоваровКлиент.ПриАктивизацииСтрокиСпискаВидыНоменклатуры(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ИспользоватьФильтры = Ложь Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВСпискеНоменклатуры()

	Если Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено ИЛИ ИспользоватьФильтры = Ложь Тогда
		ОтборПоИерархииНоменклатуры = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Иначе
		ОтборПоИерархииНоменклатуры = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоИерархииНоменклатуры) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатура, "Родитель", ОтборПоИерархииНоменклатуры, 
			ВидСравненияКомпоновкиДанных.ВИерархии, "Родитель", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Иначе
	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатура, "Родитель", ОтборПоИерархииНоменклатуры, 
			ВидСравненияКомпоновкиДанных.ВИерархии, "Родитель", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
		
	Попытка
		Элементы.СписокНоменклатура.ТекущаяСтрока = 1;
	Исключение
	КонецПопытки;
	СписокНоменклатураПриАктивизацииСтроки(Элементы.СписокНоменклатура);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьОстаткиТоваров(Склад, Номенклатура, Характеристика = Неопределено, Серия = Неопределено)
	
	ОстаткиТоваров.Очистить();
	МассивОстатков = ПолучитьОстаткиТоваров(Склад, Номенклатура, Характеристика, Серия);
	
	Если МассивОстатков.Количество() = 0 тогда
		нс = ЭтаФорма.ОстаткиТоваров.Добавить();
		нс.Склад = Объект.Склад;
	Иначе
		
      Для каждого СтрокаОстатка из МассивОстатков Цикл
			нс = ЭтаФорма.ОстаткиТоваров.Добавить();
			нс.Склад = СтрокаОстатка.Склад;
			нс.Доступно = СтрокаОстатка.ВНаличииОстаток;
		КонецЦикла;
		
	КонецЕсли;
	
	ВсегоДоступно = ОстаткиТоваров.Итог("Доступно");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОстаткиТоваров(Склад, Номенклатура, Характеристика, Серия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			Номенклатура = &Номенклатура
	               |				И Склад = &Склад
	               |				И Характеристика = &Характеристика
	               |				И Серия = &Серия) КАК ТоварыНаСкладахОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.Склад";
				   
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Склад = &Склад", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Характеристика = &Характеристика", "ИСТИНА");
	КонецЕсли;

	Если ЗначениеЗаполнено(Серия) Тогда
		Запрос.УстановитьПараметр("Серия", Серия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Серия = &Серия", "ИСТИНА");
	КонецЕсли;

	Результат = Запрос.Выполнить();

	Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Результат);
	
КонецФункции

&НаСервере
Функция ПоместитьТзВоВременноеХранилище()
	Номенклатура = Объект.Корзина.Выгрузить();
	АдресНоменклатуруВХранилище = ПоместитьВоВременноеХранилище(Номенклатура, УникальныйИдентификатор);
	Возврат АдресНоменклатуруВХранилище;
КонецФункции

&НаКлиенте 
Процедура ЗакрытьСПереносом()
	Если Объект.Корзина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	АдресНоменклатуруВХранилище = ПоместитьТзВоВременноеХранилище();
	ОповеститьОВыборе(АдресНоменклатуруВХранилище);
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	ПодборТоваровСервер.ПриИзмененииВариантаНавигации(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатурыПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВидаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидыНоменклатурыПеретаскиваниеНаСервере(МассивНоменклатур, СтандартнаяОбработка, ВидНоменклатуры)
	
	ОбновитьСписок = Ложь;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ЭтоГруппа") Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Для Каждого Номенклатура Из МассивНоменклатур Цикл
			НоменклатураОбъект = Номенклатура.ПолучитьОбъект();	
			Если НоменклатураОбъект.ВидНоменклатуры <> ВидНоменклатуры Тогда
				НоменклатураОбъект.ВидНоменклатуры = ВидНоменклатуры;
				НоменклатураОбъект.Записать();
				ОбновитьСписок = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбновитьСписок Тогда
		Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(ЭтаФорма)].Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНоменклатуры()

	ЭлементОтбора = СписокНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));			
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ОтборНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборНоменклатуры()

	Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
	Для каждого ЭлементОтбора Из СписокНоменклатура.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			СписокНоменклатура.Отбор.Элементы.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	ПодборТоваровСервер.СохранитьНастройкиФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПросчитатьСумму()
	ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.КоличествоУпаковок;
КонецПроцедуры

#КонецОбласти