#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДеревоОстановочныхРемонтов();
	ЗаполнитьТаблицуВводаНаОсновании();
	УстановитьВидимостьИТекстЗапросаСвязанныхТаблиц();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ЗаполнитьДеревоОстановочныхРемонтов();
	
	УстановитьПараметрыВыбораДоговора();
	УстановитьПараметрыВыбораБригады();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьДеревоОстановочныхРемонтов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СозданДокументЧерезРМТехСпец" Тогда
    	ТекущиеДанные = Элементы.ОстановочныеРемонты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
		    Возврат;
		КонецЕсли;
		
		МассивID = ПолучитьМассивВыделенныхСтрок();
		
		ОбновитьДанныеСУчетомОтборов();
		ВосстановитьВыделенныеСтроки(МассивID);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстановочныеРемонты(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоПериода;
	Период.ДатаОкончания = ОкончаниеПериода;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ПоказыватьЗавершенныеРемонты", ПоказыватьЗавершенныеРемонты);
	Если ИспользоватьОтборПоПериоду Тогда
	    ПараметрыОтбора.Вставить("ПериодОтчета", Период);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура();
	Если ИспользоватьОтборПоСтатусуРемонта Тогда
	    Отбор.Вставить("СтатусРемонта_Основной", СтатусыРемонта);
		Отбор.Вставить("СтатусРемонта_Зависимый", СтатусыРемонта);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_ОстановочныеРемонты.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявку(Команда)
	ВвестиДокументНаОсновании("торо_ЗаявкаНаРемонт");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаряд(Команда)
	ВвестиДокументНаОсновании("торо_НарядНаВыполнениеРемонтныхРабот");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАкт(Команда)
	ВвестиДокументНаОсновании("торо_АктОВыполненииЭтапаРабот");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьОтборПоПериодуПриИзменении(Элемент)
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗавершенныеРемонтыПриИзменении(Элемент)
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоОрганизацииПриИзменении(Элемент)
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСтатусуРемонтаПриИзменении(Элемент)
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура СтатусыРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("СтатусыРемонта", СтатусыРемонта);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВозвратСпискаСтатусов", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.торо_ВыборСостоянияРемонта", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтатусыРемонтаОчистка(Элемент, СтандартнаяОбработка)
	СтатусыРемонта.Очистить();
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоПодразделениюИсполнителюПриИзменении(Элемент)
	Если ИспользоватьОтборПоПодразделениюИсполнителю Тогда
		ИспользоватьОтборПоКонтрагенту = Ложь;
		ИспользоватьОтборПоДоговору = Ложь;
	КонецЕсли;
	
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИсполнительПриИзменении(Элемент)
	УстановитьПараметрыВыбораБригады();
	
	Если Не ИспользоватьОтборПоПодразделениюИсполнителю Тогда
	    Возврат;
	КонецЕсли;

	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоБригадеПриИзменении(Элемент)
	Если ИспользоватьОтборПоБригаде Тогда
		ИспользоватьОтборПоДоговору = Ложь;
		ИспользоватьОтборПоКонтрагенту = Ложь;
	КонецЕсли;
	
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура БригадаПриИзменении(Элемент)
	Если Не ИспользоватьОтборПоБригаде Тогда
	    Возврат;
	КонецЕсли;

	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоКонтрагентуПриИзменении(Элемент)
	Если ИспользоватьОтборПоКонтрагенту Тогда
		ИспользоватьОтборПоПодразделениюИсполнителю = Ложь;
		ИспользоватьОтборПоБригаде = Ложь;
	КонецЕсли;
	
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	УстановитьПараметрыВыбораДоговора();
	
	Если Не ИспользоватьОтборПоКонтрагенту Тогда
	    Возврат;
	КонецЕсли;

	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоДоговоруПриИзменении(Элемент)
	Если ИспользоватьОтборПоДоговору Тогда
		ИспользоватьОтборПоБригаде = Ложь;	
		ИспользоватьОтборПоПодразделениюИсполнителю = Ложь;	
	КонецЕсли;
	
	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	Если Не ИспользоватьОтборПоДоговору Тогда
	    Возврат;
	КонецЕсли;

	ОбновитьДанныеСУчетомОтборов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОстановочныеРемонты

&НаКлиенте
Процедура ОстановочныеРемонтыПриАктивизацииСтроки(Элемент)
	УстановитьОтборПоРемонтуВСвязанныхТаблицах();
КонецПроцедуры

&НаКлиенте
Процедура ОстановочныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено
		Или Не (Поле.Имя = "ОстановочныеРемонтыДокументНачалаЦепочки"
				Или Поле.Имя = "ОстановочныеРемонтыОстановочныйРемонт"
				Или Поле.Имя = "ОстановочныеРемонтыОбъектРемонта"
				Или Поле.Имя = "ОстановочныеРемонтыВидРемонта"
				Или Поле.Имя = "ОстановочныеРемонтыИсполнитель"
				Или Поле.Имя = "ОстановочныеРемонтыУточнениеИсполнителя"
				Или Поле.Имя = "ОстановочныеРемонтыДокументОснование") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяРеквизита = СтрЗаменить(Поле.Имя, "ОстановочныеРемонты", "");
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные[ИмяРеквизита]) Тогда
	    Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные[ИмяРеквизита]);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаявкиНаРемонт

&НаКлиенте
Процедура ЗаявкиНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьСвязанныйДокумент(Элемент, "торо_ЗаявкаНаРемонт");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНарядыНаРемонт

&НаКлиенте
Процедура НарядыНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьСвязанныйДокумент(Элемент, "торо_НарядНаВыполнениеРемонтныхРабот");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктыПоРемонту

&НаКлиенте
Процедура АктыПоРемонтуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьСвязанныйДокумент(Элемент, "торо_АктОВыполненииЭтапаРабот");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуВводаНаОсновании()
	ВводНаОсновании.Загрузить(торо_ЗаполнениеДокументовПовторноеИспользование.ПолучитьТаблицуВводаНаОсновании());
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВводНаОсновании(ДокументОснование, ДокументВводимый)
	СтруктураПоиска = Новый Структура("ДокументОснование, ДокументВводимый", ДокументОснование, ДокументВводимый);
	МассивСтрок = ВводНаОсновании.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоОстановочныхРемонтов()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор КАК ОстановочныйРемонт,
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDОсновного КАК IDОсновного,
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК IDЗависимого
	               |ПОМЕСТИТЬ ВТ_ОстановочныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних КАК торо_ОстановочныеРемонтыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDЗависимого
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ОстановочныеРемонты.ОстановочныйРемонт КАК ОстановочныйРемонт,
	               |	ВТ_ОстановочныеРемонты.IDЗависимого КАК IDЗависимого,
	               |	ВТ_ОстановочныеРемонты.IDОсновного КАК IDОсновного,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
				   |	торо_СтатусыРемонтов.Статус КАК СтатусРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.Завершен КАК Завершен,
	               |	торо_ОбщиеДанныеПоРемонтам.ЕстьАкт КАК ЕстьАкт,
	               |	торо_ОбщиеДанныеПоРемонтам.Организация КАК Организация,
	               |	ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.Исполнитель, НЕОПРЕДЕЛЕНО) КАК Исполнитель,
	               |	ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя, НЕОПРЕДЕЛЕНО) КАК УточнениеИсполнителя
	               |ПОМЕСТИТЬ ВТ_ДанныеПоОстановочнымРемонтам
	               |ИЗ
	               |	ВТ_ОстановочныеРемонты КАК ВТ_ОстановочныеРемонты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |		ПО ВТ_ОстановочныеРемонты.IDЗависимого = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_ОстановочныеРемонты.IDЗависимого = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
	               |		ПО ВТ_ОстановочныеРемонты.IDЗависимого = торо_ПлановыеИсполнителиРемонтов.IDРемонта
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыРемонтов.СрезПоследних КАК торо_СтатусыРемонтов
				   |        ПО ВТ_ОстановочныеРемонты.IDЗависимого = торо_СтатусыРемонтов.IDРемонта
	               |ГДЕ
	               |	(НЕ &ОтборПоПериоду
	               |			ИЛИ (торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания >= &ДатаНачала
	               |					И торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала <= &ДатаОкончания
	               |				ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)))
	               |	И (&ПоказыватьЗавершенныеРемонты
	               |			ИЛИ НЕ торо_ОбщиеДанныеПоРемонтам.Завершен)
	               |	И (НЕ &ОтборПоОрганизации
	               |			ИЛИ торо_ОбщиеДанныеПоРемонтам.Организация = &Организация)
	               |	И (НЕ &ОтборПоИсполнителю
	               |			ИЛИ ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.Исполнитель, НЕОПРЕДЕЛЕНО) В (&Исполнитель))
	               |	И (НЕ &ОтборПоУточнениюИсполнителя
	               |			ИЛИ ЕСТЬNULL(торо_ПлановыеИсполнителиРемонтов.УточнениеИсполнителя, НЕОПРЕДЕЛЕНО) В (&УточнениеИсполнителя))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDЗависимого,
	               |	ОстановочныйРемонт,
	               |	IDОсновного
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ОстановочныйРемонт КАК ОстановочныйРемонт,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.IDОсновного КАК ID,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ДатаНачала КАК ДатаНачала,
	               |	торо_ОстановочныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ОстановочныеРемонты.ВидРемонта КАК ВидРемонта,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.Завершен КАК Завершен,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ЕстьАкт КАК ЕстьАкт,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.СтатусРемонта КАК СтатусРемонта,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ДатаОкончания КАК ДатаОкончания,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.Исполнитель КАК Исполнитель,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.УточнениеИсполнителя КАК УточнениеИсполнителя,
	               |	торо_ОстановочныеРемонты.ДокументОснование КАК ДокументОснование
	               |ИЗ
	               |	ВТ_ДанныеПоОстановочнымРемонтам КАК ВТ_ДанныеПоОстановочнымРемонтам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ОстановочныеРемонты КАК торо_ОстановочныеРемонты
	               |		ПО ВТ_ДанныеПоОстановочнымРемонтам.IDОсновного = торо_ОстановочныеРемонты.IDОсновногоРемонта
	               |			И ВТ_ДанныеПоОстановочнымРемонтам.ОстановочныйРемонт = торо_ОстановочныеРемонты.Ссылка
	               |ГДЕ
	               |	ВТ_ДанныеПоОстановочнымРемонтам.IDОсновного = ВТ_ДанныеПоОстановочнымРемонтам.IDЗависимого
	               |	И (НЕ &ОтборПоСтатусамРемонта
	               |			ИЛИ ВТ_ДанныеПоОстановочнымРемонтам.СтатусРемонта В (&СтатусыРемонта))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ОстановочныйРемонт КАК ОстановочныйРемонт,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.IDЗависимого КАК ID,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.IDОсновного КАК IDОсновного,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ДатаНачала КАК ДатаНачала,
	               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ВидРемонта КАК ВидРемонта,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.Завершен КАК Завершен,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ЕстьАкт КАК ЕстьАкт,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.СтатусРемонта КАК СтатусРемонта,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ДатаОкончания КАК ДатаОкончания,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.ДокументНачалаЦепочки КАК ДокументНачалаЦепочки,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.Исполнитель КАК Исполнитель,
	               |	ВТ_ДанныеПоОстановочнымРемонтам.УточнениеИсполнителя КАК УточнениеИсполнителя,
	               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ДокументИсточник КАК ДокументОснование
	               |ИЗ
	               |	ВТ_ДанныеПоОстановочнымРемонтам КАК ВТ_ДанныеПоОстановочнымРемонтам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
	               |		ПО ВТ_ДанныеПоОстановочнымРемонтам.IDЗависимого = торо_ОстановочныеРемонтыСвязанныеРемонты.ID
	               |			И ВТ_ДанныеПоОстановочнымРемонтам.ОстановочныйРемонт = торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка
	               |ГДЕ
	               |	(НЕ &ОтборПоСтатусамРемонта
	               |			ИЛИ ВТ_ДанныеПоОстановочнымРемонтам.СтатусРемонта В (&СтатусыРемонта))";
	
	ДобавитьОтборыВЗапросОстановочныхРемонтов(Запрос);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаОсновныхРемонтов = Результат[2].Выбрать();
	ВыборкаЗависимыхРемонтов = Результат[3].Выбрать();
	
	ОстановочныеРемонты.ПолучитьЭлементы().Очистить();
	Пока ВыборкаОсновныхРемонтов.Следующий() Цикл
		ОсновнойРемонт = ОстановочныеРемонты.ПолучитьЭлементы().Добавить();
	    ЗаполнитьЗначенияСвойств(ОсновнойРемонт, ВыборкаОсновныхРемонтов);
		
		СтруктураПоиска = Новый Структура("IDОсновного", ВыборкаОсновныхРемонтов.ID);
		Пока ВыборкаЗависимыхРемонтов.НайтиСледующий(СтруктураПоиска) Цикл
		    ЗаполнитьЗначенияСвойств(ОсновнойРемонт.ПолучитьЭлементы().Добавить(), ВыборкаЗависимыхРемонтов);
		КонецЦикла;
		
		ВыборкаЗависимыхРемонтов.Сбросить();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборыВЗапросОстановочныхРемонтов(Запрос)
	Запрос.УстановитьПараметр("ИспользоватьСметы", ПолучитьФункциональнуюОпцию("торо_ИспользоватьСметыРемонта"));
	Запрос.УстановитьПараметр("ПоказыватьЗавершенныеРемонты", ПоказыватьЗавершенныеРемонты);
	
	Запрос.УстановитьПараметр("ОтборПоПериоду", ИспользоватьОтборПоПериоду);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ИспользоватьОтборПоОрганизации);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ОтборПоСтатусамРемонта", ИспользоватьОтборПоСтатусуРемонта);
	Запрос.УстановитьПараметр("СтатусыРемонта", СтатусыРемонта);
	
	ПустыеИсполнители = Новый Массив();
	ПустыеИсполнители.Добавить(Неопределено);
	ПустыеИсполнители.Добавить(ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	ПустыеИсполнители.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	
	Если ИспользоватьОтборПоПодразделениюИсполнителю Тогда
		Запрос.УстановитьПараметр("ОтборПоИсполнителю", Истина);
		
		Если ЗначениеЗаполнено(ПодразделениеИсполнитель) Тогда
		    Запрос.УстановитьПараметр("Исполнитель", ПодразделениеИсполнитель);
		Иначе
			Запрос.УстановитьПараметр("Исполнитель", ПустыеИсполнители);
		КонецЕсли;
	ИначеЕсли ИспользоватьОтборПоКонтрагенту Тогда
		Запрос.УстановитьПараметр("ОтборПоИсполнителю", Истина);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
		    Запрос.УстановитьПараметр("Исполнитель", Контрагент);
		Иначе
			Запрос.УстановитьПараметр("Исполнитель", ПустыеИсполнители);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ОтборПоИсполнителю", Ложь);
		Запрос.УстановитьПараметр("Исполнитель", Неопределено);
	КонецЕсли;
	
	Если ИспользоватьОтборПоБригаде Тогда
		ПустыеБригады = Новый Массив();
		ПустыеБригады.Добавить(Неопределено);
		ПустыеБригады.Добавить(ПредопределенноеЗначение("Справочник.торо_РемонтныеБригады.ПустаяСсылка"));
		
		Запрос.УстановитьПараметр("ОтборПоУточнениюИсполнителя", Истина);
		
		Если ЗначениеЗаполнено(ПодразделениеИсполнитель) Тогда
		    Запрос.УстановитьПараметр("УточнениеИсполнителя", Бригада);
		Иначе
			Запрос.УстановитьПараметр("УточнениеИсполнителя", ПустыеБригады);
		КонецЕсли;
	ИначеЕсли ИспользоватьОтборПоДоговору Тогда
		ПустыеДоговора = Новый Массив();
		ПустыеДоговора.Добавить(Неопределено);
		ПустыеДоговора.Добавить(ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
		
		Запрос.УстановитьПараметр("ОтборПоУточнениюИсполнителя", Истина);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
		    Запрос.УстановитьПараметр("УточнениеИсполнителя", Договор);
		Иначе
			Запрос.УстановитьПараметр("УточнениеИсполнителя", ПустыеДоговора);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ОтборПоУточнениюИсполнителя", Ложь);
		Запрос.УстановитьПараметр("УточнениеИсполнителя", Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ВозвратСпискаСтатусов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтатусыРемонта.Очистить();
	СтатусыРемонта = РезультатЗакрытия;	
	ОбновитьДанныеСУчетомОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоОстановочныхРемонтов()
	СтрокиДерева = ОстановочныеРемонты.ПолучитьЭлементы();
	Для каждого ТекущаяСтрока Из СтрокиДерева Цикл
		Элементы.ОстановочныеРемонты.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыделенныхСтрок()
	МассивID = Новый Массив();
	
	ВыделенныеСтроки = Элементы.ОстановочныеРемонты.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
	    ТекущаяСтрока = ОстановочныеРемонты.НайтиПоИдентификатору(ВыделеннаяСтрока);
		МассивID.Добавить(ТекущаяСтрока.ID);
	КонецЦикла;
	
	Возврат МассивID;
КонецФункции

&НаКлиенте
Процедура ВосстановитьВыделенныеСтроки(МассивID)
	Для каждого ОсновнойРемонт Из ОстановочныеРемонты.ПолучитьЭлементы() Цикл
	    Если Не МассивID.Найти(ОсновнойРемонт.ID) = Неопределено Тогда
		    Элементы.ОстановочныеРемонты.ВыделенныеСтроки.Добавить(ОсновнойРемонт.ПолучитьИдентификатор());
			Элементы.ОстановочныеРемонты.ТекущаяСтрока = ОсновнойРемонт.ПолучитьИдентификатор();
		КонецЕсли;
		
		Для каждого ЗависимыйРемонт Из ОсновнойРемонт.ПолучитьЭлементы() Цикл
		    Если Не МассивID.Найти(ЗависимыйРемонт.ID) = Неопределено Тогда
			    Элементы.ОстановочныеРемонты.ВыделенныеСтроки.Добавить(ЗависимыйРемонт.ПолучитьИдентификатор());
				Элементы.ОстановочныеРемонты.ТекущаяСтрока = ЗависимыйРемонт.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОстановочныеРемонтыПриАктивизацииСтроки(Элементы.ОстановочныеРемонты);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСУчетомОтборов()
	ЗаполнитьДеревоОстановочныхРемонтов();
	РазвернутьДеревоОстановочныхРемонтов();
	
	Элементы.ЗаявкиНаРемонт.Обновить();
	Элементы.НарядыНаРемонт.Обновить();
	Элементы.АктыПоРемонту.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоРемонтуВСвязанныхТаблицах()
	ВыделенныеСтроки = Элементы.ОстановочныеРемонты.ВыделенныеСтроки;
	ВыделенаОднаСтрока = (ВыделенныеСтроки.Количество() = 1);
	
	ТекущиеID = Неопределено;
	
	Если ВыделенаОднаСтрока Тогда
		ТекущиеДанные = Элементы.ОстановочныеРемонты.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено Тогда
			ТекущиеID = ТекущиеДанные.ID;
		КонецЕсли;
	Иначе
		ТекущиеID = Новый СписокЗначений();
		
		Для каждого НомерТекущейСтроки Из ВыделенныеСтроки Цикл
			Строка = Элементы.ОстановочныеРемонты.ДанныеСтроки(НомерТекущейСтроки);
			Если Не Строка = Неопределено Тогда
				ТекущиеID.Добавить(Строка.ID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборВСписке(ЗаявкиНаРемонт, ТекущиеID, ВыделенаОднаСтрока);
	УстановитьОтборВСписке(НарядыНаРемонт, ТекущиеID, ВыделенаОднаСтрока);
	УстановитьОтборВСписке(АктыПоРемонту,   ТекущиеID, ВыделенаОднаСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВСписке(Список, ТекущиеID, ВыделенаОднаСтрока = Истина)
	Если ВыделенаОднаСтрока Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ID", ТекущиеID, ВидСравненияОтбора,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязанныйДокумент(Элемент, ТипДокумента)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Документ);
	ОткрытьФорму("Документ." + ТипДокумента + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокументНаОсновании(ТипВводимогоДокумента)
	ВыделенныеСтроки = Элементы.ОстановочныеРемонты.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
	    ТекстСообщения = НСтр("ru = 'Не выбран ни один ремонт! Ввод документа невозможен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КоличествоЗаявокНаОснованииЗаявки = 0;
	КоличествоЗавершенных = 0;
	СоответствиеИДДокументам = Новый Соответствие();
	СоответствиеРемонтовИОснований = Новый Соответствие();
	МассивДанныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
	    ТекущаяСтрока = ОстановочныеРемонты.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ТипДокументаОснования = ?(ТипЗнч(ТекущаяСтрока.ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта"), "торо_ПланГрафикРемонта", "торо_ЗаявкаНаРемонт");
		
		// Ввод заявки на основании заявки - некорректно. Обрабатываем эту ситуацию
		Если ТипВводимогоДокумента = ТипДокументаОснования Тогда
			ТекстСообщения = НСтр("ru='Нельзя ввести заявку на ремонт на основании заявки.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КоличествоЗаявокНаОснованииЗаявки = КоличествоЗаявокНаОснованииЗаявки + 1;
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрока.Завершен Тогда
			КоличествоЗавершенных = КоличествоЗавершенных + 1;
		КонецЕсли;
		
		ПроверкаВводаПройдена =  ПроверитьВводНаОсновании(ТипДокументаОснования, ТипВводимогоДокумента);
		Если Не ПроверкаВводаПройдена Тогда
		    Продолжить;
		КонецЕсли;
		
		СоответствиеИДДокументам.Вставить(ТекущаяСтрока.ID, ТекущаяСтрока.ДокументОснование);
		ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, ТекущаяСтрока.ID, ТекущаяСтрока.ДокументОснование);
		Структура = Новый Структура("ОбъектРемонта, ВидРемонта, ПланируемаяДатаНачалаРемонта, ID_Ремонта, Документ, ТипДокумента"
				, ТекущаяСтрока.ОбъектРемонта
				, ТекущаяСтрока.ВидРемонта
				, ТекущаяСтрока.ДатаНачала
				, ТекущаяСтрока.ID
				, ТекущаяСтрока.ДокументОснование
				, ТипДокументаОснования);
		МассивДанныхСтрок.Добавить(Структура);
	КонецЦикла;
	
	Если КоличествоЗавершенных > 0 И ВыделенныеСтроки.Количество() > 1 Тогда
	    ТекстСообщения = НСтр("ru='В списке выбранных ремонтов есть завершенные. По ним нельзя ввести документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли КоличествоЗавершенных > 0 И ВыделенныеСтроки.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru='Выбранный ремонт завершен. По нему нельзя ввести документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если КоличествоЗаявокНаОснованииЗаявки = ВыделенныеСтроки.Количество()
		Или КоличествоЗавершенных = ВыделенныеСтроки.Количество() Тогда
	    Возврат;
	КонецЕсли;
	
	Если ПроверитьВводНаОсновании("торо_ЗаявкаНаРемонт", ТипВводимогоДокумента) И Элементы.ЗаявкиНаРемонт.Видимость Тогда
		ТаблицаЗаявок = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "ЗаявкиНаРемонт", Истина);
		Для Каждого Строка Из ТаблицаЗаявок Цикл
			ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, Строка.ID, Строка.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если ПроверитьВводНаОсновании("торо_НарядНаВыполнениеРемонтныхРабот", ТипВводимогоДокумента) И Элементы.НарядыНаРемонт.Видимость Тогда
		ТаблицаНарядов = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "НарядыНаРемонт", Истина);
		Для каждого Строка Из ТаблицаНарядов Цикл
			ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, Строка.ID, Строка.Документ);
		КонецЦикла;
	КонецЕсли;

	// Проверим, нужно ли открывать форму выбора основания.
	ОткрыватьФормуВыбораОснования = Ложь;
	Для Каждого КлючИЗначение из СоответствиеРемонтовИОснований Цикл
		Если КлючИЗначение.Значение.Количество() > 1 Тогда
			ОткрыватьФормуВыбораОснования = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ОткрыватьФормуВыбораОснования Тогда 
		Оповещение = Новый ОписаниеОповещения("ВыборОснованийДляДокумента", ЭтаФорма, Новый Структура("СоздаваемыйДокумент", ТипВводимогоДокумента));
		СтруктураДанныхДляВыбораОснований = Новый Структура;
		СтруктураДанныхДляВыбораОснований.Вставить("СоответствиеРемонтовИОснований" , СоответствиеРемонтовИОснований);
		СтруктураДанныхДляВыбораОснований.Вставить("МассивВыделенныхСтрок" , МассивДанныхСтрок);
		ОткрытьФорму("Обработка.торо_РабочееМестоТехническогоСпециалиста.Форма.ФормаВыбораОснования", СтруктураДанныхДляВыбораОснований,
			ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПараметрыФормы = Новый Структура("Основание", СоответствиеИДДокументам);
		ДополнительныеПараметры = Новый Структура("ИмяСобытия, Источник", "СозданДокументНаОснованииОстановочногоРемонта", Тип("ДокументСсылка." + ТипВводимогоДокумента));
		ОткрытьФорму("Документ." + ТипВводимогоДокумента + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСвязанныеДокументыПОID(МассивВыделенныхСтрок, ИмяТЧ, ВыгружатьВМассив = Ложь)
	
	ТаблицаВыделенныхСтрок = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов,,Новый КвалификаторыСтроки(36));
	
	ТаблицаВыделенныхСтрок.Колонки.Добавить("ID_Ремонта", ОписаниеТипов);
	
	Для Каждого Строка Из МассивВыделенныхСтрок Цикл
		НС = ТаблицаВыделенныхСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка);
	КонецЦикла;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СписокID.ID_Ремонта КАК ID_Ремонта
	               |ПОМЕСТИТЬ ID_Ремонтов
	               |ИЗ
	               |	&СписокID КАК СписокID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID_Ремонта
				   |;";

	Если ИмяТЧ = "ЗаявкиНаРемонт" Тогда
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК Документ,
		|	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК ID,
		|	""торо_ЗаявкаНаРемонт"" КАК ТипДокумента
		|ИЗ
		|	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
		|			,
		|			IDРемонта В
		|				(ВЫБРАТЬ
		|					ID_Ремонтов.ID_Ремонта
		|				ИЗ
		|					ID_Ремонтов КАК ID_Ремонтов)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
		|ГДЕ
		|	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен";
		
	ИначеЕсли ИмяТЧ = "НарядыНаРемонт" Тогда
		Запрос.Текст = Запрос.Текст + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НарядыПоРемонтам.Регистратор        КАК Документ,
		|	торо_НарядыПоРемонтам.IDРемонта          КАК ID,
		|	""торо_НарядНаВыполнениеРемонтныхРабот"" КАК ТипДокумента
		|ИЗ
		|	ID_Ремонтов КАК ID_Ремонтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НарядыПоРемонтам КАК торо_НарядыПоРемонтам
		|		ПО ID_Ремонтов.ID_Ремонта = торо_НарядыПоРемонтам.IDРемонта";
				
	КонецЕсли; 	
	
	Запрос.УстановитьПараметр("СписокID", ТаблицаВыделенныхСтрок);
	
	РезультаЗапроса = Запрос.Выполнить();
	
	Если Не РезультаЗапроса.Пустой() Тогда
		Если ВыгружатьВМассив Тогда
			Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультаЗапроса);
		Иначе
			ТабРезультата = Запрос.Выполнить().Выгрузить();
			Возврат ПоместитьВоВременноеХранилище(ТабРезультата, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ВыгружатьВМассив Тогда
			Возврат Новый Массив;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВыборОснованийДляДокумента(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено 
		И ДопПараметры.Свойство("СоздаваемыйДокумент") Тогда
		
		СоответствиеИДДокументам = Новый Соответствие;
		Для Каждого Элемент Из Результат Цикл
			СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
		КонецЦикла; 
		
		Если ДопПараметры.СоздаваемыйДокумент = "торо_АктОВыполненииЭтапаРабот" Тогда
			СоздатьДокументИОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаОбъекта", СоответствиеИДДокументам);
		ИначеЕсли ДопПараметры.СоздаваемыйДокумент = "торо_НарядНаВыполнениеРемонтныхРабот" Тогда 
			СоздатьДокументИОткрытьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаОбъекта", СоответствиеИДДокументам);
		ИначеЕсли ДопПараметры.СоздаваемыйДокумент = "торо_ЗаявкаНаРемонт" Тогда 
			СоздатьДокументИОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаОбъекта", СоответствиеИДДокументам);	
		КонецЕсли; 

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументИОткрытьФорму(ИмяФормы, СоответствиеИДДокументам, ОписаниеОповещения = Неопределено)
	ОткрытьФорму(ИмяФормы, Новый Структура("Основание", СоответствиеИДДокументам), ЭтаФорма,,,, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИТекстЗапросаСвязанныхТаблиц()
	ФОИспользоватьСметы = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСметыРемонта");
	ФОИспользоватьНаряды = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаВыполнениеРабот");
	
	Если Не ФОИспользоватьСметы Тогда
		Элементы.ЗаявкиНаРемонт.Видимость = Ложь;
	Иначе
		УстановитьТекстЗапросаДинамическогоСписка_ЗаявкиНаРемонт();
	КонецЕсли;
	
	Если Не ФОИспользоватьНаряды Тогда
		Элементы.НарядыНаРемонт.Видимость = Ложь;
	Иначе
		УстановитьТекстЗапросаДинамическогоСписка_НарядыНаРемонт();
	КонецЕсли;
	
	УстановитьТекстЗапросаДинамическогоСписка_АктыПоРемонту();
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаДинамическогоСписка_ЗаявкиНаРемонт()
	ЗаявкиНаРемонт.ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	                              |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Документ,
	                              |	ВЫБОР
	                              |		КОГДА торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен
	                              |			ТОГДА 1
	                              |		КОГДА торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.ПометкаУдаления
	                              |			ТОГДА 3
	                              |		ИНАЧЕ 0
	                              |	КОНЕЦ КАК Картинка
	                              |ИЗ
	                              |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, ) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	                              |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка
	                              |			И торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта
	                              |ГДЕ
	                              |	(торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта ЕСТЬ NULL
	                              |			ИЛИ НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен)";
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаДинамическогоСписка_НарядыНаРемонт()
	НарядыНаРемонт.ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID КАК ID,
	                              |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка КАК Документ,
	                              |	ВЫБОР
	                              |		КОГДА торо_НарядНаВыполнениеРемонтныхРабот.Проведен
	                              |			ТОГДА 1
	                              |		КОГДА торо_НарядНаВыполнениеРемонтныхРабот.ПометкаУдаления
	                              |			ТОГДА 3
	                              |		ИНАЧЕ 0
	                              |	КОНЕЦ КАК Картинка
	                              |ИЗ
	                              |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
	                              |		ПО торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка = торо_НарядНаВыполнениеРемонтныхРабот.Ссылка
								  //|ГДЕ
								  //|	торо_НарядНаВыполнениеРемонтныхРабот.Проведен
								  //|	И НЕ торо_НарядНаВыполнениеРемонтныхРабот.ПометкаУдаления
								  |";
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаДинамическогоСписка_АктыПоРемонту()
	АктыПоРемонту.ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                             |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
	                             |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК Документ,
	                             |	ВЫБОР
	                             |		КОГДА торо_АктОВыполненииЭтапаРабот.Проведен
	                             |			ТОГДА 1
	                             |		КОГДА торо_АктОВыполненииЭтапаРабот.ПометкаУдаления
	                             |			ТОГДА 3
	                             |		ИНАЧЕ 0
	                             |	КОНЕЦ КАК Картинка
	                             |ИЗ
	                             |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	                             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	                             |		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = торо_АктОВыполненииЭтапаРабот.Ссылка
								 //|ГДЕ
								 //|	торо_АктОВыполненииЭтапаРабот.Проведен
								 //|	И НЕ торо_АктОВыполненииЭтапаРабот.ПометкаУдаления
								 |";
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	МассивСвязей = Новый Массив();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ЗначениеЗаполнено(Договор) И Не Договор.Контрагент = Контрагент Тогда
	 		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент", РежимИзмененияСвязанногоЗначения.НеИзменять);
		МассивСвязей.Добавить(НоваяСвязь);
	КонецЕсли;
	
	Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБригады()
	МассивСвязей = Новый Массив();
	
	Если ЗначениеЗаполнено(ПодразделениеИсполнитель) Тогда
		Если ЗначениеЗаполнено(Бригада) И Не Бригада.Подразделение = ПодразделениеИсполнитель Тогда
			Бригада = Справочники.торо_РемонтныеБригады.ПустаяСсылка();
		КонецЕсли;
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Подразделение", "ПодразделениеИсполнитель", РежимИзмененияСвязанногоЗначения.НеИзменять);
		МассивСвязей.Добавить(НоваяСвязь);
	КонецЕсли;
	
	Элементы.Бригада.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
КонецПроцедуры

&НаКлиентеНасервереБезКонтекста
Процедура ВставитьЗначениеВСписокВСоответствии(Соответствие, Ключ, Значение)
	
	ТекущееЗначение = Соответствие[Ключ];
	Если ТекущееЗначение = Неопределено Тогда
		ТекущееЗначение = Новый Массив;
	КонецЕсли;
	
	Если ТекущееЗначение.Найти(Значение) = Неопределено Тогда
		ТекущееЗначение.Добавить(Значение);
	КонецЕсли;
	
	Соответствие.Вставить(Ключ, ТекущееЗначение);	
	
КонецПроцедуры

#КонецОбласти