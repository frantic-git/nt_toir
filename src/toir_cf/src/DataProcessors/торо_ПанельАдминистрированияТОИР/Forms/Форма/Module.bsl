////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем СоответствиеРеквизитов;

&НаКлиенте
Перем ИзмененыЗначенияФО;

&НаКлиенте
Перем ПроверятьАктивныхПользователей;

&НаСервере
Перем СоответствиеРеквизитов;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьДоступностьЭлеменовПоСериямСЛК();
	
	ИерархияДляНовыхОР = НаборКонстант.торо_ИерархияДляВводаНовыхОР;
	
	ЗаполнитьСписокВидовДокументов();
	
	ЗаполнитьТЗДокументовДляСогласования("СогласованиеДокументовРемонтов", Ложь, Ложь);
	ЗаполнитьТЗДокументовДляСогласования("СогласованиеДокументовМероприятий", Истина, Ложь);// регламентный
	ЗаполнитьТЗДокументовДляСогласования("СогласованиеДокументовМТО", Ложь, Истина);// МТО
	ЗаполнитьТЗСпособовСогласования();
	ЗаполнитьТЗНастройкиУведомлений();
	
	мМодифицированностьДокументыСогласованияРемонтов    = Ложь;
	мМодифицированностьДокументыСогласованияМероприятий = Ложь;
	мМодифицированностьДокументыСогласованияМТО = Ложь;
	мМодифицированностьСпособовСогласованияПоУмолчанию  = Ложь;
	
	// ЖЦ++
	Выборка = РегистрыСведений.торо_НастройкиДоступностиОбъектовРемонта.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НС = ТаблицаНастроекЖЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
	КонецЦикла;
	
	ТаблицаНастроекЖЦ.Сортировать("НомерСтрокиТаб");	
	
	Если Не ТаблицаНастроекЖЦ.Количество() > 0 Тогда
		ЗаполнитьПоУмолчанию();
	КонецЕсли; 
	// ЖЦ--
	
	ФОИспользоватьРегламентныеМероприятия = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	ФОИспользоватьСогласование            = НаборКонстант.торо_ИспользоватьСогласование;
	ФОИспользоватьДокументыПринятияИСписанияОборудования = НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования;
	ФОИспользоватьУведомленияОСобытияхСистемы            = НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы;
	
	МассивОР = Новый Массив;
	ВРегистреНетЗаписейПоСтатусам(МассивОР);
	
	Если МассивОР.Количество() = 0 ИЛИ НЕ ФОИспользоватьДокументыПринятияИСписанияОборудования Тогда
		Элементы.ПринятиеОРКУчету.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СтраницаСогласование.Видимость = ФОИспользоватьСогласование;
	Элементы.СтраницаМероприятия.Видимость  = ФОИспользоватьРегламентныеМероприятия;
	Элементы.СтраницаЖизненныйЦикл.Видимость = ФОИспользоватьДокументыПринятияИСписанияОборудования;
	Элементы.СтраницаНапоминанияИУведомления.Видимость = НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы;
	
	Элементы.торо_ПараметрыОповещенияОПроверкеОборудованияНаФМ.Видимость = НаборКонстант.торо_ИспользоватьФункциональныеМеста;
	Элементы.торо_ПараметрыОповещенияОПроверкеТребованийФМПоДокументам.Видимость = НаборКонстант.торо_ИспользоватьФункциональныеМеста;
	
	ЗаполнитьФлажкиИзРегистра();
	
	ВыбранПреодопределенныйСценарий = НаборКонстант.торо_ВыбранныйСценарийРаботы.Предопределенный;
	
	ЗаполнитьСоответствие(СоответствиеРеквизитов);
	
	// регламентные задания
	
	торо_РасчетППРРасписание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.торо_РасчетППР).Расписание;
	торо_ФормированиеПочтовыхУведомленийРасписание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.торо_ФормированиеПочтовыхУведомлений).Расписание;
	
	ЗаполнитьПараметрыПредставленияДанных();
	
	СпособНастройкиБизнесПроцессов = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.торо_ПанельАдминистрированияТОиР", "СпособНастройкиБизнесПроцессов", "НастройкаЧерезГрафСхемы");
	
	// Если форма вызывается из Обработки "Помощник настройки программы" тогда должна быть видна только нужная страница.
	Ключ = Параметры.КлючНазначенияИспользования;
	Если ЛЕВ(Ключ, 8) = "Помощник" Тогда
		
		Для каждого Стр Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
			Если Стр <> Элементы.СтраницыНастроек.ПодчиненныеЭлементы[СРЕД(Ключ, 9, СтрДлина(Ключ))] Тогда
				Стр.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементов();
	
	#Если ВебКлиент Тогда
	ИзменитьРасположениеЗакладокДляВебКлиента();
	#КонецЕсли
	
	АктИспользуется = ИспользуетсяЛиАкт();
	СпособНастройкиБизнесПроцессовПриИзменении(Элементы.СпособНастройкиБизнесПроцессов);

	ВидимостьЭлементовНастройкиСпособовРезервирования();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОБРАБОТКА_ВЫБОРА_СЦЕНАРИЯ" Тогда
		СтароеЗначениеИспользованияПредставлений = НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления;
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("Ссылка") Тогда
				НаборКонстант.торо_ВыбранныйСценарийРаботы = Параметр.Ссылка;
				НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Ложь;
			Иначе
				НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
			КонецЕсли;
			
			// заполнение функциональных опций
			Если Параметр.Свойство("МассивСтруктурЗначенийКонстант") Тогда
				МассивСтруктурЗначенийКонстант = Параметр.МассивСтруктурЗначенийКонстант;	
				
				Для Каждого ЭлементМассива ИЗ МассивСтруктурЗначенийКонстант Цикл
					Если НаборКонстант.Свойство(ЭлементМассива.Ключ) Тогда
						НаборКонстант[ЭлементМассива.Ключ] = ЭлементМассива.Значение;
					КонецЕсли;	
				КонецЦикла;
				
			КонецЕсли;
			
			// заполнение вводов на основании
			Если Параметр.Свойство("СоответствиеВводНаОсновании") Тогда
				СоответствиеВводНаОсновании    = Параметр.СоответствиеВводНаОсновании;
				Для каждого ЭлементСоответствия Из СоответствиеВводНаОсновании Цикл
					ИмяРеквизита = СоответствиеРеквизитов.Получить(ЭлементСоответствия.Ключ);
					Если Не ИмяРеквизита = Неопределено Тогда
						ЭтаФорма[ИмяРеквизита] = ЭлементСоответствия.Значение;
					КонецЕсли; 
					
				КонецЦикла; 		
			КонецЕсли;
		КонецЕсли;
		ЭтаФорма.Модифицированность = Истина;
		Если СпособНастройкиБизнесПроцессов = "НастройкаЧерезГрафСхемы" Тогда
			УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаДополнительно);
			УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
			УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаМероприятия);
			УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
			
			УстановитьВидимостьГрафическихСхемВводаНаОсновании();
		ИначеЕсли СпособНастройкиБизнесПроцессов = "НастройкаФлагами" Тогда
			УстановитьВидимостьФлаговВводаНаОсновании();
		КонецЕсли;
		УстановитьДоступностьЭлементов();
		
		НеобходимПерезапуск = ?(СтароеЗначениеИспользованияПредставлений = НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления, НеобходимПерезапуск, Истина);
	КонецЕсли; 
	
	Если ИмяСобытия = "ЗакрытиеФормыСпискаКритичности" Тогда
		ВидимостьЭлементовНастройкиСпособовРезервирования();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НаборКонстант.торо_РасширенныйРежимМТО И Не ЗначениеЗаполнено(НаборКонстант.торо_ДатаПереходаМТО) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'При включенном расширенном режиме МТО дата перехода должна быть заполнена'"),,"НаборКонстант.торо_ДатаПереходаМТО",,);
	КонецЕсли; 
	
	Если НеобходимПерезапуск Тогда
		
		Если ПроверятьАктивныхПользователей И ИзмененыЗначенияФО И ПроверитьНаличиеАктивныхПользователей() Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для сохранения настроек необходимо завершение сеансов всех пользователей!
				|Дождитесь пока все пользователи завершат работу с программой или завершите их сеансы с помощью специальной обработки.'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("АктивныеПользователи", НСтр("ru = 'Активные пользователи'"));
			Кнопки.Добавить("Отмена",НСтр("ru = 'Отмена'"));
			ПоказатьВопрос(Новый  ОписаниеОповещения("ЗавершениеПроверкиПередЗаписью",ЭтаФорма), ТекстСообщения, Кнопки);
		ИначеЕсли НЕ Перезапуск Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для сохранения настроек необходим перезапуск программы!'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Продолжить",НСтр("ru = 'Продолжить'"));
			Кнопки.Добавить("Отмена",НСтр("ru = 'Отмена'"));
			ПоказатьВопрос(Новый  ОписаниеОповещения("ЗавершениеПроверкиПередЗаписью",ЭтаФорма), ТекстСообщения, Кнопки);
		КонецЕсли;
		
	ИначеЕсли ПроверятьАктивныхПользователей И ИзмененыЗначенияФО И ПроверитьНаличиеАктивныхПользователей() Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'При изменении настроек функциональных опций могут возникать ошибки в работе других пользователей.
			|Рекомендуется завершить их работу перед сохранением.'");	
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("АктивныеПользователи", НСтр("ru = 'Активные пользователи'"));
			Кнопки.Добавить("Продолжить",НСтр("ru = 'Продолжить'"));
			Кнопки.Добавить("Отмена",НСтр("ru = 'Отмена'"));
			ПоказатьВопрос(Новый  ОписаниеОповещения("ЗавершениеПроверкиПередЗаписью",ЭтаФорма), ТекстСообщения, Кнопки);
	КонецЕсли;
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("ВидДокумента, СобытиеПоДокументу, Событие");
	ШаблонСообщения = НСтр("ru='Дублирующаяся настройка напоминаний и уведомлений: ""%1"", ""%2"",""%3"".'");
	Для каждого СтрокаНастройкиУведомлений из НастройкаУведомлений Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНастройкиУведомлений);
		НайденныеСтроки = НастройкаУведомлений.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаНастройкиУведомлений.ВидДокументаПредставление, СтрокаНастройкиУведомлений.Событие, СтрокаНастройкиУведомлений.СобытиеПоДокументу);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"НастройкаУведомлений["+Индекс+"].ВидДокументаПредставление",,Отказ);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	УстановленРасширенныйРежимМТО = ТекущийОбъект.торо_РасширенныйРежимМТО И Не Константы.торо_РасширенныйРежимМТО.Получить(); 
	ИзмененаДатаПереходаМТО = ТекущийОбъект.торо_РасширенныйРежимМТО И Не ТекущийОбъект.торо_ДатаПереходаМТО = Константы.торо_ДатаПереходаМТО.Получить();

	ОбработатьУстановкуРасширенногоРежимаМТО = УстановленРасширенныйРежимМТО ИЛИ ИзмененаДатаПереходаМТО;		

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Использование = Константы.торо_ИспользоватьППРИОтменуРемонтов.СоздатьМенеджерЗначения();
	Использование.Прочитать();
	Использование.Значение = Константы.торо_ИспользоватьППР.Получить() И Константы.торо_ИспользоватьВозможностьОтменыРемонтов.Получить();
	Использование.Записать();
	
	Если мМодифицированностьДокументыСогласованияРемонтов Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ВидыДокументовСогласования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регламентный.Установить(Ложь);
		НаборЗаписей.Отбор.МТО.Установить(Ложь);
		
		Для каждого Строка Из СогласованиеДокументовРемонтов Цикл
			
			Если Строка.ИспользоватьСогласование Тогда
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ВидДокумента = Строка.ВидДокументаСогласования;
				ЗаписьНабора.Регламентный = Ложь;
				ЗаписьНабора.МТО = Ложь;
			КонецЕсли; 
			
		КонецЦикла; 
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Если мМодифицированностьДокументыСогласованияМероприятий Тогда

		НаборЗаписей = РегистрыСведений.торо_ВидыДокументовСогласования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регламентный.Установить(Истина);
		НаборЗаписей.Отбор.МТО.Установить(Ложь);
		
		Для каждого Строка Из СогласованиеДокументовМероприятий Цикл
			
			Если Строка.ИспользоватьСогласование Тогда
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ВидДокумента = Строка.ВидДокументаСогласования;
				ЗаписьНабора.Регламентный = Истина;
				ЗаписьНабора.МТО = Ложь;
			КонецЕсли; 
			
		КонецЦикла; 
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Если мМодифицированностьДокументыСогласованияМТО Тогда
		НаборЗаписей = РегистрыСведений.торо_ВидыДокументовСогласования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регламентный.Установить(Ложь);
		НаборЗаписей.Отбор.МТО.Установить(Истина);

		Для каждого Строка Из СогласованиеДокументовМТО Цикл
			Если Строка.ИспользоватьСогласование Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ВидДокумента = Строка.ВидДокументаСогласования;
				ЗаписьНабора.Регламентный = Ложь;
				ЗаписьНабора.МТО = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если мМодифицированностьСпособовСогласованияПоУмолчанию Тогда
		
		НаборЗаписей = РегистрыСведений.торо_НастройкиСогласованияДокументовТОиР.СоздатьНаборЗаписей();
		ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей, СпособыСогласованияПоУмолчанию);
		
	КонецЕсли;
	
	Если мМодифицированностьНастройкиУведомлений Тогда
		
		НаборЗаписей = РегистрыСведений.торо_НастройкиУведомлений.СоздатьНаборЗаписей();
		ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей, НастройкаУведомлений);
		
	КонецЕсли;
	
	Если мМодифицированностьВводаНаОсновании Тогда
		
		ТаблицаДляВводаНаОсновании = Новый ТаблицаЗначений;
		
		ТаблицаДляВводаНаОсновании.Колонки.Добавить("ДокументОснование");
		ТаблицаДляВводаНаОсновании.Колонки.Добавить("ДокументВводимый");
		ТаблицаДляВводаНаОсновании.Колонки.Добавить("Значение");
		
		Для каждого Элемент Из СоответствиеРеквизитов Цикл
			
			НомерСимволаРазделения = Найти(Элемент.Ключ,"_торо");
			
			НС = ТаблицаДляВводаНаОсновании.Добавить();
			
			НС.ДокументОснование = Лев(Элемент.Ключ, НомерСимволаРазделения - 1);
			НС.ДокументВводимый  = Сред(Элемент.Ключ, НомерСимволаРазделения + 1);
			НС.Значение          = ЭтаФорма[Элемент.Значение];
			 
		КонецЦикла; 
		
		НаборЗаписей = РегистрыСведений.торо_ВводНаОсновании.СоздатьНаборЗаписей();
		ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей,ТаблицаДляВводаНаОсновании);
		мМодифицированностьВводаНаОснованииДляЗаписиИзменений = Ложь;
		мМодифицированностьВводаНаОсновании                   = Ложь;
	КонецЕсли;
	
	Если мМодифицированностьПараметровПредставленияДанных Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ПараметрыПользовательскогоПредставленияОбъектов.СоздатьНаборЗаписей();
		ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей,ТаблицаПредставлений);
		мМодифицированностьПараметровПредставленияДанных = Ложь;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.торо_НастройкиДоступностиОбъектовРемонта.СоздатьНаборЗаписей();
	
	КлючевыеПоля = Новый Структура("СтатусОРВУчете", "Статус ОР в учете");
	ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей, ТаблицаНастроекЖЦ.Выгрузить(), КлючевыеПоля, Отказ);
	
	мМодифицированностьФО = Ложь;
	мМодифицированностьФО_УправлениеПерсоналом = Ложь;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	УстановитьДоступностьЭлеменовПоСериямСЛК();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИерархияДляНовыхОР <> НаборКонстант.торо_ИерархияДляВводаНовыхОР Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_СтруктурыОР.Ссылка
		|ИЗ
		|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
		|ГДЕ
		|	торо_СтруктурыОР.РазрешенВводНовыхОР = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбъектИерархия = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектИерархия.РазрешенВводНовыхОР = ЛОЖЬ;
			ОбъектИерархия.Записать();
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НаборКонстант.торо_ИерархияДляВводаНовыхОР) Тогда
			Иерархия = НаборКонстант.торо_ИерархияДляВводаНовыхОР.ПолучитьОбъект();
			Иерархия.РазрешенВводНовыхОР = Истина;
			Иерархия.Записать();
		КонецЕсли;
		
		ИерархияДляНовыхОР = НаборКонстант.торо_ИерархияДляВводаНовыхОР;
		
	КонецЕсли;
	
	Если НаборКонстант.торо_ИспользоватьИнтеграциюСАИСДиспетчер Тогда
	    Узел = торо_ИнтеграцияСАИСДиспетчер.ПолучитьУзелПланаОбмена();
		Если Не ЗначениеЗаполнено(Узел) Тогда
		    Узел = торо_ИнтеграцияСАИСДиспетчер.СоздатьУзелПланаОбменаСоздан();
		КонецЕсли;
		
		Узел = Узел.ПолучитьОбъект();
		Узел.ЗагружатьВыявленныеДефекты = ?(НаборКонстант.торо_УчетВыявленныхДефектовОборудования, Узел.ЗагружатьВыявленныеДефекты, Ложь);
		Узел.ЗагружатьКонтролируемыеПоказателиОР = ?(НаборКонстант.торо_УчетКонтролируемыхПоказателей, Узел.ЗагружатьКонтролируемыеПоказателиОР, Ложь);
		Узел.ЗагружатьНаработкуОР = ?(НаборКонстант.торо_УчетНаработкиОборудования, Узел.ЗагружатьНаработкуОР, Ложь);
		Узел.ЗагружатьСостоянияОР = ?(НаборКонстант.торо_УчетСостоянияОборудования, Узел.ЗагружатьСостоянияОР, Ложь);
		Узел.Записать();
	КонецЕсли;
	
	Если МодифицированностьФО_ИспользованиеДокументовЖЦ И НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования Тогда
		ОбновитьДатыПринятияКУчетуОР();
	КонецЕсли; 
	
	Если ОбработатьУстановкуРасширенногоРежимаМТО Тогда
		ДлительныеОперации.ВыполнитьПроцедуру(, "торо_МТОСервер.АктуализироватьСтатусыЗаказовНаРемонтПриУстановкеРасширенногоРежимаМТО");
		ОбработатьУстановкуРасширенногоРежимаМТО = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";

	Иначе
		
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы);

	КонецЕсли;
	
	// Не должны быть доступными до записи настроек во избежание ошибок
	Элементы.СтраницаСогласование.Видимость = НаборКонстант.торо_ИспользоватьСогласование;
	Элементы.НастроитьРасписаниеПочтовыхУведомлений.Доступность = НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы;
	Элементы.НастроитьРасписаниеФоновыйРасчет.Доступность = НаборКонстант.торо_ИспользоватьФоновыйРасчетППР;
	СпособНастройкиБизнесПроцессовПриИзменении(Элементы.СпособНастройкиБизнесПроцессов);
	
	Если НеобходимПерезапуск Тогда
		ЗавершитьРаботуСистемы(,Истина);
		Возврат;
	КонецЕсли;	
	
	ОбновитьИнтерфейс();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ЗаписатьВариантСпособаНастройкиБизнесПроцессовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура торо_ИспользоватьКонтрольОтрицательныхОстатковПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательноПриИзменении(Элемент)
	ИзмененыЗначенияФО = Истина;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьОпасноеПроизводствоПриИзменении(Элемент)
	ИзмененыЗначенияФО = Истина;
КонецПроцедуры

&НаКлиенте
Процедура торо_ЗапретитьПроведениеАктовСИсполнителямиБезУказанияКвалПриИзменении(Элемент)
	ИзмененыЗначенияФО = Истина;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьУведомленияОСобытияхСистемыПриИзменении(Элемент)
		
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
	Если НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы Тогда
		ТекстСообщения = НСтр("ru = 'Для настройки расписания сохраните настройки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Элементы.СтраницаНапоминанияИУведомления.Видимость = НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы;
			
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСогласованиеПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
	Если НаборКонстант.торо_ИспользоватьСогласование Тогда
		ТекстСообщения = НСтр("ru = 'Для изменения настроек согласований сохраните настройки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйСценарийРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		
		ОписаниеОповещения = Новый  ОписаниеОповещения("ВыбранныйСценарийРаботыНачалоВыбораЗавершение",ЭтаФорма);
	    ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Текущие настройки будут заменены настройками из справочника. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыбранныйСценарийРаботыНачалоВыбораЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьДокументыПринятияИСписанияОборудованияПриИзменении(Элемент)
	
	МодифицированностьФО_ИспользованиеДокументовЖЦ = Истина;
	
	МассивОР = Новый Массив;
	ВРегистреНетЗаписейПоСтатусам(МассивОР);
	
	Если МассивОР.Количество() <> 0 И НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеФлажкаИспользоватьДокументыПринятияИСписанияОборудованияЗавершение", ЭтаФорма, 
			Новый Структура("МассивОР", МассивОР));
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Для объектов ремонта, по которым не введены документы ""Принятие объекта ремонта к учету"" 
											|реквизит <Дата ввода в эксплуатацию> будет очищен.
											|Создать документы ""Принятие объекта ремонта к учету""?'"), РежимДиалогаВопрос.ДаНет);
		Элементы.ПринятиеОРКУчету.Видимость = Истина;
	Иначе
		Элементы.ПринятиеОРКУчету.Видимость = Ложь;
	КонецЕсли; 
	
	Элементы.СтраницаЖизненныйЦикл.Видимость = НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятиеОРКУчетуНажатие(Элемент)
	МассивОР = Новый Массив;
	ВРегистреНетЗаписейПоСтатусам(МассивОР);
	ОткрытьФорму("Обработка.торо_ПанельАдминистрированияТОиР.Форма.ФормаПереходаКИспользованиюДокументовЖЦ",
		Новый Структура("ОткрытаИзНастроек, МассивОР", Истина, МассивОР),,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьФункциональныеМестаПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.торо_ИспользоватьФункциональныеМеста Тогда
		ЕстьФМ = ПроверитьНаличиеФМ();
		Если ЕстьФМ Тогда 
			НаборКонстант.торо_ИспользоватьФункциональныеМеста = Истина;
			ТекстСообщения = НСтр("ru = 'Нельзя изменить настройку, пока в системе есть объекты с типом функциональное место!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.торо_ПараметрыОповещенияОПроверкеОборудованияНаФМ.Видимость = НаборКонстант.торо_ИспользоватьФункциональныеМеста;
	Элементы.торо_ПараметрыОповещенияОПроверкеТребованийФМПоДокументам.Видимость = НаборКонстант.торо_ИспользоватьФункциональныеМеста;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура торо_УчетСостоянияОборудованияПриИзменении(Элемент)
	
	Элементы.торо_УчетПусковОборудования.Доступность = НаборКонстант.торо_УчетСостоянияОборудования;
	Элементы.торо_НапоминатьЗафиксироватьПростой.Доступность = НаборКонстант.торо_УчетСостоянияОборудования;
	
	Если НЕ НаборКонстант.торо_УчетСостоянияОборудования Тогда
		НаборКонстант.торо_УчетПусковОборудования 	      = Ложь;
		НаборКонстант.торо_НапоминатьЗафиксироватьПростой = Ложь;
		АктСостояние 								      = Ложь;
		АктМероприятийСостояние 					      = Ложь;
		ДефектСостояние 							      = Ложь;
		СостояниеДефект 							      = Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_УчетВыявленныхДефектовОборудованияПриИзменении(Элемент)
	
	УстановитьДоступностьКонстВозможностьОтменыРемонтов();
	Элементы.торо_ИспользоватьУпрощеннуюФормуДефекта.Доступность = НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	Элементы.Группа20.Доступность = НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	Элементы.Группа24.Доступность = НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	
	Если Не НаборКонстант.торо_УчетВыявленныхДефектовОборудования Тогда
		НаборКонстант.торо_ИспользоватьУпрощеннуюФормуДефекта = Ложь;
		НаборКонстант.торо_ИспользоватьАнализКоренныхПричин	  = Ложь;
		НаборКонстант.торо_НазначениеНаРемонтСУчетомРисков    = Ложь;
		НаборКонстант.торо_ИспользоватьВремяУчетаРецидивностиДефектов = Ложь;
		торо_НазначениеНаРемонтСУчетомРисковПриИзменении(Элементы.торо_НазначениеНаРемонтСУчетомРисков);
		
		ВнешнееОснованиеДефект 			= Ложь;
		ДефектАкт 						= Ложь;
		ДефектЗаявка 					= Ложь;
		ДефектКонтролируемыеПоказатели 	= Ложь;
		ДефектНаработка 				= Ложь;
		ДефектНаряд						= Ложь;
		ДефектСостояние					= Ложь;
		КонтролируемыеПоказателиДефект	= Ложь;
		СостояниеДефект					= Ложь;
		
		Элементы.торо_ВремяУчетаРецидивностиДефектов.Доступность = Ложь;
		Элементы.торо_ИспользоватьВремяУчетаРецидивностиДефектов.Доступность = Ложь;
		Элементы.ПересчитатьДанные.Доступность = Ложь;
	Иначе
		Элементы.торо_ВремяУчетаРецидивностиДефектов.Доступность = Ложь;
		Элементы.торо_ИспользоватьВремяУчетаРецидивностиДефектов.Доступность = Истина;
	КонецЕсли;
		
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьВремяУчетаРецидивностиДефектовПриИзменении(Элемент)
	Элементы.торо_ВремяУчетаРецидивностиДефектов.Доступность = НаборКонстант.торо_ИспользоватьВремяУчетаРецидивностиДефектов;
	Элементы.ПересчитатьДанные.Доступность = НаборКонстант.торо_ИспользоватьВремяУчетаРецидивностиДефектов;
КонецПроцедуры

&НаКлиенте
Процедура торо_НазначениеНаРемонтСУчетомРисковПриИзменении(Элемент)
	Элементы.ЗаполнитьИзКлассификатора.Доступность = НаборКонстант.торо_НазначениеНаРемонтСУчетомРисков;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьППРПриИзменении(Элемент)
	УстановитьДоступностьКонстВозможностьОтменыРемонтов();
	Элементы.торо_ИспользоватьФоновыйРасчетППР.Доступность = НаборКонстант.торо_ИспользоватьППР;
	
	Если НЕ НаборКонстант.торо_ИспользоватьППР Тогда
		Элементы.торо_НеПересчитыватьППРВФонеПослеОшибки.Доступность = Ложь;
		НаборКонстант.торо_ИспользоватьФоновыйРасчетППР		  		 = Ложь;
		НаборКонстант.торо_НеПересчитыватьППРВФонеПослеОшибки 		 = Ложь;
		ППРАкт												  		 = Ложь;
		ППРЗаявка											  		 = Ложь;
		ППРНаряд											  		 = Ложь;
	Иначе
		Элементы.торо_НеПересчитыватьППРВФонеПослеОшибки.Доступность = НаборКонстант.торо_ИспользоватьФоновыйРасчетППР;
	КонецЕсли;	
	
	ПроверитьВключитьУчетСостояний();
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьРегламентныеМероприятияПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьНарядыНаРегламентноеМероприятие.Доступность = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	Если НаборКонстант.торо_ИспользоватьРегламентныеМероприятия = Ложь Тогда
		НаборКонстант.торо_ИспользоватьНарядыНаРегламентноеМероприятие = ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользованиеЛимитовРемонтовПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьОценкиРМ.Доступность = НаборКонстант.торо_ИспользоватьЛимитыРемонтов;
	
	Если НЕ НаборКонстант.торо_ИспользоватьЛимитыРемонтов Тогда
		НаборКонстант.торо_ИспользоватьОценкиРМ = Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСогласованиеДокументовРемонтовПриИзменении(Элемент)
	
	Элементы.СогласованиеДокументовРемонтов.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовРемонтов;
	ЭтаФорма.Модифицированность = Истина;
	УстановитьДоступностьВСпособахСогласования(Элементы.СогласованиеДокументовРемонтов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСогласованиеДокументовМероприятийПриИзменении(Элемент)
	
	Элементы.СогласованиеДокументовМероприятий.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовМероприятий;
	ЭтаФорма.Модифицированность = Истина;
	УстановитьДоступностьВСпособахСогласования(Элементы.СогласованиеДокументовМероприятий.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСогласованиеДокументовМТОПриИзменении(Элемент)
	Элементы.СогласованиеДокументовМТО.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовМТО;
	ЭтаФорма.Модифицированность = Истина;
	УстановитьДоступностьВСпособахСогласования(Элементы.СогласованиеДокументовМТО.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияФлажкаВводаНаОсновании(Элемент)
	
	ИндексНачалаАктаПриемки = Найти(Элемент.Имя, "АктПриемки");
	ИндексНачалаАкта	    = Найти(Элемент.Имя, "Акт");
	ИндексНачалаАктаМероприятий = Найти(Элемент.Имя, "АктМероприятий") + Найти(Элемент.Имя, "ГрафикМероприятий");
	Если ИндексНачалаАктаПриемки Тогда
	    ДокументОснованиеИмя = НайтиПоследнийДокументЦепочки(Лев(Элемент.Имя, ИндексНачалаАктаПриемки - 1));
		
		// Если акт не используется, то на его основании нельзя создать акт приемки
		Если ДокументОснованиеИмя = "Акт" И Не АктИспользуется Тогда
			ЭтаФорма[ДокументОснованиеИмя + "АктПриемки"] = Ложь;
		ИначеЕсли ДокументОснованиеИмя = "Акт" И АктИспользуется Тогда
			
		// Включить ввод акта приемки на основании документа можно только если акт вводится на основании этого документа
		ИначеЕсли Не ЭтаФорма[ДокументОснованиеИмя + "Акт"] Тогда
			ЭтаФорма[ДокументОснованиеИмя + "АктПриемки"] = Ложь;
		КонецЕсли;
	ИначеЕсли ИндексНачалаАкта > 1 И Не ИндексНачалаАктаМероприятий Тогда
		ДокументОснованиеИмя = НайтиПоследнийДокументЦепочки(Лев(Элемент.Имя, ИндексНачалаАкта - 1));
		
		// Если ввод акта на основании документа отключили, то нужно отключить и ввод акта приемки на основании этого документа
		Если Не ДокументОснованиеИмя = "Наряд" И Не ЭтаФорма[ДокументОснованиеИмя + "Акт"] Тогда
		     ЭтаФорма[ДокументОснованиеИмя + "АктПриемки"] = Ложь;
		КонецЕсли;
		
		АктИспользуется = ИспользуетсяЛиАкт();
		Элементы.ГруппаАкт.Видимость = ?(АктИспользуется, Истина, Ложь); 
	КонецЕсли;
	
	мМодифицированностьВводаНаОсновании = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
	ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоследнийДокументЦепочки(Цепочка)

	ВнешнееОснование = "ВнешнееОснование";
	Дефект = "Дефект";
	Заявка = "Заявка";
	Акт = "Акт";
	ППР = "ППР";
	Наряд = "Наряд";
	
	ДлинаСтрокиЦепочка = СтрДлина(Цепочка) + 1;
	
	Индекс = Найти(Цепочка, ВнешнееОснование);
	Если Индекс И Индекс + СтрДлина(ВнешнееОснование) = ДлинаСтрокиЦепочка Тогда
		Возврат ВнешнееОснование;
	КонецЕсли; 
	
	Индекс = Найти(Цепочка, Дефект);
	Если Индекс И Индекс + СтрДлина(Дефект) = ДлинаСтрокиЦепочка Тогда
		Возврат Дефект;
	КонецЕсли; 

	Индекс = Найти(Цепочка, Заявка);
	Если Индекс И Индекс + СтрДлина(Заявка) = ДлинаСтрокиЦепочка Тогда
		Возврат Заявка;
	КонецЕсли; 

	Индекс = Найти(Цепочка, ППР);
	Если Индекс И Индекс + СтрДлина(ППР) = ДлинаСтрокиЦепочка Тогда
		Возврат ППР;
	КонецЕсли;
	
	Индекс = Найти(Цепочка, Акт);
	Если Индекс И Индекс + СтрДлина(Акт) = ДлинаСтрокиЦепочка Тогда
		Возврат Акт;
	КонецЕсли;
	
	Индекс = Найти(Цепочка, Наряд);
	Если Индекс И Индекс + СтрДлина(Наряд) = ДлинаСтрокиЦепочка Тогда
		Возврат Наряд;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ИспользуетсяЛиАкт()

	Возврат ВнешнееОснованиеАкт ИЛИ ДефектАкт ИЛИ ЗаявкаАкт ИЛИ НарядАкт ИЛИ ППРАкт;

КонецФункции

&НаКлиенте
Процедура торо_ИспользоватьНарядыНаВыполнениеРаботПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно.Доступность = НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот;
	
	Если НЕ НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот Тогда
		НаборКонстант.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно = Ложь;
		
		ВнешнееОснованиеНаряд	= Ложь;
		ДефектНаряд				= Ложь;
		ЗаявкаНаряд				= Ложь;
		НарядАкт				= Ложь;
		ППРНаряд				= Ложь;
		
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьАктПриемкиОборудованияПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.торо_ИспользоватьАктПриемкиОборудования Тогда
		
		АктАктПриемки				= Ложь;
		ВнешнееОснованиеАктПриемки	= Ложь;
		ДефектАктПриемки			= Ложь;
		ЗаявкаАктПриемки			= Ложь;
		ППРАктПриемки				= Ложь;
		
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьНарядыНаРегламентноеМероприятиеПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.торо_ИспользоватьНарядыНаРегламентноеМероприятие Тогда
		
		ГрафикМероприятийНарядМероприятий	= Ложь;
		НарядМероприятийАктМероприятий		= Ложь;
		
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура торо_УчетКонтролируемыхПоказателейПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьРемонтыПоСостоянию.Доступность = НаборКонстант.торо_УчетКонтролируемыхПоказателей;
	Элементы.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей.Доступность = НаборКонстант.торо_УчетКонтролируемыхПоказателей;
		
	Если Не НаборКонстант.торо_УчетКонтролируемыхПоказателей Тогда
		НаборКонстант.торо_ИспользоватьРемонтыПоСостоянию 	= Ложь;
		НаборКонстант.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей = Ложь;
		АктКонтролируемыеПоказатели 						= Ложь;
		АктМероприятийПоказатели 							= Ложь;
		ДефектКонтролируемыеПоказатели 						= Ложь;
		КонтролируемыеПоказателиДефект 						= Ложь;
	КонецЕсли;
		
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_УчетНаработкиОборудованияПриИзменении(Элемент)
	
	Если Не НаборКонстант.торо_УчетНаработкиОборудования Тогда
		АктНаработка 			= Ложь;
		АктМероприятийНаработка = Ложь;
		ДефектНаработка 		= Ложь;
	КонецЕсли;
	
	ПроверитьВключитьУчетСостояний();
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСметыРемонтаПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
	Если Не НаборКонстант.торо_ИспользоватьСметыРемонта Тогда
		ВнешнееОснованиеЗаявка	= Ложь;
		ДефектЗаявка			= Ложь;
		ЗаявкаАкт				= Ложь;
		ЗаявкаНаряд				= Ложь;
		ППРЗаявка				= Ложь;
	КонецЕсли;
	
	Элементы.торо_РазрешитьВводНесколькихСметПоРемонту.Доступность = НаборКонстант.торо_ИспользоватьСметыРемонта;
	
	Если Не НаборКонстант.торо_ИспользоватьСметыРемонта Тогда
		НаборКонстант.торо_РазрешитьВводНесколькихСметПоРемонту = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьВнешниеОснованияДляРаботПриИзменении(Элемент)
	
	Если Не НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот Тогда
		ВнешнееОснованиеАкт		= Ложь;
		ВнешнееОснованиеДефект	= Ложь;
		ВнешнееОснованиеЗаявка	= Ложь;
		ВнешнееОснованиеНаряд	= Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьФоновыйРасчетППРПриИзменении(Элемент)
	
	Элементы.торо_НеПересчитыватьППРВФонеПослеОшибки.Доступность = НаборКонстант.торо_ИспользоватьФоновыйРасчетППР;
	
	Если НаборКонстант.торо_ИспользоватьФоновыйРасчетППР Тогда
		ТекстСообщения = НСтр("ru = 'Для настройки расписания сохраните настройки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		НаборКонстант.торо_НеПересчитыватьППРВФонеПослеОшибки = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура торо_УчитыватьСтатистикуПотребленияПриИзменении(Элемент)
	
	Если НаборКонстант.торо_УчитыватьСтатистикуПотребления = Истина И НаборКонстант.торо_ПериодРасчетаСтатистикиПотребления = 0 Тогда
		НаборКонстант.торо_ПериодРасчетаСтатистикиПотребления = 5;
	КонецЕсли;	
	
	Элементы.торо_ПериодРасчетаСтатистикиПотребления.Доступность = НаборКонстант.торо_УчитыватьСтатистикуПотребления;
		
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СтраницыРемонтыИМероприятияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРемонты Тогда
		
		Элементы.СпособыСогласованияПоУмолчанию.Видимость = Истина;
		СогласованиеДокументовПриАктивизацииСтроки(Элементы.СогласованиеДокументовРемонтов);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаМероприятия Тогда
		
		Элементы.СпособыСогласованияПоУмолчанию.Видимость = Истина;
		СогласованиеДокументовПриАктивизацииСтроки(Элементы.СогласованиеДокументовМероприятий);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаМТО Тогда
		
		Элементы.СпособыСогласованияПоУмолчанию.Видимость = Истина;
		СогласованиеДокументовПриАктивизацииСтроки(Элементы.СогласованиеДокументовМТО);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДополнительно Тогда  
		
		Элементы.СпособыСогласованияПоУмолчанию.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееОснованиеДляРаботВыбор(Элемент)
	
	ВводНаОснованииВыбор(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланГрафикППРВыбор(Элемент)
	
	ВводНаОснованииВыбор(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафСхемаМероприятияВыбор(Элемент)
	
	ВводНаОснованииВыбор(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АктОВыполненииЭтапаРаботВыбор(Элемент)
		
	ВводНаОснованииВыбор(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Группа2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если СпособНастройкиБизнесПроцессов = "НастройкаЧерезГрафСхемы" Тогда
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаДополнительно);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаМероприятия);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРемонтыВводНаОснованииПриСменеСтраницы(Элемент, ТекущаяСтраница)

	УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
	УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНастройкиБизнесПроцессовПриИзменении(Элемент)
	
	#Если ВебКлиент Тогда
		СпособНастройкиБизнесПроцессов = "НастройкаФлагами";
	#КонецЕсли
	
	Если СпособНастройкиБизнесПроцессов = "НастройкаЧерезГрафСхемы" Тогда
		
		// Флажками могли быть включены настройки ввода на основании связанные с отключенными документами,
		// (например кнопкой Отметить все или сначала включены флажки - потом отключен документ)
		// в таком случае эти настройки отключаем.
		ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаДополнительно");
		ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаВнешниеОснованияИДефекты");
		ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаМероприятия");
		ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаПланГрафикППР");
		
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаДополнительно);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаМероприятия);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
		
		Элементы.ГруппаУправлениеФлагами.Видимость 	= Ложь;
		Элементы.Группа3.Видимость 					= Ложь;
		Элементы.Группа6.Видимость 					= Ложь;
		Элементы.Группа7.Видимость 					= Ложь;
		
		Элементы.РемонтыВводНаОсновании.Видимость		= Истина;
		Элементы.МероприятияВводНаОсновании.Видимость	= Истина;
		Элементы.ДополнительноВводНаОсновании.Видимость	= ?(АктИспользуется, Истина, Ложь);
		
		УстановитьВидимостьГрафическихСхемВводаНаОсновании();
		
	ИначеЕсли СпособНастройкиБизнесПроцессов = "НастройкаФлагами" Тогда
		
		Элементы.ГруппаУправлениеФлагами.Видимость 	= Истина;
		Элементы.Группа3.Видимость 					= Истина;
		Элементы.Группа6.Видимость 					= Истина;
		Элементы.Группа7.Видимость 					= Истина;
		Элементы.ГруппаАкт.Видимость				= ?(АктИспользуется, Истина, Ложь);
		
		Элементы.РемонтыВводНаОсновании.Видимость		= Ложь;
		Элементы.МероприятияВводНаОсновании.Видимость	= Ложь;
		Элементы.ДополнительноВводНаОсновании.Видимость	= Ложь;
		
		УстановитьВидимостьФлаговВводаНаОсновании();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницыНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницыНастроек.ПодчиненныеЭлементы.СтраницаНапоминанияИУведомления Тогда
		
		ПолучитьТаблицуСоответствияДокументовИСобытий();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницыНастроек.ПодчиненныеЭлементы.СтраницаСогласование Тогда
		
		СтраницыРемонтыИМероприятияПриСменеСтраницы(Элементы.СтраницыРемонтыИМероприятия, Элементы.СтраницыРемонтыИМероприятия.ПодчиненныеЭлементы.СтраницаРемонты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСкользящееПланированиеПриИзменении(Элемент)
	Элементы.ОткрытьФормуНастройкиВидовСкользящихПланов.Доступность = НаборКонстант.торо_ИспользоватьСкользящееПланирование;
КонецПроцедуры

&НаКлиенте
Процедура торо_СпособРезервированияМатериаловПриИзменении(Элемент)
	ВидимостьЭлементовНастройкиСпособовРезервирования(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыРезервированияНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.торо_НастройкаПараметровРезервирования", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритичностьДефектовНажатие(Элемент)
	ОткрытьФорму("Справочник.торо_КритичностьДефекта.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура КритичностьОбъктовРемонтаНажатие(Элемент)
	ОткрытьФорму("Справочник.торо_ПриоритетыОбъектовРемонта.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотреблениеПриИзменении(Элемент)
	
	Если Не НаборКонстант.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление Тогда
	    Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотреблениеПриИзмененииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.торо_РабочееМестоУтвержденияЗаказовНаВнутреннееПотребление.Форма.ФормаЗаказовДляЗаполненияСтатусов",,, УникальныйИдентификатор,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументов
&НаКлиенте
Процедура СогласованиеДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийВидДокумента = ТекущиеДанные.ВидДокументаСогласования;
	ИначеЕсли Элемент.Имя = "СогласованиеДокументовМТО" Тогда
		ТекущийВидДокумента = ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовСогласованияМТО.ПустаяСсылка");
	Иначе
		ТекущийВидДокумента = ?(Элемент.Имя = "СогласованиеДокументовРемонтов", 
								ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовСогласованияРемонтов.ПустаяСсылка"), 
								ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовСогласованияМероприятий.ПустаяСсылка"));
	КонецЕсли;
	
	УстановитьОтборВСпособахСогласования();
	
	УстановитьДоступностьВСпособахСогласования(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументовМероприятий
&НаКлиенте
Процедура СогласованиеДокументовМероприятийПриИзменении(Элемент)
	мМодифицированностьДокументыСогласованияМероприятий = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеДокументовМероприятийПриАктивизацииСтроки(Элемент)
	
	СогласованиеДокументовПриАктивизацииСтроки(Элемент);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументовРемонтов
&НаКлиенте
Процедура СогласованиеДокументовРемонтовПриИзменении(Элемент)
	мМодифицированностьДокументыСогласованияРемонтов = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеДокументовРемонтовПриАктивизацииСтроки(Элемент)
	
	СогласованиеДокументовПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСогласованияИспользоватьСогласованиеПриИзменении(Элемент)
	УстановитьДоступностьВСпособахСогласования(Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументовРемонтов1
&НаКлиенте
Процедура СогласованиеДокументовРемонтов1ИспользоватьСогласованиеПриИзменении(Элемент)
	УстановитьДоступностьВСпособахСогласования(Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументовМТО

&НаКлиенте
Процедура СогласованиеДокументовМТОПриИзменении(Элемент)
	мМодифицированностьДокументыСогласованияМТО = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеДокументовМТОПриАктивизацииСтроки(Элемент)
	СогласованиеДокументовПриАктивизацииСтроки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеДокументовМТОИспользоватьСогласованиеПриИзменении(Элемент)
	УстановитьДоступностьВСпособахСогласования(Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпособыСогласованияПоУмолчанию
&НаКлиенте
Процедура СпособыСогласованияПоУмолчаниюПриИзменении(Элемент)
	мМодифицированностьСпособовСогласованияПоУмолчанию = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособыСогласованияПоУмолчаниюПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.ВидДокумента = ТекущийВидДокумента;
	КонецЕсли;
	
	текСтрока = Элемент.ТекущиеДанные;
	Если текСтрока <> Неопределено И Не ОтменаРедактирования Тогда
		Если Не ЗначениеЗаполнено(текСтрока.СпособСогласования) Тогда
		    ТекстСообщения = НСтр("ru = 'Способ согласования не может быть пустым.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		Если ПроверитьДублиСтрок(текСтрока.ВидДокумента, текСтрока.Организация, текСтрока.Подразделение) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДублиСтрок(ВидДокумент, Организация, Подразделение)
	
	тз = СпособыСогласованияПоУмолчанию.Выгрузить();
	найс = тз.НайтиСтроки(Новый Структура("ВидДокумента, Организация, Подразделение", ВидДокумент, Организация, Подразделение));
	
	Если найс.Количество() > 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Для организации %1 и подразделения %2 уже указан способ согласования. Выберите другую организацию или подразделение.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация, Подразделение);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаУведомлений
&НаКлиенте
Процедура НастройкаУведомленийПриИзменении(Элемент)
	мМодифицированностьНастройкиУведомлений = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомленийВидДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.НастройкаУведомлений.ТекущиеДанные;
	ТекДанные.ВидДокумента = СоответствиеИменДокументов.НайтиСтроки(Новый Структура("Представление",ВыбранноеЗначение))[0].ИмяМетаданных;
	
	Если ЗначениеЗаполнено(ТекДанные.Событие) Тогда
		НетТакогоСобытияДляДокумента = (ТаблицаСоответствияДокументовИСобытий.НайтиСтроки(Новый Структура("Документ, Событие", ТекДанные.ВидДокумента, ТекДанные.Событие)).Количество() = 0);
		Если НетТакогоСобытияДляДокумента Тогда
			ТекДанные.Событие = ПредопределенноеЗначение("Перечисление.торо_СобытияУведомленийПользователей.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомленийСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.НастройкаУведомлений.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		МассивСтрок = ТаблицаСоответствияДокументовИСобытий.НайтиСтроки(Новый Структура("Документ", ТекДанные.ВидДокумента));
		Элементы.НастройкаУведомленийСобытие.СписокВыбора.Очистить();
		Для каждого Элем Из МассивСтрок Цикл
			Если Не НаборКонстант.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление
				И (Элем.Событие = ПредопределенноеЗначение("Перечисление.торо_СобытияУведомленийПользователей.НеуспешноеУтверждение")
				Или Элем.Событие = ПредопределенноеЗначение("Перечисление.торо_СобытияУведомленийПользователей.УспешноеУтверждение")
				Или Элем.Событие = ПредопределенноеЗначение("Перечисление.торо_СобытияУведомленийПользователей.ОтправкаНаУтверждение")) Тогда
				Продолжить;
			КонецЕсли;
			
			Элементы.НастройкаУведомленийСобытие.СписокВыбора.Добавить(Элем.Событие);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПредставлений
&НаКлиенте
Процедура ТаблицаПредставленийФорматнаяСтрокаПриИзменении(Элемент)
	мМодифицированностьПараметровПредставленияДанных = Истина;
	Элементы.Группа15.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредставленийФорматнаяСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТаблицаПредставлений.ТекущиеДанные;
	ОткрытьФорму("ОбщаяФорма.торо_КонструкторФорматнойСтроки",Новый Структура("ОбъектКонфигурации,ОбъектКонфигурацииСиноним,ФорматнаяСтрока",ТекДанные.ОбъектКонфигурации,ТекДанные.ОбъектКонфигурацииСиноним,ТекДанные.ФорматнаяСтрокаПоУмолчанию),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУведомленийПользователей(Команда)
	ОткрытьФорму("Обработка.торо_ЖурналУведомленийПользователей.Форма");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВосстановитьНастройкиИзФайла(Команда)
	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		
		ОписаниеОповещения = Новый  ОписаниеОповещения("ВосстановитьНастройкиИзФайлаЗавершение",ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Текущие настройки будут заменены настройками из файла. Продолжить?'"),РежимДиалогаВопрос.ДаНет);	
	Иначе
		ВосстановитьНастройкиИзФайлаЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйСценарий(Команда)
	
	СтруктураДляСозданияНовойНастройки = ПолучитьСтруктуруНастроек();
	
	ОткрытьФорму("Справочник.торо_ПредопределенныеСценарииРаботыСистемы.Форма.ФормаСозданияНового",Новый Структура("ПараметрыСоздания",СтруктураДляСозданияНовойНастройки),ЭтаФорма,,,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	ЗаполнитьПоУмолчанию();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	ВнешнееОснованиеАкт               = Истина;
	ВнешнееОснованиеДефект            = Истина;
	ВнешнееОснованиеЗаявка            = Истина;
	ВнешнееОснованиеНаряд             = Истина;
	ДефектАкт                         = Истина;    
	ДефектЗаявка                      = Истина;
	ДефектНаряд                       = Истина;    
	ЗаявкаАкт                         = Истина;
	ЗаявкаНаряд                       = Истина;
	НарядАкт                          = Истина;    
	ППРАкт                            = Истина;
	ППРЗаявка                         = Истина;
	ППРНаряд                          = Истина;
	АктКонтролируемыеПоказатели       = Истина;
	АктМероприятийНаработка           = Истина;
	АктМероприятийПоказатели          = Истина;
	АктМероприятийСостояние           = Истина;
	АктНаработка                      = Истина;
	АктСостояние                      = Истина;
	ГрафикМероприятийАктМероприятий   = Истина;
	ГрафикМероприятийНарядМероприятий = Истина;
	КонтролируемыеПоказателиДефект    = Истина;
	ДефектКонтролируемыеПоказатели    = Истина;
	ДефектНаработка                   = Истина;
	НарядМероприятийАктМероприятий    = Истина;
	СостояниеДефект                   = Истина;
	ДефектСостояние                   = Истина;
	ВнешнееОснованиеАктПриемки        = Истина;
    ДефектАктПриемки                  = Истина;
    ЗаявкаАктПриемки                  = Истина;
    ППРАктПриемки                     = Истина;
    АктРегламентныхДефект             = Истина;
    АктРегламентныхВнешнееОснование   = Истина;
    АктАктПриемки                     = Истина;
	
	мМодифицированностьВводаНаОсновании                   = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	ВнешнееОснованиеАкт               = Ложь;
	ВнешнееОснованиеДефект            = Ложь;
	ВнешнееОснованиеЗаявка            = Ложь;
	ВнешнееОснованиеНаряд             = Ложь;
	ДефектАкт                         = Ложь;    
	ДефектЗаявка                      = Ложь;
	ДефектНаряд                       = Ложь;    
	ЗаявкаАкт                         = Ложь;
	ЗаявкаНаряд                       = Ложь;
	НарядАкт                          = Ложь;    
	ППРАкт                            = Ложь;
	ППРЗаявка                         = Ложь;
	ППРНаряд                          = Ложь;
	АктКонтролируемыеПоказатели       = Ложь;
	АктМероприятийНаработка           = Ложь;
	АктМероприятийПоказатели          = Ложь;
	АктМероприятийСостояние           = Ложь;
	АктНаработка                      = Ложь;
	АктСостояние                      = Ложь;
	ГрафикМероприятийАктМероприятий   = Ложь;
	ГрафикМероприятийНарядМероприятий = Ложь;
	КонтролируемыеПоказателиДефект    = Ложь;
	ДефектКонтролируемыеПоказатели    = Ложь;
	ДефектНаработка                   = Ложь;
	НарядМероприятийАктМероприятий    = Ложь;
	СостояниеДефект                   = Ложь;
	ДефектСостояние                   = Ложь;
	ВнешнееОснованиеАктПриемки        = Ложь;
	ДефектАктПриемки                  = Ложь;
	ЗаявкаАктПриемки                  = Ложь;
	ППРАктПриемки                     = Ложь;
	АктРегламентныхДефект             = Ложь;
	АктРегламентныхВнешнееОснование   = Ложь;
	АктАктПриемки                     = Ложь;
	
	мМодифицированностьВводаНаОсновании                   = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	СохранитьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеФоновыйРасчет(Команда)
	
	НастроитьРасписание("торо_РасчетППР");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеПроверкаТребованийФМ(Команда)
	НастроитьРасписание("торо_ПроверкаОборудованияНаФункциональныхМестах");
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеПочтовыхУведомлений(Команда)
	НастроитьРасписание("торо_ФормированиеПочтовыхУведомлений");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуПараметровОповещенияОПроверкеТребованийФМ(Команда)
	Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНапоминанияИУведомления;
	
	Если Не ЗначениеЗаполнено(НаборКонстант.торо_ПараметрыОповещенияОПроверкеОборудованияНаФМ)
		Или ЗначениеЗаполнено(НаборКонстант.торо_ПараметрыОповещенияОПроверкеТребованийФМПоДокументам) Тогда
	    ЭтаФорма.ТекущийЭлемент = Элементы.торо_ПараметрыОповещенияОПроверкеОборудованияНаФМ;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.торо_ПараметрыОповещенияОПроверкеТребованийФМПоДокументам;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВерсияППР(Команда)
	
	ОписаниеОшибки = "";
	ВерсияППР = торо_СЛКСервер.Версия_Session("торо_ЗащитаУправлениеРемонтами83", ОписаниеОшибки);
	Если ВерсияППР = Неопределено Тогда
		Если ОписаниеОшибки = "" Тогда 
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не найдены рабочие ключи защиты'"));
		Иначе
			ПоказатьПредупреждение(Неопределено, СтрШаблон(НСтр("ru = '%1.'"), ОписаниеОшибки));
		КонецЕсли;
	Иначе
	    ПоказатьПредупреждение(Неопределено,СтрШаблон(НСтр("ru = 'Используется обработка расчета ППР версии %1.'"), ВерсияППР));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТаблицуСоответствияНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.торо_ТаблицаСоответствияВерсийОбработокВерсиямРелиза",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзКлассификатора(Команда)
	ЗаполнитьСправочникиДляНазначенияНаРемонтСУчетомРисков();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиВидовСкользящихПланов(Команда)
	ОткрытьФорму("Обработка.торо_ОбщийПланРабот.Форма.ФормаНастройки",, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпособовСогласования(Команда)
	
	ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтарыеДанные(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтветЗавершение", ЭтотОбъект), "Выполнение операции может занять продолжительное время, продолжить?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент)
		
	мМодифицированностьФО           = Истина;
    ЭтаФорма.Модифицированность     = Истина;
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
	Если СпособНастройкиБизнесПроцессов = "НастройкаЧерезГрафСхемы" Тогда
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаДополнительно);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаМероприятия);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
		
		УстановитьВидимостьГрафическихСхемВводаНаОсновании();
	ИначеЕсли СпособНастройкиБизнесПроцессов = "НастройкаФлагами" Тогда
		УстановитьВидимостьФлаговВводаНаОсновании();
	КонецЕсли;
	
	ИзмененыЗначенияФО = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
	мМодифицированностьФО         = Истина;
	ЭтаФорма.Модифицированность   = Истина;
	
	ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
	ИзмененыЗначенияФО = Истина;
	
	Если Элемент.Имя = "торо_ИспользоватьУправлениеПерсоналом" Тогда
		мМодифицированностьФО_УправлениеПерсоналом = Истина;
	КонецЕсли;
	
	Если Не НаборКонстант.торо_ИспользоватьОбщийПланРабот Тогда
		Элементы.Группа21.Доступность = Ложь;
		НаборКонстант.торо_ИспользоватьСкользящееПланирование = Ложь;
	Иначе
		Элементы.Группа21.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
// Процедура выполняет расстановку флагов в ТаблицаНастроекЖЦ "по заводским настройкам".
//
Процедура ЗаполнитьПоУмолчанию()
	
	ТаблицаНастроекЖЦ.Очистить();
	
	НС = ТаблицаНастроекЖЦ.Добавить();
	НС.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету;
	НС.ДоступностьПриПодборе = Ложь;
	НС.ДоступностьФлага      = Ложь;
	НС.ЗначениеПоУмолчанию   = Истина;
	НС.НомерСтрокиТаб        = 1;
	
	НС = ТаблицаНастроекЖЦ.Добавить();
	НС.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету;
	НС.ДоступностьПриПодборе = Истина;
	НС.ДоступностьФлага      = Истина;
	НС.ЗначениеПоУмолчанию   = Ложь;
	НС.НомерСтрокиТаб        = 2;
	
	НС = ТаблицаНастроекЖЦ.Добавить();
	НС.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.СнятоСУчета;
	НС.ДоступностьПриПодборе = Ложь;
	НС.ДоступностьФлага      = Ложь;
	НС.ЗначениеПоУмолчанию   = Истина;
	НС.НомерСтрокиТаб        = 3;

КонецПроцедуры

&НаСервере
// Процедура выполняет заполнение СогласованиеДокументовРемонтов и СогласованиеДокументовМероприятий
// вызывается из ПриСозданииНаСервере.
Процедура ЗаполнитьТЗДокументовДляСогласования(ТЗ, ЭтоРегламентныеМероприятия, ЭтоМТО)
	
	ТаблицаДокументов = РеквизитФормыВЗначение(ТЗ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВидыДокументовСогласованияПеречисление.Ссылка КАК ВидДокументаСогласования,
	               |	ВЫБОР
	               |		КОГДА НЕ торо_ВидыДокументовСогласования.ВидДокумента ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ИспользоватьСогласование
	               |ИЗ
	               |	Источник_ВидыДокументовСогласования КАК торо_ВидыДокументовСогласованияПеречисление
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВидыДокументовСогласования КАК торо_ВидыДокументовСогласования
	               |		ПО (торо_ВидыДокументовСогласования.ВидДокумента = торо_ВидыДокументовСогласованияПеречисление.Ссылка)";
	ЭтоРемонты = Ложь;			   
	Если Не ЭтоРегламентныеМероприятия И Не ЭтоМТО Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Источник_ВидыДокументовСогласования", "Перечисление.торо_ВидыДокументовСогласованияРемонтов");
		ЭтоРемонты = Истина;
	ИначеЕсли ЭтоМТО Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Источник_ВидыДокументовСогласования", "Перечисление.торо_ВидыДокументовСогласованияМТО");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Источник_ВидыДокументовСогласования", "Перечисление.торо_ВидыДокументовСогласованияМероприятий");		
	КонецЕсли;
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Если ЭтоРемонты И НЕ КлючКОРПДоступен Тогда 
		НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("ВидДокументаСогласования", 
			Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АнализКоренныхПричин));
		НайденныеСтроки[0].ИспользоватьСогласование = Ложь;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаДокументов,ТЗ);
	
КонецПроцедуры

&НаСервере
// Процедура выполняет заполнение СпособыСогласованияПоУмолчанию
// вызывается из ПриСозданииНаСервере.
Процедура ЗаполнитьТЗСпособовСогласования()
	
	ТаблицаДокументов = РеквизитФормыВЗначение("СпособыСогласованияПоУмолчанию");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_НастройкиСогласованияДокументовТОиР.ВидДокумента КАК ВидДокумента,
	               |	торо_НастройкиСогласованияДокументовТОиР.Организация КАК Организация,
	               |	торо_НастройкиСогласованияДокументовТОиР.Подразделение КАК Подразделение,
	               |	торо_НастройкиСогласованияДокументовТОиР.СпособСогласования КАК СпособСогласования,
	               |	торо_НастройкиСогласованияДокументовТОиР.ЗапретПеревыбора КАК ЗапретПеревыбора
	               |ИЗ
	               |	РегистрСведений.торо_НастройкиСогласованияДокументовТОиР КАК торо_НастройкиСогласованияДокументовТОиР
	               |ГДЕ
	               |	торо_НастройкиСогласованияДокументовТОиР.ВидДокумента <> НЕОПРЕДЕЛЕНО";
				   
		
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(ТаблицаДокументов,"СпособыСогласованияПоУмолчанию");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗНастройкиУведомлений()

	ТаблицаНастроек =  РеквизитФормыВЗначение("НастройкаУведомлений");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ * ПОМЕСТИТЬ ТабИмен ИЗ &ТабИмен КАК ТабИмен;
		|ВЫБРАТЬ
		|	торо_НастройкиУведомлений.ВидДокумента       КАК ВидДокумента,
		|	торо_НастройкиУведомлений.СобытиеПоДокументу КАК СобытиеПоДокументу,
		|	торо_НастройкиУведомлений.Событие			 КАК Событие,
		|	ТабИмен.Представление 						 КАК ВидДокументаПредставление
		|ИЗ
		|	РегистрСведений.торо_НастройкиУведомлений КАК торо_НастройкиУведомлений
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабИмен
		|		ПО торо_НастройкиУведомлений.ВидДокумента = ТабИмен.ИмяМетаданных";
 	Запрос.УстановитьПараметр("ТабИмен", СоответствиеИменДокументов.Выгрузить());
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();

	ЗначениеВРеквизитФормы(ТаблицаНастроек,"НастройкаУведомлений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовДокументов()

	СписокИсключений = Новый Массив;
	СписокИсключений.Добавить("торо_ПлановыеЗатраты");
	СписокИсключений.Добавить("торо_ПроектныеЗатратыНаРемонты");
	СписокИсключений.Добавить("торо_ИзменениеСтатусаРемонта");
	СписокИсключений.Добавить("торо_ЗакрытиеЗаказаНаВнутреннееПотребление");
	
	Если НЕ КлючКОРПДоступен Тогда 
		СписокИсключений.Добавить("торо_АнализКоренныхПричин");
		СписокИсключений.Добавить("торо_АктПриемкиОборудования");
		СписокИсключений.Добавить("торо_УстановкаЦелевыхЗначенийПоказателейKPI");
	КонецЕсли;
	
	ДокументыКонфигурации = Метаданные.Документы;	
	Для каждого Элемент Из ДокументыКонфигурации Цикл
		Если (Найти(Элемент.Имя, "торо_") И СписокИсключений.Найти(Элемент.Имя) = Неопределено)
				Или Элемент.Имя = "ЗаказНаВнутреннееПотребление" Тогда
			Элементы.НастройкаУведомленийВидДокументаПредставление.СписокВыбора.Добавить(Строка(Элемент));
			НС = СоответствиеИменДокументов.Добавить();
			НС.Представление = Элемент.Синоним;
			НС.ИмяМетаданных = Элемент.Имя;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.торо_РазрешитьПользовательскуюНастройкуПредставлений.Доступность = НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления;
	
	Элементы.СогласованиеДокументовРемонтов.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовРемонтов;
	Элементы.СогласованиеДокументовМероприятий.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовМероприятий;
	Элементы.СогласованиеДокументовМТО.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовМТО;
	
	Элементы.торо_ИспользоватьРемонтыПоСостоянию.Доступность 							    = НаборКонстант.торо_УчетКонтролируемыхПоказателей;
	Элементы.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей.Доступность 	    = НаборКонстант.торо_УчетКонтролируемыхПоказателей;
	Элементы.торо_ИспользоватьФоновыйРасчетППР.Доступность								    = НаборКонстант.торо_ИспользоватьППР;
	Элементы.торо_ИспользоватьОценкиРМ.Доступность										    = НаборКонстант.торо_ИспользоватьЛимитыРемонтов;
	Элементы.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно.Доступность = НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот;
	Элементы.торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом.Доступность            = НаборКонстант.торо_ИспользоватьГарантии;
	Элементы.торо_ИспользоватьКартинкиТиповыхОбъектов.Доступность                           = НаборКонстант.торо_ИспользоватьТиповыеОР;
	Элементы.торо_ИспользоватьУпрощеннуюФормуДефекта.Доступность                            = НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	Элементы.Группа20.Доступность                                                           = НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	Элементы.Группа21.Доступность 																			= НаборКонстант.торо_ИспользоватьОбщийПланРабот;
	Элементы.торо_ИспользоватьНарядыНаРегламентноеМероприятие.Доступность                   = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	
	Элементы.торо_ПериодРасчетаСтатистикиПотребления.Доступность                  			= НаборКонстант.торо_УчитыватьСтатистикуПотребления;
	Элементы.торо_ИспользоватьВозможностьОтменыРемонтов.Доступность                         = НаборКонстант.торо_ИспользоватьППР ИЛИ НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	Элементы.торо_КоличествоДнейСмещенияВДефектеДляПростоев.Доступность 					= НаборКонстант.торо_НапоминатьЗафиксироватьПростой;
	
	Элементы.ЗаполнитьИзКлассификатора.Доступность                                          = НаборКонстант.торо_НазначениеНаРемонтСУчетомРисков;
	Элементы.ОткрытьФормуНастройкиВидовСкользящихПланов.Доступность                         = НаборКонстант.торо_ИспользоватьСкользящееПланирование;
	
	Элементы.торо_АвтоматическиОбновлятьПоставляемуюМодельПоказателейKPI.Доступность		= НаборКонстант.торо_ПоказыватьПодсистемуKPI;
	Элементы.торо_ИспользоватьСинхронизациюСERP.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных И КлючКОРПДоступен;
	
	Элементы.торо_ИспользоватьВремяУчетаРецидивностиДефектов.Доступность = НаборКонстант.торо_УчетНаработкиОборудования;
	Элементы.торо_ВремяУчетаРецидивностиДефектов.Доступность = НаборКонстант.торо_ИспользоватьВремяУчетаРецидивностиДефектов;
	Элементы.ПересчитатьДанные.Доступность = НаборКонстант.торо_ИспользоватьВремяУчетаРецидивностиДефектов;
	
	Элементы.торо_РазрешитьВводНесколькихСметПоРемонту.Доступность = НаборКонстант.торо_ИспользоватьСметыРемонта;
	
	// регламентные задания
	Элементы.НастроитьРасписаниеФоновыйРасчет.Доступность = НаборКонстант.торо_ИспользоватьФоновыйРасчетППР;
	Элементы.НастроитьРасписаниеПочтовыхУведомлений.Доступность = НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы;
	
	УстановитьВидимостьДоступностьУчетСостояний();
	ВидимостьНастроекМТО(); 
			
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей, ТЗ, КлючевыеПоля = Неопределено, Отказ = Ложь)
	
	Если КлючевыеПоля = неопределено тогда
		КлючевыеПоля = Новый Структура;
	КонецЕсли;
	
	Для каждого Строка Из ТЗ Цикл
		
		Для каждого текПоле из КлючевыеПоля Цикл
			Если НЕ ЗначениеЗаполнено(Строка[текПоле.Ключ]) Тогда
				ШаблонСообщения = НСтр("ru = 'Значение в колонке ""%1"" не заполнено! Настройки не были сохранены.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, текПоле.Значение);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора,Строка);
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьОтборВСпособахСогласования()
	
	Элементы.СпособыСогласованияПоУмолчанию.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидДокумента", ТекущийВидДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВСпособахСогласования(ТекущиеДанные)
	
	ДоступностьСпособовСогласованияПоУмолчанию = (Элементы.СтраницыРемонтыИМероприятия.ТекущаяСтраница = Элементы.СтраницаРемонты И НаборКонстант.торо_ИспользоватьСогласованиеДокументовРемонтов)
				Или (Элементы.СтраницыРемонтыИМероприятия.ТекущаяСтраница = Элементы.СтраницаМероприятия И НаборКонстант.торо_ИспользоватьСогласованиеДокументовМероприятий)
				Или (Элементы.СтраницыРемонтыИМероприятия.ТекущаяСтраница = Элементы.СтраницаМТО И НаборКонстант.торо_ИспользоватьСогласованиеДокументовМТО);
				
	Если ТекущиеДанные <> Неопределено И ДоступностьСпособовСогласованияПоУмолчанию И ТекущиеДанные.ИспользоватьСогласование Тогда
		Элементы.СпособыСогласованияПоУмолчанию.Доступность = Истина;
	Иначе
		Элементы.СпособыСогласованияПоУмолчанию.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлажкиИзРегистра()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВводНаОсновании.ДокументОснование,
	               |	торо_ВводНаОсновании.ДокументВводимый
	               |ИЗ
	               |	РегистрСведений.торо_ВводНаОсновании КАК торо_ВводНаОсновании
	               |ГДЕ
	               |	торо_ВводНаОсновании.Значение";
				   
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаПоиска = Строка(Выборка.ДокументОснование) + "_" + Выборка.ДокументВводимый;
			ИмяРеквизита = СоответствиеРеквизитов.Получить(СтрокаПоиска);
			Если Не ИмяРеквизита = Неопределено Тогда
				ЭтаФорма[ИмяРеквизита] = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
				  	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКонстВозможностьОтменыРемонтов()
	
	Значение = НаборКонстант.торо_ИспользоватьППР ИЛИ НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	Элементы.торо_ИспользоватьВозможностьОтменыРемонтов.Доступность = Значение;
	
	Если НЕ Значение Тогда
		НаборКонстант.торо_ИспользоватьВозможностьОтменыРемонтов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьВидимостьФлаговВводаНаОсновании()
	
	Элементы.СтраницаМероприятия.Видимость  = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
			
	Элементы.ГруппаППР.Видимость = НаборКонстант.торо_ИспользоватьППР;	
	
	ИспользоватьСметы = НаборКонстант.торо_ИспользоватьСметыРемонта;
	
	Элементы.ГруппаВнешнееОснованиеДефектЗаявка.Видимость         = ИспользоватьСметы;
	Элементы.ГруппаВнешнееОснованиеЗаявка.Видимость               = ИспользоватьСметы;
	Элементы.ГруппаППРЗаявка.Видимость                            = ИспользоватьСметы;
	Элементы.ГруппаДефектЗаявка.Видимость                         = ИспользоватьСметы;
	
	ИспользоватьНаряды = НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот;
		
    Элементы.ГруппаВнешнееОснованиеДефектЗаявкаНаряд.Видимость = ИспользоватьНаряды;
    Элементы.ГруппаВнешнееОснованиеДефектНаряд.Видимость       = ИспользоватьНаряды;
    Элементы.ГруппаВнешнееОснованиеЗаявкаНаряд.Видимость       = ИспользоватьНаряды;
    Элементы.ГруппаВнешнееОснованиеНаряд.Видимость             = ИспользоватьНаряды;        
    Элементы.ГруппаППРЗаявкаНаряд.Видимость                    = ИспользоватьНаряды;
    Элементы.ГруппаППРНаряд.Видимость                          = ИспользоватьНаряды;
    Элементы.ГруппаДефектЗаявкаНаряд.Видимость                 = ИспользоватьНаряды;
    Элементы.ГруппаДефектНаряд.Видимость                       = ИспользоватьНаряды;
	
	ИспользоватьНарядыНаРегламентныеМероприятия = НаборКонстант.торо_ИспользоватьНарядыНаРегламентноеМероприятие;
    Элементы.ГруппаГрафикМероприятийНаряд.Видимость            = ИспользоватьНарядыНаРегламентныеМероприятия;
		
	ИспользоватьДефекты = НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	
	Элементы.ГруппаДефект.Видимость                 = ИспользоватьДефекты;
	Элементы.ГруппаВнешнееОснованиеДефект.Видимость = ИспользоватьДефекты;
	
	
	ИспользоватьМероприятия = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	
	Элементы.Группа6.Видимость = ИспользоватьМероприятия;
	
		
	ИспользоватьВнешниеОснования = НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот;
	
	Элементы.ГруппаВнешнееОснование.Видимость = ИспользоватьВнешниеОснования;
	
	
	ИспользоватьУчетСостоянийОборудования = НаборКонстант.торо_УчетСостоянияОборудования;
	
	Элементы.ГруппаСостояние.Видимость                 							= ИспользоватьУчетСостоянийОборудования;
	Элементы.ВнешнееОснованиеДефектСостояние.Видимость 							= ИспользоватьУчетСостоянийОборудования;	
	Элементы.ДефектСостояние.Видимость                 							= ИспользоватьУчетСостоянийОборудования;	
	Элементы.АктСостояние.Видимость                    							= ИспользоватьУчетСостоянийОборудования;	
	Элементы.ГрафикМероприятийНарядМероприятийАктМероприятийСостояние.Видимость = ИспользоватьУчетСостоянийОборудования;	
	Элементы.ГрафикМероприятийАктМероприятийСостояние.Видимость        			= ИспользоватьУчетСостоянийОборудования;	
	
	ИспользоватьУчетКонтролируемыхПоказателей = НаборКонстант.торо_УчетКонтролируемыхПоказателей;
	
	Элементы.ГруппаКонтролируемыеПоказатели.Видимость                 			 = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.ВнешнееОснованиеДефектКонтролируемыеПоказатели.Видимость 			 = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.ДефектКонтролируемыеПоказатели.Видимость                 			 = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.АктКонтролируемыеПоказатели.Видимость                    			 = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.ГрафикМероприятийНарядМероприятийАктМероприятийПоказатели.Видимость = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.ГрафикМероприятийАктМероприятийПоказатели.Видимость                 = ИспользоватьУчетКонтролируемыхПоказателей;
	
	
	ИспользоватьУчетНаработки = НаборКонстант.торо_УчетНаработкиОборудования;
	
	Элементы.ВнешнееОснованиеДефектНаработка.Видимость                 			= ИспользоватьУчетНаработки;
	Элементы.ДефектНаработка.Видимость                                			= ИспользоватьУчетНаработки;
	Элементы.ГрафикМероприятийНарядМероприятийАктМероприятийНаработка.Видимость = ИспользоватьУчетНаработки;
	Элементы.ГрафикМероприятийАктМероприятийНаработка.Видимость                 = ИспользоватьУчетНаработки;
	Элементы.АктНаработка.Видимость                                    			= ИспользоватьУчетНаработки;
	
	ИспользоватьАктПриемки = НаборКонстант.торо_ИспользоватьАктПриемкиОборудования;
	
	Элементы.АктАктПриемки.Видимость 						  = НаборКонстант.торо_ИспользоватьАктПриемкиОборудования;
	Элементы.ДефектЗаявкаАктПриемки.Видимость 				  = ИспользоватьАктПриемки;
	Элементы.ДефектАктПриемки.Видимость						  = ИспользоватьАктПриемки;
	Элементы.ППРЗаявкаАктПриемки.Видимость 					  = ИспользоватьАктПриемки;
	Элементы.ППРАктПриемки.Видимость 						  = ИспользоватьАктПриемки;
	Элементы.ВнешнееОснованиеДефектЗаявкаАктПриемки.Видимость = ИспользоватьАктПриемки;
	Элементы.ВнешнееОснованиеДефектАктПриемки.Видимость 	  = ИспользоватьАктПриемки;
	Элементы.ВнешнееОснованиеАктПриемки.Видимость 			  = ИспользоватьАктПриемки;

	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	Иначе
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы);
	КонецЕсли; 
	
	ВидимостьГруппыНастроек = Элементы.ГруппаВнешнееОснование.Видимость Или Элементы.ГруппаППР.Видимость 
								Или ИспользоватьДефекты Или ИспользоватьМероприятия
								Или ИспользоватьВнешниеОснования Или ИспользоватьУчетСостоянийОборудования
								Или ИспользоватьУчетКонтролируемыхПоказателей; 
								
	#Если ВебКлиент Тогда
		Элементы.СпособНастройкиБизнесПроцессов.Видимость = Ложь;
	#Иначе
		Элементы.СпособНастройкиБизнесПроцессов.Видимость = ВидимостьГруппыНастроек;
	#КонецЕсли

	Элементы.ГруппаУправлениеФлагами.Видимость = ВидимостьГруппыНастроек;
	Элементы.ДекорацияНеТребуетсяНастройкаБизнесПроцессов.Видимость = Не ВидимостьГруппыНастроек;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлПослеУстановкиРасширения", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения,,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлПослеУстановкиРасширения(РасширениеПодключено, ДополнительныеПараметры) Экспорт

	Если НЕ РасширениеПодключено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расширение работы с файлами не установлено. Работа с файлами с неустановленным расширением в веб клиенте невозможна.'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок					= НСтр("ru = 'Выберите файл'");
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Фильтр   					= НСтр("ru = 'Файл XML (*.xml)|*.xml'");
	Диалог.Расширение   				= "xml";
	Диалог.ПроверятьСуществованиеФайла  = Истина;
	Диалог.МножественныйВыбор			= Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлПослеВыбораФайла", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		ИмяФайла = ВыбранныеФайлы[0];
		
		// Записываются текст и параметры запроса в файл.
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			ДвоичныеДанные = ПолучитьФайлXMLСНастройками();
			ДвоичныеДанные.Записать(ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлXMLСНастройками()
	
	СтруктураТекущихНастроек = ПолучитьСтруктуруНастроек();
	#Если ВебКлиент Тогда
		Возврат ПолучитьФайлXMLСНастройкамиНаСервере(СтруктураТекущихНастроек);
	#Иначе
		ФайлXML = Новый ЗаписьXML;
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлXML.ОткрытьФайл(ИмяФайла);
		ФайлXML.ЗаписатьОбъявлениеXML();
		
		
		ФайлXML.ЗаписатьНачалоЭлемента("НастройкиТОИР");
		
			
			Для каждого Константа Из СтруктураТекущихНастроек.Константы Цикл
				ФайлXML.ЗаписатьНачалоЭлемента("ФункциональныеОпции");
					ФайлXML.ЗаписатьАтрибут("name", Константа.Ключ);
					ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Константа.Значение));
				ФайлXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
					
			
			Для каждого Элемент Из СтруктураТекущихНастроек.ВводНаОсновании Цикл
				ФайлXML.ЗаписатьНачалоЭлемента("ВводНаОсновании");
					ФайлXML.ЗаписатьАтрибут("name", Элемент.Ключ);
					ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Элемент.Значение));
				ФайлXML.ЗаписатьКонецЭлемента();
			КонецЦикла; 

			
		ФайлXML.ЗаписатьКонецЭлемента();	
		ФайлXML.Закрыть();
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		
		УдалитьФайлы(ИмяФайла);	
		
		Возврат ДвоичныеДанные;
	#КонецЕсли
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлXMLСНастройкамиНаСервере(СтруктураТекущихНастроек)
	
	ФайлXML = Новый ЗаписьXML;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ФайлXML.ОткрытьФайл(ИмяФайла);
	ФайлXML.ЗаписатьОбъявлениеXML();
	
	ФайлXML.ЗаписатьНачалоЭлемента("НастройкиТОИР");
	
		
		Для каждого Константа Из СтруктураТекущихНастроек.Константы Цикл
			ФайлXML.ЗаписатьНачалоЭлемента("ФункциональныеОпции");
				ФайлXML.ЗаписатьАтрибут("name", Константа.Ключ);
				ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Константа.Значение));
			ФайлXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
				
		
		Для каждого Элемент Из СтруктураТекущихНастроек.ВводНаОсновании Цикл
			ФайлXML.ЗаписатьНачалоЭлемента("ВводНаОсновании");
				ФайлXML.ЗаписатьАтрибут("name", Элемент.Ключ);
				ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Элемент.Значение));
			ФайлXML.ЗаписатьКонецЭлемента();
		КонецЦикла; 

		
	ФайлXML.ЗаписатьКонецЭлемента();	
	ФайлXML.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	УдалитьФайлы(ИмяФайла);	
	
	Возврат ДвоичныеДанные;	
	
КонецФункции

&НаКлиенте
Процедура ВыбранныйСценарийРаботыНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		мМодифицированностьВводаНаОсновании                   = Истина;
		мМодифицированностьФО                                 = Истина;
		ОткрытьФорму("Справочник.торо_ПредопределенныеСценарииРаботыСистемы.Форма.ФормаВыбора",,ЭтаФорма,,,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруНастроек()
	
	СтруктураДляСозданияНовойНастройки = Новый Структура;
	
	Структура = Новый Структура;
	
	// Общие 
	Структура.Вставить("торо_ИспользоватьСогласование"                                      , НаборКонстант.торо_ИспользоватьСогласование);
	Структура.Вставить("торо_ИспользоватьСтатусыДокументовТОиР"                             , НаборКонстант.торо_ИспользоватьСтатусыДокументовТОиР);
	Структура.Вставить("торо_ИспользоватьУведомленияОСобытияхСистемы"                       , НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы);
	Структура.Вставить("торо_ИспользоватьКонтрольОтрицательныхОстатков"                     , НаборКонстант.торо_ИспользоватьКонтрольОтрицательныхОстатков);
	Структура.Вставить("торо_ИспользоватьУправлениеПерсоналом"                              , НаборКонстант.торо_ИспользоватьУправлениеПерсоналом);
	Структура.Вставить("торо_ИспользоватьНастраиваемыеПредставления"                        , НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления);
	Структура.Вставить("торо_РазрешитьПользовательскуюНастройкуПредставлений"               , НаборКонстант.торо_РазрешитьПользовательскуюНастройкуПредставлений);
	Структура.Вставить("торо_ПоказыватьПодсистемуKPI"                                       , НаборКонстант.торо_ПоказыватьПодсистемуKPI);
	Структура.Вставить("торо_АвтоматическиОбновлятьПоставляемуюМодельПоказателейKPI"        , НаборКонстант.торо_АвтоматическиОбновлятьПоставляемуюМодельПоказателейKPI);
	
	// Учет оборудования и нормативов
	Структура.Вставить("торо_УчетЗапчастей"                                                 , НаборКонстант.торо_УчетЗапчастей);
	Структура.Вставить("торо_ИспользоватьТиповыеОР"                                         , НаборКонстант.торо_ИспользоватьТиповыеОР);
	Структура.Вставить("торо_ИспользоватьКартинкиТиповыхОбъектов"                           , НаборКонстант.торо_ИспользоватьКартинкиТиповыхОбъектов);
	Структура.Вставить("торо_ИспользоватьСложныеТехКартыРемонтов"                           , НаборКонстант.торо_ИспользоватьСложныеТехКартыРемонтов);
	Структура.Вставить("торо_ИспользоватьНаправленияОР"                                     , НаборКонстант.торо_ИспользоватьНаправленияОР);
	Структура.Вставить("торо_ИспользоватьГарантии"                                          , НаборКонстант.торо_ИспользоватьГарантии);
	Структура.Вставить("торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом"            , НаборКонстант.торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом);
	Структура.Вставить("торо_ИспользоватьДокументыПринятияИСписанияОборудования"            , НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования);
	Структура.Вставить("торо_ВыделятьИнвестиционныеРемонты"                                 , НаборКонстант.торо_ВыделятьИнвестиционныеРемонты);
	Структура.Вставить("торо_ИспользоватьФункциональныеМеста"                               , НаборКонстант.торо_ИспользоватьФункциональныеМеста);
	
	// Учет показателей эксплуатации
	Структура.Вставить("торо_УчетКонтролируемыхПоказателей"                                 , НаборКонстант.торо_УчетКонтролируемыхПоказателей);
	Структура.Вставить("торо_ИспользоватьРемонтыПоСостоянию"                                , НаборКонстант.торо_ИспользоватьРемонтыПоСостоянию);
	Структура.Вставить("торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей"       , НаборКонстант.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей);
	Структура.Вставить("торо_УчетНаработкиОборудования"                                     , НаборКонстант.торо_УчетНаработкиОборудования);
	Структура.Вставить("торо_УчетСостоянияОборудования"                                     , НаборКонстант.торо_УчетСостоянияОборудования);
	Структура.Вставить("торо_УчетПусковОборудования"                                        , НаборКонстант.торо_УчетПусковОборудования);
	Структура.Вставить("торо_НапоминатьЗафиксироватьПростой"                                , НаборКонстант.торо_НапоминатьЗафиксироватьПростой);
	Структура.Вставить("торо_УчетВыявленныхДефектовОборудования"                            , НаборКонстант.торо_УчетВыявленныхДефектовОборудования);
	Структура.Вставить("торо_ИспользоватьУпрощеннуюФормуДефекта"                            , НаборКонстант.торо_ИспользоватьУпрощеннуюФормуДефекта);
	Структура.Вставить("торо_НазначениеНаРемонтСУчетомРисков"                               , НаборКонстант.торо_НазначениеНаРемонтСУчетомРисков);
	Структура.Вставить("торо_ИспользоватьАнализКоренныхПричин"                              , НаборКонстант.торо_ИспользоватьАнализКоренныхПричин);
	Структура.Вставить("торо_ИспользоватьВремяУчетаРецидивностиДефектов"                    , НаборКонстант.торо_ИспользоватьВремяУчетаРецидивностиДефектов);
    Структура.Вставить("торо_ВремяУчетаРецидивностиДефектов"                                , НаборКонстант.торо_ВремяУчетаРецидивностиДефектов);
		
	// Планирование ТОиР
	Структура.Вставить("торо_ИспользоватьППР"                                               , НаборКонстант.торо_ИспользоватьППР);
	Структура.Вставить("торо_ИспользоватьФоновыйРасчетППР"                                  , НаборКонстант.торо_ИспользоватьФоновыйРасчетППР);
	Структура.Вставить("торо_НеПересчитыватьППРВФонеПослеОшибки"                            , НаборКонстант.торо_НеПересчитыватьППРВФонеПослеОшибки);
	Структура.Вставить("торо_УчетЗамещающихРемонтов"                                        , НаборКонстант.торо_УчетЗамещающихРемонтов);
	Структура.Вставить("торо_ИспользоватьКоэффициентыРемонтныхОсобенностей"                 , НаборКонстант.торо_ИспользоватьКоэффициентыРемонтныхОсобенностей);
	Структура.Вставить("торо_ИспользоватьРегламентныеМероприятия"                           , НаборКонстант.торо_ИспользоватьРегламентныеМероприятия);
	Структура.Вставить("торо_ИспользоватьОстановочныеРемонты"                               , НаборКонстант.торо_ИспользоватьОстановочныеРемонты);
	Структура.Вставить("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам"                    , НаборКонстант.торо_ИспользоватьПланированиеПоЖесткимРемЦиклам);
	Структура.Вставить("торо_ИспользоватьЛимитыРемонтов"                                  	, НаборКонстант.торо_ИспользоватьЛимитыРемонтов);
	Структура.Вставить("торо_ИспользоватьОценкиРМ"                                          , НаборКонстант.торо_ИспользоватьОценкиРМ);
	Структура.Вставить("торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании"          , НаборКонстант.торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании);
	Структура.Вставить("торо_ИспользоватьЛоты"                                              , НаборКонстант.торо_ИспользоватьЛоты);
	Структура.Вставить("торо_ИспользоватьСметыРемонта"                                      , НаборКонстант.торо_ИспользоватьСметыРемонта);
	Структура.Вставить("торо_РазрешитьВводНесколькихСметПоРемонту"                          , НаборКонстант.торо_РазрешитьВводНесколькихСметПоРемонту);
	Структура.Вставить("торо_ИспользоватьОбщийПланРабот"                                    , НаборКонстант.торо_ИспользоватьОбщийПланРабот);
	Структура.Вставить("торо_ИспользоватьСкользящееПланирование"                            , НаборКонстант.торо_ИспользоватьСкользящееПланирование);
	Структура.Вставить("торо_ИспользоватьВнешниеОснованияДляРабот"                          , НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот);
	Структура.Вставить("торо_ИспользоватьПриоритетностьПеренесенныхРемонтов"                , НаборКонстант.торо_ИспользоватьПриоритетностьПеренесенныхРемонтов);
	
	// Управление нарядами и работами
	Структура.Вставить("торо_ИспользоватьНарядыНаВыполнениеРабот"                           , НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот);
	Структура.Вставить("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно" , НаборКонстант.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно);
	Структура.Вставить("торо_ИспользоватьОпасноеПроизводство"                               , НаборКонстант.торо_ИспользоватьОпасноеПроизводство);
	Структура.Вставить("торо_ИспользоватьВозможностьОтменыРемонтов"                         , НаборКонстант.торо_ИспользоватьВозможностьОтменыРемонтов);
	Структура.Вставить("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов"                   , НаборКонстант.торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов);
	Структура.Вставить("торо_ЗапретитьПроведениеАктовСИсполнителямиБезКвалификаций"         , НаборКонстант.торо_ЗапретитьПроведениеАктовСИсполнителямиБезКвалификаций);
	Структура.Вставить("торо_ЗапретитьПроведениеАктовБезВремениРаботыИсполнителей"          , НаборКонстант.торо_ЗапретитьПроведениеАктовБезВремениРаботыИсполнителей);
	Структура.Вставить("торо_ЗапретитьПересечениеВремениРаботыСотрудниковСОдинаковойКвалификацией" , НаборКонстант.торо_ЗапретитьПересечениеВремениРаботыСотрудниковСОдинаковойКвалификацией);
	Структура.Вставить("торо_ИспользоватьНарядыНаРегламентноеМероприятие"                   , НаборКонстант.торо_ИспользоватьНарядыНаРегламентноеМероприятие);
	Структура.Вставить("торо_ИспользоватьАктПриемкиОборудования"                            , НаборКонстант.торо_ИспользоватьАктПриемкиОборудования);
	Структура.Вставить("торо_КонтролироватьВремяРаботыСотрудниковВАктах"                    , НаборКонстант.торо_КонтролироватьВремяРаботыСотрудниковВАктах);
	Структура.Вставить("торо_ИспользоватьКомиссии"                                          , НаборКонстант.торо_ИспользоватьКомиссии);

	// МТО
	Структура.Вставить("торо_ИспользоватьАналогиНоменклатурыДляРемонтов"                    , НаборКонстант.торо_ИспользоватьАналогиНоменклатурыДляРемонтов);
	Структура.Вставить("торо_ИспользоватьХарактеристикиНоменклатуры"                        , НаборКонстант.торо_ИспользоватьХарактеристикиНоменклатуры);
	Структура.Вставить("ИспользоватьСерииНоменклатуры"                                      , НаборКонстант.ИспользоватьСерииНоменклатуры);
	Структура.Вставить("торо_ЗапретитьВводЗаказовНаВнутреннееПотреблениеБезЗаявки"          , НаборКонстант.торо_ЗапретитьВводЗаказовНаВнутреннееПотреблениеБезЗаявки);
    Структура.Вставить("торо_ЗапретитьВводПотребленияБезАкта"                               , НаборКонстант.торо_ЗапретитьВводПотребленияБезАкта);
	Структура.Вставить("торо_ВводПотребленияНаОснованииПроведенногоАкта"                    , НаборКонстант.торо_ВводПотребленияНаОснованииПроведенногоАкта);
	Структура.Вставить("торо_ВводОприходованияНаОснованииПроведенногоАкта"                  , НаборКонстант.торо_ВводОприходованияНаОснованииПроведенногоАкта);
	Структура.Вставить("торо_ВводЗаказовНаОснованииПроведенногоДокумента"                   , НаборКонстант.торо_ВводЗаказовНаОснованииПроведенногоДокумента);
	Структура.Вставить("торо_УчитыватьСтатистикуПотребления"      				            , НаборКонстант.торо_УчитыватьСтатистикуПотребления);
	Структура.Вставить("торо_ПериодРасчетаСтатистикиПотребления"      				        , НаборКонстант.торо_ПериодРасчетаСтатистикиПотребления);
	Структура.Вставить("торо_РасширенныйРежимМТО"      				                        , НаборКонстант.торо_РасширенныйРежимМТО);
	
	// Интеграции
	Структура.Вставить("ИспользоватьСинхронизациюДанных"                         			, НаборКонстант.ИспользоватьСинхронизациюДанных);
	Структура.Вставить("торо_ИспользоватьСинхронизациюСERP"                         		, НаборКонстант.торо_ИспользоватьСинхронизациюСERP);
	Структура.Вставить("торо_ИнтеграцияЗаказовСERP"                         				, НаборКонстант.торо_ИнтеграцияЗаказовСERP);
	Структура.Вставить("торо_ИспользоватьИнтеграциюСАИСДиспетчер"                           , НаборКонстант.торо_ИспользоватьИнтеграциюСАИСДиспетчер);
	Структура.Вставить("торо_ИспользоватьВыгрузкуЗагрузкуMSProject"                         , НаборКонстант.торо_ИспользоватьВыгрузкуЗагрузкуMSProject);
	Структура.Вставить("торо_ИнтеграцияСПромБезопасностью"                                  , НаборКонстант.торо_ИнтеграцияСПромБезопасностью);
	Структура.Вставить("торо_ПоказыватьПодсистемуИнтеграцияАСУТП"                           , НаборКонстант.торо_ПоказыватьПодсистемуИнтеграцияАСУТП);
		
	СтруктураДляСозданияНовойНастройки.Вставить("Константы",Структура);
	
	Структура = Новый Структура;
	
	Для каждого Элемент Из СоответствиеРеквизитов Цикл
		Структура.Вставить(Элемент.Ключ,ЭтаФорма[Элемент.Значение]);
	КонецЦикла; 
	
	СтруктураДляСозданияНовойНастройки.Вставить("ВводНаОсновании",Структура);
	
	Возврат СтруктураДляСозданияНовойНастройки;
		
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройкиИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Выбор файла для загрузки.
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Диалог.Заголовок					= НСтр("ru = 'Выберите файл'");
		Диалог.ПредварительныйПросмотр  	= Ложь;
		Диалог.Фильтр   					= НСтр("ru = 'Файл XML (*.xml)|*.xml'");
		Диалог.Расширение   				= "xml";
		Диалог.ПроверятьСуществованиеФайла  = Истина;
		Диалог.МножественныйВыбор			= Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВосстановитьНастройкиИзФайлаПослеВыбораФайла", ЭтотОбъект);
		Диалог.Показать(ОписаниеОповещения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиИзФайлаПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		ИмяФайла = ВыбранныеФайлы[0];
		
		// Записываются текст и параметры запроса в файл.
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			СтруктураНастроек = ЗагрузитьНастройкиИзФайла(ДвоичныеДанные);
			Если СтруктураНастроек <> Неопределено Тогда
				ОбработкаОповещения("ОБРАБОТКА_ВЫБОРА_СЦЕНАРИЯ",СтруктураНастроек,Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиИзФайла(ДвоичныеДанные)
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("МассивСтруктурЗначенийКонстант");
	СтруктураНастроек.Вставить("СоответствиеВводНаОсновании");
	
	МассивСтруктурЗначенийКонстант = Новый Структура;
	Соответствие = Новый Соответствие;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ИмяФайла);
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ИмяФайла);
	ФайлXML.Прочитать();

	ЭтоПодходящийФайл = Ложь;
	
	Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "НастройкиТОИР" Тогда
		
		ЭтоПодходящийФайл = Истина;
				
		Пока ФайлXML.Прочитать() Цикл 
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "ФункциональныеОпции" Тогда 
								
				ИмяАтрибута = "";
				ЗначениеАтрибута = Ложь;
				
				Пока ФайлXML.ПрочитатьАтрибут() Цикл 
					Если ФайлXML.Имя = "name" Тогда
						
						ИмяАтрибута =  ФайлXML.Значение;
						
					ИначеЕсли ФайлXML.Имя = "value" Тогда
						ЗначениеАтрибута = XMLЗначение(Тип("Булево"), ФайлXML.Значение);
					КонецЕсли;
				КонецЦикла; 
				
				// Добавление константы
				Если ИмяАтрибута = "" Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСтруктурЗначенийКонстант.Вставить(ИмяАтрибута, ЗначениеАтрибута);//.Добавить(Структура);
			ИначеЕсли ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "ВводНаОсновании" Тогда 
				ИмяАтрибута = "";
				ЗначениеАтрибута = Ложь;
				
				Пока ФайлXML.ПрочитатьАтрибут() Цикл 
					Если ФайлXML.Имя = "name" Тогда
						
						ИмяАтрибута =  ФайлXML.Значение;
						
					ИначеЕсли ФайлXML.Имя = "value" Тогда
						ЗначениеАтрибута = XMLЗначение(Тип("Булево"), ФайлXML.Значение);
					КонецЕсли;
				КонецЦикла;
				
				Если ИмяАтрибута = "" Тогда
					Продолжить;
				КонецЕсли;
				
				Соответствие.Вставить(ИмяАтрибута, ЗначениеАтрибута);

			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	ФайлXML.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	
	Если Не ЭтоПодходящийФайл Тогда
		ТекстСообщения = НСтр("ru = 'Выбранный файл не содержит сохраненных настроек для конфигурации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли; 
	
	СтруктураНастроек.МассивСтруктурЗначенийКонстант = МассивСтруктурЗначенийКонстант;
	СтруктураНастроек.СоответствиеВводНаОсновании    = Соответствие;
	
	мМодифицированностьФО               = Истина;
	мМодифицированностьВводаНаОсновании = Истина;

	Возврат СтруктураНастроек;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСоответствие(СоответствиеРеквизитов)
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_СостоянияОбъектовРемонта","АктМероприятийСостояние");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_УчетКонтролируемыхПоказателей","АктМероприятийПоказатели");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_УчетНаработкиОборудования","АктМероприятийНаработка");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииЭтапаРабот_торо_СостоянияОбъектовРемонта","АктСостояние");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииЭтапаРабот_торо_УчетКонтролируемыхПоказателей","АктКонтролируемыеПоказатели");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииЭтапаРабот_торо_УчетНаработкиОборудования","АктНаработка");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииЭтапаРабот_торо_АктПриемкиОборудования", "АктАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_АктОВыполненииЭтапаРабот","ВнешнееОснованиеАкт");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_ВыявленныеДефекты","ВнешнееОснованиеДефект");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_ЗаявкаНаРемонт","ВнешнееОснованиеЗаявка");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_НарядНаВыполнениеРемонтныхРабот","ВнешнееОснованиеНаряд");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_АктПриемкиОборудования", "ВнешнееОснованиеАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_АктОВыполненииЭтапаРабот","ДефектАкт");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_ЗаявкаНаРемонт","ДефектЗаявка");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_НарядНаВыполнениеРемонтныхРабот","ДефектНаряд");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_СостоянияОбъектовРемонта","ДефектСостояние");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_УчетКонтролируемыхПоказателей","ДефектКонтролируемыеПоказатели");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_УчетНаработкиОборудования","ДефектНаработка");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_АктПриемкиОборудования", "ДефектАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_ГрафикРегламентныхМероприятийТОиР_торо_АктОВыполненииРегламентногоМероприятия","ГрафикМероприятийАктМероприятий");
	СоответствиеРеквизитов.Вставить("торо_ГрафикРегламентныхМероприятийТОиР_торо_НарядНаРегламентноеМероприятие","ГрафикМероприятийНарядМероприятий");
	СоответствиеРеквизитов.Вставить("торо_ЗаявкаНаРемонт_торо_АктОВыполненииЭтапаРабот","ЗаявкаАкт");
	СоответствиеРеквизитов.Вставить("торо_ЗаявкаНаРемонт_торо_НарядНаВыполнениеРемонтныхРабот","ЗаявкаНаряд");
	СоответствиеРеквизитов.Вставить("торо_ЗаявкаНаРемонт_торо_АктПриемкиОборудования", "ЗаявкаАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_НарядНаВыполнениеРемонтныхРабот_торо_АктОВыполненииЭтапаРабот","НарядАкт");
	СоответствиеРеквизитов.Вставить("торо_НарядНаРегламентноеМероприятие_торо_АктОВыполненииРегламентногоМероприятия","НарядМероприятийАктМероприятий");
	СоответствиеРеквизитов.Вставить("торо_НарядНаРегламентноеМероприятие_торо_АктОВыполненииРегламентногоМероприятия","НарядМероприятийАктМероприятий");
	СоответствиеРеквизитов.Вставить("торо_ПланГрафикРемонта_торо_АктОВыполненииЭтапаРабот","ППРАкт");
	СоответствиеРеквизитов.Вставить("торо_ПланГрафикРемонта_торо_ЗаявкаНаРемонт","ППРЗаявка");
	СоответствиеРеквизитов.Вставить("торо_ПланГрафикРемонта_торо_НарядНаВыполнениеРемонтныхРабот","ППРНаряд");
	СоответствиеРеквизитов.Вставить("торо_ПланГрафикРемонта_торо_АктПриемкиОборудования", "ППРАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_СостоянияОбъектовРемонта_торо_ВыявленныеДефекты","СостояниеДефект");
	СоответствиеРеквизитов.Вставить("торо_УчетКонтролируемыхПоказателей_торо_ВыявленныеДефекты","КонтролируемыеПоказателиДефект");	
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_ВыявленныеДефекты","АктРегламентныхДефект");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_ВнешнееОснованиеДляРабот","АктРегламентныхВнешнееОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(РеглЗадание)
	
	#Если НЕ МобильныйКлиент Тогда
	
	ЭтотОбъект[РеглЗадание + "Расписание"] = ПолучитьРаспианиеРегламентногоЗадания(РеглЗадание);
	
	Обработчик = Новый ОписаниеОповещения("РегламентныеЗаданияПослеИзмененияРасписания", ЭтотОбъект, РеглЗадание);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭтотОбъект[РеглЗадание + "Расписание"]);
	Диалог.Показать(Обработчик);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПослеИзмененияРасписания(Расписание, РеглЗадание) Экспорт
	
	Если Расписание <> Неопределено Тогда
		ЭтотОбъект[РеглЗадание + "Расписание"] = Расписание; 
		ЗаписатьРаспианиеРегламентногоЗадания(РеглЗадание, Расписание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВРегистреНетЗаписейПоСтатусам(МассивОР)
	Запрос = Новый Запрос(); 	
	Запрос.Параметры.Вставить("СтатусОР", Перечисления.торо_СтатусыОРВУчете.СнятоСУчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
	               |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
	               |		ПО торо_ОбъектыРемонта.Ссылка = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
	               |ГДЕ
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта ЕСТЬ NULL
	               |	И НЕ торо_ОбъектыРемонта.ТипОбъекта ЕСТЬ NULL";
	Результат = Запрос.Выполнить();
	
	ТаблицаОР = Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаОР Цикл
		Мас = Новый Массив(2); 		
		Мас.Вставить(0, Строка.ОбъектРемонта);
		Мас.Вставить(1, Строка.ДатаВводаВЭксплуатацию);
		МассивОР.Добавить(Мас);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ПроверитьНаличиеАктивныхПользователей()
	
	ЕстьАктивныеПользователи = Ложь;
	НомерСеанса = НомерСеансаИнформационнойБазы();
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого С Из Сеансы Цикл
		Если С.ИмяПриложения <> "Designer" И С.НомерСеанса <> НомерСеанса Тогда
			ЕстьАктивныеПользователи = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ЕстьАктивныеПользователи;
КонецФункции

&НаКлиенте
Процедура ЗавершениеПроверкиПередЗаписью(Результат, ДопПараметры) Экспорт
	
	Если Результат = "Продолжить" Тогда
		ПроверятьАктивныхПользователей = Ложь;
		Перезапуск = Истина;
		Записать();
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = "АктивныеПользователи" Тогда
		ОткрытьФорму("Обработка.АктивныеПользователи.Форма");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПредставленияДанных()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ОбъектКонфигурации,
	               |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ФорматнаяСтрокаПоУмолчанию,
	               |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ОбъектКонфигурацииСиноним
	               |ИЗ
	               |	РегистрСведений.торо_ПараметрыПользовательскогоПредставленияОбъектов КАК торо_ПараметрыПользовательскогоПредставленияОбъектов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПредставлений.Добавить(),Выборка);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьНастраиваемыеПредставленияПриИзменении(Элемент)
	
	Элементы.торо_РазрешитьПользовательскуюНастройкуПредставлений.Доступность = НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления;
	Если НЕ НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления Тогда
		НаборКонстант.торо_РазрешитьПользовательскуюНастройкуПредставлений = Ложь;
	КонецЕсли;
	
	НеобходимПерезапуск = НЕ НеобходимПерезапуск;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ПоказыватьПодсистемуKPIПриИзменении(Элемент)
	Элементы.торо_АвтоматическиОбновлятьПоставляемуюМодельПоказателейKPI.Доступность = НаборКонстант.торо_ПоказыватьПодсистемуKPI;
	Если Не НаборКонстант.торо_ПоказыватьПодсистемуKPI Тогда
		НаборКонстант.торо_АвтоматическиОбновлятьПоставляемуюМодельПоказателейKPI = Ложь;
	КонецЕсли;
	
	НеобходимПерезапуск = Не НеобходимПерезапуск;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредставленийПриИзменении(Элемент)
	ЭтаФорма.Модифицированность   = Истина;
	ИзмененыЗначенияФО = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВариантСпособаНастройкиБизнесПроцессовНаСервере()
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("Обработка.торо_ПанельАдминистрированияТОиР", "СпособНастройкиБизнесПроцессов", СпособНастройкиБизнесПроцессов);
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеФМ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
	               |	И НЕ торо_ОбъектыРемонта.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ТиповыеОР.Ссылка
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР КАК торо_ТиповыеОР
	               |ГДЕ
	               |	торо_ТиповыеОР.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто)
	               |	И НЕ торо_ТиповыеОР.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область НастройкаВводаНаОсновании

&НаКлиенте                                      
Процедура ВводНаОснованииВыбор(Элемент)
	
	Если Не Элемент.ТекущийЭлемент = Неопределено Тогда
		
		мМодифицированностьВводаНаОсновании = Истина;
		ЭтаФорма.Модифицированность = Истина;
		
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
		
		НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
		
		Если ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			
			ДекоративнаяЛинияСхемыВыбор(Элемент);
						
		ИначеЕсли ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДекорация") Тогда
			
			ДекорацияСхемыВыбор(Элемент);
						
		КонецЕсли;
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ДекоративнаяЛинияСхемыВыбор(Элемент)
	
#Если НЕ ВебКлиент Тогда
	
	ИмяГрафическойСхемы = Элемент.Имя;
	ЭлементГрафСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы.Найти(Элемент.ТекущийЭлемент.Имя)");
	
	ИмяНачЭлемента = ЭлементГрафСхемы.НачалоЭлемент.Имя;
	ИмяКонЭлемента = ЭлементГрафСхемы.КонецЭлемент.Имя;
	ИмяТекЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	// Включить ввод на основании возможно только в том случае если оба документа на концах стрелки включены.
	НачЭлементМеняется = НаборКонстант.Свойство(ИмяНачЭлемента);
	КонЭлементМеняется = НаборКонстант.Свойство(ИмяКонЭлемента);				
	
	Если НачЭлементМеняется Тогда
		НачЭлементЗнач = Вычислить("НаборКонстант." + ИмяНачЭлемента);
	Иначе
		НачЭлементЗнач = Истина;
	КонецЕсли;
	
	Если КонЭлементМеняется Тогда
		КонЭлементЗнач = Вычислить("НаборКонстант." + ИмяКонЭлемента);
	Иначе
		КонЭлементЗнач = Истина;
	КонецЕсли;
	
	ИзменениеВозможно = НачЭлементЗнач И КонЭлементЗнач;
	
	Если ИзменениеВозможно Тогда
		
		СтароеЗначение = Вычислить(ИмяТекЭлемента);
		
		ИмяАктПриемки = "торо_ИспользоватьАктПриемкиОборудования";
		
		// Включить ввод акта приемки на основании документа можно только если акт вводится на основании этого документа
		Если Не СтароеЗначение И ИмяКонЭлемента = ИмяАктПриемки Тогда
			Если ИмяТекЭлемента = "АктАктПриемки" И Не АктИспользуется Тогда
				Возврат;
			ИначеЕсли АктИспользуется И Не ИмяТекЭлемента = "АктАктПриемки" И Не ПроверитьВозможностьВводаАктаПриемкиНаОсновании(ИмяТекЭлемента) Тогда
			    Возврат;
			КонецЕсли;
		КонецЕсли; 
		
		ЭтаФорма[ИмяТекЭлемента] = Вычислить("НЕ " + ИмяТекЭлемента);
		АктИспользуется = ИспользуетсяЛиАкт();
		
		// Если акт больше не используется, то необходимо отключить акт приемки оборудования
		Если ИмяКонЭлемента = "Акт" И СтароеЗначение Тогда
			Если Не АктИспользуется Тогда
			    НаборКонстант["торо_ИспользоватьАктПриемкиОборудования"] = Ложь;
				ЭлементДекорацияГрафСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы.Найти(ИмяАктПриемки)");
				ИзменитьОформлениеДекорацииГрафСхемы(ЭлементДекорацияГрафСхемы, Ложь);
				
				ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаВнешниеОснованияИДефекты", ИмяАктПриемки);
				ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаДополнительно", ИмяАктПриемки);
				ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаПланГрафикППР", ИмяАктПриемки);
				
			// Иначе отключить ввод акта приемки на основании документа, на основании которого
			// отключен ввод акта (если акт отключен не на основании наряда)
			ИначеЕсли Не ИмяНачЭлемента = "торо_ИспользоватьНарядыНаВыполнениеРабот" Тогда
				ОтключаемыйЭлементИмя = ИмяТекЭлемента + "Приемки";
				Если ЭтаФорма[ОтключаемыйЭлементИмя] Тогда
				    ЭтаФорма[ОтключаемыйЭлементИмя] = Вычислить(ИмяТекЭлемента);				
					ОтключаемыйЭлементГрафСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы.Найти(ОтключаемыйЭлементИмя)");
					ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ОтключаемыйЭлементГрафСхемы, ЭтаФорма[ОтключаемыйЭлементИмя]);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
		Элементы.ДополнительноВводНаОсновании.Видимость = АктИспользуется;
		ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ЭлементГрафСхемы, ЭтаФорма[ИмяТекЭлемента]);
		
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ИспользуетсяЛиДокумент(ИмяГрафическойСхемы, ИмяДокумента)

	ЭлементыГрафическойСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы");
	ДокументИспользуется = Ложь;
	Для каждого ДекоративнаяЛиния Из ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(ДекоративнаяЛиния) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") И ДекоративнаяЛиния.КонецЭлемент.Имя = ИмяДокумента
			И ЭтаФорма[ДекоративнаяЛиния.Имя] Тогда
		    ДокументИспользуется = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ДокументИспользуется;

КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьВводаАктаПриемкиНаОсновании(Цепочка)
	Возврат ?(ЭтаФорма[СтрЗаменить(Цепочка, "Приемки", "")], Истина, Ложь);
КонецФункции

&НаКлиенте
Процедура ДекорацияСхемыВыбор(Элемент)
	
	мМодифицированностьФО           = Истина;
	ЭтаФорма.Модифицированность     = Истина;
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
	ИзмененыЗначенияФО = Истина;
	
	ИмяГрафическойСхемы = Элемент.Имя;
	ИмяТекЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	ЭлементыГрафическойСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы");
	ЭлементГрафСхемы = ЭлементыГрафическойСхемы.Найти(ИмяТекЭлемента);			
	
	Если НаборКонстант.Свойство(ИмяТекЭлемента) Тогда
		
		Если ПроверитьВозможностьОтключенияДокументаИзГрафСхемы(ИмяГрафическойСхемы, ИмяТекЭлемента) Тогда
			
			// Включить акт приемки можно только если акт используется
			Если ИмяТекЭлемента = "торо_ИспользоватьАктПриемкиОборудования" И Не НаборКонстант[ИмяТекЭлемента] Тогда
			
				АктИспользуется = ИспользуетсяЛиДокумент("ГрафСхемаВнешниеОснованияИДефекты", "Акт");
				АктИспользуется = АктИспользуется ИЛИ ИспользуетсяЛиДокумент("ГрафСхемаПланГрафикППР", "Акт");
				Если Не АктИспользуется Тогда
				    Возврат;
				КонецЕсли; 
			
			КонецЕсли; 
			
			НаборКонстант[ИмяТекЭлемента] = Не НаборКонстант[ИмяТекЭлемента];
			ТекущееЗначение = НаборКонстант[ИмяТекЭлемента];
			ИзменитьОформлениеДекорацииГрафСхемы(ЭлементГрафСхемы, ТекущееЗначение);
			
			Если Не ТекущееЗначение Тогда
				
				// При отключении документов имеющихся на разных схемов, требуется отключить
				// связи с этим документом и на других схемах.
				ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаВнешниеОснованияИДефекты", ИмяТекЭлемента);
				ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаДополнительно", ИмяТекЭлемента);
				ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаМероприятия", ИмяТекЭлемента);
				ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаПланГрафикППР", ИмяТекЭлемента);
				
				// Некоторые константы имеют связанны константы, значения которых должны зависеть от их значений. 
				Если ИмяТекЭлемента = "торо_УчетКонтролируемыхПоказателей" Тогда
					НаборКонстант.торо_ИспользоватьРемонтыПоСостоянию 	= Ложь;
					НаборКонстант.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей = Ложь;
				ИначеЕсли ИмяТекЭлемента = "торо_ИспользоватьНарядыНаВыполнениеРабот" Тогда
					НаборКонстант.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно = Ложь;
				ИначеЕсли ИмяТекЭлемента = "торо_УчетСостоянияОборудования" Тогда
					НаборКонстант.торо_УчетПусковОборудования 	= Ложь;
					НаборКонстант.торо_НапоминатьЗафиксироватьПростой 	= Ложь;
				КонецЕсли;				
				
			КонецЕсли;
			
			// При вкл/откл документа дефектов требуется проверить настройки видимости ГрафСхемаВнешниеОснованияИДефекты.
			Если ИмяТекЭлемента = "торо_УчетВыявленныхДефектовОборудования" Тогда
				УстановитьВидимостьГрафическихСхемВводаНаОсновании();
			КонецЕсли;
			
			УстановитьДоступностьЭлементов();
			УстановитьВидимостьГрафическихСхемВводаНаОсновании();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСвязанныеСДекорациейСтрелки(ИмяГрафическойСхемы, ИмяТекЭелемента = "")
	
#Если НЕ ВебКлиент Тогда
	
	ЭлементыГрафическойСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы");
	
	Если ИмяТекЭелемента = "" Тогда
		
		Для Каждого ДекоративнаяЛиния Из ЭлементыГрафическойСхемы Цикл
			Если ТипЗнч(ДекоративнаяЛиния) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") 
				И ((НаборКонстант.Свойство(ДекоративнаяЛиния.НачалоЭлемент.Имя) И Не НаборКонстант[ДекоративнаяЛиния.НачалоЭлемент.Имя]) 
					ИЛИ (НаборКонстант.Свойство(ДекоративнаяЛиния.КонецЭлемент.Имя) И Не НаборКонстант[ДекоративнаяЛиния.КонецЭлемент.Имя]))  Тогда
				ЭтаФорма[ДекоративнаяЛиния.Имя] = Ложь;							
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ЭлементГрафСхемы = ЭлементыГрафическойСхемы.Найти(ИмяТекЭелемента);
		
		Для Каждого ДекоративнаяЛиния Из ЭлементыГрафическойСхемы Цикл
			Если ТипЗнч(ДекоративнаяЛиния) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") 
				И (ДекоративнаяЛиния.НачалоЭлемент = ЭлементГрафСхемы ИЛИ ДекоративнаяЛиния.КонецЭлемент = ЭлементГрафСхемы)  Тогда
				ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ДекоративнаяЛиния, Ложь);
				ЭтаФорма[ДекоративнаяЛиния.Имя] = Ложь;							
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
#КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ЭлементГрафСхемы, НовоеЗначение)
	
	#Если НЕ МобильныйКлиент Тогда
	
	Если НовоеЗначение Тогда
		ЭлементГрафСхемы.Линия = Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
		ЭлементГрафСхемы.ЦветЛинии = WebЦвета.Зеленый;
	Иначе
		ЭлементГрафСхемы.Линия = Новый Линия(ТипСоединительнойЛинии.Пунктир,2);
		ЭлементГрафСхемы.ЦветЛинии = WebЦвета.Серый;
	КонецЕсли;
	
	#КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеДекорацииГрафСхемы(ЭлементГрафСхемы, НовоеЗначение)
	
	Если НовоеЗначение Тогда
		ЭлементГрафСхемы.ЦветФона = WebЦвета.СветлоЗеленый;
	Иначе
		ЭлементГрафСхемы.ЦветФона = WebЦвета.СветлоСерый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхема)

	Для Каждого ЭлементГрафСхемы Из ГрафСхема.ЭлементыГрафическойСхемы Цикл
		
		Если ТипЗнч(ЭлементГрафСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ЭлементГрафСхемы, ЭтаФорма[ЭлементГрафСхемы.Имя]);
		ИначеЕсли ТипЗнч(ЭлементГрафСхемы) = Тип("ЭлементГрафическойСхемыДекорация") Тогда
			Если НаборКонстант.Свойство(ЭлементГрафСхемы.Имя) Тогда
				ИзменитьОформлениеДекорацииГрафСхемы(ЭлементГрафСхемы, НаборКонстант[ЭлементГрафСхемы.Имя]);
			КонецЕсли;
		КонецЕсли;
					
	КонецЦикла;

КонецПроцедуры

// Проверяем возможность отключения ФО документа из графической схемы. Функция нужна для случая когда происходит 
// настройка ввода на основании для цепочек начинающихся с выявленных дефектов или внешних оснований.
// Необходимо чтобы был включен хотя бы один документ или внешние основания или дефекты.
&НаКлиенте
Функция ПроверитьВозможностьОтключенияДокументаИзГрафСхемы(ИмяГрафСхемы, ИмяТекущегоЭлемента)
	
	Если ИмяГрафСхемы = "ГрафСхемаВнешниеОснованияИДефекты" И НаборКонстант[ИмяТекущегоЭлемента]
			И (ИмяТекущегоЭлемента = "торо_ИспользоватьВнешниеОснованияДляРабот" 
				Или ИмяТекущегоЭлемента = "торо_УчетВыявленныхДефектовОборудования") Тогда
				
		Возврат ?(ИмяТекущегоЭлемента = "торо_ИспользоватьВнешниеОснованияДляРабот", 
			НаборКонстант[ИмяТекущегоЭлемента] И НаборКонстант.торо_УчетВыявленныхДефектовОборудования,
			НаборКонстант[ИмяТекущегоЭлемента] И НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот);
	Иначе
		Возврат Истина;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьГрафическихСхемВводаНаОсновании()
	
	МероприятияВводНаОснованииВидимость 		= НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	ГруппаПланГрафикППРВидимость				= НаборКонстант.торо_ИспользоватьППР;
	ГруппаВнешниеОснованияИДефектыВидимость   = НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот 
															Или НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	ДополнительноВводНаОснованииВидимость		= АктИспользуется И (НаборКонстант.торо_ИспользоватьАктПриемкиОборудования
															Или НаборКонстант.торо_УчетСостоянияОборудования
															Или НаборКонстант.торо_УчетКонтролируемыхПоказателей
															Или НаборКонстант.торо_УчетНаработкиОборудования);
															
	Элементы.МероприятияВводНаОсновании.Видимость 		= МероприятияВводНаОснованииВидимость;
	Элементы.ГруппаПланГрафикППР.Видимость				= ГруппаПланГрафикППРВидимость;
	Элементы.ГруппаВнешниеОснованияИДефекты.Видимость   = ГруппаВнешниеОснованияИДефектыВидимость;
	Элементы.ДополнительноВводНаОсновании.Видимость		= ДополнительноВводНаОснованииВидимость;
	
	ВидимостьГруппыНастроек = МероприятияВводНаОснованииВидимость Или ГруппаПланГрафикППРВидимость Или ГруппаВнешниеОснованияИДефектыВидимость Или ДополнительноВводНаОснованииВидимость; 
	
	#Если ВебКлиент Тогда
		Элементы.СпособНастройкиБизнесПроцессов.Видимость = Ложь;
	#Иначе
		Элементы.СпособНастройкиБизнесПроцессов.Видимость = ВидимостьГруппыНастроек;
	#КонецЕсли
	
	Элементы.ГруппаУправлениеФлагами.Видимость = Ложь;
	Элементы.ДекорацияНеТребуетсяНастройкаБизнесПроцессов.Видимость = Не ВидимостьГруппыНастроек;
	
	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	Иначе
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоответствияДокументовИСобытий()

	Макет = РеквизитФормыВЗначение("ОбработкаОбъект").ПолучитьМакет("СоответствиеДокументовИСобытий");
	
	ОбластьДанных = Макет.ПолучитьОбласть("СоответствиеДокументовИСобытий");
	ТаблицаСоответствияДокументовИСобытий.Очистить();
	Для Сч = 1 По ОбластьДанных.ВысотаТаблицы Цикл
		СтрокаТаблицы = ТаблицаСоответствияДокументовИСобытий.Добавить();
		СтрокаТаблицы.Документ         = ОбластьДанных.Область(Сч,1,Сч,1).Текст;
		СтрокаТаблицы.Событие      = Перечисления.торо_СобытияУведомленийПользователей[ОбластьДанных.Область(Сч,2,Сч,2).Текст];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекСтатусОРВучетеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (Элементы.ТаблицаНастроек.ТекущиеДанные <> Неопределено)
		И Элементы.ТаблицаНастроек.ТекущиеДанные.СтатусОРВучете = ВыбранноеЗначение 
		Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ТаблицаНастроекЖЦ.НайтиСтроки(Новый Структура("СтатусОРВУчете", ВыбранноеЗначение));
	Если МассивСтрок.количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено, 
			СтрЗаменить(Нстр("ru = 'Статус ОР ""%Статус%"" уже выбран в другой строке.'"),"%Статус%", ВыбранноеЗначение)
			,,НСтр("ru = 'Выбор статуса...'") );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ТаблицаНастроек.ТекущиеДанные.СтатусОРВучете = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьТиповыеОРПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьКартинкиТиповыхОбъектов.Доступность = НаборКонстант.торо_ИспользоватьТиповыеОР;
	
	Если НЕ НаборКонстант.торо_ИспользоватьТиповыеОР Тогда
		НаборКонстант.торо_ИспользоватьКартинкиТиповыхОбъектов = Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры	

&НаКлиенте
Процедура торо_ИспользоватьГарантииПриИзменении(Элемент)
	
	Элементы.торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом.Доступность = НаборКонстант.торо_ИспользоватьГарантии;
		
	Если Не НаборКонстант.торо_ИспользоватьГарантии Тогда
		НаборКонстант.торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом 	= Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьВыгрузкуЗагрузкуMSProjectПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);	

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСинхронизациюДанныхПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьСинхронизациюДанных = Ложь
		И НаборКонстант.торо_ИспользоватьСинхронизациюСERP = Истина Тогда
	
		НаборКонстант.торо_ИспользоватьСинхронизациюСERP = Ложь;
	
	КонецЕсли; 
			
	Элементы.торо_ИспользоватьСинхронизациюСERP.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных И КлючКОРПДоступен;
	ВидимостьНастроекМТО();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииНоменклатурыПриИзменении(Элемент)

	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекДоступностьФлагаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЗначениеПоУмолчаниюПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура торо_НапоминатьЗафиксироватьПростойПриИзменении(Элемент)
	Элементы.торо_КоличествоДнейСмещенияВДефектеДляПростоев.Доступность = НаборКонстант.торо_НапоминатьЗафиксироватьПростой;
		
	Если Не НаборКонстант.торо_НапоминатьЗафиксироватьПростой Тогда
		НаборКонстант.торо_КоличествоДнейСмещенияВДефектеДляПростоев = 0;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСправочникиДляНазначенияНаРемонтСУчетомРисков()
	
	торо_ЗаполнениеДокументов.ЗаполнитьСправочникДаннымиИзМакета("торо_ОбъектыВоздействия");
	торо_ЗаполнениеДокументов.ЗаполнитьСправочникДаннымиИзМакета("торо_КатегорииВероятности");
	торо_ЗаполнениеДокументов.ЗаполнитьСправочникДаннымиИзМакета("торо_КатегорииТяжестиПоследствий");
	Справочники.торо_КатегорииРиска.ЗаполнитьСправочникНачальнымиДанными();
	РегистрыСведений.торо_Последствия.ЗагрузитьИзКлассификатора();
	
	ТекстСообщения = НСтр("ru = 'Процедура заполнения справочников завершена'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьРаспианиеРегламентногоЗадания(РегламентноеЗадание)
	
	Возврат РегламентныеЗадания.НайтиПредопределенное(РегламентноеЗадание).Расписание;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьРаспианиеРегламентногоЗадания(РегламентноеЗадание, Расписание)
	
	РегламентноеЗаданиеФоновыйРасчет = РегламентныеЗадания.НайтиПредопределенное(РегламентноеЗадание);
	
	Если РегламентноеЗаданиеФоновыйРасчет.Расписание <> Расписание Тогда
		РегламентноеЗаданиеФоновыйРасчет.Расписание = Расписание;
		РегламентноеЗаданиеФоновыйРасчет.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасположениеЗакладокДляВебКлиента()
	
	// Для обхода ошибки в платформе 8.3.14.1565 в веб-клиенте.
	Элементы.СтраницыНастройкаФО.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.ГруппаРемонты.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.ГруппаМероприятия.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.ГруппаДополнительно.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.ГруппыРемонтыВводНаОсновании.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьНастроекМТО()
	Если НаборКонстант.торо_РасширенныйРежимМТО = Ложь Тогда
		НаборКонстант.торо_ДатаПереходаМТО = "";
	КонецЕсли;
	
	Если НЕ НаборКонстант.ИспользоватьСинхронизациюДанных Тогда
		НаборКонстант.торо_ИнтеграцияЗаказовСERP = Ложь;
	КонецЕсли;
	
	Элементы.торо_ДатаПереходаМТО.Доступность = НаборКонстант.торо_РасширенныйРежимМТО;
	Элементы.НастроитьРасписаниеАктуализация.Доступность = НаборКонстант.торо_РасширенныйРежимМТО;
	Элементы.ЗаказыСОтборомПоДате.Доступность = НаборКонстант.торо_РасширенныйРежимМТО И ЗначениеЗаполнено(НаборКонстант.торо_ДатаПереходаМТО);
	Элементы.торо_ИнтеграцияЗаказовСERP.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
КонецПроцедуры

&НаКлиенте
Процедура торо_РасширенныйРежимМТОПриИзменении(Элемент)
	Если НаборКонстант.торо_РасширенныйРежимМТО = Истина Тогда
		СтрокаПредупреждения = НСтр("ru = 'Внимание! Необходимо задать дату перехода на новую систему учета МТО и 
		|вручную удалить все заказы на внутреннее потребление, у которых дата отгрузки позднее даты перехода на новую систему учета МТО.
		|Так же необходимо настроить регламентное задание ""Актуализировать заказы по потребностям"". '");
    Иначе
		СтрокаПредупреждения = НСтр("ru = 'Внимание! Созданные во время действия новой системы учета МТО программно заказы на внутреннее потребление 
				|останутся нередактируемыми и не будут обновляться автоматически!'");
	КонецЕсли; 
	ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаПредупреждения);	
	ВидимостьНастроекМТО();
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСинхронизациюСERPПриИзменении(Элемент)
	ВидимостьНастроекМТО();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеАктуализация(Команда)
		НастроитьРасписание("торо_АктуализироватьЗаказыПоПотребностям");
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСОтборомПоДате(Команда)
	// Вставить содержимое обработчика.
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("торо_СозданПоПотребности", Ложь);
	СписокПараметров.Вставить("ДатаОтгрузки", НаборКонстант.торо_ДатаПереходаМТО);
	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаСписка", СписокПараметров, , Истина);
КонецПроцедуры

&НаКлиенте
Процедура торо_ДатаПереходаМТОПриИзменении(Элемент)
	ВидимостьНастроекМТО(); 
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовНастройкиСпособовРезервирования(ВыводитьСообщения = Ложь)
	Если НаборКонстант.торо_СпособРезервированияМатериалов = ПредопределенноеЗначение("Перечисление.торо_СпособыРезервированияМатериалов.СУчетомКритичности") Тогда 
		Элементы.НастройкиПараметровРезервирования.Видимость = Истина;
		ВидимостьКритичностиДефектов = Ложь;
		ВидимостьКритичностиОР = Ложь;
		ПроверкаЗаполненияСправочниковКритичности(ВидимостьКритичностиДефектов, ВидимостьКритичностиОР);
		Элементы.КритичностьДефектов.Видимость = ВидимостьКритичностиДефектов;
		Элементы.КритичностьОбъктовРемонта.Видимость = ВидимостьКритичностиОР;
		Если ВыводитьСообщения И ВидимостьКритичностиДефектов Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В справочнике ""Критичность дефектов"" есть элементы с незаполненным реквизитом ""Порядок"".'"));
		КонецЕсли;
		Если ВыводитьСообщения И ВидимостьКритичностиОР Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В справочнике ""Критичность объектов ремонта"" есть элементы с незаполненным реквизитом ""Значение"".'"));
		КонецЕсли;
	Иначе
		Элементы.НастройкиПараметровРезервирования.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверкаЗаполненияСправочниковКритичности(ВидимостьКритичностиДефектов, ВидимостьКритичностиОР)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_КритичностьДефекта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.торо_КритичностьДефекта КАК торо_КритичностьДефекта
	               |ГДЕ
	               |	торо_КритичностьДефекта.Порядок = 0
	               |	И НЕ торо_КритичностьДефекта.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_ПриоритетыОбъектовРемонта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.торо_ПриоритетыОбъектовРемонта КАК торо_ПриоритетыОбъектовРемонта
	               |ГДЕ
	               |	торо_ПриоритетыОбъектовРемонта.Значение = 0
	               |	И НЕ торо_ПриоритетыОбъектовРемонта.ПометкаУдаления";
	РезЗапроса = Запрос.ВыполнитьПакет();
	ВидимостьКритичностиДефектов = НЕ РезЗапроса[0].Пустой();
	ВидимостьКритичностиОР = НЕ РезЗапроса[1].Пустой();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДатыПринятияКУчетуОР()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СтатусыОРВУчете.Регистратор КАК Ссылка,
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(торо_СтатусыОРВУчете.Регистратор) КАК СсылкаПредставление,
	               |	торо_СтатусыОРВУчете.ОбъектРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	               |	торо_СтатусыОРВУчете.ОбъектРемонта КАК ОбъектРемонта,
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(торо_СтатусыОРВУчете.ОбъектРемонта) КАК ОбъектРемонтаПредставление,
	               |	торо_СтатусыОРВУчете.Период КАК ДатаВводаВУчете
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних КАК торо_СтатусыОРВУчете
	               |ГДЕ
	               |	торо_СтатусыОРВУчете.Регистратор ССЫЛКА Документ.торо_ПринятиеОРКУчету
	               |	И торо_СтатусыОРВУчете.ОбъектРемонта.ДатаВводаВЭксплуатацию <> торо_СтатусыОРВУчете.Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
	    Попытка
		    ДокументОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДатаВводаВЭксплуатацию = Макс(ВыборкаЗапроса.ДатаВводаВЭксплуатацию, ВыборкаЗапроса.ДатаВводаВУчете);
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru = 'У объекта ремонта <%1> дата ввода в эксплуатацию отличается от даты в документе <%2>.
											|Не удалось изменить дату в документе по причине: %3'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаЗапроса.ОбъектРемонтаПредставление, ВыборкаЗапроса.СсылкаПредставление, ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаЗапроса.ОбъектРемонта);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИзменениеФлажкаИспользоватьДокументыПринятияИСписанияОборудованияЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Обработка.торо_ПанельАдминистрированияТОиР.Форма.ФормаПереходаКИспользованиюДокументовЖЦ", 
			Новый Структура("ОткрытаИзНастроек, МассивОР", Истина, ДопПараметры.МассивОР),,,,,Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	мМодифицированностьФО         = Истина;
	
	ЭтаФорма.Модифицированность   = Истина;
	
	ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлеменовПоСериямСЛК()
	КлючКОРПДоступен = Истина;
	Если НЕ слкМенеджерЗащитыСервер.СерияЗащитыИнициализирована("28DD", Истина) Тогда
		КлючКОРПДоступен = Ложь;
		Если слкМенеджерЗащитыСервер.СерияЗащитыИнициализирована("5DD5", Истина) Тогда 
			НаборИмен = торо_СЛКСервер.ПолучитьНаборКонстантБлокируемыхВПРОФ();
			торо_СЛКСервер.ЗадатьФункциональныеОпцииДляПРОФ(Ложь, НаборИмен); 
			Для Каждого ИмяКонстанты Из НаборИмен Цикл
				Элемент = Элементы.Найти(ИмяКонстанты);
				Если Элемент <> Неопределено Тогда 
					Элемент.ТолькоПросмотр = Истина; 
					Элемент.Доступность = Ложь;
				КонецЕсли;
				Элементы.ГруппаИспользованиеФМ.Доступность = Ложь;
			КонецЦикла;
		Иначе
			ЭтаФорма.ТолькоПросмотр = Истина;
			Элементы.ГруппаВерсияППР.Доступность = Ложь;
			Элементы.ГрафСхемаВнешниеОснованияИДефекты.Доступность = Ложь;
			Элементы.ГрафСхемаПланГрафикППР.Доступность = Ложь;
			Элементы.ГрафСхемаМероприятия.Доступность = Ложь;
			Элементы.ГрафСхемаДополнительно.Доступность = Ложь;
			Элементы.Группа11.Доступность = Ложь;
			Элементы.ПринятиеОРКУчету.Доступность = Ложь;
			Элементы.ОткрытьНастройкуПараметровОповещенияОПроверкеТребованийФМ.Доступность = Ложь;
			Элементы.НастроитьРасписаниеПроверкаТребованийФМ.Доступность = Ложь;
			Элементы.ЗаполнитьИзКлассификатора.Доступность = Ложь;
			Элементы.НастроитьРасписаниеФоновыйРасчет.Доступность = Ложь;
			Элементы.Группа23.Доступность = Ложь;
			Элементы.Резервирование.Доступность = Ложь;
			Элементы.ВерхниеКнопкиНапоминанияИУведомления.Доступность = Ложь;
			Элементы.ФормаКомандаЗаполнить.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВключитьУчетСостояний()
	
	Если НаборКонстант.торо_УчетНаработкиОборудования И НаборКонстант.торо_ИспользоватьППР Тогда
		НаборКонстант.торо_УчетСостоянияОборудования = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьУчетСостояний();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьУчетСостояний()
	
	УчетСостоянийОбязателен = НаборКонстант.торо_УчетНаработкиОборудования И НаборКонстант.торо_ИспользоватьППР;
	
	Элементы.торо_УчетСостоянияОборудования.Доступность = НЕ УчетСостоянийОбязателен;
	Элементы.ПодсказкаОбязательностиУчетаСостояний.Видимость = УчетСостоянийОбязателен;
	
	Элементы.торо_УчетПусковОборудования.Доступность = НаборКонстант.торо_УчетСостоянияОборудования;
	Элементы.торо_НапоминатьЗафиксироватьПростой.Доступность = НаборКонстант.торо_УчетСостоянияОборудования;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРецидивныеДефектыЗаПериод(ДатаНачала, ДатаОкончания)
			
	Константы.торо_ВремяУчетаРецидивностиДефектов.Установить(НаборКонстант.торо_ВремяУчетаРецидивностиДефектов);
	Константы.торо_ИспользоватьВремяУчетаРецидивностиДефектов.Установить(Истина);	
	торо_УчетДефектов.ПересчитатьРецидивныеДефектыЗаПериод(ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьСписокПодбора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПодбора()
          Диалог = Новый ДиалогРедактированияСтандартногоПериода();
          Диалог.Период = Новый СтандартныйПериод(НачалоГода(ТекущаяДата()),КонецГода(ТекущаяДата()));
          Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт 
	Если Период <> Неопределено Тогда
		Диалог = ДополнительныеПараметры.Диалог;
		ДатаНачала = Период.ДатаНачала;
		ДатаОкончания = Период.ДатаОкончания;
		ПересчитатьРецидивныеДефектыЗаПериод(ДатаНачала,ДатаОкончания);
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Пересчет данных завершен.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотреблениеПриИзмененииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не (ЗначениеЗаполнено(РезультатЗакрытия) И ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("Результат")) Тогда
		//НаборКонстант.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление = Ложь;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.Результат = "Ошибка" Тогда
	    //НаборКонстант.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление = Ложь;
		
		ТекстСообщения = НСтр("ru = 'В процессе заполнения реквизита документов произошла ошибка. Не у всех документов заполнен реквизит. Подробнее см. в журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

ЗаполнитьСоответствие(СоответствиеРеквизитов);

#Если Клиент Тогда
	ИзмененыЗначенияФО = Ложь;
	ПроверятьАктивныхПользователей = Истина;
#КонецЕсли

#КонецОбласти
