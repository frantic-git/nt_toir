#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("ОткрытаИзНастроек") Тогда
		ТекстСообщения = НСтр("ru = 'Форму можно открыть если ранее не использовались документы принятия и списания объектов ремонта.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли; 
	
	Если Не Отказ Тогда
		ЗаполнитьДеревоОбъектовРемонта(Отказ);
		
		ФлагИерархическийПросмотр = Ложь;
		Элементы.ФормаИерархическийПросмотр.Пометка = ФлагИерархическийПросмотр;
		Элементы.ТаблицаСОбъектамиРемонта.Видимость = НЕ ФлагИерархическийПросмотр;
		Элементы.ДеревоСОбъектамиРемонта.Видимость = ФлагИерархическийПросмотр;
		Элементы.ФормаНастройкаИерархии.Видимость = ФлагИерархическийПросмотр;

		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);
		
		ИерархияДляВводаНовыхОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();		
		Если НЕ ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
			ТекСтруктураИерархии = ИерархияДляВводаНовыхОР;
		КонецЕсли;
		
		торо_РаботаСИерархией20.ЗаполнитьПараметрыИерархии(ЭтаФорма); 
		
		Если ФлагИерархическийПросмотр Тогда 
			ПостроитьДеревоИерархии();
		КонецЕсли;
			
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		
		Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Элементы.ФормаИерархическийПросмотр.Пометка Тогда 
		Элементы.ДеревоСОбъектамиРемонта.Развернуть(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСОбъектамиРемонта

&НаКлиенте
Процедура ДеревоСОбъектамиРемонтаДатаВводаВЭксплуатациюПриИзменении(Элемент)
	ИзменитьДатуИПометкуВТаблице();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСОбъектамиРемонтаПометкаПриИзменении(Элемент)
	ИзменитьДатуИПометкуВТаблице();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоОбъектовРемонта(Отказ)
	
	ОсновнаяИерархия = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	
	Если Не ЗначениеЗаполнено(ОсновнаяИерархия) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена константа ""Иерархия для ввода новых ОР"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли; 
	
	ТаблицаСОбъектамиРемонта.Очистить();
	МассивОР = Параметры.МассивОР;
	
	Для Каждого ЭлементМассива Из МассивОР Цикл
		НС = ТаблицаСОбъектамиРемонта.Добавить();
		НС.ОбъектРемонта = ЭлементМассива[0];
		НС.ДатаВводаВЭксплуатацию = ЭлементМассива[1];
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьДокументыПринятияКУчетуНаСервере(МассивОбъектов, Организация, Подразделение, ВсеДокументыСозданы)
	
	Ответственный = Пользователи.АвторизованныйПользователь();
	Комментарий   = "Документ создан системой при установке флага ""Использовать документы принятия и списания оборудования""";
	
	Для каждого ЭлементМассива Из МассивОбъектов Цикл
		
		ОбъектРемонта          = ЭлементМассива.ОбъектРемонта;
		ДатаВводаВЭксплуатацию = ЭлементМассива.ДатаВводаВЭксплуатацию;
		
		ДокументОбъект = Документы.торо_ПринятиеОРКУчету.СоздатьДокумент();
		
		ДокументОбъект.ДатаВводаВЭксплуатацию = ДатаВводаВЭксплуатацию;
		ДокументОбъект.ОбъектРемонта          = ОбъектРемонта;
		ДокументОбъект.Организация            = ?(ЗначениеЗаполнено(ОбъектРемонта.Организация), ОбъектРемонта.Организация, Организация);
		ДокументОбъект.Подразделение          = ?(ЗначениеЗаполнено(ОбъектРемонта.Подразделение), ОбъектРемонта.Подразделение, Подразделение);
		ДокументОбъект.Дата                   = ТекущаяДата();
		ДокументОбъект.Ответственный          = Ответственный;
		ДокументОбъект.Комментарий            = Комментарий;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ШаблонСообщения = НСтр("ru = 'Объект ремонта <%1> принят к учету.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось провести документ <Принятие объекта ремонта к учету> для объекта ремонта <%1>'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ВсеДокументыСозданы = Ложь;
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоРекурсивно(ТекУровеньОР, СтрокиДерева, ЭтоНижнийУровень)
	Запрос = Новый Запрос;
	Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии
		               |ПОМЕСТИТЬ ВТ_Срез
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		               |ГДЕ
		               |	НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_Срез.ОбъектИерархии КАК ОбъектИерархии,
		               |	ВТ_Срез.РодительИерархии КАК РодительИерархии,
		               |	ВТ_Срез.ОбъектИерархии.ЭтоГруппа КАК ЭтоГруппа,
		               |	ВТ_Срез.ОбъектИерархии.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		               |	ВТ_Срез.ОбъектИерархии.ПометкаУдаления КАК ПометкаУдаления,
		               |	НЕ ВТ_Срез1.ОбъектИерархии ЕСТЬ NULL КАК ЭтоСоставной,
		               |	ВТ_Срез.ОбъектИерархии.ТипОбъекта КАК ТипОбъекта
		               |ИЗ
		               |	ВТ_Срез КАК ВТ_Срез
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Срез КАК ВТ_Срез1
		               |		ПО ВТ_Срез.ОбъектИерархии = ВТ_Срез1.РодительИерархии
		               |ГДЕ
		               |	ВТ_Срез.ОбъектИерархии В(&ОбъектыРемонта)";
	ИначеЕсли НЕ СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда 
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК РодительИерархии,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии.ТипОбъекта КАК ТипОбъекта,
		               |	НЕ торо_ИерархическиеСтруктурыОР1.ОбъектИерархии ЕСТЬ NULL КАК ЭтоСоставной,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии.ПометкаУдаления КАК ПометкаУдаления,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии.ЭтоГруппа КАК ЭтоГруппа
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР1
		               |		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ИерархическиеСтруктурыОР1.РодительИерархии
		               |			И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = торо_ИерархическиеСтруктурыОР1.СтруктураИерархии
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии В(&ОбъектыРемонта)
		               |	И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
	Иначе
		ИерархическийСправочник = торо_ОбщегоНазначенияПовтИсп.СправочникИерархический(СтруктураПараметровИерархии.ТипРеквизитаОР);
		Если ЭтоНижнийУровень Тогда
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
			               |	&ПолеРодитель КАК РодительИерархии,
			               |	ЛОЖЬ КАК ЭтоГруппа,
			               |	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
			               |	ЛОЖЬ КАК ЭтоСоставной,
			               |	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
			               |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию
			               |ИЗ
			               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |ГДЕ
			               |	торо_ОбъектыРемонта.Ссылка В(&ОбъектыРемонта)";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеРодитель", СтруктураПараметровИерархии.РеквизитОР);	
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Таблица.Ссылка КАК ОбъектИерархии,
			               |	&ПолеРодитель КАК РодительИерархии,
			               |	ВЫБОР
			               |		КОГДА Таблица.ПометкаУдаления
			               |			ТОГДА 10
			               |		ИНАЧЕ 9
			               |	КОНЕЦ КАК ИндексКартинки,
			               |	NULL КАК ДатаВводаВЭксплуатацию
			               |ИЗ
			               |	&ИмяСправочника КАК Таблица
			               |ГДЕ
			               |	Таблица.Ссылка В(&ОбъектыРемонта)";

			Если ИерархическийСправочник Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеРодитель", "Родитель");
			Иначе
				Запрос.УстановитьПараметр("ПолеРодитель", торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(СтруктураПараметровИерархии));
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", СтрШаблон("Справочник.%1", СтруктураПараметровИерархии.ТипРеквизитаОР));  
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
	Запрос.УстановитьПараметр("ОбъектыРемонта", ТекУровеньОР);
	РезЗапроса = Запрос.Выполнить();
	Если НЕ РезЗапроса.Пустой() Тогда 
		ТабНижнийУровень = РезЗапроса.Выгрузить();
		МассивРодителей = ТабНижнийУровень.ВыгрузитьКолонку("РодительИерархии");
		ПостроитьДеревоРекурсивно(МассивРодителей, СтрокиДерева, Ложь);
	Иначе
		ТабНижнийУровень = Новый ТаблицаЗначений;
		Корень = Дерево.ПолучитьЭлементы().Добавить();
		Корень.Ссылка = СтруктураПараметровИерархии.ТекСтруктураИерархии; 
		Корень.ОтображатьФлаг = Ложь;
		Корень.ИндексКартинки = 5;
		СтрокиДерева.Вставить(торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(СтруктураПараметровИерархии), Корень);
	КонецЕсли;
	
	Для Каждого СтрокаТБ Из ТабНижнийУровень Цикл
		СтрокаРодитель = СтрокиДерева.Получить(СтрокаТБ.РодительИерархии);
		УжеДобавленнаяСтрока = СтрокиДерева.Получить(СтрокаТБ.ОбъектИерархии);
		Если УжеДобавленнаяСтрока = Неопределено И СтрокаРодитель <> Неопределено Тогда
			НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ссылка = СтрокаТБ.ОбъектИерархии;
			НоваяСтрока.ДатаВводаВЭксплуатацию = СтрокаТБ.ДатаВводаВЭксплуатацию;
			
			Помеченные = ТаблицаСОбъектамиРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", СтрокаТБ.ОбъектИерархии));
			Если Помеченные.Количество() Тогда 
				НоваяСтрока.ОтображатьФлаг = Истина;
				НоваяСтрока.Пометка = Помеченные[0].Пометка;
				НоваяСтрока.ДатаВводаВЭксплуатацию = Помеченные[0].ДатаВводаВЭксплуатацию;
			Иначе
				НоваяСтрока.ОтображатьФлаг = Ложь;
			КонецЕсли;
			
			Если ТабНижнийУровень.Колонки.Найти("ИндексКартинки") = Неопределено Тогда 
				СтруктураДляКартинки = Новый Структура("ПометкаУдаления, ЭтоГруппа, ЭтоСоставной, ТипОбъекта");
				ЗаполнитьЗначенияСвойств(СтруктураДляКартинки, СтрокаТБ);
				НоваяСтрока.ИндексКартинки = торо_РаботаСИерархией20КлиентСервер.ПолучитьИндексКартинкиДереваНеавтоматическойИерархии(СтруктураДляКартинки);
			Иначе
				НоваяСтрока.ИндексКартинки = СтрокаТБ.ИндексКартинки;
			КонецЕсли;
			СтрокиДерева.Вставить(СтрокаТБ.ОбъектИерархии, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоИерархии()
	Дерево.ПолучитьЭлементы().Очистить();
	МассивОбъектов =  ТаблицаСОбъектамиРемонта.Выгрузить().ВыгрузитьКолонку("ОбъектРемонта");
	СтрокиДерева = Новый Соответствие;
	ПостроитьДеревоРекурсивно(МассивОбъектов, СтрокиДерева, Истина); 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкиДерева(Пометка, Уровень)
	Для Каждого Строка Из Уровень Цикл 
		Если Строка.ОтображатьФлаг Тогда
			Если Пометка = Неопределено Тогда
				Строка.Пометка = НЕ Строка.Пометка; 
			Иначе
				Строка.Пометка = Пометка;
			КонецЕсли;
		КонецЕсли;
		НовыйУровень = Строка.ПолучитьЭлементы();
		УстановитьСнятьПометкиДерева(Пометка, НовыйУровень);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуИПометкуВТаблице()
	ТекДанные = Дерево.НайтиПоИдентификатору(Элементы.ДеревоСОбъектамиРемонта.ТекущаяСтрока);
	Если ТекДанные <> Неопределено Тогда
		СтрокаТаблицы = ТаблицаСОбъектамиРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекДанные.Ссылка)); 
		Если СтрокаТаблицы.Количество() Тогда 
			СтрокаТаблицы[0].Пометка = ТекДанные.Пометка;
			СтрокаТаблицы[0].ДатаВводаВЭксплуатацию = ТекДанные.ДатаВводаВЭксплуатацию;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) И ТекСтруктураИерархии <> Результат Тогда 
		ТекСтруктураИерархии = Результат;
		НастройкаИерархииЗавершениеСервер();
		ПостроитьДеревоИерархии();
		Элементы.ДеревоСОбъектамиРемонта.Развернуть(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастройкаИерархииЗавершениеСервер()
	торо_РаботаСИерархией20.ЗаполнитьПараметрыИерархии(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокументыПринятияКУчету(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле <Организация>.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Организация",, Отказ);
		
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле <Подразделение>.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Подразделение",, Отказ);
	КонецЕсли; 
	
	Если Не Отказ Тогда
		
		МассивСтруктур       = Новый Массив;
		ЭлементыТаблицы       = ТаблицаСОбъектамиРемонта;
		ЕстьНезаполненные = Ложь;
		
		Для каждого СтрокаТаблицы Из ЭлементыТаблицы Цикл
			Если СтрокаТаблицы.Пометка = Истина Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаВВодаВЭксплуатацию) Тогда 
					Структура = Новый Структура("ОбъектРемонта, ДатаВВодаВЭксплуатацию", СтрокаТаблицы.ОбъектРемонта, СтрокаТаблицы.ДатаВВодаВЭксплуатацию);
					МассивСтруктур.Добавить(Структура);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Для объекта ремонта %1 не заполнена дата ввода в эксплуатацию.'"), СтрокаТаблицы.ОбъектРемонта);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					ЕстьНезаполненные = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		Если ЕстьНезаполненные Тогда 
			Возврат;
		КонецЕсли;
		
		ВсеДокументыСозданы = Истина;
		
		СоздатьДокументыПринятияКУчетуНаСервере(МассивСтруктур, Организация, Подразделение, ВсеДокументыСозданы);
		
		Если ВсеДокументыСозданы Тогда
			Закрыть();
		Иначе
			ТекстСообщения = НСтр("ru = 'Для части объектов ремонта не удалось создать документы принятия объектов ремонта к учету.
								|Исправьте замечания и повторите попытку.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для каждого СтрокаТабличнойЧасти Из ТаблицаСОбъектамиРемонта Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для каждого СтрокаТабличнойЧасти Из ТаблицаСОбъектамиРемонта Цикл
		СтрокаТабличнойЧасти.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьФлажки(Команда)
	
	Для каждого СтрокаТабличнойЧасти Из ТаблицаСОбъектамиРемонта Цикл
		СтрокаТабличнойЧасти.Пометка = (Не СтрокаТабличнойЧасти.Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархическийПросмотр(Команда)
	ФлагИерархическийПросмотр = НЕ Элементы.ФормаИерархическийПросмотр.Пометка;
	Элементы.ТаблицаСОбъектамиРемонта.Видимость = НЕ ФлагИерархическийПросмотр;
	Элементы.ДеревоСОбъектамиРемонта.Видимость = ФлагИерархическийПросмотр;
	Элементы.ФормаНастройкаИерархии.Видимость = ФлагИерархическийПросмотр;
	Если ФлагИерархическийПросмотр Тогда 
		ПостроитьДеревоИерархии();
		Элементы.ДеревоСОбъектамиРемонта.Развернуть(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	Элементы.ФормаИерархическийПросмотр.Пометка = ФлагИерархическийПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДерево(Команда)
	ТекУровень = Дерево.ПолучитьЭлементы();
	УстановитьСнятьПометкиДерева(Истина, ТекУровень);
	УстановитьФлажки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиДерево(Команда)
	ТекУровень = Дерево.ПолучитьЭлементы();
	УстановитьСнятьПометкиДерева(Ложь, ТекУровень);
	СнятьФлажки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьФлажкиДерево(Команда)
	ТекУровень = Дерево.ПолучитьЭлементы();
	УстановитьСнятьПометкиДерева(Неопределено, ТекУровень);
	ИнвертироватьФлажки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтаФорма);
			
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекСтруктураИерархии);
	
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти
