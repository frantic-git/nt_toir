#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если (ИмяСобытия = "ПередачаТовараЗаписана" ИЛИ ИмяСобытия = "ВозвратТовараЗаписан") И Параметр.Проведен Тогда
		ОбновитьДанныеНаКлиенте();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтборЭлемента = ДокументыПередачиСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.Представление = "ЗаказНаВнутреннееПотребление";
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказНаВнутреннееПотребление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ДокументыВозвратаСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.Представление = "ЗаказНаВнутреннееПотребление";
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказНаВнутреннееПотребление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация");
	КонецЕсли;

	ОбновитьДанныеНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьДанныеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ОбновитьДанныеНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДокументВозврат(Команда)
	ТекДанные = Элементы.ТоварыНаРуках.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		АдресВХ = ДобавитьДокументВозвратНаСервере(ТекДанные.ПолучитьИдентификатор());
		Если АдресВХ <> Неопределено Тогда
			ЗначенияЗаполнения = Новый Структура("ИзРабочегоМестаПередачаВозврат, АдресХранилища, Организация, Подразделение, Склад, ЗаказНаВнутреннееПотребление",
				Истина, АдресВХ, ТекДанные.Организация, ТекДанные.Подразделение, ТекДанные.Склад, ТекДанные.ЗаказНаВнутреннееПотребление);		
			ОткрытьФорму("Документ.торо_ВозвратТоваровНаСклад.Форма.ФормаДокумента", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'По заказу %1 нет доступных к возврату на склад номенклатур.'"), 
				ТекДанные.ЗаказНаВнутреннееПотребление));		
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка с данными для возврата на склад.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументПередачу(Команда)
	ТекДанные = Элементы.Потребности.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		АдресВХ = ДобавитьДокументПередачуНаСервере(ТекДанные.ПолучитьИдентификатор());
		Если АдресВХ <> Неопределено Тогда
			ЗначенияЗаполнения = Новый Структура("ИзРабочегоМестаПередачаВозврат, АдресХранилища, Организация, Подразделение, Склад, ЗаказНаВнутреннееПотребление",
				Истина, АдресВХ, ТекДанные.Организация, ТекДанные.Подразделение, ТекДанные.Склад, ТекДанные.ЗаказНаВнутреннееПотребление);		
			ОткрытьФорму("Документ.торо_ПередачаТоваровНаРуки.Форма.ФормаДокумента", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'По заказу %1 нет доступных к передаче на руки номенклатур.'"), 
				ТекДанные.ЗаказНаВнутреннееПотребление));		
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка с данными для передачи на руки.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	Если Элементы.СтраницыПередачиВозврата.ТекущаяСтраница = Элементы.Передача Тогда
		СтрокиЗаказы = Потребности.ПолучитьЭлементы();
		Для Каждого Строка Из СтрокиЗаказы Цикл 
			Элементы.Потребности.Развернуть(Строка.ПолучитьИдентификатор(), Ложь);
		КонецЦикла;
	Иначе
		СтрокиЗаказы = ТоварыНаРуках.ПолучитьЭлементы();
		Для Каждого Строка Из СтрокиЗаказы Цикл 
			Элементы.ТоварыНаРуках.Развернуть(Строка.ПолучитьИдентификатор(), Ложь);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	Если Элементы.СтраницыПередачиВозврата.ТекущаяСтраница = Элементы.Передача Тогда
		СтрокиЗаказы = Потребности.ПолучитьЭлементы();
		Для Каждого Строка Из СтрокиЗаказы Цикл 
			Элементы.Потребности.Свернуть(Строка.ПолучитьИдентификатор());
		КонецЦикла;
	Иначе
		СтрокиЗаказы = ТоварыНаРуках.ПолучитьЭлементы();
		Для Каждого Строка Из СтрокиЗаказы Цикл 
			Элементы.ТоварыНаРуках.Свернуть(Строка.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыПередачиСписок

&НаКлиенте
Процедура ДокументыПередачиСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФорму("Документ.торо_ПередачаТоваровНаРуки.Форма.ФормаДокумента", 
		Новый Структура("Ключ, ИзРабочегоМестаПередачаВозврат", Элемент.ТекущиеДанные.Ссылка, Истина)); 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПотребности

&НаКлиенте
Процедура ПотребностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.ЗаказНаВнутреннееПотребление);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Для Каждого ЭлементОтбора Из ДокументыПередачиСписок.Отбор.Элементы Цикл 
			Если ЭлементОтбора.Представление = "ЗаказНаВнутреннееПотребление" Тогда 
				ЭлементОтбора.ПравоеЗначение = Элемент.ТекущиеДанные.ЗаказНаВнутреннееПотребление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыНаРуках

&НаКлиенте
Процедура ТоварыНаРукахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.ЗаказНаВнутреннееПотребление);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаРукахПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Для Каждого ЭлементОтбора Из ДокументыВозвратаСписок.Отбор.Элементы Цикл 
			Если ЭлементОтбора.Представление = "ЗаказНаВнутреннееПотребление" Тогда 
				ЭлементОтбора.ПравоеЗначение = Элемент.ТекущиеДанные.ЗаказНаВнутреннееПотребление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыВозврата

&НаКлиенте
Процедура ДокументыВозвратаСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФорму("Документ.торо_ВозвратТоваровНаСклад.Форма.ФормаДокумента", 
		Новый Структура("Ключ, ИзРабочегоМестаПередачаВозврат", Элемент.ТекущиеДанные.Ссылка, Истина));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	ИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПотребностьОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	ПотребностьОстатки.Склад КАК Склад,
	               |	ПотребностьОстатки.Номенклатура КАК Номенклатура,
	               |	&Характеристика КАК Характеристика,
	               |	ПотребностьОстатки.КОформлениюОстаток КАК Остаток
	               |ПОМЕСТИТЬ Потребность
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
	               |			,
	               |			&ОтборПоОрганизации
	               |				И &ОтборПоСкладу) КАК ПотребностьОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	               |	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ РезервыНаСкладах
	               |ИЗ
	               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	               |			,
	               |			(Склад, Номенклатура, Характеристика) В
	               |				(ВЫБРАТЬ
				   |					Потребность.Склад,
	               |					Потребность.Номенклатура,
	               |					Потребность.Характеристика
	               |				ИЗ
	               |					Потребность КАК Потребность)) КАК торо_РезервыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВнутреннееПотребление,
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезервыНаСкладах.Склад КАК Склад,
	               |	РезервыНаСкладах.Номенклатура КАК Номенклатура,
	               |	РезервыНаСкладах.Характеристика КАК Характеристика,
	               |	СУММА(РезервыНаСкладах.КоличествоОстаток) КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ДругиеРезервы
	               |ИЗ
	               |	РезервыНаСкладах КАК РезервыНаСкладах
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РезервыНаСкладах.Номенклатура,
	               |	РезервыНаСкладах.Характеристика,
	               |	РезервыНаСкладах.Склад
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	               |ПОМЕСТИТЬ ТоварыНаСкладах
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			(Номенклатура, Характеристика, Склад) В
	               |				(ВЫБРАТЬ
	               |					Потребность.Номенклатура,
	               |					Потребность.Характеристика,
	               |					Потребность.Склад
	               |				ИЗ
	               |					Потребность КАК Потребность)) КАК ТоварыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	               |	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	               |	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	торо_ТоварыНаРукахОстатки.Серия КАК Серия
	               |ПОМЕСТИТЬ ТоварыНаРуках
	               |ИЗ
	               |	РегистрНакопления.торо_ТоварыНаРуках.Остатки(, ) КАК торо_ТоварыНаРукахОстатки
	               |ГДЕ
	               |	&ОтборПоОрганизации
	               |	И &ОтборПоСкладу
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВнутреннееПотребление,
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Потребность.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	Потребность.Склад КАК Склад,
	               |	Потребность.Номенклатура КАК Номенклатура,
	               |	Потребность.Характеристика КАК Характеристика,
	               |	Потребность.Остаток КАК Потребность,
	               |	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) - ЕСТЬNULL(ДругиеРезервы.КоличествоОстаток, 0) КАК СвободныйОстаток,
	               |	ЕСТЬNULL(РезервыНаСкладах.КоличествоОстаток, 0) КАК РезервНаСкладе,
	               |	СУММА(ЕСТЬNULL(ТоварыНаРуках.КоличествоОстаток, 0)) КАК ОстатокНаРуках,
	               |	Потребность.ЗаказНаВнутреннееПотребление.ДатаОтгрузки КАК ДатаПотребности,
	               |	Потребность.ЗаказНаВнутреннееПотребление.Организация КАК Организация,
	               |	Потребность.ЗаказНаВнутреннееПотребление.Подразделение КАК Подразделение
	               |ИЗ
	               |	Потребность КАК Потребность
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РезервыНаСкладах КАК РезервыНаСкладах
	               |		ПО Потребность.Склад = РезервыНаСкладах.Склад
	               |			И Потребность.ЗаказНаВнутреннееПотребление = РезервыНаСкладах.ЗаказНаВнутреннееПотребление
	               |			И Потребность.Номенклатура = РезервыНаСкладах.Номенклатура
	               |			И Потребность.Характеристика = РезервыНаСкладах.Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладах КАК ТоварыНаСкладах
	               |		ПО Потребность.Склад = ТоварыНаСкладах.Склад
	               |			И Потребность.Номенклатура = ТоварыНаСкладах.Номенклатура
	               |			И Потребность.Характеристика = ТоварыНаСкладах.Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК ТоварыНаРуках
	               |		ПО Потребность.ЗаказНаВнутреннееПотребление = ТоварыНаРуках.ЗаказНаВнутреннееПотребление
	               |			И Потребность.Номенклатура = ТоварыНаРуках.Номенклатура
	               |			И Потребность.Характеристика = ТоварыНаРуках.Характеристика
	               |			И Потребность.Склад = ТоварыНаРуках.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДругиеРезервы КАК ДругиеРезервы
	               |		ПО Потребность.Склад = ДругиеРезервы.Склад
	               |			И Потребность.Номенклатура = ДругиеРезервы.Номенклатура
	               |			И Потребность.Характеристика = ДругиеРезервы.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Потребность.ЗаказНаВнутреннееПотребление,
	               |	Потребность.Склад,
	               |	Потребность.Номенклатура,
	               |	Потребность.Характеристика,
	               |	Потребность.Остаток,
	               |	Потребность.ЗаказНаВнутреннееПотребление.ДатаОтгрузки,
	               |	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) - ЕСТЬNULL(ДругиеРезервы.КоличествоОстаток, 0),
	               |	ЕСТЬNULL(РезервыНаСкладах.КоличествоОстаток, 0),
	               |	Потребность.ЗаказНаВнутреннееПотребление.Организация,
	               |	Потребность.ЗаказНаВнутреннееПотребление.Подразделение
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПотребности,
	               |	ЗаказНаВнутреннееПотребление,
	               |	Номенклатура,
	               |	Характеристика
	               |ИТОГИ
	               |	МАКСИМУМ(Склад),
	               |	МАКСИМУМ(Организация),
	               |	МАКСИМУМ(Подразделение)
	               |ПО
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление.ДатаОтгрузки КАК ДатаПотребности,
	               |	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	               |	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	               |	торо_ТоварыНаРукахОстатки.Серия КАК Серия,
	               |	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК ОстатокНаРуках,
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление.Организация КАК Организация,
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление.Подразделение КАК Подразделение
	               |ИЗ
	               |	ТоварыНаРуках КАК торо_ТоварыНаРукахОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПотребности,
	               |	ЗаказНаВнутреннееПотребление,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия
	               |ИТОГИ
	               |	МАКСИМУМ(Склад),
	               |	МАКСИМУМ(Организация),
	               |	МАКСИМУМ(Подразделение)
	               |ПО
	               |	ЗаказНаВнутреннееПотребление";
	Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "ПотребностьОстатки.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ЗаказНаВнутреннееПотребление.Организация = &Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВсеПоОрганизации", "торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
		Запрос.УстановитьПараметр("ОтборВсеПоОрганизации", Истина);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Склад) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСкладу", "Склад = &Склад");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВсеПоСкладу", "торо_ТоварыНаРукахОстатки.Склад = &Склад");
		Запрос.УстановитьПараметр("Склад", Склад);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСкладу", Истина);
		Запрос.УстановитьПараметр("ОтборВсеПоСкладу", Истина);
	КонецЕсли; 
	
	РезЗапроса = Запрос.ВыполнитьПакет();
	Если НЕ РезЗапроса[5].Пустой() Тогда
		ВыборкаЗаказов = РезЗапроса[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СтрокиЗаказы = Потребности.ПолучитьЭлементы();
		Пока ВыборкаЗаказов.Следующий() Цикл
			СтрокаЗаказ = СтрокиЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаЗаказов);
			СтрокаЗаказ.Представление = ВыборкаЗаказов.ЗаказНаВнутреннееПотребление; 
			ВыборкаНоменклатур = ВыборкаЗаказов.Выбрать();
			СтрокиНоменклаутры = СтрокаЗаказ.ПолучитьЭлементы();
			Пока ВыборкаНоменклатур.Следующий() Цикл 
				СтрокаНоменклатура = СтрокиНоменклаутры.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаНоменклатур);
				СтрокаНоменклатура.ДатаПотребности = Неопределено;
				Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ВыборкаНоменклатур.Характеристика) Тогда 
					СтрокаНоменклатура.Представление = СтрШаблон("%1 [%2]", ВыборкаНоменклатур.Номенклатура, ВыборкаНоменклатур.Характеристика);	
				Иначе
					СтрокаНоменклатура.Представление = ВыборкаНоменклатур.Номенклатура;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РезЗапроса[6].Пустой() Тогда 
		ВыборкаЗаказов = РезЗапроса[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СтрокиЗаказы = ТоварыНаРуках.ПолучитьЭлементы();
		Пока ВыборкаЗаказов.Следующий() Цикл
			СтрокаЗаказ = СтрокиЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаЗаказов);
			СтрокаЗаказ.Представление = ВыборкаЗаказов.ЗаказНаВнутреннееПотребление;
			ВыборкаНоменклатур = ВыборкаЗаказов.Выбрать();
			СтрокиНоменклаутры = СтрокаЗаказ.ПолучитьЭлементы();
			Пока ВыборкаНоменклатур.Следующий() Цикл
				СтрокаНоменклатура = СтрокиНоменклаутры.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаНоменклатур);
				СтрокаНоменклатура.ДатаПотребности = Неопределено;
				СтрокаНоменклатура.Представление = ВыборкаНоменклатур.Номенклатура;
				Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ВыборкаНоменклатур.Характеристика) Тогда 
					СтрокаНоменклатура.Представление = СтрШаблон("%1 [%2]", СтрокаНоменклатура.Представление, ВыборкаНоменклатур.Характеристика);	
				КонецЕсли;
				Если ИспользоватьСерии И ЗначениеЗаполнено(ВыборкаНоменклатур.Серия) Тогда
					СтрокаНоменклатура.Представление = СтрШаблон("%1 [%2]", СтрокаНоменклатура.Представление, ВыборкаНоменклатур.Серия);
				КонецЕсли;				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСериям(Серии, НужноДобавить, Таблица, СтрокаНоменклатура)
	СтрокиТЧСоответствие = Новый Соответствие;
	Для Каждого СтрокаСерия Из Серии Цикл
		Если НужноДобавить < 0 Тогда
			Прервать;
		КонецЕсли;
		Если СтрокаСерия.Резерв > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
			Списать = Мин(СтрокаСерия.Резерв, НужноДобавить);
			НоваяСтрока.КПеремещению = Списать;
			НоваяСтрока.Серия = СтрокаСерия.Серия;
			НужноДобавить = НужноДобавить - Списать;
			СтрокиТЧСоответствие.Вставить(СтрокаСерия.Серия, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаСерия Из Серии Цикл
		Если НужноДобавить <= 0 Тогда
			Прервать;
		КонецЕсли;
		СтрокаТЧ = СтрокиТЧСоответствие.Получить(СтрокаСерия.Серия);
		Если СтрокаТЧ = Неопределено Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
			Списать = Мин(СтрокаСерия.Количество, НужноДобавить);
			НоваяСтрока.КПеремещению = Списать;
			НоваяСтрока.Серия = СтрокаСерия.Серия;
			НужноДобавить = НужноДобавить - Списать;
		Иначе
			Списать = Мин(СтрокаСерия.Количество, НужноДобавить); 
			СтрокаТЧ.КПеремещению = СтрокаТЧ.КПеремещению + Списать;
			НужноДобавить = НужноДобавить - Списать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДобавитьДокументПередачуНаСервере(ИДСтроки)
	ТекСтрока = Потребности.НайтиПоИдентификатору(ИДСтроки);
	Таблица = РеквизитФормыВЗначение("ТаблицаДляЗаполнения");
	ИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();
	Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда 
		НадоПереместить = ТекСтрока.Потребность - ТекСтрока.ОстатокНаРуках;
		МожноПереместить = ? (ТекСтрока.СвободныйОстаток >= НадоПереместить, НадоПереместить, Мин(ТекСтрока.СвободныйОстаток + ТекСтрока.РезервНаСкладе, НадоПереместить)); 
		Если МожноПереместить > 0 ИЛИ ТекСтрока.СвободныйОстаток > 0 Тогда                                   
			Если ИспользоватьСерии Тогда
				Серии = ЗаполнитьСерииНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.Склад, ТекСтрока.Характеристика, ТекСтрока.ЗаказНаВнутреннееПотребление);
				Если Серии = Неопределено Тогда
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Недостаточно серийных номеров для товара:
						|Номенклатура - ""%1"",
						|Характеристика - ""%2"",
						|Склад - ""%3"".'"), 
					ТекСтрока.Номенклатура, ТекСтрока.Характеристика, ТекСтрока.Склад));
					Возврат Неопределено;
				Иначе
					НужноДобавить = МожноПереместить;
					ЗаполнитьПоСериям(Серии, НужноДобавить, Таблица, ТекСтрока);
				КонецЕсли;
			Иначе
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.КПеремещению = МожноПереместить;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокиНоменклатуры = ТекСтрока.ПолучитьЭлементы();
		Если ИспользоватьСерии Тогда 
			МассивНоменклатур = Новый Массив;
			МассивХарактеристик = Новый Массив;
			Для Каждого СтрокаНоменклатура Из СтрокиНоменклатуры Цикл 
				НадоПереместить = СтрокаНоменклатура.Потребность - СтрокаНоменклатура.ОстатокНаРуках;
				МожноПереместить = ? (СтрокаНоменклатура.СвободныйОстаток >= НадоПереместить, НадоПереместить, 
					Мин(СтрокаНоменклатура.СвободныйОстаток + СтрокаНоменклатура.РезервНаСкладе, НадоПереместить));
				Если МожноПереместить > 0 ИЛИ СтрокаНоменклатура.СвободныйОстаток > 0 Тогда 
					МассивНоменклатур.Добавить(СтрокаНоменклатура.Номенклатура);
					МассивХарактеристик.Добавить(СтрокаНоменклатура.Характеристика);
				КонецЕсли;
			КонецЦикла;
			Если МассивНоменклатур.Количество() Тогда 
				Серии = ЗаполнитьСерииНоменклатуры(МассивНоменклатур, СтрокаНоменклатура.Склад, МассивХарактеристик, ТекСтрока.ЗаказНаВнутреннееПотребление);
				Если Серии = Неопределено Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно серийных номеров.'"));
					Возврат Неопределено;
				Иначе
					СтруктураПоиска = Новый Структура("Номенклатура");
					Если Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда 
						СтруктураПоиска.Вставить("Характеристика");
					КонецЕсли;
					Для Каждого СтрокаНоменклатура Из СтрокиНоменклатуры Цикл 
						НадоПереместить = СтрокаНоменклатура.Потребность - СтрокаНоменклатура.ОстатокНаРуках;
						МожноПереместить = ? (СтрокаНоменклатура.СвободныйОстаток >= НадоПереместить, НадоПереместить, 
							Мин(СтрокаНоменклатура.СвободныйОстаток + СтрокаНоменклатура.РезервНаСкладе, НадоПереместить));
						Если МожноПереместить > 0 ИЛИ СтрокаНоменклатура.СвободныйОстаток > 0 Тогда
							ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНоменклатура);
							НайденныеСерии = Серии.НайтиСтроки(СтруктураПоиска);
							Если НайденныеСерии.Количество() > 0 Тогда
								НужноДобавить = МожноПереместить;
								ЗаполнитьПоСериям(НайденныеСерии, НужноДобавить, Таблица, СтрокаНоменклатура);
							Иначе
								ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Недостаточно серийных номеров для товара:
									|Номенклатура - ""%1"",
									|Характеристика - ""%2"",
									|Склад - ""%3"".'"), 
									СтрокаНоменклатура.Номенклатура, СтрокаНоменклатура.Характеристика, СтрокаНоменклатура.Склад));
								Возврат Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаНоменклатура Из СтрокиНоменклатуры Цикл 
				НадоПереместить = СтрокаНоменклатура.Потребность - СтрокаНоменклатура.ОстатокНаРуках;
				МожноПереместить = ? (СтрокаНоменклатура.СвободныйОстаток >= НадоПереместить, НадоПереместить, 
					Мин(СтрокаНоменклатура.СвободныйОстаток + СтрокаНоменклатура.РезервНаСкладе, НадоПереместить));
				Если МожноПереместить > 0 ИЛИ СтрокаНоменклатура.СвободныйОстаток > 0 Тогда 
					НоваяСтрока = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
					НоваяСтрока.КПеремещению = МожноПереместить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если Таблица.Количество() Тогда 
		Возврат ПоместитьВоВременноеХранилище(Таблица);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСерииНоменклатуры(Номенклатура, Склад, Характеристика, ЗаказНаВнутреннееПотребление)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	ТоварыНаСкладахОстатки.Серия КАК Серия,
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	               |ПОМЕСТИТЬ ТоварыНаСкладах
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			Склад = &Склад
	               |				И Номенклатура В (&Номенклатура)
	               |				И Характеристика В (&Характеристика)) КАК ТоварыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	               |	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	торо_РезервыНаСкладахОстатки.Серия КАК Серия,
	               |	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ РезервыНаСкладах
	               |ИЗ
	               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	               |			,
	               |			Склад = &Склад
	               |				И Номенклатура В (&Номенклатура)
	               |				И Характеристика В (&Характеристика)) КАК торо_РезервыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Серия,
	               |	Номенклатура,
	               |	ЗаказНаВнутреннееПотребление,
	               |	Склад,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладах.Серия КАК Серия,
	               |	СУММА(ТоварыНаСкладах.ВНаличииОстаток - ЕСТЬNULL(торо_Резервы.КоличествоОстаток, 0)) КАК Количество,
	               |	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладах.Характеристика КАК Характеристика,
	               |	ЕСТЬNULL(торо_РезервыНаСкладах.КоличествоОстаток, 0) КАК Резерв
	               |ИЗ
	               |	ТоварыНаСкладах КАК ТоварыНаСкладах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РезервыНаСкладах КАК торо_Резервы
	               |		ПО (торо_Резервы.ЗаказНаВнутреннееПотребление <> &ЗаказНаВнутреннееПотребление)
	               |			И ТоварыНаСкладах.Склад = торо_Резервы.Склад
	               |			И ТоварыНаСкладах.Номенклатура = торо_Резервы.Номенклатура
	               |			И ТоварыНаСкладах.Характеристика = торо_Резервы.Характеристика
	               |			И ТоварыНаСкладах.Серия = торо_Резервы.Серия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РезервыНаСкладах КАК торо_РезервыНаСкладах
	               |		ПО (торо_РезервыНаСкладах.ЗаказНаВнутреннееПотребление = &ЗаказНаВнутреннееПотребление)
	               |			И ТоварыНаСкладах.Склад = торо_РезервыНаСкладах.Склад
	               |			И ТоварыНаСкладах.Номенклатура = торо_РезервыНаСкладах.Номенклатура
	               |			И ТоварыНаСкладах.Характеристика = торо_РезервыНаСкладах.Характеристика
	               |			И ТоварыНаСкладах.Серия = торо_РезервыНаСкладах.Серия
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладах.Серия,
	               |	ТоварыНаСкладах.Номенклатура,
	               |	ТоварыНаСкладах.Характеристика,
	               |	торо_РезервыНаСкладах.КоличествоОстаток
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ТоварыНаСкладах.ВНаличииОстаток - ЕСТЬNULL(торо_Резервы.КоличествоОстаток, 0)) > 0";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ЗаказНаВнутреннееПотребление", ЗаказНаВнутреннееПотребление);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезЗапроса = Запрос.Выполнить();
	Если НЕ РезЗапроса.Пустой() Тогда 
		Возврат РезЗапроса.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ДобавитьДокументВозвратНаСервере(ИДСтроки)
	ТекСтрока = ТоварыНаРуках.НайтиПоИдентификатору(ИДСтроки);
	Таблица = РеквизитФормыВЗначение("ТаблицаДляЗаполнения");
	Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.КПеремещению = ТекСтрока.ОстатокНаРуках;
	Иначе
		СтрокиНоменклатуры = ТекСтрока.ПолучитьЭлементы();
		Для Каждого СтрокаНоменклатура Из СтрокиНоменклатуры Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатура);
			НоваяСтрока.КПеремещению = СтрокаНоменклатура.ОстатокНаРуках;
		КонецЦикла;
	КонецЕсли;
	Если Таблица.Количество() Тогда 
		Возврат ПоместитьВоВременноеХранилище(Таблица);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте 
Процедура ОбновитьДанныеНаКлиенте()
	Потребности.ПолучитьЭлементы().Очистить();
	ТоварыНаРуках.ПолучитьЭлементы().Очистить();
	ОбновитьДанныеНаСервере();
КонецПроцедуры

#КонецОбласти
