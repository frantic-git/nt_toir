
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыШапкиПоУмолчанию();

	ТипПоиска = "Наименование";
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяСтруктураИерархии",
	Истина);
	
	Инициатор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнойИнициаторДефекта",
	Неопределено);
	
	ИерархияДляВводаНовыхОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	ИспользоватьФМ = Константы.торо_ИспользоватьФункциональныеМеста.Получить();
	
	Если НЕ ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		ТекСтруктураИерархии = ИерархияДляВводаНовыхОР;
	КонецЕсли;
	
	ФОИспользоватьГарантии = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования"); 
	СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();
	СписокСтатусов.ЗагрузитьЗначения(СписокДоступныхСтатусов);
	
	ОбработатьИзменениеИерархииНаСервере();
	
	ПравоИнтерактивнаяПометкаУдаления = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоИнтерактивноеДобавление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.торо_ОбъектыРемонта);
	ЕстьПравоВводаСостояний = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.торо_СостоянияОбъектовРемонта);
	
	ПравоПросмотраРМЗакрытияРемонтов = ПравоДоступа("Просмотр", Метаданные.Обработки.торо_ЗакрытиеЗаявокИРемонтов);
	Элементы.ДеревоОткрытьРМЗакрытияЗаявокИРемонтов.Видимость = ПравоПросмотраРМЗакрытияРемонтов;
	Элементы.СписокОткрытьРМЗакрытияЗаявокИРемонтов.Видимость = ПравоПросмотраРМЗакрытияРемонтов;
	
	ФОУчетСостоянияОборудования 	      = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	ФОНапоминатьЗафиксироватьПростой      = ПолучитьФункциональнуюОпцию("торо_НапоминатьЗафиксироватьПростой");

	Если ИспользоватьКартинкиТОР Тогда 
		Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.КартинкаОтображаемая";
	Иначе 
		Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.Картинка";
	КонецЕсли;
	
	СтрокаРР = ДеревоРемонтныхРабот.ПолучитьЭлементы().Добавить();
	СтрокаРР.РемонтнаяРабота = "Ремонтные работы";	
	СтрокаРР.Картинка = 4;
	
	УстановитьВнешнийВидФормы(); 
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ДеревоРемонтныхРабот");
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОРДляВыделения = ПолучитьОтборПоОбъектуРемонта(); 
	Если ЗначениеЗаполнено(ОРДляВыделения) Тогда 
		торо_РаботаСИерархией20Клиент.ВыделитьОРВДереве(ЭтаФорма, ОРДляВыделения);
	КонецЕсли;
	
	СтраницыВыявленныйДефектИВнешнееОснованиеПриСменеСтраницы(Элементы.СтраницыВыявленныйДефектИВнешнееОснование, Элементы.СтраницыВыявленныйДефектИВнешнееОснование.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаПометкаУдаленияОР" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОбИзмененииПометкиУдаленияОбъектаРемонта(ЭтаФорма, Параметр);
		Если ИспользоватьКартинкиТОР Тогда
			ОбновитьКартинкиЭлементовДереваНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписанОбъектРемонта" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОЗаписиОбъектаРемонта(ЭтаФорма, Параметр);
		Если ИспользоватьКартинкиТОР Тогда
			ОбновитьКартинкиЭлементовДереваНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененПорядокОбъектаРемонта" Тогда
		Если Параметр.СтруктураИерархии = ТекСтруктураИерархии Тогда
			торо_НастройкаПорядкаЭлементовКлиент.ИзменитьПорядокЭлементаВДереве(ЭтаФорма, Параметр);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененаСтруктураИерархииОР" Тогда
		Если Параметр = Неопределено ИЛИ Параметр = ТекСтруктураИерархии Тогда
			торо_РаботаСИерархией20Клиент.ОбновитьДеревоИерархии(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
	  И ВыбранноеЗначение.Свойство("КрайняяДопустимаяДатаЗавершенияРемонта", КрайняяДопустимаяДатаЗавершенияРемонта)Тогда
		КритичностьДефекта   = ВыбранноеЗначение.КритичностьДефекта;
		ДатаНачалаРемонта    = ВыбранноеЗначение.ДатаНачалаРемонта;
		ДатаОкончанияРемонта = ВыбранноеЗначение.ДатаОкончанияРемонта;
		
		РезультатыПодбораИзМатрицыОценкиРисков.Очистить();	
		РезультатыВыбора = Новый Массив;
		
		Если ВыбранноеЗначение.Свойство("РезультатыПодбораИзМатрицыОценкиРисков", РезультатыВыбора) Тогда
			Для каждого Строка Из РезультатыВыбора Цикл
				ЗаполнитьЗначенияСвойств(РезультатыПодбораИзМатрицыОценкиРисков.Добавить(), Строка);
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы И ЗначениеЗаполнено(ОбъектРемонта) Тогда   
		СохранитьОтборПоОбъектуРемонта(ОбъектРемонта);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыВыявленныйДефектИВнешнееОснованиеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ТекущаяСтраницаВД = (Элементы.СтраницыВыявленныйДефектИВнешнееОснование.ТекущаяСтраница = Элементы.СтраницаВыявленныйДефект);
	
	Элементы.ФормаАктДефектации.Видимость = ТекущаяСтраницаВД;
	Элементы.ДефектнаяВедомость.Видимость = ТекущаяСтраницаВД;
	Элементы.ФормаДефектнаяВедомостьЛиквидацияОР.Видимость = ТекущаяСтраницаВД;
	Элементы.АктОбщегоТехническогоОсмотра.Видимость = Не ТекущаяСтраницаВД;
КонецПроцедуры

#Область Поиск
&НаКлиенте
Процедура ТипПоискаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗначениеПоиска) Тогда
		ВыполнитьПоискВСпискеОРПоНаименованию(ЗначениеПоиска);
	Иначе
		ОтменитьПоискВСпискеОРПоНаименованию();
		ЗначениеПоиска = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОРПоНаименованию(ЗначениеПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ВыполнитьПоискВСпискеОРПоНаименованию(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОРПоНаименованию();	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗначениеПоиска = Текст;
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаОрганизацияПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПодразделениеПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаНаправлениеПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаНаправлениеОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаТиповойОРПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаТиповойОРОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаКритичностьПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаКритичностьОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаСостояниеПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаСостояниеОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТиповойДефектПриИзменении(Элемент)
	
	ЗаполнитьПоТиповомуДефекту();
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойДефектВОСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текДанные = Элементы.Дерево.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОбъектРемонта) Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияЗаполнения = Новый Структура("Владелец", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОбъектРемонта, "Направление"));
	
	Если Не ЗначениеЗаполнено(ЗначенияЗаполнения.Владелец) Тогда
		ЗначенияЗаполнения.Владелец = ПредопределенноеЗначение("Справочник.торо_НаправленияОбъектовРемонтныхРабот.БезНаправления");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаОбъекта", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТиповойДефектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("Владелец", ?(ЗначениеЗаполнено(Направление), Направление, ПолучитьПредопределенноеНаправлениеОР()));
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаВыбора",ПараметрыФормы,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);						
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойДефектСоздание(Элемент, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", ?(ЗначениеЗаполнено(Направление), Направление, ПолучитьПредопределенноеНаправлениеОР())));
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПричинаДефектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(ТиповойДефект) Тогда 
		СписокПричин = ПолучитьСписокПричинДефектовНаСервере(ТиповойДефект); 
		Если СписокПричин.Количество() >0 Тогда 
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура("Отбор", Новый Структура("СписокПричин", СписокПричин));
			ОткрытьФорму("Справочник.торо_ПричиныДефектов.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаДефектаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПричинаДефектаОкончаниеВводаТекстаАвтоПодбор(СтандартнаяОбработка, ПараметрыПолученияДанных, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПричинаДефектаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПричинаДефектаОкончаниеВводаТекстаАвтоПодбор(СтандартнаяОбработка, ПараметрыПолученияДанных, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ОтказавшийЭлементОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтруктураДанных = ЗаполнитьДанныеОРНаСервере(ВыбранноеЗначение);
		Направление = СтруктураДанных.Направление;
	Иначе
		Направление = ПредопределенноеЗначение("Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные);
	
	ОбновитьТаблицыЗапланированныхРемонтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(ПредопределенноеЗначение("Справочник.КлючевыеОперации.торо_ОткрытиеФормыОбъектовРемонта"),,Истина);
	
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	торо_РаботаСИерархией20Клиент.ДеревоПередРазворачиванием(Дерево, Строка, СтруктураПараметровИерархии, ФОИспользоватьДокументыЖЦОборудования, СписокСтатусов);
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере(Строка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(ПредопределенноеЗначение("Справочник.КлючевыеОперации.торо_ОткрытиеФормыОбъектовРемонта"),,Истина);
	
	СтандартнаяОбработка = Ложь;
	Если Не Элементы.Список.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(Неопределено, Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные);
	
	ОбновитьТаблицыЗапланированныхРемонтов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	торо_РаботаСИерархией20.СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки, ИспользоватьКартинкиТОР);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущиеДанные = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0] 
		Или Элемент.ТекущиеДанные.ЭтоТехКарта Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не Строка = Неопределено Тогда
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Если ТекущаяСтрока.ЭтоТехкарта Или ТипЗнч(ТекущаяСтрока.РемонтнаяРабота) = Тип("Строка") Тогда
			ПараметрыПеретаскивания.Действие 		   =  ДействиеПеретаскивания.Перемещение; 
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
	Для каждого ЭлементКоллекции Из ПараметрыПеретаскивания.Значение Цикл
		ПеретаскиваемаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ЭлементКоллекции);
		
		// Если случайно перетащили в ту же ТК, то параллельность убирать не нужно.
		Если Не ПеретаскиваемаяСтрока.Родитель_ID = ТекущаяСтрока.ID И ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
			ПеретаскиваемаяСтрока.Родитель_ID = ТекущаяСтрока.ID;
			ПеретаскиваемаяСтрока.ID_ПараллельнойОперации = "";
			торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(ПеретаскиваемаяСтрока);
			
			СтрокаРодителя = ПеретаскиваемаяСтрока.ПолучитьРодителя();
			СтруктураПоиска = Новый Структура("ID_ПараллельнойОперации", ID_ПараллельнойОперации);
			
			НайденныеСтрокиДерева = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(СтрокаРодителя, СтруктураПоиска, 1, 1);
			Если НайденныеСтрокиДерева.Количество() = 1 Тогда
				НайденныеСтрокиДерева[0].ID_ПараллельнойОперации = "";
				торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НайденныеСтрокиДерева[0]);
			КонецЕсли;
		КонецЕсли;
		
		// При стандартной обработке перетаскивание в дереве происходит на тот уровень, на котором располагается
		// строка, на которую навели курсор при перетаскивании. После отключения стандартной обработки строка
		// никуда не копируется, поэтому нужно обработать вручную. Т.к. в данном РМ нет ТЧ ремонтных работ, то
		// перестроить дерево не получится поэтому вручную удаляем и добавляем строку.
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока.ПолучитьЭлементы().Добавить(), ПеретаскиваемаяСтрока);
		ПеретаскиваемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ПеретаскиваемаяСтрока);
	КонецЦикла;
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		СтандартнаяОбработка = Ложь;
	    торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьКолонкиПараллельногоВыполненияТО(Элементы.ДеревоРемонтныхРабот, Неопределено, ID_ПараллельнойОперации, ВыбранноеЗначение.СоответствиеРезультата);
		Модифицированность = Истина;
		
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.Родитель_ID);
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			ДобавитьСтрокуДерева(ДеревоРеквизит, ЭлементМассива, ТекущиеДанные);
		КонецЦикла;
	КонецЕсли;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуДерева(ДеревоРеквизит, ВыбранноеЗначение, ТекущиеДанные, Количество = 1, ID_ПараллельнойОперации = "")
	
	МассивСтрок = ДеревоРеквизит.Строки.НайтиСтроки(ТекущиеДанные, Истина);	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваРодитель            = МассивСтрок[0];	
	НовСтрокаДерева                 = СтрокаДереваРодитель.Строки.Добавить();
	НовСтрокаДерева.ID              = Новый УникальныйИдентификатор;
	НовСтрокаДерева.Родитель_ID     = ТекущиеДанные.ID;
	НовСтрокаДерева.РемонтнаяРабота = ВыбранноеЗначение;
	НовСтрокаДерева.Количество      = Количество;
	НовСтрокаДерева.ТехОперация     = ВыбранноеЗначение;
	НовСтрокаДерева.ID_ПараллельнойОперации = ID_ПараллельнойОперации;
	торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НовСтрокаДерева);
				
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		НовСтрокаДерева.ЭтоТехКарта = Истина;
		
		ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(ВыбранноеЗначение, ДатаНачалаРемонта);
		Если Не ЗначениеЗаполнено(ТехКарта) Тогда
			Возврат;				
		КонецЕсли;
		Для Каждого ОперацияРемонта Из ТехКарта.СписокОпераций Цикл
			ТекущиеДанные.ID = НовСтрокаДерева.ID;
			ТекущиеДанные.Родитель_ID = НовСтрокаДерева.Родитель_ID;
			ДобавитьСтрокуДерева(ДеревоРеквизит, ОперацияРемонта.Операция, ТекущиеДанные, ОперацияРемонта.Количество, ОперацияРемонта.ID_ПараллельнойОперации);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.РемонтнаяРабота = "Ремонтные работы" Тогда
	    ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Очистить();
		Отказ = Истина;
	Иначе
		СтрокаРодителя = ТекущиеДанные.ПолучитьРодителя();
		СтруктураПоиска = Новый Структура("ID_ПараллельнойОперации", ID_ПараллельнойОперации);
		
		НайденныеСтрокиДерева = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(СтрокаРодителя, СтруктураПоиска, 1, 1, 1);
		Если НайденныеСтрокиДерева.Количество() = 1 Тогда
			НайденныеСтрокиДерева[0].ID_ПараллельнойОперации = "";
			торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(НайденныеСтрокиДерева[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите расположение ремонта!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломИзменения(Элемент, Отказ)
		
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока Тогда
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Истина;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		
		ТекущаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекущаяСтрока.РемонтнаяРабота = ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка");
		ТекущаяСтрока.Картинка = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(ТекущаяСтрока.РемонтнаяРабота);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Ложь;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		
		НеЗаполненаРемонтнаяРабота = ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.РемонтнаяРабота);
		
		Если Не ОтменаРедактирования И НеЗаполненаРемонтнаяРабота Тогда
			
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
			
			Если РодительСтроки = Неопределено Тогда
				КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Иначе
				КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
			КонецЕсли;
			
			КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
		И Не ТекущиеДанные.РемонтнаяРабота.Пустая() Тогда
		
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
						
		Если РодительСтроки = Неопределено Тогда
			КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ID", РодительСтроки.ID);  
		ДанныеСтроки.Вставить("Родитель_ID", РодительСтроки.Родитель_ID);  
		
		РемонтныеРаботы = Новый Массив();
		РемонтныеРаботы.Добавить(ТекущиеДанные.РемонтнаяРабота); 
		
		ДеревоРемонтныхРаботОбработкаВыбораСервер(РемонтныеРаботы, ДанныеСтроки);
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
				
		РодительСтроки = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоРемонтныхРабот.ПолучитьЭлементы(), "ID", РодительСтроки.ID);
		КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		ИндексПоследнегоЭлементаРодителя = КоллекцияЭлементовРодителя.Количество() - 1;
		
		ДобавленныйЭлемент = КоллекцияЭлементовРодителя.Получить(ИндексПоследнегоЭлементаРодителя);
		
		Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ДобавленныйЭлемент.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		
		КоличествоДоИзменения = СтруктураДанныхДоРедактирования[Элемент.Родитель.Имя].Количество;
		
		Коэффициент = ?(КоличествоДоИзменения = 0, 0, ТекущиеДанные.Количество / КоличествоДоИзменения);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекущиеДанные, Коэффициент)
	КонецЕсли;
	
	торо_СобытияФормКлиентСервер.ОбновитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Родитель.Имя, "Количество", ТекущиеДанные.Количество);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлановыеРемонты

&НаКлиенте
Процедура ПлановыеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ИмяПоля = СтрЗаменить(Поле.Имя, "ПлановыеРемонты", "");
	
	Если ИмяПоля = "ВидРемонта"
		Или ИмяПоля = "Основание"
		Или ИмяПоля = "ДокументПлановыхДат" Тогда
	    ПоказатьЗначение(, Элемент.ТекущиеДанные[ИмяПоля]);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВнешниеОснования
	
&НаКлиенте
Процедура ВнешниеОснованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ИмяПоля = СтрЗаменить(Поле.Имя, "ВнешниеОснования", "");
	
	Если ИмяПоля = "Документ" Тогда
	    ПоказатьЗначение(, Элемент.ТекущиеДанные[ИмяПоля]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеОснованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВнешниеОснования.ТекущиеДанные;
	ТекущиеДанныеДерево = Элементы.Дерево.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанныеДерево = Неопределено Тогда
		Элементы.ВнешниеОснованияПоказатьМестоположение.Доступность = ЭтоПротяженныйОбъект;	
	Иначе
		Элементы.ВнешниеОснованияПоказатьМестоположение.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ВыявленныеДефектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ИмяПоля = СтрЗаменить(Поле.Имя, "ВыявленныеДефекты", "");
	
	Если ИмяПоля = "Документ"
		Или ИмяПоля = "ОтказавшийЭлемент"
		Или ИмяПоля = "ВидДефекта" Тогда
	    ПоказатьЗначение(, Элемент.ТекущиеДанные[ИмяПоля]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыявленныеДефектыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВыявленныеДефекты.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Элементы.ВыявленныеДефектыПоказатьМестоположение.Доступность = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОтказавшийЭлемент, "ЭтоПротяженныйОбъект");
	Иначе
		Элементы.ВыявленныеДефектыПоказатьМестоположение.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗарегистрироватьДефект(Команда)
	
	Если ПроверитьЗаполнениеОбязательныхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево Тогда
	    ТекДанные = Элементы.Дерево.ТекущиеДанные;
		Если ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		    ТекстСообщения = НСтр("ru = 'В качестве объекта ремонта нельзя выбрать вид иерархии объектов ремонта.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе
	    ТекДанные = Элементы.Список.ТекущиеДанные;
	КонецЕсли; 
	
	Если ТекДанные.ЭтоГруппа = Истина Тогда
	    ТекстСообщения = НСтр("ru = 'В качестве объекта ремонта нельзя выбрать группу.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда
	    ТекстСообщения = НСтр("ru = 'В качестве объекта ремонта нельзя выбрать функциональное место.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Результат = СоздатьДокументВыявленныйДефект();
	Если ЗначениеЗаполнено(Результат) тогда
		Номер = Результат;
		Статус = "Зарегистрирован";
		
		Если ФОНапоминатьЗафиксироватьПростой И ФОУчетСостоянияОборудования И ЕстьПравоВводаСостояний Тогда
		    ПоказатьВопрос(Новый ОписаниеОповещения("ЗарегистрироватьДефектЗавершение", ЭтотОбъект, Неопределено), НСтр("ru = 'Зафиксировать фактический простой объектов?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		ОбновитьТаблицуВД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьДефектЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		МассивОР = Новый Массив;
		МассивОР.Добавить(ОбъектРемонта);
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ДокументОснование", НовыйДок);
		ЗначенияЗаполнения.Вставить("МассивОР", МассивОР);
		ЗначенияЗаполнения.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, СтруктураИерархии", ЗначенияЗаполнения, ТекСтруктураИерархии);
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, НовыйДок);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВнешнееОснование(Команда)
	Если ПроверитьЗаполнениеОбязательныхРеквизитовВО() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево Тогда
	    ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Иначе
	    ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
	    ТекстСообщения = НСтр("ru = 'В качестве объекта ремонта нельзя выбрать вид иерархии объектов ремонта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Если Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево
		И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
	    ТекстСообщения = НСтр("ru = 'В качестве объекта ремонта нельзя выбрать вид иерархии объектов ремонта.'");
	КонецЕсли;

	Если ТекущиеДанные.ЭтоГруппа = Истина Тогда
	    ТекстСообщения = НСтр("ru = 'В качестве объекта ремонта нельзя выбрать группу.'");
	КонецЕсли;
	
	Если ТекущиеДанные.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда
	    ТекстСообщения = НСтр("ru = 'В качестве объекта ремонта нельзя выбрать функциональное место.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
	    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Результат = СоздатьДокументВнешнееОснованиеДляРабот();
	Если ЗначениеЗаполнено(Результат) тогда
		НомерВО = Результат;
		СтатусВО = "Зарегистрирован";
		
		ОбновитьТаблицуВО();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОбработку(Команда)
	
	ОчиститьПоля();
		
КонецПроцедуры

&НаКлиенте
Процедура ДефектнаяВедомость(Команда)
	Если ЗначениеЗаполнено(НовыйДок) Тогда
		МассивПараметровКоманды = Новый Массив;
		МассивПараметровКоманды.Добавить(НовыйДок);
		
		торо_Печать.НапечататьДокумент("Документ.торо_ВыявленныеДефекты",
		"ДефектнаяВедомость",
		МассивПараметровКоманды);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЖурналДефектов(Команда)
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("НачПериода", НачалоГода(Дата));
	ПараметрыОтбора.Вставить("КонПериода", КонецГода(Дата));
	ПараметрыОтбора.Вставить("ПодразделениеДляДок", ПодразделениеДляДок);
	ПараметрыОтбора.Вставить("Организация", Организация);
	ПараметрыОтбора.Вставить("ОР", ТекущийОР);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыОтбора", ПараметрыОтбора);

	ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаЖурналаДефектов", ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура АктДефектации(Команда)
	
	Если не ЗначениеЗаполнено(НовыйДок) Тогда
		возврат;
	КонецЕсли;
	
	ДефектыОборудования = ПолучитьСтруктуруПараметровКоманды_АктДефектации(НовыйДок);
	
	Если ДефектыОборудования.Количество() = 1 Тогда
		СтруктураПараметровКоманды = Новый Структура("Док, ID", НовыйДок, ДефектыОборудования[0].ID);
		МассивПараметровКоманды = Новый Массив();
		МассивПараметровКоманды.Добавить(НовыйДок);
		
		торо_Печать.НапечататьДокумент("Документ.торо_ВыявленныеДефекты",
		"АктДефектации",
		МассивПараметровКоманды, СтруктураПараметровКоманды);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДефектнаяВедомостьЛиквидацияОР(Команда)
	Если не ЗначениеЗаполнено(НовыйДок) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметровКоманды = Новый Массив;
	МассивПараметровКоманды.Добавить(НовыйДок);
	
	торо_Печать.НапечататьДокумент("Документ.торо_ВыявленныеДефекты",
	"ДефектнаяВедомостьЛиквидация",
	МассивПараметровКоманды);
КонецПроцедуры

&НаКлиенте
Процедура АктОбщегоТехническогоОсмотра(Команда)
	Если Не ЗначениеЗаполнено(НовыйДокументВО) Тогда
	    Возврат;
	КонецЕсли;
	
	МассивПараметровКоманды = Новый Массив;
	МассивПараметровКоманды.Добавить(НовыйДокументВО);
	
	торо_Печать.НапечататьДокумент("Документ.торо_ВнешнееОснованиеДляРабот",
		"АктОбщегоТехническогоОсмотра",
		МассивПараметровКоманды);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)	
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", ПараметрыФормы, Элементы.ДеревоРемонтныхРабот);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
		
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", 
	Новый Структура("МножественныйВыбор, ДатаОтбора, Отбор", 
	                Истина, ДатаВО, Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"))), 
	                Элементы.ДеревоРемонтныхРабот);

КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", ПараметрыФормы, Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМатрицуОценкиРисков(Команда)
	
	Если ЗначениеЗаполнено(ДатаОбнаружения) Тогда
		
		МассивВыбранныхЗначений = Новый Массив;
		
		Если Не ЗначениеЗаполнено(ID_Ремонта) Тогда
			ID_Ремонта = Новый УникальныйИдентификатор();
		Иначе
			МассивСтрокДляРемонта = РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("ID_Ремонта", ID_Ремонта)); 			
			
			Для каждого Строка Из МассивСтрокДляРемонта Цикл
				СтруктураВыбранных = Новый Структура;
				СтруктураВыбранных.Вставить("ОбъектВоздействия", Строка.ОбъектВоздействия);
				СтруктураВыбранных.Вставить("КатегорияРиска"   , Строка.КатегорияРиска);
				МассивВыбранныхЗначений.Добавить(СтруктураВыбранных);
			КонецЦикла; 	
		КонецЕсли; 
		
		ОткрытьФорму("Обработка.торо_МатрицаОценкиРисков.Форма.ФормаПодбора", 
		             Новый Структура("ДатаОбнаружения, ID_Ремонта, МассивВыбранныхЗначений, КлючНазначенияИспользования", ДатаОбнаружения, ID_Ремонта, МассивВыбранныхЗначений, "ПодборКатегорииРискаВДефект"), 
		             ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстСообщения = НСтр("ru = 'Для открытия матрицы оценки рисков необходимо заполнить реквизит <Дата обнаружения>'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРМЗакрытияЗаявокИРемонтов(Команда)
	Если Не ЗначениеЗаполнено(ОбъектРемонта) Тогда
	    Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоОР", ОбъектРемонта);
	ОткрытьФорму("Обработка.торо_ЗакрытиеЗаявокИРемонтов.Форма.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.ДеревоРемонтныхРабот, ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМестоположение(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если НЕ ТекущиеДанные =  Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыМестоположения", ЭтотОбъект);
		СтраницаВД = Элементы.СтраницыВыявленныйДефектИВнешнееОснование.ПодчиненныеЭлементы.СтраницаВыявленныйДефект;
		ОР = ?(Элементы.СтраницыВыявленныйДефектИВнешнееОснование.ТекущаяСтраница = СтраницаВД, ОтказавшийЭлемент, ОбъектРемонта);
		ОткрытьФорму("ОбщаяФорма.торо_ФормаМестоположения", Новый Структура("ОбъектРемонта, Высота, Долгота, Широта", ОР, КоординатыВысота, КоординатыДолгота, КоординатыШирота), 
		ЭтотОбъект,,,, Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМестоположение(Команда)
	
	СтраницаВД = Элементы.СтраницыЗапланированныеРемонты.ПодчиненныеЭлементы.СтраницаВыявленныеДефекты;
	СтраницаВО = Элементы.СтраницыЗапланированныеРемонты.ПодчиненныеЭлементы.СтраницаВнешниеОснования;
	
	Если Элементы.СтраницыЗапланированныеРемонты.ТекущаяСтраница = СтраницаВД Тогда
		ТекущиеДанные = Элементы.ВыявленныеДефекты.ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено Тогда 
			ОткрытьФорму("ОбщаяФорма.торо_ФормаМестоположения", Новый Структура("Документ, ОбъектРемонта, ТолькоПросмотр", ТекущиеДанные.Документ, ТекущиеДанные.ОтказавшийЭлемент, Истина), 
			ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыЗапланированныеРемонты.ТекущаяСтраница = СтраницаВО Тогда 
		ТекущиеДанные = Элементы.ВнешниеОснования.ТекущиеДанные;
		ТекущиеДанныеДерева = Элементы.Дерево.ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанныеДерева = Неопределено Тогда 
			ОткрытьФорму("ОбщаяФорма.торо_ФормаМестоположения", Новый Структура("Документ, ОбъектРемонта, ТолькоПросмотр", ТекущиеДанные.Документ, ТекущиеДанныеДерева.ОбъектРемонта, Истина), 
			ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Оповещение о закрытии, вызывается при выполнении команды "Настройка иерархии".
&НаКлиенте
Процедура НастройкаИерархииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекСтруктураИерархии = ВыбранноеЗначение;
		ОбработатьИзменениеИерархииНаСервере();
		торо_РаботаСИерархией20Клиент.ОбработатьИзменениеИерархииНаКлиенте(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИерархииНаСервере()
	
	торо_РаботаСИерархией20.ЗаполнитьПараметрыИерархии(ЭтаФорма);
	СтруктураПараметровИерархии.КонечныеЭлементыВДереве = Истина;
	ПустойРодитель = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(СтруктураПараметровИерархии);
	торо_РаботаСИерархией20.УстановитьЗапросВСпискеПоИерархии(Список, СтруктураПараметровИерархии, ПустойРодитель, ФОИспользоватьДокументыЖЦОборудования);
	торо_РаботаСИерархией20КлиентСервер.УстановитьОтборСпискаПоРодителю(Список, ПустойРодитель, Ложь);
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(Дерево, СтруктураПараметровИерархии, ПустойРодитель, ФОИспользоватьДокументыЖЦОборудования, СписокСтатусов);
	
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере();
	КонецЕсли;
	
	ДополнитьЗапросДинамическогоСпискаСостоянием(Список);
	
	Поле = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, Поле, Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные)

	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущийОР = ТекущиеДанные.Ссылка;
		СтруктураВозврата = ЗаполнитьДанныеОРНаСервере(ТекущийОР);
		УстановитьДоступностьСозданияДокументов(ТекущиеДанные, СтруктураВозврата.ЭтоПротяженныйОбъект);
		
		ВходитВСостав = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(ТекущийОР, ТекСтруктураИерархии);
		
		Если СтруктураВозврата.Контрагент <> Неопределено И ЗначениеЗаполнено(СтруктураВозврата.Контрагент) Тогда
			Элементы.Подразделение.Видимость = Ложь;
			Элементы.Контрагент.Видимость = Истина;
		Иначе
			Элементы.Подразделение.Видимость = Истина;
			Элементы.Контрагент.Видимость = Ложь;
		КонецЕсли;
		
		Подразделение = СтруктураВозврата.Подразделение;
		Наименование = СтруктураВозврата.Наименование;
		ОбъектРемонта = СтруктураВозврата.Ссылка;
		Местонахождение = СтруктураВозврата.АдресМестонахождения;
		ИнвентарныйНомер = СтруктураВозврата.ИнвентарныйНомер;
		ЗаводскойНомер = СтруктураВозврата.ЗаводскойНомер;
		ТехнологичейскийНомер = СтруктураВозврата.ТехНомер;
		ПодразделениеИсполнитель = СтруктураВозврата.ПодразделениеИсполнитель;
		ИсполнительВО = СтруктураВозврата.ПодразделениеИсполнитель;
		Контрагент = СтруктураВозврата.Контрагент;
		Направление = СтруктураВозврата.Направление;
		ЭтоПротяженныйОбъект = СтруктураВозврата.ЭтоПротяженныйОбъект;
		
		Если СтруктураВозврата.ЭтоГруппа <> Истина 
			И СтруктураВозврата.ТипОбъекта <> ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда
			ОтказавшийЭлемент = ТекущиеДанные.Ссылка;
		Иначе
			ОтказавшийЭлемент = Неопределено;
		КонецЕсли;
		
		Дата = ТекущаяДата();
		ДатаОбнаружения = ТекущаяДата();
		
		КонтактноеЛицо = Неопределено;
		ТиповойДефект = Неопределено;
		КритичностьДефекта = Неопределено;
		ОписаниеДефекта = Неопределено;
		ВидДефекта = Неопределено;
		ПричинаДефекта = Неопределено;
		УсловияВыявленияДефекта = Неопределено;
		НаправлениеНаУстранение = Неопределено;
		ПоследствиеДефекта = Неопределено;
		
		Статус = "";
		Номер = "";
		НовыйДок = Неопределено;
		
		ДатаВО = ТекущаяДата();
		ПлановаяДатаРемонта = ТекущаяДата();
		
		НовыйДокументВО = Неопределено;
		ИсполнительВО = ПолучитьПодразделениеИсполнительОРНаСервере(ОтказавшийЭлемент);
		ТиповойДефектВО = Неопределено;
		ОписаниеВО = "";
		
		СтатусВО = "";
		НомерВО = "";
		
		ID_Ремонта = "";
		КрайняяДопустимаяДатаЗавершенияРемонта = Дата("00010101");
		ДатаНачалаРемонта    = Дата("00010101");
		ДатаОкончанияРемонта = Дата("00010101");
		
		РезультатыПодбораИзМатрицыОценкиРисков.Очистить();
		
		ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Очистить();
	Иначе 
		Статус = "";
		Номер = "";
		НовыйДок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ЗаполнитьДанныеОРНаСервере(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
	               |	торо_ОбъектыРемонта.АдресМестонахождения КАК АдресМестонахождения,
	               |	торо_ОбъектыРемонта.Наименование КАК Наименование,
	               |	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
	               |	торо_ОбъектыРемонта.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
	               |	торо_ОбъектыРемонта.Направление КАК Направление,
	               |	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
				   |	торо_ОбъектыРемонта.ЭтоПротяженныйОбъект КАК ЭтоПротяженныйОбъект,
	               |	торо_ОбъектыРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
	               |	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
	               |	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	СтруктураВозврата = Новый Структура("ИнвентарныйНомер,ЗаводскойНомер,ТехНомер,АдресМестонахождения,Наименование,Подразделение,ПодразделениеИсполнитель,Направление,ЭтоГруппа,ВнешнийОбъект,Контрагент,Ссылка,ТипОбъекта,ЭтоПротяженныйОбъект");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьПоТиповомуДефекту()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Причина КАК Причина,
	|	торо_ТиповыеДефектыОборудования.ВидДефекта КАК ВидДефекта,
	|	торо_ТиповыеДефектыОборудования.КритичностьДефекта КАК КритичностьДефекта,
	|	торо_ТиповыеДефектыОборудования.ОписаниеДефекта КАК ОписаниеДефекта,
	|	торо_ТиповыеДефектыОборудования.НаправлениеНаУстранение КАК НаправлениеНаУстранение,
	|	торо_ТиповыеДефектыОборудования.ПоследствиеДефекта КАК ПоследствиеДефекта
	|ИЗ
	|	Справочник.торо_ТиповыеДефектыОборудования КАК торо_ТиповыеДефектыОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеДефектыОборудования.ПричиныВозникновенияДефекта КАК торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта
	|		ПО (торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Ссылка = торо_ТиповыеДефектыОборудования.Ссылка)
	|ГДЕ
	|	торо_ТиповыеДефектыОборудования.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", ТиповойДефект);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат; 
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ВидДефекта = Выборка.ВидДефекта;
	ПричинаДефекта = Выборка.Причина;
	КритичностьДефекта = Выборка.КритичностьДефекта;
	ОписаниеДефекта = Выборка.ОписаниеДефекта;
	ПоследствиеДефекта = Выборка.ПоследствиеДефекта;
	НаправлениеНаУстранение = Выборка.НаправлениеНаУстранение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыШапкиПоУмолчанию()
	
	Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяОрганизация",
		Справочники.Организации.ПустаяСсылка());
		
	ПодразделениеДляДок = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновноеПодразделение",
		Справочники.СтруктураПредприятия.ПустаяСсылка());	
		
	Дата = ТекущаяДата();
	ДатаОбнаружения = ТекущаяДата();
	
	ДатаВО = ТекущаяДата();
	ПлановаяДатаРемонта = ТекущаяДата();
	ОрганизацияВО = Организация;
	ПодразделениеВО = ПодразделениеДляДок;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхРеквизитов()
	
	Ошибка = Ложь;
	
	МассивОшибок = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Ошибка = Истина;
		МассивОшибок.Добавить("Организация");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПодразделениеДляДок) Тогда
		Ошибка = Истина;
		МассивОшибок.Добавить("Подразделение");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(УсловияВыявленияДефекта) Тогда
		Ошибка = Истина;
		МассивОшибок.Добавить("Дефект выявлен в процессе");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Ошибка = Истина;
		МассивОшибок.Добавить("Дата");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОбнаружения) Тогда
		Ошибка = Истина;
		МассивОшибок.Добавить("Дата обнаружения");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтказавшийЭлемент) Тогда
		Ошибка = Истина;
		МассивОшибок.Добавить("Отказавший элемент");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВидДефекта) Тогда
		Ошибка = Истина;
		МассивОшибок.Добавить("Вид дефекта");
	КонецЕсли;
	
	Для каждого текСтрока из МассивОшибок Цикл
		ШаблонСообщения = НСтр("ru = 'Поле <%1> не заполнено! Документ не будет создан.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрока);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхРеквизитовВО()
	Ошибка = Ложь;
	МассивОшибок = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ТекущийОР) Тогда
		МассивОшибок.Добавить("Объект ремонта");
	ИначеЕсли торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийОР, "ЭтоГруппа") Тогда
		ТекстСообщения = НСтр("ru = 'В качестве объекта ремонта нельзя выбрать группу!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Ошибка);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОрганизацияВО) Тогда
		МассивОшибок.Добавить("Организация");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПодразделениеВО) Тогда
		МассивОшибок.Добавить("Подразделение");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаВО) Тогда
		МассивОшибок.Добавить("Дата");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлановаяДатаРемонта) Тогда
		МассивОшибок.Добавить("Плановая дата ремонта");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтветственныйВО) Тогда
		МассивОшибок.Добавить("Ответственный");
	КонецЕсли;
		
	Для каждого ТекущийЭлементМассива Из МассивОшибок Цикл
		ШаблонСообщения = НСтр("ru = 'Поле <%1> не заполнено! Документ не будет создан.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийЭлементМассива);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Ошибка);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийОР) И Не торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийОР, "ЭтоГруппа")
		И ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество() = 0 Тогда
	    ШаблонСообщения = НСтр("ru = 'Для объекта ремонта <%1> не указано ни одной рекомендуемой операции! Документ <Внешнее основание для работ> не будет создан.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийОР);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Ошибка);
	КонецЕсли;
	
	Возврат Ошибка;
КонецФункции

&НаСервере 
Функция СоздатьДокументВыявленныйДефект()
	
	Если ЗначениеЗаполнено(Номер) и Документы.торо_ВыявленныеДефекты.НайтиПоНомеру(Номер, Дата) <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Документ с таким номером уже существует в этом периоде! Документ не был создан.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ФОИспользоватьГарантии Тогда
		ТабДефектов = Новый ТаблицаЗначений;
		ТабДефектов.Колонки.Добавить("ОбъектРемонта");
		ТабДефектов.Колонки.Добавить("ОтказавшийЭлемент");
		ТабДефектов.Колонки.Добавить("ДатаОбнаружения");
		ТабДефектов.Колонки.Добавить("ГарантийныйРемонт");
		
		НСтр                   = ТабДефектов.Добавить();
		НСтр.ОбъектРемонта     = ОбъектРемонта;
		НСтр.ОтказавшийЭлемент = ОтказавшийЭлемент;
		НСтр.ДатаОбнаружения   = ДатаОбнаружения;  
		НСтр.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ОтказавшийЭлемент, ДатаОбнаружения, Дата("00010101"));
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(, "", ТабДефектов);
	КонецЕсли;
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВыявленныеДефекты;
	СогласованиеИспользуется = торо_РаботаССогласованиями.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);

	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Дата", Дата);
	СтруктураЗаполнения.Вставить("ДатаОбнаружения", ДатаОбнаружения);
	Если ЗначениеЗаполнено(Номер) Тогда 
		СтруктураЗаполнения.Вставить("Номер", Номер);
	КонецЕсли;
	
	СтруктураЗаполнения.Вставить("Инициатор", Инициатор);
	СтруктураЗаполнения.Вставить("КонтактноеЛицоИнициатора", КонтактноеЛицо);
	СтруктураЗаполнения.Вставить("ДефектВыявленВПроцессе", УсловияВыявленияДефекта);
	СтруктураЗаполнения.Вставить("Организация", Организация);
	СтруктураЗаполнения.Вставить("Подразделение", ПодразделениеДляДок);
	СтруктураЗаполнения.Вставить("ОбъектРемонта", ОбъектРемонта);
	СтруктураЗаполнения.Вставить("ПодразделениеИсполнитель", ПодразделениеИсполнитель);
		
	СтруктураСтрокиТЧ = Новый Структура;
	СтруктураСтрокиТЧ.Вставить("ОтказавшийЭлемент", ОтказавшийЭлемент);
	СтруктураСтрокиТЧ.Вставить("ОбъектРемонта", ОбъектРемонта);
	СтруктураСтрокиТЧ.Вставить("ТиповойДефект", ТиповойДефект);
	СтруктураСтрокиТЧ.Вставить("ВидДефекта", ВидДефекта);
	СтруктураСтрокиТЧ.Вставить("ДефектПричина", ПричинаДефекта);
	СтруктураСтрокиТЧ.Вставить("КритичностьДефекта", КритичностьДефекта);
	СтруктураСтрокиТЧ.Вставить("ДефектОписание", ОписаниеДефекта);
	СтруктураСтрокиТЧ.Вставить("ПоследствияДефекта", ПоследствиеДефекта);
	СтруктураСтрокиТЧ.Вставить("НаправлениеНаУстранение", НаправлениеНаУстранение);
	СтруктураСтрокиТЧ.Вставить("ПодразделениеИсполнитель", ПодразделениеИсполнитель);
	СтруктураСтрокиТЧ.Вставить("ID", ID_Ремонта);
	СтруктураСтрокиТЧ.Вставить("КрайняяДопустимаяДатаЗавершенияРемонта", КрайняяДопустимаяДатаЗавершенияРемонта);
	СтруктураСтрокиТЧ.Вставить("ДатаНачалаРемонта", ДатаНачалаРемонта);
	СтруктураСтрокиТЧ.Вставить("ДатаОкончанияРемонта", ДатаОкончанияРемонта);
	СтруктураСтрокиТЧ.Вставить("Высота", КоординатыВысота);
	СтруктураСтрокиТЧ.Вставить("Долгота", КоординатыДолгота);
	СтруктураСтрокиТЧ.Вставить("Широта", КоординатыШирота);
	
	МассивСтрокТЧ = Новый Массив;
	МассивСтрокТЧ.Добавить(СтруктураСтрокиТЧ);
	
	СтруктураЗаполнения.Вставить("МассивСтрокТЧ", МассивСтрокТЧ);
	СтруктураЗаполнения.Вставить("РезультатыПодбораИзМатрицыОценкиРисков", РезультатыПодбораИзМатрицыОценкиРисков.Выгрузить());
	
	ДокументОбъект = Документы.торо_ВыявленныеДефекты.СоздатьДокумент();
	ДокументОбъект.Заполнить(СтруктураЗаполнения);
	
	Попытка
		Если СогласованиеИспользуется Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи документа произошла ошибка: '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		возврат Неопределено;
	КонецПопытки;
	
	НовыйДок = ДокументОбъект.Ссылка;
	Возврат ДокументОбъект.Номер;	
	
КонецФункции

&НаСервере 
Функция СоздатьДокументВнешнееОснованиеДляРабот()
	Если ЗначениеЗаполнено(НомерВО) и Документы.торо_ВнешнееОснованиеДляРабот.НайтиПоНомеру(НомерВО, ДатаВО) <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Документ с таким номером уже существует в этом периоде! Документ не был создан.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВнешнееОснованиеДляРабот;
	СогласованиеИспользуется = торо_РаботаССогласованиями.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);

	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Дата", ДатаВО);
	СтруктураЗаполнения.Вставить("ДатаСоздания", ДатаВО);
	Если ЗначениеЗаполнено(НомерВО) Тогда 
		СтруктураЗаполнения.Вставить("Номер", НомерВО);
	КонецЕсли;
	
	СтруктураЗаполнения.Вставить("Организация", ОрганизацияВО);
	СтруктураЗаполнения.Вставить("Подразделение", ПодразделениеВО);
	
	Предписание_ID = Новый УникальныйИдентификатор();
	
#Область ТЧОбследованноеОборудование
	СтруктураСтрокиТЧ = Новый Структура;
	СтруктураСтрокиТЧ.Вставить("ID", Предписание_ID);
	СтруктураСтрокиТЧ.Вставить("ОбъектРемонта", ОбъектРемонта);
	СтруктураСтрокиТЧ.Вставить("ТиповойДефект", ТиповойДефектВО);
	СтруктураСтрокиТЧ.Вставить("Описание", ОписаниеВО);
	СтруктураСтрокиТЧ.Вставить("ПлановаяДатаРемонта", ПлановаяДатаРемонта);
	СтруктураСтрокиТЧ.Вставить("Ответственный", ОтветственныйВО);
	СтруктураСтрокиТЧ.Вставить("Исполнитель", ИсполнительВО);
	СтруктураСтрокиТЧ.Вставить("ГарантийныйРемонт", торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ОбъектРемонта, ПлановаяДатаРемонта, ПлановаяДатаРемонта));
	СтруктураСтрокиТЧ.Вставить("Высота", КоординатыВысота);
	СтруктураСтрокиТЧ.Вставить("Долгота", КоординатыДолгота);
	СтруктураСтрокиТЧ.Вставить("Широта", КоординатыШирота);
	
	ОбследованноеОборудование = Новый Массив();
	ОбследованноеОборудование.Добавить(СтруктураСтрокиТЧ);
	СтруктураЗаполнения.Вставить("МассивСтрокТЧОбследованноеОборудование", ОбследованноеОборудование);
#КонецОбласти

#Область ТЧРемонтныеРаботы
	РемонтныеРаботы = Новый Массив();
		
	ЗаполнитьТЧРемонтныеРаботы(РемонтныеРаботы, ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы(), Предписание_ID);
	СтруктураЗаполнения.Вставить("МассивСтрокТЧРемонтныеРаботы", РемонтныеРаботы);
#КонецОбласти
	
	ДокументОбъект = Документы.торо_ВнешнееОснованиеДляРабот.СоздатьДокумент();
	ДокументОбъект.Заполнить(СтруктураЗаполнения);
	
	Попытка
		Если СогласованиеИспользуется Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи документа произошла ошибка: '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	НовыйДокументВО = ДокументОбъект.Ссылка;
	Возврат ДокументОбъект.Номер;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧРемонтныеРаботы(РемонтныеРаботы, СтрокиДерева, Предписание_ID)
	
	Для каждого ТекущаяСтрока Из СтрокиДерева Цикл
		
		СтруктураСтрокиТЧ = Новый Структура;
		СтруктураСтрокиТЧ.Вставить("ID", ТекущаяСтрока.ID);
		СтруктураСтрокиТЧ.Вставить("РемонтнаяРабота", ТекущаяСтрока.РемонтнаяРабота);
		СтруктураСтрокиТЧ.Вставить("Родитель_ID", ТекущаяСтрока.Родитель_ID);
		СтруктураСтрокиТЧ.Вставить("Количество", ТекущаяСтрока.Количество);
		СтруктураСтрокиТЧ.Вставить("Предписание_ID", Предписание_ID);
		СтруктураСтрокиТЧ.Вставить("Картинка", ТекущаяСтрока.Картинка);
		СтруктураСтрокиТЧ.Вставить("ID_ПараллельнойОперации", ТекущаяСтрока.ID_ПараллельнойОперации);
		
		РемонтныеРаботы.Добавить(СтруктураСтрокиТЧ);
		
		ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы(); 
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ЗаполнитьТЧРемонтныеРаботы(РемонтныеРаботы, ПодчиненныеСтроки, Предписание_ID);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоля()
	
	НовыйДок = Неопределено;	
	
	Дата = ТекущаяДата();
	ДатаОбнаружения = ТекущаяДата();
	
	ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОРНаСервере(ОтказавшийЭлемент);
	КонтактноеЛицо = Неопределено; 
	ТиповойДефект = Неопределено;
	КритичностьДефекта = Неопределено;
	ВидДефекта = Неопределено;
	ПричинаДефекта = Неопределено;
	УсловияВыявленияДефекта = Неопределено;
	ОписаниеДефекта = "";
	НаправлениеНаУстранение = Неопределено;
	ПоследствиеДефекта = Неопределено;
	
	Статус = "";
	Номер = "";
	
	НовыйДокументВО = Неопределено;
	
	ДатаВО = ТекущаяДата();
	ПлановаяДатаРемонта = ТекущаяДата();
	
	ОтветственныйВО = Неопределено;
	ИсполнительВО = ПодразделениеИсполнитель;
	ТиповойДефектВО = Неопределено;
	ОписаниеВО = "";
	
	СтатусВО = "";
	НомерВО = "";
	
	ID_Ремонта = "";
	КрайняяДопустимаяДатаЗавершенияРемонта = Дата("00010101");
	ДатаНачалаРемонта    = Дата("00010101");
	ДатаОкончанияРемонта = Дата("00010101");

	КоординатыВысота = 0;
	КоординатыДолгота = 0;
	КоординатыШирота = 0;
		
	РезультатыПодбораИзМатрицыОценкиРисков.Очистить();
	
	ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Очистить();
	
	ЗаполнитьРеквизитыШапкиПоУмолчанию();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодразделениеИсполнительОРНаСервере(ОтказавшийЭлемент)
	
	Если НЕ ОтказавшийЭлемент.Пустая() Тогда
		Возврат ОтказавшийЭлемент.ПодразделениеИсполнитель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

Функция ПолучитьСтруктуруПараметровКоманды_АктДефектации(ДокДефект)
	
	ДефектыОборудования = Новый Массив;
	
	Для каждого Стр Из ДокДефект.СписокДефектов Цикл
		СтруктураТЧ = Новый Структура("ID, ОбъектРемонта");
		ЗаполнитьЗначенияСвойств(СтруктураТЧ, Стр);
		ДефектыОборудования.Добавить(СтруктураТЧ);
	КонецЦикла;
	
	Возврат ДефектыОборудования;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПричинДефектовНаСервере(ТиповойДефект)
	
	Причины = Новый СписокЗначений;  
	Для каждого Стр Из ТиповойДефект.ПричиныВозникновенияДефекта Цикл
		Причины.Добавить(Стр.Причина);	
	КонецЦикла;
	
	Возврат Причины;
	
КонецФункции

&НаСервере
Функция ПолучитьПредопределенноеНаправлениеОР()
	Возврат Справочники.торо_НаправленияОбъектовРемонтныхРабот.Безнаправления;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОР(ИмяЭлемента)
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект[ИмяЭлемента]) Тогда
		ОтменитьПоискВСпискеОР(ИмяЭлемента);
		Возврат;
	КонецЕсли; 
	
	Если ИмяЭлемента = "ТипПоискаОрганизация" Тогда
		Поле = "Организация";
	ИначеЕсли ИмяЭлемента = "ТипПоискаПодразделение" Тогда
		Поле = "Подразделение";
	ИначеЕсли ИмяЭлемента = "ТипПоискаНаправление" Тогда
		Поле = "Направление";
	ИначеЕсли ИмяЭлемента = "ТипПоискаТиповойОР" Тогда
		Поле = "ТиповойОР";
	ИначеЕсли ИмяЭлемента = "ТипПоискаСостояние" Тогда
		Поле = "Состояние";
	ИначеЕсли ИмяЭлемента = "ТипПоискаКритичность" Тогда
		Поле = "Приоритет";
	КонецЕсли;

	ОтборУстановлен = Ложь;
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора.ПравоеЗначение = ЭтотОбъект[ИмяЭлемента];
			ОтборУстановлен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОтборУстановлен Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, Поле, ЭтотОбъект[ИмяЭлемента], ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Если ФОИспользоватьДокументыЖЦОборудования Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусВУчете", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(ЗначениеПоиска) И Не ЗначениеЗаполнено(ТипПоискаКритичность) И
									Не ЗначениеЗаполнено(ТипПоискаСостояние);
									
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	Иначе
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте                                                  
Процедура ОтменитьПоискВСпискеОР(ИмяЭлемента)
	
	Если ИмяЭлемента = "ТипПоискаОрганизация" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Организация");
	ИначеЕсли ИмяЭлемента = "ТипПоискаПодразделение" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Подразделение");
	ИначеЕсли ИмяЭлемента = "ТипПоискаНаправление" Тогда	
	    Поле = Новый ПолеКомпоновкиДанных("Направление");
	ИначеЕсли ИмяЭлемента = "ТипПоискаТиповойОР" Тогда	
	    Поле = Новый ПолеКомпоновкиДанных("ТиповойОР");
	ИначеЕсли ИмяЭлемента = "ТипПоискаСостояние" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Состояние");
	ИначеЕсли ИмяЭлемента = "ТипПоискаКритичность" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Приоритет");
	КонецЕсли;

	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ЭлементДляУдаления = ЭлементОтбора;
			Список.Отбор.Элементы.Удалить(ЭлементДляУдаления);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(ЗначениеПоиска) И Не ЗначениеЗаполнено(ТипПоискаКритичность) И
									Не ЗначениеЗаполнено(ТипПоискаСостояние);
									
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	Иначе
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОРПоНаименованию(Текст)
	
	ОтменитьПоискВСпискеОРПоНаименованию();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ТипПоиска, Текст, ВидСравненияКомпоновкиДанных.Содержит,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусВУчете", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	КонецЕсли;
		
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(Текст);
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	Иначе
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоискВСпискеОРПоНаименованию()
	
	СписокПолей = Новый СписокЗначений;
	Для каждого Элемент Из Элементы.ТипПоиска.СписокВыбора Цикл
		СписокПолей.Добавить(Новый ПолеКомпоновкиДанных(Элемент.Значение));
	КонецЦикла;
	СписокПолей.Добавить(Новый ПолеКомпоновкиДанных("Ссылка"));
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если СписокПолей.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(ЗначениеПоиска);
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьКартинкиЭлементовДереваНаСервере(ИдентификаторСтроки = 0)
	торо_РаботаСИерархией20.ОбновитьКартинкиЭлементовДереваНаСервере(Дерево, ИдентификаторСтроки);
КонецПроцедуры

&НаСервере
Процедура УстановитьВнешнийВидФормы()
	ФОИспользоватьВО = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот");
	ФОИспользоватьВД = ПолучитьФункциональнуюОпцию("торо_УчетВыявленныхДефектовОборудования");
	
	Если ФОИспользоватьВД И Не ФОИспользоватьВО Тогда
	    Элементы.СтраницыВыявленныйДефектИВнешнееОснование.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаДанныеПоВнешнемуОснованию.Видимость = Ложь;
		Элементы.ГруппаДанныеПоДефекту.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаДанныеПоДефекту.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
		
		Элементы.ФормаОтчетторо_ВнешниеОснованияОткрыть.Видимость = Ложь;
		Элементы.ФормаДокументторо_ВнешнееОснованиеДляРаботОткрытьСписок.Видимость = Ложь;
		Элементы.АктОбщегоТехническогоОсмотра.Видимость = Ложь;
		Элементы.ЗарегистрироватьВнешнееОснование.Видимость = Ложь;
	ИначеЕсли Не ФОИспользоватьВД И ФОИспользоватьВО Тогда
		Элементы.СтраницыВыявленныйДефектИВнешнееОснование.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаДанныеПоДефекту.Видимость = Ложь;
		Элементы.ГруппаДанныеПоВнешнемуОснованию.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаДанныеПоВнешнемуОснованию.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
		
		Элементы.ФормаОтчетторо_ВыявленныеДефектыОткрыть.Видимость = Ложь;
		Элементы.ФормаДокументторо_ВыявленныеДефектыОткрытьСписок.Видимость = Ложь;
		Элементы.ФормаАктДефектации.Видимость = Ложь;
		Элементы.ДефектнаяВедомость.Видимость = Ложь;
		Элементы.ФормаДефектнаяВедомостьЛиквидацияОР.Видимость = Ложь;
		Элементы.ЗарегистрироватьДефект.Видимость = Ложь;
		Элементы.ФормаЖурналДефектов.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПричинаДефектаОкончаниеВводаТекстаАвтоПодбор(СтандартнаяОбработка, ПараметрыПолученияДанных, ДанныеВыбора)
	
	Если ЗначениеЗаполнено(ТиповойДефект) Тогда 
		СтандартнаяОбработка = Ложь;
		СписокПричин = ПолучитьСписокПричинДефектовНаСервере(ТиповойДефект);
		Если СписокПричин.Количество() >0 Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокПричин);
			ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.торо_ПричиныДефектов"), ПараметрыПолученияДанных);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьТаблицыЗапланированныхРемонтов()
	ОбновитьТаблицуПлановыхРемонтов();
	ОбновитьТаблицуВД();
	ОбновитьТаблицуВО();
КонецПроцедуры

Процедура ОбновитьТаблицуПлановыхРемонтов()
	ПлановыеРемонты.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК ID,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	               |ПОМЕСТИТЬ ВТ_ПлановыеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, ОбъектРемонтныхРабот = &ОбъектРемонта) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(
	               |			,
	               |			ОбъектРемонта = &ОбъектРемонта
	               |				И ID В
	               |					(ВЫБРАТЬ
	               |						ВТ_ПлановыеРемонты.ID
	               |					ИЗ
	               |						ВТ_ПлановыеРемонты КАК ВТ_ПлановыеРемонты)) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ПлановаяДатаНачала,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ПлановаяДатаОкончания,
	               |	ВТ_ПлановыеРемонты.ВидРемонтныхРабот КАК ВидРемонта,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДокументНачалаЦепочки КАК Основание,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование КАК ДокументПлановыхДат
	               |ИЗ
	               |	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПлановыеРемонты КАК ВТ_ПлановыеРемонты
	               |		ПО торо_АктуальныеПлановыеДатыРемонтов.IDРемонта = ВТ_ПлановыеРемонты.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗавершенныеРемонты КАК ВТ_ЗавершенныеРемонты
	               |		ПО торо_АктуальныеПлановыеДатыРемонтов.IDРемонта = ВТ_ЗавершенныеРемонты.ID
	               |ГДЕ
	               |	торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта = &ОбъектРемонта
	               |	И торо_АктуальныеПлановыеДатыРемонтов.ДокументНачалаЦепочки ССЫЛКА Документ.торо_ПланГрафикРемонта
	               |	И торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала >= &ТекущаяДата
	               |	И ВТ_ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПлановаяДатаНачала";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаРемонтов = РезультатЗапроса.Выбрать();
	Пока ВыборкаРемонтов.Следующий() Цикл
	    ЗаполнитьЗначенияСвойств(ПлановыеРемонты.Добавить(), ВыборкаРемонтов);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьТаблицуВД()
	ВыявленныеДефекты.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(, ОбъектРемонта = &ОбъектРемонта) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ВыявленныеДефекты.Регистратор КАК Документ,
	               |	торо_ВыявленныеДефекты.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	торо_ВыявленныеДефекты.ВидДефекта КАК ВидДефекта,
	               |	торо_ВыявленныеДефекты.ДефектОписание КАК ДефектОписание,
	               |	торо_ВыявленныеДефекты.Период КАК ДатаОбнаружения
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗавершенныеРемонты КАК ВТ_ЗавершенныеРемонты
	               |		ПО торо_ВыявленныеДефекты.ID = ВТ_ЗавершенныеРемонты.ID
	               |ГДЕ
	               |	торо_ВыявленныеДефекты.ОбъектРемонта = &ОбъектРемонта
	               |	И ВТ_ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыДокументов.ИзменяемыйДокумент КАК Документ,
	               |	торо_СтатусыДокументов.Статус КАК Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыДокументов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыДокументов.СрезПоследних(
	               |			,
	               |			ИзменяемыйДокумент В
	               |				(ВЫБРАТЬ
	               |					ВТ_ПодготовленныеДанные.Документ
	               |				ИЗ
	               |					ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные)) КАК торо_СтатусыДокументов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодготовленныеДанные.Документ КАК Документ,
	               |	ВТ_ПодготовленныеДанные.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	ВТ_ПодготовленныеДанные.ВидДефекта КАК ВидДефекта,
	               |	ВТ_ПодготовленныеДанные.ДефектОписание КАК Описание,
	               |	ВТ_ПодготовленныеДанные.ДатаОбнаружения КАК ДатаОбнаружения,
	               |	ВТ_СтатусыДокументов.Статус КАК Статус
	               |ИЗ
	               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыДокументов КАК ВТ_СтатусыДокументов
	               |		ПО ВТ_ПодготовленныеДанные.Документ = ВТ_СтатусыДокументов.Документ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаОбнаружения";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаРемонтов = РезультатЗапроса.Выбрать();
	Пока ВыборкаРемонтов.Следующий() Цикл
	    ЗаполнитьЗначенияСвойств(ВыявленныеДефекты.Добавить(), ВыборкаРемонтов);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьТаблицуВО()
	ВнешниеОснования.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(, ОбъектРемонта = &ОбъектРемонта) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(торо_ВнешниеОснованияДляРабот.Регистратор КАК Документ.торо_ВнешнееОснованиеДляРабот) КАК Документ,
	               |	торо_ВнешниеОснованияДляРабот.Описание КАК Описание,
	               |	торо_ВнешниеОснованияДляРабот.ПлановаяДатаРемонта КАК Срок
	               |ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗавершенныеРемонты КАК ВТ_ЗавершенныеРемонты
	               |		ПО торо_ВнешниеОснованияДляРабот.ID = ВТ_ЗавершенныеРемонты.ID
	               |ГДЕ
	               |	торо_ВнешниеОснованияДляРабот.ОбъектРемонта = &ОбъектРемонта
	               |	И торо_ВнешниеОснованияДляРабот.Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот
	               |	И ВТ_ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтатусыДокументов.ИзменяемыйДокумент КАК Документ,
	               |	торо_СтатусыДокументов.Статус КАК Статус
	               |ПОМЕСТИТЬ ВТ_СтатусыДокументов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыДокументов.СрезПоследних(
	               |			,
	               |			ИзменяемыйДокумент В
	               |				(ВЫБРАТЬ
	               |					ВТ_ПодготовленныеДанные.Документ
	               |				ИЗ
	               |					ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные)) КАК торо_СтатусыДокументов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПодготовленныеДанные.Документ КАК Документ,
	               |	ВТ_ПодготовленныеДанные.Описание КАК Описание,
	               |	ВТ_ПодготовленныеДанные.Срок КАК Срок,
	               |	ВТ_СтатусыДокументов.Статус КАК Статус
	               |ИЗ
	               |	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыДокументов КАК ВТ_СтатусыДокументов
	               |		ПО ВТ_ПодготовленныеДанные.Документ = ВТ_СтатусыДокументов.Документ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Срок";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаРемонтов = РезультатЗапроса.Выбрать();
	Пока ВыборкаРемонтов.Следующий() Цикл
	    ЗаполнитьЗначенияСвойств(ВнешниеОснования.Добавить(), ВыборкаРемонтов);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДополнитьЗапросДинамическогоСпискаСостоянием(Список)
	
	ТекстЗапросаСостоянийОР = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации КАК ВидЭксплуатации,
	|	торо_ТекущееСостояниеОРСрезПоследних.ПричинаПростоя КАК ПричинаПростоя
	|ПОМЕСТИТЬ ВТ_СостоянияОР
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ) КАК торо_ТекущееСостояниеОРСрезПоследних
	|;
	|";
	
	Список.ТекстЗапроса = ТекстЗапросаСостоянийОР + Список.ТекстЗапроса;
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,"И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)", 
	"И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияОР КАК ВТ_СостоянияОР
	|	ПО торо_ОбъектыРемонта.Ссылка = ВТ_СостоянияОР.ОбъектРемонта");
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,", 
	"	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
	|	ВТ_СостоянияОР.ВидЭксплуатации КАК Состояние,");

	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСозданияДокументов(ТекДанные, МожноУстановитьМестоположение)
		
	ДоступностьСоздания = Истина;
	Если ТекДанные.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") 
		Или ТекДанные.ЭтоГруппа
		Или ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		ДоступностьСоздания = Ложь;
	КонецЕсли;
	
	Если Не ДоступностьСоздания Тогда
		Элементы.ГруппаКнопки.Доступность = Ложь;
		Элементы.СтраницыВыявленныйДефектИВнешнееОснование.Доступность = Ложь;
		Если ИспользоватьФМ Тогда
			Элементы.ДекорацияФМ.Видимость = Истина;
		Иначе
			Элементы.ДекорацияБезФМ.Видимость = Истина;
		КонецЕсли;
		Элементы.УстановитьМестоположение.Доступность = Ложь;
	Иначе
		Элементы.ГруппаКнопки.Доступность = Истина;
		Элементы.СтраницыВыявленныйДефектИВнешнееОснование.Доступность = Истина;
		Элементы.ДекорацияФМ.Видимость = Ложь;
		Элементы.ДекорацияБезФМ.Видимость = Ложь; 
		Элементы.УстановитьМестоположение.Доступность = МожноУстановитьМестоположение;
	КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборПоОбъектуРемонта(ТекущийОбъектРемонта)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.торо_РабочееМестоДиспетчера", 
			Пользователи.ТекущийПользователь().УникальныйИдентификатор(), 
			ТекущийОбъектРемонта); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтборПоОбъектуРемонта()
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.торо_РабочееМестоДиспетчера", 
		Пользователи.ТекущийПользователь().УникальныйИдентификатор()); 
КонецФункции

&НаКлиенте
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ПодчиненнаяСтрока.Количество = ПодчиненнаяСтрока.Количество * Коэффициент;
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ПодчиненнаяСтрока, Коэффициент);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияФормыМестоположения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда      
		КоординатыВысота = Результат.Высота;
		КоординатыДолгота = Результат.Долгота;
		КоординатыШирота = Результат.Широта; 
	КонецЕсли;
	
КонецПРоцедуры

#КонецОбласти
