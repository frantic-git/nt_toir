
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БезусловноеЗакрытие = Ложь;
	ПрименитьПраметрыПоумолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РазницаВДнях = (НачалоДня(Настройки["Объект.ПериодПланирования"].ДатаОкончания) - НачалоДня(Настройки["Объект.ПериодПланирования"].ДатаНачала)) / (60 * 60 * 24);
	Если РазницаВДнях > 95 Тогда
		Объект.ПериодПланирования.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	КонецЕсли; 	
	
	Если Настройки["ОбновлятьПриОткрытии"] = Истина Тогда
		ОбновитьДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыОтбораДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ Модифицированность Тогда
	    Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗавершениеРаботы Тогда 
		Оповещение = Новый ОписаниеОповещения("СохранениеВопрос", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены! Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'При закрытии формы все данные будут утеряны. Продолжить?'");	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьПараметрыОтбораДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	УстановитьПараметрыОтбораДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияПриИзменении(Элемент)
	РазницаВДнях = (НачалоДня(Объект.ПериодПланирования.ДатаОкончания) - НачалоДня(Объект.ПериодПланирования.ДатаНачала)) / (60 * 60 * 24);
	Если РазницаВДнях > 95 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Период планирования не должен превышать 3 месяца'"));
		Объект.ПериодПланирования.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	Иначе		
		УстановитьПараметрыОтбораДинамическихСписков();
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	Если Модифицированность Тогда
	
		ОписаниеЗавершения = Новый ОписаниеОповещения("ОбновитьДанныеЗавершение",ЭтаФорма);
		ПоказатьВопрос(ОписаниеЗавершения, "Несохраненные изменения будут потеряны. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
	Иначе
		ОбновитьДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЗавершение(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбновитьДанныеНаСервере();
		Модифицированность = Ложь;
		УстановитьВидимостьПредупреждения();
	КонецЕсли; 

КонецПроцедуры // ОбновитьДанныеЗавершение()
 
&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	ПрочитатьДанныеПлановойДоступности();
	СформироватьТаблицуПлановойДоступности();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляВсехСотрудников(Команда)
	ЗаполнитьДляВсехСотрудниковНаСервере();
	УстановитьВидимостьПредупреждения();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСотрудника(Команда)
	
	Сотрудник = Неопределено;
	
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ТаблицаРабочегоВремени" ИЛИ ЭтаФорма.ТекущийЭлемент.Имя = "Сотрудники" Тогда
	
		ТекДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Сотрудник = ТекДанные.Сотрудник;
		КонецЕсли;
		
		ЗаполнитьДляВсехСотрудниковНаСервере(Сотрудник);
		УстановитьВидимостьПредупреждения();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенныеРаботыСотрудника(Команда)
	
	ИмяКолонки = Элементы.ТаблицаРабочегоВремени.ТекущийЭлемент.Имя;
	ИмяСвойства   = СтрЗаменить(ИмяКолонки,"ТаблицаРабочегоВремени","");
	
	ТекДанные = Элементы.ТаблицаРабочегоВремени.ТекущиеДанные;
	
	ДатаГрафика = ПолучитьЗначениеИзДобавленныхКолонок(Новый Структура("ИмяКолонки",ИмяСвойства),"Дата");
	Если ЗначениеЗаполнено(ДатаГрафика) И ТекДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("ДатаГрафика,Сотрудник",ДатаГрафика, ТекДанные.Сотрудник);
		
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Обработка.торо_РесурсноеПланирование.Форма.ФормаНазначенныеРаботыСотрудника",ПараметрыФормы, , УникальныйИдентификатор,,,,РежимОткрытия);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСостоянияЗУП(Команда)
	Если Объект.Сотрудники.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	ЗагрузитьСостоянияЗУПСервер();
	УстановитьВидимостьПредупреждения();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСостоянияЗУПДляВыбранного(Команда)
	Если Объект.Сотрудники.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	ТекДанные = Элементы.ТаблицаРабочегоВремени.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ЗагрузитьСостоянияЗУПСервер(ТекДанные.Сотрудник);
		УстановитьВидимостьПредупреждения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГрафикРаботыСотрудника(Команда)
	
	Сотрудники = Новый Массив;
	
	Для Каждого Строка Из Объект.Сотрудники Цикл
		Если Сотрудники.Найти(Строка.Сотрудник) = Неопределено Тогда
			Сотрудники.Добавить(Строка.Сотрудник);
		КонецЕсли;	
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Год", НачалоГода(Объект.ПериодПланирования.ДатаНачала));
	ПараметрыПечати.Вставить("Сотрудники", Сотрудники);
	
	ОткрытьФорму("Отчет.торо_ГрафикРаботыСотрудника.Форма.ФормаНастроекПечатнойФормы", ПараметрыПечати);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ТекДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекДанные.Сотрудник);
	КонецЕсли;
	
	стрОтбор = Новый Структура;
	стрОтбор.Вставить("ТекущаяОрганизация",Объект.Организация);
	стрОтбор.Вставить("ТекущееПодразделение",Объект.Подразделение);
	ПараметрыФормы.Вставить("Отбор", стрОтбор);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаСписка", ПараметрыФормы, Элемент, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
	
		ТекДанные = Элемент.ТекущиеДанные;
		
		стрДанныеСотрудника = КадровыеДанныеСотрудника(ТекДанные.Сотрудник,Объект.Организация, Объект.Подразделение, Объект.ПериодПланирования.ДатаОкончания);
		ЗаполнитьЗначенияСвойств(ТекДанные, стрДанныеСотрудника);
		
		Если ТекДанные.Уволен Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Выбранный сотрудник уволен",,,,Отказ);
		КонецЕсли;
		
		стрОтбор = Новый Структура("Сотрудник",ТекДанные.Сотрудник);
		Если Объект.Сотрудники.НайтиСтроки(стрОтбор).Количество() > 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Выбранный сотрудник уже добавлен в список",,,,Отказ);
		КонецЕсли;
		
		Если Не Отказ И НоваяСтрока Тогда
		
			сОтбор = Новый Структура("Сотрудник", ТекДанные.Сотрудник);
			Если ТаблицаРабочегоВремени.НайтиСтроки(сОтбор).Количество() = 0 Тогда
				НС = ТаблицаРабочегоВремени.Добавить();
				ЗаполнитьЗначенияСвойств(НС, сОтбор);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	мСотрудники = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Сотрудники.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
	
		ДанныеСтроки = Элементы.Сотрудники.ДанныеСтроки(ВыделеннаяСтрока);
		стрОтбор = Новый Структура("Сотрудник,Модифицированность", ДанныеСтроки.Сотрудник, Истина);
		Если Объект.РасписаниеРаботыСотрудников.НайтиСтроки(стрОтбор).Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон("Для сотрудника %1 есть несохраненные изменения плановой доступности", ДанныеСтроки.Сотрудник);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			мСотрудники.Добавить(ДанныеСтроки.Сотрудник);
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не Отказ Тогда
		
		Для каждого Сотрудник Из мСотрудники Цикл
			
			сОтбор = Новый Структура("Сотрудник", Сотрудник);
			мУдалитьСтроки = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(сОтбор);
			Для каждого Строка Из мУдалитьСтроки Цикл
				Объект.РасписаниеРаботыСотрудников.Удалить(Строка);
			КонецЦикла;
			
			мУдалитьСтроки = ТаблицаРабочегоВремени.НайтиСтроки(сОтбор);
			Для каждого Строка Из мУдалитьСтроки Цикл
				ТаблицаРабочегоВремени.Удалить(Строка);
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущаяДата = Объект.ПериодПланирования.ДатаНачала;
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ТекущаяДата, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Объект.Подразделение);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущаяДата = Объект.ПериодПланирования.ДатаНачала;
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ТекущаяДата, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Объект.Подразделение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокСотрудников(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, "Сначала необходимо применить несохраненные изменения");
	Иначе
		ЗаполнитьСписокСотрудниковНаСервере();
		СформироватьТаблицуПлановойДоступности();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицыРабочегоВремени

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если Модифицированность Тогда
		ПрименитьИзмененияНаСервере();
	КонецЕсли;
	УстановитьВидимостьПредупреждения();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЯчейкуРасписания(Команда)
	
	ИмяКолонки = Элементы.ТаблицаРабочегоВремени.ТекущийЭлемент.Имя;
	ИмяСвойства   = СтрЗаменить(ИмяКолонки,"ТаблицаРабочегоВремени","");
	ИмяСвойстваУО = СтрЗаменить(ИмяКолонки,"ТаблицаРабочегоВремени","УО_");
	
	ТекДанные = Элементы.ТаблицаРабочегоВремени.ТекущиеДанные;
	
	ДатаГрафика = ПолучитьЗначениеИзДобавленныхКолонок(Новый Структура("ИмяКолонки",ИмяСвойства),"Дата");
	Если ЗначениеЗаполнено(ДатаГрафика) И ТекДанные <> Неопределено Тогда
	
		ДопПараметры = Новый Структура("ИмяСвойства,ИмяСвойстваУО",ИмяСвойства,ИмяСвойстваУО);
		
		ПараметрыФормы = Новый Структура("Сотрудник,ДатаГрафика",ТекДанные.Сотрудник,ДатаГрафика);
		мСтрокиРасписания = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(ПараметрыФормы);
		РасписаниеРабот = Новый Массив;
		Для каждого Элемент Из мСтрокиРасписания Цикл
			НС = Новый Структура("ВремяНачала,ВремяОкончания,ВремяРаботы,СостояниеСотрудника");
			ЗаполнитьЗначенияСвойств(НС, Элемент);
			РасписаниеРабот.Добавить(НС);
		КонецЦикла; 
		
		ПараметрыФормы.Вставить("РасписаниеРабот", РасписаниеРабот);
		
		ОписаниеЗавершения = Новый ОписаниеОповещения("ТаблицаРабочегоВремениПолеДатыОкончаниеВыбора", ЭтаФорма, ДопПараметры);
		ОткрытьФорму("Обработка.торо_УправлениеПлановойДоступностьюПерсонала.Форма.ФормаНастройкиРасписанияРаботы",ПараметрыФормы, , УникальныйИдентификатор,,,ОписаниеЗавершения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРабочегоВремениПолеДатыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатЗаполнения  = РезультатЗаполненияПоТексту(Текст);
	
	Если РезультатЗаполнения <> Неопределено Тогда
		
		ТекДанные = Элементы.ТаблицаРабочегоВремени.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
		
			ИмяСвойства   = СтрЗаменить(Элемент.Имя,"ТаблицаРабочегоВремени","");
			ИмяСвойстваУО = СтрЗаменить(Элемент.Имя,"ТаблицаРабочегоВремени","УО_");
			
			ТекДанные[ИмяСвойства]   = РезультатЗаполнения.Представление;
			ТекДанные[ИмяСвойстваУО] = РезультатЗаполнения.ФлагУО;
			
			ДатаГрафика = ПолучитьЗначениеИзДобавленныхКолонок(Новый Структура("ИмяКолонки",ИмяСвойства),"Дата");
			ПараметрыОтбора = Новый Структура("Сотрудник, ДатаГрафика", ТекДанные.Сотрудник, ДатаГрафика);
			СтрокиТЧ = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиТЧ.Количество() > 0 Тогда
				НС = СтрокиТЧ[0];
				
				Для Сч = 1 По СтрокиТЧ.ВГраница() Цикл
					Объект.РасписаниеРаботыСотрудников.Удалить(СтрокиТЧ[Сч]);
				КонецЦикла;
				
			Иначе
				НС = Объект.РасписаниеРаботыСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ПараметрыОтбора);
			КонецЕсли;
			
			НС.СостояниеСотрудника = РезультатЗаполнения.СостояниеСотрудника;
			НС.ВремяРаботы         = РезультатЗаполнения.ВремяРаботы*3600;
			НС.ВремяОкончания      = НС.ВремяНачала + НС.ВремяРаботы;
			НС.Модифицированность  = Истина;
						
			ОбновитьИтоговоюДоступность(ТекДанные);
			
			ЭтаФорма.Модифицированность = Истина;
			
			УстановитьВидимостьПредупреждения();
			
		КонецЕсли;
	
	Иначе
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Введено некорректное значение";
		Сообщение.Сообщить();
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРабочегоВремениПолеДатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяСвойства   = СтрЗаменить(Элемент.Имя,"ТаблицаРабочегоВремени","");
	ИмяСвойстваУО = СтрЗаменить(Элемент.Имя,"ТаблицаРабочегоВремени","УО_");
	ДопПараметры = Новый Структура("ИмяСвойства,ИмяСвойстваУО",ИмяСвойства,ИмяСвойстваУО);
	
	ДатаГрафика = ПолучитьЗначениеИзДобавленныхКолонок(Новый Структура("ИмяКолонки",ИмяСвойства),"Дата");
	
	ТекДанные = Элементы.ТаблицаРабочегоВремени.ТекущиеДанные;
	Сотрудник = ТекДанные.Сотрудник;
	
	ПараметрыФормы = Новый Структура("Сотрудник,ДатаГрафика",Сотрудник,ДатаГрафика);
	мСтрокиРасписания = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(ПараметрыФормы);
	РасписаниеРабот = Новый Массив;
	Для каждого Элемент Из мСтрокиРасписания Цикл
		НС = Новый Структура("ВремяНачала,ВремяОкончания,ВремяРаботы,СостояниеСотрудника");
		ЗаполнитьЗначенияСвойств(НС, Элемент);
		РасписаниеРабот.Добавить(НС);
	КонецЦикла; 
	
	ПараметрыФормы.Вставить("РасписаниеРабот", РасписаниеРабот);
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ТаблицаРабочегоВремениПолеДатыОкончаниеВыбора", ЭтаФорма, ДопПараметры);
	ОткрытьФорму("Обработка.торо_УправлениеПлановойДоступностьюПерсонала.Форма.ФормаНастройкиРасписанияРаботы",ПараметрыФормы, , УникальныйИдентификатор,,,ОписаниеЗавершения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРабочегоВремениПолеДатыОкончаниеВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		ТекДаные = Элементы.ТаблицаРабочегоВремени.ТекущиеДанные;
		
		ДатаГрафика     = РезультатЗакрытия.ДатаГрафика;
		ДатаКопирования = Макс(РезультатЗакрытия.ДатаГрафика, РезультатЗакрытия.ПериодКопирования);
		ДатаКопирования = Мин(ДатаКопирования, Объект.ПериодПланирования.ДатаОкончания);
		
		Пока ДатаГрафика <= ДатаКопирования Цикл
			
			ИменаКолонок = Новый Структура("ИмяКолонки,ИмяКолонкиУО");
			Если ПолучитьЗначенияИзДобавленныхКолонок(Новый Структура("Дата",ДатаГрафика), ИменаКолонок) Тогда
			
				ТекДаные[ИменаКолонок.ИмяКолонки]   = РезультатЗакрытия.Представление;
				ТекДаные[ИменаКолонок.ИмяКолонкиУО] = РезультатЗакрытия.ЗначениеУО;
				
				сОтбор = Новый Структура("Сотрудник,ДатаГрафика",РезультатЗакрытия.Сотрудник, ДатаГрафика);
				
				мУдалитьСтроки = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(сОтбор);
				Для каждого Строка Из мУдалитьСтроки Цикл
					Объект.РасписаниеРаботыСотрудников.Удалить(Строка);
				КонецЦикла;
				
				Для каждого Строка Из РезультатЗакрытия.РасписаниеРабот Цикл
					НС = Объект.РасписаниеРаботыСотрудников.Добавить();
					НС.Модифицированность = Истина;
					ЗаполнитьЗначенияСвойств(НС, сОтбор);
					ЗаполнитьЗначенияСвойств(НС, Строка);
				КонецЦикла;
				
				Модифицированность = Истина;
				
			КонецЕсли;
			
			//-------------------------------------------
			ДатаГрафика = НачалоДня(ДатаГрафика + 86400);
		
		КонецЦикла;
		
		ОбновитьИтоговоюДоступность(ТекДаные);
		
	КонецЕсли;

	УстановитьВидимостьПредупреждения();
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ТаблицаРабочегоВремениПриАктивизацииПоля(Элемент)
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	ИмяСвойства   = СтрЗаменить(ИмяКолонки,"ТаблицаРабочегоВремени","");
		
	ДатаГрафика = ПолучитьЗначениеИзДобавленныхКолонок(Новый Структура("ИмяКолонки",ИмяСвойства),"Дата");
	
	Элементы.ТаблицаРабочегоВремениНазначенныеРаботыСотрудника.Доступность = ЗначениеЗаполнено(ДатаГрафика); 

КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатЗаполненияПоТексту(Знач ТекстЯчейки)

	Результат = Неопределено;
	
	фРабВремя = Истина;
	лСостояниеЯвка = ПредопределенноеЗначение("Справочник.торо_СостоянияСотрудника.Явка");
	
	ТекстЯчейки = СокрЛП(ТекстЯчейки);
	ТекстЯчейки = ВРег(ТекстЯчейки);
	
	СпецСимволы = "0123456789,.";
	
	Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
		
		Подстрока = "";
		Для Сч = 1 По СтрДлина(ТекстЯчейки) Цикл
		
			Симв = Сред(ТекстЯчейки,Сч,1);
			
			Если СтрНайти(СпецСимволы,Симв) > 0 Тогда
				Прервать;
			КонецЕсли; 
			
			Подстрока = Подстрока + Симв;
			
		КонецЦикла; 
		
		лСостояниеСотрудника = Справочники.торо_СостоянияСотрудника.НайтиПоРеквизиту("Сокращение",Подстрока);
		лРабочееВремя = 0;
		
		Если ЗначениеЗаполнено(лСостояниеСотрудника) Тогда
			Подстрока = Сред(ТекстЯчейки,СтрДлина(Подстрока)+1);
		Иначе
			Подстрока = ТекстЯчейки;
		КонецЕсли;
			
		Если СтрДлина(Подстрока) = 0 Тогда
			лРабочееВремя = 0;
		Иначе
			Подстрока = СтрЗаменить(Подстрока,Символы.НПП, "");
			Подстрока = СтрЗаменить(Подстрока," ", "");
			Подстрока = СтрЗаменить(Подстрока,",", ".");
			
			Попытка
				лРабочееВремя = Число(Подстрока);
				лСостояниеСотрудника = лСостояниеЯвка;
			Исключение
				лРабочееВремя = 0;
				фРабВремя = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(лСостояниеСотрудника) И фРабВремя Тогда
			
			Если лСостояниеСотрудника = лСостояниеЯвка Тогда
				лФлагУО = Ложь;
				лПредставление = Формат(лРабочееВремя, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=");
			Иначе
				лФлагУО = Истина;
				лПредставление = лСостояниеСотрудника.Сокращение;
			КонецЕсли;
			
			Результат = Новый Структура("СостояниеСотрудника,ВремяРаботы,Представление, ФлагУО",лСостояниеСотрудника, лРабочееВремя, лПредставление, лФлагУО);
		
		КонецЕсли;
		
		Если лРабочееВремя < 0 ИЛИ лРабочееВремя > 24 Тогда
			Результат = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // РезультатЗаполненияПоТексту()
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПараметрыОтбораДинамическихСписков()

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДокументыПлановойДоступности, "Организация", Объект.Организация, ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДокументыПлановойДоступности, "Организация", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДокументыПлановойДоступности, "Подразделение", Объект.Подразделение, ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДокументыПлановойДоступности, "Подразделение", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;

	Элементы.ДокументыПлановойДоступности.Период = Объект.ПериодПланирования;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПредупреждения()

	сОтбор = Новый Структура("Модифицированность", Истина);
	
	лВидимость = ЭтаФорма.Модифицированность ИЛИ Объект.РасписаниеРаботыСотрудников.НайтиСтроки(сОтбор).Количество()>0;
	
	Элементы.ГруппаПредупреждение.Видимость = лВидимость;

КонецПроцедуры // УстановитьВидимостьПредупреждения()
 
&НаКлиенте
Функция ПолучитьЗначениеИзДобавленныхКолонок(ПараметрыОтбора, ИмяКолонкиРезультата);

	мРезультат = ДобавленыеКолонки.НайтиСтроки(ПараметрыОтбора);
	Если мРезультат.Количество()>0 Тогда
	
		мРезультат = мРезультат[0];
		Возврат мРезультат[ИмяКолонкиРезультата];
	
	Иначе
	
		Возврат Неопределено;
	
	КонецЕсли; 

КонецФункции // ПолучитьЗначениеИзДобавленныхКолонок()

&НаКлиенте
Функция ПолучитьЗначенияИзДобавленныхКолонок(ПараметрыОтбора, стрРезультат)

	мРезультат = ДобавленыеКолонки.НайтиСтроки(ПараметрыОтбора);
	Если мРезультат.Количество()>0 Тогда
		ЗаполнитьЗначенияСвойств(стрРезультат, мРезультат[0]);
	КонецЕсли;
	
	Возврат мРезультат.Количество()

КонецФункции // ПолучитьЗначенияИзДобавленныхКолонок()

&НаСервере
Процедура ПрименитьПраметрыПоумолчанию()

	Объект.ПериодПланирования.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(Объект,Новый Структура("Организация, Подразделение"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КадровыеДанныеСотрудника(Сотрудник, Организация, Подразделение, ДатаОкончания)

	Результат = Новый Структура("Сотрудник,ФизическоеЛицо,Должность,ГрафикРаботы,Уволен",Сотрудник);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КадроваяИсторияСотрудниковСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	                      |	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК Уволен,
	                      |	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
	                      |	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	                      |ИЗ
	                      |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	                      |			&ДатаСреза,
	                      |			Сотрудник = &Сотрудник
	                      |				И Организация = &Организация
	                      |				И Подразделение = &Подразделение) КАК КадроваяИсторияСотрудниковСрезПоследних
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних КАК ГрафикРаботыСотрудниковСрезПоследних
	                      |		ПО КадроваяИсторияСотрудниковСрезПоследних.Сотрудник = ГрафикРаботыСотрудниковСрезПоследних.Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаОкончания);

	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат,Выборка);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // КадровыеДанныеСотрудника()

&НаСервере
Процедура ПрочитатьДанныеПлановойДоступности()

	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.Организация КАК Организация,
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.ДатаГрафика КАК ДатаГрафика,
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.НомерПериода КАК НомерПериода,
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.СостояниеСотрудника КАК СостояниеСотрудника,
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.ВремяНачала КАК ВремяНачала,
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.ВремяОкончания КАК ВремяОкончания,
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.ВремяРаботы КАК ВремяРаботы
	               |ПОМЕСТИТЬ ВТПлановаяДоступность
	               |ИЗ
	               |	РегистрСведений.торо_СостояниеРаботыСотрудников.СрезПоследних КАК торо_СостояниеРаботыСотрудниковСрезПоследних
	               |ГДЕ
	               |	торо_СостояниеРаботыСотрудниковСрезПоследних.Организация = &Организация
	               |	И торо_СостояниеРаботыСотрудниковСрезПоследних.Подразделение = &Подразделение
	               |	И торо_СостояниеРаботыСотрудниковСрезПоследних.ДатаГрафика >= &НачалоПериода
	               |	И торо_СостояниеРаботыСотрудниковСрезПоследних.ДатаГрафика <= &ОкончаниеПериода
	               |	И НЕ торо_СостояниеРаботыСотрудниковСрезПоследних.Отменен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
	               |	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	               |	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК Уволен
	               |ИЗ
	               |	ВТПлановаяДоступность КАК ВТПлановаяДоступность
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	               |		ПО ВТПлановаяДоступность.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	               |			И ВТПлановаяДоступность.Организация = КадроваяИсторияСотрудниковСрезПоследних.Организация
	               |			И ВТПлановаяДоступность.Подразделение = КадроваяИсторияСотрудниковСрезПоследних.Подразделение
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних КАК ГрафикРаботыСотрудниковСрезПоследних
	               |		ПО ВТПлановаяДоступность.Сотрудник = ГрафикРаботыСотрудниковСрезПоследних.Сотрудник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КадроваяИсторияСотрудниковСрезПоследних.Должность,
	               |	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы,
	               |	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение),
	               |	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.ПериодПланирования.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода",Объект.ПериодПланирования.ДатаОкончания);
	
	мРезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Объект.РасписаниеРаботыСотрудников.Загрузить(мРезультатЗапроса[0].Выгрузить());
	Объект.Сотрудники.Загрузить(мРезультатЗапроса[1].Выгрузить());
	
КонецПроцедуры // ПрочитатьСписокСотрудников()

&НаСервере
Процедура СформироватьТаблицуПлановойДоступности(СписокСотрудников = Неопределено);
	
	Если СписокСотрудников = Неопределено Тогда
	
		ДобавитьКолонкиНаПериод();
		
		ТаблицаРабочегоВремени.Очистить();
		СписокСотрудников = Объект.Сотрудники;
		
	КонецЕсли;
	
	тзРасписаниеРаботыСотрудников = Объект.РасписаниеРаботыСотрудников.Выгрузить(,"Сотрудник,ДатаГрафика,ВремяРаботы,СостояниеСотрудника");
	тзРасписаниеРаботыСотрудников.Свернуть("Сотрудник,ДатаГрафика,СостояниеСотрудника","ВремяРаботы");
	
	Для каждого СтрокаСотрудник Из СписокСотрудников Цикл
		
		сОтбор = Новый Структура("Сотрудник");
		Если ТипЗнч(СтрокаСотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
			сОтбор.Вставить("Сотрудник",СтрокаСотрудник);
		Иначе
			ЗаполнитьЗначенияСвойств(сОтбор, СтрокаСотрудник);
		КонецЕсли; 
		
		мРабочееВремяСотрудника = тзРасписаниеРаботыСотрудников.НайтиСтроки(сОтбор);
		
		НС = ТаблицаРабочегоВремени.НайтиСтроки(сОтбор);
		Если НС.Количество() = 0 Тогда
			НС = ТаблицаРабочегоВремени.Добавить();
			ЗаполнитьЗначенияСвойств(НС, сОтбор);
		Иначе
			НС = НС[0];
		КонецЕсли;
		
		лИтог = 0;
		
		Для каждого Строка Из мРабочееВремяСотрудника Цикл
			
			ПараметрыКолонок = ДобавленыеКолонки.НайтиСтроки(Новый Структура("Дата",Строка.ДатаГрафика));
			Если ПараметрыКолонок.Количество() > 0 Тогда
			
				ПараметрыКолонок = ПараметрыКолонок[0];
				
				ЗначениеПоляУО = (Строка.СостояниеСотрудника <> ПредопределенноеЗначение("Справочник.торо_СостоянияСотрудника.Явка"));
				
				Если НЕ ЗначениеПоляУО Тогда
					ЗначениеПоля = Формат(Строка.ВремяРаботы/3600, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=");
					лИтог = лИтог + Строка.ВремяРаботы;
				Иначе
					ЗначениеПоля = Строка.СостояниеСотрудника.Сокращение;
				КонецЕсли;
				
				ЗначенияПолей = Новый Структура;
				ЗначенияПолей.Вставить(ПараметрыКолонок.ИмяКолонки, ЗначениеПоля);
				ЗначенияПолей.Вставить(ПараметрыКолонок.ИмяКолонкиУО, ЗначениеПоляУО);
				
				ЗаполнитьЗначенияСвойств(НС, ЗначенияПолей);
				
				НС.Итог = лИтог / 3600;
			
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиНаПериод()

	УдалитьДобавленныеКолонки();
	
	Если Объект.ПериодПланирования.ДатаНачала > Объект.ПериодПланирования.ДатаОкончания Тогда
		возврат;
	КонецЕсли;
	
	лДатаПланирования = НачалоДня(Объект.ПериодПланирования.ДатаНачала);
	лДатаОкончания = КонецДня(Объект.ПериодПланирования.ДатаОкончания);
	
	сВидыДней = ПолучитьВидыДней(лДатаПланирования, лДатаОкончания);

	ДобавленыеКолонки.Очистить();
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ТипРеквизита = ПолучитьТипКолонкиДат();
	
	Счетчик = 0;
	Пока лДатаПланирования < лДатаОкончания Цикл
	
		ИмяКолонки		 = "Дата" + Формат(Счетчик, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
		ИмяКолонкиУО	 = "УО_" + ИмяКолонки;
		ЗаголовокКолонки = Формат(лДатаПланирования, "ДФ=dd.MM");
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, ТипРеквизита, "ТаблицаРабочегоВремени", ЗаголовокКолонки));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонкиУО, Новый ОписаниеТипов("Булево"), "ТаблицаРабочегоВремени"));
		
		НС = ДобавленыеКолонки.Добавить();
		НС.ИмяКолонки   = ИмяКолонки;
		НС.ИмяКолонкиУО = ИмяКолонкиУО;
		НС.Дата = лДатаПланирования;
		
		лДатаПланирования = (лДатаПланирования + 86400);
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Для каждого Строка Из ДобавленыеКолонки Цикл
		
		ИмяЭлемента = "ТаблицаРабочегоВремени" + Строка.ИмяКолонки;
		НовыйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Элементы.ТаблицаРабочегоВремени);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаРабочегоВремени."+ Строка.ИмяКолонки;
		НовыйЭлемент.Ширина = 5;
		НовыйЭлемент.РастягиватьПоГоризонтали= Ложь;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
		НовыйЭлемент.УстановитьДействие("ОкончаниеВводаТекста","ТаблицаРабочегоВремениПолеДатыОкончаниеВводаТекста");
		НовыйЭлемент.УстановитьДействие("НачалоВыбора","ТаблицаРабочегоВремениПолеДатыНачалоВыбора");
		
		ВидДня = сВидыДней[Строка.Дата];
		Если ВидДня <> Неопределено Тогда
		
			Если ВидДня = ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный") Тогда
				НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.КоролевскиГолубой;
			Иначе
				НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Кирпичный;
			КонецЕсли;
		
		КонецЕсли; 
		
		// Условное оформление
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ПоляЭлемента = ЭлементУО.Поля.Элементы.Добавить();
		ПоляЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		
		ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРабочегоВремени."+ Строка.ИмяКолонкиУО);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьДобавленныеКолонки()

	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивПолейУсловногоОформления = Новый Массив;
	
	Для каждого Строка Из ДобавленыеКолонки Цикл
	
		ПутьКРеквизиту = "ТаблицаРабочегоВремени." + Строка.ИмяКолонки;
		МассивУдаляемыхРеквизитов.Добавить(ПутьКРеквизиту);
		
		ПутьКРеквизиту = "ТаблицаРабочегоВремени." + Строка.ИмяКолонкиУО;
		МассивУдаляемыхРеквизитов.Добавить(ПутьКРеквизиту);
		
		ИмяЭлемента = "ТаблицаРабочегоВремени" + Строка.ИмяКолонки;
		ЭлементКолонка = Элементы.Найти(ИмяЭлемента);
		Если ЭлементКолонка <> Неопределено Тогда
			Элементы.Удалить(ЭлементКолонка);
		КонецЕсли;
		
		МассивПолейУсловногоОформления.Добавить(Новый ПолеКомпоновкиДанных(ИмяЭлемента));
	
	КонецЦикла;
	
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);

	ДобавленыеКолонки.Очистить();
	
	// Условное оформление
	Счетчик =  УсловноеОформление.Элементы.Количество() - 1;
	Пока Счетчик >= 0 Цикл
	
		ЭлементОУ = УсловноеОформление.Элементы.Получить(Счетчик);
		
		НадоУдалить = Ложь;
		Для каждого ПолеЭлементаУО Из ЭлементОУ.Поля.Элементы Цикл
		
			Если МассивПолейУсловногоОформления.Найти(ПолеЭлементаУО.Поле) <> Неопределено Тогда
				НадоУдалить = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НадоУдалить Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементОУ);
		КонецЕсли;
		
		Счетчик = Счетчик - 1;
	
	КонецЦикла; 

КонецПроцедуры // УдалитьДобавленныеКолонки()

&НаСервереБезКонтекста
Функция ПолучитьВидыДней(ДатаНачала, ДатаОкончания)

	Результат = Новый Соответствие;

	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	               |	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
	               |ИЗ
	               |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	               |ГДЕ
	               |	ДанныеПроизводственногоКалендаря.Дата >= &ДатаНачала
	               |	И ДанныеПроизводственногоКалендаря.Дата <= &ДатаОкончания
	               |	И НЕ ДанныеПроизводственногоКалендаря.ВидДня В (&ВидыДней)";
	# КонецОбласти
	
	мВидыДней = Новый Массив;
	мВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ВидыДней", мВидыДней);
	Запрос.УстановитьПараметр("ДатаНачала" , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Дата, Выборка.ВидДня);
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьМассивВыходныхДней()

&НаСервереБезКонтекста
Функция ПолучитьТипКолонкиДат()

	мТипы = Новый Массив;
	мТипы.Добавить(Тип("Строка"));
	ТипРеквизита = Новый ОписаниеТипов(мТипы, Новый КвалификаторыЧисла(5,2,ДопустимыйЗнак.Неотрицательный),Новый КвалификаторыСтроки(5));

	Возврат ТипРеквизита;

КонецФункции // ПолучитьТипКолонкиДат()

&НаСервере
Процедура ПрименитьИзмененияНаСервере()

	мИзмененныеСтроки = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	Если мИзмененныеСтроки.Количество() > 0 Тогда
		
		сДолжности = ДолжностиСотрудников();
		
		НовДок = Документы.торо_ПлановаяДоступностьПерсонала.СоздатьДокумент();
		НовДок.Дата = ТекущаяДата();
		
		торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(НовДок);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			НовДок.Организация = Объект.Организация;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			НовДок.Подразделение = Объект.Подразделение;
		КонецЕсли;
		
		НовДок.НачалоПланирования    = Объект.ПериодПланирования.ДатаНачала;
		НовДок.ОкончаниеПланирования = Объект.ПериодПланирования.ДатаОкончания;
		
		Для каждого Строка Из мИзмененныеСтроки Цикл
		
			НС = НовДок.РабочееВремяСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Строка);
			
			НС.Должность = сДолжности[НС.Сотрудник];
		
		КонецЦикла;
		
		Если НовДок.РабочееВремяСотрудников.Количество() Тогда
		
			Попытка
			
				НовДок.Записать(РежимЗаписиДокумента.Проведение);
				
				Для каждого Строка Из мИзмененныеСтроки Цикл
					Строка.Модифицированность = Ложь;
				КонецЦикла;
				
				Модифицированность = Ложь;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создан документ "+НовДок.Ссылка, НовДок.Ссылка);
			
			Исключение
				
			КонецПопытки;
		
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ПрименитьИзмененияНаСервере()

&НаСервере
Функция ДолжностиСотрудников()

	Результат = Новый Соответствие;
	
	Для каждого Строка Из Объект.Сотрудники Цикл
		Результат.Вставить(Строка.Сотрудник, Строка.Должность);
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ДолжностиСотрудников()

&НаСервере
Процедура ЗаполнитьДляВсехСотрудниковНаСервере(Сотрудник = Неопределено)
	
	сОтбор = Новый Структура("Уволен", Ложь);
	Если Сотрудник <> Неопределено Тогда
		сОтбор.Вставить("Сотрудник", Сотрудник);
	КонецЕсли; 
	
	лГрафики = Объект.Сотрудники.Выгрузить(сОтбор,"ГрафикРаботы");
	лГрафики.Свернуть("ГрафикРаботы");
	лГрафики = лГрафики.ВыгрузитьКолонку(0);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу расписаний.
	ГрафикиРаботы.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, лГрафики, Объект.ПериодПланирования.ДатаНачала, Объект.ПериодПланирования.ДатаОкончания);

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендарныеГрафики.Календарь КАК Календарь,
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|	НЕ КалендарныеГрафики.ДеньВключенВГрафик КАК ВыходнойДень,
	|	ВЫБОР
	|		КОГДА ВТРасписанияРаботы.ВремяНачала ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ВТРасписанияРаботы.ВремяНачала
	|	КОНЕЦ КАК ВремяНачала,
	|	ВЫБОР
	|		КОГДА ВТРасписанияРаботы.ВремяОкончания ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ВТРасписанияРаботы.ВремяОкончания
	|	КОНЕЦ КАК ВремяОкончания
	|ПОМЕСТИТЬ ВТВремяРаботы
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ПО КалендарныеГрафики.Календарь = ВТРасписанияРаботы.ГрафикРаботы
	|			И КалендарныеГрафики.ДатаГрафика = ВТРасписанияРаботы.ДатаГрафика
	|ГДЕ
	|	КалендарныеГрафики.Календарь В(&Графики)
	|	И КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
	|	И КалендарныеГрафики.ДатаГрафика < КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСотрудников.Сотрудник КАК Сотрудник,
	|	СписокСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	СписокСотрудников.Должность КАК Должность
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	&СписокСотрудников КАК СписокСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСписокСотрудников.Сотрудник КАК Сотрудник,
	|	ВТВремяРаботы.ДатаГрафика КАК ДатаГрафика,
	|	ВТВремяРаботы.ВыходнойДень КАК ВыходнойДень,
	|	СУММА(РАЗНОСТЬДАТ(ВТВремяРаботы.ВремяНачала, ВТВремяРаботы.ВремяОкончания, СЕКУНДА)) КАК ВремяРаботы,
	|	ВТВремяРаботы.ВремяНачала КАК ВремяНачала,
	|	ВТВремяРаботы.ВремяОкончания КАК ВремяОкончания
	|ИЗ
	|	ВТВремяРаботы КАК ВТВремяРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокСотрудников КАК ВТСписокСотрудников
	|		ПО (ВТСписокСотрудников.ГрафикРаботы = ВТВремяРаботы.Календарь)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСписокСотрудников.Сотрудник,
	|	ВТВремяРаботы.ВыходнойДень,
	|	ВТВремяРаботы.ДатаГрафика,
	|	ВТВремяРаботы.ВремяНачала,
	|	ВТВремяРаботы.ВремяОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаГрафика";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("Графики", лГрафики);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодПланирования.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ПериодПланирования.ДатаОкончания);
	Запрос.УстановитьПараметр("СписокСотрудников",Объект.Сотрудники.Выгрузить(сОтбор,"Сотрудник,Должность,ГрафикРаботы"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Сотрудник = Неопределено Тогда
			Объект.РасписаниеРаботыСотрудников.Очистить();
		Иначе
			мУдалить = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(Новый Структура("Сотрудник",Сотрудник));
			Для каждого Строка Из мУдалить Цикл
				Объект.РасписаниеРаботыСотрудников.Удалить(Строка);
			КонецЦикла; 
		КонецЕсли; 
		
		
		Пока Выборка.Следующий() Цикл
		
			НС = Объект.РасписаниеРаботыСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			
			Если Выборка.ВремяРаботы > 0 Тогда
				НС.СостояниеСотрудника = ПредопределенноеЗначение("Справочник.торо_СостоянияСотрудника.Явка");
			ИначеЕсли Выборка.ВыходнойДень Тогда
				НС.СостояниеСотрудника = ПредопределенноеЗначение("Справочник.торо_СостоянияСотрудника.Выходной");
			Иначе
				НС.СостояниеСотрудника = ПредопределенноеЗначение("Справочник.торо_СостоянияСотрудника.Прогул");
			КонецЕсли;
			
			НС.Модифицированность = Истина;
		
		КонецЦикла;
		
		Модифицированность = Истина;
		
		СформироватьТаблицуПлановойДоступности();
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговоюДоступность(Сотрудник = Неопределено)

	Если Сотрудник <> Неопределено Тогда
		Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
			мСтроки = ТаблицаРабочегоВремени.НайтиСтроки(Новый Структура("Сотрудник",Сотрудник));
		ИначеЕсли ТипЗнч(Сотрудник) = Тип("Массив") Тогда
			мСтроки = Сотрудник;
		Иначе
			мСтроки = Новый Массив;
			мСтроки.Добавить(Сотрудник);
		КонецЕсли;
	Иначе
		мСтроки = ТаблицаРабочегоВремени;
	КонецЕсли;
	
	Для каждого Строка Из мСтроки Цикл
	
		лИтог = 0;
		
		стрОтбор = Новый Структура("Сотрудник",Строка.Сотрудник);
		мРабВремя = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(стрОтбор);
		Для каждого СтрокаРВ Из мРабВремя Цикл
		
			лИтог = лИтог + СтрокаРВ.ВремяРаботы;
		
		КонецЦикла; 
		
		Строка.Итог = лИтог / 3600;
	
	КонецЦикла; 

КонецПроцедуры // ()

&НаКлиенте
Процедура СохранениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Сохранение(Ответ);

КонецПроцедуры

&НаКлиенте
Процедура Сохранение(Знач Ответ)
    
	Если Ответ = КодВозвратаДиалога.Да Тогда
        ПрименитьИзменения(Ответ);
	Иначе
		Модифицированность = Ложь;
		Закрыть();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСотрудниковНаСервере()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	               |	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	               |	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК Должность
	               |ИЗ
	               |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних КАК ГрафикРаботыСотрудниковСрезПоследних
	               |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = ГрафикРаботыСотрудниковСрезПоследних.Сотрудник
	               |ГДЕ
	               |	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	               |	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = &Подразделение
	               |	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > &ДатаСреза)
	               |	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема < &ДатаНачала
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ДатаСреза", Объект.ПериодПланирования.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодПланирования.ДатаНачала);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Объект.Сотрудники.Загрузить(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСостоянияЗУПСервер(Сотрудник = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(СостоянияСотрудников.Период, ДЕНЬ) КАК ДатаНачала,
	               |	НАЧАЛОПЕРИОДА(СостоянияСотрудников.ДействуетДо, ДЕНЬ) КАК ДатаОкончания,
	               |	СостоянияСотрудников.Сотрудник КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА СостоянияСотрудников.СостояниеСотрудника = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Командировка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.Командировка)
	               |		КОГДА СостоянияСотрудников.СостояниеСотрудника = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Простой)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.Простой)
	               |		КОГДА СостоянияСотрудников.СостояниеСотрудника = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Отпуск)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.Отпуск)
	               |		КОГДА СостоянияСотрудников.СостояниеСотрудника = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Отсутствие)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.Отсутствие)
	               |		КОГДА СостоянияСотрудников.СостояниеСотрудника = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Прогул)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.Прогул)
	               |		КОГДА СостоянияСотрудников.СостояниеСотрудника = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Болезнь)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.Больничный)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_СостоянияСотрудника.ПустаяСсылка)
	               |	КОНЕЦ КАК СостояниеСотрудника
	               |ИЗ
	               |	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
	               |ГДЕ
	               |	СостоянияСотрудников.СостояниеСотрудника <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
	               |	И СостоянияСотрудников.СостояниеСотрудника <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение)
	               |	И СостоянияСотрудников.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	               |	И СостоянияСотрудников.Сотрудник В(&СписокСотрудников)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ДатаНачала";
	СписокСотрудников = Новый Массив;
	Если Сотрудник = Неопределено Тогда
		СписокСотрудников = Объект.Сотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		СписокСотрудников.Добавить(Сотрудник);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.ПериодПланирования.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Объект.ПериодПланирования.ДатаОкончания);
	РезЗапроса = Запрос.Выполнить();
		
	Если РезЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'На указанный период по выбранным сотрудникам данные из ЗУП не загружены.'"));
		Возврат;
	Иначе
		ИскатьВРасписании = Объект.РасписаниеРаботыСотрудников.Количество() > 0;
		Выборка = РезЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДатаГрафика = Выборка.ДатаНачала;
			Пока ДатаГрафика <= Выборка.ДатаОкончания И ДатаГрафика <= Объект.ПериодПланирования.ДатаОкончания Цикл
				СтрокиРасписания = Новый Массив;
				Если ИскатьВРасписании Тогда
					СтрокиРасписания = Объект.РасписаниеРаботыСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ДатаГрафика", Выборка.Сотрудник, ДатаГрафика));
				КонецЕсли;
				Если СтрокиРасписания.Количество() Тогда
					СтрокиРасписания[0].СостояниеСотрудника = Выборка.СостояниеСотрудника;
					СтрокиРасписания[0].Модифицированность = Истина;
					СтрокиРасписания[0].ВремяНачала = Дата(1, 1, 1);
					СтрокиРасписания[0].ВремяОкончания = Дата(1, 1, 1);
				Иначе
					НС = Объект.РасписаниеРаботыСотрудников.Добавить();
					НС.Сотрудник = Выборка.Сотрудник;
					НС.ДатаГрафика = ДатаГрафика;
					НС.СостояниеСотрудника = Выборка.СостояниеСотрудника;
					НС.ВремяРаботы = 0;
					НС.Модифицированность = Истина;
				КонецЕсли;
				ДатаГрафика = КонецДня(ДатаГрафика) + 1; 
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	СформироватьТаблицуПлановойДоступности();
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти
