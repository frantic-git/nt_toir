#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Сотрудник", Сотрудник);
	Параметры.Свойство("СостояниеСотрудника", СостояниеСотрудника);
	Параметры.Свойство("ДатаГрафика", ДатаГрафика);
	
	Параметры.Свойство("ГрафикРаботы", ГрафикРаботы);
	
	Если ЗначениеЗаполнено(Сотрудник) И НЕ ЗначениеЗаполнено(ГрафикРаботы) Тогда
		 ЗаполнитьГрафикРаботысотрудника(Сотрудник, ДатаГрафика, ГрафикРаботы);
	КонецЕсли;
	
	фВидДня = ВидДняПроизводственногоКалендаря(ДатаГрафика, ГрафикРаботы);
	ПлановоеВремяРаботы = РабочееВремяПоГрафику(ДатаГрафика, ГрафикРаботы);
	
	Если Параметры.Свойство("РасписаниеРабот") Тогда
		ЗаполнитьРасписаниеРабот(Параметры.РасписаниеРабот);
	КонецЕсли;
	
	фСостояниеСотрудникаЯвка = ПредопределенноеЗначение("Справочник.торо_СостоянияСотрудника.Явка");
	
	Элементы.РасписаниеРабот.Видимость = СостояниеСотрудника = фСостояниеСотрудникаЯвка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьВремяРаботы();
	УправлениеВидимостьюЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасписаниеРабот

&НаКлиенте
Процедура РасписаниеРаботВремяРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.РасписаниеРабот.ТекущиеДанные;
	
	ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбораПродолжительности.ПродолжительностьВСекундах = ТекДанные.ВремяРаботы * 3600;
	ФормаПодбораПродолжительности.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботВремяРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.РасписаниеРабот.ТекущиеДанные;
	ТекДанные.ВремяРаботы = Окр(ВыбранноеЗначение / 3600, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
	Если Не ОтменаРедактирования Тогда
		
		фПересчетПоВремени = (Элементы.РасписаниеРабот.ТекущийЭлемент.Имя = "РасписаниеРаботВремяРаботы");
		
		ТекДанные = Элементы.РасписаниеРабот.ТекущиеДанные;
		ОбновитьСтрокуРасписания(ТекДанные, фПересчетПоВремени, Отказ);
		
	КонецЕсли;
	
	ОбновитьВремяРаботы();
	УправлениеВидимостьюЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура РасписаниеРаботПриИзменении(Элемент)
	
	ОбновитьВремяРаботы();
	УправлениеВидимостьюЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоГрафику(Команда)
	ЗаполнитьПоГрафикуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГрафикуНаСервере()
	
	РасписаниеРабот.Очистить();
	ВремяРаботы = 0;
	
	тзРасписанияРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(ГрафикРаботы, НачалоДня(ДатаГрафика),КонецДня(ДатаГрафика));
	Для каждого Строка Из тзРасписанияРаботы Цикл
		
		НС = РасписаниеРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Строка);
		НС.ВремяРаботы = (Строка.ВремяОкончания - Строка.ВремяНачала) / 3600;
		
		ВремяРаботы = ВремяРаботы + НС.ВремяРаботы;
	
	КонецЦикла;
	
	УстановитьВидимостьДекорацииВремяРаботы();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеВидимостьюЭлементов()

	Если фВидДня = 2 Тогда
		Элементы.ДекорацияВыходнойДень.Видимость	 = Истина;
		Элементы.ДекорацияСокращенныйДень.Видимость	 = Ложь;
	ИначеЕсли фВидДня = 1 Тогда
		Элементы.ДекорацияВыходнойДень.Видимость	 = Ложь;
		Элементы.ДекорацияСокращенныйДень.Видимость	 = Истина;
	Иначе
		Элементы.ДекорацияВыходнойДень.Видимость	 = Ложь;
		Элементы.ДекорацияСокращенныйДень.Видимость	 = Ложь;
	КонецЕсли;
	
	Если ВремяРаботы - ПлановоеВремяРаботы > 0.15 Тогда
		Элементы.ДекорацияВремяРаботы.Видимость = Истина;
		Элементы.ДекорацияВремяРаботы.Подсказка = СтрШаблон("Установленное время работы превышает плановое (по графику %1 ч)", ПлановоеВремяРаботы);
	ИначеЕсли ВремяРаботы > 24 Тогда
		Элементы.ДекорацияВремяРаботы.Видимость = Истина;
		Элементы.ДекорацияВремяРаботы.Подсказка = "Установленное время работы превышает 24ч";
	Иначе
		Элементы.ДекорацияВремяРаботы.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.РасписаниеРабот.Видимость = СостояниеСотрудника = фСостояниеСотрудникаЯвка;

КонецПроцедуры // УправлениеВидимостьюЭлементов()

&НаСервере
Процедура ЗаполнитьРасписаниеРабот(ДанныеЗаполнения = Неопределено)

	РасписаниеРабот.Очистить();
	ВремяРаботы = 0;
	
	Если ДанныеЗаполнения <> Неопределено Тогда
	
		Для каждого Строка Из ДанныеЗаполнения Цикл
			
			Если НЕ ЗначениеЗаполнено(СостояниеСотрудника) Тогда
				СостояниеСотрудника = Строка.СостояниеСотрудника;
			КонецЕсли; 
		
			НС = РасписаниеРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Строка);
			
			НС.ВремяРаботы = (НС.ВремяОкончания - НС.ВремяНачала) / 3600;
			ВремяРаботы = ВремяРаботы + НС.ВремяРаботы;
		
		КонецЦикла;
	
	КонецЕсли;
	
	РасписаниеРабот.Сортировать("ВремяНачала");
	
	УстановитьВидимостьДекорацииВремяРаботы();
	
КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция ВидДняПроизводственногоКалендаря(ДатаКалендаря, ГрафикРаботы)

	Результат = 0; // Поумолчанию (рабочий)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
	                      |ИЗ
	                      |	Справочник.Календари КАК Календари
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	                      |		ПО Календари.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	                      |ГДЕ
	                      |	ДанныеПроизводственногоКалендаря.Дата = &Дата
	                      |	И Календари.Ссылка = &ГрафикРаботы");
	
	Запрос.УстановитьПараметр("Дата", ДатаКалендаря);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ВидДня = ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный") Тогда
			Результат = 1; // Предпраздничный
		ИначеЕсли Выборка.ВидДня <> ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий") Тогда
			Результат = 2; // Нерабочий
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция РабочееВремяПоГрафику(ДатаКалендаря, ГрафикРаботы)

	Результат = 0;
	
	тзРасписанияРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(ГрафикРаботы, НачалоДня(ДатаКалендаря),КонецДня(ДатаКалендаря));
	Для каждого СтрокаТЗ Из тзРасписанияРаботы Цикл
		Результат = Результат + (СтрокаТЗ.ВремяОкончания - СтрокаТЗ.ВремяНачала);
	КонецЦикла;
	
	Результат = Окр(Результат / 3600, 2);
	Возврат Результат;
	
КонецФункции // РабочееВремяПоГрафику()

&НаСервереБезКонтекста
Процедура ЗаполнитьГрафикРаботысотрудника(Знач лСотрудник, Знач ДатаСреза, лГрафикРаботы)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	                      |ИЗ
	                      |	РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних(&ДатаСреза, ) КАК ГрафикРаботыСотрудниковСрезПоследних
	                      |ГДЕ
	                      |	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Сотрудник", лСотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		лГрафикРаботы = Выборка.ГрафикРаботы;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьДекорацииВремяРаботы()

	Если ВремяРаботы - ПлановоеВремяРаботы > 0.15 Тогда
		Элементы.ДекорацияВремяРаботы.Видимость = Истина;
		Элементы.ДекорацияВремяРаботы.Подсказка = СтрШаблон("Установленное время работы превышает плановое (по графику %1 ч)", ПлановоеВремяРаботы);
	ИначеЕсли ВремяРаботы > 24 Тогда
		Элементы.ДекорацияВремяРаботы.Видимость = Истина;
		Элементы.ДекорацияВремяРаботы.Подсказка = "Установленное время работы превышает 24ч";
	Иначе
		Элементы.ДекорацияВремяРаботы.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьДекорацииВремяРаботы()

&НаКлиенте
Процедура ОбновитьВремяРаботы()

	ВремяРаботы = РасписаниеРабот.Итог("ВремяРаботы");

КонецПроцедуры // ОбновитьВремяРаботы()

&НаКлиенте
Процедура ОбновитьСтрокуРасписания(ТекДанныеСтроки, ПересчетПоВремени = Ложь, Отказ = Ложь)

	мТекстСообщения = "";
	
	Если ПересчетПоВремени Тогда
	
		ВремяОкончания = ТекДанныеСтроки.ВремяНачала + (ТекДанныеСтроки.ВремяРаботы * 3600)-1;
		КонецДня = КонецДня(ТекДанныеСтроки.ВремяНачала);
		
		Если ВремяОкончания > КонецДня Тогда
			Отказ = Истина;
			ТекстСообщения = "Время окончания выходит за границы текущего дня";
		Иначе
			ТекДанныеСтроки.ВремяОкончания = ВремяОкончания;
		КонецЕсли;
	
	Иначе
	
		Если ТекДанныеСтроки.ВремяНачала > ТекДанныеСтроки.ВремяОкончания Тогда
			Отказ = Истина;
			ТекстСообщения = "Время окончания меньше времени начала";
		Иначе
			ТекДанныеСтроки.ВремяРаботы = (ТекДанныеСтроки.ВремяОкончания - ТекДанныеСтроки.ВремяНачала) / 3600;
			ТекДанныеСтроки.ВремяРаботы = Окр(ТекДанныеСтроки.ВремяРаботы, 2);
		КонецЕсли; 
	
	КонецЕсли;
	
	Если ТекДанныеСтроки.ВремяРаботы > 24 Тогда
		Отказ = Истина;
		ТекстСообщения = "В строке время работы не может превышать 24ч";
	КонецЕсли; 

КонецПроцедуры // ОбновитьСтрокуРасписания()

&НаКлиенте
Процедура СостояниеСотрудникаПриИзменении(Элемент)
	
	УправлениеВидимостьюЭлементов();
	
	Если СостояниеСотрудника <> фСостояниеСотрудникаЯвка Тогда
	
		ВремяРаботы = 0;
		РасписаниеРабот.Очистить();
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если НЕ ЗначениеЗаполнено(СостояниеСотрудника) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнено состояние сотрудника",,,"СостояниеСотрудника");
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("Сотрудник",Сотрудник);
	РезультатЗакрытия.Вставить("ДатаГрафика",ДатаГрафика);
		
	мРасписаниеРаботы = Новый Массив;
	Если СостояниеСотрудника <> фСостояниеСотрудникаЯвка Тогда
		НС = Новый Структура("СостояниеСотрудника,ВремяРаботы,ВремяНачала,ВремяОкончания",СостояниеСотрудника,0);
		мРасписаниеРаботы.Добавить(НС);
		лПредставление = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СостояниеСотрудника,"Сокращение");
		ЗначениеУО = Истина;
	Иначе
		РасписаниеРабот.Сортировать("ВремяНачала");
		Для каждого Строка Из РасписаниеРабот Цикл
		
			НС = Новый Структура("СостояниеСотрудника,ВремяРаботы,ВремяНачала,ВремяОкончания",СостояниеСотрудника);
			ЗаполнитьЗначенияСвойств(НС, Строка);
			НС.ВремяРаботы = НС.ВремяРаботы * 3600;
			мРасписаниеРаботы.Добавить(НС);
		
		КонецЦикла;
		
		лПредставление = Формат(ВремяРаботы, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=");
		ЗначениеУО = Ложь;
		
	КонецЕсли;
	
	РезультатЗакрытия.Вставить("ЗначениеУО",ЗначениеУО);
	РезультатЗакрытия.Вставить("РасписаниеРабот",мРасписаниеРаботы);
	РезультатЗакрытия.Вставить("Представление",лПредставление);
	РезультатЗакрытия.Вставить("ПериодКопирования",ПериодКопирования);
		
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаПериод(Команда)
	
	лВыбраннаяДата = Макс(ДатаГрафика,ПериодКопирования);
	Оповещение = Новый ОписаниеОповещения("ОписаниеОповещенияОЗавершенииВыбораДаты", ЭтотОбъект);
	ПоказатьВводДаты(Оповещение, лВыбраннаяДата, НСтр("ru='Установить до даты'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияОЗавершенииВыбораДаты(Результат, Параметры) Экспорт 

	Если НЕ Результат = Неопределено Тогда
		
		ПериодКопирования = Результат;
		Если ЗначениеЗаполнено(ПериодКопирования) И ПериодКопирования <= ДатаГрафика Тогда
			ПериодКопирования = '00010101';
			ОбщегоНазначенияКлиент.СообщитьПользователю("Установленная дата должна быть больше даты графика");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПериодКопирования) Тогда
			Элементы.УстановитьНаПериод.Заголовок = "Установить до " + Формат(ПериодКопирования,"ДЛФ=D");
		Иначе
			Элементы.УстановитьНаПериод.Заголовок = "Установить до даты";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

