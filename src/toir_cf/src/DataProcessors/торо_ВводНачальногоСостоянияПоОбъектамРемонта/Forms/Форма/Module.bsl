
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ФОИспользоватьДокументыЖЦ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	Элементы.ОбъектыБезСостоянийСтатусВУчете.Видимость = ФОИспользоватьДокументыЖЦ;
	Элементы.ОбъектыСПозднимиСостояниямиСтатусВУчете.Видимость = ФОИспользоватьДокументыЖЦ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ЗаполнитьЗначенияПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти   

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиОбъекты(Команда)
	НайтиОбъектыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъектыПоздние(Команда)
	НайтиОбъектыПоздниеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыУчетаСостояний(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОРСПозднимиСостояними Тогда
		ИмяТаблицы = "ОбъектыСПозднимиСостояниями";
	Иначе
		ИмяТаблицы = "ОбъектыБезСостояний";
	КонецЕсли;
 
	Если НЕ ПроверитьЗаполнениеТаблицы(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыУчетаСостоянийНаСервере(ИмяТаблицы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОРСПозднимиСостояними Тогда
		ПроверяемаяТаблица = ОбъектыСПозднимиСостояниями;
	Иначе
		ПроверяемаяТаблица = ОбъектыБезСостояний;
	КонецЕсли;
	
	Для каждого Строка из ПроверяемаяТаблица Цикл
		Строка.Отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОРСПозднимиСостояними Тогда
		ПроверяемаяТаблица = ОбъектыСПозднимиСостояниями;
	Иначе
		ПроверяемаяТаблица = ОбъектыБезСостояний;
	КонецЕсли;
	
	Для каждого Строка из ПроверяемаяТаблица Цикл
		Строка.Отметка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыБезСостояний

&НаКлиенте
Процедура ОбъектыБезСостоянийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = ОбъектыБезСостояний.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ОбъектыБезСостоянийСозданныйДокумент" Тогда
		ПоказатьЗначение(Неопределено, ДанныеСтроки.СозданныйДокумент);
	ИначеЕсли Поле.Имя <> "ОбъектыБезСостоянийДатаВводаСостояния" Тогда
		ПоказатьЗначение(Неопределено, ДанныеСтроки.ОбъектРемонта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыСПозднимиСостояниями

&НаКлиенте
Процедура ОбъектыСПозднимиСостояниямиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ДанныеСтроки = ОбъектыСПозднимиСостояниями.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ОбъектыСПозднимиСостояниямиСозданныйДокумент" Тогда
		ПоказатьЗначение(Неопределено, ДанныеСтроки.СозданныйДокумент);
	ИначеЕсли Поле.Имя <> "ОбъектыСПозднимиСостояниямиДатаВводаСостояния" Тогда
		ПоказатьЗначение(Неопределено, ДанныеСтроки.ОбъектРемонта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияДляДокументов) Тогда
		ОрганизацияДляДокументов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация", Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеДляДокументов) Тогда
		ПодразделениеДляДокументов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиОбъектыНаСервере()
	
	ОсновнаяИерархия = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ ОРсСостояниями
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних КАК торо_ТекущееСостояниеОРСрезПоследних
	|ГДЕ
	|	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта.Организация = &Организация
	|	И торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта.Подразделение = &Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
	|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ ОРбезСостояний
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОРсСостояниями КАК ОРсСостояниями
	|		ПО торо_ОбъектыРемонта.Ссылка = ОРсСостояниями.ОбъектРемонта
	|ГДЕ
	|	ОРсСостояниями.ОбъектРемонта ЕСТЬ NULL
	|	И НЕ торо_ОбъектыРемонта.ЭтоГруппа
	|	И НЕ торо_ОбъектыРемонта.ПометкаУдаления
	|	И НЕ торо_ОбъектыРемонта.НеУчаствуетВПланировании
	|	И торо_ОбъектыРемонта.Организация = &Организация
	|	И торо_ОбъектыРемонта.Подразделение = &Подразделение
	|	И торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР
	|ПОМЕСТИТЬ СтатусыОРВУчете
	|ИЗ
	|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ОРбезСостояний.ОбъектРемонта КАК ОбъектРемонта
	|				ИЗ
	|					ОРбезСостояний КАК ОРбезСостояний)) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОРбезСостояний.ОбъектРемонта КАК ОбъектРемонта,
	|	ОРбезСостояний.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ЕСТЬNULL(СтатусыОРВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету)) КАК СтатусВУчете,
	|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонтыДоступныеДляПодбора, ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ) КАК ЕстьНормативы
	|ИЗ
	|	ОРбезСостояний КАК ОРбезСостояний
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОРВУчете КАК СтатусыОРВУчете
	|		ПО ОРбезСостояний.ОбъектРемонта = СтатусыОРВУчете.ОбъектРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НаличиеНормативовОбъектовРемонта КАК торо_НаличиеНормативовОбъектовРемонта
	|		ПО ОРбезСостояний.ОбъектРемонта = торо_НаличиеНормативовОбъектовРемонта.ОбъектРемонта
	|ГДЕ
	|	&ОтборПоНаличиюНормативов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВводаВЭксплуатацию"; 
	
	Если ЗначениеЗаполнено(ОрганизацияДляОтбора) Тогда
		Запрос.УстановитьПараметр("Организация", ОрганизацияДляОтбора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта.Организация = &Организация", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодразделениеДляОтбора) Тогда
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеДляОтбора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта.Подразделение = &Подразделение", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Подразделение = &Подразделение", "ИСТИНА");
	КонецЕсли;
	
	Если ИскатьТолькоСНормативами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоНаличиюНормативов", 
			"(ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонтыДоступныеДляПодбора, ЛОЖЬ)
			|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ))");
	Иначе
		Запрос.УстановитьПараметр("ОтборПоНаличиюНормативов", Истина);
	КонецЕсли;

	ТаблицаОР = Запрос.Выполнить().Выгрузить();
	
	МассивОР = ТаблицаОР.ВыгрузитьКолонку("ОбъектРемонта");
	СоответствиеРодителей = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, ОсновнаяИерархия,,Истина);
	
	ОбъектыБезСостояний.Очистить();  
	НомерСтроки = 1;
	
	Для каждого Строка из ТаблицаОР Цикл
				
		НоваяСтрока = ОбъектыБезСостояний.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Родитель = СоответствиеРодителей[Строка.ОбъектРемонта];
		НоваяСтрока.ДатаВводаСостояния = Строка.ДатаВводаВЭксплуатацию;
		
		Если ФОИспользоватьДокументыЖЦ Тогда
			НоваяСтрока.Отметка = (Строка.СтатусВУчете = Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету);
		Иначе
			НоваяСтрока.Отметка = Истина;
		КонецЕсли;  
		
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиОбъектыПоздниеНаСервере()

	ОсновнаяИерархия = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ТекущееСостояниеОРСрезПервых.Период КАК ДатаПервогоСостояния,
	|	торо_ТекущееСостояниеОРСрезПервых.ВидЭксплуатации КАК ПервоеСостояние
	|ПОМЕСТИТЬ ОРсСостояниями
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПервых(, ) КАК торо_ТекущееСостояниеОРСрезПервых
	|ГДЕ
	|	НЕ торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта.ПометкаУдаления
	|	И НЕ торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта.НеУчаствуетВПланировании
	|	И торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта.ДатаВводаВЭксплуатацию <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта.ДатаВводаВЭксплуатацию < НАЧАЛОПЕРИОДА(торо_ТекущееСостояниеОРСрезПервых.Период, ДЕНЬ)
	|	И торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта.Организация = &Организация
	|	И торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта.Подразделение = &Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР
	|ПОМЕСТИТЬ СтатусыОРВУчете
	|ИЗ
	|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ОРсСостояниями.ОбъектРемонта КАК ОбъектРемонта
	|				ИЗ
	|					ОРсСостояниями КАК ОРсСостояниями)) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОРсСостояниями.ОбъектРемонта КАК ОбъектРемонта,
	|	ОРсСостояниями.ОбъектРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ЕСТЬNULL(СтатусыОРВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету)) КАК СтатусВУчете,
	|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонтыДоступныеДляПодбора, ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ) КАК ЕстьНормативы,
	|	ОРсСостояниями.ДатаПервогоСостояния КАК ДатаПервогоСостояния,
	|	ОРсСостояниями.ПервоеСостояние КАК ПервоеСостояние
	|ИЗ
	|	ОРсСостояниями КАК ОРсСостояниями
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОРВУчете КАК СтатусыОРВУчете
	|		ПО ОРсСостояниями.ОбъектРемонта = СтатусыОРВУчете.ОбъектРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НаличиеНормативовОбъектовРемонта КАК торо_НаличиеНормативовОбъектовРемонта
	|		ПО ОРсСостояниями.ОбъектРемонта = торо_НаличиеНормативовОбъектовРемонта.ОбъектРемонта
	|ГДЕ
	|	&ОтборПоНаличиюНормативов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВводаВЭксплуатацию"; 
	
	Если ЗначениеЗаполнено(ОрганизацияДляОтбора) Тогда
		Запрос.УстановитьПараметр("Организация", ОрганизацияДляОтбора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодразделениеДляОтбора) Тогда
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеДляОтбора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ТекущееСостояниеОРСрезПервых.ОбъектРемонта.Подразделение = &Подразделение", "ИСТИНА");
	КонецЕсли;
	
	Если ИскатьТолькоСНормативами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоНаличиюНормативов", 
		"(ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонтыДоступныеДляПодбора, ЛОЖЬ)
		|		ИЛИ ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьЦепочкиРемонтов, ЛОЖЬ))");
	Иначе
		Запрос.УстановитьПараметр("ОтборПоНаличиюНормативов", Истина);
	КонецЕсли;
	
	ТаблицаОР = Запрос.Выполнить().Выгрузить();
	
	МассивОР = ТаблицаОР.ВыгрузитьКолонку("ОбъектРемонта");
	СоответствиеРодителей = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, ОсновнаяИерархия,,Истина);
	
	ОбъектыСПозднимиСостояниями.Очистить();  
	НомерСтроки = 1;
	
	Для каждого Строка из ТаблицаОР Цикл
		
		НоваяСтрока = ОбъектыСПозднимиСостояниями.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Родитель = СоответствиеРодителей[Строка.ОбъектРемонта];
		НоваяСтрока.ДатаВводаСостояния = Строка.ДатаВводаВЭксплуатацию;
		
		Если ФОИспользоватьДокументыЖЦ Тогда
			НоваяСтрока.Отметка = (Строка.СтатусВУчете = Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету);
		Иначе
			НоваяСтрока.Отметка = Истина;
		КонецЕсли;  
			
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыУчетаСостоянийНаСервере(ИмяТаблицы)
	
	ТекущаяТаблица = ЭтотОбъект[ИмяТаблицы];
	ШаблонПутиКПолюДокумента = ИмяТаблицы + "[%1].СозданныйДокумент";
	
	МассивОР = Новый Массив;
	Для каждого Строка из ТекущаяТаблица Цикл
		Если Строка.Отметка Тогда
			МассивОР.Добавить(Строка.ОбъектРемонта);
		КонецЕсли;
	КонецЦикла;

	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОР, "Организация, Подразделение");
	Ответственный = Пользователи.ТекущийПользователь();
	
	Для каждого Строка из ТекущаяТаблица Цикл
		Если НЕ Строка.Отметка ИЛИ ЗначениеЗаполнено(Строка.СозданныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		
		ОрганизацияШапки = ОрганизацияДляДокументов;
		ПодразделениеШапки = ПодразделениеДляДокументов;   
		
		РеквизитыОР = РеквизитыОбъектов[Строка.ОбъектРемонта];
		Если РеквизитыОР <> Неопределено Тогда
			Если ЗначениеЗаполнено(РеквизитыОР.Организация) Тогда
				ОрганизацияШапки = РеквизитыОР.Организация;
			КонецЕсли;
			Если ЗначениеЗаполнено(РеквизитыОР.Подразделение) Тогда
				ПодразделениеШапки = РеквизитыОР.Подразделение;
			КонецЕсли;
		КонецЕсли;
		
		НовыйДокумент = Документы.торо_СостоянияОбъектовРемонта.СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
		НовыйДокумент.Организация = ОрганизацияШапки;
		НовыйДокумент.Подразделение = ПодразделениеШапки;
		НовыйДокумент.Ответственный = Ответственный;
		НовыйДокумент.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
				
		СтрокаТЧ = НовыйДокумент.ОбъектыРемонта.Добавить();
		СтрокаТЧ.ОбъектРемонта = Строка.ОбъектРемонта;
		СтрокаТЧ.СтруктураИерархии = ОсновнаяИерархия;
		СтрокаТЧ.ДатаОкончания = Строка.ДатаВводаСостояния;
		СтрокаТЧ.ВидЭксплуатации = ВидЭксплуатации;
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ШаблонСообщенияОбОшибке = НСтр("ru='Не удалось записать документ состояния для объекта ""%1"" по причине: %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщенияОбОшибке, СтрокаТЧ.ОбъектРемонта, ТекстОшибки);
			ПутьКПолю = СтрШаблон(ШаблонПутиКПолюДокумента, Формат(Строка.НомерСтроки-1, "ЧН=0; ЧГ=0"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ПутьКПолю);
		КонецПопытки;

		Строка.СозданныйДокумент = НовыйДокумент.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеТаблицы(ИмяТаблицы) 

	ЕстьОшибки = Ложь;
	
	ПроверяемаяТаблица = ЭтотОбъект[ИмяТаблицы];
	ШаблонПутиКДатеСостояния = ИмяТаблицы + "[%1].ДатаВводаСостояния";
	
	Для каждого Строка из ПроверяемаяТаблица Цикл
		Если Строка.Отметка И НЕ ЗначениеЗаполнено(Строка.ДатаВводаСостояния) Тогда
			ШаблонСообщения = НСтр("ru='Не заполнена дата состояния для объекта ремонта %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.ОбъектРемонта);
			ПутьКЭлементу = СтрШаблон(ШаблонПутиКДатеСостояния, Формат(Строка.НомерСтроки-1, "ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ПутьКЭлементу,, ЕстьОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

#КонецОбласти