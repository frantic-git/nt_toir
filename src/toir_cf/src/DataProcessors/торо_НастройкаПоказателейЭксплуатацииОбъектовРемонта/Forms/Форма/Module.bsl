////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

&НаКлиенте
Перем СтруктураНеОсновныхРеквизитовОР;

&НаКлиенте
Перем ПредыдущийАктивизированныйОР;

&НаКлиенте
Перем ПредыдущаяАктивизированнаяСтрокаДС;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьПраваДоступа();
	
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);
	
	Если Параметры.Свойство("СтруктураИерархии") И ЗначениеЗаполнено(Параметры.СтруктураИерархии) Тогда
		ТекСтруктураИерархии = Параметры.СтруктураИерархии;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		ТекСтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	КонецЕсли;
	
	Если Параметры.Свойство("ОбъектРемонта") И ЗначениеЗаполнено(Параметры.ОбъектРемонта) Тогда
		ОбъектРемонта = Параметры.ОбъектРемонта;
	КонецЕсли;
	
	ОбработатьИзменениеИерархииНаСервере();
	
	ТипПоиска = "Наименование";
	ТипПоискаПоказателей = "Все";
	
	Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.Картинка";
	Если ИспользоватьКартинкиТОР Тогда 
		Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.КартинкаОтображаемая";
	КонецЕсли;
	
	МодифицированностьПараметровОповещенияОСостоянииОР = Ложь;
	МодифицированностьИзмеряемыхПоказателей = Ложь;
	МодифицированностьМаксимальныхЗначенийНаработки = Ложь;
	МодифицированностьПараметровНаработки = Ложь;
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("СписокПараметровНаработки");
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	УстановитьВнешнийВидФормы();
	
	СтруктураНеОсновныхРеквизитовОР = Новый Структура("ЭтоГруппа, ДатаВводаВЭксплуатацию, ДатаВыпуска");
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
	    торо_РаботаСИерархией20Клиент.ВыделитьОРВДереве(ЭтаФорма, ОбъектРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не Модифицированность Тогда
	    Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗавершениеРаботы Тогда 
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемОбработчикОповещения", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены! Записать изменения перед закрытием?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'При закрытии формы все данные будут утеряны. Продолжить?'");	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Записать(Команда)
	Отказ = Ложь;
	ПроверитьЗаполнениеДанных(Отказ);
	Если НЕ Отказ Тогда 
		ЗаписатьНаСервере();
	КонецЕсли;
	Элементы.Список.Обновить();
КонецПроцедуры

#Область ОтборыВДеревеИВСписке

&НаКлиенте
Процедура ТипПоискаОрганизацияПриИзменении(Элемент)
    ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПодразделениеПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаНаправлениеПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаНаправлениеОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаТиповойОРПриИзменении(Элемент)
    ВыполнитьПоискВСпискеОР(Элемент.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаТиповойОРОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ЗначениеПоиска) Тогда
	    ВыполнитьПоискВСпискеОРПоНаименованию(ЗначениеПоиска);
	ИначеЕсли Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели" И Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" Тогда
		ОтменитьПоискВСпискеОРПоНаименованию();
		ЗначениеПоиска = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаКритичностьПриИзменении(Элемент)
	 ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаКритичностьОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОРПоНаименованию(ЗначениеПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОРПоНаименованию();
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		ВыполнитьПоискВСпискеОРПоНаименованию(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗначениеПоиска = Текст;
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПоказателейПриИзменении(Элемент)
	Если Не ТипПоискаПоказателей = "Все" Тогда
	    ВыполнитьПоискВСпискеОРПоПоказателям();
	Иначе
		ОтменитьПоискВСпискеОРПоПоказателям();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область УчетКонтролируемыхПоказателейОР

&НаКлиенте
Процедура ПодборКонтролируемыхПоказателей(Команда)
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из СписокИзмеряемыхПоказателей Цикл
		Если Не Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора, ЗакрыватьПриВыборе", "ОбъектыРемонта", СписокОтбора, Ложь);
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормыСтруктура, Элементы.СписокИзмеряемыхПоказателей, ОбъектРемонта);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеПоказатели(Команда)
	Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка = Не Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка;
	УстановитьОтборНеИспользуемыхСтрок(Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка, "СписокИзмеряемыхПоказателей");
КонецПроцедуры

#КонецОбласти

#Область УчетНаработкиОР

&НаКлиенте
Процедура ЗаполнитьПоказательИзТипового(Команда)
	ЗаполнитьПоказатели(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыбранныеПоказателиИзТипового(Команда)
	ЗаполнитьПоказатели(, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиИзТипового(Команда)
	ЗаполнитьПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМаксимальныеЗначенияПараметровНаработки(Команда)
	ОбновитьМаксимальныеЗначенияПараметровНаработкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеМаксимальныеЗначенияНаработки(Команда)
	Элементы.ТаблицаМаксимальныхЗначенийНаработкиПоказыватьУдаленныеМаксимальныеЗначенияНаработки.Пометка = Не Элементы.ТаблицаМаксимальныхЗначенийНаработкиПоказыватьУдаленныеМаксимальныеЗначенияНаработки.Пометка;
	СписокПараметровНаработкиПриАктивизацииСтроки(Элементы.СписокПараметровНаработки);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
 	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		УстановкаДоступности(Неопределено);
	    Возврат;
	ИначеЕсли МодифицированностьИзмеряемыхПоказателей Или МодифицированностьМаксимальныхЗначенийНаработки
		Или МодифицированностьПараметровНаработки Или МодифицированностьПараметровОповещенияОСостоянииОР Тогда
		СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("ЭтоДерево", Истина);
		Оповещение = Новый ОписаниеОповещения("ПриАктивизацииСтроки", ЭтотОбъект, СтруктураПараметров);
		ШаблонВопроса = НСтр("ru = 'Для объекта ремонта %1 были изменены показатели. При переходе все изменения будут потеряны! Сохранить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ПредыдущийАктивизированныйОР);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	Иначе
		СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("ЭтоДерево", Истина);
		ПриАктивизацииСтроки(КодВозвратаДиалога.Нет, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	ДанныеСтроки = Дерево.НайтиПоИдентификатору(Строка);
	Если ДанныеСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	СвязиОбновлялись = ДанныеСтроки.СвязиОбновлялись;
	торо_РаботаСИерархией20Клиент.ДеревоПередРазворачиванием(Дерево, Строка, СтруктураПараметровИерархии);
	ДеревоПередРазворачиваниемНаСервере(Строка, СвязиОбновлялись);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		УстановкаДоступности(Неопределено);
	    Возврат;
	ИначеЕсли МодифицированностьИзмеряемыхПоказателей Или МодифицированностьМаксимальныхЗначенийНаработки
		Или МодифицированностьПараметровНаработки Или МодифицированностьПараметровОповещенияОСостоянииОР Тогда
		СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("ЭтоДерево", Ложь);
		Оповещение = Новый ОписаниеОповещения("ПриАктивизацииСтроки", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Для объекта ремонта %1 были изменены показатели, при переходе'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	Иначе
		СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("ЭтоДерево", Ложь);
		ПриАктивизацииСтроки(КодВозвратаДиалога.Нет, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	торо_РаботаСИерархией20.СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки, ИспользоватьКартинкиТОР);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИзмеряемыхПоказателей

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	Если Копирование И ТекущиеДанные.ИзТиповогоОР Тогда
		ТекущиеДанные.ИзТиповогоОР = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
		СтруктураПоиска = Новый Структура("Показатель", ВыбранноеЗначение);
		СписокПоказателейВТаблице = СписокИзмеряемыхПоказателей.НайтиСтроки(СтруктураПоиска);
		
		Если СписокПоказателейВТаблице.Количество() = 1 И СписокПоказателейВТаблице[0].Удален Тогда
			Строка = СписокПоказателейВТаблице[0];
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(Строка.Показатель, ОбъектРемонта, Истина);
			ЗаполнитьЗначенияСвойств(Строка, СтруктураЗначенийПолей);
			Строка.ОбъектРемонта = ОбъектРемонта;
			Строка.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
			Строка.ИзТиповогоОР = Ложь;
			Строка.Удален = Ложь;
			
			МодифицированностьИзмеряемыхПоказателей = Истина;
			Модифицированность = Истина;
		ИначеЕсли СписокПоказателейВТаблице.Количество() >= 1 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Строка с такими значениями полей уже добавлена'"));	
			
		Иначе	
			НС = СписокИзмеряемыхПоказателей.Добавить();
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение, ОбъектРемонта, Истина);
			СтруктураЗначенийПолей.Вставить("ОбъектРемонта", ОбъектРемонта);
			СтруктураЗначенийПолей.Вставить("Показатель", ВыбранноеЗначение);
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
				СтруктураЗначенийПолей.Вставить("Доступность", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ТипЗначения").СодержитТип(Тип("Число")));
			Иначе
				СтруктураЗначенийПолей.Вставить("Доступность", Ложь);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НС, СтруктураЗначенийПолей);
			
			МодифицированностьИзмеряемыхПоказателей = Истина;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если НоваяСтрока Тогда
			ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
		КонецЕсли;
		
		МодифицированностьИзмеряемыхПоказателей = Истина;
		Модифицированность = Истина;
		
		Если ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
			ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
		Иначе
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ТекущиеДанные.Показатель, ТекущиеДанные.ОбъектРемонта, Истина);
			
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗначенийПолей);
			
			ЗначениеРеквизита = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Показатель, "ТипЗначения");
			Если Не ЗначениеРеквизита = Неопределено Тогда
				ТекущиеДанные.Доступность = ЗначениеРеквизита.СодержитТип(Тип("Число"));
			КонецЕсли;
		КонецЕсли;
		
		СписокИзмеряемыхПоказателейПриАктивизацииСтроки(Элементы.СписокИзмеряемыхПоказателей);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПослеУдаления(Элемент)
	Модифицированность = Истина;
	МодифицированностьИзмеряемыхПоказателей = Истина;
	Элементы.СписокИзмеряемыхПоказателей.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриАктивизацииСтроки(Элемент)
	Если Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные <> Неопределено Тогда
		ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("Показатель", Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.Показатель);
		Элементы.ПараметрыОповещенияПоСостояниямОР.ОтборСтрок = ОтборПараметровОповещений;
	Иначе
		ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("Показатель", ПредопределенноеЗначение("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка"));
		Элементы.ПараметрыОповещенияПоСостояниямОР.ОтборСтрок = ОтборПараметровОповещений;
	КонецЕсли;
	
	УстановитьУсловноеОформлениеТЧПараметровУведомленийИРегистрацииДефектов();
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные.ИзТиповогоОР Тогда
		СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель", ОбъектРемонта, ТекущиеДанные.Показатель);
		
		МассивСтрок = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаКУдалению Из МассивСтрок Цикл
			ПараметрыОповещенияПоСостояниямОР.Удалить(СтрокаКУдалению);
			МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
		КонецЦикла;
		
		// Взамен удаленной добавим строку типового, если такая есть
		ДанныеПоказателяТипового = ПолучитьДанныеПоказателяТипового(ТекущиеДанные.Показатель, ТиповойОР);
		Если ДанныеПоказателяТипового <> Неопределено Тогда
			Отказ = Истина;
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПоказателяТипового);
			МассивСтруктурПараметровОповещения = ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"), ТиповойОР);
			Для каждого ПараметрыОповещения Из МассивСтруктурПараметровОповещения Цикл
				Если ПараметрыОповещения.Показатель = ТекущиеДанные.Показатель И ПараметрыОповещения.ТиповойОР = ТиповойОР Тогда
					ЗаполнитьЗначенияСвойств(ПараметрыОповещенияПоСостояниямОР.Добавить(), ПараметрыОповещения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе 
		Отказ = Истина;
		ТекущиеДанные.Удален = Не ТекущиеДанные.Удален;
		Если ТекущиеДанные.Удален Тогда
			ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
			УстановитьОтборНеИспользуемыхСтрок(Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка, "СписокИзмеряемыхПоказателей");
		Иначе
			ТекущиеДанные.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	МодифицированностьИзмеряемыхПоказателей = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейЗначенияКонтролируемыхПоказателейИзОРПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
		ТекущиеДанные.ИзТиповогоОР = Не ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР;
	КонецЕсли;
	
	ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из СписокИзмеряемыхПоказателей Цикл
		Если Не Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, ЗакрыватьПриВыборе", "ОбъектыРемонта", Ложь);
	
	ФормаВыбораПоказателя = ПолучитьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормыСтруктура, Элемент, ОбъектРемонта);
	ФормаВыбораПоказателя.ЗакрыватьПриВыборе = Истина;
	
	ФормаВыбораПоказателя.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтруктураПоиска = Новый Структура("Показатель", ВыбранноеЗначение);
	СписокПоказателейВТаблице = СписокИзмеряемыхПоказателей.НайтиСтроки(СтруктураПоиска);
	СтандартнаяОбработка = Ложь;

	Если СписокПоказателейВТаблице.Количество() = 1 И СписокПоказателейВТаблице[0].Удален Тогда
		СписокИзмеряемыхПоказателей.Удалить(СписокПоказателейВТаблице[0]);
		ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение, ОбъектРемонта, Истина);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗначенийПолей);
		ТекущиеДанные.Показатель = ВыбранноеЗначение;
		ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
		ТекущиеДанные.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
		ТекущиеДанные.ИзТиповогоОР = Ложь;
		ТекущиеДанные.Удален = Ложь;
		
		МодифицированностьИзмеряемыхПоказателей = Истина;
		
	ИначеЕсли СписокПоказателейВТаблице.Количество() >= 1 И ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Показатель <> ВыбранноеЗначение Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Строка с такими значениями полей уже добавлена'"));	
		
	Иначе
		ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		ПоказательДоИзменения = ТекущиеДанные.Показатель;
		СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение, ОбъектРемонта, Истина);
		СтруктураЗначенийПолей.Вставить("ОбъектРемонта", ОбъектРемонта);
		СтруктураЗначенийПолей.Вставить("Показатель" , ВыбранноеЗначение);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗначенийПолей);
		
		МодифицированностьИзмеряемыхПоказателей = Истина;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из СписокИзмеряемыхПоказателей Цикл
		Если Не Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора, ЗакрыватьПриВыборе", "ОбъектыРемонта", СписокОтбора, Ложь);
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормыСтруктура, Элементы.СписокИзмеряемыхПоказателей, ОбъектРемонта);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОповещенияПоСостояниямОР

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
		Модифицированность = Истина;
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПараметрыОтбора = Новый Структура("Показатель, ВидСравнения, ВариантЗначения, ПараметрыВводаДефекта, СобытиеВозникновенияОповещения",
			ТекущиеДанные.Показатель, ТекущиеДанные.ВидСравнения, ТекущиеДанные.ВариантЗначения, 
			ТекущиеДанные.ПараметрыВводаДефекта, ТекущиеДанные.СобытиеВозникновенияОповещения);	
		Если ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.ВИнтервале")
			Или ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеВИнтервале") Тогда
			ПараметрыОтбора.Вставить("ВариантЗначения1", ТекущиеДанные.ВариантЗначения1);
			Если ТекущиеДанные.ВариантЗначения1 = ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ПроизвольноеЗначение") Тогда
				ПараметрыОтбора.Вставить("Значение1", ТекущиеДанные.Значение1);
			КонецЕсли;
		КонецЕсли;
		Если ТекущиеДанные.ВариантЗначения = ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ПроизвольноеЗначение") Тогда
			ПараметрыОтбора.Вставить("Значение", ТекущиеДанные.Значение);
		КонецЕсли;	
		СтрокиДубли = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиДубли.Количество() > 1 Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Строка с такими значениями полей уже добавлена'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанныеКП = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;

	Если НоваяСтрока Тогда
		Если Не ТекущиеДанныеКП = Неопределено Тогда
			Элемент.ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
			Элемент.ТекущиеДанные.Показатель = ТекущиеДанныеКП.Показатель;
			Элемент.ТекущиеДанные.ID = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПараметрыОповещенияПоСостояниямОР.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	ОписаниеТиповКП = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанныеКП.Показатель, "ТипЗначения");
	Если Не ОписаниеТиповКП = Неопределено Тогда
		ТипЗначениеКПОР = Не ОписаниеТиповКП.СодержитТип(Тип("Число")) И ОписаниеТиповКП.СодержитТип(Тип("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта"));	
	Иначе
		
	КонецЕсли;	
	
	Если ТипЗначениеКПОР Или ТекущиеДанные.ВариантЗначения = ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ЗначениеИзмеряемогоПоказателяОР") Тогда
		Элементы.ПараметрыОповещенияПоСостояниямОРЗначение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта");
	Иначе
		Элементы.ПараметрыОповещенияПоСостояниямОРЗначение.ОграничениеТипа = Новый ОписаниеТипов("Число");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПослеУдаления(Элемент)
	МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Показатель) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран контролируемый показатель!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	ИначеЕсли ТекущиеДанные.ИзТиповогоОР Тогда
		Отказ = Истина;
	ИначеЕсли Копирование Тогда  
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Строка с такими значениями полей уже добавлена'"));
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПараметровНаработки

&НаКлиенте
Процедура СписокПараметровНаработкиПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ТаблицаМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель", ПредопределенноеЗначение("Справочник.ПараметрыВыработкиОС.ПустаяСсылка"));
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Показатель", ТекущиеДанные.Показатель);
	Если Не Элементы.ТаблицаМаксимальныхЗначенийНаработкиПоказыватьУдаленныеМаксимальныеЗначенияНаработки.Пометка Тогда
		СтруктураОтбора.Вставить("Удален", Ложь);
	КонецЕсли;
	
	Элементы.ТаблицаМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель", ТекущиеДанные.ОбъектРемонта, ТекущиеДанные.Показатель);
	НайденныеСтроки = СписокПараметровНаработки.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 1 Тогда
		НайденныеСтроки = ТаблицаМаксимальныхЗначенийНаработки.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТаблицаМаксимальныхЗначенийНаработки.Удалить(НайденнаяСтрока);
		КонецЦикла;
		МодифицированностьМаксимальныхЗначенийНаработки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не НоваяСтрока Тогда
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КоэффициентИспользованияОборудования = 1;
		Элемент.ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки = 1;
		Элемент.ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Период) Тогда 
			Элемент.ТекущиеДанные.Период = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ОбъектРемонта, "ДатаВводаВЭксплуатацию");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОбъектРемонта) 
		И Элемент.ТекущиеДанные.ОбъектРемонта <> ОбъектРемонта Тогда
		Элемент.ТекущиеДанные.Период = СтруктураНеОсновныхРеквизитовОР.ДатаВводаВЭксплуатацию;
		Элемент.ТекущиеДанные.КоэффициентИспользованияОборудования = 1;
		Элемент.ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не НоваяСтрока И ОтменаРедактирования Тогда
		// Возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
		
		МодифицированностьПараметровНаработки = Истина;
		Модифицированность = Истина;
		
		// Дополнительно, если имеются максимальные значения для параметра из типового -- проставляем ОР в нем.
		Если ЗначениеЗаполнено(ТиповойОР) Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Показатель", Элемент.ТекущиеДанные.Показатель);
			МассивСтрокМаксимальныхЗначенийНаработки = ТаблицаМаксимальныхЗначенийНаработки.НайтиСтроки(Отбор);
			Для каждого ЭлементМассива Из МассивСтрокМаксимальныхЗначенийНаработки Цикл
				ЭлементМассива.ОбъектРемонта = ОбъектРемонта;
				МодифицированностьМаксимальныхЗначенийНаработки = Истина;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПослеУдаления(Элемент)
	МодифицированностьПараметровНаработки = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПериодПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	ТекущаяСтрока = Элементы.СписокПараметровНаработки.ТекущаяСтрока;
	Если ТекущиеДанные <> Неопределено И СтруктураНеОсновныхРеквизитовОР.ЭтоГруппа <> Неопределено Тогда
		Если НЕ СтруктураНеОсновныхРеквизитовОР.ЭтоГруппа И ТекущиеДанные.Период < СтруктураНеОсновныхРеквизитовОР.ДатаВыпуска Тогда
			ТекстСообщения = Нстр("ru='Дата ввода наработки не может быть меньше даты выпуска.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СписокПараметровНаработки[" + ТекущаяСтрока + "].Период");
			ТекущиеДанные.Период = ?(ЗначениеЗаполнено(СтруктураДанныхДоРедактирования["СписокПараметровНаработки"]),
										СтруктураДанныхДоРедактирования["СписокПараметровНаработки"].Период,
										ТекущиеДанные.Период);							
		КонецЕсли;
		торо_СобытияФормКлиентСервер.ОбновитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Родитель.Имя, "Период", ТекущиеДанные.Период);								
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПоказательПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
		НайденныеСтроки = СписокПараметровНаработки.НайтиСтроки(Новый Структура("Показатель", ТекущиеДанные.Показатель));
		Если НайденныеСтроки.Количество() = 1 Тогда 
			ТекущиеДанные.Период = СтруктураНеОсновныхРеквизитовОР.ДатаВводаВЭксплуатацию;
		Иначе 
			ТекущиеДанные.Период = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Показатель", ТекущиеДанные.Показатель);
	Если Не Элементы.ТаблицаМаксимальныхЗначенийНаработкиПоказыватьУдаленныеМаксимальныеЗначенияНаработки.Пометка Тогда
		СтруктураОтбора.Вставить("Удален", Ложь);
	КонецЕсли;
	Элементы.ТаблицаМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаМаксимальныхЗначенийНаработки

&НаКлиенте
Процедура ТаблицаМаксимальныхЗначенийНаработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Показатель) Тогда
		СтруктураПоиска = Новый Структура("Показатель, Удален", ТекущиеДанные.Показатель, Ложь);
		МассивСтрок = ТаблицаМаксимальныхЗначенийНаработки.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Для показателя наработки <%1> уже введено его максимальное значение или назначенный ресурс.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.Показатель);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Иначе
			СтруктураПоиска.Вставить("Удален", Истина);
			МассивСтрок = ТаблицаМаксимальныхЗначенийНаработки.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() <> 0 Тогда
				ТаблицаМаксимальныхЗначенийНаработки.Удалить(МассивСтрок[0]);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран показатель наработки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаксимальныхЗначенийНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	ТекущаяСтрокаМаксимальногоЗначения = Элементы.ТаблицаМаксимальныхЗначенийНаработки.ТекущиеДанные;
		
	Если Не ТекущиеДанные = Неопределено 
		И Не ТекущаяСтрокаМаксимальногоЗначения = Неопределено Тогда
		ТекущаяСтрокаМаксимальногоЗначения.Показатель = ТекущиеДанные.Показатель;
		ТекущаяСтрокаМаксимальногоЗначения.ОбъектРемонта = ОбъектРемонта;
		Если ТекущаяСтрокаМаксимальногоЗначения.МаксимальноеЗначение < 0 Тогда
			ТекстСообщения = НСтр("ru = 'Максимальное значение наработки не может быть отрицательным!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаксимальныхЗначенийНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		Модифицированность = Истина;
		МодифицированностьМаксимальныхЗначенийНаработки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаксимальныхЗначенийНаработкиПослеУдаления(Элемент)
	МодифицированностьМаксимальныхЗначенийНаработки = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаксимальныхЗначенийНаработкиПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.ОбъектРемонта = ОбъектРемонта Тогда
		
		// Взамен удаленной добавим строку типового, если такая есть
		ДанныеПоказателяТипового = ПолучитьДанныеМаксимальногоЗначенияНаработкиТипового(ТекущиеДанные.Показатель, ТиповойОР);
		Если ДанныеПоказателяТипового <> Неопределено Тогда
			Отказ = Истина;
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПоказателяТипового);
		КонецЕсли;
		
	Иначе 
		Отказ = Истина;
		ТекущиеДанные.Удален = Не ТекущиеДанные.Удален;
		
		Если ТекущиеДанные.Удален Тогда
			ТекущиеДанные.ОбъектРемонта = ОбъектРемонта;
		Иначе
			ТекущиеДанные.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;
		
		СписокПараметровНаработкиПриАктивизацииСтроки(Элементы.СписокПараметровНаработки);
	КонецЕсли;
	
	МодифицированностьМаксимальныхЗначенийНаработки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаксимальныхЗначенийНаработкиНазначенныйРесурсПриИзменении(Элемент)
	ОбновитьЗначенияИзноса(Элементы.ТаблицаМаксимальныхЗначенийНаработки.ТекущиеДанные);
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УчетКонтролируемыхПоказателейОР

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(ОбъектРемонта, ТиповойОР)
	МассивВозврата = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Или ЗначениеЗаполнено(ТиповойОР) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Показатель КАК Показатель,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР КАК ТиповойОР,
		               |	2 КАК Приоритет,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения КАК ВариантЗначения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение КАК Значение,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.СобытиеВозникновенияОповещения КАК СобытиеВозникновенияОповещения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВидСравнения КАК ВидСравнения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ID КАК ID,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение1 КАК Значение1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения1 КАК ВариантЗначения1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ПараметрыВводаДефекта КАК ПараметрыВводаДефекта
		               |ПОМЕСТИТЬ ТабИсточников
		               |ИЗ
		               |	РегистрСведений.торо_ПараметрыОповещенияОСостоянииОборудования КАК торо_ПараметрыОповещенияОСостоянииОборудования
		               |ГДЕ
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ОбъектРемонта = &ОбъектРемонта
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ОбъектРемонта,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Показатель,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР,
		               |	1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.СобытиеВозникновенияОповещения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВидСравнения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ID,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ПараметрыВводаДефекта
		               |ИЗ
		               |	РегистрСведений.торо_ПараметрыОповещенияОСостоянииОборудования КАК торо_ПараметрыОповещенияОСостоянииОборудования
		               |ГДЕ
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР = &ТиповойОР
		               |	
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
					   |ВЫБРАТЬ
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ОбъектРемонта,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Показатель,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР,
		               |	0,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.СобытиеВозникновенияОповещения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВидСравнения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ID,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ПараметрыВводаДефекта
		               |ИЗ
		               |	РегистрСведений.торо_ПараметрыОповещенияОСостоянииОборудования КАК торо_ПараметрыОповещенияОСостоянииОборудования
		               |ГДЕ
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР = &РодительТОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ТабПриоритетов.Приоритет) КАК Приоритет,
		               |	ТабПриоритетов.Показатель КАК Показатель
		               |ПОМЕСТИТЬ ТабПриоритетов
		               |ИЗ
		               |	ТабИсточников КАК ТабПриоритетов
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТабПриоритетов.Показатель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабИсточников.ОбъектРемонта КАК ОбъектРемонта,
		               |	ТабИсточников.Показатель КАК Показатель,
		               |	ТабИсточников.ТиповойОР КАК ТиповойОР,
		               |	ТабИсточников.ВариантЗначения КАК ВариантЗначения,
		               |	ТабИсточников.Значение КАК Значение,
		               |	ТабИсточников.СобытиеВозникновенияОповещения КАК СобытиеВозникновенияОповещения,
		               |	ТабИсточников.ВидСравнения КАК ВидСравнения,
		               |	ТабИсточников.ID КАК ID,
		               |	ТабИсточников.Значение1 КАК Значение1,
		               |	ТабИсточников.ВариантЗначения1 КАК ВариантЗначения1,
		               |	ТабИсточников.ПараметрыВводаДефекта КАК ПараметрыВводаДефекта
		               |ИЗ
		               |	ТабИсточников КАК ТабИсточников
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПриоритетов КАК ТабПриоритетов
		               |		ПО ТабИсточников.Показатель = ТабПриоритетов.Показатель
		               |			И ТабИсточников.Приоритет = ТабПриоритетов.Приоритет";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		Запрос.УстановитьПараметр("ТиповойОР", ?(ЗначениеЗаполнено(ТиповойОР), ТиповойОР, NULL));
		Запрос.УстановитьПараметр("РодительТОР", ?(ЗначениеЗаполнено(ТиповойОР.Родитель), ТиповойОР.Родитель, NULL));
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураПараметр = Новый Структура("ОбъектРемонта, Показатель, ТиповойОР, ВариантЗначения,
													|Значение, СобытиеВозникновенияОповещения, ВидСравнения,
													|ID, Значение1, ВариантЗначения1, ПараметрыВводаДефекта");
				ЗаполнитьЗначенияСвойств(СтруктураПараметр, Выборка);
				МассивВозврата.Добавить(СтруктураПараметр);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияКонтролируемыхПоказателей(ИзмеряемыйПоказатель, ОР, НеУчитыватьОР = Ложь)
	СтруктураЗначенийПолей = Новый Структура();
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОР, ИзмеряемыйПоказатель, Истина, НеУчитыватьОР);
	Если МассивПоказателей.Количество() > 0 Тогда
		СтрокаПоказателя = МассивПоказателей[0];
		СтруктураЗначенийПолей.Вставить("ДопустимыйМинимум", СтрокаПоказателя.ДопустимыйМинимум);
		СтруктураЗначенийПолей.Вставить("ДопустимыйМаксимум", СтрокаПоказателя.ДопустимыйМаксимум);
		СтруктураЗначенийПолей.Вставить("КритическийМинимум", СтрокаПоказателя.КритическийМинимум);
		СтруктураЗначенийПолей.Вставить("КритическийМаксимум", СтрокаПоказателя.КритическийМаксимум);
		СтруктураЗначенийПолей.Вставить("ЗначенияКонтролируемыхПоказателейИзОР", СтрокаПоказателя.ЗначенияКонтролируемыхПоказателейИзОР);
		СтруктураЗначенийПолей.Вставить("ИзТиповогоОР", СтрокаПоказателя.ИзТиповогоОР);
	ИначеЕсли НеУчитыватьОР Тогда
		СтруктураЗначенийПолей.Вставить("ДопустимыйМинимум", ИзмеряемыйПоказатель.ДопустимыйМинимум);
		СтруктураЗначенийПолей.Вставить("ДопустимыйМаксимум", ИзмеряемыйПоказатель.ДопустимыйМаксимум);
		СтруктураЗначенийПолей.Вставить("КритическийМинимум", ИзмеряемыйПоказатель.КритическийМинимум);
		СтруктураЗначенийПолей.Вставить("КритическийМаксимум", ИзмеряемыйПоказатель.КритическийМаксимум);
		СтруктураЗначенийПолей.Вставить("ЗначенияКонтролируемыхПоказателейИзОР", Ложь);
		СтруктураЗначенийПолей.Вставить("ИзТиповогоОР", Ложь);
	КонецЕсли;
	
	Если Не ИзмеряемыйПоказатель.ТипЗначения = Неопределено Тогда
		Если ИзмеряемыйПоказатель.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Если Не ТипЗнч(СтруктураЗначенийПолей.ДопустимыйМаксимум) = Тип("Число") Тогда
				СтруктураЗначенийПолей.ДопустимыйМаксимум = 0;
			КонецЕсли;
			Если Не ТипЗнч(СтруктураЗначенийПолей.КритическийМинимум) = Тип("Число") Тогда
				СтруктураЗначенийПолей.КритическийМинимум = 0;
			КонецЕсли;
			Если Не ТипЗнч(СтруктураЗначенийПолей.КритическийМаксимум) = Тип("Число") Тогда
				СтруктураЗначенийПолей.КритическийМаксимум = 0;
			КонецЕсли;
			Если Не ТипЗнч(СтруктураЗначенийПолей.ДопустимыйМинимум) = Тип("Число") Тогда
				СтруктураЗначенийПолей.ДопустимыйМинимум = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураЗначенийПолей;
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьИзмеряемыеПоказатели(ОбъектРемонта, ТиповойОР)
	СтруктураВозврата = Новый Массив;
	
	СписокТиповых = Новый Массив;
	Если ЗначениеЗаполнено(ТиповойОР) Тогда
		СписокТиповых.Добавить(ТиповойОР);
	КонецЕсли;
	
	ТаблицаРодителейТиповых = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейСпискаОбъектов(СписокТиповых, Тип("СправочникСсылка.торо_ТиповыеОР"), Истина);
	ТаблицаРодителейТиповых.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаРодителейТиповых.ЗаполнитьЗначения(ОбъектРемонта, "ОбъектРемонта");
	
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,,Истина,,ТаблицаРодителейТиповых);
	
	Для каждого СтрокаПоказатель из МассивПоказателей Цикл
		СтруктураСтроки = Новый Структура("ОбъектРемонта, Показатель, ДопустимыйМинимум,
										  |ДопустимыйМаксимум, КритическийМинимум, КритическийМаксимум,
										  |ЗначенияКонтролируемыхПоказателейИзОР, ИзТиповогоОР,
    									  |ТочкаЗамера ,ТиповойОР, Удален, Доступность");
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаПоказатель);
		СтруктураСтроки.Доступность = Истина;
		
		Если Не ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
			СтруктураСтроки.ДопустимыйМаксимум = Неопределено;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураСтроки.КритическийМинимум) = Тип("Число") Тогда
			СтруктураСтроки.КритическийМинимум = Неопределено;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураСтроки.КритическийМаксимум) = Тип("Число") Тогда
			СтруктураСтроки.КритическийМаксимум = Неопределено;
		КонецЕсли;
		Если Не ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
			СтруктураСтроки.ДопустимыйМаксимум = Неопределено;
		КонецЕсли;
		
		СтруктураСтроки.Доступность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураСтроки.Показатель, "ТипЗначения").СодержитТип(Тип("Число"));
		
		СтруктураВозврата.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоказателяТипового(Показатель, Типовой)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК ТиповойОР,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум
	               |	КОНЕЦ КАК ДопустимыйМинимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум
	               |	КОНЕЦ КАК ДопустимыйМаксимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум
	               |	КОНЕЦ КАК КритическийМинимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум
	               |	КОНЕЦ КАК КритическийМаксимум,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера
	               |ИЗ
	               |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ПВХИзмеряемыеПоказателиОбъектовРемонта
	               |		ПО торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.Ссылка
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК Справочник.торо_ТиповыеОР)) = &ТиповойОР
	               |	И торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = &Показатель";
	
	Запрос.УстановитьПараметр("ТиповойОР", Типовой);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврат = Новый Структура("ТиповойОР,Показатель, ДопустимыйМинимум,ДопустимыйМаксимум, 
											|КритическийМинимум, КритическийМаксимум,ЗначенияКонтролируемыхПоказателейИзОР,
											|ТочкаЗамера,ИзТиповогоОР,Удален");
		ЗаполнитьЗначенияСвойств(СтруктураВозврат,Выборка);
		СтруктураВозврат.Вставить("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		СтруктураВозврат.ИзТиповогоОР = Истина;
		СтруктураВозврат.Удален = Ложь;					
		
		Возврат СтруктураВозврат;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ПараметрыУведомленийИРегистрацииДефектов

&НаКлиенте
Процедура УстановитьУсловноеОформлениеТЧПараметровУведомленийИРегистрацииДефектов()
	ТекущиеДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Показатель) Тогда
	    Возврат;
	КонецЕсли;
	
	ОписаниеТиповКП = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Показатель, "ТипЗначения");
	ТипСоставной = ОписаниеТиповКП.СодержитТип(Тип("Число")) И ОписаниеТиповКП.СодержитТип(Тип("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта"));	
	ТипЧисло = ОписаниеТиповКП.СодержитТип(Тип("Число")) И Не ОписаниеТиповКП.СодержитТип(Тип("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта"));
	ТипЗначениеКПОР = Не ОписаниеТиповКП.СодержитТип(Тип("Число")) И ОписаниеТиповКП.СодержитТип(Тип("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта"));
	
	Если ТипЧисло Тогда
		МассивВидовСравнений = Новый Массив();
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.Больше"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.БольшеИлиРавно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.Меньше"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.МеньшеИлиРавно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.Равно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеРавно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.ВИнтервале"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеВИнтервале"));
		
	    МассивВариантовЗначенийКПОР = Новый Массив();
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ДопустимыйМаксимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ДопустимыйМинимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.КритическийМаксимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.КритическийМинимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ПроизвольноеЗначение"));
		
		ОписаниеТиповЗначения = Новый ОписаниеТипов("Число");
	ИначеЕсли ТипЗначениеКПОР Тогда
		МассивВидовСравнений = Новый Массив();
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.Равно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеРавно"));
		
		МассивВариантовЗначенийКПОР = Новый Массив();
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ЗначениеИзмеряемогоПоказателяОР"));
		
		ОписаниеТиповЗначения = Новый ОписаниеТипов("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта");
	Иначе
		МассивВидовСравнений = Новый Массив();
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.Больше"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.БольшеИлиРавно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.Меньше"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.МеньшеИлиРавно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.Равно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеРавно"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.ВИнтервале"));
		МассивВидовСравнений.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеВИнтервале"));

		МассивВариантовЗначенийКПОР = Новый Массив();
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ДопустимыйМаксимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ДопустимыйМинимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.КритическийМаксимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.КритическийМинимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ПроизвольноеЗначение"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ЗначениеИзмеряемогоПоказателяОР"));
		
		ОписаниеТиповЗначения = Новый ОписаниеТипов("Число, СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта");
	КонецЕсли;
	
	Элементы.ПараметрыОповещенияПоСостояниямОРВидСравнения.СписокВыбора.ЗагрузитьЗначения(МассивВидовСравнений);
	Элементы.ПараметрыОповещенияПоСостояниямОРВариантЗначения.СписокВыбора.ЗагрузитьЗначения(МассивВариантовЗначенийКПОР);
	Элементы.ПараметрыОповещенияПоСостояниямОРЗначение.ОграничениеТипа = ОписаниеТиповЗначения;
КонецПроцедуры

#КонецОбласти

#Область УчетНаработкиОР

&НаСервереБезКонтекста
Функция ОбновитьМаксимальныеЗначенияПоказателейНаработки(ОбъектРемонта, ТиповойОР)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
	|	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
	|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
	|	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс,
	|	0 КАК Приоритет,
	|	торо_МаксимальныеЗначенияНаработкиОР.Удален
	|ПОМЕСТИТЬ ВсеПараметры
	|ИЗ
	|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|ГДЕ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
	|	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
	|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
	|	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс,
	|	1,
	|	торо_МаксимальныеЗначенияНаработкиОР.Удален
	|ИЗ
	|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|ГДЕ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &Типовой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПараметры.ОбъектРемонта,
	|	ВсеПараметры.Показатель,
	|	ВсеПараметры.МаксимальноеЗначение,
	|	ВсеПараметры.НазначенныйРесурс,
	|	ВсеПараметры.Удален
	|ИЗ
	|	ВсеПараметры КАК ВсеПараметры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ
	|			ВсеПараметры.Показатель КАК Показатель,
	|			МИНИМУМ(ВсеПараметры.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВсеПараметры КАК ВсеПараметры
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВсеПараметры.Показатель) КАК ВложенныйЗапрос
	|		ПО ВсеПараметры.Показатель = ВложенныйЗапрос.Показатель
	|			И ВсеПараметры.Приоритет = ВложенныйЗапрос.Приоритет";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Типовой", ТиповойОР);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	СтруктураВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл	
		СтруктураПараметр = Новый Структура("ОбъектРемонта, Показатель, МаксимальноеЗначение, НазначенныйРесурс, Удален");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
		СтруктураВозврата.Добавить(СтруктураПараметр);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Процедура ОбновитьМаксимальныеЗначенияПараметровНаработкиНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПараметров.Показатель,
	               |	ТаблицаПараметров.ОбъектРемонта
	               |ПОМЕСТИТЬ ТаблицаПараметров
	               |ИЗ
	               |	&ТаблицаПараметров КАК ТаблицаПараметров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПараметров.Показатель,
	               |	ТаблицаПараметров.ОбъектРемонта
	               |ПОМЕСТИТЬ ТаблицаПараметровОР
	               |ИЗ
	               |	ТаблицаПараметров КАК ТаблицаПараметров
	               |ГДЕ
	               |	ТаблицаПараметров.ОбъектРемонта = &ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
	               |	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
	               |	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
	               |	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс
	               |ИЗ
	               |	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПараметровОР КАК ТаблицаПараметровОР
	               |		ПО торо_МаксимальныеЗначенияНаработкиОР.Показатель = ТаблицаПараметровОР.Показатель
	               |ГДЕ
	               |	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ТиповойОбъектРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ТиповойОбъектРемонта", ТиповойОР);
	Запрос.УстановитьПараметр("ТаблицаПараметров", СписокПараметровНаработки.Выгрузить());
	
	СтруктураМаксЗначенийПоказателей = Запрос.Выполнить().Выгрузить();
	
	Для каждого ЭлементСтруктуры Из СтруктураМаксЗначенийПоказателей Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Показатель", ЭлементСтруктуры.Показатель);
		МассивПоказателей = ТаблицаМаксимальныхЗначенийНаработки.НайтиСтроки(Отбор);
		Если МассивПоказателей.Количество() > 0 Тогда
			Для каждого Показатель Из МассивПоказателей Цикл
				Показатель.ОбъектРемонта = ОбъектРемонта;
				МодифицированностьМаксимальныхЗначенийНаработки = Истина;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияИзноса(ТекущиеДанные = Неопределено)
	ТекущаяДата = ТекущаяДата();
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НазначенныйРесурс <> 0 Тогда
			МассивДокументов = ПолучитьМассивДокументовНаработки(ОбъектРемонта, ТекущиеДанные.Показатель);
			
			НаработкаАбсолютная  = 0;
			
			Для каждого Строка Из МассивДокументов Цикл
				Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход И Строка.Период <= ТекущаяДата Тогда
					НаработкаАбсолютная = НаработкаАбсолютная + Строка.Наработка;
				КонецЕсли;
			КонецЦикла;
			
			Если НаработкаАбсолютная > ТекущиеДанные.НазначенныйРесурс Тогда 
				ТекущиеДанные.Износ = "0%";
			Иначе 
				ТекущиеДанные.Износ = Формат(((ТекущиеДанные.НазначенныйРесурс - НаработкаАбсолютная) / ТекущиеДанные.НазначенныйРесурс)*100, "ЧДЦ=2; ЧН=0") + "%";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для каждого Строка Из ТаблицаМаксимальныхЗначенийНаработки Цикл
			Если Строка.НазначенныйРесурс <> 0 Тогда
				МассивДокументов = ПолучитьМассивДокументовНаработки(ОбъектРемонта, Строка.Показатель);
				
				НаработкаАбсолютная  = 0;
				
				Для каждого СтрокаНайденная Из МассивДокументов Цикл
					Если СтрокаНайденная.ВидДвижения = ВидДвиженияНакопления.Приход И СтрокаНайденная.Период <= ТекущаяДата Тогда
						НаработкаАбсолютная = НаработкаАбсолютная + СтрокаНайденная.Наработка;
					КонецЕсли;
				КонецЦикла;
				
				Если НаработкаАбсолютная > Строка.НазначенныйРесурс Тогда
					Строка.Износ = "0%";
				Иначе 
					Строка.Износ = Формат(((Строка.НазначенныйРесурс - НаработкаАбсолютная) / Строка.НазначенныйРесурс)*100, "ЧДЦ=2; ЧН=0") + "%";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивДокументовНаработки(Ссылка, Показатель)
	Массив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_НаработкаОбъектовРемонта.Период КАК Период,
			|	торо_НаработкаОбъектовРемонта.Регистратор КАК Регистратор,
			|	торо_НаработкаОбъектовРемонта.Показатель КАК Показатель,
			|	торо_НаработкаОбъектовРемонта.Наработка КАК Наработка,
			|	торо_НаработкаОбъектовРемонта.ДатаНач КАК ДатаНач,
			|	торо_НаработкаОбъектовРемонта.ВидДвижения КАК ВидДвижения,
			|	ВЫБОР
			|		КОГДА торо_НаработкаОбъектовРемонта.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ТОГДА 28
			|		ИНАЧЕ 29
			|	КОНЕЦ КАК Картинка
			|ИЗ
			|	РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
			|ГДЕ
			|	торо_НаработкаОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
			|	И НЕ торо_НаработкаОбъектовРемонта.Регистратор.Организация ЕСТЬ NULL
			|	И торо_НаработкаОбъектовРемонта.Показатель = &Показатель
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
				   
	Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Структура = Новый Структура("Период, Регистратор, Показатель, Наработка, ВидДвижения, Картинка");
			ЗаполнитьЗначенияСвойств(Структура, Выборка);
			Массив.Добавить(Структура);	
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Массив;
КонецФункции

&НаСервереБезКонтекста
Функция ПоказателиИзТиповыхОР(Знач ТиповойОР, МассивПоказателей, ВернутьСоответствие = Ложь)
	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТаблицаРодителей.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	
	НоваяСтрокаТабл = ТаблицаРодителей.Добавить();
	НоваяСтрокаТабл.Родитель = ТиповойОР;
	НоваяСтрокаТабл.Приоритет = 1;
	
	СчетчикЦикла = 2;
	
	Пока ЗначениеЗаполнено(ТиповойОР.Родитель) Цикл
		НоваяСтрокаТабл = ТаблицаРодителей.Добавить();
		НоваяСтрокаТабл.Родитель = ТиповойОР.Родитель;;
		НоваяСтрокаТабл.Приоритет = СчетчикЦикла;
		СчетчикЦикла = СчетчикЦикла + 1;
		ТиповойОР = ТиповойОР.Родитель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	ТаблицаРодителей.Приоритет КАК Приоритет,
					|	ТаблицаРодителей.Родитель КАК Родитель
					|	
					|ПОМЕСТИТЬ ТаблицаРодителей
					|ИЗ
					|	&ТаблицаРодителей КАК ТаблицаРодителей
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
					|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель,
					|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка КАК ПлановаяНаработка,
					|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
					|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
					|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования,
					|	ТаблицаРодителей.Приоритет
					|ПОМЕСТИТЬ ПоказателиГрупп
					|ИЗ
					|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
					|			,
					|			ОбъектРемонта В
					|					(ВЫБРАТЬ
					|						ТаблицаРодителей.Родитель
					|					ИЗ
					|						ТаблицаРодителей КАК ТаблицаРодителей)
					|			И Показатель В (&Показатели)) КАК торо_ПараметрыНаработкиОбъектовРемонта
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРодителей КАК ТаблицаРодителей
					|		ПО торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = ТаблицаРодителей.Родитель
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ПоказателиГрупп.ОбъектРемонта КАК ОбъектРемонта,
					|	ПоказателиГрупп.Показатель КАК Показатель,
					|	ПоказателиГрупп.ПлановаяНаработка КАК ПлановаяНаработка,
					|	ПоказателиГрупп.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
					|	ПоказателиГрупп.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
					|	ПоказателиГрупп.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования
					|ИЗ
					|	ПоказателиГрупп КАК ПоказателиГрупп
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ  (ВЫБРАТЬ
					|									ПоказателиГрупп.Показатель КАК Показатель,
					|									МИНИМУМ(ПоказателиГрупп.Приоритет) КАК Приоритет
					|						    	ИЗ
					|									ПоказателиГрупп КАК ПоказателиГрупп
					|		
					|								СГРУППИРОВАТЬ ПО
					|									ПоказателиГрупп.Показатель) КАК ВложенныйЗапрос
					|		ПО ПоказателиГрупп.Показатель = ВложенныйЗапрос.Показатель
					|			И ПоказателиГрупп.Приоритет = ВложенныйЗапрос.Приоритет";
	
	Запрос.УстановитьПараметр("Показатели", МассивПоказателей);
	Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВернутьСоответствие Тогда
	    ПоказателиСЗначениями = Новый Соответствие;
	Иначе
	    ПоказателиСЗначениями = Новый Массив;
	КонецЕсли;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПараметра = Новый Структура("ОбъектРемонта, Показатель, ПлановаяНаработка, ПериодПлановойНаработки, ПродолжительностьПериодаПлановойНаработки, КоэффициентИспользованияОборудования");
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, ВыборкаДетальныеЗаписи);
		Если ВернутьСоответствие Тогда
		    ПоказателиСЗначениями.Вставить(ВыборкаДетальныеЗаписи.Показатель, СтруктураПараметра);
		Иначе
		    ПоказателиСЗначениями.Добавить(СтруктураПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиСЗначениями;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоказатели(ЗаполнитьТекущийПоказатель = Ложь, ЗаполнитьВыбранныеПоказатели = Ложь)
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	МассивПоказателей = Новый Массив();
	МассивСтрокПоказателей = Новый Массив();
	ЕстьЗаполненныеПоля = Ложь;
	
	Если ЗаполнитьТекущийПоказатель И Не ТекущиеДанные = Неопределено Тогда
	    МассивПоказателей.Добавить(ТекущиеДанные.Показатель);
		ЕстьЗаполненныеПоля = ЗначениеЗаполнено(ТекущиеДанные.ПлановаяНаработка)
								Или ЗначениеЗаполнено(ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки)
								Или ЗначениеЗаполнено(ТекущиеДанные.ПериодПлановойНаработки)
								Или ЗначениеЗаполнено(ТекущиеДанные.КоэффициентИспользованияОборудования);
	ИначеЕсли ЗаполнитьВыбранныеПоказатели Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.СписокПараметровНаработки.ВыделенныеСтроки Цикл
			Показатель = СписокПараметровНаработки.НайтиПоИдентификатору(ВыделеннаяСтрока);
			МассивПоказателей.Добавить(Показатель.Показатель);
			МассивСтрокПоказателей.Добавить(Показатель);
			ЕстьЗаполненныеПоля = ЗначениеЗаполнено(Показатель.ПлановаяНаработка)
									Или ЗначениеЗаполнено(Показатель.ПродолжительностьПериодаПлановойНаработки)
									Или ЗначениеЗаполнено(Показатель.ПериодПлановойНаработки)
									Или ЗначениеЗаполнено(Показатель.КоэффициентИспользованияОборудования);
		КонецЦикла;
	Иначе
		Для каждого СтрокаПоказателя Из СписокПараметровНаработки Цикл
			МассивПоказателей.Добавить(СтрокаПоказателя.Показатель);
			ЕстьЗаполненныеПоля = ЗначениеЗаполнено(СтрокаПоказателя.ПлановаяНаработка)
									Или ЗначениеЗаполнено(СтрокаПоказателя.ПродолжительностьПериодаПлановойНаработки)
									Или ЗначениеЗаполнено(СтрокаПоказателя.ПериодПлановойНаработки)
									Или ЗначениеЗаполнено(СтрокаПоказателя.КоэффициентИспользованияОборудования);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивПоказателей.Количество() = 0 Тогда
	    ТекстСообщения = НСтр("ru = 'Выберите показатель!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивПоказателейСЗначениями = ПоказателиИзТиповыхОР(ТиповойОР, МассивПоказателей);
	Если МассивПоказателейСЗначениями.Количество() = 0 Тогда
	    ШаблонСообщения = НСтр("ru = 'Не выбран ни один показатель из типового ОР %1!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТиповойОР);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметр = Новый Структура;
	СтруктураПараметр.Вставить("ТекущиеДанные", ?(ЗаполнитьТекущийПоказатель, ТекущиеДанные, Неопределено));
	СтруктураПараметр.Вставить("МассивПоказателей", МассивПоказателей);
	СтруктураПараметр.Вставить("МассивСтрокПоказателей", МассивСтрокПоказателей);
	СтруктураПараметр.Вставить("ПоказателиСЗначениями", МассивПоказателейСЗначениями);
	Если ЕстьЗаполненныеПоля Тогда
		ТекстВопроса = НСтр("ru = 'У некоторых показателей заполнены поля. Перезаполнить их?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоказателиЗавершение", ЭтотОбъект, СтруктураПараметр);
	    ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
	    ЗаполнитьПоказателиЗавершение(КодВозвратаДиалога.Да, СтруктураПараметр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	МассивПоказателей = ДополнительныеПараметры.МассивПоказателей;
	МассивСтрокПоказателей = ДополнительныеПараметры.МассивСтрокПоказателей;
	ПоказателиСЗначениями = ДополнительныеПараметры.ПоказателиСЗначениями;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ЗаполнитьПоказатель(ТекущиеДанные, ПоказателиСЗначениями[0], РезультатВопроса);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ПоказателиСЗначениями) = Тип("Соответствие") Тогда
	    Для каждого СтрокаТЧ Из МассивСтрокПоказателей Цикл
		    НайденныйПоказатель = ПоказателиСЗначениями.Получить(СтрокаТЧ.Показатель);
			Если Не ЗначениеЗаполнено(НайденныйПоказатель) Тогда
			    Продолжить;
			КонецЕсли;
			
			ЗаполнитьПоказатель(СтрокаТЧ, НайденныйПоказатель, РезультатВопроса);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПоказателиСЗначениями) = Тип("Массив") Тогда
	    Для каждого Показатель Из ПоказателиСЗначениями Цикл
			СтруктураПоиска = Новый Структура("Показатель", Показатель.Показатель);
			НайденныеПоказатели = СписокПараметровНаработки.НайтиСтроки(СтруктураПоиска);
			
			Для каждого НайденныйПоказатель Из НайденныеПоказатели Цикл
				ЗаполнитьПоказатель(НайденныйПоказатель, Показатель, РезультатВопроса);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатель(СтрокаПоказателя, НайденныйПоказатель, РезультатВопроса)
	ИсключаемыеСвойства = "";
	ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(СтрокаПоказателя.ПлановаяНаработка) И РезультатВопроса = КодВозвратаДиалога.Нет, "ПлановаяНаработка,", "");
	ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(СтрокаПоказателя.ПродолжительностьПериодаПлановойНаработки) И РезультатВопроса = КодВозвратаДиалога.Нет, "ПродолжительностьПериодаПлановойНаработки,", "");
	ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(СтрокаПоказателя.ПериодПлановойНаработки) И РезультатВопроса = КодВозвратаДиалога.Нет, "ПериодПлановойНаработки,", "");
	ИсключаемыеСвойства = ИсключаемыеСвойства + ?(ЗначениеЗаполнено(СтрокаПоказателя.КоэффициентИспользованияОборудования) И РезультатВопроса = КодВозвратаДиалога.Нет, "КоэффициентИспользованияОборудования,", "");
	
	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
	    ИсключаемыеСвойства = Лев(ИсключаемыеСвойства, СтрДлина(ИсключаемыеСвойства) - 1);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПоказателя, НайденныйПоказатель,, ИсключаемыеСвойства);
	СтрокаПоказателя.ОбъектРемонта = ОбъектРемонта;
	МодифицированностьПараметровНаработки = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеМаксимальногоЗначенияНаработкиТипового(Показатель, Типовой)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
	               |	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
	               |	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
	               |	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс
	               |ИЗ
	               |	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	               |ГДЕ
	               |	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ТиповойОР
	               |	И торо_МаксимальныеЗначенияНаработкиОР.Показатель = &Показатель";
						
	Запрос.УстановитьПараметр("ТиповойОР", Типовой);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураДляВозврата = Новый Структура("ОбъектРемонта, Показатель, МаксимальноеЗначение, НазначенныйРесурс, Удален");
		ЗаполнитьЗначенияСвойств(СтруктураДляВозврата, Выборка);
		СтруктураДляВозврата.Удален = Ложь;
		
		Возврат СтруктураДляВозврата;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ОтборыВДеревеИВСписке

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОРПоПоказателям()
	ОтменитьПоискВСпискеОРПоПоказателям();
	Если ТипПоискаПоказателей = "КонтролируемыеПоказателиНеУказаны" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЕстьИзмеряемыеПоказатели", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ИначеЕсли ТипПоискаПоказателей = "ПоказателиНаработкиНеВведены"	Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЕстьПараметрыНаработки", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ТипПоискаПоказателей, Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;	
	Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоискВСпискеОРПоПоказателям()
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить(Новый ПолеКомпоновкиДанных("ЕстьПараметрыНаработки"));
	СписокПолей.Добавить(Новый ПолеКомпоновкиДанных("ЕстьИзмеряемыеПоказатели"));
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если СписокПолей.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(ЗначениеПоиска);
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОРПоНаименованию(Текст)
	ОтменитьПоискВСпискеОРПоНаименованию();
	
	Если ТипПоиска = "ПаспХарактеристика" Тогда
		Поле = "Ссылка";
		ПравоеЗначение = ПолучитьСписокОРПоХарактеристике(Текст);
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		Поле = ТипПоиска;
		ПравоеЗначение = Текст;
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, Поле, ПравоеЗначение, ВидСравненияОтбора,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(Текст) И Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" И
									Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели";
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	Иначе
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоискВСпискеОРПоНаименованию()
	СписокПолей = Новый СписокЗначений;
	Для каждого Элемент Из Элементы.ТипПоиска.СписокВыбора Цикл
		СписокПолей.Добавить(Новый ПолеКомпоновкиДанных(Элемент.Значение));
	КонецЦикла;
	СписокПолей.Добавить(Новый ПолеКомпоновкиДанных("Ссылка"));
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если СписокПолей.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(ЗначениеПоиска) И Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" И
									Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели";
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОР(ИмяЭлемента)
	Если Не ЗначениеЗаполнено(ЭтотОбъект[ИмяЭлемента]) Тогда
	    ОтменитьПоискВСпискеОР(ИмяЭлемента);
		СтруктураПараметров = Новый Структура;
		Если ЗначениеЗаполнено(ТипПоискаОрганизация) Или ЗначениеЗаполнено(ТипПоискаПодразделение)
			Или ЗначениеЗаполнено(ТипПоискаНаправление) Или ЗначениеЗаполнено(ТипПоискаТиповойОР) Тогда
			СтруктураПараметров.Вставить("ЭтоДерево", Ложь);
		Иначе
        	СтруктураПараметров.Вставить("ЭтоДерево", Истина);
		КонецЕсли;
		ПриАктивизацииСтроки(Неопределено, СтруктураПараметров);
		Возврат;
	КонецЕсли; 
	
	Если ИмяЭлемента = "ТипПоискаОрганизация" Тогда
		Поле = "Организация";
	ИначеЕсли ИмяЭлемента = "ТипПоискаПодразделение" Тогда
		Поле = "Подразделение";
	ИначеЕсли ИмяЭлемента = "ТипПоискаНаправление" Тогда
		Поле = "Направление";
	ИначеЕсли ИмяЭлемента = "ТипПоискаТиповойОР" Тогда
		Поле = "ТиповойОР";
	ИначеЕсли ИмяЭлемента = "ТипПоискаКритичность" Тогда
		Поле = "Приоритет";
	КонецЕсли;

	ОтборУстановлен = Ложь;
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора.ПравоеЗначение = ЭтотОбъект[ИмяЭлемента];
			ОтборУстановлен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОтборУстановлен Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, Поле, ЭтотОбъект[ИмяЭлемента], ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" И
									Не ЗначениеЗаполнено(ЗначениеПоиска) И Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели" И
									Не ЗначениеЗаполнено(ТипПоискаКритичность);
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
		СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("ЭтоДерево", Истина);
		ПриАктивизацииСтроки(Неопределено, СтруктураПараметров);
	Иначе
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
		СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("ЭтоДерево", Ложь);
		ПриАктивизацииСтроки(Неопределено, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте                                                  
Процедура ОтменитьПоискВСпискеОР(ИмяЭлемента)
	Если ИмяЭлемента = "ТипПоискаОрганизация" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Организация");
	ИначеЕсли ИмяЭлемента = "ТипПоискаПодразделение" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Подразделение");
	ИначеЕсли ИмяЭлемента = "ТипПоискаНаправление" Тогда	
	    Поле = Новый ПолеКомпоновкиДанных("Направление");
	ИначеЕсли ИмяЭлемента = "ТипПоискаТиповойОР" Тогда	
	    Поле = Новый ПолеКомпоновкиДанных("ТиповойОР");
	ИначеЕсли ИмяЭлемента = "ТипПоискаКритичность" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Приоритет");
	КонецЕсли;

	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ЭлементДляУдаления = ЭлементОтбора;
			Список.Отбор.Элементы.Удалить(ЭлементДляУдаления);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" И
									Не ЗначениеЗаполнено(ЗначениеПоиска) И Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели" И
									Не ТипПоискаПоказателей = "КонтролируемыеПоказателиНеУказаны" И Не ТипПоискаПоказателей = "ПоказателиНаработкиНеВведены" И 
									Не ЗначениеЗаполнено(ТипПоискаКритичность);
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Общее

&НаКлиенте
Процедура ПередЗакрытиемОбработчикОповещения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьНаСервере(ОбъектРемонта);
		Закрыть();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИерархииНаСервере()
	торо_РаботаСИерархией20.ЗаполнитьПараметрыИерархии(ЭтаФорма);
	СтруктураПараметровИерархии.КонечныеЭлементыВДереве = Истина;
	ПустойРодитель = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(СтруктураПараметровИерархии);
	торо_РаботаСИерархией20.УстановитьЗапросВСпискеПоИерархии(Список, СтруктураПараметровИерархии, ПустойРодитель);
	торо_РаботаСИерархией20КлиентСервер.УстановитьОтборСпискаПоРодителю(Список, ПустойРодитель, Ложь);
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(Дерево, СтруктураПараметровИерархии, ПустойРодитель);
	
	ДеревоПередРазворачиваниемНаСервере(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Ложь);
	
	ДополнитьЗапросДинамическогоСпискаПоказателями(Список);

	Поле = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, Поле, Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
КонецПроцедуры

// Оповещение о закрытии, вызывается при выполнении команды "Настройка иерархии".
&НаКлиенте
Процедура НастройкаИерархииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекСтруктураИерархии = ВыбранноеЗначение;
		ОбработатьИзменениеИерархииНаСервере();
		торо_РаботаСИерархией20Клиент.ОбработатьИзменениеИерархииНаКлиенте(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДеревоПередРазворачиваниемНаСервере(Строка, СвязиОбновлялись)
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере(Строка);
	КонецЕсли;
	Если СвязиОбновлялись Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьНаличиеПоказателейВДереве(Строка);	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьКартинкиЭлементовДереваНаСервере(ИдентификаторСтроки = 0)
	торо_РаботаСИерархией20.ОбновитьКартинкиЭлементовДереваНаСервере(Дерево, ИдентификаторСтроки);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаличиеПоказателейВДереве(Строка)
	
	Если Не ПравоЧтенияИзмеряемыхПоказателей И Не ПравоЧтенияПараметровНаработки Тогда
	    Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	
	ОбъектыРемонтаУзла = Новый ТаблицаЗначений;
	ОбъектыРемонтаУзла.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов(МассивТипов));
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(Строка);
	Для каждого СтрокаОР Из СтрокаДерева.ПолучитьЭлементы() Цикл
		НС = ОбъектыРемонтаУзла.Добавить();
		НС.ОбъектРемонта = СтрокаОР.ОбъектРемонта;
	КонецЦикла;
	
	ЗапросОРСПоказателями = Новый Запрос;
	ЗапросОРСПоказателями.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОР.ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ ОбъектыРемонтаУзла
	|ИЗ
	|	&ТаблицаОР КАК ТаблицаОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыРемонтаУзла.ОбъектРемонта КАК ОбъектРемонта,
	|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьИзмеряемыеПоказатели, ЛОЖЬ) КАК КонтролируемыеПоказателиВведены,
	|	ЕСТЬNULL(торо_НаличиеНормативовОбъектовРемонта.ЕстьПараметрыНаработки, ЛОЖЬ) КАК ПоказателиНаработкиВведены
	|ИЗ
	|	ОбъектыРемонтаУзла КАК ОбъектыРемонтаУзла
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НаличиеНормативовОбъектовРемонта КАК торо_НаличиеНормативовОбъектовРемонта
	|		ПО ОбъектыРемонтаУзла.ОбъектРемонта = торо_НаличиеНормативовОбъектовРемонта.ОбъектРемонта";
	
	ЗапросОРСПоказателями.УстановитьПараметр("ТаблицаОР", ОбъектыРемонтаУзла);
	
	ТЗОРСПоказателями = ЗапросОРСПоказателями.Выполнить().Выгрузить();
	ТЗОРСПоказателями.Индексы.Добавить("ОбъектРемонта");
	
	Для каждого СтрокаОР Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если Не СтрокаОР.ЭтоГруппа Тогда
			СтруктураПоиска = Новый Структура("ОбъектРемонта", СтрокаОР.ОбъектРемонта);
			НайденныеСтроки = ТЗОРСПоказателями.НайтиСтроки(СтруктураПоиска);
			Если Не НайденныеСтроки.Количество() = 0 Тогда
				Если ПравоЧтенияИзмеряемыхПоказателей Тогда
					СтрокаОР.КонтролируемыеПоказателиВведены = НайденныеСтроки[0].КонтролируемыеПоказателиВведены;
				КонецЕсли;
				Если ПравоЧтенияПараметровНаработки Тогда
					СтрокаОР.ПоказателиНаработкиВведены		 = НайденныеСтроки[0].ПоказателиНаработкиВведены;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
 
&НаСервере
Процедура ДополнитьЗапросДинамическогоСпискаПоказателями(Список)
	
	СтрокаДополнительныхПолейВыборки = " НЕОПРЕДЕЛЕНО КАК СтатусВУчете";
	
	Если ЗначениеЗаполнено(СтрокаДополнительныхПолейВыборки) Тогда
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "НЕОПРЕДЕЛЕНО КАК СтатусВУчете", СтрокаДополнительныхПолейВыборки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные)
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийОР = ТекущиеДанные.Ссылка;
		СтруктураВозврата = ЗаполнитьДанныеОРНаСервере(ТекущийОР);
		
		Подразделение    = СтруктураВозврата.Подразделение;
		Наименование 	 = СтруктураВозврата.Наименование;
		ИнвентарныйНомер = СтруктураВозврата.ИнвентарныйНомер;
		ЗаводскойНомер 	 = СтруктураВозврата.ЗаводскойНомер;
		ТехНомер 		 = СтруктураВозврата.ТехНомер;
		Контрагент 		 = СтруктураВозврата.Контрагент;
		ОбъектРемонта 	 = СтруктураВозврата.Ссылка;
		ТиповойОР        = СтруктураВозврата.ТиповойОР;
		Направление      = СтруктураВозврата.Направление;
		Приоритет		 = СтруктураВозврата.Приоритет;
		СостояниеОР      = СтруктураВозврата.СостояниеОР;
		ПричинаПростоя	 = СтруктураВозврата.ПричинаПростоя;
		
		ЗаполнитьЗначенияСвойств(СтруктураНеОсновныхРеквизитовОР, СтруктураВозврата);
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеОРНаСервере(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
	               |	торо_ОбъектыРемонта.Наименование КАК Наименование,
	               |	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
	               |	торо_ОбъектыРемонта.Направление КАК Направление,
	               |	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
	               |	торо_ОбъектыРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
	               |	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
	               |	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
	               |	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
	               |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	               |	торо_ОбъектыРемонта.ДатаВыпуска КАК ДатаВыпуска
	               |ПОМЕСТИТЬ ВТ_ДанныеСправочника
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации КАК ВидЭксплуатации,
	               |	торо_ТекущееСостояниеОРСрезПоследних.ПричинаПростоя КАК ПричинаПростоя
	               |ПОМЕСТИТЬ ВТ_ТекущееСостояние
	               |ИЗ
	               |	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &Ссылка) КАК торо_ТекущееСостояниеОРСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеСправочника.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	ВТ_ДанныеСправочника.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	ВТ_ДанныеСправочника.ТехНомер КАК ТехНомер,
	               |	ВТ_ДанныеСправочника.Наименование КАК Наименование,
	               |	ВТ_ДанныеСправочника.Подразделение КАК Подразделение,
	               |	ВТ_ДанныеСправочника.Направление КАК Направление,
	               |	ВТ_ДанныеСправочника.ЭтоГруппа КАК ЭтоГруппа,
	               |	ВТ_ДанныеСправочника.ВнешнийОбъект КАК ВнешнийОбъект,
	               |	ВТ_ДанныеСправочника.Контрагент КАК Контрагент,
	               |	ВТ_ДанныеСправочника.ТиповойОР КАК ТиповойОР,
	               |	ВТ_ДанныеСправочника.Приоритет КАК Приоритет,
	               |	ВТ_ДанныеСправочника.Ссылка КАК Ссылка,
	               |	ВТ_ДанныеСправочника.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	               |	ВТ_ДанныеСправочника.ДатаВыпуска КАК ДатаВыпуска,
	               |	ВТ_ТекущееСостояние.ВидЭксплуатации КАК СостояниеОР,
	               |	ВТ_ТекущееСостояние.ПричинаПростоя КАК ПричинаПростоя
	               |ИЗ
	               |	ВТ_ДанныеСправочника КАК ВТ_ДанныеСправочника
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущееСостояние КАК ВТ_ТекущееСостояние
	               |		ПО ВТ_ДанныеСправочника.Ссылка = ВТ_ТекущееСостояние.ОбъектРемонта";
			 
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	СтруктураВозврата = Новый Структура("ИнвентарныйНомер, ЗаводскойНомер, ТехНомер, АдресМестонахождения, Наименование,
									  	|Подразделение, ПодразделениеИсполнитель, Направление, ЭтоГруппа, ВнешнийОбъект,
									  	|Контрагент, Ссылка, ТиповойОР, Приоритет,
										|ДатаВводаВЭксплуатацию, ДатаВыпуска, СостояниеОР, ПричинаПростоя");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	Возврат СтруктураВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОРПоХарактеристике(ТекстЗначения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонтаДополнительныеРеквизиты.Значение) КАК Значение,
		|	торо_ОбъектыРемонтаДополнительныеРеквизиты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта.ДополнительныеРеквизиты КАК торо_ОбъектыРемонтаДополнительныеРеквизиты";
	
	ТЗ_ОбъектыРемонта = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ_ОбъектыРемонта.Значение КАК Значение,
	               |	ТЗ_ОбъектыРемонта.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ТаблицаОР
	               |ИЗ
	               |	&ТЗ_ОбъектыРемонта КАК ТЗ_ОбъектыРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаОР.Значение КАК Значение,
	               |	ВТ_ТаблицаОР.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТ_ТаблицаОР КАК ВТ_ТаблицаОР
	               |ГДЕ
	               |	ВТ_ТаблицаОР.Значение ПОДОБНО &ТекстЗначения";
	
	Запрос.УстановитьПараметр("ТЗ_ОбъектыРемонта",ТЗ_ОбъектыРемонта);
	Запрос.УстановитьПараметр("ТекстЗначения", "%" + ТекстЗначения + "%");
	
	СписокОР = Новый СписокЗначений;
	СписокОР.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокОР;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборНеИспользуемыхСтрок(ПоказыватьУдаленные, ИмяТаблицаФормы)
	Если ПоказыватьУдаленные Тогда
		Элементы[ИмяТаблицаФормы].ОтборСтрок = Неопределено;
	Иначе
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Удален", Ложь);
		Элементы[ИмяТаблицаФормы].ОтборСтрок = ПараметрыОтбора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОсновныеТаблицы()
	Если ПравоЧтенияПараметровНаработки Тогда
		СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработки(ОбъектРемонта, ТиповойОР);
		СписокПараметровНаработки.Очистить();
		
		Для каждого Элем Из СтруктураВозврата Цикл
			НС = СписокПараметровНаработки.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
	КонецЕсли;
	
	Если ПравоЧтенияМаксимальныхЗначенийНаработки Тогда
		СтруктураВозврата = ОбновитьМаксимальныеЗначенияПоказателейНаработки(ОбъектРемонта, ТиповойОР);
		ТаблицаМаксимальныхЗначенийНаработки.Очистить();
		Для каждого ЭлементМассива Из СтруктураВозврата Цикл
			НС = ТаблицаМаксимальныхЗначенийНаработки.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ЭлементМассива);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьЗначенияИзноса();
	
	Если ПравоЧтенияИзмеряемыхПоказателей Тогда
		МассивСтруктураКонтролируемыхПоказателей = ОбновитьИзмеряемыеПоказатели(ОбъектРемонта, ТиповойОР);
		СписокИзмеряемыхПоказателей.Очистить();
		Для каждого ЭлементМассива Из МассивСтруктураКонтролируемыхПоказателей Цикл
			НС = СписокИзмеряемыхПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ЭлементМассива);
		КонецЦикла;
	
		// Ремонты_по_состоянию++
		Если ПравоЧтенияПараметровОповещенияПоСостояниямОР Тогда
			МассивСтруктурПараметровОповещения = ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(ОбъектРемонта, ТиповойОР);
			ПараметрыОповещенияПоСостояниямОР.Очистить();
			Для каждого ЭлементМассива Из МассивСтруктурПараметровОповещения Цикл
				ЗаполнитьЗначенияСвойств(ПараметрыОповещенияПоСостояниямОР.Добавить(), ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
		// Ремонты_по_состоянию--
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере(ОбъектРемонтаДляЗаписи = Неопределено)
	Если Не ЗначениеЗаполнено(ОбъектРемонтаДляЗаписи) Тогда
	    ОбъектРемонтаДляЗаписи = ОбъектРемонта;
	КонецЕсли;
	
	Если МодифицированностьПараметровНаработки Тогда
		Для каждого Строка Из СписокПараметровНаработки Цикл
			Если Не ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ОбъектРемонтаДляЗаписи;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ТаблицаЗначенийПараметровНаработки = СписокПараметровНаработки.Выгрузить();
			СтруктураПоиска = Новый Структура("ОбъектРемонта", ОбъектРемонтаДляЗаписи);
			МассивСтрокПараметров = ТаблицаЗначенийПараметровНаработки.НайтиСтроки(СтруктураПоиска);
			ТаблицаБуфер = ТаблицаЗначенийПараметровНаработки.Скопировать(МассивСтрокПараметров);
			
			НаборПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборПараметровНаработки.Отбор.ОбъектРемонта.Установить(ОбъектРемонтаДляЗаписи);
			НаборПараметровНаработки.Загрузить(ТаблицаБуфер);
			НаборПараметровНаработки.Записать();
			
			МодифицированностьПараметровНаработки = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать параметры наработки: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если МодифицированностьМаксимальныхЗначенийНаработки Тогда
		Для каждого Строка Из ТаблицаМаксимальныхЗначенийНаработки Цикл
			Если Не ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ОбъектРемонтаДляЗаписи;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ТаблицаМаксимальныхЗначений = ТаблицаМаксимальныхЗначенийНаработки.Выгрузить();
			
			// Удалить строки, которые могут быть получены из параметров Типовго ОР и не прописаны для текущего ОР.
			ПараметрыОтбора = Новый Структура("ОбъектРемонта", ОбъектРемонтаДляЗаписи);
			ВременнаяТЗ = ТаблицаМаксимальныхЗначений.Скопировать(ПараметрыОтбора);
			ТаблицаМаксимальныхЗначений.Очистить();
			ТаблицаМаксимальныхЗначений = ВременнаяТЗ.Скопировать();
			
			НаборКонтролируемыхПоказателей = РегистрыСведений.торо_МаксимальныеЗначенияНаработкиОР.СоздатьНаборЗаписей();
			НаборКонтролируемыхПоказателей.Отбор.ОбъектРемонта.Установить(ОбъектРемонтаДляЗаписи);
			НаборКонтролируемыхПоказателей.Загрузить(ТаблицаМаксимальныхЗначений);
			НаборКонтролируемыхПоказателей.Записать();
			
			МодифицированностьМаксимальныхЗначенийНаработки = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать максимальные значения наработки: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Если МодифицированностьИзмеряемыхПоказателей Тогда
		Для каждого Строка Из СписокИзмеряемыхПоказателей Цикл
			Если Не ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ОбъектРемонтаДляЗаписи;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			СтруктураПоиска = Новый Структура("ОбъектРемонта", ОбъектРемонтаДляЗаписи);
			ЗаписиОР = СписокИзмеряемыхПоказателей.НайтиСтроки(СтруктураПоиска);
			
			НаборКонтролируемыхПоказателей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборКонтролируемыхПоказателей.Отбор.ОбъектРемонта.Установить(ОбъектРемонтаДляЗаписи);
			
			Для Каждого СтрокаПоказателя Из ЗаписиОР Цикл
				Если СтрокаПоказателя.ИзТиповогоОР
					И Не СтрокаПоказателя.ЗначенияКонтролируемыхПоказателейИзОР
					И Не СтрокаПоказателя.Удален Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НаборКонтролируемыхПоказателей.Добавить(), СтрокаПоказателя);
			КонецЦикла;
			
			НаборКонтролируемыхПоказателей.Записать(Истина);
			
			МодифицированностьИзмеряемыхПоказателей = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать контролируемые показатели: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если МодифицированностьПараметровОповещенияОСостоянииОР Тогда
		Для каждого Строка Из ПараметрыОповещенияПоСостояниямОР Цикл
			Если Не ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ОбъектРемонтаДляЗаписи;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			СтруктураПоиска = Новый Структура("ТиповойОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());
			ТаблицаПараметровОповещения = ПараметрыОповещенияПоСостояниямОР.Выгрузить(СтруктураПоиска);
			
			НаборПараметровОповещения = РегистрыСведений.торо_ПараметрыОповещенияОСостоянииОборудования.СоздатьНаборЗаписей();
			НаборПараметровОповещения.Отбор.ОбъектРемонта.Установить(ОбъектРемонтаДляЗаписи);
			НаборПараметровОповещения.Загрузить(ТаблицаПараметровОповещения);
			НаборПараметровОповещения.Записать();
			
			МодифицированностьПараметровОповещенияОСостоянииОР = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать параметры оповещения о состоянии оборудования: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтроки(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьНаСервере(ПредыдущийАктивизированныйОР);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена И ЗначениеЗаполнено(ПредыдущийАктивизированныйОР) Тогда
		торо_РаботаСИерархией20Клиент.ВыделитьОРВДереве(ЭтаФорма, ПредыдущийАктивизированныйОР);
		Элементы.Список.ТекущаяСтрока = ПредыдущаяАктивизированнаяСтрокаДС;
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	МодифицированностьИзмеряемыхПоказателей = Ложь;
	МодифицированностьМаксимальныхЗначенийНаработки = Ложь;
	МодифицированностьПараметровНаработки = Ложь;
	МодифицированностьПараметровОповещенияОСостоянииОР = Ложь;
	
	ЗаполнитьОсновныеДанные();
	ПредыдущийАктивизированныйОР = ОбъектРемонта;
	ПредыдущаяАктивизированнаяСтрокаДС = Элементы.Список.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Если ДополнительныеПараметры.ЭтоДерево Тогда
			УстановкаДоступности(Элементы.Дерево.ТекущиеДанные);
		ИначеЕсли Не ДополнительныеПараметры.ЭтоДерево Тогда
			УстановкаДоступности(Элементы.Список.ТекущиеДанные);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновныеДанные()
	Если Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево Тогда
		ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные);
	ОбновитьОсновныеТаблицы();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПраваДоступа()
	ПравоЧтенияИзмеряемыхПоказателей = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта)
										И ПравоДоступа("Чтение", Метаданные.ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта);
	ПравоЧтенияПараметровОповещенияПоСостояниямОР = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.торо_ПараметрыОповещенияОСостоянииОборудования);
	ПравоЧтенияПараметровНаработки = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта);
	ПравоЧтенияМаксимальныхЗначенийНаработки = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.торо_МаксимальныеЗначенияНаработкиОР);
	
	ПравоРедактированияИзмеряемыхПоказателей = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта);
	ПравоРедактированияПараметровОповещенияПоСостояниямОР = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.торо_ПараметрыОповещенияОСостоянииОборудования);
	ПравоРедактированияПараметровНаработки = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта);
	ПравоРедактированияМаксимальныхЗначенийНаработки = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.торо_МаксимальныеЗначенияНаработкиОР);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВнешнийВидФормы()
	СтруктураВозврата = ПолучитьФОПоказателей();
	ФОИспользоватьУчетКонтролируемыхПоказателей = СтруктураВозврата.ФОИспользоватьУчетКонтролируемыхПоказателей;
	ФОИспользоватьУчетНаработки = СтруктураВозврата.ФОИспользоватьУчетНаработки;
	
	Если Не ФОИспользоватьУчетКонтролируемыхПоказателей И Не ФОИспользоватьУчетНаработки Тогда
	    Элементы.ТипПоискаПоказателей.Видимость = Ложь;
	Иначе
		Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("Все", "Все");
	КонецЕсли;
	
	Если ФОИспользоватьУчетКонтролируемыхПоказателей Тогда
	    Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("ЕстьИзмеряемыеПоказатели", "Контролируемые показатели");
		Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("КонтролируемыеПоказателиНеУказаны", "Контролируемые показатели не указаны");
	Иначе
		Элементы.ДеревоКонтролируемыеПоказателиВведены.Видимость = Ложь;
		Элементы.СписокКонтролируемыеПоказателиВведены.Видимость = Ложь;
		Элементы.Показатели.Видимость = Ложь;
	КонецЕсли;
	
	Если ФОИспользоватьУчетНаработки Тогда
	    Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("ЕстьПараметрыНаработки", "Показатели наработки");
		Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("ПоказателиНаработкиНеВведены", "Показатели наработки не введены");
	Иначе
		Элементы.ДеревоПоказателиНаработкиВведены.Видимость = Ложь;
		Элементы.СписокПоказателиНаработкиВведены.Видимость = Ложь;
		Элементы.Наработка.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоЧтенияИзмеряемыхПоказателей Тогда
	    Элементы.ДеревоКонтролируемыеПоказателиВведены.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоЧтенияПараметровНаработки Тогда
	    Элементы.ДеревоПоказателиНаработкиВведены.Видимость = Ложь;
	КонецЕсли;
	
	// Измеряемые показатели
	Элементы.СписокИзмеряемыхПоказателей.Видимость = ПравоЧтенияИзмеряемыхПоказателей;
	Элементы.СписокИзмеряемыхПоказателей.ТолькоПросмотр = Не ПравоРедактированияИзмеряемыхПоказателей;
	
	Элементы.СписокИзмеряемыхПоказателейДобавить.Видимость = ПравоРедактированияИзмеряемыхПоказателей;
	Элементы.СписокИзмеряемыхПоказателейУдалить.Видимость = ПравоРедактированияИзмеряемыхПоказателей;
	Элементы.СписокИзмеряемыхПоказателейПодборКонтролируемыхПоказателей.Видимость = ПравоРедактированияИзмеряемыхПоказателей;
	Элементы.СписокИзмеряемыхПоказателейЗакончитьРедактирование.Видимость = ПравоРедактированияИзмеряемыхПоказателей;
	
	// Параметры оповещения по состояниям ОР
	Элементы.ПараметрыОповещенияПоСостояниямОР.Видимость = ПравоЧтенияИзмеряемыхПоказателей И ПравоЧтенияПараметровОповещенияПоСостояниямОР;
	Элементы.ПараметрыОповещенияПоСостояниямОР.ТолькоПросмотр = Не ПравоРедактированияПараметровОповещенияПоСостояниямОР;
	
	Элементы.ПараметрыОповещенияПоСостояниямОРДобавить.Видимость = ПравоРедактированияПараметровОповещенияПоСостояниямОР;
	Элементы.ПараметрыОповещенияПоСостояниямОРСкопировать.Видимость = ПравоРедактированияПараметровОповещенияПоСостояниямОР;
	Элементы.ПараметрыОповещенияПоСостояниямОРИзменить.Видимость = ПравоРедактированияПараметровОповещенияПоСостояниямОР;
	Элементы.ПараметрыОповещенияПоСостояниямОРЗакончитьРедактирование.Видимость = ПравоРедактированияПараметровОповещенияПоСостояниямОР;
	Элементы.ПараметрыОповещенияПоСостояниямОРУдалить.Видимость = ПравоРедактированияПараметровОповещенияПоСостояниямОР;
	Элементы.ПараметрыОповещенияПоСостояниямОРПереместитьВверх.Видимость = ПравоРедактированияПараметровОповещенияПоСостояниямОР;
	Элементы.ПараметрыОповещенияПоСостояниямОРПереместитьВниз.Видимость = ПравоРедактированияПараметровОповещенияПоСостояниямОР;
	
	// Парамметры наработки
	Элементы.СписокПараметровНаработки.Видимость = ПравоЧтенияПараметровНаработки;
	Элементы.СписокПараметровНаработки.ТолькоПросмотр = Не ПравоРедактированияПараметровНаработки;
	
	Элементы.СписокПараметровНаработкиДобавить.Видимость = ПравоРедактированияПараметровНаработки;
	Элементы.СписокПараметровНаработкиСкопировать.Видимость = ПравоРедактированияПараметровНаработки;
	Элементы.СписокПараметровНаработкиИзменить.Видимость = ПравоРедактированияПараметровНаработки;
	Элементы.СписокПараметровНаработкиУдалить.Видимость = ПравоРедактированияПараметровНаработки;
	Элементы.СписокПараметровНаработкиЗакончитьРедактирование.Видимость = ПравоРедактированияПараметровНаработки;
	Элементы.СписокПараметровНаработкиПереместитьВниз.Видимость = ПравоРедактированияПараметровНаработки;
	Элементы.СписокПараметровНаработкиПереместитьВверх.Видимость = ПравоРедактированияПараметровНаработки;
	Элементы.ГруппаСписокПараметровНаработкиГруппаЗаполнитьПоказатели.Видимость = ПравоРедактированияПараметровНаработки;
	
	// Максимальные значения
	Элементы.ТаблицаМаксимальныхЗначенийНаработки.Видимость = ПравоЧтенияПараметровНаработки И ПравоЧтенияМаксимальныхЗначенийНаработки;
	Элементы.ТаблицаМаксимальныхЗначенийНаработки.ТолькоПросмотр = Не ПравоРедактированияМаксимальныхЗначенийНаработки;
	
	Элементы.ТаблицаМаксимальныхЗначенийНаработкиДобавить.Видимость = ПравоРедактированияМаксимальныхЗначенийНаработки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФОПоказателей()
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ФОИспользоватьУчетКонтролируемыхПоказателей", ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей"));
	СтруктураВозврата.Вставить("ФОИспользоватьУчетНаработки", ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования"));
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеДанных(Отказ)
	Если МодифицированностьПараметровНаработки Тогда
		Для Каждого Строка Из СписокПараметровНаработки Цикл
			Если Строка.ОбъектРемонта = ОбъектРемонта Тогда 
				Если НЕ ЗначениеЗаполнено(Строка.Показатель) Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Обнаружено незаполненное поле ""Показатель наработки"" в таблице ""Параметры наработки""!'")));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Строка.Период) Тогда 
					Отказ = Истина;
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Обнаружено незаполненное поле ""Дата введения"" для показателя ""(%1)"" в таблице ""Параметры наработки""!'"), Строка.Показатель)); 
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Строка.ПериодПлановойНаработки) Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Обнаружено незаполненное поле ""Период наработки"" для показателя ""(%1)"" в таблице ""Параметры наработки""!'"), Строка.Показатель));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Строка.ПлановаяНаработка) Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Обнаружено незаполненное поле ""Плановая наработка"" для показателя ""(%1)"" в таблице ""Параметры наработки""!'"), Строка.Показатель));
				КонецЕсли;
					
				ТекстОшибки = "";
				Если СтруктураНеОсновныхРеквизитовОР.ЭтоГруппа <> Неопределено И Не СтруктураНеОсновныхРеквизитовОР.ЭтоГруппа Тогда				
					Если ЗначениеЗаполнено(Строка.Период) И ЗначениеЗаполнено(Строка.Показатель) Тогда
						СтруктураПоиска = Новый Структура("Период, Показатель", Строка.Период, Строка.Показатель);
						Строки = СписокПараметровНаработки.НайтиСтроки(СтруктураПоиска);
						Если Строки.Количество() > 1 Тогда
							ШаблонОшибки = НСтр("ru = 'Показатель плановой наработки ""(%1)"" на период ""(%2)"" уже задан в другой строке таблицы.'");
							ТекстОшибки = СтрШаблон(ШаблонОшибки, Строка.Показатель, Строка.Период); 
						КонецЕсли;
					КонецЕсли;
					
					Если ТекстОшибки <> "" Тогда
						#Если Не ВебКлиент Тогда
							Отказ = Истина;
						#КонецЕсли
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если МодифицированностьИзмеряемыхПоказателей Тогда 
		Для Каждого ТекДанные Из СписокИзмеряемыхПоказателей Цикл
			Если ТекДанные.ОбъектРемонта = ОбъектРемонта Тогда 			
				Если НЕ ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
					ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Показатель"" в таблице ""Контролируемые показатели""!'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"СписокИзмеряемыхПоказателей",,Отказ);
					Возврат;
				КонецЕсли;
				СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель", ТекДанные.ОбъектРемонта, ТекДанные.Показатель);
				Если СписокИзмеряемыхПоказателей.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
					ШаблонСообщения = НСтр("ru='Обнаружены повторяющиеся поля ""Показатель"" ""(%1)"" для объекта ремонта ""(%2)"" в таблице ""Контролируемые показатели""!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.Показатель, ТекДанные.ОбъектРемонта);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"СписокИзмеряемыхПоказателей",,Отказ);
					Возврат;
				КонецЕсли;

				Если ТекДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
					ТекстСообщения = "";
					Если ТипЗнч(ТекДанные.КритическийМинимум) = Тип("Число") 
						И ТипЗнч(ТекДанные.ДопустимыйМинимум) = Тип("Число") 
						И ТипЗнч(ТекДанные.ДопустимыйМаксимум) = Тип("Число") 
						И ТипЗнч(ТекДанные.КритическийМаксимум) = Тип("Число") Тогда
						Если ТекДанные.КритическийМинимум > ТекДанные.ДопустимыйМинимум Тогда
							ТекстСообщения = ТекстСообщения + НСтр("ru = 'критический минимум превышает допустимый минимум! '");
						КонецЕсли;
						Если ТекДанные.ДопустимыйМинимум > ТекДанные.ДопустимыйМаксимум Тогда
							ТекстСообщения = ТекстСообщения + НСтр("ru = 'допустимый минимум превышает допустимый максимум! '");
						КонецЕсли;
						Если ТекДанные.ДопустимыйМаксимум > ТекДанные.КритическийМаксимум Тогда
							ТекстСообщения = ТекстСообщения + НСтр("ru = 'допустимый максимум превышает критический максимум! '");
						КонецЕсли;
					КонецЕсли;
					
					Если ТекстСообщения <> "" Тогда
						ШаблонСообщения = НСтр("ru='Для показателя ""(%1)"" объекта ремонта ""(%2)"" !'");
						НачальноеСообщение = СтрШаблон(ШаблонСообщения, ТекДанные.Показатель, ТекДанные.ОбъектРемонта);
					
						ТекстСообщения = НачальноеСообщение + ТекстСообщения + НСтр("ru = 'Попробуйте отредактировать границы допустимых значений!'");
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"СписокИзмеряемыхПоказателей",, Отказ);
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановкаДоступности(ТекущийЭлемент)
	Если ТекущийЭлемент = Неопределено
		Или ТекущийЭлемент.ЭтоГруппа 
		Или ТипЗнч(ТекущийЭлемент.Ссылка) <> Тип("СправочникСсылка.торо_ОбъектыРемонта")
		Тогда 
		ОчиститьТекущиеДанныеОбОбъекте();
		Элементы.Показатели.Доступность = Ложь;
		Элементы.Наработка.Доступность = Ложь;
	Иначе
		Элементы.Показатели.Доступность = Истина;
		Элементы.Наработка.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущиеДанныеОбОбъекте()
	ОбъектРемонта = Неопределено;
	Направление = Неопределено;
	Приоритет = Неопределено;
	ИнвентарныйНомер = Неопределено;
	ТехНомер = Неопределено;
	ТиповойОР = Неопределено;
	СостояниеОР = Неопределено;
	Подразделение = Неопределено;
	ЗаводскойНомер = Неопределено;
	ПричинаПростоя = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРВидСравненияПриИзменении(Элемент)
	ТекущиеДанныеКП = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	ТекущиеДанные = Элементы.ПараметрыОповещенияПоСостояниямОР.ТекущиеДанные;
	Если ТекущиеДанныеКП = Неопределено Или ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	ОписаниеТиповКП = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанныеКП.Показатель, "ТипЗначения");
	ТипСоставной = ОписаниеТиповКП.СодержитТип(Тип("Число")) И ОписаниеТиповКП.СодержитТип(Тип("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта"));	
	
	Если Не ТипСоставной Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияТолькоЧисло = Истина;
	Если ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.Равно") Или ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеРавно") Тогда
	    ТипЗначенияТолькоЧисло = Ложь;
	КонецЕсли;
	
	Если ТипЗначенияТолькоЧисло Тогда
	    Если ТекущиеДанные.ВариантЗначения = ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ЗначениеИзмеряемогоПоказателяОР") Тогда
		    ТекущиеДанные.ВариантЗначения = Неопределено;
			ТекущиеДанные.Значение = 0;
		КонецЕсли;
		
		МассивВариантовЗначенийКПОР = Новый Массив();
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ДопустимыйМаксимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ДопустимыйМинимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.КритическийМаксимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.КритическийМинимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ПроизвольноеЗначение"));
	Иначе
		МассивВариантовЗначенийКПОР = Новый Массив();
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ДопустимыйМаксимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ДопустимыйМинимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.КритическийМаксимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.КритическийМинимум"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ПроизвольноеЗначение"));
		МассивВариантовЗначенийКПОР.Добавить(ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ЗначениеИзмеряемогоПоказателяОР"));
	КонецЕсли;
	
	Элементы.ПараметрыОповещенияПоСостояниямОРВариантЗначения.СписокВыбора.ЗагрузитьЗначения(МассивВариантовЗначенийКПОР);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРВариантЗначенияПриИзменении(Элемент)
	ТекущиеДанныеКП = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	ТекущиеДанные = Элементы.ПараметрыОповещенияПоСостояниямОР.ТекущиеДанные;
	Если ТекущиеДанныеКП = Неопределено Или ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	ОписаниеТиповКП = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанныеКП.Показатель, "ТипЗначения");
	ТипСоставной = ОписаниеТиповКП.СодержитТип(Тип("Число")) И ОписаниеТиповКП.СодержитТип(Тип("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта"));	
	
	Если Не ТипСоставной Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ВариантЗначения = ПредопределенноеЗначение("Перечисление.торо_ВариантыЗначенийКонтролируемыхПоказателей.ЗначениеИзмеряемогоПоказателяОР") Тогда
		Элементы.ПараметрыОповещенияПоСостояниямОРЗначение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта");
		Если ТипЗнч(ТекущиеДанные.Значение) = Тип("Число") Тогда
		    ТекущиеДанные.Значение = ПредопределенноеЗначение("Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта.ПустаяСсылка");
		КонецЕсли;
	Иначе
		Элементы.ПараметрыОповещенияПоСостояниямОРЗначение.ОграничениеТипа = Новый ОписаниеТипов("Число");
		Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СправочникСсылка.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта") Тогда
		    ТекущиеДанные.Значение = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#КонецОбласти