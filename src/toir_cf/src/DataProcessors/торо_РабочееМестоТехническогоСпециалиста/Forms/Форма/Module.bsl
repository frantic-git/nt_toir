
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиВосстановлены = ВосстановитьНастройки();
	
	Если НЕ НастройкиВосстановлены Тогда
		Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР",	"ОсновнаяОрганизация");
		Объект.Завершенные              = Ложь;
		Объект.ДатаАктуальности         = ТекущаяДата();
		Объект.ПлановыйПериод           = 10;
		Объект.Периодичность            = Перечисления.Периодичность.День;
		Объект.ПериодОбновления         = 180;
		Объект.АвтоматическоеОбновление = Истина;
		
		ЗаполнитьТаблицуКритичности();
		ЗаполнитьТаблицуПриоритетностиОР();
	КонецЕсли;
	
	Если Объект.ВидДаты = 0 Тогда
		Объект.ДатаАктуальности = ТекущаяДата();
	КонецЕсли;
	
	ФОИспользоватьППР							  = ПолучитьФункциональнуюОпцию("торо_ИспользоватьППР");
	ФОИспользоватьРегламентныеМероприятия         = ПолучитьФункциональнуюОпцию("торо_ИспользоватьРегламентныеМероприятия");
	ФОИспользоватьНарядыНаРегламентныеМероприятия = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаРегламентноеМероприятие");
	ФОИспользоватьВнешниеОснования		          = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот");
	ФОИспользоватьДефекты					      = ПолучитьФункциональнуюОпцию("торо_УчетВыявленныхДефектовОборудования");
	ФОИспользоватьСметы						      = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСметыРемонта");
	ФОИспользоватьНаряды					      = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаВыполнениеРабот");
	ФОИспользоватьГарантии                        = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
		
	Если Не ФОИспользоватьППР
		И Не ФОИспользоватьДефекты
		И Не ФОИспользоватьВнешниеОснования Тогда
		ИспользоватьУправлениеРемонтами = Ложь;
	Иначе
		ИспользоватьУправлениеРемонтами = Истина;
	КонецЕсли;
	
	УстановитьКонстантныеПараметрыДинамическогоСписка();
	УстановитьУсловноеОформление();
			
	ЗаполнитьТаблицуВводаНаОсновании();
	УстановитьПараметрыВыбораДоговора();
	УстановитьПараметрыВыбораБригады();
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	СоответствиеДляМультиязычности = Новый Соответствие();
	СоответствиеДляМультиязычности.Вставить("Ремонты", "РегистрСведений.торо_ВыявленныеДефекты");
	торо_МультиязычностьСервер.ПриСозданииНаСервереОбработкаДинамическихСписков(ЭтаФорма, СоответствиеДляМультиязычности);
	
	УстановитьБазовыеЗначенияПараметров();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьИзменяемыеПараметрыДинамическогоСпискаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьИзменяемыеПараметрыДинамическогоСпискаНаКлиенте();
	
	СтруктураФО = Новый Структура("торо_ИспользоватьОстановочныеРемонты");
	торо_ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруФункциональныхОпций(СтруктураФО);	
	флОстановочные = ?(СтруктураФО.торо_ИспользоватьОстановочныеРемонты, флОстановочные, Ложь);
	флОстановочныеПриИзменении(Элементы.флОстановочные);
	ДокументОстановочногоПриИзменении(Элементы.ДокументОстановочного);
	ИспользоватьОтборПоСтатусуПриИзменении(Элементы.ИспользоватьОтборПоСтатусу);
	ИспользоватьОтборТипДокументаПриИзменении(Элементы.ИспользоватьОтборТипДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданДокументЧерезРМТехСпец" Тогда
		
		СохранениеТекущихСтрок();
		
		Если Источник = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
			Элементы.ЗаявкиНаРемонт.Обновить(); // У заявки мог измениться статус.
			Элементы.АктыНаРемонт.Обновить();
		ИначеЕсли Источник = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			Элементы.НарядыНаРемонт.Обновить();
		ИначеЕсли Источник = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			Элементы.ЗаявкиНаРемонт.Обновить();
		ИначеЕсли Источник = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			Элементы.НарядыНаМероприятия.Обновить();
		ИначеЕсли Источник = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
			Элементы.АктыПоМероприятию.Обновить();
		КонецЕсли;
		
		ВосстановлениеТекущихСтрок();
		УстановитьФильтрПоРемонту();
		
	ИначеЕсли ИмяСобытия = "ПерезаполнитьТаблицы" Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		
		УстановитьИзменяемыеПараметрыДинамическогоСпискаНаСервере();
		УстановитьИзменяемыеПараметрыДинамическогоСпискаНаКлиенте();
		
		РежимВыделенияСтрок = Параметр.РежимВыделенияСтрок;
		
		УстановитьУсловноеОформление();
		СохранитьНастройки();
		
	ИначеЕсли ИмяСобытия = "ЗакрытиеЗаявокИРемонтов" Тогда
		СохранениеТекущихСтрок();
		Элементы.Ремонты.Обновить();
		ВосстановлениеТекущихСтрок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Организация", Объект.Организация,,,ЗначениеЗаполнено(Объект.Организация), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Мероприятия, "Организация", Объект.Организация,,,ЗначениеЗаполнено(Объект.Организация), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИнициаторПриИзменении(Элемент)
	
	УстановитьОтборыПоПодразделениюИнициатору("Ремонты");
	УстановитьОтборыПоПодразделениюИнициатору("Мероприятия");

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоПодразделениюПриИзменении(Элемент)
	
	УстановитьОтборыПоПодразделениюИнициатору("Ремонты");
	УстановитьОтборыПоПодразделениюИнициатору("Мероприятия");

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСтатусуПриИзменении(Элемент)
	УстановитьОтборыПоКолонкеСтатусРемонта();
КонецПроцедуры

&НаКлиенте
Процедура СтатусРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму("ОбщаяФорма.торо_ВыборСостоянияРемонта", Новый Структура("СтатусыРемонта", СтатусыРемонта), ЭтаФорма,,,,
		Новый ОписаниеОповещения("ВозвратСпискаСтатусов", ЭтотОбъект));
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусРемонтаОчистка(Элемент, СтандартнаяОбработка)
	СтатусыРемонта.Очистить();
	УстановитьОтборыПоКолонкеСтатусРемонта();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборТипДокументаПриИзменении(Элемент)
	УстановитьОтборПоТипуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	УстановитьОтборПоТипуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоБригадеПриИзменении(Элемент)
	
	Если Объект.ИспользоватьОтборПоБригаде Тогда
		Объект.ИспользоватьОтборПоДоговору = Ложь;
		Объект.ИспользоватьОтборПоКонтрагенту = Ложь;
	КонецЕсли; 
	
	УстановитьОтборыПоАдресацииЗаявок();

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоБригадеПриИзменении(Элемент)
	УстановитьОтборыПоАдресацииЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоДоговоруПриИзменении(Элемент)
	
	Если Объект.ИспользоватьОтборПоДоговору Тогда
		Объект.ИспользоватьОтборПоБригаде = Ложь;	
		Объект.ИспользоватьОтборПоПодразделениюИсполнителю = Ложь;	
	КонецЕсли;
	
	УстановитьОтборыПоАдресацииЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоКонтграгентуПриИзменении(Элемент)
	
	Если Объект.ИспользоватьОтборПоКонтрагенту Тогда
		Объект.ИспользоватьОтборПоПодразделениюИсполнителю = Ложь;
		Объект.ИспользоватьОтборПоБригаде = Ложь;
	КонецЕсли; 
	
	УстановитьОтборыПоАдресацииЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	УстановитьОтборыПоАдресацииЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура КонтагентПриИзменении(Элемент)
	УстановитьПараметрыВыбораДоговора();
	УстановитьОтборыПоАдресацииЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоПодразделениюИсполнителюПриИзменении(Элемент)
	
	Если Объект.ИспользоватьОтборПоПодразделениюИсполнителю Тогда
		Объект.ИспользоватьОтборПоКонтрагенту = Ложь;
		Объект.ИспользоватьОтборПоДоговору = Ложь;
	КонецЕсли;
	
	УстановитьОтборыПоАдресацииЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьПараметрыВыбораБригады();	
	УстановитьОтборыПоАдресацииЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ВидимостьОтбораОстановочные = ТекущаяСтраница.Имя = "СтраницаРемонты";
	
	Элементы.ГруппаОстановочные.Видимость = ВидимостьОтбораОстановочные;
	Элементы.ГруппаТипДокумента.Видимость = ВидимостьОтбораОстановочные;
	Элементы.ГруппаБригада.Видимость = ВидимостьОтбораОстановочные;
	Элементы.ГруппаДоговор.Видимость = ВидимостьОтбораОстановочные;

	СохранениеТекущихСтрок();
	ФлагПереходаСтраницы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура флОстановочныеПриИзменении(Элемент)
	
    Если Не флОстановочные Тогда
		ДокументОстановочного = Неопределено;
	КонецЕсли;
	
	Элементы.ДокументОстановочного.Доступность = флОстановочные;
	Если флОстановочные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "IDОсновного", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Ремонты, "IDОсновного");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОстановочногоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДокументОстановочного) Тогда
		IDОсновногоРемонта = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ДокументОстановочного, "IDОсновногоРемонта");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "IDОсновного", IDОсновногоРемонта, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный); 
	ИначеЕсли флОстановочные Тогда
		 ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "IDОсновного", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонты
&НаКлиенте
Процедура РемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "РемонтыДокумент" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.Документ);
		
	ИначеЕсли Поле.Имя = "РемонтыДокументПлановыхДат" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.ДокументПлановыхДат);
		
	ИначеЕсли Поле.Имя = "РемонтыОбъектРемонта" Тогда 
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.ОбъектРемонта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыПриАктивизацииСтроки(Элемент)
	
	Если ФлагПереходаСтраницы Тогда
		
		ВосстановлениеТекущихСтрок();
		ФлагПереходаСтраницы = Ложь;
		
	КонецЕсли;
		
	УстановитьФильтрПоРемонту();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаявкиНаРемонт
&НаКлиенте
Процедура ЗаявкиНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")));

		ОткрытьДокумент("Документ.торо_ЗаявкаНаРемонт.ФормаОбъекта", Элемент.ТекущиеДанные.ДокументЗаявка, ОписаниеОповещения);
		
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНарядыНаРемонт
&НаКлиенте
Процедура НарядыНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")));

		ОткрытьДокумент("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаОбъекта", Элемент.ТекущиеДанные.ДокументНаряд, ОписаниеОповещения);
		
	КонецЕсли;  	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктыНаРемонт
&НаКлиенте
Процедура АктыНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")));

		ОткрытьДокумент("Документ.торо_АктОВыполненииЭтапаРабот.ФормаОбъекта", Элемент.ТекущиеДанные.ДокументАкт, ОписаниеОповещения);
		
	КонецЕсли;  	
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятия
&НаКлиенте
Процедура МероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "МероприятияДокумент" Тогда
		
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Документ);
		
	ИначеЕсли Поле.Имя = "МероприятияДокументПлановыхДат" Тогда
		
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.ДокументПлановыхДат);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПриАктивизацииСтроки(Элемент)
	
	Если ФлагПереходаСтраницы Тогда
		
		ВосстановлениеТекущихСтрок();
		ФлагПереходаСтраницы = Ложь;
		
	КонецЕсли;
	
	УстановитьФильтрПоРемонту();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНарядыНаМероприятия
&НаКлиенте
Процедура НарядыНаМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие")));

		ОткрытьДокумент("Документ.торо_НарядНаРегламентноеМероприятие.ФормаОбъекта", Элемент.ТекущиеДанные.ДокументНаряд, ОписаниеОповещения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктыПоМероприятию
&НаКлиенте
Процедура АктыПоМероприятиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")));

		ОткрытьДокумент("Документ.торо_АктОВыполненииРегламентногоМероприятия.ФормаОбъекта", Элемент.ТекущиеДанные.ДокументАкт, ОписаниеОповещения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиОтбора(Команда)
	
	ВыделенныеСтроки = Элементы.Ремонты.ВыделенныеСтроки;
	мТекущийРемонтID.Очистить();
	МассивID = Новый СписокЗначений;
	Для Каждого НомСтроки Из ВыделенныеСтроки Цикл
		Строка = Элементы.Ремонты.ДанныеСтроки(НомСтроки);
		Если Строка <> Неопределено Тогда
			МассивID.Добавить(Строка.ID_Ремонта);
			мТекущийРемонтID.Добавить(Строка.ID_Ремонта);
		КонецЕсли;
	КонецЦикла;
	
	ВыделенныеСтроки = Элементы.Мероприятия.ВыделенныеСтроки;
	мТекущееМероприятиеID.Очистить();
	МассивID = Новый СписокЗначений;
	Для Каждого НомСтроки Из ВыделенныеСтроки Цикл
		Строка = Элементы.Мероприятия.ДанныеСтроки(НомСтроки);
		Если НЕ Строка = Неопределено Тогда
			МассивID.Добавить(Строка.ID_Ремонта);
			мТекущееМероприятиеID.Добавить(Строка.ID_Ремонта);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ВидДаты, ДатаАктуальности, Завершенные, НеПроведенные, АвтоматическоеОбновление, ПериодОбновления, ПлановыйПериод, Периодичность, ПодчиненныеПодразделения, НеОтображатьРемонтыРаньшеДаты, ТекущейДаты, ДатаОтбора",
		Объект.ВидДаты, Объект.ДатаАктуальности, Объект.Завершенные, Объект.НеПроведенные, Объект.АвтоматическоеОбновление, Объект.ПериодОбновления, Объект.ПлановыйПериод, Объект.Периодичность, Объект.ПодчиненныеПодразделения, Объект.НеОтображатьРемонтыРаньшеДаты, Объект.ТекущейДаты, Объект.ДатаОтбора);
	
	ДобавитьНастройкиЦвета(СтруктураПараметров);
	
	ФормаНастройки = ПолучитьФорму("Обработка.торо_РабочееМестоТехническогоСпециалиста.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма, ЭтаФорма);
	ФормаНастройки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРемонты(Команда)
	
	Элементы.Ремонты.Обновить();
	Элементы.Мероприятия.Обновить();
	Элементы.ЗаявкиНаРемонт.Обновить();
	Элементы.НарядыНаРемонт.Обновить();
	Элементы.АктыНаРемонт.Обновить();
	Элементы.НарядыНаМероприятия.Обновить();
	Элементы.АктыПоМероприятию.Обновить();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗакрытиеЗаявокИРемонтов(Команда)
	
	ВыбранныеРемонты = Новый Массив;
	Для каждого Индекс Из Элементы.Ремонты.ВыделенныеСтроки Цикл
	    Ремонт = Элементы.Ремонты.ДанныеСтроки(Индекс);
		ВыбранныеРемонты.Добавить(Ремонт.ID_Ремонта);
	КонецЦикла; 
	
	Отбор = Новый Структура;
	Отбор.Вставить("ID", ВыбранныеРемонты);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборРемонтов", Отбор);
	ПараметрыФормы.Вставить("ДатаАктуальности", ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаАктуальности, Объект.Периодичность, Объект.ПлановыйПериод));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "ЗакрытиеЗаявокИРемонтов","ОбработкаОбъект.торо_ЗакрытиеЗаявокИРемонтов"));
	
	ОткрытьФорму("Обработка.торо_ЗакрытиеЗаявокИРемонтов.Форма.Форма", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявку(Команда)
	
	ВыполнитьВводДокументаНаОсновании("торо_ЗаявкаНаРемонт", "заявку");
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаряд(Команда)

	ВыполнитьВводДокументаНаОсновании("торо_НарядНаВыполнениеРемонтныхРабот", "наряд");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАкт(Команда)
	
	ВыполнитьВводДокументаНаОсновании("торо_АктОВыполненииЭтапаРабот", "акт");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНарядНаМероприятие(Команда)
	
	ВыполнитьВводДокументаНаОсновании("торо_НарядНаРегламентноеМероприятие", "наряд на регламентное мероприятие");
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАктНаМероприятие(Команда)
	
	ВыполнитьВводДокументаНаОсновании("торо_АктОВыполненииРегламентногоМероприятия", "акт регламентного мероприятия");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройки()
	
	СохраненнаяНастройка = Новый Структура;
	СохраненнаяНастройка.Вставить("ТаблицаКритичности", ТаблицаКритичности.Выгрузить());
	СохраненнаяНастройка.Вставить("РежимВыделенияСтрок", РежимВыделенияСтрок);
	СохраненнаяНастройка.Вставить("ТаблицаПриоритетностиОР", ТаблицаПриоритетностиОР.Выгрузить());
	СохраненнаяНастройка.Вставить("АвтоматическоеОбновление", Объект.АвтоматическоеОбновление);
	СохраненнаяНастройка.Вставить("ПериодОбновления", Объект.ПериодОбновления);
	СохраненнаяНастройка.Вставить("Завершенные", Объект.Завершенные);
	СохраненнаяНастройка.Вставить("НеПроведенные", Объект.НеПроведенные);
	СохраненнаяНастройка.Вставить("ВидДаты",Объект.ВидДаты);
	СохраненнаяНастройка.Вставить("ДатаАктуальности", Объект.ДатаАктуальности);
	СохраненнаяНастройка.Вставить("ПлановыйПериод", Объект.ПлановыйПериод);
	СохраненнаяНастройка.Вставить("Периодичность", Объект.Периодичность);
	СохраненнаяНастройка.Вставить("ПодчиненныеПодразделения", Объект.ПодчиненныеПодразделения);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.торо_РабочееМестоТехническогоСпециалиста", Пользователи.ТекущийПользователь().УникальныйИдентификатор(), СохраненнаяНастройка);
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.торо_РабочееМестоТехническогоСпециалиста", Пользователи.ТекущийПользователь().УникальныйИдентификатор());
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
		ТаблицаКритичности.Загрузить(ЗначениеНастроек.ТаблицаКритичности);
		ТаблицаПриоритетностиОР.Загрузить(ЗначениеНастроек.ТаблицаПриоритетностиОР);
		РежимВыделенияСтрок = ЗначениеНастроек.РежимВыделенияСтрок;
		
		ЗначениеНастроек.Свойство("ИспользоватьОтборПоСтатусуДокумента", ИспользоватьОтборПоСтатусуДокумента);
		ЗначениеНастроек.Свойство("ИспользоватьОтборПоСтатусу", ИспользоватьОтборПоСтатусу);
		ЗначениеНастроек.Свойство("ОтборПоСтатусуДокумента", ОтборПоСтатусуДокумента);
		
		сзСтатусыРемонтов = "";
		ЗначениеНастроек.Свойство("СтатусыРемонта", сзСтатусыРемонтов);
		Если ЗначениеЗаполнено(сзСтатусыРемонтов) Тогда
			СтатусыРемонта = сзСтатусыРемонтов;
		КонецЕсли;
		
		ЗначениеНастроек.Свойство("флОстановочные", флОстановочные);
		ЗначениеНастроек.Свойство("ДокументОстановочного", ДокументОстановочного);
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьКонстантныеПараметрыДинамическогоСписка()
	
	СписокВидовИсточников = Новый Массив;
	Если ФОИспользоватьВнешниеОснования Тогда
		СписокВидовИсточников.Добавить(Перечисления.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот);
	КонецЕсли;
	Если ФОИспользоватьДефекты Тогда
		СписокВидовИсточников.Добавить(Перечисления.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект);
	КонецЕсли;
	Если ФОИспользоватьППР Тогда
		СписокВидовИсточников.Добавить(Перечисления.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР);
	КонецЕсли;
	
	Элементы.ТипДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВидовИсточников);;
	
	Ремонты.Параметры.УстановитьЗначениеПараметра("СписокВидовИсточников", СписокВидовИсточников);
	Ремонты.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());

	Ремонты.Параметры.УстановитьЗначениеПараметра("торо_ВидРемонтаВД", Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить());
	Ремонты.Параметры.УстановитьЗначениеПараметра("торо_ВидРемонтаВО", Константы.торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований.Получить());
	
	Мероприятия.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьРегламентныеМероприятия", ФОИспользоватьРегламентныеМероприятия);
	
	УстановитьЗапросДинСпискаЗаявок();
	УстановитьЗапросДинСпискаНарядов();
	УстановитьЗапросДинСпискаАктов();
	УстановитьЗапросДинСпискаРегламентныхНарядов();
	УстановитьЗапросДинСпискаРегламентныхАктов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИзменяемыеПараметрыДинамическогоСпискаНаСервере()
	
	ВычислитьИтогоПлановыхДней();
	Ремонты.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод", КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
	Мероприятия.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод", КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
	
	Ремонты.Параметры.УстановитьЗначениеПараметра("ОтображатьЗаверешенные", Объект.Завершенные);
	Мероприятия.Параметры.УстановитьЗначениеПараметра("ОтображатьЗаверешенные", Объект.Завершенные);
	
	УстановитьОтборПоДатеНачалаСнизу();
	
	Элементы.Ремонты.АвтоОбновление = Объект.АвтоматическоеОбновление;
	Элементы.Ремонты.ПериодАвтоОбновления = Объект.ПериодОбновления;

	Элементы.Мероприятия.АвтоОбновление = Объект.АвтоматическоеОбновление;
	Элементы.Мероприятия.ПериодАвтоОбновления = Объект.ПериодОбновления;	
	
	Если ИспользоватьУправлениеРемонтами Тогда
		Если ФОИспользоватьСметы Тогда
			ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Объект.НеПроведенные);
	      	Элементы.ЗаявкиНаРемонт.АвтоОбновление = Объект.АвтоматическоеОбновление;
			Элементы.ЗаявкиНаРемонт.ПериодАвтоОбновления = Объект.ПериодОбновления;
		КонецЕсли;
		
		Если ФОИспользоватьНаряды Тогда
			НарядыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Объект.НеПроведенные);
			Элементы.НарядыНаРемонт.АвтоОбновление = Объект.АвтоматическоеОбновление;
			Элементы.НарядыНаРемонт.ПериодАвтоОбновления = Объект.ПериодОбновления;	
		КонецЕсли;
		
		АктыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Объект.НеПроведенные);
		Элементы.АктыНаРемонт.АвтоОбновление = Объект.АвтоматическоеОбновление;
		Элементы.АктыНаРемонт.ПериодАвтоОбновления = Объект.ПериодОбновления;
	КонецЕсли;

	Если ФОИспользоватьРегламентныеМероприятия Тогда
		Если ФОИспользоватьНарядыНаРегламентныеМероприятия Тогда
			НарядыНаМероприятия.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Объект.НеПроведенные);
			Элементы.НарядыНаМероприятия.АвтоОбновление = Объект.АвтоматическоеОбновление;
			Элементы.НарядыНаМероприятия.ПериодАвтоОбновления = Объект.ПериодОбновления;	
		КонецЕсли;
		
		АктыПоМероприятию.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Объект.НеПроведенные);
		Элементы.АктыПоМероприятию.АвтоОбновление = Объект.АвтоматическоеОбновление;
		Элементы.АктыПоМероприятию.ПериодАвтоОбновления = Объект.ПериодОбновления;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИзменяемыеПараметрыДинамическогоСпискаНаКлиенте()
	
	ОрганизацияПриИзменении(Элементы.Организация);
	
	УстановитьОтборыПоПодразделениюИнициатору("Ремонты");
	УстановитьОтборыПоПодразделениюИнициатору("Мероприятия");
	
	УстановитьОтборыПоАдресацииЗаявок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДатеНачалаСнизу()
	
	ТекущаяДата = ТекущаяДата();
	
	Если Объект.НеОтображатьРемонтыРаньшеДаты Тогда
		Если Объект.ТекущейДаты Тогда
			Ремонты.Параметры.УстановитьЗначениеПараметра("ДатаОтбораСнизу", ТекущаяДата);
		Иначе
			Ремонты.Параметры.УстановитьЗначениеПараметра("ДатаОтбораСнизу", Объект.ДатаОтбора);
		КонецЕсли;
	Иначе
		Ремонты.Параметры.УстановитьЗначениеПараметра("ДатаОтбораСнизу", Дата("00010101"));
	КонецЕсли;
	
	Если Объект.НеОтображатьРемонтыРаньшеДаты Тогда
		Если Объект.ТекущейДаты Тогда
			Мероприятия.Параметры.УстановитьЗначениеПараметра("ДатаОтбораСнизу", ТекущаяДата);
		Иначе
			Мероприятия.Параметры.УстановитьЗначениеПараметра("ДатаОтбораСнизу", Объект.ДатаОтбора);
		КонецЕсли;
	Иначе
		Мероприятия.Параметры.УстановитьЗначениеПараметра("ДатаОтбораСнизу", Дата("00010101"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьИтогоПлановыхДней()
	
	Если ЗначениеЗаполнено(Объект.Периодичность) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РАЗНОСТЬДАТ(&ДатаНачала, ДОБАВИТЬКДАТЕ(&ДатаНачала,"+ Строка(Объект.Периодичность)+","+СтрЗаменить(Строка(Объект.ПлановыйПериод)," ","")+"), ДЕНЬ) КАК ПлановыйПериод";
		
		Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаАктуальности);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИтогоПлановыхДней = Выборка.ПлановыйПериод;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьОтборыПоПодразделениюИсполнителю(Таблица)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[Таблица], "Исполнитель",	Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Если Объект.ИспользоватьОтборПоПодразделениюИсполнителю Тогда		
		Если ЗначениеЗаполнено(Объект.ПодразделениеИсполнитель) Тогда
			Если Объект.ПодчиненныеПодразделения Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[Таблица], "Исполнитель", 
					Объект.ПодразделениеИсполнитель, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,,
					Объект.ИспользоватьОтборПоПодразделениюИсполнителю, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[Таблица], "Исполнитель", 
					Объект.ПодразделениеИсполнитель, ВидСравненияКомпоновкиДанных.Равно,,
					Объект.ИспользоватьОтборПоПодразделениюИсполнителю, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			КонецЕсли;
		ИначеЕсли Таблица = "Ремонты" Тогда 
			ПустыеИсполнители = Новый Массив;
			ПустыеИсполнители.Добавить(Неопределено);
			ПустыеИсполнители.Добавить(ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Исполнитель", 
					ПустыеИсполнители, ВидСравненияКомпоновкиДанных.ВСписке,,
					Объект.ИспользоватьОтборПоПодразделениюИсполнителю, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Иначе
			ЭлементОтбора = Мероприятия.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Объект.ИспользоватьОтборПоПодразделениюИсполнителю;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьОтборыПоПодразделениюИнициатору(Таблица)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[Таблица], "Подразделение",	Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Если Объект.ИспользоватьОтборПоПодразделению Тогда		
		
		Если ЗначениеЗаполнено(Объект.ПодразделениеИнициатор) Тогда
			Если Объект.ПодчиненныеПодразделения Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[Таблица], "Подразделение", 
					Объект.ПодразделениеИнициатор, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,,
					Объект.ИспользоватьОтборПоПодразделению, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[Таблица], "Подразделение", 
					Объект.ПодразделениеИнициатор, ВидСравненияКомпоновкиДанных.Равно,,
					Объект.ИспользоватьОтборПоПодразделению, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			КонецЕсли;
		Иначе
			ЭлементОтбора = Мероприятия.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Объект.ИспользоватьОтборПоПодразделениюИсполнителю;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапросДинСпискаЗаявок()
	
	Если Не ИспользоватьУправлениеРемонтами
		ИЛИ Не ФОИспользоватьСметы Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID_Ремонта,
	|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК ДокументЗаявка,
	|	ВЫБОР
	|		КОГДА торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка,
	|	торо_СтатусыРемонтовСрезПоследних.Статус КАК Статус
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыРемонтов.СрезПоследних КАК торо_СтатусыРемонтовСрезПоследних
	|		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_СтатусыРемонтовСрезПоследних.IDРемонта
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоказыватьНепроведенные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен
	|		КОНЕЦ
	|	И НЕ торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.ПометкаУдаления";
	
	ЗаявкиНаРемонт.ТекстЗапроса = Запрос.Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапросДинСпискаНарядов()
		
	Если Не ИспользоватьУправлениеРемонтами
		ИЛИ Не ФОИспользоватьНаряды Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID КАК ID_Ремонта,
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка КАК ДокументНаряд,
	|	ВЫБОР
	|		КОГДА торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоказыватьНепроведенные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Проведен
	|		КОНЕЦ
	|	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.ПометкаУдаления";
	
	НарядыНаРемонт.ТекстЗапроса = Запрос.Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапросДинСпискаАктов()
	
	Если Не ИспользоватьУправлениеРемонтами Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID_Ремонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК ДокументАкт,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.ЗавершитьРемонтныеРаботы КАК Завершенные
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоказыватьНепроведенные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.Проведен
	|		КОНЕЦ
	|	И НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.ПометкаУдаления";
	
	АктыНаРемонт.ТекстЗапроса = Запрос.Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапросДинСпискаРегламентныхНарядов()
	
	Если Не ФОИспользоватьРегламентныеМероприятия 
		ИЛИ Не ФОИспользоватьНарядыНаРегламентныеМероприятия Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID КАК ID_Ремонта,
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка КАК ДокументНаряд,
	|	ВЫБОР
	|		КОГДА торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоказыватьНепроведенные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.Проведен
	|		КОНЕЦ
	|	И НЕ торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.ПометкаУдаления";
	
	НарядыНаМероприятия.ТекстЗапроса = Запрос.Текст;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗапросДинСпискаРегламентныхАктов()
	
	Если Не ФОИспользоватьРегламентныеМероприятия Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID КАК ID_Ремонта,
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка КАК ДокументАкт,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК торо_АктОВыполненииРегламентногоМероприятияМероприятия
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоказыватьНепроведенные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка.Проведен
	|		КОНЕЦ
	|	И НЕ торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка.ПометкаУдаления";

	АктыПоМероприятию.ТекстЗапроса = Запрос.Текст;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВводаНаОсновании()
	
	ТабНастроек = торо_ЗаполнениеДокументовПовторноеИспользование.ПолучитьТаблицуВводаНаОсновании();
	ВводНаОсновании.Загрузить(ТабНастроек);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если РежимВыделенияСтрок = "По критичности дефекта" Тогда
		Для каждого Стр Из ТаблицаКритичности Цикл
			
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.КритичностьДефекта");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Стр.Критичность;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Стр.Цвет);
			
		КонецЦикла;
		
	ИначеЕсли РежимВыделенияСтрок = "По критичности объекта ремонта" Тогда
		
		Для каждого Стр Из ТаблицаПриоритетностиОР Цикл
			
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.ПриоритетОР");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Стр.Приоритет;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Стр.Цвет);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.Завершенные");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(201,226,255));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле  = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Мероприятия");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Мероприятия.Завершенные");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(201,226,255));
	
	// функциональные опции
	Элементы.СтраницаРемонты.Видимость                 = ИспользоватьУправлениеРемонтами;
	Элементы.СтраницаРегламентныеМероприятия.Видимость = ФОИспользоватьРегламентныеМероприятия;
	Элементы.ГруппаНарядыНаМероприятия.Видимость = ФОИспользоватьНарядыНаРегламентныеМероприятия;
	Элементы.РемонтыВведенаЗаявка.Видимость            = ИспользоватьУправлениеРемонтами И ФОИспользоватьСметы;
	Элементы.ГруппаЗаявкиНаРемонт.Видимость            = ИспользоватьУправлениеРемонтами И ФОИспользоватьСметы;
	Элементы.ГруппаНарядыНаРемонт.Видимость            = ИспользоватьУправлениеРемонтами И ФОИспользоватьНаряды;
	Элементы.РемонтыГарантийныйРемонт.Видимость = ФОИспользоватьГарантии;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПриоритетностиОР()
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПриоритетыОбъектовРемонта.Ссылка КАК Приоритет
	|ИЗ
	|	Справочник.торо_ПриоритетыОбъектовРемонта КАК торо_ПриоритетыОбъектовРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	торо_ПриоритетыОбъектовРемонта.Код";
	
	ЦветПоУмолчанию = Новый Цвет(255,255,255);
	
	Если ТаблицаПриоритетностиОР.Количество() = 0 Тогда
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Цвет"));
		РезультатЗапроса.Колонки.Добавить("Цвет",Новый ОписаниеТипов(Массив));
		
		РезультатЗапроса.ЗаполнитьЗначения(ЦветПоУмолчанию,"Цвет");
		
		ТаблицаКритичности.Загрузить(РезультатЗапроса);
		
	Иначе 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если ТаблицаПриоритетностиОР.НайтиСтроки(Новый Структура("Приоритет", Выборка.Приоритет)).Количество() = 0 Тогда
				НС = ТаблицаПриоритетностиОР.Добавить();
				НС.Приоритет = Выборка.Приоритет;
				НС.Цвет = ЦветПоУмолчанию;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройкиЦвета(СтруктураПараметров)
	
	Если РежимВыделенияСтрок = "По критичности дефекта" Тогда
		СтруктураПараметров.Вставить("ТаблицаКритичности", ПоместитьВоВременноеХранилище(ТаблицаКритичности.Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
	ИначеЕсли РежимВыделенияСтрок = "По критичности объекта ремонта" Тогда
		СтруктураПараметров.Вставить("ТаблицаПриоритетностиОР", ПоместитьВоВременноеХранилище(ТаблицаПриоритетностиОР.Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработчикОповещения(Результат, ДопПараметры) Экспорт
	ОбработкаОповещения(ДопПараметры.ИмяСобытия, Неопределено, ДопПараметры.Источник);
КонецПроцедуры
      
&НаКлиенте
Процедура УстановитьФильтрПоРемонту()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРемонты Тогда
		
		ВыделенныеСтроки = Элементы.Ремонты.ВыделенныеСтроки;
		
		ВыделенаОднаСтрока = (ВыделенныеСтроки.Количество() = 1);
		
		Если ВыделенаОднаСтрока Тогда
			
			ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				ТекID = ТекущиеДанные.ID_Ремонта;					
			КонецЕсли; 
			
		Иначе
			
			ТекID = Новый СписокЗначений;
			
			Для каждого НомСтр Из ВыделенныеСтроки Цикл
				Строка = Элементы.Ремонты.ДанныеСтроки(НомСтр);
				Если Строка <> Неопределено Тогда
					ТекID.Добавить(Строка.ID_Ремонта);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТекID <> Неопределено Тогда
		
			УстановитьОтборВСписке(ЗаявкиНаРемонт, ТекID, ВыделенаОднаСтрока);
			УстановитьОтборВСписке(НарядыНаРемонт, ТекID, ВыделенаОднаСтрока);
			УстановитьОтборВСписке(АктыНаРемонт,   ТекID, ВыделенаОднаСтрока);    
		
		КонецЕсли; 
		
		
	Иначе
		
		ВыделенныеСтроки = Элементы.Мероприятия.ВыделенныеСтроки;
		
		ВыделенаОднаСтрока = (ВыделенныеСтроки.Количество() = 1);
	
		Если ВыделенаОднаСтрока Тогда
			
			ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				ТекID = ТекущиеДанные.ID_Ремонта;					
			КонецЕсли;
			
		Иначе
			
			ТекID = Новый СписокЗначений;
			
			Для каждого НомСтр Из ВыделенныеСтроки Цикл
				Строка = Элементы.Мероприятия.ДанныеСтроки(НомСтр);
				Если Строка <> Неопределено Тогда
					ТекID.Добавить(Строка.ID_Ремонта);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТекID <> Неопределено Тогда
		
			УстановитьОтборВСписке(НарядыНаМероприятия, ТекID, ВыделенаОднаСтрока);
			УстановитьОтборВСписке(АктыПоМероприятию,   ТекID, ВыделенаОднаСтрока);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает доступность кнопок в зависимости от настроек ввода на основании.
//
&НаКлиенте
Функция ПроверитьВводНаОсновании(ДокументОснование, ДокументВводимый)
	
	ДокументОснованиеСтрока = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("Строка") Тогда
		ДокументОснованиеСтрока = ДокументОснование;
	Иначе
		Если ДокументОснование = ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР") Тогда
			ДокументОснованиеСтрока = "торо_ПланГрафикРемонта";
		ИначеЕсли ДокументОснование = ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ГрафикРегламентныхМероприятий") Тогда
			ДокументОснованиеСтрока = "торо_ГрафикРегламентныхМероприятийТОиР";
		ИначеЕсли ДокументОснование = ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект") Тогда
			ДокументОснованиеСтрока = "торо_ВыявленныеДефекты";
		ИначеЕсли ДокументОснование = ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот") Тогда
			ДокументОснованиеСтрока = "торо_ВнешнееОснованиеДляРабот";
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрок = ВводНаОсновании.НайтиСтроки(Новый Структура("ДокументОснование, ДокументВводимый", ДокументОснованиеСтрока, ДокументВводимый));
	
	Если МассивСтрок.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборВСписке(Список, ТекID, ВыделенаОднаСтрока = Истина)
	
	Если ВыделенаОднаСтрока Тогда
		
		Список.Отбор.Элементы.Очистить();
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ID_Ремонта");
		ЭлементОтбора.ПравоеЗначение = ТекID;
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		
		Список.Отбор.Элементы.Очистить();
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ID_Ремонта");
		ЭлементОтбора.ПравоеЗначение = ТекID;
		ЭлементОтбора.Использование = Истина;
				
	КонецЕсли;	
	
КонецПроцедуры
 
&НаКлиенте
Функция ПолучитьМассивВыделенныхСтрокРемонтов(ЭлементыРемонты)
	
	МассивВыделенныхСтрок = Новый Массив;	
	
	Для Каждого НомСтроки Из ЭлементыРемонты.ВыделенныеСтроки Цикл
		Строка = ЭлементыРемонты.ДанныеСтроки(НомСтроки);
		Если НЕ Строка = Неопределено Тогда 
			МассивВыделенныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивВыделенныхСтрок;
		
КонецФункции // ПолучитьМассивВыделенныхСтрокРемонтов()
 
&НаСервере
Функция ПолучитьСвязанныеДокументыПОID(МассивВыделенныхСтрок, ИмяТЧ, ВыгружатьВМассив = Ложь)
	
	ТаблицаВыделенныхСтрок = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов,,Новый КвалификаторыСтроки(36));
	
	ТаблицаВыделенныхСтрок.Колонки.Добавить("ID_Ремонта",ОписаниеТипов);
	
	Для Каждого Строка Из МассивВыделенныхСтрок Цикл
		НС = ТаблицаВыделенныхСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка);
	КонецЦикла;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СписокID.ID_Ремонта КАК ID_Ремонта
	               |ПОМЕСТИТЬ ID_Ремонтов
	               |ИЗ
	               |	&СписокID КАК СписокID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СписокID.ID_Ремонта
				   |;";

	Если ИмяТЧ = "ЗаявкиНаРемонт" Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ЗаявкиПоРемонтамСрезПоследних.ДокументЗаявка КАК Документ,
		|	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК ID,
		|	""торо_ЗаявкаНаРемонт"" КАК ТипДокумента
		|ИЗ
		|	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
		|			,
		|			IDРемонта В
		|				(ВЫБРАТЬ
		|					ID_Ремонтов.ID_Ремонта
		|				ИЗ
		|					ID_Ремонтов КАК ID_Ремонтов)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
		|ГДЕ
		|	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен";
		
	ИначеЕсли ИмяТЧ = "НарядыНаРемонт" Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НарядыПоРемонтам.Регистратор        КАК Документ,
		|	торо_НарядыПоРемонтам.IDРемонта          КАК ID,
		|	""торо_НарядНаВыполнениеРемонтныхРабот"" КАК ТипДокумента
		|ИЗ
		|	ID_Ремонтов КАК ID_Ремонтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НарядыПоРемонтам КАК торо_НарядыПоРемонтам
		|		ПО ID_Ремонтов.ID_Ремонта = торо_НарядыПоРемонтам.IDРемонта";
		
	ИначеЕсли ИмяТЧ = "НарядыНаМероприятия" Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ВсеДокументыПоРемонтам.Регистратор КАК Документ,
		|	торо_ВсеДокументыПоРемонтам.IDРемонта КАК ID,
		|	""торо_НарядНаРегламентноеМероприятие"" КАК ТипДокумента
		|ИЗ
		|	ID_Ремонтов КАК ID_Ремонтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВсеДокументыПоРемонтам КАК торо_ВсеДокументыПоРемонтам
		|		ПО ID_Ремонтов.ID_Ремонта = торо_ВсеДокументыПоРемонтам.IDРемонта
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(торо_ВсеДокументыПоРемонтам.Регистратор) = ТИП(Документ.торо_НарядНаРегламентноеМероприятие)";
		
	ИначеЕсли ИмяТЧ = "ВыявленныеДефекты" Тогда

		Запрос.Текст = Запрос.Текст + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ВыявленныеДефекты.Регистратор        КАК Документ,
		|	торо_ВыявленныеДефекты.ID			         КАК ID,
		|	""торо_ВыявленныеДефекты"" КАК ТипДокумента
		|ИЗ
		|	ID_Ремонтов КАК ID_Ремонтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		|		ПО ID_Ремонтов.ID_Ремонта = торо_ВыявленныеДефекты.ID";
		
	КонецЕсли; 	
	
	Запрос.УстановитьПараметр("СписокID",ТаблицаВыделенныхСтрок);
	
	РезультаЗапроса = Запрос.Выполнить();
	
	Если Не РезультаЗапроса.Пустой() Тогда
		Если ВыгружатьВМассив Тогда
			Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультаЗапроса);
		Иначе
			ТабРезультата = Запрос.Выполнить().Выгрузить();
			Возврат ПоместитьВоВременноеХранилище(ТабРезультата, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ВыгружатьВМассив Тогда
			Возврат Новый Массив;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуКритичности()
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_КритичностьДефекта.Ссылка КАК Критичность
	|ИЗ
	|	Справочник.торо_КритичностьДефекта КАК торо_КритичностьДефекта
	|
	|УПОРЯДОЧИТЬ ПО
	|	торо_КритичностьДефекта.Код";
	
	ЦветПоУмолчанию = Новый Цвет(255,255,255);
	
	Если ТаблицаКритичности.Количество() = 0 Тогда
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ТаблицаКритичности.Загрузить(РезультатЗапроса);
		
	Иначе 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если ТаблицаКритичности.НайтиСтроки(Новый Структура("Критичность", Выборка.Критичность)).Количество() = 0 Тогда
				Нс = ТаблицаКритичности.Добавить();
				Нс.Критичность = Выборка.Критичность;
				Нс.Цвет = ЦветПоУмолчанию;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументИОткрытьФорму(ИмяФормы, СоответствиеИДДокументам, ОписаниеОповещения = Неопределено)

	ОткрытьФорму(ИмяФормы, Новый Структура("Основание",СоответствиеИДДокументам),ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(ИмяФормы, Ссылка, ОписаниеОповещения = Неопределено)

	ОткрытьФорму(ИмяФормы, Новый Структура("Ключ",Ссылка),ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОснованийДляДокумента(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено 
		И ДопПараметры.Свойство("СоздаваемыйДокумент") Тогда
		
		СоответствиеИДДокументам = Новый Соответствие;
		Для каждого Элемент Из Результат Цикл
			СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
		КонецЦикла; 
		
		Если ДопПараметры.СоздаваемыйДокумент = "торо_АктОВыполненииЭтапаРабот" Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")));
			СоздатьДокументИОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаОбъекта", СоответствиеИДДокументам, ОписаниеОповещения);
		ИначеЕсли ДопПараметры.СоздаваемыйДокумент = "торо_НарядНаВыполнениеРемонтныхРабот" Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")));
			СоздатьДокументИОткрытьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаОбъекта", СоответствиеИДДокументам, ОписаниеОповещения);
		ИначеЕсли ДопПараметры.СоздаваемыйДокумент = "торо_АктОВыполненииРегламентногоМероприятия" Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")));
			СоздатьДокументИОткрытьФорму("Документ.торо_АктОВыполненииРегламентногоМероприятия.ФормаОбъекта", СоответствиеИДДокументам, ОписаниеОповещения);
		ИначеЕсли ДопПараметры.СоздаваемыйДокумент = "торо_ЗаявкаНаРемонт" Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")));
			СоздатьДокументИОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаОбъекта", СоответствиеИДДокументам, ОписаниеОповещения);	
		КонецЕсли; 

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВозвратСпискаСтатусов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Если РезультатЗакрытия <> Неопределено Тогда
		СтатусыРемонта = РезультатЗакрытия;
		УстановитьОтборыПоКолонкеСтатусРемонта();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоКолонкеСтатусРемонта()

	// Установка строкового реквизита на форме.
	СтатусРемонта = СтатусыРемонта;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "СтатусРемонта", СтатусыРемонта, ВидСравненияКомпоновкиДанных.ВСписке,, ИспользоватьОтборПоСтатусу, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Мероприятия, "СтатусРемонта", СтатусыРемонта, ВидСравненияКомпоновкиДанных.ВСписке,, ИспользоватьОтборПоСтатусу, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТипуДокумента()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "ТипДокумента", Объект.ТипДокумента, ВидСравненияКомпоновкиДанных.Равно,, Объект.ИспользоватьОтборТипДокумента И ЗначениеЗаполнено(Объект.ТипДокумента), 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеТекущихСтрок()

	Если НЕ СтруктураВыделенныхСтрок = Неопределено Тогда
		
		СтруктураВыделенныхСтрок.Очистить();
		
	КонецЕсли;
	
	СтруктураВыделенныхСтрок = Новый Структура;
	СтруктураТекущихСтрок = Новый Структура;
	
	СписокЭлементов = Новый СписокЗначений;
	
	СписокЭлементов.Добавить("Ремонты");
	СписокЭлементов.Добавить("ЗаявкиНаРемонт");
	СписокЭлементов.Добавить("НарядыНаРемонт");
	СписокЭлементов.Добавить("АктыНаРемонт");
	СписокЭлементов.Добавить("Мероприятия");
	СписокЭлементов.Добавить("НарядыНаМероприятия");
	СписокЭлементов.Добавить("АктыПоМероприятию");
	
	Для каждого ЭлементСписка Из СписокЭлементов Цикл
		
		ВыделенныеСтроки = Элементы[Строка(ЭлементСписка)].ВыделенныеСтроки;

		Если Не ВыделенныеСтроки = Неопределено Тогда
			
			НовыйМассив = Новый Массив;
			
			Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				НовыйМассив.Добавить(ВыделеннаяСтрока);
				
			КонецЦикла;
				
			СтруктураВыделенныхСтрок.Вставить(Строка(ЭлементСписка), НовыйМассив);
			
		КонецЕсли;
		
		ТекущаяСтрока = Элементы[Строка(ЭлементСписка)].ТекущаяСтрока;
		
		Если Не ТекущаяСтрока = Неопределено Тогда
			
			СтруктураТекущихСтрок.Вставить(Строка(ЭлементСписка), ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеТекущихСтрок()

	Если СтруктураТекущихСтрок <> Неопределено Тогда 
		Для каждого ЭлементСтруктуры Из СтруктураТекущихСтрок Цикл
			Элементы[ЭлементСтруктуры.Ключ].ТекущаяСтрока = ЭлементСтруктуры.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыделенныхСтрок <> Неопределено Тогда 
		Для каждого ЭлементСтруктуры Из СтруктураВыделенныхСтрок Цикл
				
			Элементы[ЭлементСтруктуры.Ключ].ВыделенныеСтроки.Очистить();
				
			Для каждого ВыделеннаяСтрока Из ЭлементСтруктуры.Значение Цикл
				
				Элементы[ЭлементСтруктуры.Ключ].ВыделенныеСтроки.Добавить(ВыделеннаяСтрока);
				
			КонецЦикла;
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВводДокументаНаОсновании(ТипВводимогоДокумента, ПредставлениеДокументаВВинПадеже)
	
	Если ТипВводимогоДокумента = "торо_НарядНаРегламентноеМероприятие"
		ИЛИ ТипВводимогоДокумента = "торо_АктОВыполненииРегламентногоМероприятия" Тогда
		ЭлементФормыТаблица = Элементы.Мероприятия;
	Иначе
		ЭлементФормыТаблица = Элементы.Ремонты;
	КонецЕсли;
	
	МассивДанныхСтрок = Новый Массив;
	Если НЕ ОбязательныеПроверкиПередВводомНаОсновании(ЭлементФормыТаблица, МассивДанныхСтрок) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуВводаНаОсновании();
	
	МассивРемонтовППР = Новый Массив;
	Для каждого Строка Из МассивДанныхСтрок Цикл
		Если ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта")
			ИЛИ ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
			МассивРемонтовППР.Добавить(Строка.ID_Ремонта);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеКорректировокППР = Новый Соответствие;
	Если МассивРемонтовППР.Количество() > 0 Тогда
		ЗаполнитьСоответствиеКорректировокППР(МассивРемонтовППР, СоответствиеКорректировокППР);
	КонецЕсли;
	
	СоответствиеРемонтовИОснований = Новый Соответствие;
		
	// Добавление возможных оснований.
	Для каждого Строка Из МассивДанныхСтрок Цикл
		Если ПроверитьВводНаОсновании(Строка.ТипДокумента, ТипВводимогоДокумента) Тогда
			КорректировкаППР = СоответствиеКорректировокППР.Получить(Строка.ID_Ремонта);
			Если КорректировкаППР = Неопределено Тогда
				ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, Строка.ID_Ремонта, Строка.Документ);
			Иначе
				ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, Строка.ID_Ремонта, КорректировкаППР);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	// Добавляетя выявленные дефекты, введенные на основании ВО. 
	// С релиза 2.0.38.1 связь больше не сохраняется. 
	// Сохранено для временного поддержания обратной совместимости со старыми документами.
	Если ПроверитьВводНаОсновании("торо_ВыявленныеДефекты", ТипВводимогоДокумента) И ФОИспользоватьДефекты Тогда
		
		ТаблицаЗаявок = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "ВыявленныеДефекты", Истина);
		Для каждого Строка из ТаблицаЗаявок Цикл
			ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, Строка.ID, Строка.Документ);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроверитьВводНаОсновании("торо_ЗаявкаНаРемонт", ТипВводимогоДокумента) И ФОИспользоватьСметы Тогда
		
		ТаблицаЗаявок = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "ЗаявкиНаРемонт", Истина);
		Для каждого Строка из ТаблицаЗаявок Цикл
			ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, Строка.ID, Строка.Документ);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроверитьВводНаОсновании("торо_НарядНаВыполнениеРемонтныхРабот", ТипВводимогоДокумента) И ФОИспользоватьНаряды Тогда
		
		ТаблицаНарядов = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "НарядыНаРемонт", Истина);
		Для каждого Строка из ТаблицаНарядов Цикл
			ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, Строка.ID, Строка.Документ);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроверитьВводНаОсновании("торо_НарядНаРегламентноеМероприятие", ТипВводимогоДокумента) И ФОИспользоватьНарядыНаРегламентныеМероприятия Тогда
		
		ТаблицаНарядов = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "НарядыНаМероприятия", Истина);
		Для каждого Строка из ТаблицаНарядов Цикл
			ВставитьЗначениеВСписокВСоответствии(СоответствиеРемонтовИОснований, Строка.ID, Строка.Документ);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ДляВсехРемонтовЕстьОснование(МассивДанныхСтрок, СоответствиеРемонтовИОснований, ПредставлениеДокументаВВинПадеже) Тогда
		Возврат;
	КонецЕсли;

	Если СоответствиеРемонтовИОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, нужно ли открывать форму выбора основания.
	ОткрыватьФормуВыбораОснования = Ложь;
	Для каждого КлючИЗначение из СоответствиеРемонтовИОснований Цикл
		Если КлючИЗначение.Значение.Количество() > 1 Тогда
			ОткрыватьФормуВыбораОснования = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ОткрыватьФормуВыбораОснования Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыборОснованийДляДокумента",ЭтаФорма,Новый Структура("СоздаваемыйДокумент", ТипВводимогоДокумента));
		
		СтруктураДанныхДляВыбораОснований = Новый Структура;
		СтруктураДанныхДляВыбораОснований.Вставить("СоответствиеРемонтовИОснований" , СоответствиеРемонтовИОснований);
		СтруктураДанныхДляВыбораОснований.Вставить("МассивВыделенныхСтрок" , МассивДанныхСтрок);
		
		ОткрытьФорму("Обработка.торо_РабочееМестоТехническогоСпециалиста.Форма.ФормаВыбораОснования",СтруктураДанныхДляВыбораОснований,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка."+ТипВводимогоДокумента)));
		
		СоответствиеИДДокументам = Новый Соответствие;
		Для каждого КлючИЗначение Из СоответствиеРемонтовИОснований Цикл
			Если КлючИЗначение.Значение.Количество() > 0 Тогда
				СоответствиеИДДокументам.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение[0]);
			КонецЕсли;
		КонецЦикла; 
		
		СоздатьДокументИОткрытьФорму("Документ."+ТипВводимогоДокумента+".ФормаОбъекта", СоответствиеИДДокументам, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОстановочныеРемонтыИЗакрытия(Массив)
	
	Для Каждого Строка Из Массив Цикл
		Если ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
			Строка.Документ = Строка.Документ.ЗакрываемыеРемонты.Найти(Строка.ID_Ремонта, "ID").ДокументОснование;	
		ИначеЕсли ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.торо_ОстановочныеРемонты") Тогда
			Если Строка.ID_Ремонта = Строка.Документ.IDОсновногоРемонта Тогда
				Источник = Строка.Документ.ДокументОснование;
			Иначе
				Источник = Строка.Документ.СвязанныеРемонты.Найти(Строка.ID_Ремонта, "ID").ДокументИсточник;
			КонецЕсли;
			Если ТипЗнч(Источник) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
				// Заявку обработаем позже, в ВыполнитьВводДокументаНаОсновании.
				Строка.Документ = Источник.РемонтыОборудования.Найти(Строка.ID_Ремонта, "ID").ДокументИсточник;
			Иначе	
				Строка.Документ = Источник;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОбязательныеПроверкиПередВводомНаОсновании(ЭлементФормыТаблица, МассивДанныхСтрок)

	ТекДанные = ЭлементФормыТаблица.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите ремонт!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	МассивВыделенныхСтрок = ПолучитьМассивВыделенныхСтрокРемонтов(ЭлементФормыТаблица);
	
	ОбработатьОстановочныеРемонтыИЗакрытия(МассивВыделенныхСтрок);
	
	КолЗавершенных = 0;
	
	Для Каждого Строка Из МассивВыделенныхСтрок Цикл
		
		Если ЗначениеЗаполнено(Строка.Завершенные) Тогда
			Если ТипЗнч(Строка.Завершенные) = Тип("Строка")или Строка.Завершенные  Тогда
				КолЗавершенных = КолЗавершенных + 1;
			Иначе
				Структура = Новый Структура("ОбъектРемонта, ВидРемонта, ПланируемаяДатаНачалаРемонта, ID_Ремонта, Документ, ТипДокумента"
				, Строка.ОбъектРемонта
				, Строка.ВидРемонта
				, Строка.ПланируемаяДатаНачалаРемонта
				, Строка.ID_Ремонта
				, Строка.Документ
				, Строка.ТипДокумента);
				МассивДанныхСтрок.Добавить(Структура);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КолЗавершенных > 0 Тогда
		ТекстСообщения = НСтр("ru = 'В списке выбранных ремонтов есть завершенные!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ДляВсехРемонтовЕстьОснование(МассивДанныхСтрок, СоответствиеРемонтовИОснований, ПредставлениеДокументаДляПользователя)
	
	// Проверим, по всем ли ремонтам нашлось хотя бы одно основание.
	МассивДокументовБезОснований = Новый Массив;
	Для каждого Строка Из МассивДанныхСтрок Цикл
		МассивОснований = СоответствиеРемонтовИОснований[Строка.ID_Ремонта];
		Если МассивОснований = Неопределено И МассивДокументовБезОснований.Найти(Строка.Документ) = Неопределено Тогда
			МассивДокументовБезОснований.Добавить(Строка.Документ);                                
		КонецЕсли;
	КонецЦикла; 
	
	Если МассивДокументовБезОснований.Количество() > 0 Тогда
		Если МассивДанныхСтрок.Количество() = 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Настройки ввода на основании запрещают ввести %1 на основании выбранного документа.
			|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		ИначеЕсли МассивДанныхСтрок.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Настройки ввода на основании запрещают ввести %1 на основании некоторых выбранных документов.
			|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		КонецЕсли;
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеДокументаДляПользователя);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиентеНасервереБезКонтекста
Процедура ВставитьЗначениеВСписокВСоответствии(Соответствие, Ключ, Значение)
	
	ТекущееЗначение = Соответствие[Ключ];
	Если ТекущееЗначение = Неопределено Тогда
		ТекущееЗначение = Новый Массив;
	КонецЕсли;
	
	Если ТекущееЗначение.Найти(Значение) = Неопределено Тогда
		ТекущееЗначение.Добавить(Значение);
	КонецЕсли;
	
	Соответствие.Вставить(Ключ, ТекущееЗначение);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	
	МассивСвязей = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Если ЗначениеЗаполнено(Объект.Договор) И Объект.Договор.Контрагент <> Объект.Контрагент Тогда
	 		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.НеИзменять));
	КонецЕсли;
	
	Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБригады()
	
	МассивСвязей = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеИсполнитель) Тогда
		
		Если ЗначениеЗаполнено(Объект.Бригада) И Объект.Бригада.Подразделение <> Объект.ПодразделениеИсполнитель Тогда
			Объект.Бригада = Справочники.торо_РемонтныеБригады.ПустаяСсылка();
		КонецЕсли; 
	 
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Подразделение", "Объект.ПодразделениеИсполнитель", РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	КонецЕсли;
	
	Элементы.Бригада.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьОтборыПоАдресацииЗаявок()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Бригада",	Неопределено,,,Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "СпособВыполнения", Неопределено,,,Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "ВведенаЗаявка", Неопределено,,,Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	УстановитьОтборыПоПодразделениюИсполнителю("Ремонты");
	УстановитьОтборыПоПодразделениюИсполнителю("Мероприятия");
	
	Если Объект.ИспользоватьОтборПоБригаде Тогда	
		ПустыеБригады = Новый Массив;
		ПустыеБригады.Добавить(Неопределено);
		ПустыеБригады.Добавить(ПредопределенноеЗначение("Справочник.торо_РемонтныеБригады.ПустаяСсылка"));

		Если ЗначениеЗаполнено(Объект.Бригада) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Бригада", 
				Объект.Бригада,ВидСравненияКомпоновкиДанных.Равно,,
				Объект.ИспользоватьОтборПоБригаде, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Бригада", 
				ПустыеБригады,ВидСравненияКомпоновкиДанных.ВСписке,,
				Объект.ИспользоватьОтборПоБригаде, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользоватьОтборПоКонтрагенту Тогда
		ПустыеИсполнители = Новый Массив;
		ПустыеИсполнители.Добавить(Неопределено);
		ПустыеИсполнители.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Исполнитель", 
				Объект.Контрагент, ВидСравненияКомпоновкиДанных.Равно,,
				Объект.ИспользоватьОтборПоКонтрагенту, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Мероприятия, "Исполнитель", 
				Объект.Контрагент, ВидСравненияКомпоновкиДанных.Равно,,
				Объект.ИспользоватьОтборПоКонтрагенту, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Исполнитель", 
				ПустыеИсполнители, ВидСравненияКомпоновкиДанных.ВСписке,,
				Объект.ИспользоватьОтборПоКонтрагенту, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Мероприятия, "Исполнитель", 
				ПустыеИсполнители, ВидСравненияКомпоновкиДанных.ВСписке,,
				Объект.ИспользоватьОтборПоКонтрагенту, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользоватьОтборПоДоговору Тогда
		ПустыеДоговора = Новый Массив;
		ПустыеДоговора.Добавить(Неопределено);
		ПустыеДоговора.Добавить(ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Бригада", 
				Объект.Договор,ВидСравненияКомпоновкиДанных.Равно,,
				Объект.ИспользоватьОтборПоДоговору, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
		Иначе	
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Бригада", 
				ПустыеДоговора,ВидСравненияКомпоновкиДанных.ВСписке,,
				Объект.ИспользоватьОтборПоДоговору, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСоответствиеКорректировокППР(МассивРемонтовППР, СоответствиеКорректировокППР)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПлановыеМероприятияСрезПоследних.ID КАК ID,
	|	торо_ПлановыеМероприятияСрезПоследних.Регистратор КАК Документ
	|ИЗ
	|	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних(, ID В (&МассивID)) КАК торо_ПлановыеМероприятияСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	|			,
	|			ID В (&МассивID)
	|				И Регистратор ССЫЛКА Документ.торо_ПланГрафикРемонта) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних";
	
	Запрос.УстановитьПараметр("МассивID", МассивРемонтовППР);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеКорректировокППР.Вставить(Выборка.ID, Выборка.Документ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБазовыеЗначенияПараметров()
	
	ТекущаяДата = ТекущаяДата();
		
	ВычислитьИтогоПлановыхДней();
	Ремонты.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод", КонецДня(ТекущаяДата + (ИтогоПлановыхДней*60*60*24)));
	Мероприятия.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод", КонецДня(ТекущаяДата + (ИтогоПлановыхДней*60*60*24)));
	
	Ремонты.Параметры.УстановитьЗначениеПараметра("ОтображатьЗаверешенные", Ложь);
	Мероприятия.Параметры.УстановитьЗначениеПараметра("ОтображатьЗаверешенные", Ложь);
	
	Если ИспользоватьУправлениеРемонтами Тогда
		Если ФОИспользоватьСметы Тогда
			ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Ложь);
		КонецЕсли;
		
		Если ФОИспользоватьНаряды Тогда
			НарядыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Ложь);
		КонецЕсли;
		
		АктыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Ложь);
	КонецЕсли;

	Если ФОИспользоватьРегламентныеМероприятия Тогда
		Если ФОИспользоватьНарядыНаРегламентныеМероприятия Тогда
			НарядыНаМероприятия.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Ложь);
		КонецЕсли;
		
		АктыПоМероприятию.Параметры.УстановитьЗначениеПараметра("ПоказыватьНепроведенные", Ложь);
	КонецЕсли; 	

	Ремонты.Параметры.УстановитьЗначениеПараметра("ДатаОтбораСнизу", Дата("00010101"));
	Мероприятия.Параметры.УстановитьЗначениеПараметра("ДатаОтбораСнизу", Дата("00010101"));

КонецПроцедуры

#КонецОбласти