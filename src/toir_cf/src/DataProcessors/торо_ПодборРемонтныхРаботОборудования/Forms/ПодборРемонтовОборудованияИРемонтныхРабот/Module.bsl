////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем ПараметрыТекущейСтроки;
&НаКлиенте
Перем ПараметрыТекущейСтрокиРемонтовОборудования;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Владелец") Тогда
		ТекстСообщения = НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат;
	КонецЕсли;
		
	Владелец = Параметры.Владелец;
	Объект.Ссылка = Владелец;
	
	ИспользоватьОтборПоОрганизацииИПодразделению = Ложь;
	Если Параметры.Свойство("Организация") и ЗначениеЗаполнено(Параметры.Организация) Тогда
		ОрганизацияДляОтбора = Параметры.Организация;
		ИспользоватьОтборПоОрганизацииИПодразделению = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") и ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		ПодразделениеДляОтбора = Параметры.Подразделение;
		ИспользоватьОтборПоОрганизацииИПодразделению = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ДокументыОснования") Тогда
		Для каждого Документ Из Параметры.ДокументыОснования Цикл
			Объект.ДокументыОснования.Добавить().ДокументОснование = Документ.Значение;
		КонецЦикла; 
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") Тогда
		ЭтаФорма.Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_ОстановочныеРемонты") Тогда
		Элементы.ДеревоРемонтныхРабот.Видимость = Ложь;
		Элементы.ФлажокЗавершенные.Видимость = Ложь;
		Элементы.ОтборОстановочные.Видимость = Ложь;
		Элементы.ДокументыОснованияВыбрать.Видимость = Ложь;
		Элементы.РемонтыОборудования.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	Иначе
		Элементы.ДеревоРемонтныхРабот.Видимость = Не ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_АктПриемкиОборудования");
	КонецЕсли;	
	
	Если ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_АктПриемкиОборудования") ТОгда
		ФлажокЗавершенные = Истина;
		Элементы.ФлажокЗавершенные.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ВладелецДата") Тогда
		Объект.Дата = Параметры.ВладелецДата;
	КонецЕсли;
	
	Если ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") 
		ИЛИ ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		Элементы.ИспользоватьОтборПоОрганизацииИПодразделению.Видимость = Ложь;
		Элементы.ОтборОстановочные.Видимость = Ложь;
	КонецЕсли;
	
	ФО_торо_НазначениеНаРемонтСУчетомРисков    = ПолучитьФункциональнуюОпцию("торо_НазначениеНаРемонтСУчетомРисков");
	ФО_торо_ИспользоватьСкользящееПланирование = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСкользящееПланирование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	флЗависимыеОтОстановочныхПриИзменении(Элементы.флЗависимыеОтОстановочных);
	Если ЗначениеЗаполнено(ОрганизацияДляОтбора) ИЛИ ЗначениеЗаполнено(ПодразделениеДляОтбора) Тогда
		ШаблонСообщения = НСтр("ru = 'Отбираются объекты ремонта принадлежащие %1 %2'");
		ТекстСообщения = "";
		Если ШаблонСообщения <> "" Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ?(ЗначениеЗаполнено(ОрганизацияДляОтбора), "организации """ + ОрганизацияДляОтбора + """", ""),?(ЗначениеЗаполнено(ПодразделениеДляОтбора), " подразделению """ + ПодразделениеДляОтбора + """", ""));
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ПриИзмененииОтбораРемонтов();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ПриИзмененииОтбораРемонтов();
КонецПроцедуры

&НаКлиенте
Процедура ФлажокЗавершенныеПриИзменении(Элемент)
	ПриИзмененииОтбораРемонтов();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОстановочныйПриИзменении(Элемент)
	
	ДокументОстановочныйПриИзмененииНаСервере();
	ПриИзмененииОтбораРемонтов();
	
КонецПроцедуры

&НаСервере
Процедура ДокументОстановочныйПриИзмененииНаСервере()
	
	IDОсновногоДляОтбораПоОстановочным = ДокументОстановочный.IDОсновногоРемонта;
	
КонецПроцедуры

&НаКлиенте
Процедура флЗависимыеОтОстановочныхПриИзменении(Элемент)
	
	Если Не флЗависимыеОтОстановочных Тогда
		ДокументОстановочный = Неопределено;
		IDОсновногоДляОтбораПоОстановочным = Неопределено;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		// Убрать директиву, когда эта строчка в веб-клиенте перестанет 
		// вызывать платформенную ошибку "b.ta is null".
		Элементы.ДокументОстановочный.Доступность = флЗависимыеОтОстановочных;
	#Иначе
		Элементы.ДокументОстановочный.ТолькоПросмотр = НЕ флЗависимыеОтОстановочных;
	#КонецЕсли
	
	ПриИзмененииОтбораРемонтов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования
&НаКлиенте
Процедура ДокументыОснованияПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.ДокументОснование)
		И НЕ торо_ОбщегоНазначенияКлиент.СравнитьПараметрыТекущейСтроки("СтрДокОснование", Элементы.ДокументыОснования.ТекущаяСтрока, ПараметрыТекущейСтроки) Тогда
		
		торо_ОбщегоНазначенияКлиент.ЗапомнитьПараметрыТекущейСтроки("СтрДокОснование", Элементы.ДокументыОснования.ТекущаяСтрока, ПараметрыТекущейСтроки);
		
		ДокументОснование = ТекДанные.ДокументОснование;
		СписокДО = Элементы.ДокументыОснования.ВыделенныеСтроки;
		ЗаполнитьРемонтыОборудования(СписокДО);
		
		УстановитьВидимостьДоступность(ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
	
	 ДокументыОснованияПриАктивизацииСтроки(Элементы.ДокументыОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийДокументОснование = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	
	Если ТекущийДокументОснование = Неопределено Тогда
		СписокВыбора = торо_ЗаполнениеДокументов.СформироватьСписокВыбораТипаДокументаОснования(Владелец);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент", Элемент));
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбор типа данных'"));
	Иначе
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ТипЗнч(ТекущийДокументОснование), ТекущийДокументОснование, Элемент, ЭтаФорма.КлючУникальности, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ДополнительныеПараметры.Элемент;
	торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ВыбранныйЭлемент.Значение, Неопределено, Элемент, ЭтаФорма.КлючУникальности, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПослеУдаления(Элемент)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Объект.РемонтыОборудования.Очистить();
		Объект.РемонтныеРаботы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
		
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МассивСтрок.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Указанный документ-основание уже выбран в другой строке!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ДеревоРемонтныхРабот.ПолучитьЭлементы().Очистить();
	КонецЕсли;

	Если Не (ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_АктПриемкиОборудования") Или ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_ОстановочныеРемонты")) Тогда
		Если Не ТекДанные = Неопределено И НЕ ТекДанные.ID = Неопределено
			И НЕ ТекДанные.ДокументОснование = ПредопределенноеЗначение("Документ.торо_ВыявленныеДефекты.ПустаяСсылка") 
			И НЕ ТекДанные.ДокументОснование = ПредопределенноеЗначение("Документ.торо_ЗаявкаНаРемонт.ПустаяСсылка") 
			И НЕ ТекДанные.ДокументОснование = ПредопределенноеЗначение("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка") 
			И НЕ ТекДанные.ДокументОснование = ПредопределенноеЗначение("Документ.торо_ПланГрафикРемонта.ПустаяСсылка") 
			И НЕ ТекДанные.ДокументОснование = ПредопределенноеЗначение("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПустаяСсылка") 
			И НЕ ТекДанные.ДокументОснование = ПредопределенноеЗначение("Документ.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка") 
			И (НЕ торо_ОбщегоНазначенияКлиент.СравнитьПараметрыТекущейСтроки("СтрРемОборудования", Элементы.РемонтыОборудования.ТекущаяСтрока, ПараметрыТекущейСтрокиРемонтовОборудования)
				Или ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество() = 0) Тогда
			
			торо_ОбщегоНазначенияКлиент.ЗапомнитьПараметрыТекущейСтроки("СтрРемОборудования", Элементы.РемонтыОборудования.ТекущаяСтрока, ПараметрыТекущейСтрокиРемонтовОборудования);
			Если РемонтПодходитПодОтбор(ТекДанные) Тогда
				СписокРО = Элементы.РемонтыОборудования.ВыделенныеСтроки;
				ЗаполнитьДеревоРемонтныхРабот(СписокРО);
			Иначе
				ДеревоРемонтныхРабот.ПолучитьЭлементы().Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТекДанные = Неопределено И ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество()>0 Тогда
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;	
	
	СообщениеОПроверкеТК = "";
	СообщениеОПроверкеСтатусов = "";
	МассивСообщенийТК = Новый Массив;
	МассивСообщенийОСтатусах = Новый Массив;
	Если ТекДанные <> Неопределено Тогда
		НайденныеРаботы = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
		Для Каждого СтрокаРР Из НайденныеРаботы Цикл
			Если ТипЗнч(СтрокаРР.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Если СтрокаРР.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Закрыта") Тогда 
					Сообщение = СтрШаблон("""%1""", СтрокаРР.РемонтнаяРабота);
					МассивСообщенийОСтатусах.Добавить(Сообщение);
				ИначеЕсли ЗначениеЗаполнено(ТекДанные.ДатаНачала) И ТекДанные.ДатаНачала < СтрокаРР.ДатаПринятия Тогда
					Сообщение = СтрШаблон("""%1"" (%2)", СтрокаРР.РемонтнаяРабота, Формат(СтрокаРР.ДатаПринятия,"ДФ=dd.MM.yyyy"));
					МассивСообщенийТК.Добавить(Сообщение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСообщенийТК.Количество() > 1 Тогда 
			Счетчик = 0;
			СообщениеОПроверкеТК = НСтр("ru = 'Даты принятия тех. карт'"); 
			Для Каждого Сообщение Из МассивСообщенийТК Цикл 
				Счетчик = Счетчик + 1; 
				Если Счетчик = МассивСообщенийТК.Количество() Тогда
					СообщениеОПроверкеТК = СтрШаблон("%1 %2", СообщениеОПроверкеТК, Сообщение);
				Иначе
					СообщениеОПроверкеТК = СтрШаблон("%1 %2,", СообщениеОПроверкеТК, Сообщение);
				КонецЕсли;
			КонецЦикла;
			СообщениеОПроверкеТК = СообщениеОПроверкеТК + НСтр("ru = ' больше плановой даты выделенного ремонта.'"); 
		ИначеЕсли МассивСообщенийТК.Количество() = 1 Тогда 
			СообщениеОПроверкеТК = СтрШаблон(НСтр("ru = 'Дата принятия тех. карты %1 больше плановой даты выделенного ремонта.'"), МассивСообщенийТК[0]);
		КонецЕсли;
		
		Если МассивСообщенийОСтатусах.Количество() > 1 Тогда 
			Счетчик = 0;
			СообщениеОПроверкеСтатусов = НСтр("ru = 'Тех. карты'"); 
			Для Каждого Сообщение Из МассивСообщенийОСтатусах Цикл 
				Счетчик = Счетчик + 1; 
				Если Счетчик = МассивСообщенийОСтатусах.Количество() Тогда
					СообщениеОПроверкеСтатусов = СтрШаблон("%1 %2", СообщениеОПроверкеСтатусов, Сообщение);
				Иначе
					СообщениеОПроверкеСтатусов = СтрШаблон("%1 %2,", СообщениеОПроверкеСтатусов, Сообщение);
				КонецЕсли;
			КонецЦикла;
			СообщениеОПроверкеСтатусов = СообщениеОПроверкеСтатусов + НСтр("ru = ' закрыты.'"); 
		ИначеЕсли МассивСообщенийОСтатусах.Количество() = 1 Тогда 
			СообщениеОПроверкеСтатусов = СтрШаблон(НСтр("ru = 'Тех. карта %1 закрыта.'"), МассивСообщенийОСтатусах[0]);
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимостьСообщений();
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДокОснование = Элементы.ДокументыОснования.ТекущиеДанные;
	
	Если ВыбраннаяСтрока <> Неопределено И ТекДокОснование <> Неопределено Тогда
		
		Строка = Объект.РемонтыОборудования.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если Строка <> Неопределено Тогда
			
			МассивИдСтрокРемонтов = Новый Массив;
			МассивИдСтрокРемонтов.Добавить(ВыбраннаяСтрока);
			
			МассивИДРемонтов = Новый Массив;
			МассивИДРемонтов.Добавить(Строка.ID);
			
			АдресХранилища = ПоместитьДанныеРемонтовВоВременноеХранилище(МассивИдСтрокРемонтов);
			
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ПодборРемонтов", Истина);
			СтруктураВозврата.Вставить("ЭтоРемонтнаяРабота", Ложь);
			СтруктураВозврата.Вставить("МассивИДРемонтов", МассивИДРемонтов);
			СтруктураВозврата.Вставить("АдресХранилища", АдресХранилища);
			
			ОповеститьОВыборе(СтруктураВозврата);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбран документ основание для подбора или ремонт!'"), 10);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДокОснование = Элементы.ДокументыОснования.ТекущиеДанные;
	СтрокаРО = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ВыбраннаяСтрока <> Неопределено И ТекДокОснование <> Неопределено И СтрокаРО <> Неопределено Тогда
		Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Строка <> Неопределено И Строка.ПолучитьРодителя() <> Неопределено Тогда
			
			СтрокаРемонтовОборудования = Новый Структура("ID, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, Завершен, ОбъектРемонта, ОбъектРемонтаВладелец, ДокументОснование, ОписаниеРемонта, ОписаниеРемонтаЯзык1, ОписаниеРемонтаЯзык2");
			ЗаполнитьЗначенияСвойств(СтрокаРемонтовОборудования, СтрокаРО);
			
			АдресХранилища = ПоместитьДанныеРемонтныхРаботВоВременноеХранилище(ВыбраннаяСтрока, ТекДокОснование.ДокументОснование, СтрокаРемонтовОборудования);
			
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ПодборРемонтов", Истина);
			СтруктураВозврата.Вставить("ЭтоРемонтнаяРабота", Истина);
			СтруктураВозврата.Вставить("АдресХранилища", АдресХранилища);
			
			ОповеститьОВыборе(СтруктураВозврата);
			
		КонецЕсли;
		
	Иначе 
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбран документ основание для подбора или ремонт!'"), 10);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Выбрать(Команда)
	
	Если Элементы.ДокументыОснования.ВыделенныеСтроки.Количество() > 0 Тогда
		МассивИдСтрокРемонтов = Новый Массив;
		МассивИДРемонтов = Новый Массив;
		
		Для Каждого СтрокаДокументыОснования Из Элементы.ДокументыОснования.ВыделенныеСтроки Цикл
			Строка = Объект.ДокументыОснования.НайтиПоИдентификатору(СтрокаДокументыОснования);
			Если Строка <> Неопределено Тогда
				СтруктураПоискаДО = Новый Структура("ДокументОснование", Строка.ДокументОснование);
				
				МассивРО = Объект.РемонтыОборудования.НайтиСтроки(СтруктураПоискаДО);
				Для Каждого ЭлементМассиваРО Из МассивРО Цикл
					Если (ЗначениеЗаполнено(ДатаНачала) И ЭлементМассиваРО.ДатаНачала < ДатаНачала) ИЛИ 
						(ЗначениеЗаполнено(ДатаОкончания) И ЭлементМассиваРО.ДатаОкончания > ДатаОкончания) Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ФлажокЗавершенные И ЭлементМассиваРО.Завершен Тогда
						Продолжить;
					КонецЕсли; 
					
					ИдСтроки = ЭлементМассиваРО.ПолучитьИдентификатор();
					
					Если Не Элементы.РемонтыОборудования.ПроверитьСтроку(ИдСтроки) Тогда
						Продолжить;
					КонецЕсли;
					
					МассивИдСтрокРемонтов.Добавить(ИдСтроки);
					МассивИДРемонтов.Добавить(ЭлементМассиваРО.ID);
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
				
		АдресХранилища = ПоместитьДанныеРемонтовВоВременноеХранилище(МассивИдСтрокРемонтов);
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ПодборРемонтов", Истина);
		СтруктураВозврата.Вставить("ЭтоРемонтнаяРабота", Ложь);
		СтруктураВозврата.Вставить("МассивИДРемонтов", МассивИДРемонтов);
		СтруктураВозврата.Вставить("АдресХранилища", АдресХранилища);
		
		ОповеститьОВыборе(СтруктураВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРемонтыОборудования(СписокДокументОснование)
	
	// собираем все документы-основания в массив
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("ДокументОснование");
	
	ТипДокОснования = ТипЗнч(СписокДокументОснование);
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипДокОснования) Тогда
		Нс = ТаблицаОтбора.Добавить();
		Нс.ДокументОснование = СписокДокументОснование;
	ИначеЕсли ТипДокОснования = Тип("Массив") Тогда
		Для Каждого ТекСтрока Из СписокДокументОснование Цикл
			Строка = Объект.ДокументыОснования.НайтиПоИдентификатору(ТекСтрока);
			Если Строка <> Неопределено Тогда
				НС = ТаблицаОтбора.Добавить();
				НС.ДокументОснование = Строка.ДокументОснование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не СписокДокументОснование = Неопределено Тогда
		Объект.РемонтыОборудования.Очистить();
		Объект.РемонтныеРаботы.Очистить();
		ДокументыОснования = Новый Соответствие;
		НомерПП = 0;
		Для Каждого Стр Из ТаблицаОтбора Цикл
			НомерПП = НомерПП + 1;
			ДокументыОснования.Вставить(НомерПП, Стр.ДокументОснование);
		КонецЦикла;
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Владелец", Владелец);
		Если ИспользоватьОтборПоОрганизацииИПодразделению Тогда
			ПараметрыЗаполнения.Вставить("ОрганизацияДляОтбора", ОрганизацияДляОтбора);
			ПараметрыЗаполнения.Вставить("ПодразделениеДляОтбора", ПодразделениеДляОтбора);
		КонецЕсли; 
		торо_ЗаполнениеДокументов20.ЗаполнитьДокументНаОсновании(ДокументыОснования, Объект, ПараметрыЗаполнения);
		
		// Мультиязычное хранение данных
		торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "РемонтыОборудования"); 
		ЗаполнениеДатПринятияТК();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДатПринятияТК()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВерсииТехКартСрезПервых.Период КАК Период,
	               |	торо_ВерсииТехКартСрезПервых.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
	               |	торо_ВерсииТехКартСрезПервых.ИдентификаторТехКарты.Статус КАК Статус
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.СрезПервых(, ИдентификаторТехКарты В (&СписокТК)) КАК торо_ВерсииТехКартСрезПервых";
	ВсеОперации = Новый Массив;
	СтрокиТехКарт = Новый Массив;
	Для Каждого СтрокаРемонта Из Объект.РемонтныеРаботы Цикл
		Если ТипЗнч(СтрокаРемонта.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ВсеОперации.Добавить(СтрокаРемонта.РемонтнаяРабота);
			СтрокиТехКарт.Добавить(СтрокаРемонта);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокТК", ВсеОперации);
	РезЗапроса = Запрос.Выполнить();
	Если НЕ РезЗапроса.Пустой() Тогда
		ТаблицаДат = РезЗапроса.Выгрузить();
		Для Каждого СтрокаСТК Из СтрокиТехКарт Цикл 
			НайденныеДаты = ТаблицаДат.НайтиСтроки(Новый Структура("ИдентификаторТехКарты", СтрокаСТК.РемонтнаяРабота));
			Если НайденныеДаты.Количество() Тогда 
				СтрокаСТК.ДатаПринятия = НайденныеДаты[0].Период;
				СтрокаСТК.Статус = НайденныеДаты[0].Статус;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьВидимостьДоступность(ДокументОснование = Неопределено)
	
	ВидимостьОбъектРемонтаВладелец = Ложь;
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		
		Если ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			
			ВидимостьОбъектРемонтаВладелец = Истина;
			
		КонецЕсли;
		
		Если ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") ИЛИ ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") ИЛИ ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
			
			Элементы.ДеревоРемонтныхРабот.ПодчиненныеЭлементы.ДеревоРемонтныхРаботЗаявка.Видимость = Ложь;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Если НЕ ДокументОснование = Неопределено Тогда
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
				ВидимостьОбъектРемонтаВладелец = Истина;
			Иначе	
				ВидимостьОбъектРемонтаВладелец = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		// Убрать директиву, когда эта строчка в веб-клиенте перестанет 
		// вызывать платформенную ошибку "b.ta is null".
		Если Элементы.РемонтыОборудованияОбъектРемонтаВладелец.Видимость <> ВидимостьОбъектРемонтаВладелец Тогда
			Элементы.РемонтыОборудованияОбъектРемонтаВладелец.Видимость = ВидимостьОбъектРемонтаВладелец;
		КонецЕсли;
		
		Если ВидимостьОбъектРемонтаВладелец Тогда
			Элементы.РемонтыОборудованияОбъектРемонта.Заголовок = НСтр("ru = 'Отказавший элемент'");
		Иначе
			Элементы.РемонтыОборудованияОбъектРемонта.Заголовок = НСтр("ru = 'Объект ремонта'");
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
// Процедура выполняет первоначальное заполнение элемента формы "ДеревоРемонтныхРабот".
//
Процедура ЗаполнитьДеревоРемонтныхРабот(СписокРемонтовОборудования)
	
	ДополнитьТаблицуРемонтныхРабот(СписокРемонтовОборудования);
	
	ДеревоЗначение = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	ДеревоЗначение.Строки.Очистить();
	
	Для Каждого СтрокаРемОборудования Из СписокРемонтовОборудования Цикл
		
		СтрокаРемонтовОборудования = Объект.РемонтыОборудования.НайтиПоИдентификатору(СтрокаРемОборудования);
		
		Если СтрокаРемонтовОборудования = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из Объект.РемонтыОборудования Цикл
				
				// 0 - й уровень дерева
				КорневаяСтрока = ДеревоЗначение.Строки.Добавить();
				КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";
				КорневаяСтрока.Картинка = 4;
				КорневаяСтрока.РемонтыОборудования_ID = СтрокаТЧ.ID;
				
				МассивСтрок  = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаТЧ.ID));
				ТаблицаСтрок = Объект.РемонтныеРаботы.Выгрузить(МассивСтрок);
				
				ТекущиеЗначения = Новый Структура("Родитель_ID, РемонтыОборудования_ID, ID", КорневаяСтрока.Родитель_ID, КорневаяСтрока.РемонтыОборудования_ID, КорневаяСтрока.ID);
				торо_Ремонты.СоздатьВетвьДереваПоТабличнойЧасти(ДеревоЗначение, ТекущиеЗначения, ТаблицаСтрок);
				
			КонецЦикла; 
			
		Иначе
			
			// 0 - й уровень дерева
			КорневаяСтрока = ДеревоЗначение.Строки.Добавить();
			КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";
			КорневаяСтрока.Картинка = 4;
			КорневаяСтрока.РемонтыОборудования_ID = СтрокаРемонтовОборудования.ID;
			
			МассивСтрок  = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID));
			ТаблицаСтрок = Объект.РемонтныеРаботы.Выгрузить(МассивСтрок);
			
			ТекущиеЗначения = Новый Структура("Родитель_ID, РемонтыОборудования_ID, ID", КорневаяСтрока.Родитель_ID, КорневаяСтрока.РемонтыОборудования_ID, КорневаяСтрока.ID);
			торо_Ремонты.СоздатьВетвьДереваПоТабличнойЧасти(ДеревоЗначение, ТекущиеЗначения, ТаблицаСтрок);
			
		КонецЕсли; 
		
		Элементы.ДеревоРемонтныхРабот.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначение, "ДеревоРемонтныхРабот");
	
	торо_ДанныеФормыДеревоКлиентСервер.ОбновитьПроцентыВыполненияВДеревеРемонтныхРабот(ДеревоРемонтныхРабот);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуРемонтныхРабот(СписокРемонтов)

	СписокРемонтовID = Новый СписокЗначений;
	Для Каждого СтрокаСРем Из СписокРемонтов Цикл
		
		СтрокаСРемонтом = Объект.РемонтыОборудования.НайтиПоИдентификатору(СтрокаСРем);
		Если НЕ СтрокаСРемонтом = Неопределено Тогда
			СписокРемонтовID.Добавить(СтрокаСРемонтом.ID);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РемонтныеРаботы.ID КАК ID,
	               |	РемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	РемонтныеРаботы.Выполнено КАК Выполнено,
	               |	РемонтныеРаботы.ПроцентВыполненияРабот КАК ПроцентВыполненияРабот,
	               |	РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	РемонтныеРаботы.Родитель_ID КАК Родитель_ID
	               |ПОМЕСТИТЬ ТаблицаРабот
	               |ИЗ
	               |	&РемонтныеРаботы КАК РемонтныеРаботы
	               |ГДЕ
	               |	РемонтныеРаботы.РемонтыОборудования_ID В(&СписокРемонтов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	РемонтныеРаботы.РемонтыОборудования_ID,
	               |	РемонтныеРаботы.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |ГДЕ
				   |	торо_ОбщиеДанныеПоРемонтам.IDРемонта В (&СписокРемонтов)
	               |	И торо_ОбщиеДанныеПоРемонтам.ДокументНачалаЦепочки ССЫЛКА Документ.торо_ВыявленныеДефекты";
	
	Запрос.УстановитьПараметр("РемонтныеРаботы", Объект.РемонтныеРаботы.Выгрузить());
	Запрос.УстановитьПараметр("СписокРемонтов", СписокРемонтовID);
	РезЗапроса = Запрос.ВыполнитьПакет(); 		
	ЕстьДефекты = Ложь;
	ИДДефектов = Новый Массив;
	Если НЕ РезЗапроса[1].Пустой() Тогда 
		ЕстьДефекты = Истина;
		ИДДефектов = РезЗапроса[1].Выгрузить().ВыгрузитьКолонку("IDРемонта");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
	               |	торо_ЗаявкиПоРемонтамСрезПоследних.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ВТ_НеотмененныеЗаявки
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, IDРемонта В (&СписокРемонтов)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ЗаявкиПоРемонтамСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРабот.ID КАК IDОперации,
	               |	ТаблицаРабот.РемонтыОборудования_ID КАК IDРемонта,
	               |	торо_ЗаявкаНаРемонт.Ссылка КАК Регистратор
	               |ПОМЕСТИТЬ торо_ЗапланированныеРемонтныеРаботы
	               |ИЗ
	               |	ТаблицаРабот КАК ТаблицаРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеотмененныеЗаявки КАК ВТ_НеотмененныеЗаявки
	               |		ПО (ВТ_НеотмененныеЗаявки.IDРемонта = ТаблицаРабот.РемонтыОборудования_ID)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонт
	               |		ПО (торо_ЗаявкаНаРемонт.Ссылка = ВТ_НеотмененныеЗаявки.Регистратор)
	               |			И (торо_ЗаявкаНаРемонт.РемонтыОборудования_ID = ТаблицаРабот.РемонтыОборудования_ID)
	               |			И ТаблицаРабот.ID = торо_ЗаявкаНаРемонт.ID
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаРабот.ID,
	               |	ТаблицаРабот.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонт.Ссылка
	               |ИЗ
	               |	ТаблицаРабот КАК ТаблицаРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеотмененныеЗаявки КАК ВТ_НеотмененныеЗаявки
	               |		ПО (ВТ_НеотмененныеЗаявки.IDРемонта = ТаблицаРабот.РемонтыОборудования_ID)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонт
	               |		ПО (торо_ЗаявкаНаРемонт.Ссылка = ВТ_НеотмененныеЗаявки.Регистратор)
	               |			И (торо_ЗаявкаНаРемонт.РемонтыОборудования_ID = ТаблицаРабот.РемонтыОборудования_ID)
	               |			И ТаблицаРабот.РемонтнаяРабота = торо_ЗаявкаНаРемонт.РемонтнаяРабота
	               |ГДЕ
	               |	&ЕстьДефекты
	               |	И ТаблицаРабот.РемонтыОборудования_ID В(&ИДДефектов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	IDОперации;";
	
	Если ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") 
		ИЛИ ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	торо_ПроцентВыполненныхРабот.ВидДокумента КАК ВидДокумента,
		                              |	торо_ПроцентВыполненныхРабот.IDРемонта КАК ID,
		                              |	торо_ПроцентВыполненныхРабот.Регистратор КАК Регистратор
		                              |ПОМЕСТИТЬ торо_ВыполняемыеРемонтныеРаботы
		                              |ИЗ
		                              |	РегистрНакопления.торо_ПроцентВыполненныхРабот КАК торо_ПроцентВыполненныхРабот
		                              |ГДЕ
		                              |	торо_ПроцентВыполненныхРабот.IDРемонта В
		                              |			(ВЫБРАТЬ
		                              |				ТР.РемонтыОборудования_ID
		                              |			ИЗ
		                              |				ТаблицаРабот КАК ТР)
		                              |	И торо_ПроцентВыполненныхРабот.Регистратор <> &Ссылка
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |ВЫБРАТЬ
		                              |	торо_ВыполняемыеРемонтныеРаботы.ID КАК ID,
		                              |	торо_ВыполняемыеРемонтныеРаботы.Регистратор КАК Регистратор
		                              |ПОМЕСТИТЬ торо_ВыполняемыеРемонтныеРаботыНаряды
		                              |ИЗ
		                              |	торо_ВыполняемыеРемонтныеРаботы КАК торо_ВыполняемыеРемонтныеРаботы
		                              |ГДЕ
		                              |	торо_ВыполняемыеРемонтныеРаботы.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.торо_ВидДокумента.НарядНаВыполнениеРегламентногоМероприятия)
		                              |
		                              |ИНДЕКСИРОВАТЬ ПО
		                              |	торо_ВыполняемыеРемонтныеРаботы.ID
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |ВЫБРАТЬ
		                              |	торо_ВыполняемыеРемонтныеРаботы.ID КАК ID,
		                              |	торо_ВыполняемыеРемонтныеРаботы.Регистратор КАК Регистратор
		                              |ПОМЕСТИТЬ торо_ВыполняемыеРемонтныеРаботыАкты
		                              |ИЗ
		                              |	торо_ВыполняемыеРемонтныеРаботы КАК торо_ВыполняемыеРемонтныеРаботы
		                              |ГДЕ
		                              |	торо_ВыполняемыеРемонтныеРаботы.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.торо_ВидДокумента.АктОВыполненииРегламентногоМероприятия)
		                              |
		                              |ИНДЕКСИРОВАТЬ ПО
		                              |	торо_ВыполняемыеРемонтныеРаботы.ID
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |ВЫБРАТЬ
		                              |	торо_ЗавершенныеМероприятия.Регистратор КАК Регистратор,
		                              |	торо_ЗавершенныеМероприятия.ID КАК ID
		                              |ПОМЕСТИТЬ торо_ЗавершенныеМероприятия
		                              |ИЗ
		                              |	РегистрСведений.торо_ЗавершенныеМероприятия КАК торо_ЗавершенныеМероприятия
		                              |ГДЕ
		                              |	торо_ЗавершенныеМероприятия.ID В
		                              |			(ВЫБРАТЬ
		                              |				ТР.РемонтыОборудования_ID
		                              |			ИЗ
		                              |				ТаблицаРабот КАК ТР)
		                              |	И торо_ЗавершенныеМероприятия.Регистратор <> &Ссылка";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	торо_НарядыПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
		                              |	торо_НарядыПоРемонтамСрезПоследних.ДокументНаряд КАК ДокументНаряд
		                              |ПОМЕСТИТЬ ВТ_Наряды
		                              |ИЗ
		                              |	РегистрСведений.торо_НарядыПоРемонтам.СрезПоследних(, IDРемонта В (&СписокРемонтов)) КАК торо_НарядыПоРемонтамСрезПоследних
		                              |
		                              |ИНДЕКСИРОВАТЬ ПО
		                              |	IDРемонта,
		                              |	ДокументНаряд
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |ВЫБРАТЬ
		                              |	торо_АктыПоРемонтамСрезПоследних.IDРемонта КАК IDРемонта,
		                              |	торо_АктыПоРемонтамСрезПоследних.ДокументАкт КАК ДокументАкт
		                              |ПОМЕСТИТЬ ВТ_Акты
		                              |ИЗ
		                              |	РегистрСведений.торо_АктыПоРемонтам.СрезПоследних(, IDРемонта В (&СписокРемонтов)) КАК торо_АктыПоРемонтамСрезПоследних
		                              |
		                              |ИНДЕКСИРОВАТЬ ПО
		                              |	IDРемонта,
		                              |	ДокументАкт
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |ВЫБРАТЬ
		                              |	ТаблицаРабот.ID КАК IDОперации,
		                              |	ТаблицаРабот.РемонтыОборудования_ID КАК IDРемонта,
		                              |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка КАК Регистратор
		                              |ПОМЕСТИТЬ торо_ВыполняемыеРемонтныеРаботыНаряды
		                              |ИЗ
		                              |	ТаблицаРабот КАК ТаблицаРабот
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Наряды КАК ВТ_Наряды
		                              |		ПО (ВТ_Наряды.IDРемонта = ТаблицаРабот.РемонтыОборудования_ID)
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРабот
		                              |		ПО (торо_НарядНаВыполнениеРемонтныхРабот.Ссылка = ВТ_Наряды.ДокументНаряд)
		                              |			И (торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования_ID = ТаблицаРабот.РемонтыОборудования_ID)
		                              |			И ТаблицаРабот.ID = торо_НарядНаВыполнениеРемонтныхРабот.ID
		                              |
		                              |ОБЪЕДИНИТЬ
		                              |
		                              |ВЫБРАТЬ
		                              |	ТаблицаРабот.ID,
		                              |	ТаблицаРабот.РемонтыОборудования_ID,
		                              |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка
		                              |ИЗ
		                              |	ТаблицаРабот КАК ТаблицаРабот
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Наряды КАК ВТ_Наряды
		                              |		ПО (ВТ_Наряды.IDРемонта = ТаблицаРабот.РемонтыОборудования_ID)
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРабот
		                              |		ПО (торо_НарядНаВыполнениеРемонтныхРабот.Ссылка = ВТ_Наряды.ДокументНаряд)
		                              |			И (торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования_ID = ТаблицаРабот.РемонтыОборудования_ID)
		                              |			И ТаблицаРабот.РемонтнаяРабота = торо_НарядНаВыполнениеРемонтныхРабот.РемонтнаяРабота
		                              |ГДЕ
		                              |	&ЕстьДефекты
		                              |	И ТаблицаРабот.РемонтыОборудования_ID В(&ИДДефектов)
		                              |
		                              |ИНДЕКСИРОВАТЬ ПО
		                              |	IDРемонта,
		                              |	IDОперации
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |ВЫБРАТЬ
		                              |	ТаблицаРабот.ID КАК IDОперации,
		                              |	ТаблицаРабот.РемонтыОборудования_ID КАК IDРемонта,
		                              |	торо_АктОВыполненииЭтапаРабот.Ссылка КАК Регистратор
		                              |ПОМЕСТИТЬ торо_ВыполняемыеРемонтныеРаботыАкты
		                              |ИЗ
		                              |	ТаблицаРабот КАК ТаблицаРабот
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Акты КАК ВТ_Акты
		                              |		ПО (ВТ_Акты.IDРемонта = ТаблицаРабот.РемонтыОборудования_ID)
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРабот
		                              |		ПО (торо_АктОВыполненииЭтапаРабот.Ссылка = ВТ_Акты.ДокументАкт)
		                              |			И (торо_АктОВыполненииЭтапаРабот.РемонтыОборудования_ID = ТаблицаРабот.РемонтыОборудования_ID)
		                              |			И ТаблицаРабот.ID = торо_АктОВыполненииЭтапаРабот.ID
		                              |
		                              |ОБЪЕДИНИТЬ
		                              |
		                              |ВЫБРАТЬ
		                              |	ТаблицаРабот.ID,
		                              |	ТаблицаРабот.РемонтыОборудования_ID,
		                              |	торо_АктОВыполненииЭтапаРабот.Ссылка
		                              |ИЗ
		                              |	ТаблицаРабот КАК ТаблицаРабот
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Акты КАК ВТ_Акты
		                              |		ПО (ВТ_Акты.IDРемонта = ТаблицаРабот.РемонтыОборудования_ID)
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРабот
		                              |		ПО (торо_АктОВыполненииЭтапаРабот.Ссылка = ВТ_Акты.ДокументАкт)
		                              |			И (торо_АктОВыполненииЭтапаРабот.РемонтыОборудования_ID = ТаблицаРабот.РемонтыОборудования_ID)
		                              |			И ТаблицаРабот.РемонтнаяРабота = торо_АктОВыполненииЭтапаРабот.РемонтнаяРабота
		                              |ГДЕ
		                              |	&ЕстьДефекты
		                              |	И ТаблицаРабот.РемонтыОборудования_ID В(&ИДДефектов)
		                              |
		                              |ИНДЕКСИРОВАТЬ ПО
		                              |	IDРемонта,
		                              |	IDОперации
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |ВЫБРАТЬ
		                              |	торо_ЗавершенныеРемонтныеРаботы.Регистратор КАК Регистратор,
		                              |	торо_ЗавершенныеРемонтныеРаботы.ID КАК ID
		                              |ПОМЕСТИТЬ торо_ЗавершенныеРемонтныеРаботы
		                              |ИЗ
		                              |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(
		                              |			,
		                              |			ID В
		                              |					(ВЫБРАТЬ
		                              |						ТР.РемонтыОборудования_ID
		                              |					ИЗ
		                              |						ТаблицаРабот КАК ТР)
		                              |				И Регистратор <> &Ссылка) КАК торо_ЗавершенныеРемонтныеРаботы";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРабот.ID КАК ID,
	|	ТаблицаРабот.РемонтыОборудования_ID,
	|	ВЫБОР
	|		КОГДА НЕ торо_ЗапланированныеРемонтныеРаботы.Регистратор ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Заявка,
	|	ВЫБОР
	|		КОГДА НЕ торо_ВыполняемыеРемонтныеРаботыНаряды.Регистратор ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Наряд,
	|	ВЫБОР
	|		КОГДА НЕ торо_ВыполняемыеРемонтныеРаботыАкты.Регистратор ЕСТЬ NULL 
	|				ИЛИ НЕ торо_ЗавершенныеРемонтныеРаботы.Регистратор ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Акт,
	|	ВЫБОР
	|		КОГДА НЕ торо_ЗавершенныеРемонтныеРаботы.Регистратор ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Завершена
	|ИЗ
	|	ТаблицаРабот КАК ТаблицаРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
	|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ЗапланированныеРемонтныеРаботы.IDРемонта
	|			И ТаблицаРабот.ID = торо_ЗапланированныеРемонтныеРаботы.IDОперации";
	
	Если ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") 
		ИЛИ ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_ВыполняемыеРемонтныеРаботыНаряды КАК торо_ВыполняемыеРемонтныеРаботыНаряды
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ВыполняемыеРемонтныеРаботыНаряды.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_ВыполняемыеРемонтныеРаботыАкты КАК торо_ВыполняемыеРемонтныеРаботыАкты
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ВыполняемыеРемонтныеРаботыАкты.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_ЗавершенныеМероприятия КАК торо_ЗавершенныеРемонтныеРаботы
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ЗавершенныеРемонтныеРаботы.ID
		|		";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ЗавершенныеРемонтныеРаботы.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_ВыполняемыеРемонтныеРаботыНаряды КАК торо_ВыполняемыеРемонтныеРаботыНаряды
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ВыполняемыеРемонтныеРаботыНаряды.IDРемонта
		|			И ТаблицаРабот.ID = торо_ВыполняемыеРемонтныеРаботыНаряды.IDОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_ВыполняемыеРемонтныеРаботыАкты КАК торо_ВыполняемыеРемонтныеРаботыАкты
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ВыполняемыеРемонтныеРаботыАкты.IDРемонта
		|			И ТаблицаРабот.ID = торо_ВыполняемыеРемонтныеРаботыАкты.IDОперации";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
		
	Запрос.УстановитьПараметр("Ссылка", Владелец);
	Запрос.УстановитьПараметр("СписокРемонтов", СписокРемонтовID);
	Запрос.УстановитьПараметр("ИДДефектов", ИДДефектов);
	Запрос.УстановитьПараметр("ЕстьДефекты", ЕстьДефекты);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗПроверки = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.РемонтныеРаботы Цикл
		
		СтрокиПроверки = ТЗПроверки.НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаТЧ.ID, СтрокаТЧ.РемонтыОборудования_ID));
		
		Если СтрокиПроверки.Количество() > 0 Тогда
			СтрокаПроверки = СтрокиПроверки[0];
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаПроверки);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТЧ.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") И ТЗПроверки.НайтиСтроки(Новый Структура("Акт, РемонтыОборудования_ID", Истина, СтрокаТЧ.РемонтыОборудования_ID)).Количество() > 0 Тогда
			СтрокаТЧ.Акт = Истина;
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаТЧ.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") И ТЗПроверки.НайтиСтроки(Новый Структура("Заявка, РемонтыОборудования_ID", Истина, СтрокаТЧ.РемонтыОборудования_ID)).Количество() > 0 Тогда
			СтрокаТЧ.Заявка = Истина;
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаТЧ.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") И ТЗПроверки.НайтиСтроки(Новый Структура("Наряд, РемонтыОборудования_ID", Истина, СтрокаТЧ.РемонтыОборудования_ID)).Количество() > 0 Тогда
			СтрокаТЧ.Наряд = Истина;
		КонецЕсли;
				
	КонецЦикла;
	
	Если ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТаблицаВыбранныхРабот ИЗ &ТЗПроверки КАК ТЗПроверки";
		Запрос.УстановитьПараметр("ТЗПроверки", ТЗПроверки);
		Запрос.Выполнить();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ТаблицаВыбранныхРабот.ID,
		|	ТаблицаВыбранныхРабот.РемонтыОборудования_ID,
		|	ЛОЖЬ КАК Наряд,
		|	ЛОЖЬ КАК Акт,
		|	ЛОЖЬ КАК АктЗакрывающийРаботы
		|ИЗ
		|	ТаблицаВыбранныхРабот КАК ТаблицаВыбранныхРабот
		|ГДЕ
		|	(ТаблицаВыбранныхРабот.Заявка
		|			ИЛИ ТаблицаВыбранныхРабот.Наряд
		|			ИЛИ ТаблицаВыбранныхРабот.Акт)";
		
		ТЗВыделяемыеРаботыЗначение = РеквизитФормыВЗначение("ТЗВыделяемыеРаботы");
		ТЗВыделяемыеРаботыЗначение = Запрос.Выполнить().Выгрузить();
		ЗначениеВРеквизитФормы(ТЗВыделяемыеРаботыЗначение, "ТЗВыделяемыеРаботы");
		
	ИначеЕсли ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ТаблицаРабот.ID,
		|	ТаблицаРабот.РемонтыОборудования_ID,
		|	ВЫБОР
		|		КОГДА (НЕ торо_НарядыПоРемонтам.Регистратор ЕСТЬ NULL )
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Наряд,
		|	ВЫБОР
		|		КОГДА (НЕ торо_АктыПоРемонтам.Регистратор ЕСТЬ NULL )
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Акт,
		|	ВЫБОР
		|		КОГДА (НЕ торо_ЗавершенныеРемонтныеРаботы.Регистратор ЕСТЬ NULL )
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК АктЗакрывающийРаботы
		|ПОМЕСТИТЬ ТаблицаПроверки
		|ИЗ
		|	ТаблицаРабот КАК ТаблицаРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НарядыПоРемонтам КАК торо_НарядыПоРемонтам
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_НарядыПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктыПоРемонтам КАК торо_АктыПоРемонтам
		|		ПО ТаблицаРабот.ID = торо_АктыПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ЗавершенныеРемонтныеРаботы.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПроверки.ID,
		|	ТаблицаПроверки.РемонтыОборудования_ID,
		|	ТаблицаПроверки.Наряд,
		|	ТаблицаПроверки.Акт,
		|	ТаблицаПроверки.АктЗакрывающийРаботы
		|ИЗ
		|	ТаблицаПроверки КАК ТаблицаПроверки
		|ГДЕ
		|	(ТаблицаПроверки.Наряд
		|			ИЛИ ТаблицаПроверки.Акт
		|			ИЛИ ТаблицаПроверки.АктЗакрывающийРаботы)";
		
		
		Запрос.УстановитьПараметр("Ссылка", Владелец);
		Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		
		ТЗВыделяемыеРаботыЗначение = РеквизитФормыВЗначение("ТЗВыделяемыеРаботы");
		ТЗВыделяемыеРаботыЗначение = Запрос.Выполнить().Выгрузить();
		ЗначениеВРеквизитФормы(ТЗВыделяемыеРаботыЗначение, "ТЗВыделяемыеРаботы");
				
	ИначеЕсли ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ТаблицаРабот.ID,
		|	ТаблицаРабот.РемонтыОборудования_ID,
		|	ВЫБОР 
		|		КОГДА (НЕ торо_АктыПоРемонтам.Регистратор ЕСТЬ NULL ) ИЛИ (НЕ торо_ЗавершенныеРемонтныеРаботы.Регистратор ЕСТЬ NULL )
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Акт
		|ПОМЕСТИТЬ ТаблицаПроверки
		|ИЗ
		|	ТаблицаРабот КАК ТаблицаРабот                                      
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктыПоРемонтам КАК торо_АктыПоРемонтам
		|		ПО ТаблицаРабот.ID = торо_АктыПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|		ПО ТаблицаРабот.РемонтыОборудования_ID = торо_ЗавершенныеРемонтныеРаботы.ID;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПроверки.ID,
		|	ТаблицаПроверки.РемонтыОборудования_ID,
		|	ЛОЖЬ КАК Наряд,
		|	ТаблицаПроверки.Акт,
		|	ЛОЖЬ КАК АктЗакрывающийРаботы
		|ИЗ
		|	ТаблицаПроверки КАК ТаблицаПроверки
		|ГДЕ
		|	ТаблицаПроверки.Акт";
		
		Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		Запрос.УстановитьПараметр("Ссылка", Владелец);
		
		ТЗВыделяемыеРаботыЗначение = РеквизитФормыВЗначение("ТЗВыделяемыеРаботы");
		ТЗВыделяемыеРаботыЗначение = Запрос.Выполнить().Выгрузить();
		ЗначениеВРеквизитФормы(ТЗВыделяемыеРаботыЗначение, "ТЗВыделяемыеРаботы");
		
	КонецЕсли;	

КонецПроцедуры
	
&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ДокументыОснования.Количество() >= 1 И ТипЗнч(Владелец) = Тип("ДокументСсылка.торо_ОстановочныеРемонты") Тогда
		ТекстСообщения = НСтр("ru = 'При выборе остановочного ремонта можно выбирать только один документ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
		ДокументОснование = ТекДанные.ДокументОснование;
		СписокДО = Элементы.ДокументыОснования.ВыделенныеСтроки;
		ЗаполнитьРемонтыОборудования(СписокДО);
		УстановитьВидимостьДоступность(ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоОрганизацииИПодразделениюПриИзменении(Элемент)
	ДокументыОснованияПриИзменении(Элементы.ДокументыОснования);
	ПриИзмененииОтбораРемонтов();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбораРемонтов()
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	ОтборПоДатеОкончания = ?(Не ЗначениеЗаполнено(ДатаОкончания), Ложь, Истина);
	ОтборПоДатеНачала = ?(Не ЗначениеЗаполнено(ДатаНачала), Ложь, Истина);
	ОтборПоЗавершенным = ?(ФлажокЗавершенные, Истина, Ложь);
	ОтборПоЗависимымОтОстановочных = ?(Элементы.флЗависимыеОтОстановочных.Видимость И флЗависимыеОтОстановочных, Истина, Ложь);
	ОтборПоОсновномуДляОстановочных = ?(ОтборПоЗависимымОтОстановочных И ЗначениеЗаполнено(IDОсновногоДляОтбораПоОстановочным), Истина, Ложь);
	
	Если Не ОтборПоДатеНачала И Не ОтборПоДатеОкончания И ОтборПоЗавершенным
		И Не ОтборПоЗависимымОтОстановочных И Не ОтборПоОсновномуДляОстановочных Тогда
		Если Объект.РемонтыОборудования.Количество() > 0 Тогда
		    Элементы.РемонтыОборудования.ТекущаяСтрока = Объект.РемонтыОборудования[0].ПолучитьИдентификатор();
			РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
		КонецЕсли;
		
		Возврат;
	Иначе
		Для каждого Ремонт Из Объект.РемонтыОборудования Цикл
			Если Не ОтборПоЗавершенным И Ремонт.Завершен Тогда
			    Продолжить;
			КонецЕсли;
			
			Если ОтборПоДатеОкончания И ДатаОкончания < Ремонт.ДатаОкончания Тогда
			    Продолжить;
			КонецЕсли;
			
			Если ОтборПоДатеНачала И ДатаНачала > Ремонт.ДатаНачала Тогда
			    Продолжить;
			КонецЕсли;
			
			Если ОтборПоЗависимымОтОстановочных И Не ЗначениеЗаполнено(Ремонт.IDОсновного) Тогда
			    Продолжить;
			КонецЕсли;
			
			Если ОтборПоОсновномуДляОстановочных И Не Ремонт.IDОсновного = IDОсновногоДляОтбораПоОстановочным Тогда
			    Продолжить;
			КонецЕсли;
			
			Идентификатор = Ремонт.ПолучитьИдентификатор();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Идентификатор;
			РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
			Возврат;
		КонецЦикла;
		
		Если Объект.РемонтыОборудования.Количество() > 0 Тогда
			ДеревоРемонтныхРабот.ПолучитьЭлементы().Очистить();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Неопределено;
			РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РемонтПодходитПодОтбор(Ремонт)
	ОтборПоДатеОкончания = ?(Не ЗначениеЗаполнено(ДатаОкончания), Ложь, Истина);
	ОтборПоДатеНачала = ?(Не ЗначениеЗаполнено(ДатаНачала), Ложь, Истина);
	ОтборПоЗавершенным = ?(ФлажокЗавершенные, Истина, Ложь);
	ОтборПоЗависимымОтОстановочных = ?(Элементы.флЗависимыеОтОстановочных.Видимость И флЗависимыеОтОстановочных, Истина, Ложь);
	ОтборПоОсновномуДляОстановочных = ?(ОтборПоЗависимымОтОстановочных И ЗначениеЗаполнено(IDОсновногоДляОтбораПоОстановочным), Истина, Ложь);
	
	Если Не ОтборПоДатеНачала И Не ОтборПоДатеОкончания И ОтборПоЗавершенным
		И Не ОтборПоЗависимымОтОстановочных И Не ОтборПоОсновномуДляОстановочных Тогда
		Возврат Истина;
	Иначе
		Если Не ОтборПоЗавершенным И Ремонт.Завершен Тогда
		    Возврат Ложь;
		КонецЕсли;
		
		Если ОтборПоДатеОкончания И ДатаОкончания < Ремонт.ДатаОкончания Тогда
		    Возврат Ложь;
		КонецЕсли;
		
		Если ОтборПоДатеНачала И ДатаНачала > Ремонт.ДатаНачала Тогда
		    Возврат Ложь;
		КонецЕсли;
		
		Если ОтборПоЗависимымОтОстановочных И Не ЗначениеЗаполнено(Ремонт.IDОсновного) Тогда
		    Возврат Ложь;
		КонецЕсли;
		
		Если ОтборПоОсновномуДляОстановочных И Не Ремонт.IDОсновного = IDОсновногоДляОтбораПоОстановочным Тогда
		    Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПоместитьДанныеРемонтовВоВременноеХранилище(МассивИдСтрокРемонтов)
	
	МассивВыбора = Новый Массив;
	
	Для каждого ИдСтроки из МассивИдСтрокРемонтов Цикл
		
		ЭлементМассиваРО = Объект.РемонтыОборудования.НайтиПоИдентификатору(ИдСтроки);
		
		СтрокаРемонтовОборудования = Новый Структура("ID, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, Завершен, ОбъектРемонта, ОбъектРемонтаВладелец, ОписаниеРемонта, ОписаниеРемонтаЯзык1, ОписаниеРемонтаЯзык2, Высота, Долгота, Широта");
		
		Если ФО_торо_НазначениеНаРемонтСУчетомРисков Тогда
			СтрокаРемонтовОборудования.Вставить("КрайняяДопустимаяДатаЗавершенияРемонта");
			СтрокаРемонтовОборудования.Вставить("КритичностьДефекта");
		КонецЕсли; 

		ЗаполнитьЗначенияСвойств(СтрокаРемонтовОборудования, ЭлементМассиваРО);
		
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", ЭлементМассиваРО.ID);
		
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
		
		МассивСтрокРемонтныхРабот = Новый Массив;
		
		Для каждого Элем Из МассивСтрок Цикл
			СтруктураДобавления = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, ТехКартаРемонта, ПроцентВыполненияРабот, Исполнитель, ДоговорБригада, НоваяОперация, НомерСтрокиВТК, ID_ПараллельнойОперации");
			ЗаполнитьЗначенияСвойств(СтруктураДобавления, Элем);
			
			Если ТипЗнч(ЭлементМассиваРО.ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
				Если ЗначениеЗаполнено(Элем.Родитель_ID) Тогда
					СтрРодителя = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, ID", Элем.РемонтыОборудования_ID, Элем.Родитель_ID));
					Если СтрРодителя.Количество() > 0 И ТипЗнч(СтрРодителя[0].РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда 
						СтруктураДобавления.ТехКартаРемонта = СтрРодителя[0].РемонтнаяРабота;					
					КонецЕсли;						
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементМассиваРО.ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
				И ТипЗнч(Элем.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				СтруктураДобавления.НоваяОперация = Истина;	
			КонецЕсли;
			
			МассивСтрокРемонтныхРабот.Добавить(СтруктураДобавления);
		КонецЦикла;
		
		
		СтруктураВыбора = Новый Структура();
		
		СтруктураВыбора.Вставить("ДокументОснование", ЭлементМассиваРО.ДокументОснование);
		СтруктураВыбора.Вставить("СтрокаРемонтовОборудования", СтрокаРемонтовОборудования);
		СтруктураВыбора.Вставить("МассивСтрокРемонтныхРабот", МассивСтрокРемонтныхРабот);
		
		МассивВыбора.Добавить(СтруктураВыбора);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(МассивВыбора, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьДанныеРемонтныхРаботВоВременноеХранилище(ВыбраннаяСтрока, ДокументОснование, СтрокаРемонтовОборудования)
	
	Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	МассивСтрокРемонтныхРабот = Новый Массив;
	Родитель = Строка.ПолучитьРодителя();
	
	СтруктураДобавления = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, ТехКартаРемонта, ПроцентВыполненияРабот, Исполнитель, ДоговорБригада");
	ЗаполнитьЗначенияСвойств(СтруктураДобавления, Строка);
	
	Если ТипЗнч(Родитель.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		СтруктураДобавления.ТехКартаРемонта = Родитель.РемонтнаяРабота;
	Иначе
		СтруктураДобавления.ТехКартаРемонта = Строка.РемонтнаяРабота;	
	КонецЕсли;
	
	МассивСтрокРемонтныхРабот.Добавить(СтруктураДобавления);
	
	Для Каждого ЭлементДерева Из Строка.ПолучитьЭлементы() Цикл
		Если ТипЗнч(Строка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураДобавления = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, ТехКартаРемонта, ПроцентВыполненияРабот, Исполнитель, ДоговорБригада", 
			ЭлементДерева.РемонтнаяРабота, ЭлементДерева.Количество, ЭлементДерева.Родитель_ID, ЭлементДерева.РемонтыОборудования_ID, ЭлементДерева.ID, Строка.РемонтнаяРабота, ЭлементДерева.ПроцентВыполненияРабот, Строка.Исполнитель, Строка.ДоговорБригада);
		Иначе
			СтруктураДобавления = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, Исполнитель, ДоговорБригада", 
			ЭлементДерева.РемонтнаяРабота, ЭлементДерева.Количество, ЭлементДерева.Родитель_ID, ЭлементДерева.РемонтыОборудования_ID, ЭлементДерева.ID, Строка.Исполнитель, Строка.ДоговорБригада);	
		КонецЕсли; 
		МассивСтрокРемонтныхРабот.Добавить(СтруктураДобавления);				
	КонецЦикла;
	
	Пока Родитель.РемонтнаяРабота <> "Ремонтные работы" Цикл
		СтруктураДобавления = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, ПроцентВыполненияРабот", Родитель.РемонтнаяРабота, Родитель.Количество, Родитель.Родитель_ID, Родитель.РемонтыОборудования_ID, Родитель.ID, Родитель.ПроцентВыполненияРабот);
		МассивСтрокРемонтныхРабот.Добавить(СтруктураДобавления);
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		Для каждого Строка Из МассивСтрокРемонтныхРабот Цикл
			Если ТипЗнч(Строка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				Строка.Вставить("НоваяОперация", Истина);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	СтруктураВыбора = Новый Структура();
	
	СтруктураВыбора.Вставить("ДокументОснование", ДокументОснование);
	СтруктураВыбора.Вставить("СтрокаРемонтовОборудования", СтрокаРемонтовОборудования);
	СтруктураВыбора.Вставить("МассивСтрокРемонтныхРабот", МассивСтрокРемонтныхРабот);
	СтруктураВыбора.Вставить("ЭтоРемонтнаяРабота", Истина);
	
	МассивВыбора = Новый Массив;
	МассивВыбора.Добавить(СтруктураВыбора);
	
	Возврат ПоместитьВоВременноеХранилище(МассивВыбора, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте 
Процедура УстановитьВидимостьСообщений()
	Элементы.СообщениеОПроверкеСтатусов.Видимость = ЗначениеЗаполнено(СообщениеОПроверкеСтатусов);
	Элементы.СообщениеОПроверкеТК.Видимость = ЗначениеЗаполнено(СообщениеОПроверкеТК);
КонецПроцедуры

#КонецОбласти