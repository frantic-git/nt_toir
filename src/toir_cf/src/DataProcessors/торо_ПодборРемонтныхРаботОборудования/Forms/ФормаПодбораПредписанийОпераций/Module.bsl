////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем ПараметрыТекущейСтроки;

&НаКлиенте
Перем ПараметрыТекущейСтрокиРемонтовОборудования;

#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОбъектРемонтаДляОтбора") Тогда
		ОбъектРемонтаДляОтбора = Параметры.ОбъектРемонтаДляОтбора;
	КонецЕсли;
	
	ЗаполнитьПредписания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

 &НаКлиенте
Процедура Выбрать(Команда)
	
	ПредписаниеВыборПродолжение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы 

&НаКлиенте
Процедура ФлажокОбработанныеПриИзменении(Элемент)	
	ЗаполнитьПредписания();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредписания

&НаКлиенте
Процедура ПредписанияПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.Предписания.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено И НЕ ТекДанные.ID = Неопределено
		И НЕ ТекДанные.ДокументОснование = ПредопределенноеЗначение("Документ.торо_ВыявленныеДефекты.ПустаяСсылка") 
		И НЕ торо_ОбщегоНазначенияКлиент.СравнитьПараметрыТекущейСтроки("СтрРемОборудования", Элементы.Предписания.ТекущаяСтрока, ПараметрыТекущейСтрокиРемонтовОборудования) Тогда
		
		торо_ОбщегоНазначенияКлиент.ЗапомнитьПараметрыТекущейСтроки("СтрРемОборудования", Элементы.Предписания.ТекущаяСтрока, ПараметрыТекущейСтрокиРемонтовОборудования);
		
		СписокРО = Элементы.Предписания.ВыделенныеСтроки;
		ЗаполнитьДеревоРемонтныхРабот(СписокРО);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПредписаниеВыборПродолжение(); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПредписания()
	
	ОчиститьДеревоЗначений();
	Объект.Предписания.Очистить();
	Объект.РемонтныеРаботы.Очистить();
	
	Запрос = Новый Запрос();
	
	МенеджерВремТаб = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_Предписания.Регистратор КАК Регистратор,
	|	торо_Предписания.НомерСтроки КАК НомерСтроки,
	|	торо_Предписания.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_Предписания.ID КАК ID,
	|	торо_Предписания.Описание КАК Описание,
	|	торо_Предписания.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	торо_Предписания.Обработано КАК Обработано
	|ПОМЕСТИТЬ idПредписаний
	|ИЗ
	|	РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_Предписания
	|ГДЕ
	|	торо_Предписания.Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот
	|	И торо_Предписания.ОбъектРемонта = &ОбъектРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID,
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	idПредписаний.ОбъектРемонта КАК ОбъектРемонта,
	|	idПредписаний.ID КАК ID,
	|	idПредписаний.Описание КАК ОписаниеРемонта,
	|	idПредписаний.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	торо_ПредписанияСрезПоследних.Обработано КАК Обработано,
	|	idПредписаний.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаПредписания
	|ИЗ
	|	idПредписаний КАК idПредписаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних КАК торо_ПредписанияСрезПоследних
	|		ПО idПредписаний.ID = торо_ПредписанияСрезПоследних.ID
	|			И idПредписаний.ОбъектРемонта = торо_ПредписанияСрезПоследних.ОбъектРемонта
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА idПредписаний.ПлановаяДатаРемонта >= &ДатаНачала
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА idПредписаний.ПлановаяДатаРемонта <= &ДатаОкончания
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Обработано = ЛОЖЬ
	|				ТОГДА торо_ПредписанияСрезПоследних.Обработано = ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПредписания.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаПредписания.ID КАК ID,
	|	ТаблицаПредписания.ОписаниеРемонта КАК ОписаниеРемонта,
	|	ТаблицаПредписания.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	ТаблицаПредписания.Обработано КАК Обработано,
	|	ТаблицаПредписания.Регистратор КАК Регистратор
	|ИЗ
	|	ТаблицаПредписания КАК ТаблицаПредписания";
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("Обработано", ФлажокОбработанные);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонтаДляОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДобавлятьРемонт = Истина;
		
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			Если Выборка.ПлановаяДатаРемонта < ДатаНачала Тогда
				ДобавлятьРемонт = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			Если Выборка.ПлановаяДатаРемонта > ДатаОкончания Тогда
				ДобавлятьРемонт = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ДобавлятьРемонт Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтрокаРО = Объект.Предписания.Добавить();
		НовСтрокаРО.ID                = Выборка.ID;
		НовСтрокаРО.ОбъектРемонта     = Выборка.ОбъектРемонта;
		НовСтрокаРО.ПлановаяДата      = Выборка.ПлановаяДатаРемонта;
		НовСтрокаРО.ОписаниеРемонта   = Выборка.ОписаниеРемонта;
		НовСтрокаРО.ДокументОснование = Выборка.Регистратор;
		НовСтрокаРО.Обработано 		  = Выборка.Обработано;
		
	КонецЦикла;
	
	ЗапросОпер = Новый Запрос;
	ЗапросОпер.МенеджерВременныхТаблиц = МенеджерВремТаб;
	ЗапросОпер.Текст = "////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                   |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID КАК ID,
	                   |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	                   |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	                   |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Количество КАК Количество,
	                   |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Предписание_ID КАК РемонтыОборудования_ID,
					   |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации
	                   |ИЗ
	                   |	РегистрСведений.торо_ОперацииВнешнихОснованийДляРабот КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПредписания КАК ТаблицаПредписания
	                   |		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.Предписание_ID = ТаблицаПредписания.ID
	                   |ГДЕ
	                   |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот";
	
	
	ТаблицаРемонтныхРабот = ЗапросОпер.Выполнить().Выгрузить();
	
	
	Для Каждого СтрокаТЧ Из ТаблицаРемонтныхРабот Цикл 
		
		НовСтрокаРР = Объект.РемонтныеРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаРР, СтрокаТЧ);
		
	КонецЦикла; 
		
КонецПроцедуры

&НаСервере
// Процедура выполняет первоначальное заполнение элемента формы "ДеревоРемонтныхРабот".
//
Процедура ЗаполнитьДеревоРемонтныхРабот(СписокРемонтовОборудования)
		
	ДеревоЗначение = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	ДеревоЗначение.Строки.Очистить();
	
	Для Каждого СтрокаРемОборудования Из СписокРемонтовОборудования Цикл
		
		СтрокаРемонтовОборудования = Объект.Предписания.НайтиПоИдентификатору(СтрокаРемОборудования);
		
		Если СтрокаРемонтовОборудования = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из Объект.Предписания Цикл
				
				// 0 - й уровень дерева
				КорневаяСтрока = ДеревоЗначение.Строки.Добавить();
				КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";
				КорневаяСтрока.Картинка = 4;
				КорневаяСтрока.РемонтыОборудования_ID = СтрокаТЧ.ID;
				
				МассивСтрок  = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаТЧ.ID));
				ТаблицаСтрок = Объект.РемонтныеРаботы.Выгрузить(МассивСтрок);
				
				ТекущиеЗначения = Новый Структура("Родитель_ID, РемонтыОборудования_ID, ID", КорневаяСтрока.Родитель_ID, КорневаяСтрока.РемонтыОборудования_ID, КорневаяСтрока.ID);
				торо_Ремонты.СоздатьВетвьДереваПоТабличнойЧасти(ДеревоЗначение, ТекущиеЗначения, ТаблицаСтрок);
				
			КонецЦикла; 
			
		Иначе
			
			КорневаяСтрока = ДеревоЗначение.Строки.НайтиСтроки(Новый Структура("РемонтнаяРабота", "Ремонтные работы"));
			Если КорневаяСтрока.Количество() = 0 Тогда
				// 0 - й уровень дерева
				КорневаяСтрока = ДеревоЗначение.Строки.Добавить();
				КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";
				КорневаяСтрока.Картинка = 4;
			Иначе
				КорневаяСтрока = КорневаяСтрока[0];
			КонецЕсли; 
			
			МассивСтрок  = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID));
			ТаблицаСтрок = Объект.РемонтныеРаботы.Выгрузить(МассивСтрок);
			
			ТекущиеЗначения = Новый Структура("Родитель_ID, РемонтыОборудования_ID, ID", КорневаяСтрока.Родитель_ID, "", КорневаяСтрока.ID);
			торо_Ремонты.СоздатьВетвьДереваПоТабличнойЧасти(ДеревоЗначение, ТекущиеЗначения, ТаблицаСтрок);
		КонецЕсли; 
		
		Элементы.ДеревоРемонтныхРабот.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначение, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредписаниеВыборПродолжение()
     
	СтрокаПредписания = Элементы.Предписания.ТекущиеДанные;
	
	Если СтрокаПредписания = Неопределено Тогда
		Возврат;
	КонецЕсли;	 

	СвойстваРемонтаОборудования = Новый Структура;
	СвойстваРемонтаОборудования.Вставить("ID", СтрокаПредписания.ID);
	СвойстваРемонтаОборудования.Вставить("ПлановаяДата", СтрокаПредписания.ПлановаяДата);
	СвойстваРемонтаОборудования.Вставить("ОбъектРемонта", СтрокаПредписания.ОбъектРемонта);
	СвойстваРемонтаОборудования.Вставить("ОписаниеРемонта", СтрокаПредписания.ОписаниеРемонта);
	
	ДанныеВыбора = Новый Структура();
	ДанныеВыбора.Вставить("ДокументОснование", СтрокаПредписания.ДокументОснование);
	ДанныеВыбора.Вставить("РемонтОборудования", СвойстваРемонтаОборудования);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредписанияВыборЗавершение", ЭтотОбъект, ДанныеВыбора);
	ТекстВопроса = НСтр("ru = 'Перенести все операции выбранного внешнего основания?'"); 
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
КонецПроцедуры

&НаКлиенте
Процедура ПредписанияВыборЗавершение(РезультатВопроса, ДанныеВыбора) Экспорт
     
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		
		торо_ДанныеФормыДеревоКлиентСервер.УпорядочитьРемонтныеРаботы(ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("РемонтыОборудования_ID", ДанныеВыбора.РемонтОборудования.ID);
		
        РемонтныеРаботыОтбор = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
        
        ВыбранныеРемонтныеРаботы = Новый Массив();  
		
		Для каждого Строка Из РемонтныеРаботыОтбор Цикл
			
			СвойстваРемонтнойРаботы = Новый Структура();
			СвойстваРемонтнойРаботы.Вставить("РемонтнаяРабота", Строка.РемонтнаяРабота);
			СвойстваРемонтнойРаботы.Вставить("ID", Строка.ID);
			СвойстваРемонтнойРаботы.Вставить("Родитель_ID", Строка.Родитель_ID);
			СвойстваРемонтнойРаботы.Вставить("Количество", Строка.Количество);
			СвойстваРемонтнойРаботы.Вставить("ID_ПараллельнойОперации", Строка.ID_ПараллельнойОперации);
            
            ВыбранныеРемонтныеРаботы.Добавить(СвойстваРемонтнойРаботы);
        КонецЦикла;
        
        ДанныеВыбора.Вставить("РемонтныеРаботы", ВыбранныеРемонтныеРаботы);
		
        ОповеститьОВыборе(ДанныеВыбора);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ЗаполнитьПредписания();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ЗаполнитьПредписания();
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревоЗначений()
   тДерево = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
 
   тДерево.Строки.Очистить();
 
   ЗначениеВРеквизитФормы(тДерево, "ДеревоРемонтныхРабот");
КонецПроцедуры

#КонецОбласти