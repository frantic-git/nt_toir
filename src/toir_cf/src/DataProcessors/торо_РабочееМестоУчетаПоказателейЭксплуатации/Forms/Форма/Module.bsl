
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьОсновныеРеквизитыФормы();
	ИерархияДляВводаНовыхОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	
	ТекСтруктураИерархии = ИерархияДляВводаНовыхОР;
	Если Параметры.Свойство("СтруктураИерархии") И ЗначениеЗаполнено(Параметры.СтруктураИерархии) Тогда
		ТекСтруктураИерархии = Параметры.СтруктураИерархии;
	КонецЕсли;
	
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	СписокСтатусов.ЗагрузитьЗначения(торо_СтатусыОРВУчете.СписокСтатусовДляПодбора());

	ОбработатьИзменениеИерархииНаСервере();
	
	ТипПоиска = "Наименование";
	ТипПоискаПоказателей = "Все";
	УчетКонтрПокДатаДок = ТекущаяДата();
	УчетСостоянийДатаДок = ТекущаяДата();
	ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.НеУчитыватьИерархию;
	
	ПравоИнтерактивнаяПометкаУдаления = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоИнтерактивноеДобавление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.торо_ОбъектыРемонта);

	ГрупповоеФормированиеНаработки 		 = Истина;
	ГрупповоеФормированиеСостояния 		 = Истина;
	ГрупповоеФормированиеКонтрПоказатели = Истина;
	
	ПроставлятьПлановуюНаработку      		   = Ложь;
	УчитыватьПростоиОР			 	  		   = Ложь;
	ЗапрашиватьВидПараметровНаработки 		   = Истина;
	ЗапрашиватьСписокКонтролируемыхПоказателей = Истина;
	
	ПравоДобавленияДокументовСостояния 	   				   = ПравоДоступа("Добавление", Метаданные.Документы.торо_СостоянияОбъектовРемонта);
	ПравоДобавленияДокументовУчетНаработки 				   = ПравоДоступа("Добавление", Метаданные.Документы.торо_УчетНаработкиОборудования);
	ПравоДобавленияДокументовУчетКонтролируемыхПоказателей = ПравоДоступа("Добавление", Метаданные.Документы.торо_УчетКонтролируемыхПоказателей);
	
	ФОИспользоватьУчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	ФОИспользоватьУчетСостояния = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	ФОИспользоватьУчетНаработки = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	ФОИспользоватьУчетПусков = ПолучитьФункциональнуюОпцию("торо_УчетПусковОборудования");
	
	Элементы.ГруппаПараметровНаработки.Видимость 				 = ФОИспользоватьУчетНаработки И ПравоДобавленияДокументовУчетНаработки;
	Элементы.ГруппаПарметровСостояний.Видимость 				 = ФОИспользоватьУчетСостояния И ПравоДобавленияДокументовСостояния;
	Элементы.ГруппаПараметровКонтролируемыхПоказателей.Видимость = ФОИспользоватьУчетКонтролируемыхПоказателей И ПравоДобавленияДокументовУчетКонтролируемыхПоказателей;
	
	Элементы.ГруппаУчетНаработки.Видимость 				   = ФОИспользоватьУчетНаработки И ПравоДобавленияДокументовУчетНаработки;
	Элементы.ГруппаУчетСостояний.Видимость 				   = ФОИспользоватьУчетСостояния И ПравоДобавленияДокументовСостояния;
	Элементы.ГруппаУчетКонтролируемыхПоказателей.Видимость = ФОИспользоватьУчетКонтролируемыхПоказателей И ПравоДобавленияДокументовУчетКонтролируемыхПоказателей;
	
	Если Не ФОИспользоватьУчетКонтролируемыхПоказателей И Не ФОИспользоватьУчетНаработки Тогда
	    Элементы.ТипПоискаПоказателей.Видимость = Ложь;
	Иначе
		Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("Все", "Все");
	КонецЕсли;
	
	Если ФОИспользоватьУчетКонтролируемыхПоказателей И ПравоДобавленияДокументовУчетКонтролируемыхПоказателей Тогда
	    Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("ЕстьИзмеряемыеПоказатели", "Контролируемые показатели");
		Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("КонтролируемыеПоказателиНеУказаны", "Контролируемые показатели не указаны");
	Иначе
		Элементы.ДеревоКонтролируемыеПоказателиВведены.Видимость = Ложь;
		Элементы.СписокКонтролируемыеПоказателиВведены.Видимость = Ложь;
	КонецЕсли;
	
	Если ФОИспользоватьУчетНаработки И ПравоДобавленияДокументовУчетНаработки Тогда
	    Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("ЕстьПараметрыНаработки", "Показатели наработки");
		Элементы.ТипПоискаПоказателей.СписокВыбора.Добавить("ПоказателиНаработкиНеВведены", "Показатели наработки не введены");
	Иначе
		Элементы.ДеревоПоказателиНаработкиВведены.Видимость = Ложь;
		Элементы.СписокПоказателиНаработкиВведены.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ФОИспользоватьУчетСостояния И НЕ ПравоДобавленияДокументовСостояния Тогда
		Элементы.ДеревоСостояние.Видимость = Ложь;
		Элементы.СписокСостояние.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ВернутьИерархию") Тогда
		ВернутьИерархию = Параметры.ВернутьИерархию;
	КонецЕсли;
	
	Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.Картинка";
	Если ИспользоватьКартинкиТОР Тогда 
		Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.КартинкаОтображаемая";
	КонецЕсли;
	
	ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации");

	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("УчетСостояний");
	ИменаТаблицФормы.Добавить("УчетКонтролируемыхПоказателейПоказатели");
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ВернутьПервоначальныйУчетСостояний(Истина, "Дата изменения состояния", Ложь);
	
	ОРДляВыделения = ПолучитьОтборПоОбъектуРемонта(); 
	Если ЗначениеЗаполнено(ОРДляВыделения) Тогда 
		торо_РаботаСИерархией20Клиент.ВыделитьОРВДереве(ЭтаФорма, ОРДляВыделения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если (УчетНаработки.Количество() > 0 Или УчетСостояний.Количество() > 0 Или УчетКонтролируемыхПоказателейПоказатели.Количество() > 0) И Не ЗавершениеРаботы Тогда
	   СтандартнаяОбработка = Ложь;
	   Отказ = Истина;
	   
	   Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормы", ЭтотОбъект);
	   ТекстВопроса = НСтр("ru = 'Введенные данные для ОР не сохранены. Продолжить?'");
	   ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);	
	Иначе	
	   СтандартнаяОбработка = Истина;
   КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписанОбъектРемонта" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОЗаписиОбъектаРемонта(ЭтаФорма, Параметр);
		Если ИспользоватьКартинкиТОР Тогда
			ОбновитьКартинкиЭлементовДереваНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы И ЗначениеЗаполнено(ОбъектРемонта) Тогда   
		СохранитьОтборПоОбъектуРемонта(ОбъектРемонта);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПоискаОрганизацияПриИзменении(Элемент)
    ВыполнитьПоискВСпискеОР(Элемент.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПодразделениеПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаНаправлениеПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаНаправлениеОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаТиповойОРПриИзменении(Элемент)
    ВыполнитьПоискВСпискеОР(Элемент.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаТиповойОРОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаКритичостьПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаКритичостьОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ЗначениеПоиска) Тогда
	    ВыполнитьПоискВСпискеОРПоНаименованию(ЗначениеПоиска);
	ИначеЕсли Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели" И Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" Тогда
		ОтменитьПоискВСпискеОРПоНаименованию();
		ЗначениеПоиска = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОРПоНаименованию(ЗначениеПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОРПоНаименованию();
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		ВыполнитьПоискВСпискеОРПоНаименованию(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗначениеПоиска = Текст;
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПоказателейПриИзменении(Элемент)
	Если Не ТипПоискаПоказателей = "Все" Тогда
	    ВыполнитьПоискВСпискеОРПоПоказателям();
	Иначе
		ОтменитьПоискВСпискеОРПоПоказателям();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеФормированиеНаработкиПриИзменении(Элемент)
	
	ПриИзмененииГрупповогоФормирования("ГрупповоеФормированиеНаработки", УчетНаработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеФормированиеКонтрПоказателиПриИзменении(Элемент)
	
   ПриИзмененииГрупповогоФормирования("ГрупповоеФормированиеКонтрПоказатели", УчетКонтролируемыхПоказателейПоказатели);
   
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеФормированиеСостоянияПриИзменении(Элемент)
	
	ПриИзмененииГрупповогоФормирования("ГрупповоеФормированиеСостояния", УчетСостояний);	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные);
	УстановкаДоступности(ТекущиеДанные);
	ОбновитьТекущуюДату();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииПоля(Элемент)
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	ДанныеСтроки = Дерево.НайтиПоИдентификатору(Строка);
	Если ДанныеСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СвязиОбновлялись = ДанныеСтроки.СвязиОбновлялись;
	торо_РаботаСИерархией20Клиент.ДеревоПередРазворачиванием(Дерево, Строка, СтруктураПараметровИерархии, ФОИспользоватьДокументыЖЦОборудования, СписокСтатусов);
	ДеревоПередРазворачиваниемНаСервере(Строка, СвязиОбновлялись);
КонецПроцедуры

&НаСервере
Процедура ДеревоПередРазворачиваниемНаСервере(Строка, СвязиОбновлялись)
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере(Строка);
	КонецЕсли;
	Если СвязиОбновлялись Тогда
		Возврат;
	КонецЕсли;
	торо_РаботаСИерархией20.ЗаполнитьНаличиеПоказателейВДереве(Дерево.НайтиПоИдентификатору(Строка));
КонецПроцедуры
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные);
	УстановкаДоступности(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииПоля(Элемент)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	торо_РаботаСИерархией20.СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки, ИспользоватьКартинкиТОР);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчетНаработки

&НаКлиенте
Процедура УчетНаработкиПриАктивизацииСтроки(Элемент)
	ТекСтрокаНаработкаОбъектов = Элементы.УчетНаработки.ТекущиеДанные;
	Если Не ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		ТекПоказатель = ТекСтрокаНаработкаОбъектов.Показатель;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиСтароеЗначениеПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.УчетНаработки.ТекущиеДанные;
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
	СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.СтароеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоказателяНаработки(Элемент)
	ПриИзмененииПоказателяНаработкиНаСервере(Элементы.УчетНаработки.ТекущаяСтрока);
	УчетНаработкиСтароеЗначениеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.УчетНаработки.ТекущиеДанные;
	
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	СтруктураОповещения = Новый Структура("СтрокаТабличнойЧасти, Элемент", СтрокаТабличнойЧасти, Элемент);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УчетНаработкиПоказательНачалоВыбораЗавершение", ЭтотОбъект, СтруктураОповещения);
	СтруктураПараметр = Новый Структура("ОбъектРемонтаФильтр", СтрокаТабличнойЧасти.Объект);
	ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", СтруктураПараметр,,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкна);
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиНаработкаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.УчетНаработки.ТекущиеДанные;
	СтараяНаработкаОР = СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации - СтрокаТабличнойЧасти.СтароеЗначение;
	
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
	СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.СтароеЗначение;
	
	МаксимальноеЗначение = ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель);
	
	Если Не МаксимальноеЗначение = 0 И СтрокаТабличнойЧасти.НовоеЗначение > МаксимальноеЗначение Тогда
		ТекстВопроса = НСтр("ru = 'Новое значение наработки больше, чем максимальное значение счетчика. При проведении документа будет выполнен сброс счетчика. Продолжить?'");
		СтруктураДляОповещения = Новый Структура("МаксимальноеЗначение, СтараяНаработкаОР, СтрокаТабличнойЧасти", МаксимальноеЗначение, СтараяНаработкаОР, СтрокаТабличнойЧасти);
		ОписаниеОповещения = Новый ОписаниеОповещения("УчетНаработкиНаработкаПриИзмененииЗавершение", ЭтотОбъект, СтруктураДляОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	// Изменение ранее введенных наработок подчиненных
	НаработкаПриИзмененииФрагмент(СтараяНаработкаОР, СтрокаТабличнойЧасти);
	
	Если ГрупповоеФормированиеНаработки = Ложь Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументыНаработкиПерсональный", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Создать документ учет наработки оборудования?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиНовоеЗначениеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.УчетНаработки.ТекущиеДанные;
	НовЗнач = СтрокаТабличнойЧасти.НовоеЗначение;
	Если СтрокаТабличнойЧасти.СтароеЗначение > СтрокаТабличнойЧасти.НовоеЗначение Тогда
		ТекстСообщения = НСтр("ru = 'Новое значение наработки не может быть меньше предыдущего.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.СтароеЗначение;
	КонецЕсли; 
	СтрокаТабличнойЧасти.Наработка = СтрокаТабличнойЧасти.НовоеЗначение - СтрокаТабличнойЧасти.СтароеЗначение;	
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиРаспространятьНаПодчиненныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УчетНаработки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Иерархия) Тогда
		СтруктураНаработки =  Новый Структура("Объект, ДатаРаботыС, Показатель, ДатаРаботыПо, СтароеЗначение,
											  |НовоеЗначение, НаработкаСНачалаЭксплуатации, Наработка,
											  |НаработкаСНачалаЭксплуатацииНачало, Иерархия, РаспространятьНаПодчиненных");
		ЗаполнитьЗначенияСвойств(СтруктураНаработки, ТекущиеДанные);
		РаспространитьНаПодчиненныхДляТекущейСтроки(СтруктураНаработки);	
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнено значение иерархии, на подчиненные объекты из которой необходимо распространить наработку!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ТекущиеДанные.РаспространятьНаПодчиненных = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчетКонтролируемыхПоказателейПоказатели

&НаКлиенте
Процедура УчетКонтрПокДатаДокПриИзменении(Элемент)
	
	Для каждого СтрокаТЧ Из УчетКонтролируемыхПоказателейПоказатели Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ОбъектРемонта", СтрокаТЧ.ОбъектРемонта);
		Отбор.Вставить("Показатель", СтрокаТЧ.Показатель);
		Отбор.Вставить("ДатаКонтроля", СтрокаТЧ.ДатаКонтроля);
		
		Строки = УчетКонтролируемыхПоказателейПоказатели.НайтиСтроки(Отбор);
		КоличествоСтрок = Строки.Количество(); 
		Если СтрокаТЧ.ДатаКонтроля = ЭтотОбъект.УчетКонтрПокДатаДок Тогда
			Отбор.Вставить("ДатаКонтроля", Дата(1,1,1,0,0,0));
			Строки2 = УчетКонтролируемыхПоказателейПоказатели.НайтиСтроки(Отбор);
			КоличествоСтрок = КоличествоСтрок + Строки2.Количество();
		КонецЕсли; 
		
		Если КоличествоСтрок > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'В документе для %1 значения по %2 на эту дату уже введены.'");
			ТекстСообщения =  СтрШаблон(ШаблонСообщения, СтрокаТЧ.ОбъектРемонта, СтрокаТЧ.Показатель);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если ОбъектРемонта = Неопределено Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Укажите оборудование для которого фиксируется значение контролируемых показателей!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 20);
	ИначеЕсли Не ЗначениеЗаполнено(ОбъектРемонта) Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Не заполнено оборудование для которого фиксируется значение контролируемых показателей!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 20);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.УчетКонтролируемыхПоказателейПоказатели.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекДанные.ОбъектРемонта = ОбъектРемонта;
	КонецЕсли;
	
	Если Не НоваяСтрока И Не Копирование Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	СтрокаТЧ = Элемент.ТекущиеДанные;
	
	Если Не ОтменаРедактирования Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ОбъектРемонта",СтрокаТЧ.ОбъектРемонта);
		Отбор.Вставить("Показатель",СтрокаТЧ.Показатель);
		Отбор.Вставить("ДатаКонтроля", СтрокаТЧ.ДатаКонтроля);
		
		Строки = УчетКонтролируемыхПоказателейПоказатели.НайтиСтроки(Отбор);
		КоличествоСтрок = Строки.Количество(); 
		Если СтрокаТЧ.ДатаКонтроля = ЭтотОбъект.УчетКонтрПокДатаДок Тогда
			Отбор.Вставить("ДатаКонтроля", Дата(1,1,1,0,0,0));
			Строки2 = ЭтотОбъект.УчетКонтролируемыхПоказателейПоказатели.НайтиСтроки(Отбор);
			КоличествоСтрок = КоличествоСтрок + Строки2.Количество();
		КонецЕсли; 
		
		Если КоличествоСтрок > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Значения по данному показателю на указанную дату уже введены в другой строке!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Показатель) Тогда
			ТекстСообщения =  НСтр("ru = 'Укажите показатель для регистрации значения!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	Иначе
		Если Не НоваяСтрока Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанныхДоРедактирования[Элемент.Имя]);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ГрупповоеФормированиеКонтрПоказатели  Тогда
		ТекстВопроса = НСтр("ru = 'Создать документ учет контрольных показателей?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументУчетКонтрПоказателейПерсональный", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.УчетКонтролируемыхПоказателейПоказатели.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
		ТекДанные.Показатель = ВыбранноеЗначение;
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ОбъектРемонта, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураВозврата,,"ОбъектРемонта");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.УчетКонтролируемыхПоказателейПоказатели.ТекущиеДанные;
	Если ТекДанные <> Неопределено И Не ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) Тогда
		ТекстПредупреждения = НСтр("ru = 'Для выбора значения контролируемого показателя необходимо указать объект ремонта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 60);
		Возврат;
	КонецЕсли;
	
	СписокОтбора = ПолучитьСписокОтбораКонтролируемыхПоказателей(ТекДанные.ОбъектРемонта);
	ПараметрыОтбора = Новый Структура("Ссылка", СписокОтбора);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = Элементы.УчетКонтролируемыхПоказателейПоказатели.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СписокОтбора = ПолучитьСписокОтбораКонтролируемыхПоказателей(ТекДанные.ОбъектРемонта);
		СтрокаПоказателя = СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если СтрокаПоказателя = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.УчетКонтролируемыхПоказателейПоказатели.ТекущиеДанные;
	ДанныеВыбора = ПолучитьСписокОтбораКонтролируемыхПоказателей(ТекДанные.ОбъектРемонта);
КонецПроцедуры

&НаКлиенте
Процедура УчетКонтролируемыхПоказателейПоказателиПоказательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекДанные = Элементы.УчетКонтролируемыхПоказателейПоказатели.ТекущиеДанные;
	СписокОтбора = ПолучитьСписокОтбораКонтролируемыхПоказателей(ТекДанные.ОбъектРемонта);
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчетСостояний

&НаКлиенте
Процедура УчетСостоянийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.УчетСостояний.ТекущиеДанные;
	
	Если Не НоваяСтрока И Не Копирование Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетСостоянийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ГрупповоеФормированиеСостояния Тогда
		Если НеобходимоСоздатьДокументСостояний() Тогда
		    ТекстВопроса = НСтр("ru = 'Создать документ состояний оборудования?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументСостоянийПерсональный", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетСостоянийПослеУдаления(Элемент)
	Если ЭтотОбъект.УчетСостояний.Количество() = 0 Тогда
		ВернутьПервоначальныйУчетСостояний(Истина, "Дата изменения состояния", ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетСостоянийВидЭксплуатацииПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УчетСостояний.ТекущиеДанные;
	РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(ТекущиеДанные);
	РассчитатьНеобходимостьВидаПускаИПричиныПростояНаФорме();
	
	УстановитьВнешнийВидФормыПолная();
	
	ТекущиеДанные.ВидПуска = Неопределено;
	Если Не ТекущиеДанные.КолонкаПричинаПростоя И Не ТекущиеДанные.КолонкаПричинаПростояНаПериод Тогда
	    ТекущиеДанные.ПричинаПростоя = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетСостоянийВидЭксплуатацииНаПериодПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УчетСостояний.ТекущиеДанные;
	РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(ТекущиеДанные);
	РассчитатьНеобходимостьВидаПускаИПричиныПростояНаФорме();
	
	УстановитьВнешнийВидФормыПолная();
	
	ТекущиеДанные.ВидПускаНаПериод = Неопределено;
	Если Не ТекущиеДанные.КолонкаПричинаПростоя И Не ТекущиеДанные.КолонкаПричинаПростояНаПериод Тогда
	    ТекущиеДанные.ПричинаПростоя = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокументы(Команда)
		
	Если НЕ ЗначениеЗаполнено(ОрганизацияИзПользовательскихНастроек) Тогда		
		ТекстСообщения = НСтр("ru = 'Не заполнена организация! Создание документов невозможно!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
		Возврат;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеИзПользовательскихНастроек) Тогда		
		ТекстСообщения = НСтр("ru = 'Не заполнено подразделение! Создание документов невозможно!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
		Возврат;		
	КонецЕсли;	
	
	Если ФОИспользоватьУчетНаработки И УчетНаработки.Количество() > 0 Тогда
		СозданныйДокумент = СоздатьДокументыНаработкаСервер();
		Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Создан документ Учет наработки оборудования: '") + СозданныйДокумент;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
			
			УчетНаработки.Очистить();
			НаработкаПодчиненныхОбъектов.Очистить();
			ТаблицаПодобранныхОР.Очистить();
		КонецЕсли;
	КонецЕсли; 
	
	Если ФОИспользоватьУчетСостояния И УчетСостояний.Количество() > 0 Тогда
		СозданныйДокумент = СоздатьДокументыУчетСостоянийСервер();
		Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Создан документ Учет состояний оборудования: '") + СозданныйДокумент;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
			
			УчетСостояний.Очистить();
			ВернутьПервоначальныйУчетСостояний(Истина, "Дата изменения состояния", ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод"));
		КонецЕсли;
	КонецЕсли;
	
	Если ФОИспользоватьУчетКонтролируемыхПоказателей И УчетКонтролируемыхПоказателейПоказатели.Количество() > 0 Тогда
		СозданныйДокумент = СоздатьДокументыУчетКонтролируемыхПоказателейСервер();
		Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Создан документ Учет контролируемых показателей: '") + СозданныйДокумент;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
			ВывестиВДКОткрытию();
			УчетКонтролируемыхПоказателейПоказатели.Очистить();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаработкуОР(Команда)
	
	ОбъектыРемонта = ОбъектыРемонтаКДобавлениюВТабличнуюЧасть(УчетНаработки); 
	
	Если ОбъектыРемонта.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны объекты ремонта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПодборПараметровНаработки(ОбъектыРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыНаработкиГрупповой(Команда)
	Если УчетНаработки.Количество() > 0 Тогда
		СозданныйДокумент = СоздатьДокументыНаработкаСервер();
		Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Создан документ Учет наработки оборудования: '") + СозданныйДокумент;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
			
			УчетНаработки.Очистить();
			НаработкаПодчиненныхОбъектов.Очистить();
			ТаблицаПодобранныхОР.Очистить();
		КонецЕсли;
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть наработок оборудования. Документ не может быть создан.'");
	    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	МассивСтрокНаработки = Новый Массив;
	
	Для каждого Строка Из УчетНаработки Цикл
		Если Строка.Синхронизировать Тогда
			СтруктураПараметр = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, СтруктураИерархии");
			ЗаполнитьЗначенияСвойств(СтруктураПараметр, Строка);
			СтруктураПараметр.Вставить("СтруктураИерархии", Строка.Иерархия);
			МассивСтрокНаработки.Добавить(СтруктураПараметр);
		Конецесли;
	КонецЦикла;
	
	ОбъектСсылка = ПолучитьСссылкуНаЧистыйДокументУчетНаработкиОборудования();
    
	Если МассивСтрокНаработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = торо_РаботаСНаработкой.ПолучитьСтруктуруДанныхДокументаСинхронизации(МассивСтрокНаработки, ОбъектСсылка);
		
	СтруктураДанных.Вставить("Подразделение", Подразделение);
	СтруктураДанных.Вставить("Организация", Организация);
	СтруктураДанных.Вставить("Ответственный", Ответственный);
	СтруктураДанных.Вставить("ДокументОснование", Неопределено);
	СтруктураДанных.Вставить("МассивСтрокНаработки", МассивСтрокНаработки);                                                                                             
	СтруктураДанных.Вставить("ИзДокументаУчетНаработки", Истина);
	
	ФормаДопДокумента = ПолучитьФорму("Документ.торо_УстановкаПроизвольногоЗначенияНаработки.ФормаОбъекта",СтруктураДанных,,ОбъектСсылка);
	ФормаДопДокумента.Модифицированность = Истина;
	СтруктураОповещения = Новый Структура("ОбъектДопДокумента", ФормаДопДокумента.Объект);
	ФормаДопДокумента.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СинхронизироватьЗавершениеУчетНаработкиОборудования", ЭтотОбъект, СтруктураОповещения);
	ФормаДопДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ФормаДопДокумента.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыНаработкиПерсональный(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если УчетНаработки.Количество() > 0 Тогда
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			СозданныйДокумент = СоздатьДокументыНаработкаСервер();
			Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
				ТекстСообщения = НСтр("ru = 'Создан документ Учет наработки оборудования: '") + СозданныйДокумент;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
				
				УчетНаработки.Очистить();
				НаработкаПодчиненныхОбъектов.Очистить();
				ТаблицаПодобранныхОР.Очистить();
			КонецЕсли;	
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть наработок оборудования. Документ не может быть создан.'");
	    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчетСостоянияОРНаДату(Команда)
	НовыйВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации");
	
	Если НовыйВидОперации = ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = НовыйВидОперации;
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
		// Возвращаем первоначальное состояние по типу документа
		
		Строки = УчетСостояний.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
		Для Каждого Строка Из Строки Цикл
			Строка.ДатаНачала = Неопределено;
		КонецЦикла;
		
		ВернутьПервоначальныйУчетСостояний(Истина, "Дата изменения состояния", Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран объект ремонта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УстановитьВнешнийВидФормыПолная();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчетСостоянияОРНаПериод(Команда)
	НовыйВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод");
	
	Если НовыйВидОперации = ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = НовыйВидОперации;
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
		// Возвращаем первоначальное состояние по типу документа
		ВернутьПервоначальныйУчетСостояний(Истина, "Окончание периода", Истина);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран объект ремонта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УстановитьВнешнийВидФормыПолная();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПозициюДокументаУчетСостояния(Команда)
	
	ОбъектыРемонта = ОбъектыРемонтаКДобавлениюВТабличнуюЧасть(УчетСостояний);
	
	Если ОбъектыРемонта.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны объекты ремонта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураВидОперации = Новый Структура;
	СтруктураВидОперации.Вставить("ВидОперации", ВидОперации);	
	СтруктураВидОперации.Вставить("ОбъектРемонта", ОбъектыРемонта);
	СтруктураВидОперации.Вставить("ДопПоляДляСтруктурыВозврата", Неопределено);
				
	ОбработкаДобавленияСостояния(СтруктураВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыСостояний(Команда)
	Если УчетСостояний.Количество() > 0 Тогда	
		СозданныйДокумент = СоздатьДокументыУчетСостоянийСервер();
		Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Создан документ Учет состояний оборудования: '") + СозданныйДокумент;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
			
			УчетСостояний.Очистить();
			ВернутьПервоначальныйУчетСостояний(Ложь, "Дата изменения состояния", Ложь);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть состояний оборудования. Документ не может быть создан '");
	    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтролируемыеПоказателиОР(Команда)
	
	ОбъектыРемонта = ОбъектыРемонтаКДобавлениюВТабличнуюЧасть(УчетКонтролируемыхПоказателейПоказатели);

	Если ОбъектыРемонта.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны объекты ремонта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
		
	ЗаполнитьПоказатели(ОбъектыРемонта); 
	
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьДокументыУчетКонтролируемыхПоказателей(Команда)
	Если УчетКонтролируемыхПоказателейПоказатели.Количество() > 0 Тогда
		СозданныйДокумент = СоздатьДокументыУчетКонтролируемыхПоказателейСервер();
		Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Создан документ Учет контролируемых показателей: '") + СозданныйДокумент;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
			ВывестиВДКОткрытию();
			УчетКонтролируемыхПоказателейПоказатели.Очистить();
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть контролируемых показателей. Документ не может быть создан '");
	    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУчетКонтрПоказателейПерсональный(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если УчетКонтролируемыхПоказателейПоказатели.Количество() > 0 Тогда
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			СозданныйДокумент = СоздатьДокументыУчетКонтролируемыхПоказателейСервер();
			Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
				ТекстСообщения = НСтр("ru = 'Создан документ Учет контролируемых показателей: '") + СозданныйДокумент;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
				ВывестиВДКОткрытию();
				УчетКонтролируемыхПоказателейПоказатели.Очистить();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть контролируемых показателей. Документ не может быть создан.'");
	    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Оповещение о закрытии, вызывается при выполнении команды "Настройка иерархии".
&НаКлиенте
Процедура НастройкаИерархииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекСтруктураИерархии = ВыбранноеЗначение;
		ОбработатьИзменениеИерархииНаСервере();
		торо_РаботаСИерархией20Клиент.ОбработатьИзменениеИерархииНаКлиенте(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОбъектыРемонтаКДобавлениюВТабличнуюЧасть(ТабличнаяЧасть)
	// Если отключено групповое формирование, добавим только объект ремонта текущией строки (без иерархии).
	// Если включено будем добавлять объекты иерархии выделенных строк с учетом варианта учета иерархии элементов.
	
	ГрупповоеФормирование = Ложь;
	Если ТабличнаяЧасть = УчетНаработки Тогда
		ГрупповоеФормирование = ГрупповоеФормированиеНаработки;
	ИначеЕсли ТабличнаяЧасть = УчетСостояний Тогда
		ГрупповоеФормирование = ГрупповоеФормированиеСостояния;
	ИначеЕсли ТабличнаяЧасть = УчетКонтролируемыхПоказателейПоказатели Тогда
		ГрупповоеФормирование = ГрупповоеФормированиеКонтрПоказатели;
	КонецЕсли;	

	ОтображаетсяТаблицаПоиска = 
		?(Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска, Истина, Ложь); 
		
    Результат = Новый Массив;
	
	Если ГрупповоеФормирование Тогда 
		
		Если ОтображаетсяТаблицаПоиска Тогда  
			
			ОбъектыРемонта = Элементы.Список.ВыделенныеСтроки;
			
			РеквизитыОбъектовРемонта = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъектов(ОбъектыРемонта, "ЭтоГруппа");
			Для Каждого ВыделенныйОбъект Из ОбъектыРемонта Цикл
				
				Если РеквизитыОбъектовРемонта.Получить(ВыделенныйОбъект) = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Результат.Добавить(ВыделенныйОбъект);
			КонецЦикла;
			
		Иначе	
			
			Для Каждого ИдентификаторСтроки Из Элементы.Дерево.ВыделенныеСтроки Цикл
				
				
				Строка = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если Строка.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;	
				
				Результат.Добавить(Строка.ОбъектРемонта);  
			КонецЦикла;
		КонецЕсли;
					
		Если ЗначениеЗаполнено(ВариантУчетаИерархииЭлементов)
			И ВариантУчетаИерархииЭлементов <> ПредопределенноеЗначение("Перечисление.торо_ВариантыУчетаИерархииЭлементовПриПодборе.НеУчитыватьИерархию") Тогда 
			
			МассивВыбранныхСтрок = торо_РаботаСИерархией20.ДополнитьОтобратьМассивВыбранныхСтрок(Результат, ВариантУчетаИерархииЭлементов, ТекСтруктураИерархии, Ложь); 
			
			Результат.Очистить();
			
			Для каждого Строка из МассивВыбранныхСтрок Цикл
				Результат.Добавить(Строка.Ссылка);       
			КонецЦикла;
		КонецЕсли; 
		
	Иначе  
		
		Если ОтображаетсяТаблицаПоиска Тогда
			ТекущиеДанные = Элементы.Список.ТекущиеДанные;
			ОбъектРемонтаДобавляемый = ?(ТекущиеДанные = Неопределено, ОбъектРемонта, ТекущиеДанные.Ссылка); 
		Иначе
			ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
			ОбъектРемонтаДобавляемый = ?(ТекущиеДанные = Неопределено, ОбъектРемонта, ТекущиеДанные.ОбъектРемонта);
		КонецЕсли;
		
		Результат.Добавить(ОбъектРемонтаДобавляемый);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте 
Процедура ПриИзмененииГрупповогоФормирования(ИмяРеквизитаФормы, ТабличнаяЧасть)
	
	Значение = ЭтотОбъект[ИмяРеквизитаФормы];
	
	Если Значение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРазличныеОбъектыРемонта = Ложь;
	ИмяПоляОбъектРемонта = ?(ТабличнаяЧасть = УчетНаработки, "Объект", "ОбъектРемонта");
	ПроверочныйОбъектРемонта = Неопределено; 
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если ПроверочныйОбъектРемонта = Неопределено Тогда
			ПроверочныйОбъектРемонта = Строка[ИмяПоляОбъектРемонта];
		ИначеЕсли Не ПроверочныйОбъектРемонта = Строка[ИмяПоляОбъектРемонта] Тогда
			ЕстьРазличныеОбъектыРемонта = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
		
	Если Не ЕстьРазличныеОбъектыРемонта Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяРеквизитаФормы", ИмяРеквизитаФормы);
	ПараметрыОповещения.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТабличныеЧастиПриОтключенииГрупповогоФормирования", ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'В табличной части с показателями будет оставлен только один объект ремонта. Продолжить?'"), 
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте 
Процедура ОчиститьТабличныеЧастиПриОтключенииГрупповогоФормирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизитаФормы] = Истина;
		Возврат;
	КонецЕсли;

	ТабличнаяЧасть = ДополнительныеПараметры.ТабличнаяЧасть;
	ИмяПоляОбъектРемонта = ?(ТабличнаяЧасть = УчетНаработки, "Объект", "ОбъектРемонта");
	
	// Попадем в эту процедуру, если в табличной части несколько строк;
	ПерваяСтрока = ТабличнаяЧасть[0]; 
	ПервыйОбъектРемонта = ПерваяСтрока[ИмяПоляОбъектРемонта];
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если Не Строка[ИмяПоляОбъектРемонта] = ПервыйОбъектРемонта Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Строка Из СтрокиКУдалению Цикл
		
		ТабличнаяЧасть.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьЗапросДинамическогоСпискаПоказателями(Список)
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,"И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)", 
	"И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ) КАК ВТ_СостоянияОР
	|	ПО торо_ОбъектыРемонта.Ссылка = ВТ_СостоянияОР.ОбъектРемонта");
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,", 
	"	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
	|	ВТ_СостоянияОР.ВидЭксплуатации КАК Состояние,");
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИерархииНаСервере()
	торо_РаботаСИерархией20.ЗаполнитьПараметрыИерархии(ЭтаФорма);
	СтруктураПараметровИерархии.КонечныеЭлементыВДереве = Истина;
	ПустойРодитель = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(СтруктураПараметровИерархии);
	торо_РаботаСИерархией20.УстановитьЗапросВСпискеПоИерархии(Список, СтруктураПараметровИерархии, ПустойРодитель, ФОИспользоватьДокументыЖЦОборудования);
	торо_РаботаСИерархией20КлиентСервер.УстановитьОтборСпискаПоРодителю(Список, ПустойРодитель, Ложь);
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(Дерево, СтруктураПараметровИерархии, ПустойРодитель, ФОИспользоватьДокументыЖЦОборудования, СписокСтатусов);
	
	ДеревоПередРазворачиваниемНаСервере(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Ложь);
	
	ДополнитьЗапросДинамическогоСпискаПоказателями(Список);

	Поле = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, Поле, Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновныеРеквизитыФормы()
	
	Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяОрганизация",
		Справочники.Организации.ПустаяСсылка());
		
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяСтруктураИерархии",
		Истина);
		
	Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновноеПодразделение",
		Справочники.СтруктураПредприятия.ПустаяСсылка());
		
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнойОтветственный",
		Справочники.Пользователи.ПустаяСсылка());
		
	ОрганизацияИзПользовательскихНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяОрганизация",
		Справочники.Организации.ПустаяСсылка());
		
	ПодразделениеИзПользовательскихНастроек	= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновноеПодразделение",
		Справочники.СтруктураПредприятия.ПустаяСсылка());
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеОРНаСервере(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
	               |	торо_ОбъектыРемонта.Наименование КАК Наименование,
	               |	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
	               |	торо_ОбъектыРемонта.Направление КАК Направление,
	               |	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
	               |	торо_ОбъектыРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
	               |	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
	               |	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
	               |	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ИЗСправОбъектРемонта
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИЗСправОбъектРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	ВТ_ИЗСправОбъектРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	ВТ_ИЗСправОбъектРемонта.ТехНомер КАК ТехНомер,
	               |	ВТ_ИЗСправОбъектРемонта.Наименование КАК Наименование,
	               |	ВТ_ИЗСправОбъектРемонта.Подразделение КАК Подразделение,
	               |	ВТ_ИЗСправОбъектРемонта.Направление КАК Направление,
	               |	ВТ_ИЗСправОбъектРемонта.ЭтоГруппа КАК ЭтоГруппа,
	               |	ВТ_ИЗСправОбъектРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
	               |	ВТ_ИЗСправОбъектРемонта.Контрагент КАК Контрагент,
	               |	ВТ_ИЗСправОбъектРемонта.ТиповойОР КАК ТиповойОР,
	               |	ВТ_ИЗСправОбъектРемонта.Приоритет КАК Приоритет,
	               |	ВТ_ИЗСправОбъектРемонта.Ссылка КАК Ссылка,
	               |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации.Ссылка КАК СостояниеОР,
	               |	ВЫБОР
	               |		КОГДА торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации.ТипЭксплуатации <> ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой)
	               |			ТОГДА """"
	               |		ИНАЧЕ торо_ТекущееСостояниеОРСрезПоследних.ПричинаПростоя
	               |	КОНЕЦ КАК ПричинаПростоя
	               |ИЗ
	               |	ВТ_ИЗСправОбъектРемонта КАК ВТ_ИЗСправОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &Ссылка) КАК торо_ТекущееСостояниеОРСрезПоследних
	               |		ПО ВТ_ИЗСправОбъектРемонта.Ссылка = торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта.Ссылка";
				 
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	СтруктураВозврата = Новый Структура("ИнвентарныйНомер, ЗаводскойНомер, ТехНомер, АдресМестонахождения, Наименование,
									  	|Подразделение, ПодразделениеИсполнитель, Направление, ЭтоГруппа, ВнешнийОбъект,
									  	|Контрагент, СостояниеОР, Ссылка, ТиповойОР, Приоритет, ПричинаПростоя");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеОРНаКлиенте(ТекущиеДанные)
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийОР = ТекущиеДанные.Ссылка;
		СтруктураВозврата = ЗаполнитьДанныеОРНаСервере(ТекущийОР);
		
		Подразделение    = СтруктураВозврата.Подразделение;
		Наименование 	 = СтруктураВозврата.Наименование;
		ИнвентарныйНомер = СтруктураВозврата.ИнвентарныйНомер;
		ЗаводскойНомер 	 = СтруктураВозврата.ЗаводскойНомер;
		ТехНомер 		 = СтруктураВозврата.ТехНомер;
		Контрагент 		 = СтруктураВозврата.Контрагент;
		ОбъектРемонта 	 = СтруктураВозврата.Ссылка;
		ТиповойОР        = СтруктураВозврата.ТиповойОР;
		Направление      = СтруктураВозврата.Направление;
		Приоритет		 = СтруктураВозврата.Приоритет;
		СостояниеОР      = СтруктураВозврата.СостояниеОР;
		ПричинаПростоя	 = СтруктураВозврата.ПричинаПростоя;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОРПоПоказателям()
	
	ОтменитьПоискВСпискеОРПоПоказателям();
	Если ТипПоискаПоказателей = "КонтролируемыеПоказателиНеУказаны" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЕстьИзмеряемыеПоказатели", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ИначеЕсли ТипПоискаПоказателей = "ПоказателиНаработкиНеВведены"	Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЕстьПараметрыНаработки", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ТипПоискаПоказателей, Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусВУчете", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	КонецЕсли;
	
	Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоискВСпискеОРПоПоказателям()
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить(Новый ПолеКомпоновкиДанных("ЕстьИзмеряемыеПоказатели"));
	СписокПолей.Добавить(Новый ПолеКомпоновкиДанных("ЕстьПараметрыНаработки"));
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если СписокПолей.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(ЗначениеПоиска);
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОРПоСтатусам(ПолеПоиска, ТекстПоиска, ПолучатьСтатусы, Статусы)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ПолеПоиска = "ПаспХарактеристика" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ОбъектыРемонтаДополнительныеРеквизиты.Ссылка КАК Ссылка,
		               |	ПРЕДСТАВЛЕНИЕ(торо_ОбъектыРемонтаДополнительныеРеквизиты.Значение) КАК Значение
		               |ИЗ
		               |	Справочник.торо_ОбъектыРемонта.ДополнительныеРеквизиты КАК торо_ОбъектыРемонтаДополнительныеРеквизиты";
		Таб = Запрос.Выполнить().Выгрузить();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТЗ_ОбъектыРемонта.Значение КАК Значение,
		               |	ТЗ_ОбъектыРемонта.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ОбъектыРемонта
		               |ИЗ
		               |	&ТЗ_ОбъектыРемонта КАК ТЗ_ОбъектыРемонта
		               |ГДЕ
		               |	ТЗ_ОбъектыРемонта.Значение ПОДОБНО &ТекстЗначения";

		Запрос.УстановитьПараметр("ТЗ_ОбъектыРемонта", Таб);
		Запрос.УстановитьПараметр("ТекстЗначения", "%" + ТекстПоиска + "%");
		РезЗапроса = Запрос.Выполнить();
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ОбъектыРемонта
		               |ИЗ
		               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |ГДЕ
		               |	&ПолеОтбораПоСтроке
		               |	И НЕ торо_ОбъектыРемонта.ЭтоГруппа
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка";
		ПолеОтбораПоСтроке = СтрШаблон("торо_ОбъектыРемонта.%1 ПОДОБНО &СтрокаПоиска", ПолеПоиска);		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОтбораПоСтроке", ПолеОтбораПоСтроке);
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + ТекстПоиска + "%");
		РезЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	Если ПолучатьСтатусы Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР
		               |ПОМЕСТИТЬ ОбъектыИСтатусы
		               |ИЗ
		               |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(
		               |			,
		               |			ОбъектРемонта В
		               |				(ВЫБРАТЬ
		               |					ОбъектыРемонта.Ссылка
		               |				ИЗ
		               |					ОбъектыРемонта)) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОбъектыРемонта.Ссылка КАК Ссылка
		               |ИЗ
		               |	ОбъектыРемонта КАК ОбъектыРемонта
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыИСтатусы КАК ОбъектыИСтатусы
		               |		ПО ОбъектыРемонта.Ссылка = ОбъектыИСтатусы.ОбъектРемонта
		               |ГДЕ
		               |	ЕСТЬNULL(ОбъектыИСтатусы.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВучете.НеПринятоКУчету)) В (&СтатусОР)";
		
		Запрос.УстановитьПараметр("СтатусОР", Статусы);
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбъектыРемонта.Ссылка КАК Ссылка
		               |ИЗ
		               |	ОбъектыРемонта КАК ОбъектыРемонта";
		
		Запрос.УстановитьПараметр("СтатусОР", Статусы);
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	КонецЕсли;
	Возврат МассивСсылок;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОРПоНаименованию(Текст)
	ОтменитьПоискВСпискеОРПоНаименованию();
	
	Если ФОИспользоватьДокументыЖЦОборудования ИЛИ ТипПоиска = "ПаспХарактеристика" Тогда
		Поле = "Ссылка";
		ПравоеЗначение = ПолучитьСписокОРПоСтатусам(ТипПоиска, Текст, ФОИспользоватьДокументыЖЦОборудования, СписокСтатусов);
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		Поле = ТипПоиска;
		ПравоеЗначение = Текст;
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, Поле, ПравоеЗначение, ВидСравненияОтбора,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(Текст) И Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" И
									Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели";
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	Иначе
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоискВСпискеОРПоНаименованию()
	СписокПолей = Новый СписокЗначений;
	Для каждого Элемент Из Элементы.ТипПоиска.СписокВыбора Цикл
		СписокПолей.Добавить(Новый ПолеКомпоновкиДанных(Элемент.Значение));
	КонецЦикла;
	СписокПолей.Добавить(Новый ПолеКомпоновкиДанных("Ссылка"));
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если СписокПолей.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ЗначениеЗаполнено(ЗначениеПоиска) И Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" И
									Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели";
	
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОР(ИмяЭлемента)
	Если Не ЗначениеЗаполнено(ЭтотОбъект[ИмяЭлемента]) Тогда
	    ОтменитьПоискВСпискеОР(ИмяЭлемента);
		Возврат;
	КонецЕсли; 
	
	Если ИмяЭлемента = "ТипПоискаОрганизация" Тогда
		Поле = "Организация";
	ИначеЕсли ИмяЭлемента = "ТипПоискаПодразделение" Тогда
		Поле = "Подразделение";
	ИначеЕсли ИмяЭлемента = "ТипПоискаНаправление" Тогда
		Поле = "Направление";
	ИначеЕсли ИмяЭлемента = "ТипПоискаТиповойОР" Тогда
		Поле = "ТиповойОР";
	ИначеЕсли ИмяЭлемента = "ТипПоискаСостояние" Тогда
		Поле = "Состояние";
	ИначеЕсли ИмяЭлемента = "ТипПоискаКритичность" Тогда
		Поле = "Приоритет";
	КонецЕсли;

	ОтборУстановлен = Ложь;
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора.ПравоеЗначение = ЭтотОбъект[ИмяЭлемента];
			ОтборУстановлен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОтборУстановлен Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, Поле, ЭтотОбъект[ИмяЭлемента], ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Если ФОИспользоватьДокументыЖЦОборудования Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусВУчете", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		КонецЕсли
	КонецЕсли;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" И
									Не ЗначениеЗаполнено(ЗначениеПоиска) И Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели" И
									Не ЗначениеЗаполнено(ТипПоискаКритичность) И
									Не ЗначениеЗаполнено(ТипПоискаСостояние);
									
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
		УстановкаДоступности(Элементы.Дерево.ТекущиеДанные);
	Иначе
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
		Если Не Элементы.Список.ТекущиеДанные = Неопределено Тогда
			УстановкаДоступности(Элементы.Список.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте                                                  
Процедура ОтменитьПоискВСпискеОР(ИмяЭлемента)
	Если ИмяЭлемента = "ТипПоискаОрганизация" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Организация");
	ИначеЕсли ИмяЭлемента = "ТипПоискаПодразделение" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Подразделение");
	ИначеЕсли ИмяЭлемента = "ТипПоискаНаправление" Тогда	
	    Поле = Новый ПолеКомпоновкиДанных("Направление");
	ИначеЕсли ИмяЭлемента = "ТипПоискаТиповойОР" Тогда	
	    Поле = Новый ПолеКомпоновкиДанных("ТиповойОР");
	ИначеЕсли ИмяЭлемента = "ТипПоискаСостояние" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Состояние");
	ИначеЕсли ИмяЭлемента = "ТипПоискаКритичность" Тогда
		Поле = Новый ПолеКомпоновкиДанных("Приоритет");
	КонецЕсли;

	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ЭлементДляУдаления = ЭлементОтбора;
			Список.Отбор.Элементы.Удалить(ЭлементДляУдаления);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДляОтборовНеЗаполнены = Не ЗначениеЗаполнено(ТипПоискаТиповойОР) И Не ЗначениеЗаполнено(ТипПоискаОрганизация) И
									Не ЗначениеЗаполнено(ТипПоискаНаправление) И Не ЗначениеЗаполнено(ТипПоискаПодразделение) И
									Не ТипПоискаПоказателей = "ЕстьПараметрыНаработки" И
									Не ЗначениеЗаполнено(ЗначениеПоиска) И Не ТипПоискаПоказателей = "ЕстьИзмеряемыеПоказатели" И
									Не ТипПоискаПоказателей = "КонтролируемыеПоказателиНеУказаны" И Не ТипПоискаПоказателей = "ПоказателиНаработкиНеВведены" И
									Не ЗначениеЗаполнено(ТипПоискаКритичность) И
									Не ЗначениеЗаполнено(ТипПоискаСостояние);
									
	Если ЗначенияДляОтборовНеЗаполнены Тогда
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
		УстановкаДоступности(Элементы.Дерево.ТекущиеДанные);
	Иначе
		Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
		Если Не Элементы.Список.ТекущиеДанные = Неопределено Тогда
			УстановкаДоступности(Элементы.Список.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормы(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		УчетНаработки.Очистить();
		УчетСостояний.Очистить();
		УчетКонтролируемыхПоказателейПоказатели.Очистить();
		Закрыть();	
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ОбновитьКартинкиЭлементовДереваНаСервере(ИдентификаторСтроки = 0)
	торо_РаботаСИерархией20.ОбновитьКартинкиЭлементовДереваНаСервере(Дерево, ИдентификаторСтроки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборПоОбъектуРемонта(ТекущийОбъектРемонта)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.торо_РабочееМестоУчетаПоказателейЭксплуатации", 
			Пользователи.ТекущийПользователь().УникальныйИдентификатор(), 
			ТекущийОбъектРемонта); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтборПоОбъектуРемонта()
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.торо_РабочееМестоУчетаПоказателейЭксплуатации", 
		Пользователи.ТекущийПользователь().УникальныйИдентификатор()); 
КонецФункции

#Область УчетНаработкиОР

&НаСервере 
Функция СоздатьДокументыНаработкаСервер()
  	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСсылкаСПодразделениями.Объект КАК Объект,
	|	ТаблицаСсылкаСПодразделениями.Показатель КАК Показатель,
	|	ТаблицаСсылкаСПодразделениями.ДатаРаботыС КАК ДатаРаботыС,
	|	ТаблицаСсылкаСПодразделениями.ДатаРаботыПо КАК ДатаРаботыПо,
	|	ТаблицаСсылкаСПодразделениями.СтароеЗначение КАК СтароеЗначение,
	|	ТаблицаСсылкаСПодразделениями.НовоеЗначение КАК НовоеЗначение,
	|	ТаблицаСсылкаСПодразделениями.НаработкаСНачалаЭксплуатации КАК НаработкаСНачалаЭксплуатации,
	|	ТаблицаСсылкаСПодразделениями.Наработка КАК Наработка,
	|	ТаблицаСсылкаСПодразделениями.НаработкаСНачалаЭксплуатацииНачало КАК НаработкаСНачалаЭксплуатацииНачало,
	|	ТаблицаСсылкаСПодразделениями.Иерархия КАК Иерархия,
	|	ТаблицаСсылкаСПодразделениями.ДокументСинхронизации КАК ДокументСинхронизации,
	|	ТаблицаСсылкаСПодразделениями.РаспространятьНаПодчиненных КАК РаспространятьНаПодчиненных
	|ПОМЕСТИТЬ ВТ_ТаблицаСПодразделением
	|ИЗ
	|	&ТаблицаСсылка КАК ТаблицаСсылкаСПодразделениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаСПодразделением.Объект КАК Объект,
	|	ВТ_ТаблицаСПодразделением.Показатель КАК Показатель,
	|	ВТ_ТаблицаСПодразделением.ДатаРаботыС КАК ДатаРаботыС,
	|	ВТ_ТаблицаСПодразделением.ДатаРаботыПо КАК ДатаРаботыПо,
	|	ВТ_ТаблицаСПодразделением.СтароеЗначение КАК СтароеЗначение,
	|	ВТ_ТаблицаСПодразделением.НовоеЗначение КАК НовоеЗначение,
	|	ВТ_ТаблицаСПодразделением.НаработкаСНачалаЭксплуатации КАК НаработкаСНачалаЭксплуатации,
	|	ВТ_ТаблицаСПодразделением.Наработка КАК Наработка,
	|	ВТ_ТаблицаСПодразделением.НаработкаСНачалаЭксплуатацииНачало КАК НаработкаСНачалаЭксплуатацииНачало,
	|	ВТ_ТаблицаСПодразделением.Иерархия КАК Иерархия,
	|	ВТ_ТаблицаСПодразделением.РаспространятьНаПодчиненных КАК РаспространятьНаПодчиненных,
	|	ВТ_ТаблицаСПодразделением.Объект.Подразделение КАК Подразделение
	|ИЗ
	|	ВТ_ТаблицаСПодразделением КАК ВТ_ТаблицаСПодразделением
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаСПодразделением.ДокументСинхронизации КАК ДокументСинхронизации
	|ИЗ
	|	ВТ_ТаблицаСПодразделением КАК ВТ_ТаблицаСПодразделением";
	Запрос.УстановитьПараметр("ТаблицаСсылка", УчетНаработки.Выгрузить());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УчетНаработкиСПодразделением = РезультатЗапроса[1].Выгрузить();
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСсылкаСПодразделениями.Объект КАК Объект,
	|	ТаблицаСсылкаСПодразделениями.Показатель КАК Показатель,
	|	ТаблицаСсылкаСПодразделениями.ДатаРаботыС КАК ДатаРаботыС,
	|	ТаблицаСсылкаСПодразделениями.ДатаРаботыПо КАК ДатаРаботыПо,
	|	ТаблицаСсылкаСПодразделениями.СтароеЗначение КАК СтароеЗначение,
	|	ТаблицаСсылкаСПодразделениями.НовоеЗначение КАК НовоеЗначение,
	|	ТаблицаСсылкаСПодразделениями.НаработкаСНачалаЭксплуатации КАК НаработкаСНачалаЭксплуатации,
	|	ТаблицаСсылкаСПодразделениями.Наработка КАК Наработка,
	|	ТаблицаСсылкаСПодразделениями.НаработкаСНачалаЭксплуатацииНачало КАК НаработкаСНачалаЭксплуатацииНачало,
	|	ТаблицаСсылкаСПодразделениями.РодительИерархии КАК РодительИерархии
	|ПОМЕСТИТЬ ВТ_ТаблицаСПодразделением
	|ИЗ
	|	&ТаблицаСсылка КАК ТаблицаСсылкаСПодразделениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаСПодразделением.Объект КАК Объект,
	|	ВТ_ТаблицаСПодразделением.Показатель КАК Показатель,
	|	ВТ_ТаблицаСПодразделением.ДатаРаботыС КАК ДатаРаботыС,
	|	ВТ_ТаблицаСПодразделением.ДатаРаботыПо КАК ДатаРаботыПо,
	|	ВТ_ТаблицаСПодразделением.СтароеЗначение КАК СтароеЗначение,
	|	ВТ_ТаблицаСПодразделением.НовоеЗначение КАК НовоеЗначение,
	|	ВТ_ТаблицаСПодразделением.НаработкаСНачалаЭксплуатации КАК НаработкаСНачалаЭксплуатации,
	|	ВТ_ТаблицаСПодразделением.Наработка КАК Наработка,
	|	ВТ_ТаблицаСПодразделением.НаработкаСНачалаЭксплуатацииНачало КАК НаработкаСНачалаЭксплуатацииНачало,
	|	ВТ_ТаблицаСПодразделением.РодительИерархии КАК РодительИерархии,
	|	ВТ_ТаблицаСПодразделением.Объект.Подразделение КАК Подразделение
	|ИЗ
	|	ВТ_ТаблицаСПодразделением КАК ВТ_ТаблицаСПодразделением";
		
	Запрос.УстановитьПараметр("ТаблицаСсылка", НаработкаПодчиненныхОбъектов.Выгрузить());
	НаработкаПодчиненныхОбъектовСПодразд = Запрос.Выполнить().Выгрузить();	
	
	ОтказВСоздании = Ложь;
	НомСтр = 0;
	Для каждого ПозицияДок Из УчетНаработкиСПодразделением Цикл
		НомСтр = НомСтр + 1;
		
		Если ПозицияДок.Объект = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			ШаблонСообщения = НСтр("ru = 'Строка %1: Значение ""Объекта"" должно быть заполнено'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомСтр);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, ОтказВСоздании);
		ИначеЕсли ПозицияДок.ДатаРаботыПо = Дата("00010101000000") Тогда
			ШаблонСообщения = НСтр("ru = 'Строка %1: Значение ""Дата работы По"" должно быть заполнено'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомСтр);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, ОтказВСоздании);
		ИначеЕсли ПозицияДок.ДатаРаботыС > ПозицияДок.ДатаРаботыПо Тогда
			ШаблонСообщения = НСтр("ru = 'Строка %1: Значение ""Дата работы По"" должно быть больше чем ""Дата работы С""'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомСтр);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, ОтказВСоздании);
		ИначеЕсли Не ЗначениеЗаполнено(ПозицияДок.Показатель) Тогда
			ШаблонСообщения = НСтр("ru = 'Строка %1: Значение Показателя наработки должно быть заполнено'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомСтр);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, ОтказВСоздании);
		ИначеЕсли Не ПозицияДок.Наработка>0 Тогда
			ШаблонСообщения = НСтр("ru = 'Строка %1: Значение Наработки должно быть больше нуля'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомСтр);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, ОтказВСоздании);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтказВСоздании = Истина Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	ДокументОбъект = Документы.торо_УчетНаработкиОборудования.СоздатьДокумент();
	ДокументОбъект.Заполнить(Неопределено);

	ДокументОбъект.Дата = ТекущаяДата();	
	ДокументОбъект.Подразделение = ПодразделениеИзПользовательскихНастроек;
	ДокументОбъект.Организация   = ОрганизацияИзПользовательскихНастроек;
	ДокументОбъект.Ответственный = Ответственный;	
	
	Для каждого СтрокаТаблицы Из УчетНаработкиСПодразделением Цикл
		НС = ДокументОбъект.НаработкаОбъектов.Добавить();
		НС.Объект 								= СтрокаТаблицы.Объект;
		НС.Показатель 							= СтрокаТаблицы.Показатель;
		НС.ДатаРаботыС 							= СтрокаТаблицы.ДатаРаботыС;
		НС.ДатаРаботыПо             			= СтрокаТаблицы.ДатаРаботыПо;
		НС.СтароеЗначение           			= СтрокаТаблицы.СтароеЗначение;
		НС.НовоеЗначение           				= СтрокаТаблицы.НовоеЗначение;
		НС.НаработкаСНачалаЭксплуатации         = СтрокаТаблицы.НаработкаСНачалаЭксплуатации;
		НС.Наработка         					= СтрокаТаблицы.Наработка;
		НС.НаработкаСНачалаЭксплуатацииНачало   = СтрокаТаблицы.НаработкаСНачалаЭксплуатацииНачало;
		НС.СтруктураИерархии   					= СтрокаТаблицы.Иерархия;
		НС.РаспространятьНаПодчиненных   		= СтрокаТаблицы.РаспространятьНаПодчиненных;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыПодчин Из НаработкаПодчиненныхОбъектовСПодразд Цикл
		НС = ДокументОбъект.НаработкаПодчиненныхОбъектов.Добавить();
		НС.Объект 								= СтрокаТаблицыПодчин.Объект;
		НС.Показатель 							= СтрокаТаблицыПодчин.Показатель;
		НС.ДатаРаботыС 							= СтрокаТаблицыПодчин.ДатаРаботыС;
		НС.ДатаРаботыПо             			= СтрокаТаблицыПодчин.ДатаРаботыПо;
		НС.СтароеЗначение           			= СтрокаТаблицыПодчин.СтароеЗначение;
		НС.НовоеЗначение           				= СтрокаТаблицыПодчин.НовоеЗначение;
		НС.НаработкаСНачалаЭксплуатации         = СтрокаТаблицыПодчин.НаработкаСНачалаЭксплуатации;
		НС.Наработка         					= СтрокаТаблицыПодчин.Наработка;
		НС.НаработкаСНачалаЭксплуатацииНачало   = СтрокаТаблицыПодчин.НаработкаСНачалаЭксплуатацииНачало;
		НС.РодительИерархии   					= СтрокаТаблицыПодчин.РодительИерархии;
	КонецЦикла;

	Попытка
		НачатьТранзакцию();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи документа произошла ошибка: '");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	    ВызватьИсключение;
	КонецПопытки;
	
	// Если просто синхронизировать периоды наработки из формы РМ, то в документе "Установка произвольного значения наработки"
	// не заполнится реквизит ДокументОснование, т.к. в РМ еще нет ссылки на документ наработки. Поэтому после синхронизации
	// заполняем в нужных строках таблицы созданный документ синхронизации, а сейчас заполняем у них реквизит ссылкой на
	// только что созданный документ наработки (документов может быть несколько, если несколько раз выполнять команду
	// синхронизации для разных строк). Необходимо для того, чтобы в связанных документах они отображаись друг у друга.
	ВыборкаДокументовСинхронизации = РезультатЗапроса[2].Выбрать();
	Пока ВыборкаДокументовСинхронизации.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДокументовСинхронизации.ДокументСинхронизации) Тогда
			ДокументСинхронизацииОбъект = ВыборкаДокументовСинхронизации.ДокументСинхронизации.ПолучитьОбъект();
			ДокументСинхронизацииОбъект.ДокументОснование = ДокументОбъект.Ссылка;
			ДокументСинхронизацииОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ДокументОбъект.Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеОРИПараметровНаработки(МассивОР)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель КАК Показатель
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(, ОбъектРемонта В (&МассивОР)) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних
	|ИТОГИ ПО
	|	ОбъектРемонта";
	
	Запрос.УстановитьПараметр("МассивОР", МассивОР);
	
	ВыборкаОР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОбъектРемонта");
	
	СоответствиеОР = Новый Соответствие;
	
	Пока ВыборкаОР.Следующий() Цикл
		МассивПоказателейНаработки = Новый массив;
		ВыборкаПараметровНаработки = ВыборкаОР.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаПараметровНаработки.Следующий() Цикл
			МассивПоказателейНаработки.Добавить(ВыборкаПараметровНаработки.Показатель);
		КонецЦикла;
		
		СоответствиеОР.Вставить(ВыборкаОР.ОбъектРемонта, МассивПоказателейНаработки);
	КонецЦикла;
	
	Возврат СоответствиеОР;
КонецФункции

&НаСервере
Функция ПолучитьМаксимальныеЗначенияНаработкиДляОбъектовДокумента()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель
	|ПОМЕСТИТЬ НаработкаОбъектов
	|ИЗ
	|	&НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|ПОМЕСТИТЬ НаработкаПодчиненныхОбъектов
	|ИЗ
	|	&НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель
	|ПОМЕСТИТЬ ОбъектыИПоказатели
	|ИЗ
	|	НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|ИЗ
	|	НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыИПоказатели.Объект,
	|	ОбъектыИПоказатели.Показатель,
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение
	|ИЗ
	|	ОбъектыИПоказатели КАК ОбъектыИПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО (торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = ОбъектыИПоказатели.Объект)
	|			И (торо_МаксимальныеЗначенияНаработкиОР.Показатель = ОбъектыИПоказатели.Показатель)");

	Запрос.УстановитьПараметр("НаработкаОбъектов", УчетНаработки.Выгрузить(, "Объект, Показатель"));
	Запрос.УстановитьПараметр("НаработкаПодчиненныхОбъектов", НаработкаПодчиненныхОбъектов.Выгрузить(, "Объект, Показатель"));

	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Функция ПолучитьСписокРазличныхЗначенийИзСоответствия(СоответствиеОР)
	ОбщийСписок = Новый СписокЗначений;
	Для каждого КлючИЗначение Из СоответствиеОР Цикл
		Для каждого ЭлементМассива Из КлючИЗначение.Значение Цикл
			Если ОбщийСписок.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				ОбщийСписок.Добавить(ЭлементМассива,,Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщийСписок.СортироватьПоЗначению();

	Возврат ОбщийСписок;
КонецФункции

&НаКлиенте
Процедура ВыполнитьОповещениеОВыборе(МассивОР, ДопПоляДляСтруктурыВозврата = Неопределено)
	Если МассивОР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СоответствиеОбъектовРемонта", МассивОР);

	Если ДопПоляДляСтруктурыВозврата <> Неопределено Тогда
		Для каждого КлючИЗначение Из ДопПоляДляСтруктурыВозврата Цикл
			СтруктураПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НаработкаОбъектовОбработкаВыбора(СтруктураПараметров, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПараметровНаработки(МассивОР)
	ДопПоляДляСтруктурыВозврата = Новый Структура;
	ДопПоляДляСтруктурыВозврата.Вставить("ДатаСнятия", ТекущаяДата());
	ДопПоляДляСтруктурыВозврата.Вставить("ПроставлятьПлановуюНаработку", ПроставлятьПлановуюНаработку);
	ДопПоляДляСтруктурыВозврата.Вставить("УчитыватьПростои", УчитыватьПростоиОР);

	СоответствиеОР = ПолучитьСоответствиеОРИПараметровНаработки(МассивОР);
	
	Если СоответствиеОР.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Для выбранных объектов ремонта не заданы параметры наработки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьВидПараметровНаработки Тогда
		ОбщийСписокПараметровНаработки = ПолучитьСписокРазличныхЗначенийИзСоответствия(СоответствиеОР);
		
		ДопПараметры = Новый Структура("СоответствиеОР, ДопПоляДляСтруктурыВозврата", СоответствиеОР, ДопПоляДляСтруктурыВозврата);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораИзСпискаЗначенийБезПродолжения", ЭтотОбъект, ДопПараметры);
		ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды параметров наработки'");
		ОбщийСписокПараметровНаработки.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
		
	Иначе
		ВыполнитьОповещениеОВыборе(СоответствиеОР, ДопПоляДляСтруктурыВозврата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОтфильтроватьСоответствиеОРПоМассивуВыбранныхЗначений(СоответствиеОР, СписокЗначенийСПометками)
	ОтфильтрованноеСоответствиеОР = Новый Соответствие;
	
	ВыбранныеЗначения = Новый Массив;
	Для каждого ЭлементСписка Из СписокЗначенийСПометками Цикл
		Если ЭлементСписка.Пометка Тогда
			ВыбранныеЗначения.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранныеЗначения.Количество() = 0 Тогда
		Возврат ОтфильтрованноеСоответствиеОР;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СоответствиеОР Цикл
		ОтобранныеЗначения = Новый Массив;
		Для каждого ЭлементМассива Из КлючИЗначение.Значение Цикл
			Если ВыбранныеЗначения.Найти(ЭлементМассива) <> Неопределено Тогда
				ОтобранныеЗначения.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтобранныеЗначения.Количество() > 0 Тогда
			ОтфильтрованноеСоответствиеОР.Вставить(КлючИЗначение.Ключ, ОтобранныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтфильтрованноеСоответствиеОР;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораИзСпискаЗначенийБезПродолжения(СписокЗначенийСПометками, ДопПараметры) Экспорт
	Если СписокЗначенийСПометками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеОР = ДопПараметры.СоответствиеОР;
	
	ДопПоляДляСтруктурыВозврата = Неопределено;
	ДопПараметры.Свойство("ДопПоляДляСтруктурыВозврата", ДопПоляДляСтруктурыВозврата);
	
	ОтфильтрованноеСоответствиеОР = ОтфильтроватьСоответствиеОРПоМассивуВыбранныхЗначений(СоответствиеОР, СписокЗначенийСПометками);
	
	ВыполнитьОповещениеОВыборе(ОтфильтрованноеСоответствиеОР, ДопПоляДляСтруктурыВозврата);
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗначениеНаработки()
	Для каждого СтрокаТЧ Из УчетНаработки Цикл
		СтрокаТЧ.Наработка = 0;
		СтрокаТЧ.НовоеЗначение = СтрокаТЧ.СтароеЗначение;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РаспространитьНаПодчиненныхДляТекущейСтроки(ТекСтрокаНаработкаОбъектов)
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Ложь;
	
	Если ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных Тогда
						
		ТаблицаИерархииОР = торо_РаботаСИерархией20.ПолучитьТаблицуИерархии(ТекСтрокаНаработкаОбъектов.Иерархия, ТекущаяДата());
		ПредИерархия = ТекСтрокаНаработкаОбъектов.Иерархия;
		
		ТаблицаПодчиненныхОР = торо_РаботаСНаработкой.ПолучитьЗависимыеОР(ТаблицаИерархииОР, ТекСтрокаНаработкаОбъектов.Объект, Неопределено, ТекСтрокаНаработкаОбъектов.ДатаРаботыС, ТекСтрокаНаработкаОбъектов.ДатаРаботыПо, ТекСтрокаНаработкаОбъектов.Показатель);
		
		Для каждого СтрокаСНаработкой Из УчетНаработки Цикл
			СтруктураПоиска = Новый Структура("ОбъектИерархии, Показатель", СтрокаСНаработкой.Объект, СтрокаСНаработкой.Показатель);
			Если ТаблицаПодчиненныхОР.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Продолжить;
			Иначе
				ШаблонСообщения = НСтр("ru = 'Невозможно распространить наработку на подчиненные объекты ремонта. Объект ремонта %1 встречается повторно среди подчиненных объектов ремонта объекта %2.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСНаработкой.Объект, ТекСтрокаНаработкаОбъектов.Объект);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЦикла; 

		ТабЗначенийНаработки = торо_РаботаСНаработкой.ТекущееЗначениеНаработкиТаблица(ТаблицаПодчиненныхОР, Документы.торо_УчетНаработкиОборудования.ПустаяСсылка());
		НеобходимаСинхронизация = Ложь;
		
		Если Не Отказ Тогда
			Для каждого СтрПодчиненнаяНаработка Из ТабЗначенийНаработки Цикл
				Если СтрПодчиненнаяНаработка.НаработаноДата <> СтрПодчиненнаяНаработка.ДатаНачала Тогда
					НеобходимаСинхронизация = Истина;
					
					СтруктураПоиска = Новый Структура("Объект, Показатель", ТекСтрокаНаработкаОбъектов.Объект, ТекСтрокаНаработкаОбъектов.Показатель);
					СтрокаТаблицыНаработки = УчетНаработки.НайтиСтроки(СтруктураПоиска)[0];
					
					СтрокаТаблицыНаработки.Синхронизировать = Истина;
					СтрокаТаблицыНаработки.РаспространятьНаПодчиненных = Ложь; 
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НеобходимаСинхронизация Тогда
				ТекстСообщения = НСтр("ru = 'Для распространения наработки на подчиненные ОР необходимо выполнить синхронизацию периодов регистрации наработки!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если Не Отказ Тогда
				СтруктураДляПередачи = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, Наработка");
				ЗаполнитьЗначенияСвойств(СтруктураДляПередачи, ТекСтрокаНаработкаОбъектов);
				торо_РаботаСНаработкой.РаспространитьНаработкуНаПодчиненныхДляТекСтроки(СтруктураДляПередачи, ТабЗначенийНаработки, ТаблицаПодчиненныхОР, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			СтруктураПоиска = Новый Структура("Объект, Показатель", ТекСтрокаНаработкаОбъектов.Объект, ТекСтрокаНаработкаОбъектов.Показатель);
			СтрокаТаблицыНаработки = ЭтотОбъект.УчетНаработки.НайтиСтроки(СтруктураПоиска)[0];
			
			СтрокаТаблицыНаработки.РаспространятьНаПодчиненных = Ложь;
		КонецЕсли;
	Иначе
		СтруктураПоиска = Новый Структура("РодительИерархии, Показатель", ТекСтрокаНаработкаОбъектов.Объект, ТекСтрокаНаработкаОбъектов.Показатель);
		СтрокиПодчиненныхДляУдаления = НаработкаПодчиненныхОбъектов.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхДляУдаления Цикл
			НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПлановойНаработкеНаСервере(ПоПодобраннымОбъектам = Ложь, УчитыватьПростои = Истина)
	ТаблицаДляРассчета = ТаблицаПодобранныхОР.Выгрузить();
	
	Если ТаблицаДляРассчета = Неопределено Тогда
		ОчиститьЗначениеНаработки();
	КонецЕсли;
	
	ТаблицаДанных = торо_РаботаСНаработкой.РассчитатьПлановуюНаработку(ТаблицаДляРассчета, ТекущаяДата(), УчитыватьПростои);
	ТаблицаДанных.Свернуть("ОбъектРемонта, ДатаРаботыС, ДатаРаботыПо, Показатель", "ФактическаяНаработка");
	
	ТабМаксЗначений = ПолучитьМаксимальныеЗначенияНаработкиДляОбъектовДокумента();
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		СтруктураПоиска = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
		СтруктураПоиска.Объект = СтрокаТЗ.ОбъектРемонта;
		МассивСтрокТЧ = УчетНаработки.НайтиСтроки(СтруктураПоиска);
												
		МаксЗначение = 0;
		СтруктураПоиска = Новый Структура("Объект, Показатель");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
		СтруктураПоиска.Объект = СтрокаТЗ.ОбъектРемонта;
		НайденныеСтрокиМаксЗнач = ТабМаксЗначений.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиМаксЗнач.Количество() > 0 Тогда
			МаксЗначение = НайденныеСтрокиМаксЗнач[0].МаксимальноеЗначение;
		КонецЕсли;
		
		Для каждого ЭлементМассива Из МассивСтрокТЧ Цикл
			ЭлементМассива.Наработка    = СтрокаТЗ.ФактическаяНаработка;
			ЭлементМассива.ДатаРаботыПо = ?(ЗначениеЗаполнено(СтрокаТЗ.ДатаРаботыПо),СтрокаТЗ.ДатаРаботыПо,ТекущаяДата());
			ЭлементМассива.НаработкаСНачалаЭксплуатации = ЭлементМассива.Наработка + 
																ЭлементМассива.НаработкаСНачалаЭксплуатацииНачало;
			ЭлементМассива.НовоеЗначение = ЭлементМассива.Наработка + ЭлементМассива.СтароеЗначение;
			Если МаксЗначение <> 0 И ЭлементМассива.НовоеЗначение > МаксЗначение Тогда
				КоличествоСбросовСчетчика = Цел(ЭлементМассива.НовоеЗначение / МаксЗначение);
				ЭлементМассива.НовоеЗначение = ЭлементМассива.НовоеЗначение - КоличествоСбросовСчетчика * МаксЗначение;
				ШаблонСообщения = НСтр("ru = 'Наработка по объекту %1 и показателю %2 превысила максимальное значение. Будет выполнен сброс счетчика.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭлементМассива.Объект, ЭлементМассива.Показатель);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаНаработка Из УчетНаработки Цикл
		// Изменение ранее введенных наработок подчиненных.
		// Удаление ранее введенных наработок подчиненных.
		СтруктураПоиска = Новый Структура("РодительИерархии, Показатель");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНаработка);
		СтрокиПодчиненныхНаУдаление = НаработкаПодчиненныхОбъектов.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
			НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
		КонецЦикла;
		
		СН = Новый Структура("Объект, ДатаРаботыС, Показатель, ДатаРаботыПо, СтароеЗначение, НовоеЗначение,
							 |НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
							 |Иерархия,РаспространятьНаПодчиненных");
		
		ЗаполнитьЗначенияСвойств(СН, СтрокаНаработка);
		РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполненностьГрафика(ПроверятьПоПодобраннымОбъектам = Ложь, УчитыватьПростои = Ложь)
	ТаблицаДляПроверки = ТаблицаПодобранныхОР.Выгрузить();
	
	Если ТаблицаДляПроверки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНаработкиОбъектов.НомерСтроки,
	|	ТаблицаНаработкиОбъектов.ДатаРаботыПо,
	|	ВЫРАЗИТЬ(ТаблицаНаработкиОбъектов.Объект КАК Справочник.торо_ОбъектыРемонта) КАК Объект
	|ПОМЕСТИТЬ ТабДок
	|ИЗ
	|	&ТаблицаНаработкиОбъектов КАК ТаблицаНаработкиОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Объект,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаРаботыПо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаРаботыПо, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	КОНЕЦ КАК ДатаРаботыПо,
	|	ТаблицаДокумента.Объект.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТабДок КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ВЫРАЗИТЬ(КалендарныеГрафики.ДатаГрафика КАК ДАТА) КАК Дата,
	|	ТаблицаДокумента.Объект
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО ТаблицаДокумента.ПлановыйГрафикРаботы = КалендарныеГрафики.Календарь
	|			И ТаблицаДокумента.ДатаРаботыПо = КалендарныеГрафики.ДатаГрафика";

	Запрос.УстановитьПараметр("ТаблицаНаработкиОбъектов", ТаблицаДляПроверки);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	МассивСтрокТЗ = Запрос.Выполнить().Выгрузить().НайтиСтроки(Новый Структура("Дата", Null));
	Массив = Новый Массив;
	Для каждого Строка Из МассивСтрокТЗ Цикл
		Массив.Добавить(Новый Структура("НомерСтроки, Объект", Строка.НомерСтроки, Строка.Объект));
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПлановуюНаработку(ПроверятьПоПодобраннымОбъектам, УчитыватьПростои)
	МассивСтрок = ПроверитьЗаполненностьГрафика(ПроверятьПоПодобраннымОбъектам, УчитыватьПростои);
	
	Если МассивСтрок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		СтрокаНомеровСтрок = "";
		СтрокаОбъектовРемонта = "";
		Для каждого Строка Из МассивСтрок Цикл
			СтрокаНомеровСтрок = ?(СтрокаНомеровСтрок="", "", СтрокаНомеровСтрок + ", ") + Строка.НомерСтроки;
			СтрокаОбъектовРемонта = ?(СтрокаОбъектовРемонта="", "", СтрокаОбъектовРемонта + ", ") + Строка.Объект;
		КонецЦикла;
		
		ШаблонВопроса = НСтр("ru = 'Для объектов ремонта %1 (строки с номерами %2) не заполнен график работы оборудования. Выполнить расчет?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, СтрокаОбъектовРемонта, СтрокаНомеровСтрок);
		СтруктураПараметр = Новый Структура("ПроверятьПоПодобраннымОбъектам, УчитыватьПростои", ПроверятьПоПодобраннымОбъектам, УчитыватьПростои);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПлановуюНаработкуЗавершение", ЭтотОбъект, СтруктураПараметр);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоПлановойНаработкеНаСервере(ПроверятьПоПодобраннымОбъектам, УчитыватьПростои);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлановуюНаработкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    УчитыватьПростои = ДополнительныеПараметры.УчитыватьПростои;
	ПроверятьПоПодобраннымОбъектам = ДополнительныеПараметры.ПроверятьПоПодобраннымОбъектам;
	 
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоПлановойНаработкеНаСервере(ПроверятьПоПодобраннымОбъектам, УчитыватьПростои);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка)
	
	ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'");
	
	Если Не ГрупповоеФормированиеНаработки Тогда
		
		ПроверочныйОбъектРемонта = Неопределено;
		Для каждого КлючИЗначение Из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл 
			ПроверочныйОбъектРемонта = КлючИЗначение.Ключ; 
			Прервать;
		КонецЦикла;
		
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить(УчетНаработки);
		ТабличныеЧасти.Добавить(ТаблицаПодобранныхОР);
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			СтрокиКУдалению = Новый Массив;
			Для Каждого Строка Из ТабличнаяЧасть Цикл
				Если Не Строка.Объект = ПроверочныйОбъектРемонта Тогда
					СтрокиКУдалению.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				ТабличнаяЧасть.Удалить(Строка);
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
		
	Для каждого КлючИЗначение Из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл     
		ОбъектРемонтаДляДобавления = КлючИЗначение.Ключ;
		Для каждого ПоказательНаработки Из КлючИЗначение.Значение Цикл
			НайденныеСтроки = УчетНаработки.НайтиСтроки(Новый Структура("Объект, Показатель", ОбъектРемонтаДляДобавления, ПоказательНаработки));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = УчетНаработки.Добавить();
				НоваяСтрока.Объект = ОбъектРемонтаДляДобавления;
				НоваяСтрока.Показатель = ПоказательНаработки;
				НоваяСтрока.ДатаРаботыПо = ?(ЗначениеЗаполнено(ВыбранноеЗначение.ДатаСнятия), ВыбранноеЗначение.ДатаСнятия, ТекущаяДата());
				НоваяСтрока.Иерархия = ТекСтруктураИерархии;
				// Изменяем начальное значение наработки	
				ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(ОбъектРемонтаДляДобавления, НоваяСтрока.Показатель, Неопределено);	
				НоваяСтрока.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
				НоваяСтрока.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
				НоваяСтрока.НаработкаСНачалаЭксплуатацииНачало = ЗначениеНаработки.НаработаноЗначение;
				НоваяСтрока.НаработкаСНачалаЭксплуатации = НоваяСтрока.Наработка + НоваяСтрока.НаработкаСНачалаЭксплуатацииНачало;
				НоваяСтрока.НовоеЗначение = НоваяСтрока.Наработка + НоваяСтрока.СтароеЗначение;

				Если ВыбранноеЗначение.ПроставлятьПлановуюНаработку Тогда			
					НС = ТаблицаПодобранныхОР.Добавить();
					НС.Объект = НоваяСтрока.Объект;
					НС.НомерСтроки = ТаблицаПодобранныхОР.Количество();
					НС.ПлановыйГрафикРаботы = торо_РаботаСНаработкой.ПолучитьЗначениеПлановогоГрафикаРаботОбъектаРемонта(НоваяСтрока.Объект);
					НС.Показатель = НоваяСтрока.Показатель;
					НС.ДатаРаботыС = НоваяСтрока.ДатаРаботыС;
					НС.ДатаРаботыПо = НоваяСтрока.ДатаРаботыПо;
				КонецЕсли;
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонтаДляДобавления, ПоказательНаработки);
			  	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если ВыбранноеЗначение.ПроставлятьПлановуюНаработку Тогда
		ЗаполнитьПлановуюНаработку(Истина, ВыбранноеЗначение.УчитыватьПростои);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСссылкуНаЧистыйДокументУчетНаработкиОборудования()
	ДокОбъектСсылка = Документы.торо_УчетНаработкиОборудования.СоздатьДокумент();
	
	Возврат ДокОбъектСсылка.Ссылка;
КонецФункции	

&НаКлиенте
Процедура УчетНаработкиПоказательНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Показатель = РезультатЗакрытия;
	СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Не Показатель = Неопределено Тогда
		СтрокаТабличнойЧасти.Показатель = Показатель;
		ПриИзмененииПоказателяНаработки(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоказателяНаработкиНаСервере(ТекСтрока) 
	СтрокаТабличнойЧасти = УчетНаработки.НайтиПоИдентификатору(ТекСтрока);
	
	// проверяем, не введена ли уже строка для нового показателя наработки
	СтрокиНаработкиСредиПодчиненных = НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель, СтрокиНаработкиСредиПодчиненных[0].РодительИерархии);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		СтрокаТабличнойЧасти.Показатель = ТекПоказатель;
		Возврат;
	КонецЕсли;
	
	СтрокиНаработкиСредиПодчиненных = УчетНаработки.НайтиСтроки(Новый Структура("Объект,Показатель", СтрокаТабличнойЧасти.Объект,СтрокаТабличнойЧасти.Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		СтрокаТабличнойЧасти.Показатель = ТекПоказатель;
		Возврат;
	КонецЕсли;
	
	ДокОбъектСсылка = Документы.торо_УчетНаработкиОборудования.СоздатьДокумент();
	ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель, ДокОбъектСсылка.Ссылка);
	
	Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
		СтрокаТабличнойЧасти.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
		СтрокаТабличнойЧасти.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
	КонецЕсли;
		
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление =НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",СтрокаТабличнойЧасти.Объект, ТекПоказатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;

	СН = Новый Структура("Объект, ДатаРаботыС, Показатель, ДатаРаботыПо, СтароеЗначение, НовоеЗначение,
						 |НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
						 |Иерархия,РаспространятьНаПодчиненных");

	ЗаполнитьЗначенияСвойств(СН,СтрокаТабличнойЧасти);
	РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьЗавершениеУчетНаработкиОборудования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ОбъектДопДокумента = ДополнительныеПараметры.ОбъектДопДокумента;
	
	Если ОбъектДопДокумента.Проведен Тогда
		Для каждого Строка Из УчетНаработки Цикл      
			Если Строка.Синхронизировать Тогда
				СН = Новый Структура("Объект, ДатаРаботыС, Показатель, ДатаРаботыПо, СтароеЗначение, НовоеЗначение,
									 |НаработкаСНачалаЭксплуатации, Наработка, НаработкаСНачалаЭксплуатацииНачало,
									 |Иерархия, РаспространятьНаПодчиненных");

				ПриИзмененииПоказателяНаработки(Неопределено);
				Строка.Синхронизировать = Ложь;
				Строка.РаспространятьНаПодчиненных = Истина;
				ЗаполнитьЗначенияСвойств(СН, Строка);
				РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
				
				Строка.ДокументСинхронизации = ОбъектДопДокумента.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(ОбъектРемонта, Показатель)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,0) КАК МаксимальноеЗначение
		|ИЗ
		|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
		|ГДЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта
		|	И торо_МаксимальныеЗначенияНаработкиОР.Показатель = &Показатель";

	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Показатель", Показатель);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МаксимальноеЗначение;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура НаработкаПриИзмененииФрагментНаСервере(Знач СтараяНаработкаОР, Знач ТекОбъектРемонта, ТекНаработка)
	СтрокиПодчиненныхДляИзменения = НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекОбъектРемонта, ТекПоказатель));
	
	Для каждого СтрокаПодчиненного Из СтрокиПодчиненныхДляИзменения Цикл
        СтароеЗначение = СтрокаПодчиненного.Наработка;
        Коэффициент = ?(СтароеЗначение = СтараяНаработкаОР, 1, СтароеЗначение / СтараяНаработкаОР);
        СтрокаПодчиненного.Наработка = ТекНаработка * Коэффициент;
        СтрокаПодчиненного.НаработкаСНачалаЭксплуатации = СтрокаПодчиненного.НаработкаСНачалаЭксплуатацииНачало + СтрокаПодчиненного.Наработка;
        
        МаксЗнач = ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(СтрокаПодчиненного.Объект, СтрокаПодчиненного.Показатель);
        Если СтрокаПодчиненного.Наработка < МаксЗнач Тогда
            СтрокаПодчиненного.НовоеЗначение = СтрокаПодчиненного.Наработка;
        Иначе
            СтрокаПодчиненного.НовоеЗначение = СтрокаПодчиненного.Наработка - МаксЗнач;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаПриИзмененииФрагмент(Знач СтараяНаработкаОР, Знач СтрокаТабличнойЧасти)
	НаработкаПриИзмененииФрагментНаСервере(СтараяНаработкаОР, СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Наработка);
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиНаработкаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    МаксимальноеЗначение = ДополнительныеПараметры.МаксимальноеЗначение;
    СтараяНаработкаОР = ДополнительныеПараметры.СтараяНаработкаОР;
    СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;     
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        КоличествоСбросовСчетчика = Цел(СтрокаТабличнойЧасти.НовоеЗначение / МаксимальноеЗначение);
        СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.НовоеЗначение - КоличествоСбросовСчетчика * МаксимальноеЗначение;
    Иначе
        СтрокаТабличнойЧасти.НовоеЗначение = 0;
        СтрокаТабличнойЧасти.Наработка = 0;
        Возврат;
    КонецЕсли;
    
    НаработкаПриИзмененииФрагмент(СтараяНаработкаОР, СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти

#Область УчетСостоянияОР

&НаКлиенте
Функция НеобходимоСоздатьДокументСостояний()
	ТекущиеДанные = Элементы.УчетСостояний.ТекущиеДанные;
	СтарыеДанные = СтруктураДанныхДоРедактирования.УчетСостояний;
	
	Если СтарыеДанные.ДатаНачала = ТекущиеДанные.ДатаНачала И
		СтарыеДанные.ВидЭксплуатацииНаПериод = ТекущиеДанные.ВидЭксплуатацииНаПериод И 
		СтарыеДанные.ВидПускаНаПериод = ТекущиеДанные.ВидПускаНаПериод И 
		СтарыеДанные.ДатаОкончания = ТекущиеДанные.ДатаОкончания И 
		СтарыеДанные.ВидЭксплуатации = ТекущиеДанные.ВидЭксплуатации И 
		СтарыеДанные.ВидПуска = ТекущиеДанные.ВидПуска И 
		СтарыеДанные.ПричинаПростоя = ТекущиеДанные.ПричинаПростоя Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Или Не ЗначениеЗаполнено(ТекущиеДанные.ВидЭксплуатации) Или
		(ТекущиеДанные.КолонкаВидПуска = 1 И ТекущиеДанные.КолонкаВидПускаОбязательностьЗаполнения = 1 И Не ЗначениеЗаполнено(ТекущиеДанные.ВидПуска)) Или
		(ТекущиеДанные.КолонкаПричинаПростоя = 1 И ТекущиеДанные.КолонкаПричинаПростояОбязательностьЗаполнения = 1 И Не ЗначениеЗаполнено(ТекущиеДанные.ПричинаПростоя)) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") И
		(Не ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Или Не ЗначениеЗаполнено(ТекущиеДанные.ВидЭксплуатацииНаПериод) Или
		(ТекущиеДанные.КолонкаВидПускаНаПериод = 1 И ТекущиеДанные.КолонкаВидПускаНаПериодОбязательностьЗаполнения = 1 И Не ЗначениеЗаполнено(ТекущиеДанные.ВидПускаНаПериод)) Или
		(ТекущиеДанные.КолонкаПричинаПростояНаПериод = 1 И ТекущиеДанные.КолонкаПричинаПростояОбязательностьЗаполнения = 1 И Не ЗначениеЗаполнено(ТекущиеДанные.ПричинаПростоя))) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура СоздатьДокументСостоянийПерсональный(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если УчетСостояний.Количество() > 0 Тогда
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		    СозданныйДокумент = СоздатьДокументыУчетСостоянийСервер();
			Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
				ТекстСообщения = НСтр("ru = 'Создан документ Учет состояний оборудования: '") + СозданныйДокумент;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СозданныйДокумент);
				
				УчетСостояний.Очистить();
				ВернутьПервоначальныйУчетСостояний(Истина, "Дата изменения состояния", ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть состояний оборудования. Документ не может быть создан '");
	    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПервоначальныйУчетСостояний(ДоступностьКнопкиСозданияПозицииДокумента, ЗаголовокДатыОкончания, ВидОперацииНаПериод)
	КолонкаПричинаПростоя 		  = Ложь;
	КолонкаВидПуска				  = Ложь;
    КолонкаВидПускаНаПериод		  = Ложь;
	КолонкаПричинаПростояНаПериод = Ложь;

	Элементы.УчетСостоянийПричинаПростоя.Видимость 			= Ложь;
	Элементы.УчетСостоянийВидПускаНаПериод.Видимость 		= Ложь;
	Элементы.УчетСостоянийВидПуска.Видимость 				= Ложь;
	
	Элементы.УчетСостоянийПричинаПростоя.АвтоОтметкаНезаполненного 			= Ложь;
	Элементы.УчетСостоянийДатаНачала.АвтоОтметкаНезаполненного 				= ВидОперацииНаПериод;
    Элементы.УчетСостоянийВидЭксплуатацииНаПериод.АвтоОтметкаНезаполненного = ВидОперацииНаПериод;
    Элементы.УчетСостоянийВидПускаНаПериод.АвтоОтметкаНезаполненного 		= Ложь;
    Элементы.УчетСостоянийВидПуска.АвтоОтметкаНезаполненного 				= Ложь;
	
    Элементы.УчетСостоянийПоложение.Видимость = Ложь;	
	Элементы.УчетСостоянийПоложение.АвтоОтметкаНезаполненного = Ложь;
	
	Элементы.УчетСостоянийДатаОкончания.Заголовок = ЗаголовокДатыОкончания;
	
	Если Не ВидОперацииНаПериод Тогда
	    Элементы.УчетСостоянийДатаНачала.Видимость = Ложь;
		Элементы.УчетСостоянийВидЭксплуатацииНаПериод.Видимость = Ложь;
	КонецЕсли; 
	
	Элементы.СоздатьПозициюДокументыУчетСостояния.Доступность = ДоступностьКнопкиСозданияПозицииДокумента;
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьКолонокВидовПусков()
	Если Элементы.УчетСостоянийВидЭксплуатацииНаПериод.Видимость Тогда
		Элементы.УчетСостоянийВидПускаНаПериод.Видимость = КолонкаВидПускаНаПериод;
		Элементы.УчетСостоянийВидПуска.Видимость = КолонкаВидПуска;
	Иначе
		Элементы.УчетСостоянийВидПускаНаПериод.Видимость = Ложь;
		Элементы.УчетСостоянийВидПуска.Видимость = КолонкаВидПуска;
	КонецЕсли;
КонецПроцедуры
 
&НаСервере
Процедура УстановитьВидимостьКолонкиПричинаПростоя(ВидДокументаЕстьНаПериод)
	Если ВидДокументаЕстьНаПериод Тогда
		Элементы.УчетСостоянийПричинаПростоя.Видимость = КолонкаПричинаПростоя Или КолонкаПричинаПростояНаПериод;
	Иначе
		Элементы.УчетСостоянийПричинаПростоя.Видимость = КолонкаПричинаПростоя;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПеречисленияНаСервере(ВидЭксплуатации, ВидЭксплуатацииНаПериод, ТипЭксплуатацииПростой)
	ВидЭксплуатации 		= Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;	
	ВидЭксплуатацииНаПериод = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод;
	ТипЭксплуатацииПростой 	= Перечисления.торо_ТипЭксплуатации.Простой;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьТипЭксплуатации(ВидЭксплуатации)
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТипЭксплуатации", ВидЭксплуатации.ТипЭксплуатации);
	СтруктураПараметров.Вставить("Простой", ?(ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой, 1, 0));
	ФОУчетПусковОборудования = Константы.торо_УчетПусковОборудования.Получить();
	СтруктураПараметров.Вставить("ОбязательныйВводВидаПуска", ?(ФОУчетПусковОборудования, ВидЭксплуатации.ОбязательныйВводВидаПуска, Ложь));
	
	Возврат СтруктураПараметров;		
КонецФункции

&НаКлиенте
Процедура РассчитатьНеобходимостьВидаПускаИПричиныПростояНаФорме()
	КолонкаВидПуска = (УчетСостояний.Итог("КолонкаВидПуска") > 0 И ФОИспользоватьУчетПусков);
	КолонкаВидПускаНаПериод = (УчетСостояний.Итог("КолонкаВидПускаНаПериод") > 0 И ФОИспользоватьУчетПусков);
	КолонкаПричинаПростоя 	= (УчетСостояний.Итог("КолонкаПричинаПростоя") > 0);
	КолонкаПричинаПростояНаПериод = (УчетСостояний.Итог("КолонкаПричинаПростояНаПериод") > 0);
КонецПроцедуры
 
&НаКлиенте
Процедура РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(ТекДанные)
	Перем ВидНаДату, ВидНаПериод, ТипПростой; 	
	ПолучитьПеречисленияНаСервере(ВидНаДату, ВидНаПериод, ТипПростой);
	
	ЭтоПростой = Ложь;
	Если ЗначениеЗаполнено(ТекДанные.ВидЭксплуатации) Или ЗначениеЗаполнено(ТекДанные.ВидЭксплуатацииНаПериод) Тогда
		РеквизитыВидаЭксплуатации = УстановитьТипЭксплуатации(ТекДанные.ВидЭксплуатации);
		ТекДанные.ТипЭксплуатации = РеквизитыВидаЭксплуатации.ТипЭксплуатации;
		ТекДанные.КолонкаВидПускаОбязательностьЗаполнения = РеквизитыВидаЭксплуатации.ОбязательныйВводВидаПуска; 
		ТекДанные.КолонкаВидПуска = Не РеквизитыВидаЭксплуатации.Простой И ЗначениеЗаполнено(ТекДанные.ВидЭксплуатации);
		ТекДанные.КолонкаПричинаПростоя = РеквизитыВидаЭксплуатации.Простой;
		
		РеквизитыВидаЭксплуатациинаПериод = УстановитьТипЭксплуатации(ТекДанные.ВидЭксплуатацииНаПериод);
		ТекДанные.ТипЭксплуатацииНаПериод = РеквизитыВидаЭксплуатациинаПериод.ТипЭксплуатации;
		ТекДанные.КолонкаВидПускаНаПериодОбязательностьЗаполнения = РеквизитыВидаЭксплуатациинаПериод.ОбязательныйВводВидаПуска; 
		ТекДанные.КолонкаВидПускаНаПериод = Не РеквизитыВидаЭксплуатациинаПериод.Простой И ЗначениеЗаполнено(ТекДанные.ВидЭксплуатацииНаПериод);
		ТекДанные.КолонкаПричинаПростояНаПериод = РеквизитыВидаЭксплуатациинаПериод.Простой;
		
		ЭтоПростой = РеквизитыВидаЭксплуатациинаПериод.Простой И РеквизитыВидаЭксплуатации.Простой;
	Иначе
		ТекДанные.ТипЭксплуатации = ТекДанные.ТипЭксплуатацииНаПериод.Пустая();
		ТекДанные.КолонкаВидПускаОбязательностьЗаполнения = Ложь;
		ТекДанные.КолонкаВидПуска = 0;
		ТекДанные.КолонкаПричинаПростоя = 0;
		
		ТекДанные.ТипЭксплуатацииНаПериод = ТекДанные.ТипЭксплуатацииНаПериод.Пустая();
		ТекДанные.КолонкаВидПускаНаПериодОбязательностьЗаполнения = Ложь;
		ТекДанные.КолонкаВидПускаНаПериод = 0;
		ТекДанные.КолонкаПричинаПростояНаПериод = 0;
	КонецЕсли;
	
	ТекДанные.КолонкаПричинаПростояОбязательностьЗаполнения = ((ТекДанные.КолонкаПричинаПростоя + ТекДанные.КолонкаПричинаПростояНаПериод) > 0 
																Или (((Не ЗначениеЗаполнено(ТекДанные.ВидЭксплуатации) И ВидОперации = ВидНаДату)  
																	   Или (Не ЗначениеЗаполнено(ТекДанные.ВидЭксплуатацииНаПериод) И ВидОперации = ВидНаПериод))
																	   И ЭтоПростой));
КонецПроцедуры

&НаСервере
Процедура УстановитьВнешнийВидФормыПолная()
	ФОУчетПусковОборудования = Константы.торо_УчетПусковОборудования.Получить();
	ВидДокументаЕстьНаПериод = (ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
	
	Элементы.УчетСостоянийДатаНачала.Видимость = ВидДокументаЕстьНаПериод;
	Элементы.УчетСостоянийВидЭксплуатацииНаПериод.Видимость = ВидДокументаЕстьНаПериод;
	
	Элементы.УчетСостоянийДатаОкончания.Заголовок = ?(ВидДокументаЕстьНаПериод, "Окончание периода", "Дата изменения состояния");
	
	Если ФОУчетПусковОборудования Тогда
		УстановитьВидимостьКолонокВидовПусков();
	Иначе
		Элементы.УчетСостоянийВидПуска.Видимость = Ложь;
		Элементы.УчетСостоянийВидПускаНаПериод.Видимость = Ложь;
	КонецЕсли;
    УстановитьВидимостьКолонкиПричинаПростоя(ВидДокументаЕстьНаПериод);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаДобавленияСостояния(ВыбранноеЗначение)
	
	Если Не ГрупповоеФормированиеСостояния Тогда  
		
		ПроверочныйОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта[0];
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого Строка Из УчетСостояний Цикл
			Если Не Строка.ОбъектРемонта = ПроверочныйОбъектРемонта Тогда
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиКУдалению Цикл
			УчетСостояний.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого ОбъектРемонта Из ВыбранноеЗначение.ОбъектРемонта Цикл
		НС = ЭтотОбъект.УчетСостояний.Добавить();
		НС.ОбъектРемонта = ОбъектРемонта;
		НС.ДатаОкончания = УчетСостоянийДатаДок;
		
		Если ВыбранноеЗначение.Свойство("Иерархия") Тогда
			НС.Иерархия = ВыбранноеЗначение.Иерархия;
		Иначе
			НС.Иерархия = ТекСтруктураИерархии;
		КонецЕсли;
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
			ВыбранноеЗначение.Свойство("ДатаНачала", НС.ДатаНачала);
			ВыбранноеЗначение.Свойство("ДатаОкончания", НС.ДатаОкончания);
			Если Не ЗначениеЗаполнено(НС.ДатаОкончания) Тогда
				НС.ДатаОкончания = УчетСостоянийДатаДок;
			КонецЕсли;
		Иначе
			Если ВыбранноеЗначение.Свойство("ДатаНачала") И ЗначениеЗаполнено(ВыбранноеЗначение.ДатаНачала) Тогда
				НС.ДатаОкончания = ВыбранноеЗначение.ДатаНачала;
			КонецЕсли;
		КонецЕсли;
		Элементы.УчетСостояний.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(НС);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Функция СоздатьДокументыУчетСостоянийСервер()
	Отказ = Ложь;
	
	Для каждого СтрокаОР Из УчетСостояний Цикл
		ВидОперацииНаПериод = (ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
		ИндексСтроки = УчетСостояний.Индекс(СтрокаОР) + 1;
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 в строке № %2 '");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОР.ОбъектРемонта, ИндексСтроки);
		
		Если (ВидОперацииНаПериод И Не ЗначениеЗаполнено(СтрокаОР.ВидЭксплуатацииНаПериод)) Тогда
			НезаполненноеЗначение = НСтр("ru = 'не заполнен вид эксплуатации на период'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + НезаполненноеЗначение,,,, Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаОР.ВидЭксплуатации) Тогда
			НезаполненноеЗначение = НСтр("ru = 'не заполнен вид эксплуатации'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + НезаполненноеЗначение,,,, Отказ);
		КонецЕсли;
		
		Если (ВидОперацииНаПериод И Не ЗначениеЗаполнено(СтрокаОР.ДатаНачала)) Или Не ЗначениеЗаполнено(СтрокаОР.ДатаОкончания) Тогда
		    ШаблонСообщения = НСтр("ru = 'Заполните дату для объекта ремонта %1 в строке № %2!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОР.ОбъектРемонта, ИндексСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если (ВидОперацииНаПериод И ЗначениеЗаполнено(СтрокаОР.ДатаНачала) И ЗначениеЗаполнено(СтрокаОР.ДатаОкончания) И СтрокаОР.ДатаНачала > СтрокаОР.ДатаОкончания) Тогда
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 в строке № %2 дата начала периода больше даты окончания периода!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОР.ОбъектРемонта, ИндексСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		ЭтоПростой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОР.ВидЭксплуатации, "ТипЭксплуатации") = Перечисления.торо_ТипЭксплуатации.Простой;
		Если ВидОперацииНаПериод Тогда
			ЭтоПростой = ЭтоПростой ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОР.ВидЭксплуатацииНаПериод, "ТипЭксплуатации") = Перечисления.торо_ТипЭксплуатации.Простой;
		КонецЕсли;
		Если ЭтоПростой И Не ЗначениеЗаполнено(СтрокаОР.ПричинаПростоя) Тогда
		    ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 в строке № %2 не заполнена причина простоя!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОР.ОбъектРемонта, ИндексСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОР.ВидЭксплуатации) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОР.ВидЭксплуатации, "ОбязательныйВводВидаПуска")
			И Не ЗначениеЗаполнено(СтрокаОР.ВидПуска) Тогда
		    ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 в строке № %2 не заполнен вид пуска!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОР.ОбъектРемонта, ИндексСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если ВидОперацииНаПериод И ЗначениеЗаполнено(СтрокаОР.ВидЭксплуатацииНаПериод) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОР.ВидЭксплуатацииНаПериод, "ОбязательныйВводВидаПуска")
			И Не ЗначениеЗаполнено(СтрокаОР.ВидПускаНаПериод) Тогда
		    ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 в строке № %2 не заполнен вид пуска на период!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОР.ОбъектРемонта, ИндексСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
	    ТекстСообщения = НСтр("ru = 'Документ учета состояний не может быть создан'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ДокОбъект = Документы.торо_СостоянияОбъектовРемонта.СоздатьДокумент();
	ДокОбъект.Заполнить(Неопределено);

	ДокОбъект.Дата 			= ТекущаяДата();
	ДокОбъект.Подразделение = ПодразделениеИзПользовательскихНастроек;
	ДокОбъект.Организация   = ОрганизацияИзПользовательскихНастроек;	
	ДокОбъект.Ответственный = Ответственный; 
	ДокОбъект.ВидОперации	= ВидОперации;
		
	Для каждого СтрокаТаблицы Из УчетСостояний Цикл
		НС = ДокОбъект.ОбъектыРемонта.Добавить();
		
		НС.ОбъектРемонта 				  = СтрокаТаблицы.ОбъектРемонта;
		НС.ПричинаПростоя           	  = СтрокаТаблицы.ПричинаПростоя;
		НС.ДатаОкончания 				  = СтрокаТаблицы.ДатаОкончания;
		НС.ИзменятьСостояниеПодчиненныхОР = СтрокаТаблицы.ИзменятьСостояниеПодчиненныхОР;
		НС.ВидЭксплуатации             	  = СтрокаТаблицы.ВидЭксплуатации;
		НС.ВидПуска           			  = СтрокаТаблицы.ВидПуска;
		
		НС.ВнешнийОР   					  = СтрокаТаблицы.ВнешнийОР;
		НС.ИзменятьСостояниеПодчиненныхОР = СтрокаТаблицы.ИзменятьСостояниеПодчиненныхОР;
		НС.СтруктураИерархии   			  = СтрокаТаблицы.Иерархия;
			
		НС.ДатаНачала         	   = СтрокаТаблицы.ДатаНачала;
		НС.ВидЭксплуатацииНаПериод = СтрокаТаблицы.ВидЭксплуатацииНаПериод;
		НС.ВидПускаНаПериод   	   = СтрокаТаблицы.ВидПускаНаПериод;
	КонецЦикла;
		
	Попытка
		НачатьТранзакцию();			
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();
		Возврат ДокОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Выполнена отмена создания документа!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область УчетКонтролируемыхПоказателейОР

&НаСервереБезКонтекста
Функция ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ОбъектРемонта, Показатель = Неопределено)
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,Показатель,Истина);
	
	Если ЗначениеЗаполнено(Показатель) Тогда
		Если МассивПоказателей.Количество() > 0 Тогда
			СтруктураВозврата = МассивПоказателей[0];
		Иначе
			СтруктураВозврата = Новый Структура;
		КонецЕсли;
	Иначе
		СтруктураВозврата = МассивПоказателей;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоказатели(ВыбранноеЗначение)
	СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ВыбранноеЗначение);
	Если СтруктураВозврата.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Для выбранного объекта ремонта не заданы контролируемые показатели.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	Если ЗапрашиватьСписокКонтролируемыхПоказателей Тогда
		ПараметрыОповещения = Новый Структура("Показатели", СтруктураВозврата);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоказателиЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ТекстЗаголовкаОкна = НСтр("ru = 'Выберите необходимые показатели'");
		
		ОбщийСписокКонтролируемыхПоказателей = Новый СписокЗначений;
		Для каждого Строка Из СтруктураВозврата Цикл 
			Если ОбщийСписокКонтролируемыхПоказателей.НайтиПоЗначению(Строка.Показатель) = Неопределено Тогда
				ОбщийСписокКонтролируемыхПоказателей.Добавить(Строка.Показатель,, Истина);
			КонецЕсли;
		КонецЦикла; 
		
		ОбщийСписокКонтролируемыхПоказателей.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
	Иначе
	    ДобавитьНужныеПоказателиВТаблицу(СтруктураВозврата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНужныеПоказателиВТаблицу(СписокПоказателей)
	
	Если Не ГрупповоеФормированиеКонтрПоказатели Тогда  
		
		ПроверочныйОбъектРемонта = СписокПоказателей[0].ОбъектРемонта;
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого Строка Из УчетКонтролируемыхПоказателейПоказатели Цикл
			Если Не Строка.ОбъектРемонта = ПроверочныйОбъектРемонта Тогда
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиКУдалению Цикл
			УчетКонтролируемыхПоказателейПоказатели.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'");
	
	Для каждого Элемент Из СписокПоказателей Цикл
		СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель", Элемент.ОбъектРемонта, Элемент.Показатель);
		НайденныеСтроки = УчетКонтролируемыхПоказателейПоказатели.НайтиСтроки(СтруктураПоиска);
		Если Не НайденныеСтроки.Количество() = 0 Тогда
		    ТекстСообщения = СтрШаблон(ШаблонСообщения, Элемент.ОбъектРемонта, Элемент.Показатель);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли; 
		
		СтрокаТЧ = УчетКонтролируемыхПоказателейПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Элемент);
		СтрокаТЧ.ОбъектРемонта = Элемент.ИсходныйОР;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранныеПоказатели(СписокЗначенийСПометками, Показатели)
	МассивПоказателейСПометками = Новый Массив;
	Для каждого Показатель Из СписокЗначенийСПометками Цикл
		Если Показатель.Пометка Тогда
		    МассивПоказателейСПометками.Добавить(Показатель.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивПоказателейСПометками.Количество() = 0 Тогда
	    Возврат МассивПоказателейСПометками;
	КонецЕсли; 
	
	ВыбранныеПоказатели = Новый Массив;
	Для каждого Элемент Из Показатели Цикл
	    Если Не МассивПоказателейСПометками.Найти(Элемент.Показатель) = Неопределено Тогда
		    ВыбранныеПоказатели.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ВыбранныеПоказатели;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоказателиЗавершение(СписокЗначенийСПометками, ДопПараметры) Экспорт
	Если СписокЗначенийСПометками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Показатели = ДопПараметры.Показатели;
	
	ВыбранныеПоказатели = ПолучитьВыбранныеПоказатели(СписокЗначенийСПометками, Показатели);
	Если ВыбранныеПоказатели.Количество() = 0 Тогда
	    Возврат;
	КонецЕсли; 
	
	ДобавитьНужныеПоказателиВТаблицу(ВыбранныеПоказатели);
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкиЗаполненияКонтролируемыхПоказателей()
	ИндексСтроки = 0;
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Значение"" в строке %1 списка ""Показатели""'");

	Для каждого Строка из ЭтотОбъект.УчетКонтролируемыхПоказателейПоказатели Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Значение) И Строка.Значение <> 0 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ИндексСтроки + 1);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере 
Функция СоздатьДокументыУчетКонтролируемыхПоказателейСервер()
	Если ВыполнитьПроверкиЗаполненияКонтролируемыхПоказателей() Тогда
		ДокОбъект = Документы.торо_УчетКонтролируемыхПоказателей.СоздатьДокумент();
		докОбъект.Заполнить(Неопределено);

		ДокОбъект.Дата 				= ТекущаяДата();
		ДокОбъект.Подразделение     = ПодразделениеИзПользовательскихНастроек;
		ДокОбъект.Организация    	= ОрганизацияИзПользовательскихНастроек;
		ДокОбъект.Ответственный  	= Ответственный;
		
		Для каждого СтрокаТаблицы Из УчетКонтролируемыхПоказателейПоказатели Цикл
			НС = ДокОбъект.Показатели.Добавить();
			
			НС.ОбъектРемонта 			= СтрокаТаблицы.ОбъектРемонта;
			НС.Показатель 				= СтрокаТаблицы.Показатель;
			НС.Значение 				= СтрокаТаблицы.Значение;
			НС.ПредыдущееЗначение 		= СтрокаТаблицы.ПредыдущееЗначение;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаКонтроля) Тогда 
				НС.ДатаКонтроля 		= СтрокаТаблицы.ДатаКонтроля;
			Иначе
				НС.ДатаКонтроля			= УчетКонтрПокДатаДок;
			КонецЕсли;
			НС.Ответственный 			= СтрокаТаблицы.Ответственный;
		КонецЦикла;
			
		Попытка
			НачатьТранзакцию();	
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
			
			ДокументыВДКОткрытию.Очистить();
			Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьРемонтыПоСостоянию") Тогда
				торо_РемонтыПоСостоянию.СформироватьУведомленияИДефекты(докОбъект, ДокументыВДКОткрытию);
			КонецЕсли;
				
			Возврат докОбъект.Ссылка;
		Исключение
			ТекстСообщения = НСтр("ru = 'Выполнена отмена создания документа!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
	  КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОтбораКонтролируемыхПоказателей(ОбъектРемонта)
	СписокОтбора = Новый СписокЗначений;
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта);
	
	Для каждого СтруктураПоказателя Из МассивПоказателей Цикл
		СписокОтбора.Добавить(СтруктураПоказателя.Показатель);
	КонецЦикла;
	
	Возврат СписокОтбора;
КонецФункции

&НаКлиенте
Процедура ВывестиВДКОткрытию()

	Для Каждого СтруктураДокументаВДКОткрытию Из ДокументыВДКОткрытию Цикл
		Если СтруктураДокументаВДКОткрытию.Значение.Свойство("СсылкаНаДокумент") Тогда
			
			ПараметрыФормы = Новый Структура("Ключ", СтруктураДокументаВДКОткрытию.Значение.СсылкаНаДокумент);
			ОткрытьФорму("Документ.торо_ВыявленныеДефекты.ФормаОбъекта", ПараметрыФормы);
			
		Иначе
			
			ЗначенияЗаполнения = Новый Структура("ДанныеДокументаПриСозданииПоСостоянию", СтруктураДокументаВДКОткрытию.Значение);
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
			КлючУникальностиФормы = Строка(СтруктураДокументаВДКОткрытию.Значение.СтруктураДокументаОснования.ДокументИсточник.УникальныйИдентификатор())
			+СтруктураДокументаВДКОткрытию.Значение.СтруктураДокументаОснования.ОбъектРемонта.УникальныйИдентификатор()
			+СтруктураДокументаВДКОткрытию.Значение.СтруктураДокументаОснования.Показатель.УникальныйИдентификатор();
			
			ОткрытьФорму("Документ.торо_ВыявленныеДефекты.ФормаОбъекта", ПараметрыФормы,,КлючУникальностиФормы);
			
		КонецЕсли;
	КонецЦикла;	
	ДокументыВДКОткрытию.Очистить();	

КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаСостояниеПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаСостояниеОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВСпискеОР(Элемент.Имя);
КонецПроцедуры
 
&НаКлиенте
Процедура УстановкаДоступности(ТекущийЭлемент)
	Если ТекущийЭлемент = Неопределено
		Или ТекущийЭлемент.ЭтоГруппа 
		Или ТипЗнч(ТекущийЭлемент.Ссылка) <> Тип("СправочникСсылка.торо_ОбъектыРемонта")
		Тогда 
		ОчиститьТекущиеДанныеОбОбъекте();
		Элементы.СоздатьДокументы.Доступность = Ложь;
		Элементы.ГруппаПараметры.Доступность = Ложь;
		Элементы.ГруппаУчетНаработки.Доступность = Ложь;
		Элементы.ГруппаУчетСостояний.Доступность = Ложь;
		Элементы.ГруппаУчетКонтролируемыхПоказателей.Доступность = Ложь;
	Иначе
		Элементы.СоздатьДокументы.Доступность = Истина;
		Элементы.ГруппаПараметры.Доступность = Истина;
		Элементы.ГруппаУчетНаработки.Доступность = Истина;
		Элементы.ГруппаУчетСостояний.Доступность = Истина;
		Элементы.ГруппаУчетКонтролируемыхПоказателей.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущиеДанныеОбОбъекте()
	ОбъектРемонта = Неопределено;
	Направление = Неопределено;
	Приоритет = Неопределено;
	ИнвентарныйНомер = Неопределено;
	ТехНомер = Неопределено;
	ТиповойОР = Неопределено;
	СостояниеОР = Неопределено;
	Подразделение = Неопределено;
	ЗаводскойНомер = Неопределено;
	ПричинаПростоя = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюДату()
	УчетКонтрПокДатаДок = ТекущаяДата();
	УчетСостоянийДатаДок = ТекущаяДата();
КонецПроцедуры;

#КонецОбласти

#КонецОбласти