
Перем ТаблицаРемонтов;
&НаСервере
Перем ОбработкаЗащита_Мнемосхемы;

&НаСервере
Перем ДатаПланированияОкончание;

&НаСервере
Перем МассивИменПолейДляПроверки;

&НаКлиенте
Перем УровеньПоложенияВДереве;
&НаКлиенте
Перем УровеньОрВДереве;

&НаСервере
Перем БазаДляРасчетаПГППР;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ДеревоРемонтовПланГрафикППР.КоманднаяПанель.Видимость = Ложь;
	
	// Добавляем колонки Реквизиты из ТЧ ППР
		
	// †5 Тут некоторые переменные, которые, возможно, нужно инициализировать где-то ещё.
	ОтображатьЗамещенные = Истина;
	СортироватьПоНаименованию = Истина;
	ОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьПоложениеОР",
			Истина);
	РассчитыватьСтоимости = Истина;
	Элементы.ОтображатьЗамещенные.Пометка          = ОтображатьЗамещенные;
	Элементы.ОтображатьПоложение.Пометка           = ОтображатьПоложение;
	Элементы.ОтображатьПоложение1.Пометка          = ОтображатьПоложение;
	Элементы.СортироватьПоНаименованию.Пометка     = СортироватьПоНаименованию;
	ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот;
	Элементы.КорректируемыйДокумент.Доступность    = Ложь;
	
	СтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	ДатаПланирования = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),1));
	КоличествоПериодов = 1;
	ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
	
	ДиаграммаГанта.ОтображатьЗаголовок = Ложь;
	ДиаграммаГанта.ОтображатьЛегенду = Ложь;
	ДиаграммаГанта.ОбластьПостроения.Право = 1;
	
	// видимость легенды диаграммы
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказатьЛегенду.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.НормативыСтраницы.ТекущаяСтраница = Элементы.НормативыСтраницы.ПодчиненныеЭлементы.ДляСтроки;
	РазвернутьВсеВетвиДеревьев();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОчиститьПоля();
	 
	ТаблицаОР = Новый ТаблицаЗначений;
	ТаблицаОР.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаОР.Колонки.Добавить("ТиповойОР", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	
	Для каждого ПервыйУровень Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Для каждого ВторойУровень Из ПервыйУровень.ПолучитьЭлементы() Цикл
			Для каждого ТретийУровень Из ВторойУровень.ПолучитьЭлементы() Цикл
				НС = ТаблицаОР.Добавить();
				НС.ВидРемонтныхРабот = ТретийУровень.Ремонты;
				НС.ОбъектРемонтныхРабот = ВторойУровень.Ремонты;
				НС.ТиповойОР = ВторойУровень.ТиповойОР;
			КонецЦикла;
	    КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьНормативыИзСистемыНаСервере_БазаДляРасчетаПГППР(Ложь, ТаблицаОР);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Регулирование масштаба диаграммы
//
&НаКлиенте
Процедура ПолосаРегулированияМасштабаДиаграммы1ПриИзменении(Элемент)
	
	Если ПолосаРегулированияМасштабаДиаграммы < 1 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		ДиаграммаГанта.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаГанта.КратностьПериодическогоВарианта 	= ПолосаРегулированияМасштабаДиаграммы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьДетализацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда		
		ДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаПланирования, ПериодичностьДетализации, КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОбновитьДоступностьДляРедактирования();
		
КонецПроцедуры

&НаКлиенте
Процедура РемонтныйЦиклВыбор(Элемент)
	
	Если НЕ Элемент.ТекущийЭлемент = Неопределено Тогда
		
		СтрокаСоответствия = Неопределено;
		Для Каждого Строка Из Объект.СдвигСтрокМнемосхема Цикл
			Если Строка.Имя = Элемент.ТекущийЭлемент.Имя Тогда
				СтрокаСоответствия = Строка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСоответствия = Неопределено Тогда
			Для Каждого Строка Из Объект.СдвигСтрокМнемосхема Цикл
				Если Строка.Имя = Элемент.ТекущийЭлемент.КонецЭлемент.Имя Тогда
					СтрокаСоответствия = Строка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НомерКолонки = СтрокаСоответствия.НомерКолонки;
		СдвигСтрок = СтрокаСоответствия.СдвигСтрок;
		ИндексСтроки = 9 + Объект.КолонкиНаработки.Количество();
		Элементы.ПолеТД.ТекущаяОбласть = ПолеТД.Область(3+СдвигСтрок,НомерКолонки,8 + ИндексСтроки - 7+СдвигСтрок);
		ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТД;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ОРМнемосхема) Тогда
		Список = Элементы.ВРНачалоЦикла.СписокВыбора;
		Список.Очистить();
		ЗаписатьДеревоППРСУчетомПозиции();
		
		Для Каждого Строка Из ОбъектыРемонта Цикл
			Если Строка.ОбъектРемонтныхРабот = ОРМнемосхема И ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
				Список.Добавить(Строка.ВидРемонтныхРабот,Строка.ВидРемонтныхРабот);
			КонецЕсли;
		КонецЦикла;
		
		СписокВыбораВР = Список;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ВРНачалоЦикла) Тогда
		Элементы.ПостроитьМнемосхему.Доступность = Истина;
		Элементы.Настройки.Доступность = Истина;
		Элементы.Обновить.Доступность = Ложь;
	Иначе
		Элементы.ПостроитьМнемосхему.Доступность = Ложь;
		Элементы.Настройки.Доступность = Ложь;
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОРМнемосхемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Элементы.ОРМнемосхема.СписокВыбора;
	Список.Очистить();
	
	ОбойтиРекурсивноДерево(ДеревоРемонтов.ПолучитьЭлементы(), Список);
	Список.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОРМнемосхемаПриИзменении(Элемент)
	
	ВРНачалоЦикла = "";
	Элементы.ПостроитьМнемосхему.Доступность = Ложь;
	Элементы.Настройки.Доступность = Ложь;
	Элементы.Обновить.Доступность = Ложь;
	
	торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
	ОчиститьПолеНаСервере();
	НадписьКоличествоРемонтовСтруктураРЦ = "";
	ОбновитьОтображениеДанных();
	ЗапланированныеРемонты.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиРекурсивноДерево(СтрокиДерева, Список)
	
	Для каждого Строка из СтрокиДерева Цикл
		Если Строка.Ремонты = Строка.ОбъектРемонта Тогда
			Если ЗначениеЗаполнено(Строка.ГрафикРемонтныхРабот) Тогда
				Список.Добавить(Строка.Ремонты, Строка(Строка.Ремонты));
			КонецЕсли;
		Иначе
			ОбойтиРекурсивноДерево(Строка.ПолучитьЭлементы(), Список);
		КонецЕсли;
	КонецЦикла;
 
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ЗакладкаРемонтныйЦикл Тогда
		
		Если ЗначениеЗаполнено(ОРМнемосхема) Тогда
			
			Список = Элементы.ВРНачалоЦикла.СписокВыбора;
			Список.Очистить();
			ЗаписатьДеревоППРСУчетомПозиции();
			
			Для Каждого Строка Из ОбъектыРемонта Цикл
				Если Строка.ОбъектРемонтныхРабот = ОРМнемосхема Тогда
					Список.Добавить(Строка.ВидРемонтныхРабот, Строка.ВидРемонтныхРабот);
				КонецЕсли;
			КонецЦикла;
			
			СписокВыбораВР = Список;	
			
		ИначеЕсли Не ЗначениеЗаполнено(ВРНачалоЦикла) Тогда
			
			Элементы.ПостроитьМнемосхему.Доступность = Ложь;
			Элементы.Настройки.Доступность = Ложь;
			Элементы.Обновить.Доступность = Ложь;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНГрафикВыполненияПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные.ПолучитьЭлементы();
	НовоеЗначениеГрафика = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные.ГрафикРемонтныхРабот;
	Для Каждого СтрокаВР Из ТекущиеДанныеСтроки Цикл
		СтрокаВР.ГрафикРемонтныхРабот = НовоеЗначениеГрафика;
	КонецЦикла;
	
	ПриИзмененииСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНТехнологическаяКартаПриИзменении(Элемент)
	
	ПриИзмененииСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНСпособыУчетаДатыОтсчетаПриИзменении(Элемент)
	
	ПриИзмененииСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНСпособВыполненияПриИзменении(Элемент)
	
	ПриИзмененииСтрокиДерева();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНСпособПланированияПриИзменении(Элемент)

	ПриИзмененииСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляОтсчетаПослеУдаления(Элемент)
	ТочкаОстанова = 0;
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРемонтныхРаботПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

&НаКлиенте
Процедура ТЗННеУчитыватьПриПланированииГрафикРаботыОборудованияПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

&НаКлиенте
Процедура ТЗННеУчитыватьПриПланированииГрафикРемонтныхРаботПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

&НаКлиенте
Процедура ТЗННеУчитыватьПродолжительностьПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

&НаКлиенте
Процедура ТЗНУчитыватьПростоиОборудованияПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

&НаКлиенте
Процедура ТЗНИспользоватьКоэффициентыРемонтныхОсобенностейПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

&НаКлиенте
Процедура ТЗНРазрешитьСокращатьМежРемПромежутокПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтовНормативыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаРемонтногоЦиклаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	Если Интервал.Цвет = WebЦвета.Черный
		ИЛИ Интервал.Расшифровка.ДоступенДляРедактирования <> Истина 
		ИЛИ Интервал.Цвет = WebЦвета.Красный Тогда
		
		ОтменаРедактирования = Истина;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		ОР = Интервал.Значение.Точка.Родитель.Расшифровка;
		ВР = Интервал.Значение.Точка.Расшифровка;
		ID = Интервал.Расшифровка.ID;
		 		
		Для каждого СтрокаПланРемонтов Из ПланРемонтов Цикл
			Если СтрокаПланРемонтов.ОбъектРемонтныхРабот = ОР И СтрокаПланРемонтов.ВидРемонтныхРабот = ВР И СтрокаПланРемонтов.ID = ID Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Интервал.Начало = НачалоДня(Интервал.Начало) И Интервал.Конец = КонецДня(Интервал.Конец) Тогда 
			// Ничего не делать.
		 	ОтменаРедактирования = Истина;
		 
		ИначеЕсли Интервал.Начало = НачалоДня(Интервал.Конец) Тогда 
			// Однодневный ремонт.
			Интервал.Начало =  НачалоДня(Интервал.Начало);
		 	Интервал.Конец = КонецДня(Интервал.Конец); 
		Иначе
			Если Интервал.Начало = НачалоДня(Интервал.Начало) Тогда  
				// Перемещение только правой границы.
				Интервал.Конец = КонецДня(Интервал.Конец); 
			ИначеЕсли Интервал.Конец = КонецДня(Интервал.Конец) Тогда  
				// Перемещение только левой границы.
				Интервал.Начало = НачалоДня(Интервал.Начало);
			ИначеЕсли Интервал.Конец = СтрокаПланРемонтов.ДатаНач Тогда
				// Перемещение правой границы за левую (либо интервала целиком).
				Интервал.Конец = КонецДня(Интервал.Конец - 86400);
			    Интервал.Начало = НачалоДня(Интервал.Начало);
			ИначеЕсли Интервал.Начало = СтрокаПланРемонтов.ДатаКон Тогда
				// Перемещение левой границы за правую (либо интервала целиком).
			    Интервал.Начало = НачалоДня(Интервал.Начало + 86400);
			    Интервал.Конец = КонецДня(Интервал.Конец);
			Иначе 
				// Перемещение интервала целиком.
				Если Интервал.Начало < СтрокаПланРемонтов.ДатаНач Тогда  
					// Мы двигали влево, двигаем влево и дальше.
				    Интервал.Начало = НачалоДня(Интервал.Начало);
			    	Интервал.Конец = КонецДня(Интервал.Конец - 86400);
				Иначе 
					// Мы двигали вправо, двигаем вправо.
			    	Интервал.Начало = НачалоДня(Интервал.Начало + 86400);
			    	Интервал.Конец = КонецДня(Интервал.Конец);
		  		КонецЕсли; 
		 	КонецЕсли;
		КонецЕсли;
				
		Интервал.Текст = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		
		СтрокаПланРемонтов.ДатаНач = Интервал.Начало;
		СтрокаПланРемонтов.ДатаКон = Интервал.Конец;
		НужноСортироватьПланРемонтов = Истина;
		
		ТочкиДиаграммы = НайтиНужнуюТочкуДиаграммыГанта(ОР, ВР);
		
		Для каждого Точка Из ТочкиДиаграммы Цикл
			ЗначениеДиаграммы = ДиаграммаГанта.ПолучитьЗначение(Точка, ДиаграммаГанта.Серии[0]);
			
			Для каждого Инт Из ЗначениеДиаграммы Цикл
				
				Если Инт.Расшифровка.ID = ID Тогда
					
					Инт.Начало = Интервал.Начало;
					Инт.Конец = Интервал.Конец;
					Инт.Текст = Строка(Инт.Начало) + " - " + Строка(Инт.Конец);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтов

&НаКлиенте
Процедура ДеревоРемонтовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		
		ТекущиеДанные = Элементы.ДеревоРемонтовПланГрафикППР.ТекущиеДанные;
		Элементы.ПланРемонтов.ОтборСтрок = Неопределено;
		ОтображатьЗамещенные = Элементы.ОтображатьЗамещенные.Пометка;
		Если ТекущиеДанные <> Неопределено Тогда
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = НЕ (ТипЗнч(ТекущиеДанные.Ремонты)=Тип("СправочникСсылка.торо_ВидыРемонтов"));
			Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = НЕ ((ТипЗнч(ТекущиеДанные.Ремонты)=Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ПолучитьЗначениеСвойства(ТекущиеДанные.Ремонты,"ЭтоГруппа") ИЛИ (ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов"))));
			Элементы.ПланРемонтов.Обновить();			
			
			Если ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				ОР = ДеревоРемонтов.НайтиПоИдентификатору(Элементы.ДеревоРемонтовПланГрафикППР.ТекущаяСтрока).ПолучитьРодителя();
				Если ОтображатьЗамещенные Тогда
					Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРемонтныхРабот, ОбъектРемонтныхРабот", ТекущиеДанные.Ремонты, ОР.Ремонты);
				Иначе
					Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРемонтныхРабот, ОбъектРемонтныхРабот, Замещен", ТекущиеДанные.Ремонты, ОР.Ремонты, Ложь);
				КонецЕсли;
				
			ИначеЕсли (ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта")) Тогда
				Подчиненные = ТекущиеДанные.ПолучитьЭлементы();
				ОбъектыДляОтбора = Новый Массив;
				ОбъектыДляОтбора.Добавить(ТекущиеДанные.Ремонты);
				
				Для каждого Потомок Из Подчиненные Цикл
					Если ТипЗнч(Потомок.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
						ОбъектыДляОтбора.Добавить(Потомок.Ремонты);
					КонецЕсли; 
				КонецЦикла;				
				
				Для каждого Ремонт Из ПланРемонтов Цикл
					Ремонт.Видимость = Ложь;
				КонецЦикла; 
				
				Для каждого Ремонт Из ПланРемонтов Цикл
					Для каждого ОР Из ОбъектыДляОтбора Цикл
						Если Ремонт.ОбъектРемонтныхРабот = ОР Тогда
							Ремонт.Видимость = Истина;
						КонецЕсли;					
					КонецЦикла; 
				КонецЦикла;
				
				Если ОтображатьЗамещенные Тогда
					Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Видимость", Истина);
				Иначе
					Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Видимость, Замещен", Истина, Ложь);
				КонецЕсли;
				
			Иначе
				
				Если ОтображатьЗамещенные Тогда
					Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Неопределено);				
				Иначе
					Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Ложь);				
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		
		ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
		
		Элементы.ПлановыеРемонтныеРаботы.ОтборСтрок = Неопределено;
		
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ремонты) И ТекущиеДанные.Ремонты <> ТекущиеДанные.Положение Тогда
			
			Подчиненные = ТекущиеДанные.ПолучитьЭлементы();
			Элементы.ПлановыеРемонтныеРаботы.Обновить();
			
			Если ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				
				СтруктураОтбора = Новый ФиксированнаяСтруктура("ВидРемонта,ОбъектРемонта", ТекущиеДанные.Ремонты, ТекущиеДанные.ПолучитьРодителя().Ремонты);
				Элементы.ВидыРемонтныхРаботДляОтсчета.ОтборСтрок = СтруктураОтбора;
				Элементы.ВидыРемонтныхРаботДляЗамещения.ОтборСтрок = СтруктураОтбора;
				СтруктураОтбора = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекущиеДанные.ПолучитьРодителя().Ремонты);
				Элементы.ЗавершенныеРемонтныеРаботы.ОтборСтрок = СтруктураОтбора;
				Элементы.ПлановаяНаработка.ОтборСтрок = СтруктураОтбора;
				Элементы.ФактическаяНаработка.ОтборСтрок = СтруктураОтбора;
				
				Элементы.НормативыСтраницы.ТекущаяСтраница = Элементы.НормативыСтраницы.ПодчиненныеЭлементы.ДляВидаРемонта;
				
			Иначе		
				
				СтруктураОтбора = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекущиеДанные.Ремонты);
				Элементы.ПлановаяНаработка.ОтборСтрок = СтруктураОтбора;
				Элементы.ФактическаяНаработка.ОтборСтрок = СтруктураОтбора;
				Элементы.ЗавершенныеРемонтныеРаботы.ОтборСтрок = СтруктураОтбора;
				Элементы.ПлановыеРемонтныеРаботы.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот", ТекущиеДанные.Ремонты);

				Элементы.НормативыСтраницы.ТекущаяСтраница = Элементы.НормативыСтраницы.ПодчиненныеЭлементы.ДляОбъектаРемонта;
				
			КонецЕсли;
			
		Иначе
			Элементы.НормативыСтраницы.ТекущаяСтраница = Элементы.НормативыСтраницы.ПодчиненныеЭлементы.ДляСтроки;
			Элементы.ДеревоРемонтовНормативы.АвтоМаксимальнаяШирина = Истина;
	    КонецЕсли;
	  
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		ДеревоППРОбработкаВыбора_ОбъектРемонта(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		ДеревоППРОбработкаВыбора_ВидРемонта(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ДеревоППРОбработкаВыбора_ИзФормыПодбораОР(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтовПослеУдаления(Элемент)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого ЭлементПервогоУровня Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Если ЭлементПервогоУровня.ПолучитьЭлементы().Количество() = 0 Тогда
			МассивУдаляемыхСтрок.Добавить(ЭлементПервогоУровня);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхСтрок Цикл
		Индекс = ДеревоРемонтов.ПолучитьЭлементы().Индекс(УдаляемыйЭлемент);
		ДеревоРемонтов.ПолучитьЭлементы().Удалить(Индекс);
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтовНормативы

&НаКлиенте
Процедура ДеревоРемонтовНормативыПередУдалением(Элемент, Отказ)
	
	МассивВыделенныхСтрок = Элементы.ДеревоРемонтовНормативы.ВыделенныеСтроки;
	ДеревоРемонтовНормативыПередУдалениемНаСервере(МассивВыделенныхСтрок);
	
	ДиаграммаГанта.Очистить();
	ОРМнемосхема = "";
	ВРНачалоЦикла = "";
	Элементы.ПостроитьМнемосхему.Доступность = Ложь;
	Элементы.Настройки.Доступность = Ложь;
	Элементы.Обновить.Доступность = Ложь;
	
	торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
	ОчиститьПолеНаСервере();
	НадписьКоличествоРемонтовСтруктураРЦ = "";
	ОбновитьОтображениеДанных();
	ЗапланированныеРемонты.Очистить();
	ПланРемонтов.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРемонтныхРаботДляОтсчета
&НаКлиенте
Процедура ВидыРемонтныхРаботДляОтсчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
	    ТекстСообщения = НСтр("ru = 'Не выбран вид ремонта!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Элементы.ДеревоРемонтов");
		Возврат;
	КонецЕсли;
		
	СписокВидовРемонта = Новый Массив;
	ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	ОбъектРодитель = ТекущиеДанныеДерева.ПолучитьРодителя();
	ДобавленныеВР = ОбъектРодитель.ПолучитьЭлементы();
	Для каждого ВидРемонта Из ДобавленныеВР Цикл
		СписокВидовРемонта.Добавить(ВидРемонта.Ремонты);
	КонецЦикла;
	СтруктураПараметров = Новый Структура("СписокОтбора, КлючНазначенияИспользования", СписокВидовРемонта, "ПредшествующиеРемонты");
	
	ОткрытьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", СтруктураПараметров, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляОтсчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИдентификаторТекущейСтроки = Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока;
	ВидыРемонтныхРаботДляОтсчетаОбработкаВыбораНаСервере(ВыбранноеЗначение,ИдентификаторТекущейСтроки);
	ПриИзмененииСтрокиДерева();
		
КонецПроцедуры

&НаСервере
Процедура ВидыРемонтныхРаботДляОтсчетаОбработкаВыбораНаСервере(ВыбранноеЗначение,ИдентификаторТекущейСтроки)
	
	ТабПредшествующиеРемонты = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
	ТекущаяСтрока = ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	СтруктураОтбора = Новый Структура("ВидРемонта,ОбъектРемонта,ПредшествующийВидРемонта",ТекущаяСтрока.Ремонты,ТекущийРодитель.Ремонты,ВыбранноеЗначение);
	Если ЗначениеЗаполнено(ТабПредшествующиеРемонты.НайтиСтроки(СтруктураОтбора)) Тогда
		ТекстСообщения = НСтр("ru = 'Данный вид ремонта уже добавлен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ВидыРемонтныхРаботДляОтсчета");
		Возврат;
	КонецЕсли;
	НоваяСтрока = ТабПредшествующиеРемонты.Добавить();
    НоваяСтрока.ВидРемонта = ТекущаяСтрока.Ремонты;
	НоваяСтрока.ГруппаОбъектовРемонтов = ТекущийРодитель.Ремонты.ТиповойОР;
	НоваяСтрока.ПредшествующийВидРемонта = ВыбранноеЗначение;
	НоваяСтрока.ОбъектРемонта = ТекущийРодитель.Ремонты;
	ЗначениеВРеквизитФормы(ТабПредшествующиеРемонты,"ВидыРемонтныхРаботДляОтсчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляЗамещенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран вид ремонта!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДеревоРемонтов");
		Возврат;
	КонецЕсли;
	
	СписокВидовРемонта = Новый Массив;
	ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	ОбъектРодитель = ТекущиеДанныеДерева.ПолучитьРодителя();
	ДобавленныеВР = ОбъектРодитель.ПолучитьЭлементы();
	Для каждого ВидРемонта Из ДобавленныеВР Цикл
		СписокВидовРемонта.Добавить(ВидРемонта.Ремонты);
	КонецЦикла;
	СтруктураПараметров = Новый Структура("СписокОтбора, КлючНазначенияИспользования", СписокВидовРемонта, "ПредшествующиеРемонты");
	
	ОткрытьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляЗамещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИдентификаторТекущейСтроки = Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока;
	ВидыРемонтныхРаботДляЗамещенияОбработкаВыбораНаСервере(ВыбранноеЗначение,ИдентификаторТекущейСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВидыРемонтныхРаботДляЗамещенияОбработкаВыбораНаСервере(ВыбранноеЗначение,ИдентификаторТекущейСтроки)
	
	ТабЗамещаемыеРемонты = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	ТекущаяСтрока = ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	СтруктураОтбора = Новый Структура("ВидРемонта, ОбъектРемонта, ЗамещаемыйВидРемонта",ТекущаяСтрока.Ремонты,ТекущийРодитель.Ремонты,ВыбранноеЗначение);
	Если ЗначениеЗаполнено(ТабЗамещаемыеРемонты.НайтиСтроки(СтруктураОтбора)) Тогда
		ТекстСообщения = НСтр("ru = 'Данный вид ремонта уже добавлен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ВидыРемонтныхРаботДляЗамещения");
		Возврат;
	КонецЕсли;
	НоваяСтрока = ТабЗамещаемыеРемонты.Добавить();
	НоваяСтрока.ВидРемонта             = ТекущаяСтрока.Ремонты;
	НоваяСтрока.ГруппаОбъектовРемонтов = ТекущийРодитель.Ремонты;
	НоваяСтрока.ЗамещаемыйВидРемонта   = ВыбранноеЗначение;
	НоваяСтрока.ОбъектРемонта          = ТекущийРодитель.Ремонты;
	ЗначениеВРеквизитФормы(ТабЗамещаемыеРемонты,"ВидыРемонтныхРаботДляЗамещения");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляОтсчетаПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗавершенныеРемонтныеРаботы
&НаКлиенте
Процедура ЗавершенныеРемонтныеРаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеТаблицы = Элемент.ТекущиеДанные;
		ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
		ТекущиеДанныеТаблицы.Активность = Истина;
		ТекущиеДанныеТаблицы.ОбъектРемонта = ТекущиеДанныеДерева.Ремонты;
		ТекущиеДанныеТаблицы.Период = ТекущиеДанныеТаблицы.ДатаНачала;
		ТекущиеДанныеТаблицы.Регистратор = "";
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлановыеРемонтныеРаботы

&НаКлиенте
Процедура ПлановыеРемонтныеРаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеТаблицы = Элемент.ТекущиеДанные;
		ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные; 
		ТекущиеДанныеТаблицы.ОбъектРемонтныхРабот = ТекущиеДанныеДерева.Ремонты;
		ТекущиеДанныеТаблицы.Регистратор = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлановаяНаработка

&НаКлиенте
Процедура ПлановаяНаработкаПоказательПриИзменении(Элемент)
	ТекДанные = Элементы.ПлановаяНаработка.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
	    ТекДанные.ЕдиницаИзмерения = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Показатель, "ЕдиницаИзмерения");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяНаработкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 		
		Элемент.ТекущиеДанные.КоэффициентИспользованияОборудования = 1;
		Элемент.ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяНаработкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеТаблицы = Элемент.ТекущиеДанные;
		ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
		ТекущиеДанныеТаблицы.ОбъектРемонта = ТекущиеДанныеДерева.Ремонты;
		ТекущиеДанныеТаблицы.Период = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФактическаяНаработка

&НаКлиенте
Процедура ФактическаяНаработкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеТаблицы = Элемент.ТекущиеДанные;
		ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
		ТекущиеДанныеТаблицы.ОбъектРемонта = ТекущиеДанныеДерева.Ремонты;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормативныеДанные
&НаКлиенте
Процедура НормативныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.ДеревоРемонтовНормативы.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для добавления новой строки необходимо выбрать объект ремонта!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ДеревоРемонтов",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура РассчитатьКнопка(Команда)
		
	РассчитатьПроцедура(Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГанта(Команда)
	ПостроитьДиаграммуГантаНаСервере();		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОР(Команда)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовПланГрафикППР;
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовНормативы;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",, ЭлементДерево, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

// Открыть форму выбора справочника виды ремонта
//
&НаКлиенте
Процедура ДобавитьРемонт(Команда)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовПланГрафикППР;
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовНормативы;
	КонецЕсли;
	
	ТекСтрокаДерева = ЭлементДерево.ТекущиеДанные;
		
	Если ТекСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("Строка") 
		ИЛИ ТекСтрокаДерева.Ремонты = ТекСтрокаДерева.Положение Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта для ввода ремонтной работы!'"), 60);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора",, ЭлементДерево, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

// Открыть форму подбора объектов и видов ремонта
//
&НаКлиенте
Процедура Подбор(Команда)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовПланГрафикППР;
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовНормативы;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_КалькуляторРЦ");
	ПараметрыФормы.Вставить("СтруктураИерархии", СтруктураИерархии);
	ПараметрыФормы.Вставить("НеУчаствуетВПланировании", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
								ПараметрыФормы, ЭлементДерево, ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

// Включение/Отключение сортировки
//
&НаКлиенте
Процедура СортироватьПоНаименованию(Команда)
	
	Если ОтображатьПоложение Тогда
		ТекстСообщения = НСтр("ru = 'Сортировать объекты ремонта в порядке следования в дереве возможно только при отключенной опции ""Отображать положение"".'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.СортироватьПоНаименованию.Пометка = НЕ Элементы.СортироватьПоНаименованию.Пометка;
	СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
	
КонецПроцедуры

// Выбор вида иерархии
//
&НаКлиенте
Процедура НастройкаВидаИерархии(Команда)

	ДополнительныеПараметры = Новый Структура("СтруктураИерархииПредыдущая", СтруктураИерархии);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаВидаИерархииЗавершение", ЭтотОбъект,	ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", СтруктураИерархии);
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Включение/Отключение отображения положения
//
&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Элементы.ОтображатьПоложение.Пометка = НЕ Элементы.ОтображатьПоложение.Пометка;
	Элементы.ОтображатьПоложение1.Пометка = НЕ Элементы.ОтображатьПоложение1.Пометка;
	
	ОтображатьПоложение = Элементы.ОтображатьПоложение.Пометка;
	
	// †6
 	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции(СтруктураИерархии);
	РазвернутьВсеВетвиДеревьев();
	Элементы.ДиаграммаГантаМодифицированность.Видимость = Истина;
	
КонецПроцедуры

// Включение/Отключение отображения замещенных ремонтов
//
&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)
	 	
	Элементы.ОтображатьЗамещенные.Пометка = НЕ Элементы.ОтображатьЗамещенные.Пометка;
	ОтображатьЗамещенные = Элементы.ОтображатьЗамещенные.Пометка;
	СтруктураОтбора = Новый Структура;
	Если ОтображатьЗамещенные Тогда
		СтруктураОтбора.Вставить("Замещен", Неопределено);
	Иначе
		СтруктураОтбора.Вставить("Замещен", Ложь);
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДеревоРемонтовПланГрафикППР.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			СтруктураОтбора.Вставить("ОбъектРемонтныхРабот", ТекущаяСтрока.Ремонты);
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			ОР = ДеревоРемонтов.НайтиПоИдентификатору(Элементы.ДеревоРемонтовПланГрафикППР.ТекущаяСтрока).ПолучитьРодителя();
			СтруктураОтбора.Вставить("ОбъектРемонтныхРабот", ОР.Ремонты);
			СтруктураОтбора.Вставить("ВидРемонтныхРабот", ТекущаяСтрока.Ремонты);
		КонецЕсли; 			
	КонецЕсли; 	
	
	Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьМнемосхемуКнопка(Команда)
	
	ПостроитьМнемосхемуПроцедура();
	Элементы.Обновить.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемы(Команда)
	
	НормативыЗаполнены = Ложь;
	
	ПроверитьЗаполненностьПередПолучениемНормативовИзСистемыЦикл(НормативыЗаполнены);
	
	Если НормативыЗаполнены ИЛИ ВидыРемонтныхРаботДляЗамещения.Количество() > 0 ИЛИ ВидыРемонтныхРаботДляОтсчета.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьДанныеИзСистемыЗавершение", ЭтотОбъект), НСтр("ru = 'Данное действие приведет к заполнению всех нормативов данными из информационной базы. Все несохраненные изменения будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНетОтмена);
      Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеИзСистемыФрагмент(Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВСистемуДляВыбранных(Команда)
	
	Если ПроверкаПередСохранением() Тогда
		ПараметрыСохранения = Новый Структура("Дерево, МассивСтрок",ДеревоРемонтов,Элементы.ДеревоРемонтовНормативы.ВыделенныеСтроки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеВСистемуДляВыбранныхЗавершение",ЭтотОбъект);
		ОткрытьФорму("Обработка.торо_КалькуляторРЦ.Форма.ФормаСохранения", ПараметрыСохранения,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВСистемуДляВсех(Команда)
	
	Если ПроверкаПередСохранением() Тогда
		ПараметрыСохранения = Новый Структура("Дерево",ДеревоРемонтов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеВСистемуДляВсехЗавершение",ЭтотОбъект);
		ОткрытьФорму("Обработка.торо_КалькуляторРЦ.Форма.ФормаСохранения",ПараметрыСохранения,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыДляВыбранных(Команда)
	
	МассивИндексов = Элементы.ДеревоРемонтовНормативы.ВыделенныеСтроки;
	Если ЗначениеЗаполнено(МассивИндексов) Тогда
		
		НормативыЗаполнены = Ложь;
		МассивСтрок = Новый Массив;
		Для Каждого ИдентификаторСтроки Из МассивИндексов Цикл
			СтрокаДерева = ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторСтроки);
			МассивСтрок.Добавить(СтрокаДерева);
		КонецЦикла;
		Для Каждого ВР ИЗ МассивСтрок Цикл
			ПродолжитьЗаполнение = НЕ (ЗначениеЗаполнено(ВР.СпособВыполнения) ИЛИ ЗначениеЗаполнено(ВР.НормативныйРемонт) ИЛИ
			ЗначениеЗаполнено(ВР.СпособПланирования) ИЛИ ЗначениеЗаполнено(ВР.СпособУчетаДатыОтсчета));
		КонецЦикла;
		
		Если НЕ ПродолжитьЗаполнение Тогда
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьДанныеИзСистемыДляВыбранныхЗавершение", ЭтотОбъект, Новый Структура("МассивИндексов", МассивИндексов)), НСтр("ru = 'Данное действие приведет к заполнению всех нормативов выбранных видов ремонта данными из информационной базы.'")+Символы.ПС+ НСтр("ru = 'Все несохраненные изменения будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНетОтмена);
         Возврат;
		КонецЕсли;
		
		ЗагрузитьДанныеИзСистемыДляВыбранныхФрагмент(МассивИндексов, Ответ);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатДляРЦ(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И ТекущиеДанные.Ремонты = ТекущиеДанные.ОбъектРемонта Тогда
		ОчиститьПоля();
		Список = Элементы.ОРМнемосхема.СписокВыбора;
		Список.Очистить();
		Список.Добавить(ТекущиеДанные.Ремонты, Строка(ТекущиеДанные.Ремонты));
		СписокВыбораВР.Очистить();
		ВРНачалоЦикла = "";
		ОРМнемосхема = ТекущиеДанные.Ремонты;
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаРемонтныйЦикл;
		ПостроитьМнемосхемуПроцедура();
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ремонты) = Тип("Строка") ИЛИ ТекущиеДанные.Ремонты = ТекущиеДанные.Положение Тогда
		Возврат;
	Иначе
		ОчиститьПоля();
		Список = Элементы.ОРМнемосхема.СписокВыбора;
		Список.Очистить();
		Список.Добавить(ТекущиеДанные.ПолучитьРодителя().Ремонты, Строка(ТекущиеДанные.ПолучитьРодителя().Ремонты));
		
		ОРМнемосхема = ТекущиеДанные.ПолучитьРодителя().Ремонты;
		
		Список = Элементы.ВРНачалоЦикла.СписокВыбора;
		Список.Очистить();
		
		ЗаписатьДеревоППРСУчетомПозиции();
		
		Для Каждого Строка Из ОбъектыРемонта Цикл
			Если Строка.ОбъектРемонтныхРабот = ОРМнемосхема И ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
				Список.Добавить(Строка.ВидРемонтныхРабот,Строка.ВидРемонтныхРабот);
			КонецЕсли;
		КонецЦикла;
		
		СписокВыбораВР = Список;
		
		ВРНачалоЦикла = ТекущиеДанные.Ремонты;
		
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаРемонтныйЦикл;
		ПостроитьМнемосхемуПроцедура();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоля()

	ДиаграммаГанта.Очистить();
	торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
	ОРМнемосхема = "";
	ПолеТД.Очистить();
	ВРНачалоЦикла = "";
	НадписьКоличествоРемонтовСтруктураРЦ = "";

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатДляППР(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		ЭтоПапка = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Ремонты, "ЭтоГруппа");
	Иначе	
	    ЭтоПапка = Ложь;
	КонецЕсли; 
	Если ТипЗнч(ТекущиеДанные.Ремонты) <> Тип("Строка") И НЕ ЭтоПапка Тогда
		РассчитатьПроцедура(Новый ОписаниеОповещения("ПроверитьРезультатДляППРЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока", ТекущаяСтрока)));
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНормативам(Команда)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		
		ТекущаяСтрока = Элементы.ДеревоРемонтовПланГрафикППР.ТекущаяСтрока;
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы;
		Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока = ТекущаяСтрока;
		
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаРемонтныйЦикл Тогда
		
		Если Элементы.ПолеМнемосхемы.ТекущийЭлемент <> Неопределено Тогда
			Для Каждого Строка Из Объект.СдвигСтрокМнемосхема Цикл
				Если Строка.Имя = Элементы.ПолеМнемосхемы.ТекущийЭлемент.Имя Тогда
					ВидРемонта = Строка.ВидРемонта;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВидРемонта = Неопределено Тогда
				Для Каждого Строка Из Объект.СдвигСтрокМнемосхема Цикл
					Если Строка.Имя = Элементы.ПолеМнемосхемы.ТекущийЭлемент.КонецЭлемент.Имя Тогда
						ВидРемонта = Строка.ВидРемонта;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаПоложения ИЗ ДеревоРемонтов.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаОР Из  СтрокаПоложения.ПолучитьЭлементы() Цикл
				Если СтрокаОР.Ремонты = ОРМнемосхема Тогда
					Если ВидРемонта <> Неопределено Тогда
						Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
							Если СтрокаВР.Ремонты = ВидРемонта Тогда
								Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока =  СтрокаВР.ПолучитьИдентификатор();
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока =  СтрокаОР.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	

		КонецЦикла;
		
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы;
		ДеревоРемонтовПриАктивизацииСтроки(Элементы.ДеревоРемонтовНормативы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаГанта.Точки Цикл
		ДиаграммаГанта.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаГанта.Точки Цикл
		ДиаграммаГанта.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛегенду(Команда)
	Элементы.ПоказатьЛегенду.Пометка = НЕ Элементы.ПоказатьЛегенду.Пометка;
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказатьЛегенду.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		торо_РасчетСтруктурыРемонтногоЦиклаКлиент.НарисоватьМнемосхему(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	Для каждого РемонтТекущий из СписокВыбораВР Цикл
		Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", РемонтТекущий.Значение)).Количество() = 0 Тогда
			НС = ЗапланированныеРемонты.Добавить();
			НС.ВидРемонтныхРабот = РемонтТекущий.Значение;
			НС.Цвет = Новый Цвет(255, 255, 255);
			НС.ЦветТекста = Новый Цвет(0, 0, 0);
			НС.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
	МассивРемонтов = Новый Массив;
	
	Для каждого Стр из ЗапланированныеРемонты Цикл
		МассивРемонтов.Добавить(Новый Структура("ВидРемонтныхРабот, Выбран, Цвет, ЦветТекста, Шрифт", Стр.ВидРемонтныхРабот, Стр.Выбран, Стр.Цвет, Стр.ЦветТекста, Стр.Шрифт));
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыНастроек", ЭтаФорма);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВРВизуализация", Новый Структура("МассивРемонтов, Нормировать",МассивРемонтов, Нормировать),ЭтаФорма,ЭтаФорма,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоППРРазвернутьВсе(Команда)
	
	ЭлементыДереваПоложения = ДеревоРемонтов.ПолучитьЭлементы();
	Для Каждого СтрокаПоложение Из ЭлементыДереваПоложения Цикл
		ЭлементыДереваОбъектыРемонта = СтрокаПоложение.ПолучитьЭлементы();
		Для Каждого СтрокаОР Из ЭлементыДереваОбъектыРемонта Цикл
			Элементы.ДеревоРемонтовНормативы.Развернуть(СтрокаОР.ПолучитьИдентификатор(), Истина);
			Элементы.ДеревоРемонтовПланГрафикППР.Развернуть(СтрокаОР.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоППРСвернутьВсе(Команда)
	
	ЭлементыДереваПоложения = ДеревоРемонтов.ПолучитьЭлементы();
	Для Каждого СтрокаПоложение Из ЭлементыДереваПоложения Цикл
		ЭлементыДереваОбъектыРемонта = СтрокаПоложение.ПолучитьЭлементы();
		Для Каждого СтрокаОР Из ЭлементыДереваОбъектыРемонта Цикл
			Элементы.ДеревоРемонтовНормативы.Свернуть(СтрокаОР.ПолучитьИдентификатор());
			Элементы.ДеревоРемонтовПланГрафикППР.Свернуть(СтрокаОР.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаВыбораВДеревеППР

#Область ОбработкаВыбора_ОбъектРемонта
&НаКлиенте
Процедура ДеревоППРОбработкаВыбора_ОбъектРемонта(ВыбранноеЗначение)
	
	Если ПолучитьЗначениеСвойства(ВыбранноеЗначение, "ЭтоГруппа") Тогда
		
		ТекстСообщения = НСтр("ru = 'В документ нельзя вносить группы объектов ремонтных работ!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если ПолучитьЗначениеСвойства(ВыбранноеЗначение, "НеУчаствуетВПланировании") Тогда
		
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОР", ЭтотОбъект, СтруктураПараметров);
		ПоказатьВопрос(Оповещение,СтрШаблон(
				НСтр("ru = 'Для объекта ремонта ""%1"" установлен признак ""Не участвует в планировании"". Добавить объект ремонта?'"),
				ВыбранноеЗначение),
			РежимДиалогаВопрос.ДаНет
		);
		
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
		ДеревоРемонтов,
		Новый Структура("ОбъектРемонта", ВыбранноеЗначение),
		УровеньОрВДереве,УровеньОрВДереве,1// Ищем первое, оно же единственное совпадение, если есть
	);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Объект ""%1"" уже внесен в список объектов ремонтных работ плана-графика ППР!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДополнитьДеревоРемонтов(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияВопросаОР(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнитьДеревоРемонтов(Параметры.ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьДеревоРемонтов(ОбъектРемонта, МассивВидовРемонта = Неопределено)
	
	Если ОтображатьПоложение Тогда
		ПоложениеОР = ОпределитьПоложениеОР(ОбъектРемонта, СтруктураИерархии);
	Иначе
		ПоложениеОР = ПредставлениеПустогоРодителя();
	КонецЕсли;
	
	НайденныеСтрокиПоПоложению = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
		ДеревоРемонтов,
		Новый Структура("Положение", ПоложениеОР),
		УровеньПоложенияВДереве,УровеньПоложенияВДереве,1// Ищем первое, оно же единственное совпадение, если есть
	);
		
	Если НайденныеСтрокиПоПоложению.Количество() = 0 Тогда
		НайденнаяСтрокаРодитель = ДеревоРемонтов.ПолучитьЭлементы().Добавить();
		НайденнаяСтрокаРодитель.Ремонты = ПоложениеОР;
		НайденнаяСтрокаРодитель.НомерКартинки = ?(ПоложениеОР = ПредставлениеПустогоРодителя(), 4, 2);
		НайденнаяСтрокаРодитель.Положение = ПоложениеОР;
				
	Иначе
		НайденнаяСтрокаРодитель = НайденныеСтрокиПоПоложению[0];
	КонецЕсли;
	
	НайденныеСтрокиОР = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
		НайденнаяСтрокаРодитель,
		Новый Структура("ОбъектРемонта", ОбъектРемонта),
		УровеньОрВДереве,УровеньОрВДереве,1
	);
	Если НайденныеСтрокиОР.Количество() = 0 Тогда
		СтрокаОР = НайденнаяСтрокаРодитель.ПолучитьЭлементы().Добавить();
		СтрокаОР.Ремонты = ОбъектРемонта;
		СтрокаОР.ОбъектРемонта = ОбъектРемонта;
		СтрокаОР.НомерКартинки = 0;
		СтрокаОР.ТиповойОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ОбъектРемонта, "ТиповойОР");
		
	Иначе
		СтрокаОР = НайденныеСтрокиОР[0];
	КонецЕсли;
	
	Если МассивВидовРемонта <> Неопределено Тогда
		
		Для Каждого СтрокаВР Из МассивВидовРемонта Цикл
				
			НайденныеСтроки = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
				СтрокаОР,
				Новый Структура("Ремонты", СтрокаВР),
				,,1
			);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовСтрокаВидРемРабот = СтрокаОР.ПолучитьЭлементы().Добавить();
				НовСтрокаВидРемРабот.Ремонты                = СтрокаВР;
				НовСтрокаВидРемРабот.НомерКартинки          = 7;
				НовСтрокаВидРемРабот.НомерКартинкиСостояний = ИндексКартинкиСостояний(НовСтрокаВидРемРабот, ЭтаФорма);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИдентификаторСтрокиОР = СтрокаОР.ПолучитьИдентификатор();
	ТекЭлементДерево = ТекЭлементДерево();
	ТекЭлементДерево.ТекущаяСтрока = ИдентификаторСтрокиОР;
	ТекЭлементДерево.Развернуть(ИдентификаторСтрокиОР, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоППРОбработкаВыбора_ИзФормыПодбораОР(ВыбранноеЗначение)
	
	РодителиОР = Новый Соответствие;
	
	УсловиеПоискаВДереве = торо_ДанныеФормыДеревоКлиентСервер.Новый_ГруппаИли_Условия();
	МассивОРДляПолученияДопДанных = Новый Массив;
	Для каждого КлючИЗначение из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл
		МассивОРДляПолученияДопДанных.Добавить(КлючИЗначение.Ключ);
		торо_ДанныеФормыДеревоКлиентСервер.ДобавитьВГруппуУсловияЭлементИлиГруппу(УсловиеПоискаВДереве,
			торо_ДанныеФормыДеревоКлиентСервер.Новый_ЭлементУсловия("ОбъектРемонта", КлючИЗначение.Ключ)
		);
	КонецЦикла;
	Если ОтображатьПоложение Тогда
		РодителиОР = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОРДляПолученияДопДанных, СтруктураИерархии, ТекущаяДата(), Истина);
	КонецЕсли;
	
	СтрокиОРВДереве = Новый Соответствие;
	Если МассивОРДляПолученияДопДанных.Количество() > 0 Тогда
		СтрокиОРВДеревеМассив = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтрокиПоСоставномуУсловию(
			ДеревоРемонтов,
			УсловиеПоискаВДереве,
			УровеньОрВДереве, УровеньОрВДереве
		);
		Для Каждого СтрокаОРВДереве Из СтрокиОРВДеревеМассив Цикл
			СтрокиОРВДереве.Вставить(СтрокаОРВДереве.ОбъектРемонта, СтрокаОРВДереве);
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияТиповыхОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъектов(МассивОРДляПолученияДопДанных, "ТиповойОР", Истина);
	
	МассивДляЗаполненияНормативов = Новый Массив;
	Для каждого КлючИЗначение из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл
		ОбъектРемонта = КлючИЗначение.Ключ;
		СтрокаОР = НайтиИлиДобавитьСтрокуОРВДереве(ДеревоРемонтов, ОбъектРемонта, ЗначенияТиповыхОР.Получить(ОбъектРемонта), РодителиОР, СтрокиОРВДереве);
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			Для каждого ВидРемонта из КлючИЗначение.Значение Цикл
				ДобавитьСтрокуВидаРемонтаВДерево(СтрокаОР, ВидРемонта);
				МассивДляЗаполненияНормативов.Добавить(Новый Структура("ВидРемонтныхРабот,ОбъектРемонтныхРабот",ВидРемонта,ОбъектРемонта));
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьНормативыИзСистемы(Ложь,,,МассивДляЗаполненияНормативов);
	
	РазвернутьВсеВетвиДеревьев();
	
КонецПроцедуры

&НаКлиенте
Функция НайтиИлиДобавитьСтрокуОРВДереве(Родитель, ОбъектРемонта, ТиповойОР, РодителиОР, СтрокиОРВДереве)
	
	СтрокаОР = СтрокиОРВДереве.Получить(ОбъектРемонта);
	
	Если СтрокаОР = Неопределено Тогда
		Если ОтображатьПоложение Тогда
			ПоложениеОР = РодителиОР.Получить(ОбъектРемонта);
			Если ПоложениеОР = Неопределено ИЛИ ПоложениеОР = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка") Тогда
				ПоложениеОР = ПредставлениеПустогоРодителя();
			КонецЕсли;
		Иначе
			ПоложениеОР = ПредставлениеПустогоРодителя();
		КонецЕсли;
		
		СтрокиРодителя = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
			Родитель,
			Новый Структура("Положение", ПоложениеОР),
			УровеньПоложенияВДереве,УровеньПоложенияВДереве,1
		);
		
		Если СтрокиРодителя.Количество() = 0 Тогда
			СтрокаРодителя = ДобавитьСтрокуПоложенияВДерево(Родитель.ПолучитьЭлементы(), ПоложениеОР);
		Иначе
			СтрокаРодителя = СтрокиРодителя[0];
		КонецЕсли;
		
		СтрокаОР = ДобавитьСтрокуОРВДерево(СтрокаРодителя, ОбъектРемонта, ТиповойОР);
	КонецЕсли;
	
	Возврат СтрокаОР;
	
КонецФункции

#КонецОбласти

#Область ОбработкаВыбора_ВидРемонта
&НаКлиенте
Процедура ДеревоППРОбработкаВыбора_ВидРемонта(ВыбранноеЗначение)
	
	ЭлементДерево = ТекЭлементДерево();
	
	ТекСтрокаДерева = ЭлементДерево.ТекущиеДанные;
	СтрокаРодитель = ТекСтрокаДерева;
	
	Если ТекСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("Строка") 
			ИЛИ ТекСтрокаДерева.Ремонты = ТекСтрокаДерева.Положение Тогда
			
		ТекстСообщения = НСтр("ru = 'Укажите объект ремонта для ввода ремонтной работы!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	ИначеЕсли ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		СтрокаРодитель = ДеревоРемонтов.НайтиПоИдентификатору(ЭлементДерево.ТекущаяСтрока).ПолучитьРодителя();
		
	КонецЕсли;
	
	ДеревоРемонтовОбработкаВыбораВР(ВыбранноеЗначение, СтрокаРодитель);
	РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтовОбработкаВыбораВР(ВыбранноеЗначение, СтрокаРодитель, ЗаполнитьНормативы = Ложь)
	
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(СтрокаРодитель, Новый Структура("Ремонты", ВыбранноеЗначение),,,1);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НовСтрокаВидРемРабот = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		НовСтрокаВидРемРабот.Ремонты = ВыбранноеЗначение;
		НовСтрокаВидРемРабот.НомерКартинкиСостояний = ИндексКартинкиСостояний(НовСтрокаВидРемРабот, ЭтаФорма);
		НовСтрокаВидРемРабот.НомерКартинки = 7;
		НовСтрокаВидРемРабот.ТиповойОР = ?(ЗначениеЗаполнено(СтрокаРодитель.ТиповойОР),СтрокаРодитель.ТиповойОР,СтрокаРодитель.Ремонты);
		НовСтрокаВидРемРабот.ГрафикРемонтныхРабот = СтрокаРодитель.ГрафикРемонтныхРабот;
		
		НоваяСтрока = ВидыРемонтныхРаботДляОтсчета.Добавить();
		НоваяСтрока.ВидРемонта               = ВыбранноеЗначение;
		НоваяСтрока.ПредшествующийВидРемонта = ВыбранноеЗначение;
		НоваяСтрока.ОбъектРемонта            = СтрокаРодитель.Ремонты;
		Если ТипЗнч(СтрокаРодитель.Ремонты) <> Тип("Строка") Тогда
			НоваяСтрока.ГруппаОбъектовРемонтов   = СтрокаРодитель.ТиповойОР;
		КонецЕсли;
		
		ТекЭлементДерево().ТекущаяСтрока = НовСтрокаВидРемРабот.ПолучитьИдентификатор();
		
	Иначе
		ШаблонСообщения = НСтр("ru = 'Ремонт ""%1"" уже внесен в список ремонтов объекта ""%2"" калькулятора ремонтного цикла!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение, СтрокаРодитель.Ремонты);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Функция ТекЭлементДерево()
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		Возврат Элементы.ДеревоРемонтовПланГрафикППР;
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		Возврат Элементы.ДеревоРемонтовНормативы;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет заполнение дерева плана-графика ППР с учетом позиции.
//
&НаСервере
Процедура ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции(СтруктураИерархии)
	
	ЗаписатьДеревоППРСУчетомПозиции();
	ТаблицаОбъектовРемонта = ОбъектыРемонта.Выгрузить();
	
	// РеквизитФормыВЗначение("ТаблицаНормативов") содержит не измененные пользователем данные!
	ТабНормативов = Новый ТаблицаЗначений;
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов");
	РазвернутьДеревоВТаблицуЗначений(ДеревоРемонтовОбъект, ТабНормативов);

	ТаблицаОбъектовРемонта.Колонки.Добавить("Положение", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	
	Если ОтображатьПоложение Тогда
		МассивОР = ТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонтныхРабот");
		СоответствиеПоложений = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, СтруктураИерархии,,Истина,Истина);
		
		Для каждого СтрокаТаблицы из ТаблицаОбъектовРемонта Цикл
			СтрокаТаблицы.Положение = СоответствиеПоложений[СтрокаТаблицы.ОбъектРемонтныхРабот];
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Положение КАК Положение,
	|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	|	ТаблицаОбъектов.ВидРемонтныхРабот КАК ВидРемонта
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Положение КАК Положение,
	|	ТаблицаОбъектов.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаОбъектов.ВидРемонта КАК ВидРемонта
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|ИТОГИ ПО
	|	Положение,
	|	ОбъектРемонта";

	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектовРемонта);
	ВыборкаПоложение = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Объект.БазаДляРасчетаПГППР.Количество() > 0 Тогда
		Объект.БазаДляРасчетаПГППР.Очистить();
	КонецЕсли;	
	
	Для Каждого СтрокаПоложения Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаОР Из СтрокаПоложения.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
				НоваяСтрокаТЗ = Объект.БазаДляРасчетаПГППР.Добавить();
				НоваяСтрокаТЗ.ВидРемонта = СтрокаВР.Ремонты;
				НоваяСтрокаТЗ.ОбъектРемонта = СтрокаОР.Ремонты;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, СтрокаВР);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
	ДеревоРемонтов.ПолучитьЭлементы().Очистить();
	СтрокиДерева = ДеревоРемонтов.ПолучитьЭлементы();
	
	ЗначенияТиповыхОР = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонтныхРабот"), "ТиповойОР", Истина);
	ЗначенияГрафиков = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонтныхРабот"), "ПлановыйГрафикРаботы", Истина);
	
	Пока ВыборкаПоложение.Следующий() Цикл
		
		ПоложениеОР = ?(ЗначениеЗаполнено(ВыборкаПоложение.Положение), ВыборкаПоложение.Положение, ПредставлениеПустогоРодителя());
		СтрокаПоложения = ДобавитьСтрокуПоложенияВДерево(СтрокиДерева, ПоложениеОР);
		
		ВыборкаОР = ВыборкаПоложение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОР.Следующий() Цикл
			СтрокаОР = ДобавитьСтрокуОРВДерево(СтрокаПоложения, ВыборкаОР.ОбъектРемонта, ЗначенияТиповыхОР.Получить(ВыборкаОР.ОбъектРемонта));
			СтруктураПоиска = Новый Структура("ОбъектРемонта", ВыборкаОР.ОбъектРемонта);
			СтрокаНорматива = ТабНормативов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаНорматива.Количество() > 0 Тогда
				СтрокаОР.ГрафикРемонтныхРабот = СтрокаНорматива[0].ГрафикРемонтныхРабот;
			КонецЕсли;
			ВыборкаВидовРемонта = ВыборкаОР.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ВыборкаВидовРемонта.Следующий() Цикл
				// дозаполняем данные по видам ремонта
				СтруктураПоиска = Новый Структура("ОбъектРемонта, Ремонты", ВыборкаОР.ОбъектРемонта, ВыборкаВидовРемонта.ВидРемонта);
				СтрокаНормативов = ТабНормативов.НайтиСтроки(СтруктураПоиска);
				Если СтрокаНормативов.Количество() > 0 Тогда
					ДобавитьСтрокуВидаРемонтаВДеревоРасширенная(СтрокаОР, ВыборкаВидовРемонта.ВидРемонта, СтрокаНормативов[0]); 
				Иначе
				    ДобавитьСтрокуВидаРемонтаВДерево(СтрокаОР, ВыборкаВидовРемонта.ВидРемонта);
				КонецЕсли; 
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура РазвернутьДеревоВТаблицуЗначений(ДеревоРезультат, ТабРезультат)
	
	ТабРезультат.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"), "Объект ремонта");
	ТабРезультат.Колонки.Добавить("НормативныйРемонт", Новый ОписаниеТипов("СправочникСсылка.торо_ИдентификаторыТехКарт"), "Нормативный ремонт");
	
	Для каждого КолонкаДерева из ДеревоРезультат.Колонки Цикл
		Если КолонкаДерева.Имя <> "НормативныйРемонт" И КолонкаДерева.Имя <> "ОбъектРемонта" Тогда
			ТабРезультат.Колонки.Добавить(КолонкаДерева.Имя, КолонкаДерева.ТипЗначения, КолонкаДерева.Заголовок);
		КонецЕсли; 
	КонецЦикла;
	
	ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(ДеревоРезультат.Строки, ТабРезультат);

КонецПроцедуры

Процедура ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(НаборСтрокДерева, ТабРезультат, ОР = Неопределено)
	
	Для каждого СтрокаДерева из НаборСтрокДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОР = СтрокаДерева.Ремонты;
			ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(СтрокаДерева.Строки, ТабРезультат, ОР);
		ИначеЕсли НЕ ТипЗнч(СтрокаДерева.Ремонты) = Тип("Строка") Тогда
			СтрокаТаблицы = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
			СтрокаТаблицы.ОбъектРемонта = СтрокаДерева.Родитель.Ремонты;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполнить реквизит план ремонтов
//
&НаСервере
Процедура ЗаполнитьПланРемонтовНаСервере()
	
	ЗаполнитьТаблицуНормативовПередРасчетомНаСервере();
	
	Если Не ЭтотОбъект.ТаблицаНормативов.Количество() = 0 Тогда		
		ТаблицаРемонтов = РассчитатьППР();		
	КонецЕсли;
	
	Если ТаблицаРемонтов = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена таблица ремонтов!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПланРемонтовОбъект = РеквизитФормыВЗначение("ПланРемонтов");
	ПланРемонтовОбъект.Очистить();

	Для Каждого СтрокаРемонта Из ТаблицаРемонтов Цикл
		
		КорректируемаяСтрока = ПланРемонтовОбъект.Найти(СтрокаРемонта.ID,"ID");
		Если КорректируемаяСтрока = Неопределено Тогда
			НоваяСтрокаПлана = ПланРемонтовОбъект.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлана,СтрокаРемонта);
			НоваяСтрокаПлана.Родитель = СтрокаРемонта.ОбъектРемонтныхРабот.Родитель;
		Иначе
			ЗаполнитьЗначенияСвойств(КорректируемаяСтрока,СтрокаРемонта);
			КорректируемаяСтрока.Родитель = СтрокаРемонта.ОбъектРемонтныхРабот.Родитель;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивДоступныхДляКорректировкиСтрокОбъект = РеквизитФормыВЗначение("МассивДоступныхДляКорректировкиСтрок", Тип("ТаблицаЗначений"));
	
	Для Каждого СтрокаПланаРемонтов Из ПланРемонтовОбъект Цикл
		Если (МассивДоступныхДляКорректировкиСтрокОбъект.Найти(СтрокаПланаРемонтов.ID) = Неопределено ИЛИ МассивДоступныхДляКорректировкиСтрокОбъект.Найти(СтрокаПланаРемонтов.ID).ДоступенДляРедактирования) Тогда
			Если Не ЗначениеЗаполнено(СтрокаПланаРемонтов.ДатаНач) И Не ЗначениеЗаполнено(СтрокаПланаРемонтов.ДатаКон) Тогда
				СтрокаПланаРемонтов.Отменен = Истина;
				СтрокаПланаРемонтов.ДатаНач = СтрокаПланаРемонтов.ДатаНачСт;
				СтрокаПланаРемонтов.ДатаКон = СтрокаПланаРемонтов.ДатаКонСт;
			КонецЕсли;
		Иначе
			СтрокаПланаРемонтов.ДатаНач = СтрокаПланаРемонтов.ДатаНачСт;
			СтрокаПланаРемонтов.ДатаКон = СтрокаПланаРемонтов.ДатаКонСт;
		КонецЕсли;
	
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ПланРемонтовОбъект, "ПланРемонтов");
	
КонецПроцедуры

// Функция обращается к защищенной обработке, возвращает таблицу ремонтов
&НаСервере
Функция РассчитатьППР()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаЦепочки", Новый ТаблицаЗначений); // Временно
	
	СтруктураДанных.Вставить("ТаблицаПланРемонтов", ?(ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка, ЗаполнитьДоступностьДляРедактированияПолная(РеквизитФормыВЗначение("ПланРемонтов", Тип("ТаблицаЗначений")),МассивДоступныхДляКорректировкиСтрок), РеквизитФормыВЗначение("ПланРемонтов", Тип("ТаблицаЗначений"))));
	СтруктураДанных.Вставить("ТаблицаОбъектыРемонта", ПолучитьТЗОбъектовРемонтаСВидамиРемонтов());
	
	СтруктураДанных.Вставить("ДатаПланирования",         ДатаПланирования);
	СтруктураДанных.Вставить("ПериодичностьДетализации", ПериодичностьДетализации);
	СтруктураДанных.Вставить("КоличествоПериодов",       КоличествоПериодов);
	
	СтруктураДанных.Вставить("ТабРегистрПредшествующие", РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета"));
	СтруктураДанных.Вставить("ТабЗавершенныеРемонтныеРаботы", РеквизитФормыВЗначение("ЗавершенныеРемонтныеРаботы"));
	СтруктураДанных.Вставить("ТабПлановыеРемонтныеРаботы", РеквизитФормыВЗначение("ПлановыеРемонтныеРаботы"));
	СтруктураДанных.Вставить("ТабНаработкаОбъектовРемонта", РеквизитФормыВЗначение("ФактическаяНаработка"));
	СтруктураДанных.Вставить("ТабПараметрыЗамещенияПланирования",РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения"));

	ТабНормативов = Новый ТаблицаЗначений;
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов");	
	РазвернутьДеревоВТаблицуЗначений(ДеревоРемонтовОбъект, ТабНормативов);
	
	СтруктураДанных.Вставить("ТабРегистрНормативные", ТабНормативов);
	СтруктураДанных.Вставить("ТабПараметрыНаработкиОбъектовРемонта", РеквизитФормыВЗначение("ПлановаяНаработка"));
	СтруктураДанных.Вставить("КалькуляторРЦ", Истина);
	
	ТаблицаРемонтов = торо_СЛКСервер.ЗаполнитьПланГрафикППР_Session("торо_ЗащитаУправлениеРемонтами83", СтруктураДанных,,Документы.торо_ПланГрафикРемонта.ПустаяСсылка());
	
	Возврат ТаблицаРемонтов;
		
КонецФункции

&НаСервере
Функция ПолучитьТЗОбъектовРемонтаСВидамиРемонтов()
	
	ТЗ = РеквизитФормыВЗначение("ОбъектыРемонта", Тип("ТаблицаЗначений"));
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидРемонтныхРабот",Справочники.торо_ВидыРемонтов.ПустаяСсылка());
	НайденныеСтроки = ТЗ.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТЗ.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьДоступностьДляРедактированияПолная(ПланРемонтов, МассивДоступныхДляКорректировкиСтрок)
	Возврат Документы.торо_ПланГрафикРемонта.ЗаполнитьДоступностьДляРедактированияПолная(ПланРемонтов, МассивДоступныхДляКорректировкиСтрок);
КонецФункции

&НаСервере
Процедура ПостроитьДиаграммуГантаНаСервере()
	
	Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда		
		ДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаПланирования, ПериодичностьДетализации, КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ОбновитьДоступностьДляРедактирования();
	
	Если НЕ СортироватьПоНаименованию Тогда
		ТаблицаОР = Новый ТаблицаЗначений;
		ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		ТаблицаОР.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		Сч = 1;
		
		Для каждого СтрокаПоложения Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
			Для каждого СтрокаОР из СтрокаПоложения.ПолучитьЭлементы() Цикл
				НС = ТаблицаОР.Добавить();
				НС.ОбъектРемонтныхРабот = СтрокаОР.Ремонты;
				НС.НомерСтроки = Сч;
				Сч = Сч + 1;
			КонецЦикла;
		КонецЦикла; 
		
	КонецЕсли;
	
	ОтображатьЗамещенные = Истина;
	ТаблицаПланРемонтовИсходная = ?(ОтображатьЗамещенные,ПланРемонтов.Выгрузить(),ПланРемонтов.Выгрузить(Новый Структура("Замещен",Ложь)));
	
	Если Не ОтображатьЗамещенные Тогда
		Для Каждого СтрокаПланаРемонтов Из ТаблицаПланРемонтовИсходная Цикл
			Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И СтрокаПланаРемонтов.ЗамещенСт Тогда
				СтрокаПланаРемонтов.ДатаНачСт = Дата(1,1,1);
				СтрокаПланаРемонтов.ДатаКонСт = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРемонтов = ЗаполнитьДоступностьДляРедактирования(ТаблицаПланРемонтовИсходная, РеквизитФормыВзначение("МассивДоступныхДляКорректировкиСтрок"));	
	
	Если НЕ СортироватьПоНаименованию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.ОбъектРемонтныхРабот,
		|	Таб.НомерСтроки
		|ПОМЕСТИТЬ ПорядокОР
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования
		|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
		|ИЗ
		|	&ТаблицаРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования,
		|	ПорядокОР.НомерСтроки КАК НомерОР
		|ИЗ
		|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОР КАК ПорядокОР
		|		ПО торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ПорядокОР.ОбъектРемонтныхРабот";
		
		Если НЕ ОтображатьЗамещенные Тогда
			Запрос.Текст = Запрос.Текст + " И торо_ПланГрафикРемонтаПланРемонтов.Замещен = ЛОЖЬ ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
		Запрос.УстановитьПараметр("Таб", ТаблицаОР);
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если Не ОтображатьПоложение Тогда
		ТаблицаРемонтов.Колонки.Добавить("ДокументППР", Новый ОписаниеТипов("ДокументСсылка.торо_ПланГрафикРемонта"));
		ТаблицаРемонтов.Колонки.Добавить("ЕстьВЗ", Новый ОписаниеТипов("Булево"));
		ТаблицаРемонтов.Колонки.Добавить("ЕстьДвиженияПоВЗ", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 	
	
	ДиаграммаГанта.Обновление = Ложь;
	торо_Ремонты.ПостроитьДиаграммуГантаДляППР(ДиаграммаГанта, ТаблицаРемонтов, СтруктураИерархии, ОтображатьПоложение, ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка, , , СортироватьПоНаименованию);
	ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоДня(ДатаПланирования), КонецДня(ДатаОкончанияПланирования));
	Элементы.ДиаграммаГантаМодифицированность.Видимость = Ложь;
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоППРСУчетомПозиции(ТаблицаОбъектыРемонта = Неопределено, ОбъектРемонтаДляОтбора = Неопределено)
	
	Если ТаблицаОбъектыРемонта = Неопределено Тогда
		ТаблицаОбъектыРемонта = ОбъектыРемонта;
	КонецЕсли;
	ТаблицаОбъектыРемонта.Очистить();
	
	Если ОбъектРемонтаДляОтбора = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
			ЗаписатьСтрокуДереваВТаблицуЗначений(СтрокаДерева, ТаблицаОбъектыРемонта);
		КонецЦикла;
	Иначе
		СтрокаОР = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоРемонтов.ПолучитьЭлементы(), "ОбъектРемонта", ОбъектРемонтаДляОтбора);
		ЗаписатьСтрокуДереваВТаблицуЗначений(СтрокаОР, ТаблицаОбъектыРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуДереваВТаблицуЗначений(СтрокаДерева, ОбъектыРемонтаОбъект)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		НоваяСтрокаТЗ = ОбъектыРемонтаОбъект.Добавить();
		НоваяСтрокаТЗ.ВидРемонтныхРабот    = СтрокаДерева.Ремонты;
		НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.ПолучитьРодителя().Ремонты;
		
	ИначеЕсли ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		
		НоваяСтрокаТЗ = ОбъектыРемонтаОбъект.Добавить();
		НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.Ремонты;
		
 	КонецЕсли;
	
	Для Каждого СтрокаДЗ Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ЗаписатьСтрокуДереваВТаблицуЗначений(СтрокаДЗ, ОбъектыРемонтаОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДеревоРемонтовНаСервере(ОбъектРемонта, МассивВидовРемонта, СоответствиеСтрокОР, ЗаполнитьНормативы)
	
	Если ОтображатьПоложение Тогда
		ПоложениеОР = ОпределитьПоложениеОР(ОбъектРемонта, СтруктураИерархии);
	Иначе
		ПоложениеОР = ПредставлениеПустогоРодителя();
	КонецЕсли;
	
	СтрокаОР = СоответствиеСтрокОР.Получить(ОбъектРемонта);
	Если СтрокаОР = Неопределено Тогда
		
		НайденныеСтрокиПоПоложению = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
			ДеревоРемонтов,
			Новый Структура("Положение", ПоложениеОР),
			1,1,1 // Ищем первое, оно же единственное совпадение, если есть
		);
		
		Если НайденныеСтрокиПоПоложению.Количество() = 0 Тогда
			НайденнаяСтрокаРодитель = ДеревоРемонтов.ПолучитьЭлементы().Добавить();
			НайденнаяСтрокаРодитель.Ремонты = ПоложениеОР;
			НайденнаяСтрокаРодитель.НомерКартинки = ?(ПоложениеОР = ПредставлениеПустогоРодителя(), 4, 2);
			НайденнаяСтрокаРодитель.Положение = ПоложениеОР;
		Иначе
			НайденнаяСтрокаРодитель = НайденныеСтрокиПоПоложению[0];
		КонецЕсли;
		
		СтрокаОР = НайденнаяСтрокаРодитель.ПолучитьЭлементы().Добавить();
		СтрокаОР.Ремонты = ОбъектРемонта;
		СтрокаОР.ОбъектРемонта = ОбъектРемонта;
		СтрокаОР.НомерКартинки = 0;
		СтрокаОР.ТиповойОР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРемонта, "ТиповойОР");
		
	КонецЕсли;
	
	Если МассивВидовРемонта <> Неопределено Тогда
		
		ВосстановитьПриВызове_БазаДляРасчетаПГППР();
		Для Каждого СтрокаВР Из МассивВидовРемонта Цикл
				
			НайденныеСтроки = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
				СтрокаОР,
				Новый Структура("Ремонты", СтрокаВР),
				,,1
			);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовСтрокаВидРемРабот = СтрокаОР.ПолучитьЭлементы().Добавить();
				НовСтрокаВидРемРабот.Ремонты                = СтрокаВР;
				НовСтрокаВидРемРабот.НомерКартинки          = 7;
				НовСтрокаВидРемРабот.НомерКартинкиСостояний = ИндексКартинкиСостояний(НовСтрокаВидРемРабот, ЭтаФорма);
				
			ИначеЕсли ЗаполнитьНормативы Тогда
				СтруктураОтбора = Новый Структура("ОбъектРемонта,ВидРемонта",ОбъектРемонта,СтрокаВР);
				Если БазаДляРасчетаПГППР.Количество() > 0 Тогда
					МассивСтрок = БазаДляРасчетаПГППР.НайтиСтроки(СтруктураОтбора);
					Если ЗначениеЗаполнено(МассивСтрок) Тогда
						ЗаполнитьЗначенияСвойств(НайденныеСтроки[0],МассивСтрок[0],,"ОбъектРемонта");
						НайденныеСтроки[0].ПолучитьРодителя().ГрафикРемонтныхРабот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРемонта, "ПлановыйГрафикРаботы");
						НайденныеСтроки[0].НомерКартинкиСостояний = ?(МассивСтрок[0].Источник = "ОбъектРемонта",6,7);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		СохранитьМеждуСервернымиВызовами_БазаДляРасчетаПГППР(); // Для оптимизации
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеВетвиДеревьев()
	
	Для Каждого Элемент Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРемонтовПланГрафикППР.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
		Элементы.ДеревоРемонтовНормативы.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненностьПередПолучениемНормативовИзСистемы(СтрокаДерева,НормативыЗаполнены)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.НормативныйРемонт)
		ИЛИ ЗначениеЗаполнено(СтрокаДерева.СпособПланирования)
		ИЛИ ЗначениеЗаполнено(СтрокаДерева.ГрафикРемонтныхРабот)
		ИЛИ ЗначениеЗаполнено(СтрокаДерева.СпособВыполнения)
		ИЛИ ЗначениеЗаполнено(СтрокаДерева.СпособУчетаДатыОтсчета) Тогда 
			НормативыЗаполнены = Истина;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаДерева2 Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПроверитьЗаполненностьПередПолучениемНормативовИзСистемы(СтрокаДерева2,НормативыЗаполнены);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНормативыИзСистемы(ЗамещатьНормативы, ОбъектРемонта = Неопределено, МассивСтрокРемонтов = Неопределено, МассивОР = Неопределено)
	
	ЗаполнитьНормативыИзСистемыНаСервере(ЗамещатьНормативы, ОбъектРемонта, МассивСтрокРемонтов, МассивОР);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемыНаСервере(ЗамещатьНормативы, ОбъектРемонта = Неопределено, МассивСтрокРемонтов = Неопределено, МассивОР = Неопределено)
	
	ОбъектыРемонтаОбъект = РеквизитФормыВЗначение("ОбъектыРемонта");
	
	Если МассивСтрокРемонтов <> Неопределено Тогда
		
		ТаблицаОР = ОбъектыРемонтаОбъект.СкопироватьКолонки();
		
		Для Каждого ИдентификаторСтроки Из МассивСтрокРемонтов Цикл
			
			ЗаписатьЭлементСтрокуДереваВТаблицуЗначений(ТаблицаОР,ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторСтроки));
			
		КонецЦикла;
		
	ИначеЕсли МассивОР = Неопределено Тогда
		
		ТаблицаОР=ОбъектыРемонтаОбъект.СкопироватьКолонки();
 		ЗаписатьДеревоППРСУчетомПозиции(ТаблицаОР);
		ЗначениеВРеквизитФормы(ТаблицаОР,"ОбъектыРемонта");
		
	Иначе
		
		ТаблицаОР = Новый ТаблицаЗначений;
		ТаблицаОР.Колонки.Добавить("ВидРемонтныхРабот",    Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
		ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		
		Для Каждого Элем Из МассивОР Цикл
			НС = ТаблицаОР.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОР.Свернуть("ВидРемонтныхРабот, ОбъектРемонтныхРабот");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ТиповыеОР"));
	ОписаниеТиповРГ = Новый ОписаниеТипов(МассивТипов);
	
	Если ТаблицаОР.Колонки.Найти("ТиповойОР") = Неопределено Тогда
		ТаблицаОР.Колонки.Добавить("ТиповойОР", ОписаниеТиповРГ);
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	ОписаниеТиповОР = Новый ОписаниеТипов(МассивТипов);
	
	Если ТаблицаОР.Колонки.Найти("ОбъектРемонта") = Неопределено Тогда
		ТаблицаОР.Колонки.Добавить("ОбъектРемонта", ОписаниеТиповОР);
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаОР Цикл
		Если ТипЗнч(СтрокаТЗ.ОбъектРемонтныхРабот) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			СтрокаТЗ.ТиповойОР	= СтрокаТЗ.ОбъектРемонтныхРабот.ТиповойОР;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьНормативыИзСистемыНаСервере_ТаблицаЗамещаемых(ЗамещатьНормативы, ТаблицаОР);
	ЗаполнитьНормативыИзСистемыНаСервере_ТаблицаПредшествующих(ЗамещатьНормативы, ТаблицаОР);
	ЗаполнитьНормативыИзСистемыНаСервере_ТаблицаЗавершенных(ЗамещатьНормативы, ТаблицаОР);
	ЗаполнитьНормативыИзСистемыНаСервере_ТаблицаПлановых(ЗамещатьНормативы, ТаблицаОР);
	ЗаполнитьНормативыИзСистемыНаСервере_ПлановаяНаработка(ЗамещатьНормативы, ТаблицаОР);
	ЗаполнитьНормативыИзСистемыНаСервере_ФактическаяНаработка(ЗамещатьНормативы, ТаблицаОР);
	ЗаполнитьНормативыИзСистемыНаСервере_БазаДляРасчетаПГППР(ЗамещатьНормативы, ТаблицаОР);
	
	ЗаполнитьДеревоРемонтовНаСервере(ТаблицаОР);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемыНаСервере_БазаДляРасчетаПГППР(ЗамещатьНормативы, ТаблицаОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанныхПГППР.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	               |	ТаблицаДанныхПГППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ТаблицаДанныхПГППР.ТиповойОР КАК ТиповойОР
	               |ПОМЕСТИТЬ ТаблицаДанныхПГППР
	               |ИЗ
	               |	&ТаблицаОР КАК ТаблицаДанныхПГППР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	ВидРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
	               |	торо_НормативныеРемонтыОборудования.ТиповойОР КАК ТиповойОР,
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт,
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования КАК СпособПланирования,
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.СпособВыполнения КАК СпособВыполнения,
	               |	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета КАК СпособУчетаДатыОтсчета,
	               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
	               |	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании КАК РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования КАК НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот КАК НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность КАК НеУчитыватьПродолжительность,
	               |	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей КАК ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования КАК УчитыватьПростоиОборудования,
	               |	ТаблицаДанныхПГППР.ОбъектРемонта КАК ОбъектРемонта,
	               |	""ТиповойОР"" КАК Источник,
	               |	ТаблицаДанныхПГППР.ТиповойОР КАК ТиповойОР1,
	               |	1 КАК Приоритет,
	               |	торо_НормативныеРемонтыОборудования.СтратегияОбслуживания КАК СтратегияОбслуживания,
	               |	торо_НормативныеРемонтыОборудования.ИсточникСтратегии КАК ИсточникСтратегии,
	               |	торо_НормативныеРемонтыОборудования.РассчитыватьНаработкуВПростое КАК РассчитыватьНаработкуВПростое,
						|	торо_НормативныеРемонтыОборудования.ИспользоватьДатыЗамещающихРемонтов КАК ИспользоватьДатыЗамещающихРемонтов
	               |ПОМЕСТИТЬ НормативныеРемонтыСПриоритетами
	               |ИЗ
	               |	ТаблицаДанныхПГППР КАК ТаблицаДанныхПГППР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |		ПО ТаблицаДанныхПГППР.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	               |			И ТаблицаДанныхПГППР.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	               |			И ТаблицаДанныхПГППР.ТиповойОР = торо_НормативныеРемонтыОборудования.ТиповойОР
	               |			И (торо_НормативныеРемонтыОборудования.ТиповойОР <> ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка))
	               |			И (торо_НормативныеРемонтыОборудования.Приоритет)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
	               |	торо_НормативныеРемонтыОборудования.ТиповойОР,
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования,
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	               |	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
	               |	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность,
	               |	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования,
	               |	ТаблицаДанныхПГППР.ОбъектРемонта,
	               |	""ОбъектРемонта"",
	               |	ТаблицаДанныхПГППР.ТиповойОР,
	               |	0,
	               |	торо_НормативныеРемонтыОборудования.СтратегияОбслуживания,
	               |	торо_НормативныеРемонтыОборудования.ИсточникСтратегии,
	               |	торо_НормативныеРемонтыОборудования.РассчитыватьНаработкуВПростое,
						|	торо_НормативныеРемонтыОборудования.ИспользоватьДатыЗамещающихРемонтов
	               |ИЗ
	               |	ТаблицаДанныхПГППР КАК ТаблицаДанныхПГППР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |		ПО ТаблицаДанныхПГППР.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	               |			И ТаблицаДанныхПГППР.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	               |			И (торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка))
	               |			И (торо_НормативныеРемонтыОборудования.Приоритет)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НормативныеРемонтыСПриоритетами.ВидРемонта КАК ВидРемонта,
	               |	НормативныеРемонтыСПриоритетами.ОбъектРемонта КАК ОбъектРемонта,
	               |	МИНИМУМ(НормативныеРемонтыСПриоритетами.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ТаблицаМинимальныхприоритетов
	               |ИЗ
	               |	НормативныеРемонтыСПриоритетами КАК НормативныеРемонтыСПриоритетами
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НормативныеРемонтыСПриоритетами.ОбъектРемонта,
	               |	НормативныеРемонтыСПриоритетами.ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НормативныеРемонтыСПриоритетами.ВидРемонта КАК ВидРемонта,
	               |	НормативныеРемонтыСПриоритетами.ТиповойОР КАК ТиповойОР,
	               |	НормативныеРемонтыСПриоритетами.НормативныйРемонт КАК НормативныйРемонт,
	               |	НормативныеРемонтыСПриоритетами.СпособПланирования КАК СпособПланирования,
	               |	НормативныеРемонтыСПриоритетами.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот,
	               |	НормативныеРемонтыСПриоритетами.СпособВыполнения КАК СпособВыполнения,
	               |	НормативныеРемонтыСПриоритетами.НеИспользоватьВПланированииДатуВводаВЭксплуатацию КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	НормативныеРемонтыСПриоритетами.СпособУчетаДатыОтсчета КАК СпособУчетаДатыОтсчета,
	               |	НормативныеРемонтыСПриоритетами.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
	               |	НормативныеРемонтыСПриоритетами.РазрешитьСокращатьМежремонтныйПериодПриПланировании КАК РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	НормативныеРемонтыСПриоритетами.НеУчитыватьПриПланированииГрафикРаботыОборудования КАК НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	НормативныеРемонтыСПриоритетами.НеУчитыватьПриПланированииГрафикРемонтныхРабот КАК НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	НормативныеРемонтыСПриоритетами.НеУчитыватьПродолжительность КАК НеУчитыватьПродолжительность,
	               |	НормативныеРемонтыСПриоритетами.ИспользоватьКоэффициентыРемонтныхОсобенностей КАК ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	НормативныеРемонтыСПриоритетами.УчитыватьПростоиОборудования КАК УчитыватьПростоиОборудования,
	               |	НормативныеРемонтыСПриоритетами.ОбъектРемонта КАК ОбъектРемонта,
	               |	НормативныеРемонтыСПриоритетами.Источник КАК Источник,
	               |	НормативныеРемонтыСПриоритетами.ТиповойОР КАК ТиповойОР1,
	               |	торо_ВерсииТехКартСрезПоследних.ТехКарта.НормаВремени КАК Продолжительность,
	               |	НормативныеРемонтыСПриоритетами.СтратегияОбслуживания КАК СтратегияОбслуживания,
	               |	НормативныеРемонтыСПриоритетами.ИсточникСтратегии КАК ИсточникСтратегии,
	               |	НормативныеРемонтыСПриоритетами.РассчитыватьНаработкуВПростое КАК РассчитыватьНаработкуВПростое,
						|	НормативныеРемонтыСПриоритетами.ИспользоватьДатыЗамещающихРемонтов КАК ИспользоватьДатыЗамещающихРемонтов
	               |ИЗ
	               |	ТаблицаМинимальныхприоритетов КАК ТаблицаМинимальныхприоритетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НормативныеРемонтыСПриоритетами КАК НормативныеРемонтыСПриоритетами
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(
	               |					,
	               |					ИдентификаторТехКарты В
	               |						(ВЫБРАТЬ
	               |							НормативныеРемонтыСПриоритетами.НормативныйРемонт
	               |						ИЗ
	               |							НормативныеРемонтыСПриоритетами)) КАК торо_ВерсииТехКартСрезПоследних
	               |			ПО НормативныеРемонтыСПриоритетами.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
	               |		ПО ТаблицаМинимальныхприоритетов.ОбъектРемонта = НормативныеРемонтыСПриоритетами.ОбъектРемонта
	               |			И ТаблицаМинимальныхприоритетов.ВидРемонта = НормативныеРемонтыСПриоритетами.ВидРемонта
	               |			И ТаблицаМинимальныхприоритетов.Приоритет = НормативныеРемонтыСПриоритетами.Приоритет";
	
	ИмяОР = "ОбъектРемонтныхРабот";
	ИмяВР = "ВидРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		// По идее старую таблицу и так сборщик съест после сохранения новой
		БазаДляРасчетаПГППР = Результат.Выгрузить(); // Вместо загрузки или заполнения из выборки присваиваем напрямую
		БазаДляРасчетаПГППР.Индексы.Добавить("ОбъектРемонта,ВидРемонта");
		СохранитьМеждуСервернымиВызовами_БазаДляРасчетаПГППР();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемыНаСервере_ФактическаяНаработка(ЗамещатьНормативы, ТаблицаОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	|ПОМЕСТИТЬ ТаблицаОР
	|ИЗ
	|	&ТаблицаОР КАК ТаблицаОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_НаработкаОбъектовРемонтаОстатки.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_НаработкаОбъектовРемонтаОстатки.Показатель КАК Показатель,
	|	торо_НаработкаОбъектовРемонтаОстатки.НаработкаОстаток КАК Наработка
	|ПОМЕСТИТЬ ВТ_ОстаткиНаработки
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта.Остатки(
	|			,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	|				ИЗ
	|					ТаблицаОР КАК ТаблицаОР)) КАК торо_НаработкаОбъектовРемонтаОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель,
	|	торо_ПериодыНаработкиОРСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ПериодыНаработки
	|ИЗ
	|	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	|				ИЗ
	|					ТаблицаОР КАК ТаблицаОР)) КАК торо_ПериодыНаработкиОРСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыНаработки.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ПериодыНаработки.Показатель КАК Показатель,
	|	ВТ_ПериодыНаработки.Период КАК Период,
	|	ЕСТЬNULL(ВТ_ОстаткиНаработки.Наработка, 0) КАК НаработкаПриход,
	|	ВТ_ПериодыНаработки.ОбъектРемонта.Родитель КАК Родитель
	|ИЗ
	|	ВТ_ПериодыНаработки КАК ВТ_ПериодыНаработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаработки КАК ВТ_ОстаткиНаработки
	|		ПО (ВТ_ОстаткиНаработки.ОбъектРемонта = ВТ_ПериодыНаработки.ОбъектРемонта)
	|			И (ВТ_ОстаткиНаработки.Показатель = ВТ_ПериодыНаработки.Показатель)";
	
	Запрос.УстановитьПараметр("ТаблицаОР",ТаблицаОР);
	ФактическаяНаработкаОбъект = РеквизитФормыВЗначение("ФактическаяНаработка");
	ТаблицаФактическаяНаработка = Запрос.Выполнить().Выгрузить();
	ИмяОР = "ОбъектРемонта";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаФактическаяНаработка,ФактическаяНаработкаОбъект,ЗамещатьНормативы,ИмяОР);
	
	Для Каждого Строка Из ТаблицаФактическаяНаработка Цикл
		НоваяСтрока = ФактическаяНаработкаОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ФактическаяНаработкаОбъект, "ФактическаяНаработка");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемыНаСервере_ПлановаяНаработка(ЗамещатьНормативы, ТаблицаОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	|ПОМЕСТИТЬ ТаблицаОР
	|ИЗ
	|	&ТаблицаОР КАК ТаблицаОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка КАК ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Период КАК Период,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта.Родитель КАК Родитель,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	|		ПО торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = ТаблицаОР.ОбъектРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ТаблицаОР",ТаблицаОР);
	ПлановаяНаработкаОбъект = РеквизитФормыВЗначение("ПлановаяНаработка");
	ТаблицаПлановаяНаработка = Запрос.Выполнить().Выгрузить();
	ИмяОР = "ОбъектРемонта";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаПлановаяНаработка,ПлановаяНаработкаОбъект,ЗамещатьНормативы,ИмяОР);
	
	Для Каждого Строка Из ТаблицаПлановаяНаработка Цикл
		НоваяСтрока = ПлановаяНаработкаОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ПлановаяНаработкаОбъект, "ПлановаяНаработка");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемыНаСервере_ТаблицаПлановых(ЗамещатьНормативы, ТаблицаОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	ТаблицаОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID,
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ВТ_Завершенные
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	               |		ПО торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ОбъектРемонта = ТаблицаОР.ОбъектРемонтныхРабот
	               |			И торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот = ТаблицаОР.ВидРемонтныхРабот
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК ID,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот КАК ДатаНачалаРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаОкончанияРемонтныхРабот КАК ДатаОкончанияРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен КАК Замещен,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Период КАК Период,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен КАК Отменен,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_замещающего КАК ID_замещающего,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРасчетная КАК ДатаНачалаРасчетная,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ВТ_ПлановыеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	               |			,
	               |			(ОбъектРемонтныхРабот, ВидРемонтныхРабот) В
	               |					(ВЫБРАТЬ
	               |						ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |						ТаблицаОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	               |					ИЗ
	               |						ТаблицаОР КАК ТаблицаОР)
	               |				И НЕ ID В
	               |						(ВЫБРАТЬ
	               |							ВТ_Завершенные.ID КАК ID
	               |						ИЗ
	               |							ВТ_Завершенные КАК ВТ_Завершенные)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |ГДЕ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен = ЛОЖЬ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПлановыеРемонты.ID КАК ID,
	               |	ВТ_ПлановыеРемонты.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ВТ_ПлановыеРемонты.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала, ВТ_ПлановыеРемонты.ДатаНачалаРемонтныхРабот) КАК ДатаНачалаРемонтныхРабот,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания, ВТ_ПлановыеРемонты.ДатаОкончанияРемонтныхРабот) КАК ДатаОкончанияРемонтныхРабот,
	               |	ВТ_ПлановыеРемонты.СпособВыполнения КАК СпособВыполнения,
	               |	ВТ_ПлановыеРемонты.Замещен КАК Замещен,
	               |	ВТ_ПлановыеРемонты.Период КАК Период,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование, ВТ_ПлановыеРемонты.Регистратор) КАК Регистратор
	               |ИЗ
	               |	ВТ_ПлановыеРемонты КАК ВТ_ПлановыеРемонты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |		ПО ВТ_ПлановыеРемонты.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта";
	
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);			  
	ПлановыеРемонтныеРаботыОбъект = РеквизитФормыВЗначение("ПлановыеРемонтныеРаботы");			   
	ТаблицаПлановых = Запрос.Выполнить().Выгрузить();
	
	ИмяОР = "ОбъектРемонтныхРабот";
	ИмяВР = "ВидРемонтныхРабот";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаПлановых,ПлановыеРемонтныеРаботыОбъект,ЗамещатьНормативы,ИмяОР,ИмяВР);
	
	Для Каждого Строка Из ТаблицаПлановых Цикл
		НоваяСтрока = ПлановыеРемонтныеРаботыОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ПлановыеРемонтныеРаботыОбъект, "ПлановыеРемонтныеРаботы");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемыНаСервере_ТаблицаЗавершенных(ЗамещатьНормативы, ТаблицаОР)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	ТаблицаОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботы.ДатаНачала КАК ДатаНачала,
	               |	торо_ЗавершенныеРемонтныеРаботы.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонтныхРабот,
	               |	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК ID
	               |ИЗ
	               |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
	               |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_ЗавершенныеРемонтныеРаботы.ID
	               |			И (торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР)
	               |				ИЛИ торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка)
	               |			И (торо_ОбщиеДанныеПоРемонтам.Завершен)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	               |		ПО торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = ТаблицаОР.ОбъектРемонтныхРабот
	               |			И торо_ОбщиеДанныеПоРемонтам.ВидРемонта = ТаблицаОР.ВидРемонтныхРабот
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботы.Период,
	               |	торо_ЗавершенныеРемонтныеРаботы.Период,
	               |	торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот,
	               |	ТаблицаОР.ОбъектРемонтныхРабот,
	               |	торо_ЗавершенныеРемонтныеРаботы.ID
	               |ИЗ
	               |	ТаблицаОР КАК ТаблицаОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
	               |		ПО ТаблицаОР.ОбъектРемонтныхРабот = торо_ЗавершенныеРемонтныеРаботы.ОбъектРемонта
	               |			И ТаблицаОР.ВидРемонтныхРабот = торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот
	               |ГДЕ
	               |	ВЫРАЗИТЬ(торо_ЗавершенныеРемонтныеРаботы.Регистратор КАК Документ.торо_ВводНачальныхДанных) ССЫЛКА Документ.торо_ВводНачальныхДанных";	
	
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);			  
	ЗавершенныеРемонтныеРаботыОбъект = РеквизитФормыВЗначение("ЗавершенныеРемонтныеРаботы");			   
	ТаблицаЗавершенных = Запрос.Выполнить().Выгрузить();
	
	ИмяОР = "ОбъектРемонта";
	ИмяВР = "ВидРемонтныхРабот";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаЗавершенных,ЗавершенныеРемонтныеРаботыОбъект,ЗамещатьНормативы,ИмяОР,ИмяВР);
	
	Для Каждого Строка Из ТаблицаЗавершенных Цикл
		НоваяСтрока = ЗавершенныеРемонтныеРаботыОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ЗавершенныеРемонтныеРаботыОбъект, "ЗавершенныеРемонтныеРаботы");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемыНаСервере_ТаблицаПредшествующих(ЗамещатьНормативы, ТаблицаОР)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст ="ВЫБРАТЬ
	|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	ТаблицаОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ТаблицаОР.ТиповойОР КАК ТиповойОР
	|ПОМЕСТИТЬ ТаблицаОР
	|ИЗ
	|	&ТаблицаОР КАК ТаблицаОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта КАК ПредшествующийВидРемонта,
	|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР КАК ТиповойОР
	|ИЗ
	|	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	|		ПО торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта = ТаблицаОР.ВидРемонтныхРабот
	|			И торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта = ТаблицаОР.ОбъектРемонтныхРабот
	|ГДЕ
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.Приоритет = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
	|	ТаблицаОР.ОбъектРемонтныхРабот,
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР";
	
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);			  
	ВидыРемонтныхРаботДляОтсчетаОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
	ТаблицаПредшествующих = Запрос.Выполнить().Выгрузить();
	
	ИмяОР = "ОбъектРемонта";
	ИмяВР = "ВидРемонта";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаПредшествующих,ВидыРемонтныхРаботДляОтсчетаОбъект,ЗамещатьНормативы,ИмяОР,ИмяВР);
	
	Для Каждого Строка Из ТаблицаПредшествующих Цикл
		НоваяСтрока = ВидыРемонтныхРаботДляОтсчетаОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляОтсчетаОбъект,"ВидыРемонтныхРаботДляОтсчета");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемыНаСервере_ТаблицаЗамещаемых(ЗамещатьНормативы, ТаблицаОР)
	
	Запрос = Новый Запрос;	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	ТаблицаОР.ТиповойОР КАК ТиповойОР
	|ПОМЕСТИТЬ ВТ_ТаблицаОР
	|ИЗ
	|	&ТаблицаОР КАК ТаблицаОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
	|	торо_НормативныеРемонтыОборудования.ТиповойОР КАК ТиповойОР
	|ПОМЕСТИТЬ ВТ_ПриоритетныеНормативы
	|ИЗ
	|	ВТ_ТаблицаОР КАК ВТ_ТаблицаОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|		ПО (торо_НормативныеРемонтыОборудования.ОбъектРемонта = ВТ_ТаблицаОР.ОбъектРемонтныхРабот)
	|			И (торо_НормативныеРемонтыОборудования.ВидРемонта = ВТ_ТаблицаОР.ВидРемонтныхРабот)
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.Приоритет = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПриоритетныеНормативы.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта КАК ЗамещаемыйВидРемонта,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения КАК СпособЗамещения,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница КАК НачальнаяГраница,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница КАК КонечнаяГраница,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта КАК ВидРемонта
	|ИЗ
	|	ВТ_ПриоритетныеНормативы КАК ВТ_ПриоритетныеНормативы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
	|		ПО ВТ_ПриоритетныеНормативы.ОбъектРемонта = торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта
	|			И ВТ_ПриоритетныеНормативы.ВидРемонта = торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта
	|			И ВТ_ПриоритетныеНормативы.ТиповойОР = торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПриоритетныеНормативы.ОбъектРемонта,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта";
	
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);
	ВидыРемонтныхРаботДляЗамещенияОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	ТаблицаЗамещаемых = Запрос.Выполнить().Выгрузить();
	
	ИмяОР = "ОбъектРемонта";
	ИмяВР = "ВидРемонта";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаЗамещаемых,ВидыРемонтныхРаботДляЗамещенияОбъект,ЗамещатьНормативы,ИмяОР,ИмяВР);
	
	Для Каждого Строка Из ТаблицаЗамещаемых Цикл
		НоваяСтрока = ВидыРемонтныхРаботДляЗамещенияОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляЗамещенияОбъект, "ВидыРемонтныхРаботДляЗамещения");

КонецПроцедуры

&НаСервере
Процедура УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаЗапроса,ТаблицаОбработки,ЗамещатьНормативы,ИмяОР,ИмяВР = Неопределено)
	
	Если ЗамещатьНормативы Тогда
		ТаблицаДляУдаления = ТаблицаОбработки;
		ТаблицаДляПроверки = ТаблицаЗапроса;
	Иначе
		ТаблицаДляУдаления = ТаблицаЗапроса;
		ТаблицаДляПроверки = ТаблицаОбработки;
	КонецЕсли;
	
	МассивСтрокКУдалению = Новый Массив;
	
	Для Каждого Строка Из ТаблицаДляУдаления Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(ИмяОР,Строка[ИмяОР]);
		Если ИмяВР <> Неопределено Тогда
			СтруктураОтбора.Вставить(ИмяВР,Строка[ИмяВР]);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаДляПроверки.НайтиСтроки(СтруктураОтбора)) Тогда
			МассивСтрокКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаДляУдаления.Удалить(СтрокаКУдалению);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроцедура(Знач Оповещение)
	
	ВыполнятьРасчет = ПроверкаПередРасчетомПланГрафика();
	Если ВыполнятьРасчет Тогда
		
		Если Не ЗначениеЗаполнено(ДатаПланирования) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена начальная дата планирования!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для расчёта плана-графика ремонтов необходимо задать период планирования!'"));
		КонецЕсли;
		
		Если Отказ = Истина Тогда
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
		КонецЕсли;
		
		Если ПланРемонтов.Количество() > 0 Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПроцедураЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Данные запланированных ремонтов будут перезаполнены! Продолжить?'"),
				РежимДиалогаВопрос.ДаНет, 60);
			Возврат;
			
		Иначе
			ЗаписатьДеревоППРСУчетомПозиции();
			
			Если ДеревоРемонтов.ПолучитьЭлементы().Количество() = 0 Тогда

				ТекстСообщения = НСтр("ru = 'Не заданы объекты ремонтных работ!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДеревоРемонтовПланГрафикППР");
				ВыполнитьОбработкуОповещения(Оповещение);
				Возврат;
				
			КонецЕсли;
			
			ЗаполнитьПланРемонтовНаСервере();
		КонецЕсли; 
		
	Иначе
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы;
	КонецЕсли;
	
	РассчитатьПроцедураФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроцедураЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьДеревоППРСУчетомПозиции();
		
		Если ДеревоРемонтов.ПолучитьЭлементы().Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не заданы объекты ремонтных работ!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДеревоРемонтовПланГрафикППР");
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьПланРемонтовНаСервере();
		
	КонецЕсли;
	
	РассчитатьПроцедураФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроцедураФрагмент(Знач Оповещение)
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Функция ПроверкаПередРасчетомПланГрафика()
	
	РезультатПроверкиРеквизитовДляППР    = ПроверитьЗаполненностьРеквизитовДляППР();
	РезультатПроверкиДерева              = ВсеПоляДереваЗаполнены();
	РезультатПроверкиТаблицДляМнемосхемы = ПроверитьЗаполненностьТаблицДляМнемосхемы();
	РезультатПроверкиТаблицДляППР        = ПроверитьЗаполненностьТаблицДляППР();
	
	Возврат (РезультатПроверкиРеквизитовДляППР И РезультатПроверкиДерева И РезультатПроверкиТаблицДляМнемосхемы И РезультатПроверкиТаблицДляППР);
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьРеквизитовДляППР()
	
	МассивРеквизитов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		МассивРеквизитов.Добавить("ВидОперации");
	ИначеЕсли ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И Не ЗначениеЗаполнено(КорректируемыйДокумент) Тогда
		МассивРеквизитов.Добавить("КорректируемыйДокумент");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПланирования) Тогда
		МассивРеквизитов.Добавить("ДатаПланирования");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
		МассивРеквизитов.Добавить("ПериодичностьДетализации");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоличествоПериодов) Тогда
		МассивРеквизитов.Добавить("КоличествоПериодов");
	КонецЕсли;
	
	Если МассивРеквизитов.Количество() > 0 Тогда
		Для Каждого НезаполненныйРеквизит Из МассивРеквизитов Цикл
			ШаблонСообщения = НСтр("ru = 'Не заполнено поле: %1.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(НезаполненныйРеквизит));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
    	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ВсеПоляДереваЗаполнены()
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("Строка");
	ТаблицаСтрок.Колонки.Добавить("Колонка");
	МассивИменПолейДляПроверки = Новый Массив;
	МассивИменПолейДляПроверки.Добавить("СпособУчетаДатыОтсчета");
	МассивИменПолейДляПроверки.Добавить("СпособВыполнения");
	МассивИменПолейДляПроверки.Добавить("СпособПланирования");
	МассивИменПолейДляПроверки.Добавить("ГрафикРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("НормативныйРемонт");
	
	Для Каждого СтрокаДерева Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		ПроверитьЗаполненностьСтрокиДерева(СтрокаДерева,ТаблицаСтрок);
	КонецЦикла;
	
	Если ТаблицаСтрок.Количество() > 0 Тогда
		Для Каждого НезаполненнаяЯчейкаДерева Из ТаблицаСтрок Цикл
			ШаблонСообщения = НСтр("ru = 'Не заполнено поле: %1 -> %2 -> %3.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(НезаполненнаяЯчейкаДерева.Строка.ПолучитьРодителя().Ремонты), НезаполненнаяЯчейкаДерева.Строка.Ремонты, НезаполненнаяЯчейкаДерева.Колонка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполненностьСтрокиДерева(СтрокаДерева,ТаблицаСтрок)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Для Каждого СтрокаДереваПоглубже Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПроверитьЗаполненностьСтрокиДерева(СтрокаДереваПоглубже,ТаблицаСтрок);
		КонецЦикла;
	Иначе
		Для Каждого ПроверяемыйРеквизит Из МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаДерева[ПроверяемыйРеквизит]) Тогда
				НоваяСтрокаТЗ = ТаблицаСтрок.Добавить();
				НоваяСтрокаТЗ.Строка = СтрокаДерева;
				НоваяСтрокаТЗ.Колонка = ПроверяемыйРеквизит;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполненностьТаблицДляМнемосхемы()
	
	РезультатПроверки = Истина;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ОбъектРемонта");
	МассивИменПолейДляПроверки.Добавить("ПлановаяНаработка");
	МассивИменПолейДляПроверки.Добавить("Показатель");
	МассивИменПолейДляПроверки.Добавить("ПродолжительностьПериодаПлановойНаработки");
	МассивИменПолейДляПроверки.Добавить("ПериодПлановойНаработки");
	МассивИменПолейДляПроверки.Добавить("КоэффициентИспользованияОборудования");
	
	ТаблицаПлановойНаработкиОбъект = РеквизитФормыВЗначение("ПлановаяНаработка");
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаПлановойНаработкиОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				ШаблонСообщения = НСтр("ru = 'Не заполнено поле: %1 -> Плановая наработка -> Строка %2 -> %3.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(СтрокаПроверяемойТаблицы.ОбъектРемонта), НомерСтроки, ПроверяемыйРеквизит);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатПроверки;
 
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьТаблицДляППР()
	
	РезультатПроверки = Истина;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ВидРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("ДатаНачала");
	МассивИменПолейДляПроверки.Добавить("ДатаОкончания");
	
	НомерСтроки = 0;
	
	ТаблицаЗавершенныеРемонтыОбъект = РеквизитФормыВЗначение("ЗавершенныеРемонтныеРаботы");
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаЗавершенныеРемонтыОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				ШаблонСообщения = НСтр("ru = 'Не заполнено поле: %1 -> Завершенные -> Строка %2 -> %3.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(СтрокаПроверяемойТаблицы.ОбъектРемонта), НомерСтроки, ПроверяемыйРеквизит);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ОбъектРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("ВидРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("ДатаНачалаРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("ДатаОкончанияРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("СпособВыполнения");
	
	НомерСтроки = 0;
	
	ТаблицаПлановыеРемонтыОбъект = РеквизитФормыВЗначение("ПлановыеРемонтныеРаботы");
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаПлановыеРемонтыОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				ШаблонСообщения = НСтр("ru = 'Не заполнено поле: %1 -> Плановые ремонты -> Строка %2 -> %3.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(СтрокаПроверяемойТаблицы.ОбъектРемонтныхРабот), НомерСтроки, ПроверяемыйРеквизит);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ОбъектРемонта");
	МассивИменПолейДляПроверки.Добавить("Показатель");
	МассивИменПолейДляПроверки.Добавить("Период");

	НомерСтроки = 0;
	
	ТаблицаФактическаяНаработкаОбъект = РеквизитФормыВЗначение("ФактическаяНаработка");
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаФактическаяНаработкаОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				ШаблонСообщения = НСтр("ru = 'Не заполнено поле: %1 -> " + "Фактическая наработка -> Строка %2 -> %3.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(СтрокаПроверяемойТаблицы.ОбъектРемонта), НомерСтроки, ПроверяемыйРеквизит);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьНаличиеЗаписейВСтрокеДерева(СтрокаДерева,ТаблицаСтрок)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Для Каждого СтрокаДереваПоглубже Из СтрокаДерева.Строки Цикл
			ПроверитьНаличиеЗаписейВСтрокеДерева(СтрокаДереваПоглубже,ТаблицаСтрок);
		КонецЦикла;
	Иначе
		Для Каждого ПроверяемыйРеквизит Из МассивИменПолейДляПроверки Цикл
			Если ЗначениеЗаполнено(СтрокаДерева[ПроверяемыйРеквизит]) Тогда
				НоваяСтрокаТЗ = ТаблицаСтрок.Добавить();
				НоваяСтрокаТЗ.ВидРемонтныхРабот = СтрокаДерева.Ремонты;
				НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.Родитель.Ремонты;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидаИерархииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	СтруктураИерархииПредыдущая = ДополнительныеПараметры.СтруктураИерархииПредыдущая;
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтруктураИерархии = ВыбранноеЗначение;
		ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции(СтруктураИерархии);
		РазвернутьВсеВетвиДеревьев();
	КонецЕсли; 
	
	Если Не СтруктураИерархии = СтруктураИерархииПредыдущая Тогда
		Элементы.ДиаграммаГантаМодифицированность.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеСвойства(Ссылка,ИмяРеквизита)
	
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьДоступностьДляРедактирования(ПланРемонтов, МассивДоступныхДляКорректировкиСтрок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт
	|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
	|ИЗ
	|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДоступенДляРедакторования.ID,
	|	ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТаблицаДоступенДляРедакторования
	|ИЗ
	|	&ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	ЕстьNULL(ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования,Истина) КАК ДоступенДляРедактирования
	|ИЗ
	|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТаблицаДоступенДляРедакторования.ID";
	
	Запрос.УстановитьПараметр("ПланРемонтов", ПланРемонтов);
	Запрос.УстановитьПараметр("ТаблицаДоступенДляРедакторования", МассивДоступныхДляКорректировкиСтрок);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	Ссылка = ?(ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот,Документы.торо_ПланГрафикРемонта.ПустаяСсылка(),КорректируемыйДокумент);
	ЗначениеВРеквизитФормы(Документы.торо_ПланГрафикРемонта.ОбновитьДоступностьДляРедактирования(Ссылка,ВидОперации,ПланРемонтов.Выгрузить()),"МассивДоступныхДляКорректировкиСтрок");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРемонтовНаСервере(ТаблицаОР = Неопределено)
	
	Если ТаблицаОР = Неопределено Тогда
		ТаблицаОР = РеквизитФормыВЗначение("ОбъектыРемонта");
	КонецЕсли;	

	МассивСтрок = Новый Массив;
	Для Каждого Строка Из ТаблицаОР Цикл
		Если Не ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из МассивСтрок Цикл
		ТаблицаОР.Удалить(СтрокаКУдалению);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыРемонта.ВидРемонтныхРабот,
	               |	ОбъектыРемонта.ОбъектРемонтныхРабот
				   |ПОМЕСТИТЬ ОбъектыРемонта
	               |ИЗ
	               |	&ТаблицаОбъектыРемонта КАК ОбъектыРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыРемонта.ВидРемонтныхРабот,
	               |	ОбъектыРемонта.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	               |ИЗ
	               |	ОбъектыРемонта КАК ОбъектыРемонта
	               |ИТОГИ ПО
	               |	ОбъектРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектыРемонта", ТаблицаОР);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	УсловиеПоиска = торо_ДанныеФормыДеревоКлиентСервер.Новый_ГруппаИли_Условия();
	Для Каждого ОР Из Дерево.Строки Цикл
		торо_ДанныеФормыДеревоКлиентСервер.ДобавитьВГруппуУсловияЭлементИлиГруппу(УсловиеПоиска,
			торо_ДанныеФормыДеревоКлиентСервер.Новый_ЭлементУсловия("ОбъектРемонта", ОР.ОбъектРемонтныхРабот)
		);
	КонецЦикла;
	
	СоответствиеСтрокОР = Новый Соответствие;
	Если Дерево.Строки.Количество() > 0 Тогда
		НайденныеСтрокиОР = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтрокиПоСоставномуУсловию(ДеревоРемонтов,УсловиеПоиска,2,2);
		Для Каждого НайдСтрока Из НайденныеСтрокиОР Цикл
			СоответствиеСтрокОР.Вставить(НайдСтрока.ОбъектРемонта, НайдСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ОР Из Дерево.Строки Цикл
		МассивВР = Новый Массив;
		Для Каждого ВР Из ОР.Строки Цикл
			МассивВР.Добавить(ВР.ВидРемонтныхРабот);
		КонецЦикла;
		
		ДополнитьДеревоРемонтовНаСервере(ОР.ОбъектРемонтныхРабот, МассивВР, СоответствиеСтрокОР, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    ЗагрузитьДанныеИзСистемыФрагмент(Ответ);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыФрагмент(Знач Ответ)
    
    Перем ЗамещатьНормативы;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗамещатьНормативы = Истина;
    Иначе
        ЗамещатьНормативы = Ложь;
    КонецЕсли;
    
    ЗаполнитьНормативыИзСистемы(ЗамещатьНормативы);
    РазвернутьВсеВетвиДеревьев();
    
    ДеревоРемонтовПриАктивизацииСтроки(Элементы.ДеревоРемонтовНормативы);

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненностьПередПолучениемНормативовИзСистемыЦикл(НормативыЗаполнены)
	
	Для Каждого СтрокаДерева Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Если НЕ НормативыЗаполнены Тогда
			ПроверитьЗаполненностьПередПолучениемНормативовИзСистемы(СтрокаДерева,НормативыЗаполнены);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНормативовПередРасчетомНаСервере()
	
	ТаблицаНормативовОбъект = РеквизитФормыВЗначение("ТаблицаНормативов").СкопироватьКолонки();
	
	Для Каждого СтрокаДерева Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		ЗаписатьСтрокуДереваВТаблицуНормативов(СтрокаДерева, ТаблицаНормативовОбъект);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаНормативовОбъект, "ТаблицаНормативов");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуДереваВТаблицуНормативов(ЭлементСтрокаДерева, ТаблицаНормативовОбъект)
	
	Если ТипЗнч(ЭлементСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		НоваяСтрокаТЗ = ТаблицаНормативовОбъект.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементСтрокаДерева);
		
		НоваяСтрокаТЗ.ВидРемонта    = ЭлементСтрокаДерева.Ремонты;
		НоваяСтрокаТЗ.ОбъектРемонта = ЭлементСтрокаДерева.ПолучитьРодителя().Ремонты;
		НоваяСтрокаТЗ.Приоритет     = Истина;
		
		Если ЭлементСтрокаДерева.Источник = "ТиповойОР" Тогда
			НоваяСтрокаТЗ.ГруппаОбъектовРемонтов = ЭлементСтрокаДерева.ТиповойОР;
		Иначе
			НоваяСтрокаТЗ.ГруппаОбъектовРемонтов = ЭлементСтрокаДерева.ПолучитьРодителя().Ремонты;
		КонецЕсли;
	
	Иначе
	
		Для Каждого ЭлементСтрокаДЗ Из ЭлементСтрокаДерева.ПолучитьЭлементы() Цикл
			
			ЗаписатьСтрокуДереваВТаблицуНормативов(ЭлементСтрокаДЗ, ТаблицаНормативовОбъект);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьМнемосхемуПроцедура()
	
 	Если Не ПроверкаПередПостроениемМнемосхемы() Тогда
		Возврат;
	КонецЕсли;
	ПолеТД.АвтоМасштаб = Истина;
	
	СписокВидовРемонтов = СписокВыбораВР;
	
	СписокВидовРемонтов.ЗаполнитьПометки(Истина);
	СписокВидовРемонтов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ПостроитьМнемосхемуПроцедураЗавершение", ЭтотОбъект), НСтр("ru = 'Выберите виды ремонтных работ'"));

КонецПроцедуры	

&НаКлиенте
Процедура ПостроитьМнемосхемуПроцедураЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокНеНужныхВР = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из Список Цикл
		Если НЕ ЭлементСписка.Пометка Тогда
			СписокНеНужныхВР.Добавить(ЭлементСписка.Значение);
		КонецЕсли; 
	КонецЦикла;

	РасчетВыполнен = ПерерасчитатьНаСервере(СписокНеНужныхВР);
	
	Если Не РасчетВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	торо_РасчетСтруктурыРемонтногоЦиклаКлиент.НарисоватьМнемосхему(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПерерасчитатьНаСервере(СписокНеНужныхВР)
	
	ПолеТД.Очистить();
	ПолеТД.АвтоМасштаб = Истина;
	
	СоответствиеИндексаИНомераКолонки.Очистить();
	ТаблицаРемонтовВизуализация.Очистить();
	НадписьКоличествоРемонтовСтруктураРЦ = "";
	
	ТаблицаОР = Новый ТаблицаЗначений;
	ТаблицаОР.Колонки.Добавить("ВидРемонтныхРабот",   Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот",Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаОР.Колонки.Добавить("Ремонт");
	ТаблицаОР.Колонки.Добавить("ПлановыйГрафикРаботы",Новый ОписаниеТипов("СправочникСсылка.Календари"));
	ТаблицаОР.Колонки.Добавить("ТиповойОР",           Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	
	ЗаписатьДеревоППРСУчетомПозиции(ТаблицаОР, ОРМнемосхема);
	ТаблицаОР.ЗаполнитьЗначения(ОРМнемосхема.ПлановыйГрафикРаботы,"ПлановыйГрафикРаботы");
	ТаблицаОР.ЗаполнитьЗначения(ОРМнемосхема.ТиповойОР,"ТиповойОР");
	ТаблицаОР.Колонки["ТиповойОР"].Имя = "РемонтнаяГруппа";
	
	Для каждого ЭлемСписка Из СписокНеНужныхВР Цикл
		МассивСтрок = ТаблицаОР.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", ЭлемСписка.Значение));
		Если МассивСтрок.Количество() Тогда
			ТаблицаОР.Удалить(МассивСтрок[0]);
		КонецЕсли;
	КонецЦикла;
	
	ДопПараметрыДляКалькулятораРЦ = Новый Структура;
	
	ТабНормативов = Новый ТаблицаЗначений;
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов");	
	РазвернутьДеревоВТаблицуЗначений(ДеревоРемонтовОбъект, ТабНормативов);
	ДопПараметрыДляКалькулятораРЦ.Вставить("ТабРегистрНормативные", ТабНормативов);
	ДопПараметрыДляКалькулятораРЦ.Вставить("КалькуляторРЦ", Истина);
	ДопПараметрыДляКалькулятораРЦ.Вставить("ТабРегистрПредшествующие", РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета"));
	ДопПараметрыДляКалькулятораРЦ.Вставить("ТабПараметрыЗамещенияПланирования", РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения"));
	
	МассивГрафиковРаботы = Новый Массив;
	МассивГрафиковРаботы.Добавить(ОРМнемосхема.ПлановыйГрафикРаботы);

	Для каждого Строка из ТабНормативов Цикл
		Если Строка.ОбъектРемонта = ОРМнемосхема И ТипЗнч(Строка.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") 
			И СписокНеНужныхВР.НайтиПоЗначению(Строка.Ремонты) = Неопределено Тогда
			МассивГрафиковРаботы.Добавить(Строка.ГрафикРемонтныхРабот);
		КонецЕсли;
	КонецЦикла;
	
	МассивГрафиковРаботы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивГрафиковРаботы);
	
	ТаблицаРемонтов = торо_РасчетСтруктурыРемонтногоЦикла.РасчетСтруктурыРЦ(ОРМнемосхема, ВРНачалоЦикла, ТаблицаОР, РеквизитФормыВЗначение("ПлановаяНаработка"), МассивГрафиковРаботы, ДопПараметрыДляКалькулятораРЦ);
	
	Если ТаблицаРемонтов = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапланРемонты = ТаблицаОР.Скопировать(,"ВидРемонтныхРабот");
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	ОписаниеТиповБул = Новый ОписаниеТипов(Массив);
	ЗапланРемонты.Колонки.Добавить("Выбран", ОписаниеТиповБул);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Цвет"));
	ОписаниеТиповЦвет = Новый ОписаниеТипов(Массив);
	ЗапланРемонты.Колонки.Добавить("Цвет",ОписаниеТиповЦвет);
	ЗапланРемонты.ЗаполнитьЗначения(Истина,"Выбран");
	ЗапланРемонты.ЗаполнитьЗначения(Новый Цвет(255, 255, 255), "Цвет");
	
	Нормировать = Ложь;
	
	ВосстановитьПриВызове_БазаДляРасчетаПГППР();
	
	ТаблицаРемонтовВизуализация.Загрузить(ТаблицаРемонтов.Скопировать());
	ТаблицаНормативовМнемосхема = БазаДляРасчетаПГППР.Скопировать(Новый Структура("ОбъектРемонта", ОРМнемосхема));
	ТаблицаНормативовМнемосхема.Колонки["ГрафикРемонтныхРабот"].Имя = "ПлановыйГрафикРаботы";
	ТаблицаНормативовМнемосхема.Колонки["ВидРемонта"].Имя = "ВидРемонтныхРабот";
	ТаблицаНормативовМнемосхема.ЗаполнитьЗначения(ОРМнемосхема.ПлановыйГрафикРаботы, "ПлановыйГрафикРаботы");
	
	ЗаполнитьПараметрыСтруктурыРемонтногоЦикла(ТаблицаНормативовМнемосхема);

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверкаПередПостроениемМнемосхемы()
	
	МассивИменПолейДляПроверки = Новый Массив;
	РезультатПроверкиДерева = ВсеПоляДереваЗаполнены();
	РезультатПроверкиТаблицДляМнемосхемы = ПроверитьЗаполненностьТаблицДляМнемосхемы();
	
	Возврат (РезультатПроверкиДерева И РезультатПроверкиТаблицДляМнемосхемы);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСтруктурыРемонтногоЦикла(ТаблицаНормативовМнемосхема)
	
	торо_РасчетСтруктурыРемонтногоЦикла.ЗаполнитьДатыПредшествующихВТаблицеРемонтов(ТаблицаРемонтовВизуализация, ТаблицаНормативовМнемосхема, ОРМнемосхема.ПлановыйГрафикРаботы);
	
	ИндексСтроки = 7;
	КолонкиНаработки.Очистить();
	ЗначенияНаработки.Очистить();
	
	МассивОР = Новый Массив;
	МассивОР.Добавить(ОРМнемосхема);
	
	торо_РасчетСтруктурыРемонтногоЦикла.РассчитатьНаработкуДляВизуализации(ТаблицаРемонтовВизуализация, МассивОР, КолонкиНаработки, ЗначенияНаработки, ИндексСтроки, "ДатаПредшествующего", ПолеТД);
	торо_РасчетСтруктурыРемонтногоЦикла.РассчитатьНаработкуДляВизуализации(ТаблицаРемонтовВизуализация, МассивОР, КолонкиНаработки, ЗначенияНаработки, ИндексСтроки, "ДатаПредшествующегоТогожеВида", ПолеТД);

КонецПроцедуры

&НаСервере
Функция ПроверкаПередСохранением()
	
	МассивИменПолейДляПроверки = Новый Массив;
	
	РезультатПроверкиДерева = ВсеПоляДереваЗаполнены();
	РезультатПроверкиТаблицДляМнемосхемы = ПроверитьЗаполненностьТаблицДляМнемосхемы();

	Возврат (РезультатПроверкиДерева И РезультатПроверкиТаблицДляМнемосхемы);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеВСистемуДляВыбранныхЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДеревоСПометками = РезультатЗакрытия;
		
	Если ДеревоСПометками <> Неопределено Тогда
		ЗагрузитьДанныеВСистемуНаСервере(ДеревоСПометками);
		ИзменитьНомераКартинойСостоянийПослеСохранения(ДеревоСПометками);
	КонецЕсли;
	
	РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВСистемуНаСервере(ДеревоСПометками = Неопределено)
		
	ЗаполнитьТаблицуНормативовПередРасчетомНаСервере();
	
	ТаблицаНормативовОбъект = РеквизитФормыВЗначение("ТаблицаНормативов");
	
	ТаблицаСПометками = Новый ТаблицаЗначений;
	
	ТаблицаСПометками.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаСПометками.Колонки.Добавить("ВидРемонта",    Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаСПометками.Колонки.Добавить("ТиповойОР",     Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	ТаблицаСПометками.Колонки.Добавить("РГ",            Новый ОписаниеТипов("Число"));
	ТаблицаСПометками.Колонки.Добавить("ОР",            Новый ОписаниеТипов("Число"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ТаблицаСПометками.Колонки.Добавить("Источник",      Новый ОписаниеТипов(Массив, , ПараметрыСтроки));
	
	Для Каждого СтрокаДереваОР Из ДеревоСПометками.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДереваВР Из СтрокаДереваОР.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТаблицаСПометками.Добавить();
			НоваяСтрока.ОбъектРемонта = СтрокаДереваВР.ПолучитьРодителя().Ремонты;
			НоваяСтрока.ВидРемонта = СтрокаДереваВР.Ремонты;
			НоваяСтрока.ТиповойОР = СтрокаДереваВР.ТиповойОР;
			НоваяСтрока.РГ = 0;
			НоваяСтрока.ОР = СтрокаДереваВР.ОР;
			НоваяСтрока.Источник = СтрокаДереваВР.Источник;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСПометками.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаСПометками.ТиповойОР КАК ТиповойОР,
	               |	ТаблицаСПометками.ВидРемонта КАК ВидРемонта,
	               |	ТаблицаСПометками.РГ КАК РГ,
	               |	ТаблицаСПометками.ОР КАК ОР,
	               |	ТаблицаСПометками.Источник КАК Источник
	               |ПОМЕСТИТЬ ТаблицаСПометками
	               |ИЗ
	               |	&ТаблицаСПометками КАК ТаблицаСПометками
	               |ГДЕ
	               |	ТаблицаСПометками.ОР = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
	               |	торо_НормативныеРемонтыОборудования.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт,
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования КАК СпособПланирования,
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.СпособВыполнения КАК СпособВыполнения,
	               |	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета КАК СпособУчетаДатыОтсчета,
	               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
	               |	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании КАК РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования КАК НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот КАК НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность КАК НеУчитыватьПродолжительность,
	               |	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей КАК ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования КАК УчитыватьПростоиОборудования,
	               |	торо_НормативныеРемонтыОборудования.РассчитыватьНаработкуВПростое КАК РассчитыватьНаработкуВПростое,
	               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_НормативныеРемонтыОборудования.Приоритет КАК Приоритет,
	               |	торо_НормативныеРемонтыОборудования.СтратегияОбслуживания КАК СтратегияОбслуживания,
	               |	торо_НормативныеРемонтыОборудования.ИсточникСтратегии КАК ИсточникСтратегии,
						|	торо_НормативныеРемонтыОборудования.ИспользоватьДатыЗамещающихРемонтов КАК ИспользоватьДатыЗамещающихРемонтов
	               |ПОМЕСТИТЬ ТаблицаСНормативами
	               |ИЗ
	               |	&ТаблицаСНормативами КАК торо_НормативныеРемонтыОборудования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСНормативами.ВидРемонта КАК ВидРемонта,
	               |	ТаблицаСНормативами.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
	               |	ТаблицаСНормативами.НормативныйРемонт КАК НормативныйРемонт,
	               |	ТаблицаСНормативами.СпособПланирования КАК СпособПланирования,
	               |	ТаблицаСНормативами.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот,
	               |	ТаблицаСНормативами.СпособВыполнения КАК СпособВыполнения,
	               |	ТаблицаСНормативами.НеИспользоватьВПланированииДатуВводаВЭксплуатацию КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	ТаблицаСНормативами.СпособУчетаДатыОтсчета КАК СпособУчетаДатыОтсчета,
	               |	ТаблицаСНормативами.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
	               |	ТаблицаСНормативами.РазрешитьСокращатьМежремонтныйПериодПриПланировании КАК РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования КАК НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРемонтныхРабот КАК НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	ТаблицаСНормативами.НеУчитыватьПродолжительность КАК НеУчитыватьПродолжительность,
	               |	ТаблицаСНормативами.ИспользоватьКоэффициентыРемонтныхОсобенностей КАК ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	ТаблицаСНормативами.УчитыватьПростоиОборудования КАК УчитыватьПростоиОборудования,
	               |	ТаблицаСНормативами.РассчитыватьНаработкуВПростое КАК РассчитыватьНаработкуВПростое,
	               |	ТаблицаСНормативами.Приоритет КАК Приоритет,
	               |	ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка) КАК ТиповойОР,
	               |	ТаблицаСПометками.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаСПометками.РГ КАК РГ,
	               |	ТаблицаСПометками.ОР КАК ОР,
	               |	ТаблицаСПометками.Источник КАК Источник,
	               |	ТаблицаСПометками.ВидРемонта КАК ВидРемонта1,
	               |	ТаблицаСНормативами.СтратегияОбслуживания КАК СтратегияОбслуживания,
	               |	ТаблицаСНормативами.ИсточникСтратегии КАК ИсточникСтратегии,
						|	ТаблицаСНормативами.ИспользоватьДатыЗамещающихРемонтов КАК ИспользоватьДатыЗамещающихРемонтов
	               |ИЗ
	               |	ТаблицаСПометками КАК ТаблицаСПометками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСНормативами КАК ТаблицаСНормативами
	               |		ПО ТаблицаСПометками.ВидРемонта = ТаблицаСНормативами.ВидРемонта
	               |			И ТаблицаСПометками.ОбъектРемонта = ТаблицаСНормативами.ОбъектРемонта";

	Запрос.УстановитьПараметр("ТаблицаСПометками",ТаблицаСПометками);
	Запрос.УстановитьПараметр("ТаблицаСНормативами",ТаблицаНормативовОбъект);
	Результат = Запрос.Выполнить();
	ТаблицаНормативовОбъект.Очистить();
	Если НЕ Результат.Пустой() Тогда
		
		ТаблицаНормативовОбъект = Результат.Выгрузить();
		
	КонецЕсли;
	
	ВидыРемонтныхРаботДляЗамещенияОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСПометками.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаСПометками.ТиповойОР КАК ТиповойОР,
	               |	ТаблицаСПометками.ВидРемонта КАК ВидРемонта,
	               |	ТаблицаСПометками.РГ КАК РГ,
	               |	ТаблицаСПометками.ОР КАК ОР,
	               |	ТаблицаСПометками.Источник КАК Источник
	               |ПОМЕСТИТЬ ТаблицаСПометками
	               |ИЗ
	               |	&ТаблицаСПометками КАК ТаблицаСПометками
	               |ГДЕ
	               |	ТаблицаСПометками.ОР = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта КАК ВидРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта КАК ЗамещаемыйВидРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения КАК СпособЗамещения,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница КАК НачальнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница КАК КонечнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта КАК ОбъектРемонта,
	               |	ИСТИНА КАК Приоритет
	               |ПОМЕСТИТЬ ПараметрыЗамещения
	               |ИЗ
	               |	&ВидыРемонтныхРаботДляЗамещенияОбъект КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПараметрыЗамещения.ВидРемонта КАК ВидРемонта,
	               |	ПараметрыЗамещения.ЗамещаемыйВидРемонта КАК ЗамещаемыйВидРемонта,
	               |	ПараметрыЗамещения.СпособЗамещения КАК СпособЗамещения,
	               |	ПараметрыЗамещения.НачальнаяГраница КАК НачальнаяГраница,
	               |	ПараметрыЗамещения.КонечнаяГраница КАК КонечнаяГраница,
	               |	ПараметрыЗамещения.ОбъектРемонта КАК ОбъектРемонта,
	               |	ПараметрыЗамещения.Приоритет КАК Приоритет,
	               |	ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка) КАК ТиповойОР
	               |ИЗ
	               |	ТаблицаСПометками КАК ТаблицаСПометками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗамещения КАК ПараметрыЗамещения
	               |		ПО ТаблицаСПометками.ВидРемонта = ПараметрыЗамещения.ВидРемонта
	               |			И ТаблицаСПометками.ОбъектРемонта = ПараметрыЗамещения.ОбъектРемонта
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта,
	               |	ЛОЖЬ,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР
	               |ИЗ
	               |	ТаблицаСПометками КАК ТаблицаСПометками
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
	               |		ПО ТаблицаСПометками.ОбъектРемонта = торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта
	               |			И ТаблицаСПометками.ВидРемонта = торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта
	               |ГДЕ
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР <> ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	               |ИТОГИ ПО
	               |	ОбъектРемонта,
	               |	ВидРемонта";
				   
	Запрос.УстановитьПараметр("ТаблицаСПометками",ТаблицаСПометками);
	Запрос.УстановитьПараметр("ВидыРемонтныхРаботДляЗамещенияОбъект",ВидыРемонтныхРаботДляЗамещенияОбъект);
	РезультатЗамещенные = Запрос.Выполнить();
	ВидыРемонтныхРаботДляЗамещенияОбъект.Очистить();
	Если НЕ РезультатЗамещенные.Пустой() Тогда
		
		ВидыРемонтныхРаботДляЗамещенияОбъект = РезультатЗамещенные.Выгрузить();
		
	КонецЕсли;
	
	ВидыРемонтныхРаботДляОтсчетаОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСПометками.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаСПометками.ТиповойОР КАК ТиповойОР,
	               |	ТаблицаСПометками.ВидРемонта КАК ВидРемонта,
	               |	ТаблицаСПометками.РГ КАК РГ,
	               |	ТаблицаСПометками.ОР КАК ОР,
	               |	ТаблицаСПометками.Источник КАК Источник
	               |ПОМЕСТИТЬ ТаблицаСПометками
	               |ИЗ
	               |	&ТаблицаСПометками КАК ТаблицаСПометками
	               |ГДЕ
	               |	ТаблицаСПометками.ОР = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта КАК ПредшествующийВидРемонта,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	ИСТИНА КАК Приоритет
	               |ПОМЕСТИТЬ ПредшествующиеРемонты
	               |ИЗ
	               |	&ВидыРемонтныхРаботДляОтсчетаОбъект КАК торо_ПредшествующиеНормативныеРемонтыОборудования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПредшествующиеРемонты.ВидРемонта КАК ВидРемонта,
	               |	ПредшествующиеРемонты.ПредшествующийВидРемонта КАК ПредшествующийВидРемонта,
	               |	ПредшествующиеРемонты.ОбъектРемонта КАК ОбъектРемонта,
	               |	ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка) КАК ТиповойОР,
	               |	ИСТИНА КАК Приоритет
	               |ИЗ
	               |	ТаблицаСПометками КАК ТаблицаСПометками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредшествующиеРемонты КАК ПредшествующиеРемонты
	               |		ПО ТаблицаСПометками.ОбъектРемонта = ПредшествующиеРемонты.ОбъектРемонта
	               |			И ТаблицаСПометками.ВидРемонта = ПредшествующиеРемонты.ВидРемонта
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ТаблицаСПометками КАК ТаблицаСПометками
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
	               |		ПО ТаблицаСПометками.ОбъектРемонта = торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта
	               |			И ТаблицаСПометками.ВидРемонта = торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта
	               |ГДЕ
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР <> ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	               |ИТОГИ ПО
	               |	ОбъектРемонта,
	               |	ВидРемонта";
				   
	Запрос.УстановитьПараметр("ТаблицаСПометками",ТаблицаСПометками);
	Запрос.УстановитьПараметр("ВидыРемонтныхРаботДляОтсчетаОбъект",ВидыРемонтныхРаботДляОтсчетаОбъект);
	Результат = Запрос.Выполнить();
	ВидыРемонтныхРаботДляОтсчетаОбъект.Очистить();
	
	Если НЕ Результат.Пустой() Тогда
		ВидыРемонтныхРаботДляОтсчетаОбъект = Результат.Выгрузить();
	КонецЕсли;

 	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	ТекстОшибки      = "";
	Попытка
		
		// Запись нормативов
		Для Каждого СтрокаТаблицыНормативов Из ТаблицаНормативовОбъект Цикл
			МенеджерЗаписи  = РегистрыСведений.торо_НормативныеРемонтыОборудования.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидРемонта = СтрокаТаблицыНормативов.ВидРемонта;
			МенеджерЗаписи.ОбъектРемонта = СтрокаТаблицыНормативов.ОбъектРемонта;
			МенеджерЗаписи.Прочитать();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаТаблицыНормативов);			
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
		// Запись параметров замещения
		
		ВыборкаПоОбъектам = РезультатЗамещенные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОбъектам.Следующий() Цикл
			ВыборкаПоВидамРемонта = ВыборкаПоОбъектам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВидамРемонта.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ОбъектРемонта.Установить(ВыборкаПоВидамРемонта.ОбъектРемонта);
				НаборЗаписей.Отбор.ВидРемонта.Установить(ВыборкаПоВидамРемонта.ВидРемонта);
				НаборЗаписей.Очистить();
				Выборка = ВыборкаПоВидамРемонта.Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЦикла; 
				НаборЗаписей.Записать(Истина);			
			КонецЦикла; 
		КонецЦикла; 
		
		// Запись предшествующих ремонтов
		ВыборкаПоОбъектам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОбъектам.Следующий() Цикл
			ВыборкаПоВидамРемонта = ВыборкаПоОбъектам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВидамРемонта.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ОбъектРемонта.Установить(ВыборкаПоВидамРемонта.ОбъектРемонта);
				НаборЗаписей.Отбор.ВидРемонта.Установить(ВыборкаПоВидамРемонта.ВидРемонта);
				НаборЗаписей.Очистить();
				Выборка = ВыборкаПоВидамРемонта.Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЦикла; 
				НаборЗаписей.Записать(Истина);			
			КонецЦикла; 
		КонецЦикла;		
						
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОшибкаТранзакции = Истина;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
			Метаданные.Обработки.торо_КалькуляторРЦ,,ТекстОшибки);
	КонецПопытки;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Сохранение не выполнено.'") + ТекстОшибки;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе
		ЗафиксироватьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Сохранение выполнено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВСистемуДляВсехЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДеревоСПометками = РезультатЗакрытия;
	
	Если ДеревоСПометками <> Неопределено Тогда
		ЗагрузитьДанныеВСистемуНаСервере(ДеревоСПометками);
		ИзменитьНомераКартинойСостоянийПослеСохранения(ДеревоСПометками);
	КонецЕсли;
	
	РазвернутьВсеВетвиДеревьев();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыДляВыбранныхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МассивИндексов = ДополнительныеПараметры.МассивИндексов;
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    ЗагрузитьДанныеИзСистемыДляВыбранныхФрагмент(МассивИндексов, Ответ);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыДляВыбранныхФрагмент(Знач МассивИндексов, Знач Ответ)
    
    Перем ЗамещатьНормативы;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗамещатьНормативы = Истина;
    Иначе
        ЗамещатьНормативы = Ложь;
    КонецЕсли;
    
    ЗаполнитьНормативыИзСистемы(ЗамещатьНормативы,,МассивИндексов);	
    РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьЭлементСтрокуДереваВТаблицуЗначений(ТаблицаОР, Строка)
	
	Если ТипЗнч(Строка.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		СтруктураОтбора = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот",Строка.ПолучитьРодителя().Ремонты,Строка.Ремонты);
		МассивНайденныхСтрок = ТаблицаОР.НайтиСтроки(СтруктураОтбора);
		Если НЕ ЗначениеЗаполнено(МассивНайденныхСтрок) Тогда
			НоваяСтрокаТЗ = ТаблицаОР.Добавить();
			НоваяСтрокаТЗ.ВидРемонтныхРабот    = Строка.Ремонты;
			НоваяСтрокаТЗ.ОбъектРемонтныхРабот = Строка.ПолучитьРодителя().Ремонты;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаДЗ Из Строка.ПолучитьЭлементы() Цикл
			ЗаписатьЭлементСтрокуДереваВТаблицуЗначений(ТаблицаОР, СтрокаДЗ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоРемонтовНормативыПередУдалениемНаСервере(МассивВыделенныхСтрок)
	
	ФактическаяНаработкаОбъект 				= РеквизитФормыВЗначение("ФактическаяНаработка");
	ПлановаяНаработкаОбъект 				= РеквизитФормыВЗначение("ПлановаяНаработка");

	ВидыРемонтныхРаботДляЗамещенияОбъект 	= РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	ВидыРемонтныхРаботДляОтсчетаОбъект		= РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
	ПлановыеРемонтныеРаботыОбъект 		 	= РеквизитФормыВЗначение("ПлановыеРемонтныеРаботы");
	ЗавершенныеРемонтныеРаботыОбъект 		= РеквизитФормыВЗначение("ЗавершенныеРемонтныеРаботы");
	ТаблицаНормативовОбъект 				= РеквизитФормыВЗначение("ТаблицаНормативов");

	МассивСтрокДереваКУдалению = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
		СтрокаДерева = ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДобавитьПодчиненныеСтрокиВМассив(СтрокаДерева, МассивСтрокДереваКУдалению);
	КонецЦикла;
	
 	Для Каждого СтрокаДереваУдаляемая Из МассивСтрокДереваКУдалению Цикл
		
		Если ТипЗнч(СтрокаДереваУдаляемая.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			СтруктураОтбора = Новый Структура("ОбъектРемонта",СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ПлановаяНаработкаОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ПлановаяНаработкаОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			МассивСтрокКУдалению = ФактическаяНаработкаОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ФактическаяНаработкаОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(СтрокаДереваУдаляемая.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			СтруктураОтбора = Новый Структура("ОбъектРемонта, ВидРемонта",СтрокаДереваУдаляемая.ПолучитьРодителя().Ремонты,СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ВидыРемонтныхРаботДляЗамещенияОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ВидыРемонтныхРаботДляЗамещенияОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			МассивСтрокКУдалению = ВидыРемонтныхРаботДляОтсчетаОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ВидыРемонтныхРаботДляОтсчетаОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот",СтрокаДереваУдаляемая.ПолучитьРодителя().Ремонты,СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ПлановыеРемонтныеРаботыОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ПлановыеРемонтныеРаботыОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ОбъектРемонта, ВидРемонтныхРабот",СтрокаДереваУдаляемая.ПолучитьРодителя().Ремонты,СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ЗавершенныеРемонтныеРаботыОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ЗавершенныеРемонтныеРаботыОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ОбъектРемонта, ВидРемонта",СтрокаДереваУдаляемая.ПолучитьРодителя().Ремонты,СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ТаблицаНормативовОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ТаблицаНормативовОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗначениеВРеквизитФормы(ФактическаяНаработкаОбъект, "ФактическаяНаработка");
	ЗначениеВРеквизитФормы(ПлановаяНаработкаОбъект, "ПлановаяНаработка");
	ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляЗамещенияОбъект, "ВидыРемонтныхРаботДляЗамещения");
	ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляОтсчетаОбъект, "ВидыРемонтныхРаботДляОтсчета");
	ЗначениеВРеквизитФормы(ПлановыеРемонтныеРаботыОбъект, "ПлановыеРемонтныеРаботы");
	ЗначениеВРеквизитФормы(ЗавершенныеРемонтныеРаботыОбъект,"ЗавершенныеРемонтныеРаботы");
	ЗначениеВРеквизитФормы(ТаблицаНормативовОбъект,"ТаблицаНормативов");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеСтрокиВМассив(СтрокаДерева, МассивСтрокДереваКУдалению)
	
	Если МассивСтрокДереваКУдалению.Найти(СтрокаДерева) = Неопределено Тогда
		МассивСтрокДереваКУдалению.Добавить(СтрокаДерева);
	КонецЕсли;
	Для Каждого Строка из СтрокаДерева.ПолучитьЭлементы() Цикл
		ДобавитьПодчиненныеСтрокиВМассив(Строка, МассивСтрокДереваКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтрокиДерева()
	
	Если ТипЗнч(Элементы.ДеревоРемонтовНормативы.ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		Для Каждого СтрокаДерева Из Элементы.ДеревоРемонтовНормативы.ТекущиеДанные.ПолучитьЭлементы() Цикл
			ТекущиеДанные = СтрокаДерева;
			ТекущиеДанные.НомерКартинкиСостояний = ИндексКартинкиСостояний(ТекущиеДанные, ЭтаФорма);
		КонецЦикла;	
		
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
		ТекущиеДанные.НомерКартинкиСостояний = ИндексКартинкиСостояний(ТекущиеДанные, ЭтаФорма);
			
	КонецЕсли;
 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинкиСостояний(ТекущиеДанные, Форма)
	
		СтруктураОтбора = Новый Структура("ВидРемонта,ОбъектРемонта", ТекущиеДанные.Ремонты, ТекущиеДанные.ПолучитьРодителя().Ремонты);
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НормативныйРемонт)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособПланирования)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ГрафикРемонтныхРабот)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособВыполнения)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособУчетаДатыОтсчета) 
			ИЛИ НЕ ЗначениеЗаполнено(Форма.ВидыРемонтныхРаботДляОтсчета.НайтиСтроки(СтруктураОтбора)) Тогда
			СтрокаЗаполнена = Ложь;
		Иначе
			СтрокаЗаполнена = Истина;
		КонецЕсли;

		Индекс = 0;
		
		Если СтрокаЗаполнена Тогда
			Если ТекущиеДанные.Источник = "ОбъектРемонта" Тогда
				Индекс = 2;
			ИначеЕсли ТекущиеДанные.Источник = "ТиповойОР" Тогда
				Индекс = 4;
			Иначе
				Индекс = 0;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.Источник = "ОбъектРемонта" Тогда
				Индекс = 3;
			ИначеЕсли ТекущиеДанные.Источник = "ТиповойОР" Тогда
				Индекс = 5;
			Иначе
				Индекс = 1;
			КонецЕсли;
	 	КонецЕсли;
		
		Возврат Индекс;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьРезультатДляППРЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
    
    Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов;
    Элементы.ДеревоРемонтовПланГрафикППР.ТекущаяСтрока = ТекущаяСтрока;

КонецПроцедуры

&НаСервере
Процедура ИзменитьНомераКартинойСостоянийПослеСохранения(ДеревоСПометками)
	
	ДеревоСПометкамиОбъект = ДанныеФормыВЗначение(ДеревоСПометками, Тип("ДеревоЗначений"));
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов");
	СтруктураОтбора = Новый Структура("ОР", 1);
	МассивДляСохраненияВОР = ДеревоСПометкамиОбъект.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	СтруктураОтбора = Новый Структура("РГ", 1);
	МассивДляСохраненияВРГ = ДеревоСПометкамиОбъект.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
	Для Каждого СтрокаСохраняемаяВОР Из МассивДляСохраненияВОР Цикл
		Если ТипЗнч(СтрокаСохраняемаяВОР.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			СтрокаОРДереваРемонтов = ДеревоРемонтовОбъект.Строки.Найти(СтрокаСохраняемаяВОР.Родитель.Ремонты,,Истина);
			СтрокаВРДереваРемонтов = СтрокаОРДереваРемонтов.Строки.Найти(СтрокаСохраняемаяВОР.Ремонты);
			СтрокаВРДереваРемонтов.НомерКартинкиСостояний = 6;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСохраняемаяВРГ Из МассивДляСохраненияВРГ Цикл
		Если ТипЗнч(СтрокаСохраняемаяВРГ.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			СтрокаОРДереваРемонтов = ДеревоРемонтовОбъект.Строки.Найти(СтрокаСохраняемаяВРГ.Родитель.Ремонты,,Истина);
			СтрокаВРДереваРемонтов = СтрокаОРДереваРемонтов.Строки.Найти(СтрокаСохраняемаяВРГ.Ремонты);
			СтрокаВРДереваРемонтов.НомерКартинкиСостояний = 7;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект,"ДеревоРемонтов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыНастроек(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапланированныеРемонты.Очистить();
	
	Для каждого Элем Из Результат.МассивРемонтов Цикл
		НС = ЗапланированныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	
	Нормировать = Результат.Нормировать;
	
	Если Результат.Пересчитать Тогда
		
		МожноПечататьВизуализацию = Ложь;
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СоответствиеЦветов.Очистить();
	Для Каждого СтрокаРемонт Из ЗапланированныеРемонты Цикл
		Если Не СтрокаРемонт.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НС = СоответствиеЦветов.Добавить();
		НС.ВидРемонтныхРабот = СтрокаРемонт.ВидРемонтныхРабот;
		НС.Цвет = СтрокаРемонт.Цвет;
		НС.ЦветТекста = СтрокаРемонт.ЦветТекста;
		НС.Шрифт = СтрокаРемонт.Шрифт;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПолеНаСервере()
	ПолеТД.Очистить();
КонецПроцедуры

&НаКлиенте
Функция НайтиНужнуюТочкуДиаграммыГанта(ОР, ВР)
	
	ТочкаОР = Неопределено;
	ТочкаВР = Неопределено;
	МассивТочек = Новый Массив;
	
	ТочкаОР = НайтиТочку(ОР, ДиаграммаГанта.Точки, массивТочек);
	
	Если ТочкаОР = Неопределено тогда
		Возврат Новый Массив;
	Иначе 
		ТочкаВР = НайтиТочку(ВР, ТочкаОР.Точки, массивТочек);
	КонецЕсли;
	
	Если ТочкаВР = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат массивТочек;
	
КонецФункции

&НаКлиенте
Функция НайтиТочку(Искомое, Точки, МассивТочек)
	
	Для каждого текТочка из Точки Цикл
		Если текТочка.Расшифровка = Искомое Тогда
			МассивТочек.Добавить(текТочка);
			Возврат ТекТочка;
		Иначе
			Результат = НайтиТочку(Искомое, ТекТочка.Точки, МассивТочек);
			Если Результат <> Неопределено Тогда
				МассивТочек.Добавить(текТочка);
				возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуПоложенияВДерево(СтрокиДерева, ПоложениеОР)
		
	СтрокаПоложения = СтрокиДерева.Добавить();
	СтрокаПоложения.Ремонты = ПоложениеОР;
	СтрокаПоложения.Положение = ПоложениеОР;
	СтрокаПоложения.НомерКартинки = ?(ПоложениеОР = ПредставлениеПустогоРодителя(), 4, 2);
	СтрокаПоложения.НомерКартинкиСостояний = 10; // Несуществующий индекс, чтобы картинка не отображалась.
	
	Возврат СтрокаПоложения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуОРВДерево(СтрокаПоложенияОР, ОбъектРемонта, ТиповойОР)
		
	СтрокаОР = СтрокаПоложенияОР.ПолучитьЭлементы().Добавить();
	СтрокаОР.Ремонты = ОбъектРемонта;
	СтрокаОР.ОбъектРемонта = ОбъектРемонта;
	СтрокаОР.НомерКартинки = 0;
	СтрокаОР.НомерКартинкиСостояний = 10; // Несуществующий индекс, чтобы картинка не отображалась.
	Если ТиповойОР = Неопределено Тогда
		СтрокаОР.ТиповойОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ОбъектРемонта, "ТиповойОР");
	Иначе
		СтрокаОР.ТиповойОР = ТиповойОР;
	КонецЕсли;
	
	Возврат СтрокаОР;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВидаРемонтаВДерево(СтрокаОбъектаРемонта, ВидРемонта)
	
	СтрокаВР = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(СтрокаОбъектаРемонта.ПолучитьЭлементы(), "Ремонты", ВидРемонта);
	Если СтрокаВР = Неопределено Тогда
		СтрокаВР = СтрокаОбъектаРемонта.ПолучитьЭлементы().Добавить();
		СтрокаВР.Ремонты = ВидРемонта;
		СтрокаВР.НомерКартинки = 7;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВидаРемонтаВДеревоРасширенная(СтрокаОбъектаРемонта, ВидРемонта, СтрокаНормативов)
	
	СтрокаВР = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(СтрокаОбъектаРемонта.ПолучитьЭлементы(), "Ремонты", ВидРемонта);
	Если СтрокаВР = Неопределено Тогда
		СтрокаВР = СтрокаОбъектаРемонта.ПолучитьЭлементы().Добавить();
		СтрокаВР.Ремонты = ВидРемонта;
		СтрокаВР.НомерКартинки = 7;
		ЗаполнитьЗначенияСвойств(СтрокаВР,СтрокаНормативов); 
		СтрокаОбъектаРемонта.ГрафикРемонтныхРабот = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаНормативов.ОбъектРемонта, "ПлановыйГрафикРаботы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьПоложениеОР(ОбъектРемонта, СтруктураИерархии)
	
	РодительОР = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(ОбъектРемонта, СтруктураИерархии,,Истина,Истина);
	
	Если НЕ ЗначениеЗаполнено(РодительОР) Тогда
		ПоложениеОР = ПредставлениеПустогоРодителя();
	Иначе
		ПоложениеОР = ?(ТипЗнч(РодительОР) = Тип("СправочникСсылка.торо_ОбъектыРемонта"), РодительОР, Строка(РодительОР));
	КонецЕсли;
	
	Возврат ПоложениеОР;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустогоРодителя()
	
	Возврат НСтр("ru='<Объекты и виды ремонта>'");
	
КонецФункции

&НаСервере
Процедура ИнициализацияПустой_БазаДляРасчетаПГППР()
	
	БазаДляРасчетаПГППР = Новый ТаблицаЗначений;
	БазаДляРасчетаПГППР.Колонки.Добавить("ВидРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	БазаДляРасчетаПГППР.Колонки.Добавить("ТиповойОР", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	БазаДляРасчетаПГППР.Колонки.Добавить("НормативныйРемонт", Новый ОписаниеТипов("СправочникСсылка.торо_ИдентификаторыТехКарт"));
	БазаДляРасчетаПГППР.Колонки.Добавить("СпособПланирования", Новый ОписаниеТипов("СправочникСсылка.торо_СпособыПланированияРемонтныхРабот"));
	БазаДляРасчетаПГППР.Колонки.Добавить("ГрафикРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	БазаДляРасчетаПГППР.Колонки.Добавить("СпособВыполнения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	БазаДляРасчетаПГППР.Колонки.Добавить("НеИспользоватьВПланировании", Новый ОписаниеТипов("Булево"));
	БазаДляРасчетаПГППР.Колонки.Добавить("СпособУчетаДатыОтсчета", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот"));
	БазаДляРасчетаПГППР.Колонки.Добавить("НеУчаствуетВПланировании", Новый ОписаниеТипов("Булево"));
	БазаДляРасчетаПГППР.Колонки.Добавить("РазрешитьСокращатьМежремонтныйПериодПриПланировании", Новый ОписаниеТипов("Булево"));
	БазаДляРасчетаПГППР.Колонки.Добавить("НеУчитыватьПриПланированииГрафикРаботыОборудования", Новый ОписаниеТипов("Булево"));
	БазаДляРасчетаПГППР.Колонки.Добавить("НеУчитыватьПриПланированииГрафикРемонтныхРабот", Новый ОписаниеТипов("Булево"));
	БазаДляРасчетаПГППР.Колонки.Добавить("НеУчитыватьПродолжительность", Новый ОписаниеТипов("Булево"));
	БазаДляРасчетаПГППР.Колонки.Добавить("ИспользоватьКоэффициентыРемонтныхОсобенностей", Новый ОписаниеТипов("Булево"));
	БазаДляРасчетаПГППР.Колонки.Добавить("УчитыватьПростоиОборудования", Новый ОписаниеТипов("Булево"));
	БазаДляРасчетаПГППР.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	БазаДляРасчетаПГППР.Колонки.Добавить("Источник", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	БазаДляРасчетаПГППР.Колонки.Добавить("ТиповойОР1", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	БазаДляРасчетаПГППР.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Любой)));
	
	БазаДляРасчетаПГППР.Индексы.Добавить("ОбъектРемонта,ВидРемонта");
КонецПроцедуры

&НаСервере
Процедура СохранитьМеждуСервернымиВызовами_БазаДляРасчетаПГППР()
	
	Если ЗначениеЗаполнено(АдресБазаДляРасчетаПГППР) Тогда
		АдресКудаПомещаем = АдресБазаДляРасчетаПГППР;
		
		Старая = ПолучитьИзВременногоХранилища(АдресБазаДляРасчетаПГППР).Скопировать();
		Для каждого СтараяСтрока Из Старая Цикл
			Если БазаДляРасчетаПГППР.НайтиСтроки(Новый Структура("ВидРемонта, ОбъектРемонта", СтараяСтрока.ВидРемонта, СтараяСтрока.ОбъектРемонта)).Количество() = 0 Тогда
				НоваяСтрока = БазаДляРасчетаПГППР.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока);
			КонецЕсли; 
		КонецЦикла; 
		
	Иначе
		АдресКудаПомещаем = УникальныйИдентификатор; // Привязываем к форме
	КонецЕсли;
	
	АдресБазаДляРасчетаПГППР = ПоместитьВоВременноеХранилище(БазаДляРасчетаПГППР, АдресКудаПомещаем);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПриВызове_БазаДляРасчетаПГППР()
	
	Если БазаДляРасчетаПГППР = Неопределено Тогда
		Если ЗначениеЗаполнено(АдресБазаДляРасчетаПГППР) Тогда
			БазаДляРасчетаПГППР = ПолучитьИзВременногоХранилища(АдресБазаДляРасчетаПГППР);
		Иначе
			ИнициализацияПустой_БазаДляРасчетаПГППР();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Клиент Тогда
	УровеньОрВДереве = 2;
	УровеньПоложенияВДереве = 1;
#КонецЕсли
