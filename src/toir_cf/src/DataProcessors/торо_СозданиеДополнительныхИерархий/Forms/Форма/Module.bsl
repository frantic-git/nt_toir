
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	
	Элементы.ДеревоИерархии.ПутьКДаннымКартинкиСтроки = "ДеревоИерархии.Картинка";
	Элементы.ДеревоНовойИерархии.ПутьКДаннымКартинкиСтроки = "ДеревоНовойИерархии.Картинка";
	Если ИспользоватьКартинкиТОР Тогда 
		Элементы.ДеревоИерархии.ПутьКДаннымКартинкиСтроки = "ДеревоИерархии.КартинкаОтображаемая";
		Элементы.ДеревоНовойИерархии.ПутьКДаннымКартинкиСтроки = "ДеревоНовойИерархии.КартинкаОтображаемая";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаПометкаУдаленияОР" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОбИзмененииПометкиУдаленияОбъектаРемонта(ЭтаФорма, Параметр, "ДеревоИерархии", СтруктураПараметровИерархии, ПустойРодитель);
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОбИзмененииПометкиУдаленияОбъектаРемонта(ЭтаФорма, Параметр, "ДеревоНовойИерархии", СтруктураПараметровИерархииНовая, ПустойРодительНовая);
	ИначеЕсли ИмяСобытия = "ЗаписанОбъектРемонта" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОЗаписиОбъектаРемонта(ЭтаФорма, Параметр, "ДеревоИерархии", СтруктураПараметровИерархии, ПустойРодитель);
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОЗаписиОбъектаРемонта(ЭтаФорма, Параметр, "ДеревоНовойИерархии", СтруктураПараметровИерархииНовая, ПустойРодительНовая);
	ИначеЕсли ИмяСобытия = "ИзмененаСтруктураИерархииОР" Тогда
		Если Параметр = НоваяИерархия Тогда
			Если Элементы.ПроверкаПолноты.Пометка Тогда
				ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
				Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
				Элементы.ДеревоНовойИерархии.Развернуть(ДеревоНовойИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
			КонецЕсли;
			ОбновлениеНовогоДерева();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИерархияПриИзменении(Элемент)
	
	СтруктураПараметровИерархии = торо_РаботаСИерархией20.ПолучитьПараметрыИерархии(Иерархия);
	
	Если НЕ ЗначениеЗаполнено(Иерархия) Тогда
		ДеревоИерархии.ПолучитьЭлементы().Очистить();
		УстановитьВидимость();
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровИерархии.КонечныеЭлементыВДереве = Истина;
	ПустойРодитель = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(СтруктураПараметровИерархии);
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(ДеревоИерархии, СтруктураПараметровИерархии, ПустойРодитель);
	ДеревоПередРазворачиваниемНаСервере(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), "ДеревоИерархии");
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
	КонецЕсли;
	
	Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	УстановитьВидимость();
		
КонецПроцедуры

&НаКлиенте
Процедура НоваяИерархияПриИзменении(Элемент)
	
	СтруктураПараметровИерархииНовая = торо_РаботаСИерархией20.ПолучитьПараметрыИерархии(НоваяИерархия);
	ТекРодительДляДобавления = Неопределено;
	РазвернутыеУзлы.Очистить();
	
	Если НЕ ЗначениеЗаполнено(НоваяИерархия) Тогда
		ДеревоНовойИерархии.ПолучитьЭлементы().Очистить();
		УстановитьВидимость();
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровИерархииНовая.КонечныеЭлементыВДереве = Истина;
	ПустойРодительНовая = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(СтруктураПараметровИерархииНовая);
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(ДеревоНовойИерархии, СтруктураПараметровИерархииНовая, ПустойРодительНовая);
	ДеревоПередРазворачиваниемНаСервере(ДеревоНовойИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), "ДеревоНовойИерархии");
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
		Если ДеревоИерархии.ПолучитьЭлементы().Количество() > 0 Тогда
			Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДеревоНовойИерархии.Развернуть(ДеревоНовойИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	УстановитьВидимость();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоИерархии

&НаКлиенте
Процедура ДеревоИерархииПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекДанные = ДеревоИерархии.НайтиПоИдентификатору(Строка);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_РаботаСИерархией20Клиент.ДеревоПередРазворачиванием(ДеревоИерархии, Строка, СтруктураПараметровИерархии);
	ДеревоПередРазворачиваниемНаСервере(Строка, "ДеревоИерархии");
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		
		СоответствиеСущестующихВНовИерахииОР = ПолучитьОРСущестующиеВНовойИерархии();
		Для каждого Подчиненный Из ТекДанные.ПолучитьЭлементы() Цикл
			Подчиненный.Подсвечивать = (СоответствиеСущестующихВНовИерахииОР[Подчиненный.Ссылка] = Неопределено);
			Подчиненный.Выбран = ТекДанные.Выбран;
			
			Для каждого ПодчиненныйВторогоУровня Из Подчиненный.ПолучитьЭлементы() Цикл
				ПодчиненныйВторогоУровня.Подсвечивать = (СоответствиеСущестующихВНовИерахииОР[ПодчиненныйВторогоУровня.Ссылка] = Неопределено);
				ПодчиненныйВторогоУровня.Выбран = ТекДанные.Выбран;
			КонецЦикла;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма, Иерархия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииВыбранПриИзменении(Элемент)
	
	РасставитьГалочкиВнизПоДереву(Элементы.ДеревоИерархии.ТекущиеДанные, Элементы.ДеревоИерархии.ТекущиеДанные.Выбран);
	
	Видимость = ОпределитьВидимостьКнопок();
	Элементы.ПеренестиОРСПодчиненными.Доступность = Видимость;
	Элементы.ПеренестиОР.Доступность              = Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНовойИерархии

&НаКлиенте
Процедура ДеревоНовойИерархииПередРазворачиванием(Элемент, Строка, Отказ)
	
	торо_РаботаСИерархией20Клиент.ДеревоПередРазворачиванием(ДеревоНовойИерархии, Строка, СтруктураПараметровИерархииНовая);
	ДеревоПередРазворачиваниемНаСервере(Строка, "ДеревоНовойИерархии");
	ТекСтрока = ДеревоНовойИерархии.НайтиПоИдентификатору(Строка);
	Если ТекСтрока <> Неопределено И РазвернутыеУзлы.НайтиПоЗначению(ТекСтрока.Ссылка) = Неопределено Тогда 
		РазвернутыеУзлы.Добавить(ТекСтрока.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНовойИерархииПередСворачиванием(Элемент, Строка, Отказ)
	ТекСтрока = ДеревоНовойИерархии.НайтиПоИдентификатору(Строка);
	Если ТекСтрока <> Неопределено Тогда 
		ЭлементСписка = РазвернутыеУзлы.НайтиПоЗначению(ТекСтрока.Ссылка);
		Если ЭлементСписка <> Неопределено Тогда 
			РазвернутыеУзлы.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНовойИерархииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма, НоваяИерархия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНовойИерархииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	Если НЕ ЗначениеЗаполнено(НоваяИерархия) Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения действия необходимо выбрать новую иерархию!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
		
		РодительИерархии = ?(Элементы.ДеревоНовойИерархии.ТекущиеДанные = Неопределено, Неопределено, Элементы.ДеревоНовойИерархии.ТекущиеДанные.Ссылка);
		ПараметрыФормы = Новый Структура("ЭтоГруппа, СтруктураИерархии, РодительИерархии", Истина, НоваяИерархия, РодительИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаГруппы", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтарИерархию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Иерархия) Тогда
		Возврат;
	КонецЕсли;
	
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(ДеревоИерархии, СтруктураПараметровИерархии, ПустойРодитель);
	Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если НЕ ЗначениеЗаполнено(НоваяИерархия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеНовогоДерева(Истина);
	 
	ТекРодительДляДобавления = Неопределено;
	РазвернутыеУзлы.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПолноты(Команда)
	
	Элементы.ПроверкаПолноты.Пометка = НЕ Элементы.ПроверкаПолноты.Пометка;
	ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() > 0 Тогда 
		РасставитьГалочкиВнизПоДереву(ЭлементыДерева[0], Истина);
	КонецЕсли;
	
	Видимость = ОпределитьВидимостьКнопок();
	Элементы.ПеренестиОРСПодчиненными.Доступность = Видимость;
	Элементы.ПеренестиОР.Доступность              = Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыделения(Команда)
	
	ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() > 0 Тогда 
		РасставитьГалочкиВнизПоДереву(ЭлементыДерева[0], Ложь);
	КонецЕсли;
	
	Элементы.ПеренестиОРСПодчиненными.Доступность = Ложь;
	Элементы.ПеренестиОР.Доступность              = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОР(Команда)
	
	Если НЕ ЗначениеЗаполнено(НоваяИерархия) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать новую иерархию.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоНовойИерархии.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано место переноса в новой иерархии! Активизируйте нужную строку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РодительВНовойИерархии = ТекДанные.Ссылка;
	МассивВыбранныхОР = ПолучитьМассивВыбранныхЗначений();
	ТекРодительДляДобавления = РодительВНовойИерархии;
	торо_РаботаСИерархией20Клиент.ДобавитьМассивОРВИерархиюСПроверкой(НоваяИерархия, МассивВыбранныхОР, РодительВНовойИерархии, Иерархия, Неопределено, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОРСПодчиненными(Команда)
	
	Если НЕ ЗначениеЗаполнено(НоваяИерархия) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать новую иерархию.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоНовойИерархии.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано место переноса в новой иерархии! Активизируйте нужную строку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РодительВНовойИерархии = ТекДанные.Ссылка;
	МассивВыбранныхОР = ПолучитьМассивВыбранныхЗначений(Истина);
	ДанныеДляДобавления = ПодготовитьДанныеДляДобавления(МассивВыбранныхОР);
	
	МассивОРСПодчиненными = ДанныеДляДобавления.МассивОРСПодчиненными;
	СоответствиеОРСПодчиненными = ДанныеДляДобавления.СоответствиеОРСПодчиненными;
	
	Если торо_РаботаСИерархией20.ДобавлениеПриведетКЗацикливанию(МассивОРСПодчиненными, НоваяИерархия, РодительВНовойИерархии) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеОРСуществующихВТекИеррархии = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОРСПодчиненными, НоваяИерархия,,Истина,Истина);
	
	Если СоответствиеОРСуществующихВТекИеррархии.Количество() > 0 Тогда
		ДопПараметры = Новый Структура("СоответствиеОРСПодчиненными, СоответствиеОРСуществующихВТекИеррархии, РодительВНовойИерархии", 
									СоответствиеОРСПодчиненными, СоответствиеОРСуществующихВТекИеррархии, РодительВНовойИерархии);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиОРСПодчиненнымиПослеВопроса", ЭтотОбъект, ДопПараметры);
		ПараметрыФормы = Новый Структура("МассивОР, ТекСтруктураИерархии, СоответствиеОРСуществующихВТекИеррархии", МассивОРСПодчиненными, НоваяИерархия, СоответствиеОРСуществующихВТекИеррархии);
		ОткрытьФорму("Обработка.торо_СозданиеДополнительныхИерархий.Форма.ФормаДерева", ПараметрыФормы, ЭтаФорма, ЭтаФорма,,,ОписаниеОповещения);
	Иначе
		ПеренестиОРСПодчиненнымиЗавершение(СоответствиеОРСПодчиненными, СоответствиеОРСуществующихВТекИеррархии, РодительВНовойИерархии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОРСПодчиненнымиПослеВопроса(МассивОРИзменитьПоложение, ДополнительныеПараметры) Экспорт
	
	Если МассивОРИзменитьПоложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеОРСПодчиненными = ДополнительныеПараметры.СоответствиеОРСПодчиненными;
	СоответствиеОРСуществующихВТекИеррархии = ДополнительныеПараметры.СоответствиеОРСуществующихВТекИеррархии;
	РодительВНовойИерархии = ДополнительныеПараметры.РодительВНовойИерархии;
	
	СоответствиеОРСПодчиненнымиОтбор = Новый Соответствие;
	Для каждого КлючИЗначение из СоответствиеОРСПодчиненными Цикл
		МассивВыбранныхОР = Новый массив;
		Для каждого ОР из КлючИЗначение.Значение Цикл
			СуществующийРодитель = СоответствиеОРСуществующихВТекИеррархии[ОР];
			Если СуществующийРодитель = Неопределено Тогда
				МассивВыбранныхОР.Добавить(ОР);
			Иначе
				Если МассивОРИзменитьПоложение.Найти(ОР) <> Неопределено Тогда
					МассивВыбранныхОР.Добавить(ОР);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если МассивВыбранныхОР.Количество() > 0 Тогда
			СоответствиеОРСПодчиненнымиОтбор.Вставить(КлючИЗначение.Ключ, МассивВыбранныхОР);
		КонецЕсли;
	КонецЦикла;
	
	ПеренестиОРСПодчиненнымиЗавершение(СоответствиеОРСПодчиненнымиОтбор, СоответствиеОРСуществующихВТекИеррархии, РодительВНовойИерархии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОРСПодчиненнымиЗавершение(СоответствиеОРСПодчиненными, СоответствиеОРСуществующихВТекИеррархии, РодительВНовойИерархии)
	
	Для каждого КлючИЗначение из СоответствиеОРСПодчиненными Цикл
		МассивОР = КлючИЗначение.Значение;
		РодительИсточник = КлючИЗначение.Ключ;
		торо_РаботаСИерархией20.ДобавитьВИерархиюНаСервере(МассивОР, НоваяИерархия, РодительВНовойИерархии, СоответствиеОРСуществующихВТекИеррархии, Иерархия, РодительИсточник, Ложь, Ложь);
	КонецЦикла;
	
	ТекРодительДляДобавления = РодительВНовойИерархии;
	Оповестить("ИзмененаСтруктураИерархииОР", НоваяИерархия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура УстановитьВидимость()
	Видимость = ДеревоИерархии.ПолучитьЭлементы().Количество() > 0;
	Элементы.ВыделитьВсе.Доступность = Видимость;
	Элементы.ОтменаВыделения.Доступность = Видимость;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьВидимостьКнопок()
	
	МассивСтрокДерева = Новый массив;
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ДеревоИерархии.ПолучитьЭлементы());
	
	МассивСтрокДЗ = Новый Массив;
	ДобавленоСтрок = 0;
	Для каждого Строка из МассивСтрокДерева Цикл
		Если Строка.Выбран Тогда
			МассивСтрокДЗ.Добавить(Строка);
			ДобавленоСтрок = ДобавленоСтрок + 1;
		КонецЕсли;
		Если ДобавленоСтрок > 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДЗ.Количество() > 1 Тогда
		Возврат Истина;
	ИначеЕсли МассивСтрокДЗ.Количество() = 1 
		И ТипЗнч(МассивСтрокДЗ[0].Ссылка) <> Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере 
Процедура РасставитьВыделение(СтрокиДерева, СоответствиеСуществующих)
	
	Для каждого текСтрока из СтрокиДерева Цикл
		текСтрока.Подсвечивать = (СоответствиеСуществующих[текСтрока.Ссылка] = Неопределено);
		РасставитьВыделение(ТекСтрока.ПолучитьЭлементы(), СоответствиеСуществующих);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура РасставитьГалочкиВнизПоДереву(Корень, ЗначениеГалочки)
	
	Строки = Корень.ПолучитьЭлементы();
	Для каждого текСтрока из Строки Цикл
		текСтрока.Выбран = ЗначениеГалочки;
		РасставитьГалочкиВнизПоДереву(ТекСтрока, ЗначениеГалочки);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПроверкаПолнотыНаСервере(Пометка)
	
	СоответствиеСуществующих = ПолучитьОРСущестующиеВНовойИерархии();
	РасставитьВыделение(ДеревоИерархии.ПолучитьЭлементы(), СоответствиеСуществующих);
	
	УсловноеОформление.Элементы.Очистить();
	Если Пометка Тогда
		ЭлемУслОформ = УсловноеОформление.Элементы.Добавить();
		ЭлемУслОформ.Использование = Пометка;
		
		ОтборУслОформления = ЭлемУслОформ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборУслОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборУслОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоИерархии.Подсвечивать");
		ОтборУслОформления.ПравоеЗначение = Истина;
		ОтборУслОформления.Использование = Истина;
		
		ОформлениеУслОформления = ЭлемУслОформ.Оформление.Элементы[0];
		ОформлениеУслОформления.Использование = Истина;
		ОформлениеУслОформления.Значение = Новый Цвет(153,204,255);
		
		ПолеУслОформления = ЭлемУслОформ.Поля.Элементы.Добавить();
		ПолеУслОформления.Использование = Истина;
		ПолеУслОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоИерархииСсылка");
		
		ПолеУслОформления = ЭлемУслОформ.Поля.Элементы.Добавить();
		ПолеУслОформления.Использование = Истина;
		ПолеУслОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоИерархииНаименование");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОРСущестующиеВНовойИерархии()
	
	СписокСущестующихВНовИерахииОР = Новый Соответствие;
	
	Если НЕ ЗначениеЗаполнено(Иерархия) ИЛИ НЕ ЗначениеЗаполнено(НоваяИерархия) Тогда
		Возврат СписокСущестующихВНовИерахииОР;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВременнуюТаблицуИерархии(Запрос.МенеджерВременныхТаблиц, СтруктураПараметровИерархии, "ТабСтаройИерархии");
	СоздатьВременнуюТаблицуИерархии(Запрос.МенеджерВременныхТаблиц, СтруктураПараметровИерархииНовая, "ТабНовойИерархии");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабСтаройИерархии.ИсходныйСправочник КАК ОбъектСтаройИерархии,
	|	ТабСтаройИерархии.ОбъектИерархии КАК ОбъектНовойИерархии
	|ИЗ
	|	ТабСтаройИерархии КАК ТабСтаройИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабНовойИерархии КАК ТабНовойИерархии
	|		ПО ТабСтаройИерархии.ОбъектИерархии = ТабНовойИерархии.ОбъектИерархии
	|ГДЕ
	|	НЕ ТабНовойИерархии.ОбъектИерархии ЕСТЬ NULL";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокСущестующихВНовИерахииОР.Вставить(Выборка.ОбъектСтаройИерархии, Выборка.ОбъектНовойИерархии);
	КонецЦикла;
	
	Возврат СписокСущестующихВНовИерахииОР;

КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьВременнуюТаблицуИерархии(МенеджерВТ, СтруктураПараметровИерархии, ИмяВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически  Тогда
		
		Запрос.Текст = 
		СтрЗаменить("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		            |	табСправочник.Ссылка КАК ИсходныйСправочник,
						|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии
		            |ПОМЕСТИТЬ ВТ_Группы
		            |ИЗ
		            |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
						|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК табСправочник
						|		ПО торо_ОбъектыРемонта.ЭтоГруппа = ИСТИНА
						|			И торо_ОбъектыРемонта.Наименование = табСправочник.Наименование
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
		            |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		            |	торо_ОбъектыРемонта.Ссылка КАК ИсходныйСправочник,
						|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии
		            |ПОМЕСТИТЬ ВТ_Иерархия
		            |ИЗ
		            |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		            |ГДЕ
		            |	НЕ торо_ОбъектыРемонта.ЭтоГруппа
		            |
		            |ОБЪЕДИНИТЬ ВСЕ
		            |
		            |ВЫБРАТЬ
		            |	ВТ_Группы.ИсходныйСправочник,
						|	ВТ_Группы.ОбъектИерархии
		            |ИЗ
		            |	ВТ_Группы КАК ВТ_Группы
		            |
		            |ИНДЕКСИРОВАТЬ ПО
		            |	ОбъектИерархии",
						"ВТ_Иерархия", ИмяВТ);

		
	ИначеЕсли СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		СтрЗаменить("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ИсходныйСправочник,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии
		|ПОМЕСТИТЬ ВТ_Иерархия
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектИерархии",
		"ВТ_Иерархия", ИмяВТ);
		
	Иначе
		
		Запрос.Текст = 
		СтрЗаменить("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ИсходныйСправочник,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии
		|ПОМЕСТИТЬ ВТ_Иерархия
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектИерархии",
		"ВТ_Иерархия", ИмяВТ);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.ТекСтруктураИерархии);
	Запрос.Выполнить();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыбранныхЗначений(ТолькоВерхниеПоВеткам = Ложь)
	
	МассивСсылок = Новый Массив;
	РекурсивноПолучитьВыбранныеЗначения(ДеревоИерархии.ПолучитьЭлементы(), МассивСсылок, ТолькоВерхниеПоВеткам);

	Возврат МассивСсылок;	
	
КонецФункции

&НаКлиенте
Процедура РекурсивноПолучитьВыбранныеЗначения(СтрокиДерева, МассивСсылок, ТолькоВерхниеПоВеткам)
	
	Для каждого Строка из СтрокиДерева Цикл
		Если Строка.Выбран И Строка.Ссылка <> Неопределено Тогда
			МассивСсылок.Добавить(Строка.Ссылка);
			Если НЕ ТолькоВерхниеПоВеткам Тогда
				РекурсивноПолучитьВыбранныеЗначения(Строка.ПолучитьЭлементы(), МассивСсылок, ТолькоВерхниеПоВеткам);
			КонецЕсли;
		Иначе
			РекурсивноПолучитьВыбранныеЗначения(Строка.ПолучитьЭлементы(), МассивСсылок, ТолькоВерхниеПоВеткам);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляДобавления(МассивВыбранныхОР)
	
	МассивОРСПодчиненными = Новый Массив;
	СоответствиеОРСПодчиненными = Новый Соответствие;
	
	ТаблицаИерархии = торо_РаботаСИерархией20.ПолучитьТаблицуИерархии(Иерархия);
	ТаблицаИерархии.Индексы.Добавить("ОбъектИерархии");
	ТаблицаИерархии.Индексы.Добавить("РодительИерархии");
	
	Для каждого ОбъектРемонта из МассивВыбранныхОР Цикл
		МассивПодчиненных = Новый Массив;
		МассивПодчиненных.Добавить(ОбъектРемонта);
		торо_РаботаСИерархией20.ДополнитьМассивПодчиненнымиОРПоТаблицеИерархии(МассивПодчиненных, ОбъектРемонта, ТаблицаИерархии,"ОбъектИерархии","РодительИерархии", Ложь); 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОРСПодчиненными, МассивПодчиненных);
		СоответствиеОРСПодчиненными.Вставить(ОбъектРемонта, МассивПодчиненных);
	КонецЦикла;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивОРСПодчиненными", МассивОРСПодчиненными);
	СтруктураВозврата.Вставить("СоответствиеОРСПодчиненными", СоответствиеОРСПодчиненными);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ДеревоПередРазворачиваниемНаСервере(Строка, ИмяДерева)
	Если ИспользоватьКартинкиТОР Тогда
		торо_РаботаСИерархией20.ОбновитьКартинкиЭлементовДереваНаСервере(ЭтаФорма[ИмяДерева], Строка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьИРазвернутьРодителя(Строка) 
	ТекУровень = Строка.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из ТекУровень Цикл
		ИДТекСтроки = СтрокаДерева.ПолучитьИдентификатор();
		Если РазвернутыеУзлы.НайтиПоЗначению(СтрокаДерева.Ссылка) <> Неопределено Тогда
			Элементы.ДеревоНовойИерархии.Развернуть(ИДТекСтроки);
		ИначеЕсли Элементы.ДеревоНовойИерархии.Развернут(ИДТекСтроки) Тогда 
			Элементы.ДеревоИерархии.Свернуть(ИДТекСтроки);
		КонецЕсли;
		Если СтрокаДерева.Ссылка = ТекРодительДляДобавления Тогда
			Элементы.ДеревоНовойИерархии.ТекущаяСтрока = ИДТекСтроки;
			Если НЕ Элементы.ДеревоНовойИерархии.Развернут(ИДТекСтроки) Тогда 
				Элементы.ДеревоНовойИерархии.Развернуть(ИДТекСтроки);
			КонецЕсли;	
		КонецЕсли;		
		ВосстановитьИРазвернутьРодителя(СтрокаДерева);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеНовогоДерева(ИзКоманды = Ложь)
	торо_РаботаСИерархией20КлиентСервер.НачатьЗаполнениеДереваИерархии(ДеревоНовойИерархии, СтруктураПараметровИерархииНовая, ПустойРодительНовая);
	Элементы.ДеревоНовойИерархии.Развернуть(ДеревоНовойИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	Если ЗначениеЗаполнено(ТекРодительДляДобавления) И НЕ ИзКоманды Тогда
		ВосстановитьИРазвернутьРодителя(ДеревоНовойИерархии);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
