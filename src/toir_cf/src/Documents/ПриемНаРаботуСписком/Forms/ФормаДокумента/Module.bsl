#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПриПолученииДанныхНаСервере(Объект);
		ЗаполнитьДанныеФормыПоОрганизации();
		
	КонецЕсли;
	
	ОрганизацияПредыдущий = Объект.Организация;
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Для каждого Сотрудник Из Объект.Сотрудники Цикл
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Сотрудник", Сотрудник);
		Оповестить("ДокументПриемНаРаботуПослеЗаписи", ПараметрыОповещения, ЭтаФорма);
	КонецЦикла;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Проведен", ЭтаФорма.Объект.Проведен);
	ПараметрыОповещения.Вставить("ПомеченНаУдаление", ЭтаФорма.Объект.ПометкаУдаления);
	ПараметрыОповещения.Вставить("Результат", ЭтаФорма.Объект.Ссылка);
	ПараметрыОповещения.Вставить("Ответственный", ЭтаФорма.Объект.Ответственный);
	ПараметрыОповещения.Вставить("ДатаДокумента", ЭтаФорма.Объект.Дата);
	ПараметрыОповещения.Вставить("НомерДокумента", ЭтаФорма.Объект.Номер);
	Оповестить("ПослеЗаписиОбъектаСвязанногоСПереводомКДругомуРаботодателю", ПараметрыОповещения, ЭтаФорма);
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		ОрганизацияПредыдущий = Объект.Организация;
	    ОрганизацияПриИзмененииНаСервере();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Редактирование организации приведет в очистке табличной части документа.
					|Продолжить редактирование?";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Руководитель) Тогда 
		Объект.ДолжностьРуководителя = ПолучитьДолжностьРуководителя(Объект.Руководитель, Объект.Дата);
	Иначе
		Объект.ДолжностьРуководителя = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьДанныеФормыПоОрганизации();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодобратьСотрудников(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Организация не заполнена",, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ПодборСотрудникаВФормеДокументаПриемНаРаботуСписком");

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныНепринятые", Истина);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ГоловнаяОрганизация", Объект.Организация);
	
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		,
		,
		Объект.Дата,
		Истина,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	РедактироватьСтроку(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Организация не заполнена",, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Сотрудники.Добавить();
	ИнициализироватьНовуюСтрокуСотрудников(ЭтотОбъект, НоваяСтрока);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	Элементы.Сотрудники.ТекущаяСтрока = ИдентификаторСтроки;
	РедактироватьСтроку(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	МассивИдентификаторовСтрокСотрудников = Новый Массив;
	Для Каждого ИдентификаторВыделеннойСтроки Из Элементы.Сотрудники.ВыделенныеСтроки Цикл
		ДанныеВыделеннойСтроки = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если ДанныеВыделеннойСтроки <> Неопределено Тогда
			МассивИдентификаторовСтрокСотрудников.Добавить(ДанныеВыделеннойСтроки.ИдентификаторСтрокиСотрудника);
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивИдентификаторовСтрокСотрудников.Количество() > 0 Тогда
		ИдентификаторыСтрокУдаляемыхСотрудников = Новый ФиксированныйМассив(МассивИдентификаторовСтрокСотрудников);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	
	Если ИдентификаторыСтрокУдаляемыхСотрудников <> Неопределено Тогда
		СотрудникиПослеУдаленияНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Нет Тогда
	    Объект.Организация = ОрганизацияПредыдущий;
		Возврат;
	КонецЕсли;
	
	ОрганизацияПредыдущий = Объект.Организация;
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СотрудникиПослеУдаленияНаСервере()
	
	СтруктураОписания = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным("Документ.ПриемНаРаботу");
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УдалитьДанныеСотрудниковСписочногоДокумента(
		Объект, СтруктураОписания, ИдентификаторыСтрокУдаляемыхСотрудников);
	
	ИдентификаторыСтрокУдаляемыхСотрудников = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтроку(ИдентификаторСтроки)
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьРасшифровку", ЭтотОбъект);
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыРедактированияСтрокиДокумента(ИдентификаторСтроки);
	
	НомераДоговоровТекущегоДокумента = Новый Соответствие;
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		
		Если ЗначениеЗаполнено(СтрокаСотрудника.ТрудовойДоговорНомер) И СтрокаСотрудника <> Элементы.Сотрудники.ТекущиеДанные Тогда
			
			Если ЗначениеЗаполнено(СтрокаСотрудника.ТрудовойДоговорДата) Тогда
				ГодНомера = Год(СтрокаСотрудника.ТрудовойДоговорДата);
			Иначе
				ГодНомера = Год(СтрокаСотрудника.ДатаПриема);
			КонецЕсли;
			
			НомераДоговоров = НомераДоговоровТекущегоДокумента.Получить(ГодНомера);
			Если НомераДоговоров = Неопределено Тогда
				НомераДоговоров = Новый Массив;
				НомераДоговоровТекущегоДокумента.Вставить(ГодНомера, НомераДоговоров);
			КонецЕсли;
			
			НомераДоговоров.Добавить(СтрокаСотрудника.ТрудовойДоговорНомер);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомераДоговоровТекущегоДокумента.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить("НомераДоговоровТекущегоДокумента", Новый ФиксированноеСоответствие(НомераДоговоровТекущегоДокумента));
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.РедактироватьСтрокуСписочногоДокумента(
		ЭтотОбъект, "Документ.ПриемНаРаботу", Оповещение, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасшифровку(Результат, ДополнительныеУсловия) Экспорт
	
	УстановитьРасшифровкуСтроки(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	ДанныеВРеквизиты();
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	МаксимальныйИдентификаторСтрокиСотрудника = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(
		Объект.Сотрудники, "ИдентификаторСтрокиСотрудника");
			
	ЗаполнитьРасшифровкиСотрудников();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкиСотрудников()
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		УстановитьРасшифровкуСтроки(СтрокаСотрудника.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасшифровкуСтроки(ИдентификаторСтрокиСотрудника)
	
	Если ИдентификаторСтрокиСотрудника = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрокиСотрудника);
	
	СтрокаСотрудника.КоличествоСтавокПредставление = КадровыйУчетКлиентСервер.ПредставлениеКоличестваСтавок(СтрокаСотрудника.КоличествоСтавок);
	
	Расшифровка = РасшифровкаСтрокиСотрудника(ИдентификаторСтрокиСотрудника);
	СтрокаСотрудника.Расшифровка = Расшифровка;
	
КонецПроцедуры

&НаСервере
Функция РасшифровкаСтрокиСотрудника(ИдентификаторСтрокиСотрудника)
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрокиСотрудника);
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиСотрудника", СтрокаСотрудника.ИдентификаторСтрокиСотрудника);
	ТекстРасшифровки = "";
	
	Если ПустаяСтрока(ТекстРасшифровки) Тогда
		ТекстРасшифровки = НСтр("ru = 'Нет сведений о приеме на работу';
								|en = 'No information about hiring'");
	КонецЕсли; 
	
	Возврат ТекстРасшифровки;
	
КонецФункции

&НаСервере
Функция ПараметрыОткрытияФормыРедактированияСтрокиДокумента(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПараметрыОткрытия = ЗарплатаКадрыРасширенный.ПараметрыОткрытияФормыРедактированияСтрокиДокумента(Объект, ТекущиеДанные, "Документ.ПриемНаРаботу");
	ПараметрыОткрытия.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников());
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуМногосотрудниковогоДокумента(Результат) Экспорт
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Результат <> Неопределено Тогда
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УдалитьДанныеСотрудниковСписочногоДокумента(Объект, Результат, ТекущиеДанные.ИдентификаторСтрокиСотрудника);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			Объект.Сотрудники.Удалить(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиОбработкаВыбораНаСервере(ВыбранныеСотрудники)

	Если ТипЗнч(ВыбранныеСотрудники) = Тип("Массив") Тогда
		СписокСотрудников = ВыбранныеСотрудники;
	Иначе
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеСотрудники);
	КонецЕсли;
	
	ДобавляемыеСотрудники = Новый Массив;
	Для каждого Сотрудник Из СписокСотрудников Цикл
		
		СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ДобавляемыеСотрудники.Добавить(Сотрудник);
		
	КонецЦикла; 
	
	
	Если ДобавляемыеСотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДобавляемыйСотрудник Из ДобавляемыеСотрудники Цикл
		
		НоваяСтрокаСотрудников = Объект.Сотрудники.Добавить();
		ИнициализироватьНовуюСтрокуСотрудников(ЭтотОбъект, НоваяСтрокаСотрудников);
		НоваяСтрокаСотрудников.Сотрудник = ДобавляемыйСотрудник;
		НоваяСтрокаСотрудников.ДатаПриема = ТекущаяДата();
		НоваяСтрокаСотрудников.КоличествоСтавок = 1;
		НоваяСтрокаСотрудников.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
		НоваяСтрокаСотрудников.ГрафикРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойГрафикРаботы");
		НоваяСтрокаСотрудников.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение");
		
		УстановитьРасшифровкуСтроки(НоваяСтрокаСотрудников.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	Объект.Сотрудники.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи(РезультатВопроса, Команда) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Записать(ПараметрыЗаписи);
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьНовуюСтрокуСотрудников(Форма, НоваяСтрокаСотрудников)
	
	Форма.МаксимальныйИдентификаторСтрокиСотрудника = Форма.МаксимальныйИдентификаторСтрокиСотрудника + 1;
	
	НоваяСтрокаСотрудников.ИдентификаторСтрокиСотрудника = Форма.МаксимальныйИдентификаторСтрокиСотрудника;
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьДолжностьРуководителя (Руководитель, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность
				   |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Дата, ФизическоеЛицо = &Руководитель) КАК КадроваяИсторияСотрудниковСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Руководитель", Руководитель);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Должность = Выборка.Должность;
	КонецЕсли;
	
	Возврат Должность;
		
КонецФункции

#КонецОбласти
