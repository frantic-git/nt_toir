#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем БезусловнаяЗапись Экспорт;	// Отключает проверки при записи документа
перем СтруктураДанных Экспорт;  // Структура, хранящая данные для работы с уведомлениями.

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("Структура") И ТипЗнч(Основание.Основание) = Тип("Соответствие") Тогда
		торо_ЗаполнениеДокументов20.ЗаполнитьШапкуДокумента(Основание.Основание, ЭтотОбъект);	
		торо_ЗаполнениеДокументов20.ЗаполнитьДокументНаОсновании(Основание.Основание, ЭтотОбъект);
	Иначе
		торо_ЗаполнениеДокументов20.ЗаполнениеНаОсновании(Основание, ЭтотОбъект, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.АнализВыполнен
		И НЕ Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.Закрыт Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ в статусе ""%1"" не может быть проведен.'"), Статус);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	Иначе
		// регистр торо_КоренныеПричиныДефектов
		Движения.торо_КоренныеПричиныДефектов.Записывать = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_АнализКоренныхПричинКоренныеПричины.ТекстБлока КАК ТекстБлока,
		               |	торо_АнализКоренныхПричинКоренныеПричины.ИДРодителя КАК ИДРодителя
		               |ПОМЕСТИТЬ ТабличнаяЧасть
		               |ИЗ
		               |	Документ.торо_АнализКоренныхПричин.КоренныеПричины КАК торо_АнализКоренныхПричинКоренныеПричины
		               |ГДЕ
		               |	торо_АнализКоренныхПричинКоренныеПричины.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабличнаяЧасть.ТекстБлока КАК ТекстБлока
		               |ИЗ
		               |	ТабличнаяЧасть КАК ТабличнаяЧасть
		               |ГДЕ
		               |	ТабличнаяЧасть.ИДРодителя = """"
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТабличнаяЧасть.ТекстБлока КАК ТекстБлока
		               |ИЗ
		               |	ТабличнаяЧасть КАК ТабличнаяЧасть
		               |ГДЕ
		               |	ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ТекстБлока) = ТИП(Справочник.торо_КоренныеПричиныДефектов)";
		Запрос.Установитьпараметр("Ссылка", Ссылка);
		РезЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаНепосредственнойПричины = РезЗапроса[1].Выбрать();
		ВыборкаНепосредственнойПричины.Следующий();
		НепосредственнаяПричина = ВыборкаНепосредственнойПричины.ТекстБлока;
		
		ВыборкаКоренныхПричин = РезЗапроса[2].Выбрать();
		Пока ВыборкаКоренныхПричин.Следующий() Цикл 
			Движение = Движения.торо_КоренныеПричиныДефектов.Добавить();
			Движение.ИДРемонта = ИДРемонта;
			Движение.ОбъектРемонта = ОбъектРемонта;
			Движение.ДатаСобытия = ДатаСобытия;
			Движение.НепосредственнаяПричина = НепосредственнаяПричина;
			Движение.КореннаяПричина = ВыборкаКоренныхПричин.ТекстБлока;
		КонецЦикла;
				
		ИзменитьДанныеВВыявленномДефекте(НепосредственнаяПричина);
	КонецЕсли; 

КонецПроцедуры

Процедура ПриЧтенииПредставленийНаСервере() Экспорт
    МультиязычностьСервер.ПриЧтенииПредставленийНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Для каждого Строка Из КорректирующиеМероприятия Цикл
		Если Строка.ИДМероприятия = "" Тогда
			Строка.ИДМероприятия = Новый УникальныйИдентификатор();
		КонецЕсли; 
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_АнализКоренныхПричин.Ссылка КАК Ссылка,
		|	торо_АнализКоренныхПричин.ИДРемонта КАК ИДРемонта
		|ИЗ
		|	Документ.торо_АнализКоренныхПричин КАК торо_АнализКоренныхПричин
		|ГДЕ
		|	торо_АнализКоренныхПричин.Ссылка <> &Ссылка
		|	И торо_АнализКоренныхПричин.ПометкаУдаления = ЛОЖЬ
		|	И торо_АнализКоренныхПричин.ИДРемонта = &ИДРемонта";
	
	Запрос.УстановитьПараметр("ИДРемонта", ИДРемонта);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'По данному ремонту уже введен документ ""%1""'"), ВыборкаДетальныеЗаписи.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЦикла;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ДокументОснование = "";
	ДатаСобытия = "";
	ИДРемонта = "";
	ОбъектРемонта = "";
	КраткоеОписание = "";
	Описание = "";
	Комиссия = "";
	ДатаЗавершенияАнализа = "";
	Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.Зарегистрирован;
	КоренныеПричины.Очистить();
	КорректирующиеМероприятия.Очистить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ИзменитьДанныеВВыявленномДефекте(НепосредственнаяПричина)

	ДефектОбъект = ДокументОснование.ПолучитьОбъект();
	ДокументИзменен = Ложь;
	Для каждого СтрокаДефекта Из ДефектОбъект.СписокДефектов Цикл
		Если СтрокаДефекта.ID = ИДРемонта И СтрокаДефекта.ДефектПричина <> НепосредственнаяПричина Тогда
			ДокументИзменен = Истина;
			СтрокаДефекта.ДефектПричина = НепосредственнаяПричина;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ДокументИзменен Тогда
		ДефектОбъект.Записать();
		
		НаборЗаписей = РегистрыСведений.торо_ВыявленныеДефекты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументОснование);
		НаборЗаписей.Прочитать();
		Для каждого Строка Из НаборЗаписей Цикл
			Если Строка.ID = ИДРемонта Тогда
				Строка.ДефектПричина = НепосредственнаяПричина;
			КонецЕсли; 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);		
	КонецЕсли; 
КонецПроцедуры 


#КонецОбласти

#КонецЕсли