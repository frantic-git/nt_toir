#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции
# Область Печать

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_АнализКоренныхПричин";
	КомандаПечати.Идентификатор = "ОтчетПоРезультатуАнализа";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о результатах анализа причин дефекта'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт 
	
	Документы.торо_ВнешнееОснованиеДляРабот.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	торо_СозданиеНаОсновании.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Анализ причин дефекта".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.торо_АнализКоренныхПричин) Тогда
        КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
        КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.торо_АнализКоренныхПричин.ПолноеИмя();
        КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.торо_АнализКоренныхПричин);
        КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить"; 
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "торо_ИспользоватьАнализКорневыхПричин";
        Возврат КомандаСоздатьНаОсновании;
	КонецЕсли; 
	
    Возврат Неопределено;
	
КонецФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетПоРезультатуАнализа");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ОтчетПоРезультатуАнализа",
		НСтр("ru = 'Отчет о результатах анализа причин дефекта'"),
		ПечатьОтчетОРезультатахАнализаКоренныхПричин(МассивОбъектов, ПараметрыПечати),
		,
		"Документ.торо_АнализКоренныхПричин.ПФ_MXL_ОтчетОРезультатахАнализаКоренныхПричин");
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьОтчетОРезультатахАнализаКоренныхПричин(МассивОбъектов, ПараметрыПечати)

	ТабДок = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.торо_АнализКоренныхПричин.ПФ_MXL_ОтчетОРезультатахАнализаКоренныхПричин");
	ИспользованиеКомиссий = ПолучитьФункциональнуюОпцию("торо_ИспользоватьКомиссии");
	
	ЗапросШапки = Новый Запрос;
	ЗапросШапки.Текст = 
	"ВЫБРАТЬ
	|	торо_АнализКоренныхПричин.Ссылка КАК Анализ,
	|	торо_КомиссииСоставКомиссии.ЧленКомиссии КАК ФИОЧлена,
	|	торо_КомиссииСоставКомиссии.Ссылка КАК Комиссия,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ДолжностьЧлена
	|ИЗ
	|	Документ.торо_АнализКоренныхПричин КАК торо_АнализКоренныхПричин
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_Комиссии.СоставКомиссии КАК торо_КомиссииСоставКомиссии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ПО торо_КомиссииСоставКомиссии.ЧленКомиссии = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ПО торо_АнализКоренныхПричин.Комиссия = торо_КомиссииСоставКомиссии.Ссылка
	|ГДЕ
	|	торо_АнализКоренныхПричин.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АнализКоренныхПричин.Номер КАК Номер,
	|	торо_АнализКоренныхПричин.Дата КАК Дата,
	|	торо_АнализКоренныхПричин.Организация КАК Организация,
	|	торо_АнализКоренныхПричин.Ответственный КАК ФИООтветственного,
	|	торо_АнализКоренныхПричин.ДатаСобытия КАК ДатаСобытия,
	|	торо_АнализКоренныхПричин.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_АнализКоренныхПричин.КраткоеОписание КАК КраткоеОписание,
	|	торо_АнализКоренныхПричин.Описание КАК Описание,
	|	торо_АнализКоренныхПричин.Комиссия КАК Комиссия,
	|	торо_АнализКоренныхПричин.КоренныеПричины.(
	|		НомерСтроки КАК НомерСтроки,
	|		ТекстБлока КАК ТекстБлока,
	|		ИДБлока КАК ИДБлока,
	|		ИДРодителя КАК ИДРодителя,
	|		ЭтоЗаключение КАК ЭтоЗаключение,
	|		НомерУровня КАК НомерУровня
	|	) КАК КоренныеПричины,
	|	торо_АнализКоренныхПричин.КорректирующиеМероприятия.(
	|		Описание КАК ОписаниеМероприятия,
	|		Ответственный КАК ОтветственныйМероприятия,
	|		СрокВыполнения КАК СрокВыполнения
	|	) КАК Мероприятия,
	|	торо_АнализКоренныхПричин.Комиссия.Председатель КАК КомиссияПредседатель,
	|	торо_АнализКоренныхПричин.ДокументОснование.Номер КАК НомерДокументаВД,
	|	торо_ВыявленныеДефектыСписокДефектов.ВидДефекта КАК ВидДефекта,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ДолжностьПредседателя,
	|	торо_АнализКоренныхПричин.Ссылка КАК Анализ
	|ИЗ
	|	Документ.торо_АнализКоренныхПричин КАК торо_АнализКоренныхПричин
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	|		ПО торо_АнализКоренныхПричин.ДокументОснование = торо_ВыявленныеДефектыСписокДефектов.Ссылка
	|			И торо_АнализКоренныхПричин.ИДРемонта = торо_ВыявленныеДефектыСписокДефектов.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО торо_АнализКоренныхПричин.Комиссия.Председатель = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	торо_АнализКоренныхПричин.Ссылка В(&Ссылка)";
	
	ЗапросШапки.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	РезультатКомиссия = ЗапросШапки.ВыполнитьПакет()[0];
	
	ВыборкаШапки = ЗапросШапки.ВыполнитьПакет()[1].Выбрать();
	
	ЭтоПервый = Истина;
	
	Пока ВыборкаШапки.Следующий() Цикл	
		Если НЕ ЭтоПервый Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ЭтоПервый = Ложь;
		
		КоренныеПричины = ВыборкаШапки.КоренныеПричины.Выгрузить();
		КоренныеПричиныСписком = "";
		НепосредственнаяПричина = "";
		Первая = Истина;
		Для Каждого Причина Из КоренныеПричины Цикл
			Если ТипЗнч(Причина.ТекстБлока) = Тип("СправочникСсылка.торо_КоренныеПричиныДефектов") Тогда
				Если Первая Тогда
				    КоренныеПричиныСписком = КоренныеПричиныСписком + Причина.ТекстБлока;
					Первая = Ложь;
				Иначе
					КоренныеПричиныСписком = КоренныеПричиныСписком + ", " + Причина.ТекстБлока;
				КонецЕсли; 
			КонецЕсли; 
			Если ТипЗнч(Причина.ТекстБлока) = Тип("СправочникСсылка.торо_ПричиныДефектов") Тогда
				НепосредственнаяПричина = Причина.ТекстБлока
			КонецЕсли; 
		
		КонецЦикла; 
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		ШапкаКомиссии = Макет.ПолучитьОбласть("ШапкаКомиссии");
		СтрокаКомиссии = Макет.ПолучитьОбласть("СтрокаКомиссии");
		ШапкаРезультата = Макет.ПолучитьОбласть("ШапкаРезультатАнализа");
		СтрокаДерева = Макет.ПолучитьОбласть("СтрокаДерева");
		Непосредственная = Макет.ПолучитьОбласть("Непосредственная");
		Коренная = Макет.ПолучитьОбласть("Коренная");
		Заключение = Макет.ПолучитьОбласть("Заключение");
		ШапкаМероприятий = Макет.ПолучитьОбласть("ШапкаМероприятий");
		СтрокаМероприятий = Макет.ПолучитьОбласть("СтрокаМероприятия");
		Подвал = Макет.ПолучитьОбласть("Подвал");
		
		Шапка.Параметры.Заполнить(ВыборкаШапки);
		Шапка.Параметры.ОбъектРемонта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ВыборкаШапки.ОбъектРемонта);
		Шапка.Параметры.НепосредственнаяПричина = НепосредственнаяПричина;
		Шапка.Параметры.Организация = торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(ВыборкаШапки.Организация);

		ТабДок.Вывести(Шапка);
		
		Номер = 1;
		Если ИспользованиеКомиссий = Ложь ИЛИ РезультатКомиссия.Пустой() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаШапки.Комиссия) Тогда
			ТабДок.Вывести(ШапкаКомиссии);
			
			Для Счетчик = 1 По 5 Цикл
				ТабДок.Вывести(СтрокаКомиссии);
			КонецЦикла; 
			
		Иначе
			
			ШапкаКомиссии.Параметры.ФИОПредседателя = ВыборкаШапки.КомиссияПредседатель;
			ШапкаКомиссии.Параметры.ДолжностьПредседателя = ВыборкаШапки.ДолжностьПредседателя;
			
			ВыборкаКомиссии = РезультатКомиссия.Выбрать();
			Пока ВыборкаКомиссии.Следующий() Цикл

				Если ВыборкаКомиссии.Анализ = ВыборкаШапки.Анализ Тогда
					Если Номер = 1 Тогда
						ШапкаКомиссии.Параметры.Заполнить(ВыборкаКомиссии);	
						ТабДок.Вывести(ШапкаКомиссии);
						Номер = Номер + 1;
					Иначе
						СтрокаКомиссии.Параметры.Заполнить(ВыборкаКомиссии);
						ТабДок.Вывести(СтрокаКомиссии);
					КонецЕсли; 
					 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ШапкаРезультата.Параметры.КоренныеПричиныСписком = КоренныеПричиныСписком;
		ТабДок.Вывести(ШапкаРезультата);
		
		СортированнныеСтроки = ОтсортироватьСтроки(КоренныеПричины, "");
		
		Для Каждого Строка Из СортированнныеСтроки Цикл
		    Если ТипЗнч(Строка.ТекстБлока) = Тип("СправочникСсылка.торо_ПричиныДефектов") Тогда
				Непосредственная.Параметры.ТекстБлока = Строка.ТекстБлока;
				Непосредственная.ТекущаяОбласть.Отступ = Строка.НомерУровня*2;
				ТабДок.Вывести(Непосредственная);
			ИначеЕсли ТипЗнч(Строка.ТекстБлока) = Тип("СправочникСсылка.торо_КоренныеПричиныДефектов") Тогда
				Коренная.Параметры.ТекстБлока = Строка.ТекстБлока;
				Коренная.ТекущаяОбласть.Отступ = Строка.НомерУровня*2;
				ТабДок.Вывести(Коренная);
			ИначеЕсли Строка.ЭтоЗаключение = Истина Тогда
				Заключение.Параметры.ТекстБлока = Строка.ТекстБлока;
				Заключение.ТекущаяОбласть.Отступ = Строка.НомерУровня*2;
				ТабДок.Вывести(Заключение);
			Иначе
				СтрокаДерева.Параметры.ТекстБлока = Строка.ТекстБлока;
				СтрокаДерева.ТекущаяОбласть.Отступ = Строка.НомерУровня*2;
				ТабДок.Вывести(СтрокаДерева);
			КонецЕсли; 
		КонецЦикла;		
		
		ТабДок.Вывести(ШапкаМероприятий);
		Мероприятия = ВыборкаШапки.Мероприятия.Выгрузить();
		НомерМероприятия = 1;
		Для Каждого Строка Из Мероприятия Цикл
			СтрокаМероприятий.Параметры.НомерМероприятия = НомерМероприятия;
			СтрокаМероприятий.Параметры.Заполнить(Строка);
			ТабДок.Вывести(СтрокаМероприятий);
			НомерМероприятия = НомерМероприятия + 1;
		КонецЦикла;
		
		Подвал.Параметры.Заполнить(ВыборкаШапки);
		ТабДок.Вывести(Подвал);
	КонецЦикла;
	
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.КлючПараметровПечати = "торо_ПечатьАнализКоренныхПричин";
	Возврат ТабДок;
	
	
КонецФункции // ПечатьУчетПараметровНаработки()

#КонецОбласти

Функция ОтсортироватьСтроки(КоренныеПричины, ИДРодителя)

	СортированнныеСтроки = Новый Массив();
	СтруктураОтбора = Новый Структура("ИДРодителя", ИДРодителя);
	НайденныеСтроки = КоренныеПричины.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из НайденныеСтроки Цикл
		СтруктураСтроки = Новый Структура("ТекстБлока, ИДБлока, ИДРодителя, ЭтоЗаключение, НомерУровня") ;
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		СортированнныеСтроки.Добавить(СтруктураСтроки);
		
		НовыеОтсортированныеСтроки = ОтсортироватьСтроки(КоренныеПричины, Строка.ИДБлока);
		Для каждого НоваяСтрока Из НовыеОтсортированныеСтроки Цикл
			СортированнныеСтроки.Добавить(НоваяСтрока);	
		КонецЦикла; 
	КонецЦикла;
	Возврат СортированнныеСтроки;
КонецФункции

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ 
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	(&Ограничение_ОР)";

	ОграничениеОР = торо_УправлениеДоступом.ПолучитьОграничениеДоступаДляОбъектаРемонтаВТаблице("ОбъектРемонта", Истина);
	Ограничение.Текст = СтрЗаменить(Ограничение.Текст, "&Ограничение_ОР", ОграничениеОР);
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли