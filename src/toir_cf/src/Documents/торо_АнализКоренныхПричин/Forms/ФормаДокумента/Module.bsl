#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда
			Отказ = ПроверитьВозможностьСоздания(Параметры.Основание);
			Если Отказ Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для данных дефектов уже есть документы анализа, создание документа невозможно.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.Статус));
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АнализКоренныхПричин;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	// Мультиязычное хранение реквизитов
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	торо_МультиязычностьСервер.ПриСозданииНаСервереОбработкаТабличнойЧасти(ЭтаФорма, Объект.Ссылка, "КоренныеПричины");
	торо_МультиязычностьСервер.ПриСозданииНаСервереОбработкаТабличнойЧасти(ЭтаФорма, Объект.Ссылка, "КорректирующиеМероприятия");

	ПостроитьДеревоАнализа();
	ДополнитьТаблицуМероприятий();
	ДоступностьЭлементовВЗависимостиОтСтатуса();
	
	ФОБизнесПроцессы = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот") Тогда
		Элементы.КорректирующиеМероприятияВОЗадание.Заголовок = "Задание";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// Мультиязычное хранение реквизитов
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "КоренныеПричины");
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "КорректирующиеМероприятия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(Объект.ИДРемонта) И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	// Мультиязычное хранение реквизитов
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);
	торо_МультиязычностьСервер.ПередЗаписьюНаСервереОбработкаТабличнойЧасти(ТекущийОбъект, "КоренныеПричины");
	торо_МультиязычностьСервер.ПередЗаписьюНаСервереОбработкаТабличнойЧасти(ТекущийОбъект, "КорректирующиеМероприятия");

	Если ТекущийОбъект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.Зарегистрирован И ТекущийОбъект.КоренныеПричины.Количество() > 1 Тогда
		ТекущийОбъект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.ВРаботе;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Мультиязычное хранение реквизитов
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "КоренныеПричины");
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "КорректирующиеМероприятия");
		
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.Статус));
	
	ДоступностьЭлементовВЗависимостиОтСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Причина) Тогда
			Объект.КоренныеПричины.Очистить();
			НоваяСтрока = Объект.КоренныеПричины.Добавить();
			НоваяСтрока.ТекстБлока = ВыбранноеЗначение.Причина;
			НоваяСтрока.ИДБлока = Новый УникальныйИдентификатор;
			НоваяСтрока.ИДРодителя = "";
			НоваяСтрока.НомерУровня = 1;
			ПостроитьДеревоАнализа();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ДополнитьТаблицуМероприятий();
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Неотмененный = торо_ЗаполнениеДокументов20.ВернутьIDНеПроанализированногоРемонта(ВыбранноеЗначение);
	Если Неотмененный <> "" Тогда
		ЗаполнитьПоРемонту(Неотмененный, ВыбранноеЗначение);
	Иначе
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Если ВозможностьСменыСтатуса() Тогда
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.АнализВыполнен") ИЛИ
			Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.Закрыт") Тогда
		    Если Не ЗначениеЗаполнено(Объект.ДатаЗавершенияАнализа) Тогда
				Объект.ДатаЗавершенияАнализа = ТекущаяДата();	
			КонецЕсли;
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);  
			Записать(ПараметрыЗаписи);
		ИначеЕсли  Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.ВРаботе") ИЛИ
			Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.Зарегистрирован") Тогда
			Если Объект.Проведен Тогда
				ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);  
				Записать(ПараметрыЗаписи);
			КонецЕсли; 
		КонецЕсли;
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.ВРаботе") Тогда
			Объект.ДатаЗавершенияАнализа = "";
		КонецЕсли;
		
		ДоступностьЭлементовВЗависимостиОтСтатуса();
	Иначе	
		Объект.Статус = СтатусДоИзменения;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтатусДоИзменения = Объект.Статус;
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.Зарегистрирован") Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.ВРаботе"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.Закрыт"));
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.ВРаботе") Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.АнализВыполнен"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.Закрыт"));	
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.АнализВыполнен") Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.ВРаботе"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.Закрыт"));	
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.Закрыт") Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументовАнализаПричин.ВРаботе"));
		СтандартнаяОбработка = Ложь;		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры
 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоАнализа
&НаКлиенте
Процедура ДеревоАнализаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ДеревоАнализа.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ВыбранноеЗначение.Редактирование Тогда
			ПараметрыОтбора = Новый Структура("ИДБлока", ТекущаяСтрока.ИДБлока); 
		    НайденныеСтроки = Объект.КоренныеПричины.НайтиСтроки(ПараметрыОтбора);
			Для каждого Строка Из НайденныеСтроки Цикл
				Строка.ТекстБлока = ВыбранноеЗначение.Причина;
			КонецЦикла; 
		Иначе
			СоседниеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого СоседняяСтрока Из СоседниеСтроки Цикл 
				Если СоседняяСтрока.ТекстБлока = ВыбранноеЗначение.Причина Тогда
					ШаблонСообщения = ? (ВыбранноеЗначение.ЭтоЗаключение,
						НСтр("ru = 'Заключение ""%1"" уже добавлено'"),
						НСтр("ru = 'Причина ""%1"" уже добавлена'"));
					Сообщение = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение.Причина);
					ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока = Объект.КоренныеПричины.Добавить();
			НоваяСтрока.ТекстБлока = ВыбранноеЗначение.Причина;
			НоваяСтрока.ЭтоЗаключение = ВыбранноеЗначение.ЭтоЗаключение;
			НоваяСтрока.ИДБлока = Новый УникальныйИдентификатор;
			НоваяСтрока.ИДРодителя = ТекущаяСтрока.ИДБлока;
			НоваяСтрока.НомерУровня = ТекущаяСтрока.НомерУровня + 1;
		КонецЕсли; 
	КонецЕсли; 
	ПостроитьДеревоАнализа();
	Элементы.ДеревоАнализа.Развернуть(ДеревоАнализа.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоАнализаПередУдалением(Элемент, Отказ)
	ТекущаяСтрока = Элементы.ДеревоАнализа.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено и ТекущаяСтрока.ТекстБлока = ПредопределенноеЗначение("Справочник.торо_ПричиныДефектов.ПустаяСсылка") Тогда
	    Отказ = Истина;
	ИначеЕсли ТекущаяСтрока <> Неопределено и ТипЗнч(ТекущаяСтрока.ТекстБлока) = Тип("СправочникСсылка.торо_ПричиныДефектов") Тогда
		УдалитьПричиныКромеНепосредственной();
		Отказ = Истина;
		ПостроитьДеревоАнализа();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоАнализаПричинаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ДеревоАнализа.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если Объект.КоренныеПричины.Количество() = 0 Тогда
			НоваяСтрока = Объект.КоренныеПричины.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Иначе
			СтруктураПоиска = Новый Структура("ИДБлока", ТекущаяСтрока.ИДБлока);  
			НайденныеСтроки = Объект.КоренныеПричины.НайтиСтроки(СтруктураПоиска);
			Для каждого ИзмененнаяСтрока Из НайденныеСтроки Цикл
				ИзмененнаяСтрока.ТекстБлока = ТекущаяСтрока.ТекстБлока;
			КонецЦикла; 
		КонецЕсли; 	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоАнализаПослеУдаления(Элемент)
	СинхронизироватьДеревоИТаблицуЗначений();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоАнализаПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ДеревоАнализа.ТекущиеДанные;                              
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НомерУровня = 1 ИЛИ ТекущиеДанные.НомерУровня = 0 Тогда
			Элементы.ДеревоАнализаПричина.ДоступныеТипы = Новый ОписаниеТипов("СправочникСсылка.торо_ПричиныДефектов");
			Элементы.ДеревоАнализаПричина.ВыбиратьТип = Ложь;
		Иначе 
		    Промежуточная = ТекущиеДанные.НомерУровня = 2; 
			ПараметрыФормы = Новый Структура("ЭтоЗаключение, Промежуточная, ДоИзменения", ТекущиеДанные.ЭтоЗаключение, Промежуточная, ТекущиеДанные.ТекстБлока);
			ОткрытьФорму("Документ.торо_АнализКоренныхПричин.Форма.ФормаДобавленияПричины", ПараметрыФормы, Элементы.ДеревоАнализа, ,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорректирующиеМероприятия
&НаКлиенте
Процедура КорректирующиеМероприятияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Изменено = Ложь;
	Для каждого Строка Из ВыбранноеЗначение.МассивЗаданий Цикл
		Если ЗначениеЗаполнено(Строка.Задание) Тогда
			ПараметрыОтбора = Новый Структура("ИДМероприятия", Строка.ИДМероприятия); 
			НайденныеСтроки = Объект.КорректирующиеМероприятия.НайтиСтроки(ПараметрыОтбора);
			Для каждого Мероприятие Из НайденныеСтроки Цикл
				Мероприятие.Описание = Строка.Описание;
				Мероприятие.Ответственный = Строка.Ответственный;
				Мероприятие.СрокВыполнения = Строка.СрокВыполнения;
				Мероприятие.Задание = Строка.Задание;
				Изменено = Истина;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Если Изменено Тогда
		Записать();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура КорректирующиеМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.КорректирующиеМероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Поле.Имя = "КорректирующиеМероприятияВОЗадание" И ЗначениеЗаполнено(ТекущиеДанные.ВОЗадание) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ВОЗадание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорректирующиеМероприятияПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.КорректирующиеМероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ВОЗадание) И ЗначениеЗаполнено(ТекущиеДанные.Статус) Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.Мультиязычность
&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
    МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытиеЛокализуемогоРеквзитаТЧ(Элемент, СтандартнаяОбработка)
	
	торо_МультиязычностьКлиент.ПриОткрытииРеквизитаТЧ(ЭтаФорма, Объект, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Мультиязычность

&НаКлиенте
Процедура ДобавитьПричину(Команда)
	ТекущиеДанныеДерева = Элементы.ДеревоАнализа.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено ИЛИ 
		 ТекущиеДанныеДерева.ЭтоЗаключение = Истина ИЛИ 
		 ТипЗнч(ТекущиеДанныеДерева.ТекстБлока) = Тип("СправочникСсылка.торо_КоренныеПричиныДефектов") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Причина не может быть добавлена'"));
	Иначе
		ДобавитьСтрокуПричиныЗаключения(Ложь);		
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаключение(Команда)
	ТекущиеДанныеДерева = Элементы.ДеревоАнализа.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено ИЛИ 
		 ТекущиеДанныеДерева.НомерУровня = 1 ИЛИ
		 ТекущиеДанныеДерева.НомерУровня = 0 Тогда
 		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заключение не может быть добавлено для непосредственной причины.'"));

	ИначеЕсли ТекущиеДанныеДерева.ЭтоЗаключение = Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заключение не может быть добавлено для заключения.'"));

	ИначеЕсли ТипЗнч(ТекущиеДанныеДерева.ТекстБлока) = Тип("СправочникСсылка.торо_КоренныеПричиныДефектов")Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заключение не может быть добавлено для коренной причины.'"));
	Иначе
		ДобавитьСтрокуПричиныЗаключения(Истина);		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнешнееОснование(Команда)
	Если Модифицированность Тогда
		Обработчик = Новый ОписаниеОповещения("СоздатьВнешнееОснованиеФрагмент", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для создания внешних оснований документ должен быть записан. Записать?'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		СоздатьВнешниеОснования();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗадания(Команда)
	Если ФОБизнесПроцессы = Ложь Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для назначения заданий необходимо включить функциональную опцию ""Использовать бизнес-процессы и задачи""'"));	
	ИначеЕсли Модифицированность Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьФормуСозданияЗадачФрагмент", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для назначения заданий документ должен быть записан. Записать?'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуСозданияЗадач();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ДополнитьТаблицуМероприятий();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДоступностьЭлементовВЗависимостиОтСтатуса()
	Если Объект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.Зарегистрирован Тогда
		ТолькоПросмотрОсновнымЭлементамДокумента(Ложь);
		Элементы.КорректирующиеМероприятия.ТолькоПросмотр = Ложь;
		Элементы.ДобавитьПричину.Доступность = Истина;
		Элементы.ДобавитьЗаключение.Доступность = Истина;
		Элементы.КорректирующиеМероприятияСоздатьВнешнееОснование.Доступность = Истина;
		Элементы.КорректирующиеМероприятияНазначитьЗадания.Доступность = Истина;
		
	ИначеЕсли Объект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.ВРаботе Тогда
		ТолькоПросмотрОсновнымЭлементамДокумента(Ложь);
		Элементы.КорректирующиеМероприятия.ТолькоПросмотр = Ложь;
		Элементы.ДобавитьПричину.Доступность = Истина;
		Элементы.ДобавитьЗаключение.Доступность = Истина;
		Элементы.КорректирующиеМероприятияСоздатьВнешнееОснование.Доступность = Истина;
		Элементы.КорректирующиеМероприятияНазначитьЗадания.Доступность = Истина;
		
	ИначеЕсли Объект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.АнализВыполнен Тогда
		ТолькоПросмотрОсновнымЭлементамДокумента(Истина);
		Элементы.КорректирующиеМероприятия.ТолькоПросмотр = Ложь;
		Элементы.ДобавитьПричину.Доступность = Ложь;
		Элементы.ДобавитьЗаключение.Доступность = Ложь;
		Элементы.КорректирующиеМероприятияСоздатьВнешнееОснование.Доступность = Истина;
		Элементы.КорректирующиеМероприятияНазначитьЗадания.Доступность = Истина;
		
	ИначеЕсли Объект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.Закрыт Тогда
		ТолькоПросмотрОсновнымЭлементамДокумента(Истина);

		Элементы.КорректирующиеМероприятия.ТолькоПросмотр = Истина;
		Элементы.ДобавитьПричину.Доступность = Ложь;
		Элементы.ДобавитьЗаключение.Доступность = Ложь;
		Элементы.КорректирующиеМероприятияСоздатьВнешнееОснование.Доступность = Ложь;
		Элементы.КорректирующиеМероприятияНазначитьЗадания.Доступность = Ложь;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ТолькоПросмотрОсновнымЭлементамДокумента(Значение)
	Элементы.Номер.ТолькоПросмотр = Значение;
	Элементы.Дата.ТолькоПросмотр = Значение;
	Элементы.Организация.ТолькоПросмотр = Значение;
	Элементы.Подразделение.ТолькоПросмотр = Значение;
	Элементы.ДокументОснование.ТолькоПросмотр = Значение;
	Элементы.ДатаСобытия.ТолькоПросмотр = Значение;
	Элементы.КраткоеОписание.ТолькоПросмотр = Значение;
	Элементы.Описание.ТолькоПросмотр = Значение;
	Элементы.Комиссия.ТолькоПросмотр = Значение;
	Элементы.ДеревоАнализа.ТолькоПросмотр = Значение;
	Элементы.Ответственный.ТолькоПросмотр = Значение;
КонецПроцедуры

&НаСервере
Функция ВозможностьСменыСтатуса()
	Если Объект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.ВРаботе Тогда
		Если Объект.КоренныеПричины.Количество() < 2 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Анализ причин"" нет строк.'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли; 
	ИначеЕсли Объект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.АнализВыполнен Тогда
		ЕстьКоренная = Ложь;
		ЕстьНепосредственная = Ложь;
		Для каждого Причина Из Объект.КоренныеПричины Цикл
			Если ТипЗнч(Причина.ТекстБлока) = Тип("СправочникСсылка.торо_КоренныеПричиныДефектов") Тогда
				ЕстьКоренная = Истина;
			КонецЕсли; 
			Если ТипЗнч(Причина.ТекстБлока) = Тип("СправочникСсылка.торо_ПричиныДефектов") Тогда
				ЕстьНепосредственная = Истина;
			КонецЕсли; 
		КонецЦикла; 
		Если ЕстьКоренная = Ложь Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Анализ причин"" не указано ни одной коренной причины.'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
			Возврат Ложь;
		КонецЕсли;
		
		Если ЕстьНепосредственная = Ложь Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Анализ причин"" отсутствует непосредственная причина.'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
			Возврат Ложь;
		КонецЕсли;
		
		Заполненность = ПроверитьЗаполненностьДерева(ДеревоАнализа);	
		Если Заполненность = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОбязательныеПоля = ПроверитьОбязательныеПоля();
		Если ОбязательныеПоля = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;

		
	ИначеЕсли Объект.Статус = Перечисления.торо_СтатусыДокументовАнализаПричин.Закрыт Тогда
		Если Объект.КоренныеПричины.Количество() < 2 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Анализ причин"" нет строк.'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли; 
		ЕстьКоренная = Ложь;
		ЕстьНепосредственная = Ложь;
		Для каждого Причина Из Объект.КоренныеПричины Цикл
			Если ТипЗнч(Причина.ТекстБлока) = Тип("СправочникСсылка.торо_КоренныеПричиныДефектов") Тогда
				ЕстьКоренная = Истина;
			КонецЕсли; 
			Если ТипЗнч(Причина.ТекстБлока) = Тип("СправочникСсылка.торо_ПричиныДефектов") Тогда
				ЕстьНепосредственная = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ЕстьКоренная = Ложь Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Анализ причин"" не указано ни одной коренной причины.'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
			Возврат Ложь;
		КонецЕсли;
		
		Если ЕстьНепосредственная = Ложь Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Анализ причин"" отсутствует непосредственная причина.'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
			Возврат Ложь;
		КонецЕсли;
		
		Заполненность = ПроверитьЗаполненностьДерева(ДеревоАнализа);	
		Если Заполненность = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОбязательныеПоля = ПроверитьОбязательныеПоля();
		Если ОбязательныеПоля = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДополнитьТаблицуМероприятий();
		ЕстьМероприятия = ПроверитьКорректирующиеМероприятия();
		Если ЕстьМероприятия = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	Возврат Истина;

КонецФункции
 
&НаСервере
Функция ПроверитьЗаполненностьДерева(СтрокаДереваАнализа)
	Для каждого Подстрока Из СтрокаДереваАнализа.ПолучитьЭлементы() Цикл
		Если ПроверитьЗаполненностьДерева(Подстрока) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	Если СтрокаДереваАнализа.ПолучитьЭлементы().Количество() = 0 И
		(ТипЗнч(СтрокаДереваАнализа.ТекстБлока) <> Тип("СправочникСсылка.торо_КоренныеПричиныДефектов") И 
		СтрокаДереваАнализа.ЭтоЗаключение <> Истина) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Для промежуточной причины ""%1"" не указано заключение или коренная причина.'"), СтрокаДереваАнализа.ТекстБлока));
		Возврат Ложь;
	
	КонецЕсли; 
	Возврат Истина;
КонецФункции
 
&НаСервере
Функция ПроверитьОбязательныеПоля()
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Объект.ДатаСобытия) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ИДРемонта) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда
		Возврат Ложь;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Объект.КраткоеОписание) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьКорректирующиеМероприятия()
	
	НетНезавершенных = Истина;
	Для каждого Строка Из Объект.КорректирующиеМероприятия Цикл
		Если Строка.Статус <> Перечисления.торо_СтатусыРемонтов.Выполнен И
			 Строка.Статус <> "Завершен" И 
			 Строка.Статус <> "Отменен" Тогда
			 
			Если ТипЗнч(Строка.ВОЗадание) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Корректирующие мероприятия"" в строке %1 не выполнены ремонты.'"), Строка.НомерСтроки);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Корректирующие мероприятия"" в строке %1 не завершены задачи.'"), Строка.НомерСтроки);
			КонецЕсли; 
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
			 
			НетНезавершенных = Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат НетНезавершенных;

КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуПричиныЗаключения(Заключение = Ложь)
	
	ТекущиеДанныеДерева = Элементы.ДеревоАнализа.ТекущиеДанные;
	ПустаяСсылка = ПредопределенноеЗначение("Справочник.торо_ПричиныДефектов.ПустаяСсылка");
	Если ТекущиеДанныеДерева = Неопределено Тогда
	    НоваяСтрока = ДеревоАнализа.ПолучитьЭлементы().Добавить();
	ИначеЕсли ТекущиеДанныеДерева.ТекстБлока = ПустаяСсылка Тогда
		ТекущиеДанныеДерева.ИДБлока = Новый УникальныйИдентификатор;
		ТекущиеДанныеДерева.ИДРодителя = "";
		ТекущиеДанныеДерева.НомерУровня = 1;
		Элементы.ДеревоАнализа.ИзменитьСтроку();
	Иначе
		Промежуточная = ТипЗнч(ТекущиеДанныеДерева.ТекстБлока) = Тип("СправочникСсылка.торо_ПричиныДефектов");
		ПараметрыФормы = Новый Структура("ЭтоЗаключение, Промежуточная", Заключение, Промежуточная);
		ОткрытьФорму("Документ.торо_АнализКоренныхПричин.Форма.ФормаДобавленияПричины", ПараметрыФормы, Элементы.ДеревоАнализа, ,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуПроверки(СрокВыполнения)
	ГрафикРаботы = Константы.торо_ГрафикРемонтныхРабот.Получить();
	Возврат КалендарныеГрафики.ДатаПоКалендарю(ГрафикРаботы, СрокВыполнения, 1);
КонецФункции

&НаКлиенте
Процедура ЗавершениеСозданияВО(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ДополнитьТаблицуМероприятий();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияЗадачФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Записать();
		ДополнитьТаблицуМероприятий();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСозданияЗадач();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнешнееОснованиеФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Записать();
		ДополнитьТаблицуМероприятий();
	Иначе
		Возврат;
	КонецЕсли;
	
	СоздатьВнешниеОснования();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияЗадач()
	МассивСтрок = Новый Массив;
	НомерСтроки = 0;
	Для каждого Мероприятие Из Объект.КорректирующиеМероприятия Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаОшибки = "";
		Если Не ЗначениеЗаполнено(Мероприятие.ВОЗадание) Тогда
			Строка = Новый Структура("Описание, ИДМероприятия, Ответственный, СрокВыполнения, СрокПроверки");
			ЗаполнитьЗначенияСвойств(Строка, Мероприятие);
			
			Если Не ЗначениеЗаполнено(Строка.СрокВыполнения) Тогда
				СтрокаОшибки = СтрШаблон(НСтр("ru = 'Срок выполнения в строке %1 не задан.'"), НомерСтроки);
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаОшибки);	
				Продолжить;
			КонецЕсли; 
			
			Строка.СрокПроверки = ПолучитьДатуПроверки(Мероприятие.СрокВыполнения);
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() <> 0 Тогда
		ПараметрыОткрытия = Новый Структура("МассивСтрок, АнализСсылка, ОбъектРемонта, КраткоеОписание", МассивСтрок, Объект.Ссылка, Объект.ОбъектРемонта, Объект.КраткоеОписание);
		ОткрытьФорму("Документ.торо_АнализКоренныхПричин.Форма.ФормаСозданияЗадач", ПараметрыОткрытия, Элементы.КорректирующиеМероприятия,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	ПодборРемонтов();
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Анализ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.ДокументОснование);
	
	ОткрытьФорму("Документ.торо_АнализКоренныхПричин.Форма.ФормаПодбораРемонтаВАнализПричин",
		ПараметрыФормы, ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРемонту(Неотмененный, ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка.ДатаОбнаружения КАК ДатаСобытия,
		|	торо_ВыявленныеДефектыСписокДефектов.ДефектОписание КАК КраткоеОписание,
		|	торо_ВыявленныеДефектыСписокДефектов.ID КАК ИДРемонта,
		|	торо_ВыявленныеДефектыСписокДефектов.ДефектПричина КАК ТекстБлока,
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК ДокументОснование
		|ИЗ
		|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		|ГДЕ
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка
		|	И торо_ВыявленныеДефектыСписокДефектов.ID = &ID";
	
	Запрос.УстановитьПараметр("ID", Неотмененный);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект, ВыборкаДетальныеЗаписи);
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТекстБлока) Тогда
			Объект.КоренныеПричины.Очистить();
			НоваяСтрока = Объект.КоренныеПричины.Добавить();
			НоваяСтрока.ТекстБлока = ВыборкаДетальныеЗаписи.ТекстБлока;
			НоваяСтрока.НомерУровня = 1;
			НоваяСтрока.ИДБлока = Новый УникальныйИдентификатор;
			НоваяСтрока.ИДРодителя = "";
		КонецЕсли; 
	КонецЦикла;
	
	ПостроитьДеревоАнализа();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнешниеОснования()
	ТекущиеДанные = Элементы.КорректирующиеМероприятия.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.КорректирующиеМероприятия.ВыделенныеСтроки;
	МассивСтрок = Новый Массив();	

	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.КорректирующиеМероприятия.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТипЗнч(СтрокаТаблицы.Ответственный) <> Тип("СправочникСсылка.Сотрудники") Тогда
			Текст = НСтр("ru = 'Внешнее основание может быть создано только для ответственных с типом ""Сотрудник""!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
			Продолжить;
		КонецЕсли;
		
		СтрокаРемонта = Новый Структура("ID, ОбъектРемонта, Описание, ПлановаяДатаРемонта, Ответственный", 
			СтрокаТаблицы.ИДМероприятия, Объект.ОбъектРемонта, СтрокаТаблицы.Описание, СтрокаТаблицы.СрокВыполнения, СтрокаТаблицы.Ответственный); 	
		СтрокаОшибки = "";	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СрокВыполнения) Тогда
			СтрокаОшибки = СтрШаблон(НСтр("ru = 'Срок выполнения в строке %1 не задан.'"), СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Ответственный) Тогда
			СтрокаОшибки = СтрШаблон(НСтр("ru = 'Ответственный в строке %1 не задан.'"), СтрокаТаблицы.НомерСтроки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Описание) Тогда
			СтрокаОшибки = СтрШаблон(НСтр("ru = 'Описание в строке %1 не задано.'"), СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаОшибки);	
			Продолжить;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВОЗадание) Тогда
			МассивСтрок.Добавить(СтрокаРемонта);
		КонецЕсли; 	
	КонецЦикла; 
	
	Если МассивСтрок.Количество() <> 0 Тогда
		СтруктураПараметров = Новый Структура("МассивСтрокТЧОбследованноеОборудование, ДокументОснование", МассивСтрок, Объект.Ссылка);
		СтруктураЗаполнения = Новый Структура("ЗначенияЗаполнения", СтруктураПараметров);
		Обработчик = Новый ОписаниеОповещения("ЗавершениеСозданияВО", ЭтотОбъект);
		ОткрытьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаОбъекта", СтруктураЗаполнения, ЭтаФорма, ,,, Обработчик); 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоАнализа()
	
	ДеревоАнализа.ПолучитьЭлементы().Очистить();
	
	Если Объект.КоренныеПричины.Количество() = 0 Тогда
		НоваяСтрока = ДеревоАнализа.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ТекстБлока = Справочники.торо_ПричиныДефектов.ПустаяСсылка();
		НоваяСтрока.ИДБлока = Новый УникальныйИдентификатор;
		НоваяСтрока.НомерУровня = 1;
	Иначе
		ТаблицаКоренныхПричин = Объект.КоренныеПричины.Выгрузить();
		ТаблицаКоренныхПричин.Сортировать("НомерУровня");
		
		Для каждого Причина Из ТаблицаКоренныхПричин Цикл
			Если Причина.ИДРодителя = "" Тогда
				НоваяСтрокаДерева = ДеревоАнализа.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Причина);
				НоваяСтрокаДерева.Коренная = ТипЗнч(НоваяСтрокаДерева.ТекстБлока) = Тип("СправочникСсылка.торо_КоренныеПричиныДефектов");
			Иначе
				СтруктураПоиска = Новый Структура("ИДБлока", Причина.ИДРодителя); 
				МассивСтрок = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(ДеревоАнализа, СтруктураПоиска);
				Для каждого РодительскаяСтрока Из МассивСтрок Цикл
					НоваяСтрокаДерева = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Причина); 
				НоваяСтрокаДерева.Коренная = ТипЗнч(НоваяСтрокаДерева.ТекстБлока) = Тип("СправочникСсылка.торо_КоренныеПричиныДефектов");
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьПричиныКромеНепосредственной()
	СтруктураПоиска = Новый Структура("ИДРодителя", "");  
	НайденныеСтроки = Объект.КоренныеПричины.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		СохранненаяСтрока = Новый Структура("ТекстБлока, ИДБлока, ИДРодителя, НомерСтроки, ЭтоЗаключение, НомерУровня");
		ЗаполнитьЗначенияСвойств(СохранненаяСтрока, Строка);
	КонецЦикла; 	
	Объект.КоренныеПричины.Очистить();
	НоваяСтрока = Объект.КоренныеПричины.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СохранненаяСтрока);
КонецПроцедуры
 
&НаСервере
Процедура СинхронизироватьДеревоИТаблицуЗначений()
	Объект.КоренныеПричины.Очистить();
	РазвернутьДеревоВТаблицуЗначений(ДеревоАнализа, Объект.КоренныеПричины);
КонецПроцедуры

&НаСервере
Процедура РазвернутьДеревоВТаблицуЗначений(ДеревоРезультат, ТабРезультат)
	СтрокиДерева = ДеревоРезультат.ПолучитьЭлементы();
	Для каждого Строка Из СтрокиДерева Цикл
		НоваяСтрока = ТабРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		РазвернутьДеревоВТаблицуЗначений(Строка, ТабРезультат);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуМероприятий()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_АнализКоренныхПричинКорректирующиеМероприятия.ИДМероприятия КАК ИДМероприятия,
		|	торо_АнализКоренныхПричинКорректирующиеМероприятия.Задание КАК Задание
		|ПОМЕСТИТЬ втМероприятия
		|ИЗ
		|	Документ.торо_АнализКоренныхПричин.КорректирующиеМероприятия КАК торо_АнализКоренныхПричинКорректирующиеМероприятия
		|ГДЕ
		|	торо_АнализКоренныхПричинКорректирующиеМероприятия.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИДМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_СтатусыРемонтовСрезПоследних.IDРемонта КАК IDРемонта,
		|	торо_СтатусыРемонтовСрезПоследних.Статус КАК Статус
		|ПОМЕСТИТЬ втСтатусыРемонтов
		|ИЗ
		|	РегистрСведений.торо_СтатусыРемонтов.СрезПоследних(
		|			,
		|			IDРемонта В
		|				(ВЫБРАТЬ
		|					втМероприятия.ИДМероприятия
		|				ИЗ
		|					втМероприятия)) КАК торо_СтатусыРемонтовСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	IDРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втМероприятия.ИДМероприятия КАК ИДМероприятия,
		|	ЕСТЬNULL(торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка, втМероприятия.Задание) КАК ВОЗадание,
		|	ВЫБОР
		|		КОГДА НЕ торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка ЕСТЬ NULL
		|			ТОГДА втСтатусыРемонтов.Статус
		|		КОГДА втМероприятия.Задание = ЗНАЧЕНИЕ(БизнесПроцесс.Задание.ПустаяСсылка)
		|			ТОГДА """"
		|		КОГДА втМероприятия.Задание.Завершен
		|			ТОГДА ""Завершен""
		|		ИНАЧЕ ""Не завершен""
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	втМероприятия КАК втМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК торо_ВнешнееОснованиеДляРаботОбследованноеОборудование
		|		ПО втМероприятия.ИДМероприятия = торо_ВнешнееОснованиеДляРаботОбследованноеОборудование.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыРемонтов КАК втСтатусыРемонтов
		|		ПО втМероприятия.ИДМероприятия = втСтатусыРемонтов.IDРемонта";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура("ИДМероприятия", Выборка.ИДМероприятия); 
		КорректирующиеМероприятияОтбор = Объект.КорректирующиеМероприятия.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Строка Из КорректирующиеМероприятияОтбор Цикл
			ЗаполнитьЗначенияСвойств(Строка, Выборка, "ВОЗадание, Статус");	
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура("Проведен", Истина); 
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КорректирующиеМероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование = Истина Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаСервере
Функция ПроверитьВозможностьСоздания(ДокументОснование)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ВыявленныеДефектыСписокДефектов.ДефектОписание КАК ДефектОписание,
		|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ВыявленныеДефектыСписокДефектов.ID КАК ИДРемонта,
		|	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка.ДатаОбнаружения КАК ДатаСобытия,
		|	торо_ВыявленныеДефектыСписокДефектов.ДефектПричина КАК Причина
		|ИЗ
		|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АнализКоренныхПричин КАК торо_АнализКоренныхПричин
		|		ПО торо_ВыявленныеДефектыСписокДефектов.ID = торо_АнализКоренныхПричин.ИДРемонта
		|ГДЕ
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка
		|	И (торо_АнализКоренныхПричин.Ссылка ЕСТЬ NULL
		|			ИЛИ торо_АнализКоренныхПричин.ПометкаУдаления = ИСТИНА
		|			ИЛИ торо_АнализКоренныхПричин.Ссылка = &Анализ)";
	
	Запрос.УстановитьПараметр("Анализ", Объект.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
#КонецОбласти

 
