#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

Перем СтруктураДанных Экспорт; // Структура, хранящая данные для работы с уведомлениями.
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание)
	
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	
	ДокОснование = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);
		
		Основание.Свойство("ДокументОснование", ДокОснование);
		
		Если Основание.Свойство("ВидОперации") Тогда
			ВидОперации = Основание.ВидОперации;
		КонецЕсли;
		
		// Создание из формы объекта ремонта
		Если Основание.Свойство("ОбъектРемонта") Тогда
			НС = ОбъектыРемонта.Добавить();
			НС.ОбъектРемонта = Основание.ОбъектРемонта;
			НС.ДатаОкончания = ТекущаяДата();
			Если Основание.Свойство("СтруктураИерархии") Тогда
				НС.СтруктураИерархии = Основание.СтруктураИерархии;
			Иначе
				НС.СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнаяСтруктураИерархии",
				Истина);
			КонецЕсли;
		КонецЕсли;

	Иначе
		ДокОснование = Основание;
	КонецЕсли;
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		
		Организация = ДокОснование.Организация;
		Подразделение = ДокОснование.Подразделение;
		ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
		ДокументОснование = ДокОснование;
		
		Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("СтруктураИерархии") Тогда
			СтруктураИерархии = Основание.СтруктураИерархии;
		Иначе
			СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнаяСтруктураИерархии",
				Истина);
		КонецЕсли;
		
		ВидЭксплуатацииПриСозданииНаОсновании = Константы.торо_ВидЭксплуатацииДляВводаНаОснованииВыявленногоДефекта.Получить();		
		
		Если ФОИспользоватьОстановочные = Истина Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ВыявленныеДефектыСписокДефектов.НомерСтроки КАК НомерСтроки,
			|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
			|	НЕ торо_ВыявленныеДефектыСписокДефектов.ТиповойДефект = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеДефектыОборудования.ПустаяСсылка) КАК ЕстьТиповойДефект,
			|	торо_ВыявленныеДефектыСписокДефектов.ТиповойДефект.ТехнологическаяКарта КАК ИдентификаторТКТиповогоДефекта,
			|	торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Значение КАК ВидРемонтаПриВводеНаОснованииВыявленныхДефектов
			|ПОМЕСТИТЬ втОбъектыРемонта
			|ИЗ
			|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов,
			|	Константа.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов КАК торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов
			|ГДЕ
			|	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_НормативныеРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
			|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК ИдентификаторТК
			|ПОМЕСТИТЬ втНормативныеРемонты
			|ИЗ
			|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыРемонта КАК втОбъектыРемонта
			|		ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = втОбъектыРемонта.ОбъектРемонта
			|			И торо_НормативныеРемонтыОборудования.ВидРемонта = втОбъектыРемонта.ВидРемонтаПриВводеНаОснованииВыявленныхДефектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудованияУдаленные КАК торо_НормативныеРемонтыОборудованияУдаленные
			|		ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта
			|			И торо_НормативныеРемонтыОборудования.ВидРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ВидРемонта
			|			И торо_НормативныеРемонтыОборудования.ТиповойОР = торо_НормативныеРемонтыОборудованияУдаленные.ТиповойОР
			|ГДЕ
			|	торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта ЕСТЬ NULL
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОбъектыРемонта.НомерСтроки КАК НомерСтроки,
			|	втОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
			|	НЕ втНормативныеРемонты.ОбъектРемонта ЕСТЬ NULL КАК ЕстьНормативныйРемонт,
			|	ЕСТЬNULL(втНормативныеРемонты.ИдентификаторТК, ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)) КАК ИдентификаторТКНормативногоРемонта,
			|	втОбъектыРемонта.ЕстьТиповойДефект КАК ЕстьТиповойДефект,
			|	втОбъектыРемонта.ИдентификаторТКТиповогоДефекта КАК ИдентификаторТКТиповогоДефекта,
			|	НЕ торо_ТехнологическаяКартаПриВводеНаОснованииВыявленныхДефектов.Значение = ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка) КАК ЗаполненаТКПриВводеНаОснованииВД,
			|	торо_ТехнологическаяКартаПриВводеНаОснованииВыявленныхДефектов.Значение КАК ИдентификаторТКПриВводеНаОснованииВД
			|ПОМЕСТИТЬ втПредварительныеДанные
			|ИЗ
			|	втОбъектыРемонта КАК втОбъектыРемонта
			|		ЛЕВОЕ СОЕДИНЕНИЕ втНормативныеРемонты КАК втНормативныеРемонты
			|		ПО втОбъектыРемонта.ОбъектРемонта = втНормативныеРемонты.ОбъектРемонта,
			|	Константа.торо_ТехнологическаяКартаПриВводеНаОснованииВыявленныхДефектов КАК торо_ТехнологическаяКартаПриВводеНаОснованииВыявленныхДефектов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
			|	ВЫБОР
			|		КОГДА торо_ВерсииТехКартСрезПоследних.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования
			|			ТОГДА торо_ВерсииТехКартСрезПоследних.ТехКарта.ВидПростоя
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)
			|	КОНЕЦ КАК ВидПростоя
			|ПОМЕСТИТЬ втВерсииТехКарт
			|ИЗ
			|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(
			|			&ДатаОбнаруженияДефекта,
			|			ИдентификаторТехКарты В
			|				(ВЫБРАТЬ
			|					втПредварительныеДанные.ИдентификаторТКНормативногоРемонта КАК ИдентификаторТК
			|				ИЗ
			|					втПредварительныеДанные КАК втПредварительныеДанные
			|			
			|				ОБЪЕДИНИТЬ
			|			
			|				ВЫБРАТЬ
			|					втПредварительныеДанные.ИдентификаторТКТиповогоДефекта
			|				ИЗ
			|					втПредварительныеДанные КАК втПредварительныеДанные
			|			
			|				ОБЪЕДИНИТЬ
			|			
			|				ВЫБРАТЬ
			|					втПредварительныеДанные.ИдентификаторТКПриВводеНаОснованииВД
			|				ИЗ
			|					втПредварительныеДанные КАК втПредварительныеДанные)) КАК торо_ВерсииТехКартСрезПоследних
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ИдентификаторТехКарты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втПредварительныеДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	втПредварительныеДанные.ЕстьНормативныйРемонт КАК ЕстьНормативныйРемонт,
			|	ЕСТЬNULL(ВерсииТехКартНормативныйРемонт.ВидПростоя, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидПростояНормативныйРемонт,
			|	втПредварительныеДанные.ЕстьТиповойДефект КАК ЕстьТиповойДефект,
			|	ЕСТЬNULL(ВерсииТехКартТиповойДефект.ВидПростоя, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидПростояТиповойДефект,
			|	втПредварительныеДанные.ЗаполненаТКПриВводеНаОснованииВД КАК ЗаполненаТКПриВводеНаОснованииВД,
			|	ЕСТЬNULL(ВерсииТехКартТКПриВводеНаОснованииВД.ВидПростоя, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидПростояПриВводеНаОснованииВД
			|ИЗ
			|	втПредварительныеДанные КАК втПредварительныеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВерсииТехКарт КАК ВерсииТехКартНормативныйРемонт
			|		ПО втПредварительныеДанные.ИдентификаторТКНормативногоРемонта = ВерсииТехКартНормативныйРемонт.ИдентификаторТехКарты
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВерсииТехКарт КАК ВерсииТехКартТиповойДефект
			|		ПО втПредварительныеДанные.ИдентификаторТКТиповогоДефекта = ВерсииТехКартТиповойДефект.ИдентификаторТехКарты
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВерсииТехКарт КАК ВерсииТехКартТКПриВводеНаОснованииВД
			|		ПО втПредварительныеДанные.ИдентификаторТКПриВводеНаОснованииВД = ВерсииТехКартТКПриВводеНаОснованииВД.ИдентификаторТехКарты
			|
			|УПОРЯДОЧИТЬ ПО
			|	втПредварительныеДанные.НомерСтроки";						   
			
			Запрос.УстановитьПараметр("Ссылка", ДокОснование);			
			Запрос.УстановитьПараметр("ДатаОбнаруженияДефекта", ДокОснование.ДатаОбнаружения);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ОбъектыРемонта.Добавить();
				НоваяСтрока.ОбъектРемонта = Выборка.ОбъектРемонта;
				НоваяСтрока.ДатаОкончания = ДокОснование.ДатаОбнаружения;
				НоваяСтрока.СтруктураИерархии = СтруктураИерархии;

				Если Выборка.ЕстьНормативныйРемонт Тогда
					НоваяСтрока.ВидЭксплуатации = Выборка.ВидПростояНормативныйРемонт;
				ИначеЕсли Выборка.ЕстьТиповойДефект Тогда
					НоваяСтрока.ВидЭксплуатации = Выборка.ВидПростояТиповойДефект;
				ИначеЕсли Выборка.ЗаполненаТКПриВводеНаОснованииВД Тогда 
					НоваяСтрока.ВидЭксплуатации = Выборка.ВидПростояПриВводеНаОснованииВД;
				Иначе
					НоваяСтрока.ВидЭксплуатации = ВидЭксплуатацииПриСозданииНаОсновании;
				КонецЕсли;				
			КонецЦикла;
			
		Иначе
			Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("МассивОР") Тогда
				
				Для Каждого ОР Из Основание.МассивОР Цикл
					НоваяСтрока = ОбъектыРемонта.Добавить();
					НоваяСтрока.ОбъектРемонта = ОР;
					НоваяСтрока.ДатаОкончания = ДокОснование.ДатаОбнаружения;
					НоваяСтрока.ВидЭксплуатации = ВидЭксплуатацииПриСозданииНаОсновании;
					НоваяСтрока.СтруктураИерархии = СтруктураИерархии;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		Организация = ДокОснование.Организация;
		Подразделение = ДокОснование.Подразделение;
		ВидОперации = ?(ЗначениеЗаполнено(ВидОперации), ВидОперации, Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
		ДокументОснование = ДокОснование;
		
		СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
											"НастройкиТОиР",
											"ОсновнаяСтруктураИерархии",
											Истина);
											
		Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("МассивОР") Тогда
			МассивОР = ПолучитьСтруктуруОбъектовРемонтаИПростоевИзДокументаОснования(ДокОснование, Основание.МассивОР);
		Иначе
			МассивОР = ПолучитьСтруктуруОбъектовРемонтаИПростоевИзДокументаОснования(ДокОснование);
		КонецЕсли;
		
		ИспользоватьОстановочныеРемонты = Константы.торо_ИспользоватьОстановочныеРемонты.Получить();
		
		Если ЗначениеЗаполнено(МассивОР) И МассивОР[0].Свойство("ОбъектРемонта") Тогда
			ПредыдущийОР = МассивОР[0].ОбъектРемонта;
		КонецЕсли;
		
		МассивСОдинаковымОР = Новый Массив;		
		Для Каждого ТекСтрока Из МассивОР Цикл			
			ТекущийОР = ТекСтрока.ОбъектРемонта;
			Если НЕ ТекущийОР = ПредыдущийОР Тогда
				МассивСОдинаковымОРСОбъединениемЗаписей = ОбработатьПериодыДляМассиваСОдинаковымОР(МассивСОдинаковымОР);
				ЗаполнитьТабЧастьОбъектыРемонта(МассивСОдинаковымОРСОбъединениемЗаписей, СтруктураИерархии, ИспользоватьОстановочныеРемонты);				
				МассивСОдинаковымОР.Очистить();
			КонецЕсли;
			МассивСОдинаковымОР.Добавить(ТекСтрока);
			Если ТекСтрока = МассивОР[МассивОР.ВГраница()] Тогда
				МассивСОдинаковымОРСОбъединениемЗаписей = ОбработатьПериодыДляМассиваСОдинаковымОР(МассивСОдинаковымОР);
				ЗаполнитьТабЧастьОбъектыРемонта(МассивСОдинаковымОРСОбъединениемЗаписей, СтруктураИерархии, ИспользоватьОстановочныеРемонты);				
			КонецЕсли;
			ПредыдущийОР = ТекСтрока.ОбъектРемонта;
		КонецЦикла;
				
	КонецЕсли;
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	МассивОР = ОбщегоНазначения.ВыгрузитьКолонку(ОбъектыРемонта, "ОбъектРемонта", Истина);
	ОбъектыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивОР);

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		ЗаполнитьВидыЭксплуатацииВТаблицеОбъектовРемонта();
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	ЗаполненОбщийВидЭксплуатации = ЗначениеЗаполнено(ВидЭксплуатации);
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
		ПроверяемыеРеквизиты.Добавить("ОбъектыРемонта.ДатаНачала");
		ПроверяемыеРеквизиты.Добавить("ОбъектыРемонта.ДатаОкончания");
		ПроверяемыеРеквизиты.Добавить("ОбъектыРемонта.ВидЭксплуатации");
		Если Не ЗаполненОбщийВидЭксплуатации Тогда
			ПроверяемыеРеквизиты.Добавить("ОбъектыРемонта.ВидЭксплуатацииНаПериод");
		КонецЕсли;
	Иначе
		Если Не ЗаполненОбщийВидЭксплуатации Тогда
			ПроверяемыеРеквизиты.Добавить("ОбъектыРемонта.ВидЭксплуатации");
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить("ОбъектыРемонта.ДатаОкончания");
	КонецЕсли; 
	
	ПроверитьЗаполнениеВидовПусковПричинПростоя(Отказ);
	ПроверитьЗаполнениеИерархии(Отказ);
	ПроверитьДублиСтрок(Отказ);
	ПроверитьПересечениеПериодовВнутриДокумента(Отказ);
	
	ТаблицаОбъектовРемонтаСПодчиненными = ПолучитьТаблицуОбъектовРемонтаСПодчиненными();
	СравнитьДатыСДатойВводаВЭксплуатацию(ТаблицаОбъектовРемонтаСПодчиненными, Отказ);
		
	ДополнительныеСвойства.Вставить("ТаблицаОбъектовРемонтаСПодчиненными", ТаблицаОбъектовРемонтаСПодчиненными);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ДополнительныеСвойства.Свойство("ТаблицаОбъектовРемонтаСПодчиненными") Тогда
		ТаблицаОбъектовРемонтаСПодчиненными = ДополнительныеСвойства.ТаблицаОбъектовРемонтаСПодчиненными;
	Иначе
		ТаблицаОбъектовРемонтаСПодчиненными = ПолучитьТаблицуОбъектовРемонтаСПодчиненными();
	КонецЕсли;
	
	УстановитьУправляемыеБлокировки(ТаблицаОбъектовРемонтаСПодчиненными);
	ПроверитьКонфликтыСРегистромТекущиеСостоянияОР(ТаблицаОбъектовРемонтаСПодчиненными, Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСостоянийНаДатуПоДокументу = ПолучитьТаблицуСостоянийНаДатуПоДокументу(ТаблицаОбъектовРемонтаСПодчиненными);
		
	ДвиженияПоРегиструСостоянияОР(ТаблицаСостоянийНаДатуПоДокументу);
	ДвиженияПоРегиструКоличествоПусковОР(ТаблицаСостоянийНаДатуПоДокументу);
	
	ТаблицаСостоянийНаДатуСДаннымиРегистра = ДополнитьТаблицуСостоянийДаннымиРегистра(ТаблицаСостоянийНаДатуПоДокументу);
	ТаблицаПериодовСостояний = ПолучитьТаблицуПериодовСостояний(ТаблицаСостоянийНаДатуСДаннымиРегистра);
	СтруктураТаблицВремениНахожденияВСостоянии = ОпределитьВремяНахожденияВСостоянии(ТаблицаПериодовСостояний);
	
	СообщитьОбОбъектахРемонтаУжеВПростое(ТаблицаПериодовСостояний);
	
	ДвиженияПоРегиструВремяНахожденияВСостоянии(СтруктураТаблицВремениНахожденияВСостоянии);
	СкорректироватьВремяНахожденияВСостоянииДругихРегистраторов(СтруктураТаблицВремениНахожденияВСостоянии.ТаблицаСвернутая);
	СкорректироватьВремяНахожденияВСостоянииПоДнямДругихРегистраторов(СтруктураТаблицВремениНахожденияВСостоянии.ТаблицаПоДням);
	
	ТаблицаСОтметкамиОстановыИспытания = РассчитатьДвиженияПоОстановленномуОборудованию(ТаблицаСостоянийНаДатуСДаннымиРегистра);
	
	ДвиженияПоРегиструОстановленноеОборудование(ТаблицаСОтметкамиОстановыИспытания);
	СкорректироватьОстановленноеОборудованиеДругихРегистраторов(ТаблицаСОтметкамиОстановыИспытания);
	СкорректироватьОборудованиеНаИспытанияхДругихРегистраторов(ТаблицаСОтметкамиОстановыИспытания);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Не смотрим в табличную часть документа,т.к. подчиненные ОР и сами строки документа 
	// могли поменться. Нужно смотреть именно на движения документа для корректного пересчета.
	ТаблицаСостоянийНаДатуПоДокументу = ПолучитьТаблицуУдалямыхСостоянийНаДату();
	
	УстановитьУправляемыеБлокировки(ТаблицаСостоянийНаДатуПоДокументу);
	
	ТаблицаСостоянийНаДатуСДаннымиРегистра = ДополнитьТаблицуСостоянийДаннымиРегистра(ТаблицаСостоянийНаДатуПоДокументу, Истина);
	ТаблицаПериодовСостояний = ПолучитьТаблицуПериодовСостояний(ТаблицаСостоянийНаДатуСДаннымиРегистра);
	
	СтруктураТаблицВремениНахожденияВСостоянии = ОпределитьВремяНахожденияВСостоянии(ТаблицаПериодовСостояний);
	
	СкорректироватьВремяНахожденияВСостоянииДругихРегистраторов(СтруктураТаблицВремениНахожденияВСостоянии.ТаблицаСвернутая);
	СкорректироватьВремяНахожденияВСостоянииПоДнямДругихРегистраторов(СтруктураТаблицВремениНахожденияВСостоянии.ТаблицаПоДням);
	
	ТаблицаСОтметкамиОстановыИспытания = РассчитатьДвиженияПоОстановленномуОборудованию(ТаблицаСостоянийНаДатуСДаннымиРегистра);
	
	СкорректироватьОстановленноеОборудованиеДругихРегистраторов(ТаблицаСОтметкамиОстановыИспытания);
	СкорректироватьОборудованиеНаИспытанияхДругихРегистраторов(ТаблицаСОтметкамиОстановыИспытания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Для заполнения на основании

Функция ПолучитьСтруктуруОбъектовРемонтаИПростоевИзДокументаОснования(СсылкаНаДокумент, МассивОР = Неопределено)
	
	ИспользоватьОстановочныеРемонты = Константы.торо_ИспользоватьОстановочныеРемонты.Получить();
	Запрос = Новый Запрос;
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	МероприятияОбъектов.ОбъектРемонта КАК ОбъектРемонта,
		               |	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		               |	РемонтыОборудования.ID КАК ID,
		               |	РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	РемонтныеРаботы.Родитель_ID КАК Родитель_ID
		               |ПОМЕСТИТЬ ИсхДанныеАктРМ
		               |ИЗ
		               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК РемонтыОборудования
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК РемонтныеРаботы
		               |		ПО РемонтыОборудования.ID = РемонтныеРаботы.РемонтыОборудования_ID
		               |			И РемонтыОборудования.Ссылка = РемонтныеРаботы.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРегламентногоМероприятия.МероприятияОбъектов КАК МероприятияОбъектов
		               |		ПО РемонтыОборудования.ID = МероприятияОбъектов.Мероприятие_ID
		               |			И РемонтыОборудования.Ссылка = МероприятияОбъектов.Ссылка
		               |ГДЕ
		               |	РемонтыОборудования.Ссылка = &Ссылка
		               |	И РемонтыОборудования.ОбъектРемонта В(&МассивОР)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		               |	РемонтыОборудования.ID КАК ID,
		               |	РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	РемонтныеРаботы.Родитель_ID КАК Родитель_ID
		               |ПОМЕСТИТЬ ИсхДанныеПодготовка
		               |ИЗ
		               |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК РемонтыОборудования
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК РемонтныеРаботы
		               |		ПО (РемонтныеРаботы.РемонтыОборудования_ID = РемонтыОборудования.ID)
		               |			И (РемонтныеРаботы.Ссылка = РемонтыОборудования.Ссылка)
		               |ГДЕ
		               |	РемонтыОборудования.Ссылка = &Ссылка
		               |	И РемонтыОборудования.ОбъектРемонта В(&МассивОР)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РемонтыОборудования.ОбъектРемонта,
		               |	РемонтыОборудования.ДатаНачала,
		               |	РемонтыОборудования.ДатаОкончания,
		               |	РемонтыОборудования.ID,
		               |	РемонтныеРаботы.РемонтнаяРабота,
		               |	РемонтныеРаботы.Родитель_ID
		               |ИЗ
		               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК РемонтныеРаботы
		               |		ПО РемонтыОборудования.ID = РемонтныеРаботы.РемонтыОборудования_ID
		               |			И РемонтыОборудования.Ссылка = РемонтныеРаботы.Ссылка
		               |ГДЕ
		               |	РемонтыОборудования.Ссылка = &Ссылка
		               |	И РемонтыОборудования.ОбъектРемонта В(&МассивОР)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ИсхДанныеАктРМ.ОбъектРемонта,
		               |	ИсхДанныеАктРМ.ДатаНачала,
		               |	ИсхДанныеАктРМ.ДатаОкончания,
		               |	ИсхДанныеАктРМ.ID,
		               |	ИсхДанныеАктРМ.РемонтнаяРабота,
		               |	ИсхДанныеАктРМ.Родитель_ID
		               |ИЗ
		               |	ИсхДанныеАктРМ КАК ИсхДанныеАктРМ
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	торо_ИсторияПеремещенияМеждуФМ.ОбъектРемонта,
		               |	ИсхДанныеАктРМ.ДатаНачала,
		               |	ИсхДанныеАктРМ.ДатаОкончания,
		               |	ИсхДанныеАктРМ.ID,
		               |	ИсхДанныеАктРМ.РемонтнаяРабота,
		               |	ИсхДанныеАктРМ.Родитель_ID
		               |ИЗ
		               |	ИсхДанныеАктРМ КАК ИсхДанныеАктРМ
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИсторияПеремещенияОборудованияМеждуФМ.СрезПоследних КАК торо_ИсторияПеремещенияМеждуФМ
		               |		ПО ИсхДанныеАктРМ.ОбъектРемонта = торо_ИсторияПеремещенияМеждуФМ.ФункциональноеМесто
		               |ГДЕ
		               |	торо_ИсторияПеремещенияМеждуФМ.Событие = ЗНАЧЕНИЕ(Перечисление.торо_СобытияОборудованияНаФМ.Установка)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	РемонтнаяРабота
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(торо_ВыявленныеДефекты.ОбъектРемонта, ИсхДанныеПодготовка.ОбъектРемонта) КАК ОбъектРемонта,
		               |	ИсхДанныеПодготовка.ДатаНачала КАК ДатаНачала,
		               |	ИсхДанныеПодготовка.ДатаОкончания КАК ДатаОкончания,
		               |	ИсхДанныеПодготовка.ID КАК ID,
		               |	ИсхДанныеПодготовка.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	ИсхДанныеПодготовка.Родитель_ID КАК Родитель_ID,
		               |	Мероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	Мероприятия.ОбъектРемонта.ИндивидуальноеОбслуживаниеОР КАК ИндивидуальноеОбслуживаниеОР
		               |ПОМЕСТИТЬ ИсхДанные
		               |ИЗ
		               |	ИсхДанныеПодготовка КАК ИсхДанныеПодготовка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		               |		ПО ИсхДанныеПодготовка.ID = торо_ВыявленныеДефекты.ID
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК Мероприятия
		               |		ПО ИсхДанныеПодготовка.ID = Мероприятия.ID
		               |ГДЕ
		               |	Мероприятия.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ИсхДанные.ДатаНачала КАК ДатаНачала,
		               |	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
		               |	ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.) КАК ВидПростоя,
		               |	ИсхДанные.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	ИсхДанные.ИндивидуальноеОбслуживаниеОР КАК ИндивидуальноеОбслуживаниеОР
		               |ПОМЕСТИТЬ ВТ_Выгрузка
		               |ИЗ
		               |	ИсхДанные КАК ИсхДанные";
		
		Если ИспользоватьОстановочныеРемонты = Истина Тогда	
			
			Запрос.Текст = Запрос.Текст + ";"+
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Мероприятия.ОбъектРемонта КАК СписокРМ,
			|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.ОбъектРемонта КАК ОбъектРемонта,
			|	Мероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот
			|ПОМЕСТИТЬ СпискиРМ
			|ИЗ
			|	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК Мероприятия
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРегламентногоМероприятия.МероприятияОбъектов КАК торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов
			|		ПО Мероприятия.ID = торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.Мероприятие_ID
			|ГДЕ
			|	Мероприятия.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта,
			|	ВидРемонтныхРабот
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СпискиРМ.ОбъектРемонта КАК ОбъектРемонта,
			|	ЕСТЬNULL(торо_ВерсииТехКартСрезПоследних.ТехКарта, торо_НормативныеРемонтыОборудования.НормативныйРемонт) КАК ТехКарта,
			|	торо_ВерсииТехКартСрезПоследних.Период КАК Период,
			|	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
			|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт,
			|	СпискиРМ.СписокРМ КАК СписокРМ
			|ПОМЕСТИТЬ НормативныеСпискиРемонтов
			|ИЗ
			|	СпискиРМ КАК СпискиРМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних КАК торо_ВерсииТехКартСрезПоследних
			|			ПО торо_НормативныеРемонтыОборудования.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
			|		ПО СпискиРМ.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
			|			И СпискиРМ.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	МИНИМУМ(торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.НомерСтроки) КАК НомерСтроки,
			|	МАКСИМУМ(торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота) КАК РемонтнаяРабота,
			|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
			|	торо_ВерсииТехКартСрезПоследних.ТехКарта КАК ТехКарта
			|ПОМЕСТИТЬ ВТ_ВерхниеТК
			|ИЗ
			|	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаДокумента, ) КАК торо_ВерсииТехКартСрезПоследних
			|		ПО торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
			|ГДЕ
			|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = &Ссылка
			|	И ТИПЗНАЧЕНИЯ(торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота) = ТИП(Справочник.торо_ИдентификаторыТехКарт)
			|
			|СГРУППИРОВАТЬ ПО
			|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
			|	торо_ВерсииТехКартСрезПоследних.ТехКарта
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РемонтыОборудования_ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	ИсхДанные.ДатаНачала КАК ДатаНачала,
			|	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
			|	НормативныеСпискиРемонтов.ТехКарта КАК РемонтнаяРабота,
			|	ИсхДанные.ID КАК ID,
			|	ЕСТЬNULL(НормативныеСпискиРемонтов.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
			|	ИсхДанные.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
			|	ИсхДанные.ИндивидуальноеОбслуживаниеОР КАК ИндивидуальноеОбслуживаниеОР
			|ПОМЕСТИТЬ ТехКарты_ВсеДаты_Подготовка
			|ИЗ
			|	ИсхДанные КАК ИсхДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК НРОборудования
			|		ПО (НРОборудования.ВидРемонта = ИсхДанные.ВидРемонтныхРабот)
			|			И (НРОборудования.ОбъектРемонта = ИсхДанные.ОбъектРемонта)
			|		ПРАВОЕ СОЕДИНЕНИЕ НормативныеСпискиРемонтов КАК НормативныеСпискиРемонтов
			|		ПО ИсхДанные.ОбъектРемонта = НормативныеСпискиРемонтов.ОбъектРемонта
			|			И ИсхДанные.ОбъектРемонта = НормативныеСпискиРемонтов.ОбъектРемонта
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТехКарты_ВсеДаты_Подготовка.ОбъектРемонта КАК ОбъектРемонта,
			|	ТехКарты_ВсеДаты_Подготовка.ДатаНачала КАК ДатаНачала,
			|	ТехКарты_ВсеДаты_Подготовка.ДатаОкончания КАК ДатаОкончания,
			|	ВЫБОР
			|		КОГДА ТехКарты_ВсеДаты_Подготовка.ИндивидуальноеОбслуживаниеОР = ИСТИНА
			|			ТОГДА ЕСТЬNULL(торо_ВерсииТехКартСрезПоследних.ТехКарта, ВТ_ВерхниеТК.ТехКарта)
			|		ИНАЧЕ ВТ_ВерхниеТК.ТехКарта
			|	КОНЕЦ КАК РемонтнаяРабота,
			|	ТехКарты_ВсеДаты_Подготовка.ID КАК ID,
			|	ТехКарты_ВсеДаты_Подготовка.Период КАК Период,
			|	ТехКарты_ВсеДаты_Подготовка.ВидРемонтныхРабот КАК ВидРемонтныхРабот
			|ПОМЕСТИТЬ ВТ_ТехКартыСИО
			|ИЗ
			|	ТехКарты_ВсеДаты_Подготовка КАК ТехКарты_ВсеДаты_Подготовка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних КАК торо_ВерсииТехКартСрезПоследних
			|		ПО ТехКарты_ВсеДаты_Подготовка.РемонтнаяРабота = торо_ВерсииТехКартСрезПоследних.ТехКарта
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВерхниеТК КАК ВТ_ВерхниеТК
			|		ПО ТехКарты_ВсеДаты_Подготовка.ID = ВТ_ВерхниеТК.РемонтыОборудования_ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_ТехКартыСИО.ОбъектРемонта КАК ОбъектРемонта,
			|	ВТ_ТехКартыСИО.ДатаНачала КАК ДатаНачала,
			|	ВТ_ТехКартыСИО.ДатаОкончания КАК ДатаОкончания,
			|	МАКСИМУМ(ВТ_ТехКартыСИО.РемонтнаяРабота) КАК РемонтнаяРабота,
			|	ВТ_ТехКартыСИО.ID КАК ID,
			|	ВТ_ТехКартыСИО.Период КАК Период,
			|	ВТ_ТехКартыСИО.ВидРемонтныхРабот КАК ВидРемонтныхРабот
			|ПОМЕСТИТЬ ТехКарты_ВсеДаты
			|ИЗ
			|	ВТ_ТехКартыСИО КАК ВТ_ТехКартыСИО
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ТехКартыСИО.ОбъектРемонта,
			|	ВТ_ТехКартыСИО.ДатаНачала,
			|	ВТ_ТехКартыСИО.ДатаОкончания,
			|	ВТ_ТехКартыСИО.ID,
			|	ВТ_ТехКартыСИО.Период,
			|	ВТ_ТехКартыСИО.ВидРемонтныхРабот
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ТехКарты_ВсеДаты.Период) КАК Период,
			|	ТехКарты_ВсеДаты.РемонтнаяРабота КАК РемонтнаяРабота,
			|	ТехКарты_ВсеДаты.ID КАК ID,
			|	ТехКарты_ВсеДаты.ОбъектРемонта КАК ОбъектРемонта
			|ПОМЕСТИТЬ ТехКарты_МаксДата
			|ИЗ
			|	ТехКарты_ВсеДаты КАК ТехКарты_ВсеДаты
			|
			|СГРУППИРОВАТЬ ПО
			|	ТехКарты_ВсеДаты.ID,
			|	ТехКарты_ВсеДаты.РемонтнаяРабота,
			|	ТехКарты_ВсеДаты.ОбъектРемонта
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ID,
			|	РемонтнаяРабота
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТехКарты_МаксДата.ID КАК ID,
			|	ТехКарты_ВсеДаты.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
			|	ТехКарты_ВсеДаты.ОбъектРемонта КАК ОбъектРемонта,
			|	ТехКарты_МаксДата.РемонтнаяРабота КАК РемонтнаяРабота,
			|	ТехКарты_ВсеДаты.РемонтнаяРабота.ВидПростоя КАК ВидПростоя,
			|	ТехКарты_ВсеДаты.РемонтнаяРабота.ВремяПростоя КАК ВремяПростоя,
			|	ТехКарты_ВсеДаты.РемонтнаяРабота.ВыполнениеРемонтаТребуетОстановаОборудования КАК ТребуетОстанова
			|ПОМЕСТИТЬ ТехКарты
			|ИЗ
			|	ТехКарты_МаксДата КАК ТехКарты_МаксДата
			|		ПРАВОЕ СОЕДИНЕНИЕ ТехКарты_ВсеДаты КАК ТехКарты_ВсеДаты
			|		ПО ТехКарты_МаксДата.ID = ТехКарты_ВсеДаты.ID
			|			И ТехКарты_МаксДата.Период = ТехКарты_ВсеДаты.Период
			|			И ТехКарты_МаксДата.РемонтнаяРабота = ТехКарты_ВсеДаты.РемонтнаяРабота
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	ИсхДанные.ДатаНачала КАК ДатаНачала,
			|	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
			|	ИсхДанные.ID КАК ID
			|ПОМЕСТИТЬ ИсхДанныеСвернуто
			|ИЗ
			|	ИсхДанные КАК ИсхДанные
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	ИсхДанные.ДатаНачала КАК ДатаНачала,
			|	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
			|	ИсхДанные.ID КАК ID,
			|	ТехКарты.ВремяПростоя КАК ВремяПростоя,
			|	ЕСТЬNULL(ТехКарты.ТребуетОстанова, ЛОЖЬ) КАК ТребуетОстанова,
			|	ЕСТЬNULL(ТехКарты.ВидПростоя, ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.)) КАК ВидПростоя
			|ПОМЕСТИТЬ ФинДанные
			|ИЗ
			|	ИсхДанныеСвернуто КАК ИсхДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТехКарты КАК ТехКарты
			|		ПО ИсхДанные.ID = ТехКарты.ID
			|			И ИсхДанные.ОбъектРемонта = ТехКарты.ОбъектРемонта
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсхДанные.ID,
			|	ИсхДанные.ОбъектРемонта,
			|	ИсхДанные.ДатаНачала,
			|	ИсхДанные.ДатаОкончания,
			|	ТехКарты.ВремяПростоя,
			|	ЕСТЬNULL(ТехКарты.ТребуетОстанова, ЛОЖЬ),
			|	ЕСТЬNULL(ТехКарты.ВидПростоя, ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Выгрузка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФинДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	ФинДанные.ДатаНачала КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА ФинДанные.ТребуетОстанова = ИСТИНА
			|			ТОГДА ДОБАВИТЬКДАТЕ(ФинДанные.ДатаНачала, СЕКУНДА, ФинДанные.ВремяПростоя)
			|		ИНАЧЕ ФинДанные.ДатаОкончания
			|	КОНЕЦ КАК ДатаОкончания,
			|	ФинДанные.ВидПростоя КАК ВидПростоя
			|ПОМЕСТИТЬ ВТ_Выгрузка
			|ИЗ
			|	ФинДанные КАК ФинДанные";
			Запрос.УстановитьПараметр("ДатаДокумента", СсылкаНаДокумент.Дата);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования") Тогда
			Запрос.Текст = Запрос.Текст + ";" + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_Выгрузка.ОбъектРемонта КАК ОбъектРемонта,
			|	ВТ_Выгрузка.ДатаНачала КАК ДатаНачала,
			|	ВТ_Выгрузка.ДатаОкончания КАК ДатаОкончания,
			|	ВТ_Выгрузка.ВидПростоя КАК ВидПростоя,
			|	ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету)) КАК СтатусОР
			|ПОМЕСТИТЬ ВТ_СтатусыОР
			|ИЗ
			|	ВТ_Выгрузка КАК ВТ_Выгрузка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
			|		ПО ВТ_Выгрузка.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_СтатусыОР.ОбъектРемонта КАК ОбъектРемонта,
			|	ВТ_СтатусыОР.ДатаНачала КАК ДатаНачала,
			|	ВТ_СтатусыОР.ДатаОкончания КАК ДатаОкончания,
			|	ВТ_СтатусыОР.ВидПростоя КАК ВидПростоя
			|ИЗ
			|	ВТ_СтатусыОР КАК ВТ_СтатусыОР
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
			|		ПО ВТ_СтатусыОР.СтатусОР = торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
			|ГДЕ
			|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе = ИСТИНА";
		Иначе
			Запрос.Текст = Запрос.Текст + ";" + "ВЫБРАТЬ 
			              |	* 
			              |ИЗ 
			              |	ВТ_Выгрузка КАК ВТ_Выгрузка
			              |УПОРЯДОЧИТЬ ПО
			              |ВТ_Выгрузка.ОбъектРемонта";
		КонецЕсли; 	 
		
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
				Запрос.Текст = "ВЫБРАТЬ
				               |	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
				               |	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
				               |	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
				               |	РемонтыОборудования.ID КАК ID,
				               |	РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
				               |	РемонтныеРаботы.Родитель_ID КАК Родитель_ID
				               |ПОМЕСТИТЬ ИсхДанныеАктРМ
				               |ИЗ
				               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК РемонтныеРаботы
				               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
				               |		ПО РемонтныеРаботы.РемонтыОборудования_ID = РемонтыОборудования.ID
				               |ГДЕ
				               |	РемонтыОборудования.Ссылка = &Ссылка
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
				               |	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
				               |	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
				               |	РемонтыОборудования.ID КАК ID,
				               |	РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
				               |	РемонтныеРаботы.Родитель_ID КАК Родитель_ID
				               |ПОМЕСТИТЬ ИсхДанныеПодготовка
				               |ИЗ
				               |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК РемонтыОборудования
				               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК РемонтныеРаботы
				               |		ПО (РемонтныеРаботы.РемонтыОборудования_ID = РемонтыОборудования.ID)
				               |			И (РемонтныеРаботы.Ссылка = РемонтыОборудования.Ссылка)
				               |ГДЕ
				               |	РемонтыОборудования.Ссылка = &Ссылка
				               |	И РемонтыОборудования.ОбъектРемонта В(&МассивОР)
				               |
				               |ОБЪЕДИНИТЬ ВСЕ
				               |
				               |ВЫБРАТЬ
				               |	РемонтыОборудования.ОбъектРемонта,
				               |	РемонтыОборудования.ДатаНачала,
				               |	РемонтыОборудования.ДатаОкончания,
				               |	РемонтыОборудования.ID,
				               |	РемонтныеРаботы.РемонтнаяРабота,
				               |	РемонтныеРаботы.Родитель_ID
				               |ИЗ
				               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
				               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК РемонтныеРаботы
				               |		ПО РемонтыОборудования.ID = РемонтныеРаботы.РемонтыОборудования_ID
				               |			И РемонтыОборудования.Ссылка = РемонтныеРаботы.Ссылка
				               |ГДЕ
				               |	РемонтыОборудования.Ссылка = &Ссылка
				               |	И РемонтыОборудования.ОбъектРемонта В(&МассивОР)
				               |
				               |ОБЪЕДИНИТЬ ВСЕ
				               |
				               |ВЫБРАТЬ
				               |	ИсхДанныеАктРМ.ОбъектРемонта,
				               |	ИсхДанныеАктРМ.ДатаНачала,
				               |	ИсхДанныеАктРМ.ДатаОкончания,
				               |	ИсхДанныеАктРМ.ID,
				               |	ИсхДанныеАктРМ.РемонтнаяРабота,
				               |	ИсхДанныеАктРМ.Родитель_ID
				               |ИЗ
				               |	ИсхДанныеАктРМ КАК ИсхДанныеАктРМ
				               |
				               |ОБЪЕДИНИТЬ ВСЕ
				               |
				               |ВЫБРАТЬ
				               |	торо_ИсторияПеремещенияМеждуФМ.ОбъектРемонта,
				               |	ИсхДанныеАктРМ.ДатаНачала,
				               |	ИсхДанныеАктРМ.ДатаОкончания,
				               |	ИсхДанныеАктРМ.ID,
				               |	ИсхДанныеАктРМ.РемонтнаяРабота,
				               |	ИсхДанныеАктРМ.Родитель_ID
				               |ИЗ
				               |	ИсхДанныеАктРМ КАК ИсхДанныеАктРМ
				               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИсторияПеремещенияОборудованияМеждуФМ.СрезПоследних КАК торо_ИсторияПеремещенияМеждуФМ
				               |		ПО ИсхДанныеАктРМ.ОбъектРемонта = торо_ИсторияПеремещенияМеждуФМ.ФункциональноеМесто
				               |ГДЕ
				               |	торо_ИсторияПеремещенияМеждуФМ.Событие = ЗНАЧЕНИЕ(Перечисление.торо_СобытияОборудованияНаФМ.Установка)
				               |
				               |ИНДЕКСИРОВАТЬ ПО
				               |	РемонтнаяРабота
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	ЕСТЬNULL(торо_ВыявленныеДефекты.ОбъектРемонта, ИсхДанныеПодготовка.ОбъектРемонта) КАК ОбъектРемонта,
				               |	ИсхДанныеПодготовка.ДатаНачала КАК ДатаНачала,
				               |	ИсхДанныеПодготовка.ДатаОкончания КАК ДатаОкончания,
				               |	ИсхДанныеПодготовка.ID КАК ID,
				               |	ИсхДанныеПодготовка.РемонтнаяРабота КАК РемонтнаяРабота,
				               |	ИсхДанныеПодготовка.Родитель_ID КАК Родитель_ID,
				               |	РемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот
				               |ПОМЕСТИТЬ ИсхДанные
				               |ИЗ
				               |	ИсхДанныеПодготовка КАК ИсхДанныеПодготовка
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
				               |		ПО ИсхДанныеПодготовка.ID = торо_ВыявленныеДефекты.ID
				               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
				               |		ПО ИсхДанныеПодготовка.ID = РемонтыОборудования.ID
				               |ГДЕ
				               |	РемонтыОборудования.Ссылка = &Ссылка
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ РАЗЛИЧНЫЕ
				               |	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
				               |	ИсхДанные.ДатаНачала КАК ДатаНачала,
				               |	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
				               |	ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.) КАК ВидПростоя,
				               |	ИсхДанные.ВидРемонтныхРабот КАК ВидРемонтныхРабот
				               |ПОМЕСТИТЬ ВТ_Выгрузка
				               |ИЗ
				               |	ИсхДанные КАК ИсхДанные";
		
		Если ИспользоватьОстановочныеРемонты = Истина Тогда	
			
			Запрос.Текст = Запрос.Текст + ";"+
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	ИсхДанные.ДатаНачала КАК ДатаНачала,
			|	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
			|	ИсхДанные.ID КАК ID,
			|	ИсхДанные.ВидРемонтныхРабот КАК ВидРемонтныхРабот
			|ПОМЕСТИТЬ ИсхДанныеСвернуто
			|ИЗ
			|	ИсхДанные КАК ИсхДанные
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1 
			|	МИНИМУМ(торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.НомерСтроки) КАК НомерСтроки,
			|	МАКСИМУМ(торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота) КАК РемонтнаяРабота,
			|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
			|	торо_ВерсииТехКартСрезПоследних.ТехКарта КАК ТехКарта
			|ПОМЕСТИТЬ ВТ_ВерхниеТК
			|ИЗ
			|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаДокумента, ) КАК торо_ВерсииТехКартСрезПоследних
			|		ПО торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
			|ГДЕ
			|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = &Ссылка
			|	И ТИПЗНАЧЕНИЯ(торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота) = ТИП(Справочник.торо_ИдентификаторыТехКарт)
			|
			|СГРУППИРОВАТЬ ПО
			|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID,
			|	торо_ВерсииТехКартСрезПоследних.ТехКарта
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	РемонтыОборудования_ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсхДанныеСвернуто.ВидРемонтныхРабот КАК ВидРемонта,
			|	ИсхДанныеСвернуто.ОбъектРемонта КАК ОбъектРемонта,
			|	ЕСТЬNULL(торо_НормативныеРемонтыОборудования.НормативныйРемонт, ВТ_ВерхниеТК.РемонтнаяРабота) КАК НормативныйРемонт,
			|	ЕСТЬNULL(торо_ВерсииТехКартСрезПоследних.ТехКарта, ВТ_ВерхниеТК.ТехКарта) КАК ТехКарта,
			|	ИсхДанныеСвернуто.ID КАК ID
			|ПОМЕСТИТЬ НормативнаяТК
			|ИЗ
			|	ИсхДанныеСвернуто КАК ИсхДанныеСвернуто
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаДокумента, ) КАК торо_ВерсииТехКартСрезПоследних
			|			ПО торо_НормативныеРемонтыОборудования.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
			|		ПО ИсхДанныеСвернуто.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
			|			И ИсхДанныеСвернуто.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВерхниеТК КАК ВТ_ВерхниеТК
			|		ПО ИсхДанныеСвернуто.ID = ВТ_ВерхниеТК.РемонтыОборудования_ID
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта,
			|	ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	ИсхДанные.ДатаНачала КАК ДатаНачала,
			|	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
			|	ИсхДанные.ID КАК ID,
			|	ВЫБОР
			|		КОГДА НЕ НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования ЕСТЬ NULL
			|				И НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования = ИСТИНА
			|				И ИсхДанные.ВидРемонтныхРабот = НормативнаяТК.ВидРемонта
			|			ТОГДА НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ТребуетОстанова,
			|	ВЫБОР
			|		КОГДА НЕ НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования ЕСТЬ NULL
			|				И НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования = ИСТИНА
			|				И ИсхДанные.ВидРемонтныхРабот = НормативнаяТК.ВидРемонта
			|			ТОГДА НормативнаяТК.ТехКарта.ВремяПростоя
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВремяПростоя,
			|	ВЫБОР
			|		КОГДА НЕ НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования ЕСТЬ NULL
			|				И НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования = ИСТИНА
			|				И ИсхДанные.ВидРемонтныхРабот = НормативнаяТК.ВидРемонта
			|			ТОГДА НормативнаяТК.ТехКарта.ВидПростоя
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидПростоя
			|ПОМЕСТИТЬ ФинДанные
			|ИЗ
			|	ИсхДанныеСвернуто КАК ИсхДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ НормативнаяТК КАК НормативнаяТК
			|		ПО (НормативнаяТК.ID = ИсхДанные.ID)
			|			И (НормативнаяТК.ОбъектРемонта = ИсхДанные.ОбъектРемонта)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Выгрузка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФинДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	ФинДанные.ДатаНачала КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА ФинДанные.ТребуетОстанова = ИСТИНА
			|			ТОГДА ДОБАВИТЬКДАТЕ(ФинДанные.ДатаНачала, СЕКУНДА, ФинДанные.ВремяПростоя)
			|		ИНАЧЕ ФинДанные.ДатаОкончания
			|	КОНЕЦ КАК ДатаОкончания,
			|	ФинДанные.ВидПростоя КАК ВидПростоя
			|ПОМЕСТИТЬ ВТ_Выгрузка
			|ИЗ
			|	ФинДанные КАК ФинДанные"; 
			Запрос.УстановитьПараметр("ДатаДокумента", СсылкаНаДокумент.Дата);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования") Тогда
			Запрос.Текст = Запрос.Текст + ";" + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			              |	ВТ_Выгрузка.ОбъектРемонта КАК ОбъектРемонта,
			              |	ВТ_Выгрузка.ДатаНачала КАК ДатаНачала,
			              |	ВТ_Выгрузка.ДатаОкончания КАК ДатаОкончания,
			              |	ВТ_Выгрузка.ВидПростоя КАК ВидПростоя,
			              |	ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету)) КАК СтатусОР
			              |ПОМЕСТИТЬ ВТ_СтатусыОР
			              |ИЗ
			              |	ВТ_Выгрузка КАК ВТ_Выгрузка
			              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
			              |		ПО ВТ_Выгрузка.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта
			              |;
			              |
			              |////////////////////////////////////////////////////////////////////////////////
			              |ВЫБРАТЬ
			              |	ВТ_СтатусыОР.ОбъектРемонта КАК ОбъектРемонта,
			              |	ВТ_СтатусыОР.ДатаНачала КАК ДатаНачала,
			              |	ВТ_СтатусыОР.ДатаОкончания КАК ДатаОкончания,
			              |	ВТ_СтатусыОР.ВидПростоя КАК ВидПростоя
						  |ИЗ
			              |	ВТ_СтатусыОР КАК ВТ_СтатусыОР
			              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
			              |		ПО ВТ_СтатусыОР.СтатусОР = торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
			              |ГДЕ
			              |	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе = ИСТИНА";
		Иначе
			Запрос.Текст = Запрос.Текст + ";" + "ВЫБРАТЬ 
			              |	* 
			              |ИЗ 
			              |	ВТ_Выгрузка КАК ВТ_Выгрузка
			              |УПОРЯДОЧИТЬ ПО
			              |ВТ_Выгрузка.ОбъектРемонта";
		КонецЕсли; 
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	Если МассивОР = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РемонтыОборудования.ОбъектРемонта В(&МассивОР)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("МассивОР", МассивОР);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);
	
КонецФункции

Функция ОбработатьПериодыДляМассиваСОдинаковымОР(МассивЗаписейОдногоОР)
	
	Если ЗначениеЗаполнено(МассивЗаписейОдногоОР) И МассивЗаписейОдногоОР.Количество() = 1 Тогда
		Возврат МассивЗаписейОдногоОР;
	КонецЕсли;
	
	РезультирующийМассивЗаписей = Новый Массив;
	
	Если ЗначениеЗаполнено(МассивЗаписейОдногоОР) Тогда
		 РезультирующийМассивЗаписей.Добавить(МассивЗаписейОдногоОР[0]);
		 
		 Для Индекс = 1 По МассивЗаписейОдногоОР.ВГраница() Цикл
			 
			 ТекущийОР = МассивЗаписейОдногоОР[Индекс];			 
			 Добавлять = СравнитьСЗаписямиРезультирующегоМассиваОР(ТекущийОР, РезультирующийМассивЗаписей);				 
			 Если Добавлять Тогда
				  РезультирующийМассивЗаписей.Добавить(ТекущийОР);
			 КонецЕсли;
			  
		 КонецЦикла;
		 
	КонецЕсли;
		
	Возврат РезультирующийМассивЗаписей;
	
КонецФункции

Функция СравнитьСЗаписямиРезультирующегоМассиваОР (ТекущийОР, РезультирующийМассивОР, Добавлять = Ложь)
	
	Для каждого ТекущийОРВРезультирующем Из РезультирующийМассивОР Цикл
		Добавлять = Ложь;
		Если ТекущийОР.ДатаНачала < ТекущийОРВРезультирующем.ДатаНачала Тогда
			Если ТекущийОР.ДатаОкончания < ТекущийОРВРезультирующем.ДатаНачала Тогда
				Добавлять = Истина;
			ИначеЕсли ТекущийОР.ДатаОкончания >= ТекущийОРВРезультирующем.ДатаНачала И ТекущийОР.ДатаОкончания <= ТекущийОРВРезультирующем.ДатаОкончания Тогда
				ТекущийОРВРезультирующем.ДатаНачала = ТекущийОР.ДатаНачала;
				Добавлять = Ложь;
			ИначеЕсли ТекущийОР.ДатаОкончания > ТекущийОРВРезультирующем.ДатаНачала И ТекущийОР.ДатаОкончания > ТекущийОРВРезультирующем.ДатаОкончания Тогда
				ТекущийОРВРезультирующем.ДатаНачала = ТекущийОР.ДатаНачала;
				ТекущийОРВРезультирующем.ДатаОкончания = ТекущийОР.ДатаОкончания;
				Добавлять = Ложь;
			КонецЕсли;	
		Иначе
			Если ТекущийОР.ДатаНачала > ТекущийОРВРезультирующем.ДатаОкончания Тогда
				Добавлять = Истина;
			ИначеЕсли ТекущийОР.ДатаНачала <= ТекущийОРВРезультирующем.ДатаОкончания И ТекущийОР.ДатаОкончания > ТекущийОРВРезультирующем.ДатаОкончания Тогда
				ТекущийОРВРезультирующем.ДатаОкончания = ТекущийОР.ДатаОкончания;
				Добавлять = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Добавлять;
	
КонецФункции

Процедура ЗаполнитьТабЧастьОбъектыРемонта(МассивЗаписей, СтруктураИерархии, ИспользоватьОстановочныеРемонты = Ложь)
	
	Если ЗначениеЗаполнено(МассивЗаписей) Тогда
		Для Каждого Элемент Из МассивЗаписей Цикл
			НоваяСтрока = ОбъектыРемонта.Добавить();
			НоваяСтрока.ОбъектРемонта = Элемент.ОбъектРемонта;
			НоваяСтрока.ДатаОкончания = Элемент.ДатаОкончания;
			Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
				НоваяСтрока.ДатаНачала = Элемент.ДатаНачала;
				Если ИспользоватьОстановочныеРемонты Тогда
					НоваяСтрока.ВидЭксплуатацииНаПериод = Элемент.ВидПростоя;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.СтруктураИерархии = СтруктураИерархии;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение перед записью

Процедура ЗаполнитьВидыЭксплуатацииВТаблицеОбъектовРемонта()
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации тогда
		Для каждого текСтрока из ОбъектыРемонта цикл
			ТекСтрока.ВидЭксплуатацииНаПериод = Неопределено; 
			ТекСтрока.ДатаНачала = Неопределено; 
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЭксплуатации) Тогда
		ВидНаПериод = (ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
		Для Каждого Строка Из ОбъектыРемонта Цикл
			Если ВидНаПериод Тогда 
				ЗаполнитьПустоеЗначениеВСтроке(Строка, "ВидЭксплуатацииНаПериод", ВидЭксплуатации);
			Иначе
				ЗаполнитьПустоеЗначениеВСтроке(Строка, "ВидЭксплуатации", ВидЭксплуатации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПустоеЗначениеВСтроке(Строка, ИмяКолонки, Значение)
	
	Если Не ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда
		Строка[ИмяКолонки] = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Проверка заполнения

Процедура ПроверитьЗаполнениеВидовПусковПричинПростоя(Отказ)
	
	ВидДокументаЕстьНаПериод = (ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
	ВидПускаПростой = Перечисления.торо_ТипЭксплуатации.Простой;
	ФОУчетПусковОборудования = Константы.торо_УчетПусковОборудования.Получить();
	
	Для Каждого СтрокаТЧ Из ОбъектыРемонта Цикл
		
		Если ФОУчетПусковОборудования Тогда
			Если (ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатации) И СтрокаТЧ.ВидЭксплуатации.ОбязательныйВводВидаПуска
						ИЛИ ЗначениеЗаполнено(ВидЭксплуатации) И Не ВидДокументаЕстьНаПериод И ВидЭксплуатации.ОбязательныйВводВидаПуска И Не ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатации))
					И СтрокаТЧ.ВидЭксплуатации.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Простой И Не ЗначениеЗаполнено(СтрокаТЧ.ВидПуска)
				ИЛИ (ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатацииНаПериод) И СтрокаТЧ.ВидЭксплуатацииНаПериод.ОбязательныйВводВидаПуска 
					И СтрокаТЧ.ВидЭксплуатацииНаПериод.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Простой 
						ИЛИ ЗначениеЗаполнено(ВидЭксплуатации) И ВидДокументаЕстьНаПериод И ВидЭксплуатации.ОбязательныйВводВидаПуска И Не ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатацииНаПериод)) 
					И Не ЗначениеЗаполнено(СтрокаТЧ.ВидПускаНаПериод) 
				
				Тогда
				ШаблонСообщения = НСтр("ru = 'В строке № %1 табличной части ""Объекты ремонта"" не заполнено поле ""Вид пуска"".'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ВидДокументаЕстьНаПериод Тогда
			ОбязательноКЗаполнениюПричинаПростоя = ?(ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатацииНаПериод), СтрокаТЧ.ВидЭксплуатацииНаПериод.ТипЭксплуатации, ВидЭксплуатации.ТипЭксплуатации) = ВидПускаПростой;
			ОбязательноКЗаполнениюПричинаПростоя = ОбязательноКЗаполнениюПричинаПростоя Или СтрокаТЧ.ВидЭксплуатации.ТипЭксплуатации = ВидПускаПростой;
		Иначе
			ОбязательноКЗаполнениюПричинаПростоя = ?(ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатации), СтрокаТЧ.ВидЭксплуатации.ТипЭксплуатации, ВидЭксплуатации.ТипЭксплуатации) = ВидПускаПростой;
		КонецЕсли;
		
		Если ОбязательноКЗаполнениюПричинаПростоя И Не ЗначениеЗаполнено(СтрокаТЧ.ПричинаПростоя) Тогда
			ШаблонСообщения = НСтр("ru = 'В строке № %1 табличной части ""Объекты ремонта"" не заполнено поле ""Причина простоя"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеИерархии(Отказ)
	
	ШаблонСообщения = НСтр("ru = 'В строке №%1 табличной части ""Объекты ремонта"" не заполнено поле ""Структура иерархии"".'");
	
	Для Каждого Строка Из ОбъектыРемонта Цикл
		Если Строка.ИзменятьСостояниеПодчиненныхОР И НЕ ЗначениеЗаполнено(Строка.СтруктураИерархии) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДублиСтрок(Отказ)
	
	ЕстьДубли = Ложь;
	
	Запрос = Новый Запрос;
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации Тогда	
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫРАЗИТЬ(таб.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
		               |	таб.ДатаОкончания КАК ДатаОкончания,
		               |	таб.НомерСтроки,
		               |	1 КАК ДляСуммирования
		               |ПОМЕСТИТЬ Вт_оры
		               |ИЗ
		               |	&ТабОр КАК таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Вт_оры.ОбъектРемонта КАК ОбъектРемонта,
		               |	Вт_оры.ДатаОкончания КАК ДатаОкончания
		               |ПОМЕСТИТЬ ВТ_ОРыУникальные
		               |ИЗ
		               |	Вт_оры КАК Вт_оры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Вт_оры.НомерСтроки,
		               |	Вт_оры.ДляСуммирования КАК ДляСуммирования,
		               |	ВТ_ОРыУникальные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ОРыУникальные.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	ВТ_ОРыУникальные КАК ВТ_ОРыУникальные
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_оры КАК Вт_оры
		               |		ПО ВТ_ОРыУникальные.ОбъектРемонта = Вт_оры.ОбъектРемонта
		               |			И ВТ_ОРыУникальные.ДатаОкончания = Вт_оры.ДатаОкончания
		               |ИТОГИ
		               |	СУММА(ДляСуммирования)
		               |ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания";
					   
		Запрос.УстановитьПараметр("ТабОр", ОбъектыРемонта);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаПоОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоОР.Следующий() Цикл
			
			ВыборкаПоПериоду = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоПериоду.Следующий() Цикл
				Если ВыборкаПоПериоду.ДляСуммирования < 2 Тогда 
					Продолжить; 
				КонецЕсли;
				
				Текст = НСтр("ru = 'Одинаковые строки: '");
				Первый = Истина;
				ДетЗаписи = ВыборкаПоПериоду.Выбрать();
				Пока ДетЗаписи.Следующий() Цикл
					Текст = Текст + ?(Первый, строка(ДетЗаписи.НомерСтроки), ", " + Строка(строка(ДетЗаписи.НомерСтроки)));
					Первый = Ложь;
				КонецЦикла;
				ОбщегоНазначения.СообщитьПользователю(Текст,,,,Отказ);
				ЕстьДубли = Истина;
			КонецЦикла;
			
		КонецЦикла;
	
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫРАЗИТЬ(таб.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
		               |	таб.ДатаОкончания КАК ДатаОкончания,
		               |	таб.ДатаНачала КАК ДатаНачала,
		               |	таб.НомерСтроки,
		               |	1 КАК ДляСуммирования
		               |ПОМЕСТИТЬ Вт_оры
		               |ИЗ
		               |	&ТабОр КАК таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Вт_оры.ОбъектРемонта КАК ОбъектРемонта,
		               |	Вт_оры.ДатаОкончания КАК ДатаОкончания,
		               |	Вт_оры.ДатаНачала КАК ДатаНачала
		               |ПОМЕСТИТЬ ВТ_ОРыУникальные
		               |ИЗ
		               |	Вт_оры КАК Вт_оры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания,
		               |	ДатаНачала
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Вт_оры.НомерСтроки,
		               |	Вт_оры.ДляСуммирования КАК ДляСуммирования,
		               |	ВТ_ОРыУникальные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ОРыУникальные.ДатаОкончания КАК ДатаОкончания,
		               |	ВТ_ОРыУникальные.ДатаНачала КАК ДатаНачала
		               |ИЗ
		               |	ВТ_ОРыУникальные КАК ВТ_ОРыУникальные
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_оры КАК Вт_оры
		               |		ПО ВТ_ОРыУникальные.ОбъектРемонта = Вт_оры.ОбъектРемонта
		               |			И ВТ_ОРыУникальные.ДатаОкончания = Вт_оры.ДатаОкончания
		               |			И ВТ_ОРыУникальные.ДатаНачала = Вт_оры.ДатаНачала
		               |ИТОГИ
		               |	СУММА(ДляСуммирования)
		               |ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания,
		               |	ДатаНачала";
					   
		Запрос.УстановитьПараметр("ТабОр", ОбъектыРемонта);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаПоОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоОР.Следующий() Цикл
			
			ВыборкаПоПериоду = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоПериоду.Следующий() Цикл
				ВыборкаПоПериоду2 = ВыборкаПоПериоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоПериоду2.Следующий() Цикл
				
					Если ВыборкаПоПериоду2.ДляСуммирования < 2 Тогда 
						Продолжить; 
					КонецЕсли;
					
					Текст = НСтр("ru = 'Одинаковые строки: '");
					Первый = Истина;
					ДетЗаписи = ВыборкаПоПериоду2.Выбрать();
					Пока ДетЗаписи.Следующий() Цикл
						Текст = Текст + ?(Первый, строка(ДетЗаписи.НомерСтроки), ", " + Строка(строка(ДетЗаписи.НомерСтроки)));
						Первый = Ложь;
					КонецЦикла;
					ОбщегоНазначения.СообщитьПользователю(Текст,,,,Отказ);
					ЕстьДубли = Истина;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;				   
	
	Если ЕстьДубли тогда 
		ТекстСообщения = НСтр("ru = 'В табличной части документа содержатся некорректные данные, проведение документа отменено!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СравнитьДатыСДатойВводаВЭксплуатацию(ТаблицаОбъектовРемонта, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонта,
	               |	ТаблицаОР.ДатаНачала,
	               |	ТаблицаОР.ДатаОкончания
	               |ПОМЕСТИТЬ ПроверяемаяТаблица
	               |ИЗ
	               |	&ПроверяемаяТаблица КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроверяемаяТаблица.ОбъектРемонта,
	               |	ПроверяемаяТаблица.ДатаОкончания,
	               |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию
	               |ИЗ
	               |	ПроверяемаяТаблица КАК ПроверяемаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ПроверяемаяТаблица.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	               |ГДЕ
	               |	ПроверяемаяТаблица.ДатаОкончания < торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПроверяемаяТаблица.ОбъектРемонта,
	               |	ПроверяемаяТаблица.ДатаНачала,
	               |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию
	               |ИЗ
	               |	ПроверяемаяТаблица КАК ПроверяемаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ПроверяемаяТаблица.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	               |ГДЕ
	               |	ПроверяемаяТаблица.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ПроверяемаяТаблица.ДатаНачала < торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию";
	
	Запрос.УстановитьПараметр("ПроверяемаяТаблица", ТаблицаОбъектовРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 невозможно изменить состояние на дату %2 так как она меньше даты ввода в эксплуатацию %3!'");
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.ДатаОкончания, Выборка.ДатаВводаВЭксплуатацию);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПересечениеПериодовВнутриДокумента(Отказ)
	
	Если ВидОперации <> Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОР.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОР.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаОР.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаОР.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ПроверяемаяТаблица
	|ИЗ
	|	&ПроверяемаяТаблица КАК ТаблицаОР
	|ГДЕ
	|	ТаблицаОР.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроверяемаяТаблица.ОбъектРемонта КАК ОбъектРемонта,
	|	ПроверяемаяТаблица.ДатаНачала КАК ДатаНачала,
	|	ПроверяемаяТаблица.ДатаОкончания КАК ДатаОкончания,
	|	ПроверяемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПроверяемаяТаблица2.ОбъектРемонта КАК КонфликтующийОР,
	|	ПроверяемаяТаблица2.ДатаНачала КАК ДатаНачалаПересечение,
	|	ПроверяемаяТаблица2.ДатаОкончания КАК ДатаОкончанияПересечение
	|ИЗ
	|	ПроверяемаяТаблица КАК ПроверяемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроверяемаяТаблица КАК ПроверяемаяТаблица2
	|		ПО ПроверяемаяТаблица.ОбъектРемонта = ПроверяемаяТаблица2.ОбъектРемонта
	|			И (ПроверяемаяТаблица.ДатаНачала > ПроверяемаяТаблица2.ДатаНачала
	|					И ПроверяемаяТаблица.ДатаНачала < ПроверяемаяТаблица2.ДатаОкончания
	|				ИЛИ ПроверяемаяТаблица.ДатаОкончания > ПроверяемаяТаблица2.ДатаНачала
	|					И ПроверяемаяТаблица.ДатаОкончания < ПроверяемаяТаблица2.ДатаОкончания)";
				   			  
	Запрос.УстановитьПараметр("ПроверяемаяТаблица", ОбъектыРемонта.Выгрузить());
	 
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Для объекта %1, период %2 - %3 содержит некорректные даты (период пересекается с другим периодом в рамках документа)!'");
	ШаблонПутиКДанным = "Объект.ОбъектыРемонта[%1].ДатаНачала";
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.ДатаНачала, Выборка.ДатаОкончания);
		ПутьКДанным = СтрШаблон(ШаблонПутиКДанным, Формат(Выборка.НомерСтроки-1, "ЧГ=0"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ПутьКДанным,, Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Формирование движений

Процедура УстановитьУправляемыеБлокировки(ТаблицаОбъектовРемонта)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ТекущееСостояниеОР");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектовРемонта;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта", "ОбъектРемонта");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ВремяНахожденияВСостоянии");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектовРемонта;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта", "ОбъектРемонта");   
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ВремяНахожденияВСостоянииПоДатам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектовРемонта;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта", "ОбъектРемонта");

	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ВремяПростояОборудования");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектовРемонта;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта", "ОбъектРемонта");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ОборудованиеНаИспытаниях");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектовРемонта;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта", "ОбъектРемонта");

	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ОстановленноеОборудование");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаОбъектовРемонта;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта", "ОбъектРемонта");

	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСостоянияОР(ТаблицаОбъектовРемонта)
	
	Движения.торо_ТекущееСостояниеОР.Записывать = Истина;
	
	Для Каждого СтрокаПроведения Из ТаблицаОбъектовРемонта Цикл
		Движение = Движения.торо_ТекущееСостояниеОР.Добавить();
		Движение.ОбъектРемонта = СтрокаПроведения.ОбъектРемонта;
		Движение.Период = СтрокаПроведения.Период;
		Движение.ВидЭксплуатации = СтрокаПроведения.ВидЭксплуатации;
		Движение.Примечание = СтрокаПроведения.Примечание;
		Если СтрокаПроведения.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда 
			Движение.ПричинаПростоя	= СтрокаПроведения.ПричинаПростоя;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструВремяНахожденияВСостоянии(СтруктураТаблицВремениНахожденияВСостоянии)
	
	Движения.торо_ВремяПростояОборудования.Записывать = Истина;
	Движения.торо_ВремяНахожденияВСостоянии.Записывать = Истина;
	Движения.торо_ВремяНахожденияВСостоянииПоДатам.Записывать = Истина;
		
	Для Каждого Строка Из СтруктураТаблицВремениНахожденияВСостоянии.ТаблицаСвернутая Цикл
		
		Если Строка.Регистратор <> Ссылка 
			ИЛИ НЕ ЗначениеЗаполнено(Строка.ВидЭксплуатации) 
			ИЛИ Строка.ВремяПростоя <= 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Строка.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
			
			Движение = Движения.торо_ВремяПростояОборудования.Добавить();
			Движение.Период = Строка.ДатаНачала; 
			Движение.ОбъектРемонта = Строка.ОбъектРемонта;
			Движение.ПричинаПростоя = Строка.ПричинаПростоя;
			Движение.ДатаЗапуска = Строка.ДатаОкончания;
			Движение.ВремяПростоя = Строка.ВремяПростоя;
			
		КонецЕсли;
		
		Движение = Движения.торо_ВремяНахожденияВСостоянии.Добавить();
		Движение.Период = Строка.ДатаНачала;
		Движение.ДатаИзмененияСостояния = Строка.ДатаОкончания;
		Движение.ОбъектРемонта = Строка.ОбъектРемонта;
		Движение.ВидЭксплуатации = Строка.ВидЭксплуатации;
		Движение.ВремяНахожденияВСостоянии = Строка.ВремяПростоя;
		
	КонецЦикла;   
	
	Для каждого Строка из СтруктураТаблицВремениНахожденияВСостоянии.ТаблицаПоДням Цикл
		
		Если Строка.Регистратор <> Ссылка 
			ИЛИ НЕ ЗначениеЗаполнено(Строка.ВидЭксплуатации) 
			ИЛИ Строка.ВремяПростоя <= 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.торо_ВремяНахожденияВСостоянииПоДатам.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		Движение.ВремяНахожденияВСостоянии = Строка.ВремяПростоя;
	 	
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьВремяНахожденияВСостоянииДругихРегистраторов(ТаблицаВремениНахожденияВСостоянииСвернутая)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНовыхЗаписей.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаНовыхЗаписей.ДатаНачала КАК ДатаНачала,
	|	ТаблицаНовыхЗаписей.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаНовыхЗаписей.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаНовыхЗаписей.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ТаблицаНовыхЗаписей.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаНовыхЗаписей.Регистратор КАК Регистратор,
	|	ТаблицаНовыхЗаписей.ВремяПростоя КАК ВремяПростоя
	|ПОМЕСТИТЬ ВТ_НовыеЗаписи
	|ИЗ
	|	&ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
	|ГДЕ
	|	ТаблицаНовыхЗаписей.Регистратор <> &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОбъектРемонта,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_НовыеЗаписи.Регистратор КАК Регистратор,
	|	ВТ_НовыеЗаписи.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_НовыеЗаписи.ДатаНачала КАК ДатаНачала,
	|	ВТ_НовыеЗаписи.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_НовыеЗаписи.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ВТ_НовыеЗаписи.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ВТ_НовыеЗаписи.ПричинаПростоя КАК ПричинаПростоя,
	|	ВТ_НовыеЗаписи.ВремяПростоя КАК ВремяПростоя,
	|	торо_ВремяНахожденияВСостоянии.Период КАК ДатаНачалаСтарая,
	|	торо_ВремяНахожденияВСостоянии.ВидЭксплуатации КАК ВидЭксплуатацииСтарый,
	|	торо_ВремяНахожденияВСостоянии.ВидЭксплуатации.ТипЭксплуатации КАК ТипЭксплуатацииСтарый,
	|	""Изменить"" КАК Обработка
	|ИЗ
	|	ВТ_НовыеЗаписи КАК ВТ_НовыеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии
	|		ПО ВТ_НовыеЗаписи.Регистратор = торо_ВремяНахожденияВСостоянии.Регистратор
	|			И ВТ_НовыеЗаписи.ОбъектРемонта = торо_ВремяНахожденияВСостоянии.ОбъектРемонта
	|			И ВТ_НовыеЗаписи.ДатаОкончания = торо_ВремяНахожденияВСостоянии.ДатаИзмененияСостояния
	|ГДЕ
	|	(ВТ_НовыеЗаписи.ДатаНачала <> торо_ВремяНахожденияВСостоянии.Период
	|			ИЛИ ВТ_НовыеЗаписи.ВидЭксплуатации <> торо_ВремяНахожденияВСостоянии.ВидЭксплуатации
	|			ИЛИ ВТ_НовыеЗаписи.ВремяПростоя <> торо_ВремяНахожденияВСостоянии.ВремяНахожденияВСостоянии)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НовыеЗаписи.Регистратор,
	|	ВТ_НовыеЗаписи.ОбъектРемонта,
	|	ВТ_НовыеЗаписи.ДатаНачала,
	|	ВТ_НовыеЗаписи.ДатаОкончания,
	|	ВТ_НовыеЗаписи.ВидЭксплуатации,
	|	ВТ_НовыеЗаписи.ТипЭксплуатации,
	|	ВТ_НовыеЗаписи.ПричинаПростоя,
	|	ВТ_НовыеЗаписи.ВремяПростоя,
	|	торо_ВремяНахожденияВСостоянии.Период,
	|	торо_ВремяНахожденияВСостоянии.ВидЭксплуатации,
	|	торо_ВремяНахожденияВСостоянии.ВидЭксплуатации.ТипЭксплуатации,
	|	""Добавить""
	|ИЗ
	|	ВТ_НовыеЗаписи КАК ВТ_НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии
	|		ПО ВТ_НовыеЗаписи.Регистратор = торо_ВремяНахожденияВСостоянии.Регистратор
	|			И ВТ_НовыеЗаписи.ОбъектРемонта = торо_ВремяНахожденияВСостоянии.ОбъектРемонта
	|			И ВТ_НовыеЗаписи.ДатаОкончания = торо_ВремяНахожденияВСостоянии.ДатаИзмененияСостояния
	|ГДЕ
	|	торо_ВремяНахожденияВСостоянии.ОбъектРемонта ЕСТЬ NULL
	|	И ВТ_НовыеЗаписи.ВремяПростоя > 0
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("ТаблицаНовыхЗаписей", ТаблицаВремениНахожденияВСостоянииСвернутая);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		ВыборкаИзмененныхЗаписей = ВыборкаПоРегистраторам.Выбрать(ОбходРезультатаЗапроса.Прямой);
		ИзменитьДвиженияРегистратора_ВремяНахожденияВСостоянии(ВыборкаПоРегистраторам.Регистратор, ВыборкаИзмененныхЗаписей);
		
		ВыборкаИзмененныхЗаписей.Сбросить();
		ИзменитьДвиженияРегистратора_ВремяПростояОборудования(ВыборкаПоРегистраторам.Регистратор, ВыборкаИзмененныхЗаписей);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьДвиженияРегистратора_ВремяНахожденияВСостоянии(Регистратор, ВыборкаИзмененныхЗаписей)
		
	ИзмененияБыли = Ложь;
	
	МассивЗаписейКУдалению = Новый Массив;
	
	НаборЗаписейРегистратора = РегистрыНакопления.торо_ВремяНахожденияВСостоянии.СоздатьНаборЗаписей();
	НаборЗаписейРегистратора.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписейРегистратора.Прочитать();
	
	Пока ВыборкаИзмененныхЗаписей.Следующий() Цикл
		Если ВыборкаИзмененныхЗаписей.Обработка = "Добавить" Тогда
			
			Запись = НаборЗаписейРегистратора.Добавить();
			Запись.Период = ВыборкаИзмененныхЗаписей.ДатаНачала;
			Запись.ОбъектРемонта = ВыборкаИзмененныхЗаписей.ОбъектРемонта;
			Запись.ДатаИзмененияСостояния = ВыборкаИзмененныхЗаписей.ДатаОкончания;
			Запись.ВидЭксплуатации = ВыборкаИзмененныхЗаписей.ВидЭксплуатации;
			Запись.ВремяНахожденияВСостоянии = ВыборкаИзмененныхЗаписей.ВремяПростоя;
			
			ИзмененияБыли = Истина;

		Иначе
			
			Для каждого Запись из НаборЗаписейРегистратора Цикл
				Если Запись.ОбъектРемонта = ВыборкаИзмененныхЗаписей.ОбъектРемонта
					И Запись.ДатаИзмененияСостояния = ВыборкаИзмененныхЗаписей.ДатаОкончания Тогда
					
					Если ВыборкаИзмененныхЗаписей.ВремяПростоя <=0 
						ИЛИ НЕ ЗначениеЗаполнено(ВыборкаИзмененныхЗаписей.ВидЭксплуатации) Тогда
						МассивЗаписейКУдалению.Добавить(Запись);
					Иначе
						Запись.Период = ВыборкаИзмененныхЗаписей.ДатаНачала;
						Запись.ВидЭксплуатации = ВыборкаИзмененныхЗаписей.ВидЭксплуатации;
						Запись.ВремяНахожденияВСостоянии = ВыборкаИзмененныхЗаписей.ВремяПростоя;
					КонецЕсли;
					
					ИзмененияБыли = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаписьКУдалению из МассивЗаписейКУдалению Цикл
		НаборЗаписейРегистратора.Удалить(ЗаписьКУдалению);
	КонецЦикла;
	
	Если ИзмененияБыли Тогда
		НаборЗаписейРегистратора.Записать(Истина);
		
		ШаблонСообщения = НСтр("ru='Выполнен пересчет времени нахождения объектов ремонта в состояниях для документа %1'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, Регистратор), Регистратор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьДвиженияРегистратора_ВремяПростояОборудования(Регистратор, ВыборкаИзмененныхЗаписей)
	
	ИзмененияБыли = Ложь;
	
	МассивЗаписейКУдалению = Новый Массив;
	
	НаборЗаписейРегистратора = РегистрыНакопления.торо_ВремяПростояОборудования.СоздатьНаборЗаписей();
	НаборЗаписейРегистратора.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписейРегистратора.Прочитать();
	
	// Удаляем записи, у которых был тип эксплуатации Простой, а стал другой.
	// Добавлем записи, которых не было, но у них стал тип эксплуатации Простой.
	// И изменяем записи, которые, как были, так и остались простоями.
	
	Пока ВыборкаИзмененныхЗаписей.Следующий() Цикл
		ЗаписьНайдена = Ложь;
		
		Для каждого Запись из НаборЗаписейРегистратора Цикл
			Если Запись.ОбъектРемонта = ВыборкаИзмененныхЗаписей.ОбъектРемонта
				И Запись.ДатаЗапуска = ВыборкаИзмененныхЗаписей.ДатаОкончания Тогда
				
				ЗаписьНайдена = Истина;
				Если ВыборкаИзмененныхЗаписей.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Простой Тогда
					МассивЗаписейКУдалению.Добавить(Запись);	
				Иначе
					Запись.Период = ВыборкаИзмененныхЗаписей.ДатаНачала; 
					Запись.ПричинаПростоя = ВыборкаИзмененныхЗаписей.ПричинаПростоя;
					Запись.ВремяПростоя = ВыборкаИзмененныхЗаписей.ВремяПростоя;
				КонецЕсли;
				
				ИзмененияБыли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗаписьНайдена И ВыборкаИзмененныхЗаписей.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
			Запись = НаборЗаписейРегистратора.Добавить();
			Запись.Период = ВыборкаИзмененныхЗаписей.ДатаНачала; 
			Запись.ОбъектРемонта = ВыборкаИзмененныхЗаписей.ОбъектРемонта;
			Запись.ПричинаПростоя = ВыборкаИзмененныхЗаписей.ПричинаПростоя;
			Запись.ДатаЗапуска = ВыборкаИзмененныхЗаписей.ДатаОкончания;
			Запись.ВремяПростоя = ВыборкаИзмененныхЗаписей.ВремяПростоя;
			
			ИзмененияБыли = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ЗаписьКУдалению из МассивЗаписейКУдалению Цикл
		НаборЗаписейРегистратора.Удалить(ЗаписьКУдалению);
	КонецЦикла;
	
	Если ИзмененияБыли Тогда
		НаборЗаписейРегистратора.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьВремяНахожденияВСостоянииПоДнямДругихРегистраторов(ТаблицаВремениНахожденияВСостоянииПоДням)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНовыхЗаписей.Период КАК Период,
	|	ТаблицаНовыхЗаписей.Регистратор КАК Регистратор,
	|	ТаблицаНовыхЗаписей.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаНовыхЗаписей.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ТаблицаНовыхЗаписей.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаНовыхЗаписей.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаНовыхЗаписей.ВремяПростоя КАК ВремяНахожденияВСостоянии,
	|	ТаблицаНовыхЗаписей.ДатаНачала КАК ДатаНачала,
	|	ТаблицаНовыхЗаписей.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаНовыхЗаписей.ГрафикРаботы КАК ГрафикРаботы,
	|	НАЧАЛОПЕРИОДА(ТаблицаНовыхЗаписей.Период, ДЕНЬ) КАК НачалоДня,
	|	КОНЕЦПЕРИОДА(ТаблицаНовыхЗаписей.Период, ДЕНЬ) КАК КонецДня
	|ПОМЕСТИТЬ ВТ_НовыеЗаписи
	|ИЗ
	|	&ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
	|ГДЕ
	|	ТаблицаНовыхЗаписей.ВремяПростоя > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_НовыеЗаписи.Регистратор КАК Регистратор,
	|	ВТ_НовыеЗаписи.ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ ВТ_Отбор
	|ИЗ
	|	ВТ_НовыеЗаписи КАК ВТ_НовыеЗаписи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОбъектРемонта	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ВремяНахожденияВСостоянииПоДатам.Период КАК Период,
	|	торо_ВремяНахожденияВСостоянииПоДатам.Регистратор КАК Регистратор,
	|	торо_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВремяНахожденияВСостоянииПоДатам.ТипЭксплуатации КАК ТипЭксплуатации,
	|	торо_ВремяНахожденияВСостоянииПоДатам.ВидЭксплуатации КАК ВидЭксплуатации,
	|	торо_ВремяНахожденияВСостоянииПоДатам.ПричинаПростоя КАК ПричинаПростоя,
	|	торо_ВремяНахожденияВСостоянииПоДатам.ВремяНахожденияВСостоянии КАК ВремяНахожденияВСостоянии,
	|	торо_ВремяНахожденияВСостоянииПоДатам.ДатаНачала КАК ДатаНачала,
	|	торо_ВремяНахожденияВСостоянииПоДатам.ДатаОкончания КАК ДатаОкончания,
	|	торо_ВремяНахожденияВСостоянииПоДатам.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТ_ВремяНахожденияВСостоянииПоДатам
	|ИЗ
	|	РегистрНакопления.торо_ВремяНахожденияВСостоянииПоДатам КАК торо_ВремяНахожденияВСостоянииПоДатам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Отбор КАК ВТ_Отбор
	|		ПО торо_ВремяНахожденияВСостоянииПоДатам.Регистратор = ВТ_Отбор.Регистратор
	|			И торо_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта = ВТ_Отбор.ОбъектРемонта
	|			И (торо_ВремяНахожденияВСостоянииПоДатам.Регистратор <> &Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.Период КАК Период,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.Регистратор КАК Регистратор,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ПричинаПростоя КАК ПричинаПростоя,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ВремяНахожденияВСостоянии КАК ВремяНахожденияВСостоянии,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ДатаНачала КАК ДатаНачала,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТ_ЗаписиКУдалению
	|ИЗ
	|	ВТ_ВремяНахожденияВСостоянииПоДатам КАК ВТ_ВремяНахожденияВСостоянииПоДатам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НовыеЗаписи КАК ВТ_НовыеЗаписи
	|		ПО (ВТ_ВремяНахожденияВСостоянииПоДатам.Период МЕЖДУ ВТ_НовыеЗаписи.НачалоДня И ВТ_НовыеЗаписи.КонецДня)
	|			И (ВТ_ВремяНахожденияВСостоянииПоДатам.Период >= ВТ_НовыеЗаписи.ДатаНачала И ВТ_ВремяНахожденияВСостоянииПоДатам.Период < ВТ_НовыеЗаписи.ДатаОкончания)
	|			И ВТ_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта = ВТ_НовыеЗаписи.ОбъектРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.Период КАК Период,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.Регистратор КАК Регистратор,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ПричинаПростоя КАК ПричинаПростоя,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ВремяНахожденияВСостоянии КАК ВремяНахожденияВСостоянии,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ДатаНачала КАК ДатаНачала,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ВремяНахожденияВСостоянииПоДатам.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТ_ОставшиесяЗаписи
	|ИЗ
	|	ВТ_ВремяНахожденияВСостоянииПоДатам КАК ВТ_ВремяНахожденияВСостоянииПоДатам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаписиКУдалению КАК ВТ_ЗаписиКУдалению
	|		ПО ВТ_ВремяНахожденияВСостоянииПоДатам.Период = ВТ_ЗаписиКУдалению.Период
	|			И ВТ_ВремяНахожденияВСостоянииПоДатам.Регистратор = ВТ_ЗаписиКУдалению.Регистратор
	|			И ВТ_ВремяНахожденияВСостоянииПоДатам.ОбъектРемонта = ВТ_ЗаписиКУдалению.ОбъектРемонта
	|ГДЕ
	|	ВТ_ЗаписиКУдалению.ОбъектРемонта ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НовыеЗаписи.Период КАК Период,
	|	ВТ_НовыеЗаписи.Регистратор КАК Регистратор,
	|	ВТ_НовыеЗаписи.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_НовыеЗаписи.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ВТ_НовыеЗаписи.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ВТ_НовыеЗаписи.ПричинаПростоя КАК ПричинаПростоя,
	|	ВТ_НовыеЗаписи.ВремяНахожденияВСостоянии КАК ВремяНахожденияВСостоянии,
	|	ВТ_НовыеЗаписи.ДатаНачала КАК ДатаНачала,
	|	ВТ_НовыеЗаписи.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_НовыеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
	|	""Добавить"" КАК Обработка,
	|	1 КАК Сортировка
	|ИЗ
	|	ВТ_НовыеЗаписи КАК ВТ_НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОставшиесяЗаписи КАК ВТ_ОставшиесяЗаписи
	|		ПО ВТ_НовыеЗаписи.Период = ВТ_ОставшиесяЗаписи.Период
	|			И ВТ_НовыеЗаписи.Регистратор = ВТ_ОставшиесяЗаписи.Регистратор
	|			И ВТ_НовыеЗаписи.ОбъектРемонта = ВТ_ОставшиесяЗаписи.ОбъектРемонта
	|ГДЕ
	|	ВТ_НовыеЗаписи.Регистратор <> &Ссылка
	|	И ВТ_ОставшиесяЗаписи.ОбъектРемонта ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаписиКУдалению.Период,
	|	ВТ_ЗаписиКУдалению.Регистратор,
	|	ВТ_ЗаписиКУдалению.ОбъектРемонта,
	|	ВТ_ЗаписиКУдалению.ТипЭксплуатации,
	|	ВТ_ЗаписиКУдалению.ВидЭксплуатации,
	|	ВТ_ЗаписиКУдалению.ПричинаПростоя,
	|	ВТ_ЗаписиКУдалению.ВремяНахожденияВСостоянии,
	|	ВТ_ЗаписиКУдалению.ДатаНачала,
	|	ВТ_ЗаписиКУдалению.ДатаОкончания,
	|	ВТ_ЗаписиКУдалению.ГрафикРаботы,
	|	""Удалить"",
	|	0 КАК Сортировка
	|ИЗ
	|	ВТ_ЗаписиКУдалению КАК ВТ_ЗаписиКУдалению
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка, Период
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("ТаблицаНовыхЗаписей", ТаблицаВремениНахожденияВСостоянииПоДням);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		Выборка = ВыборкаПоРегистраторам.Выбрать(ОбходРезультатаЗапроса.Прямой);
		ИзменитьДвиженияРегистратора_ВремяНахожденияВСостоянииПоДням(ВыборкаПоРегистраторам.Регистратор, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьДвиженияРегистратора_ВремяНахожденияВСостоянииПоДням(Регистратор, Выборка)
		
	ИзмененияБыли = Ложь;
	
	МассивЗаписейКУдалению = Новый Массив;
	
	НаборЗаписейРегистратора = РегистрыНакопления.торо_ВремяНахожденияВСостоянииПоДатам.СоздатьНаборЗаписей();
	НаборЗаписейРегистратора.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписейРегистратора.Прочитать();
	
	ТаблицаНабораЗаписей = НаборЗаписейРегистратора.Выгрузить();
	ТаблицаНабораЗаписей.Индексы.Добавить("ОбъектРемонта, Период");
	
	СтруктураПоиска = Новый Структура("ОбъектРемонта, Период");
	
	Пока Выборка.Следующий() Цикл 
		
		Если Выборка.Обработка = "Удалить" Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			
			НайденныеСтроки = ТаблицаНабораЗаписей.НайтиСтроки(СтруктураПоиска);
			Для Каждого Запись из НайденныеСтроки Цикл
				МассивЗаписейКУдалению.Добавить(Запись);	
			КонецЦикла; 
			
		ИначеЕсли Выборка.Обработка = "Добавить" Тогда
			
			Запись = ТаблицаНабораЗаписей.Добавить(); 
			Запись.Активность = Истина;
			
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЕсли; 
		
		ИзмененияБыли = Истина;
	КонецЦикла;
	
	Для каждого ЗаписьКУдалению из МассивЗаписейКУдалению Цикл
		ТаблицаНабораЗаписей.Удалить(ЗаписьКУдалению);
	КонецЦикла;
	
	Если ИзмененияБыли Тогда  
		НаборЗаписейРегистратора.Загрузить(ТаблицаНабораЗаписей);
		НаборЗаписейРегистратора.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструКоличествоПусковОР(ТаблицаОбъектовРемонта)
	
	Движения.торо_КоличествоПусковОР.Записывать = Истина;
	
	Для каждого Строка из ТаблицаОбъектовРемонта Цикл
		Если ЗначениеЗаполнено(Строка.ВидПуска) Тогда
			Движение = Движения.торо_КоличествоПусковОР.Добавить();
			Движение.ОбъектРемонта = Строка.ОбъектРемонта;
			Движение.Период = Строка.Период;
			Движение.ВидПуска = Строка.ВидПуска;
			Движение.Количество = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструОстановленноеОборудование(ТаблицаСОтметкамиОстановыИспытания)
	
	Движения.торо_ОстановленноеОборудование.Записывать = Истина;
	Движения.торо_ОборудованиеНаИспытаниях.Записывать = Истина;
	
	Для каждого Строка из ТаблицаСОтметкамиОстановыИспытания Цикл
		Если Строка.Регистратор <> Ссылка Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Строка.РасходОстановленное Тогда
			Движение = Движения.торо_ОстановленноеОборудование.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Строка.Период;
			Движение.ОбъектРемонта = Строка.ОбъектРемонта;
			Движение.Количество = 1;
			Движение.ПричинаПростоя = Строка.ПричинаПростоя;
		КонецЕсли;
		
		Если Строка.ПриходОстановленное Тогда
			Движение = Движения.торо_ОстановленноеОборудование.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Строка.Период;
			Движение.ОбъектРемонта = Строка.ОбъектРемонта;
			Движение.Количество 	= 1;
			Движение.ПричинаПростоя = Строка.ПричинаПростоя;
		КонецЕсли;

		Если Строка.РасходИспытания Тогда
			Движение = Движения.торо_ОборудованиеНаИспытаниях.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Строка.Период;
			Движение.ОбъектРемонта = Строка.ОбъектРемонта;
			Движение.Количество = 1;
		КонецЕсли;

		Если Строка.ПриходИспытания Тогда
			Движение = Движения.торо_ОборудованиеНаИспытаниях.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Строка.Период;
			Движение.ОбъектРемонта = Строка.ОбъектРемонта;
			Движение.Количество = 1;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура СкорректироватьОстановленноеОборудованиеДругихРегистраторов(ТаблицаСОтметкамиОстановыИспытания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор КАК Регистратор,
	|	ТаблицаСОтметками.Период КАК Период,
	|	ТаблицаСОтметками.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаСОтметками.ПриходОстановленное КАК ПриходОстановленное,
	|	ТаблицаСОтметками.РасходОстановленное КАК РасходОстановленное,
	|	ТаблицаСОтметками.ПриходИспытания КАК ПриходИспытания,
	|	ТаблицаСОтметками.РасходИспытания КАК РасходИспытания
	|ПОМЕСТИТЬ ТаблицаСОтметками
	|ИЗ
	|	&ТаблицаСОтметками КАК ТаблицаСОтметками
	|ГДЕ
	|	ТаблицаСОтметками.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор КАК Регистратор,
	|	ТаблицаСОтметками.Период КАК Период,
	|	ТаблицаСОтметками.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя КАК ПричинаПростоя,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_НужноеОстановленное
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|ГДЕ
	|	ТаблицаСОтметками.ПриходОстановленное = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор,
	|	ТаблицаСОтметками.Период,
	|	ТаблицаСОтметками.ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|ГДЕ
	|	ТаблицаСОтметками.РасходОстановленное = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.ОбъектРемонта КАК ОбъектРемонта,
	|	МИНИМУМ(ТаблицаСОтметками.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_МинимальныеДаты
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСОтметками.ОбъектРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор КАК Регистратор,
	|	ТаблицаСОтметками.Период КАК Период,
	|	ТаблицаСОтметками.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя КАК ПричинаПростоя,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_НенужноеОстановленное
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МинимальныеДаты КАК ВТ_МинимальныеДаты
	|		ПО ТаблицаСОтметками.ОбъектРемонта = ВТ_МинимальныеДаты.ОбъектРемонта
	|			И ТаблицаСОтметками.Период = ВТ_МинимальныеДаты.Период
	|ГДЕ
	|	ТаблицаСОтметками.ПриходОстановленное = ЛОЖЬ
	|	И ВТ_МинимальныеДаты.Период ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор,
	|	ТаблицаСОтметками.Период,
	|	ТаблицаСОтметками.ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МинимальныеДаты КАК ВТ_МинимальныеДаты
	|		ПО ТаблицаСОтметками.ОбъектРемонта = ВТ_МинимальныеДаты.ОбъектРемонта
	|			И ТаблицаСОтметками.Период = ВТ_МинимальныеДаты.Период
	|ГДЕ
	|	ТаблицаСОтметками.РасходОстановленное = ЛОЖЬ
	|	И ВТ_МинимальныеДаты.Период ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_НужноеОстановленное.Регистратор КАК Регистратор,
	|	ВТ_НужноеОстановленное.Период КАК Период,
	|	ВТ_НужноеОстановленное.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_НужноеОстановленное.ПричинаПростоя КАК ПричинаПростоя,
	|	ВТ_НужноеОстановленное.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА торо_ОстановленноеОборудование.ОбъектРемонта ЕСТЬ NULL
	|			ТОГДА ""Добавить""
	|		ИНАЧЕ ""Изменить""
	|	КОНЕЦ КАК Обработка,
	|	1 КАК Количество
	|ИЗ
	|	ВТ_НужноеОстановленное КАК ВТ_НужноеОстановленное
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ОстановленноеОборудование КАК торо_ОстановленноеОборудование
	|		ПО ВТ_НужноеОстановленное.Период = торо_ОстановленноеОборудование.Период
	|			И ВТ_НужноеОстановленное.Регистратор = торо_ОстановленноеОборудование.Регистратор
	|			И ВТ_НужноеОстановленное.ОбъектРемонта = торо_ОстановленноеОборудование.ОбъектРемонта
	|			И ВТ_НужноеОстановленное.ВидДвижения = торо_ОстановленноеОборудование.ВидДвижения
	|ГДЕ
	|	ВЫБОР
	|			КОГДА торо_ОстановленноеОборудование.ОбъектРемонта ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_НужноеОстановленное.ПричинаПростоя <> торо_ОстановленноеОборудование.ПричинаПростоя
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НенужноеОстановленное.Регистратор,
	|	ВТ_НенужноеОстановленное.Период,
	|	ВТ_НенужноеОстановленное.ОбъектРемонта,
	|	ВТ_НенужноеОстановленное.ПричинаПростоя,
	|	ВТ_НенужноеОстановленное.ВидДвижения,
	|	""Удалить"",
	|	1
	|ИЗ
	|	ВТ_НенужноеОстановленное КАК ВТ_НенужноеОстановленное
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ОстановленноеОборудование КАК торо_ОстановленноеОборудование
	|		ПО ВТ_НенужноеОстановленное.Период = торо_ОстановленноеОборудование.Период
	|			И ВТ_НенужноеОстановленное.Регистратор = торо_ОстановленноеОборудование.Регистратор
	|			И ВТ_НенужноеОстановленное.ОбъектРемонта = торо_ОстановленноеОборудование.ОбъектРемонта
	|			И ВТ_НенужноеОстановленное.ВидДвижения = торо_ОстановленноеОборудование.ВидДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектРемонта,
	|	Период
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("ТаблицаСОтметками", ТаблицаСОтметкамиОстановыИспытания);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		ВыборкаИзменений = ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		МассивЗаписейКУдалению = Новый Массив;
		
		НаборЗаписей = РегистрыНакопления.торо_ОстановленноеОборудование.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		НаборЗаписей.Прочитать();
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			Если ВыборкаИзменений.Обработка = "Добавить" Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаИзменений);
			Иначе
				
				НайденнаяЗапись = Неопределено;
				Для каждого Запись из НаборЗаписей Цикл
					Если Запись.ОбъектРемонта = ВыборкаИзменений.ОбъектРемонта
						И Запись.Период = ВыборкаИзменений.Период
						И Запись.ВидДвижения = ВыборкаИзменений.ВидДвижения Тогда
						
						НайденнаяЗапись = Запись;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
				Если НайденнаяЗапись = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыборкаИзменений.Обработка = "Удалить" Тогда
					МассивЗаписейКУдалению.Добавить(НайденнаяЗапись);
				Иначе
					ЗаполнитьЗначенияСвойств(НайденнаяЗапись, ВыборкаИзменений);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ЗаписьКУдалению из МассивЗаписейКУдалению Цикл
			НаборЗаписей.Удалить(ЗаписьКУдалению);
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьОборудованиеНаИспытанияхДругихРегистраторов(ТаблицаСОтметкамиОстановыИспытания)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор КАК Регистратор,
	|	ТаблицаСОтметками.Период КАК Период,
	|	ТаблицаСОтметками.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаСОтметками.ПриходОстановленное КАК ПриходОстановленное,
	|	ТаблицаСОтметками.РасходОстановленное КАК РасходОстановленное,
	|	ТаблицаСОтметками.ПриходИспытания КАК ПриходИспытания,
	|	ТаблицаСОтметками.РасходИспытания КАК РасходИспытания
	|ПОМЕСТИТЬ ТаблицаСОтметками
	|ИЗ
	|	&ТаблицаСОтметками КАК ТаблицаСОтметками
	|ГДЕ
	|	ТаблицаСОтметками.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор КАК Регистратор,
	|	ТаблицаСОтметками.Период КАК Период,
	|	ТаблицаСОтметками.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя КАК ПричинаПростоя,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_НужноеОстановленное
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|ГДЕ
	|	ТаблицаСОтметками.ПриходИспытания = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор,
	|	ТаблицаСОтметками.Период,
	|	ТаблицаСОтметками.ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|ГДЕ
	|	ТаблицаСОтметками.РасходИспытания = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.ОбъектРемонта КАК ОбъектРемонта,
	|	МИНИМУМ(ТаблицаСОтметками.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_МинимальныеДаты
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСОтметками.ОбъектРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор КАК Регистратор,
	|	ТаблицаСОтметками.Период КАК Период,
	|	ТаблицаСОтметками.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя КАК ПричинаПростоя,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_НенужноеОстановленное
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МинимальныеДаты КАК ВТ_МинимальныеДаты
	|		ПО ТаблицаСОтметками.ОбъектРемонта = ВТ_МинимальныеДаты.ОбъектРемонта
	|			И ТаблицаСОтметками.Период = ВТ_МинимальныеДаты.Период
	|ГДЕ
	|	ТаблицаСОтметками.ПриходИспытания = ЛОЖЬ
	|	И ВТ_МинимальныеДаты.Период ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСОтметками.Регистратор,
	|	ТаблицаСОтметками.Период,
	|	ТаблицаСОтметками.ОбъектРемонта,
	|	ТаблицаСОтметками.ПричинаПростоя,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ТаблицаСОтметками КАК ТаблицаСОтметками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МинимальныеДаты КАК ВТ_МинимальныеДаты
	|		ПО ТаблицаСОтметками.ОбъектРемонта = ВТ_МинимальныеДаты.ОбъектРемонта
	|			И ТаблицаСОтметками.Период = ВТ_МинимальныеДаты.Период
	|ГДЕ
	|	ТаблицаСОтметками.РасходИспытания = ЛОЖЬ
	|	И ВТ_МинимальныеДаты.Период ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_НужноеОстановленное.Регистратор КАК Регистратор,
	|	ВТ_НужноеОстановленное.Период КАК Период,
	|	ВТ_НужноеОстановленное.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_НужноеОстановленное.ПричинаПростоя КАК ПричинаПростоя,
	|	ВТ_НужноеОстановленное.ВидДвижения КАК ВидДвижения,
	|	""Добавить"" КАК Обработка,
	|	1 КАК Количество
	|ИЗ
	|	ВТ_НужноеОстановленное КАК ВТ_НужноеОстановленное
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ОборудованиеНаИспытаниях КАК торо_ОборудованиеНаИспытаниях
	|		ПО ВТ_НужноеОстановленное.Период = торо_ОборудованиеНаИспытаниях.Период
	|			И ВТ_НужноеОстановленное.Регистратор = торо_ОборудованиеНаИспытаниях.Регистратор
	|			И ВТ_НужноеОстановленное.ОбъектРемонта = торо_ОборудованиеНаИспытаниях.ОбъектРемонта
	|			И ВТ_НужноеОстановленное.ВидДвижения = торо_ОборудованиеНаИспытаниях.ВидДвижения
	|ГДЕ
	|	торо_ОборудованиеНаИспытаниях.ОбъектРемонта ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НенужноеОстановленное.Регистратор,
	|	ВТ_НенужноеОстановленное.Период,
	|	ВТ_НенужноеОстановленное.ОбъектРемонта,
	|	ВТ_НенужноеОстановленное.ПричинаПростоя,
	|	ВТ_НенужноеОстановленное.ВидДвижения,
	|	""Удалить"",
	|	1
	|ИЗ
	|	ВТ_НенужноеОстановленное КАК ВТ_НенужноеОстановленное
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ОборудованиеНаИспытаниях КАК торо_ОборудованиеНаИспытаниях
	|		ПО ВТ_НенужноеОстановленное.Период = торо_ОборудованиеНаИспытаниях.Период
	|			И ВТ_НенужноеОстановленное.Регистратор = торо_ОборудованиеНаИспытаниях.Регистратор
	|			И ВТ_НенужноеОстановленное.ОбъектРемонта = торо_ОборудованиеНаИспытаниях.ОбъектРемонта
	|			И ВТ_НенужноеОстановленное.ВидДвижения = торо_ОборудованиеНаИспытаниях.ВидДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектРемонта,
	|	Период
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("ТаблицаСОтметками", ТаблицаСОтметкамиОстановыИспытания);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		ВыборкаИзменений = ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		МассивЗаписейКУдалению = Новый Массив;
		
		НаборЗаписей = РегистрыНакопления.торо_ОборудованиеНаИспытаниях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		НаборЗаписей.Прочитать();
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			Если ВыборкаИзменений.Обработка = "Добавить" Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаИзменений);
			Иначе
				
				Для каждого Запись из НаборЗаписей Цикл
					Если Запись.ОбъектРемонта = ВыборкаИзменений.ОбъектРемонта
						И Запись.Период = ВыборкаИзменений.Период
						И Запись.ВидДвижения = ВыборкаИзменений.ВидДвижения Тогда
						
						МассивЗаписейКУдалению.Добавить(Запись);
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ЗаписьКУдалению из МассивЗаписейКУдалению Цикл
			НаборЗаписей.Удалить(ЗаписьКУдалению);
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Прочее

Функция ПолучитьТаблицуОбъектовРемонтаСПодчиненными()
	
	СписокПолейПоиска = "ОбъектРемонта, ДатаНачала, ДатаОкончания, ПричинаПростоя, ВидЭксплуатации,
								|ВидЭксплуатацииНаПериод, ВидПуска, ВидПускаНаПериод";
	
	ТаблицаОбъектовРемонта = ОбъектыРемонта.ВыгрузитьКолонки();
	ТаблицаОбъектовРемонта.Индексы.Добавить(СписокПолейПоиска);
	
	СтруктураПоиска = Новый Структура(СписокПолейПоиска);
	
	Для каждого ТекСтрока из ОбъектыРемонта Цикл
		
		Если НЕ ТекСтрока.ИзменятьСостояниеПодчиненныхОР Тогда
			
			НоваяСтрока = ТаблицаОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			
			Если ТаблицаОбъектовРемонта.НайтиСтроки(СтруктураПоиска).Количество() Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = ТаблицаОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			МассивПодчиненных = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(ТекСтрока.ОбъектРемонта, ТекСтрока.СтруктураИерархии, Дата);
			
			Для Каждого ЭлементСписка Из МассивПодчиненных Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
				СтруктураПоиска.ОбъектРемонта = ЭлементСписка;
				
				Если ТаблицаОбъектовРемонта.НайтиСтроки(СтруктураПоиска).Количество() Тогда
					Продолжить;
				КонецЕсли;	
				
				НоваяСтрока = ТаблицаОбъектовРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ОбъектРемонта = ЭлементСписка;
			КонецЦикла;	
			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОбъектовРемонта.Индексы.Добавить("ДатаНачала, ОбъектРемонта");
	ТаблицаОбъектовРемонта.Индексы.Добавить("ДатаОкончания, ОбъектРемонта");
	
	Возврат ТаблицаОбъектовРемонта;
	
КонецФункции

Процедура ПроверитьКонфликтыСРегистромТекущиеСостоянияОР(ТаблицаОбъектовРемонта, Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.ДатаНачала КАК ДатаНачала,
	|	ТаблицаДокумента.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТ_ТаблицаДляПроверки
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта,
	|	ТаблицаДокумента.ДатаОкончания
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаДляПроверки.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ТаблицаДляПроверки.Период КАК Период,
	|	торо_ТекущееСостояниеОР.Регистратор КАК Регистратор,
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК ВидЭксплуатации
	|ИЗ
	|	ВТ_ТаблицаДляПроверки КАК ВТ_ТаблицаДляПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ВТ_ТаблицаДляПроверки.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И ВТ_ТаблицаДляПроверки.Период = торо_ТекущееСостояниеОР.Период
	|			И (торо_ТекущееСостояниеОР.Регистратор <> &Ссылка)";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаОбъектовРемонта);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонСообщения = НСтр("ru = '%2 объект ремонта %1 был переведен в состояние %3(документом %4), что противоречит данным текущего документа.'");
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.Период, Выборка.ВидЭксплуатации, Выборка.Регистратор);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Регистратор,,,Отказ);
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьТаблицуСостоянийНаДатуПоДокументу(ТаблицаОбъектовРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.ДатаНачала КАК ДатаНачала,
	               |	ТаблицаОбъектыРемонта.ДатаОкончания КАК ДатаОкончания,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатации КАК ВидЭксплуатации,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатацииНаПериод КАК ВидЭксплуатацииНаПериод,
						|	ТаблицаОбъектыРемонта.ВидПуска КАК ВидПуска,
						|	ТаблицаОбъектыРемонта.ВидПускаНаПериод КАК ВидПускаНаПериод,
	               |	ТаблицаОбъектыРемонта.Примечание КАК Примечание,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОбъектыРемонта КАК ТаблицаОбъектыРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.ДатаНачала КАК Период,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатацииНаПериод КАК ВидЭксплуатации,
						|	ТаблицаОбъектыРемонта.ВидПускаНаПериод КАК ВидПуска,
	               |	ТаблицаОбъектыРемонта.Примечание КАК Примечание,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ПОМЕСТИТЬ ТаблицаПроведенияНачало
	               |ИЗ
	               |	ТаблицаОР КАК ТаблицаОбъектыРемонта
	               |ГДЕ
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатацииНаПериод <> ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.ДатаОкончания КАК Период,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатации,
						|	ТаблицаОбъектыРемонта.ВидПуска,
	               |	ТаблицаОбъектыРемонта.Примечание КАК Примечание,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ИЗ
	               |	ТаблицаОР КАК ТаблицаОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроведенияНачало КАК ТаблицаПроведенияНачало
	               |		ПО ТаблицаОбъектыРемонта.ОбъектРемонта = ТаблицаПроведенияНачало.ОбъектРемонта
	               |			И ТаблицаОбъектыРемонта.ДатаОкончания = ТаблицаПроведенияНачало.Период
	               |ГДЕ
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатации <> ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)
	               |	И ТаблицаПроведенияНачало.Период ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.Период,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатации,
						|	ТаблицаОбъектыРемонта.ВидПуска,
	               |	ТаблицаОбъектыРемонта.Примечание,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ИЗ
	               |	ТаблицаПроведенияНачало КАК ТаблицаОбъектыРемонта";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектыРемонта", ТаблицаОбъектовРемонта);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ДополнитьТаблицуСостоянийДаннымиРегистра(ТаблицаСостоянийНаДатуПоДокументу, ИсключитьСтрокиТекущегоДокумента = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаДокумента.ПричинаПростоя КАК ПричинаПростоя
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	МИНИМУМ(ТаблицаДокумента.Период) КАК МиинимальныйПериод,
	|	МАКСИМУМ(ТаблицаДокумента.Период) КАК МаксимальныйПериод
	|ПОМЕСТИТЬ ВТ_КрайниеДаты
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ОбъектРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_КрайниеДаты.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_КрайниеДаты.МиинимальныйПериод КАК МиинимальныйПериод,
	|	МАКСИМУМ(ЕСТЬNULL(торо_ТекущееСостояниеОР.Период, ДАТАВРЕМЯ(1,1,1))) КАК ДатаСреза
	|ПОМЕСТИТЬ ВТ_ДатыСрезаСнизу
	|ИЗ
	|	ВТ_КрайниеДаты КАК ВТ_КрайниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ВТ_КрайниеДаты.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И ВТ_КрайниеДаты.МиинимальныйПериод > торо_ТекущееСостояниеОР.Период
	|			И (торо_ТекущееСостояниеОР.Регистратор <> &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КрайниеДаты.ОбъектРемонта,
	|	ВТ_КрайниеДаты.МиинимальныйПериод
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ДатаСреза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_КрайниеДаты.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_КрайниеДаты.МаксимальныйПериод КАК МаксимальныйПериод,
	|	МИНИМУМ(торо_ТекущееСостояниеОР.Период) КАК ДатаСреза
	|ПОМЕСТИТЬ ВТ_ДатыСрезаСверху
	|ИЗ
	|	ВТ_КрайниеДаты КАК ВТ_КрайниеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ВТ_КрайниеДаты.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И ВТ_КрайниеДаты.МаксимальныйПериод < торо_ТекущееСостояниеОР.Период
	|			И (торо_ТекущееСостояниеОР.Регистратор <> &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КрайниеДаты.ОбъектРемонта,
	|	ВТ_КрайниеДаты.МаксимальныйПериод
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ДатаСреза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаДокумента.ПричинаПростоя КАК ПричинаПростоя,
	|	&Ссылка КАК Регистратор,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.ВидЭксплуатации КАК Справочник.торо_ВидыЭксплуатации).ТипЭксплуатации КАК ТипЭксплуатации
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	&ВыбиратьТаблицуДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДатыСреза.ОбъектРемонта,
	|	ВТ_ДатыСреза.ДатаСреза,
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации,
	|	торо_ТекущееСостояниеОР.ПричинаПростоя,
	|	торо_ТекущееСостояниеОР.Регистратор,
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации.ТипЭксплуатации
	|ИЗ
	|	ВТ_ДатыСрезаСверху КАК ВТ_ДатыСреза
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ВТ_ДатыСреза.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И ВТ_ДатыСреза.ДатаСреза = торо_ТекущееСостояниеОР.Период
	|			И (торо_ТекущееСостояниеОР.Регистратор <> &Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДатыСреза.ОбъектРемонта,
	|	ВТ_ДатыСреза.ДатаСреза,
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации,
	|	торо_ТекущееСостояниеОР.ПричинаПростоя,
	|	ЕСТЬNULL(торо_ТекущееСостояниеОР.Регистратор, НЕОПРЕДЕЛЕНО),
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации.ТипЭксплуатации
	|ИЗ
	|	ВТ_ДатыСрезаСнизу КАК ВТ_ДатыСреза
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ВТ_ДатыСреза.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И ВТ_ДатыСреза.ДатаСреза = торо_ТекущееСостояниеОР.Период
	|			И (торо_ТекущееСостояниеОР.Регистратор <> &Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_КрайниеДаты.ОбъектРемонта,
	|	торо_ТекущееСостояниеОР.Период,
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации,
	|	торо_ТекущееСостояниеОР.ПричинаПростоя,
	|	торо_ТекущееСостояниеОР.Регистратор,
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации.ТипЭксплуатации
	|ИЗ
	|	ВТ_КрайниеДаты КАК ВТ_КрайниеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ВТ_КрайниеДаты.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И ВТ_КрайниеДаты.МиинимальныйПериод < торо_ТекущееСостояниеОР.Период
	|			И ВТ_КрайниеДаты.МаксимальныйПериод > торо_ТекущееСостояниеОР.Период
	|			И (торо_ТекущееСостояниеОР.Регистратор <> &Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектРемонта,
	|	Период";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаСостоянийНаДатуПоДокументу);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВыбиратьТаблицуДокумента", НЕ ИсключитьСтрокиТекущегоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ОпределитьВремяНахожденияВСостоянии(ТаблицаПериодовСостояний)
	
	СтруктураРезультата = Новый Структура("ТаблицаСвернутая, ТаблицаПоДням");
	
	Если ТаблицаПериодовСостояний.Количество() = 0 Тогда
		ТаблицаПериодовСостояний.Колонки.Добавить("ВремяПростоя", ОбщегоНазначения.ОписаниеТипаЧисло(15,0));
		ТаблицаПериодовСостояний.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ТаблицаПериодовСостояний.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Календари"));
		
		СтруктураРезультата.ТаблицаСвернутая = ТаблицаПериодовСостояний;
		СтруктураРезультата.ТаблицаПоДням = ТаблицаПериодовСостояний;
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	МассивГрафиков = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПериодовСостояний, "ПлановыйГрафикРаботы", Истина);
	
	МинДата = ТаблицаПериодовСостояний[0].ДатаОкончания; // ДатаНачала может быть 01.01.0001 - нам это не нужно.
	МаксДата = ТаблицаПериодовСостояний[0].ДатаОкончания;
	
	Для каждого Строка из ТаблицаПериодовСостояний Цикл
		Если ЗначениеЗаполнено(Строка.ДатаНачала) И Строка.ДатаНачала < МинДата  Тогда
			МинДата = Строка.ДатаНачала;
		КонецЕсли;
		Если Строка.ДатаОкончания > МаксДата Тогда
			МаксДата = Строка.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(МинДата), МаксДата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПериодовСостояний.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаПериодовСостояний.ДатаНачала КАК ДатаНачала,
	|	ТаблицаПериодовСостояний.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаПериодовСостояний.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаПериодовСостояний.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
	|	ТаблицаПериодовСостояний.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаПериодовСостояний.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ТаблицаПериодовСостояний.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаПериодовСостояний
	|ИЗ
	|	&ТаблицаПериодовСостояний КАК ТаблицаПериодовСостояний
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлановыйГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписанияРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТРасписанияРаботы.ДатаГрафика КАК ДатаГрафика,
	|	ВТРасписанияРаботы.ВремяНачала КАК ВремяНачала,
	|	ВТРасписанияРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА)) КАК НачалоРасписания,
	|	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК КонецРасписания
	|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы,
	|	ДатаГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписанияРаботыИзм.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТРасписанияРаботыИзм.ДатаГрафика КАК ДатаГрафика,
	|	РАЗНОСТЬДАТ(ВТРасписанияРаботыИзм.ВремяНачала, ВТРасписанияРаботыИзм.ВремяОкончания, СЕКУНДА) КАК Секунды,
	|	РАЗНОСТЬДАТ(ВТРасписанияРаботыИзм.ВремяНачала, ВТРасписанияРаботыИзм.ВремяОкончания, ЧАС) КАК Часы
	|ПОМЕСТИТЬ ВремТабРаботы
	|ИЗ
	|	ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодовСостояний.ОбъектРемонта КАК ОбъектРемонта,
	|	ЕСТЬNULL(ГрафикиРаботыПоСменам.Секунды, 0) КАК Секунды,
	|	ТаблицаПериодовСостояний.ДатаНачала КАК ДатаНачала,
	|	ЕСТЬNULL(ГрафикиРаботыПоСменам.Часы, 0) КАК Часы,
	|	ТаблицаПериодовСостояний.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаПериодовСостояний.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаПериодовСостояний.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаПериодовСостояний.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ЕСТЬNULL(ГрафикиРаботыПоСменам.ДатаГрафика, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаГрафика,
	|	ТаблицаПериодовСостояний.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
	|	ТаблицаПериодовСостояний.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВремяВСостоянииОборудованияПолныеДни
	|ИЗ
	|	ТаблицаПериодовСостояний КАК ТаблицаПериодовСостояний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТабРаботы КАК ГрафикиРаботыПоСменам
	|		ПО ТаблицаПериодовСостояний.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
	|			И (КОНЕЦПЕРИОДА(ТаблицаПериодовСостояний.ДатаНачала, ДЕНЬ) < ГрафикиРаботыПоСменам.ДатаГрафика)
	|			И (НАЧАЛОПЕРИОДА(ТаблицаПериодовСостояний.ДатаОкончания, ДЕНЬ) > ГрафикиРаботыПоСменам.ДатаГрафика)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ДатаГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодовСостояний.ОбъектРемонта КАК ОбъектРемонта,
	|	РАЗНОСТЬДАТ(ВЫБОР
	|			КОГДА ТаблицаПериодовСостояний.ДатаНачала >= ВТРасписанияРаботыИзм.НачалоРасписания
	|				ТОГДА ТаблицаПериодовСостояний.ДатаНачала
	|			ИНАЧЕ ВТРасписанияРаботыИзм.НачалоРасписания
	|		КОНЕЦ, ВЫБОР
	|			КОГДА ТаблицаПериодовСостояний.ДатаОкончания >= ВТРасписанияРаботыИзм.КонецРасписания
	|				ТОГДА ВТРасписанияРаботыИзм.КонецРасписания
	|			ИНАЧЕ ТаблицаПериодовСостояний.ДатаОкончания
	|		КОНЕЦ, СЕКУНДА) КАК ВремяПростоя,
	|	ТаблицаПериодовСостояний.ДатаНачала КАК ДатаНачала,
	|	ТаблицаПериодовСостояний.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаПериодовСостояний.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаПериодовСостояний.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаПериодовСостояний.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ТаблицаПериодовСостояний.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТаблицаПериодовСостояний.ДатаНачала >= ВТРасписанияРаботыИзм.НачалоРасписания
	|			ТОГДА ТаблицаПериодовСостояний.ДатаНачала
	|		ИНАЧЕ ВТРасписанияРаботыИзм.НачалоРасписания
	|	КОНЕЦ КАК Период,
	|	ТаблицаПериодовСостояний.ПлановыйГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ Финальная
	|ИЗ
	|	ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодовСостояний КАК ТаблицаПериодовСостояний
	|		ПО ВТРасписанияРаботыИзм.ГрафикРаботы = ТаблицаПериодовСостояний.ПлановыйГрафикРаботы
	|			И (ВТРасписанияРаботыИзм.НачалоРасписания >= ТаблицаПериодовСостояний.ДатаНачала
	|					И ВТРасписанияРаботыИзм.НачалоРасписания < ТаблицаПериодовСостояний.ДатаОкончания
	|				ИЛИ ВТРасписанияРаботыИзм.КонецРасписания > ТаблицаПериодовСостояний.ДатаНачала
	|					И ВТРасписанияРаботыИзм.КонецРасписания <= ТаблицаПериодовСостояний.ДатаОкончания
	|				ИЛИ ВТРасписанияРаботыИзм.НачалоРасписания <= ТаблицаПериодовСостояний.ДатаНачала
	|					И ВТРасписанияРаботыИзм.КонецРасписания >= ТаблицаПериодовСостояний.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремяВСостоянииОборудованияПолныеДни КАК ВремяВСостоянииОборудованияПолныеДни
	|		ПО (ТаблицаПериодовСостояний.ОбъектРемонта = ВремяВСостоянииОборудованияПолныеДни.ОбъектРемонта)
	|			И ВТРасписанияРаботыИзм.ДатаГрафика = ВремяВСостоянииОборудованияПолныеДни.ДатаГрафика
	|ГДЕ
	|	ВремяВСостоянииОборудованияПолныеДни.ДатаГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПолныеДни.ОбъектРемонта,
	|	ПолныеДни.Секунды,
	|	ПолныеДни.ДатаНачала,
	|	ПолныеДни.ДатаОкончания,
	|	ПолныеДни.ПричинаПростоя,
	|	ПолныеДни.ВидЭксплуатации,
	|	ПолныеДни.ТипЭксплуатации,
	|	ПолныеДни.Регистратор,
	|	ПолныеДни.ДатаГрафика,
	|	ПолныеДни.ПлановыйГрафикРаботы
	|ИЗ
	|	ВремяВСостоянииОборудованияПолныеДни КАК ПолныеДни
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Финальная.ОбъектРемонта КАК ОбъектРемонта,
	|	СУММА(Финальная.ВремяПростоя) КАК ВремяПростоя,
	|	Финальная.ДатаНачала КАК ДатаНачала,
	|	Финальная.ДатаОкончания КАК ДатаОкончания,
	|	Финальная.ПричинаПростоя КАК ПричинаПростоя,
	|	Финальная.ВидЭксплуатации КАК ВидЭксплуатации,
	|	Финальная.ТипЭксплуатации КАК ТипЭксплуатации,
	|	Финальная.Регистратор КАК Регистратор
	|ИЗ
	|	Финальная КАК Финальная
	|
	|СГРУППИРОВАТЬ ПО
	|	Финальная.ОбъектРемонта,
	|	Финальная.ДатаНачала,
	|	Финальная.ДатаОкончания,
	|	Финальная.ПричинаПростоя,
	|	Финальная.ВидЭксплуатации,
	|	Финальная.ТипЭксплуатации,
	|	Финальная.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Финальная.ОбъектРемонта КАК ОбъектРемонта,
	|	Финальная.ВремяПростоя КАК ВремяПростоя,
	|	Финальная.ДатаНачала КАК ДатаНачала,
	|	Финальная.ДатаОкончания КАК ДатаОкончания,
	|	Финальная.ПричинаПростоя КАК ПричинаПростоя,
	|	Финальная.ВидЭксплуатации КАК ВидЭксплуатации,
	|	Финальная.ТипЭксплуатации КАК ТипЭксплуатации,
	|	Финальная.Регистратор КАК Регистратор,
	|	Финальная.Период КАК Период,
	|	Финальная.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	Финальная КАК Финальная";
	
	Запрос.УстановитьПараметр("ТаблицаПериодовСостояний", ТаблицаПериодовСостояний);
		
	Результат = Запрос.ВыполнитьПакет();
	
	ИндексТаблицыСвернутой = 5;
	ИндексТаблицыПоДням = 6;
	
	СтруктураРезультата.ТаблицаСвернутая = Результат[ИндексТаблицыСвернутой].Выгрузить();
	СтруктураРезультата.ТаблицаПоДням = Результат[ИндексТаблицыПоДням].Выгрузить();
	
	Возврат СтруктураРезультата;		
	
КонецФункции

Функция ПолучитьТаблицуПериодовСостояний(ТаблицаСостоянийНаДату)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаДокумента.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ТаблицаДокумента.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаДокумента.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.Период КАК ДатаНачала,
	|	ТаблицаДокумента.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаДокумента.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ТаблицаДокумента.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	МИНИМУМ(ТаблицаДокумента1.Период) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ДатыОкончания
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента1
	|		ПО ТаблицаДокумента.ОбъектРемонта = ТаблицаДокумента1.ОбъектРемонта
	|			И ТаблицаДокумента.Период < ТаблицаДокумента1.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ОбъектРемонта,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.ВидЭксплуатации,
	|	ТаблицаДокумента.ТипЭксплуатации,
	|	ТаблицаДокумента.ПричинаПростоя,
	|	ТаблицаДокумента.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыОкончания.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ДатыОкончания.ДатаНачала КАК ДатаНачала,
	|	ВТ_ДатыОкончания.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_ДатыОкончания.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ВТ_ДатыОкончания.ТипЭксплуатации КАК ТипЭксплуатации,
	|	ВТ_ДатыОкончания.ПричинаПростоя КАК ПричинаПростоя,
	|	ВЫРАЗИТЬ(ВТ_ДатыОкончания.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта).ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|  ТаблицаДокумента.ТипЭксплуатации КАК ТипЭксплуатацииНаКонецПериода,
	|  ВТ_ДатыОкончания.Регистратор КАК РегистраторНаНачалоПериода
	|ИЗ
	|	ВТ_ДатыОкончания КАК ВТ_ДатыОкончания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента
	|		ПО ВТ_ДатыОкончания.ОбъектРемонта = ТаблицаДокумента.ОбъектРемонта
	|			И ВТ_ДатыОкончания.ДатаОкончания = ТаблицаДокумента.Период";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаСостоянийНаДату);
	
	ТаблицаИнтервалов = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаИнтервалов;
	
КонецФункции

Функция РассчитатьДвиженияПоОстановленномуОборудованию(ТаблицаОбъектовРемонта)
	
	ТаблицаДляРасчета = ТаблицаОбъектовРемонта.СкопироватьКолонки();
	ТаблицаДляРасчета.Колонки.Добавить("ПриходОстановленное", Новый ОписаниеТипов("Булево"));
	ТаблицаДляРасчета.Колонки.Добавить("РасходОстановленное", Новый ОписаниеТипов("Булево"));
	ТаблицаДляРасчета.Колонки.Добавить("ПриходИспытания", Новый ОписаниеТипов("Булево"));
	ТаблицаДляРасчета.Колонки.Добавить("РасходИспытания", Новый ОписаниеТипов("Булево"));
	
	ТаблицаДляРасчета.Сортировать("ОбъектРемонта, Период");
	
	// Выполним расчет, какие движения вообще должны быть. После - сравним с регистрами 
	// и приведем регистры в соответствие с табличкой.
	ОбъектыОстановленные = Новый Соответствие;
	ОбъектыНаИспытаниях = Новый Соответствие;
	
	Для каждого СтрокаОР из ТаблицаОбъектовРемонта Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаОР.Период) Тогда
			Строка = ТаблицаДляРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаОР);
			Продолжить;
		КонецЕсли;
		
		Строка = ТаблицаДляРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаОР);
		
		Если ОбъектыОстановленные[Строка.ОбъектРемонта] = Истина Тогда
			Строка.РасходОстановленное = Истина;
			ОбъектыОстановленные.Вставить(Строка.ОбъектРемонта, Ложь); 
		КонецЕсли;
		
		Если ОбъектыНаИспытаниях[Строка.ОбъектРемонта] = Истина Тогда
			Строка.РасходИспытания = Истина;
			ОбъектыНаИспытаниях.Вставить(Строка.ОбъектРемонта, Ложь);
		КонецЕсли;
		
		Если Строка.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
			Строка.ПриходОстановленное = Истина;
			ОбъектыОстановленные.Вставить(Строка.ОбъектРемонта, Истина); 
		ИначеЕсли Строка.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Испытания Тогда
			Строка.ПриходИспытания = Истина;
			ОбъектыНаИспытаниях.Вставить(Строка.ОбъектРемонта, Истина); 
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаДляРасчета;
	
КонецФункции

Функция ПолучитьТаблицуУдалямыхСостоянийНаДату()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТекущееСостояниеОР.Период КАК Период,
	|	торо_ТекущееСостояниеОР.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК ВидЭксплуатации,
	|	торо_ТекущееСостояниеОР.ПричинаПростоя КАК ПричинаПростоя,
	|	торо_ТекущееСостояниеОР.Примечание КАК Примечание,
	|	торо_ТекущееСостояниеОР.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Состояния
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|ГДЕ
	|	торо_ТекущееСостояниеОР.Регистратор = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Состояния.Период КАК Период,
	|	ВТ_Состояния.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_Состояния.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ВТ_Состояния.ПричинаПростоя КАК ПричинаПростоя,
	|	ВТ_Состояния.Примечание КАК Примечание,
	|	ЕСТЬNULL(торо_КоличествоПусковОР.ВидПуска, ЗНАЧЕНИЕ(Справочник.торо_ВидыПусковОР.ПустаяСсылка)) КАК ВидПуска
	|ИЗ
	|	ВТ_Состояния КАК ВТ_Состояния
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_КоличествоПусковОР КАК торо_КоличествоПусковОР
	|		ПО ВТ_Состояния.Период = торо_КоличествоПусковОР.Период
	|			И ВТ_Состояния.Регистратор = торо_КоличествоПусковОР.Регистратор
	|			И ВТ_Состояния.ОбъектРемонта = торо_КоличествоПусковОР.ОбъектРемонта";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

Процедура СообщитьОбОбъектахРемонтаУжеВПростое(ТаблицаПериодовСостояний)
	
	// Выводим только для информирования пользователя. Жестко запрещать не имеет смысла, 
	// поскольку сейчас система корректно обрабатывает несколько введенных подряд простоев, 
	// и вообще любые сочетания состояний, и данные в отчетах будут верные.
	
	// Сообщаем только о простоях, т.к. с ними пользователи боятся ошибиться и завести несколько одинаковых дефектов.
	
	ШаблонСообщения = НСтр("ru='Объект ремонта ""%1"" уже введен в простой с %2 документом ""%3"".'");
	
	Для каждого Строка из ТаблицаПериодовСостояний Цикл
		// Интересуют только два простоя подряд и от разных регистраторов.
		Если Строка.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой
			И Строка.ТипЭксплуатацииНаКонецПериода = Перечисления.торо_ТипЭксплуатации.Простой
			И Строка.Регистратор = Ссылка
			И ЗначениеЗаполнено(Строка.РегистраторНаНачалоПериода) И Строка.РегистраторНаНачалоПериода <> Ссылка Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.ОбъектРемонта, Строка.ДатаНачала, Строка.РегистраторНаНачалоПериода);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Строка.РегистраторНаНачалоПериода);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
