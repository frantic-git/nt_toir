////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
Перем МассивДоступныхСтатусов;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		Если Не Тип("ДокументСсылка.торо_ВыявленныеДефекты") = ТипЗнч(Параметры.Основание)
			И Не Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") = ТипЗнч(Параметры.Основание)
			И Не Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") = ТипЗнч(Параметры.Основание) Тогда
			торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Вывести в заголовке формы вид операции.
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_СостоянияОбъектовРемонта);
	
	Параметры.Свойство("СтруктураИерархии", ТекСтруктураИерархии);
	
	Если Не ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяСтруктураИерархии", Истина);
	КонецЕсли;
		
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.ВидЭксплуатации) Тогда
		ТипЭксплуатации = Объект.ВидЭксплуатации.ТипЭксплуатации;
		ОбязательныйВводВидаПуска = Объект.ВидЭксплуатации.ОбязательныйВводВидаПуска;
		ВидПуска = (ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Простой);
	Иначе
		ТипЭксплуатации = ТипЭксплуатации.Пустая();
		ОбязательныйВводВидаПуска = Ложь;
		ВидПуска = Ложь;
	КонецЕсли;

	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ПоказыватьПоложениеОР",	Истина);
	Элементы.ОбъектыРемонтаОтображатьПоложение.Пометка = мОтображатьПоложение;

	ЗаполнитьДобавочныеРеквизитыТЧ();
	УстановитьОбязательностьЗаполнения();
	
	УстановитьЗаголовокПодменюВидаОперации();
	
	КолонкаВидПуска = (Объект.ОбъектыРемонта.Итог("КолонкаВидПуска") > 0);
	КолонкаВидПускаНаПериод = (Объект.ОбъектыРемонта.Итог("КолонкаВидПускаНаПериод") > 0);
	КолонкаПричинаПростоя 	= (Объект.ОбъектыРемонта.Итог("КолонкаПричинаПростоя") > 0);
	КолонкаПричинаПростояНаПериод = (Объект.ОбъектыРемонта.Итог("КолонкаПричинаПростояНаПериод") > 0);
	
	УстановитьВнешнийВидФормыПолная();
		
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.ОбъектыРемонта.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	УстановитьОбязательностьЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПодключитьОбработчикОжидания("ПодборОРОбработчикОжидания",0.5,Истина);
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТекущийОбъект.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
		Для Каждого СтрокаОР Из ТекущийОбъект.ОбъектыРемонта Цикл
			
			Если СтрокаОР.ДатаНачала >= СтрокаОР.ДатаОкончания Тогда
				ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 в строке № %2 дата начала периода больше даты окончания периода!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОР.ОбъектРемонта, СтрокаОР.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(ТекущийОбъект.ВидОперации));
	ЗаполнитьДобавочныеРеквизитыТЧ();
	
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
	УстановитьОбязательностьЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")) Тогда
		Оповестить("ЗаписанПоказательНаработкаСостояние");
	КонецЕсли;
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ВидЭксплуатацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЭксплуатации) Тогда
		
		РеквизитыВидаЭксплуатации = УстановитьТипЭксплуатации(Объект.ВидЭксплуатации);
		ТипЭксплуатации = РеквизитыВидаЭксплуатации.ТипЭксплуатации;
		ОбязательныйВводВидаПуска = РеквизитыВидаЭксплуатации.ОбязательныйВводВидаПуска;
		ВидПуска = РеквизитыВидаЭксплуатации.НеПростой;
		
		ЗаполнитьВидЭксплуатации();
		Для Каждого Строка Из Объект.ОбъектыРемонта Цикл
			РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(Строка);
		КонецЦикла;
			
	Иначе
		
		ТипЭксплуатации = ТипЭксплуатации.Пустая();
		ОбязательныйВводВидаПуска = Ложь;
		ВидПуска = Ложь;
		
	КонецЕсли;
	
	УстановитьВнешнийВидФормы();
	
КонецПроцедуры   

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта

&НаКлиенте
Процедура ОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		ТекДанные.СтруктураИерархии = ТекСтруктураИерархии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаПриИзменении(Элемент)
	 	
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если торо_РаботаСИерархией20.ЕстьПодчиненныеОР(ТекущиеДанные.ОбъектРемонта, ТекСтруктураИерархии) Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбъектыРемонтаОбъектРемонтаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), НСтр("ru = 'Изменить состояние подчиненных объектов ремонта?'"), РежимДиалогаВопрос.ДаНет, 0);
		КонецЕсли;
		
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложениеОРВстроке(Элементы.ОбъектыРемонта.ТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    ТекущиеДанные.ИзменятьСостояниеПодчиненныхОР = (РезультатВопроса = КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаВидЭксплуатацииНаПериодПриИзменении(Элемент)
	
	Перем ВидНаДату, ВидНаПериод, ТипПростой;
	
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ВидЭксплуатацииНаПериод) Тогда
		РеквизитыВидаЭксплуатации = УстановитьТипЭксплуатации(ТекущиеДанные.ВидЭксплуатацииНаПериод);
		ТекущиеДанные.ТипЭксплуатацииНаПериод = РеквизитыВидаЭксплуатации.ТипЭксплуатации;
		ТекущиеДанные.ВидПускаНаПериодОбязательностьЗаполнения = РеквизитыВидаЭксплуатации.ОбязательныйВводВидаПуска;
		ТекущиеДанные.КолонкаВидПускаНаПериод = РеквизитыВидаЭксплуатации.НеПростой;
		ТекущиеДанные.КолонкаПричинаПростояНаПериод = 1-РеквизитыВидаЭксплуатации.НеПростой;
	Иначе
		ТекущиеДанные.ТипЭксплуатацииНаПериод = ТекущиеДанные.ТипЭксплуатацииНаПериод.Пустая();
		ТекущиеДанные.ВидПускаНаПериодОбязательностьЗаполнения = Ложь;
		ТекущиеДанные.КолонкаВидПускаНаПериод = 0;
		ТекущиеДанные.КолонкаПричинаПростояНаПериод = 0;
	КонецЕсли;
	
	КолонкаВидПуска = (Объект.ОбъектыРемонта.Итог("КолонкаВидПуска") > 0);
	КолонкаВидПускаНаПериод = (Объект.ОбъектыРемонта.Итог("КолонкаВидПускаНаПериод") > 0);
	КолонкаПричинаПростоя 	= (Объект.ОбъектыРемонта.Итог("КолонкаПричинаПростоя") > 0);
	КолонкаПричинаПростояНаПериод = (Объект.ОбъектыРемонта.Итог("КолонкаПричинаПростояНаПериод") > 0);
	
	
	ПолучитьПеречисленияНаСервере(ВидНаДату, ВидНаПериод, ТипПростой);
	
	ТекущиеДанные.ПричинаПростояОбязательностьЗаполнения = ((ТекущиеДанные.КолонкаПричинаПростоя + ТекущиеДанные.КолонкаПричинаПростояНаПериод) > 0 
														   ИЛИ (((НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидЭксплуатации) И Объект.ВидОперации = ВидНаДату)  
														   ИЛИ (НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидЭксплуатацииНаПериод) И Объект.ВидОперации = ВидНаПериод))
														   И ТипЭксплуатации = ТипПростой));
																																					
	ТекущиеДанные.ВидПускаНаПериод = Неопределено;
	
	УстановитьВнешнийВидФормы();
	
	Если Не ТекущиеДанные.КолонкаПричинаПростоя И Не ТекущиеДанные.КолонкаПричинаПростояНаПериод Тогда
	    ТекущиеДанные.ПричинаПростоя = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьПеречисленияНаСервере(ВидЭксплуатации, ВидЭксплуатацииНаПериод, ТипЭксплуатацииПростой)
	ВидЭксплуатации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;	
	ВидЭксплуатацииНаПериод = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод;
	ТипЭксплуатацииПростой = Перечисления.торо_ТипЭксплуатации.Простой;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаВидЭксплуатацииПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(ТекущиеДанные);
	РассчитатьНеобходимостьВидаПускаИПричиныПростояНаФорме();
	
	ТекущиеДанные.ВидПуска = Неопределено;
	
	УстановитьВнешнийВидФормы();
	
	Если Не ТекущиеДанные.КолонкаПричинаПростоя И Не ТекущиеДанные.КолонкаПричинаПростояНаПериод Тогда
	    ТекущиеДанные.ПричинаПростоя = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		
		СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора(Истина);
		
		ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
		ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
		ПараметрыОтбора.Вставить("ВернутьИерархию",         Истина);
		
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыОтбора, Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда	
		
		Если ТипЗнч(ВыбранноеЗначение.ОбъектРемонта) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			
			НС = Объект.ОбъектыРемонта.Добавить();
			НС.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;			
			НС.СтруктураИерархии = ТекСтруктураИерархии;
			
			Если ВыбранноеЗначение.Свойство("ДатаНачала") и ЗначениеЗаполнено(ВыбранноеЗначение.ДатаНачала) Тогда
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
					НС.ДатаНачала = ВыбранноеЗначение.ДатаНачала;
					НС.ДатаОкончания = ВыбранноеЗначение.ДатаОкончания;
				Иначе
					НС.ДатаОкончания = ВыбранноеЗначение.ДатаНачала;
				КонецЕсли;
			Иначе
				НС.ДатаОкончания = ТекущаяДата();
			КонецЕсли;
			
			Если ВыбранноеЗначение.Свойство("ВидЭксплуатации") И ЗначениеЗаполнено(ВыбранноеЗначение.ВидЭксплуатации) Тогда
				Если Объект.ВидОперации= ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
					НС.ВидЭксплуатацииНаПериод = ВыбранноеЗначение.ВидЭксплуатации;
					НС.ТипЭксплуатацииНаПериод = ВыбранноеЗначение.ВидЭксплуатации;
				Иначе
					НС.ВидЭксплуатации = ВыбранноеЗначение.ВидЭксплуатации;
					НС.ТипЭксплуатации = ВыбранноеЗначение.ВидЭксплуатации;
				КонецЕсли;
			Иначе
				Если Объект.ВидОперации= ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
					НС.ВидЭксплуатацииНаПериод = Объект.ВидЭксплуатации;
					НС.ТипЭксплуатацииНаПериод = Объект.ВидЭксплуатации;
				Иначе
					НС.ВидЭксплуатации = Объект.ВидЭксплуатации;
					НС.ТипЭксплуатации = Объект.ВидЭксплуатации;
				КонецЕсли;
			КонецЕсли;
			
			РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(НС);
			РассчитатьНеобходимостьВидаПускаИПричиныПростояНаФорме();   
			УстановитьВнешнийВидФормы();
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение.ОбъектРемонта) = Тип("Массив") Тогда
			
			СтруктураПоиска = Новый Структура("ОбъектРемонта");
			ДобавлятьБезусловно = Ложь;
			ДатаНачала = Неопределено;
			ДатаОкончания = Неопределено;
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
				ВыбранноеЗначение.Свойство("ДатаНачала", ДатаНачала);
				ВыбранноеЗначение.Свойство("ДатаОкончания", ДатаОкончания);
				
				Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
					ДобавлятьБезусловно = Истина;
				Иначе
					Если ЗначениеЗаполнено(ДатаНачала) Тогда
						СтруктураПоиска.Вставить("ДатаНачала", ДатаНачала);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДатаОкончания) Тогда
						СтруктураПоиска.Вставить("ДатаОкончания", ДатаОкончания);
					Иначе
						СтруктураПоиска.Вставить("ДатаОкончания", ТекущаяДата());
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ВыбранноеЗначение.Свойство("ДатаНачала", ДатаОкончания);
				Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
					ДобавлятьБезусловно = Истина;
					СтруктураПоиска.Вставить("ДатаОкончания", ТекущаяДата());
				Иначе
					СтруктураПоиска.Вставить("ДатаОкончания", ДатаОкончания);
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого ОбъектРемонта Из ВыбранноеЗначение.ОбъектРемонта Цикл
				
				СтруктураПоиска.ОбъектРемонта = ОбъектРемонта;
				
				Если ДобавлятьБезусловно ИЛИ Объект.ОбъектыРемонта.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					НС = Объект.ОбъектыРемонта.Добавить();
					НС.ОбъектРемонта = ОбъектРемонта;		
					НС.СтруктураИерархии = ТекСтруктураИерархии;
					
					Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
						ВыбранноеЗначение.Свойство("ДатаНачала", НС.ДатаНачала);
						ВыбранноеЗначение.Свойство("ДатаОкончания", НС.ДатаОкончания);
						Если Не ЗначениеЗаполнено(НС.ДатаОкончания) Тогда
							НС.ДатаОкончания = ТекущаяДата();
						КонецЕсли;
						Если ЗначениеЗаполнено(Объект.ВидЭксплуатации) Тогда 
							НС.ВидЭксплуатацииНаПериод = Объект.ВидЭксплуатации;
						КонецЕсли;
					Иначе
						ВыбранноеЗначение.Свойство("ДатаНачала", НС.ДатаОкончания);
						Если Не ЗначениеЗаполнено(НС.ДатаОкончания) Тогда
							НС.ДатаОкончания = ТекущаяДата();
						КонецЕсли;
						Если ЗначениеЗаполнено(Объект.ВидЭксплуатации) Тогда 
							НС.ВидЭксплуатации = Объект.ВидЭксплуатации;
							КонецЕсли;
					КонецЕсли;
					Элементы.ОбъектыРемонта.ТекущаяСтрока = НС.ПолучитьИдентификатор();
					РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(НС);
				Иначе
					
					ШаблонСообщения = НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	ИначеЕсли  ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда 
		
		Для Каждого ЭлементСписка Из ВыбранноеЗначение Цикл
			Если Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ЭлементСписка.Значение)).Количество() = 0 Тогда
				НС = Объект.ОбъектыРемонта.Добавить();
				НС.ОбъектРемонта = ЭлементСписка.Значение;
				НС.СтруктураИерархии = ТекСтруктураИерархии;
				
				РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(НС);

			КонецЕсли;  
		КонецЦикла;
		
	ИначеЕсли  ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		НС = Объект.ОбъектыРемонта.Добавить();
		НС.ОбъектРемонта = ВыбранноеЗначение;
		НС.СтруктураИерархии 	 = ТекСтруктураИерархии;
		
		Если ЗначениеЗаполнено(Объект.ВидЭксплуатации) Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
				 НС.ВидЭксплуатацииНаПериод = Объект.ВидЭксплуатации;
			Иначе
				 НС.ВидЭксплуатации = Объект.ВидЭксплуатации;
			КонецЕсли;
		КонецЕсли;
				
		РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(НС);
		
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда	
		
		ЗаполнитьПоложенияОР();
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора(Истина);
			
	ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	ПараметрыОтбора.Вставить("ВернутьИерархию",         Истина);
	
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыОтбора.Вставить("ТекущаяСтрока", ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;
		
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектРемонта) Тогда
		ПараметрыФормы = Новый Структура("Ключ, СтруктураИерархии", ТекущиеДанные.ОбъектРемонта, ТекСтруктураИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.ОбъектыРемонтаОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
	УстановитьВнешнийВидФормыПолная();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
		
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекСтруктураИерархии);
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 		
		
		ОткрытьФормуПодбораОРИзОснования(Элементы.ОбъектыРемонта, Истина);
			
	Иначе
		
		ПараметрыФормы = Новый Структура("КлючНазначенияИспользования, ВидОперации, ЗакрыватьПриВыборе, СтруктураИерархии, ВернутьИерархию", 
													"торо_СостоянияОбъектовРемонта",	Объект.ВидОперации, Ложь,ТекСтруктураИерархии, Истина);
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
			ПараметрыФормы, Элементы.ОбъектыРемонта, ЭтаФорма.УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНаДату(Команда)
	ИзменитьВидОперацииДокумента(ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации"));
	УстановитьЗаголовокПодменюВидаОперации();
	ОчиститьДанныеНаПериод();
	ЗаполнитьВидЭксплуатации();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНаПериод(Команда)
	ИзменитьВидОперацииДокумента(ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод"));
	УстановитьЗаголовокПодменюВидаОперации();
	ОчиститьДанныеНаПериод();
	ЗаполнитьВидЭксплуатации(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОбИзмененииСостояния(Команда)
	
	МассивСтруктурСтрокТЧ = Новый Массив;
	КолонкиТЧ = "НомерСтроки, ДатаОкончания, ДатаНачала, ОбъектРемонта, ПричинаПростоя, ВидЭксплуатации, ВидПуска, ВидЭксплуатацииНаПериод, ВидПускаНаПериод, Примечание, ТипЭксплуатации, ТипЭксплуатацииНаПериод";
	
	Для каждого СтрокаТЧ Из Объект.ОбъектыРемонта Цикл
		СтруктураСтроки = Новый Структура(КолонкиТЧ);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
		МассивСтруктурСтрокТЧ.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьДанныеОбИзмененииСостоянияЗавершение", ЭтотОбъект);
	ПараметрыФормыЗаполнения = Новый Структура("МассивСтруктурСтрокТЧ, ВидОперации, Ссылка", МассивСтруктурСтрокТЧ, Объект.ВидОперации, Объект.Ссылка);
	
	ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.Форма.ФормаЗаполненияДанныхОбИзмененииСостояния", ПараметрыФормыЗаполнения, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОбИзмененииСостоянияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		Для Каждого СтруктураСтрокиТЧ Из РезультатЗакрытия Цикл
			НайденныеСтроки = Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("НомерСтроки", СтруктураСтрокиТЧ.НомерСтроки));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтруктураСтрокиТЧ);
				РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(НайденнаяСтрока);
				
			КонецЦикла;
		КонецЦикла;
		Модифицированность = Истина;

		РассчитатьНеобходимостьВидаПускаИПричиныПростояНаФорме();

		УстановитьВнешнийВидФормы();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьДобавочныеРеквизитыТЧ()
	
	Для Каждого СтрокаТЧ Из Объект.ОбъектыРемонта Цикл
		СтрокаТЧ.ТипЭксплуатации = СтрокаТЧ.ВидЭксплуатации.ТипЭксплуатации;
		СтрокаТЧ.ТипЭксплуатацииНаПериод = СтрокаТЧ.ВидЭксплуатацииНаПериод.ТипЭксплуатации;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоложенияОР()
	
	МассивОР = Новый Массив;
	Для каждого Стр Из Объект.ОбъектыРемонта Цикл
		МассивОР.Добавить(Стр.ОбъектРемонта);		
	КонецЦикла; 
	
	СтруктураПоложений = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, ТекСтруктураИерархии,,Истина,Истина);
	
	Для каждого Строка из Объект.ОбъектыРемонта Цикл
		Строка.Положение = СтруктураПоложений[Строка.ОбъектРемонта];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоложениеОРВстроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Положение = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(ТекущиеДанные.ОбъектРемонта, ТекСтруктураИерархии,,Истина,Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВнешнийВидФормы()

	ФОУчетПусковОборудования = Константы.торо_УчетПусковОборудования.Получить();
	ВидДокументаЕстьНаПериод = (Объект.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
	
	Если ФОУчетПусковОборудования Тогда
		УстановитьВидимостьКолонокВидовПусков();
	Иначе
		Элементы.ОбъектыРемонтаВидПуска.Видимость = Ложь;
		Элементы.ОбъектыРемонтаВидПускаНаПериод.Видимость = Ложь;
	КонецЕсли;
    УстановитьВидимостьКолонкиПричинаПростоя(ВидДокументаЕстьНаПериод);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВнешнийВидФормыПолная()

	Элементы.ОбъектыРемонтаПоложение.Видимость = мОтображатьПоложение;
	ФОУчетПусковОборудования = Константы.торо_УчетПусковОборудования.Получить();
	ВидДокументаЕстьНаПериод = (Объект.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
	
	Элементы.ОбъектыРемонтаДатаНачала.Видимость = ВидДокументаЕстьНаПериод;
	Элементы.ОбъектыРемонтаВидЭксплуатацииНаПериод.Видимость = ВидДокументаЕстьНаПериод;
	
	Если ФОУчетПусковОборудования Тогда
		УстановитьВидимостьКолонокВидовПусков();
	Иначе
		Элементы.ОбъектыРемонтаВидПуска.Видимость = Ложь;
		Элементы.ОбъектыРемонтаВидПускаНаПериод.Видимость = Ложь;
	КонецЕсли;
    УстановитьВидимостьКолонкиПричинаПростоя(ВидДокументаЕстьНаПериод);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонкиПричинаПростоя(ВидДокументаЕстьНаПериод)
	
	Если ВидДокументаЕстьНаПериод Тогда
		Элементы.ОбъектыРемонтаПричинаПростоя.Видимость = (КолонкаПричинаПростоя ИЛИ КолонкаПричинаПростояНаПериод ИЛИ (ЗначениеЗаполнено(Объект.ВидЭксплуатации) И Не ВидПуска));
	Иначе
		Элементы.ОбъектыРемонтаПричинаПростоя.Видимость = (КолонкаПричинаПростоя ИЛИ (ЗначениеЗаполнено(Объект.ВидЭксплуатации) И Не ВидПуска));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокВидовПусков()
	
	Если Элементы.ОбъектыРемонтаВидЭксплуатацииНаПериод.Видимость Тогда
		Элементы.ОбъектыРемонтаВидПускаНаПериод.Видимость = КолонкаВидПускаНаПериод ИЛИ ВидПуска;
		Элементы.ОбъектыРемонтаВидПуска.Видимость = КолонкаВидПуска;
	Иначе
		Элементы.ОбъектыРемонтаВидПускаНаПериод.Видимость = Ложь;
		Элементы.ОбъектыРемонтаВидПуска.Видимость = КолонкаВидПуска ИЛИ ВидПуска;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьТипЭксплуатации(ВидЭксплуатации)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТипЭксплуатации",ВидЭксплуатации.ТипЭксплуатации);
	СтруктураПараметров.Вставить("НеПростой",?(ВидЭксплуатации.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Простой,1,0));
	ФОУчетПусковОборудования = Константы.торо_УчетПусковОборудования.Получить();
	СтруктураПараметров.Вставить("ОбязательныйВводВидаПуска", ?(ФОУчетПусковОборудования, ВидЭксплуатации.ОбязательныйВводВидаПуска, ЛОжь));
	
	Возврат СтруктураПараметров;		
КонецФункции 

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ТекСтруктураИерархии = РезультатЗакрытия;
	КонецЕсли;
		
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПодменюВидаОперации()
	Элементы.ПодМенюВыборВидаОперации.Заголовок = Объект.ВидОперации;
	Элементы.ОбъектыРемонтаДатаОкончания.Заголовок  = ?(Объект.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод,НСтр("ru = 'Окончание периода'"),НСтр("ru = 'Дата изменения состояния'"));
	Элементы.ВидЭксплуатации.Заголовок = ?(Объект.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод,НСтр("ru = 'Вид эксплуатации на период'"),НСтр("ru = 'Вид эксплуатации'"));
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидОперацииДокумента(ВидОперации)
	Если Не Объект.ВидОперации = ВидОперации Тогда
		Объект.ВидОперации = ВидОперации;
		ИзменитьВидОперацииДокументаНаСервере();
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидОперацииДокументаНаСервере()
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	УстановитьВнешнийВидФормыПолная();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОбязательностьЗаполнения()
	
	Для каждого Стр Из Объект.ОбъектыРемонта Цикл
		
		ФОУчетПусковОборудования = Константы.торо_УчетПусковОборудования.Получить();
		Если ЗначениеЗаполнено(Стр.ВидЭксплуатации) и ФОУчетПусковОборудования Тогда
			Стр.ВидПускаОбязательностьЗаполнения = Стр.ВидЭксплуатации.ОбязательныйВводВидаПуска;
			Стр.КолонкаВидПуска = ?(Стр.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Простой,1,0);
		Иначе
			Стр.ВидПускаОбязательностьЗаполнения = Ложь;
			Стр.КолонкаВидПуска = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.ВидЭксплуатацииНаПериод) и ФОУчетПусковОборудования Тогда
			Стр.ВидПускаНаПериодОбязательностьЗаполнения = Стр.ВидЭксплуатацииНаПериод.ОбязательныйВводВидаПуска;
			Стр.КолонкаВидПускаНаПериод = ?(Стр.ТипЭксплуатацииНаПериод <> Перечисления.торо_ТипЭксплуатации.Простой,1,0);
		Иначе
			Стр.ВидПускаНаПериодОбязательностьЗаполнения = Ложь;
			Стр.КолонкаВидПускаНаПериод = 0;
		КонецЕсли;
		Стр.КолонкаПричинаПростоя = ?(Стр.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой,1,0);
		Стр.КолонКаПричинаПростояНаПериод =	?(Стр.ТипЭксплуатацииНаПериод = Перечисления.торо_ТипЭксплуатации.Простой,1,0);
		
		Стр.ПричинаПростояОбязательностьЗаполнения = ((Стр.КолонкаПричинаПростоя + Стр.КолонкаПричинаПростояНаПериод) > 0 
													 ИЛИ (((НЕ ЗначениеЗаполнено(Стр.ВидЭксплуатации) И Объект.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации)  
													 ИЛИ (НЕ ЗначениеЗаполнено(Стр.ВидЭксплуатацииНаПериод) И Объект.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод))
													 И ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой)) ;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПослеУдаления(Элемент)
	КолонкаВидПуска = (Объект.ОбъектыРемонта.Итог("КолонкаВидПуска") > 0);
	КолонкаВидПускаНаПериод = (Объект.ОбъектыРемонта.Итог("КолонкаВидПускаНаПериод") > 0);
	КолонкаПричинаПростоя 	= (Объект.ОбъектыРемонта.Итог("КолонкаПричинаПростоя") > 0);
	КолонкаПричинаПростояНаПериод = (Объект.ОбъектыРемонта.Итог("КолонкаПричинаПростояНаПериод") > 0);

	УстановитьВнешнийВидФормы();
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНеобходимостьВидаПускаИПричиныПростояВтекущейСтроке(ТекДанные)
	
	Перем ВидНаДату, ВидНаПериод, ТипПростой; 	
	ПолучитьПеречисленияНаСервере(ВидНаДату, ВидНаПериод, ТипПростой);
	
	Если (ЗначениеЗаполнено(ТекДанные.ВидЭксплуатации) И Объект.ВидОперации = ВидНаДату)  
				ИЛИ (ЗначениеЗаполнено(ТекДанные.ВидЭксплуатацииНаПериод) ИЛИ ЗначениеЗаполнено(Объект.ВидЭксплуатации) И Объект.ВидОперации = ВидНаПериод) Тогда
		РеквизитыВидаЭксплуатации = УстановитьТипЭксплуатации(ТекДанные.ВидЭксплуатации);
		ТекДанные.ТипЭксплуатации = РеквизитыВидаЭксплуатации.ТипЭксплуатации;
		ТекДанные.ВидПускаОбязательностьЗаполнения = РеквизитыВидаЭксплуатации.ОбязательныйВводВидаПуска; 
		ТекДанные.КолонкаВидПуска = РеквизитыВидаЭксплуатации.НеПростой;
		ТекДанные.КолонкаПричинаПростоя = 1-РеквизитыВидаЭксплуатации.НеПростой;
		
		РеквизитыВидаЭксплуатациинаПериод = УстановитьТипЭксплуатации(ТекДанные.ВидЭксплуатацииНаПериод);
		ТекДанные.ТипЭксплуатацииНаПериод = РеквизитыВидаЭксплуатациинаПериод.ТипЭксплуатации;
		ТекДанные.ВидПускаНаПериодОбязательностьЗаполнения = РеквизитыВидаЭксплуатациинаПериод.ОбязательныйВводВидаПуска; 
		ТекДанные.КолонкаВидПускаНаПериод = РеквизитыВидаЭксплуатациинаПериод.НеПростой;
		ТекДанные.КолонкаПричинаПростояНаПериод = 1-РеквизитыВидаЭксплуатациинаПериод.НеПростой;
	Иначе
		ТекДанные.ТипЭксплуатации = ТекДанные.ТипЭксплуатацииНаПериод.Пустая();
		ТекДанные.ВидПускаОбязательностьЗаполнения = Ложь;
		ТекДанные.КолонкаВидПуска = 0;
		ТекДанные.КолонкаПричинаПростоя = 0;
		
		ТекДанные.ТипЭксплуатацииНаПериод = ТекДанные.ТипЭксплуатацииНаПериод.Пустая();
		ТекДанные.ВидПускаНаПериодОбязательностьЗаполнения = Ложь;
		ТекДанные.КолонкаВидПускаНаПериод = 0;
		ТекДанные.КолонкаПричинаПростояНаПериод = 0;
	КонецЕсли;
	
	ТекДанные.ПричинаПростояОбязательностьЗаполнения = ((ТекДанные.КолонкаПричинаПростоя + ТекДанные.КолонкаПричинаПростояНаПериод) > 0 
													   ИЛИ (((НЕ ЗначениеЗаполнено(ТекДанные.ВидЭксплуатации) И Объект.ВидОперации = ВидНаДату)  
													   ИЛИ (НЕ ЗначениеЗаполнено(ТекДанные.ВидЭксплуатацииНаПериод) И Объект.ВидОперации = ВидНаПериод))    
													   И ТипЭксплуатации = ТипПростой)) ;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНеобходимостьВидаПускаИПричиныПростояНаФорме()
	
	КолонкаВидПуска = (Объект.ОбъектыРемонта.Итог("КолонкаВидПуска") > 0);
	КолонкаВидПускаНаПериод = (Объект.ОбъектыРемонта.Итог("КолонкаВидПускаНаПериод") > 0);
	КолонкаПричинаПростоя 	= (Объект.ОбъектыРемонта.Итог("КолонкаПричинаПростоя") > 0);
	КолонкаПричинаПростояНаПериод = (Объект.ОбъектыРемонта.Итог("КолонкаПричинаПростояНаПериод") > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		НС = Элементы.ОбъектыРемонта.ТекущиеДанные;
		Если ВыбранноеЗначение.Свойство("ОбъектРемонта") Тогда
			
			НС.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;	
			НС.СтруктураИерархии = ТекСтруктураИерархии;
			
			Если ВыбранноеЗначение.Свойство("ДатаНачала") и ЗначениеЗаполнено(ВыбранноеЗначение.ДатаНачала) Тогда
				Если Объект.ВидОперации= ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
					НС.ДатаНачала = ВыбранноеЗначение.ДатаНачала;
				Иначе
					НС.ДатаОкончания = ВыбранноеЗначение.ДатаНачала;
				КонецЕсли;
			КонецЕсли;
			
			Если ВыбранноеЗначение.Свойство("ВидЭксплуатации") и ЗначениеЗаполнено(ВыбранноеЗначение.ВидЭксплуатации) Тогда
				Если Объект.ВидОперации= ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
					НС.ВидЭксплуатацииНаПериод = ВыбранноеЗначение.ВидЭксплуатации;
				Иначе
					НС.ВидЭксплуатации = ВыбранноеЗначение.ВидЭксплуатации;
				КонецЕсли;
				ОбъектыРемонтаВидЭксплуатацииПриИзменении(Неопределено);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОРОбработчикОжидания()
	
	Если Объект.ОбъектыРемонта.Количество() = 0 Тогда
		ОткрытьФормуПодбораОРИзОснования(Элементы.ОбъектыРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораОРИзОснования(Элемент, ОткрыватьБезусловно = Ложь, ОдиночныйВыбор = Ложь)
	
	стрПараметров = Новый структура("ТипВыходногоДок, ДокументыОснования, ОдиночныйВыбор, ОткрыватьБезусловно", 
			ПредопределенноеЗначение("Перечисление.торо_ВидыВыходныхДокументов.СостояниеОР"), Объект.ДокументОснование, ОдиночныйВыбор, ОткрыватьБезусловно);
			
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораОРПриВводеНаОсновании", стрПараметров, Элемент, ЭтаФорма.УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

Процедура ЗаполнитьВидЭксплуатации(ВидОперацииИзменен = Ложь)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
		Для Каждого Строка Из Объект.ОбъектыРемонта Цикл
			Строка.ВидЭксплуатацииНаПериод = Объект.ВидЭксплуатации;
			Строка.ВидПуска = Неопределено;
			Если ВидОперацииИзменен Тогда 
				Строка.ВидЭксплуатации = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Объект.ОбъектыРемонта Цикл
			Строка.ВидЭксплуатации = Объект.ВидЭксплуатации;
			Строка.ВидПуска = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДанныеНаПериод()
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ОбъектыРемонта Цикл
		Строка.ДатаНачала = Неопределено;
		Строка.ВидЭксплуатацииНаПериод = Неопределено;
		Строка.ВидПускаНаПериод = Неопределено;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ОбъектыРемонтаГруппаЗаполнить");
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.ОбъектыРемонта,СписокЭлементов,ЭтаФорма,ПравоРедактирование);
	
КонецПроцедуры


#КонецОбласти

