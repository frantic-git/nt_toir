
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Объект.ВидПлана);
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ПланРаботПодразделения;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	// Диаграмма ганта
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПостроитьДиаграмму();
		ДатаОкончания = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаОтсчета, Объект.ПериодичностьПланирования, Объект.КоличествоПериодов);
		ДиаграммаРемонтов.АвтоОпределениеПолногоИнтервала = Ложь;
		ДиаграммаРемонтов.УстановитьПолныйИнтервал(Объект.ДатаОтсчета, ДатаОкончания);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаГлобальные;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ФОНазначениеНаРемонтыСУчетомРисков   = ПолучитьФункциональнуюОпцию("торо_НазначениеНаРемонтСУчетомРисков");
	Если Не ФОНазначениеНаРемонтыСУчетомРисков Тогда
		Элементы.СписокРемонтовПлановКрайняяДатаЗавершения.Видимость 	     = Ложь;
		Элементы.СписокРемонтовПлановКрайняяДатаЗавершенияИсходная.Видимость = Ложь;
	КонецЕсли;
	
	ДиаграммаРемонтов.ОтображатьЗаголовок = Ложь;
	ДиаграммаРемонтов.ОтображатьЛегенду   = Ложь;
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Год"   , Ложь);
	Соответствие.Вставить("Месяц" , Ложь);
	Соответствие.Вставить("Неделя", Ложь);
	Соответствие.Вставить("День"  , Ложь);
	Соответствие.Вставить("Час"   , Ложь);
	
	Если Объект.ТочностьПланирования = Перечисления.торо_ДетализацияПлана.Год Тогда
		Соответствие["Год"]   = Истина;
	ИначеЕсли Объект.ТочностьПланирования = Перечисления.торо_ДетализацияПлана.Месяц Тогда
		Соответствие["Месяц"] = Истина;
	ИначеЕсли Объект.ТочностьПланирования = Перечисления.торо_ДетализацияПлана.Неделя Тогда
		Соответствие["Неделя"]  = Истина;
	ИначеЕсли Объект.ТочностьПланирования = Перечисления.торо_ДетализацияПлана.Час Тогда
		Соответствие["Час"]  = Истина;
		Соответствие["День"]  = Истина;
		Соответствие["Месяц"]  = Истина;
	ИначеЕсли Объект.ТочностьПланирования = Перечисления.торо_ДетализацияПлана.День Тогда
		Соответствие["День"]  = Истина;
		Соответствие["Месяц"] = Истина;
	Иначе
		Соответствие["Неделя"]= Истина;
		Соответствие["День"]  = Истина;
	КонецЕсли; 
	
	Для каждого ЭлементНастройки Из ДиаграммаРемонтов.ОбластьПостроения.ШкалаВремени.Элементы Цикл
		НастройкаИспользования = Соответствие.Получить(Строка(ЭлементНастройки.Единица));
		Если НЕ НастройкаИспользования = Неопределено Тогда
			ЭлементНастройки.Видимость = НастройкаИспользования;
		КонецЕсли; 
	КонецЦикла;

	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.СписокРемонтовПлана.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Объект.ВидПлана);
	// Заголовок формы--
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		ДиаграммаРемонтов.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
		ДатаОкончания = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаОтсчета, Объект.ПериодичностьПланирования, Объект.КоличествоПериодов);
		ДиаграммаРемонтов.УстановитьПолныйИнтервал(Объект.ДатаОтсчета, ДатаОкончания);
	Иначе
		ДиаграммаРемонтов.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаРемонтов.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаРемонтов.КратностьПериодическогоВарианта 	= 101 - ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаРемонтов.Точки Цикл
		ДиаграммаРемонтов.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаРемонтов.Точки Цикл
		ДиаграммаРемонтов.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;    

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЛегенды(Команда)
	
	Элементы.ОтображениеЛегенды.Пометка = НЕ Элементы.ОтображениеЛегенды.Пометка;
	Элементы.ГруппаЛегенда.Видимость = Элементы.ОтображениеЛегенды.Пометка;

КонецПроцедуры

&НаКлиенте 
Процедура ПостроитьОбновить(Команда)
	ПостроитьДиаграмму();
	ДатаОкончания = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаОтсчета, Объект.ПериодичностьПланирования, Объект.КоличествоПериодов);
	ДиаграммаРемонтов.УстановитьПолныйИнтервал(Объект.ДатаОтсчета, ДатаОкончания);
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРемонтовПланов

&НаКлиенте
Процедура СписокРемонтовПлановВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не Поле.Имя = "СписокРемонтовПлановДокументОснование"
		И Не Поле.Имя = "СписокРемонтовПлановОбъектРемонта"
		И Не Поле.Имя = "СписокРемонтовПлановВидРемонта" Тогда
	    Возврат;
	КонецЕсли; 
	
	СоответствиеИменПолейРеквизитам = Новый Соответствие;
	СоответствиеИменПолейРеквизитам.Вставить("СписокРемонтовПлановДокументОснование", "ДокументОснование");
	СоответствиеИменПолейРеквизитам.Вставить("СписокРемонтовПлановОбъектРемонта", "ОбъектРемонта");
	СоответствиеИменПолейРеквизитам.Вставить("СписокРемонтовПлановВидРемонта", "ВидРемонта");
	
	ИмяПоляДляОткрытияЗначения = СоответствиеИменПолейРеквизитам.Получить(Поле.Имя);
	
	ПолеДляОткрытияЗначения = Объект.СписокРемонтовПлана.НайтиПоИдентификатору(ВыбраннаяСтрока)[ИмяПоляДляОткрытияЗначения];
	Если Не ИмяПоляДляОткрытияЗначения = Неопределено И ЗначениеЗаполнено(ПолеДляОткрытияЗначения) Тогда
		ПоказатьЗначение(, ПолеДляОткрытияЗначения);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаСервере
Процедура ПостроитьДиаграмму()
	
	ДиаграммаРемонтов.Очистить();
	
	Если Объект.ПериодичностьПланирования = Перечисления.Периодичность.День Тогда 
		ДиаграммаРемонтов.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		ДиаграммаРемонтов.КратностьПериодическогоВарианта = 1;
	ИначеЕсли Объект.ПериодичностьПланирования = Перечисления.Периодичность.Неделя Тогда 
		ДиаграммаРемонтов.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		ДиаграммаРемонтов.КратностьПериодическогоВарианта = 1;
	ИначеЕсли Объект.ПериодичностьПланирования = Перечисления.Периодичность.Декада Тогда 
		ДиаграммаРемонтов.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		ДиаграммаРемонтов.КратностьПериодическогоВарианта = 10;
	ИначеЕсли Объект.ПериодичностьПланирования = Перечисления.Периодичность.Месяц Тогда 
		ДиаграммаРемонтов.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		ДиаграммаРемонтов.КратностьПериодическогоВарианта = 1;
	ИначеЕсли Объект.ПериодичностьПланирования = Перечисления.Периодичность.Квартал Тогда 
		ДиаграммаРемонтов.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Квартал;
		ДиаграммаРемонтов.КратностьПериодическогоВарианта = 1;
	ИначеЕсли Объект.ПериодичностьПланирования = Перечисления.Периодичность.Полугодие Тогда 
		ДиаграммаРемонтов.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Квартал;
		ДиаграммаРемонтов.КратностьПериодическогоВарианта = 2;
	КонецЕсли;
	
	СерияДГ = ДиаграммаРемонтов.Серии.Добавить();
	СерияДГ.Текст = "Ремонты";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаНачала КАК ДатаНачала,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ДатаОкончания КАК ДатаОкончания,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ВидРемонта КАК ВидРемонта,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ИсточникДанных КАК ИсточникДанных,
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.ID КАК ID
		|ИЗ
		|	Документ.торо_ПланРаботПодразделения.СписокРемонтовПлана КАК торо_ПланРаботПодразделенияСписокРемонтовПлана
		|ГДЕ
		|	торо_ПланРаботПодразделенияСписокРемонтовПлана.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	ОбъектРемонта,
		|	ВидРемонта";
	
	ЦветВыполненогоППР 						= WebЦвета.Синий;
	ЦветЗапланированногоППР 				= WebЦвета.Васильковый;	
	
	ЦветВыполненогоМероприятия 				= WebЦвета.ТемноЗеленый;
	ЦветЗапланированногоМероприятия			= WebЦвета.ЖелтоЗеленый;	
	
	ЦветВыполненогоСметыПоДефектам 			= WebЦвета.Красный;
	ЦветЗапланированногоСметыПоДефектам 	= WebЦвета.Кирпичный;
	
	ЦветВыполненогоСметыПоПредписаниям		= WebЦвета.Желтый;
	ЦветЗапланированногоСметыПоПредписаниям	= WebЦвета.Оранжевый;
	
	ТекДата = ТекущаяДата();
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаОбъектРемонта = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ВыборкаОбъектРемонта.Следующий() Цикл
		ТочкаОР = ДиаграммаРемонтов.Точки.Добавить();
		ТочкаОР.Текст = ВыборкаОбъектРемонта.ОбъектРемонта;
		ЗначениеОР = ДиаграммаРемонтов.ПолучитьЗначение(ТочкаОР, СерияДГ);
		ВыборкаВидРемонта = ВыборкаОбъектРемонта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаВидРемонта.Следующий() Цикл
			ТочкаВР = ТочкаОР.Точки.Добавить();
			ТочкаВР.Текст = ВыборкаВидРемонта.ВидРемонта;
			ЗначениеВР = ДиаграммаРемонтов.ПолучитьЗначение(ТочкаВР, СерияДГ);
			Выборка = ВыборкаВидРемонта.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ИсточникДанных = "ППР" Тогда
					ЦветИнтервала   = ?(КонецДня(Выборка.ДатаОкончания) < ТекДата, ЦветВыполненогоППР,  ЦветЗапланированногоППР);	
				ИначеЕсли Выборка.ИсточникДанных = "РМ" Тогда
					ЦветИнтервала   = ?(КонецДня(Выборка.ДатаОкончания) < ТекДата, ЦветВыполненогоМероприятия,  ЦветЗапланированногоМероприятия);	
				ИначеЕсли Выборка.ИсточникДанных = "СПД" Тогда
					ЦветИнтервала   = ?(Выборка.ДатаОкончания < ТекДата, ЦветВыполненогоСметыПоДефектам,  ЦветЗапланированногоСметыПоДефектам);
				ИначеЕсли Выборка.ИсточникДанных = "СПВО" Тогда
					ЦветИнтервала   = ?(Выборка.ДатаОкончания < ТекДата, ЦветВыполненогоСметыПоПредписаниям,  ЦветЗапланированногоСметыПоПредписаниям);
				КонецЕсли;
				
				Попытка	
					Интервал = ЗначениеВР.Добавить();
					Интервал.Начало = Выборка.ДатаНачала;
					Интервал.Конец  = Выборка.ДатаОкончания;
					Интервал.Цвет   = ЦветИнтервала;
					
					Интервал = ЗначениеОР.Добавить();
					Интервал.Начало = Выборка.ДатаНачала;
					Интервал.Конец  = Выборка.ДатаОкончания;
					Интервал.Цвет   = ЦветИнтервала; 
				Исключение 
					СтрокаСОшибкой = Объект.СписокРемонтовПлана.НайтиСтроки(Новый Структура("ID", Выборка.ID));
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверная дата!'"),,"Объект.СписокРемонтовПлана[" + (Объект.СписокРемонтовПлана.Индекс(СтрокаСОшибкой[0])) + "]." + "ДатаНачала");
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
