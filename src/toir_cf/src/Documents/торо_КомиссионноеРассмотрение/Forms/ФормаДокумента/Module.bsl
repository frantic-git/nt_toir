////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТЗКандидаты = Объект.ДанныеПоКандидатам.Выгрузить().Скопировать();
	ТЗКандидаты.Свернуть("Кандидат");
	
	Кандидаты.Загрузить(ТЗКандидаты);
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	КонецЕсли;
	
	СуммаРемонтов = Объект.Операции.Итог("СуммаРемонта");
	
	СтруктураОтбора = Новый Структура("Критерий, Кандидат", ПланыВидовХарактеристик.торо_КритерииВыбораПодрядчиков.ПредлагаемаяСуммаПодряда, Объект.Подрядчик); 
	НайденныеСтроки = Объект.ДанныеПоКандидатам.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из НайденныеСтроки Цикл
	     Объект.Сумма = Строка.Показатель;
	 КонецЦикла; 
	 
	КритерийПредлагаемаяСумма = ПолучитьКритерийНаСервере("Предлагаемая сумма подряда");
	МассивСтрокСКритерием = Объект.КритерииВыбораПодрядчиков.НайтиСтроки(Новый Структура("Критерий", КритерийПредлагаемаяСумма));
	Если МассивСтрокСКритерием.Количество() Тогда
		Объект.ПлановаяСумма = МассивСтрокСКритерием[0].Показатель;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.Операции.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Для Каждого ТекущиеДанные Из Объект.КритерииВыбораПодрядчиков Цикл		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Критерий) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Критерий"" в таблице ""Критерии выбора подрядчиков""!'");
			Поле = СтрШаблон("Объект.КритерииВыбораПодрядчиков[%1].Критерий", Объект.КритерииВыбораПодрядчиков.Индекс(ТекущиеДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;	
		Если Объект.КритерииВыбораПодрядчиков.НайтиСтроки(Новый Структура("Критерий", ТекущиеДанные.Критерий )).Количество() > 1 Тогда		
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Критерий"" ""(%1)"" в таблице ""Критерии выбора подрядчиков""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.Критерий);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.КритерииВыбораПодрядчиков",, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущиеДанные Из Кандидаты Цикл
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Кандидат) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Кандидат"" в таблице ""Кандидаты""!'");
			Поле = СтрШаблон("Кандидаты[%1].Кандидат", Кандидаты.Индекс(ТекущиеДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		
		Если Кандидаты.НайтиСтроки(Новый Структура("Кандидат", ТекущиеДанные.Кандидат )).Количество() > 1 Тогда		
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Кандидаты"" ""(%1)"" в таблице ""Кандидаты!""'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.Кандидат);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Кандидаты",, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущиеДанные Из Объект.ДанныеПоКандидатам Цикл 
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Критерий) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Критерий"" в таблице ""Данные по кандидатам""!'");
			Поле = СтрШаблон("Объект.ДанныеПоКандидатам[%1].Критерий", Объект.ДанныеПоКандидатам.Индекс(ТекущиеДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаДиаграммаВыбора Тогда
	
		ПеречитатьОценки();
		ДанныеПриСменеСтраницы(Элементы.Данные, Элементы.Данные.ТекущаяСтраница);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Данные.ТекущаяСтраница = Элементы.СтрДанныеПоКандидатам Тогда
		
		ПостроитьДиаграммуДанныеПоКандидатам();
		
	ИначеЕсли Элементы.Данные.ТекущаяСтраница = Элементы.СтрФакт Тогда 
		
		ПостроитьДиаграммуФактДанныеПоКандидатам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОценкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ВидОценки.ТекущаяСтраница = Элементы.Общая Тогда
		
		ПостроитьОбщуюДиаграмму();
		
	ИначеЕсли Элементы.ВидОценки.ТекущаяСтраница = Элементы.ВРазрезеКритериев Тогда 
		
		ДанныеПриСменеСтраницы(Элементы.Данные, Элементы.Данные.ТекущаяСтраница);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтныхРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораГрафиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтныхРаботОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПланРемонтныхРаботОчисткаЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Ремонты"" будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации
&НаКлиенте
Процедура ОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			
			НайдСтроки = Объект.Операции.НайтиСтроки(Новый Структура("ID", ЭлементМассива.ID));
			
			Если Не НайдСтроки.Количество() > 0 Тогда
			
				НС = Объект.Операции.Добавить();
				
				ЗаполнитьЗначенияСвойств(НС, ЭлементМассива);
				НС.ID = ЭлементМассива.ID;
			
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	СуммаРемонтов = Объект.Операции.Итог("СуммаРемонта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриИзменении(Элемент)
	СуммаРемонтов = Объект.Операции.Итог("СуммаРемонта");
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СуммаРемонтов = Объект.Операции.Итог("СуммаРемонта");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКандидаты
&НаКлиенте
Процедура КандидатыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("КандидатыПередУдалениемЗавершение",ЭтотОбъект),
						НСтр("ru = 'Данные в связанных табличных частях будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура КандидатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ВыбранныйКандидат = Элемент.ТекущиеДанные.Кандидат;
КонецПроцедуры

&НаКлиенте
Процедура КандидатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;	
		
		Если Кандидаты.НайтиСтроки(Новый Структура("Кандидат", ТекущиеДанные.Кандидат )).Количество() > 1 Тогда		
			Если ЗначениеЗаполнено(ТекущиеДанные.Кандидат) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Кандидаты"" ""(%1)"" в таблице ""Кандидаты!""'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.Кандидат);
			Иначе
				ТекстСообщения = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Кандидаты"" в таблице ""Кандидаты!""'");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Кандидаты",, Отказ);
			Возврат;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		 Элемент.ТекущиеДанные.Кандидат = ВыбранныйКандидат;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КандидатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Кандидат) И Не НоваяСтрока Тогда
		НайдСтроки = Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура ("Кандидат", ВыбранныйКандидат));
		Для каждого Строка Из НайдСтроки Цикл
			Объект.ДанныеПоКандидатам.Удалить(Строка);
		КонецЦикла; 
		ВыбранныйКандидат = Элемент.ТекущиеДанные.Кандидат;
		Модифицированность = Истина;
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КандидатыПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ТекущиеДанные = Элементы.Кандидаты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НайдСтроки = Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура ("Кандидат", ТекущиеДанные.Кандидат));
		Для каждого Строка Из НайдСтроки Цикл
			Объект.ДанныеПоКандидатам.Удалить(Строка);
		КонецЦикла; 
		
		
		Если ТекущиеДанные.Кандидат = Объект.Подрядчик Тогда
			Объект.Подрядчик = "";
			Объект.Договор = "";
			Объект.Сумма = "";
		КонецЕсли;
		
		Кандидаты.Удалить(ТекущиеДанные);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КандидатыКандидатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Кандидаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗначение = ТекущиеДанные.Кандидат;
	Если ТекущееЗначение <> ВыбранноеЗначение Тогда
		МассивСтрок = Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура ("Кандидат", ТекущееЗначение));
		Для каждого Строка Из МассивСтрок Цикл
			Строка.Кандидат = ВыбранноеЗначение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КандидатыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Кандидаты.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийКандидат = Элементы.Кандидаты.ТекущиеДанные.Кандидат;
		
		Если ТекущийКандидат <> Неопределено Тогда
			
			Элементы.ДанныеПоКандидатам.ОтборСтрок = Новый ФиксированнаяСтруктура("Кандидат", ТекущийКандидат);
					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеПоКандидатам
&НаКлиенте
Процедура ДанныеПоКандидатамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.Кандидаты.ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(Элементы.Кандидаты.ТекущиеДанные.Кандидат) Тогда
		ТекстСообщения = НСтр("ru = 'Кандидат не выбран.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоКандидатамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанныеПоКандидатам = Элементы.ДанныеПоКандидатам.ТекущиеДанные;
	
	Если Не ОтменаРедактирования И НоваяСтрока Тогда
		
		Если Элементы.Кандидаты.ТекущиеДанные <> Неопределено
			И  ТекущиеДанныеПоКандидатам <> Неопределено Тогда
			
			ТекущиеДанныеПоКандидатам.Кандидат = Элементы.Кандидаты.ТекущиеДанные.Кандидат;	
			
		КонецЕсли;
		
		Если Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура("Критерий, Кандидат", ТекущиеДанныеПоКандидатам.Критерий, ТекущиеДанныеПоКандидатам.Кандидат)).Количество() > 1 Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбранный критерий уже есть в списке.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Объект.ДанныеПоКандидатам.Удалить(ТекущиеДанныеПоКандидатам);
			
		КонецЕсли;
		
	КонецЕсли;
	Модифицированность = Истина;	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКритерииВыбораПодрядчиков

&НаКлиенте
Процедура КритерииВыбораПодрядчиковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.КритерииВыбораПодрядчиков.ТекущиеДанные.Коэффициент = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КритерииВыбораПодрядчиковПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ ОтменаРедактирования Тогда
		Если Элемент.ТекущиеДанные.Критерий <> Неопределено Тогда
			Если Элемент.ТекущиеДанные.Критерий = ПолучитьКритерийНаСервере("Предлагаемая сумма подряда") Тогда
				Объект.ПлановаяСумма = Элемент.ТекущиеДанные.Показатель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКритерийНаСервере(Критерий)
	Возврат ПланыВидовХарактеристик.торо_КритерииВыбораПодрядчиков.НайтиПоНаименованию(Критерий, Истина);
КонецФункции

&НаКлиенте
Процедура КритерииВыбораПодрядчиковКритерийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КритерииВыбораПодрядчиков.ТекущиеДанные;
	Если ТекущиеДанные.Критерий <> Неопределено Тогда
		
		ТипЗначенияКритерия =  ПолучитьТипЗначенияКритерия(ТекущиеДанные.Критерий);
		
		Попытка
			ТекущиеДанные.Показатель = ТипЗначенияКритерия.ПривестиЗначение(ТекущиеДанные.Показатель);
		Исключение
			ТекущиеДанные.Показатель = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КритерииВыбораПодрядчиковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("КритерииВыбораПодрядчиковПередУдалениемЗавершение",ЭтотОбъект),
					НСтр("ru = 'Данные в связанных табличных частях будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КритерииВыбораПодрядчиковПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ТекущиеДанные = Элементы.КритерииВыбораПодрядчиков.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НайдСтроки = Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура ("Критерий", ТекущиеДанные.Критерий));
		Для каждого Строка Из НайдСтроки Цикл
			Объект.ДанныеПоКандидатам.Удалить(Строка);
		КонецЦикла; 
		
		Объект.КритерииВыбораПодрядчиков.Удалить(ТекущиеДанные);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыКритерииВыбораПодрядчиков1
&НаКлиенте
Процедура КритерииВыбораПодрядчиков1ПриАктивизацииСтроки(Элемент)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ДанныеПриСменеСтраницы(Элементы.Данные, Элементы.Данные.ТекущаяСтраница);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборРемонтныхРабот(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПланРемонтныхРабот) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""План-график ППР""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ОткрытьФорму("Обработка.торо_ВыборРемонтаИзПланГрафика.Форма",Новый Структура("СсылкаНаППР", Объект.ПланРемонтныхРабот), Элементы.Операции,, ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКандидату(Команда)
	
	
	
	Если Элементы.Кандидаты.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийКандидат = Элементы.Кандидаты.ТекущиеДанные.Кандидат;
		
		Для каждого Строка Из Объект.КритерииВыбораПодрядчиков Цикл
			
			Отбор = Новый Структура("Кандидат, Критерий",ТекущийКандидат, Строка.Критерий);
			
			НайдСтр = Объект.ДанныеПоКандидатам.НайтиСтроки(Отбор);
			
			Если НайдСтр.Количество() = 0 Тогда
				
				НС = Объект.ДанныеПоКандидатам.Добавить();
				
				НС.Кандидат = ТекущийКандидат;
				
				НС.Критерий = Строка.Критерий;
				
				Если НС.Критерий <> Неопределено Тогда
					
					Попытка
						НС.Показатель = ПолучитьТипЗначенияКритерия(НС.Критерий).ПривестиЗначение(НС.Показатель);
					Исключение
						НС.Показатель = Неопределено;
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;	
		
		КандидатыПриАктивизацииСтроки(Элементы.Кандидаты);
		
	Иначе 
		
		ТекстСообщения = НСтр("ru = 'Кандидат не выбран.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлану(Команда)
	
	ВыбранноеЗначение = ПолучитьПланНаСервере(Объект.ПланРемонтныхРабот);
	
	ОперацииОбработкаВыбора(Элементы.Операции, ВыбранноеЗначение, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьПараметрыВыбораГрафиков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|ГДЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен = ЛОЖЬ
		|	И торо_ПланГрафикРемонтаПланРемонтов.Ссылка.Проведен = ИСТИНА
		|	И торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения = ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный)
		|	И (торо_ПланГрафикРемонтаПланРемонтов.Исполнитель = НЕОПРЕДЕЛЕНО
		|			ИЛИ торо_ПланГрафикРемонтаПланРемонтов.Исполнитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))";

	РезультатЗапроса = Запрос.Выполнить();

	ТЗРезультат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	НовыйМассив = Новый Массив();
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ТЗРезультат);
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	
	Элементы.ПланРемонтныхРабот.ПараметрыВыбора  = НовыеПараметры;


КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПланНаСервере(СсылкаНаППР)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_IDРемонтов
	               |ИЗ
	               |	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |ГДЕ
	               |	торо_ПланГрафикРемонтаПланРемонтов.Ссылка = &Ссылка
	               |	И торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения = ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный)
	               |	И (торо_ПланГрафикРемонтаПланРемонтов.Исполнитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ИЛИ торо_ПланГрафикРемонтаПланРемонтов.Исполнитель = НЕОПРЕДЕЛЕНО
	               |			ИЛИ торо_ПланГрафикРемонтаПланРемонтов.Исполнитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.ЕстьАкт
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
	               |	И НЕ торо_ОбщиеДанныеПоРемонтам.Замещен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПРРСП.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	               |	ПРРСП.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ПРРСП.ДатаНачалаРемонтныхРабот КАК ДатаНач,
	               |	ПРРСП.ДатаОкончанияРемонтныхРабот КАК ДатаКон,
	               |	ПРРСП.СтоимостьРемонта КАК СуммаРемонта,
	               |	ПРРСП.ID КАК ID
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					ВТ_IDРемонтов.ID
	               |				ИЗ
	               |					ВТ_IDРемонтов КАК ВТ_IDРемонтов)) КАК ПРРСП
	               |ГДЕ
	               |	ПРРСП.СпособВыполнения = ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный)
	               |	И (ПРРСП.Исполнитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ИЛИ ПРРСП.Исполнитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |			ИЛИ ПРРСП.Исполнитель = НЕОПРЕДЕЛЕНО)";

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаППР);

	РезультатЗапроса = Запрос.Выполнить();

	ТЗРезультат = РезультатЗапроса.Выгрузить();

	Массив = Новый Массив();
	
	Для каждого Строка Из ТЗРезультат Цикл
		
		Структура = Новый Структура();
		
		Для каждого Колонка Из ТЗРезультат.Колонки Цикл
		
			 Структура.Вставить(колонка.Имя, Строка[Колонка.Имя]);
		
		КонецЦикла; 
		
		Массив.Добавить(Структура);
	КонецЦикла; 
	
	Возврат Массив;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипЗначенияКритерия(Свойство)

	Возврат Свойство.ТипЗначения;	

КонецФункции

&НаСервере
Процедура ПеречитатьОценки()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика.КритерийВыбораПодрядчика,
	               |	торо_ОценкиПодрядчиковПоКритериям.Оценка КАК Критерий,
	               |	торо_ОценкиПодрядчиковПоКритериям.Контрагент,
	               |	торо_ОценкиПодрядчиковПоКритериям.ВидОценки КАК ВидОценки,
	               |	СРЕДНЕЕ(торо_ОценкиПодрядчиковПоКритериям.Значение) КАК Значение
	               |ИЗ
	               |	РегистрСведений.торо_ОценкиПодрядчиковПоКритериям КАК торо_ОценкиПодрядчиковПоКритериям
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_КритерииОценки.БазовыеКритерииВыбораПодрядчика КАК торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика
	               |		ПО торо_ОценкиПодрядчиковПоКритериям.Оценка = торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика.Ссылка
	               |ГДЕ
	               |	торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика.КритерийВыбораПодрядчика В(&СписокКритериев)
	               |	И торо_ОценкиПодрядчиковПоКритериям.Контрагент В(&СписокПодрядчиков)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ОценкиПодрядчиковПоКритериям.Оценка,
	               |	торо_ОценкиПодрядчиковПоКритериям.ВидОценки,
	               |	торо_ОценкиПодрядчиковПоКритериям.Контрагент,
	               |	торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика.КритерийВыбораПодрядчика";
				   
				   
	СписокКандидатов = Новый СписокЗначений;
	СписокКритериев = Новый СписокЗначений;
	
	спКандидаты = Объект.ДанныеПоКандидатам.Выгрузить(,"Кандидат");
	спКандидаты.Свернуть("Кандидат",);
	
	СписокКандидатов.ЗагрузитьЗначения(спКандидаты.ВыгрузитьКолонку("Кандидат"));
	
	Критерии = Объект.ДанныеПоКандидатам.Выгрузить(,"Критерий");
	Критерии.Свернуть("Критерий",);
	
	СписокКритериев.ЗагрузитьЗначения(Критерии.ВыгрузитьКолонку("Критерий"));
	
	
	Запрос.УстановитьПараметр("СписокПодрядчиков", СписокКандидатов);	
	Запрос.УстановитьПараметр("Дата"            , ?(Объект.ДатаПроведения <> Неопределено, Объект.ДатаПроведения, ТекущаяДата()));
	Запрос.УстановитьПараметр("СписокКритериев" , СписокКритериев);
	
	ОценкиФакт.Очистить();
	
	ВыборкаПоГруппировкам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоГруппировкам.Следующий() Цикл
	
		НС = ОценкиФакт.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ВыборкаПоГруппировкам);
	
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОценкиПоПодрядчикам.Оценка КАК Критерий,
	               |	СУММА(торо_ОценкиПоПодрядчикам.Значение) КАК Значение,
	               |	торо_ОценкиПоПодрядчикам.Контрагент
	               |ИЗ
	               |	РегистрСведений.торо_ОценкиПоПодрядчикам КАК торо_ОценкиПоПодрядчикам
	               |ГДЕ
	               |	торо_ОценкиПоПодрядчикам.Контрагент В(&СписокПодрядчиков)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ОценкиПоПодрядчикам.Оценка,
	               |	торо_ОценкиПоПодрядчикам.Контрагент";
				   
	Запрос.УстановитьПараметр("СписокПодрядчиков",СписокКандидатов);
	
	ОценкиОбщие.Очистить();

	ВыборкаПоГруппировкам = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоГруппировкам.Следующий() Цикл
	
		НС = ОценкиОбщие.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ВыборкаПоГруппировкам);
	
	КонецЦикла;
	

КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуДанныеПоКандидатам()

	ДиаграммаДанныеПоКандидатам.Очистить();
	
	ТекущаяСтрокаКритерийВыбораПодрядчика = Элементы.КритерииВыбораПодрядчиков1.ТекущиеДанные;
	
	Если ТекущаяСтрокаКритерийВыбораПодрядчика = Неопределено Тогда
		Если Объект.КритерииВыбораПодрядчиков.Количество() > 0 Тогда
			ТекущийКритерийВыбораПодрядчика = Объект.КритерииВыбораПодрядчиков[0].Критерий;			
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущийКритерийВыбораПодрядчика = Элементы.КритерииВыбораПодрядчиков1.ТекущиеДанные.Критерий;
    КонецЕсли;
	
	ПредложенныеОценки       = Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура("Критерий",ТекущийКритерийВыбораПодрядчика));
	
	Массив = Объект.КритерииВыбораПодрядчиков.НайтиСтроки(Новый Структура("Критерий",ТекущийКритерийВыбораПодрядчика));
	
	Если Массив.Количество() > 0 Тогда
		ПредпочтительноеЗначение = Массив[0].Показатель;
	Иначе
		ПредпочтительноеЗначение = 0;
	КонецЕсли; 
	
	ТипРезультата = ТипЗнч(ПредпочтительноеЗначение);
	
	Серия = ДиаграммаДанныеПоКандидатам.Серии.Добавить("Предложенное");
	Серия.Текст = "Предложенное";
	Серия.ПриоритетЦвета = Ложь;
	
	СерияПредпочтение = ДиаграммаДанныеПоКандидатам.Серии.Добавить("Предпочтительное");
	СерияПредпочтение.Текст     = "Предпочтительное";
	СерияПредпочтение.Индикатор = Истина;
	СерияПредпочтение.Маркер    = ТипМаркераДиаграммы.Нет;
	СерияПредпочтение.Цвет      = WebЦвета.Зеленый;
	
	Если ПредложенныеОценки.Количество() > 0 Тогда
		
		УпорядоченныеОценки = Новый СписокЗначений;
		Для каждого СтрокаОценки из ПредложенныеОценки Цикл 
			УпорядоченныеОценки.Добавить(СтрокаОценки.Показатель);
		КонецЦикла;
		
		УпорядоченныеОценки.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		
		Если  ТипЗнч(ПредпочтительноеЗначение) = Тип("Дата") Тогда
			МинЗначение		= ?(ЗначениеЗаполнено(УпорядоченныеОценки[0].Значение), УпорядоченныеОценки[0].Значение, Дата(1,1,1,0,0,0));
			МаксЗначение	= ?(ЗначениеЗаполнено(УпорядоченныеОценки[УпорядоченныеОценки.Количество() - 1].Значение), УпорядоченныеОценки[УпорядоченныеОценки.Количество() - 1].Значение, МинЗначение+1);
		Иначе
			МинЗначение		= ?(ЗначениеЗаполнено(УпорядоченныеОценки[0].Значение), УпорядоченныеОценки[0].Значение, 0);
			МаксЗначение	= ?(ЗначениеЗаполнено(УпорядоченныеОценки[УпорядоченныеОценки.Количество() - 1].Значение), УпорядоченныеОценки[УпорядоченныеОценки.Количество() - 1].Значение, 1);
		КонецЕсли;
		
		Если МинЗначение = Неопределено Тогда
			Если ТипРезультата = Тип("Дата") Тогда
				МинЗначение = Дата(1,1,1);
			Иначе
				МинЗначение = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если МаксЗначение = Неопределено Тогда
			Если ТипРезультата = Тип("Дата") Тогда
				МаксЗначение = Дата(1,1,1);
			Иначе
				МаксЗначение = 0;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
			
		Если  ТипЗнч(ПредпочтительноеЗначение) = Тип("Дата") Тогда
			МаксЗначение = Дата(1,1,1);
			МинЗначение = Дата(1,1,1);
		Иначе
			МаксЗначение = 0;
			МинЗначение = 0;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТипЗнч(МинЗначение) <> Тип("Число") Тогда
		МинЗначениеПриведенное = 0;
	Иначе
		МинЗначениеПриведенное = МинЗначение;
	КонецЕсли;
	
	Если ТипЗнч(МаксЗначение) <> Тип("Число") Тогда
		Если МаксЗначение = МинЗначение Тогда
			МаксЗначениеПриведенное = МинЗначениеПриведенное;
		Иначе
			МаксЗначениеПриведенное = 10;
		КонецЕсли;
	Иначе
		МаксЗначениеПриведенное = МаксЗначение;
	КонецЕсли;
	
	МинЗначениеПриведенное = ПреобразоватьЗначениеВЧисло(МинЗначение);
	МаксЗначениеПриведенное = ПреобразоватьЗначениеВЧисло(МаксЗначение);
	ПредпочтительноеЗначениеПриведенное = ПреобразоватьЗначениеВЧисло(ПредпочтительноеЗначение);
	
	МаксЗначениеДляНормирования = Макс(МинЗначениеПриведенное, МаксЗначениеПриведенное, ПредпочтительноеЗначениеПриведенное);
	МинЗначениеДляНормирования = Мин(МинЗначениеПриведенное, МаксЗначениеПриведенное, ПредпочтительноеЗначениеПриведенное);
	
	Если ТипЗнч(ПредпочтительноеЗначение) = Тип("Дата") Тогда
		ПредпочтительноеЗначениеПриведенное = НормироватьЗначение(ПредпочтительноеЗначениеПриведенное, МинЗначениеДляНормирования, МаксЗначениеДляНормирования);
	КонецЕсли;
	
	Точка = ДиаграммаДанныеПоКандидатам.УстановитьТочку("Начало");
	Точка.Текст = " ";
	Точка.Цвет = WebЦвета.Белый;
	Точка.ПриоритетЦвета = Истина;
	ДиаграммаДанныеПоКандидатам.УстановитьЗначение(Точка, СерияПредпочтение, ПредпочтительноеЗначениеПриведенное,,ПредпочтительноеЗначение);
	
	Для Каждого Оценка Из ПредложенныеОценки Цикл
		
		ОценкаПриведенная = ПреобразоватьЗначениеВЧисло(Оценка.Показатель);
		Если ТипЗнч(Оценка.Показатель) = Тип("Дата") Тогда
			ОценкаПриведенная = НормироватьЗначение(ОценкаПриведенная, МинЗначениеДляНормирования, МаксЗначениеДляНормирования);
		КонецЕсли;
		
		ПоказательДиаграмма = ОценкаПриведенная;
		
		Точка = ДиаграммаДанныеПоКандидатам.УстановитьТочку(Оценка.Кандидат);
		Точка.Расшифровка = Оценка.Кандидат;
		
		ДиаграммаДанныеПоКандидатам.УстановитьЗначение(Точка, Серия, ПоказательДиаграмма,,Оценка.Показатель);
		ДиаграммаДанныеПоКандидатам.УстановитьЗначение(Точка, СерияПредпочтение, ПредпочтительноеЗначениеПриведенное,,ПредпочтительноеЗначение);
		
	КонецЦикла;	
		
	Точка = ДиаграммаДанныеПоКандидатам.УстановитьТочку("Конец");
	Точка.Текст = " ";
	Точка.Цвет = WebЦвета.Белый;
	Точка.ПриоритетЦвета = Истина;
	ДиаграммаДанныеПоКандидатам.УстановитьЗначение(Точка, СерияПредпочтение, ПредпочтительноеЗначениеПриведенное,,ПредпочтительноеЗначение);

КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьЗначениеВЧисло(Знач Значение)
	
	ЗначениеПриведенное = 0;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		ЗначениеПриведенное = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		КоличествоДней = (Значение - Дата(1,1,1))/86400;
		ЗначениеПриведенное = КоличествоДней;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		ЗначениеПриведенное = 1;
	КонецЕсли;

	Возврат ЗначениеПриведенное;
	
КонецФункции

&НаКлиенте
Функция НормироватьЗначение(Знач Значение, Минимум, Максимум)
	
	Если Минимум = Максимум Тогда
		НормированноеЗначение = Максимум;
	Иначе
		НормированноеЗначение = (Значение - Минимум) * 9 / (Максимум - Минимум) + 1;
	КонецЕсли;
	
	Возврат НормированноеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ПостроитьДиаграммуФактДанныеПоКандидатам()

	ФактДанныеПоКандидатам.Очистить(); 
	
	ТекущиеДанныеКритериев = Элементы.КритерииВыбораПодрядчиков1.ТекущиеДанные;
	
	Если ТекущиеДанныеКритериев <> Неопределено Тогда
	
		ТекущийКритерий = ТекущиеДанныеКритериев.Критерий;
	
	КонецЕсли;
	
	МассивОценок = ОценкиФакт.НайтиСтроки(Новый Структура ("КритерийВыбораПодрядчика", ТекущийКритерий));
	
	СписокКандидатов = Новый СписокЗначений;
	
	Для каждого Строка Из МассивОценок Цикл
	
		Кандидат = Строка.Контрагент;
		
		Если СписокКандидатов.НайтиПоЗначению(Кандидат) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Серия = ФактДанныеПоКандидатам.Серии.Добавить(Строка.Критерий);
		Серия.Текст = "" + Строка.Критерий + " ("+Строка.ВидОценки +")";

		
		ОценкиПоКонтрагенту = ОценкиФакт.НайтиСтроки(Новый Структура ("КритерийВыбораПодрядчика, Контрагент, Критерий", ТекущийКритерий, Кандидат, Строка.Критерий));
		
		Для каждого ПодСтрока Из ОценкиПоКонтрагенту Цикл
		
			Точка = ФактДанныеПоКандидатам.УстановитьТочку(ПодСтрока.Контрагент);
			Точка.Расшифровка = ПодСтрока.Контрагент;
			
			ФактДанныеПоКандидатам.УстановитьЗначение(Точка, Серия, ПодСтрока.Значение, ПодСтрока.Контрагент, ПодСтрока.Контрагент);

		
		КонецЦикла; 
		
	КонецЦикла; 	
	

КонецПроцедуры

&НаКлиенте
Процедура ПостроитьОбщуюДиаграмму()

	ДиаграммаОбщая.Очистить();
	
	СписокКандидатов = Новый СписокЗначений;
	
	Для каждого Строка Из ОценкиОбщие Цикл
		
		Кандидат = Строка.Контрагент;
		
		Если СписокКандидатов.НайтиПоЗначению(Строка.Контрагент) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		
		
		Серия = ДиаграммаОбщая.Серии.Добавить(Строка.Критерий);
		Серия.Текст = Строка.Критерий;
		
		ОценкиПодрядчиков = ОценкиОбщие.НайтиСтроки(Новый Структура ("Контрагент", Кандидат));
		
		Для каждого ПодСтрока Из ОценкиПодрядчиков Цикл
			
			Точка = ДиаграммаОбщая.УстановитьТочку(Кандидат);
			Точка.Расшифровка = Кандидат;
			
			ДиаграммаОбщая.УстановитьЗначение(Точка, Серия, ПодСтрока.Значение,ПодСтрока.Контрагент, ПодСтрока.Контрагент);
			
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПланРемонтныхРаботОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
        
        Объект.Операции.Очистить();
        Объект.ПланРемонтныхРабот = ПредопределенноеЗначение("Документ.торо_ПланГрафикРемонта.ПустаяСсылка");
		СуммаРемонтов = "";
        Модифицированность = Истина;

    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикПриИзменении(Элемент)
	Если ЭтаФорма.Объект.Подрядчик.Пустая() Тогда
		ЭтаФорма.Объект.Договор = NULL;
	КонецЕсли;
	СтруктураОтбора = Новый Структура("Критерий, Кандидат", ПредопределенноеЗначение("ПланВидовХарактеристик.торо_КритерииВыбораПодрядчиков.ПредлагаемаяСуммаПодряда"), Объект.Подрядчик); 
	НайденныеСтроки = Объект.ДанныеПоКандидатам.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из НайденныеСтроки Цикл
	     Объект.Сумма = Строка.Показатель;
	КонецЦикла;  	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	Если ЭтаФорма.Объект.Подрядчик.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Поле ""Подрядчик"" не заполнено!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Подрядчик", "Объект");
		ЭтаФорма.Объект.Договор = NULL;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	Для каждого Строка Из Кандидаты Цикл
		СписокОтбора.Добавить(Строка.Кандидат);
	КонецЦикла;
	
	Если СписокОтбора.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не заполнена закладка ""Данные по кандидатам"".'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Ссылка", СписокОтбора);
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	
	Для Каждого Строка из Кандидаты Цикл
		СписокОтбора.Добавить(Строка.Кандидат);	
	КонецЦикла;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	
	Для Каждого Строка из Кандидаты Цикл
		СписокОтбора.Добавить(Строка.Кандидат);	
	КонецЦикла;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоКандидатамКритерийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений;
	
	Для Каждого Строка из Объект.КритерииВыбораПодрядчиков Цикл
		СписокОтбора.Добавить(Строка.Критерий);	
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("Ссылка", СписокОтбора);
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("ПланВидовХарактеристик.торо_КритерииВыбораПодрядчиков.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоКандидатамКритерийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	
	Для Каждого Строка из Объект.КритерииВыбораПодрядчиков Цикл
		СписокОтбора.Добавить(Строка.Критерий);	
	КонецЦикла;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоКандидатамКритерийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	
	Для Каждого Строка из Объект.КритерииВыбораПодрядчиков Цикл
		СписокОтбора.Добавить(Строка.Критерий);	
	КонецЦикла;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтныхРаботПриИзменении(Элемент)
	Объект.Операции.Очистить();
	СуммаРемонтов = "";
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоКандидатамПриИзменении(Элемент)
	Если Объект.ДанныеПоКандидатам.Количество() = 0 Тогда
		Объект.Подрядчик = "";
		Объект.Договор = "";
		Объект.Сумма = "";
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти


