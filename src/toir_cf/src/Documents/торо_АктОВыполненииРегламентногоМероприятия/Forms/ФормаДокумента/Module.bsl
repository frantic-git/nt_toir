////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем МероприятиеУдаляется;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) <> Тип("Соответствие") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
		
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_АктОВыполненииРегламентногоМероприятия);
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_АктОВыполненииРегламентногоМероприятия;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента, Истина);
	// Согласование --
	
	ФОВводПотребленияНаОснованииПроведенного = Константы.торо_ВводПотребленияНаОснованииПроведенногоАкта.Получить();
	ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов");
	КонтролироватьВремяРаботы = Константы.торо_КонтролироватьВремяРаботыСотрудниковВАктах.Получить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОшибки = "";
		Если НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("28DD") И НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("5DD5") Тогда
			ТекстСообщения = НСтр("ru = 'Лицензия не обнаружена! Создание документа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;		
				
		ОбновитьДобавленныеКолонкиТаблиц();
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();

	Элементы.ДеревоРемонтныхРаботВыполнено.Видимость = НЕ ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов;
		
	ДоступноВнутреннеПотреблениеТоваров = ПравоДоступа("Просмотр", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	ОбновитьДокументыВнутреннегоПотребленияСервер();
	
	ФОРасширенныйРежимМТО = ПолучитьФункциональнуюОпцию("торо_РасширенныйРежимМТО");
	Элементы.ДокументыВнутреннееПотреблениеСводныйДокументВнутреннееПотребление.Видимость = Не ФОРасширенныйРежимМТО;
	
	ДокументыСостоянияПоказателиНаработки.Параметры.УстановитьЗначениеПараметра("ДокументОснование", Объект.Ссылка);
	
	УчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	Элементы.ДокументыСостоянияПоказателейНаработкиДобавитьКонтролируемыеПоказатели.Видимость = УчетКонтролируемыхПоказателей;
	ДокументыСостоянияПоказателиНаработки.Параметры.УстановитьЗначениеПараметра("УчетКонтролируемыхПоказателей", УчетКонтролируемыхПоказателей);

	УчетНаработки = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	Элементы.ДокументыСостоянияПоказателейНаработкиДобавитьНаработку.Видимость = УчетНаработки;
	ДокументыСостоянияПоказателиНаработки.Параметры.УстановитьЗначениеПараметра("УчетНаработки", УчетНаработки);
	
	УчетСостояний = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования"); 
	Элементы.ДокументыСостоянияПоказателейНаработкиДобавитьСостояниеОР.Видимость = УчетСостояний;
	ДокументыСостоянияПоказателиНаработки.Параметры.УстановитьЗначениеПараметра("УчетСостояний", УчетСостояний);
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ДокументыОснования");
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ИдентификаторСтрокиМероприятия = Элементы.Мероприятия.ТекущаяСтрока;
	Если ИдентификаторСтрокиМероприятия <> Неопределено Тогда
		ТекущаяСтрокаМероприятия = Объект.Мероприятия.НайтиПоИдентификатору(ИдентификаторСтрокиМероприятия);
		РемонтID = ?(ТекущаяСтрокаМероприятия = Неопределено, Неопределено, ТекущаяСтрокаМероприятия.ID);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, РемонтID); 
	КонецЕсли;
	
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Мероприятия.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
	КонецЕсли;
		
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

	ШаблонСообщения = НСтр("ru = 'В строке номер %1 списка мероприятий дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
	Для Каждого Строка Из Объект.Мероприятия Цикл
		Если Не ЗначениеЗаполнено(Строка.ДатаНачала) Или Не ЗначениеЗаполнено(Строка.ДатаОкончания) Тогда
		    Продолжить;
		КонецЕсли;
		
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	Строка.НомерСтроки, Строка.ДатаНачала, Строка.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", Строка.ID);
		МассивИсполнителей = Объект.ТрудовыеЗатраты.НайтиСтроки(СтруктураПоиска);
		МассивПодрядчиков = Объект.ПодрядчикиРемонтныхРабот.НайтиСтроки(СтруктураПоиска);
		
		ПроверитьДаты("ТрудовыеЗатраты", МассивИсполнителей, Строка, Отказ, КонтролироватьВремяРаботы);
		ПроверитьДаты("ПодрядчикиРемонтныхРабот", МассивПодрядчиков, Строка, Отказ, КонтролироватьВремяРаботы);
	КонецЦикла;
	
	Для Каждого ТекСтрокаИсполнитель Из Объект.ПодрядчикиРемонтныхРабот Цикл
				
		СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Контрагент",
		ТекСтрокаИсполнитель.ID,
		ТекСтрокаИсполнитель.РемонтыОборудования_ID, 
		ТекСтрокаИсполнитель.Контрагент);
		
		Если Объект.ПодрядчикиРемонтныхРабот.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружены повторяющиеся исполнители в таблице подрядчики!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ПодрядчикиРемонтныхРабот",, Отказ);
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	торо_ПроцентыВыполнения.РаспроведениеПлановыхЗатратБезАктов(Объект.Ссылка, ТекущийОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	ОбновитьДобавленныеКолонкиТаблиц();
	ПроверитьФлагиВыполненияМероприятийВОбъектах();
	
	НеЗаписанныеДокументы = ДокументыВнутреннееПотребление.НайтиСтроки(Новый Структура("Записан", Ложь));
	Если НеЗаписанныеДокументы.Количество() Тогда
		НаборЗаписей = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументТОИР.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		Для Каждого Документ Из НеЗаписанныеДокументы Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ID = Документ.ID;
			Запись.ДокументЕРП = Документ.ВнутреннееПотребление;
			Запись.ДокументТОИР = Объект.Ссылка;
			Документ.Записан = Истина;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		УправлениеФормой();
	КонецЕсли;
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВыполняемаяОперация")
		И ВыбранноеЗначение.ВыполняемаяОперация = "ВыборАналогаНоменклатурыДляРемонта" Тогда
		ЗаменитьМатериалыНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		МассивID = Новый Массив;
		ЗаполнитьМассивID(МассивID,ТекДанныеРемРаб);
		ОтметитьНаличиеАналогов(МассивID);
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
		Если ТекДанныеРемРаб = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	
		ИмяТЧ = "МатериальныеЗатраты";
		ИмяРеквизита = "Номенклатура";
		СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, ID, Количество", ТекДанныеРемРаб.РемонтыОборудования_ID, ТекДанныеРемРаб.ID, ТекДанныеРемРаб.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		ОтметитьНаличиеАналогов(ТекДанныеРемРаб.ID);
		Модифицированность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
	Если ИмяСобытия = "ЗаписанПоказательНаработкаСостояние" Тогда
		Элементы.ДокументыСостоянияПоказателиНаработки.Обновить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ЗавершитьРемонтныеРаботыПриИзменении(Элемент)
	
	Если Объект.ЗавершитьРемонтныеРаботы Тогда 
		
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Истина;
		
		УстановитьОставшиесяПроцентыРабот();
		МероприятияПриАктивизацииСтроки(Элементы.Мероприятия);
		
		Для каждого Стр Из Объект.Мероприятия Цикл
			Стр.ЗавершитьРемонт = Истина;	
		КонецЦикла; 
		
		ОбновитьДобавленныеКолонкиТаблиц();
		
	Иначе
		
		Если Объект.Мероприятия.Количество() <> 0 Тогда
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				Стр.Выполнено = Ложь;
				ПроставитьГалкиВВетке(Стр, Ложь, 0);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Стр Из Объект.РемонтныеРаботы Цикл
			Стр.Выполнено = Ложь;
		КонецЦикла;
		
		Для каждого Стр Из Объект.Мероприятия Цикл
			Стр.ЗавершитьРемонт = Ложь;
		КонецЦикла; 
	КонецЕсли;
	
	Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Объект.ЗавершитьРемонтныеРаботы;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты 

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "МатериальныеЗатратыЕстьАналоги" Тогда
		ПодобратьАналогиНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		//
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;

	Если НЕ ОтменаРедактирования Тогда
		ТекСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		ОтметитьНаличиеАналогов(ТекСтрока.ID);
	КонецЕсли;

	Если НЕ НоваяСтрока ИЛИ (НоваяСтрока И Не ОтменаРедактирования) Тогда
		ТекСтрокаНоменклатура = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры",
		ТекСтрокаНоменклатура.ID,
		ТекСтрокаНоменклатура.РемонтыОборудования_ID, 
		ТекСтрокаНоменклатура.Номенклатура,
		ТекСтрокаНоменклатура.ХарактеристикаНоменклатуры);
		
		Если Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
			Если ЗначениеЗаполнено(СтруктураПоиска.ХарактеристикаНоменклатуры) Тогда
					ШаблонСообщения = НСтр("ru = 'Для технологической операции номенклатура %1 с характеристикой %2 уже добавлена!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураПоиска.Номенклатура, СтруктураПоиска.ХарактеристикаНоменклатуры);
				Иначе
					ШаблонСообщения = НСтр("ru = 'Для технологической операции номенклатура %1 уже добавлена!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураПоиска.Номенклатура);
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодрядчикиРемонтныхРабот

&НаКлиенте
Процедура ПодрядчикиРемонтныхРаботПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для ремонтов!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикиРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаРемонта = Элементы.Мероприятия.ТекущиеДанные;
			ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
			ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда 
		
		Если НоваяСтрока Тогда
			ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
			Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
			Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		КонецЕсли;
		
		ТЧ = Объект.Мероприятия;
		ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.Мероприятия.ТекущиеДанные.ID);
		торо_ЗаполнениеДокументов.ВыполнитьАвтоподставлениеСотрудникаИКвалификации(Элемент.ТекущиеДанные.Сотрудник, Элемент.ТекущиеДанные.Квалификация, ДатаНачалаРемонта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяРаботы,Элемент,Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);
		ТекущиеДанные.ВремяРаботы      = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьИсполнителей(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыДатаНачалаПриИзменении(Элемент)
	ПриИзмененииДатыТрудозатрат();
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыДатаОкончанияПриИзменении(Элемент)
	ПриИзмененииДатыТрудозатрат();
КонецПроцедуры
	
&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТЧ = Объект.Мероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ТрудовыеЗатраты.ТекущиеДанные.РемонтыОборудования_ID);
	Квалификация = Элементы.ТрудовыеЗатраты.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ = Объект.Мероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);	
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораСотрудниковСКвалификацией(Элемент, ДанныеВыбора, Элементы.ТрудовыеЗатраты.ТекущиеДанные.Квалификация, ДатаНачалаРемонта, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыКвалификацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТЧ = Объект.Мероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораКвалификацийСотрудника(Элементы.ТрудовыеЗатраты.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыКвалификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ = Объект.Мероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораКвалификацийСотрудника(Элемент, ЭтотОбъект, Элементы.ТрудовыеЗатраты.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТЧ = Объект.Мероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	Квалификация = Элементы.ТрудовыеЗатраты.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыКвалификацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТЧ = Объект.Мероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораКвалификацийСотрудника(Элементы.ТрудовыеЗатраты.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникПриИзменении(Элемент)
	ТекДанныеРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	МассивID = Новый Массив;
	ЗаполнитьМассивID(МассивID,ТекДанныеРабот);
	ОтметитьНаличиеАналогов(МассивID);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.КТУ = 1;
			СтрокаРемонта = Элементы.Мероприятия.ТекущиеДанные;
			ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
			ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
			РассчитатьВремя(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот 

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроцентВыполненияРаботПриИзменении(Элемент)
	
	ПерерасчитатьПроцентыВыполненияРабот();
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПоискПоДереву(СтруктураСтроки)
	
	Для каждого СтрокаДерева из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> СтрокаДерева[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева)
	
	Для каждого Подстрока из СтрокаДерева.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> Подстрока[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат Подстрока;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, Подстрока); 
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		СтандартнаяОбработка = Ложь;
	    торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьКолонкиПараллельногоВыполненияТО(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы, ID_ПараллельнойОперации, ВыбранноеЗначение.СоответствиеРезультата);
		Модифицированность = Истина;
		
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.Мероприятия.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
		ДатаОкончанияРемонта   = ТекРемонт.ДатаОкончания;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;
		ДатаОкончанияРемонта   = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта, ДатаОкончанияРемонта"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, СтрокаРодитель.Родитель_ID
	, ДатаНачалаРемонта
	, ДатаОкончанияРемонта);
	
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	МероприятияПриАктивизацииСтроки(Элементы.Мероприятия);
	ВыделитьСтрокуДереваРемонтныхРабот(ИДВыбраннойСтроки);
	
	Модифицированность = Истина;
	
	ПроверитьДоступностьКнопокМатЗатратИИсполнителей();
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	                            			
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("МатериальныеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("ТрудовыеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("ПодрядчикиРемонтныхРабот");
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");
 		
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
			
			ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("РемонтыОборудования_ID", Элементы.Мероприятия.ТекущиеДанные.ID);
		
			СтрокиКУдалению = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				
				ТабличнаяЧасть.Удалить(Строка);
				
			КонецЦикла;		    
						
		КонецЦикла;

		Модифицированность = Истина;
		
		Отказ = Истина;

	Иначе

		ВыделенныеСтроки = Элементы.ДеревоРемонтныхРабот.ВыделенныеСтроки;
		МассивСтрокДляУдаления = Новый Массив;
		
		Для каждого Стр Из ВыделенныеСтроки Цикл 
			Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Стр);
			Если Строка <> Неопределено И Строка.РемонтнаяРабота <> "Ремонтные работы" Тогда 
				МассивСтрокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого Элемент Из МассивСтрокДляУдаления Цикл
			СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
			Элемент.ID, Элемент.РемонтыОборудования_ID, Элемент.Родитель_ID, Элемент.РемонтнаяРабота);
			УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи, СтруктураСвязанныхТЧ);
			
			СтрокаРодителя = Элемент.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда 
				СтрокаРодителя.ПолучитьЭлементы().Удалить(Элемент); 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
				торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации, СтрокаРодителя);
			КонецЕсли;
		КонецЦикла;
		
		
		Модифицированность = Истина;
		Отказ = Истина;

	КонецЕсли; 
	
	торо_ДанныеФормыДеревоКлиентСервер.ОбновитьПроцентыВыполненияВДеревеРемонтныхРабот(ДеревоРемонтныхРабот); 
	
	РазвернутьДеревоРемонтныхРабот(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	ПроверитьДоступностьКнопокМатЗатратИИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботВыполненоПриИзменении(Элемент)
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекСтрокаДерева.ПроцентВыполненияРабот = ?(ТекСтрокаДерева.Выполнено, 100, 0);
	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	
	Если НЕ ТекСтрокаДерева = Неопределено Тогда 
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураСтроки);
		Если МассивСтрок.Количество() Тогда
			МассивСтрок[0].Выполнено = ТекСтрокаДерева.Выполнено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	
	Если ТекСтрокаДерева.Выполнено Тогда
		
		Сумма = 0;
		КоличествоСтрок = 0;
		
        Если КоличествоСтрок = 0 Тогда
			Если Объект.Мероприятия.Количество() <= 1 Тогда
				Объект.ЗавершитьРемонтныеРаботы = Истина;
				Элементы.МероприятияЗавершитьРемонт.Видимость = Ложь;
				Элементы.МероприятияЗавершитьРемонт.Доступность = Ложь;	
			Иначе
				МасСтр = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", Элементы.Мероприятия.ТекущиеДанные.ID));
				Если МасСтр.Количество() > 0 Тогда
					МасСтр[0].ЗавершитьРемонт = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Рез = Сумма / КоличествоСтрок;
			Если Рез <> 100 Тогда
				
				Для каждого Стр Из Объект.Мероприятия Цикл
					флВсеРемонтныеРаботыЗавершены = Истина;
					МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Стр.ID));
					Для каждого Элем Из МассивСтрок Цикл
						Если Элем.ПроцентВыполненияРабот <> 100 Тогда 
							флВсеРемонтныеРаботыЗавершены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если флВсеРемонтныеРаботыЗавершены Тогда
						Стр.ЗавершитьРемонт = Истина;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Объект.ЗавершитьРемонтныеРаботы = Истина;
				Для каждого Стр Из Объект.Мероприятия Цикл
					Стр.ЗавершитьРемонт = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.ЗавершитьРемонтныеРаботы = Ложь;
		Если НЕ Элементы.Мероприятия.ТекущиеДанные = Неопределено Тогда
			МасСтр = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", Элементы.Мероприятия.ТекущиеДанные.ID));
			Если МасСтр.Количество() > 0 Тогда
				МасСтр[0].ЗавершитьРемонт = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
		УстановитьОтборСтрокПоЗатратам();
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ID) 
		И Объект.РемонтныеРаботы.Количество() > 1 Тогда  
		
		торо_ДанныеФормыДеревоКлиентСервер.УпорядочитьРемонтныеРаботы(ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущееМероприятие = Элементы.Мероприятия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите расположение ремонта!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТекущееМероприятие = Неопределено Тогда  
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт оборудования для добавления технологической операции!'"), 10);
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество <= 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
		КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
		Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
		СтрТЧ.Количество = ТекСтрока.Количество;
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПослеУдаления(Элемент)
	
	Для каждого СтрокаМатЗатрат Из Объект.МатериальныеЗатраты Цикл
		
		Если ЗначениеЗаполнено(СтрокаМатЗатрат.ХарактеристикаНоменклатуры) Тогда
			СтрокаМатЗатрат.ХарактеристикиИспользуются = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	ПроверитьДоступностьКнопокМатЗатратИИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0] 
		Или Элемент.ТекущиеДанные.ЭтоТехКарта Тогда
		Выполнение = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(Строка) Тогда
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Если ТекущаяСтрока.ЭтоТехкарта Тогда
			ПараметрыПеретаскивания.Действие 		   =  ДействиеПеретаскивания.Перемещение; 
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Строка = Неопределено Тогда
		
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Для каждого ЭлементКоллекции Из ПараметрыПеретаскивания.Значение Цикл
			ПеретаскиваемаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ЭлементКоллекции);
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ПеретаскиваемаяСтрока.ID));
			Если МассивСтрок.Количество() Тогда
				МассивСтрок[0].Родитель_ID = ТекущаяСтрока.ID;
				
				// Если случайно перетащили в ту же ТК, то параллельность убирать не нужно.
				Если Не ПеретаскиваемаяСтрока.Родитель_ID = ТекущаяСтрока.ID И ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
					МассивСтрок[0].ID_ПараллельнойОперации = "";
					торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.РемонтыОборудования_ID);
		ВыделитьСтрокуДереваРемонтныхРабот(ТекущаяСтрока.ID);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Истина;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Истина;
		Элементы.ДеревоРемонтныхРаботВыполнено.ТолькоПросмотр = Истина;
		
		ТекущаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекущаяСтрока.РемонтнаяРабота = ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка");
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Ложь;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Ложь;
		Элементы.ДеревоРемонтныхРаботВыполнено.ТолькоПросмотр = Ложь;
		
		НеЗаполненаРемонтнаяРабота = ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.РемонтнаяРабота);
		
		Если Не ОтменаРедактирования И НеЗаполненаРемонтнаяРабота Тогда
			
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
			
			Если РодительСтроки = Неопределено Тогда
				КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Иначе
				КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
			КонецЕсли;
			
			КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
		И Не ТекущиеДанные.РемонтнаяРабота.Пустая() Тогда
		
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
				
		ТекущееМероприятие = Элементы.Мероприятия.ТекущиеДанные;
		
		Если РодительСтроки = Неопределено Тогда
			КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ТекущийРемонт_ID", ?(ТекущееМероприятие = Неопределено, "", ТекущееМероприятие.ID)); 
		ДанныеСтроки.Вставить("СтрокаРодитель_ID", РодительСтроки.ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРемонтыОборудования_ID", РодительСтроки.РемонтыОборудования_ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРодитель_ID", РодительСтроки.Родитель_ID);  
					
		ДеревоРемонтныхРаботОбработкаВыбораСервер(ТекущиеДанные.РемонтнаяРабота, ДанныеСтроки);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьПроцентыВыполненияВДеревеРемонтныхРабот(ДеревоРемонтныхРабот);
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
				
		РодительСтроки = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоРемонтныхРабот.ПолучитьЭлементы(), "ID", РодительСтроки.ID);
		КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		ИндексПоследнегоЭлементаРодителя = КоллекцияЭлементовРодителя.Количество() - 1;
		
		ДобавленныйЭлемент = КоллекцияЭлементовРодителя.Получить(ИндексПоследнегоЭлементаРодителя);
		
		Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ДобавленныйЭлемент.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятия

&НаКлиенте
Процедура МероприятияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда 	
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
		
		Если ТекущиеДанные.ЗавершитьРемонт Тогда
			Строки = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Строки[0].Выполнено = Истина;
		КонецЕсли;	
		
		Элементы.МероприятияОбъектов.ОтборСтрок            = Новый ФиксированнаяСтруктура("Мероприятие_ID", Элементы.Мероприятия.ТекущиеДанные.ID);
		Элементы.ДокументыВнутреннееПотребление.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", Элементы.Мероприятия.ТекущиеДанные.ID);
		
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = ТекущиеДанные.ЗавершитьРемонт;
		Если Элементы.ПанельРемонтов.ТекущаяСтраница.Имя = "СтраницаСписокОбъектов" Тогда 
			УстановитьОтборСтрокПоЗатратам();
		КонецЕсли;
		ПроверитьДоступностьКнопокМатЗатратИИсполнителей();
	Иначе
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, Неопределено);
		Элементы.МероприятияОбъектов.ОтборСтрок = Новый ФиксированнаяСтруктура("Мероприятие_ID", " ");
	КонецЕсли;
	
	ДеревоРемонтныхРаботПриАктивизацииСтроки(Элементы.ДеревоРемонтныхРабот);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПередУдалением(Элемент, Отказ)
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Если НЕ МероприятиеУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("МероприятияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Строки = Элемент.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого идСтрока из Строки Цикл
			
			текСтрока = Объект.Мероприятия.НайтиПоИдентификатору(идСтрока);
			
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			МероприятиеУдаляется = Истина;
			
			Объект.Мероприятия.Удалить(текСтрока);
			
			МероприятиеУдаляется = Ложь;
		КонецЦикла;
		
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияЗавершитьРемонтПриИзменении(Элемент)
	ТекДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если ТекДанные.ЗавершитьРемонт Тогда
			
			Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Истина;
			УстановитьОставшиесяПроцентыРабот(ТекДанные.ID); 
			МероприятияПриАктивизацииСтроки(Элементы.Мероприятия);
			
			ФлВсеРемонтыЗавершены = Истина;
			
			Для каждого Стр Из Объект.Мероприятия Цикл
				Если НЕ Стр.ЗавершитьРемонт Тогда
					ФлВсеРемонтыЗавершены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ФлВсеРемонтыЗавершены Тогда 
				Объект.ЗавершитьРемонтныеРаботы = Истина;
			КонецЕсли;
			
			ОбновитьДобавленныеКолонкиТаблиц();
			
		Иначе
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				Стр.Выполнено = Ложь;
				ПроставитьГалкиВВетке(Стр, Ложь, 0);
			КонецЦикла; 
			
			Объект.ЗавершитьРемонтныеРаботы = Ложь;
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
			
			Для каждого Стр Из МассивСтрок Цикл
				Стр.Выполнено = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = ТекДанные.ЗавершитьРемонт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МероприятияДатаНачалаПриИзменении(Элемент)
	ТекРемонтID = Элементы.Мероприятия.ТекущиеДанные.ID;
	МассивID = ПолучитьIDОперацийПоIDРемонта(Объект, ТекРемонтID);
	ОтметитьНаличиеАналогов(МассивID);
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборРемонтов") И ВыбранноеЗначение.ПодборРемонтов = Истина 
		И НЕ ВыбранноеЗначение.ЭтоРемонтнаяРабота Тогда
		// Подбор ремонтов (ремонтные работы в другой ветке).
		
		Если ВыбранноеЗначение.МассивИДРемонтов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РемонтУжеДобавлен = Ложь;
		МассивИДДобавленныхРемонтов = Новый Массив;

		Для каждого ИдРемонта из ВыбранноеЗначение.МассивИДРемонтов Цикл
			НайденныеРемонты = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", ИдРемонта));
			Если НайденныеРемонты.Количество() > 0 Тогда
				РемонтУжеДобавлен = Истина;
				МассивИДДобавленныхРемонтов.Добавить(ИдРемонта);
			КонецЕсли;
		КонецЦикла;
		
		Если РемонтУжеДобавлен Тогда
			Если ВыбранноеЗначение.МассивИДРемонтов.Количество() > 1 Тогда
				Вопрос = НСтр("ru = 'Некоторые из выбранных мероприятий уже добавлены. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			Иначе
				Вопрос = НСтр("ru = 'Это мероприятие уже добавлено. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			КонецЕсли;

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			СтруктураПараметров.Вставить("МассивИДДобавленныхРемонтов", МассивИДДобавленныхРемонтов);
			ОписаниеОповещения = Новый ОписаниеОповещения("РемонтыОборудованияОбработкаВыбораПослеВопроса", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(ОписаниеОповещения, Вопрос, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораЗавершение(ВыбранноеЗначение);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЭтоРемонтнаяРабота") И ВыбранноеЗначение.ЭтоРемонтнаяРабота = Истина Тогда 
		// Подбор ремонтных работ
		
		ОбработкаВыбораЗавершение(ВыбранноеЗначение);

	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятияОбъектов 

&НаКлиенте
Процедура МероприятияОбъектовОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОбъектовОбъектРемонтаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОбъектовВыполненоПриИзменении(Элемент)
	ПриИзмененииСпискаОбъектов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыВнутреннееПотребление

&НаКлиенте
Процедура ДокументыВнутреннееПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ВнутреннееПотребление);
		ОписаниеОповещения  = Новый ОписаниеОповещения("ОбновитьДокументыВнутреннегоПотребления",ЭтаФорма);
		ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВнутреннееПотреблениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭлементТекДанные  = Элемент.ТекущиеДанные;
		Если Не ЭлементТекДанные = Неопределено Тогда
			ЭлементТекДанные.РемонтыОборудования_ID = ТекущиеДанные.ID;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
				Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
					Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
					СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)   	
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийДокументОснование = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	
	Если ТекущийДокументОснование = Неопределено Тогда
		СписокВыбора = торо_ЗаполнениеДокументов.СформироватьСписокВыбораТипаДокументаОснования(Объект.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент", Элемент));
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбор типа данных'"));
	Иначе
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ТипЗнч(ТекущийДокументОснование), ТекущийДокументОснование, Элемент, ЭтаФорма.КлючУникальности);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ДополнительныеПараметры.Элемент;
	торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ВыбранныйЭлемент.Значение, Неопределено, Элемент, ЭтаФорма.КлючУникальности);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыСостоянияПоказателиНаработки

&НаКлиенте
Процедура ДокументыСостоянияПоказателиНаработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыОткрытия = Новый Структура("Ключ", ВыбраннаяСтрока);
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.торо_СостоянияОбъектовРемонта") Тогда
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.Форма.ФормаДокумента", ПараметрыОткрытия);
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.торо_УчетКонтролируемыхПоказателей") Тогда
		ОткрытьФорму("Документ.торо_УчетКонтролируемыхПоказателей.Форма.ФормаДокумента", ПараметрыОткрытия);
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.торо_УчетНаработкиОборудования") Тогда 
		ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаДокумента", ПараметрыОткрытия);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("Склад", ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад"));
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт <> Неопределено И ЗначениеЗаполнено(ТекущийРемонт.ДатаНачала) Тогда 
		ДатаОтбора = ТекущийРемонт.ДатаНачала;
	Иначе
		ДатаОтбора = ТекущаяДата();
	КонецЕсли;

	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", 
		Новый Структура("МножественныйВыбор, ДатаОтбора, Отбор", 
		Истина, ДатаОтбора, Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"))), 
		Элементы.ДеревоРемонтныхРабот);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ДокументыОснования = Новый СписокЗначений;
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ДокументыОснования.Добавить(СтрокаДО.ДокументОснование);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ДокументыОснования", ДокументыОснования);
	
	ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот", 
		ПараметрыФормы, Элементы.Мероприятия, Объект.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнутреннееПотребление(Команда)
	
	Если Объект.Мероприятия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьВнутреннееПотреблениеВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования внутреннего потребления необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		ДобавитьВнутреннееПотреблениеПослеВопроса();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнутреннееПотреблениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
   Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьВнутреннееПотреблениеПослеВопроса();	 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнутреннееПотреблениеПослеВопроса() 
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКСписаниюНаСервере(ТекущийРемонт.ID);
		
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			
			// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.			
			МассивСтрокНоменклатуры = Новый Массив;
			
		КонецЕсли;	
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);
		ЗначенияЗаполнения.Вставить("Комментарий" , Строка(Объект.Ссылка) + " " + ТекущийРемонт.ОбъектРемонта + " " + 
																	ТекущийРемонт.ВидРемонтныхРабот + " " + ТекущийРемонт.ДатаНачала + " - " + 
																	ТекущийРемонт.ДатаОкончания);
		
		СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		МассивID = Новый Массив;
		МассивID.Добавить(ТекущийРемонт.ID);
		СтруктураПараметров.Вставить("ID", МассивID);

		СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
		СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID", ТекущийРемонт.ID);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов", ЭтаФорма,СтруктураПередаваемыхВОбработчикПараметров);
		ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументВнутреннееПотребление(Команда)
	
	ТекущиеДанные = Элементы.ДокументыВнутреннееПотребление.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПотреблениеСсылка",ТекущиеДанные.ВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"               ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,НСтр("ru = 'Удаление связи с заказом на внутреннее потребление'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоказателиНаработкуСостояния(Команда)
	ТекущиеДанные = Элементы.ДокументыСостоянияПоказателиНаработки.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
		СтруктураПараметров = Новый Структура("Документ", ТекущиеДанные.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьПоказателиНаработкуСостоянияЗавершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.ТрудовыеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеРемонты(Команда)
	
	Если Объект.ТрудовыеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.ТрудовыеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ТрудовыеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьИсполнителейПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "ТрудовыеЗатраты");
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.МатериальныеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ВсеРемонты(Команда)
	
	Если Объект.МатериальныеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.МатериальныеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.МатериальныеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьМатериалыПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта, ЗаполнитьАналоги = Истина)
	
	торо_Ремонты.ЗаполнитьМатериалыПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "МатериальныеЗатраты");
	
	Если ЗаполнитьАналоги Тогда
		Если ИДТекущегоРемонта <> Неопределено Тогда
			Ремонт = Объект.Мероприятия.НайтиПоИдентификатору(ИДТекущегоРемонта);
			МассивIDОпераций = ПолучитьIDОперацийПоIDРемонта(Объект, Ремонт.ID);
		Иначе
			МассивIDОпераций = ПолучитьIDОперацийПоIDРемонта(Объект);
		КонецЕсли;
		ОтметитьНаличиеАналогов(МассивIDОпераций);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьIDОперацийПоIDРемонта(Объект, IDРемонта = Неопределено)
	
	МассивID = Новый Массив;
	Если IDРемонта = Неопределено Тогда
		Для Каждого Строка Из Объект.РемонтныеРаботы Цикл
			МассивID.Добавить(Строка.ID);
		КонецЦикла;
	Иначе
		МассивСтрокПоОтбору = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", IDРемонта));
		Для Каждого Строка Из МассивСтрокПоОтбору Цикл
			МассивID.Добавить(Строка.ID);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивID;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаленияПодрядчики = Новый Массив;
	Для каждого Строка из Объект.ПодрядчикиРемонтныхРабот Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияПодрядчики.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокДляУдаленияИсполнители = Новый Массив;
	Для каждого Строка из Объект.ТрудовыеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияИсполнители.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;

	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаленияПодрядчики = Объект.ПодрядчикиРемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	МассивСтрокДляУдаленияИсполнители = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.ПодрядчикиРемонтныхРабот.Количество() > 0 
		ИЛИ Объект.ТрудовыеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", Объект.ПодрядчикиРемонтныхРабот);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики Цикл
				Объект.ПодрядчикиРемонтныхРабот.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ПодрядчикиРемонтныхРабот.Очистить();
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители Цикл
				Объект.ТрудовыеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ТрудовыеЗатраты.Очистить();
		КонецЕсли;
		
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если Не ЗначениеЗаполнено(Строка.ВремяРаботы) Тогда
			Строка.ВремяРаботы = Строка.ДатаОкончания - Строка.ДатаНачала;
		КонецЕсли;
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляДокумента(Команда)
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.ТрудовыеЗатраты);
	стрПараметров.Вставить("ВидПодбора", "ПоДокументу");
	стрПараметров.Вставить("ID", Неопределено);
	стрПараметров.Вставить("РемонтыОборудования_ID", Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.ТрудовыеЗатраты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляОперации(Команда)
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.Мероприятия.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов = Неопределено тогда
		ID_Отбора = Неопределено;
	Иначе
		МасИД = Новый Массив;
		ID_Отбора = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасИД, ТекСтрокаДереваРемонтов.ПолучитьЭлементы());
		ID_Отбора.Добавить(ТекСтрокаДереваРемонтов.ID);
		
		Для каждого текСтрока из МасИД цикл
			ID_Отбора.Добавить(текСтрока.ID);
		КонецЦикла;
	КонецЕсли;
	
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.ТрудовыеЗатраты);
	стрПараметров.Вставить("ВидПодбора", "ПоОперации");
	стрПараметров.Вставить("ID", ID_Отбора);
	стрПараметров.Вставить("РемонтыОборудования_ID", ID_ОтбораРемонтов);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.ТрудовыеЗатраты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из Объект.МероприятияОбъектов Цикл
		Если СтрокаТаблицы.Мероприятие_ID = Элементы.Мероприятия.ТекущиеДанные.ID Тогда 
			СтрокаТаблицы.Выполнено = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	ПриИзмененииСпискаОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из Объект.МероприятияОбъектов Цикл
		Если СтрокаТаблицы.Мероприятие_ID = Элементы.Мероприятия.ТекущиеДанные.ID Тогда 
			СтрокаТаблицы.Выполнено = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	ПриИзмененииСпискаОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура СводныйДокументВнутреннееПотребление(Команда)
	
	Если Объект.Мероприятия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СводныйДокументВнутреннееПотреблениеВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования сводного документа внутреннего потребления необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		СводныйДокументВнутреннееПотреблениеПослеВопроса();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйДокументВнутреннееПотреблениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт  
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		СводныйДокументВнутреннееПотреблениеПослеВопроса();	 
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СводныйДокументВнутреннееПотреблениеПослеВопроса()
		
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	
	МассивСтрокНоменклатуры = Новый Массив;	
	МассивID = Новый Массив;
	
	СтрокаКомментария = "";

	Для каждого ТекущееМероприятие Из Объект.Мероприятия Цикл 
		
		СтрокаКомментария = СтрокаКомментария + " " + Строка(Объект.Ссылка) + " " + ТекущееМероприятие.ОбъектРемонта + " " + 
		ТекущееМероприятие.ВидРемонтныхРабот + " " + ТекущееМероприятие.ДатаНачала + " - " + 
		ТекущееМероприятие.ДатаОкончания;
		
		МассивID.Добавить(ТекущееМероприятие.ID);
		
	КонецЦикла;
	
	МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКСписаниюНаСервере(МассивID);
	Если МассивСтрокНоменклатуры = Неопределено Тогда
		
		// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.			
		МассивСтрокНоменклатуры = Новый Массив;
	КонецЕсли;
		
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("МассивID", МассивID);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация"             , Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение"           , Объект.Подразделение);
	ЗначенияЗаполнения.Вставить("Ответственный"           , Объект.Ответственный);
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры" , МассивСтрокНоменклатуры);
	ЗначенияЗаполнения.Вставить("Комментарий"             , СтрокаКомментария);
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("ID", МассивID);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный", ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВремяРаботыПоНормативам(Команда)
	ЗаполнитьВремяРаботыПоНормативамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВремяРаботыПоДлительностиСУчетомГрафика(Команда)
	ЗаполнитьВремяРаботыПоДлительностиСУчетомГрафикаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудника(Команда)
	ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификации(Команда)
	ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиПоРасценкеТехОперации(Команда)
	ЗаполнитьСтоимостиПоРасценкеТехОперацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей1(Команда)
		
	ПараметрыОткрытия = Новый Структура("Ссылка, МассивИсполнителей", Объект.Ссылка, ПолучитьМассивСтруктурИсполнителей());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаАвтоматическогоЗаполненияИсполнителей", ЭтаФорма);
	ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаАвтозаполненияИсполнителей",ПараметрыОткрытия, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтролируемыеПоказатели(Команда)
	
	ЕстьВозможностьВвода = ПроверитьВозможностьВвода("торо_УчетКонтролируемыхПоказателей");
	
	Если ЕстьВозможностьВвода Тогда
		ОткрытьФорму("Документ.торо_УчетКонтролируемыхПоказателей.Форма.ФормаДокумента", 
		Новый Структура("Основание", Объект.Ссылка));
	Иначе
		ТекстСообщения = НСтр("ru = 'Настройки ввода на основании запрещают ввести документ ""Учет контролируемых показателей"" на основании выбранного документа.
		|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаработку(Команда)
	
	ЕстьВозможностьВвода = ПроверитьВозможностьВвода("торо_УчетНаработкиОборудования");
	
	Если ЕстьВозможностьВвода Тогда
		ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаДокумента", 
		Новый Структура("Основание", Объект.Ссылка));
	Иначе
		ТекстСообщения = НСтр("ru = 'Настройки ввода на основании запрещают ввести документ ""Учет наработки оборудования"" на основании выбранного документа.
		|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСостояниеОР(Команда)
	
	ЕстьВозможностьВвода = ПроверитьВозможностьВвода("торо_СостоянияОбъектовРемонта");
	
	Если ЕстьВозможностьВвода Тогда
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.Форма.ФормаДокумента", 
		Новый Структура("Основание", Объект.Ссылка));
	Иначе
		ТекстСообщения = НСтр("ru = 'Настройки ввода на основании запрещают ввести документ ""Состояния объектов ремонта"" на основании выбранного документа.
		|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// ТолькоПросмотр корня дерева ремонтных работ 
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.РемонтнаяРабота");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Ремонтные работы";

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	// ТолькоПросмотр для Новой операции 
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботНоваяОперация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.ТехОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.торо_ТехнологическиеОперации.ПустаяСсылка();

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Согласование++
	торо_РаботаССогласованиями.ДобавитьУсловноеОформлениеДляДереваСогласования(ЭтаФорма);
	// Согласование--
	
	торо_ТехнологическиеКарты.ДобавитьУсловноеОформлениеДляПараллельныхТОТК(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивНоменклатурыКСписаниюНаСервере(ID)
	
	УжеСписаннаяНоменклатура = ПолучитьТаблицуСписаннойНоменклатурыНоменклатуры(ID);
	
	Если ТипЗнч(ID) = Тип("Массив") Тогда 
		НоменклатураКЗаказу = Объект.МатериальныеЗатраты.Выгрузить();	
	Иначе 
		НоменклатураКЗаказу = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	КонецЕсли; 
	
	НоменклатураКЗаказу.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ХарактеристикиИспользуются", "КоличествоЕдиниц");
	
	Товары = Новый Массив;
	Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	Работа = Перечисления.ТипыНоменклатуры.Работа;
	
	Для каждого Строка Из НоменклатураКЗаказу Цикл
		
		Если Строка.Номенклатура.ТипНоменклатуры = Услуга
			ИЛИ Строка.Номенклатура.ТипНоменклатуры = Работа Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеСписаннаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеСписаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
			
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеСписаннаяНоменклатура.Количество() = 0
			ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Количество",
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			Строка.ХарактеристикиИспользуются,
			(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры));
			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуСписаннойНоменклатурыНоменклатуры(ID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Таблица.ВнутреннееПотребление КАК Документ
	               |ПОМЕСТИТЬ Потребление
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |ГДЕ
	               |	Таблица.ID В (&ID)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладах.Характеристика КАК Характеристика,
	               |	СУММА(ТоварыНаСкладах.ВНаличии) КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	               |ГДЕ
	               |	ТоварыНаСкладах.Регистратор В
	               |			(ВЫБРАТЬ
	               |				Потребление.Документ КАК Документ
	               |			ИЗ
	               |				Потребление КАК Потребление)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладах.Характеристика,
	               |	ТоварыНаСкладах.Номенклатура";
	
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("Таблица", ДокументыВнутреннееПотребление.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
		               |ИЗ
		               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		               |ГДЕ
		               |	торо_ИнтеграцияДокументов.ID = &ID
		               |	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		               |	И торо_ИнтеграцияДокументов.ДокументЕРП = &СсылкаНаДокЕРП";
		
		Запрос.УстановитьПараметр("ID"             , ДополнительныеПараметры.ТекущийРемонт_ID);
		Запрос.УстановитьПараметр("Ссылка"         , Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП" , ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.ТекущийРемонт_ID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ID, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ВнутреннееПотреблениеТоваров.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID           = ID;
		Запись.ДокументТОИР = ДокументТОИР;
		Запись.ДокументЕРП  = ДокументЕРП;
		Запись.Записать();
		ОбновитьДокументыВнутреннегоПотребленияСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыВнутреннегоПотребления(Парам1 = Неопределено, Парам2 = Неопределено)	Экспорт
	ОбновитьДокументыВнутреннегоПотребленияСервер(Парам1, Парам2);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыВнутреннегоПотребленияСервер(Парам1 = Неопределено, Парам2 = Неопределено)	
	
	Если Не ДоступноВнутреннеПотреблениеТоваров Тогда
		Элементы.ДокументыВнутреннееПотребление.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивID = Объект.Мероприятия.Выгрузить(, "ID");
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК Заказ,
	               |	торо_ИнтеграцияДокументов.ID КАК ID
	               |ПОМЕСТИТЬ Заказы
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&ID)
	               |	И торо_ИнтеграцияДокументов.ДокументЕРП ССЫЛКА Документ.ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ВнутреннееПотребление,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	торо_ИнтеграцияДокументов.ID КАК ID,
	               |	ИСТИНА КАК Записан
	               |ПОМЕСТИТЬ ВсеДокументы
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&ID)
	               |	И торо_ИнтеграцияДокументов.ДокументЕРП ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
	               |	И НЕ торо_ИнтеграцияДокументов.ДокументЕРП.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВнутреннееПотреблениеТоваров.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ВнутреннееПотреблениеТоваров.Ссылка.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	Заказы.ID,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Заказы КАК Заказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваров
	               |		ПО Заказы.Заказ = ВнутреннееПотреблениеТоваров.ЗаказНаВнутреннееПотребление
	               |ГДЕ
	               |	НЕ ВнутреннееПотреблениеТоваров.Ссылка.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеДокументы.ВнутреннееПотребление КАК ВнутреннееПотребление,
	               |	ВсеДокументы.ИндексКартинки КАК ИндексКартинки,
	               |	ВсеДокументы.ID КАК ID,
	               |	МАКСИМУМ(ВсеДокументы.Записан) КАК Записан
	               |ИЗ
	               |	ВсеДокументы КАК ВсеДокументы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВсеДокументы.ВнутреннееПотребление,
	               |	ВсеДокументы.ИндексКартинки,
	               |	ВсеДокументы.ID";

	Запрос.УстановитьПараметр("ID", МассивID);
	
	ДокументыВнутреннееПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Помечен = ПометитьПотреблениеНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(Помечен) <> Тип("Булево") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Помечен);
		КонецЕсли;
		МассивСтрокВП = ДокументыВнутреннееПотребление.НайтиСтроки(Новый Структура("ВнутреннееПотребление", ДополнительныеПараметры.ПотреблениеСсылка));
		Если МассивСтрокВП.Количество() Тогда
			Для Каждого Элемент Из МассивСтрокВП Цикл
				УдалитьСводныйВП(Элемент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПометитьПотреблениеНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектПотребление = СтруктураПараметров.ПотреблениеСсылка.ПолучитьОбъект();
		
		Если ОбъектПотребление.Проведен Тогда
			ОбъектПотребление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектПотребление.ПометкаУдаления = Истина;
		ОбъектПотребление.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID           = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ПотреблениеСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		ОбновитьДокументыВнутреннегоПотребленияСервер();
		
	Исключение
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивID(МассивID,ЭлементДерева)
	МассивID.Добавить(ЭлементДерева.ID);
	Для Каждого ЭлементДерева1 Из ЭлементДерева.ПолучитьЭлементы() Цикл
		ЗаполнитьМассивID(МассивID,ЭлементДерева1);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаменитьМатериалыНаАналоги(АдресВХранилище, Отказ = Ложь)
	
	ЗначенияРеквизитовНовыхСтрок = Новый Структура;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МассивКлючей						= Новый Массив;
	МассивУдаляемыхСтрок				= Новый Массив;
	ИзменяемыеСтроки					= Новый Соответствие;
	СтруктураОтбора						= Новый Структура;
	
	НаборыМатериалов					= ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Проверяем возможность применения замены.
	
	Для Каждого СтрокаМатериал из НаборыМатериалов.Материалы Цикл
		
		СтруктураОтбора.Вставить("ID",СтрокаМатериал.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаМатериал.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаМатериал.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(СтруктураОтбора.ХарактеристикаНоменклатуры) Тогда
				ШаблонСообщения = НСтр("ru = 'Не найдено строки с материалом: %1, %2.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураОтбора.Номенклатура, СтруктураОтбора.ХарактеристикаНоменклатуры);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Не найдено строки с материалом: %1.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураОтбора.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		
			Продолжить;
		КонецЕсли;
		
		СтрокаМатЗатрат = НайденныеСтроки[0];
		
		Если СтрокаМатЗатрат.КоличествоЕдиниц < СтрокаМатериал.Количество Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка применения аналога. Материала ""%1"" недостаточно для замены.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаМатЗатрат.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаМатЗатрат.Количество = СтрокаМатериал.Количество Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаМатЗатрат);
		Иначе
			ИзменяемыеСтроки.Вставить(СтрокаМатЗатрат,Новый Структура("КоличествоЕдиниц,Количество",СтрокаМатЗатрат.КоличествоЕдиниц - СтрокаМатериал.Количество,СтрокаМатЗатрат.Количество - СтрокаМатериал.КоличествоУпаковок));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление строк или изменение количества.
	//
	Для Каждого СтрокаМатЗатрат из МассивУдаляемыхСтрок Цикл
		Объект.МатериальныеЗатраты.Удалить(СтрокаМатЗатрат);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ИзменяемыеСтроки Цикл
		КлючИЗначение.Ключ.Количество = КлючИЗначение.Значение.Количество;
		КлючИЗначение.Ключ.КоличествоЕдиниц = КлючИЗначение.Значение.КоличествоЕдиниц;
	КонецЦикла;
	
	// Добавление новых строк
	Для Каждого СтрокаАналога ИЗ НаборыМатериалов.Аналоги Цикл
		СтруктураОтбора.Вставить("ID",СтрокаАналога.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаАналога.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаАналога.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаАналога.ХарактеристикаНоменклатуры);
		
		МассивСтрок = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаНоменклатуры = МассивСтрок[0];
			СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.Количество + СтрокаАналога.Количество;
			СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаНоменклатуры.КоличествоЕдиниц + СтрокаАналога.КоличествоЕдиниц;
		Иначе
			СтрокаНоменклатуры = Объект.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаАналога);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналогиНаКлиенте()
	СтрокаНоменклатуры = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если СтрокаНоменклатуры.ЕстьАналоги Тогда
		СтрокаРемонта = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.РемонтыОборудования_ID))[0];
		СтрокаРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.ID))[0];
		МассивСтрокРРТехКарта = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаРР.Родитель_ID));
		Если МассивСтрокРРТехКарта.Количество() Тогда
			ТехКарта = МассивСтрокРРТехКарта[0].РемонтнаяРабота;
		Иначе
			ТехКарта = ПредопределенноеЗначение("Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка");
		КонецЕсли;
		
		ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнителя (СтрокаРемонта.ОбъектРемонта); 
		
		СтруктураПараметров = (Новый Структура(
		"ID,РемонтыОборудования_ID,Номенклатура,
		|ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КоличествоЕдиниц
		|,Количество, ОбъектРемонта, ВидРемонта,
		|ПодразделениеИсполнитель, ТехКарта, ДатаРемонта",
		СтрокаНоменклатуры.ID,СтрокаНоменклатуры.РемонтыОборудования_ID,СтрокаНоменклатуры.Номенклатура,
		СтрокаНоменклатуры.ХарактеристикаНоменклатуры,СтрокаНоменклатуры.ЕдиницаИзмерения,СтрокаНоменклатуры.КоличествоЕдиниц,
		СтрокаНоменклатуры.Количество,СтрокаРемонта.ОбъектРемонта,СтрокаРемонта.ВидРемонтныхРабот,
		ПодразделениеИсполнитель,ТехКарта,СтрокаРемонта.ДатаНачала));
		
		ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораАналогаНоменклатурыДляРемонта",СтруктураПараметров,ЭтаФорма,Объект.Ссылка,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделениеИсполнителя(СсылкаОР)
	Запрос =  Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	торо_СписокОбъектовРегламентногоМероприятия.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель
	                |ИЗ
	                |	Справочник.торо_СписокОбъектовРегламентногоМероприятия КАК торо_СписокОбъектовРегламентногоМероприятия
	                |ГДЕ
	                |	торо_СписокОбъектовРегламентногоМероприятия.Ссылка = &СсылкаОР";
	
	Запрос.УстановитьПараметр("СсылкаОР", СсылкаОР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПодразделениеИсполнитель;
	Иначе 
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСписокОбъектовПоТехОперации(ТехОперация)
	Если ТипЗнч(ТехОперация) = Тип("Структура") И Объект.МероприятияОбъектов.НайтиСтроки(Новый Структура("Мероприятие_ID", ТехОперация.СтрокаРемонтовОборудования.ID)).Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&МероприятиеID КАК ID,
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_МаршрутыРегламентныхМероприятий.НомерПоПорядку КАК НомерПоПорядку
		|ПОМЕСТИТЬ ТабОР
		|ИЗ
		|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
		|ГДЕ
		|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов = &СписокОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабОР.ID КАК ID,
		|	ВЫБОР
		|		КОГДА торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВыпМероприятия,
		|	ТабОР.ОбъектРемонта КАК ОбъектРемонта,
		|	ТабОР.НомерПоПорядку КАК НомерПоПорядку
		|ИЗ
		|	ТабОР КАК ТабОР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыполненныеМероприятияОбъектов КАК торо_ВыполненныеМероприятияОбъектов
		|		ПО ТабОР.ID = торо_ВыполненныеМероприятияОбъектов.ID
		|			И ТабОР.ОбъектРемонта = торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта";
		
		Запрос.УстановитьПараметр("СписокОбъектов", ТехОперация.СтрокаРемонтовОборудования.ОбъектРемонта);
		Запрос.УстановитьПараметр("МероприятиеID", ТехОперация.СтрокаРемонтовОборудования.ID);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НС = Объект.МероприятияОбъектов.Добавить();
			НС.ОбъектРемонта = Выборка.ОбъектРемонта;
			НС.Мероприятие_ID = Выборка.ID;
			НС.Выполнено = НЕ Выборка.ЕстьВыпМероприятия;
			НС.НомерПоПорядку = Выборка.НомерПоПорядку;
			
		КонецЦикла;
		
		Объект.МероприятияОбъектов.Сортировать("НомерПоПорядку Возр");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура;
	СтруктураТабличныхЧастей.Вставить("МатериальныеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ТрудовыеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ПодрядчикиРемонтныхРабот");
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.Мероприятия.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.Мероприятия.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			СтрокиМО = Объект.МероприятияОбъектов.НайтиСтроки(Новый Структура("Мероприятие_ID", ОчереднаяСтрока.ID));
			
			Для каждого СтрокаМО Из СтрокиМО Цикл
				Объект.МероприятияОбъектов.Удалить(СтрокаМО);
			КонецЦикла;
			
			ДокументыВП = ДокументыВнутреннееПотребление.НайтиСтроки(Новый Структура("ID", ОчереднаяСтрока.ID));
			Для Каждого ДокументВП Из ДокументыВП Цикл 
				ДокументыВнутреннееПотребление.Удалить(ДокументВП);
			КонецЦикла;
			
			Объект.Мероприятия.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
				
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, Ремонт_ID));
					
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
		СтрокиМО = Объект.МероприятияОбъектов.НайтиСтроки(Новый Структура("Мероприятие_ID", Ремонт_ID));
		
		Для каждого СтрокаМО Из СтрокиМО Цикл
			Объект.МероприятияОбъектов.Удалить(СтрокаМО);
		КонецЦикла;
		
		ДокументыВП = ДокументыВнутреннееПотребление.НайтиСтроки(Новый Структура("ID", Ремонт_ID));
		Для Каждого ДокументВП Из ДокументыВП Цикл 
			ДокументыВнутреннееПотребление.Удалить(ДокументВП);
		КонецЦикла;
		
	КонецЕсли;
		
	МероприятияПриАктивизацииСтроки(Элементы.Мероприятия);	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(ТекущиеЗначения, СтруктураТабличныхЧастей)

	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
		ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
		
		СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			ТабличнаяЧасть.Удалить(Элемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
	ПараметрыПоиска.Вставить("Родитель_ID", ТекущиеЗначения.ID);
			
	МассивПодчиненныхСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрДерева Из МассивПодчиненныхСтрок Цикл
		СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктураДляПередачи, СтруктураТабличныхЧастей);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеЗначенийКоличестваИлиУпаковки(ТекущиеДанные, ИзменениеКоличестваЕдиниц = Ложь)
	
	КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиНаСервере(ТекущиеДанные.ЕдиницаИзмерения);	
	
	Если КоэффициентУпаковки = 0 Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли; 
	
	Если ИзменениеКоличестваЕдиниц Тогда
		
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоЕдиниц / КоэффициентУпаковки;
		
	Иначе	
		
		ТекущиеДанные.КоличествоЕдиниц = ТекущиеДанные.Количество * КоэффициентУпаковки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	
	Возврат Упаковка.Коэффициент;
	
КонецФункции

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.Мероприятия.ТекущиеДанные;
	
	ID_Отбора = "";
	Если ТекСтрокаДереваРемонтов <> Неопределено Тогда 
		ID_Отбора = ТекСтрокаДереваРемонтов.ID;
	КонецЕсли;
	
	Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
		ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
		
		// Материальные затраты.
		Элементы.МатериальныеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
		// Трудовые затраты.
		Элементы.ТрудовыеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
		// Исполнители ремонтных работ.
		Элементы.ПодрядчикиРемонтныхРабот.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
	Иначе
		
		// Материальные затраты.
		Элементы.МатериальныеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
		// Трудовые затраты.
		Элементы.ТрудовыеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
		// Исполнители ремонтных работ.
		Элементы.ПодрядчикиРемонтныхРабот.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьГалкиВВетке(Строка, ЗначФлага, ЗначПроцента)
	
	Для каждого Стр Из Строка.ПолучитьЭлементы() Цикл
		Стр.Выполнено = ЗначФлага;
		ПроставитьГалкиВВетке(Стр, ЗначФлага, ЗначПроцента);
	КонецЦикла; 
	
КонецПроцедуры

// Процедура выполняет заполнение процентов выполнения ремонтных работ.
//
// Параметры
//  СтрокаДерева – строка дерева ремонтных работ.
//
Процедура ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	торо_Ремонты.РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, СтруктураСтроки);
	
	Если НЕ СтруктураРодСтроки = Неопределено Тогда	
		торо_Ремонты.РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтруктураРодСтроки);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоРемонтныхРабот");
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьПроцентВыполненияВСтрокахТЧ(СтрокаДерева)
	
	Если ЗначениеЗаполнено(СтрокаДерева.ID) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ID",СтрокаДерева.ID);
		СтруктураПоиска.Вставить("Родитель_ID",СтрокаДерева.Родитель_ID);
		СтруктураПоиска.Вставить("РемонтыОборудования_ID",СтрокаДерева.РемонтыОборудования_ID);
		
		СтрокиРемРаботы = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиРемРаботы.Количество() <> 0 Тогда
			СтрокиРемРаботы[0].ПроцентВыполненияРабот = СтрокаДерева.ПроцентВыполненияРабот;
			СтрокиРемРаботы[0].Выполнено = ?(СтрокаДерева.ПроцентВыполненияРабот = 100, Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ТекСтрокаДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ОбновитьПроцентВыполненияВСтрокахТЧ(ТекСтрокаДерева);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот(Родитель)
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(Родитель.ПолучитьИдентификатор());
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет пересчет затрат по количеству операций.
//
Процедура ПересчитатьЗатратыПоКоличеству(ID, Коэффициент)
	
	МассивСтрокМЗ = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	Для Каждого СтрокаТЧ Из МассивСтрокМЗ Цикл
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество * Коэффициент;
		СтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.КоличествоЕдиниц * Коэффициент;
		
	КонецЦикла; 
	
	МассивСтрокТЗ = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	Для Каждого СтрокаТЧ Из МассивСтрокТЗ Цикл
		
		СтрокаТЧ.ВремяРаботы = СтрокаТЧ.ВремяРаботы * Коэффициент;
		СтрокаТЧ.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(СтрокаТЧ.ВремяРаботы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID, Номенклатура, ХарактеристикаНоменклатуры", РемонтыОборудования_ID, ID, текСтрока.Номенклатура, текСтрока.Характеристика);
			
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.ХарактеристикаНоменклатуры = текСтрока.Характеристика;
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			нс.Количество = текСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(нс.Единицаизмерения), 1, КоэфУпаковкиВыбр);
			нс.КоличествоЕдиниц = нс.Количество * КоэфУпаковкиВыбр;
		
			нс.ID = ID;
			нс.РемонтыОборудования_ID = РемонтыОборудования_ID;
			
		Иначе
			
			нс = НайС[0];
			
			КоэфУпаковкиСтар = ?(ЗначениеЗаполнено(нс.ЕдиницаИзмерения), нс.ЕдиницаИзмерения.Коэффициент, 1);
			КоличествоЕдиниц = (нс.Количество*КоэфУпаковкиСтар + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр);
			нс.Количество = КоличествоЕдиниц / КоэфУпаковкиВыбр;
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			
			нс.КоличествоЕдиниц = КоличествоЕдиниц;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителей(Адрес)
	
	Если Адрес = Неопределено Тогда возврат; КонецЕсли;
	
	тз = ПолучитьИзВременногоХранилища(Адрес);
	
	стрОтбора = Новый Структура("РемонтыОборудования_ID, ID, Квалификация");
	Для каждого текСтрока из Тз Цикл
		ЗаполнитьЗначенияСвойств(стрОтбора, текСтрока);
		НайС = Объект.ТрудовыеЗатраты.НайтиСтроки(стрОтбора);
		
		Для каждого ТезЗапись из НайС Цикл
			Объект.ТрудовыеЗатраты.Удалить(ТезЗапись);
			Модифицированность = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого текСтрока из Тз Цикл
		нс = Объект.ТрудовыеЗатраты.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
		Если НЕ (ЗначениеЗаполнено(нс.ВремяРаботы) И ЗначениеЗаполнено(нс.ВремяРаботыТекст)) Тогда
			нс.ВремяРаботы = нс.ДатаОкончания - нс.ДатаНачала;
			нс.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(нс.ВремяРаботы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаАвтоматическогоЗаполненияИсполнителей(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		Объект.ТрудовыеЗатраты.Очистить();
		Для каждого СтрокаМассива Из Результат Цикл
			НС = Объект.ТрудовыеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаМассива);
			НС.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(НС.ВремяРаботы);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСтруктурИсполнителей()
	Массив = Новый Массив;
	
	Для каждого СтрокаРемонтовОборудования Из Объект.Мероприятия Цикл
		
		МассивСтрокРемонныхРабот = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID));
		
		Для каждого СтрокаРемонтныхРабот Из МассивСтрокРемонныхРабот Цикл
			
			МассивИсполнителей = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, ID", СтрокаРемонтовОборудования.ID, СтрокаРемонтныхРабот.ID));
			
			Для каждого СтрокаИсполнителя Из МассивИсполнителей Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				СтруктураСтроки.Вставить("Квалификация"          , СтрокаИсполнителя.Квалификация);
				СтруктураСтроки.Вставить("ДатаНачала"            , СтрокаИсполнителя.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончания"         , СтрокаИсполнителя.ДатаОкончания);
				СтруктураСтроки.Вставить("КТУ"                   , СтрокаИсполнителя.КТУ);
				СтруктураСтроки.Вставить("ВремяРаботы"           , СтрокаИсполнителя.ВремяРаботы);
				СтруктураСтроки.Вставить("СуммаКНачислению"      , СтрокаИсполнителя.СуммаКНачислению);
				СтруктураСтроки.Вставить("Сотрудник"             , СтрокаИсполнителя.Сотрудник);
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			Если Не ТипЗнч(СтрокаРемонтныхРабот.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт")
				И Не МассивИсполнителей.Количество() > 0 Тогда // Нужно отразить хотя бы тех операции.
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				
				СтруктураСтроки.Вставить("Квалификация");
				СтруктураСтроки.Вставить("ДатаНачала");
				СтруктураСтроки.Вставить("ДатаОкончания");
				СтруктураСтроки.Вставить("КТУ");
				СтруктураСтроки.Вставить("ВремяРаботы");
				СтруктураСтроки.Вставить("СуммаКНачислению");
				СтруктураСтроки.Вставить("Сотрудник");
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции	

&НаКлиенте 
Процедура РассчитатьВремя(ИдСтроки, КоличествоОбъектов = Неопределено)
	текДанные = Объект.ТрудовыеЗатраты.НайтиПоИдентификатору(ИдСтроки);
	текДанные.РассчитыватьАвтоматически = Истина;
	Если КоличествоОбъектов = Неопределено Тогда 
		ВыполненныеОбъекты = Объект.МероприятияОбъектов.НайтиСтроки(
			Новый Структура("Мероприятие_ID, Выполнено", Элементы.Мероприятия.ТекущиеДанные.ID, Истина));
		КоличествоОбъектов = ВыполненныеОбъекты.Количество();
	КонецЕсли;
	ОбщееВремя = текДанные.ДатаОкончания - текДанные.ДатаНачала;
	Если КоличествоОбъектов Тогда
		ВремяНаОбъект = ОбщееВремя / КоличествоОбъектов;
	Иначе
		ВремяНаОбъект = 0;
	КонецЕсли;
	текДанные.ВремяРаботы = ВремяНаОбъект;
	текДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(текДанные.ВремяРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНоваяОперацияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтарыйID = ТекущиеДанные.ID;
		МассивВозврата = торо_ПроцентыВыполнения.НайтиОперациюВРегистре(ТекущиеДанные.РемонтнаяРабота, ТекущиеДанные.Родитель_ID, ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.НоваяОперация, Объект.Ссылка);
		Если МассивВозврата.Количество() = 1 И МассивВозврата[0].Новая = Истина И ТекущиеДанные.НоваяОперация = Ложь Тогда
			ТекстСообщения = НСтр("ru = 'Операция не найдена!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.НоваяОперация = Истина;
			ИзменитьIDВТабличныхЧастях(МассивВозврата[0].ID, СтарыйID);
		ИначеЕсли МассивВозврата.Количество() = 1 Тогда
			СтруктураПоиска = Новый Структура("ID, РемонтнаяРабота", МассивВозврата[0].ID, МассивВозврата[0].Операция);
			Имеющиеся = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
			Если Имеющиеся.Количество() = 0 Тогда
			    ТекущиеДанные.ID = МассивВозврата[0].ID;
				Если МассивВозврата[0].Процент < 0 Тогда
					ТекущиеДанные.ПроцентВыполненияРабот = (100 + МассивВозврата[0].Процент) / ТекущиеДанные.Количество;
				Иначе
					ТекущиеДанные.ПроцентВыполненияРабот = МассивВозврата[0].Процент / ТекущиеДанные.Количество;
				КонецЕсли;
				// Изменить в подчиненных частях: трудо- мат- затраты и т.п.
				ИзменитьIDВТабличныхЧастях(МассивВозврата[0].ID, СтарыйID);
			Иначе
				ТекстСообщения = НСтр("ru = 'Эта операция уже добавлена!'");
			    ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				ТекущиеДанные.НоваяОперация = Истина;
			КонецЕсли; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораIDОперации", ЭтотОбъект, Новый Структура("Элемент", Элемент));
			СтруктураЗаполнения = Новый Структура("МассивВозврата", МассивВозврата); 
			ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораОперации", СтруктураЗаполнения,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораIDОперации(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;	
	Если ТекущиеДанные <> Неопределено И ВыбранныйЭлемент <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ID, РемонтнаяРабота", ВыбранныйЭлемент.ID, ВыбранныйЭлемент.Операция);
		Имеющиеся = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
		Если Имеющиеся.Количество() = 0 Тогда
			СтарыйID = ТекущиеДанные.ID;
			ТекущиеДанные.ID = ВыбранныйЭлемент.ID;
			Если ВыбранныйЭлемент.Процент < 0 Тогда
				ТекущиеДанные.ПроцентВыполненияРабот = (100 + ВыбранныйЭлемент.Процент) / ТекущиеДанные.Количество;
			Иначе
				ТекущиеДанные.ПроцентВыполненияРабот = ВыбранныйЭлемент.Процент / ТекущиеДанные.Количество;
			КонецЕсли; 
			ИзменитьIDВТабличныхЧастях(ВыбранныйЭлемент.ID, СтарыйID);
			ПерерасчитатьПроцентыВыполненияРабот();
		Иначе
			ТекстСообщения = НСтр("ru = 'Эта операция уже добавлена!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.НоваяОперация = Истина;
		КонецЕсли; 
		
	ИначеЕсли ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.НоваяОперация = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьIDВТабличныхЧастях(НовыйID, СтарыйID)
	
	ТабличныеЧасти = Новый Соответствие;
	ТабличныеЧасти.Вставить("РемонтныеРаботы", "РемонтныеРаботы");
	ТабличныеЧасти.Вставить("МатериальныеЗатраты", "МатериальныеЗатраты");
	ТабличныеЧасти.Вставить("ТрудовыеЗатраты", "ТрудовыеЗатраты");
	ТабличныеЧасти.Вставить("ПодрядчикиРемонтныхРабот", "ПодрядчикиРемонтныхРабот");
	
	Для каждого ТабЧасть Из ТабличныеЧасти Цикл
		Для каждого Строка Из Объект[ТабЧасть.Значение] Цикл
			Если Строка.ID = СтарыйID Тогда
				Строка.ID = НовыйID;
			КонецЕсли; 
		КонецЦикла;	
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяРаботыПоНормативамНаСервере()
	
	торо_Ремонты.ЗаполнитьВремяРаботыПоНормативам(ЭтаФорма, "ТрудовыеЗатраты");
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
		Строка.РассчитыватьАвтоматически = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяРаботыПоДлительностиСУчетомГрафикаНаСервере()
	
	ТаблицаСотрудников = Объект.ТрудовыеЗатраты.Выгрузить(,"Сотрудник, ДатаНачала, ДатаОкончания");	

	ТабВремениРаботыСотрудников = РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаСотрудников);	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		
		МассивРабВремениСотрудников = ТабВремениРаботыСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ДатаНачала, ДатаОкончания", Строка.Сотрудник, Строка.ДатаНачала, Строка.ДатаОкончания));
		ВремяПоГрафику = ?(МассивРабВремениСотрудников.Количество(), МассивРабВремениСотрудников[0], Неопределено);
		
		Если ВремяПоГрафику <> Неопределено Тогда
			Строка.ВремяРаботы = ВремяПоГрафику.ВремяРаботы;
		Иначе
			Строка.ВремяРаботы = 0;
		КонецЕсли;
		
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
		Строка.РассчитыватьАвтоматически = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаПериодов)
	
	Если ТаблицаПериодов.Количество() = 0 Тогда
		ТаблицаПериодов.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
		Возврат ТаблицаПериодов;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ЗапросГрафиков = Новый Запрос;
	ЗапросГрафиков.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросГрафиков.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Период КАК Период,
	|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудников.ГрафикРаботы,
	|	ГрафикРаботыСотрудников.ДействуетДо
	|ПОМЕСТИТЬ ВТ_ГрафикиРаботыСотрудников
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|ГДЕ
	|	ГрафикРаботыСотрудников.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_ИсходныеДанные.Сотрудник
	|			ИЗ
	|				ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТ_ГрафикиРаботыСотрудников.Период) КАК ПериодГрафика,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ПериодыГрафиковНаНачалоРемонта
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ИсходныеДанные.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И ВТ_ИсходныеДанные.ДатаНачала >= ВТ_ГрафикиРаботыСотрудников.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.Сотрудник,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаНачала,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания,
	|	ВТ_ГрафикиРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаНачала КАК НачалоИнтервала,
	|	ВЫБОР
	|		КОГДА ВТ_ГрафикиРаботыСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТ_ГрафикиРаботыСотрудников.ДействуетДо > ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания
	|			ТОГДА ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания
	|		ИНАЧЕ ВТ_ГрафикиРаботыСотрудников.ДействуетДо
	|	КОНЕЦ КАК КонецИнтервала
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиков
	|ИЗ
	|	ВТ_ПериодыГрафиковНаНачалоРемонта КАК ВТ_ПериодыГрафиковНаНачалоРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ПериодыГрафиковНаНачалоРемонта.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И ВТ_ПериодыГрафиковНаНачалоРемонта.ПериодГрафика = ВТ_ГрафикиРаботыСотрудников.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания,
	|	ВТ_ГрафикиРаботыСотрудников.ГрафикРаботы,
	|	ВТ_ГрафикиРаботыСотрудников.Период,
	|	ВЫБОР
	|		КОГДА ВТ_ГрафикиРаботыСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТ_ГрафикиРаботыСотрудников.ДействуетДо > ВТ_ИсходныеДанные.ДатаОкончания
	|			ТОГДА ВТ_ИсходныеДанные.ДатаОкончания
	|		ИНАЧЕ ВТ_ГрафикиРаботыСотрудников.ДействуетДо
	|	КОНЕЦ
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ИсходныеДанные.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И (ВТ_ГрафикиРаботыСотрудников.Период > ВТ_ИсходныеДанные.ДатаНачала)
	|			И (ВТ_ГрафикиРаботыСотрудников.Период < ВТ_ИсходныеДанные.ДатаОкончания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиков.Сотрудник,
	|	ВТ_ПериодыДействияГрафиков.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиков.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиков.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиков.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиков.КонецИнтервала
	|ИЗ
	|	ВТ_ПериодыДействияГрафиков КАК ВТ_ПериодыДействияГрафиков";
	
	ЗапросГрафиков.УстановитьПараметр("ВТ_ИсходныеДанные", ТаблицаПериодов);
	
	ТабГрафиков = ЗапросГрафиков.Выполнить().Выгрузить();
	МассивГрафиков = ТабГрафиков.ВыгрузитьКолонку("ГрафикРаботы");
	
	МинДата = ТаблицаПериодов[0].ДатаНачала;
	МаксДата = ТаблицаПериодов[0].ДатаОкончания;
	
	Для каждого Строка из ТаблицаПериодов Цикл
		Если Строка.ДатаНачала < МинДата Или Не ЗначениеЗаполнено(МинДата) Тогда
			МинДата = Строка.ДатаНачала;
		КонецЕсли;
		Если Строка.ДатаОкончания > МаксДата Тогда
			МаксДата = Строка.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	МинДата = НачалоДня(МинДата);
    МаксДата = КонецДня(МаксДата);
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, МинДата, МаксДата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиков.Сотрудник,
	|	ВТ_ПериодыДействияГрафиков.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиков.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиков.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиков.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиков.КонецИнтервала,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.НачалоИнтервала, ДЕНЬ), ВТ_ПериодыДействияГрафиков.НачалоИнтервала, СЕКУНДА) КАК НачалоИнтервалаСек,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.КонецИнтервала, ДЕНЬ), ВТ_ПериодыДействияГрафиков.КонецИнтервала, СЕКУНДА) КАК КонецИнтервалаСек,
	|	ВТРасписанияРаботы.ДатаГрафика,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА) КАК ВремяНачалаСек,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА) КАК ВремяОкончанияСек
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиковПоДням
	|ИЗ
	|	ВТ_ПериодыДействияГрафиков КАК ВТ_ПериодыДействияГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ПО ВТ_ПериодыДействияГрафиков.ГрафикРаботы = ВТРасписанияРаботы.ГрафикРаботы
	|			И (ВТРасписанияРаботы.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.НачалоИнтервала, ДЕНЬ) И КОНЕЦПЕРИОДА(ВТ_ПериодыДействияГрафиков.КонецИнтервала, ДЕНЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиковПоДням.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиковПоДням.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек > ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала, ДЕНЬ)
	|			И ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек < ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек
	|		ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|	КОНЕЦ КАК ВремяНачалаСек,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек < ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек > ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек
	|		ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|	КОНЕЦ КАК ВремяОкончанияСек
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиковПоДням2
	|ИЗ
	|	ВТ_ПериодыДействияГрафиковПоДням КАК ВТ_ПериодыДействияГрафиковПоДням
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиковПоДням2.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ПериодыДействияГрафиковПоДням2.ВремяОкончанияСек = 86399
	|				ТОГДА 86400
	|			ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням2.ВремяОкончанияСек
	|		КОНЕЦ - ВТ_ПериодыДействияГрафиковПоДням2.ВремяНачалаСек) КАК ВремяРаботы
	|ИЗ
	|	ВТ_ПериодыДействияГрафиковПоДням2 КАК ВТ_ПериодыДействияГрафиковПоДням2
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПериодыДействияГрафиковПоДням2.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаОкончания";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудникаНаСервере()
	
	МассивСотрудников = Новый Массив;
	Для Каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если МассивСотрудников.Найти(Строка.Сотрудник) = Неопределено Тогда
			МассивСотрудников.Добавить(Строка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Трудозатраты.ID,
	|	ВТ_Трудозатраты.Сотрудник,
	|	ВТ_Трудозатраты.ДатаНачала,
	|	ВТ_Трудозатраты.ДатаОкончания,
	|	ВТ_Трудозатраты.ВремяРаботы,
	|	ВТ_Трудозатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ПОМЕСТИТЬ ВТ_Трудозатраты
	|ИЗ
	|	&ВТ_Трудозатраты КАК ВТ_Трудозатраты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ремонты.ID КАК ID,
	|	ВТ_Ремонты.ДатаНачала,
	|	ВТ_Ремонты.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_Ремонты
	|ИЗ
	|	&ВТ_Ремонты КАК ВТ_Ремонты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Трудозатраты.ID,
	|	ВТ_Трудозатраты.Сотрудник КАК Сотрудник,
	|	ВТ_Трудозатраты.ВремяРаботы,
	|	ВЫБОР
	|		КОГДА ВТ_Трудозатраты.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Ремонты.ДатаНачала
	|		ИНАЧЕ ВТ_Трудозатраты.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ВТ_Трудозатраты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Ремонты.ДатаОкончания
	|		ИНАЧЕ ВТ_Трудозатраты.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	ВТ_Трудозатраты КАК ВТ_Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
	|		ПО ВТ_Трудозатраты.РемонтыОборудования_ID = ВТ_Ремонты.ID
	|ГДЕ
	|	ВТ_Трудозатраты.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_Трудозатраты.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВТ_Ремонты.ДатаНачала
	|			ИНАЧЕ ВТ_Трудозатраты.ДатаНачала
	|		КОНЕЦ <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА ВТ_Трудозатраты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВТ_Ремонты.ДатаОкончания
	|			ИНАЧЕ ВТ_Трудозатраты.ДатаОкончания
	|		КОНЕЦ <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ВТ_Трудозатраты", Объект.ТрудовыеЗатраты.Выгрузить());
	Запрос.УстановитьПараметр("ВТ_Ремонты", Объект.Мероприятия.Выгрузить());
	
	ТаблицаСДатами = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСдатамиПомесяцам = ТаблицаСДатами.СкопироватьКолонки();
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("НачалоМесяца", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("КонецМесяца", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПоМесяцам.Колонки.Добавить("КонецИнтервала", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаТаблицыСдатами из ТаблицаСДатами Цикл
		ТекНачалоМесяца = НачалоМесяца(СтрокаТаблицыСдатами.ДатаНачала);
		Пока ТекНачалоМесяца <= НачалоМесяца(СтрокаТаблицыСдатами.ДатаОкончания) Цикл
			НовСтр = ТаблицаСдатамиПомесяцам.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТаблицыСдатами);
			
			НовСтр.НачалоМесяца = ТекНачалоМесяца;
			НовСтр.КонецМесяца = КонецМесяца(ТекНачалоМесяца);
			НовСтр.НачалоИнтервала = Макс(НовСтр.НачалоМесяца, НовСтр.ДатаНачала);
			НовСтр.КонецИнтервала = Мин(НовСтр.КонецМесяца, НовСтр.ДатаОкончания);
			
			ТекНачалоМесяца = ДобавитьМесяц(ТекНачалоМесяца, 1);
		КонецЦикла;	
	КонецЦикла;
	
	// рассчет рабочего времени сотрудника в период ремонта за определенный месяц
	ТаблицаИнтервалов = ТаблицаСдатамиПоМесяцам.Скопировать();
	ТаблицаИнтервалов.Свернуть("Сотрудник, НачалоИнтервала, КонецИнтервала");
	ТаблицаИнтервалов.Колонки.НачалоИнтервала.Имя = "ДатаНачала";
	ТаблицаИнтервалов.Колонки.КонецИнтервала.Имя = "ДатаОкончания";
	
	ТаблицаИнтервалов = РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаИнтервалов);
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("РабочееВремяЗаИнтервал", Новый ОписаниеТипов("Число"));
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаНачала, ДатаОкончания");
	Для каждого СтрокаТаблицыСДатами из ТаблицаСдатамиПомесяцам Цикл
		СтруктураПоиска.Сотрудник = СтрокаТаблицыСДатами.Сотрудник;
		СтруктураПоиска.ДатаНачала = СтрокаТаблицыСДатами.НачалоИнтервала;
		СтруктураПоиска.ДатаОкончания = СтрокаТаблицыСДатами.КонецИнтервала;
		СтрокиВремени = ТаблицаИнтервалов.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиВремени.Количество() > 0 Тогда
			СтрокаТаблицыСДатами.РабочееВремяЗаИнтервал = СтрокиВремени[0].ВремяРаботы;
		КонецЕсли;
	КонецЦикла;
	
	// рассчет рабочего времени сотрудника всего в месяце
	ТаблицаМесяцев = ТаблицаСдатамиПоМесяцам.Скопировать();
	ТаблицаМесяцев.Свернуть("Сотрудник, НачалоМесяца, КонецМесяца");
	ТаблицаМесяцев.Колонки.НачалоМесяца.Имя = "ДатаНачала";
	ТаблицаМесяцев.Колонки.КонецМесяца.Имя = "ДатаОкончания";
	
	ТаблицаМесяцев = РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаМесяцев);
	ТаблицаСдатамиПоМесяцам.Колонки.Добавить("РабочееВремяЗаМесяц", Новый ОписаниеТипов("Число"));

	Для каждого СтрокаТаблицыСДатами из ТаблицаСдатамиПомесяцам Цикл
		СтрокаТаблицыСДатами.РабочееВремяЗаМесяц = УстановитьВремяРаботыЗаМесяц(СтрокаТаблицыСДатами.НачалоМесяца, СтрокаТаблицыСДатами.КонецМесяца);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Данные.ID,
	|	ВТ_Данные.Сотрудник,
	|	ВТ_Данные.ВремяРаботы,
	|	ВТ_Данные.ДатаНачала,
	|	ВТ_Данные.ДатаОкончания,
	|	ВТ_Данные.НачалоИнтервала,
	|	ВТ_Данные.КонецИнтервала,
	|	ВТ_Данные.НачалоМесяца,
	|	ВТ_Данные.КонецМесяца,
	|	ВТ_Данные.РабочееВремяЗаИнтервал,
	|	ВТ_Данные.РабочееВремяЗаМесяц
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&ВТ_Данные КАК ВТ_Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ID КАК ID,
	|	СУММА(ВТ_Данные.РабочееВремяЗаИнтервал) КАК РабочееВремяЗаРемонт
	|ПОМЕСТИТЬ ВТ_РабочееВремяЗаРемонт
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ID,
	|	ВТ_Данные.Сотрудник,
	|	ВТ_Данные.ВремяРаботы,
	|	ВТ_Данные.ДатаНачала,
	|	ВТ_Данные.ДатаОкончания,
	|	ВТ_Данные.НачалоИнтервала,
	|	ВТ_Данные.КонецИнтервала,
	|	ВТ_Данные.НачалоМесяца,
	|	ВТ_Данные.КонецМесяца,
	|	ВТ_Данные.РабочееВремяЗаИнтервал,
	|	ВТ_Данные.РабочееВремяЗаМесяц,
	|	ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0) КАК РабочееВремяЗаРемонт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Данные.РабочееВремяЗаИнтервал / ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0)
	|	КОНЕЦ КАК ДоляИнтервалаВРемонте
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РабочееВремяЗаРемонт КАК ВТ_РабочееВремяЗаРемонт
	|		ПО ВТ_Данные.ID = ВТ_РабочееВремяЗаРемонт.ID";
	
	Запрос.УстановитьПараметр("ВТ_Данные", ТаблицаСдатамиПомесяцам);
	
	ТаблицаДляРасчетаСтавок = Запрос.Выполнить().Выгрузить();
	ТаблицаДляРасчетаСтавок.Индексы.Добавить("ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Сотрудник,
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Премия / 100 КАК Премия,
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Оклад КАК Оклад
	|ИЗ
	|	РегистрСведений.торо_ТекущиеТарифныеСтавкиСотрудников КАК торо_ТекущиеТарифныеСтавкиСотрудников
	|ГДЕ
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Организация = &Организация
	|	И торо_ТекущиеТарифныеСтавкиСотрудников.Сотрудник В(&Сотрудники)";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
				
		ДанныеСотрудника = Результат.Найти(Строка.Сотрудник,"Сотрудник");
		Если ДанныеСотрудника <> Неопределено Тогда
			ДанныеДляРасчетаСтавки = ТаблицаДляРасчетаСтавок.НайтиСтроки(Новый Структура("ID", Строка.ID));
			СуммаКНачислению = 0;
			
			Для каждого СтрокаДанныхЗаМесяц из ДанныеДляРасчетаСтавки Цикл
				ТарифнаяСтавка = ?(СтрокаДанныхЗаМесяц.РабочееВремяЗаМесяц = 0, 0, (ДанныеСотрудника.Оклад * 3600)/СтрокаДанныхЗаМесяц.РабочееВремяЗаМесяц);
				ЧастьСуммы = (Строка.ВремяРаботы / 3600)* Строка.КТУ * (1 + ДанныеСотрудника.Премия) * ТарифнаяСтавка * СтрокаДанныхЗаМесяц.ДоляИнтервалаВРемонте;
				СуммаКНачислению = СуммаКНачислению + ЧастьСуммы;
			КонецЦикла;
			
			Строка.СуммаКНачислению = СуммаКНачислению;
			
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификацииНаСервере()
	
	// Кнопка может быть нажата и для незаписанного документа.
	ТаблицаДатРемонтов = Новый ТаблицаЗначений;
	ТаблицаДатРемонтов.Колонки.Добавить("Квалификация", Новый ОписаниеТипов("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(36);
	ТаблицаДатРемонтов.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,,,КвалификаторСтроки));
	ТаблицаДатРемонтов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		НоваяСтрока = ТаблицаДатРемонтов.Добавить();
		НоваяСтрока.Квалификация = Строка.Квалификация;
		НоваяСтрока.ID = Строка.ID;
		ПоискДаты = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", Строка.РемонтыОборудования_ID));
		Если ПоискДаты.Количество() > 0 Тогда
			НоваяСтрока.Дата = ПоискДаты[0].ДатаНачала;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Дата) Тогда
			НоваяСтрока.Дата = Объект.Дата;
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДатРемонтов.Квалификация КАК Квалификация,
	               |	ТаблицаДатРемонтов.ID КАК ID,
	               |	ТаблицаДатРемонтов.Дата КАК Дата
	               |ПОМЕСТИТЬ ВТ_ДатыРемонта
	               |ИЗ
	               |	&ТаблицаДатРемонтов КАК ТаблицаДатРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДатыРемонта.Квалификация КАК Квалификация,
	               |	МАКСИМУМ(торо_СтоимостьЧасаКвалификации.Период) КАК Период,
	               |	ВТ_ДатыРемонта.ID КАК ID,
	               |	ВТ_ДатыРемонта.Дата КАК Дата
	               |ПОМЕСТИТЬ ВТ_МаксДатыСтоимостейКвалификации
	               |ИЗ
	               |	ВТ_ДатыРемонта КАК ВТ_ДатыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК торо_СтоимостьЧасаКвалификации
	               |		ПО ВТ_ДатыРемонта.Квалификация = торо_СтоимостьЧасаКвалификации.Квалификация
	               |			И ВТ_ДатыРемонта.Дата > торо_СтоимостьЧасаКвалификации.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ДатыРемонта.Квалификация,
	               |	ВТ_ДатыРемонта.ID,
	               |	ВТ_ДатыРемонта.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_СтоимостьЧасаКвалификации.Квалификация КАК Квалификация,
	               |	торо_СтоимостьЧасаКвалификации.Валюта КАК Валюта,
	               |	торо_СтоимостьЧасаКвалификации.Стоимость КАК Стоимость,
	               |	ВТ_МаксДатыСтоимостейКвалификации.ID КАК ID,
	               |	ВТ_МаксДатыСтоимостейКвалификации.Дата КАК Дата
	               |ПОМЕСТИТЬ ВТ_СтоимостиНаДату
	               |ИЗ
	               |	ВТ_МаксДатыСтоимостейКвалификации КАК ВТ_МаксДатыСтоимостейКвалификации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК торо_СтоимостьЧасаКвалификации
	               |		ПО ВТ_МаксДатыСтоимостейКвалификации.Квалификация = торо_СтоимостьЧасаКвалификации.Квалификация
	               |			И ВТ_МаксДатыСтоимостейКвалификации.Период = торо_СтоимостьЧасаКвалификации.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	ВТ_СтоимостиНаДату.ID КАК ID,
	               |	ВТ_СтоимостиНаДату.Квалификация КАК Квалификация,
	               |	ВТ_СтоимостиНаДату.Стоимость КАК Стоимость
	               |ПОМЕСТИТЬ ВТ_МаксДатыКурсов
	               |ИЗ
	               |	ВТ_СтоимостиНаДату КАК ВТ_СтоимостиНаДату
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ПО ВТ_СтоимостиНаДату.Валюта = КурсыВалют.Валюта
	               |			И ВТ_СтоимостиНаДату.Дата > КурсыВалют.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Валюта,
	               |	ВТ_СтоимостиНаДату.ID,
	               |	ВТ_СтоимостиНаДату.Квалификация,
	               |	ВТ_СтоимостиНаДату.Стоимость
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_МаксДатыКурсов.ID КАК ID,
	               |	ВТ_МаксДатыКурсов.Квалификация КАК Квалификация,
	               |	ВТ_МаксДатыКурсов.Стоимость * ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Стоимость
	               |ИЗ
	               |	ВТ_МаксДатыКурсов КАК ВТ_МаксДатыКурсов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ПО ВТ_МаксДатыКурсов.Валюта = КурсыВалют.Валюта
	               |			И ВТ_МаксДатыКурсов.Период = КурсыВалют.Период";
	
	Запрос.УстановитьПараметр("ТаблицаДатРемонтов", ТаблицаДатРемонтов);
	СтоимостиКвалификаций = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		
		СтруктураПараметров = Новый Структура("Квалификация, ID", Строка.Квалификация, Строка.ID);
		ДанныеПоКвалификации = СтоимостиКвалификаций.НайтиСтроки(СтруктураПараметров); 
		Если ДанныеПоКвалификации.Количество() > 0 Тогда
			Строка.СуммаКНачислению = (Строка.ВремяРаботы / 3600)* Строка.КТУ * ДанныеПоКвалификации[0].Стоимость;
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтоимостиПоРасценкеТехОперацииНаСервере()
	
	МассивID = Новый Массив;
	Для Каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если МассивID.Найти(Строка.ID) = Неопределено Тогда 
			МассивID.Добавить(Строка.ID);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ * ПОМЕСТИТЬ ТабРемРабот ИЗ &ТабРемРабот КАК ТабРемРабот ГДЕ ТабРемРабот.ID В (&МассивID);
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабРемРабот.ID КАК ID,
	|	1 КАК Количество,
	|	КурсыВалютСрезПоследних.Курс * ТабРемРабот.РемонтнаяРабота.Расценка КАК Стоимость
	|ИЗ
	|	ТабРемРабот КАК ТабРемРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО ТабРемРабот.РемонтнаяРабота.Валюта = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("ТабРемРабот", Объект.РемонтныеРаботы.Выгрузить());
	РасценкаОпераций = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		ДанныеПоОперации = РасценкаОпераций.Найти(Строка.ID,"ID");
		Если ДанныеПоОперации <> Неопределено Тогда
			Строка.СуммаКНачислению = Строка.КТУ * ДанныеПоОперации.Стоимость * ДанныеПоОперации.Количество;
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьНаличиеАналогов(МассивКлючей = Неопределено)
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьАналогиНоменклатурыДляРемонтов") Тогда
		Возврат;
	КонецЕсли;
	
	МВТ = торо_МТОСервер.ПодготовитьВременнуюТаблицуДляПроверкиАналоговРегламентыхМероприятий(Объект, МассивКлючей);
	Выборка = торо_МТОСервер.ВернутьЗаписиСАналогами(МВТ);
	
	Если ТипЗнч(МассивКлючей) = Тип("Строка") Тогда
		СтрокиДляОбработки = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", МассивКлючей));
	ИначеЕсли ТипЗнч(МассивКлючей) = Тип("Массив") Тогда
		СтрокиДляОбработки = Новый Массив;
		Для каждого Ключ из МассивКлючей Цикл
			НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", Ключ));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, НайденныеСтроки);
		КонецЦикла;
	Иначе
		СтрокиДляОбработки = Объект.МатериальныеЗатраты;
	КонецЕсли;
	
	Для каждого Строка из СтрокиДляОбработки Цикл
		Строка.ЕстьАналоги = Ложь;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ID,РемонтыОборудования_ID");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска);
		НайденныеСтроки[0].ЕстьАналоги = Выборка.ЕстьАналоги;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный(Результат, ДополнительныеПараметры) Экспорт
	МассивID = ДополнительныеПараметры.МассивID;
	Для Каждого ID Из МассивID Цикл
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекущийРемонт_ID", ID);
		СтруктураПараметров.Вставить("Ссылка", ДополнительныеПараметры.Ссылка);
		ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, СтруктураПараметров);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСводныйВП(Элемент)
	Если Не Элемент = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПотреблениеСсылка" ,Элемент.ВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"                ,Элемент.ID);
		ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления(КодВозвратаДиалога.Да, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОставшиесяПроцентыРабот(РемонтыОборудования_ID = Неопределено)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия"));
	торо_ПроцентыВыполнения.ПолучитьНевыполненныеПроценты(ДокОбъект.РемонтныеРаботы, ДокОбъект.Ссылка, РемонтыОборудования_ID);
	Для каждого Строка Из ДокОбъект.РемонтныеРаботы Цикл
		Если РемонтыОборудования_ID = Неопределено ИЛИ Строка.РемонтыОборудования_ID = РемонтыОборудования_ID Тогда
			Если ТипЗнч(Строка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") 
			  И Строка.ПроцентВыполненияРабот > 100 Тогда 
				Строка.ПроцентВыполненияРабот = 100;
			КонецЕсли;
			Строка.Выполнено = Истина;
		КонецЕсли; 
	КонецЦикла; 
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ПерерасчитатьПроцентыВыполненияРабот()
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		 ТекСтрокаДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0];
	КонецЕсли; 

	ТекСтрокаДерева.ПроцентВыполненияРабот = мин(100, ТекСтрокаДерева.ПроцентВыполненияРабот);
	ТекСтрокаДерева.Выполнено = (ТекСтрокаДерева.ПроцентВыполненияРабот = 100);
	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
		
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	
	Строка = ВыполнитьПоискПоДереву(СтруктураСтроки);
	Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыРаботПоРемонту(Команда)
	ТекДанныеРемонта = Элементы.Мероприятия.ТекущиеДанные;
	
	Если Не ТекДанныеРемонта = Неопределено Тогда
		ИмяПоляДляОтбора = "РемонтыОборудования_ID";
		
		Если Элементы.СтраницыИсполнители.ТекущаяСтраница = Элементы.СтраницаПодрядчики Тогда
			ИмяТЧ = "ПодрядчикиРемонтныхРабот";
			ИмяТЧДляПользователя = "Подрядчики ремонтных работ";
		Иначе
		    ИмяТЧ = "ТрудовыеЗатраты";
			ИмяТЧДляПользователя = "Трудовые затраты";
		КонецЕсли; 

		ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяПоляДляОтбора, ИмяТЧДляПользователя", ИмяТЧ, ИмяПоляДляОтбора, ИмяТЧДляПользователя) ;
		Если ЕстьЗаполненныеДатыУИсполнителейРемонта(ИмяТЧ, ИмяПоляДляОтбора, ТекДанныеРемонта.ID) Тогда
		    ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДатыРаботПоРемонтуЗавершение", ЭтотОбъект, ДополнительныеПараметры), НСтр("ru = 'Даты уже заполнены. Перезаполнить их?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
		    ЗаполнитьДатыРаботПоРемонтуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЕстьЗаполненныеДатыУИсполнителейРемонта(ИмяТЧ, ИмяПоляДляОтбора, ID)
	ОтборСтрок = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(ИмяПоляДляОтбора, ID));
	Для каждого Исполнитель Из ОтборСтрок Цикл
	    Если Не Исполнитель.ДатаНачала = Дата("00010101") ИЛИ Не Исполнитель.ДатаОкончания = Дата("00010101") Тогда
		    Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьДатыРаботПоРемонтуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекДанныеРемонта = Элементы.Мероприятия.ТекущиеДанные; 
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	ИмяПоляДляОтбора = ДополнительныеПараметры.ИмяПоляДляОтбора;
	ИмяТЧДляПользователя = ДополнительныеПараметры.ИмяТЧДляПользователя;
	Если ИмяТЧДляПользователя = "Трудовые затраты" Тогда
		ИмяЗакладки = "Хозспособ";
	ИначеЕсли ИмяТЧДляПользователя = "Подрядчики ремонтных работ" Тогда 
		ИмяЗакладки = "Подрядный";
	КонецЕсли;
	
	ОтборСтрок = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(ИмяПоляДляОтбора, ТекДанныеРемонта.ID));
	Если ОтборСтрок.Количество() = 0 Тогда
	    Возврат;
	КонецЕсли; 
	
	Для каждого Исполнитель Из ОтборСтрок Цикл
		ПересчитыватьВремя = Ложь;
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ДатаНачалаДляЗаполнения = ТекДанныеРемонта.ДатаНачала;
			ДатаОкончанияДляЗаполнения = ТекДанныеРемонта.ДатаОкончания;
			ПересчитыватьВремя = Истина;
		Иначе
			ДатаНачалаДляЗаполнения = ?(Исполнитель.ДатаНачала = Дата("00010101"), ТекДанныеРемонта.ДатаНачала, Исполнитель.ДатаНачала);
			ДатаОкончанияДляЗаполнения = ?(Исполнитель.ДатаОкончания = Дата("00010101"), ТекДанныеРемонта.ДатаОкончания, Исполнитель.ДатаОкончания);
		КонецЕсли; 
		
		Если ДатаОкончанияДляЗаполнения < ДатаНачалаДляЗаполнения Тогда
			Если Исполнитель.ДатаНачала = Дата("00010101") Тогда
				ШаблонСообщения = НСтр("ru = 'На закладке ""%1"" в табличной части ""%2"" в строке %3 не заполнена дата начала (дата окончания не должна быть меньше даты начала)'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяЗакладки, ИмяТЧДляПользователя, Исполнитель.НомерСтроки);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			Если Исполнитель.ДатаОкончания = Дата("00010101") Тогда
				ШаблонСообщения = НСтр("ru = 'На закладке ""%1"" в табличной части ""%2"" в строке %3 не заполнена дата окончания (дата окончания не должна быть меньше даты начала)'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяЗакладки, ИмяТЧДляПользователя, Исполнитель.НомерСтроки);		
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
		    Продолжить;
		КонецЕсли; 
		
		Если РезультатВопроса = КодВозвратаДиалога.Нет И (Исполнитель.ДатаНачала = Дата("00010101") Или Исполнитель.ДатаОкончания = Дата("00010101")) Тогда
			ПересчитыватьВремя = Истина;
		КонецЕсли;
		
		Исполнитель.ДатаНачала = ДатаНачалаДляЗаполнения;
		Исполнитель.ДатаОкончания = ДатаОкончанияДляЗаполнения;
		Если Элементы.СтраницыИсполнители.ТекущаяСтраница = Элементы.СтраницаХозспособ И ПересчитыватьВремя Тогда
			Исполнитель.ВремяРаботы = ДатаОкончанияДляЗаполнения - ДатаНачалаДляЗаполнения;
			Исполнитель.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ДатаОкончанияДляЗаполнения - ДатаНачалаДляЗаполнения);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьДаты(ИмяТЧ, Исполнители, ТекущиеДанныеОР, Отказ, КонтролироватьВремяРаботы)
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
	    Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИсполнителя Из Исполнители Цикл
	    Если Не ЗначениеЗаполнено(СтрокаИсполнителя.ДатаНачала) Или Не ЗначениеЗаполнено(СтрокаИсполнителя.ДатаОкончания) Тогда
		    Возврат;
		КонецЕсли;
		
		Исполнитель = ?(ИмяТЧ = "ТрудовыеЗатраты", СтрокаИсполнителя.Сотрудник, СтрокаИсполнителя.Контрагент);
		
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" у исполнителя %2 дата начала не может быть %3 ремонта.'");
		ТекстСообщения = "";
		
		Если КонтролироватьВремяРаботы И ЗначениеЗаполнено(ТекущиеДанныеОР.ДатаНачала) Тогда
			Если СтрокаИсполнителя.ДатаНачала < ТекущиеДанныеОР.ДатаНачала Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	"меньше даты начала");
			ИначеЕсли СтрокаИсполнителя.ДатаНачала > ТекущиеДанныеОР.ДатаОкончания Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	"больше даты окончания");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		    ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ТекстСообщения = "";
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" у исполнителя %2 дата окончания не может быть %3 ремонта.'");
		
		Если КонтролироватьВремяРаботы И ЗначениеЗаполнено(ТекущиеДанныеОР.ДатаОкончания) Тогда
			Если СтрокаИсполнителя.ДатаОкончания < ТекущиеДанныеОР.ДатаНачала Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	"меньше даты начала");
			ИначеЕсли СтрокаИсполнителя.ДатаОкончания > ТекущиеДанныеОР.ДатаОкончания Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	"больше даты окончания");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		    ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" у исполнителя %2 дата начала не может быть больше даты окончания (%3 - %4).'");
		
		Если СтрокаИсполнителя.ДатаНачала > СтрокаИсполнителя.ДатаОкончания Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	СтрокаИсполнителя.ДатаНачала, СтрокаИсполнителя.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьФлагиВыполненияМероприятийВОбъектах()
	
#Область Запрос
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Мероприятия.ID КАК ID,
	               |	Мероприятия.ОбъектРемонта КАК ОбъектРемонта,
	               |	Мероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	               |ПОМЕСТИТЬ ВТ_Мероприятия
	               |ИЗ
	               |	&Мероприятия КАК Мероприятия
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СпиcокОбъектов.Мероприятие_ID КАК Мероприятие_ID,
	               |	ВЫБОР
				   |		КОГДА СпиcокОбъектов.Выполнено = ИСТИНА
				   |			ТОГДА 1
				   |		ИНАЧЕ 0
				   |	КОНЕЦ КАК Выполнено
	               |ПОМЕСТИТЬ ВТ_СпиcокОбъектов
	               |ИЗ
	               |	&СпиcокОбъектов КАК СпиcокОбъектов
				   |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Мероприятие_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СпиcокОбъектов.Мероприятие_ID КАК Мероприятие_ID
	               |ПОМЕСТИТЬ ВТ_МероприятияБезУстановленныхФлаговОР
	               |ИЗ
	               |	ВТ_СпиcокОбъектов КАК ВТ_СпиcокОбъектов
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СпиcокОбъектов.Мероприятие_ID
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВТ_СпиcокОбъектов.Выполнено) = 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Мероприятие_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Мероприятия.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_Мероприятия.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	               |ИЗ
	               |	ВТ_Мероприятия КАК ВТ_Мероприятия
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МероприятияБезУстановленныхФлаговОР КАК ВТ_МероприятияБезУстановленныхФлаговОР
	               |		ПО ВТ_Мероприятия.ID = ВТ_МероприятияБезУстановленныхФлаговОР.Мероприятие_ID";
	
	Запрос.УстановитьПараметр("Мероприятия", Объект.Мероприятия.Выгрузить());
	Запрос.УстановитьПараметр("СпиcокОбъектов", Объект.МероприятияОбъектов.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
#КонецОбласти

	Для каждого СтрокаМероприятия Из РезультатЗапроса Цикл
		ШаблонСообщения = НСтр("ru = 'Для списка ОР <%1> с видом мероприятия <%2> не установлено ни одного флага <Выполнено>!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаМероприятия.ОбъектРемонта, СтрокаМероприятия.ВидРемонтныхРабот);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура РемонтыОборудованияОбработкаВыбораПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивИДРемонтов = ДополнительныеПараметры.МассивИДДобавленныхРемонтов;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого ЭлементМассива из МассивИДРемонтов Цикл
			ОчиститьСвязанныеТабличныеЧасти(, , ЭлементМассива);
		КонецЦикла;
		
		ОбработкаВыбораЗавершение(ДополнительныеПараметры.ВыбранноеЗначение);
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте 
Процедура ОбработкаВыбораЗавершение(ВыбранноеЗначение)
	
	СтруктураВозврата = РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение.АдресХранилища);
	
	Если СтруктураВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделитьСтрокуРемонтовОборудования(СтруктураВозврата.IDРемонтаДляАктивизации);
	МероприятияПриАктивизацииСтроки(Элементы.Мероприятия);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция РемонтыОборудованияОбработкаВыбораСервер(АдресХранилища)

	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыбранноеЗначение = ПолучитьИзВременногоХранилища(АдресХранилища);
	
    IDРемонтаДляАктивизации = Неопределено;
	МассивСтруктурВозврата = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(Неопределено, ЭлементМассива, Объект, Объект.Мероприятия, Объект.РемонтныеРаботы, Объект.ДокументыОснования, Неопределено);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
		ЗаполнитьСписокОбъектовПоТехОперации(ЭлементМассива);
	КонецЦикла;	
	
	Если ВыбранноеЗначение.Количество() = 1 Тогда
		IDРемонтаДляАктивизации = ВыбранноеЗначение[0].СтрокаРемонтовОборудования.ID;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если Не ЗначениеЗаполнено(Строка.ВремяРаботы) Тогда
			Строка.ВремяРаботы = Строка.ДатаОкончания - Строка.ДатаНачала;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДобавленныеКолонкиТаблиц();
	ОбновитьДокументыВнутреннегоПотребленияСервер();

	Возврат Новый Структура("IDРемонтаДляАктивизации", IDРемонтаДляАктивизации);

КонецФункции

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.Мероприятия, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.Мероприятия, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	ОбновитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДобавленныеКолонкиТаблиц()
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.МатериальныеЗатраты,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
	ОтметитьНаличиеАналогов();
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуРемонтовОборудования(ИДРемонта)
	
	Если ЗначениеЗаполнено(ИДРемонта) Тогда
		Массивстрок = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", ИДРемонта));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.Мероприятия.ТекущаяСтрока = Идентиф;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Мероприятия.ТекущаяСтрока = Неопределено Тогда
		Если Объект.Мероприятия.Количество() > 0 Тогда
			Элементы.Мероприятия.ТекущаяСтрока = Объект.Мероприятия[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуДереваРемонтныхРабот(ИДОперации)
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Если ЗначениеЗаполнено(ИДОперации) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ЭлементыДереваРемРабот, ИДОперации, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыДереваРемРабот.Количество() > 0 Тогда
		Элементы.ДеревоРемонтныхРабот.Развернуть(ЭлементыДереваРемРабот[0].ПолучитьИдентификатор(),Истина);
		Если Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ЭлементыДереваРемРабот[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыТрудозатрат()
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если ТекДанные.РассчитыватьАвтоматически Тогда
		РассчитатьВремя(ТекДанные.ПолучитьИдентификатор());
	Иначе
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОбАвтоматическомРасчете", ЭтотОбъект, Новый Структура("ИДСтроки", ТекДанные.ПолучитьИдентификатор())); 
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, НСТр("ru = 'Рассчитать время работы автоматически?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбАвтоматическомРасчете(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		РассчитатьВремя(ДопПараметры.ИДСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпискаОбъектов()
	ТекДанные = Элементы.Мероприятия.ТекущиеДанные;
	ТрудозатратыКПересчету = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, РассчитыватьАвтоматически", ТекДанные.ID, Истина)); 
	Если ТрудозатратыКПересчету.Количество() Тогда
		ВыполненныеОбъекты = Объект.МероприятияОбъектов.НайтиСтроки(
			Новый Структура("Мероприятие_ID, Выполнено", ТекДанные.ID, Истина));
		Для Каждого Исполнитель Из ТрудозатратыКПересчету Цикл
			РассчитатьВремя(Исполнитель.ПолучитьИдентификатор(), ВыполненныеОбъекты.Количество());
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоказателиНаработкуСостоянияЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьНаУдалениеПоказателиНаработкуСостояния(ДопПараметры.Документ);
		Элементы.ДокументыСостоянияПоказателиНаработки.Обновить();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеПоказателиНаработкуСостояния(СсылкаНаДокумент)
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
	Если ДокументОбъект.Проведен Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	ДокументОбъект.ПометкаУдаления = Истина;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

&НаСервере
Функция УстановитьВремяРаботыЗаМесяц(НачалоМесяца, КонецМесяца)
	График = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ");
	РабочиеДни = КалендарныеГрафики.РазностьДатПоКалендарю(График,НачалоМесяца,КонецМесяца, Ложь);
	Возврат РабочиеДни * 8 * 3600;
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВвода(ДокументВводимый)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ВводНаОсновании.ДокументОснование КАК ДокументОснование,
	|	торо_ВводНаОсновании.ДокументВводимый КАК ДокументВводимый,
	|	торо_ВводНаОсновании.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.торо_ВводНаОсновании КАК торо_ВводНаОсновании
	|ГДЕ
	|	торо_ВводНаОсновании.Значение = ИСТИНА
	|	И торо_ВводНаОсновании.ДокументОснование = &ДокументОснование
	|	И торо_ВводНаОсновании.ДокументВводимый = &ДокументВводимый";
	
	Запрос.УстановитьПараметр("ДокументОснование","торо_АктОВыполненииРегламентногоМероприятия");
	Запрос.УстановитьПараметр("ДокументВводимый",ДокументВводимый);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.ДокументыВнутреннееПотреблениеДобавитьВнутреннееПотребление.Доступность		= НЕ ФОВводПотребленияНаОснованииПроведенного ИЛИ (ФОВводПотребленияНаОснованииПроведенного И Объект.Проведен);
	Элементы.ДокументыВнутреннееПотреблениеСводныйДокументВнутреннееПотребление.Доступность = НЕ ФОВводПотребленияНаОснованииПроведенного ИЛИ (ФОВводПотребленияНаОснованииПроведенного И Объект.Проведен);
	
	ПроверитьДоступностьКнопокРемонтныхРабот();
	ПроверитьДоступностьКнопокМатЗатратИИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьКнопокРемонтныхРабот()
	
	СписокЭлементов = Новый СписокЗначений;
	
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавить");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборПоБригадамДляОперации");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехКарту");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехОперацию");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборОпераций");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботУказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("Заполнить");
	СписокЭлементов.Добавить("МероприятияОбъектовВыбратьВсе");
	СписокЭлементов.Добавить("МероприятияОбъектовСнятьВсе");
	
	
	
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.Мероприятия,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьКнопокМатЗатратИИсполнителей()
	
	СписокЭлементов = Новый СписокЗначений;

	СписокЭлементов.Добавить("МатериальныеЗатратыПодборНоменклатуры");
	СписокЭлементов.Добавить("ТрудовыеЗатратыПодборПоБригадамДляДокумента");
	СписокЭлементов.Добавить("МатериальныеЗатратыДобавить");
	СписокЭлементов.Добавить("ТрудовыеЗатратыЗаполнить");
	СписокЭлементов.Добавить("ПодрядчикиРемонтныхРаботЗаполнить");
	СписокЭлементов.Добавить("ТрудовыеЗатратыДобавить");
	СписокЭлементов.Добавить("ПодрядчикиРемонтныхРаботДобавить");

	КоличествоЭлементов = ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество();
	
	Если КоличествоЭлементов > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы) Тогда		
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество(),СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	Иначе
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(0,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	КонецЕсли;
	
КонецПроцедуры

МероприятиеУдаляется = Ложь; 

#КонецОбласти