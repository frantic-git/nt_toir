
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
								
Перем ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов;
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	торо_ЗаполнениеДокументов20.ЗаполнениеНаОсновании(Основание, ЭтотОбъект, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
		
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	МассивНепроверяемыхРеквизитов.Добавить("МатериальныеЗатраты.ХарактеристикаНоменклатуры");
	Если ФОИспользоватьХарактеристикиНоменклатуры = Истина Тогда
		ПараметрыПроверки = Новый Структура("СуффиксХарактеристики, ИмяТЧ", "Номенклатуры", "МатериальныеЗатраты");
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;

	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	СписокТЧ.Вставить("Мероприятия", "Мероприятия");
	
	ШаблонСообщения = НСтр("ru = 'В табличной части ""%1"" нет строк.'");
	Для каждого текТЧ из СписокТЧ Цикл
		Если ЭтотОбъект[ТекТЧ.Ключ].Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекТЧ.Значение);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения табличных частей.
	ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(РемонтныеРаботы, Отказ);
	ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(Отказ);
	ПроверитьЗаполнениеИсполнителей(Отказ);
	
	Если Константы.торо_ЗапретитьПересечениеВремениРаботыСотрудниковСОдинаковойКвалификацией.Получить()
		И торо_ОбщегоНазначения.ПроверитьВремяРаботыСотрудников(ЭтотОбъект, "ТрудовыеЗатраты") Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ШаблонСообщения = НСтр("ru = 'Есть непроведенный документ основание: %1'");
	
	 МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования,"ДокументОснование"); 
	 Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 					|	торо_ГрафикРегламентныхМероприятийТОиР.Проведен КАК Проведен,
	 					|	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка КАК Ссылка
	 					|ИЗ
	 					|	Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_ГрафикРегламентныхМероприятийТОиР
	 					|ГДЕ
	 					|	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка В(&массивДокОсн)
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	торо_НарядНаРегламентноеМероприятие.Проведен,
						|	торо_НарядНаРегламентноеМероприятие.Ссылка
						|ИЗ
						|	Документ.торо_НарядНаРегламентноеМероприятие КАК торо_НарядНаРегламентноеМероприятие
						|ГДЕ
						|	торо_НарядНаРегламентноеМероприятие.Ссылка В(&массивДокОсн)");
	
	Запрос.УстановитьПараметр("массивДокОсн", МассивДокументовОснований); 
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Выборка.Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;			
		КонецЕсли;
	
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = 'Для списка объектов регламентного мероприятия ""%1"" с видом ремонта ""%2"" отсутствуют строки в дереве ремонтных работ.'");
	Для Каждого СтрокаСРемонтом Из Мероприятия Цикл
		МассивСтрок = РемонтныеРаботы.НайтиСтроки(Новый структура("РемонтыОборудования_ID", СтрокаСРемонтом.ID));
		Если МассивСтрок.Количество() = 0 Тогда			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСРемонтом.ОбъектРемонта, СтрокаСРемонтом.ВидРемонтныхРабот);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;			
		КонецЕсли;
	КонецЦикла;	

	ПроверитьДатуДокумента(Отказ);
	
	МероприятияТаблицаЗначений = Мероприятия.Выгрузить(); 
	МероприятияОтсутствующиеВДокументахИсточниках = торо_Ремонты.ПроверитьНаличиеРемонтовВДокументахИсточникахПоIDРемонта(МероприятияТаблицаЗначений);
	
	Если НЕ МероприятияОтсутствующиеВДокументахИсточниках = Неопределено Тогда
		
		Для каждого Мероприятие Из МероприятияОтсутствующиеВДокументахИсточниках Цикл
			ШаблонСообщения = НСтр("ru = 'Для списка объектов ""%1"" отсутствует соответствующий вид мероприятия в документе основании ""%2"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Мероприятие.ОбъектРемонта, Мероприятие.ДокументИсточник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);			
		КонецЦикла;
		
	КонецЕсли;		
	
	Если Не Отказ Тогда
		торо_ПроцентыВыполнения.СоздатьДокументыПлановыхЗатрат(Мероприятия, РемонтныеРаботы, Истина);
		ДвиженияПоРегистрам(РежимПроведения, Отказ);
	КонецЕсли;
	
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусРемонтовПриПроведении(ЭтотОбъект);
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовРемонта(Ссылка);
	
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовПриОтменеПроведения(ЭтотОбъект);
	УдалениеПроведенияПлановыхЗатрат();
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивОР = ОбщегоНазначения.ВыгрузитьКолонку(Мероприятия, "ОбъектРемонта", Истина);
	ОбъектыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивОР);
	
	МассивВидовРемонта = ОбщегоНазначения.ВыгрузитьКолонку(Мероприятия, "ВидРемонтныхРабот", Истина);
	ВидыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивВидовРемонта);
	
	// Получение удаленных ремонтов при перепроведении документа. Используются при формировании записей
	// регистров торо_ПлановыеИсполнителиРемонтов, торо_ОбщиеДанныеПоРемонтам, торо_СвернутыеФактическиеДатыРемонтов.
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивIDДокумента = Мероприятия.ВыгрузитьКолонку("ID");
		МассивУдаленныхID = торо_Ремонты.ПолучитьIDУдаленныхРемонтовДокумента(МассивIDДокумента, Ссылка);
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", МассивУдаленныхID);
	Иначе
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", Новый Массив());
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		 Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьДатуДокумента(Отказ)	
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	торо_ГрафикРегламентныхМероприятийТОиР.Дата КАК Дата
	                      |ИЗ
	                      |	Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_ГрафикРегламентныхМероприятийТОиР
	                      |ГДЕ
	                      |	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка В(&МассивДокОснов)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_НарядНаРегламентноеМероприятие.Дата
	                      |ИЗ
	                      |	Документ.торо_НарядНаРегламентноеМероприятие КАК торо_НарядНаРегламентноеМероприятие
	                      |ГДЕ
	                      |	торо_НарядНаРегламентноеМероприятие.Ссылка В(&МассивДокОснов)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Запрос.УстановитьПараметр("МассивДокОснов", МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Дата <= Выборка.Дата Тогда
			СтрокаСообщения = НСтр("ru = 'Дата документа должна быть больше даты документа-основания!'");
			ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(ТаблицаРемонтныхРабот, Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта,ВидРемонтныхРабот,ДатаНачала,ДатаОкончания");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Мероприятия", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "МатериальныеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МатериальныеЗатраты", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты()

// Проверяет правильность заполнения строк табличных частей "ТрудовыеЗатраты" и "ПодрядчикиРемонтныхРабот".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//

Процедура ПроверитьЗаполнениеИсполнителей(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сотрудник");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ТрудовыеЗатраты", СтруктураОбязательныхПолей, Отказ, "");


	СтруктураОбязательныхПолей = Новый Структура("Контрагент");
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПодрядчикиРемонтныхРабот", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры 
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ)
	
	// Движения по регистрам.
	Если Не Отказ Тогда
		
		ТаблицаПроведения = ПодготовитьТаблицуПроведения();
		ТаблицаМатериальныхЗатрат 	= ПодготовитьТаблицуМатериальныхЗатрат(ТаблицаПроведения);
		ТаблицаТрудовыхЗатрат		= ПодготовитьТаблицуТрудовыхЗатрат(ТаблицаПроведения);
		ТаблицаПодрядчиков		  = ПодрядчикиРемонтныхРабот.Выгрузить();
		ТаблицаРемонтныхРабот		= ПодготовитьТаблицуКонечныхЭлементовРемонтныхРабот();
		
		ДвиженияПоРегистру_торо_ЗатратыПоИсполнителямВыполненныхРемонтов(РежимПроведения, ТаблицаПодрядчиков, Отказ);
		
		// Движение по регистру "торо_ЗавершенныеМероприятия".
		ДвиженияПоРегистру_торо_ЗавершенныеМероприятия(РежимПроведения, Отказ);
		
		// Движение по регистру "торо_ВыполненныеМероприятияОбъектов".
		ДвиженияПоРегистру_торо_ВыполненныеМероприятияОбъектов(РежимПроведения, Отказ);
		
		ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(РежимПроведения, ТаблицаПроведения, Отказ);
		
		ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям(РежимПроведения, ТаблицаПроведения, Отказ);

		// Движение по регистру "торо_фактическиеМатериальныеЗатратыРемонтныхРабот".
		ДвиженияПоРегистру_торо_фактическиеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ);
		
		// Движение по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
		ДвиженияПоРегистру_торо_фактическиеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ);
		
		ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(РежимПроведения, ТаблицаРемонтныхРабот, Отказ);
		
		ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам();
		ДвиженияПоРегистру_торо_АктыПоРемонтам(РежимПроведения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ЗавершенныеРемонтныеРаботы".
//
Процедура ДвиженияПоРегистру_торо_ЗавершенныеМероприятия(РежимПроведения, Отказ)
	
	Для Каждого СтрокаРО Из Мероприятия Цикл
		
		Если ЗавершитьРемонтныеРаботы ИЛИ СтрокаРО.ЗавершитьРемонт Тогда
			
			Движение = Движения.торо_ЗавершенныеМероприятия.Добавить();
			
			Движение.ВидМероприятия = СтрокаРО.ВидРемонтныхРабот;
			Движение.СписокОбъектов = СтрокаРО.ОбъектРемонта;
			
			Движение.ДатаНачала = СтрокаРО.ДатаНачала;
			Движение.ДатаОкончания = СтрокаРО.ДатаОкончания;
			
			Движение.ID = СтрокаРО.ID;
			
			Движение.Период = Дата;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.торо_ЗавершенныеМероприятия.Записать();
	
КонецПроцедуры // ДвиженияПоРегистру_торо_ЗавершенныеРемонтныеРаботы()

Процедура ДвиженияПоРегистру_торо_ВыполненныеМероприятияОбъектов(РежимПроведения, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ОбъектРемонта КАК ОбъектРемонта,
	               |	Таб.Мероприятие_ID КАК Мероприятие_ID,
	               |	Таб.Выполнено
	               |ПОМЕСТИТЬ Вт_ДокТЧ
	               |ИЗ
	               |	&Таб КАК Таб
	               |ГДЕ
	               |	Таб.Выполнено
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Мероприятие_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВыполненныеМероприятияОбъектов.ID КАК ID,
	               |	торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_Регистр
	               |ИЗ
	               |	РегистрСведений.торо_ВыполненныеМероприятияОбъектов КАК торо_ВыполненныеМероприятияОбъектов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_ДокТЧ.ОбъектРемонта,
	               |	Вт_ДокТЧ.Мероприятие_ID КАК ID
	               |ИЗ
	               |	Вт_ДокТЧ КАК Вт_ДокТЧ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Регистр КАК ВТ_Регистр
	               |		ПО Вт_ДокТЧ.ОбъектРемонта = ВТ_Регистр.ОбъектРемонта
	               |			И Вт_ДокТЧ.Мероприятие_ID = ВТ_Регистр.ID
	               |ГДЕ
	               |	ВТ_Регистр.ID ЕСТЬ NULL";
				   
	Запрос.УстановитьПараметр("Таб", МероприятияОбъектов.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(); 
	
	Пока Выборка.Следующий() цикл	
		Движение = Движения.торо_ВыполненныеМероприятияОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
	КонецЦикла;
	
	Движения.торо_ВыполненныеМероприятияОбъектов.Записать();
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		
		Если ЗавершитьРемонтныеРаботы Тогда
			Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстатокЗаплРем;
			Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстатокЗаплРем;
		Иначе
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстатокЗаплРем Тогда
					Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстатокЗаплРем;
				Иначе
					Движение.ПроцентОпераций = СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот;
				КонецЕсли;
					Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстатокЗаплРем * СтрТаб.ПроцентВыполненияРабот / 100;
			Иначе
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстатокЗаплРем Тогда
					Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстатокЗаплРем;
				Иначе
					Движение.ПроцентОпераций = СтрТаб.Количество * 100;
				КонецЕсли;
				Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстатокЗаплРем;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		Движение = Движения.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.РемонтнаяРабота = СтрТаб.РемонтнаяРабота;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		
		Если ЗавершитьРемонтныеРаботы Тогда
			Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстаток;
			Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстаток;
		Иначе
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				ВыполненоОперации = СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот / СтрТаб.КолОперацийВТехКарте;
				Если ВыполненоОперации > СтрТаб.ПроцентОперацийОстаток Тогда
					Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстаток;
				Иначе
					Движение.ПроцентОпераций = ВыполненоОперации;
				КонецЕсли;
				Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстаток * СтрТаб.ПроцентВыполненияРабот / 100;
			Иначе
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстаток Тогда
					Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстаток;
				Иначе
					Движение.ПроцентОпераций = СтрТаб.Количество * 100;
				КонецЕсли;
				Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстаток;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ФактическиеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ)
	
	Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьМатериальныеЗатраты ИЗ ТаблицаМатериальныхЗатрат Цикл
		Движение = Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Добавить();
		Движение.ID = ЗаписьМатериальныеЗатраты.ID;
		Движение.РемонтыОборудования_ID = ЗаписьМатериальныеЗатраты.РемонтыОборудования_ID;
		Движение.Количество = ЗаписьМатериальныеЗатраты.Количество;
		Движение.Номенклатура = ЗаписьМатериальныеЗатраты.Номенклатура;
		Движение.Период = ЗаписьМатериальныеЗатраты.Период;
		Движение.РемонтнаяРабота = ЗаписьМатериальныеЗатраты.РемонтнаяРабота;
		Движение.ХарактеристикаНоменклатуры = ЗаписьМатериальныеЗатраты.ХарактеристикаНоменклатуры;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ФактическиеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ)
		
	Движения.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьТрудовыеЗатраты ИЗ ТаблицаТрудовыхЗатрат Цикл
		Движение = Движения.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.Добавить();
		Движение.РемонтыОборудования_ID = ЗаписьТрудовыеЗатраты.РемонтыОборудования_ID;
		Движение.ID = ЗаписьТрудовыеЗатраты.ID;
		Движение.Квалификация = ЗаписьТрудовыеЗатраты.Квалификация;
		Движение.Количество = ЗаписьТрудовыеЗатраты.Количество;
		Движение.Период = ЗаписьТрудовыеЗатраты.ДатаНачала;
		Движение.Сотрудник = ЗаписьТрудовыеЗатраты.Сотрудник;
		Движение.РемонтнаяРабота = ЗаписьТрудовыеЗатраты.РемонтнаяРабота;
		Движение.Сумма = ЗаписьТрудовыеЗатраты.Сумма;
		Движение.ВремяРаботы = ЗаписьТрудовыеЗатраты.ВремяРаботы;
	КонецЦикла;

	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗатратыПоИсполнителямВыполненныхРемонтов(РежимПроведения, ТаблицаПодрядчиков, Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Движения.торо_ЗатратыПоИсполнителямВыполненныхРемонтов.Записывать = Истина;
	
	// Запись по исполнителям удалена, т.к. дублирует информацию в регистре торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.
	// Оставлены только подрядчики.
	Для Каждого Подрядчик Из ТаблицаПодрядчиков Цикл
		
		Если РемонтныеРаботы.Найти(Подрядчик.ID,"ID") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Нет ремонтной работы с ИД '") + Подрядчик.ID;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
			
		КонецЕсли;
		
		Если Подрядчик.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Движение = Движения.торо_ЗатратыПоИсполнителямВыполненныхРемонтов.Добавить();
		Движение.Исполнитель = Подрядчик.Контрагент;
		Движение.Период = Дата;
		Движение.Сумма = Подрядчик.Сумма;
		Движение.УникальныйИдентификатор = Подрядчик.ID;
		СтрокаРемонта = РемонтныеРаботы.Найти(Подрядчик.ID,"ID");
		Движение.ТехнологическаяОперация = СтрокаРемонта.РемонтнаяРабота;
		Движение.РемонтыОборудования_ID = СтрокаРемонта.РемонтыОборудования_ID;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(РежимПроведения, ТаблицаРемонтныхРабот, Отказ)
	
	Если Не Отказ Тогда
		
		Движения.торо_ПроцентВыполненныхРабот.Записывать = Истина;
		
		Для Каждого Запись ИЗ ТаблицаРемонтныхРабот Цикл
			Движение = Движения.торо_ПроцентВыполненныхРабот.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
			Движение.Период = Дата;
			Движение.ВидДокумента = Перечисления.торо_ВидДокумента.АктОВыполненииРегламентногоМероприятия;
		КонецЦикла;
		
		Движения.торо_ПроцентВыполненныхРабот.Записать(Истина);
		
		// проверка превышения выполнения плана
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_ПроцентВыполненныхРабот.IDРемонта КАК IDРемонта,
			|	торо_ПроцентВыполненныхРабот.IDОперации КАК IDОперации,
			|	торо_ПроцентВыполненныхРабот.Операция КАК Операция,
			|	торо_ПроцентВыполненныхРабот.IDРодителя КАК IDРодителя,
			|	СУММА(торо_ПроцентВыполненныхРабот.Процент) КАК Процент
			|ПОМЕСТИТЬ ВТ_СуммаПроцентов
			|ИЗ
			|	РегистрНакопления.торо_ПроцентВыполненныхРабот КАК торо_ПроцентВыполненныхРабот
			|ГДЕ
			|	торо_ПроцентВыполненныхРабот.IDРемонта В(&IDРемонта)
			|	И торо_ПроцентВыполненныхРабот.IDОперации В(&IDОперации)
			|	И торо_ПроцентВыполненныхРабот.ВидДокумента <> ЗНАЧЕНИЕ(Перечисление.торо_ВидДокумента.НарядНаВыполнениеРемонтныхРабот)
			|	И торо_ПроцентВыполненныхРабот.ВидДокумента <> ЗНАЧЕНИЕ(Перечисление.торо_ВидДокумента.НарядНаВыполнениеРегламентногоМероприятия)
			|
			|СГРУППИРОВАТЬ ПО
			|	торо_ПроцентВыполненныхРабот.IDРемонта,
			|	торо_ПроцентВыполненныхРабот.Операция,
			|	торо_ПроцентВыполненныхРабот.IDОперации,
			|	торо_ПроцентВыполненныхРабот.IDРодителя
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ПроцентВыполненныхРабот.Регистратор КАК Регистратор,
			|	торо_ПроцентВыполненныхРабот.Активность КАК Активность,
			|	торо_ПроцентВыполненныхРабот.IDРемонта КАК IDРемонта,
			|	торо_ПроцентВыполненныхРабот.IDОперации КАК IDОперации,
			|	торо_ПроцентВыполненныхРабот.Операция КАК Операция,
			|	торо_ПроцентВыполненныхРабот.IDРодителя КАК IDРодителя,
			|	торо_ПроцентВыполненныхРабот.ВидДокумента КАК ВидДокумента,
			|	торо_ПроцентВыполненныхРабот.Процент КАК Процент
			|ИЗ
			|	РегистрНакопления.торо_ПроцентВыполненныхРабот КАК торо_ПроцентВыполненныхРабот
			|ГДЕ
			|	торо_ПроцентВыполненныхРабот.Процент > 0
			|	И торо_ПроцентВыполненныхРабот.IDРемонта В(&IDРемонта)
			|	И торо_ПроцентВыполненныхРабот.IDОперации В(&IDОперации)
			|	И торо_ПроцентВыполненныхРабот.ВидДокумента <> ЗНАЧЕНИЕ(Перечисление.торо_ВидДокумента.НарядНаВыполнениеРемонтныхРабот)
			|	И торо_ПроцентВыполненныхРабот.ВидДокумента <> ЗНАЧЕНИЕ(Перечисление.торо_ВидДокумента.НарядНаВыполнениеРегламентногоМероприятия)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_СуммаПроцентов.IDРемонта КАК IDРемонта,
			|	ВТ_СуммаПроцентов.IDОперации КАК IDОперации,
			|	ВТ_СуммаПроцентов.Операция КАК Операция,
			|	ВТ_СуммаПроцентов.IDРодителя КАК IDРодителя,
			|	ВТ_СуммаПроцентов.Процент КАК Процент
			|ИЗ
			|	ВТ_СуммаПроцентов КАК ВТ_СуммаПроцентов
			|ГДЕ
			|	ВТ_СуммаПроцентов.Процент < 0";
		
		Запрос.УстановитьПараметр("IDРемонта", ТаблицаРемонтныхРабот.ВыгрузитьКолонку("IDРемонта"));
		Запрос.УстановитьПараметр("IDОперации", ТаблицаРемонтныхРабот.ВыгрузитьКолонку("IDОперации")); 
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если НЕ РезультатЗапроса[1].Пустой() И НЕ РезультатЗапроса[2].Пустой() Тогда
			ВыборкаПревышения = РезультатЗапроса[2].Выбрать();
			Пока ВыборкаПревышения.Следующий() Цикл
				ШаблонСообщения = НСтр("ru = 'По операции %1 превышен план на %2%%'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаПревышения.Операция, -ВыборкаПревышения.Процент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам()
	Движения.торо_ВсеДокументыПоРемонтам.Записывать = Истина;
	Движения.торо_ВсеДокументыПоРемонтам.Очистить();
	
	Для каждого СтрокаТЧ Из Мероприятия Цикл
	    Движение = Движения.торо_ВсеДокументыПоРемонтам.Добавить();
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументПоРемонту = Ссылка;
		Движение.ДатаДокумента = Дата;
		Движение.Организация = Организация;
		Движение.Подразделение = Подразделение;
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_АктыПоРемонтам(РежимПроведения, Отказ)
	Движения.торо_АктыПоРемонтам.Записывать = Истина;
	Для каждого СтрРемонта Из Мероприятия Цикл
		Движение = Движения.торо_АктыПоРемонтам.Добавить();
		Движение.Период = МоментВремени().Дата;
		Движение.IDРемонта = СтрРемонта.ID;
		Движение.ДокументАкт = Ссылка;
		Движение.ВидРемонта = СтрРемонта.ВидРемонтныхРабот;
		Движение.Завершен = СтрРемонта.ЗавершитьРемонт;
		ЗаполнитьЗначенияСвойств(Движение, СтрРемонта);
		ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект);
	КонецЦикла;		
КонецПроцедуры
 
Функция ПодготовитьТаблицуКонечныхЭлементовРемонтныхРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID КАК IDОперации,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота КАК Операция,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID КАК IDРодителя,
	|	ВЫБОР
	|		КОГДА торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов.Значение = ИСТИНА
	|			ТОГДА торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ПроцентВыполненияРабот
	|		ИНАЧЕ ВЫБОР
	|				КОГДА торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Выполнено
	|					ТОГДА 100
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ * торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Количество * (-1) КАК Процент
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы,
	|	Константа.торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов КАК торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ПроцентВыполненияРабот <> 0
	|	И ТИПЗНАЧЕНИЯ(торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота) = ТИП(Справочник.торо_ТехнологическиеОперации) 
	|	И торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаРемонтныхРабот = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРемонтныхРабот;
	
КонецФункции

Процедура УдалениеПроведенияПлановыхЗатрат()
	Для каждого Строка Из Мероприятия Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_ПлановыеЗатраты.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.торо_ПлановыеЗатраты КАК торо_ПлановыеЗатраты
			|ГДЕ
			|	торо_ПлановыеЗатраты.РемонтыОборудования_ID = &РемонтыОборудования_ID";
		
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", Строка.ID);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НайденныйДокумент = ВыборкаДетальныеЗаписи.Ссылка;
				
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК торо_АктОВыполненииРегламентногоМероприятияМероприятия
			|ГДЕ
			|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID = &ID
			|	И торо_АктОВыполненииРегламентногоМероприятияМероприятия.ОбъектРемонта = &ОбъектРемонта
			|	И торо_АктОВыполненииРегламентногоМероприятияМероприятия.ДокументИсточник = &ДокументИсточник
			|	И торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка.Проведен = ИСТИНА
			|	И торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка <> &Ссылка";
			
			Запрос.УстановитьПараметр("ID", НайденныйДокумент.РемонтыОборудования_ID);
			Запрос.УстановитьПараметр("ДокументИсточник", НайденныйДокумент.ДокументПлана);
			Запрос.УстановитьПараметр("ОбъектРемонта", НайденныйДокумент.ОбъектРемонта);
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() И НайденныйДокумент.Проведен = Истина Тогда
				Док = НайденныйДокумент.ПолучитьОбъект();
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Функция формирует таблицу значений с данными по движениям документа.
//
Функция ПодготовитьТаблицуПроведения() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID КАК ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Выполнено,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ПроцентВыполненияРабот,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Количество,
	               |	СУММА(1) КАК КолОперацийВТехКарте
	               |ПОМЕСТИТЬ ТабРемРабот
	               |ИЗ
	               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
	               |		ПО (торо_ЗапланированныеРемонтныеРаботы.Родитель_ID = торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID)
	               |			И (ТИПЗНАЧЕНИЯ(торо_ЗапланированныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт))
	               |ГДЕ
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Выполнено,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ПроцентВыполненияРабот,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Количество
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	РемонтнаяРабота,
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	               |ПОМЕСТИТЬ ВТ_торо_ВыполняемыеРемонтныеРаботыОстатки
	               |ИЗ
	               |	РегистрНакопления.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Остатки(
	               |			&МоментВремени,
	               |			(IDРемонта, IDОперации, Родитель_ID) В
	               |				(ВЫБРАТЬ
	               |					ТабРемРабот.РемонтыОборудования_ID,
	               |					ТабРемРабот.ID,
	               |					ТабРемРабот.Родитель_ID
	               |				ИЗ
	               |					ТабРемРабот КАК ТабРемРабот)) КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	IDОперации,
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток КАК ПроцентОперацийОстаток,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстаток,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	               |ПОМЕСТИТЬ ВТ_торо_ЗапланированныеРемонтныеРаботыОстатки
	               |ИЗ
	               |	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы.Остатки(
	               |			&МоментВремени,
	               |			(IDРемонта, IDОперации, Родитель_ID) В
	               |				(ВЫБРАТЬ
	               |					ТабРемРабот.РемонтыОборудования_ID,
	               |					ТабРемРабот.ID,
	               |					ТабРемРабот.Родитель_ID
	               |				ИЗ
	               |					ТабРемРабот КАК ТабРемРабот)) КАК торо_ЗапланированныеРемонтныеРаботыОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	IDОперации,
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабРемРабот.ID,
	               |	ТабРемРабот.РемонтнаяРабота,
	               |	ТабРемРабот.Родитель_ID,
	               |	ТабРемРабот.РемонтыОборудования_ID,
	               |	ТабРемРабот.Выполнено,
	               |	ТабРемРабот.ПроцентВыполненияРабот,
	               |	ТабРемРабот.Количество,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток КАК ПроцентОперацийОстатокЗаплРем,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстатокЗаплРем,
	               |	ТабРемРабот.КолОперацийВТехКарте
	               |ИЗ
	               |	ТабРемРабот КАК ТабРемРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_торо_ВыполняемыеРемонтныеРаботыОстатки КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	               |		ПО ТабРемРабот.РемонтыОборудования_ID = торо_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта
	               |			И ТабРемРабот.ID = торо_ВыполняемыеРемонтныеРаботыОстатки.IDОперации
	               |			И ТабРемРабот.Родитель_ID = торо_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_торо_ЗапланированныеРемонтныеРаботыОстатки КАК торо_ЗапланированныеРемонтныеРаботыОстатки
	               |		ПО ТабРемРабот.РемонтыОборудования_ID = торо_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта
	               |			И ТабРемРабот.ID = торо_ЗапланированныеРемонтныеРаботыОстатки.IDОперации
	               |			И ТабРемРабот.Родитель_ID = торо_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ЗавершитьРемонтныеРаботы", ЗавершитьРемонтныеРаботы);
	
	ТаблицаПроведения = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПроведения;
	
КонецФункции

// Функция возвращает таблицу значений для движения по регистру "торо_ФактическиеМатериальныеЗатратыРемонтныхРабот".
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуМатериальныхЗатрат(ТаблицаДвижений)
	
	ТаблицаМатериальныхЗатрат = Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Выгрузить();
			
	Если МатериальныеЗатраты.Количество()=0 Тогда
		
		Возврат ТаблицаМатериальныхЗатрат;
		
	КонецЕсли; 
	
	БуферМЗ = МатериальныеЗатраты.Выгрузить();
	БуферМЗ.Колонки.Добавить("Период");
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		КоэффициентЕИ = СтрокаТЗ.ЕдиницаИзмерения.Коэффициент;
		СтрокаТЗ.Количество = СтрокаТЗ.Количество * ?(КоэффициентЕИ = 0, 1, КоэффициентЕИ);
		
		СтрокаРемонта = Мероприятия.Найти(СтрокаТЗ.РемонтыОборудования_ID);
		Если СтрокаРемонта <> Неопределено Тогда
			СтрокаТЗ.Период = СтрокаРемонта.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	БуферМЗ.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период", "Количество");
	
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ID) Тогда
			Продолжить;	
		КонецЕсли;
		
		НайденнаяСтрокаТЗ = РемонтныеРаботы.Найти(СтрокаТЗ.ID, "ID");
		Если Не НайденнаяСтрокаТЗ = Неопределено Тогда
			НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаТЗ);
			НовСтрокаТЗ.РемонтнаяРабота = НайденнаяСтрокаТЗ.РемонтнаяРабота;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТаблицаМатериальныхЗатрат.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период, РемонтнаяРабота", "Количество");
	
	Возврат ТаблицаМатериальныхЗатрат;
	
КонецФункции

// Функция возвращает таблицу значений для движения по регистру "торо_ФактическиеТрудовыеЗатратыРемонтныхРабот".
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТрудовыхЗатрат(ТаблицаДвижений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДвижений.ID КАК ID,
	               |	ТаблицаДвижений.Родитель_ID КАК Родитель_ID,
	               |	ТаблицаДвижений.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ТаблицаДвижений.РемонтнаяРабота КАК РемонтнаяРабота
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРаботНачало
	               |ИЗ
	               |	&ТаблицаДвижений КАК ТаблицаДвижений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаРемонтов.ID КАК ID,
	               |	ТаблицаРемонтов.ДатаНачала КАК ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтов
	               |ИЗ
	               |	&ТаблицаРемонтов КАК ТаблицаРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДвижений.ID КАК ID,
	               |	ТаблицаДвижений.Родитель_ID КАК Родитель_ID,
	               |	ТаблицаДвижений.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ТаблицаДвижений.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТаблицаРемонтов.ДатаНачала КАК ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРабот
	               |ИЗ
	               |	ТаблицаРемонтныхРаботНачало КАК ТаблицаДвижений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРемонтов КАК ТаблицаРемонтов
	               |		ПО ТаблицаДвижений.РемонтыОборудования_ID = ТаблицаРемонтов.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация КАК Квалификация,
	               |	СУММА(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.СуммаКНачислению) КАК СуммаКНачислению,
	               |	СУММА(1) КАК Количество,
	               |	СУММА(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ВремяРаботы) КАК ВремяРаботы,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID КАК ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Сотрудник КАК Сотрудник,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ДатаНачала КАК ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаТрудозатратАкт
	               |ИЗ
	               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.ТрудовыеЗатраты КАК торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты
	               |ГДЕ
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Сотрудник,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ДатаНачала
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТрудозатратАкт.Квалификация КАК Квалификация,
	               |	СУММА(ТаблицаТрудозатратАкт.СуммаКНачислению) КАК Сумма,
	               |	СУММА(ТаблицаТрудозатратАкт.Количество) КАК Количество,
	               |	СУММА(ТаблицаТрудозатратАкт.ВремяРаботы) КАК ВремяРаботы,
	               |	ТаблицаТрудозатратАкт.ID КАК ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТаблицаТрудозатратАкт.Сотрудник КАК Сотрудник,
	               |	ТаблицаТрудозатратАкт.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ВЫБОР
	               |		КОГДА ТаблицаТрудозатратАкт.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ТаблицаРемонтныхРабот.ДатаНачала
	               |		ИНАЧЕ ТаблицаТрудозатратАкт.ДатаНачала
	               |	КОНЕЦ КАК ДатаНачала
	               |ИЗ
	               |	ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТрудозатратАкт КАК ТаблицаТрудозатратАкт
	               |		ПО ТаблицаРемонтныхРабот.ID = ТаблицаТрудозатратАкт.ID
	               |			И ТаблицаРемонтныхРабот.РемонтыОборудования_ID = ТаблицаТрудозатратАкт.РемонтыОборудования_ID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаТрудозатратАкт.Квалификация,
	               |	ТаблицаТрудозатратАкт.ID,
	               |	ТаблицаТрудозатратАкт.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ТаблицаТрудозатратАкт.Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ТаблицаТрудозатратАкт.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ТаблицаРемонтныхРабот.ДатаНачала
	               |		ИНАЧЕ ТаблицаТрудозатратАкт.ДатаНачала
	               |	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДвижений", РемонтныеРаботы.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаРемонтов", Мероприятия.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов");

#КонецОбласти

#КонецЕсли
