&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
		
	// ТОИР-->
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	// <--ТОИР
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.ОтменаРезерва Тогда
		Элементы.ДатаИНомер.ТолькоПросмотр = Истина; 
		Элементы.Склад.ТолькоПросмотр = Истина;
		Элементы.Заказ.ТолькоПросмотр = Истина;
		Элементы.Страницы.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение <> Объект.ЗаказНаВнутреннееПотребление Тогда
		Если ЗначениеЗаполнено(Объект.Товары) Тогда
			СтандартнаяОбработка = Ложь; 
			ОповещениеОбОтвете = Новый ОписаниеОповещения("ЗавершитьВыборЗаказа", ЭтаФорма, Новый Структура("НовыйЗаказ", ВыбранноеЗначение));
			ПоказатьВопрос(ОповещениеОбОтвете, 
				НСтр("ru = 'Табличная часть будет перезаполнена по выбранному заказу на внутреннее потребление. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет);
		Иначе			
			ПолучитьТабличнуюЧастьПоЗаказу(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ТекущаяСтрока.ХарактеристикиИспользуются =  торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.СерииИспользуются = ПолучитьСерииИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.Серия = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.Товары.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Товары.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.Товары.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.Товары.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Товары.ТекущиеДанные.Номенклатура, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры", ВидНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные =  Элементы.Товары.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидНоменклатуры", ВидНоменклатуры));
		ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Склад",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.Склад);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ВидимостьСерий",				 			 Истина);

	масПараметр = ПолучитьМассивТиповНоменклаутры();
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",	масПараметр);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул, ЗаполнитьПризнакСерииИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул"),
			Новый Структура("Номенклатура", "СерииИспользуются")));
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Функция ПолучитьСерииИспользуются(Номенклатура)
	Возврат Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборЗаказа(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Ошибка = Ложь;
		ПолучитьТабличнуюЧастьПоЗаказу(ДопПараметры.НовыйЗаказ, Ошибка);
		Объект.ЗаказНаВнутреннееПотребление = ДопПараметры.НовыйЗаказ;
		Если Ошибка Тогда 
			Объект.Товары.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьТабличнуюЧастьПоЗаказу(ЗаказНаВнутреннееПотребление, Ошибка = Ложь)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	               |	&Характеристика КАК Характеристика,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
	               |	&Серия КАК Серия,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.КодСтроки КАК КодСтроки,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток КАК КОформлениюОстаток
	               |ПОМЕСТИТЬ Заказы
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(, ЗаказНаВнутреннееПотребление = &ЗаказНаВнутреннееПотребление) КАК ЗаказыНаВнутреннееПотреблениеОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	ТоварыНаСкладахОстатки.Серия КАК Серия,
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	               |ПОМЕСТИТЬ ТоварыНаСкладах
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			(Номенклатура, Характеристика, Склад) В
	               |				(ВЫБРАТЬ
	               |					Заказы.Номенклатура,
	               |					Заказы.Характеристика,
	               |					Заказы.Склад
	               |				ИЗ
	               |					Заказы)) КАК ТоварыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Склад,
	               |	Серия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	               |	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	торо_РезервыНаСкладахОстатки.Серия КАК Серия,
	               |	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ВсеРезервы
	               |ИЗ
	               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	               |			,
	               |			(Номенклатура, Характеристика, Склад) В
	               |				(ВЫБРАТЬ
	               |					Заказы.Номенклатура,
	               |					Заказы.Характеристика,
	               |					Заказы.Склад
	               |				ИЗ
	               |					Заказы)) КАК торо_РезервыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	               |	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	               |	торо_ТоварыНаРукахОстатки.Серия КАК Серия,
	               |	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ТоварыНаРуках
	               |ИЗ
	               |	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	               |			,
	               |			(ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, Склад) В
	               |				(ВЫБРАТЬ
	               |					Заказы.ЗаказНаВнутреннееПотребление,
	               |					Заказы.Номенклатура,
	               |					Заказы.Характеристика,
	               |					Заказы.Склад
	               |				ИЗ
	               |					Заказы)) КАК торо_ТоварыНаРукахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	               |	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	торо_РезервыНаСкладахОстатки.Серия КАК Серия,
	               |	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ РезервыПоЗаказу
	               |ИЗ
	               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	               |			,
	               |			(ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, Склад) В
	               |				(ВЫБРАТЬ
	               |					Заказы.ЗаказНаВнутреннееПотребление,
	               |					Заказы.Номенклатура,
	               |					Заказы.Характеристика,
	               |					Заказы.Склад
	               |				ИЗ
	               |					Заказы)) КАК торо_РезервыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Заказы.Номенклатура КАК Номенклатура,
	               |	Заказы.Характеристика КАК Характеристика,
	               |	ТоварыНаСкладах.Серия КАК Серия,
	               |	Заказы.КодСтроки КАК КодСтроки,
	               |	Заказы.Склад КАК Склад,
	               |	Заказы.КОформлениюОстаток КАК Потребность,
	               |	ТоварыНаСкладах.ВНаличииОстаток - ЕСТЬNULL(ВсеРезервы.КоличествоОстаток, 0) КАК СвободныйОстаток,
	               |	ЕСТЬNULL(ТоварыНаРуках.КоличествоОстаток, 0) + ЕСТЬNULL(Резервы.КоличествоОстаток, 0) КАК Обеспечено
	               |ИЗ
	               |	Заказы КАК Заказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыНаСкладах КАК ТоварыНаСкладах
	               |		ПО Заказы.Склад = ТоварыНаСкладах.Склад
	               |			И Заказы.Номенклатура = ТоварыНаСкладах.Номенклатура
	               |			И Заказы.Характеристика = ТоварыНаСкладах.Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеРезервы КАК ВсеРезервы
	               |		ПО Заказы.Склад = ВсеРезервы.Склад
	               |			И Заказы.Номенклатура = ВсеРезервы.Номенклатура
	               |			И Заказы.Характеристика = ВсеРезервы.Характеристика
	               |			И (ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) = ЕСТЬNULL(ВсеРезервы.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК ТоварыНаРуках
	               |		ПО Заказы.Склад = ТоварыНаРуках.Склад
	               |			И Заказы.Номенклатура = ТоварыНаРуках.Номенклатура
	               |			И Заказы.Характеристика = ТоварыНаРуках.Характеристика
	               |			И (ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) = ЕСТЬNULL(ТоварыНаРуках.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоЗаказу КАК Резервы
	               |		ПО (Заказы.Склад = ВсеРезервы.Склад)
	               |			И Заказы.Номенклатура = Резервы.Номенклатура
	               |			И Заказы.Характеристика = Резервы.Характеристика
	               |			И (ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) = ЕСТЬNULL(Резервы.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
	               |ГДЕ
	               |	ТоварыНаСкладах.ВНаличииОстаток - ЕСТЬNULL(ВсеРезервы.КоличествоОстаток, 0) > 0
	               |ИТОГИ
	               |	МИНИМУМ(Потребность),
	               |	СУММА(Обеспечено)
	               |ПО
	               |	Номенклатура,
	               |	Характеристика";
	Запрос.УстановитьПараметр("ЗаказНаВнутреннееПотребление", ЗаказНаВнутреннееПотребление);
	Если Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Серия", "ЗаказыНаВнутреннееПотреблениеОстатки.Серия");
	Иначе
		Запрос.УстановитьПараметр("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для выбранного документа-распоряжения нет доступных к резерву товаров.'"));
		Ошибка = Истина;
	Иначе
		Объект.Товары.Очистить();
		ВыборкаНоменклатур = РезЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатур.Следующий() Цикл
			ВыборкаХарактеристик = ВыборкаНоменклатур.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл
				НадоЗарезервировать = ВыборкаХарактеристик.Потребность - ВыборкаХарактеристик.Обеспечено;
				ВыборкаСерий = ВыборкаХарактеристик.Выбрать();
				Пока ВыборкаСерий.Следующий() Цикл
					Если НадоЗарезервировать <= 0 Тогда 
						Прервать;
					КонецЕсли;
					МожноЗарезервировать = Мин(НадоЗарезервировать, ВыборкаСерий.СвободныйОстаток);
					НоваяСтрока = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСерий);
					НоваяСтрока.Количество = МожноЗарезервировать;
					НоваяСтрока.КоличествоУпаковок = МожноЗарезервировать;
					НадоЗарезервировать = НадоЗарезервировать - МожноЗарезервировать;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление() 
	// Оформление серий
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Оформление упаковок
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Оформление характеристик
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивТиповНоменклаутры()
	масПараметр = Новый Массив();
	Для каждого текСтрока из Перечисления.ТипыНоменклатуры Цикл
		Если текСтрока = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ текСтрока = Перечисления.ТипыНоменклатуры.Работа Тогда Продолжить; КонецЕсли;
		масПараметр.Добавить(текСтрока);
	КонецЦикла;
	
	Возврат масПараметр;
КонецФункции

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(Адрес);
	
	Для каждого текСтрока из ТаблицаПодбора Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", 
			текСтрока.Номенклатура, текСтрока.Характеристика, текСтрока.Серия));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрока);
			НоваяСтрока.Количество = текСтрока.КоличествоУпаковок;
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + текСтрока.КоличествоУпаковок;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


