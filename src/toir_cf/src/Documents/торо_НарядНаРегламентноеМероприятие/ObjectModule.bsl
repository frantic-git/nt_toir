#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										// из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	торо_ЗаполнениеДокументов20.ЗаполнениеНаОсновании(Основание, ЭтотОбъект, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ФоИнтеграцияСПромБезопасностью = ПолучитьФункциональнуюОпцию("торо_ИнтеграцияСПромБезопасностью");
	ЕстьОпасныеРаботы = Ложь;
	Если ФоИнтеграцияСПромБезопасностью = Истина Тогда
		Для каждого текСтрока из РегламентныеМероприятия Цикл
			Если текСтрока.ОпаснаяРабота Тогда
				ЕстьОпасныеРаботы = Истина;
				Если Не ЗначениеЗаполнено(текСтрока.МестоПроведенияРабот) Тогда
					ШаблонСообщения = НСтр("ru='В табличной части ""Ремонтные работы"" в строке №%1 не заполнено поле ""Место проведения работ"", для опасных работ это поле должно быть заполнено. Проведение документа было отменено.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, текСтрока.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		масРолей = Новый Массив;

		Если ЕстьОпасныеРаботы Тогда
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Допускающий);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.ОтветственныйЗаПодготовкуОбъекта);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.РуководительРабот);
		Иначе
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Допускающий);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.ОтветственныйЗаПодготовкуОбъекта);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Наблюдающий);
		КонецЕсли;
		
		ЕстьВсеНужныеРоли = ПроверитьНаличиеНеобходимыхРолей(масРолей, Ответственные, ЕстьОпасныеРаботы);
		
		Если НЕ ЕстьВсеНужныеРоли Тогда 
			Отказ = Истина;
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Ответственные.Сотрудник");
		МассивНепроверяемыхРеквизитов.Добавить("Ответственные.ОтветственноеЛицо");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	СписокТЧ.Вставить("РегламентныеМероприятия", "Регламентные мероприятия");
	
	ШаблонСообщения = НСтр("ru = 'В табличной части ""%1"" нет строк.'");
	Для каждого текТЧ из СписокТЧ Цикл
		Если ЭтотОбъект[ТекТЧ.Ключ].Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекТЧ.Значение);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка заполнения табличных частей.
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(РемонтныеРаботы, Отказ);
	ПроверитьЗаполнениеТабличнойЧастиРегламентныеМероприятия(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(Отказ);

	Если Константы.торо_ЗапретитьПересечениеВремениРаботыСотрудниковСОдинаковойКвалификацией.Получить()
		И торо_ОбщегоНазначения.ПроверитьВремяРаботыСотрудников(ЭтотОбъект, "Исполнители") Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента;
	ШаблонСообщения = НСтр("ru = 'Есть непроведенный документ основание: %1'");
	
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	
	Запрос = Новый Запрос( "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка КАК Ссылка,
	                       |	торо_ГрафикРегламентныхМероприятийТОиР.Проведен КАК Проведен
	                       |ИЗ
	                       |	Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_ГрафикРегламентныхМероприятийТОиР
	                       |ГДЕ
	                       |	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка В(&МассивДокОсн)");
	
	
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Выборка.Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;		
	КонецЦикла;
		
	ШаблонСообщения = НСтр("ru = 'Для списка объектов регламентного мероприятия ""%1"" с видом ремонта ""%2"" отсутствуют строки в дереве ремонтных работ.'");
	Для Каждого СтрокаСРемонтом Из РегламентныеМероприятия Цикл
		МассивСтрок = РемонтныеРаботы.НайтиСтроки(Новый структура("РемонтыОборудования_ID", СтрокаСРемонтом.ID));
		Если МассивСтрок.Количество() = 0 Тогда			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСРемонтом.ОбъектРемонта, СтрокаСРемонтом.ВидРемонтныхРабот);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;			
		КонецЕсли;
	КонецЦикла;	
	
	ПроверитьДатуДокумента(Отказ);
	
	РегламентныеМероприятияТаблицаЗначений = РегламентныеМероприятия.Выгрузить(); 
	РемонтыОтсутствующиеВДокументахИсточниках = торо_Ремонты.ПроверитьНаличиеРемонтовВДокументахИсточникахПоIDРемонта(РегламентныеМероприятияТаблицаЗначений);
	
	Если НЕ РемонтыОтсутствующиеВДокументахИсточниках = Неопределено Тогда
		
		Для каждого Ремонт Из РемонтыОтсутствующиеВДокументахИсточниках Цикл
			ШаблонСообщения = НСтр("ru = 'Для списка объектов ""%1"" отсутствует соответствующий вид мероприятия в документе основании ""%2"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Ремонт.ОбъектРемонта, Ремонт.ДокументИсточник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);			
		КонецЦикла;
		
	КонецЕсли;	
	
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусРемонтовПриПроведении(ЭтотОбъект);
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
	
	ДвиженияПоРегистрам(РежимПроведения, Отказ);
	
	торо_МобильныеПриложенияУведомления.ОтправитьУведомлениеОНаряде(Ссылка, ДополнительныеСвойства.НовыйНаряд, Отказ);
	
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Не Отказ Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
		торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивОР = ОбщегоНазначения.ВыгрузитьКолонку(РегламентныеМероприятия, "ОбъектРемонта", Истина);
	ОбъектыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивОР);
	
	МассивВидовРемонта = ОбщегоНазначения.ВыгрузитьКолонку(РегламентныеМероприятия, "ВидРемонтныхРабот", Истина);
	ВидыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивВидовРемонта);
	
	ДополнительныеСвойства.Вставить("НовыйНаряд", НЕ Проведен);
	
	// Получение удаленных ремонтов при перепроведении документа. Используются при формировании записей
	// регистров торо_ПлановыеИсполнителиРемонтов, торо_ОбщиеДанныеПоРемонтам, торо_СвернутыеФактическиеДатыРемонтов.
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивIDДокумента = РегламентныеМероприятия.ВыгрузитьКолонку("ID");
		МассивУдаленныхID = торо_Ремонты.ПолучитьIDУдаленныхРемонтовДокумента(МассивIDДокумента, Ссылка);
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", МассивУдаленныхID);
	Иначе
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", Новый Массив());
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ПроверитьДатуДокумента(Отказ)
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	торо_ГрафикРегламентныхМероприятийТОиР.Дата КАК Дата
	                      |ИЗ
	                      |	Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_ГрафикРегламентныхМероприятийТОиР
	                      |ГДЕ
	                      |	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка В(&МассивДокОсн)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Дата <= Выборка.Дата Тогда
			ТекстСообщения = НСтр("ru = 'Дата документа должна быть больше даты документа-основания!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(ТаблицаРемонтныхРабот, Отказ)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота,РемонтыОборудования_ID");
	                                                              
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(Отказ)
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, "");
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиРегламентныеМероприятия(Отказ)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДатаНачала, ДатаОкончания");
	                                                              
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РегламентныеМероприятия", СтруктураОбязательныхПолей, Отказ, "");
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ)
	
	ТабРемРаб = ПодготовитьТаблицуПроведенияРемонтныхРабот();
	ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям(ТабРемРаб, РежимПроведения, Отказ);
	
	ТаблицаРемонтовОборудования = ПолучитьТаблицуРемонтовОборудования();
	
	РемонтыСЗаявками = ТаблицаРемонтовОборудования.Скопировать(Новый Структура("ЕстьЗаявка", Истина));
	РемонтыБезЗаявок = ТаблицаРемонтовОборудования.Скопировать(Новый Структура("ЕстьЗаявка", Ложь));	
	
	ТаблицаНеУчтенныхРабот = ТабНеУчтенныхРабот(ТабРемРаб, РемонтыСЗаявками.ВыгрузитьКолонку("ID"));
	ТаблицаРаботБезЗаявок = ПолучитьТаблицуРемонтныхРаботБезЗаявок(ТабРемРаб, РемонтыБезЗаявок.ВыгрузитьКолонку("ID"));
	ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТаблицаНеУчтенныхРабот, ТаблицаРаботБезЗаявок, РежимПроведения, Отказ);
	ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(ТабРемРаб, РежимПроведения, Отказ);
	ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам();
	ДвиженияПоРегистру_торо_НарядыПоРемонтам(РежимПроведения, Отказ);
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(ТаблицаРемонтныхРабот, РежимПроведения, Отказ)
	
	Движения.торо_ПроцентВыполненныхРабот.Записывать = Истина;
	
	Для каждого Стр Из ТаблицаРемонтныхРабот Цикл
	    Если ТипЗнч(Стр.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Движение = Движения.торо_ПроцентВыполненныхРабот.Добавить();
			Движение.Период = Дата;
			Движение.IDРемонта = Стр.IDРемонта;
			Движение.IDОперации = Стр.ID;
			Движение.Операция = Стр.РемонтнаяРабота;
			Движение.IDРодителя = Стр.Родитель_ID;
			Движение.Процент = Стр.Количество * 100;
			Движение.ВидДокумента = Перечисления.торо_ВидДокумента.НарядНаВыполнениеРегламентногоМероприятия;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьТаблицуРемонтовОборудования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID КАК ID
		|ПОМЕСТИТЬ ТабID
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабID.ID КАК ID,
		|	ЛОЖЬ КАК ЕстьЗаявка
		|ИЗ
		|	ТабID КАК ТабID";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТабНеУчтенныхРабот(ТабРемРаб, МассивID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.РемонтнаяРабота,
		|	Таб.IDРемонта,
		|	Таб.ID КАК IDОперации,
		|	Таб.Родитель_ID,
		|	Таб.ПроцентНевыполненныхРабот,
		|	Таб.Количество
		|ПОМЕСТИТЬ ТабРемонтныхРабот
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРемонтныхРабот.РемонтнаяРабота,
		|	ТабРемонтныхРабот.IDРемонта,
		|	ТабРемонтныхРабот.IDОперации,
		|	ТабРемонтныхРабот.Родитель_ID,
		|	ТабРемонтныхРабот.Количество,
		|	ТабРемонтныхРабот.ПроцентНевыполненныхРабот
		|ИЗ
		|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
		|ГДЕ
		|	ТабРемонтныхРабот.IDРемонта В(&IDРемонта)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРемонтныхРабот.IDРемонта,
		|	ТабРемонтныхРабот.IDОперации,
		|	ТабРемонтныхРабот.Родитель_ID,
		|	ТабРемонтныхРабот.Количество * 100 КАК ПроцентОперацийДок,
		|	ЕСТЬNULL(торо_ЗапланированныеРемонтныеРаботы.ПроцентОпераций, 0) КАК ПроцентОпераций,
		|	ТабРемонтныхРабот.ПроцентНевыполненныхРабот КАК ПроцентРемонта
		|ИЗ
		|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
		|		ПО ТабРемонтныхРабот.IDРемонта = торо_ЗапланированныеРемонтныеРаботы.IDРемонта
		|			И ТабРемонтныхРабот.IDОперации = торо_ЗапланированныеРемонтныеРаботы.IDОперации
		|			И ТабРемонтныхРабот.Родитель_ID = торо_ЗапланированныеРемонтныеРаботы.Родитель_ID
		|			И (ВЫРАЗИТЬ(торо_ЗапланированныеРемонтныеРаботы.Регистратор КАК Документ.торо_ЗаявкаНаРемонт) ССЫЛКА Документ.торо_ЗаявкаНаРемонт)
		|ГДЕ
		|	торо_ЗапланированныеРемонтныеРаботы.ПроцентОпераций < ТабРемонтныхРабот.Количество * 100";

	Запрос.УстановитьПараметр("Таб", ТабРемРаб);
	Запрос.УстановитьПараметр("IDРемонта", МассивID);
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Функция ПолучитьТаблицуРемонтныхРаботБезЗаявок(ТабРемРаб, МассивID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.РемонтнаяРабота,
	|	Таб.IDРемонта,
	|	Таб.ID КАК IDОперации,
	|	Таб.Родитель_ID,
	|	Таб.ПроцентНеВыполненныхРабот,
	|	Таб.Количество
	|ПОМЕСТИТЬ ТабРемонтныхРабот
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРемонтныхРабот.РемонтнаяРабота,
	|	ТабРемонтныхРабот.IDРемонта,
	|	ТабРемонтныхРабот.IDОперации,
	|	ТабРемонтныхРабот.Родитель_ID,
	|	ТабРемонтныхРабот.Количество,
	|	ТабРемонтныхРабот.ПроцентНеВыполненныхРабот КАК ПроцентРемонта
	|ИЗ
	|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
	|ГДЕ
	|	ТабРемонтныхРабот.IDРемонта В(&IDРемонта)";
	
	Запрос.УстановитьПараметр("Таб", ТабРемРаб);
	Запрос.УстановитьПараметр("IDРемонта", МассивID);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТабНеУчтенныхРабот, ТабРаботБезЗаявки, РежимПроведения, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабНеУчтенныхРабот Цикл
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.IDОперации;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийДок - СтрТаб.ПроцентОпераций;
		
	КонецЦикла;
	
	Для каждого СтрТаб Из ТабРаботБезЗаявки Цикл
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.IDОперации;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.ПроцентОпераций = СтрТаб.Количество * 100;
		Движение.ПроцентРемонта = СтрТаб.ПроцентРемонта;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуПроведенияРемонтныхРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтнаяРабота,
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Родитель_ID,
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.ID,
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Количество
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаПроведения = Запрос.Выполнить().Выгрузить();
	
	КЧ = Новый КвалификаторыЧисла(5, 2);
	МассивТипов = Новый Массив(1);
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(МассивТипов, , ,КЧ);
	ТаблицаПроведения.Колонки.Добавить("ПроцентНевыполненныхРабот", ОписаниеТиповЧ);
	
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповД = Новый ОписаниеТипов(МассивТипов, , ,КД);
	ТаблицаПроведения.Колонки.Добавить("ДатаНачалаРемонта", ОписаниеТиповД);
	
	Для каждого Строка Из РегламентныеМероприятия Цикл
		
		МассивСтрок = ТаблицаПроведения.НайтиСтроки(Новый Структура("IDРемонта",Строка.ID));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			СтрокаМассива.ДатаНачалаРемонта = Строка.ДатаНачала;
		КонецЦикла;
		
	КонецЦикла; 

	торо_Ремонты.ЗаполнитьПроцентыНевыполненныхРаботПоНормамВремени("", ТаблицаПроведения);
	
	РасставитьПроцентНаРодительскихУровнях("", ТаблицаПроведения); 
	
	Возврат ТаблицаПроведения;

КонецФункции

Процедура ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям(ТабРемРаб, РежимПроведения, Отказ)
	
	Движения.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		Движение = Движения.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.РемонтнаяРабота = СтрТаб.РемонтнаяРабота;
		Движение.ПроцентОпераций = СтрТаб.Количество * 100;
		Движение.ПроцентРемонта = СтрТаб.ПроцентНевыполненныхРабот;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам()
	Движения.торо_ВсеДокументыПоРемонтам.Записывать = Истина;
	Движения.торо_ВсеДокументыПоРемонтам.Очистить();
	
	Для каждого СтрокаТЧ Из РегламентныеМероприятия Цикл
	    Движение = Движения.торо_ВсеДокументыПоРемонтам.Добавить();
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументПоРемонту = Ссылка;
		Движение.ДатаДокумента = Дата;
		Движение.Организация = Организация;
		Движение.Подразделение = Подразделение;
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_НарядыПоРемонтам(РежимПроведения, Отказ)
	Движения.торо_НарядыПоРемонтам.Записывать = Истина;
	Для каждого СтрРемонта Из РегламентныеМероприятия Цикл
		Движение = Движения.торо_НарядыПоРемонтам.Добавить();
		Движение.Период = МоментВремени().Дата;
		Движение.IDРемонта = СтрРемонта.ID;
		Движение.ДокументНаряд = Ссылка;
		Движение.ВидРемонта = СтрРемонта.ВидРемонтныхРабот;
		ЗаполнитьЗначенияСвойств(Движение, СтрРемонта);
		ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект);
	КонецЦикла;
КонецПроцедуры

// Процедура устанавливает значение процента на родительских уровнях таблицы ремонтных работ акта.
//
// Параметры:
//  СтрокаДерева – строка дерева значений.
//  Процент      – число – устанавливаемый процент.
//
Процедура РасставитьПроцентНаРодительскихУровнях(ID_Поиска, ТаблицаПроведения)
	
	СуммаСПроцентомВыполнения = 0;
	
	МассивСтрок = ТаблицаПроведения.НайтиСтроки(Новый Структура("Родитель_ID", ID_Поиска));
	
	Для Каждого Элемент Из МассивСтрок Цикл
		
		РасставитьПроцентНаРодительскихУровнях(Элемент.ID, ТаблицаПроведения);
		
		СуммаСПроцентомВыполнения = СуммаСПроцентомВыполнения + Элемент.ПроцентНеВыполненныхРабот;
		
	КонецЦикла;
	
	Если СуммаСПроцентомВыполнения > 0 Тогда
		
		СтрокаТЗ = ТаблицаПроведения.Найти(ID_Поиска, "ID");
		Если Не СтрокаТЗ = Неопределено Тогда
			
			СтрокаТЗ.ПроцентНеВыполненныхРабот = СтрокаТЗ.ПроцентНеВыполненныхРабот * СуммаСПроцентомВыполнения / 100;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // РасставитьПроцентНаНижнихУровнях()

Функция ПроверитьНаличиеНеобходимыхРолей(масРолей, тз, ЕстьОпасныеРаботы)
	
	Результат = Истина;
	
	Для каждого ТекРоль из масРолей Цикл
		
		Если тз.Найти(ТекРоль, "ОтветственноеЛицо") = Неопределено Тогда
			Результат = Ложь;
			Если ЕстьОпасныеРаботы Тогда
				ШаблонСообщения = НСтр("ru = 'В документе присутствуют опасные работы и в табличной части ""Ответственные лица"" обязательно должен быть указан ""%1"". Проведение документа было отменено.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекРоль);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе 
				ШаблонСообщения = НСтр("ru = 'В табличной части ""Ответственные лица"" обязательно должен быть указан ""%1"". Проведение документа было отменено.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекРоль);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#КонецЕсли