#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_НарядНаРегламентноеМероприятие";
	КомандаПечати.Идентификатор = "НарядНаРегламентноеМероприятие";
	КомандаПечати.Представление = НСтр("ru = 'Наряд на выполнение регламентных мероприятий'");
	КомандаПечати.Обработчик = "торо_Печать.ЗапроситьУПользователяДополнительныеПараметрыПередПечатью";
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);	
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ИменаОбъектовМетаданных = РегистрыСведений.торо_ВводНаОсновании.ИменаДоступныхОбъектовМетаданныхДляВводаНаОсновании(
		 Метаданные.Документы.торо_НарядНаРегламентноеМероприятие.Имя);
		 
	Для Каждого ИмяОбъектаМетаданных Из ИменаОбъектовМетаданных Цикл
		Документы[ИмяОбъектаМетаданных].ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);		 
	КонецЦикла;		 
		
	торо_СозданиеНаОсновании.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
		
КонецПроцедуры

// Добавляет команду создания документа "Наряд на регламентное мероприятие".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.торо_НарядНаРегламентноеМероприятие) Тогда
        КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
        КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.торо_НарядНаРегламентноеМероприятие.ПолноеИмя();
        КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.торо_НарядНаРегламентноеМероприятие);
        КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить"; 
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "торо_ИспользоватьНарядыНаРегламентноеМероприятие";
        Возврат КомандаСоздатьНаОсновании;
	КонецЕсли; 
	
    Возврат Неопределено;
	
КонецФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НарядНаРегламентноеМероприятие") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"НарядНаРегламентноеМероприятие", 
		"Наряд на выполнение регламентных мероприятий", 
		ПечатьНарядНаВыполнениеРегМероприятий(МассивОбъектов, ПараметрыПечати),
		,
		"Документ.торо_НарядНаРегламентноеМероприятие.ПФ_MXL_НарядНаРегМероприятие");		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьНарядНаВыполнениеРегМероприятий(МассивОбъектов, ПараметрыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "торо_НарядНаРегламентноеМероприятие";
	ТабДок.ТолькоПросмотр = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.торо_НарядНаРегламентноеМероприятие.ПФ_MXL_НарядНаРегМероприятие");
	
	ИспользоватьКомиссии = Константы.торо_ИспользоватьКомиссии.Получить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тчРемонтыОборудования.Ссылка КАК Ссылка,
	|	тчРемонтыОборудования.Ссылка.Дата КАК Дата,
	|	тчРемонтыОборудования.Ссылка.Номер КАК Номер,
	|	тчРемонтыОборудования.Ссылка.Организация КАК Организация,
	|	тчРемонтыОборудования.Ссылка.Подразделение КАК Подразделение,
	|	тчРемонтыОборудования.Ссылка.Ответственный КАК Ответственный,
	|	тчРемонтыОборудования.ОбъектРемонта КАК ОР,
	|	тчРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	тчРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	|	тчРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	|	тчРемонтыОборудования.ОбъектРемонта.ИндивидуальноеОбслуживаниеОР КАК ИндивидуальноеОбслуживаниеОР,
	|	тчРемонтыОборудования.ID КАК ID";
	Если ИспользоватьКомиссии Тогда
		Запрос.Текст = Запрос.Текст +
		",
		|	тчРемонтыОборудования.Ссылка.Комиссия КАК Комиссия,
		|	тчРемонтыОборудования.Ссылка.Комиссия.Председатель КАК ПредседательКомиссии";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст +
	" ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК тчРемонтыОборудования
	|ГДЕ
	|	тчРемонтыОборудования.Ссылка В(&Ссылка)
	|	И тчРемонтыОборудования.ID В(&ID)
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(Ответственный)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Если ПараметрыПечати.Свойство("МассивID") Тогда
		Запрос.УстановитьПараметр("ID", ПараметрыПечати.МассивID);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И тчРемонтыОборудования.ID В(&ID)", "");
	КонецЕсли;
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	ЭтоПервый = Истина;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ВыборкаРемонтов = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаРемонтов.Следующий() Цикл
			
			Если НЕ ЭтоПервый Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ЭтоПервый = Ложь;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА тчРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации
			|			ТОГДА ВЫБОР
			|					КОГДА НЕ тчРемонтныеРаботы.РемонтнаяРабота.НаименованиеПолное = """"
			|						ТОГДА тчРемонтныеРаботы.РемонтнаяРабота.НаименованиеПолное
			|					ИНАЧЕ тчРемонтныеРаботы.РемонтнаяРабота.Наименование
			|				КОНЕЦ
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(тчРемонтныеРаботы.РемонтнаяРабота)
			|	КОНЕЦ КАК РемонтнаяРаботаДляПечати,
			|	тчРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
			|	тчРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
			|	ЕСТЬNULL(тчРемонтныеРаботы.РемонтнаяРабота.СодержаниеРабот, """") КАК СодержаниеРабот,
			|	тчРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
			|	тчРемонтныеРаботы.ID КАК ID,
			|	тчРемонтныеРаботы.Количество КАК Количество,
			|	тчРемонтныеРаботы.РемонтнаяРабота.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК тчРемонтныеРаботы
			|ГДЕ
			|	тчРемонтныеРаботы.Ссылка = &Ссылка
			|	И тчРемонтныеРаботы.РемонтыОборудования_ID = &ID
			|
			|УПОРЯДОЧИТЬ ПО
			|	Родитель_ID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Исполнители.Сотрудник КАК Сотрудник,
			|	Исполнители.Квалификация КАК Квалификация
			|ИЗ
			|	Документ.торо_НарядНаРегламентноеМероприятие.Исполнители КАК Исполнители
			|ГДЕ
			|	Исполнители.Ссылка = &Ссылка
			|	И Исполнители.РемонтыОборудования_ID = &ID";
			
			Запрос.УстановитьПараметр("Ссылка", ВыборкаДокументов.Ссылка);
			Запрос.УстановитьПараметр("Дата", ВыборкаДокументов.Дата);
			Запрос.УстановитьПараметр("ID", ВыборкаРемонтов.ID);
			РезЗапроса = Запрос.ВыполнитьПакет();
			
			тчРемРаботы = РезЗапроса[0].выгрузить();
			тчСотрудникиИКвалификация = РезЗапроса[1].выбрать();
			
			ЭтоИндивидуальноеОбслуживание = ВыборкаРемонтов.ИндивидуальноеОбслуживаниеОР;
			
			// для индивидуального обслуживания нужно выводить индивидуальные тех. карты
			Если НЕ ЭтоИндивидуальноеОбслуживание Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.ОбъектРемонта КАК ОбъектРемонта,
				|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.ОбъектРемонта.АдресМестонахождения КАК Местонахождение,
				|	НЕОПРЕДЕЛЕНО КАК НормативныйРемонт,
				|	ЛОЖЬ КАК ЭтоИндивидуальныйРемонт,
				|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.НомерПоПорядку КАК НомерПоПорядку
				|ПОМЕСТИТЬ ВТ_Ремонтов
				|ИЗ
				|	Документ.торо_НарядНаРегламентноеМероприятие.МероприятияОбъектов КАК торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов
				|ГДЕ
				|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.Ссылка = &Ссылка
				|	И торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.Мероприятие_ID = &ID
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Ремонтов.ОбъектРемонта КАК ОбъектРемонта,
				|	ВТ_Ремонтов.Местонахождение КАК Местонахождение,
				|	ВТ_Ремонтов.НормативныйРемонт КАК НормативныйРемонт,
				|	ВТ_Ремонтов.ЭтоИндивидуальныйРемонт КАК ЭтоИндивидуальныйРемонт,
				|	ВТ_Ремонтов.НомерПоПорядку КАК НомерПоПорядку
				|ИЗ
				|	ВТ_Ремонтов КАК ВТ_Ремонтов
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерПоПорядку
				|ИТОГИ
				|	МАКСИМУМ(ЭтоИндивидуальныйРемонт)
				|ПО
				|	НормативныйРемонт";
				
				ВыборкаОР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.ОбъектРемонта КАК ОбъектРемонта,
				|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.ОбъектРемонта.АдресМестонахождения КАК Местонахождение,
				|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.НомерПоПорядку КАК НомерПоПорядку
				|ПОМЕСТИТЬ ВТ_СписокОР
				|ИЗ
				|	Документ.торо_НарядНаРегламентноеМероприятие.МероприятияОбъектов КАК торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов
				|ГДЕ
				|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.Ссылка = &Ссылка
				|	И торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.Мероприятие_ID = &ID
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВТ_СписокОР.ОбъектРемонта КАК ОбъектРемонта,
				|	ВТ_СписокОР.Местонахождение КАК Местонахождение,
				|	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
				|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт,
				|	ВТ_СписокОР.НомерПоПорядку КАК НомерПоПорядку
				|ПОМЕСТИТЬ ВТ_ТабРемонтов
				|ИЗ
				|	ВТ_СписокОР КАК ВТ_СписокОР
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудованияУдаленные КАК торо_НормативныеРемонтыОборудованияУдаленные
				|			ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта
				|				И торо_НормативныеРемонтыОборудования.ВидРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ВидРемонта
				|				И торо_НормативныеРемонтыОборудования.ТиповойОР = торо_НормативныеРемонтыОборудованияУдаленные.ТиповойОР
				|		ПО ВТ_СписокОР.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
				|ГДЕ
				|	торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта ЕСТЬ NULL
				|	И торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия КАК ВидМероприятия,
				|	торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт КАК НормативныйРемонт
				|ПОМЕСТИТЬ ВТ_РемонтПоУмолчанию
				|ИЗ
				|	РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
				|ГДЕ
				|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов = &СписокОбъектов
				|	И торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия = &ВидРемонта
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_СписокОР.ОбъектРемонта КАК ОбъектРемонта,
				|	ВТ_СписокОР.Местонахождение КАК Местонахождение,
				|	ЕСТЬNULL(ВТ_ТабРемонтов.НормативныйРемонт, ЕСТЬNULL(ВТ_РемонтПоУмолчанию.НормативныйРемонт, ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяССылка))) КАК НормативныйРемонт,
				|	ВЫБОР
				|		КОГДА ВТ_ТабРемонтов.НормативныйРемонт ЕСТЬ NULL
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЭтоИндивидуальныйРемонт,
				|	ВТ_ТабРемонтов.НомерПоПорядку КАК НомерПоПорядку
				|ПОМЕСТИТЬ ВТ_Итог
				|ИЗ
				|	ВТ_СписокОР КАК ВТ_СписокОР
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТабРемонтов КАК ВТ_ТабРемонтов
				|		ПО ВТ_СписокОР.ОбъектРемонта = ВТ_ТабРемонтов.ОбъектРемонта
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РемонтПоУмолчанию КАК ВТ_РемонтПоУмолчанию
				|		ПО (ИСТИНА)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Итог.ОбъектРемонта КАК ОбъектРемонта,
				|	ВТ_Итог.Местонахождение КАК Местонахождение,
				|	ВТ_Итог.НормативныйРемонт КАК НормативныйРемонт,
				|	ВТ_Итог.ЭтоИндивидуальныйРемонт КАК ЭтоИндивидуальныйРемонт,
				|	ВТ_Итог.НомерПоПорядку КАК НомерПоПорядку
				|ИЗ
				|	ВТ_Итог КАК ВТ_Итог
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерПоПорядку,
				|	ЭтоИндивидуальныйРемонт,
				|	НормативныйРемонт
				|ИТОГИ
				|	МАКСИМУМ(ЭтоИндивидуальныйРемонт)
				|ПО
				|	НормативныйРемонт";
				
				Запрос.УстановитьПараметр("СписокОбъектов", ВыборкаРемонтов.ОР);
				Запрос.УстановитьПараметр("ВидРемонта", ВыборкаРемонтов.ВидРемонтныхРабот);
				
				ВыборкаОР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
			КонецЕсли;
			
			Если ИспользоватьКомиссии Тогда
				ЗапросКомиссии = Новый Запрос;
				ЗапросКомиссии.УстановитьПараметр("Комиссия", ВыборкаДокументов.Комиссия);
				ЗапросКомиссии.Текст = "ВЫБРАТЬ
				                      |	торо_КомиссииСоставКомиссии.ЧленКомиссии КАК ЧленКомиссии
				                      |ИЗ
				                      |	Справочник.торо_Комиссии.СоставКомиссии КАК торо_КомиссииСоставКомиссии
				                      |ГДЕ
				                      |	торо_КомиссииСоставКомиссии.Ссылка = &Комиссия";
				ТЗЧленыКомиссии = ЗапросКомиссии.Выполнить().Выгрузить();
			КонецЕсли;
			
			тчМатЗатраты = Новый ТаблицаЗначений;
			тчМатЗатраты.Колонки.Добавить("Наименование");
			тчМатЗатраты.Колонки.Добавить("Характеристика");
			тчМатЗатраты.Колонки.Добавить("ЕдИзм");
			тчМатЗатраты.Колонки.Добавить("Количество");
			
			тчИнструменты = Новый ТаблицаЗначений();
			тчИнструменты.Колонки.Добавить("Инструмент", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			тчИнструменты.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
			тчИнструменты.Колонки.Добавить("Наименование");
			тчИнструменты.Колонки.Добавить("ЕдИзм");
			тчИнструменты.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
			
			ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицыЗатрат(тчРемРаботы, тчМатЗатраты, тчИнструменты, ВыборкаРемонтов);
			
			// Начало вывода
			обШапка = Макет.ПолучитьОбласть("Шапка");
			
			обШапка.Параметры.Организация = торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(ВыборкаДокументов.Организация);
			обШапка.Параметры.Подразделение = ВыборкаДокументов.Подразделение;
			
			обШапка.Параметры.ДатаОткрытия = Формат(ВыборкаДокументов.Дата,"ДФ=dd.MM.yyyy");
			обШапка.Параметры.Номер = ВыборкаДокументов.Номер;
			
			обШапка.Параметры.ДатаНачала = Формат(ВыборкаРемонтов.ДатаНачала,"ДФ=dd.MM.yyyy");
			обШапка.Параметры.ДатаОкончания = Формат(ВыборкаРемонтов.ДатаОкончания,"ДФ=dd.MM.yyyy");
			
			ПерваяСтрока = Истина;
			Пока тчСотрудникиИКвалификация.Следующий() Цикл
				Если перваяСтрока Тогда
					ПерваяСтрока = Ложь;
					обШапка.Параметры.СотрудникИКвалификация = Строка(тчСотрудникиИКвалификация.Сотрудник) + " (" + тчСотрудникиИКвалификация.Квалификация + ")";
					обШапка.Параметры.Сотрудник = тчСотрудникиИКвалификация.Сотрудник;
					ТабДок.Вывести(обШапка);
					Продолжить;
				КонецЕсли;
				
				обСотрудник = Макет.ПолучитьОбласть("Сотрудник");
				обСотрудник.Параметры.СотрудникИКвалификация = Строка(тчСотрудникиИКвалификация.Сотрудник) + " (" + тчСотрудникиИКвалификация.Квалификация + ")";
				обСотрудник.Параметры.Сотрудник = тчСотрудникиИКвалификация.Сотрудник;
				
				ПроверитьИВывести(ТабДок, обСотрудник);
				
			КонецЦикла;
			
			Если ПерваяСтрока Тогда
				ТабДок.Вывести(обШапка);
			КонецЕсли;
			
			обОписаниеОР = Макет.ПолучитьОбласть("ОписаниеОР");
			обОписаниеОР.Параметры.НаименованиеСписка = ВыборкаРемонтов.ор;
			обОписаниеОР.Параметры.Описание = ВыборкаРемонтов.ВидРемонтныхРабот;
			ПроверитьИВывести(ТабДок, обОписаниеОР);
			
			Если ВыборкаОР.Количество() = 0 Тогда
				
				обШапкаТЧСписокОР = Макет.ПолучитьОбласть("ШапкаТЧСписокОР");
				ПроверитьИВывести(ТабДок, обШапкаТЧСписокОР);
				
				ПечатьНарядНаВыполнениеРегМероприятий_ВывестиТаблицыЗатрат(ТабДок, Макет, тчРемРаботы, тчМатЗатраты, тчИнструменты);
				
			КонецЕсли;
			
			КоличествоТехКарт = ВыборкаОР.Количество();
			НомерТехКарты = 1;
			
			// Обход группировки по различным ремонтам
			Пока ВыборкаОР.Следующий() Цикл
				ВыборкаОРДетали = ВыборкаОР.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				обШапкаТЧСписокОР = Макет.ПолучитьОбласть("ШапкаТЧСписокОР");
				ПроверитьИВывести(ТабДок, обШапкаТЧСписокОР);
				
				НомерПП = 1;
				Пока ВыборкаОРДетали.Следующий() Цикл
					обСтрокаТЧСписокОР = Макет.ПолучитьОбласть("СтрокаТЧСписокОР");
					обСтрокаТЧСписокОР.Параметры.Ном = НомерПП;
					обСтрокаТЧСписокОР.Параметры.Наименование = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ВыборкаОРДетали.ОбъектРемонта);
					обСтрокаТЧСписокОР.Параметры.Местонахождение = ВыборкаОРДетали.Местонахождение;
					
					НомерПП = НомерПП + 1;
					ПроверитьИВывести(ТабДок, обСтрокаТЧСписокОР);
				КонецЦикла;
				
				Если НЕ ВыборкаОР.ЭтоИндивидуальныйРемонт Тогда
					тчРемРаботыДляВывода = тчРемРаботы;
					тчМатЗатратыДляВывода = тчМатЗатраты;
					тчИнструментыДляВывода = тчИнструменты;
				Иначе
					
					тчРемРаботыДляВывода = тчРемРаботы.СкопироватьКолонки();
					тчМатЗатратыДляВывода = тчМатЗатраты.СкопироватьКолонки();
					тчИнструментыДляВывода = тчИнструменты.СкопироватьКолонки();
					
					ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицуРемРаботПоТехКарте(ВыборкаОР.НормативныйРемонт, тчРемРаботыДляВывода, ВыборкаРемонтов.ДатаНачала);
					ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицыЗатрат(тчРемРаботыДляВывода, тчМатЗатратыДляВывода, тчИнструментыДляВывода, ВыборкаРемонтов);
					
				КонецЕсли;
				
				ПечатьНарядНаВыполнениеРегМероприятий_ВывестиТаблицыЗатрат(ТабДок, Макет, тчРемРаботыДляВывода, тчМатЗатратыДляВывода, тчИнструментыДляВывода);
				
				Если НомерТехКарты < КоличествоТехКарт Тогда
					обРазделитель = Макет.ПолучитьОбласть("РазделительОР");
					ПроверитьИВывести(ТабДок, обРазделитель);
				КонецЕсли;
				НомерТехКарты = НомерТехКарты + 1;
				
			КонецЦикла;
			
			// Подвал
			обОтветственный = Макет.ПолучитьОбласть("Ответственный");
			обОтветственный.Параметры.Сотрудник = ВыборкаДокументов.Ответственный;
			обОтветственный.Параметры.Дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
			ПроверитьИВывести(ТабДок, обОтветственный);
			
			ПерваяСтрока = Истина;
			обИсполнительСЗаголовоком = Макет.ПолучитьОбласть("ИсполнительСЗаголовоком");
			
			тчСотрудникиИКвалификация.Сбросить();
			Пока тчСотрудникиИКвалификация.Следующий() Цикл
				Если ПерваяСтрока Тогда
					ПерваяСтрока = Ложь;
					обИсполнительСЗаголовоком.Параметры.Сотрудник = тчСотрудникиИКвалификация.Сотрудник;
					обИсполнительСЗаголовоком.Параметры.Дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
					ПроверитьИВывести(ТабДок, обИсполнительСЗаголовоком);
					Продолжить;
				КонецЕсли;
				
				обИсполнитель = Макет.ПолучитьОбласть("Исполнитель");
				обИсполнитель.Параметры.Сотрудник = тчСотрудникиИКвалификация.Сотрудник;
				обИсполнитель.Параметры.дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
				ПроверитьИВывести(ТабДок, обИсполнитель);
			КонецЦикла;
			
			Если ПерваяСтрока Тогда
				ПроверитьИВывести(ТабДок, обИсполнительСЗаголовоком);
			КонецЕсли;
			
			// Комиссия
			Если ИспользоватьКомиссии И ЗначениеЗаполнено(ВыборкаДокументов.ПредседательКомиссии) Тогда
				обПредседатель = Макет.ПолучитьОбласть("ПредседательКомиссии");
				обПредседатель.Параметры.ПредседательКомиссии = ВыборкаДокументов.ПредседательКомиссии;
				обПредседатель.Параметры.Дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
				ПроверитьИВывести(ТабДок, обПредседатель);
			КонецЕсли;
			
			Если ИспользоватьКомиссии И ТЗЧленыКомиссии.Количество() Тогда
				ПерваяСтрока = Истина;
				обЧленКомиссииСЗаголовком = Макет.ПолучитьОбласть("ЧленКомиссииСЗаголовком");
				
				Для Каждого Строка Из ТЗЧленыКомиссии Цикл
					Если ПерваяСтрока Тогда
						ПерваяСтрока = Ложь;
						обЧленКомиссииСЗаголовком.Параметры.ЧленКомиссии = Строка.ЧленКомиссии;
						обЧленКомиссииСЗаголовком.Параметры.Дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
						ПроверитьИВывести(ТабДок, обЧленКомиссииСЗаголовком);
						Продолжить;
					КонецЕсли;
					
					обЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
					обЧленКомиссии.Параметры.ЧленКомиссии = Строка.ЧленКомиссии;
					обЧленКомиссии.Параметры.дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
					ПроверитьИВывести(ТабДок, обЧленКомиссии);
				КонецЦикла;
				
				Если ПерваяСтрока Тогда
					ПроверитьИВывести(ТабДок, обЧленКомиссииСЗаголовком);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.КлючПараметровПечати = "торо_ПечатьНарядНаВыполнениеРегМероприятий";
	Возврат ТабДок;
	
КонецФункции

Процедура ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицуРемРаботПоТехКарте(ИдТехКарты, тчРемРаботы, ДатаНачалаРемонта, Родитель_ID = "", КоличествоТК = 1)
	
	ID = Новый УникальныйИдентификатор;
		
	ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(ИдТехКарты, ДатаНачалаРемонта);
	
	НоваяСтрока = тчРемРаботы.Добавить();
	НоваяСтрока.РемонтнаяРаботаДляПечати = Строка(ТехКарта);
	НоваяСтрока.РемонтнаяРабота = ИдТехКарты;
	НоваяСтрока.Количество = КоличествоТК;
	НоваяСтрока.СодержаниеРабот = "";
	НоваяСтрока.Родитель_ID = Родитель_ID;
	НоваяСтрока.ID = ID;
	
	Если ЗначениеЗаполнено(ТехКарта) Тогда
		Для Каждого СтрокаОперации Из ТехКарта.СписокОпераций Цикл
			Если ТипЗнч(СтрокаОперации.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				
				РеквизитыОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОперации.Операция, 
					"СодержаниеРабот, БазоваяЕдиницаИзмерения, НаименованиеПолное, Наименование");  
				
				НоваяСтрока = тчРемРаботы.Добавить();
				НоваяСтрока.РемонтнаяРаботаДляПечати = ?(ЗначениеЗаполнено(РеквизитыОперации.НаименованиеПолное), РеквизитыОперации.НаименованиеПолное, РеквизитыОперации.Наименование);
				НоваяСтрока.РемонтнаяРабота = СтрокаОперации.Операция;
				НоваяСтрока.СодержаниеРабот = РеквизитыОперации.СодержаниеРабот;
				НоваяСтрока.Количество = СтрокаОперации.Количество * КоличествоТК;
				НоваяСтрока.ЕдиницаИзмерения = РеквизитыОперации.БазоваяЕдиницаИзмерения;
				НоваяСтрока.Родитель_ID = ID;
				НоваяСтрока.ID = СтрокаОперации.ID;
			Иначе
				ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицуРемРаботПоТехКарте(СтрокаОперации.Операция, тчРемРаботы, ДатаНачалаРемонта, ID, СтрокаОперации.Количество);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицыЗатрат(тчРемРаботы, тчМатЗатраты, тчИнструменты, ВыборкаРемонтов)
	
	НайС = тчРемРаботы.НайтиСтроки(Новый Структура("Родитель_ID", ""));
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("РемонтнаяРабота");
	Дерево.Колонки.Добавить("РемонтыОборудования_ID");
	Дерево.Колонки.Добавить("ID");
	Дерево.Колонки.Добавить("Количество");
	Дерево.Колонки.Добавить("НомерОперацииПоПорядку");
	
	Для каждого текСтрока из НайС Цикл
		нс = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
		СобратьДерево(нс, тчРемРаботы);
	КонецЦикла;
	
	торо_ЗаполнениеДокументов20.ПроставитьНомераОпераций(Дерево);
	
	СтруктураТаблиц = Новый Структура("МатериальныеЗатраты, ИнструментыИТехника");
	стрЗатрат = торо_Ремонты.ПолучитьНормыЗатратИзВетвиДереваОпераций(Дерево, ВыборкаРемонтов.ДатаНачала, ВыборкаРемонтов.ДатаОкончания, ВыборкаРемонтов.ДатаНачала, СтруктураТаблиц,, Истина);
	
	Для каждого текСтрока из СтрЗатрат Цикл
		
		МатЗатраты = текСтрока.СтруктураТаблиц.МатериальныеЗатраты;
		Инструменты = текСтрока.СтруктураТаблиц.ИнструментыИТехника;
		
		Для каждого текСтрокаТЧ из МатЗатраты Цикл
			нс = тчМатЗатраты.Добавить();
			нс.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текСтрокаТЧ.Номенклатура, "НаименованиеПолное");
			нс.Характеристика = текСтрокаТЧ.Характеристика;
			нс.ЕдИзм = ?(ЗначениеЗаполнено(текСтрокаТЧ.ЕдиницаИзмерения), текСтрокаТЧ.ЕдиницаИзмерения, текСтрокаТЧ.Номенклатура.ЕдиницаИзмерения);
			нс.Количество = текСтрокаТЧ.Количество;
		КонецЦикла;
		
		Для каждого текСтрокаТЧ Из Инструменты Цикл
			нс = тчИнструменты.Добавить();
            ЗаполнитьЗначенияСвойств(нс, текСтрокаТЧ);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	"""" КАК IDРемонта,
	               |	"""" КАК Документ,
	               |	ТЗРемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ТЗРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТЗРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	               |	ТЗРемонтныеРаботы.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_РемонтныеРаботы
	               |ИЗ
	               |	&ТЗРемонтныеРаботы КАК ТЗРемонтныеРаботы
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗИнструментовТО.ID КАК ID,
	               |	ТЗИнструментовТО.Инструмент КАК ОбъектПотребности,
	               |	ТЗИнструментовТО.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТ_ИнструментыТО
	               |ИЗ
	               |	&ТЗИнструментовТО КАК ТЗИнструментовТО
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РемонтныеРаботы.IDРемонта КАК IDРемонта,
	               |	"""" КАК Документ,
	               |	ВТ_РемонтныеРаботы.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ВТ_РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ВТ_РемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	               |	ВТ_РемонтныеРаботы.ID КАК ID,
	               |	ЕСТЬNULL(ВТ_ИнструментыТО.ОбъектПотребности, НЕОПРЕДЕЛЕНО) КАК ОбъектПотребности,
	               |	ЕСТЬNULL(ВТ_ИнструментыТО.Количество, 0) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	               |ИЗ
	               |	ВТ_РемонтныеРаботы КАК ВТ_РемонтныеРаботы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИнструментыТО КАК ВТ_ИнструментыТО
	               |		ПО ВТ_РемонтныеРаботы.ID = ВТ_ИнструментыТО.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |ГДЕ
	               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
	               |ИТОГИ ПО
	               |	IDРемонта,
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
	               |	ВТ_ИтоговыеДанные.ID КАК ID,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
	               |	ВТ_ИтоговыеДанные.Количество КАК Количество
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные";
	
	Запрос.УстановитьПараметр("ТЗРемонтныеРаботы", тчРемРаботы);
	Запрос.УстановитьПараметр("ТЗИнструментовТО", тчИнструменты);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПотребностей = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщая = РезультатЗапроса[4].Выбрать();
	
	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("ОбъектПотребности", "Инструмент");
	ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяПлановаяПотребностьВИнструментах");
	ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяПлановаяПотребностьВИнструментах");
	ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.Номенклатура");
	
	ПотребностьИнструментов = торо_Ремонты.ОбновитьПотребностьПоРемонтам("", ВыборкаПотребностей, ВыборкаОбщая, ПараметрыРасчета, Ложь);
	
	тчИнструменты.Очистить();
	
	Для каждого СтрокаИнструментов Из ПотребностьИнструментов Цикл
		НоваяСтрокаИнструментов = тчИнструменты.Добавить();
		НоваяСтрокаИнструментов.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаИнструментов.Инструмент, "НаименованиеПолное");
		НоваяСтрокаИнструментов.ЕдИзм = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаИнструментов.Инструмент, "ЕдиницаИзмерения");
		НоваяСтрокаИнструментов.Количество = СтрокаИнструментов.Количество;
	КонецЦикла;
	
	тчМатЗатраты.Свернуть("Наименование, Характеристика, ЕдИзм", "Количество");
	
КонецПроцедуры

Процедура ПечатьНарядНаВыполнениеРегМероприятий_ВывестиТаблицыЗатрат(ТабДок, Макет, тчРемРаботы, тчМатЗатраты, тчИнструменты)
	
	обШапкаТЧСостав = Макет.ПолучитьОбласть("ШапкаТЧСостав");
	ПроверитьИВывести(ТабДок, обШапкаТЧСостав);
	
	СтрокиВКорне = тчРемРаботы.НайтиСтроки(Новый структура("Родитель_ID", ""));
	ВывестиРекурсивно(Макет, тчРемРаботы, СтрокиВКорне, ТабДок, "СтрокаТЧСостав", "");
	
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	Если ИспользоватьХарактеристики Тогда
		обШапкаТЧМатериалы = Макет.ПолучитьОбласть("ШапкаТЧМатериалыФО");
		обСтрокаТЧМатериалы = Макет.ПолучитьОбласть("СтрокаТЧМатериалыФО");
	Иначе 
		обШапкаТЧМатериалы = Макет.ПолучитьОбласть("ШапкаТЧМатериалы");
		обСтрокаТЧМатериалы = Макет.ПолучитьОбласть("СтрокаТЧМатериалы");
	КонецЕсли;
	ПроверитьИВывести(ТабДок, обШапкаТЧМатериалы);

	
	номерПП = 1;
	Для каждого ТекСтрока из тчМатЗатраты Цикл
		обСтрокаТЧМатериалы.Параметры.Ном = НомерПП;
		обСтрокаТЧМатериалы.Параметры.Наименование = ТекСтрока.Наименование;
		Если ИспользоватьХарактеристики Тогда
			обСтрокаТЧМатериалы.Параметры.Характеристика = ТекСтрока.Характеристика;
		КонецЕсли;
		обСтрокаТЧМатериалы.Параметры.ЕдИзм = ТекСтрока.ЕдИзм;
		обСтрокаТЧМатериалы.Параметры.Количество = ТекСтрока.Количество;
		
		НомерПП = НомерПП + 1;
		ПроверитьИВывести(ТабДок, обСтрокаТЧМатериалы);
	КонецЦикла;
	
	обШапкаТЧИнструменты = Макет.ПолучитьОбласть("ШапкаТЧИнструменты");
	ПроверитьИВывести(ТабДок, обШапкаТЧИнструменты);
	
	НомерПП = 1;
	Для каждого текСтрока из тчИнструменты Цикл
		обСтрокаТЧИнструменты = Макет.ПолучитьОбласть("СтрокаТЧИнструменты");
		обСтрокаТЧИнструменты.Параметры.Ном = НомерПП;
		обСтрокаТЧИнструменты.Параметры.Наименование = текСтрока.Наименование;
		обСтрокаТЧИнструменты.Параметры.ЕдИзм = текСтрока.ЕдИзм;
		обСтрокаТЧИнструменты.Параметры.Количество = текСтрока.Количество;
		
		НомерПП = НомерПП + 1;
		ПроверитьИВывести(ТабДок, обСтрокаТЧИнструменты);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьИВывести(ТабДок, ТекБлок)
	
	Если НЕ ТабДок.ПроверитьВывод(ТекБлок) Тогда
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДок.Вывести(ТекБлок);	
	
КонецПроцедуры

Процедура СобратьДерево(Корень, Выгрузка)
	
	НайС = Выгрузка.НайтиСтроки(Новый Структура("Родитель_ID", Корень.ID));
	Для каждого текСтрока из НайС Цикл
		нс = Корень.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
		СобратьДерево(нс, Выгрузка);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВывестиРекурсивно(Макет, ТЧ, Мас, ТабДок, ИмяОбластиВМакете, НомерРодителя)
	
	НомерСтроки = 1;
	Для каждого текСтрока из Мас Цикл
		НомерСтрокой = НомерРодителя + Строка(НомерСтроки);
		
		обСтрокаТЧСостав = Макет.ПолучитьОбласть(ИмяОбластиВМакете);
		обСтрокаТЧСостав.Параметры.Ном = НомерСтрокой;
		обСтрокаТЧСостав.Параметры.Наименование = текСтрока.РемонтнаяРаботаДляПечати;
		обСтрокаТЧСостав.Параметры.СодержаниеРабот = текСтрока.СодержаниеРабот;
		обСтрокаТЧСостав.Параметры.ЕдИзм = текСтрока.ЕдиницаИзмерения;
		обСтрокаТЧСостав.Параметры.Количество = текСтрока.Количество;
		ПроверитьИВывести(ТабДок, обСтрокаТЧСостав);
		
		подСтроки = тч.НайтиСтроки(Новый структура("Родитель_ID", текСтрока.ID));
		ВывестиРекурсивно(Макет, тч, подСтроки, ТабДок, ИмяОбластиВМакете, НомерСтрокой + ".");
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;
	
КонецПроцедуры

Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
	
	Реквизиты.Добавить("СтатусДокумента");
	Реквизиты.Добавить("ИсторияСтатусов.*");
	Реквизиты.Добавить("Согласующие.*");
		
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";

	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли