////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем МероприятиеУдаляется;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) <> Тип("Соответствие") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_НарядНаРегламентноеМероприятие;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента, Истина);
	// Согласование --
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_НарядНаВыполнениеРемонтныхРабот);
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);

	ОбновитьСписокМероприятияОбъектов();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ДокументыОснования");
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения		
	
	ИдентификаторСтрокиМероприятия = Элементы.РегламентныеМероприятия.ТекущаяСтрока;
	Если ИдентификаторСтрокиМероприятия <> Неопределено Тогда
		ТекущаяСтрокаМероприятия = Объект.РегламентныеМероприятия.НайтиПоИдентификатору(ИдентификаторСтрокиМероприятия);
		РемонтID = ?(ТекущаяСтрокаМероприятия = Неопределено, Неопределено, ТекущаяСтрокаМероприятия.ID);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, РемонтID); 
	КонецЕсли;
	
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Объект.РегламентныеМероприятия.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Для Каждого Строка Из Объект.РегламентныеМероприятия Цикл
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", Строка.ID);
		МассивИсполнителей = Объект.Исполнители.НайтиСтроки(СтруктураПоиска);
		МассивПодрядчиков = Объект.Подрядчики.НайтиСтроки(СтруктураПоиска);
		
		ПроверитьДаты("Исполнители", МассивИсполнителей, Строка, Отказ);
		ПроверитьДаты("Подрядчики", МассивПодрядчиков, Строка, Отказ);
		
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ШаблонСообщения = НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	Строка.НомерСтроки,Строка.ДатаНачала,Строка.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.Ответственные.ТекущиеДанные;
	Если Не (ОтменаРедактирования Или ТекДанные = Неопределено) тогда
	
		стрПоиска = Новый Структура("ОтветственноеЛицо");
		стрПоиска.ОтветственноеЛицо = ТекДанные.ОтветственноеЛицо;
		
		НайС = Объект.Ответственные.НайтиСтроки(стрПоиска);
		
		Если НайС.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Эта роль уже добавлена. Выберите другую.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегламентныеМероприятия
&НаКлиенте
Процедура РегламентныеМероприятияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
	Иначе
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, Неопределено);
	КонецЕсли;
	
	ОбновитьСписокМероприятияОбъектов();
	Если Не ТекущиеДанные = Неопределено Тогда
		Элементы.МероприятияОбъектовВизаулизация.ОтборСтрок = Новый ФиксированнаяСтруктура("Мероприятие_ID", ТекущиеДанные.ID);
	Иначе
		Элементы.МероприятияОбъектовВизаулизация.ОтборСтрок = Новый ФиксированнаяСтруктура("Мероприятие_ID", " ");
	КонецЕсли;
	
	УстановитьДоступностьКнопокИсполнителей();
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
	ДеревоРемонтныхРаботПриАктивизацииСтроки(Элементы.ДеревоРемонтныхРабот);
	
	Если Элементы.РемонтныеРаботыИСписокОбъектов.ТекущаяСтраница.Имя = "СписокОбъектов" Тогда 
		УстановитьОтборПоИсполнителям();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборРемонтов(Элементы.ПодборРемонтов);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПередУдалением(Элемент, Отказ)
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Если Не МероприятиеУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("РегламентныеМероприятияПередУдалениемЗавершение",ЭтотОбъект,Новый Структура("Элемент", Элемент)),
				 	  Вопрос, РежимДиалогаВопрос.ДаНет);
	    Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Строки = Элемент.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого идСтрока из Строки Цикл
			текСтрока = Объект.РегламентныеМероприятия.НайтиПоИдентификатору(идСтрока);
			
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			МероприятиеУдаляется = Истина;
			Объект.РегламентныеМероприятия.Удалить(текСтрока);
			МероприятиеУдаляется = Ложь;
		КонецЦикла;
		УправлениеФормой();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборРемонтов") И ВыбранноеЗначение.ПодборРемонтов = Истина 
		И НЕ ВыбранноеЗначение.ЭтоРемонтнаяРабота Тогда
		// Подбор ремонтов (ремонтные работы в другой ветке).
		
		Если ВыбранноеЗначение.МассивИДРемонтов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РемонтУжеДобавлен = Ложь;
		МассивИДДобавленныхРемонтов = Новый Массив;

		Для каждого ИдРемонта из ВыбранноеЗначение.МассивИДРемонтов Цикл
			НайденныеРемонты = Объект.РегламентныеМероприятия.НайтиСтроки(Новый Структура("ID", ИдРемонта));
			Если НайденныеРемонты.Количество() > 0 Тогда
				РемонтУжеДобавлен = Истина;
				МассивИДДобавленныхРемонтов.Добавить(ИдРемонта);
			КонецЕсли;
		КонецЦикла;
		
		Если РемонтУжеДобавлен Тогда
			Если ВыбранноеЗначение.МассивИДРемонтов.Количество() > 1 Тогда
				Вопрос = НСтр("ru = 'Некоторые из выбранных мероприятий уже добавлены. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			Иначе
				Вопрос = НСтр("ru = 'Это мероприятие уже добавлено. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			КонецЕсли;

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			СтруктураПараметров.Вставить("МассивИДДобавленныхРемонтов", МассивИДДобавленныхРемонтов);
			ОписаниеОповещения = Новый ОписаниеОповещения("РемонтыОборудованияОбработкаВыбораПослеВопроса", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(ОписаниеОповещения, Вопрос, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораЗавершение(ВыбранноеЗначение);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЭтоРемонтнаяРабота") И ВыбранноеЗначение.ЭтоРемонтнаяРабота = Истина Тогда 
		// Подбор ремонтных работ
		
		ОбработкаВыбораЗавершение(ВыбранноеЗначение);

	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот
&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество <= 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	Если МассивСтрТЧ.Количество() Тогда
		
		СтрТЧ = МассивСтрТЧ[0];
		КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
		Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
		СтрТЧ.Количество = ТекСтрока.Количество;
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		СтандартнаяОбработка = Ложь;
	    торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьКолонкиПараллельногоВыполненияТО(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы, ID_ПараллельнойОперации, ВыбранноеЗначение.СоответствиеРезультата);
		Модифицированность = Истина;
		
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
		ДатаОкончанияРемонта   = ТекРемонт.ДатаОкончания;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;
		ДатаОкончанияРемонта   = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта, ДатаОкончанияРемонта"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, СтрокаРодитель.Родитель_ID
	, ДатаНачалаРемонта
	, ДатаОкончанияРемонта);
	
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	РегламентныеМероприятияПриАктивизацииСтроки(Элементы.РегламентныеМероприятия);
	ВыделитьСтрокуДереваРемонтныхРабот(ИДВыбраннойСтроки);
	
	Модифицированность = Истина;
	
	УстановитьДоступностьКнопокИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0] 
		Или Элемент.ТекущиеДанные.ЭтоТехКарта Тогда
		Выполнение = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(Строка) Тогда
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Если ТекущаяСтрока.ЭтоТехкарта Тогда
			ПараметрыПеретаскивания.Действие 		   =  ДействиеПеретаскивания.Перемещение; 
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Строка = Неопределено Тогда
		
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Для каждого ЭлементКоллекции Из ПараметрыПеретаскивания.Значение Цикл
			ПеретаскиваемаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ЭлементКоллекции);
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ПеретаскиваемаяСтрока.ID));
			Если МассивСтрок.Количество() Тогда
				МассивСтрок[0].Родитель_ID = ТекущаяСтрока.ID;
				
				// Если случайно перетащили в ту же ТК, то параллельность убирать не нужно.
				Если Не ПеретаскиваемаяСтрока.Родитель_ID = ТекущаяСтрока.ID И ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
					МассивСтрок[0].ID_ПараллельнойОперации = "";
					торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.РемонтыОборудования_ID);
		ВыделитьСтрокуДереваРемонтныхРабот(ТекущаяСтрока.ID);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("Исполнители");
	СтруктураСвязанныхТЧ.Вставить("Подрядчики");
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");
 		
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
			
			ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("РемонтыОборудования_ID", Элементы.РегламентныеМероприятия.ТекущиеДанные.ID);
		
			СтрокиКУдалению = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				
				ТабличнаяЧасть.Удалить(Строка);
				
			КонецЦикла;		    
						
		КонецЦикла;

		Модифицированность = Истина;
		
		Отказ = Истина;

	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоРемонтныхРабот.ВыделенныеСтроки;
		МассивСтрокДляУдаления = Новый Массив;
		
		Для каждого Стр Из ВыделенныеСтроки Цикл 
			Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Стр);
			Если Строка <> Неопределено И Строка.РемонтнаяРабота <> "Ремонтные работы" Тогда 
				МассивСтрокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого Элемент Из МассивСтрокДляУдаления Цикл
			СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
			Элемент.ID, Элемент.РемонтыОборудования_ID, Элемент.Родитель_ID, Элемент.РемонтнаяРабота);
			УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи, СтруктураСвязанныхТЧ);
			
			СтрокаРодителя = Элемент.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда 
				СтрокаРодителя.ПолучитьЭлементы().Удалить(Элемент); 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
				торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации, СтрокаРодителя);
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
		Отказ = Истина; 
		
	КонецЕсли;
	УстановитьДоступностьКнопокИсполнителей();
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
	УстановитьОтборПоИсполнителям();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ID) 
		И Объект.РемонтныеРаботы.Количество() > 1 Тогда  
		
		торо_ДанныеФормыДеревоКлиентСервер.УпорядочитьРемонтныеРаботы(ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущееМероприятие = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите расположение ремонта!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТекущееМероприятие = Неопределено Тогда  
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт оборудования для добавления технологической операции!'"), 10);
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Истина;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		
		ТекущаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекущаяСтрока.РемонтнаяРабота = ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка");
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Ложь;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		
		НеЗаполненаРемонтнаяРабота = ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.РемонтнаяРабота);
		
		Если Не ОтменаРедактирования И НеЗаполненаРемонтнаяРабота Тогда
			
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
			
			Если РодительСтроки = Неопределено Тогда
				КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Иначе
				КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
			КонецЕсли;
			
			КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
		И Не ТекущиеДанные.РемонтнаяРабота.Пустая() Тогда
		
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
				
		ТекущееМероприятие = Элементы.РегламентныеМероприятия.ТекущиеДанные;
		
		Если РодительСтроки = Неопределено Тогда
			КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ТекущийРемонт_ID", ?(ТекущееМероприятие = Неопределено, "", ТекущееМероприятие.ID)); 
		ДанныеСтроки.Вставить("СтрокаРодитель_ID", РодительСтроки.ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРемонтыОборудования_ID", РодительСтроки.РемонтыОборудования_ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРодитель_ID", РодительСтроки.Родитель_ID);  
					
		ДеревоРемонтныхРаботОбработкаВыбораСервер(ТекущиеДанные.РемонтнаяРабота, ДанныеСтроки);
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
		
		РегламентныеМероприятияПриАктивизацииСтроки(Элементы.РегламентныеМероприятия);
		
		РодительСтроки = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоРемонтныхРабот.ПолучитьЭлементы(), "ID", РодительСтроки.ID);
		КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		ИндексПоследнегоЭлементаРодителя = КоллекцияЭлементовРодителя.Количество() - 1;
		
		ДобавленныйЭлемент = КоллекцияЭлементовРодителя.Получить(ИндексПоследнегоЭлементаРодителя);
		
		Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ДобавленныйЭлемент.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодрядчики
&НаКлиенте
Процедура ПодрядчикиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда 
			Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
			Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекСтрокаИсполнитель = Элементы.Подрядчики.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Контрагент",
									  ТекСтрокаИсполнитель.ID,
									  ТекСтрокаИсполнитель.РемонтыОборудования_ID, 
									  ТекСтрокаИсполнитель.Контрагент);
									  
	Если Объект.Подрядчики.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указать одного исполнителя дважды для одного ремонта или операции!'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для ремонтов!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаРемонта = Элементы.РегламентныеМероприятия.ТекущиеДанные;
			ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
			ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители
&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	Если НЕ ОтменаРедактирования Тогда
		
		Если НоваяСтрока Тогда
			ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
			Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда 
				Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
				Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
			КонецЕсли;
		КонецЕсли;
		
		ТЧ = Объект.РегламентныеМероприятия;
		ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.РегламентныеМероприятия.ТекущиеДанные.ID);
		торо_ЗаполнениеДокументов.ВыполнитьАвтоподставлениеСотрудникаИКвалификации(Элемент.ТекущиеДанные.Сотрудник, Элемент.ТекущиеДанные.Квалификация, ДатаНачалаРемонта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);	
	Иначе
		ЗаполнитьИсполнителей(ВыбранноеЗначение);
		Для каждого Строка Из Объект.Исполнители Цикл
			Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаНачала) И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаОкончания) Тогда
				СтрокаРемонта = Элементы.РегламентныеМероприятия.ТекущиеДанные;
				Элемент.ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
				Элемент.ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТЧ = Объект.РегламентныеМероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.РегламентныеМероприятия.ТекущиеДанные.ID);
	Квалификация = Элементы.Исполнители.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ = Объект.РегламентныеМероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.РегламентныеМероприятия.ТекущиеДанные.ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораСотрудниковСКвалификацией(Элемент, ЭтотОбъект, Элементы.Исполнители.ТекущиеДанные.Квалификация, ДатаНачалаРемонта, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиКвалификацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТЧ = Объект.РегламентныеМероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.РегламентныеМероприятия.ТекущиеДанные.ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораКвалификацийСотрудника(Элементы.Исполнители.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиКвалификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ = Объект.РегламентныеМероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.РегламентныеМероприятия.ТекущиеДанные.ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораКвалификацийСотрудника(Элемент, ЭтотОбъект, Элементы.Исполнители.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТЧ = Объект.РегламентныеМероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.РегламентныеМероприятия.ТекущиеДанные.ID);
	Квалификация = Элементы.Исполнители.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиКвалификацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТЧ = Объект.РегламентныеМероприятия;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.РегламентныеМероприятия.ТекущиеДанные.ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораКвалификацийСотрудника(Элементы.Исполнители.ТекущиеДанные.Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиВремяРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", Новый Структура("ПродолжительностьВСекундах", ТекДанные.ВремяРаботы), Элементы.Исполнители,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаНачалаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РассчитатьВремя(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаОкончанияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РассчитатьВремя(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования
&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа =ДоступныеТипы;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
				Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
					Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
					СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)   	
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ТекущийРемонт = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	Если ТекущийРемонт <> Неопределено И ЗначениеЗаполнено(ТекущийРемонт.ДатаНачала) Тогда 
		ДатаОтбора = ТекущийРемонт.ДатаНачала;
	Иначе
		ДатаОтбора = ТекущаяДата();
	КонецЕсли;

	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", 
		Новый Структура("МножественныйВыбор, ДатаОтбора, Отбор", 
		Истина, ДатаОтбора, Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"))), 
		Элементы.ДеревоРемонтныхРабот);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ДокументыОснования = Новый СписокЗначений;
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ДокументыОснования.Добавить(СтрокаДО.ДокументОснование);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ДокументыОснования", ДокументыОснования);
	
	ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот",
		ПараметрыФормы, Элементы.РегламентныеМероприятия, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.Исполнители Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.Исполнители.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеРемонты(Команда)
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.Исполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.Исполнители.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.Исполнители.Очистить();
		КонецЕсли;
		ЗаполнитьИсполнителейПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "Исполнители");
	Для каждого Строка Из Объект.Исполнители Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.Подрядчики Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.Подрядчики.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.Подрядчики.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.Подрядчики);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.Подрядчики.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.Подрядчики.Очистить();
		КонецЕсли;
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	Для каждого Строка Из Объект.Исполнители Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляДокумента(Команда)
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.Исполнители);
	стрПараметров.Вставить("ВидПодбора", "ПоДокументу");
	стрПараметров.Вставить("ID", Неопределено);
	стрПараметров.Вставить("РемонтыОборудования_ID", Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.Исполнители,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляОперации(Команда)
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов = Неопределено тогда
		ID_Отбора = Неопределено;
	Иначе
		МасИД = Новый Массив;
		ID_Отбора = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасИД, ТекСтрокаДереваРемонтов.ПолучитьЭлементы());
		ID_Отбора.Добавить(ТекСтрокаДереваРемонтов.ID);
		
		Для каждого текСтрока из МасИД цикл
			ID_Отбора.Добавить(текСтрока.ID);
		КонецЦикла;
	КонецЕсли;
	
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.Исполнители);
	стрПараметров.Вставить("ВидПодбора", "ПоОперации");
	стрПараметров.Вставить("ID", ID_Отбора);
	стрПараметров.Вставить("РемонтыОборудования_ID", ID_ОтбораРемонтов);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.Исполнители,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей1(Команда)
		
	ПараметрыОткрытия = Новый Структура("Ссылка, МассивИсполнителей, НарядРегламентный", Объект.Ссылка, ПолучитьМассивСтруктурИсполнителей(), Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаАвтоматическогоЗаполненияИсполнителей", ЭтаФорма);
	ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаАвтозаполненияИсполнителей",ПараметрыОткрытия, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаСервере 
Процедура ОбновитьСписокМероприятияОбъектов()
	
	таб = Объект.МероприятияОбъектов.Выгрузить(,"ОбъектРемонта, Мероприятие_ID, НомерПоПорядку");
	таб.Свернуть("ОбъектРемонта, Мероприятие_ID, НомерПоПорядку");
	таб.Сортировать("НомерПоПорядку Возр");
	
	МероприятияОбъектовВизаулизация.Очистить();
	МероприятияОбъектовВизаулизация.Загрузить(Таб);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	
	ПодборРемонтов(Элементы.ПодборРемонтов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("Исполнители, Подрядчики");
	
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РегламентныеМероприятия.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РегламентныеМероприятия.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			СтрокиМО = Объект.МероприятияОбъектов.НайтиСтроки(Новый Структура("Мероприятие_ID", ОчереднаяСтрока.ID));
			
			Для каждого СтрокаМО Из СтрокиМО Цикл
				Объект.МероприятияОбъектов.Удалить(СтрокаМО);
			КонецЦикла;
			
			ОбновитьСписокМероприятияОбъектов();
			Объект.РегламентныеМероприятия.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
				
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, Ремонт_ID));
					
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
		СтрокиМО = Объект.МероприятияОбъектов.НайтиСтроки(Новый Структура("Мероприятие_ID", Ремонт_ID));
		
		Для каждого СтрокаМО Из СтрокиМО Цикл
			Объект.МероприятияОбъектов.Удалить(СтрокаМО);
		КонецЦикла;
		ОбновитьСписокМероприятияОбъектов();
	КонецЕсли;
	
	Если Элементы.РегламентныеМероприятия.ТекущаяСтрока = Неопределено 
		И Объект.РегламентныеМероприятия.Количество() > 0 Тогда
		Элементы.РегламентныеМероприятия.ТекущаяСтрока = Объект.РегламентныеМероприятия[0].ПолучитьИдентификатор();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(ТекущиеЗначения, СтруктураТабличныхЧастей)

	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
		ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
		
		СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			ТабличнаяЧасть.Удалить(Элемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
	ПараметрыПоиска.Вставить("Родитель_ID", ТекущиеЗначения.ID);
			
	МассивПодчиненныхСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрДерева Из МассивПодчиненныхСтрок Цикл
		СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктураДляПередачи, СтруктураТабличныхЧастей);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИсполнителям()
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов <> Неопределено Тогда
		
		ID_Отбора = ТекСтрокаДереваРемонтов.ID;
		
		Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
			ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
			
			// Собственные исполнители
			Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Подрядчики.
			Элементы.Подрядчики.ОтборСтрок  = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
		Иначе
			
			// Собственные исполнители
			Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Подрядчики
			Элементы.Подрядчики.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
		КонецЕсли;
		
	ИначеЕсли ТекСтрокаРемонтовОборудования <> Неопределено Тогда
		
		ID_Отбора = ТекСтрокаРемонтовОборудования.ID;
		
		// Собственные исполнители
		Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ID_Отбора);
		
		// Подрядчики
		Элементы.Подрядчики.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ID_Отбора);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителей(Адрес)
	
	Если Адрес = Неопределено Тогда возврат; КонецЕсли;
	
	тз = ПолучитьИзВременногоХранилища(Адрес);
	
	стрОтбора = Новый Структура("РемонтыОборудования_ID, ID");
	
	Для каждого текСтрока из Тз Цикл
		ЗаполнитьЗначенияСвойств(стрОтбора, текСтрока);
		НайС = Объект.Исполнители.НайтиСтроки(стрОтбора);
		
		Для каждого ТезЗапись из НайС Цикл
			Объект.Исполнители.Удалить(ТезЗапись);
			Модифицированность = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого текСтрока из Тз Цикл
		нс = Объект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
	КонецЦикла;	
	
КонецПроцедуры 

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаКлиенте
Процедура ОбработкаАвтоматическогоЗаполненияИсполнителей(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		Объект.Исполнители.Очистить();
		Для каждого СтрокаМассива Из Результат Цикл
			НС = Объект.Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаМассива);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСтруктурИсполнителей()
	Массив = Новый Массив;
	
	Для каждого СтрокаРемонтовОборудования Из Объект.РегламентныеМероприятия Цикл
		
		МассивСтрокРемонныхРабот = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID));
		
		Для каждого СтрокаРемонтныхРабот Из МассивСтрокРемонныхРабот Цикл
			
			МассивИсполнителей = Объект.Исполнители.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, ID", СтрокаРемонтовОборудования.ID, СтрокаРемонтныхРабот.ID));
			
			Для каждого СтрокаИсполнителя Из МассивИсполнителей Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				СтруктураСтроки.Вставить("Квалификация"          , СтрокаИсполнителя.Квалификация);
				СтруктураСтроки.Вставить("ДатаНачала"            , СтрокаИсполнителя.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончания"         , СтрокаИсполнителя.ДатаОкончания);
				СтруктураСтроки.Вставить("Сотрудник"             , СтрокаИсполнителя.Сотрудник);
				СтруктураСтроки.Вставить("ВремяРаботы"             , СтрокаИсполнителя.ВремяРаботы);
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			Если Не ТипЗнч(СтрокаРемонтныхРабот.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт")
				И Не МассивИсполнителей.Количество() > 0 Тогда // Нужно отразить хотя бы тех операции.
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				
				СтруктураСтроки.Вставить("Квалификация");
				СтруктураСтроки.Вставить("ДатаНачала");
				СтруктураСтроки.Вставить("ДатаОкончания");
				СтруктураСтроки.Вставить("ВремяРаботы");
				СтруктураСтроки.Вставить("СуммаКНачислению");
				СтруктураСтроки.Вставить("Сотрудник");
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции	

&НаСервере
Процедура ПроверитьДаты(ИмяТЧ, СтрокиТЧ, СтрокаРемонта, Отказ)
	Для Каждого Строка Из СтрокиТЧ Цикл
		Если Не ЗначениеЗаполнено(Строка.ДатаНачала) Или Не ЗначениеЗаполнено(Строка.ДатаОкончания) Тогда
			Возврат;
		КонецЕсли;
		
		Исполнитель = ?(ИмяТЧ = "Исполнители", Строка.Сотрудник, Строка.Контрагент);
		
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" у исполнителя %2 дата начала не может быть больше даты окончания (%3 - %4).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРемонта.ОбъектРемонта, Исполнитель, Строка.ДатаНачала, Строка.ДатаОкончания);
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ТекстСообщения = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура РемонтыОборудованияОбработкаВыбораПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивИДРемонтов = ДополнительныеПараметры.МассивИДДобавленныхРемонтов;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого ЭлементМассива из МассивИДРемонтов Цикл
			ОчиститьСвязанныеТабличныеЧасти(, , ЭлементМассива);
		КонецЦикла;
		
		ОбработкаВыбораЗавершение(ДополнительныеПараметры.ВыбранноеЗначение);
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте 
Процедура ОбработкаВыбораЗавершение(ВыбранноеЗначение)
	
	СтруктураВозврата = РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение.АдресХранилища);
	
	Если СтруктураВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделитьСтрокуРемонтовОборудования(СтруктураВозврата.IDРемонтаДляАктивизации);
	РегламентныеМероприятияПриАктивизацииСтроки(Элементы.РегламентныеМероприятия);
	Модифицированность = Истина;
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Функция РемонтыОборудованияОбработкаВыбораСервер(АдресХранилища)

	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыбранноеЗначение = ПолучитьИзВременногоХранилища(АдресХранилища);
	
    IDРемонтаДляАктивизации = Неопределено;
	МассивСтруктурВозврата = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(Неопределено, ЭлементМассива, Объект, Объект.РегламентныеМероприятия, Объект.РемонтныеРаботы, Объект.ДокументыОснования, Неопределено);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
		ЗаполнитьСписокОбъектовПоТехОперации(ЭлементМассива);
	КонецЦикла;	
	
	Если ВыбранноеЗначение.Количество() = 1 Тогда
		IDРемонтаДляАктивизации = ВыбранноеЗначение[0].СтрокаРемонтовОборудования.ID;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.Исполнители Цикл
		Если Не ЗначениеЗаполнено(Строка.ВремяРаботы) Тогда
			Строка.ВремяРаботы = Строка.ДатаОкончания - Строка.ДатаНачала;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДобавленныеКолонкиТаблиц();

	Возврат Новый Структура("IDРемонтаДляАктивизации", IDРемонтаДляАктивизации);
	
КонецФункции

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.РегламентныеМероприятия, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.РегламентныеМероприятия, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	ОбновитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаКлиенте 
Процедура РассчитатьВремя(IDСтроки)
	ТекущиеДанные = Объект.Исполнители.НайтиПоИдентификатору(IDСтроки);
	ТекущиеДанные.ВремяРаботы = ТекущиеДанные.ДатаОкончания - ТекущиеДанные.ДатаНачала;
	ТекущиеДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТекущиеДанные.ВремяРаботы);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДобавленныеКолонкиТаблиц()

	Для каждого Строка Из Объект.Исполнители Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуРемонтовОборудования(ИДРемонта)
	
	Если ЗначениеЗаполнено(ИДРемонта) Тогда
		Массивстрок = Объект.РегламентныеМероприятия.НайтиСтроки(Новый Структура("ID", ИДРемонта));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.РегламентныеМероприятия.ТекущаяСтрока = Идентиф;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.РегламентныеМероприятия.ТекущаяСтрока = Неопределено Тогда
		Если Объект.РегламентныеМероприятия.Количество() > 0 Тогда
			Элементы.РегламентныеМероприятия.ТекущаяСтрока = Объект.РегламентныеМероприятия[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуДереваРемонтныхРабот(ИДОперации)
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Если ЗначениеЗаполнено(ИДОперации) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ЭлементыДереваРемРабот, ИДОперации, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыДереваРемРабот.Количество() > 0 Тогда
		Элементы.ДеревоРемонтныхРабот.Развернуть(ЭлементыДереваРемРабот[0].ПолучитьИдентификатор(),Истина);
		Если Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ЭлементыДереваРемРабот[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСписокОбъектовПоТехОперации(ТехОперация)
	Если ТипЗнч(ТехОперация) = Тип("Структура") И Объект.МероприятияОбъектов.НайтиСтроки(Новый Структура("Мероприятие_ID", ТехОперация.СтрокаРемонтовОборудования.ID)).Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&МероприятиеID КАК ID,
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_МаршрутыРегламентныхМероприятий.НомерПоПорядку КАК НомерПоПорядку
		|ПОМЕСТИТЬ ТабОР
		|ИЗ
		|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
		|ГДЕ
		|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов = &СписокОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабОР.ID КАК ID,
		|	ВЫБОР
		|		КОГДА торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВыпМероприятия,
		|	ТабОР.ОбъектРемонта КАК ОбъектРемонта,
		|	ТабОР.НомерПоПорядку КАК НомерПоПорядку
		|ИЗ
		|	ТабОР КАК ТабОР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыполненныеМероприятияОбъектов КАК торо_ВыполненныеМероприятияОбъектов
		|		ПО ТабОР.ID = торо_ВыполненныеМероприятияОбъектов.ID
		|			И ТабОР.ОбъектРемонта = торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта";
		
		Запрос.УстановитьПараметр("СписокОбъектов", ТехОперация.СтрокаРемонтовОборудования.ОбъектРемонта);
		Запрос.УстановитьПараметр("МероприятиеID", ТехОперация.СтрокаРемонтовОборудования.ID);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НС = Объект.МероприятияОбъектов.Добавить();
			НС.ОбъектРемонта = Выборка.ОбъектРемонта;
			НС.Мероприятие_ID = Выборка.ID;
			НС.НомерПоПорядку = Выборка.НомерПоПорядку;
			
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	УстановитьДоступностьКнопокРемонтныхРабот();
	УстановитьДоступностьКнопокИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокРемонтныхРабот()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавить");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехКарту");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехОперацию");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборОпераций");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборПоБригадамДляОперации");
	СписокЭлементов.Добавить("УказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("ГруппаЗаполнить");
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.РегламентныеМероприятия,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокИсполнителей()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ИсполнителиДобавить");
	СписокЭлементов.Добавить("ИсполнителиЗаполнитьИсполнителей");
	СписокЭлементов.Добавить("ПодрядчикиДобавить");
	СписокЭлементов.Добавить("ИсполнителиПодборПоБригадамДляДокумента");
	
	КоличествоЭлементов = ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество();
	
	Если КоличествоЭлементов > 0 Тогда		
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество(),СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	Иначе
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(КоличествоЭлементов,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	КонецЕсли;

КонецПроцедуры

МероприятиеУдаляется = Ложь; 

#КонецОбласти