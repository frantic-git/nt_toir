#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 

Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа
Перем ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов;

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	торо_ЗаполнениеДокументов20.ЗаполнениеНаОсновании(Основание, ЭтотОбъект, Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
		
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	МассивНепроверяемыхРеквизитов.Добавить("МатериальныеЗатраты.ХарактеристикаНоменклатуры");
	Если ФОИспользоватьХарактеристикиНоменклатуры = Истина Тогда
		ПараметрыПроверки = Новый Структура("СуффиксХарактеристики, ИмяТЧ", "Номенклатуры", "МатериальныеЗатраты");
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;

	ПроверитьДублиИсполнителей(Отказ);
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	СписокТЧ.Вставить("РемонтыОборудования", "Ремонты оборудования");
	
	ШаблонСообщения = НСтр("ru = 'В табличной части ""%1"" нет строк.'");
	Для каждого текТЧ из СписокТЧ Цикл
		Если ЭтотОбъект[ТекТЧ.Ключ].Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекТЧ.Значение);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" с видом ремонта ""%2"" отсутствуют строки в дереве ремонтных работ.'");
	Для Каждого СтрокаСРемонтом Из РемонтыОборудования Цикл
		МассивСтрок = РемонтныеРаботы.НайтиСтроки(Новый структура("РемонтыОборудования_ID", СтрокаСРемонтом.ID));
		Если МассивСтрок.Количество() = 0 Тогда			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСРемонтом.ОбъектРемонта, СтрокаСРемонтом.ВидРемонтныхРабот);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;			
		КонецЕсли;
	КонецЦикла;

	// Проверка заполнения табличных частей.
	ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(РемонтныеРаботы, Отказ);
	ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиТрудовыеЗатраты(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиСерийныеЗапчасти(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиИсполнители(Отказ); 
	
	Если Константы.торо_ЗапретитьПересечениеВремениРаботыСотрудниковСОдинаковойКвалификацией.Получить()
		И торо_ОбщегоНазначения.ПроверитьВремяРаботыСотрудников(ЭтотОбъект, "ТрудовыеЗатраты") Тогда 
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ФОВводНаОснованииПроведенного = Константы.торо_ВводПотребленияНаОснованииПроведенногоАкта.Получить();
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ФОВводНаОснованииПроведенного Тогда
		ПроверитьНаличиеВведенныхНаОснованииВнутренныхПотреблений(Отказ);
	КонецЕсли; 
	
	МассивОР = ОбщегоНазначения.ВыгрузитьКолонку(РемонтыОборудования, "ОбъектРемонта", Истина);
	ОбъектыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивОР);
	
	МассивВидовРемонта = ОбщегоНазначения.ВыгрузитьКолонку(РемонтыОборудования, "ВидРемонтныхРабот", Истина);
	ВидыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивВидовРемонта);
	
	// Получение удаленных ремонтов при перепроведении документа. Используются при формировании записей
	// регистров торо_ПлановыеИсполнителиРемонтов, торо_ОбщиеДанныеПоРемонтам, торо_СвернутыеФактическиеДатыРемонтов.
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивIDДокумента = РемонтыОборудования.ВыгрузитьКолонку("ID");
		МассивУдаленныхID = торо_Ремонты.ПолучитьIDУдаленныхРемонтовДокумента(МассивIDДокумента, Ссылка);
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", МассивУдаленныхID);
	Иначе
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", Новый Массив());
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ШаблонСообщения = НСтр("ru = 'Есть непроведенный документ основание: %1'");
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования,"ДокументОснование");
	Запрос = Новый Запрос(	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	торо_ВнешнееОснованиеДляРабот.Ссылка КАК Ссылка,
							|	торо_ВнешнееОснованиеДляРабот.Проведен КАК Проведен
							|ИЗ
							|	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
							|ГДЕ
							|	торо_ВнешнееОснованиеДляРабот.Ссылка В(&МассивДокОсн)
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|
							|ВЫБРАТЬ
							|	торо_ВыявленныеДефекты.Ссылка,
							|	торо_ВыявленныеДефекты.Проведен
							|ИЗ
							|	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
							|ГДЕ
							|	торо_ВыявленныеДефекты.Ссылка В(&МассивДокОсн)
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|
							|ВЫБРАТЬ
							|	торо_ЗаявкаНаРемонт.Ссылка,
							|	торо_ЗаявкаНаРемонт.Проведен
							|ИЗ
							|	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
							|ГДЕ
							|	торо_ЗаявкаНаРемонт.Ссылка В(&МассивДокОсн)
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|
							|ВЫБРАТЬ
							|	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка,
							|	торо_НарядНаВыполнениеРемонтныхРабот.Проведен
							|ИЗ
							|	Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
							|ГДЕ
							|	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка В(&МассивДокОсн)
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|
							|ВЫБРАТЬ
							|	торо_ПланГрафикРемонта.Ссылка,
							|	торо_ПланГрафикРемонта.Проведен
							|ИЗ
							|	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
							|ГДЕ
							|	торо_ПланГрафикРемонта.Ссылка В(&МассивДокОсн)");
	
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Выборка.Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьЗавершенностьОстановочных(Отказ);
	
	ПроверитьДатуДокумента(Отказ);
	
	РемонтыОборудованияТаблицаЗначений = РемонтыОборудования.Выгрузить(); 
	РемонтыОтсутствующиеВДокументахИсточниках = торо_Ремонты.ПроверитьНаличиеРемонтовВДокументахИсточникахПоIDРемонта(РемонтыОборудованияТаблицаЗначений);
	
	Если НЕ РемонтыОтсутствующиеВДокументахИсточниках = Неопределено Тогда
		
		Для каждого Ремонт Из РемонтыОтсутствующиеВДокументахИсточниках Цикл
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" отсутствует соответствующий ремонт в документе основании ""%2"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Ремонт.ОбъектРемонта, Ремонт.ДокументИсточник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		УстановитьУправляемыеБлокировки();
		торо_ПроцентыВыполнения.СоздатьДокументыПлановыхЗатрат(РемонтыОборудования, РемонтныеРаботы, Ложь);
		ДвиженияПоРегистрам(РежимПроведения, Отказ);
	КонецЕсли;
	
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусРемонтовПриПроведении(ЭтотОбъект);
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовРемонта(Ссылка);
	
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Ссылка, РемонтыОборудования.ВыгрузитьКолонку("ID"));
	Если МассивIDДляБлокировки <> Неопределено И МассивIDДляБлокировки.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Невозможно отменить проведение документа ""%1"", так как он используется в акте приемки оборудования!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
		торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовПриОтменеПроведения(ЭтотОбъект);
		УдалениеПроведенияПлановыхЗатрат();
		торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗавершенностьОстановочных(Отказ)
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	РемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		               |	РемонтыОборудования.ID КАК ID,
		               |	РемонтыОборудования.ЗавершитьРемонт КАК ЗавершитьРемонт
		               |ПОМЕСТИТЬ РемонтыОборудования
		               |ИЗ
		               |	&РемонтыОборудования КАК РемонтыОборудования
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, ) КАК торо_ОстановочныеРемонтыСрезПоследних
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		               |			ПО торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого = торо_ЗавершенныеРемонтныеРаботы.ID
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования1
		               |			ПО торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого = торо_АктОВыполненииЭтапаРаботРемонтыОборудования1.ID
		               |				И (торо_АктОВыполненииЭтапаРаботРемонтыОборудования1.ЗавершитьРемонт)
		               |		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID = торо_ОстановочныеРемонтыСрезПоследних.IDОсновного
		               |			И (торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт)
		               |			И (НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан)
		               |ГДЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования1.ID ЕСТЬ NULL
		               |	И торо_ЗавершенныеРемонтныеРаботы.ID ЕСТЬ NULL";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("РемонтыОборудования", РемонтыОборудования.Выгрузить());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			Отказ = Истина;
			Пока Выборка.Следующий() Цикл
				ШаблонСообщения = НСтр("ru = 'Ремонт с видом <%1> по объекту <%2> за период <%3 - %4> является остановочным. Для основного завершены не все зависимые ремонты!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонтныхРабот,Выборка.ОбъектРемонта,Выборка.ДатаНачала,Выборка.ДатаОкончания);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// закрытие предписаний (по таблице ремонты оборудования)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтыОборудования.Выгрузить(Новый Структура("ЗакрываетПредписание",Истина),"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// закрытие предписаний (по таблице закрываемых предписаний)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗакрываемыеПредписания.Выгрузить(,"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// подготовка таблицы проведения (по списку ремонтных работ)
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ВыполняемыеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтныеРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "РемонтыОборудования_ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDОперации","ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Родитель_ID","Родитель_ID");
	
	// подготовка таблицы проведения (по списку ремонтных работ)
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтныеРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "РемонтыОборудования_ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDОперации","ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Родитель_ID","Родитель_ID");
	
	// движения по регистру РегистрСведений.торо_ВыполненныеРемонтныеРаботы
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВыполненныеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтныеРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "РемонтыОборудования_ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDОперации","ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Родитель_ID","Родитель_ID");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ПроверитьДатуДокумента(Отказ)
	
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	Запрос = Новый Запрос ("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	торо_ВнешнееОснованиеДляРабот.Дата КАК Дата
	                       |ИЗ
	                       |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	                       |ГДЕ
	                       |	торо_ВнешнееОснованиеДляРабот.Ссылка В(&МассивДокОсн)
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	торо_ВыявленныеДефекты.Дата
	                       |ИЗ
	                       |	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	                       |ГДЕ
	                       |	торо_ВыявленныеДефекты.Ссылка В(&МассивДокОсн)
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	торо_ЗаявкаНаРемонт.Дата
	                       |ИЗ
	                       |	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	                       |ГДЕ
	                       |	торо_ЗаявкаНаРемонт.Ссылка В(&МассивДокОсн)
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	торо_НарядНаВыполнениеРемонтныхРабот.Дата
	                       |ИЗ
	                       |	Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
	                       |ГДЕ
	                       |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка В(&МассивДокОсн)
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	торо_ПланГрафикРемонта.Дата
	                       |ИЗ
	                       |	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	                       |ГДЕ
	                       |	торо_ПланГрафикРемонта.Ссылка В(&МассивДокОсн)
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	Дата УБЫВ");
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Дата <= Выборка.Дата Тогда
			ТекстСообщения = НСтр("ru = 'Дата документа должна быть больше даты документа-основания!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

Процедура ПроверитьНаличиеВведенныхНаОснованииВнутренныхПотреблений(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
				   |	И торо_ИнтеграцияДокументов.ДокументЕРП.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'На основании этого документа уже имеются проведенные документы!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "МатериальныеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МатериальныеЗатраты", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты()

// Проверяет правильность заполнения строк табличной части "ТрудовыеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТрудовыеЗатраты(Отказ)
	
	ИмяТабличнойЧасти = "ТрудовыеЗатраты";
	
	СтруктураОбязательныхПолей = Новый Структура("Сотрудник");
	Если Константы.торо_ЗапретитьПроведениеАктовСИсполнителямиБезКвалификаций.Получить() Тогда
		СтруктураОбязательныхПолей.Вставить("Квалификация");
	КонецЕсли;
	Если Константы.торо_ЗапретитьПроведениеАктовБезВремениРаботыИсполнителей.Получить() Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаНачала");
		СтруктураОбязательныхПолей.Вставить("ДатаОкончания");
		СтруктураОбязательныхПолей.Вставить("ВремяРаботы");
	КонецЕсли;
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "СерийныеЗапчасти".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСерийныеЗапчасти(Отказ)
	
	ИмяТабличнойЧасти = "СерийныеЗапчасти";
	
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, СтатусДвиженияСерийныхЗЧ, НоменклатураНовая, СтатусДвиженияНовойЗЧ");
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ИсполнителиПоРемонтам".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиИсполнители(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Исполнитель");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ИсполнителиПоРемонтам", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры 

Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта,ВидРемонтныхРабот,ДатаНачала,ДатаОкончания");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтыОборудования", СтруктураОбязательныхПолей, Отказ, "");
	
	// Проверка существования дефектов в документах-основаниях (выявленнх дефектах).
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ИДДефекта КАК ИДДефекта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник КАК ДокументИсточник,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.НомерСтроки
	|ПОМЕСТИТЬ ВТ_РемонтыОборудования
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументИсточник,
	|	ИДДефекта,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВыявленныеДефектыСписокДефектов.ID КАК ID,
	|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта,
	|	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент,
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК ДокументИсточник
	|ПОМЕСТИТЬ ВТ_СписокДефектов
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	|ГДЕ
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_РемонтыОборудования.ДокументИсточник
	|			ИЗ
	|				ВТ_РемонтыОборудования КАК ВТ_РемонтыОборудования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументИсточник,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтыОборудования.ID,
	|	ВТ_РемонтыОборудования.ОбъектРемонта,
	|	ВТ_РемонтыОборудования.ИДДефекта,
	|	ВТ_РемонтыОборудования.ДокументИсточник,
	|	ВТ_РемонтыОборудования.НомерСтроки
	|ИЗ
	|	ВТ_РемонтыОборудования КАК ВТ_РемонтыОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокДефектов КАК ВТ_СписокДефектов
	|		ПО ВТ_РемонтыОборудования.ДокументИсточник = ВТ_СписокДефектов.ДокументИсточник
	|			И ВТ_РемонтыОборудования.ИДДефекта = ВТ_СписокДефектов.ID
	|			И ВТ_РемонтыОборудования.ОбъектРемонта = ВТ_СписокДефектов.ОтказавшийЭлемент
	|ГДЕ
	|	ВТ_СписокДефектов.ОбъектРемонта ЕСТЬ NULL 
	|	И ВТ_РемонтыОборудования.ДокументИсточник ССЫЛКА Документ.торо_ВыявленныеДефекты";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ВыборкаОшибок = Результат.Выбрать();
	Пока ВыборкаОшибок.Следующий() Цикл
		ШаблонСообщения = НСтр("ru = 'Дефект объекта ремонта ""%1"" удален из документа-основания ""%2""'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаОшибок.ОбъектРемонта, ВыборкаОшибок.ДокументИсточник);
		ИндексСтроки = ВыборкаОшибок.НомерСтроки - 1;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.РемонтыОборудования["+ИндексСтроки+"].ОбъектРемонта");
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(ТаблицаРемонтныхРабот, Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ)
	
	ТаблицаПроведения			= ПодготовитьТаблицуПроведения();
	ТаблицаЗапчастей			= ПодготовитьТаблицуЗапчастей();
	ТаблицаМатериальныхЗатрат 	= ПодготовитьТаблицуМатериальныхЗатрат(ТаблицаПроведения);
	ТаблицаТрудовыхЗатрат		= ПодготовитьТаблицуТрудовыхЗатрат(ТаблицаПроведения);
	ТаблицаПодрядчиков		    = ИсполнителиПоРемонтам.Выгрузить();
	ТаблицаРемонтныхРабот		= ПодготовитьТаблицуКонечныхЭлементовРемонтныхРабот();
	
	ДвиженияПоРегистру_торо_ЗатратыПоИсполнителямВыполненныхРемонтов(РежимПроведения, ТаблицаПодрядчиков, Отказ);
	
	ДвиженияПоРегистру_торо_АктыПоРемонтам(РежимПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботы(РежимПроведения, ТаблицаПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(РежимПроведения, ТаблицаПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ВыполненныеРемонтныеРаботы(РежимПроведения, ТаблицаПроведения, Отказ);
	
	// Движение по регистру "торо_ЗавершенныеРемонтныеРаботы".
	ДвиженияПоРегистру_торо_ЗавершенныеРемонтныеРаботы(РежимПроведения, Отказ);
	
	// Движение по регистру "торо_ИсторияЗапчастейОбъектаРемонта".
	ДвиженияПоРегистру_торо_ИсторияЗапчастейОбъектаРемонта(РежимПроведения, ТаблицаЗапчастей, Отказ);
	
	// Движение по регистру "торо_фактическиеМатериальныеЗатратыРемонтныхРабот".
	ДвиженияПоРегистру_торо_фактическиеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ);
	
	// Движение по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
	ДвиженияПоРегистру_торо_фактическиеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ);
	
	ДвиженияПоРегистру_торо_ФактическиеЗатратыЗапчастей(РежимПроведения, ТаблицаЗапчастей, Отказ);
	
	ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(РежимПроведения, ТаблицаРемонтныхРабот, Отказ);
	
	ТаблицаВО = СформироватьТаблицуВнешнихОснований();
	ДвиженияПоРегистру_торо_ВнешниеОснованияДляРабот(РежимПроведения, ТаблицаВО, Отказ);
	
	ДвиженияПоРегистру_торо_ГарантийностьРемонтов();
	
	ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам();
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(РежимПроведения, ТаблицаРемонтныхРабот, Отказ)
	
	Если Не Отказ Тогда
		
		Движения.торо_ПроцентВыполненныхРабот.Записывать = Истина;
		
		Для Каждого Запись ИЗ ТаблицаРемонтныхРабот Цикл
			Движение = Движения.торо_ПроцентВыполненныхРабот.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
			Движение.Период = Дата;
			Движение.ВидДокумента = Перечисления.торо_ВидДокумента.АктОВыполненииЭтапаРабот;
		КонецЦикла;
		
		Движения.торо_ПроцентВыполненныхРабот.Записать(Истина);
		
		// проверка превышения выполнения плана
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ПроцентВыполненныхРабот.IDРемонта КАК IDРемонта,
		|	торо_ПроцентВыполненныхРабот.IDОперации КАК IDОперации,
		|	торо_ПроцентВыполненныхРабот.Операция КАК Операция,
		|	торо_ПроцентВыполненныхРабот.IDРодителя КАК IDРодителя,
		|	торо_ПроцентВыполненныхРабот.Процент КАК Процент
		|ПОМЕСТИТЬ ВТ_ДанныеРегистра
		|ИЗ
		|	РегистрНакопления.торо_ПроцентВыполненныхРабот КАК торо_ПроцентВыполненныхРабот
		|ГДЕ
		|	торо_ПроцентВыполненныхРабот.IDРемонта В(&IDРемонта)
		|	И торо_ПроцентВыполненныхРабот.IDОперации В(&IDОперации)
		|	И торо_ПроцентВыполненныхРабот.ВидДокумента В(&ВидыДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПроцентВыполненныхРабот.IDРемонта КАК IDРемонта,
		|	торо_ПроцентВыполненныхРабот.IDОперации КАК IDОперации
		|ИЗ
		|	ВТ_ДанныеРегистра КАК торо_ПроцентВыполненныхРабот
		|ГДЕ
		|	торо_ПроцентВыполненныхРабот.Процент > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПроцентВыполненныхРабот.IDРемонта КАК IDРемонта,
		|	торо_ПроцентВыполненныхРабот.IDОперации КАК IDОперации,
		|	торо_ПроцентВыполненныхРабот.Операция КАК Операция,
		|	торо_ПроцентВыполненныхРабот.IDРодителя КАК IDРодителя,
		|	СУММА(торо_ПроцентВыполненныхРабот.Процент) КАК Процент
		|ИЗ
		|	ВТ_ДанныеРегистра КАК торо_ПроцентВыполненныхРабот
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_ПроцентВыполненныхРабот.IDРемонта,
		|	торо_ПроцентВыполненныхРабот.Операция,
		|	торо_ПроцентВыполненныхРабот.IDОперации,
		|	торо_ПроцентВыполненныхРабот.IDРодителя
		|
		|ИМЕЮЩИЕ
		|	СУММА(торо_ПроцентВыполненныхРабот.Процент) < 0";

		Запрос.УстановитьПараметр("IDРемонта", ТаблицаРемонтныхРабот.ВыгрузитьКолонку("IDРемонта"));
		Запрос.УстановитьПараметр("IDОперации", ТаблицаРемонтныхРабот.ВыгрузитьКолонку("IDОперации")); 
		
		МассивВидовДокументов = Новый Массив;
		МассивВидовДокументов.Добавить(Перечисления.торо_ВидДокумента.ПлановыеЗатраты);
		МассивВидовДокументов.Добавить(Перечисления.торо_ВидДокумента.ЗаявкаНаРемонт);
		МассивВидовДокументов.Добавить(Перечисления.торо_ВидДокумента.ЗакрытиеЗаявокИРемонтов);
		МассивВидовДокументов.Добавить(Перечисления.торо_ВидДокумента.АктОВыполненииЭтапаРабот);
		Запрос.УстановитьПараметр("ВидыДокументов", МассивВидовДокументов);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если НЕ РезультатЗапроса[1].Пустой() И НЕ РезультатЗапроса[2].Пустой() Тогда
			ВыборкаПревышения = РезультатЗапроса[2].Выбрать();
			Пока ВыборкаПревышения.Следующий() Цикл
				ШаблонСообщения = НСтр("ru = 'По операции %1 превышен план на %2%%'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаПревышения.Операция, -ВыборкаПревышения.Процент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли; 

	КонецЕсли; 
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботы(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ВыполняемыеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстаток;
		ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстаток;
				
		Если НЕ ЗавершитьРемонтныеРаботы  Тогда
			
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				ВыполненоОперации = СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот / СтрТаб.КолОперацийВТехКарте;
				
				ПроцентОперацииДляЗаписи = Мин(ВыполненоОперации, СтрТаб.ПроцентОперацийОстаток);
				ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстаток * СтрТаб.ПроцентВыполненияРабот / 100;
			Иначе
				
				ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстаток;
				
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстаток Тогда
					ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстаток;
				Иначе
					ПроцентОперацииДляЗаписи = СтрТаб.Количество * 100;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроцентОперацииДляЗаписи = 0 И ПроцентРемонтаДляЗаписи = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.торо_ВыполняемыеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.РемонтнаяРабота = СтрТаб.РемонтнаяРабота;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		
		Движение.ПроцентОпераций = ПроцентОперацииДляЗаписи;
		Движение.ПроцентРемонта  = ПроцентРемонтаДляЗаписи;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстатокЗаплРем;
		ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстатокЗаплРем;
				
		Если НЕ ЗавершитьРемонтныеРаботы  Тогда
			
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстатокЗаплРем Тогда
					ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстатокЗаплРем;
				Иначе
					ПроцентОперацииДляЗаписи = СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот;
				КонецЕсли;
				
				ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстатокЗаплРем * СтрТаб.ПроцентВыполненияРабот / 100;
				
			Иначе
				
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстатокЗаплРем Тогда
					ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстатокЗаплРем;
				Иначе
					ПроцентОперацииДляЗаписи = СтрТаб.Количество * 100;
				КонецЕсли;
				
				ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстатокЗаплРем;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроцентОперацииДляЗаписи = 0 И ПроцентРемонтаДляЗаписи = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		
		Движение.ПроцентОпераций = ПроцентОперацииДляЗаписи;
		Движение.ПроцентРемонта	 = ПроцентРемонтаДляЗаписи;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВыполненныеРемонтныеРаботы(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ВыполненныеРемонтныеРаботы.Записывать = Истина;
	
	Если ЗавершитьРемонтныеРаботы Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВремТаб.РемонтыОборудования_ID КАК IDРемонта,
		|	ВремТаб.ID КАК IDОперации,
		|	ВремТаб.Родитель_ID
		|ПОМЕСТИТЬ Таб
		|ИЗ 
		|	&Таб КАК ВремТаб
		|
		|;
		|
		|ВЫБРАТЬ
		|	торо_ВыполненныеРемонтныеРаботыСрезПоследних.IDРемонта,
		|	торо_ВыполненныеРемонтныеРаботыСрезПоследних.IDОперации,
		|	торо_ВыполненныеРемонтныеРаботыСрезПоследних.Родитель_ID
		|ИЗ
		|	РегистрСведений.торо_ВыполненныеРемонтныеРаботы.СрезПоследних(, (IDОперации, IDРемонта, Родитель_ID) В (ВЫБРАТЬ Таб.IDОперации, Таб.IDРемонта, Таб.Родитель_ID ИЗ Таб КАК Таб)) КАК торо_ВыполненныеРемонтныеРаботыСрезПоследних";
		
		Запрос.УстановитьПараметр("Таб", ТабРемРаб);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТабЗакрытыхРабот = РезультатЗапроса.Выгрузить();
		
	КонецЕсли;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		ДелатьДвижение = Ложь;
		Если ЗавершитьРемонтныеРаботы Тогда
			МассивСтрок = ТабЗакрытыхРабот.НайтиСтроки(Новый Структура("IDОперации, IDРемонта, Родитель_ID", СтрТаб.ID, СтрТаб.РемонтыОборудования_ID, СтрТаб.Родитель_ID));
			Если МассивСтрок.Количество() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗавершитьРемонтныеРаботы Тогда
			ПроцентВыполнения = (100 - (СтрТаб.ПроцентОперацийОстатокЗаплРем - СтрТаб.ПроцентВыполненияРабот)) * СтрТаб.Количество;
			ДелатьДвижение = Истина;
		Иначе
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				Если СтрТаб.ПроцентВыполненияРабот = 100 Тогда
					ПроцентВыполнения = 100;
					ДелатьДвижение = Истина;
				КонецЕсли;
			Иначе
				Если СтрТаб.Выполнено Тогда
					ПроцентВыполнения = 100;
					ДелатьДвижение = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДелатьДвижение Тогда 
			Движение = Движения.торо_ВыполненныеРемонтныеРаботы.Добавить();
			Движение.Период = Дата;
			Движение.IDОперации = СтрТаб.ID;
			Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
			Движение.Родитель_ID = СтрТаб.Родитель_ID;
			Движение.ПроцентВыполнения = ПроцентВыполнения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_АктыПоРемонтам(РежимПроведения, Отказ)
	Движения.торо_АктыПоРемонтам.Записывать = Истина;
	Для каждого СтрРемонта Из РемонтыОборудования Цикл
		Движение = Движения.торо_АктыПоРемонтам.Добавить();
		Движение.Период = МоментВремени().Дата;
		Движение.IDРемонта = СтрРемонта.ID;
		Движение.ДокументАкт = Ссылка;
		Движение.ВидРемонта = СтрРемонта.ВидРемонтныхРабот;
		Движение.Завершен = СтрРемонта.ЗавершитьРемонт;
		ЗаполнитьЗначенияСвойств(Движение, СтрРемонта);
		ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект);
	КонецЦикла;		
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам()
	Движения.торо_ВсеДокументыПоРемонтам.Записывать = Истина;
	Движения.торо_ВсеДокументыПоРемонтам.Очистить();
	
	Для каждого СтрокаТЧ Из РемонтыОборудования Цикл
	    Движение = Движения.торо_ВсеДокументыПоРемонтам.Добавить();
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументПоРемонту = Ссылка;
		Движение.ДатаДокумента = Дата;
		Движение.Организация = Организация;
		Движение.Подразделение = Подразделение;
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ЗавершенныеРемонтныеРаботы".
//
Процедура ДвиженияПоРегистру_торо_ЗавершенныеРемонтныеРаботы(РежимПроведения, Отказ)
	
	Для Каждого СтрокаРО Из РемонтыОборудования Цикл
		
		Если ЗавершитьРемонтныеРаботы ИЛИ СтрокаРО.ЗавершитьРемонт Тогда
			
			Движение = Движения.торо_ЗавершенныеРемонтныеРаботы.Добавить();
			
			Движение.ВидРемонтныхРабот = СтрокаРО.ВидРемонтныхРабот;
			Движение.ОбъектРемонта = СтрокаРО.ОбъектРемонта;
			
			Движение.ДатаНачала = СтрокаРО.ДатаНачала;
			Движение.ДатаОкончания = СтрокаРО.ДатаОкончания;
			
			Движение.ID = СтрокаРО.ID;
			
			Движение.Период = Дата;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.торо_ЗавершенныеРемонтныеРаботы.Записать();
	
КонецПроцедуры // ДвиженияПоРегистру_торо_ЗавершенныеРемонтныеРаботы()

// Процедура выполняет движения документа по регистру "торо_ИсторияЗапчастейОбъектаРемонта".
//
Процедура ДвиженияПоРегистру_торо_ИсторияЗапчастейОбъектаРемонта(РежимПроведения, ТаблицаЗапчастей, Отказ)
	
	ТабЗапчастей = ТаблицаЗапчастей.Скопировать();
	ТабЗапчастей.Свернуть("ОбъектРемонта, Номенклатура, Характеристика, ХарактеристикаНоменклатуры, Запчасть, СерийныйНомер, СтатусДвиженияЗЧ, Установлена", "Количество");
	Для каждого ТекСтрока из ТабЗапчастей цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ОбъектРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка проведения по регистру ""История запчастей объекта ремонта""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;	
		КонецЕсли;
		
		Движение=Движения.торо_ИсторияЗапчастейОбъектаРемонта.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,ТекСтрока);		
		
		Движение.Период = Дата;
		//Движение.Количество = ?(ЗначениеЗаполнено(ТекСтрока.Количество) И Не ЗначениеЗаполнено(ТекСтрока.СерийныйНомер) ,ТекСтрока.Количество,1);
		Если ТекСтрока.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий =  Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
			Движение.Количество = 1;
		КонецЕсли;
	КонецЦикла;
	
	// †
	Движения.торо_ИсторияЗапчастейОбъектаРемонта.Записать(Истина);
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ФактическиеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ)
	
	Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьМатериальныеЗатраты ИЗ ТаблицаМатериальныхЗатрат Цикл
		Движение = Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Добавить();
		Движение.ID = ЗаписьМатериальныеЗатраты.ID;
		Движение.РемонтыОборудования_ID = ЗаписьМатериальныеЗатраты.РемонтыОборудования_ID;
		Движение.Количество = ЗаписьМатериальныеЗатраты.Количество;
		Движение.Номенклатура = ЗаписьМатериальныеЗатраты.Номенклатура;
		Движение.Период = ЗаписьМатериальныеЗатраты.Период;
		Движение.РемонтнаяРабота = ЗаписьМатериальныеЗатраты.РемонтнаяРабота;
		Движение.ХарактеристикаНоменклатуры = ЗаписьМатериальныеЗатраты.ХарактеристикаНоменклатуры;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ФактическиеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ)
		
	Движения.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьТрудовыеЗатраты ИЗ ТаблицаТрудовыхЗатрат Цикл
		Движение = Движения.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ЗаписьТрудовыеЗатраты);
		//Движение.РемонтыОборудования_ID = ЗаписьТрудовыеЗатраты.РемонтыОборудования_ID;
		//Движение.ID = ЗаписьТрудовыеЗатраты.ID;
		//Движение.Квалификация = ЗаписьТрудовыеЗатраты.Квалификация;
		//Движение.Количество = ЗаписьТрудовыеЗатраты.Количество;
		//Движение.Период = ЗаписьТрудовыеЗатраты.ДатаНачала;
		//Движение.Сотрудник = ЗаписьТрудовыеЗатраты.Сотрудник;
		//Движение.РемонтнаяРабота = ЗаписьТрудовыеЗатраты.РемонтнаяРабота;
		//Движение.Сумма = ЗаписьТрудовыеЗатраты.Сумма;
		//Движение.ВремяРаботы = ЗаписьТрудовыеЗатраты.ВремяРаботы;
	КонецЦикла;
    
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ФактическиеЗатратыЗапчастей(РежимПроведения, ТаблицаЗапчастей, Отказ)
	
	НаборДвижений = Движения.торо_ФактическиеЗатратыЗапчастей;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗапчастей.Скопировать(Новый Структура("Установлена", Истина)), ТаблицаДвижений);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.торо_ФактическиеЗатратыЗапчастей.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.торо_ФактическиеЗатратыЗапчастей.Записать(Истина);
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗатратыПоИсполнителямВыполненныхРемонтов(РежимПроведения, ТаблицаПодрядчиков, Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Движения.торо_ЗатратыПоИсполнителямВыполненныхРемонтов.Записывать = Истина;
	
	// Запись по исполнителям удалена, т.к. дублирует информацию в регистре торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.
	// Оставлены только подрядчики.
	Для Каждого Подрядчик Из ТаблицаПодрядчиков Цикл
		
		Если ТипЗнч(Подрядчик.Исполнитель) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Продолжить;
		КонецЕсли;
		
		Если РемонтыОборудования.Найти(Подрядчик.РемонтыОборудования_ID,"ID") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Подрядчик.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Движение = Движения.торо_ЗатратыПоИсполнителямВыполненныхРемонтов.Добавить();
		Движение.Исполнитель = Подрядчик.Исполнитель;
		Движение.Период = Подрядчик.ДатаОкончания;
		Движение.Сумма = Подрядчик.Сумма;
		Движение.РемонтыОборудования_ID = Подрядчик.РемонтыОборудования_ID;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ГарантийностьРемонтов()
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии") Тогда
		Возврат;
	КонецЕсли;
	
	Движения.торо_ГарантийностьРемонтов.Записывать = Истина;
	Движения.торо_ГарантийностьРемонтов.Очистить();
	
	Для каждого Строка Из РемонтыОборудования Цикл
		Движение = Движения.торо_ГарантийностьРемонтов.Добавить();
		Движение.Период = Дата;
		Движение.IDРемонта = Строка.ID;
		Движение.Гарантийный = Строка.ГарантийныйРемонт;
	КонецЦикла;
	
КонецПроцедуры

// Выгружает данные в табличной части в таблицу значений, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуЗапчастей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Ссылка,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая
	|ПОМЕСТИТЬ ТабСерийныеЗапчасти
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.СерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Ссылка = &Ссылка
	|	И (торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая <> торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры
	|			ИЛИ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				И торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID
	|ПОМЕСТИТЬ ТабРемОборудования
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Ссылка,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта
	|ПОМЕСТИТЬ СерийныеЗапчасти
	|ИЗ
	|	ТабСерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабРемОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|		ПО торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID = торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры КАК СерийныйНомер,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура КАК Запчасть,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура КАК Номенклатура,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры КАК Характеристика,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ КАК СтатусДвиженияЗЧ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество
	|	КОНЕЦ КАК Количество,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID,
	|	ЛОЖЬ КАК Установлена
	|ПОМЕСТИТЬ ИтоговаяТабБезГруппировок
	|ИЗ
	|	СерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|ГДЕ
	|	НЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДвиженияСерийныхЗЧ.ПустаяСсылка)
	|	И НЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая
	|	КОНЕЦ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое = 0
	|			ТОГДА 1
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое
	|	КОНЕЦ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID,
	|	ИСТИНА
	|ИЗ
	|	СерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|ГДЕ
	|	НЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДвиженияСерийныхЗЧ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТабБезГруппировок.ОбъектРемонта,
	|	ИтоговаяТабБезГруппировок.СерийныйНомер,
	|	ИтоговаяТабБезГруппировок.Запчасть,
	|	ИтоговаяТабБезГруппировок.Номенклатура,
	|	ИтоговаяТабБезГруппировок.ХарактеристикаНоменклатуры,
	|	ИтоговаяТабБезГруппировок.Характеристика,
	|	ИтоговаяТабБезГруппировок.СтатусДвиженияЗЧ,
	|	СУММА(ИтоговаяТабБезГруппировок.Количество) КАК Количество,
	|	ИтоговаяТабБезГруппировок.РемонтыОборудования_ID,
	|	ИтоговаяТабБезГруппировок.Установлена
	|ИЗ
	|	ИтоговаяТабБезГруппировок КАК ИтоговаяТабБезГруппировок
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТабБезГруппировок.ОбъектРемонта,
	|	ИтоговаяТабБезГруппировок.СерийныйНомер,
	|	ИтоговаяТабБезГруппировок.Запчасть,
	|	ИтоговаяТабБезГруппировок.Номенклатура,
	|	ИтоговаяТабБезГруппировок.ХарактеристикаНоменклатуры,
	|	ИтоговаяТабБезГруппировок.Характеристика,
	|	ИтоговаяТабБезГруппировок.СтатусДвиженияЗЧ,
	|	ИтоговаяТабБезГруппировок.РемонтыОборудования_ID,
	|	ИтоговаяТабБезГруппировок.Установлена";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаЗапчастей = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапчастей;
	
КонецФункции 

// Функция возвращает таблицу значений для движения по регистру "торо_ФактическиеМатериальныеЗатратыРемонтныхРабот".
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуМатериальныхЗатрат(ТаблицаДвижений)
	
	ТаблицаМатериальныхЗатрат = Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Выгрузить();
			
	Если МатериальныеЗатраты.Количество()=0 Тогда
		
		Возврат ТаблицаМатериальныхЗатрат;
		
	КонецЕсли; 
	
	БуферМЗ = МатериальныеЗатраты.Выгрузить();
	БуферМЗ.Колонки.Добавить("Период");
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		КоэффициентЕИ = СтрокаТЗ.ЕдиницаИзмерения.Коэффициент;
		СтрокаТЗ.Количество = СтрокаТЗ.Количество * ?(КоэффициентЕИ = 0, 1, КоэффициентЕИ);
		
		СтрокаРемонта = РемонтыОборудования.Найти(СтрокаТЗ.РемонтыОборудования_ID);
		Если СтрокаРемонта <> Неопределено Тогда
			СтрокаТЗ.Период = СтрокаРемонта.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	БуферМЗ.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период", "Количество");
	
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ID) Тогда
			Продолжить;	
		КонецЕсли;
		
		НайденнаяСтрокаТЗ = РемонтныеРаботы.Найти(СтрокаТЗ.ID, "ID");
		Если Не НайденнаяСтрокаТЗ = Неопределено Тогда
			НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаТЗ);
			НовСтрокаТЗ.РемонтнаяРабота = НайденнаяСтрокаТЗ.РемонтнаяРабота;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТаблицаМатериальныхЗатрат.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период, РемонтнаяРабота", "Количество");
	
	Возврат ТаблицаМатериальныхЗатрат;
	
КонецФункции

// Функция формирует таблицу значений с данными по движениям документа.
//
Функция ПодготовитьТаблицуПроведения() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Выполнено,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ПроцентВыполненияРабот,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Количество";
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ РемРаботыАкта";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТабРемРабот";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	&РемРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
	|ИНДЕКСИРОВАТЬ ПО
	|";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ID
		|;
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	РемонтыОборудования_ID,
		|	ID,
		|	Родитель_ID
		|
		|;
		|";
	КонецЕсли;
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = Запрос.Текст + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ЗапланированныеРемонтныеРаботыОбороты.Регистратор,
		|	торо_ЗапланированныеРемонтныеРаботыОбороты.Родитель_ID КАК Родитель_ID
		|ПОМЕСТИТЬ ЗаплРемРаб
		|ИЗ
		|	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Родитель_ID В
		|				(ВЫБРАТЬ
		|					РемРаботыАкта.ID
		|				ИЗ
		|					РемРаботыАкта КАК РемРаботыАкта)) КАК торо_ЗапланированныеРемонтныеРаботыОбороты
		|ГДЕ
		|	торо_ЗапланированныеРемонтныеРаботыОбороты.Регистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРемРаботАкта.ID КАК ID,
		|	ТабРемРаботАкта.РемонтнаяРабота,
		|	ТабРемРаботАкта.Родитель_ID КАК Родитель_ID,
		|	ТабРемРаботАкта.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	ТабРемРаботАкта.Выполнено,
		|	ТабРемРаботАкта.ПроцентВыполненияРабот,
		|	ТабРемРаботАкта.Количество,
		|	СУММА(1) КАК КолОперацийВТехКарте
		|ПОМЕСТИТЬ ТабРемРабот
		|ИЗ
		|	РемРаботыАкта КАК ТабРемРаботАкта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаплРемРаб КАК ЗаплРемРаб
		|		ПО ТабРемРаботАкта.ID = ЗаплРемРаб.Родитель_ID
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабРемРаботАкта.ID,
		|	ТабРемРаботАкта.РемонтнаяРабота,
		|	ТабРемРаботАкта.Родитель_ID,
		|	ТабРемРаботАкта.РемонтыОборудования_ID,
		|	ТабРемРаботАкта.Выполнено,
		|	ТабРемРаботАкта.ПроцентВыполненияРабот,
		|	ТабРемРаботАкта.Количество
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РемонтыОборудования_ID,
		|	ID,
		|	Родитель_ID
		|;
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ВТ_ВыполняемыеРемонтныеРаботыОстатки
	|ИЗ
	|	РегистрНакопления.торо_ВыполняемыеРемонтныеРаботы.Остатки(
	|			&МоментВремени,
	|			(IDРемонта, IDОперации, Родитель_ID) В
	|				(ВЫБРАТЬ
	|					ТабРемРабот.РемонтыОборудования_ID,
	|					ТабРемРабот.ID,
	|					ТабРемРабот.Родитель_ID
	|				ИЗ
	|					ТабРемРабот КАК ТабРемРабот)) КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации,
	|	Родитель_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ВТ_ЗапланированныеРемонтныеРаботыОстатки
	|ИЗ
	|	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы.Остатки(
	|			&МоментВремени,
	|			(IDРемонта, IDОперации, Родитель_ID) В
	|				(ВЫБРАТЬ
	|					ТабРемРабот.РемонтыОборудования_ID,
	|					ТабРемРабот.ID,
	|					ТабРемРабот.Родитель_ID
	|				ИЗ
	|					ТабРемРабот КАК ТабРемРабот)) КАК торо_ЗапланированныеРемонтныеРаботыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации,
	|	Родитель_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	// Текст запроса по выполняемым рем. работам.
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБРАТЬ
	|	ТабРемРабот.ID,
	|	ТабРемРабот.РемонтнаяРабота,
	|	ТабРемРабот.Родитель_ID,
	|	ТабРемРабот.РемонтыОборудования_ID,
	|	ТабРемРабот.Выполнено,
	|	ТабРемРабот.ПроцентВыполненияРабот,
	|	ТабРемРабот.Количество,
	|	ВТ_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	|	ВТ_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ТабРемРабот.КолОперацийВТехКарте";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТ_ВыполняемыеРемонтныеРаботы
	|ИЗ
	|	ТабРемРабот КАК ТабРемРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВыполняемыеРемонтныеРаботыОстатки КАК ВТ_ВыполняемыеРемонтныеРаботыОстатки
	|		ПО ТабРемРабот.РемонтыОборудования_ID = ВТ_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта
	|			И ТабРемРабот.ID = ВТ_ВыполняемыеРемонтныеРаботыОстатки.IDОперации
	|			И ТабРемРабот.Родитель_ID = ВТ_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID;";
	
	// Текст запроса по запланированным рем. работам.
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБРАТЬ
	|	ТабРемРабот.ID,
	|	ТабРемРабот.РемонтнаяРабота,
	|	ТабРемРабот.Родитель_ID,
	|	ТабРемРабот.РемонтыОборудования_ID,
	|	ТабРемРабот.Выполнено,
	|	ТабРемРабот.ПроцентВыполненияРабот,
	|	ТабРемРабот.Количество,
	|	ВТ_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток КАК ПроцентОперацийОстатокЗаплРем,
	|	ВТ_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстатокЗаплРем";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ТабРемРабот.КолОперацийВТехКарте";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТ_ЗапланированныеРемонтныеРаботы
	|ИЗ
	|	ТабРемРабот КАК ТабРемРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗапланированныеРемонтныеРаботыОстатки КАК ВТ_ЗапланированныеРемонтныеРаботыОстатки
	|		ПО ТабРемРабот.РемонтыОборудования_ID = ВТ_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта
	|			И ТабРемРабот.ID = ВТ_ЗапланированныеРемонтныеРаботыОстатки.IDОперации
	|			И ТабРемРабот.Родитель_ID = ВТ_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID;";
	
	// Объединим две таблицы.
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБРАТЬ
	|	ВТ_ВыполняемыеРемонтныеРаботы.ID,
	|	ВТ_ВыполняемыеРемонтныеРаботы.РемонтнаяРабота,
	|	ВТ_ВыполняемыеРемонтныеРаботы.Родитель_ID,
	|	ВТ_ВыполняемыеРемонтныеРаботы.РемонтыОборудования_ID,
	|	ВТ_ВыполняемыеРемонтныеРаботы.Выполнено,
	|	ВТ_ВыполняемыеРемонтныеРаботы.ПроцентВыполненияРабот,
	|	ВТ_ВыполняемыеРемонтныеРаботы.Количество,
	|	ВТ_ВыполняемыеРемонтныеРаботы.ПроцентОперацийОстаток КАК ПроцентОперацийОстаток,
	|	ВТ_ВыполняемыеРемонтныеРаботы.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстаток,
	|	0 КАК ПроцентОперацийОстатокЗаплРем,
	|	0 КАК ПроцентРемонтаОстатокЗаплРем";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ВТ_ВыполняемыеРемонтныеРаботы.КолОперацийВТехКарте";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТ_СводнаяТаблицаРемонтов
	|ИЗ
	|	ВТ_ВыполняемыеРемонтныеРаботы КАК ВТ_ВыполняемыеРемонтныеРаботы
	|		
	|ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	ВТ_ЗапланированныеРемонтныеРаботы.ID,
	|	ВТ_ЗапланированныеРемонтныеРаботы.РемонтнаяРабота,
	|	ВТ_ЗапланированныеРемонтныеРаботы.Родитель_ID,
	|	ВТ_ЗапланированныеРемонтныеРаботы.РемонтыОборудования_ID,
	|	ВТ_ЗапланированныеРемонтныеРаботы.Выполнено,
	|	ВТ_ЗапланированныеРемонтныеРаботы.ПроцентВыполненияРабот,
	|	ВТ_ЗапланированныеРемонтныеРаботы.Количество,
	|	0,
	|	0,
	|	ВТ_ЗапланированныеРемонтныеРаботы.ПроцентОперацийОстатокЗаплРем,
	|	ВТ_ЗапланированныеРемонтныеРаботы.ПроцентРемонтаОстатокЗаплРем";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ВТ_ЗапланированныеРемонтныеРаботы.КолОперацийВТехКарте";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ВТ_ЗапланированныеРемонтныеРаботы КАК ВТ_ЗапланированныеРемонтныеРаботы;";
	
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБРАТЬ
	|	ВТ_СводнаяТаблицаРемонтов.ID,
	|	ВТ_СводнаяТаблицаРемонтов.РемонтнаяРабота,
	|	ВТ_СводнаяТаблицаРемонтов.Родитель_ID,
	|	ВТ_СводнаяТаблицаРемонтов.РемонтыОборудования_ID,
	|	ВТ_СводнаяТаблицаРемонтов.Выполнено,
	|	ВТ_СводнаяТаблицаРемонтов.ПроцентВыполненияРабот,
	|	ВТ_СводнаяТаблицаРемонтов.Количество,
	|	СУММА(ВТ_СводнаяТаблицаРемонтов.ПроцентОперацийОстаток) КАК ПроцентОперацийОстаток,
	|	СУММА(ВТ_СводнаяТаблицаРемонтов.ПроцентРемонтаОстаток) КАК ПроцентРемонтаОстаток,
	|	СУММА(ВТ_СводнаяТаблицаРемонтов.ПроцентОперацийОстатокЗаплРем) КАК ПроцентОперацийОстатокЗаплРем,
	|	СУММА(ВТ_СводнаяТаблицаРемонтов.ПроцентРемонтаОстатокЗаплРем) КАК ПроцентРемонтаОстатокЗаплРем";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ВТ_СводнаяТаблицаРемонтов.КолОперацийВТехКарте";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ВТ_СводнаяТаблицаРемонтов КАК ВТ_СводнаяТаблицаРемонтов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СводнаяТаблицаРемонтов.ID,
	|	ВТ_СводнаяТаблицаРемонтов.РемонтнаяРабота,
	|	ВТ_СводнаяТаблицаРемонтов.Родитель_ID,
	|	ВТ_СводнаяТаблицаРемонтов.РемонтыОборудования_ID,
	|	ВТ_СводнаяТаблицаРемонтов.Выполнено,
	|	ВТ_СводнаяТаблицаРемонтов.ПроцентВыполненияРабот,
	|	ВТ_СводнаяТаблицаРемонтов.Количество";
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ВТ_СводнаяТаблицаРемонтов.КолОперацийВТехКарте";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("ЗавершитьРемонтныеРаботы", ЗавершитьРемонтныеРаботы);
	Запрос.УстановитьПараметр("РемРаботы", РемонтныеРаботы.Выгрузить());
	
	ТаблицаПроведения = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПроведения;
	
КонецФункции

// Функция возвращает таблицу значений для движения по регистру "торо_ФактическиеТрудовыеЗатратыРемонтныхРабот".
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТрудовыхЗатрат(ТаблицаДвижений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДвижений.ID КАК ID,
	               |	ТаблицаДвижений.Родитель_ID КАК Родитель_ID,
	               |	ТаблицаДвижений.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ТаблицаДвижений.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТаблицаДвижений.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРаботНачало
	               |ИЗ
	               |	&ТаблицаДвижений КАК ТаблицаДвижений
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	РемонтыОборудования_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаРемонтов.ID КАК ID,
	               |	ТаблицаРемонтов.ДатаНачала КАК ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтов
	               |ИЗ
	               |	&ТаблицаРемонтов КАК ТаблицаРемонтов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДвижений.ID КАК ID,
	               |	ТаблицаДвижений.Родитель_ID КАК Родитель_ID,
	               |	ТаблицаДвижений.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ТаблицаДвижений.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТаблицаДвижений.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ТаблицаРемонтов.ДатаНачала КАК ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРабот
	               |ИЗ
	               |	ТаблицаРемонтныхРаботНачало КАК ТаблицаДвижений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРемонтов КАК ТаблицаРемонтов
	               |		ПО ТаблицаДвижений.РемонтыОборудования_ID = ТаблицаРемонтов.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаДвижений.РемонтыОборудования_ID,
	               |	ТаблицаДвижений.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Квалификация КАК Квалификация,
	               |	СУММА(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.СуммаКНачислению) КАК СуммаКНачислению,
	               |	СУММА(1) КАК Количество,
	               |	СУММА(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ВремяРаботы) КАК ВремяРаботы,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID КАК ID,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Сотрудник КАК Сотрудник,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ДатаНачала КАК ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаТрудозатратАкт
	               |ИЗ
	               |	Документ.торо_АктОВыполненииЭтапаРабот.ТрудовыеЗатраты КАК торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты
	               |ГДЕ
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Квалификация,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Сотрудник,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ДатаНачала
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТрудозатратАкт.Квалификация КАК Квалификация,
	               |	СУММА(ТаблицаТрудозатратАкт.СуммаКНачислению) КАК Сумма,
	               |	СУММА(ТаблицаТрудозатратАкт.Количество) КАК Количество,
	               |	СУММА(ТаблицаТрудозатратАкт.ВремяРаботы) КАК ВремяРаботы,
	               |	ТаблицаТрудозатратАкт.ID КАК ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТаблицаТрудозатратАкт.Сотрудник КАК Сотрудник,
	               |	ТаблицаТрудозатратАкт.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ВЫБОР
	               |		КОГДА ТаблицаТрудозатратАкт.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ТаблицаРемонтныхРабот.ДатаНачала
	               |		ИНАЧЕ ТаблицаТрудозатратАкт.ДатаНачала
	               |	КОНЕЦ КАК Период,
	               |	ТаблицаРемонтныхРабот.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ТаблицаРемонтныхРабот.Родитель_ID КАК Родитель_ID
	               |ИЗ
	               |	ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТрудозатратАкт КАК ТаблицаТрудозатратАкт
	               |		ПО ТаблицаРемонтныхРабот.ID = ТаблицаТрудозатратАкт.ID
	               |			И ТаблицаРемонтныхРабот.РемонтыОборудования_ID = ТаблицаТрудозатратАкт.РемонтыОборудования_ID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаТрудозатратАкт.Квалификация,
	               |	ТаблицаТрудозатратАкт.ID,
	               |	ТаблицаТрудозатратАкт.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ТаблицаТрудозатратАкт.Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ТаблицаТрудозатратАкт.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ТаблицаРемонтныхРабот.ДатаНачала
	               |		ИНАЧЕ ТаблицаТрудозатратАкт.ДатаНачала
	               |	КОНЕЦ,
	               |	ТаблицаРемонтныхРабот.ID_ПараллельнойОперации,
	               |	ТаблицаРемонтныхРабот.Родитель_ID";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДвижений", РемонтныеРаботы.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаРемонтов", РемонтыОборудования.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция СформироватьТаблицуВнешнихОснований()

	ТаблицаОснований = ДокументыОснования.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОснований.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втВнешниеОснования
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ТаблицаОснований.ДокументОснование) = ТИП(Документ.торо_ВнешнееОснованиеДляРабот)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗакрываемыеПредписания.ДокументВнешнегоОснования
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ЗакрываемыеПредписания КАК ТаблицаЗакрываемыеПредписания
	|ГДЕ
	|	ТаблицаЗакрываемыеПредписания.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтыОборудования.ID КАК ID
	|ПОМЕСТИТЬ втРемонтыОборудования
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК ТаблицаРемонтыОборудования
	|ГДЕ
	|	ТаблицаРемонтыОборудования.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗакрываемыеПредписания.ID
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ЗакрываемыеПредписания КАК ТаблицаЗакрываемыеПредписания
	|ГДЕ
	|	ТаблицаЗакрываемыеПредписания.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ВнешниеОснованияДляРабот.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВнешниеОснованияДляРабот.ID КАК ID
	|ПОМЕСТИТЬ втДанныеВнешнихОснований
	|ИЗ
	|	РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВнешниеОснования КАК втВнешниеОснования
	|		ПО (втВнешниеОснования.ДокументОснование = торо_ВнешниеОснованияДляРабот.Регистратор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРемонтыОборудования КАК втРемонтыОборудования
	|		ПО торо_ВнешниеОснованияДляРабот.ID = втРемонтыОборудования.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID,
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВнешниеОснованияДляРабот.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВнешниеОснованияДляРабот.ID КАК ID,
	|	торо_ВнешниеОснованияДляРабот.Описание КАК Описание,
	|	торо_ВнешниеОснованияДляРабот.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	торо_ВнешниеОснованияДляРабот.Организация КАК Организация,
	|	торо_ВнешниеОснованияДляРабот.Подразделение КАК Подразделение,
	|	торо_ВнешниеОснованияДляРабот.ОписаниеЯзык1 КАК ОписаниеЯзык1,
	|	торо_ВнешниеОснованияДляРабот.ОписаниеЯзык2 КАК ОписаниеЯзык2,
	|	торо_ВнешниеОснованияДляРабот.РемонтыОборудования_id КАК РемонтыОборудования_id
	|ИЗ
	|	втДанныеВнешнихОснований КАК втДанныеВнешнихОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	|		ПО втДанныеВнешнихОснований.ID = торо_ВнешниеОснованияДляРабот.ID
	|			И (втДанныеВнешнихОснований.ОбъектРемонта = торо_ВнешниеОснованияДляРабот.ОбъектРемонта
	|				И НЕ торо_ВнешниеОснованияДляРабот.Обработано)";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Движения по регистру "Внешние основания для работ", простановка Обработано = Истина
Процедура ДвиженияПоРегистру_торо_ВнешниеОснованияДляРабот(РежимПроведения, ТаблицаВО, Отказ)
	
	Движения.торо_ВнешниеОснованияДляРабот.Очистить();
	Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
	Для каждого ВнешнееОснование Из ТаблицаВО Цикл
		Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВнешнееОснование);
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Обработано = Истина;
	КонецЦикла; 
	
КонецПроцедуры

Функция ПодготовитьТаблицуКонечныхЭлементовРемонтныхРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID КАК IDОперации,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота КАК Операция,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Родитель_ID КАК IDРодителя,
	|	ВЫБОР
	|		КОГДА торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов.Значение = ИСТИНА
	|			ТОГДА торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ПроцентВыполненияРабот
	|		ИНАЧЕ ВЫБОР
	|				КОГДА торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Выполнено
	|					ТОГДА 100
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ * торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Количество * -1 КАК Процент
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы,
	|	Константа.торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов КАК торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов.Значение = ИСТИНА
	|				ТОГДА торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ПроцентВыполненияРабот <> 0
	|			ИНАЧЕ торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Выполнено = ИСТИНА
	|		КОНЕЦ
	|	И ТИПЗНАЧЕНИЯ(торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота) = ТИП(Справочник.торо_ТехнологическиеОперации)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаРемонтныхРабот = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРемонтныхРабот;
	
КонецФункции
 
Процедура УдалениеПроведенияПлановыхЗатрат()
	Для каждого Строка Из РемонтыОборудования Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_ПлановыеЗатраты.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.торо_ПлановыеЗатраты КАК торо_ПлановыеЗатраты
			|ГДЕ
			|	торо_ПлановыеЗатраты.РемонтыОборудования_ID = &РемонтыОборудования_ID";
		
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", Строка.ID);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НайденныйДокумент = ВыборкаДетальныеЗаписи.Ссылка;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
			|ГДЕ
			|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID = &ID
			|	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			|	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник = &ДокументИсточник
			|	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.Проведен = ИСТИНА
			|	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка <> &Ссылка";
			
			Запрос.УстановитьПараметр("ID", НайденныйДокумент.РемонтыОборудования_ID);
			Запрос.УстановитьПараметр("ДокументИсточник", НайденныйДокумент.ДокументПлана);
			Запрос.УстановитьПараметр("ОбъектРемонта", НайденныйДокумент.ОбъектРемонта);
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() И НайденныйДокумент.Проведен = Истина Тогда
				Док = НайденныйДокумент.ПолучитьОбъект();
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДублиИсполнителей(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Исполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	Исполнители.Исполнитель КАК Исполнитель,
	|	Исполнители.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	&Исполнители КАК Исполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Исполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_Исполнители.Исполнитель КАК Исполнитель,
	|	ВТ_Исполнители.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	СУММА(ВТ_Исполнители.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ДублиИсполнителей
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Исполнители.РемонтыОборудования_ID,
	|	ВТ_Исполнители.Исполнитель,
	|	ВТ_Исполнители.УточнениеИсполнителя
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Исполнители.Количество) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РемонтыОборудования.ID КАК ID,
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ ВТ_РемонтыОборудования
	|ИЗ
	|	&РемонтыОборудования КАК РемонтыОборудования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДублиИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ДублиИсполнителей.Исполнитель КАК Исполнитель,
	|	ВТ_ДублиИсполнителей.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
	|ИЗ
	|	ВТ_ДублиИсполнителей КАК ВТ_ДублиИсполнителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РемонтыОборудования КАК РемонтыОборудования
	|		ПО ВТ_ДублиИсполнителей.РемонтыОборудования_ID = РемонтыОборудования.ID";
	
	Запрос.УстановитьПараметр("Исполнители", ИсполнителиПоРемонтам.Выгрузить());
	Запрос.УстановитьПараметр("РемонтыОборудования", РемонтыОборудования.Выгрузить());
	
	ШаблонСообщения = НСтр("ru='Для ремонта ""%1"" дублируется исполнитель ""%2"" (""%3"").'");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.Исполнитель, Выборка.УточнениеИсполнителя);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЦикла;
	
КонецПроцедуры

ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов");

#КонецОбласти

#КонецЕсли