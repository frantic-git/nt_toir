////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем РемонтОборудованияУдаляется;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) <> Тип("Соответствие") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") И Параметры.Свойство("ВыделенныеСтроки") Тогда
		ДокОснованиеППР = Параметры.Основание;
		МассивIDИзППР.ЗагрузитьЗначения(Параметры.ВыделенныеСтроки);
	КонецЕсли;
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АктОВыполненииЭтапаРабот;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --

	УстановитьУсловноеОформление();
	
	// функциональные опции
	ФОУчетЗапчастей             = ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОУчетСостоянияОборудования = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	ФОИспользоватьГарантии      = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОЗапретитьРемонтГарантийногоОборудованияХозспособом = ПолучитьФункциональнуюОпцию("торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом");
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ФОНапоминатьЗафиксироватьПростой = ПолучитьФункциональнуюОпцию("торо_НапоминатьЗафиксироватьПростой");
	ФОВводПотребленияНаОснованииПроведенного = Константы.торо_ВводПотребленияНаОснованииПроведенногоАкта.Получить();
	ФОВводОприходованияНаОснованииПроведенного = Константы.торо_ВводОприходованияНаОснованииПроведенногоАкта.Получить();
	
	ЕстьПравоВводаСостояний = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.торо_СостоянияОбъектовРемонта);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОшибки = "";
		Если НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("28DD") И НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("5DD5") Тогда
			ТекстСообщения = НСтр("ru='Лицензия не обнаружена! Создание документа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;				
				
		ОбновитьДобавленныеКолонкиТаблиц();
		
		Если ФОИспользоватьГарантии Тогда
			торо_ГарантийноеОбслуживание.ПроставитьЗначениеФлагаГарантийныйВТаблице(Объект.РемонтыОборудования);
		КонецЕсли;
		
	КонецЕсли;
	
	ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов");
	Элементы.ДеревоРемонтныхРаботВыполнено.Видимость = НЕ ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов;
	
	ДоступноВнутреннеПотреблениеТоваров = ПравоДоступа("Просмотр", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	ДоступноОприходованиеИзлишков = ПравоДоступа("Просмотр", Метаданные.Документы.ОприходованиеИзлишковТоваров);
	
	ОбновитьДокументыВнутреннегоПотребленияСервер();
	ОбновитьДокументыОприходованияИзлишковСервер();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	КонтролироватьВремяРаботы = Константы.торо_КонтролироватьВремяРаботыСотрудниковВАктах.Получить();
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_АктОВыполненииЭтапаРабот);
	ПравоИнтерактивноеДобвалениеВнутреннихПотреблений = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	ПравоИнтерактивнаяПометкаУдаленияВнутреннихПотреблений = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	ПравоИнтерактивноеДобвалениеОприходованияИзлишков = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ОприходованиеИзлишковТоваров);
	ПравоИнтерактивнаяПометкаУдаленияОприходованияИзлишков = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ОприходованиеИзлишковТоваров);
	
	Элементы.СтраницаЗапчасти.Видимость = ФОУчетЗапчастей;
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);
	
	ФОИспользоватьНарядДопуск = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно");
	
	Если ФОИспользоватьНарядДопуск И Параметры.Свойство("Основание") Тогда
		ЗаполнитьТабОперацийБезНаряда(Параметры.Основание);
	КонецЕсли;
	
	ОбновитьДоступностьДляРедактирования();
	ОбновитьЗависимыеЛоты();
		
	ФОРасширенныйРежимМТО = ПолучитьФункциональнуюОпцию("торо_РасширенныйРежимМТО");
	Элементы.СводныйДокументВнутреннееПотребление.Видимость = Не ФОРасширенныйРежимМТО;
	
	ДокументыСостоянияПоказателиНаработки.Параметры.УстановитьЗначениеПараметра("ДокументОснование", Объект.Ссылка);
	
	УчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	Элементы.ДокументыСостоянияПоказателейНаработкиДобавитьКонтролируемыеПоказатели.Видимость = УчетКонтролируемыхПоказателей;
	ДокументыСостоянияПоказателиНаработки.Параметры.УстановитьЗначениеПараметра("УчетКонтролируемыхПоказателей", УчетКонтролируемыхПоказателей);

	УчетНаработки = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	Элементы.ДокументыСостоянияПоказателейНаработкиДобавитьНаработку.Видимость = УчетНаработки;
	ДокументыСостоянияПоказателиНаработки.Параметры.УстановитьЗначениеПараметра("УчетНаработки", УчетНаработки);
	
	УчетСостояний = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования"); 
	Элементы.ДокументыСостоянияПоказателейНаработкиДобавитьСостояниеОР.Видимость = УчетСостояний;
	ДокументыСостоянияПоказателиНаработки.Параметры.УстановитьЗначениеПараметра("УчетСостояний", УчетСостояний);
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.РемонтыОборудования.Выгрузить());
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ДокументыОснования");    
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Модифицированность Тогда
		БылаЗаписьИзменений = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом	
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ИдентификаторСтрокиРемонта = Элементы.РемонтыОборудования.ТекущаяСтрока;
	Если ИдентификаторСтрокиРемонта <> Неопределено Тогда
		ТекущаяСтрокаРемонта = Объект.РемонтыОборудования.НайтиПоИдентификатору(ИдентификаторСтрокиРемонта);
		РемонтID = ?(ТекущаяСтрокаРемонта = Неопределено, Неопределено, ТекущаяСтрокаРемонта.ID);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, РемонтID); 
	КонецЕсли;
	
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если ТабОперацийБезНаряда.Количество() = 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
			
			Если МассивIDИзППР.Количество() = 0 Тогда
				ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
			Иначе
				ВыбранноеЗначение = ЗаполнитьДанныеНаОснованииППРВыделенныеСтроки();
				РемонтыОборудованияОбработкаВыбора(Элементы.РемонтыОборудования, ВыбранноеЗначение, Ложь);
			КонецЕсли;

		КонецЕсли;
	Иначе
		
		Отказ = Истина;
		ОткрытьФорму("ОбщаяФорма.торо_ФормаОперацийБезНарядов", Новый Структура("ТабОперацийБезНаряда, ДокОснование", ТабОперацийБезНаряда, ДокОснованиеЗаявка));
		
	КонецЕсли;
	
	УправлениеФормой();
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

	Для Каждого РемонтнаяРабота Из Объект.РемонтыОборудования Цикл
		Для Каждого Значение Из Объект.ДокументыОснования Цикл
			ДокОснование = Значение.ДокументОснование;
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
				И ДокОснование.ДатаОбнаружения > РемонтнаяРабота.ДатаНачала 
				И ДокОснование = РемонтнаяРабота.ДокументИсточник Тогда
				ШаблонСообщения = НСтр("ru = 'Дата начала ремонта для объекта ремонта (%1) не может быть меньше даты обнаружения дефекта (%2)!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, РемонтнаяРабота.ОбъектРемонта, ДокОснование.ДатаОбнаружения);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
	Для Каждого Строка Из Объект.РемонтыОборудования Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	Строка.НомерСтроки, Строка.ДатаНачала, Строка.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", Строка.ID);
		МассивИсполнителей = Объект.ТрудовыеЗатраты.НайтиСтроки(СтруктураПоиска);
		МассивИсполнителейПоРемонтам = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);
		
		ПроверитьДаты("ТрудовыеЗатраты", МассивИсполнителей, Строка, Отказ, КонтролироватьВремяРаботы);
		ПроверитьДаты("ИсполнителиПоРемонтам", МассивИсполнителейПоРемонтам, Строка, Отказ, КонтролироватьВремяРаботы);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ФОИспользоватьГарантии И ФОЗапретитьРемонтГарантийногоОборудованияХозспособом Тогда
		торо_ГарантийноеОбслуживание.ПроверитьНаличиеКонтрагентов(Объект, "ИсполнителиПоРемонтам", "Исполнитель", Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	торо_ПроцентыВыполнения.РаспроведениеПлановыхЗатратБезАктов(Объект.Ссылка, ТекущийОбъект, Ложь);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "РемонтыОборудования");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	ОбновитьДобавленныеКолонкиТаблиц();
	ОбновитьЗависимыеЛоты();
	
	НеЗаписанныеДокументы = ДокументыВнутреннееПотребление.НайтиСтроки(Новый Структура("Записан", Ложь));
	Если НеЗаписанныеДокументы.Количество() Тогда
		НаборЗаписей = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументТОИР.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		Для Каждого Документ Из НеЗаписанныеДокументы Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ID = Документ.ID;
			Запись.ДокументЕРП = Документ.ВнутреннееПотребление;
			Запись.ДокументТОИР = Объект.Ссылка;
			Документ.Записан = Истина;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьОповещение", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
		
	ИначеЕсли НЕ ЗавершениеРаботы Тогда 
		
		ПослеВопросаОСохраненииДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВыполняемаяОперация")
		И ВыбранноеЗначение.ВыполняемаяОперация = "ВыборАналогаНоменклатурыДляРемонта" Тогда
		ЗаменитьМатериалыНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		МассивID = Новый Массив;
		ЗаполнитьМассивID(МассивID,ТекДанныеРемРаб);
		ОтметитьНаличиеАналогов(МассивID);
		ЗаполнитьИспользованиеХарактеристикНоменклатуры();
		Модифицированность = Истина;

	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
		Если ТекДанныеРемРаб = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ИмяТЧ = "МатериальныеЗатраты";
		ИмяРеквизита = "Номенклатура";
		СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, ID, Количество", ТекДанныеРемРаб.РемонтыОборудования_ID, ТекДанныеРемРаб.ID, ТекДанныеРемРаб.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		ОтметитьНаличиеАналогов(ТекДанныеРемРаб.ID);
		ЗаполнитьИспользованиеХарактеристикНоменклатуры();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
	Если ИмяСобытия = "ЗаписанПоказательНаработкаСостояние" Тогда
		Элементы.ДокументыСостоянияПоказателиНаработки.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ЗавершитьРемонтныеРаботыПриИзменении(Элемент)
	
	Если Объект.ЗавершитьРемонтныеРаботы Тогда
		
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Истина;
		
		Для каждого Стр Из Объект.РемонтыОборудования Цикл
			Стр.ЗавершитьРемонт = Истина;	
		КонецЦикла;
		
		Для каждого Стр Из Объект.ИсполнителиПоРемонтам Цикл
			Стр.ВсеРаботыИсполнителяЗавершены = Истина;
		КонецЦикла;
		
		УстановитьОставшиесяПроцентыРабот();
		РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
		ОбновитьДобавленныеКолонкиТаблиц();
		
	Иначе
		
		Если Объект.РемонтыОборудования.Количество() <> 0 Тогда
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				Стр.Выполнено = Ложь;
				ПроставитьГалкиВВетке(Стр, Ложь, 0);
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Стр Из Объект.РемонтныеРаботы Цикл
			Стр.Выполнено = Ложь;
		КонецЦикла;
		
		Для каждого Стр Из Объект.РемонтыОборудования Цикл
			Стр.ЗавершитьРемонт = Ложь;
		КонецЦикла;
		
		Для каждого Стр Из Объект.ИсполнителиПоРемонтам Цикл
			Стр.ВсеРаботыИсполнителяЗавершены = Ложь;
		КонецЦикла;

		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот
&НаКлиенте
Процедура ДеревоРемонтныхРаботПроцентВыполненияРаботПриИзменении(Элемент)
	
	ПерерасчитатьПроцентыВыполненияРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчитатьПроцентыВыполненияРабот()

	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		 ТекСтрокаДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0];
	КонецЕсли; 
	 
	ТекСтрокаДерева.ПроцентВыполненияРабот = мин(100, ТекСтрокаДерева.ПроцентВыполненияРабот);
	ТекСтрокаДерева.Выполнено = (ТекСтрокаДерева.ПроцентВыполненияРабот = 100);
	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);	
	
	Строка = ВыполнитьПоискПоДереву(СтруктураСтроки);
	Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПоискПоДереву(СтруктураСтроки)
	
	Для каждого СтрокаДерева из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> СтрокаДерева[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева)
	
	Для каждого Подстрока из СтрокаДерева.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> Подстрока[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат Подстрока;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, Подстрока); 
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		СтандартнаяОбработка = Ложь;
	    торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьКолонкиПараллельногоВыполненияТО(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы, ID_ПараллельнойОперации, ВыбранноеЗначение.СоответствиеРезультата);
		Модифицированность = Истина;
		
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
		ДатаОкончанияРемонта   = ТекРемонт.ДатаОкончания;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;
		ДатаОкончанияРемонта   = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта, ДатаОкончанияРемонта"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, СтрокаРодитель.Родитель_ID
	, ДатаНачалаРемонта
	, ДатаОкончанияРемонта);
	
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	ВыделитьСтрокуДереваРемонтныхРабот(ИДВыбраннойСтроки);
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0] 
		Или Элемент.ТекущиеДанные.ЭтоТехКарта Тогда
		Выполнение = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(Строка) Тогда
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Если ТекущаяСтрока.ЭтоТехкарта Тогда
			ПараметрыПеретаскивания.Действие 		   =  ДействиеПеретаскивания.Перемещение; 
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
 	СтандартнаяОбработка = Ложь;
	
	Если Не Строка = Неопределено Тогда
		
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Для каждого ЭлементКоллекции Из ПараметрыПеретаскивания.Значение Цикл
			ПеретаскиваемаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ЭлементКоллекции);
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ПеретаскиваемаяСтрока.ID));
			Если МассивСтрок.Количество() Тогда
				МассивСтрок[0].Родитель_ID = ТекущаяСтрока.ID;
				
				// Если случайно перетащили в ту же ТК, то параллельность убирать не нужно.
				Если Не ПеретаскиваемаяСтрока.Родитель_ID = ТекущаяСтрока.ID И ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
					МассивСтрок[0].ID_ПараллельнойОперации = "";
					торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.РемонтыОборудования_ID);
		ВыделитьСтрокуДереваРемонтныхРабот(ТекущаяСтрока.ID);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеЛоты()
	
	Если Константы.торо_ИспользоватьЛоты.Получить() Тогда
		МассивИДРемонтов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.РемонтыОборудования, "ID");
		МассивСвязанныхЛотов = торо_Ремонты.ПолучитьМассивIDЛотов(МассивИДРемонтов);
		МассивIDЛотов.ЗагрузитьЗначения(МассивСвязанныхЛотов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот = Новый Структура();
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("МатериальныеЗатраты");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("ТрудовыеЗатраты");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("РемонтныеРаботы");
	
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("МатериальныеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("ТрудовыеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");
 		
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
			
			ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("РемонтыОборудования_ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		
			СтрокиКУдалению = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				
				ТабличнаяЧасть.Удалить(Строка);
				
			КонецЦикла;		    
						
		КонецЦикла;

		Модифицированность = Истина;
		
		Отказ = Истина;

	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоРемонтныхРабот.ВыделенныеСтроки;
		МассивСтрокДляУдаления = Новый Массив;
		
		Для каждого Стр Из ВыделенныеСтроки Цикл 
			Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Стр);
			Если Строка <> Неопределено И Строка.РемонтнаяРабота <> "Ремонтные работы" Тогда 
				МассивСтрокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого Элемент Из МассивСтрокДляУдаления Цикл
							
			СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
			Элемент.ID, Элемент.РемонтыОборудования_ID, Элемент.Родитель_ID, Элемент.РемонтнаяРабота);
			УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи, СтруктураСвязанныхТЧ);
			
			СтрокаРодителя = Элемент.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда 
				СтрокаРодителя.ПолучитьЭлементы().Удалить(Элемент); 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
				торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации, СтрокаРодителя);
			КонецЕсли;
		КонецЦикла;
		
		
		Модифицированность = Истина;
		Отказ = Истина;  
		
	КонецЕсли;
	
	торо_ДанныеФормыДеревоКлиентСервер.ОбновитьПроцентыВыполненияВДеревеРемонтныхРабот(ДеревоРемонтныхРабот);
	
	РазвернутьДеревоРемонтныхРабот(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	ПроверитьДоступностьКнопокМатЗатратИИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
		УстановитьОтборСтрокПоЗатратам();
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ID) 
		И Объект.РемонтныеРаботы.Количество() > 1 Тогда  
		
		торо_ДанныеФормыДеревоКлиентСервер.УпорядочитьРемонтныеРаботы(ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите расположение ремонта!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТекущийРемонт = Неопределено Тогда  
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт оборудования для добавления технологической операции!'"), 10);
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество <= 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	РемID = ТекСтрока.РемонтыОборудования_ID;
	СтрукПоиска = Новый Структура("ID, РемонтыОборудования_ID", ID, РемID);
	
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(СтрукПоиска);
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
		КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
		Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
		СтрТЧ.Количество = ТекСтрока.Количество;
		
		ПересчитатьЗатратыПоКоличеству(СтрукПоиска, Коэффициент);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботВыполненоПриИзменении(Элемент)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекСтрокаДерева.ПроцентВыполненияРабот = ?(ТекСтрокаДерева.Выполнено, 100, 0);
	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	
	Если НЕ ТекСтрокаДерева = Неопределено Тогда 
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураСтроки);
		Если МассивСтрок.Количество() Тогда
			МассивСтрок[0].Выполнено = ТекСтрокаДерева.Выполнено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	
	Если Не ТекСтрокаДерева.Выполнено Тогда
		
		Объект.ЗавершитьРемонтныеРаботы = Ложь;
		Если НЕ Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
			МасСтр = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID));
			Если МасСтр.Количество() > 0 Тогда
				МасСтр[0].ЗавершитьРемонт = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНоваяОперацияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтарыйID = ТекущиеДанные.ID;
		МассивВозврата = торо_ПроцентыВыполнения.НайтиОперациюВРегистре(ТекущиеДанные.РемонтнаяРабота, ТекущиеДанные.Родитель_ID, ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.НоваяОперация, Объект.Ссылка);
		Если МассивВозврата.Количество() = 1 И МассивВозврата[0].Новая = Истина И ТекущиеДанные.НоваяОперация = Ложь Тогда
			ТекстСообщения = НСтр("ru = 'Операция не найдена!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.НоваяОперация = Истина;
			ИзменитьIDВТабличныхЧастях(МассивВозврата[0].ID, СтарыйID);
			ПерерасчитатьПроцентыВыполненияРабот();
		ИначеЕсли МассивВозврата.Количество() = 1 Тогда
			СтруктураПоиска = Новый Структура("ID", МассивВозврата[0].ID);
			Имеющиеся = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
			Если Имеющиеся.Количество() = 0 Тогда
				ТекущиеДанные.ID = МассивВозврата[0].ID;
				Если МассивВозврата[0].Процент < 0 Тогда
					ТекущиеДанные.ПроцентВыполненияРабот = (100 + МассивВозврата[0].Процент) / ТекущиеДанные.Количество;
				Иначе
					ТекущиеДанные.ПроцентВыполненияРабот = МассивВозврата[0].Процент / ТекущиеДанные.Количество;
				КонецЕсли;				
				ИзменитьIDВТабличныхЧастях(МассивВозврата[0].ID, СтарыйID);
				ПерерасчитатьПроцентыВыполненияРабот();
			Иначе
				ТекстСообщения = НСтр("ru = 'Эта операция уже добавлена!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				ТекущиеДанные.НоваяОперация = Истина;
			КонецЕсли;
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораIDОперации", ЭтотОбъект, Новый Структура("Элемент", Элемент));
			СтруктураЗаполнения = Новый Структура("МассивВозврата", МассивВозврата); 
			ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораОперации", СтруктураЗаполнения,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботИсполнительПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДоговорБригада = Неопределено;
	УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(ТекущиеДанные.Исполнитель, ТекущиеДанные.РемонтыОборудования_ID);
	
	СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID", ТекущиеДанные.ID, ТекущиеДанные.РемонтыОборудования_ID);
	НайденныеСтроки = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		НайденныеСтроки[0].Исполнитель = ТекущиеДанные.Исполнитель;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботДоговорБригадаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID", ТекущиеДанные.ID, ТекущиеДанные.РемонтыОборудования_ID);
	НайденныеСтроки = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		НайденныеСтроки[0].ДоговорБригада = ТекущиеДанные.ДоговорБригада;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьПараметрыВыбораИсполнителя_ДляРемонтныхРабот(ТекущиеДанные.РемонтыОборудования_ID);
		УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(ТекущиеДанные.Исполнитель, ТекущиеДанные.РемонтыОборудования_ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Истина;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Истина;
		Элементы.ДеревоРемонтныхРаботВыполнено.ТолькоПросмотр = Истина;
		
		ТекущаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекущаяСтрока.РемонтнаяРабота = ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка");
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Ложь;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Ложь;
		Элементы.ДеревоРемонтныхРаботВыполнено.ТолькоПросмотр = Ложь;
		
		НеЗаполненаРемонтнаяРабота = ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.РемонтнаяРабота);
		
		Если Не ОтменаРедактирования И НеЗаполненаРемонтнаяРабота Тогда
			
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
			
			Если РодительСтроки = Неопределено Тогда
				КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Иначе
				КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
			КонецЕсли;
			
			КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
		И Не ТекущиеДанные.РемонтнаяРабота.Пустая() Тогда
		
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
				
		ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если РодительСтроки = Неопределено Тогда
			КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ТекущийРемонт_ID", ?(ТекущийРемонт = Неопределено, "", ТекущийРемонт.ID)); 
		ДанныеСтроки.Вставить("СтрокаРодитель_ID", РодительСтроки.ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРемонтыОборудования_ID", РодительСтроки.РемонтыОборудования_ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРодитель_ID", РодительСтроки.Родитель_ID);  
					
		ДеревоРемонтныхРаботОбработкаВыбораСервер(ТекущиеДанные.РемонтнаяРабота, ДанныеСтроки);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьПроцентыВыполненияВДеревеРемонтныхРабот(ДеревоРемонтныхРабот);
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
				
		РодительСтроки = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоРемонтныхРабот.ПолучитьЭлементы(), "ID", РодительСтроки.ID);
		КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		ИндексПоследнегоЭлементаРодителя = КоллекцияЭлементовРодителя.Количество() - 1;
		
		ДобавленныйЭлемент = КоллекцияЭлементовРодителя.Получить(ИндексПоследнегоЭлементаРодителя);
		
		Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ДобавленныйЭлемент.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования
&НаКлиенте
Процедура РемонтыОборудованияЗавершитьРемонтПриИзменении(Элемент)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если ТекДанные.ЗавершитьРемонт И НЕ РаботыВсехИсполнителейЗавершены(ТекДанные.ID) Тогда
			Вопрос = НСтр("ru = 'Не все исполнители завершили работы по этому ремонту. Все равно завершить ремонт?'");
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТекДанные", ТекДанные);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьРемонтПослеВопроса", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(ОписаниеОповещения, Вопрос, РежимДиалогаВопрос.ДаНет)
		Иначе 
			ВсеРаботыИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
			Для каждого Строка Из ВсеРаботыИсполнителей Цикл
				Строка.ВсеРаботыИсполнителяЗавершены = ТекДанные.ЗавершитьРемонт
			КонецЦикла;
			ПриЗавершенииРемонта(ТекДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРемонтПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	ТекДанные.ЗавершитьРемонт = РезультатВопроса = КодВозвратаДиалога.Да;
	ВсеРаботыИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
	Для каждого Строка Из ВсеРаботыИсполнителей Цикл
		Строка.ВсеРаботыИсполнителяЗавершены = ТекДанные.ЗавершитьРемонт
	КонецЦикла;
	ПриЗавершенииРемонта(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
		
		Если ТекущиеДанные.ЗавершитьРемонт Тогда
			Строки = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Строки[0].Выполнено = Истина;
		КонецЕсли;
		
		ПроверитьДоступностьКнопокМатЗатратИИсполнителей();
		УстановитьДоступностьДляРедактированияПоТекРемонту(ТекущиеДанные.БлокироватьДляИзменения, ТекущиеДанные.ОбъектРемонта);
		
		Найденный = МассивIDЛотов.НайтиПоЗначению(ТекущиеДанные.ID);
		Если Найденный <> Неопределено Тогда
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Истина;
		Иначе
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Ложь;
		КонецЕсли;

	Иначе
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, Неопределено);
	КонецЕсли;
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	ДеревоРемонтныхРаботПриАктивизацииСтроки(Элементы.ДеревоРемонтныхРабот);
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = ТекущиеДанные.ЗавершитьРемонт;
	КонецЕсли;
	
	УстановитьОтборыСвязанныхТаблицРемонты();
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры
	
&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	
	Если НЕ РемонтОборудованияУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("РемонтыОборудованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),
		Вопрос,РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Строки = ДополнительныеПараметры.Элемент.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого идСтрока из Строки Цикл
			
			текСтрока = Объект.РемонтыОборудования.НайтиПоИдентификатору(идСтрока);
			
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			РемонтОборудованияУдаляется = Истина;
			Объект.РемонтыОборудования.Удалить(текСтрока);
			РемонтОборудованияУдаляется = Ложь;
		КонецЦикла;
		
		Модифицированность = Истина;
		
		Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
			РазвернутьДеревоРемонтныхРабот(Строка);
		КонецЦикла;
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияДатаНачалаПриИзменении(Элемент)
	ТекРемонтID = Элементы.РемонтыОборудования.ТекущиеДанные.ID;
	МассивID = ПолучитьIDОперацийПоIDРемонта(Объект, ТекРемонтID);
	ОтметитьНаличиеАналогов(МассивID);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, ТекДанные.ДатаНачала, ТекДанные.ДатаОкончания);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "РемонтыОборудованияВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		ИначеЕсли Поле.Имя = "РемонтыОборудованияОбъектРемонта" И ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) Тогда
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ТекДанные.ОбъектРемонта), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборРемонтов") Тогда
		
		ПроверитьНаличиеОпасныхРаботБезНарядов(ВыбранноеЗначение.АдресХранилища);
		Если ТабОперацийБезНаряда.Количество() > 0 Тогда
			ОткрытьФорму("ОбщаяФорма.торо_ФормаОперацийБезНарядов", Новый Структура("ТабОперацийБезНаряда, ДокОснование", ТабОперацийБезНаряда, ТабОперацийБезНаряда[0].ДокументОснование));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборРемонтов") И ВыбранноеЗначение.ПодборРемонтов = Истина 
		И НЕ ВыбранноеЗначение.ЭтоРемонтнаяРабота Тогда
		// Подбор ремонтов (ремонтные работы в другой ветке).
		
		Если ВыбранноеЗначение.МассивИДРемонтов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РемонтУжеДобавлен = Ложь;
		МассивИДДобавленныхРемонтов = Новый Массив;

		Для каждого ИдРемонта из ВыбранноеЗначение.МассивИДРемонтов Цикл
			НайденныеРемонты = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ИдРемонта));
			Если НайденныеРемонты.Количество() > 0 Тогда
				РемонтУжеДобавлен = Истина;
				МассивИДДобавленныхРемонтов.Добавить(ИдРемонта);
			КонецЕсли;
		КонецЦикла;
		
		Если РемонтУжеДобавлен Тогда
			Если ВыбранноеЗначение.МассивИДРемонтов.Количество() > 1 Тогда
				Вопрос = НСтр("ru = 'Некоторые из выбранных ремонтов уже добавлены. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			Иначе
				Вопрос = НСтр("ru = 'Этот ремонт уже добавлен. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			КонецЕсли;

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			СтруктураПараметров.Вставить("МассивИДДобавленныхРемонтов", МассивИДДобавленныхРемонтов);
			ОписаниеОповещения = Новый ОписаниеОповещения("РемонтыОборудованияОбработкаВыбораПослеВопроса", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(ОписаниеОповещения, Вопрос, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораЗавершение(ВыбранноеЗначение);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЭтоРемонтнаяРабота") И ВыбранноеЗначение.ЭтоРемонтнаяРабота = Истина Тогда 
		// Подбор ремонтных работ
		
		ОбработкаВыбораЗавершение(ВыбранноеЗначение);
		
	КонецЕсли;
	
	УправлениеФормой(Элементы.РемонтыОборудования.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты
&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "МатериальныеЗатратыЕстьАналоги" Тогда
		ПодобратьАналогиНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		//
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		ТекСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		ОтметитьНаличиеАналогов(ТекСтрока.ID);
	КонецЕсли;
	
	Если НЕ НоваяСтрока ИЛИ (НоваяСтрока И Не ОтменаРедактирования) Тогда
		ТекСтрокаНоменклатура = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры",
		ТекСтрокаНоменклатура.ID,
		ТекСтрокаНоменклатура.РемонтыОборудования_ID, 
		ТекСтрокаНоменклатура.Номенклатура,
		ТекСтрокаНоменклатура.ХарактеристикаНоменклатуры);
		
		Если Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
			Если НЕ ЗначениеЗаполнено(СтруктураПоиска.ХарактеристикаНоменклатуры) Тогда
				ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Для технологической операции номенклатура %1 уже добавлена!'"),СтруктураПоиска.Номенклатура);
			Иначе
				ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Для технологической операции номенклатура %1 с характеристикой %2 уже добавлена!'"),СтруктураПоиска.Номенклатура,СтруктураПоиска.ХарактеристикаНоменклатуры);
			КонецЕсли;
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиПоРемонтам

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
			Если СтрокаРемонта <> Неопределено Тогда
				ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
				ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
				ТекущиеДанные.РемонтыОборудования_ID = СтрокаРемонта.ID;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) ИЛИ ТекущиеДанные.Исполнитель = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиИсполнителей(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ШаблонВопроса = НСтр("ru = 'Исполнитель %1 указан для ремонтной работы. При изменении данный исполнитель будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.Исполнитель);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИсполнительНовый, МассивСтрокДереваРР", ТекущиеДанные, ВыбранноеЗначение, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамИсполнительОбработкаВыбораПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОбработкаВыбораПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ИсполнительНовый = ДополнительныеПараметры.ИсполнительНовый;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, Исполнитель", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.Исполнитель);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		ТекущиеДанные.Исполнитель = ИсполнительНовый;
		ИсполнителиПоРемонтамИсполнительПриИзменении(Элементы.ИсполнителиПоРемонтам);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	ИсполнителиПоРемонтамИсполнительОбработкаВыбора(Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		// Если сделать так, то вызывается событие ОбработкаВыбора, в противном случае - не вызывается. 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.УточнениеИсполнителя = Неопределено;
		торо_Ремонты.ЗаполнитьУточнениеИсполнителя(ТекущиеДанные.Исполнитель, ТекущиеДанные.УточнениеИсполнителя);
		УстановитьПараметрыВыбораДоговораБригады(ТекущиеДанные.Исполнитель, Элементы.ИсполнителиПоРемонтамУточнениеИсполнителя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьПараметрыВыбораДоговораБригады(ТекущиеДанные.Исполнитель, Элементы.ИсполнителиПоРемонтамУточнениеИсполнителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиИсполнителей(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		Отказ = Истина;
		
		ШаблонВопроса = НСтр("ru = 'Исполнитель %1 указан для ремонтной работы. При изменении данный исполнитель будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.Исполнитель);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, МассивСтрокДереваРР", ТекущиеДанные, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамПередУдалениемПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередУдалениемПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, Исполнитель", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.Исполнитель);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Модифицированность = Истина;
		Объект.ИсполнителиПоРемонтам.Удалить(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.УточнениеИсполнителя) ИЛИ ТекущиеДанные.УточнениеИсполнителя = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиДоговораБригады(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ШаблонВопроса = НСтр("ru = 'Договор/бригада %1 указан для ремонтной работы. При изменении данный договор/бригада будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.УточнениеИсполнителя);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИсполнительНовый, МассивСтрокДереваРР", ТекущиеДанные, ВыбранноеЗначение, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбораПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбораПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ИсполнительНовый = ДополнительныеПараметры.ИсполнительНовый;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, ДоговорБригада", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.УточнениеИсполнителя);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Модифицированность = Истина;
		ТекущиеДанные.УточнениеИсполнителя = ИсполнительНовый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОчистка(Элемент, СтандартнаяОбработка)
	
	ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбора(Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		// Если сделать так, то вызывается событие ОбработкаВыбора, в противном случае - не вызывается. 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамВсеРаботыИсполнителяЗавершеныПриИзменении(Элемент)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		СтруктураОтбора = Новый Структура("РемонтыОборудования_ID, ВсеРаботыИсполнителяЗавершены", ТекДанные.ID, Истина);
		ИсполнителиЗавершившиеРаботы = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураОтбора);	
		ВсеИсполнители = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
		
		Если ИсполнителиЗавершившиеРаботы.Количество() = ВсеИсполнители.Количество() Тогда
			ТекДанные.ЗавершитьРемонт = РаботыВсехИсполнителейЗавершены(ТекДанные.ID, СтруктураОтбора);
			ПриЗавершенииРемонта(ТекДанные);
		Иначе	
			ТекДанные.ЗавершитьРемонт = Ложь;
			ПриЗавершенииРемонта(ТекДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты
&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникПриИзменении(Элемент)
	ТекДанныеРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	МассивID = Новый Массив;
	ЗаполнитьМассивID(МассивID,ТекДанныеРабот);
	ОтметитьНаличиеАналогов(МассивID);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;

		Если НоваяСтрока И ТекСтрокаДереваРемонтныхРабот <> Неопределено Тогда
			Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
			Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		КонецЕсли;
		
		ТЧ = Объект.РемонтыОборудования;
		ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элемент.ТекущиеДанные.РемонтыОборудования_ID);
		торо_ЗаполнениеДокументов.ВыполнитьАвтоподставлениеСотрудникаИКвалификации(Элемент.ТекущиеДанные.Сотрудник, Элемент.ТекущиеДанные.Квалификация, ДатаНачалаРемонта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяРаботы,Элемент,Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);
		ТекущиеДанные.ВремяРаботы      = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьИсполнителейПоБригадам(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.КТУ = 1;
			
			Если Не ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
				СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
				ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
				ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
				ТекущиеДанные.ВремяРаботы = СтрокаРемонта.ДатаОкончания - СтрокаРемонта.ДатаНачала;
				ТекущиеДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТекущиеДанные.ВремяРаботы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыДатаНачалаПриИзменении(Элемент)
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		РассчитатьВремя(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыДатаОкончанияПриИзменении(Элемент)
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		РассчитатьВремя(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ТрудовыеЗатраты.ТекущиеДанные.РемонтыОборудования_ID);
	Квалификация = Элементы.ТрудовыеЗатраты.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыКвалификацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ТрудовыеЗатраты.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораКвалификацийСотрудника(Элементы.ТрудовыеЗатраты.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыКвалификацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ТрудовыеЗатраты.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораКвалификацийСотрудника(Элементы.ТрудовыеЗатраты.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыКвалификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ТрудовыеЗатраты.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораКвалификацийСотрудника(Элемент, ЭтотОбъект, Элементы.ТрудовыеЗатраты.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ТрудовыеЗатраты.ТекущиеДанные.РемонтыОборудования_ID);
	Квалификация = Элементы.ТрудовыеЗатраты.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ТрудовыеЗатраты.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораСотрудниковСКвалификацией(Элемент, ЭтотОбъект, Элементы.ТрудовыеЗатраты.ТекущиеДанные.Квалификация, ДатаНачалаРемонта, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСерийныеЗапчасти

&НаКлиенте
Процедура СерийныеЗапчастиЕдиницаИзмеренияНоваяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока.СерииИспользуются = ПолучитьСерииИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.СерияНоменклатуры = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиНоменклатураНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуютсяДляНовой = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.НоменклатураНовая);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуютсяДляНовой Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатурыНовая = Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока.СерииИспользуютсяДляНовой = ПолучитьСерииИспользуются(ТекущаяСтрока.НоменклатураНовая);
	ТекущаяСтрока.СерияНоменклатурыНовая = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидНоменклатуры", ВидНоменклатуры));
		ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);		
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.НоменклатураНовая, "ВидНоменклатуры");
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидНоменклатуры", ВидНоменклатуры));
		ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);	
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанныеРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	ТекДанныеЗапчасти = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	Если ТекДанныеРемонт <> Неопределено И НоваяСтрока И НЕ Копирование Тогда
		ТекДанныеЗапчасти.Количество = 1;
		ТекДанныеЗапчасти.КоличествоНовое = 1;
		ТекДанныеЗапчасти.СтатусДвиженияСерийныхЗЧ = ПредопределенноеЗначение("Перечисление.торо_ВидыДвиженияСерийныхЗЧ.ВозвратЗамена");
		ТекДанныеЗапчасти.СтатусДвиженияНовойЗЧ = ПредопределенноеЗначение("Перечисление.торо_ВидыДвиженияСерийныхЗЧ.Установка");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено,  НСтр("ru = 'Необходимо выбрать ремонт, для которого заполняется список запчастей!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанныеРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	ТекДанныеЗапчасти = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	Если Не ОтменаРедактирования И НоваяСтрока И ТекДанныеРемонт <> Неопределено Тогда
		
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекДанныеРемонт.ID;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанныеЗапчасти.СтатусДвиженияНовойЗЧ) И ЗначениеЗаполнено(ТекДанныеЗапчасти.СтатусДвиженияСерийныхЗЧ)
		И ТекДанныеЗапчасти.СтатусДвиженияНовойЗЧ = ТекДанныеЗапчасти.СтатусДвиженияСерийныхЗЧ Тогда
		
		ТекстСообщения = НСтр("ru='Статусы движения старой и новой запчасти должны различаться!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
		ОтменаРедактирования = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиХарактеристикаНоменклатурыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиХарактеристикаНоменклатурыНоваяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.НоменклатураНовая);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиХарактеристикаНоменклатурыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиХарактеристикаНоменклатурыНоваяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.НоменклатураНовая);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.СерийныеЗапчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.СерийныеЗапчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.СерийныеЗапчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиХарактеристикаНоменклатурыНоваяСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.СерийныеЗапчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрываемыеПредписания
&НаКлиенте
Процедура ЗакрываемыеПредписанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПодборЗакрываемыхПредписаний(Команды.Найти("ПодборЗакрываемыхПредписаний"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРО = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекущиеДанныеРО = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран ремонт для прикрепления предписаний!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДокументыОснованияОтбор = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВыбранноеЗначение.ДокументОснование));
	Если ДокументыОснованияОтбор.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Выбранное внешнее основание уже имеется в документах-основаниях!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗакрываемыеПредписанияОбработкаВыбораСервер(ВыбранноеЗначение);
	
	Для каждого Строка Из Объект.МатериальныеЗатраты Цикл
		Строка.ХарактеристикиИспользуются = ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры);
	КонецЦикла;
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
	
	Модифицированность = Истина;
		
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина); 
	
КонецПроцедуры

&НаСервере
Процедура ЗакрываемыеПредписанияОбработкаВыбораСервер(ВыбранноеЗначение) 
		
	торо_Ремонты.ЗакрываемыеПредписанияОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументВнешнегоОснования) И Поле.Имя = "ЗакрываемыеПредписанияДокументВнешнегоОснования" Тогда
		СтруктураПараметров = Новый Структура("Ключ", Элемент.ТекущиеДанные.ДокументВнешнегоОснования);
		ОткрытьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаОбъекта", СтруктураПараметров);		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрываемыеПредписанияПередУдалениемЗавершение",
			ЭтаФорма), Вопрос, РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияПередУдалениемЗавершение(Результат, ДопПараметры) Экспорт
	
	ТекДанные = Элементы.ЗакрываемыеПредписания.ТекущиеДанные;
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтрокиДокОснования = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументВнешнегоОснования));
		Если СтрокиДокОснования.Количество() <> 0 Тогда
			Для Каждого СтрокаДокумента Из СтрокиДокОснования Цикл
				ОчиститьСвязанныеТабличныеЧасти(СтрокаДокумента.ДокументОснование);
				Объект.ДокументыОснования.Удалить(СтрокаДокумента);
			КонецЦикла; 
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыВнутреннееПотребление
&НаКлиенте
Процедура ДокументыВнутреннееПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ВнутреннееПотребление);
		ОписаниеОповещения  = Новый ОписаниеОповещения("ОбновитьДокументыВнутреннегоПотребления",ЭтаФорма);
		ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВнутреннееПотреблениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭлементТекДанные  = Элемент.ТекущиеДанные;
		Если Не ЭлементТекДанные = Неопределено Тогда
			ЭлементТекДанные.РемонтыОборудования_ID = ТекущиеДанные.ID;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОприходованиеИзлишков
&НаКлиенте
Процедура ДокументыОприходованиеИзлишковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ОприходованиеИзлишков);
		ОписаниеОповещения  = Новый ОписаниеОповещения("ОбновитьДокументыОприходованияИзлишков",ЭтаФорма);
		ОткрытьФорму("Документ.ОприходованиеИзлишковТоваров.ФормаОбъекта",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОприходованиеИзлишковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭлементТекДанные  = Элемент.ТекущиеДанные;
		Если Не ЭлементТекДанные = Неопределено Тогда
			ЭлементТекДанные.РемонтыОборудования_ID = ТекущиеДанные.ID;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования 

&НаКлиенте
Процедура ДокументыОснованияПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Элементы.ЗакрываемыеПредписания.ОтборСтрок = Новый ФиксированнаяСтруктура("ДокументВнешнегоОснования", Элемент.ТекущиеДанные.ДокументОснование);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Иначе
			Если ПолучитьФОПовышеннаяОпасность()
				И ТипЗнч(ТекДанные.ДокументОснование) <> Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
				ЗаполнитьТабОперацийБезНаряда(ТекДанные.ДокументОснование);
			КонецЕсли;
			
			Если ТабОперацийБезНаряда.Количество() = 0 Тогда
		
				МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
				Если МасСтр.Количество() > 1 Тогда
					ТекстСообщения = НСтр("ru = 'Данный документ-основание уже добавлен!'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				Иначе
					СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
					Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
						Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
						СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
						ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Отказ = Истина;
				ОткрытьФорму("ОбщаяФорма.торо_ФормаОперацийБезНарядов", Новый Структура("ТабОперацийБезНаряда, ДокОснование", ТабОперацийБезНаряда, ТекДанные.ДокументОснование), ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийДокументОснование = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	
	Если ТекущийДокументОснование = Неопределено Тогда
		СписокВыбора = торо_ЗаполнениеДокументов.СформироватьСписокВыбораТипаДокументаОснования(Объект.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент", Элемент));
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбор типа данных'"));
	Иначе
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ТипЗнч(ТекущийДокументОснование), ТекущийДокументОснование, Элемент, ЭтаФорма.КлючУникальности);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ДополнительныеПараметры.Элемент;
	торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ВыбранныйЭлемент.Значение, Неопределено, Элемент, ЭтаФорма.КлючУникальности);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыСостоянияПоказателиНаработки

&НаКлиенте
Процедура ДокументыСостоянияПоказателиНаработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыОткрытия = Новый Структура("Ключ", ВыбраннаяСтрока);
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.торо_СостоянияОбъектовРемонта") Тогда
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.Форма.ФормаДокумента", ПараметрыОткрытия);
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.торо_УчетКонтролируемыхПоказателей") Тогда
		ОткрытьФорму("Документ.торо_УчетКонтролируемыхПоказателей.Форма.ФормаДокумента", ПараметрыОткрытия);
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.торо_УчетНаработкиОборудования") Тогда 
		ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаДокумента", ПараметрыОткрытия);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоЗаявке(Команда)
	
	ТекущийРемонтОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонтОборудования <> Неопределено Тогда
		IDРемонта = ТекущийРемонтОборудования.ID;
		СерийныеЗапчастиРемонта = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", IDРемонта));
		СерийныеЗапчасти = Объект.СерийныеЗапчасти;
		Если СерийныеЗапчастиРемонта.Количество() > 0 тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоЗаявкеЗавершение", ЭтотОбъект, Новый Структура("СерийныеЗапчасти", СерийныеЗапчасти)), НСтр("ru = 'Очистить табличную часть Серийные Запчасти документа?'"),РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗапчастиПоЗаявкеФрагмент(СерийныеЗапчасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоНормам_ТекущийРемонт(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Запчасти"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗапчастиПоНормамНаСервере(ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоНормам_ВсеРемонты(Команда)
	
	Если Объект.СерийныеЗапчасти.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.СерийныеЗапчасти);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Запчасти"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗапчастиПоНормамНаСервере(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.СерийныеЗапчасти.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.СерийныеЗапчасти.Очистить();
		КонецЕсли;
		ЗаполнитьЗапчастиПоНормамНаСервере(ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗапчастиПоНормамНаСервере(ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьЗапчастиПоНормам(ЭтаФорма, ИДТекущегоРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоОснованию_ТекущийРемонт(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Запчасти"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗапчастиПоОснованиюНаСервере(ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.СерийныеЗапчасти.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.СерийныеЗапчасти);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Запчасти"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗапчастиПоОснованиюНаСервере(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.СерийныеЗапчасти.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.СерийныеЗапчасти.Очистить();
		КонецЕсли;
		ЗаполнитьЗапчастиПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗапчастиПоОснованиюНаСервере(ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьЗапчастиПоОснованию(ЭтаФорма, ИДТекущегоРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.ТрудовыеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеРемонты(Команда)
	
	Если Объект.ТрудовыеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.ТрудовыеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ТрудовыеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьИсполнителейПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "ТрудовыеЗатраты");
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.МатериальныеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ВсеРемонты(Команда)
	
	Если Объект.МатериальныеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.МатериальныеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.МатериальныеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьМатериалыПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта, ЗаполнитьАналоги = Истина)
	
	торо_Ремонты.ЗаполнитьМатериалыПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "МатериальныеЗатраты");
	
	Если ЗаполнитьАналоги Тогда
		Если ИДТекущегоРемонта <> Неопределено Тогда
			Ремонт = Объект.РемонтыОборудования.НайтиПоИдентификатору(ИДТекущегоРемонта);
			МассивIDОпераций = ПолучитьIDОперацийПоIDРемонта(Объект, Ремонт.ID);
		Иначе
			МассивIDОпераций = ПолучитьIDОперацийПоIDРемонта(Объект);
		КонецЕсли;
		ОтметитьНаличиеАналогов(МассивIDОпераций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьIDОперацийПоIDРемонта(Объект, IDРемонта = Неопределено)
	
	МассивID = Новый Массив;
	Если IDРемонта = Неопределено Тогда
		Для Каждого Строка Из Объект.РемонтныеРаботы Цикл
			МассивID.Добавить(Строка.ID);
		КонецЦикла;
	Иначе
		МассивСтрокПоОтбору = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", IDРемонта));
		Для Каждого Строка Из МассивСтрокПоОтбору Цикл
			МассивID.Добавить(Строка.ID);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивID;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаленияИсполнители = Новый Массив;
	Для каждого Строка из Объект.ТрудовыеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияИсполнители.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", Новый Массив);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаленияПодрядчики = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	МассивСтрокДляУдаленияИсполнители = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.ИсполнителиПоРемонтам.Количество() > 0 
		ИЛИ Объект.ТрудовыеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", Объект.ИсполнителиПоРемонтам);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики Цикл
				Объект.ИсполнителиПоРемонтам.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ИсполнителиПоРемонтам.Очистить();
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители Цикл
				Объект.ТрудовыеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ТрудовыеЗатраты.Очистить();
		КонецЕсли;
		
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если ЗначениеЗаполнено(Строка.ДатаНачала) И ЗначениеЗаполнено(Строка.ДатаОкончания) И НЕ ЗначениеЗаполнено(Строка.ВремяРаботы) Тогда 
			Строка.ВремяРаботы = Строка.ДатаОкончания - Строка.ДатаНачала;
		КонецЕсли;

		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.МатериальныеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.МатериальныеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.МатериальныеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.МатериальныеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьМатериалыПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта, ЗаполнитьАналоги = Истина)
	
	торо_Ремонты.ЗаполнитьМатериалыПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Если ЗаполнитьАналоги Тогда
		Если ИДТекущегоРемонта <> Неопределено Тогда
			Ремонт = Объект.РемонтыОборудования.НайтиПоИдентификатору(ИДТекущегоРемонта);
			МассивIDОпераций = ПолучитьIDОперацийПоIDРемонта(Объект, Ремонт.ID);
		Иначе
			МассивIDОпераций = ПолучитьIDОперацийПоIDРемонта(Объект);
		КонецЕсли;
		ОтметитьНаличиеАналогов(МассивIDОпераций);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудника(Команда)
	ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификации(Команда)
	ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиПоРасценкеТехОперации(Команда)
	ЗаполнитьСтоимостиПоРасценкеТехОперацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВремяРаботыПоНормативам(Команда)
	ЗаполнитьВремяРаботыПоНормативамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВремяРаботыПоДлительностиСУчетомГрафика(Команда)
	ЗаполнитьВремяРаботыПоДлительностиСУчетомГрафикаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт <> Неопределено И ЗначениеЗаполнено(ТекущийРемонт.ДатаНачала) Тогда 
		ДатаОтбора = ТекущийРемонт.ДатаНачала;
	Иначе
		ДатаОтбора = ТекущаяДата();
	КонецЕсли;

	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", 
		Новый Структура("МножественныйВыбор, ДатаОтбора, Отбор", Истина, ДатаОтбора, 
		Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"))), 
		Элементы.ДеревоРемонтныхРабот);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ДокументыОснования = Новый СписокЗначений;
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ДокументыОснования.Добавить(СтрокаДО.ДокументОснование);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ДокументыОснования", ДокументыОснования);
	
	ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот", 
		ПараметрыФормы, Элементы.РемонтыОборудования, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредписаний(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписаний",
	Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнутреннееПотребление(Команда)
	
	Если Объект.РемонтыОборудования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьВнутреннееПотреблениеВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования внутреннего потребления необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		ДобавитьВнутреннееПотреблениеПослеВопроса();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьВнутреннееПотреблениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьВнутреннееПотреблениеПослеВопроса();	 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьВнутреннееПотреблениеПослеВопроса()
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКСписаниюНаСервере(ТекущийРемонт.ID);
		
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			
			// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.			
			МассивСтрокНоменклатуры = Новый Массив;
			
		КонецЕсли;	
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры",МассивСтрокНоменклатуры);
		ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
		ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
		ЗначенияЗаполнения.Вставить("Ответственный", Объект.Ответственный);
		
		ЗначенияЗаполнения.Вставить("Комментарий" , Строка(Объект.Ссылка) + " " + ТекущийРемонт.ОбъектРемонта + " " + 
																	ТекущийРемонт.ВидРемонтныхРабот + " " + ТекущийРемонт.ДатаНачала + " - " + 
																	ТекущийРемонт.ДатаОкончания);
		
		СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		МассивID = Новый Массив;
		МассивID.Добавить(ТекущийРемонт.ID);
		СтруктураПараметров.Вставить("ID", МассивID);
		
		СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
		СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID",ТекущийРемонт.ID);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов", ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
		ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СводныйДокументВнутреннееПотребление(Команда)
	
	Если Объект.РемонтыОборудования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СводныйДокументВнутреннееПотреблениеВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования сводного документа внутреннего потребления необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		СводныйДокументВнутреннееПотреблениеПослеВопроса();	
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СводныйДокументВнутреннееПотреблениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	   Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		СводныйДокументВнутреннееПотреблениеПослеВопроса();		 
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СводныйДокументВнутреннееПотреблениеПослеВопроса()
	
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	
	МассивСтрокНоменклатуры = Новый Массив;	
	МассивID = Новый Массив;
	
	СтрокаКомментария = "";
	
	Для Каждого ТекущийРемонт Из Объект.РемонтыОборудования Цикл
		СтрокаКомментария = СтрокаКомментария + " " + Строка(Объект.Ссылка) + " " + ТекущийРемонт.ОбъектРемонта + " " + 
		ТекущийРемонт.ВидРемонтныхРабот + " " + ТекущийРемонт.ДатаНачала + " - " + 
		ТекущийРемонт.ДатаОкончания;
		
		МассивID.Добавить(ТекущийРемонт.ID);
	КонецЦикла;
	
	МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКСписаниюНаСервере(МассивID);
	Если МассивСтрокНоменклатуры = Неопределено Тогда
		
		// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.			
		МассивСтрокНоменклатуры = Новый Массив;
	КонецЕсли;
		
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("МассивID", МассивID);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	ЗначенияЗаполнения.Вставить("Ответственный", Объект.Ответственный);
	ЗначенияЗаполнения.Вставить("КлючНазначенияИспользования", "СОЗДАНИЕ_ПОТРЕБЛЕНИЯ_ИЗ_ТОИР");
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры",МассивСтрокНоменклатуры);
	ЗначенияЗаполнения.Вставить("Комментарий" , СтрокаКомментария);
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("ID", МассивID);

	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный",ЭтаФорма,СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента", СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещения);

КонецПроцедуры 

&НаКлиенте
Процедура УдалитьДокументВнутреннееПотребление(Команда)
	ТекущиеДанные = Элементы.ДокументыВнутреннееПотребление.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументЕРПСсылка",ТекущиеДанные.ВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"               ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,НСтр("ru = 'Удаление связи с заказом на внутреннее потребление'"));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСводныйВП(Элемент)
	Если Не Элемент = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументЕРПСсылка",Элемент.ВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"               ,Элемент.ID);
		ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления(КодВозвратаДиалога.Да, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоказателиНаработкуСостояния(Команда)
	ТекущиеДанные = Элементы.ДокументыСостоянияПоказателиНаработки.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
		СтруктураПараметров = Новый Структура("Документ", ТекущиеДанные.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьПоказателиНаработкуСостоянияЗавершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОприходованиеИзлишков(Команда)
	
	Если Объект.РемонтыОборудования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьОприходованиеИзлишковВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования документа оприходования излишков необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		ДобавитьОприходованиеИзлишковПослеВопроса();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьОприходованиеИзлишковВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьОприходованиеИзлишковПослеВопроса();	 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОприходованиеИзлишковПослеВопроса()
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКОприходованиюНаСервере(ТекущийРемонт.ID);
		
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			
			// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе оприходование излишков.			
			МассивСтрокНоменклатуры = Новый Массив;
			
		КонецЕсли;	
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);
		
		ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
		ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
		ЗначенияЗаполнения.Вставить("Ответственный", Объект.Ответственный);
		
		ЗначенияЗаполнения.Вставить("Комментарий" , Строка(Объект.Ссылка) + " " + ТекущийРемонт.ОбъектРемонта + " " + 
		                            ТекущийРемонт.ВидРемонтныхРабот + " " + Формат(ТекущийРемонт.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'")) + " - " + 
		                            Формат(ТекущийРемонт.ДатаОкончания, НСтр("ru = 'ДФ=dd.MM.yyyy'")));
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
		СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
		СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID", ТекущийРемонт.ID);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов", ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
		ОткрытьФорму("Документ.ОприходованиеИзлишковТоваров.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйДокументОприходованиеИзлишков(Команда)
	
	Если Объект.РемонтыОборудования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СводныйДокументОприходованиеИзлишковВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования сводного документа оприходования излишков необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		СводныйДокументОприходованиеИзлишковПослеВопроса();	
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СводныйДокументОприходованиеИзлишковВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	   Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		СводныйДокументОприходованиеИзлишковПослеВопроса();		 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйДокументОприходованиеИзлишковПослеВопроса()
	
	МассивСтрокНоменклатуры = Новый Массив;	
	МассивID = Новый Массив;
	
	СтрокаКомментария = Строка(Объект.Ссылка);
	
	Для Каждого ТекущийРемонт Из Объект.РемонтыОборудования Цикл
		
		СтрокаКомментария = СтрокаКомментария + " " + ТекущийРемонт.ОбъектРемонта + " " + 
		                    ТекущийРемонт.ВидРемонтныхРабот + " " + Формат(ТекущийРемонт.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'")) + " - " + 
		                    Формат(ТекущийРемонт.ДатаОкончания, НСтр("ru = 'ДФ=dd.MM.yyyy'")); 
		
		МассивID.Добавить(ТекущийРемонт.ID);
		
	КонецЦикла;
	
	МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКОприходованиюНаСервере(МассивID);
	Если МассивСтрокНоменклатуры = Неопределено Тогда
		
		// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе оприходование излишков.			
		МассивСтрокНоменклатуры = Новый Массив;
	КонецЕсли;
	
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("МассивID", МассивID);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	ЗначенияЗаполнения.Вставить("Ответственный", Объект.Ответственный);
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);
	ЗначенияЗаполнения.Вставить("Комментарий", СтрокаКомментария);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СОЗДАНИЕ_ОПРИХОДОВАНИЯ_ИЗ_ТОИР");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный", ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ОприходованиеИзлишковТоваров.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументОприходованиеИзлишков(Команда)
	ТекущиеДанные = Элементы.ДокументыОприходованиеИзлишков.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументЕРПСсылка", ТекущиеДанные.ОприходованиеИзлишков);
		СтруктураПараметров.Вставить("ID"               ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемОпрИзлишков",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,НСтр("ru = 'Удаление связи с документом оприходования излишков товаров'"));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте 
Процедура УдалитьСводныйОИ (Элемент)
	Если Не Элемент = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументЕРПСсылка",Элемент.ОприходованиеИзлишков);
		СтруктураПараметров.Вставить("ID"               ,Элемент.ID);
		ОбработкаВыбораДействияПользователяПередУдалениемОпрИзлишков(КодВозвратаДиалога.Да, СтруктураПараметров);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей(Команда)
	
	ПараметрыОткрытия = Новый Структура("Ссылка, МассивИсполнителей", Объект.Ссылка, ПолучитьМассивСтруктурИсполнителей());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаАвтоматическогоЗаполненияИсполнителей", ЭтаФорма);
	ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаАвтозаполненияИсполнителей",ПараметрыОткрытия, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	Склад = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад");
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Склад) И Не ТекущиеДанные = Неопределено Тогда
	    Склад = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОбъектРемонта, "СкладОбеспеченияМТР", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Склад", Склад);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляДокумента(Команда)
	
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("СписокПодразделений", ПолучитьСписокПодразделений(ID_ОтбораРемонтов));
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.ТрудовыеЗатраты);
	стрПараметров.Вставить("ВидПодбора", "ПоДокументу");
	стрПараметров.Вставить("ID", Неопределено);
	стрПараметров.Вставить("РемонтыОборудования_ID", Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.ТрудовыеЗатраты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляОперации(Команда)
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов = Неопределено тогда
		ID_Отбора = Неопределено;
	Иначе
		МасИД = Новый Массив;
		ID_Отбора = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасИД, ТекСтрокаДереваРемонтов.ПолучитьЭлементы());
		ID_Отбора.Добавить(ТекСтрокаДереваРемонтов.ID);
		
		Для каждого текСтрока из МасИД цикл
			ID_Отбора.Добавить(текСтрока.ID);
		КонецЦикла;
	КонецЕсли;
	
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("СписокПодразделений", ПолучитьСписокПодразделений(ID_ОтбораРемонтов));
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.ТрудовыеЗатраты);
	стрПараметров.Вставить("ВидПодбора", "ПоОперации");
	стрПараметров.Вставить("ID", ID_Отбора);
	стрПараметров.Вставить("РемонтыОборудования_ID", ID_ОтбораРемонтов);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.ТрудовыеЗатраты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыРаботПоРемонту(Команда)
	ТекДанныеРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекДанныеРемонта = Неопределено Тогда
		ИмяПоляДляОтбора = "РемонтыОборудования_ID";
		
		Если Элементы.СтраницыИсполнители.ТекущаяСтраница = Элементы.СтраницаПодрядчики Тогда
			ИмяТЧ = "ИсполнителиПоРемонтам";
			ИмяТЧДляПользователя = "Исполнители по ремонтам";
		Иначе
		    ИмяТЧ = "ТрудовыеЗатраты";
			ИмяТЧДляПользователя = "Трудовые затраты";
		КонецЕсли; 

		ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяПоляДляОтбора, ИмяТЧДляПользователя", ИмяТЧ, ИмяПоляДляОтбора, ИмяТЧДляПользователя) ;
		Если ЕстьЗаполненныеДатыУИсполнителейРемонта(ИмяТЧ, ИмяПоляДляОтбора, ТекДанныеРемонта.ID) Тогда
		    ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДатыРаботПоРемонтуЗавершение", ЭтотОбъект, ДополнительныеПараметры), НСтр("ru = 'Даты уже заполнены. Перезаполнить их?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
		    ЗаполнитьДатыРаботПоРемонтуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЕстьЗаполненныеДатыУИсполнителейРемонта(ИмяТЧ, ИмяПоляДляОтбора, ID)
	ОтборСтрок = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(ИмяПоляДляОтбора, ID));
	Для каждого Исполнитель Из ОтборСтрок Цикл
	    Если Не Исполнитель.ДатаНачала = Дата("00010101") ИЛИ Не Исполнитель.ДатаОкончания = Дата("00010101") Тогда
		    Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;
КонецФункции
 
&НаКлиенте
Процедура ЗаполнитьДатыРаботПоРемонтуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекДанныеРемонта = Элементы.РемонтыОборудования.ТекущиеДанные; 
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	ИмяПоляДляОтбора = ДополнительныеПараметры.ИмяПоляДляОтбора;
	ИмяТЧДляПользователя = ДополнительныеПараметры.ИмяТЧДляПользователя;
	Если ИмяТЧДляПользователя = "Исполнители по ремонтам" Тогда
		ИмяЗакладки = "По ремонту";
	ИначеЕсли ИмяТЧДляПользователя = "Трудовые затраты" Тогда 
		ИмяЗакладки = "По операциям";
	КонецЕсли;	
	
	ОтборСтрок = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(ИмяПоляДляОтбора, ТекДанныеРемонта.ID));
	Если ОтборСтрок.Количество() = 0 Тогда
	    Возврат;
	КонецЕсли; 
	
	Для каждого Исполнитель Из ОтборСтрок Цикл
		ПересчитыватьВремя = Ложь;
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ДатаНачалаДляЗаполнения = ТекДанныеРемонта.ДатаНачала;
			ДатаОкончанияДляЗаполнения = ТекДанныеРемонта.ДатаОкончания;
			ПересчитыватьВремя = Истина;
		Иначе
			ДатаНачалаДляЗаполнения = ?(Исполнитель.ДатаНачала = Дата("00010101"), ТекДанныеРемонта.ДатаНачала, Исполнитель.ДатаНачала);
			ДатаОкончанияДляЗаполнения = ?(Исполнитель.ДатаОкончания = Дата("00010101"), ТекДанныеРемонта.ДатаОкончания, Исполнитель.ДатаОкончания);			
		КонецЕсли; 
		
		Если ДатаОкончанияДляЗаполнения < ДатаНачалаДляЗаполнения Тогда
			Если Исполнитель.ДатаНачала = Дата("00010101") Тогда
				ШаблонСообщения = НСтр("ru = 'На закладке ""%1"" в табличной части ""%2"" в строке %3 не заполнена дата начала (дата окончания не должна быть меньше даты начала)'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяЗакладки, ИмяТЧДляПользователя, Исполнитель.НомерСтроки);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			Если Исполнитель.ДатаОкончания = Дата("00010101") Тогда
				ШаблонСообщения = НСтр("ru = 'На закладке ""%1"" в табличной части ""%2"" в строке %3 не заполнена дата окончания (дата окончания не должна быть меньше даты начала)'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяЗакладки, ИмяТЧДляПользователя, Исполнитель.НомерСтроки);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
		    Продолжить;
		КонецЕсли; 		
		
  		Если РезультатВопроса = КодВозвратаДиалога.Нет И (Исполнитель.ДатаНачала = Дата("00010101") ИЛИ Исполнитель.ДатаОкончания = Дата("00010101")) Тогда
			ПересчитыватьВремя = Истина;
  		КонецЕсли;

		Исполнитель.ДатаНачала = ДатаНачалаДляЗаполнения;
		Исполнитель.ДатаОкончания = ДатаОкончанияДляЗаполнения;
		Если Элементы.СтраницыИсполнители.ТекущаяСтраница = Элементы.СтраницаХозспособ И ПересчитыватьВремя Тогда
			Исполнитель.ВремяРаботы = ДатаОкончанияДляЗаполнения - ДатаНачалаДляЗаполнения;
			Исполнитель.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ДатаОкончанияДляЗаполнения - ДатаНачалаДляЗаполнения);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтролируемыеПоказатели(Команда)
	
	ЕстьВозможностьВвода = ПроверитьВозможностьВвода("торо_УчетКонтролируемыхПоказателей");
	
	Если ЕстьВозможностьВвода Тогда
		ОткрытьФорму("Документ.торо_УчетКонтролируемыхПоказателей.Форма.ФормаДокумента", 
		Новый Структура("Основание", Объект.Ссылка));
	Иначе
		ТекстСообщения = НСтр("ru = 'Настройки ввода на основании запрещают ввести документ ""Учет контролируемых показателей"" на основании выбранного документа.
		|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаработку(Команда)
	
	ЕстьВозможностьВвода = ПроверитьВозможностьВвода("торо_УчетНаработкиОборудования");
	
	Если ЕстьВозможностьВвода Тогда
		ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаДокумента", 
		Новый Структура("Основание", Объект.Ссылка));
	Иначе
		ТекстСообщения = НСтр("ru = 'Настройки ввода на основании запрещают ввести документ ""Учет наработки оборудования"" на основании выбранного документа.
		|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСостояниеОР(Команда)
	
	ЕстьВозможностьВвода = ПроверитьВозможностьВвода("торо_СостоянияОбъектовРемонта");
	
	Если ЕстьВозможностьВвода Тогда
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.Форма.ФормаДокумента", 
		Новый Структура("Основание", Объект.Ссылка));
	Иначе
		ТекстСообщения = НСтр("ru = 'Настройки ввода на основании запрещают ввести документ ""Состояния объектов ремонта"" на основании выбранного документа.
		|Настройка и администрирование -> Настройка параметров системы -> Интерфейс и ввод документов -> Настройка бизнес-процессов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗакрываемыхПредписаний(Команда)
	
	ТекДанныеРемОборуд = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанныеРемОборуд = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ремонт оборудования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписанийОпераций",
	Новый Структура("ОбъектРемонтаДляОтбора", ТекДанныеРемОборуд.ОбъектРемонта), Элементы.ЗакрываемыеПредписания, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаКлиенте 
Процедура РассчитатьВремя(ИдСтроки)
	текДанные = Объект.ТрудовыеЗатраты.НайтиПоИдентификатору(ИдСтроки);
	текДанные.ВремяРаботы = текДанные.ДатаОкончания - текДанные.ДатаНачала;
	текДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(текДанные.ВремяРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)
	
	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	|	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	|ГДЕ
	|	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивIDДляПроверки = Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Объект.Ссылка, МассивIDДляПроверки);
	
	Если Не МассивIDДляБлокировки = Неопределено Тогда
		
		Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
			СтрокаРемонта.БлокироватьДляИзменения = Не МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения, ОбъектРемонта)
	
	// Заглушка для случаев с запрещенным ОР при включенном РЛС.
	Если ЗапретитьРедактирование Тогда
		Возврат;
	КонецЕсли;

	ПризнакВестиУчетСерийныхЗапчастей = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ОбъектРемонта, "ВестиУчетСерийныхЗапчастей");
	
	Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр			= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.МатериальныеЗатраты.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.ДокументыВнутреннееПотребление.ТолькоПросмотр	= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ТрудовыеЗатраты.ТолькоПросмотр					= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.ИсполнителиПоРемонтам.ТолькоПросмотр		= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.СерийныеЗапчасти.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"] 
																			ИЛИ НЕ ПризнакВестиУчетСерийныхЗапчастей;
	
	Элементы.ДобавитьВнутреннееПотребление.Доступность				= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивноеДобвалениеВнутреннихПотреблений И (НЕ ФОВводПотребленияНаОснованииПроведенного ИЛИ (ФОВводПотребленияНаОснованииПроведенного И Объект.Проведен));
	Элементы.СводныйДокументВнутреннееПотребление.Доступность		= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивноеДобвалениеВнутреннихПотреблений И (НЕ ФОВводПотребленияНаОснованииПроведенного ИЛИ (ФОВводПотребленияНаОснованииПроведенного И Объект.Проведен));
	Элементы.УдалитьДокументВнутреннееПотребление.Доступность		= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивнаяПометкаУдаленияВнутреннихПотреблений;
	Элементы.ДобавитьОприходованиеИзлишков.Доступность				= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивноеДобвалениеОприходованияИзлишков И (НЕ ФОВводОприходованияНаОснованииПроведенного ИЛИ (ФОВводОприходованияНаОснованииПроведенного И Объект.Проведен));
	Элементы.СводныйДокументОприходованиеИзлишков.Доступность       = Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивноеДобвалениеОприходованияИзлишков И (НЕ ФОВводОприходованияНаОснованииПроведенного ИЛИ (ФОВводОприходованияНаОснованииПроведенного И Объект.Проведен));
	Элементы.УдалитьДокументОприходованиеИзлишков.Доступность		= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивнаяПометкаУдаленияОприходованияИзлишков;
	Элементы.ДеревоРемонтныхРаботДобавить.Доступность				= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботДобавитьТехКарту.Доступность		= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботДобавитьТехОперацию.Доступность	= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.Заполнить.Доступность									= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);;
	Элементы.ДеревоРемонтныхРаботУказатьПараллельноВыполняемые.Доступность = Не БлокироватьДляИзменения И НЕ Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые.Доступность = Не БлокироватьДляИзменения И НЕ Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	
	ДоступностьПодбораЗапчастей = НЕ Элементы.СерийныеЗапчасти.ТолькоПросмотр;
	Элементы.СерийныеЗапчастиЗапчастиПодборНоменклатуры.Доступность = ДоступностьПодбораЗапчастей И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.СерийныеЗапчастиЗаполнитьЗапчастиПоНормам_ТекущийРемонт.Доступность = ДоступностьПодбораЗапчастей И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.СерийныеЗапчастиЗаполнитьЗапчастиПоНормам_ВсеРемонты.Доступность = ДоступностьПодбораЗапчастей И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.СерийныеЗапчастиЗаполнитьЗапчастиПоОснованию_ТекущийРемонт.Доступность = ДоступностьПодбораЗапчастей И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.СерийныеЗапчастиЗаполнитьЗапчастиПоОснованию_ВсеРемонты.Доступность = ДоступностьПодбораЗапчастей И ЗначениеЗаполнено(Объект.РемонтыОборудования);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСерииИспользуются(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
	
КонецФункции

&НаСервере
Процедура ОбновитьДобавленныеКолонкиТаблиц()
	
	ЗаполнитьИспользованиеХарактеристикНоменклатуры();
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;	
	
	РемонтыОборудованияОбновитьДокументыИсточники();
	торо_Ремонты.РемонтыОборудованияОбновитьВидРемонтаВОиВД(Объект.Ссылка, Объект.РемонтыОборудования);
	
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;

	ОтметитьНаличиеАналогов();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользованиеХарактеристикНоменклатуры()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериальныеЗатраты,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.СерийныеЗапчасти,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура, НоменклатураНовая", "ХарактеристикиИспользуются", "ХарактеристикиИспользуютсяДляНовой")));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.СерийныеЗапчасти,
		Новый Структура("ЗаполнитьПризнакСерииИспользуются",
		Новый Структура("Номенклатура, НоменклатураНовая", "СерииИспользуются", "СерииИспользуютсяДляНовой")));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	// Оформление поля характеристики для запчастей.	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерийныеЗапчастиХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеЗапчасти.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерийныеЗапчастиХарактеристикаНоменклатурыНовая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеЗапчасти.ХарактеристикиИспользуютсяДляНовой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	// Оформление поля Серия для запчастей.	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерийныеЗапчастиСерияНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеЗапчасти.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерийныеЗапчастиСерияНоменклатурыНовая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеЗапчасти.СерииИспользуютсяДляНовой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудовыеЗатратыВремяРаботыТекст.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТрудовыеЗатраты.ВремяРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	        	
	// ТолькоПросмотр вида ремонта ремонтов оборудование.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияВидРемонтныхРабот.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ВидРемонтаВОиВД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ДокументНачалаЦепочкиВОИлиВД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь); 
			
	// ТолькоПросмотр корня дерева ремонтных работ 
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.Имя);
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.РемонтнаяРабота");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Ремонтные работы";

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТолькоПросмотр для Новой операции 
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботНоваяОперация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.ТехОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.торо_ТехнологическиеОперации.ПустаяСсылка();

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботИсполнитель.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботДоговорБригада.Имя);
	                  
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.ЭтоТехКарта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Представление = "ДоступностьИсполнителяДляТехОперации";
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	Элемент.Использование = Истина;
	
	// Согласование++
	торо_РаботаССогласованиями.ДобавитьУсловноеОформлениеДляДереваСогласования(ЭтаФорма);
	// Согласование--
	
	торо_ТехнологическиеКарты.ДобавитьУсловноеОформлениеДляПараллельныхТОТК(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот(Родитель)
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(Родитель.ПолучитьИдентификатор());
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура;
	СтруктураТабличныхЧастей.Вставить("МатериальныеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ТрудовыеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ЗакрываемыеПредписания");

	СтруктураТабличныхЧастейПоРемонтам = Новый Структура;
	СтруктураТабличныхЧастейПоРемонтам.Вставить("СерийныеЗапчасти");
	СтруктураТабличныхЧастейПоРемонтам.Вставить("ИсполнителиПоРемонтам");
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
				СтрокиПредписаний = Объект.ЗакрываемыеПредписания.НайтиСтроки(Новый Структура("ДокументВнешнегоОснования", ДокументОснование));
				Если СтрокиРО.Количество() = 0 Тогда
					ОчиститьСвязанныеТабличныеЧастиПоПредписанию(СтрокиПредписаний);
				КонецЕсли;
				Для Каждого Предписание Из СтрокиПредписаний Цикл 
					Объект.ЗакрываемыеПредписания.Удалить(Предписание);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			ДокументыВП = ДокументыВнутреннееПотребление.НайтиСтроки(Новый Структура("ID", ОчереднаяСтрока.ID));
			Для Каждого ДокументВП Из ДокументыВП Цикл 
				ДокументыВнутреннееПотребление.Удалить(ДокументВП);
			КонецЦикла;
			
			ДокументыОприходования = ДокументыОприходованиеИзлишков.НайтиСтроки(Новый Структура("ID", ОчереднаяСтрока.ID));
			Для Каждого ДокументОИ Из ДокументыОприходования Цикл 
				ДокументыОприходованиеИзлишков.Удалить(ДокументОИ);
			КонецЦикла;
			
			Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
				
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, Ремонт_ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
			Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
				СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID",Ремонт_ID));
				Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
					Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ДокументыВП = ДокументыВнутреннееПотребление.НайтиСтроки(Новый Структура("ID", Ремонт_ID));
		Для Каждого ДокументВП Из ДокументыВП Цикл 
			ДокументыВнутреннееПотребление.Удалить(ДокументВП);
		КонецЦикла;
		
		ДокументыОприходования = ДокументыОприходованиеИзлишков.НайтиСтроки(Новый Структура("ID", Ремонт_ID));
		Для Каждого ДокументОИ Из ДокументыОприходования Цикл 
			ДокументыОприходованиеИзлишков.Удалить(ДокументОИ);
		КонецЦикла;
		
	КонецЕсли;
	
 	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧастиПоПредписанию(СтрокиПредписаний)
	
	СтруктураТабличныхЧастей = Новый Структура("МатериальныеЗатраты, ТрудовыеЗатраты");
	
	Для Каждого СтрокаЗП Из СтрокиПредписаний Цикл
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, Предписание", 
			СтрокаЗП.РемонтыОборудования_ID, СтрокаЗП.ДокументВнешнегоОснования));
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла; 
			
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(ТекущиеЗначения, СтруктураТабличныхЧастей)

	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
		ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
		
		СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			ТабличнаяЧасть.Удалить(Элемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
	ПараметрыПоиска.Вставить("Родитель_ID", ТекущиеЗначения.ID);
			
	МассивПодчиненныхСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрДерева Из МассивПодчиненныхСтрок Цикл
		СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктураДляПередачи, СтруктураТабличныхЧастей);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	ID_Отбора = ТекСтрокаДереваРемонтов.ID;
	
	Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
		ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
		
		// Материальные затраты.
		Элементы.МатериальныеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
		// Трудовые затраты.
		Элементы.ТрудовыеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
	Иначе
		
		// Материальные затраты.
		Элементы.МатериальныеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
		// Трудовые затраты.
		Элементы.ТрудовыеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоЗаявкеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СерийныеЗапчасти = ДополнительныеПараметры.СерийныеЗапчасти;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗапчастиПоЗаявкеФрагмент(СерийныеЗапчасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоЗаявкеФрагмент(Знач СерийныеЗапчасти)
	
	Перем IDРемонта, ЗаявкаНаРемонт, МассивДляУдаления, МассивЗапчастей, НС, Строка, ТекущийРемонтОборудования, Элемент, ЭлЗапчасть;
	
	ТекущийРемонтОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	IDРемонта = ТекущийРемонтОборудования.ID;
	МассивДляУдаления = Новый Массив;
	Для Каждого Строка Из СерийныеЗапчасти Цикл
		Если Строка.РемонтыОборудования_ID = IDРемонта Тогда
			МассивДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивДляУдаления Цикл
		СерийныеЗапчасти.Удалить(Элемент);
	КонецЦикла;
	
	ЗаявкаНаРемонт = ПолучитьЗаявкуНаСервере(ТекущийРемонтОборудования.ДокументИсточник,IDРемонта);
	
	Если ЗаявкаНаРемонт <> Неопределено Тогда
		МассивЗапчастей = ПолучитьЗапчастиПоЗаявкеНаСервере(ЗаявкаНаРемонт,IDРемонта);
		Если МассивЗапчастей <> Неопределено Тогда
			
			Для Каждого ЭлЗапчасть Из МассивЗапчастей Цикл
				НС = СерийныеЗапчасти.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ЭлЗапчасть);
				НС.РемонтыОборудования_ID = IDРемонта;
			КонецЦикла;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Для данного объекта ремонта не ведётся учет серийных запчастей.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоЗаявкеФрагментЗавершение", ЭтотОбъект, Новый Структура("IDРемонта, СерийныеЗапчасти, ТекущийРемонтОборудования", IDРемонта, СерийныеЗапчасти, ТекущийРемонтОборудования)), НСтр("ru = 'Невозможно заполнить серийные запчасти из заявки. Заполнить по нормативам?'"),РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоЗаявкеФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	IDРемонта = ДополнительныеПараметры.IDРемонта;
	СерийныеЗапчасти = ДополнительныеПараметры.СерийныеЗапчасти;
	ТекущийРемонтОборудования = ДополнительныеПараметры.ТекущийРемонтОборудования;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		МассивЗапчастей = ПолучитьЗапчастиПоНормативамНаСервере(ТекущийРемонтОборудования.ОбъектРемонта,ТекущийРемонтОборудования.ВидРемонтныхРабот);
		Если МассивЗапчастей <> Неопределено Тогда
			
			Для Каждого ЭлЗапчасть Из МассивЗапчастей Цикл
				НС = СерийныеЗапчасти.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ЭлЗапчасть);
				НС.РемонтыОборудования_ID = IDРемонта;
			КонецЦикла;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Для данного объекта ремонта не ведётся учет серийных запчастей.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗапчастиПоЗаявкеНаСервере(Заявка, IDРемонта)
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура,
	|	СУММА(торо_ЗаявкаНаРемонтЗапчастиРемонта.Количество) КАК Количество,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ЗапчастиРемонта КАК торо_ЗаявкаНаРемонтЗапчастиРемонта
	|ГДЕ
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Ссылка = &Ссылка
	|	И торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID = &ID
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Ссылка",Заявка);
	Запрос.УстановитьПараметр("ID", IDРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивВозврата.Добавить(Новый Структура("Номенклатура,Количество,ЕдиницаИзмерения",
		Выборка.Номенклатура,Выборка.Количество,Выборка.ЕдиницаИзмерения));
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗапчастиПоНормативамНаСервере(ОбъектРемонта,ВидРемонтныхРабот)
	
	Если НЕ ОбъектРемонта.ВестиУчетСерийныхЗапчастей Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
	|	СУММА(торо_НормыЗапчастейНаОбъектыРемонта.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый) КАК Качество,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	|ГДЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта = &ВидРемонта
	|	И торо_НормыЗапчастейНаОбъектыРемонта.Количество <> 0
	|	И торо_НормыЗапчастейНаОбъектыРемонта.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
	Запрос.УстановитьПараметр("ТиповойОР",ОбъектРемонта.ТиповойОР);
	Запрос.УстановитьПараметр("ВидРемонта",ВидРемонтныхРабот);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивВозврата.Добавить(Новый Структура("Номенклатура,Количество,Качество,ЕдиницаИзмерения",
		Выборка.Номенклатура,Выборка.Количество,Выборка.Качество,Выборка.ЕдиницаИзмерения));
	КонецЦикла;
	
	Возврат МассивВозврата;
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаявкуНаСервере(Источник,IDРемонта)
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		Возврат Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		Запрос = новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРабот.ДокументИсточник
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРабот
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка = &Ссылка
		|   	И торо_НарядНаВыполнениеРемонтныхРабот.ID = &ID";
		
		Запрос.УстановитьПараметр("Ссылка",Источник);
		Запрос.УстановитьПараметр("ID",IDРемонта);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТипЗнч(Выборка.ДокументИсточник) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
				Возврат Выборка.ДокументИсточник;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборыСвязанныхТаблицРемонты()
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтруктураОтбораID =  Новый ФиксированнаяСтруктура("РемонтыОборудования_ID",ТекДанные.ID);
		Элементы.СерийныеЗапчасти.ОтборСтрок = СтруктураОтбораID;
		Элементы.ДокументыВнутреннееПотребление.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ТекДанные.ID);
		Элементы.ДокументыОприходованиеИзлишков.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ТекДанные.ID);
		Элементы.ИсполнителиПоРемонтам.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ТекДанные.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьОповещение(Результат, Контекст) Экспорт
	
	Если Модифицированность Тогда
		Записать();
		Модифицированность = Ложь;
	КонецЕсли;
	
	ПослеВопросаОСохраненииДанных();
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСохраненииДанных() 
	
	ВыводитьПредупреждение = ПроверитьОснования();
	Если ФОУчетСостоянияОборудования И ФОНапоминатьЗафиксироватьПростой И ЕстьПравоВводаСостояний И Объект.Проведен И ВыводитьПредупреждение И БылаЗаписьИзменений Тогда
		
		БылаЗаписьИзменений =  Ложь;
		МассивОбъектовСПростоем = Новый Массив;
		МассивОбъектовБезПростоя = Новый Массив;
		ПроверитьНаличиеДокументаПростоя(МассивОбъектовСПростоем, МассивОбъектовБезПростоя);
		
		Если МассивОбъектовСПростоем.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаЗавершение", ЭтотОбъект, Новый Структура("МассивОбъектов, ЗафиксироватьПростой", МассивОбъектовСПростоем, Ложь)), НСтр("ru = 'Изменить состояние оборудования?'"), РежимДиалогаВопрос.ДаНет);
		ИначеЕсли МассивОбъектовБезПростоя.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаЗавершение", ЭтотОбъект, Новый Структура("МассивОбъектов, ЗафиксироватьПростой", МассивОбъектовБезПростоя, Истина)), НСтр("ru = 'Зафиксировать фактический простой объектов?'"), РежимДиалогаВопрос.ДаНет)
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивОбъектов = ДополнительныеПараметры.МассивОбъектов;
	ЗафиксироватьПростой = ДополнительныеПараметры.ЗафиксироватьПростой;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("МассивОР", МассивОбъектов);
		Если НЕ ЗафиксироватьПростой Тогда
			ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации"));
		КонецЕсли;
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ПроверитьНаличиеДокументаПростоя(МассивОбъектовСПростоем, МассивОбъектовБезПростоя)
	
	ТабРемонтов = Объект.РемонтыОборудования.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабОР.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТабОР.ДатаНачала КАК ДатаНачала,
	               |	ТабОР.ДатаОкончания КАК ДатаОкончания
	               |ПОМЕСТИТЬ ВТ_ОбъектыРемонта
	               |ИЗ
	               |	&Таб КАК ТабОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ОбъектыРемонта.ДатаОкончания КАК ДатаОкончания,
	               |	ЕСТЬNULL(МАКСИМУМ(торо_ТекущееСостояниеОР.Период), ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	               |ПОМЕСТИТЬ ВТ_Макс
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	               |		ПО ВТ_ОбъектыРемонта.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	               |			И (торо_ТекущееСостояниеОР.Период <= ВТ_ОбъектыРемонта.ДатаОкончания)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ОбъектыРемонта.ОбъектРемонта,
	               |	ВТ_ОбъектыРемонта.ДатаОкончания
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Макс.ОбъектРемонта КАК ОбъектРемонта
	               |ИЗ
	               |	ВТ_Макс КАК ВТ_Макс
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	               |		ПО ВТ_Макс.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	               |			И ВТ_Макс.Период = торо_ТекущееСостояниеОР.Период
	               |			И (торо_ТекущееСостояниеОР.ВидЭксплуатации.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВЫБОР
	               |		КОГДА торо_ВремяПростояОборудования.Период ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		КОГДА торо_ВремяПростояОборудования.Период > ВТ_ОбъектыРемонта.ДатаНачала
	               |				И торо_ВремяПростояОборудования.Период < ВТ_ОбъектыРемонта.ДатаОкончания
	               |			ТОГДА ИСТИНА
	               |		КОГДА торо_ВремяПростояОборудования.ДатаЗапуска > ВТ_ОбъектыРемонта.ДатаНачала
	               |				И торо_ВремяПростояОборудования.ДатаЗапуска < ВТ_ОбъектыРемонта.ДатаОкончания
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьПростой
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ВремяПростояОборудования КАК торо_ВремяПростояОборудования
	               |		ПО ВТ_ОбъектыРемонта.ОбъектРемонта = торо_ВремяПростояОборудования.ОбъектРемонта";
	
	
	Запрос.УстановитьПараметр("Таб", ТабРемонтов);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивОбъектовСПростоем = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("ОбъектРемонта");
	
	ТабПростоев = РезультатЗапроса[3].Выгрузить();
	МассивСтрок = ТабПростоев.НайтиСтроки(Новый Структура("ЕстьПростой", Ложь));
	Для каждого Стр Из МассивСтрок Цикл
		МассивОбъектовБезПростоя.Добавить(Стр.ОбъектРемонта);
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет пересчет затрат по количеству операций.
//
Процедура ПересчитатьЗатратыПоКоличеству(СтрукПоиска, Коэффициент)
	
	МассивСтрокМЗ = Объект.МатериальныеЗатраты.НайтиСтроки(СтрукПоиска);
	Для Каждого СтрокаТЧ Из МассивСтрокМЗ Цикл
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество * Коэффициент;
		СтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.КоличествоЕдиниц * Коэффициент;
		
	КонецЦикла; 
	
	МассивСтрокТЗ = Объект.ТрудовыеЗатраты.НайтиСтроки(СтрукПоиска);
	Для Каждого СтрокаТЧ Из МассивСтрокТЗ Цикл
		
		СтрокаТЧ.ВремяРаботы = СтрокаТЧ.ВремяРаботы * Коэффициент;
		СтрокаТЧ.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(СтрокаТЧ.ВремяРаботы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		РемID = СтрДерева.РемонтыОборудования_ID;
		СтрукПоиска = Новый Структура("ID, РемонтыОборудования_ID", ID, РемID);
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(СтрукПоиска);
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьЗатратыПоКоличеству(СтрукПоиска, Коэффициент);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
// Процедура выполняет заполнение процентов выполнения ремонтных работ.
//
// Параметры
//  СтрокаДерева – строка дерева ремонтных работ.
//
Процедура ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	торо_Ремонты.РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, СтруктураСтроки);
	
	Если НЕ СтруктураРодСтроки = Неопределено Тогда	
		торо_Ремонты.РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтруктураРодСтроки);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоРемонтныхРабот");
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьПроцентВыполненияВСтрокахТЧ(СтрокаДерева)
	
	Если ЗначениеЗаполнено(СтрокаДерева.ID) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ID",СтрокаДерева.ID);
		СтруктураПоиска.Вставить("Родитель_ID",СтрокаДерева.Родитель_ID);
		СтруктураПоиска.Вставить("РемонтыОборудования_ID",СтрокаДерева.РемонтыОборудования_ID);
		
		СтрокиРемРаботы = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиРемРаботы.Количество() <> 0 Тогда
			СтрокиРемРаботы[0].ПроцентВыполненияРабот = СтрокаДерева.ПроцентВыполненияРабот;
			СтрокиРемРаботы[0].Выполнено = ?(СтрокаДерева.ПроцентВыполненияРабот = 100, Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ТекСтрокаДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ОбновитьПроцентВыполненияВСтрокахТЧ(ТекСтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьГалкиВВетке(Строка, ЗначФлага, ЗначПроцента)
	
	Для каждого Стр Из Строка.ПолучитьЭлементы() Цикл
		
		Стр.Выполнено = ЗначФлага;
		
		ПроставитьГалкиВВетке(Стр, ЗначФлага, ЗначПроцента);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриСменеЗначенийКоличестваИлиУпаковки(ТекущиеДанные, ИзменениеКоличестваЕдиниц = Ложь)
	
	КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиНаСервере(ТекущиеДанные.ЕдиницаИзмерения);	
	
	Если КоэффициентУпаковки = 0 Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли; 
	
	Если ИзменениеКоличестваЕдиниц Тогда
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоЕдиниц / КоэффициентУпаковки;
	Иначе	
		ТекущиеДанные.КоличествоЕдиниц = ТекущиеДанные.Количество * КоэффициентУпаковки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	
	Возврат Упаковка.Коэффициент;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДокументыВнутреннегоПотребления(Парам1 = Неопределено, Парам2 = Неопределено)	Экспорт
	ОбновитьДокументыВнутреннегоПотребленияСервер(Парам1, Парам2);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыВнутреннегоПотребленияСервер(Парам1 = Неопределено, Парам2 = Неопределено)	 	
	
	Если Не ДоступноВнутреннеПотреблениеТоваров Тогда
		Элементы.ДокументыВнутреннееПотребление.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивID = Объект.РемонтыОборудования.Выгрузить(, "ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК Заказ,
	               |	торо_ИнтеграцияДокументов.ID КАК ID
	               |ПОМЕСТИТЬ Заказы
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&ID)
	               |	И торо_ИнтеграцияДокументов.ДокументЕРП ССЫЛКА Документ.ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ВнутреннееПотребление,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	торо_ИнтеграцияДокументов.ID КАК ID,
	               |	ИСТИНА КАК Записан
	               |ПОМЕСТИТЬ ВсеДокументы
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&ID)
	               |	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ВнутреннееПотреблениеТоваров)
	               |	И НЕ торо_ИнтеграцияДокументов.ДокументЕРП.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВнутреннееПотреблениеТоваров.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ВнутреннееПотреблениеТоваров.Ссылка.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	Заказы.ID,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Заказы КАК Заказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваров
	               |		ПО Заказы.Заказ = ВнутреннееПотреблениеТоваров.ЗаказНаВнутреннееПотребление
	               |ГДЕ
	               |	НЕ ВнутреннееПотреблениеТоваров.Ссылка.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеДокументы.ВнутреннееПотребление КАК ВнутреннееПотребление,
	               |	ВсеДокументы.ИндексКартинки КАК ИндексКартинки,
	               |	ВсеДокументы.ID КАК ID,
	               |	МАКСИМУМ(ВсеДокументы.Записан) КАК Записан
	               |ИЗ
	               |	ВсеДокументы КАК ВсеДокументы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВсеДокументы.ВнутреннееПотребление,
	               |	ВсеДокументы.ИндексКартинки,
	               |	ВсеДокументы.ID";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	
	ДокументыВнутреннееПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивНоменклатурыКСписаниюНаСервере(ID)
	
	УжеСписаннаяНоменклатура = ПолучитьТаблицуСписаннойНоменклатуры(ID, Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров"));
	
	Если ТипЗнч(ID) = Тип("Массив") Тогда
		НоменклатураКЗаказу = Объект.МатериальныеЗатраты.Выгрузить();
		Запчасти = Объект.СерийныеЗапчасти.Выгрузить();
	Иначе
		НоменклатураКЗаказу = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
		Запчасти = Объект.СерийныеЗапчасти.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));	
	КонецЕсли;
 
	
	НоменклатураКЗаказу.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	Для каждого Строка Из Запчасти Цикл
		НС = НоменклатураКЗаказу.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка);
		НС.Номенклатура = Строка.НоменклатураНовая;
		НС.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатурыНовая;
		НС.Количество = Строка.КоличествоНовое;
		НС.ЕдиницаИзмерения = Строка.ЕдиницаИзмеренияНовая;
		НС.КоличествоЕдиниц = Строка.КоличествоНовое;
		НС.Серия = Строка.СерияНоменклатурыНовая;
		НС.ХарактеристикиИспользуются = Строка.ХарактеристикиИспользуютсяДляНовой;
	КонецЦикла;
	
	Для каждого Стр ИЗ НоменклатураКЗаказу Цикл 
		Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда 
			Стр.КоличествоЕдиниц = Стр.Количество*1;
		КонецЕсли;
	КонецЦикла;
		
	НоменклатураКЗаказу.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ХарактеристикиИспользуются, Серия", "КоличествоЕдиниц");
	
	Товары = Новый Массив;
	Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	Работа = Перечисления.ТипыНоменклатуры.Работа;
	
	Для каждого Строка Из НоменклатураКЗаказу Цикл
		
		Если Строка.Номенклатура.ТипНоменклатуры = Услуга
			ИЛИ Строка.Номенклатура.ТипНоменклатуры = Работа Тогда
			Продолжить;
		КонецЕсли; 
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеСписаннаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеСписаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
			
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеСписаннаяНоменклатура.Количество() = 0
			ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Количество, Серия",
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			Строка.ХарактеристикиИспользуются,
			(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры),
			Строка.Серия);
			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуСписаннойНоменклатуры(ID, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	&Поле КАК Документ
	               |ПОМЕСТИТЬ ДокументыПотребления
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |ГДЕ
	               |	Таблица.ID В(&ID)";

	Если ТипДокумента =  Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		Запрос.УстановитьПараметр("Таблица", ДокументыОприходованиеИзлишков.Выгрузить());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поле", "Таблица.ОприходованиеИзлишков"); 
	Иначе
		Запрос.УстановитьПараметр("Таблица", ДокументыВнутреннееПотребление.Выгрузить());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поле", "Таблица.ВнутреннееПотребление");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладах.Характеристика КАК Характеристика,
	               |	СУММА(ТоварыНаСкладах.ВНаличии) КАК Количество
	               |ИЗ
	               |	ДокументыПотребления КАК ДокументыПотребления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	               |		ПО ДокументыПотребления.Документ = ТоварыНаСкладах.Регистратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладах.Номенклатура,
	               |	ТоварыНаСкладах.Характеристика";
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ИнтеграцияДокументов.ДокументЕРП
		|ИЗ
		|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		|ГДЕ
		|	торо_ИнтеграцияДокументов.ID = &ID
		|	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		|	И торо_ИнтеграцияДокументов.ДокументЕРП  = &СсылкаНаДокЕРП";
		
		Запрос.УстановитьПараметр("ID"             , ДополнительныеПараметры.ТекущийРемонт_ID);
		Запрос.УстановитьПараметр("Ссылка"         , Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП" , ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.ТекущийРемонт_ID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ID, ДокументТОИР, ДокументЕРП)
	
	Если НЕ ДокументЕРП = Документы.ВнутреннееПотреблениеТоваров.ПустаяСсылка() 
		И НЕ ДокументЕРП = Документы.ОприходованиеИзлишковТоваров.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID           = ID;
		Запись.ДокументТОИР = ДокументТОИР;
		Запись.ДокументЕРП  = ДокументЕРП;
		Запись.Записать();
		
		Если ТипЗнч(ДокументЕРП) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда 
			ОбновитьДокументыВнутреннегоПотребленияСервер();
		ИначеЕсли ТипЗнч(ДокументЕРП) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
			ОбновитьДокументыОприходованияИзлишковСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Помечен = ПометитьУдалениеНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(Помечен) <> Тип("Булево") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Помечен);
		КонецЕсли; 		
		МассивСтрокВП = ДокументыВнутреннееПотребление.НайтиСтроки(Новый Структура("ВнутреннееПотребление", ДополнительныеПараметры.ДокументЕРПСсылка));
		Если МассивСтрокВП.Количество() Тогда
			Для Каждого Элемент Из МассивСтрокВП Цикл
				УдалитьСводныйВП(Элемент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемОпрИзлишков(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Помечен = ПометитьУдалениеНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(Помечен) <> Тип("Булево") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Помечен);
		КонецЕсли; 		
		МассивСтрокВП = ДокументыОприходованиеИзлишков.НайтиСтроки(Новый Структура("ОприходованиеИзлишков", ДополнительныеПараметры.ДокументЕРПСсылка));
		Если МассивСтрокВП.Количество() Тогда
			Для Каждого Элемент Из МассивСтрокВП Цикл
				УдалитьСводныйОИ(Элемент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПометитьУдалениеНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектНаУдаление = СтруктураПараметров.ДокументЕРПСсылка.ПолучитьОбъект();
		
		Если ОбъектНаУдаление.Проведен Тогда
			ОбъектНаУдаление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектНаУдаление.ПометкаУдаления = Истина;
		ОбъектНаУдаление.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID           = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ДокументЕРПСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		Если ТипЗнч(ОбъектНаУдаление.Ссылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда 
			ОбновитьДокументыВнутреннегоПотребленияСервер();
		ИначеЕсли ТипЗнч(ОбъектНаУдаление.Ссылка) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
			ОбновитьДокументыОприходованияИзлишковСервер();
		КонецЕсли;
		
	Исключение
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМассивID(МассивID,ЭлементДерева)
	
	Если ЭлементДерева <> Неопределено Тогда
		МассивID.Добавить(ЭлементДерева.ID);
		Для Каждого ЭлементДерева1 Из ЭлементДерева.ПолучитьЭлементы() Цикл
			ЗаполнитьМассивID(МассивID,ЭлементДерева1);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаменитьМатериалыНаАналоги(АдресВХранилище, Отказ = Ложь)
	
	ЗначенияРеквизитовНовыхСтрок = Новый Структура;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МассивКлючей						= Новый Массив;
	МассивУдаляемыхСтрок				= Новый Массив;
	ИзменяемыеСтроки					= Новый Соответствие;
	СтруктураОтбора						= Новый Структура;
	
	НаборыМатериалов					= ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Проверяем возможность применения замены.
	
	Для Каждого СтрокаМатериал из НаборыМатериалов.Материалы Цикл
		
		СтруктураОтбора.Вставить("ID",СтрокаМатериал.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаМатериал.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаМатериал.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(СтруктураОтбора.ХарактеристикаНоменклатуры) Тогда
				ШаблонСообщения = НСтр("ru = 'Не найдено строки с материалом: %1, %2.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураОтбора.Номенклатура, СтруктураОтбора.ХарактеристикаНоменклатуры);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Не найдено строки с материалом: %1.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураОтбора.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаМатЗатрат = НайденныеСтроки[0];
		
		Если СтрокаМатЗатрат.КоличествоЕдиниц < СтрокаМатериал.Количество Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка применения аналога. Материала ""%1"" недостаточно для замены.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаМатЗатрат.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаМатЗатрат.КоличествоЕдиниц = СтрокаМатериал.Количество Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаМатЗатрат);
		Иначе
			ИзменяемыеСтроки.Вставить(СтрокаМатЗатрат,Новый Структура("КоличествоЕдиниц", СтрокаМатЗатрат.КоличествоЕдиниц - СтрокаМатериал.Количество));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление строк или изменение количества.
	//
	Для Каждого СтрокаМатЗатрат из МассивУдаляемыхСтрок Цикл
		Объект.МатериальныеЗатраты.Удалить(СтрокаМатЗатрат);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ИзменяемыеСтроки Цикл
		КлючИЗначение.Ключ.КоличествоЕдиниц = КлючИЗначение.Значение.КоличествоЕдиниц;
		ПриСменеЗначенийКоличестваИлиУпаковки(КлючИЗначение.Ключ, Истина);
	КонецЦикла;
	
	// Добавление новых строк
	Для Каждого СтрокаАналога ИЗ НаборыМатериалов.Аналоги Цикл
		СтруктураОтбора.Вставить("ID",СтрокаАналога.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаАналога.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаАналога.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаАналога.ХарактеристикаНоменклатуры);
		
		МассивСтрок = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаНоменклатуры = МассивСтрок[0];
			СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.Количество + СтрокаАналога.Количество;
			СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаНоменклатуры.КоличествоЕдиниц + СтрокаАналога.КоличествоЕдиниц;
		Иначе
			СтрокаНоменклатуры = Объект.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаАналога);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналогиНаКлиенте()
	СтрокаНоменклатуры = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если СтрокаНоменклатуры <> Неопределено И СтрокаНоменклатуры.ЕстьАналоги Тогда
		СтрокаРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.РемонтыОборудования_ID))[0];
		СтрокаРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.ID))[0];
		
		МассивСтрокРРТехКарта = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаРР.Родитель_ID));
		Если МассивСтрокРРТехКарта.Количество() Тогда
			ТехКарта = МассивСтрокРРТехКарта[0].РемонтнаяРабота;
		Иначе
			ТехКарта = ПредопределенноеЗначение("Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка");
		КонецЕсли;
		
		МассивИсполнителей = Новый Массив;
		СтрокиИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID",СтрокаНоменклатуры.РемонтыОборудования_ID));
		Для Каждого СтрокаИсполнителя Из СтрокиИсполнителей Цикл
			МассивИсполнителей.Добавить(СтрокаИсполнителя.Исполнитель);
		КонецЦикла;
		
		СтруктураПараметров = (Новый Структура(
		"ID,РемонтыОборудования_ID,Номенклатура,
		|ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КоличествоЕдиниц
		|,Количество, ОбъектРемонта, ВидРемонта,
		|ПодразделениеИсполнитель, ТехКарта, ДатаРемонта",
		СтрокаНоменклатуры.ID,СтрокаНоменклатуры.РемонтыОборудования_ID,СтрокаНоменклатуры.Номенклатура,
		СтрокаНоменклатуры.ХарактеристикаНоменклатуры,СтрокаНоменклатуры.ЕдиницаИзмерения,СтрокаНоменклатуры.КоличествоЕдиниц,
		СтрокаНоменклатуры.Количество,СтрокаРемонта.ОбъектРемонта,СтрокаРемонта.ВидРемонтныхРабот,
		МассивИсполнителей,ТехКарта,СтрокаРемонта.ДатаНачала));
				
		ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораАналогаНоменклатурыДляРемонта",СтруктураПараметров,ЭтаФорма,Объект.Ссылка,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтметитьНаличиеАналогов(МассивКлючей = Неопределено)
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьАналогиНоменклатурыДляРемонтов") Тогда
		Возврат;
	КонецЕсли;
	
	МВТ = торо_МТОСервер.ПодготовитьВременнуюТаблицуДляПроверкиАналогов(Объект, МассивКлючей);
	Выборка = торо_МТОСервер.ВернутьЗаписиСАналогами(МВТ);
	
	Если ТипЗнч(МассивКлючей) = Тип("Строка") Тогда
		СтрокиДляОбработки = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", МассивКлючей));
	ИначеЕсли ТипЗнч(МассивКлючей) = Тип("Массив") Тогда
		СтрокиДляОбработки = Новый Массив;
		Для каждого Ключ из МассивКлючей Цикл
			НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", Ключ));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, НайденныеСтроки);
		КонецЦикла;
	Иначе
		СтрокиДляОбработки = Объект.МатериальныеЗатраты;
	КонецЕсли;
	
	Для каждого Строка из СтрокиДляОбработки Цикл
		Строка.ЕстьАналоги = Ложь;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ID,РемонтыОборудования_ID");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска);
		НайденныеСтроки[0].ЕстьАналоги = Выборка.ЕстьАналоги;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСтруктурИсполнителей()
	Массив = Новый Массив;
	
	Для каждого СтрокаРемонтовОборудования Из Объект.РемонтыОборудования Цикл
		
		МассивСтрокРемонныхРабот = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID));
		
		Для каждого СтрокаРемонтныхРабот Из МассивСтрокРемонныхРабот Цикл
			
			МассивИсполнителей = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, ID", СтрокаРемонтовОборудования.ID, СтрокаРемонтныхРабот.ID));
			
			Для каждого СтрокаИсполнителя Из МассивИсполнителей Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				СтруктураСтроки.Вставить("Квалификация"          , СтрокаИсполнителя.Квалификация);
				СтруктураСтроки.Вставить("ДатаНачала"            , СтрокаИсполнителя.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончания"         , СтрокаИсполнителя.ДатаОкончания);
				СтруктураСтроки.Вставить("КТУ"                   , СтрокаИсполнителя.КТУ);
				СтруктураСтроки.Вставить("ВремяРаботы"           , СтрокаИсполнителя.ВремяРаботы);
				СтруктураСтроки.Вставить("СуммаКНачислению"      , СтрокаИсполнителя.СуммаКНачислению);
				СтруктураСтроки.Вставить("Сотрудник"             , СтрокаИсполнителя.Сотрудник);
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			Если Не ТипЗнч(СтрокаРемонтныхРабот.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт")
				И Не МассивИсполнителей.Количество() > 0 Тогда //нужно отразить хотя бы тех операции.
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				
				СтруктураСтроки.Вставить("Квалификация");
				СтруктураСтроки.Вставить("ДатаНачала");
				СтруктураСтроки.Вставить("ДатаОкончания");
				СтруктураСтроки.Вставить("КТУ");
				СтруктураСтроки.Вставить("ВремяРаботы");
				СтруктураСтроки.Вставить("СуммаКНачислению");
				СтруктураСтроки.Вставить("Сотрудник");
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции	

&НаКлиенте
Процедура ОбработкаАвтоматическогоЗаполненияИсполнителей(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		Объект.ТрудовыеЗатраты.Очистить();
		Для каждого СтрокаМассива Из Результат Цикл
			НС = Объект.ТрудовыеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаМассива);
			//НС.ВремяРаботы = НС.ДатаОкончания - НС.ДатаНачала;
			НС.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(НС.ВремяРаботы);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура РемонтыОборудованияОбновитьДокументыИсточники()
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ТипДокументаОснования = "" и СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID, Номенклатура, ХарактеристикаНоменклатуры", РемонтыОборудования_ID, ID, текСтрока.Номенклатура, текСтрока.Характеристика);
		
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			нс.Количество = текСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(нс.Единицаизмерения), 1, КоэфУпаковкиВыбр);
			
			нс.КоличествоЕдиниц = нс.Количество * КоэфУпаковкиВыбр;
			
			нс.ID = ID;
			нс.РемонтыОборудования_ID = РемонтыОборудования_ID;
			нс.ХарактеристикаНоменклатуры = текСтрока.Характеристика;
			
			
		Иначе
			
			нс = НайС[0];
			
			КоэфУпаковкиСтар = ?(ЗначениеЗаполнено(нс.ЕдиницаИзмерения), нс.ЕдиницаИзмерения.Коэффициент, 1);
			КоличествоЕдиниц = (нс.Количество*КоэфУпаковкиСтар + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр);
			нс.Количество = КоличествоЕдиниц / КоэфУпаковкиВыбр;
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			
			нс.КоличествоЕдиниц = КоличествоЕдиниц;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоБригадам(Адрес)
	
	Если Адрес = Неопределено Тогда возврат; КонецЕсли;
	
	тз = ПолучитьИзВременногоХранилища(Адрес);
	
	стрОтбора = Новый Структура("РемонтыОборудования_ID, ID");	
	Для каждого текСтрока из Тз Цикл
		ЗаполнитьЗначенияСвойств(стрОтбора, текСтрока);
		НайС = Объект.ТрудовыеЗатраты.НайтиСтроки(стрОтбора);
		
		Для каждого ТезЗапись из НайС Цикл
			Объект.ТрудовыеЗатраты.Удалить(ТезЗапись);
			Модифицированность = Истина;
		КонецЦикла;
		
	КонецЦикла;	
	
	Для каждого текСтрока из Тз Цикл
		нс = Объект.ТрудовыеЗатраты.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока); 
		Если ЗначениеЗаполнено(нс.ВремяРаботы) Тогда
			 нс.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(нс.ВремяРаботы);
		Иначе 
			нс.ВремяРаботы = нс.ДатаОкончания - нс.ДатаНачала;
			нс.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(нс.ВремяРаботы);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудникаНаСервере()
	
	МассивСотрудников = Новый Массив;
	Для Каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если МассивСотрудников.Найти(Строка.Сотрудник) = Неопределено Тогда
			МассивСотрудников.Добавить(Строка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Трудозатраты.ID,
	|	ВТ_Трудозатраты.Сотрудник,
	|	ВТ_Трудозатраты.ДатаНачала,
	|	ВТ_Трудозатраты.ДатаОкончания,
	|	ВТ_Трудозатраты.ВремяРаботы,
	|	ВТ_Трудозатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ПОМЕСТИТЬ ВТ_Трудозатраты
	|ИЗ
	|	&ВТ_Трудозатраты КАК ВТ_Трудозатраты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ремонты.ID КАК ID,
	|	ВТ_Ремонты.ДатаНачала,
	|	ВТ_Ремонты.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_Ремонты
	|ИЗ
	|	&ВТ_Ремонты КАК ВТ_Ремонты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Трудозатраты.ID,
	|	ВТ_Трудозатраты.Сотрудник КАК Сотрудник,
	|	ВТ_Трудозатраты.ВремяРаботы,
	|	ВЫБОР
	|		КОГДА ВТ_Трудозатраты.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Ремонты.ДатаНачала
	|		ИНАЧЕ ВТ_Трудозатраты.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ВТ_Трудозатраты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Ремонты.ДатаОкончания
	|		ИНАЧЕ ВТ_Трудозатраты.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	ВТ_Трудозатраты КАК ВТ_Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
	|		ПО ВТ_Трудозатраты.РемонтыОборудования_ID = ВТ_Ремонты.ID
	|ГДЕ
	|	ВТ_Трудозатраты.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_Трудозатраты.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВТ_Ремонты.ДатаНачала
	|			ИНАЧЕ ВТ_Трудозатраты.ДатаНачала
	|		КОНЕЦ <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА ВТ_Трудозатраты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВТ_Ремонты.ДатаОкончания
	|			ИНАЧЕ ВТ_Трудозатраты.ДатаОкончания
	|		КОНЕЦ <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ВТ_Трудозатраты", Объект.ТрудовыеЗатраты.Выгрузить());
	Запрос.УстановитьПараметр("ВТ_Ремонты", Объект.РемонтыОборудования.Выгрузить());
	
	ТаблицаСДатами = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСдатамиПомесяцам = ТаблицаСДатами.СкопироватьКолонки();
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("НачалоМесяца", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("КонецМесяца", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПоМесяцам.Колонки.Добавить("КонецИнтервала", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаТаблицыСдатами из ТаблицаСДатами Цикл
		ТекНачалоМесяца = НачалоМесяца(СтрокаТаблицыСдатами.ДатаНачала);
		Пока ТекНачалоМесяца <= НачалоМесяца(СтрокаТаблицыСдатами.ДатаОкончания) Цикл
			НовСтр = ТаблицаСдатамиПомесяцам.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТаблицыСдатами);
			
			НовСтр.НачалоМесяца = ТекНачалоМесяца;
			НовСтр.КонецМесяца = КонецМесяца(ТекНачалоМесяца);
			НовСтр.НачалоИнтервала = Макс(НовСтр.НачалоМесяца, НовСтр.ДатаНачала);
			НовСтр.КонецИнтервала = Мин(НовСтр.КонецМесяца, НовСтр.ДатаОкончания);
			
			ТекНачалоМесяца = ДобавитьМесяц(ТекНачалоМесяца, 1);
		КонецЦикла;	
	КонецЦикла;
	
	// рассчет рабочего времени сотрудника в период ремонта за определенный месяц
	ТаблицаИнтервалов = ТаблицаСдатамиПоМесяцам.Скопировать();
	ТаблицаИнтервалов.Свернуть("Сотрудник, НачалоИнтервала, КонецИнтервала");
	ТаблицаИнтервалов.Колонки.НачалоИнтервала.Имя = "ДатаНачала";
	ТаблицаИнтервалов.Колонки.КонецИнтервала.Имя = "ДатаОкончания";
	
	ТаблицаИнтервалов = РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаИнтервалов);
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("РабочееВремяЗаИнтервал", Новый ОписаниеТипов("Число"));
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаНачала, ДатаОкончания");
	Для каждого СтрокаТаблицыСДатами из ТаблицаСдатамиПомесяцам Цикл
		СтруктураПоиска.Сотрудник = СтрокаТаблицыСДатами.Сотрудник;
		СтруктураПоиска.ДатаНачала = СтрокаТаблицыСДатами.НачалоИнтервала;
		СтруктураПоиска.ДатаОкончания = СтрокаТаблицыСДатами.КонецИнтервала;
		СтрокиВремени = ТаблицаИнтервалов.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиВремени.Количество() > 0 Тогда
			СтрокаТаблицыСДатами.РабочееВремяЗаИнтервал = СтрокиВремени[0].ВремяРаботы;
		КонецЕсли;
	КонецЦикла;
	
	// рассчет рабочего времени сотрудника всего в месяце
	ТаблицаМесяцев = ТаблицаСдатамиПоМесяцам.Скопировать();
	ТаблицаМесяцев.Свернуть("Сотрудник, НачалоМесяца, КонецМесяца");
	ТаблицаМесяцев.Колонки.НачалоМесяца.Имя = "ДатаНачала";
	ТаблицаМесяцев.Колонки.КонецМесяца.Имя = "ДатаОкончания";
	
	ТаблицаМесяцев = РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаМесяцев);
	ТаблицаСдатамиПоМесяцам.Колонки.Добавить("РабочееВремяЗаМесяц", Новый ОписаниеТипов("Число"));

	Для каждого СтрокаТаблицыСДатами из ТаблицаСдатамиПомесяцам Цикл
		СтрокаТаблицыСДатами.РабочееВремяЗаМесяц = УстановитьВремяРаботыЗаМесяц(СтрокаТаблицыСДатами.НачалоМесяца, СтрокаТаблицыСДатами.КонецМесяца);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Данные.ID,
	|	ВТ_Данные.Сотрудник,
	|	ВТ_Данные.ВремяРаботы,
	|	ВТ_Данные.ДатаНачала,
	|	ВТ_Данные.ДатаОкончания,
	|	ВТ_Данные.НачалоИнтервала,
	|	ВТ_Данные.КонецИнтервала,
	|	ВТ_Данные.НачалоМесяца,
	|	ВТ_Данные.КонецМесяца,
	|	ВТ_Данные.РабочееВремяЗаИнтервал,
	|	ВТ_Данные.РабочееВремяЗаМесяц
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&ВТ_Данные КАК ВТ_Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ID КАК ID,
	|	СУММА(ВТ_Данные.РабочееВремяЗаИнтервал) КАК РабочееВремяЗаРемонт
	|ПОМЕСТИТЬ ВТ_РабочееВремяЗаРемонт
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ID,
	|	ВТ_Данные.Сотрудник,
	|	ВТ_Данные.ВремяРаботы,
	|	ВТ_Данные.ДатаНачала,
	|	ВТ_Данные.ДатаОкончания,
	|	ВТ_Данные.НачалоИнтервала,
	|	ВТ_Данные.КонецИнтервала,
	|	ВТ_Данные.НачалоМесяца,
	|	ВТ_Данные.КонецМесяца,
	|	ВТ_Данные.РабочееВремяЗаИнтервал,
	|	ВТ_Данные.РабочееВремяЗаМесяц,
	|	ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0) КАК РабочееВремяЗаРемонт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Данные.РабочееВремяЗаИнтервал / ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0)
	|	КОНЕЦ КАК ДоляИнтервалаВРемонте
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РабочееВремяЗаРемонт КАК ВТ_РабочееВремяЗаРемонт
	|		ПО ВТ_Данные.ID = ВТ_РабочееВремяЗаРемонт.ID";
	
	Запрос.УстановитьПараметр("ВТ_Данные", ТаблицаСдатамиПомесяцам);
	
	ТаблицаДляРасчетаСтавок = Запрос.Выполнить().Выгрузить();
	ТаблицаДляРасчетаСтавок.Индексы.Добавить("ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Сотрудник,
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Премия / 100 КАК Премия,
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Оклад КАК Оклад
	|ИЗ
	|	РегистрСведений.торо_ТекущиеТарифныеСтавкиСотрудников КАК торо_ТекущиеТарифныеСтавкиСотрудников
	|ГДЕ
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Организация = &Организация
	|	И торо_ТекущиеТарифныеСтавкиСотрудников.Сотрудник В(&Сотрудники)";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
				
		ДанныеСотрудника = Результат.Найти(Строка.Сотрудник,"Сотрудник");
		Если ДанныеСотрудника <> Неопределено Тогда
			//Строка.СуммаКНачислению = (Строка.ВремяРаботы / 3600)* Строка.КТУ * ДанныеСотрудника.Премия * ДанныеСотрудника.ТарифнаяСтавка;
			
			ДанныеДляРасчетаСтавки = ТаблицаДляРасчетаСтавок.НайтиСтроки(Новый Структура("ID", Строка.ID));
			СуммаКНачислению = 0;
			
			Для каждого СтрокаДанныхЗаМесяц из ДанныеДляРасчетаСтавки Цикл
				ТарифнаяСтавка = ?(СтрокаДанныхЗаМесяц.РабочееВремяЗаМесяц = 0, 0, (ДанныеСотрудника.Оклад * 3600)/СтрокаДанныхЗаМесяц.РабочееВремяЗаМесяц);
				ЧастьСуммы = (Строка.ВремяРаботы / 3600)* Строка.КТУ * (1 + ДанныеСотрудника.Премия) * ТарифнаяСтавка * СтрокаДанныхЗаМесяц.ДоляИнтервалаВРемонте;
				СуммаКНачислению = СуммаКНачислению + ЧастьСуммы;
			КонецЦикла;
			
			Строка.СуммаКНачислению = СуммаКНачислению;
			
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаПериодов)
	
	Если ТаблицаПериодов.Количество() = 0 Тогда
		ТаблицаПериодов.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
		Возврат ТаблицаПериодов;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ЗапросГрафиков = Новый Запрос;
	ЗапросГрафиков.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросГрафиков.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Период КАК Период,
	|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудников.ГрафикРаботы,
	|	ГрафикРаботыСотрудников.ДействуетДо
	|ПОМЕСТИТЬ ВТ_ГрафикиРаботыСотрудников
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|ГДЕ
	|	ГрафикРаботыСотрудников.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_ИсходныеДанные.Сотрудник
	|			ИЗ
	|				ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТ_ГрафикиРаботыСотрудников.Период) КАК ПериодГрафика,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ПериодыГрафиковНаНачалоРемонта
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ИсходныеДанные.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И ВТ_ИсходныеДанные.ДатаНачала >= ВТ_ГрафикиРаботыСотрудников.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.Сотрудник,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаНачала,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания,
	|	ВТ_ГрафикиРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаНачала КАК НачалоИнтервала,
	|	ВЫБОР
	|		КОГДА ВТ_ГрафикиРаботыСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТ_ГрафикиРаботыСотрудников.ДействуетДо > ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания
	|			ТОГДА ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания
	|		ИНАЧЕ ВТ_ГрафикиРаботыСотрудников.ДействуетДо
	|	КОНЕЦ КАК КонецИнтервала
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиков
	|ИЗ
	|	ВТ_ПериодыГрафиковНаНачалоРемонта КАК ВТ_ПериодыГрафиковНаНачалоРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ПериодыГрафиковНаНачалоРемонта.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И ВТ_ПериодыГрафиковНаНачалоРемонта.ПериодГрафика = ВТ_ГрафикиРаботыСотрудников.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания,
	|	ВТ_ГрафикиРаботыСотрудников.ГрафикРаботы,
	|	ВТ_ГрафикиРаботыСотрудников.Период,
	|	ВЫБОР
	|		КОГДА ВТ_ГрафикиРаботыСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТ_ГрафикиРаботыСотрудников.ДействуетДо > ВТ_ИсходныеДанные.ДатаОкончания
	|			ТОГДА ВТ_ИсходныеДанные.ДатаОкончания
	|		ИНАЧЕ ВТ_ГрафикиРаботыСотрудников.ДействуетДо
	|	КОНЕЦ
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ИсходныеДанные.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И (ВТ_ГрафикиРаботыСотрудников.Период > ВТ_ИсходныеДанные.ДатаНачала)
	|			И (ВТ_ГрафикиРаботыСотрудников.Период < ВТ_ИсходныеДанные.ДатаОкончания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиков.Сотрудник,
	|	ВТ_ПериодыДействияГрафиков.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиков.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиков.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиков.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиков.КонецИнтервала
	|ИЗ
	|	ВТ_ПериодыДействияГрафиков КАК ВТ_ПериодыДействияГрафиков";
	
	ЗапросГрафиков.УстановитьПараметр("ВТ_ИсходныеДанные", ТаблицаПериодов);
	
	ТабГрафиков = ЗапросГрафиков.Выполнить().Выгрузить();
	МассивГрафиков = ТабГрафиков.ВыгрузитьКолонку("ГрафикРаботы");
	
	МинДата = ТаблицаПериодов[0].ДатаНачала;
	МаксДата = ТаблицаПериодов[0].ДатаОкончания;
	
	Для каждого Строка из ТаблицаПериодов Цикл
		Если Строка.ДатаНачала < МинДата Или Не ЗначениеЗаполнено(МинДата) Тогда
			МинДата = Строка.ДатаНачала;
		КонецЕсли;
		Если Строка.ДатаОкончания > МаксДата Тогда
			МаксДата = Строка.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	МинДата = НачалоДня(МинДата);
    МаксДата = КонецДня(МаксДата);
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, МинДата, МаксДата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиков.Сотрудник,
	|	ВТ_ПериодыДействияГрафиков.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиков.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиков.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиков.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиков.КонецИнтервала,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.НачалоИнтервала, ДЕНЬ), ВТ_ПериодыДействияГрафиков.НачалоИнтервала, СЕКУНДА) КАК НачалоИнтервалаСек,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.КонецИнтервала, ДЕНЬ), ВТ_ПериодыДействияГрафиков.КонецИнтервала, СЕКУНДА) КАК КонецИнтервалаСек,
	|	ВТРасписанияРаботы.ДатаГрафика,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА) КАК ВремяНачалаСек,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА) КАК ВремяОкончанияСек
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиковПоДням
	|ИЗ
	|	ВТ_ПериодыДействияГрафиков КАК ВТ_ПериодыДействияГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ПО ВТ_ПериодыДействияГрафиков.ГрафикРаботы = ВТРасписанияРаботы.ГрафикРаботы
	|			И (ВТРасписанияРаботы.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.НачалоИнтервала, ДЕНЬ) И КОНЕЦПЕРИОДА(ВТ_ПериодыДействияГрафиков.КонецИнтервала, ДЕНЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиковПоДням.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиковПоДням.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек > ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала, ДЕНЬ)
	|			И ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек < ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек
	|		ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|	КОНЕЦ КАК ВремяНачалаСек,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек < ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек > ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек
	|		ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|	КОНЕЦ КАК ВремяОкончанияСек
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиковПоДням2
	|ИЗ
	|	ВТ_ПериодыДействияГрафиковПоДням КАК ВТ_ПериодыДействияГрафиковПоДням
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиковПоДням2.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ПериодыДействияГрафиковПоДням2.ВремяОкончанияСек = 86399
	|				ТОГДА 86400
	|			ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням2.ВремяОкончанияСек
	|		КОНЕЦ - ВТ_ПериодыДействияГрафиковПоДням2.ВремяНачалаСек) КАК ВремяРаботы
	|ИЗ
	|	ВТ_ПериодыДействияГрафиковПоДням2 КАК ВТ_ПериодыДействияГрафиковПоДням2
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПериодыДействияГрафиковПоДням2.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаОкончания";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификацииНаСервере()
	
	// Кнопка может быть нажата и для незаписанного документа.
	ТаблицаДатРемонтов = Новый ТаблицаЗначений;
	ТаблицаДатРемонтов.Колонки.Добавить("Квалификация", Новый ОписаниеТипов("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(36);
	ТаблицаДатРемонтов.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,,,КвалификаторСтроки));
	ТаблицаДатРемонтов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		НоваяСтрока = ТаблицаДатРемонтов.Добавить();
		НоваяСтрока.Квалификация = Строка.Квалификация;
		НоваяСтрока.ID = Строка.ID;
		ПоискДаты = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Строка.РемонтыОборудования_ID));
		Если ПоискДаты.Количество() > 0 Тогда
			НоваяСтрока.Дата = ПоискДаты[0].ДатаНачала;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Дата) Тогда
			НоваяСтрока.Дата = Объект.Дата;
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДатРемонтов.Квалификация КАК Квалификация,
	               |	ТаблицаДатРемонтов.ID КАК ID,
	               |	ТаблицаДатРемонтов.Дата КАК Дата
	               |ПОМЕСТИТЬ ВТ_ДатыРемонта
	               |ИЗ
	               |	&ТаблицаДатРемонтов КАК ТаблицаДатРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДатыРемонта.Квалификация КАК Квалификация,
	               |	МАКСИМУМ(торо_СтоимостьЧасаКвалификации.Период) КАК Период,
	               |	ВТ_ДатыРемонта.ID КАК ID,
	               |	ВТ_ДатыРемонта.Дата КАК Дата
	               |ПОМЕСТИТЬ ВТ_МаксДатыСтоимостейКвалификации
	               |ИЗ
	               |	ВТ_ДатыРемонта КАК ВТ_ДатыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК торо_СтоимостьЧасаКвалификации
	               |		ПО ВТ_ДатыРемонта.Квалификация = торо_СтоимостьЧасаКвалификации.Квалификация
	               |			И ВТ_ДатыРемонта.Дата > торо_СтоимостьЧасаКвалификации.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ДатыРемонта.Квалификация,
	               |	ВТ_ДатыРемонта.ID,
	               |	ВТ_ДатыРемонта.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_СтоимостьЧасаКвалификации.Квалификация КАК Квалификация,
	               |	торо_СтоимостьЧасаКвалификации.Валюта КАК Валюта,
	               |	торо_СтоимостьЧасаКвалификации.Стоимость КАК Стоимость,
	               |	ВТ_МаксДатыСтоимостейКвалификации.ID КАК ID,
	               |	ВТ_МаксДатыСтоимостейКвалификации.Дата КАК Дата
	               |ПОМЕСТИТЬ ВТ_СтоимостиНаДату
	               |ИЗ
	               |	ВТ_МаксДатыСтоимостейКвалификации КАК ВТ_МаксДатыСтоимостейКвалификации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК торо_СтоимостьЧасаКвалификации
	               |		ПО ВТ_МаксДатыСтоимостейКвалификации.Квалификация = торо_СтоимостьЧасаКвалификации.Квалификация
	               |			И ВТ_МаксДатыСтоимостейКвалификации.Период = торо_СтоимостьЧасаКвалификации.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	ВТ_СтоимостиНаДату.ID КАК ID,
	               |	ВТ_СтоимостиНаДату.Квалификация КАК Квалификация,
	               |	ВТ_СтоимостиНаДату.Стоимость КАК Стоимость
	               |ПОМЕСТИТЬ ВТ_МаксДатыКурсов
	               |ИЗ
	               |	ВТ_СтоимостиНаДату КАК ВТ_СтоимостиНаДату
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ПО ВТ_СтоимостиНаДату.Валюта = КурсыВалют.Валюта
	               |			И ВТ_СтоимостиНаДату.Дата > КурсыВалют.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Валюта,
	               |	ВТ_СтоимостиНаДату.ID,
	               |	ВТ_СтоимостиНаДату.Квалификация,
	               |	ВТ_СтоимостиНаДату.Стоимость
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_МаксДатыКурсов.ID КАК ID,
	               |	ВТ_МаксДатыКурсов.Квалификация КАК Квалификация,
	               |	ВТ_МаксДатыКурсов.Стоимость * ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Стоимость
	               |ИЗ
	               |	ВТ_МаксДатыКурсов КАК ВТ_МаксДатыКурсов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ПО ВТ_МаксДатыКурсов.Валюта = КурсыВалют.Валюта
	               |			И ВТ_МаксДатыКурсов.Период = КурсыВалют.Период";
	
	Запрос.УстановитьПараметр("ТаблицаДатРемонтов", ТаблицаДатРемонтов);
	СтоимостиКвалификаций = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		
		СтруктураПараметров = Новый Структура("Квалификация, ID", Строка.Квалификация, Строка.ID);
		ДанныеПоКвалификации = СтоимостиКвалификаций.НайтиСтроки(СтруктураПараметров); 
		Если ДанныеПоКвалификации.Количество() > 0 Тогда
			Строка.СуммаКНачислению = (Строка.ВремяРаботы / 3600)* Строка.КТУ * ДанныеПоКвалификации[0].Стоимость;
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтоимостиПоРасценкеТехОперацииНаСервере()
	
	МассивID = Новый Массив;
	Для Каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если МассивID.Найти(Строка.ID) = Неопределено Тогда 
			МассивID.Добавить(Строка.ID);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ * ПОМЕСТИТЬ ТабРемРабот ИЗ &ТабРемРабот КАК ТабРемРабот ГДЕ ТабРемРабот.ID В (&МассивID);
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабРемРабот.ID КАК ID,
	|	1 КАК Количество,
	|	КурсыВалютСрезПоследних.Курс * ТабРемРабот.РемонтнаяРабота.Расценка КАК Стоимость
	|ИЗ
	|	ТабРемРабот КАК ТабРемРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО ТабРемРабот.РемонтнаяРабота.Валюта = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("ТабРемРабот", Объект.РемонтныеРаботы.Выгрузить());
	РасценкаОпераций = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		ДанныеПоОперации = РасценкаОпераций.Найти(Строка.ID,"ID");
		Если ДанныеПоОперации <> Неопределено Тогда
			Строка.СуммаКНачислению = Строка.КТУ * ДанныеПоОперации.Стоимость * ДанныеПоОперации.Количество;
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДанныеНаОснованииППРВыделенныеСтроки()
	
	ВыбранноеЗначение = Новый Массив;
	МассивИдРемонтов = Новый Массив;
	
	Для Каждого СтрокаМассиваIDИзППР Из МассивIDИзППР Цикл
	
		СтруктураВыбора = Новый Структура;
		
		СтруктураВыбора.Вставить("ДокументОснование", ДокОснованиеППР);
		СтруктураВыбора.Вставить("СтрокаРемонтовОборудования", СтрокаМассиваIDИзППР.Значение.СтрокаРемонтовОборудования);
		СтруктураВыбора.Вставить("МассивСтрокРемонтныхРабот", СтрокаМассиваIDИзППР.Значение.МассивСтрокРемонтныхРабот);
		
		ВыбранноеЗначение.Добавить(СтруктураВыбора);
		МассивИдРемонтов.Добавить(СтрокаМассиваIDИзППР.Значение.СтрокаРемонтовОборудования.ID);
		
	КонецЦикла;
	
	АдресХранилища = ПоместитьДанныеДляЗаполненияВоВременноеХранилище(ВыбранноеЗначение, ЭтаФорма.УникальныйИдентификатор);
	
	СтруктураВозрата = Новый Структура;
	СтруктураВозрата.Вставить("ПодборРемонтов", Истина);
	СтруктураВозрата.Вставить("ЭтоРемонтнаяРабота", Ложь);
	СтруктураВозрата.Вставить("МассивИДРемонтов", МассивИДРемонтов);
	СтруктураВозрата.Вставить("АдресХранилища", АдресХранилища);

	Возврат СтруктураВозрата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьДанныеДляЗаполненияВоВременноеХранилище(ВыбранноеЗначение, АдресХранилища)
	
	Возврат ПоместитьВоВременноеХранилище(ВыбранноеЗначение, АдресХранилища);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабОперацийБезНаряда(Основание, РемонтыОборудования_ID = "")
	
	Если ТипЗнч(Основание) = Тип("Соответствие") Тогда
		
		ТабОперацийБезНаряда.Очистить();
		
		Для каждого Стр Из Основание Цикл
			ДокОснованиеЗаявка = Стр.Значение;
			Если ЗначениеЗаполнено(ДокОснованиеЗаявка) И ТипЗнч(ДокОснованиеЗаявка) <> Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
				ВТ_ТабОперацийБезНаряда = торо_Ремонты.ПолучитьТаблицуОпасныхОперацийБезНарядов(ДокОснованиеЗаявка, Стр.Ключ);
				Для Каждого Строка Из ВТ_ТабОперацийБезНаряда Цикл
					НоваяСтрока = ТабОперацийБезНаряда.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.ДокументОснование = ДокОснованиеЗаявка;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) <> Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			ВТ_ТабОперацийБезНаряда = торо_Ремонты.ПолучитьТаблицуОпасныхОперацийБезНарядов(Основание, РемонтыОборудования_ID);
			ТабОперацийБезНаряда.Загрузить(ВТ_ТабОперацийБезНаряда);
			ДокОснованиеЗаявка = Основание;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФОПовышеннаяОпасность()
	Возврат ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно");
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораIDОперации(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;	
	Если ТекущиеДанные <> Неопределено И ВыбранныйЭлемент <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ID", ВыбранныйЭлемент.ID);
		Имеющиеся = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
		Если Имеющиеся.Количество() = 0 Тогда
			СтарыйID = ТекущиеДанные.ID;
			ТекущиеДанные.ID = ВыбранныйЭлемент.ID;
			Если ВыбранныйЭлемент.Процент < 0 Тогда
				ТекущиеДанные.ПроцентВыполненияРабот = 100 + ВыбранныйЭлемент.Процент / ТекущиеДанные.Количество;
			Иначе
				ТекущиеДанные.ПроцентВыполненияРабот = ВыбранныйЭлемент.Процент / ТекущиеДанные.Количество;
			КонецЕсли; 
			
			ИзменитьIDВТабличныхЧастях(ВыбранныйЭлемент.ID, СтарыйID);
			ПерерасчитатьПроцентыВыполненияРабот();
		Иначе
			ТекстСообщения = НСтр("ru = 'Эта операция уже добавлена!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.НоваяОперация = Истина;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.НоваяОперация = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьIDВТабличныхЧастях(НовыйID, СтарыйID)
	
	ТабличныеЧасти = Новый Соответствие;
	ТабличныеЧасти.Вставить("РемонтныеРаботы", "РемонтныеРаботы");
	ТабличныеЧасти.Вставить("МатериальныеЗатраты", "МатериальныеЗатраты");
	ТабличныеЧасти.Вставить("ЗакрываемыеПредписания", "ЗакрываемыеПредписания");
	ТабличныеЧасти.Вставить("СерийныеЗапчасти", "СерийныеЗапчасти");
	ТабличныеЧасти.Вставить("ТрудовыеЗатраты", "ТрудовыеЗатраты");
	
	Для каждого ТабЧасть Из ТабличныеЧасти Цикл
		Для каждого Строка Из Объект[ТабЧасть.Значение] Цикл
			Если Строка.ID = СтарыйID Тогда
				Строка.ID = НовыйID;
			КонецЕсли; 
		КонецЦикла;	
	КонецЦикла; 

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьВремяРаботыПоНормативамНаСервере()
	
	торо_Ремонты.ЗаполнитьВремяРаботыПоНормативам(ЭтаФорма, "ТрудовыеЗатраты");
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяРаботыПоДлительностиСУчетомГрафикаНаСервере()
	
	ТаблицаСотрудников = Объект.ТрудовыеЗатраты.Выгрузить(,"Сотрудник, ДатаНачала, ДатаОкончания");	

	ТабВремениРаботыСотрудников = РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаСотрудников);	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		
		МассивРабВремениСотрудников = ТабВремениРаботыСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ДатаНачала, ДатаОкончания", Строка.Сотрудник, Строка.ДатаНачала, Строка.ДатаОкончания));
		ВремяПоГрафику = ?(МассивРабВремениСотрудников.Количество(), МассивРабВремениСотрудников[0], Неопределено);

		Если ВремяПоГрафику <> Неопределено Тогда
			Строка.ВремяРаботы = ВремяПоГрафику.ВремяРаботы;
		Иначе
			Строка.ВремяРаботы = 0;
		КонецЕсли;

		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзЛотовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.ID КАК РемонтыОборудования_ID,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.Подрядчик КАК Исполнитель,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.ДоговорПодрядчика КАК УточнениеИсполнителя,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.Регистратор.Сумма КАК Сумма,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.торо_ЗапланированныеПодрядчикиРемонтов.СрезПоследних(, ID В (&СписокID)) КАК торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних";
	
	Запрос.УстановитьПараметр("СписокID", Объект.РемонтыОборудования.Выгрузить(,"ID"));
	
	ВыборкаИсполнителей = Запрос.Выполнить().Выбрать();
	
	СтруктураПоискаИсполнителей = Новый Структура("РемонтыОборудования_ID, Исполнитель, УточнениеИсполнителя");
	
	Пока ВыборкаИсполнителей.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаИсполнителей, ВыборкаИсполнителей);
		ИсполнителиПоРемонтам = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоискаИсполнителей);
		
		Если ИсполнителиПоРемонтам.Количество() = 0 Тогда
			НоваяСтрока = Объект.ИсполнителиПоРемонтам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаИсполнителей); 
		Иначе
			Для каждого Строка из ИсполнителиПоРемонтам Цикл
				Строка.Сумма = ВыборкаИсполнителей.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		СписокТехКарт = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ВыборкаИсполнителей.РемонтыОборудования_ID));
		Для Каждого ТехКарта Из СписокТехКарт Цикл
			Если ТипЗнч(ТехКарта.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Если НЕ ЗначениеЗаполнено(ТехКарта.Исполнитель) Тогда
					ТехКарта.Исполнитель = ВыборкаИсполнителей.Исполнитель;
					ТехКарта.ДоговорБригада = ВыборкаИсполнителей.УточнениеИсполнителя;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЛотов(Команда)
	
	ЗаполнитьИзЛотовНаСервере();
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный(Результат, ДополнительныеПараметры) Экспорт
	МассивID = ДополнительныеПараметры.МассивID;
	Для Каждого ID Из МассивID Цикл
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекущийРемонт_ID", ID);
		СтруктураПараметров.Вставить("Ссылка", ДополнительныеПараметры.Ссылка);
		ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, СтруктураПараметров);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьДокументыОприходованияИзлишков(Парам1 = Неопределено, Парам2 = Неопределено)	Экспорт
	ОбновитьДокументыОприходованияИзлишковСервер(Парам1, Парам2);	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьДокументыОприходованияИзлишковСервер(Парам1 = Неопределено, Парам2 = Неопределено)
	
	Если Не ДоступноОприходованиеИзлишков Тогда
		Элементы.ДокументыОприходованиеИзлишков.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивID = Объект.РемонтыОборудования.Выгрузить(,"ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ОприходованиеИзлишков,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	торо_ИнтеграцияДокументов.ID КАК ID
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&ID)
	               |	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ОприходованиеИзлишковТоваров)
	               |	И НЕ торо_ИнтеграцияДокументов.ДокументЕРП.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	
	ДокументыОприходованиеИзлишков.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПРоцедуры

&НаСервере
Функция СформироватьМассивНоменклатурыКОприходованиюНаСервере(ID)
	
	УжеОприходованнаяНоменклатура = ПолучитьТаблицуСписаннойНоменклатуры(ID, Тип("ДокументСсылка.ОприходованиеИзлишковТоваров"));
	Если ТипЗнч(ID) = Тип("Массив") Тогда
		Запчасти = Объект.СерийныеЗапчасти.Выгрузить();
	Иначе
		Запчасти = Объект.СерийныеЗапчасти.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));	
	КонецЕсли;
	
	Запчасти.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ХарактеристикиИспользуются, СерияНоменклатуры", "Количество");
	
	Товары = Новый Массив;
	
	Для каждого Строка Из Запчасти Цикл
		
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеОприходованнаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеОприходованнаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеОприходованнаяНоменклатура.Количество() = 0
			ИЛИ Строка.Количество > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Количество, Серия",
			                            Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, Строка.ХарактеристикиИспользуются,
			                            (Строка.Количество - КоличествоУжеЗаказаннойНоменклатуры), Строка.СерияНоменклатуры);
		    Товары.Добавить(Структура);
		КонецЕсли;	
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура УстановитьОставшиесяПроцентыРабот(РемонтыОборудования_ID = Неопределено)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот"));
	торо_ПроцентыВыполнения.ПолучитьНевыполненныеПроценты(ДокОбъект.РемонтныеРаботы, ДокОбъект.Ссылка, РемонтыОборудования_ID);
	
	Для каждого Строка Из ДокОбъект.РемонтныеРаботы Цикл
		Если РемонтыОборудования_ID = Неопределено ИЛИ Строка.РемонтыОборудования_ID = РемонтыОборудования_ID Тогда
			Если ТипЗнч(Строка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") 
			   И Строка.ПроцентВыполненияРабот > 100 Тогда
				 Строка.ПроцентВыполненияРабот = 100;
			КонецЕсли;
			Строка.Выполнено = Истина;
		КонецЕсли; 
	КонецЦикла; 
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораБригады(Исполнитель, ЭлементДоговорБригада, ОтборПоСсылке = Неопределено)
	
	ПараметрыВыбораМассив = Новый Массив;
	МассивТипов = Новый Массив;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Исполнитель));
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
		МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		
	ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Подразделение", Исполнитель));
		МассивТипов.Добавить(Тип("СправочникСсылка.торо_РемонтныеБригады"));
		
	КонецЕсли;
	
	Если ОтборПоСсылке <> Неопределено Тогда
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ОтборПоСсылке)));
	КонецЕсли;
	
	ЭлементДоговорБригада.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	ЭлементДоговорБригада.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(Исполнитель, РемонтыОборудования_ID)
	
	СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Исполнитель", РемонтыОборудования_ID, Исполнитель);
	СтрокиИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);
	
	ОтборПоСсылке = Новый Массив;
	Для каждого Строка из СтрокиИсполнителей Цикл
		ОтборПоСсылке.Добавить(Строка.УточнениеИсполнителя);
	КонецЦикла;
	
	УстановитьПараметрыВыбораДоговораБригады(Исполнитель, Элементы.ДеревоРемонтныхРаботДоговорБригада, ОтборПоСсылке);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораИсполнителя_ДляРемонтныхРабот(РемонтыОборудования_ID)
	
	СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID);
	СтрокиИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);

	ОтборПоСсылке = Новый Массив;
	Для каждого Строка из СтрокиИсполнителей Цикл
		ОтборПоСсылке.Добавить(Строка.Исполнитель);
	КонецЦикла;

	ПараметрыВыбораМассив = Новый Массив;
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ОтборПоСсылке)));
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("РежимОтображенияСписка", "Список"));
	Элементы.ДеревоРемонтныхРаботИсполнитель.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиРемонтныеРаботыДляОчисткиИсполнителей(РемонтыОборудования_ID, ИдентификаторИсключаемойСтроки)
	
	МассивОтобранныхСтрок = Новый Массив;
	МассивСтрокДерева = Новый Массив;
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ДеревоРемонтныхРабот.ПолучитьЭлементы());

	Если МассивСтрокДерева.Количество() <=1 Тогда
		Возврат МассивОтобранныхСтрок;
	КонецЕсли;
	
	ВсеИсполнителиРемонта = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID));
	МассивИсполнителей = Новый Массив;
	МассивДоговоров = Новый Массив;
	
	Для каждого Строка из ВсеИсполнителиРемонта Цикл
		Если Строка.ПолучитьИдентификатор() = ИдентификаторИсключаемойСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Исполнитель) Тогда
			МассивИсполнителей.Добавить(Строка.Исполнитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.УточнениеИсполнителя) Тогда
			МассивДоговоров.Добавить(Строка.УточнениеИсполнителя);
		КонецЕсли;
	КонецЦикла;
		
	Для каждого Строка из МассивСтрокДерева Цикл
		Если ЗначениеЗаполнено(Строка.Исполнитель) И МассивИсполнителей.Найти(Строка.Исполнитель) = Неопределено
			ИЛИ ЗначениеЗаполнено(Строка.ДоговорБригада) И МассивДоговоров.Найти(Строка.ДоговорБригада) = Неопределено Тогда
			МассивОтобранныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОтобранныхСтрок;
	
КонецФункции

&НаКлиенте
Функция НайтиРемонтныеРаботыДляОчисткиДоговораБригады(РемонтыОборудования_ID, ИдентификаторИсключаемойСтроки)
	
	МассивОтобранныхСтрок = Новый Массив;
	МассивСтрокДерева = Новый Массив;
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ДеревоРемонтныхРабот.ПолучитьЭлементы());

	Если МассивСтрокДерева.Количество() <=1 Тогда
		Возврат МассивОтобранныхСтрок;
	КонецЕсли;
	
	ВсеИсполнителиРемонта = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID));
	МассивДоговоров = Новый Массив;
	
	Для каждого Строка из ВсеИсполнителиРемонта Цикл
		Если Строка.ПолучитьИдентификатор() = ИдентификаторИсключаемойСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.УточнениеИсполнителя) Тогда
			МассивДоговоров.Добавить(Строка.УточнениеИсполнителя);
		КонецЕсли;
	КонецЦикла;
		
	Для каждого Строка из МассивСтрокДерева Цикл
		Если ЗначениеЗаполнено(Строка.ДоговорБригада) И МассивДоговоров.Найти(Строка.ДоговорБригада) = Неопределено Тогда
			МассивОтобранныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОтобранныхСтрок;
	
КонецФункции

&НаКлиенте
Процедура ЗапчастиПодборНоменклатуры(Команда)
	
	Если Не Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда	
	    ОбъектРемонта = Элементы.РемонтыОборудования.ТекущиеДанные.ОбъектРемонта;
		МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);
		
		МассивТиповЗапчастей = Новый Массив();
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ОтборНоменклатуры",						 МассивЗапчастей);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",					 МассивТиповЗапчастей);
	ПараметрыФормы.Вставить("ВидимостьСерий",					 		 Истина);

	Склад = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад");
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Склад) И Не ТекущиеДанные = Неопределено Тогда
	    Склад = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОбъектРемонта, "СкладОбеспеченияМТР", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Склад", Склад);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, Элементы.СерийныеЗапчасти, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанныеРемРаб = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекДанныеРемРаб = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = "СерийныеЗапчасти";
	ИмяРеквизита = "Номенклатура";
	СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, Количество", ТекДанныеРемРаб.ID);
	ДобавитьЗапчастьИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере 
Процедура ДобавитьЗапчастьИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", 
			РемонтыОборудования_ID, текСтрока.Номенклатура, текСтрока.Характеристика, текСтрока.Серия);
		
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			нс.Количество = текСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(нс.Единицаизмерения), 1, КоэфУпаковкиВыбр);
			нс.СерияНоменклатуры = текСтрока.Серия;
			нс.РемонтыОборудования_ID = РемонтыОборудования_ID;
			нс.ID = РемонтыОборудования_ID;
			нс.ХарактеристикаНоменклатуры = текСтрока.Характеристика;
			нс.СтатусДвиженияСерийныхЗЧ = Перечисления.торо_ВидыДвиженияСерийныхЗЧ.ВозвратЗамена;
			нс.СтатусДвиженияНовойЗЧ = Перечисления.торо_ВидыДвиженияСерийныхЗЧ.Установка;
			нс.КоличествоНовое = 1;
		Иначе
			
			нс = НайС[0];
			
			КоэфУпаковкиСтар = ?(ЗначениеЗаполнено(нс.ЕдиницаИзмерения), нс.ЕдиницаИзмерения.Коэффициент, 1);
			КоличествоЕдиниц = (нс.Количество*КоэфУпаковкиСтар + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр);
			нс.Количество = КоличествоЕдиниц / КоэфУпаковкиВыбр;
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеОпасныхРаботБезНарядов(АдресХранилища)
	
	ТабОперацийБезНаряда.Очистить();
	
	Если НЕ ПолучитьФОПовышеннаяОпасность() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ПолучитьИзВременногоХранилища(АдресХранилища);
				
	СоответствиеДокументов = Новый Соответствие;
	
	Для каждого Элемент Из ВыбранноеЗначение Цикл
		Если ТипЗнч(Элемент.ДокументОснование) <> Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			СоответствиеДокументов.Вставить(Элемент.СтрокаРемонтовОборудования.ID, Элемент.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьТабОперацийБезНаряда(СоответствиеДокументов);
	
КонецПроцедуры

&НаКлиенте 
Процедура РемонтыОборудованияОбработкаВыбораПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивИДРемонтов = ДополнительныеПараметры.МассивИДДобавленныхРемонтов;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого ЭлементМассива из МассивИДРемонтов Цикл
			ОчиститьСвязанныеТабличныеЧасти(, , ЭлементМассива);
		КонецЦикла;
		
		ОбработкаВыбораЗавершение(ДополнительныеПараметры.ВыбранноеЗначение);
		
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте 
Процедура ОбработкаВыбораЗавершение(ВыбранноеЗначение)
	
	СтруктураВозврата = РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение.АдресХранилища);
	
	Если СтруктураВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделитьСтрокуРемонтовОборудования(СтруктураВозврата.IDРемонтаДляАктивизации);
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция РемонтыОборудованияОбработкаВыбораСервер(АдресХранилища)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыбранноеЗначение = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	IDРемонтаДляАктивизации = Неопределено;
	МассивСтруктурВозврата = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(Неопределено, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, Неопределено);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;	
	
	Если ВыбранноеЗначение.Количество() = 1 Тогда
		IDРемонтаДляАктивизации = ВыбранноеЗначение[0].СтрокаРемонтовОборудования.ID;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДобавленныеКолонкиТаблиц();
	ОбновитьЗависимыеЛоты();
	ОбновитьДокументыВнутреннегоПотребленияСервер();
	ОбновитьДоступностьДляРедактирования();
	
	Возврат Новый Структура("IDРемонтаДляАктивизации", IDРемонтаДляАктивизации);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивЗапчастейДляОР(ОбъектРемонта)

	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	               |	торо_Запчасти.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
	               |ГДЕ
	               |	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_РемонтныеГруппыЗапчасти.Номенклатура
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.Запчасти КАК торо_РемонтныеГруппыЗапчасти
	               |ГДЕ
	               |	торо_РемонтныеГруппыЗапчасти.Ссылка В
	               |			(ВЫБРАТЬ
	               |				торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР
	               |			ИЗ
	               |				Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |			ГДЕ
	               |				торо_ОбъектыРемонта.Ссылка = &ОбъектРемонта)";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивЗапчастей = Новый Массив;
	Пока Выборка.Следующий() Цикл;
		МассивЗапчастей.Добавить(Выборка.Номенклатура);
	КонецЦикла;

	Возврат МассивЗапчастей;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	Если Не Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		МассивТиповЗапчастей = Новый Массив();
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		
	    ОбъектРемонта = Элементы.РемонтыОборудования.ТекущиеДанные.ОбъектРемонта;
		МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);

		ПараметрыВыбораМассив = Новый Массив;
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТиповЗапчастей)));
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивЗапчастей)));
		Элементы.СерийныеЗапчастиНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
		Элементы.СерийныеЗапчастиНоменклатураНовая.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
		Элементы.СерийныеЗапчастиНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗапчастей);
		Элементы.СерийныеЗапчастиНоменклатураНовая.СписокВыбора.ЗагрузитьЗначения(МассивЗапчастей);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьДаты(ИмяТЧ, Исполнители, ТекущиеДанныеОР, Отказ, КонтролироватьВремяРаботы)
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
	    Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИсполнителя Из Исполнители Цикл
	    Если Не ЗначениеЗаполнено(СтрокаИсполнителя.ДатаНачала) Или Не ЗначениеЗаполнено(СтрокаИсполнителя.ДатаОкончания) Тогда
		    Возврат;
		КонецЕсли;
		
		Исполнитель = ?(ИмяТЧ = "ТрудовыеЗатраты", СтрокаИсполнителя.Сотрудник, СтрокаИсполнителя.Исполнитель);
		
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" у исполнителя %2 дата начала не может быть %3 ремонта.'");
		ТекстСообщения = "";
		
		Если КонтролироватьВремяРаботы И ЗначениеЗаполнено(ТекущиеДанныеОР.ДатаНачала) Тогда
			Если СтрокаИсполнителя.ДатаНачала < ТекущиеДанныеОР.ДатаНачала Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	"меньше даты начала");
			ИначеЕсли СтрокаИсполнителя.ДатаНачала > ТекущиеДанныеОР.ДатаОкончания Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	"больше даты окончания");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		    ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ТекстСообщения = "";
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" у исполнителя %2 дата окончания не может быть %3 ремонта.'");
		
		Если КонтролироватьВремяРаботы И ЗначениеЗаполнено(ТекущиеДанныеОР.ДатаОкончания) Тогда
			Если СтрокаИсполнителя.ДатаОкончания < ТекущиеДанныеОР.ДатаНачала Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	"меньше даты начала");
			ИначеЕсли СтрокаИсполнителя.ДатаОкончания > ТекущиеДанныеОР.ДатаОкончания Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	"больше даты окончания");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		    ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" у исполнителя %2 дата начала не может быть больше даты окончания (%3 - %4).'");
		
		Если СтрокаИсполнителя.ДатаНачала > СтрокаИсполнителя.ДатаОкончания Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанныеОР.ОбъектРемонта, Исполнитель,	СтрокаИсполнителя.ДатаНачала, СтрокаИсполнителя.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуРемонтовОборудования(ИДРемонта)
	
	Если ЗначениеЗаполнено(ИДРемонта) Тогда
		Массивстрок = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ИДРемонта));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Идентиф;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.РемонтыОборудования.ТекущаяСтрока = Неопределено Тогда
		Если Объект.РемонтыОборудования.Количество() > 0 Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Объект.РемонтыОборудования[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуДереваРемонтныхРабот(ИДОперации)
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Если ЗначениеЗаполнено(ИДОперации) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ЭлементыДереваРемРабот, ИДОперации, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыДереваРемРабот.Количество() > 0 Тогда
		Элементы.ДеревоРемонтныхРабот.Развернуть(ЭлементыДереваРемРабот[0].ПолучитьИдентификатор(),Истина);
		Если Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ЭлементыДереваРемРабот[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПодразделений(ТекущийРемонтID)
	
	СписокПодразделений = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ТекущийРемонтID) Тогда
		НайденыеСтроки = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонтID));
		Для каждого Строка Из НайденыеСтроки Цикл
			Если ЗначениеЗаполнено(Строка.Исполнитель) И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				СписокПодразделений.Добавить(Строка.Исполнитель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокПодразделений.Количество() = 0 Тогда
		СписокПодразделений.Добавить(Объект.Подразделение);
	КонецЕсли;
	
	Возврат СписокПодразделений;
	
КонецФункции

&НаКлиенте
Процедура УдалитьПоказателиНаработкуСостоянияЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьНаУдалениеПоказателиНаработкуСостояния(ДопПараметры.Документ);
		Элементы.ДокументыСостоянияПоказателиНаработки.Обновить();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеПоказателиНаработкуСостояния(СсылкаНаДокумент)
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
	Если ДокументОбъект.Проведен Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	ДокументОбъект.ПометкаУдаления = Истина;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

&НаСервере
Функция УстановитьВремяРаботыЗаМесяц(НачалоМесяца, КонецМесяца)
	График = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ");
	РабочиеДни = КалендарныеГрафики.РазностьДатПоКалендарю(График,НачалоМесяца,КонецМесяца, Ложь);
	Возврат РабочиеДни * 8 * 3600;
КонецФункции

&НаСервере
Функция ПроверитьОснования()
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта
		|ИЗ
		|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
		|ГДЕ
		|	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&ID)
		|	И торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект)";
	
	Запрос.УстановитьПараметр("ID", Объект.РемонтыОборудования.Выгрузить(,"ID"));
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииРемонта(ТекущиеДанные)
	
	Если ТекущиеДанные.ЗавершитьРемонт Тогда
		
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Истина;
		УстановитьОставшиесяПроцентыРабот(ТекущиеДанные.ID); 
		РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
		
		ФлВсеРемонтыЗавершены = Истина;
		
		Для каждого Стр Из Объект.РемонтыОборудования Цикл
			Если НЕ Стр.ЗавершитьРемонт Тогда
				ФлВсеРемонтыЗавершены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ФлВсеРемонтыЗавершены Тогда 
			Объект.ЗавершитьРемонтныеРаботы = Истина;
		КонецЕсли;
		
		ОбновитьДобавленныеКолонкиТаблиц();
		
	Иначе
		
		Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
			Стр.Выполнено = Ложь;
			ПроставитьГалкиВВетке(Стр, Ложь, 0);
		КонецЦикла; 
		
		Объект.ЗавершитьРемонтныеРаботы = Ложь;
		
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущиеДанные.ID));
		
		Для каждого Стр Из МассивСтрок Цикл
			Стр.Выполнено = Ложь;
		КонецЦикла;
		
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция РаботыВсехИсполнителейЗавершены(ИДРемонта, СтруктураОтбора = Неопределено)
	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура("РемонтыОборудования_ID", ИДРемонта);
	КонецЕсли;
	
	ИсполнителиЗавершившиеРаботы = Объект.ИсполнителиПоРемонтам.Выгрузить(СтруктураОтбора, "РемонтыОборудования_ID, Исполнитель, УточнениеИсполнителя");
	РемонтЗавершен = торо_РаботаСоСтатусамиДокументовСервер.РемонтЗавершен(ИДРемонта, ИсполнителиЗавершившиеРаботы);
	
	Возврат РемонтЗавершен;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВвода(ДокументВводимый)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ВводНаОсновании.ДокументОснование КАК ДокументОснование,
	|	торо_ВводНаОсновании.ДокументВводимый КАК ДокументВводимый,
	|	торо_ВводНаОсновании.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.торо_ВводНаОсновании КАК торо_ВводНаОсновании
	|ГДЕ
	|	торо_ВводНаОсновании.Значение = ИСТИНА
	|	И торо_ВводНаОсновании.ДокументОснование = &ДокументОснование
	|	И торо_ВводНаОсновании.ДокументВводимый = &ДокументВводимый";
	
	Запрос.УстановитьПараметр("ДокументОснование","торо_АктОВыполненииЭтапаРабот");
	Запрос.УстановитьПараметр("ДокументВводимый",ДокументВводимый);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УправлениеФормой(ТекущиеДанные=Неопределено)
	
	ПроверитьДоступностьКнопокРемонтныхРабот();
	ПроверитьДоступностьКнопокМатЗатратИИсполнителей();
	
	Если Не ТекущиеДанные=Неопределено Тогда
		Найденный = МассивIDЛотов.НайтиПоЗначению(ТекущиеДанные.ID);
		Если Найденный <> Неопределено Тогда
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Истина;
		Иначе
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьКнопокРемонтныхРабот()
	
	СписокЭлементов = Новый СписокЗначений;
	
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавить");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехКарту");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехОперацию");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборПоБригадамДляОперации");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботУказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("Заполнить");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборОпераций");
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамЗаполнить");
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамДобавить");
	СписокЭлементов.Добавить("СерийныеЗапчастиЗапчастиПодборНоменклатуры");	
	СписокЭлементов.Добавить("СерийныеЗапчастиГруппаЗаполнить");	
	СписокЭлементов.Добавить("СерийныеЗапчастиДобавить");

	
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.РемонтыОборудования,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьКнопокМатЗатратИИсполнителей()

	СписокЭлементов = Новый СписокЗначений;
	
	СписокЭлементов.Добавить("МатериальныеЗатратыПодборНоменклатуры");
	СписокЭлементов.Добавить("ТрудовыеЗатратыПодборПоБригадамДляДокумента");
	СписокЭлементов.Добавить("МатериальныеЗатратыДобавить");
	СписокЭлементов.Добавить("ТрудовыеЗатратыЗаполнить");
	СписокЭлементов.Добавить("ТрудовыеЗатратыДобавить");
	
	КоличествоЭлементов = ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество();
	
	Если КоличествоЭлементов > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы) Тогда		
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество(),СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	Иначе
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(0,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	КонецЕсли;
	
КонецПроцедуры

РемонтОборудованияУдаляется = Ложь;

#КонецОбласти