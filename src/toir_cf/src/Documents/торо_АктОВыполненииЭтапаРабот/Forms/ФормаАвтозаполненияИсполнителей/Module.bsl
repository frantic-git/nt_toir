  
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НеОчищатьСотрудника			= Истина;
	НеОчищатьКвалификацию		= Истина;
	НеОчищатьВремяРаботы		= Ложь;
	НеОчищатьДатуНачала			= Ложь;
	НеОчищатьДатуОкончания		= Ложь;
	ЗаполнятьПериодИВремяРабот	= Ложь;
	ЗаполнятьКТУИСумму			= Истина;
	
	Если Параметры.Свойство("Наряд") И Параметры.Наряд = Истина Тогда
		Элементы.ДеревоИсполнителейВремяРаботыТекст.Видимость = Ложь;
		Элементы.ДеревоИсполнителейСуммаКНачислению.Видимость = Ложь;
		Элементы.ЗаполнятьКТУИСумму.Видимость = Ложь;
		Элементы.ЗаполнятьПериодИВремяРабот.Видимость = Ложь;
		ЗаполнятьПериодИВремяРабот = Истина;
		ЗаполнятьКТУИСумму = Ложь;
	ИначеЕсли Параметры.Свойство("НарядРегламентный") И Параметры.НарядРегламентный = Истина Тогда
		Элементы.ДеревоИсполнителейВремяРаботыТекст.Видимость = Ложь;
		Элементы.ДеревоИсполнителейКТУ.Видимость = Ложь;
		Элементы.ДеревоИсполнителейСуммаКНачислению.Видимость = Ложь;
		Элементы.ЗаполнятьКТУИСумму.Видимость = Ложь;
		Элементы.ЗаполнятьПериодИВремяРабот.Видимость = Ложь;
		ЗаполнятьПериодИВремяРабот = Истина;
		ЗаполнятьКТУИСумму = Ложь;
	КонецЕсли; 
	
	Элементы.ДеревоИсполнителейДатаНачала.Видимость       = ЗаполнятьПериодИВремяРабот;
	Элементы.ДеревоИсполнителейДатаОкончания.Видимость    = ЗаполнятьПериодИВремяРабот;
	Элементы.ДеревоИсполнителейВремяРаботыТекст.Видимость = ЗаполнятьПериодИВремяРабот;
	
	Если Параметры.Свойство("Ссылка") Тогда
		ДокументАкт = Параметры.Ссылка;
		Элементы.Декорация1.Заголовок = Строка(ДокументАкт);
		Если ТипЗнч(ДокументАкт) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")
			ИЛИ ТипЗнч(ДокументАкт) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			ЗаполнениеРегламентных = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не Параметры.Свойство("МассивИсполнителей") Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить Ремонты оборудования и ремонтные работы по ним.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли; 
	
	ТаблицаДанныхДляЗаполненияДерева = ПодготовитьТаблицуДанных(Параметры.МассивИсполнителей);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанныхДляЗаполненияДерева.РемонтыОборудования_ID,
	               |	ТаблицаДанныхДляЗаполненияДерева.ID,
	               |	ТаблицаДанныхДляЗаполненияДерева.Родитель_ID,
	               |	ТаблицаДанныхДляЗаполненияДерева.РемонтнаяРабота,
	               |	ТаблицаДанныхДляЗаполненияДерева.ОбъектРемонта,
	               |	ТаблицаДанныхДляЗаполненияДерева.ВидРемонта,
	               |	ТаблицаДанныхДляЗаполненияДерева.Квалификация,
	               |	ТаблицаДанныхДляЗаполненияДерева.ДатаНачала,
	               |	ТаблицаДанныхДляЗаполненияДерева.ДатаОкончания,
	               |	ТаблицаДанныхДляЗаполненияДерева.КТУ,
	               |	ТаблицаДанныхДляЗаполненияДерева.ВремяРаботы,
	               |	ТаблицаДанныхДляЗаполненияДерева.СуммаКНачислению,
	               |	ТаблицаДанныхДляЗаполненияДерева.Сотрудник,
	               |	ТаблицаДанныхДляЗаполненияДерева.ДатаНачалаРемонта,
	               |	ТаблицаДанныхДляЗаполненияДерева.ДатаОкончанияРемонта
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	&ТаблицаДанныхДляЗаполненияДерева КАК ТаблицаДанныхДляЗаполненияДерева
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ТаблицаДанных.ID КАК ID,
	               |	ТаблицаДанных.Родитель_ID,
	               |	ТаблицаДанных.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТаблицаДанных.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаДанных.ВидРемонта КАК ВидРемонта,
	               |	ТаблицаДанных.Квалификация,
	               |	ТаблицаДанных.ДатаНачала,
	               |	ТаблицаДанных.ДатаОкончания,
	               |	ТаблицаДанных.КТУ,
	               |	ТаблицаДанных.ВремяРаботы,
	               |	ТаблицаДанных.СуммаКНачислению,
	               |	ТаблицаДанных.Сотрудник,
	               |	ТаблицаДанных.ДатаНачалаРемонта,
	               |	ТаблицаДанных.ДатаОкончанияРемонта
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |ИТОГИ
	               |	МАКСИМУМ(РемонтнаяРабота),
	               |	МАКСИМУМ(ВидРемонта)
	               |ПО
	               |	ОбъектРемонта,
	               |	РемонтыОборудования_ID,
	               |	ID";
				   
	Запрос.УстановитьПараметр("ТаблицаДанныхДляЗаполненияДерева", ТаблицаДанныхДляЗаполненияДерева);
	Если Не ЗаполнятьКТУИСумму Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "|	ТаблицаДанныхДляЗаполненияДерева.КТУ,", "|	1 КАК КТУ,");
	КонецЕсли; 
	Результат = Запрос.Выполнить();
	ПостроитьДеревоИсполнителей(Результат);
	
	Квалификация = "<основная>";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого Строка Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КвалификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить("<основная>" ,"Основная");
	СписокВыбора.Добавить("Выбрать..." ,"Произвольная");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораСпособаЗаполненияКвалификации", ЭтаФорма);
	ПоказатьВыборИзСписка(ОписаниеОповещения,СписокВыбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КвалификацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьПериодИВремяРаботПриИзменении(Элемент)
	Элементы.ДеревоИсполнителейДатаНачала.Видимость       = ЗаполнятьПериодИВремяРабот;
	Элементы.ДеревоИсполнителейДатаОкончания.Видимость    = ЗаполнятьПериодИВремяРабот;
	Элементы.ДеревоИсполнителейВремяРаботыТекст.Видимость = ЗаполнятьПериодИВремяРабот;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьКТУИСуммуПриИзменении(Элемент)
	Элементы.ДеревоИсполнителейКТУ.Видимость              = ЗаполнятьКТУИСумму;
	Элементы.ДеревоИсполнителейСуммаКНачислению.Видимость = ЗаполнятьКТУИСумму;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(СписокКвалификаций) Тогда
		ДатаНачалаРемонта = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ТекущаяДата());
		СписокКвалификацийБезДублей = ПолучитьКвалификацииБезДублей();
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораСотрудниковСКвалификацией(Элемент, ЭтотОбъект, СписокКвалификацийБезДублей, ДатаНачалаРемонта, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(СписокКвалификаций) Тогда
		ДатаНачалаРемонта = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ТекущаяДата());
		СписокКвалификацийБезДублей = ПолучитьКвалификацииБезДублей();
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(СписокКвалификацийБезДублей, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МножественныйВыборПриИзменении(Элемент)
	
	Элементы.Квалификация.Доступность = НЕ МножественныйВыбор;
	Элементы.Сотрудник.Доступность = НЕ МножественныйВыбор;
	Элементы.Выбрать.Доступность = МножественныйВыбор;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоИсполнителей

&НаКлиенте
Процедура ДеревоИсполнителейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		Если Не (ТекущиеДанные.Уровень = 2
			ИЛИ ТекущиеДанные.Уровень = 3) Тогда
			ТекстСообщения = НСтр("ru = 'Исполнителей можно дабавлять только для ремонтных работ.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Иначе
			
			СтрокаРодитель = ?(ТекущиеДанные.Уровень = 2, ТекущиеДанные, ТекущиеДанные.ПолучитьРодителя());
			
			НовыйИсполнитель = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовыйИсполнитель, СтрокаРодитель, "ID, РемонтыОборудования_ID, Родитель_ID, ДатаНачалаРемонта");

			
			НовыйИсполнитель.Исполнитель_ID = Строка(Новый УникальныйИдентификатор);
			НовыйИсполнитель.Уровень = 3;
			
			ИдентификаторСтроки = НовыйИсполнитель.ПолучитьИдентификатор();
			Элементы.ДеревоИсполнителей.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	РазрешеноДобавление = Ложь;
	
	Если Не ТекущиеДанные = Неопределено И Не (ТекущиеДанные.Уровень = 2 ИЛИ ТекущиеДанные.Уровень = 3) Тогда
		РазрешеноДобавление = Ложь;
	ИначеЕсли Не ТекущиеДанные = Неопределено Тогда
		РазрешеноДобавление = Истина;
	КонецЕсли; 
	
	Элементы.ДеревоИсполнителейДобавить.Доступность                = РазрешеноДобавление;
	Элементы.ДеревоИсполнителейКонтекстноеМенюДобавить.Доступность = РазрешеноДобавление;
	
	РазрешеноУдаление = Ложь;
	
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.Уровень = 3 Тогда
		РазрешеноУдаление = Истина;
	ИначеЕсли Не ТекущиеДанные = Неопределено Тогда
		РазрешеноУдаление = Ложь;
	КонецЕсли;	
	
	Элементы.ДеревоИсполнителейУдалить.Доступность                 = РазрешеноУдаление;
	Элементы.ДеревоИсполнителейКонтекстноеМенюУдалить.Доступность  = РазрешеноУдаление;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяРаботы, Элемент, Этаформа.УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейВремяРаботыТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
		ТекущиеДанные.ВремяРаботы      = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И Не ВыбранноеЗначение = Неопределено Тогда
		ТекДанные.Квалификация = торо_ПроцедурыУправленияПерсоналом.ПолучитьОсновнуюКвалификацию(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		РассчитатьВремя(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейДатаОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		РассчитатьВремя(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ДатаНачалаРемонта = Элементы.ДеревоИсполнителей.ТекущиеДанные.ДатаНачалаРемонта;
	Квалификация = Элементы.ДеревоИсполнителей.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейВыбранПриИзменении(Элемент)
	СкорректироватьСписокКвалификаций(Элементы.ДеревоИсполнителей.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные; 
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораСотрудниковСКвалификацией(Элемент, ЭтотОбъект, ТекДанные.Квалификация, ТекДанные.ДатаНачала, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейКвалификацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	Если ТекДанные.Выбран И ЗначениеЗаполнено(ТекДанные.Квалификация) Тогда
		СтароеЗначение  = ТекДанные.Квалификация;
		НовоеЗначение = ВыбранноеЗначение;
		СписокКвалификаций.Добавить(НовоеЗначение);
		СтароеЗначениеВСписке = СписокКвалификаций.НайтиПоЗначению(СтароеЗначение);
		Если СтароеЗначениеВСписке <> Неопределено Тогда 
			СписокКвалификаций.Удалить(СтароеЗначениеВСписке);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	Массив = Новый Массив;
	
	Для каждого Объекты Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		Для каждого Ремонт Из Объекты.ПолучитьЭлементы() Цикл
			Для каждого РемРабота Из Ремонт.ПолучитьЭлементы() Цикл
				Для каждого СтрокаИсполнитель Из РемРабота.ПолучитьЭлементы() Цикл
					
					СтруктураСтроки = Новый Структура;
					СтруктураСтроки = Новый Структура();
					СтруктураСтроки.Вставить("РемонтыОборудования_ID");
					СтруктураСтроки.Вставить("ID"                    );
					СтруктураСтроки.Вставить("Родитель_ID"           );
					СтруктураСтроки.Вставить("РемонтнаяРабота"       );
					СтруктураСтроки.Вставить("ОбъектРемонта"         );
					СтруктураСтроки.Вставить("ВидРемонтныхРабот"     );
					СтруктураСтроки.Вставить("ДатаНачалаРемонта"     );
					СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  );
					СтруктураСтроки.Вставить("Квалификация"          );
					СтруктураСтроки.Вставить("ДатаНачала"            );
					СтруктураСтроки.Вставить("ДатаОкончания"         );
					СтруктураСтроки.Вставить("КТУ"                   );
					СтруктураСтроки.Вставить("ВремяРаботы"           ); 
					СтруктураСтроки.Вставить("ВремяРаботыТекст"      );
					СтруктураСтроки.Вставить("СуммаКНачислению"      );
					СтруктураСтроки.Вставить("Сотрудник"             );
					
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаИсполнитель);
					СтруктураСтроки.ВидРемонтныхРабот = СтрокаИсполнитель.ВидРемонта;
					Массив.Добавить(СтруктураСтроки);
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	ЭтаФорма.Закрыть(Массив);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ID_Строки = Элементы.ДеревоИсполнителей.ТекущаяСтрока;
	
	Если ID_Строки <> Неопределено Тогда 
		СтрокаПоз = ДеревоИсполнителей.НайтиПоИдентификатору(ID_Строки);
		
		Если НЕ МножественныйВыбор И ЗначениеЗаполнено(Сотрудник) Тогда
			Сообщение = "";
			ПроверитьВыбранногоСотрудника(Сообщение);
			Если ЗначениеЗаполнено(Сообщение) Тогда
				Сообщение = СтрШаблон(НСтр("ru = '%1Заполнить сотрудника во все выбранные строки?'"), Сообщение);
				ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОЗаполненииСотрудника", ЭтотОбъект, Новый Структура("СтрокаПоз", СтрокаПоз)), Сообщение, РежимДиалогаВопрос.ДаНет); 
			Иначе
				ЗаполнитьДеревоНаСервере(); 	
			КонецЕсли;
		Иначе
			ЗаполнитьДеревоНаСервере(); 
		КонецЕсли;
		Для Каждого Строка Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
			РазвернутьДеревоРемонтныхРабот(Строка, СтрокаПоз);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Квалификация) Тогда
		Если ТаблицаИсполнителейДляАвтозаполнения.Количество() <> 0 Тогда
			СтруктураПоиска = Новый Структура("Сотрудник, Квалификация", Сотрудник, Квалификация);
			НайденныеСтроки = ТаблицаИсполнителейДляАвтозаполнения.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НСтр = ТаблицаИсполнителейДляАвтозаполнения.Добавить();
				НСтр.Сотрудник = Сотрудник;
				НСтр.Квалификация = Квалификация;
			КонецЕсли;			
		Иначе
			НСтр = ТаблицаИсполнителейДляАвтозаполнения.Добавить();
			НСтр.Сотрудник = Сотрудник;
			НСтр.Квалификация = Квалификация;
		КонецЕсли; 
	КонецЕсли;
	
	МассивИсполнителей = Новый Массив;
	МассивИсполнителей.Добавить(ТаблицаИсполнителейДляАвтозаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("МножественныйВыборСотрудниковЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.торо_ФормаЗаполненияИсполнителейТаблицей", Новый Структура("ТаблицаИсполнителей", МассивИсполнителей), ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура МножественныйВыборСотрудниковЗавершение(НоваяТаблицаИсполнителей, ДополнительныеПараметры) Экспорт
	
	Если НоваяТаблицаИсполнителей <> Неопределено Тогда
		ТаблицаИсполнителейДляАвтозаполнения.Очистить();
		Для каждого Строка Из НоваяТаблицаИсполнителей Цикл
			НСтр = ТаблицаИсполнителейДляАвтозаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(НСтр, Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	УстановитьФлаги(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	УстановитьФлаги(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	УстановитьФлаги();
КонецПроцедуры

&НаКлиенте
Процедура ВыборПоПериоду(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПоПериодуЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборПоПериодуЗавершение(Период, ДополнительныеПараметры) Экспорт 
	
	Если Период <> Неопределено И ЗначениеЗаполнено(Период.ДатаНачала) И ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		Для каждого Объекты Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
			Для каждого Ремонт Из Объекты.ПолучитьЭлементы() Цикл
				Для каждого РемРабота Из Ремонт.ПолучитьЭлементы() Цикл
					Для каждого СтрокаИсполнитель Из РемРабота.ПолучитьЭлементы() Цикл
						Если (СтрокаИсполнитель.ДатаНачалаРемонта >= Период.ДатаНачала И СтрокаИсполнитель.ДатаНачалаРемонта <= Период.ДатаОкончания)
							ИЛИ (СтрокаИсполнитель.ДатаОкончанияРемонта >= Период.ДатаНачала И СтрокаИсполнитель.ДатаОкончанияРемонта <= Период.ДатаОкончания)Тогда
							СтрокаИсполнитель.Выбран = Истина;
						Иначе
							СтрокаИсполнитель.Выбран = Ложь;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НезаполненныеИсполнителиПриИзменении(Элемент)
	ОтборНезаполненныхНаСервере();
	ОтборУстановитьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " мин. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьВремя(ТекущиеДанные)
	
	ТекущиеДанные.ВремяРаботы = ТекущиеДанные.ДатаОкончания - ТекущиеДанные.ДатаНачала;
	ТекущиеДанные.ВремяРаботыТекст = СформироватьПродолжительность(ТекущиеДанные.ВремяРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСпособаЗаполненияКвалификации(ВыбранноеЗначение, ДопПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ВыбранноеЗначение.Представление = "Произвольная" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораКвалификации", ЭтаФорма);
		
		ОткрытьФорму("Справочник.торо_КвалификацииРемонтногоПерсонала.ФормаВыбора",,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
	Иначе
		Квалификация = "<основная>";
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаВыбораКвалификации(ВыбраннаяКвалификация, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяКвалификация) Тогда
		Квалификация = ВыбраннаяКвалификация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КвалификацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Квалификация = "<основная>";
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуДанных(МассивИсполнителей)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ДобавитьКолонкиВТаблицу(ТаблицаДанных);
	
	Если МассивИсполнителей.Количество() > 0 Тогда
		Для каждого СтруктураДанных Из МассивИсполнителей Цикл
			
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтруктураДанных);
			
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ТаблицаДанных;
	
КонецФункции
 
&НаСервере
Процедура ПостроитьДеревоИсполнителей(Результат)
	
	ДеревоИсполнителей.ПолучитьЭлементы().Очистить();

	ВыборкаОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОР.Следующий() Цикл
		
		СтрокаОР = ДеревоИсполнителей.ПолучитьЭлементы().Добавить();
		СтрокаОР.ОбъектРемонта = ВыборкаОР.ОбъектРемонта;
		СтрокаОР.Уровень = 0;
		
		ВыборкаВР = ВыборкаОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВР.Следующий() Цикл
			
			СтрокаВР = СтрокаОР.ПолучитьЭлементы().Добавить();
			СтрокаВР.ВидРемонта = ВыборкаВР.ВидРемонта;
			СтрокаВР.Уровень = 1;
			
			ВыборкаРР = ВыборкаВР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРР.Следующий() Цикл
				
				СтрокаРР = СтрокаВР.ПолучитьЭлементы().Добавить();
				СтрокаРР.РемонтнаяРабота = ВыборкаРР.РемонтнаяРабота;
				СтрокаРР.Уровень = 2;
				
				ВыборкаДетальныеЗаписи = ВыборкаРР.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(СтрокаРР, ВыборкаДетальныеЗаписи,"ID, РемонтыОборудования_ID, Родитель_ID, ДатаНачалаРемонта");
					СтрокаДетЗаписи = СтрокаРР.ПолучитьЭлементы().Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаДетЗаписи,ВыборкаДетальныеЗаписи);
					СтрокаДетЗаписи.Исполнитель_ID = Новый УникальныйИдентификатор;
					СтрокаДетЗаписи.Уровень = 3;
					СтрокаДетЗаписи.ВремяРаботыТекст = СформироватьПродолжительность(СтрокаДетЗаписи.ВремяРаботы);
				КонецЦикла;
				
			КонецЦикла;
			
			СтрокаВР.Ремонт = Строка(ВыборкаВР.ВидРемонта) + " ("+СтрокаДетЗаписи.ДатаНачалаРемонта+" - "+СтрокаДетЗаписи.ДатаОкончанияРемонта+")";
			
			СтрокаВР.ДатаНачалаРемонта = СтрокаДетЗаписи.ДатаНачалаРемонта;
			СтрокаВР.ДатаОкончанияРемонта = СтрокаДетЗаписи.ДатаОкончанияРемонта;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере 
Процедура ДобавитьКолонкиВТаблицу(ТаблицаДанных)
	
	// идентификаторы
	МассивТиповСтрока = Новый Массив;
	МассивТиповСтрока.Добавить(Тип("Строка"));
	
	ТипСтрока = Новый ОписаниеТипов(МассивТиповСтрока,,,,Новый КвалификаторыСтроки(36));
	
	// даты
	МассивТиповДата = Новый Массив;
	МассивТиповДата.Добавить(Тип("Дата"));
	
	ТипДата = Новый ОписаниеТипов(МассивТиповДата,,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	
		
	ТаблицаДанных.Колонки.Добавить("РемонтыОборудования_ID", ТипСтрока);
	ТаблицаДанных.Колонки.Добавить("ID"                    , ТипСтрока);
	ТаблицаДанных.Колонки.Добавить("Родитель_ID"           , ТипСтрока);
	ТаблицаДанных.Колонки.Добавить("Исполнитель_ID"        , ТипСтрока);
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ТехнологическиеОперации"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);
	ТаблицаДанных.Колонки.Добавить("РемонтнаяРабота"       , Тип);
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));
	Тип = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаДанных.Колонки.Добавить("ОбъектРемонта"         , Тип);
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ВидыРемонтов"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);

	ТаблицаДанных.Колонки.Добавить("ВидРемонта"            , Тип);
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);
	ТаблицаДанных.Колонки.Добавить("Квалификация"          , Тип);
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);
	ТаблицаДанных.Колонки.Добавить("Сотрудник"             , Тип);

    // Дата
	ТаблицаДанных.Колонки.Добавить("ДатаНачала"            , ТипДата);
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания"         , ТипДата);
	ТаблицаДанных.Колонки.Добавить("ДатаНачалаРемонта"     , ТипДата);
	ТаблицаДанных.Колонки.Добавить("ДатаОкончанияРемонта"  , ТипДата);
	
	// Число
	МассивТиповЧисло = Новый Массив;
	МассивТиповЧисло.Добавить(Тип("Число"));
	
	ТаблицаДанных.Колонки.Добавить("КТУ"                   , Новый ОписаниеТипов(МассивТиповЧисло,,,Новый КвалификаторыЧисла(5 ,2,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанных.Колонки.Добавить("ВремяРаботы"           , Новый ОписаниеТипов(МассивТиповЧисло,,,Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанных.Колонки.Добавить("СуммаКНачислению"      , Новый ОписаниеТипов(МассивТиповЧисло,,,Новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанных.Колонки.Добавить("Уровень"               , Новый ОписаниеТипов(МассивТиповЧисло,,,Новый КвалификаторыЧисла(3 ,0,ДопустимыйЗнак.Неотрицательный)));
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот(Родитель, СтрокаПоз = Неопределено)
	
	Элементы.ДеревоИсполнителей.Развернуть(Родитель.ПолучитьИдентификатор());
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Если СтрокаПоз <> Неопределено 
			И Строка.Исполнитель_ID = СтрокаПоз.Исполнитель_ID 
			И Строка.ID = СтрокаПоз.ID
			И Строка.РемонтыОборудования_ID = СтрокаПоз.РемонтыОборудования_ID 
			И Строка.Родитель_ID = СтрокаПоз.Родитель_ID
			И Строка.Уровень = СтрокаПоз.Уровень Тогда
				Элементы.ДеревоИсполнителей.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
		КонецЕсли;
		РазвернутьДеревоРемонтныхРабот(Строка, СтрокаПоз);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНаСервере(ТолькоДопустимые = Ложь)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоИсполнителей");
	
	МассивСтрокДерева = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Уровень, Выбран", 3, Истина), Истина);
	
	ТЗИсполнителей = Новый ТаблицаЗначений;
	
	ДобавитьКолонкиВТаблицу(ТЗИсполнителей);
		
	
	Для каждого СтрокаДерева Из МассивСтрокДерева Цикл  // исполнителей из каждой работы переносим в ТЗИсполнителей
		ЗаполнитьЗначенияСвойств(ТЗИсполнителей.Добавить(), СтрокаДерева);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Не МножественныйВыбор Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТабИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	ТабИсполнителей.ОбъектРемонта КАК ОбъектРемонта,
		               |	ТабИсполнителей.ВидРемонта КАК ВидРемонта,
		               |	ТабИсполнителей.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		               |	ТабИсполнителей.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		               |	ТабИсполнителей.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	ТабИсполнителей.Сотрудник КАК Сотрудник,
		               |	ТабИсполнителей.ДатаНачала КАК ДатаНачала,
		               |	ТабИсполнителей.ДатаОкончания КАК ДатаОкончания,
		               |	ТабИсполнителей.КТУ КАК КТУ,
		               |	ТабИсполнителей.ВремяРаботы КАК ВремяРаботы,
		               |	ТабИсполнителей.СуммаКНачислению КАК СуммаКНачислению,
		               |	ТабИсполнителей.ID КАК ID,
		               |	ТабИсполнителей.Уровень КАК Уровень,
		               |	ТабИсполнителей.Квалификация КАК Квалификация,
		               |	ТабИсполнителей.Исполнитель_ID КАК Исполнитель_ID
		               |ПОМЕСТИТЬ ТабИсполнителей
		               |ИЗ
		               |	&ТабИсполнителей КАК ТабИсполнителей
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(торо_КвалификацияРемонтногоПерсонала.Период) КАК Период,
		               |	ВЫБОР
		               |		КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |				И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |					ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
		               |			ТОГДА &Сотрудник
		               |		ИНАЧЕ ТабИсполнителей.Сотрудник
		               |	КОНЕЦ КАК Сотрудник
		               |ПОМЕСТИТЬ МаксПериоды
		               |ИЗ
		               |	ТабИсполнителей КАК ТабИсполнителей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_КвалификацияРемонтногоПерсонала КАК торо_КвалификацияРемонтногоПерсонала
		               |		ПО ТабИсполнителей.ДатаНачалаРемонта > торо_КвалификацияРемонтногоПерсонала.Период
		               |			И (НЕ торо_КвалификацияРемонтногоПерсонала.Удаленная)
		               |			И (ВЫБОР
		               |				КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |						И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |							ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
		               |					ТОГДА торо_КвалификацияРемонтногоПерсонала.Сотрудник = &Сотрудник
		               |				ИНАЧЕ ТабИсполнителей.Сотрудник = торо_КвалификацияРемонтногоПерсонала.Сотрудник
		               |			КОНЕЦ)
		               |			И (ВЫБОР
		               |				КОГДА ТабИсполнителей.Квалификация = ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
		               |						ИЛИ НЕ &НеОчищатьКвалификацию
		               |					ТОГДА ВЫБОР
		               |							КОГДА &ЗаполнятьОснКвалификацию
		               |								ТОГДА торо_КвалификацияРемонтногоПерсонала.Основная
		               |							КОГДА &Квалификация <> ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
		               |								ТОГДА торо_КвалификацияРемонтногоПерсонала.Квалификация = &Квалификация
		               |							ИНАЧЕ ТабИсполнителей.Квалификация = торо_КвалификацияРемонтногоПерсонала.Квалификация
		               |						КОНЕЦ
		               |				ИНАЧЕ ЛОЖЬ
		               |			КОНЕЦ)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВЫБОР
		               |		КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |				И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |					ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
		               |			ТОГДА &Сотрудник
		               |		ИНАЧЕ ТабИсполнителей.Сотрудник
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_КвалификацияРемонтногоПерсонала.Период КАК Период,
		               |	торо_КвалификацияРемонтногоПерсонала.НомерСтроки КАК НомерСтроки,
		               |	торо_КвалификацияРемонтногоПерсонала.Сотрудник КАК Сотрудник,
		               |	торо_КвалификацияРемонтногоПерсонала.Квалификация КАК Квалификация,
		               |	торо_КвалификацияРемонтногоПерсонала.Основная КАК Основная,
		               |	торо_КвалификацияРемонтногоПерсонала.Удаленная КАК Удаленная
		               |ПОМЕСТИТЬ КвалификацииМаксПериоды
		               |ИЗ
		               |	МаксПериоды КАК МаксПериоды
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_КвалификацияРемонтногоПерсонала КАК торо_КвалификацияРемонтногоПерсонала
		               |		ПО МаксПериоды.Период = торо_КвалификацияРемонтногоПерсонала.Период
		               |			И МаксПериоды.Сотрудник = торо_КвалификацияРемонтногоПерсонала.Сотрудник
		               |			И (ВЫБОР
		               |				КОГДА &ЗаполнятьОснКвалификацию
		               |					ТОГДА торо_КвалификацияРемонтногоПерсонала.Основная
		               |				КОГДА ТИПЗНАЧЕНИЯ(&Квалификация) = ТИП(Справочник.торо_КвалификацииРемонтногоПерсонала)
		               |						И &Квалификация <> ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
		               |					ТОГДА торо_КвалификацияРемонтногоПерсонала.Квалификация = &Квалификация
		               |				ИНАЧЕ ЛОЖЬ
		               |			КОНЕЦ)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	ТабИсполнителей.ОбъектРемонта КАК ОбъектРемонта,
		               |	ТабИсполнителей.ВидРемонта КАК ВидРемонта,
		               |	ТабИсполнителей.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		               |	ТабИсполнителей.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		               |	ТабИсполнителей.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	ВЫБОР
		               |		КОГДА НЕ &ЗаполнятьПериодИВремяРабот
		               |			ТОГДА ТабИсполнителей.ДатаНачала
		               |		КОГДА &НеОчищатьДатуНачала
		               |				ИЛИ &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |			ТОГДА ТабИсполнителей.ДатаНачала
		               |		ИНАЧЕ &ДатаНачала
		               |	КОНЕЦ КАК ДатаНачала,
		               |	ВЫБОР
		               |		КОГДА НЕ &ЗаполнятьПериодИВремяРабот
		               |			ТОГДА ТабИсполнителей.ДатаОкончания
		               |		КОГДА &НеОчищатьДатуОкончания
		               |				ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |			ТОГДА ТабИсполнителей.ДатаОкончания
		               |		ИНАЧЕ &ДатаОкончания
		               |	КОНЕЦ КАК ДатаОкончания,
		               |	ТабИсполнителей.КТУ КАК КТУ,
		               |	ТабИсполнителей.ВремяРаботы КАК ВремяРаботы,
		               |	ТабИсполнителей.СуммаКНачислению КАК СуммаКНачислению,
		               |	ТабИсполнителей.ID КАК ID,
		               |	ТабИсполнителей.Уровень КАК Уровень,
		               |	ВЫБОР
		               |		КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |				И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |					ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
		               |			ТОГДА &Сотрудник
		               |		ИНАЧЕ ТабИсполнителей.Сотрудник
		               |	КОНЕЦ КАК Сотрудник,
		               |	ВЫБОР
		               |		КОГДА КвалификацииМаксПериоды.Квалификация ЕСТЬ NULL
		               |			ТОГДА ВЫБОР
		               |					КОГДА &НеОчищатьКвалификацию
		               |						ТОГДА ТабИсполнителей.Квалификация
		               |					ИНАЧЕ &Квалификация
		               |				КОНЕЦ
		               |		ИНАЧЕ КвалификацииМаксПериоды.Квалификация
		               |	КОНЕЦ КАК Квалификация,
		               |	ТабИсполнителей.Исполнитель_ID КАК Исполнитель_ID
		               |ПОМЕСТИТЬ СДатамиНачалаИОкончания
		               |ИЗ
		               |	ТабИсполнителей КАК ТабИсполнителей
		               |		ЛЕВОЕ СОЕДИНЕНИЕ КвалификацииМаксПериоды КАК КвалификацииМаксПериоды
		               |		ПО (ВЫБОР
		               |				КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |						И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		               |							ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
		               |					ТОГДА &Сотрудник = КвалификацииМаксПериоды.Сотрудник
		               |				ИНАЧЕ ТабИсполнителей.Сотрудник = КвалификацииМаксПериоды.Сотрудник
		               |			КОНЕЦ)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СДатамиНачалаИОкончания.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	СДатамиНачалаИОкончания.ОбъектРемонта КАК ОбъектРемонта,
		               |	СДатамиНачалаИОкончания.ВидРемонта КАК ВидРемонта,
		               |	СДатамиНачалаИОкончания.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		               |	СДатамиНачалаИОкончания.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		               |	СДатамиНачалаИОкончания.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	СДатамиНачалаИОкончания.ДатаНачала КАК ДатаНачала,
		               |	СДатамиНачалаИОкончания.ДатаОкончания КАК ДатаОкончания,
		               |	ВЫБОР
		               |		КОГДА НЕ &ЗаполнятьПериодИВремяРабот
		               |				ИЛИ &НеОчищатьВремяРаботы
		               |			ТОГДА СДатамиНачалаИОкончания.ВремяРаботы
		               |		КОГДА СДатамиНачалаИОкончания.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |				И СДатамиНачалаИОкончания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |			ТОГДА РАЗНОСТЬДАТ(СДатамиНачалаИОкончания.ДатаНачала, СДатамиНачалаИОкончания.ДатаОкончания, СЕКУНДА)
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ВремяРаботы,
		               |	СДатамиНачалаИОкончания.КТУ КАК КТУ,
		               |	СДатамиНачалаИОкончания.СуммаКНачислению КАК СуммаКНачислению,
		               |	СДатамиНачалаИОкончания.ID КАК ID,
		               |	СДатамиНачалаИОкончания.Уровень КАК Уровень,
		               |	СДатамиНачалаИОкончания.Сотрудник КАК Сотрудник,
		               |	СДатамиНачалаИОкончания.Квалификация КАК Квалификация,
		               |	СДатамиНачалаИОкончания.Исполнитель_ID КАК Исполнитель_ID
		               |ИЗ
		               |	СДатамиНачалаИОкончания КАК СДатамиНачалаИОкончания";
		
		Запрос.УстановитьПараметр("ТабИсполнителей"                    , ТЗИсполнителей);
		Запрос.УстановитьПараметр("ТолькоДляНеустановленныхСотрудников", НеОчищатьСотрудника);
		Запрос.УстановитьПараметр("Сотрудник"                          , Сотрудник);
		Запрос.УстановитьПараметр("НеОчищатьКвалификацию"              , НеОчищатьКвалификацию);
		Запрос.УстановитьПараметр("Квалификация"                       , ?(Квалификация = "<основная>", Справочники.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка(), Квалификация));
		Запрос.УстановитьПараметр("ЗаполнятьОснКвалификацию"           , Квалификация = "<основная>");
		Запрос.УстановитьПараметр("ЗаполнятьПериодИВремяРабот"         , ЗаполнятьПериодИВремяРабот);
		Запрос.УстановитьПараметр("ДатаНачала"                         , ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания"                      , ДатаОкончания);
		Запрос.УстановитьПараметр("НеОчищатьДатуНачала"                , НеОчищатьДатуНачала);
		Запрос.УстановитьПараметр("НеОчищатьДатуОкончания"             , НеОчищатьДатуОкончания);
		Запрос.УстановитьПараметр("НеОчищатьВремяРаботы"			   , НеОчищатьВремяРаботы);
		
		РезЗапроса = Запрос.Выполнить();
		Выборка = РезЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МассивСтрокДерева = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID, Исполнитель_ID", 
			Выборка.ID, Выборка.РемонтыОборудования_ID, Выборка.Исполнитель_ID), Истина);
			
			Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
				Если ТолькоДопустимые И Не СтрокаДерева.МожноЗаполнитьСотрудника Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
				СтрокаДерева.ВремяРаботыТекст = СформироватьПродолжительность(СтрокаДерева.ВремяРаботы);
				СтрокаДерева.МожноЗаполнитьСотрудника = Ложь;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТабИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	ТабИсполнителей.ВидРемонта КАК ВидРемонта,
		               |	ТабИсполнителей.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		               |	ТабИсполнителей.ID КАК ID
		               |ПОМЕСТИТЬ ТабИсполнителей
		               |ИЗ
		               |	&ТабИсполнителей КАК ТабИсполнителей
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
		               |	ВТ_Сотрудники.Квалификация КАК Квалификация,
		               |	ВЫБОР
		               |		КОГДА (ВЫРАЗИТЬ(ВТ_Сотрудники.Квалификация КАК СТРОКА(100))) = ""<основная>""
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Основная
		               |ПОМЕСТИТЬ ВТ_Сотрудники
		               |ИЗ
		               |	&Сотрудники КАК ВТ_Сотрудники
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
		               |	ТабИсполнителей.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		               |	ВТ_Сотрудники.Основная КАК Основная,
		               |	ВЫРАЗИТЬ(ВТ_Сотрудники.Квалификация КАК Справочник.торо_КвалификацииРемонтногоПерсонала) КАК Квалификация,
		               |	ТабИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	ТабИсполнителей.ID КАК ID
		               |ПОМЕСТИТЬ ВТ_СотрудникиСДатами
		               |ИЗ
		               |	ТабИсполнителей КАК ТабИсполнителей,
		               |	ВТ_Сотрудники КАК ВТ_Сотрудники
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_СотрудникиСДатами.Сотрудник КАК Сотрудник,
		               |	МАКСИМУМ(торо_КвалификацияРемонтногоПерсонала.Период) КАК Период,
		               |	ВТ_СотрудникиСДатами.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	ВТ_СотрудникиСДатами.ID КАК ID
		               |ПОМЕСТИТЬ ВТ_МаксПериодыДляКвалификаций
		               |ИЗ
		               |	ВТ_СотрудникиСДатами КАК ВТ_СотрудникиСДатами
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_КвалификацияРемонтногоПерсонала КАК торо_КвалификацияРемонтногоПерсонала
		               |		ПО ВТ_СотрудникиСДатами.ДатаНачалаРемонта > торо_КвалификацияРемонтногоПерсонала.Период
		               |			И ВТ_СотрудникиСДатами.Сотрудник = торо_КвалификацияРемонтногоПерсонала.Сотрудник
		               |			И (НЕ торо_КвалификацияРемонтногоПерсонала.Удаленная)
		               |ГДЕ
		               |	ВТ_СотрудникиСДатами.Основная = ИСТИНА
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_СотрудникиСДатами.Сотрудник,
		               |	ВТ_СотрудникиСДатами.РемонтыОборудования_ID,
		               |	ВТ_СотрудникиСДатами.ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_МаксПериодыДляКвалификаций.Сотрудник КАК Сотрудник,
		               |	торо_КвалификацияРемонтногоПерсонала.Квалификация КАК Квалификация,
		               |	ВТ_МаксПериодыДляКвалификаций.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		               |	ВТ_МаксПериодыДляКвалификаций.ID КАК ID
		               |ИЗ
		               |	ВТ_МаксПериодыДляКвалификаций КАК ВТ_МаксПериодыДляКвалификаций
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_КвалификацияРемонтногоПерсонала КАК торо_КвалификацияРемонтногоПерсонала
		               |		ПО ВТ_МаксПериодыДляКвалификаций.Сотрудник = торо_КвалификацияРемонтногоПерсонала.Сотрудник
		               |			И ВТ_МаксПериодыДляКвалификаций.Период = торо_КвалификацияРемонтногоПерсонала.Период";
		
		
		Запрос.УстановитьПараметр("ТабИсполнителей", ТЗИсполнителей);
		Запрос.УстановитьПараметр("Сотрудники", ТаблицаИсполнителейДляАвтозаполнения.Выгрузить());
		
		ОсновныеКвалификации = Запрос.Выполнить().Выгрузить();
		
		Сотрудники = Новый ТаблицаЗначений;
		Сотрудники.Колонки.Добавить("Номер");
		Сотрудники.Колонки.Добавить("Сотрудник");
		Сотрудники.Колонки.Добавить("Квалификация");
		Номер = 1;

		Для каждого Строка Из ТаблицаИсполнителейДляАвтозаполнения Цикл
			НоваяСтрока = Сотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Номер = Номер;
			Номер = Номер + 1;
		КонецЦикла; 
		КоличествоСтрокСотрудников = Сотрудники.Количество();
		Ремонты = ТЗИсполнителей.Скопировать();

		Для каждого Операция Из Ремонты Цикл
			ДобавлятьСтроки = Истина;
			СтруктураПоиска = Новый Структура("Уровень, Выбран, РемонтыОборудования_ID, ID", 3, Истина, Операция.РемонтыОборудования_ID, Операция.ID);
			МассивСтрокЗаполнения = ДеревоЗначений.Строки.НайтиСтроки(СтруктураПоиска, Истина);	
			
			НомерСтрокиДерева = 1;
			Для каждого СтрокаДерева Из МассивСтрокЗаполнения Цикл
				СтруктураПоискаСотрудника = Новый Структура("Номер", НомерСтрокиДерева);
				НайденныеСтроки = Сотрудники.НайтиСтроки(СтруктураПоискаСотрудника);
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НомерСтрокиДерева = 1;
					СтруктураПоискаСотрудника = Новый Структура("Номер", НомерСтрокиДерева);
					НайденныеСтроки = Сотрудники.НайтиСтроки(СтруктураПоискаСотрудника);
					КопияОсновныхКвалификаций = ОсновныеКвалификации.Скопировать();
					Для каждого Строка Из НайденныеСтроки Цикл
                    	ЗаполнитьСтроку(СтрокаДерева, Строка, КопияОсновныхКвалификаций)
					КонецЦикла; 
					ДобавлятьСтроки = Ложь;
					НомерСтрокиДерева = НомерСтрокиДерева + 1;
					
				Иначе
					КопияОсновныхКвалификаций = ОсновныеКвалификации.Скопировать();
					Для каждого Строка Из НайденныеСтроки Цикл
                    	ЗаполнитьСтроку(СтрокаДерева, Строка, КопияОсновныхКвалификаций)
					КонецЦикла; 
					НомерСтрокиДерева = НомерСтрокиДерева + 1;		
				КонецЕсли;
			КонецЦикла; 
			
			Пока НомерСтрокиДерева <= КоличествоСтрокСотрудников И ДобавлятьСтроки Цикл
			    НоваяСтрока = СтрокаДерева.Родитель.Строки.Добавить();
				НоваяСтрока.Исполнитель_ID = Новый УникальныйИдентификатор();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева, , "Исполнитель_ID, Сотрудник, Квалификация");
				СтруктураПоискаСотрудника = Новый Структура("Номер", НомерСтрокиДерева);
				НайденныеСтроки = Сотрудники.НайтиСтроки(СтруктураПоискаСотрудника);
				Для каждого Строка Из НайденныеСтроки Цикл
					ЗаполнитьСтроку(НоваяСтрока, Строка, КопияОсновныхКвалификаций)
				КонецЦикла;
				НомерСтрокиДерева = НомерСтрокиДерева + 1;
			КонецЦикла;
			
		КонецЦикла
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоИсполнителей");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтроку(СтрокаДерева, Строка, ОсновныеКвалификации)

	Если Не НеОчищатьСотрудника ИЛИ Не ЗначениеЗаполнено(СтрокаДерева.Сотрудник) Тогда
		СтрокаДерева.Сотрудник = Строка.Сотрудник;
	КонецЕсли; 
	
	Если Не НеОчищатьКвалификацию ИЛИ Не ЗначениеЗаполнено(СтрокаДерева.Квалификация) Тогда
		Если Строка.Квалификация = "<основная>" Тогда
			СтруктураПоискаКвалификации = Новый Структура("Сотрудник, РемонтыОборудования_ID, ID", Строка.Сотрудник, СтрокаДерева.РемонтыОборудования_ID, СтрокаДерева.ID);
			СтрокиКвалификации = ОсновныеКвалификации.НайтиСтроки(СтруктураПоискаКвалификации);
			Для каждого Подстрока Из СтрокиКвалификации Цикл
				СтрокаДерева.Квалификация = Подстрока.Квалификация;	
			КонецЦикла; 
		Иначе
			СтрокаДерева.Квалификация = Строка.Квалификация;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не НеОчищатьДатуНачала Тогда
		СтрокаДерева.ДатаНачала = ДатаНачала;
	КонецЕсли; 
	
	Если Не НеОчищатьДатуОкончания Тогда
		СтрокаДерева.ДатаОкончания = ДатаОкончания;
	КонецЕсли; 
	
	Если НЕ НеОчищатьВремяРаботы Тогда
		СтрокаДерева.ВремяРаботы = СтрокаДерева.ДатаОкончания - СтрокаДерева.ДатаНачала;
		СтрокаДерева.ВремяРаботыТекст = СформироватьПродолжительность(СтрокаДерева.ВремяРаботы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(НужноУстановить = Неопределено)
	
	Для каждого Объекты Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		Для каждого Ремонт Из Объекты.ПолучитьЭлементы() Цикл
			Для каждого РемРабота Из Ремонт.ПолучитьЭлементы() Цикл
				Для каждого СтрокаИсполнитель Из РемРабота.ПолучитьЭлементы() Цикл
					СтрокаИсполнитель.Выбран = ?(НужноУстановить = Неопределено, Не СтрокаИсполнитель.Выбран, НужноУстановить);	
					Если НужноУстановить = Неопределено ИЛИ НужноУстановить Тогда
						СкорректироватьСписокКвалификаций(СтрокаИсполнитель);
					КонецЕсли;
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	Если НужноУстановить = Ложь Тогда 
		СписокКвалификаций.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьСписокКвалификаций(ТекДанные)
	Если ЗначениеЗаполнено(ТекДанные.Квалификация) Тогда 
		Если ТекДанные.Выбран Тогда
			СписокКвалификаций.Добавить(ТекДанные.Квалификация);
		Иначе
			НайденныйЭлемент = СписокКвалификаций.НайтиПоЗначению(ТекДанные.Квалификация); 
			Если НайденныйЭлемент <> Неопределено Тогда
				СписокКвалификаций.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКвалификацииБезДублей()
	СписокКвалификацийБезДублей = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из СписокКвалификаций Цикл
		Если СписокКвалификацийБезДублей.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда 
			СписокКвалификацийБезДублей.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокКвалификацийБезДублей;
КонецФункции

&НаКлиенте
Процедура ВопросОЗаполненииСотрудника(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьДеревоНаСервере(); 
	Иначе
		ЗаполнитьДеревоНаСервере(Истина);
	КонецЕсли;
	Для Каждого Строка Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка, ДопПараметры.СтрокаПоз);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыбранногоСотрудника(Сообщение)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник КАК Сотрудник,
	               |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Квалификация КАК Квалификация,
	               |	торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Период КАК ДатаПрисвоениеКвалификации,
	               |	ВЫБОР
	               |		КОГДА &УчетКадров
	               |			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Уволен,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Период КАК ДатаКадровогоИзменения
	               |ИЗ
	               |	РегистрСведений.торо_КвалификацияРемонтногоПерсонала.СрезПоследних(, Сотрудник = &Сотрудник) КАК торо_КвалификацияРемонтногоПерсоналаСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	               |		ПО торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	               |ГДЕ
	               |	НЕ торо_КвалификацияРемонтногоПерсоналаСрезПоследних.Удаленная";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("УчетКадров", ПолучитьФункциональнуюОпцию("торо_ИспользоватьУправлениеПерсоналом"));
	СохранитьИзмененияДерева = Ложь;
	РезЗапроса = Запрос.Выполнить();
	Если Не РезЗапроса.Пустой() Тогда
		ТабКвалификаций = РезЗапроса.Выгрузить();
		Уволен = ТабКвалификаций[0].Уволен;
		ДатаУвольнения = ТабКвалификаций[0].ДатаКадровогоИзменения;
		ДеревоЗначений = РеквизитФормыВЗначение("ДеревоИсполнителей");
		ВыбранныеСтроки = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Уровень, Выбран", 3, Истина), Истина);
		ТекРодитель = Неопределено;
		ШаблонОбъекта = ?(ЗаполнениеРегламентных, НСтр("ru = 'Список объектов'"), НСтр("ru = 'Объект ремонта'"));
		Для Каждого СтрокаДерева Из ВыбранныеСтроки Цикл
			Родитель = СтрокаДерева.Родитель.Родитель;
			ФорматированнаяДатаРемонта = Формат(СтрокаДерева.ДатаНачалаРемонта, "ДФ=dd.MM.yyyy");
			Если Уволен Тогда 
				Если ДатаУвольнения < СтрокаДерева.ДатаНачалаРемонта И ТекРодитель <> Родитель Тогда
					ПодСообщение = СтрШаблон(НСтр("ru = '%1 ""%2"",  ремонт ""%3"" от %4: на дату ремонта выбранный сотрудник уволен.'"),
						ШаблонОбъекта, СтрокаДерева.ОбъектРемонта, СтрокаДерева.ВидРемонта, ФорматированнаяДатаРемонта);
					Сообщение = Сообщение + ПодСообщение + Символы.ПС;
					ТекРодитель = Родитель;
				КонецЕсли;
			Иначе
				НайденныеКвалификации = ТабКвалификаций.НайтиСтроки(Новый Структура("Квалификация", СтрокаДерева.Квалификация));
				Если НайденныеКвалификации.Количество() Тогда
					Если НайденныеКвалификации[0].ДатаПрисвоениеКвалификации > СтрокаДерева.ДатаНачалаРемонта Тогда
						ПодСообщение = СтрШаблон(НСтр("ru = '%1 ""%2"",  ремонт ""%3"" от %4: на дату ремонта указанная квалификация %5 выбранному сотруднику еще не присвоена.'"),
							ШаблонОбъекта, СтрокаДерева.ОбъектРемонта, СтрокаДерева.ВидРемонта, ФорматированнаяДатаРемонта, СтрокаДерева.Квалификация);
						Сообщение = Сообщение + ПодСообщение + Символы.ПС;
					Иначе
						СтрокаДерева.МожноЗаполнитьСотрудника = Истина;	
						СохранитьИзмененияДерева = Истина;
					КонецЕсли;
				Иначе
					ПодСообщение = СтрШаблон(НСтр("ru = '%1 ""%2"",  ремонт ""%3"" от %4: у выбранного сотрудника отсутствует указанная квалификация (%5).'"),
						ШаблонОбъекта, СтрокаДерева.ОбъектРемонта, СтрокаДерева.ВидРемонта, ФорматированнаяДатаРемонта, СтрокаДерева.Квалификация);
					Сообщение = Сообщение + ПодСообщение + Символы.ПС;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Сообщение = НСтр("ru = 'У выбранного сотрудника отсутствуют указанные квалификации. '");	
	КонецЕсли;
	Если СохранитьИзмененияДерева Тогда 
		ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоИсполнителей");
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ОтборНезаполненныхНаСервере() 
	
	СкрыватьРодителей = Истина;
	Для каждого Объекты Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		Для каждого Ремонт Из Объекты.ПолучитьЭлементы() Цикл
			СкрыватьРодителей = Истина;
			Для каждого РемРабота Из Ремонт.ПолучитьЭлементы() Цикл
				СкрыватьРемРаботу = Истина;
				Для каждого СтрокаИсполнитель Из РемРабота.ПолучитьЭлементы() Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаИсполнитель.Сотрудник) Тогда
						СтрокаИсполнитель.Отбор = Истина;
						СкрыватьРодителей = Ложь;
						СкрыватьРемРаботу = Ложь;
					Иначе
						СтрокаИсполнитель.Отбор = Ложь;
					КонецЕсли;
				КонецЦикла;
				РемРабота.Отбор = НЕ СкрыватьРемРаботу;
			КонецЦикла;
			Ремонт.Отбор = НЕ СкрыватьРодителей;
		КонецЦикла;
		Объекты.Отбор = НЕ СкрыватьРодителей;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОтборУстановитьНаСервере()
	
	Для каждого ТекЭлементУО Из УсловноеОформление.Элементы Цикл
		Если Найти(ТекЭлементУО.Представление, "ОтборНезаполненных") > 0  Тогда
			ТекЭлементУО.Поля.Элементы.Очистить();
			ТекЭлементУО.Отбор.Элементы.Очистить();
			Элемент = ТекЭлементУО;
		КонецЕсли;
	КонецЦикла;
	
	Если НезаполненныеИсполнители Тогда
		Если Элемент = Неопределено Тогда
			Элемент = УсловноеОформление.Элементы.Добавить();
			Элемент.Представление = "ОтборНезаполненных";
		КонецЕсли;
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоИсполнителей.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоИсполнителей.Отбор");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



 
 
