#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

// ТОИР-->
Перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										// из регистра сведений торо_МатрицаПереходаСтатусовДокументов.
// <--ТОИР

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// ТОиР
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("МассивСтрокНоменклатуры") 
		Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
				
		Для каждого Строка Из ДанныеЗаполнения.МассивСтрокНоменклатуры Цикл
			НС = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Строка);
			НС.КоличествоУпаковок = Строка.Количество;
		КонецЦикла; 
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	Если Константы.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление.Получить() Тогда
	    торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении;
		
		Для каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
		КонецЦикла;
	КонецЕсли;
	// ТОиР
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
		
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаОтгрузки");
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Товары", "Отменено");	
			
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ДатаОтгрузки) И 
		ДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ШаблонСообщения = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Дата,"ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаОтгрузки",, Отказ);
		
	КонецЕсли;
	
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	Если ФОИспользоватьХарактеристикиНоменклатуры = Истина тогда
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	КонецЕсли;
	
	// ТОИР-->
	Если Не Константы.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление.Получить() Тогда
	    МассивНепроверяемыхРеквизитов.Добавить("торо_СтатусУтверждения");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.торо_СтатусУтверждения");
	КонецЕсли;
	// <--ТОИР
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	МаксимальныйКодСтроки = 1;

	Для каждого СтрокаТовары Из Товары Цикл

		СтрокаТовары.Отменено  = Ложь;
		СтрокаТовары.КодСтроки = МаксимальныйКодСтроки;
		
		МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;

	КонецЦикла;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	ИнициализироватьДокумент();
	
	торо_СозданПоПотребности = Ложь;
	торо_IDРемонта = "";
	торо_ОбъектРемонта = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	торо_ВидРемонта = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
	торо_ТехКарта = Справочники.торо_ИдентификаторыТехКарт.ПустаяСсылка();
	ДокументОснование = Неопределено; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления И торо_СозданПоПотребности И НЕ ДополнительныеСвойства.Свойство("УстановкаПометкиУдаленияОбработана") Тогда 
		ТекстСообщения = Нстр("ru = 'Невозможно изменить пометку удаления документа, автоматически созданного по потребности.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");

	Если НЕ Ссылка.Пустая() И
		((РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления И Проведен)
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.ЗаказНаВнутреннееПотребление КАК ДокИсточник
		               |ИЗ
		               |	Документ.ВнутреннееПотреблениеТоваров КАК Таб
		               |ГДЕ
		               |	Таб.ЗаказНаВнутреннееПотребление = &Ссылка
		               |	И Таб.Ссылка.Проведен
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление
		               |ИЗ
		               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(, ЗаказНаВнутреннееПотребление = &Ссылка) КАК торо_РезервыНаСкладахОстатки
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление
		               |ИЗ
		               |	РегистрНакопления.торо_ТоварыНаРуках.Остатки(, ЗаказНаВнутреннееПотребление = &Ссылка) КАК торо_ТоварыНаРукахОстатки
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Таб.ЗаказНаВнутреннееПотребление
		               |ИЗ
		               |	Документ.торо_ЗакрытиеЗаказаНаВнутреннееПотребление КАК Таб
		               |ГДЕ
		               |	Таб.ЗаказНаВнутреннееПотребление = &Ссылка
		               |	И Таб.Ссылка.Проведен";
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезЗапроса = Запрос.Выполнить();
		Если НЕ РезЗапроса.Пустой() Тогда
			Если (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления) Тогда
				ТекстСообщения = Нстр("ru='Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				ТекстСообщения = Нстр("ru='Невозможно проведение документа, есть документы, введенные на основании данного!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИнтеграцияДокументов.ID КАК ID
		               |ПОМЕСТИТЬ ВТ_IDРемонтов
		               |ИЗ
		               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		               |ГДЕ
		               |	торо_ИнтеграцияДокументов.ДокументТОИР.Проведен = ИСТИНА
		               |	И торо_ИнтеграцияДокументов.ДокументЕРП.Ссылка = &Ссылка
		               |	И торо_ИнтеграцияДокументов.ДокументТОИР ССЫЛКА Документ.торо_ЗаявкаНаРемонт
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ИнтеграцияДокументов.ID КАК ID
		               |ИЗ
		               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		               |ГДЕ
		               |	торо_ИнтеграцияДокументов.ID В
		               |			(ВЫБРАТЬ
		               |				ВТ_IDРемонтов.ID КАК ID
		               |			ИЗ
		               |				ВТ_IDРемонтов КАК ВТ_IDРемонтов)
		               |	И торо_ИнтеграцияДокументов.ДокументТОИР ССЫЛКА Документ.торо_АктОВыполненииЭтапаРабот
		               |	И торо_ИнтеграцияДокументов.ДокументЕРП ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
		               |	И торо_ИнтеграцияДокументов.ДокументТОИР.Проведен = ИСТИНА
		               |	И торо_ИнтеграцияДокументов.ДокументЕРП.Проведен = ИСТИНА";
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезЗапроса = Запрос.Выполнить();
		Если НЕ РезЗапроса.Пустой() Тогда
			Если (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления) Тогда
				ТекстСообщения = Нстр("ru='Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				ТекстСообщения = Нстр("ru='Невозможно перепровести документ, так как имеются созданные на его основании проведенные документы!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		 торо_Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТабличнойЧасти, РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки")

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ФОИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика КАК Характеристика,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Упаковка КАК Упаковка,
	               |	СУММА(ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	               |	СУММА(ЗаказНаВнутреннееПотреблениеТовары.Количество) КАК Количество,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Отменено КАК Отменено,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КодСтроки КАК КодСтроки,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Серия КАК Серия,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры
	               |ИЗ
	               |	Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	               |ГДЕ
	               |	ЗаказНаВнутреннееПотреблениеТовары.Ссылка = &Ссылка
	               |	И НЕ ЗаказНаВнутреннееПотреблениеТовары.Отменено
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Характеристика,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Упаковка,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Отменено,
	               |	ЗаказНаВнутреннееПотреблениеТовары.КодСтроки,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Серия,
	               |	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТЧТовары = Запрос.Выполнить().Выгрузить();
	// регистр ЗаказыНаВнутреннееПотребление Приход
	Движения.ЗаказыНаВнутреннееПотребление.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из ТЧТовары Цикл
		Если ТекСтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			 ИЛИ ТекСтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
					
			Движение = Движения.ЗаказыНаВнутреннееПотребление.Добавить();
			Движение.ВидДвижения    				= ВидДвиженияНакопления.Приход;
			Движение.Период        					= Дата;
			Движение.ЗаказНаВнутреннееПотребление 	= Ссылка;
			Движение.Номенклатура   				= ТекСтрокаТовары.Номенклатура;
			Движение.Характеристика 				= ТекСтрокаТовары.Характеристика;
			Движение.Склад          				= Склад;
			Движение.КодСтроки						= ТекСтрокаТовары.КодСтроки;
			Движение.КОформлению       				= ТекСтрокаТовары.Количество;
			
			Если ФОИспользоватьСерии Тогда
				Движение.Серия      = ТекСтрокаТовары.Серия;
			КонецЕсли; 	

		КонецЕсли;
	КонецЦикла;
	
	Движения.ЗаказыНаВнутреннееПотребление.Записывать = Истина;
	
	// ТОИР-->
	торо_РаботаСУведомлениями.СформироватьУведомленияОСобытияхУтвержденияЗаказовНаВП(ЭтотОбъект);
	// <--ТОИР
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗначениеЗаполнено(торо_IDРемонта) Тогда
		торо_МТОСервер.ПроведениеПоРегиструИнтеграции(Ссылка);
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
