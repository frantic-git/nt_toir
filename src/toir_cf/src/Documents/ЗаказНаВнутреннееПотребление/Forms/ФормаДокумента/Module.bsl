&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
		
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
		
	// ТОИР-->
	// Заголовок формы++
		торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	// <--ТОИР
	
	Если Параметры.Свойство("СписокID") Тогда
		Для каждого Ремонт Из Параметры.СписокID Цикл
			СписокID.Добавить(Ремонт.Значение, Ремонт.Ключ);
		КонецЦикла; 
	КонецЕсли; 
	
	// ТОИР--> 
	Элементы.Ремонт.Видимость = Объект.торо_СозданПоПотребности;

	торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление = Константы.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление.Получить();
	
	Элементы.торо_СтатусУтверждения.Видимость = торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление;
	Элементы.ОткрытьКомментарииКУтверждению.Видимость = торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление;
	Элементы.Товарыторо_СтатусУтверждения.Видимость = торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление;
	Элементы.ТоварыОтменено.Видимость = Не торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление;
	
	торо_ИсходныйСтатусУтверждения = Объект.торо_СтатусУтверждения;
	
	торо_ДоступныПраваНаУтверждениеВП = РольДоступна("торо_УтверждениеЗаказовНаВП") Или Пользователи.ЭтоПолноправныйПользователь();

	торо_ФОИспользоватьАналоги = Константы.торо_ИспользоватьАналогиНоменклатурыДляРемонтов.Получить();
	Если Не торо_ФОИспользоватьАналоги Тогда
	    Элементы.ТоварыЕстьАналоги.Видимость = Ложь;
	Иначе
		ОбновитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	// <--ТОИР
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// ТОИР--> 
	ЭтаФорма.ТолькоПросмотр = Объект.торо_СозданПоПотребности;
	УстановитьУсловноеОформлениеПоСтатусуУтверждения();
	торо_ИсходныйСтатусУтверждения = ТекущийОбъект.торо_СтатусУтверждения;
	ОбновитьДобавленныеКолонкиТаблиц();
	// <--ТОИР
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
		
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// ТОИР-->
	
	// Если в списке комментариев был добавлен комментарий по документу, то сразу в РС он не
	// записывается, только при записи.
	Если ЗначениеЗаполнено(торо_КомментарийКУтверждениюПоДокументу) Тогда
	    СохранитьКомментарийКУтверждению(торо_КомментарийКУтверждениюПоДокументу);
		
		торо_КомментарийКУтверждениюПоДокументу = "";
		торо_ИсходныйСтатусУтверждения = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	Если торо_ИсходныйСтатусУтверждения = Объект.торо_СтатусУтверждения
		Или Не Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении")
			И Не Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.ВозвращенНаДоработку") Тогда
		Возврат;
	КонецЕсли;

	// Общее правило: когда утверждающий возвращает на доработку и когда ответственный возвращает на утверждение
	// – ввод комментария обязателен, если он еще не оставил ни одного нового комментария (т.е. последний
	// комментировавший пользователь – другой) к строкам ТЧ Товары или к документу в целом.
	Если ОбязателенВводКомментария() Тогда
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("торо_КомментарийЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводСтроки(ОповещениеОЗакрытии, "", "Комментарий к утверждению",, Истина);
		
		Возврат;
	КонецЕсли;
	
	// <--ТОИР
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	// ТОиР
	СделатьЗаписиВРСИнтеграцияДокументов(СписокID, Объект.Ссылка);	
	ОбновитьДобавленныеКолонкиТаблиц();
	// ТОиР

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// ТОИР-->
	
	// Если статус был изменен, то надо обновить РМ утверждения заказов
	Если Не торо_ИсходныйСтатусУтверждения = Объект.торо_СтатусУтверждения Тогда
		Оповестить("ИзмененСтатусУтвержденияЗаказаНаВП", Объект.Ссылка);
		торо_ИсходныйСтатусУтверждения = Объект.торо_СтатусУтверждения;
	КонецЕсли;
	// <--ТОИР
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ТекДанные = ЭтаФорма.ОписаниеОповещенияОЗакрытии;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ДополнительныеПараметры <> Неопределено Тогда 
			Если ТекДанные.ДополнительныеПараметры.Свойство("МассивID") ИЛИ ТекДанные.ДополнительныеПараметры.Свойство("ТекущийРемонт_ID") Тогда 
				ЭтаФорма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("Ссылка"  , Объект.Ссылка);
				ЭтаФорма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("Проведен", Объект.Проведен);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ТОИР-->
	Если ИмяСобытия = "ВводКомментарияКУтверждениюПоДокументу" Тогда
	    торо_КомментарийКУтверждениюПоДокументу = Параметр;
	ИначеЕсли ИмяСобытия = "СохранениеЗаменыНоменклатурыНаАналогиЗаказовНаВП" И Источник = Объект.Ссылка Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураТекущейСтроки = Новый Структура("Номенклатура, Характеристика, ЕстьАналоги, КодСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураТекущейСтроки, ТекущиеДанные);
		ОбработатьЗаменуНоменклатурыНаАналоги(Параметр, СтруктураТекущейСтроки);
	КонецЕсли;
	// <--ТОИР
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	торо_ЗаполнениеДокументовКлиент.ЗаполнитьСклад(Объект.Подразделение, Объект.Склад);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");		
	КонецПроцедуры
	
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

#Область УтверждениеЗаказовНаВП

&НаКлиенте
Процедура торо_СтатусУтвержденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	ЗаполнитьСписокВыбораСтатусовУтвержденияДокумента(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_СтатусУтвержденияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	ЗаполнитьСписокВыбораСтатусовУтвержденияДокумента(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_СтатусУтвержденияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора.Очистить();
	ЗаполнитьСписокВыбораСтатусовУтвержденияДокумента(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_СтатусУтвержденияПриИзменении(Элемент)
	
	УстановитьУсловноеОформлениеПоСтатусуУтверждения();
	ОбработатьИзменениеВСтрокеТЧСтатусаУтверждения();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);

	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
								ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СерииИспользуются = ПолучитьСерииИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.Серия = Неопределено;
	
	ОтметитьНаличиеАналогов(ТекущаяСтрока.КодСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	масПараметр = ПолучитьМассивТиповНоменклаутры();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(масПараметр)); 
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОтметитьНаличиеАналогов(ТекущаяСтрока.КодСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные =  Элементы.Товары.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидНоменклатуры", ВидНоменклатуры));
		ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.Товары.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Товары.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.Товары.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.Товары.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Товары.ТекущиеДанные.Номенклатура, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ТОИР-->
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление Тогда
	    ТекущиеДанные.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении");
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Объект.МаксимальныйКодСтроки = Объект.МаксимальныйКодСтроки + 1;
		ТекущиеДанные.КодСтроки = Объект.МаксимальныйКодСтроки;
		
		ТекущиеДанные.ЕстьАналоги = 2;
	КонецЕсли;
	// <--ТОИР
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	// ТОИР-->
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Отменено Тогда
	    ТекущиеДанные.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено");
	Иначе
		ТекущиеДанные.торо_СтатусУтверждения = Неопределено;
	КонецЕсли;
	// <--ТОИР
	
КонецПроцедуры

&НаКлиенте
Процедура Товарыторо_СтатусУтвержденияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Отменено = (ТекущиеДанные.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено"));
	ОбработатьВСтрокахТЧИзменениеСтатусаУтвержденияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Товарыторо_СтатусУтвержденияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	ЗаполнитьСписокВыбораСтатусовУтвержденияСтрокДокумента(ДанныеВыбора, ТекущиеДанные.торо_СтатусУтверждения);
	
КонецПроцедуры

&НаКлиенте
Процедура Товарыторо_СтатусУтвержденияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	ЗаполнитьСписокВыбораСтатусовУтвержденияСтрокДокумента(ДанныеВыбора, ТекущиеДанные.торо_СтатусУтверждения);
	
КонецПроцедуры

&НаКлиенте
Процедура Товарыторо_СтатусУтвержденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	ЗаполнитьСписокВыбораСтатусовУтвержденияСтрокДокумента(ДанныеВыбора, ТекущиеДанные.торо_СтатусУтверждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	// ТОИР-->
	Отказ = Не ДоступностьРедактированияСтрокиТоваров();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоля = Элемент.ТекущийЭлемент.Имя;
	
	Если ИмяПоля = "ТоварыЕстьАналоги" Тогда
		Отказ = Истина;
		ПодобратьАналогиНаКлиенте();
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЕстьАналоги = 2 Или ИмяПоля = "Товарыторо_СтатусУтверждения" Или ИмяПоля = "ТоварыОтменено"Тогда
		Возврат;
	КонецЕсли;
	
	//Если ТекущиеДанные.ЕстьАналоги = 0 И Не ИмяПоля = "Товарыторо_СтатусУтверждения" И Не ИмяПоля = "ТоварыОтменено" Тогда
	Если ТекущиеДанные.ЕстьАналоги = 0 Тогда
		Отказ = Истина;
		ПодобратьАналогиНаКлиенте();
	ИначеЕсли ТекущиеДанные.ЕстьАналоги = 1 Тогда
		СтруктураПоиска = Новый Структура("КодСтрокиНоменклатуры", ТекущиеДанные.КодСтроки);
		НайденныеСтроки = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Отказ = Истина;
			ПодобратьАналогиНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	// <--ТОИР
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	// ТОИР-->
	Отказ = Не ДоступностьРедактированияСтрокиТоваров();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЕстьАналоги = 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЕстьАналоги = 0 Тогда
		Отказ = Истина;
		ПодобратьАналогиНаКлиенте();
	ИначеЕсли ТекущиеДанные.ЕстьАналоги = 1 Тогда
		СтруктураПоиска = Новый Структура("КодСтрокиНоменклатуры", ТекущиеДанные.КодСтроки);
		НайденныеСтроки = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Отказ = Истина;
			ПодобратьАналогиНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	// <--ТОИР
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Склад",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.Склад);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ВидимостьСерий",				 			 Истина);

	масПараметр = ПолучитьМассивТиповНоменклаутры();
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",	масПараметр);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#Область УтверждениеЗаказовНаВП

&НаКлиенте
Процедура ОткрытьКомментарииКУтверждению(Команда)
	
	ПараметрыФормы = Новый Структура("ЗаказНаВП, КомментарийКУтверждениюПоДокументу, ИзДокумента", Объект.Ссылка, торо_КомментарийКУтверждениюПоДокументу, Истина);
	ОткрытьФорму("РегистрСведений.торо_КомментарииКУтверждениюЗаказовНаВП.Форма.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция ПолучитьМассивТиповНоменклаутры()
	масПараметр = Новый Массив();
	Для каждого текСтрока из Перечисления.ТипыНоменклатуры Цикл
		Если текСтрока = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ текСтрока = Перечисления.ТипыНоменклатуры.Работа Тогда Продолжить; КонецЕсли;
		масПараметр.Добавить(текСтрока);
	КонецЦикла;
	
	Возврат масПараметр;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

#Область ОтметкаНезаполненнойДатыОтгрузкиЗаказа

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОтгрузки.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаОтгрузки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВсеСтрокиОтменены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

#КонецОбласти


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОтгрузки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВсеСтрокиОтменены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Оформление поля Серия	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
КонецПроцедуры

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул, ЗаполнитьПризнакСерииИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул"),
			Новый Структура("Номенклатура", "СерииИспользуются")));
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	Для каждого текСтрока из Тз Цикл
		
		НайС = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", 
			текСтрока.Номенклатура, текСтрока.Характеристика, текСтрока.Серия));
		Если НайС.Количество() = 0 Тогда
			нс = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			
			// ТОИР-->
			Если торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление Тогда
			    нс.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
			КонецЕсли;
			// <--ТОИР
		Иначе
			нс = НайС[0];
			нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(нс, СтруктураДействий, Неопределено);		
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ВсеСтрокиОтменены()
	
	Возврат ОбщегоНазначенияУТ.ВсеСтрокиОтменены(Объект, "Товары", "Отменено");
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьСерииИспользуются(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СделатьЗаписиВРСИнтеграцияДокументов(СписокID, Заказ)
	ИДБезОснований = Новый СписокЗначений;
	Для каждого Ремонт Из СписокID Цикл
		Если ТипЗнч(Ремонт.Значение) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
			ИЛИ ТипЗнч(Ремонт.Значение) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда 
			ИДБезОснований.Добавить(Ремонт.Представление);
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID = Ремонт.Представление;
		Запись.ДокументЕРП = Заказ;
		Запись.ДокументТОИР = Ремонт.Значение;
		Запись.Записать();	
	КонецЦикла;
	
	Если ИДБезОснований.Количество() Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Ссылка,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДокументИсточник КАК ДокументИсточник
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID В(&ИДБезОснований)";
		Запрос.УстановитьПараметр("ИДБезОснований", ИДБезОснований);
		РезЗапроса = Запрос.Выполнить();
		Если Не РезЗапроса.Пустой() Тогда
			Выборка = РезЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл 
				Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
				Запись.ID = Выборка.ID;
				Запись.ДокументЕРП = Заказ;
				Запись.ДокументТОИР = Выборка.Ссылка;
				Запись.Записать();	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.ТоварыПодобратьТовары.Доступность = ЗначениеЗаполнено(Объект.Склад);
	
КонецПроцедуры

// ТОИР-->

&НаСервере
Процедура ОбновитьДобавленныеКолонкиТаблиц()
	
	Если торо_ФОИспользоватьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли; 	
	
КонецПроцедуры

#Область ЗаменаНаАналоги

&НаСервере
Процедура ОтметитьНаличиеАналогов(КодСтроки = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	&Ссылка КАК ЗаказНаВП,
	|	&ДатаДействия КАК ДатаДействия,
	|	ТаблицаНоменклатуры.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаЗаказовНаВП
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаВП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗамененныхМатериалов.КодСтрокиАналога КАК КодСтрокиАналога
	|ПОМЕСТИТЬ ВТ_ТаблицаЗамененныхМатериалов
	|ИЗ
	|	&ТаблицаЗамененныхМатериалов КАК ТаблицаЗамененныхМатериалов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтрокиАналога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗаказовНаВП.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаЗаказовНаВП.Характеристика КАК Характеристика,
	|	ВТ_ТаблицаЗаказовНаВП.ЗаказНаВП КАК ЗаказНаВП,
	|	ВТ_ТаблицаЗаказовНаВП.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта ССЫЛКА Справочник.торо_ОбъектыРемонта
	|			ТОГДА торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта.Направление
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|	КОНЕЦ КАК Направление,
	|	ВЫБОР
	|		КОГДА торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта ССЫЛКА Справочник.торо_ОбъектыРемонта
	|			ТОГДА торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	ВТ_ТаблицаЗаказовНаВП.ДатаДействия КАК ДатаДействия,
	|	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ОбщиеДанныеПоРемонтам.ВидРемонта КАК ВидРемонта
	|ПОМЕСТИТЬ ВТ_ЗаказыПоРемонтам
	|ИЗ
	|	ВТ_ТаблицаЗаказовНаВП КАК ВТ_ТаблицаЗаказовНаВП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|			ПО торо_ИнтеграцияДокументов.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	|		ПО (ВТ_ТаблицаЗаказовНаВП.ЗаказНаВП = (ВЫРАЗИТЬ(торо_ИнтеграцияДокументов.ДокументЕРП КАК Документ.ЗаказНаВнутреннееПотребление)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказыПоРемонтам.IDРемонта КАК IDРемонта,
	|	торо_ПлановыеИсполнителиРемонтов.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_ИсполнителиПоРемонтам
	|ИЗ
	|	ВТ_ЗаказыПоРемонтам КАК ВТ_ЗаказыПоРемонтам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеИсполнителиРемонтов КАК торо_ПлановыеИсполнителиРемонтов
	|		ПО ВТ_ЗаказыПоРемонтам.IDРемонта = торо_ПлановыеИсполнителиРемонтов.IDРемонта
	|ГДЕ
	|	торо_ПлановыеИсполнителиРемонтов.Исполнитель ССЫЛКА Справочник.СтруктураПредприятия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗаказовНаВП.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаЗаказовНаВП.Характеристика КАК Характеристика,
	|	ВТ_ТаблицаЗаказовНаВП.ЗаказНаВП КАК ЗаказНаВП,
	|	ВТ_ТаблицаЗаказовНаВП.КодСтроки КАК КодСтроки,
	|	ВТ_ТаблицаЗаказовНаВП.ДатаДействия КАК ДатаДействия,
	|	"""" КАК IDРемонта,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРемонта,
	|	НЕОПРЕДЕЛЕНО КАК ВидРемонта,
	|	НЕОПРЕДЕЛЕНО КАК Направление,
	|	НЕОПРЕДЕЛЕНО КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗаказыНаВП
	|ИЗ
	|	ВТ_ТаблицаЗаказовНаВП КАК ВТ_ТаблицаЗаказовНаВП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказыПоРемонтам КАК ВТ_ЗаказыПоРемонтам
	|		ПО ВТ_ТаблицаЗаказовНаВП.ЗаказНаВП = ВТ_ЗаказыПоРемонтам.ЗаказНаВП
	|ГДЕ
	|	ВТ_ЗаказыПоРемонтам.ЗаказНаВП ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаказыПоРемонтам.Номенклатура,
	|	ВТ_ЗаказыПоРемонтам.Характеристика,
	|	ВТ_ЗаказыПоРемонтам.ЗаказНаВП,
	|	ВТ_ЗаказыПоРемонтам.КодСтроки,
	|	ВТ_ЗаказыПоРемонтам.ДатаДействия,
	|	ВТ_ЗаказыПоРемонтам.IDРемонта,
	|	ВТ_ЗаказыПоРемонтам.ОбъектРемонта,
	|	ВТ_ЗаказыПоРемонтам.ВидРемонта,
	|	ВТ_ЗаказыПоРемонтам.Направление,
	|	ВТ_ЗаказыПоРемонтам.Организация
	|ИЗ
	|	ВТ_ЗаказыПоРемонтам КАК ВТ_ЗаказыПоРемонтам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказыНаВП.Номенклатура КАК Номенклатура,
	|	ВТ_ЗаказыНаВП.Характеристика КАК Характеристика,
	|	ВТ_ЗаказыНаВП.КодСтроки КАК КодСтроки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ВТ_ТаблицаЗамененныхМатериалов.КодСтрокиАналога ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА торо_АналогиНоменклатурыДляРемонтов.Регистратор ЕСТЬ NULL
	|				ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьАналоги
	|ИЗ
	|	ВТ_ЗаказыНаВП КАК ВТ_ЗаказыНаВП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаЗамененныхМатериалов КАК ВТ_ТаблицаЗамененныхМатериалов
	|		ПО ВТ_ЗаказыНаВП.КодСтроки = ВТ_ТаблицаЗамененныхМатериалов.КодСтрокиАналога
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АналогиНоменклатурыДляРемонтов КАК торо_АналогиНоменклатурыДляРемонтов
	|		ПО (торо_АналогиНоменклатурыДляРемонтов.Материал = ВТ_ЗаказыНаВП.Номенклатура)
	|			И (торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала = ВТ_ЗаказыНаВП.Характеристика)
	|			И (торо_АналогиНоменклатурыДляРемонтов.Период <= ВТ_ЗаказыНаВП.ДатаДействия)
	|			И (ВЫБОР
	|				КОГДА торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_ЗаказыНаВП.ДатаДействия <= торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения
	|			КОНЕЦ)
	|			И (торо_АналогиНоменклатурыДляРемонтов.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ОбъектРемонта = НЕОПРЕДЕЛЕНО
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ОбъектРемонта = ВТ_ЗаказыНаВП.ОбъектРемонта)
	|			И (торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ВТ_ЗаказыНаВП.Направление)
	|			И (торо_АналогиНоменклатурыДляРемонтов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.Организация = ВТ_ЗаказыНаВП.Организация)
	|			И (торо_АналогиНоменклатурыДляРемонтов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ИЛИ (ВТ_ЗаказыНаВП.IDРемонта, торо_АналогиНоменклатурыДляРемонтов.Подразделение) В
	|					(ВЫБРАТЬ
	|						ВТ_ИсполнителиПоРемонтам.IDРемонта,
	|						ВТ_ИсполнителиПоРемонтам.Исполнитель
	|					ИЗ
	|						ВТ_ИсполнителиПоРемонтам КАК ВТ_ИсполнителиПоРемонтам))
	|			И (торо_АналогиНоменклатурыДляРемонтов.ВидРемонта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ВидРемонта = ВТ_ЗаказыНаВП.ВидРемонта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗаказыНаВП.Номенклатура,
	|	ВТ_ЗаказыНаВП.Характеристика,
	|	ВТ_ЗаказыНаВП.КодСтроки";
	
	Если ТипЗнч(КодСтроки) = Тип("Число") Тогда
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", Объект.Товары.Выгрузить(Новый Структура("КодСтроки", КодСтроки)));
		Запрос.УстановитьПараметр("ТаблицаЗамененныхМатериалов", Объект.торо_ЗамененныеАналогамиМатериалы.Выгрузить(Новый Структура("КодСтрокиАналога", КодСтроки)));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("ТаблицаЗамененныхМатериалов", Объект.торо_ЗамененныеАналогамиМатериалы.Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДействия", Объект.ДатаОтгрузки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураПоиска = Новый Структура("КодСтроки");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НайденныеСтроки[0].ЕстьАналоги = Выборка.ЕстьАналоги;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналогиНаКлиенте()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЕстьАналоги = 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура("Количество, ЕдиницаИзмерения, Склад, Ответственный, Подразделение, Заказ", ТекущиеДанные.КоличествоУпаковок, ТекущиеДанные.Упаковка, Объект.Склад, Объект.Ответственный, Объект.Подразделение, Объект.Ссылка);
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтруктураСтроки);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДатаДействия", Объект.ДатаОтгрузки);
	ПараметрыФормы.Вставить("ИзДокумента", Истина);
	ПараметрыФормы.Вставить("ЗаказНаВП", Объект.Ссылка);
	
	ПолучитьДанныеДляОткрытияФормыЗаменыНаАналоги(ПараметрыФормы, ТекущиеДанные.КодСтроки);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаЗаменыНоменклатурыНаАналогиЗаказовНаВП", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеДляОткрытияФормыЗаменыНаАналоги(ПараметрыФормы, КодСтроки)
	
	ЗаказыДоЗамены = Новый ТаблицаЗначений();
	ЗаказыДоЗамены.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ЗаказыДоЗамены.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ЗаказыДоЗамены.Колонки.Добавить("ДоступноКЗамене", Новый ОписаниеТипов("Число"));
	ЗаказыДоЗамены.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ЗаказыДоЗамены.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ЗаказыДоЗамены.Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ЗаказыДоЗамены.Колонки.Добавить("ЗаказНаВП", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление"));
	ЗаказыДоЗамены.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
	// Для начального заполнения
	ЗаказыДоЗамены.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ЗаказыДоЗамены.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	РезультатЗамены = Новый ТаблицаЗначений();
	РезультатЗамены.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	РезультатЗамены.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	РезультатЗамены.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезультатЗамены.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	РезультатЗамены.Колонки.Добавить("НоменклатураИсходная", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезультатЗамены.Колонки.Добавить("ХарактеристикаНоменклатурыИсходная", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	РезультатЗамены.Колонки.Добавить("ЗаказНаВП", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление"));
	РезультатЗамены.Колонки.Добавить("КодСтрокиАналога", Новый ОписаниеТипов("Число"));
	РезультатЗамены.Колонки.Добавить("КодСтрокиНоменклатуры", Новый ОписаниеТипов("Число"));
	РезультатЗамены.Колонки.Добавить("ЗамененноеКоличество", Новый ОписаниеТипов("Число"));
	РезультатЗамены.Колонки.Добавить("Исходная", Новый ОписаниеТипов("Булево"));
	РезультатЗамены.Колонки.Добавить("Удален", Новый ОписаниеТипов("Булево"));
	
	КодСтрокиИсходнойНоменклатуры = КодСтроки;
	
	СтруктураПоискаСредиАналогов = Новый Структура("КодСтрокиАналога", КодСтроки);
	НайденныеСтрокиСредиАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаСредиАналогов);
	
	// Строка-аналог
	Если НайденныеСтрокиСредиАналогов.Количество() > 0 Тогда
		КодСтрокиИсходнойНоменклатуры = НайденныеСтрокиСредиАналогов[0].КодСтрокиНоменклатуры;
		
		НоваяСтрокаТЧ_ЗаказыДоЗамены = ЗаказыДоЗамены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ_ЗаказыДоЗамены, Объект);
		НоваяСтрокаТЧ_ЗаказыДоЗамены.ЗаказНаВП = Объект.Ссылка;
		НоваяСтрокаТЧ_ЗаказыДоЗамены.Номенклатура = НайденныеСтрокиСредиАналогов[0].Номенклатура;
		НоваяСтрокаТЧ_ЗаказыДоЗамены.ХарактеристикаНоменклатуры = НайденныеСтрокиСредиАналогов[0].ХарактеристикаНоменклатуры;
		
		Если ЗначениеЗаполнено(НайденныеСтрокиСредиАналогов[0].Упаковка) Тогда
			НоваяСтрокаТЧ_ЗаказыДоЗамены.ЕдиницаИзмерения = НайденныеСтрокиСредиАналогов[0].Упаковка;
		Иначе
			НоваяСтрокаТЧ_ЗаказыДоЗамены.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныеСтрокиСредиАналогов[0].Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
		НоваяСтрокаТЧ_ЗаказыДоЗамены.КодСтроки = КодСтрокиИсходнойНоменклатуры;
		
		НоваяСтрокаТЧ_РезультатЗамены = РезультатЗамены.Добавить();
		НоваяСтрокаТЧ_РезультатЗамены.Номенклатура = НайденныеСтрокиСредиАналогов[0].Номенклатура;
		НоваяСтрокаТЧ_РезультатЗамены.ХарактеристикаНоменклатуры = НайденныеСтрокиСредиАналогов[0].ХарактеристикаНоменклатуры;
		НоваяСтрокаТЧ_РезультатЗамены.ЗаказНаВП = Объект.Ссылка;
		//НоваяСтрокаТЧ_РезультатЗамены.Количество = НайденныеСтрокиСредиАналогов[0].КоличествоУпаковок;
		НоваяСтрокаТЧ_РезультатЗамены.ЗамененноеКоличество = НайденныеСтрокиСредиАналогов[0].КоличествоУпаковок;
		НоваяСтрокаТЧ_РезультатЗамены.ЕдиницаИзмерения = НайденныеСтрокиСредиАналогов[0].Упаковка;
		
		Если ЗначениеЗаполнено(НайденныеСтрокиСредиАналогов[0].Упаковка) Тогда
			НоваяСтрокаТЧ_ЗаказыДоЗамены.ЕдиницаИзмерения = НайденныеСтрокиСредиАналогов[0].Упаковка;
		Иначе
			НоваяСтрокаТЧ_ЗаказыДоЗамены.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныеСтрокиСредиАналогов[0].Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
		НоваяСтрокаТЧ_РезультатЗамены.Исходная = Истина;
		НоваяСтрокаТЧ_РезультатЗамены.КодСтрокиНоменклатуры = КодСтрокиИсходнойНоменклатуры;
		
		Если ЗначениеЗаполнено(КодСтрокиИсходнойНоменклатуры) Тогда
			СтруктураПоискаЗамененныхМатериалов = Новый Структура("КодСтрокиНоменклатуры", КодСтрокиИсходнойНоменклатуры);
			НайденныеСтрокиЗамененныхМатериалов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхМатериалов);
			
			СтруктураПоискаТовары = Новый Структура("КодСтроки", КодСтрокиИсходнойНоменклатуры);
			НайденныеСтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураПоискаТовары);
		
			Если НайденныеСтрокиТоваров.Количество() > 0 Тогда
				НоваяСтрокаТЧ_ЗаказыДоЗамены.Количество = НайденныеСтрокиТоваров[0].КоличествоУпаковок;
				НоваяСтрокаТЧ_ЗаказыДоЗамены.ДоступноКЗамене = НайденныеСтрокиТоваров[0].КоличествоУпаковок;
				НоваяСтрокаТЧ_РезультатЗамены.Количество = НайденныеСтрокиТоваров[0].КоличествоУпаковок;
			Иначе
				НоваяСтрокаТЧ_ЗаказыДоЗамены.Количество = 0;
				НоваяСтрокаТЧ_ЗаказыДоЗамены.ДоступноКЗамене = 0;
			КонецЕсли;
		Иначе
			СтруктураПоискаЗамененныхМатериалов = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Упаковка", НайденныеСтрокиСредиАналогов[0].Номенклатура, НайденныеСтрокиСредиАналогов[0].ХарактеристикаНоменклатуры, НайденныеСтрокиСредиАналогов[0].Упаковка);
			НайденныеСтрокиЗамененныхМатериалов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхМатериалов);
			
			НоваяСтрокаТЧ_РезультатЗамены.Удален = Истина;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Номенклатура", НайденныеСтрокиСредиАналогов[0].Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", НайденныеСтрокиСредиАналогов[0].ХарактеристикаНоменклатуры);
	Иначе
		СтруктураПоискаТовары = Новый Структура("КодСтроки", КодСтрокиИсходнойНоменклатуры);
		НайденныеСтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураПоискаТовары);
		
		НоваяСтрокаТЧ_ЗаказыДоЗамены = ЗаказыДоЗамены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ_ЗаказыДоЗамены, Объект);
		НоваяСтрокаТЧ_ЗаказыДоЗамены.ЗаказНаВП = Объект.Ссылка;
		НоваяСтрокаТЧ_ЗаказыДоЗамены.Количество = НайденныеСтрокиТоваров[0].КоличествоУпаковок;
		НоваяСтрокаТЧ_ЗаказыДоЗамены.Номенклатура = НайденныеСтрокиТоваров[0].Номенклатура;
		НоваяСтрокаТЧ_ЗаказыДоЗамены.ХарактеристикаНоменклатуры = НайденныеСтрокиТоваров[0].Характеристика;
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТоваров[0].Упаковка) Тогда
			НоваяСтрокаТЧ_ЗаказыДоЗамены.ЕдиницаИзмерения = НайденныеСтрокиТоваров[0].Упаковка;
		Иначе
			НоваяСтрокаТЧ_ЗаказыДоЗамены.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныеСтрокиТоваров[0].Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
		НоваяСтрокаТЧ_ЗаказыДоЗамены.ДоступноКЗамене = НайденныеСтрокиТоваров[0].КоличествоУпаковок;
		НоваяСтрокаТЧ_ЗаказыДоЗамены.КодСтроки = КодСтрокиИсходнойНоменклатуры;
		
		НоваяСтрокаТЧ_РезультатЗамены = РезультатЗамены.Добавить();
		НоваяСтрокаТЧ_РезультатЗамены.Номенклатура = НайденныеСтрокиТоваров[0].Номенклатура;
		НоваяСтрокаТЧ_РезультатЗамены.ХарактеристикаНоменклатуры = НайденныеСтрокиТоваров[0].Характеристика;
		НоваяСтрокаТЧ_РезультатЗамены.ЗаказНаВП = Объект.Ссылка;
		НоваяСтрокаТЧ_РезультатЗамены.Количество = НайденныеСтрокиТоваров[0].КоличествоУпаковок;
		НоваяСтрокаТЧ_РезультатЗамены.ЕдиницаИзмерения = НайденныеСтрокиТоваров[0].Упаковка;
		
		Если ЗначениеЗаполнено(НайденныеСтрокиТоваров[0].Упаковка) Тогда
			НоваяСтрокаТЧ_РезультатЗамены.ЕдиницаИзмерения = НайденныеСтрокиТоваров[0].Упаковка;
		Иначе
			НоваяСтрокаТЧ_РезультатЗамены.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныеСтрокиТоваров[0].Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
		НоваяСтрокаТЧ_РезультатЗамены.Исходная = Истина;
		НоваяСтрокаТЧ_РезультатЗамены.КодСтрокиНоменклатуры = КодСтрокиИсходнойНоменклатуры;
			
		СтруктураПоискаЗамененныхМатериалов = Новый Структура("КодСтрокиНоменклатуры", КодСтрокиИсходнойНоменклатуры);
		НайденныеСтрокиЗамененныхМатериалов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхМатериалов);
		
		ПараметрыФормы.Вставить("Номенклатура", НайденныеСтрокиТоваров[0].Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", НайденныеСтрокиТоваров[0].Характеристика);
	КонецЕсли;
	
	Для каждого НайденнаяСтрокаЗамененногоМатериала Из НайденныеСтрокиЗамененныхМатериалов Цикл
		СтруктураПоискаАналогов = Новый Структура("КодСтроки", НайденнаяСтрокаЗамененногоМатериала.КодСтрокиАналога);
		НайденныеСтрокиАналогов = Объект.Товары.НайтиСтроки(СтруктураПоискаАналогов);
		
		НоваяСтрокаТЧ = РезультатЗамены.Добавить();
		НоваяСтрокаТЧ.Номенклатура = НайденныеСтрокиАналогов[0].Номенклатура;
		НоваяСтрокаТЧ.ХарактеристикаНоменклатуры = НайденныеСтрокиАналогов[0].Характеристика;
		НоваяСтрокаТЧ.ЗаказНаВП = Объект.Ссылка;
		НоваяСтрокаТЧ.Количество = НайденныеСтрокиАналогов[0].КоличествоУпаковок;
		
		Если ЗначениеЗаполнено(НайденныеСтрокиАналогов[0].Упаковка) Тогда
			НоваяСтрокаТЧ.ЕдиницаИзмерения = НайденныеСтрокиАналогов[0].Упаковка;
		Иначе
			НоваяСтрокаТЧ.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныеСтрокиАналогов[0].Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
		НоваяСтрокаТЧ.КодСтрокиАналога = НайденнаяСтрокаЗамененногоМатериала.КодСтрокиАналога;
		НоваяСтрокаТЧ.КодСтрокиНоменклатуры = КодСтрокиИсходнойНоменклатуры;
		НоваяСтрокаТЧ.ЗамененноеКоличество = НайденнаяСтрокаЗамененногоМатериала.КоличествоУпаковок;
		
		НоваяСтрокаТЧ_ЗаказыДоЗамены.Количество = НоваяСтрокаТЧ_ЗаказыДоЗамены.Количество + НайденнаяСтрокаЗамененногоМатериала.КоличествоУпаковок;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("АдресВХ_ЗаказыДоЗамены", ПоместитьВоВременноеХранилище(ЗаказыДоЗамены));
	ПараметрыФормы.Вставить("АдресВХ_РезультатЗамены", ПоместитьВоВременноеХранилище(РезультатЗамены));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаменуНоменклатурыНаАналоги(СтруктураПараметров, СтруктураТекущейСтроки)
	
	// 1. найти исходную строку строку в ТЧ товаров. Если ее нет, а замену отменили (количество > 0), то создать строку. 
	//    Если количество после замены = 0, то удалить, иначе присвоить количество
	// 2. Найти строку-аналог. Если ее нет, а она не удалена - создать новую и записать туда количество. Если она есть, но удалена
	//    с формы - удалить в ТЧ Товаров. Если она есть и не удалена - заполнить количество
	// 3. Найти строку в ТЧ замененных материалов по КодСтрокиНоменклатуры+КодСтрокиАналога. Если есть и исходная строка не нулевая
	//    то поменять количество замененное
	// 4. Если ее нет (уже ранее полностью заменили) найти строку в ТЧ замененных материалов по КодСтрокиАналога. Если есть и исходная строка не нулевая
	//    то поменять количество замененное
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресВХ_ТаблицаДанных);
	
	КодСтрокиНоменклатуры = 0;
	
	Если СтруктураТекущейСтроки.ЕстьАналоги = 1 Тогда
		Номенклатура = СтруктураТекущейСтроки.Номенклатура;
		Характеристика = СтруктураТекущейСтроки.Характеристика;
	Иначе
		СтруктураПоискаИсходнойНоменклатурыПоАналогу = Новый Структура("КодСтрокиАналога", СтруктураТекущейСтроки.КодСтроки);
		НайденныеСтрокиИсходнойНоменклатурыПоАналогу = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаИсходнойНоменклатурыПоАналогу);
		
		Номенклатура = НайденныеСтрокиИсходнойНоменклатурыПоАналогу[0].Номенклатура;
		Характеристика = НайденныеСтрокиИсходнойНоменклатурыПоАналогу[0].ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если СтрокаТЗ.Исходная Тогда
			СтруктураПоискаИсходногоТовара = Новый Структура("КодСтроки", СтрокаТЗ.КодСтрокиНоменклатуры);
			НайденныеСтрокиИсходногоТовара = Объект.Товары.НайтиСтроки(СтруктураПоискаИсходногоТовара);
			
			Если НайденныеСтрокиИсходногоТовара.Количество() = 0 И СтрокаТЗ.Количество > 0 Тогда
				КодСтрокиНоменклатуры = Объект.МаксимальныйКодСтроки + 1;
				
				НоваяСтрокаТЗ = Объект.Товары.Добавить();
				НоваяСтрокаТЗ.КодСтроки = КодСтрокиНоменклатуры;
				НоваяСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
				НоваяСтрокаТЗ.Характеристика = СтрокаТЗ.ХарактеристикаНоменклатуры;
				НоваяСтрокаТЗ.КоличествоУпаковок = СтрокаТЗ.Количество;
				НоваяСтрокаТЗ.Упаковка = СтрокаТЗ.ЕдиницаИзмерения;
				НоваяСтрокаТЗ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
				НоваяСтрокаТЗ.ЕстьАналоги = 1;
				
				Объект.МаксимальныйКодСтроки = КодСтрокиНоменклатуры;
				
				СтруктураПоискаЗамененныхАналогов = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Упаковка", НоваяСтрокаТЗ.Номенклатура, НоваяСтрокаТЗ.Характеристика, НоваяСтрокаТЗ.Упаковка);
				НайденныеСтрокиЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				
				Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
					СтрокаТЧ.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
				КонецЦикла;
				
				СтруктураДействий = Новый Структура();
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрокаТЗ.Характеристика);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрокаТЗ.Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТЗ, СтруктураДействий, Неопределено);
			ИначеЕсли НайденныеСтрокиИсходногоТовара.Количество() > 0 И СтрокаТЗ.Количество > 0 Тогда
				НайденныеСтрокиИсходногоТовара[0].КоличествоУпаковок = СтрокаТЗ.Количество;
				КодСтрокиНоменклатуры = НайденныеСтрокиИсходногоТовара[0].КодСтроки;
				
				СтруктураДействий = Новый Структура();
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НайденныеСтрокиИсходногоТовара[0].Характеристика);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НайденныеСтрокиИсходногоТовара[0].Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденныеСтрокиИсходногоТовара[0], СтруктураДействий, Неопределено);
			ИначеЕсли НайденныеСтрокиИсходногоТовара.Количество() > 0 И СтрокаТЗ.Количество = 0 Тогда
				Объект.Товары.Удалить(НайденныеСтрокиИсходногоТовара[0]);
				
				СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиНоменклатуры", СтрокаТЗ.КодСтрокиНоменклатуры);
				НайденныеСтрокиЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				
				Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
					СтрокаТЧ.КодСтрокиНоменклатуры = 0;
				КонецЦикла;
				
				КодСтрокиНоменклатуры = 0;
			КонецЕсли;
		Иначе
			СтруктураПоискаАналога = Новый Структура("КодСтроки", СтрокаТЗ.КодСтрокиАналога);
			НайденныеСтрокиАналога = Объект.Товары.НайтиСтроки(СтруктураПоискаАналога);
			
			Если НайденныеСтрокиАналога.Количество() = 0 И Не СтрокаТЗ.Удален Тогда
				ТекущийКодСтроки = Объект.МаксимальныйКодСтроки + 1;
				
				НоваяСтрокаТЗ = Объект.Товары.Добавить();
				НоваяСтрокаТЗ.КодСтроки = ТекущийКодСтроки;
				НоваяСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
				НоваяСтрокаТЗ.Характеристика = СтрокаТЗ.ХарактеристикаНоменклатуры;
				НоваяСтрокаТЗ.КоличествоУпаковок = СтрокаТЗ.Количество;
				НоваяСтрокаТЗ.Упаковка = СтрокаТЗ.ЕдиницаИзмерения;
				НоваяСтрокаТЗ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
				НоваяСтрокаТЗ.ЕстьАналоги = 0;
				
				НоваяСтрокаЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.Добавить();
				НоваяСтрокаЗамененныхАналогов.КодСтрокиАналога = ТекущийКодСтроки;
				НоваяСтрокаЗамененныхАналогов.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
				НоваяСтрокаЗамененныхАналогов.ХарактеристикаНоменклатуры = Характеристика;
				НоваяСтрокаЗамененныхАналогов.Номенклатура = Номенклатура;
				НоваяСтрокаЗамененныхАналогов.КоличествоУпаковок = СтрокаТЗ.ЗамененноеКоличество;
				
				Объект.МаксимальныйКодСтроки = ТекущийКодСтроки;
				
				СтруктураДействий = Новый Структура();
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрокаТЗ.Характеристика);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрокаТЗ.Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТЗ, СтруктураДействий, Неопределено);
			ИначеЕсли НайденныеСтрокиАналога.Количество() > 0 И Не СтрокаТЗ.Удален Тогда
				НайденныеСтрокиАналога[0].Количество = СтрокаТЗ.Количество;
				
				СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиАналога, Номенклатура, ХарактеристикаНоменклатуры", СтрокаТЗ.КодСтрокиАналога, СтруктураТекущейСтроки.Номенклатура, СтруктураТекущейСтроки.Характеристика);
				НайденныеСтрокиЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				
				Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЗ.ЗамененноеКоличество;
					СтрокаТЧ.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
				КонецЦикла;
				
				СтруктураДействий = Новый Структура();
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НайденныеСтрокиАналога[0].Характеристика);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НайденныеСтрокиАналога[0].Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденныеСтрокиАналога[0], СтруктураДействий, Неопределено);
			ИначеЕсли НайденныеСтрокиАналога.Количество() > 0 И СтрокаТЗ.Удален Тогда
				Объект.Товары.Удалить(НайденныеСтрокиАналога[0]);
				
				СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиАналога", СтрокаТЗ.КодСтрокиАналога);
				НайденныеСтрокиЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				
				Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
					Объект.торо_ЗамененныеАналогамиМатериалы.Удалить(СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УтверждениеЗаказовНаВП

&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусовУтвержденияДокумента(ДанныеВыбора)

	ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении);
	
	Если торо_ДоступныПраваНаУтверждениеВП Тогда
	    ЕстьОтмененные = Ложь;
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
		    Если СтрокаТЧ.Отменено Тогда
			    ЕстьОтмененные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОтмененные Тогда
		    ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
		Иначе
			ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично);
		КонецЕсли;
	КонецЕсли;
	
	НайденныйЭлемент = ДанныеВыбора.НайтиПоЗначению(Объект.торо_СтатусУтверждения);
	Если Не НайденныйЭлемент = Неопределено Тогда
	    ДанныеВыбора.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусовУтвержденияСтрокДокумента(ДанныеВыбора, ТекущийСтатус)

	Если торо_ДоступныПраваНаУтверждениеВП Тогда
	    ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении);
		ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден);
		ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
		ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания);
	Иначе
		Если ТекущийСтатус = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении Тогда
		    ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
		ИначеЕсли ТекущийСтатус = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено Тогда
		    ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении);
		ИначеЕсли ТекущийСтатус = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания Тогда
		    ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЗамечанияИсправлены);
			ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
		ИначеЕсли ТекущийСтатус = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЗамечанияИсправлены Тогда
		    ДанныеВыбора.Добавить(Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоСтатусуУтверждения()
	
	Если Не Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.Доступность = Ложь;
	Элементы.торо_IDРемонта.Доступность = Ложь;
	Элементы.торо_ОбъектРемонта.Доступность = Ложь;
	Элементы.торо_ВидРемонта.Доступность = Ложь;
	Элементы.торо_ТехКарта.Доступность = Ложь;
	Элементы.ДокументОснование.Доступность = Ложь;
	Элементы.Ответственный.Доступность = Ложь;
	Элементы.ДатаИНомер.Доступность = Ложь;
	Элементы.Организация.Доступность = Ложь;
	Элементы.Подразделение.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ОбязателенВводКомментария()
	
	Возврат РегистрыСведений.торо_КомментарииКУтверждениюЗаказовНаВП.ОбязателенВводКомментария(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура СохранитьКомментарийКУтверждению(КомментарийКУтверждению)
	
	РегистрыСведений.торо_КомментарииКУтверждениюЗаказовНаВП.СохранитьКомментарийКУтверждению(Объект.Ссылка, КомментарийКУтверждению);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_КомментарийЗавершениеВвода(ВведенныйТекст, ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для записи документа обязатален ввод комментария к утверждению!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;	
	
	СохранитьКомментарийКУтверждению(ВведенныйТекст);
	
	торо_ИсходныйСтатусУтверждения = Объект.торо_СтатусУтверждения;
	
	ЭтотОбъект.Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Функция ДоступностьРедактированияСтрокиТоваров()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден")
		Или Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ТекущиеДанные.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если торо_ДоступныПраваНаУтверждениеВП Тогда
	    Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВСтрокахТЧИзменениеСтатусаУтвержденияДокумента()
	
	ЕстьСтрокиНаУтверждении_ЗамечанияИсправлены = Ложь;
	ВсеСтрокиОтменены = Истина;
	ВсеСтрокиУтверждены = Истина;
	ВсеСтрокиОтмененыИУтверждены = Истина;
	ВсеСтрокиОтменены = Истина;
	ВсеСтрокиОтменен_Утвержден_ЕстьЗамечания = Истина;
	ЕстьСтрокиЕстьЗамечания = Ложь;
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
	    Если СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении") Тогда
		    ЕстьСтрокиНаУтверждении_ЗамечанияИсправлены = Истина;
			ВсеСтрокиОтменены = Ложь;
			ВсеСтрокиУтверждены = Ложь;
			ВсеСтрокиОтмененыИУтверждены = Ложь;
			ВсеСтрокиОтменен_Утвержден_ЕстьЗамечания = Ложь;
		ИначеЕсли СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден") Тогда
			ВсеСтрокиОтменены = Ложь;
		ИначеЕсли СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено") Тогда
			ВсеСтрокиУтверждены = Ложь;
		ИначеЕсли СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания") Тогда
			ВсеСтрокиОтменены = Ложь;
			ВсеСтрокиУтверждены = Ложь;
			ВсеСтрокиОтмененыИУтверждены = Ложь;
			ЕстьСтрокиЕстьЗамечания = Истина;
		ИначеЕсли СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЗамечанияИсправлены") Тогда
			ЕстьСтрокиНаУтверждении_ЗамечанияИсправлены = Истина;
			ВсеСтрокиОтменены = Ложь;
			ВсеСтрокиУтверждены = Ложь;
			ВсеСтрокиОтмененыИУтверждены = Ложь;
			ВсеСтрокиОтменен_Утвержден_ЕстьЗамечания = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСтрокиНаУтверждении_ЗамечанияИсправлены Тогда
	    Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении");
	ИначеЕсли ВсеСтрокиОтменены Тогда
	    Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Отклонен");
	ИначеЕсли ВсеСтрокиУтверждены Тогда
	    Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден");
	ИначеЕсли ВсеСтрокиОтмененыИУтверждены Тогда
	    Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично");
	ИначеЕсли ВсеСтрокиОтменен_Утвержден_ЕстьЗамечания И ЕстьСтрокиЕстьЗамечания Тогда
	    Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.ВозвращенНаДоработку");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВСтрокеТЧСтатусаУтверждения()
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
	    Если Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Отклонен") Тогда
		    СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено");
		ИначеЕсли (Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден")
					Или Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично"))
				И Не СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Отменено") Тогда
		    СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.Утвержден");
		ИначеЕсли Объект.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении")
			И СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЕстьЗамечания") Тогда
		    СтрокаТЧ.торо_СтатусУтверждения = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияСтрокЗаказовНаВП.ЗамечанияИсправлены");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
// <--ТОИР
#КонецОбласти