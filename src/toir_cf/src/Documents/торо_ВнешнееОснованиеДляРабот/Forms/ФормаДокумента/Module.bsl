
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) <> Тип("Соответствие") И ТипЗнч(Параметры.Основание) <> Тип("ДокументСсылка.торо_АнализКоренныхПричин") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("ID") Тогда
		Строки = Объект.ОбследованноеОборудование.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.ОбследованноеОборудование.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВнешнееОснованиеДляРабот;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование--

	ФОИспользоватьГарантии      = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ВнешнееОснованиеДляРабот);
	
	ОбновитьОстановочные();
	ОбновитьДоступностьДляРедактирования();
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);	
	
	// Мультиязычное хранение реквизитов
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	торо_МультиязычностьСервер.ПриСозданииНаСервереОбработкаТабличнойЧасти(ЭтаФорма, Объект.Ссылка, "ОбследованноеОборудование");
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.ОбследованноеОборудование.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// Мультиязычное хранение реквизитов
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "ОбследованноеОборудование");
	
	ИдентификаторСтрокиРемонта = Элементы.ОбследованноеОборудование.ТекущаяСтрока;
	Если ИдентификаторСтрокиРемонта <> Неопределено Тогда
		ТекущаяСтрокаРемонта = Объект.ОбследованноеОборудование.НайтиПоИдентификатору(ИдентификаторСтрокиРемонта);
		РемонтID = ?(ТекущаяСтрокаРемонта = Неопределено, Неопределено, ТекущаяСтрокаРемонта.ID);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, РемонтID); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПодключитьОбработчикОжидания("ПодборОРОбработчикОжидания",0.5,Истина);
	КонецЕсли;
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И ФОИспользоватьГарантии Тогда
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "ОбследованноеОборудование");
	КонецЕсли;
	
	// Мультиязычное хранение реквизитов
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);
	торо_МультиязычностьСервер.ПередЗаписьюНаСервереОбработкаТабличнойЧасти(ТекущийОбъект, "ОбследованноеОборудование");
	
	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Мультиязычное хранение реквизитов
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "ОбследованноеОборудование");
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ДеревоРемонтныхРаботОбработкаВыбора(, ВыбранноеЗначение, );	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
    МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбследованноеОборудование

&НаКлиенте
Процедура Подключаемый_ОткрытиеЛокализуемогоРеквзитаТЧ(Элемент, СтандартнаяОбработка)
	
	торо_МультиязычностьКлиент.ПриОткрытииРеквизитаТЧ(ЭтаФорма, Объект, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, Неопределено);
	    Элементы.ПоказатьМестоположение.Доступность = Ложь;	
	Иначе
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
		УстановитьДоступностьДляРедактированияПоТекРемонту(ТекущиеДанные.БлокироватьДляИзменения); 
		Элементы.ПоказатьМестоположение.Доступность = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОбъектРемонта, "ЭтоПротяженныйОбъект");
	КонецЕсли;
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПередУдалением(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураСвязанныхТЧ = Новый Структура("РемонтныеРаботы");
	
	СтруктураПоиска = Новый Структура("Предписание_ID", ТекДанные.ID);
	
	Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
		
		МассивНайденныхСтрок = Объект[КлючИЗначение.Ключ].НайтиСтроки(СтруктураПоиска);
	    Для Каждого ЭлементМассива Из МассивНайденныхСтрок Цикл
		
			Объект[КлючИЗначение.Ключ].Удалить(ЭлементМассива);
		
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		ТекДанные = Элемент.ТекущиеДанные;
		ТекДанные.БлокироватьДляИзменения = Ложь;
		ТекДанные.ID = Новый УникальныйИдентификатор();
		
		ЭлементыДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если НоваяСтрока И Не ОтменаРедактирования Тогда	
			ТекДанные.ID = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.ПлановаяДатаРемонта) И ТекДанные.ПлановаяДатаРемонта < НачалоДня(Объект.ДатаСоздания) Тогда
			ТекстСообщения = НСтр("ru = 'Срок не может быть меньше даты из поля ""Внешнее основание от""!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;	
		
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, НачалоДня(ТекДанные.ПлановаяДатаРемонта), ТекДанные.ПлановаяДатаРемонта);
			
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Элем Из ВыбранноеЗначение Цикл
			НовСтрокаОРР = Объект.ОбследованноеОборудование.Добавить();
			НовСтрокаОРР.ОбъектРемонта = Элем;
			НовСтрокаОРР.ID = Новый УникальныйИдентификатор();
			НовСтрокаОРР.Исполнитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элем, "ПодразделениеИсполнитель");
			Элементы.ОбследованноеОборудование.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Для каждого Элем Из ВыбранноеЗначение Цикл
			НовСтрокаОРР = Объект.ОбследованноеОборудование.Добавить();
			НовСтрокаОРР.ОбъектРемонта = Элем.Значение;
			НовСтрокаОРР.ID = Новый УникальныйИдентификатор();
			НовСтрокаОРР.Исполнитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элем, "ПодразделениеИсполнитель");
			Элементы.ОбследованноеОборудование.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("ОбъектРемонта") Тогда
			
			ИсполнительИзСтруктуры = Неопределено;
			ВыбранноеЗначение.Свойство("ПодразделениеИсполнитель", ИсполнительИзСтруктуры);
			
			Если ВыбранноеЗначение.Свойство("ИДРемонта")  Тогда
				
				СтруктураПоиска = Новый Структура("ID", ВыбранноеЗначение.ИДРемонта);
				НайденныеСтроки = Объект.ОбследованноеОборудование.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
				
					НовСтрокаОРР = Объект.ОбследованноеОборудование.Добавить();
					НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;
					НовСтрокаОРР.ID = ВыбранноеЗначение.ИДРемонта;
					НовСтрокаОРР.Исполнитель = ИсполнительИзСтруктуры;
					Если Не ЗначениеЗаполнено(ИсполнительИзСтруктуры) Тогда
						НовСтрокаОРР.Исполнитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение.ОбъектРемонта, "ПодразделениеИсполнитель");
					КонецЕсли;
					НовСтрокаОРР.ПлановаяДатаРемонта = ВыбранноеЗначение.СрокВыполнения;
					НовСтрокаОРР.Описание = ВыбранноеЗначение.Описание;
					НовСтрокаОРР.Ответственный = ВыбранноеЗначение.Ответственный;
					Элементы.ОбследованноеОборудование.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
					
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(ВыбранноеЗначение.ОбъектРемонта) = Тип("Массив") Тогда
				
				МассивОР = ВыбранноеЗначение.ОбъектРемонта;
				Для каждого ОбъектРемонта из МассивОР Цикл
					НовСтрокаОРР = Объект.ОбследованноеОборудование.Добавить();
					НовСтрокаОРР.ОбъектРемонта = ОбъектРемонта;
					НовСтрокаОРР.ID = Новый УникальныйИдентификатор();
					НовСтрокаОРР.Исполнитель = ИсполнительИзСтруктуры;
					Если Не ЗначениеЗаполнено(ИсполнительИзСтруктуры) Тогда
						НовСтрокаОРР.Исполнитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ОбъектРемонта, "ПодразделениеИсполнитель");
					КонецЕсли;
					Элементы.ОбследованноеОборудование.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
				КонецЦикла;
				
			Иначе
				
				НовСтрокаОРР = Объект.ОбследованноеОборудование.Добавить();
				НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;
				НовСтрокаОРР.ID = Новый УникальныйИдентификатор();
				НовСтрокаОРР.Исполнитель = ИсполнительИзСтруктуры;
				Если Не ЗначениеЗаполнено(ИсполнительИзСтруктуры) Тогда
					НовСтрокаОРР.Исполнитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение.ОбъектРемонта, "ПодразделениеИсполнитель");
				КонецЕсли;
				Элементы.ОбследованноеОборудование.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		НовСтрокаОРР = Объект.ОбследованноеОборудование.Добавить();
		НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение;
		НовСтрокаОРР.Исполнитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ПодразделениеИсполнитель");
		НовСтрокаОРР.ID = Новый УникальныйИдентификатор();
		Элементы.ОбследованноеОборудование.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
	КонецЕсли;
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеОбъектРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, Ожидание, СтандартнаяОбработка)
	ПараметрыВыбора.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеОбъектРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	ПараметрыВыбора.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "ОбследованноеОборудованиеВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.ФормаОбъекта", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокСтатусов", СписокДоступныхСтатусов);
		ПараметрыФормы.Вставить("РазрешитьВыборФМ", Ложь);

		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыФормы, Элемент, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеТиповойДефектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОбъектРемонта) Тогда
		Возврат;
	КонецЕсли;	
	
	Отборы = Новый Структура("Владелец", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОбъектРемонта, "Направление"));
	ПараметрыОткрытия = Новый Структура("Отбор", Отборы);
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеТиповойДефектСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОбъектРемонта) Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияЗаполнения = Новый Структура("Владелец", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОбъектРемонта, "Направление"));
	
	Если Не ЗначениеЗаполнено(ЗначенияЗаполнения.Владелец) Тогда
		ЗначенияЗаполнения.Владелец = ПредопределенноеЗначение("Справочник.торо_НаправленияОбъектовРемонтныхРабот.БезНаправления");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаОбъекта", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеТиповойДефектОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	текДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОбъектРемонта) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	НаправлениеОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОбъектРемонта, "Направление");
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", НаправлениеОР);
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеТиповойДефектАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		текДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
		Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОбъектРемонта) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		НаправлениеОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОбъектРемонта, "Направление");
		ПараметрыПолученияДанных.Отбор.Вставить("Владелец", НаправлениеОР);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеОбъектРемонтаПриИзменении(Элемент) 
	
	ТекущиеДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Исполнитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОбъектРемонта, "ПодразделениеИсполнитель");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПослеУдаления(Элемент)
	УстановитьДоступностьКнопок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ID) 
		И Объект.РемонтныеРаботы.Количество() > 1 Тогда  
		
		торо_ДанныеФормыДеревоКлиентСервер.УпорядочитьРемонтныеРаботы(ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущийРемонт = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите расположение ремонта!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТекущийРемонт = Неопределено Тогда  
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт оборудования для добавления технологической операции!'"), 10);
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	
    ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекРемонт = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Если Не ТекРемонт = Неопределено Тогда 
			МассивСтрокРемонтныхРабот = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("Предписание_ID", ТекРемонт.ID));
			Для Каждого Строка Из МассивСтрокРемонтныхРабот Цикл 
				Объект.РемонтныеРаботы.Удалить(Строка);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		Отказ = Истина;
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоРемонтныхРабот.ВыделенныеСтроки;
		МассивСтрокДляУдаления = Новый Массив;
		
		Для каждого Стр Из ВыделенныеСтроки Цикл 
			Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Стр);
			Если Строка <> Неопределено И Строка.РемонтнаяРабота <> "Ремонтные работы" Тогда 
				МассивСтрокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого Элемент Из МассивСтрокДляУдаления Цикл
			СтруктурыДляПередачи = Новый Структура("ID, Предписание_ID, РемонтнаяРабота",
				Элемент.ID, Элемент.Предписание_ID, Элемент.РемонтнаяРабота);
			УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(СтруктурыДляПередачи);
			
			СтрокаРодителя = Элемент.ПолучитьРодителя();
			СтрокаРодителя.ПолучитьЭлементы().Удалить(Элемент);
			
			Если ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
				торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации, СтрокаРодителя);
			КонецЕсли;
		КонецЦикла;
		
		
		Модифицированность = Истина;
		Отказ = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
	Для каждого ЭлементКоллекции Из ПараметрыПеретаскивания.Значение Цикл
		ПеретаскиваемаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ЭлементКоллекции);
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ПеретаскиваемаяСтрока.ID));
		
		Если МассивСтрок.Количество() Тогда
			МассивСтрок[0].Родитель_ID = ТекущаяСтрока.ID;
			
			// Если случайно перетащили в ту же ТК, то параллельность убирать не нужно.
			Если Не ПеретаскиваемаяСтрока.Родитель_ID = ТекущаяСтрока.ID И ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
				МассивСтрок[0].ID_ПараллельнойОперации = "";
				торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.Предписание_ID);
	ВыделитьСтрокуДереваРемонтныхРабот(ТекущаяСтрока.ID);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущиеДанные = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0] 
		Или Элемент.ТекущиеДанные.ЭтоТехКарта Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Если ТекущаяСтрока.ЭтоТехкарта Тогда
			ПараметрыПеретаскивания.Действие 		   =  ДействиеПеретаскивания.Перемещение; 
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		СтандартнаяОбработка = Ложь;
	    торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьКолонкиПараллельногоВыполненияТО(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы, ID_ПараллельнойОперации, ВыбранноеЗначение.СоответствиеРезультата);
		Модифицированность = Истина;
		
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
	Иначе
		РемонтыОборудования_ID = "";
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;

	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.Предписание_ID
	, СтрокаРодитель.Родитель_ID);
	
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	ОбследованноеОборудованиеПриАктивизацииСтроки(ТекРемонт);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.ОбследованноеОборудование, Объект.РемонтныеРаботы, Неопределено, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.ОбследованноеОборудование, Объект.РемонтныеРаботы, Неопределено, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ID) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	
	МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
	Если МассивСтрок.Количество() > 0 Тогда
		
		КоличествоДоИзменения= МассивСтрок[0].Количество;
		Коэффициент = ?(КоличествоДоИзменения = 0, 0, ТекущиеДанные.Количество / КоличествоДоИзменения);

		МассивСтрок[0].Количество = ТекущиеДанные.Количество;
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекущиеДанные, Коэффициент)
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Истина;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		
		ТекущаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекущаяСтрока.РемонтнаяРабота = ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка");
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Ложь;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		
		НеЗаполненаРемонтнаяРабота = ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.РемонтнаяРабота);
		
		Если Не ОтменаРедактирования И НеЗаполненаРемонтнаяРабота Тогда
			
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
			
			Если РодительСтроки = Неопределено Тогда
				КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Иначе
				КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
			КонецЕсли;
			
			КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
		И Не ТекущиеДанные.РемонтнаяРабота.Пустая() Тогда
		
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
				
		ТекущийРемонт = Элементы.ОбследованноеОборудование.ТекущиеДанные;
		
		Если РодительСтроки = Неопределено Тогда
			КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ТекущийРемонт_ID", ?(ТекущийРемонт = Неопределено, "", ТекущийРемонт.ID)); 
		ДанныеСтроки.Вставить("СтрокаРодитель_ID", РодительСтроки.ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРемонтыОборудования_ID", РодительСтроки.Предписание_ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРодитель_ID", РодительСтроки.Родитель_ID);  
					
		ДеревоРемонтныхРаботОбработкаВыбораСервер(ТекущиеДанные.РемонтнаяРабота, ДанныеСтроки);
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
				
		РодительСтроки = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоРемонтныхРабот.ПолучитьЭлементы(), "ID", РодительСтроки.ID);
		КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		ИндексПоследнегоЭлементаРодителя = КоллекцияЭлементовРодителя.Количество() - 1;
		
		ДобавленныйЭлемент = КоллекцияЭлементовРодителя.Получить(ИндексПоследнегоЭлементаРодителя);
		
		Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ДобавленныйЭлемент.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", 
	Новый Структура("МножественныйВыбор, ДатаОтбора, Отбор", 
	                Истина, ?(ЗначениеЗаполнено(Объект.ДатаСоздания), Объект.ДатаСоздания, Объект.Дата), Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"))), 
	                Элементы.ДеревоРемонтныхРабот);
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АнализКоренныхПричин")  Тогда 
		ОткрытьФормуПодбораНаБазеАнализа();
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОткрытьФормуПодбораОРИзОснования(Элементы.ОбследованноеОборудование);
	Иначе	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_ВнешнееОснованиеДляРабот");
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("РазрешитьВыборФМ", Ложь);
		
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР", ПараметрыФормы,
				Элементы.ОбследованноеОборудование, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМестоположение(Команда)
	
	ТекущиеДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда  
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыМестоположения", ЭтотОбъект, Новый Структура("ID_Ремонта, ОбъектРемонта", ТекущиеДанные.ID, ТекущиеДанные.ОбъектРемонта));
		ОткрытьФорму("ОбщаяФорма.торо_ФормаМестоположения", Новый Структура("ОбъектРемонта, Высота, Долгота, Широта, ТолькоПросмотр", ТекущиеДанные.ОбъектРемонта, ТекущиеДанные.Высота, ТекущиеДанные.Долгота, ТекущиеДанные.Широта, НЕ ПравоРедактирование), 
		Элементы.ОбследованноеОборудование,,,, Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	Если ФОИспользоватьОстановочные Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
		               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
		               |ИЗ
		               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
		               |ГДЕ
		               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
		Запрос = Новый Запрос(ТекстЗапроса);
		Если IDРемонта = Неопределено Тогда
			Запрос.УстановитьПараметр("ID", Объект.ОбследованноеОборудование.Выгрузить().ВыгрузитьКолонку("ID"));
		Иначе
			Запрос.УстановитьПараметр("ID", IDРемонта);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеСтроки = Объект.ОбследованноеОборудование.НайтиСтроки(Новый Структура("ID", Выборка.ID));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивIDДляПроверки = Объект.ОбследованноеОборудование.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Объект.Ссылка, МассивIDДляПроверки);
	
	Если Не МассивIDДляБлокировки = Неопределено Тогда
		
		Для Каждого СтрокаРемонта Из Объект.ОбследованноеОборудование Цикл
			СтрокаРемонта.БлокироватьДляИзменения = Не МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения)
	
	Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр = БлокироватьДляИзменения ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"] ИЛИ НЕ ПравоРедактирование;	
	Элементы.ДеревоРемонтныхРаботДобавитьТехОперацию.Доступность	= Не БлокироватьДляИзменения И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботДобавитьТехКарту.Доступность	= Не БлокироватьДляИзменения И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботПодборОпераций.Доступность	= Не БлокироватьДляИзменения И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботУказатьПараллельноВыполняемые.Доступность	= Не БлокироватьДляИзменения И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые.Доступность	= Не БлокироватьДляИзменения И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(ТекущиеЗначения)	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
	ПараметрыПоиска.Вставить("Предписание_ID", ТекущиеЗначения.Предписание_ID);

	СтрокиДляУдаления = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого Элемент Из СтрокиДляУдаления Цикл
		Объект.РемонтныеРаботы.Удалить(Элемент);
	КонецЦикла;
	
	ПараметрыПоискаПодч = Новый Структура;
	ПараметрыПоискаПодч.Вставить("Предписание_ID", ТекущиеЗначения.Предписание_ID);
	ПараметрыПоискаПодч.Вставить("Родитель_ID", ТекущиеЗначения.ID);
			
	МассивПодчиненныхСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоискаПодч);
	Для Каждого СтрДерева Из МассивПодчиненныхСтрок Цикл
		СтруктураДляПередачи = Новый Структура("ID, Предписание_ID, Родитель_ID", СтрДерева.ID, СтрДерева.Предписание_ID, СтрДерева.Родитель_ID);
		УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(СтруктураДляПередачи);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодборОРОбработчикОжидания()
	
	Если Объект.ОбследованноеОборудование.Количество() = 0 И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АнализКоренныхПричин") Тогда
		ОткрытьФормуПодбораНаБазеАнализа();
	ИначеЕсли Объект.ОбследованноеОборудование.Количество() = 0 Тогда
		ОткрытьФормуПодбораОРИзОснования(Элементы.ОбследованноеОборудование, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораОРИзОснования(Элемент, ОткрыватьБезусловно = Истина, ОдиночныйВыбор = Ложь)
	
	стрПараметров = Новый структура("ТипВыходногоДок, ДокументыОснования, ОдиночныйВыбор, ОткрыватьБезусловно", 
			ПредопределенноеЗначение("Перечисление.торо_ВидыВыходныхДокументов.Предписание"), Объект.ДокументОснование, ОдиночныйВыбор, ОткрыватьБезусловно);
			
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораОРПриВводеНаОсновании", стрПараметров, Элемент,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораНаБазеАнализа()
	
	стрПараметров = Новый Структура("Анализ", Объект.ДокументОснование);
			
	ОткрытьФорму("Документ.торо_АнализКоренныхПричин.Форма.ФормаПодбораРемонтаИзАнализаПричин", стрПараметров, Элементы.ОбследованноеОборудование, ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ПодчиненнаяСтрока.ID));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаРабот = МассивСтрок[0];
			СтрокаРабот.Количество = СтрокаРабот.Количество * Коэффициент;
			
			ПодчиненнаяСтрока.Количество = СтрокаРабот.Количество;
		КонецЕсли;
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ПодчиненнаяСтрока, Коэффициент);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехКарту");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехОперацию");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборОпераций");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавить");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботУказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые");
	
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.ОбследованноеОборудование,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуДереваРемонтныхРабот(ИДОперации)
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Если ЗначениеЗаполнено(ИДОперации) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ЭлементыДереваРемРабот, ИДОперации, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыДереваРемРабот.Количество() > 0 Тогда
		Элементы.ДеревоРемонтныхРабот.Развернуть(ЭлементыДереваРемРабот[0].ПолучитьИдентификатор(),Истина);
		Если Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ЭлементыДереваРемРабот[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте 
Процедура ПослеЗакрытияФормыМестоположения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НайденныеСтроки = Объект.ОбследованноеОборудование.НайтиСтроки(Новый Структура("ID, ОбъектРемонта", ДополнительныеПараметры.ID_Ремонта, ДополнительныеПараметры.ОбъектРемонта)); 
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка.Высота = Результат.Высота;
			Строка.Долгота = Результат.Долгота;
			Строка.Широта = Результат.Широта;
		КонецЦикла;	     
		Модифицированность = Истина; 
	КонецЕсли;
	
КонецПРоцедуры

#КонецОбласти