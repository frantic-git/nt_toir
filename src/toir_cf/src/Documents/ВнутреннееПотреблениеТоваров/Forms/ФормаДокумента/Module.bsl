&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) <> Тип("Соответствие") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ЗапретитьСоздание = Константы.торо_ЗапретитьВводПотребленияБезАкта.Получить();
	ПризнакОткрытияИзАкта = ЗначениеЗаполнено(Параметры.ID);
		
	Если ЗапретитьСоздание И Объект.Ссылка.Пустая() И НЕ Параметры.Свойство("МассивСтрокНоменклатуры") И НЕ ПризнакОткрытияИзАкта Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПризнакОткрытияИзАкта Тогда 
		ID.ЗагрузитьЗначения(Параметры.ID);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
			
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам Тогда
		Элементы.ТоварыЗаполнитьПоЗаказу.Заголовок = НСтр("ru = 'Заполнить по заказам'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
	// ТОИР-->
	// Заголовок формы++
		торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	// <--ТОИР
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	
	Если ЗначениеЗаполнено(ID) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПривязатьСтрокиАктаКЗаказамВопрос", ЭтотОбъект), 
			НСтр("ru = 'Привязать строки к заказам на внутреннее потребление?'"), 
			РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьДоступностьКнопокТоваров();
		СписокЗаказовСохраненный.ЗагрузитьЗначения(СписокЗаказов.ВыгрузитьЗначения());
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	// Заголовок формы++
		торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	Для каждого СтрокаТовар Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТовар, Объект.ПотреблениеПоЗаказам);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	ОповеститьОПроведенииДокумента(ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ТекДанные = ЭтаФорма.ОписаниеОповещенияОЗакрытии;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ДополнительныеПараметры <> Неопределено Тогда 
			Если ТекДанные.ДополнительныеПараметры.Свойство("МассивID") ИЛИ ТекДанные.ДополнительныеПараметры.Свойство("ТекущийРемонт_ID") Тогда 
				ЭтаФорма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("Ссылка"  , Объект.Ссылка);
				ЭтаФорма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("Проведен", Объект.Проведен);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда
		
		Если ВРег(ВыполняемаяОперация) = ВРег("ПодборТоваровИзЗаказа") Тогда
			ОбработкаПодбораТоваровИзЗаказа(ВыбранноеЗначение.АдресВХранилище);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ОбновитьРасхождениеЗаказа" Тогда
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
			Объект.Товары,
			Объект.ПотреблениеПоЗаказам,
			НадписьРасхождениеЗаказ, 
			Элементы.КартинкаРасхождениеЗаказ,
			Элементы.КартинкаРасхождениеЗаказы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПотреблениеПоЗаказуПриИзменении(Элемент)	
	Если Объект.ПотреблениеПоЗаказам Тогда 
		Если Объект.Товары.Количество() Тогда
			ОтборПоЗаказам = ? (СписокЗаказовСохраненный.Количество() > 0, Истина, Ложь);
			ПривязатьСтрокиКЗаказамНаВнутреннееПотребление(ОтборПоЗаказам);
			ОбновитьИнформациюПоЗаказам();
		КонецЕсли;
		Элементы.Товары.КартинкаСтрок = БиблиотекаКартинок.СостоянияСтрок;
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
			Объект.Товары,
			Объект.ПотреблениеПоЗаказам,
			НадписьРасхождениеЗаказ, 
			Элементы.КартинкаРасхождениеЗаказ,
			Элементы.КартинкаРасхождениеЗаказы);
	ИначеЕсли Объект.Товары.Количество() > 0 Тогда
		Объект.ПотреблениеПоЗаказам = Истина;
		ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказов. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтвязатьСтроки", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;
	УстановитьДоступностьЭлементовФормыПоЗаказу();
	УстановитьДоступностьКнопокТоваров();
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыНаВнутреннееПотреблениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотреблениеТоваров.Форма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокЗаказов,
			НСтр("ru='Заказы на внутреннее потребление (списание) (%КоличествоДокументов%)'")), ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры
		
&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	торо_ЗаполнениеДокументовКлиент.ЗаполнитьСклад(Объект.Подразделение, Объект.Склад);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");			
	КонецПроцедуры
	
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	УстановитьДоступностьЭлементовФормыПоЗаказу();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОтветНаВопрос = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект), НСтр("ru='Таблица ""Товары"" будет перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
		
	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаВыбора", 
		Новый Структура("МножественныйВыбор", Истина),,,,,
		Новый ОписаниеОповещения("ВыборЗаказовЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    	
	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаВыбора", 
		Новый Структура("МножественныйВыбор", Истина),,,,,
		Новый ОписаниеОповещения("ВыборЗаказовЗавершение", ЭтотОбъект));
		
КонецПроцедуры
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура РазбитьСтроку(Команда)
		
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, ,Объект.ПотреблениеПоЗаказам);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ОтвязатьСтрокиОтЗаказаНаСервере(КэшированныеЗначения);
		ОповеститьОбОкончанииОтвязкиСтрок(ВыделенныеСтроки.Количество());
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
			Объект.Товары,
			Объект.ПотреблениеПоЗаказам,
			НадписьРасхождениеЗаказ, 
			Элементы.КартинкаРасхождениеЗаказ,
			Элементы.КартинкаРасхождениеЗаказы);
	Иначе
		ТекстПредупреждения = НСтр("ru='Выберите строки, которые необходимо отвязать от заказа.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли; 
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыЗаказНаВнутреннееПотребление Тогда
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ЗаказНаВнутреннееПотребление) Тогда
			ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		
	Отказ = Объект.ПотреблениеПоЗаказам;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	Если ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам Тогда
		ОбновитьИнформациюПоЗаказам();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СерииИспользуются = ПолучитьСерииИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.Серия = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	масПараметр = ПолучитьМассивТиповНоменклаутры();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(масПараметр)); 
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные =  Элементы.Товары.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидНоменклатуры", ВидНоменклатуры));
		ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.Товары.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Товары.ТекущиеДанные.Номенклатура, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.Товары.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Товары.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.Товары.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);  
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПотреблениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПотреблениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказНаВнутреннееПотребление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПотреблениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказНаВнутреннееПотребление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказНаВнутреннееПотребление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказНаВнутреннееПотребление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказНаВнутреннееПотребление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПотреблениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Оформление поля Серия	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьИнформациюПоЗаказам()
	
	ОбновитьИнформациюПоЗаказамВФорме(
					СписокЗаказов,
					Объект.ЗаказНаВнутреннееПотребление,
					НадписьЗаголовокЗаказы,
					Элементы,
					Элементы.ТоварыГруппаЗаказНаВнутренееПотребление,
					Объект.Товары,
					"ЗаказНаВнутреннееПотребление",
					ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам);
					
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура ВыборЗаказовЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.Товары.Очистить();
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			ЗаполнитьТЧТовары(Результат);
		Иначе
			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(Результат);
			ЗаполнитьТЧТовары(МассивЗаказов);
			Если Объект.Товары.Количество() > 0 Тогда 
				Объект.ЗаказНаВнутреннееПотребление = Результат;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		ОбновитьИнформациюПоЗаказам();
		СписокЗаказовСохраненный.ЗагрузитьЗначения(СписокЗаказов.ВыгрузитьЗначения());
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
			Объект.Товары,
			Объект.ПотреблениеПоЗаказам,
			НадписьРасхождениеЗаказ, 
			Элементы.КартинкаРасхождениеЗаказ,
			Элементы.КартинкаРасхождениеЗаказы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьСтроки(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПотреблениеПоЗаказам = Ложь;
		СписокЗаказов.Очистить();
		Объект.ЗаказНаВнутреннееПотребление = Неопределено;
		ОтвязатьСтрокиОтЗаказов();
		ОбновитьИнформациюПоЗаказам();
		Элементы.Товары.КартинкаСтрок = Новый Картинка();
	Иначе
		Объект.ПотреблениеПоЗаказам = Истина;
	КонецЕсли;
	УстановитьДоступностьЭлементовФормыПоЗаказу();
	УстановитьДоступностьКнопокТоваров();
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		Объект.ПотреблениеПоЗаказам,
		НадписьРасхождениеЗаказ, 
		Элементы.КартинкаРасхождениеЗаказ,
		Элементы.КартинкаРасхождениеЗаказы);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокТоваров()
	
	Элементы.ТоварыДобавить.Доступность = НЕ Объект.ПотреблениеПоЗаказам;
	Элементы.ТоварыСкопировать.Доступность = НЕ Объект.ПотреблениеПоЗаказам;
	Элементы.ТоварыЗаполнитьПоЗаказу.Доступность = Объект.ПотреблениеПоЗаказам;
	Элементы.ТоварыОтвязатьОтЗаказа.Доступность = Объект.ПотреблениеПоЗаказам;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);
	ПарамСтатьи.Вставить("Подразделение", Объект.Подразделение);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(АдресВХранилище)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);
	ПарамСтатьи.Вставить("Подразделение", Объект.Подразделение);
	ПарамСтатьи.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПарамСтатьи);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураПоиска = Новый Структура("КодСтроки, Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление");
	Для Каждого ЭлементДанных Из СтруктураДанных.Товары Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементДанных);
		СтрокиТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			
		ИначеЕсли СтрокиТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧ = СтрокиТЧТовары[0];
			
		ИначеЕсли СтрокиТЧТовары.Количество() > 1 Тогда
			
			Для Каждого СтрокаТоваров Из СтрокиТЧТовары Цикл
				Объект.Товары.Удалить(СтрокаТоваров);
			КонецЦикла;
			
			СтрокаТЧ = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЭлементДанных);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	

	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ОбновитьИнформациюПоЗаказам();	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОтвязатьСтрокиОтЗаказаНаСервере(КэшированныеЗначения)
	
	Если НЕ Объект.ПотреблениеПоЗаказам Тогда
		Возврат;
	КонецЕсли;

	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ОтвязатьСтрокуОтЗаказа(ИдентификаторСтроки, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтвязатьСтрокуОтЗаказа(ИдентификаторСтроки, КэшированныеЗначения)

	Если НЕ Объект.ПотреблениеПоЗаказам Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказНаВнутреннееПотребление) Тогда  
		СтрокаТаблицы.ЗаказНаВнутреннееПотребление = Неопределено;
		СтрокаТаблицы.КодСтроки = 0;
		СтрокаТаблицы.РасхождениеЗаказ = 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ПриЧтенииСозданииНаСервере()
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам = Истина;
	ОбновитьИнформациюПоЗаказам();
	УстановитьДоступностьЭлементовФормыПоЗаказу();
	
	Для каждого СтрокаТовар Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТовар, Объект.ПотреблениеПоЗаказам);
	КонецЦикла; 
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		Объект.ПотреблениеПоЗаказам,
		НадписьРасхождениеЗаказ, 
		Элементы.КартинкаРасхождениеЗаказ,
		Элементы.КартинкаРасхождениеЗаказы);

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОПроведенииДокумента(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимЗаписи",      ПараметрыЗаписи.РежимЗаписи);
	ПараметрыОповещения.Вставить("ЕстьРаспоряжение", Объект.ПотреблениеПоЗаказам);
	
	Оповестить("Запись_ВнутреннееПотреблениеТоваров", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормыПоЗаказу()
	ЕстьЗаказ = Объект.ПотреблениеПоЗаказам;
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("ТоварыПодобратьТовары");
	
	ЗаполненСклад = ЗначениеЗаполнено(Объект.Склад);
	
	УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов, "Доступность", Не ЕстьЗаказ И ПравоРедактирование И ЗаполненСклад);
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыПодобратьТоварыИзЗаказа");
	МассивЭлементов.Добавить("ТоварыЗаполнитьПоЗаказу");
	
	УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов, "Доступность", ЕстьЗаказ И ПравоРедактирование);	
КонецПроцедуры

// Добавлено из ОбщегоНазначенияУТКлиентСервер
// Устанавливает значение свойства элементов формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы  - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов - Массив, Строка, Структура - имена искомых элементов.
//  ИмяСвойства    - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение       - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомых элементов.
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь)
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
		КонецЦикла
		
	Иначе
		
		Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
			СтруктураИменЭлементов = Новый Структура(ИменаЭлементов);
		Иначе
			СтруктураИменЭлементов = ИменаЭлементов;
		КонецЕсли;
		
		Для Каждого ИмяЭлемента Из СтруктураИменЭлементов Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента.Ключ, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойствоЭлементовФормы()

// Устанавливает значение свойства элемента формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента.
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь)
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = "толькопросмотр"
		И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("ФормаКлиентскогоПриложения, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
 	КонецЕсли;
 	
КонецПроцедуры // УстановитьСвойствоЭлементаФорма()

&НаСервере
Процедура ОбновитьИнформациюПоЗаказамВФорме(СписокЗаказов,
	                                        ЗаказВШапке,
	                                        НадписьЗаголовок,
	                                        ЭлементыФормы,
	                                        ГруппаКолонокВТабличнойЧасти,
	                                        Знач ТабличнаяЧасть,
	                                        Знач ИмяЗаказаВТабличнойЧасти,
	                                        Знач ИспользоватьЗаказыВТабличнойЧасти,
											НадписьВсегоЗаказов = Неопределено) 
	
	Если Не ИспользоватьЗаказыВТабличнойЧасти Тогда
		Возврат;
	КонецЕсли;
		
	СписокЗаказов.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяЗаказаВТабличнойЧасти]) И СписокЗаказов.НайтиПоЗначению(ТекСтрока[ИмяЗаказаВТабличнойЧасти]) = Неопределено Тогда
			СписокЗаказов.Добавить(ТекСтрока[ИмяЗаказаВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьЗаказыВТабличнойЧасти Тогда
		Если СписокЗаказов.Количество() = 1 Тогда
			ЗаказВШапке = СписокЗаказов[0].Значение;
		ИначеЕсли СписокЗаказов.Количество() > 1 Тогда
			ЗаказВШапке = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокЗаказов.Количество() > 1 Тогда
		Если НадписьВсегоЗаказов = Неопределено Тогда
			НадписьВсегоЗаказов = НСтр("ru = 'Всего заказов'");
		КонецЕсли;
		НадписьЗаголовок = НадписьВсегоЗаказов + ": " + СписокЗаказов.Количество();
	КонецЕсли;
	
	Если СписокЗаказов.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыЗаказ.ТекущаяСтраница = ЭлементыФормы.СтраницаЗаказ;
	Иначе
		ЭлементыФормы.СтраницыЗаказ.ТекущаяСтраница = ЭлементыФормы.СтраницаЗаказы;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ЗаказВШапке) Или Не ИспользоватьЗаказыВТабличнойЧасти Тогда
		ГруппаКолонокВТабличнойЧасти.Группировка = ГруппировкаКолонок.Вертикальная;
	Иначе
		ГруппаКолонокВТабличнойЧасти.Группировка = ГруппировкаКолонок.ВЯчейке;
	КонецЕсли;
	
КонецПроцедуры

// Процедура отменяет связь строк табличной части "Товары" с заказами
//
&НаСервере
Процедура ОтвязатьСтрокиОтЗаказов()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		
		ТекСтрока.КодСтроки = 0;
		ТекСтрока.ЗаказНаВнутреннееПотребление = Неопределено;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)

	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ПотреблениеПоЗаказам)
	
	#Если Клиент Тогда
	    ОбщегоНазначенияУТКлиент.ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока,ПотреблениеПоЗаказам);  	
	#Иначе 
		Если ПотреблениеПоЗаказам Тогда
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗаказНаВнутреннееПотребление) Тогда
				ТекущаяСтрока.РасхождениеЗаказ = 1;
			Иначе
				ТекущаяСтрока.РасхождениеЗаказ = 0;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)

	Если СтрокиОтвязаны Тогда
		ТекстОповещения = НСтр("ru='В документе от заказов отвязано строк (%%Количество%%).'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Количество%%", КоличествоОтработанныхСтрок);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки отвязаны'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отвязаны'"),
			,
			НСтр("ru='Ни одна строка не была отвязана.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСерииИспользуются(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
	
КонецФункции

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Склад",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.Склад);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ВидимостьСерий",				 			 Истина);
	
	масПараметр = ПолучитьМассивТиповНоменклаутры();
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",	масПараметр);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивТиповНоменклаутры()
	масПараметр = Новый Массив();
	Для каждого текСтрока из Перечисления.ТипыНоменклатуры Цикл
		Если текСтрока = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ текСтрока = Перечисления.ТипыНоменклатуры.Работа Тогда Продолжить; КонецЕсли;
		масПараметр.Добавить(текСтрока);
	КонецЦикла;
	
	Возврат масПараметр;
КонецФункции

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(Адрес);
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	Для каждого текСтрока из ТаблицаПодбора Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", 
			текСтрока.Номенклатура, текСтрока.Характеристика, текСтрока.Серия));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрока);
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + текСтрока.КоличествоУпаковок;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);		
		
		Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьСтрокиАктаКЗаказамВопрос(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПодобратьЗаказы();
		ОбновитьИнформациюПоЗаказам();
		УстановитьДоступностьКнопокТоваров();
		СписокЗаказовСохраненный.ЗагрузитьЗначения(СписокЗаказов.ВыгрузитьЗначения());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодобратьЗаказы()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК Заказ
	               |ПОМЕСТИТЬ Заказы
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП ССЫЛКА Документ.ЗаказНаВнутреннееПотребление
	               |	И торо_ИнтеграцияДокументов.ID В (&ID)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Серия КАК Серия,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток КАК Количество,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.КодСтроки КАК КодСтроки
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
	               |			,
	               |			ЗаказНаВнутреннееПотребление В
	               |				(ВЫБРАТЬ
	               |					Заказы.Заказ
	               |				ИЗ
	               |					Заказы)) КАК ЗаказыНаВнутреннееПотреблениеОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление.ДатаОтгрузки";
	Запрос.УстановитьПараметр("ID", ID);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'По выбранному ремонту/ремонтам не введены заказы на внутреннее потребление.'"));	
	Иначе
		Объект.ПотреблениеПоЗаказам = Истина;
		Заказы = РезЗапроса.Выгрузить();
		Заказы.Индексы.Добавить("Номенклатура, Характеристика, Серия");
		КопияТЧТовары = Объект.Товары.Выгрузить();
		СтрокиДляУдаления = Новый Массив;
		ЕстьПривязанные = Ложь;
		Для Каждого СтрокаТЧ Из КопияТЧТовары Цикл
			НайденныеЗаказы = Заказы.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", 
			СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика, СтрокаТЧ.Серия));
			Если НайденныеЗаказы.Количество() = 1 Тогда
				ЕстьПривязанные = Истина;
				НайденнаяСтрока = НайденныеЗаказы[0];	
				СтрокаИсходнойТЧ = Объект.Товары[КопияТЧТовары.Индекс(СтрокаТЧ)];
				Если СтрокаИсходнойТЧ.Количество > НайденнаяСтрока.Количество Тогда  
					НоваяСтрокаТЧ = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаИсходнойТЧ);
					Количество = СтрокаИсходнойТЧ.Количество - НайденнаяСтрока.Количество; 
					НоваяСтрокаТЧ.Количество = Количество;
					НоваяСтрокаТЧ.КоличествоУпаковок = Количество;
					НоваяСтрокаТЧ.РасхождениеЗаказ = 1;	
				КонецЕсли;
				СтрокаИсходнойТЧ.ЗаказНаВнутреннееПотребление = НайденнаяСтрока.ЗаказНаВнутреннееПотребление;
				СтрокаИсходнойТЧ.КодСтроки = НайденнаяСтрока.КодСтроки;
				СтрокаИсходнойТЧ.Количество = НайденнаяСтрока.Количество;
				СтрокаИсходнойТЧ.КоличествоУпаковок = НайденнаяСтрока.Количество;
			ИначеЕсли НайденныеЗаказы.Количество() > 0 Тогда 
				КоличествоВАкте = СтрокаТЧ.Количество;
				ЕстьПривязанные = Истина;
				Для Каждого Заказ Из НайденныеЗаказы Цикл 
					Если КоличествоВАкте <= 0 Тогда 
						Прервать;
					КонецЕсли;
					НоваяСтрокаТЧ = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.ЗаказНаВнутреннееПотребление = Заказ.ЗаказНаВнутреннееПотребление;
					НоваяСтрокаТЧ.КодСтроки = Заказ.КодСтроки;
					Количество = Мин(КоличествоВАкте, Заказ.Количество);
					НоваяСтрокаТЧ.Количество = Количество;
					НоваяСтрокаТЧ.КоличествоУпаковок = Количество; 
					КоличествоВАкте = КоличествоВАкте - Количество;
				КонецЦикла;
				Если КоличествоВАкте > 0 Тогда 
					ИсходнаяСтрокаТЧ = Объект.Товары[КопияТЧТовары.Индекс(СтрокаТЧ)]; 
					ИсходнаяСтрокаТЧ.Количество = КоличествоВАкте;
					ИсходнаяСтрокаТЧ.КоличествоУпаковок = КоличествоВАкте;
					ИсходнаяСтрокаТЧ.РасхождениеЗаказ = 1;
				Иначе
					СтрокиДляУдаления.Добавить(Объект.Товары[КопияТЧТовары.Индекс(СтрокаТЧ)]);
				КонецЕсли;
			Иначе
				Объект.Товары[КопияТЧТовары.Индекс(СтрокаТЧ)].РасхождениеЗаказ = 1;	
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиДляУдаления Цикл 
			Объект.Товары.Удалить(Строка);
		КонецЦикла;
		
		Если НЕ ЕстьПривязанные Тогда 
			Объект.ПотреблениеПоЗаказам = Ложь;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось привязать строки к заказам на внутреннее потребление.'"));	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Функция связывает имеющиеся строки тч "Товары" с заказами
//
&НаСервере
Функция ПривязатьСтрокиКЗаказамНаВнутреннееПотребление(ОтобратьПоЗаказу = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.КодСтроки = 0
	|	И Товары.РасхождениеЗаказ = 0
	|	И (Товары.ЗаказНаВнутреннееПотребление = ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка)
	|			ИЛИ Товары.ЗаказНаВнутреннееПотребление = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказы.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
	|	СУММА(ТаблицаЗаказы.КОформлению) КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыНаВнутреннееПотребление
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заказы.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|		Заказы.Номенклатура КАК Номенклатура,
	|		Заказы.Характеристика КАК Характеристика,
	|		Заказы.КодСтроки КАК КодСтроки,
	|		Заказы.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтобратьПоЗаказу
	|							ТОГДА ЗаказНаВнутреннееПотребление В (&Заказы)
	|						ИНАЧЕ ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение
	|								И ЗаказНаВнутреннееПотребление.Организация = &Организация
	|								И ЗаказНаВнутреннееПотребление.Склад = &Склад
	|					КОНЕЦ
	|					И ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение
	|					И Склад = &Склад
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура КАК Номенклатура,
	|							Товары.Характеристика КАК Характеристика
	|						ИЗ
	|							Товары КАК Товары)) КАК Заказы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыДвижения.ЗаказНаВнутреннееПотребление,
	|		ЗаказыДвижения.Номенклатура,
	|		ЗаказыДвижения.Характеристика,
	|		ЗаказыДвижения.КодСтроки,
	|		ВЫБОР
	|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗаказыДвижения.КОформлению
	|			ИНАЧЕ ЗаказыДвижения.КОформлению
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыДвижения
	|	ГДЕ
	|		ЗаказыДвижения.Регистратор = &Регистратор
	|		И ВЫБОР
	|				КОГДА &ОтобратьПоЗаказу
	|					ТОГДА ЗаказыДвижения.ЗаказНаВнутреннееПотребление В (&Заказы)
	|				ИНАЧЕ ЗаказыДвижения.ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение
	|						И ЗаказыДвижения.ЗаказНаВнутреннееПотребление.Организация = &Организация
	|						И ЗаказыДвижения.ЗаказНаВнутреннееПотребление.Склад = &Склад
	|			КОНЕЦ
	|		И ЗаказыДвижения.Активность
	|		И (ЗаказыДвижения.Номенклатура, ЗаказыДвижения.Характеристика) В
	|				(ВЫБРАТЬ
	|					Товары.Номенклатура КАК Номенклатура,
	|					Товары.Характеристика КАК Характеристика
	|				ИЗ
	|					Товары КАК Товары)) КАК ТаблицаЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.Номенклатура,
	|	ТаблицаЗаказы.Характеристика,
	|	ТаблицаЗаказы.КодСтроки,
	|	ТаблицаЗаказы.ЗаказНаВнутреннееПотребление
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.КОформлению) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДублей,
	|	ЗаказыНаВнутреннееПотребление.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотребление.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДублиТоваров
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотребление.Номенклатура,
	|	ЗаказыНаВнутреннееПотребление.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.КодСтроки КАК КодСтроки,
	|	Заказы.КОформлениюОстаток КАК КОформлениюОстаток,
	|	0 КАК Распределено,
	|	ДублиТоваров.КоличествоДублей КАК КоличествоДублей,
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДублиТоваров КАК ДублиТоваров
	|		ПО Заказы.Номенклатура = ДублиТоваров.Номенклатура
	|			И Заказы.Характеристика = ДублиТоваров.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказТовары
	|		ПО (ЗаказТовары.Ссылка = Заказы.ЗаказНаВнутреннееПотребление)
	|			И (ЗаказТовары.КодСтроки = Заказы.КодСтроки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЗаказНаВнутреннееПотребление,
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("Заказы",                СписокЗаказовСохраненный);
	Запрос.УстановитьПараметр("Организация",           Объект.Организация);
	Запрос.УстановитьПараметр("Склад",                 Объект.Склад);
	Запрос.УстановитьПараметр("Подразделение",         Объект.Подразделение);
	Запрос.УстановитьПараметр("Регистратор",           Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",      ОтобратьПоЗаказу);
	
	Запрос.УстановитьПараметр("Товары",  Объект.Товары.Выгрузить( ,"КодСтроки, Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление, РасхождениеЗаказ"));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	Выборка = РезультатЗапроса[3].Выбрать();
	
	ТаблицаНераспределенныхТоваров = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Характеристика");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("ЗаказНаВнутреннееПотребление");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Количество");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   		Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", 		Выборка.Характеристика);
		СтруктураПоиска.Вставить("КодСтроки",      		0);
		СтруктураПоиска.Вставить("РасхождениеЗаказ",	0);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличествоЗаказ = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной.
		Если Выборка.КоличествоДублей < 2 Тогда
		
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				НераспределенноеКоличествоПотребление = ТекСтрока.Количество;
				Количество = Мин(НераспределенноеКоличествоЗаказ, ТекСтрока.Количество);
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказНаВнутреннееПотребление");
				ТекСтрока.РасхождениеЗаказ = 0;
				ТекСтрока.Количество = Количество;
				ТекСтрока.КоличествоУпаковок = Количество;
				НераспределенноеКоличествоЗаказ = НераспределенноеКоличествоЗаказ - Количество;
				НераспределенноеКоличествоПотребление = НераспределенноеКоличествоПотребление - Количество;
				
				Если НераспределенноеКоличествоПотребление > 0 Тогда
					НоваяСтрока = Объект.Товары.Вставить(ТекСтрока.НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.Количество = НераспределенноеКоличествоПотребление;
					НоваяСтрока.КоличествоУпаковок = НераспределенноеКоличествоПотребление;
					НоваяСтрока.ЗаказНаВнутреннееПотребление = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка();
					НоваяСтрока.КодСтроки = 0;
				КонецЕсли;
				
				Если НераспределенноеКоличествоЗаказ <= 0 Тогда
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества.
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают.
			
			НайденаПодходящаяСтрока = Ложь;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ТекСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки, ЗаказНаВнутреннееПотребление");
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличествоЗаказ;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли товаров, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхТоваров.Количество() > 0 Тогда
	
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("КодСтроки", 0);
		СтруктураПоиска.Вставить("ЗаказНаВнутреннееПотребление", Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка());
		СтруктураПоиска.Вставить("РасхождениеЗаказ",	0);

		СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовары Из СтрокиТовары Цикл
			
			// Найдем нужные строки в таблице нераспределенных товаров
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТовары.Характеристика);
			
			НайденныеСтроки = ТаблицаНераспределенныхТоваров.НайтиСтроки(СтруктураПоиска);
			НераспределенноеКоличество = СтрокаТовары.Количество;
			ИндексСтроки = 0;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТекСтрока.Номенклатура = СтрокаТовары.Номенклатура И
					ТекСтрока.Характеристика = СтрокаТовары.Характеристика И
					ТекСтрока.Количество > 0 И
					НераспределенноеКоличество > 0 Тогда
					
					Количество = Мин(НераспределенноеКоличество, ТекСтрока.Количество);

					Если ИндексСтроки = 0 Тогда 
						ЗаполнитьЗначенияСвойств(СтрокаТовары, ТекСтрока, "КодСтроки, ЗаказНаВнутреннееПотребление");
						СтрокаТовары.РасхождениеЗаказ = 0;
						СтрокаТовары.Количество = Количество;
						СтрокаТовары.КоличествоУпаковок = Количество;
					Иначе
						НоваяСтрока = Объект.Товары.Вставить(СтрокаТовары.НомерСтроки);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
						НоваяСтрока.Количество = Количество;
						НоваяСтрока.КоличествоУпаковок = Количество;
					КонецЕсли;
					
					// Уменьшим нераспределенное количество в таблице
					ТекСтрока.Количество = ТекСтрока.Количество - Количество;
					НераспределенноеКоличество = НераспределенноеКоличество - Количество;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденныеСтроки.Количество() > 0 И НераспределенноеКоличество > 0 Тогда
				НоваяСтрока = Объект.Товары.Вставить(СтрокаТовары.НомерСтроки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				НоваяСтрока.КоличествоУпаковок = НераспределенноеКоличество;
				НоваяСтрока.ЗаказНаВнутреннееПотребление = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка();
				НоваяСтрока.КодСтроки = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отметим непривязанными строки, которые не удалось привязать к заказам.
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.КодСтроки) Или Не ЗначениеЗаполнено(ТекСтрока.ЗаказНаВнутреннееПотребление) Тогда
			ТекСтрока.РасхождениеЗаказ = 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧТовары(МассивЗаказов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.КодСтроки КАК КодСтроки,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Серия КАК Серия,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление.ДатаОтгрузки КАК ЗаказНаВнутреннееПотреблениеДатаОтгрузки
	               |ПОМЕСТИТЬ НеЗакрытыеЗаказы
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(, ЗаказНаВнутреннееПотребление В (&СписокЗаказов)) КАК ЗаказыНаВнутреннееПотреблениеОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	ТоварыНаСкладахОстатки.Серия КАК Серия,
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	               |ПОМЕСТИТЬ ТоварыНаСкладах
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			(Номенклатура, Характеристика, Склад) В
	               |				(ВЫБРАТЬ
	               |					Заказы.Номенклатура,
	               |					Заказы.Характеристика,
	               |					Заказы.Склад
	               |				ИЗ
	               |					НеЗакрытыеЗаказы КАК Заказы)) КАК ТоварыНаСкладахОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	               |	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	               |	торо_ТоварыНаРукахОстатки.Серия КАК Серия,
	               |	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ТоварыНаРуках
	               |ИЗ
	               |	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	               |			,
	               |			(Номенклатура, Характеристика, Склад, ЗаказНаВнутреннееПотребление) В
	               |				(ВЫБРАТЬ
	               |					Заказы.Номенклатура,
	               |					Заказы.Характеристика,
	               |					Заказы.Склад,
	               |					Заказы.ЗаказНаВнутреннееПотребление
	               |				ИЗ
	               |					НеЗакрытыеЗаказы КАК Заказы)) КАК торо_ТоварыНаРукахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаВнутреннееПотребление,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Склад,
	               |	Серия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	               |	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	торо_РезервыНаСкладахОстатки.Серия КАК Серия,
	               |	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ РезервыПоЗаказам
	               |ИЗ
	               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	               |			,
	               |			(Номенклатура, Характеристика, Склад) В
	               |				(ВЫБРАТЬ
	               |					Заказы.Номенклатура,
	               |					Заказы.Характеристика,
	               |					Заказы.Склад
	               |				ИЗ
	               |					НеЗакрытыеЗаказы КАК Заказы)) КАК торо_РезервыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезервыПоЗаказам.Склад КАК Склад,
	               |	РезервыПоЗаказам.Номенклатура КАК Номенклатура,
	               |	РезервыПоЗаказам.Характеристика КАК Характеристика,
	               |	РезервыПоЗаказам.Серия КАК Серия,
	               |	СУММА(РезервыПоЗаказам.КоличествоОстаток) КАК КоличествоОстаток
	               |ПОМЕСТИТЬ РезервыПоСкладам
	               |ИЗ
	               |	РезервыПоЗаказам КАК РезервыПоЗаказам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РезервыПоЗаказам.Склад,
	               |	РезервыПоЗаказам.Номенклатура,
	               |	РезервыПоЗаказам.Характеристика,
	               |	РезервыПоЗаказам.Серия
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия,
	               |	Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Заказы.Номенклатура КАК Номенклатура,
	               |	Заказы.Характеристика КАК Характеристика,
	               |	Заказы.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	Заказы.Склад КАК Склад,
	               |	ВЫБОР
	               |		КОГДА Заказы.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ТоварыНаСкладах.Серия
	               |		ИНАЧЕ Заказы.Серия
	               |	КОНЕЦ КАК Серия,
	               |	Заказы.КОформлениюОстаток КАК Потребность,
	               |	ЕСТЬNULL(ДругиеРезервы.КоличествоОстаток, 0) КАК РезервПоДругимЗаказам,
	               |	ЕСТЬNULL(РезервЗаказа.КоличествоОстаток, 0) КАК Резерв,
	               |	ЕСТЬNULL(НаРуках.КоличествоОстаток, 0) КАК НаРуках,
	               |	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) - ЕСТЬNULL(ДругиеРезервы.КоличествоОстаток, 0) КАК СвободныйОстаток,
	               |	Заказы.КодСтроки КАК КодСтроки
	               |ИЗ
	               |	НеЗакрытыеЗаказы КАК Заказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладах КАК ТоварыНаСкладах
	               |		ПО Заказы.Номенклатура = ТоварыНаСкладах.Номенклатура
	               |			И Заказы.Характеристика = ТоварыНаСкладах.Характеристика
	               |			И Заказы.Склад = ТоварыНаСкладах.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК НаРуках
	               |		ПО Заказы.ЗаказНаВнутреннееПотребление = НаРуках.ЗаказНаВнутреннееПотребление
	               |			И Заказы.Номенклатура = НаРуках.Номенклатура
	               |			И Заказы.Характеристика = НаРуках.Характеристика
	               |			И Заказы.Склад = НаРуках.Склад
	               |			И (ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) = ЕСТЬNULL(НаРуках.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоЗаказам КАК РезервЗаказа
	               |		ПО Заказы.ЗаказНаВнутреннееПотребление = РезервЗаказа.ЗаказНаВнутреннееПотребление
	               |			И Заказы.Номенклатура = РезервЗаказа.Номенклатура
	               |			И Заказы.Характеристика = РезервЗаказа.Характеристика
	               |			И Заказы.Склад = РезервЗаказа.Склад
	               |			И (ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) = ЕСТЬNULL(РезервЗаказа.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоСкладам КАК ДругиеРезервы
	               |		ПО Заказы.Номенклатура = ДругиеРезервы.Номенклатура
	               |			И Заказы.Характеристика = ДругиеРезервы.Характеристика
	               |			И Заказы.Склад = ДругиеРезервы.Склад
	               |			И (ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) = ЕСТЬNULL(ДругиеРезервы.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
	               |ГДЕ
	               |	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) - ЕСТЬNULL(ДругиеРезервы.КоличествоОстаток, 0) >= 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Заказы.ЗаказНаВнутреннееПотреблениеДатаОтгрузки
	               |ИТОГИ
	               |	МИНИМУМ(Потребность)
	               |ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	               |	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	               |	торо_ТоварыНаРукахОстатки.Серия КАК Серия,
	               |	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	               |			,
	               |			ЗаказНаВнутреннееПотребление В (&СписокЗаказов)
	               |				И НЕ (Номенклатура, Характеристика) В
	               |						(ВЫБРАТЬ
	               |							НеЗакрытыеЗаказы.Номенклатура,
	               |							НеЗакрытыеЗаказы.Характеристика
	               |						ИЗ
	               |							НеЗакрытыеЗаказы)) КАК торо_ТоварыНаРукахОстатки";
	Запрос.УстановитьПараметр("СписокЗаказов", МассивЗаказов);
	РезЗапроса = Запрос.ВыполнитьПакет();
	Если НЕ РезЗапроса[5].Пустой() Тогда
		
		Таблица = Новый ТаблицаЗначений();
		Таблица.Колонки.Добавить("Серия");
		Таблица.Колонки.Добавить("СписаноИзСвободного");
		
		Структура = Новый Структура();
		Структура.Вставить("Серия");
		
		ВыборкаНоменклатура = РезЗапроса[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			Таблица.Очистить();
			ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристика.Следующий() Цикл
				ВыборкаВнутреннийЗаказ = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВнутреннийЗаказ.Следующий() Цикл
					Потребность = ВыборкаВнутреннийЗаказ.Потребность;
					
					ВыборкаДетальныеЗаписи = ВыборкаВнутреннийЗаказ.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл								
						Если Потребность = 0 Тогда
							Прервать;
						КонецЕсли;
						
						МожноПотребить = ВыборкаДетальныеЗаписи.Резерв + ВыборкаДетальныеЗаписи.НаРуках;
						
						ЗаполнитьЗначенияСвойств(Структура, ВыборкаДетальныеЗаписи);
						
						ТекСтрока = Неопределено;
						Массив = Таблица.НайтиСтроки(Структура);
						Если Массив.Количество() Тогда
							ТекСтрока = Массив[0];
							ИзСвободного = ВыборкаДетальныеЗаписи.СвободныйОстаток - ТекСтрока.СписаноИзСвободного;
						Иначе
							ТекСтрока = Таблица.Добавить();
							ЗаполнитьЗначенияСвойств(ТекСтрока, Структура);
							ИзСвободного = ВыборкаДетальныеЗаписи.СвободныйОстаток;
							ТекСтрока.СписаноИзСвободного = 0;
						КонецЕсли;
						
						Резервируем = 0;
						Если МожноПотребить > 0 Тогда
							Резервируем = ?(МожноПотребить > Потребность, Потребность, МожноПотребить);
							Потребность = Потребность - Резервируем;
							Если Потребность > 0 И ИзСвободного > 0 Тогда
								ДопРезерв = ?(ИзСвободного > Потребность, Потребность, ИзСвободного);
								Потребность = Потребность - ДопРезерв;
								Резервируем = Резервируем + ДопРезерв;
								ТекСтрока.СписаноИзСвободного = ТекСтрока.СписаноИзСвободного + ДопРезерв;
							КонецЕсли;
						Иначе
							Резервируем = ?(ИзСвободного > Потребность, Потребность, ИзСвободного);
							Потребность = Потребность - Резервируем;
							ТекСтрока.СписаноИзСвободного = ТекСтрока.СписаноИзСвободного + Резервируем;
						КонецЕсли;
						
						Если Резервируем > 0 Тогда 
							НоваяСтрока = Объект.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
							НоваяСтрока.Количество = Резервируем;
							НоваяСтрока.КоличествоУпаковок = Резервируем;
							НоваяСтрока.ЗаказНаВнутреннееПотребление = ВыборкаВнутреннийЗаказ.ЗаказНаВнутреннееПотребление;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	Если Не РезЗапроса[6].Пустой() Тогда
		Выборка = РезЗапроса[6].Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КоличествоУпаковок = Выборка.Количество;
		КонецЦикла;
	КонецЕсли;
	
	Если РезЗапроса[5].Пустой() И РезЗапроса[6].Пустой() Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для выбранного заказа/заказов нет доступных к потреблению товаров'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Товары, ПотреблениеПоЗаказу, НадписьРасхождениеЗаказ, КартинкаРасхождениеЗаказ, КартинкаРасхождениеЗаказы)
	
	Если ПотреблениеПоЗаказу Тогда 
		КоличествоРасхождений = Товары.Итог("РасхождениеЗаказ");
		
		Если КоличествоРасхождений > 0 Тогда
			КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
			КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
			НадписьРасхождениеЗаказ = СтрЗаменить(НСтр("ru='Строк сверх заказа: %КоличествоРасхождений%'"), "%КоличествоРасхождений%", КоличествоРасхождений);
		Иначе
			КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
			КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
			НадписьРасхождениеЗаказ = "";
			КоличествоРасхождений = 0;
		КонецЕсли;
	Иначе
		КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
		НадписьРасхождениеЗаказ = "";	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти



