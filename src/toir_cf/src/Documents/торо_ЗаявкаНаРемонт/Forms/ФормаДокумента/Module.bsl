////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем РемонтОборудованияУдаляется;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) <> Тип("Соответствие") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаГлобальные;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Свойство("Основание") И Параметры.Свойство("ВыделенныеСтроки") Тогда
		ДокОснованиеППР = Параметры.Основание;
		МассивIDИзППР.ЗагрузитьЗначения(Параметры.ВыделенныеСтроки);
	КонецЕсли;
	
	Если ЭтаФорма.Параметры.Свойство("ДекомпиляцияЭлементов") Тогда
		ВнешниеОбработки.Создать(ЭтаФорма.Параметры.ДекомпиляцияЭлементов.ИмяПодключеннойОбработки,Ложь).ОпределитьВнутренниеСвойстваЭлементов(ЭтаФорма);
	КонецЕсли;
	
	Если Параметры.Свойство("ФильтрПоИсполнителю") Тогда
		Если ТипЗнч(Параметры.ФильтрПоИсполнителю) = Тип("СписокЗначений") Тогда
			МассивИсполнителейДляФильтра = Параметры.ФильтрПоИсполнителю;
		КонецЕсли;
	Иначе
		МассивИсполнителейДляФильтра = Неопределено;
	КонецЕсли; 
	
	Если Параметры.Свойство("ID") Тогда
		ТекСтрокаИзВнеID = Параметры.ID;		
	КонецЕсли;
	
	// Функциональные опции.
	ФОУчетЗапчастей                                      = ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОИспользоватьГарантии                               = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОЗапретитьРемонтГарантийногоОборудованияХозспособом = ПолучитьФункциональнуюОпцию("торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом");
	ФОИспользоватьАналоги                                = ПолучитьФункциональнуюОпцию("торо_ИспользоватьАналогиНоменклатурыДляРемонтов");
	ФОИспользоватьОстановочные                           = ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ФОНазначениеНаРемонтСУчетомРисков                    = ПолучитьФункциональнуюОпцию("торо_НазначениеНаРемонтСУчетомРисков");
	ФОИспользоватьСкользящееПланирование                 = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСкользящееПланирование");
	
	ПравоИнтерактивнаяПометкаУдаленияЗаказовНаВнутреннееПотребление = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоИнтерактивноеДобавлениеЗаказовНаВнутреннееПотребление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ЗаявкаНаРемонт);
	ДоступныЗаказыНаВнутреннееПотребление = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ЗаявкаНаРемонт;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);
	
	Элементы.ГруппаЗапчасти.Видимость = ФОУчетЗапчастей;  
	Элементы.АктульныеДатыРемонта.Видимость = ФОИспользоватьОстановочные ИЛИ ФОИспользоватьСкользящееПланирование;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДобавленныеКолонкиТаблиц();
		Если ФОИспользоватьГарантии Тогда
			торо_ГарантийноеОбслуживание.ПроставитьЗначениеФлагаГарантийныйВТаблице(Объект.РемонтыОборудования);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ОбновитьДоступностьДляРедактирования();
	
	ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	ОбновитьЗависимыеЛоты();
	
	ФОВводНаОснованииПроведенного = Константы.торо_ВводЗаказовНаОснованииПроведенногоДокумента.Получить();
	Элементы.ДокументыЗаказНаВнПотребелениеДобавитьЗаказ.Доступность = ПравоИнтерактивноеДобавлениеЗаказовНаВнутреннееПотребление
		И (НЕ ФОВводНаОснованииПроведенного ИЛИ (ФОВводНаОснованииПроведенного И Объект.Проведен));
	ФОРасширенныйРежимМТО = ПолучитьФункциональнуюОпцию("торо_РасширенныйРежимМТО");
	Элементы.ДокументыЗаказНаВнПотреблениеСводныйДокументВнутреннееПотребление.Видимость = Не ФОРасширенныйРежимМТО;
	//Элементы.ДокументыЗаказНаВнПотребелениеДобавитьЗаказ.Видимость = Не ФОРасширенныйРежимМТО;
	
	// Мультиязычное хранение реквизитов
	торо_МультиязычностьСервер.ПриСозданииНаСервереОбработкаТабличнойЧасти(ЭтаФорма, Объект.Ссылка, "РемонтыОборудования");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() > 0 Тогда
		торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "РемонтыОборудования");
	КонецЕсли;
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.РемонтыОборудования.Выгрузить());
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ДокументыОснования");
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения		
	
	// Мультиязычное хранение реквизитов
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "РемонтыОборудования");

	ФОИспользоватьГарантии                = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОИспользоватьАналоги                 = ПолучитьФункциональнуюОпцию("торо_ИспользоватьАналогиНоменклатурыДляРемонтов");
	ФОИспользоватьОстановочные            = ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ФОНазначениеНаРемонтСУчетомРисков     = ПолучитьФункциональнуюОпцию("торо_НазначениеНаРемонтСУчетомРисков");
	ФОИспользоватьСкользящееПланирование  = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСкользящееПланирование");
	
	ИдентификаторСтрокиРемонта = Элементы.РемонтыОборудования.ТекущаяСтрока;
	Если ИдентификаторСтрокиРемонта <> Неопределено Тогда
		ТекущаяСтрокаРемонта = Объект.РемонтыОборудования.НайтиПоИдентификатору(ИдентификаторСтрокиРемонта);
		РемонтID = ?(ТекущаяСтрокаРемонта = Неопределено, Неопределено, ТекущаяСтрокаРемонта.ID);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, РемонтID); 
	КонецЕсли;
	
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
		
		Если МассивIDИзППР.Количество() = 0 Тогда
			ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
		Иначе
			ВыбранноеЗначение = ЗаполнитьДанныеНаОснованииППРВыделенныеСтроки();
			РемонтыОборудованияОбработкаВыбора(Элементы.РемонтыОборудования, ВыбранноеЗначение, Ложь);
		КонецЕсли;
		
	КонецЕсли; 	
	
	Если ТекСтрокаИзВнеID <> "" Тогда
		ВыделитьСтрокуРемонтовОборудования(ТекСтрокаИзВнеID);
	КонецЕсли;	
		
	Если МассивИсполнителейДляФильтра.Количество() > 0 Тогда
		ВыборИсполнителейДляФильтраЗавершение(Неопределено, Неопределено);
		ФильтрПоИсполнителямАктивирован = Истина;
	Иначе
		ФильтрПоИсполнителямАктивирован = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Для Каждого РемонтнаяРабота Из Объект.РемонтыОборудования Цикл
		Для Каждого Значение Из Объект.ДокументыОснования Цикл
			ДокОснование = Значение.ДокументОснование;
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
				И ДокОснование.ДатаОбнаружения > РемонтнаяРабота.ДатаНачала 
				И ДокОснование = РемонтнаяРабота.ДокументИсточник Тогда
				ШаблонСообщения = НСтр("ru = 'Дата начала ремонта для объекта ремонта (%1) не может быть меньше даты обнаружения дефекта (%2)!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, РемонтнаяРабота.ОбъектРемонта, ДокОснование.ДатаОбнаружения);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.РемонтыОборудования Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ШаблонСообщения = НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	Строка.НомерСтроки,Строка.ДатаНачала,Строка.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
		
		Если ФОНазначениеНаРемонтСУчетомРисков
			И ЗначениеЗаполнено(Строка.КрайняяДопустимаяДатаЗавершенияРемонта)
			И Строка.ДатаОкончания > Строка.КрайняяДопустимаяДатаЗавершенияРемонта Тогда
			ШаблонСообщения = НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата окончания периода ремонтных работ больше крайней допустимой даты заверешния ремонта (%2 - %3).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	Строка.НомерСтроки,Строка.ДатаОкончания,Строка.КрайняяДопустимаяДатаЗавершенияРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	Если ФОИспользоватьГарантии И ФОЗапретитьРемонтГарантийногоОборудованияХозспособом Тогда
		торо_ГарантийноеОбслуживание.ПроверитьНаличиеКонтрагентов(Объект, "ИсполнителиПоРемонтам","Исполнитель", Отказ);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "РемонтыОборудования");
	КонецЕсли; 
	
	// Мультиязычное хранение реквизитов
	торо_МультиязычностьСервер.ПередЗаписьюНаСервереОбработкаТабличнойЧасти(ТекущийОбъект, "РемонтыОборудования");

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Мультиязычное хранение реквизитов
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "РемонтыОборудования");

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	ОбновитьДобавленныеКолонкиТаблиц();
	ОбновитьЗависимыеЛоты();
	ОбновитьДоступностьДляРедактирования();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВыполняемаяОперация")
		И ВыбранноеЗначение.ВыполняемаяОперация = "ВыборАналогаНоменклатурыДляРемонта" Тогда
		
		ЗаменитьМатериалыНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		МассивID = Новый Массив;
		ЗаполнитьМассивID(МассивID,ТекДанныеРемРаб);
		ОтметитьНаличиеАналогов(МассивID);
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекДанныеРемонты = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если ТекДанныеРемРаб = Неопределено ИЛИ ТекДанныеРемонты = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
			ИмяТЧ = "МатериальныеЗатраты";
			ИмяРеквизита = "Номенклатура";
		ИначеЕсли Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаИнструменты Тогда
			ИмяТЧ = "Инструменты";
			ИмяРеквизита = "Инструмент";
		Иначе
			ИмяТЧ = "ЗапчастиРемонта";
			ИмяРеквизита = "Номенклатура";
		КонецЕсли;
		
		СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, ID, Количество", ТекДанныеРемонты.ID, ТекДанныеРемРаб.ID, ТекДанныеРемРаб.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		ОтметитьНаличиеАналогов(ТекДанныеРемРаб.ID);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "ЗагрузкаИзПроджект" И Параметр = Объект.Ссылка Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования

&НаКлиенте
Процедура Подключаемый_ОткрытиеЛокализуемогоРеквзитаТЧ(Элемент, СтандартнаяОбработка)
	
	торо_МультиязычностьКлиент.ПриОткрытииРеквизитаТЧ(ЭтаФорма, Объект, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда 
		// Установка продолжительности ремонта
		НормаВремени = ВыбранноеЗначение;
		
		МассивРемонтов = Новый Массив;		
		Для каждого ТекСтрока Из Элементы.РемонтыОборудования.ВыделенныеСтроки Цикл 
			МассивРемонтов.Добавить(Объект.РемонтыОборудования.НайтиПоИдентификатору(ТекСтрока));
		КонецЦикла; 
		
		Для каждого ТекРемонт Из МассивРемонтов Цикл 
			ТекРемонт.ДатаОкончания = ТекРемонт.ДатаНачала + НормаВремени;
		КонецЦикла;
		
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборРемонтов") И ВыбранноеЗначение.ПодборРемонтов = Истина 
		И НЕ ВыбранноеЗначение.ЭтоРемонтнаяРабота Тогда
		// Подбор ремонтов (ремонтные работы в другой ветке).
		
		Если ВыбранноеЗначение.МассивИДРемонтов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РемонтУжеДобавлен = Ложь;
		МассивИДДобавленныхРемонтов = Новый Массив;

		Для каждого ИдРемонта из ВыбранноеЗначение.МассивИДРемонтов Цикл
			НайденныеРемонты = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ИдРемонта));
			Если НайденныеРемонты.Количество() > 0 Тогда
				РемонтУжеДобавлен = Истина;
				МассивИДДобавленныхРемонтов.Добавить(ИдРемонта);
			КонецЕсли;
		КонецЦикла;
		
		Если РемонтУжеДобавлен Тогда
			Если ВыбранноеЗначение.МассивИДРемонтов.Количество() > 1 Тогда
				Вопрос = НСтр("ru = 'Некоторые из выбранных ремонтов уже добавлены. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			Иначе
				Вопрос = НСтр("ru = 'Этот ремонт уже добавлен. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			КонецЕсли;

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			СтруктураПараметров.Вставить("МассивИДДобавленныхРемонтов", МассивИДДобавленныхРемонтов);
			ОписаниеОповещения = Новый ОписаниеОповещения("РемонтыОборудованияОбработкаВыбораПослеВопроса", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(ОписаниеОповещения, Вопрос, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораЗавершение(ВыбранноеЗначение);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЭтоРемонтнаяРабота") И ВыбранноеЗначение.ЭтоРемонтнаяРабота = Истина Тогда 
		// Подбор ремонтных работ
		
		ОбработкаВыбораЗавершение(ВыбранноеЗначение);
				
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("КрайняяДопустимаяДатаЗавершенияРемонта") Тогда
		// Подбор из матрицы оценки рисков
		
		ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
			ТекущиеДанные.ДатаНачала     = ВыбранноеЗначение.ДатаНачалаРемонта;
			ТекущиеДанные.ДатаОкончания  = ВыбранноеЗначение.ДатаОкончанияРемонта;
			
			МассивСтрок = Объект.РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("РемонтыОборудования_ID",ТекущиеДанные.ID));
			
			Для каждого Строка Из МассивСтрок Цикл
				Объект.РезультатыПодбораИзМатрицыОценкиРисков.Удалить(Строка);
			КонецЦикла; 
			
			Если ВыбранноеЗначение.Свойство("РезультатыПодбораИзМатрицыОценкиРисков") Тогда
				Для каждого Строка Из ВыбранноеЗначение.РезультатыПодбораИзМатрицыОценкиРисков Цикл
					ЗаполнитьЗначенияСвойств(Объект.РезультатыПодбораИзМатрицыОценкиРисков.Добавить(), Строка);
				КонецЦикла; 
			КонецЕсли; 
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(Элементы.РемонтыОборудования.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
		
		УстановитьОтборыСвязанныхТаблицРемонты(Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		ВыделитьСтрокуДереваРемонтныхРабот(Неопределено);
		УстановитьДоступностьКнопокИсполнителей();
		УстановитьДоступностьДляРедактированияПоТекРемонту(ТекущиеДанные.БлокироватьДляИзменения, ТекущиеДанные.ОбъектРемонта);
		
		Найденный = МассивIDЛотов.НайтиПоЗначению(ТекущиеДанные.ID);
		Если Найденный <> Неопределено Тогда
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Истина;
		Иначе
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Ложь;
		КонецЕсли;
		
		Если ФильтрПоИсполнителямАктивирован Тогда
			ДеревоРРЗаполнитьПолеДляФильтраНаКлиенте(ДеревоРемонтныхРабот, Истина);
		КонецЕсли;
		Элементы.РемонтыОборудованияПоказатьМестоположение.Доступность = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОбъектРемонта, "ЭтоПротяженныйОбъект");
	Иначе 
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, Неопределено);
		Элементы.РемонтыОборудованияПоказатьМестоположение.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	ДеревоРемонтныхРаботПриАктивизацииСтроки(Элементы.ДеревоРемонтныхРабот);
	
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И (ТекДанные.БлокироватьДляИзменения ИЛИ (ФОИспользоватьОстановочные И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного))) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	
	Если НЕ РемонтОборудованияУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("РемонтыОборудованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),
					   Вопрос,РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Строки = Новый массив;
	Для каждого инд из Элемент.ВыделенныеСтроки Цикл
		Строки.Добавить(инд);
	КонецЦикла;
	
	БылиУдаленыРемонты = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого идСтрока из Строки Цикл
			текСтрока = Объект.РемонтыОборудования.НайтиПоИдентификатору(идСтрока);
			РазрешитьУдаление = Истина;
			Если ФОИспользоватьОстановочные И Объект.Проведен Тогда 
				 РазрешитьУдаление = ПроверитьВозможностьУдаленияРемонтов(текСтрока.ID);
			КонецЕсли;
			
			Если НЕ РазрешитьУдаление Тогда
				
				Продолжить;
			КонецЕсли;
			
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			РемонтОборудованияУдаляется = Истина;
			Объект.РемонтыОборудования.Удалить(текСтрока);
			РемонтОборудованияУдаляется = Ложь;
			БылиУдаленыРемонты = Истина;
		КонецЦикла;
		
		Если БылиУдаленыРемонты Тогда 	
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.РемонтыОборудования.Количество() = 0 Тогда
		ДеревоРемонтныхРабот.ПолучитьЭлементы().Очистить();
		УправлениеФормой();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если ФОИспользоватьГарантии Тогда
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, ТекДанные.ДатаНачала, ТекДанные.ДатаОкончания);
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияДатаНачалаПриИзменении(Элемент)
	
	Если ФОИспользоватьАналоги Тогда
		
		ТекРемонтID = Элементы.РемонтыОборудования.ТекущиеДанные.ID;
		МассивID = Новый Массив;
		Для Каждого СтрокаРР Из Объект.РемонтныеРаботы Цикл
			Если СтрокаРР.РемонтыОборудования_ID = ТекРемонтID Тогда
				МассивID.Добавить(СтрокаРР.ID);
			КонецЕсли;
		КонецЦикла;
		ОтметитьНаличиеАналогов(МассивID);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "РемонтыОборудованияВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.ФормаОбъекта", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите расположение ремонта!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТекущийРемонт = Неопределено Тогда  
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт оборудования для добавления технологической операции!'"), 10);
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
		
		УстановитьОтборСтрокПоЗатратам();
		
		Если ТекущиеДанные.РемонтнаяРабота = "Ремонтные работы" Тогда
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;			
		Иначе
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		КонецЕсли; 
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ID) 
		И Объект.РемонтныеРаботы.Количество() > 1 Тогда  
		
		торо_ДанныеФормыДеревоКлиентСервер.УпорядочитьРемонтныеРаботы(ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Истина;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		
		ТекущаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекущаяСтрока.РемонтнаяРабота = ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка");
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные; 
	
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("МатериальныеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("Инструменты");
	СтруктураСвязанныхТЧ.Вставить("ТрудовыеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");
	СтруктураСвязанныхТЧ.Вставить("МерыБезопасности");
 		
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
			
			ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("РемонтыОборудования_ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		
			СтрокиКУдалению = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				
				ТабличнаяЧасть.Удалить(Строка);
				
			КонецЦикла;		    
						
		КонецЦикла;

		Модифицированность = Истина;
		
		Отказ = Истина;

	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоРемонтныхРабот.ВыделенныеСтроки;
		МассивСтрокДляУдаления = Новый Массив;
		
		Для каждого Стр Из ВыделенныеСтроки Цикл 
			Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Стр);
			Если Строка <> Неопределено И Строка.РемонтнаяРабота <> "Ремонтные работы" Тогда 
				МассивСтрокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого Элемент Из МассивСтрокДляУдаления Цикл
			СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
			Элемент.ID, Элемент.РемонтыОборудования_ID, Элемент.Родитель_ID, Элемент.РемонтнаяРабота);
			УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи, СтруктураСвязанныхТЧ);
			
			СтрокаРодителя = Элемент.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда 
				СтрокаРодителя.ПолучитьЭлементы().Удалить(Элемент); 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
				торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации, СтрокаРодителя);
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
		Отказ = Истина;
		
	КонецЕсли;
	
	УстановитьДоступностьКнопокИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		СтандартнаяОбработка = Ложь;
	    торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьКолонкиПараллельногоВыполненияТО(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы, ID_ПараллельнойОперации, ВыбранноеЗначение.СоответствиеРезультата);
		Модифицированность = Истина;
		
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;       
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, СтрокаРодитель.Родитель_ID
	, ДатаНачалаРемонта);
	
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	ВыделитьСтрокуДереваРемонтныхРабот(ИДВыбраннойСтроки);
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0] 
		Или Элемент.ТекущиеДанные.ЭтоТехКарта Тогда
		Выполнение = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(Строка) Тогда
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Если ТекущаяСтрока.ЭтоТехкарта Тогда
			ПараметрыПеретаскивания.Действие 		   =  ДействиеПеретаскивания.Перемещение; 
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Строка = Неопределено Тогда
		
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Для каждого ЭлементКоллекции Из ПараметрыПеретаскивания.Значение Цикл
			ПеретаскиваемаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ЭлементКоллекции);
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ПеретаскиваемаяСтрока.ID));
			Если МассивСтрок.Количество() Тогда
				МассивСтрок[0].Родитель_ID = ТекущаяСтрока.ID;
				
				// Если случайно перетащили в ту же ТК, то параллельность убирать не нужно.
				Если Не ПеретаскиваемаяСтрока.Родитель_ID = ТекущаяСтрока.ID И ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
					МассивСтрок[0].ID_ПараллельнойОперации = "";
					торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.РемонтыОборудования_ID);
		ВыделитьСтрокуДереваРемонтныхРабот(ТекущаяСтрока.ID);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество <= 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
		МассивСтрокДляПолученияКоэффициента = Новый Массив;
		СписокУпаковок = Новый СписокЗначений;
		
		КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
		Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
		СтрТЧ.Количество = ТекСтрока.Количество;
		
		// Пересчет количества в строках, где упаковки не указаны, с одновременным заполением массива строк для заполнения количества по упаковкам.
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		// Пересчет количества в строках с упаковками
		Если МассивСтрокДляПолученияКоэффициента.Количество() > 0 Тогда
			СоответсвиеУпаковокИКоэффициентов = ПолучитьКоэффициентУпаковкиНаСервере(СписокУпаковок);	
			Для каждого Строка Из МассивСтрокДляПолученияКоэффициента Цикл
				Коэффициент = СоответсвиеУпаковокИКоэффициентов.Получить(Строка.ЕдиницаИзмерения);
				Если Коэффициент = Неопределено Тогда
					Коэффициент = 1;
				КонецЕсли; 
				Строка.КоличествоЕдиниц = Строка.Количество * Коэффициент;
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДоговорБригада = Неопределено;
		УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(ТекущиеДанные.Исполнитель, ТекущиеДанные.РемонтыОборудования_ID);
	КонецЕсли;
	
	Если ФильтрПоИсполнителямАктивирован Тогда
		ДеревоРРЗаполнитьПолеДляФильтраПриИзмененииИсполнителяНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьПараметрыВыбораИсполнителя_ДляРемонтныхРабот(ТекущиеДанные.РемонтыОборудования_ID);
		УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(ТекущиеДанные.Исполнитель, ТекущиеДанные.РемонтыОборудования_ID);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Ложь;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		
		НеЗаполненаРемонтнаяРабота = ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.РемонтнаяРабота);
		
		Если Не ОтменаРедактирования И НеЗаполненаРемонтнаяРабота Тогда
			
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
			
			Если РодительСтроки = Неопределено Тогда
				КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Иначе
				КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
			КонецЕсли;
			
			КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
		И Не ТекущиеДанные.РемонтнаяРабота.Пустая() Тогда
		
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
				
		ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если РодительСтроки = Неопределено Тогда
			КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ТекущийРемонт_ID", ?(ТекущийРемонт = Неопределено, "", ТекущийРемонт.ID)); 
		ДанныеСтроки.Вставить("СтрокаРодитель_ID", РодительСтроки.ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРемонтыОборудования_ID", РодительСтроки.РемонтыОборудования_ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРодитель_ID", РодительСтроки.Родитель_ID);  
					
		ДеревоРемонтныхРаботОбработкаВыбораСервер(ТекущиеДанные.РемонтнаяРабота, ДанныеСтроки);
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
				
		РодительСтроки = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоРемонтныхРабот.ПолучитьЭлементы(), "ID", РодительСтроки.ID);
		КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		ИндексПоследнегоЭлементаРодителя = КоллекцияЭлементовРодителя.Количество() - 1;
		
		ДобавленныйЭлемент = КоллекцияЭлементовРодителя.Получить(ИндексПоследнегоЭлементаРодителя);
		
		Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ДобавленныйЭлемент.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "МатериальныеЗатратыЕстьАналоги" Тогда
		ПодобратьАналогиНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		Элемент.ТекущиеДанные.Качество = ПредопределенноеЗначение("Перечисление.ГрадацииКачества.Новый");
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Номенклатура,Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данная номенклатура уже добавлена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ФОИспользоватьАналоги И НЕ ОтменаРедактирования Тогда
		ТекСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		ОтметитьНаличиеАналогов(ТекСтрока.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыЗаказНаВнПотребление

&НаКлиенте
Процедура ДокументыЗаказНаВнПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДокументыЗаказНаВнПотребление",ЭтаФорма);
		ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗаказНаВнПотреблениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭлементТекДанные  = Элемент.ТекущиеДанные;
		Если Не ЭлементТекДанные = Неопределено Тогда
			ЭлементТекДанные.РемонтыОборудования_ID = ТекущиеДанные.ID;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекстПредупреждения = НСтр("ru = 'Трудовые затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекТрудовыеЗатраты = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекТрудовыеЗатраты.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		ТекТрудовыеЗатраты.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("Квалификация,ID,РемонтыОборудования_ID",Элемент.ТекущиеДанные.Квалификация,Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данная квалификация уже добавлена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТекДанные.ВремяРаботы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
			ТекДанные.ВремяРаботы = ВыбранноеЗначение;
			ТекДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", Новый Структура("ПродолжительностьВСекундах", ТекДанные.ВремяРаботы), Элементы.ТрудовыеЗатраты,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМерыБезопасности

&НаКлиенте
Процедура МерыБезопасностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрокаДереваРемонтныхРабот = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекСтрокаДереваРемонтныхРабот.РемонтнаяРабота) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru='Меры безопасности можно добавлять только для технологических операций!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.МерыБезопасности.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,МераБезопасности",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.МераБезопасности)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данная мера безопасности уже добавлена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструменты

&НаКлиенте
Процедура ИнструментыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.Инструменты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Инструмент",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Инструмент)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данный инструмент уже добавлен.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.Инструменты.ТекущиеДанные.Инструмент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Инструменты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиПоРемонтам

&НаКлиенте
Процедура ИсполнителиПоРемонтамПриАктивизацииСтроки(Элемент)
	
	УстановитьВидимостьКнопокСменыСтатусаДляТекущегоИсполнителяРемонта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьПараметрыВыбораДоговораБригады(ТекущиеДанные.Исполнитель, Элементы.ИсполнителиПоРемонтамУточнениеИсполнителя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
			Если СтрокаРемонта <> Неопределено Тогда
				ТекущиеДанные.РемонтыОборудования_ID = СтрокаРемонта.ID;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиИсполнителей(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		Отказ = Истина;
		
		ШаблонВопроса = НСтр("ru = 'Исполнитель %1 указан для ремонтной работы. При изменении данный исполнитель будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.Исполнитель);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, МассивСтрокДереваРР", ТекущиеДанные, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамПередУдалениемПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередУдалениемПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, Исполнитель", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.Исполнитель);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Модифицированность = Истина;
		Объект.ИсполнителиПоРемонтам.Удалить(ТекущиеДанные);
		
		СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
		РемонтыОборудованияПроверитьФильтрПоИсполнителюДляРемонта(ЭтаФорма, СтрокаРемонта);
		
		Если ФильтрПоИсполнителямАктивирован Тогда
			ДеревоРРЗаполнитьПолеДляФильтраНаКлиенте(ДеревоРемонтныхРабот, Истина);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) ИЛИ ТекущиеДанные.Исполнитель = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиИсполнителей(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ШаблонВопроса = НСтр("ru = 'Исполнитель %1 указан для ремонтной работы. При изменении данный исполнитель будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.Исполнитель);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИсполнительНовый, МассивСтрокДереваРР", ТекущиеДанные, ВыбранноеЗначение, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамИсполнительОбработкаВыбораПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОбработкаВыбораПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ИсполнительНовый = ДополнительныеПараметры.ИсполнительНовый;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, Исполнитель", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.Исполнитель);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		ТекущиеДанные.Исполнитель = ИсполнительНовый;
		ИсполнителиПоРемонтамИсполнительПриИзменении(Элементы.ИсполнителиПоРемонтам);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	ИсполнителиПоРемонтамИсполнительОбработкаВыбора(Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		// Если сделать так, то вызывается событие ОбработкаВыбора, в противном случае - не вызывается. 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.УточнениеИсполнителя = Неопределено;
		торо_Ремонты.ЗаполнитьУточнениеИсполнителя(ТекущиеДанные.Исполнитель, ТекущиеДанные.УточнениеИсполнителя); 
		УстановитьПараметрыВыбораДоговораБригады(ТекущиеДанные.Исполнитель, Элементы.ИсполнителиПоРемонтамУточнениеИсполнителя);
		
		СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
		РемонтыОборудованияПроверитьФильтрПоИсполнителюДляРемонта(ЭтаФорма, СтрокаРемонта);
		УстановитьВидимостьКнопокСменыСтатусаДляТекущегоИсполнителяРемонта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрТекущаяСтрока", ТекДанные.УточнениеИсполнителя);
		ПараметрыФормы.Вставить("Подразделение", ТекДанные.Исполнитель);
		ПараметрыФормы.Вставить("РемонтыОборудования_ID", ТекДанные.РемонтыОборудования_ID);
		ПараметрыФормы.Вставить("ТрудовыеЗатраты", Объект.ТрудовыеЗатраты);
		
		ОткрытьФорму("Справочник.торо_РемонтныеБригады.Форма.ФормаПодбораБригад", ПараметрыФормы, Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.УточнениеИсполнителя) ИЛИ ТекущиеДанные.УточнениеИсполнителя = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиДоговораБригады(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ШаблонВопроса = НСтр("ru = 'Договор/бригада %1 указан для ремонтной работы. При изменении данный договор/бригада будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.УточнениеИсполнителя);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИсполнительНовый, МассивСтрокДереваРР", ТекущиеДанные, ВыбранноеЗначение, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбораПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбораПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ИсполнительНовый = ДополнительныеПараметры.ИсполнительНовый;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, ДоговорБригада", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.УточнениеИсполнителя);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Модифицированность = Истина;
		ТекущиеДанные.УточнениеИсполнителя = ИсполнительНовый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОчистка(Элемент, СтандартнаяОбработка)
	
	ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбора(Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		// Если сделать так, то вызывается событие ОбработкаВыбора, в противном случае - не вызывается. 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяПриИзменении(Элемент)
	
	УстановитьВидимостьКнопокСменыСтатусаДляТекущегоИсполнителяРемонта();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчастиРемонта

&НаКлиенте
Процедура ЗапчастиРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать ремонт, для которого заполняется список запчастей!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		Элемент.ТекущиеДанные.Качество = ПредопределенноеЗначение("Перечисление.ГрадацииКачества.Новый");
		ТекСтрокаДереваРемонтныхРабот = Элементы.РемонтыОборудования.ТекущиеДанные;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.ID;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.ЗапчастиРемонта.НайтиСтроки(Новый Структура("ХарактеристикаНоменклатуры,Номенклатура,РемонтыОборудования_ID",Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры,Элемент.ТекущиеДанные.Номенклатура,Элемент.ТекущиеДанные.РемонтыОборудования_ID)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данная запчасть уже добавлена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.ЗапчастиРемонта.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗапчастиРемонта.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.ЗапчастиРемонта.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.ЗапчастиРемонта.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.ЗапчастиРемонта.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.ЗапчастиРемонта.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаХарактеристикаНоменклатурыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ЗапчастиРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаХарактеристикаНоменклатурыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ЗапчастиРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрываемыеПредписания

&НаКлиенте
Процедура ЗакрываемыеПредписанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;

	ПодборЗакрываемыхПредписаний(Команды.Найти("ПодборЗакрываемыхПредписаний"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРО = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекущиеДанныеРО = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран ремонт для прикрепления предписаний!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДокументыОснованияОтбор = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВыбранноеЗначение.ДокументОснование));
	Если ДокументыОснованияОтбор.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Выбранное внешнее основание уже имеется в документах-основаниях!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗакрываемыеПредписанияОбработкаВыбораСервер(ВыбранноеЗначение);
	
	Для каждого Строка Из Объект.МатериальныеЗатраты Цикл
		Строка.ХарактеристикиИспользуются = ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры);
	КонецЦикла;
	
	ОбновитьНадписиВремениРаботы();
	Модифицированность = Истина;
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина); 
	
КонецПроцедуры

&НаСервере
Процедура ЗакрываемыеПредписанияОбработкаВыбораСервер(ВыбранноеЗначение)
	
	торо_Ремонты.ЗакрываемыеПредписанияОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗакрываемыеПредписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументВнешнегоОснования) И Поле.Имя = "ЗакрываемыеПредписанияДокументВнешнегоОснования" Тогда
		СтруктураПараметров = Новый Структура("Ключ", Элемент.ТекущиеДанные.ДокументВнешнегоОснования);
		ОткрытьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаОбъекта", СтруктураПараметров);		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрываемыеПредписанияПередУдалениемЗавершение",
			ЭтаФорма), Вопрос, РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияПередУдалениемЗавершение(Результат, ДопПараметры) Экспорт
	ТекДанные = Элементы.ЗакрываемыеПредписания.ТекущиеДанные;
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтрокиДокОснования = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументВнешнегоОснования));
		Если СтрокиДокОснования.Количество() <> 0 Тогда
			Для Каждого СтрокаДокумента Из СтрокиДокОснования Цикл
				ОчиститьСвязанныеТабличныеЧасти(СтрокаДокумента.ДокументОснование);
				Объект.ДокументыОснования.Удалить(СтрокаДокумента);
			КонецЦикла; 
			Если ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество() Тогда 
				Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда 
				ТекстСообщения = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				Если СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено Тогда
					СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
					Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
						Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
						СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
						ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)   	
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 	
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		
		РазрешитьУдаление = Истина;
		Если Объект.Проведен И ФОИспользоватьОстановочные Тогда 
			РазрешитьУдаление = ПроверитьВозможностьУдаленияРемонтов(Неопределено, Элемент.ТекущиеДанные.ДокументОснование);
		КонецЕсли;
		
		Если НЕ РазрешитьУдаление Тогда
			Возврат;
		КонецЕсли;
		
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийДокументОснование = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	
	Если ТекущийДокументОснование = Неопределено Тогда
		СписокВыбора = торо_ЗаполнениеДокументов.СформироватьСписокВыбораТипаДокументаОснования(Объект.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент", Элемент));
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбор типа данных'"));
	Иначе
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ТипЗнч(ТекущийДокументОснование), ТекущийДокументОснование, Элемент, ЭтаФорма.КлючУникальности);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ДополнительныеПараметры.Элемент;
	торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ВыбранныйЭлемент.Значение, Неопределено, Элемент, ЭтаФорма.КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Элементы.ЗакрываемыеПредписания.ОтборСтрок = Новый ФиксированнаяСтруктура("ДокументВнешнегоОснования", Элемент.ТекущиеДанные.ДокументОснование);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ДобавитьЗаказ(Команда)
		
	Если Объект.РемонтыОборудования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаказВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования заказа необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе 
		ДобавитьЗаказПослеВопроса();	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйДокументВнутреннееПотребление(Команда)
	
	Если НЕ Объект.Проведен Тогда 
		
		ТекстСообщения = НСтр("ru = 'Заказ на внутреннее потребление можно формировать только на основании проведенной заявки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если Объект.РемонтыОборудования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСводныйЗаказВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования заказа необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		ДобавитьСводныйЗаказПослеВопроса();	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт <> Неопределено И ЗначениеЗаполнено(ТекущийРемонт.ДатаНачала) Тогда 
		ДатаОтбора = ТекущийРемонт.ДатаНачала;
	Иначе
		ДатаОтбора = ТекущаяДата();
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", 
		Новый Структура("МножественныйВыбор, ДатаОтбора, Отбор", Истина, ДатаОтбора, 
		Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"))), 
		Элементы.ДеревоРемонтныхРабот);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ДокументыОснования = Новый СписокЗначений;
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ДокументыОснования.Добавить(СтрокаДО.ДокументОснование);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ДокументыОснования", ДокументыОснования);
	
	ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот", 
				ПараметрыФормы, Элементы.РемонтыОборудования, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрРемонтов(Команда)
	
	ПараметрыФормы = Новый Структура("Исполнители", МассивИсполнителейДляФильтра);
	ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.Форма.ФормаФильтра",ПараметрыФормы,,,ВариантОткрытияОкна.ОтдельноеОкно,,Новый ОписаниеОповещения("ВыборИсполнителейДляФильтраЗавершение",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	ФильтрПоИсполнителямАктивирован = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьФильтрРемонтов(Команда)
	ОтключитьФильтрНаСервере();
	МассивИсполнителейДляФильтра.Очистить();
	ФильтрПоИсполнителямАктивирован = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОтключитьФильтрНаСервере()
	Для каждого Элемент Из ЭтаФорма.УсловноеОформление.Элементы Цикл
	
		Если Элемент.Представление = "ВидимостьРемонта" ИЛИ Элемент.Представление = "ВидимостьРемонтнойРаботы" Тогда			
			Элемент.Использование = Ложь;			
		КонецЕсли; 
	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказНаВнПотребление(Команда)
	
	ТекущиеДанные = Элементы.ДокументыЗаказНаВнПотребление.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗаказСсылка", ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID", ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,НСтр("ru = 'Удаление связи с заказом на внутреннее потребление'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор, ЗакрыватьПриВыборе", Истина, Ложь), Элементы.ДеревоРемонтныхРабот);

КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ИначеЕсли Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаИнструменты Тогда
		ТекстПредупреждения = НСтр("ru = 'Инструменты можно указывать только для технологических операций!'");
	Иначе
		//ТекстПредупреждения = НСтр("ru = 'Запчасти можно указывать только для технологических операций!'");
	КонецЕсли;
	
	Если Элементы.ПанельЗатрат.ТекущаяСтраница <> Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаЗапчасти Тогда
		ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	КонецЕсли;
		
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор номенклатуры'"));
	Иначе
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор инструментов и техники'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	Если Не Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено И Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаЗапчасти Тогда
	    ОбъектРемонта = Элементы.РемонтыОборудования.ТекущиеДанные.ОбъектРемонта;
		МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);
		
		МассивТиповЗапчастей = Новый Массив();
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		
		ПараметрыФормы.Вставить("ОтборНоменклатуры", МассивЗапчастей);
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", МассивТиповЗапчастей);
	КонецЕсли;
	
	Склад = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад");
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Склад) И Не ТекущиеДанные = Неопределено Тогда
	    Склад = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОбъектРемонта, "СкладОбеспеченияМТР", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Склад", Склад);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЛотов(Команда)
	
	ЗаполнитьИзЛотовНаСервере();
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоНормамВремениТехОпераций(Команда)
	Если Объект.РемонтыОборудования.Количество() = 0 тогда
		Возврат;
	КонецЕсли;

	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Укажите ремонт для ввода продолжительности.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Элементы.РемонтыОборудования.ВыделенныеСтроки.Количество() = 1 Тогда
		
		НормаВремени = РассчитатьПродолжительностьПоОперациям();
		График = ГрафикРемонтаОР(ТекДанные.ОбъектРемонта, ТекДанные.ВидРемонтныхРабот);
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда 
			ТекДанные.ДатаНачала = Объект.Дата;
		КонецЕсли;
		
		ТекДанные.ДатаОкончания = РасчетОкончанияРемонта(График, ТекДанные.ДатаНачала, НормаВремени);
		Если ТекДанные.ДатаОкончания = '00010101' Тогда
			ТекстСообщения = НСтр("ru = 'На данный период не задан график работы.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		МассивРемонтов = Новый Массив;		
		Для каждого ТекСтрока Из Элементы.РемонтыОборудования.ВыделенныеСтроки Цикл 
			МассивРемонтов.Добавить(Объект.РемонтыОборудования.НайтиПоИдентификатору(ТекСтрока));
		КонецЦикла; 
		
		Для каждого ТекРемонт Из МассивРемонтов Цикл 
			
			Если НЕ ЗначениеЗаполнено(ТекРемонт.ДатаНачала) Тогда
				ТекДанные.ДатаНачала = Объект.Дата;
			КонецЕсли;
			
			торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекРемонт.ID);
			
			НормаВремени = РассчитатьПродолжительностьПоОперациям();
			График = ГрафикРемонтаОР(ТекРемонт.ОбъектРемонта, ТекРемонт.ВидРемонтныхРабот);
			
			ТекРемонт.ДатаОкончания = РасчетОкончанияРемонта(График, текРемонт.ДатаНачала, НормаВремени);
			Если ТекРемонт.ДатаОкончания = '00010101' Тогда
				ТекстСообщения = НСтр("ru = 'На данный период не задан график работы.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоПродолжительностиТрудозатрат(Команда)
	Если Объект.РемонтыОборудования.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Укажите ремонт для ввода продолжительности.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивРемонтов = Новый Массив;		
	Для каждого ТекСтрока Из Элементы.РемонтыОборудования.ВыделенныеСтроки Цикл 
		МассивРемонтов.Добавить(Объект.РемонтыОборудования.НайтиПоИдентификатору(ТекСтрока));
	КонецЦикла; 
	
	Для каждого ТекРемонт Из МассивРемонтов Цикл 
		Если НЕ ЗначениеЗаполнено(ТекРемонт.ДатаНачала) Тогда
			ТекДанные.ДатаНачала = Объект.Дата;
		КонецЕсли;
		
		НормаВремени = РассчитатьПродолжительностьПоТрудозатратам(ТекРемонт.ID);
		График = ГрафикРемонтаОР(ТекРемонт.ОбъектРемонта, ТекРемонт.ВидРемонтныхРабот);
		
		ТекРемонт.ДатаОкончания = РасчетОкончанияРемонта(График, текРемонт.ДатаНачала, НормаВремени);
		Если ТекРемонт.ДатаОкончания = '00010101' Тогда
			ТекстСообщения = НСтр("ru = 'На данный период не задан график работы.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоПродолжительностиОперацийРемонтов(Команда)
	Если Объект.РемонтыОборудования.Количество() = 0 тогда
		Возврат;
	КонецЕсли;

	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Укажите ремонт для ввода продолжительности.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Элементы.РемонтыОборудования.ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда 
			ТекДанные.ДатаНачала = Объект.Дата;
		КонецЕсли;
		
		НормаВремени = РассчитатьПродолжительностьПоОперациям(Истина, ТекДанные.ДатаНачала);
		График = ГрафикРемонтаОР(ТекДанные.ОбъектРемонта, ТекДанные.ВидРемонтныхРабот);
		
		ТекДанные.ДатаОкончания = РасчетОкончанияРемонта(График, ТекДанные.ДатаНачала, НормаВремени);
		Если ТекДанные.ДатаОкончания = '00010101' Тогда
			ТекстСообщения = НСтр("ru = 'На данный период не задан график работы.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		
		МассивРемонтов = Новый Массив;		
		Для каждого ТекСтрока Из Элементы.РемонтыОборудования.ВыделенныеСтроки Цикл 
			МассивРемонтов.Добавить(Объект.РемонтыОборудования.НайтиПоИдентификатору(ТекСтрока));
		КонецЦикла; 
		
		Для каждого ТекРемонт Из МассивРемонтов Цикл 
			
			Если НЕ ЗначениеЗаполнено(ТекРемонт.ДатаНачала) Тогда
				ТекДанные.ДатаНачала = Объект.Дата;
			КонецЕсли;
			
			торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекРемонт.ID);
			
			НормаВремени = РассчитатьПродолжительностьПоОперациям(Истина, ТекДанные.ДатаНачала);
			График = ГрафикРемонтаОР(ТекРемонт.ОбъектРемонта, ТекРемонт.ВидРемонтныхРабот);
			
			ТекРемонт.ДатаОкончания = РасчетОкончанияРемонта(График, текРемонт.ДатаНачала, НормаВремени);
			Если ТекРемонт.ДатаОкончания = '00010101' Тогда
				ТекстСообщения = НСтр("ru = 'На данный период не задан график работы.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПродолжительность(Команда)
	
	Если Объект.РемонтыОборудования.Количество() = 0 тогда
		Возврат;
	КонецЕсли;

	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Укажите ремонт для ввода продолжительности.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для рассчета продолжительности ремонта необходимо указать дату начала ремонта.'"));
	Иначе
		ФормаПодбораПродолжительности = ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", , Элементы.РемонтыОборудования, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПродолжительностьСУчетомГрафика(Команда)
	
	Если Объект.РемонтыОборудования.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Укажите ремонт для ввода продолжительности.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивРемонтов = Новый Массив;		
	Для каждого ТекСтрока Из Элементы.РемонтыОборудования.ВыделенныеСтроки Цикл 
		МассивРемонтов.Добавить(Объект.РемонтыОборудования.НайтиПоИдентификатору(ТекСтрока));
	КонецЦикла; 
	
	СтруктураПередаваемыхПараметров = Новый Структура;
	СтруктураПередаваемыхПараметров.Вставить("МассивРемонтов", МассивРемонтов);
	ОписаниеОповещения = Новый ОписаниеОповещения("РасчитатьОкончаниеРемонтаСУчетомГрафика", ЭтаФорма, СтруктураПередаваемыхПараметров);
	ФормаПодбораПродолжительности = ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", , ЭтаФорма, Объект.Ссылка,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказПодразделения(Команда)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) 
		ИЛИ ТипЗнч(ТекущиеДанные.Исполнитель) <> Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	СтатусРемонта = ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ОтказПодразделения");
	УстановитьОтказ(СтатусРемонта, ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказИсполнителя(Команда)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.УточнениеИсполнителя) 
		ИЛИ ТипЗнч(ТекущиеДанные.УточнениеИсполнителя) <> Тип("СправочникСсылка.торо_РемонтныеБригады") Тогда
		Возврат;
	КонецЕсли;
	
	СтатусРемонта = ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ОтказИсполнителя");
	УстановитьОтказ(СтатусРемонта, ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.Исполнитель, ТекущиеДанные.УточнениеИсполнителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьРемонтВРаботуИсполнителю(Команда)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) 
		ИЛИ ТипЗнч(ТекущиеДанные.Исполнитель) <> Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИДРемонта", ТекущиеДанные.РемонтыОборудования_ID);
	ДополнительныеПараметры.Вставить("Подразделение", ТекущиеДанные.Исполнитель);
	ДополнительныеПараметры.Вставить("Бригада", ТекущиеДанные.УточнениеИсполнителя);
	ДополнительныеПараметры.Вставить("СтатусРемонта", ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ВозобновленоПослеОтказа"));
	ДополнительныеПараметры.Вставить("КомментарийОбязателен", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияКСтатусуРемонтаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, , НСтр("ru='Комментарий к возврату'"), , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МОР(Команда)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		МассивВыбранныхЗначений = Новый Массив;
		
		МассивСтрокДляРемонта = Объект.РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущиеДанные.ID)); 			
		
		Для каждого Строка Из МассивСтрокДляРемонта Цикл
			СтруктураВыбранных = Новый Структура;
			СтруктураВыбранных.Вставить("ОбъектВоздействия", Строка.ОбъектВоздействия);
			СтруктураВыбранных.Вставить("КатегорияРиска", Строка.КатегорияРиска);
			МассивВыбранныхЗначений.Добавить(СтруктураВыбранных);
		КонецЦикла; 	
		
		ОткрытьФорму("Обработка.торо_МатрицаОценкиРисков.Форма.ФормаПодбора",
						Новый Структура("ID_Ремонта, МассивВыбранныхЗначений, КлючНазначенияИспользования",  ТекущиеДанные.ID, МассивВыбранныхЗначений, "ПодборКатегорииРискаВЗаявку"), 
						Элементы.РемонтыОборудования,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсторияИзмененияДатРемонта(Команда)
	
	МассивID = Новый Массив;
	
	Для каждого РемонтОборудования Из Объект.РемонтыОборудования Цикл
		МассивID.Добавить(РемонтОборудования.ID);
	КонецЦикла;
	
	Если МассивID.Количество() = 0 Тогда
	    ТекстСообщения = НСтр("ru = 'Невозможно сформировать отчет, так как таблица ремонтов пустая!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("IDРемонта", МассивID));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоПериоду", Ложь);
	ОткрытьФорму("Отчет.торо_ИсторияИзмененияДатРемонта.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗакрываемыхПредписаний(Команда)
	
	ТекДанныеРемОборуд = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанныеРемОборуд = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран ремонт оборудования.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписанийОпераций",
	Новый Структура("ОбъектРемонтаДляОтбора", ТекДанныеРемОборуд.ОбъектРемонта), Элементы.ЗакрываемыеПредписания, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМестоположение(Команда)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыМестоположения", ЭтотОбъект, Новый Структура("ID_Ремонта, ОбъектРемонта", ТекущиеДанные.ID, ТекущиеДанные.ОбъектРемонта));
		ОткрытьФорму("ОбщаяФорма.торо_ФормаМестоположения", Новый Структура("ОбъектРемонта, Высота, Долгота, Широта, ТолькоПросмотр", ТекущиеДанные.ОбъектРемонта, ТекущиеДанные.Высота, ТекущиеДанные.Долгота, ТекущиеДанные.Широта, НЕ ПравоРедактирование), 
		Элементы.РемонтыОборудования,,,, Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Согласование

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

#КонецОбласти

#Область Аналоги

&НаСервере
Процедура ЗаменитьМатериалыНаАналоги(АдресВХранилище, Отказ = Ложь)
	
	ЗначенияРеквизитовНовыхСтрок = Новый Структура;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МассивКлючей						= Новый Массив;
	МассивУдаляемыхСтрок				= Новый Массив;
	ИзменяемыеСтроки					= Новый Соответствие;
	СтруктураОтбора						= Новый Структура;
	
	НаборыМатериалов					= ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Проверяем возможность применения замены.
	
	Для Каждого СтрокаМатериал из НаборыМатериалов.Материалы Цикл
		
		СтруктураОтбора.Вставить("ID",СтрокаМатериал.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаМатериал.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаМатериал.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Не найдено строки с материалом: %1, %2.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураОтбора.Номенклатура, СтруктураОтбора.ХарактеристикаНоменклатуры);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Продолжить;
		КонецЕсли;
		
		СтрокаМатЗатрат = НайденныеСтроки[0];
		
		Если СтрокаМатЗатрат.Количество < СтрокаМатериал.Количество Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка применения аналога. Материала ""%1""недостаточно для замены.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаМатЗатрат.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаМатЗатрат.Количество = СтрокаМатериал.Количество Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаМатЗатрат);
		Иначе
			ИзменяемыеСтроки.Вставить(СтрокаМатЗатрат,Новый Структура("КоличествоЕдиниц,Количество",СтрокаМатЗатрат.КоличествоЕдиниц - СтрокаМатериал.Количество,СтрокаМатЗатрат.Количество - СтрокаМатериал.КоличествоУпаковок));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление строк или изменение количества.
	//
	Для Каждого СтрокаМатЗатрат из МассивУдаляемыхСтрок Цикл
		Объект.МатериальныеЗатраты.Удалить(СтрокаМатЗатрат);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ИзменяемыеСтроки Цикл
		КлючИЗначение.Ключ.Количество = КлючИЗначение.Значение.Количество;
		КлючИЗначение.Ключ.КоличествоЕдиниц = КлючИЗначение.Значение.КоличествоЕдиниц;
	КонецЦикла;
	
	// Добавление новых строк
	Для Каждого СтрокаАналога ИЗ НаборыМатериалов.Аналоги Цикл
		СтруктураОтбора.Вставить("ID",СтрокаАналога.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаАналога.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаАналога.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаАналога.ХарактеристикаНоменклатуры);
		
		МассивСтрок = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаНоменклатуры = МассивСтрок[0];
			СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.Количество + СтрокаАналога.Количество;
			СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаНоменклатуры.КоличествоЕдиниц + СтрокаАналога.КоличествоЕдиниц;
		Иначе
			СтрокаНоменклатуры = Объект.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаАналога);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналогиНаКлиенте()
	СтрокаНоменклатуры = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если СтрокаНоменклатуры <> Неопределено И СтрокаНоменклатуры.ЕстьАналоги Тогда
		СтрокаРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.РемонтыОборудования_ID))[0];
		СтрокаРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.ID))[0];
		
		МассивСтрокРРТехКарта = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаРР.Родитель_ID));
		Если МассивСтрокРРТехКарта.Количество() Тогда
			ТехКарта = МассивСтрокРРТехКарта[0].РемонтнаяРабота;
		Иначе
			ТехКарта = ПредопределенноеЗначение("Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка");
		КонецЕсли;
		
		МассивИсполнителей = Новый Массив;
		СтрокиИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID",СтрокаНоменклатуры.РемонтыОборудования_ID));
		Для Каждого СтрокаИсполнителя Из СтрокиИсполнителей Цикл
			МассивИсполнителей.Добавить(СтрокаИсполнителя.Исполнитель);
		КонецЦикла;
		
		СтруктураПараметров = (Новый Структура(
		"ID,РемонтыОборудования_ID,Номенклатура,
		|ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КоличествоЕдиниц
		|,Количество, ОбъектРемонта, ВидРемонта,
		|ПодразделениеИсполнитель, ТехКарта, ДатаРемонта",
		СтрокаНоменклатуры.ID,СтрокаНоменклатуры.РемонтыОборудования_ID,СтрокаНоменклатуры.Номенклатура,
		СтрокаНоменклатуры.ХарактеристикаНоменклатуры,СтрокаНоменклатуры.ЕдиницаИзмерения,СтрокаНоменклатуры.КоличествоЕдиниц,
		СтрокаНоменклатуры.Количество,СтрокаРемонта.ОбъектРемонта,СтрокаРемонта.ВидРемонтныхРабот,
		МассивИсполнителей,ТехКарта,СтрокаРемонта.ДатаНачала));
		
		ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораАналогаНоменклатурыДляРемонта",СтруктураПараметров,ЭтаФорма,Объект.Ссылка,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтметитьНаличиеАналогов(МассивКлючей = Неопределено)
	
	МВТ = торо_МТОСервер.ПодготовитьВременнуюТаблицуДляПроверкиАналогов(Объект, МассивКлючей);
	Выборка = торо_МТОСервер.ВернутьЗаписиСАналогами(МВТ);
	
	Если ТипЗнч(МассивКлючей) = Тип("Строка") Тогда
		СтрокиДляОбработки = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", МассивКлючей));
	ИначеЕсли ТипЗнч(МассивКлючей) = Тип("Массив") Тогда
		СтрокиДляОбработки = Новый Массив;
		Для каждого Ключ из МассивКлючей Цикл
			НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", Ключ));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, НайденныеСтроки);
		КонецЦикла;
	Иначе
		СтрокиДляОбработки = Объект.МатериальныеЗатраты;
	КонецЕсли;
	
	Для каждого Строка из СтрокиДляОбработки Цикл
		Строка.ЕстьАналоги = Ложь;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ID,РемонтыОборудования_ID");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска);
		НайденныеСтроки[0].ЕстьАналоги = Выборка.ЕстьАналоги;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Продолжительность 

// Функция рассчитывает продолжительность ремонта по продолжительностям операций и ремонтов табличной части "СписокОпераций".
//
&НаСервере 
Функция РассчитатьПродолжительностьПоОперациям(ПоНормамТО = Ложь, ДатаРемонта = Неопределено)
	
	Продолжительность = 0; 
	
	Если ПоНормамТО Тогда
		
		Строки = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы();
		
		Для Каждого СтрокаОпераций Из Строки Цикл
			Если ТипЗнч(СтрокаОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда 
				ТехнолКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаОпераций.РемонтнаяРабота, ДатаРемонта);
				Продолжительность = Продолжительность + ТехнолКарта.НормаВремени;
			Иначе 
				Продолжительность = Продолжительность + СтрокаОпераций.РемонтнаяРабота.НормаВремени;
			КонецЕсли;
		КонецЦикла;
	
	Иначе
		
		Для Каждого СтрокаОпераций Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
			
			Если ТипЗнч(СтрокаОпераций.РемонтнаяРабота) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				РассчитатьПродолжительностьПоОперациямРекурсивно(СтрокаОпераций, Продолжительность);
			Иначе
				Продолжительность = Продолжительность + СтрокаОпераций.РемонтнаяРабота.НормаВремени;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Продолжительность;
	
КонецФункции

&НаСервере 
Функция РассчитатьПродолжительностьПоОперациямРекурсивно(Операции, Продолжительность = 0)
		
		Для Каждого СтрокаОпераций Из Операции.ПолучитьЭлементы() Цикл
			
			Если ТипЗнч(СтрокаОпераций.РемонтнаяРабота) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				РассчитатьПродолжительностьПоОперациямРекурсивно(СтрокаОпераций, Продолжительность);
			Иначе
				Продолжительность = Продолжительность + СтрокаОпераций.РемонтнаяРабота.НормаВремени;
			КонецЕсли;
			
		КонецЦикла;
	
	Возврат Продолжительность;
	
КонецФункции

// Функция рассчитывает продолжительность ремонта по продолжительностям трудозатрат.
//
&НаСервере
Функция РассчитатьПродолжительностьПоТрудозатратам(РемонтыОборудования_ID)
	
	Продолжительность = 0;
	СтрокиРемонта = Объект.ТрудовыеЗатраты.Выгрузить(Новый структура("РемонтыОборудования_ID", РемонтыОборудования_ID));
	
	Для Каждого СтрокаТЧ Из СтрокиРемонта Цикл
		Продолжительность = Продолжительность + СтрокаТЧ.ВремяРаботы*СтрокаТЧ.Количество;
	КонецЦикла; 
	
	Возврат Продолжительность;
	
КонецФункции

// Функция получает график ремонта (ремонтной бригады) в зависимости от объекта ремонта и вида ремонта.
//
&НаСервере
Функция ГрафикРемонтаОР(ОР,ВидРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот,
	               |	ВЫБОР
	               |		КОГДА торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |ГДЕ
	               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОР
	               |	И торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
	
	Запрос.УстановитьПараметр("ОР",ОР);
	Запрос.УстановитьПараметр("ВидРемонта",ВидРемонта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	Если Выборка.Количество()>0 Тогда
		Возврат Выборка[0].ГрафикРемонтныхРабот;
	Иначе
		Возврат Константы.торо_ГрафикРемонтныхРабот.Получить();
	КонецЕсли; 

КонецФункции

&НаСервере
Функция РасчетОкончанияРемонта(мГрафикРаботы,мДатаНачала,мПродолжительностьРемонта)
	
	ТекущаяДатаРемонта = мДатаНачала;
	ОставшаясяПродолжительность=мПродолжительностьРемонта;
	пВремяНачалаБлокаРемонтныхРабот = ТекущаяДатаРемонта - НачалоДня(ТекущаяДатаРемонта);
	
	Пока ОставшаясяПродолжительность > 0 Цикл
		МассивДат = Новый Массив;
		МассивДат.Добавить(ТекущаяДатаРемонта);
		ДатыРабочихДней = КалендарныеГрафики.ДатыБлижайшихРабочихДней(мГрафикРаботы, МассивДат);
		
		Если ДатыРабочихДней.Количество() >0 Тогда
			
			// Если рабочий день
			Если ДатыРабочихДней[НачалоДня(ТекущаяДатаРемонта)] = НачалоДня(ТекущаяДатаРемонта) Тогда 
				
				Выборка = ПолучитьСменыНаУказанныйДень(ТекущаяДатаРемонта,мГрафикРаботы).Выбрать();
				КоличествоОставшихсяСмен = Выборка.Количество();
				
				Пока КоличествоОставшихсяСмен <> 0 Цикл
					Выборка.Следующий();
					ПроверкаОкончанияСмены = Выборка.ВремяОкончания - '00010101'=86400;
					
					Если пВремяНачалаБлокаРемонтныхРабот < (Выборка.ВремяНачала - '00010101') Тогда
						// Сдвигаем текущую дату на начало этой смены.
						ТекущаяДатаРемонта = ТекущаяДатаРемонта + (Выборка.ВремяНачала - '00010101' - пВремяНачалаБлокаРемонтныхРабот);
						пВремяНачалаБлокаРемонтныхРабот = ТекущаяДатаРемонта - НачалоДня(ТекущаяДатаРемонта);
					КонецЕсли;
					
					Если пВремяНачалаБлокаРемонтныхРабот < (Выборка.ВремяОкончания - '00010101') Тогда
						
						пДлительностьБлока = Выборка.ВремяОкончания - '00010101' - пВремяНачалаБлокаРемонтныхРабот;
						
						Если ОставшаясяПродолжительность > пДлительностьБлока Тогда
							// Уменьшаем оставшуюся продолжительность на время смены и сдвигаем текущую дату на конец текущей смены.
							ОставшаясяПродолжительность = ОставшаясяПродолжительность - пДлительностьБлока;
							ТекущаяДатаРемонта = ТекущаяДатаРемонта + (Выборка.ВремяОкончания - '00010101' - пВремяНачалаБлокаРемонтныхРабот);
							пВремяНачалаБлокаРемонтныхРабот = ТекущаяДатаРемонта - НачалоДня(ТекущаяДатаРемонта);
						Иначе
							ТекущаяДатаРемонта = ТекущаяДатаРемонта + ОставшаясяПродолжительность;
							ОставшаясяПродолжительность = 0;
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					КоличествоОставшихсяСмен = КоличествоОставшихсяСмен - 1;
				КонецЦикла;
				Если КоличествоОставшихсяСмен = 0 и НЕ ПроверкаОкончанияСмены Тогда
					// Берем следующий день
					ТекущаяДатаРемонта = КонецДня(ТекущаяДатаРемонта) + 1;
					пВремяНачалаБлокаРемонтныхРабот = ТекущаяДатаРемонта - НачалоДня(ТекущаяДатаРемонта);
				КонецЕсли;
				
				// Если выходной
			Иначе  
				// Берем ближайший рабочий день
				ТекущаяДатаРемонта = ДатыРабочихДней[НачалоДня(ТекущаяДатаРемонта)]; 
				пВремяНачалаБлокаРемонтныхРабот = ТекущаяДатаРемонта - НачалоДня(ТекущаяДатаРемонта);
			КонецЕсли;
			
			// Если график не заполнен	
		Иначе 
			ТекущаяДатаРемонта = '00010101';
			Прервать;
			
		КонецЕсли;
	КонецЦикла; 
	Возврат ТекущаяДатаРемонта;
КонецФункции 

// Функция получает рабочие смены рем. бригады на указанный день руководствуясь указанным графиком работ.
//
&НаСервере
Функция ПолучитьСменыНаУказанныйДень(ДатаРемонта, мГрафикРаботы)
	
	МассивГрафиков = Новый Массив;
	МассивГрафиков.Добавить(мГрафикРаботы); 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу расписаний.
	ГрафикиРаботы.СоздатьВТРасписанияРаботыНаПериод(МенеджерВременныхТаблиц, МассивГрафиков, ДатаРемонта, ДатаРемонта);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасписанияРаботы.ГрафикРаботы,
	|	РасписанияРаботы.ДатаГрафика,
	|	РасписанияРаботы.ВремяНачала,
	|	РасписанияРаботы.ВремяОкончания
	|ИЗ
	|	ВТРасписанияРаботы КАК РасписанияРаботы";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура РасчитатьОкончаниеРемонтаСУчетомГрафика (Результат, ДополнительныеПараметры)Экспорт
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда 
		НормаВремени = Результат;
		
		Для каждого ТекРемонт Из ДополнительныеПараметры.МассивРемонтов Цикл 
			График = ГрафикРемонтаОР(ТекРемонт.ОбъектРемонта, ТекРемонт.ВидРемонтныхРабот);
			
			Если НЕ ЗначениеЗаполнено(ТекРемонт.ДатаНачала) Тогда 
				ТекРемонт.ДатаНачала = Объект.Дата;
			КонецЕсли;
			
			ТекРемонт.ДатаОкончания = РасчетОкончанияРемонта(График, ТекРемонт.ДатаНачала, НормаВремени);
			
			Если ТекРемонт.ДатаОкончания = '00010101' Тогда
				ТекстСообщения = НСтр("ru = 'На данный период не задан график работы.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиБСП

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СвязанныеДокументы

&НаСервере
Процедура ОбновитьЗависимыеЛоты()
	
	Если Константы.торо_ИспользоватьЛоты.Получить() Тогда
		МассивИДРемонтов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.РемонтыОборудования, "ID");
		МассивСвязанныхЛотов = торо_Ремонты.ПолучитьМассивIDЛотов(МассивИДРемонтов);
		МассивIDЛотов.ЗагрузитьЗначения(МассивСвязанныхЛотов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЗаказНаВнПотребление(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	 ОбновитьДокументыЗаказНаВнПотреблениеСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыЗаказНаВнПотреблениеСервер()
	
	Если Не ДоступныЗаказыНаВнутреннееПотребление Тогда
		Элементы.ГруппаЗаказыНаВнутреннееПотребление.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДокументыЗаказНаВнПотребление.Очистить();
	
	СписокID = Объект.РемонтыОборудования.Выгрузить(,"ID");
	Запрос  = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ЗаказНаВнутреннееПотребление,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументТОИР = &ЭтотДокумент
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЗаказИзЭтогоДокумента,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	торо_ИнтеграцияДокументов.ID КАК ID
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&СписокID)
	               |	И НЕ торо_ИнтеграцияДокументов.ДокументЕРП.ПометкаУдаления
	               |	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ЗаказНаВнутреннееПотребление)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	               |	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток КАК КОформлениюОстаток
	               |ПОМЕСТИТЬ Потребность
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
	               |			,
	               |			ЗаказНаВнутреннееПотребление В
	               |				(ВЫБРАТЬ
	               |					Документы.ЗаказНаВнутреннееПотребление
	               |				ИЗ
	               |					Документы)) КАК ЗаказыНаВнутреннееПотреблениеОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ Резервы
	               |ИЗ
	               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	               |			,
	               |			ЗаказНаВнутреннееПотребление В
	               |				(ВЫБРАТЬ
	               |					Документы.ЗаказНаВнутреннееПотребление
	               |				ИЗ
	               |					Документы)) КАК торо_РезервыНаСкладахОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	               |	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	               |	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ НаРуках
	               |ИЗ
	               |	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	               |			,
	               |			ЗаказНаВнутреннееПотребление В
	               |				(ВЫБРАТЬ
	               |					Документы.ЗаказНаВнутреннееПотребление
	               |				ИЗ
	               |					Документы)) КАК торо_ТоварыНаРукахОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Документы.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(Потребность.КОформлениюОстаток, 0) <= ЕСТЬNULL(Резервы.КоличествоОстаток, 0) + ЕСТЬNULL(НаРуках.КоличествоОстаток, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК Обеспечен,
	               |	Документы.ЗаказИзЭтогоДокумента КАК ЗаказИзЭтогоДокумента,
	               |	Документы.ИндексКартинки КАК ИндексКартинки,
	               |	Документы.ID КАК ID
	               |ИЗ
	               |	Документы КАК Документы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Потребность КАК Потребность
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Резервы КАК Резервы
	               |			ПО Потребность.ЗаказНаВнутреннееПотребление = Резервы.ЗаказНаВнутреннееПотребление
	               |				И Потребность.Номенклатура = Резервы.Номенклатура
	               |				И Потребность.Характеристика = Резервы.Характеристика
	               |			ЛЕВОЕ СОЕДИНЕНИЕ НаРуках КАК НаРуках
	               |			ПО Потребность.ЗаказНаВнутреннееПотребление = НаРуках.ЗаказНаВнутреннееПотребление
	               |				И Потребность.Номенклатура = НаРуках.Номенклатура
	               |				И Потребность.Характеристика = НаРуках.Характеристика
	               |		ПО Документы.ЗаказНаВнутреннееПотребление = Потребность.ЗаказНаВнутреннееПотребление
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Документы.ЗаказИзЭтогоДокумента,
	               |	Документы.ID,
	               |	Документы.ЗаказНаВнутреннееПотребление,
	               |	Документы.ИндексКартинки";
	Запрос.УстановитьПараметр("СписокID", СписокID);
	Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
	ДокументыЗаказНаВнПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьЗаказНаСервере(ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПометитьЗаказНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектЗаказ = СтруктураПараметров.ЗаказСсылка.ПолучитьОбъект();
		
		Если ОбъектЗаказ.Проведен Тогда
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектЗаказ.ПометкаУдаления = Истина;
		ОбъектЗаказ.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ЗаказСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
		
	Исключение
		
		СообщенияКВыводу = ПолучитьСообщенияПользователю();
		Если СообщенияКВыводу.Количество() > 0 Тогда
			Возврат Ложь;
		Иначе	
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;	
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ИнтеграцияДокументов.ДокументЕРП
		|ИЗ
		|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		|ГДЕ
		|	торо_ИнтеграцияДокументов.ID = &ID
		|	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		|	И торо_ИнтеграцияДокументов.ДокументЕРП  = &СсылкаНаДокЕРП";
		
		Запрос.УстановитьПараметр("ID",ДополнительныеПараметры.ТекущийРемонт_ID);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП", ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.ТекущийРемонт_ID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный(Результат, ДополнительныеПараметры) Экспорт
	
	МассивID = ДополнительныеПараметры.МассивID;
	Для Каждого ID Из МассивID Цикл
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекущийРемонт_ID", ID);
		СтруктураПараметров.Вставить("Ссылка", ДополнительныеПараметры.Ссылка);
		ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ID, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID           = ID;
		Запись.ДокументТОИР = ДокументТОИР;
		Запись.ДокументЕРП  = ДокументЕРП;
		Запись.Записать();
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЗаказПослеВопроса();	 
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте 
Процедура ДобавитьЗаказПослеВопроса()

	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(ТекущийРемонт.ID);
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаказЗавершение", ЭтотОбъект, Новый Структура("ТекущийРемонт", ТекущийРемонт)), НСтр("ru = 'По ремонту отсутствуют материальные затраты или по всем материальным затратам
			|созданы заказы на потребление. Ввести новый заказ на внутреннее потребление?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;	
		ДобавитьЗаказФрагмент(МассивСтрокНоменклатуры, ТекущийРемонт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МассивСтрокНоменклатуры = Новый Массив;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("МассивID") Тогда 
		ДобавитьЗаказСводный(МассивСтрокНоменклатуры, ДополнительныеПараметры.МассивID, ДополнительныеПараметры.СтрокаКомментария);
	Иначе 
		ТекущийРемонт = ДополнительныеПараметры.ТекущийРемонт;
		ДобавитьЗаказФрагмент(МассивСтрокНоменклатуры, ТекущийРемонт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказФрагмент(Знач МассивСтрокНоменклатуры, Знач ТекущийРемонт)
	
	Перем ОписаниеОповещения, СтруктураПараметров, СтруктураПередаваемыхВОбработчикПараметров;
	
	СтруктураПараметров = Новый Структура();
	
	СтрокаКомментарий = НСтр(СтрШаблон("ru = 'Смета ремонта (Заявка на ремонт) %1 от %2 %3 %4 %5'",
																					Объект.Номер, Объект.Дата, ТекущийРемонт.ОбъектРемонта, ТекущийРемонт.ВидРемонтныхРабот,
																					Формат(ТекущийРемонт.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'"))));
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);
	
	ТекДата = ТекущаяДата();
	Если НЕ ТекДата > ТекущийРемонт.ДатаНачала Тогда 
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", ТекущийРемонт.ДатаНачала);
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Комментарий", СтрокаКомментарий);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID", ТекущийРемонт.ID);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов", ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСводныйЗаказВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Записать();
		ДобавитьСводныйЗаказПослеВопроса();	 
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте 
Процедура ДобавитьСводныйЗаказПослеВопроса() 
	
	МассивID = Новый Массив;
	СтрокаКомментария = Строка(Объект.Ссылка);
	
	Для Каждого ТекущийРемонт Из Объект.РемонтыОборудования Цикл
		
		СтрокаКомментария = СтрокаКомментария + " " + ТекущийРемонт.ОбъектРемонта + " " + 
		ТекущийРемонт.ВидРемонтныхРабот + " " + Формат(ТекущийРемонт.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'")) + " - " + 
		Формат(ТекущийРемонт.ДатаОкончания, НСтр("ru = 'ДФ=dd.MM.yyyy'"));
		
		МассивID.Добавить(ТекущийРемонт.ID);
		
	КонецЦикла;
	
	МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(МассивID);
	Если МассивСтрокНоменклатуры = Неопределено Тогда
		
		// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.			
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаказЗавершение", ЭтотОбъект, Новый Структура("МассивID, СтрокаКомментария", МассивID, СтрокаКомментария)), НСтр("ru = 'По ремонту отсутствуют материальные затраты или по всем материальным затратам
		|созданы заказы на потребление. Ввести новый заказ на внутреннее потребление?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДобавитьЗаказСводный(МассивСтрокНоменклатуры, МассивID, СтрокаКомментария);
	
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьЗаказСводный(МассивСтрокНоменклатуры, МассивID, СтрокаКомментария)
	
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("МассивID", МассивID);
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);
	
	ДатаОтргрузкиСводный = ПолучитьСводнуюДатуОтгрузки(МассивID);
	Если НЕ ДатаОтргрузкиСводный = "" Тогда 
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", ДатаОтргрузкиСводный);
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Комментарий", СтрокаКомментария);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный", ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьСводнуюДатуОтгрузки(МассивID)
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА торо_ЗаявкиПоРемонтамСрезПоследних.ДатаНачала > &ТекущаяДата
	               |				ТОГДА торо_ЗаявкиПоРемонтамСрезПоследних.ДатаНачала
	               |			ИНАЧЕ """"
	               |		КОНЕЦ) КАК ДатаНачала
	               |ИЗ
	               |	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
	               |			,
	               |			IDРемонта В (&ID)
	               |				И Регистратор = &Ссылка) КАК торо_ЗаявкиПоРемонтамСрезПоследних";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ДатаНачала;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьМассивНоменклатурыКЗаказуСервере(ID)
	
	УжеЗаказаннаяНоменклатура = ПолучитьТаблицуЗаказаннойНоменклатуры(ID);
	
	Если ТипЗнч(ID) = Тип("Массив") Тогда
		НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить();
		ЗапчастиКСписанию = Объект.ЗапчастиРемонта.Выгрузить();
	Иначе
		НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
		ЗапчастиКСписанию = Объект.ЗапчастиРемонта.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	КонецЕсли;	
	
	Для Каждого СтрокаЗапчасти Из ЗапчастиКСписанию Цикл
		СтрокаНоменклатуры = НоменклатураКСписанию.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, СтрокаЗапчасти);
		СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаЗапчасти.Количество;
	КонецЦикла;

	НоменклатураКСписанию.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоЕдиниц");
	
	Товары = Новый Массив;
	Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	Работа = Перечисления.ТипыНоменклатуры.Работа;
		
	Для каждого Строка Из НоменклатураКСписанию Цикл
		
		Если Строка.Номенклатура.ТипНоменклатуры = Услуга 
			ИЛИ Строка.Номенклатура.ТипНоменклатуры = Работа Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеЗаказаннаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеЗаказаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеЗаказаннаяНоменклатура.Количество() = 0
			ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Характеристика, Количество",
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры));
			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЗаказаннойНоменклатуры(ID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ДокументЕРП
	|ПОМЕСТИТЬ втДокументыНаОсновании
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID В (&ID)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыНаВнутреннееПотребление.Номенклатура,
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказыНаВнутреннееПотребление.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ЗаказыНаВнутреннееПотребление.КОформлению) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|ГДЕ
	|	ЗаказыНаВнутреннееПотребление.Регистратор В
	|			(ВЫБРАТЬ
	|				втДокументыНаОсновании.ДокументЕРП КАК Регистратор
	|			ИЗ
	|				втДокументыНаОсновании КАК втДокументыНаОсновании)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	ЗаказыНаВнутреннееПотребление.Номенклатура";
	
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СтатусыРемонтов

&НаКлиенте
Процедура УстановитьВидимостьКнопокСменыСтатусаДляТекущегоИсполнителяРемонта()
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Исполнитель) <> Тип("СправочникСсылка.СтруктураПредприятия")
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		
		Элементы.ИсполнителиПоРемонтамВернутьРемонтВРаботуИсполнителю.Видимость = Ложь;
		Элементы.ИсполнителиПоРемонтамОтказИсполнителя.Видимость = Ложь;
		Элементы.ИсполнителиПоРемонтамОтказПодразделения.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ИсполнителиПоРемонтамВернутьРемонтВРаботуИсполнителю.Видимость = (ТекущиеДанные.СтатусРемонта = ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ОтказИсполнителя")
																										ИЛИ ТекущиеДанные.СтатусРемонта = ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ОтказПодразделения"));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.УточнениеИсполнителя) Тогда
		Элементы.ИсполнителиПоРемонтамОтказИсполнителя.Видимость = (ТекущиеДанные.СтатусРемонта <> ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ОтказИсполнителя"));
		Элементы.ИсполнителиПоРемонтамОтказПодразделения.Видимость = Ложь;
	Иначе
		Элементы.ИсполнителиПоРемонтамОтказИсполнителя.Видимость = Ложь;
		Элементы.ИсполнителиПоРемонтамОтказПодразделения.Видимость = (ТекущиеДанные.СтатусРемонта <> ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ОтказПодразделения"))
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтказ(СтатусРемонта, ИДРемонта, Подразделение = Неопределено, Бригада = Неопределено)
	
	ПараметрыДляПроверки = торо_РаботаСоСтатусамиДокументовСервер.ПолучитьСтруктуруПараметровДляПроверкиСменыСтатусаРемонта();
	ПараметрыДляПроверки.Документ = Объект.Ссылка;
	ПараметрыДляПроверки.ИДРемонта = ИДРемонта;
	ПараметрыДляПроверки.УстанавливаемыйСтатус = СтатусРемонта;
	ПараметрыДляПроверки.Подразделение = Подразделение;
	ПараметрыДляПроверки.Бригада = Бригада;
	
	ОписаниеОшибки = "";
	Если торо_РаботаСоСтатусамиДокументовСервер.ПроверитьВозможностьУстановкиСтатусаДляРемонта(ПараметрыДляПроверки, Объект.Ссылка, ОписаниеОшибки) Тогда 
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИДРемонта", ИДРемонта);
		ДополнительныеПараметры.Вставить("Подразделение", Подразделение);
		ДополнительныеПараметры.Вставить("Бригада", Бригада);
		ДополнительныеПараметры.Вставить("СтатусРемонта", СтатусРемонта);
		ДополнительныеПараметры.Вставить("КомментарийОбязателен", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияКСтатусуРемонтаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ,НСтр("ru='Комментарий к отказу'"), , Истина);
	Иначе	
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияКСтатусуРемонтаЗавершение(Строка, ДопПараметры) Экспорт
	
	Если ДопПараметры.КомментарийОбязателен И НЕ ЗначениеЗаполнено(Строка) Тогда
		Если ДопПараметры.СтатусРемонта = ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ВозобновленоПослеОтказа") Тогда
			ТекстСообщения = НСтр("ru = 'Комментарий к возвращению в работу должен быть заполнен.'");
		ИначеЕсли ДопПараметры.СтатусРемонта = ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ОтказИсполнителя") 
			Или ДопПараметры.СтатусРемонта = ПредопределенноеЗначение("Перечисление.торо_СтатусыРемонтов.ОтказПодразделения") Тогда
			ТекстСообщения = НСтр("ru = 'Комментарий к отказу должен быть заполнен.'");
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтатусРемонта = ДопПараметры.СтатусРемонта;
	ИДРемонта = ДопПараметры.ИДРемонта;
	Подразделение = ДопПараметры.Подразделение;
	Бригада = ДопПараметры.Бригада;
	
   СтруктураВозврата = торо_РаботаСоСтатусамиДокументовСервер.УстановитьВручнуюСтатусДляРемонтаПоИсполнителюВЗаявке(Объект.Ссылка, ИДРемонта, Подразделение, Бригада, СтатусРемонта, ТекущаяДата(), Строка);
	
	Если СтруктураВозврата.Успешно Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОбновитьСтатусРемонтаВЗаявкеПоСтатусамИсполнителей(Объект.Ссылка, ИДРемонта);
		РемонтыОборудованияОбновитьСтатусыДляРемонтов(ИДРемонта);
		УстановитьВидимостьКнопокСменыСтатусаДляТекущегоИсполнителяРемонта();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураВозврата.ОписаниеРезультатаТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РемонтыОборудованияОбновитьСтатусыДляРемонтов(ИДРемонта = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусЗаявки = торо_РаботаСоСтатусамиДокументовСервер.ПолучитьТекущийСтатусДокумента(Объект.Ссылка);
	
	// Табличная часть "Ремонты оборудования".
	СтатусыРемонтовСоответствие = торо_РаботаСоСтатусамиДокументовСервер.ДанныеСтатусовРемонтов(Объект.РемонтыОборудования.Выгрузить(, "ID"), ИДРемонта);
	Для Каждого СтрокаЗаявка Из Объект.РемонтыОборудования Цикл
		Если ИДРемонта <> Неопределено И СтрокаЗаявка.ID <> ИДРемонта Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусРемонта = СтатусыРемонтовСоответствие.Получить(СтрокаЗаявка.ID);
		Если СтатусРемонта <> Неопределено Тогда
			СтрокаЗаявка.СтатусРемонта = ?(ЗначениеЗаполнено(СтатусРемонта.Статус), СтатусРемонта.Статус, СтатусЗаявки);
		Иначе
			СтрокаЗаявка.СтатусРемонта = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Табличная часть "Исполнители по ремонтам".
	ТаблицаСтатусовПоБригадам = торо_РаботаСоСтатусамиДокументовСервер.ДанныеСтатусовРемонтовЗаявкиПоИсполнителям(Объект.Ссылка, ИДРемонта);
	СтруктураПоиска = Новый Структура("ИДРемонта, Исполнитель, УточнениеИсполнителя");
	
	Если ИДРемонта = Неопределено Тогда
		МассивСтрокДляОбхода = Объект.ИсполнителиПоРемонтам;
	Иначе
		МассивСтрокДляОбхода = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ИДРемонта));
	КонецЕсли;
	
	Для каждого СтрокаДокумента из МассивСтрокДляОбхода Цикл
		СтруктураПоиска.ИДРемонта = СтрокаДокумента.РемонтыОборудования_ID;
		СтруктураПоиска.Исполнитель = СтрокаДокумента.Исполнитель;
		СтруктураПоиска.УточнениеИсполнителя = СтрокаДокумента.УточнениеИсполнителя;
		
		НайденныеСтроки = ТаблицаСтатусовПоБригадам.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаДокумента.СтатусРемонта = НайденныеСтроки[0].Статус;
			СтрокаДокумента.КомментарийКСтатусу = НайденныеСтроки[0].КомментарийКСтатусу;
		Иначе
			СтрокаДокумента.СтатусРемонта = Неопределено;
			СтрокаДокумента.КомментарийКСтатусу = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Исполнители

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораБригады(Исполнитель, ЭлементДоговорБригада, ОтборПоСсылке = Неопределено)
	
	ПараметрыВыбораМассив = Новый Массив;
	МассивТипов = Новый Массив;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Исполнитель));
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
		МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		
	ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Подразделение", Исполнитель));
		МассивТипов.Добавить(Тип("СправочникСсылка.торо_РемонтныеБригады"));
		
	КонецЕсли;
	
	Если ОтборПоСсылке <> Неопределено Тогда
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ОтборПоСсылке)));
	КонецЕсли;
	
	ЭлементДоговорБригада.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	ЭлементДоговорБригада.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(Исполнитель, РемонтыОборудования_ID)
	
	СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Исполнитель", РемонтыОборудования_ID, Исполнитель);
	СтрокиИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);
	
	ОтборПоСсылке = Новый Массив;
	Для каждого Строка из СтрокиИсполнителей Цикл
		ОтборПоСсылке.Добавить(Строка.УточнениеИсполнителя);
	КонецЦикла;
	
	УстановитьПараметрыВыбораДоговораБригады(Исполнитель, Элементы.ДеревоРемонтныхРаботДоговорБригада, ОтборПоСсылке);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораИсполнителя_ДляРемонтныхРабот(РемонтыОборудования_ID)
	
	СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID);
	СтрокиИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);

	ОтборПоСсылке = Новый Массив;
	Для каждого Строка из СтрокиИсполнителей Цикл
		ОтборПоСсылке.Добавить(Строка.Исполнитель);
	КонецЦикла;

	ПараметрыВыбораМассив = Новый Массив;
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ОтборПоСсылке)));
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("РежимОтображенияСписка", "Список"));
	Элементы.ДеревоРемонтныхРаботИсполнитель.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиРемонтныеРаботыДляОчисткиИсполнителей(РемонтыОборудования_ID, ИдентификаторИсключаемойСтроки)
	
	МассивОтобранныхСтрок = Новый Массив;
	МассивСтрокДерева = Новый Массив;
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ДеревоРемонтныхРабот.ПолучитьЭлементы());

	Если МассивСтрокДерева.Количество() <=1 Тогда
		Возврат МассивОтобранныхСтрок;
	КонецЕсли;
	
	ВсеИсполнителиРемонта = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID));
	МассивИсполнителей = Новый Массив;
	МассивДоговоров = Новый Массив;
	
	Для каждого Строка из ВсеИсполнителиРемонта Цикл
		Если Строка.ПолучитьИдентификатор() = ИдентификаторИсключаемойСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Исполнитель) Тогда
			МассивИсполнителей.Добавить(Строка.Исполнитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.УточнениеИсполнителя) Тогда
			МассивДоговоров.Добавить(Строка.УточнениеИсполнителя);
		КонецЕсли;
	КонецЦикла;
		
	Для каждого Строка из МассивСтрокДерева Цикл
		Если ЗначениеЗаполнено(Строка.Исполнитель) И МассивИсполнителей.Найти(Строка.Исполнитель) = Неопределено
			ИЛИ ЗначениеЗаполнено(Строка.ДоговорБригада) И МассивДоговоров.Найти(Строка.ДоговорБригада) = Неопределено Тогда
			МассивОтобранныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОтобранныхСтрок;
	
КонецФункции

&НаКлиенте
Функция НайтиРемонтныеРаботыДляОчисткиДоговораБригады(РемонтыОборудования_ID, ИдентификаторИсключаемойСтроки)
	
	МассивОтобранныхСтрок = Новый Массив;
	МассивСтрокДерева = Новый Массив;
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ДеревоРемонтныхРабот.ПолучитьЭлементы());

	Если МассивСтрокДерева.Количество() <=1 Тогда
		Возврат МассивОтобранныхСтрок;
	КонецЕсли;
	
	ВсеИсполнителиРемонта = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID));
	МассивДоговоров = Новый Массив;
	
	Для каждого Строка из ВсеИсполнителиРемонта Цикл
		Если Строка.ПолучитьИдентификатор() = ИдентификаторИсключаемойСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.УточнениеИсполнителя) Тогда
			МассивДоговоров.Добавить(Строка.УточнениеИсполнителя);
		КонецЕсли;
	КонецЦикла;
		
	Для каждого Строка из МассивСтрокДерева Цикл
		Если ЗначениеЗаполнено(Строка.ДоговорБригада) И МассивДоговоров.Найти(Строка.ДоговорБригада) = Неопределено Тогда
			МассивОтобранныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОтобранныхСтрок;
	
КонецФункции

&НаКлиенте
Процедура ДеревоРРЗаполнитьПолеДляФильтраПриИзмененииИсполнителяНаКлиенте()

	ТекДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	РодительТекСтрДереваРР = ТекДанные.ПолучитьРодителя();
	
	Если ТекДанные.Исполнитель = Неопределено Тогда
	    ТекДанные.ПодходитПодОтбор = РодительТекСтрДереваРР.ПодходитПодОтбор;
	Иначе
		Если (МассивИсполнителейДляФильтра.НайтиПоЗначению(ТекДанные.Исполнитель) <> Неопределено) Тогда
			ТекДанные.ПодходитПодОтбор = Истина;
		Иначе
			ТекДанные.ПодходитПодОтбор = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	ДеревоРРЗаполнитьПолеДляФильтраНаКлиенте(ТекДанные, ТекДанные.ПодходитПодОтбор);

КонецПроцедуры 

&НаКлиенте
Процедура ДеревоРРЗаполнитьПолеДляФильтраНаКлиенте(Дерево, ПодходитПодОтборРодитель = Ложь)

	Для каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		СтрокаПодошлоПодОтбор = Ложь;
		Строка.ПодходитПодОтбор = ПодходитПодОтборРодитель;
		
		Если (МассивИсполнителейДляФильтра.НайтиПоЗначению(Строка.Исполнитель) <> Неопределено) Тогда
		    Строка.ПодходитПодОтбор = Истина;					
			СтрокаПодошлоПодОтбор = Истина;
		ИначеЕсли (ЗначениеЗаполнено(Строка.Исполнитель) = Ложь И ТипЗнч(Строка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")) 
			ИЛИ (ЗначениеЗаполнено(Строка.Исполнитель) = Ложь И ТипЗнч(Строка.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт")) Тогда
			Строка.ПодходитПодОтбор = ПодходитПодОтборРодитель;
			СтрокаПодошлоПодОтбор = ПодходитПодОтборРодитель;
		ИначеЕсли ТипЗнч(Строка.РемонтнаяРабота) = Тип("Строка") Тогда
			СтрокаПодошлоПодОтбор = Истина;
		Иначе
			Строка.ПодходитПодОтбор = Ложь;
		КонецЕсли; 
		
		ДеревоРРЗаполнитьПолеДляФильтраНаКлиенте(Строка, СтрокаПодошлоПодОтбор);
		
		Если ТипЗнч(Строка.РемонтнаяРабота) = Тип("Строка") Тогда
		    Строка.ПодходитПодОтбор = СтрокаПодошлоПодОтбор;
		КонецЕсли; 
	
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РемонтыОборудованияПроверитьФильтрПоИсполнителю(Форма)
	
	Для каждого СтрокаРемонта из Форма.Объект.РемонтыОборудования Цикл
		РемонтыОборудованияПроверитьФильтрПоИсполнителюДляРемонта(Форма, СтрокаРемонта);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РемонтыОборудованияПроверитьФильтрПоИсполнителюДляРемонта(Форма, СтрокаРемонта)
	
	Если СтрокаРемонта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ФильтрПоИсполнителямАктивирован Тогда
		ИсполнителиРемонта = Форма.Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонта.ID));
		ПодходитПодОтбор = Ложь;
		
		Для каждого Строка из ИсполнителиРемонта Цикл
			Если Форма.МассивИсполнителейДляФильтра.НайтиПоЗначению(Строка.Исполнитель) <> Неопределено Тогда
				ПодходитПодОтбор = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаРемонта.ПодходитПодОтбор = ПодходитПодОтбор;
	Иначе
		СтрокаРемонта.ПодходитПодОтбор = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИсполнителейДляФильтраЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = Неопределено Тогда
		Если ТипЗнч(РезультатЗакрытия) = Тип("ДанныеФормыКоллекция") Тогда
		    МассивИсполнителейДляФильтра.Очистить();
		    Для каждого Стр Из РезультатЗакрытия Цикл
				МассивИсполнителейДляФильтра.Добавить(Стр.Исполнитель);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	РемонтыОборудованияПроверитьФильтрПоИсполнителю(ЭтаФорма);
	ДеревоРРЗаполнитьПолеДляФильтраНаКлиенте(ДеревоРемонтныхРабот, Истина);
	
	ВключитьУсловноеОформлениеДляФильтра();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьУсловноеОформлениеДляФильтра()

	Для каждого Элемент Из ЭтаФорма.УсловноеОформление.Элементы Цикл
	
		Если Элемент.Представление = "ВидимостьРемонта" ИЛИ Элемент.Представление = "ВидимостьРемонтнойРаботы" Тогда
			
			Если МассивИсполнителейДляФильтра.Количество() = 0 Тогда
			    Элемент.Использование = Ложь;							
			Иначе
			    Элемент.Использование = Истина;							
			КонецЕсли;  		
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры 

#КонецОбласти

#Область ОбновлениеДопКолонокТаблиц

&НаСервере
Процедура ОбновитьДобавленныеКолонкиТаблиц()
	
	РемонтыОборудованияОбновитьДокументыИсточники();
	торо_Ремонты.РемонтыОборудованияОбновитьВидРемонтаВОиВД(Объект.Ссылка, Объект.РемонтыОборудования);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериальныеЗатраты,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));

	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ЗапчастиРемонта,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));

	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;	
		
	Если ФОИспользоватьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли; 	
	
	Если ФОИспользоватьОстановочные
		ИЛИ ФОИспользоватьСкользящееПланирование Тогда
		ОбновитьОстановочные();
	Иначе
		Для каждого Строка Из Объект.РемонтыОборудования Цикл
			Строка.ДатаНачалаАктуальная    = Строка.ДатаНачала;
			Строка.ДатаОкончанияАктуальная = Строка.ДатаОкончания;    		
			Строка.КрайняяДопустимаяДатаЗавершенияРемонтаАктуальная = Строка.КрайняяДопустимаяДатаЗавершенияРемонта;
		КонецЦикла;	
	КонецЕсли;
	
	РемонтыОборудованияОбновитьСтатусыДляРемонтов();
	РемонтыОборудованияПроверитьФильтрПоИсполнителю(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РемонтыОборудованияОбновитьДокументыИсточники()	
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ТипДокументаОснования = "" и СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиВремениРаботы()
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	торо_АктуальныеПлановыеДатыРемонтов.IDРемонта КАК ID,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончания,
	|	торо_АктуальныеПлановыеДатыРемонтов.КрайняяДатаЗавершения КАК КрайняяДатаЗавершения,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_АктуальныеДаты
	|ИЗ
	|	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|ГДЕ
	|	торо_АктуальныеПлановыеДатыРемонтов.IDРемонта В(&ID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	|	торо_ОстановочныеРемонтыСрезПоследних.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Остановочные
	|ИЗ
	|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	|ГДЕ
	|	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК ID
	|ПОМЕСТИТЬ ВТ_ОтмененныеРемонты
	|ИЗ
	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	|			,
	|			ID В
	|				(ВЫБРАТЬ
	|					ВТ_АктуальныеДаты.ID КАК ID
	|				ИЗ
	|					ВТ_АктуальныеДаты КАК ВТ_АктуальныеДаты)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	|ГДЕ
	|	(торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен
	|			ИЛИ торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	торо_ОтмененныеРемонтыСрезПоследних.ID
	|ИЗ
	|	РегистрСведений.торо_ОтмененныеРемонты.СрезПоследних(
	|			,
	|			ID В
	|				(ВЫБРАТЬ
	|					ВТ_АктуальныеДаты.ID КАК ID
	|				ИЗ
	|					ВТ_АктуальныеДаты КАК ВТ_АктуальныеДаты)) КАК торо_ОтмененныеРемонтыСрезПоследних
	|ГДЕ
	|	торо_ОтмененныеРемонтыСрезПоследних.Отменен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АктуальныеДаты.ID КАК ID,
	|	ВТ_АктуальныеДаты.ДатаНачала КАК ДатаНачалаАктуальная,
	|	ВТ_АктуальныеДаты.ДатаОкончания КАК ДатаОкончанияАктуальная,
	|	ВТ_АктуальныеДаты.КрайняяДатаЗавершения КАК КрайняяДопустимаяДатаЗавершенияРемонтаАктуальная,
	|	ВТ_АктуальныеДаты.ДокументОснование КАК ДокументОснование,
	|	ВТ_Остановочные.Регистратор КАК ВРамкахОстановочного
	|ИЗ
	|	ВТ_АктуальныеДаты КАК ВТ_АктуальныеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остановочные КАК ВТ_Остановочные
	|		ПО ВТ_АктуальныеДаты.ID = ВТ_Остановочные.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтмененныеРемонты КАК ВТ_ОтмененныеРемонты
	|		ПО ВТ_АктуальныеДаты.ID = ВТ_ОтмененныеРемонты.ID
	|ГДЕ
	|	ВТ_ОтмененныеРемонты.ID ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для каждого Строка Из Объект.РемонтыОборудования Цикл

		Если Выборка.НайтиСледующий(Новый Структура("ID", Строка.ID)) Тогда
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
		Иначе
			Строка.ДатаНачалаАктуальная    = Неопределено;
			Строка.ДатаОкончанияАктуальная = Неопределено;
			Строка.КрайняяДопустимаяДатаЗавершенияРемонтаАктуальная = Неопределено;
			Строка.ВРамкахОстановочного = Неопределено;
		КонецЕсли; 
		
		Выборка.Сбросить();
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область УпаковкиНоменклатуры

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет пересчет затрат по количеству операций.
//
Процедура ПересчитатьЗатратыПоКоличеству(ID, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок)
	
	МассивСтрокМЗ = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого СтрокаТЧ Из МассивСтрокМЗ Цикл
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество * Коэффициент;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
			
			МассивСтрокДляПолученияКоэффициента.Добавить(СтрокаТЧ);
			
			Если СписокУпаковок.НайтиПоЗначению(СтрокаТЧ.ЕдиницаИзмерения) = Неопределено Тогда
				СписокУпаковок.Добавить(СтрокаТЧ.ЕдиницаИзмерения);
			КонецЕсли;
			
		Иначе
			
			СтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.Количество * 1;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	МассивСтрокТЗ = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого СтрокаТЧ Из МассивСтрокТЗ Цикл
		СтрокаТЧ.ВремяРаботы      = СтрокаТЧ.ВремяРаботы * Коэффициент;
		СтрокаТЧ.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(СтрокаТЧ.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеЗначенийКоличестваИлиУпаковки(ТекущиеДанные, ИзменениеКоличестваЕдиниц = Ложь)
	
	КоэффициентУпаковки = 0;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
		КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиНаСервере(ТекущиеДанные.ЕдиницаИзмерения);	
	КонецЕсли; 
	
	Если КоэффициентУпаковки = 0 Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли; 
	
	Если ИзменениеКоличестваЕдиниц Тогда
		
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоЕдиниц / КоэффициентУпаковки;
		
	Иначе	
		
		ТекущиеДанные.КоличествоЕдиниц = ТекущиеДанные.Количество * КоэффициентУпаковки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	Если ТипЗнч(Упаковка) = Тип("СписокЗначений") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК Ключ,
		|	УпаковкиНоменклатуры.Коэффициент КАК Значение
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка В(&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", Упаковка);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			СоответствиеДляВозврата = Новый Соответствие;
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СоответствиеДляВозврата.Вставить(Выборка.Ключ,Выборка.Значение);
			КонецЦикла; 
			Возврат СоответствиеДляВозврата;
		КонецЕсли;
		Возврат Новый Соответствие;
	Иначе
		Возврат Упаковка.Коэффициент;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

#Область ВспомогательнаяМелочь

&НаКлиенте
Процедура ЗаполнитьМассивID(МассивID,ЭлементДерева)
	МассивID.Добавить(ЭлементДерева.ID);
	Для Каждого ЭлементДерева1 Из ЭлементДерева.ПолучитьЭлементы() Цикл
		ЗаполнитьМассивID(МассивID,ЭлементДерева1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуРемонтовОборудования(ИДРемонта)
	
	Если ЗначениеЗаполнено(ИДРемонта) Тогда
		Массивстрок = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ИДРемонта));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Идентиф;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.РемонтыОборудования.ТекущаяСтрока = Неопределено Тогда
		Если Объект.РемонтыОборудования.Количество() > 0 Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Объект.РемонтыОборудования[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуДереваРемонтныхРабот(ИДОперации)
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Если ЗначениеЗаполнено(ИДОперации) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ЭлементыДереваРемРабот, ИДОперации, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыДереваРемРабот.Количество() > 0 Тогда
		Элементы.ДеревоРемонтныхРабот.Развернуть(ЭлементыДереваРемРабот[0].ПолучитьИдентификатор(),Истина);
		Если Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ЭлементыДереваРемРабот[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРР(ДеревоРР)

	Для Каждого Строка Из ДеревоРР Цикл
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоРемонтныхРабот.Развернуть(ИдентификаторСтроки, Истина);
		РазвернутьДеревоРР(Строка.ПолучитьЭлементы());
	КонецЦикла;

КонецПроцедуры 

#КонецОбласти

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивIDДляПроверки = Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Объект.Ссылка, МассивIDДляПроверки);
	
	Если Не МассивIDДляБлокировки = Неопределено Тогда
		
		Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
			СтрокаРемонта.БлокироватьДляИзменения = Не МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ФОИспользоватьСкользящееПланирование Тогда
		МассивIDДляБлокировки = торо_Ремонты.ПроверитьРемонтыНаНаличиеПлановРемонтов(МассивIDДляПроверки);
		Если Не МассивIDДляБлокировки = Неопределено Тогда
			Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
				СтрокаРемонта.НеРедактироватьДаты = НЕ МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения, ОбъектРемонта)
	
	// Заглушка для случаев с запрещенным ОР при включенном РЛС.
	Если ЗапретитьРедактирование Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакВестиУчетСерийныхЗапчастей = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ОбъектРемонта, "ВестиУчетСерийныхЗапчастей");
	
	Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр			= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.МатериальныеЗатраты.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.ДокументыЗаказНаВнПотребление.ТолькоПросмотр	= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ТрудовыеЗатраты.ТолькоПросмотр					= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.Инструменты.ТолькоПросмотр						= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.ИсполнителиПоРемонтам.ТолькоПросмотр		= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.ЗапчастиРемонта.ТолькоПросмотр					= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"] 
																				ИЛИ НЕ ПризнакВестиУчетСерийныхЗапчастей;
	Элементы.МерыБезопасности.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	
	Элементы.ДокументыЗаказНаВнПотребелениеДобавитьЗаказ.Доступность				= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивноеДобавлениеЗаказовНаВнутреннееПотребление
		И (НЕ ФОВводНаОснованииПроведенного ИЛИ (ФОВводНаОснованииПроведенного И Объект.Проведен));
	Элементы.ДокументыЗаказНаВнПотребелениеУдалитьЗаказНаВнПотребление.Доступность	= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивнаяПометкаУдаленияЗаказовНаВнутреннееПотребление;
	Элементы.ДокументыЗаказНаВнПотреблениеСводныйДокументВнутреннееПотребление.Доступность = Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивноеДобавлениеЗаказовНаВнутреннееПотребление;
	Элементы.ДеревоРемонтныхРаботДобавитьТехКарту.Доступность						= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботДобавитьТехОперацию.Доступность					= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботДобавить.Доступность								= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботПодборОпераций.Доступность							= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботУказатьПараллельноВыполняемые.Доступность	= Не БлокироватьДляИзменения И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые.Доступность = Не БлокироватьДляИзменения И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	
	КоличествоЭлементов = ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество();
	
	Если КоличествоЭлементов > 0 Тогда		
		КоличествоЭлементовДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество();
	Иначе 
		КоличествоЭлементовДерева = 0;
	КонецЕсли;
	
	ДоступностьПодбораЗапчастей = НЕ Элементы.ЗапчастиРемонта.ТолькоПросмотр;
	Элементы.ЗапчастиРемонтаПодборНоменклатуры.Доступность = ДоступностьПодбораЗапчастей И КоличествоЭлементов > 0;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Использование = Истина;
	
	// Чтобы не отображалась единица измерения в Запчастях ремонта, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтаНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапчастиРемонта.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Использование = Истина;
	
	// Чтобы не отображалась единица измерения в Инструментах, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнструментыИнструментЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Инструменты.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Использование = Истина;

	// Использование харектиристик МатериальныеЗатраты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	Элемент.Использование = Истина;
	
	// Использование харектиристик ЗапчастиРемонта
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтаХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапчастиРемонта.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	Элемент.Использование = Истина;
	
	// ТолькоПросмотр вида ремонта ремонтов оборудование.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияВидРемонтныхРабот.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ВидРемонтаВОиВД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ДокументНачалаЦепочкиВОИлиВД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь); 

	// ТолькоПросмотр корня дерева ремонтных работ 
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.РемонтнаяРабота");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Ремонтные работы";

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отбор ремонтов по исполнителю
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудования.Имя);
	                  
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ПодходитПодОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Представление = "ВидимостьРемонта";
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Серый);
	Элемент.Использование = Ложь;
	
	// Отбор ремонтных работ по исполнителю
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРабот.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботТехОперацияБазоваяЕдиницаИзмерения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();       	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботИсполнитель.Имя);
	                  
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.ПодходитПодОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Представление = "ВидимостьРемонтнойРаботы";
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Серый);
	Элемент.Использование = Ложь;
	
	// Доступность исполнителей для реомнтных работ
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботИсполнитель.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботДоговорБригада.Имя);
	                  
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.ЭтоТехКарта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Представление = "ДоступностьИсполнителяДляТехОперации";
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	Элемент.Использование = Истина;
	
	// Доступность для редактирования дат в зависимости от реквизита 
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияДатаНачала.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияДатаОкончания.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.НеРедактироватьДаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	
	// Согласование++
	торо_РаботаССогласованиями.ДобавитьУсловноеОформлениеДляДереваСогласования(ЭтаФорма);
	// Согласование--

	торо_ТехнологическиеКарты.ДобавитьУсловноеОформлениеДляПараллельныхТОТК(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте 
Процедура РемонтыОборудованияОбработкаВыбораПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивИДРемонтов = ДополнительныеПараметры.МассивИДДобавленныхРемонтов;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого ЭлементМассива из МассивИДРемонтов Цикл
			ОчиститьСвязанныеТабличныеЧасти(, , ЭлементМассива);
		КонецЦикла;
		ОбработкаВыбораЗавершение(ДополнительныеПараметры.ВыбранноеЗначение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораЗавершение(ВыбранноеЗначение)
	
	СтруктураВозврата = РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение.АдресХранилища);
	
	Если СтруктураВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделитьСтрокуРемонтовОборудования(СтруктураВозврата.IDРемонтаДляАктивизации);
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	Модифицированность = Истина;
	
КонецПроцедуры
	
&НаСервере
Функция РемонтыОборудованияОбработкаВыбораСервер(АдресХранилища)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыбранноеЗначение = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	IDРемонтаДляАктивизации = Неопределено;
	МассивСтруктурВозврата = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(Неопределено, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, Неопределено);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;	
	
	Если ВыбранноеЗначение.Количество() = 1 Тогда
		IDРемонтаДляАктивизации = ВыбранноеЗначение[0].СтрокаРемонтовОборудования.ID;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДобавленныеКолонкиТаблиц();
	ОбновитьЗависимыеЛоты();
	ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	ОбновитьДоступностьДляРедактирования();
	
	Возврат Новый Структура("IDРемонтаДляАктивизации", IDРемонтаДляАктивизации);
	
КонецФункции

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧастиПоПредписанию(СтрокиПредписаний)
	СтруктураТабличныхЧастей = Новый Структура("МерыБезопасности, Инструменты, МатериальныеЗатраты, ТрудовыеЗатраты");
	Для Каждого СтрокаЗП Из СтрокиПредписаний Цикл
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, Предписание", 
			СтрокаЗП.РемонтыОборудования_ID, СтрокаЗП.ДокументВнешнегоОснования));
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура("МерыБезопасности, Инструменты, МатериальныеЗатраты, ТрудовыеЗатраты");
	СтруктураТабличныхЧастейПоРемонтам = Новый Структура("ИсполнителиПоРемонтам, ЗапчастиРемонта, РезультатыПодбораИзМатрицыОценкиРисков");
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
				СтрокиПредписаний = Объект.ЗакрываемыеПредписания.НайтиСтроки(Новый Структура("ДокументВнешнегоОснования", ДокументОснование));
				Если СтрокиРО.Количество() = 0 Тогда
					ОчиститьСвязанныеТабличныеЧастиПоПредписанию(СтрокиПредписаний);
				КонецЕсли;
				Для Каждого Предписание Из СтрокиПредписаний Цикл 
					Объект.ЗакрываемыеПредписания.Удалить(Предписание);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
				
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, Ремонт_ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
			Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
				СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID",Ремонт_ID));
				Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
					Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСвязанныхТаблицРемонты(ID)
	
	Элементы.ЗапчастиРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID",ID);
	Элементы.ДокументыЗаказНаВнПотребление.ОтборСтрок = Новый ФиксированнаяСтруктура("ID",ID);
	Элементы.ИсполнителиПоРемонтам.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ID);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов       = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если НЕ ТекСтрокаДереваРемонтов = Неопределено И НЕ ТекСтрокаРемонтовОборудования = Неопределено Тогда
		
		ID_Отбора = ТекСтрокаДереваРемонтов.ID;
		
		Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
			
			ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
			
			// Материальные затраты.
			Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Трудовые затраты.
			Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Инструменты.
			Элементы.Инструменты.ОтборСтрок               = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Меры безопасности.
			Элементы.МерыБезопасности.ОтборСтрок          = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
		Иначе
			// Материальные затраты.
			Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Трудовые затраты.
			Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Инструменты.
			Элементы.Инструменты.ОтборСтрок               = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Меры безопасности.
			Элементы.МерыБезопасности.ОтборСтрок          = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(ТекущиеЗначения, СтруктураТабличныхЧастей)

	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
		ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
		
		СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			ТабличнаяЧасть.Удалить(Элемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
	ПараметрыПоиска.Вставить("Родитель_ID", ТекущиеЗначения.ID);
			
	МассивПодчиненныхСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрДерева Из МассивПодчиненныхСтрок Цикл
		СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктураДляПередачи, СтруктураТабличныхЧастей);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		Если ИмяТЧ = "МатериальныеЗатраты" ИЛИ ИмяТЧ = "ЗапчастиРемонта" Тогда
			СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID, Номенклатура, ХарактеристикаНоменклатуры", РемонтыОборудования_ID, ID, текСтрока.Номенклатура, текСтрока.Характеристика);
		Иначе
			СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID, Инструмент", РемонтыОборудования_ID, ID, текСтрока.Номенклатура);
		КонецЕсли;
		
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.ЕдиницаИзмерения 			= текСтрока.Упаковка;
			нс.Количество 					= текСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(нс.Единицаизмерения), 1, КоэфУпаковкиВыбр);
					
			Если ИмяТЧ = "МатериальныеЗатраты" ИЛИ ИмяТЧ = "ЗапчастиРемонта" Тогда
				нс.ХарактеристикаНоменклатуры 	= текСтрока.Характеристика;	
			КонецЕсли;

			Если ИмяТЧ = "МатериальныеЗатраты" Тогда
				нс.КоличествоЕдиниц = нс.Количество * КоэфУпаковкиВыбр;
			КонецЕсли;
		
			нс.ID 							= ID;
			нс.РемонтыОборудования_ID 		= РемонтыОборудования_ID;
						
		Иначе
			
			нс = НайС[0];
			
			КоэфУпаковкиСтар = ?(ЗначениеЗаполнено(нс.ЕдиницаИзмерения), нс.ЕдиницаИзмерения.Коэффициент, 1);
			КоличествоЕдиниц = (нс.Количество*КоэфУпаковкиСтар + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр);
			нс.Количество = КоличествоЕдиниц / КоэфУпаковкиВыбр;
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			
			Если ИмяТЧ = "МатериальныеЗатраты" Тогда
				нс.КоличествоЕдиниц = КоличествоЕдиниц;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДанныеНаОснованииППРВыделенныеСтроки()
	
	ВыбранноеЗначение = Новый Массив;
	МассивИдРемонтов = Новый Массив;
	
	Для Каждого СтрокаМассиваIDИзППР Из МассивIDИзППР Цикл
	
		СтруктураВыбора = Новый Структура;
		
		СтруктураВыбора.Вставить("ДокументОснование", ДокОснованиеППР);
		СтруктураВыбора.Вставить("СтрокаРемонтовОборудования", СтрокаМассиваIDИзППР.Значение.СтрокаРемонтовОборудования);
		СтруктураВыбора.Вставить("МассивСтрокРемонтныхРабот", СтрокаМассиваIDИзППР.Значение.МассивСтрокРемонтныхРабот);
		
		ВыбранноеЗначение.Добавить(СтруктураВыбора);
		МассивИдРемонтов.Добавить(СтрокаМассиваIDИзППР.Значение.СтрокаРемонтовОборудования.ID);
		
	КонецЦикла;
	
	АдресХранилища = ПоместитьДанныеДляЗаполненияВоВременноеХранилище(ВыбранноеЗначение, ЭтаФорма.УникальныйИдентификатор);
	
	СтруктураВозрата = Новый Структура;
	СтруктураВозрата.Вставить("ПодборРемонтов", Истина);
	СтруктураВозрата.Вставить("ЭтоРемонтнаяРабота", Ложь);
	СтруктураВозрата.Вставить("МассивИДРемонтов", МассивИДРемонтов);
	СтруктураВозрата.Вставить("АдресХранилища", АдресХранилища);

	Возврат СтруктураВозрата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьДанныеДляЗаполненияВоВременноеХранилище(ВыбранноеЗначение, АдресХранилища)
	
	Возврат ПоместитьВоВременноеХранилище(ВыбранноеЗначение, АдресХранилища);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИзЛотовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.ID КАК РемонтыОборудования_ID,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.Подрядчик КАК Исполнитель,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.ДоговорПодрядчика КАК УточнениеИсполнителя,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.торо_ЗапланированныеПодрядчикиРемонтов.СрезПоследних(, ID В (&СписокID)) КАК торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних";
	
	Запрос.УстановитьПараметр("СписокID", Объект.РемонтыОборудования.Выгрузить(,"ID"));
	
	ВыборкаИсполнителей = Запрос.Выполнить().Выбрать();
	
	СтруктураПоискаИсполнителей = Новый Структура("РемонтыОборудования_ID, Исполнитель, УточнениеИсполнителя");
	
	Пока ВыборкаИсполнителей.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаИсполнителей, ВыборкаИсполнителей);
		ИсполнителиПоРемонтам = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоискаИсполнителей);
		
		Если ИсполнителиПоРемонтам.Количество() = 0 Тогда
			НоваяСтрока = Объект.ИсполнителиПоРемонтам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаИсполнителей); 
		КонецЕсли;
		
		СписокТехКарт = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ВыборкаИсполнителей.РемонтыОборудования_ID));
		Для Каждого ТехКарта Из СписокТехКарт Цикл
			Если ТипЗнч(ТехКарта.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Если НЕ ЗначениеЗаполнено(ТехКарта.Исполнитель) Тогда
					ТехКарта.Исполнитель = ВыборкаИсполнителей.Исполнитель;
					ТехКарта.ДоговорБригада = ВыборкаИсполнителей.УточнениеИсполнителя;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьУдаленияРемонтов(IDРемонта = Неопределено, ДокОснование = Неопределено) 
	
	Если ДокОснование <> Неопределено Тогда
		ТЗ = Объект.РемонтыОборудования.Выгрузить();
		СвязанныеРемонты = ТЗ.Скопировать(Новый Структура("ДокументИсточник", ДокОснование));
		IDРемонта = СвязанныеРемонты.ВыгрузитьКолонку("ID");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =  "ВЫБРАТЬ
	                |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор КАК Регистратор,
	                |	торо_ОстановочныеРемонты.ДокументОснование КАК ДокументОснование
	                |ИЗ
	                |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ОстановочныеРемонты КАК торо_ОстановочныеРемонты
	                |		ПО торо_ОстановочныеРемонтыСрезПоследних.Регистратор = торо_ОстановочныеРемонты.Ссылка
	                |			И (торо_ОстановочныеРемонты.ДокументОснование = &СсылкаНаЗаявку)
	                |ГДЕ
	                |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	
	Запрос.УстановитьПараметр("ID", IDРемонта);
	Запрос.УстановитьПараметр("СсылкаНаЗаявку", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

&НаКлиенте
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	Если Не Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		МассивТиповЗапчастей = Новый Массив();
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		
		ОбъектРемонта = Элементы.РемонтыОборудования.ТекущиеДанные.ОбъектРемонта;
		МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);

		ПараметрыВыбораМассив = Новый Массив;
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТиповЗапчастей)));
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивЗапчастей)));
		Элементы.ЗапчастиРемонтаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);		
		Элементы.ЗапчастиРемонтаНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗапчастей);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗапчастейДляОР(ОбъектРемонта)

	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_Запчасти.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
	               |ГДЕ
	               |	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_РемонтныеГруппыЗапчасти.Номенклатура
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.Запчасти КАК торо_РемонтныеГруппыЗапчасти
	               |ГДЕ
	               |	торо_РемонтныеГруппыЗапчасти.Ссылка В
	               |			(ВЫБРАТЬ
	               |				торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР
	               |			ИЗ
	               |				Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |			ГДЕ
	               |				торо_ОбъектыРемонта.Ссылка = &ОбъектРемонта)";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);

	МассивЗапчастей = Новый Массив;
	Пока Выборка.Следующий() Цикл;
		МассивЗапчастей.Добавить(Выборка.Номенклатура);
	КонецЦикла;

	Возврат МассивЗапчастей;
	
КонецФункции

&НаКлиенте
Процедура УправлениеФормой(ТекущиеДанные=Неопределено)
	
	УстановитьДоступностьКнопокРемонтныхРабот();
	УстановитьДоступностьКнопокИсполнителей();
	
	Если Не ТекущиеДанные=Неопределено Тогда
		Найденный = МассивIDЛотов.НайтиПоЗначению(ТекущиеДанные.ID);
		Если Найденный <> Неопределено Тогда
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Истина;
		Иначе
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокРемонтныхРабот()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавить");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехКарту");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехОперацию");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборОпераций");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботУказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые");
	
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамДобавить");
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамЗаполнитьИзЛотов");
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамОтказПодразделения");
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамОтказИсполнителя");
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамВернутьРемонтВРаботуИсполнителю");

	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.РемонтыОборудования,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокИсполнителей()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("МатериальныеЗатратыДобавить");
	СписокЭлементов.Добавить("МатериальныеЗатратыПодборНоменклатуры");
	СписокЭлементов.Добавить("ИнструментыДобавить");
	СписокЭлементов.Добавить("ИнструментыПодборНоменклатуры");
	СписокЭлементов.Добавить("ЗапчастиРемонтаДобавить");
	СписокЭлементов.Добавить("ЗапчастиРемонтаПодборНоменклатуры");
	СписокЭлементов.Добавить("ТрудовыеЗатратыДобавить");
	СписокЭлементов.Добавить("МерыБезопасностиДобавить");
	
	КоличествоЭлементов = ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество();
	
	Если КоличествоЭлементов > 0 Тогда		
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество(),СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	Иначе
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(КоличествоЭлементов,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияФормыМестоположения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		НайденныеСтроки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID, ОбъектРемонта", ДополнительныеПараметры.ID_Ремонта, ДополнительныеПараметры.ОбъектРемонта)); 
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка.Высота = Результат.Высота;
			Строка.Долгота = Результат.Долгота;
			Строка.Широта = Результат.Широта;
		КонецЦикла;	     
		Модифицированность = Истина; 
	КонецЕсли;
	
КонецПРоцедуры

РемонтОборудованияУдаляется = Ложь;

#КонецОбласти