#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										// из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	торо_ЗаполнениеДокументов20.ЗаполнениеНаОсновании(Основание, ЭтотОбъект, Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("РемонтыОборудования", "Ремонты оборудования");
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	
	ШаблонСообщения = НСтр("ru = 'В табличной части ""%1"" нет строк.'");
	Для каждого текТЧ из СписокТЧ Цикл
		Если ЭтотОбъект[ТекТЧ.Ключ].Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекТЧ.Значение);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиИнструментыИТехника(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиЗапчасти(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиТрудовыеЗатраты(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиИсполнители(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиМерыБезопасности(Отказ);
		
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("МатериальныеЗатраты.ХарактеристикаНоменклатуры");
	Если ФОИспользоватьХарактеристикиНоменклатуры = Истина Тогда
		ПараметрыПроверки = Новый Структура("СуффиксХарактеристики, ИмяТЧ", "Номенклатуры", "МатериальныеЗатраты");
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;

	ПроверитьДублиИсполнителей(Отказ);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	торо_ВнешнееОснованиеДляРабот.Ссылка КАК Ссылка,
	                |	торо_ВнешнееОснованиеДляРабот.Проведен КАК Проведен
	                |ИЗ
	                |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	                |ГДЕ
	                |	торо_ВнешнееОснованиеДляРабот.Ссылка В(&МассивДокОсн)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	торо_ВыявленныеДефекты.Ссылка,
	                |	торо_ВыявленныеДефекты.Проведен
	                |ИЗ
	                |	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	                |ГДЕ
	                |	торо_ВыявленныеДефекты.Ссылка В(&МассивДокОсн)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	торо_ПланГрафикРемонта.Ссылка,
	                |	торо_ПланГрафикРемонта.Проведен
	                |ИЗ
	                |	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	                |ГДЕ
	                |	торо_ПланГрафикРемонта.Ссылка В(&МассивДокОсн)");
	
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований); 	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстСообщения = НСтр("ru = 'Есть непроведенный документ основание: " + Строка(Выборка.Ссылка) + "'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;		
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" с видом ремонта ""%2"" отсутствуют строки в дереве ремонтных работ.'");
	Для Каждого СтрокаСРемонтом Из РемонтыОборудования Цикл		
		МассивСтрок = РемонтныеРаботы.НайтиСтроки(Новый структура("РемонтыОборудования_ID", СтрокаСРемонтом.ID));
		Если МассивСтрок.Количество() = 0 Тогда			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСРемонтом.ОбъектРемонта, СтрокаСРемонтом.ВидРемонтныхРабот);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;			
		КонецЕсли;		
	КонецЦикла;	
	
	Если ДокументыОснования.Количество()>0 Тогда
		ПроверитьДатуДокумента(Отказ);
	КонецЕсли;
	
	РемонтыОборудованияТаблицаЗначений = РемонтыОборудования.Выгрузить(); 
	РемонтыОтсутствующиеВДокументахИсточниках = торо_Ремонты.ПроверитьНаличиеРемонтовВДокументахИсточникахПоIDРемонта(РемонтыОборудованияТаблицаЗначений);
	
	Если НЕ РемонтыОтсутствующиеВДокументахИсточниках = Неопределено Тогда
		
		Для каждого Ремонт Из РемонтыОтсутствующиеВДокументахИсточниках Цикл
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" отсутствует соответствующий ремонт в документе основании ""%2"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Ремонт.ОбъектРемонта, Ремонт.ДокументИсточник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		УстановитьУправляемыеБлокировки();
		ДвиженияПоРегистрам(РежимПроведения, Отказ);
		
	КонецЕсли;
	
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусРемонтовПриПроведении(ЭтотОбъект);
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовРемонта(Ссылка);
	
	СписокПолучателей = Новый СписокЗначений;
	ТаблицаСтатусовПоБригадам = торо_РаботаСоСтатусамиДокументовСервер.ДанныеСтатусовРемонтовЗаявкиПоИсполнителям(Ссылка);
	Для каждого Строка Из ИсполнителиПоРемонтам Цикл 
		
		СтруктураПоиска = Новый Структура("ИДРемонта, Исполнитель, УточнениеИсполнителя", Строка.РемонтыОборудования_ID, Строка.Исполнитель, Строка.УточнениеИсполнителя);
		НайденныеСтроки = ТаблицаСтатусовПоБригадам.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 И НайденныеСтроки[0].Статус <> Перечисления.торо_СтатусыРемонтов.ОтказИсполнителя 
		  И НайденныеСтроки[0].Статус <> Перечисления.торо_СтатусыРемонтов.ОтказПодразделения Тогда 
			СписокПолучателей.Добавить(Строка.УточнениеИсполнителя);
		КонецЕсли;
		
	КонецЦикла;
	торо_МобильныеПриложенияУведомления.ОтправитьУведомлениеОЗаявке(Ссылка, ДополнительныеСвойства.НоваяЗаявка, Отказ, СписокПолучателей);
	
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Ссылка, РемонтыОборудования.ВыгрузитьКолонку("ID"));
	Если МассивIDДляБлокировки <> Неопределено И МассивIDДляБлокировки.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
		торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовПриОтменеПроведения(ЭтотОбъект);
		торо_МТОСервер.ПоместитьРемонтыВРегистрДляПроверкиАктуальности(Ссылка);
		торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивОР = ОбщегоНазначения.ВыгрузитьКолонку(РемонтыОборудования, "ОбъектРемонта", Истина);
	ОбъектыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивОР);
	
	МассивВидовРемонта = ОбщегоНазначения.ВыгрузитьКолонку(РемонтыОборудования, "ВидРемонтныхРабот", Истина);
	ВидыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивВидовРемонта);
	
	ДополнительныеСвойства.Вставить("НоваяЗаявка", НЕ Проведен);
	
	// Получение удаленных ремонтов при перепроведении документа. Используются при формировании записей
	// регистров торо_ПлановыеИсполнителиРемонтов, торо_ОбщиеДанныеПоРемонтам, торо_СвернутыеФактическиеДатыРемонтов.
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивIDДокумента = РемонтыОборудования.ВыгрузитьКолонку("ID");
		МассивУдаленныхID = торо_Ремонты.ПолучитьIDУдаленныхРемонтовДокумента(МассивIDДокумента, Ссылка);
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", МассивУдаленныхID);
	Иначе
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", Новый Массив());
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ТаблицаРемонтныхРабот = ПодготовитьТаблицуРемонтныхРабот(МенеджерВТ);
	ТаблицаМатериальныхЗатрат = СформироватьТаблицуМатериальныхЗатрат(МенеджерВТ);
	ТаблицаТрудовыхЗатрат = СформироватьТаблицуТрудовыхЗатрат(МенеджерВТ);
	ТаблицаЗапчастей = СформироватьТаблицуЗапчастей(МенеджерВТ);
	ТаблицаВО = СформироватьТаблицуВнешнихОснований();
	
	МенеджерВТ.Закрыть();
	
	ДвиженияПоРегистру_торо_ЗаявкиПоРемонтам(РежимПроведения, Отказ);
	ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТаблицаРемонтныхРабот, РежимПроведения, Отказ);
	ДвиженияПоРегистру_торо_ПлановыеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ);
	ДвиженияПоРегистру_торо_ПлановыеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ);
	ДвиженияПоРегистру_торо_ПлановыеЗатратыЗапчастей(РежимПроведения, ТаблицаЗапчастей, Отказ);
	ДвиженияПоРегистру_торо_ВнешниеОснованияДляРабот(РежимПроведения, ТаблицаВО, Отказ);
	ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(ТаблицаРемонтныхРабот, РежимПроведения, Отказ);
	ДвиженияПоРегистру_торо_ГарантийностьРемонтов();
	ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам();
	ДвиженияПоРегистру_торо_ИсполнителиВЗаявкахПоРемонтам(РежимПроведения, Отказ);
	
	торо_МТОСервер.ПоместитьРемонтыВРегистрДляПроверкиАктуальности(Ссылка);
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(ТаблицаРемонтныхРабот, РежимПроведения, Отказ)
	
	Движения.торо_ПроцентВыполненныхРабот.Записывать = Истина;
	
	Для каждого Стр Из ТаблицаРемонтныхРабот Цикл
	    Если ТипЗнч(Стр.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Движение = Движения.торо_ПроцентВыполненныхРабот.Добавить();
			Движение.Период = Дата;
			Движение.IDРемонта = Стр.РемонтыОборудования_ID;
			Движение.IDОперации = Стр.ID;
			Движение.Операция = Стр.РемонтнаяРабота;
			Движение.IDРодителя = Стр.Родитель_ID;
			Движение.Процент = Стр.Количество * 100;
			Движение.ВидДокумента = Перечисления.торо_ВидДокумента.ЗаявкаНаРемонт;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТаблицаРемонтныхРабот, РежимПроведения, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого Стр Из ТаблицаРемонтныхРабот Цикл
	
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.IDОперации = Стр.ID;
		Движение.IDРемонта = Стр.РемонтыОборудования_ID;
		Движение.Родитель_ID = Стр.Родитель_ID;
		Движение.ПроцентОпераций = Стр.Количество * 100;
		Движение.ПроцентРемонта = Стр.ПроцентНевыполненныхРабот;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗаявкиПоРемонтам(РежимПроведения, Отказ)
	Движения.торо_ЗаявкиПоРемонтам.Записывать = Истина;
	Для каждого СтрокаТЧ Из РемонтыОборудования Цикл
	    Движение = Движения.торо_ЗаявкиПоРемонтам.Добавить();
		Движение.Период = МоментВремени().Дата;
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументЗаявка = Ссылка;
		Движение.ВидРемонта = СтрокаТЧ.ВидРемонтныхРабот;
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
		ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект);
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПлановыеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ)
	
	Движения.торо_ПлановыеМатериальныеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьМатериальныеЗатраты ИЗ ТаблицаМатериальныхЗатрат Цикл
		Движение = Движения.торо_ПлановыеМатериальныеЗатратыРемонтныхРабот.Добавить();
		Движение.ID = ЗаписьМатериальныеЗатраты.ID;
		Движение.РемонтыОборудования_ID = ЗаписьМатериальныеЗатраты.РемонтыОборудования_ID;
		Движение.Количество = ЗаписьМатериальныеЗатраты.Количество;
		Движение.Номенклатура = ЗаписьМатериальныеЗатраты.Номенклатура;
		Движение.Период = ЗаписьМатериальныеЗатраты.ДатаНачала;
		Движение.РемонтнаяРабота = ЗаписьМатериальныеЗатраты.РемонтнаяРабота;
		Движение.ХарактеристикаНоменклатуры = ЗаписьМатериальныеЗатраты.ХарактеристикаНоменклатуры;
	КонецЦикла;
	                                         
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ПлановыеТрудовыеЗатратыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ПлановыеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ)
	
	Движения.торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьТрудовыеЗатраты ИЗ ТаблицаТрудовыхЗатрат Цикл
		Движение = Движения.торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.Добавить();
		Движение.РемонтыОборудования_ID = ЗаписьТрудовыеЗатраты.РемонтыОборудования_ID;
		Движение.ID = ЗаписьТрудовыеЗатраты.ID;
		Движение.Квалификация = ЗаписьТрудовыеЗатраты.Квалификация;
		Движение.Количество = ЗаписьТрудовыеЗатраты.Количество;
		Движение.Период = ЗаписьТрудовыеЗатраты.ДатаНачала;
		Движение.РемонтнаяРабота = ЗаписьТрудовыеЗатраты.РемонтнаяРабота;
		Движение.Сумма = ЗаписьТрудовыеЗатраты.Сумма;
		Движение.ВремяРаботы = ЗаписьТрудовыеЗатраты.ВремяРаботы;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПлановыеЗатратыЗапчастей(РежимПроведения, ТаблицаЗапчастей, Отказ)
	
	Движения.торо_ПлановыеЗатратыЗапчастей.Записывать = Истина;
	Для каждого СтрЗапчасть Из ТаблицаЗапчастей Цикл
		Движение = Движения.торо_ПлановыеЗатратыЗапчастей.Добавить();
		Движение.Период = СтрЗапчасть.Период;
		Движение.РемонтыОборудования_ID = СтрЗапчасть.РемонтыОборудования_ID;
		Движение.Номенклатура = СтрЗапчасть.Номенклатура;
		Движение.ХарактеристикаНоменклатуры = СтрЗапчасть.ХарактеристикаНоменклатуры;
		Движение.Количество = СтрЗапчасть.Количество;
	КонецЦикла; 	
	
КонецПроцедуры

// Движения по регистру "Внешние основания для работ", простановка Обработано = Истина
Процедура ДвиженияПоРегистру_торо_ВнешниеОснованияДляРабот(РежимПроведения, ТаблицаВО, Отказ)
	
	Движения.торо_ВнешниеОснованияДляРабот.Очистить();
	Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
	Для каждого ВнешнееОснование Из ТаблицаВО Цикл
		Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВнешнееОснование);
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Обработано = Истина;
	КонецЦикла; 	
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам()
	Движения.торо_ВсеДокументыПоРемонтам.Записывать = Истина;
	Движения.торо_ВсеДокументыПоРемонтам.Очистить();
	
	Для каждого СтрокаТЧ Из РемонтыОборудования Цикл
	    Движение = Движения.торо_ВсеДокументыПоРемонтам.Добавить();
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументПоРемонту = Ссылка;
		Движение.ДатаДокумента = Дата;
		Движение.Организация = Организация;
		Движение.Подразделение = Подразделение;
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ГарантийностьРемонтов()
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии") Тогда
		Возврат;
	КонецЕсли;
	
	Движения.торо_ГарантийностьРемонтов.Записывать = Истина;
	Движения.торо_ГарантийностьРемонтов.Очистить();
	
	Для каждого Строка Из РемонтыОборудования Цикл
		Движение = Движения.торо_ГарантийностьРемонтов.Добавить();
		Движение.Период = Дата;
		Движение.IDРемонта = Строка.ID;
		Движение.Гарантийный = Строка.ГарантийныйРемонт;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ИсполнителиВЗаявкахПоРемонтам(РежимПроведения, Отказ)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсполнителиПоРемонтам.РемонтыОборудования_ID КАК IDРемонта,
	               |	ИсполнителиПоРемонтам.Исполнитель КАК Исполнитель,
	               |	ИсполнителиПоРемонтам.УточнениеИсполнителя КАК УточнениеИсполнителя
	               |ПОМЕСТИТЬ ВТ_ИсполнителиПоРемонтам
	               |ИЗ
	               |	&ИсполнителиПоРемонтам КАК ИсполнителиПоРемонтам
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РемонтыОборудования.ID КАК IDРемонта
	               |ПОМЕСТИТЬ ВТ_РемонтыОборудования
	               |ИЗ
	               |	&РемонтыОборудования КАК РемонтыОборудования
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РемонтыОборудования.IDРемонта КАК IDРемонта,
	               |	ЕСТЬNULL(ВТ_ИсполнителиПоРемонтам.Исполнитель, НЕОПРЕДЕЛЕНО) КАК Исполнитель,
	               |	ЕСТЬNULL(ВТ_ИсполнителиПоРемонтам.УточнениеИсполнителя, НЕОПРЕДЕЛЕНО) КАК УточнениеИсполнителя
	               |ИЗ
	               |	ВТ_РемонтыОборудования КАК ВТ_РемонтыОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсполнителиПоРемонтам КАК ВТ_ИсполнителиПоРемонтам
	               |		ПО ВТ_РемонтыОборудования.IDРемонта = ВТ_ИсполнителиПоРемонтам.IDРемонта";
				   
	Запрос.УстановитьПараметр("РемонтыОборудования", РемонтыОборудования.Выгрузить());
	Запрос.УстановитьПараметр("ИсполнителиПоРемонтам", ИсполнителиПоРемонтам.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИсполнителей = РезультатЗапроса.Выбрать();
				   
	Движения.торо_ИсполнителиВЗаявкахПоРемонтам.Записывать = Истина;
	Пока ВыборкаИсполнителей.Следующий() Цикл
	    Движение = Движения.торо_ИсполнителиВЗаявкахПоРемонтам.Добавить();
		Движение.IDРемонта = ВыборкаИсполнителей.IDРемонта;
		Движение.ДокументЗаявка = Ссылка;
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаИсполнителей);
		Если ЗначениеЗаполнено(ВыборкаИсполнителей.УточнениеИсполнителя)
			Или Не ЗначениеЗаполнено(ВыборкаИсполнителей.Исполнитель) Тогда
		    Движение.УточнениеИсполнителя = ВыборкаИсполнителей.УточнениеИсполнителя;
		ИначеЕсли ТипЗнч(ВыборкаИсполнителей.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		    Движение.УточнениеИсполнителя = Справочники.торо_РемонтныеБригады.ПустаяСсылка();
		Иначе
			Движение.УточнениеИсполнителя = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДатуДокумента(Отказ)
	
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	торо_ВнешнееОснованиеДляРабот.Дата КАК Дата
	                      |ИЗ
	                      |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	                      |ГДЕ
	                      |	торо_ВнешнееОснованиеДляРабот.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ВыявленныеДефекты.Дата
	                      |ИЗ
	                      |	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	                      |ГДЕ
	                      |	торо_ВыявленныеДефекты.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ПланГрафикРемонта.Дата
	                      |ИЗ
	                      |	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	                      |ГДЕ
	                      |	торо_ПланГрафикРемонта.Ссылка В(&МассивДокОсн)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Запрос.УстановитьПараметр("МассивДокОсн",МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Дата <= Выборка.Дата Тогда
			ТекстСообщения = НСтр("ru = 'Дата документа должна быть больше даты документа-основания!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтыОборудования".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта,ВидРемонтныхРабот,ДатаНачала, ДатаОкончания");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтыОборудования", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Документы основания".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота,РемонтыОборудования_ID");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "МатериальныеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МатериальныеЗатраты", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Инструменты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиИнструментыИТехника(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Инструмент, Количество");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Инструменты", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ЗапчастиРемонта".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗапчасти(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗапчастиРемонта", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ТрудовыеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТрудовыеЗатраты(Отказ)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Квалификация");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ТрудовыеЗатраты", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ИсполнителиПоРемонтам".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиИсполнители(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Исполнитель");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ИсполнителиПоРемонтам", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "МерыБезопасности".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМерыБезопасности(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("МераБезопасности");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МерыБезопасности", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Выгружает данные в табличной части в таблицу значений, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуРемонтныхРабот(МенеджерВТ)
	
	ТаблицаРемонтныхРабот = РемонтныеРаботы.Выгрузить();
	
	КЧ = Новый КвалификаторыЧисла(5, 2);
	МассивТипов = Новый Массив(1);
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(МассивТипов, , ,КЧ);
	ТаблицаРемонтныхРабот.Колонки.Добавить("ПроцентНевыполненныхРабот", ОписаниеТиповЧ);
		
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповД = Новый ОписаниеТипов(МассивТипов, , ,КД);
	ТаблицаРемонтныхРабот.Колонки.Добавить("ДатаНачалаРемонта", ОписаниеТиповД);
	
	ТаблицаРемонтныхРабот.Индексы.Добавить("Родитель_ID");
	ТаблицаРемонтныхРабот.Индексы.Добавить("РемонтыОборудования_ID");
	
	Для каждого Строка Из РемонтыОборудования Цикл
		
		МассивСтрок = ТаблицаРемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID",Строка.ID));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			СтрокаМассива.ДатаНачалаРемонта = Строка.ДатаНачала;
		КонецЦикла;
		
	КонецЦикла; 
		
	торо_Ремонты.ЗаполнитьПроцентыНевыполненныхРаботПоНормамВремени("", ТаблицаРемонтныхРабот);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
					|	ТаблицаРР.ID,	
					|   ТаблицаРР.РемонтнаяРабота,
					|	ТаблицаРР.Количество,
					|	ТаблицаРР.РемонтыОборудования_ID,
					|   ТаблицаРР.ПроцентНевыполненныхРабот,
					|   ТаблицаРР.Родитель_ID
					|ПОМЕСТИТЬ ТаблицаРемонтныхРабот
					|ИЗ &ТаблицаРР КАК ТаблицаРР
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	ТаблицаРР.ID,
					|	ТаблицаРР.РемонтыОборудования_ID
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ
					|	ТаблицаРемонтовОборудования.ОбъектРемонта,	
					|   ТаблицаРемонтовОборудования.ID,
					|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот,
					|	ТаблицаРемонтовОборудования.ДатаНачала,
					|   ТаблицаРемонтовОборудования.ДатаОкончания,
					|	ТаблицаРемонтовОборудования.ДокументИсточник
					|ПОМЕСТИТЬ ТаблицаРемОборуд
					|ИЗ 
					|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК ТаблицаРемонтовОборудования
					|ГДЕ
					|	ТаблицаРемонтовОборудования.Ссылка = &Ссылка
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ
					|	ТаблицаРемонтныхРабот.ID,	
					|   ТаблицаРемонтныхРабот.РемонтнаяРабота,
					|	ТаблицаРемонтныхРабот.Количество,
					|	ТаблицаРемонтныхРабот.РемонтыОборудования_ID,
					|   ТаблицаРемонтныхРабот.ПроцентНевыполненныхРабот,
					|	ТаблицаРемонтныхРабот.Родитель_ID,
					|	ТаблицаРемонтовОборудования.ОбъектРемонта,	
					|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот,
					|	ТаблицаРемонтовОборудования.ДатаНачала,
					|   ТаблицаРемонтовОборудования.ДатаОкончания,
					|	ТаблицаРемонтовОборудования.ДокументИсточник КАК ДокументОснование
					|ПОМЕСТИТЬ ТаблицаРемРабот
					|ИЗ ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемОборуд КАК ТаблицаРемонтовОборудования
					|		ПО ТаблицаРемонтныхРабот.РемонтыОборудования_ID = ТаблицаРемонтовОборудования.ID
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ
					|	ТаблицаРемРабот.ID,	
					|   ТаблицаРемРабот.РемонтнаяРабота,
					|	ТаблицаРемРабот.Количество,
					|	ТаблицаРемРабот.РемонтыОборудования_ID,
					|   ТаблицаРемРабот.ПроцентНевыполненныхРабот,
					|	ТаблицаРемРабот.Родитель_ID,
					|	ТаблицаРемРабот.ОбъектРемонта,	
					|	ТаблицаРемРабот.ВидРемонтныхРабот,
					|	ТаблицаРемРабот.ДатаНачала,
					|   ТаблицаРемРабот.ДатаОкончания,
					|	ТаблицаРемРабот.ДокументОснование
					|ИЗ 
					|	ТаблицаРемРабот КАК ТаблицаРемРабот
					|;
					|
					|УНИЧТОЖИТЬ ТаблицаРемонтныхРабот
					|;
					|
					|УНИЧТОЖИТЬ ТаблицаРемОборуд
					|;
					|";
									
	Запрос.УстановитьПараметр("ТаблицаРР",ТаблицаРемонтныхРабот);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПодготовитьТаблицуРемонтныхРабот()

Функция СформироватьТаблицуВнешнихОснований()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОснований.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втВнешниеОснования
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ТаблицаОснований.ДокументОснование) = ТИП(Документ.торо_ВнешнееОснованиеДляРабот)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗакрываемыеПредписания.ДокументВнешнегоОснования
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ЗакрываемыеПредписания КАК ТаблицаЗакрываемыеПредписания
	|ГДЕ
	|	ТаблицаЗакрываемыеПредписания.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтыОборудования.ID КАК ID
	|ПОМЕСТИТЬ втРемонтыОборудования
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК ТаблицаРемонтыОборудования
	|ГДЕ
	|	ТаблицаРемонтыОборудования.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗакрываемыеПредписания.ID
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ЗакрываемыеПредписания КАК ТаблицаЗакрываемыеПредписания
	|ГДЕ
	|	ТаблицаЗакрываемыеПредписания.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ВнешниеОснованияДляРабот.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВнешниеОснованияДляРабот.ID КАК ID
	|ПОМЕСТИТЬ втДанныеВнешнихОснований
	|ИЗ
	|	РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВнешниеОснования КАК втВнешниеОснования
	|		ПО (втВнешниеОснования.ДокументОснование = торо_ВнешниеОснованияДляРабот.Регистратор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРемонтыОборудования КАК втРемонтыОборудования
	|		ПО торо_ВнешниеОснованияДляРабот.ID = втРемонтыОборудования.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID,
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВнешниеОснованияДляРабот.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВнешниеОснованияДляРабот.ID КАК ID,
	|	торо_ВнешниеОснованияДляРабот.Описание КАК Описание,
	|	торо_ВнешниеОснованияДляРабот.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	торо_ВнешниеОснованияДляРабот.Организация КАК Организация,
	|	торо_ВнешниеОснованияДляРабот.Подразделение КАК Подразделение,
	|	торо_ВнешниеОснованияДляРабот.ОписаниеЯзык1 КАК ОписаниеЯзык1,
	|	торо_ВнешниеОснованияДляРабот.ОписаниеЯзык2 КАК ОписаниеЯзык2,
	|	торо_ВнешниеОснованияДляРабот.РемонтыОборудования_id КАК РемонтыОборудования_id
	|ИЗ
	|	втДанныеВнешнихОснований КАК втДанныеВнешнихОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	|		ПО втДанныеВнешнихОснований.ID = торо_ВнешниеОснованияДляРабот.ID
	|			И (втДанныеВнешнихОснований.ОбъектРемонта = торо_ВнешниеОснованияДляРабот.ОбъектРемонта
	|				И НЕ торо_ВнешниеОснованияДляРабот.Обработано)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()
 
// Функция формирует таблицу плановых материальных затрат для движения документа по регистру 
// "торо_ПлановыеМатериальныеЗатратыРемонтныхРабот".
Функция СформироватьТаблицуМатериальныхЗатрат(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаМатериальныхЗатрат.ID,
	               |	ТаблицаМатериальныхЗатрат.РемонтыОборудования_ID,
	               |	ТаблицаМатериальныхЗатрат.Номенклатура,
	               |	ТаблицаМатериальныхЗатрат.Количество,
	               |	ТаблицаМатериальныхЗатрат.ХарактеристикаНоменклатуры,
	               |	ВЫРАЗИТЬ(ТаблицаМатериальныхЗатрат.ЕдиницаИзмерения КАК Справочник.УпаковкиНоменклатуры) КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ ТаблицаМатЗатрат
				   |ИЗ
				   |	Документ.торо_ЗаявкаНаРемонт.МатериальныеЗатраты КАК ТаблицаМатериальныхЗатрат
				   |ГДЕ
				   |	ТаблицаМатериальныхЗатрат.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаМатериальныхЗатрат.РемонтыОборудования_ID,
	               |	ТаблицаМатериальныхЗатрат.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЕСТЬNULL(торо_ЗаявкаНаРемонтМатериальныеЗатраты.ЕдиницаИзмерения.Коэффициент, 0) = 0
	               |				ТОГДА 1
	               |			ИНАЧЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.ЕдиницаИзмерения.Коэффициент
	               |		КОНЕЦ * торо_ЗаявкаНаРемонтМатериальныеЗатраты.Количество) КАК Количество,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДокументОснование,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID
	               |ИЗ
	               |	ТаблицаМатЗатрат КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемРабот КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	               |		ПО торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.ID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДокументОснование,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID
				   |;
				   |
				   |УНИЧТОЖИТЬ ТаблицаМатЗатрат
				   |;";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	                                                                                
	Возврат Запрос.Выполнить().Выгрузить();
	                                                                              
КонецФункции // СформироватьТаблицуМатериальныхЗатрат()

// Функция формирует таблицу плановых материальных затрат для движения документа по регистру 
// "торо_ПлановыеТрудовыеЗатратыРемонтныхРабот".
//
// Параметры:
//  ТаблицаРемонтныхРабот - ТаблицаЗначений - таблица ремонтных работ.
//
Функция СформироватьТаблицуТрудовыхЗатрат(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТрудовыхЗатрат.ID,
	               |	ТаблицаТрудовыхЗатрат.Квалификация,
	               |	ТаблицаТрудовыхЗатрат.Количество,
	               |	ТаблицаТрудовыхЗатрат.ВремяРаботы,
	               |	ТаблицаТрудовыхЗатрат.РемонтыОборудования_ID
	               |ПОМЕСТИТЬ ТаблицаТрудЗатрат
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК ТаблицаТрудовыхЗатрат
				   |ГДЕ
				   |	ТаблицаТрудовыхЗатрат.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаТрудовыхЗатрат.ID,
	               |	ТаблицаТрудовыхЗатрат.РемонтыОборудования_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемРабот.ДатаНачала КАК ДатаНач,
	               |	КурсыВалют.Период,
	               |	КурсыВалют.Кратность,
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта
	               |ПОМЕСТИТЬ ТабДатВалют
	               |ИЗ
	               |	ТаблицаРемРабот КАК ТаблицаРемРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ПО (КурсыВалют.Период <= ТаблицаРемРабот.ДатаНачала)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КурсыВалют.Валюта,
	               |	ДатаНач,
	               |	КурсыВалют.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДатВалют.ДатаНач,
	               |	ТабДатВалют.Валюта,
	               |	МАКСИМУМ(ТабДатВалют.Период) КАК Период
	               |ПОМЕСТИТЬ ТабМаксДатВалют
	               |ИЗ
	               |	ТабДатВалют КАК ТабДатВалют
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабДатВалют.ДатаНач,
	               |	ТабДатВалют.Валюта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабДатВалют.Валюта,
	               |	ТабДатВалют.ДатаНач,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТабДатВалют.ДатаНач,
	               |	ТабДатВалют.Курс,
	               |	ТабДатВалют.Кратность,
	               |	ТабДатВалют.Валюта,
	               |	ТабДатВалют.Период
	               |ПОМЕСТИТЬ ТабКурсовВалют
	               |ИЗ
	               |	ТабДатВалют КАК ТабДатВалют
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабМаксДатВалют КАК ТабМаксДатВалют
	               |		ПО ТабДатВалют.Валюта = ТабМаксДатВалют.Валюта
	               |			И ТабДатВалют.ДатаНач = ТабМаксДатВалют.ДатаНач
	               |			И ТабДатВалют.Период = ТабМаксДатВалют.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабДатВалют.Валюта,
	               |	ТабДатВалют.ДатаНач
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемРабот.ДатаНачала КАК ДатаНач,
	               |	Квалификации.Период,
	               |	Квалификации.Стоимость,
	               |	Квалификации.Валюта,
	               |	Квалификации.Квалификация
	               |ПОМЕСТИТЬ ТабДатКвалификаций
	               |ИЗ
	               |	ТаблицаРемРабот КАК ТаблицаРемРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК Квалификации
	               |		ПО (Квалификации.Период <= ТаблицаРемРабот.ДатаНачала)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Квалификации.Квалификация,
	               |	ДатаНач,
	               |	Квалификации.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДатКвалификаций.ДатаНач,
	               |	ТабДатКвалификаций.Квалификация,
	               |	МАКСИМУМ(ТабДатКвалификаций.Период) КАК Период
	               |ПОМЕСТИТЬ ТабМаксДатКвалификаций
	               |ИЗ
	               |	ТабДатКвалификаций КАК ТабДатКвалификаций
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабДатКвалификаций.ДатаНач,
	               |	ТабДатКвалификаций.Квалификация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабДатКвалификаций.Квалификация,
	               |	ТабДатКвалификаций.ДатаНач,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТабДатКвалификаций.ДатаНач,
	               |	ТабДатКвалификаций.Валюта,
	               |	ТабДатКвалификаций.Стоимость,
	               |	ТабДатКвалификаций.Квалификация
	               |ПОМЕСТИТЬ ТабСтоимостейКвалификаций
	               |ИЗ
	               |	ТабДатКвалификаций КАК ТабДатКвалификаций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабМаксДатКвалификаций КАК ТабМаксДатКвалификаций
	               |		ПО ТабДатКвалификаций.Квалификация = ТабМаксДатКвалификаций.Квалификация
	               |			И ТабДатКвалификаций.ДатаНач = ТабМаксДатКвалификаций.ДатаНач
	               |			И ТабДатКвалификаций.Период = ТабМаксДатКвалификаций.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабДатКвалификаций.Валюта,
	               |	ТабДатКвалификаций.ДатаНач
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабСтоимостейКвалификаций.ДатаНач,
	               |	ТабСтоимостейКвалификаций.Валюта,
	               |	ТабСтоимостейКвалификаций.Стоимость,
	               |	ТабСтоимостейКвалификаций.Квалификация,
	               |	ЕСТЬNULL(ТабКурсовВалют.Курс, 0) КАК Курс,
	               |	ЕСТЬNULL(ТабКурсовВалют.Кратность, 1) КАК Кратность
	               |ПОМЕСТИТЬ ТабСтоимостейКвалификацийИКурсов
	               |ИЗ
	               |	ТабСтоимостейКвалификаций КАК ТабСтоимостейКвалификаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабКурсовВалют КАК ТабКурсовВалют
	               |		ПО ТабСтоимостейКвалификаций.Валюта = ТабКурсовВалют.Валюта
	               |			И ТабСтоимостейКвалификаций.ДатаНач = ТабКурсовВалют.ДатаНач
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабСтоимостейКвалификаций.Квалификация,
	               |	ТабСтоимостейКвалификаций.ДатаНач
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДокументОснование,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы
	               |ПОМЕСТИТЬ торо_ЗаявкаНаРемонт
	               |ИЗ
	               |	ТаблицаТрудЗатрат КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемРабот КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	               |		ПО торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.ID
	               |			И торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонт.Квалификация,
	               |	торо_ЗаявкаНаРемонт.ID,
	               |	торо_ЗаявкаНаРемонт.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонт.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонт.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонт.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонт.ДатаНачала,
	               |	торо_ЗаявкаНаРемонт.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонт.ДокументОснование,
	               |	торо_ЗаявкаНаРемонт.Родитель_ID,
	               |	торо_ЗаявкаНаРемонт.ВремяРаботы,
	               |	СУММА(ЕСТЬNULL(ТабСтоимостейКвалификацийИКурсов.Стоимость, 0) * ЕСТЬNULL(ТабСтоимостейКвалификацийИКурсов.Курс, 0) / ЕСТЬNULL(ТабСтоимостейКвалификацийИКурсов.Кратность, 1) * торо_ЗаявкаНаРемонт.ВремяРаботы / 3600 * торо_ЗаявкаНаРемонт.Количество) КАК Сумма,
	               |	СУММА(торо_ЗаявкаНаРемонт.Количество) КАК Количество
	               |ИЗ
	               |	торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтоимостейКвалификацийИКурсов КАК ТабСтоимостейКвалификацийИКурсов
	               |		ПО торо_ЗаявкаНаРемонт.Квалификация = ТабСтоимостейКвалификацийИКурсов.Квалификация
	               |			И торо_ЗаявкаНаРемонт.ДатаНачала = ТабСтоимостейКвалификацийИКурсов.ДатаНач
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонт.Квалификация,
	               |	торо_ЗаявкаНаРемонт.ID,
	               |	торо_ЗаявкаНаРемонт.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонт.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонт.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонт.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонт.ДатаНачала,
	               |	торо_ЗаявкаНаРемонт.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонт.ДокументОснование,
	               |	торо_ЗаявкаНаРемонт.Родитель_ID,
	               |	торо_ЗаявкаНаРемонт.ВремяРаботы
				   |;
				   |
				   |УНИЧТОЖИТЬ торо_ЗаявкаНаРемонт
				   |;
				   |
				   |УНИЧТОЖИТЬ ТабСтоимостейКвалификацийИКурсов
				   |;
				   |
				   |УНИЧТОЖИТЬ ТабСтоимостейКвалификаций
				   |;
				   |
				   |УНИЧТОЖИТЬ ТабМаксДатКвалификаций
				   |;
				   |
				   |УНИЧТОЖИТЬ ТаблицаТрудЗатрат
				   |;
				   |
				   |УНИЧТОЖИТЬ ТабДатВалют
				   |;
				   |
				   |УНИЧТОЖИТЬ ТабМаксДатВалют
				   |;
				   |
				   |УНИЧТОЖИТЬ ТабКурсовВалют
				   |;
				   |
				   |УНИЧТОЖИТЬ ТабДатКвалификаций
				   |;";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьТаблицуМатериальныхЗатрат()

// Функция формирует таблицу плановых затрат запчастей для движения документа по регистру 
// "торо_ПлановыеЗатратыЗапчастей".
//
// Параметры:
//  ТаблицаРемонтныхРабот - ТаблицаЗначений - таблица ремонтных работ.
//
Функция СформироватьТаблицуЗапчастей(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаЗапчастей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ТаблицаЗапчастей.Номенклатура КАК Номенклатура,
	               |	ТаблицаЗапчастей.Количество КАК Количество,
	               |	ТаблицаЗапчастей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаЗапчастей.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ ТаблицаЗатратЗапчастей
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.ЗапчастиРемонта КАК ТаблицаЗапчастей
	               |ГДЕ
	               |	ТаблицаЗапчастей.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаРемРабот.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ТаблицаРемРабот.ДатаНачала КАК ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтовОборудования
	               |ИЗ
	               |	ТаблицаРемРабот КАК ТаблицаРемРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗатратЗапчастей.Номенклатура КАК Номенклатура,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ТаблицаЗатратЗапчастей.ЕдиницаИзмерения.Коэффициент, 0) = 0
	               |				ТОГДА 1
	               |			ИНАЧЕ ТаблицаЗатратЗапчастей.ЕдиницаИзмерения.Коэффициент
	               |		КОНЕЦ * ТаблицаЗатратЗапчастей.Количество) КАК Количество,
	               |	ТаблицаЗатратЗапчастей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаЗатратЗапчастей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала КАК Период
	               |ИЗ
	               |	ТаблицаЗатратЗапчастей КАК ТаблицаЗатратЗапчастей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемонтовОборудования КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	               |		ПО ТаблицаЗатратЗапчастей.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаЗатратЗапчастей.Номенклатура,
	               |	ТаблицаЗатратЗапчастей.ХарактеристикаНоменклатуры,
	               |	ТаблицаЗатратЗапчастей.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаЗатратЗапчастей";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	                                                                                 
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// закрытие предписаний (по таблице ремонты оборудования)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтыОборудования.Выгрузить(Новый Структура("ЗакрываетПредписание",Истина),"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// закрытие предписаний (по таблице закрываемых предписаний)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗакрываемыеПредписания.Выгрузить(,"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// подготовка таблицы трудозатрат
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КурсыВалют");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	// подготовка таблицы трудозатрат
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_СтоимостьЧасаКвалификации");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = ТрудовыеЗатраты;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Квалификация", "Квалификация");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ПроверитьДублиИсполнителей(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Исполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	Исполнители.Исполнитель КАК Исполнитель,
	|	Исполнители.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	&Исполнители КАК Исполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Исполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_Исполнители.Исполнитель КАК Исполнитель,
	|	ВТ_Исполнители.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	СУММА(ВТ_Исполнители.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ДублиИсполнителей
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Исполнители.РемонтыОборудования_ID,
	|	ВТ_Исполнители.Исполнитель,
	|	ВТ_Исполнители.УточнениеИсполнителя
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Исполнители.Количество) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РемонтыОборудования.ID КАК ID,
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ ВТ_РемонтыОборудования
	|ИЗ
	|	&РемонтыОборудования КАК РемонтыОборудования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДублиИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ДублиИсполнителей.Исполнитель КАК Исполнитель,
	|	ВТ_ДублиИсполнителей.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
	|ИЗ
	|	ВТ_ДублиИсполнителей КАК ВТ_ДублиИсполнителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РемонтыОборудования КАК РемонтыОборудования
	|		ПО ВТ_ДублиИсполнителей.РемонтыОборудования_ID = РемонтыОборудования.ID";
	
	Запрос.УстановитьПараметр("Исполнители", ИсполнителиПоРемонтам.Выгрузить());
	Запрос.УстановитьПараметр("РемонтыОборудования", РемонтыОборудования.Выгрузить());
	
	ШаблонСообщения = НСтр("ru='Для ремонта ""%1"" дублируется исполнитель ""%2"" (""%3"").'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.Исполнитель, Выборка.УточнениеИсполнителя);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли