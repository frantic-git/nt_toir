#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем БезусловнаяЗапись Экспорт;	// Отключает проверки при записи документа
перем СтруктураДанных Экспорт;  // Структура, хранящая данные для работы с уведомлениями.

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание, СтандартнаяОбработка)
	
	торо_ЗаполнениеДокументов20.ЗаполнениеНаОсновании(Основание, ЭтотОбъект, Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если РемонтыОборудования.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части ""Ремонты оборудования"" нет строк.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// Получение удаленных ремонтов при перепроведении документа. Используются при формировании записей
	// регистров торо_ПлановыеИсполнителиРемонтов, торо_ОбщиеДанныеПоРемонтам, торо_СвернутыеФактическиеДатыРемонтов.
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивIDДокумента = РемонтыОборудования.ВыгрузитьКолонку("ID");
		МассивУдаленныхID = торо_Ремонты.ПолучитьIDУдаленныхРемонтовДокумента(МассивIDДокумента, Ссылка);
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", МассивУдаленныхID);
	Иначе
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", Новый Массив());
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если Не Отказ И ДокументыОснования.Количество()>0 Тогда
		ПроверитьДатуДокумента(Отказ);
		ПроверитьПроведениеДокументовОснований(Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		РемонтыОборудованияТаблицаЗначений = РемонтыОборудования.Выгрузить(); 
		РемонтыОтсутствующиеВДокументахИсточниках = торо_Ремонты.ПроверитьНаличиеРемонтовВДокументахИсточникахПоIDРемонта(РемонтыОборудованияТаблицаЗначений);
		
		Если НЕ РемонтыОтсутствующиеВДокументахИсточниках = Неопределено Тогда
			
			Для каждого Ремонт Из РемонтыОтсутствующиеВДокументахИсточниках Цикл
				ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" отсутствует соответствующий ремонт в документе основании ""%2"".'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Ремонт.ОбъектРемонта, Ремонт.ДокументИсточник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);			
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		|	РемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	РемонтыОборудования.ID КАК ID
		|ПОМЕСТИТЬ РемонтыОборудования
		|ИЗ
		|	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК РемонтыОборудования
		|ГДЕ
		|	РемонтыОборудования.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_АктыПоРемонтам.IDРемонта КАК ID,
		|	торо_АктыПоРемонтам.Регистратор КАК Ссылка
		|ПОМЕСТИТЬ АктыПоРемонтам
		|ИЗ
		|	РегистрСведений.торо_АктыПоРемонтам КАК торо_АктыПоРемонтам
		|ГДЕ
		|	торо_АктыПоРемонтам.IDРемонта В
		|			(ВЫБРАТЬ
		|				РемонтыОборудования.ID
		|			ИЗ
		|				РемонтыОборудования КАК РемонтыОборудования)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	торо_АктыПоРемонтам.IDРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктыПоРемонтам.ID КАК ID,
		|	АктыПоРемонтам.Ссылка КАК Ссылка,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт КАК РемонтЗавершен
		|ПОМЕСТИТЬ торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		|ИЗ
		|	АктыПоРемонтам КАК АктыПоРемонтам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		|		ПО АктыПоРемонтам.Ссылка = торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка
		|			И АктыПоРемонтам.ID = торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АктыПоРемонтам.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		|	РемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК ДокументАкт,
		|	РемонтыОборудования.ID КАК ID,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.РемонтЗавершен КАК РемонтЗавершен,
		|	ВЫБОР
		|		КОГДА торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК АктыОтсутствуют
		|ИЗ
		|	РемонтыОборудования КАК РемонтыОборудования
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		|		ПО РемонтыОборудования.ID = торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТабРезультат = Запрос.Выполнить().Выгрузить();
		
		ПрисутствуютВсеАкты = Истина;
		Для Каждого Строка Из ТабРезультат Цикл
			
			Ошибка = Ложь;
			Если Строка.АктыОтсутствуют Тогда
				Ошибка = Истина;
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Невозможно провести документ по причине того, что для ремонта ""%1"" для ""%2"" отсутствуют акты о выполнении этапа работ!'"),
				Строка.ВидРемонтныхРабот,Строка.ОбъектРемонта);
			ИначеЕсли ЗакрываемыеАкты.НайтиСтроки(Новый Структура("ID, ДокументАкт", Строка.ID, Строка.ДокументАкт)).Количество() = 0 Тогда
				Ошибка = Истина;
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Невозможно провести документ по причине того, что для ремонта ""%1"" для ""%2"" в документе отсутствует ""%3""! Необходимо обновить таблицу закрываемых по ремонту актов!'"),
				Строка.ВидРемонтныхРабот,Строка.ОбъектРемонта,Строка.ДокументАкт);
			КонецЕсли;
			
			Если Ошибка Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Отказ Тогда
			IDРемонтов = ОбщегоНазначения.ВыгрузитьКолонку(РемонтыОборудования, "ID");
			
			Для Каждого Ремонт Из IDРемонтов Цикл
				НайденныеСтроки = ТабРезультат.НайтиСтроки(Новый Структура("ID", Ремонт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Ошибка = Истина;
					Для Каждого Строка Из НайденныеСтроки Цикл
						Если ЗначениеЗаполнено(Строка.РемонтЗавершен) И Строка.РемонтЗавершен Тогда
							Ошибка = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Ошибка Тогда
						ШаблонСообщения = НСтр("ru = 'Невозможно провести документ по причине того, что для ремонта ""%1"" по объекту ""%2"" отсутствует хотя бы один акт о выполнении этапа работ с признаком завершения!'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, НайденныеСтроки[0].ВидРемонтныхРабот,НайденныеСтроки[0].ОбъектРемонта);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам();
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам()
	Движения.торо_ВсеДокументыПоРемонтам.Записывать = Истина;
	Движения.торо_ВсеДокументыПоРемонтам.Очистить();
	
	Для каждого СтрокаТЧ Из РемонтыОборудования Цикл
	    Движение = Движения.торо_ВсеДокументыПоРемонтам.Добавить();
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументПоРемонту = Ссылка;
		Движение.ДатаДокумента = Дата;
		Движение.Организация = Организация;
		Движение.Подразделение = Подразделение;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДатуДокумента(Отказ)
	
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	торо_АктОВыполненииЭтапаРабот.Дата КАК Дата
	                      |ИЗ
	                      |	Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	                      |ГДЕ
	                      |	торо_АктОВыполненииЭтапаРабот.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ВнешнееОснованиеДляРабот.Дата
	                      |ИЗ
	                      |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	                      |ГДЕ
	                      |	торо_ВнешнееОснованиеДляРабот.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ВыявленныеДефекты.Дата
	                      |ИЗ
	                      |	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	                      |ГДЕ
	                      |	торо_ВыявленныеДефекты.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ЗаявкаНаРемонт.Дата
	                      |ИЗ
	                      |	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	                      |ГДЕ
	                      |	торо_ЗаявкаНаРемонт.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ПланГрафикРемонта.Дата
	                      |ИЗ
	                      |	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	                      |ГДЕ
	                      |	торо_ПланГрафикРемонта.Ссылка В(&МассивДокОсн)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Дата <= Выборка.Дата Тогда
		ТекстСообщения = НСтр("ru = 'Дата документа должна быть больше даты документа основания!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПроведениеДокументовОснований (Отказ)
	
	ШаблонСообщения = НСтр("ru = 'Есть непроведенный документ основание: %1'");
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования,"ДокументОснование");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      	|	торо_ВнешнееОснованиеДляРабот.Ссылка КАК Ссылка,
	                      	|	торо_ВнешнееОснованиеДляРабот.Проведен КАК Проведен
	                      	|ИЗ
	                      	|	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	                      	|ГДЕ
	                      	|	торо_ВнешнееОснованиеДляРабот.Ссылка В(&МассивДокОсн)
	                      	|
	                      	|ОБЪЕДИНИТЬ ВСЕ
	                      	|
	                      	|ВЫБРАТЬ
	                      	|	торо_ВыявленныеДефекты.Ссылка,
	                      	|	торо_ВыявленныеДефекты.Проведен
	                      	|ИЗ
	                      	|	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	                      	|ГДЕ
	                      	|	торо_ВыявленныеДефекты.Ссылка В(&МассивДокОсн)
	                      	|
	                      	|ОБЪЕДИНИТЬ ВСЕ
	                      	|
	                      	|ВЫБРАТЬ
	                      	|	торо_ЗаявкаНаРемонт.Ссылка,
	                      	|	торо_ЗаявкаНаРемонт.Проведен
	                      	|ИЗ
	                      	|	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	                      	|ГДЕ
	                      	|	торо_ЗаявкаНаРемонт.Ссылка В(&МассивДокОсн)
	                      	|
	                      	|ОБЪЕДИНИТЬ ВСЕ
	                      	|
	                      	|ВЫБРАТЬ
	                      	|	торо_АктОВыполненииЭтапаРабот.Ссылка,
	                      	|	торо_АктОВыполненииЭтапаРабот.Проведен
	                      	|ИЗ
	                      	|	Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	                      	|ГДЕ
	                      	|	торо_АктОВыполненииЭтапаРабот.Ссылка В(&МассивДокОсн)
	                      	|
	                      	|ОБЪЕДИНИТЬ ВСЕ
	                      	|
	                      	|ВЫБРАТЬ
	                      	|	торо_ПланГрафикРемонта.Ссылка,
	                      	|	торо_ПланГрафикРемонта.Проведен
	                      	|ИЗ
	                      	|	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	                      	|ГДЕ
	                      	|	торо_ПланГрафикРемонта.Ссылка В(&МассивДокОсн)");
	
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Выборка.Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли