
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;   
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);
	
	ЗаполнитьСписокАктов();

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АктПриемкиОборудования;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ДокументыОснования"); 
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.ДокументыОснования.Количество() > 0 И Объект.РемонтыОборудования.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--

	ЗаполнитьСписокАктов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборРемонтов") Тогда
		ОбработкаВыбораРемонтовНаСервере(ВыбранноеЗначение.АдресХранилища);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРемонтовНаСервере(АдресХранилища)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Для Каждого ЭлементВыбранного Из ВыбранноеЗначение Цикл
		
		Если Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ЭлементВыбранного.СтрокаРемонтовОборудования.ID)).Количество() = 0 Тогда
			
			НС = Объект.РемонтыОборудования.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ЭлементВыбранного.СтрокаРемонтовОборудования);
			НС.ДокументИсточник = ЭлементВыбранного.ДокументОснование;
			
			Если Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ЭлементВыбранного.ДокументОснование)).Количество() = 0 Тогда
				Объект.ДокументыОснования.Добавить().ДокументОснование = ЭлементВыбранного.ДокументОснование;
			КонецЕсли;
			
			ЕстьРеквизитКомиссияВОсновании = ТипЗнч(ЭлементВыбранного.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")
			ИЛИ ТипЗнч(ЭлементВыбранного.ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
			ИЛИ ТипЗнч(ЭлементВыбранного.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот");
			
			Если НЕ ЗначениеЗаполнено(Объект.Комиссия) И ЕстьРеквизитКомиссияВОсновании Тогда
				Объект.Комиссия = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ЭлементВыбранного.ДокументОснование, "Комиссия");	
			КонецЕсли;
			
			ЗаполнитьСписокАктов(ЭлементВыбранного.СтрокаРемонтовОборудования.ID);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Элементы.ЗакрываемыеАкты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ТекДанные.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		УдаляемыеСтроки = Объект.ЗакрываемыеАкты.НайтиСтроки(Новый Структура("ID", ТекДанные.ID));
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Объект.ЗакрываемыеАкты.Удалить(Объект.ЗакрываемыеАкты.Индекс(Строка));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ОткрытьДокументСПозиционированиемНаРемонте(ТекДанные.ДокументИсточник, ТекДанные.ID);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрываемыеАкты

&НаКлиенте
Процедура ЗакрываемыеАктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаОбъекта", Новый Структура("Ключ, ID", ТекДанные.ДокументАкт, ТекДанные.ID), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
				Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
					Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
					СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа =ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ДокументыОснования = Новый СписокЗначений;
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ДокументыОснования.Добавить(СтрокаДО.ДокументОснование);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ДокументыОснования", ДокументыОснования);
	
	ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот", 
		ПараметрыФормы, ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗакрываемыеАктыПоРемонту(Команда)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		УдалитьЗакрываемыеАктыПоID(ТекДанные.ID);
		ОбновитьЗакрываемыеАктыНаСервере(ТекДанные.ID);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеЗакрываемыеАкты(Команда)

	ОбновитьЗакрываемыеАктыНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьАктВверх(Команда)
	
	ТекСтрока = Элементы.ЗакрываемыеАкты.ТекущиеДанные;
	ПереместитьАкт(ТекСтрока, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьАктВниз(Команда)
	
	ТекСтрока = Элементы.ЗакрываемыеАкты.ТекущиеДанные;
	ПереместитьАкт(ТекСтрока, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьАктыПоВозрастанию(Команда)
	
	СортироватьАкты(" Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьАктыПоУбыванию(Команда)
	
	СортироватьАкты(" Убыв");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ОткрытьДокументСПозиционированиемНаРемонте(Документ, ID)

	Если ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ОткрытьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ОткрытьФорму("Документ.торо_ВыявленныеДефекты.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ОткрытьФорму("Документ.торо_ПланГрафикРемонта.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	КонецЕсли;

КонецПроцедуры	
	
&НаКлиенте
Процедура УдалитьЗакрываемыеАктыПоID(ID)
	
	НайденныеСтроки = Объект.ЗакрываемыеАкты.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.ЗакрываемыеАкты.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьАкты(Направление)
	
	Объект.ЗакрываемыеАкты.Сортировать(СтрЗаменить(Элементы.ЗакрываемыеАкты.ТекущийЭлемент.Имя, "ЗакрываемыеАкты", "") + Направление);
	Элементы.ЗакрываемыеАкты.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьАкт(ТекСтрока, ИзменениеПозиции)

	Если ТекСтрока <> Неопределено Тогда
		НайденныеСтроки = Объект.ЗакрываемыеАкты.НайтиСтроки(Новый Структура("ID",ТекСтрока.ID));
		
		ИндексТекСтроки = Объект.ЗакрываемыеАкты.Индекс(ТекСтрока);
		
		ВГраница = НайденныеСтроки.ВГраница();
		Сдвинуть = Ложь;
		Для Сч = 0 По ВГраница Цикл
			Если НайденныеСтроки[Сч].ДокументАкт = ТекСтрока.ДокументАкт И ?(ИзменениеПозиции > 0, Сч <> ВГраница, Сч <> 0) Тогда
				НужноеСмещение = Объект.ЗакрываемыеАкты.Индекс(НайденныеСтроки[Сч + ИзменениеПозиции]) - ИндексТекСтроки;
				Сдвинуть = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Сдвинуть Тогда
			Объект.ЗакрываемыеАкты.Сдвинуть(ИндексТекСтроки, НужноеСмещение);
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗакрываемыеАктыНаСервере(ID = Неопределено)
	
	Если ID = Неопределено Тогда
		Объект.ЗакрываемыеАкты.Очистить();
		ID = Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	КонецЕсли;
	
	ЗаполнитьСписокАктов(ID);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАктов(ID = Неопределено)
	
	Если ID = Неопределено Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ЗакрываемыеАкты.ID КАК ID,
		               |	ЗакрываемыеАкты.ДокументАкт КАК ДокументАкт
		               |ПОМЕСТИТЬ ЗакрываемыеАкты
		               |ИЗ
		               |	&ЗакрываемыеАкты КАК ЗакрываемыеАкты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК ДокументАкт,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
		               |	НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт КАК ИндексКартинкиРаботыЗавершены,
		               |	ВЫБОР
		               |		КОГДА торо_АктОВыполненииЭтапаРабот.Проведен
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА торо_АктОВыполненииЭтапаРабот.ПометкаУдаления
		               |					ТОГДА 2
		               |				ИНАЧЕ 0
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ИндексКартинкиСтатусДокумента
		               |ИЗ
		               |	ЗакрываемыеАкты КАК ЗакрываемыеАкты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		               |		ПО (торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = ЗакрываемыеАкты.ДокументАкт)
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
		               |		ПО ЗакрываемыеАкты.ДокументАкт = торо_АктОВыполненииЭтапаРабот.Ссылка
		               |			И (торо_АктОВыполненииЭтапаРабот.Проведен)";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ЗакрываемыеАкты", Объект.ЗакрываемыеАкты.Выгрузить(, "ID, ДокументАкт"));
		ТаблицаСИндексамиКартинок = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Объект.ЗакрываемыеАкты Цикл
			НайденнаяСтрока = ТаблицаСИндексамиКартинок.НайтиСтроки(Новый Структура("ДокументАкт, ID", Строка.ДокументАкт, Строка.ID));
			Если НайденнаяСтрока.Количество() > 0 Тогда
				Строка.ИндексКартинкиСтатусДокумента = НайденнаяСтрока[0].ИндексКартинкиСтатусДокумента;
				Строка.ИндексКартинкиРаботыЗавершены = НайденнаяСтрока[0].ИндексКартинкиРаботыЗавершены;
			КонецЕсли;
		КонецЦикла;
	Иначе	
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК ДокументАкт,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
		               |	НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт КАК ИндексКартинкиРаботыЗавершены,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
		               |	ВЫБОР
		               |		КОГДА торо_АктОВыполненииЭтапаРабот.Проведен
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА торо_АктОВыполненииЭтапаРабот.ПометкаУдаления
		               |					ТОГДА 2
		               |				ИНАЧЕ 0
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ИндексКартинкиСтатусДокумента
		               |ИЗ
		               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
		               |		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = торо_АктОВыполненииЭтапаРабот.Ссылка
		               |			И (торо_АктОВыполненииЭтапаРабот.Проведен)
		               |ГДЕ
		               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID В(&ID)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ID",ID);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.ЗакрываемыеАкты.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("ЗакрываемыеАкты");
	
	Если ПустаяСтрока(Ремонт_ID) Тогда		
	
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
				
			Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
				
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", ОчереднаяСтрока.ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
				
			КонецЦикла;
			
				
		
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти
