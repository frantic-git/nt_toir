#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа
Перем СтруктураДанных Экспорт;  // Структура, хранящая данные для работы с уведомлениями.

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		ОбъектРемонта = ДанныеЗаполнения;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
		Подразделение = ОбъектРемонта.Подразделение;
		Организация = ОбъектРемонта.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда 
		Склад =  ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад");
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяСтруктураИерархии");
	КонецЕсли;
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабПодчиненные.ОбъектРемонта КАК ОбъектРемонта,
		|	ТабПодчиненные.СнятьСУчета КАК СнятьСУчета
		|ПОМЕСТИТЬ ВТ_ОР
		|ИЗ
		|	&ТабПодчиненные КАК ТабПодчиненные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ОР.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_ОР.СнятьСУчета КАК СнятьСУчета,
		|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР
		|ИЗ
		|	ВТ_ОР КАК ВТ_ОР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(, Регистратор <> &Ссылка) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
		|		ПО ВТ_ОР.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта
		|ГДЕ
		|	(торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПринятоКУчету)
		|				И НЕ ВТ_ОР.СнятьСУчета
		|			ИЛИ ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР, 0) <> ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПринятоКУчету)
		|				И ВТ_ОР.СнятьСУчета)";
		
		Запрос.УстановитьПараметр("ТабПодчиненные", СписокПодчиненныхСнятыхСУчета);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВыгрузкаИзРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрДляКорректировки Из ВыгрузкаИзРезультатаЗапроса Цикл
			СтрПодчиненныйОР = СписокПодчиненныхСнятыхСУчета.Найти(СтрДляКорректировки.ОбъектРемонта, "ОбъектРемонта");
			
			Если СтрПодчиненныйОР.СнятьСУчета Тогда
				СтрПодчиненныйОР.СнятьСУчета = Ложь;
				СтатусОР = ?(СтрДляКорректировки.СтатусОР = Перечисления.торо_СтатусыОРВУчете.СнятоСУчета, "снят с учета", "не принят к учету");
				
				ШаблонСообщения = НСтр("ru = 'Подчиненный объект ремонта <%1> %2! Флаг снятия с учета для него сброшен.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрДляКорректировки.ОбъектРемонта, СтатусОР);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Подчиненный объект ремонта <%1> принят к учету! Так как для него не установлен флаг снятия с учета, после проведения документа и выбытия ОР <%2> данный ОР останется принятым к учету.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрДляКорректировки.ОбъектРемонта, ОбъектРемонта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроверитьНаличиеБолееПозднихДокументов(Отказ);
	ПроверитьЧтоОРПринятКУчету(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Ссылка.Дата КАК Период,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.ХарактеристикаНоменклатуры КАК Характеристика,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Серия КАК Серия,
	|	СУММА(торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Количество) КАК ВНаличии,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Склад КАК Склад
	|ИЗ
	|	Документ.торо_ВыбытиеОбъектаРемонта.СписокНоменклатуры КАК торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры
	|ГДЕ
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Ссылка = &Ссылка
	|	И торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Номенклатура,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.ХарактеристикаНоменклатуры,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Серия,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Склад,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ДатаСписания КАК Период,
	|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
	|	ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.СнятоСУчета) КАК СтатусОР,
	|	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка = &ОбъектРемонта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаСписания,
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.ОбъектРемонта,
	|	ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.СнятоСУчета),
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.ОбъектРемонта.НеУчаствуетВПланировании
	|ИЗ
	|	Документ.торо_ВыбытиеОбъектаРемонта.СписокПодчиненныхСнятыхСУчета КАК торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета
	|ГДЕ
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.Ссылка = &Ссылка
	|	И торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.СнятьСУчета";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаСписания", ДатаСписания);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	// регистр ТоварыНаСкладах Приход
	Движения.ТоварыНаСкладах.Записывать = Истина;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ТоварыНаСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
	КонецЦикла;	
	
	// регистр торо_СтатусыОбъектовРемонтаВУчете
	Движения.торо_СтатусыОбъектовРемонтаВУчете.Записывать = Истина;
	
	НастройкиСтатуса = торо_СтатусыОРВУчете.НастройкиСтатуса(Перечисления.торо_СтатусыОРВУчете.СнятоСУчета);
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись = Движения.торо_СтатусыОбъектовРемонтаВУчете.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		Если НастройкиСтатуса = Неопределено 
			ИЛИ Выборка.НеУчаствуетВПланировании = НастройкиСтатуса.ЗначениеПоУмолчанию Тогда;
			Продолжить;
		КонецЕсли;	   
		
		ИзменитьПризнакОбъектаРемонтаНеУчаствуетВПланировании(
			Выборка.ОбъектРемонта, НастройкиСтатуса.ЗначениеПоУмолчанию, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
	КонецЦикла;     
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроверитьНаличиеБолееПозднихДокументов(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(торо_ОбъектыРемонта.Ссылка) КАК ОбъектРемонтаПредставление,
	|	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка = &ОбъектРемонта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.ОбъектРемонта,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.ОбъектРемонта),
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.ОбъектРемонта.НеУчаствуетВПланировании
	|ИЗ
	|	Документ.торо_ВыбытиеОбъектаРемонта.СписокПодчиненныхСнятыхСУчета КАК торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета
	|ГДЕ
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.Ссылка = &Ссылка
	|	И торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.СнятьСУчета";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	
	РезультатЗапроса = Запрос.Выполнить();  
	
	НастройкиСтатуса = торо_СтатусыОРВУчете.НастройкиСтатуса(Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету);

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
				
		Если НастройкиСтатуса = Неопределено 
			ИЛИ Выборка.НеУчаствуетВПланировании = НастройкиСтатуса.ЗначениеПоУмолчанию Тогда;
			Продолжить;
		КонецЕсли;	   
		
		ИзменитьПризнакОбъектаРемонтаНеУчаствуетВПланировании(
			Выборка.ОбъектРемонта, НастройкиСтатуса.ЗначениеПоУмолчанию, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("СписокНоменклатуры.ХарактеристикаНоменклатуры");
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры") Тогда
		ПараметрыПроверки = Новый Структура("ИмяТЧ, СуффиксХарактеристики", "СписокНоменклатуры", "Номенклатуры");
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("СписокНоменклатуры.Серия");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		ПараметрыПроверки = Новый Структура("ИмяТЧ", "СписокНоменклатуры");
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, Отказ, МассивНепроверяемыхРеквизитов,, ПараметрыПроверки);
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьНаличиеБолееПозднихДокументов(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыОбъектовРемонтаВУчете.Период КАК Период,
	|	торо_СтатусыОбъектовРемонтаВУчете.Регистратор КАК Регистратор,
	|	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_СтатусыОбъектовРемонтаВУчете.СтатусОР КАК СтатусОР
	|ИЗ
	|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
	|ГДЕ
	|	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта = &ОбъектРемонта
	|	И торо_СтатусыОбъектовРемонтаВУчете.Регистратор <> &Регистратор
	|	И торо_СтатусыОбъектовРемонтаВУчете.Период >= &ДатаСписания";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ДатаСписания", ДатаСписания);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		// Проверка на наличие документов после указанный даты ввода в эксплуатацию.
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта <%1> имеются документы на ту же или более позднюю дату'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения,	ОбъектРемонта);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЧтоОРПринятКУчету(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР
	|ИЗ
	|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(&Период, ОбъектРемонта = &ОбъектРемонта) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ДатаСписания-1);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	
	ПринятКУчету = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СтатусОР = Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету Тогда
			ПринятКУчету = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПринятКУчету Тогда
		ШаблонСообщения = НСтр("ru = 'Объекта ремонта <%1> не принят к учету на дату %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта, ДатаСписания);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПризнакОбъектаРемонтаНеУчаствуетВПланировании(ИзменяемыйОбъектРемонта, ЗначениеПризнака, Отказ)
	
	ОбъектРемонтаОбъект = ИзменяемыйОбъектРемонта.ПолучитьОбъект();
	ОбъектРемонтаОбъект.НеУчаствуетВПланировании = ЗначениеПризнака;
	
	Попытка
		ОбъектРемонтаОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи ""Объекта ремонта"".'"), 
		УровеньЖурналаРегистрации.Ошибка,, ИзменяемыйОбъектРемонта, ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при попытке изменить реквизит ""Не участвует в планировании"" и
		|записать объект ремонта ""%1"". Подробнее в журнале регистрации.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ИзменяемыйОбъектРемонта));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецПопытки;	
		
КонецПроцедуры

БезусловнаяЗапись = Ложь;

#КонецОбласти

#КонецЕсли