#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_ВыбытиеОбъектаРемонта";
	КомандаПечати.Идентификатор = "ВыбытиеОбъектаРемонта";
	КомандаПечати.Представление = НСтр("ru = 'Выбытие объекта ремонта'");
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВыбытиеОбъектаРемонта") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"ВыбытиеОбъектаРемонта", 
		"Выбытие объекта ремонта", 
		ПечатьДокументаВыбытиеОбъектаРемонта(МассивОбъектов, ПараметрыПечати),
		,
		"Документ.торо_ВыбытиеОбъектаРемонта.ПФ_MXL_ВыбытиеОбъектаРемонта");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьДокументаВыбытиеОбъектаРемонта(МассивОбъектов, ПараметрыПечати)

	ФОИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	ФОИспользоватьСерии = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "торо_ПечатьДокументаВыбытиеОбъектаРемонта";
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	  
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.торо_ВыбытиеОбъектаРемонта.ПФ_MXL_ВыбытиеОбъектаРемонта");
	
	Если ФОИспользоватьХарактеристики Тогда
		ОбластьНоменклатураШапкаХарактеристика = Макет.ПолучитьОбласть("НоменклатураШапка|Характеристика");
		ОбластьНоменклатураСтрокаХарактеристика = Макет.ПолучитьОбласть("НоменклатураСтрока|Характеристика"); 
	Иначе
		ОбластьНоменклатура = Макет.Область("Номенклатура");
		ОбластьНоменклатура.ШиринаКолонки = ОбластьНоменклатура.ШиринаКолонки + Макет.Область("Характеристика").ШиринаКолонки;
	КонецЕсли;
	
	Если ФОИспользоватьСерии Тогда
		ОбластьНоменклатураШапкаСерия = Макет.ПолучитьОбласть("НоменклатураШапка|Серия");
		ОбластьНоменклатураСтрокаСерия = Макет.ПолучитьОбласть("НоменклатураСтрока|Серия"); 
	Иначе
		ОбластьНоменклатура = Макет.Область("Номенклатура");
		ОбластьНоменклатура.ШиринаКолонки = ОбластьНоменклатура.ШиринаКолонки + Макет.Область("Серия").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНоменклатураШапкаНомерСтроки = Макет.ПолучитьОбласть("НоменклатураШапка|НомерСтроки");
	ОбластьНоменклатураШапкаНоменклатура = Макет.ПолучитьОбласть("НоменклатураШапка|Номенклатура");
	ОбластьНоменклатураШапкаКонецСтроки = Макет.ПолучитьОбласть("НоменклатураШапка|КонецСтроки");
	
	ОбластьНоменклатураСтрокаНомерСтроки = Макет.ПолучитьОбласть("НоменклатураСтрока|НомерСтроки");
	ОбластьНоменклатураСтрокаНоменклатура = Макет.ПолучитьОбласть("НоменклатураСтрока|Номенклатура");
	ОбластьНоменклатураСтрокаКонецСтроки = Макет.ПолучитьОбласть("НоменклатураСтрока|КонецСтроки");	

	ОбластьНоменклатураЗаголовок = Макет.ПолучитьОбласть("НоменклатураЗаголовок");
	ОбластьПодвалНоменклатур = Макет.ПолучитьОбласть("НоменклатураПодвал");
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	торо_ВыбытиеОбъектаРемонта.Ссылка КАК Документ,
	|	торо_ВыбытиеОбъектаРемонта.Номер КАК Номер,
	|	торо_ВыбытиеОбъектаРемонта.Дата КАК Дата,
	|	торо_ВыбытиеОбъектаРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВыбытиеОбъектаРемонта.ОбъектРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	торо_ВыбытиеОбъектаРемонта.Организация КАК Организация,
	|	торо_ВыбытиеОбъектаРемонта.Подразделение КАК Подразделение,
	|	торо_ВыбытиеОбъектаРемонта.ОбъектРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	торо_ВыбытиеОбъектаРемонта.ДатаСписания КАК ДатаСписания,
	|	торо_ВыбытиеОбъектаРемонта.Склад КАК Склад,
	|	торо_ВыбытиеОбъектаРемонта.ВходилВСостав КАК ВходилВСостав,
	|	торо_ВыбытиеОбъектаРемонта.Проведен КАК Проведен
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Документ.торо_ВыбытиеОбъектаРемонта КАК торо_ВыбытиеОбъектаРемонта
	|ГДЕ
	|	торо_ВыбытиеОбъектаРемонта.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.Ссылка,
	|	NULL,
	|	NULL,
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.ОбъектРемонта,
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.ОбъектРемонта.ИнвентарныйНомер,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.торо_ВыбытиеОбъектаРемонта.СписокПодчиненныхСнятыхСУчета КАК торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета
	|ГДЕ
	|	торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.Ссылка В(&Ссылка)
	|	И торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСУчета.СнятьСУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Документ КАК Документ,
	|	Данные.Номер КАК Номер,
	|	Данные.Дата КАК Дата,
	|	Данные.ОбъектРемонта КАК ОбъектРемонта,
	|	Данные.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	Данные.Организация КАК Организация,
	|	Данные.Подразделение КАК Подразделение,
	|	Данные.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	Данные.ДатаСписания КАК ДатаСписания,
	|	Данные.Склад КАК Склад,
	|	Данные.ВходилВСостав КАК ВходилВСостав,
	|	Данные.Проведен КАК Проведен,
	|	Данные.ДатаСписания ЕСТЬ NULL КАК ЭтоПодчиненный
	|ИЗ
	|	Данные КАК Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоПодчиненный
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Подразделение)
	|ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Ссылка КАК Ссылка,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.ХарактеристикаНоменклатуры) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Серия) КАК СерияПредставление,
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Склад) КАК СкладПредставление
	|ИЗ
	|	Документ.торо_ВыбытиеОбъектаРемонта.СписокНоменклатуры КАК торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры
	|ГДЕ
	|	торо_ВыбытиеОбъектаРемонтаСписокНоменклатуры.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаНоменклатур = РезультатЗапроса[2].Выбрать();
	СтруктураОтбора = Новый Структура("Ссылка");
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Организация = торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(ВыборкаДокументов.Организация);
		ОбластьШапка.Параметры.Подразделение = ВыборкаДокументов.Подразделение;
		ОбластьШапка.Параметры.Номер = ВыборкаДокументов.Номер;
		ОбластьШапка.Параметры.Дата = ВыборкаДокументов.Дата;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ВыборкаОР = ВыборкаДокументов.Выбрать();
		КоличествоПодчиненных = 0;
		Пока ВыборкаОР.Следующий() Цикл
			
			Если ВыборкаОР.ЭтоПодчиненный Тогда
				Если КоличествоПодчиненных = 0 Тогда
					ОбластьШапкаПодчиненных = Макет.ПолучитьОбласть("ПодчиненныеШапка");
					ТабличныйДокумент.Вывести(ОбластьШапкаПодчиненных);
				КонецЕсли;
				КоличествоПодчиненных = КоличествоПодчиненных + 1;
				ОбластьМакета = Макет.ПолучитьОбласть("ПодчиненныйОРСтрока");
				ОбластьМакета.Параметры.НомерСтроки = КоличествоПодчиненных;
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеСведения");
				ОбластьМакета.Параметры.ДатаВвода = ВыборкаОР.ДатаВводаВЭксплуатацию;
				ОбластьМакета.Параметры.ДатаСписания = ВыборкаОР.ДатаСписания;
				ОбластьМакета.Параметры.Иерархия = ПреобразоватьСтрокуИерархии(ВыборкаОР.ВходилВСостав);
			КонецЕсли;
			ОбластьМакета.Параметры.ОбъектРемонта = ВыборкаОР.ОбъектРемонта;
			ОбластьМакета.Параметры.ИнвентарныйНомер = ВыборкаОР.ИнвентарныйНомер;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		Если КоличествоПодчиненных Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("ПодчиненныеПодвал");
	        ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
				
		СтруктураОтбора.Ссылка = ВыборкаДокументов.Документ;
		Если ВыборкаНоменклатур.НайтиСледующий(СтруктураОтбора) Тогда
			
			ТабличныйДокумент.Вывести(ОбластьНоменклатураЗаголовок);
			
			ТабличныйДокумент.Вывести(ОбластьНоменклатураШапкаНомерСтроки); 
			ТабличныйДокумент.Присоединить(ОбластьНоменклатураШапкаНоменклатура);
			
			Если ФОИспользоватьХарактеристики Тогда
				ТабличныйДокумент.Присоединить(ОбластьНоменклатураШапкаХарактеристика);
			КонецЕсли;
			Если ФОИспользоватьСерии Тогда
				ТабличныйДокумент.Присоединить(ОбластьНоменклатураШапкаСерия);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьНоменклатураШапкаКонецСтроки);
			
			ВыборкаНоменклатур.Сбросить();
			Пока ВыборкаНоменклатур.НайтиСледующий(СтруктураОтбора) Цикл	

				ЗаполнитьЗначенияСвойств(ОбластьНоменклатураСтрокаНомерСтроки.Параметры, ВыборкаНоменклатур);
				ТабличныйДокумент.Вывести(ОбластьНоменклатураСтрокаНомерСтроки);
				
				ЗаполнитьЗначенияСвойств(ОбластьНоменклатураСтрокаНоменклатура.Параметры, ВыборкаНоменклатур);
				ТабличныйДокумент.Присоединить(ОбластьНоменклатураСтрокаНоменклатура);
				
				Если ФОИспользоватьХарактеристики Тогда
					ЗаполнитьЗначенияСвойств(ОбластьНоменклатураСтрокаХарактеристика.Параметры, ВыборкаНоменклатур);
					ТабличныйДокумент.Присоединить(ОбластьНоменклатураСтрокаХарактеристика);
				КонецЕсли;
				Если ФОИспользоватьСерии Тогда
					ЗаполнитьЗначенияСвойств(ОбластьНоменклатураСтрокаСерия.Параметры, ВыборкаНоменклатур);
					ТабличныйДокумент.Присоединить(ОбластьНоменклатураСтрокаСерия);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбластьНоменклатураСтрокаКонецСтроки.Параметры, ВыборкаНоменклатур);
				ТабличныйДокумент.Присоединить(ОбластьНоменклатураСтрокаКонецСтроки);
			КонецЦикла;	
			
			ТабличныйДокумент.Вывести(ОбластьПодвалНоменклатур);
		КонецЕсли;	
		ВыборкаНоменклатур.Сбросить();
		
		ВывестиКомиссию(ВыборкаДокументов.Документ, Макет, ТабличныйДокумент);
	КонецЦикла;

	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПреобразоватьСтрокуИерархии(ИсходныеСтроки)
	
	МассивСтрок = СтрРазделить(ИсходныеСтроки, Символы.ПС);
	Индекс = 0;
	СтрокаИерархии= "";
	Для каждого Стр Из МассивСтрок Цикл
		СтрокаИерархии = СтрокаИерархии + Сред(Стр, Индекс*4 + 1) + " - ";
		Индекс = Индекс + 1;
	КонецЦикла;
	СтрокаИерархии = Лев(СтрокаИерархии, СтрДлина(СтрокаИерархии) - 3);
	
	Возврат СтрокаИерархии;
	
КонецФункции

Процедура ВывестиКомиссию(СсылкаНаДокумент, Макет, ТабДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                |	торо_ВыбытиеОбъектаРемонтаСотрудники.Сотрудник КАК Сотрудник
	                |ИЗ
	                |	Документ.торо_ВыбытиеОбъектаРемонта.Сотрудники КАК торо_ВыбытиеОбъектаРемонтаСотрудники
	                |ГДЕ
	                |	торо_ВыбытиеОбъектаРемонтаСотрудники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = Запрос.Выполнить();
	ВыборкаКомиссия = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("КомиссияШапка");
    ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	Пока ВыборкаКомиссия.Следующий() Цикл
		 ОбластьМакета.Параметры.Сотрудник = ВыборкаКомиссия.Сотрудник;
		 ТабДокумент.Вывести(ОбластьМакета);		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ 
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	(&Ограничение_ОР)";

	ОграничениеОР = торо_УправлениеДоступом.ПолучитьОграничениеДоступаДляОбъектаРемонтаВТаблице("ОбъектРемонта", Истина);
	Ограничение.Текст = СтрЗаменить(Ограничение.Текст, "&Ограничение_ОР", ОграничениеОР);
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли
