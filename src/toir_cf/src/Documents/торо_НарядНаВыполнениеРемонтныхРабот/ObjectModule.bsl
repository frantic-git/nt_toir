#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										// из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(Основание, СтандартнаяОбработка)
			
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		торо_ЗаполнениеДокументов20.ЗаполнитьШапкуДокумента(Основание, ЭтотОбъект);	
	
		// Вызывается из формы операций без нарядов, актуально для опасных работ.
		
		Если Основание.Свойство("ОпасныеРаботы") И Основание.ОпасныеРаботы = Истина Тогда
			ВыводФормыПодбораПриОткрытии = Ложь;
		КонецЕсли;
		
		Если Основание.Свойство("Основание") И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Основание.Основание)) Тогда
			НоваяСтрока = ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Основание.Основание;
		КонецЕсли;
		
		Если Не Основание.Свойство("ВыбранныеОперации") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТЧПриОпасныхРаботах(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("Соответствие") Тогда
		
		торо_ЗаполнениеДокументов20.ЗаполнитьШапкуДокумента(Основание, ЭтотОбъект);	
		торо_ЗаполнениеДокументов20.ЗаполнитьДокументНаОсновании(Основание, ЭтотОбъект);
		
	ИначеЕсли Основание <> Неопределено Тогда
		
		Отказ = Ложь;
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Основание, Отказ, Ложь);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		торо_ЗаполнениеДокументов20.ЗаполнитьШапкуДокумента(Основание, ЭтотОбъект);	
		
		ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(Основание);
		
		Неотмененный = торо_ЗаполнениеДокументов.ВернутьIDНеотмененногоРемонта(Основание, Основание[ИмяТЧ]);
		Если ИмяТЧ <> Неопределено И Неотмененный <> "" Тогда
			СоответствиеИДДокументам = Новый Соответствие;
			СоответствиеИДДокументам.Вставить(Неотмененный, Основание);   
			торо_ЗаполнениеДокументов20.ЗаполнитьДокументНаОсновании(СоответствиеИДДокументам, ЭтотОбъект);
		Иначе
			торо_ЗаполнениеДокументов20.ЗаполнитьДокументыОснования(Основание, ЭтотОбъект);
		КонецЕсли; 
	Иначе
		торо_ЗаполнениеДокументов20.ЗаполнитьШапкуДокумента(Основание, ЭтотОбъект);	
	КонецЕсли;
КонецПроцедуры 

Процедура ПриЗаписи(Отказ)
	Если РемонтныеРаботы.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(РемонтныеРаботы[0].ID) Тогда
			РемонтныеРаботы.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ФоИнтеграцияСПромБезопасностью = ПолучитьФункциональнуюОпцию("торо_ИнтеграцияСПромБезопасностью");
	ЕстьОпасныеРаботы = Ложь;
	Если ФоИнтеграцияСПромБезопасностью = Истина Тогда
		Для каждого текСтрока из РемонтыОборудования Цикл
			Если текСтрока.ОпаснаяРабота Тогда
				ЕстьОпасныеРаботы = Истина;
				Если Не ЗначениеЗаполнено(текСтрока.МестоПроведенияРабот) Тогда
					ШаблонСообщения = НСтр("ru='В табличной части ""Ремонтные работы"" в строке №%1 не заполнено поле ""Место проведения работ"", для опасных работ это поле должно быть заполнено. Проведение документа было отменено.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, текСтрока.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		масРолей = Новый Массив;

		Если ЕстьОпасныеРаботы Тогда
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Допускающий);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.ОтветственныйЗаПодготовкуОбъекта);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.РуководительРабот);
		Иначе
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Допускающий);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.ОтветственныйЗаПодготовкуОбъекта);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Наблюдающий);
		КонецЕсли;
		
		ЕстьВсеНужныеРоли = ПроверитьНаличиеНеобходимыхРолей(масРолей, Ответственные, ЕстьОпасныеРаботы);
		
		Если НЕ ЕстьВсеНужныеРоли Тогда 
			Отказ = Истина;
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Ответственные.Сотрудник");
		МассивНепроверяемыхРеквизитов.Добавить("Ответственные.ОтветственноеЛицо");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	ПроверитьДублиИсполнителей(Отказ);
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("РемонтыОборудования", "Ремонты оборудования");
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	
	ШаблонСообщения = НСтр("ru = 'В табличной части ""%1"" нет строк.'");
	Для каждого текТЧ из СписокТЧ Цикл
		Если ЭтотОбъект[ТекТЧ.Ключ].Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекТЧ.Значение);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ);
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(Отказ);
	
	Если Константы.торо_ЗапретитьПересечениеВремениРаботыСотрудниковСОдинаковойКвалификацией.Получить()
		И торо_ОбщегоНазначения.ПроверитьВремяРаботыСотрудников(ЭтотОбъект, "Исполнители") Тогда 
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	
	Запрос = Новый Запрос( "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	торо_ВнешнееОснованиеДляРабот.Ссылка КАК Ссылка,
	                       |	торо_ВнешнееОснованиеДляРабот.Проведен КАК Проведен
	                       |ИЗ
	                       |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	                       |ГДЕ
	                       |	торо_ВнешнееОснованиеДляРабот.Ссылка В(&МассивДокОсн)
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	торо_ВыявленныеДефекты.Ссылка,
	                       |	торо_ВыявленныеДефекты.Проведен
	                       |ИЗ
	                       |	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	                       |ГДЕ
	                       |	торо_ВыявленныеДефекты.Ссылка В(&МассивДокОсн)
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	торо_ЗаявкаНаРемонт.Ссылка,
	                       |	торо_ЗаявкаНаРемонт.Проведен
	                       |ИЗ
	                       |	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	                       |ГДЕ
	                       |	торо_ЗаявкаНаРемонт.Ссылка В(&МассивДокОсн)
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	торо_ПланГрафикРемонта.Ссылка,
	                       |	торо_ПланГрафикРемонта.Проведен
	                       |ИЗ
	                       |	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	                       |ГДЕ
	                       |	торо_ПланГрафикРемонта.Ссылка В(&МассивДокОсн)");
	
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстСообщения = НСтр("ru = 'Есть непроведенный документ основание: " + Строка(Выборка.Ссылка) + "'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;		
	КонецЦикла;	
	
	УстановитьУправляемыеБлокировки();
	
	ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" с видом ремонта ""%2"" отсутствуют строки в дереве ремонтных работ.'");
	Для Каждого СтрокаСРемонтом Из РемонтыОборудования Цикл
		МассивСтрок = РемонтныеРаботы.НайтиСтроки(Новый структура("РемонтыОборудования_ID", СтрокаСРемонтом.ID));
		Если МассивСтрок.Количество() = 0 Тогда			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСРемонтом.ОбъектРемонта, СтрокаСРемонтом.ВидРемонтныхРабот);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;			
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно") Тогда
		РемонтныеРаботыМассив = РемонтныеРаботы.ВыгрузитьКолонку("РемонтнаяРабота");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	торо_ТехнологическиеОперации.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
						|ГДЕ
						|	торо_ТехнологическиеОперации.РаботаПовышеннойОпасности = ИСТИНА
						|	И торо_ТехнологическиеОперации.Ссылка В(&РемонтныеРаботы)";
		
		Запрос.УстановитьПараметр("РемонтныеРаботы", РемонтныеРаботыМассив); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо распечатать наряд-допуск, так как присутствуют работы повышенной опасности.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументыОснования.Количество()>0 Тогда
		ПроверитьДатуДокумента(Отказ);
	КонецЕсли;
	
	РемонтыОборудованияТаблицаЗначений = РемонтыОборудования.Выгрузить(); 
	РемонтыОтсутствующиеВДокументахИсточниках = торо_Ремонты.ПроверитьНаличиеРемонтовВДокументахИсточникахПоIDРемонта(РемонтыОборудованияТаблицаЗначений);
	
	Если НЕ РемонтыОтсутствующиеВДокументахИсточниках = Неопределено Тогда
		
		Для каждого Ремонт Из РемонтыОтсутствующиеВДокументахИсточниках Цикл
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" отсутствует соответствующий ремонт в документе основании ""%2"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Ремонт.ОбъектРемонта, Ремонт.ДокументИсточник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, Отказ);
	КонецЕсли;
	
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусРемонтовПриПроведении(ЭтотОбъект);
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовРемонта(Ссылка);
	
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Ссылка, РемонтыОборудования.ВыгрузитьКолонку("ID"));
	Если МассивIDДляБлокировки <> Неопределено И МассивIDДляБлокировки.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
		торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовПриОтменеПроведения(ЭтотОбъект);
		торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивОР = ОбщегоНазначения.ВыгрузитьКолонку(РемонтыОборудования, "ОбъектРемонта", Истина);
	ОбъектыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивОР);
	
	МассивВидовРемонта = ОбщегоНазначения.ВыгрузитьКолонку(РемонтыОборудования, "ВидРемонтныхРабот", Истина);
	ВидыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивВидовРемонта);
	
	// Получение удаленных ремонтов при перепроведении документа. Используются при формировании записей
	// регистров торо_ПлановыеИсполнителиРемонтов, торо_ОбщиеДанныеПоРемонтам, торо_СвернутыеФактическиеДатыРемонтов.
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивIDДокумента = РемонтыОборудования.ВыгрузитьКолонку("ID");
		МассивУдаленныхID = торо_Ремонты.ПолучитьIDУдаленныхРемонтовДокумента(МассивIDДокумента, Ссылка);
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", МассивУдаленныхID);
	Иначе
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", Новый Массив());
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ПроверитьДатуДокумента(Отказ)
	
	МассивДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснования, "ДокументОснование");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	торо_ВнешнееОснованиеДляРабот.Дата КАК Дата
	                      |ИЗ
	                      |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	                      |ГДЕ
	                      |	торо_ВнешнееОснованиеДляРабот.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ВыявленныеДефекты.Дата
	                      |ИЗ
	                      |	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	                      |ГДЕ
	                      |	торо_ВыявленныеДефекты.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ЗаявкаНаРемонт.Дата
	                      |ИЗ
	                      |	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	                      |ГДЕ
	                      |	торо_ЗаявкаНаРемонт.Ссылка В(&МассивДокОсн)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	торо_ПланГрафикРемонта.Дата
	                      |ИЗ
	                      |	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	                      |ГДЕ
	                      |	торо_ПланГрафикРемонта.Ссылка В(&МассивДокОсн)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Запрос.УстановитьПараметр("МассивДокОсн", МассивДокументовОснований);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Дата <= Выборка.Дата Тогда
			ТекстСообщения = НСтр("ru = 'Дата документа должна быть больше даты документа-основания!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтыОборудования".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтыОборудования", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота, РемонтыОборудования_ID");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, "");
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ)
	
	ДвиженияПоРегистру_торо_НарядыПоРемонтам(РежимПроведения, Отказ);
	
	ТабРемРаб = ПодготовитьТаблицуПроведенияРемонтныхРабот();
	
	ТаблицаРемонтовОборудования = ПолучитьТаблицуРемонтовОборудования();
	
	РемонтыСЗаявками = ТаблицаРемонтовОборудования.Скопировать(Новый Структура("ЕстьЗаявка", Истина));
	РемонтыБезЗаявок = ТаблицаРемонтовОборудования.Скопировать(Новый Структура("ЕстьЗаявка", Ложь));
	
	ТаблицаНеУчтенныхРабот = ТабНеУчтенныхРабот(ТабРемРаб, РемонтыСЗаявками.ВыгрузитьКолонку("ID"));
	ТаблицаРаботБезЗаявок = ПолучитьТаблицуРемонтныхРаботБезЗаявок(ТабРемРаб, РемонтыБезЗаявок.ВыгрузитьКолонку("ID"));
	
	ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботы(ТабРемРаб, РежимПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТаблицаНеУчтенныхРабот, ТаблицаРаботБезЗаявок, РежимПроведения, Отказ);
	
	ТаблицаВО = СформироватьТаблицуВнешнихОснований();
	ДвиженияПоРегистру_торо_ВнешниеОснованияДляРабот(РежимПроведения, ТаблицаВО, Отказ);
	
	ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(ТабРемРаб, РежимПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ГарантийностьРемонтов();
	
	ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам();
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПроцентВыполненныхРабот(ТаблицаРемонтныхРабот, РежимПроведения, Отказ)
	
	Движения.торо_ПроцентВыполненныхРабот.Записывать = Истина;
	
	Для каждого Стр Из ТаблицаРемонтныхРабот Цикл
		Если ТипЗнч(Стр.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда	
			Движение = Движения.торо_ПроцентВыполненныхРабот.Добавить();
			Движение.Период = Дата;
			Движение.IDРемонта = Стр.IDРемонта;
			Движение.IDОперации = Стр.ID;
			Движение.Операция = Стр.РемонтнаяРабота;
			Движение.IDРодителя = Стр.Родитель_ID;
			Движение.Процент = Стр.Количество * 100;
			Движение.ВидДокумента = Перечисления.торо_ВидДокумента.НарядНаВыполнениеРемонтныхРабот;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьТаблицуРемонтныхРаботБезЗаявок(ТабРемРаб, МассивID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.РемонтнаяРабота,
	|	Таб.IDРемонта,
	|	Таб.ID КАК IDОперации,
	|	Таб.Родитель_ID,
	|	Таб.Количество
	|ПОМЕСТИТЬ ТабРемонтныхРабот
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРемонтныхРабот.РемонтнаяРабота,
	|	ТабРемонтныхРабот.IDРемонта,
	|	ТабРемонтныхРабот.IDОперации,
	|	ТабРемонтныхРабот.Родитель_ID,
	|	ТабРемонтныхРабот.Количество
	|ИЗ
	|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
	|ГДЕ
	|	ТабРемонтныхРабот.IDРемонта В (&IDРемонта)";
	
	Запрос.УстановитьПараметр("Таб", ТабРемРаб);
	Запрос.УстановитьПараметр("IDРемонта", МассивID);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуРемонтовОборудования()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК ID,
		|	торо_ОбщиеДанныеПоРемонтам.ЕстьЗаявка КАК ЕстьЗаявка
		|ИЗ
		|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
		|ГДЕ
		|	торо_ОбщиеДанныеПоРемонтам.IDРемонта В(&МассивID)";

	Запрос.УстановитьПараметр("МассивID", РемонтыОборудования.ВыгрузитьКолонку("ID"));

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТабНеУчтенныхРабот, ТабРаботБезЗаявки, РежимПроведения, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабНеУчтенныхРабот Цикл
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.IDОперации;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийДок - СтрТаб.ПроцентОпераций;
		
	КонецЦикла;
	
	Для каждого СтрТаб Из ТабРаботБезЗаявки Цикл
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.IDОперации;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.ПроцентОпераций = СтрТаб.Количество * 100;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТабНеУчтенныхРабот(ТабРемРаб, МассивID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.РемонтнаяРабота,
		|	Таб.IDРемонта,
		|	Таб.ID КАК IDОперации,
		|	Таб.Родитель_ID,
		|	Таб.Количество
		|ПОМЕСТИТЬ ТабРемонтныхРабот
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРемонтныхРабот.РемонтнаяРабота,
		|	ТабРемонтныхРабот.IDРемонта,
		|	ТабРемонтныхРабот.IDОперации,
		|	ТабРемонтныхРабот.Родитель_ID,
		|	ТабРемонтныхРабот.Количество
		|ИЗ
		|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
		|ГДЕ
		|	ТабРемонтныхРабот.IDРемонта В (&IDРемонта)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРемонтныхРабот.IDРемонта,
		|	ТабРемонтныхРабот.IDОперации,
		|	ТабРемонтныхРабот.Родитель_ID,
		|	ТабРемонтныхРабот.Количество * 100 КАК ПроцентОперацийДок,
		|	ЕСТЬNULL(торо_ЗапланированныеРемонтныеРаботы.ПроцентОпераций, 0) КАК ПроцентОпераций
		|ИЗ
		|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
		|		ПО ТабРемонтныхРабот.IDРемонта = торо_ЗапланированныеРемонтныеРаботы.IDРемонта
		|			И ТабРемонтныхРабот.IDОперации = торо_ЗапланированныеРемонтныеРаботы.IDОперации
		|			И ТабРемонтныхРабот.Родитель_ID = торо_ЗапланированныеРемонтныеРаботы.Родитель_ID
		|			И (ВЫРАЗИТЬ(торо_ЗапланированныеРемонтныеРаботы.Регистратор КАК Документ.торо_ЗаявкаНаРемонт) ССЫЛКА Документ.торо_ЗаявкаНаРемонт)
		|ГДЕ 
		|			торо_ЗапланированныеРемонтныеРаботы.ПроцентОпераций < ТабРемонтныхРабот.Количество * 100";

	Запрос.УстановитьПараметр("Таб", ТабРемРаб);
	Запрос.УстановитьПараметр("IDРемонта", МассивID);
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Процедура ДвиженияПоРегистру_торо_НарядыПоРемонтам(РежимПроведения, Отказ)
	Движения.торо_НарядыПоРемонтам.Записывать = Истина;
	Для каждого СтрРемонта Из РемонтыОборудования Цикл
		Движение = Движения.торо_НарядыПоРемонтам.Добавить();
		Движение.Период = МоментВремени().Дата;
		Движение.IDРемонта = СтрРемонта.ID;
		Движение.ДокументНаряд = Ссылка;
		Движение.ВидРемонта = СтрРемонта.ВидРемонтныхРабот;
		ЗаполнитьЗначенияСвойств(Движение, СтрРемонта);
		ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект);
	КонецЦикла;
КонецПроцедуры

Функция ПодготовитьТаблицуПроведенияРемонтныхРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Родитель_ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Количество
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаПроведения = Запрос.Выполнить().Выгрузить();
	
	КЧ = Новый КвалификаторыЧисла(5, 2);
	МассивТипов = Новый Массив(1);
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(МассивТипов, , ,КЧ);
	ТаблицаПроведения.Колонки.Добавить("ПроцентНевыполненныхРабот", ОписаниеТиповЧ);
	
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповД = Новый ОписаниеТипов(МассивТипов, , ,КД);
	ТаблицаПроведения.Колонки.Добавить("ДатаНачалаРемонта", ОписаниеТиповД);
	
	Для каждого Строка Из РемонтыОборудования Цикл
		
		МассивСтрок = ТаблицаПроведения.НайтиСтроки(Новый Структура("IDРемонта",Строка.ID));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			СтрокаМассива.ДатаНачалаРемонта = Строка.ДатаНачала;
		КонецЦикла;
		
	КонецЦикла; 

	торо_Ремонты.ЗаполнитьПроцентыНевыполненныхРаботПоНормамВремени("", ТаблицаПроведения);
	
	РасставитьПроцентНаРодительскихУровнях("", ТаблицаПроведения); 
	
	Возврат ТаблицаПроведения;

КонецФункции

// Процедура устанавливает значение процента на родительских уровнях таблицы ремонтных работ акта.
//
// Параметры:
//  СтрокаДерева – строка дерева значений.
//  Процент      – число – устанавливаемый процент.
//
Процедура РасставитьПроцентНаРодительскихУровнях(ID_Поиска, ТаблицаПроведения)
	
	СуммаСПроцентомВыполнения = 0;
	
	МассивСтрок = ТаблицаПроведения.НайтиСтроки(Новый Структура("Родитель_ID", ID_Поиска));
	
	Для Каждого Элемент Из МассивСтрок Цикл
		
		РасставитьПроцентНаРодительскихУровнях(Элемент.ID, ТаблицаПроведения);
		
		СуммаСПроцентомВыполнения = СуммаСПроцентомВыполнения + Элемент.ПроцентНеВыполненныхРабот;
		
	КонецЦикла;
	
	Если СуммаСПроцентомВыполнения > 0 Тогда
		
		СтрокаТЗ = ТаблицаПроведения.Найти(ID_Поиска, "ID");
		Если Не СтрокаТЗ = Неопределено Тогда
			
			СтрокаТЗ.ПроцентНеВыполненныхРабот = СтрокаТЗ.ПроцентНеВыполненныхРабот * СуммаСПроцентомВыполнения / 100;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // РасставитьПроцентНаНижнихУровнях()

Процедура ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботы(ТабРемРаб, РежимПроведения, Отказ)
	
	Движения.торо_ВыполняемыеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		Движение = Движения.торо_ВыполняемыеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.РемонтнаяРабота = СтрТаб.РемонтнаяРабота;
		Движение.ПроцентОпераций = СтрТаб.Количество * 100;
		Движение.ПроцентРемонта = СтрТаб.ПроцентНевыполненныхРабот;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// закрытие предписаний (по таблице ремонты оборудования)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтыОборудования.Выгрузить(Новый Структура("ЗакрываетПредписание",Истина),"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// закрытие предписаний (по таблице закрываемых предписаний)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗакрываемыеПредписания.Выгрузить(,"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// проверяем, есть ли заявка
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ЗаявкиПоРемонтам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = РемонтыОборудования.Выгрузить(,"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "ID");
	
	//
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтныеРаботы.Выгрузить(,"РемонтыОборудования_ID,ID,Родитель_ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "РемонтыОборудования_ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDОперации", "ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Родитель_ID", "Родитель_ID");
		
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ПроверитьНаличиеНеобходимыхРолей(масРолей, тз, ЕстьОпасныеРаботы)
	
	Результат = Истина;
	
	Для каждого ТекРоль из масРолей Цикл
		
		Если тз.Найти(ТекРоль, "ОтветственноеЛицо") = Неопределено Тогда
			Результат = Ложь;
			Если ЕстьОпасныеРаботы Тогда
				ШаблонСообщения = НСтр("ru = 'В документе присутствуют опасные работы и в табличной части ""Ответственные лица"" обязательно должен быть указан ""%1"". Проведение документа было отменено.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекРоль);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе 
				ШаблонСообщения = НСтр("ru = 'В табличной части ""Ответственные лица"" обязательно должен быть указан ""%1"". Проведение документа было отменено.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекРоль);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

Функция СформироватьТаблицуВнешнихОснований()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОснований.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втВнешниеОснования
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ТаблицаОснований.ДокументОснование) = ТИП(Документ.торо_ВнешнееОснованиеДляРабот)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗакрываемыеПредписания.ДокументВнешнегоОснования
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ЗакрываемыеПредписания КАК ТаблицаЗакрываемыеПредписания
	|ГДЕ
	|	ТаблицаЗакрываемыеПредписания.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтыОборудования.ID КАК ID
	|ПОМЕСТИТЬ втРемонтыОборудования
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК ТаблицаРемонтыОборудования
	|ГДЕ
	|	ТаблицаРемонтыОборудования.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗакрываемыеПредписания.ID
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ЗакрываемыеПредписания КАК ТаблицаЗакрываемыеПредписания
	|ГДЕ
	|	ТаблицаЗакрываемыеПредписания.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ВнешниеОснованияДляРабот.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВнешниеОснованияДляРабот.ID КАК ID
	|ПОМЕСТИТЬ втДанныеВнешнихОснований
	|ИЗ
	|	РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВнешниеОснования КАК втВнешниеОснования
	|		ПО (втВнешниеОснования.ДокументОснование = торо_ВнешниеОснованияДляРабот.Регистратор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРемонтыОборудования КАК втРемонтыОборудования
	|		ПО торо_ВнешниеОснованияДляРабот.ID = втРемонтыОборудования.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID,
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВнешниеОснованияДляРабот.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВнешниеОснованияДляРабот.ID КАК ID,
	|	торо_ВнешниеОснованияДляРабот.Описание КАК Описание,
	|	торо_ВнешниеОснованияДляРабот.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	торо_ВнешниеОснованияДляРабот.Организация КАК Организация,
	|	торо_ВнешниеОснованияДляРабот.Подразделение КАК Подразделение,
	|	торо_ВнешниеОснованияДляРабот.ОписаниеЯзык1 КАК ОписаниеЯзык1,
	|	торо_ВнешниеОснованияДляРабот.ОписаниеЯзык2 КАК ОписаниеЯзык2,
	|	торо_ВнешниеОснованияДляРабот.РемонтыОборудования_id КАК РемонтыОборудования_id
	|ИЗ
	|	втДанныеВнешнихОснований КАК втДанныеВнешнихОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот КАК торо_ВнешниеОснованияДляРабот
	|		ПО втДанныеВнешнихОснований.ID = торо_ВнешниеОснованияДляРабот.ID
	|			И (втДанныеВнешнихОснований.ОбъектРемонта = торо_ВнешниеОснованияДляРабот.ОбъектРемонта
	|				И НЕ торо_ВнешниеОснованияДляРабот.Обработано)";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Движения по регистру "Внешние основания для работ", простановка Обработано = Истина
Процедура ДвиженияПоРегистру_торо_ВнешниеОснованияДляРабот(РежимПроведения, ТаблицаВО, Отказ)
	
	Движения.торо_ВнешниеОснованияДляРабот.Очистить();
	Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
	Для каждого ВнешнееОснование Из ТаблицаВО Цикл
		Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВнешнееОснование);
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Обработано = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ГарантийностьРемонтов()
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии") Тогда
		Возврат;
	КонецЕсли;
	
	Движения.торо_ГарантийностьРемонтов.Записывать = Истина;
	Движения.торо_ГарантийностьРемонтов.Очистить();
	
	Для каждого Строка Из РемонтыОборудования Цикл
		Движение = Движения.торо_ГарантийностьРемонтов.Добавить();
		Движение.Период = Дата;
		Движение.IDРемонта = Строка.ID;
		Движение.Гарантийный = Строка.ГарантийныйРемонт;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам()
	Движения.торо_ВсеДокументыПоРемонтам.Записывать = Истина;
	Движения.торо_ВсеДокументыПоРемонтам.Очистить();
	
	Для каждого СтрокаТЧ Из РемонтыОборудования Цикл
	    Движение = Движения.торо_ВсеДокументыПоРемонтам.Добавить();
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументПоРемонту = Ссылка;
		Движение.ДатаДокумента = Дата;
		Движение.Организация = Организация;
		Движение.Подразделение = Подразделение;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДублиИсполнителей(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Исполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	Исполнители.Исполнитель КАК Исполнитель,
	|	Исполнители.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	&Исполнители КАК Исполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Исполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_Исполнители.Исполнитель КАК Исполнитель,
	|	ВТ_Исполнители.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	СУММА(ВТ_Исполнители.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ДублиИсполнителей
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Исполнители.РемонтыОборудования_ID,
	|	ВТ_Исполнители.Исполнитель,
	|	ВТ_Исполнители.УточнениеИсполнителя
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Исполнители.Количество) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РемонтыОборудования.ID КАК ID,
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ ВТ_РемонтыОборудования
	|ИЗ
	|	&РемонтыОборудования КАК РемонтыОборудования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДублиИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ДублиИсполнителей.Исполнитель КАК Исполнитель,
	|	ВТ_ДублиИсполнителей.УточнениеИсполнителя КАК УточнениеИсполнителя,
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта
	|ИЗ
	|	ВТ_ДублиИсполнителей КАК ВТ_ДублиИсполнителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РемонтыОборудования КАК РемонтыОборудования
	|		ПО ВТ_ДублиИсполнителей.РемонтыОборудования_ID = РемонтыОборудования.ID";
	
	Запрос.УстановитьПараметр("Исполнители", ИсполнителиПоРемонтам.Выгрузить());
	Запрос.УстановитьПараметр("РемонтыОборудования", РемонтыОборудования.Выгрузить());
	
	ШаблонСообщения = НСтр("ru='Для ремонта ""%1"" дублируется исполнитель ""%2"" (""%3"").'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.Исполнитель, Выборка.УточнениеИсполнителя);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТЧПриОпасныхРаботах(Основание)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВыбранныеОперации.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВыбранныеОперации.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
	               |	ВыбранныеОперации.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
	               |	ВыбранныеОперации.ID КАК ID,
	               |	ВыбранныеОперации.ВидРемонта КАК ВидРемонта,
	               |	ВыбранныеОперации.ID_Операции КАК ID_Операции
	               |ПОМЕСТИТЬ ВТ_ВыбранныеОперации
	               |ИЗ
	               |	&ВыбранныеОперации КАК ВыбранныеОперации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ВыбранныеОперации.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ВыбранныеОперации.ВидРемонта КАК ВидРемонтныхРабот,
	               |	ВТ_ВыбранныеОперации.ID КАК ID,
	               |	ВТ_ВыбранныеОперации.ДатаНачалаРемонта КАК ДатаНачала,
	               |	ВТ_ВыбранныеОперации.ДатаОкончанияРемонта КАК ДатаОкончания,
				   |	ВТ_ВыбранныеОперации.ID_Операции КАК ID_Операции
	               |ИЗ
	               |	ВТ_ВыбранныеОперации КАК ВТ_ВыбранныеОперации
	               |ИТОГИ
	               |	МАКСИМУМ(ВидРемонтныхРабот),
	               |	МАКСИМУМ(ДатаНачала),
	               |	МАКСИМУМ(ДатаОкончания),
				   |	МАКСИМУМ(ОбъектРемонта)
	               |ПО
	               |	ID";
	Запрос.УстановитьПараметр("ВыбранныеОперации", Основание.ВыбранныеОперации.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	СоответствиеРемонтовИРР = Новый Соответствие();
	СоответствиеРемонтовДокументам = Новый Соответствие();
	
	ВыборкаРемонтов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРемонтов.Следующий() Цикл
		НС = РемонтыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ВыборкаРемонтов);
		НС.ДокументИсточник = Основание.Основание;
		
		МассивРемонтныхРабот = Новый Массив();
		
		ВыборкаРемонтныхРабот = ВыборкаРемонтов.Выбрать();
		Пока ВыборкаРемонтныхРабот.Следующий() Цикл
			МассивРемонтныхРабот.Добавить(ВыборкаРемонтныхРабот.ID_Операции);
		КонецЦикла;
		
		СоответствиеРемонтовИРР.Вставить(ВыборкаРемонтов.ID, МассивРемонтныхРабот);
		СоответствиеРемонтовДокументам.Вставить(ВыборкаРемонтов.ID, Основание.Основание);
	КонецЦикла;
	
	Если Основание.Свойство("ИзНормативов") И Основание.ИзНормативов = Истина Тогда
		торо_Ремонты.ЗаполнитьРемонтныеРаботыПоНормативам(ЭтотОбъект, "РемонтыОборудования", "РемонтныеРаботы",,,,, Истина, СоответствиеРемонтовИРР);
	Иначе
		торо_Ремонты.ЗаполнитьРемонтныеРаботыПоОснованию(ЭтотОбъект, Основание.Основание, "РемонтыОборудования", "РемонтныеРаботы", СоответствиеРемонтовИРР);
	КонецЕсли;
	
	торо_ЗаполнениеДокументов20.ЗаполнитьЗатратыПоРемонтам(ЭтотОбъект, СоответствиеРемонтовДокументам);
КонецПроцедуры

#КонецОбласти

#КонецЕсли