////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем РемонтОборудованияУдаляется;

&НаКлиенте
Перем ИДВыбраннойСтроки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	   
	Если Параметры.Свойство("Основание") 
		И ТипЗнч(Параметры.Основание) <> Тип("Структура") 
		И ТипЗнч(Параметры.Основание) <> Тип("Соответствие") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") И Параметры.Свойство("ВыделенныеСтроки") Тогда
		ДокОснованиеППР = Параметры.Основание;
		МассивIDИзППР.ЗагрузитьЗначения(Параметры.ВыделенныеСтроки);
	КонецЕсли;
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_НарядНаВыполнениеРемонтныхРабот;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --

	УстановитьУсловноеОформление();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);

	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_НарядНаВыполнениеРемонтныхРабот);

	// ФункциональныеОпции
	ФОИспользоватьГарантии      = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОЗапретитьРемонтГарантийногоОборудованияХозспособом = ПолучитьФункциональнуюОпцию("торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом");
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ФОРассчитыватьОпасность = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		ОбновитьДобавленныеКолонкиТаблиц();
		Если ФОИспользоватьГарантии Тогда
			торо_ГарантийноеОбслуживание.ПроставитьЗначениеФлагаГарантийныйВТаблице(Объект.РемонтыОборудования);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьЗависимыеЛоты();
	ОбновитьДоступностьДляРедактирования();
	
	ПараметрыВыбораМассив = Новый Массив;
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("ДополнительныеПараметры.ОтображениеСписком", Истина));
	Элементы.ДеревоРемонтныхРаботИсполнитель.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	
	Если Не ФОРассчитыватьОпасность Тогда
		Элементы.ДеревоРемонтныхРаботСодержитРаботыПовышеннойОпасности.Видимость = Ложь;
		Элементы.РемонтыОборудованияСодержитРаботыПовышеннойОпасности.Видимость = Ложь;
	КонецЕсли;
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.РемонтыОборудования.Выгрузить());
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ДокументыОснования");
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения		
	
	ИдентификаторСтрокиРемонта = Элементы.РемонтыОборудования.ТекущаяСтрока;
	Если ИдентификаторСтрокиРемонта <> Неопределено Тогда
		ТекущаяСтрокаРемонта = Объект.РемонтыОборудования.НайтиПоИдентификатору(ИдентификаторСтрокиРемонта);
		РемонтID = ?(ТекущаяСтрокаРемонта = Неопределено, Неопределено, ТекущаяСтрокаРемонта.ID);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, РемонтID); 
	КонецЕсли;

	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
		
		Если МассивIDИзППР.Количество() = 0 Тогда
			ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
		Иначе
			ВыбранноеЗначение = ЗаполнитьДанныеНаОснованииППРВыделенныеСтроки();
			РемонтыОборудованияОбработкаВыбора(Элементы.РемонтыОборудования, ВыбранноеЗначение, Ложь);
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() > 0 И 
		       ( ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") ИЛИ 
			     ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") ИЛИ 
				 ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип ("ДокументСсылка.торо_ВыявленныеДефекты")) Тогда
			РемОборудования = Объект.РемонтыОборудования[0].ID;
			НайденныеСтрокиРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", РемОборудования ));
			НайденныеСтрокиИсполнителей = Объект.Исполнители.НайтиСтроки( Новый Структура("РемонтыОборудования_ID", РемОборудования )); 
			Если НайденныеСтрокиРемонта.Количество() <> 0 И НайденныеСтрокиИсполнителей.Количество() = 0 Тогда
				НомерСтроки = НайденныеСтрокиРемонта[0].ПолучитьИдентификатор();
				Если ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
					ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, НомерСтроки);
					ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, НомерСтроки);
				Иначе
					ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, НомерСтроки);
				КонецЕсли; 
			КонецЕсли; 
	КонецЕсли;
	
	УправлениеФормой();
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Для Каждого РемонтнаяРабота Из Объект.РемонтыОборудования Цикл
		Для Каждого Значение Из Объект.ДокументыОснования Цикл
			ДокОснование = Значение.ДокументОснование;
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
				И ДокОснование.ДатаОбнаружения > РемонтнаяРабота.ДатаНачала 
				И ДокОснование = РемонтнаяРабота.ДокументИсточник Тогда
				ШаблонСообщения = НСтр("ru = 'Дата начала ремонта для объекта ремонта (%1) не может быть меньше даты обнаружения дефекта (%2)!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, РемонтнаяРабота.ОбъектРемонта, ДокОснование.ДатаОбнаружения);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		Если РемонтнаяРабота.ДатаНачала > РемонтнаяРабота.ДатаОкончания Тогда
			ШаблонСообщения = НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	РемонтнаяРабота.НомерСтроки,РемонтнаяРабота.ДатаНачала,РемонтнаяРабота.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.РемонтыОборудования Цикл
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", Строка.ID);
		МассивИсполнителей = Объект.Исполнители.НайтиСтроки(СтруктураПоиска);
		МассивИсполнителейПоРемонтам = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);
		
		ПроверитьДаты("Исполнители", МассивИсполнителей, Строка, Отказ);
		ПроверитьДаты("ИсполнителиПоРемонтам", МассивИсполнителейПоРемонтам, Строка, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.РемонтыОборудования Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ШаблонСообщения = НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	Строка.НомерСтроки,Строка.ДатаНачала,Строка.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ФОИспользоватьГарантии И ФОЗапретитьРемонтГарантийногоОборудованияХозспособом Тогда
		торо_ГарантийноеОбслуживание.ПроверитьНаличиеКонтрагентов(Объект, "ИсполнителиПоРемонтам", "Исполнитель", Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "РемонтыОборудования");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	ОбновитьДобавленныеКолонкиТаблиц();
	ОбновитьЗависимыеЛоты();
	ОбновитьДоступностьДляРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите расположение ремонта!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10);
		Отказ = Истина;
	ИначеЕсли ТекущийРемонт = Неопределено Тогда  
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт оборудования для добавления технологической операции!'"), 10);
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		СтандартнаяОбработка = Ложь;
	    торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьКолонкиПараллельногоВыполненияТО(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы, ID_ПараллельнойОперации, ВыбранноеЗначение.СоответствиеРезультата);
		Модифицированность = Истина;
		
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
		ДатаОкончанияРемонта   = ТекРемонт.ДатаОкончания;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;       
		ДатаОкончанияРемонта   = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта, ДатаОкончанияРемонта"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, СтрокаРодитель.Родитель_ID
	, ДатаНачалаРемонта
	, ДатаОкончанияРемонта);
	
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	ВыделитьСтрокуДереваРемонтныхРабот(ИДВыбраннойСтроки);
	
	Модифицированность = Истина;
	УстановитьДоступностьКнопокИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0] 
		Или Элемент.ТекущиеДанные.ЭтоТехКарта Тогда
		Выполнение = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(Строка) Тогда
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Если ТекущаяСтрока.ЭтоТехкарта Тогда
			ПараметрыПеретаскивания.Действие 		   =  ДействиеПеретаскивания.Перемещение; 
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	        ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Строка = Неопределено Тогда
		
		ТекущаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Строка);
		Для каждого ЭлементКоллекции Из ПараметрыПеретаскивания.Значение Цикл
			ПеретаскиваемаяСтрока = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ЭлементКоллекции);
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ПеретаскиваемаяСтрока.ID));
			Если МассивСтрок.Количество() Тогда
				МассивСтрок[0].Родитель_ID = ТекущаяСтрока.ID;
				
				// Если случайно перетащили в ту же ТК, то параллельность убирать не нужно.
				Если Не ПеретаскиваемаяСтрока.Родитель_ID = ТекущаяСтрока.ID И ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
					МассивСтрок[0].ID_ПараллельнойОперации = "";
					торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.РемонтыОборудования_ID);
		ВыделитьСтрокуДереваРемонтныхРабот(ТекущаяСтрока.ID);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеЛоты()
	
	Если Константы.торо_ИспользоватьЛоты.Получить() Тогда
		МассивИДРемонтов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.РемонтыОборудования, "ID");
		МассивСвязанныхЛотов = торо_Ремонты.ПолучитьМассивIDЛотов(МассивИДРемонтов);
		МассивIDЛотов.ЗагрузитьЗначения(МассивСвязанныхЛотов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ) 
	
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("Исполнители");
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");
 		
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
			
			ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("РемонтыОборудования_ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		
			СтрокиКУдалению = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				
				ТабличнаяЧасть.Удалить(Строка);
				
			КонецЦикла;		    
						
		КонецЦикла;

		Модифицированность = Истина;
		
		Отказ = Истина;

	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоРемонтныхРабот.ВыделенныеСтроки;
		МассивСтрокДляУдаления = Новый Массив;
		
		Для каждого Стр Из ВыделенныеСтроки Цикл 
			Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Стр);
			Если Строка <> Неопределено И Строка.РемонтнаяРабота <> "Ремонтные работы" Тогда 
				МассивСтрокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого Элемент Из МассивСтрокДляУдаления Цикл
			СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
			Элемент.ID, Элемент.РемонтыОборудования_ID, Элемент.Родитель_ID, Элемент.РемонтнаяРабота);
			УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи, СтруктураСвязанныхТЧ);
			
			СтрокаРодителя = Элемент.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда 
				СтрокаРодителя.ПолучитьЭлементы().Удалить(Элемент); 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ID_ПараллельнойОперации) Тогда
				торо_ТехнологическиеКартыКлиент.ОбработатьУдалениеИПеретаскиваниеПараллельнойОперации(Объект.РемонтныеРаботы, ID_ПараллельнойОперации, СтрокаРодителя);
			КонецЕсли;
		КонецЦикла;
		
		
		Модифицированность = Истина;
		Отказ = Истина;  
		
	КонецЕсли;
	
	Если ФОРассчитыватьОпасность Тогда
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьПризнакиПовышеннойОпасностиВДеревеРемонтныхРабот(ДеревоРемонтныхРабот);
			
		УстановитьПовышеннуюОпасностьРемонтовОборудования();
	КонецЕсли;	
	
	Для каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРемонтныхРабот.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	УстановитьДоступностьКнопокИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
		
		Если ТекущиеДанные.РемонтнаяРабота = "Ремонтные работы" Тогда
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
	УстановитьОтборПоИсполнителям();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ID) 
		И Объект.РемонтныеРаботы.Количество() > 1 Тогда  
		
		торо_ДанныеФормыДеревоКлиентСервер.УпорядочитьРемонтныеРаботы(ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущаяСтрока.Количество = 0 Тогда
		ТекущаяСтрока.Количество = 1;
	КонецЕсли;
	
	МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ТекущаяСтрока.ID));
	Если МассивСтрок.Количество() > 0 Тогда
		
		КоличествоДоИзменения= МассивСтрок[0].Количество;
		Коэффициент = ?(КоличествоДоИзменения = 0, 0, ТекущаяСтрока.Количество / КоличествоДоИзменения);
		
		МассивСтрок[0].Количество = ТекущаяСтрока.Количество;
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекущаяСтрока, Коэффициент)
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоРемонтныхРаботИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДоговорБригада = Неопределено;
		УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(ТекущиеДанные.Исполнитель, ТекущиеДанные.РемонтыОборудования_ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьПараметрыВыбораИсполнителя_ДляРемонтныхРабот(ТекущиеДанные.РемонтыОборудования_ID);
		УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(ТекущиеДанные.Исполнитель, ТекущиеДанные.РемонтыОборудования_ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Истина;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		
		ТекущаяСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекущаяСтрока.РемонтнаяРабота = ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка");
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.РедактированиеТекста = Ложь;
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		
		НеЗаполненаРемонтнаяРабота = ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.РемонтнаяРабота);
		
		Если Не ОтменаРедактирования И НеЗаполненаРемонтнаяРабота Тогда
			
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
			
			Если РодительСтроки = Неопределено Тогда
				КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Иначе
				КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
			КонецЕсли;
			
			КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
		И Не ТекущиеДанные.РемонтнаяРабота.Пустая() Тогда
		
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя(); 
				
		ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если РодительСтроки = Неопределено Тогда
			КоллекцияЭлементовРодителя = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементовРодителя.Удалить(ТекущиеДанные);
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ТекущийРемонт_ID", ?(ТекущийРемонт = Неопределено, "", ТекущийРемонт.ID)); 
		ДанныеСтроки.Вставить("СтрокаРодитель_ID", РодительСтроки.ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРемонтыОборудования_ID", РодительСтроки.РемонтыОборудования_ID);  
		ДанныеСтроки.Вставить("СтрокаРодительРодитель_ID", РодительСтроки.Родитель_ID);  
					
		ДеревоРемонтныхРаботОбработкаВыбораСервер(ТекущиеДанные.РемонтнаяРабота, ДанныеСтроки);
		
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьПризнакиПовышеннойОпасностиВДеревеРемонтныхРабот(ДеревоРемонтныхРабот);
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
				
		РодительСтроки = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоРемонтныхРабот.ПолучитьЭлементы(), "ID", РодительСтроки.ID);
		КоллекцияЭлементовРодителя = РодительСтроки.ПолучитьЭлементы();
		ИндексПоследнегоЭлементаРодителя = КоллекцияЭлементовРодителя.Количество() - 1;
		
		ДобавленныйЭлемент = КоллекцияЭлементовРодителя.Получить(ИндексПоследнегоЭлементаРодителя);
		
		Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ДобавленныйЭлемент.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботРемонтнаяРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		УстановитьДоступностьКнопокИсполнителей();
		УстановитьДоступностьДляРедактированияПоТекРемонту(ТекущиеДанные.БлокироватьДляИзменения);
		Найденный = МассивIDЛотов.НайтиПоЗначению(ТекущиеДанные.ID);
		Если Найденный <> Неопределено Тогда
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Истина;
		Иначе
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Ложь;
		КонецЕсли;
	Иначе
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, Неопределено);
	КонецЕсли;
		
	Для каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРемонтныхРабот.Развернуть(Строка.ПолучитьИдентификатор(),Истина);
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ИДВыбраннойСтроки) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ДеревоРемонтныхРабот.ПолучитьЭлементы(), ИДВыбраннойСтроки, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;		
	
	УстановитьОтборыСвязанныхТаблицРемонты();
	ДеревоРемонтныхРаботПриАктивизацииСтроки(Элементы.ДеревоРемонтныхРабот);
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Если Не РемонтОборудованияУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("РемонтыОборудованияПередУдалениемЗавершение", ЭтотОбъект,Новый Структура("Элемент",Элемент)),
						Вопрос,РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, ТекДанные.ДатаНачала, ТекДанные.ДатаОкончания);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "РемонтыОборудованияВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.ФормаОбъекта", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборРемонтов") И ВыбранноеЗначение.ПодборРемонтов = Истина 
		И НЕ ВыбранноеЗначение.ЭтоРемонтнаяРабота Тогда
		// Подбор ремонтов (ремонтные работы в другой ветке).
		
		Если ВыбранноеЗначение.МассивИДРемонтов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РемонтУжеДобавлен = Ложь;
		МассивИДДобавленныхРемонтов = Новый Массив;

		Для каждого ИдРемонта из ВыбранноеЗначение.МассивИДРемонтов Цикл
			НайденныеРемонты = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ИдРемонта));
			Если НайденныеРемонты.Количество() > 0 Тогда
				РемонтУжеДобавлен = Истина;
				МассивИДДобавленныхРемонтов.Добавить(ИдРемонта);
			КонецЕсли;
		КонецЦикла;
		
		Если РемонтУжеДобавлен Тогда
			Если ВыбранноеЗначение.МассивИДРемонтов.Количество() > 1 Тогда
				Вопрос = НСтр("ru = 'Некоторые из выбранных ремонтов уже добавлены. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			Иначе
				Вопрос = НСтр("ru = 'Этот ремонт уже добавлен. Связанные ремонтные работы будут очищены и добавлены заново. Продолжить?'");
			КонецЕсли;

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			СтруктураПараметров.Вставить("МассивИДДобавленныхРемонтов", МассивИДДобавленныхРемонтов);
			ОписаниеОповещения = Новый ОписаниеОповещения("РемонтыОборудованияОбработкаВыбораПослеВопроса", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(ОписаниеОповещения, Вопрос, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораЗавершение(ВыбранноеЗначение);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЭтоРемонтнаяРабота") И ВыбранноеЗначение.ЭтоРемонтнаяРабота = Истина Тогда 
		// Подбор ремонтных работ
		
		ОбработкаВыбораЗавершение(ВыбранноеЗначение);

	КонецЕсли;
	
	УправлениеФормой(Элементы.РемонтыОборудования.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиПоРемонтам

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
			Если СтрокаРемонта <> Неопределено Тогда
				ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
				ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
				ТекущиеДанные.РемонтыОборудования_ID = СтрокаРемонта.ID;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) ИЛИ ТекущиеДанные.Исполнитель = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиИсполнителей(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ШаблонВопроса = НСтр("ru = 'Исполнитель %1 указан для ремонтной работы. При изменении данный исполнитель будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.Исполнитель);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИсполнительНовый, МассивСтрокДереваРР", ТекущиеДанные, ВыбранноеЗначение, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамИсполнительОбработкаВыбораПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОбработкаВыбораПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ИсполнительНовый = ДополнительныеПараметры.ИсполнительНовый;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, Исполнитель", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.Исполнитель);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		ТекущиеДанные.Исполнитель = ИсполнительНовый;
		ИсполнителиПоРемонтамИсполнительПриИзменении(Элементы.ИсполнителиПоРемонтам);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	ИсполнителиПоРемонтамИсполнительОбработкаВыбора(Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		// Если сделать так, то вызывается событие ОбработкаВыбора, в противном случае - не вызывается. 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.УточнениеИсполнителя = Неопределено;
		торо_Ремонты.ЗаполнитьУточнениеИсполнителя(ТекущиеДанные.Исполнитель, ТекущиеДанные.УточнениеИсполнителя);
		УстановитьПараметрыВыбораДоговораБригады(ТекущиеДанные.Исполнитель, Элементы.ИсполнителиПоРемонтамУточнениеИсполнителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьПараметрыВыбораДоговораБригады(ТекущиеДанные.Исполнитель, Элементы.ИсполнителиПоРемонтамУточнениеИсполнителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиИсполнителей(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		Отказ = Истина;
		
		ШаблонВопроса = НСтр("ru = 'Исполнитель %1 указан для ремонтной работы. При изменении данный исполнитель будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.Исполнитель);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, МассивСтрокДереваРР", ТекущиеДанные, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамПередУдалениемПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамПередУдалениемПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, Исполнитель", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.Исполнитель);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.Исполнитель = Неопределено;
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Модифицированность = Истина;
		Объект.ИсполнителиПоРемонтам.Удалить(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиПоРемонтам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.УточнениеИсполнителя) ИЛИ ТекущиеДанные.УточнениеИсполнителя = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли; 	
	
	МассивСтрокДереваРР = НайтиРемонтныеРаботыДляОчисткиДоговораБригады(ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если МассивСтрокДереваРР.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ШаблонВопроса = НСтр("ru = 'Договор/бригада %1 указан для ремонтной работы. При изменении данный договор/бригада будет очищен в дереве ремонтных работ. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.УточнениеИсполнителя);
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИсполнительНовый, МассивСтрокДереваРР", ТекущиеДанные, ВыбранноеЗначение, МассивСтрокДереваРР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбораПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбораПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ИсполнительНовый = ДополнительныеПараметры.ИсполнительНовый;
		МассивСтрокДереваРР = ДополнительныеПараметры.МассивСтрокДереваРР;
		МассивСтрокРРОтбор = Новый Структура("РемонтыОборудования_ID, ДоговорБригада", ТекущиеДанные.РемонтыОборудования_ID, ТекущиеДанные.УточнениеИсполнителя);
		МассивСтрокРР = Объект.РемонтныеРаботы.НайтиСтроки(МассивСтрокРРОтбор);
		
		Для каждого Строка из МассивСтрокРР Цикл
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Для каждого Строка из МассивСтрокДереваРР Цикл
			Строка.ДоговорБригада = Неопределено;
		КонецЦикла;
		
		Модифицированность = Истина;
		ТекущиеДанные.УточнениеИсполнителя = ИсполнительНовый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОчистка(Элемент, СтандартнаяОбработка)
	
	ИсполнителиПоРемонтамУточнениеИсполнителяОбработкаВыбора(Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПоРемонтамУточнениеИсполнителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		// Если сделать так, то вызывается событие ОбработкаВыбора, в противном случае - не вызывается. 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
			
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда 
		
		Если НоваяСтрока Тогда
			ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
			Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда 
				Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
				Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
				
			КонецЕсли;
		КонецЕсли;
		
		ТЧ = Объект.РемонтыОборудования;
		ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
		торо_ЗаполнениеДокументов.ВыполнитьАвтоподставлениеСотрудникаИКвалификации(Элемент.ТекущиеДанные.Сотрудник, Элемент.ТекущиеДанные.Квалификация, ДатаНачалаРемонта);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
			ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
			Если СтрокаРемонта <> Неопределено И ТекСтрокаДереваРемонтныхРабот <> Неопределено Тогда
				ТекущиеДанные.РемонтыОборудования_ID = СтрокаРемонта.ID;
				ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
				ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
				ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);	
	Иначе
		ЗаполнитьИсполнителей(ВыбранноеЗначение);
		Для каждого Строка Из Объект.Исполнители Цикл
			Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	Квалификация = Элементы.Исполнители.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиКвалификацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораКвалификацийСотрудника(Элементы.Исполнители.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	Квалификация = Элементы.Исполнители.ТекущиеДанные.Квалификация;
	Если ЗначениеЗаполнено(Квалификация) Тогда 
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораСотрудниковСКвалификацией(Квалификация, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	Иначе
		торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораПринятыхСотрудников(ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораСотрудниковСКвалификацией(Элемент, ЭтотОбъект, Элементы.Исполнители.ТекущиеДанные.Квалификация, ДатаНачалаРемонта, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиКвалификацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокАвтоподбораКвалификацийСотрудника(Элементы.Исполнители.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиКвалификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ = Объект.РемонтыОборудования;
	ДатаНачалаРемонта = торо_ЗаполнениеДокументов.ПолучитьДатуРемонтаПоID(ТЧ, Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.РемонтыОборудования_ID);
	торо_ЗаполнениеДокументовКлиент.СформироватьСписокВыбораКвалификацийСотрудника(Элемент, ЭтотОбъект, Элементы.Исполнители.ТекущиеДанные.Сотрудник, ДатаНачалаРемонта, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиВремяРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("ПродолжительностьВСекундах", ТекДанные.ВремяРаботы);
		ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ПараметрыФормы, Элементы.Исполнители,, ВариантОткрытияОкна.ОтдельноеОкно,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаНачалаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РассчитатьВремя(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаОкончанияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РассчитатьВремя(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
				Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
					Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
					СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)   	
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
		
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
		Если ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество() Тогда 
			Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийДокументОснование = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	
	Если ТекущийДокументОснование = Неопределено Тогда
		СписокВыбора = торо_ЗаполнениеДокументов.СформироватьСписокВыбораТипаДокументаОснования(Объект.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент", Элемент));
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбор типа данных'"));
	Иначе
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ТипЗнч(ТекущийДокументОснование), ТекущийДокументОснование, Элемент, ЭтаФорма.КлючУникальности);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ДополнительныеПараметры.Элемент;
	торо_ЗаполнениеДокументовКлиент.ОткрытьФормуВыбораДокументаОснованияРемонтаСПараметрами(ВыбранныйЭлемент.Значение, Неопределено, Элемент, ЭтаФорма.КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Элементы.ЗакрываемыеПредписания.ОтборСтрок = Новый ФиксированнаяСтруктура("ДокументВнешнегоОснования", Элемент.ТекущиеДанные.ДокументОснование);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтветственные

&НаКлиенте
Процедура ОтветственныеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.Ответственные.ТекущиеДанные;
	
	Если Не (ОтменаРедактирования Или ТекДанные = Неопределено) тогда
	
		стрПоиска = Новый Структура("ОтветственноеЛицо");
		стрПоиска.ОтветственноеЛицо = ТекДанные.ОтветственноеЛицо;
		
		НайС = Объект.Ответственные.НайтиСтроки(стрПоиска);
		
		Если НайС.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Эта роль уже добавлена. Выберите другую.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрываемыеПредписания

&НаКлиенте
Процедура ЗакрываемыеПредписанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПодборЗакрываемыхПредписаний(Команды.Найти("ПодборЗакрываемыхПредписаний"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументВнешнегоОснования) И Поле.Имя = "ЗакрываемыеПредписанияДокументВнешнегоОснования" Тогда
		СтруктураПараметров = Новый Структура("Ключ", Элемент.ТекущиеДанные.ДокументВнешнегоОснования);
		ОткрытьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаОбъекта", СтруктураПараметров);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрываемыеПредписанияПередУдалениемЗавершение",
			ЭтаФорма), Вопрос, РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияПередУдалениемЗавершение(Результат, ДопПараметры) Экспорт
	ТекДанные = Элементы.ЗакрываемыеПредписания.ТекущиеДанные;
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтрокиДокОснования = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументВнешнегоОснования));
		Если СтрокиДокОснования.Количество() <> 0 Тогда
			Для Каждого СтрокаДокумента Из СтрокиДокОснования Цикл
				ОчиститьСвязанныеТабличныеЧасти(СтрокаДокумента.ДокументОснование);
				Объект.ДокументыОснования.Удалить(СтрокаДокумента);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРО = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекущиеДанныеРО = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран ремонт для прикрепления предписаний!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДокументыОснованияОтбор = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВыбранноеЗначение.ДокументОснование));
	Если ДокументыОснованияОтбор.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Выбранное внешнее основание уже имеется в документах-основаниях!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗакрываемыеПредписанияОбработкаВыбораСервер(ВыбранноеЗначение);
		
	Модифицированность = Истина;
				
	ОбновитьДобавленныеКолонкиТаблиц();
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина); 
		
КонецПроцедуры

&НаСервере
Процедура ЗакрываемыеПредписанияОбработкаВыбораСервер(ВыбранноеЗначение) 
		
	торо_Ремонты.ЗакрываемыеПредписанияОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт <> Неопределено И ЗначениеЗаполнено(ТекущийРемонт.ДатаНачала) Тогда 
		ДатаОтбора = ТекущийРемонт.ДатаНачала;
	Иначе
		ДатаОтбора = ТекущаяДата();
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", 
		Новый Структура("МножественныйВыбор, ДатаОтбора, Отбор", Истина, ДатаОтбора, 
		Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"))), 
		Элементы.ДеревоРемонтныхРабот);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ДокументыОснования = Новый СписокЗначений;
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ДокументыОснования.Добавить(СтрокаДО.ДокументОснование);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ДокументыОснования", ДокументыОснования);
	
	ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот",
		ПараметрыФормы, Элементы.РемонтыОборудования, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредписаний(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписаний",
	Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляДокумента(Команда)
	
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("СписокПодразделений", ПолучитьСписокПодразделений(ID_ОтбораРемонтов));
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.Исполнители);
	стрПараметров.Вставить("ВидПодбора", "ПоДокументу");
	стрПараметров.Вставить("ID", Неопределено);
	стрПараметров.Вставить("РемонтыОборудования_ID", Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.Исполнители,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляОперации(Команда)
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов = Неопределено тогда
		ID_Отбора = Неопределено;
	Иначе
		МасИД = Новый Массив;
		ID_Отбора = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасИД, ТекСтрокаДереваРемонтов.ПолучитьЭлементы());
		ID_Отбора.Добавить(ТекСтрокаДереваРемонтов.ID);
		
		Для каждого текСтрока из МасИД цикл
			ID_Отбора.Добавить(текСтрока.ID);
		КонецЦикла;
	КонецЕсли;
	
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("СписокПодразделений", ПолучитьСписокПодразделений(ID_ОтбораРемонтов));
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.Исполнители);
	стрПараметров.Вставить("ВидПодбора", "ПоОперации");
	стрПараметров.Вставить("ID", ID_Отбора);
	стрПараметров.Вставить("РемонтыОборудования_ID", ID_ОтбораРемонтов);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.Исполнители,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.Исполнители Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.Исполнители.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеРемонты(Команда)
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.Исполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.Исполнители.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.Исполнители.Очистить();
		КонецЕсли;
		ЗаполнитьИсполнителейПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "Исполнители");	
	Для каждого Строка Из Объект.Исполнители Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаленияИсполнители = Новый Массив;
	Для каждого Строка из Объект.Исполнители Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияИсполнители.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;

	
	Если МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", Новый Массив);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаленияПодрядчики = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	МассивСтрокДляУдаленияИсполнители = Объект.Исполнители.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.ИсполнителиПоРемонтам.Количество() > 0 
		ИЛИ Объект.Исполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", Объект.ИсполнителиПоРемонтам);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", Объект.Исполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики Цикл
				Объект.ИсполнителиПоРемонтам.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ИсполнителиПоРемонтам.Очистить();
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители Цикл
				Объект.Исполнители.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.Исполнители.Очистить();
		КонецЕсли;
		
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	Для каждого Строка Из Объект.Исполнители Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей1(Команда)
		
	ПараметрыОткрытия = Новый Структура("Ссылка, МассивИсполнителей, Наряд", Объект.Ссылка, ПолучитьМассивСтруктурИсполнителей(), Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаАвтоматическогоЗаполненияИсполнителей", ЭтаФорма);
	ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаАвтозаполненияИсполнителей",ПараметрыОткрытия, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЛотов(Команда)
	
	ЗаполнитьИзЛотовНаСервере();
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ДанныеФормыДеревоКлиентСервер.ОбновитьДеревоРемонтныхРабот(ЭтотОбъект, ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗакрываемыхПредписаний(Команда)
	
	ТекДанныеРемОборуд = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанныеРемОборуд = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ремонт оборудования.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписанийОпераций",
	Новый Структура("ОбъектРемонтаДляОтбора", ТекДанныеРемОборуд.ОбъектРемонта), Элементы.ЗакрываемыеПредписания, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.ДеревоРемонтныхРабот, Объект.РемонтныеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаСервере
Процедура УстановитьУсловноеОформление()

	// ТолькоПросмотр вида ремонта ремонтов оборудование.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияВидРемонтныхРабот.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ВидРемонтаВОиВД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ДокументНачалаЦепочкиВОИлиВД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь); 
	
	// ТолькоПросмотр корня дерева ремонтных работ 
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.РемонтнаяРабота");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Ремонтные работы";

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботИсполнитель.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботДоговорБригада.Имя);
	                  
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.ЭтоТехКарта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Представление = "ДоступностьИсполнителяДляТехОперации";
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	Элемент.Использование = Истина;
	
	торо_ТехнологическиеКарты.ДобавитьУсловноеОформлениеДляПараллельныхТОТК(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивIDДляПроверки = Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Объект.Ссылка, МассивIDДляПроверки);
	
	Если Не МассивIDДляБлокировки = Неопределено Тогда
		
		Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
			СтрокаРемонта.БлокироватьДляИзменения = Не МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения)
	
	Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр	= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.Исполнители.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
	Элементы.ИсполнителиПоРемонтам.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"];
		
	Элементы.ДеревоРемонтныхРаботДобавитьТехКарту.Доступность		= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботДобавитьТехОперацию.Доступность	= Не БлокироватьДляИзменения И ПравоРедактирование И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ЗначениеЗаполнено(Объект.РемонтыОборудования);
	Элементы.ДеревоРемонтныхРаботУказатьПараллельноВыполняемые.Доступность = Не БлокироватьДляИзменения И ЗначениеЗаполнено(Объект.РемонтыОборудования) И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые.Доступность = Не БлокироватьДляИзменения И ЗначениеЗаполнено(Объект.РемонтыОборудования) И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"] И ПравоРедактирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалениемЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Ответ  = РезультатВопроса;
	Строки = Элемент.ВыделенныеСтроки;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для Каждого идСтрока из Строки Цикл
			текСтрока = Объект.РемонтыОборудования.НайтиПоИдентификатору(идСтрока);
			
			РемонтОборудованияУдаляется = Истина;
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			Объект.РемонтыОборудования.Удалить(текСтрока);
			Модифицированность = Истина;
			РемонтОборудованияУдаляется = Ложь;
		КонецЦикла;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧастиПоПредписанию(СтрокиПредписаний)
	
	СтруктураТабличныхЧастей = Новый Структура("Исполнители");
	Для Каждого СтрокаЗП Из СтрокиПредписаний Цикл
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, Предписание", 
			СтрокаЗП.РемонтыОборудования_ID, СтрокаЗП.ДокументВнешнегоОснования));
			
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла; 
			
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("Исполнители");
	СтруктураТабличныхЧастейПоРемонтам = Новый Структура("ИсполнителиПоРемонтам");
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
				СтрокиПредписаний = Объект.ЗакрываемыеПредписания.НайтиСтроки(Новый Структура("ДокументВнешнегоОснования", ДокументОснование));
				Если СтрокиРО.Количество() = 0 Тогда
					ОчиститьСвязанныеТабличныеЧастиПоПредписанию(СтрокиПредписаний);
				КонецЕсли;
				Для Каждого Предписание Из СтрокиПредписаний Цикл 
					Объект.ЗакрываемыеПредписания.Удалить(Предписание);
				КонецЦикла;
			КонецЕсли;

		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
				
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, СтрокаРР.РемонтыОборудования_ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
			Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
				СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
				Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
					Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(ТекущиеЗначения, СтруктураТабличныхЧастей)

	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
		ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
		
		СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			ТабличнаяЧасть.Удалить(Элемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
	ПараметрыПоиска.Вставить("Родитель_ID", ТекущиеЗначения.ID);
			
	МассивПодчиненныхСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрДерева Из МассивПодчиненныхСтрок Цикл
		СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктураДляПередачи, СтруктураТабличныхЧастей);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИсполнителям()
	ТекущиеДанныеДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекущиеДанныеРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущиеДанныеРемонтовОборудования = Неопределено Или ТекущиеДанныеДереваРемонтов = Неопределено Тогда
	    Возврат; 
	КонецЕсли;
	
	Если ТекущиеДанныеДереваРемонтов.РемонтнаяРабота = "Ремонтные работы" Тогда
		Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ТекущиеДанныеРемонтовОборудования.ID);
	ИначеЕсли ТипЗнч(ТекущиеДанныеДереваРемонтов.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ТекущиеДанныеДереваРемонтов.ID, ТекущиеДанныеРемонтовОборудования.ID);
	Иначе
		СтруктураПоиска = Новый Структура("ПодходитПодОтбор", Истина);
		МассивИсполнителей = Объект.Исполнители.НайтиСтроки(СтруктураПоиска);
		Для каждого Исполнитель Из МассивИсполнителей Цикл
		    Исполнитель.ПодходитПодОтбор = Ложь;
		КонецЦикла;
		
		МассивРаботТК = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивРаботТК, ТекущиеДанныеДереваРемонтов.ПолучитьЭлементы());
		Для каждого РемонтнаяРабота Из МассивРаботТК Цикл
			СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID", РемонтнаяРабота.ID, ТекущиеДанныеРемонтовОборудования.ID);
			МассивИсполнителейТК = Объект.Исполнители.НайтиСтроки(СтруктураПоиска);
			Для каждого Исполнитель Из МассивИсполнителейТК Цикл
			    Исполнитель.ПодходитПодОтбор = Истина;
			КонецЦикла; 
		КонецЦикла;
		
		Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("ПодходитПодОтбор", Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РемонтыОборудованияОбновитьДокументыИсточники()
	
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ТипДокументаОснования = "" и СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителей(Адрес)
	
	Если Адрес = Неопределено Тогда возврат; КонецЕсли;
	
	тз = ПолучитьИзВременногоХранилища(Адрес);
	
	стрОтбора = Новый Структура("РемонтыОборудования_ID, ID");
	
	Для каждого текСтрока из Тз Цикл
		ЗаполнитьЗначенияСвойств(стрОтбора, текСтрока);
		НайС = Объект.Исполнители.НайтиСтроки(стрОтбора);
		
		Для каждого ТезЗапись из НайС Цикл
			Объект.Исполнители.Удалить(ТезЗапись);
			Модифицированность = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого текСтрока из Тз Цикл
		нс = Объект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
	КонецЦикла;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаАвтоматическогоЗаполненияИсполнителей(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		Объект.Исполнители.Очистить();
		Для каждого СтрокаМассива Из Результат Цикл
			НС = Объект.Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаМассива);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСтруктурИсполнителей()
	Массив = Новый Массив;
	
	Для каждого СтрокаРемонтовОборудования Из Объект.РемонтыОборудования Цикл
		
		МассивСтрокРемонныхРабот = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID));
		
		Для каждого СтрокаРемонтныхРабот Из МассивСтрокРемонныхРабот Цикл
			
			МассивИсполнителей = Объект.Исполнители.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, ID", СтрокаРемонтовОборудования.ID, СтрокаРемонтныхРабот.ID));
			
			Для каждого СтрокаИсполнителя Из МассивИсполнителей Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				СтруктураСтроки.Вставить("Квалификация"          , СтрокаИсполнителя.Квалификация);
				СтруктураСтроки.Вставить("ДатаНачала"            , СтрокаИсполнителя.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончания"         , СтрокаИсполнителя.ДатаОкончания);
				СтруктураСтроки.Вставить("ВремяРаботы"           , СтрокаИсполнителя.ВремяРаботы);
				СтруктураСтроки.Вставить("Сотрудник"             , СтрокаИсполнителя.Сотрудник);
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			Если Не ТипЗнч(СтрокаРемонтныхРабот.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт")
				И Не МассивИсполнителей.Количество() > 0 Тогда //нужно отразить хотя бы тех операции.
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				
				СтруктураСтроки.Вставить("Квалификация");
				СтруктураСтроки.Вставить("ДатаНачала");
				СтруктураСтроки.Вставить("ДатаОкончания");
				СтруктураСтроки.Вставить("ВремяРаботы");
				СтруктураСтроки.Вставить("СуммаКНачислению");
				СтруктураСтроки.Вставить("Сотрудник");
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции	

&НаКлиенте
Функция ЗаполнитьДанныеНаОснованииППРВыделенныеСтроки()
	
	ВыбранноеЗначение = Новый Массив;
	МассивИдРемонтов = Новый Массив;
	
	Для Каждого СтрокаМассиваIDИзППР Из МассивIDИзППР Цикл
	
		СтруктураВыбора = Новый Структура;
		
		СтруктураВыбора.Вставить("ДокументОснование", ДокОснованиеППР);
		СтруктураВыбора.Вставить("СтрокаРемонтовОборудования", СтрокаМассиваIDИзППР.Значение.СтрокаРемонтовОборудования);
		СтруктураВыбора.Вставить("МассивСтрокРемонтныхРабот", СтрокаМассиваIDИзППР.Значение.МассивСтрокРемонтныхРабот);
		
		ВыбранноеЗначение.Добавить(СтруктураВыбора);
		МассивИдРемонтов.Добавить(СтрокаМассиваIDИзППР.Значение.СтрокаРемонтовОборудования.ID);
		
	КонецЦикла;
	
	АдресХранилища = ПоместитьДанныеДляЗаполненияВоВременноеХранилище(ВыбранноеЗначение, ЭтаФорма.УникальныйИдентификатор);
	
	СтруктураВозрата = Новый Структура;
	СтруктураВозрата.Вставить("ПодборРемонтов", Истина);
	СтруктураВозрата.Вставить("ЭтоРемонтнаяРабота", Ложь);
	СтруктураВозрата.Вставить("МассивИДРемонтов", МассивИДРемонтов);
	СтруктураВозрата.Вставить("АдресХранилища", АдресХранилища);

	Возврат СтруктураВозрата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьДанныеДляЗаполненияВоВременноеХранилище(ВыбранноеЗначение, АдресХранилища)
	
	Возврат ПоместитьВоВременноеХранилище(ВыбранноеЗначение, АдресХранилища);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИзЛотовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.ID КАК РемонтыОборудования_ID,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.Подрядчик КАК Исполнитель,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.ДоговорПодрядчика КАК УточнениеИсполнителя,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.Регистратор.Сумма КАК Сумма,
	|	торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.торо_ЗапланированныеПодрядчикиРемонтов.СрезПоследних(, ID В (&СписокID)) КАК торо_ЗапланированныеПодрядчикиРемонтовСрезПоследних";
	
	Запрос.УстановитьПараметр("СписокID", Объект.РемонтыОборудования.Выгрузить(,"ID"));
	
	ВыборкаИсполнителей = Запрос.Выполнить().Выбрать();
	
	СтруктураПоискаИсполнителей = Новый Структура("РемонтыОборудования_ID, Исполнитель, УточнениеИсполнителя");
	
	Пока ВыборкаИсполнителей.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаИсполнителей, ВыборкаИсполнителей);
		ИсполнителиПоРемонтам = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоискаИсполнителей);
		
		Если ИсполнителиПоРемонтам.Количество() = 0 Тогда
			НоваяСтрока = Объект.ИсполнителиПоРемонтам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаИсполнителей); 
		Иначе
			Для каждого Строка из ИсполнителиПоРемонтам Цикл
				Строка.Сумма = ВыборкаИсполнителей.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		СписокТехКарт = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ВыборкаИсполнителей.РемонтыОборудования_ID));
		Для Каждого ТехКарта Из СписокТехКарт Цикл
			Если ТипЗнч(ТехКарта.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Если НЕ ЗначениеЗаполнено(ТехКарта.Исполнитель) Тогда
					ТехКарта.Исполнитель = ВыборкаИсполнителей.Исполнитель;
					ТехКарта.ДоговорБригада = ВыборкаИсполнителей.УточнениеИсполнителя;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСвязанныхТаблицРемонты()
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		//СтруктураОтбораID =  Новый ФиксированнаяСтруктура("РемонтыОборудования_ID",ТекДанные.ID);
		Элементы.ИсполнителиПоРемонтам.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ТекДанные.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораБригады(Исполнитель, ЭлементДоговорБригада, ОтборПоСсылке = Неопределено)
	
	ПараметрыВыбораМассив = Новый Массив;
	МассивТипов = Новый Массив;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Исполнитель));
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
		МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		
	ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Подразделение", Исполнитель));
		МассивТипов.Добавить(Тип("СправочникСсылка.торо_РемонтныеБригады"));
		
	КонецЕсли;
	
	Если ОтборПоСсылке <> Неопределено Тогда
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ОтборПоСсылке)));
	КонецЕсли;
	
	ЭлементДоговорБригада.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	ЭлементДоговорБригада.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораБригады_ДляРемонтныхРабот(Исполнитель, РемонтыОборудования_ID)
	
	СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Исполнитель", РемонтыОборудования_ID, Исполнитель);
	СтрокиИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);
	
	ОтборПоСсылке = Новый Массив;
	Для каждого Строка из СтрокиИсполнителей Цикл
		ОтборПоСсылке.Добавить(Строка.УточнениеИсполнителя);
	КонецЦикла;
	
	УстановитьПараметрыВыбораДоговораБригады(Исполнитель, Элементы.ДеревоРемонтныхРаботДоговорБригада, ОтборПоСсылке);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораИсполнителя_ДляРемонтныхРабот(РемонтыОборудования_ID)
	
	СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID);
	СтрокиИсполнителей = Объект.ИсполнителиПоРемонтам.НайтиСтроки(СтруктураПоиска);

	ОтборПоСсылке = Новый Массив;
	Для каждого Строка из СтрокиИсполнителей Цикл
		ОтборПоСсылке.Добавить(Строка.Исполнитель);
	КонецЦикла;

	ПараметрыВыбораМассив = Новый Массив;
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ОтборПоСсылке)));
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("РежимОтображенияСписка", "Список"));
	Элементы.ДеревоРемонтныхРаботИсполнитель.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиРемонтныеРаботыДляОчисткиИсполнителей(РемонтыОборудования_ID, ИдентификаторИсключаемойСтроки)
	
	МассивОтобранныхСтрок = Новый Массив;
	МассивСтрокДерева = Новый Массив;
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ДеревоРемонтныхРабот.ПолучитьЭлементы());

	Если МассивСтрокДерева.Количество() <=1 Тогда
		Возврат МассивОтобранныхСтрок;
	КонецЕсли;
	
	ВсеИсполнителиРемонта = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID));
	МассивИсполнителей = Новый Массив;
	МассивДоговоров = Новый Массив;
	
	Для каждого Строка из ВсеИсполнителиРемонта Цикл
		Если Строка.ПолучитьИдентификатор() = ИдентификаторИсключаемойСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Исполнитель) Тогда
			МассивИсполнителей.Добавить(Строка.Исполнитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.УточнениеИсполнителя) Тогда
			МассивДоговоров.Добавить(Строка.УточнениеИсполнителя);
		КонецЕсли;
	КонецЦикла;
		
	Для каждого Строка из МассивСтрокДерева Цикл
		Если ЗначениеЗаполнено(Строка.Исполнитель) И МассивИсполнителей.Найти(Строка.Исполнитель) = Неопределено
			ИЛИ ЗначениеЗаполнено(Строка.ДоговорБригада) И МассивДоговоров.Найти(Строка.ДоговорБригада) = Неопределено Тогда
			МассивОтобранныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОтобранныхСтрок;
	
КонецФункции

&НаКлиенте
Функция НайтиРемонтныеРаботыДляОчисткиДоговораБригады(РемонтыОборудования_ID, ИдентификаторИсключаемойСтроки)
	
	МассивОтобранныхСтрок = Новый Массив;
	МассивСтрокДерева = Новый Массив;
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ДеревоРемонтныхРабот.ПолучитьЭлементы());

	Если МассивСтрокДерева.Количество() <=1 Тогда
		Возврат МассивОтобранныхСтрок;
	КонецЕсли;
	
	ВсеИсполнителиРемонта = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID));
	МассивДоговоров = Новый Массив;
	
	Для каждого Строка из ВсеИсполнителиРемонта Цикл
		Если Строка.ПолучитьИдентификатор() = ИдентификаторИсключаемойСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.УточнениеИсполнителя) Тогда
			МассивДоговоров.Добавить(Строка.УточнениеИсполнителя);
		КонецЕсли;
	КонецЦикла;
		
	Для каждого Строка из МассивСтрокДерева Цикл
		Если ЗначениеЗаполнено(Строка.ДоговорБригада) И МассивДоговоров.Найти(Строка.ДоговорБригада) = Неопределено Тогда
			МассивОтобранныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОтобранныхСтрок;
	
КонецФункции

&НаКлиенте 
Процедура РемонтыОборудованияОбработкаВыбораПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивИДРемонтов = ДополнительныеПараметры.МассивИДДобавленныхРемонтов;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого ЭлементМассива из МассивИДРемонтов Цикл
			ОчиститьСвязанныеТабличныеЧасти(, , ЭлементМассива);
		КонецЦикла;
		
		ОбработкаВыбораЗавершение(ДополнительныеПараметры.ВыбранноеЗначение);
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте 
Процедура ОбработкаВыбораЗавершение(ВыбранноеЗначение)
	
	СтруктураВозврата = РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение.АдресХранилища);
	
	Если СтруктураВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделитьСтрокуРемонтовОборудования(СтруктураВозврата.IDРемонтаДляАктивизации);
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция РемонтыОборудованияОбработкаВыбораСервер(АдресХранилища)

	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыбранноеЗначение = ПолучитьИзВременногоХранилища(АдресХранилища);
	
    IDРемонтаДляАктивизации = Неопределено;
	МассивСтруктурВозврата = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(Неопределено, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, Неопределено);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;	
	
	Если ВыбранноеЗначение.Количество() = 1 Тогда
		IDРемонтаДляАктивизации = ВыбранноеЗначение[0].СтрокаРемонтовОборудования.ID;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.Исполнители Цикл
		Если Не ЗначениеЗаполнено(Строка.ВремяРаботы) Тогда
			Строка.ВремяРаботы = Строка.ДатаОкончания - Строка.ДатаНачала;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДобавленныеКолонкиТаблиц();
	ОбновитьЗависимыеЛоты();
	ОбновитьДоступностьДляРедактирования();

	Возврат Новый Структура("IDРемонтаДляАктивизации", IDРемонтаДляАктивизации);
	
КонецФункции

&НаСервере
Процедура ПроверитьДаты(ИмяТЧ, СтрокиТЧ, СтрокаРемонта, Отказ)
	Для Каждого Строка Из СтрокиТЧ Цикл
		Если Не ЗначениеЗаполнено(Строка.ДатаНачала) Или Не ЗначениеЗаполнено(Строка.ДатаОкончания) Тогда
			Возврат;
		КонецЕсли;
		
		Исполнитель = ?(ИмяТЧ = "Исполнители", Строка.Сотрудник, Строка.Исполнитель);
		
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" у исполнителя %2 дата начала не может быть больше даты окончания (%3 - %4).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРемонта.ОбъектРемонта, Исполнитель, Строка.ДатаНачала, Строка.ДатаОкончания);
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ТекстСообщения = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура РассчитатьВремя(IDСтроки)
	ТекущиеДанные = Объект.Исполнители.НайтиПоИдентификатору(IDСтроки);
	ТекущиеДанные.ВремяРаботы = ТекущиеДанные.ДатаОкончания - ТекущиеДанные.ДатаНачала;
	ТекущиеДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТекущиеДанные.ВремяРаботы);
КонецПроцедуры

&НаСервере
Процедура УстановитьПовышеннуюОпасностьРемонтовОборудования()
	
	Если ФОРассчитыватьОпасность Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	РемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID
		               |ПОМЕСТИТЬ РемРаботы
		               |ИЗ
		               |	&РемонтныеРаботы КАК РемонтныеРаботы
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РемРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID
		               |ИЗ
		               |	Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РемРаботы КАК РемРаботы
		               |		ПО торо_ТехнологическиеОперации.Ссылка = РемРаботы.РемонтнаяРабота
		               |ГДЕ
		               |	торо_ТехнологическиеОперации.РаботаПовышеннойОпасности = ИСТИНА";
		
		Запрос.УстановитьПараметр("РемонтныеРаботы", Объект.РемонтныеРаботы.Выгрузить(,"РемонтнаяРабота,РемонтыОборудования_ID")); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтарыеСтроки =  Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("СодержитРаботыПовышеннойОпасности", Истина));
		Для каждого Строка из СтарыеСтроки Цикл
			Строка.СодержитРаботыПовышеннойОпасности = Ложь;
		КонецЦикла;
		
		Пока Выборка.Следующий() Цикл
			Строки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID",Выборка.РемонтыОборудования_ID));
			Если Строки.Количество() = 1 Тогда
				Строки[0].СодержитРаботыПовышеннойОпасности = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	ОбновитьДобавленныеКолонкиТаблиц();
	ОбновитьЗависимыеЛоты();

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуРемонтовОборудования(ИДРемонта)
	
	Если ЗначениеЗаполнено(ИДРемонта) Тогда
		Массивстрок = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ИДРемонта));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Идентиф;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.РемонтыОборудования.ТекущаяСтрока = Неопределено Тогда
		Если Объект.РемонтыОборудования.Количество() > 0 Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Объект.РемонтыОборудования[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуДереваРемонтныхРабот(ИДОперации)
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Если ЗначениеЗаполнено(ИДОперации) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ЭлементыДереваРемРабот, ИДОперации, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыДереваРемРабот.Количество() > 0 Тогда
		Элементы.ДеревоРемонтныхРабот.Развернуть(ЭлементыДереваРемРабот[0].ПолучитьИдентификатор(),Истина);
		Если Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ЭлементыДереваРемРабот[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДобавленныеКолонкиТаблиц()
	
	РемонтыОборудованияОбновитьДокументыИсточники();
	торо_Ремонты.РемонтыОборудованияОбновитьВидРемонтаВОиВД(Объект.Ссылка, Объект.РемонтыОборудования);
	
	УстановитьПовышеннуюОпасностьРемонтовОборудования();

	Для каждого Строка Из Объект.Исполнители Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;

	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПодразделений(ТекущийРемонтID)
	
	СписокПодразделений = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ТекущийРемонтID) Тогда
		НайденыеСтроки = Объект.ИсполнителиПоРемонтам.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонтID));
		Для каждого Строка Из НайденыеСтроки Цикл
			Если ЗначениеЗаполнено(Строка.Исполнитель) И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				СписокПодразделений.Добавить(Строка.Исполнитель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если СписокПодразделений.Количество() = 0 Тогда
		СписокПодразделений.Добавить(Объект.Подразделение);
	КонецЕсли;
	
	Возврат СписокПодразделений;
	
КонецФункции

&НаКлиенте
Процедура УправлениеФормой(ТекущиеДанные = Неопределено)
	
	УстановитьДоступностьКнопокРемонтныхРабот();
	УстановитьДоступностьКнопокИсполнителей();
	
	Если Не ТекущиеДанные=Неопределено Тогда
		Найденный = МассивIDЛотов.НайтиПоЗначению(ТекущиеДанные.ID);
		Если Найденный <> Неопределено Тогда
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Истина;
		Иначе
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокРемонтныхРабот()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавить");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехКарту");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботДобавитьТехОперацию");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборОпераций");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботПодборПоБригадамДляОперации");
	СписокЭлементов.Добавить("ГруппаЗаполнить");
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамДобавить");
	СписокЭлементов.Добавить("ИсполнителиПоРемонтамЗаполнитьИзЛотов");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботУказатьПараллельноВыполняемые");
	СписокЭлементов.Добавить("ДеревоРемонтныхРаботКонтекстноеМенюУказатьПараллельноВыполняемые");
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.РемонтыОборудования,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокИсполнителей()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ИсполнителиДобавить");
	СписокЭлементов.Добавить("ИсполнителиЗаполнитьИсполнителей");
	СписокЭлементов.Добавить("ИсполнителиПодборПоБригадамДляДокумента");

	КоличествоЭлементов = ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество();
	
	Если КоличествоЭлементов > 0 Тогда		
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество(),СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	Иначе
		торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(КоличествоЭлементов,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	КонецЕсли;
	
КонецПроцедуры

РемонтОборудованияУдаляется = Ложь;

#КонецОбласти