#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Дефектная ведомость
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_ВыявленныеДефекты";
	КомандаПечати.Идентификатор = "ДефектнаяВедомость";
	КомандаПечати.Представление = НСтр("ru = 'Дефектная ведомость'");
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
	// Дефектная ведомость (ликвидация ОР)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_ВыявленныеДефекты";
	КомандаПечати.Идентификатор = "ДефектнаяВедомостьЛиквидация";
	КомандаПечати.Представление = НСтр("ru = 'Дефектная ведомость (ликвидация ОР)'");
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
	// Акт дефектации
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_ВыявленныеДефекты";
	КомандаПечати.Идентификатор = "АктДефектации";
	КомандаПечати.Представление = НСтр("ru = 'Акт дефектации'");
	КомандаПечати.Обработчик = "торо_Печать.ЗапроситьУПользователяДополнительныеПараметрыПередПечатью";
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
	// Акт рекламации 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_ВыявленныеДефекты";
	КомандаПечати.Идентификатор = "РекламационныйАкт";
	КомандаПечати.Обработчик = "торо_Печать.ВыбратьГарантийныеРемонтыДляПечати";
	КомандаПечати.Представление = НСтр("ru = 'Рекламационный акт'");
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ИменаОбъектовМетаданных = РегистрыСведений.торо_ВводНаОсновании.ИменаДоступныхОбъектовМетаданныхДляВводаНаОсновании(
		 Метаданные.Документы.торо_ВыявленныеДефекты.Имя);
		 
	Для Каждого ИмяОбъектаМетаданных Из ИменаОбъектовМетаданных Цикл
		Документы[ИмяОбъектаМетаданных].ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);		 
	КонецЦикла;		 
	
	Документы.торо_АнализКоренныхПричин.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	торо_СозданиеНаОсновании.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
		
КонецПроцедуры

// Добавляет команду создания документа "Выявленный дефект".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.торо_ВыявленныеДефекты) Тогда
        КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
        КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.торо_ВыявленныеДефекты.ПолноеИмя();
        КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.торо_ВыявленныеДефекты);
        КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "торо_УчетВыявленныхДефектовОборудования";
        Возврат КомандаСоздатьНаОсновании;
	КонецЕсли; 
	
    Возврат Неопределено;
	
КонецФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДефектнаяВедомостьЛиквидация") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"ДефектнаяВедомостьЛиквидация", 
		"Дефектная ведомость (ликвидация ОР)", 
		ПечатьДефектнойВедомостиЛиквидации(МассивОбъектов, ПараметрыПечати),
		,
		"Документ.торо_ВыявленныеДефекты.ПФ_MXL_ДефектнаяВедомостьЛиквидация");
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДефектнаяВедомость") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"ДефектнаяВедомость", 
		"Дефектная ведомость", 
		ПечатьДефектнойВедомости(МассивОбъектов, ПараметрыПечати),
		,
		"Документ.торо_ВыявленныеДефекты.ПФ_MXL_ДефектнаяВедомость");	
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктДефектации") Тогда
		
		ПараметрыПечати.Вставить("ПечатьАктаДефектации");
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"АктДефектации", 
		"Акт дефектации", 
		ПечатьАктаДефектации(МассивОбъектов, ПараметрыПечати),
		,
		"Документ.торо_ВыявленныеДефекты.ПФ_MXL_АктДефектации");
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РекламационныйАкт") Тогда
		
		ПараметрыПечати.Вставить("ПечатьРекламационногоАкта");
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"РекламационныйАкт", 
		"Рекламационный акт", 
		ПечатьРекламационногоАкта(МассивОбъектов, ПараметрыПечати),
		,
		"Документ.торо_ВыявленныеДефекты.ПФ_MXL_РекламационныйАкт");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьДефектнойВедомости(МассивОбъектов, ПараметрыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.торо_ВыявленныеДефекты.ПФ_MXL_ДефектнаяВедомость");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВыявленныеДефекты.Ссылка КАК Ссылка,
	|	торо_ВыявленныеДефекты.Номер КАК Номер,
	|	торо_ВыявленныеДефекты.Дата КАК Дата,
	|	торо_ВыявленныеДефекты.ДатаОбнаружения КАК ДатаОбнаружения,
	|	торо_ВыявленныеДефекты.ДефектВыявленВПроцессе КАК ДефектВыявленВПроцессе,
	|	торо_ВыявленныеДефекты.Организация КАК Организация,
	|	торо_ВыявленныеДефекты.Подразделение КАК Подразделение,
	|	торо_ВыявленныеДефекты.Ответственный КАК Ответственный,
	|	торо_ВыявленныеДефекты.Инициатор КАК Инициатор,
	|	торо_ВыявленныеДефекты.СписокДефектов.(
	|		ВидДефекта КАК ВидДефекта,
	|		ДефектВыявленВПроцессе КАК ДефектВыявленВПроцессе,
	|		ДефектОписание КАК ДефектОписание,
	|		ДефектПричина КАК ДефектПричина,
	|		НаправлениеНаУстранение КАК НаправлениеНаУстранение,
	|		ОбъектРемонта КАК ОбъектРемонта,
	|		ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	|		ПоследствияДефекта КАК ПоследствияДефекта,
	|		КритичностьДефекта КАК КритичностьДефекта,
	|		КрайняяДопустимаяДатаЗавершенияРемонта КАК КрайняяДопустимаяДатаЗавершенияРемонта,
	|		ДатаНачалаРемонта КАК ДатаНачалаРемонта,
	|		ДатаОкончанияРемонта КАК ДатаОкончанияРемонта
	|	) КАК СписокДефектов
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	|ГДЕ
	|	торо_ВыявленныеДефекты.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	ЭтоПервый = Истина;
	
	ФОНазначениеНаРемонтСУчетомРисков = ПолучитьФункциональнуюОпцию("торо_НазначениеНаРемонтСУчетомРисков");

	Пока ВыборкаДокументов.Следующий() Цикл
		Если НЕ ЭтоПервый Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ЭтоПервый = Ложь;
		
		ШапкаДокумента                 = Макет.ПолучитьОбласть("ШапкаДокумента");
		
		Если ФОНазначениеНаРемонтСУчетомРисков Тогда
			
			ШапкаДокументаЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаДокументаЗаголовокТаблицыМОР");
			СтрокаТаблицаНомераКолонок     = Макет.ПолучитьОбласть("СтрокаТаблицаНомераКолонокМОР");
			СтрокаТаблицыОР                = Макет.ПолучитьОбласть("СтрокаТаблицыОРМОР");
			СтрокаТаблицаОтказавшийЭлемент = Макет.ПолучитьОбласть("СтрокаТаблицаОтказавшийЭлементМОР");
	
		Иначе
			
			ШапкаДокументаЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаДокументаЗаголовокТаблицы");
			СтрокаТаблицаНомераКолонок     = Макет.ПолучитьОбласть("СтрокаТаблицаНомераКолонок");
			СтрокаТаблицыОР                = Макет.ПолучитьОбласть("СтрокаТаблицыОР");
			СтрокаТаблицаОтказавшийЭлемент = Макет.ПолучитьОбласть("СтрокаТаблицаОтказавшийЭлемент");
			
		КонецЕсли; 
		
		ПодвалОтветственные            = Макет.ПолучитьОбласть("ПодвалОтветственные");
		
		ШапкаДокумента.Параметры.НомерДокумента           = ВыборкаДокументов.Номер;
		ШапкаДокумента.Параметры.ДатаДокумента            = ВыборкаДокументов.Дата;
		ШапкаДокумента.Параметры.Подразделение            = ВыборкаДокументов.Подразделение;
		ШапкаДокумента.Параметры.Организация              = торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(ВыборкаДокументов.Организация);
		ШапкаДокумента.Параметры.ДатаОбнаружения          = ВыборкаДокументов.ДатаОбнаружения; 
		ШапкаДокумента.Параметры.ДефектВыявленВПроцессе   = ВыборкаДокументов.ДефектВыявленВПроцессе; 
		ШапкаДокумента.Параметры.Инициатор                = ВыборкаДокументов.Инициатор; 	
		
		ТабДок.Вывести(ШапкаДокумента);	
		
		ТабДок.Вывести(ШапкаДокументаЗаголовокТаблицы);		
		
		ТабДок.Вывести(СтрокаТаблицаНомераКолонок);
		ГруппаОтказавшихЭлементов=Неопределено;
		ном=1;
		
		ТЧДефектов = ВыборкаДокументов.СписокДефектов.Выгрузить();
		
		Для Каждого Дефект Из ТЧДефектов Цикл
			ОбъектРемонтаИзТЧ = Дефект.ОбъектРемонта;
			
			Если не (ОбъектРемонтаИзТЧ = ГруппаОтказавшихЭлементов) или (ГруппаОтказавшихЭлементов=Неопределено) Тогда 
				СтрокаТаблицыОР.Параметры.ОбъектРемонта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ОбъектРемонтаИзТЧ);
				
				ТабДок.Вывести(СтрокаТаблицыОР);
				ГруппаОтказавшихЭлементов= ОбъектРемонтаИзТЧ;
			КонецЕсли;
			
			СтрокаТаблицаОтказавшийЭлемент.Параметры.н = ном;
	        СтрокаТаблицаОтказавшийЭлемент.Параметры.ОтказавшийЭлемент = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(Дефект.ОтказавшийЭлемент);
            СтрокаТаблицаОтказавшийЭлемент.Параметры.ВидДефекта             = Дефект.ВидДефекта;
            СтрокаТаблицаОтказавшийЭлемент.Параметры.ОписаниеДефекта        = Дефект.ДефектОписание;
            СтрокаТаблицаОтказавшийЭлемент.Параметры.ПричинаДефекта         = Дефект.ДефектПричина;
            СтрокаТаблицаОтказавшийЭлемент.Параметры.УстранениеДефекта      = Дефект.НаправлениеНаУстранение;
            СтрокаТаблицаОтказавшийЭлемент.Параметры.ПоследствияДефекта     = Дефект.ПоследствияДефекта;
            
            Если ФОНазначениеНаРемонтСУчетомРисков Тогда
				
				СтрокаТаблицаОтказавшийЭлемент.Параметры.ДатаНачала         = Дефект.ДатаНачалаРемонта;
                СтрокаТаблицаОтказавшийЭлемент.Параметры.ДатаОкончания      = Дефект.ДатаОкончанияРемонта;
                СтрокаТаблицаОтказавшийЭлемент.Параметры.КДДЗР              = Дефект.КрайняяДопустимаяДатаЗавершенияРемонта;
	
			КонецЕсли; 
			
			ном = ном + 1;
			
			ТабДок.Вывести(СтрокаТаблицаОтказавшийЭлемент);
		КонецЦикла;
		
		ПодвалОтветственные.Параметры.Ответственный = ВыборкаДокументов.Ответственный;
		ТабДок.Вывести(ПодвалОтветственные);
		
	КонецЦикла;
	
	ТабДок.АвтоМасштаб         = Истина;
	ТабДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабДок.ТолькоПросмотр      = Истина;
	ТабДок.ОтображатьСетку     = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.КлючПараметровПечати = "торо_ПечатьДефектнойВедомости";
	
	Возврат ТабДок;
	
	
КонецФункции

Функция ПечатьДефектнойВедомостиЛиквидации(МассивОбъектов, ПараметрыПечати)

	ТабДок = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.торо_ВыявленныеДефекты.ПФ_MXL_ДефектнаяВедомостьЛиквидация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВыявленныеДефекты.Ссылка КАК Ссылка,
	|	торо_ВыявленныеДефекты.Номер КАК Номер,
	|	торо_ВыявленныеДефекты.Дата КАК Дата,
	|	торо_ВыявленныеДефекты.Организация КАК Организация,
	|	торо_ВыявленныеДефекты.Подразделение КАК Подразделение,
	|	торо_ВыявленныеДефекты.СписокДефектов.(
	|		ДефектОписание КАК ДефектОписание,
	|		ОбъектРемонта КАК ОбъектРемонта,
	|		ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	|		ОбъектРемонта.ИнвентарныйНомер КАК ОбъектРемонтаИнвентарныйНомер,
	|		ОбъектРемонта.ДатаВводаВЭксплуатацию КАК ОбъектРемонтаДатаВводаВЭксплуатацию
	|	) КАК СписокДефектов
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	|ГДЕ
	|	торо_ВыявленныеДефекты.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	ЭтоПервый = Истина;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		Если НЕ ЭтоПервый Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ЭтоПервый = Ложь;
		
		ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		СтрокаТаблицаНомераКолонок = Макет.ПолучитьОбласть("СтрокаТаблицаНомераКолонок");
		СтрокаТаблицаОткозавшийЭлемент = Макет.ПолучитьОбласть("СтрокаТаблицаОткозавшийЭлемент");
		Подвал = Макет.ПолучитьОбласть("Подвал");
		
		ШапкаДокумента.Параметры.НомерДокумента 	= ВыборкаДокументов.Номер;
		ШапкаДокумента.Параметры.ДатаДокумента 	= Формат(ВыборкаДокументов.Дата,"ДФ=dd.MM.yyyy");
		ШапкаДокумента.Параметры.Подразделение 	= ВыборкаДокументов.Подразделение;
		ШапкаДокумента.Параметры.Организация 		= торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(ВыборкаДокументов.Организация);
		
		ТабДок.Вывести(ШапкаДокумента);
		ТабДок.Вывести(СтрокаТаблицаНомераКолонок);
		ном=1;
		
		ТЧДефектов = ВыборкаДокументов.СписокДефектов.Выгрузить();
		
		Для Каждого Дефект Из ТЧДефектов Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаОткозавшийЭлемент.Параметры, Дефект.ОбъектРемонта);
			СтрокаТаблицаОткозавшийЭлемент.Параметры.н = ном;
			СтрокаТаблицаОткозавшийЭлемент.Параметры.ОбъектРемонта 	 = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(Дефект.ОбъектРемонта);
			СтрокаТаблицаОткозавшийЭлемент.Параметры.ИнвНомер     	 = Дефект.ОбъектРемонтаИнвентарныйНомер;
			СтрокаТаблицаОткозавшийЭлемент.Параметры.ДатаВвода	  	 = Формат(Дефект.ОбъектРемонтаДатаВводаВЭксплуатацию,"ДФ=dd.MM.yyyy");
			СтрокаТаблицаОткозавшийЭлемент.Параметры.ОписаниеДефекта = ?(Дефект.ОбъектРемонта = Дефект.ОтказавшийЭлемент, Дефект.ДефектОписание, Строка(торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(Дефект.ОтказавшийЭлемент))+", "+Дефект.ДефектОписание);
			
			ном=ном+1;
			
			ТабДок.Вывести(СтрокаТаблицаОткозавшийЭлемент);
			
		КонецЦикла;
		
		ТабДок.Вывести(Подвал);
		
	КонецЦикла;
	
	ТабДок.АвтоМасштаб         = Истина;
	ТабДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабДок.ТолькоПросмотр      = Истина;
	ТабДок.ОтображатьСетку     = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.КлючПараметровПечати = "торо_ПечатьДефектнойВедомостиЛиквидации";
	
	Возврат ТабДок;

КонецФункции // ПечатьДефектнойВедомостиЛиквидации(МассивОбъектов, ПараметрыПечати)  ,

Функция ПечатьАктаДефектации(МассивОбъектов, ПараметрыПечати)

	Макет  = УправлениеПечатью.МакетПечатнойФормы("Документ.торо_ВыявленныеДефекты.ПФ_MXL_АктДефектации");
	ТабДокумент = Новый ТабличныйДокумент;
	ИспользоватьКомиссии = Константы.торо_ИспользоватьКомиссии.Получить();
	
	ЗапросДокументов = Новый Запрос;
	ЗапросДокументов.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК Ссылка,
	|	торо_ВыявленныеДефектыСписокДефектов.НомерСтроки КАК НомерСтроки,
	|	торо_ВыявленныеДефектыСписокДефектов.ВидДефекта КАК ВидДефекта,
	|	торо_ВыявленныеДефектыСписокДефектов.ДефектВыявленВПроцессе КАК ДефектВыявленВПроцессе,
	|	торо_ВыявленныеДефектыСписокДефектов.ДефектОписание КАК ДефектОписание,
	|	торо_ВыявленныеДефектыСписокДефектов.ДефектПричина КАК ДефектПричина,
	|	торо_ВыявленныеДефектыСписокДефектов.НаправлениеНаУстранение КАК НаправлениеНаУстранение,
	|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	|	торо_ВыявленныеДефектыСписокДефектов.ПоследствияДефекта КАК ПоследствияДефекта,
	|	торо_ВыявленныеДефектыСписокДефектов.ВидРемонтов КАК ВидРемонтов,
	|	торо_ВыявленныеДефектыСписокДефектов.КритичностьДефекта КАК КритичностьДефекта,
	|	торо_ВыявленныеДефектыСписокДефектов.ТиповойДефект КАК ТиповойДефект,
	|	торо_ВыявленныеДефектыСписокДефектов.ID КАК ID,
	|	торо_ВыявленныеДефектыСписокДефектов.ДокументИсточник КАК ДокументИсточник,
	|	торо_ВыявленныеДефектыСписокДефектов.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
	|	торо_ВыявленныеДефектыСписокДефектов.ГарантийныйРемонт КАК ГарантийныйРемонт,
	|	торо_ВыявленныеДефектыСписокДефектов.ГарантийныйОбъект КАК ГарантийныйОбъект
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	|ГДЕ
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка В(&Ссылка)
	|	И торо_ВыявленныеДефектыСписокДефектов.ID В(&ID)
	|ИТОГИ ПО
	|	Ссылка";
	
	ЗапросДокументов.УстановитьПараметр("Ссылка", МассивОбъектов);
	Если ПараметрыПечати.Свойство("МассивID") Тогда
		ЗапросДокументов.УстановитьПараметр("ID", ПараметрыПечати.МассивID);
	Иначе
		ЗапросДокументов.Текст = СтрЗаменить(ЗапросДокументов.Текст, "И торо_ВыявленныеДефектыСписокДефектов.ID В(&ID)", "");
	КонецЕсли;
	
	ЭтоПервый = Истина;
	
	ВыборкаДокументов = ЗапросДокументов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Дефект = ВыборкаДокументов.Ссылка;
		
		Если ИспользоватьКомиссии Тогда
			ВыборкаКомиссия = ПолучитьКомиссию(Дефект);
		КонецЕсли;
		
		ВыборкаРемонтов = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока ВыборкаРемонтов.Следующий() Цикл
			Если НЕ ЭтоПервый Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ЭтоПервый = Ложь;
			
			ОР = ВыборкаРемонтов.ОбъектРемонта;
			
			// Выводим общие реквизиты шапки	
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Организация 		= торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(Дефект.Организация);
			ОбластьМакета.Параметры.ОбъектРемонта 		= торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ОР);
			ОбластьМакета.Параметры.НомерДокумента 		= Дефект.Номер;
			ОбластьМакета.Параметры.ДатаДокумента 		= Дефект.Дата;
			
			ОбластьМакета.Параметры.СтанционныйНомер 	= СокрЛП(ОР.ИнвентарныйНомер);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ИспользоватьКомиссии Тогда
				// Комиссиия
				КомиссияВСоставе = Макет.ПолучитьОбласть("КомиссияВСоставе");
				ТабДокумент.Вывести(КомиссияВСоставе);
				ВывестиКомиссию(ТабДокумент, ВыборкаКомиссия, Макет);
				НачалоАктаФОИспользоватьКомиссии = Макет.ПолучитьОбласть("НачалоАктаФОИспользоватьКомиссии");
				ТабДокумент.Вывести(НачалоАктаФОИспользоватьКомиссии);
			Иначе
				НачалоАктаБезФОИспользоватьКомиссии = Макет.ПолучитьОбласть("НачалоАктаБезФОИспользоватьКомиссии");
				ТабДокумент.Вывести(НачалоАктаБезФОИспользоватьКомиссии);				
			КонецЕсли;
			
			// Выводим пункты 1, 2,3
			ОбластьМакета =  Макет.ПолучитьОбласть("Пункты_1_2_3");
			ОбластьМакета.Параметры.ОбъектРемонта 				= торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ОР);
			ОбластьМакета.Параметры.СтанционныйНомер 			= СокрЛП(ОР.ИнвентарныйНомер);
			ОбластьМакета.Параметры.ЗаводИзготовитель 			= СокрЛП(?(ЗначениеЗаполнено(ОР.Изготовитель), ОР.Изготовитель, ОР.ТиповойОР.Изготовитель));
			ОбластьМакета.Параметры.ТипОборудования 			= СокрЛП(ОР.ТиповойОР);
			ОбластьМакета.Параметры.ЗаводскойНомер 				= СокрЛП(ОР.ЗаводскойНомер);
			ОбластьМакета.Параметры.ДатаВыпуска 				= ОР.ДатаВыпуска;
			ОбластьМакета.Параметры.ДатаВводаВЭксплуатацию 		= ОР.ДатаВводаВЭксплуатацию;
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	торо_ОбщиеДанныеПоРемонтам.IDРемонта КАК IDРемонта,
			               |	ЕСТЬNULL(торо_СвернутыеФактическиеДатыРемонтов.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаФакт,
						   |	торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания КАК ДатаОкончанияПлан
			               |ИЗ
						   |	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
						   |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
						   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов КАК торо_СвернутыеФактическиеДатыРемонтов
						   |		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_СвернутыеФактическиеДатыРемонтов.IDРемонта
			               |ГДЕ
			               |	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = &ОбъектРемонта
			               |	И торо_ОбщиеДанныеПоРемонтам.ВидРемонта.КапитальныйРемонт = ИСТИНА
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	торо_СвернутыеФактическиеДатыРемонтов.ДатаНачала УБЫВ";
			
			Запрос.УстановитьПараметр("ОбъектРемонта", ОР.Ссылка);
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				ОбластьМакета.Параметры.ДатаМесяцНачалаКапРемонта 	= Формат(Результат.ДатаНачалаФакт, "ДФ=дд") + "." + Формат(Результат.ДатаНачалаФакт, "ДФ=ММ");
				ОбластьМакета.Параметры.ГодНачалаКапРемонта 		= Формат(Результат.ДатаНачалаФакт, "ДФ=гг");
				ОбластьМакета.Параметры.ГодОкончанияКапРемонта 		= Формат(Результат.ДатаОкончанияПлан, "ДФ=гг");
			КонецЦикла;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Выводим описание дефектов
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаДеффектов");
			СтрокаОписания = ВыборкаРемонтов.ДефектОписание + " элемента " + торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ВыборкаРемонтов.ОтказавшийЭлемент);
			ОбластьМакета.Параметры.ОписаниеДеффекта = СокрЛП(СтрокаОписания);	
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Выводим пункт 4	
			ОбластьМакета =  Макет.ПолучитьОбласть("Пункт_4");
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРабот");
			СтрокаОписания = ВыборкаРемонтов.НаправлениеНаУстранение + " элемента " + торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ВыборкаРемонтов.ОтказавшийЭлемент);
			ОбластьМакета.Параметры.ОписаниеРаботы = СокрЛП(СтрокаОписания);	
			ТабДокумент.Вывести(ОбластьМакета);
			
			
			// Выводим подвал
			Если ИспользоватьКомиссии Тогда
				ВывестиКомиссиюПодвал(ТабДокумент, ВыборкаКомиссия, Макет);			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб	= Истина;
	ТабДокумент.ПолеСверху  = 0;
	ТабДокумент.ПолеСлева   = 0;
	ТабДокумент.ПолеСнизу   = 0;
	ТабДокумент.ПолеСправа  = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.КлючПараметровПечати = "торо_ПечатьАктаДефектации";
	
	Возврат ТабДокумент;
	

КонецФункции // ПечатьАктаДефектации(МассивОбъектов, ПараметрыПечати)

Функция ПечатьРекламационногоАкта(МассивОбъектов, ПараметрыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.торо_ВыявленныеДефекты.ПФ_MXL_РекламационныйАкт");
	ТабДокумент = Новый ТабличныйДокумент;
	ИспользоватьКомиссии = Константы.торо_ИспользоватьКомиссии.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент КАК ОтказавшийЭлемент
	               |ИЗ
	               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	               |ГДЕ
	               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка В(&Ссылка)
	               |	И торо_ВыявленныеДефектыСписокДефектов.ID В(&МассивИД)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Если ПараметрыПечати.Свойство("МассивID") Тогда
		Запрос.УстановитьПараметр("МассивИД", ПараметрыПечати.МассивID);
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И торо_ВыявленныеДефектыСписокДефектов.ID В(&МассивИД)", "");
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	ТабГарантий = Новый ТаблицаЗначений;
	ТабГарантий.Колонки.Добавить("ЗначениеНаработки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(16, 5, ДопустимыйЗнак.Неотрицательный)));
	ТабГарантий.Колонки.Добавить("ПоказательНаработки", Новый ОписаниеТипов("СправочникСсылка.ПараметрыВыработкиОС"));
	ТабГарантий.Колонки.Добавить("ПроверятьНаработку", Новый ОписаниеТипов("Булево"));
	ТабГарантий.Колонки.Добавить("ПроверятьПериодГарантии", Новый ОписаниеТипов("Булево"));
	ТабГарантий.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТабГарантий.Колонки.Добавить("ГарантирующаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТабГарантий.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабГарантий.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабГарантий.Колонки.Добавить("УсловияГарантии", Новый ОписаниеТипов("СправочникСсылка.торо_УсловияГарантии"));
	ТабГарантий.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТабГарантий.Колонки.Добавить("ОтказавшийЭлемент", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	
	Для Каждого ТекСтрока из Выгрузка Цикл
		СписокГарантий = торо_ГарантийноеОбслуживание.ПолучитьТаблицуГарантий(ТекСтрока.ОтказавшийЭлемент);
		Для Каждого ТекГарантия из СписокГарантий Цикл
			НовСтрока = ТабГарантий.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекГарантия);
			НовСтрока.ОтказавшийЭлемент = ТекСтрока.ОтказавшийЭлемент;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Таб.ГарантирующаяОрганизация КАК ГарантирующаяОрганизация,
	               |	Таб.ДатаОкончания КАК ДатаОкончанияГарантии,
	               |	Таб.ДатаНачала КАК ДатаНачалаГарантии,
	               |	Таб.ПроверятьПериодГарантии КАК ПроверятьПериодГарантии,
	               |	Таб.ПроверятьНаработку КАК ПроверятьНаработку,
	               |	Таб.ЗначениеНаработки КАК ЗначениеНаработки,
	               |	Таб.ПоказательНаработки КАК ПоказательНаработки,
	               |	ВЫРАЗИТЬ(Таб.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
	               |	ВЫРАЗИТЬ(Таб.ОтказавшийЭлемент КАК Справочник.торо_ОбъектыРемонта) КАК ОтказавшийЭлемент
	               |ПОМЕСТИТЬ ВТ_Гарантии
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК Ссылка,
	               |	торо_ВыявленныеДефектыСписокДефектов.ID КАК ID,
	               |	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	торо_ВыявленныеДефектыСписокДефектов.ВидДефекта КАК ВидДефекта,
	               |	торо_ВыявленныеДефектыСписокДефектов.ДефектОписание КАК ОписаниеДефекта,
	               |	торо_ВыявленныеДефектыСписокДефектов.ДефектПричина КАК ПричинаДефекта,
	               |	торо_ВыявленныеДефектыСписокДефектов.ПоследствияДефекта КАК ПоследствияДефекта,
	               |	торо_ВыявленныеДефектыСписокДефектов.НаправлениеНаУстранение КАК НаправлениеНаУстранение,
	               |	торо_ВыявленныеДефектыСписокДефектов.ГарантийныйРемонт КАК ГарантийныйРемонт,
	               |	ВТ_Гарантии.ГарантирующаяОрганизация КАК ГарантирующаяОрганизация,
	               |	ВТ_Гарантии.ДатаНачалаГарантии КАК ДатаНачалаГарантии,
	               |	ВТ_Гарантии.ДатаОкончанияГарантии КАК ДатаОкончанияГарантии,
	               |	ВТ_Гарантии.ПроверятьПериодГарантии КАК ПроверятьПериодГарантии,
	               |	ВТ_Гарантии.ПроверятьНаработку КАК ПроверятьНаработку,
	               |	ВТ_Гарантии.ЗначениеНаработки КАК ЗначениеНаработки,
	               |	ВТ_Гарантии.ПоказательНаработки КАК ПоказательНаработки
	               |ПОМЕСТИТЬ вт_ТаблицаГарантий
	               |ИЗ
	               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гарантии КАК ВТ_Гарантии
	               |		ПО торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент = ВТ_Гарантии.ОтказавшийЭлемент
	               |ГДЕ
	               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка В(&Ссылка)
	               |	И торо_ВыявленныеДефектыСписокДефектов.ID В(&ID)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_НаработкаОбъектовРемонтаОстатки.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_НаработкаОбъектовРемонтаОстатки.Показатель КАК Показатель,
	               |	торо_НаработкаОбъектовРемонтаОстатки.НаработкаОстаток КАК Наработка
	               |ПОМЕСТИТЬ ТекущаяНаработка
	               |ИЗ
	               |	РегистрНакопления.торо_НаработкаОбъектовРемонта.Остатки(
	               |			&ДатаОбнаружения,
	               |			(ОбъектРемонта, Показатель) В
	               |				(ВЫБРАТЬ
	               |					вт_ТаблицаГарантий.ОтказавшийЭлемент КАК ОбъектРемонта,
	               |					вт_ТаблицаГарантий.ПоказательНаработки
	               |				ИЗ
	               |					вт_ТаблицаГарантий КАК вт_ТаблицаГарантий
	               |				ГДЕ
	               |					вт_ТаблицаГарантий.ПроверятьНаработку)) КАК торо_НаработкаОбъектовРемонтаОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Показатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_ТаблицаГарантий.Ссылка КАК Ссылка,
	               |	вт_ТаблицаГарантий.Ссылка.Организация КАК Организация,
	               |	вт_ТаблицаГарантий.Ссылка.Ответственный КАК Ответственный,
	               |	вт_ТаблицаГарантий.Ссылка.ДатаОбнаружения КАК ДатаОбнаружения,
	               |	вт_ТаблицаГарантий.ВидДефекта КАК ВидДефекта,
	               |	вт_ТаблицаГарантий.ОписаниеДефекта КАК ОписаниеДефекта,
	               |	вт_ТаблицаГарантий.ПричинаДефекта КАК ПричинаДефекта,
	               |	вт_ТаблицаГарантий.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
	               |	вт_ТаблицаГарантий.ОтказавшийЭлемент.ЗаводскойНомер КАК ЗаводскойНомерОР,
	               |	вт_ТаблицаГарантий.ГарантийныйРемонт КАК ГарантийныйРемонт,
	               |	вт_ТаблицаГарантий.ГарантирующаяОрганизация КАК ГарантирующаяОрганизация,
	               |	вт_ТаблицаГарантий.ДатаНачалаГарантии КАК ДатаНачалаГарантии,
	               |	вт_ТаблицаГарантий.ДатаОкончанияГарантии КАК ДатаОкончанияГарантии,
	               |	вт_ТаблицаГарантий.ПоследствияДефекта КАК ПоследствияДефекта,
	               |	вт_ТаблицаГарантий.НаправлениеНаУстранение КАК НаправлениеНаУстранение,
	               |	NULL КАК ЗначениеНаработки,
	               |	NULL КАК ПоказательНаработки
	               |ИЗ
	               |	вт_ТаблицаГарантий КАК вт_ТаблицаГарантий
	               |ГДЕ
	               |	вт_ТаблицаГарантий.ПроверятьПериодГарантии = ИСТИНА
	               |	И НАЧАЛОПЕРИОДА(вт_ТаблицаГарантий.ДатаНачалаГарантии, ДЕНЬ) <= &ДатаОбнаружения
	               |	И КОНЕЦПЕРИОДА(вт_ТаблицаГарантий.ДатаОкончанияГарантии, ДЕНЬ) >= &ДатаОбнаружения
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	вт_ТаблицаГарантий.Ссылка,
	               |	вт_ТаблицаГарантий.Ссылка.Организация,
	               |	вт_ТаблицаГарантий.Ссылка.Ответственный,
	               |	вт_ТаблицаГарантий.Ссылка.ДатаОбнаружения,
	               |	вт_ТаблицаГарантий.ВидДефекта,
	               |	вт_ТаблицаГарантий.ОписаниеДефекта,
	               |	вт_ТаблицаГарантий.ПричинаДефекта,
	               |	вт_ТаблицаГарантий.ОтказавшийЭлемент,
	               |	вт_ТаблицаГарантий.ОтказавшийЭлемент.ЗаводскойНомер,
	               |	вт_ТаблицаГарантий.ГарантийныйРемонт,
	               |	вт_ТаблицаГарантий.ГарантирующаяОрганизация,
	               |	NULL,
	               |	NULL,
	               |	вт_ТаблицаГарантий.ПоследствияДефекта,
	               |	вт_ТаблицаГарантий.НаправлениеНаУстранение,
	               |	вт_ТаблицаГарантий.ЗначениеНаработки,
	               |	вт_ТаблицаГарантий.ПоказательНаработки
	               |ИЗ
	               |	вт_ТаблицаГарантий КАК вт_ТаблицаГарантий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТекущаяНаработка КАК ТекущаяНаработка
	               |		ПО вт_ТаблицаГарантий.ОтказавшийЭлемент = ТекущаяНаработка.ОбъектРемонта
	               |			И вт_ТаблицаГарантий.ПоказательНаработки = ТекущаяНаработка.Показатель
	               |ГДЕ
	               |	вт_ТаблицаГарантий.ПроверятьНаработку = ИСТИНА
	               |	И вт_ТаблицаГарантий.ПроверятьПериодГарантии = ЛОЖЬ
	               |	И ЕСТЬNULL(ТекущаяНаработка.Наработка, 0) < вт_ТаблицаГарантий.ЗначениеНаработки";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.УстановитьПараметр("ДатаОбнаружения", МассивОбъектов[0].ДатаОбнаружения);
	Запрос.УстановитьПараметр("Таб", ТабГарантий);
	
	Если ПараметрыПечати.Свойство("МассивID") Тогда
		Запрос.УстановитьПараметр("ID", ПараметрыПечати.МассивID);
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И торо_ВыявленныеДефектыСписокДефектов.ID В(&ID)", "");
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
				
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Организация = торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(Выборка.Организация);
		ОбластьШапка.Параметры.ДатаДокумента = МассивОбъектов[0].Дата;
		ОбластьШапка.Параметры.Ответственный = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Выборка.Ответственный));
		ТабДокумент.Вывести(ОбластьШапка);
		
		ОбластьДефект = Макет.ПолучитьОбласть("Дефект");
		ЗаполнитьЗначенияСвойств(ОбластьДефект.Параметры, Выборка);
		ОбластьДефект.Параметры.ОрганизацияАдрес = торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(Выборка.Организация);
		ОбластьДефект.Параметры.ОтказавшийЭлемент = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(Выборка.ОтказавшийЭлемент);
		ОбластьДефект.Параметры.ЗаводНомер = СокрЛП(Выборка.ЗаводскойНомерОР);
		Если ЗначениеЗаполнено(Выборка.ДатаОкончанияГарантии) И ЗначениеЗаполнено(Выборка.ДатаНачалаГарантии) Тогда 
			ОбластьДефект.Параметры.ДатаПоступления = Выборка.ДатаНачалаГарантии;
			ОбластьДефект.Параметры.ГарантСрок = Строка((НачалоДня(Выборка.ДатаОкончанияГарантии)-НачалоДня(Выборка.ДатаНачалаГарантии))/86400) + " д.";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьДефект);
		
		ОбластьПриложение = Макет.ПолучитьОбласть("Приложение");
		ТабДокумент.Вывести(ОбластьПриложение);
		
		Если ИспользоватьКомиссии Тогда
			ВыборкаКомиссия = ПолучитьКомиссию(Выборка.Ссылка);
			ВывестиКомиссию(ТабДокумент, ВыборкаКомиссия, Макет);		
			
			ОбластьКомиссия = Макет.ПолучитьОбласть("КомиссияПоставщика");
			ТабДокумент.Вывести(ОбластьКомиссия);
		Иначе		
			ОбластьКомиссияБезФОИспользоватьКомиссии = Макет.ПолучитьОбласть("КомиссияПоставщикаБезФОИспользоватьКомиссии");
			ТабДокумент.Вывести(ОбластьКомиссияБезФОИспользоватьКомиссии);		
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДокумент.КлючПараметровПечати = "торо_ПечатьРекламационногоАкта";
	Возврат ТабДокумент;
	
КонецФункции

Процедура ВывестиКомиссию(ТабДокумент, ВыборкаКомиссия, Макет)
	
	ВыборкаКомиссия.Сбросить();
	ОбластьМакетаПредседатель  = Макет.ПолучитьОбласть("ПредседательКомиссии");
	
	ЕстьКомиссия = Ложь;
	
	Если ВыборкаКомиссия.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ОбластьМакетаПредседатель.Параметры, ВыборкаКомиссия);	
		ЕстьКомиссия = Истина;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаПредседатель);
	
	ОбластьМакетаЧленыКомиссии = Макет.ПолучитьОбласть("ЧленыКомисии");
	
	Если ЕстьКомиссия Тогда
		
		ВыборкаЧленыКомиссии = ВыборкаКомиссия.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока ВыборкаЧленыКомиссии.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ОбластьМакетаЧленыКомиссии.Параметры, ВыборкаЧленыКомиссии);
			ТабДокумент.Вывести(ОбластьМакетаЧленыКомиссии);
			
		КонецЦикла; 
	Иначе
		ТабДокумент.Вывести(ОбластьМакетаЧленыКомиссии);
	КонецЕсли;
	
КонецПроцедуры

Функция ВывестиКомиссиюПодвал(ТабДокумент, ВыборкаКомиссия, Макет)
	ВыборкаКомиссия.Сбросить();
	ОбластьМакетаПредседатель = Макет.ПолучитьОбласть("Комиссия");
	
	ЕстьКомиссия = Ложь;
	
	Если ВыборкаКомиссия.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ОбластьМакетаПредседатель.Параметры, ВыборкаКомиссия);	
		ЕстьКомиссия = Истина;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаПредседатель);
	
	ОбластьМакетаЧленыКомиссии = Макет.ПолучитьОбласть("СтрокаКомиссияФИО");

	Если ЕстьКомиссия Тогда
		
		ВыборкаЧленыКомиссии = ВыборкаКомиссия.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока ВыборкаЧленыКомиссии.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ОбластьМакетаЧленыКомиссии.Параметры, ВыборкаЧленыКомиссии);
			ТабДокумент.Вывести(ОбластьМакетаЧленыКомиссии);
			
		КонецЦикла; 
	Иначе
		ТабДокумент.Вывести(ОбластьМакетаЧленыКомиссии);
	КонецЕсли;
КонецФункции

Функция ПолучитьКомиссию(СсылкаНаДокумент)
	
	    Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_Комиссии.Ссылка КАК Ссылка,
		               |	торо_Комиссии.Председатель КАК ПредседательКомиссии,
		               |	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК ДолжностьПредседателя
		               |ПОМЕСТИТЬ втКомиссия
		               |ИЗ
		               |	Справочник.торо_Комиссии КАК торо_Комиссии
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Дата, ) КАК КадроваяИсторияСотрудниковСрезПоследних
		               |		ПО торо_Комиссии.Председатель = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		               |ГДЕ
		               |	торо_Комиссии.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втКомиссия.Ссылка КАК Ссылка,
		               |	торо_КомиссииСоставКомиссии.ЧленКомиссии КАК ЧленКомиссии,
					   |    КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность, 
		               |	втКомиссия.ПредседательКомиссии КАК ПредседательКомиссии,
					   |    втКомиссия.ДолжностьПредседателя КАК ДолжностьПредседателя
		               |ИЗ
		               |	втКомиссия КАК втКомиссия
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_Комиссии.СоставКомиссии КАК торо_КомиссииСоставКомиссии
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Дата, ) КАК КадроваяИсторияСотрудниковСрезПоследних
		               |			ПО торо_КомиссииСоставКомиссии.ЧленКомиссии = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		               |		ПО втКомиссия.Ссылка = торо_КомиссииСоставКомиссии.Ссылка
		               |ИТОГИ
		               |	МАКСИМУМ(ПредседательКомиссии),
					   |    МАКСИМУМ(ДолжностьПредседателя)
		               |ПО
		               |	Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент.Комиссия);
		Запрос.УстановитьПараметр("Дата", СсылкаНаДокумент.Дата);
		ВыборкаКомиссия = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Возврат ВыборкаКомиссия;

КонецФункции

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;
	
КонецПроцедуры

Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
	
	Реквизиты.Добавить("ИзМобильного");
	Реквизиты.Добавить("СтатусДокумента");
	Реквизиты.Добавить("ИсторияСтатусов.*");
	Реквизиты.Добавить("Согласующие.*");
		
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ 
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ДляВсехСтрок(&Ограничение_ОР)";

	ОграничениеОР = торо_УправлениеДоступом.ПолучитьОграничениеДоступаДляОбъектаРемонтаВТаблице("СписокДефектов.ОбъектРемонта", Истина);
	Ограничение.Текст = СтрЗаменить(Ограничение.Текст, "&Ограничение_ОР", ОграничениеОР);


	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	// Журнал дефектов
	Команда = КомандыОтчетов.Добавить();
	Команда.Представление      = НСтр("ru = 'Журнал дефектов'");
	Команда.Идентификатор 		= "Отчет_ЖурналДефектов";
	Команда.МножественныйВыбор = Ложь;
	Команда.Обработчик         = "торо_ОтчетыКлиент.ОткрытьФормуЖурналаДефектов";
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

