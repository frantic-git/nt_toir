
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Функционаьные опции
	ФОУчетСостоянияОборудования 	 = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	ФОИспользоватьГарантии      	 = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОИспользоватьУпрощеннуюФормуДефекта = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУпрощеннуюФормуДефекта");
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ФОНапоминатьЗафиксироватьПростой = ПолучитьФункциональнуюОпцию("торо_НапоминатьЗафиксироватьПростой");
	ФОИспользоватьНазначениеНаРемонтСУчетомРисков = ПолучитьФункциональнуюОпцию("торо_НазначениеНаРемонтСУчетомРисков");
	
	ЕстьПравоВводаСостояний = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.торо_СостоянияОбъектовРемонта); 
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ВыявленныеДефекты);
	
	Если Параметры.Свойство("Основание") Тогда
		Если Не Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") = ТипЗнч(Параметры.Основание)
			И Не Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") = ТипЗнч(Параметры.Основание)
			И Не Тип("ДокументСсылка.торо_УчетКонтролируемыхПоказателей") = ТипЗнч(Параметры.Основание)
			И Не Тип("ДокументСсылка.торо_СостоянияОбъектовРемонта") = ТипЗнч(Параметры.Основание) Тогда
			торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.СписокДефектов.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ПоказыватьПоложениеОР", Истина);
	Элементы.ОбъектыРемонтаОтображатьПоложение.Пометка = мОтображатьПоложение;
	Элементы.ОбъектыРемонтаПоложение.Видимость = мОтображатьПоложение;
	Элементы.ОбъектыРемонта.Видимость = Не ФОИспользоватьУпрощеннуюФормуДефекта;
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР","ОсновнаяСтруктураИерархии");
			
	ЗаполнитьСписокОбъектовРемонта(ФОИспользоватьУпрощеннуюФормуДефекта);
	
	Если ФОИспользоватьУпрощеннуюФормуДефекта Тогда
		Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);			
	КонецЕсли;
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--

	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВыявленныеДефекты;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --	
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;

	ТекущийОР = Объект.ОбъектРемонта;
	
	// Мультиязычное хранение реквизитов
	торо_МультиязычностьСервер.ПриСозданииНаСервереОбработкаТабличнойЧасти(ЭтаФорма, Объект.Ссылка, "СписокДефектов");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.СписокДефектов.Количество() > 0 Тогда
		торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "СписокДефектов");
	КонецЕсли;
	
	Если ФОИспользоватьГарантии Тогда
		Для Каждого ТекДанные Из Объект.СписокДефектов Цикл
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОтказавшийЭлемент, Объект.ДатаОбнаружения, Дата("00010101"));
		КонецЦикла;	
	КонецЕсли;
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.СписокДефектов.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	            
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// Мультиязычное хранение реквизитов
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "СписокДефектов");
	
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Объект.ДокументыОснования.Количество() > 0
		Тогда
		
		ПодключитьОбработчикОжидания("ПодборПредписанийОбработчикОжидания",0.5,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Индекс = 0;
	ШаблонСообщения = НСтр("ru='Не заполнен объект ремонта в строке %1'");
	Для каждого Строка из ОбъектыРемонта Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Индекс+1);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ОбъектыРемонта["+Индекс+"].ОбъектРемонта",,Отказ);
		КонецЕсли;
		Индекс = Индекс+1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "СписокДефектов");
	КонецЕсли; 

	Если Модифицированность Тогда
		БылаЗаписьИзменений = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

	// Мультиязычное хранение реквизитов
	торо_МультиязычностьСервер.ПередЗаписьюНаСервереОбработкаТабличнойЧасти(ТекущийОбъект, "СписокДефектов");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Мультиязычное хранение реквизитов
	торо_МультиязычностьСервер.ПриЧтенииНаСервереОбработкаТабличнойЧасти(Объект, "СписокДефектов");
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--

	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьДокументаВыявленныеДефекты", , Объект.Ссылка);
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьОповещение", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
		
	ИначеЕсли НЕ ЗавершениеРаботы Тогда 
		
		ПослеВопросаОСохраненииДанных();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение = Неопределено 
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("КритичностьДефекта") Тогда
		ТекущиеДанные = Элементы.СписокДефектов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
			ТекущиеДанные.ТиповойДефект = ВыбранноеЗначение.Дефект;
			ТекущиеДанные.ДефектПричина = ВыбранноеЗначение.ПричинаДефекта;
		КонецЕсли; 
	Иначе
		СтрокиОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта));
		Если СтрокиОР.Количество() Тогда
			ШаблонСообщения = НСтр("ru = 'Объект ремонта ""%1"" уже присутствует в табличном поле!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокиОР[0].ОбъектРемонта);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта);
			
			стрВозврата = ПолучитьДанныеИзДокументаОснования(ВыбранноеЗначение);
			
			СтрокаДефекта = Объект.СписокДефектов.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаДефекта, стрВозврата);
			
			// Специально не копируем ID ремонта из внешнего основания, 
			// чтобы дефект обрабатывался как отдельный ремонт.
			СтрокаДефекта.ОбъектРемонта 	= ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
			СтрокаДефекта.ОтказавшийЭлемент = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
			СтрокаДефекта.ДефектОписание	= ВыбранноеЗначение.СтрокаРемонтовОборудования.ОписаниеРемонта;
			СтрокаДефекта.ДокументИсточник = ВыбранноеЗначение.ДокументОснование;
			СтрокаДефекта.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
			
			ЕстьРеквизитКомиссияВОсновании = ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")
				ИЛИ ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
				ИЛИ ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот");
			
			Если НЕ ЗначениеЗаполнено(Объект.Комиссия) И ЕстьРеквизитКомиссияВОсновании Тогда
				Объект.Комиссия = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение.ДокументОснование, "Комиссия");	
			КонецЕсли;
			
			Если ФОИспользоватьУпрощеннуюФормуДефекта Тогда
				
				Объект.ОбъектРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
				Объект.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
				
				ТекущийОР = Объект.ОбъектРемонта;
				
				Элементы.СписокДефектов.ОтборСтрок = Неопределено;
				Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", Объект.ОбъектРемонта);
				Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);
				
			КонецЕсли;
			
			СтрокиОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта));
			Если СтрокиОР.Количество() = 0 Тогда
				СтрокаОР = ОбъектыРемонта.Добавить();
				СтрокаОР.ОбъектРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
				СтрокаОР.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
				
				Элементы.ОбъектыРемонта.ТекущаяСтрока = СтрокаОР.ПолучитьИдентификатор();
				
				Если мОтображатьПоложение И Не ФОИспользоватьУпрощеннуюФормуДефекта Тогда
					ЗаполнитьПоложениеОРВстроке(СтрокаОР);
				КонецЕсли;
				
			КонецЕсли;
			
			ДО = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВыбранноеЗначение.ДокументОснование));
			Если ДО.Количество() = 0 Тогда
				СтрокаДО = Объект.ДокументыОснования.Добавить();
				СтрокаДО.ДокументОснование = ВыбранноеЗначение.ДокументОснование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ОбъектРемонтаПриИзменении(Элемент)
	
	ОчиститьСписокДефектов();
	ОбъектыРемонта.Очистить();
	
	нс = ОбъектыРемонта.Добавить();
	нс.ОбъектРемонта = Объект.ОбъектРемонта;
	
	ТекущийОР = Объект.ОбъектРемонта;
	
	Объект.ПодразделениеИсполнитель = ПолучитьПодразделениеДляОР(Объект.ОбъектРемонта);
	
	Элементы.СписокДефектов.ОтборСтрок = Неопределено;
	Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", Объект.ОбъектРемонта);
	Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);
	
	СтрокаДефектов = Объект.СписокДефектов.Добавить();
	СтрокаДефектов.ОтказавшийЭлемент = ТекущийОР;
	СтрокаДефектов.ОбъектРемонта = ТекущийОР;
	СтрокаДефектов.ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИсполнительПриИзменении(Элемент)
	
	Если ОбъектыРемонта.Количество() > 0 Тогда
		ОбъектыРемонта[0].ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
	Иначе
		нс = ОбъектыРемонта.Добавить();
		нс.ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
	КонецЕсли;
	
	Для Каждого ТекЗапись Из Объект.СписокДефектов Цикл
		ТекЗапись.ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();
		
	ПараметрыФормы = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыФормы.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("РазрешитьВыборФМ", Ложь);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыФормы,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда               		
		СтандартнаяОбработка = Ложь;
		
		ПодразделениеИсполнитель = Неопределено;
		Если ВыбранноеЗначение.Свойство("ПодразделениеИсполнитель") И ЗначениеЗаполнено(ВыбранноеЗначение.ПодразделениеИсполнитель) Тогда
			ПодразделениеИсполнитель = ВыбранноеЗначение.ПодразделениеИсполнитель;
		Иначе
			ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(ВыбранноеЗначение.ОбъектРемонта);
		КонецЕсли;
		
		Объект.ОбъектРемонта            = ВыбранноеЗначение.ОбъектРемонта;
		Объект.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
		
		НовСтрокаДефекта = Объект.СписокДефектов.Добавить();
		НовСтрокаДефекта.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;
		НовСтрокаДефекта.ОтказавшийЭлемент = ВыбранноеЗначение.ОбъектРемонта;
		НовСтрокаДефекта.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
		ВыбранноеЗначение.Свойство("ДокументОснование", НовСтрокаДефекта.ДокументИсточник); 
		ВыбранноеЗначение.Свойство("ТиповойДефект", НовСтрокаДефекта.ТиповойДефект);
		
		ЗаполнитьДанныеПоТиповомуДефекту(НовСтрокаДефекта);
		НовСтрокаДефекта.НаправлениеОтказавшийЭлемент = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(НовСтрокаДефекта.ОтказавшийЭлемент, "Направление");
	КонецЕсли;
	
	Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);

КонецПроцедуры

&НаКлиенте
Процедура ДатаОбнаруженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ФОИспользоватьНазначениеНаРемонтСУчетомРисков Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да    , "Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Нет");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаИзмененияДатыОбнаружения", ЭтаФорма, ВыбранноеЗначение);
		ТекстВопроса = НСтр("ru = 'При изменении даты обнаружения даты ремонтов будут пересчитаны. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,,, НСтр("ru = 'Пересчет дат ремонтов'")); 
		
	Иначе // Просто пытаемся пересчитать
		ОбработкаИзмененияДатыОбнаружения(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда
		ПараметрыФормы = Новый Структура("Ключ, СтруктураИерархии", Объект.ОбъектРемонта, ТекСтруктураИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДефектВыявленВПроцессеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отказ = Ложь;
	Если ЗначениеЗаполнено(Объект.ДефектВыявленВПроцессе) Тогда
		НайденныеСтроки = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", Объект.ДефектВыявленВПроцессе)); 
		Для каждого Строка Из НайденныеСтроки Цикл
			 Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
			 Отказ = Истина;
			 ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершениеИзвне",ЭтаФорма,Новый Структура("Элемент, ДокОснование",Строка, ВыбранноеЗначение)),Вопрос,РежимДиалогаВопрос.ДаНет);
		КонецЦикла; 
	Иначе
		НайденныеСтроки = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВыбранноеЗначение)); 
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") И НайденныеСтроки.Количество() = 0 Тогда
			НС = Объект.ДокументыОснования.Добавить();
			НС.ДокументОснование = ВыбранноеЗначение;
		КонецЕсли;		
	КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
Процедура ДефектВыявленВПроцессеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Текст <> "" И ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")Тогда
		НайденныеСтроки = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", Элемент.Значение)); 
		Для каждого Строка Из НайденныеСтроки Цикл
			 Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
			 Отказ = Истина;
			 ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершениеИзвне",ЭтаФорма,Новый Структура("Элемент",Строка)),Вопрос,РежимДиалогаВопрос.ДаНет);
		 КонецЦикла; 
	 ИначеЕсли Текст = "" И ТипЗнч(Объект.ДефектВыявленВПроцессе) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		НайденныеСтроки = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", Объект.ДефектВыявленВПроцессе)); 
		Для каждого Строка Из НайденныеСтроки Цикл
			 Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
			 Отказ = Истина;
			 ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершениеИзвне",ЭтаФорма,Новый Структура("Элемент",Строка)),Вопрос,РежимДиалогаВопрос.ДаНет);
		КонецЦикла;		 

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДефектВыявленВПроцессеОчистка(Элемент, СтандартнаяОбработка)
	Если Объект.ДефектВыявленВПроцессе <> Неопределено Тогда
		НайденныеСтроки = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", Объект.ДефектВыявленВПроцессе)); 
		Для каждого Строка Из НайденныеСтроки Цикл
			 Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
			 Отказ = Истина;
			 ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершениеИзвне",ЭтаФорма,Новый Структура("Элемент",Строка)),Вопрос,РежимДиалогаВопрос.ДаНет);
		 КонецЦикла;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта
&НаКлиенте
Процедура ОбъектыРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	текСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если Копирование и текСтрока <> Неопределено тогда
		мИсточникКопирования = текСтрока.ОбъектРемонта;
	Иначе
		мИсточникКопирования = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		
		Отказ = Истина;
		СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокСтатусов", СписокДоступныхСтатусов);
		ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		ПараметрыФормы.Вставить("РазрешитьВыборФМ", Ложь);
		
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыФормы, Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(ТекущийОР) Тогда 
		Строки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущийОР));
		Для Каждого СтрокаТЧ Из Строки Цикл 
			Объект.СписокДефектов.Удалить(СтрокаТЧ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	текСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если Копирование и текСтрока <> Неопределено Тогда
		текСтрока.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		текСтрока.Положение = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	
	// Отбор строк по объектам ремонта
	Если СтрокаВыбрана Тогда
		Элементы.СписокДефектов.ОтборСтрок = Неопределено;
		Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекущаяСтрока.ОбъектРемонта);					
		ТекущийОР = ТекущаяСтрока.ОбъектРемонта;
		
		Элементы.СписокДефектов.ИзменятьСоставСтрок = ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРемонта);
	КонецЕсли;
	
	Элементы.СписокДефектов.Доступность = СтрокаВыбрана;
	Если Элементы.ОбъектыРемонта.ТекущиеДанные <> Неопределено Тогда
		ОРПередВыбором = Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта;
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаПриИзменении(Элемент)
	
	НовыйОР = Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта;

	Строки = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", НовыйОР));
	Если Строки.Количество() > 1 Тогда 
		ТекстСообщения = НСтр("ru = 'Данный объект ремонта уже присутствует в табличном поле!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта = ОРПередВыбором;
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("НовыйОР", НовыйОР);
	
	Если ОРПередВыбором = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка") Тогда
		
		ОбъектыРемонтаОбъектРемонтаПриИзмененииЗавершение(КодВозвратаДиалога.Да, ДопПараметры);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбъектыРемонтаОбъектРемонтаПриИзмененииЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Список дефектов будет очищен, выполнить удаление?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	НовыйОР = ДополнительныеПараметры.НовыйОР;
	ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(НовыйОР);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		Если ЗначениеЗаполнено(мИсточникКопирования) тогда
			Дефекты = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта", мИсточникКопирования));
			Для Каждого ТекЗапись из Дефекты цикл
				НоваяСтрока = Объект.СписокДефектов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекЗапись);
				НоваяСтрока.ОбъектРемонта = НовыйОР;
				НоваяСтрока.ОтказавшийЭлемент = НовыйОР;
				НоваяСтрока.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
				НоваяСтрока.ID = Новый УникальныйИдентификатор();
			КонецЦикла;
			мИсточникКопирования = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;	
		
		УбратьЛишиниеСтрокиИзТЧСписокДефектов(НовыйОР, ОРПередВыбором);
		
		Строки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта", ОРПередВыбором));
		Для Каждого СтрокаТЧ Из Строки Цикл 
			СтрокаТЧ.ОбъектРемонта = НовыйОР;
			СтрокаТЧ.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
		КонецЦикла;
		
		Элементы.СписокДефектов.ИзменятьСоставСтрок = Истина;
		Элементы.СписокДефектов.ОтборСтрок = Неопределено;
		Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", НовыйОР);
		ТекущийОР = НовыйОР;
		
	Иначе
		
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ОбъектРемонта = ОРПередВыбором;
		ОбъектыРемонтаПриАктивизацииСтроки(Элементы.ОбъектыРемонта);
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мИсточникКопирования) тогда
		ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
		ТекущиеДанные.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложениеОРВстроке(Элементы.ОбъектыРемонта.ТекущиеДанные);
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОбъектыРемонтаПодразделениеИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	
	Дефекты = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта",ТекущиеДанные.ОбъектРемонта));
	Для Каждого ТекЗапись Из Дефекты Цикл
		ТекЗапись.ПодразделениеИсполнитель = ТекущиеДанные.ПодразделениеИсполнитель;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();

	ОРПередВыбором = Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта;
	
	ПараметрыФормы = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("РазрешитьВыборФМ", Ложь);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ОРПередВыбором);
		
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыФормы,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, Ожидание, СтандартнаяОбработка)
	ПараметрыВыбора.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	ПараметрыВыбора.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		МассивОР = ВыбранноеЗначение;
		Для Каждого ОбъектРемонта Из МассивОР Цикл
			Если НЕ ОбъектРемонтаУжеДобавлен(ОбъектРемонта) Тогда
				
				ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(ОбъектРемонта);
				
				СтрокаТЧ = ОбъектыРемонта.Добавить();
				СтрокаТЧ.ОбъектРемонта = ОбъектРемонта;
				
				СтрокаТЧ.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
				
				Элементы.ОбъектыРемонта.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
				
				Если мОтображатьПоложение И МассивОР.Количество() = 1 Тогда
					ЗаполнитьПоложениеОРВстроке(СтрокаТЧ);
				КонецЕсли;
				
				СтрокаДефектов = Объект.СписокДефектов.Добавить();
				СтрокаДефектов.ОтказавшийЭлемент = ОбъектРемонта;
				СтрокаДефектов.ОбъектРемонта = ОбъектРемонта;
				СтрокаДефектов.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
				
			КонецЕсли;
		КонецЦикла;
		
		Если мОтображатьПоложение И МассивОР.Количество() > 1 Тогда
			ЗаполнитьПоложенияОР();
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда               		
		
		Если ВыбранноеЗначение.Свойство("ОбъектРемонта") Тогда
			
			Если ТипЗнч(ВыбранноеЗначение.ОбъектРемонта) = Тип("Массив") Тогда
				
				МассивОР = ВыбранноеЗначение.ОбъектРемонта;
				Для Каждого ОбъектРемонта Из МассивОР Цикл
					Если НЕ ОбъектРемонтаУжеДобавлен(ОбъектРемонта) Тогда
						
						ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(ОбъектРемонта);
						
						СтрокаТЧ = ОбъектыРемонта.Добавить();
						СтрокаТЧ.ОбъектРемонта = ОбъектРемонта;
						СтрокаТЧ.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
						
						Элементы.ОбъектыРемонта.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
						
						Если мОтображатьПоложение И МассивОР.Количество() = 1 Тогда
							ЗаполнитьПоложениеОРВстроке(СтрокаТЧ);
						КонецЕсли;
						
						СтрокаДефектов = Объект.СписокДефектов.Добавить();
						СтрокаДефектов.ОтказавшийЭлемент = ОбъектРемонта;
						СтрокаДефектов.ОбъектРемонта = ОбъектРемонта;
						СтрокаДефектов.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
				
					КонецЕсли;
				КонецЦикла;
				
				Если мОтображатьПоложение И МассивОР.Количество() > 1 Тогда
					ЗаполнитьПоложенияОР();
				КонецЕсли;
				
			Иначе
				
				Если НЕ ОбъектРемонтаУжеДобавлен(ВыбранноеЗначение.ОбъектРемонта) Тогда
					
					ПодразделениеИсполнитель = Неопределено;
					Если ВыбранноеЗначение.Свойство("ПодразделениеИсполнитель") И ЗначениеЗаполнено(ВыбранноеЗначение.ПодразделениеИсполнитель) Тогда
						ПодразделениеИсполнитель = ВыбранноеЗначение.ПодразделениеИсполнитель;
					Иначе
						ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(ВыбранноеЗначение.ОбъектРемонта);
					КонецЕсли;
					
					НовСтрокаОРР = ОбъектыРемонта.Добавить();
					НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;
					НовСтрокаОРР.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
					
					Элементы.ОбъектыРемонта.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
					
					Если мОтображатьПоложение Тогда
						ЗаполнитьПоложениеОРВстроке(НовСтрокаОРР);
					КонецЕсли;
					
					// Специально не копируем ID ремонта из внешнего основания, 
					// чтобы дефект обрабатывался как отдельный ремонт.
					
					НовСтрокаДефекта = Объект.СписокДефектов.Добавить();
					НовСтрокаДефекта.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;
					НовСтрокаДефекта.ОтказавшийЭлемент = ВыбранноеЗначение.ОбъектРемонта;
					НовСтрокаДефекта.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
					ВыбранноеЗначение.Свойство("ДокументОснование", НовСтрокаДефекта.ДокументИсточник); 
					ВыбранноеЗначение.Свойство("ТиповойДефект", НовСтрокаДефекта.ТиповойДефект);
					
					ЗаполнитьДанныеПоТиповомуДефекту(НовСтрокаДефекта);
					НовСтрокаДефекта.НаправлениеОтказавшийЭлемент = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(НовСтрокаДефекта.ОтказавшийЭлемент, "Направление");
					Если ВыбранноеЗначение.Свойство("Описание") И ЗначениеЗаполнено(ВыбранноеЗначение.Описание) Тогда
						ВыбранноеЗначение.Свойство("Описание", НовСтрокаДефекта.ДефектОписание);
						ВыбранноеЗначение.Свойство("ОписаниеЯзык1", НовСтрокаДефекта.ДефектОписаниеЯзык1);
						ВыбранноеЗначение.Свойство("ОписаниеЯзык2", НовСтрокаДефекта.ДефектОписаниеЯзык2);
					КонецЕсли; 
					 
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе              		
		
		Если НЕ ОбъектРемонтаУжеДобавлен(ВыбранноеЗначение) Тогда
			ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(ВыбранноеЗначение);
			
			НовСтрокаОРР = ОбъектыРемонта.Добавить();
			НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение;
			НовСтрокаОРР.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
			
			Элементы.ОбъектыРемонта.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
			
			Если мОтображатьПоложение Тогда
				ЗаполнитьПоложениеОРВстроке(НовСтрокаОРР);
			КонецЕсли;
			
			СтрокаДефектов = Объект.СписокДефектов.Добавить();
			СтрокаДефектов.ОтказавшийЭлемент = ВыбранноеЗначение;
			СтрокаДефектов.ОбъектРемонта = ВыбранноеЗначение;
			СтрокаДефектов.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектРемонта) Тогда
		ПараметрыФормы = Новый Структура("Ключ, СтруктураИерархии", ТекущиеДанные.ОбъектРемонта, ТекСтруктураИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДефектов

&НаКлиенте
Процедура Подключаемый_ОткрытиеЛокализуемогоРеквзитаТЧ(Элемент, СтандартнаяОбработка)
	
	торо_МультиязычностьКлиент.ПриОткрытииРеквизитаТЧ(ЭтаФорма, Объект, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектПриИзменении(Элемент)
	
	ЗаполнитьДанныеПоТиповомуДефекту(Элементы.СписокДефектов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
		ТекущиеДанные.ТиповойДефект = ВыбранноеЗначение.Дефект;
		ТекущиеДанные.ДефектПричина = ВыбранноеЗначение.ПричинаДефекта;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрокаСписДеф = Элементы.СписокДефектов.ТекущиеДанные;
		Если ФОИспользоватьУпрощеннуюФормуДефекта Тогда
			ТекСтрокаСписДеф.ОбъектРемонта = Объект.ОбъектРемонта;
			ТекСтрокаСписДеф.ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
		Иначе
			ТекСтрокаОР = Элементы.ОбъектыРемонта.ТекущиеДанные;
			Если ТекСтрокаОР <> Неопределено Тогда 
				ТекСтрокаСписДеф.ОбъектРемонта = ТекСтрокаОР.ОбъектРемонта;
				ТекСтрокаСписДеф.ПодразделениеИсполнитель = ТекСтрокаОР.ПодразделениеИсполнитель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекСтрокаСписДеф = Элементы.СписокДефектов.ТекущиеДанные;
		ТекСтрокаСписДеф.ID = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ТекДанные.ОтказавшийЭлемент) Тогда
			ТекДанные.ОтказавшийЭлемент = ТекДанные.ОбъектРемонта;
			СписокДефектовОтказавшийЭлементПриИзменении(Неопределено);
		КонецЕсли;
		
		Если НоваяСтрока Тогда
			ТекДанные.ID = Новый УникальныйИдентификатор();
		КонецЕсли; 
		
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОтказавшийЭлемент, Объект.ДатаОбнаружения, Дата("00010101"));

		КонецЕсли; 
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
			И ВыбранноеЗначение.Свойство("КрайняяДопустимаяДатаЗавершенияРемонта", ТекущиеДанные.КрайняяДопустимаяДатаЗавершенияРемонта)Тогда
            ТекущиеДанные.КритичностьДефекта   = ВыбранноеЗначение.КритичностьДефекта;
            ТекущиеДанные.ДатаНачалаРемонта    = ВыбранноеЗначение.ДатаНачалаРемонта;
            ТекущиеДанные.ДатаОкончанияРемонта = ВыбранноеЗначение.ДатаОкончанияРемонта;
			
			МассивСтрокКУдалению = Объект.РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("ID_ремонта",ТекущиеДанные.ID));
			
			Для каждого Строка Из МассивСтрокКУдалению Цикл
				Объект.РезультатыПодбораИзМатрицыОценкиРисков.Удалить(Строка);
			КонецЦикла; 
			
			РезультатыВыбора = Новый Массив;
			
			Если ВыбранноеЗначение.Свойство("РезультатыПодбораИзМатрицыОценкиРисков", РезультатыВыбора) Тогда
				Для каждого Строка Из РезультатыВыбора Цикл
					ЗаполнитьЗначенияСвойств(Объект.РезультатыПодбораИзМатрицыОценкиРисков.Добавить(), Строка);
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЕсли; 

	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.СписокДефектовПоказатьМестоположение.Доступность = Ложь;
	Иначе
		Элементы.СписокДефектовПоказатьМестоположение.Доступность = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ОтказавшийЭлемент, "ЭтоПротяженныйОбъект");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОтказавшийЭлемент) Тогда
		Возврат;
	КонецЕсли;	
	
	Отборы = Новый Структура("Владелец", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОтказавшийЭлемент, "Направление"));
	ПараметрыОткрытия = Новый Структура("Отбор", Отборы);
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОтказавшийЭлемент) Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияЗаполнения = Новый Структура("Владелец", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОтказавшийЭлемент, "Направление"));
	
	Если Не ЗначениеЗаполнено(ЗначенияЗаполнения.Владелец) Тогда
		ЗначенияЗаполнения.Владелец = ПредопределенноеЗначение("Справочник.торо_НаправленияОбъектовРемонтныхРабот.БезНаправления");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаОбъекта", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		текДанные = Элементы.СписокДефектов.ТекущиеДанные;
		Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОтказавшийЭлемент) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		НаправлениеОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОтказавшийЭлемент, "Направление");
		ПараметрыПолученияДанных.Отбор.Вставить("Владелец", НаправлениеОР);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	текДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОтказавшийЭлемент) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	НаправлениеОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(текДанные.ОтказавшийЭлемент, "Направление");
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", НаправлениеОР);
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовДефектПричинаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные     = Элементы.СписокДефектов.ТекущиеДанные;
	ТиповойДефект = ТекДанные.ТиповойДефект;
	
	Если ЗначениеЗаполнено(ТиповойДефект) Тогда 
		СписокПричин = ПолучитьСписокПричинДефектовНаСервере(ТиповойДефект); 
		Если СписокПричин.Количество() >0 Тогда 
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура ("Отбор", Новый Структура ("СписокПричин", СписокПричин));
			ОткрытьФорму("Справочник.торо_ПричиныДефектов.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовДефектПричинаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекДанные     = Элементы.СписокДефектов.ТекущиеДанные;
	ТиповойДефект = ТекДанные.ТиповойДефект;
	Если ЗначениеЗаполнено(ТиповойДефект) Тогда 
		СтандартнаяОбработка = Ложь;
		СписокПричин = ПолучитьСписокПричинДефектовНаСервере(ТиповойДефект);
		Если СписокПричин.Количество() >0 Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокПричин);
			ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.торо_ПричиныДефектов"), ПараметрыПолученияДанных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовДефектПричинаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекДанные     = Элементы.СписокДефектов.ТекущиеДанные;
	ТиповойДефект = ТекДанные.ТиповойДефект;
	Если ЗначениеЗаполнено(ТиповойДефект) Тогда 
		СтандартнаяОбработка = Ложь;
		СписокПричин = ПолучитьСписокПричинДефектовНаСервере(ТиповойДефект);
		Если СписокПричин.Количество() >0 Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокПричин);
			ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.торо_ПричиныДефектов"), ПараметрыПолученияДанных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОтказавшийЭлементПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если НЕ ТекДанные.ОтказавшийЭлемент = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка") Тогда
		ТекДанные.ТиповойДефект = ПредопределенноеЗначение("Справочник.торо_ТиповыеДефектыОборудования.ПустаяСсылка");
		ТекДанные.НаправлениеОтказавшийЭлемент = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.ОтказавшийЭлемент,"Направление");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "СписокДефектовВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.ФормаОбъекта", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		МассивСтрокКУдалению = Объект.РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("ID_Ремонта",ТекущиеДанные.ID)); 
		
		Для каждого Строка Из МассивСтрокКУдалению Цикл
			Объект.РезультатыПодбораИзМатрицыОценкиРисков.Удалить(Строка);
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОтказавшийЭлементОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОтказавшийЭлемент) Тогда
		ПараметрыФормы = Новый Структура("Ключ, СтруктураИерархии", ТекущиеДанные.ОтказавшийЭлемент, ТекСтруктураИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОтказавшийЭлементСоздание(Элемент, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура("СтруктураИерархии, РодительИерархии", ТекСтруктураИерархии, ТекущийОР);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы, Элемент);	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОтказавшийЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("РазрешитьВыборФМ", Ложь);
	ПараметрыФормы.Вставить("ОтборОбъектРемонта", ТекущийОР);
	ПараметрыФормы.Вставить("Документ", "Выявленные дефекты_ОтказавшийЭлемент");
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Элементы);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыФормы, Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования
&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснования1ДокументОснование.ОграничениеТипа =ДоступныеТипы;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если ТекДанные.ДокументОснование = Неопределено ИЛИ ТекДанные.ДокументОснование.Пустая() Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		Если Объект.ДефектВыявленВПроцессе = Элемент.ТекущиеДанные.ДокументОснование Тогда
			Объект.ДефектВыявленВПроцессе = Неопределено;
		КонецЕсли; 
		Объект.ДокументыОснования.Удалить(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершениеИзвне(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ДокументОснование);
		Объект.ДокументыОснования.Удалить(Элемент);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДокОснование") Тогда
		ВыбранноеЗначение = ДополнительныеПараметры.ДокОснование;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
			НС = Объект.ДокументыОснования.Добавить();
			НС.ДокументОснование = ВыбранноеЗначение;
		КонецЕсли;	
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.ОбъектыРемонтаОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Элементы.ОбъектыРемонтаПоложение.Видимость = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
		
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекСтруктураИерархии);
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТиповойДефект(Команда)
	
	ТекДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите строку списка дефектов для создания типового дефекта!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ТиповойДефект) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТиповойДефектВопрос", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), НСтр("ru = 'Перезаполнить существующий типовой дефект?'"), РежимДиалогаВопрос.ДаНет, 60);
	Иначе 
		СоздатьТиповойДефектВопрос(КодВозвратаДиалога.Нет, Новый Структура("ТекДанные", ТекДанные));
	КонецЕсли;
		
 КонецПроцедуры
 
 &НаКлиенте
Процедура ПодборПредписаний(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписаний",
	Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	
	ФормаПодбора.ЗакрыватьПриВыборе = ?(ФОИспользоватьУпрощеннуюФормуДефекта, Истина, Ложь);
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОР(Команда)
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		
		ОткрытьФормуПодбораОРИзОснования(Элементы.ОбъектыРемонта, Истина);
		
	Иначе
		СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокСтатусов", СписокДоступныхСтатусов);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_ВнешнееОснованиеДляРабот");
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		ПараметрыФормы.Вставить("РазрешитьВыборФМ", Ложь);
			
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР", ПараметрыФормы, Элементы.ОбъектыРемонта, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМатрицуОценкиРисков(Команда)
	
	ТекущиеДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		МассивВыбранныхЗначений = Новый Массив;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ID) Тогда
			ТекущиеДанные.ID = Новый УникальныйИдентификатор();
		Иначе
			МассивСтрокДляРемонта = Объект.РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("ID_Ремонта", ТекущиеДанные.ID)); 			
			
			Для каждого Строка Из МассивСтрокДляРемонта Цикл
				СтруктураВыбранных = Новый Структура;
				СтруктураВыбранных.Вставить("ОбъектВоздействия", Строка.ОбъектВоздействия);
				СтруктураВыбранных.Вставить("КатегорияРиска"   , Строка.КатегорияРиска);
				МассивВыбранныхЗначений.Добавить(СтруктураВыбранных);
			КонецЦикла; 
			
		КонецЕсли; 
		
		
		Если ЗначениеЗаполнено(Объект.ДатаОбнаружения) Тогда
			ОткрытьФорму("Обработка.торо_МатрицаОценкиРисков.Форма.ФормаПодбора",
						Новый Структура("ДатаОбнаружения, ID_Ремонта, МассивВыбранныхЗначений, КлючНазначенияИспользования", Объект.ДатаОбнаружения, ТекущиеДанные.ID, МассивВыбранныхЗначений, "ПодборКатегорииРискаВДефект"), 
						Элементы.СписокДефектов,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ТекстСообщения = НСтр("ru = 'Для открытия матрицы оценки рисков необходимо заполнить реквизит <Дата обнаружения>'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМестоположение(Команда)
	
	ТекущиеДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда  
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыМестоположения", ЭтотОбъект, Новый Структура("ID_Ремонта, ОтказавшийЭлемент", ТекущиеДанные.ID, ТекущиеДанные.ОтказавшийЭлемент));
		ОткрытьФорму("ОбщаяФорма.торо_ФормаМестоположения", Новый Структура("ОбъектРемонта, Высота, Долгота, Широта, ТолькоПросмотр", ТекущиеДанные.ОтказавшийЭлемент, ТекущиеДанные.Высота, ТекущиеДанные.Долгота, ТекущиеДанные.Широта, НЕ ПравоРедактирование), 
		Элементы.СписокДефектов,,,, Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаСервере 
Процедура УбратьЛишиниеСтрокиИзТЧСписокДефектов(НовыйОР, ТекущийОР);
	
	текИОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	
	масПодчиненныхОР = Новый Массив;
	
	Если Не НовыйОР = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
		
		масПодчиненныхОР = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(НовыйОР, текИОР);
		масПодчиненныхОР.Добавить(НовыйОР);
		
	КонецЕсли;
		
	МасУдаления = Новый Массив;
	тз = Объект.СписокДефектов.НайтиСтроки(Новый структура("ОбъектРемонта", ТекущийОР));
	Для каждого текСтрока из тз Цикл
		НайС = масПодчиненныхОР.Найти(текСтрока.ОтказавшийЭлемент);
		Если НайС = Неопределено тогда
			МасУдаления.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого текСтрока из МасУдаления Цикл
		Объект.СписокДефектов.Удалить(текСтрока);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.СписокДефектов.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодразделениеДляОР(ОР)
	Возврат ОР.ПодразделениеИсполнитель;
КонецФункции

&НаСервере
// Процедура выполняет первоначальное заполнение списка объектов ремонта.
//
// Параметры
//  ФОИспользоватьУпрощеннуюФормуДефекта - Значение функциональной опции "торо_ИспользоватьУпрощеннуюФормуДефекта".
//
Процедура ЗаполнитьСписокОбъектовРемонта(ФОИспользоватьУпрощеннуюФормуДефекта = ложь)
	
	Если ФОИспользоватьУпрощеннуюФормуДефекта = Истина Тогда
		Объекты = Объект.СписокДефектов.Выгрузить();
		Если Объекты.Количество() > 0 Тогда
			нс = ОбъектыРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(нс, Объекты[0]);
			
			Объект.ОбъектРемонта = нс.ОбъектРемонта;
			Объект.ПодразделениеИсполнитель = нс.ПодразделениеИсполнитель;
		КонецЕсли;
		
		тОбъектыРемонта = Объект.СписокДефектов.Выгрузить();
		тОбъектыРемонта.Свернуть("ОбъектРемонта, ПодразделениеИсполнитель");
		
		Если тОбъектыРемонта.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'В документе указано более одного объекта ремонта. Для того что бы просмотреть все указанные объекты ремонта - отключите настройку ""Использовать упрощенную форму дефекта"". Настройка расположена в ""Настройка параметров системы"" на вкладке ""Интерфейс ввода документов"" в блоке настроек «Учет показателей эксплуатации».'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		Объекты = Объект.СписокДефектов.Выгрузить();
		Объекты.Свернуть("ОбъектРемонта, ПодразделениеИсполнитель");
		ОбъектыРемонта.Загрузить(Объекты);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоТиповомуДефекту(ТекДанные)
		
	Если НЕ ТекДанные.ТиповойДефект = ПредопределенноеЗначение("Справочник.торо_ТиповыеДефектыОборудования.ПустаяСсылка") Тогда
		СтруктураТиповогоДефекта = ПолучитьДанныеТиповогоДефектаНаСервере(ТекДанные.ТиповойДефект);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураТиповогоДефекта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеТиповогоДефектаНаСервере(ТиповойДефект)
	
	СтруктураВозврата = Новый Структура("ВидДефекта, КритичностьДефекта, ДефектПричина,
				|ДефектОписание, ДефектОписаниеЯзык1, ДефектОписаниеЯзык2,
				|ПоследствияДефекта, ПоследствияДефектаЯзык1, ПоследствияДефектаЯзык2,
				|НаправлениеНаУстранение, НаправлениеНаУстранениеЯзык1, НаправлениеНаУстранениеЯзык2");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_ТиповыеДефектыОборудования.ВидДефекта КАК ВидДефекта,
	|	торо_ТиповыеДефектыОборудования.КритичностьДефекта КАК КритичностьДефекта,
	|	торо_ТиповыеДефектыОборудования.ОписаниеДефекта КАК ДефектОписание,
	|	торо_ТиповыеДефектыОборудования.ОписаниеДефектаЯзык1 КАК ДефектОписаниеЯзык1,
	|	торо_ТиповыеДефектыОборудования.ОписаниеДефектаЯзык2 КАК ДефектОписаниеЯзык2,
	|	торо_ТиповыеДефектыОборудования.ПоследствиеДефекта КАК ПоследствияДефекта,
	|	торо_ТиповыеДефектыОборудования.ПоследствиеДефектаЯзык1 КАК ПоследствияДефектаЯзык1,
	|	торо_ТиповыеДефектыОборудования.ПоследствиеДефектаЯзык2 КАК ПоследствияДефектаЯзык2,
	|	торо_ТиповыеДефектыОборудования.НаправлениеНаУстранение КАК НаправлениеНаУстранение,
	|	торо_ТиповыеДефектыОборудования.НаправлениеНаУстранениеЯзык1 КАК НаправлениеНаУстранениеЯзык1,
	|	торо_ТиповыеДефектыОборудования.НаправлениеНаУстранениеЯзык2 КАК НаправлениеНаУстранениеЯзык2,
	|	торо_ТиповыеДефектыОборудования.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Шапка
	|ИЗ
	|	Справочник.торо_ТиповыеДефектыОборудования КАК торо_ТиповыеДефектыОборудования
	|ГДЕ
	|	торо_ТиповыеДефектыОборудования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Шапка.ВидДефекта КАК ВидДефекта,
	|	ВТ_Шапка.КритичностьДефекта КАК КритичностьДефекта,
	|	ВТ_Шапка.ДефектОписание КАК ДефектОписание,
	|	ВТ_Шапка.ДефектОписаниеЯзык1 КАК ДефектОписаниеЯзык1,
	|	ВТ_Шапка.ДефектОписаниеЯзык2 КАК ДефектОписаниеЯзык2,
	|	ВТ_Шапка.ПоследствияДефекта КАК ПоследствияДефекта,
	|	ВТ_Шапка.ПоследствияДефектаЯзык1 КАК ПоследствияДефектаЯзык1,
	|	ВТ_Шапка.ПоследствияДефектаЯзык2 КАК ПоследствияДефектаЯзык2,
	|	ВТ_Шапка.НаправлениеНаУстранение КАК НаправлениеНаУстранение,
	|	ВТ_Шапка.НаправлениеНаУстранениеЯзык1 КАК НаправлениеНаУстранениеЯзык1,
	|	ВТ_Шапка.НаправлениеНаУстранениеЯзык2 КАК НаправлениеНаУстранениеЯзык2,
	|	ВТ_Шапка.Ссылка КАК Ссылка,
	|	торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Причина КАК ДефектПричина
	|ИЗ
	|	ВТ_Шапка КАК ВТ_Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеДефектыОборудования.ПричиныВозникновенияДефекта КАК торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта
	|		ПО (торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Ссылка = ВТ_Шапка.Ссылка)
	|			И (торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.НомерСтроки = 1)";
	
	Запрос.УстановитьПараметр("Ссылка", ТиповойДефект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	торо_МультиязычностьСервер.ПереставитьЗначенияРеквизитаСУчетомЯызка(СтруктураВозврата, "ДефектОписание");
	торо_МультиязычностьСервер.ПереставитьЗначенияРеквизитаСУчетомЯызка(СтруктураВозврата, "ПоследствияДефекта");
	торо_МультиязычностьСервер.ПереставитьЗначенияРеквизитаСУчетомЯызка(СтруктураВозврата, "НаправлениеНаУстранение");
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПричинДефектовНаСервере(ТиповойДефект)
	
	Причины = Новый СписокЗначений;  
	Для каждого Стр Из ТиповойДефект.ПричиныВозникновенияДефекта Цикл
		Причины.Добавить(Стр.Причина);	
	КонецЦикла;
	
	Возврат Причины;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоложенияОР()
	
	МассивОР = Новый Массив;
	Для каждого Стр Из ОбъектыРемонта Цикл
		МассивОР.Добавить(Стр.ОбъектРемонта);		
	КонецЦикла; 
	
	СтруктураПоложений = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, ТекСтруктураИерархии,,Истина,Истина);
	
	Для каждого Строка из ОбъектыРемонта Цикл
		Строка.Положение = СтруктураПоложений[Строка.ОбъектРемонта];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоложениеОРВстроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Положение = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(ТекущиеДанные.ОбъектРемонта, ТекСтруктураИерархии,,Истина,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредписанийОбработчикОжидания()
	
	Если Объект.СписокДефектов.Количество() = 0 Тогда
		ЭлементВладелец = ?(ФОИспользоватьУпрощеннуюФормуДефекта, Элементы.ОбъектРемонта, Элементы.ОбъектыРемонта);
		ОткрытьФормуПодбораОРИзОснования(ЭлементВладелец, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСтруктураИерархии = РезультатЗакрытия;
	
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТиповойДефектВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	НаправлениеОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.ОбъектРемонта, "Направление", Истина);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец");
	ПараметрыЗаполнения.Владелец = ?(НаправлениеОР.Пустая(),
	         ПредопределенноеЗначение("Справочник.торо_НаправленияОбъектовРемонтныхРабот.БезНаправления"),
	         НаправлениеОР);
	ПараметрыЗаполнения.Вставить("ВидДефекта", ТекДанные.ВидДефекта);
	ПараметрыЗаполнения.Вставить("ОписаниеДефекта", ТекДанные.ДефектОписание);
	ПараметрыЗаполнения.Вставить("ОписаниеДефектаЯзык1", ТекДанные.ДефектОписаниеЯзык1);
	ПараметрыЗаполнения.Вставить("ОписаниеДефектаЯзык2", ТекДанные.ДефектОписаниеЯзык2);
	ПараметрыЗаполнения.Вставить("КритичностьДефекта", ТекДанные.КритичностьДефекта);
	ПараметрыЗаполнения.Вставить("ПоследствиеДефекта", ТекДанные.ПоследствияДефекта);
	ПараметрыЗаполнения.Вставить("ПоследствиеДефектаЯзык1", ТекДанные.ПоследствияДефектаЯзык1);
	ПараметрыЗаполнения.Вставить("ПоследствиеДефектаЯзык2", ТекДанные.ПоследствияДефектаЯзык2);
	ПараметрыЗаполнения.Вставить("НаправлениеНаУстранение", ТекДанные.НаправлениеНаУстранение);
	ПараметрыЗаполнения.Вставить("НаправлениеНаУстранениеЯзык1", ТекДанные.НаправлениеНаУстранениеЯзык1);
	ПараметрыЗаполнения.Вставить("НаправлениеНаУстранениеЯзык2", ТекДанные.НаправлениеНаУстранениеЯзык2);
	ПараметрыЗаполнения.Вставить("ДефектПричина",ТекДанные.ДефектПричина);

	ПараметрыФормы = Новый Структура ("ЗначенияЗаполнения", ПараметрыЗаполнения); 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы.Вставить("Ключ", ТекДанные.ТиповойДефект); 		
	КонецЕсли;
	
	НовыйТиповойДефект = ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодразделениеИсполнительОР(ОР)
	
	Возврат ОР.ПодразделениеИсполнитель;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрытьОповещение(Результат, Контекст) Экспорт
	
	Если Модифицированность Тогда
		Записать();
		Модифицированность = Ложь;
	КонецЕсли;
	
	ПослеВопросаОСохраненииДанных();
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСохраненииДанных() 
	
	Если ФОУчетСостоянияОборудования И ФОНапоминатьЗафиксироватьПростой И ЕстьПравоВводаСостояний И Объект.Проведен И БылаЗаписьИзменений Тогда
		
		БылаЗаписьИзменений =  Ложь;
		МассивОбъектов = ПолучитьМассивОРДляФиксацииПростоя(Объект.Ссылка);
		
		Если МассивОбъектов.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, Новый Структура("МассивОбъектов", МассивОбъектов)), НСтр("ru = 'Зафиксировать фактический простой объектов?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		МассивОбъектов = ДополнительныеПараметры.МассивОбъектов;
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("МассивОР", МассивОбъектов);
		ЗначенияЗаполнения.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, СтруктураИерархии", ЗначенияЗаполнения, ТекСтруктураИерархии);
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивОРДляФиксацииПростоя(Ссылка)

	МассивВозврата = Новый Массив;
	
	// Проверим, включен ли ввод документов состояний на основании дефектов.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВводНаОсновании.Значение
	               |ИЗ
	               |	РегистрСведений.торо_ВводНаОсновании КАК торо_ВводНаОсновании
	               |ГДЕ
	               |	торо_ВводНаОсновании.ДокументВводимый = &ДокументВводимый
	               |	И торо_ВводНаОсновании.ДокументОснование = &ДокументОснование
	               |	И торо_ВводНаОсновании.Значение";
	Запрос.УстановитьПараметр("ДокументОснование","торо_ВыявленныеДефекты");
	Запрос.УстановитьПараметр("ДокументВводимый","торо_СостоянияОбъектовРемонта");
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Получим список ОР, для которых на период обнаружения дефекта ещё не введено простоев.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ОбъектРемонта
		|ИЗ
		|	(ВЫБРАТЬ
		|		торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
		|		ДОБАВИТЬКДАТЕ(торо_ВыявленныеДефекты.ДатаОбнаружения, ДЕНЬ, торо_КоличествоДнейСмещенияВДефектеДляПростоев.Значение) КАК ДатаОкончания,
		|		ДОБАВИТЬКДАТЕ(торо_ВыявленныеДефекты.ДатаОбнаружения, ДЕНЬ, -торо_КоличествоДнейСмещенияВДефектеДляПростоев.Значение) КАК ДатаНачала
		|	ИЗ
		|		Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		|			ПО торо_ВыявленныеДефектыСписокДефектов.Ссылка = торо_ВыявленныеДефекты.Ссылка,
		|		Константа.торо_КоличествоДнейСмещенияВДефектеДляПростоев КАК торо_КоличествоДнейСмещенияВДефектеДляПростоев
		|	ГДЕ
		|		торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ВидыЭксплуатации КАК торо_ВидыЭксплуатации
		|			ПО торо_ТекущееСостояниеОР.ВидЭксплуатации = торо_ВидыЭксплуатации.Ссылка
		|		ПО ВложенныйЗапрос.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
		|			И (торо_ВидыЭксплуатации.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой))
		|			И ВложенныйЗапрос.ДатаНачала <= торо_ТекущееСостояниеОР.Период
		|			И ВложенныйЗапрос.ДатаОкончания >= торо_ТекущееСостояниеОР.Период
		|ГДЕ
		|	торо_ТекущееСостояниеОР.Регистратор ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивВозврата.Добавить(Выборка.ОбъектРемонта);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	   		
	Если Не ДокументОснование = Неопределено Тогда
		
		СтрокиРО = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование)); 			
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			ТекОР =	 ОчереднаяСтрока.ОбъектРемонта;
			Объект.СписокДефектов.Удалить(ОчереднаяСтрока);					
			
			МассивОР = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта",ТекОР));				
			Если Не МассивОР.Количество() Тогда					
				СписокОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта",ТекОР));					
				Для Каждого СтрокаОР ИЗ СписокОР Цикл 						
					ОбъектыРемонта.Удалить(СтрокаОР);						
				КонецЦикла; 					
			КонецЕсли;				
			
		КонецЦикла;			
		
	КонецЕсли;  		
		
КонецПроцедуры

&НаСервере 
Процедура ОчиститьСписокДефектов()
	
	стрПоиска = Новый структура("ОбъектРемонта");
	Для каждого строкаТЧ из ОбъектыРемонта Цикл
		
		Если строкаТЧ.ОбъектРемонта = Объект.ОбъектРемонта Тогда продолжить; КонецЕсли;
		
		стрПоиска.ОбъектРемонта = строкаТЧ.ОбъектРемонта;
		масСтрок = Объект.СписокДефектов.НайтиСтроки(стрПоиска); 
		
		Для каждого текСтрока из МасСтрок цикл
			Объект.СписокДефектов.Удалить(текСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ВыбранныйОР = ВыбранноеЗначение.ОбъектРемонта;
	Иначе
		ВыбранныйОР = ВыбранноеЗначение;
	КонецЕсли;
	
	// Проверка ОР на предмет уже выбранных 
	Если ЗначениеЗаполнено(ВыбранныйОР) Тогда
		МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранныйОР));
		Если МассивСтрок.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(Неопределено, 
				СтрШаблон(
				НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"), ВыбранныйОР),30);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда               		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ОбъектРемонта            = ВыбранноеЗначение.ОбъектРемонта;
		ТекущиеДанные.ПодразделениеИсполнитель = ВыбранноеЗначение.ПодразделениеИсполнитель;
		
		Если мОтображатьПоложение Тогда
			ЗаполнитьПоложениеОРВстроке(ТекущиеДанные);
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораОРИзОснования(Элемент, ОткрыватьБезусловно = Истина)
	
	СписокОснований = Новый массив;
	Для каждого Строка из Объект.ДокументыОснования Цикл
		СписокОснований.Добавить(Строка.ДокументОснование);
	КонецЦикла;
	
	стрПараметров = Новый структура("ТипВыходногоДок, ДокументыОснования, ОдиночныйВыбор, ОткрыватьБезусловно", 
		ПредопределенноеЗначение("Перечисление.торо_ВидыВыходныхДокументов.ВыявленныйДефект"), 
		СписокОснований, ФОИспользоватьУпрощеннуюФормуДефекта, ОткрыватьБезусловно);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораОРПриВводеНаОсновании", стрПараметров, Элемент,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	
	Если ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда	
		ТекущийОР = Объект.ОбъектРемонта;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИзДокументаОснования(ВыбЗначение)
	
	стрВозврата = Новый Структура("ТиповойДефект, Исполнитель, ВидДефекта, КритичностьДефекта, ДефектОписание, ДефектПричина");
	
	сд = ВыбЗначение.СтрокаРемонтовОборудования;
	
	Если ТипЗнч(ВыбЗначение.ДокументОснование) = тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда 
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	таб.ТиповойДефект,
		               |	таб.Исполнитель,
		               |	таб.ID,
		               |	таб.ОбъектРемонта,
		               |	торо_ТиповыеДефектыОборудования.ВидДефекта,
		               |	торо_ТиповыеДефектыОборудования.КритичностьДефекта,
		               |	торо_ТиповыеДефектыОборудования.ОписаниеДефекта КАК ДефектОписание,
		               |	торо_ТиповыеДефектыОборудования.ПричиныВозникновенияДефекта.(
		               |		Причина КАК ДефектПричина
		               |	)
		               |ИЗ
		               |	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК таб
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеДефектыОборудования КАК торо_ТиповыеДефектыОборудования
		               |		ПО таб.ТиповойДефект = торо_ТиповыеДефектыОборудования.Ссылка
		               |ГДЕ
		               |	таб.Ссылка = &Ссылка
		               |	И таб.ID = &ID
		               |	И таб.ОбъектРемонта = &ОбъектРемонта";
					   
		Запрос.УстановитьПараметр("Ссылка", ВыбЗначение.ДокументОснование);
		Запрос.УстановитьПараметр("ID", сд.ID);
		Запрос.УстановитьПараметр("ОбъектРемонта", сд.ОбъектРемонта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Причины = Выборка.ПричиныВозникновенияДефекта.Выгрузить();
			Если Причины.Количество() >= 1 Тогда
				стрВозврата.ДефектПричина = Причины[0].ДефектПричина;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(стрВозврата, Выборка);
		КонецЕсли;
	Иначе
	КонецЕсли;
	
	Возврат стрВозврата;
	
КонецФункции

&НаКлиенте
Процедура ДатаОбнаруженияПриИзменении(Элемент)
	Для каждого Дефект Из Объект.СписокДефектов Цикл
		Дефект.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(Дефект.ОтказавшийЭлемент, Объект.ДатаОбнаружения, Объект.ДатаОбнаружения);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ОбъектРемонтаУжеДобавлен(ОбъектРемонта)
	
	МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
	Если МассивСтрок.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте 
Процедура ОбработкаИзмененияДатыОбнаружения(Результат, ДопПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда   
		
		Если Не ДопПараметры = Неопределено Тогда
			Объект.ДатаОбнаружения = ДопПараметры;
		КонецЕсли; 

		СписокВыбранныхКатегорийРиска = Новый СписокЗначений;
		
		Для каждого Строка Из Объект.СписокДефектов Цикл
			
			ВыбраннаяСтрока = Объект.РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("РезультатВыбора, ID_Ремонта",Истина, Строка.ID));
			
			Если ВыбраннаяСтрока.Количество() > 0 
				И СписокВыбранныхКатегорийРиска.НайтиПоЗначению(ВыбраннаяСтрока[0].КатегорияРиска) = Неопределено Тогда
				СписокВыбранныхКатегорийРиска.Добавить(ВыбраннаяСтрока[0].КатегорияРиска);
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		ПересчитатьДатыРемонта(СписокВыбранныхКатегорийРиска);

	КонецЕсли; 	
КонецПроцедуры
 
&НаКлиенте 
Процедура ПересчитатьДатыРемонта(СписокКатегорийРиска)
	
	ПараметрыДляРасчета = ПолучитьПараметрыДляРасчета(СписокКатегорийРиска);
	
	Для каждого СтрокаДляРасчета Из ПараметрыДляРасчета Цикл
		
		СтруктураДляЗаполнения = Новый Структура;
		
		ДатаНачалаРемонта                      = Объект.ДатаОбнаружения;
		КрайняяДопустимаяДатаЗавершенияРемонта = Объект.ДатаОбнаружения;

		Если ЗначениеЗаполнено(СтрокаДляРасчета.ДатаНачала_КоличествоПериодов)
			И ЗначениеЗаполнено(СтрокаДляРасчета.ДатаНачала_Период) Тогда
			ДатаНачалаРемонта = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаОбнаружения, 
																								СтрокаДляРасчета.ДатаНачала_Период, 
																								СтрокаДляРасчета.ДатаНачала_КоличествоПериодов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДляРасчета.ДатаПлановаяКрайняя_КоличествоПериодов)
			И ЗначениеЗаполнено(СтрокаДляРасчета.ДатаПлановаяКрайняя_Период) Тогда
			КрайняяДопустимаяДатаЗавершенияРемонта = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаОбнаружения, 
																													СтрокаДляРасчета.ДатаПлановаяКрайняя_Период, 
																													СтрокаДляРасчета.ДатаПлановаяКрайняя_КоличествоПериодов); 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаДляРасчета.ДатаОкончания_КоличествоПериодов)
			И ЗначениеЗаполнено(СтрокаДляРасчета.ДатаОкончания_Период) Тогда
			ДатаОкончанияРемонта = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаОбнаружения, 
																									СтрокаДляРасчета.ДатаОкончания_Период, 
																									СтрокаДляРасчета.ДатаОкончания_КоличествоПериодов); 
		Иначе
			ДатаОкончанияРемонта = КрайняяДопустимаяДатаЗавершенияРемонта;
		КонецЕсли; 

        СтруктураДляЗаполнения.Вставить("ДатаНачалаРемонта"                     , ДатаНачалаРемонта);
        СтруктураДляЗаполнения.Вставить("ДатаОкончанияРемонта"                  , ДатаОкончанияРемонта);
        СтруктураДляЗаполнения.Вставить("КрайняяДопустимаяДатаЗавершенияРемонта", КрайняяДопустимаяДатаЗавершенияРемонта);
		
		МассивСтрокIDРемонтов = Объект.РезультатыПодбораИзМатрицыОценкиРисков.НайтиСтроки(Новый Структура("КатегорияРиска", СтрокаДляРасчета.КатегорияРиска));
		
		Для каждого Строка Из МассивСтрокIDРемонтов Цикл
			СтрокиСРемонтом = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ID",Строка.ID_Ремонта));
			Если СтрокиСРемонтом.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокиСРемонтом[0], СтруктураДляЗаполнения);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьПараметрыДляРасчета(СписокКатегорийРиска)
	
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_КатегорииРиска.Ссылка КАК КатегорияРиска,
	               |	торо_КатегорииРиска.ДатаНачала_КоличествоПериодов КАК ДатаНачала_КоличествоПериодов,
	               |	торо_КатегорииРиска.ДатаОкончания_КоличествоПериодов КАК ДатаОкончания_КоличествоПериодов,
	               |	торо_КатегорииРиска.ДатаПлановаяКрайняя_КоличествоПериодов КАК ДатаПлановаяКрайняя_КоличествоПериодов,
	               |	торо_КатегорииРиска.ДатаНачала_Период КАК ДатаНачала_Период,
	               |	торо_КатегорииРиска.ДатаОкончания_Период КАК ДатаОкончания_Период,
	               |	торо_КатегорииРиска.ДатаПлановаяКрайняя_Период КАК ДатаПлановаяКрайняя_Период
	               |ИЗ
	               |	Справочник.торо_КатегорииРиска КАК торо_КатегорииРиска
	               |ГДЕ
	               |	торо_КатегорииРиска.Ссылка В(&СписокКатегорийРиска)";
	# КонецОбласти
	Запрос.УстановитьПараметр("СписокКатегорийРиска", СписокКатегорийРиска.ВыгрузитьЗначения());
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);
	 	
КонецФункции

&НаСервере
Процедура ОбновитьДобавленныеКолонкиТаблиц()

	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияФормыМестоположения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда      
		НайденныеСтроки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ID, ОтказавшийЭлемент", ДополнительныеПараметры.ID_Ремонта, ДополнительныеПараметры.ОтказавшийЭлемент)); 
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка.Высота = Результат.Высота;
			Строка.Долгота = Результат.Долгота;
			Строка.Широта = Результат.Широта;
		КонецЦикла;	     
		Модифицированность = Истина; 
	КонецЕсли;
	
КонецПРоцедуры

#КонецОбласти

