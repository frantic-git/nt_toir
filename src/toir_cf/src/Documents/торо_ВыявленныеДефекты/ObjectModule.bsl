#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем СписокОтбора;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		
		ДатаОбнаружения = Основание.Дата;
		Инициатор = Основание.Ответственный;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		Комиссия = Основание.Комиссия;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_СостоянияОбъектовРемонта") Тогда 
		
		ДатаОбнаружения = Основание.Дата;
		Инициатор = Основание.Ответственный;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_УчетКонтролируемыхПоказателей") Тогда
		
		ДатаОбнаружения = Основание.Дата;
		Инициатор = Основание.Ответственный;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
		ДокументОснование = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		ДатаОбнаружения = Основание.Дата;
		Инициатор = Основание.Ответственный;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;        
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
		ДефектВыявленВПроцессе = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);
		
		Если Основание.Свойство("ДанныеДокументаПриСозданииПоСостоянию") Тогда
			
			Если Основание.ДанныеДокументаПриСозданииПоСостоянию <> Неопределено Тогда
				ЗаполнитьДокументПараметрамиДефектаПриСозданииПоСостоянию(Основание.ДанныеДокументаПриСозданииПоСостоянию);
			КонецЕсли;
			
		ИначеЕсли Основание.Свойство("ОбъектРемонта") И НЕ Основание.Свойство("МассивСтрокТЧ") Тогда
			
			ОбъектРемонта = Основание.ОбъектРемонта;
			НоваяСтрока = СписокДефектов.Добавить();
			НоваяСтрока.ОбъектРемонта = ОбъектРемонта;
			НоваяСтрока.ПодразделениеИсполнитель = ОбъектРемонта.ПодразделениеИсполнитель;
			НоваяСтрока.ОтказавшийЭлемент = ОбъектРемонта;
			
		КонецЕсли;
		
		Если Основание.Свойство("МассивСтрокТЧ") Тогда
			Для каждого Строка из Основание.МассивСтрокТЧ Цикл
				НоваяСтрока = СписокДефектов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
		Если Основание.Свойство("РезультатыПодбораИзМатрицыОценкиРисков") Тогда
			Для каждого Строка из Основание.РезультатыПодбораИзМатрицыОценкиРисков Цикл
				НоваяСтрока = РезультатыПодбораИзМатрицыОценкиРисков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнитьРеквизитыШапкиПоУмолчанию();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для Каждого Дефект Из СписокДефектов Цикл
		Если Не ЗначениеЗаполнено(Дефект.ID) Тогда
			Дефект.ID = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда 
		ОбъектыРемонтаСтрокой = Строка(ОбъектРемонта); 
	Иначе
		МассивОР = ОбщегоНазначения.ВыгрузитьКолонку(СписокДефектов, "ОбъектРемонта", Истина);
		ОбъектыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивОР);
	КонецЕсли;

	// Получение удаленных ремонтов при перепроведении документа. Используются при формировании записей
	// регистров торо_ПлановыеИсполнителиРемонтов, торо_ОбщиеДанныеПоРемонтам, торо_СвернутыеФактическиеДатыРемонтов.
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивIDДокумента = СписокДефектов.ВыгрузитьКолонку("ID");
		МассивУдаленныхID = торо_Ремонты.ПолучитьIDУдаленныхРемонтовДокумента(МассивIDДокумента, Ссылка);
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", МассивУдаленныхID);
	Иначе
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", Новый Массив());
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СписокДефектов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части ""Список дефектов"" нет строк.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
	Для Каждого ТекСтрокаСписокДефектов Из СписокДефектов Цикл
		
		Если ТекСтрокаСписокДефектов.ОбъектРемонта.Пустая() Тогда
			ТекстСообщения = НСтр("ru = 'Не указан объект ремонта'");
			Поле = СтрШаблон("Объект.СписокДефектов[%1].ОбъектРемонта", СписокДефектов.Индекс(ТекСтрокаСписокДефектов));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
		
		Если ТекСтрокаСписокДефектов.ВидДефекта.Пустая() Тогда
			ШаблонСообщения = НСтр("ru = 'Не указан вид дефекта %1/%2.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрокаСписокДефектов.ОбъектРемонта, ТекСтрокаСписокДефектов.ОтказавшийЭлемент);
			Поле = СтрШаблон("Объект.СписокДефектов[%1].ВидДефекта", СписокДефектов.Индекс(ТекСтрокаСписокДефектов));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.торо_ВыявленныеДефекты.Записывать 	= Истина;
	Для Каждого ТекСтрокаСписокДефектов Из СписокДефектов Цикл
		// регистр сведений торо_ВыявленныеДефекты 
		Движение = Движения.торо_ВыявленныеДефекты.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаСписокДефектов);
		Движение.Период                                 = ДатаОбнаружения;
		Движение.ДефектВыявленВПроцессе                 = ДефектВыявленВПроцессе;
		Движение.Организация                            = Организация;
		Движение.Подразделение                          = Подразделение;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		УстановитьУправляемыеБлокировки();
	КонецЕсли;
	
	ТаблицаВО = торо_УчетДефектов.СформироватьТаблицуВнешнихОснований(Ссылка);
	ДвиженияПоРегистру_торо_ВнешниеОснованияДляРабот(РежимПроведения, ТаблицаВО, Отказ);
	
	ДвиженияПоРегистру_торо_РецидивныеДефекты();
	ДвиженияПоРегистру_торо_ГарантийностьРемонтов();
	ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам();
	
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусРемонтовПриПроведении(ЭтотОбъект);
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовРемонта(Ссылка);
	
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	Если Не Отказ Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
		торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовПриОтменеПроведения(ЭтотОбъект);
		ДвиженияПоРегистру_торо_РецидивныеДефекты(Ложь);
		
		торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РезультатыПодбораИзМатрицыОценкиРисков.Очистить();
	
	Для каждого Строка Из СписокДефектов Цикл
        Строка.ДатаНачалаРемонта                      = Дата("00010101");
        Строка.ДатаОкончанияРемонта                   = Дата("00010101");
        Строка.КрайняяДопустимаяДатаЗавершенияРемонта = Дата("00010101");
		Строка.ID                                     = Новый УникальныйИдентификатор();
		Строка.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(Строка.ОтказавшийЭлемент, ДатаОбнаружения, Дата("00010101"));
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// Не используется в новых документах с релиза 2.0.38.1 (ID ремонтов больше не наследуется из внешних оснований).
	// Сохранено для временного поддержания обратной совместимости.
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = СписокДефектов.Выгрузить(Новый Структура("ЗакрываетПредписание",Истина),"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Не используется в новых документах с релиза 2.0.38.1 (ID ремонтов больше не наследуется из внешних оснований).
// Сохранено для временного поддержания обратной совместимости.
//
// Движения по регистру "Внешние основания для работ", простановка Обработано = Истина
Процедура ДвиженияПоРегистру_торо_ВнешниеОснованияДляРабот(РежимПроведения, ТаблицаВО, Отказ)
	
	Движения.торо_ВнешниеОснованияДляРабот.Очистить();
	Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
	Для каждого ВнешнееОснование Из ТаблицаВО Цикл
		Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВнешнееОснование);
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Обработано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Движения по регистру "Рецидивные дефекты"
Процедура ДвиженияПоРегистру_торо_РецидивныеДефекты(Проведение = Истина) Экспорт
	// Рецидивный дефект определяется точным совпадением параметров с одним из предыдущих дефектов:
	//	- ОР + Отказавший элемент + Типовой дефект (если типовой дефект заполнен);
	//	- ОР + Отказавший элемент + Вид дефекта + Причина дефекта (если типовой дефект не заполнен).
	// При этом имеется ввиду реквизит именно у рассматриваемого дефекта. У прошлых дефектов реквизит «Типовой дефект» может быть заполнен,
	// а у текущего нет, и при этом их также можно сравнить и посчитать рецидивным или нет.
	
	Если Проведение Тогда
		ДвиженияПоРегистру_торо_РецидивныеДефекты_Проведение();
	Иначе
		ДвиженияПоРегистру_торо_РецидивныеДефекты_ОтменаПроведения();
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_РецидивныеДефекты_Проведение()
	МенеджерВТ = торо_УчетДефектов.СформироватьВТПоДефектам(Ссылка);
	
#Область РецидивностьДефектовДокумента
	// Проверяем, являются ли дефекты текущего документа рецидивными. Отбираются все ремонты, дата обнаружения
	// которых меньше даты обнаружения текущих.
		
	РезультатЗапроса = торо_УчетДефектов.ПолучитьТекстЗапросаРецидивныеДефекты(МенеджерВТ);
	
	Движения.торо_РецидивныеДефекты.Очистить();
	Движения.торо_РецидивныеДефекты.Записывать = Истина;
	
	ВыборкаРецидивныхДефектов = РезультатЗапроса.Выбрать();
	Пока ВыборкаРецидивныхДефектов.Следующий() Цикл
		Движение = Движения.торо_РецидивныеДефекты.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаРецидивныхДефектов);
	КонецЦикла;
#КонецОбласти

#Область РецидивностьОстальныхДефектовНаОснованииДефектовДокумента
	// Может быть ситуация, когда в системе есть ремонты, не являющиеся рецидивными, но после проведения докумета станут рецидивными
	// на основании текущих. Т.е. ремонт из текущего документа станет предыдущим для какого-то дефекта.
	// В этом случае помимо новых рецидивных ремонтов выбираем все движения по РН докумета, к которому они относятся, чтобы при записи
	// набора не затереть эти движения набором, в котором только новые рецидивные.
	
	РезультатЗапроса = торо_УчетДефектов.ПолучитьТекстЗапросаРецидивностьОстальныхДефектовНаОснованииДефектовДокумента(МенеджерВТ);
	
	ВыборкаРегистраторов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.торо_РецидивныеДефекты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		
		ВыборкаРецидивныхДефектов = ВыборкаРегистраторов.Выбрать();
		Пока ВыборкаРецидивныхДефектов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаРецидивныхДефектов);
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
#КонецОбласти
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_РецидивныеДефекты_ОтменаПроведения()
	МенеджерВТ = торо_УчетДефектов.СформироватьВТПоДефектам(Ссылка);

#Область РецидивностьОстальныхДефектовНаОснованииДефектовДокумента
	// При отмене проведения нужно получить все рецидивные дефекты, для которых дефекты текущего документа
	// являются предыдущими и проверить их рецидивноть без учета дефектов документа. Если они перестают
	// быть рецидивными или находится новый предыдущий дефект, то необходимо получать все движения документов,
	// в которых указаны дефекты, чтобы не затереть данные в регистре.
	
	РезультатЗапроса = торо_УчетДефектов.ТекстЗапросаОтменаПроведения(МенеджерВТ);
	
	ВыборкаРегистраторов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.торо_РецидивныеДефекты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		
		ВыборкаРецидивныхДефектов = ВыборкаРегистраторов.Выбрать();
		Пока ВыборкаРецидивныхДефектов.Следующий() Цикл
			Если ВыборкаРецидивныхДефектов.Рецидивный Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаРецидивныхДефектов);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
#КонецОбласти
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам()
	Движения.торо_ВсеДокументыПоРемонтам.Записывать = Истина;
	Движения.торо_ВсеДокументыПоРемонтам.Очистить();
	
	Для каждого СтрокаТЧ Из СписокДефектов Цикл
	    Движение = Движения.торо_ВсеДокументыПоРемонтам.Добавить();
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументПоРемонту = Ссылка;
		Движение.ДатаДокумента = Дата;
		Движение.Организация = Организация;
		Движение.Подразделение = Подразделение;
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ГарантийностьРемонтов()
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии") Тогда
		Возврат;
	КонецЕсли;
	
	Движения.торо_ГарантийностьРемонтов.Записывать = Истина;
	Движения.торо_ГарантийностьРемонтов.Очистить();
	
	Для каждого Строка Из СписокДефектов Цикл
		Движение = Движения.торо_ГарантийностьРемонтов.Добавить();
		Движение.Период = Дата;
		Движение.IDРемонта = Строка.ID;
		Движение.Гарантийный = Строка.ГарантийныйРемонт;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиПоУмолчанию()
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Инициатор) Тогда
		Инициатор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойИнициаторДефекта");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОбнаружения) И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР", "ПодставлятьТекущуюДатуВоВнешнееОснованиеИВыявленныеДефекты", Ложь) Тогда
		ДатаОбнаружения = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПараметрамиДефектаПриСозданииПоСостоянию(СтруктураПараметров)
	
	ПараметрыСобытия = СтруктураПараметров.СтруктураДокументаОснования;
	
	ЭтотОбъект.Дата = ТекущаяДата();
	ЭтотОбъект.ДатаОбнаружения = ПараметрыСобытия.ДатаДокументаИсточник;
	
	Для Каждого КлючИЗначение Из СтруктураПараметров.Шапка Цикл
		ЭтотОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	СтрокаДокументаОснования = ЭтотОбъект.ДокументыОснования.Добавить();
	СтрокаДокументаОснования.ДокументОснование = ПараметрыСобытия.ДокументИсточник;	
	
	СтрокаДефекта = ЭтотОбъект.СписокДефектов.Добавить();
	СтрокаДефекта.ID = Новый УникальныйИдентификатор;
	СтрокаДефекта.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ПараметрыСобытия.ОбъектРемонта, ЭтотОбъект.ДатаОбнаружения, ЭтотОбъект.ДатаОбнаружения);
	СтрокаДефекта.ДокументИсточник 	= ПараметрыСобытия.ДокументИсточник;
	СтрокаДефекта.ОбъектРемонта 	= ПараметрыСобытия.ОбъектРемонта;
	СтрокаДефекта.ОтказавшийЭлемент = ПараметрыСобытия.ОбъектРемонта;
	
	Если ТипЗнч(ПараметрыСобытия.ДокументИсточник) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		СтрокаДефекта.ВидРемонтов   = Константы.торо_ВидРемонтаПриВводеНаОснованииВнешнихОснований.Получить();
	Иначе
		СтрокаДефекта.ВидРемонтов   = Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураПараметров.Таблица Цикл
		СтрокаДефекта[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
	
#КонецЕсли