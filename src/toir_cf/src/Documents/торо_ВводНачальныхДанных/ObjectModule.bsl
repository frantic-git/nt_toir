
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа.
перем СтруктураДанных Экспорт;  // Структура, хранящая данные для работы с уведомлениями.

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ЗаполнитьДатуРаботыСВНаработке();
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.торо_ВидыДокументаВводНачДанных.ПоОбъектуРемонта Тогда
		ПроверяемыеРеквизиты.Добавить("ОбъектыРемонта");
	Иначе
		ПроверяемыеРеквизиты.Добавить("СпискиОбъектовРемонта");
	КонецЕсли;
	
	ПолнаяТаблицаОбъектовРемонта = ОбъектыРемонта.ВыгрузитьКолонки();
	ПолнаяТаблицаОбъектовРемонта.Индексы.Добавить("ОбъектРемонта");
	
	ТаблицаПодчиненных = Новый ТаблицаЗначений;
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта");
	ТаблицаПодчиненных.Колонки.Добавить("ОбъектРемонта", ОписаниеТипа);
	ТаблицаПодчиненных.Колонки.Добавить("Родитель", ОписаниеТипа);
	ТаблицаПодчиненных.Индексы.Добавить("Родитель");
	
	ЗаполнитьТаблицыОбъектовРемонта(ПолнаяТаблицаОбъектовРемонта, ТаблицаПодчиненных);
	ТаблицаВыполненныхРемонтов = ВыполненныеРаботы.Выгрузить();
	ДополнительныеСвойства.Вставить("ТаблицаВыполненныхРемонтов", ТаблицаВыполненныхРемонтов);
	
	ПроверитьНаНаличиеДокументовМеняющихСостоянияОР(ПолнаяТаблицаОбъектовРемонта, Отказ);
	ПроверитьЗаполнениеИерархии(Отказ);
	ПроверитьДублиВыполненныхРабот(Отказ);
	ПроверитьДублиЗначенийПоказателей(Отказ);
	ПроверитьДатыВыполненныхРабот(Отказ);
	ПроверитьНаличиеДокументовВводаНачальныхДанных(Отказ);
	ПроверитьНаличиеДокументовПоНаработке(Отказ);
	
	ДополнительныеСвойства.Вставить("ПолнаяТаблицаОбъектовРемонта", ПолнаяТаблицаОбъектовРемонта);
	ДополнительныеСвойства.Вставить("ТаблицаПодчиненных", ТаблицаПодчиненных);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ДополнительныеСвойства.Свойство("ПолнаяТаблицаОбъектовРемонта") Тогда
		ПолнаяТаблицаОбъектовРемонта = ДополнительныеСвойства.ПолнаяТаблицаОбъектовРемонта;
		ТаблицаПодчиненных = ДополнительныеСвойства.ТаблицаПодчиненных;
	Иначе
		ПолнаяТаблицаОбъектовРемонта = ОбъектыРемонта.ВыгрузитьКолонки();
		ПолнаяТаблицаОбъектовРемонта.Индексы.Добавить("ОбъектРемонта");
		
		ТаблицаПодчиненных = Новый ТаблицаЗначений;
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта");
		ТаблицаПодчиненных.Колонки.Добавить("ОбъектРемонта", ОписаниеТипа);
		ТаблицаПодчиненных.Колонки.Добавить("Родитель", ОписаниеТипа);
		ТаблицаПодчиненных.Индексы.Добавить("Родитель");
		
		ЗаполнитьТаблицыОбъектовРемонта(ПолнаяТаблицаОбъектовРемонта, ТаблицаПодчиненных);
	КонецЕсли;
	
	ЗаписьВРегистрыЗавершенныеРемонты();
	ЗаписьВРегистрыНаработки(ТаблицаПодчиненных);
	ЗаписьВРегистрыСостоянияОР(ПолнаяТаблицаОбъектовРемонта);
	
	Движения.торо_ЗначенияКонтролируемыхПоказателей.Записывать = Истина;
	Для Каждого Показатель Из ПоказателиОбъектыРемонта Цикл 
		Движение = Движения.торо_ЗначенияКонтролируемыхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Показатель);
		Движение.Период = Дата;
	КонецЦикла;
	
	Движения.торо_ИсторияЗапчастейОбъектаРемонта.Записывать = Истина;
	Для каждого Запчасть Из ЗапчастиОбъектаРемонта Цикл
		Движение = Движения.торо_ИсторияЗапчастейОбъектаРемонта.Добавить();
		Движение.Запчасть = Запчасть.Номенклатура;
		Движение.ОбъектРемонта = Запчасть.ОбъектРемонта;
		Движение.Характеристика = Запчасть.ХарактеристикаНоменклатуры;
		Движение.СерийныйНомер = Запчасть.СерийныйНомер;
		Движение.Период = Дата;
		Движение.Количество = ?(ЗначениеЗаполнено(Запчасть.Количество) И Не ЗначениеЗаполнено(Запчасть.СерийныйНомер) ,Запчасть.Количество,1);
		Движение.СтатусДвиженияЗЧ = Запчасть.СтатусДвиженияЗЧ;
		Движение.Установлена = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДатуРаботыСВНаработке()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.Показатель КАК Показатель,
	|	ТаблицаДокумента.ДатаРаботыПо КАК ДатаРаботыПо,
	|	ТаблицаДокумента.Значение КАК Значение
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ДатаРаботыПо,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.Показатель КАК Показатель,
	|	ТаблицаДокумента.ДатаРаботыПо КАК ДатаРаботыПо,
	|	МАКСИМУМ(ТаблицаДокумента1.ДатаРаботыПо) КАК ДатаРаботыС
	|ПОМЕСТИТЬ ДатыИзТаблицы
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента1
	|		ПО ТаблицаДокумента.ОбъектРемонта = ТаблицаДокумента1.ОбъектРемонта
	|			И ТаблицаДокумента.Показатель = ТаблицаДокумента1.Показатель
	|			И ТаблицаДокумента.ДатаРаботыПо > ТаблицаДокумента1.ДатаРаботыПо
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ОбъектРемонта,
	|	ТаблицаДокумента.Показатель,
	|	ТаблицаДокумента.ДатаРаботыПо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ДатаРаботыПо,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаДокумента.Показатель КАК Показатель,
	|	ТаблицаДокумента.ДатаРаботыПо КАК ДатаРаботыПо,
	|	ТаблицаДокумента.Значение КАК Значение,
	|	ЕСТЬNULL(ДатыИзТаблицы.ДатаРаботыС, торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию) КАК ДатаРаботыС
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыИзТаблицы КАК ДатыИзТаблицы
	|		ПО ТаблицаДокумента.ОбъектРемонта = ДатыИзТаблицы.ОбъектРемонта
	|			И ТаблицаДокумента.Показатель = ДатыИзТаблицы.Показатель
	|			И ТаблицаДокумента.ДатаРаботыПо = ДатыИзТаблицы.ДатаРаботыПо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|		ПО ТаблицаДокумента.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектРемонта,
	|	Показатель,
	|	ДатаРаботыПо";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", НаработкаОбъектыРемонта.Выгрузить());
	ТаблицаНаработки = Запрос.Выполнить().Выгрузить();
	НаработкаОбъектыРемонта.Загрузить(ТаблицаНаработки);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыОбъектовРемонта(ПолнаяТаблицаОбъектовРемонта, ТаблицаПодчиненных)
	
	ПолнаяТаблицаОбъектовРемонта.Очистить();
	ТаблицаПодчиненных.Очистить();
	
	Для каждого ТекСтрока из ОбъектыРемонта Цикл
		
		СтруктураПоиска = Новый Структура("ОбъектРемонта",	ТекСтрока.ОбъектРемонта);
		НайденныеСтроки = ПолнаяТаблицаОбъектовРемонта.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ПолнаяТаблицаОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
		
		Если ТекСтрока.ИзменятьСостояниеПодчиненныхОР Тогда
						
			МассивПодчиненных = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(ТекСтрока.ОбъектРемонта, ТекСтрока.СтруктураИерархии);
			
			Для Каждого ПодчиненныйОР Из МассивПодчиненных Цикл
				СтруктураПоискаВПодчиненных = Новый Структура("ОбъектРемонта, Родитель", ПодчиненныйОР, ТекСтрока.ОбъектРемонта);
				СтруктураПоискаВПолнойТаблице = Новый Структура("ОбъектРемонта", ПодчиненныйОР);
				Если НЕ ПодчиненныйОР.ЭтоГруппа И ТаблицаПодчиненных.НайтиСтроки(СтруктураПоискаВПодчиненных).Количество() = 0 Тогда 
					НоваяСтрока = ТаблицаПодчиненных.Добавить();
					НоваяСтрока.Родитель = ТекСтрока.ОбъектРемонта;
					НоваяСтрока.ОбъектРемонта = ПодчиненныйОР;
								
					Если ПолнаяТаблицаОбъектовРемонта.НайтиСтроки(СтруктураПоискаВПолнойТаблице).Количество() = 0 Тогда
						НоваяСтрока = ПолнаяТаблицаОбъектовРемонта.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
						НоваяСтрока.ОбъектРемонта = ПодчиненныйОР;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеДокументовВводаНачальныхДанных(Отказ)
	Запрос = Новый Запрос();
	
	Если ВидОперации = Перечисления.торо_ВидыДокументаВводНачДанных.ПоОбъектуРемонта Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПРЕДСТАВЛЕНИЕ(торо_ВводНачальныхДанныхОбъектыРемонта.ОбъектРемонта) КАК Объект,
		               |	ПРЕДСТАВЛЕНИЕ(торо_ВводНачальныхДанныхОбъектыРемонта.Ссылка) КАК Ссылка
		               |ИЗ
		               |	Документ.торо_ВводНачальныхДанных.ОбъектыРемонта КАК торо_ВводНачальныхДанныхОбъектыРемонта
					   |ГДЕ
		               |	торо_ВводНачальныхДанныхОбъектыРемонта.Ссылка <> &Ссылка
					   |	И торо_ВводНачальныхДанныхОбъектыРемонта.Ссылка.Проведен
					   |	И торо_ВводНачальныхДанныхОбъектыРемонта.ОбъектРемонта В(&ОбъектыРемонта)";
		
		Запрос.УстановитьПараметр("ОбъектыРемонта", ОбъектыРемонта.ВыгрузитьКолонку("ОбъектРемонта"));
		
		ШаблонСообщения = НСтр("ru = 'По объекту ремонта ""%1"" уже введен документ ""%2"". Проведение невозможно.'");
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПРЕДСТАВЛЕНИЕ(торо_ВводНачальныхДанныхРегламентныеМероприятия.СписокОбъектов) КАК Объект,
		               |	ПРЕДСТАВЛЕНИЕ(торо_ВводНачальныхДанныхРегламентныеМероприятия.Ссылка) КАК Ссылка
		               |ИЗ
		               |	Документ.торо_ВводНачальныхДанных.РегламентныеМероприятия КАК торо_ВводНачальныхДанныхРегламентныеМероприятия
					   |ГДЕ
		               |	торо_ВводНачальныхДанныхРегламентныеМероприятия.Ссылка <> &Ссылка
					   |	И торо_ВводНачальныхДанныхРегламентныеМероприятия.Ссылка.Проведен
					   |	И торо_ВводНачальныхДанныхРегламентныеМероприятия.СписокОбъектов В(&СписокРМ)";
		
		Запрос.УстановитьПараметр("СписокРМ", РегламентныеМероприятия.ВыгрузитьКолонку("СписокОбъектов"));
		
		ШаблонСообщения = НСтр("ru = 'По списку объектов РМ ""%1"" уже введен документ ""%2"". Проведение невозможно.'");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Объект, Выборка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьЗаполнениеИерархии(Отказ)
	
	ШаблонСообщения = НСтр("ru = 'В строке №%1 табличной части ""Объекты ремонта"" не заполнено поле ""Структура иерархии"".'");
	
	Для Каждого Строка Из ОбъектыРемонта Цикл
		Если Строка.ИзменятьСостояниеПодчиненныхОР И НЕ ЗначениеЗаполнено(Строка.СтруктураИерархии) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаНаличиеДокументовМеняющихСостоянияОР(ПолнаяТаблицаОбъектовРемонта, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ОбъектыРемонта.ТекущееСостояние КАК ТекущееСостояние
	               |ПОМЕСТИТЬ ОбъектыРемонта
	               |ИЗ
	               |	&ОбъектыРемонта КАК ОбъектыРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Состояния.ОбъектРемонта КАК ОбъектРемонта,
	               |	Состояния.ТекущееСостояние КАК ТекущееСостояние
	               |ИЗ
	               |	ОбъектыРемонта КАК Состояния
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	               |		ПО Состояния.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	               |ГДЕ
	               |	торо_ТекущееСостояниеОР.Регистратор <> &Ссылка";
	
	Запрос.УстановитьПараметр("ОбъектыРемонта", ПолнаяТаблицаОбъектовРемонта);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ТекущееСостояние) Тогда
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 уже имеются документы меняющие состояния объекта!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДублиВыполненныхРабот(Отказ)
	
	ШаблонСообщения = "";
	
	Запрос = Новый Запрос;
	
	Если ВидОперации = Перечисления.торо_ВидыДокументаВводНачДанных.ПоОбъектуРемонта Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаВыполненныхРемонтов.ОбъектРемонта КАК ОбъектРемонта,
		|	ТаблицаВыполненныхРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаВыполненныхРемонтов.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаВыполненныхРемонтов КАК ТаблицаВыполненныхРемонтов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта,
		|	ВидРемонтныхРабот,
		|	ДатаОкончанияРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
		|	ТаблицаДокумента.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДокумента.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	торо_ЗавершенныеРемонтныеРаботы.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента
		|		ПО торо_ЗавершенныеРемонтныеРаботы.ОбъектРемонта = ТаблицаДокумента.ОбъектРемонта
		|			И торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот = ТаблицаДокумента.ВидРемонтныхРабот
		|			И торо_ЗавершенныеРемонтныеРаботы.ДатаОкончания = ТаблицаДокумента.ДатаОкончанияРемонта
		|			И (ТИПЗНАЧЕНИЯ(торо_ЗавершенныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_ВводНачальныхДанных))
		|			И (торо_ЗавершенныеРемонтныеРаботы.Регистратор <> &Ссылка)";
		
		ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" в другом документе уже записаны данные по виду ремонтных работ ""%2"". Проведение невозможно!'");
		
		Запрос.УстановитьПараметр("ТаблицаВыполненныхРемонтов", ДополнительныеСвойства.ТаблицаВыполненныхРемонтов);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ВводНачальныхДанныхВыполненныеРаботы.СписокОбъектов КАК ОбъектРемонта,
		|	торо_ВводНачальныхДанныхВыполненныеРаботы.ВидМероприятия КАК ВидРемонтныхРабот,
		|	торо_ВводНачальныхДанныхВыполненныеРаботы.ДатаПоследнегоМероприятия КАК ДатаОкончанияРемонта
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.торо_ВводНачальныхДанных.РегламентныеМероприятия КАК торо_ВводНачальныхДанныхВыполненныеРаботы
		|ГДЕ
		|	торо_ВводНачальныхДанныхВыполненныеРаботы.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта,
		|	ВидРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.ОбъектРемонта КАК ОбъектРемонта,
		|	ТаблицаДокумента.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДокумента.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	торо_ЗавершенныеМероприятия.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.торо_ЗавершенныеМероприятия КАК торо_ЗавершенныеМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента
		|		ПО торо_ЗавершенныеМероприятия.СписокОбъектов = ТаблицаДокумента.ОбъектРемонта
		|			И торо_ЗавершенныеМероприятия.ВидМероприятия = ТаблицаДокумента.ВидРемонтныхРабот
		|			И торо_ЗавершенныеМероприятия.ДатаОкончания = ТаблицаДокумента.ДатаОкончанияРемонта
		|			И (ТИПЗНАЧЕНИЯ(торо_ЗавершенныеМероприятия.Регистратор) = ТИП(Документ.торо_ВводНачальныхДанных))
		|			И (торо_ЗавершенныеМероприятия.Регистратор <> &Ссылка)";

		ШаблонСообщения = НСтр("ru = 'Для списка объектов ремонта ""%1"" в другом документе уже записаны данные по виду мероприятия ""%2"". Проведение невозможно!'");
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.ВидРемонтныхРабот);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Регистратор,,, Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДублиЗначенийПоказателей(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВводНачальныхДанныхПоказателиОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ВводНачальныхДанныхПоказателиОбъектыРемонта.Показатель КАК Показатель,
	|	торо_ВводНачальныхДанныхПоказателиОбъектыРемонта.ДатаКонтроля КАК ДатаКонтроля
	|ПОМЕСТИТЬ ВТ_ПоказателиДокумента
	|ИЗ
	|	Документ.торо_ВводНачальныхДанных.ПоказателиОбъектыРемонта КАК торо_ВводНачальныхДанныхПоказателиОбъектыРемонта
	|ГДЕ
	|	торо_ВводНачальныхДанныхПоказателиОбъектыРемонта.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаКонтроля,
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ЗначенияКонтролируемыхПоказателей.Показатель КАК Показатель,
	|	торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля КАК ДатаКонтроля,
	|	КОЛИЧЕСТВО(торо_ЗначенияКонтролируемыхПоказателей.Значение) КАК Значение
	|ИЗ
	|	РегистрСведений.торо_ЗначенияКонтролируемыхПоказателей КАК торо_ЗначенияКонтролируемыхПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоказателиДокумента КАК ПоказателиДокумента
	|		ПО торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта = ПоказателиДокумента.ОбъектРемонта
	|			И торо_ЗначенияКонтролируемыхПоказателей.Показатель = ПоказателиДокумента.Показатель
	|			И торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля = ПоказателиДокумента.ДатаКонтроля
	|			И (НЕ торо_ЗначенияКонтролируемыхПоказателей.Регистратор = &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта,
	|	торо_ЗначенияКонтролируемыхПоказателей.Показатель,
	|	торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(торо_ЗначенияКонтролируемыхПоказателей.Значение) > 0";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ШаблонСообщения = НСтр("ru='Для объекта ремонта ""%1"" на дату контроля ""%2"" уже указано значение показателя ""%3""!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.ДатаКонтроля, Выборка.Показатель);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДатыВыполненныхРабот(Отказ)
	
	ТекДата = ТекущаяДата();
	
	Для каждого Строка Из ВыполненныеРаботы Цикл
		Если Строка.ДатаОкончанияРемонта > ТекДата Тогда
			ШаблонСообщения = НСтр("ru='Для объекта ремонта ""%1"" дата окончания выполненных работ ""%2"" больше текущей даты!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.ОбъектРемонта, Строка.ВидРемонтныхРабот);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из РегламентныеМероприятия Цикл
		Если Строка.ДатаПоследнегоМероприятия > ТекДата Тогда
			ШаблонСообщения = НСтр("ru='Для списка объектов ""%1"" дата последнего мероприятия ""%2"" больше текущей даты!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.СписокОбъектов, Строка.ВидМероприятия);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьНаличиеДокументовПоНаработке(Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЧОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ТЧОбъектыРемонта
	               |ИЗ
	               |	&ТЧОбъектыРемонта КАК ТЧОбъектыРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧНаработка.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТЧНаработка.Показатель КАК Показатель
	               |ПОМЕСТИТЬ ТЧНаработка
	               |ИЗ
	               |	&ТЧНаработка КАК ТЧНаработка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТЧНаработка.Показатель КАК Показатель,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(торо_НаработкаОбъектовРемонта.Регистратор, """")) КАК Регистратор
	               |ИЗ
	               |	ТЧОбъектыРемонта КАК ТЧОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЧНаработка КАК ТЧНаработка
	               |		ПО (ТЧНаработка.ОбъектРемонта = ТЧОбъектыРемонта.ОбъектРемонта)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	               |		ПО (торо_НаработкаОбъектовРемонта.ОбъектРемонта = ТЧОбъектыРемонта.ОбъектРемонта)
	               |			И (торо_НаработкаОбъектовРемонта.Показатель = ТЧНаработка.Показатель)
	               |ГДЕ
	               |	НЕ торо_НаработкаОбъектовРемонта.Регистратор ССЫЛКА Документ.торо_ВводНачальныхДанных
	               |	И торо_НаработкаОбъектовРемонта.Регистратор <> &Регистратор
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧОбъектыРемонта.ОбъектРемонта,
	               |	ТЧНаработка.Показатель
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(торо_НаработкаОбъектовРемонта.Регистратор, """")) > 0";
	Запрос.УстановитьПараметр("ТЧНаработка", НаработкаОбъектыРемонта.Выгрузить());
	Запрос.УстановитьПараметр("ТЧОбъектыРемонта", ОбъектыРемонта.Выгрузить());
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		Отказ = Истина;
		ШаблонСообщения = НСтр("ru = 'По показателю ""%2"" объекта ремонта ""%1"" ранее уже введена наработка. Проведение невозможно.'");
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонта, Выборка.Показатель);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписьВРегистрыЗавершенныеРемонты()
	
	Движения.торо_ЗавершенныеРемонтныеРаботы.Записывать = Истина;
	Для Каждого Работа Из ДополнительныеСвойства.ТаблицаВыполненныхРемонтов Цикл
		Движение = Движения.торо_ЗавершенныеРемонтныеРаботы.Добавить();
		Движение.ВидРемонтныхРабот = Работа.ВидРемонтныхРабот;
		Движение.ОбъектРемонта = Работа.ОбъектРемонта;
		Движение.Период = Работа.ДатаОкончанияРемонта;
		Движение.ID = Новый УникальныйИдентификатор;
		Движение.ДатаОкончания = Работа.ДатаОкончанияРемонта;
	КонецЦикла;
	
	Движения.торо_ЗавершенныеМероприятия.Записывать = Истина;
	Для Каждого Работа Из РегламентныеМероприятия Цикл
		Движение = Движения.торо_ЗавершенныеМероприятия.Добавить();
		Движение.СписокОбъектов = Работа.СписокОбъектов;
		Движение.ВидМероприятия = Работа.ВидМероприятия;
		Движение.Период = Работа.ДатаПоследнегоМероприятия;
		Движение.ID = Новый УникальныйИдентификатор;
		Движение.ДатаОкончания = Работа.ДатаПоследнегоМероприятия;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписьВРегистрыНаработки(ТаблицаПодчиненных)
	Движения.торо_НаработкаОбъектовРемонта.Записывать = Истина;
	Движения.торо_ПериодыНаработкиОР.Записывать = Истина;
	
	Если НаработкаОбъектыРемонта.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПодчиненных.Количество() <> 0 Тогда
		ТаблицаОбхода = Новый ТаблицаЗначений; 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаПодчиненных.ОбъектРемонта КАК ОбъектРемонта,
		               |	ТаблицаПодчиненных.Родитель КАК Родитель
		               |ПОМЕСТИТЬ ТаблицаПодчиненных
		               |ИЗ
		               |	&ТаблицаПодчиненных КАК ТаблицаПодчиненных
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
		               |	ОбъектыРемонта.ИзменятьСостояниеПодчиненныхОР КАК ИзменятьСостояниеПодчиненныхОР,
		               |	ОбъектыРемонта.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ ОбъектыРемонта
		               |ИЗ
		               |	&ОбъектыРемонта КАК ОбъектыРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Наработка.ОбъектРемонта КАК ОбъектРемонта,
		               |	Наработка.Показатель КАК Показатель,
		               |	Наработка.Значение КАК Значение,
		               |	Наработка.ДатаРаботыС КАК ДатаРаботыС,
		               |	Наработка.ДатаРаботыПо КАК ДатаРаботыПо
		               |ПОМЕСТИТЬ ТЧНаработка
		               |ИЗ
		               |	&Наработка КАК Наработка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель КАК Показатель
		               |ПОМЕСТИТЬ НаработкаСрез
		               |ИЗ
		               |	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
		               |			,
		               |			ОбъектРемонта В
		               |				(ВЫБРАТЬ
		               |					ТаблицаПодчиненных.ОбъектРемонта
		               |				ИЗ
		               |					ТаблицаПодчиненных)) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЧНаработка.ОбъектРемонта КАК ОбъектРемонта,
		               |	ТЧНаработка.Показатель КАК Показатель,
		               |	ТЧНаработка.Значение КАК Значение,
		               |	ТЧНаработка.ДатаРаботыС КАК ДатаРаботыС,
		               |	ТЧНаработка.ДатаРаботыПо КАК ДатаРаботыПо
		               |ИЗ
		               |	ТЧНаработка КАК ТЧНаработка
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	ТаблицаПодчиненных.ОбъектРемонта,
		               |	ТЧНаработка.Показатель,
		               |	ТЧНаработка.Значение,
		               |	ТЧНаработка.ДатаРаботыС,
		               |	ТЧНаработка.ДатаРаботыПо
		               |ИЗ
		               |	ТаблицаПодчиненных КАК ТаблицаПодчиненных
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЧНаработка КАК ТЧНаработка
		               |		ПО ТаблицаПодчиненных.Родитель = ТЧНаработка.ОбъектРемонта
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаработкаСрез КАК НаработкаСрез
		               |		ПО (НаработкаСрез.ОбъектРемонта = ТаблицаПодчиненных.ОбъектРемонта)
		               |			И (НаработкаСрез.Показатель = ТЧНаработка.Показатель)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРемонта КАК ОбъектыРемонта
		               |		ПО (ОбъектыРемонта.ОбъектРемонта = ТаблицаПодчиненных.ОбъектРемонта)
		               |ГДЕ
		               |	ОбъектыРемонта.ОбъектРемонта ЕСТЬ NULL";
		Запрос.УстановитьПараметр("ТаблицаПодчиненных", ТаблицаПодчиненных);
		Запрос.УстановитьПараметр("ОбъектыРемонта", ОбъектыРемонта.Выгрузить());
		Запрос.УстановитьПараметр("Наработка", НаработкаОбъектыРемонта.Выгрузить());
		РезЗапроса = Запрос.Выполнить();
		Если НЕ РезЗапроса.Пустой() Тогда 
			ТаблицаОбхода = РезЗапроса.Выгрузить();
		КонецЕсли;
	Иначе
		ТаблицаОбхода = НаработкаОбъектыРемонта.Выгрузить(,"ОбъектРемонта, Показатель, Значение, ДатаРаботыПо, ДатаРаботыС");
	КонецЕсли;
	
	Для Каждого Наработка Из ТаблицаОбхода Цикл 
		Движение = Движения.торо_НаработкаОбъектовРемонта.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.ДатаКон = Наработка.ДатаРаботыПо;
		Движение.ДатаНач = Наработка.ДатаРаботыС;
		Движение.Наработка = Наработка.Значение;
		Движение.ОбъектРемонта = Наработка.ОбъектРемонта;
		Движение.Показатель = Наработка.Показатель;
		Движение.Период = Наработка.ДатаРаботыПо;
	КонецЦикла;
	
	ТаблицаОбхода.Свернуть("ОбъектРемонта, Показатель, ДатаРаботыПо");
	Для Каждого Наработка Из ТаблицаОбхода Цикл 
		Движение = Движения.торо_ПериодыНаработкиОР.Добавить();
		Движение.Период = Наработка.ДатаРаботыПо;
		Движение.ОбъектРемонта = Наработка.ОбъектРемонта;
		Движение.Показатель = Наработка.Показатель;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписьВРегистрыСостоянияОР(ПолнаяТаблицаОбъектовРемонта)
	
	Движения.торо_КоличествоПусковОР.Записывать = Истина;
	Для каждого СтрокаТЧ Из ОбъектыРемонта Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидПуска) Тогда
		    Продолжить;
		КонецЕсли;
		
		Движение = Движения.торо_КоличествоПусковОР.Добавить();
		Движение.ОбъектРемонта = СтрокаТЧ.ОбъектРемонта;
		Движение.ВидПуска = СтрокаТЧ.ВидПуска;
		Движение.Количество = 1;
		Движение.Период = Дата;
	КонецЦикла;
	
	Движения.торо_ТекущееСостояниеОР.Записывать = Истина;
	Движения.торо_ОстановленноеОборудование.Записывать = Истина;
	Движения.торо_ОборудованиеНаИспытаниях.Записывать = Истина;
	
	СоответствиеРеквизитовОР = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПолнаяТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонта"), "ЭтоГруппа, ДатаВводаВЭксплуатацию", Истина);
	
	Для каждого ОбъектРемонта Из ПолнаяТаблицаОбъектовРемонта Цикл
		
		Если НЕ СоответствиеРеквизитовОР[ОбъектРемонта.ОбъектРемонта].ЭтоГруппа = Истина  Тогда
			Если ЗначениеЗаполнено(ОбъектРемонта.ТекущееСостояние) Тогда
				ДатаВводаВЭксплуатацию = СоответствиеРеквизитовОР[ОбъектРемонта.ОбъектРемонта].ДатаВводаВЭксплуатацию;

				Движение=Движения.торо_ТекущееСостояниеОР.Добавить();
				Движение.ОбъектРемонта = ОбъектРемонта.ОбъектРемонта;
				Движение.ВидЭксплуатации = ОбъектРемонта.ТекущееСостояние;
				Движение.ПричинаПростоя = ОбъектРемонта.ПричинаПростоя;
				Движение.Период = ДатаВводаВЭксплуатацию;
				
				Если ОбъектРемонта.ТекущееСостояние.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
					Движение=Движения.торо_ОстановленноеОборудование.Добавить();
					Движение.ОбъектРемонта 	= ОбъектРемонта.ОбъектРемонта;
					Движение.Количество 	= 1;
					Движение.Дата 			= ДатаВводаВЭксплуатацию;
					Движение.ПричинаПростоя = ОбъектРемонта.ПричинаПростоя;
					Движение.Период 		= ДатаВводаВЭксплуатацию;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
				ИначеЕсли ОбъектРемонта.ТекущееСостояние.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Испытания Тогда
					Движение=Движения.торо_ОборудованиеНаИспытаниях.Добавить();
					Движение.ВидДвижения    = ВидДвиженияНакопления.Приход;
					Движение.ОбъектРемонта	= ОбъектРемонта.ОбъектРемонта;
					Движение.Период			= ДатаВводаВЭксплуатацию;
					Движение.Количество		= 1;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли