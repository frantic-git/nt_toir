
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	Если Параметры.Свойство("ВидОперации") И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.ВидОперации = Параметры.ВидОперации;
	ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.ВидОперации = Перечисления.торо_ВидыДокументаВводНачДанных.ПоОбъектуРемонта;
		КонецЕсли;
	КонецЕсли;
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	
	Если Объект.ВидОперации = Перечисления.торо_ВидыДокументаВводНачДанных.ПоОбъектуРемонта Тогда
		Элементы.СтраницыПоВидуОперации.ПодчиненныеЭлементы.СтраницаСпискиОбъектов.Видимость = Ложь;
		Элементы.СтраницыПоВидуОперации.ПодчиненныеЭлементы.СтраницаОбъектыРемонта.Видимость = Истина;
	Иначе
		Элементы.СтраницыПоВидуОперации.ПодчиненныеЭлементы.СтраницаСпискиОбъектов.Видимость = Истина;
		Элементы.СтраницыПоВидуОперации.ПодчиненныеЭлементы.СтраницаОбъектыРемонта.Видимость = Ложь;
	КонецЕсли;

	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяСтруктураИерархии", Истина);
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ПоказыватьПоложениеОР", Истина);
	
	Элементы.ОбъектыРемонтаОтображатьПоложение.Пометка = мОтображатьПоложение;
	Элементы.ОбъектыРемонтаПоложение.Видимость = мОтображатьПоложение;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СлужебныеРеквизитыЗаполнитьНаСервере();
	КонецЕсли;
	
	// функциональные опции
	ФОУчетЗапчастей = ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОУчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	ФОУчетНаработкиОборудования = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	ФОУчетПусковОборудования = ПолучитьФункциональнуюОпцию("торо_УчетПусковОборудования");
	ФОУчетСостоянияОборудования = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	ФОИспользоватьПланированиеПоЖесткимРемЦиклам = ПолучитьФункциональнуюОпцию("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам");
	
	Элементы.ГруппаЗапчастиОбъектаРемонта.Видимость = ФОУчетЗапчастей;
	Элементы.ПоказателиОбъектыРемонта.Видимость = ФОУчетКонтролируемыхПоказателей;
	Элементы.НаработкаОбъектыРемонта.Видимость = ФОУчетНаработкиОборудования;
	Элементы.ОбъектыРемонта.ПодчиненныеЭлементы.ИзменятьСостояниеПодчиненных.Видимость = ФОУчетСостоянияОборудования;
	Если Не ФОУчетКонтролируемыхПоказателей И Не ФОУчетНаработкиОборудования Тогда
		Элементы.ГруппаПоказателиИНаработкаОбъектыРемонта.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ОбъектыРемонтаВидПуска.Видимость = ФОУчетПусковОборудования;
	
	Для Каждого Строка Из Объект.ПоказателиОбъектыРемонта Цикл
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(Строка.ОбъектРемонта, ?(ЗначениеЗаполнено(Строка.ДатаКонтроля),Строка.ДатаКонтроля,Объект.Дата), Строка.Показатель);
		ЗаполнитьЗначенияСвойств(Строка, СтруктураВозврата,, ?(СтруктураВозврата.Свойство("ОбъектРемонта"), "ОбъектРемонта", ""));
	КонецЦикла;
	
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
	ЗаполнитьКолонкуТипФункциональноеМесто();	
	УстановитьУсловноеОформление();
	
	КоличествоСтрокПоказателейЭксплуатации = Объект.ПоказателиОбъектыРемонта.Количество() + Объект.НаработкаОбъектыРемонта.Количество();
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.ОбъектыРемонта.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
	КоличествоСтрокПоказателейЭксплуатации = ТекущийОбъект.ПоказателиОбъектыРемонта.Количество() + ТекущийОбъект.НаработкаОбъектыРемонта.Количество();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьКолонкиПричина();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ТЧ ВыполненныеРаботы
	Для Каждого ТекДанные Из Объект.ВыполненныеРаботы Цикл		
		Если Не ЗначениеЗаполнено(ТекДанные.ВидРемонтныхРабот) Или Не ЗначениеЗаполнено(ТекДанные.ДатаОкончанияРемонта) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаВыпуска = ПолучитьДатуВыпуска(ТекДанные.ОбъектРемонта);
		Если ТекДанные.ДатаОкончанияРемонта < ДатаВыпуска Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружен вид ремонтных работ ""%1"" с датой окончания меньше даты выпуска объекта ремонта в таблице ""Выполненные ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонтныхРабот);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ВыполненныеРаботы",,Отказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	// ТЧ ВыполненныеРаботы
	
	// ТЧ НаработкаОбъектыРемонта
	Для Каждого ТекСтрока Из Объект.НаработкаОбъектыРемонта Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Показатель)
			Или Не ЗначениеЗаполнено(ТекСтрока.ДатаРаботыПо)
			Или Не ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ДатаРаботыПо) Тогда
			ДатаВвода = ТекСтрока.ДатаРаботыС;
			ДатаРаботыПо = ТекСтрока.ДатаРаботыПо;
			Если ДатаВвода >= ДатаРаботыПо Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружена ""Дата работы по"" для показателя ""%1"" меньше даты ввода в эксплуатацию в таблице ""Наработка""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрока.Показатель);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НаработкаОбъектыРемонта",,Отказ);
				Возврат;
			КонецЕсли;
			
			Показатель = ТекСтрока.Показатель;
			ОбъектРемонта = ТекСтрока.ОбъектРемонта;
			Если ЗначениеЗаполнено(Показатель) Тогда
				Отбор = Новый Структура("ОбъектРемонта,Показатель",ОбъектРемонта,Показатель);
				МассивСрезПервых = ПолучитьНачалоДействияПоказателяНаработки(Отбор);
				Если МассивСрезПервых.Количество() = 0 ИЛИ МассивСрезПервых[0] > ДатаРаботыПо Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружена ""Дата работы по"" для показателя ""%1"" меньше даты начала действия показателя наработки в таблице ""Показатели эксплуатации""!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрока.Показатель);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НаработкаОбъектыРемонта",,Отказ);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель, ДатаРаботыПо",
				ТекСтрока.ОбъектРемонта, ТекСтрока.Показатель, ТекСтрока.ДатаРаботыПо);
			НайденныеСтроки = Объект.НаработкаОбъектыРемонта.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" уже указана наработка по показателю ""%2"" на дату %3!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрока.ОбъектРемонта, ТекСтрока.Показатель, ТекСтрока.ДатаРаботыПо);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НаработкаОбъектыРемонта",,Отказ);	
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// ТЧ НаработкаОбъектыРемонта
	
	// ТЧ ПоказателиОбъектыРемонта
	Для Каждого ТекДанные Из Объект.ПоказателиОбъектыРемонта Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.Показатель)
			Или Не ЗначениеЗаполнено(ТекДанные.ДатаКонтроля) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ОбъектРемонта, ДатаКонтроля, Показатель", ТекДанные.ОбъектРемонта, ТекДанные.ДатаКонтроля, ТекДанные.Показатель);
		Если Объект.ПоказателиОбъектыРемонта.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru='Для объекта ремонта ""%1"" на дату контроля ""%2"" уже указано значение показателя ""%3""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта, ТекДанные.ДатаКонтроля, ТекДанные.Показатель);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ПоказателиОбъектыРемонта",,Отказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	// ТЧ ПоказателиОбъектыРемонта
	
	// ТЧ Запчасти
	Для Каждого ТекДанные Из Объект.ЗапчастиОбъектаРемонта Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.Номенклатура)
			Или Не ЗначениеЗаполнено(ТекДанные.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ОбъектРемонта, ДатаЗамены, Номенклатура, ХарактеристикаНоменклатуры, СерийныйНомер, СтатусДвиженияЗЧ",
								ТекДанные.ОбъектРемонта, ТекДанные.ДатаЗамены, ТекДанные.Номенклатура, ТекДанные.ХарактеристикаНоменклатуры, ТекДанные.СерийныйНомер,ТекДанные.СтатусДвиженияЗЧ);
		НайденныеСтроки = Объект.ЗапчастиОбъектаРемонта.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.ХарактеристикаНоменклатуры) Тогда
				Если ЗначениеЗаполнено(ТекДанные.СерийныйНомер) Тогда
					ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" на дату замены ""%2"" уже указаны данные по запчасти ""%3"" с характеристикой ""%4"", серией ""%5"" и статусом движения ""%6""!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта,ТекДанные.ДатаЗамены,ТекДанные.Номенклатура,ТекДанные.ХарактеристикаНоменклатуры,ТекДанные.СерийныйНомер,ТекДанные.СтатусДвиженияЗЧ);
				Иначе
					ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" на дату замены ""%2"" уже указаны данные по запчасти ""%3"" с характеристикой ""%4"" и статусом движения ""%5""!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта,ТекДанные.ДатаЗамены,ТекДанные.Номенклатура,ТекДанные.ХарактеристикаНоменклатуры,ТекДанные.СтатусДвиженияЗЧ);
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ТекДанные.СерийныйНомер) Тогда
					ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" на дату замены ""%2"" уже указаны данные по запчасти ""%3"" с серией ""%4"" и статусом движения ""%5""!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта,ТекДанные.ДатаЗамены,ТекДанные.Номенклатура,ТекДанные.СерийныйНомер,ТекДанные.СтатусДвиженияЗЧ);
				Иначе
					ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" на дату замены ""%2"" уже указаны данные по запчасти ""%3"" со статусом движения ""%4""!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта,ТекДанные.ДатаЗамены,ТекДанные.Номенклатура,ТекДанные.СтатусДвиженияЗЧ);
				КонецЕсли;
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ЗапчастиОбъектаРемонта",,Отказ);	
			Возврат;
		КонецЕсли;
	КонецЦикла;
	// ТЧ Запчасти
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	
	Для Каждого Строка Из Объект.ПоказателиОбъектыРемонта Цикл
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(Строка.ОбъектРемонта, ?(ЗначениеЗаполнено(Строка.ДатаКонтроля),Строка.ДатаКонтроля,Объект.Дата), Строка.Показатель);
		ЗаполнитьЗначенияСвойств(Строка, СтруктураВозврата,, ?(СтруктураВозврата.Свойство("ОбъектРемонта"), "ОбъектРемонта", ""));
	КонецЦикла;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(); 	
	КонецЕсли;

	ЗаполнитьКолонкуТипФункциональноеМесто();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
    СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта

&НаКлиенте
Процедура ОбъектыРемонтаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Элементы.ВыполненныеРаботыДобавить.Доступность = СтрокаВыбрана; 
	Элементы.ПоказателиОбъектыРемонтаДобавить.Доступность = СтрокаВыбрана;
	Элементы.НаработкаОбъектыРемонтаДобавить.Доступность = СтрокаВыбрана;
	Элементы.ЗапчастиОбъектаРемонтаДобавить.Доступность = СтрокаВыбрана;
	
	Если СтрокаВыбрана Тогда 
		ТекОбъект = ТекущаяСтрока.ОбъектРемонта;
		Элементы.ВыполненныеРаботы.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
		Элементы.НаработкаОбъектыРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
		Элементы.ПоказателиОбъектыРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
		Элементы.ЗапчастиОбъектаРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
		
		Если ФОИспользоватьФМ Тогда
			Элементы.ГруппаВыполненныеРаботы.Видимость = НЕ ТекущаяСтрока.ТипФункциональноеМесто;
			Элементы.ГруппаЗапчастиОбъектаРемонта.Видимость = НЕ ТекущаяСтрока.ТипФункциональноеМесто И ФОУчетЗапчастей;
		КонецЕсли;
		
		Таблица = торо_РаботаСНормативамиСервер.ПолучитьТаблицуНормативныхРемонтов(ТекОбъект);
		СписокОтбораВидовТехническихРемонтов.Очистить();
		Для Каждого Значение Из Таблица Цикл
			СписокОтбораВидовТехническихРемонтов.Добавить(Значение.ВидРемонта);
		КонецЦикла;
		
		МассивВРЦепочек = ПолучитьСписокРемонтовЦепочекОР(ТекОбъект);
		СписокОтбораВидовРемонтовЦепочек.ЗагрузитьЗначения(МассивВРЦепочек);
		
		УстановитьПараметрыВыбораВР();
		УстановитьПараметрыВыбораНоменклатуры();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	УдалитьДанныеСвязанныхТЧ(ТекДанные.ОбъектРемонта);	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтрокаТЧ = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если СтрокаТЧ = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	Если Не ОтменаРедактирования Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ОбъектРемонта",СтрокаТЧ.ОбъектРемонта);
		Строки = Объект.ОбъектыРемонта.НайтиСтроки(Отбор);
		Если Строки.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данный объект уже присутствует в документе!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		ОтменаРедактирования = Истина;
	ИначеЕсли Не НоваяСтрока Тогда
		СтрокаТЧ.ОбъектРемонта = ТекущийОбъектРемонта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОбъектРемонта) И Не НоваяСтрока Тогда
		УдалитьДанныеСвязанныхТЧ(ТекущийОбъектремонта);	
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда 
		ОбъектыРемонтаПриАктивизацииСтроки(Элементы.ОбъектыРемонта);
	КонецЕсли;
	
	ТекущийОбъектремонта = Элемент.ТекущиеДанные.ОбъектРемонта;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложениеОРВстроке(ТекущиеДанные);
	КонецЕсли;
	
	Если ФОИспользоватьФМ Тогда
		ЭтоФМ = ЭтоФункциональноеМесто(ТекущиеДанные.ОбъектРемонта);
		ТекущиеДанные.ТипФункциональноеМесто = ЭтоФМ;
		Элементы.ГруппаВыполненныеРаботы.Видимость = НЕ ЭтоФМ;
		Элементы.ГруппаЗапчастиОбъектаРемонта.Видимость = НЕ ЭтоФМ И ФОУчетЗапчастей;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СписокДобавленныхОбъектов = Новый массив;
		
		Если ВыбранноеЗначение.Свойство("ОбъектРемонта") Тогда
			
			Если ТипЗнч(ВыбранноеЗначение.ОбъектРемонта) = Тип("Массив") Тогда
				
				Для каждого ОбъектРемонта из ВыбранноеЗначение.ОбъектРемонта Цикл
					Если НЕ ОбъектРемонтаУжеДобавлен(ОбъектРемонта) Тогда
						НС = Объект.ОбъектыРемонта.Добавить();
						НС.ОбъектРемонта = ОбъектРемонта;
						НС.СтруктураИерархии = ТекСтруктураИерархии;
						
						Элементы.ОбъектыРемонта.ТекущаяСтрока = НС.ПолучитьИдентификатор();
						ОбъектыРемонтаОбъектРемонтаПриИзменении(Элементы.ОбъектыРемонта);
						
						СписокДобавленныхОбъектов.Добавить(ОбъектРемонта);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				Если НЕ ОбъектРемонтаУжеДобавлен(ВыбранноеЗначение.ОбъектРемонта) Тогда
					НС = Объект.ОбъектыРемонта.Добавить();
					НС.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;
					НС.СтруктураИерархии = ТекСтруктураИерархии;
					
					Элементы.ОбъектыРемонта.ТекущаяСтрока = НС.ПолучитьИдентификатор();
					ОбъектыРемонтаОбъектРемонтаПриИзменении(Элементы.ОбъектыРемонта);
					
					СписокДобавленныхОбъектов.Добавить(ВыбранноеЗначение.ОбъектРемонта);
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("ЗаполнитьПоНормативам") И ВыбранноеЗначение.ЗаполнитьПоНормативам = Истина Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("МассивОР", СписокДобавленныхОбъектов);
			
			СтруктураПараметров.Вставить("ЗапрашиватьВидРемонтныхРабот", ВыбранноеЗначение.ЗапрашиватьВидРемонтныхРабот);
			СтруктураПараметров.Вставить("ЗапрашиватьВидПараметровНаработки", ВыбранноеЗначение.ЗапрашиватьВидПараметровНаработки);
			СтруктураПараметров.Вставить("ЗапрашиватьВидИзмеряемыхПоказателей", ВыбранноеЗначение.ЗапрашиватьВидИзмеряемыхПоказателей);
			
			СтруктураПараметров.Вставить("СоответствиеОР_ВидыРемонта", ВыбранноеЗначение.СоответствиеОР_ВидыРемонта);
			СтруктураПараметров.Вставить("СоответствиеОР_ПараметрыНаработки", ВыбранноеЗначение.СоответствиеОР_ПараметрыНаработки);
			СтруктураПараметров.Вставить("СоответствиеОР_ИзмеряемыеПоказатели", ВыбранноеЗначение.СоответствиеОР_ИзмеряемыеПоказатели);
			
			НачатьЗаполнениеяПоНормативамПослеПодбора(СтруктураПараметров);
		КонецЕсли; 
		
		ПроверитьНаличиеПоказателей(СписокДобавленныхОбъектов);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////

&НаКлиенте
Процедура НачатьЗаполнениеяПоНормативамПослеПодбора(СтруктураПараметров)

	Если СтруктураПараметров.ЗапрашиватьВидРемонтныхРабот И СтруктураПараметров.СоответствиеОР_ВидыРемонта.Количество() > 0 Тогда
		ОбщийСписокВидовРемонта = ПолучитьСписокРазличныхЗначенийИзСоответствия(СтруктураПараметров.СоответствиеОР_ВидыРемонта);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораВидовРемонта", ЭтотОбъект, СтруктураПараметров);
		
		ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды ремонтных работ'");
		ОбщийСписокВидовРемонта.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
	Иначе
		ПослеВыбораВидовРемонта(Неопределено, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидовРемонта(ОбщийСписокВидовРемонта, СтруктураПараметров) Экспорт

	Если СтруктураПараметров.ЗапрашиватьВидРемонтныхРабот Тогда
		Если ОбщийСписокВидовРемонта = Неопределено Тогда
			СтруктураПараметров.Вставить("СоответствиеОР_ВидыРемонта", Неопределено);
		Иначе
			ОтфильтрованноеСоответствиеОР = ОтфильтроватьСоответствиеОРПоМассивуВыбранныхЗначений(СтруктураПараметров.СоответствиеОР_ВидыРемонта, ОбщийСписокВидовРемонта);
			СтруктураПараметров.Вставить("СоответствиеОР_ВидыРемонта", ОтфильтрованноеСоответствиеОР);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗапрашиватьВидИзмеряемыхПоказателей И СтруктураПараметров.СоответствиеОР_ИзмеряемыеПоказатели.Количество() > 0 Тогда
		ОбщийСписокКонтролируемыхПоказателей = ПолучитьСписокРазличныхЗначенийИзСоответствия(СтруктураПараметров.СоответствиеОР_ИзмеряемыеПоказатели);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораКонтролируемыхПоказателей", ЭтотОбъект, СтруктураПараметров);
		
		ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды контролируемых показателей'");
		ОбщийСписокКонтролируемыхПоказателей.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
	Иначе
		ПослеВыбораКонтролируемыхПоказателей(Неопределено, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКонтролируемыхПоказателей(ОбщийСписокКонтролируемыхПоказателей, СтруктураПараметров) Экспорт

	Если СтруктураПараметров.ЗапрашиватьВидИзмеряемыхПоказателей Тогда
		Если ОбщийСписокКонтролируемыхПоказателей = Неопределено Тогда
			СтруктураПараметров.Вставить("СоответствиеОР_ИзмеряемыеПоказатели", Неопределено);
		Иначе
			ОтфильтрованноеСоответствиеОР = ОтфильтроватьСоответствиеОРПоМассивуВыбранныхЗначений(СтруктураПараметров.СоответствиеОР_ИзмеряемыеПоказатели, ОбщийСписокКонтролируемыхПоказателей);
			СтруктураПараметров.Вставить("СоответствиеОР_ИзмеряемыеПоказатели", ОтфильтрованноеСоответствиеОР);
		КонецЕсли;
	КонецЕсли;

	Если СтруктураПараметров.ЗапрашиватьВидПараметровНаработки И СтруктураПараметров.СоответствиеОР_ПараметрыНаработки.Количество() > 0 Тогда
		ОбщийСписокПараметровНаработки = ПолучитьСписокРазличныхЗначенийИзСоответствия(СтруктураПараметров.СоответствиеОР_ПараметрыНаработки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПараметровНаработки", ЭтотОбъект, СтруктураПараметров);
		
		ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды параметров наработки'");
		ОбщийСписокПараметровНаработки.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
	Иначе
		ПослеВыбораПараметровНаработки(Неопределено, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПараметровНаработки(ОбщийСписокПараметровНаработки, СтруктураПараметров) Экспорт

	Если СтруктураПараметров.ЗапрашиватьВидПараметровНаработки Тогда
		Если ОбщийСписокПараметровНаработки = Неопределено Тогда
			СтруктураПараметров.Вставить("СоответствиеОР_ПараметрыНаработки", Неопределено);
		Иначе
			ОтфильтрованноеСоответствиеОР = ОтфильтроватьСоответствиеОРПоМассивуВыбранныхЗначений(СтруктураПараметров.СоответствиеОР_ПараметрыНаработки, ОбщийСписокПараметровНаработки);
			СтруктураПараметров.Вставить("СоответствиеОР_ПараметрыНаработки", ОтфильтрованноеСоответствиеОР);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДанныеПоОбъектамРемонтов(СтруктураПараметров);
	
КонецПроцедуры

/////////////////////////////////////////////

&НаКлиенте
Процедура ОбъектыРемонтаТекущееСостояниеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонкиПричина();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПричинаПростояПриИзменении(Элемент)
	УстановитьВидимостьКолонкиПричина();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора(Истина);
	
	ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	ПараметрыВыбора.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущийОбъектремонта = Элемент.ТекущиеДанные.ОбъектРемонта;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.СтруктураИерархии = ТекСтруктураИерархии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектРемонта) Тогда
		ПараметрыФормы = Новый Структура("Ключ, СтруктураИерархии", ТекущиеДанные.ОбъектРемонта, ТекСтруктураИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	ОбъектРемонта = ТекущиеДанные.ОбъектРемонта;
	
	Если ОбъектРемонтаУжеДобавлен(ВыбранноеЗначение) Тогда
	    СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектРемонта) И ОбъектРемонта <> ВыбранноеЗначение Тогда
		УдалитьДанныеСвязанныхТЧ(ОбъектРемонта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	УдалитьДанныеСвязанныхТЧ(ТекущиеДанные.ОбъектРемонта);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_ВводНачальныхДанных");
		ПараметрыФормы.Вставить("ДатаДокумента", Объект.Дата);
		ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормы.Вставить("ОтборПоОдномуНормативу", Истина);  
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбъектыРемонтаОбработкаВыбора",ЭтаФорма);
		
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
		ПараметрыФормы, Элементы.ОбъектыРемонта, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпискиОбъектовРемонта

&НаКлиенте
Процедура СпискиОбъектовРемонтаПриАктивизацииСтроки(Элемент)
	УстановитьОтборНаРегламентныеМероприятия();
КонецПроцедуры

&НаКлиенте
Процедура СпискиОбъектовРемонтаПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	УдалитьДанныеСвязанныхТЧ(ТекущиеДанные.СписокОбъектов);
КонецПроцедуры

&НаКлиенте
Процедура СпискиОбъектовРемонтаСписокОбъектовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СпискиОбъектовРемонта.ТекущиеДанные;
	СписокОбъектов = ТекущиеДанные.СписокОбъектов;
	
	Если СписокРМРемонтаУжеДобавлен(ВыбранноеЗначение) Тогда
	    СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОбъектов) И СписокОбъектов <> ВыбранноеЗначение Тогда
		УдалитьДанныеСвязанныхТЧ(СписокОбъектов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпискиОбъектовРемонтаСписокОбъектовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Текст = "" Тогда 
		ТекущийСписокОбъектов = Элементы.СпискиОбъектовРемонта.ТекущиеДанные.СписокОбъектов;
		УдалитьДанныеСвязанныхТЧ(ТекущийСписокОбъектов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпискиОбъектовРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элементы.СпискиОбъектовРемонта.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.СписокОбъектов) Тогда 
		СтруктураПоиска = Новый Структура("СписокОбъектов", ТекДанные.СписокОбъектов);
		НайденныеСтроки = Объект.СпискиОбъектовРемонта.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данный список объектов уже присутствует в документе!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпискиОбъектовРемонтаСписокОбъектовОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СпискиОбъектовРемонта.ТекущиеДанные;
	УдалитьДанныеСвязанныхТЧ(ТекущиеДанные.СписокОбъектов);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыполненныеРаботы
&НаКлиенте
Процедура ВыполненныеРаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.ОбъектРемонта) Тогда 
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Укажите объект ремонта!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненныеРаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
	    Если ВРУжеДобавлен(Элемент.ТекущиеДанные, Элемент.ТекущиеДанные.ВидРемонтныхРабот) Тогда 
		    Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненныеРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если Не Копирование Тогда
			ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
			ТекДанные.ОбъектРемонта = ТекСтрока.ОбъектРемонта;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегламентныеМероприятия
&НаКлиенте
Процедура РегламентныеМероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Не Копирование Тогда 
		ТекущаяСтрока = Элементы.СпискиОбъектовРемонта.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.СписокОбъектов) Тогда 
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите список объектов ремонта!'"), 20);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если Не Копирование Тогда
			ТекСтрока = Элементы.СпискиОбъектовРемонта.ТекущиеДанные;
			ТекДанные.СписокОбъектов = ТекСтрока.СписокОбъектов;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
		ТекДанные = Элементы.РегламентныеМероприятия.ТекущиеДанные;
		Заполненность = Истина;
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ВидМероприятия) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить ""Вид мероприятия""!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Заполненность = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаПоследнегоМероприятия) Тогда 
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Дата последнего мероприятия""!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Заполненность = Ложь;
		КонецЕсли;
		
		Если Заполненность Тогда 
			СтруктураПоиска = Новый Структура("СписокОбъектов, ВидМероприятия, ДатаПоследнегоМероприятия", ТекДанные.СписокОбъектов, ТекДанные.ВидМероприятия, ТекДанные.ДатаПоследнегоМероприятия);
			НайденныеСтроки = Объект.РегламентныеМероприятия.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Для списка объектов ремонта ""%1"" уже указаны данные по виду мероприятия ""%2""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.СписокОбъектов, ТекДанные.ВидМероприятия);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		УстановитьОтборНаРегламентныеМероприятия();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаработкаОбъектыРемонта
&НаКлиенте
Процедура НаработкаОбъектыРемонтаПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	
	СписокОтбора = ПолучитьПоказателиНаработкиОР(ТекСтрока.ОбъектРемонта);
	
	СтруктураОтбора = Новый Структура("Ссылка", СписокОтбора);
	ПараметрыФормы = Новый Структура("Отбор",СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ПараметрыВыработкиОС.ФормаВыбора", ПараметрыФормы, Элемент, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПриИзменении(Элемент)
	КоличествоСтрокПоказателейЭксплуатации = Объект.ПоказателиОбъектыРемонта.Количество() + Объект.НаработкаОбъектыРемонта.Количество();
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Не Копирование Тогда 
		ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРемонта) Тогда 
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта!'"), 20);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если Не Копирование Тогда
			ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
			ТекДанные.ОбъектРемонта = ТекСтрока.ОбъектРемонта;
			ТекДанные.ДатаРаботыС	= ПолучитьДатуВводаВЭксплуатацию(ТекСтрока.ОбъектРемонта);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ (НоваяСтрока И ОтменаРедактирования) И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаРаботыПо) Тогда
		ПересчитатьИтогиПоНаработке(Объект.НаработкаОбъектыРемонта, Элемент.ТекущиеДанные.ОбъектРемонта);		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		КоличествоСтрокПоказателейЭксплуатации = Объект.ПоказателиОбъектыРемонта.Количество() + Объект.НаработкаОбъектыРемонта.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СписокОтбора = ПолучитьПоказателиНаработкиОР(ТекСтрока.ОбъектРемонта);
	Параметры.Отбор.Вставить("Ссылка", СписокОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
		СписокОтбора = ПолучитьПоказателиНаработкиОР(ТекСтрока.ОбъектРемонта);
		Если СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПослеУдаления(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПересчитатьИтогиПоНаработке(Объект.НаработкаОбъектыРемонта, ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказателиОбъектыРемонта

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ПоказателиОбъектыРемонта.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено И Не ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбора значения контролируемого показателя необходимо указать объект ремонта!'"), 60);
		Возврат;
	КонецЕсли;
	
	СписокПоказателей = ПолучитьИзмеряемыеПоказателиОР(ТекДанные.ОбъектРемонта);
	
	ПараметрыОтбора = Новый Структура("Ссылка", СписокПоказателей);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СписокОтбора = ПолучитьИзмеряемыеПоказателиОР(ТекСтрока.ОбъектРемонта);
	Параметры.Отбор.Вставить("Ссылка", СписокОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
		СписокОтбора = ПолучитьИзмеряемыеПоказателиОР(ТекСтрока.ОбъектРемонта);
		Если СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СписокОтбора = ПолучитьИзмеряемыеПоказателиОР(ТекСтрока.ОбъектРемонта);
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчастиОбъектаРемонта

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Не Копирование Тогда 
		ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРемонта) Тогда 
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта!'"), 20);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если Не Копирование Тогда
			ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
			ТекДанные.ОбъектРемонта = ТекСтрока.ОбъектРемонта;
			
			ТекДанныеЗапчасти = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
			
			ТекДанныеЗапчасти.ДатаЗамены = Объект.Дата;
			ТекДанныеЗапчасти.Количество = 1;
			ТекДанныеЗапчасти.СтатусДвиженияЗЧ = ПредопределенноеЗначение("Перечисление.торо_ВидыДвиженияСерийныхЗЧ.Установка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;

	ТекущаяСтрока.СерииИспользуются = ПолучитьСерииИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.СерийныйНомер = Неопределено;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		ТипНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ТипНоменклатуры");
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РазрешенныеВмдыНоменклатуры = ПолучитьВидыНоменклатурыНеУслуги();
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры", РазрешенныеВмдыНоменклатуры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыНоменклатурыНеУслуги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Форма = ПолучитьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",,Элемент);
		
		ПользовательскийОтбор = Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
		ПользовательскийОтбор.Элементы.Очистить();
		
		ЭлементОтбора = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ВидНоменклатуры");
		ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ПравоеЗначение 	= торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Номенклатура, "ВидНоменклатуры");
		
		Форма.Открыть();
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
	ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказателиОбъектыРемонта

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если Не Копирование Тогда
			ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
			ТекДанные.ОбъектРемонта = ТекСтрока.ОбъектРемонта;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Не Копирование Тогда 
		ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРемонта) Тогда 
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта!'"), 20);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаДатаКонтроляПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПоказателиОбъектыРемонта.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ТекДанные.ОбъектРемонта, ?(ЗначениеЗаполнено(ТекДанные.ДатаКонтроля),ТекДанные.ДатаКонтроля, Объект.Дата), ТекДанные.Показатель);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураВозврата,, ?(СтруктураВозврата.Свойство("ОбъектРемонта"), "ОбъектРемонта", ""));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПоказателиОбъектыРемонта.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ТекДанные.ОбъектРемонта, ?(ЗначениеЗаполнено(ТекДанные.ДатаКонтроля),ТекДанные.ДатаКонтроля, Объект.Дата), ТекДанные.Показатель);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураВозврата,, ?(СтруктураВозврата.Свойство("ОбъектРемонта"), "ОбъектРемонта", ""));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И ОтменаРедактирования Тогда
		КоличествоСтрокПоказателейЭксплуатации = Объект.ПоказателиОбъектыРемонта.Количество() + Объект.НаработкаОбъектыРемонта.Количество();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекСтруктураИерархии);
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.ОбъектыРемонтаОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Элементы.ОбъектыРемонтаПоложение.Видимость = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_ВводНачальныхДанных");
	ПараметрыФормы.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("ОтборПоОдномуНормативу", Истина);
	
	ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
		ПараметрыФормы, Элементы.ОбъектыРемонта, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление поля Характеристика для запчастей.	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиОбъектаРемонтаХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапчастиОбъектаРемонта.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Оформление поля Серия для запчастей.	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиОбъектаРемонтаСерийныйНомер.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапчастиОбъектаРемонта.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ОбъектРемонта, ДатаКонтроля, Показатель = Неопределено)
	
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,Показатель,Истина);
	
	Если МассивПоказателей.Количество() > 0 Тогда
		СтруктураВозврата = МассивПоказателей[0];
	Иначе
		СтруктураВозврата = Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоложенияОР()
	
	МассивОР = Новый Массив;
	Для каждого Стр Из Объект.ОбъектыРемонта Цикл
		МассивОР.Добавить(Стр.ОбъектРемонта);		
	КонецЦикла; 
	
	СтруктураПоложений = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, ТекСтруктураИерархии,,Истина,Истина);
	
	Для каждого Строка из Объект.ОбъектыРемонта Цикл
		Строка.Положение = СтруктураПоложений[Строка.ОбъектРемонта];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоложениеОРВстроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Положение = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(ТекущиеДанные.ОбъектРемонта, ТекСтруктураИерархии,,Истина,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ТекСтруктураИерархии = РезультатЗакрытия;
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуВводаВЭксплуатацию(ОбъектРемонта)
	
	Возврат ОбъектРемонта.ДатаВводаВЭксплуатацию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуВыпуска(ОбъектРемонта)
	
	Возврат ОбъектРемонта.ДатаВыпуска;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНачалоДействияПоказателяНаработки(СтруктураОтбора)

	ПерваяЗапись = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПервых(,СтруктураОтбора);

	Возврат ПерваяЗапись.ВыгрузитьКолонку("Период");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоказателиНаработкиОР(ОР)
	
	НаборЗаписейПН = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
	НаборЗаписейПН.Отбор.ОбъектРемонта.Установить(ОР);
	НаборЗаписейПН.Прочитать();
	СписокОтбора = Новый СписокЗначений;
	Для Каждого ЗаписьНабора Из НаборЗаписейПН Цикл
	    СписокОтбора.Добавить(ЗаписьНабора.Показатель);
	КонецЦикла;
	
	Возврат СписокОтбора;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзмеряемыеПоказателиОР(ОбъектРемонта)
	
	СписокОтбора = Новый СписокЗначений;
	
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта);
	
	Для Каждого СтруктураПоказателя Из МассивПоказателей Цикл
		СписокОтбора.Добавить(СтруктураПоказателя.Показатель);
	КонецЦикла;
	
	Возврат СписокОтбора;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКолонкиПричина()
	
	ВидимостьКолонкиПричина = Ложь;
	Для Каждого Строка ИЗ Объект.ОбъектыРемонта Цикл
		Если ЗначениеЗаполнено(Строка.ТекущееСостояние) И торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Строка.ТекущееСостояние,"ТипЭксплуатации") = ПредопределенноеЗначение("Перечисление.торо_ТипЭксплуатации.Простой") Тогда
			ВидимостьКолонкиПричина = Истина;
			Строка.СостояниеПростой = НЕ ЗначениеЗаполнено(Строка.ПричинаПростоя);
		Иначе
			Строка.СостояниеПростой = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ОбъектыРемонтаПричинаПростоя.Видимость = ВидимостьКолонкиПричина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСерииИспользуются(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
	
КонецФункции

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ЗапчастиОбъектаРемонта,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ЗапчастиОбъектаРемонта,
		Новый Структура("ЗаполнитьПризнакСерииИспользуются",
		Новый Структура("Номенклатура", "СерииИспользуются")));
	
	ПересчитатьИтогиПоНаработке(Объект.НаработкаОбъектыРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные.Номенклатура) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные.Номенклатура, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоОбъектамРемонтов(СтруктураПараметров)

	Если СтруктураПараметров.СоответствиеОР_ВидыРемонта <> Неопределено Тогда
		
		Для каждого КлючИЗначение из СтруктураПараметров.СоответствиеОР_ВидыРемонта Цикл 
			Для каждого ВидРемонта из КлючИЗначение.Значение Цикл
				НайденныеСтроки = Объект.ВыполненныеРаботы.НайтиСтроки(Новый Структура("ОбъектРемонта, ВидРемонтныхРабот", КлючИЗначение.Ключ, ВидРемонта));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НовСтрокаПоказателей = Объект.ВыполненныеРаботы.Добавить();
					НовСтрокаПоказателей.ОбъектРемонта = КлючИЗначение.Ключ;
					НовСтрокаПоказателей.ВидРемонтныхРабот = ВидРемонта;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
	КонецЕсли;

	Если СтруктураПараметров.СоответствиеОР_ИзмеряемыеПоказатели <> Неопределено Тогда
		
		Для каждого КлючИЗначение из СтруктураПараметров.СоответствиеОР_ИзмеряемыеПоказатели Цикл 
			Для каждого ИзмеряемыйПоказатель из КлючИЗначение.Значение Цикл
				НайденныеСтроки = Объект.ПоказателиОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта, Показатель", КлючИЗначение.Ключ, ИзмеряемыйПоказатель));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НовСтрокаПоказателей = Объект.ПоказателиОбъектыРемонта.Добавить();
					НовСтрокаПоказателей.ОбъектРемонта = КлючИЗначение.Ключ;
					НовСтрокаПоказателей.Показатель = ИзмеряемыйПоказатель;
					НовСтрокаПоказателей.ДатаКонтроля = Объект.Дата;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;

	Если СтруктураПараметров.СоответствиеОР_ПараметрыНаработки <> Неопределено Тогда
		
		Для каждого КлючИЗначение из СтруктураПараметров.СоответствиеОР_ПараметрыНаработки Цикл 
			Для каждого ПараметрНаработки из КлючИЗначение.Значение Цикл
				НайденныеСтроки = Объект.НаработкаОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта, Показатель", КлючИЗначение.Ключ, ПараметрНаработки));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НовСтрокаПоказателей = Объект.НаработкаОбъектыРемонта.Добавить();
					НовСтрокаПоказателей.ОбъектРемонта = КлючИЗначение.Ключ;
					НовСтрокаПоказателей.Показатель = ПараметрНаработки;
					НовСтрокаПоказателей.ДатаРаботыПо = Объект.Дата;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗапчастиОбъектовРемонта(СтруктураПараметров.МассивОР);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗапчастиОбъектовРемонта(МассивОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_Запчасти.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_Запчасти.Номенклатура КАК Номенклатура,
	|	торо_Запчасти.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.торо_Запчасти КАК торо_Запчасти
	|ГДЕ
	|	торо_Запчасти.ОбъектРемонта В(&СписокОбъектов)
	|	И торо_Запчасти.ОбъектРемонта.ВестиУчетСерийныхЗапчастей
	|	И торо_Запчасти.Приоритет";
	
	Запрос.УстановитьПараметр("СписокОбъектов", МассивОР);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Инд = 1 по Выборка.Количество цикл
			НовСтрокаЗапчастей = Объект.ЗапчастиОбъектаРемонта.Добавить();
			НовСтрокаЗапчастей.Номенклатура = Выборка.Номенклатура;
			НовСтрокаЗапчастей.ОбъектРемонта = Выборка.ОбъектРемонта;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОбъектРемонтаУжеДобавлен(ОбъектРемонта)
	СтруктураПоиска = Новый Структура("ОбъектРемонта", ОбъектРемонта);
	МассивСтрок = Объект.ОбъектыРемонта.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Объект ремонта %1 уже добавлен в табличную часть!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокРазличныхЗначенийИзСоответствия(СоответствиеОР)
	
	ОбщийСписок = Новый СписокЗначений;
	Для каждого КлючИЗначение из СоответствиеОР Цикл
		Для каждого ЭлементМассива из КлючИЗначение.Значение Цикл
			Если ОбщийСписок.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				ОбщийСписок.Добавить(ЭлементМассива,,Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщийСписок.СортироватьПоЗначению();

	Возврат ОбщийСписок;
	
КонецФункции

&НаКлиенте
Функция ОтфильтроватьСоответствиеОРПоМассивуВыбранныхЗначений(СоответствиеОР, СписокЗначенийСПометками)
	
	ОтфильтрованноеСоответствиеОР = Новый Соответствие;
	
	ВыбранныеЗначения = Новый Массив;
	Для каждого ЭлементСписка из СписокЗначенийСПометками Цикл
		Если ЭлементСписка.Пометка Тогда
			ВыбранныеЗначения.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранныеЗначения.Количество() = 0 Тогда
		Возврат ОтфильтрованноеСоответствиеОР;
	КонецЕсли;
	
	Для каждого КлючИЗначение из СоответствиеОР Цикл
		ОтобранныеЗначения = Новый Массив;
		Для каждого ЭлементМассива из КлючИЗначение.Значение Цикл
			Если ВыбранныеЗначения.Найти(ЭлементМассива) <> Неопределено Тогда
				ОтобранныеЗначения.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтобранныеЗначения.Количество() > 0 Тогда
			ОтфильтрованноеСоответствиеОР.Вставить(КлючИЗначение.Ключ, ОтобранныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтфильтрованноеСоответствиеОР;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоНаработке(НаработкаОбъектыРемонта, ОбъектРемонта = Неопределено)
	
	СоответствиеОР = ЗаполнитьСоответствиеЗначенийНаработкиДляРасчета(НаработкаОбъектыРемонта, ОбъектРемонта);
	
	Для каждого КлючИЗначениеОР из СоответствиеОР Цикл
		СоответствиеПоказателей = КлючИЗначениеОР.Значение;
		Для каждого КлючИЗначениеПоказателя из СоответствиеПоказателей Цикл
			СоответствиеЗначений = КлючИЗначениеПоказателя.Значение;
			НакопленныйИтог = 0;
			
			СписокДат = Новый СписокЗначений;
			Для каждого КлючИЗначение из СоответствиеЗначений Цикл
				СписокДат.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
			
			СписокДат.СортироватьПоЗначению();
			Для каждого ЗначениеДаты из СписокДат Цикл
				СтруктураЗначения = СоответствиеЗначений[ЗначениеДаты.Значение];
				НакопленныйИтог = НакопленныйИтог + СтруктураЗначения.Значение;
				СтруктураЗначения.ЗначениеНакопительныйИтог = НакопленныйИтог;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Строка из НаработкаОбъектыРемонта Цикл
		Если ОбъектРемонта <> Неопределено И Строка.ОбъектРемонта <> ОбъектРемонта Тогда
			Продолжить;	
		КонецЕсли;

		СоответствиеПоказателей = СоответствиеОР.Получить(Строка.ОбъектРемонта);
		Если СоответствиеПоказателей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеЗначений = СоответствиеПоказателей.Получить(Строка.Показатель);
		Если СоответствиеЗначений = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЗначения = СоответствиеЗначений.Получить(Строка.ДатаРаботыПо);
		Если СтруктураЗначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ЗначениеНакопительныйИтог = СтруктураЗначения.ЗначениеНакопительныйИтог;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСоответствиеЗначенийНаработкиДляРасчета(НаработкаОбъектыРемонта, ОбъектРемонта = Неопределено)
	
	СоответствиеОР = Новый Соответствие;
	
	Для каждого Строка из НаработкаОбъектыРемонта Цикл
		Если ОбъектРемонта <> Неопределено И Строка.ОбъектРемонта <> ОбъектРемонта Тогда
			Продолжить;	
		КонецЕсли;
		
		СоответствиеПоказателей = СоответствиеОР.Получить(Строка.ОбъектРемонта);
		Если СоответствиеПоказателей = Неопределено Тогда
			СоответствиеПоказателей = Новый Соответствие;
			СоответствиеОР.Вставить(Строка.ОбъектРемонта, СоответствиеПоказателей);
		КонецЕсли;

		СоответствиеЗначений = СоответствиеПоказателей.Получить(Строка.Показатель);
		Если СоответствиеЗначений = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			СоответствиеПоказателей.Вставить(Строка.Показатель, СоответствиеЗначений);
		КонецЕсли;
		
		СтруктураЗначений = Новый Структура("Значение, ЗначениеНакопительныйИтог", Строка.Значение, 0);
		СоответствиеЗначений.Вставить(Строка.ДатаРаботыПо, СтруктураЗначений);
	КонецЦикла;
	
	Возврат СоответствиеОР;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ЭтоФункциональноеМесто(ОбъектРемонта)
	Возврат ОбъектРемонта.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто;
КонецФункции

&НаКлиенте
Процедура УдалитьДанныеСвязанныхТЧ(ОбъектИлиСписок)
	мСтруктураСвязанныхТЧ = Новый Структура();
	СтруктураПоиска = Новый Структура;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыДокументаВводНачДанных.ПоОбъектуРемонта") Тогда 
		мСтруктураСвязанныхТЧ.Вставить("ВыполненныеРаботы");
		мСтруктураСвязанныхТЧ.Вставить("ПоказателиОбъектыРемонта");
		мСтруктураСвязанныхТЧ.Вставить("НаработкаОбъектыРемонта");
		мСтруктураСвязанныхТЧ.Вставить("ЗапчастиОбъектаРемонта");
		СтруктураПоиска.Вставить("ОбъектРемонта", ОбъектИлиСписок);
	Иначе
		мСтруктураСвязанныхТЧ.Вставить("РегламентныеМероприятия");
		СтруктураПоиска.Вставить("СписокОбъектов", ОбъектИлиСписок);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из мСтруктураСвязанныхТЧ Цикл
		МассивСтрок = Объект[КлючИЗначение.Ключ].НайтиСтроки(СтруктураПоиска);
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			Объект[КлючИЗначение.Ключ].Удалить(ЭлементМассива);
		КонецЦикла; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаРегламентныеМероприятия()
	ТекущиеДанные = Элементы.СпискиОбъектовРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.РегламентныеМероприятия.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектов", ТекущиеДанные.СписокОбъектов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуТипФункциональноеМесто()
	Если ФОИспользоватьФМ Тогда 
		Для Каждого Строка Из Объект.ОбъектыРемонта Цикл
			Строка.ТипФункциональноеМесто = ЭтоФункциональноеМесто(Строка.ОбъектРемонта);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияВидМероприятияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
		
	ПараметрыОтбора = Новый Структура("КлючНазначенияИспользования", "ПредшествующиеРемонты");
	
	СписокВидовРемонта = АвтоПодборВидовРемонтаНаСервере(Элементы.СпискиОбъектовРемонта.ТекущиеДанные.СписокОбъектов);
	
	ПараметрыОтбора.Вставить("СписокОтбора", СписокВидовРемонта);

	ОткрытьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыОтбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияВидМероприятияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = АвтоПодборВидовРемонтаНаСервере(Элементы.СпискиОбъектовРемонта.ТекущиеДанные.СписокОбъектов, Текст);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АвтоПодборВидовРемонтаНаСервере(СписокОбъектов, Текст = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия КАК ВидМероприятия
		|ПОМЕСТИТЬ ВидыРемонтовСписка
		|ИЗ
		|	РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
		|ГДЕ
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов = &Список
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ВидыРемонтов.Ссылка КАК Ссылка
		|ИЗ
		|	ВидыРемонтовСписка КАК ВидыРемонтовСписка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ВидыРемонтов КАК торо_ВидыРемонтов
		|		ПО ВидыРемонтовСписка.ВидМероприятия = торо_ВидыРемонтов.Ссылка
		|ГДЕ
		|	торо_ВидыРемонтов.Наименование ПОДОБНО &СтрокаПоиска";
	
	Запрос.УстановитьПараметр("Список", СписокОбъектов);
		
	Если Не Текст = Неопределено Тогда 
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Текст + "%");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ВидыРемонтов.Наименование ПОДОБНО &СтрокаПоиска", "ИСТИНА"); 
	КонецЕсли;
	
	ВидыРемонта = Запрос.Выполнить().Выбрать();
	
	СписокВозврата = Новый СписокЗначений;
	Пока ВидыРемонта.Следующий() Цикл
		СписокВозврата.Добавить(ВидыРемонта.Ссылка);
	КонецЦикла;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура РегламентныеМероприятияВидМероприятияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ВыбранныйЭлемент = АвтоПодборВидовРемонтаНаСервере(Элементы.СпискиОбъектовРемонта.ТекущиеДанные.СписокОбъектов, Текст);
	Если Не ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПриИзменении(Элемент)
	КоличествоСтрокПоказателейЭксплуатации = Объект.ПоказателиОбъектыРемонта.Количество() + Объект.НаработкаОбъектыРемонта.Количество();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораНоменклатуры()
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ЗапчастиОбъектаРемонта.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
		Элементы.ЗапчастиОбъектаРемонта.СписокВыбора.ЗагрузитьЗначения(Новый Массив());
		Возврат;
	КонецЕсли;
	
	МассивТиповЗапчастей = Новый Массив();
	МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТиповЗапчастей.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
    ОбъектРемонта = ТекущиеДанные.ОбъектРемонта;
	МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);

	ПараметрыВыбораМассив = Новый Массив;
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТиповЗапчастей)));
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивЗапчастей)));
	Элементы.ЗапчастиОбъектаРемонтаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	Элементы.ЗапчастиОбъектаРемонтаНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗапчастей);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗапчастейДляОР(ОбъектРемонта)
	Запрос = новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_Запчасти.Номенклатура
		|ИЗ
		|	РегистрСведений.торо_Запчасти КАК торо_Запчасти
		|ГДЕ
		|	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтныеГруппыЗапчасти.Номенклатура
		|ИЗ
		|	Справочник.торо_ТиповыеОР.Запчасти КАК торо_РемонтныеГруппыЗапчасти
		|ГДЕ
		|	торо_РемонтныеГруппыЗапчасти.Ссылка = &РемонтнаяГруппа";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("РемонтнаяГруппа", ОбъектРемонта.ТиповойОР);
	Выборка = Запрос.Выполнить().Выбрать();

	МассивЗапчастей = Новый Массив;
	Пока Выборка.Следующий() Цикл;
		МассивЗапчастей.Добавить(Выборка.Номенклатура);
	КонецЦикла;

	Возврат МассивЗапчастей;
КонецФункции

&НаКлиенте
Функция СписокРМРемонтаУжеДобавлен(СписокРМ)
	СтруктураПоиска = Новый Структура("СписокОбъектов", СписокРМ);
	МассивСтрок = Объект.СпискиОбъектовРемонта.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Список объектов %1 уже добавлен в табличную часть!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СписокРМ);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПолучитьСписокРемонтовЦепочекОР(ОбъектРемонта)
	
	МассивВРЦепочек = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта
	               	|ИЗ
	               	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	               	|		ПО торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = торо_РемонтныеЦиклыОборудования.ВидЦепочки
	               	|ГДЕ
	               	|	(торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов = &ОбъектРемонта
	               	|			ИЛИ торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов = &ТиповойОбъектРемонта)";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ТиповойОбъектРемонта", ОбъектРемонта.ТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат МассивВРЦепочек;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВРЦепочек.Добавить(Выборка.ВидРемонта);
	КонецЦикла;
	
	Возврат МассивВРЦепочек;
	
КонецФункции

&НаКлиенте
Функция ВРУжеДобавлен(ТекущиеДанные, ВидРемонта)
	
	СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидРемонтныхРабот, ДатаОкончанияРемонта", ТекущиеДанные.ОбъектРемонта, ВидРемонта, ТекущиеДанные.ДатаОкончанияРемонта);

	МассивСтрок = Объект.ВыполненныеРаботы.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 1
		Или МассивСтрок.Количество() = 1 И Не МассивСтрок[0].ПолучитьИдентификатор() = ТекущиеДанные.ПолучитьИдентификатор() Тогда
		ШаблонСообщения = НСтр("ru = 'Ремонт %1 на %2 уже добавлен в табличную часть!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВидРемонта, ТекущиеДанные.ДатаОкончанияРемонта);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыВыбораВР()
	
	МассивЭлементов = СписокОтбораВидовТехническихРемонтов.ВыгрузитьЗначения();
	Если ФОИспользоватьПланированиеПоЖесткимРемЦиклам Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, СписокОтбораВидовРемонтовЦепочек.ВыгрузитьЗначения(), Истина);
	КонецЕсли;
	
	ПараметрыВыбораМассив = Новый Массив();
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивЭлементов)));
	Элементы.ВыполненныеРаботыВидРемонтныхРабот.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	Элементы.ВыполненныеРаботыВидРемонтныхРабот.СписокВыбора.ЗагрузитьЗначения(МассивЭлементов);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеПоказателей(СписокОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НаличиеНормативовОбъектовРемонта.ЕстьИзмеряемыеПоказатели КАК ЕстьИзмеряемыеПоказатели,
	|	торо_НаличиеНормативовОбъектовРемонта.ЕстьПараметрыНаработки КАК ЕстьПараметрыНаработки,
	|	торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонты КАК ЕстьНормативныеРемонты,
	|	торо_НаличиеНормативовОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта
	|ИЗ
	|	РегистрСведений.торо_НаличиеНормативовОбъектовРемонта КАК торо_НаличиеНормативовОбъектовРемонта
	|ГДЕ
	|	торо_НаличиеНормативовОбъектовРемонта.ОбъектРемонта В(&СписокОР)
	|	И (НЕ торо_НаличиеНормативовОбъектовРемонта.ЕстьИзмеряемыеПоказатели = ИСТИНА
	|	ИЛИ НЕ торо_НаличиеНормативовОбъектовРемонта.ЕстьПараметрыНаработки = ИСТИНА
	|	ИЛИ НЕ торо_НаличиеНормативовОбъектовРемонта.ЕстьНормативныеРемонты = ИСТИНА)";
	Запрос.УстановитьПараметр("СписокОР", СписокОР);
	
	Если ТипЗнч(СписокОР) <> Тип("Массив") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ОбъектРемонта В(&СписокОР)","ОбъектРемонта  = &СписокОР");	
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл 
		
		ТекстСообщения = "Для выбранных объектов ремонта не заданы ";
		ЭтоПервый = Истина;
		
		Если Не Выборка.ЕстьНормативныеРемонты Тогда
			ТекстСообщения = ТекстСообщения + "нормативные ремонты";
			ЭтоПервый = Ложь;
		КонецЕсли;
		
		Если Не Выборка.ЕстьПараметрыНаработки Тогда
			ТекстСообщения = ТекстСообщения + ?(ЭтоПервый, "параметры наработки", ", параметры наработки");
			ЭтоПервый = Ложь;
		КонецЕсли;
		
		Если Не Выборка.ЕстьИзмеряемыеПоказатели Тогда
			ТекстСообщения = ТекстСообщения + ?(ЭтоПервый, "измеряемые показатели", ", измеряемые показатели");		
		КонецЕсли;
			
		НайденныеСтроки = Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Выборка.ОбъектРемонта));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ОбъектыРемонта["+ Объект.ОбъектыРемонта.Индекс(НайденныеСтроки[0])+"].ОбъектРемонта");
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти