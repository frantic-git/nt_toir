
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтаФорма.Параметры.Свойство("Основание") И (ТипЗнч(ЭтаФорма.Параметры.Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(ЭтаФорма.Параметры.Основание) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")) Тогда
		Объект.ДокументОснование = ЭтаФорма.Параметры.Основание;
		Для Каждого Строка ИЗ Объект.Товары Цикл
			НС = ЦеныОснования.Добавить(); 
			ЗаполнитьЗначенияСвойств(НС, Строка);
		КонецЦикла;
	КонецЕсли;
	
	ИницализироватьВыбранныеЦены();
	ЗаполнитьДокумент();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВыбранныеЦеныИзменены И ТаблицаЦен.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru='Состав цен изменился. Необходимо перейти к установке цен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоместитьВидыЦенВТабличнуюЧасть(ТекущийОбъект);
		ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	
	// проверка заполнения характеристик
	ШаблонСообщения = НСтр("ru='В строке %1 не заполнено поле ""%2""'");
	НомерСтроки = 1;
	Для каждого СтрокаТалицы из ТаблицаЦен Цикл
		Если Не ЗначениеЗаполнено(СтрокаТалицы.Номенклатура) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомерСтроки, НСтр("ru='Номенклатура'"));
			ПутьКПолю = "ТаблицаЦен["+(НомерСтроки-1)+"].Номенклатура";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ПутьКПолю,,Отказ);
		ИначеЕсли СтрокаТалицы.ХарактеристикиИспользуются И Не ЗначениеЗаполнено(СтрокаТалицы.Характеристика) И ФОИспользоватьХарактеристикиНоменклатуры Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомерСтроки, НСтр("ru='Характеристика'"));
			ПутьКПолю = "ТаблицаЦен["+(НомерСтроки-1)+"].Характеристика";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ПутьКПолю,,Отказ);
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// проверка на дубли
	ТабТоваров = ТаблицаЦен.Выгрузить();
	ТабТоваровДляСворачивания = ТаблицаЦен.Выгрузить(, "Номенклатура, Характеристика");
	ТабТоваровДляСворачивания.Свернуть("Номенклатура, Характеристика");
	Если ТабТоваровДляСворачивания.Количество() <> ТабТоваров.Количество() Тогда
		Отказ = Истина;
		Для каждого Товар Из ТабТоваровДляСворачивания Цикл
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", Товар.Номенклатура, Товар.Характеристика);	
			Массив = ТабТоваров.НайтиСтроки(СтруктураОтбора);
			Если Массив.Количество() <> 1 Тогда
				Стр = "";
				Для каждого Элемент Из Массив Цикл
					НомерСтроки = ТабТоваров.Индекс(Элемент)+1;
					Стр = Стр + НомерСтроки  + ", ";
				КонецЦикла; 
				Стр = Лев(Стр, СтрДлина(Стр)-2);
				Если ФОИспользоватьХарактеристикиНоменклатуры Тогда
					ШаблонСообщения = НСтр("ru = 'Для номенклатуры ""%1"" с характеристикой ""%2"" имеются дубли в строках: %3'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Товар.Номенклатура, Товар.Характеристика, Стр);
				Иначе
					ШаблонСообщения = НСтр("ru = 'Для номенклатуры ""%1"" имеются дубли в строках: %2'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Товар.Номенклатура, Стр);
				КонецЕсли; 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Модифицированность = Истина;
	
	Если ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
		
	Отказ = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество", 					 Ложь);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Склад", ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад"));

	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если Не СтрокаТаблицы.Выбрана Тогда
			СтрокаТаблицы.Выбрана = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если СтрокаТаблицы.Выбрана Тогда
			СтрокаТаблицы.Выбрана = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеЦеныИзменены = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУстановкеЦен(Команда)
	
	ОчиститьСообщения();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУстановкаЦен;
	ПриПереходеКУстановкеЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРедактированиюСпискаВидовЦен(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаВидыЦен;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаУстановкаЦен Тогда
		ПриПереходеКУстановкеЦен();
		ВыбранныеЦеныИзменены = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЦеныВыбранаПриИзменении(Элемент)
	
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНоменклатура

&НаКлиенте
Процедура ТаблицаЦенНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаЦен.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЦенХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЦен.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЦенПриИзменении(Элемент)
	ПересчитатьНомераСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ПересчитатьНомераСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЦенПослеУдаления(Элемент)
	ПересчитатьНомераСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЦенОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	ПересчитатьНомераСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЦенХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаЦен.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЦенХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаЦен.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЦенХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЦен.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЦенХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЦен.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЦен.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Истина);

КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)

	Тз = ПолучитьИзВременногоХранилища(Адрес);
	МассивВыбранныеЦены = ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма);
	Для каждого текСтрока из Тз Цикл
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика",текСтрока.Номенклатура, текСтрока.Характеристика);
		СтрокиСНоменклатурой = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если Не СтрокиСНоменклатурой.Количество() Тогда
			Строка = ТаблицаЦен.Добавить();
			Строка.Номенклатура 				= текСтрока.Номенклатура;
			Строка.Характеристика 				= текСтрока.Характеристика;
			Строка.ХарактеристикиИспользуются 	= текСтрока.ХарактеристикиИспользуются;
			Для каждого ВидЦены из МассивВыбранныеЦены Цикл
				ИмяКолонки = "ЕдиницаИзмерения" + ВидЦены.ИмяКолонки;
				Строка[ИмяКолонки] = текСтрока.Упаковка;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	ПересчитатьНомераСтрок();
КонецПроцедуры

&НаСервере
Процедура ИницализироватьВыбранныеЦены()
	
	ВыбранныеЦены.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабДок.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ТабДок
	|ИЗ
	|	&ТабДок КАК ТабДок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка КАК Ссылка,
	|	ВидыЦен.ПометкаУдаления КАК ПометкаУдаления,
	|	ВидыЦен.ВалютаЦены КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТабДок.ВидЦены ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Выбрана
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДок КАК ТабДок
	|		ПО ВидыЦен.Ссылка = ТабДок.ВидЦены
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.Наименование";
	
	Запрос.УстановитьПараметр("ТабДок", Объект.ВидыЦен.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВыбранныеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИмяКолонки = "_ВидЦены" + СтрЗаменить(Выборка.Ссылка.УникальныйИдентификатор(), "-", "");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент()
	
	ОдинВидЦены = ВыбранныеЦены.Количество() = 1; 
	
	Если Объект.ВидыЦен.Количество() > 0 ИЛИ Объект.Товары.Количество() > 0 ИЛИ ОдинВидЦены Тогда
		
		Если ОдинВидЦены Тогда
			Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
				ТекСтрока.Выбрана = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Если ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма).Количество() > 0 Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
		КонецЕсли;
		
		ПостроитьТаблицуЦен();
		ЗагрузитьТабличнуюЧастьТовары();
		
		Если ОдинВидЦены Тогда 
			ПоместитьЦеныВТабличнуюЧасть(Объект);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПереформироватьТаблицуЦен() 
	
	ПостроитьТаблицуЦен();
	ЗагрузитьТабличнуюЧастьТовары();
	ПоместитьЦеныВТабличнуюЧасть(Объект);
	
КонецФункции

&НаСервере
Процедура ПостроитьТаблицуЦен()
	
	ИмяТаблицы = "ТаблицаЦен";
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	
	РеквизитыТаблицыЦен = ПолучитьРеквизиты(ИмяТаблицы);
	Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		Если СтрНайти(Реквизит.Имя, "ВидЦены") > 0  Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить(ИмяТаблицы + "." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ТипЗнчЦена = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ТипЗнчЕдИзм = Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры");
	ТипЗнчВалюта = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	
	Для каждого ВидЦены из ВыбранныеЦены Цикл
		Если ВидЦены.Выбрана Тогда
			ИмяКолонки = ВидЦены.ИмяКолонки;
			ИмяКолонкиЕдИзм = "ЕдиницаИзмерения" + ИмяКолонки;
			
			ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(ИмяКолонки, ТипЗнчЦена, ИмяТаблицы, НСтр("ru='Цена'"), Истина));
			ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(ИмяКолонкиЕдИзм, ТипЗнчЕдИзм, ИмяТаблицы, НСтр("ru='Ед. изм.'"), Истина));
		КонецЕсли;
	КонецЦикла;
	
	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекЭлемент Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, "ВидЦены") > 0 Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	УсловныеОформления = Новый Массив();
	Для Каждого Оформление Из УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;
	
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		
		Если ВидЦены.Выбрана Тогда
			
			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;
			
			НоваяГруппа = ДобавитьГруппуФормы("Группа" + ИмяКолонки, Строка(ВидЦены.Ссылка) + ", " + Строка(ВидЦены.Валюта), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная, Неопределено);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Заголовок", 			НСтр("ru='Цена'"));
			СтруктураПараметров.Вставить("ШиринаПоля",			12);
			СтруктураПараметров.Вставить("ЦветФона",				ЦветФона);
			СтруктураПараметров.Вставить("ЦветФонаЗаголовка",	ЦветЗаголовка);
			СтруктураПараметров.Вставить("Родитель",				НоваяГруппа);
			
			ДобавитьПолеФормы(ИмяКолонки, СтруктураПараметров);
			
			НоваяГруппаУпаковка = ДобавитьГруппуФормы("ГруппаЕдиницаИзмерения" + ИмяКолонки, НСтр("ru='Ед. изм.'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
			
			НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы." + ИмяТаблицы + ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.Очищать);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НоваяСвязь);
			НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Упаковка'"));
			СтруктураПараметров.Вставить("ШиринаПоля",             12);
			СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
			СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
			СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
			СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
			СтруктураПараметров.Вставить("ОтображатьВШапке",       Ложь);
			СтруктураПараметров.Вставить("ТолькоПросмотрПоля", 	   Истина);
			
			НовоеПоле = ДобавитьПолеФормы("ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
			НовоеПоле.БыстрыйВыбор = Истина;
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
			СтруктураПараметров.Вставить("ШиринаПоля",             8);
			СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
			СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
			СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
			СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
			СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
			
			ДобавитьПолеФормы("НоменклатураЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
			
			// Чтобы не отображалась единица измерения в Товарах, когда заполнена Упаковка.
			Элемент = УсловноеОформление.Элементы.Добавить();
			Элемент.Представление = "СозданоПрограммно";
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НоменклатураЕдиницаИзмерения" + ИмяКолонки);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ЕдиницаИзмерения" + ИмяКолонки);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТабличнуюЧастьТовары()
	
	ТаблицаЦен.Очистить();
	МассивВыбранныхЦен = ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.Характеристика КАК Характеристика,
	|	УстановкаЦенНоменклатурыТовары.ВидЦены КАК ВидЦены,
	|	УстановкаЦенНоменклатурыТовары.Цена КАК Цена,
	|	УстановкаЦенНоменклатурыТовары.Валюта КАК Валюта,
	|	УстановкаЦенНоменклатурыТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УстановкаЦенНоменклатурыТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК УстановкаЦенНоменклатурыТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.ВидЦены КАК ВидЦены,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.Валюта КАК Валюта,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	РезЗапроса = Запрос.Выполнить();
	ВыборкаНоменкалатуры = РезЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	НомерСтроки = 0; 
	
	Пока ВыборкаНоменкалатуры.Следующий() Цикл
		ВыборкаХарактеристики = ВыборкаНоменкалатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
		Пока ВыборкаХарактеристики.Следующий() Цикл
			СтрокаТаблицы = ТаблицаЦен.Добавить();
			СтрокаТаблицы.Номенклатура = ВыборкаХарактеристики.Номенклатура;
			СтрокаТаблицы.Характеристика = ВыборкаХарактеристики.Характеристика;
			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы.НомерСтроки = НомерСтроки;

			ВыборкаДеталей = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.Прямой);
			
			Пока ВыборкаДеталей.Следующий() Цикл
				СтрокаИмяКолонкиВидЦены = Неопределено;
				Для каждого СтрокаВидЦены из МассивВыбранныхЦен Цикл
					Если ВыборкаДеталей.ВидЦены = СтрокаВидЦены.Ссылка Тогда
						СтрокаИмяКолонкиВидЦены = СтрокаВидЦены;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				
				Если СтрокаИмяКолонкиВидЦены <> Неопределено Тогда
					ИмяКолонки = СтрокаИмяКолонкиВидЦены.ИмяКолонки;
					ИмяКолонкиЕдИзм = "ЕдиницаИзмерения" + ИмяКолонки;
					СтрокаТаблицы[ИмяКолонки] = ВыборкаДеталей.Цена;
					СтрокаТаблицы[ИмяКолонкиЕдИзм] = ВыборкаДеталей.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект)   
	
	ТекущийОбъект.Товары.Очистить();	
	МассивВыбранныхЦен = ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма);
	
	ЗапросКурсовВалют = Новый Запрос();
	ЗапросКурсовВалют.УстановитьПараметр("Дата", ТекущийОбъект.Дата);
	ЗапросКурсовВалют.Текст = "ВЫБРАТЬ
	                          |	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	                          |	КурсыВалютСрезПоследних.Курс КАК Курс,
	                          |	КурсыВалютСрезПоследних.Кратность КАК Кратность
	                          |ИЗ
	                          |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних";
	
	Результат = ЗапросКурсовВалют.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТабКурсы = Результат.Выгрузить();
	
	Для каждого СтрокаЦен из ТаблицаЦен Цикл
		
		Для Каждого ВидЦены Из МассивВыбранныхЦен Цикл
			ИмяКолонки = ВидЦены.ИмяКолонки;
			ЕстьКолонкаЦены = СтрокаЦен.Свойство(ИмяКолонки);
			
			НоваяСтрока                = ТекущийОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
			НоваяСтрока.ВидЦены = ВидЦены.Ссылка;
			НоваяСтрока.Валюта = ВидЦены.Валюта;
			
			НоваяВалютаРС = ТабКурсы.Найти(ВидЦены.Валюта, "Валюта");
			НоваяВалютаКурс = ?(НоваяВалютаРС <> Неопределено, НоваяВалютаРС.Курс, 1);			
			НоваяВалютаКратность = ?(НоваяВалютаРС <> Неопределено, НоваяВалютаРС.Кратность, 1);
			
			ПараметрыКурсаНовойВалюты = Новый Структура;
			ПараметрыКурсаНовойВалюты.Вставить("Валюта", ВидЦены.Валюта);
			ПараметрыКурсаНовойВалюты.Вставить("Курс", НоваяВалютаКурс);
			ПараметрыКурсаНовойВалюты.Вставить("Кратность", НоваяВалютаКратность); 
			
			Если ЕстьКолонкаЦены Тогда
				Цена = СтрокаЦен[ИмяКолонки];
				
				Если ЦеныОснования.Количество() Тогда
					ЦенаОснования = ЦеныОснования.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаЦен.Номенклатура, СтрокаЦен.Характеристика))[0];
					
					ВалютаОснования = ЦенаОснования.Валюта;
					
					ВалютаОснованияРС = ТабКурсы.Найти(ВалютаОснования, "Валюта");
					ВалютаОснованияКурс = ?(ВалютаОснованияРС <> Неопределено, ВалютаОснованияРС.Курс, 1);			
					ВалютаОснованияКратность = ?(ВалютаОснованияРС <> Неопределено, ВалютаОснованияРС.Кратность, 1);
					
					ПараметрыКурсаВалютыОснования = Новый Структура;
					ПараметрыКурсаВалютыОснования.Вставить("Валюта", ВалютаОснования);
					ПараметрыКурсаВалютыОснования.Вставить("Курс", ВалютаОснованияКурс);
					ПараметрыКурсаВалютыОснования.Вставить("Кратность", ВалютаОснованияКратность);

					Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ЦенаОснования.Цена, ПараметрыКурсаВалютыОснования, ПараметрыКурсаНовойВалюты);
					
					
					Если ВидЦены.Ссылка.ЦенаВключаетНДС = Объект.ДокументОснование.ЦенаВключаетНДС Тогда
						СтрокаЦен[ИмяКолонки] = Цена;
					Иначе
						Ставка = 0;
						СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Цена", СтрокаЦен.Номенклатура, СтрокаЦен.Характеристика, Цена);
						СтрокаНоменклатуры = Объект.ДокументОснование.Товары.НайтиСтроки(СтруктураОтбора);
						Если СтрокаНоменклатуры.Количество() > 0 Тогда
							Ставка = СтрокаНоменклатуры[0].СтавкаНДС.Ссылка.Ставка/100;
						КонецЕсли;
						
						Если ВидЦены.Ссылка.ЦенаВключаетНДС И Не Объект.ДокументОснование.ЦенаВключаетНДС Тогда
							СтрокаЦен[ИмяКолонки] = Цена * (1 + Ставка);
						ИначеЕсли Не ВидЦены.Ссылка.ЦенаВключаетНДС И Объект.ДокументОснование.ЦенаВключаетНДС Тогда
							СтрокаЦен[ИмяКолонки] = Цена / (1 + Ставка);
						КонецЕсли;
					КонецЕсли;
					
					Цена = СтрокаЦен[ИмяКолонки];
					
				КонецЕсли;
				
				НоваяСтрока.Цена = Цена;
				
				ИмяКолонкиЕдИзм = "ЕдиницаИзмерения" + ИмяКолонки;
				НоваяСтрока.ЕдиницаИзмерения = СтрокаЦен[ИмяКолонкиЕдИзм];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВидыЦенВТабличнуюЧасть(ТекущийОбъект)
	
	ТекущийОбъект.ВидыЦен.Очистить();
	
	МассивВыбранныхВидовЦен = ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма);
	Для Каждого СтрокаВидЦены Из МассивВыбранныхВидовЦен Цикл
		НоваяСтрока = ТекущийОбъект.ВидыЦен.Добавить();
		НоваяСтрока.ВидЦены = СтрокаВидЦены.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереходеКУстановкеЦен()
	
	Если НЕ ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма).Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru='Для перехода к установке цен, необходимо выбрать один или несколько видов цен'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ВыбранныеЦены");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен;
		
	Иначе
		
		Если ВыбранныеЦеныИзменены Тогда
			ВыбранныеЦеныИзменены = Ложь;
			ПереформироватьТаблицуЦен();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////
// мелкие

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()

	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
												
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ТаблицаЦен, ПараметрыЗаполненияРеквизитов);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранныеСтрокиТаблицыВидовЦен(Форма) 
	
	ВидыЦен = Новый Массив();
	
	Для Каждого ТекСтрока Из Форма.ВыбранныеЦены Цикл
		Если ТекСтрока.Выбрана Тогда
			ВидыЦен.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

&НаСервере
Функция ДобавитьПолеФормы(Имя, ДополнительныеПараметры)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Заголовок",              Неопределено);
	СтруктураПараметров.Вставить("ОбработчикПриИзменении", "");
	СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "");
	СтруктураПараметров.Вставить("ШиринаПоля",             0);
	СтруктураПараметров.Вставить("ЦветФона",               Неопределено);
	СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      Неопределено);
	СтруктураПараметров.Вставить("Родитель",               Неопределено);
	СтруктураПараметров.Вставить("КартинкаШапки",          Неопределено);
	СтруктураПараметров.Вставить("ПутьКДанным",            Неопределено);
	СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Ложь);
	СтруктураПараметров.Вставить("СвязиПараметровВыбора",  Неопределено);
	СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДополнительныеПараметры);
	
	НовоеПоле                     = Элементы.Добавить("ТаблицаЦен" + Имя, Тип("ПолеФормы"), ?(СтруктураПараметров.Родитель = Неопределено, Элементы.ТаблицаЦен, СтруктураПараметров.Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(СтруктураПараметров.ПутьКДанным), СтруктураПараметров.ПутьКДанным, "ТаблицаЦен." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(СтруктураПараметров.Заголовок), СтруктураПараметров.Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = СтруктураПараметров.ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = СтруктураПараметров.ШиринаПоля;
	НовоеПоле.ОтображатьВШапке    = СтруктураПараметров.ОтображатьВШапке;
	
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	
	Если СтруктураПараметров.СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СтруктураПараметров.СвязиПараметровВыбора;
	КонецЕсли;
	
	Если СтруктураПараметров.ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = СтруктураПараметров.ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если СтруктураПараметров.ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = СтруктураПараметров.ЦветФона;
	КонецЕсли;
		
	Если СтруктураПараметров.КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = СтруктураПараметров.КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", СтруктураПараметров.ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", СтруктураПараметров.ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

&НаСервере
Функция ДобавитьГруппуФормы(Имя, Заголовок, ОтображатьВШапке, КартинкаШапки, ГруппировкаКолонок, Родитель)
	
	НоваяГруппа                  = Элементы.Добавить("ТаблицаЦен" + Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Элементы.ТаблицаЦен, Родитель));
	НоваяГруппа.Заголовок        = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура ПересчитатьНомераСтрок()
	ТекущийНомерСтроки = 1;
	Для Каждого Значение Из ТаблицаЦен Цикл
		Значение.НомерСтроки = ТекущийНомерСтроки;
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
