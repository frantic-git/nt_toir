#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Функция предназначена для обновления доступности документа для редактирования.
//
// Параметры:
//		Ссылка - Ссылка - ссылка на документ, 
//		СвязанныеРемонты	- ТаблицаЗначений - план ремонтов документа.
//
// Возвращаемое значение: 
//		Массив - массив доступных для корректировки строк.
Функция ОбновитьДоступностьДляРедактирования(Ссылка, СвязанныеРемонты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаID.ID КАК ID
	               |ПОМЕСТИТЬ ТаблицаID
	               |ИЗ
	               |	&ТаблицаID КАК ТаблицаID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_СоответствиеКорректировокДокументамППР.Корректировка КАК Корректировка
	               |ПОМЕСТИТЬ торо_СоответствиеКорректировокДокументамППР
	               |ИЗ
	               |	РегистрСведений.торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР
	               |ГДЕ
	               |	торо_СоответствиеКорректировокДокументамППР.Корректируемый = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID КАК ID
	               |ПОМЕСТИТЬ РемонтыКорректировок
	               |ИЗ
	               |	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ПланГрафикРемонтаПланРемонтов
	               |ГДЕ
	               |	торо_ПланГрафикРемонтаПланРемонтов.Ссылка В
	               |			(ВЫБРАТЬ
	               |				торо_СоответствиеКорректировокДокументамППР.Корректировка
	               |			ИЗ
	               |				торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаID.ID КАК ID
	               |ПОМЕСТИТЬ РемонтыСКорректировкой
	               |ИЗ
	               |	ТаблицаID КАК ТаблицаID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыКорректировок КАК РемонтыКорректировок
	               |		ПО ТаблицаID.ID = РемонтыКорректировок.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ЗавершенныеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					ТаблицаID.ID КАК ID
	               |				ИЗ
	               |					ТаблицаID КАК ТаблицаID)) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаID.ID КАК ID,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА РемонтыСКорректировкой.ID ЕСТЬ NULL
	               |					И ЗавершенныеРемонты.ID ЕСТЬ NULL
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК ДоступенДляРедактирования
	               |ИЗ
	               |	ТаблицаID КАК ТаблицаID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РемонтыСКорректировкой КАК РемонтыСКорректировкой
	               |		ПО (РемонтыСКорректировкой.ID = ТаблицаID.ID)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗавершенныеРемонты КАК ЗавершенныеРемонты
	               |		ПО (ЗавершенныеРемонты.ID = ТаблицаID.ID)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаID.ID";
	
	Запрос.УстановитьПараметр("ТаблицаID", СвязанныеРемонты.Скопировать(,"ID"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Ссылка.Дата), Ссылка.Дата, ТекущаяДата()));	
	МассивДоступныхДляКорректировкиСтрок = Запрос.Выполнить().Выгрузить();
	
	Возврат МассивДоступныхДляКорректировкиСтрок;
	
КонецФункции

// Заполняет список команд печати.
//
// Параметры:
//		КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Остановочный ремонт
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_ОстановочныеРемонты";
	КомандаПечати.Идентификатор = "ОстановочныйРемонт";
	КомандаПечати.Представление = НСтр("ru = 'Остановочный ремонт'");
	КомандаПечати.Обработчик = "торо_Печать.ОбработатьКомандуПечатиОстановочныеРемонта";
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Формирует печатные формы
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОстановочныйРемонт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
															"ОстановочныйРемонт", 
															"Остановочный ремонт", 
															ПечатьОстановочные(МассивОбъектов, ПараметрыПечати),,
															"Документ.торо_ОстановочныеРемонты.ПФ_MXL_ОстановочныйРемонт");
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьОстановочные(МассивОбъектов, ПараметрыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.торо_ОстановочныеРемонты.ПФ_MXL_ОстановочныйРемонт"); 
	
	СоответствиеВидовРемонтаПредставлениям    = Новый Соответствие;
	СоответствиеОбъектовРемонтаПредставлениям = Новый Соответствие;
	
	Для Каждого ОстановочныйРемонт Из МассивОбъектов Цикл
				
		ДатаНачала = ОстановочныйРемонт.ДатаНачалаРемонта;
		НомерКолонкиПоПорядку = 1;
		
		СписокПодчиненных = Неопределено;
		
		Если ПараметрыПечати.Свойство("Параметры") Тогда
			СтруктураПараметровПечати = ПараметрыПечати.Параметры;
			СписокПодчиненных = СтруктураПараметровПечати.СписокПодчиненных;
		Иначе
			СтруктураПараметровПечати = торо_ПечатьСервер.СтруктураПараметровОстановочныеРемонты(ОстановочныйРемонт);
		КонецЕсли;
		
		ПериодКон=СтруктураПараметровПечати.ДатаКонца;
		ПериодНач=СтруктураПараметровПечати.ДатаНачала;
		
		ИнтервалРазбиения = торо_ПечатьСервер.ПолучитьИнтервалРазбиения(СтруктураПараметровПечати.ИнтервалРазбиения);
						
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, ОстановочныйРемонт, "ОбъектРемонта, ВидРемонта, Номер, Подразделение");
		
		ОбластьЗаголовок.Параметры["ДатаНачалаРемонта"]    = Формат(ОстановочныйРемонт.ДатаНачалаРемонта   , "ДФ=dd.MM.yyyy");
		ОбластьЗаголовок.Параметры["ДатаОкончанияРемонта"] = Формат(ОстановочныйРемонт.ДатаОкончанияРемонта, "ДФ=dd.MM.yyyy");
		
		ОбластьЗаголовок.Параметры.Организация = торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(ОстановочныйРемонт.Организация);
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Область  = Макет.ПолучитьОбласть("Шапка");
			
		ТабДок.Вывести(Область);
		ШиринаТаблицы = Область.ШиринаТаблицы;
		МассивВременныхИнтервалов = Новый Массив;
		торо_ПечатьСервер.ЗаполнитьИнтервалы(ПериодНач,ПериодКон,ИнтервалРазбиения,ТабДок,Макет,МассивВременныхИнтервалов,ШиринаТаблицы);
										
		Запрос = Новый Запрос;
		
		# Область ТекстЗапроса
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта.ТехНомер КАК ОбъектРемонтаТехНомер,
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта.ЗаводскойНомер КАК ОбъектРемонтаЗаводскойНомер,
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта.ИнвентарныйНомер КАК ОбъектРемонтаИнвентарныйНомер,
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.ВидРемонта КАК ВидРемонта,
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта
		|ПОМЕСТИТЬ СвязанныеРемонты
		|ИЗ
		|	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
		|ГДЕ
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта,
		|	ВидРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта КАК СвязанныйОбъектРемонта,
		|	торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаЗависимогоОбъекта КАК ВидРемонтаЗависимогоОбъекта
		|ПОМЕСТИТЬ ЗависимоеОборудование
		|ИЗ
		|	РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
		|ГДЕ
		|	торо_РемонтыОсновногоЗависимогоОборудования.ОсновнойОбъектРемонта = &ОсновнойОбъектРемонта
		|	И торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СвязанныеРемонты.ОбъектРемонта КАК ОбъектРемонта
		|			ИЗ
		|				СвязанныеРемонты КАК СвязанныеРемонты
		|			ГДЕ
		|				НЕ СвязанныеРемонты.ОбъектРемонта = &ОсновнойОбъектРемонта)
		|	И (торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаОсновногоОбъекта = &ВидРемонта
		|			ИЛИ торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаОсновногоОбъекта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СвязанныйОбъектРемонта,
		|	ВидРемонтаЗависимогоОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязанныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
		|	СвязанныеРемонты.ОбъектРемонта.ТехНомер КАК ОбъектРемонтаТехНомер,
		|	СвязанныеРемонты.ОбъектРемонта.ЗаводскойНомер КАК ОбъектРемонтаЗаводскойНомер,
		|	СвязанныеРемонты.ОбъектРемонта.ИнвентарныйНомер КАК ОбъектРемонтаИнвентарныйНомер,
		|	СвязанныеРемонты.ВидРемонта КАК ВидРемонта,
		|	СвязанныеРемонты.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		|	СвязанныеРемонты.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	ВЫБОР
		|		КОГДА ЗависимоеОборудование.СвязанныйОбъектРемонта ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Зависимый,
		|	ВЫБОР
		|		КОГДА ЗависимоеОборудование.СвязанныйОбъектРемонта ЕСТЬ NULL
		|				И НЕ СвязанныеРемонты.ОбъектРемонта = &ОсновнойОбъектРемонта
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Подчиненный
		|ПОМЕСТИТЬ СвязанныеРемонтыСФлагами
		|ИЗ
		|	СвязанныеРемонты КАК СвязанныеРемонты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗависимоеОборудование КАК ЗависимоеОборудование
		|		ПО СвязанныеРемонты.ОбъектРемонта = ЗависимоеОборудование.СвязанныйОбъектРемонта
		|			И (НЕ(НЕ СвязанныеРемонты.ВидРемонта = ЗависимоеОборудование.ВидРемонтаЗависимогоОбъекта
		|					И НЕ ЗависимоеОборудование.ВидРемонтаЗависимогоОбъекта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязанныеРемонты.ОбъектРемонта КАК НаименовОбъекта,
		|	СвязанныеРемонты.ОбъектРемонтаТехНомер КАК ТехнологическийН,
		|	СвязанныеРемонты.ОбъектРемонтаЗаводскойНомер КАК ЗаводскойН,
		|	СвязанныеРемонты.ОбъектРемонтаИнвентарныйНомер КАК ИнвентарныйН,
		|	СвязанныеРемонты.ВидРемонта КАК ВидРемонта,
		|	СвязанныеРемонты.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		|	СвязанныеРемонты.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	ВЫБОР
		|		КОГДА НЕ СвязанныеРемонты.Зависимый
		|				И НЕ СвязанныеРемонты.Подчиненный
		|			ТОГДА 1
		|		КОГДА НЕ СвязанныеРемонты.Зависимый
		|			ТОГДА 3
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ВидПодчиненностиРемонта
		|ИЗ
		|	СвязанныеРемонтыСФлагами КАК СвязанныеРемонты
		|ГДЕ
		|	СвязанныеРемонты.ДатаНачалаРемонта МЕЖДУ &ДатаНачалаРемонта И &ДатаОкончанияРемонта
		|	И СвязанныеРемонты.ДатаОкончанияРемонта МЕЖДУ &ДатаНачалаРемонта И &ДатаОкончанияРемонта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидПодчиненностиРемонта,
		|	ДатаНачалаРемонта
		|ИТОГИ
		|	МАКСИМУМ(ТехнологическийН),
		|	МАКСИМУМ(ЗаводскойН),
		|	МАКСИМУМ(ИнвентарныйН)
		|ПО
		|	ВидПодчиненностиРемонта,
		|	НаименовОбъекта";
		# КонецОбласти

		Запрос.УстановитьПараметр("Ссылка"               , ОстановочныйРемонт);
		Запрос.УстановитьПараметр("ОсновнойОбъектРемонта", ОстановочныйРемонт.ОбъектРемонта);
		Запрос.УстановитьПараметр("ВидРемонта"           , ОстановочныйРемонт.ВидРемонта);
									
		ОтборПечатнойФормы=СтруктураПараметровПечати.ОтборФормы;	
		
		ОтборПечатнойФормы[0].Имя="ОбъектРемонта";
		ОтборПечатнойФормы[1].Имя="ВидРемонта";
		
		торо_ПечатьСервер.ДобавитьПараметрыОтбора(ОтборПечатнойФормы,Запрос,"торо_ОстановочныеРемонтыСвязанныеРемонты",СписокПодчиненных);
		
		Если СтруктураПараметровПечати.ВыводитьВсеРемонты Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ГДЕ
			|	СвязанныеРемонты.ДатаНачалаРемонта МЕЖДУ &ДатаНачалаРемонта И &ДатаОкончанияРемонта
			|	И СвязанныеРемонты.ДатаОкончанияРемонта МЕЖДУ &ДатаНачалаРемонта И &ДатаОкончанияРемонта","");
		Иначе
			Запрос.УстановитьПараметр("ДатаНачалаРемонта", ПериодНач);
			Запрос.УстановитьПараметр("ДатаОкончанияРемонта", ПериодКон);
		КонецЕсли;
						
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		
		ВыборкаВидПодчиненностиРемонта = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВидПодчиненностиРемонта.Следующий() Цикл
			
			ОбластьВерхнийУровень = Макет.ПолучитьОбласть("СтрокаЗаполненияВерхнийУровень");
			
			Если ВыборкаВидПодчиненностиРемонта.ВидПодчиненностиРемонта = 1 Тогда
				ОбластьВерхнийУровень.Параметры.НаименовОбъекта = НСтр("ru = 'Ремонты основного объекта ремонта'");
			ИначеЕсли ВыборкаВидПодчиненностиРемонта.ВидПодчиненностиРемонта = 2 Тогда
				ОбластьВерхнийУровень.Параметры.НаименовОбъекта = НСтр("ru = 'Ремонты зависимого оборудования'");
			Иначе
				ОбластьВерхнийУровень.Параметры.НаименовОбъекта = НСтр("ru = 'Ремонты подчиненного оборудования'");				
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьВерхнийУровень);
			
			Для Сч = 1 По  МассивВременныхИнтервалов.Количество() Цикл
				
				Область = Макет.ПолучитьОбласть("Значение");
				ТабДок.Присоединить(Область);
				
			КонецЦикла;
						
			ВыборкаОбъектыРемонта = ВыборкаВидПодчиненностиРемонта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			НомерПоПорядку = 1;
			
			Пока ВыборкаОбъектыРемонта.Следующий() Цикл
				
				СтрокаСДанными = Макет.ПолучитьОбласть("СтрокаЗаполнения");			
				
				ЗаполнитьЗначенияСвойств(СтрокаСДанными.Параметры, ВыборкаОбъектыРемонта,, "НаименовОбъекта");
				
				СтрокаСДанными.Параметры.НаименовОбъекта = ПолучитьПредставление(ВыборкаОбъектыРемонта.НаименовОбъекта, СоответствиеОбъектовРемонтаПредставлениям, "ПолучитьПредоставленияОРДляПечати");
				СтрокаСДанными.Параметры.НПП             = Формат(НомерПоПорядку, "ЧДЦ=; ЧН=; ЧГ=") + ".";
				
				ТабДок.Вывести(СтрокаСДанными);
				
				линСплошная = новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				линНикакая = новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				
				Условие = Новый Структура;
				Условие.Вставить("НаименовОбъекта", ВыборкаОбъектыРемонта.НаименовОбъекта);
				НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(Условие); 		
				Для Сч = 1 По  МассивВременныхИнтервалов.Количество() Цикл
					
					ДанныеПоРемонтамЗаПериод = Новый Массив;
					Если ИнтервалРазбиения = Перечисления.Периодичность.День Тогда
						ВидыРемонтовЗаПериод = Новый Массив;
					КонецЕсли;
					
					ТекущийПериодНач = МассивВременныхИнтервалов[Сч-1].НачИнт;
					ТекущийПериодКон = МассивВременныхИнтервалов[Сч-1].КонИнт;
					
					Область = Макет.ПолучитьОбласть("Значение");
					ОбластьФормат =  Область.Область();
					
					Для Каждого ОбъектСравнения из НайденныеСтроки Цикл 
						
						Если ОбъектСравнения.ДатаОкончанияРемонта = NULL Тогда
							Продолжить;
						КонецЕсли;
						
						Если ОбъектСравнения.ДатаОкончанияРемонта<ОбъектСравнения.ДатаНачалаРемонта Тогда
							КонечнаяДата = КонецДня(ОбъектСравнения.ДатаНачалаРемонта);	
						Иначе
							КонечнаяДата = ОбъектСравнения.ДатаОкончанияРемонта;
						КонецЕсли;
						
						Если ТекущийПериодКон<ОбъектСравнения.ДатаОкончанияРемонта Тогда
							КонечнаяДата = ТекущийПериодКон;	
						Иначе
							КонечнаяДата = ОбъектСравнения.ДатаОкончанияРемонта;
						КонецЕсли;
						
						Если ТекущийПериодНач<ОбъектСравнения.ДатаНачалаРемонта Тогда
							НачальнаяДата = ОбъектСравнения.ДатаНачалаРемонта;	
						Иначе
							НачальнаяДата = ТекущийПериодНач;
						КонецЕсли;
						
						
						Если  ((ТекущийПериодКон>=ОбъектСравнения.ДатаНачалаРемонта) и (ТекущийПериодНач<=КонечнаяДата)) или
							((ТекущийПериодКон>ОбъектСравнения.ДатаНачалаРемонта) и (ТекущийПериодНач<=КонечнаяДата)) Тогда
							ОбластьФормат.ЦветФона = новый Цвет(255, 251, 240);
							ОбластьФормат.ГраницаСлева =линНикакая;
							ОбластьФормат.ГраницаСправа = линСплошная;
							
							ПредставлениеВидаРемонта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ОбъектСравнения.ВидРемонта);
							Если НачалоДня(ОбъектСравнения.ДатаНачалаРемонта) = НачалоДня(ОбъектСравнения.ДатаОкончанияРемонта) Тогда
								ПредставлениеПродолжительностиРаботы = Формат(ОбъектСравнения.ДатаНачалаРемонта, "ДЛФ=D");
							Иначе
								ПредставлениеПродолжительностиРаботы = Формат(НачальнаяДата, "ДЛФ=D") + " - " + Формат(КонечнаяДата, "ДЛФ=D");
							КонецЕсли;
							
							Если ИнтервалРазбиения = Перечисления.Периодичность.День Тогда
								ВидыРемонтовЗаПериод.Добавить(ПредставлениеВидаРемонта);
							КонецЕсли;
							
							ДанныеПоРемонту = СтрШаблон("%1 (%2)", ПредставлениеВидаРемонта, ПредставлениеПродолжительностиРаботы);  
							ДанныеПоРемонтамЗаПериод.Добавить(ДанныеПоРемонту);
						КонецЕсли;	
						
					КонецЦикла;	
					
					Если ИнтервалРазбиения = Перечисления.Периодичность.День Тогда
						Область.Параметры.Заполнение = СтрСоединить(ВидыРемонтовЗаПериод, ", ");
						ОбластьФормат.Примечание.Текст = СтрСоединить(ДанныеПоРемонтамЗаПериод, Символы.ПС);
					Иначе	
						Область.Параметры.Заполнение = СтрСоединить(ДанныеПоРемонтамЗаПериод, Символы.ПС); 
					КонецЕсли;
					
					ТабДок.Присоединить(Область);
					
				КонецЦикла;
	 
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЦикла;
	ТабДок.КлючПараметровПечати = "торо_ПечатьОстановочные";
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьПредставление(Ссылка, Соответствие, ИмяФункции)
	
	Представление = Соответствие.Получить(Ссылка);
	
	Если НЕ Представление = Неопределено Тогда
		Возврат Представление;
	Иначе
		Представление = "";
		Выполнить("Представление =торо_ЗаполнениеДокументов." + ИмяФункции + "(Ссылка)");
		Соответствие.Вставить(Ссылка, Представление);
		Возврат Представление;
	КонецЕсли; 
	
КонецФункции

// Процедура - Проставить признак зависимый подчиненный
//
// Параметры:
//  ТаблицаЗаполнения		 - ТаблицаЗначения, ТабличнаяЧасть - Таблица, в которой протавляются флаги
//  ОсновнойОбъектРемонта	 - СправочникСсылка.торо_ОбъектыРемонта - Основной объект ремонта
//  ОсновнойВидРемонта		 - СправочникСсылка.торо_ВидыРемонтов - Основной вид ремонта
//  ИмяПоляОбъектаРемонта	 - Строка - Имя поля, в котором находятся объекты ремонта 
//  ИмяПоляВидРемонта		 - Строка - Имя поля, в котором находятся виды ремонтов
//
Процедура ПроставитьПризнакЗависимыйПодчиненный(ТаблицаЗаполнения, ОсновнойОбъектРемонта, ОсновнойВидРемонта, ИмяПоляОбъектаРемонта = "ОбъектРемонта", ИмяПоляВидРемонта = "ВидРемонта")Экспорт
	
	Если ТипЗнч(ТаблицаЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
		ВспомогательнаяТаблица = ТаблицаЗаполнения.Выгрузить();
	Иначе
		ВспомогательнаяТаблица = ТаблицаЗаполнения;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта КАК СвязанныйОбъектРемонта,
	               |	торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаЗависимогоОбъекта КАК ВидРемонтаЗависимогоОбъекта
	               |ИЗ
	               |	РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
	               |ГДЕ
	               |	торо_РемонтыОсновногоЗависимогоОборудования.ОсновнойОбъектРемонта = &ОсновнойОбъектРемонта
	               |	И торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта В(&МассивОбъектовДляЗаполнения)
	               |	И (торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаОсновногоОбъекта = &ВидРемонта
	               |			ИЛИ торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаОсновногоОбъекта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка))";
	# КонецОбласти
	
    Запрос.УстановитьПараметр("ОсновнойОбъектРемонта"      , ОсновнойОбъектРемонта);
    Запрос.УстановитьПараметр("ВидРемонта"                 , ОсновнойВидРемонта);
	Запрос.УстановитьПараметр("МассивОбъектовДляЗаполнения", ВспомогательнаяТаблица.ВыгрузитьКолонку(ИмяПоляОбъектаРемонта));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить(ИмяПоляОбъектаРемонта, Выборка.СвязанныйОбъектРемонта);
		
		Если ЗначениеЗаполнено(Выборка.ВидРемонтаЗависимогоОбъекта) Тогда
			СтруктураПоиска.Вставить(ИмяПоляВидРемонта    , Выборка.ВидРемонтаЗависимогоОбъекта);
		КонецЕсли; 
		
		МассивИмеющихсяСтрок = ТаблицаЗаполнения.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из МассивИмеющихсяСтрок Цикл
			Строка.Зависимый = Истина;
		КонецЦикла; 
		
	КонецЦикла; 
	
	Для каждого Строка Из ТаблицаЗаполнения Цикл
		
		Если Строка.Зависимый
			ИЛИ Строка[ИмяПоляОбъектаРемонта] = ОсновнойОбъектРемонта Тогда
			Продолжить;
		КонецЕсли; 
		
		Строка.Подчиненный = Истина;
		
	КонецЦикла; 
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ 
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	(&Ограничение_ОР1)
	|	И ДляВсехСтрок(&Ограничение_ОР2)
	|";

	ОграничениеОР = торо_УправлениеДоступом.ПолучитьОграничениеДоступаДляОбъектаРемонтаВТаблице("ОбъектРемонта", Истина);
	Ограничение.Текст = СтрЗаменить(Ограничение.Текст, "&Ограничение_ОР1", ОграничениеОР);
	
	ОграничениеОР = торо_УправлениеДоступом.ПолучитьОграничениеДоступаДляОбъектаРемонтаВТаблице("СвязанныеРемонты.ОбъектРемонта", Истина);
	Ограничение.Текст = СтрЗаменить(Ограничение.Текст, "&Ограничение_ОР2", ОграничениеОР);


	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецЕсли