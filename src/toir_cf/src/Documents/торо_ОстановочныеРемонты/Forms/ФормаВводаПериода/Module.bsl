
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОстановочныйРемонт = Параметры.ОстановочныйРемонт;
	
	ОграниченияОтборов = ПолучитьОграниченияПоОтборам(ОстановочныйРемонт);
	
	НоваяСтрока = ТПОтборПечатнойФормы.Добавить();	
	НоваяСтрока.Имя = "Объект ремонта";
	НоваяСтрока.Значение = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	НоваяСтрока.Отбор.ЗагрузитьЗначения(ОграниченияОтборов.ОбъектРемонта);
		
	НоваяСтрока = ТПОтборПечатнойФормы.Добавить();
	НоваяСтрока.Имя = "Вид ремонта";
	НоваяСтрока.Значение = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
	НоваяСтрока.Отбор.ЗагрузитьЗначения(ОграниченияОтборов.ВидРемонта);
		
	ТекГод = Год(ТекущаяДата());
	Элементы.ИнтервалРазбиения.СписокВыбора.Добавить("Месяц");
	Элементы.ИнтервалРазбиения.СписокВыбора.Добавить("Неделя");
	Элементы.ИнтервалРазбиения.СписокВыбора.Добавить("День");
	ИнтервалРазбиения = "Месяц";
	
	ПериодНач = ОстановочныйРемонт.ДатаНачалаРемонта;
	ПериодКон = ОстановочныйРемонт.ДатаОкончанияРемонта;
	
	СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяСтруктураИерархии",
	Истина);
	
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		СтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ТПОтборПечатнойФормыЗначение.ВыбиратьТип = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ПериодНачПриИзменении(Элемент)
	
	Если ПериодНач > ПериодКон Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты его окончания.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ПериодНач = ПериодКон;
		Возврат;
	КонецЕсли;	
	
	Если ((НачалоДня(ПериодКон) - НачалоДня(ПериодНач))/(60*60*24)>=31*3) И
		(ИнтервалРазбиения = ПредопределенноеЗначение("Перечисление.Периодичность.День")) Тогда
		ТекстСообщения = НСтр("ru = 'Детализация для такого периода по дням неудобна!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодКонПриИзменении(Элемент)
	
	Если ПериодКон < ПериодНач Тогда
		ТекстСообщения = НСтр("ru = 'Дата конца периода не может быть меньше даты его начала.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ПериодКон = ПериодНач;
		Возврат;
	КонецЕсли;	
	
	Если ((НачалоДня(ПериодКон) - НачалоДня(ПериодНач))/(60*60*24)>=31*3) И
		(ИнтервалРазбиения = ПредопределенноеЗначение("Перечисление.Периодичность.День")) Тогда
		ТекстСообщения = НСтр("ru = 'Детализация для такого периода по дням неудобна!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалРазбиенияПриИзменении(Элемент)
	
	Если ИнтервалРазбиения = "Месяц" Тогда			
	ИначеЕсли ИнтервалРазбиения = "Неделя" Тогда		
	ИначеЕсли ИнтервалРазбиения = "День" Тогда
		Если (НачалоДня(ПериодКон) - НачалоДня(ПериодНач))/(60*60*24)>=31*3 Тогда
			ТекстСообщения = НСтр("ru = 'Детализация для такого периода по дням неудобна.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Детализация для такого периода не допустима.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ИнтервалРазбиения = "Месяц";	
	КонецЕсли;	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	ЕстьНезаполненные = Ложь;
	ПроверитьЗаполнениеПараметровОтбора(ЕстьНезаполненные);
	Если ЕстьНезаполненные Тогда 
		Возврат;
	КонецЕсли;
	
	ОтборПечатнойФормы = ТПОтборПечатнойФормы;
	СписокПодчиненных = торо_ПечатьСервер.ПолучитьСписокПодчиненных(ОтборПечатнойФормы,СтруктураИерархии);
	
	ПередатьПараметр = Новый Структура;
	ПередатьПараметр.Вставить("ДатаНачала",ПериодНач);
	ПередатьПараметр.Вставить("ДатаКонца",ПериодКон);	
	ПередатьПараметр.Вставить("ИнтервалРазбиения",ИнтервалРазбиения);
	ПередатьПараметр.Вставить("ОтборФормы",ТПОтборПечатнойФормы);
	ПередатьПараметр.Вставить("ВыводитьВсеРемонты",ВыводитьВсеРемонты);
	ПередатьПараметр.Вставить("СписокПодчиненных",СписокПодчиненных);

	Закрыть(ПередатьПараметр);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТПОтборПечатнойФормы

&НаКлиенте
Процедура ТПОтборПечатнойФормыВидСравненияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТПОтборПечатнойФормы.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.Значение <> Неопределено Тогда
		НеобходимСписок = (ТекДанные.ВидСравнения = ВидСравнения.ВСписке Или ТекДанные.ВидСравнения = ВидСравнения.НеВСписке Или ТекДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии);
		
		ВыбиратьГруппу = ТекДанные.ВидСравнения = ВидСравнения.ВИерархии
		ИЛИ ТекДанные.ВидСравнения = ВидСравнения.НеВИерархии
		ИЛИ ТекДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
		
		Если Не НеобходимСписок И ТипЗнч(ТекДанные.Значение) = Тип("СписокЗначений") Тогда
			Если ТекДанные.Значение.Количество() > 0 Тогда
				ТекДанные.Значение = ТекДанные.Значение[0].Значение;
			Иначе
				ТекДанные.Значение = ПредопределенноеЗначение(?(ТекДанные.Имя = "Объект ремонта", "Справочник.торо_ОбъектыРемонта.ПустаяСсылка", "Справочник.торо_ВидыРемонтов.ПустаяСсылка"));
			КонецЕсли;
		ИначеЕсли НеобходимСписок И Не ТипЗнч(ТекДанные.Значение) = Тип("СписокЗначений") Тогда
			НеобходимыйСписок = Новый СписокЗначений;
			НеобходимыйСписок.ТипЗначения = ?(ТекДанные.Имя = "Объект ремонта",Новый ОписаниеТипов(ПолучитьТипСправочника()), Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
			Если ЗначениеЗаполнено(ТекДанные.Значение) Тогда
				НеобходимыйСписок.Добавить(ТекДанные.Значение);
			КонецЕсли;
			ТекДанные.Значение = НеобходимыйСписок;
		КонецЕсли;
		
		Если ВыбиратьГруппу Тогда
			Элементы.ТПОтборПечатнойФормыЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		Иначе
			Элементы.ТПОтборПечатнойФормыЗначение.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТПОтборПечатнойФормыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		УстановитьПараметрыВыбора(Элемент.ТекущиеДанные.Отбор);
	Иначе
		УстановитьПараметрыВыбора(Новый СписокЗначений);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТПОтборПечатнойФормыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТПОтборПечатнойФормы.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.Имя = "Объект ремонта" Тогда
		
		НеобходимСписок = (ТекДанные.ВидСравнения = ВидСравнения.ВСписке Или ТекДанные.ВидСравнения = ВидСравнения.НеВСписке Или ТекДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии);
		
		ВыбиратьГруппу = ТекДанные.ВидСравнения = ВидСравнения.ВИерархии
		ИЛИ ТекДанные.ВидСравнения = ВидСравнения.НеВИерархии
		ИЛИ ТекДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
		
		Если НеобходимСписок Тогда
			СтандартнаяОбработка = Ложь; 
			МассивВыбранных = ТекДанные.Значение.ВыгрузитьЗначения();
			СтруктураПараметров = Новый Структура("СписокОР,МассивВыбранных,ВыбиратьГруппу, ВернутьИерархию",
				Элементы.ТПОтборПечатнойФормы.ТекущиеДанные.Отбор,МассивВыбранных, ВыбиратьГруппу, Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораИзСписка", ЭтаФорма);
			ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораОРВСписок",СтруктураПараметров,,,,,ОписаниеОповещения);
		Иначе		
			СтандартнаяОбработка = Ложь; 
			СтруктураПараметров = Новый Структура("СписокОР, КлючНазначенияИспользования, ВыбиратьГруппу, ВернутьИерархию",
				Элементы.ТПОтборПечатнойФормы.ТекущиеДанные.Отбор, "ИзППР", ВыбиратьГруппу, Истина);
			ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР", 
			СтруктураПараметров, Элемент, Элемент);	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТПОтборПечатнойФормыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = Элементы.ТПОтборПечатнойФормы.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.Имя = "Объект ремонта" Тогда
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			ТекДанные.Значение = ВыбранноеЗначение.ОбъектРемонта[0];
			СтруктураИерархии = ВыбранноеЗначение.Иерархия;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда 
			ТекДанные.Значение = ВыбранноеЗначение;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТПОтборПечатнойФормыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТПОтборПечатнойФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСписка(СписокЗнач,ДопПараметры) Экспорт
	Если СписокЗнач <> Неопределено Тогда
		ТекДанные = Элементы.ТПОтборПечатнойФормы.ТекущиеДанные;
		ТекДанные.Значение.ЗагрузитьЗначения(СписокЗнач.МассивВыбранных);
		СтруктураИерархии = СписокЗнач.Иерархия;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеПараметровОтбора(ЕстьНезаполненные)
	Для Каждого Строка Из ТПОтборПечатнойФормы Цикл 
		Если Строка.Использование И НЕ ЗначениеЗаполнено(Строка.Значение) Тогда 
			ЕстьНезаполненные = Истина;
			Поле = ?(Строка.Имя = "Объект ремонта", "объекту ремонта", "виду ремонта");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Значение отбора по %1 не заполнено.'"), Поле)) ;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОграниченияПоОтборам(ОстановочныйРемонт)
	ОграниченияОтборов = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта КАК ОР
	               |ИЗ
	               |	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
	               |ГДЕ
	               |	торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ОстановочныеРемонтыСвязанныеРемонты.ВидРемонта КАК ВР
	               |ИЗ
	               |	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
	               |ГДЕ
	               |	торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ОстановочныйРемонт);
	РезЗапроса = Запрос.ВыполнитьПакет();
	Если НЕ РезЗапроса[0].Пустой() Тогда
		ОграниченияОтборов.Вставить("ОбъектРемонта", РезЗапроса[0].Выгрузить().ВыгрузитьКолонку("ОР"));
	Иначе
		ОграниченияОтборов.Вставить("ОбъектРемонта", Новый Массив);
	КонецЕсли;
	Если НЕ РезЗапроса[1].Пустой() Тогда
		ОграниченияОтборов.Вставить("ВидРемонта", РезЗапроса[1].Выгрузить().ВыгрузитьКолонку("ВР"));
	Иначе
		ОграниченияОтборов.Вставить("ВидРемонта", Новый Массив);
	КонецЕсли;
	Возврат ОграниченияОтборов;
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыВыбора(Список) 	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Список));
	Элементы.ТПОтборПечатнойФормыЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ТПОтборПечатнойФормыЗначение.СписокВыбора.ЗагрузитьЗначения(Список.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервере
Функция ПолучитьТипСправочника()
	Возврат Справочники.ТипВсеСсылки().Типы();
КонецФункции

#КонецОбласти
