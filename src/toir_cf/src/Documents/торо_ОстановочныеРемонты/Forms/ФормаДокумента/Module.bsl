#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") 
			ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(Параметры.Основание);
			Неотмененный = торо_ЗаполнениеДокументов.ВернутьIDНеотмененногоРемонтаВРегламентныхМероприятиях(Параметры.Основание, Параметры.Основание[ИмяТЧ]);
			Если ИмяТЧ <> Неопределено И Неотмененный <> ""  Тогда
				
				ЕстьОстановочныеРемонты = ПроверитьОстановочныеРемонты(Неотмененный);
				
				Если ЕстьОстановочныеРемонты Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось создать документ ""Остановочный ремонт"", так как данный ремонт уже участвует в остановочных ремонтах!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.СвязанныеРемонты.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.СвязанныеРемонты.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		ИначеЕсли Параметры.ID = Объект.IDОсновногоРемонта Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ДокументОснование;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КорректируемыйДокумент) И ТипЗнч(Объект.КорректируемыйДокумент) = Тип("ДокументСсылка.торо_ОстановочныеРемонты") Тогда
		Объект.ДокументОснование = Объект.КорректируемыйДокумент.ДокументОснование;
	КонецЕсли; 
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ОстановочныеРемонты;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	ФОИспользоватьНаряды   = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаВыполнениеРабот");
	ФОИспользоватьГарантии = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	
	ЗаполнитьТаблицуВводаНаОсновании();
	
	УстановитьУсловноеОформление();
	
	ОбновитьДоступностьДляРедактирования();
	
	ДиаграммаРемонтов.ОтображатьЗаголовок = Ложь;
	ДиаграммаРемонтов.ОтображатьЛегенду   = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроставитьПризнакЗависимыйПодчиненный();
		Элементы.ДекорацияГарантийныйРемонт.Видимость = ФОИспользоватьГарантии И Объект.ГарантийныйРемонт;
	Иначе
		ОбновитьГарантийностьОсновного();
	КонецЕсли; 
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.СвязанныеРемонты.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	УстановитьВидимостьДоступность();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийДокументаОстановочныйРемонт.ОстановочныйРемонт") И ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.IDОсновногоРемонта = "" Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуДляПодбораОстановочногоРемонта", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "СвязанныеРемонты");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	
	Для Каждого СвязанныйРемонт Из Объект.СвязанныеРемонты Цикл
		СвязанныйРемонт.Добавлен = Ложь;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроставитьПризнакЗависимыйПодчиненный();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "ЗагрузкаИзПроджект" И Параметр = Объект.Ссылка Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		// Согласование++
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
		// Согласование--
	ИначеЕсли ИмяСобытия = "СозданДокументНаОснованииОстановочногоРемонта" Тогда
		ОбновитьДоступностьДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Все данные по выбранному ремонту будут очищены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДокументОснованиеОчисткаЗавершение", ЭтотОбъект, Новый Структура("ВыбиратьНовый, СтароеОснование", Истина, Объект.ДокументОснование)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФормуДляПодбораОстановочногоРемонта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Параметры = Новый Структура("ПолнотекстовыйПоиск, Отбор", ПолнотекстовыйПоискПриВводеПоСтроке.НеИспользовать, Новый Структура("Истина", Истина));
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ПодборРемонтов") И ВыбранноеЗначение.ПодборРемонтов = Истина Тогда
		ДокументОснованиеОбработкаВыбораНаСервере(ВыбранноеЗначение.АдресХранилища);
		УстановитьВидимостьДоступность();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьДокументСРемонтом(Объект.ДокументОснование, Объект.IDОсновногоРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Все данные по выбранному ремонту будут очищены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДокументОснованиеОчисткаЗавершение", ЭтотОбъект, Новый Структура("ВыбиратьНовый", Ложь)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбиратьНовый = ДополнительныеПараметры.ВыбиратьНовый;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Не ВыбиратьНовый Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
		Объект.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		Объект.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
		Объект.ДатаНачалаРемонта = Дата(1,1,1);
		Объект.ДатаОкончанияРемонта = Дата(1,1,1);
		Объект.IDОсновногоРемонта = "";
		Объект.СвязанныеРемонты.Очистить();
		
		Если ВыбиратьНовый Тогда
			ОткрытьФормуДляПодбораОстановочногоРемонта();
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРемонтаПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаРемонта > Объект.ДатаОкончанияРемонта Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала ремонта больше даты окончания!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбновитьГарантийностьОсновного();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияРемонтаПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаРемонта > Объект.ДатаОкончанияРемонта Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала ремонта больше даты окончания!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбновитьГарантийностьОсновного();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязанныеРемонты

&НаКлиенте
Процедура СвязанныеРемонтыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого ЭлементМассива из ВыбранноеЗначение Цикл
			СвязанныеРемонтыДобавитьСтроку(ЭлементМассива);
		КонецЦикла;
	Иначе
		СвязанныеРемонтыДобавитьСтроку(ВыбранноеЗначение);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыДобавитьСтроку(ВыбранноеЗначение)
	
	Если Объект.СвязанныеРемонты.НайтиСтроки(Новый Структура("ID",ВыбранноеЗначение.СтрокаРемонтовОборудования.ID)).Количество() = 0 
		И ВыбранноеЗначение.СтрокаРемонтовОборудования.ID <> Объект.IDОсновногоРемонта Тогда
		
		ДатаНачалаВыбранного = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала;
		ДатаОкончанияВыбранного = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаОкончания;
		
        НС                           = Объект.СвязанныеРемонты.Добавить();
        НС.ID                        = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
        НС.ОбъектРемонта             = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
        НС.ВидРемонта                = ВыбранноеЗначение.СтрокаРемонтовОборудования.ВидРемонтныхРабот;
        НС.ДатаНачалаРемонта         = ДатаНачалаВыбранного;
        НС.ДатаОкончанияРемонта      = ДатаОкончанияВыбранного;
        НС.ДатаНачалаРемонтаСтарая   = ДатаНачалаВыбранного;
        НС.ДатаОкончанияРемонтаСтарая= ДатаОкончанияВыбранного;
        НС.ДокументИсточник          = ВыбранноеЗначение.ДокументОснование;
        НС.Добавлен                  = Истина;
        НС.Зависимый                 = ВыбранноеЗначение.СтрокаРемонтовОборудования.Зависимый;
        НС.Подчиненный               = ВыбранноеЗначение.СтрокаРемонтовОборудования.Подчиненный;
        НС.Исполнитель               = ВыбранноеЗначение.СтрокаРемонтовОборудования.Исполнитель;
        НС.СпособВыполнения          = ВыбранноеЗначение.СтрокаРемонтовОборудования.СпособВыполнения;
        НС.КритичностьДефекта        = ВыбранноеЗначение.СтрокаРемонтовОборудования.КритичностьДефекта;

		НС.Добавлен                  = Истина;
		
		Если Объект.ДатаНачалаРемонта > ДатаНачалаВыбранного Или Объект.ДатаОкончанияРемонта < ДатаОкончанияВыбранного Тогда
			ТекстСообщения = НСтр("ru = 'Выбранный ремонт выходит за границы интервала основного ремонта!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ФОИспользоватьГарантии Тогда
			НС.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(НС.ОбъектРемонта, НС.ДатаНачалаРемонта, НС.ДатаОкончанияРемонта);
		КонецЕсли;
				
		ОбновитьДоступностьДляРедактирования();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", ДанныеСтроки.ID));
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДляРедактирования = Массивстрок[0];
		Если Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ((НоваяСтрока И ОтменаРедактирования) Или ТекДанные = Неопределено) Тогда
		Если ЗначениеЗаполнено(ТекДанные.ДатаНачалаРемонта) И ЗначениеЗаполнено(ТекДанные.ДатаОкончанияРемонта) Тогда
			НачалоВыходитЗаГраницы = ТекДанные.ДатаНачалаРемонта < Объект.ДатаНачалаРемонта;
			ОкончаниеВыходитЗаГраницы = ТекДанные.ДатаОкончанияРемонта > Объект.ДатаОкончанияРемонта;
			Если НачалоВыходитЗаГраницы Или ОкончаниеВыходитЗаГраницы Тогда
				ТекстВопроса = НСтр("ru = 'Границы периода редактируемого ремонта выходят за границы периода остановочного ремонта! Сдвинуть границы периода:'");
				ВариантыДействий = Новый СписокЗначений;
                ВариантыДействий.Добавить("СдвинутьВШапке"         , НСтр("ru = 'Остановочного ремонта'"));
                ВариантыДействий.Добавить("СдвинутьУТекущего"      , НСтр("ru = 'Редактируемого'"));
                ВариантыДействий.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Ничего не предпринимать'"));
				
				ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОСдвигеДат", ЭтотОбъект, Новый Структура("ТекДанные, Начало, Окончание", ТекДанные, НачалоВыходитЗаГраницы, ОкончаниеВыходитЗаГраницы)), ТекстВопроса, ВариантыДействий);
			Иначе 
				Если ФОИспользоватьГарантии Тогда
					ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, ТекДанные.ДатаНачалаРемонта, ТекДанные.ДатаОкончанияРемонта);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "СвязанныеРемонтыОтвязать" И Поле.Имя <> "СвязанныеРемонтыДатаНачалаРемонта" И Поле.Имя <> "СвязанныеРемонтыДатаОкончанияРемонта" Тогда
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		ОткрытьДокументСРемонтом(ДанныеСтроки.ДокументИсточник, ДанныеСтроки.ID);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ЭтоКорректировка = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка");
	
	Для Каждого ВыдСтрока Из Элемент.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыдСтрока);
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ID) 
			ИЛИ ДанныеСтроки.Добавлен Тогда
			Объект.СвязанныеРемонты.Удалить(ДанныеСтроки);
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", ДанныеСтроки.ID));
		
		Если НайденныеСтроки.Количество() > 0 
			И НайденныеСтроки[0].ДоступенДляРедактирования 
			И Не ЭтоКорректировка Тогда
			
			Объект.СвязанныеРемонты.Удалить(ДанныеСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФормуДляПодбораЗависимыхРемонтов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументРемонта(Команда)
	
	Для Каждого ВыдСтрока Из Элементы.СвязанныеРемонты.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СвязанныеРемонты.ДанныеСтроки(ВыдСтрока);
		ОткрытьДокументСРемонтом(ДанныеСтроки.ДокументИсточник, ДанныеСтроки.ID);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьГраницы(Команда)
	
	Если Команда.Имя = "СдвинутьГраницыОсновного" Тогда
        Обработчик   = "ОбработатьВыборВариантаСдвигаГраницОсновногоРемонта";
        ТекстВопроса = НСтр("ru = 'Выберите вариант смещения границ основного ремонта'");
	Иначе
		Обработчик   = "ОбработатьВыборВариантаСдвигаГраницСвязанныхРемонтов";
		ТекстВопроса = НСтр("ru = 'Выберите вариант смещения границ связанных ремонтов'");
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения(Обработчик, ЭтаФорма);
	
	СписокВариантовСмещения = Новый СписокЗначений;
    СписокВариантовСмещения.Добавить(1                        , НСтр("ru = 'Сдвинуть дату начала'"));
    СписокВариантовСмещения.Добавить(2                        , НСтр("ru = 'Сдвинуть обе даты'"));
    СписокВариантовСмещения.Добавить(3                        , НСтр("ru = 'Сдвинуть дату окончания'"));    
    СписокВариантовСмещения.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Ничего не предпринимать'"));    

	//
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокВариантовСмещения,,, НСтр("ru = 'Сдвинуть границы'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗаявкуНаРемонт(Команда)
	ВвестиДокументНаОсновании("торо_ЗаявкаНаРемонт");
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНарядНаВыполнениеРемонтныхРабот(Команда)
	ВвестиДокументНаОсновании("торо_НарядНаВыполнениеРемонтныхРабот");
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАктОВыполненииЭтапаРабот(Команда)
	ВвестиДокументНаОсновании("торо_АктОВыполненииЭтапаРабот");
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьОбновить(Команда)
	ПостроитьОбновитьДиаграммуГанта();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаРемонтов.Точки Цикл
		ДиаграммаРемонтов.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаРемонтов.Точки Цикл
		ДиаграммаРемонтов.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказательЛегенду(Команда)
	Элементы.ПоказатьЛегенду.Пометка = НЕ Элементы.ПоказатьЛегенду.Пометка;
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказатьЛегенду.Пометка;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ВопросОСдвигеДат(Ответ, ДополнительныеПараметры) Экспорт 
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	НачалоВыходитЗаГраницы = ДополнительныеПараметры.Начало;
	ОкончаниеВыходитЗаГраницы = ДополнительныеПараметры.Окончание;
	
	Если Ответ = "СдвинутьВШапке" Тогда
		Если НачалоВыходитЗаГраницы Тогда
			Объект.ДатаНачалаРемонта = ТекДанные.ДатаНачалаРемонта;
		КонецЕсли;
		Если ОкончаниеВыходитЗаГраницы Тогда
			Объект.ДатаОкончанияРемонта = ТекДанные.ДатаОкончанияРемонта;
		КонецЕсли;
	ИначеЕсли Ответ = "СдвинутьУТекущего" Тогда
		Если НачалоВыходитЗаГраницы Тогда
			ТекДанные.ДатаНачалаРемонта = Объект.ДатаНачалаРемонта;
			Если ТекДанные.ДатаОкончанияРемонта < ТекДанные.ДатаНачалаРемонта Тогда
				ТекДанные.ДатаОкончанияРемонта = ТекДанные.ДатаНачалаРемонта;
			КонецЕсли;
		КонецЕсли;
		Если ОкончаниеВыходитЗаГраницы Тогда
			ТекДанные.ДатаОкончанияРемонта = Объект.ДатаОкончанияРемонта;
			Если ТекДанные.ДатаОкончанияРемонта < ТекДанные.ДатаНачалаРемонта Тогда
				ТекДанные.ДатаНачалаРемонта = ТекДанные.ДатаОкончанияРемонта;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ФОИспользоватьГарантии Тогда
		ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, ТекДанные.ДатаНачалаРемонта, ТекДанные.ДатаОкончанияРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументСРемонтом(Документ, ID)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ОткрытьФорму("Документ.торо_ПланГрафикРемонта.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДляПодбораОстановочногоРемонта()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор остановочного ремонта'"));
	
	ДокументыОснования = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДокументыОснования.Добавить(Объект.ДокументОснование);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДокументыОснования", ДокументыОснования);
	
	ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот",
				ПараметрыФормы, Элементы.ДокументОснование, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДляПодбораЗависимыхРемонтов()
		
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда
		
		ПараметрыФормы = Новый Структура;
        ПараметрыФормы.Вставить("Владелец"             , Объект.Ссылка);
        ПараметрыФормы.Вставить("ДокументИсточник"     , Объект.Ссылка);

        ПараметрыФормы.Вставить("ВладелецДата"         , Объект.Дата);
        ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"   , Ложь);
        ПараметрыФормы.Вставить("Заголовок"            , НСтр("ru = 'Подбор зависимых ремонтов'"));
        ПараметрыФормы.Вставить("IDОсновногоРемонта"      , Объект.IDОсновногоРемонта);
        ПараметрыФормы.Вставить("ОР"                   , Объект.ОбъектРемонта);
        ПараметрыФормы.Вставить("ВР"                   , Объект.ВидРемонта);
        ПараметрыФормы.Вставить("ДатаНачалаРемонта"    , Объект.ДатаНачалаРемонта);
        ПараметрыФормы.Вставить("ДатаОкончанияРемонта" , Объект.ДатаОкончанияРемонта);
		
		
		ДокументыОснования = Новый СписокЗначений;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ДокументыОснования.Добавить(Объект.ДокументОснование);
		КонецЕсли;
		Для Каждого Ремонт Из Объект.СвязанныеРемонты Цикл
			Если ДокументыОснования.НайтиПоЗначению(Ремонт.ДокументИсточник) = Неопределено Тогда
				ДокументыОснования.Добавить(Ремонт.ДокументИсточник);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыФормы.Вставить("ДокументыОснования", ДокументыОснования);
		
		ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПоОстановочнымРемонтам",
			ПараметрыФормы, Элементы.СвязанныеРемонты, ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран остановочный ремонт!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ДокументОснование","Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ВидОперацииКорректировка = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка");
	
	Элементы.КорректируемыйДокумент.Видимость = ВидОперацииКорректировка;
	Элементы.СвязанныеРемонтыОтвязать.Видимость = ВидОперацииКорректировка;
	Элементы.Шапка.ТолькоПросмотр = ВидОперацииКорректировка;
	ТолькоПросмотрДатОсновного = Ложь;
	МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", Объект.IDОсновногоРемонта));
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДляРедактирования = Массивстрок[0];
		Если Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
			 ТолькоПросмотрДатОсновного = Истина;
		КонецЕсли;
		 
	КонецЕсли;
	 
	Элементы.ДатаНачалаИДатаОкончанияРемонта.ТолькоПросмотр = ТолькоПросмотрДатОсновного;
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеОбработкаВыбораНаСервере(АдресХранилища)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	МассивДанныхРемонтов = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если МассивДанныхРемонтов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = МассивДанныхРемонтов[0];
	
	Если Не ПроверитьОстановочныеРемонты(ВыбранноеЗначение.СтрокаРемонтовОборудования.ID) Тогда
		
		Объект.ДокументОснование = ВыбранноеЗначение.ДокументОснование;
		Объект.IDОсновногоРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
		Объект.ОбъектРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
		Объект.ВидРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ВидРемонтныхРабот;
		Объект.ДатаНачалаРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала;
		Объект.ДатаОкончанияРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаОкончания;
		Объект.ДатаНачалаРемонтаСт = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала;
		Объект.ДатаОкончанияРемонтаСт = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаОкончания;
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не удалось выбрать основной ремонт, так как он используется в других остановочных ремонтах'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОбновитьГарантийностьОсновного();
	ОбновитьДоступностьДляРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивДоступныхДляКорректировкиСтрок.Очистить();
	МассивДоступныхДляКорректировкиСтрок.Загрузить(Документы.торо_ОстановочныеРемонты.ОбновитьДоступностьДляРедактирования(Объект.Ссылка, ПолучитьТаблицуРемонтовСОсновным()));
	
	МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", Объект.IDОсновногоРемонта));
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДляРедактирования = Массивстрок[0];
		Если Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
			ТолькоПросмотрДатОсновного = Истина;
		Иначе
			 ТолькоПросмотрДатОсновного = Ложь;
		КонецЕсли;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуРемонтовСОсновным()
	
	ТаблицаРемонтовСОсновным = Объект.СвязанныеРемонты.Выгрузить();
	НС = ТаблицаРемонтовСОсновным.Добавить();
    НС.ID                         = Объект.IDОсновногоРемонта;
    НС.ОбъектРемонта              = Объект.ОбъектРемонта;
    НС.ВидРемонта                 = Объект.ВидРемонта;
    НС.ДатаНачалаРемонта          = Объект.ДатаНачалаРемонта;
    НС.ДатаОкончанияРемонта       = Объект.ДатаОкончанияРемонта;
    НС.ДатаНачалаРемонтаСтарая    = Объект.ДатаНачалаРемонтаСт;
    НС.ДатаОкончанияРемонтаСтарая = Объект.ДатаОкончанияРемонтаСт;
    НС.ДокументИсточник           = Объект.ДокументОснование;
	
	Возврат ТаблицаРемонтовСОсновным;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Согласование++
	торо_РаботаССогласованиями.ДобавитьУсловноеОформлениеДляДереваСогласования(ЭтаФорма);
	// Согласование--
	
	// Ремонт изменен
   Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвязанныеРемонты.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СвязанныеРемонты.Изменен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	// Отвязан
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвязанныеРемонты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СвязанныеРемонты.Отвязать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
	
	// Текущие даты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвязанныеРемонтыДатаНачалаРемонта.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвязанныеРемонтыДатаОкончанияРемонта.Имя);	
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СвязанныеРемонты.Отвязать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаКлиенте 
Процедура ОбработатьВыборВариантаСдвигаГраницОсновногоРемонта(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаОкончанияРемонта = Объект.ДатаОкончанияРемонта;
	ДатаНачалаРемонта    = Объект.ДатаНачалаРемонта;
	
	Для каждого Строка Из Объект.СвязанныеРемонты Цикл
		ДатаНачалаРемонта    = Мин(ДатаНачалаРемонта, Строка.ДатаНачалаРемонта);
		ДатаОкончанияРемонта = Макс(ДатаОкончанияРемонта, Строка.ДатаОкончанияРемонта);
	КонецЦикла; 
	
	Если Результат = 1 Тогда      // Сдвиг даты начала
		Объект.ДатаНачалаРемонта = ДатаНачалаРемонта;
	ИначеЕсли Результат = 2 Тогда // Обе даты
		Объект.ДатаНачалаРемонта    = ДатаНачалаРемонта;
		Объект.ДатаОкончанияРемонта = ДатаОкончанияРемонта;
	Иначе                         // Дата окончания
		Объект.ДатаОкончанияРемонта = ДатаОкончанияРемонта;		
	КонецЕсли;
	
	ОбновитьГарантийностьОсновного();
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработатьВыборВариантаСдвигаГраницСвязанныхРемонтов(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаОкончанияРемонта = Объект.ДатаОкончанияРемонта;
	ДатаНачалаРемонта    = Объект.ДатаНачалаРемонта;
	
	Для каждого ИдентификаторСтроки Из Элементы.СвязанныеРемонты.ВыделенныеСтроки Цикл
		
		Строка = Объект.СвязанныеРемонты.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не Строка = Неопределено Тогда
			
			Если Результат = 1 Тогда      // Сдвиг даты начала
				Строка.ДатаНачалаРемонта    = Объект.ДатаНачалаРемонта;
			ИначеЕсли Результат = 2 Тогда // Обе даты
				Строка.ДатаНачалаРемонта    = Объект.ДатаНачалаРемонта;
				Строка.ДатаОкончанияРемонта = Объект.ДатаОкончанияРемонта;
			Иначе                         // Дата окончания
				Строка.ДатаОкончанияРемонта = Объект.ДатаОкончанияРемонта;		
			КонецЕсли; 
			
			Строка.Изменен = Истина;
			
			Если ФОИспользоватьГарантии Тогда
				Строка.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(Строка.ОбъектРемонта, Строка.ДатаНачалаРемонта, Строка.ДатаОкончанияРемонта);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		ДиаграммаРемонтов.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		ДиаграммаРемонтов.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаРемонтов.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаРемонтов.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура ПостроитьОбновитьДиаграммуГанта()
	
	ДатаОкончанияРемонта = Объект.ДатаОкончанияРемонта;
	ДатаНачалаРемонта    = Объект.ДатаНачалаРемонта;
	
	Для каждого Строка Из Объект.СвязанныеРемонты Цикл
		ДатаНачалаРемонта    = Мин(ДатаНачалаРемонта, Строка.ДатаНачалаРемонта);
		ДатаОкончанияРемонта = Макс(ДатаОкончанияРемонта, Строка.ДатаОкончанияРемонта);
	КонецЦикла; 
	
	Если ДатаНачалаРемонта = Дата("00010101")
		ИЛИ ДатаОкончанияРемонта = Дата("00010101") Тогда
		ТекстСообщения = НСтр("ru = 'Проверьте заполнение дат основного ремонта'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ДиаграммаРемонтов.Очистить();
	ДиаграммаРемонтов.АвтоОпределениеПолногоИнтервала = Ложь;
	ДиаграммаРемонтов.ОтображатьЛегенду               = Ложь;
	ДиаграммаРемонтов.УстановитьПолныйИнтервал(ДатаНачалаРемонта, ДатаОкончанияРемонта);
	
	СерияРемонт = ДиаграммаРемонтов.Серии.Добавить();
	СерияРемонт.Текст = "Зависимые ремонты";
	
	
	//Шрифты
	ШрифтЖирныйПодчеркнутый = Новый Шрифт(,,Истина, Ложь, Истина);
	ШрифтЖирный             = Новый Шрифт(,,Истина, Ложь, Ложь);
	
	ТочкаОсновнойРемонт = ДиаграммаРемонтов.Точки.Добавить();
	ТочкаОсновнойРемонт.Текст = НСтр("ru = 'Основной ремонт'");
	ТочкаОсновнойРемонт.Шрифт = ШрифтЖирныйПодчеркнутый;	
	
	Значение = ДиаграммаРемонтов.ПолучитьЗначение(ТочкаОсновнойРемонт, СерияРемонт);
	
	Интервал = Значение.Добавить();
	Интервал.Начало = Объект.ДатаНачалаРемонта;
	Интервал.Конец  = КонецДня(Объект.ДатаОкончанияРемонта);
	Интервал.Текст  = Строка(Объект.ДатаНачалаРемонта) + " - " + Строка(Объект.ДатаОкончанияРемонта);
	Интервал.Цвет   = WebЦвета.Бирюзовый;

	
	ТочкаРемонтыОсновногоОборудования = ТочкаОсновнойРемонт.Точки.Добавить();
	ТочкаРемонтыОсновногоОборудования.Текст = НСтр("ru = 'Ремонты основного оборудования'");
	ТочкаРемонтыОсновногоОборудования.Шрифт = ШрифтЖирный;	
	
	ТочкаРемонтыЗависимогоОборудования = ТочкаОсновнойРемонт.Точки.Добавить();
	ТочкаРемонтыЗависимогоОборудования.Текст = НСтр("ru = 'Ремонты зависимого оборудования'");
	ТочкаРемонтыЗависимогоОборудования.Шрифт = ШрифтЖирный;	
	
	ТочкаРемонтыПодчиненногоОборудования = ТочкаОсновнойРемонт.Точки.Добавить();
	ТочкаРемонтыПодчиненногоОборудования.Текст = НСтр("ru = 'Ремонты подчиненного оборудования'");
	ТочкаРемонтыПодчиненногоОборудования.Шрифт = ШрифтЖирный;	
	
	ДобавитьРемонтыВДиаграмму(ТочкаРемонтыОсновногоОборудования   , Новый Структура("Зависимый, Подчиненный", Ложь  , Ложь));
	ДобавитьРемонтыВДиаграмму(ТочкаРемонтыЗависимогоОборудования  , Новый Структура("Зависимый, Подчиненный", Истина, Ложь));
	ДобавитьРемонтыВДиаграмму(ТочкаРемонтыПодчиненногоОборудования, Новый Структура("Зависимый, Подчиненный", Ложь  , Истина));
	
	ДиаграммаРемонтов.РазвернутьТочку(ТочкаОсновнойРемонт, Истина);

КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьРемонтыВДиаграмму(Точка, СтруктураОтбораОтбора)
	
	ТекДата = ТекущаяДата();
	СерияРемонт = ДиаграммаРемонтов.Серии[0];
	
	СтруктураЦветов = Новый Структура("ЦветВыполненого, ЦветЗапланированного");
	СтруктураЦветов.ЦветВыполненого 			= WebЦвета.Черный;
	СтруктураЦветов.ЦветЗапланированного 		= WebЦвета.Васильковый;
	
	МассивСтрок = Объект.СвязанныеРемонты.НайтиСтроки(СтруктураОтбораОтбора);
	
	СоответствиеОР = Новый Соответствие;
	
	Для каждого Строка Из МассивСтрок Цикл
		
		СтруктураДанныхПоОР = СоответствиеОР.Получить(Строка.ОбъектРемонта);
		
		Если СтруктураДанныхПоОР = Неопределено Тогда // Надо добавить точки
			
			ТочкаОР = Точка.Точки.Добавить();
			ТочкаОР.Текст       = Строка.ОбъектРемонта;
			ТочкаОР.Расшифровка = Строка.ОбъектРемонта;
			ТочкаОР.Шрифт       = Новый Шрифт(,,Ложь, Ложь, Истина);
			
			СтруктураДанныхПоОР = Новый Структура();
			СтруктураДанныхПоОР.Вставить("СоответсвиеВР", Новый Соответствие);
			СтруктураДанныхПоОР.Вставить("ТочкаОР"      , ТочкаОР);
			
			СоответствиеОР.Вставить(Строка.ОбъектРемонта, СтруктураДанныхПоОР);
			СтруктураДанныхПоОР = СоответствиеОР.Получить(Строка.ОбъектРемонта);

		КонецЕсли;
		
		ТочкаОР        = СтруктураДанныхПоОР.ТочкаОР;
		СоответствиеВР = СтруктураДанныхПоОР.СоответсвиеВР;
		
		ТочкаВР = СоответствиеВР.Получить(Строка.ВидРемонта);
		
		Если ТочкаВР = Неопределено Тогда
			
			ТочкаВР = ТочкаОР.Точки.Добавить();
			
			ТочкаВР.Текст       = Строка.ВидРемонта;
			ТочкаВР.Расшифровка = Строка.ВидРемонта;
			
			СоответствиеВР.Вставить(Строка.ВидРемонта, ТочкаВР);
			
			ТочкаВР = СоответствиеВР.Получить(Строка.ВидРемонта);
			
		КонецЕсли; 
		
		Значение = ДиаграммаРемонтов.ПолучитьЗначение(ТочкаВР, СерияРемонт);
		
		НайденныеСтроки = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", Строка.ID));
		
		Если НайденныеСтроки.Количество() > 0 
			И НайденныеСтроки[0].ДоступенДляРедактирования Тогда
			Значение.Редактирование = Истина;
		КонецЕсли;
	
		Интервал = Значение.Добавить();
		Интервал.Начало = Строка.ДатаНачалаРемонта;
		Интервал.Конец  = Строка.ДатаОкончанияРемонта;
		Интервал.Текст  = Строка(Строка.ДатаНачалаРемонта) + " - " + Строка(Строка.ДатаОкончанияРемонта);
		Интервал.Цвет   = ?(Строка.ДатаНачалаРемонта < ТекДата,  СтруктураЦветов.ЦветВыполненого,  СтруктураЦветов.ЦветЗапланированного);

		Расшифровка = Новый Структура("ID", Строка.ID);
		
		Интервал.Расшифровка = Расшифровка;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	Если ТипЗнч(Расшифровки) = Тип("Массив") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Для каждого ЭлементМассива Из Расшифровки Цикл
			
			Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
				
				МассивСтрок = Объект.СвязанныеРемонты.НайтиСтроки(Новый Структура("ID", ЭлементМассива.ID));
				
				Если МассивСтрок.Количество() > 0 Тогда
					Элементы.СвязанныеРемонты.ТекущаяСтрока = Объект.СвязанныеРемонты.Индекс(МассивСтрок[0]);
					Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСвязанныеРемонты;
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли; 
	
	//Интервал
	
	ДатаНачала    = Мин(Интервал.Начало, Интервал.Конец);
	ДатаОкончания = Макс(Интервал.Начало, Интервал.Конец);
	
	ID = Интервал.Расшифровка.ID;
	
	МассивСтрок = Объект.СвязанныеРемонты.НайтиСтроки(Новый Структура("ID", ID));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		Строка = МассивСтрок[0];
		
		Строка.ДатаНачалаРемонта    = ДатаНачала;
		Строка.ДатаОкончанияРемонта = ДатаОкончания;
		Строка.Изменен              = Истина;
		
		Значение = Интервал.Значение;
		
		Для каждого ИнтервалИзЗначения Из Значение Цикл
			Если ИнтервалИзЗначения.Расшифровка.ID = Интервал.Расшифровка.ID Тогда
				
				ИнтервалИзЗначения.Текст  = Строка(Строка.ДатаНачалаРемонта) + " - " + Строка(Строка.ДатаОкончанияРемонта);
				Прервать;
				
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыДатаНачалаРемонтаПриИзменении(Элемент)
	ПроставитьПризнакИзмененВТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыДатаОкончанияРемонтаПриИзменении(Элемент)
	ПроставитьПризнакИзмененВТекущейСтроке();
КонецПроцедуры

&НаКлиенте 
Процедура ПроставитьПризнакИзмененВТекущейСтроке()
	ТекущиеДанные = Элементы.СвязанныеРемонты.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.Изменен = Истина;
	КонецЕсли; 	
КонецПроцедуры

// Процедура - Проставить признак зависимый подчиненный
// см. Документы.торо_ОстановочныеРемонты.ПроставитьПризнакЗависимыйПодчиненный 
&НаСервере
Процедура ПроставитьПризнакЗависимыйПодчиненный()
	Документы.торо_ОстановочныеРемонты.ПроставитьПризнакЗависимыйПодчиненный(Объект.СвязанныеРемонты, Объект.ОбъектРемонта, Объект.ВидРемонта);	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокументНаОсновании(ТипВводимогоДокумента)
	ВыделенныеСтроки = Элементы.СвязанныеРемонты.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
	    ТекстСообщения = НСтр("ru = 'Не выбран ни один ремонт! Ввод документа невозможен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Создание документа возможно только на основании проведенного документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КоличествоЗаявокНаОснованииЗаявки = 0;
	СоответствиеИДДокументам = Новый Соответствие();
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
	    ТекущаяСтрока = Объект.СвязанныеРемонты.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ТипДокументаОснования = ?(ТипЗнч(ТекущаяСтрока.ДокументИсточник) = Тип("ДокументСсылка.торо_ПланГрафикРемонта"), "торо_ПланГрафикРемонта", "торо_ЗаявкаНаРемонт");
		
		// Ввод заявки на основании заявки - некорректно. Обрабатываем эту ситуацию
		Если ТипВводимогоДокумента = ТипДокументаОснования Тогда
			ТекстСообщения = НСтр("ru='Нельзя ввести заявку на ремонт на основании заявки.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КоличествоЗаявокНаОснованииЗаявки = КоличествоЗаявокНаОснованииЗаявки + 1;
			Продолжить;
		КонецЕсли;
		
		Если Не ПроверитьВводНаОсновании(ТипДокументаОснования, ТипВводимогоДокумента) Тогда
		    Продолжить;
		КонецЕсли;
		
		СоответствиеИДДокументам.Вставить(ТекущаяСтрока.ID, ТекущаяСтрока.ДокументИсточник);
	КонецЦикла;
	
	Если КоличествоЗаявокНаОснованииЗаявки = ВыделенныеСтроки.Количество() Тогда
	    Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание",СоответствиеИДДокументам);
	ДополнительныеПараметры = Новый Структура("ИмяСобытия, Источник", "СозданДокументНаОснованииОстановочногоРемонта", Тип("ДокументСсылка." + ТипВводимогоДокумента));
	ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, ДополнительныеПараметры);
	ОткрытьФорму("Документ." + ТипВводимогоДокумента + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВводаНаОсновании()
	ВводНаОсновании.Загрузить(торо_ЗаполнениеДокументовПовторноеИспользование.ПолучитьТаблицуВводаНаОсновании());
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВводНаОсновании(ДокументОснование, ДокументВводимый)
	СтруктураПоиска = Новый Структура("ДокументОснование, ДокументВводимый", ДокументОснование, ДокументВводимый);
	МассивСтрок = ВводНаОсновании.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВызватьОбработчикОповещения(Результат, ДополнительныеПараметры) Экспорт
	ОбработкаОповещения(ДополнительныеПараметры.ИмяСобытия, Неопределено, ДополнительныеПараметры.Источник);
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыПриАктивизацииСтроки(Элемент)
	ВыделенныеСтроки = Элементы.СвязанныеРемонты.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		ТекущиеДанные = Элементы.СвязанныеРемонты.ТекущиеДанные;
		ТипДокументаОснования = ?(ТипЗнч(ТекущиеДанные.ДокументИсточник) = Тип("ДокументСсылка.торо_ПланГрафикРемонта"), "торо_ПланГрафикРемонта", "торо_ЗаявкаНаРемонт");
		ВводНаряда = ПроверитьВводНаОсновании(ТипДокументаОснования, "торо_НарядНаВыполнениеРемонтныхРабот") И ФОИспользоватьНаряды;
		ВводАкта = ПроверитьВводНаОсновании(ТипДокументаОснования, "торо_АктОВыполненииЭтапаРабот");
	Иначе
		ЕстьЗаявки = Ложь;
		ЕстьППР = Ложь;
		Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		    ТекущиеДанные = Объект.СвязанныеРемонты.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ТипЗнч(ТекущиеДанные.ДокументИсточник) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			    ЕстьЗаявки = Истина;
			Иначе
				ЕстьППР = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ВводНаряда = (ЕстьЗаявки И ПроверитьВводНаОсновании("торо_ЗаявкаНаРемонт", "торо_НарядНаВыполнениеРемонтныхРабот")
						Или ЕстьППР И ПроверитьВводНаОсновании("торо_ПланГрафикРемонта", "торо_НарядНаВыполнениеРемонтныхРабот"))
						И ФОИспользоватьНаряды;
		ВводАкта = (ЕстьЗаявки И ПроверитьВводНаОсновании("торо_ЗаявкаНаРемонт", "торо_АктОВыполненииЭтапаРабот")
						Или ЕстьППР И ПроверитьВводНаОсновании("торо_ПланГрафикРемонта", "торо_АктОВыполненииЭтапаРабот"));
	КонецЕсли;
	
	Элементы.СвязанныеРемонтыВвестиНарядНаВыполнениеРемонтныхРабот.Видимость = ВводНаряда;
	Элементы.СвязанныеРемонтыКонтекстноеМенюВвестиНарядНаВыполнениеРемонтныхРабот.Видимость = ВводНаряда;
	Элементы.СвязанныеРемонтыВвестиАктОВыполненииЭтапаРабот.Видимость = ВводАкта;
	Элементы.СвязанныеРемонтыКонтекстноеМенюВвестиАктОВыполненииЭтапаРабот.Видимость = ВводАкта;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГарантийностьОсновного()
	
	Если ФОИспользоватьГарантии Тогда
		Объект.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(Объект.ОбъектРемонта, Объект.ДатаНачалаРемонта, Объект.ДатаОкончанияРемонта);
		Элементы.ДекорацияГарантийныйРемонт.Видимость = Объект.ГарантийныйРемонт;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьОстановочныеРемонты(ИДРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК IDЗависимого
	|ИЗ
	|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(
	|			,
	|			IDЗависимого = &IDЗависимого
	|				И Регистратор <> &Регистратор
	|				И Отвязан = ЛОЖЬ) КАК торо_ОстановочныеРемонтыСрезПоследних";
	
	Запрос.УстановитьПараметр("IDЗависимого",ИДРемонта);
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Возврат Выборка.Следующий();
	
КонецФункции


#КонецОбласти
