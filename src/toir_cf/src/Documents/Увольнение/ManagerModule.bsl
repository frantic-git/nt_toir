#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ об увольнении
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.торо_ПечатьКадровыхПриказов";
	КомандаПечати.Идентификатор = "ПФ_MXL_Т8";
	КомандаПечати.Представление = НСтр("ru = 'Приказ об увольнении'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ПечатьДокументовБезПредварительногоПросмотра",
		Ложь);
		
КонецПроцедуры

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет структуру - описание документа для формирования печатной формы расчета среднего заработка.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в 
//		Обработки.ПечатьРасчетаСреднегоЗаработка.ОписаниеДокументаРасчитывающегоСреднийЗаработок.
//
Процедура ЗаполнитьОписаниеДокументаРасчитывающегоСреднийЗаработок(ОписаниеДокумента) Экспорт
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	ОписаниеДокумента.Вставить("ИмяДокумента", МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", МетаданныеДокумента.Синоним);
КонецПроцедуры 

// Заполняет структуру - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//   ПараметрыФормирования 	- структура, определяется в Обработки.
//							ПечатьРасчетаСреднегоЗаработка.
//							ПараметрыФормированияПечатнойФормыРасчетаСреднегоЗаработка.
//	 Ссылка 				- печатаемый документ.
//
Процедура ЗаполнитьДанныеДокументаДляПечатиРасчетаСреднегоЗаработка(Ссылка, ДанныеДокумента) Экспорт
	
	РеквизитыДокумента = "Организация,Сотрудник,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,Дата,Номер,ВидРасчетаКомпенсацииУдержанияОтпуска";
	
	ДанныеРеквизитовДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, РеквизитыДокумента);
	
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, ДанныеРеквизитовДокумента);
	
	ДанныеДокумента.Вставить("НачалоРасчетногоПериода", 	ДанныеРеквизитовДокумента.ПериодРасчетаСреднегоЗаработкаНачало);
	ДанныеДокумента.Вставить("ОкончаниеРасчетногоПериода", 	ДанныеРеквизитовДокумента.ПериодРасчетаСреднегоЗаработкаОкончание);
	ДанныеДокумента.Вставить("НомерДокумента", 				ДанныеРеквизитовДокумента.Номер);
	ДанныеДокумента.Вставить("ДатаДокумента", 				ДанныеРеквизитовДокумента.Дата);
	ДанныеДокумента.Вставить("Начисление", 					ДанныеРеквизитовДокумента.ВидРасчетаКомпенсацииУдержанияОтпуска);
	ДанныеДокумента.Вставить("МассивСотрудников",  			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРеквизитовДокумента.Сотрудник));
	ДанныеДокумента.Вставить("ИспользоватьСреднеЧасовойЗаработок",	ИспользоватьСреднечасовойЗаработок(Ссылка));
	
КонецПроцедуры

Функция ИспользоватьСреднечасовойЗаработок(Ссылка)
	Возврат Ложь
КонецФункции 

#КонецОбласти

Функция КадровыеСобытияУвольнение(ДокументОбъект) Экспорт
	
	// Создаем таблицу событий
	КадровыеСобытия = Новый ТаблицаЗначений;
	КадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	КадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КадровыеСобытия.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КадровыеСобытия.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	
	КадровыеСобытия.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	// Заполняем таблицу
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Увольнение") Тогда
		НовоеСобытие = КадровыеСобытия.Добавить();
		НовоеСобытие.Сотрудник = ДокументОбъект.Сотрудник;
		НовоеСобытие.ДатаСобытия = КонецДня(ДокументОбъект.ДатаУвольнения) + 1;
		НовоеСобытие.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
		Если Не ЗначениеЗаполнено(ДокументОбъект.ФизическоеЛицо) Тогда
			ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Сотрудник, "ФизическоеЛицо");
		Иначе
			ФизическоеЛицо = ДокументОбъект.ФизическоеЛицо;
		КонецЕсли;
		НовоеСобытие.ФизическоеЛицо = ФизическоеЛицо;

		НовоеСобытие.Организация = ДокументОбъект.Организация;
		
		Возврат КадровыеСобытия;
	КонецЕсли;
	
    Для каждого СтрокаТЧ Из ДокументОбъект.Сотрудники Цикл
	    НовоеСобытие = КадровыеСобытия.Добавить();
		НовоеСобытие.Сотрудник = СтрокаТЧ.Сотрудник;
		НовоеСобытие.ДатаСобытия = КонецДня(СтрокаТЧ.ДатаУвольнения) + 1;
		НовоеСобытие.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ФизическоеЛицо) Тогда
			ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Сотрудник, "ФизическоеЛицо");
		Иначе
			ФизическоеЛицо = СтрокаТЧ.ФизическоеЛицо;
		КонецЕсли;
		НовоеСобытие.ФизическоеЛицо = ФизическоеЛицо;
		
		НовоеСобытие.Организация = ДокументОбъект.Организация;
	КонецЦикла;
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция СписокПодходящихСорудников(ДатаНачала, ДатаОкончания, Организация, Текст) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Сотрудники
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Наименование ПОДОБНО &Текст + ""%""
	               |	И Сотрудники.ГоловнаяОрганизация = &Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТ_ПринятыеСотрудники
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Дата, ) КАК КадроваяИсторияСотрудниковСрезПоследних
	               |ГДЕ
	               |	(КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = &Прием
	               |			ИЛИ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = &Перемещение)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТ_УволенныеСотрудники
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	               |ГДЕ
	               |	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = &Увольнение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТ_Сотрудники КАК ВТ_Сотрудники
	               |ГДЕ
	               |	ВТ_Сотрудники.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТ_ПринятыеСотрудники.Сотрудник КАК Сотрудник
	               |			ИЗ
	               |				ВТ_ПринятыеСотрудники КАК ВТ_ПринятыеСотрудники)
	               |	И НЕ ВТ_Сотрудники.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_УволенныеСотрудники.Сотрудник КАК Сотрудник
	               |				ИЗ
	               |					ВТ_УволенныеСотрудники КАК ВТ_УволенныеСотрудники)";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаНачала));
	Запрос.УстановитьПараметр("Прием", Перечисления.ВидыКадровыхСобытий.Прием);
	Запрос.УстановитьПараметр("Перемещение", Перечисления.ВидыКадровыхСобытий.Перемещение);
	Запрос.УстановитьПараметр("Увольнение", Перечисления.ВидыКадровыхСобытий.Увольнение);
	
	резЗапроса = Запрос.Выполнить();
	
	Если резЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат резЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СписокПодходящихСорудниковДляПроведения(ДокументОбъект, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Сотрудники.Сотрудник КАК Сотрудник,
				   |	Сотрудники.ДатаУвольнения КАК ДатаУвольнения
	               |ПОМЕСТИТЬ ВТ_ДанныеДокумента
	               |ИЗ
	               |	&Сотрудники КАК Сотрудники
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудников.Период КАК ДатаПриема,
	               |	КадроваяИсторияСотрудников.Регистратор КАК РегистраторПриема
	               |ПОМЕСТИТЬ ВТ_ПринятыеСотрудники
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	               |ГДЕ
	               |	КадроваяИсторияСотрудников.ВидСобытия = &Прием
	               |	И КадроваяИсторияСотрудников.Сотрудник В
	               |			(ВЫБРАТЬ
	               |				ВТ_ДанныеДокумента.Сотрудник
	               |			ИЗ
	               |				ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	               |	МАКСИМУМ(КадроваяИсторияСотрудников.Регистратор) КАК РегистраторПеревода
	               |ПОМЕСТИТЬ ВТ_ПереведенныеСотрудники
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
				   |		ПО КадроваяИсторияСотрудников.Сотрудник = ВТ_ДанныеДокумента.Сотрудник
				   |			И КадроваяИсторияСотрудников.Период > ВТ_ДанныеДокумента.ДатаУвольнения
	               |ГДЕ
	               |	КадроваяИсторияСотрудников.ВидСобытия = &Перемещение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КадроваяИсторияСотрудников.Сотрудник
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Регистратор КАК РегистраторУвольнения,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Период КАК ДатаУвольнения
	               |ПОМЕСТИТЬ ВТ_УволенныеСотрудники
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	               |			,
	               |			НЕ Регистратор = &Регистратор
	               |				И Сотрудник В
	               |					(ВЫБРАТЬ
	               |						ВТ_ДанныеДокумента.Сотрудник
	               |					ИЗ
	               |						ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента)) КАК КадроваяИсторияСотрудниковСрезПоследних
	               |ГДЕ
	               |	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = &Увольнение
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеДокумента.Сотрудник КАК Сотрудник,
	               |	ЕСТЬNULL(ВТ_ПринятыеСотрудники.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриема,
	               |	ЕСТЬNULL(ВТ_ПринятыеСотрудники.РегистраторПриема, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) КАК РегистраторПриема,
	               |	ЕСТЬNULL(ВТ_ПереведенныеСотрудники.РегистраторПеревода, ЗНАЧЕНИЕ(Документ.КадровыйПеревод.ПустаяСсылка)) КАК РегистраторПеревода,
	               |	ЕСТЬNULL(ВТ_УволенныеСотрудники.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
	               |	ЕСТЬNULL(ВТ_УволенныеСотрудники.РегистраторУвольнения, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) КАК РегистраторУвольнения
	               |ИЗ
	               |	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПринятыеСотрудники КАК ВТ_ПринятыеСотрудники
	               |		ПО ВТ_ДанныеДокумента.Сотрудник = ВТ_ПринятыеСотрудники.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПереведенныеСотрудники КАК ВТ_ПереведенныеСотрудники
	               |		ПО ВТ_ДанныеДокумента.Сотрудник = ВТ_ПереведенныеСотрудники.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УволенныеСотрудники КАК ВТ_УволенныеСотрудники
	               |		ПО ВТ_ДанныеДокумента.Сотрудник = ВТ_УволенныеСотрудники.Сотрудник";
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.Увольнение") Тогда
		ТаблицаСотрудников = ДокументОбъект.Сотрудники.Выгрузить();
	Иначе
		ТаблицаСотрудников = Новый ТаблицаЗначений();
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = ДокументОбъект.Сотрудник;
		НоваяСтрока.ДатаУвольнения = ДокументОбъект.ДатаУвольнения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Сотрудники", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("Прием", Перечисления.ВидыКадровыхСобытий.Прием);
	Запрос.УстановитьПараметр("Перемещение", Перечисления.ВидыКадровыхСобытий.Перемещение);
	Запрос.УстановитьПараметр("Увольнение", Перечисления.ВидыКадровыхСобытий.Увольнение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	КадровыеСобытия = Документы.Увольнение.КадровыеСобытияУвольнение(ДокументОбъект);
	СформироватьКадровыеДвижения(ДокументОбъект, КадровыеСобытия);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверкаСтрокиСписочногоДокумента = ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаСтрокиСписочногоДокумента");
	Если ПроверкаСтрокиСписочногоДокумента Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Дата");
		Регистратор = ДокументОбъект.ДополнительныеСвойства.СсылкаНаОбъект;
	Иначе
		Регистратор = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ПроверяетсяУвольнение = (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Увольнение"));
	
	Если ПроверяетсяУвольнение Тогда
		ПроверяемаяКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
	Иначе
		ПроверяемаяКоллекция = ДокументОбъект.Сотрудники;
	КонецЕсли;
	
	СотрудникиДокумента = Новый Соответствие();
	ДанныеСотрудников = Документы.Увольнение.СписокПодходящихСорудниковДляПроведения(ДокументОбъект, Регистратор);
	
	Для каждого ПроверяемаяСтруктура Из ПроверяемаяКоллекция Цикл
		
		Если НЕ ЗначениеЗаполнено(ПроверяемаяСтруктура.Сотрудник) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Проверка дублирования строк по сотруднику списочного документа
		Если Не ПроверяетсяУвольнение Тогда
			
			НомерСтроки = СотрудникиДокумента.Получить(ПроверяемаяСтруктура.Сотрудник);
			Если НомерСтроки <> Неопределено Тогда
				
				ШаблонСообщения = НСтр("ru = 'По сотруднику %1 уже оформлено увольнение в строке номер %2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроверяемаяСтруктура.Сотрудник, НомерСтроки);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "Объект.Сотрудники[" + (ПроверяемаяСтруктура.НомерСтроки - 1) + "].Сотрудник", , Отказ);
				
			Иначе
				СотрудникиДокумента.Вставить(ПроверяемаяСтруктура.Сотрудник, ПроверяемаяСтруктура.НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Сотрудник", ПроверяемаяСтруктура.Сотрудник);
		НайденныеСтроки = ДанныеСотрудников.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСотрудника = НайденныеСтроки[0];
		
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.РегистраторПриема) Тогда
			ШаблонСообщения = НСтр("ru = 'Сотрудник ""%1"" не принят на работу! '");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроверяемаяСтруктура.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ИначеЕсли ПроверяемаяСтруктура.ДатаУвольнения < ДанныеСотрудника.ДатаПриема Тогда
			ШаблонСообщения = НСтр("ru = 'Сотрудник ""%1"" не может быть уволен %2, т.к. принят на работу %3 (""%4"")! '");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроверяемаяСтруктура.Сотрудник, ПроверяемаяСтруктура.ДатаУвольнения, ДанныеСотрудника.ДатаПриема, ДанныеСотрудника.РегистраторПриема);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.РегистраторПеревода) Тогда
			ШаблонСообщения = НСтр("ru = 'Сотрудник ""%1"" не может быть уволен, т.к. есть более поздние кадровые документы (""%2"")'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроверяемаяСтруктура.Сотрудник, ДанныеСотрудника.РегистраторПеревода);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если Не Отказ И ЗначениеЗаполнено(ДанныеСотрудника.РегистраторУвольнения) Тогда
			ШаблонСообщения = НСтр("ru = 'Сотрудник ""%1"" уже уволен %2 документом ""%3""! '");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроверяемаяСтруктура.Сотрудник, ДанныеСотрудника.ДатаУвольнения, ДанныеСотрудника.РегистраторУвольнения);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет запись движений по кадровому учету
//
Процедура СформироватьКадровыеДвижения(ДокуметОбъект, КадровыеСобытия) Экспорт
	
	КадровыйУчет.СформироватьКадровыеДвижения(ДокуметОбъект, ДокуметОбъект.Движения, КадровыеСобытия);
	Если ДокуметОбъект.Движения.КадроваяИсторияСотрудников.Записывать Тогда
		ДокуметОбъект.Движения.КадроваяИсторияСотрудников.Записать();
		ДокуметОбъект.Движения.КадроваяИсторияСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
