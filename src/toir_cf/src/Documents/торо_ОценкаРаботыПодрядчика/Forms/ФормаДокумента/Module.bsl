#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда
			СписокКонтрагентов = ПолучитьСписокКонтрагентовИзАкта(Параметры.Основание);
			Если СписокКонтрагентов.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'В документе ни для одного из ремонтов не указан подрядчик (таблица ""Исполнители по ремонту""). Документ ""Оценка работы подрядчика"" не может быть создан.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				
				Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	УстановитьПараметрыВыбораКонтрагентов();
	УправлениеФормой(ЭтаФорма);
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.ОбъектыРемонта.Выгрузить());
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ОценкаРаботыПодрядчика);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.АктОВыполненииРабот) Тогда
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ВыбратьКонтрагента(Отказ);
		ИначеЕсли Объект.ОбъектыРемонта.Количество() = 0 Тогда
			ДобавитьРемонты(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АктОВыполненииРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтарыйАкт = Объект.АктОВыполненииРабот;
	УстановитьПараметрыВыбораАктов();

КонецПроцедуры

&НаКлиенте
Процедура АктОВыполненииРаботПриИзменении(Элемент)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("АктОВыполненииРаботОчисткаЗавершение", ЭтотОбъект, Новый Структура("ПриИзменении", Истина)), НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура АктОВыполненииРаботОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("АктОВыполненииРаботОчисткаЗавершение", ЭтотОбъект, Новый Структура("ПриИзменении", Ложь)), НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаДляВсехРаботПриИзменении(Элемент)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОценкаДляВсехРаботПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Табличные части оценок и критериев будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтарыйКонтрагент = Объект.Контрагент;
	УстановитьПараметрыВыбораКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ДополнительныеПараметры = Новый Структура("ПриИзменении", Истина);
	
	Если НачальноеЗаполнение Тогда
	    НачальноеЗаполнение = Ложь;
		Если Не ЗаполнитьРемонтПоКонтрагенту() Тогда
		    ДобавитьРемонты(Неопределено);
		КонецЕсли;
		УстановитьДоступностьКнопок();
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("КонтрагентОчисткаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентОчисткаЗавершение", ЭтотОбъект, Новый Структура("ПриИзменении", Ложь)), НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта

&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			НайдСтроки = Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("ID", ЭлементМассива.ID));
			
			Если Не НайдСтроки.Количество() > 0 Тогда
				НС = Объект.ОбъектыРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ЭлементМассива);
				НС.ID         = ЭлементМассива.ID;
				НС.ВидРемонта = ЭлементМассива.ВидРемонтныхРабот;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;

	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриАктивизацииСтроки(Элемент)
		
	Если Не Объект.ОценкаДляВсехРабот И НЕ Элементы.ОбъектыРемонта.ТекущиеДанные = Неопределено Тогда
		Элементы.ОценкиПодрядчиков.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", Элементы.ОбъектыРемонта.ТекущиеДанные.ID);
		ОценкиПодрядчиковПриАктивизацииСтроки(Элемент);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.ОбъектыРемонта.ТекущиеДанные <> Неопределено Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ID", Элементы.ОбъектыРемонта.ТекущиеДанные.ID);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбъектыРемонтаПередУдалениемЗавершение", ЭтотОбъект, ДопПараметры), НСтр("ru = 'Данные в связанных табличных частях будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОценки

&НаКлиенте
Процедура ПараметрыОценкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.ОценкиПодрядчиков.ТекущиеДанные = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'Не выбран вид оценки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОценкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанныеПараметровОценки = Элементы.ПараметрыОценки.ТекущиеДанные;
	ТекущиеДанныеОценокПодрядчков = Элементы.ОценкиПодрядчиков.ТекущиеДанные;
	
	Если Не ОтменаРедактирования И НоваяСтрока Тогда
		Если Не ТекущиеДанныеПараметровОценки = Неопределено Тогда
			ТекущиеДанныеПараметровОценки.ВидОценки = ТекущиеДанныеОценокПодрядчков.ВидОценки;
			ТекущиеДанныеПараметровОценки.ID        = ТекущиеДанныеОценокПодрядчков.ID;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеПараметровОценки <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанныеПараметровОценки.ЗначениеОценокПоКритериям) Тогда
		
		ТекущиеДанныеПараметровОценки.ЗначениеОценокПоКритериям = Мин(ТекущиеДанныеПараметровОценки.ЗначениеОценокПоКритериям,10);
		
	КонецЕсли;
	
	Если Не ОтменаРедактирования И Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ID, ВидОценки, КритерийОценки", ТекущиеДанныеПараметровОценки.ID, ТекущиеДанныеПараметровОценки.ВидОценки, ТекущиеДанныеПараметровОценки.КритерийОценки)).Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Данный критерий оценки уже был выбран! Выберите другой критерий оценки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОценкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеОценокПодрядчков = Элементы.ОценкиПодрядчиков.ТекущиеДанные;
		ПараметрыВидаОценки = ПолучитьСтрокиМассиваСтруктурой(Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ВидОценки, ID",ТекущиеДанныеОценокПодрядчков.ВидОценки, ТекущиеДанныеОценокПодрядчков.ID)));
		ТекущиеДанныеОценокПодрядчков.Оценка = ПосчитатьОценку(ПараметрыВидаОценки);
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОценкиПодрядчиков
&НаКлиенте
Процедура ОценкиПодрядчиковПриАктивизацииСтроки(Элемент)
	
	Если Не Элементы.ОценкиПодрядчиков.ТекущиеДанные = Неопределено Тогда
		Если Не Объект.ОценкаДляВсехРабот Тогда
			Элементы.ПараметрыОценки.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОценки, ID", Элементы.ОценкиПодрядчиков.ТекущиеДанные.ВидОценки, Элементы.ОценкиПодрядчиков.ТекущиеДанные.ID);
		Иначе
			Элементы.ПараметрыОценки.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОценки", Элементы.ОценкиПодрядчиков.ТекущиеДанные.ВидОценки);
		КонецЕсли;	
	Иначе
		Элементы.ПараметрыОценки.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ID","---------------")); // чтобы отключить отбор
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если (Не Объект.ОценкаДляВсехРабот) И Элементы.ОбъектыРемонта.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран вид ремонтных работ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран контрагент.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования и НоваяСтрока И Не Объект.ОценкаДляВсехРабот Тогда
		Элемент.ТекущиеДанные.ID = Элементы.ОбъектыРемонта.ТекущиеДанные.ID;
	КонецЕсли;
	
	Если Не ОтменаРедактирования И Объект.ОценкиПодрядчиков.НайтиСтроки(Новый Структура("ID, ВидОценки", Элемент.ТекущиеДанные.ID, Элемент.ТекущиеДанные.ВидОценки)).Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Данный вид оценки уже был выбран! Выберите другой вид оценки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ОценкиПодрядчиков.ТекущиеДанные;
	Если Не (Отказ Или ТекДанные = Неопределено) Тогда
		УдаляемыеСтроки = Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ID, ВидОценки", ТекДанные.ID, ТекДанные.ВидОценки));
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Объект.ПараметрыОценки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковВидОценкиПриИзменении(Элемент)
	
	ОтборСтрокПараметров = Элементы.ПараметрыОценки.ОтборСтрок;
	ПредыдущийВидОценки = Неопределено;
	ОтборСтрокПараметров.Свойство("ВидОценки", ПредыдущийВидОценки);
	ТекДанные = Элементы.ОценкиПодрядчиков.ТекущиеДанные;
	
	Если Не (ПредыдущийВидОценки = Неопределено ИЛИ ТекДанные = Неопределено ИЛИ ПредыдущийВидОценки = ТекДанные.ВидОценки) Тогда
		ИзменяемыеСтроки = Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ID, ВидОценки", ТекДанные.ID, ПредыдущийВидОценки));
		Для каждого ИзменяемаяСтрока Из ИзменяемыеСтроки Цикл
			ИзменяемаяСтрока.ВидОценки = ТекДанные.ВидОценки;
		КонецЦикла;
		ОценкиПодрядчиковПриАктивизацииСтроки(Элементы.ОценкиПодрядчиков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьДоступностьКнопокПараметровОценки();
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковПослеУдаления(Элемент)
	УстановитьДоступностьКнопокПараметровОценки();
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковПриИзменении(Элемент)
	УстановитьДоступностьКнопокПараметровОценки();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ДобавитьРемонты(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.АктОВыполненииРабот) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Акт о выполнении этапа работ"".'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Контрагент"".'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		ОткрытьФорму("Обработка.торо_ВыборРемонтаИзПланГрафика.Форма",Новый Структура("СсылкаНаАкт, Контрагент", Объект.АктОВыполненииРабот, Объект.Контрагент), Элементы.ОбъектыРемонта,, ВариантОткрытияОкна.ОтдельноеОкно,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ГрОбъектыРемонта.Видимость = Не Объект.ОценкаДляВсехРабот;
	
	Если ЗначениеЗаполнено(Объект.АктОВыполненииРабот) Тогда
		Элементы.Контрагент.Доступность = Истина;
	Иначе
		Элементы.Контрагент.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаДляВсехРаботПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
		Элементы.ОценкиПодрядчиков.ОтборСтрок = Неопределено;
	Иначе
		Объект.ОценкаДляВсехРабот = Не Объект.ОценкаДляВсехРабот;
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокиМассиваСтруктурой(ПараметрыВидаОценки)

	Массив = Новый Массив;
		
	Для каждого Элемент Из ПараметрыВидаОценки Цикл
		
		Структура = Новый Структура();
		
		Структура.Вставить("ID"                        , Элемент.ID);
		Структура.Вставить("КритерийОценки"            , Элемент.КритерийОценки);
		Структура.Вставить("ЗначениеОценокПоКритериям" , Элемент.ЗначениеОценокПоКритериям);		
		
		Массив.Добавить(Структура);
	
	КонецЦикла; 

	Возврат Массив;
	
КонецФункции // ПолучитьСтрокуСтруктурой()

&НаСервереБезКонтекста
Функция ПосчитатьОценку(ПараметрыВидаОценки)

	Сумма = 0;
	Количество = 0;
	
	
	Для Каждого Стр Из ПараметрыВидаОценки Цикл
		
		Сумма      = Сумма + (Стр.ЗначениеОценокПоКритериям * Стр.КритерийОценки.СтепеньВлияния);
		Количество = Количество + Стр.КритерийОценки.СтепеньВлияния;
				
	КонецЦикла;
	
	Если Количество <> 0 Тогда
		Возврат Сумма / Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораКонтрагентов()

	Если ЗначениеЗаполнено(Объект.АктОВыполненииРабот) Тогда
		СписокКонтрагентов = ПолучитьСписокКонтрагентовИзАкта(Объект.АктОВыполненииРабот);
		
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СписокКонтрагентов)));
		
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКонтрагентовИзАкта(СсылкаНаАкт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Исполнитель КАК Контрагент
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ИсполнителиПоРемонтам КАК торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Ссылка = &Ссылка
	|	И торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Исполнитель ССЫЛКА Справочник.Контрагенты";

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаАкт);

	Выборка = Запрос.Выполнить().Выбрать();

	МассивКонтрагентов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивКонтрагентов.Добавить(Выборка.Контрагент);
	КонецЦикла;

	Возврат МассивКонтрагентов;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораАктов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ИсполнителиПоРемонтам КАК торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Ссылка.ЗавершитьРемонтныеРаботы = ИСТИНА
	|	И торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Исполнитель ССЫЛКА Справочник.Контрагенты";

	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСсылок)));
	
	Элементы.АктОВыполненииРабот.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура АктОВыполненииРаботОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьТабличныеЧасти();
		
		Объект.Контрагент = Неопределено;
		Если Не ДополнительныеПараметры.ПриИзменении Тогда
			Объект.АктОВыполненииРабот = Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыбратьКонтрагента();
		КонецЕсли;
		
	Иначе
		Если ДополнительныеПараметры.ПриИзменении Тогда
			Объект.АктОВыполненииРабот = СтарыйАкт;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьКнопок();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьТабличныеЧасти();
		
		Если Не ДополнительныеПараметры.ПриИзменении Тогда
			Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		
		Если ДополнительныеПараметры.ПриИзменении Тогда
			Объект.Контрагент = СтарыйКонтрагент;	
		КонецЕсли;
		
    КонецЕсли;

	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
        ID = ДополнительныеПараметры.ID;
		
        НайдСтрокиОбъектыРемонта = Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("ID", ID));
        
        Для каждого Строка Из НайдСтрокиОбъектыРемонта Цикл
            
            Объект.ОбъектыРемонта.Удалить(Строка);
            
        КонецЦикла;		
		        
        НайдСтрокиПараметровОценок = Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ID", ID));
        
        Для каждого Строка Из НайдСтрокиПараметровОценок Цикл
            
            Объект.ПараметрыОценки.Удалить(Строка);
            
        КонецЦикла;
        
        НайдСтрокиОценок = Объект.ОценкиПодрядчиков.НайтиСтроки(Новый Структура("ID", ID));
        
        Для каждого Строка Из НайдСтрокиОценок Цикл
            
            Объект.ОценкиПодрядчиков.Удалить(Строка);
            
        КонецЦикла;
      УстановитьДоступностьКнопок();  
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныеЧасти()
	
	Объект.ПараметрыОценки.Очистить();
	Объект.ОценкиПодрядчиков.Очистить();
	Объект.ОбъектыРемонта.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРемонтПоКонтрагенту()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МАКСИМУМ(торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID) КАК ID,
	               |	МАКСИМУМ(торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта) КАК ОбъектРемонта,
	               |	МАКСИМУМ(торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ВидРемонтныхРабот) КАК ВидРемонта
	               |ИЗ
	               |	Документ.торо_АктОВыполненииЭтапаРабот.ИсполнителиПоРемонтам КАК торо_АктОВыполненииЭтапаРаботИсполнителиПоРемонтам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	               |		ПО торо_АктОВыполненииЭтапаРаботИсполнителиПоРемонтам.РемонтыОборудования_ID = торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID
	               |ГДЕ
	               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка
	               |	И ВЫРАЗИТЬ(торо_АктОВыполненииЭтапаРаботИсполнителиПоРемонтам.Исполнитель КАК Справочник.Контрагенты) = &Исполнитель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID) = 1";

	Запрос.УстановитьПараметр("Ссылка", Объект.АктОВыполненииРабот);
	Запрос.УстановитьПараметр("Исполнитель", Объект.Контрагент);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВыборкаРемонтов = РезультатЗапроса.Выбрать();
	ВыборкаРемонтов.Следующий();
	ЗаполнитьЗначенияСвойств(Объект.ОбъектыРемонта.Добавить(), ВыборкаРемонтов);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВыбратьКонтрагента(Отказ = Ложь)
	СписокКонтрагентов = ПолучитьСписокКонтрагентовИзАкта(Объект.АктОВыполненииРабот);
	
	Если СписокКонтрагентов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В документе ни для одного из ремонтов не указан подрядчик (таблица ""Исполнители по ремонту""). Документ ""Оценка работы подрядчика"" не может быть создан.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
		Возврат;
	КонецЕсли;
	
	НачальноеЗаполнение = Истина;
			
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();

	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокКонтрагентов;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
    ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	УстановитьДоступностьКнопокОценкиПодрядчиков();
	УстановитьДоступностьКнопокПараметровОценки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокОценкиПодрядчиков()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ОценкиПодрядчиковДобавить");
	
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.ОбъектыРемонта,СписокЭлементов,ЭтаФорма, ПравоРедактирование);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокПараметровОценки()
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ПараметрыОценкиДобавить");

	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(Объект.ОценкиПодрядчиков,СписокЭлементов,ЭтаФорма, ПравоРедактирование);
	
КонецПроцедуры

#КонецОбласти