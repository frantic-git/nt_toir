#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда
			ЗаполнитьВходитВСоставПоТекущейИерархии();
		КонецЕсли;
		ПроверитьНаличиеГарантий(Объект.ОбъектРемонта);
	Иначе
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.ИзменитьИерархию.Заголовок = Объект.ТекСтруктураИерархии;
	ПеречитатьИнвентарныйНомер(Истина);	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьВидимостьДоступность();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПараметрыОповещения = Новый Структура("ОбъектРемонта, ДатаВводаВЭксплуатацию", Объект.ОбъектРемонта,Объект.ДатаВводаВЭксплуатацию);
	Оповестить("СОЗДАН_ДОКУМЕНТ_ПРИНЯТИЕ_К_УЧЕТУ", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектРемонтаПриИзменении(Элемент)
	ЗаполнитьВходитВСоставПоТекущейИерархии();
	ПеречитатьИнвентарныйНомер(Истина);
	ПроверитьНаличиеГарантий(Объект.ОбъектРемонта);
	ОбновитьПодчиненныеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда
		ПараметрыФормы = Новый Структура("Ключ, СтруктураИерархии", Объект.ОбъектРемонта, Объект.ТекСтруктураИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	МассивДоступныхСтатусов = Новый Массив;
	МассивДоступныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету"));
	МассивДоступныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыОРВУчете.СнятоСУчета"));
	
	ПараметрыОтбора = Новый Структура("СписокСтатусов", МассивДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии", Объект.ТекСтруктураИерархии);
	ПараметрыОтбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);

	Если ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда
		ПараметрыОтбора.Вставить("ТекущаяСтрока", Объект.ОбъектРемонта);
	КонецЕсли;
		
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыОтбора, Элемент,,
		ВариантОткрытияОкна.ОтдельноеОкно,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ИзменитьИерархию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИерахии", ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.ТекСтруктураИерархии);

	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьИнвентарныйНомер(Команда)
	ВидимостьПоляИнвНомер = ПроверитьЗаполненностьИнвНомераНаСервере(Объект.ОбъектРемонта);
	Элементы.ОбъектРемонтаИнвентарныйНомер.Видимость = ВидимостьПоляИнвНомер;
	Элементы.Декорация1.Видимость                    = Не ВидимостьПоляИнвНомер;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодчиненные(Команда)
	ОбновитьПодчиненныеНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбработкаВыбораИерахии(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		ЭтаФорма.Модифицированность = Истина;
		Объект.ТекСтруктураИерархии = Результат;
		Элементы.ИзменитьИерархию.Заголовок = Объект.ТекСтруктураИерархии;
		
		Если ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда
			ЗаполнитьВходитВСоставПоТекущейИерархии();
		Иначе
			Объект.ВходитВСостав = "";
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОТекущемПоложенииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СтруктурыОР.Ссылка КАК Ссылка,
	               |	торо_СтруктурыОР.ИзменяетсяДокументами КАК ИзменяетсяДокументами,
	               |	торо_СтруктурыОР.СтроитсяАвтоматически КАК СтроитсяАвтоматически,
	               |	торо_СтруктурыОР.РеквизитОР КАК РеквизитОР,
	               |	торо_СтруктурыОР.ТипРеквизитаОР КАК ТипРеквизитаОР
	               |ИЗ
	               |	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	               |ГДЕ
	               |	НЕ торо_СтруктурыОР.ЭтоГруппа";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СписокИерархий.Очистить();
	ТаблицаТекущихПоложений.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		СписокИерархий.Добавить(Выборка.Ссылка);
		
		НС = ТаблицаТекущихПоложений.Добавить();
		НС.СтруктураИерархии = Выборка.Ссылка;
		
		СписокРодителей = Новый ТаблицаЗначений;
		СписокРодителей.Колонки.Добавить("Номер");
		СписокРодителей.Колонки.Добавить("ТекстовоеОписание");
		
		МассивРодителей = Новый Массив;
		торо_РаботаСИерархией20.ЗаполнитьМассивРодителейОбъектаРемонта(Объект.ОбъектРемонта, МассивРодителей, Выборка.Ссылка);
		
		Номер = 1;
		Для каждого Родитель из МассивРодителей Цикл
			НоваяСтрока = СписокРодителей.Добавить();
			НоваяСтрока.ТекстовоеОписание = Строка(Родитель);
			НоваяСтрока.Номер = Номер;
			Номер = Номер + 1;
		КонецЦикла;
		
		СписокРодителей.Сортировать("Номер Убыв");
		
		ТекстовоеОписаниеПоложения = "";
		
		КолТабов = 0;
		
		Для каждого Строка Из СписокРодителей Цикл
			
			КолОтступов = КолТабов;
			СтрокаОтступа = "";
			
			Пока Не КолОтступов = 0 Цикл
				СтрокаОтступа = СтрокаОтступа + "	";
				КолОтступов = КолОтступов - 1;
			КонецЦикла;
			
			Если КолТабов = 0 Тогда
				ТекстовоеОписаниеПоложения = СтрокаОтступа + Строка(Строка.ТекстовоеОписание);
			Иначе
				ТекстовоеОписаниеПоложения = ТекстовоеОписаниеПоложения + Символы.ПС + СтрокаОтступа + Строка(Строка.ТекстовоеОписание);
			КонецЕсли;
			
			КолТабов = КолТабов + 1;
			
		КонецЦикла;
		
		НС.ТекстовоеОписаниеПоложения = ТекстовоеОписаниеПоложения;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВходитВСоставПоТекущейИерархии()
	
	ЗаполнитьДанныеОТекущемПоложенииНаСервере();

	МассивСтрок = ТаблицаТекущихПоложений.НайтиСтроки(Новый Структура("СтруктураИерархии", Объект.ТекСтруктураИерархии));
	Если МассивСтрок.Количество() > 0 Тогда
		Объект.ВходитВСостав = МассивСтрок[0].ТекстовоеОписаниеПоложения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьДоступность()
	
	Если Объект.Проведен Тогда
		Элементы.Шапка.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Шапка.ТолькоПросмотр = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполненностьИнвНомераНаСервере(ОР)
	Возврат ЗначениеЗаполнено(ОР.ИнвентарныйНомер);	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеГарантий(ОбъектРемонта)
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
		ТаблицаГарантий = торо_ГарантийноеОбслуживание.ПолучитьТаблицуГарантий(ОбъектРемонта);
		
		Если ТаблицаГарантий.Количество() = 0 Тогда   
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" не заполнены сведения о гарантиях.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодчиненныеНаКлиенте()
	Объект.СписокПодчиненныхПринятыхКУчету.Очистить();
	Если ЗначениеЗаполнено(Объект.ОбъектРемонта) Тогда
		СписокПодчиненных = ПолучитьСписокПодчиненных(Объект.ОбъектРемонта, Объект.Ссылка);
		Для каждого Элемент Из СписокПодчиненных Цикл
			НС = Объект.СписокПодчиненныхПринятыхКУчету.Добавить();
			НС.ОбъектРемонта = Элемент.ОР;
			НС.ПринятьКУчету = Элемент.НеПринятКУчету;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПодчиненных(ОР, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СтруктурыОР.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	               |ГДЕ
	               |	НЕ торо_СтруктурыОР.ЭтоГруппа";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВсехПодчиненных = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивПодчиненных = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(ОР, Выборка.Ссылка);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВсехПодчиненных, МассивПодчиненных);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
	|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВТ_ОР
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&МассивОР)
	|	И НЕ торо_ОбъектыРемонта.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР
	|ПОМЕСТИТЬ ВТ_СтатусыОР
	|ИЗ
	|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|					(ВЫБРАТЬ
	|						ВТ_ОР.ОбъектРемонта КАК ОбъектРемонта
	|					ИЗ
	|						ВТ_ОР КАК ВТ_ОР)
	|				И Регистратор <> &Ссылка) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОР.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ОР.ЭтоГруппа КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА ВТ_СтатусыОР.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПринятоКУчету)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеПринятКУчету
	|ИЗ
	|	ВТ_ОР КАК ВТ_ОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыОР КАК ВТ_СтатусыОР
	|		ПО ВТ_ОР.ОбъектРемонта = ВТ_СтатусыОР.ОбъектРемонта";
	
	Запрос.УстановитьПараметр("МассивОР", МассивВсехПодчиненных);
	Запрос.УстановитьПараметр("ПринятКУчету", Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивРезультата = Новый Массив;
	Для каждого Элемент Из Результат Цикл
		МассивРезультата.Добавить(Новый Структура("ОР,НеПринятКУчету",Элемент.ОбъектРемонта, Элемент.НеПринятКУчету));
	КонецЦикла;
		
	Возврат МассивРезультата;
	
КонецФункции

&НаКлиенте
Процедура ВыделитьВсеПодчиненные(Команда)
	Для Каждого Элемент Из Объект.СписокПодчиненныхПринятыхКУчету Цикл
		Элемент.ПринятьКУчету = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеВсеПодчиненные(Команда)
	Для Каждого Элемент Из Объект.СписокПодчиненныхПринятыхКУчету Цикл
		Элемент.ПринятьКУчету = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


