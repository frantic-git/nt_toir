#Область ОписаниеПеременных
&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
		
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМТО.торо_ЗаказПоставщику;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента,,, Истина);
	торо_РаботаССогласованиями.ДобавитьУсловноеОформлениеДляДереваСогласования(ЭтаФорма);
	// Согласование --
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложения.ПриСозданииПодсказокФормы(ЭтотОбъект, Элементы.ПодсказкиБизнесСеть);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

	Если Параметры.ЗначенияЗаполнения.Свойство("ИзРабочегоМестаМТО") Тогда
		ИзРабочегоМестаМТО = Параметры.ЗначенияЗаполнения.ИзРабочегоМестаМТО;	
	Иначе
		ИзРабочегоМестаМТО = Ложь;
	КонецЕсли;
		
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложенияКлиент.ОбновитьПодсказкуФормы(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

	Если ИзРабочегоМестаМТО И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--

	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы И ИзРабочегоМестаМТО Тогда 
		ПараметрыОбновления = Новый Структура("Проведен, Ссылка", Объект.Проведен, Объект.Ссылка);
		Оповестить("ЗаказПоставщикуЗакрытие", ПараметрыОбновления); 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

// ЭлектронноеВзаимодействие.ТорговыеПредложения

&НаКлиенте
Процедура Подключаемый_ПодсказкиБизнесСетьНажатие(Элемент)
	
	ТорговыеПредложенияКлиент.ОткрытьФормуПодсказок(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Склад",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.Склад);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	масПараметр = ПолучитьМассивТиповНоменклаутры();
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",	масПараметр);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПоМаксимумуЗаМесяц(Команда)	
	РасчитатьСтатистикуЗаМесяц("МАКСИМУМ");
	ПересчитатьРекомендуемоеКоличество();
КонецПроцедуры

&НаКлиенте
Процедура ПоМинимумуЗаМесяц(Команда)
	РасчитатьСтатистикуЗаМесяц("МИНИМУМ");
	ПересчитатьРекомендуемоеКоличество();
КонецПроцедуры

&НаКлиенте
Процедура ПоСреднемуЗаМесяц(Команда)
	РасчитатьСтатистикуЗаМесяц("СРЕДНЕЕ");
	ПересчитатьРекомендуемоеКоличество();
КонецПроцедуры

&НаКлиенте
Процедура ПоПрошломуГоду(Команда)
	РасчитатьСтатистикуПоПрошломуГоду();
КонецПроцедуры

&НаКлиенте
Процедура ПоПрошломуГодуССтраховкой(Команда)
	РасчитатьСтатистикуПоПрошломуГоду(Истина);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ЦенаВключаетНДСПриИзмененииНаСервере(СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобратьДоговорКогтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобратьДоговорКогтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ЕстьЗаполненныйСклад = Ложь;
	Для Каждого Строка Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Строка.Склад) Тогда
			ЕстьЗаполненныйСклад = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗаполненныйСклад Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОПерезаполненииСкладаЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Перезаполнить склад в табличной части?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьСкладИзШапки(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСПоНоменклатуре", Истина);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
		
	ТекущаяСтрока.ХарактеристикиИспользуются =  торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");

	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Элементы.Товары.ТекущиеДанные.Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	ДокументОснование = ТекущиеДанные.ДокументОснование;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументыОснованияПоОтбору = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ДокументОснование));
		Если ДокументыОснованияПоОтбору.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данный документ-основание уже добавлен!'"); 
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Согласование

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул")));
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)
	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииНаСервере(СтруктураДействий, КэшированныеЗначения)
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Процедура ПодобратьДоговорКогтрагента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора";
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ТипДоговора", Перечисления.ТипыДоговоров.СПоставщиком);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Объект.Договор = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление() 	
	// Оформление упаковок
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Оформление характеристик
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина); 
	
	Элементы.ДобавитьКоличествоПоСтатистикеПотребления.Видимость = ПолучитьФункциональнуюОпцию("торо_УчитыватьСтатистикуПотребления");
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполненииСкладаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПерезаполнятьСклад = (Результат = КодВозвратаДиалога.Да);
	ЗаполнитьСкладИзШапки(ПерезаполнятьСклад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладИзШапки(ПерезаполнятьСклад)
	
	Для Каждого Строка Из Объект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Склад) ИЛИ ПерезаполнятьСклад Тогда
			Строка.Склад = Объект.Склад;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивТиповНоменклаутры()
	масПараметр = Новый Массив();
	Для каждого текСтрока из Перечисления.ТипыНоменклатуры Цикл
		Если текСтрока = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ текСтрока = Перечисления.ТипыНоменклатуры.Работа Тогда Продолжить; КонецЕсли;
		масПараметр.Добавить(текСтрока);
	КонецЦикла;
	
	Возврат масПараметр;
КонецФункции

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(Адрес);
	
	Для каждого текСтрока из ТаблицаПодбора Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", текСтрока.Номенклатура, текСтрока.Характеристика));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрока);
			НоваяСтрока.Количество = текСтрока.КоличествоУпаковок;
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + текСтрока.КоличествоУпаковок;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСтатистикуЗаМесяц(АгрегатнаяФункция)
	
	Если ЗначениеЗаполнено(Объект.ДатаПоставки) Тогда
		СписокНоменклатуры = Объект.Товары.Выгрузить(,"Номенклатура");
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Склад = Объект.Склад;
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		ТаблицаСтатистики = торо_СтатистикаПотребления.РасчитатьСтатистикуПоАгрегатнойФункции(АгрегатнаяФункция,Объект.ДатаПоставки,СписокНоменклатуры,Склад);
		
		ТаблицаСтатистики.Индексы.Добавить("Номенклатура, Характеристика");
		
		ОбновитьДанные();
		АдресВХ = АдресДанныхДляЗаказовПоставщикам();
		
		Если АдресВХ <> Неопределено Тогда
			ТаблицаРекомендованоКЗаказу = РасчитатьРекомендуемоеКоличество(АдресВХ);
		Иначе
			ТаблицаРекомендованоКЗаказу = Неопределено;
		КонецЕсли;
				
		Для Каждого Строка Из Объект.Товары Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",Строка.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика",Строка.Характеристика);
			Если ЗначениеЗаполнено(Объект.Склад) Тогда
				ПараметрыОтбора.Вставить("Склад",Объект.Склад);
				ТаблицаСтатистики.Индексы.Добавить("Склад");
			КонецЕсли;
			
			НайденныеСтрокиСтатистики = ТаблицаСтатистики.НайтиСтроки(ПараметрыОтбора);
			
			Если ТаблицаРекомендованоКЗаказу <> Неопределено Тогда
				НайденныеСтрокиРКЗ = ТаблицаРекомендованоКЗаказу.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтрокиРКЗ.Количество() > 0 Тогда							
					РекомедуемоКЗаказу = НайденныеСтрокиРКЗ[0].Количество;
					СрокПокупки = НайденныеСтрокиРКЗ[0].СрокПокупки;
				Иначе			
					РекомедуемоКЗаказу = 0;
					СрокПокупки = 1;
				КонецЕсли;
			Иначе
				РекомедуемоКЗаказу = 0;
				СрокПокупки = 1;
			КонецЕсли;
			
			Если НайденныеСтрокиСтатистики.Количество() > 0 Тогда				
				КоличествоПоСтатистике = НайденныеСтрокиСтатистики[0].СуммаРасход / День(КонецМесяца(Объект.ДатаПоставки));
				ОкруглятьКоличество = НайденныеСтрокиСтатистики[0].ОкруглятьКоличество;
			Иначе
				КоличествоПоСтатистике = 0;
				ОкруглятьКоличество = Ложь;
			КонецЕсли;	
			
			Если ОкруглятьКоличество = Истина Тогда
				КоличествоКЗаказу = Окр(РекомедуемоКЗаказу + СрокПокупки * КоличествоПоСтатистике);
			Иначе
				КоличествоКЗаказу = РекомедуемоКЗаказу + СрокПокупки * КоличествоПоСтатистике;
			КонецЕсли;
			
			Если КоличествоКЗаказу > 0 Тогда
				Строка.КоличествоУпаковок = КоличествоКЗаказу;
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не заполнена ""Дата поставки""!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ДатаПоставки");
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура РасчитатьСтатистикуПоПрошломуГоду(Страховка=Ложь)
	Если ЗначениеЗаполнено(Объект.ДатаПоставки) Тогда
		
		Склад = Неопределено;
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Склад = Объект.Склад;
		КонецЕсли;
		СписокНоменклатуры = Объект.Товары.Выгрузить(,"Номенклатура");
		ТаблицаСтатистики = торо_СтатистикаПотребления.РасчитатьСтатистикуПоПрошломуГоду(Объект.ДатаПоставки,СписокНоменклатуры,Склад);
		ТаблицаСтатистики.Индексы.Добавить("Номенклатура, Характеристика");		
		
		ОбновитьДанные();
		АдресВХ = АдресДанныхДляЗаказовПоставщикам();
		
		Если АдресВХ <> Неопределено Тогда
			ТаблицаРекомендованоКЗаказу = РасчитатьРекомендуемоеКоличество(АдресВХ);
		Иначе
			ТаблицаРекомендованоКЗаказу = Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаНоменклатуры Из Объект.Товары Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",СтрокаНоменклатуры.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика",СтрокаНоменклатуры.Характеристика);
			Если ЗначениеЗаполнено(Объект.Склад) Тогда
				ПараметрыОтбора.Вставить("Склад",Объект.Склад);
				ТаблицаСтатистики.Индексы.Добавить("Склад");
			КонецЕсли;
			
			НайденныеСтрокиСтатистики = ТаблицаСтатистики.НайтиСтроки(ПараметрыОтбора);
			
			Если ТаблицаРекомендованоКЗаказу <> Неопределено Тогда
				НайденныеСтрокиРКЗ = ТаблицаРекомендованоКЗаказу.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтрокиРКЗ.Количество() > 0 Тогда							
					РекомедуемоКЗаказу = НайденныеСтрокиРКЗ[0].Количество;
					СрокПокупки = НайденныеСтрокиРКЗ[0].СрокПокупки;
				Иначе			
					РекомедуемоКЗаказу = 0;
					СрокПокупки = 1;
				КонецЕсли;
			Иначе
				РекомедуемоКЗаказу = 0;
				СрокПокупки = 1;
			КонецЕсли;
			
			Если НайденныеСтрокиСтатистики.Количество() > 0 Тогда
				
				Если Страховка = Ложь Тогда
					КоличествоПоСтатистике = НайденныеСтрокиСтатистики[0].ОбщийРасход / 365;				
				Иначе
					СуммаОтклонений = 0;
					Для Каждого Строка Из НайденныеСтрокиСтатистики Цикл
						СуммаОтклонений = СуммаОтклонений + Pow(Окр(Строка.СреднееЗаМесяц) - Строка.КоличествоРасход,2);
						РасходЗаДень = Строка.ОбщийРасход / 365;
					КонецЦикла;
					
					КоличествоПоСтатистике = РасходЗаДень + Sqrt(СуммаОтклонений / 12);
				КонецЕсли; 
				ОкруглятьКоличество = НайденныеСтрокиСтатистики[0].ОкруглятьКоличество;
			Иначе
				КоличествоПоСтатистике = 0;
				ОкруглятьКоличество = Ложь;
			КонецЕсли;
			
			Если ОкруглятьКоличество = Истина Тогда
				КоличествоКЗаказу = РекомедуемоКЗаказу + СрокПокупки * КоличествоПоСтатистике;
			Иначе
				КоличествоКЗаказу = Окр(РекомедуемоКЗаказу + СрокПокупки * КоличествоПоСтатистике);
			КонецЕсли;
			
			Если КоличествоКЗаказу > 0 Тогда
				СтрокаНоменклатуры.КоличествоУпаковок = КоличествоКЗаказу;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнена ""Дата поставки""!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ДатаПоставки");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРекомендуемоеКоличество()
	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Для Каждого Строка из Объект.Товары Цикл
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РасчитатьРекомендуемоеКоличество(АдресВХ)
	
	ВходныеДанные = ПолучитьИзВременногоХранилища(АдресВХ);
	УдалитьИзВременногоХранилища(АдресВХ); 
		
	ТаблицаТоваров = ВходныеДанные.ТаблицаТоваров; 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.КомпенсацияДоМинимальногоОстатка КАК КомпенсацияДоМинимальногоОстатка,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.ДатаПоставки КАК ДатаПоставки,
	|	ТаблицаТоваров.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ТаблицаТоваров.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОбеспеченияПотребностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	втТаблицаТоваров.Характеристика КАК Характеристика,
	|	втТаблицаТоваров.Количество КАК Количество,
	|	втТаблицаТоваров.Склад КАК Склад,
	|	втТаблицаТоваров.ДатаПоставки КАК ДатаПоставки,
	|	втТаблицаТоваров.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ЕСТЬNULL(СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
	|	ВЫБОР
	|		КОГДА СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноИзменениеПоставщика,
	|	втТаблицаТоваров.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА СпособыОбеспеченияПотребностей.СрокИсполненияЗаказа = 0
	|				ИЛИ СпособыОбеспеченияПотребностей.СрокИсполненияЗаказа ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ СпособыОбеспеченияПотребностей.СрокИсполненияЗаказа
	|	КОНЕЦ КАК СрокПокупки
	|ИЗ
	|	втТаблицаТоваров КАК втТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпособыОбеспеченияПотребностей
	|		ПО втТаблицаТоваров.СпособОбеспеченияПотребностей = СпособыОбеспеченияПотребностей.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров); 
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура ОбновитьДанные() 
	
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	ИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить(); 
	Организация = Объект.Организация;
	Подразделение = Объект.Подразделение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры",Объект.Товары.Выгрузить(,"Номенклатура"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Регистр.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	Регистр.Номенклатура КАК Номенклатура,
	               |	Регистр.Номенклатура.СхемаОбеспечения КАК СхемаОбеспечения,
	               |	&Характеристика КАК Характеристика,
	               |	Регистр.Склад КАК Склад,
	               |	Регистр.КОформлениюОстаток КАК КОформлениюОстаток
	               |ПОМЕСТИТЬ ЗаказыНаВнутреннееПотреблениеРС
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
	               |			,
	               |			&ОтборПоОрганизации
	               |				И &ОтборПоПодразделению
	               |				И Номенклатура В (&СписокНоменклатуры)) КАК Регистр
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	СхемаОбеспечения,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыНаВнутреннееПотреблениеРС.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	               |	Документ.ДатаОтгрузки КАК ДатаОтгрузки,
	               |	Документ.Организация КАК Организация,
	               |	Документ.Подразделение КАК Подразделение,
	               |	Документ.торо_СозданПоПотребности КАК торо_СозданПоПотребности,
	               |	ЗаказыНаВнутреннееПотреблениеРС.Номенклатура КАК Номенклатура,
	               |	ЗаказыНаВнутреннееПотреблениеРС.СхемаОбеспечения КАК СхемаОбеспечения,
	               |	ЗаказыНаВнутреннееПотреблениеРС.Характеристика КАК Характеристика,
	               |	ЗаказыНаВнутреннееПотреблениеРС.Склад КАК Склад,
	               |	ЗаказыНаВнутреннееПотреблениеРС.КОформлениюОстаток КАК КОформлениюОстаток,
	               |	ВЫБОР
	               |		КОГДА НЕ ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей ЕСТЬ NULL
	               |			ТОГДА ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей
	               |		КОГДА НЕ СхемыОбеспечения.СпособОбеспеченияПотребностей ЕСТЬ NULL
	               |			ТОГДА СхемыОбеспечения.СпособОбеспеченияПотребностей
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)
	               |	КОНЕЦ КАК СпособОбеспеченияПотребностей
	               |ПОМЕСТИТЬ ЗаказыНаВнутреннееПотреблениеНачальная
	               |ИЗ
	               |	ЗаказыНаВнутреннееПотреблениеРС КАК ЗаказыНаВнутреннееПотреблениеРС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК ВариантыОбеспеченияТоварами
	               |		ПО ЗаказыНаВнутреннееПотреблениеРС.Номенклатура = ВариантыОбеспеченияТоварами.Номенклатура
	               |			И ЗаказыНаВнутреннееПотреблениеРС.Характеристика = ВариантыОбеспеченияТоварами.Характеристика
	               |			И ЗаказыНаВнутреннееПотреблениеРС.Склад = ВариантыОбеспеченияТоварами.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
	               |		ПО ЗаказыНаВнутреннееПотреблениеРС.СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения
	               |			И ЗаказыНаВнутреннееПотреблениеРС.Склад = СхемыОбеспечения.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК Документ
	               |		ПО ЗаказыНаВнутреннееПотреблениеРС.ЗаказНаВнутреннееПотребление = Документ.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	СхемаОбеспечения,
	               |	Склад,
	               |	ЗаказНаВнутреннееПотребление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МИНИМУМ(ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) КАК ДатаНачала,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей = ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)
	               |				ТОГДА 0
	               |			ИНАЧЕ ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей.СрокИсполненияЗаказа
	               |		КОНЕЦ) * 86400 КАК СрокИсполненияЗаказа,
	               |	МАКСИМУМ(ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) КАК ДатаОкончания
	               |ИЗ
	               |	ЗаказыНаВнутреннееПотреблениеНачальная КАК ЗаказыНаВнутреннееПотреблениеНачальная
	               |
	               |ИМЕЮЩИЕ
	               |	НЕ МИНИМУМ(ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) ЕСТЬ NULL";
	
	Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Регистр.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ЗаказНаВнутреннееПотребление.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоПодразделению", "ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению", Истина);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДатаНачала = ТекущаяДата();
	ДатаОкончания = ТекущаяДата();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДат = РезультатЗапроса.Выбрать();
		ВыборкаДат.Следующий();
		
		Если ЗначениеЗаполнено(ВыборкаДат.ДатаНачала) Тогда
			// Вычитаем еще месяц, т.к. максимально возможного срока исполнения может не хватаить: если это 10-е числа
			// января, срок - 3 дня, то крайний срок заказа - конец декабря, но т.к. ВТ календаря не расчитана, то и дата
			// не рассчитается.
			ДатаНачала = НачалоГода(ВыборкаДат.ДатаНачала - ВыборкаДат.СрокИсполненияЗаказа) - 31 * 86400;
			ДатаОкончания = ВыборкаДат.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	Графики = Новый Массив();
	Графики.Добавить(Константы.торо_ГрафикРемонтныхРабот.Получить());
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(Запрос.МенеджерВременныхТаблиц, Графики, ДатаНачала, ДатаОкончания);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей.СрокИсполненияЗаказа + 1 КАК Смещение,
	|	ДОБАВИТЬКДАТЕ(ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки, ДЕНЬ, -1) КАК ДатаОтгрузки,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ИсходныеДаты
	|ИЗ
	|	ЗаказыНаВнутреннееПотреблениеНачальная КАК ЗаказыНаВнутреннееПотреблениеНачальная
	|ГДЕ
	|	НЕ ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей ЕСТЬ NULL
	|	И ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей.СрокИсполненияЗаказа > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Смещение,
	|	ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВТ_ИсходныеДаты.НомерСтроки КАК НомерСтроки,
	|	ВТ_ИсходныеДаты.Смещение КАК Смещение,
	|	ВТРасписанияРаботы.ДатаГрафика КАК ДатаГрафика
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсходныеДаты КАК ВТ_ИсходныеДаты
	|		ПО ВТРасписанияРаботы.ДатаГрафика <= ВТ_ИсходныеДаты.ДатаОтгрузки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаГрафика УБЫВ
	|ИТОГИ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();                                                                                                 
	
	КрайниеДатыЗаказов = Новый ТаблицаЗначений;
	КрайниеДатыЗаказов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 0)));
	КрайниеДатыЗаказов.Колонки.Добавить("ДатаГрафика", Новый ОписаниеТипов("Дата"));

	ВыборкаНомерСтроки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		СчетчикСмещения = 1;
		
		Выборка = ВыборкаНомерСтроки.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если СчетчикСмещения = Выборка.Смещение Тогда
				НоваяСтрока = КрайниеДатыЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Прервать;
			КонецЕсли;
			
			СчетчикСмещения = СчетчикСмещения + 1;
		КонецЦикла;	                 
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("КрайниеДатыЗаказов", КрайниеДатыЗаказов);

	Запрос.Текст = "ВЫБРАТЬ 
	|	КрайниеДатыЗаказов.НомерСтроки КАК НомерСтроки,
	|	КрайниеДатыЗаказов.ДатаГрафика КАК ДатаГрафика	
	|ПОМЕСТИТЬ ВТ_КрайниеДатыЗаказовПредварительно
	|ИЗ
	|	&КрайниеДатыЗаказов КАК КрайниеДатыЗаказов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ИсходныеДаты.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ДОБАВИТЬКДАТЕ(ВТ_ИсходныеДаты.ДатаОтгрузки, ДЕНЬ, 1) КАК ДатаОтгрузки,
	|	ЕСТЬNULL(ВТ_КрайниеДатыЗаказовПредварительно.ДатаГрафика, ВТ_ИсходныеДаты.ДатаОтгрузки) КАК ДатаПоКалендарю
	|ПОМЕСТИТЬ ВТ_КрайниеДатыЗаказов
	|ИЗ
	|	ВТ_ИсходныеДаты КАК ВТ_ИсходныеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КрайниеДатыЗаказовПредварительно КАК ВТ_КрайниеДатыЗаказовПредварительно
	|		ПО ВТ_ИсходныеДаты.НомерСтроки = ВТ_КрайниеДатыЗаказовПредварительно.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОбеспеченияПотребностей,
	|	ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_ИсходныеДатыПоставки
	|ИЗ
	|	ЗаказыНаВнутреннееПотреблениеНачальная КАК ЗаказыНаВнутреннееПотреблениеНачальная
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ИсходныеДатыПоставки.ДатаОтгрузки КАК ДатаОтгрузки,
	|	МАКСИМУМ(ВТРасписанияРаботы.ДатаГрафика) КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_ДатыПоставок
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсходныеДатыПоставки КАК ВТ_ИсходныеДатыПоставки
	|		ПО ВТРасписанияРаботы.ДатаГрафика < ВТ_ИсходныеДатыПоставки.ДатаОтгрузки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДатыПоставки.ДатаОтгрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаВнутреннееПотреблениеНачальная.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Характеристика КАК Характеристика,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Склад КАК Склад,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток КАК КОформлениюОстатокВсего,
	|	ВЫБОР
	|		КОГДА ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки <= &ДатаГоризонтаПланирования
	|				И ЕСТЬNULL(ВТ_КрайниеДатыЗаказов.ДатаПоКалендарю, ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) <= &ПериодУчетаКрайнихСроковЗаказов
	|			ТОГДА ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОформлениюОстаток,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЕСТЬNULL(ВТ_КрайниеДатыЗаказов.ДатаПоКалендарю, ДАТАВРЕМЯ(1, 1, 1)) КАК КрайнийСрокЗаказа,
	|	ЕСТЬNULL(ВТ_ДатыПоставок.ДатаГрафика, ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) КАК ДатаПоставки,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Организация КАК Организация,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Подразделение КАК Подразделение,
	|	ЗаказНаВнутреннееПотреблениеТовары.Количество КАК ПотребностьВЗаказе,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.торо_СозданПоПотребности
	|		ИЛИ ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток <> ЗаказНаВнутреннееПотреблениеТовары.Количество КАК ЕстьСвязанные
	|ПОМЕСТИТЬ ЗаказыНаВнутреннееПотребление
	|ИЗ
	|	ЗаказыНаВнутреннееПотреблениеНачальная КАК ЗаказыНаВнутреннееПотреблениеНачальная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КрайниеДатыЗаказов КАК ВТ_КрайниеДатыЗаказов
	|		ПО ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей = ВТ_КрайниеДатыЗаказов.СпособОбеспеченияПотребностей
	|			И ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки = ВТ_КрайниеДатыЗаказов.ДатаОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыПоставок КАК ВТ_ДатыПоставок
	|		ПО ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки = ВТ_ДатыПоставок.ДатаОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	|		ПО ЗаказыНаВнутреннееПотреблениеНачальная.ЗаказНаВнутреннееПотребление = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
	|			И ЗаказыНаВнутреннееПотреблениеНачальная.Номенклатура = ЗаказНаВнутреннееПотреблениеТовары.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеНачальная.Характеристика = ЗаказНаВнутреннееПотреблениеТовары.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Регистр.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ РезервыПоЗаказам
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	|	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	|	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	|	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ПОМЕСТИТЬ ТоварыНаРуках
	|ИЗ
	|	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад, ЗаказНаВнутреннееПотребление) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика,
	|					Потребность.Склад,
	|					Потребность.ЗаказНаВнутреннееПотребление
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК торо_ТоварыНаРукахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление";
	
	Запрос.УстановитьПараметр("ДатаГоризонтаПланирования", КонецМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПериодУчетаКрайнихСроковЗаказов", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
			
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезервыПоЗаказам.Номенклатура КАК Номенклатура,
	|	РезервыПоЗаказам.Характеристика КАК Характеристика,
	|	РезервыПоЗаказам.Склад КАК Склад,
	|	СУММА(РезервыПоЗаказам.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ РезервыПоСкладам
	|ИЗ
	|	РезервыПоЗаказам КАК РезервыПоЗаказам
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыПоЗаказам.Номенклатура,
	|	РезервыПоЗаказам.Характеристика,
	|	РезервыПоЗаказам.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезервыПоЗаказам.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ПОМЕСТИТЬ СвязанныеДокументы
	|ИЗ
	|	РезервыПоЗаказам КАК РезервыПоЗаказам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыНаРуках.ЗаказНаВнутреннееПотребление
	|ИЗ
	|	ТоварыНаРуках КАК ТоварыНаРуках
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.ВНаличииОстаток КАК ВНаличииОстаток
	|ПОМЕСТИТЬ ОстаткиПоСкладам
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Склад КАК Склад,
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.МинимальныйОстаток КАК МинимальныйОстаток,
	|	Регистр.ХарактеристикаНоменклатуры КАК Характеристика
	|ПОМЕСТИТЬ МинимальныеОстатки
	|ИЗ
	|	РегистрСведений.торо_МинимальныеОстаткиНоменклатуры.СрезПоследних(
	|			,
	|			(Номенклатура, ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.КоличествоОстаток КАК КоличествоОстаток,
	|	Регистр.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Регистр.ЗаказПоставщику.ДатаПоставки КАК ДатаПоставки
	|ПОМЕСТИТЬ ЗаказыПоставщику
	|ИЗ
	|	РегистрНакопления.торо_ЗаказыПоставщику.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Потребность.Номенклатура,
	|						Потребность.Характеристика
	|					ИЗ
	|						ЗаказыНаВнутреннееПотребление КАК Потребность)
	|				И &ОтборПоОрганизации
	|				И &ОтборПоПодразделению) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	|	ОстаткиПоСкладам.ВНаличииОстаток КАК ОстатокНаСкладе,
	|	ОстаткиПоСкладам.Склад КАК Склад,
	|	ЕСТЬNULL(МинимальныеОстатки.МинимальныйОстаток, 0) КАК МинОстаток,
	|	ЕСТЬNULL(Резервы.КоличествоОстаток, 0) КАК Резерв,
	|	ОстаткиПоСкладам.ВНаличииОстаток - ЕСТЬNULL(Резервы.КоличествоОстаток, 0) КАК СвободныйОстаток,
	|	СУММА(ЕСТЬNULL(ЗаказыПоставщику.КоличествоОстаток, 0)) КАК Заказано
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотреблениеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиПоСкладам КАК ОстаткиПоСкладам
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = ОстаткиПоСкладам.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = ОстаткиПоСкладам.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|		ПО (ЗаказыНаВнутреннееПотребление.Номенклатура = ОстаткиПоСкладам.Номенклатура)
	|			И (ЗаказыНаВнутреннееПотребление.Характеристика = ОстаткиПоСкладам.Характеристика)
	|			И (ЗаказыНаВнутреннееПотребление.Склад = ОстаткиПоСкладам.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеОстатки КАК МинимальныеОстатки
	|		ПО (МинимальныеОстатки.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (МинимальныеОстатки.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (МинимальныеОстатки.Склад = ОстаткиПоСкладам.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоСкладам КАК Резервы
	|		ПО (Резервы.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (Резервы.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (Резервы.Склад = ОстаткиПоСкладам.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПоставщику КАК ЗаказыПоставщику
	|		ПО (ЗаказыПоставщику.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (ЗаказыПоставщику.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (ЗаказыПоставщику.Склад = ОстаткиПоСкладам.Склад)
	|ГДЕ
	|	ЗаказыНаВнутреннееПотребление.Склад ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика,
	|	ОстаткиПоСкладам.Склад,
	|	ЕСТЬNULL(МинимальныеОстатки.МинимальныйОстаток, 0),
	|	ОстаткиПоСкладам.ВНаличииОстаток,
	|	ЕСТЬNULL(Резервы.КоличествоОстаток, 0),
	|	ОстаткиПоСкладам.ВНаличииОстаток - ЕСТЬNULL(Резервы.КоличествоОстаток, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	ВЫБОР
	|		КОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) > 0
	|			ТОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОбеспечению,
	|	ВЫБОР
	|		КОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) - ЕСТЬNULL(Резервы.КоличествоОстаток, 0) > 0
	|			ТОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) - ЕСТЬNULL(Резервы.КоличествоОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсталосьОбеспечить,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДатаОтгрузки КАК ДатаПотребности,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДатаПоставки КАК ДатаПоставки,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.КрайнийСрокЗаказа КАК КрайнийСрокЗаказа,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Организация КАК Организация,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ОстаткиПоСкладам.ВНаличииОстаток, 0) КАК ОстатокНаСкладе,
	|	ЕСТЬNULL(ОстаткиПоСкладам.ВНаличииОстаток, 0) - ЕСТЬNULL(РезервыПоСкладам.КоличествоОстаток, 0) КАК СвободныйОстатокНаСкладе,
	|	ЕСТЬNULL(Резервы.КоличествоОстаток, 0) КАК Резерв,
	|	ЕСТЬNULL(МинимальныеОстатки.МинимальныйОстаток, 0) КАК МинОстаток,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ПотребностьВЗаказе КАК ПотребностьВЗаказе,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЕстьСвязанные
	|		ИЛИ НЕ СвязанныеДокументы.ЗаказНаВнутреннееПотребление ЕСТЬ NULL КАК ЕстьСвязанныеДокументы
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотреблениеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоСкладам КАК ОстаткиПоСкладам
	|		ПО (ОстаткиПоСкладам.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (ОстаткиПоСкладам.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (ОстаткиПоСкладам.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоЗаказам КАК Резервы
	|		ПО (Резервы.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (Резервы.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (Резервы.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|			И (Резервы.ЗаказНаВнутреннееПотребление = ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеОстатки КАК МинимальныеОстатки
	|		ПО (МинимальныеОстатки.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (МинимальныеОстатки.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (МинимальныеОстатки.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК ТоварыНаруках
	|		ПО (ТоварыНаруках.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (ТоварыНаруках.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (ТоварыНаруках.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|			И (ТоварыНаруках.ЗаказНаВнутреннееПотребление = ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязанныеДокументы КАК СвязанныеДокументы
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление = СвязанныеДокументы.ЗаказНаВнутреннееПотребление
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоСкладам КАК РезервыПоСкладам
	|		ПО (РезервыПоСкладам.Номенклатура = ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура)
	|			И (РезервыПоСкладам.Характеристика = ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика)
	|			И (РезервыПоСкладам.Склад = ЗаказыНаВнутреннееПотреблениеОстатки.Склад)
	|ГДЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПотребности,
	|	Номенклатура,
	|	Склад
	|ИТОГИ
	|	СУММА(КОбеспечению),
	|	СУММА(ОсталосьОбеспечить),
	|	СУММА(ПотребностьВЗаказе),
	|	МИНИМУМ(ДатаПотребности),
	|	МАКСИМУМ(СпособОбеспеченияПотребностей),
	|	МИНИМУМ(ДатаПоставки),
	|	МАКСИМУМ(ОстатокНаСкладе),
	|	СУММА(Резерв),
	|	МИНИМУМ(МинОстаток)
	|ПО
	|	Номенклатура, Характеристика, Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщику.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщику.Характеристика КАК Характеристика,
	|	ЗаказыПоставщику.Склад КАК Склад,
	|	СУММА(ЗаказыПоставщику.КоличествоОстаток) КАК Количество,
	|	ЗаказыПоставщику.ДатаПоставки КАК ДатаПоставки
	|ИЗ
	|	ЗаказыПоставщику КАК ЗаказыПоставщику
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщику.Номенклатура,
	|	ЗаказыПоставщику.Характеристика,
	|	ЗаказыПоставщику.Склад,
	|	ЗаказыПоставщику.ДатаПоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоставки";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ЗаказПоставщику.Организация =  &Организация"); 
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоПодразделению", "ЗаказПоставщику.Подразделение = &Подразделение");
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению", Истина);                                                                                                                                 
	КонецЕсли;
	
    Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Регистр.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	Если РезультатЗапроса[6].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказанныеПозиции = РезультатЗапроса[7].Выгрузить();	
		
	ЗаполнитьДанныеДерево(РезультатЗапроса[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ЗаказанныеПозиции);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДерево(ВыборкаДанных, ЗаказанныеПозиции)
	
	СтруктураПоискаЗаказов = Новый Структура("Номенклатура, Характеристика, Склад");
	ЗаказанныеПозиции.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	ЭлементыКорняДерева = ДанныеДерево.ПолучитьЭлементы();
	
			ВыборкаНоменклатур = ВыборкаДанных;
		Пока ВыборкаНоменклатур.Следующий() Цикл
			
			Если ВыборкаНоменклатур.ОсталосьОбеспечить = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ВыборкаХарактеристик = ВыборкаНоменклатур.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл
				
				Если ВыборкаХарактеристик.ОсталосьОбеспечить = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаНоменклатура = ЭлементыКорняДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаХарактеристик);
				Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ВыборкаХарактеристик.Характеристика) Тогда 
					СтрокаНоменклатура.Данные = СтрШаблон("%1 [%2]", ВыборкаНоменклатур.Номенклатура, ВыборкаХарактеристик.Характеристика);	
				Иначе
					СтрокаНоменклатура.Данные = ВыборкаНоменклатур.Номенклатура;
				КонецЕсли;
				СтрокаНоменклатура.МинОстаток = 0;
				СтрокаНоменклатура.ЭтоНоменклатура = Истина;
				
				ОстатокПоНоменклатуре = 0;
				СвободныйОстаток = 0;
				ЗаказПоНоменклатуре = 0;
				
				МинимальныйКрайнийСрокСкладов = Дата(3999, 1, 1);
				
				СтрокиСклады = СтрокаНоменклатура.ПолучитьЭлементы();
				
				ВыборкаСкладов = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСкладов.Следующий() Цикл
					Если ВыборкаСкладов.ОсталосьОбеспечить = 0 Тогда
						Продолжить;
					КонецЕсли; 
					СтрокаСклад = СтрокиСклады.Добавить();
					
					СтрокаСклад.Данные = ВыборкаСкладов.Склад;
					ЗаполнитьЗначенияСвойств(СтрокаСклад, ВыборкаСкладов);
					СтрокаСклад.СвободныйОстаток = ВыборкаСкладов.ОстатокНаСкладе - ВыборкаСкладов.Резерв;
					СтрокаСклад.ЭтоСклад = Истина;
					
					Если СтрокаСклад.СвободныйОстаток > 0 Тогда
						СтрокаСклад.Переместить = БиблиотекаКартинок.СтартБизнесПроцесса;
					КонецЕсли;
					
					ОстатокПоНоменклатуре = ОстатокПоНоменклатуре + ВыборкаСкладов.ОстатокНаСкладе; 
					СвободныйОстаток = СвободныйОстаток + СтрокаСклад.СвободныйОстаток;

					ЗаказПоСкладу = 0;
					ВнешниеЗаказыДобавлены = Ложь;
					
					ЗаполнитьЗначенияСвойств(СтруктураПоискаЗаказов, ВыборкаСкладов);
					НайденныеЗаказыПоставщику = ЗаказанныеПозиции.НайтиСтроки(СтруктураПоискаЗаказов);
					
					МинимальныйКрайнийСрокЗаказов = Дата(3999, 1, 1);
					
					СтрокиВнутренниеЗаказы = СтрокаСклад.ПолучитьЭлементы(); 
					
					ВыборкаЗаказов = ВыборкаСкладов.Выбрать();
					Пока ВыборкаЗаказов.Следующий() Цикл 
						Если ВыборкаЗаказов.ОсталосьОбеспечить = 0 Тогда
							Продолжить;
						КонецЕсли; 
						СтрокаЗаказ = СтрокиВнутренниеЗаказы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаЗаказов);
						СтрокаЗаказ.ОстатокНаСкладе = 0;
						СтрокаЗаказ.МинОстаток = 0;
						СтрокаЗаказ.СкрытьФлагЗаказа = Истина;
						СтрокаЗаказ.ЭтоЗаказ = Истина;
						СтрокаЗаказ.Данные = ВыборкаЗаказов.ЗаказНаВнутреннееПотребление;
						ОсталосьОбеспечить = СтрокаЗаказ.ОсталосьОбеспечить - СтрокаЗаказ.РекомендованоКРезерву;
						Для Каждого ЗаказПоставщику Из НайденныеЗаказыПоставщику Цикл 
							Если НЕ ВнешниеЗаказыДобавлены Тогда
								СтрокаСклад.ЗаказВсего = СтрокаСклад.ЗаказВсего + ЗаказПоставщику.Количество;
							КонецЕсли;
							Если ОсталосьОбеспечить > 0 И ЗаказПоставщику.Количество <> 0 И ЗаказПоставщику.ДатаПоставки <= ВыборкаЗаказов.ДатаПотребности Тогда
								Количество = Мин(ОсталосьОбеспечить, ЗаказПоставщику.Количество); 
								СтрокаЗаказ.ЗаказНаДатуПотребности = СтрокаЗаказ.ЗаказНаДатуПотребности + Количество;
								ЗаказПоставщику.Количество = ЗаказПоставщику.Количество - Количество;
								ОсталосьОбеспечить = ОсталосьОбеспечить - Количество;
							КонецЕсли;
						КонецЦикла;
						
						ВнешниеЗаказыДобавлены = Истина;

						ЗаказПоСкладу = ЗаказПоСкладу + СтрокаЗаказ.ЗаказНаДатуПотребности;
						
						Если ЗначениеЗаполнено(ВыборкаЗаказов.КрайнийСрокЗаказа)
							И ВыборкаЗаказов.КрайнийСрокЗаказа < МинимальныйКрайнийСрокЗаказов Тогда
							МинимальныйКрайнийСрокЗаказов = ВыборкаЗаказов.КрайнийСрокЗаказа;
						КонецЕсли; 
						
					КонецЦикла;
					СтрокаСклад.ЗаказНаДатуПотребности = ЗаказПоСкладу;

					ЗаказПоНоменклатуре = ЗаказПоНоменклатуре + ЗаказПоСкладу;
					СтрокаНоменклатура.ЗаказВсего = СтрокаНоменклатура.ЗаказВсего + СтрокаСклад.ЗаказВсего;
										
					Если МинимальныйКрайнийСрокЗаказов = Дата(3999, 1, 1) Тогда
						МинимальныйКрайнийСрокЗаказов = Дата(1, 1, 1);
					КонецЕсли; 
					
					СтрокаСклад.КрайнийСрокЗаказа = МинимальныйКрайнийСрокЗаказов;
					
					Если ЗначениеЗаполнено(МинимальныйКрайнийСрокЗаказов)
						И СтрокаСклад.КрайнийСрокЗаказа < МинимальныйКрайнийСрокСкладов Тогда
						МинимальныйКрайнийСрокСкладов = СтрокаСклад.КрайнийСрокЗаказа;
					КонецЕсли; 
					
				КонецЦикла;
				
				СтрокаНоменклатура.ОстатокНаСкладе = ОстатокПоНоменклатуре;
				СтрокаНоменклатура.СвободныйОстаток = СвободныйОстаток;
				СтрокаНоменклатура.ЗаказНаДатуПотребности = ЗаказПоНоменклатуре;

				Если МинимальныйКрайнийСрокСкладов = Дата(3999, 1, 1) Тогда
					МинимальныйКрайнийСрокСкладов = Дата(1, 1, 1);
				КонецЕсли;
				
				СтрокаНоменклатура.КрайнийСрокЗаказа = МинимальныйКрайнийСрокСкладов; 
			КонецЦикла; 
		КонецЦикла;
	
	ОбновитьЗависимыеПоказателиДанныеДерево();

КонецПроцедуры  

Процедура ОбновитьЗависимыеПоказателиДанныеДерево()
			
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			ИтогоРекомендованоКЗаказуПоНоменклатуре = 0;
			ИтогоРекомендованоКРезервуПоНоменклатуре = 0;
			
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				РекомендованоКРезервуПоСкладу = 0;
				СвободныйОстатокПоСкладу = СтрокаСклад.СвободныйОстаток;

				Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
					
					СтрокаЗаказ.РекомендованоКРезерву = Мин(СтрокаЗаказ.ОсталосьОбеспечить, СвободныйОстатокПоСкладу);
					СтрокаЗаказ.РекомендованоКЗаказу = СтрокаЗаказ.ОсталосьОбеспечить - СтрокаЗаказ.РекомендованоКРезерву - СтрокаЗаказ.ЗаказНаДатуПотребности;
										
					СвободныйОстатокПоСкладу = СвободныйОстатокПоСкладу - СтрокаЗаказ.РекомендованоКРезерву;				
					РекомендованоКРезервуПоСкладу = РекомендованоКРезервуПоСкладу + СтрокаЗаказ.РекомендованоКРезерву;	
				КонецЦикла;	
				
				СтрокаСклад.РекомендованоКРезерву = РекомендованоКРезервуПоСкладу;
				СтрокаСклад.РекомендованоКЗаказу = СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву - СтрокаСклад.ЗаказНаДатуПотребности;
				
				ЗаказноПозжеПотребности = СтрокаСклад.ЗаказВсего - СтрокаСклад.ЗаказНаДатуПотребности;
				
				Если СтрокаСклад.РекомендованоКЗаказу > 0 Тогда // Не хватает свободного остатка.
					КомпенсацияДоМинимальногоОстатка = СтрокаСклад.МинОстаток - ЗаказноПозжеПотребности - (СтрокаСклад.СвободныйОстаток - СтрокаСклад.РекомендованоКРезерву);
				Иначе	
				    КомпенсацияДоМинимальногоОстатка = СтрокаСклад.МинОстаток - ЗаказноПозжеПотребности - СтрокаСклад.СвободныйОстаток;
				КонецЕсли;
								
				СтрокаСклад.РекомендованоКЗаказу = СтрокаСклад.РекомендованоКЗаказу + ?(КомпенсацияДоМинимальногоОстатка < 0, 0, КомпенсацияДоМинимальногоОстатка);
				
				ИтогоРекомендованоКЗаказуПоНоменклатуре = ИтогоРекомендованоКЗаказуПоНоменклатуре + СтрокаСклад.РекомендованоКЗаказу;
				ИтогоРекомендованоКРезервуПоНоменклатуре = ИтогоРекомендованоКРезервуПоНоменклатуре + СтрокаСклад.РекомендованоКРезерву;
			КонецЦикла; 
			
			СтрокаНоменклатура.РекомендованоКЗаказу = ИтогоРекомендованоКЗаказуПоНоменклатуре;
			СтрокаНоменклатура.РекомендованоКРезерву = ИтогоРекомендованоКРезервуПоНоменклатуре;

		КонецЦикла;			
 				
КонецПроцедуры  

&НаСервере
Функция АдресДанныхДляЗаказовПоставщикам()
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3))); 
	ТаблицаТоваров.Колонки.Добавить("КомпенсацияДоМинимальногоОстатка", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("ДатаПоставки", Новый ОписаниеТипов("Дата"));
	ТаблицаТоваров.Колонки.Добавить("СпособОбеспеченияПотребностей", Новый ОписаниеТипов("СправочникСсылка.СпособыОбеспеченияПотребностей"));
	ТаблицаТоваров.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));
	
	Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
			
			
			НоваяСтрокаТовара = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаСклад);
			НоваяСтрокаТовара.Склад = СтрокаСклад.Данные;
			НоваяСтрокаТовара.Количество = СтрокаСклад.РекомендованоКЗаказу; 
			НоваяСтрокаТовара.Идентификатор = Строка(Новый УникальныйИдентификатор);
			
			РекомендованоКЗаказуПоЗаказам = 0;
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл				
				РекомендованоКЗаказуПоЗаказам = РекомендованоКЗаказуПоЗаказам + СтрокаЗаказ.РекомендованоКЗаказу;
			КонецЦикла;
			
			НоваяСтрокаТовара.КомпенсацияДоМинимальногоОстатка = СтрокаСклад.РекомендованоКЗаказу - РекомендованоКЗаказуПоЗаказам;
			
		КонецЦикла;
		
	КонецЦикла;  
	
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ДанныеДляЗаказов = Новый Структура;
	ДанныеДляЗаказов.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеДляЗаказов, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти
