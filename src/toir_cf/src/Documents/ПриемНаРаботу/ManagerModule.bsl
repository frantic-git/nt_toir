#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения(ДокументОбъект.Ссылка);
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(ДокументОбъект.Движения, ДанныеДляПроведения.СотрудникиДаты, ДокументОбъект.Ссылка);
	
	КадровыйУчет.СформироватьКадровыеДвижения(ДокументОбъект, ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
	КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверкаСтрокиСписочногоДокумента = ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаСтрокиСписочногоДокумента");
	Если ПроверкаСтрокиСписочногоДокумента Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Дата");
		Регистратор = ДокументОбъект.ДополнительныеСвойства.СсылкаНаОбъект;
	Иначе
		Регистратор = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ПроверяетсяПриемНаРаботу = ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриемНаРаботу");
	
	Если ПроверяетсяПриемНаРаботу Тогда
		ЭтоСписочныйДокумент = Ложь;
		ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
	Иначе
		ЭтоСписочныйДокумент = Истина;
		ПроверяемыеСтруктуры = ДокументОбъект.Сотрудники;
	КонецЕсли;
	
	Если Не ПроверяетсяПриемНаРаботу Тогда
	    МассивСотрудников = ДокументОбъект.Сотрудники.ВыгрузитьКолонку("Сотрудник");
	Иначе
		МассивСотрудников = Новый Массив();
		МассивСотрудников.Добавить(ДокументОбъект.Сотрудник);
	КонецЕсли;
	
	СотрудникиДокумента = Новый Соответствие();
	
	Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
		
		Если ПроверяемаяСтруктура.ДатаПриема > ПроверяемаяСтруктура.ДатаЗавершенияТрудовогоДоговора
			И ЗначениеЗаполнено(ПроверяемаяСтруктура.ДатаЗавершенияТрудовогоДоговора) Тогда
			
			ТекстСообщения = НСтр("ru='Дата завершения трудового договора не может быть меньше даты приема'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект, "ДатаЗавершенияТрудовогоДоговора", ,Отказ);
			
		КонецЕсли;
		
		// Проверка дублирования строк по сотруднику списочного документа
		Если Не ПроверяетсяПриемНаРаботу И ЗначениеЗаполнено(ПроверяемаяСтруктура.Сотрудник) Тогда
			
			НомерСтроки = СотрудникиДокумента.Получить(ПроверяемаяСтруктура.Сотрудник);
			Если НомерСтроки <> Неопределено Тогда
				
				ШаблонСообщения = НСтр("ru = 'По сотруднику %1 уже оформлен прием на работу в строке номер %2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроверяемаяСтруктура.Сотрудник, НомерСтроки);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "Объект.Сотрудники[" + (ПроверяемаяСтруктура.НомерСтроки - 1) + "].Сотрудник", , Отказ);
				
			Иначе
				СотрудникиДокумента.Вставить(ПроверяемаяСтруктура.Сотрудник, ПроверяемаяСтруктура.НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		Если ЭтоСписочныйДокумент Тогда
			КадровыйУчетРасширенный.ПроверитьСоответствиеСотрудниковТабличнойЧастиОрганизации(ДокументОбъект.Организация, ПроверяемыеСтруктуры, Отказ);
		Иначе
			КадровыйУчет.ПроверитьСоответствиеСотрудниковОрганизации(ДокументОбъект.Организация, ДокументОбъект.Сотрудник, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Регистратор,
	|	КадроваяИсторияСотрудников.Период,
	|	КадроваяИсторияСотрудников.Сотрудник
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.Регистратор <> &Регистратор
	|	И КадроваяИсторияСотрудников.Сотрудник В (&Сотрудники)
	|	И (КадроваяИсторияСотрудников.Регистратор ССЫЛКА Документ.ПриемНаРаботу
	|		ИЛИ КадроваяИсторияСотрудников.Регистратор ССЫЛКА Документ.ПриемНаРаботуСписком)";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Сотрудники", ?(ЭтоСписочныйДокумент, ПроверяемыеСтруктуры.Выгрузить().ВыгрузитьКолонку("Сотрудник"), ДокументОбъект.Сотрудник));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ШаблонСообщения = НСтр("ru='Сотрудник %1 оформлен на работу %2 (%3)'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Сотрудник, Формат(Выборка.Период, "ДЛФ=DD"), Выборка.Регистратор);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Регистратор,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ о приеме
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.торо_ПечатьКадровыхПриказов";
	КомандаПечати.Идентификатор = "ПФ_MXL_Т1";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о приеме'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ПечатьДокументовБезПредварительногоПросмотра",
		Ложь);
	
КонецПроцедуры

Функция СписокПодходящихСорудников(ДатаНачала, ДатаОкончания, Организация, Текст) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Сотрудники
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Наименование ПОДОБНО &Текст + ""%""
	               |	И Сотрудники.ГоловнаяОрганизация = &Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТ_Сотрудники КАК ВТ_Сотрудники
	               |ГДЕ
	               |	НЕ ВТ_Сотрудники.Ссылка В
	               |				(ВЫБРАТЬ
	               |					КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник
	               |				ИЗ
	               |					РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних() КАК КадроваяИсторияСотрудниковСрезПоследних)";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Дата", ДатаНачала);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	резЗапроса = Запрос.Выполнить();
	
	Если резЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат резЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает данные для формирования движений
// Возвращает Структуру с полями
//		КадровыеДвижения - данные, необходимые для формирования 
//				- кадровой истории (см. КадровыйУчетРасширенный.СформироватьКадровыеДвижения)
//				- авансов (см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхВыплат)
//				- истрии применяемых графиков работы (см. КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков)
//		ПлановыеНачисления - данные, необходимые для формирования истрии плановых начислений 
//		(см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхНачислений)
//		ЗначенияПоказателей (см. там же).
//
Функция ПолучитьДанныеДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	// Из запроса убрано поле ДействуетДо (реквизит ДатаЗавершенияТрудовогоДоговора), т.к. после проведения из-за этого сотрудник
	// автоматически считался уволенным. В ЕРП эта дата хранится в РС "Сведения контракта, договора сотрудника", который используется
	// при расчете отпусков и з/п, при заполнении занятости позиций штатного расписания. Данных механизмов в ТОИР нет, поэтому для корректного
	// поведения при заполненном поле ДатаЗавершенияТрудовогоДоговора оно убрано из запроса (теперь указывается справочно).
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботу.Организация КАК Организация,
	|	ПриемНаРаботу.Подразделение КАК Подразделение,
	|	ПриемНаРаботу.Должность КАК Должность,
	|	ПриемНаРаботу.КоличествоСтавок КАК КоличествоСтавок,
	|	ПриемНаРаботу.ГрафикРаботы КАК ГрафикРаботы,
	|	ПриемНаРаботу.ВидЗанятости,
	|	ПриемНаРаботу.ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка = &Ссылка 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.Организация", "ПриемНаРаботу.Ссылка.Организация");
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения = Новый Структура; 
	
	// Первый набор данных для проведения - таблица для формирования кадровых движений, истрии графиков, авансов.
	КадровыеДвижения = РезультатыЗапроса[0].Выгрузить();
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	
	// Девятый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);

	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецОбласти

#КонецЕсли
