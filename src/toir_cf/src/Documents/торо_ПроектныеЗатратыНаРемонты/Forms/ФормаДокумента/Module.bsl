
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДобавленныеКолонкиТаблиц();
	КонецЕсли;

	ЗаполнитьДеревоРемонтов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
	УстановитьОтборСтрокПоЗатратам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначениеИзТаблицы(ДеревоРемонтныхРабот, Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МатериальныеЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначениеИзТаблицы(Объект.МатериальныеЗатраты, Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначениеИзТаблицы(Объект.ТрудовыеЗатраты, Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначениеИзТаблицы(Объект.ИнструментыИТехника, Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначениеИзТаблицы(Объект.Запчасти, Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов <> Неопределено Тогда
		
		ID_Отбора = ТекСтрокаДереваРемонтов.ID;
		
		Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		Элементы.ИнструментыИТехника.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДобавленныеКолонкиТаблиц(ОбновлятьГарантии = Истина)

	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРемонтов()
	
	СоответствиеID = Новый Соответствие;
	
	Для каждого СтрокаРР Из Объект.РемонтныеРаботы Цикл
		
		ID_Родителя = СтрокаРР.Родитель_ID;
		
		НайдСоответствие = СоответствиеID.Получить(ID_Родителя);
		
		Если НайдСоответствие = Неопределено Тогда
			МассивСтрокСоответствия = Новый Массив;
			МассивСтрокСоответствия.Добавить(СтрокаРР);
			СоответствиеID.Вставить(ID_Родителя, МассивСтрокСоответствия);
		Иначе
			МассивСтрокСоответствия = НайдСоответствие;
			МассивСтрокСоответствия.Добавить(СтрокаРР);
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЭлементДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы().Добавить();
	
	ЭлементДерева.РемонтнаяРабота = "Ремонтные работы";	
	ЭлементДерева.Картинка        = 4; 

	ЗаполнитьДерево(ЭлементДерева, СоответствиеID, "");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ЭлементДерева, Соответствие, Родитель)
	
	МассивПодчиненныхСтрок = Соответствие.Получить(Родитель);
	
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	
	Если Не МассивПодчиненныхСтрок = Неопределено Тогда
		Для каждого Строка Из МассивПодчиненныхСтрок Цикл
			Элемент = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(Элемент, Строка);
			торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(Элемент);
			ЗаполнитьДерево(Элемент, Соответствие, Строка.ID);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначениеИзТаблицы(РеквизитФормы, Элемент, ВыбраннаяСтрока, Поле)
	
	ДанныеСтроки = РеквизитФормы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ИмяКолонки = СтрЗаменить(Поле.Имя, Элемент.Имя, "");
	ЗначениеПоля = ДанныеСтроки[ИмяКолонки];
	
	Если ТипЗнч(ЗначениеПоля) <> Тип("Строка") И ТипЗнч(ЗначениеПоля) <> Тип("Число") Тогда
		ПоказатьЗначение(Неопределено, ЗначениеПоля);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
