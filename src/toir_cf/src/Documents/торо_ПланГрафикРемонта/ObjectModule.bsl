#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
	
перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
											 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание)
	
	Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ДокументОснование = Основание.Ссылка;		
		
		ДатаПланирования = Основание.ДатаПланирования;
		КоличествоПериодов = Основание.КоличествоПериодов;
		ПериодичностьДетализации = Основание.ПериодичностьДетализации;
				
		ДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаПланирования, ПериодичностьДетализации, КоличествоПериодов);
	
		ТЗ_ОбъектыРемонтов = Документы.торо_ПланГрафикРемонта.ПодобратьОбъектыДляКорректировки(ДокументОснование, Ссылка);
		ОбъектыРемонта.Загрузить(ТЗ_ОбъектыРемонтов);
		
		ТЗ_ПланРемонтов = Документы.торо_ПланГрафикРемонта.ПодобратьРемонтыДляКорректировки(ДатаОкончанияПланирования, ДокументОснование, ДатаПланирования, Ссылка);
		ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);

	ИначеЕсли ТипЗнч(Основание) = Тип("Структура") Тогда
		
		Если Основание.Свойство("ВидОперации") Тогда 	
			ВидОперации = Основание.ВидОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ТекДата = ТекущаяДата();

		ДатаПланирования = КонецГода(ТекДата)+1;
		ПериодичностьДетализации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойПериодПланирования", Истина);
		
		Если НЕ ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
			ПериодичностьДетализации = Перечисления.Периодичность.Год;
		КонецЕсли;
		
		КоличествоПериодов = 1;
	КонецЕсли;
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПланРемонтов.Очистить();
	
	Если ОбъектКопирования.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		ДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ОбъектКопирования.ДатаПланирования, ОбъектКопирования.ПериодичностьДетализации, ОбъектКопирования.КоличествоПериодов);
		ТЗ_ПланРемонтов = Документы.торо_ПланГрафикРемонта.ПодобратьРемонтыДляКорректировки(ДатаОкончанияПланирования, ОбъектКопирования.Ссылка, ОбъектКопирования.ДатаПланирования, Ссылка);
		ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = Справочники.КлючевыеОперации.торо_ПроведениеДокументаПланГрафикППР;
	ДополнительныеСвойства.Вставить("КлючеваяОперация", КлючеваяОперация);
	ДополнительныеСвойства.Вставить("ВремяНачала", ВремяНачала);
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если ЕстьБолееПоздниеКорректировки() Тогда
			ТекстСообщения = НСтр("ru = 'Отмена проведения документа невозможна, так как по ремонтам этого документа имеются более поздние документы.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли; 
	
	// Получение удаленных ремонтов при перепроведении документа. Используются при формировании записей
	// регистров торо_ПлановыеИсполнителиРемонтов, торо_ОбщиеДанныеПоРемонтам, торо_СвернутыеФактическиеДатыРемонтов.
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивIDДокумента = ПланРемонтов.ВыгрузитьКолонку("ID");
		МассивУдаленныхID = торо_Ремонты.ПолучитьIDУдаленныхРемонтовДокумента(МассивIDДокумента, Ссылка);
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", МассивУдаленныхID);
	Иначе
		ДополнительныеСвойства.Вставить("МассивУдаленныхID", Новый Массив());
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый массив;
	
	Если ВидОперации <> Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");	
	КонецЕсли;
	
	Если ПланРемонтов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'План график не содержит данных.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	
	
	ПроверитьЗаполнениеТабличнойЧастиПланРемонтов(Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда		
		ДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаПланирования, ПериодичностьДетализации, КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	УстановитьУправляемыеБлокировки(ДатаОкончанияПланирования);
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
		Если ДатаОснования = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен уточняемый план-график ППР!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		Если Дата <= ДатаОснования Тогда
			ТекстСообщения = НСтр("ru = 'Дата документа должна быть больше даты корректируемого документа!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проведен") Тогда
			ШаблонСообщения = НСтр("ru = 'Есть непроведенный документ основание: %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(ДокументОснование));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабДоступность.ID КАК ID,
	               |	ТабДоступность.ДоступенДляРедактирования КАК ДоступенДляРедактирования
	               |ПОМЕСТИТЬ ТабДоступность
	               |ИЗ
	               |	&ТабДоступность КАК ТабДоступность
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ПланГрафикРемонтаПланРемонтов.НомерСтроки КАК НомерСтроки,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID КАК ID,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон КАК ДатаКон,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач КАК ДатаНач,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель КАК Исполнитель,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен КАК Отменен,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Склад КАК Склад,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен КАК Замещен,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета КАК ID_базы_расчета,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего КАК ID_замещающего,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт КАК ДатаНачСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт КАК ДатаКонСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт КАК ЗамещенСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта КАК СуммаРемонта,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Перенесенный КАК Перенесенный,
	               |	торо_ПланГрафикРемонтаПланРемонтов.СрокПоНормативу КАК СрокПоНормативу,
				   |	торо_ПланГрафикРемонтаПланРемонтов.ПричинаЗакрытия КАК ПричинаЗакрытия
	               |ПОМЕСТИТЬ ПланРемонтов
	               |ИЗ
	               |	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	               |ГДЕ
	               |	торо_ПланГрафикРемонтаПланРемонтов.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID КАК ID,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон КАК ДатаКон,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач КАК ДатаНач,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель КАК Исполнитель,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен КАК Отменен,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Склад КАК Склад,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен КАК Замещен,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета КАК ID_базы_расчета,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего КАК ID_замещающего,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт КАК ДатаНачСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт КАК ДатаКонСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт КАК ЗамещенСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта КАК СуммаРемонта,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Перенесенный КАК Перенесенный,
	               |	торо_ПланГрафикРемонтаПланРемонтов.СрокПоНормативу КАК СрокПоНормативу,
				   |	торо_ПланГрафикРемонтаПланРемонтов.ПричинаЗакрытия КАК ПричинаЗакрытия
	               |ИЗ
	               |	ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабДоступность КАК ТабДоступность
	               |		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТабДоступность.ID
	               |ГДЕ
	               |	ТабДоступность.ДоступенДляРедактирования
	               |	И (НЕ торо_ПланГрафикРемонтаПланРемонтов.Перенесенный
	               |			ИЛИ НЕ &ПриоритетПеренесенныхРемонтов
	               |			ИЛИ торо_ПланГрафикРемонтаПланРемонтов.ДатаНач <> торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт
	               |			ИЛИ торо_ПланГрафикРемонтаПланРемонтов.ДатаКон <> торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТабДоступность", Документы.торо_ПланГрафикРемонта.ОбновитьДоступностьДляРедактирования(Ссылка,ВидОперации,ПланРемонтов.Выгрузить()));
	Запрос.УстановитьПараметр("ПриоритетПеренесенныхРемонтов",Константы.торо_ИспользоватьПриоритетностьПеренесенныхРемонтов.Получить());
	ПланРемонтовДвижения = Запрос.Выполнить().Выгрузить();
	ПланРемонтовДвижения.Индексы.Добавить("ID");
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		Если ЕстьБолееПоздниеКорректировки() Тогда
			ТекстСообщения = НСтр("ru = 'Проведение документа невозможно, так как по ремонтам этого документа имеются более поздние документы.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли; 
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения,ДатаОкончанияПланирования);
		торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусРемонтовПриПроведении(ЭтотОбъект);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				
				Движения.торо_СоответствиеКорректировокДокументамППР.Очистить();
				
				Если ДокументОснование.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
					ИсходныйППР = Неопределено;
					НаборИсходных = РегистрыСведений.торо_СоответствиеКорректировокДокументамППР.СоздатьНаборЗаписей();
					НаборИсходных.Отбор.Регистратор.Установить(Ссылка);
					НаборИсходных.Прочитать(); 
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	торо_СоответствиеКорректировокДокументамППР.Корректируемый
					|ИЗ
					|	РегистрСведений.торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР
					|ГДЕ
					|	торо_СоответствиеКорректировокДокументамППР.Корректировка = &Корректировка";
					Запрос.УстановитьПараметр("Корректировка",ДокументОснование);
					
					НаборИсходных = Запрос.Выполнить().Выгрузить();
					СтрНабора = НаборИсходных.Добавить();
					СтрНабора.Корректируемый = ДокументОснование;
				Иначе
					ИсходныйППР = ДокументОснование;					
				КонецЕсли;
				
				Если ИсходныйППР <> Неопределено Тогда
					Движение = Движения.торо_СоответствиеКорректировокДокументамППР.Добавить();
					Движение.Корректировка = Ссылка;
					Движение.Корректируемый = ИсходныйППР;
				Иначе
					Для Каждого ЗаписьИсходный Из НаборИсходных Цикл
						Движение = Движения.торо_СоответствиеКорректировокДокументамППР.Добавить();
						Движение.Корректировка = Ссылка;
						Движение.Корректируемый = ЗаписьИсходный.Корректируемый;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		торо_МТОСервер.ПоместитьРемонтыВРегистрДляПроверкиАктуальности(Ссылка);
		
	КонецЕсли;
	
	КлючеваяОперация = Неопределено;
	ВремяНачала = Неопределено;
	Если ДополнительныеСвойства.Свойство("КлючеваяОперация", КлючеваяОперация) И ДополнительныеСвойства.Свойство("ВремяНачала", ВремяНачала) Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	КонецЕсли;
	
	торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	торо_МТОСервер.ПоместитьРемонтыВРегистрДляПроверкиАктуальности(Ссылка,, Истина);
	
	Если Не Отказ Тогда
		торо_Ремонты.ОбновитьЗаписиНезависимыхРегистровПоРемонтам(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции
// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения, ДатаОкончанияПланирования)
	
	Движения.торо_ПериодыПланированияППР.Очистить();
	// Движение по регистру "торо_ПериодыПланированияППР".
	ДвиженияПоРегистру_торо_ПериодыПланированияППР(РежимПроведения, ДатаОкончанияПланирования, Отказ, Заголовок, ПланРемонтовДвижения);
	
	// Движение по регистру "торо_ПлановыеРемонтныеРаботы".
	ДвиженияПоРегистру_торо_ПлановыеРемонтныеРаботы(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения);
	
	// Движение по регистру "торо_ОтмененныеРемонты".
	ДвиженияПоРегистру_торо_ОтмененныеРемонты(ПланРемонтовДвижения, Отказ);
	
	ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам();
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ОтмененныеРемонты".
//	
Процедура ДвиженияПоРегистру_торо_ОтмененныеРемонты(ПланРемонтовДвижения, Отказ)
	Если ПланРемонтовДвижения.Количество() = 0 Или Отказ
		Или ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот Тогда
		Возврат;
	КонецЕсли;
	
	Движения.торо_ОтмененныеРемонты.Записывать = Истина;
	Движения.торо_ОтмененныеРемонты.Очистить();
	Для каждого СтрокаТЧ Из ПланРемонтовДвижения Цикл
		Если Не (СтрокаТЧ.Отменен Или ЗначениеЗаполнено(СтрокаТЧ.ПричинаЗакрытия)) Тогда
		    Продолжить;
		КонецЕсли;
		
		Движение = Движения.торо_ОтмененныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
		Движение.Период = МоментВремени().Дата;
		Движение.ОбъектРемонта = СтрокаТЧ.ОбъектРемонтныхРабот;
		Движение.ВидРемонта = СтрокаТЧ.ВидРемонтныхРабот;
		Движение.ДатаНачала	= СтрокаТЧ.ДатаНачСт;
		Движение.ДатаОкончания = СтрокаТЧ.ДатаКонСт;
	КонецЦикла;	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ПлановыеРемонтныеРаботы".
//	
Процедура ДвиженияПоРегистру_торо_ПлановыеРемонтныеРаботы(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения)
	
	Если ПланРемонтовДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.торо_ПлановыеРемонтныеРаботы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	СтарыеДвижения = НаборЗаписей.Выгрузить();
	
	Движения.торо_ПлановыеРемонтныеРаботы.Очистить();	
	
	Если Не Отказ Тогда
		
		Для Каждого ИсходнаяСтрока Из СтарыеДвижения Цикл
			СтрДостДляРед = ПланРемонтовДвижения.Найти(ИсходнаяСтрока.ID, "ID");
			Если СтрДостДляРед = Неопределено Тогда
				СтрЕстьВДок = ПланРемонтов.Найти(ИсходнаяСтрока.ID, "ID");
				Если СтрЕстьВДок <> Неопределено И Не СтрЕстьВДок.Перенесенный Тогда
					Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,ИсходнаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ИсходнаяСтрока Из ПланРемонтовДвижения Цикл
			Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ИсходнаяСтрока);
			Движение.Период = Дата;
			Движение.Организация = Организация;
			Движение.Подразделение = Подразделение;
			Движение.СтоимостьРемонта = ИсходнаяСтрока.СуммаРемонта;
			Движение.ДатаНачалаРемонтныхРабот = ИсходнаяСтрока.ДатаНач;
			Движение.ДатаОкончанияРемонтныхРабот = ИсходнаяСтрока.ДатаКон;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ПериодыПланированияППР".
//	
Процедура ДвиженияПоРегистру_торо_ПериодыПланированияППР(РежимПроведения, ДатаОкончанияПланирования, Отказ, Заголовок, ПланРемонтовДвижения)
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот Тогда
		
		НаборДвижений = Движения.торо_ПериодыПланированияППР;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		ТаблицаОбъектовРемонта = ПланРемонтовДвижения.Скопировать(, "ОбъектРемонтныхРабот, ВидРемонтныхРабот");
		ТаблицаОбъектовРемонта.Свернуть("ОбъектРемонтныхРабот, ВидРемонтныхРабот");
		
		// Заполним таблицу движений.
		торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОбъектовРемонта, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаПланирования, "ДатаПланирования");								  
		ТаблицаДвижений.ЗаполнитьЗначения(ПериодичностьДетализации, "ПериодичностьДетализации");
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаОкончанияПланирования, "ДатаОкончанияПланирования");
		ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.Организация, "Организация");
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		ПроверитьПериодыПланированияРемонтныхРабот(ТаблицаДвижений, Отказ, Заголовок);
		
		Если Не Отказ Тогда
			Движения.торо_ПериодыПланированияППР.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВсеДокументыПоРемонтам()
	Движения.торо_ВсеДокументыПоРемонтам.Записывать = Истина;
	Движения.торо_ВсеДокументыПоРемонтам.Очистить();
	
	Для каждого СтрокаТЧ Из ПланРемонтов Цикл
	    Движение = Движения.торо_ВсеДокументыПоРемонтам.Добавить();
		Движение.IDРемонта = СтрокаТЧ.ID;
		Движение.ДокументПоРемонту = Ссылка;
		Движение.ДатаДокумента = Дата;
		Движение.Организация = Организация;
		Движение.Подразделение = Подразделение;
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет проверку на дублирование планов-графиков ППР.
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьПериодыПланированияРемонтныхРабот(ТаблицаПроверкиПериодовПланирования, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПроверкиПериодовПланирования.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	ТаблицаПроверкиПериодовПланирования.ПериодичностьДетализации КАК ПериодичностьДетализации,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаПланирования КАК ДатаПланирования,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования КАК ДатаОкончанияПланирования,
	               |	ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ТаблицаПроверкиПериодовПланирования.Организация КАК Организация,
	               |	ТаблицаПроверкиПериодовПланирования.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ТаблицаПроверкиПериодовПланирования
	               |ИЗ
	               |	&ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонтныхРабот,
	               |	ВидРемонтныхРабот,
	               |	ДатаПланирования,
	               |	ДатаОкончанияПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ДатаПланирования) КАК ДатаПланированияПредставление,
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ПериодичностьДетализации) КАК ПериодичностьДетализацииПредставление,
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ОбъектРемонтныхРабот) КАК ОбъектРемонтныхРаботПредставление,
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.Регистратор) КАК РегистраторПредставление,
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ВидРемонтныхРабот) КАК ВидРемонтныхРаботПредставление,
	               |	торо_ПериодыПланированияППР.Регистратор КАК Регистратор,
	               |	торо_ПериодыПланированияППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	торо_ПериодыПланированияППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ТаблицаПроверкиПериодовПланирования.Организация КАК Организация,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаПланирования КАК ДатаПланирования,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования КАК ДатаОкончанияПланирования
	               |ПОМЕСТИТЬ ВТ_ПересекающиесяПериоды
	               |ИЗ
	               |	ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПериодыПланированияППР КАК торо_ПериодыПланированияППР
	               |		ПО ТаблицаПроверкиПериодовПланирования.ОбъектРемонтныхРабот = торо_ПериодыПланированияППР.ОбъектРемонтныхРабот
	               |			И ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот = торо_ПериодыПланированияППР.ВидРемонтныхРабот
	               |			И ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования >= торо_ПериодыПланированияППР.ДатаПланирования
	               |			И ТаблицаПроверкиПериодовПланирования.ДатаПланирования <= торо_ПериодыПланированияППР.ДатаОкончанияПланирования
	               |			И ТаблицаПроверкиПериодовПланирования.Регистратор <> торо_ПериодыПланированияППР.Регистратор
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонтныхРабот,
	               |	ВидРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ПлановыеРемонтныеРаботы.ID КАК ID,
	               |	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	               |ПОМЕСТИТЬ IDРемонтовПересечения
	               |ИЗ
	               |	ВТ_ПересекающиесяПериоды КАК ВТ_ПересекающиесяПериоды
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы КАК торо_ПлановыеРемонтныеРаботы
	               |		ПО ВТ_ПересекающиесяПериоды.Регистратор = торо_ПлановыеРемонтныеРаботы.Регистратор
	               |			И ВТ_ПересекающиесяПериоды.ОбъектРемонтныхРабот = торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот
	               |			И ВТ_ПересекающиесяПериоды.ВидРемонтныхРабот = торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот КАК ДатаНачалаРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаОкончанияРемонтныхРабот КАК ДатаОкончанияРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен КАК Отменен,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Организация КАК Организация
	               |ПОМЕСТИТЬ ВТ_ПлановыеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					IDРемонтовПересечения.ID КАК ID
	               |				ИЗ
	               |					IDРемонтовПересечения КАК IDРемонтовПересечения)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |ГДЕ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен = ЛОЖЬ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонтныхРабот,
	               |	ВидРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ПересекающиесяПериоды.ДатаПланированияПредставление КАК ДатаПланированияПредставление,
	               |	ВТ_ПересекающиесяПериоды.ПериодичностьДетализацииПредставление КАК ПериодичностьДетализацииПредставление,
	               |	ВТ_ПересекающиесяПериоды.ОбъектРемонтныхРаботПредставление КАК ОбъектРемонтныхРаботПредставление,
	               |	ВТ_ПересекающиесяПериоды.РегистраторПредставление КАК РегистраторПредставление,
	               |	ВТ_ПересекающиесяПериоды.ВидРемонтныхРаботПредставление КАК ВидРемонтныхРаботПредставление,
	               |	ВТ_ПлановыеРемонты.Организация КАК Организация,
	               |	ВТ_ПересекающиесяПериоды.Регистратор КАК Регистратор
	               |ИЗ
	               |	ВТ_ПересекающиесяПериоды КАК ВТ_ПересекающиесяПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПлановыеРемонты КАК ВТ_ПлановыеРемонты
	               |		ПО ВТ_ПересекающиесяПериоды.ОбъектРемонтныхРабот = ВТ_ПлановыеРемонты.ОбъектРемонтныхРабот
	               |			И ВТ_ПересекающиесяПериоды.ВидРемонтныхРабот = ВТ_ПлановыеРемонты.ВидРемонтныхРабот
	               |ГДЕ
	               |	(ВТ_ПересекающиесяПериоды.Организация = ВТ_ПлановыеРемонты.Организация
	               |			ИЛИ (ВТ_ПлановыеРемонты.Отменен = ЛОЖЬ
	               |				ИЛИ ВТ_ПлановыеРемонты.Отменен ЕСТЬ NULL))
	               |	И ВТ_ПлановыеРемонты.ДатаНачалаРемонтныхРабот МЕЖДУ ВТ_ПересекающиесяПериоды.ДатаПланирования И ВТ_ПересекающиесяПериоды.ДатаОкончанияПланирования";
	
	Запрос.УстановитьПараметр("ТаблицаПроверкиПериодовПланирования", ТаблицаПроверкиПериодовПланирования);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ШаблонСообщения = НСтр("ru = 'Для оборудования ""%1"" и вида ремонта ""%2"" на данный период составлен документ планирования: 
										|%3, с той же организацией (%4), или с не отмененными ремонтами!'");
			
		Отказ = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонтныхРаботПредставление, Выборка.ВидРемонтныхРаботПредставление, 
								Выборка.РегистраторПредставление, Выборка.Организация);
								
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Регистратор);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ПланРемонтов".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПланРемонтов(Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ДатаНач, ДатаКон, СпособВыполнения");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПланРемонтов", СтруктураОбязательныхПолей, Отказ, "");
	
	Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда		
		ДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаПланирования, ПериодичностьДетализации, КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ИспользоватьЛоты = ПолучитьФункциональнуюОпцию("торо_ИспользоватьЛоты");
	
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Представление();
	ПредставлениеРеквизита      = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Реквизиты["Исполнитель"].Представление();
	
	// Проверим принадлежность ремонтов периоду планирования и заполненность Исполнителей.
	Для Каждого СтрокаТЧ Из ПланРемонтов Цикл
		
		Если СтрокаТЧ.ДатаНач < ДатаПланирования Тогда
			
			ШаблонСообщения = НСтр("ru = 'В объекте рем. работ: %1
			|Вид рем. работ: %2
			|дата начала работ %3 меньше даты начала планирования!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.ОбъектРемонтныхРабот, СтрокаТЧ.ВидРемонтныхРабот, СтрокаТЧ.ДатаНач);
			Поле = СтрШаблон("Объект.ПланРемонтов[%1].ДатаНач", ПланРемонтов.Индекс(СтрокаТЧ));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,,Отказ);
			
		ИначеЕсли СтрокаТЧ.ДатаНач > ДатаОкончанияПланирования Тогда
			
			ШаблонСообщения = НСтр("ru = 'В объекте рем. работ: %1
			|Вид рем. работ: %2
			|дата начала работ %3 больше даты окончания планирования!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	СтрокаТЧ.ОбъектРемонтныхРабот, СтрокаТЧ.ВидРемонтныхРабот, СтрокаТЧ.ДатаНач);
			Поле = СтрШаблон("Объект.ПланРемонтов[%1].ДатаНач", ПланРемонтов.Индекс(СтрокаТЧ));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,,Отказ);
			
		ИначеЕсли СтрокаТЧ.ДатаНач > СтрокаТЧ.ДатаКон Тогда
			
			ШаблонСообщения = НСтр("ru = 'В объекте рем. работ: %1
			|Вид рем. работ: %2
			|дата начала работ %3 больше даты окончания работ %4!'");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.ОбъектРемонтныхРабот, СтрокаТЧ.ВидРемонтныхРабот, 
									Формат(СтрокаТЧ.ДатаНач, "ДФ=dd.MM.yyyy"), Формат(СтрокаТЧ.ДатаКон, "ДФ=dd.MM.yyyy"));
			Поле = СтрШаблон("Объект.ПланРемонтов[%1].ДатаНач", ПланРемонтов.Индекс(СтрокаТЧ));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,,Отказ);
			
		КонецЕсли; 
		
		
		Значение = СтрокаТЧ.Исполнитель;
		
		Если НЕ ЗначениеЗаполнено(Значение) И Не СТрокаТЧ.Замещен
			И НЕ(СтрокаТЧ.СпособВыполнения = Перечисления.СпособыСтроительства.Подрядный И ИспользоватьЛоты) Тогда			
			Если ПредставлениеТабличнойЧасти = Неопределено Тогда
				ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Представление();
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'В строке номер ""%1"" табличной части ""%2"": 
										|	Не заполнено значение реквизита ""%3""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	СокрЛП(СтрокаТЧ.НомерСтроки), ПредставлениеТабличнойЧасти, СокрЛП(ПредставлениеРеквизита));
			Поле = СтрШаблон("Объект.ПланРемонтов[%1].Исполнитель", ПланРемонтов.Индекс(СтрокаТЧ));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,,Отказ);
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура УстановитьУправляемыеБлокировки(ДатаОкончанияПланирования)
	
	Блокировка = Новый БлокировкаДанных;
	
	// плановые работы
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ПлановыеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ПланРемонтов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	Блокировка.Заблокировать();  
	
КонецПроцедуры

Функция ЕстьБолееПоздниеКорректировки()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_СоответствиеКорректировокДокументамППР.Корректируемый КАК Корректируемый
	|ПОМЕСТИТЬ ДокОснование
	|ИЗ
	|	РегистрСведений.торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР
	|ГДЕ
	|	торо_СоответствиеКорректировокДокументамППР.Корректировка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СоответствиеКорректировокДокументамППР.Регистратор КАК Регистратор,
	|	торо_СоответствиеКорректировокДокументамППР.Корректировка КАК Корректировка,
	|	торо_СоответствиеКорректировокДокументамППР.Корректируемый КАК Корректируемый
	|ИЗ
	|	РегистрСведений.торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР
	|ГДЕ
	|	(торо_СоответствиеКорректировокДокументамППР.Корректируемый = &ДокументОснование
	|			ИЛИ торо_СоответствиеКорректировокДокументамППР.Корректируемый В
	|				(ВЫБРАТЬ
	|					ДокОснование.Корректируемый
	|				ИЗ
	|					ДокОснование КАК ДокОснование))
	|	И торо_СоответствиеКорректировокДокументамППР.Регистратор.Дата > &Дата";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
КонецФункции

#КонецОбласти
	
#КонецЕсли