&НаКлиенте
Перем ДатаНачСтрокиРедактирования;
&НаКлиенте
Перем ДатаКонСтрокиРедактирования;

&НаКлиенте
Перем УровеньПоложенияВДереве;
&НаКлиенте
Перем УровеньОрВДереве;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ПоказыватьПоложениеОР",	Истина);
	ПоказыватьСообщениеПриРасчетеППР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ПоказыватьСообщениеПриРасчетеППР", Истина);
			
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка = мОтображатьПоложение;
	
	СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяСтруктураИерархии", Истина);
			
	Если Не ЗначениеЗаполнено(СтруктураИерархии) Тогда
		СтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	КонецЕсли; 
	
	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
		
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Объект.Дата;
	Если ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда		
		мДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ПравоИнтерактивнаяПометкаУдаленияДокументаЗаказНаВнутреннееПотребление = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоИнтерактивноеДобавлениеДокументаЗаказНаВнутреннееПотребление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ПланГрафикРемонта);
	ДоступныЗаказыНаВнутреннееПотребление = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	ОбновитьДоступностьДляРедактирования();
		
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ПланГрафикРемонта;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --

	// Если открываем документ их обработки и нужно активировать указанную строку
	
	Если Параметры.Свойство("ID") Тогда
		ТекСтрокаИзВнеID = Параметры.ID;
	КонецЕсли;
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);
	
	// видимость легенды диаграммы
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказатьЛегенду.Пометка;
	
	ФОИспользоватьПриоритетностьПеренесенныхРемонтов = Константы.торо_ИспользоватьПриоритетностьПеренесенныхРемонтов.Получить();
	Элементы.ПланРемонтовПеренесенный.Видимость = ФОИспользоватьПриоритетностьПеренесенныхРемонтов;
	
	ОбновитьДокументыЗаказНаВнПотреблениеСервер();

	ФОВводНаОснованииПроведенного = Константы.торо_ВводЗаказовНаОснованииПроведенногоДокумента.Получить();
	Элементы.ДокументыЗаказНаВнПотреблениеДобавитьЗаказ.Доступность = ПравоИнтерактивноеДобавлениеДокументаЗаказНаВнутреннееПотребление
		И (НЕ ФОВводНаОснованииПроведенного ИЛИ (ФОВводНаОснованииПроведенного И Объект.Проведен));
	
	ФОРасширенныйРежимМТО = ПолучитьФункциональнуюОпцию("торо_РасширенныйРежимМТО");
	Элементы.ПланРемонтовСоздатьВнутренниеЗаказы.Видимость = Не ФОРасширенныйРежимМТО;
	Элементы.ДокументыЗаказНаВнПотреблениеДобавитьЗаказ.Видимость = Не ФОРасширенныйРежимМТО;
		
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		Элементы.ФормаУстановитьОценкуРМ.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииКорректироватьППРПоЛимитам.Видимость = Ложь;
		Элементы.ПланРемонтовПричинаЗакрытия.Видимость = Ложь;
	КонецЕсли;
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.ОбъектыРемонта.Выгрузить(), "ОбъектРемонтныхРабот");
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		УстановитьВидимостьВидаОперации();
	КонецЕсли;
	
	ФОИспользоватьВозможностьОтменыРемонтов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВозможностьОтменыРемонтов");

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступностьКнопкиНастройкаИерархии();
	РазвернутьВсеВетвиДеревьев();
	УстановитьВнешнийВидФормы();
	// Вывести в заголовке формы вид операции.
	
	// Если открываем документ их обработки и нужно активировать указанную строку
	Если ТекСтрокаИзВнеID <> "" Тогда
		АктивироватьСтрокуИзВне(ТекСтрокаИзВнеID);			
	КонецЕсли;	
	
	ЗаполнитьНумерацию();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		
		ДатаПланированияППР = Объект.ДокументОснование.ДатаПланирования;
		Если Не ЗначениеЗаполнено(ДатаПланированияППР) Тогда
		    ТекстСообщения = НСтр("ru = 'Не заполнен уточняемый план-график ППР!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		ДатаОкончанияППР = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаПланированияППР, Объект.ДокументОснование.ПериодичностьДетализации, Объект.ДокументОснование.КоличествоПериодов);
		ДатаОкончанияКорректировки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
		
		Если ДатаОкончанияППР < ДатаОкончанияКорректировки Тогда
			ТекстСообщения = НСтр("ru = 'Период корректировки не может быть больше периода план-графика ППР'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Объект.Дата > Объект.ДатаПланирования Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата документа не может быть больше даты планирования'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
		
	КонецЕсли; 	
	
	Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот Тогда
		ТекущийОбъект.ДокументОснование = Неопределено;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	ЗаписатьДеревоППРСУчетомПозиции(ТекущийОбъект);
	
	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	Если НужноСортироватьПланРемонтов Тогда
		ТекущийОбъект.ПланРемонтов.Сортировать("ДатаНач возр");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;	
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	УстановитьВидимостьВидаОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	НужноСортироватьПланРемонтов = Ложь;
	ТекущаяСтрока = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;	
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	
	// Отбор строк в плане ремонтов
	Если СтрокаВыбрана Тогда
		УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока);
	КонецЕсли;	
	
	УправлениеФормой();
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.торо_КалькуляторРасчетаКоличестваПериодов"
		И Не (Объект.КоличествоПериодов = ВыбранноеЗначение.КоличествоПериодов
				И Объект.ПериодичностьДетализации = ВыбранноеЗначение.ПериодичностьДетализации)Тогда
	    Объект.КоличествоПериодов = ВыбранноеЗначение.КоличествоПериодов;
		Объект.ПериодичностьДетализации = ВыбранноеЗначение.ПериодичностьДетализации;
		КоличествоПериодовПриИзменении(Элементы.КоличествоПериодов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "КорректировкаППРПоЛимитам" Тогда
		Если Не ЗначениеЗаполнено(Параметр) Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого ТекущееЗначение Из Параметр Цикл
			СтруктураПоиска = Новый Структура("ID", ТекущееЗначение.ID);
			НайденныеСтроки = Объект.ПланРемонтов.НайтиСтроки(СтруктураПоиска);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отменен = ТекущееЗначение.Отменен;
			КонецЦикла;
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "СозданДокументЧерезРМТехСпец" ТОгда
		ОбновитьДоступностьДляРедактирования();
	КонецЕсли;
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПланГрафикППР Тогда
		Если НужноСортироватьПланРемонтов Тогда
			параметрОбъект = Объект;
			ИзмОбъект = ВыполнитьСортировкуТЧПланРемонтов(параметрОбъект);
			КопироватьДанныеФормы(ИзмОбъект, Объект);
			НужноСортироватьПланРемонтов = Ложь;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		ДиаграммаГантаППР.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		ДиаграммаГантаППР.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГантаППР.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаГантаППР.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаППРПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	Если НЕ ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"] Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	Если Интервал.Цвет = WebЦвета.Черный
		ИЛИ Интервал.Расшифровка.ДоступенДляРедактирования <> Истина 
		ИЛИ Интервал.Цвет = WebЦвета.Красный Тогда
		
		ОтменаРедактирования = Истина;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		ОР = Интервал.Значение.Точка.Родитель.Расшифровка;
		ВР = Интервал.Значение.Точка.Расшифровка;
		ID = Интервал.Расшифровка.ID;
		 		
		Для каждого СтрокаПланРемонтов Из Объект.ПланРемонтов Цикл
			
			Если СтрокаПланРемонтов.ОбъектРемонтныхРабот = ОР И СтрокаПланРемонтов.ВидРемонтныхРабот = ВР И СтрокаПланРемонтов.ID = ID Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Интервал.Начало = НачалоДня(Интервал.Начало) И Интервал.Конец = КонецДня(Интервал.Конец) Тогда 
			// Ничего не делать.
		 	ОтменаРедактирования = Истина;
		 
		ИначеЕсли Интервал.Начало = НачалоДня(Интервал.Конец) Тогда 
			// Однодневный ремонт.
			Интервал.Начало =  НачалоДня(Интервал.Начало);
		 	Интервал.Конец = КонецДня(Интервал.Конец); 
		Иначе
			Если Интервал.Начало = НачалоДня(Интервал.Начало) Тогда  
				// Перемещение только правой границы.
				Интервал.Конец = КонецДня(Интервал.Конец); 
			ИначеЕсли Интервал.Конец = КонецДня(Интервал.Конец) Тогда  
				// Перемещение только левой границы.
				Интервал.Начало = НачалоДня(Интервал.Начало);
			ИначеЕсли Интервал.Конец = СтрокаПланРемонтов.ДатаНач Тогда
				// Перемещение правой границы за левую (либо интервала целиком).
				Интервал.Конец = КонецДня(Интервал.Конец - 86400);
			    Интервал.Начало = НачалоДня(Интервал.Начало);
			ИначеЕсли Интервал.Начало = СтрокаПланРемонтов.ДатаКон Тогда
				// Перемещение левой границы за правую (либо интервала целиком).
			    Интервал.Начало = НачалоДня(Интервал.Начало + 86400);
			    Интервал.Конец = КонецДня(Интервал.Конец);
			Иначе 
				// Перемещение интервала целиком.
				Если Интервал.Начало < СтрокаПланРемонтов.ДатаНач Тогда  
					// Мы двигали влево, двигаем влево и дальше.
				    Интервал.Начало = НачалоДня(Интервал.Начало);
			    	Интервал.Конец = КонецДня(Интервал.Конец - 86400);
				Иначе 
					// Мы двигали вправо, двигаем вправо.
			    	Интервал.Начало = НачалоДня(Интервал.Начало + 86400);
			    	Интервал.Конец = КонецДня(Интервал.Конец);
		  		КонецЕсли; 
		 	КонецЕсли;
		КонецЕсли;
				
		Интервал.Текст = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		
		СтрокаПланРемонтов.ДатаНач = Интервал.Начало;
		СтрокаПланРемонтов.ДатаКон = Интервал.Конец;
		Если ФОИспользоватьПриоритетностьПеренесенныхРемонтов Тогда
			СтрокаПланРемонтов.Перенесенный = Истина;
		КонецЕсли;
		Модифицированность = Истина;
		НужноСортироватьПланРемонтов = Истина;

		
		ТочкиДиаграммы = НайтиНужнуюТочкуДиаграммыГанта(ОР, ВР);
		
		Для каждого Точка Из ТочкиДиаграммы Цикл
			ЗначениеДиаграммы = ДиаграммаГантаППР.ПолучитьЗначение(Точка, ДиаграммаГантаППР.Серии[0]);
			
			Для каждого Инт Из ЗначениеДиаграммы Цикл
				
				Если Инт.Расшифровка.ID = ID Тогда
					
					Инт.Начало = Интервал.Начало;
					Инт.Конец = Интервал.Конец;
					Инт.Текст = Строка(Инт.Начало) + " - " + Строка(Инт.Конец);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаППРВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.Организация И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		ДокументОснованиеПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		Объект.ДокументОснование = Неопределено;
		ДокументОснованиеПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ПустаяСтрока(Текст) Тогда
		Объект.ДокументОснование = Неопределено;
		ДокументОснованиеПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДокументОснованиеПриИзмененииЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Данные документа будут очищены! Продолжить?'"), РежимДиалогаВопрос.ДаНет,60);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	ОбновитьДоступностьДляРедактирования();

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	ОбновитьДоступностьДляРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьДетализацииПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	ОбновитьДоступностьДляРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРемонтыИзДокументаОснования(ИзмененаТЧОР = Ложь)
	
	Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		Если ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда		
			мДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Не ИзмененаТЧОР Тогда
			ЗаписатьДеревоППРСУчетомПозиции();
		КонецЕсли;
		ТЗ_ПланРемонтов = Документы.торо_ПланГрафикРемонта.ПодобратьРемонтыДляКорректировки(мДатаОкончанияПланирования, Объект.ДокументОснование, Объект.ДатаПланирования, Объект.Ссылка, Истина, Объект.ОбъектыРемонта.Выгрузить());
		Объект.ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда 
		ЕстьЗаполненныйСклад = Ложь;
		Для каждого Строка Из Объект.ПланРемонтов Цикл 
			Если ЗначениеЗаполнено(Строка.Склад) Тогда 
				ЕстьЗаполненныйСклад = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьЗаполненныйСклад Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросОПерезаполненииСкладаЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Перезаполнить склад в табличной части?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнитьСкладИзПодразделения(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
	
	КонецПроцедуры
	
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)	
	ВидОперацииПриИзмененииНаСервере();
	УстановитьВнешнийВидФормы();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		Объект.ПланРемонтов.Очистить();
		ДокументыЗаказНаВнПотребление.Очистить();
	Иначе
		ЗагрузитьРемонтыИзДокументаОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПланаГрафикаППРСУчетомПозици

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("СоответствиеОбъектовРемонта") Тогда
			
			УдалятьОтсутствующиеВидыРемонта = ВыбранноеЗначение.Свойство("УдалятьОтсутствующиеВиды")
				И ВыбранноеЗначение.УдалятьОтсутствующиеВиды;
			
			ДеревоППРОбработкаВыбора_ИзФормыПодбораОР(ВыбранноеЗначение, УдалятьОтсутствующиеВидыРемонта);
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьНумерацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	
	Элементы.ПланРемонтов.ТекущаяСтрока = 0;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		УправлениеФормой(0);
		
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииИзменитьРемонты.Доступность = Ложь;
	Иначе
		
		УстановитьОтборСтрокВПланеРемонтов(ТекущиеДанные);
		
		ЭтоСтрокаВидаРемонта = ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов")
			ИЛИ ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта");

		Если ЭтоСтрокаВидаРемонта Тогда
			УправлениеФормой(1);
		Иначе
			УправлениеФормой(0);		
		КонецЕсли;		
	КонецЕсли			
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПослеУдаления(Элемент)
	ЗаполнитьНумерацию();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПередУдалением(Элемент, Отказ)

	МассивВыделенныхСтрок = Новый Массив;
	Для каждого ИдСтроки из Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = ДеревоПланаГрафикаППРСУчетомПозиции.НайтиПоИдентификатору(ИдСтроки);
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	ВыделенКорень = Ложь;
	Для каждого ВыделеннаяСтрока из МассивВыделенныхСтрок Цикл
		Если ВыделеннаяСтрока.Ремонты = "<Объекты и виды ремонта>" Тогда
			ВыделенКорень = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделенКорень Тогда
		Отказ = Истина;
		ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы()[0].ПолучитьЭлементы().Очистить();
		Объект.ПланРемонтов.Очистить();
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;	
	
	Для каждого ВыделеннаяСтрока из МассивВыделенныхСтрок Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") 
			ИЛИ ТипЗнч(ВыделеннаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ВыделеннаяСтрока.ПолучитьРодителя().Ремонты, ВыделеннаяСтрока.Ремонты);
		Иначе
			СтрокиВидаРемонтов = ВыделеннаяСтрока.ПолучитьЭлементы();
			Для каждого Стр Из СтрокиВидаРемонтов Цикл
				УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ВыделеннаяСтрока.Ремонты, Стр.Ремонты, Стр);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииРемонтыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииРемонтыАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланРемонтов
&НаКлиенте
Процедура ПланРемонтовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	
	Если ТекСтрокаДерева <> Неопределено И ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
		
		Отказ = Истина;
		СписокВидовРемонтов = ПолучитьСписокВидовРемонтаЦепочки(ТекСтрокаДерева.Ремонты);
		Если СписокВидовРемонтов.Количество() > 0 Тогда
			ОбъектРемонта = ТекСтрокаДерева.ПолучитьРодителя().Ремонты;
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСтрокуРемонтаДляЦепочкиЗавершение", ЭтотОбъект, Новый Структура("ОбъектРемонта", ОбъектРемонта));
			СписокВидовРемонтов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите вид ремонта'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'В выбранной цепочке нет видов ремонта!'"), 20);
		КонецЕсли;
		
	ИначеЕсли ТекСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вид ремонтных работ для ввода данных графика ППР!'"), 20);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.ПланРемонтов.ТекущиеДанные;
		ТекДанные.ID = Новый УникальныйИдентификатор;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
			ТекДанные.ДатаНачСт = Дата(1,1,1);
			ТекДанные.ДатаКонСт = Дата(1,1,1);
		КонецЕсли;
				
		Если Не Копирование Тогда
			
			ТекСтрокаДереваППР             = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
			ТекДанные.ОбъектРемонтныхРабот = ТекСтрокаДереваППР.ПолучитьРодителя().Ремонты;
			ТекДанные.ВидРемонтныхРабот    = ТекСтрокаДереваППР.Ремонты;
			
		КонецЕсли; 
		
		ПланРемонтовПриАктивизацииСтроки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		мНеверныйПериодПоКорректировке = Ложь;			
		ТекСтрокаПланРемонтов = Элемент.ТекущиеДанные;		
		Если ТекСтрокаПланРемонтов.ДатаКонСт < ТекСтрокаПланРемонтов.ДатаНачСт Тогда
			ШаблонСообщения = НСтр("ru = 'Дата окончания периода меньше даты начала (%1 - %2)'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрокаПланРемонтов.ДатаНачСт, ТекСтрокаПланРемонтов.ДатаКонСт);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			мНеверныйПериодПоКорректировке = Истина;			
		КонецЕсли;	
		Если ТекСтрокаПланРемонтов.ДатаКон < ТекСтрокаПланРемонтов.ДатаНач Тогда
			ШаблонСообщения = НСтр("ru = 'Дата окончания нового периода меньше даты начала (%1 - %2)'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрокаПланРемонтов.ДатаНач, ТекСтрокаПланРемонтов.ДатаКон);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			мНеверныйПериодПоКорректировке = Истина;			
		КонецЕсли;	
	КонецЕсли;
	
	ТекДанныеПланаРемонтов = Элементы.ПланРемонтов.ТекущиеДанные;
	Если ТекДанныеПланаРемонтов<>Неопределено Тогда 
		ДатаНачалаРемонта = ТекДанныеПланаРемонтов.ДатаНач;
		ДатаОкончанияРемонта = ТекДанныеПланаРемонтов.ДатаКон;
	Иначе	
		ДатаНачалаРемонта = Дата(1,1,1);
		ДатаОкончанияРемонта = Дата(1,1,1);	
	КонецЕсли;
	Если  Не ДатаНачалаРемонта = Дата(1,1,1) И Не ДатаОкончанияРемонта = Дата(1,1,1) Тогда
		МассивСтрокВидаРемонта = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", ТекДанныеПланаРемонтов.ОбъектРемонтныхРабот, ТекДанныеПланаРемонтов.ВидРемонтныхРабот));
		
		Для Каждого СтрокаВидаРемонта Из МассивСтрокВидаРемонта Цикл
			Если СтрокаВидаРемонта.ID <> Элемент.ТекущиеДанные.ID И ((СтрокаВидаРемонта.ДатаНач <= ДатаОкончанияРемонта И СтрокаВидаРемонта.ДатаНач >= ДатаНачалаРемонта)
				ИЛИ (СтрокаВидаРемонта.ДатаКон <= ДатаОкончанияРемонта И СтрокаВидаРемонта.ДатаКон >= ДатаНачалаРемонта)) Тогда
				ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 на период %2 - %3 уже запланирован ремонт с видом %4!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаВидаРемонта.ОбъектРемонтныхРабот, ДатаНачалаРемонта, ДатаОкончанияРемонта, СтрокаВидаРемонта.ВидРемонтныхРабот);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				мДублирующиесяРемонтыНаПериод = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") И ТекДанныеПланаРемонтов.Перенесенный И (ДатаНачСтрокиРедактирования<>ДатаНачалаРемонта ИЛИ ДатаКонСтрокиРедактирования<>ДатаОкончанияРемонта) Тогда
		ТекДанныеПланаРемонтов.ДатаНачСт = ДатаНачСтрокиРедактирования;
		ТекДанныеПланаРемонтов.ДатаКонСт = ДатаКонСтрокиРедактирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПриАктивизацииСтроки(Элемент)
	ДанныеТекущейСтроки = Элементы.ПланРемонтов.ТекущиеДанные;
	Если (НЕ ДанныеТекущейСтроки = Неопределено) Тогда
		Если (НЕ МассивIDДляБлокировки = Неопределено) Тогда
			Если НЕ МассивIDДляБлокировки.НайтиПоЗначению(ДанныеТекущейСтроки.ID) = Неопределено Тогда
				ПопыткаМодификацииСтрокиСоСвязаннымДокументом = Истина;
			Иначе
				ПопыткаМодификацииСтрокиСоСвязаннымДокументом = Ложь;			
			КонецЕсли;	
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
			Элементы.ПланРемонтовУдалить.Доступность = Не ЗначениеЗаполнено(ДанныеТекущейСтроки.ДатаНачСт);
		Иначе
			Элементы.ПланРемонтовУдалить.Доступность = Истина;
		КонецЕсли;
		
		Если ДанныеТекущейСтроки.Замещен Тогда
			Элементы.ДокументыЗаказНаВнПотреблениеДобавитьЗаказ.Доступность = Ложь;
			Элементы.ДокументыЗаказНаВнПотреблениеУдалитьЗаказНаВнПотребление.Доступность = Ложь;
			Элементы.ДокументыЗаказНаВнПотребление.Доступность = Ложь;
		Иначе
			Элементы.ДокументыЗаказНаВнПотреблениеДобавитьЗаказ.Доступность = Истина И ПравоИнтерактивноеДобавлениеДокументаЗаказНаВнутреннееПотребление
				И (НЕ ФОВводНаОснованииПроведенного ИЛИ (ФОВводНаОснованииПроведенного И Объект.Проведен));
			Элементы.ДокументыЗаказНаВнПотреблениеУдалитьЗаказНаВнПотребление.Доступность = Истина И ПравоИнтерактивнаяПометкаУдаленияДокументаЗаказНаВнутреннееПотребление;
			Элементы.ДокументыЗаказНаВнПотребление.Доступность = Истина;
		КонецЕсли;
		
		Элементы.ДокументыЗаказНаВнПотребление.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ДанныеТекущейСтроки.ID);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередУдалением(Элемент, Отказ)

	Если ПопыткаМодификацииСтрокиСоСвязаннымДокументом Или Не Элементы.ПланРемонтовУдалить.Доступность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередНачаломИзменения(Элемент, Отказ)
	ТекущаяСтрокаРемонта = Элементы.ПланРемонтов.ТекущиеДанные;
	Если НЕ ТекущаяСтрокаРемонта = Неопределено Тогда
		
		Если ТекущаяСтрокаРемонта.Замещен Или ЗначениеЗаполнено(ТекущаяСтрокаРемонта.ВРамкахОстановочного) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", ТекущаяСтрокаРемонта.ID));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаДляРедактирования = Массивстрок[0];
			
			Если ПопыткаМодификацииСтрокиСоСвязаннымДокументом Тогда
				Отказ = Истина;
			ИначеЕсли Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
				Если ТекущаяСтрокаРемонта.Перенесенный Тогда
					Если ФОИспользоватьПриоритетностьПеренесенныхРемонтов Тогда
						Отказ = Истина;
					КонецЕсли;
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ДатаНачСтрокиРедактирования = ТекущаяСтрокаРемонта.ДатаНач;
	ДатаКонСтрокиРедактирования = ТекущаяСтрокаРемонта.ДатаКон;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ПланРемонтов.ТекущиеДанные;
	Если ТекущаяСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", , Элемент);
		
	ИначеЕсли ТекущаяСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Подрядный") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора", , Элемент);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбора исполнителя укажите способ выполнения ремонта.'"));
		Возврат;
	КонецЕсли;
	
	Если ФормаВыбора <> Неопределено Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПланРемонтов.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип ("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;  
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		торо_ЗаполнениеДокументовКлиент.ЗаполнитьСклад(ТекущиеДанные.Исполнитель, Склад);
		ТекущиеДанные.Склад = Склад;
	КонецЕсли;
	
	РассчитатьСтоимостиРемонтовНаСервере(Новый Структура("ID, ДатаНач, ОбъектРемонтныхРабот, ВидРемонтныхРабот", ТекущиеДанные.ID, ТекущиеДанные.ДатаНач, ТекущиеДанные.ОбъектРемонтныхРабот, ТекущиеДанные.ВидРемонтныхРабот));
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовСпособВыполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПланРемонтов.ТекущиеДанные;
	ТекущиеДанные.Исполнитель = "";
	
	РассчитатьСтоимостиРемонтовНаСервере(Новый Структура("ID, ДатаНач, ОбъектРемонтныхРабот, ВидРемонтныхРабот", ТекущиеДанные.ID, ТекущиеДанные.ДатаНач, ТекущиеДанные.ОбъектРемонтныхРабот, ТекущиеДанные.ВидРемонтныхРабот));
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовВидРемонтныхРаботАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовОбъектРемонтныхРаботАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "ПланРемонтовВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.ФормаОбъекта", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовДатаНачПриИзменении(Элемент)
	
	Если ФОИспользоватьПриоритетностьПеренесенныхРемонтов Тогда
		ТекущиеДанные = Элементы.ПланРемонтов.ТекущиеДанные;
		ТекущиеДанные.Перенесенный = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовДатаКонПриИзменении(Элемент)
	
	Если ФОИспользоватьПриоритетностьПеренесенныхРемонтов Тогда
		ТекущиеДанные = Элементы.ПланРемонтов.ТекущиеДанные;
		ТекущиеДанные.Перенесенный = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыЗаказНаВнПотребление
&НаКлиенте
Процедура ДокументыЗаказНаВнПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПоследнийВыбранныйЗаказ = ТекущиеДанные.ЗаказНаВнутреннееПотребление;
		
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДокументыЗаказНаВнПотребление",ЭтаФорма);
		ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Ложь;
	ПараметрыРасчета_РасчетВыборочный = Ложь;
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета план-графика ППР необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежиме(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Истина;
	ПараметрыРасчета_РасчетВыборочный = Ложь;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета план-графика ППР необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВыборочно(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Ложь;
	ПараметрыРасчета_РасчетВыборочный = Истина;
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета план-графика ППР необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеВыборочно(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Истина;
	ПараметрыРасчета_РасчетВыборочный = Истина;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета план-графика ППР необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПоложение(Команда)
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка = НЕ Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка;
	
	мОтображатьПоложение = Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка;
	
	// †6
	ЗаписатьДеревоППРСУчетомПозиции();
 	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
	РазвернутьВсеВетвиДеревьев();
	
	ЗаполнитьНумерацию();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", СтруктураИерархии);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("СтроитсяАвтоматически", Ложь));
	
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРемонты(Команда)
	
	ВыделенныеСтроки = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ВыделенныеСтроки;
	
	СоответствиеОбъектовВидамРемонта = СоответствиеОбъектовВидамРемонтаПоИдентификаторам(ВыделенныеСтроки);
		
	Если СоответствиеОбъектовВидамРемонта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("ВходныеДанные", СоответствиеОбъектовВидамРемонта);
	ПараметрыФормы.Вставить("ПодбиратьЦепочкиРемонтов", Истина);
	ПараметрыФормы.Вставить("ТолькоВидыРемонтовППР", Истина); 
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_ПланГрафикРемонта");
	ПараметрыФормы.Вставить("ФормаВладелецСтрокой", "Документ.торо_ПланГрафикРемонта.Форма.ФормаДокумента");
	
	ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораВидовРемонтаМероприятийИЦепочек", 
		ПараметрыФормы, Элементы.ДеревоПланаГрафикаППРСУчетомПозиции);		
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_ПланГрафикРемонта");
	ПараметрыФормы.Вставить("Организация", Объект.ОрганизацияВладелец);
	ПараметрыФормы.Вставить("Подразделение", Объект.ПодразделениеВладелец);
	ПараметрыФормы.Вставить("НеУчаствуетВПланировании", Истина);
	ПараметрыФормы.Вставить("СтруктураИерархии", СтруктураИерархии);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РазрешитьВыборФМ", Ложь);
	ПараметрыФормы.Вставить("ЕстьНормативы", Истина);
		
	ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
		ПараметрыФормы, Элементы.ДеревоПланаГрафикаППРСУчетомПозиции, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей(Команда)
	
	ОбновитьДоступностьДляРедактирования();
	
	ПараметрыФормы = Новый Структура("ДокументППР, ТаблицаРемонтовИзППР, МассивДоступныхДляКорректировкиСтрок", Объект.Ссылка, Объект.ПланРемонтов, МассивДоступныхДляКорректировкиСтрок);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьИсполнителейЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.торо_ПланГрафикРемонта.Форма.ФормаАвтозаполненияИсполнителей", ПараметрыФормы, ЭтаФорма, 
		Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)
	
	Кнопка = Элементы.ПланРемонтовОтображатьЗамещенные;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ТекущаяСтрока = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Если СтрокаВыбрана Тогда
		УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГанта(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Неопределено;

	Состояние("Построение диаграммы ремонтов Плана-графика...");
    ПостроитьДиаграммуГантаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованию(Команда)
	
	Если мОтображатьПоложение Тогда
		ТекстСообщения = НСтр("ru = 'Сортировать объекты ремонта в порядке следования в дереве возможно только при отключенной опции ""Отображать положение""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	Элементы.СортироватьПоНаименованию.Пометка = НЕ Элементы.СортироватьПоНаименованию.Пометка;
	СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
	
	Если ДиаграммаГантаППР.Точки.Количество() > 0 Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,НСтр("ru = 'Перестроить сейчас'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет,НСтр("ru = 'Перестроить позже (вручную)'"));
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СортироватьПоНаименованиюЗавершение",ЭтаФорма),
			НСтр("ru = 'Для применения настроек сортировки необходимо перестроить диаграмму.'"),
			СписокКнопок,,КодВозвратаДиалога.Да,НСтр("ru = 'Изменение настроек'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованиюЗавершение(Результат,ДопПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПостроитьДиаграммуГанта(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьППРПоЛимитам(Команда)	
	Если Объект.ПланРемонтов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Корректировка ППР по лимитам невозможна, так как отсутствуют запланированные ремонты!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
		Возврат;
	КонецЕсли;
	
	ДатаНачалаЛимита = Дата(3999,1,1);
	ДатаОкончанияЛимита = Дата(1,1,1);
	
	МассивТЧ = Новый Массив;
	СписокОбъектов = Новый Массив;
	
	Для каждого Стр Из Объект.ПланРемонтов Цикл
		Если НЕ Стр.Замещен Тогда
			Если Стр.ДатаНач < ДатаНачалаЛимита Тогда
				ДатаНачалаЛимита = Стр.ДатаНач;
			КонецЕсли;
			Если Стр.ДатаКон > ДатаОкончанияЛимита Тогда
				ДатаОкончанияЛимита = Стр.ДатаКон;
			КонецЕсли;
			СписокОбъектов.Добавить(Стр.ОбъектРемонтныхРабот);
			
			СтрТЧ = Новый Структура("ID, ВидРемонтныхРабот, ДатаКон, ДатаНач, Исполнитель, ОбъектРемонтныхРабот, СпособВыполнения, Отменен, СуммаРемонта, Замещен");
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
			МассивТЧ.Добавить(СтрТЧ);
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ЕстьЛимитыНаПериод(Год(ДатаНачалаЛимита), Год(ДатаОкончанияЛимита)) Тогда
		ТекстСообщения = НСтр("ru = 'По периоду (ППР) отсутствуют установленные лимиты (документ ""Установка лимитов на плановые ремонтные работы""). Для корректной работы обработки необходимо установить лимиты на плановые ремонтные работы указанным документом.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьЛимитыНаОрганизацию(Год(ДатаНачалаЛимита), Год(ДатаОкончанияЛимита), СписокОбъектов) Тогда
		ТекстСообщения = НСтр("ru = 'По периоду (ППР) отсутствуют установленные лимиты (документ ""Установка лимитов на плановые ремонтные работы"") для установленных организаций и направлений в карточках ОР. 
									|Для корректной работы обработки необходимо установить лимиты на плановые ремонтные работы указанным документом.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ОткрытьФорму("Обработка.торо_КорректировкаППРПоРМ.Форма",Новый Структура("ДатаНачалаЛимита, ДатаОкончанияЛимита, СтруктураПланаРемонтов", Год(ДатаНачалаЛимита), Год(ДатаОкончанияЛимита), МассивТЧ), Объект.Ссылка, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОценкуРМ(Команда)	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьОценкуРМЗавершение", ЭтотОбъект), НСтр("ru = 'Для продолжения операции необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	УстановитьОценкуРМФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиРемонтов(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСтоимостиРемонтовЗавершение", ЭтотОбъект), НСтр("ru = 'Перезаполнить плановые стоимости ремонтов?'"),РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаППР.Точки Цикл
		ДиаграммаГантаППР.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаППР.Точки Цикл
		ДиаграммаГантаППР.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказательЛегенду(Команда)
	Элементы.ПоказатьЛегенду.Пометка = НЕ Элементы.ПоказатьЛегенду.Пометка;
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказатьЛегенду.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказНаВнПотребление(Команда)
	ТекущиеДанные = Элементы.ДокументыЗаказНаВнПотребление.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗаказСсылка",ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"         ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Удаление связи с заказом на внутреннее потребление");
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказ(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаказВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования заказа на внутреннего потребления необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		ДобавитьЗаказПослеВопроса();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьЗаказВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЗаказПослеВопроса();	 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьЗаказПослеВопроса()
	МассивРемонтов = Новый Массив;
	
	ВыделенныеСтроки = Элементы.ПланРемонтов.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ВыделенныеРемонт = Объект.ПланРемонтов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		СтруктураРемонта = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ДатаНач, ID, ДатаКон, Склад");
		ЗаполнитьЗначенияСвойств(СтруктураРемонта, ВыделенныеРемонт);
		
		МассивРемонтов.Добавить(СтруктураРемонта);
	КонецЦикла;
	
	Если МассивРемонтов.Количество() > 0 Тогда
		стрВозврата = СоздатьДокумент_ЗаказНаВнутреннеПотребление(МассивРемонтов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов",ЭтаФорма,стрВозврата.СтруктураПередаваемыхВОбработчикПараметров);
		ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта",стрВозврата.СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьВнутренниеЗаказы(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьВнутренниеЗаказыВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования заказов на внутреннего потребления необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		СоздатьВнутренниеЗаказыПослеВопроса();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура СоздатьВнутренниеЗаказыВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		СоздатьВнутренниеЗаказыПослеВопроса();	 
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СоздатьВнутренниеЗаказыПослеВопроса()
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Показать(Новый ОписаниеОповещения("СоздатьВнутренниеЗаказыЗавершение", ЭтотОбъект));
	
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьВнутренниеЗаказыЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда 
		ВыбранныйПериод = Период;
	Иначе
		Возврат;
	КонецЕсли;	
	
	Для каждого текРемонт из Объект.ПланРемонтов Цикл
		
		Если текРемонт.ДатаНач >= ВыбранныйПериод.ДатаНачала
			и текРемонт.ДатаКон <= ВыбранныйПериод.ДатаОкончания
			и НЕ текРемонт.Замещен
			Тогда
			
			МассивРемонтов = Новый Массив;
			
			стрПараметров = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ДатаНач, ID, ДатаКон, Склад");
			ЗаполнитьЗначенияСвойств(стрПараметров, ТекРемонт);
			
			МассивРемонтов.Добавить(стрПараметров);
			
			СоздатьДокумент_ЗаказНаВнутреннеПотребление(МассивРемонтов, Истина);		
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовВводНаОснованииАктОВыполненииРемонтныхРабот(Команда)

	ПараметрыФормы = Новый Структура("Основание, ВыделенныеСтроки", Объект.Ссылка, ПолучитьВыделенныеПланыРемонтов());
	ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовВводНаОснованииЗаявкаНаРемонт(Команда)
	
	ПараметрыФормы = Новый Структура("Основание, ВыделенныеСтроки", Объект.Ссылка, ПолучитьВыделенныеПланыРемонтов());
	ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовВводНаОснованииНарядНаВыполнениеРемонтныхРабот(Команда)
	
	ПараметрыФормы = Новый Структура("Основание, ВыделенныеСтроки", Объект.Ссылка, ПолучитьВыделенныеПланыРемонтов());
	ОткрытьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДиаграмму(Команда)
	
	ДиаграммаГантаППР.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПараметрыГрафика(Команда)
	ПараметрыФормы = Новый Структура("ДатаНачалаПланирования, ПериодичностьДетализации", Объект.ДатаПланирования, Объект.ПериодичностьДетализации);
	ОткрытьФорму("ОбщаяФорма.торо_КалькуляторРасчетаКоличестваПериодов", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаВыбораВДеревеППР
  
&НаКлиенте
Процедура ЗаполнитьНумерацию()
	ОбъектыРемонта = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы()[0];
	Итератор = 1;
	ЗаполнитьНумерациюВДереве(ОбъектыРемонта, Итератор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНумерациюВДереве(Дерево, Итератор)
	ОбъектыРемонта = Дерево.ПолучитьЭлементы();
	Для Каждого ОР Из ОбъектыРемонта Цикл
		Если ЗначениеЗаполнено(ОР.ОбъектРемонта) Тогда
			ОР.Номер = Итератор;
			Итератор = Итератор + 1;
		Иначе
			ЗаполнитьНумерациюВДереве(ОР, Итератор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоППРОбработкаВыбора_ИзФормыПодбораОР(Знач ВыбранноеЗначение, УдалятьОтсутствующиеВидыРемонта)
	
	РодителиОР = Новый Соответствие;
	МассивОР = Новый Массив;

	УсловиеПоискаВДереве = торо_ДанныеФормыДеревоКлиентСервер.Новый_ГруппаИли_Условия();
	Для каждого КлючИЗначение из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл
		МассивОР.Добавить(КлючИЗначение.Ключ);
		торо_ДанныеФормыДеревоКлиентСервер.ДобавитьВГруппуУсловияЭлементИлиГруппу(УсловиеПоискаВДереве,
		торо_ДанныеФормыДеревоКлиентСервер.Новый_ЭлементУсловия("ОбъектРемонта", КлючИЗначение.Ключ));
	КонецЦикла;  
		
	Если мОтображатьПоложение Тогда
		РодителиОР = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, СтруктураИерархии, ТекущаяДата(), Истина);
	КонецЕсли;
	
	СтрокиОРВДереве = Новый Соответствие;
	Если МассивОР.Количество() > 0 Тогда 
		
		СтрокиОРВДеревеМассив = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтрокиПоСоставномуУсловию(
			ДеревоПланаГрафикаППРСУчетомПозиции,
			УсловиеПоискаВДереве,
			УровеньОрВДереве, УровеньОрВДереве + 1);
			
		Для Каждого СтрокаОРВДереве Из СтрокиОРВДеревеМассив Цикл
			СтрокиОРВДереве.Вставить(СтрокаОРВДереве.ОбъектРемонта, СтрокаОРВДереве);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого КлючИЗначение из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл
		
		ОбъектРемонта = КлючИЗначение.Ключ;
		ВидыРемонта = КлючИЗначение.Значение;
		
		Корень = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы()[0];
		СтрокаОР = НайтиИлиДобавитьСтрокуОРВДереве(Корень, ОбъектРемонта, РодителиОР, СтрокиОРВДереве);
		
		Для Каждого ВидРемонта Из ВидыРемонта Цикл
			ДобавитьСтрокуВидаРемонтаВДерево(СтрокаОР, ВидРемонта);
		КонецЦикла;
		
		Если УдалятьОтсутствующиеВидыРемонта Тогда
			
			СтрокиКУдалению = Новый Массив;
			
			СтрокиВидовРабот = СтрокаОР.ПолучитьЭлементы();
			Для Каждого СтрокаВидРаботы Из СтрокиВидовРабот Цикл
				Если ВидыРемонта.Найти(СтрокаВидРаботы.Ремонты) = Неопределено Тогда
					СтрокиКУдалению.Добавить(СтрокаВидРаботы);	
				КонецЕсли;	
			КонецЦикла; 
			
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ОбъектРемонта, СтрокаКУдалению.Ремонты, СтрокаКУдалению);
				СтрокиВидовРабот.Удалить(СтрокаКУдалению);
			КонецЦикла;	
		КонецЕсли;
		
		Если СтрокиОРВДереве.Получить(СтрокаОР.ОбъектРемонта) = Неопределено Тогда
			// Для оптимизации производительности не разворачиваем строки ОР которые уже существуют.
			// Альтернативный вариант - разворачивать все дерево.
			Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.Развернуть(СтрокаОР.ПолучитьИдентификатор(), Ложь);
		КонецЕсли; 
		
		Модифицированность = Истина;
	КонецЦикла;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		
		СоответствиеОбъектовРемонта = Новый Соответствие;
		Для Каждого ТекСтрока Из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл
			Если СтрокиОРВДереве.Получить(ТекСтрока.Ключ) = Неопределено Тогда
				СоответствиеОбъектовРемонта.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если СоответствиеОбъектовРемонта.Количество() > 0 Тогда
			ЗагрузитьРемонтыИзДокументаОснованияДляОР(СоответствиеОбъектовРемонта);
			ОбновитьДоступностьДляРедактирования();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере 
Процедура ЗагрузитьРемонтыИзДокументаОснованияДляОР(СоответствиеОбъектовРемонта)
	
	Тз = Новый ТаблицаЗначений;
	Тз.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	
	МасТипов = Новый Массив(2);
	МасТипов.Добавить(Тип("СправочникСсылка.торо_ЦепочкиРемонта"));
	МасТипов.Добавить(Тип("СправочникСсылка.торо_ВидыРемонтов"));
	Тз.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов(МасТипов));
	
	Для Каждого ТекОР Из СоответствиеОбъектовРемонта Цикл
		ОбъектРемонта = ТекОР.Ключ;
		Ремонты = ТекОР.Значение;
		Для Каждого ТекСтрока Из Ремонты Цикл
			НовСтрока = Тз.Добавить();
			НовСтрока.ОбъектРемонтныхРабот = ОбъектРемонта;
			НовСтрока.ВидРемонтныхРабот = ТекСтрока;
		КонецЦикла;
	КонецЦикла;
	
	ТЗ_ПланРемонтов = Документы.торо_ПланГрафикРемонта.ПодобратьРемонтыДляКорректировки(мДатаОкончанияПланирования, Объект.ДокументОснование, Объект.ДатаПланирования, Объект.Ссылка, Истина, Тз);
	
	Для Каждого ТекСтрока Из ТЗ_ПланРемонтов Цикл
		НовСтрока = Объект.ПланРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Функция НайтиИлиДобавитьСтрокуОРВДереве(Родитель, ОбъектРемонта, РодителиОР, СтрокиОРВДереве)
	
	СтрокаОР = СтрокиОРВДереве.Получить(ОбъектРемонта);
	
	Если СтрокаОР = Неопределено Тогда
		Если мОтображатьПоложение Тогда
			ПоложениеОР = РодителиОР.Получить(ОбъектРемонта);
			Если ПоложениеОР = Неопределено ИЛИ ПоложениеОР = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка") Тогда
				ПоложениеОР = ПредставлениеПустогоРодителя();
			КонецЕсли;
			
			СтрокиРодителя = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
				Родитель,
				Новый Структура("Положение", ПоложениеОР),
				УровеньПоложенияВДереве,УровеньПоложенияВДереве,1
			);
			
			Если СтрокиРодителя.Количество() = 0 И ПоложениеОР = ПредставлениеПустогоРодителя() Тогда
				СтрокаРодителя = Родитель;
			ИначеЕсли СтрокиРодителя.Количество() = 0 И Не ПоложениеОР = ПредставлениеПустогоРодителя() Тогда
				СтрокаРодителя = ДобавитьСтрокуПоложенияВДерево(Родитель.ПолучитьЭлементы(), ПоложениеОР);
			Иначе
				СтрокаРодителя = СтрокиРодителя[0];
			КонецЕсли;
			
			СтрокаОР = ДобавитьСтрокуОРВДерево(СтрокаРодителя, ОбъектРемонта);
		Иначе
			СтрокаОР = ДобавитьСтрокуОРВДерево(Родитель, ОбъектРемонта);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаОР;
	
КонецФункции

#КонецОбласти

#Область РасчетППР

///////////////////////////////////////////////
// Расчет сразу

&НаКлиенте
Процедура РассчитатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьВыполнена = Ложь;
	Попытка
		ЗаписьВыполнена = Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Запись документа невозможна!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Если Объект.ДатаПланирования > Дата (3999,12,31,23,59,59) Тогда
			ТекстСообщения = НСтр("ru = 'Дата планирования не может быть больше 31.12.3999 !'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	Если Не ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагмент()
	
	Если ПараметрыРасчета_РасчетВыборочный Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РассчитатьВФоне", ПараметрыРасчета_РасчетВФоне);
		ПараметрыФормы.Вставить("мОтображатьПоложение", мОтображатьПоложение);
		ПараметрыФормы.Вставить("СтруктураИерархии", СтруктураИерархии);
		ПараметрыФормы.Вставить("ОбъектыРемонта", Объект.ОбъектыРемонта);
		ПараметрыФормы.Вставить("ДокументППР", Объект.Ссылка);
		
		Оповещение = Новый ОписаниеОповещения("РассчитатьВыборочноПослеВыбораРемонтов", ЭтотОбъект);
		ОткрытьФорму("Документ.торо_ПланГрафикРемонта.Форма.ФормаВыбораРемонтов", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		МассивОР = Новый Массив;
		
		Для каждого Стр Из Объект.ОбъектыРемонта Цикл
			СтрТЧ = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ЭтоЦепочка");
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
			МассивОР.Добавить(СтрТЧ);
		КонецЦикла;
		
		РассчитатьПоМассивуОР(МассивОР);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВыборочноПослеВыбораРемонтов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОР = Новый Массив;
	
	Для каждого Стр Из Результат.ОбъектыРемонта Цикл
		СтрТЧ = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ЭтоЦепочка");
		ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
		МассивОР.Добавить(СтрТЧ);
	КонецЦикла;
	
	РассчитатьПоМассивуОР(МассивОР);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоМассивуОР(МассивОР)
	
	ПараметрыРасчета_МассивВыбранныхОР.Очистить();
	Для каждого СтруктураОР из МассивОР Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета_МассивВыбранныхОР.Добавить(), СтруктураОР);
	КонецЦикла;
	
	Если СписокВРБезНормативов(Истина) Тогда
		ТекстСообщения = НСтр("ru = 'Ни для одного вида ремонта не указаны нормативы, график не будет расчитан!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	    Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета_РасчетВФоне Тогда
		
		Если ФОИспользоватьВозможностьОтменыРемонтов Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеРассчетаППР", ЭтаФорма);
			
			ПлановыеРемонтыНеНачатыРаботы = ПроверкаНеНачатыРемонтныеРаботы(МассивОР, Объект.ДатаПланирования);
			ОтменятьЗакрытиеЗаявок = НужноЛиОтменятьЗакрытиеЗаявок();
			
			Если ПлановыеРемонтыНеНачатыРаботы.Количество() > 0 Тогда
				
				Если ОтменятьЗакрытиеЗаявок Тогда
					ТекстВопроса = НСтр("ru = 'Не все запланированные работы закрыты актами (начаты работы). Они будут отменены. Хотите оставить какие-либо работы?'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Не все запланированные работы закрыты актами (начаты работы). Хотите внести корректировки (отменить, перенести) в эти работы?'");
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("ОписаниеОповещения, ПлановыеРемонтыНеНачатыРаботы, ОтменятьЗакрытиеЗаявок", ОписаниеОповещения, ПлановыеРемонтыНеНачатыРаботы, ОтменятьЗакрытиеЗаявок);
				ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьФрагментЗавершение", ЭтотОбъект, СтруктураПараметров), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОкончаниеРассчетаППР(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	ПлановыеРемонтыНеНачатыРаботы = ДополнительныеПараметры.ПлановыеРемонтыНеНачатыРаботы;
	ОтменятьЗакрытиеЗаявок = ДополнительныеПараметры.ОтменятьЗакрытиеЗаявок;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДатаПланирования = Объект.ДатаПланирования - 1;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДатаАктуальности", ДатаПланирования);
		ПараметрыФормы.Вставить("ЗакрываемыеРемонты", ПлановыеРемонтыНеНачатыРаботы);
		ПараметрыФормы.Вставить("ДоступностьКнопкиЗаполнить", Ложь);
		
		ОткрытьФорму("Обработка.торо_ЗакрытиеЗаявокИРемонтов.Форма", ПараметрыФормы, Объект.Ссылка, Объект.Ссылка,,,ОписаниеОповещения);
		
	Иначе
		
		Если ОтменятьЗакрытиеЗаявок Тогда
			СоздатьДокументЗакрытияЗаявокИРемонтов(Объект.Ссылка, Объект.Организация, ПлановыеРемонтыНеНачатыРаботы, Объект.ДатаПланирования);
		КонецЕсли;
		
		ОкончаниеРассчетаППР(Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППР(Результат, Параметры) Экспорт
	
	ПроверкаПередРассчетомПланГрафика(Новый ОписаниеОповещения("ОкончаниеРассчетаППРПослеПроверки",ЭтотОбъект,
																				Новый Структура("Результат, Параметры", Результат, Параметры)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРПослеПроверки(Результат, Параметры) Экспорт
	
	ВыполнятьРасчет = Результат;
	
	Если ВыполнятьРасчет = Истина Тогда	
		
		ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании = ПолучитьЗначениеОпции("торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании");
		
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		Параметры.Вставить("ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании", ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании);
		
		Если ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОкончаниеРассчетаППРЗавершение", ЭтотОбъект, Параметры), НСтр("ru = 'Рассчитать плановые стоимости ремонтов, после расчета план-графика ППР?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ОкончаниеРассчетаППРЗавершение(КодВозвратаДиалога.Нет, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании = ДополнительныеПараметры.ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании;
	
	Если ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании 
		И РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитыватьСтоимости = Истина;
	Иначе
		РассчитыватьСтоимости = Ложь;
	КонецЕсли;
	
	ПланРемонтовID = Новый Массив;
	Для каждого Стр Из Объект.ПланРемонтов Цикл
		ПланРемонтовID.Добавить(Стр.ID);
	КонецЦикла;
	
	ВопросОПерезаполнении = Ложь;
	
	Если НЕ ПараметрыРасчета_РасчетВФоне Тогда
		
		ВопросОПерезаполнении = (Объект.ПланРемонтов.Количество() > 0);
		
	Иначе
		
		СтруктураПоиска = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот");
		Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОР);
			СтрокиРемонта = Объект.ПланРемонтов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиРемонта.Количество() > 0 Тогда
				ВопросОПерезаполнении = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВопросОПерезаполнении Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОкончаниеРассчетаППРЗавершениеЗавершение", ЭтотОбъект, Новый Структура("РассчитыватьСтоимости", РассчитыватьСтоимости)), НСтр("ru = 'Данные запланированных ремонтов будут перезаполнены! Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, 60);
		Возврат;
		
	КонецЕсли; 
	
	ОкончаниеРассчетаППРЗавершениеФрагмент(РассчитыватьСтоимости);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    РассчитыватьСтоимости = ДополнительныеПараметры.РассчитыватьСтоимости;
    
    Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ОкончаниеРассчетаППРЗавершениеФрагмент(РассчитыватьСтоимости);

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершениеФрагмент(РассчитыватьСтоимости)    
	
	Если НЕ ПараметрыРасчета_РасчетВФоне Тогда
		
		ЗаписатьДеревоППРСУчетомПозиции();
		
		Если ПараметрыРасчета_МассивВыбранныхОР.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заданы объекты ремонтных работ для заполнения плана-графика ППР!'"));
			Возврат;
			
		КонецЕсли;
		
		РассчитатьППРНаСервере(РассчитыватьСтоимости);
		ОбновитьДоступностьДляРедактирования();
		ДеревоПланаГрафикаППРСУчетомПозицииПриАктивизацииСтроки(Элементы.ДеревоПланаГрафикаППРСУчетомПозиции);
		
		Если ПоказыватьСообщениеПриРасчетеППР Тогда
			ТекстСообщения = НСтр("ru = 'Внимание! 
			|График ППР рассчитан с учетом выполнения ожидаемых ремонтов в интервале между 
			|последним ремонтом/датой ввода в эксплуатацию/датой фактической наработки (в зависимости от настроек) 
			|и датой планирования графика ППР. Выполненные ремонты ОР за периоды позже периода расчета считаются приоритетными,
			|их наличие может привести к отсутствию плановых ремонтов в результате расчета.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыРасчета_МассивВыбранныхОР.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не заданы объекты ремонтных работ для заполнения плана-графика ППР!'"));
			Возврат;
			
		КонецЕсли;
		
		ЗаписатьДанныеВРегистр(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьППРНаСервере(РассчитыватьСтоимости)
	
	Если НЕ ПараметрыРасчета_РасчетВыборочный Тогда
		
		ПланРемонтов = торо_РасчетППР.РасчетППР(Объект.Ссылка, РассчитыватьСтоимости);
		Если ТипЗнч(ПланРемонтов) = Тип("ТаблицаЗначений") Тогда
			Объект.ПланРемонтов.Загрузить(ПланРемонтов);
			Объект.РассчитаноНаВерсииППР = торо_СЛКСервер.Версия_Session("торо_ЗащитаУправлениеРемонтами83");
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		
		ПланРемонтов = торо_РасчетППР.РасчетППР(Объект.Ссылка, РассчитыватьСтоимости,,,ПараметрыРасчета_МассивВыбранныхОР.Выгрузить());
				
		Если ТипЗнч(ПланРемонтов) = Тип("ТаблицаЗначений") Тогда
			СтруктураПоиска = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот");
			
			Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
				Если СтрокаОР.ЭтоЦепочка Тогда
					Для каждого ВидРемонтаИзЦепочки из СтрокаОР.ВидРемонтныхРабот.ПоследовательностьРемонтов Цикл
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОР);
						СтруктураПоиска.ВидРемонтныхРабот = ВидРемонтаИзЦепочки.ВидРемонта;
						ЗаменитьСтрокиПланаРемонтовПоСтруктуреПоиска(ПланРемонтов, СтруктураПоиска);
					КонецЦикла;
				Иначе
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОР);
					ЗаменитьСтрокиПланаРемонтовПоСтруктуреПоиска(ПланРемонтов, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
			
			Объект.РассчитаноНаВерсииППР = торо_СЛКСервер.Версия_Session("торо_ЗащитаУправлениеРемонтами83");
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСтрокиПланаРемонтовПоСтруктуреПоиска(ПланРемонтов, СтруктураПоиска)
	
	СтрокиРемонта = Объект.ПланРемонтов.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРемонта из СтрокиРемонта Цикл
		Объект.ПланРемонтов.Удалить(СтрокаРемонта);
	КонецЦикла;
	
	НовыеСтрокиРемонта = ПланРемонтов.НайтиСтроки(СтруктураПоиска);
	Для каждого НоваяСтрокаРемонта из НовыеСтрокиРемонта Цикл
		НовСтр = Объект.ПланРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НоваяСтрокаРемонта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр(Ссылка)
	
	НачатьТранзакцию();
		
	ПоследниеЗаписиПоППР = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СрезПоследних(ТекущаяДата(),Новый Структура("ДокументППР", Ссылка));
	ИзменениеВыборочностиРасчета = Ложь;
	
	Если (ПоследниеЗаписиПоППР <> Неопределено И ПоследниеЗаписиПоППР.Количество() > 0 И Не ПоследниеЗаписиПоППР[0].Рассчитан) Тогда
		
		СуществующаяЗапись = ПоследниеЗаписиПоППР[0];
		Если СуществующаяЗапись.ВыборочныйРасчет <> ПараметрыРасчета_РасчетВыборочный Тогда
			
			ИзменениеВыборочностиРасчета = Истина;
			
			ППРДляРасчетаМенеджер = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СоздатьМенеджерЗаписи();
			ППРДляРасчетаМенеджер.ДокументППР = СуществующаяЗапись.ДокументППР;
			ППРДляРасчетаМенеджер.Период = СуществующаяЗапись.Период;
			ППРДляРасчетаМенеджер.Прочитать();
			Если ППРДляРасчетаМенеджер.Выбран() Тогда
				ППРДляРасчетаМенеджер.ВыборочныйРасчет = ПараметрыРасчета_РасчетВыборочный;
				ППРДляРасчетаМенеджер.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ППРДляРасчетаМенеджер = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СоздатьМенеджерЗаписи();
		ППРДляРасчетаМенеджер.ДокументППР = Ссылка;
		ППРДляРасчетаМенеджер.Период = ТекущаяДата();
		ППРДляРасчетаМенеджер.ВыборочныйРасчет = ПараметрыРасчета_РасчетВыборочный;
		ППРДляРасчетаМенеджер.Записать();
		
	КонецЕсли;
		
	Если ПараметрыРасчета_РасчетВыборочный Тогда
		
		НаборЗаписейОбъектовРемонта = РегистрыСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.СоздатьНаборЗаписей();
		НаборЗаписейОбъектовРемонта.Отбор.ДокументППР.Установить(Ссылка);
		
		Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
			НовЗапись = НаборЗаписейОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаОР);
			НовЗапись.ДокументППР = Ссылка;
		КонецЦикла;
		
		НаборЗаписейОбъектовРемонта.Записать(Истина);
		
	Иначе
		
		Если ИзменениеВыборочностиРасчета Тогда
			НаборЗаписейОбъектовРемонта = РегистрыСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.СоздатьНаборЗаписей();
			НаборЗаписейОбъектовРемонта.Отбор.ДокументППР.Установить(Ссылка);
			НаборЗаписейОбъектовРемонта.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

///////////////////////////////////////////////
// Проверки

&НаКлиенте
Функция ОбязательныеПроверкиБезВопросовПередРасчетомППР()
	
	Отказ = Ложь;
	
	Если ИмеютсяДокументыНаОсновании(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Перерасчет графика ППР невозможен, т.к. имеются документы, введенные на его основании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения расчета необходимо отменить проведение документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПравоДоступа() Тогда 
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Нарушение прав доступа!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена начальная дата планирования!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для расчёта плана-графика ремонтов необходимо задать период планирования!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафика(Знач Оповещение)
	
	Если ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда		
		ДатаПланированияОкончание = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ДатаПланированияОкончание = Дата(4000,1,1) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаПередРассчетомПланГрафикаЗавершение1", ЭтотОбъект, Новый Структура("ДатаПланированияОкончание, Оповещение", ДатаПланированияОкончание, Оповещение)), НСтр("ru = 'Расчет план-графика ППР может быть выполнен только до 4000 года!'"));
		Возврат;
	КонецЕсли;
	
	ПроверкаПередРассчетомПланГрафикаФрагмент(ДатаПланированияОкончание, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаЗавершение1(ДополнительныеПараметры) Экспорт
	
	ДатаПланированияОкончание = ДополнительныеПараметры.ДатаПланированияОкончание;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ВыполнитьОбработкуОповещения(Оповещение,Ложь);
	
	ПроверкаПередРассчетомПланГрафикаФрагмент(ДатаПланированияОкончание, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаФрагмент(Знач ДатаПланированияОкончание, Знач Оповещение)
	
	Переменная = Объект.ДатаПланирования;
	НужныеГода = Новый СписокЗначений;
	Пока Переменная < ДатаПланированияОкончание Цикл
		НужныеГода.Добавить(ГОД(Переменная));
		Переменная = ДобавитьМесяц(Переменная,12);
	КонецЦикла;
	Если НужныеГода.НайтиПоЗначению(ГОД(ДатаПланированияОкончание)) = Неопределено Тогда 
		НужныеГода.Добавить(ГОД(ДатаПланированияОкончание));
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		МассивОР = Новый Массив;
		Для каждого Стр Из ПараметрыРасчета_МассивВыбранныхОР Цикл
			СтрТЧ = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ЭтоЦепочка");
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
			МассивОР.Добавить(СтрТЧ);
		КонецЦикла;
		
		Если ПроверкаНаПересеченияСДругимиППР(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.Ссылка, ДатаПланированияОкончание, МассивОР) Тогда
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполненностьГрафика(Объект.ДатаПланирования, ДатаПланированияОкончание, НужныеГода, Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаПередРассчетомПланГрафикаЗавершение", ЭтотОбъект,Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Не заполнен календарь в справочнике ""График работ"". Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(Оповещение,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Иначе 
		ВыполнитьОбработкуОповещения(Оповещение,Ложь);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////
// вспомогательное

&НаСервереБезКонтекста
Функция ПроверитьправоДоступа()
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.торо_ПланГрафикРемонта); 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеОпции(Опция)
	
	Возврат ПолучитьФункциональнуюОпцию(Опция);
	
КонецФункции

&НаСервереБезКонтекста
Функция НужноЛиОтменятьЗакрытиеЗаявок()
	
	Возврат Константы.торо_ОтменятьЗакрытиеЗаявок.Получить();

КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаНеНачатыРемонтныеРаботы(МассивОР, ДатаПланирования)
	
	МассивТиповВР = Новый Массив;
	МассивТиповВР.Добавить(Тип("СправочникСсылка.торо_ВидыРемонтов"));
	МассивТиповВР.Добавить(Тип("СправочникСсылка.торо_ЦепочкиРемонта"));
	
	ОбъектыРемонта = Новый ТаблицаЗначений;
	ОбъектыРемонта.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ОбъектыРемонта.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов(МассивТиповВР));
	
	ЕстьЦепочки = Ложь;
	
	Для каждого Стр Из МассивОР Цикл
		НС = ОбъектыРемонта.Добавить();
		НС.ОбъектРемонтныхРабот = Стр.ОбъектРемонтныхРабот;
		НС.ВидРемонтныхРабот = Стр.ВидРемонтныхРабот;
		Если Стр.ЭтоЦепочка Тогда
			ЕстьЦепочки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЦепочки Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОР
		|ИЗ
		|	&ТаблицаОР КАК ТаблицаОР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ИЗ
		|	ТаблицаОР КАК ТаблицаОР
		|ГДЕ
		|	ТаблицаОР.ВидРемонтныхРабот ССЫЛКА Справочник.торо_ВидыРемонтов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОР.ОбъектРемонтныхРабот,
		|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта
		|ИЗ
		|	ТаблицаОР КАК ТаблицаОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
		|		ПО ТаблицаОР.ВидРемонтныхРабот = торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка";
		
		Запрос.УстановитьПараметр("ТаблицаОР", ОбъектыРемонта);
		ОбъектыРемонта = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	РезультатЗапроса = торо_Ремонты.ПолучитьПлановыеРемонтыДляЗакрытияЗаявокИРемонтов(ДатаПланирования-1, Неопределено, ОбъектыРемонта);
	МассивВозврата = торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьДокументЗакрытияЗаявокИРемонтов(Ссылка, Организация, ПлановыеРемонтыНеНачатыРаботы, ДатаПланирования)
	
	ДокументЗакрытиеЗаявокИРемонтов = Документы.торо_ЗакрытиеЗаявокИРемонтов.СоздатьДокумент();
	ДокументЗакрытиеЗаявокИРемонтов.ППРИнициатор = Ссылка;
	ДокументЗакрытиеЗаявокИРемонтов.Организация = Организация;
	
	Для каждого Стр Из ПлановыеРемонтыНеНачатыРаботы Цикл
		НС = ДокументЗакрытиеЗаявокИРемонтов.ЗакрываемыеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		
		Если Стр.ЕстьЗаявка Тогда
			НСЗаявка = ДокументЗакрытиеЗаявокИРемонтов.ЗакрываемыеЗаявки.Добавить();
			ЗаполнитьЗначенияСвойств(НСЗаявка, Стр);
		КонецЕсли;
	КонецЦикла;
			
	ДокументЗакрытиеЗаявокИРемонтов.ДатаАктуальности = ДатаПланирования-1;
	ДокументЗакрытиеЗаявокИРемонтов.Дата = ТекущаяДата();
	
	Попытка
		ДокументЗакрытиеЗаявокИРемонтов.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать документ ""Закрытие заявок и ремонтов""! '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНаПересеченияСДругимиППР(ДатаПланирования, ПериодичностьДетализации, Ссылка, ДатаОкончанияПланирования, ОбъектыРемонта)
	
	ТаблицаПроверкиПериодовПланирования = Новый ТаблицаЗначений;
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ПериодичностьДетализации", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ДатаПланирования", Новый ОписаниеТипов("Дата"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ДатаОкончанияПланирования", Новый ОписаниеТипов("Дата"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.торо_ПланГрафикРемонта"));
	
	Для каждого Стр Из ОбъектыРемонта Цикл
	
		НС = ТаблицаПроверкиПериодовПланирования.Добавить();
		НС.ОбъектРемонтныхРабот = Стр.ОбъектРемонтныхРабот;
		НС.ВидРемонтныхРабот = Стр.ВидРемонтныхРабот;
		НС.ПериодичностьДетализации = ПериодичностьДетализации;
		НС.ДатаПланирования = ДатаПланирования;
		НС.ДатаОкончанияПланирования = ДатаОкончанияПланирования;
		НС.Регистратор = Ссылка;
	
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПроверкиПериодовПланирования.ОбъектРемонтныхРабот,
	               |	ТаблицаПроверкиПериодовПланирования.ПериодичностьДетализации,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаПланирования,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования,
	               |	ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот,
	               |	ТаблицаПроверкиПериодовПланирования.Регистратор
	               |ПОМЕСТИТЬ ТаблицаПроверкиПериодовПланирования1
	               |ИЗ
	               |	&ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ДатаПланирования),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ПериодичностьДетализации),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ОбъектРемонтныхРабот),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.Регистратор),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ВидРемонтныхРабот)
	               |ИЗ
	               |	РегистрСведений.торо_ПериодыПланированияППР КАК торо_ПериодыПланированияППР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиПериодовПланирования1 КАК ТаблицаПроверкиПериодовПланирования1
	               |		ПО торо_ПериодыПланированияППР.ОбъектРемонтныхРабот = ТаблицаПроверкиПериодовПланирования1.ОбъектРемонтныхРабот
	               |			И торо_ПериодыПланированияППР.ВидРемонтныхРабот = ТаблицаПроверкиПериодовПланирования1.ВидРемонтныхРабот
	               |			И торо_ПериодыПланированияППР.ДатаПланирования <= ТаблицаПроверкиПериодовПланирования1.ДатаОкончанияПланирования
	               |			И торо_ПериодыПланированияППР.ДатаОкончанияПланирования >= ТаблицаПроверкиПериодовПланирования1.ДатаПланирования
	               |			И торо_ПериодыПланированияППР.Регистратор <> ТаблицаПроверкиПериодовПланирования1.Регистратор";
	
	Запрос.УстановитьПараметр("ТаблицаПроверкиПериодовПланирования", ТаблицаПроверкиПериодовПланирования);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ШаблонСообщения = НСтр("ru = 'Для оборудования %1 и вида ремонта ""%2"" на данный период уже составлен документ планирования: %3!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонтныхРаботПредставление, Выборка.ВидРемонтныхРаботПредставление, Выборка.РегистраторПредставление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Согласование

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура УправлениеФормой(ЭтоВидРемонта=0)
	
	Элементы.ДокументОснование.ТолькоПросмотр = Объект.Проведен;	
	Элементы.ДатаПланирования.ТолькоПросмотр = Объект.Проведен;
	Элементы.КоличествоПериодов.ТолькоПросмотр = Объект.Проведен;
	Элементы.ПериодичностьДетализации.ТолькоПросмотр = Объект.Проведен;
	Элементы.РассчитатьПараметрыГрафика.Доступность = Не Объект.Проведен;
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРассчитать.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРассчитатьВыборочно.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРассчитатьВФоновомРежиме.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРассчитатьВФоновомРежимеВыборочно.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ПланРемонтовДобавить");
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(ЭтоВидРемонта,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.ПланРемонтов.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивID =Объект.ПланРемонтов.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.ПроверитьДокументНаСвязанныеДокументыПоID(Объект.Ссылка, МассивID);
	Если МассивIDДляБлокировки.Количество() > 0 И Объект.Проведен Тогда
		
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Дата.ТолькоПросмотр = Истина;
		Элементы.Номер.ТолькоПросмотр = Истина;
		Элементы.ДатаПланирования.ТолькоПросмотр = Истина;
		Элементы.КоличествоПериодов.ТолькоПросмотр = Истина;
		Элементы.ПериодичностьДетализации.ТолькоПросмотр = Истина;
		Элементы.РассчитатьПараметрыГрафика.Доступность = Ложь;
		Элементы.ДокументОснование.ТолькоПросмотр = Истина;
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	МассивДоступныхДляКорректировкиСтрок.Загрузить(Документы.торо_ПланГрафикРемонта.ОбновитьДоступностьДляРедактирования(Объект.Ссылка, Объект.ВидОперации, Объект.ПланРемонтов.Выгрузить(,"ID")));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции()
	
	ТаблицаОбъектовРемонта = Объект.ОбъектыРемонта.Выгрузить();
	ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы().Очистить();
	
	ТаблицаОбъектовРемонта.Колонки.Добавить("Положение", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	
	Если мОтображатьПоложение Тогда
		МассивОР = ТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонтныхРабот");
		СоответствиеПоложений = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, СтруктураИерархии,,Истина,Истина);
		
		Для каждого СтрокаТаблицы из ТаблицаОбъектовРемонта Цикл
			СтрокаТаблицы.Положение = СоответствиеПоложений[СтрокаТаблицы.ОбъектРемонтныхРабот];
		КонецЦикла;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Положение КАК Положение,
	|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	|	ТаблицаОбъектов.ВидРемонтныхРабот КАК ВидРемонта
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Положение КАК Положение,
	|	ТаблицаОбъектов.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаОбъектов.ВидРемонта КАК ВидРемонта
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|ИТОГИ ПО
	|	Положение,
	|	ОбъектРемонта";

	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектовРемонта);
	ВыборкаПоложение = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокиДерева = СоздатьКореньДерева();
	
	Пока ВыборкаПоложение.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоложение.Положение) Тогда
		    СтрокаПоложения = ДобавитьСтрокуПоложенияВДерево(СтрокиДерева.ПолучитьЭлементы(), ВыборкаПоложение.Положение);
		Иначе
			СтрокаПоложения = СтрокиДерева;
		КонецЕсли;
		
		ВыборкаОР = ВыборкаПоложение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОР.Следующий() Цикл
			СтрокаОР = ДобавитьСтрокуОРВДерево(СтрокаПоложения, ВыборкаОР.ОбъектРемонта);
			ВыборкаВидовРемонта = ВыборкаОР.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ВыборкаВидовРемонта.Следующий() Цикл
				
				ДобавитьСтрокуВидаРемонтаВДерево(СтрокаОР, ВыборкаВидовРемонта.ВидРемонта);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьКореньДерева()
	Корень = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы().Добавить();
	Корень.Ремонты = ПредставлениеПустогоРодителя();
	Корень.НомерКартинки = 4;
	
	Возврат Корень;
КонецФункции

&НаСервере
Процедура ЗаписатьДеревоППРСУчетомПозиции(ДокОбъект = Неопределено, ОбъектРемонтаДляОтбора = Неопределено)
	
	Если ДокОбъект = Неопределено Тогда
		ТЧДляЗаписи = Объект.ОбъектыРемонта;
	Иначе
		ТЧДляЗаписи = ДокОбъект.ОбъектыРемонта;
	КонецЕсли;
	ТЧДляЗаписи.Очистить();
	
	Если ОбъектРемонтаДляОтбора = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы() Цикл
			ЗаписатьСтрокуДереваВТЧ(СтрокаДерева, ТЧДляЗаписи);
		КонецЦикла;
	Иначе
		СтрокаОР = торо_ОбщегоНазначенияКлиентСервер.НайтиСтрокуВДеревеФормы(ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы(), "ОбъектРемонта", ОбъектРемонтаДляОтбора);
		Если СтрокаОР <> Неопределено Тогда
			ЗаписатьСтрокуДереваВТЧ(СтрокаОР, ТЧДляЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуДереваВТЧ(СтрокаДерева, ТЧДляЗаписи)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") 
		ИЛИ ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
		
		НоваяСтрокаТЗ = ТЧДляЗаписи.Добавить();
		НоваяСтрокаТЗ.ВидРемонтныхРабот = СтрокаДерева.Ремонты;
		НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.ПолучитьРодителя().Ремонты;
		Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
			НоваяСтрокаТЗ.ЭтоЦепочка = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		НоваяСтрокаТЗ = ТЧДляЗаписи.Добавить();
		НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.Ремонты;
 	КонецЕсли;
	
	Для Каждого СтрокаДЗ Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ЗаписатьСтрокуДереваВТЧ(СтрокаДЗ, ТЧДляЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеВетвиДеревьев()
	ЭлементыДерева = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() < 10 И ЭлементыДерева.Количество() > 0 и ЭлементыДерева[0].ПолучитьЭлементы().Количество() < 10 Тогда
		СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоПланаГрафикаППРСУчетомПозиции",,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
		
	Если Не ВыбранноеЗначение = Неопределено Тогда
		СтруктураИерархии = ВыбранноеЗначение;
		ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
		РазвернутьВсеВетвиДеревьев();
	КонецЕсли; 
		
КонецПроцедуры

// Если открываем документ их обработки и нужно активировать указанную строку.
&НаКлиенте
Процедура АктивироватьСтрокуИзВне(ТекСтрокаID)
	
	ПараметрПоиска = Новый Структура;
	ПараметрПоиска.Вставить("ID",ТекСтрокаID); 
	НужнаяСтрокаПланРемонтов = Объект.ПланРемонтов.НайтиСтроки(ПараметрПоиска); 
	
	Если НужнаяСтрокаПланРемонтов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
		ДеревоПланаГрафикаППРСУчетомПозиции,
		Новый Структура("ОбъектРемонта", НужнаяСтрокаПланРемонтов[0].ОбъектРемонтныхРабот),
		,,1// Ищем первое, оно же единственное совпадение, если есть
	);

	Для каждого СтрокаОбъект ИЗ  НайденныеСтроки Цикл
		Для Каждого СтрокаРемонт ИЗ СтрокаОбъект.ПолучитьЭлементы() Цикл
			Если СтрокаРемонт.Ремонты = НужнаяСтрокаПланРемонтов[0].ВидРемонтныхРабот Тогда
				Элементы.ПланРемонтов.ТекущаяСтрока = НужнаяСтрокаПланРемонтов[0].ПолучитьИдентификатор();
				Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущаяСтрока = СтрокаРемонт.ПолучитьИдентификатор();	
				Прервать;	
			КонецЕсли;
		КонецЦикла;			
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает внешний вид формы в зависимости от значения реквизита ВидОперации.
//
Процедура УстановитьВнешнийВидФормы()
	
	ЭтоКорректировкаППР = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка");
	
	Если ЭтоКорректировкаППР Тогда
		 
		Элементы.ПериодСт.Видимость			= Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Период.Заголовок 			= НСтр("ru = 'Новый период'");
		ОтображатьЗамещенные 				= Ложь;
		Элементы.ПланРемонтовОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
		
	Иначе
		
		Элементы.ПериодСт.Видимость 	= Ложь;
		
		Элементы.Период.Заголовок = НСтр("ru = 'Период'");
		
		ОтображатьЗамещенные = Истина;
		Элементы.ПланРемонтовОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
		
	КонецЕсли; 
	
	Элементы.ДокументОснование.Видимость	= ЭтоКорректировкаППР;
	Элементы.ПланРемонтовОтменен.Видимость	= ЭтоКорректировкаППР;
	
	Элементы.ПланРемонтовОтменен.Доступность = ФОИспользоватьВозможностьОтменыРемонтов;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиНастройкаИерархии()
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииНастройкаИерархии.Доступность = мОтображатьПоложение;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	Для каждого СтрокаРемонта из Объект.ПланРемонтов Цикл
		
		ЗначениеСоответствия = РезультатЗакрытия[СтрокаРемонта.ID];
		Если ЗначениеСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеСоответствия.Пометка Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаРемонта.СпособВыполнения = ЗначениеСоответствия.СпособВыполнения;
		СтрокаРемонта.Исполнитель = ЗначениеСоответствия.Исполнитель;
		Если ТипЗнч(СтрокаРемонта.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			торо_ЗаполнениеДокументовКлиент.ЗаполнитьСклад(СтрокаРемонта.Исполнитель, Склад);
			СтрокаРемонта.Склад = Склад;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока)
	
	ОРЭтоГруппа = Ложь;
	Если ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И ЗначениеЗаполнено(ТекущаяСтрока.Ремонты) Тогда
		ОРЭтоГруппа = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Ремонты, "ЭтоГруппа", Истина) = Истина;
	КонецЕсли;
	
	Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Не (ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов"));
	Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = Не (ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") 
		И Не ОРЭтоГруппа Или ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов"));
	
	Если ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		Если УОПоЦепочкамУстановлено Тогда
			УбратьУОПоЦепочкамРемонта();
		КонецЕсли;
		
		ОР = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
		
		Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", ОР, ТекущаяСтрока.Ремонты);
		Иначе
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, Замещен", ОР, ТекущаяСтрока.Ремонты, Ложь);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") 
		И ТекущаяСтрока.ПолучитьРодителя() <> Неопределено Тогда
		
		Если УОПоЦепочкамУстановлено Тогда
			УбратьУОПоЦепочкамРемонта();
		КонецЕсли;
		
		Подчиненные = ТекущаяСтрока.ПолучитьЭлементы();
		ОбъектыДляОтбора = Новый Массив;
		ОбъектыДляОтбора.Добавить(ТекущаяСтрока.Ремонты);
		
		Для каждого Подчиненный Из Подчиненные Цикл
			Если ТипЗнч(Подчиненный.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				ОбъектыДляОтбора.Добавить(Подчиненный.Ремонты);
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого Ремонт Из Объект.ПланРемонтов Цикл
			Ремонт.Видимость = Ложь;
		КонецЦикла; 
		
		Для каждого Ремонт Из Объект.ПланРемонтов Цикл
			Если Не ОбъектыДляОтбора.Найти(Ремонт.ОбъектРемонтныхРабот) = Неопределено Тогда
			    Ремонт.Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ОтображатьЗамещенные Тогда
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Видимость", Истина);
		Иначе
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Видимость, Замещен", Истина, Ложь);
		КонецЕсли;
		
		Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Видимость", Истина);
		Иначе
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Видимость, Замещен", Истина, Ложь);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта")
		И ТекущаяСтрока.ПолучитьРодителя() <> Неопределено	Тогда
		
		ОР = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
		
		Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот", ОР);
		Иначе
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот, Замещен", ОР, Ложь);
		КонецЕсли;
		
		Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = Ложь;
		Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
		
		УстановитьУОПоЦепочкамРемонта(ТекущаяСтрока.Ремонты);
		
	Иначе
		
		Если УОПоЦепочкамУстановлено Тогда
			УбратьУОПоЦепочкамРемонта();
		КонецЕсли;
		
		Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
			Если Элементы.ПланРемонтов.ОтборСтрок <> Неопределено Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Ложь);
		КонецЕсли;
		
		Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = Истина;
		Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ОбъектРемонта, ВидРемонта, СтрокаДерева = Неопределено)
	
	Если ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.торо_ВидыРемонтов") ИЛИ ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
		
		Если ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
			
			МассивВР = ПолучитьМассивВРЦепочкиНаСервере(ВидРемонта);
			Для каждого ВР Из МассивВР Цикл
				
				// Отбор строк в плане ремонтов по текущей строке
				СтруктураОтбора = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", ОбъектРемонта, ВР);
			
				МассивСтрок = Объект.ПланРемонтов.НайтиСтроки(СтруктураОтбора);
				Для Каждого Элемент Из МассивСтрок Цикл
					
					Объект.ПланРемонтов.Удалить(Элемент);
					
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			
			// Отбор строк в плане ремонтов по текущей строке
			СтруктураОтбора = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", ОбъектРемонта, ВидРемонта);
		
			МассивСтрок = Объект.ПланРемонтов.НайтиСтроки(СтруктураОтбора);
			Для Каждого Элемент Из МассивСтрок Цикл
				
				Объект.ПланРемонтов.Удалить(Элемент);
				
			КонецЦикла; 
		КонецЕсли;
	Иначе
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		Для каждого Стр Из ПодчиненныеСтроки Цикл
			
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(СтрокаДерева.Ремонты, Стр.Ремонты, Стр);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДиаграммуГантаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда		
		мДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоПланаГрафикаППРСУчетомПозиции");
	ОбновитьДоступностьДляРедактирования();
	
	СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
	Если НЕ СортироватьПоНаименованию Тогда
		ТаблицаОР = Новый ТаблицаЗначений;
		ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		ТаблицаОР.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		ЗаполнитьТаблицуОР(ТаблицаОР, ДеревоРемонтовОбъект.Строки);
		
	КонецЕсли;
	
	ОтображатьЗамещенные = Истина;
	ТаблицаПланРемонтовИсходная = ?(ОтображатьЗамещенные, Объект.ПланРемонтов.Выгрузить(), Объект.ПланРемонтов.Выгрузить(Новый Структура("Замещен",Ложь)));
	
	Если Не ОтображатьЗамещенные Тогда
		Для Каждого СтрокаПланаРемонтов Из ТаблицаПланРемонтовИсходная Цикл
			Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И СтрокаПланаРемонтов.ЗамещенСт Тогда
				СтрокаПланаРемонтов.ДатаНачСт = Дата(1,1,1);
				СтрокаПланаРемонтов.ДатаКонСт = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРемонтов = ДополнитьПланРемонтовДаннымиПоВЗ(ТаблицаПланРемонтовИсходная);
	
	ТаблицаРемонтов = ЗаполнитьДоступностьДляРедактирования(ТаблицаРемонтов);	
	
	ТаблицаРемонтов.Колонки.Добавить("ДокументППР", Новый ОписаниеТипов("ДокументСсылка.торо_ПланГрафикРемонта"));
	ТаблицаРемонтов.ЗаполнитьЗначения(Объект.Ссылка, "ДокументППР");
	
	Если НЕ СортироватьПоНаименованию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.ОбъектРемонтныхРабот,
		|	Таб.НомерСтроки
		|ПОМЕСТИТЬ ПорядокОР
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования
		|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
		|ИЗ
		|	&ТаблицаРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования,
		|	ПорядокОР.НомерСтроки КАК НомерОР
		|ИЗ
		|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОР КАК ПорядокОР
		|		ПО торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ПорядокОР.ОбъектРемонтныхРабот";
		
		Если НЕ ОтображатьЗамещенные Тогда
			Запрос.Текст = Запрос.Текст + " И торо_ПланГрафикРемонтаПланРемонтов.Замещен = ЛОЖЬ ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
		Запрос.УстановитьПараметр("Таб", ТаблицаОР);
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТабЦепочек = Объект.ОбъектыРемонта.Выгрузить(Новый Структура("ЭтоЦепочка",Истина));
	Если ТабЦепочек.Количество() > 0 и Не СортироватьПоНаименованию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.ОбъектРемонтныхРабот,
		               |	Таб.НомерСтроки
		               |ПОМЕСТИТЬ ПорядокОР
		               |ИЗ
		               |	&Таб КАК Таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования
		               |ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
		               |ИЗ
		               |	&ТаблицаРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЦепочек.ВидРемонтныхработ КАК Цепочка,
		               |	ТабЦепочек.ОбъектРемонтныхРабот КАК ОбъектРемонта
		               |ПОМЕСТИТЬ ТабЦепочек
		               |ИЗ
		               |	&ТабЦепочек КАК ТабЦепочек
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЦепочек.ОбъектРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НомерСтроки
		               |ПОМЕСТИТЬ ТабВРЦепочек
		               |ИЗ
		               |	ТабЦепочек КАК ТабЦепочек
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
		               |		ПО ТабЦепочек.Цепочка = торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования,
		               |	ЕСТЬNULL(ТабВРЦепочек.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_ЦепочкиРемонта.ПустаяСсылка)) КАК Цепочка,
		               |	ЕСТЬNULL(ТабВРЦепочек.НомерСтроки, -1) КАК НомерСтрокиВРЦепочки,
		               |	ПорядокОР.НомерСтроки КАК НомерОР
		               |ИЗ
		               |	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабВРЦепочек КАК ТабВРЦепочек
		               |		ПО торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот = ТабВРЦепочек.ВидРемонта
		               |			И торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ТабВРЦепочек.ОбъектРемонта
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОР КАК ПорядокОР
		               |		ПО торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ПорядокОР.ОбъектРемонтныхРабот
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиВРЦепочки";
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
		Запрос.УстановитьПараметр("Таб", ТаблицаОР);
		Запрос.УстановитьПараметр("ТабЦепочек", ТабЦепочек);			
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
	ИначеЕсли ТабЦепочек.Количество() > 0 и СортироватьПоНаименованию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования
		               |ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
		               |ИЗ
		               |	&ТаблицаРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЦепочек.ВидРемонтныхработ КАК Цепочка,
		               |	ТабЦепочек.ОбъектРемонтныхРабот КАК ОбъектРемонта
		               |ПОМЕСТИТЬ ТабЦепочек
		               |ИЗ
		               |	&ТабЦепочек КАК ТабЦепочек
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЦепочек.ОбъектРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НомерСтроки
		               |ПОМЕСТИТЬ ТабВРЦепочек
		               |ИЗ
		               |	ТабЦепочек КАК ТабЦепочек
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
		               |		ПО ТабЦепочек.Цепочка = торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования,
		               |	ЕСТЬNULL(ТабВРЦепочек.НомерСтроки, -1) КАК НомерСтрокиВРЦепочки
		               |ИЗ
		               |	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабВРЦепочек КАК ТабВРЦепочек
		               |		ПО торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот = ТабВРЦепочек.ВидРемонта
		               |			И торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ТабВРЦепочек.ОбъектРемонта
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиВРЦепочки";
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
		Запрос.УстановитьПараметр("ТабЦепочек", ТабЦепочек);			
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДиаграммаГантаППР.Обновление = Ложь;

	торо_Ремонты.ПостроитьДиаграммуГантаДляППР(ДиаграммаГантаППР, ТаблицаРемонтов, СтруктураИерархии, мОтображатьПоложение, Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка, , , СортироватьПоНаименованию);
	ДиаграммаГантаППР.УстановитьПолныйИнтервал(НачалоДня(Объект.ДатаПланирования), КонецДня(мДатаОкончанияПланирования));
	ДиаграммаГантаППР.ОтображатьЛегенду = Ложь;
	ДиаграммаГантаППР.Обновление = Истина;

	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТаблицуОР(ТаблицаОР, КоллекцияСтрок, Сч = 1)
	
	ТаблицаОР.Индексы.Добавить("ОбъектРемонтныхРабот");
	Если КоллекцияСтрок.Количество() Тогда
		
		Для каждого Элемент Из КоллекцияСтрок Цикл
			Если ТипЗнч(Элемент.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				НайдСтрока = ТаблицаОР.Найти(Элемент.Ремонты, "ОбъектРемонтныхРабот");
				Если НайдСтрока = Неопределено Тогда 
					НС = ТаблицаОР.Добавить();
					НС.ОбъектРемонтныхРабот = Элемент.Ремонты;
					НС.НомерСтроки = Сч;
					Сч = Сч + 1;
				КонецЕсли;
			КонецЕсли;	
			ЗаполнитьТаблицуОР(ТаблицаОР, Элемент.Строки, Сч);
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ЗаполнитьДоступностьДляРедактирования(парамПланРемонтов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ
	|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
	|ИЗ
	|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДоступенДляРедакторования.ID,
	|	ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТаблицаДоступенДляРедакторования
	|ИЗ
	|	&ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
	|	ЕстьNULL(ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования,Истина) КАК ДоступенДляРедактирования
	|ИЗ
	|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТаблицаДоступенДляРедакторования.ID";
	
	Запрос.УстановитьПараметр("ПланРемонтов",парамПланРемонтов);
	Запрос.УстановитьПараметр("ТаблицаДоступенДляРедакторования",МассивДоступныхДляКорректировкиСтрок.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Функция ДополнитьПланРемонтовДаннымиПоВЗ(ПланРемонтов)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт
	               |ПОМЕСТИТЬ ТабДокумента
	               |ИЗ
	               |	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДокумента.ID,
	               |	ТабДокумента.ВидРемонтныхРабот,
	               |	ТабДокумента.ДатаКон,
	               |	ТабДокумента.ДатаНач,
	               |	ТабДокумента.ДатаКонСт,
	               |	ТабДокумента.ДатаНачСт,
	               |	ТабДокумента.ОбъектРемонтныхРабот,
	               |	ТабДокумента.Отменен,
	               |	ТабДокумента.Замещен,
	               |	ТабДокумента.ЗамещенСт,
	               |	ЛОЖЬ КАК ЕстьВЗ,
	               |	ЛОЖЬ КАК ЕстьДвиженияПоВЗ
	               |ИЗ
	               |	ТабДокумента КАК ТабДокумента";
	
	Запрос.УстановитьПараметр("ПланРемонтов",ПланРемонтов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура УстановитьОценкуРМЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Записать();
    КонецЕсли;
    
    УстановитьОценкуРМФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОценкуРМФрагмент()
    
    Перем ФормаОбработка;
    
    ФормаОбработка = ПолучитьФорму("Обработка.торо_УстановкаОценкиРМПлановыхРемонтов.Форма", Новый Структура("ПланГрафикРемонта", Объект.Ссылка), Объект.Ссылка, Объект.Ссылка);
    
    ФормаОбработка.Открыть();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмеютсяДокументыНаОсновании(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПланГрафикРемонта.Ссылка
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	|ГДЕ
	|	торо_ПланГрафикРемонта.ДокументОснование = &ДокументОснование
	|	И торо_ПланГрафикРемонта.Проведен
	|	И НЕ торо_ПланГрафикРемонта.ПометкаУдаления
	|	И НЕ торо_ПланГрафикРемонта.ДокументОснование = ЗНАЧЕНИЕ(Документ.торо_ПланГрафикРемонта.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтДокументыОснования.Ссылка
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ДокументыОснования КАК торо_ЗаявкаНаРемонтДокументыОснования
	|ГДЕ
	|	торо_ЗаявкаНаРемонтДокументыОснования.ДокументОснование = &ДокументОснование
	|	И торо_ЗаявкаНаРемонтДокументыОснования.Ссылка.Проведен
	|	И НЕ торо_ЗаявкаНаРемонтДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.Ссылка
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ДокументыОснования КАК торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования
	|ГДЕ
	|	торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.ДокументОснование = &ДокументОснование
	|	И торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.Ссылка.Проведен
	|	И НЕ торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_АктОВыполненииЭтапаРаботДокументыОснования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование = &ДокументОснование
	|	И торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка.Проведен
	|	И НЕ торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполненностьГрафика(ДатаПланированияНачала, ДатаПланированияОкончание, НужныеГодаСписок, Ссылка)
	
	НужныеГода = Новый ТаблицаЗначений;
	ТипГодГрафика = Новый Массив;
	ТипГодГрафика.Добавить(Тип("Число"));
	НужныеГода.Колонки.Добавить("ГодГрафика",Новый ОписаниеТипов(ТипГодГрафика), "ГодГрафика");
	
	Для каждого Элем Из НужныеГодаСписок Цикл
	
		НужныеГода.Добавить().ГодГрафика = Элем.Значение;
	
	КонецЦикла; 
	
	ГрафикЗаполнен = Истина;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 

    "ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот
    |ПОМЕСТИТЬ ТабГрафиков
    |ИЗ
    |	Документ.торо_ПланГрафикРемонта.ОбъектыРемонта КАК торо_ПланГрафикРемонтаОбъектыРемонта
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
    |		ПО торо_ПланГрафикРемонтаОбъектыРемонта.ОбъектРемонтныхРабот = торо_НормативныеРемонтыОборудования.ОбъектРемонта
    |			И торо_ПланГрафикРемонтаОбъектыРемонта.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
    |ГДЕ
    |	торо_ПланГрафикРемонтаОбъектыРемонта.Ссылка = &Ссылка
    |	И торо_НормативныеРемонтыОборудования.Приоритет
    |
    |ОБЪЕДИНИТЬ 
    |
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	торо_ОбъектыРемонта.ПлановыйГрафикРаботы
    |ИЗ
    |	Документ.торо_ПланГрафикРемонта.ОбъектыРемонта КАК торо_ПланГрафикРемонтаОбъектыРемонта
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
    |		ПО торо_ПланГрафикРемонтаОбъектыРемонта.ОбъектРемонтныхРабот = торо_ОбъектыРемонта.Ссылка
    |ГДЕ
    |	торо_ПланГрафикРемонтаОбъектыРемонта.Ссылка = &Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТабГрафиков.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот
    |ИЗ
    |	ТабГрафиков КАК ТабГрафиков";
	
	Результат = Запрос.Выполнить();
	МассивГрафиков = Результат.Выгрузить().ВыгрузитьКолонку("ГрафикРемонтныхРабот");
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(ДатаПланированияНачала), КонецГода(ДатаПланированияОкончание));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	НужныеГода.ГодГрафика
	|ПОМЕСТИТЬ НужныеГода
	|ИЗ
	|  &НужныеГода КАК НужныеГода
	|;
	|ВЫБРАТЬ
	|	ТабГрафиков.ГрафикРемонтныхРабот,
	|	НужныеГода.ГодГрафика
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	ТабГрафиков КАК ТабГрафиков,
	|	НужныеГода КАК НужныеГода
	|;
	|ВЫБРАТЬ
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодГрафика,
	|	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение
	|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика)
	|;
	|ВЫБРАТЬ
	|	ВремТабл.ГрафикРемонтныхРабот КАК ГрафикРаботы,
	|	ВремТабл.ГодГрафика,
	|	ЕСТЬNULL(ВТРасписанияРаботыИзм.ОсновноеЗначение, 0) КАК ОсновноеЗначение
	|ИЗ
	|	ВремТабл КАК ВремТабл
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	|	ПО ВремТабл.ГодГрафика = ВТРасписанияРаботыИзм.ГодГрафика
	|		И ВремТабл.ГрафикРемонтныхРабот = ВТРасписанияРаботыИзм.ГрафикРаботы";
	
	Запрос.УстановитьПараметр("НужныеГода", НужныеГода);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОсновноеЗначение = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Не заполнен график %1 за %2 год.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ГрафикРаботы, Выборка.ГодГрафика);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ГрафикЗаполнен = Ложь;
     	КонецЕсли;
	КонецЦикла;
	
	Возврат ГрафикЗаполнен;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтоимостиРемонтовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да тогда
        РассчитатьСтоимостиРемонтовНаСервере();
		Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостиРемонтовНаСервере(ТекущиеДанные = Неопределено)
	
	ЗначениеВозврата = Документы.торо_ПланГрафикРемонта.РассчитатьСтоимостиРемонтов(Объект.ПланРемонтов.Выгрузить(), Объект.Ссылка, МассивДоступныхДляКорректировкиСтрок.Выгрузить(), ТекущиеДанные);
	
	Если ТипЗнч(ЗначениеВозврата) = Тип("Число") Тогда
		МассивСтрокТЧ = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			СтрокаТЧ = МассивСтрокТЧ[0];
			СтрокаТЧ.СуммаРемонта = ЗначениеВозврата;
		КонецЕсли;
	Иначе
		Объект.ПланРемонтов.Загрузить(ЗначениеВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ДокументОснованиеПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДокументОснованиеПриИзмененииНаСервере();
		РазвернутьВсеВетвиДеревьев();
	КонецЕсли; 	
КонецПроцедуры

&НаСервере 
Функция СоздатьДокумент_ЗаказНаВнутреннеПотребление(МассивРемонтов, СоздатьДокумент = ложь)
	СтруктураПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура("МассивID", Новый Массив);
	
	МассивДанных = Новый Массив;
	
	Для Каждого Ремонт Из МассивРемонтов Цикл
		Структура = Новый Структура;
		Структура.Вставить("ОбъектРемонтныхРабот", Ремонт.ОбъектРемонтныхРабот);
		Структура.Вставить("ВидРемонтныхРабот"   , Ремонт.ВидРемонтныхРабот);
		Структура.Вставить("ДатаНач"             , Ремонт.ДатаНач);
		Структура.Вставить("ID"                  , Ремонт.ID);
		
		МассивДанных.Добавить(Структура);
		
		СтруктураПередаваемыхВОбработчикПараметров.МассивID.Добавить(Ремонт.ID);
	КонецЦикла;
	
	стрВозврата = Новый Структура;
	стрВозврата.Вставить("СтруктураПараметров", СтруктураПараметров);
	стрВозврата.Вставить("СтруктураПередаваемыхВОбработчикПараметров", СтруктураПередаваемыхВОбработчикПараметров);
	
	МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(МассивДанных);	
	
	// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.
	Если МассивСтрокНоменклатуры = Неопределено и НЕ СоздатьДокумент Тогда
		МассивСтрокНоменклатуры = Новый Массив;
	ИначеЕсли МассивСтрокНоменклатуры = Неопределено и СоздатьДокумент Тогда
		Если МассивРемонтов.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'На все плановые материалы для выделенных объектов ремонта введены заказы на внутреннее потребление'");
		Иначе
			ТекущийРемонт = МассивРемонтов[0];
			
			ШаблонСообщения = НСтр("ru = 'На все плановые материалы для объекта ремонта %1 для вида ремонта %2 от %3 введены заказы на внутреннее потребление'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийРемонт.ОбъектРемонтныхРабот, ТекущийРемонт.ВидРемонтныхРабот, ТекущийРемонт.ДатаНач);
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат стрВозврата;
	КонецЕсли;		
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры",МассивСтрокНоменклатуры);
	
	ДатаНач = Неопределено;
	Для Каждого Ремонт Из МассивРемонтов Цикл
		Если ДатаНач = Неопределено Или Ремонт.ДатаНач < ДатаНач Тогда
			ДатаНач = Ремонт.ДатаНач;
		КонецЕсли;
	КонецЦикла;
	
	ТекДата = ТекущаяДата();
	Если СоздатьДокумент ИЛИ НЕ ТекДата > ДатаНач Тогда 
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", ДатаНач);
	КонецЕсли;
	
	ШаблонКомментария = НСтр("ru='План-график ППР %1 от %2 %3 %4 %5'");
	СтрокаКомментария = "";
	
	Для Каждого Ремонт Из МассивРемонтов Цикл
		СтрокаКомментария = СтрокаКомментария + СтрШаблон(ШаблонКомментария,
						Объект.Номер, Объект.Дата, Ремонт.ОбъектРемонтныхРабот, Ремонт.ВидРемонтныхРабот, Формат(Ремонт.ДатаНач, НСтр("ru = 'ДФ=dd.MM.yyyy'"))) + Символы.ПС;
	КонецЦикла;
	
	ЗначенияЗаполнения.Вставить("Комментарий", СтрокаКомментария);
	
	// Тут может быть несколько разных складов, а документ содержит поле для одного склада!
	ТекущийСклад = МассивРемонтов[0].Склад;
	ТекущийОбъектРемонта = МассивРемонтов[0].ОбъектРемонтныхРабот;
	
	ЗначенияЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	Если НЕ ЗначениеЗаполнено(ТекущийСклад) Тогда
		Склад = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийОбъектРемонта, "СкладОбеспеченияМТР");
	    ЗначенияЗаполнения.Вставить("Склад", Склад);
	Иначе
		ЗначенияЗаполнения.Вставить("Склад", ТекущийСклад);
	КонецЕсли; 
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
	Если СоздатьДокумент Тогда
		
		Если СтруктураПараметров.Количество() = 0 тогда
			Возврат стрВозврата;
		КонецЕсли;
		
		Попытка
			ДокОбъект = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
			ДокОбъект.Заполнить(СтруктураПараметров.ЗначенияЗаполнения);
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			СтруктураПередаваемыхВОбработчикПараметров.Вставить("Ссылка", ДокОбъект.Ссылка);
			ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Неопределено, СтруктураПередаваемыхВОбработчикПараметров);
		Исключение
			ШаблонСообщения = НСтр("ru = 'При создании документа ""Заказ на внутренне потребеление"" произошла ошибка: %1.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат стрВозврата;
КонецФункции

&НаСервере
Функция СформироватьМассивНоменклатурыКЗаказуСервере(МассивДанных)
	
	Если Не МассивДанных.Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураКЗаказу.Номенклатура КАК Номенклатура,
	               |	НоменклатураКЗаказу.Характеристика КАК Характеристика,
	               |	НоменклатураКЗаказу.Количество КАК Количество
	               |ПОМЕСТИТЬ НоменклатураКЗаказу
	               |ИЗ
	               |	&НоменклатураКЗаказу КАК НоменклатураКЗаказу
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
	               |ПОМЕСТИТЬ втДокументыНаОсновании
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&МассивID)
	               |	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументТОИР) = ТИП(Документ.торо_ПланГрафикРемонта)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыНаВнутреннееПотребление.Номенклатура КАК Номенклатура,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗаказыНаВнутреннееПотребление.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА 1
	               |			ИНАЧЕ -1
	               |		КОНЕЦ * ЗаказыНаВнутреннееПотребление.КОформлению) КАК Количество,
	               |	ЗаказыНаВнутреннееПотребление.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ УжеЗаказаннаяНоменклатура
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	               |ГДЕ
	               |	ЗаказыНаВнутреннееПотребление.Регистратор В
	               |			(ВЫБРАТЬ
	               |				втДокументыНаОсновании.ДокументЕРП КАК Регистратор
	               |			ИЗ
	               |				втДокументыНаОсновании КАК втДокументыНаОсновании)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыНаВнутреннееПотребление.Номенклатура,
	               |	ЗаказыНаВнутреннееПотребление.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураКЗаказу.Номенклатура КАК Номенклатура,
	               |	НоменклатураКЗаказу.Количество - ЕСТЬNULL(УжеЗаказаннаяНоменклатура.Количество, 0) КАК Количество,
	               |	НоменклатураКЗаказу.Характеристика КАК Характеристика
	               |ИЗ
	               |	НоменклатураКЗаказу КАК НоменклатураКЗаказу
	               |		ЛЕВОЕ СОЕДИНЕНИЕ УжеЗаказаннаяНоменклатура КАК УжеЗаказаннаяНоменклатура
	               |		ПО НоменклатураКЗаказу.Номенклатура = УжеЗаказаннаяНоменклатура.Номенклатура
	               |ГДЕ
	               |	НоменклатураКЗаказу.Количество - ЕСТЬNULL(УжеЗаказаннаяНоменклатура.Количество, 0) > 0";
	
	МассивID = Новый Массив;
	Для Каждого Ремонт Из МассивДанных Цикл
		МассивID.Добавить(Ремонт.ID);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	НоменклатураКЗаказу = ПолучитьТаблицуНоменклатурыКЗаказу(МассивДанных);
		
	НоменклатураКЗаказу.Свернуть("Номенклатура, Характеристика", "Количество");
	Запрос.УстановитьПараметр("НоменклатураКЗаказу", НоменклатураКЗаказу);
	
	Товары = торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Запрос.Выполнить());
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
		
КонецФункции

&НаСервере
Функция ПолучитьТаблицуНоменклатурыКЗаказу(Ремонты)
	
	ТаблицаОРВР = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТаблицаОРВР.Колонки.Добавить("ОбъектРемонтныхРабот",ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.торо_ВидыРемонтов"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТаблицаОРВР.Колонки.Добавить("ВидРемонтныхРабот",ОписаниеТипов);
		
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив,,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТаблицаОРВР.Колонки.Добавить("ДатаНач",ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив,,,,Новый КвалификаторыСтроки(36));
	ТаблицаОРВР.Колонки.Добавить("ID",ОписаниеТипов);
	
	Для каждого Строка Из Ремонты Цикл
		НС = ТаблицаОРВР.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Строка);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	ВЫРАЗИТЬ(ТаблицаОРВР.ОбъектРемонтныхРабот КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонтныхРабот,
	              	|	ТаблицаОРВР.ВидРемонтныхРабот КАК ВидРемонта,
	              	|	ТаблицаОРВР.ДатаНач КАК ДатаРемонта,
	              	|	ТаблицаОРВР.ID КАК ИД
	              	|ПОМЕСТИТЬ ТаблицаОРВР
	              	|ИЗ
	              	|	&ТаблицаОРВР КАК ТаблицаОРВР
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ТаблицаОРВР.ОбъектРемонтныхРабот.ТиповойОР КАК ТиповойОР
	              	|ПОМЕСТИТЬ ТаблицаТиповыхОР
	              	|ИЗ
	              	|	ТаблицаОРВР КАК ТаблицаОРВР
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	торо_РемонтныеЦиклыОборудования.ВидЦепочки КАК ВидЦепочки,
	              	|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов
	              	|ПОМЕСТИТЬ ТаблицаЦепочек
	              	|ИЗ
	              	|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	              	|ГДЕ
	              	|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов В
	              	|			(ВЫБРАТЬ
	              	|				ТаблицаОРВР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	              	|			ИЗ
	              	|				ТаблицаОРВР КАК ТаблицаОРВР
	              	|		
	              	|			ОБЪЕДИНИТЬ
	              	|		
	              	|			ВЫБРАТЬ
	              	|				ТаблицаТиповыхОР.ТиповойОР
	              	|			ИЗ
	              	|				ТаблицаТиповыхОР КАК ТаблицаТиповыхОР)
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ТаблицаЦепочек.ВидЦепочки КАК ВидЦепочки,
	              	|	ТаблицаЦепочек.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
	              	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НормативныйРемонт КАК НормативныйРемонт,
	              	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта
	              	|ПОМЕСТИТЬ ТабПоследовательностьРемонтов
	              	|ИЗ
	              	|	ТаблицаЦепочек КАК ТаблицаЦепочек
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	              	|		ПО ТаблицаЦепочек.ВидЦепочки = торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ТаблицаОРВР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	              	|	ТаблицаОРВР.ВидРемонта КАК ВидРемонта,
	              	|	ВЫБОР
	              	|		КОГДА торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	              	|			ТОГДА 1
	              	|		ИНАЧЕ 0
	              	|	КОНЕЦ КАК Приоритет,
	              	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт,
	              	|	ТаблицаОРВР.ДатаРемонта КАК ДатаРемонта,
	              	|	ТаблицаОРВР.ИД КАК ИД
	              	|ПОМЕСТИТЬ ТаблицаНормативов
	              	|ИЗ
	              	|	ТаблицаОРВР КАК ТаблицаОРВР
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	              	|		ПО (ВЫБОР
	              	|				КОГДА торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	              	|					ТОГДА ТаблицаОРВР.ОбъектРемонтныхРабот = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	              	|				ИНАЧЕ ТаблицаОРВР.ОбъектРемонтныхРабот.ТиповойОР = торо_НормативныеРемонтыОборудования.ТиповойОР
	              	|						И ТаблицаОРВР.ОбъектРемонтныхРабот = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	              	|			КОНЕЦ)
	              	|			И ТаблицаОРВР.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ТаблицаНормативов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	              	|	ТаблицаНормативов.ВидРемонта КАК ВидРемонта,
	              	|	МАКСИМУМ(ТаблицаНормативов.Приоритет) КАК Приоритет,
	              	|	ТаблицаНормативов.ДатаРемонта КАК ДатаРемонта,
	              	|	ТаблицаНормативов.ИД КАК ИД
	              	|ПОМЕСТИТЬ втТабМаксимальныхПриоритетов
	              	|ИЗ
	              	|	ТаблицаНормативов КАК ТаблицаНормативов
	              	|
	              	|СГРУППИРОВАТЬ ПО
	              	|	ТаблицаНормативов.ВидРемонта,
	              	|	ТаблицаНормативов.ОбъектРемонтныхРабот,
	              	|	ТаблицаНормативов.ДатаРемонта,
	              	|	ТаблицаНормативов.ИД
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ТаблицаНормативов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	              	|	ТаблицаНормативов.ВидРемонта КАК ВидРемонта,
	              	|	ТаблицаНормативов.НормативныйРемонт КАК ТехКарта,
	              	|	ТаблицаНормативов.ДатаРемонта КАК ДатаРемонта,
	              	|	ТаблицаНормативов.ИД КАК ИД
	              	|ИЗ
	              	|	ТаблицаНормативов КАК ТаблицаНормативов
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТабМаксимальныхПриоритетов КАК втТабМаксимальныхПриоритетов
	              	|		ПО ТаблицаНормативов.ОбъектРемонтныхРабот = втТабМаксимальныхПриоритетов.ОбъектРемонтныхРабот
	              	|			И ТаблицаНормативов.ВидРемонта = втТабМаксимальныхПриоритетов.ВидРемонта
	              	|			И ТаблицаНормативов.Приоритет = втТабМаксимальныхПриоритетов.Приоритет
	              	|
	              	|ОБЪЕДИНИТЬ
	              	|
	              	|ВЫБРАТЬ
	              	|	ТаблицаОРВР.ОбъектРемонтныхРабот,
	              	|	ТаблицаОРВР.ВидРемонта,
	              	|	ТабПоследовательностьРемонтов.НормативныйРемонт,
	              	|	ТаблицаОРВР.ДатаРемонта,
	              	|	ТаблицаОРВР.ИД
	              	|ИЗ
	              	|	ТаблицаОРВР КАК ТаблицаОРВР
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоследовательностьРемонтов КАК ТабПоследовательностьРемонтов
	              	|		ПО ТаблицаОРВР.ВидРемонта = ТабПоследовательностьРемонтов.ВидРемонта";
				   
	Запрос.УстановитьПараметр("ТаблицаОРВР",ТаблицаОРВР);
	
	ТЗНоменклатура = Новый ТаблицаЗначений;
	
	ТЗНоменклатура.Колонки.Добавить("ОбъектРемонтныхРабот");
	ТЗНоменклатура.Колонки.Добавить("ВидРемонта");
	ТЗНоменклатура.Колонки.Добавить("ДатаРемонта");
	ТЗНоменклатура.Колонки.Добавить("ИД");
	ТЗНоменклатура.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТЗНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗНоменклатура.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьТЗНоменклатурой(ТЗНоменклатура, Выборка, Выборка.ТехКарта);	
	КонецЦикла; 
	
	Возврат ТЗНоменклатура;

КонецФункции

&НаСервере
Процедура ЗаполнитьТЗНоменклатурой(ТЗ, Выборка, ТехКарта, УчитыватьЗапчастиОР = Истина)
	
	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТехКарты_СписокОпераций.Операция КАК Операция,
	               |	торо_ТехКарты_СписокОпераций.ID КАК ID,
	               |	торо_ТехКарты_СписокОпераций.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ СписокОпераций
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаРемонта, ИдентификаторТехКарты = &ТехКарта) КАК торо_ВерсииТехКартСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты_СписокОпераций
	               |		ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты_СписокОпераций.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	               |	торо_ТехКартыМатериальныеЗатраты.Упаковка КАК Упаковка,
	               |	торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	торо_ТехКартыМатериальныеЗатраты.ID КАК ID,
	               |	торо_ТехКартыМатериальныеЗатраты.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ СписокМатериалов
	               |ИЗ
	               |	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_ТехКартыМатериальныеЗатраты.Ссылка = СписокОпераций.Ссылка
	               |			И торо_ТехКартыМатериальныеЗатраты.ID = СписокОпераций.ID
	               |ГДЕ
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |	И торо_ТехКартыМатериальныеЗатраты.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокМатериалов.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА СписокМатериалов.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ СписокМатериалов.Упаковка.Коэффициент
	               |	КОНЕЦ * СписокМатериалов.КоличествоУпаковок КАК Количество,
	               |	СписокМатериалов.Характеристика КАК Характеристика
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокМатериалов КАК СписокМатериалов
	               |		ПО (СписокМатериалов.ID = СписокОпераций.ID)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика
	               |ИЗ
	               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	               |ГДЕ
	               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта = &ВидРемонта
	               |	И торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
	               |	И торо_НормыЗапчастейНаОбъектыРемонта.Приоритет = ИСТИНА
	               |	И &УчитыватьЗапчастиОР
	               |	И торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |	И торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	               |	И торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта.ВестиУчетСерийныхЗапчастей = ИСТИНА";

	Запрос.УстановитьПараметр("ДатаРемонта", Выборка.ДатаРемонта);
	Запрос.УстановитьПараметр("ОбъектРемонта", Выборка.ОбъектРемонтныхРабот);
	Запрос.УстановитьПараметр("ВидРемонта", Выборка.ВидРемонта);
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	Запрос.УстановитьПараметр("УчитыватьЗапчастиОР", УчитыватьЗапчастиОР);

	Результат = Запрос.Выполнить();
	Таблица = Запрос.Выполнить().Выгрузить();

	Для каждого Строка Из Таблица Цикл
		
		Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда

			ЗаполнитьТЗНоменклатурой(ТЗ,Выборка,Строка.Операция, Ложь);
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура) И ЗначениеЗаполнено(Строка.Количество) Тогда	
			
			НС = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			ЗаполнитьЗначенияСвойств(НС, Строка);
			
		КонецЕсли;
	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры) 
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
		               |ИЗ
		               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		               |ГДЕ
		               |	торо_ИнтеграцияДокументов.ID В(&МассивID)
		               |	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		               |	И торо_ИнтеграцияДокументов.ДокументЕРП = &СсылкаНаДокЕРП";
					   
		Запрос.УстановитьПараметр("МассивID",ДополнительныеПараметры.МассивID);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП", ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.МассивID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(IDРемонтов, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		
		Для Каждого ID Из IDРемонтов Цикл
			Запись.ID           = ID;
			Запись.ДокументТОИР = ДокументТОИР;
			Запись.ДокументЕРП  = ДокументЕРП;
		КонецЦикла;
		
		Запись.Записать();
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЗаказНаВнПотребление(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	 ОбновитьДокументыЗаказНаВнПотреблениеСервер(Результат, ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыЗаказНаВнПотреблениеСервер(Результат = Неопределено, ДополнительныеПараметры = Неопределено) 
	
	Если Не ДоступныЗаказыНаВнутреннееПотребление Тогда
		Элементы.ДокументыЗаказНаВнПотребление.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДокументыЗаказНаВнПотребление.Очистить();
	
	СписокID = Объект.ПланРемонтов.Выгрузить(,"ID");
	Запрос  = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ЗаказНаВнутреннееПотребление,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументТОИР = &ЭтотДокумент
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЗаказИзЭтогоДокумента,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	торо_ИнтеграцияДокументов.ID
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&СписокID)
	               |	И НЕ торо_ИнтеграцияДокументов.ДокументЕРП.ПометкаУдаления
	               |	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ЗаказНаВнутреннееПотребление)";

	Запрос.УстановитьПараметр("СписокID",СписокID);
	Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
				   
	ДокументыЗаказНаВнПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Восстановление курсора
	Индентификатор = Неопределено;
	Сч = 0;
	Для Каждого Строка Из ДокументыЗаказНаВнПотребление Цикл
		Если Строка.ЗаказНаВнутреннееПотребление = ПоследнийВыбранныйЗаказ Тогда
			Индентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Если Не Индентификатор = Неопределено Тогда
		Элементы.ДокументыЗаказНаВнПотребление.ТекущаяСтрока = Индентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаказПомечен = ПометитьЗаказНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(ЗаказПомечен) <> Тип("Булево") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ЗаказПомечен);
		КонецЕсли; 
	КонецЕсли; 	
КонецПроцедуры
 
&НаСервере
Функция ПометитьЗаказНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектЗаказ = СтруктураПараметров.ЗаказСсылка.ПолучитьОбъект();
		
		Если ОбъектЗаказ.Проведен Тогда
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектЗаказ.ПометкаУдаления = Истина;
		ОбъектЗаказ.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ЗаказСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
		
	Исключение
	    
		СообщенияКВыводу = ПолучитьСообщенияПользователю();
		Если СообщенияКВыводу.Количество() > 0 Тогда
			Возврат Ложь;
		Иначе	
			Возврат ОписаниеОшибки();
		КонецЕсли;		
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбновитьДоступностьДляРедактирования();
	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();	
	
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	
	ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	
КонецПроцедуры	

&НаКлиенте
Функция НайтиТочку(Искомое, Точки, МассивТочек)
	
	Для каждого текТочка из Точки Цикл
		Если текТочка.Расшифровка = Искомое Тогда
			МассивТочек.Добавить(текТочка);
			Возврат ТекТочка;
		Иначе
			Результат = НайтиТочку(Искомое, ТекТочка.Точки, МассивТочек);
			Если Результат <> Неопределено Тогда
				МассивТочек.Добавить(текТочка);
				возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция НайтиНужнуюТочкуДиаграммыГанта(ОР, ВР)
	
	ТочкаОР = Неопределено;
	ТочкаВР = Неопределено;
	МассивТочек = Новый Массив;
	
	ТочкаОР = НайтиТочку(ОР, ДиаграммаГантаППР.Точки, массивТочек);
	
	Если ТочкаОР = Неопределено тогда
		Возврат Новый Массив;
	Иначе 
		ТочкаВР = НайтиТочку(ВР, ТочкаОР.Точки, массивТочек);
	КонецЕсли;
	
	Если ТочкаВР = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат массивТочек;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьСортировкуТЧПланРемонтов(параметрОбъект)
	
	ДокОбъект = ДанныеФормыВЗначение(параметрОбъект, Тип("ДокументОбъект.торо_ПланГрафикРемонта"));
	
	ДокОбъект.ПланРемонтов.Сортировать("ДатаНач возр");
	
	ЗначениеВДанныеФормы(ДокОбъект, параметрОбъект);
	
	Возврат параметрОбъект;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивВРЦепочкиНаСервере(Цепочка)
	
	МассивВР = Новый Массив;
	
	Для каждого Элем Из Цепочка.ПоследовательностьРемонтов Цикл
		
		МассивВР.Добавить(Элем.ВидРемонта);
		
	КонецЦикла;
	
	Возврат МассивВР;
	
КонецФункции

&НаСервере 
Процедура УбратьУОПоЦепочкамРемонта()
	
	масУдаления = Новый Массив;
	Для каждого текЭлем из УсловноеОформление.Элементы цикл
		Если текЭлем.ИдентификаторПользовательскойНастройки = "ВидимостьДляТЧПланРемонтов" Тогда
			масУдаления.Добавить(текЭлем);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого текЭлем из масУдаления Цикл
		УсловноеОформление.Элементы.Удалить(текЭлем);
	КонецЦикла;
	
	УОПоЦепочкамУстановлено = Ложь;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьУОПоЦепочкамРемонта(Цепочка)
	
	Если УОПоЦепочкамУстановлено Тогда
		УбратьУОПоЦепочкамРемонта();
	КонецЕсли;
	
	СписокВидовРемонтов = ПолучитьСписокВидовРемонтаЦепочки(Цепочка);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.ИдентификаторПользовательскойНастройки = "ВидимостьДляТЧПланРемонтов";
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланРемонтов.ВидРемонтныхРабот"); 
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементУсловия.ПравоеЗначение = СписокВидовРемонтов;

	Для Каждого Колонка Из Элементы.ПланРемонтов.ПодчиненныеЭлементы Цикл
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);
	КонецЦикла;

	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовДатаКон");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовДатаНач");	
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовДатаКонСт");	
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовДатаНачСт");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовСклад");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовСкладОбеспеченияМТР");
	
	УОПоЦепочкамУстановлено = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВидовРемонтаЦепочки(Цепочка)
	
	СписокВидовРемонтов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Цепочка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокВидовРемонтов.Добавить(Выборка.ВидРемонта);
		КонецЦикла;
	КонецЕсли;

	Возврат СписокВидовРемонтов;
	
КонецФункции

&НаСервере
Функция ПолучитьВыделенныеПланыРемонтов()
	
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого СтрокаТЧ Из Элементы.ПланРемонтов.ВыделенныеСтроки Цикл
		
		ТекущиеДанныеСтроки = Объект.ПланРемонтов.НайтиПоИдентификатору(СтрокаТЧ);
		
		Если ТекущиеДанныеСтроки.Отменен Или ТекущиеДанныеСтроки.Замещен Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРемонтовОборудования = Новый Структура("ID, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ОбъектРемонта",
			ТекущиеДанныеСтроки.ID, ТекущиеДанныеСтроки.ВидРемонтныхРабот, ТекущиеДанныеСтроки.ДатаНач, ТекущиеДанныеСтроки.ДатаКон, ТекущиеДанныеСтроки.ОбъектРемонтныхРабот);
		
		ДанныеСтроки = Новый Структура("СтрокаРемонтовОборудования, МассивСтрокРемонтныхРабот",
			СтрокаРемонтовОборудования, ПолучитьМассивСтрокРемонтныхРабот(ТекущиеДанныеСтроки));
		
		ВыделенныеСтроки.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	Возврат ВыделенныеСтроки;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивСтрокРемонтныхРабот(ТекущиеДанныеСтроки)
	
	МассивСтрокРемонтныхРабот = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаРемонтовОборудования.ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот
	|ПОМЕСТИТЬ ТаблицаРемонтовОборудования
	|ИЗ
	|	&ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НормативныйРемонт КАК НормативныйРемонт,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособПланирования КАК СпособПланирования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособВыполнения КАК СпособВыполнения,
	|	NULL КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	NULL КАК СпособУчетаДатыОтсчета,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
	|	NULL КАК ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ОбъектРемонта КАК ОбъектРемонта1,
	|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	|ИЗ
	|	ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	|		ПО ТаблицаРемонтовОборудования.ОбъектРемонта = торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов		
	|	   ИЛИ ТаблицаРемонтовОборудования.ОбъектРемонта В (ВЫБРАТЬ торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта
	|	                                                    ИЗ
	|	                                                    	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|	                                                    ГДЕ
	|	                                                    	торо_ОбъектыРемонта.ТиповойОР = торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов)				
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|		ПО торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = торо_РемонтныеЦиклыОборудования.ВидЦепочки
	|ГДЕ 
	|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот = торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта	
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ 
	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	|	торо_НормативныеРемонтыОборудования.СпособПланирования,
	|	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	|	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	|	торо_НормативныеРемонтыОборудования.ВидРемонта,
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот
	|ИЗ
	|	ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|		ПО ТаблицаРемонтовОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	|			И ТаблицаРемонтовОборудования.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.Приоритет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособПланирования,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ГрафикРемонтныхРабот,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособВыполнения,
	|	ЛОЖЬ КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособУчетаДатыОтсчета,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия КАК ВидРемонта,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов КАК ГруппаОбьектовРемонтов,
	|	ТаблицаРемонтовОборудования.ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот
	|ИЗ ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
	|		ПО ТаблицаРемонтовОборудования.ОбъектРемонта = торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов
	|			И ТаблицаРемонтовОборудования.ВидРемонтныхРабот = торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия
	|";
	
	ТаблицаРемонтовОборудования = Новый ТаблицаЗначений;
	ТаблицаРемонтовОборудования.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаРемонтовОборудования.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	
	НоваяСтрока = ТаблицаРемонтовОборудования.Добавить();
	НоваяСтрока.ОбъектРемонта = ТекущиеДанныеСтроки.ОбъектРемонтныхРабот;
	НоваяСтрока.ВидРемонтныхРабот = ТекущиеДанныеСтроки.ВидРемонтныхРабот;
	
	Запрос.УстановитьПараметр("ТаблицаРемонтовОборудования", ТаблицаРемонтовОборудования);
	
	ТаблицаДанныхНормативов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанныхНормативов.Количество() > 0 Тогда
		
		ТехКартаРемонта = ТаблицаДанныхНормативов[0].НормативныйРемонт;
		ВерсияТехКарты = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(ТехКартаРемонта, ТекущиеДанныеСтроки.ДатаНач);
		
		Если ЗначениеЗаполнено(ВерсияТехКарты) Тогда			
			
			НовСтрокаРемонтныхРабот = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, ТехКартаРемонта");
			НовСтрокаРемонтныхРабот.РемонтнаяРабота = ТехКартаРемонта;
			НовСтрокаРемонтныхРабот.Количество = 0;
			НовСтрокаРемонтныхРабот.Родитель_ID = "";
			НовСтрокаРемонтныхРабот.РемонтыОборудования_ID = ТекущиеДанныеСтроки.ID;
			НовСтрокаРемонтныхРабот.ID = Новый УникальныйИдентификатор();
			НовСтрокаРемонтныхРабот.ТехКартаРемонта = Неопределено;
			
			МассивСтрокРемонтныхРабот.Добавить(НовСтрокаРемонтныхРабот);
			
			ДобавитьСтрокуРемонтныхРабот(НовСтрокаРемонтныхРабот,
				ТекущиеДанныеСтроки.ДатаНач,
				МассивСтрокРемонтныхРабот,
				ВерсияТехКарты,
				НовСтрокаРемонтныхРабот.ID);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат МассивСтрокРемонтныхРабот;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуРемонтныхРабот(СтрокаРемонтныхРабот, ДатаНачала, МассивСтрокРемонтныхРабот, ТехКартаРемонта, Родитель_ID)
	
	Для Каждого СтрокаОперации Из ТехКартаРемонта.СписокОпераций Цикл
		
		Если НаличиеОперацииВМассиве(СтрокаОперации.Операция, МассивСтрокРемонтныхРабот, Родитель_ID) Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрокаРемонтныхРабот = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, ТехКартаРемонта");
		НовСтрокаРемонтныхРабот.РемонтнаяРабота = СтрокаОперации.Операция;
		НовСтрокаРемонтныхРабот.Количество = 0;
		НовСтрокаРемонтныхРабот.Родитель_ID = Родитель_ID;
		НовСтрокаРемонтныхРабот.РемонтыОборудования_ID = СтрокаРемонтныхРабот.РемонтыОборудования_ID;
		НовСтрокаРемонтныхРабот.ID = СтрокаОперации.ID;
		НовСтрокаРемонтныхРабот.ТехКартаРемонта = Неопределено;
		
		Если ЗначениеЗаполнено(ТехКартаРемонта) Тогда
			Попытка
				НовСтрокаРемонтныхРабот.ТехКартаРемонта = ТехКартаРемонта;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		МассивСтрокРемонтныхРабот.Добавить(НовСтрокаРемонтныхРабот);
		
		Если ТипЗнч(СтрокаОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(СтрокаОперации.Операция, ДатаНачала);
			
			Если ЗначениеЗаполнено(ТехКарта) Тогда
				
				ДобавитьСтрокуРемонтныхРабот(СтрокаРемонтныхРабот,
				ДатаНачала,
				МассивСтрокРемонтныхРабот,
				ТехКарта,
				НовСтрокаРемонтныхРабот.ID); 
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НаличиеОперацииВМассиве(Операция, МассивСтрокРемонтныхРабот, Родитель_ID)
	
	Для Каждого РемРаб Из МассивСтрокРемонтныхРабот Цикл
		Если РемРаб.Родитель_ID = Родитель_ID И Операция = РемРаб.РемонтнаяРабота Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьЛимитыНаПериод(ДатаНачалаЛимита, ДатаОкончанияЛимита)
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ГодовыеЛимитыРемонтныхРаботСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ГодовыеЛимитыРемонтныхРабот.СрезПоследних(
	|			,
	|			ГОД(Период) >= &ГодНач
	|				И ГОД(Период) <= &ГодКон) КАК торо_ГодовыеЛимитыРемонтныхРаботСрезПоследних";
	
	Запрос.УстановитьПараметр("ГодНач", ДатаНачалаЛимита);
	Запрос.УстановитьПараметр("ГодКон", ДатаОкончанияЛимита);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьЛимитыНаОрганизацию(ДатаНачалаЛимита, ДатаОкончанияЛимита, СписокОбъектовРемонта)
	
	Запрос = Новый Запрос;
	// Запрос.Текст = 
	// "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// |	торо_ОбъектыРемонта.Направление КАК Направление,
	// |	торо_ОбъектыРемонта.Организация КАК Организация
	// |ПОМЕСТИТЬ ВТ_НаправленияИОрганизацииОР
	// |ИЗ
	// |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	// |ГДЕ
	// |	торо_ОбъектыРемонта.Ссылка В(&СписокОбъектовРемонта)
	// |;
	// |
	// |////////////////////////////////////////////////////////////////////////////////
	// |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// |	торо_ГодовыеЛимитыРемонтныхРаботСрезПоследних.Регистратор КАК Регистратор
	// |ИЗ
	// |	РегистрСведений.торо_ГодовыеЛимитыРемонтныхРабот.СрезПоследних(
	// |			,
	// |			ГОД(Период) >= &ГодНач
	// |				И ГОД(Период) <= &ГодКон
	// |				И (Организация В
	// |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	// |							ВТ_НаправленияИОрганизацииОР.Организация
	// |						ИЗ
	// |							ВТ_НаправленияИОрганизацииОР КАК ВТ_НаправленияИОрганизацииОР)
	// |					ИЛИ Направление В
	// |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	// |							ВТ_НаправленияИОрганизацииОР.Направление
	// |						ИЗ
	// |							ВТ_НаправленияИОрганизацииОР КАК ВТ_НаправленияИОрганизацииОР)
	// |					ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	// |					ИЛИ Направление = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка))) КАК торо_ГодовыеЛимитыРемонтныхРаботСрезПоследних";
	   
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Направление КАК Направление,
	|	торо_ОбъектыРемонта.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_НаправленияИОрганизацииОР
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&СписокОбъектовРемонта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ГодовыеЛимитыРемонтныхРаботСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.торо_ГодовыеЛимитыРемонтныхРабот.СрезПоследних(
	|			,
	|			ГОД(Период) >= &ГодНач
	|				И ГОД(Период) <= &ГодКон
	|				И (((Организация, Направление) В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ВТ_НаправленияИОрганизацииОР.Организация,
	|							ВТ_НаправленияИОрганизацииОР.Направление
	|						ИЗ
	|							ВТ_НаправленияИОрганизацииОР КАК ВТ_НаправленияИОрганизацииОР))
	|					ИЛИ (Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						И Направление В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ВТ_НаправленияИОрганизацииОР.Направление
	|							ИЗ
	|								ВТ_НаправленияИОрганизацииОР КАК ВТ_НаправленияИОрганизацииОР))
	|					ИЛИ (Направление = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|						И Организация В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ВТ_НаправленияИОрганизацииОР.Организация
	|							ИЗ
	|								ВТ_НаправленияИОрганизацииОР КАК ВТ_НаправленияИОрганизацииОР))
	|					ИЛИ (Направление = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|						И Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)))) КАК торо_ГодовыеЛимитыРемонтныхРаботСрезПоследних";	
	
	Запрос.УстановитьПараметр("ГодНач", ДатаНачалаЛимита);
	Запрос.УстановитьПараметр("ГодКон", ДатаОкончанияЛимита);
	Запрос.УстановитьПараметр("СписокОбъектовРемонта", СписокОбъектовРемонта);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ДеревоППРСвернутьВсе(Команда)
	
	ЭлементыДереваПоложения = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы();
	Для Каждого СтрокаПоложение Из ЭлементыДереваПоложения Цикл
		ЭлементыДереваОбъектыРемонта = СтрокаПоложение.ПолучитьЭлементы();
		Для Каждого СтрокаОР Из ЭлементыДереваОбъектыРемонта Цикл
			Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.Свернуть(СтрокаОР.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоППРРазвернутьВсе(Команда)
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоПланаГрафикаППРСУчетомПозиции",,Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуПоложенияВДерево(СтрокиДерева, ПоложениеОР)
		
	СтрокаПоложения = СтрокиДерева.Добавить();
	СтрокаПоложения.Ремонты = ПоложениеОР;
	СтрокаПоложения.Положение = ПоложениеОР;
	СтрокаПоложения.НомерКартинки = ?(ПоложениеОР = ПредставлениеПустогоРодителя(), 4, 2);
	
	Возврат СтрокаПоложения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуОРВДерево(СтрокаПоложенияОР, ОбъектРемонта)
		
	СтрокаОР = СтрокаПоложенияОР.ПолучитьЭлементы().Добавить();
	СтрокаОР.Ремонты = ОбъектРемонта;
	СтрокаОР.ОбъектРемонта = ОбъектРемонта;
	СтрокаОР.НомерКартинки = 0;
	
	Возврат СтрокаОР;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВидаРемонтаВДерево(СтрокаОбъектаРемонта, ВидРемонта)
	Если ЗначениеЗаполнено(ВидРемонта) Тогда
		СтрокиВР = торо_ДанныеФормыДеревоКлиентСервер.НайтиСтроки(
			СтрокаОбъектаРемонта,
			Новый Структура("Ремонты", ВидРемонта),
			,,1
		);
		
		Если СтрокиВР.Количество() = 0 Тогда
			СтрокаВР = СтрокаОбъектаРемонта.ПолучитьЭлементы().Добавить();
			СтрокаВР.Ремонты = ВидРемонта;
			СтрокаВР.НомерКартинки = ?(ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.торо_ЦепочкиРемонта"), 15, 7);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустогоРодителя()
	
	Возврат НСтр("ru='<Объекты и виды ремонта>'");
	
КонецФункции

&НаКлиенте
Процедура ВопросОПерезаполненииСкладаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПерезаполнятьСклад = (Результат = КодВозвратаДиалога.Да);
	ЗаполнитьСкладИзПодразделения(ПерезаполнятьСклад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладИзПодразделения(ПерезаполнятьСклад)
	
	Для каждого Строка Из Объект.ПланРемонтов Цикл	
		Если НЕ ЗначениеЗаполнено(Строка.Склад) ИЛИ ПерезаполнятьСклад Тогда
			торо_ЗаполнениеДокументовКлиент.ЗаполнитьСклад(Объект.Подразделение, Строка.Склад);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуРемонтаДляЦепочкиЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.ПланРемонтов.Добавить();
	НоваяСтрока.ID = Новый УникальныйИдентификатор;
	НоваяСтрока.ОбъектРемонтныхРабот = ДополнительныеПараметры.ОбъектРемонта;
	НоваяСтрока.ВидРемонтныхРабот    = ВыбранноеЗначение.Значение;
	
КонецПроцедуры

&НаСервере
Функция СписокВРБезНормативов(ВыводитьВРБезНормативов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаВыбранныхОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ТаблицаВыбранныхОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	               |ПОМЕСТИТЬ ВТ_ТаблицаВыбранныхОР
	               |ИЗ
	               |	&ТаблицаВыбранныхОР КАК ТаблицаВыбранныхОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонтныхРабот,
	               |	ВидРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ВТ_ТаблицаВыбранныхОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	               |ПОМЕСТИТЬ ВТ_ИмеющиесяЦепочки
	               |ИЗ
	               |	ВТ_ТаблицаВыбранныхОР КАК ВТ_ТаблицаВыбранныхОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	               |		ПО ВТ_ТаблицаВыбранныхОР.ОбъектРемонтныхРабот = торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов
	               |			И ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот = торо_РемонтныеЦиклыОборудования.ВидЦепочки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот,
	               |	ВТ_ТаблицаВыбранныхОР.ОбъектРемонтныхРабот
	               |ИЗ
	               |	ВТ_ТаблицаВыбранныхОР КАК ВТ_ТаблицаВыбранныхОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	               |		ПО (ВЫРАЗИТЬ(ВТ_ТаблицаВыбранныхОР.ОбъектРемонтныхРабот КАК Справочник.торо_ОбъектыРемонта).ТиповойОР = торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов)
	               |			И ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот = торо_РемонтныеЦиклыОборудования.ВидЦепочки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонтныхРабот,
	               |	ВидРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ВТ_ТаблицаВыбранныхОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	               |ИЗ
	               |	ВТ_ТаблицаВыбранныхОР КАК ВТ_ТаблицаВыбранныхОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |		ПО ВТ_ТаблицаВыбранныхОР.ОбъектРемонтныхРабот = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	               |			И ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	               |ГДЕ
	               |	ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот ССЫЛКА Справочник.торо_ВидыРемонтов
	               |	И торо_НормативныеРемонтыОборудования.ОбъектРемонта ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот,
	               |	ВТ_ТаблицаВыбранныхОР.ОбъектРемонтныхРабот
	               |ИЗ
	               |	ВТ_ТаблицаВыбранныхОР КАК ВТ_ТаблицаВыбранныхОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИмеющиесяЦепочки КАК ВТ_ИмеющиесяЦепочки
	               |		ПО ВТ_ТаблицаВыбранныхОР.ОбъектРемонтныхРабот = ВТ_ИмеющиесяЦепочки.ОбъектРемонтныхРабот
	               |			И ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот = ВТ_ИмеющиесяЦепочки.ВидРемонтныхРабот
	               |ГДЕ
	               |	ВТ_ТаблицаВыбранныхОР.ВидРемонтныхРабот ССЫЛКА Справочник.торо_ЦепочкиРемонта
	               |	И ВТ_ИмеющиесяЦепочки.ВидРемонтныхРабот ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаВыбранныхОР", ПараметрыРасчета_МассивВыбранныхОР.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НачальноеКоличествоСтрок = ПараметрыРасчета_МассивВыбранныхОР.Количество();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", Выборка.ОбъектРемонтныхРабот, Выборка.ВидРемонтныхРабот);
		НайденныеСтроки = ПараметрыРасчета_МассивВыбранныхОР.НайтиСтроки(СтруктураПоиска);
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ВыводитьВРБезНормативов Тогда
			    ШаблонСообщения = НСтр("ru = 'Для вида ремонта ""%1"" объекта ремонта ""%2"" не заданы нормативы планирования!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, НайденнаяСтрока.ВидРемонтныхРабот, НайденнаяСтрока.ОбъектРемонтныхРабот);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		    ПараметрыРасчета_МассивВыбранныхОР.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ?(Выборка.Количество() = НачальноеКоличествоСтрок, Истина, Ложь);
КонецФункции

&НаСервере
Процедура УстановитьВидимостьВидаОперации()
	Элементы.ВидОперации.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Функция СоответствиеОбъектовВидамРемонтаПоИдентификаторам(ИдентификаторыСтрок)
	
	Результат = Новый Соответствие; // Ключ - объект ремонта, значение - виды ремонтов.
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = ДеревоПланаГрафикаППРСУчетомПозиции.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		СтрокиОбъектовРемонта = Новый Массив;
		
		Если ДанныеСтроки.Ремонты = ПредставлениеПустогоРодителя() Тогда // Корень дерева
			
			Если мОтображатьПоложение Тогда
				
				Для Каждого СтрокаПоложения Из ДанныеСтроки.ПолучитьЭлементы() Цикл
					
					Если ЗначениеЗаполнено(СтрокаПоложения.Положение) Тогда
						
						Для Каждого СтрокаОбъектРемонта Из СтрокаПоложения.ПолучитьЭлементы() Цикл
							СтрокиОбъектовРемонта.Добавить(СтрокаОбъектРемонта);		
						КонецЦикла;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаПоложения.ОбъектРемонта) Тогда
						СтрокиОбъектовРемонта.Добавить(СтрокаПоложения);	
					КонецЕсли;	
				КонецЦикла;	
			Иначе
				
				Для Каждого СтрокаОбъектРемонта Из ДанныеСтроки.ПолучитьЭлементы() Цикл
					СтрокиОбъектовРемонта.Добавить(СтрокаОбъектРемонта);		
				КонецЦикла;	
			КонецЕсли;	
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Положение) Тогда // Строка положение 
			
			Для Каждого СтрокаОбъектРемонта Из ДанныеСтроки.ПолучитьЭлементы() Цикл
				СтрокиОбъектовРемонта.Добавить(СтрокаОбъектРемонта);		
			КонецЦикла;	
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ОбъектРемонта) Тогда // Строка объекта ремонта.
			
			СтрокиОбъектовРемонта.Добавить(ДанныеСтроки);
			
		ИначеЕсли ТипЗнч(ДанныеСтроки.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов")
			ИЛИ ТипЗнч(ДанныеСтроки.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда // Строка вид ремонта.
			
			СтрокиОбъектовРемонта.Добавить(ДанныеСтроки.ПолучитьРодителя()); 	
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаОбъектаРемонта Из СтрокиОбъектовРемонта Цикл 
			
			Если Не Результат.Получить(СтрокаОбъектаРемонта) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			МассивВидовРемонта = Новый Массив;
			Для Каждого СтрокаВидаРемонта Из СтрокаОбъектаРемонта.ПолучитьЭлементы() Цикл
				МассивВидовРемонта.Добавить(СтрокаВидаРемонта.Ремонты);	
			КонецЦикла; 
			
			Результат.Вставить(СтрокаОбъектаРемонта.ОбъектРемонта, МассивВидовРемонта);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Если Клиент Тогда
	УровеньОрВДереве = 2;
	УровеньПоложенияВДереве = 1;
#КонецЕсли

#КонецОбласти