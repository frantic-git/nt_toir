#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.торо_ЗаказПоставщику") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТовары);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад");
	КонецЕсли;
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ФОИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();
	ФОИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	// регистр ТоварыНаСкладах Приход
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	               |	ПоступлениеТоваровУслуг.Характеристика КАК Характеристика,
	               |	СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	               |	ПоступлениеТоваровУслуг.Серия КАК Серия,
	               |	ПоступлениеТоваровУслуг.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	               |	ПоступлениеТоваровУслуг.Склад КАК Склад
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	               |ГДЕ
	               |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслуг.Номенклатура,
	               |	ПоступлениеТоваровУслуг.Характеристика,
	               |	ПоступлениеТоваровУслуг.Серия,
	               |	ПоступлениеТоваровУслуг.Номенклатура.ВидНоменклатуры.ТипНоменклатуры,
	               |	ПоступлениеТоваровУслуг.Склад";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТЧТовары = Запрос.Выполнить().Выгрузить();

	Движения.ТоварыНаСкладах.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из ТЧТовары Цикл
		Если ТекСтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
			ИЛИ ТекСтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			
			Движение = Движения.ТоварыНаСкладах.Добавить();
			Движение.ВидДвижения    = ВидДвиженияНакопления.Приход;
			Движение.Период         = Дата;
			Движение.Номенклатура   = ТекСтрокаТовары.Номенклатура;
			Движение.Характеристика = ТекСтрокаТовары.Характеристика;
			Движение.Склад          = ТекСтрокаТовары.Склад;
			Движение.ВНаличии       = ТекСтрокаТовары.Количество;
			Если ФОИспользоватьСерии Тогда
				Движение.Серия      = ТекСтрокаТовары.Серия;
			КонецЕсли; 			
		КонецЕсли;	
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	&Характеристика КАК Характеристика,
	               |	СУММА(Таблица.Количество) КАК Количество,
	               |	&Серия КАК Серия,
	               |	Таблица.Склад КАК Склад
	               |ПОМЕСТИТЬ ТабличнаяЧасть
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК Таблица
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Таблица.Номенклатура,
	               |	Таблица.Склад,
				   |	&Характеристика,
				   |	&Серия
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика,
	               |	Серия";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ФОИспользоватьСерии Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Серия", "Таблица.Серия");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Серия", "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)");
	КонецЕсли;

	Если ФОИспользоватьХарактеристики Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Таблица.Характеристика");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
	КонецЕсли;

	РезЗапроса = Запрос.Выполнить();
	
	ДобавитьРезервы(Запрос);
	ЗакрытьЗаказыПоставщику(Запрос);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
		
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	Если ФОИспользоватьХарактеристикиНоменклатуры = Истина тогда
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	КонецЕсли;
	
	ФОИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
	Если ФОИспользоватьСерииНоменклатуры = Истина тогда
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												Отказ,
												МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	Счт = 1;
	Для каждого Строка Из ЭтотОбъект.Товары Цикл 
		Если Строка.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") 
			И НЕ ЗначениеЗаполнено(Строка.Склад) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке " + Счт + " списка ""Товары"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		Счт = Счт + 1;		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
			
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда
		Для каждого ТекСтрока из ЭтотОбъект.Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
				ТекСтрока.Склад = ЭтотОбъект.Склад;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("СуммаСНДС");
	
	Если ЭтоНовый() Тогда
		 торо_Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРезервы(Запрос)
	Движения.торо_РезервыНаСкладах.Записывать = Истина; 	
	Если РезервироватьПодВнутренниеЗаказы Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
		               |	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
		               |	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
		               |	ЗаказыНаВнутреннееПотреблениеОстатки.Серия КАК Серия,
		               |	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
		               |	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток КАК КОформлениюОстаток
		               |ПОМЕСТИТЬ Заказы
		               |ИЗ
		               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
		               |			,
		               |			(Номенклатура, Характеристика, Склад) В
		               |				(ВЫБРАТЬ
		               |					ВТ.Номенклатура,
		               |					ВТ.Характеристика,
		               |					ВТ.Склад
		               |				ИЗ
		               |					ТабличнаяЧасть КАК ВТ)) КАК ЗаказыНаВнутреннееПотреблениеОстатки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Склад,
		               |	Номенклатура,
		               |	Характеристика,
		               |	ЗаказНаВнутреннееПотребление
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
		               |	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		               |	торо_РезервыНаСкладахОстатки.Характеристика КАК Характеристика,
		               |	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
		               |	торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
		               |ПОМЕСТИТЬ РезервыНаСкладах
		               |ИЗ
		               |	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
		               |			&Дата,
		               |			(Номенклатура, Характеристика, Склад) В
		               |				(ВЫБРАТЬ
		               |					ВТ.Номенклатура,
		               |					ВТ.Характеристика,
		               |					ВТ.Склад
		               |				ИЗ
		               |					ТабличнаяЧасть КАК ВТ)) КАК торо_РезервыНаСкладахОстатки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Склад,
		               |	Номенклатура,
		               |	Характеристика,
		               |	ЗаказНаВнутреннееПотребление
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ТоварыНаРуках.Номенклатура КАК Номенклатура,
		               |	торо_ТоварыНаРуках.Характеристика КАК Характеристика,
		               |	торо_ТоварыНаРуках.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
		               |	торо_ТоварыНаРуках.КоличествоОстаток КАК КоличествоОстаток
		               |ПОМЕСТИТЬ ТоварыНаРуках
		               |ИЗ
		               |	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
		               |			&Дата,
		               |			(Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление) В
		               |				(ВЫБРАТЬ
		               |					ВТ.Номенклатура,
		               |					ВТ.Характеристика,
		               |					ВТ.ЗаказНаВнутреннееПотребление
		               |				ИЗ
		               |					Заказы КАК ВТ)) КАК торо_ТоварыНаРуках
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика,
		               |	ЗаказНаВнутреннееПотребление
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПотребностьОстатки.Склад КАК Склад,
		               |	ПотребностьОстатки.Номенклатура КАК Номенклатура,
		               |	ПотребностьОстатки.Характеристика КАК Характеристика,
		               |	ПотребностьОстатки.Серия КАК Серия,
		               |	ПотребностьОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
		               |	СУММА(ПотребностьОстатки.КОформлениюОстаток - ЕСТЬNULL(РезервыНаСкладах.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаРуках.КоличествоОстаток, 0)) КАК Потребность
		               |ПОМЕСТИТЬ Потребности
		               |ИЗ
		               |	Заказы КАК ПотребностьОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РезервыНаСкладах КАК РезервыНаСкладах
		               |		ПО ПотребностьОстатки.Склад = РезервыНаСкладах.Склад
		               |			И ПотребностьОстатки.Номенклатура = РезервыНаСкладах.Номенклатура
		               |			И ПотребностьОстатки.Характеристика = РезервыНаСкладах.Характеристика
		               |			И ПотребностьОстатки.ЗаказНаВнутреннееПотребление = РезервыНаСкладах.ЗаказНаВнутреннееПотребление
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК ТоварыНаРуках
		               |		ПО ПотребностьОстатки.Номенклатура = ТоварыНаРуках.Номенклатура
		               |			И ПотребностьОстатки.ЗаказНаВнутреннееПотребление = ТоварыНаРуках.ЗаказНаВнутреннееПотребление
		               |			И ПотребностьОстатки.Характеристика = ТоварыНаРуках.Характеристика
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПотребностьОстатки.Склад,
		               |	ПотребностьОстатки.Номенклатура,
		               |	ПотребностьОстатки.Характеристика,
		               |	ПотребностьОстатки.Серия,
		               |	ПотребностьОстатки.ЗаказНаВнутреннееПотребление
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(ПотребностьОстатки.КОформлениюОстаток - ЕСТЬNULL(РезервыНаСкладах.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаРуках.КоличествоОстаток, 0)) <> 0";
		Запрос.УстановитьПараметр("Дата", Новый Граница(ТекущаяДата(), ВидГраницы.Включая));
		Запрос.Выполнить();	
		
		Если Константы.торо_СпособРезервированияМатериалов.Получить() = Перечисления.торо_СпособыРезервированияМатериалов.СУчетомКритичности Тогда 
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Заказы.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
			               |	торо_ИнтеграцияДокументов.ID КАК ID,
			               |	торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта КАК ОбъектРемонта,
			               |	торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала КАК ДатаНачала
			               |ПОМЕСТИТЬ ЗаказыСРемонтами
			               |ИЗ
			               |	Заказы КАК Заказы
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
			               |		ПО Заказы.ЗаказНаВнутреннееПотребление = торо_ИнтеграцияДокументов.ДокументЕРП
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
			               |		ПО (торо_АктуальныеПлановыеДатыРемонтов.IDРемонта = торо_ИнтеграцияДокументов.ID)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_ВыявленныеДефектыСрезПоследних.ID КАК ID,
			               |	торо_ВыявленныеДефектыСрезПоследних.КритичностьДефекта КАК КритичностьДефекта,
			               |	торо_ВыявленныеДефектыСрезПоследних.ОбъектРемонта КАК ОбъектРемонта
			               |ПОМЕСТИТЬ Дефекты
			               |ИЗ
			               |	РегистрСведений.торо_ВыявленныеДефекты.СрезПоследних(
			               |			,
			               |			ID В
			               |				(ВЫБРАТЬ
			               |					ЗаказыСРемонтами.ID
			               |				ИЗ
			               |					ЗаказыСРемонтами)) КАК торо_ВыявленныеДефектыСрезПоследних
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ЗаказыСРемонтами.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
			               |	ЗаказыСРемонтами.ID КАК ID,
			               |	ЕСТЬNULL(Дефекты.ОбъектРемонта, ЗаказыСРемонтами.ОбъектРемонта) КАК ОбъектРемонта,
			               |	ЗаказыСРемонтами.ДатаНачала КАК ДатаНачала,
			               |	ЕСТЬNULL(торо_КритичностьДефекта.НормированноеЗначение, ЕСТЬNULL(торо_ПриоритетыОбъектовРемонта.НормированноеЗначение, 0)) КАК Критичность,
			               |	ВЫБОР
			               |		КОГДА &ДатаДокумента > ЗаказыСРемонтами.ДатаНачала
			               |			ТОГДА 0
			               |		ИНАЧЕ РАЗНОСТЬДАТ(&ДатаДокумента, НАЧАЛОПЕРИОДА(ЗаказыСРемонтами.ДатаНачала, ДЕНЬ), ДЕНЬ)
			               |	КОНЕЦ КАК ДнейДоРемонта
			               |ПОМЕСТИТЬ ДанныеДляРасчета
			               |ИЗ
			               |	ЗаказыСРемонтами КАК ЗаказыСРемонтами
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Дефекты КАК Дефекты
			               |		ПО ЗаказыСРемонтами.ID = Дефекты.ID
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_КритичностьДефекта КАК торо_КритичностьДефекта
			               |		ПО (Дефекты.КритичностьДефекта = торо_КритичностьДефекта.Ссылка)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО (ЕСТЬNULL(Дефекты.ОбъектРемонта, ЗаказыСРемонтами.ОбъектРемонта) = торо_ОбъектыРемонта.Ссылка)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ПриоритетыОбъектовРемонта КАК торо_ПриоритетыОбъектовРемонта
			               |		ПО (торо_ОбъектыРемонта.Приоритет = торо_ПриоритетыОбъектовРемонта.Ссылка)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ДанныеДляРасчета.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
			               |	ЕСТЬNULL(10 * (1 + &КоэффКритичности * ДанныеДляРасчета.Критичность * ДанныеДляРасчета.Критичность) / (1 + ДанныеДляРасчета.ДнейДоРемонта / 7), 0) КАК Приоритет
			               |ПОМЕСТИТЬ ПриоритетыЗаказов
			               |ИЗ
			               |	ДанныеДляРасчета КАК ДанныеДляРасчета";
			Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Дата));
			Запрос.УстановитьПараметр("КоэффКритичности", Константы.торо_КоэффициентУчетаКритичности.Получить());
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Заказы.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
			               |	0 КАК Приоритет
			               |ПОМЕСТИТЬ ПриоритетыЗаказов
			               |ИЗ
			               |	Заказы КАК Заказы";
		КонецЕсли;
		Запрос.Выполнить();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТабличнаяЧасть.Склад КАК Склад,
		               |	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		               |	ТабличнаяЧасть.Характеристика КАК Характеристика,
		               |	Потребности.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
		               |	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
		               |	ТабличнаяЧасть.Серия КАК Серия,
		               |	Потребности.Потребность КАК Потребность
		               |ИЗ
		               |	ТабличнаяЧасть КАК ТабличнаяЧасть
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребности КАК Потребности
		               |		ПО ТабличнаяЧасть.Склад = Потребности.Склад
		               |			И ТабличнаяЧасть.Номенклатура = Потребности.Номенклатура
		               |			И ТабличнаяЧасть.Характеристика = Потребности.Характеристика
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК ДокументЗаказ
		               |		ПО (Потребности.ЗаказНаВнутреннееПотребление = ДокументЗаказ.Ссылка)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ПриоритетыЗаказов КАК ПриоритетыЗаказов
		               |		ПО (ПриоритетыЗаказов.ЗаказНаВнутреннееПотребление = ДокументЗаказ.Ссылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТабличнаяЧасть.Склад,
		               |	ТабличнаяЧасть.Номенклатура,
		               |	ТабличнаяЧасть.Характеристика,
		               |	Потребности.ЗаказНаВнутреннееПотребление,
		               |	ТабличнаяЧасть.Серия,
		               |	Потребности.Потребность,
		               |	ДокументЗаказ.ДатаОтгрузки,
		               |	ДокументЗаказ.Дата,
		               |	ПриоритетыЗаказов.Приоритет
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПриоритетыЗаказов.Приоритет УБЫВ,
		               |	ДокументЗаказ.ДатаОтгрузки,
		               |	ДокументЗаказ.Дата
		               |ИТОГИ
		               |	МИНИМУМ(Потребность)
		               |ПО
		               |	Склад,
		               |	Номенклатура,
		               |	Характеристика,
		               |	ЗаказНаВнутреннееПотребление
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ Потребности";
		РезЗапроса = Запрос.Выполнить();
		Если НЕ РезЗапроса.Пустой() Тогда
			
			Таблица = Новый ТаблицаЗначений();
			Таблица.Колонки.Добавить("Серия");
			Таблица.Колонки.Добавить("Списано");
			
			Структура = Новый Структура();
			Структура.Вставить("Серия");
			
			ВыборкаСкладов = РезЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСкладов.Следующий() Цикл	
				ВыборкаНоменклатура = ВыборкаСкладов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНоменклатура.Следующий() Цикл
					Таблица.Очистить();
					ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаХарактеристика.Следующий() Цикл
						ВыборкаВнутреннийЗаказ = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаВнутреннийЗаказ.Следующий() Цикл
							Потребность = ВыборкаВнутреннийЗаказ.Потребность;
							
							ВыборкаДетальныеЗаписи = ВыборкаВнутреннийЗаказ.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл								
								Если Потребность = 0 Тогда
									Прервать;
								КонецЕсли;

								Поступило = ВыборкаДетальныеЗаписи.Количество;
								ЗаполнитьЗначенияСвойств(Структура, ВыборкаДетальныеЗаписи);
								
								ТекСтрока = Неопределено;
								Массив = Таблица.НайтиСтроки(Структура);
								Если Массив.Количество() Тогда
									ТекСтрока = Массив[0];
									Поступило = Поступило - ТекСтрока.Списано;
								Иначе
									ТекСтрока = Таблица.Добавить();
									ЗаполнитьЗначенияСвойств(ТекСтрока, Структура);
									ТекСтрока.Списано = 0;
								КонецЕсли;
								
								Если Поступило = 0 Тогда
									Продолжить;
								КонецЕсли;
								
								Резервируем = 0;
								Резервируем = ?(Поступило > Потребность, Потребность, Поступило);
								
								Потребность = Потребность - Резервируем;
								
								Движение = Движения.торо_РезервыНаСкладах.ДобавитьПриход();
								Движение.Период = Дата;
								Движение.Склад = ВыборкаДетальныеЗаписи.Склад;
								Движение.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
								Движение.Характеристика = ВыборкаДетальныеЗаписи.Характеристика;
								Движение.Серия = ВыборкаДетальныеЗаписи.Серия;
								Движение.ЗаказНаВнутреннееПотребление = ВыборкаДетальныеЗаписи.ЗаказНаВнутреннееПотребление;
								Движение.Количество = Резервируем;
								Движение.ДокументРезерв = Ссылка;
								
								ТекСтрока.Списано = ТекСтрока.Списано + Резервируем;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;	
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗакрытьЗаказыПоставщику(Запрос)
	Движения.торо_ЗаказыПоставщику.Записывать = Истина;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗаказыПоставщикуОстатки.Номенклатура КАК Номенклатура,
	               |	торо_ЗаказыПоставщикуОстатки.Характеристика КАК Характеристика,
	               |	торо_ЗаказыПоставщикуОстатки.Склад КАК Склад,
	               |	торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	               |	торо_ЗаказыПоставщикуОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ЗаказыПоставщику
	               |ИЗ
	               |	РегистрНакопления.торо_ЗаказыПоставщику.Остатки(
	               |			&Дата,
	               |			(Номенклатура, Характеристика, Склад) В
	               |				(ВЫБРАТЬ
	               |					ВТ.Номенклатура,
	               |					ВТ.Характеристика,
	               |					ВТ.Склад
	               |				ИЗ
	               |					ТабличнаяЧасть КАК ВТ)) КАК торо_ЗаказыПоставщикуОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗаказыПоставщикуОстатки.Номенклатура КАК Номенклатура,
	               |	ТабличнаяЧасть.Характеристика КАК Характеристика,
	               |	торо_ЗаказыПоставщикуОстатки.Склад КАК Склад,
	               |	торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	               |	торо_ЗаказыПоставщикуОстатки.КоличествоОстаток КАК НадоСписать,
	               |	СУММА(ТабличнаяЧасть.Количество) КАК Поступило,
	               |	ТабличнаяЧасть.Серия КАК Серия
	               |ИЗ
	               |	ТабличнаяЧасть КАК ТабличнаяЧасть
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыПоставщику КАК торо_ЗаказыПоставщикуОстатки
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаказПоставщику КАК торо_ЗаказПоставщику
	               |			ПО торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику = торо_ЗаказПоставщику.Ссылка
	               |		ПО ТабличнаяЧасть.Склад = торо_ЗаказыПоставщикуОстатки.Склад
	               |			И ТабличнаяЧасть.Номенклатура = торо_ЗаказыПоставщикуОстатки.Номенклатура
	               |			И ТабличнаяЧасть.Характеристика = торо_ЗаказыПоставщикуОстатки.Характеристика
	               |ГДЕ
	               |	торо_ЗаказПоставщику.Договор = &Договор
	               |	И торо_ЗаказПоставщику.Контрагент = &Контрагент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаказыПоставщикуОстатки.Номенклатура,
	               |	ТабличнаяЧасть.Характеристика,
	               |	торо_ЗаказыПоставщикуОстатки.Склад,
	               |	ТабличнаяЧасть.Серия,
	               |	торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику,
	               |	торо_ЗаказыПоставщикуОстатки.КоличествоОстаток,
	               |	торо_ЗаказПоставщику.Дата,
	               |	торо_ЗаказПоставщику.ДатаПоставки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	торо_ЗаказПоставщику.ДатаПоставки,
	               |	торо_ЗаказПоставщику.Дата
	               |ИТОГИ
	               |	МИНИМУМ(НадоСписать)
	               |ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика,
	               |	ЗаказПоставщику";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Дата", Новый Граница(ТекущаяДата(), ВидГраницы.Включая));

	РезЗапроса = Запрос.Выполнить();
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Серия");
	Таблица.Колонки.Добавить("Списано");
	
	Структура = Новый Структура();
	Структура.Вставить("Серия");
	ВыборкаСкладов = РезЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСкладов.Следующий() Цикл 
		ВыборкаНоменклатур = ВыборкаСкладов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатур.Следующий() Цикл
			ВыборкаХарактеристик = ВыборкаНоменклатур.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл 
				Таблица.Очистить();
				ВыборкаЗаказов = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЗаказов.Следующий() Цикл 
					НадоСписать = ВыборкаЗаказов.НадоСписать;
					ВыборкаДетальныеЗаписи = ВыборкаЗаказов.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Если НадоСписать = 0 Тогда
							Прервать;
						КонецЕсли;
						
						Имеется = ВыборкаДетальныеЗаписи.Поступило;
						ЗаполнитьЗначенияСвойств(Структура, ВыборкаДетальныеЗаписи);
						
						ТекСтрока = Неопределено;
						Массив = Таблица.НайтиСтроки(Структура);
						Если Массив.Количество() Тогда
							ТекСтрока = Массив[0];
							Имеется = Имеется - ТекСтрока.Списано;
						Иначе	
							ТекСтрока = Таблица.Добавить();
							ЗаполнитьЗначенияСвойств(ТекСтрока, Структура);
							ТекСтрока.Списано = 0;
						КонецЕсли;
						
						Если Имеется = 0 Тогда
							Продолжить;			 
						КонецЕсли;
						
						Списываем = 0;
						Если Имеется > НадоСписать Тогда
							Списываем = НадоСписать;	
						Иначе
							Списываем = Имеется;	
						КонецЕсли;
						
						НадоСписать = НадоСписать - Списываем;
						
						Движение = Движения.торо_ЗаказыПоставщику.ДобавитьРасход();
						ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
						Движение.Период = Дата;
						Движение.ДатаПоставки = Дата;
						Движение.Количество = Списываем;
						
						ТекСтрока.Списано = ТекСтрока.Списано + Списываем;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли