#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

Перем мТаблицаСбросаСчетчика Экспорт; // Хранит таблицу значений, используется для работы с документом торо_УстановкаПроизвольногоЗначенияНаработки. 
перем СтруктураДанных Экспорт; // Структура, хранящая данные для работы с уведомлениями.
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МассивОР = ОбщегоНазначения.ВыгрузитьКолонку(НаработкаОбъектов, "Объект", Истина);
	ОбъектыРемонтаСтрокой = торо_ЗаполнениеДокументов20.СформироватьСтрокуОбъектовРемонта(МассивОР);
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПроверитьЦельностьНаработкиПриОтменеПроведения(Отказ);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из НаработкаОбъектов Цикл
		
		Если ЗначениеЗаполнено(Строка.ДатаРаботыПо) И Строка.ДатаРаботыС > Строка.ДатаРаботыПо Тогда
			ТекстСообщения = НСтр("ru = 'Значение ""Дата работы по"" должно быть больше чем ""Дата работы с""'");
			Поле = СтрШаблон("Объект.НаработкаОбъектов[%1].ДатаРаботыПо", НаработкаОбъектов.Индекс(Строка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		ИначеЕсли Строка.Наработка <= 0 Тогда
			ТекстСообщения = НСтр("ru = 'Значение наработки должно быть больше нуля'");
			Поле = СтрШаблон("Объект.НаработкаОбъектов[%1].Наработка", НаработкаОбъектов.Индекс(Строка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
		
		Если Строка.РаспространятьНаПодчиненных И НЕ ЗначениеЗаполнено(Строка.СтруктураИерархии) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Структура иерархии"".'");
			Поле = СтрШаблон("Объект.НаработкаОбъектов[%1].СтруктураИерархии", НаработкаОбъектов.Индекс(Строка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
// Проводит проведение по "торо_НаработкаОбъектовРемонта".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроверитьЦельностьНаработкиПриПроведении(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мТаблицаСбросаСчетчика = Новый ТаблицаЗначений;
	мТаблицаСбросаСчетчика.Колонки.Добавить("ОбъектРемонта");
	мТаблицаСбросаСчетчика.Колонки.Добавить("Показатель");
	мТаблицаСбросаСчетчика.Колонки.Добавить("ДатаРаботыПо");
	мТаблицаСбросаСчетчика.Колонки.Добавить("КоличествоСбросовСчетчика");
	мТаблицаСбросаСчетчика.Колонки.Добавить("НовоеЗначениеАбсолютное");
	мТаблицаСбросаСчетчика.Колонки.Добавить("Наработка");
	мТаблицаСбросаСчетчика.Колонки.Добавить("НовоеЗначение");
	мТаблицаСбросаСчетчика.Колонки.Добавить("РодительИерархии");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.НовоеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.СтароеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Наработка
	|ИЗ
	|	Документ.торо_УчетНаработкиОборудования.НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект = торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта
	|			И торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель = торо_МаксимальныеЗначенияНаработкиОР.Показатель
	|ГДЕ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0),
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.НовоеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.СтароеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Наработка
	|ИЗ
	|	Документ.торо_УчетНаработкиОборудования.НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект = торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта
	|			И торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель = торо_МаксимальныеЗначенияНаработкиОР.Показатель
	|ГДЕ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.МаксимальноеЗначение <> 0 И Выборка.СтароеЗначение + Выборка.Наработка > Выборка.МаксимальноеЗначение Тогда
			КоличествоСбросовСчетчика = Цел((Выборка.СтароеЗначение + Выборка.Наработка) / Выборка.МаксимальноеЗначение);
			НовоеЗначениеАбсолютное = Выборка.СтароеЗначение + Выборка.Наработка;
			
			НС = мТаблицаСбросаСчетчика.Добавить();
			НС.ОбъектРемонта = Выборка.Объект;
			НС.Показатель = Выборка.Показатель;
			НС.ДатаРаботыПо = Выборка.ДатаРаботыПо;
			НС.КоличествоСбросовСчетчика = КоличествоСбросовСчетчика;
			НС.НовоеЗначениеАбсолютное = НовоеЗначениеАбсолютное;
			НС.Наработка = Выборка.Наработка;
			НС.НовоеЗначение = Выборка.НовоеЗначение;
			
		КонецЕсли;
	КонецЦикла;
	
	Если мТаблицаСбросаСчетчика.Количество() > 0 Тогда
		
		// Проверим, не было ли уже создано документов сброса наработки.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_УстановкаПроизвольногоЗначенияНаработкиНаработкаОбъектов.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_УстановкаПроизвольногоЗначенияНаработкиНаработкаОбъектов.Показатель КАК Показатель
		|ИЗ
		|	Документ.торо_УстановкаПроизвольногоЗначенияНаработки.НаработкаОбъектов КАК торо_УстановкаПроизвольногоЗначенияНаработкиНаработкаОбъектов
		|ГДЕ
		|	торо_УстановкаПроизвольногоЗначенияНаработкиНаработкаОбъектов.Ссылка.Проведен
		|	И торо_УстановкаПроизвольногоЗначенияНаработкиНаработкаОбъектов.Ссылка.ДокументОснование = &ДокументОснование
		|	И торо_УстановкаПроизвольногоЗначенияНаработкиНаработкаОбъектов.ПричинаИзмененияНаработки = &ПричинаИзмененияНаработки";
		
		Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
		Запрос.УстановитьПараметр("ПричинаИзмененияНаработки", Справочники.торо_ПричиныИзмененияНаработки.ПревышениеРазрядностиПрибораУчета);
		
		СброшеннаяНаработка = Запрос.Выполнить().Выгрузить();
			
		ДокСбросНаработки = Документы.торо_УстановкаПроизвольногоЗначенияНаработки.СоздатьДокумент();
		
		СтруктураОтбора = Новый Структура("ОбъектРемонта, Показатель");
		
		Для каждого СтрокаТаблицы Из мТаблицаСбросаСчетчика Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
			Если СброшеннаяНаработка.НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НС = ДокСбросНаработки.НаработкаОбъектов.Добавить();
			НС.ОбъектРемонта = СтрокаТаблицы.ОбъектРемонта;
			НС.Показатель = СтрокаТаблицы.Показатель;                   
			НС.ДатаПоследнейНаработки = СтрокаТаблицы.ДатаРаботыПо;
			НС.ЗафиксированнаяНаработка = СтрокаТаблицы.НовоеЗначениеАбсолютное;
			НС.ДатаИВремяОперации = СтрокаТаблицы.ДатаРаботыПо;
			НС.НаработкаДоОперации = СтрокаТаблицы.НовоеЗначениеАбсолютное;
			НС.Наработка = 0;
			НС.АбсолютнаяНаработка = торо_РаботаСНаработкой.АбсолютноеЗначениеНаработки(Ссылка, НС.ОбъектРемонта,НС.Показатель) + СтрокаТаблицы.Наработка; 
			НС.НаработкаПослеОперации = СтрокаТаблицы.НовоеЗначение;
			НС.ПричинаИзмененияНаработки = Справочники.торо_ПричиныИзмененияНаработки.ПревышениеРазрядностиПрибораУчета;
		КонецЦикла;
		
		Если ДокСбросНаработки.НаработкаОбъектов.Количество() > 0 Тогда
			
			ДокСбросНаработки.Дата = ТекущаяДата();
			ДокСбросНаработки.Организация = Организация;
			ДокСбросНаработки.Подразделение = Подразделение;
			ДокСбросНаработки.Ответственный = Ответственный;
			ДокСбросНаработки.ДокументОснование = Ссылка;
			
			Попытка		
				ДокСбросНаработки.Записать(РежимЗаписиДокумента.Проведение);
				
				ШаблонСообщения = НСтр("ru = 'Сформирован документ %1 в связи с превышением разрядности приборов учета.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокСбросНаработки.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Исключение
				ТекстСообщения = НСтр("ru = 'Проведение отменено, так как не удалось провести документ ""Установка произвольного значения наработки"", сбрасывающий показания счетчика.'");
				ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке().Причина);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецПопытки;
		 КонецЕсли;
		
	КонецЕсли;	
	
	Если Не Отказ Тогда
		
		Для Каждого ТекСтрокаНаработкаОбъектов Из НаработкаОбъектов Цикл
			
			ДвижениеПриход = Движения.торо_НаработкаОбъектовРемонта.Добавить();
            ДвижениеПриход.ВидДвижения   = ВидДвиженияНакопления.Приход;
            ДвижениеПриход.Период        = ТекСтрокаНаработкаОбъектов.ДатаРаботыПо;
            ДвижениеПриход.ОбъектРемонта = ТекСтрокаНаработкаОбъектов.Объект;
            ДвижениеПриход.Показатель    = ТекСтрокаНаработкаОбъектов.Показатель;
            ДвижениеПриход.Наработка     = ТекСтрокаНаработкаОбъектов.Наработка;
            ДвижениеПриход.ДатаКон       = ТекСтрокаНаработкаОбъектов.ДатаРаботыПо;
            ДвижениеПриход.ДатаНач       = ТекСтрокаНаработкаОбъектов.ДатаРаботыС;
				
				
			Движение = Движения.торо_ПериодыНаработкиОР.Добавить();
				Движение.Период = ТекСтрокаНаработкаОбъектов.ДатаРаботыПо;
				Движение.ОбъектРемонта = ТекСтрокаНаработкаОбъектов.Объект;
				Движение.Показатель = ТекСтрокаНаработкаОбъектов.Показатель;
		КонецЦикла;
		
		Для Каждого ТекСтрокаНаработкаОбъектов Из НаработкаПодчиненныхОбъектов Цикл
			
			ДвижениеПриход = Движения.торо_НаработкаОбъектовРемонта.Добавить();
            ДвижениеПриход.ВидДвижения   = ВидДвиженияНакопления.Приход;
            ДвижениеПриход.Период        = ТекСтрокаНаработкаОбъектов.ДатаРаботыПо;
            ДвижениеПриход.ОбъектРемонта = ТекСтрокаНаработкаОбъектов.Объект;
            ДвижениеПриход.Показатель    = ТекСтрокаНаработкаОбъектов.Показатель;
            ДвижениеПриход.Наработка     = ТекСтрокаНаработкаОбъектов.Наработка;
            ДвижениеПриход.ДатаКон       = ТекСтрокаНаработкаОбъектов.ДатаРаботыПо;
            ДвижениеПриход.ДатаНач       = ТекСтрокаНаработкаОбъектов.ДатаРаботыС;
				
			Движение = Движения.торо_ПериодыНаработкиОР.Добавить();
				Движение.Период = ТекСтрокаНаработкаОбъектов.ДатаРаботыПо;
				Движение.ОбъектРемонта = ТекСтрокаНаработкаОбъектов.Объект;
				Движение.Показатель = ТекСтрокаНаработкаОбъектов.Показатель;
		КонецЦикла;
		
		Движения.торо_НаработкаОбъектовРемонта.Записать();
		ДвиженияПоРегистру_торо_ГарантийностьРемонтов();
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Объект КАК Объект,
	|	ТаблицаДокумента.Показатель КАК Показатель,
	|	ТаблицаДокумента.Наработка КАК Наработка,
	|	ТаблицаДокумента.РаспространятьНаПодчиненных КАК РаспространятьНаПодчиненных,
	|	ТаблицаДокумента.СтруктураИерархии КАК СтруктураИерархии,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_НаработкаОбъектовРемонтаОстатки.ОбъектРемонта КАК Объект,
	|	торо_НаработкаОбъектовРемонтаОстатки.Показатель КАК Показатель,
	|	торо_НаработкаОбъектовРемонтаОстатки.НаработкаОстаток КАК СтароеЗначение
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта.Остатки(
	|			&Дата,
	|			(ОбъектРемонта, Показатель) В
	|				(ВЫБРАТЬ
	|					ТаблицаДокумента.Объект,
	|					ТаблицаДокумента.Показатель
	|				ИЗ
	|					ТаблицаДокумента КАК ТаблицаДокумента)) КАК торо_НаработкаОбъектовРемонтаОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель,
	|	торо_ПериодыНаработкиОРСрезПоследних.Период КАК ДатаРаботыС
	|ПОМЕСТИТЬ ВТ_Даты
	|ИЗ
	|	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(
	|			&Дата,
	|			(ОбъектРемонта, Показатель) В
	|				(ВЫБРАТЬ
	|					ТаблицаДокумента.Объект,
	|					ТаблицаДокумента.Показатель
	|				ИЗ
	|					ТаблицаДокумента КАК ТаблицаДокумента)) КАК торо_ПериодыНаработкиОРСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Объект КАК Объект,
	|	ТаблицаДокумента.Показатель КАК Показатель,
	|	ТаблицаДокумента.РаспространятьНаПодчиненных КАК РаспространятьНаПодчиненных,
	|	ТаблицаДокумента.СтруктураИерархии КАК СтруктураИерархии,
	|	Остатки.СтароеЗначение КАК СтароеЗначение,
	|	&Дата КАК ДатаРаботыПо,
	|	ВТ_Даты.ДатаРаботыС КАК ДатаРаботыС,
	|	ТаблицаДокумента.Наработка КАК Наработка
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ТаблицаДокумента.Объект = Остатки.Объект
	|			И ТаблицаДокумента.Показатель = Остатки.Показатель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Даты КАК ВТ_Даты
	|		ПО ТаблицаДокумента.Объект = ВТ_Даты.ОбъектРемонта
	|			И ТаблицаДокумента.Показатель = ВТ_Даты.Показатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";	
				   
	 Запрос.УстановитьПараметр("ТаблицаДокумента", ОбъектКопирования.НаработкаОбъектов.Выгрузить( , "НомерСтроки, Объект, Показатель,РаспространятьНаПодчиненных,СтруктураИерархии,Наработка"));
	 Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	 
	 НаработкаОбъектов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	 	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
		ИЛИ ТипЗнч(Основание)=Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда	
		
		Организация			= Основание.Организация;
		Подразделение		= Основание.Подразделение;
		ДокументОснование	= Основание;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);
		
		Если Основание.Свойство("ОбъектРемонта") Тогда
			НоваяСтрока = НаработкаОбъектов.Добавить();
			НоваяСтрока.ДатаРаботыПо = ТекущаяДата();
			НоваяСтрока.Показатель = Основание.Показатель;
			НоваяСтрока.Объект = Основание.ОбъектРемонта;
			НоваяСтрока.СтруктураИерархии = Основание.Иерархия;
		ИначеЕсли Основание.Свойство("ОбъектыРемонта") Тогда
			Для каждого СтрокаОР Из Основание.ОбъектыРемонта Цикл
			    Для каждого СтрокаПоказателя Из СтрокаОР.Показатели Цикл
				    НоваяСтрока = НаработкаОбъектов.Добавить();
					НоваяСтрока.ДатаРаботыПо = ТекущаяДата();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателя);
					НоваяСтрока.Объект = СтрокаОР.ОбъектРемонта;
					НоваяСтрока.СтруктураИерархии = СтрокаПоказателя.Иерархия;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли; 

	КонецЕсли;
	
	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда
		Движения.торо_НаработкаОбъектовРемонта.Записать();
		торо_ГарантийноеОбслуживание.ПроверитьГарантийностьРемонтовПослеНаработки(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУправляемыеБлокировки(РежимЗаписи)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_НаработкаОбъектовРемонта");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = НаработкаОбъектов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта","Объект");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Показатель","Показатель");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_НаработкаОбъектовРемонта");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = НаработкаПодчиненныхОбъектов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта","Объект");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Показатель","Показатель");
		
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.ИсточникДанных = НаработкаПодчиненныхОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта","Объект");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Показатель","Показатель");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.ИсточникДанных = НаработкаОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектРемонта","Объект");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Показатель","Показатель");
		
	КонецЕсли;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.торо_УстановкаПроизвольногоЗначенияНаработки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ПолучитьТаблицуДокументовПроизвольногоЗначенияНаработкиДляБлокировки(Ссылка);
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Ссылка");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ПолучитьТаблицуДокументовПроизвольногоЗначенияНаработкиДляБлокировки(ДокОсн)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_УстановкаПроизвольногоЗначенияНаработки.Ссылка
	               |ИЗ
	               |	Документ.торо_УстановкаПроизвольногоЗначенияНаработки КАК торо_УстановкаПроизвольногоЗначенияНаработки
	               |ГДЕ
	               |	торо_УстановкаПроизвольногоЗначенияНаработки.ДокументОснование = &ДокОсн";
	Запрос.УстановитьПараметр("ДокОсн",ДокОсн);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПроверитьЦельностьНаработкиПриПроведении(Отказ)
	
	// Проверка, что при вводе данного документа не получится интервала с "незаполненным" значением наработки.
	Если НЕ Проведен Тогда
		
		УстановитьУправляемыеБлокировки(РежимЗаписиДокумента.Проведение);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаработкаОбъектов.Объект КАК Объект,
		|	НаработкаОбъектов.Показатель КАК Показатель,
		|	НаработкаОбъектов.ДатаРаботыС КАК ДатаРаботыС
		|ПОМЕСТИТЬ НаработкаОбъектов
		|ИЗ
		|	&НаработкаОбъектов КАК НаработкаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаработкаПодчиненныхОбъектов.Объект КАК Объект,
		|	НаработкаПодчиненныхОбъектов.Показатель КАК Показатель,
		|	НаработкаПодчиненныхОбъектов.ДатаРаботыС КАК ДатаРаботыС
		|ПОМЕСТИТЬ НаработкаПодчиненныхОбъектов
		|ИЗ
		|	&НаработкаПодчиненныхОбъектов КАК НаработкаПодчиненныхОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НаработкаОбъектов.Объект КАК Справочник.торо_ОбъектыРемонта) КАК Объект,
		|	НаработкаОбъектов.Показатель КАК Показатель,
		|	НаработкаОбъектов.ДатаРаботыС КАК ДатаРаботыС
		|ПОМЕСТИТЬ торо_УчетНаработкиОборудованияНаработкаОбъектов
		|ИЗ
		|	НаработкаОбъектов КАК НаработкаОбъектов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НаработкаПодчиненныхОбъектов.Объект КАК Справочник.торо_ОбъектыРемонта),
		|	НаработкаПодчиненныхОбъектов.Показатель,
		|	НаработкаПодчиненныхОбъектов.ДатаРаботыС
		|ИЗ
		|	НаработкаПодчиненныхОбъектов КАК НаработкаПодчиненныхОбъектов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель,
		|	торо_ПериодыНаработкиОРСрезПоследних.Период КАК ДатаКон
		|ПОМЕСТИТЬ ВТ_Даты
		|ИЗ
		|	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(
		|			,
		|			(ОбъектРемонта, Показатель) В
		|					(ВЫБРАТЬ
		|						торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект КАК Объект,
		|						торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель КАК Показатель
		|					ИЗ
		|						торо_УчетНаработкиОборудованияНаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов)
		|				И Регистратор <> &Ссылка) КАК торо_ПериодыНаработкиОРСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта,
		|	Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект КАК Объект,
		|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель КАК Показатель,
		|	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыС КАК ДатаРаботыС,
		|	ЕСТЬNULL(ВТ_Даты.ДатаКон, торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект.ДатаВводаВЭксплуатацию) КАК ДатаКон
		|ИЗ
		|	торо_УчетНаработкиОборудованияНаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Даты КАК ВТ_Даты
		|		ПО торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект = ВТ_Даты.ОбъектРемонта
		|			И торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель = ВТ_Даты.Показатель
		|ГДЕ
		|	ЕСТЬNULL(ВТ_Даты.ДатаКон, торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект.ДатаВводаВЭксплуатацию) <> торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыС";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("НаработкаОбъектов", НаработкаОбъектов);
		Запрос.УстановитьПараметр("НаработкаПодчиненныхОбъектов", НаработкаПодчиненныхОбъектов);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
			ВыборкаНаработокСОшибками = РезультатЗапроса.Выбрать();
			Пока ВыборкаНаработокСОшибками.Следующий() Цикл
				Если ВыборкаНаработокСОшибками.ДатаКон = ВыборкаНаработокСОшибками.Объект.ДатаВводаВЭксплуатацию Тогда
					ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" не зафиксировано значение наработки ""%2"", дата ввода объекта в эксплуатацию: %3,
					|поле ""Дата работы с"" в документе заполнено неверно! Проверьте корректность заполнения данного поля табличной части документа.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаНаработокСОшибками.Объект, ВыборкаНаработокСОшибками.Показатель, ВыборкаНаработокСОшибками.ДатаКон);
				Иначе
					ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" зафиксировано значение наработки ""%2"", на %3,
					|поле ""Дата работы с"" в документе заполнено неверно! Проверьте корректность заполнения данного поля табличной части документа.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаНаработокСОшибками.Объект, ВыборкаНаработокСОшибками.Показатель, ВыборкаНаработокСОшибками.ДатаКон);
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверитьЦельностьНаработкиПриОтменеПроведения(Отказ)

	УстановитьУправляемыеБлокировки(РежимЗаписиДокумента.ОтменаПроведения);
	
	// Проверка, что при вводе данного документа не получится интервала с "незаполненным" значением наработки.
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект КАК Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель КАК Показатель,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо КАК ДатаРаботыПо
	|ПОМЕСТИТЬ НаработкаОбъектов
	|ИЗ
	|	&НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект КАК Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель КАК Показатель,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.ДатаРаботыПо КАК ДатаРаботыПо
	|ПОМЕСТИТЬ НаработкаПодчиненныхОбъектов
	|ИЗ
	|	&НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаработкаОбъектов.Объект КАК Объект,
	|	НаработкаОбъектов.Показатель КАК Показатель,
	|	НаработкаОбъектов.ДатаРаботыПо КАК ДатаРаботыПо
	|ПОМЕСТИТЬ торо_УчетНаработкиОборудованияНаработкаОбъектов
	|ИЗ
	|	НаработкаОбъектов КАК НаработкаОбъектов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаработкаПодчиненныхОбъектов.Объект,
	|	НаработкаПодчиненныхОбъектов.Показатель,
	|	НаработкаПодчиненныхОбъектов.ДатаРаботыПо
	|ИЗ
	|	НаработкаПодчиненныхОбъектов КАК НаработкаПодчиненныхОбъектов";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НаработкаОбъектов", НаработкаОбъектов);
	Запрос.УстановитьПараметр("НаработкаПодчиненныхОбъектов", НаработкаПодчиненныхОбъектов);
	Запрос.Выполнить();
	
	РезультатЗапроса = торо_РаботаСНаработкой.ПолучитьОбъектыРемонтаСНаработкойВБудущем(МВТ, Ссылка);
	Если Не РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		ВыборкаНаработокСОшибками = РезультатЗапроса.Выбрать();
		Пока ВыборкаНаработокСОшибками.Следующий() Цикл
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" зафиксировано значение наработки ""%2"" на более позднюю дату, чем документом: по %3,'") +
			Символы.ПС + Символы.Таб + 
			НСтр("ru = 'Отмена проведения документа невозможна! Для выполнения действий с документом отмените проведение более поздних документов.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаНаработокСОшибками.Объект, ВыборкаНаработокСОшибками.Показатель, ВыборкаНаработокСОшибками.ДатаКон);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ГарантийностьРемонтов()
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии") Тогда
		Возврат;
	КонецЕсли;
	
	Движения.торо_ГарантийностьРемонтов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаОбъектов.Объект КАК ОбъектРемонта,
	               |	ТаблицаОбъектов.Показатель КАК Показатель,
	               |	ТаблицаОбъектов.Наработка КАК Наработка,
	               |	ТаблицаОбъектов.ДатаРаботыПо КАК ДатаРаботыПо
	               |ПОМЕСТИТЬ ВТ_Объекты
	               |ИЗ
	               |	&ТаблицаОбъектов КАК ТаблицаОбъектов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПодчиненныхОбъектов.Объект КАК ОбъектРемонта,
	               |	ТаблицаПодчиненныхОбъектов.Показатель КАК Показатель,
	               |	ТаблицаПодчиненныхОбъектов.Наработка КАК Наработка,
	               |	ТаблицаПодчиненныхОбъектов.ДатаРаботыПо КАК ДатаРаботыПо
	               |ПОМЕСТИТЬ ВТ_ПодчиненныеОбъекты
	               |ИЗ
	               |	&ТаблицаПодчиненныхОбъектов КАК ТаблицаПодчиненныхОбъектов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Объекты.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_Объекты.Показатель КАК Показатель,
	               |	ВТ_Объекты.Наработка КАК Наработка,
	               |	ВТ_Объекты.ДатаРаботыПо КАК ДатаРаботыПо
	               |ПОМЕСТИТЬ ВТ_ВсеОбъекты
	               |ИЗ
	               |	ВТ_Объекты КАК ВТ_Объекты
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ПодчиненныеОбъекты.ОбъектРемонта,
	               |	ВТ_ПодчиненныеОбъекты.Показатель,
	               |	ВТ_ПодчиненныеОбъекты.Наработка,
	               |	ВТ_ПодчиненныеОбъекты.ДатаРаботыПо
	               |ИЗ
	               |	ВТ_ПодчиненныеОбъекты КАК ВТ_ПодчиненныеОбъекты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Показатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_НаработкаОбъектовРемонтаОстатки.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_НаработкаОбъектовРемонтаОстатки.Показатель КАК Показатель,
	               |	торо_НаработкаОбъектовРемонтаОстатки.НаработкаОстаток КАК Наработка
	               |ПОМЕСТИТЬ ВТ_НаработкаОР
	               |ИЗ
	               |	РегистрНакопления.торо_НаработкаОбъектовРемонта.Остатки(
	               |			&ДатаНаработки,
	               |			(ОбъектРемонта, Показатель) В
	               |				(ВЫБРАТЬ
	               |					ВТ_ВсеОбъекты.ОбъектРемонта КАК ОбъектРемонта,
	               |					ВТ_ВсеОбъекты.Показатель КАК Показатель
	               |				ИЗ
	               |					ВТ_ВсеОбъекты КАК ВТ_ВсеОбъекты)) КАК торо_НаработкаОбъектовРемонтаОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Показатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеОбъекты.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ВсеОбъекты.Показатель КАК Показатель,
	               |	ВТ_НаработкаОР.Наработка КАК Наработка,
	               |	ВТ_ВсеОбъекты.ДатаРаботыПо КАК ДатаРаботыПо
	               |ПОМЕСТИТЬ ВТ_ВсеОбъектыСНаработкой
	               |ИЗ
	               |	ВТ_ВсеОбъекты КАК ВТ_ВсеОбъекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаработкаОР КАК ВТ_НаработкаОР
	               |		ПО ВТ_ВсеОбъекты.ОбъектРемонта = ВТ_НаработкаОР.ОбъектРемонта
	               |			И ВТ_ВсеОбъекты.Показатель = ВТ_НаработкаОР.Показатель
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Показатель,
	               |	Наработка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсеОбъектыСНаработкой.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ВсеОбъектыСНаработкой.ДатаРаботыПо КАК ДатаРаботыПо
	               |ПОМЕСТИТЬ ВТ_ОбъектыРемонта
	               |ИЗ
	               |	ВТ_ВсеОбъектыСНаработкой КАК ВТ_ВсеОбъектыСНаработкой
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
	               |		ПО ВТ_ВсеОбъектыСНаработкой.ОбъектРемонта = торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта
	               |			И (торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПроверятьНаработку)
	               |			И ВТ_ВсеОбъектыСНаработкой.Показатель = торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПоказательНаработки
	               |			И ВТ_ВсеОбъектыСНаработкой.Наработка >= торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ЗначениеНаработки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_АктуальныеПлановыеДатыРемонтов.IDРемонта КАК IDРемонта,
	               |	торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_Ремонты
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	               |		ПО (торо_АктуальныеПлановыеДатыРемонтов.ОбъектРемонта = ВТ_ОбъектыРемонта.ОбъектРемонта)
	               |			И (торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала > ВТ_ОбъектыРемонта.ДатаРаботыПо)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_СвернутыеФактическиеДатыРемонтов.IDРемонта,
	               |	торо_СвернутыеФактическиеДатыРемонтов.ОбъектРемонта
	               |ИЗ
	               |	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов КАК торо_СвернутыеФактическиеДатыРемонтов
	               |		ПО (торо_СвернутыеФактическиеДатыРемонтов.ОбъектРемонта = ВТ_ОбъектыРемонта.ОбъектРемонта)
	               |			И (торо_СвернутыеФактическиеДатыРемонтов.ДатаНачала > ВТ_ОбъектыРемонта.ДатаРаботыПо)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ГарантийностьРемонтовСрезПоследних.IDРемонта КАК IDРемонта
	               |ИЗ
	               |	РегистрСведений.торо_ГарантийностьРемонтов.СрезПоследних(
	               |			&ДатаНаработки,
	               |			IDРемонта В
	               |				(ВЫБРАТЬ
	               |					ВТ_Ремонты.IDРемонта КАК IDРемонта
	               |				ИЗ
	               |					ВТ_Ремонты КАК ВТ_Ремонты)) КАК торо_ГарантийностьРемонтовСрезПоследних
	               |ГДЕ
	               |	торо_ГарантийностьРемонтовСрезПоследних.Гарантийный"; 
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", НаработкаОбъектов);
	Запрос.УстановитьПараметр("ТаблицаПодчиненныхОбъектов", НаработкаПодчиненныхОбъектов);
	Запрос.УстановитьПараметр("ДатаНаработки", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.торо_ГарантийностьРемонтов.Добавить();
		Движение.Период = Дата;
		Движение.IDРемонта = Выборка.IDРемонта;
		Движение.Гарантийный = Ложь;
	КонецЦикла;
	
	Движения.торо_ГарантийностьРемонтов.Записать();
	
	торо_ГарантийноеОбслуживание.ПроверитьГарантийностьРемонтовПослеНаработки(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли





