////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем ПредИерархия;

&НаСервере
Перем ТаблицаОРДляСинхронизацииРеквизит;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаГлобальныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	КонецЕсли;
	
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьПоложениеОР",
			Истина);
			
	Элементы.НаработкаОбъектовОтображатьПоложение.Пометка = мОтображатьПоложение;
	Элементы.НаработкаОбъектовПоложение.Видимость = мОтображатьПоложение;
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяСтруктураИерархии");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ (ТипЗнч(Параметры.Основание) = Тип("Структура") И  Параметры.Основание.Свойство("ОбъектРемонта")) Тогда
		
		Объект.НаработкаПодчиненныхОбъектов.Очистить();
		
		Для Каждого СтрокаНаработки ИЗ Объект.НаработкаОбъектов Цикл
			
			ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаНаработки.Объект, СтрокаНаработки.Показатель, Объект.Ссылка);	
			СтрокаНаработки.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
			СтрокаНаработки.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
			СтрокаНаработки.НаработкаСНачалаЭксплуатацииНачало =  ЗначениеНаработки.НаработаноЗначение;
			СтрокаНаработки.НаработкаСНачалаЭксплуатации = СтрокаНаработки.Наработка + СтрокаНаработки.НаработкаСНачалаЭксплуатацииНачало;
			СтрокаНаработки.НовоеЗначение = СтрокаНаработки.Наработка + СтрокаНаработки.СтароеЗначение;
			
			РаспространитьНаПодчиненныхДляТекущейСтроки(СтрокаНаработки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	УстановитьДоступностьЭлементов();
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.НаработкаОбъектов.Выгрузить(), "Объект")
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	мТаблицаСбросаСчетчика.Очистить();

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
		МассивВозврата = Новый Массив;
		ПолучитьТаблицуСбросаСчетчикаНаСервере(Объект.Ссылка,МассивВозврата);
		
		Для Каждого Эл Из МассивВозврата Цикл
			НС = мТаблицаСбросаСчетчика.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Эл);
		КонецЦикла;
				
	КонецЕсли;
	
	ПредИерархия = Неопределено;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(); 	
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПодключитьОбработчикОжидания("ПодборОРОбработчикОжидания",0.5,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Счётчик = 0;
	Для Каждого СтрокаТЧ Из Объект.НаработкаОбъектов Цикл
		Если СтрокаТЧ.ДатаРаботыПо <= СтрокаТЧ.ДатаРаботыС Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Дата работы по"" не может быть меньше или равно ""Даты работы с"".'");
			Поле = СтрШаблон("Объект.НаработкаОбъектов[%1].ДатаРаботыПо", Счётчик);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		Счётчик = Счётчик + 1;
	КонецЦикла;
	
	Если Отказ Тогда
	    Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Синхронизировать", Истина);
	ТаблицаОРДляСинхронизацииРеквизит = Объект.НаработкаОбъектов.Выгрузить(СтруктураОтбора, "Объект, Показатель");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
	    Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТаблицаОРДляСинхронизацииРеквизит Цикл
	    СтруктураПоиска = Новый Структура("Объект, Показатель");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
		НайденныеСтроки = Объект.НаработкаОбъектов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		НайденныеСтроки[0].Синхронизировать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если КлючНазначенияИспользования = "ОбъектыРемонта" 
		И ПараметрыЗаписи.РежимПроведения <> РежимЗаписиДокумента.Запись Тогда
		
		ОповеститьОЗаписиНового(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")) Тогда
		Оповестить("ЗаписанПоказательНаработкаСостояние");
	КонецЕсли;

	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(); 	
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаработкаОбъектов

&НаКлиенте
Процедура НаработкаОбъектовОбъектПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Объект) Тогда
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Показатель) Тогда

			РезультатЗапросаПустой = ЕстьЛиЗаписиПоОРИПоказателю(СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель,мОтображатьПоложение);
			Если РезультатЗапросаПустой Тогда				
				ОткрытьФорму( "Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", СтрокаТабличнойЧасти.Объект),,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
			
		Иначе
			ОткрытьФорму( "Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", СтрокаТабличнойЧасти.Объект),,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложениеОРВстроке(СтрокаТабличнойЧасти, ТекСтруктураИерархии);
	КонецЕсли;

	НаработкаОбъектовПоказательПриИзменении(СтрокаТабличнойЧасти.Показатель);
	
	СтрокаТабличнойЧасти.Показатель = ПредопределенноеЗначение("Справочник.ПараметрыВыработкиОС.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПриАктивизацииСтроки(Элемент)
	ТекСтрокаНаработкаОбъектов = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекПоказатель = ТекСтрокаНаработкаОбъектов.Показатель;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Проведен Тогда
		Отказ = Истина;
	    Возврат;
	КонецЕсли;
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		
		СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора(Истина);
		
		ПараметрыФормы = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
		ПараметрыФормы.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
		ПараметрыФормы.Вставить("ЕстьПараметрыНаработки",	Истина);
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователем",ЭтаФорма);
			
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыФормы,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПередУдалением(Элемент, Отказ)
	
	Если Объект.Проведен Тогда
		Отказ = Истина;
	    Возврат;
	КонецЕсли;
	
	ТекСтрокаНаработкаОбъектов = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекСтрокаНаработкаОбъектов.Объект, ТекПоказатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'");
		
		Если ВыбранноеЗначение.Свойство("ОбъектРемонта") И ЗначениеЗаполнено(ВыбранноеЗначение.ОбъектРемонта) Тогда
			
			Если ВыбранноеЗначение.Свойство("ПоказателиНаработки") Тогда
				ТаблицаПодобранныхОР.Очистить();
				Для каждого СтрокаПоказателя из ВыбранноеЗначение.ПоказателиНаработки Цикл
					НайденныеСтроки = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель",ВыбранноеЗначение.ОбъектРемонта,СтрокаПоказателя.Показатель));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрока = Объект.НаработкаОбъектов.Добавить();
						НоваяСтрока.Объект = ВыбранноеЗначение.ОбъектРемонта;
						НоваяСтрока.Показатель = СтрокаПоказателя.Показатель;
						НоваяСтрока.ДатаРаботыПо = ТекущаяДата();
     					НоваяСтрока.СтруктураИерархии = ТекСтруктураИерархии;
						// изменяем начальное значение наработки	
						ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(НоваяСтрока.Объект, НоваяСтрока.Показатель, Объект.Ссылка);	
						НоваяСтрока.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
						НоваяСтрока.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
						НоваяСтрока.НаработкаСНачалаЭксплуатацииНачало = ЗначениеНаработки.НаработаноЗначение;
						НоваяСтрока.НаработкаСНачалаЭксплуатации = НоваяСтрока.Наработка + НоваяСтрока.НаработкаСНачалаЭксплуатацииНачало;
						НоваяСтрока.НовоеЗначение = НоваяСтрока.Наработка + НоваяСтрока.СтароеЗначение;
						
						Если мОтображатьПоложение Тогда 			
							ЗаполнитьПоложениеОРВстроке(НоваяСтрока, ТекСтруктураИерархии);
						КонецЕсли;
						
						Если ВыбранноеЗначение.ПроставлятьПлановуюНаработку Тогда			
							НС = ТаблицаПодобранныхОР.Добавить();
							НС.Объект = НоваяСтрока.Объект;
							НС.НомерСтроки = ТаблицаПодобранныхОР.Количество();
							НС.ПлановыйГрафикРаботы = торо_РаботаСНаработкой.ПолучитьЗначениеПлановогоГрафикаРаботОбъектаРемонта(НоваяСтрока.Объект);
							НС.Показатель = НоваяСтрока.Показатель;
							НС.ДатаРаботыС = НоваяСтрока.ДатаРаботыС;
							НС.ДатаРаботыПо = НоваяСтрока.ДатаРаботыПо;
						КонецЕсли; 

						Модифицированность = Истина;

					Иначе
						ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение.ОбъектРемонта, СтрокаПоказателя.Показатель);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				КонецЦикла;
				
				Если ВыбранноеЗначение.ПроставлятьПлановуюНаработку Тогда
					ЗаполнитьПлановуюНаработку(Истина, ВыбранноеЗначение.УчитыватьПростои);
				КонецЕсли;
				
			Иначе
				Если НЕ ОбъектРемонтаУжеДобавлен(ВыбранноеЗначение.ОбъектРемонта) Тогда
					НоваяСтрока = Объект.НаработкаОбъектов.Добавить();
					НоваяСтрока.Объект = ВыбранноеЗначение.ОбъектРемонта;
					НоваяСтрока.СтруктураИерархии = ТекСтруктураИерархии;
					
					Если мОтображатьПоложение Тогда 			
						ЗаполнитьПоложениеОРВстроке(НоваяСтрока, ТекСтруктураИерархии);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВыбранноеЗначение.Свойство("СоответствиеОбъектовРемонта") Тогда
			
			ТаблицаПодобранныхОР.Очистить();
			
			Для каждого КлючИЗначение из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл
				ОбъектРемонта = КлючИЗначение.Ключ;
				Для каждого ПоказательНаработки из КлючИЗначение.Значение Цикл
					
					НайденныеСтроки = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель", ОбъектРемонта, ПоказательНаработки));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрока = Объект.НаработкаОбъектов.Добавить();
						НоваяСтрока.Объект = ОбъектРемонта;
						НоваяСтрока.Показатель = ПоказательНаработки;
						НоваяСтрока.ДатаРаботыПо = ?(ЗначениеЗаполнено(ВыбранноеЗначение.ДатаСнятия), ВыбранноеЗначение.ДатаСнятия, ТекущаяДата());
						НоваяСтрока.СтруктураИерархии = ТекСтруктураИерархии;
						// изменяем начальное значение наработки	
						ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(НоваяСтрока.Объект, НоваяСтрока.Показатель, Объект.Ссылка);	
						НоваяСтрока.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
						НоваяСтрока.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
						НоваяСтрока.НаработкаСНачалаЭксплуатации = НоваяСтрока.Наработка + НоваяСтрока.НаработкаСНачалаЭксплуатацииНачало;
						НоваяСтрока.НовоеЗначение = НоваяСтрока.Наработка + НоваяСтрока.СтароеЗначение;
						
						Если мОтображатьПоложение Тогда 			
							ЗаполнитьПоложениеОРВстроке(НоваяСтрока, ТекСтруктураИерархии);
						КонецЕсли;
						
						Если ВыбранноеЗначение.ПроставлятьПлановуюНаработку Тогда			
							НС = ТаблицаПодобранныхОР.Добавить();
							НС.Объект = НоваяСтрока.Объект;
							НС.НомерСтроки = ТаблицаПодобранныхОР.Количество();
							НС.ПлановыйГрафикРаботы = торо_РаботаСНаработкой.ПолучитьЗначениеПлановогоГрафикаРаботОбъектаРемонта(НоваяСтрока.Объект);
							НС.Показатель = НоваяСтрока.Показатель;
							НС.ДатаРаботыС = НоваяСтрока.ДатаРаботыС;
							НС.ДатаРаботыПо = НоваяСтрока.ДатаРаботыПо;
						КонецЕсли; 
						
						Модифицированность = Истина;

					Иначе
						ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта, ПоказательНаработки);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			Если ВыбранноеЗначение.ПроставлятьПлановуюНаработку Тогда
				ЗаполнитьПлановуюНаработку(Истина, ВыбранноеЗначение.УчитыватьПростои);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе

		ОбработкаВыбораОРПользователем(ВыбранноеЗначение, Неопределено);
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
		
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПоказательПриИзменении(Элемент)
	
	НаработкаОбъектовПоказательПриИзмененииСервер(Элементы.НаработкаОбъектов.ТекущаяСтрока);	
	
	НаработкаОбъектовСтароеЗначениеПриИзменении();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик очуществляет пересчет нового значения наработки
// 
Процедура НаработкаОбъектовСтароеЗначениеПриИзменении()
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
	СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.СтароеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовРаспространятьНаПодчиненныхПриИзменении(Элемент)
	
	ТекДанные = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.СтруктураИерархии) Тогда
		СН =  Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
	|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
	|СтруктураИерархии,РаспространятьНаПодчиненных");
		ЗаполнитьЗначенияСвойств(СН,ТекДанные);
		РаспространитьНаПодчиненныхДляТекущейСтроки(СН);	
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнено значение иерархии, на подчиненные объекты из которой необходимо распространить наработку!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ТекДанные.РаспространятьНаПодчиненных = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НаработкаОбъектовПоказательНачалоВыбораЗавершение",ЭтотОбъект,
																				Новый Структура("СтрокаТабличнойЧасти, Элемент", СтрокаТабличнойЧасти, Элемент));
	
	ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", СтрокаТабличнойЧасти.Объект),,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкна);
	
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНаработкаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	СтараяНаработкаОР = СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации - СтрокаТабличнойЧасти.СтароеЗначение;
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
	СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.СтароеЗначение;
	
	МаксимальноеЗначение = ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель);
	
	Если НЕ МаксимальноеЗначение = 0 И СтрокаТабличнойЧасти.НовоеЗначение > МаксимальноеЗначение Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("НаработкаОбъектовНаработкаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("МаксимальноеЗначение, СтараяНаработкаОР, СтрокаТабличнойЧасти", МаксимальноеЗначение, СтараяНаработкаОР, СтрокаТабличнойЧасти)), НСтр("ru = 'Новое значение наработки больше, чем максимальное значение счетчика. При проведении документа будет выполнен сброс счетчика. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	// изменение ранее введенных наработок подчиненных
	НаработкаОбъектовНаработкаПриИзмененииФрагмент(СтараяНаработкаОР, СтрокаТабличнойЧасти);
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНовоеЗначениеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	НовЗнач = СтрокаТабличнойЧасти.НовоеЗначение; 
	Если СтрокаТабличнойЧасти.СтароеЗначение > СтрокаТабличнойЧасти.НовоеЗначение Тогда
		ТекстСообщения = НСтр("ru = 'Новое значение наработки не может быть меньше предыдущего.'"); 
		Поле = СтрШаблон("Объект.НаработкаОбъектов[%1].НовоеЗначение", Объект.НаработкаОбъектов.Индекс(СтрокаТабличнойЧасти));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле);
		СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.СтароеЗначение;
	КонецЕсли; 
	СтрокаТабличнойЧасти.Наработка = СтрокаТабличнойЧасти.НовоеЗначение - СтрокаТабличнойЧасти.СтароеЗначение;	
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Проведен Тогда
	    Возврат;
	КонецЕсли;
	
	СписокДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора(Истина);
	
	ТекущиеДанные = Элементы.НаработкаОбъектов.ТекущиеДанные;	
	
	ПараметрыТекСтрока = Новый Структура;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыТекСтрока.Вставить("ТекСтрока", ТекущиеДанные);
	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыОтбора.Вставить("ТекущаяСтрока", ТекущиеДанные.Объект);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователем",ЭтаФорма,ПараметрыТекСтрока);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбъектОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		ПараметрыФормы = Новый Структура("Ключ, СтруктураИерархии", ТекущиеДанные.Объект, ТекСтруктураИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Подбор(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 		
		ОткрытьФормуПодбораОРИзОснования(Элементы.НаработкаОбъектов);
	Иначе       
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_УчетНаработкиОборудования");
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("ДатаДокумента", Объект.Дата);
		ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		ПараметрыФормы.Вставить("ДатаСнятияПоказателей", Объект.Дата);
		ПараметрыФормы.Вставить("ЕстьПараметрыНаработки", Истина);
					
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
			ПараметрыФормы, Элементы.НаработкаОбъектов, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.НаработкаОбъектовОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Элементы.НаработкаОбъектовПоложение.Видимость = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекСтруктураИерархии);
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлановойНаработке(Команда)
	
	ЗаполнитьПлановуюНаработку(Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВышестоящемуОР(Команда)
	ЗаполнитьПоВышестоящемуОРНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СписокКнопок = НовыЙ СписокЗначений();
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Записать и продолжить");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
		
		ТекстВопроса = НСтр("ru = 'Для синхронизации периодов регистрации наработки данные будут записаны. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СинхронизироватьПослеВопросаОЗаписи", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	Иначе
		СинхронизироватьПослеВопросаОЗаписи(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СинхронизироватьПослеВопросаОЗаписи(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
	    Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	МассивСтрокНаработки = Новый Массив;
	
	Для Каждого Строка Из Объект.НаработкаОбъектов Цикл
		Если Строка.Синхронизировать Тогда
			МассивСтрокНаработки.Добавить(Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, СтруктураИерархии",
			Строка.Объект, Строка.Показатель, Строка.ДатаРаботыС, Строка.ДатаРаботыПо, Строка.СтруктураИерархии));
		Конецесли;
	КонецЦикла;
		
	Если МассивСтрокНаработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = торо_РаботаСНаработкой.ПолучитьСтруктуруДанныхДокументаСинхронизации(МассивСтрокНаработки,Объект.Ссылка);
	
	СтруктураДанных.Вставить("Подразделение",Объект.Подразделение);
	СтруктураДанных.Вставить("Организация",Объект.Организация);
	СтруктураДанных.Вставить("Ответственный",Объект.Ответственный);
	СтруктураДанных.Вставить("ДокументОснование",Объект.Ссылка);
	СтруктураДанных.Вставить("МассивСтрокНаработки",МассивСтрокНаработки);                                                                                             
	СтруктураДанных.Вставить("ИзДокументаУчетНаработки",Истина);

	ФормаДопДокумента = ПолучитьФорму("Документ.торо_УстановкаПроизвольногоЗначенияНаработки.ФормаОбъекта",СтруктураДанных,,Объект.Ссылка);
	ФормаДопДокумента.Модифицированность = Истина;
	ФормаДопДокумента.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СинхронизироватьЗавершение",ЭтотОбъект,Новый Структура("ОбъектДопДокумента",ФормаДопДокумента.Объект));
	ФормаДопДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ФормаДопДокумента.Открыть();
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПоложенияОР()
	
	МассивОР = Новый Массив;
	Для каждого Стр Из Объект.НаработкаОбъектов Цикл
		МассивОР.Добавить(Стр.Объект);		
	КонецЦикла; 
	
	СтруктураПоложений = торо_РаботаСИерархией20.ПолучитьТекущихРодителейВИерархии(МассивОР, ТекСтруктураИерархии,,Истина,Истина);
	
	Для каждого Строка из Объект.НаработкаОбъектов Цикл
		Строка.Положение = СтруктураПоложений[Строка.Объект];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоложениеОРВстроке(ТекущиеДанные, СтруктураИерархии)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Положение = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(ТекущиеДанные.Объект, СтруктураИерархии,,Истина,Истина);
	
КонецПроцедуры

&НаСервере
Функция ЕстьЛиЗаписиПоОРИПоказателю(ОбъектРемонта, Показатель,мОтображатьПоложение = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПервых.Период
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПервых(
	|			,
	|			ОбъектРемонта = &ОбъектРемонта
	|				И Показатель = &Показатель) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПервых";
	
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
	Если РезультатЗакрытия <> Неопределено Тогда
		ТекСтруктураИерархии = РезультатЗакрытия;
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОРПользователем(ОбъектРемонта, ПараметрыВыбораОР) Экспорт
	
	Если ОбъектРемонта = Неопределено Тогда
		Возврат;
	Иначе
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОписаниеОповещенияОЗакрытии2 = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователемЗавершение",ЭтотОбъект,Новый Структура("ОбъектРемонта, ПараметрыВыбораОР",ОбъектРемонта, ПараметрыВыбораОР));  		
		ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", ОбъектРемонта),,,,,ОписаниеОповещенияОЗакрытии2,РежимОткрытияОкна);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаВыбораОРПользователемЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Показатель = РезультатЗакрытия;
	ОбъектРемонта = ДополнительныеПараметры.ОбъектРемонта;
	Если ДополнительныеПараметры.ПараметрыВыбораОР <> Неопределено Тогда
		ПараметрыВыбораОР = ДополнительныеПараметры.ПараметрыВыбораОР;
	КонецЕсли;
	
	Если Показатель <> Неопределено Тогда
		// проверяем, чтобы не было дублей показателей и ОР
		СтрокиНаработкиСредиПодчиненных = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", ОбъектРемонта,Показатель));
		Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта, Показатель, СтрокиНаработкиСредиПодчиненных[0].РодительИерархии);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		СтрокиНаработкиСредиПодчиненных = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", ОбъектРемонта, Показатель));
		Если Не ПараметрыВыбораОР = Неопределено 
			И ПараметрыВыбораОР.Свойство("ТекСтрока") Тогда
			Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта, Показатель);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		Иначе
			Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
				ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта, Показатель);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем предыдущие значения
		
		СтароеЗначение = Неопределено;
		РеальноеЗначение = Неопределено;
		ДатаРаботы = Неопределено;
		
		ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(ОбъектРемонта, Показатель,Объект.Ссылка);	
		Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
			СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
			РеальноеЗначение = ЗначениеНаработки.НаработаноЗначение;
			ДатаРаботы = ЗначениеНаработки.НаработаноДата;
		КонецЕсли;
		
		// заполняем предыдущие значения
		Если Не ПараметрыВыбораОР = Неопределено 
			И ПараметрыВыбораОР.Свойство("ТекСтрока") Тогда
			НовСтрока = ПараметрыВыбораОР.ТекСтрока;
		Иначе
			НовСтрока = Объект.НаработкаОбъектов.Добавить();
		КонецЕсли;
		
		НовСтрока.Объект 	= ОбъектРемонта;
		НовСтрока.Показатель = Показатель;
		НовСтрока.ДатаРаботыС = ДатаРаботы;
		НовСтрока.ДатаРаботыПо                       = Объект.Дата;
		НовСтрока.СтароеЗначение                     = СтароеЗначение;
		НовСтрока.НаработкаСНачалаЭксплуатации       = РеальноеЗначение;
		НовСтрока.НаработкаСНачалаЭксплуатацииНачало = РеальноеЗначение;
		НовСтрока.НовоеЗначение                     = НовСтрока.СтароеЗначение + НовСтрока.Наработка;
		
		НовСтрока.СтруктураИерархии = ТекСтруктураИерархии;
		
		Если мОтображатьПоложение Тогда 	
			ЗаполнитьПоложениеОРВстроке(НовСтрока, ТекСтруктураИерархии);
		КонецЕсли;
		
	    Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлановуюНаработку(ПроверятьПоПодобраннымОбъектам, УчитыватьПростои)
	
	МассивСтрок = ПроверитьЗаполненностьГрафика(ПроверятьПоПодобраннымОбъектам, УчитыватьПростои);
	
	Если МассивСтрок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		
		СтрокаНомеровСтрок = "";
		СтрокаОбъектовРемонта = "";
		Для Каждого Строка Из МассивСтрок Цикл
			СтрокаНомеровСтрок = ?(СтрокаНомеровСтрок="", "", СтрокаНомеровСтрок + ", ") + Строка.НомерСтроки;
			СтрокаОбъектовРемонта = ?(СтрокаОбъектовРемонта="", "", СтрокаОбъектовРемонта + ", ") + Строка.Объект;
		КонецЦикла;
		
		ШаблонВопроса = НСтр("ru = 'Для объектов ремонта %1 (строки с номерами %2) не заполнен график работы оборудования.
									|Выполнить расчет?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, СтрокаОбъектовРемонта, СтрокаНомеровСтрок);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПлановуюНаработкуЗавершение", ЭтотОбъект, Новый Структура("ПроверятьПоПодобраннымОбъектам, УчитыватьПростои", ПроверятьПоПодобраннымОбъектам, УчитыватьПростои)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьПоПлановойНаработкеНаСервере(ПроверятьПоПодобраннымОбъектам, УчитыватьПростои);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлановуюНаработкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    УчитыватьПростои = ДополнительныеПараметры.УчитыватьПростои;
	 ПроверятьПоПодобраннымОбъектам = ДополнительныеПараметры.ПроверятьПоПодобраннымОбъектам;
	 
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоПлановойНаработкеНаСервере(ПроверятьПоПодобраннымОбъектам, УчитыватьПростои);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НаработкаОбъектовПоказательПриИзмененииСервер(ТекСтрока) 
	СтрокаТабличнойЧасти = Объект.НаработкаОбъектов.НайтиПоИдентификатору(ТекСтрока);
	
	// проверяем, не введена ли уже строка для нового показателя наработки
	СтрокиНаработкиСредиПодчиненных = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель, СтрокиНаработкиСредиПодчиненных[0].РодительИерархии);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		СтрокаТабличнойЧасти.Показатель = ТекПоказатель;
		Возврат;
	КонецЕсли;
	
	СтрокиНаработкиСредиПодчиненных = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", СтрокаТабличнойЧасти.Объект,СтрокаТабличнойЧасти.Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		СтрокаТабличнойЧасти.Показатель = ТекПоказатель;
		Возврат;
	КонецЕсли;
	
	// изменяем начальное значение наработки	
	ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель, Объект.Ссылка);	
	Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
		СтрокаТабличнойЧасти.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
		СтрокаТабличнойЧасти.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
	КонецЕсли;
		
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",СтрокаТабличнойЧасти.Объект, ТекПоказатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;

	СН = Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
	|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
	|СтруктураИерархии,РаспространятьНаПодчиненных");

	ЗаполнитьЗначенияСвойств(СН,СтрокаТабличнойЧасти);
	РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
	
КонецПроцедуры

&НаСервере
Процедура РаспространитьНаПодчиненныхДляТекущейСтроки(ТекСтрокаНаработкаОбъектов)
	
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мОтказ = Ложь;
	
	флагРаспространятьНаПодчиненных = ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных;
	Если флагРаспространятьНаПодчиненных Тогда
						
		ТаблицаИерархииОР = торо_РаботаСИерархией20.ПолучитьТаблицуИерархии(ТекСтрокаНаработкаОбъектов.СтруктураИерархии,Объект.Дата);
		ПредИерархия = ТекСтрокаНаработкаОбъектов.СтруктураИерархии;
		
		ТаблицаПодчиненныхОР = торо_РаботаСНаработкой.ПолучитьЗависимыеОР(ТаблицаИерархииОР, ТекСтрокаНаработкаОбъектов.Объект, Неопределено, ТекСтрокаНаработкаОбъектов.ДатаРаботыС, ТекСтрокаНаработкаОбъектов.ДатаРаботыПо, ТекСтрокаНаработкаОбъектов.Показатель);
		
		Для Каждого СтрокаСНаработкой Из Объект.НаработкаОбъектов Цикл
			Если ТаблицаПодчиненныхОР.НайтиСтроки(Новый Структура("ОбъектИерархии,Показатель", СтрокаСНаработкой.Объект,СтрокаСНаработкой.Показатель)).Количество() = 0 Тогда
				Продолжить;
			Иначе
				ШаблонСообщения = НСтр("ru = 'Невозможно распространить наработку на подчиненные объекты ремонта. Объект ремонта %1 встречается повторно среди подчиненных объектов ремонта объекта %2.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСНаработкой.Объект,ТекСтрокаНаработкаОбъектов.Объект);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, мОтказ);
			КонецЕсли;
		КонецЦикла; 
		
		ТабЗначенийНаработки = торо_РаботаСНаработкой.ТекущееЗначениеНаработкиТаблица(ТаблицаПодчиненныхОР, Объект.Ссылка);
		
		НеобходимаСинхронизация = Ложь;
		
		Если Не мОтказ Тогда
			
			Для Каждого СтрПодчиненнаяНаработка Из ТабЗначенийНаработки Цикл
				Если СтрПодчиненнаяНаработка.НаработаноДата <> СтрПодчиненнаяНаработка.ДатаНачала Тогда
					НеобходимаСинхронизация = Истина;
					СтрокаТаблицыНаработки = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель",ТекСтрокаНаработкаОбъектов.Объект,ТекСтрокаНаработкаОбъектов.Показатель))[0];
					СтрокаТаблицыНаработки.Синхронизировать = Истина;
					СтрокаТаблицыНаработки.РаспространятьНаПодчиненных = Ложь; 
					мОтказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НеобходимаСинхронизация Тогда
				ТекстСообщения = НСтр("ru = 'Для распространения наработки на подчиненные ОР необходимо выполнить синхронизацию периодов регистрации наработки!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если Не мОтказ Тогда
				
				СтруктураДляПередачи = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, Наработка");
				ЗаполнитьЗначенияСвойств(СтруктураДляПередачи, ТекСтрокаНаработкаОбъектов);
				торо_РаботаСНаработкой.РаспространитьНаработкуНаПодчиненныхДляТекСтроки(СтруктураДляПередачи, ТабЗначенийНаработки, ТаблицаПодчиненныхОР, Объект);
				
			КонецЕсли;
		КонецЕсли;
		
		Если мОтказ Тогда
			СтрокаТаблицыНаработки = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель",ТекСтрокаНаработкаОбъектов.Объект,ТекСтрокаНаработкаОбъектов.Показатель))[0];
			СтрокаТаблицыНаработки.РаспространятьНаПодчиненных = Ложь;
		КонецЕсли;
	Иначе
		СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии,Показатель",ТекСтрокаНаработкаОбъектов.Объект,ТекСтрокаНаработкаОбъектов.Показатель));
		
		Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
			Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьТаблицуСбросаСчетчикаНаСервере(Ссылка,МассивВозврата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.НовоеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.СтароеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Наработка
	|ИЗ
	|	Документ.торо_УчетНаработкиОборудования.НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект = торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта
	|			И торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель = торо_МаксимальныеЗначенияНаработкиОР.Показатель
	|ГДЕ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0),
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.НовоеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.СтароеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Наработка
	|ИЗ
	|	Документ.торо_УчетНаработкиОборудования.НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект = торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта
	|			И торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель = торо_МаксимальныеЗначенияНаработкиОР.Показатель
	|ГДЕ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.НовоеЗначение < Выборка.СтароеЗначение Тогда
			Если НЕ Выборка.МаксимальноеЗначение = 0 Тогда
				
				КоличествоСбросовСчетчика = Цел((Выборка.СтароеЗначение + Выборка.Наработка) / Выборка.МаксимальноеЗначение);
				НовоеЗначениеАбсолютное = Выборка.СтароеЗначение + Выборка.Наработка;
				
				МассивВозврата.Добавить(Новый Структура("ОбъектРемонта,Показатель,ДатаработыПо,КоличествоСбросовСчетчика,НовоеЗначениеАбсолютное,Наработка,НовоеЗначение",
				Выборка.Объект,Выборка.Показатель,Выборка.ДатаработыПо,КоличествоСбросовСчетчика,НовоеЗначениеАбсолютное,Выборка.Наработка,Выборка.НовоеЗначение));
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПоказательНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Показатель = РезультатЗакрытия;
	СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если НЕ Показатель = Неопределено Тогда
		СтрокаТабличнойЧасти.Показатель = Показатель;
		НаработкаОбъектовПоказательПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНаработкаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МаксимальноеЗначение = ДополнительныеПараметры.МаксимальноеЗначение;
    СтараяНаработкаОР = ДополнительныеПараметры.СтараяНаработкаОР;
    СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;     
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        КоличествоСбросовСчетчика = Цел(СтрокаТабличнойЧасти.НовоеЗначение / МаксимальноеЗначение);
        НовоеЗначениеАбсолютное = СтрокаТабличнойЧасти.НовоеЗначение;
        СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.НовоеЗначение - КоличествоСбросовСчетчика * МаксимальноеЗначение;
    Иначе
        СтрокаТабличнойЧасти.НовоеЗначение = 0;
        СтрокаТабличнойЧасти.Наработка = 0;
        Возврат;
    КонецЕсли;
    
    НаработкаОбъектовНаработкаПриИзмененииФрагмент(СтараяНаработкаОР, СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНаработкаПриИзмененииФрагмент(Знач СтараяНаработкаОР, Знач СтрокаТабличнойЧасти)
    
	НаработкаОбъектовНаработкаПриИзмененииФрагментНаСервере(СтараяНаработкаОР,СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Наработка);

КонецПроцедуры

&НаСервере
Процедура НаработкаОбъектовНаработкаПриИзмененииФрагментНаСервере(Знач СтараяНаработкаОР, Знач ТекОбъектРемонта, ТекНаработка)
	Перем Коэффициент, МаксЗнач, СтароеЗначение, СтрокаПодчиненного, СтрокиПодчиненныхНаИзменение;
	
	СтрокиПодчиненныхНаИзменение = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекОбъектРемонта, ТекПоказатель));
	
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаИзменение Цикл
        СтароеЗначение = СтрокаПодчиненного.Наработка;
        Коэффициент = ?(СтароеЗначение = СтараяНаработкаОР,1,СтароеЗначение / СтараяНаработкаОР);
        СтрокаПодчиненного.Наработка = ТекНаработка * Коэффициент;
        СтрокаПодчиненного.НаработкаСНачалаЭксплуатации = СтрокаПодчиненного.НаработкаСНачалаЭксплуатацииНачало + СтрокаПодчиненного.Наработка;
        
        МаксЗнач = ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(СтрокаПодчиненного.Объект, СтрокаПодчиненного.Показатель);
        Если СтрокаПодчиненного.Наработка < МаксЗнач Тогда
            СтрокаПодчиненного.НовоеЗначение = СтрокаПодчиненного.Наработка;
        Иначе
            СтрокаПодчиненного.НовоеЗначение = СтрокаПодчиненного.Наработка - МаксЗнач;
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(ОбъектРемонта, Показатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,0) КАК МаксимальноеЗначение
		|ИЗ
		|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
		|ГДЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта
		|	И торо_МаксимальныеЗначенияНаработкиОР.Показатель = &Показатель";

	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Показатель", Показатель);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МаксимальноеЗначение;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМаксимальныеЗначенияНаработкиДляОбъектовДокумента()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель
	|ПОМЕСТИТЬ НаработкаОбъектов
	|ИЗ
	|	&НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|ПОМЕСТИТЬ НаработкаПодчиненныхОбъектов
	|ИЗ
	|	&НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель
	|ПОМЕСТИТЬ ОбъектыИПоказатели
	|ИЗ
	|	НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|ИЗ
	|	НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыИПоказатели.Объект,
	|	ОбъектыИПоказатели.Показатель,
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение
	|ИЗ
	|	ОбъектыИПоказатели КАК ОбъектыИПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО (торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = ОбъектыИПоказатели.Объект)
	|			И (торо_МаксимальныеЗначенияНаработкиОР.Показатель = ОбъектыИПоказатели.Показатель)");

	Запрос.УстановитьПараметр("НаработкаОбъектов", Объект.НаработкаОбъектов.Выгрузить(, "Объект, Показатель"));
	Запрос.УстановитьПараметр("НаработкаПодчиненныхОбъектов", Объект.НаработкаПодчиненныхОбъектов.Выгрузить(, "Объект, Показатель"));

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьГрафика(ПроверятьПоПодобраннымОбъектам = Ложь, УчитыватьПростои = Ложь) 
	
	Если ПроверятьПоПодобраннымОбъектам Тогда
		ТаблицаДляПроверки = ТаблицаПодобранныхОР.Выгрузить();
	Иначе
		ТаблицаДляПроверки = Объект.НаработкаОбъектов.Выгрузить();
	КонецЕсли;
	
	Если ТаблицаДляПроверки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНаработкиОбъектов.НомерСтроки,
	|	ТаблицаНаработкиОбъектов.ДатаРаботыПо,
	|	ВЫРАЗИТЬ(ТаблицаНаработкиОбъектов.Объект КАК Справочник.торо_ОбъектыРемонта) КАК Объект
	|ПОМЕСТИТЬ ТабДок
	|ИЗ
	|	&ТаблицаНаработкиОбъектов КАК ТаблицаНаработкиОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Объект,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаРаботыПо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаРаботыПо, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	КОНЕЦ КАК ДатаРаботыПо,
	|	ТаблицаДокумента.Объект.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТабДок КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ВЫРАЗИТЬ(КалендарныеГрафики.ДатаГрафика КАК ДАТА) КАК Дата,
	|	ТаблицаДокумента.Объект
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО ТаблицаДокумента.ПлановыйГрафикРаботы = КалендарныеГрафики.Календарь
	|			И ТаблицаДокумента.ДатаРаботыПо = КалендарныеГрафики.ДатаГрафика";

	Запрос.УстановитьПараметр("ТаблицаНаработкиОбъектов", ТаблицаДляПроверки);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	МассивСтрокТЗ = Запрос.Выполнить().Выгрузить().НайтиСтроки(Новый Структура("Дата", Null));
	Массив = Новый Массив;
	Для каждого Строка Из МассивСтрокТЗ Цикл
		Массив.Добавить(Новый Структура("НомерСтроки, Объект", Строка.НомерСтроки, Строка.Объект));
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПлановойНаработкеНаСервере(ПоПодобраннымОбъектам = Ложь, УчитыватьПростои = Истина)
	
	Если ПоПодобраннымОбъектам Тогда
		ТаблицаДляРассчета = ТаблицаПодобранныхОР.Выгрузить();
	Иначе
		ТаблицаДляРассчета = Объект.НаработкаОбъектов.Выгрузить();
	КонецЕсли;
	
	Если ТаблицаДляРассчета = Неопределено Тогда
		ОчиститьЗначениеНаработки();
	КонецЕсли;
	
	ТаблицаДанных = торо_РаботаСНаработкой.РассчитатьПлановуюНаработку(ТаблицаДляРассчета, Объект.Дата, УчитыватьПростои);	
	ТаблицаДанных.Свернуть("ОбъектРемонта, ДатаРаботыС, ДатаРаботыПо, Показатель", "ФактическаяНаработка");
	
	ТабМаксЗначений = ПолучитьМаксимальныеЗначенияНаработкиДляОбъектовДокумента();
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		МассивСтрокТЧ = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо",
												СтрокаТЗ.ОбъектРемонта, СтрокаТЗ.Показатель, СтрокаТЗ.ДатаРаботыС, СтрокаТЗ.ДатаРаботыПо));
												
		МаксЗначение = 0;
		НайденныеСтрокиМаксЗнач = ТабМаксЗначений.НайтиСтроки(Новый Структура("Объект, Показатель", СтрокаТЗ.ОбъектРемонта, СтрокаТЗ.Показатель));
		Если НайденныеСтрокиМаксЗнач.Количество() > 0 Тогда
			МаксЗначение = НайденныеСтрокиМаксЗнач[0].МаксимальноеЗначение;
		КонецЕсли;
		
		Для Каждого ЭлементМассива Из МассивСтрокТЧ Цикл
			
			ЭлементМассива.Наработка    = СтрокаТЗ.ФактическаяНаработка;
			ЭлементМассива.ДатаРаботыПо = ?(ЗначениеЗаполнено(СтрокаТЗ.ДатаРаботыПо),СтрокаТЗ.ДатаРаботыПо,Объект.Дата);
			ЭлементМассива.НаработкаСНачалаЭксплуатации = ЭлементМассива.Наработка + 
																ЭлементМассива.НаработкаСНачалаЭксплуатацииНачало;
			ЭлементМассива.НовоеЗначение = ЭлементМассива.Наработка + ЭлементМассива.СтароеЗначение;
			Если МаксЗначение <> 0 И ЭлементМассива.НовоеЗначение > МаксЗначение Тогда
				КоличествоСбросовСчетчика = Цел(ЭлементМассива.НовоеЗначение / МаксЗначение);
				ЭлементМассива.НовоеЗначение = ЭлементМассива.НовоеЗначение - КоличествоСбросовСчетчика * МаксЗначение;
				
				ШаблонСообщения = НСтр("ru = 'Наработка по объекту %1 и показателю %2 превысила максимальное значение. Будет выполнен сброс счетчика.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭлементМассива.Объект, ЭлементМассива.Показатель);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;			
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Для Каждого СтрокаНаработка Из Объект.НаработкаОбъектов Цикл
		// Изменение ранее введенных наработок подчиненных.
		// Удаление ранее введенных наработок подчиненных.
		СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",СтрокаНаработка.Объект, СтрокаНаработка.Показатель));
		Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
			Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
		КонецЦикла;
		
		СН = Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
		|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
		|СтруктураИерархии,РаспространятьНаПодчиненных");
		
		ЗаполнитьЗначенияСвойств(СН,СтрокаНаработка);
		РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗначениеНаработки()
	
	Для Каждого СтрокаТЧ Из Объект.НаработкаОбъектов Цикл
		СтрокаТЧ.Наработка = 0;
		СтрокаТЧ.НовоеЗначение = СтрокаТЧ.СтароеЗначение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВышестоящемуОРНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
	               |	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК РодительИерархии,
	               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии КАК СтруктураИерархии
	               |ПОМЕСТИТЬ ТаблицаСтруктураИерархии
	               |ИЗ
	               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, ) КАК торо_ИерархическиеСтруктурыОР
	               |ГДЕ
	               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
	               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
	               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
	               |ИЗ
	               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Объект КАК Объект,
	               |	ТаблицаДанных.Показатель КАК Показатель,
	               |	ТаблицаДанных.ДатаРаботыС КАК ДатаРаботыС,
	               |	ТаблицаДанных.ДатаРаботыПо КАК ДатаРаботыПо,
	               |	ТаблицаДанных.СтруктураИерархии КАК СтруктураИерархии
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	&ТаблицаДанных КАК ТаблицаДанных
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Объект КАК Объект,
	               |	ТаблицаДанных.ДатаРаботыС КАК ДатаРаботыС,
	               |	ТаблицаДанных.ДатаРаботыПо КАК ДатаРаботыПо,
	               |	ТаблицаДанных.Показатель КАК Показатель,
	               |	ЕСТЬNULL(ТаблицаСтруктураИерархии.РодительИерархии, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаСРодителем
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктураИерархии КАК ТаблицаСтруктураИерархии
	               |		ПО ТаблицаДанных.СтруктураИерархии = ТаблицаСтруктураИерархии.СтруктураИерархии.Ссылка
	               |			И ТаблицаДанных.Объект = ТаблицаСтруктураИерархии.ОбъектИерархии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСРодителем.Объект КАК Объект,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСРодителем.ДатаРаботыС > торо_НаработкаОбъектовРемонта.ДатаНач
	               |			ТОГДА ТаблицаСРодителем.ДатаРаботыС
	               |		ИНАЧЕ торо_НаработкаОбъектовРемонта.ДатаНач
	               |	КОНЕЦ КАК НачалоИнтервала,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСРодителем.ДатаРаботыПо < торо_НаработкаОбъектовРемонта.ДатаКон
	               |			ТОГДА ТаблицаСРодителем.ДатаРаботыПо
	               |		ИНАЧЕ торо_НаработкаОбъектовРемонта.ДатаКон
	               |	КОНЕЦ КАК КонецИнтервала,
	               |	ТаблицаСРодителем.Показатель КАК Показатель,
	               |	торо_НаработкаОбъектовРемонта.Наработка / ВЫБОР
	               |		КОГДА торо_НаработкаОбъектовРемонта.ДатаНач = торо_НаработкаОбъектовРемонта.ДатаКон
	               |				ИЛИ торо_НаработкаОбъектовРемонта.ДатаКон = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ИЛИ торо_НаработкаОбъектовРемонта.ДатаНач = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА 1
	               |		ИНАЧЕ РАЗНОСТЬДАТ(торо_НаработкаОбъектовРемонта.ДатаНач, торо_НаработкаОбъектовРемонта.ДатаКон, СЕКУНДА)
	               |	КОНЕЦ КАК СредняяНаработка,
	               |	ТаблицаСРодителем.ДатаРаботыС КАК ДатаРаботыС,
	               |	ТаблицаСРодителем.РодительИерархии КАК РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаИнтервалов
	               |ИЗ
	               |	ТаблицаСРодителем КАК ТаблицаСРодителем
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	               |		ПО ТаблицаСРодителем.РодительИерархии = торо_НаработкаОбъектовРемонта.ОбъектРемонта
	               |			И (ТаблицаСРодителем.ДатаРаботыС <= торо_НаработкаОбъектовРемонта.ДатаНач
	               |					И ТаблицаСРодителем.ДатаРаботыПо > торо_НаработкаОбъектовРемонта.ДатаНач
	               |				ИЛИ ТаблицаСРодителем.ДатаРаботыС < торо_НаработкаОбъектовРемонта.ДатаКон
	               |					И ТаблицаСРодителем.ДатаРаботыПо > торо_НаработкаОбъектовРемонта.ДатаНач)
	               |ГДЕ
	               |	торо_НаработкаОбъектовРемонта.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтервалов.Объект КАК Объект,
	               |	ТаблицаИнтервалов.НачалоИнтервала КАК НачалоИнтервала,
	               |	ТаблицаИнтервалов.КонецИнтервала КАК КонецИнтервала,
	               |	ТаблицаИнтервалов.Показатель КАК Показатель,
	               |	ТаблицаИнтервалов.СредняяНаработка КАК СредняяНаработка,
	               |	ТаблицаИнтервалов.ДатаРаботыС КАК ДатаРаботыС,
	               |	торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период КАК Период,
	               |	ТаблицаИнтервалов.РодительИерархии КАК РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаИнтерваловСДатамиПараметровПересчета
	               |ИЗ
	               |	ТаблицаИнтервалов КАК ТаблицаИнтервалов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкаРегистрацииНаработкиЗависимыхОР КАК торо_НастройкаРегистрацииНаработкиЗависимыхОР
	               |		ПО ТаблицаИнтервалов.Объект = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ЗависимыйОбъектРемонта
	               |			И ТаблицаИнтервалов.РодительИерархии = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ОбъектРемонта
	               |			И ТаблицаИнтервалов.Показатель = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ПараметрНаработки
	               |			И ТаблицаИнтервалов.НачалоИнтервала <= торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период
	               |			И ТаблицаИнтервалов.КонецИнтервала > торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Объект КАК Объект,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.НачалоИнтервала КАК НачалоИнтервала,
	               |	ЕСТЬNULL(ТаблицаИнтерваловСДатамиПараметровПересчета.Период, ТаблицаИнтерваловСДатамиПараметровПересчета.КонецИнтервала) КАК КонецИнтервала,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Показатель КАК Показатель,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.СредняяНаработка КАК СредняяНаработка,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.ДатаРаботыС КАК ДатаРаботыС,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.РодительИерархии КАК РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаИнтерваловСУчетомПараметровПересчета
	               |ИЗ
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета КАК ТаблицаИнтерваловСДатамиПараметровПересчета
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Объект,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Период,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.КонецИнтервала,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Показатель,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.СредняяНаработка,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.ДатаРаботыС,
	               |	NULL
	               |ИЗ
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета КАК ТаблицаИнтерваловСДатамиПараметровПересчета
	               |ГДЕ
	               |	НЕ ТаблицаИнтерваловСДатамиПараметровПересчета.Период ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.Объект КАК Объект,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.НачалоИнтервала КАК НачалоИнтервала,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.КонецИнтервала КАК КонецИнтервала,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.Показатель КАК Показатель,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.СредняяНаработка КАК СредняяНаработка,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.ДатаРаботыС КАК ДатаРаботыС,
	               |	торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период КАК Период,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.РодительИерархии КАК РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаКоэфициентовПересчета
	               |ИЗ
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета КАК ТаблицаИнтерваловСУчетомПараметровПересчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкаРегистрацииНаработкиЗависимыхОР КАК торо_НастройкаРегистрацииНаработкиЗависимыхОР
	               |		ПО ТаблицаИнтерваловСУчетомПараметровПересчета.Объект = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ЗависимыйОбъектРемонта
	               |			И ТаблицаИнтерваловСУчетомПараметровПересчета.РодительИерархии = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ОбъектРемонта
	               |			И ТаблицаИнтерваловСУчетомПараметровПересчета.Показатель = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ПараметрНаработки
	               |			И ТаблицаИнтерваловСУчетомПараметровПересчета.НачалоИнтервала >= торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаКоэфициентовПересчета.Объект КАК Объект,
	               |	ТаблицаКоэфициентовПересчета.НачалоИнтервала КАК НачалоИнтервала,
	               |	ТаблицаКоэфициентовПересчета.КонецИнтервала КАК КонецИнтервала,
	               |	ТаблицаКоэфициентовПересчета.Показатель КАК Показатель,
	               |	ТаблицаКоэфициентовПересчета.СредняяНаработка КАК СредняяНаработка,
	               |	ТаблицаКоэфициентовПересчета.ДатаРаботыС КАК ДатаРаботыС,
	               |	МАКСИМУМ(ТаблицаКоэфициентовПересчета.Период) КАК ДатаСреза,
	               |	ТаблицаКоэфициентовПересчета.РодительИерархии КАК РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаДатСрезаКоэфициентовПересчета
	               |ИЗ
	               |	ТаблицаКоэфициентовПересчета КАК ТаблицаКоэфициентовПересчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаКоэфициентовПересчета.Объект,
	               |	ТаблицаКоэфициентовПересчета.НачалоИнтервала,
	               |	ТаблицаКоэфициентовПересчета.КонецИнтервала,
	               |	ТаблицаКоэфициентовПересчета.Показатель,
	               |	ТаблицаКоэфициентовПересчета.ДатаРаботыС,
	               |	ТаблицаКоэфициентовПересчета.СредняяНаработка,
	               |	ТаблицаКоэфициентовПересчета.РодительИерархии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДатСрезаКоэфициентовПересчета.Объект КАК Объект,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.НачалоИнтервала КАК НачалоИнтервала,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.КонецИнтервала КАК КонецИнтервала,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.Показатель КАК Показатель,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.СредняяНаработка КАК СредняяНаработка,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.ДатаРаботыС КАК ДатаРаботыС,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.ДатаСреза КАК ДатаСреза,
	               |	ЕСТЬNULL(торо_НастройкаРегистрацииНаработкиЗависимыхОР.КоэффициентПересчета, 1) КАК КоэффициентПересчета
	               |ПОМЕСТИТЬ ТаблицаИнтерваловСКоэффициентамиПересчета
	               |ИЗ
	               |	ТаблицаДатСрезаКоэфициентовПересчета КАК ТаблицаДатСрезаКоэфициентовПересчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкаРегистрацииНаработкиЗависимыхОР КАК торо_НастройкаРегистрацииНаработкиЗависимыхОР
	               |		ПО ТаблицаДатСрезаКоэфициентовПересчета.Объект = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ЗависимыйОбъектРемонта
	               |			И ТаблицаДатСрезаКоэфициентовПересчета.РодительИерархии = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ОбъектРемонта
	               |			И ТаблицаДатСрезаКоэфициентовПересчета.Показатель = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ПараметрНаработки
	               |			И ТаблицаДатСрезаКоэфициентовПересчета.ДатаСреза = торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтервалов.Объект КАК Объект,
	               |	МИНИМУМ(ТаблицаИнтервалов.НачалоИнтервала) КАК НачалоИнтервала,
	               |	МАКСИМУМ(ТаблицаИнтервалов.КонецИнтервала) КАК КонецИнтервала,
	               |	ТаблицаИнтервалов.Показатель КАК Показатель,
	               |	СУММА(ТаблицаИнтервалов.СредняяНаработка * ТаблицаИнтервалов.КоэффициентПересчета * РАЗНОСТЬДАТ(ТаблицаИнтервалов.НачалоИнтервала, ТаблицаИнтервалов.КонецИнтервала, СЕКУНДА)) КАК Наработка,
	               |	ТаблицаИнтервалов.ДатаРаботыС КАК ДатаРаботыС
	               |ИЗ
	               |	ТаблицаИнтерваловСКоэффициентамиПересчета КАК ТаблицаИнтервалов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаИнтервалов.Объект,
	               |	ТаблицаИнтервалов.Показатель,
	               |	ТаблицаИнтервалов.ДатаРаботыС";
				   
				   
				   
	Запрос.УстановитьПараметр("ТаблицаДанных", Объект.НаработкаОбъектов.Выгрузить());
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	ОчиститьЗначениеНаработки();
	
	ТаблицаДанныхДляРасчетаПоПлановойНаработке = Объект.НаработкаОбъектов.Выгрузить().СкопироватьКолонки();
	
	// Заполняем отдельно, т.к. в строках могут быть разные иерархии.
	Соответствие = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Объект.НаработкаОбъектов Цикл
		РодительИерархии =  торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(СтрокаТЧ.Объект, СтрокаТЧ.СтруктураИерархии, Объект.Дата);
		Соответствие.Вставить(СтрокаТЧ.Объект, РодительИерархии);
		
		Если ТипЗнч(РодительИерархии) <> Тип("Строка") И НЕ РодительИерархии.ЭтоГруппа Тогда
			МассивСтрокРезультата = ТаблицаРезультатов.НайтиСтроки(Новый Структура("Объект, Показатель, ДатаРаботыС", СтрокаТЧ.Объект, СтрокаТЧ.Показатель, СтрокаТЧ.ДатаРаботыС));
			
			Если Не МассивСтрокРезультата.Количество() = 0 Тогда
				СтрокаТЧ.Наработка = МассивСтрокРезультата[0].Наработка;
				СтрокаТЧ.НаработкаСНачалаЭксплуатации = СтрокаТЧ.Наработка + 
				СтрокаТЧ.НаработкаСНачалаЭксплуатацииНачало;
				СтрокаТЧ.НовоеЗначение = СтрокаТЧ.Наработка + СтрокаТЧ.СтароеЗначение;
				
				ДатаНачалаИнтервала = МассивСтрокРезультата[0].КонецИнтервала;
				Если ДатаНачалаИнтервала <> СтрокаТЧ.ДатаРаботыПо Тогда
					НС = ТаблицаДанныхДляРасчетаПоПлановойНаработке.Добавить();
					НС.ДатаРаботыС = ДатаНачалаИнтервала;
					НС.ДатаРаботыПо = СтрокаТЧ.ДатаРаботыПо;
					НС.Объект = РодительИерархии;
					НС.Показатель = СтрокаТЧ.Показатель;
				КонецЕсли;
			Иначе
				НС = ТаблицаДанныхДляРасчетаПоПлановойНаработке.Добавить();
				НС.ДатаРаботыС = СтрокаТЧ.ДатаРаботыС;
				НС.ДатаРаботыПо = СтрокаТЧ.ДатаРаботыПо;
				НС.Объект = РодительИерархии;
				НС.Показатель = СтрокаТЧ.Показатель;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаДанных = ПолучитьИнтервалыРасчетаПлановойНаработки(ТаблицаДанныхДляРасчетаПоПлановойНаработке, Объект.Дата);
	
	ВариантыПериодов = ТаблицаДанных.Скопировать(,"ПериодПлановойНаработки");
	ВариантыПериодов.Свернуть("ПериодПлановойНаработки",);
	Для Каждого Период Из ВариантыПериодов Цикл
		ТаблицаСПериодом = ТаблицаДанных.Скопировать(Новый Структура("ПериодПлановойНаработки",Период.ПериодПлановойНаработки));
		ТаблицаСНаработкой = торо_РаботаСНаработкой.РассчитатьВремяРаботыОРСПериодами(ТаблицаСПериодом,Период.ПериодПлановойНаработки);
		Для Каждого ЗаписьСНаработкой Из ТаблицаСНаработкой Цикл
			МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ОбъектРемонта,ДатаНачала,ДатаОкончания",
			ЗаписьСНаработкой.ОбъектРемонта,ЗаписьСНаработкой.ДатаНачала,ЗаписьСНаработкой.ДатаОкончания));
			
			
			Для Каждого Строка Из МассивСтрок Цикл
				Строка.ФактическаяНаработка = Строка.ФактическаяНаработка 
				+ ЗаписьСНаработкой.Периодов / Строка.ПродолжительностьПериодаПлановойНаработки 
				* Строка.КоэффициентИспользованияОборудования * Строка.ПлановаяНаработка;									
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДанных.Свернуть("ОбъектРемонта, ДатаРаботыС, ДатаРаботыПо, Показатель", "ФактическаяНаработка");
	
	ТабМаксЗначений = ПолучитьМаксимальныеЗначенияНаработкиДляОбъектовДокумента();
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		// Восстановление объекта ремонта по родителю.
		Для каждого Строка Из Соответствие Цикл
			Если Строка.Значение = СтрокаТЗ.ОбъектРемонта Тогда
				ОбъектРемонта = Строка.Ключ;
			КонецЕсли; 
		КонецЦикла; 
		
		МассивСтрокТЧ = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо",
												СтрокаТЗ.ОбъектРемонта, СтрокаТЗ.Показатель, СтрокаТЗ.ДатаРаботыС, СтрокаТЗ.ДатаРаботыПо));
		
		МаксЗначение = 0;
		НайденныеСтрокиМаксЗнач = ТабМаксЗначений.НайтиСтроки(Новый Структура("Объект, Показатель", ОбъектРемонта, СтрокаТЗ.Показатель));
		Если НайденныеСтрокиМаксЗнач.Количество() > 0 Тогда
			МаксЗначение = НайденныеСтрокиМаксЗнач[0].МаксимальноеЗначение;
		КонецЕсли;
		
		МассивСтрокТЧ = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель, ДатаРаботыПо",
		ОбъектРемонта, СтрокаТЗ.Показатель, СтрокаТЗ.ДатаРаботыПо));
		Для Каждого ЭлементМассива Из МассивСтрокТЧ Цикл
			
			ЭлементМассива.Наработка    = ЭлементМассива.Наработка + СтрокаТЗ.ФактическаяНаработка;
			ЭлементМассива.ДатаРаботыПо = ?(ЗначениеЗаполнено(СтрокаТЗ.ДатаРаботыПо),СтрокаТЗ.ДатаРаботыПо, Объект.Дата);
			ЭлементМассива.НаработкаСНачалаЭксплуатации = ЭлементМассива.Наработка + 
			ЭлементМассива.НаработкаСНачалаЭксплуатацииНачало;
			ЭлементМассива.НовоеЗначение = ЭлементМассива.Наработка + ЭлементМассива.СтароеЗначение;
			
			Если МаксЗначение <> 0 И ЭлементМассива.НовоеЗначение > МаксЗначение Тогда
				КоличествоСбросовСчетчика = Цел(ЭлементМассива.НовоеЗначение / МаксЗначение);
				ЭлементМассива.НовоеЗначение = ЭлементМассива.НовоеЗначение - КоличествоСбросовСчетчика * МаксЗначение;
				
				ШаблонСообщения = НСтр("ru = 'Наработка по объекту %1 и показателю %2 превысила максимальное значение. Будет выполнен сброс счетчика.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭлементМассива.Объект, ЭлементМассива.Показатель);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнтервалыРасчетаПлановойНаработки(НаработкаОбъектов, Дата)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТаблицаДокументаБаза.Объект КАК Справочник.торо_ОбъектыРемонта) КАК Объект,
	               |	ТаблицаДокументаБаза.Показатель,
	               |	ТаблицаДокументаБаза.ДатаРаботыС,
	               |	ТаблицаДокументаБаза.ДатаРаботыПо
	               |ПОМЕСТИТЬ ТаблицаДокументаБаза
	               |ИЗ
	               |	&ТаблицаДокумента КАК ТаблицаДокументаБаза
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ВЫБОР
	               |		КОГДА ТаблицаДокумента.ДатаРаботыС = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ТаблицаДокумента.Объект.ДатаВводаВЭксплуатацию
	               |		ИНАЧЕ ТаблицаДокумента.ДатаРаботыС
	               |	КОНЕЦ КАК ДатаРаботыСДляОтбораСтрок,
	               |	ВЫБОР
	               |		КОГДА ТаблицаДокумента.ДатаРаботыПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА &ДатаДокумента
	               |		ИНАЧЕ ТаблицаДокумента.ДатаРаботыПо
	               |	КОНЕЦ КАК ДатаРаботыПоДляОтбораСтрок
	               |ПОМЕСТИТЬ ТаблицаДокумента
	               |ИЗ
	               |	ТаблицаДокументаБаза КАК ТаблицаДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.Период,ТаблицаДокумента.ДатаРаботыС) КАК Период,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,Значение(Перечисление.Периодичность.День)) КАК ПериодПлановойНаработки,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,1) КАК ПродолжительностьПериодаПлановойНаработки,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,1) КАК КоэффициентИспользованияОборудования,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,0) КАК ПлановаяНаработка
	               |ПОМЕСТИТЬ ТаблицаДокументаСПредшествующимиПараметрами
	               |ИЗ
	               |	ТаблицаДокумента КАК ТаблицаДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	               |		ПО ТаблицаДокумента.Объект = торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта
	               |			И ТаблицаДокумента.Показатель = торо_ПараметрыНаработкиОбъектовРемонта.Показатель
	               |			И ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок >= торо_ПараметрыНаработкиОбъектовРемонта.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	МАКСИМУМ(ТаблицаДокумента.Период) КАК ДатаСреза
	               |ПОМЕСТИТЬ ТаблицаДокументаСДатойСреза
	               |ИЗ
	               |	ТаблицаДокументаСПредшествующимиПараметрами КАК ТаблицаДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокументаСПредшествующимиПараметрами.Объект,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.Показатель,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыС,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыПо,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыПоДляОтбораСтрок,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.Период,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ПериодПлановойНаработки,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ПродолжительностьПериодаПлановойНаработки,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.КоэффициентИспользованияОборудования,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ПлановаяНаработка
	               |ПОМЕСТИТЬ ТаблицаДокументаСНачальнымиПараметрами
	               |ИЗ
	               |	ТаблицаДокументаСПредшествующимиПараметрами КАК ТаблицаДокументаСПредшествующимиПараметрами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументаСДатойСреза КАК ТаблицаДокументаСДатойСреза
	               |		ПО ТаблицаДокументаСПредшествующимиПараметрами.Объект = ТаблицаДокументаСДатойСреза.Объект
	               |			И ТаблицаДокументаСПредшествующимиПараметрами.Показатель = ТаблицаДокументаСДатойСреза.Показатель
	               |			И ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыСДляОтбораСтрок = ТаблицаДокументаСДатойСреза.ДатаРаботыСДляОтбораСтрок
	               |			И ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыПоДляОтбораСтрок = ТаблицаДокументаСДатойСреза.ДатаРаботыПоДляОтбораСтрок
	               |			И ТаблицаДокументаСПредшествующимиПараметрами.Период = ТаблицаДокументаСДатойСреза.ДатаСреза
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.Период,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка
	               |ПОМЕСТИТЬ ТаблицаДокументаСПараметрамиЗаИнтервал
	               |ИЗ
	               |	ТаблицаДокумента КАК ТаблицаДокумента
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	               |		ПО ТаблицаДокумента.Объект = торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта
	               |			И ТаблицаДокумента.Показатель = торо_ПараметрыНаработкиОбъектовРемонта.Показатель
	               |			И ТаблицаДокумента.ДатаРаботыС <= торо_ПараметрыНаработкиОбъектовРемонта.Период
	               |			И ТаблицаДокумента.ДатаРаботыПо > торо_ПараметрыНаработкиОбъектовРемонта.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	ТаблицаДокумента.Период,
	               |	ТаблицаДокумента.ПериодПлановойНаработки,
	               |	ТаблицаДокумента.ПродолжительностьПериодаПлановойНаработки,
	               |	ТаблицаДокумента.КоэффициентИспользованияОборудования,
	               |	ТаблицаДокумента.ПлановаяНаработка
	               |ПОМЕСТИТЬ ТаблицаДокументаСПараметрами
	               |ИЗ
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал КАК ТаблицаДокумента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ПериодПлановойНаработки,
	               |	ТаблицаДокумента.ПродолжительностьПериодаПлановойНаработки,
	               |	ТаблицаДокумента.КоэффициентИспользованияОборудования,
	               |	ТаблицаДокумента.ПлановаяНаработка
	               |ИЗ
	               |	ТаблицаДокументаСНачальнымиПараметрами КАК ТаблицаДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.Объект,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.Показатель,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыС,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыПо,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.Период НачалоПериода,
	               |	ЕСТЬNULL(ТаблицаДокументаСПараметрамиЗаИнтервал1.Период, ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыПоДляОтбораСтрок) КАК КонецПериода,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ПериодПлановойНаработки,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ПродолжительностьПериодаПлановойНаработки,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.КоэффициентИспользованияОборудования,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ПлановаяНаработка
	               |ПОМЕСТИТЬ СоединениеТаблицСПараметрамиЗаИнтервал
	               |ИЗ
	               |	ТаблицаДокументаСПараметрами КАК ТаблицаДокументаСПараметрамиЗаИнтервал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокументаСПараметрами КАК ТаблицаДокументаСПараметрамиЗаИнтервал1
	               |		ПО ТаблицаДокументаСПараметрамиЗаИнтервал.Объект = ТаблицаДокументаСПараметрамиЗаИнтервал1.Объект
	               |			И ТаблицаДокументаСПараметрамиЗаИнтервал.Показатель = ТаблицаДокументаСПараметрамиЗаИнтервал1.Показатель
	               |			И ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыС = ТаблицаДокументаСПараметрамиЗаИнтервал1.ДатаРаботыС
	               |			И ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыПо = ТаблицаДокументаСПараметрамиЗаИнтервал1.ДатаРаботыПо
	               |			И ТаблицаДокументаСПараметрамиЗаИнтервал.Период < ТаблицаДокументаСПараметрамиЗаИнтервал1.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Объект КАК ОбъектРемонта,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Показатель,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ДатаРаботыС,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ДатаРаботыПо,
	               |	МАКСИМУМ(СоединениеТаблицСПараметрамиЗаИнтервал.НачалоПериода) КАК ДатаНачала,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.КонецПериода КАК ДатаОкончания,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Объект.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПериодПлановойНаработки,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПродолжительностьПериодаПлановойНаработки,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.КоэффициентИспользованияОборудования,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПлановаяНаработка,
				   |	0 КАК ФактическаяНаработка
	               |ИЗ
	               |	СоединениеТаблицСПараметрамиЗаИнтервал КАК СоединениеТаблицСПараметрамиЗаИнтервал
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Показатель,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Объект,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ДатаРаботыС,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ДатаРаботыПо,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Объект.ПлановыйГрафикРаботы,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.КонецПериода,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПериодПлановойНаработки,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПродолжительностьПериодаПлановойНаработки,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.КоэффициентИспользованияОборудования,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПлановаяНаработка";
				   
				   
	Запрос.УстановитьПараметр("ТаблицаДокумента", НаработкаОбъектов);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
								
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура СинхронизироватьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбъектДопДокумента = ДополнительныеПараметры.ОбъектДопДокумента;
	
	Если ОбъектДопДокумента.Проведен Тогда
		Для Каждого Строка Из Объект.НаработкаОбъектов Цикл
			Если Строка.Синхронизировать Тогда
				СН = Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
	|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
	|СтруктураИерархии,РаспространятьНаПодчиненных");

				НаработкаОбъектовПоказательПриИзменении(Неопределено);
				Строка.Синхронизировать = Ложь;
				Строка.РаспространятьНаПодчиненных = Истина;
				ЗаполнитьЗначенияСвойств(СН,Строка);
				РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока и НЕ ОтменаРедактирования Тогда
		ОбъектРемонта = Элемент.ТекущиеДанные.Объект;
		Показатель = Элемент.ТекущиеДанные.Показатель;
		
		// Проверяем, чтобы не было дублей показателей и ОР.
		СтрокиНаработкиСредиПодчиненных = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", ОбъектРемонта,Показатель));
		Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта, Показатель, СтрокиНаработкиСредиПодчиненных[0].РодительИерархии);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		СтрокиНаработкиСредиПодчиненных = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", ОбъектРемонта,Показатель));
		Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта, Показатель);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовДатаРаботыПоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекСтрока.Объект, ТекСтрока.Показатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;

	СН = Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
	|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
	|СтруктураИерархии,РаспространятьНаПодчиненных");

	ЗаполнитьЗначенияСвойств(СН,ТекСтрока);
	РаспространитьНаПодчиненныхДляТекущейСтроки(СН);

	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОРОбработчикОжидания()
	
	Если Объект.НаработкаОбъектов.Количество() = 0 Тогда
		ОткрытьФормуПодбораОРИзОснования(Элементы.НаработкаОбъектов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораОРИзОснования(Элемент, ОдиночныйВыбор = Ложь)
	
	стрПараметров = Новый структура("ТипВыходногоДок, ДокументыОснования, ОдиночныйВыбор, ОткрыватьБезусловно, ПараметрыНаработки", 
			ПредопределенноеЗначение("Перечисление.торо_ВидыВыходныхДокументов.УчетНаработкиОборудования"), Объект.ДокументОснование, ОдиночныйВыбор, Истина, Истина);		
			
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораОРПриВводеНаОсновании", стрПараметров, Элемент,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

&НаСервере
Функция ОбъектРемонтаУжеДобавлен(ОбъектРемонта)
	
	МассивСтрок = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект", ОбъектРемонта));
	Если МассивСтрок.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектРемонта);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Если Объект.Проведен Тогда 
		БлокироватьДляИзменения = Истина;
	Иначе
		БлокироватьДляИзменения = Ложь;
	КонецЕсли;
	
	Элементы.НаработкаОбъектовПоказатель.ТолькоПросмотр = БлокироватьДляИзменения;
	Элементы.НаработкаОбъектовНаработка.ТолькоПросмотр = БлокироватьДляИзменения;
	Элементы.НаработкаОбъектовДатаРаботыПо.ТолькоПросмотр = БлокироватьДляИзменения;
	Элементы.НаработкаОбъектовНовоеЗначение.ТолькоПросмотр = БлокироватьДляИзменения;
	Элементы.НаработкаОбъектовРаспространятьНаПодчиненных.ТолькоПросмотр = БлокироватьДляИзменения;
	Элементы.НаработкаОбъектовИерархия.ТолькоПросмотр = БлокироватьДляИзменения;
	Элементы.Синхронизировать.ТолькоПросмотр = БлокироватьДляИзменения;
	
	ЭлементНаработкаОбъектовОбъект = Элементы.НаработкаОбъектовОбъект;
	
	ЭлементНаработкаОбъектовОбъект.КнопкаВыпадающегоСписка = Не БлокироватьДляИзменения;
	ЭлементНаработкаОбъектовОбъект.РедактированиеТекста = Не БлокироватьДляИзменения;
	
	Если БлокироватьДляИзменения Тогда
		ЭлементНаработкаОбъектовОбъект.КнопкаВыбора = Ложь;
		ЭлементНаработкаОбъектовОбъект.КнопкаСоздания = Ложь;
		ЭлементНаработкаОбъектовОбъект.КнопкаОткрытия = Истина;
		ЭлементНаработкаОбъектовОбъект.КнопкаОчистки = Ложь;
		ЭлементНаработкаОбъектовОбъект.РедактированиеТекста = Ложь;
	Иначе
		ЭлементНаработкаОбъектовОбъект.КнопкаВыпадающегоСписка = Неопределено;
		ЭлементНаработкаОбъектовОбъект.КнопкаВыбора = Неопределено;
		ЭлементНаработкаОбъектовОбъект.КнопкаСоздания = Неопределено;
		ЭлементНаработкаОбъектовОбъект.КнопкаОткрытия = Неопределено;
		ЭлементНаработкаОбъектовОбъект.КнопкаОчистки = Неопределено;
	КонецЕсли;
	
	ТаблицаНаработкиЗаполнена = ЗначениеЗаполнено(Объект.НаработкаОбъектов);
	
	Элементы.Заполнить.Доступность                         = НЕ БлокироватьДляИзменения И ТаблицаНаработкиЗаполнена;
	Элементы.НаработкаОбъектовСинхронизировать.Доступность = НЕ БлокироватьДляИзменения И ТаблицаНаработкиЗаполнена; 
	Элементы.НаработкаОбъектовПодбор.Доступность           = НЕ БлокироватьДляИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПослеУдаления(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

