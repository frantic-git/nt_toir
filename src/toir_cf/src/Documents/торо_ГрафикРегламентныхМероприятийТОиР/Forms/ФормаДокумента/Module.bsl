
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	мРабочаяДата = ТекущаяДата();
	
	Если Параметры.Свойство("ВидОперации") Тогда 	
		Объект.ВидОперации = Параметры.ВидОперации;
	ИначеЕсли Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПустаяСсылка() Тогда
		Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот;
	КонецЕсли;
	
	СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяСтруктураИерархии",
		Истина);
	
	ТЗМаршрутов = Объект.Маршруты.Выгрузить(,"СписокОбъектовРемонта");
	ТЗМаршрутов.Свернуть("СписокОбъектовРемонта");
	Если ТЗМаршрутов.Найти(Справочники.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка()) = Неопределено Тогда
		ГруппировкаПоМаршруту = Истина;
	Иначе
		ГруппировкаПоМаршруту = Ложь;
	КонецЕсли;
	
	ПоказыватьОбъекты = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	Если ПоказыватьОбъекты Тогда
		ЗаполнитьДерево(ГруппировкаПоМаршруту);
	Иначе
		ЗаполнитьДеревоБезОбъектов(ГруппировкаПоМаршруту);
	КонецЕсли;
	
	УстановитьЗаголовокКолонкиРемонтов();
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииГруппировкаПоМаршруту.Пометка = ГруппировкаПоМаршруту;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьОР.Пометка = ПоказыватьОбъекты;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Организация = Параметры.ЗначениеКопирования.Организация;
			Объект.Подразделение = Параметры.ЗначениеКопирования.Подразделение;
			Объект.ПериодичностьДетализации = Параметры.ЗначениеКопирования.ПериодичностьДетализации;
			Объект.КоличествоПериодов = Параметры.ЗначениеКопирования.КоличествоПериодов;
			
			Объект.ПланРемонтов.Очистить();
			ЗагрузитьРемонтыИзДокументаОснования();
		Иначе 
			Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				Объект.ДатаПланирования = КонецМесяца(мРабочаяДата)+1;
				Объект.ПериодичностьДетализации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
					"НастройкиТОиР",
					"ОсновнойПериодПланирования",
					Истина);
				
				Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда
					Объект.ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
				КонецЕсли;
				
				Объект.КоличествоПериодов = 1;
			КонецЕсли;
			
			ОрганизацияИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнаяОрганизация");
			ПодразделениеИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновноеПодразделение");	
			
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = ОрганизацияИзНастроек;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
					Объект.Подразделение = ПодразделениеИзНастроек;
				КонецЕсли;
				
			Иначе
				Объект.Организация = ОрганизацияИзНастроек;
				
				Объект.Подразделение = ПодразделениеИзНастроек;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
				
				Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
					"НастройкиТОиР",
					"ОсновнойОтветственный",
					Справочники.Пользователи.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Объект.Дата;
	Если ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда		
		мДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
	Иначе		
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ПравоИнтерактивнаяПометкаУдаленияДокументаЗаказНаВнутреннееПотребление = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоИнтерактивноеДобавлениеДокументаЗаказНаВнутреннееПотребление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ГрафикРегламентныхМероприятийТОиР);
	
	ДоступныЗаказыНаВнутреннееПотребление = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	
	ОбновитьДоступностьДляРедактирования();
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_ГрафикРегламентныхМероприятийТОиР;
	торо_РаботаССогласованиями.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента, Истина);
	// Согласование --
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	// Заголовок формы--
	
	// Если открываем документ их обработки и нужно активировать указанную строку
	Если Параметры.Свойство("ID") Тогда
		ТекСтрокаИзВнеID = Параметры.ID;
	КонецЕсли;
	
	// Установить свойства элементов формы в зависимости от доступных прав
	торо_СобытияФорм.УстановитьСвойствоЭлементовФормыОтПрав(ЭтотОбъект);
	
	// видимость легенды диаграммы
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказательЛегенду.Пометка;
	
	Элементы.ДокументыЗаказНаВнПотреблениеДобавитьЗаказНаВнПотребление.Видимость = Не ПолучитьФункциональнуюОпцию("торо_РасширенныйРежимМТО");
	Элементы.ДокументыЗаказНаВнПотреблениеУдалитьЗаказНаВнПотребление.Доступность = ПравоИнтерактивнаяПометкаУдаленияДокументаЗаказНаВнутреннееПотребление;
	
	ФОВводНаОснованииПроведенного = Константы.торо_ВводЗаказовНаОснованииПроведенногоДокумента.Получить();
	Элементы.ДокументыЗаказНаВнПотреблениеДобавитьЗаказНаВнПотребление.Доступность = ПравоИнтерактивноеДобавлениеДокументаЗаказНаВнутреннееПотребление
		И (НЕ ФОВводНаОснованииПроведенного ИЛИ (ФОВводНаОснованииПроведенного И Объект.Проведен));
		
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		УстановитьВидимостьВидаОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	РазвернутьВсеВетвиДеревьев();
	
	УстановитьВнешнийВидФормы();
	
	// Если открываем документ их обработки и нужно активировать указанную строку
	Если ТекСтрокаИзВнеID<>"" Тогда
		АктивироватьСтрокуИзВне(ТекСтрокаИзВнеID);			
	КонецЕсли;	
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		
		ДатаОкончанияГрафика = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДокументОснование.ДатаПланирования, Объект.ДокументОснование.ПериодичностьДетализации, Объект.ДокументОснование.КоличествоПериодов);
		ДатаОкончанияКорректировки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
		
		Если ДатаОкончанияГрафика < ДатаОкончанияКорректировки Тогда
			ТекстСообщения = НСтр("ru = 'Период корректировки не может быть больше периода графика регламентных мероприятий.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Дата > Объект.ДатаПланирования Тогда
		ТекстСообщения = НСтр("ru = 'Дата документа не может быть больше даты планирования'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот Тогда
		ТекущийОбъект.ДокументОснование = Неопределено;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаписатьДерево(ТекущийОбъект);
	
	// Согласование++
	торо_РаботаССогласованиями.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаССогласованиями.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
	// Заголовок формы--	
	УстановитьВидимостьВидаОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой();
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.торо_КалькуляторРасчетаКоличестваПериодов"
		И Не (Объект.КоличествоПериодов = ВыбранноеЗначение.КоличествоПериодов
				И Объект.ПериодичностьДетализации = ВыбранноеЗначение.ПериодичностьДетализации)Тогда
	    Объект.КоличествоПериодов = ВыбранноеЗначение.КоличествоПериодов;
		Объект.ПериодичностьДетализации = ВыбранноеЗначение.ПериодичностьДетализации;
		КоличествоПериодовПриИзменении(Элементы.КоличествоПериодов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗагрузкаИзПроджект" И Параметр = Объект.Ссылка Тогда
			ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "СозданДокументЧерезРМТехСпец" ТОгда
		ОбновитьДоступностьДляРедактирования();
	КонецЕсли;
	
	// Согласование++
	Если ИмяСобытия = "УтверждениеСтатусаСогласования" И Параметр.Документ = Объект.Ссылка Тогда
		ЗавершитьУтверждениеСтатусаДокумента(Параметр);
	КонецЕсли;
	// Согласование--
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Согласование++
&НаКлиенте
Процедура Подключаемый_СпособСогласованияПриИзменении(Элемент)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.СпособСогласованияНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсторияСтатусовСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Объект.Организация Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Элементы.ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ДокументОснованиеПриИзмененииНаСервере();
	ОбновитьДоступностьДляРедактирования();

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда 
		ЕстьЗаполненныйСклад = Ложь;
		Для каждого Строка Из Объект.ПланРемонтов Цикл 
			Если ЗначениеЗаполнено(Строка.Склад) Тогда 
				ЕстьЗаполненныйСклад = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьЗаполненныйСклад Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросОПерезаполненииСкладаЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Перезаполнить склад в табличной части?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнитьСкладИзПодразделения(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		ДиаграммаГантаППР.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		ДиаграммаГантаППР.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГантаППР.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаГантаППР.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	ОбновитьДоступностьДляРедактирования();

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	ОбновитьДоступностьДляРедактирования();

	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьДетализацииПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	ОбновитьДоступностьДляРедактирования();

	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРемонтыИзДокументаОснования()
	
	Если ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда		
		мДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		Документы.торо_ГрафикРегламентныхМероприятийТОиР.ЗаполнитьПланРемонтов(Объект.ПланРемонтов, Объект.ДокументОснование, 
			Объект.ДатаПланирования, мДатаОкончанияПланирования, Объект.Маршруты.Выгрузить(), Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
	КонецПроцедуры
	
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)	
	ВидОперацииПриИзмененииНаСервере();
	УстановитьВнешнийВидФормы();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		Объект.ПланРемонтов.Очистить();
		ДокументыЗаказНаВнПотребление.Очистить();
	Иначе
		 ЗагрузитьРемонтыИзДокументаОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, Строка(Объект.ВидОперации));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПланаГрафикаППРСУчетомПозиции

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		// С формы "Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораСписковОРДляГрафикаРегламентныхМероприятий"
		// или с формы "Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораВидовРемонтаМероприятийИЦепочек".
				
		УдалятьОтсутствующиеВидыМероприятий = ВыбранноеЗначение.Свойство("УдалятьОтсутствующиеВиды") И ВыбранноеЗначение.УдалятьОтсутствующиеВиды;
		ЕстьИзменения = Ложь;
		
		СтруктураОтбора = Новый Структура("СписокОбъектовРемонта, ВидМероприятия");
		
		Для Каждого КлючИЗначение Из ВыбранноеЗначение.СоответствиеОбъектовРемонта Цикл
			
			СтруктураОтбора.СписокОбъектовРемонта = КлючИЗначение.Ключ;
			
			Для Каждого ВидМероприятия Из КлючИЗначение.Значение Цикл
				
				СтруктураОтбора.ВидМероприятия = ВидМероприятия;
				
				МаршрутыОтбор = Объект.Маршруты.НайтиСтроки(СтруктураОтбора);
				Если МаршрутыОтбор.Количество() = 0 Тогда
					НоваяСтрока = Объект.Маршруты.Добавить();
					НоваяСтрока.СписокОбъектовРемонта = КлючИЗначение.Ключ;
					НоваяСтрока.ВидМероприятия = ВидМероприятия;
					
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалятьОтсутствующиеВидыМероприятий Тогда
				
				СтруктураОтбораПоСпискам = Новый Структура;
				СтруктураОтбораПоСпискам.Вставить("СписокОбъектовРемонта", КлючИЗначение.Ключ);
				
				МаршрутыОтбор = Объект.Маршруты.НайтиСтроки(СтруктураОтбораПоСпискам);
				Для Каждого Строка Из МаршрутыОтбор Цикл  
					
					Если КлючИЗначение.Значение.Найти(Строка.ВидМероприятия) = Неопределено Тогда
						УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(КлючИЗначение.Ключ, Строка.ВидМероприятия, Истина, Истина);
						
						ЕстьИзменения = Истина;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;	
		
		Если ЕстьИзменения Тогда 
			
			Модифицированность = Истина;
			
			ЗаполнитьДеревоНаСервере(); 
			
			РазвернутьВсеВетвиДеревьев();
		КонецЕсли;
	КонецЕсли;  	
	
	ПроставитьИнвНомера();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	ТекСтрокаЕстьКорень = ?(СтрокаВыбрана, (ТекущаяСтрока.НомерКартинки = 4 И ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("Строка")), Ложь);
	
	ВидЕстьКорректировка = Ложь;
	
	ДоступностьКнопкиОтПравИВида = Не ВидЕстьКорректировка И ПравоРедактирование И НЕ ЭтаФорма["СогласованиеТолькоПросмотр"];
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииУдалить.Доступность = ДоступностьКнопкиОтПравИВида;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПодбор.Доступность = ДоступностьКнопкиОтПравИВида;
	// Отбор строк в плане ремонтов
	Если СтрокаВыбрана Тогда
		УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока);
	КонецЕсли;
	
	ТекОбъект = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	Если НЕ ТекОбъект = Неопределено Тогда
		СтрРодитель = ТекОбъект.ПолучитьРодителя();
		Если СтрРодитель <> Неопределено Тогда
			ЗаблокироватьСтрокиВПланеРемонтовПоID(ТекОбъект.Ремонты, СтрРодитель.Ремонты);
		Иначе
			ЗаблокироватьСтрокиВПланеРемонтовПоID(ТекОбъект.Ремонты);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаВыбрана
		И (ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") 
		ИЛИ ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта")) Тогда
		УправлениеФормой(1);
	Иначе
		УправлениеФормой(0);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПередУдалением(Элемент, Отказ)
	
	Если МодифицируемыйОбъектРемонта Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	
	Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя удалить объект ремонта, входящий в состав списка объектов регламентных мероприятий обхода'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("Строка") И ТекСтрокаДерева.НомерКартинки = 4 Тогда
		Отказ = Истина;
		КоллекцияПодчиненных = ТекСтрокаДерева.ПолучитьЭлементы();
		Для Каждого СтрокаПодчиненная Из КоллекцияПодчиненных Цикл
			УдалитьСтрокуДерева(СтрокаПодчиненная);
		КонецЦикла;
		КоллекцияПодчиненных.Очистить();
	Иначе
		УдалитьСтрокуДерева(ТекСтрокаДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииРемонтыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланРемонтов
&НаКлиенте
Процедура ПланРемонтовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Копирование Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	
	Если ГруппировкаПоМаршруту Тогда
		Если ТекСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вид мероприятия для ввода данных графика регламентных мероприятий!'"), 20);
			Возврат;
			
		КонецЕсли;
	Иначе
		
		Если ТекСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите список объектов регламентных мероприятий для ввода данных графика регламентных мероприятий!'"), 20);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.ПланРемонтов.ТекущиеДанные;
		ТекДанные.ID = Новый УникальныйИдентификатор;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
			ТекДанные.ДатаНачСт = Дата(1,1,1);
			ТекДанные.ДатаКонСт = Дата(1,1,1);
		КонецЕсли;
		
		Если Не Копирование Тогда
			
			Если ГруппировкаПоМаршруту Тогда
				
				ТекСтрокаДереваППР             = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
				ТекДанные.СписокОбъектовРемонта = ТекСтрокаДереваППР.ПолучитьРодителя().Ремонты;
				ТекДанные.ВидРемонтныхРабот    = ТекСтрокаДереваППР.Ремонты;
				
			Иначе
				
				ТекСтрокаДереваППР             = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
				ТекДанные.ВидРемонтныхРабот     = ТекСтрокаДереваППР.ПолучитьРодителя().Ремонты;
				ТекДанные.СписокОбъектовРемонта = ТекСтрокаДереваППР.Ремонты;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Элементы.ДокументыЗаказНаВнПотребление.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ТекДанные.ID);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПриАктивизацииСтроки(Элемент)
	ДанныеТекущейСтроки = Элементы.ПланРемонтов.ТекущиеДанные;
	Если (НЕ ДанныеТекущейСтроки = Неопределено) Тогда
		Если (НЕ МассивIDДляБлокировки = Неопределено) Тогда
			Если НЕ МассивIDДляБлокировки.НайтиПоЗначению(ДанныеТекущейСтроки.ID) = Неопределено Тогда
				ПопыткаМодификацииСтрокиСоСвязаннымДокументом = Истина;
			Иначе
				ПопыткаМодификацииСтрокиСоСвязаннымДокументом = Ложь;			
			КонецЕсли;	
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
			Элементы.ПланРемонтовУдалить.Доступность = Не ЗначениеЗаполнено(ДанныеТекущейСтроки.ДатаНачСт);
		Иначе
			Элементы.ПланРемонтовУдалить.Доступность = Истина;
		КонецЕсли;
		
		Элементы.ДокументыЗаказНаВнПотребление.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ДанныеТекущейСтроки.ID);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередУдалением(Элемент, Отказ)
	
	Если ПопыткаМодификацииСтрокиСоСвязаннымДокументом Или Не Элементы.ПланРемонтовУдалить.Доступность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередНачаломИзменения(Элемент, Отказ)
	ТекущаяСтрокаРемонта = Элементы.ПланРемонтов.ТекущиеДанные;
	Если НЕ ТекущаяСтрокаРемонта = Неопределено Тогда
		
		Если ТекущаяСтрокаРемонта.Замещен Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", ТекущаяСтрокаРемонта.ID));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаДляРедактирования = Массивстрок[0];
			
			Если ПопыткаМодификацииСтрокиСоСвязаннымДокументом Тогда
				Отказ = Истина;
			ИначеЕсли Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ПланРемонтов.ТекущиеДанные;
	Если ТекущаяСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", , Элемент);
		
	ИначеЕсли ТекущаяСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Подрядный") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора", , Элемент);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбора исполнителя укажите способ выполнения ремонта.'"));
		Возврат;
	КонецЕсли;
	
	Если ФормаВыбора <> Неопределено Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		мНеверныйПериодПоКорректировке = Ложь;			
		ТекСтрокаПланРемонтов = Элемент.ТекущиеДанные;		
		Если ТекСтрокаПланРемонтов.ДатаКонСт < ТекСтрокаПланРемонтов.ДатаНачСт Тогда
			ШаблонСообщения = НСтр("ru = 'Дата окончания периода меньше даты начала (%1 - %2).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрокаПланРемонтов.ДатаНачСт, ТекСтрокаПланРемонтов.ДатаКонСт);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			мНеверныйПериодПоКорректировке = Истина;			
		КонецЕсли;	
		Если ТекСтрокаПланРемонтов.ДатаКон < ТекСтрокаПланРемонтов.ДатаНач Тогда
			ШаблонСообщения = НСтр("ru = 'Дата окончания нового периода меньше даты начала (%1 - %2).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрокаПланРемонтов.ДатаНач, ТекСтрокаПланРемонтов.ДатаКон);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			мНеверныйПериодПоКорректировке = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ТекДанныеПланаРемонтов = Элементы.ПланРемонтов.ТекущиеДанные;
	Если ТекДанныеПланаРемонтов<>Неопределено Тогда 
		ДатаНачалаРемонта = ТекДанныеПланаРемонтов.ДатаНач;
		ДатаОкончанияРемонта = ТекДанныеПланаРемонтов.ДатаКон;
	Иначе	
		ДатаНачалаРемонта = Дата(1,1,1);
		ДатаОкончанияРемонта = Дата(1,1,1);	
	КонецЕсли;
	Если  Не ДатаНачалаРемонта = Дата(1,1,1) И Не ДатаОкончанияРемонта = Дата(1,1,1) Тогда
		МассивСтрокВидаРемонта = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот", ТекДанныеПланаРемонтов.СписокОбъектовРемонта, ТекДанныеПланаРемонтов.ВидРемонтныхРабот));
		
		Для Каждого СтрокаВидаРемонта Из МассивСтрокВидаРемонта Цикл
			Если СтрокаВидаРемонта.ID <> Элемент.ТекущиеДанные.ID И ((СтрокаВидаРемонта.ДатаНач <= ДатаОкончанияРемонта И СтрокаВидаРемонта.ДатаНач >= ДатаНачалаРемонта)
				ИЛИ (СтрокаВидаРемонта.ДатаКон <= ДатаОкончанияРемонта И СтрокаВидаРемонта.ДатаКон >= ДатаНачалаРемонта)) Тогда
				ШаблонСообщения = НСтр("ru = 'Для объекта ремонта %1 на период %2 - %3 уже запланирован ремонт с видом %4!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаВидаРемонта.СписокОбъектовРемонта, ДатаНачалаРемонта, ДатаОкончанияРемонта, СтрокаВидаРемонта.ВидРемонтныхРабот);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				мДублирующиесяРемонтыНаПериод = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовСпособВыполненияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПланРемонтов.ТекущиеДанные;
	ТекущиеДанные.Исполнитель = "";
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаППРПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	Если НЕ ПравоРедактирование ИЛИ ЭтаФорма["СогласованиеТолькоПросмотр"] Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	Если Интервал.Цвет = WebЦвета.Черный
		ИЛИ Интервал.Расшифровка.ДоступенДляРедактирования <> Истина 
		ИЛИ Интервал.Цвет = WebЦвета.Красный Тогда
		
		ОтменаРедактирования = Истина;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		ОР = Интервал.Значение.Точка.Родитель.Расшифровка;
		ВР = Интервал.Значение.Точка.Расшифровка;
		ID = Интервал.Расшифровка.ID;
		
		Для каждого СтрокаПланРемонтов Из Объект.ПланРемонтов Цикл
			
			Если СтрокаПланРемонтов.СписокОбъектовРемонта = ОР И СтрокаПланРемонтов.ВидРемонтныхРабот = ВР И СтрокаПланРемонтов.ID = ID Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Интервал.Начало = НачалоДня(Интервал.Начало) И Интервал.Конец = КонецДня(Интервал.Конец) Тогда 
			// Ничего не делать.
		 	ОтменаРедактирования = Истина;
		 
		ИначеЕсли Интервал.Начало = НачалоДня(Интервал.Конец) Тогда 
			// Однодневный ремонт.
			Интервал.Начало =  НачалоДня(Интервал.Начало);
		 	Интервал.Конец = КонецДня(Интервал.Конец); 
		Иначе
			Если Интервал.Начало = НачалоДня(Интервал.Начало) Тогда  
				// Перемещение только правой границы.
				Интервал.Конец = КонецДня(Интервал.Конец); 
			ИначеЕсли Интервал.Конец = КонецДня(Интервал.Конец) Тогда  
				// Перемещение только левой границы.
				Интервал.Начало = НачалоДня(Интервал.Начало);
			ИначеЕсли Интервал.Конец = СтрокаПланРемонтов.ДатаНач Тогда
				// Перемещение правой границы за левую (либо интервала целиком).
				Интервал.Конец = КонецДня(Интервал.Конец - 86400);
			    Интервал.Начало = НачалоДня(Интервал.Начало);
			ИначеЕсли Интервал.Начало = СтрокаПланРемонтов.ДатаКон Тогда
				// Перемещение левой границы за правую (либо интервала целиком).
			    Интервал.Начало = НачалоДня(Интервал.Начало + 86400);
			    Интервал.Конец = КонецДня(Интервал.Конец);
			Иначе 
				// Перемещение интервала целиком.
				Если Интервал.Начало < СтрокаПланРемонтов.ДатаНач Тогда  
					// Мы двигали влево, двигаем влево и дальше.
				    Интервал.Начало = НачалоДня(Интервал.Начало);
			    	Интервал.Конец = КонецДня(Интервал.Конец - 86400);
				Иначе 
					// Мы двигали вправо, двигаем вправо.
			    	Интервал.Начало = НачалоДня(Интервал.Начало + 86400);
			    	Интервал.Конец = КонецДня(Интервал.Конец);
		  		КонецЕсли; 
		 	КонецЕсли;
		КонецЕсли;
				
		Интервал.Текст = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		
		СтрокаПланРемонтов.ДатаНач = Интервал.Начало;
		СтрокаПланРемонтов.ДатаКон = Интервал.Конец;
		НужноСортироватьПланРемонтов = Истина;
		
		ТочкиДиаграммы = НайтиНужнуюТочкуДиаграммыГанта(ОР, ВР);
		
		Для каждого Точка Из ТочкиДиаграммы Цикл
			ЗначениеДиаграммы = ДиаграммаГантаППР.ПолучитьЗначение(Точка, ДиаграммаГантаППР.Серии[0]);
			
			Для каждого Инт Из ЗначениеДиаграммы Цикл
				
				Если Инт.Расшифровка.ID = ID Тогда
					
					Инт.Начало = Интервал.Начало;
					Инт.Конец = Интервал.Конец;
					Инт.Текст = Строка(Инт.Начало) + " - " + Строка(Инт.Конец);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаППРВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовИсполнительПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПланРемонтов.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		торо_ЗаполнениеДокументовКлиент.ЗаполнитьСклад(ТекДанные.Исполнитель, ТекДанные.Склад);
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыЗаказНаВнПотребление
&НаКлиенте
Процедура ДокументыЗаказНаВнПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ПоследнийВыбранныйЗаказ = ТекущиеДанные.ЗаказНаВнутреннееПотребление;
		
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДокументыЗаказНаВнПотребление",ЭтаФорма);
		ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_УтвердитьСтатусСогласования(Команда)
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Ложь;
	ПараметрыРасчета_РасчетВыборочный = Ложь;
	ЗаписатьДерево();
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета графика регламентных мероприятий необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежиме(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Истина;
	ПараметрыРасчета_РасчетВыборочный = Ложь;
	ЗаписатьДерево();
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета графика регламентных мероприятий необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВыборочно(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Ложь;
	ПараметрыРасчета_РасчетВыборочный = Истина;
	ЗаписатьДерево();
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета графика регламентных мероприятий необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеВыборочно(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Истина;
	ПараметрыРасчета_РасчетВыборочный = Истина;
	ЗаписатьДерево();
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета графика регламентных мероприятий необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоМаршруту(Команда)
	
	Отказ = ПроверитьВозможностьПерегруппировкиДерева();
	
	Кнопка = Элементы.ДеревоПланаГрафикаППРСУчетомПозицииГруппировкаПоМаршруту;
	
	Если НЕ Отказ Тогда
		
		Кнопка.Пометка = НЕ Кнопка.Пометка;
		
		ЗаписатьДерево();
		
		ГруппировкаПоМаршруту = Кнопка.Пометка;
		
		ЗаполнитьДеревоНаСервере();
		
		РазвернутьВсеВетвиДеревьев();
		
		ДеревоПланаГрафикаППРСУчетомПозицииПриАктивизацииСтроки(Элементы.ДеревоПланаГрафикаППРСУчетомПозиции);
		
	Иначе 
		
		Если Кнопка.Пометка Тогда
			ТекстСообщения = НСтр("ru = 'Смена группировки не может быть выполнена. Не у всех списков объектов регл. мероприятий указан вид ремонта.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Смена группировки не может быть выполнена. Не у всех видов ремонта указан список объектов регл. мероприятий.'");
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОР(Команда)
	
	Кнопка = Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьОР;
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ЗаписатьДерево();
	
	ПоказыватьОбъекты = Кнопка.Пометка;
	
	ЗаполнитьДеревоНаСервере();
	
	РазвернутьВсеВетвиДеревьев();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидыМероприятий(Команда)
	
	ВыделенныеСтроки = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ВыделенныеСтроки;
	
	СоответствиеСписковОбъектовВидамМероприятий = СоответствиеСписковОбъектовВидамМероприятийПоИдентификаторам(ВыделенныеСтроки);
		
	Если СоответствиеСписковОбъектовВидамМероприятий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("ВходныеДанные", СоответствиеСписковОбъектовВидамМероприятий);
	ПараметрыФормы.Вставить("ТолькоГрафикиМероприятий", Истина); 
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_ГрафикРегламентныхМероприятийТОиР");
	ПараметрыФормы.Вставить("ФормаВладелецСтрокой", "Документ.торо_ГрафикРегламентныхМероприятийТОиР.Форма.ФормаДокумента");
	
	ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораВидовРемонтаМероприятийИЦепочек", 
		ПараметрыФормы, Элементы.ДеревоПланаГрафикаППРСУчетомПозиции);		
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "торо_ГрафикРегламентныхМероприятийТОиР");
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораСписковОРДляГрафикаРегламентныхМероприятий",
		ПараметрыФормы, Элементы.ДеревоПланаГрафикаППРСУчетомПозиции);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей(Команда)
	
	ОбновитьДоступностьДляРедактирования();
	
	ПараметрыФормы = Новый Структура("ДокументППР, ТаблицаРемонтовИзППР, МассивДоступныхДляКорректировкиСтрок", Объект.Ссылка, Объект.ПланРемонтов,МассивДоступныхДляКорректировкиСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьИсполнителейЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.Форма.ФормаАвтозаполненияИсполнителей", ПараметрыФормы, ЭтаФорма, 
	Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)
	
	Кнопка = Элементы.ПланРемонтовОтображатьЗамещенные;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ТекущаяСтрока = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Если СтрокаВыбрана Тогда
		УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГанта(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПостроитьДиаграммуГантаЗавершение", ЭтотОбъект), НСтр("ru = 'Данное действие требует длительного времени. Продолжить?'"), Режим, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаППР.Точки Цикл
		ДиаграммаГантаППР.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаППР.Точки Цикл
		ДиаграммаГантаППР.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованию(Команда)
	
	Элементы.СортироватьПоНаименованию.Пометка = НЕ Элементы.СортироватьПоНаименованию.Пометка;
	СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательЛегенду(Команда)
	Элементы.ПоказательЛегенду.Пометка = НЕ Элементы.ПоказательЛегенду.Пометка;
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказательЛегенду.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиРемонтов(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСтоимостиРемонтовЗавершение", ЭтотОбъект), НСтр("ru = 'Перезаполнить плановые стоимости ремонтов?'"),РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказНаВнПотребление(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаказНаВнПотреблениеВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования заказа на внутреннего потребления необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат; 
	Иначе 
		ДобавитьЗаказНаВнПотреблениеПослеВопроса();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказНаВнПотреблениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЗаказНаВнПотреблениеПослеВопроса();	 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказНаВнПотреблениеПослеВопроса()
	МассивРемонтов = Новый Массив;
	
	ВыделенныеСтроки = Элементы.ПланРемонтов.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ВыделенныеРемонт = Объект.ПланРемонтов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		СтруктураРемонта = Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот, ДатаНач, ID, ДатаКон, Склад");
		ЗаполнитьЗначенияСвойств(СтруктураРемонта, ВыделенныеРемонт);
		
		МассивРемонтов.Добавить(СтруктураРемонта);
	КонецЦикла;
	
	Если МассивРемонтов.Количество() > 0 Тогда
		стрВозврата = СоздатьДокумент_ЗаказНаВнутреннеПотребление(МассивРемонтов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов",ЭтаФорма,стрВозврата.СтруктураПередаваемыхВОбработчикПараметров);
		ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта",стрВозврата.СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказНаВнПотребление(Команда)
	
	ТекущиеДанные = Элементы.ДокументыЗаказНаВнПотребление.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗаказСсылка",ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"         ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Удаление связи с заказом на внутреннее потребление");
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Согласование++
&НаКлиенте
Процедура Подключаемый_ОбновитьДеревоСогласующих(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоСогласующих();
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДеревоСогласующих()  
	торо_РаботаССогласованиями.ОбновитьДеревоСогласующих(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьУтверждениеСтатусаДокумента(ПараметрыОповещения)
	торо_РаботаССогласованиями.ЗавершитьУтверждениеСтатусаДокумента(ЭтаФорма, ПараметрыОповещения);
КонецПроцедуры
// Согласование--

&НаКлиенте
Процедура УправлениеФормой(ЭтоВидРемонта=0)
	
	Элементы.ДокументОснование.ТолькоПросмотр = Объект.Проведен;	
	Элементы.ДатаПланирования.ТолькоПросмотр = Объект.Проведен;
	Элементы.КоличествоПериодов.ТолькоПросмотр = Объект.Проведен;
	Элементы.ПериодичностьДетализации.ТолькоПросмотр = Объект.Проведен;
	Элементы.РаcсчитатьПараметрыГрафика.Доступность = Не Объект.Проведен;
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРассчитать.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРассчитатьВыборочно.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРассчитатьВФоновомРежиме.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРассчитатьВФоновомРежимеВыборочно.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	
	СписокЭлементов = Новый СписокЗначений;
	СписокЭлементов.Добавить("ПланРемонтовДобавить");
	торо_СобытияФормКлиентСервер.УстановитьДоступностьКнопок(ЭтоВидРемонта,СписокЭлементов,ЭтаФорма,ПравоРедактирование,ЭтаФорма["СогласованиеТолькоПросмотр"]);
	
КонецПроцедуры

#Область РасчетППР

////////////////////////////////////
// Расчет

&НаКлиенте
Процедура РассчитатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьВыполнена = Ложь;
	Попытка
		ЗаписьВыполнена = Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Запись документа невозможна!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Если Объект.ДатаПланирования > Дата (3999,12,31,23,59,59) Тогда
			ТекстСообщения = НСтр("ru = 'Дата планирования не может быть больше 31.12.3999 !'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	Если Не ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагмент()

	Если ПараметрыРасчета_РасчетВыборочный Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РассчитатьВФоне", ПараметрыРасчета_РасчетВФоне);
		ПараметрыФормы.Вставить("Маршруты", Объект.Маршруты);
		ПараметрыФормы.Вставить("ДокументППР", Объект.Ссылка);
		ПараметрыФормы.Вставить("ПоказыватьОбъекты", ПоказыватьОбъекты);
		ПараметрыФормы.Вставить("ГруппировкаПоМаршруту", ГруппировкаПоМаршруту);
		
		Оповещение = Новый ОписаниеОповещения("РассчитатьВыборочноПослеВыбораРемонтов", ЭтотОбъект);
		ОткрытьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.Форма.ФормаВыбораРемонтов", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если НЕ ВСпискеОбъектовОтсутствуютВидыМероприятий(Объект.Маршруты) Тогда 
		
			МассивОР = Новый Массив;
			
			Для каждого Стр Из Объект.Маршруты Цикл
				СтрТЧ = Новый Структура("СписокОбъектовРемонта, ВидМероприятия");
				ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
				МассивОР.Добавить(СтрТЧ);
			КонецЦикла;
			
			РассчитатьПоМассивуОР(МассивОР);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВыборочноПослеВыбораРемонтов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ВСпискеОбъектовОтсутствуютВидыМероприятий(Результат.Маршруты) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОР = Новый Массив;
	
	Для каждого Стр Из Результат.Маршруты Цикл
		СтрТЧ = Новый Структура("СписокОбъектовРемонта, ВидМероприятия");
		ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
		МассивОР.Добавить(СтрТЧ);
	КонецЦикла;
	
	РассчитатьПоМассивуОР(МассивОР);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоМассивуОР(МассивОР)
	
	ПараметрыРасчета_МассивВыбранныхОР.Очистить();
	Для каждого СтруктураОР Из МассивОР Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета_МассивВыбранныхОР.Добавить(), СтруктураОР);
	КонецЦикла;
	
	Если СписокВидовМероприятийБезНормативов(Истина) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ни для одного вида мероприятия не указаны нормативы, график не будет расчитан!");
	    Возврат;
	КонецЕсли;
	
	ПроверкаПередРассчетомПланГрафика(Новый ОписаниеОповещения("ОкончаниеРассчетаППРПослеПроверки",ЭтотОбъект,
																				Новый Структура("Результат, Параметры", Неопределено, Неопределено)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРПослеПроверки(Результат, Параметры) Экспорт
	
	ВыполнятьРасчет = Результат;
	
	Если ВыполнятьРасчет = Истина Тогда	
		
		ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании = ПолучитьЗначениеОпции("торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании");
		
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		Параметры.Вставить("ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании", ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании);
		
		Если ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОкончаниеРассчетаППРЗавершение", ЭтотОбъект, Параметры), НСтр("ru = 'Рассчитать плановые стоимости ремонтов, после расчета план-графика ППР?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ОкончаниеРассчетаППРЗавершение(КодВозвратаДиалога.Нет, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании = ДополнительныеПараметры.ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании;

	Если ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании 
		И РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитыватьСтоимости = Истина;
	Иначе
		РассчитыватьСтоимости = Ложь;
	КонецЕсли;
	
	ПланРемонтовID = Новый Массив;
	Для каждого Стр Из Объект.ПланРемонтов Цикл
		ПланРемонтовID.Добавить(Стр.ID);
	КонецЦикла;
	
	ВопросОПерезаполнении = Ложь;
	
	Если НЕ ПараметрыРасчета_РасчетВФоне Тогда
		
		ВопросОПерезаполнении = (Объект.ПланРемонтов.Количество() > 0);
		
	Иначе
		
		СтруктураПоиска = Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот");
		Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОР);
			СтруктураПоиска.ВидРемонтныхРабот = СтрокаОР.ВидМероприятия;
			СтрокиРемонта = Объект.ПланРемонтов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиРемонта.Количество() > 0 Тогда
				ВопросОПерезаполнении = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВопросОПерезаполнении Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОкончаниеРассчетаППРЗавершениеЗавершение", ЭтотОбъект, Новый Структура("РассчитыватьСтоимости", РассчитыватьСтоимости)), НСтр("ru = 'Данные запланированных мероприятий будут перезаполнены! Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, 60);
		Возврат;
		
	КонецЕсли; 
	
	ОкончаниеРассчетаППРЗавершениеФрагмент(РассчитыватьСтоимости);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    РассчитыватьСтоимости = ДополнительныеПараметры.РассчитыватьСтоимости;
    
    Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ОкончаниеРассчетаППРЗавершениеФрагмент(РассчитыватьСтоимости);

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершениеФрагмент(Знач РассчитыватьСтоимости)
	
	Если НЕ ПараметрыРасчета_РасчетВФоне Тогда
				
		Если ПараметрыРасчета_МассивВыбранныхОР.Количество() = 0 Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заданы списки объектов для заполнения графика мероприятий!'"));
			Возврат;
		КонецЕсли;
		
		РассчитатьППРНаСервере(РассчитыватьСтоимости);
		ОбновитьДоступностьДляРедактирования();
		
	Иначе
		
		Если ПараметрыРасчета_МассивВыбранныхОР.Количество() = 0 Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заданы списки объектов для заполнения графика мероприятий!'"));
			Возврат;
		КонецЕсли;
		
		ЗаписатьДанныеВРегистр(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьППРНаСервере(РассчитыватьСтоимости)
	
	Если НЕ ПараметрыРасчета_РасчетВыборочный Тогда
		
		ПланРемонтов = торо_РасчетППР.РасчетППР(Объект.Ссылка, РассчитыватьСтоимости);
		Если ТипЗнч(ПланРемонтов) = Тип("ТаблицаЗначений") Тогда
			Объект.ПланРемонтов.Загрузить(ПланРемонтов);
			Объект.РассчитаноНаВерсииППР = торо_СЛКСервер.Версия_Session("торо_ЗащитаУправлениеРемонтами83");
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		
		ТаблицаОРДляВыборочногоРасчета = ПараметрыРасчета_МассивВыбранныхОР.Выгрузить();
		ТаблицаОРДляВыборочногоРасчета.Колонки.СписокОбъектовРемонта.Имя = "ОбъектРемонтныхРабот";
		ТаблицаОРДляВыборочногоРасчета.Колонки.ВидМероприятия.Имя        = "ВидРемонтныхРабот";
		
		ПланРемонтов = торо_РасчетППР.РасчетППР(Объект.Ссылка, РассчитыватьСтоимости,,,ТаблицаОРДляВыборочногоРасчета);
				
		Если ТипЗнч(ПланРемонтов) = Тип("ТаблицаЗначений") Тогда
			СтруктураПоиска = Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот");
			
			Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОР);
				СтруктураПоиска.ВидРемонтныхРабот = СтрокаОР.ВидМероприятия;
				ЗаменитьСтрокиПланаРемонтовПоСтруктуреПоиска(ПланРемонтов, СтруктураПоиска);
			КонецЦикла;
			
			Объект.РассчитаноНаВерсииППР = торо_СЛКСервер.Версия_Session("торо_ЗащитаУправлениеРемонтами83");
			
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСтрокиПланаРемонтовПоСтруктуреПоиска(ПланРемонтов, СтруктураПоиска)
	
	СтрокиРемонта = Объект.ПланРемонтов.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРемонта из СтрокиРемонта Цикл
		Объект.ПланРемонтов.Удалить(СтрокаРемонта);
	КонецЦикла;
	
	НовыеСтрокиРемонта = ПланРемонтов.НайтиСтроки(СтруктураПоиска);
	Для каждого НоваяСтрокаРемонта из НовыеСтрокиРемонта Цикл
		НовСтр = Объект.ПланРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НоваяСтрокаРемонта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр(Ссылка)
	
	НачатьТранзакцию();
		
	ПоследниеЗаписиПоППР = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СрезПоследних(ТекущаяДата(),Новый Структура("ДокументППР", Ссылка));
	ИзменениеВыборочностиРасчета = Ложь;
	
	Если (ПоследниеЗаписиПоППР <> Неопределено И ПоследниеЗаписиПоППР.Количество() > 0 И Не ПоследниеЗаписиПоППР[0].Рассчитан) Тогда
		
		СуществующаяЗапись = ПоследниеЗаписиПоППР[0];
		Если СуществующаяЗапись.ВыборочныйРасчет <> ПараметрыРасчета_РасчетВыборочный Тогда
			
			ИзменениеВыборочностиРасчета = Истина;
			
			ППРДляРасчетаМенеджер = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СоздатьМенеджерЗаписи();
			ППРДляРасчетаМенеджер.ДокументППР = СуществующаяЗапись.ДокументППР;
			ППРДляРасчетаМенеджер.Период = СуществующаяЗапись.Период;
			ППРДляРасчетаМенеджер.Прочитать();
			Если ППРДляРасчетаМенеджер.Выбран() Тогда
				ППРДляРасчетаМенеджер.ВыборочныйРасчет = ПараметрыРасчета_РасчетВыборочный;
				ППРДляРасчетаМенеджер.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ППРДляРасчетаМенеджер = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СоздатьМенеджерЗаписи();
		ППРДляРасчетаМенеджер.ДокументППР = Ссылка;
		ППРДляРасчетаМенеджер.Период = ТекущаяДата();
		ППРДляРасчетаМенеджер.ВыборочныйРасчет = ПараметрыРасчета_РасчетВыборочный;
		ППРДляРасчетаМенеджер.Записать();
		
	КонецЕсли;
		
	Если ПараметрыРасчета_РасчетВыборочный Тогда
		
		НаборЗаписейОбъектовРемонта = РегистрыСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.СоздатьНаборЗаписей();
		НаборЗаписейОбъектовРемонта.Отбор.ДокументППР.Установить(Ссылка);
		
		Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
			НовЗапись = НаборЗаписейОбъектовРемонта.Добавить();
			НовЗапись.ОбъектРемонтныхРабот = СтрокаОР.СписокОбъектовРемонта;
			НовЗапись.ВидРемонтныхРабот = СтрокаОР.ВидМероприятия;
			НовЗапись.ДокументППР = Ссылка;
		КонецЦикла;
		
		НаборЗаписейОбъектовРемонта.Записать(Истина);
		
	Иначе
		
		Если ИзменениеВыборочностиРасчета Тогда
			НаборЗаписейОбъектовРемонта = РегистрыСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.СоздатьНаборЗаписей();
			НаборЗаписейОбъектовРемонта.Отбор.ДокументППР.Установить(Ссылка);
			НаборЗаписейОбъектовРемонта.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

////////////////////////////////////
// Проверки

&НаКлиенте
Функция ОбязательныеПроверкиБезВопросовПередРасчетомППР()
	
	Отказ = Ложь;
	
	Если ИмеютсяДокументыНаОсновании(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Перерасчет графика регламентных мероприятий невозможен, т.к. имеются документы, введенные на его основании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения расчета необходимо отменить проведение документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПравоДоступа() Тогда 
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Нарушение прав доступа!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена начальная дата планирования!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для расчёта графика регламентных мероприятий необходимо задать период планирования!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Функция ВСпискеОбъектовОтсутствуютВидыМероприятий(СписокОбъектов)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(СписокОбъектов) Тогда
		Для каждого РМ Из СписокОбъектов Цикл
			Если РМ.Свойство("ВидМероприятия") И РМ.Свойство("СписокОбъектовРемонта") И НЕ ЗначениеЗаполнено(РМ.ВидМероприятия) Тогда
				
				НазваниеРМ = РМ.СписокОбъектовРемонта;
				ШаблонСообщения = НСтр("ru = 'Список ""%1"" не содержит ни одного вида мероприятий!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, НазваниеРМ);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Результат);
				
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафика(Знач Оповещение)
	
	Если ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда		
		ДатаПланированияОкончание = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ДатаПланированияОкончание = Дата(4000,1,1) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаПередРассчетомПланГрафикаЗавершение", ЭтотОбъект, Новый Структура("ДатаПланированияОкончание, Оповещение", ДатаПланированияОкончание, Оповещение)), НСтр("ru = 'Расчет графика регламентных мероприятий может быть выполнен только до 4000 года!'"));
		Возврат;
	КонецЕсли;
	
	ПроверкаПередРассчетомПланГрафикаФрагмент(ДатаПланированияОкончание, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаЗавершение(ДополнительныеПараметры) Экспорт
	
	ДатаПланированияОкончание = ДополнительныеПараметры.ДатаПланированияОкончание;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
	ПроверкаПередРассчетомПланГрафикаФрагмент(ДатаПланированияОкончание, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаФрагмент(Знач ДатаПланированияОкончание, Знач Оповещение)
	
	Перем МассивОР, НужныеГода, Переменная, Стр, СтрТЧ;
	
	КоллекцияОРДляРасчета = ?(ПараметрыРасчета_РасчетВыборочный, ПараметрыРасчета_МассивВыбранныхОР, Объект.Маршруты);
	
	Переменная = Объект.ДатаПланирования;
	НужныеГода = Новый СписокЗначений;
	Пока Переменная < ДатаПланированияОкончание Цикл
		НужныеГода.Добавить(ГОД(Переменная));
		Переменная = ДобавитьМесяц(Переменная,12);
	КонецЦикла;
	Если НужныеГода.НайтиПоЗначению(ГОД(ДатаПланированияОкончание)) = Неопределено Тогда 
		НужныеГода.Добавить(ГОД(ДатаПланированияОкончание));
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		МассивОР = Новый Массив;
		Для каждого Стр Из КоллекцияОРДляРасчета Цикл
			СтрТЧ = Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот");
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
			СтрТЧ.ВидРемонтныхРабот = Стр.ВидМероприятия;
			МассивОР.Добавить(СтрТЧ);
		КонецЦикла;
		
		Если ПроверкаНаПересеченияСДругимиППР(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.Ссылка, ДатаПланированияОкончание, МассивОР) Тогда
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполненностьГрафика(Объект.ДатаПланирования, ДатаПланированияОкончание, НужныеГода, Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаПередРассчетомПланГрафикаФрагментЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Не заполнен календарь в справочнике ""График работ"". Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Иначе 
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////
// Вспомогательное

&НаСервереБезКонтекста
Функция ИмеютсяДокументыНаОсновании(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_НарядНаРегламентноеМероприятиеДокументыОснования.Ссылка
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.ДокументыОснования КАК торо_НарядНаРегламентноеМероприятиеДокументыОснования
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеДокументыОснования.ДокументОснование = &ДокументОснование
	|	И НЕ торо_НарядНаРегламентноеМероприятиеДокументыОснования.Ссылка.ПометкаУдаления
	|	И торо_НарядНаРегламентноеМероприятиеДокументыОснования.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииРегламентногоМероприятияДокументыОснования.Ссылка
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.ДокументыОснования КАК торо_АктОВыполненииРегламентногоМероприятияДокументыОснования
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятияДокументыОснования.ДокументОснование = &ДокументОснование
	|	И торо_АктОВыполненииРегламентногоМероприятияДокументыОснования.Ссылка.Проведен
	|	И НЕ торо_АктОВыполненииРегламентногоМероприятияДокументыОснования.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьправоДоступа()
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.торо_ГрафикРегламентныхМероприятийТОиР); 
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьГрафика(ДатаПланированияНачала, ДатаПланированияОкончание, НужныеГодаСписок, Ссылка)
	
	НужныеГода = Новый ТаблицаЗначений;
	ТипГодГрафика = Новый Массив;
	ТипГодГрафика.Добавить(Тип("Число"));
	НужныеГода.Колонки.Добавить("ГодГрафика",Новый ОписаниеТипов(ТипГодГрафика), "ГодГрафика");
	
	Для каждого Элем Из НужныеГодаСписок Цикл
		
		НужныеГода.Добавить().ГодГрафика = Элем.Значение;
		
	КонецЦикла; 
	
	ГрафикЗаполнен = Истина;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ТаблицаМаршрутовИсходная.ВидМероприятия КАК ВидМероприятия,
    |	ТаблицаМаршрутовИсходная.СписокОбъектовРемонта КАК СписокОбъектовРемонта
    |ПОМЕСТИТЬ ТаблицаМаршрутов
    |ИЗ
    |	&ТаблицаМаршрутовИсходная КАК ТаблицаМаршрутовИсходная
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот
	|ПОМЕСТИТЬ ТабГрафиков
	|ИЗ
	|	ТаблицаМаршрутов КАК ТаблицаМаршрутов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
	|		ПО ТаблицаМаршрутов.СписокОбъектовРемонта = торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов
	|			И ТаблицаМаршрутов.ВидМероприятия = торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабГрафиков.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот
	|ИЗ
	|	ТабГрафиков КАК ТабГрафиков";
	
	Запрос.УстановитьПараметр("ТаблицаМаршрутовИсходная", ПараметрыРасчета_МассивВыбранныхОР.Выгрузить());
	Результат = Запрос.Выполнить();
	МассивГрафиков = Результат.Выгрузить().ВыгрузитьКолонку("ГрафикРемонтныхРабот");
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(ДатаПланированияНачала), ДатаПланированияОкончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	НужныеГода.ГодГрафика
	|ПОМЕСТИТЬ НужныеГода
	|ИЗ
	|  &НужныеГода КАК НужныеГода
	|;
	|ВЫБРАТЬ
	|	ТабГрафиков.ГрафикРемонтныхРабот,
	|	НужныеГода.ГодГрафика
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	ТабГрафиков КАК ТабГрафиков,
	|	НужныеГода КАК НужныеГода
	|;
	|ВЫБРАТЬ
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодГрафика,
	|	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение
	|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика)
	|;
	|ВЫБРАТЬ
	|	ВремТабл.ГрафикРемонтныхРабот КАК ГрафикРаботы,
	|	ВремТабл.ГодГрафика,
	|	ЕСТЬNULL(ВТРасписанияРаботыИзм.ОсновноеЗначение, 0) КАК ОсновноеЗначение
	|ИЗ
	|	ВремТабл КАК ВремТабл
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	|	ПО ВремТабл.ГодГрафика = ВТРасписанияРаботыИзм.ГодГрафика
	|		И ВремТабл.ГрафикРемонтныхРабот = ВТРасписанияРаботыИзм.ГрафикРаботы";
	
	Запрос.УстановитьПараметр("НужныеГода", НужныеГода);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОсновноеЗначение = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Не заполнен график %1 за %2 год.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ГрафикРаботы, Выборка.ГодГрафика);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ГрафикЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГрафикЗаполнен;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаНаПересеченияСДругимиППР(ДатаПланирования, ПериодичностьДетализации, Ссылка, ДатаОкончанияПланирования, Маршруты)
	
	ТаблицаПроверкиПериодовПланирования = Новый ТаблицаЗначений;
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("СписокОбъектовРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ПериодичностьДетализации", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ДатаПланирования", Новый ОписаниеТипов("Дата"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ДатаОкончанияПланирования", Новый ОписаниеТипов("Дата"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР"));
	
	Для каждого Стр Из Маршруты Цикл
		
		НС                           = ТаблицаПроверкиПериодовПланирования.Добавить();
		НС.СписокОбъектовРемонта      = Стр.СписокОбъектовРемонта;
		НС.ВидРемонтныхРабот         = Стр.ВидРемонтныхРабот;
		НС.ПериодичностьДетализации  = ПериодичностьДетализации;
		НС.ДатаПланирования          = ДатаПланирования;
		НС.ДатаОкончанияПланирования = ДатаОкончанияПланирования;
		НС.Регистратор               = Ссылка;
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПроверкиПериодовПланирования.СписокОбъектовРемонта,
	|	ТаблицаПроверкиПериодовПланирования.ПериодичностьДетализации,
	|	ТаблицаПроверкиПериодовПланирования.ДатаПланирования,
	|	ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования,
	|	ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот,
	|	ТаблицаПроверкиПериодовПланирования.Регистратор
	|ПОМЕСТИТЬ ТаблицаПроверкиПериодовПланирования1
	|ИЗ
	|	&ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ДатаПланирования),
	|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ПериодичностьДетализации),
	|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ОбъектРемонтныхРабот),
	|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.Регистратор),
	|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ВидРемонтныхРабот)
	|ИЗ
	|	РегистрСведений.торо_ПериодыПланированияППР КАК торо_ПериодыПланированияППР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиПериодовПланирования1 КАК ТаблицаПроверкиПериодовПланирования1
	|		ПО торо_ПериодыПланированияППР.ОбъектРемонтныхРабот = ТаблицаПроверкиПериодовПланирования1.СписокОбъектовРемонта
	|			И торо_ПериодыПланированияППР.ВидРемонтныхРабот = ТаблицаПроверкиПериодовПланирования1.ВидРемонтныхРабот
	|			И торо_ПериодыПланированияППР.ДатаПланирования <= ТаблицаПроверкиПериодовПланирования1.ДатаОкончанияПланирования
	|			И торо_ПериодыПланированияППР.ДатаОкончанияПланирования >= ТаблицаПроверкиПериодовПланирования1.ДатаПланирования
	|			И торо_ПериодыПланированияППР.Регистратор <> ТаблицаПроверкиПериодовПланирования1.Регистратор";
	
	Запрос.УстановитьПараметр("ТаблицаПроверкиПериодовПланирования", ТаблицаПроверкиПериодовПланирования);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ШаблонСообщения = НСтр("ru = 'Для оборудования %1 и вида ремонта ""%2"" на данный период уже составлен документ планирования: %3!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектРемонтныхРаботПредставление, Выборка.ВидРемонтныхРаботПредставление, Выборка.РегистраторПредставление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура УдалитьСтрокуДерева(ТекСтрокаДерева)
	
	Если ГруппировкаПоМаршруту Тогда 
		Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.ПолучитьРодителя().Ремонты, ТекСтрокаДерева.Ремонты, Ложь);
			
		Иначе 
			
			СтрокиВидаРемонтов = ТекСтрокаДерева.ПолучитьЭлементы();
			Для каждого Стр Из СтрокиВидаРемонтов Цикл
				
				УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.Ремонты, Стр.Ремонты, Истина, Истина);
				
			КонецЦикла;
			
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.Ремонты, ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка"), Истина, Истина);
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			
			ОчищатьОбъектыМаршрутов = НайтиВДеревеМаршруты(ТекСтрокаДерева.Ремонты);
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.Ремонты, ТекСтрокаДерева.ПолучитьРодителя().Ремонты, ОчищатьОбъектыМаршрутов);
			
		Иначе 
			
			СтрокиВидаРемонтов = ТекСтрокаДерева.ПолучитьЭлементы();
			Для каждого Стр Из СтрокиВидаРемонтов Цикл
				
				ОчищатьОбъектыМаршрутов = НайтиВДеревеМаршруты(Стр.Ремонты);
				УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(Стр.Ремонты, ТекСтрокаДерева.Ремонты, ОчищатьОбъектыМаршрутов, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьИнвНомера()
	
	элементыДерева = Дерево.ПолучитьЭлементы();
	массивЭлементов = Новый Массив;
	Для каждого текСтрока из элементыДерева Цикл
		Если типЗнч(текСтрока.Ремонты) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда 
			МассивЭлементов.Добавить(текСтрока.Ремонты);
		КонецЕсли;
		ПолучитьСписокОР(текСтрока.ПолучитьЭлементы(), МассивЭлементов);
	КонецЦикла;
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка,
	|	торо_ОбъектыРемонта.ИнвентарныйНомер
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&МассивОР)";
	
	Запрос.УстановитьПараметр("МассивОР", массивЭлементов);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Результат.Выгрузить(); 
	тз.Индексы.Добавить("Ссылка");
	
	Для каждого текСтрока из элементыДерева Цикл
		Если типЗнч(текСтрока.Ремонты) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда 
			НайС = тз.найти(текСтрока.ремонты, "Ссылка");
			Если найс <> Неопределено Тогда
				текСтрока.ИнвентарныйНомер =  Найс.ИнвентарныйНомер; 
			КонецЕсли;
		КонецЕсли;
		УстановитьИнвНомера(текСтрока.ПолучитьЭлементы(), тз);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьИнвНомера (ЭлементыДерева, тз)
	Для каждого текСтрока из ЭлементыДерева Цикл
		Если типЗнч(текСтрока.Ремонты) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда 
			НайС = тз.найти(текСтрока.ремонты, "Ссылка");
			Если найс <> Неопределено Тогда 
				текСтрока.ИнвентарныйНомер =  Найс.ИнвентарныйНомер; 
			КонецЕсли;
		КонецЕсли;
		УстановитьИнвНомера(текСтрока.ПолучитьЭлементы(), тз);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура ПолучитьСписокОР(ЭлементыДерева, МассивЭлементов)
	Для каждого текСтрока из элементыДерева Цикл
		Если типЗнч(текСтрока.Ремонты) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда 
			МассивЭлементов.Добавить(текСтрока.Ремонты);
		КонецЕсли;
		ПолучитьСписокОР(текСтрока.ПолучитьЭлементы(), МассивЭлементов);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПерегруппировкиДерева()
	
	Для каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если ТипЗнч(Строка.Ремонты) = Тип("Строка") Тогда
			Для Каждого СтрокаУр1 Из Строка.ПолучитьЭлементы() Цикл
				Если СтрокаУр1.ПолучитьЭлементы().Количество() = 0 Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	Объект.ПланРемонтов.Очистить();
	Объект.Маршруты.Очистить();
	
	Основание = Объект.ДокументОснование;	
	
	Если ЗначениеЗаполнено(Основание) тогда
		Объект.Подразделение = Основание.Подразделение;
		Объект.Организация = Основание.Организация;
	Иначе
		Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
	КонецЕсли;

	Если Основание.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		Объект.ДатаПланирования = Основание.ДатаПланирования;
		Объект.КоличествоПериодов = 1;
		Объект.ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
	Иначе
		Объект.ДатаПланирования = Основание.ДатаПланирования;
		Объект.КоличествоПериодов = Основание.КоличествоПериодов;
		Объект.ПериодичностьДетализации = Основание.ПериодичностьДетализации;
	КонецЕсли;
	
	Объект.Маршруты.Загрузить(Основание.Маршруты.Выгрузить());
	мРабочаяДата = ТекущаяДата();
	
	ЗагрузитьРемонтыИзДокументаОснования();
	ОбновитьДоступностьДляРедактирования();
	
	ЗаполнитьДеревоНаСервере();
	ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоБезОбъектов(ГруппирПоМаршруту,ТабМаршрутов = Неопределено)
	
	Если ТабМаршрутов = Неопределено Тогда
		ТабМаршрутов = Объект.Маршруты.Выгрузить();
	КонецЕсли;
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево");
	
	Запрос = Новый Запрос(ТекстЗапросаДляПостроенияДерева(ГруппирПоМаршруту, Истина));
	Запрос.УстановитьПараметр("ТабМаршрутов", ТабМаршрутов);
	Результат = Запрос.Выполнить();
	
	ПостроитьДеревоПоРезультатуЗапроса(Результат, ДеревоРемонтовОбъект, ГруппирПоМаршруту, Истина);
	
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "Дерево");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивID =Объект.ПланРемонтов.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.ПроверитьДокументНаСвязанныеДокументыПоID(Объект.Ссылка, МассивID);
	Если МассивIDДляБлокировки.Количество() > 0 И Объект.Проведен Тогда
		
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;		
		Элементы.Дата.ТолькоПросмотр = Истина;		
		Элементы.Номер.ТолькоПросмотр = Истина;		
		Элементы.ДатаПланирования.ТолькоПросмотр = Истина;				
		Элементы.КоличествоПериодов.ТолькоПросмотр = Истина;				
		Элементы.ПериодичностьДетализации.ТолькоПросмотр = Истина;				
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	МассивДоступныхДляКорректировкиСтрок.Загрузить(Документы.торо_ГрафикРегламентныхМероприятийТОиР.ОбновитьДоступностьДляРедактирования(Объект.Ссылка, Объект.ВидОперации, Объект.ПланРемонтов.Выгрузить(,"ID")));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ГруппирПоМаршруту,ТабМаршрутов = Неопределено, ТабОбъектовМаршрута = Неопределено)
	
	Если ТабМаршрутов = Неопределено Тогда
		ТабМаршрутов = Объект.Маршруты.Выгрузить();
	КонецЕсли;
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево");
	
	Запрос = Новый Запрос(ТекстЗапросаДляПостроенияДерева(ГруппирПоМаршруту, Ложь));
	Запрос.УстановитьПараметр("ТабМаршрутов", ТабМаршрутов);
	Результат = Запрос.Выполнить();
	
	ПостроитьДеревоПоРезультатуЗапроса(Результат, ДеревоРемонтовОбъект, ГруппирПоМаршруту);
	
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "Дерево"); 
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоПоРезультатуЗапроса(РезультатЗапроса, ДеревоРемонтовОбъект, ГруппирПоМаршруту, БезОР = Ложь)
	
	ДеревоРемонтовОбъект.Строки.Очистить();
	ВыборкаПервыйУровень = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Корень = ПолучитьКореньДерева(ДеревоРемонтовОбъект);
	
	Пока ВыборкаПервыйУровень.Следующий() Цикл
		
		НС = Корень.Строки.Добавить();
		Если ГруппирПоМаршруту Тогда
			НС.Ремонты = ВыборкаПервыйУровень.Маршрут;
			НС.НомерКартинки = 9;
		Иначе 
			НС.Ремонты = ВыборкаПервыйУровень.ВидМероприятия;
			НС.НомерКартинки = 7;
		КонецЕсли;
		
		ВыборкаВторойУровень = ВыборкаПервыйУровень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВторойУровень.Следующий() Цикл
			
			Если ГруппирПоМаршруту Тогда
				Если ЗначениеЗаполнено(ВыборкаВторойУровень.ВидМероприятия) Тогда
					НовСтр = НС.Строки.Добавить();
					НовСтр.Ремонты = ВыборкаВторойУровень.ВидМероприятия;
					НовСтр.НомерКартинки = 7;
				КонецЕсли;
			Иначе 
				Если ЗначениеЗаполнено(ВыборкаВторойУровень.Маршрут) Тогда
					НовСтр = НС.Строки.Добавить();
					НовСтр.Ремонты = ВыборкаВторойУровень.Маршрут;
					НовСтр.НомерКартинки = 9;
				КонецЕсли;
			КонецЕсли;
			
			Если Не БезОР Тогда
				Если НовСтр <> Неопределено И ЗначениеЗаполнено(НовСтр.Ремонты) Тогда
					
					ВыборкаОР = ВыборкаВторойУровень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаОР.Следующий() Цикл
						
						Если ЗначениеЗаполнено(ВыборкаОР.ОбъектРемонта) Тогда
							НСтр = НовСтр.Строки.Добавить();
							НСтр.Ремонты = ВыборкаОР.ОбъектРемонта;
							НСтр.ИнвентарныйНомер = ВыборкаОР.ИнвентарныйНомер;
							НСтр.НомерКартинки = 0;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ПоказыватьОбъекты = Ложь;
					Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьОР.Пометка = ПоказыватьОбъекты;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКореньДерева(ДеревоОбъектов)
	
	Корень = ДеревоОбъектов.Строки.Найти(4, "НомерКартинки", Истина);
	Если Корень = Неопределено Тогда
		
		Корень = ДеревоОбъектов.Строки.Добавить();
		Корень.Ремонты = НСтр("ru = '<Списки объектов и виды мероприятий>'");
		Корень.НомерКартинки = 4;
		
	КонецЕсли;
	Возврат Корень;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаДляПостроенияДерева(ГруппирПоМаршруту, БезОР)
	
	ТекстЗапроса = "";
	Если БезОР Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабМаршрутов.СписокОбъектовРемонта,
		|	ТабМаршрутов.ВидМероприятия
		|ПОМЕСТИТЬ ТабМаршрутов
		|ИЗ
		|	&ТабМаршрутов КАК ТабМаршрутов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабМаршрутов.СписокОбъектовРемонта КАК Маршрут,
		|	ТабМаршрутов.ВидМероприятия КАК ВидМероприятия,
		|   0 КАК КартинкаМаршрут,
		|   0 КАК КартинкаВидМероприятия
		|ИЗ
		|	ТабМаршрутов КАК ТабМаршрутов ";
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабМаршрутов.СписокОбъектовРемонта КАК СписокОбъектовРемонта,
		|	ТабМаршрутов.ВидМероприятия КАК ВидМероприятия
		|ПОМЕСТИТЬ ТабМаршрутов
		|ИЗ
		|	&ТабМаршрутов КАК ТабМаршрутов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов КАК СписокОбъектовРемонта,
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_МаршрутыРегламентныхМероприятий.НомерПоПорядку КАК НомерПоПорядку
		|ПОМЕСТИТЬ ТабОбъектовМаршрута
		|ИЗ
		|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
		|ГДЕ
		|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов В
		|			(ВЫБРАТЬ
		|				ТабМаршрутов.СписокОбъектовРемонта КАК СписокОбъектовРемонта
		|			ИЗ
		|				ТабМаршрутов КАК ТабМаршрутов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабОбъектовМаршрута.СписокОбъектовРемонта КАК СписокОбъектовРемонта,
		|	ТабОбъектовМаршрута.ОбъектРемонта КАК ОбъектРемонта,
		|	ТабОбъектовМаршрута.НомерПоПорядку КАК НомерПоПорядку
		|ПОМЕСТИТЬ ТабРазрешенныхОбъектовМаршрута
		|ИЗ
		|	ТабОбъектовМаршрута КАК ТабОбъектовМаршрута
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО ТабОбъектовМаршрута.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабМаршрутов.СписокОбъектовРемонта КАК Маршрут,
		|	ТабМаршрутов.ВидМероприятия КАК ВидМероприятия,
		|	ЕСТЬNULL(ТабОбъектовМаршрута.ОбъектРемонта, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК ОбъектРемонта,
		|	0 КАК КартинкаМаршрут,
		|	0 КАК КартинкаВидМероприятия,
		|	0 КАК КартинкаОбъектРемонта,
		|	ЕСТЬNULL(торо_ОбъектыРемонта.ИнвентарныйНомер, """") КАК ИнвентарныйНомер
		|ИЗ
		|	ТабМаршрутов КАК ТабМаршрутов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабРазрешенныхОбъектовМаршрута КАК ТабОбъектовМаршрута
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|			ПО ТабОбъектовМаршрута.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
		|		ПО ТабМаршрутов.СписокОбъектовРемонта = ТабОбъектовМаршрута.СписокОбъектовРемонта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТабОбъектовМаршрута.НомерПоПорядку";
		
	КонецЕсли;
	Если ГруппирПоМаршруту Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		" ИТОГИ ПО
		|	Маршрут" + ?(БезОР, "",", ВидМероприятия");
		
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		" ИТОГИ ПО
		|	ВидМероприятия"  + ?(БезОР, "",", Маршрут");
		
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДерево(ДокОбъект = Неопределено, ОбъектРемонтаДляОтбора = Неопределено)
	
	Если ДокОбъект = Неопределено Тогда
		ТЧДляЗаписиМаршруты = Объект.Маршруты;
	Иначе
		ТЧДляЗаписиМаршруты = ДокОбъект.Маршруты;
	КонецЕсли;
	ТЧДляЗаписиМаршруты.Очистить();
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево", Тип ("ДеревоЗначений"));
	Если ОбъектРемонтаДляОтбора = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДеревоРемонтовОбъект.Строки Цикл
			
			ЗаписатьСтрокуДереваВТЧ(СтрокаДерева, ТЧДляЗаписиМаршруты);
			
		КонецЦикла;
	Иначе
		СтрокаОР = ДеревоРемонтовОбъект.Строки.Найти(ОбъектРемонтаДляОтбора,"Ремонты",Истина);
		ЗаписатьСтрокуДереваВТЧ(СтрокаОР, ТЧДляЗаписиМаршруты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуДереваВТЧ(СтрокаДерева, ТЧДляЗаписиМаршруты)
	
	Если ГруппировкаПоМаршруту Тогда
		Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			НоваяСтрокаТЗ = ТЧДляЗаписиМаршруты.Добавить();
			НоваяСтрокаТЗ.ВидМероприятия = СтрокаДерева.Ремонты;
			НоваяСтрокаТЗ.СписокОбъектовРемонта = СтрокаДерева.Родитель.Ремонты;
		ИначеЕсли ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") И СтрокаДерева.Строки.Количество() = 0 Тогда
			НоваяСтрокаТЗ = ТЧДляЗаписиМаршруты.Добавить();
			НоваяСтрокаТЗ.СписокОбъектовРемонта = СтрокаДерева.Ремонты;
		КонецЕсли;
		
		Для Каждого СтрокаДЗ Из СтрокаДерева.Строки Цикл
			
			ЗаписатьСтрокуДереваВТЧ(СтрокаДЗ, ТЧДляЗаписиМаршруты);
			
		КонецЦикла;
	Иначе
		Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			НоваяСтрокаТЗ = ТЧДляЗаписиМаршруты.Добавить();
			НоваяСтрокаТЗ.СписокОбъектовРемонта = СтрокаДерева.Ремонты;
			НоваяСтрокаТЗ.ВидМероприятия = СтрокаДерева.Родитель.Ремонты;
		ИначеЕсли ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") И СтрокаДерева.Строки.Количество() = 0 Тогда
			НоваяСтрокаТЗ = ТЧДляЗаписиМаршруты.Добавить();
			НоваяСтрокаТЗ.ВидМероприятия = СтрокаДерева.Ремонты;
		КонецЕсли;
		
		Для Каждого СтрокаДЗ Из СтрокаДерева.Строки Цикл
			
			ЗаписатьСтрокуДереваВТЧ(СтрокаДЗ, ТЧДляЗаписиМаршруты);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКолонкиРемонтов()
	
	Если ГруппировкаПоМаршруту Тогда
		Если ПоказыватьОбъекты Тогда
			Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРемонты.Заголовок = НСтр("ru = 'Список объектов / Вид мероприятия / Объект ремонта'");
		Иначе
			Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРемонты.Заголовок = НСтр("ru = 'Список объектов / Вид мероприятия'");
		КонецЕсли;
	Иначе
		Если ПоказыватьОбъекты Тогда
			Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРемонты.Заголовок = НСтр("ru = 'Вид мероприятия / Список объектов / Объект ремонта'");
		Иначе
			Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРемонты.Заголовок = НСтр("ru = 'Вид мероприятия / Список объектов'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеВетвиДеревьев()
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНаСервере()
	
	Если ПоказыватьОбъекты Тогда
		ЗаполнитьДерево(ГруппировкаПоМаршруту);
	Иначе
		ЗаполнитьДеревоБезОбъектов(ГруппировкаПоМаршруту);
	КонецЕсли;
	
	УстановитьЗаголовокКолонкиРемонтов();
	
КонецПроцедуры

// Если открываем документ их обработки и нужно активировать указанную строку
&НаСервере
Процедура АктивироватьСтрокуИзВне(ТекСтрокаID)
	
	ПараметрПоиска = Новый Структура;
	ПараметрПоиска.Вставить("ID",ТекСтрокаID); 
	НужнаяСтрокаПланРемонтов = Объект.ПланРемонтов.НайтиСтроки(ПараметрПоиска); 
	
	ДеревоРемонтовОбъект = Дерево.ПолучитьЭлементы();	
	
	Для каждого СтрокаОбъект ИЗ ДеревоРемонтовОбъект Цикл
		Если СтрокаОбъект.Ремонты =	НужнаяСтрокаПланРемонтов[0].СписокОбъектовРемонта Тогда
			Для Каждого СтрокаРемонт ИЗ СтрокаОбъект.ПолучитьЭлементы() Цикл
				Если СтрокаРемонт.Ремонты =	НужнаяСтрокаПланРемонтов[0].ВидРемонтныхРабот Тогда
					Элементы.ПланРемонтов.ТекущаяСтрока = НужнаяСтрокаПланРемонтов[0].НомерСтроки-1;
					Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущаяСтрока = СтрокаРемонт.ПолучитьИдентификатор();	
					Прервать;	
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	Для каждого СтрокаРемонта из Объект.ПланРемонтов Цикл
		
		ЗначениеСоответствия = РезультатЗакрытия[СтрокаРемонта.ID];
		Если ЗначениеСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРемонта.СпособВыполнения = ЗначениеСоответствия.СпособВыполнения;
		СтрокаРемонта.Исполнитель = ЗначениеСоответствия.Исполнитель;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока)
	
	Если ГруппировкаПоМаршруту Тогда
		Если ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			СписокОР = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот", СписокОР, ТекущаяСтрока.Ремонты);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот, Замещен", СписокОР, ТекущаяСтрока.Ремонты, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			ВидМероприятия = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			СписокОР = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот", СписокОР, ВидМероприятия);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот, Замещен", СписокОР, ВидМероприятия, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта", ТекущаяСтрока.Ремонты);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, Замещен", ТекущаяСтрока.Ремонты, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
		Иначе
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Неопределено;
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Истина;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
			
		КонецЕсли; 
	Иначе
		
		Если ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			ВидМероприятия = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот", ТекущаяСтрока.Ремонты, ВидМероприятия);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот, Замещен", ТекущаяСтрока.Ремонты, ВидМероприятия, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			СписокОР = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			ВидМероприятия = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот", СписокОР, ВидМероприятия);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот, Замещен", СписокОР, ВидМероприятия, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРемонтныхРабот", ТекущаяСтрока.Ремонты);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРемонтныхРабот, Замещен", ТекущаяСтрока.Ремонты, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Истина;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
		Иначе
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Неопределено;
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Истина;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьСтрокиВПланеРемонтовПоID(РемонтыТекСтроки, РемонтыСтрокиРодителя = Неопределено)
	
	// Данный блок операторов выясняет, нет ли строк в ДеревоПланаГрафикаППРСУчетомПозиции, у которых есть подчиненные
	// строки в ПланРемонтов, которые должны быть заблокированы по ID строки из-за наличия связанных документов
	// и также устанавливает флаг блокировки изменений для строки в ДеревоПланаГрафикаППРСУчетомПозиции.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта,
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ВидРемонтныхРабот
	|ИЗ
	|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
	|ГДЕ
	|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка = &Ссылка
	|	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID В (&ID)
	|";
	Если ТипЗнч(РемонтыТекСтроки) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Запрос.Текст = Запрос.Текст +	
		"	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта = &СписокОбъектовРемонта
		|";
		Запрос.Текст = Запрос.Текст +			
		"	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ВидРемонтныхРабот = &ВидРемонтныхРабот
		|";
		Запрос.УстановитьПараметр("СписокОбъектовРемонта", РемонтыСтрокиРодителя);
		Запрос.УстановитьПараметр("ВидРемонтныхРабот", РемонтыТекСтроки);
	ИначеЕсли ТипЗнч(РемонтыТекСтроки) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") и РемонтыСтрокиРодителя <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст +	
		"	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта = &СписокОбъектовРемонта
		|";
		Запрос.УстановитьПараметр("СписокОбъектовРемонта", РемонтыТекСтроки);
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + ";";
	
	Запрос.УстановитьПараметр("ID", МассивIDДляБлокировки.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);	
	
	Результат = Запрос.Выполнить();
	ТаблицаБлокируемых = Результат.Выгрузить();
	
	Если ТаблицаБлокируемых.Количество() > 0 Тогда
		МодифицируемыйОбъектРемонта = Истина;
	Иначе
		МодифицируемыйОбъектРемонта = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиВДеревеМаршруты(Маршрут)
	ДеревоСГруппировкойПоВидуМероприятия = РеквизитФормыВЗначение("Дерево");
	
	МассивСтрок = ДеревоСГруппировкойПоВидуМероприятия.Строки.НайтиСтроки(Новый Структура("Ремонты", Маршрут), Истина);	
	Если МассивСтрок.Количество() = 1 Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(СписокОР, ВидРемонта, ОчищатьОбъектыМероприятий, УдалятьСтрокиТЧМаршрутов = Ложь)
	
	// Отбор строк в плане ремонтов по текущей строке
	СтруктураОтбора = Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот", СписокОР, ВидРемонта);
	
	МассивСтрок = Объект.ПланРемонтов.НайтиСтроки(СтруктураОтбора);
	Для Каждого Элемент Из МассивСтрок Цикл
		
		Объект.ПланРемонтов.Удалить(Элемент);
		
	КонецЦикла; 
	
	СтруктураОтбора = Новый Структура("СписокОбъектовРемонта, ВидМероприятия", СписокОР, ВидРемонта);
	
	МассивСтрок = Объект.Маршруты.НайтиСтроки(СтруктураОтбора);
	Для Каждого Элемент Из МассивСтрок Цикл
		
		Если УдалятьСтрокиТЧМаршрутов Тогда
			Объект.Маршруты.Удалить(Элемент);
		Иначе
			Если ГруппировкаПоМаршруту Тогда
				Элемент.ВидМероприятия = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
			Иначе
				Элемент.СписокОбъектовРемонта = ПредопределенноеЗначение("Справочник.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГантаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние("Построение диаграммы ремонтов Плана-графика...");
		ПостроитьДиаграммуГантаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДиаграммуГантаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда		
		мДатаОкончанияПланирования = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.КоличествоПериодов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран период планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево");
	ОбновитьДоступностьДляРедактирования();
	
	СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
	Если НЕ СортироватьПоНаименованию Тогда
		ТаблицаОР = Новый ТаблицаЗначений;
		ТаблицаОР.Колонки.Добавить("СписокОбъектовРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));
		ТаблицаОР.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		Сч = 1;
		Для каждого Элемент Из ДеревоРемонтовОбъект.Строки Цикл
			
			НС = ТаблицаОР.Добавить();
			НС.СписокОбъектовРемонта = Элемент.Ремонты;
			НС.НомерСтроки = Сч;
			Сч = Сч + 1;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	ОтображатьЗамещенные = Истина;
	ТаблицаПланРемонтовИсходная = ?(ОтображатьЗамещенные, Объект.ПланРемонтов.Выгрузить(), Объект.ПланРемонтов.Выгрузить(Новый Структура("Замещен",Ложь)));
	
	Если Не ОтображатьЗамещенные Тогда
		Для Каждого СтрокаПланаРемонтов Из ТаблицаПланРемонтовИсходная Цикл
			Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И СтрокаПланаРемонтов.ЗамещенСт Тогда
				СтрокаПланаРемонтов.ДатаНачСт = Дата(1,1,1);
				СтрокаПланаРемонтов.ДатаКонСт = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПланРемонтовИсходная = ЗаполнитьДоступностьДляРедактирования(ТаблицаПланРемонтовИсходная);
	
	Если НЕ СортироватьПоНаименованию Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.СписокОбъектовРемонта КАК ОбъектРемонтныхРабот,
		|	Таб.НомерСтроки
		|ПОМЕСТИТЬ ПорядокОР
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабПланРемонтов.ID,
		|	ТабПланРемонтов.ОбъектРемонтныхРабот,
		|	ТабПланРемонтов.ВидРемонтныхРабот,
		|	ТабПланРемонтов.ДатаКон,
		|	ТабПланРемонтов.ДатаНач,
		|	ТабПланРемонтов.Отменен,
		|	ТабПланРемонтов.Замещен,
		|	ТабПланРемонтов.ДатаНачСт,
		|	ТабПланРемонтов.ДатаКонСт,
		|	ТабПланРемонтов.ЗамещенСт
		|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
		|ИЗ
		|	&ТаблицаРемонтов КАК ТабПланРемонтов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабПланРемонтов.ID,
		|	ТабПланРемонтов.ОбъектРемонтныхРабот,
		|	ТабПланРемонтов.ВидРемонтныхРабот,
		|	ТабПланРемонтов.ДатаКон,
		|	ТабПланРемонтов.ДатаНач,
		|	ТабПланРемонтов.Отменен,
		|	ТабПланРемонтов.Замещен,
		|	ТабПланРемонтов.ДатаНачСт,
		|	ТабПланРемонтов.ДатаКонСт,
		|	ТабПланРемонтов.ЗамещенСт,
		|	ПорядокОР.НомерСтроки КАК НомерОР
		|ИЗ
		|	торо_ПланГрафикРемонтаПланРемонтов КАК ТабПланРемонтов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОР КАК ПорядокОР
		|		ПО ТабПланРемонтов.ОбъектРемонтныхРабот = ПорядокОР.ОбъектРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаПланРемонтовИсходная);
		Запрос.УстановитьПараметр("Таб", ТаблицаОР);
		ТаблицаПланРемонтовИсходная = Запрос.Выполнить().Выгрузить();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабПланРемонтов.ID,
		|	ТабПланРемонтов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТабПланРемонтов.ВидРемонтныхРабот,
		|	ТабПланРемонтов.ДатаКон,
		|	ТабПланРемонтов.ДатаНач,
		|	ТабПланРемонтов.Отменен,
		|	ТабПланРемонтов.Замещен,
		|	ТабПланРемонтов.ДатаНачСт,
		|	ТабПланРемонтов.ДатаКонСт,
		|	ТабПланРемонтов.ЗамещенСт
		|ПОМЕСТИТЬ ТабПланРемонтов
		|ИЗ
		|	&ТабПланРемонтов КАК ТабПланРемонтов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабПланРемонтов.ID,
		|	ТабПланРемонтов.ОбъектРемонтныхРабот,
		|	ТабПланРемонтов.ВидРемонтныхРабот,
		|	ТабПланРемонтов.ДатаКон,
		|	ТабПланРемонтов.ДатаНач,
		|	ТабПланРемонтов.Отменен,
		|	ТабПланРемонтов.Замещен,
		|	ТабПланРемонтов.ДатаНачСт,
		|	ТабПланРемонтов.ДатаКонСт,
		|	ТабПланРемонтов.ЗамещенСт
		|ИЗ
		|	ТабПланРемонтов КАК ТабПланРемонтов";
		Запрос.УстановитьПараметр("ТабПланРемонтов",ТаблицаПланРемонтовИсходная);
		ТаблицаПланРемонтовИсходная = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	ТаблицаПланРемонтовИсходная.Колонки.Добавить("ДокументППР", Новый ОписаниеТипов("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР"));
	ТаблицаПланРемонтовИсходная.Колонки.Добавить("ЕстьДвиженияПоВЗ", Новый ОписаниеТипов("Булево"));
	ТаблицаПланРемонтовИсходная.Колонки.Добавить("ДоступенДляРедактирования", Новый ОписаниеТипов("Булево"));
	ТаблицаПланРемонтовИсходная.ЗаполнитьЗначения(Объект.Ссылка, "ДокументППР");
	ТаблицаПланРемонтовИсходная.ЗаполнитьЗначения(ЛОЖЬ, "ЕстьДвиженияПоВЗ");
	ТаблицаПланРемонтовИсходная.ЗаполнитьЗначения(ИСТИНА, "ДоступенДляРедактирования");
	
	ТаблицаРемонтов = ТаблицаПланРемонтовИсходная;
	
	ДиаграммаГантаППР.Обновление = Ложь;
	торо_Ремонты.ПостроитьДиаграммуГантаДляППР(ДиаграммаГантаППР, ТаблицаРемонтов, СтруктураИерархии, Ложь,Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка, , , СортироватьПоНаименованию);
	ДиаграммаГантаППР.УстановитьПолныйИнтервал(НачалоДня(Объект.ДатаПланирования), КонецДня(мДатаОкончанияПланирования));
	ДиаграммаГантаППР.ОтображатьЛегенду = Ложь;
	ДиаграммаГантаППР.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоступностьДляРедактирования(парамПланРемонтов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.СписокОбъектовРемонта КАК ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт
	|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
	|ИЗ
	|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДоступенДляРедакторования.ID,
	|	ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТаблицаДоступенДляРедакторования
	|ИЗ
	|	&ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	ЕстьNULL(ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования,Истина) КАК ДоступенДляРедактирования
	|ИЗ
	|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТаблицаДоступенДляРедакторования.ID";
	
	Запрос.УстановитьПараметр("ПланРемонтов",парамПланРемонтов);
	Запрос.УстановитьПараметр("ТаблицаДоступенДляРедакторования",МассивДоступныхДляКорректировкиСтрок.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
// Процедура устанавливает внешний вид формы в зависимости от значения реквизита ВидОперации.
//
Процедура УстановитьВнешнийВидФормы()
	
	ЭтоКорректировкаППР = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка");
	
	Если ЭтоКорректировкаППР Тогда
		
		Элементы.ПериодСт.Видимость 	= Истина;
		
		Элементы.Период.Заголовок = НСтр("ru = 'Новый период'");
		Элементы.Период.Подсказка = НСтр("ru = 'Новые даты начала и окончания мероприятия'");
		ОтображатьЗамещенные = Ложь;
		Элементы.ПланРемонтовОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
		
	Иначе
		
		Элементы.ПериодСт.Видимость 	= Ложь;
		
		Элементы.Период.Заголовок = НСтр("ru = 'Период'");
		Элементы.Период.Подсказка = НСтр("ru = 'Даты начала и окончания мероприятия'");
		ОтображатьЗамещенные = Истина;
		Элементы.ПланРемонтовОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
		
	КонецЕсли; 
	
	Элементы.ДокументОснование.Видимость	= ЭтоКорректировкаППР;
	Элементы.ПланРемонтовОтменен.Видимость	= ЭтоКорректировкаППР;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеОпции(Опция)
	
	Возврат ПолучитьФункциональнуюОпцию(Опция);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтоимостиРемонтовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да тогда
		РассчитатьСтоимостиРемонтовНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостиРемонтовНаСервере(ТекущиеДанные = Неопределено)
	
	ПланРемонтов = Документы.торо_ГрафикРегламентныхМероприятийТОиР.РассчитатьСтоимостиРемонтов(Объект.ПланРемонтов.Выгрузить(), Объект.Ссылка, МассивДоступныхДляКорректировкиСтрок.Выгрузить(), ТекущиеДанные);
	
	Объект.ПланРемонтов.Загрузить(ПланРемонтов);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиТочку(Искомое, Точки, МассивТочек)
	
	Для каждого текТочка из Точки Цикл
		Если текТочка.Расшифровка = Искомое Тогда
			МассивТочек.Добавить(текТочка);
			Возврат ТекТочка;
		Иначе
			Результат = НайтиТочку(Искомое, ТекТочка.Точки, МассивТочек);
			Если Результат <> Неопределено Тогда
				МассивТочек.Добавить(текТочка);
				возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция НайтиНужнуюТочкуДиаграммыГанта(ОР, ВР)
	
	ТочкаОР = Неопределено;
	ТочкаВР = Неопределено;
	МассивТочек = Новый Массив;
	
	ТочкаОР = НайтиТочку(ОР, ДиаграммаГантаППР.Точки, массивТочек);
	
	Если ТочкаОР = Неопределено тогда
		Возврат Новый Массив;
	Иначе 
		ТочкаВР = НайтиТочку(ВР, ТочкаОР.Точки, массивТочек);
	КонецЕсли;
	
	Если ТочкаВР = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат массивТочек;
	
КонецФункции

&НаСервере 
Функция СоздатьДокумент_ЗаказНаВнутреннеПотребление(МассивРемонтов, СоздатьДокумент = Ложь)
	СтруктураПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура("МассивID", Новый Массив);
	
	МассивДанных = Новый Массив;
	
	Для Каждого Ремонт Из МассивРемонтов Цикл
		Структура = Новый Структура;
		Структура.Вставить("СписокОбъектовРемонта", Ремонт.СписокОбъектовРемонта);
		Структура.Вставить("ВидРемонтныхРабот"    , Ремонт.ВидРемонтныхРабот);
		Структура.Вставить("ДатаНач"              , Ремонт.ДатаНач);
		Структура.Вставить("ID"                   , Ремонт.ID);
		
		МассивДанных.Добавить(Структура);
		
		СтруктураПередаваемыхВОбработчикПараметров.МассивID.Добавить(Ремонт.ID);
	КонецЦикла;
	
	стрВозврата = Новый Структура;
	стрВозврата.Вставить("СтруктураПараметров", СтруктураПараметров);
	стрВозврата.Вставить("СтруктураПередаваемыхВОбработчикПараметров", СтруктураПередаваемыхВОбработчикПараметров);		
	
	МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(МассивДанных);	
	
	// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.
	Если МассивСтрокНоменклатуры = Неопределено и НЕ СоздатьДокумент Тогда
		МассивСтрокНоменклатуры = Новый Массив;
	ИначеЕсли МассивСтрокНоменклатуры = Неопределено и СоздатьДокумент Тогда
		Если МассивРемонтов.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'На все плановые материалы для выделенных списков объектов регламентного мероприятия введены заказы на внутреннее потребление'");
		Иначе
			ТекущийРемонт = МассивРемонтов[0];
			
			ШаблонСообщения = НСтр("ru = 'На все плановые материалы для списка объектов регламентного мероприятия %1 для вида ремонта %2 от %3 введены заказы на внутреннее потребление'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийРемонт.СписокОбъектовРемонта, ТекущийРемонт.ВидРемонтныхРабот, ТекущийРемонт.ДатаНач);
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат стрВозврата;
	КонецЕсли;		
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры",МассивСтрокНоменклатуры);
	
	ДатаНач = Неопределено;
	Для Каждого Ремонт Из МассивРемонтов Цикл
		Если ДатаНач = Неопределено Или Ремонт.ДатаНач < ДатаНач Тогда
			ДатаНач = Ремонт.ДатаНач;
		КонецЕсли;
	КонецЦикла;
	
	ТекДата = ТекущаяДата();
	Если НЕ ТекДата > ДатаНач Тогда 
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", ДатаНач);
	КонецЕсли;
	
	ШаблонКомментария = НСтр("ru='График регламентных мероприятий %1 от %2 %3 %4 %5'");
	СтрокаКомментария = "";
	
	Для Каждого Ремонт Из МассивРемонтов Цикл
		СтрокаКомментария = СтрокаКомментария + СтрШаблон(ШаблонКомментария,
						Объект.Номер, Объект.Дата, Ремонт.СписокОбъектовРемонта, Ремонт.ВидРемонтныхРабот, Формат(Ремонт.ДатаНач, НСтр("ru = 'ДФ=dd.MM.yyyy'"))) + Символы.ПС;
	КонецЦикла;
	
	ЗначенияЗаполнения.Вставить("Комментарий", СтрокаКомментария);
	
	// Тут может быть несколько разных складов, а документ содержит поле для одного склада!
	ТекущийСклад = МассивРемонтов[0].Склад;
	
	ЗначенияЗаполнения.Вставить("Склад", ТекущийСклад);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
	Если СоздатьДокумент Тогда
		
		Если СтруктураПараметров.Количество() = 0 тогда
			Возврат стрВозврата;
		КонецЕсли;
		
		Попытка
			ДокОбъект = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
			ДокОбъект.Заполнить(СтруктураПараметров.ЗначенияЗаполнения);
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			СтруктураПередаваемыхВОбработчикПараметров.Вставить("Ссылка", ДокОбъект.Ссылка);
			ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Неопределено, СтруктураПередаваемыхВОбработчикПараметров);
		Исключение
			ШаблонСообщения = НСтр("ru = 'При создании документа ""Заказ на внутренне потребеление"" произошла ошибка: %1.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат стрВозврата;	
КонецФункции

&НаСервере
Функция СформироватьМассивНоменклатурыКЗаказуСервере(МассивДанных)
	
	Если Не МассивДанных.Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураКЗаказу.Номенклатура КАК Номенклатура,
	               |	НоменклатураКЗаказу.Характеристика КАК Характеристика,
	               |	НоменклатураКЗаказу.Количество КАК Количество
	               |ПОМЕСТИТЬ НоменклатураКЗаказу
	               |ИЗ
	               |	&НоменклатураКЗаказу КАК НоменклатураКЗаказу
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
	               |ПОМЕСТИТЬ втДокументыНаОсновании
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&МассивID)
	               |	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументТОИР) = ТИП(Документ.торо_ГрафикРегламентныхМероприятийТОиР)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыНаВнутреннееПотребление.Номенклатура КАК Номенклатура,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗаказыНаВнутреннееПотребление.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА 1
	               |			ИНАЧЕ -1
	               |		КОНЕЦ * ЗаказыНаВнутреннееПотребление.КОформлению) КАК Количество,
	               |	ЗаказыНаВнутреннееПотребление.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ УжеЗаказаннаяНоменклатура
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	               |ГДЕ
	               |	ЗаказыНаВнутреннееПотребление.Регистратор В
	               |			(ВЫБРАТЬ
	               |				втДокументыНаОсновании.ДокументЕРП КАК Регистратор
	               |			ИЗ
	               |				втДокументыНаОсновании КАК втДокументыНаОсновании)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыНаВнутреннееПотребление.Номенклатура,
	               |	ЗаказыНаВнутреннееПотребление.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураКЗаказу.Номенклатура КАК Номенклатура,
	               |	НоменклатураКЗаказу.Количество - ЕСТЬNULL(УжеЗаказаннаяНоменклатура.Количество, 0) КАК Количество,
	               |	НоменклатураКЗаказу.Характеристика КАК Характеристика
	               |ИЗ
	               |	НоменклатураКЗаказу КАК НоменклатураКЗаказу
	               |		ЛЕВОЕ СОЕДИНЕНИЕ УжеЗаказаннаяНоменклатура КАК УжеЗаказаннаяНоменклатура
	               |		ПО НоменклатураКЗаказу.Номенклатура = УжеЗаказаннаяНоменклатура.Номенклатура
	               |ГДЕ
	               |	НоменклатураКЗаказу.Количество - ЕСТЬNULL(УжеЗаказаннаяНоменклатура.Количество, 0) > 0";
	
	МассивID = Новый Массив;
	Для Каждого Ремонт Из МассивДанных Цикл
		МассивID.Добавить(Ремонт.ID);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	НоменклатураКЗаказу = ПолучитьТаблицуНоменклатурыКЗаказу(МассивДанных);
		
	НоменклатураКЗаказу.Свернуть("Номенклатура, Характеристика", "Количество");
	Запрос.УстановитьПараметр("НоменклатураКЗаказу", НоменклатураКЗаказу);
	
	Товары = торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Запрос.Выполнить());
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

&НаСервере
Функция ПолучитьТаблицуНоменклатурыКЗаказу(Ремонты)
	
    ТаблицаСОРВР = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТаблицаСОРВР.Колонки.Добавить("СписокОбъектовРемонта",ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.торо_ВидыРемонтов"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТаблицаСОРВР.Колонки.Добавить("ВидРемонтныхРабот",ОписаниеТипов);
		
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив,,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТаблицаСОРВР.Колонки.Добавить("ДатаНач",ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив,,,,Новый КвалификаторыСтроки(36));
	ТаблицаСОРВР.Колонки.Добавить("ID",ОписаниеТипов);
	
	Для каждого Строка Из Ремонты Цикл
		НС = ТаблицаСОРВР.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСОРВР.ВидРемонтныхРабот КАК ВидРемонта,
	               |	ТаблицаСОРВР.ДатаНач КАК ДатаРемонта,
	               |	ТаблицаСОРВР.ID КАК ИД,
	               |	ТаблицаСОРВР.СписокОбъектовРемонта КАК СписокОбъектов
	               |ПОМЕСТИТЬ ТаблицаСОРВР
	               |ИЗ
	               |	&ТаблицаСОРВР КАК ТаблицаСОРВР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСОРВР.ВидРемонта КАК ВидРемонта,
	               |	торо_РегламентныеМероприятия.НормативныйРемонт КАК ТехКарта,
	               |	ТаблицаСОРВР.ДатаРемонта КАК ДатаРемонта,
	               |	ТаблицаСОРВР.ИД КАК ИД,
	               |	ТаблицаСОРВР.СписокОбъектов КАК СписокОбъектов
	               |ИЗ
	               |	ТаблицаСОРВР КАК ТаблицаСОРВР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятия
	               |		ПО ТаблицаСОРВР.СписокОбъектов = торо_РегламентныеМероприятия.СписокОбъектов
	               |			И ТаблицаСОРВР.ВидРемонта = торо_РегламентныеМероприятия.ВидМероприятия";

	
    Запрос.УстановитьПараметр("ТаблицаСОРВР", ТаблицаСОРВР);
	
	ТЗНоменклатура = Новый ТаблицаЗначений;
    ТЗНоменклатура.Колонки.Добавить("СписокОбъектов");
	ТЗНоменклатура.Колонки.Добавить("ВидРемонта");
	ТЗНоменклатура.Колонки.Добавить("ДатаРемонта");
	ТЗНоменклатура.Колонки.Добавить("ИД");
	ТЗНоменклатура.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТЗНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗНоменклатура.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьТЗНоменклатурой(ТЗНоменклатура, Выборка, Выборка.ТехКарта);	
	КонецЦикла; 
	
	Возврат ТЗНоменклатура;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЗНоменклатурой(ТЗ, Выборка, ТехКарта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТехКарты_СписокОпераций.Операция КАК Операция,
	               |	торо_ТехКарты_СписокОпераций.ID КАК ID,
	               |	торо_ТехКарты_СписокОпераций.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ СписокОпераций
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаРемонта, ИдентификаторТехКарты = &ТехКарта) КАК торо_ВерсииТехКартСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты_СписокОпераций
	               |		ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты_СписокОпераций.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	               |	торо_ТехКартыМатериальныеЗатраты.Упаковка КАК Упаковка,
	               |	торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	торо_ТехКартыМатериальныеЗатраты.ID КАК ID,
	               |	торо_ТехКартыМатериальныеЗатраты.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ СписокМатериалов
	               |ИЗ
	               |	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_ТехКартыМатериальныеЗатраты.Ссылка = СписокОпераций.Ссылка
	               |			И торо_ТехКартыМатериальныеЗатраты.ID = СписокОпераций.ID
	               |ГДЕ
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
				   |    И торо_ТехКартыМатериальныеЗатраты.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокМатериалов.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА СписокМатериалов.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ СписокМатериалов.Упаковка.Коэффициент
	               |	КОНЕЦ * СписокМатериалов.КоличествоУпаковок КАК Количество,
	               |	СписокМатериалов.Характеристика КАК Характеристика
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокМатериалов КАК СписокМатериалов
	               |		ПО (СписокМатериалов.ID = СписокОпераций.ID)";

	Запрос.УстановитьПараметр("ДатаРемонта", Выборка.ДатаРемонта);
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	
	Результат = Запрос.Выполнить();
	Таблица = Запрос.Выполнить().Выгрузить();

	Для каждого Строка Из Таблица Цикл
		
		Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда

			ЗаполнитьТЗНоменклатурой(ТЗ,Выборка,Строка.Операция);
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура) И ЗначениеЗаполнено(Строка.Количество) Тогда	
			
			НС = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			ЗаполнитьЗначенияСвойств(НС, Строка);
			
		КонецЕсли;
	
	КонецЦикла;	
КонецПроцедуры  

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры) 
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
		               |ИЗ
		               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		               |ГДЕ
		               |	торо_ИнтеграцияДокументов.ID В(&МассивID)
		               |	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		               |	И торо_ИнтеграцияДокументов.ДокументЕРП = &СсылкаНаДокЕРП";
					   
		Запрос.УстановитьПараметр("МассивID",ДополнительныеПараметры.МассивID);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП", ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.МассивID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(IDРемонтов, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		
		Для Каждого ID Из IDРемонтов Цикл
			Запись.ID           = ID;
			Запись.ДокументТОИР = ДокументТОИР;
			Запись.ДокументЕРП  = ДокументЕРП;
		КонецЦикла;
		
		Запись.Записать();
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЗаказНаВнПотребление(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	 ОбновитьДокументыЗаказНаВнПотреблениеСервер(Результат, ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыЗаказНаВнПотреблениеСервер(Результат = Неопределено, ДополнительныеПараметры = Неопределено) 
	
	Если Не ДоступныЗаказыНаВнутреннееПотребление Тогда
		Элементы.ДокументыЗаказНаВнПотребление.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	ДокументыЗаказНаВнПотребление.Очистить();
	
	СписокID = Объект.ПланРемонтов.Выгрузить(,"ID");
	Запрос  = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ЗаказНаВнутреннееПотребление,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументТОИР = &ЭтотДокумент
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЗаказИзЭтогоДокумента,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	торо_ИнтеграцияДокументов.ID
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&СписокID)
	               |	И НЕ торо_ИнтеграцияДокументов.ДокументЕРП.ПометкаУдаления
	               |	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ЗаказНаВнутреннееПотребление)";

	Запрос.УстановитьПараметр("СписокID",СписокID);
	Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
				   
	ДокументыЗаказНаВнПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Восстановление курсора
	Индентификатор = Неопределено;
	Сч = 0;
	Для Каждого Строка Из ДокументыЗаказНаВнПотребление Цикл
		Если Строка.ЗаказНаВнутреннееПотребление = ПоследнийВыбранныйЗаказ Тогда
			Индентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Если Не Индентификатор = Неопределено Тогда
		Элементы.ДокументыЗаказНаВнПотребление.ТекущаяСтрока = Индентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаказПомечен = ПометитьЗаказНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(ЗаказПомечен) <> Тип("Булево") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ЗаказПомечен);
		КонецЕсли; 
	КонецЕсли; 	
КонецПроцедуры
 
&НаСервере
Функция ПометитьЗаказНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектЗаказ = СтруктураПараметров.ЗаказСсылка.ПолучитьОбъект();
		
		Если ОбъектЗаказ.Проведен Тогда
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектЗаказ.ПометкаУдаления = Истина;
		ОбъектЗаказ.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ЗаказСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
		
	Исключение
	    
		СообщенияКВыводу = ПолучитьСообщенияПользователю();
		Если СообщенияКВыводу.Количество() > 0 Тогда
			Возврат Ложь;
		Иначе	
			Возврат ОписаниеОшибки();
		КонецЕсли;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВопросОПерезаполненииСкладаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПерезаполнятьСклад = (Результат = КодВозвратаДиалога.Да);
	ЗаполнитьСкладИзПодразделения(ПерезаполнятьСклад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладИзПодразделения(ПерезаполнятьСклад)
	
	Для каждого Строка Из Объект.ПланРемонтов Цикл	
		Если НЕ ЗначениеЗаполнено(Строка.Склад) ИЛИ ПерезаполнятьСклад Тогда
			торо_ЗаполнениеДокументовКлиент.ЗаполнитьСклад(Объект.Подразделение, Строка.Склад);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция СписокВидовМероприятийБезНормативов(ВыводитьВидыМероприятийБезНормативов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаМаршрутовИсходная.ВидМероприятия КАК ВидМероприятия,
	               |	ТаблицаМаршрутовИсходная.СписокОбъектовРемонта КАК СписокОбъектов
	               |ПОМЕСТИТЬ ТаблицаМаршрутов
	               |ИЗ
	               |	&ТаблицаМаршрутовИсходная КАК ТаблицаМаршрутовИсходная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаМаршрутов.ВидМероприятия КАК ВидМероприятия,
	               |	ТаблицаМаршрутов.СписокОбъектов КАК СписокОбъектов
	               |ИЗ
	               |	ТаблицаМаршрутов КАК ТаблицаМаршрутов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
	               |		ПО ТаблицаМаршрутов.СписокОбъектов = торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов
	               |			И ТаблицаМаршрутов.ВидМероприятия = торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия
	               |ГДЕ
	               |	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаМаршрутовИсходная", ПараметрыРасчета_МассивВыбранныхОР.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НачальноеКоличествоСтрок = ПараметрыРасчета_МассивВыбранныхОР.Количество();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("СписокОбъектовРемонта, ВидМероприятия", Выборка.СписокОбъектов, Выборка.ВидМероприятия);
		НайденныеСтроки = ПараметрыРасчета_МассивВыбранныхОР.НайтиСтроки(СтруктураПоиска);
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ВыводитьВидыМероприятийБезНормативов Тогда
			    ШаблонСообщения = НСтр("ru = 'Для вида мероприятия ""%1"" списка объектов регламентных мероприятий ""%2"" не заданы нормативы планирования!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, НайденнаяСтрока.ВидМероприятия, НайденнаяСтрока.СписокОбъектовРемонта);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		    ПараметрыРасчета_МассивВыбранныхОР.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ?(Выборка.Количество() = НачальноеКоличествоСтрок, Истина, Ложь);
КонецФункции

&НаКлиенте
Процедура РасcчитатьПараметрыГрафика(Команда)
	ПараметрыФормы = Новый Структура("ДатаНачалаПланирования, ПериодичностьДетализации", Объект.ДатаПланирования, Объект.ПериодичностьДетализации);
	ОткрытьФорму("ОбщаяФорма.торо_КалькуляторРасчетаКоличестваПериодов", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВидаОперации()
	Элементы.ВидОперации.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Функция СоответствиеСписковОбъектовВидамМероприятийПоИдентификаторам(ИдентификаторыСтрок)

	Результат = Новый Соответствие; // Ключ - список объектов РМ, значение - виды мероприятий;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ГруппировкаПоМаршруту Тогда
			
			СтрокиСписковОбъектов = Новый Массив;
			
			Если ТипЗнч(ДанныеСтроки.Ремонты) = Тип("Строка") Тогда // Это корень.	
				
				Для Каждого СтрокаСписокОбъектов Из ДанныеСтроки.ПолучитьЭлементы() Цикл
					СтрокиСписковОбъектов.Добавить(СтрокаСписокОбъектов);
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ДанныеСтроки.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
				
				СтрокиСписковОбъектов.Добавить(ДанныеСтроки);
				
			ИначеЕсли ТипЗнч(ДанныеСтроки.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда	
				
				СтрокиСписковОбъектов.Добавить(ДанныеСтроки.ПолучитьРодителя());
				
			ИначеЕсли ПоказыватьОбъекты И ТипЗнч(ДанныеСтроки.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда	
				
				СтрокиСписковОбъектов.Добавить(ДанныеСтроки.ПолучитьРодителя().ПолучитьРодителя());
				
			КонецЕсли; 
			
			Для Каждого СтрокаСписокОбъектов Из СтрокиСписковОбъектов Цикл
				
				ВидыМероприятий = Новый Массив;
				Для Каждого СтрокаВидМероприятия Из СтрокаСписокОбъектов.ПолучитьЭлементы() Цикл
					ВидыМероприятий.Добавить(СтрокаВидМероприятия.Ремонты);	
				КонецЦикла;	
				
				Результат.Вставить(СтрокаСписокОбъектов.Ремонты, ВидыМероприятий);	
			КонецЦикла;
			
		Иначе
			
			СтрокиСписковОбъектов = Новый Массив;
			
			Если ТипЗнч(ДанныеСтроки.Ремонты) = Тип("Строка") Тогда // Это корень.	
				
				Для Каждого СтрокаВидыМероприятий Из ДанныеСтроки.ПолучитьЭлементы() Цикл
					
					Для Каждого СтрокаСписокОбъектов Из СтрокаВидыМероприятий.ПолучитьЭлементы() Цикл 
						СтрокиСписковОбъектов.Добавить(СтрокаСписокОбъектов);
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ДанныеСтроки.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
				
				СтрокиСписковОбъектов.Добавить(ДанныеСтроки);
				
			ИначеЕсли ТипЗнч(ДанныеСтроки.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда	
				
				Для Каждого СтрокаСписокОбъектов Из ДанныеСтроки.ПолучитьЭлементы() Цикл 
						СтрокиСписковОбъектов.Добавить(СтрокаСписокОбъектов);
					КонецЦикла;
				
			ИначеЕсли ПоказыватьОбъекты И ТипЗнч(ДанныеСтроки.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда	
				
				СтрокиСписковОбъектов.Добавить(ДанныеСтроки.ПолучитьРодителя());
				
			КонецЕсли;
			
			Для Каждого СтрокаСписокОбъектов Из СтрокиСписковОбъектов Цикл
				
				ДобавленныеВидыМероприятий = Результат.Получить(СтрокаСписокОбъектов.Ремонты);
				Если ДобавленныеВидыМероприятий = Неопределено Тогда
					Результат.Вставить(СтрокаСписокОбъектов.Ремонты, Новый Массив);
					ДобавленныеВидыМероприятий = Результат.Получить(СтрокаСписокОбъектов.Ремонты);
				КонецЕсли;	
				
				СтрокаВидМероприятия = СтрокаСписокОбъектов.ПолучитьРодителя();
				Если ДобавленныеВидыМероприятий.Найти(СтрокаВидМероприятия.Ремонты) = Неопределено Тогда
					ДобавленныеВидыМероприятий.Добавить(СтрокаВидМероприятия.Ремонты);
				КонецЕсли;		
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти