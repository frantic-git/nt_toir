
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗаполнитьСписокОРВТекущейИерархии();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--	
	
	Если Объект.Проведен = Ложь Тогда
		Элементы.ФормаОтменаПроведения.Доступность = Ложь;
	КонецЕсли;
	
	торо_УправлениеДоступом.УстановитьДоступностьРедактированияПоОграничениюДоступаДляОР(ЭтаФорма, Объект.ПоложенияВСтруктуреИерархии.Выгрузить(), "ОбъектИерархии");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.СтруктураИерархии) Тогда 
		ТекСтруктураИерархии = ТекущийОбъект.СтруктураИерархии;
	Иначе
		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		   "НастройкиТОиР",
		   "ОсновнаяСтруктураИерархии",
		   Истина);
	КонецЕсли;
	
	КопияТЧ = ТекущийОбъект.ПоложенияВСтруктуреИерархии.Выгрузить();
	КопияТЧ.Свернуть("РодительИерархии");
	   
	Для Каждого СтрокаТЧ Из КопияТЧ Цикл 
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("РодительИерархии", СтрокаТЧ.РодительИерархии);
		ОтборСтрокПоРодителю = ТекущийОбъект.ПоложенияВСтруктуреИерархии.НайтиСтроки(ОтборСтруктура);
		МассивОР = Новый Массив;
		
		Для Каждого Строка Из ОтборСтрокПоРодителю Цикл 
			МассивОР.Добавить(Строка.ОбъектИерархии);
		КонецЦикла;
		
		Если торо_РаботаСИерархией20.ПеремещениеПриведетКЗацикливанию(МассивОР, ТекСтруктураИерархии, СтрокаТЧ.РодительИерархии) Тогда 
			ШаблонСообщения = НСтр("ru = 'Перемещение объекта ремонта приведет к зацикливанию. Перемещение в %1 невозможно.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.РодительИерархии);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Для каждого текСтрока из Объект.ПоложенияВСтруктуреИерархии Цикл
		ОповеститьОЗаписиНового(ТекСтрока.ОбъектИерархии);
	КонецЦикла;
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьСписокОРВТекущейИерархии();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИерархииНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Ответ = РезультатВопроса;
	
    Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.СтруктураИерархии = ДополнительныеПараметры.ВыбранноеЗначение;
		Объект.ПоложенияВСтруктуреИерархии.Очистить();
		ЗаполнитьСписокОРВТекущейИерархии();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураИерархииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.СтруктураИерархии <> ВыбранноеЗначение 
		И Объект.ПоложенияВСтруктуреИерархии.Количество() > 0 
		Тогда
		стрПараметры = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		ТекстВопроса = НСтр("ru = 'Таблица положений объектов ремонта будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СтруктураИерархииНачалоВыбораЗавершение", ЭтотОбъект, стрПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Модифицированность = Истина;
	Иначе
		Объект.СтруктураИерархии = ВыбранноеЗначение;
		ЗаполнитьСписокОРВТекущейИерархии();
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоложенияВСтруктуреИерархии

&НаКлиенте
Процедура ПоложенияВСтруктуреИерархииОбъектИерархииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		ПредыдущееПоложение = ПоложенияВСтруктуреИерархииОбъектИерархииОбработкаВыбораНаСервере(ВыбранноеЗначение, Объект.СтруктураИерархии);
		Элементы.ПоложенияВСтруктуреИерархии.ТекущиеДанные.ПредыдущееПоложение = ПредыдущееПоложение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложенияВСтруктуреИерархииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ЗначениеЗаполнено(Объект.СтруктураИерархии) Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Заполните значение структуры иерархии!'"), 60);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложенияВСтруктуреИерархииОбъектИерархииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПоложенияВСтруктуреИерархии.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ОбъектИерархии) Тогда
			ТекущиеДанные.ОбъектИерархии = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.РодительИерархии) Тогда
			ТекущиеДанные.РодительИерархии = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли; 
	КонецЕсли;  
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбораОР = Новый Структура;
	ПараметрыВыбораОР.Вставить("СтруктураИерархии", Объект.СтруктураИерархии);
	ПараметрыВыбораОР.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыВыбораОР,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПоложенияВСтруктуреИерархииРодительИерархииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбораОР = Новый Структура;
	ПараметрыВыбораОР.Вставить("СтруктураИерархии", Объект.СтруктураИерархии);
	ПараметрыВыбораОР.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	ПараметрыВыбораОР.Вставить("ЗапретитьИзменениеИерархии", Истина);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыВыбораОР,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложенияВСтруктуреИерархииРодительИерархииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если Текст = "" Тогда
			ДанныеВыбора = СписокОРВТекущейИерархии;
		Иначе
			ДанныеВыбора = Новый СписокЗначений;
			Для каждого СтрокаТаблицы из ТаблицаОРВТекущейИерархииДляВводаПоСтроке Цикл
				Если СтрНайти(СтрокаТаблицы.Наименование, Текст) > 0 ИЛИ СтрНайти(СтрокаТаблицы.Код, Текст) > 0 Тогда
					ДанныеВыбора.Добавить(СтрокаТаблицы.Значение, СтрокаТаблицы.Наименование + " ("+СтрокаТаблицы.Код+")");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция ПоложенияВСтруктуреИерархииОбъектИерархииОбработкаВыбораНаСервере(ОбъектРемонта, СтруктураИерархии)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии,
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
	|ИЗ
	|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
	|			&Дата,
	|			ОбъектИерархии = &ОбъектРемонта
	|				И СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.Удален Тогда
			Если НЕ ЗначениеЗаполнено(Выборка.РодительИерархии) Тогда
				Возврат "Корневая группа";
			КонецЕсли;
			
			Возврат Выборка.РодительИерархии;
		КонецЕсли;
	КонецЕсли;
	Возврат "Внесен в структуру иерархии";	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокОРВТекущейИерархии()
	
	СписокОРВТекущейИерархии.Очистить();
	ТаблицаОРВТекущейИерархииДляВводаПоСтроке.Очистить();
	
	Если ЗначениеЗаполнено(Объект.СтруктураИерархии) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии
		|ПОМЕСТИТЬ ВТ_Срез
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Период, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Срез.ОбъектИерархии КАК Значение,
		|	ВТ_Срез.ОбъектИерархии.Наименование КАК Наименование,
		|	ВТ_Срез.ОбъектИерархии.Код КАК Код
		|ИЗ
		|	ВТ_Срез КАК ВТ_Срез
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО ВТ_Срез.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка";
		
		Запрос.УстановитьПараметр("Период", ПолучитьМоментВремени(Объект.Ссылка, Объект.Дата));
		Запрос.УстановитьПараметр("СтруктураИерархии", Объект.СтруктураИерархии);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОРВТекущейИерархии.Добавить(Выборка.Значение, Выборка.Наименование + " ("+Выборка.Код+")");
			НовСтр = ТаблицаОРВТекущейИерархииДляВводаПоСтроке.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМоментВремени(Ссылка, Дата)
	
	Если НЕ Ссылка.Пустая() Тогда
		Возврат Ссылка.МоментВремени();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведенияРасширенная(Команда)
	Если Объект.Проведен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтменаПроведенияПослеОтветаНаВопрос", ЭтотОбъект);
		Текст = НСтр("ru = 'Отмена проведения этого документа может привести к некорректному отображению структуры иерархии объектов ремонта. Отменить проведение?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведенияПослеОтветаНаВопрос(Ответ, ДопПараметр) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Возврат;
	КонецЕсли;
	
	ОтменаПроведенияЗавершение();
	Оповестить("УстановленаПометка", , ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОтменаПроведенияЗавершение()
	ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	ЭтаФорма.Прочитать();
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
КонецПроцедуры

&НаКлиенте
Процедура ПометкаНаУдалениеРасширенная(Команда)
	
	Если Объект.Проведен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометкаНаУдалениеПослеОтветаНаВопрос", ЭтотОбъект);
		Текст = НСтр("ru = 'Отмена проведения этого документа может привести к некорректному отображению структуры иерархии объектов ремонта. Отменить проведение?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьПометкуУдаленияЗавершение();
		Оповестить("УстановленаПометка", , ЭтаФорма); 
     КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометкаНаУдалениеПослеОтветаНаВопрос(Ответ, ДопПараметр) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Возврат;
	КонецЕсли;
	УстановитьПометкуУдаленияЗавершение();
	Оповестить("УстановленаПометка", , ЭтаФорма); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаленияЗавершение()
	ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
	Пометка = Объект.ПометкаУдаления;
	ДокументОбъект.УстановитьПометкуУдаления(НЕ Пометка);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	ЭтаФорма.Прочитать();
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект, ЭтаФорма, "");
	// Заголовок формы--
КонецПроцедуры

#КонецОбласти

