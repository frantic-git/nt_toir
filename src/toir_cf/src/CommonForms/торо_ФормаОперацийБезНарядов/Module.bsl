////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем СозданыАкты;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДокОснование") Тогда
		ДокОснование = Параметры.ДокОснование;
	КонецЕсли;
	
	Если Параметры.Свойство("ТабОперацийБезНаряда") Тогда
		
		ТабОперацийБезНаряда = Параметры.ТабОперацийБезНаряда.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.ВводитьНаряд КАК ВводитьНаряд,
		               |	Таб.ОбъектРемонта КАК ОбъектРемонта,
		               |	Таб.ВидРемонта КАК ВидРемонта,
		               |	Таб.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	Таб.ДатаНачалаРемонта КАК ДатаНачалаРемонта,
		               |	Таб.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		               |	Таб.ID КАК ID,
		               |	Таб.ID_Операции КАК ID_Операции
		               |ПОМЕСТИТЬ ТабОперацийБезНаряда
		               |ИЗ
		               |	&ТабОперацийБезНаряда КАК Таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабОперацийБезНаряда.ВводитьНаряд КАК ВводитьНаряд,
		               |	ТабОперацийБезНаряда.ОбъектРемонта КАК ОбъектРемонта,
		               |	ТабОперацийБезНаряда.ВидРемонта КАК ВидРемонта,
		               |	ТабОперацийБезНаряда.РемонтнаяРабота КАК РемонтнаяРабота,
		               |	ВЫБОР
		               |		КОГДА ТабОперацийБезНаряда.ДатаНачалаРемонта = ДАТАВРЕМЯ(1, 1, 1)
		               |			ТОГДА торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала
		               |		ИНАЧЕ ТабОперацийБезНаряда.ДатаНачалаРемонта
		               |	КОНЕЦ КАК ДатаНачалаРемонта,
		               |	ВЫБОР
		               |		КОГДА ТабОперацийБезНаряда.ДатаОкончанияРемонта = ДАТАВРЕМЯ(1, 1, 1)
		               |			ТОГДА торо_АктуальныеПлановыеДатыРемонтов.ДатаОкончания
		               |		ИНАЧЕ ТабОперацийБезНаряда.ДатаОкончанияРемонта
		               |	КОНЕЦ КАК ДатаОкончанияРемонта,
		               |	ТабОперацийБезНаряда.ID КАК ID,
		               |	ТабОперацийБезНаряда.ID_Операции КАК ID_Операции
		               |ИЗ
		               |	ТабОперацийБезНаряда КАК ТабОперацийБезНаряда
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
		               |		ПО ТабОперацийБезНаряда.ID = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
		               |ИТОГИ ПО
		               |	ОбъектРемонта,
		               |	ДатаНачалаРемонта,
		               |	ВидРемонта";
		
		Запрос.УстановитьПараметр("ТабОперацийБезНаряда", ТабОперацийБезНаряда);
		Результат = Запрос.Выполнить();
		ВыборкаОбъектРемонта = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Дерево = РеквизитФормыВЗначение("РемонтныеРаботы");
		
		Пока ВыборкаОбъектРемонта.Следующий() Цикл
			
			НоваяСтрока = Дерево.Строки.Добавить();
			НоваяСтрока.Объект = ВыборкаОбъектРемонта.ОбъектРемонта;
			
			ВыборкаДатаНачала = ВыборкаОбъектРемонта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДатаНачала.Следующий() Цикл
								
				ВыборкаВидРемонта = ВыборкаДатаНачала.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаВидРемонта.Следующий() Цикл
					НС = НоваяСтрока.Строки.Добавить();
					НС.Объект = ВыборкаВидРемонта.ВидРемонта;
					
					ВыборкаДетЗаписи = ВыборкаВидРемонта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДетЗаписи.Следующий() Цикл
						
						НС.ДатаНачала = ВыборкаДетЗаписи.ДатаНачалаРемонта;
						НС.ДатаОкончания = ВыборкаДетЗаписи.ДатаОкончанияРемонта;
						
						НовСтр = НС.Строки.Добавить();
						НовСтр.Объект = ВыборкаДетЗаписи.РемонтнаяРабота;	
						НовСтр.ID = ВыборкаДетЗаписи.ID;
						НовСтр.ID_Операции = ВыборкаДетЗаписи.ID_Операции;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(Дерево, "РемонтныеРаботы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Развернуть(Команды.Развернуть);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не СозданыАкты Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно создать ""Акт о выполнении этапа работ"" поскольку документ-основание содержит ремонты с работами повышенной опасности. Требуется обязательно ввести документ ""Наряд на выполнение ремонтных работ""!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтныеРаботы

&НаКлиенте
Процедура РемонтныеРаботыВыбранПриИзменении(Элемент)
	
	ТекСтрока = Элементы.РемонтныеРаботы.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ПроставитьГалочкиПоВеткеВниз (ТекСтрока, ТекСтрока.Выбран);
		ПроставитьГалочкиПоВеткеВверх(ТекСтрока.ПолучитьРодителя(), ТекСтрока.Выбран);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВвестиНаряды(Команда)
	ВвестиНарядыНаСервере();
		
	СтруктураПараметров = Новый Структура;
	Основание = Новый Структура;
	Основание.Вставить("Основание", ДокОснование);
	Основание.Вставить("ОпасныеРаботы", Истина);
	Основание.Вставить("ИзНормативов", ИзНормативов);
	Основание.Вставить("ВыбранныеОперации", ВыбранныеОперации);
	СтруктураПараметров.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаОбъекта", СтруктураПараметров);
	
	СозданыАкты = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	
	Для каждого Стр Из РемонтныеРаботы.ПолучитьЭлементы() Цикл
		
		Стр.Выбран = Ложь;
		ПроставитьГалочкиПоВеткеВниз (Стр, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Для каждого Стр Из РемонтныеРаботы.ПолучитьЭлементы() Цикл
		
		Стр.Выбран = Истина;
		ПроставитьГалочкиПоВеткеВниз (Стр, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)	
	Для Каждого ТекСтрока Из РемонтныеРаботы.ПолучитьЭлементы() Цикл
		Элементы.РемонтныеРаботы.Развернуть(ТекСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Для каждого Стр Из РемонтныеРаботы.ПолучитьЭлементы() Цикл
		
		СвернутьПодчиненные(Стр);
		Элементы.РемонтныеРаботы.Свернуть(Стр.ПолучитьИдентификатор());
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ВвестиНарядыНаСервере()
	Дерево = РеквизитФормыВЗначение("РемонтныеРаботы");
	Рез = Дерево.Строки.Найти(Истина, "Выбран", Истина); 
	
	Если Рез = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран ни один ремонт!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Для каждого СтрокаОР Из Дерево.Строки Цикл
		Если Не СтрокаОР.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаВР Из СтрокаОР.Строки Цикл
			Если Не СтрокаВР.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаОперации Из СтрокаВР.Строки Цикл
				Если Не СтрокаОперации.Выбран Тогда
					Продолжить;
				КонецЕсли;
				
				НС = ВыбранныеОперации.Добавить();
				НС.ДатаНачалаРемонта = СтрокаВР.ДатаНачала;
				НС.ДатаОкончанияРемонта = СтрокаВР.ДатаОкончания; 
				НС.ВидРемонта = СтрокаВР.Объект;
				НС.ID = СтрокаОперации.ID;
				НС.ID_Операции = СтрокаОперации.ID_Операции;
				НС.РемонтнаяРабота = СтрокаОперации.Объект;
				НС.ОбъектРемонта = СтрокаОР.Объект;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ВыбранныеОперации.Количество() 
		И (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") 
		Или ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")) Тогда
		ИзНормативов = Ложь;
	ИначеЕсли ВыбранныеОперации.Количество() 
		И (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта")
		Или ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")) Тогда
		ИзНормативов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьГалочкиПоВеткеВниз(СтрокаДерева, ЗначГалки)
	
	Для Каждого Элем Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Элем.Выбран = ЗначГалки;
		ПроставитьГалочкиПоВеткеВниз(Элем, ЗначГалки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьГалочкиПоВеткеВверх(СтрокаДерева, ЗначГалки)
	Если СтрокаДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначГалки Или Не ЕстьПодчиненныеСУстановленнымФлагом(СтрокаДерева) Тогда
		СтрокаДерева.Выбран = ЗначГалки;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПроставитьГалочкиПоВеткеВверх(СтрокаДерева.ПолучитьРодителя(), ЗначГалки);
КонецПроцедуры

&НаКлиенте
Функция ЕстьПодчиненныеСУстановленнымФлагом(СтрокаДерева)
	Для каждого ТекущаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
	    Если ТекущаяСтрока.Выбран Тогда
		    Возврат Истина;
		КонецЕсли;
		
		Если ЕстьПодчиненныеСУстановленнымФлагом(ТекущаяСтрока) Тогда
		    Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьПодчиненные(Строка)
	
	Для каждого Стр Из Строка.ПолучитьЭлементы() Цикл
		
		СвернутьПодчиненные(Стр);
		Элементы.РемонтныеРаботы.Свернуть(Стр.ПолучитьИдентификатор());
		
	КонецЦикла; 	
	
КонецПроцедуры

#Если Клиент Тогда
	СозданыАкты = Ложь;
#КонецЕсли

#КонецОбласти



