
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭтоВебКлиент = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	
	ВыполнитьПроверкуПравДоступа("СохранениеДанныхПользователя", Метаданные);
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Если Не ЭтоВебКлиент Тогда
		Элементы.ГруппаУстановитьРасширениеРаботыСФайламиНаКлиенте.Видимость = Ложь;
	КонецЕсли;
	ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
	ПоказыватьПредупреждениеОбУстановленныхОбновленияхПрограммы = СтандартныеПодсистемыСервер.ПоказыватьПредупреждениеОбУстановленныхОбновленияхПрограммы();
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.Пользователи
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаСФайлами
	НастройкиРаботыСФайлами = РаботаСФайлами.НастройкиРаботыСФайлами();
	
	СпрашиватьРежимРедактированияПриОткрытииФайла = НастройкиРаботыСФайлами.СпрашиватьРежимРедактированияПриОткрытииФайла;
	
	Если НастройкиРаботыСФайлами.ДействиеПоДвойномуЩелчкуМыши = "ОткрыватьФайл" Тогда
		ДействиеПоДвойномуЩелчкуМыши = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
	Иначе
		ДействиеПоДвойномуЩелчкуМыши = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьКарточку;
	КонецЕсли;
	
	Если НастройкиРаботыСФайлами.СпособСравненияВерсийФайлов = "MicrosoftOfficeWord" Тогда
		СпособСравненияВерсийФайлов = Перечисления.СпособыСравненияВерсийФайлов.MicrosoftOfficeWord;
	Иначе
		СпособСравненияВерсийФайлов = Перечисления.СпособыСравненияВерсийФайлов.OpenOfficeOrgWriter;
	КонецЕсли;
	
	ПоказыватьПодсказкиПриРедактированииФайлов = НастройкиРаботыСФайлами.ПоказыватьПодсказкиПриРедактированииФайлов;
	ПоказыватьИнформациюЧтоФайлНеБылИзменен = НастройкиРаботыСФайлами.ПоказыватьИнформациюЧтоФайлНеБылИзменен;
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = НастройкиРаботыСФайлами.ПоказыватьЗанятыеФайлыПриЗавершенииРаботы;
	ПоказыватьКолонкуРазмер = НастройкиРаботыСФайлами.ПоказыватьКолонкуРазмер;
	
	// Заполнение настроек открытия файлов.
	СтрокаНастройки = НастройкиОткрытияФайлов.Добавить();
	СтрокаНастройки.ТипФайла = Перечисления.ТипыФайловДляВстроенногоРедактора.ТекстовыеФайлы;
	
	СтрокаНастройки.Расширение = НастройкиРаботыСФайлами.ТекстовыеФайлыРасширение;
	
	СтрокаНастройки.СпособОткрытия = НастройкиРаботыСФайлами.ТекстовыеФайлыСпособОткрытия;
	
	Если ЭтоВебКлиент Или Не ОбщегоНазначения.ЭтоWindowsКлиент() Тогда
		Элементы.НастройкаСканирования.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ЭлектроннаяПодпись
	Элементы.НастройкаЭП.Видимость = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись
	
	// =ТОиР==>
	ЗагрузитьНастройкиТОИР();
	// <==ТОиР=
	
	ФО_ИнтеграцияС1СДокументоборот = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот");
	Элементы.ИнтеграцияС1СДокументооборот.Видимость = ФО_ИнтеграцияС1СДокументоборот;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
#Если ВебКлиент Тогда	
	ОбновитьГруппуУстановкиРасширенияРаботыСФайлами();
#КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьОповещение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Страница Общие

&НаКлиенте
Процедура СведенияОПользователе(Команда)
	
	ПоказатьЗначение(, АвторизованныйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсональнаяНастройкаПроксиСервера(Команда)
	
	ПолучениеФайловИзИнтернетаКлиент.ОткрытьФормуПараметровПроксиСервера(Новый Структура("НастройкаПроксиНаКлиенте", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиенте(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьРасширениеРаботыСФайламиНаКлиентеЗавершение", ЭтотОбъект);
	НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппуУстановкиРасширенияРаботыСФайлами()
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьГруппуУстановкиРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппуУстановкиРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(Подключено, Элементы.ГруппаРасширениеРаботыСФайламиУстановлено, 
		Элементы.ГруппаРасширениеРаботыСФайламиНеУстановлено);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы(Команда)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница Печать

&НаКлиенте
Процедура НастройкаРабочегоКаталога(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаРабочегоКаталогаПродолжение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения,, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьДействиеПриВыбореМакетаПечатнойФормы(Команда)
	
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.ВыбораРежимаОткрытияМакета");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница РаботаСФайлами

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	РаботаСФайламиКлиент.ОткрытьФормуНастройкиСканирования();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭП(Команда)
	
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСКриптографиейНаКлиенте(Команда)
	НачатьУстановкуРасширенияРаботыСКриптографией(Неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ПредставлениеДанных

&НаКлиенте
Процедура ТаблицаПредставленийПриИзменении(Элемент)
	Элементы.Группа15.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредставленийФорматнаяСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТаблицаПредставлений.ТекущиеДанные;
	ОткрытьФорму("ОбщаяФорма.торо_КонструкторФорматнойСтроки",Новый Структура("ОбъектКонфигурации,ОбъектКонфигурацииСиноним,ФорматнаяСтрока",ТекДанные.ОбъектКонфигурации,ТекДанные.ОбъектКонфигурацииСиноним,ТекДанные.ФорматнаяСтрока),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ИнтеграцияС1СДокументооборот

&НаКлиенте
Процедура НастройкиАвторизации1СДокументооборот(Команда)
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница НастройкиТОиР

&НаКлиенте
Процедура ОсновнаяСтруктураИерархииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИерархияДляМобильногоПриложения) И ЗначениеЗаполнено(ОсновнаяСтруктураИерархии) Тогда
		Автоматическая = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ОсновнаяСтруктураИерархии, "СтроитсяАвтоматически");
		Если Автоматическая <> Истина Тогда
			ИерархияДляМобильногоПриложения = ОсновнаяСтруктураИерархии;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеПодразделениеПриИзменении(Элемент)
	торо_ЗаполнениеДокументовКлиент.ЗаполнитьСклад(ОсновноеПодразделение, ОсновнойСклад);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьНастройкиИЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьНастройкиТОИР()
	
	// =ТОиР==>
	ОсновнаяСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяСтруктураИерархии",
	Справочники.торо_СтруктурыОР.ПустаяСсылка());
	
	ИерархияДляМобильногоПриложения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ИерархияДляМобильногоПриложения",
	Справочники.торо_СтруктурыОР.ПустаяСсылка());
	
	ОсновноеНаправлениеОР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновноеНаправлениеОР",
	Справочники.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка());
	
	ОсновнаяОрганизация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяОрганизация",
	Справочники.Организации.ПустаяСсылка());
	
	ОсновноеПодразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновноеПодразделение",
	Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ОсновнойСклад = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнойСклад",
	Справочники.Склады.ПустаяСсылка());
	
	ОсновнойОтветственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнойОтветственный",
	Справочники.Пользователи.ПустаяСсылка());
	
	ОсновнойГрафикРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнойГрафикРаботы",
	Истина);
	
	ОсновнойИнициаторДефекта = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнойИнициаторДефекта",
	Неопределено);
	
	ОсновнойПериодПланирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнойПериодПланирования",
	Истина);
	
	ЗапретитьОткрытиеНесколькихСеансов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ЗапретитьОткрытиеНесколькихСеансов",
	Истина);
	
	ПоказыватьПоложениеОР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПоказыватьПоложениеОР",
	Истина);
	
	ПодставлятьТекущуюДатуВоВнешнееОснованиеИВыявленныеДефекты = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПодставлятьТекущуюДатуВоВнешнееОснованиеИВыявленныеДефекты",
	Истина);
	
	ПечатьДокументовБезПредварительногоПросмотра = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
	ПолучатьУведомленияВВидеВсплывающихПодсказок = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПолучатьУведомленияВВидеВсплывающихПодсказок",
	Истина);
	
	ПоказыватьПутеводительПоДемоБазе = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПоказыватьПутеводительПоДемоБазе",
	Истина);
	
	ПоказыватьСообщениеПриРасчетеППР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПоказыватьСообщениеПриРасчетеППР",
	Истина);
	
	РазрешитьПеретаскиваниеОРВИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"РазрешитьПеретаскиваниеОРВИерархии",
	Истина);
	
	ПоказыватьПанельЗадачТОиР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"ОбщаяФорма.торо_ТекущиеЗадачиТОиР",
	"ОткрыватьПриЗапуске",
	Истина);
	
	ВариантМасштаба = ХранилищеСистемныхНастроек.Загрузить(
	"Общее/НастройкиКлиентскогоПриложения");
	
	Если Не ВариантМасштаба = Неопределено Тогда
		ВариантМасштабаФормКомпактный = (ВариантМасштаба.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный);
	Иначе
		ВариантМасштабаФормКомпактный = Ложь;
	КонецЕсли;
	
	// +Параметры представления
	ФОторо_РазрешитьПользовательскуюНастройкуПредставлений = ПолучитьФункциональнуюОпцию("торо_РазрешитьПользовательскуюНастройкуПредставлений");
	Элементы.ПредставлениеДанных.Видимость = ФОторо_РазрешитьПользовательскуюНастройкуПредставлений;
	
	Если ФОторо_РазрешитьПользовательскуюНастройкуПредставлений Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ОбъектКонфигурации,
		               |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ФорматнаяСтрокаПоУмолчанию,
					   |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ОбъектКонфигурацииСиноним
		               |ИЗ
		               |	РегистрСведений.торо_ПараметрыПользовательскогоПредставленияОбъектов КАК торо_ПараметрыПользовательскогоПредставленияОбъектов";
		Рез = Запрос.Выполнить();
		Если НЕ Рез.Пустой() Тогда
			Выборка = Рез.Выбрать();
			Пока Выборка.Следующий() Цикл
				НС = ТаблицаПредставлений.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Выборка);
				НС.ПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиПредставлений",
				"ПредставлениеДля"+Выборка.ОбъектКонфигурации+"ПоУмолчанию",
				Истина);
				НС.ФорматнаяСтрока = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиПредставлений",
				"ПредставлениеДля"+Выборка.ОбъектКонфигурации,
				НС.ФорматнаяСтрокаПоУмолчанию);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// -Параметры представления
	// <==ТОиР=
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьОповещение(Результат, Контекст) Экспорт
	СохранитьНастройкиИЗакрытьФорму();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиИЗакрытьФорму()
	
	Настройки = Новый Структура;
	Настройки.Вставить("НапоминатьОбУстановкеРасширенияРаботыСФайлами", НапоминатьОбУстановкеРасширенияРаботыСФайлами);
	Настройки.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
	Настройки.Вставить("ПоказыватьПредупреждениеОбУстановленныхОбновленияхПрограммы", ПоказыватьПредупреждениеОбУстановленныхОбновленияхПрограммы);
	
	ПерсональныеНастройкиРаботыСФайлами = УстановитьНастройкиНаСервере(Настройки);
	Настройки.Вставить("ПерсональныеНастройкиРаботыСФайлами ", ПерсональныеНастройкиРаботыСФайлами);
	
	ОбщегоНазначенияКлиент.СохранитьПерсональныеНастройки(Настройки);
	
	ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция УстановитьНастройкиНаСервере(Настройки)
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ОбщегоНазначения.СохранитьПерсональныеНастройки(Настройки);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.РаботаСФайлами
	НастройкиРаботыСФайлами = Новый Структура;
	НастройкиРаботыСФайлами.Вставить("ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши);
	НастройкиРаботыСФайлами.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	НастройкиРаботыСФайлами.Вставить("ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	НастройкиРаботыСФайлами.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	НастройкиРаботыСФайлами.Вставить("ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	НастройкиРаботыСФайлами.Вставить("ПоказыватьИнформациюЧтоФайлНеБылИзменен", ПоказыватьИнформациюЧтоФайлНеБылИзменен);
	НастройкиРаботыСФайлами.Вставить("СпособСравненияВерсийФайлов", СпособСравненияВерсийФайлов);
	
	Если НастройкиОткрытияФайлов.Количество() >= 1 Тогда
		НастройкиРаботыСФайлами.Вставить("ТекстовыеФайлыРасширение", НастройкиОткрытияФайлов[0].Расширение);
		НастройкиРаботыСФайлами.Вставить("ТекстовыеФайлыСпособОткрытия", НастройкиОткрытияФайлов[0].СпособОткрытия);
	КонецЕсли;
	
	РаботаСФайлами.СохранитьНастройкиРаботыСФайлами(НастройкиРаботыСФайлами);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// =ТОиР==>
	ЗаписатьВХранилищеСистемныхНастроек();
	СохранитьНастройкиТОИР();
	// <==ТОиР=

	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат РаботаСФайлами.НастройкиРаботыСФайлами();
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиТОИР()
	
	// =ТОиР==>
	ИменаРеквизитовТОИР = "ОсновнаяСтруктураИерархии, 
								|ИерархияДляМобильногоПриложения, 
								|ОсновноеНаправлениеОР,
								|ОсновнаяОрганизация,
								|ОсновноеПодразделение,
								|ОсновнойСклад,
								|ОсновнойОтветственный,
								|ОсновнойГрафикРаботы,
								|ОсновнойИнициаторДефекта,
								|ОсновнойПериодПланирования,
								|ЗапретитьОткрытиеНесколькихСеансов,
								|ПоказыватьПоложениеОР,
								|ПодставлятьТекущуюДатуВоВнешнееОснованиеИВыявленныеДефекты,
								|ПечатьДокументовБезПредварительногоПросмотра,
								|ПолучатьУведомленияВВидеВсплывающихПодсказок,
								|ПоказыватьПутеводительПоДемоБазе,
								|ПоказыватьСообщениеПриРасчетеППР,
								|РазрешитьПеретаскиваниеОРВИерархии";
	
	СохранитьСвойстваКоллекции("НастройкиТОиР", ЭтотОбъект, ИменаРеквизитовТОИР);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбщаяФорма.торо_ТекущиеЗадачиТОиР", "ОткрыватьПриЗапуске", ПоказыватьПанельЗадачТОиР);

	// +Параметры представления
	Для Каждого Строка Из ТаблицаПредставлений Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПредставлений", 
			"ПредставлениеДля"+Строка.ОбъектКонфигурации+"ПоУмолчанию", Строка.ПоУмолчанию);
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПредставлений",
		"ПредставлениеДля"+Строка.ОбъектКонфигурации, Строка.ФорматнаяСтрока);
	КонецЦИкла;
	// -Параметры представления
	
	// <==ТОиР=

КонецПроцедуры

&НаСервере
Процедура ЗаписатьВХранилищеСистемныхНастроек()
	
	НастройкиИнтерфейса = Новый НастройкиКлиентскогоПриложения;
	НастройкиИнтерфейса.ВариантМасштабаФормКлиентскогоПриложения = ?(ВариантМасштабаФормКомпактный,
	ВариантМасштабаФормКлиентскогоПриложения.Компактный,
	ВариантМасштабаФормКлиентскогоПриложения.Обычный);	
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения",  , НастройкиИнтерфейса);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСвойстваКоллекции(КлючОбъекта, Коллекция, ИменаРеквизитов)
	СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Коллекция);
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиентеЗавершение(ДополнительныеПараметры) Экспорт
	
	ОбновитьГруппуУстановкиРасширенияРаботыСФайлами();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРабочегоКаталогаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Истина Тогда
		РаботаСФайламиКлиент.ОткрытьФормуНастройкиРабочегоКаталога();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
