////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

// Переменные для сохранения и восстановления состояния дерева
&НаКлиенте
Перем МассивРазвернутыхЭлементов;
&НаКлиенте
Перем ТекущийДокумент;
&НаКлиенте
Перем ИдентификаторТекущего;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Документ") Тогда
		Документ = Параметры.Документ;
		
		Если Параметры.Свойство("ОР") Тогда
			ОР = Параметры.ОР;
		КонецЕсли;
		
		Если Параметры.Свойство("ВР") Тогда
			ВР = Параметры.ВР;
		КонецЕсли;
		
		Если Параметры.Свойство("Дата") Тогда
			Дата = Параметры.Дата;
		КонецЕсли;
		
		Если Параметры.Свойство("ТабЧасть") Тогда
			Для каждого Стр Из Документ[Параметры.ТабЧасть] Цикл
				НС = СписокID.Добавить();
				НС.ОР = Стр[ОР];
				НС.ID = Стр.ID;
				
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда 
					НС.ВидРемонтов = Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
					НС.Дата = Документ[Дата];
				Иначе
					НС.ВидРемонтов = Стр[ВР];
					НС.Дата = Стр[Дата];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПостроитьДеревоДокументов();
	
	УсловноеОформление.Элементы.Очистить();
	ЭлемУслОформ = УсловноеОформление.Элементы.Добавить();
	ЭлемУслОформ.Использование = Истина;
	
	ОтборУслОформления = ЭлемУслОформ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборУслОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборУслОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокДокументовДерево.Документ");
	ОтборУслОформления.ПравоеЗначение = Документ;
	ОтборУслОформления.Использование = Истина;
	
	ОформлениеУслОформления = ЭлемУслОформ.Оформление.Элементы[5];
	ОформлениеУслОформления.Использование = Истина;
	ОформлениеУслОформления.Значение = Новый Шрифт(,,Истина);
	
	ПолеУслОформления = ЭлемУслОформ.Поля.Элементы.Добавить();
	ПолеУслОформления.Использование = Истина;
	ПолеУслОформления.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовДеревоДокумент");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьВсеСтроки(Команды.Найти("РазвернутьВсеСтроки"));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументовДерево

&НаКлиенте
Процедура СписокДокументовДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.СписокДокументовДерево.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, ТекДанные.Документ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовДеревоПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокДокументовДерево.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.ЯвляетсяДокументом Тогда
		Элементы.ФормаПометитьНаУдаление.Доступность = Истина;
		
		Если ТекущиеДанные.Проведен Тогда
			Элементы.ФормаПровести.Доступность = Ложь;
			Элементы.ФормаОтменаПроведения.Доступность = Истина;
			Элементы.СписокДокументовДеревоКонтекстноеМенюПровести.Доступность = Ложь;
			Элементы.СписокДокументовДеревоКонтекстноеМенюОтменаПроведения.Доступность = Истина;
			Элементы.СписокДокументовДеревоКонтекстноеМенюПометитьНаУдаление.Доступность = Истина;
		Иначе
			Элементы.ФормаПровести.Доступность = Истина;
			Элементы.ФормаОтменаПроведения.Доступность = Ложь;
			Элементы.СписокДокументовДеревоКонтекстноеМенюПровести.Доступность = Истина;
			Элементы.СписокДокументовДеревоКонтекстноеМенюОтменаПроведения.Доступность = Ложь;
			Элементы.СписокДокументовДеревоКонтекстноеМенюПометитьНаУдаление.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ФормаПометитьНаУдаление.Доступность = Ложь;
		Элементы.ФормаПровести.Доступность = Ложь;
		Элементы.ФормаОтменаПроведения.Доступность = Ложь;
		Элементы.СписокДокументовДеревоКонтекстноеМенюПровести.Доступность = Ложь;
		Элементы.СписокДокументовДеревоКонтекстноеМенюОтменаПроведения.Доступность = Ложь;
		Элементы.СписокДокументовДеревоКонтекстноеМенюПометитьНаУдаление.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Провести(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ПометкаУдаления Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗаписатьВыбранныйДокумент(РежимЗаписиДокумента.Проведение, ТекущиеДанные.Документ, ТекущиеДанные.ПолучитьИдентификатор()) Тогда
		ТекущиеДанные.Картинка = ПолучитьИндексКартинкиВКоллекции(ТекущиеДанные);
		СписокДокументовДеревоПриАктивизацииСтроки(Элементы.СписокДокументовДерево);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТекущиеДанные.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Документ не проведен.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗаписатьВыбранныйДокумент(РежимЗаписиДокумента.ОтменаПроведения, ТекущиеДанные.Документ, ТекущиеДанные.ПолучитьИдентификатор()) Тогда
		ТекущиеДанные.Картинка = ПолучитьИндексКартинкиВКоллекции(ТекущиеДанные);
		СписокДокументовДеревоПриАктивизацииСтроки(Элементы.СписокДокументовДерево);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	ТекущиеДанные = Элементы.СписокДокументовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗаписатьВыбранныйДокумент(РежимЗаписиДокумента.Запись, ТекущиеДанные.Документ, ТекущиеДанные.ПолучитьИдентификатор(), Не ТекущиеДанные.ПометкаУдаления) Тогда
		ТекущиеДанные.Картинка = ПолучитьИндексКартинкиВКоллекции(ТекущиеДанные);
		СписокДокументовДеревоПриАктивизацииСтроки(Элементы.СписокДокументовДерево);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаписатьСостояниеДерева();
	СписокДокументовДерево.ПолучитьЭлементы().Очистить();
	ПостроитьДеревоДокументов();
	ВосстановитьСостояниеДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеСтроки(Команда)	
	Для Каждого ТекСтрока Из СписокДокументовДерево.ПолучитьЭлементы() Цикл
		Элементы.СписокДокументовДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеСтроки(Команда)
	
	Для каждого Стр Из СписокДокументовДерево.ПолучитьЭлементы() Цикл
		
		СвернутьПодчиненные(Стр);
		Элементы.СписокДокументовДерево.Свернуть(Стр.ПолучитьИдентификатор());
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ПостроитьДеревоДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СписокID.ID КАК ID,
	|	СписокID.ОР КАК ОбъектРемонта,
	|	СписокID.ВидРемонтов КАК ВидРемонтов,
	|	СписокID.Дата КАК Дата
	|ПОМЕСТИТЬ СписокID
	|ИЗ
	|	&СписокID КАК СписокID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ДокументЕРП КАК Документ,
	|	СписокID.ОбъектРемонта КАК ОбъектРемонта,
	|	СписокID.ВидРемонтов КАК ВидРемонтов,
	|	СписокID.Дата КАК Дата,
	|	СписокID.ID КАК ID
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	СписокID КАК СписокID
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|		ПО СписокID.ID = торо_ИнтеграцияДокументов.ID
	|			И (ВЫБОР
	|				КОГДА торо_ИнтеграцияДокументов.ДокументЕРП ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
	|					ТОГДА торо_ИнтеграцияДокументов.ДокументЕРП.ЗаказНаВнутреннееПотребление = ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ИнтеграцияДокументов.ДокументЕРП,
	|	СписокID.ID,
	|	СписокID.ОбъектРемонта,
	|	СписокID.Дата,
	|	СписокID.ВидРемонтов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутреннееПотреблениеТоваров.Ссылка КАК Ссылка,
	|	ВнутреннееПотреблениеТоваров.ЗаказНаВнутреннееПотребление КАК ОсновнойДокумент
	|ПОМЕСТИТЬ втПодчиненныеДокументы
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.ЗаказНаВнутреннееПотребление В
	|			(ВЫБРАТЬ
	|				втДокументы.Документ
	|			ИЗ
	|				втДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗаказПоставщикуДокументыОснования.Ссылка,
	|	торо_ЗаказПоставщикуДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_ЗаказПоставщику.ДокументыОснования КАК торо_ЗаказПоставщикуДокументыОснования
	|ГДЕ
	|	торо_ЗаказПоставщикуДокументыОснования.ДокументОснование В
	|			(ВЫБРАТЬ
	|				втДокументы.Документ
	|			ИЗ
	|				втДокументы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументы.ОбъектРемонта КАК ОбъектРемонта,
	|	втДокументы.ВидРемонтов КАК ВидРемонтов,
	|	втДокументы.Дата КАК Дата,
	|	втДокументы.ID КАК ID,
	|	втДокументы.Документ КАК Документ,
	|	втДокументы.Документ.Проведен КАК Проведен,
	|	втДокументы.Документ.ПометкаУдаления КАК ПометкаУдаления,
	|	втПодчиненныеДокументы.Ссылка КАК ПодчиненныйДокумент,
	|	втПодчиненныеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаленияПодчиненного,
	|	втПодчиненныеДокументы.Ссылка.Проведен КАК ПроведенПодчиненный
	|ИЗ
	|	втДокументы КАК втДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПодчиненныеДокументы КАК втПодчиненныеДокументы
	|		ПО втДокументы.Документ = втПодчиненныеДокументы.ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	МАКСИМУМ(ВидРемонтов),
	|	МИНИМУМ(Дата)
	|ПО
	|	ОбъектРемонта,
	|	ID,
	|	Документ,
	|	ПодчиненныйДокумент";
	
	Запрос.УстановитьПараметр("СписокID", СписокID.Выгрузить()); 
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаОбъектыРемонта = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектыРемонта.Следующий() Цикл
		СтрокаДереваОбъект = СписокДокументовДерево.ПолучитьЭлементы().Добавить();
		СтрокаДереваОбъект.Документ = ВыборкаОбъектыРемонта.ОбъектРемонта;
		СтрокаДереваОбъект.Картинка = 6;
		СтрокаДереваОбъект.ДокументТекст = Строка(СтрокаДереваОбъект.Документ);
		
		ВыборкаВидыРемонтов = ВыборкаОбъектыРемонта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидыРемонтов.Следующий() Цикл
			СтрокаДереваВидРемонта = СтрокаДереваОбъект.ПолучитьЭлементы().Добавить();
			СтрокаДереваВидРемонта.Документ = ВыборкаВидыРемонтов.ВидРемонтов;
			СтрокаДереваВидРемонта.Картинка = 7;
			СтрокаДереваВидРемонта.ДокументТекст = Строка(СтрокаДереваВидРемонта.Документ) + " : " + Формат(ВыборкаВидыРемонтов.Дата,"ДФ=dd.MM.yyyy");
			
			ВыборкаДокументы = ВыборкаВидыРемонтов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДокументы.Следующий() И ЗначениеЗаполнено(ВыборкаДокументы.Документ) Цикл
				СтрокаДереваДокумент = СтрокаДереваВидРемонта.ПолучитьЭлементы().Добавить();
				СтрокаДереваДокумент.Документ = ВыборкаДокументы.Документ;
				СтрокаДереваДокумент.ПометкаУдаления = ВыборкаДокументы.ПометкаУдаления;
				СтрокаДереваДокумент.Проведен = ВыборкаДокументы.Проведен;
				СтрокаДереваДокумент.Картинка = ПолучитьИндексКартинкиВКоллекции(СтрокаДереваДокумент);
				СтрокаДереваДокумент.ДокументТекст = Строка(СтрокаДереваДокумент.Документ);
				СтрокаДереваДокумент.ЯвляетсяДокументом = Истина;
				
				ВыборкаПоПодчиненнымДокументам = ВыборкаДокументы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоПодчиненнымДокументам.Следующий() И ЗначениеЗаполнено(ВыборкаПоПодчиненнымДокументам.ПодчиненныйДокумент) Цикл
					СтрокаДереваПодчиненныйДокумент = СтрокаДереваДокумент.ПолучитьЭлементы().Добавить();
					СтрокаДереваПодчиненныйДокумент.Документ = ВыборкаПоПодчиненнымДокументам.ПодчиненныйДокумент;
					СтрокаДереваПодчиненныйДокумент.ПометкаУдаления = ВыборкаПоПодчиненнымДокументам.ПометкаУдаленияПодчиненного;
					СтрокаДереваПодчиненныйДокумент.Проведен = ВыборкаПоПодчиненнымДокументам.ПроведенПодчиненный;
					СтрокаДереваПодчиненныйДокумент.Картинка = ПолучитьИндексКартинкиВКоллекции(СтрокаДереваПодчиненныйДокумент);
					СтрокаДереваПодчиненныйДокумент.ДокументТекст = Строка(ВыборкаПоПодчиненнымДокументам.ПодчиненныйДокумент);
					СтрокаДереваПодчиненныйДокумент.ЯвляетсяДокументом = Истина;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИндексКартинкиВКоллекции(ДокументСтрока)
	
	Если ДокументСтрока.Проведен Тогда
		
		Возврат 1;
		
	ИначеЕсли ДокументСтрока.ПометкаУдаления Тогда
		
		Возврат 2;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьВыбранныйДокумент(РежимЗаписи, ДокументСсылка, ИдентификаторСтроки, ПометитьНаУдаление = Ложь)
	
	Если ДокументСсылка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ДокОбъект = ДокументСсылка.ПолучитьОбъект();
		
		Если ПометитьНаУдаление Тогда
			ДокОбъект.УстановитьПометкуУдаления(Истина);
		Иначе
			Если ДокОбъект.ПометкаУдаления Тогда
			    ДокОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			ДокОбъект.Записать(РежимЗаписи);
		КонецЕсли;
		
		СтрокаДерева = СписокДокументовДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаДерева.Проведен = ДокОбъект.Проведен;
		СтрокаДерева.ПометкаУдаления = ДокОбъект.ПометкаУдаления;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СвернутьПодчиненные(Строка)
	
	Для каждого Стр Из Строка.ПолучитьЭлементы() Цикл
		
		СвернутьПодчиненные(Стр);
		Элементы.СписокДокументовДерево.Свернуть(Стр.ПолучитьИдентификатор());
		
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСостояниеДерева()
	
	Если Элементы.СписокДокументовДерево.ТекущиеДанные <> Неопределено Тогда
		ТекущийДокумент = Элементы.СписокДокументовДерево.ТекущиеДанные.ДокументТекст;
	КонецЕсли;

	Для Каждого СтрокаДерева Из СписокДокументовДерево.ПолучитьЭлементы() Цикл
		ПолучитьМассивРазвернутыхЭлементов(МассивРазвернутыхЭлементов,СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМассивРазвернутыхЭлементов(МассивРазвернутыхЭлементов,Строка)
	     
	Если Элементы.СписокДокументовДерево.Развернут(Строка.ПолучитьИдентификатор()) Тогда
		МассивРазвернутыхЭлементов.Добавить(Строка.ДокументТекст);
		Для Каждого СтрокаПодчиненная Из Строка.ПолучитьЭлементы() Цикл
			ПолучитьМассивРазвернутыхЭлементов(МассивРазвернутыхЭлементов,СтрокаПодчиненная);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСостояниеДерева()
	
	Для Каждого Строка Из СписокДокументовДерево.ПолучитьЭлементы() Цикл
		
		РазвернутьВетвиДерева(МассивРазвернутыхЭлементов,Строка);
			
	КонецЦикла;
	
	Элементы.СписокДокументовДерево.ТекущаяСтрока = ИдентификаторТекущего;
	
	МассивРазвернутыхЭлементов.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВетвиДерева(МассивРазвернутыхЭлементов,СтрокаДерева)
	
	Если СтрокаДерева.ДокументТекст = ТекущийДокумент Тогда
		ИдентификаторТекущего = СтрокаДерева.ПолучитьИдентификатор();
	КонецЕсли;
		
	Если МассивРазвернутыхЭлементов.Найти(СтрокаДерева.ДокументТекст) <> Неопределено Тогда
		
		Элементы.СписокДокументовДерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
			РазвернутьВетвиДерева(МассивРазвернутыхЭлементов,СтрокаДереваПодчиненная);
						
		КонецЦикла;
	Иначе
		Элементы.СписокДокументовДерево.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

МассивРазвернутыхЭлементов = Новый Массив;
#КонецОбласти

