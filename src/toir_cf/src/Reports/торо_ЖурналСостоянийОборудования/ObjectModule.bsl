#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий
	
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяИерархия = торо_ОтчетыСервер.ПолучитьЗначениеСтруктурыИерархии(КомпоновщикНастроек);
	
	торо_ОтчетыСервер.УстановитьЗапросыНаборовДанныхИерархииОР(СхемаКомпоновкиДанных, ТекущаяИерархия, "КонецПериода", "СостоянияОборудования");
	торо_ОтчетыСервер.УстановитьТипГруппировкиОбъектаИерархии(КомпоновщикНастроек, ТекущаяИерархия);
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДанныеОтчета = ДанныеОтчета(НастройкиОсновнойСхемы, ТекущаяИерархия);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("СостоянияОборудования", ДанныеОтчета);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ЗагрузитьНастройкиПриИзмененииПараметров = ЗагрузитьНастройкиПриИзмененииПараметров();
	
КонецПроцедуры

Функция ЗагрузитьНастройкиПриИзмененииПараметров()  
	
	Параметры = Новый Массив;
	Параметры.Добавить(Новый ПараметрКомпоновкиДанных("ИерархияТип"));	
	Возврат Параметры;
	
КонецФункции

Функция ДанныеОтчета(НастройкиОсновнойСхемы, ТекущаяИерархия)
	
	ПериодОтчета = НастройкиОсновнойСхемы.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	
	ДатаНачала = ПериодОтчета.Значение.ДатаНачала;
    ДатаОкончания = ПериодОтчета.Значение.ДатаОкончания; 
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Если ДатаОкончания > ТекущаяДата Тогда
		ДатаОкончания = ТекущаяДата;
	КонецЕсли;
	
	ПредварительныеДанные = ПредварительныеДанныеСПользовательскимиОтборами(ТекущаяИерархия, ДатаНачала, ДатаОкончания);
	
	ПлановыеГрафикиРабот = ПредварительныеДанные.ВыгрузитьКолонку("ПлановыйГрафикРаботы");
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВременныхТаблиц, ПлановыеГрафикиРабот, ДатаНачала, ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаДанныхОтчета();

	Запрос.УстановитьПараметр("ПредварительныеДанные", ПредварительныеДанные);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаДанныхОтчета() 
	
	Возврат "ВЫБРАТЬ
	|	ПредварительныеДанные.НачалоПериода КАК НачалоПериода,
	|	ПредварительныеДанные.КонецПериода КАК КонецПериода,
	|	ВЫБОР
	|		КОГДА ПредварительныеДанные.КонецПериода = КОНЕЦПЕРИОДА(ПредварительныеДанные.КонецПериода, ДЕНЬ)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ПредварительныеДанные.КонецПериода, СЕКУНДА, 1)
	|		ИНАЧЕ ПредварительныеДанные.КонецПериода
	|	КОНЕЦ КАК КонецПериодаРассчетный,
	|	ПредварительныеДанные.Организация КАК Организация,
	|	ПредварительныеДанные.Подразделение КАК Подразделение,
	|	ПредварительныеДанные.ОбъектРемонта КАК ОбъектРемонта,
	|	ПредварительныеДанные.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ПредварительныеДанные.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
	|	ПредварительныеДанные.ПричинаПростоя КАК ПричинаПростоя,
	|	ПредварительныеДанные.СекундРаботы КАК СекундРаботы,
	|	ПредварительныеДанные.ОбъектИерархии КАК ОбъектИерархии
	|ПОМЕСТИТЬ СостоянияПоПериодам
	|ИЗ
	|	&ПредварительныеДанные КАК ПредварительныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СекундРаботы,
	|	ПлановыйГрафикРаботы,
	|	НачалоПериода,
	|	КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписанияРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТРасписанияРаботы.ДатаГрафика КАК ДатаГрафика,
	|	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА)) КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ДатаОкончания
	|ПОМЕСТИТЬ РасписанияОбъектовРемонтов
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы,
	|	ДатаГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияПоПериодам.НачалоПериода КАК НачалоПериода,
	|	СостоянияПоПериодам.КонецПериода КАК КонецПериода,
	|	СостоянияПоПериодам.ОбъектРемонта КАК ОбъектРемонта,
	|	СостоянияПоПериодам.ВидЭксплуатации КАК ВидЭксплуатации,
	|	СУММА(ВЫБОР
	|			КОГДА РасписанияОбъектовРемонтов.ДатаГрафика <> НАЧАЛОПЕРИОДА(СостоянияПоПериодам.НачалоПериода, ДЕНЬ)
	|					И РасписанияОбъектовРемонтов.ДатаГрафика <> НАЧАЛОПЕРИОДА(СостоянияПоПериодам.КонецПериода, ДЕНЬ)
	|				ТОГДА РАЗНОСТЬДАТ(РасписанияОбъектовРемонтов.ДатаНачала, РасписанияОбъектовРемонтов.ДатаОкончания, СЕКУНДА)
	|			КОГДА СостоянияПоПериодам.НачалоПериода > РасписанияОбъектовРемонтов.ДатаОкончания
	|					ИЛИ СостоянияПоПериодам.КонецПериода < РасписанияОбъектовРемонтов.ДатаНачала
	|				ТОГДА 0
	|			КОГДА СостоянияПоПериодам.НачалоПериода > РасписанияОбъектовРемонтов.ДатаНачала
	|				ТОГДА ВЫБОР
	|						КОГДА СостоянияПоПериодам.КонецПериода > РасписанияОбъектовРемонтов.ДатаОкончания
	|							ТОГДА РАЗНОСТЬДАТ(СостоянияПоПериодам.НачалоПериода, РасписанияОбъектовРемонтов.ДатаОкончания, СЕКУНДА)
	|						ИНАЧЕ РАЗНОСТЬДАТ(СостоянияПоПериодам.НачалоПериода, СостоянияПоПериодам.КонецПериодаРассчетный, СЕКУНДА)
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СостоянияПоПериодам.КонецПериода > РасписанияОбъектовРемонтов.ДатаОкончания
	|						ТОГДА РАЗНОСТЬДАТ(РасписанияОбъектовРемонтов.ДатаНачала, РасписанияОбъектовРемонтов.ДатаОкончания, СЕКУНДА)
	|					ИНАЧЕ РАЗНОСТЬДАТ(РасписанияОбъектовРемонтов.ДатаНачала, СостоянияПоПериодам.КонецПериодаРассчетный, СЕКУНДА)
	|				КОНЕЦ
	|		КОНЕЦ) КАК СекундРаботы
	|ПОМЕСТИТЬ ВремяВСостоянии
	|ИЗ
	|	СостоянияПоПериодам КАК СостоянияПоПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасписанияОбъектовРемонтов КАК РасписанияОбъектовРемонтов
	|		ПО (СостоянияПоПериодам.СекундРаботы = 0)
	|			И СостоянияПоПериодам.ПлановыйГрафикРаботы = РасписанияОбъектовРемонтов.ГрафикРаботы
	|			И НАЧАЛОПЕРИОДА(СостоянияПоПериодам.НачалоПериода, ДЕНЬ) <= РасписанияОбъектовРемонтов.ДатаГрафика
	|			И НАЧАЛОПЕРИОДА(СостоянияПоПериодам.КонецПериода, ДЕНЬ) >= РасписанияОбъектовРемонтов.ДатаГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияПоПериодам.НачалоПериода,
	|	СостоянияПоПериодам.КонецПериода,
	|	СостоянияПоПериодам.ОбъектРемонта,
	|	СостоянияПоПериодам.ВидЭксплуатации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ВидЭксплуатации,
	|	НачалоПериода,
	|	КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияПоПериодам.НачалоПериода КАК НачалоПериода,
	|	СостоянияПоПериодам.КонецПериода КАК КонецПериода,
	|	СостоянияПоПериодам.Организация КАК Организация,
	|	СостоянияПоПериодам.Подразделение КАК Подразделение,
	|	СостоянияПоПериодам.ОбъектРемонта КАК ОбъектРемонта,
	|	СостоянияПоПериодам.ВидЭксплуатации КАК ВидЭксплуатации,
	|	СостоянияПоПериодам.ВидЭксплуатации.ТипЭксплуатации КАК ТипЭксплуатации,
	|	СостоянияПоПериодам.ПричинаПростоя КАК ПричинаПростоя,
	|	СостоянияПоПериодам.ОбъектИерархии КАК ОбъектИерархии,
	|	ВЫБОР
	|		КОГДА СостоянияПоПериодам.СекундРаботы = 0
	|			ТОГДА ВремяВСостоянии.СекундРаботы
	|		ИНАЧЕ СостоянияПоПериодам.СекундРаботы
	|	КОНЕЦ КАК СекундРаботы
	|ИЗ
	|	СостоянияПоПериодам КАК СостоянияПоПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремяВСостоянии КАК ВремяВСостоянии
	|		ПО СостоянияПоПериодам.ОбъектРемонта = ВремяВСостоянии.ОбъектРемонта
	|			И СостоянияПоПериодам.ВидЭксплуатации = ВремяВСостоянии.ВидЭксплуатации
	|			И СостоянияПоПериодам.НачалоПериода = ВремяВСостоянии.НачалоПериода
	|			И СостоянияПоПериодам.КонецПериода = ВремяВСостоянии.КонецПериода"; 
	
	
КонецФункции

Функция ПредварительныеДанныеСПользовательскимиОтборами(ТекущаяИерархия, ДатаНачала, ДатаОкончания)
	
	СхемаКомпоновкиОтбор = ПолучитьМакет("СхемаКомпоновкиОтбор");
	
	ПараметрыИсходнойСхемы = СхемаКомпоновкиДанных.Параметры;
	Для каждого ПараметрИсходнойСхемы из ПараметрыИсходнойСхемы Цикл
		
		ПараметрСхемыОтбора = СхемаКомпоновкиОтбор.Параметры.Найти(ПараметрИсходнойСхемы.Имя);
		Если ПараметрСхемыОтбора = Неопределено Тогда
			ПараметрСхемыОтбора = СхемаКомпоновкиОтбор.Параметры.Добавить();
			ПараметрСхемыОтбора.Имя = ПараметрИсходнойСхемы.Имя;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрСхемыОтбора, ПараметрыИсходнойСхемы);
	КонецЦикла;
	
	ПараметрСхемыОтбора = СхемаКомпоновкиОтбор.Параметры.Найти("НачалоПериода");
	Если ПараметрСхемыОтбора <> Неопределено Тогда
		ПараметрСхемыОтбора.Значение = ДатаНачала;
	КонецЕсли;	
	ПараметрСхемыОтбора = СхемаКомпоновкиОтбор.Параметры.Найти("КонецПериода");
	Если ПараметрСхемыОтбора <> Неопределено Тогда
		ПараметрСхемыОтбора.Значение = ДатаОкончания;
	КонецЕсли;
	
	КомпоновщикСхемыОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикСхемыОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиОтбор));
	КомпоновщикСхемыОтбора.ЗагрузитьНастройки(СхемаКомпоновкиОтбор.НастройкиПоУмолчанию);
	
	торо_ОтчетыСервер.УстановитьПолеОбъектИерархии(
		СхемаКомпоновкиОтбор.НаборыДанных.СостоянияОборудования.Запрос,
		"СостоянияПоПериодам.ОбъектРемонта",
		ТекущаяИерархия);
	
	СхемаКомпоновкиОтбор.НаборыДанных.Иерархия.Запрос = СхемаКомпоновкиДанных.НаборыДанных.Иерархия.Запрос;
	СхемаКомпоновкиОтбор.НаборыДанных.Контроль.Запрос = СхемаКомпоновкиДанных.НаборыДанных.Контроль.Запрос;
	
	НастройкиИсходнойСхемы = КомпоновщикНастроек.ПолучитьНастройки(); 	
	Для каждого ПараметрИсходнойСхемы из НастройкиИсходнойСхемы.ПараметрыДанных.Элементы Цикл
		
		ПараметрСхемыОтбора = КомпоновщикСхемыОтбора.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрИсходнойСхемы.Параметр);
		Если ПараметрСхемыОтбора = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		КомпоновщикСхемыОтбора.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрИсходнойСхемы.Параметр, ПараметрИсходнойСхемы.Значение);	
		ПараметрСхемыОтбора.Использование = ПараметрИсходнойСхемы.Использование; 
	КонецЦикла;
			
	Для каждого ЭлементОтбораИсходнойСхемы из НастройкиИсходнойСхемы.Отбор.Элементы Цикл
		
		ТипОтбораЭлемент = ТипЗнч(ЭлементОтбораИсходнойСхемы) = Тип("ЭлементОтбораКомпоновкиДанных");
		
		Если ТипОтбораЭлемент Тогда
			ПолеНеДоступноДляОтбора = КомпоновщикСхемыОтбора.Настройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбораИсходнойСхемы.ЛевоеЗначение) = Неопределено;
			Если ПолеНеДоступноДляОтбора Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;	
		
		НовыйОтбор = КомпоновщикСхемыОтбора.Настройки.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбораИсходнойСхемы));
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ЭлементОтбораИсходнойСхемы);
		Если ТипОтбораЭлемент Тогда
			Если ТипЗнч(ЭлементОтбораИсходнойСхемы.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				НовыйОтбор.ПравоеЗначение.ЗагрузитьЗначения(ЭлементОтбораИсходнойСхемы.ПравоеЗначение.ВыгрузитьЗначения());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Настройки = КомпоновщикСхемыОтбора.ПолучитьНастройки();
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиОтбор, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПредварительныеДанные = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ПредварительныеДанные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ПредварительныеДанные;
	
КонецФункции	

#КонецОбласти

#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли