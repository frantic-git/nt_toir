
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяГруппыСеткиДиаграмм = "ГруппаТаблица";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимМонитора = "Обычный";
	РежимМонитораПриИзменении(Элементы.РежимМонитора);
		
	ПодключитьОбработчикВыбораПоказателей();
	ПодключитьОбработчикОжидания("ОбработчикОжиданияКонтрольПользовательскихНастроек", 1);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаОбновленияПоставляемойМоделиПоказателейKPI",, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	БылаЗагрузкаНастроек = Истина;	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	БылаЗагрузкаНастроек = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	БылаЗагрузкаНастроек = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытиеФормыНастроек" Тогда 
		БылаЗагрузкаНастроек = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте 
Процедура Сформировать(Команда)
	
	ПолучитьПользовательскиеНастройкиНаФорму();
	
	Если Не НеобходимаКорректировкаЦелевыхЗначений() Тогда
		СформироватьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
		
	торо_ПоказателиKPI.ПолучитьДанныеПоказателей(ЭтаФорма);
	
	ТаблицаВариантовАнализа.Загрузить(торо_ПоказателиKPI.ПолучитьСписокВариантовАнализаСУчетомРазделителя(ДанныеПоказателей, СписокВариантовАнализа));
	СоздатьСеткуЭлементовФормы();
	
	ЗаполнитьЦелевыеЗначенияПоказателей(СписокВариантовАнализа);
	ВывестиДанныеПоказателей(СписокВариантовАнализа);
	ЗаполнитьИнтегральнуюОценку(СписокВариантовАнализа);
	
КонецПроцедуры

&НаКлиенте
Процедура Перерисовать(Команда)
	
	ТипСерийИнтегральнойОценки = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ТипСерийИнтегральнойОценки");
	
	ПерерисоватьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПерерисоватьНаСервере()
	
	СоздатьСеткуЭлементовФормы();
	
	ЗаполнитьЦелевыеЗначенияПоказателей(СписокВариантовАнализа);
	ВывестиДанныеПоказателей(СписокВариантовАнализа);
	ЗаполнитьИнтегральнуюОценку(СписокВариантовАнализа);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасшифроватьПоказатель(Команда)
	
	НомерЯчейки = СтрЗаменить(Команда.Имя, "_РасшифроватьПоказатель", "");
	Попытка
		НомерЯчейки = Число(НомерЯчейки);
	Исключение
		Возврат;
	КонецПопытки;
		
	ВариантАнализа = ТаблицаВариантовАнализа[НомерЯчейки - 1].ВариантАнализа;
	Показатель = ТаблицаВариантовАнализа[НомерЯчейки - 1].Показатель;
	Разделитель = ТаблицаВариантовАнализа[НомерЯчейки - 1].Разделитель;
	РазделительРеквизит = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Показатель, "Разделитель");
	ИмяОтчетаДляРасшифровки = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Показатель, "Отчет");
	
	ПараметрыОтчета = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(ИмяОтчетаДляРасшифровки) Тогда
		ОткрытьФормуУниверсальнойРасшифровки(ВариантАнализа, Показатель, Разделитель);
		Возврат;
	КонецЕсли;
	
	Если ИмяОтчетаДляРасшифровки = "УниверсальныйОтчет" Тогда
		ПараметрыОтчета.Вставить("ТипОбъектаМетаданных", "РегистрыНакопления");
		ПараметрыОтчета.Вставить("ИмяОбъектаМетаданных", "торо_ЗначенияВнешнихПоказателейKPI");
		ПараметрыОтчета.Вставить("ИмяТаблицы", "ОстаткиИОбороты");
	КонецЕсли;
	
	ПараметрыМетаданных = ПолучитьПараметрыМетаданныхОтчетаРасшифровки(ИмяОтчетаДляРасшифровки, ПараметрыОтчета);
	
	Если НЕ ПараметрыМетаданных.ОтчетСуществует Тогда
		ШаблонСообщения = НСтр("ru='Отчет с именем ""%1"" не найден в конфигурации.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяОтчетаДляРасшифровки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(РазделительРеквизит) Тогда
	    СтруктураОтбора.Вставить(РазделительРеквизит, Разделитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РазделительРеквизит) Тогда
	    СтруктураОтбора.Вставить(РазделительРеквизит, Разделитель);
	КонецЕсли;
	
	Если ИспользоватьОтборПоОрганизации И ПараметрыМетаданных.ЕстьОрганизация Тогда
		СтруктураОтбора.Вставить("Организация", ОтборПоОрганизации);
	КонецЕсли;
	Если ИспользоватьОтборПоПодразделению И ПараметрыМетаданных.ЕстьПодразделение Тогда
		СтруктураОтбора.Вставить("Подразделение", ОтборПоПодразделению);
	КонецЕсли;
	Если ИспользоватьОтборПоОР И ПараметрыМетаданных.ЕстьОбъектРемонта Тогда
		СтруктураОтбора.Вставить("ОбъектРемонтныхРабот", ОтборПоОР);
		СтруктураОтбора.Вставить("ОбъектРемонта", ОтборПоОР);
		Если ИмяОтчетаДляРасшифровки = "торо_ПрямыеЗатратыНаВыполнениеРемонтов" Тогда
			СтруктураОтбора.Вставить("Объект", ОтборПоОР);
		ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_СписокОборудования" Тогда
			СтруктураОтбора.Вставить("ОбъектИерархии", ОтборПоОР);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыМетаданных.ЕстьПоказатель Тогда
		СтруктураОтбора.Вставить("Показатель", Показатель);
	КонецЕсли;
	
	Если ИмяОтчетаДляРасшифровки = "торо_ПланМТОТрудозатратИнструментов" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_ПлановыеВнеплановыеРемонты" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
		СтруктураОтбора.Вставить("ПериодВыполнения", ОтборПоПериоду);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_ПлановыеОстановыОборудования" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_ПланФактВыполненияРемонтовПодрядчиками" Тогда
		СтруктураОтбора.Вставить("СтандПериод", ОтборПоПериоду);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_ПланФактЗатрат" 
		ИЛИ ИмяОтчетаДляРасшифровки = "торо_ПланФактТрудозатрат" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
      СтруктураОтбора.Вставить("ПериодВыполнения", ОтборПоПериоду);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_ПланФактныйАнализППР" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_ПричиныОтменыПлановыхРемонтов" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_ПрямыеЗатратыНаВыполнениеРемонтов" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_СостояниеОборудования" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
      СтруктураОтбора.Вставить("ПериодВыполнени", ОтборПоПериоду);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_СписокОборудования" Тогда
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
	ИначеЕсли ИмяОтчетаДляРасшифровки = "торо_НаработкаНаОтказ"
		Или ИмяОтчетаДляРасшифровки = "торо_АнализЗагруженностиБригад"
		Или ИмяОтчетаДляРасшифровки = "торо_ДлительностьСогласованияДокументов"
		Или ИмяОтчетаДляРасшифровки = "торо_РецидивныеДефекты"
		Или ИмяОтчетаДляРасшифровки = "торо_ОстановочныеРемонты" Тогда
		ПараметрыОтчета.Вставить("ПериодОтчета", ОтборПоПериоду);
	Иначе
		СтруктураОтбора.Вставить("Период", ОтборПоПериоду);
	КонецЕсли;
	
	СтруктураОтбора.Вставить("ПериодОтчета", ОтборПоПериоду);
	
	ПараметрыФормыОтчетаРасшифровки = Новый Структура;
	ПараметрыФормыОтчетаРасшифровки.Вставить("Период", ОтборПоПериоду);
	ПараметрыФормыОтчетаРасшифровки.Вставить("СформироватьПриОткрытии", Истина);
		
	Если ИмяОтчетаДляРасшифровки = "УниверсальныйОтчет" Тогда
		ПараметрыОтчета.Вставить("Период", ОтборПоПериоду);
		ПараметрыОтчета.Вставить("ПараметрыОтбора", СтруктураОтбора);
		ПараметрыФормыОтчетаРасшифровки.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	Иначе
		ПараметрыОтчета.Вставить("ПараметрыОтбора", СтруктураОтбора);
		ПараметрыФормыОтчетаРасшифровки.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	КонецЕсли;
	
	НаименованиеПоказателя = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Показатель, "Наименование");
	Если НаименованиеПоказателя = "Средняя продолжительность плановых ремонтов"
		Или НаименованиеПоказателя = "Своевременность выполнения плановых ремонтов"
		Или НаименованиеПоказателя = "Своевременность выполнения регламентных мероприятий" Тогда
	    ПараметрыФормыОтчетаРасшифровки.Вставить("КлючВарианта", "ПлановыеРемонты");
	ИначеЕсли НаименованиеПоказателя = "Средняя продолжительность внеплановых ремонтов"
		Или НаименованиеПоказателя = "Среднее время реакции технических служб"
		Или НаименованиеПоказателя = "Доля аварийных работ по техническому обслуживанию"
		Или НаименованиеПоказателя = "Своевременность выполнения внеплановых ремонтов" Тогда
		ПараметрыФормыОтчетаРасшифровки.Вставить("КлючВарианта", "ВнеплановыеРемонты");
	ИначеЕсли НаименованиеПоказателя = "Средняя продолжительность технического обслуживания (ремонтов)" Тогда
		ПараметрыФормыОтчетаРасшифровки.Вставить("КлючВарианта", "ПлановыеВнеплановыеРемонты");
	ИначеЕсли НаименованиеПоказателя = "Средняя наработка на отказ" Тогда
		ПараметрыФормыОтчетаРасшифровки.Вставить("КлючВарианта", "Наработка");
	ИначеЕсли НаименованиеПоказателя = "Среднее время работы до отказа" Тогда
		ПараметрыФормыОтчетаРасшифровки.Вставить("КлючВарианта", "ВремяРаботы");
	ИначеЕсли НаименованиеПоказателя = "Плановая загруженность персонала ТОИР" Тогда
		ПараметрыФормыОтчетаРасшифровки.Вставить("КлючВарианта", "ПлановаяЗанятостьСотрудников");
	КонецЕсли;
	
	Если ИмяОтчетаДляРасшифровки = "торо_ПлановыеВнеплановыеРемонты" Тогда
		СтруктураОтбора.Вставить("УчитыватьПланГрафикиППР", Ложь);
		СтруктураОтбора.Вставить("УчитыватьСметыПоДефектам", Ложь);
		СтруктураОтбора.Вставить("УчитыватьСметыПоВнешнимОснованиям", Ложь);
		СтруктураОтбора.Вставить("УчитыватьРегламентныеМероприятия", Ложь);
		
		Если НаименованиеПоказателя = "Средняя продолжительность плановых ремонтов"
			Или НаименованиеПоказателя = "Своевременность выполнения плановых ремонтов" Тогда
		    СтруктураОтбора.Вставить("УчитыватьПланГрафикиППР", Истина);
		ИначеЕсли НаименованиеПоказателя = "Средняя продолжительность внеплановых ремонтов"
			Или НаименованиеПоказателя = "Среднее время реакции технических служб"
			Или НаименованиеПоказателя = "Доля аварийных работ по техническому обслуживанию"
			Или НаименованиеПоказателя = "Своевременность выполнения внеплановых ремонтов" Тогда
			СтруктураОтбора.Вставить("УчитыватьСметыПоДефектам", Истина);
			СтруктураОтбора.Вставить("УчитыватьСметыПоВнешнимОснованиям", Истина);
		ИначеЕсли НаименованиеПоказателя = "Своевременность выполнения регламентных мероприятий" Тогда
			СтруктураОтбора.Вставить("УчитыватьРегламентныеМероприятия", Истина);
		Иначе
			СтруктураОтбора.Вставить("УчитыватьПланГрафикиППР", Истина);
			СтруктураОтбора.Вставить("УчитыватьСметыПоДефектам", Истина);
			СтруктураОтбора.Вставить("УчитыватьСметыПоВнешнимОснованиям", Истина);
			СтруктураОтбора.Вставить("УчитыватьРегламентныеМероприятия", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ОткрытьФорму("Отчет."+ИмяОтчетаДляРасшифровки+".Форма", ПараметрыФормыОтчетаРасшифровки, ЭтаФорма, Показатель);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ШаблонСообщения = НСтр("ru='Не удалось открыть форму отчета для расшифровки: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеРасшифровкиПоказателя(Команда)
	НомерЯчейки = СтрЗаменить(Команда.Имя, "_ДанныеРасшифровкиПоказателя", "");
	Попытка
		НомерЯчейки = Число(НомерЯчейки);
	Исключение
		Возврат;
	КонецПопытки;
		
	ВариантАнализа = ТаблицаВариантовАнализа[НомерЯчейки - 1].ВариантАнализа;
	Показатель = ТаблицаВариантовАнализа[НомерЯчейки - 1].Показатель;
	Разделитель = ТаблицаВариантовАнализа[НомерЯчейки - 1].Разделитель;
	ОткрытьФормуУниверсальнойРасшифровки(ВариантАнализа, Показатель, Разделитель);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУниверсальнойРасшифровки(ВариантАнализа, Показатель, Разделитель)
	
	ПараметрыФормы = Новый Структура;
	торо_ПоказателиKPIКлиентСервер.ПодготовитьСтруктуруПараметровДляОтчетаРасшифровкиПоказателя(ЭтаФорма, ПараметрыФормы, ВариантАнализа, Показатель, Разделитель);
	
	ОткрытьФорму("Отчет.торо_МониторKPI.Форма.ФормаРасшифровкиПоказателя", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПоказатель(Команда) 
	
	НомерЯчейки = СтрЗаменить(Команда.Имя, "_ОткрытьПоказатель", "");
	Попытка
		НомерЯчейки = Число(НомерЯчейки);
	Исключение
		Возврат;
	КонецПопытки;
	
	ВариантДляОткрытия = ТаблицаВариантовАнализа[НомерЯчейки - 1].ВариантАнализа;
	ПоказатьЗначение(,ВариантДляОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ТабДок = НапечататьОтчет();
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	ИдентификаторПечатнойФормы = "МониторKPI";
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = "Монитор KPI";
	ПечатнаяФорма.ТабличныйДокумент = ТабДок;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = "МониторKPI";
	
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодическаяИнформацияПоМонитору(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимМонитораПриИзменении(Элемент)
	
	Если РежимМонитора = "Обычный" Тогда
		Элементы.СтраницыРежимов.ТекущаяСтраница = Элементы.ОбычныйРежим;
		Элементы.ОбычныйРежим.Видимость = Истина;
		Элементы.ИнтегральнаяОценка.Видимость = Ложь;
	Иначе
		Элементы.СтраницыРежимов.ТекущаяСтраница = Элементы.ИнтегральнаяОценка;
		Элементы.ОбычныйРежим.Видимость = Ложь;
		Элементы.ИнтегральнаяОценка.Видимость = Истина;
	КонецЕсли;
	
	УстановитьВидимостьНастроекИнтегральнойОценки();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказателиKPIНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрТипПоказателей = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ТипПоказателей");
	ПараметрПоказателиKPI = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ПоказателиKPI", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипПоказателя", ПараметрТипПоказателей);
	ПараметрыФормы.Вставить("СписокЗначений", ПараметрПоказателиKPI);
	ОткрытьФорму("Отчет.торо_МониторKPI.Форма.ФормаВыбораВариантовАнализа", ПараметрыФормы, Элемент, ЭтаФорма.УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТипСерийИнтегральнойОценкиПриИзменении(Элемент, СтандартнаяОбработка)
		
	Перерисовать(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция НеобходимаКорректировкаЦелевыхЗначений()
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ВариантыАнализа", СписокВариантовАнализа);
	ПараметрыПроверки.Вставить("Период", ОтборПоПериоду.ДатаОкончания);
	ПараметрыПроверки.Вставить("ОтборПоОрганизации", ИспользоватьОтборПоОрганизации);
    ПараметрыПроверки.Вставить("ОтборПоПодразделению", ИспользоватьОтборПоПодразделению);
    ПараметрыПроверки.Вставить("ОтборПоОР", ИспользоватьОтборПоОР);
    ПараметрыПроверки.Вставить("Организации", ОтборПоОрганизации);
    ПараметрыПроверки.Вставить("Подразделения", ОтборПоПодразделению);
    ПараметрыПроверки.Вставить("ОбъектыРемонта", ОтборПоОР);
	
	Если торо_ПоказателиKPI.НеобходимаКорректировкаЦелевыхЗначений(ПараметрыПроверки) Тогда
		
		ПараметрыПроверки.Вставить("КорректировкаПриФормированииМонитораKPI", Истина);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ПараметрыКорректировки", ПараметрыПроверки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеКорректировкиЦелевыхЗначение", ЭтотОбъект);
		ОткрытьФорму("Обработка.торо_КорректировкаЦелевыхЗначенийПоказателейKPI.Форма", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбранных показателей KPI обнаружены некорректные целевые значения.'"));
                                                                                                                    
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте 
Процедура ПослеКорректировкиЦелевыхЗначение(Результат, ДополнительныеПараметры) Экспорт
	
	СформироватьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеНастройкиНаСервере()
	
	СтандартныеНастройки = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для каждого СтандартныйПараметр из СтандартныеНастройки Цикл
		Если ЗначениеЗаполнено(СтандартныйПараметр.ИдентификаторПользовательскойНастройки) Тогда
			ПользПараметр = ПользовательскиеНастройки.Элементы.Найти(СтандартныйПараметр.ИдентификаторПользовательскойНастройки);
			Если ПользПараметр = Неопределено Тогда
				ПользПараметр = ПользовательскиеНастройки.Элементы.Добавить();
				ПользПараметр.ИдентификаторПользовательскойНастройки = СтандартныйПараметр.ИдентификаторПользовательскойНастройки;
				ПользПараметр.Параметр = СтандартныйПараметр.Параметр;
			КонецЕсли;
			ПользПараметр.Использование = СтандартныйПараметр.Использование;
			ПользПараметр.Значение = СтандартныйПараметр.Значение;
			ПользПараметр.РежимОтображения = СтандартныйПараметр.РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикВыбораПоказателей();
	УстановитьВидимостьНастроекИнтегральнойОценки();
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьОбработчикВыбораПоказателей()
	
	ЭлементСписокВариантовАнализа = НайтиЭлементФормыПользовательскойНастройкиПоЗаголовку(ЭтаФорма, "Показатели (KPI)");
	Если ЭлементСписокВариантовАнализа <> Неопределено Тогда
		ЭлементСписокВариантовАнализа.УстановитьДействие("НачалоВыбора", "Подключаемый_ПоказателиKPIНачалоВыбора");
	КонецЕсли;
	
	ЭлементТипСерийИнтегральнойОценки = НайтиЭлементФормыПользовательскойНастройкиПоЗаголовку(ЭтаФорма, "Тип серий интегральной оценки");
	Если ЭлементТипСерийИнтегральнойОценки <> Неопределено Тогда
		ЭлементТипСерийИнтегральнойОценки.УстановитьДействие("ПриИзменении", "Подключаемый_ТипСерийИнтегральнойОценкиПриИзменении");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНастроекИнтегральнойОценки()
	
	ЭлементТипСерийИнтегральнойОценки = НайтиЭлементФормыПользовательскойНастройкиПоЗаголовку(ЭтаФорма, "Тип серий интегральной оценки");
	Если ЭлементТипСерийИнтегральнойОценки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РежимМонитора = "Обычный" Тогда
		ЭлементТипСерийИнтегральнойОценки.Видимость = Ложь;
	Иначе
		ЭлементТипСерийИнтегральнойОценки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияКонтрольПользовательскихНастроек()
	
	Если БылаЗагрузкаНастроек Тогда
		ПодключитьОбработчикВыбораПоказателей();
		УстановитьВидимостьНастроекИнтегральнойОценки();
		БылаЗагрузкаНастроек = Ложь;
	КонецЕсли;
	
КонецПроцедуры
/////////////////////////////////////////////////////////////////////////////
// Создание элементов формы

&НаСервере
Процедура СоздатьСеткуЭлементовФормы()
	
	КоличествоКолонок = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "КоличествоКолонокПоказателя");
	Если КоличествоКолонок = 0 Тогда
		КоличествоКолонок = 2;
	КонецЕсли;

	КоличествоСтрок = торо_ПоказателиKPIКлиентСервер.ОкруглитьВверх(ТаблицаВариантовАнализа.Количество() / КоличествоКолонок);
	
	УдалитьСтарыеЭлементы();
	
	РодительскаяГруппа = Элементы[ИмяГруппыСеткиДиаграмм];
	
	НомерЯчейки = 1;
	Для НомерСтроки = 1 по КоличествоСтрок Цикл
		Если НомерЯчейки > ТаблицаВариантовАнализа.Количество() Тогда
			Прервать;
		КонецЕсли;
						
		ГруппаСтрока = Элементы.Добавить("Строка"+НомерСтроки, Тип("ГруппаФормы"), РодительскаяГруппа);
		ГруппаСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаСтрока.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтрока.Объединенная = Ложь;
		
		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			Если НомерЯчейки > ТаблицаВариантовАнализа.Количество() Тогда
				Прервать;
			КонецЕсли;
			
			НомерЯчейкиСтрокой = Формат(НомерЯчейки, "ЧГ=0");
			
			СтрокаТаблицыВариантовАнализа = ТаблицаВариантовАнализа[НомерЯчейки - 1];
			ВариантАнализа = СтрокаТаблицыВариантовАнализа.ВариантАнализа;
			Показатель = СтрокаТаблицыВариантовАнализа.Показатель;
			РазделительКакЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "РазделительКакЕдиницаИзмерения");
			Разделитель = СтрокаТаблицыВариантовАнализа.Разделитель;

			ЕдиницаИзмерения = торо_ПоказателиKPI.ПолучитьЕдиницуИзмерения(Показатель, ВариантАнализа);
			
			ГруппаЯчейка = Элементы.Добавить("Ячейка"+НомерЯчейкиСтрокой, Тип("ГруппаФормы"), ГруппаСтрока);
			ГруппаЯчейка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЯчейка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЯчейка.Отображение = ОтображениеОбычнойГруппы.Нет;

			ГруппаШапкаПоказателя = Элементы.Добавить("ШапкаПоказателя"+НомерЯчейкиСтрокой, Тип("ГруппаФормы"), ГруппаЯчейка);
			ГруппаШапкаПоказателя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаШапкаПоказателя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
			ГруппаШапкаПоказателя.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаШапкаПоказателя.РастягиватьПоГоризонтали = Истина;
			
			ДекорацияПоказателя = Элементы.Добавить("НаименованиеПоказателя"+НомерЯчейкиСтрокой, Тип("ДекорацияФормы"), ГруппаШапкаПоказателя);
			ДекорацияПоказателя.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияПоказателя.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияПоказателя.РастягиватьПоГоризонтали = Истина;
			ДекорацияПоказателя.Заголовок = торо_ПоказателиKPI.СформироватьЗаголовокЭлемента(Показатель, ВариантАнализа, Разделитель);
			ДекорацияПоказателя.Шрифт = Новый Шрифт(ДекорацияПоказателя.Шрифт,,,Истина);
			
			ГруппаКоманднаяПанельПоказателя = Элементы.Добавить("КоманднаяПанельПоказателя"+НомерЯчейкиСтрокой, Тип("ГруппаФормы"), ГруппаШапкаПоказателя);
			ГруппаКоманднаяПанельПоказателя.Вид = ВидГруппыФормы.КоманднаяПанель;
			ГруппаКоманднаяПанельПоказателя.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			
			ПодменюПоказателя = Элементы.Добавить("ПодменюПоказателя"+НомерЯчейкиСтрокой, Тип("ГруппаФормы"), ГруппаКоманднаяПанельПоказателя);
			ПодменюПоказателя.Вид = ВидГруппыФормы.Подменю;
			ПодменюПоказателя.Заголовок = "\/";
			
			КомандаРасшифровки = ЭтаФорма.Команды.Добавить("_РасшифроватьПоказатель"+НомерЯчейкиСтрокой);
			КомандаРасшифровки.Заголовок = "Аналитический отчет";
			КомандаРасшифровки.Действие = "Подключаемый_РасшифроватьПоказатель";
			КомандаРасшифровки.Картинка = БиблиотекаКартинок.Отчет;
			
			ЭлементКомандаРасшифровки = Элементы.Добавить("_РасшифроватьПоказатель"+НомерЯчейкиСтрокой, Тип("КнопкаФормы"), ПодменюПоказателя);
			ЭлементКомандаРасшифровки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементКомандаРасшифровки.ИмяКоманды = "_РасшифроватьПоказатель"+НомерЯчейкиСтрокой;
			
			КомандаДанныхРасшифровки = ЭтаФорма.Команды.Добавить("_ДанныеРасшифровкиПоказателя"+НомерЯчейкиСтрокой);
			КомандаДанныхРасшифровки.Заголовок = "Данные расшифровки";
			КомандаДанныхРасшифровки.Действие = "Подключаемый_ДанныеРасшифровкиПоказателя";
			КомандаДанныхРасшифровки.Картинка = БиблиотекаКартинок.Отчет;
			
			ЭлементКомандаРасшифровки = Элементы.Добавить("_ДанныеРасшифровкиПоказателя"+НомерЯчейкиСтрокой, Тип("КнопкаФормы"), ПодменюПоказателя);
			ЭлементКомандаРасшифровки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементКомандаРасшифровки.ИмяКоманды = "_ДанныеРасшифровкиПоказателя"+НомерЯчейкиСтрокой;
			
			КомандаОткрытия = ЭтаФорма.Команды.Добавить("_ОткрытьПоказатель"+НомерЯчейкиСтрокой);
			КомандаОткрытия.Заголовок = "Открыть показатель";
			КомандаОткрытия.Действие = "Подключаемый_ОткрытьПоказатель";
			КомандаОткрытия.Картинка = БиблиотекаКартинок.Изменить;
			
			ЭлементКомандаОткрытия = Элементы.Добавить("_ОткрытьПоказатель"+НомерЯчейкиСтрокой, Тип("КнопкаФормы"), ПодменюПоказателя);
			ЭлементКомандаОткрытия.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементКомандаОткрытия.ИмяКоманды = "_ОткрытьПоказатель"+НомерЯчейкиСтрокой;
			
			ДобавитьДиаграммуДляВариантаАнализа(НомерЯчейки, ГруппаЯчейка, ВариантАнализа);
			
			НомерЯчейки = НомерЯчейки + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтарыеЭлементы()

	РодительскаяГруппа = Элементы[ИмяГруппыСеткиДиаграмм];
	УдаляемыеЭлементы = Новый массив;
	Для каждого Элемент из РодительскаяГруппа.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла; 
	
	Для каждого Элемент из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	УдаляемыеКоманды = Новый Массив;
	Для каждого Команда из ЭтаФорма.Команды Цикл
		Если СтрНачинаетсяС(Команда.Имя, "_РасшифроватьПоказатель") 
			ИЛИ СтрНачинаетсяС(Команда.Имя, "_ОткрытьПоказатель")
			ИЛИ СтрНачинаетсяС(Команда.Имя, "_ДанныеРасшифровкиПоказателя") Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Команда из УдаляемыеКоманды Цикл
		ЭтаФорма.Команды.Удалить(Команда);
	КонецЦикла;
	
	УдаляемыеРеквизиты = Новый Массив;
	МассивРеквизитов = ПолучитьРеквизиты();
	Для каждого Реквизит из МассивРеквизитов Цикл
		Если СтрНачинаетсяС(Реквизит.Имя, "_Результат") Тогда
			УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДиаграммуДляВариантаАнализа(НомерЯчейки, РодительскаяГруппа, ВариантАнализа)
	
	ВариантОтображения = ВариантАнализа.ВариантОтображенияПоУмолчанию;
	НомерЯчейкиСтрокой = Формат(НомерЯчейки, "ЧГ=0");
	ИмяРеквизита = "_Результат"+НомерЯчейкиСтрокой;
	
	Если ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Диаграмма Тогда
		РеквизитРезультат = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Диаграмма")); 
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить(РеквизитРезультат);
		ИзменитьРеквизиты(МассивРеквизитов);
		
		ЭлементРезультат = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), РодительскаяГруппа);
		ЭлементРезультат.Вид = ВидПоляФормы.ПолеДиаграммы;
		ЭлементРезультат.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементРезультат.ПутьКДанным = ИмяРеквизита;
		
		ЭтаФорма[ИмяРеквизита].ТипДиаграммы = торо_ПоказателиKPIКлиентСервер.ПолучитьТипДиаграммыПоЗначениюПеречисления(ВариантАнализа.ТипДиаграммы);
		
	ИначеЕсли ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Кратко Тогда
		
		ЭлементРезультат = Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), РодительскаяГруппа);
		ЭлементРезультат.Вид = ВидДекорацииФормы.Надпись;
		
		ЭлементРезультат.РастягиватьПоГоризонтали = Истина;
		ЭлементРезультат.РастягиватьПоВертикали = Истина;
		ЭлементРезультат.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
		ЭлементРезультат.Высота = 2;
		ЭлементРезультат.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементРезультат.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		ЭлементРезультат.АвтоМаксимальнаяШирина = Ложь;
		ЭлементРезультат.Шрифт = Новый Шрифт("Arial", 20, Истина);
		
	ИначеЕсли ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Таблица Тогда
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Период", Новый ОписаниеТипов("Дата"), ИмяРеквизита));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Разрез", Новый ОписаниеТипов("Строка"), ИмяРеквизита));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяРеквизита));
		
		ИзменитьРеквизиты(МассивРеквизитов);

		ЭлементРезультат = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), РодительскаяГруппа);
		ЭлементРезультат.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементРезультат.ПутьКДанным = ИмяРеквизита;
		ЭлементРезультат.ТолькоПросмотр = Истина;
		ЭлементРезультат.КоманднаяПанель.Видимость = Ложь;
		
		ЭлементПериод = Элементы.Добавить(ИмяРеквизита+"Период", Тип("ПолеФормы"), ЭлементРезультат);
		ЭлементПериод.ПутьКДанным = ИмяРеквизита+".Период";
		ЭлементПериод.Видимость = Ложь;
				
		ЭлементРазрез = Элементы.Добавить(ИмяРеквизита+"Разрез", Тип("ПолеФормы"), ЭлементРезультат);
		ЭлементРазрез.ПутьКДанным = ИмяРеквизита+".Разрез";
		
		ЭлементЗначение = Элементы.Добавить(ИмяРеквизита+"Значение", Тип("ПолеФормы"), ЭлементРезультат);
		ЭлементЗначение.ПутьКДанным = ИмяРеквизита+".Значение";
		
	КонецЕсли;
			
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Расчет показателей

&НаКлиенте
Процедура ПолучитьПользовательскиеНастройкиНаФорму()
	
	// Получим настройки и отборы  
	СписокВариантовАнализа = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ПоказателиKPI", Истина);
	
	ОтборПоПериоду = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "Период");
	ОтборПоПериодуСравнения = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ПериодСравнения");
	
	ТипПоказателей = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ТипПоказателей");
	
	ИспользоватьДетализациюПоПериоду = ПолучитьИспользованиеПараметраИзПользовательскихНастроек(ЭтаФорма, "ДетализацияПоПериоду");
	Если ИспользоватьДетализациюПоПериоду Тогда
		ДетализацияПоПериоду = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ДетализацияПоПериоду");
	Иначе
		ДетализацияПоПериоду = Неопределено;
	КонецЕсли;
	
	ИспользоватьОтборПоОрганизации = ПолучитьИспользованиеПараметраИзПользовательскихНастроек(ЭтаФорма, "Организация");
	Если ИспользоватьОтборПоОрганизации Тогда
		ОтборПоОрганизации = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "Организация", Истина);
	Иначе
		ОтборПоОрганизации = Новый СписокЗначений;
	КонецЕсли;
	
	ИспользоватьОтборПоПодразделению = ПолучитьИспользованиеПараметраИзПользовательскихНастроек(ЭтаФорма, "Подразделение");
	Если ИспользоватьОтборПоПодразделению Тогда
		ОтборПоПодразделению = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "Подразделение", Истина);
	Иначе
		ОтборПоПодразделению = Новый СписокЗначений;
	КонецЕсли;

	ИспользоватьОтборПоОР = ПолучитьИспользованиеПараметраИзПользовательскихНастроек(ЭтаФорма, "ОбъектРемонта");
	Если ИспользоватьОтборПоОР Тогда
		ОтборПоОР = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ОбъектРемонта", Истина);
	Иначе
		ОтборПоОР = Новый СписокЗначений;
	КонецЕсли;
	
	ТипСерийИнтегральнойОценки = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "ТипСерийИнтегральнойОценки");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦелевыеЗначенияПоказателей(СписокВариантовАнализа)
	
	ЦелевыеЗначенияПоказателей.Очистить();
	табЦелевыхЗначений = торо_ПоказателиKPI.ПолучитьЦелевыеЗначенияПоказателей(ЭтаФорма);
	ЦелевыеЗначенияПоказателей.Загрузить(табЦелевыхЗначений);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Вывод данных

&НаСервере
Процедура ВывестиДанныеПоказателей(СписокВариантовАнализа)
	
	ТаблицаПараметровДиаграмм = торо_ПоказателиKPI.ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм();
	
	НомерЯчейки = 0;
	Для каждого СтрокаТаблицыВариантовАнализа из ТаблицаВариантовАнализа Цикл
		НомерЯчейки = НомерЯчейки + 1;
		
		ВариантАнализа = СтрокаТаблицыВариантовАнализа.ВариантАнализа;
		Показатель = СтрокаТаблицыВариантовАнализа.Показатель;
		Разделитель = СтрокаТаблицыВариантовАнализа.Разделитель;
		
		ВариантОтображения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ВариантОтображенияПоУмолчанию");
		
		СтрокаПоказателя = ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель, Разделитель", Показатель, Разделитель));
		Если СтрокаПоказателя.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПоказателя = СтрокаПоказателя[0];
		
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных) Тогда
			ТабДанныхИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных);
			ТабДанных = ТабДанныхИсх.Скопировать();
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанныхСПериодами) Тогда
			ТабДанныхСПериодамиИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанныхСПериодами);
			ТабДанныхСПериодами = ТабДанныхСПериодамиИсх.Скопировать();
		Иначе
			Продолжить;
		КонецЕсли;
		
		Попытка
			СтруктураДанныхДляВывода = торо_ПоказателиKPI.ПолучитьСтруктураДанныхДляВыводаВМонитор(ТабДанных, ТабДанныхСПериодами, ВариантАнализа, ЭтаФорма);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонОшибки = НСтр("ru='При обработке данных показателя ""%1"" произошла ошибка: %2'");
			ТекстСообщения = СтрШаблон(ШаблонОшибки, ВариантАнализа, ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если СтруктураДанныхДляВывода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Диаграмма Тогда
				ВывестиДанныеПоказателяВДиаграмму(СтруктураДанныхДляВывода, ВариантАнализа, НомерЯчейки);
			ИначеЕсли ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Кратко Тогда
				ВывестиДанныеПоказателяВКраткомВиде(СтруктураДанныхДляВывода, ВариантАнализа, НомерЯчейки);
			ИначеЕсли ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Таблица Тогда
				ВывестиДанныеПоказателяВТаблицу(СтруктураДанныхДляВывода, ВариантАнализа, НомерЯчейки);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонОшибки = НСтр("ru='При выводе данных показателя ""%1"" произошла ошибка: %2'");
			ТекстСообщения = СтрШаблон(ШаблонОшибки, ВариантАнализа, ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПоказателяВДиаграмму(СтруктураДанныхДляВывода, ВариантАнализа,  НомерЯчейки)
	
	НомерЯчейкиСтрокой = Формат(НомерЯчейки, "ЧГ=0");
	Диаграмма = ЭтаФорма["_Результат"+НомерЯчейкиСтрокой];
	
	торо_ПоказателиKPI.ВывестиДанныеПоказателяВДиаграмму(СтруктураДанныхДляВывода, ВариантАнализа, Диаграмма, ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПоказателяВКраткомВиде(СтруктураДанныхДляВывода, ВариантАнализа, НомерЯчейки) 
	
	НомерЯчейкиСтрокой = Формат(НомерЯчейки, "ЧГ=0");
	ЭлементРезультат = Элементы["_Результат"+НомерЯчейкиСтрокой];
	
	торо_ПоказателиKPI.ВывестиДанныеПоказателяВКраткомВиде(СтруктураДанныхДляВывода, ВариантАнализа, ЭлементРезультат.Заголовок);
		
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПоказателяВТаблицу(СтруктураДанныхДляВывода, ВариантАнализа, НомерЯчейки) 
	
	НомерЯчейкиСтрокой = Формат(НомерЯчейки, "ЧГ=0");
	РеквизитРезультат = ЭтаФорма["_Результат"+НомерЯчейкиСтрокой];
	ЭлементПериод = Элементы["_Результат"+НомерЯчейкиСтрокой+"Период"];
	ЭлементРазрез = Элементы["_Результат"+НомерЯчейкиСтрокой+"Разрез"];
	
	торо_ПоказателиKPI.ВывестиДанныеПоказателяВТаблицу(СтруктураДанныхДляВывода, ВариантАнализа, РеквизитРезультат);
	
	ТипАнализа = СтруктураДанныхДляВывода.ТипАнализа;
			
	// Динамика изменения
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения Тогда
		ЭлементПериод.Видимость = Истина;
		ЭлементПериод.Формат = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
		ЭлементРазрез.Видимость = Ложь;
		
	// Покомпонентное сравнение (динамика)
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
		ЭлементПериод.Видимость = Истина;
		ЭлементПериод.Формат = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Печать

&НаСервере
Функция НапечататьОтчет()
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Макет = ОтчетОбъект.ПолучитьМакет("МакетСводнойСтраницы");
	
	НетДоступныхПоказателей = (ТаблицаВариантовАнализа.Количество()=0);
	торо_ПоказателиKPI.ВывестиСообщениеНетДоступныхПоказателей(ДокументРезультат, Макет, НетДоступныхПоказателей);

	Если РежимМонитора = "Обычный" Тогда
		
		// Вывод заголовка и параметров
		торо_ПоказателиKPI.ВывестиЗаголовок(ДокументРезультат, Макет);
		торо_ПоказателиKPI.ВывестиПараметры(ДокументРезультат, Макет, ЭтаФорма);
		торо_ПоказателиKPI.ВывестиДатуВремяФормирования(ДокументРезультат, Макет);
		
		// Вывод показателей
		
		КоличествоКолонок = ПолучитьЗначениеПараметраИзПользовательскихНастроек(ЭтаФорма, "КоличествоКолонокПоказателя");
		Если КоличествоКолонок = 0 Тогда
			КоличествоКолонок = 2;
		КонецЕсли;
		
		СчетчикЭлементовСтроки = 1;
		СчетчикСтрок = 1;
		КоличествоСтрок = торо_ПоказателиKPIКлиентСервер.ОкруглитьВверх(ТаблицаВариантовАнализа.Количество() / КоличествоКолонок);
		
		НомерЯчейки = 0;
		
		Для Каждого ЭлементСписка Из ТаблицаВариантовАнализа Цикл 
			НомерЯчейки = НомерЯчейки + 1;
			ВариантАнализа = ЭлементСписка.ВариантАнализа;
			Показатель = ЭлементСписка.Показатель;
			Разделитель = ЭлементСписка.Разделитель;
			
			ВывестиПоказательНаПечать(ДокументРезультат, Макет, Показатель, ВариантАнализа, Разделитель, НомерЯчейки);
			
			СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
			Если СчетчикЭлементовСтроки > КоличествоКолонок Тогда 
				СчетчикЭлементовСтроки = 1;
				СчетчикСтрок = СчетчикСтрок + 1;
				
				// Для последней строки отступ выводить не требуется
				Если СчетчикСтрок <= КоличествоСтрок Тогда
					торо_ПоказателиKPI.ВывестиОтступ(ДокументРезультат, Макет);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		торо_ПоказателиKPI.ВывестиОтступ(ДокументРезультат, Макет);
		
		НомерЯчейки = 0;
		Макет = ОтчетОбъект.ПолучитьМакет("МакетПодробнойСтраницыПоказателя");
		
		Для Каждого ЭлементСписка Из ТаблицаВариантовАнализа Цикл
			НомерЯчейки = НомерЯчейки + 1;
			
			ВариантАнализа = ЭлементСписка.ВариантАнализа;
			Если НЕ ВариантАнализа.ВариантОтображенияПоУмолчанию = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Кратко
				И НЕ ВариантАнализа.ТипДиаграммы = Перечисления.торо_ТипыДиаграммПоказателей.Измерительная Тогда
				
				ВывестиПодробноПоказательНаПечать(ДокументРезультат, Макет, Показатель, ВариантАнализа, Разделитель, НомерЯчейки);
				торо_ПоказателиKPI.ВывестиОтступ(ДокументРезультат, Макет);
				
			КонецЕсли;

		КонецЦикла;
		
	Иначе
		
		МакетИнтегральнойОценки = ОтчетОбъект.ПолучитьМакет("МакетИнтегральнойОценки");

		// Вывод заголовка и параметров
		торо_ПоказателиKPI.ВывестиЗаголовок(ДокументРезультат, МакетИнтегральнойОценки);
		торо_ПоказателиKPI.ВывестиПараметры(ДокументРезультат, МакетИнтегральнойОценки, ЭтаФорма);
		торо_ПоказателиKPI.ВывестиДатуВремяФормирования(ДокументРезультат, МакетИнтегральнойОценки);
	
		// Вывод показателей
		торо_ПоказателиKPI.ВывестиИнтегральнуюОценкуНаПечать(ДокументРезультат, МакетИнтегральнойОценки, ИнтегральнаяДиаграмма);
		
	КонецЕсли;

	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиПоказательНаПечать(ДокументРезультат, Макет, Показатель, ВариантАнализа, Разделитель, НомерЯчейки)
	
	ВариантОтображения = ВариантАнализа.ВариантОтображенияПоУмолчанию;
	
	ВременныйДокумент = Новый ТабличныйДокумент;
	торо_ПоказателиKPI.ВывестиЗаголовокПоказателяНаПечать(ВременныйДокумент, Макет, Показатель, ВариантАнализа, Разделитель);
	
	Если ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Диаграмма Тогда
		ВывестиПоказательНаПечатьДиаграмма(ВременныйДокумент, Макет, ВариантАнализа, НомерЯчейки);
	ИначеЕсли ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Кратко Тогда
		ВывестиПоказательНаПечатьКратко(ВременныйДокумент, Макет, ВариантАнализа, НомерЯчейки);
	ИначеЕсли ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Таблица Тогда
		ВывестиПоказательНаПечатьТаблица(ВременныйДокумент, Макет, ВариантАнализа, НомерЯчейки);
	КонецЕсли;
	
	ДокументРезультат.Присоединить(ВременныйДокумент);
	
КонецПроцедуры

Процедура ВывестиПодробноПоказательНаПечать(ДокументРезультат, Макет, Показатель, ВариантАнализа, Разделитель, НомерЯчейки)
	
	ВариантОтображения = ВариантАнализа.ВариантОтображенияПоУмолчанию;
	
	ВременныйДокумент = Новый ТабличныйДокумент;
	торо_ПоказателиKPI.ВывестиЗаголовокПоказателяНаПечать(ВременныйДокумент, Макет, Показатель, ВариантАнализа, Разделитель);
	
	Если ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Диаграмма Тогда
		ВывестиПодробноТаблицуДиаграммыНаПечать(ВременныйДокумент, Макет, ВариантАнализа, НомерЯчейки);
		торо_ПоказателиKPI.ВывестиОтступ(ВременныйДокумент, Макет);
		ВывестиПоказательНаПечатьДиаграмма(ВременныйДокумент, Макет, ВариантАнализа, НомерЯчейки);
	ИначеЕсли ВариантОтображения = Перечисления.торо_ВариантыОтображенияВариантовАнализа.Таблица Тогда
		ВывестиПодробноПоказательНаПечатьТаблица(ВременныйДокумент, Макет, ВариантАнализа, НомерЯчейки);
	КонецЕсли;
	
	ДокументРезультат.Присоединить(ВременныйДокумент);
	
КонецПроцедуры

Процедура ВывестиПоказательНаПечатьДиаграмма(ДокументРезультат, Макет, ВариантАнализа, НомерЯчейки)
	
	НомерЯчейкиСтрокой = Формат(НомерЯчейки, "ЧГ=0");
	ДиаграммаИсточник = ЭтаФорма["_Результат"+НомерЯчейкиСтрокой];
	
	торо_ПоказателиKPI.ВывестиПоказательНаПечатьДиаграмма(ДокументРезультат, Макет, ДиаграммаИсточник);
	
КонецПроцедуры

Процедура ВывестиПоказательНаПечатьКратко(ДокументРезультат, Макет, ВариантАнализа, НомерЯчейки)
	
	НомерЯчейкиСтрокой = Формат(НомерЯчейки, "ЧГ=0");
	ЭлементРезультат = Элементы["_Результат"+НомерЯчейкиСтрокой];
	
	торо_ПоказателиKPI.ВывестиПоказательНаПечатьКратко(ДокументРезультат, Макет, ЭлементРезультат.Заголовок);
		
КонецПроцедуры

Процедура ВывестиПоказательНаПечатьТаблица(ДокументРезультат, Макет, ВариантАнализа, НомерЯчейки)
	
	НомерЯчейкиСтрокой = Формат(НомерЯчейки, "ЧГ=0");
	РеквизитРезультат = ЭтаФорма["_Результат"+НомерЯчейкиСтрокой];
	
	ТаблицаЗначений = РеквизитРезультат.Выгрузить();
	
	торо_ПоказателиKPI.ВывестиПоказательНаПечатьТаблица(ДокументРезультат, Макет, ВариантАнализа, ЭтаФорма, ТаблицаЗначений);
		
КонецПроцедуры

Процедура ВывестиПодробноПоказательНаПечатьТаблица(ДокументРезультат, Макет, ВариантАнализа, НомерЯчейки)
	
	НомерЯчейкиСтрокой = НомерЯчейки;
	РеквизитРезультат = ЭтаФорма["_Результат"+НомерЯчейкиСтрокой];
	
	ТаблицаЗначений = РеквизитРезультат.Выгрузить();
	
	торо_ПоказателиKPI.ВывестиПодробноПоказательНаПечатьТаблица(ДокументРезультат, Макет, ВариантАнализа, ЭтаФорма, ТаблицаЗначений);
		
КонецПроцедуры

Процедура ВывестиПодробноТаблицуДиаграммыНаПечать(ДокументРезультат, Макет, ВариантАнализа, НомерЯчейки)
	
	НомерЯчейкиСтрокой = НомерЯчейки;
	ДиаграммаИсточник = ЭтаФорма["_Результат"+НомерЯчейкиСтрокой];
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Период");
	ТаблицаЗначений.Колонки.Добавить("Разрез");
	ТаблицаЗначений.Колонки.Добавить("Значение");
	
	Для Каждого СерияИсточник из ДиаграммаИсточник.Серии Цикл
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.Период = ТекущаяДата();
		НоваяСтрока.Разрез = СерияИсточник.Текст;
		
		Для Каждого ТочкаИсточник из ДиаграммаИсточник.Точки Цикл
			
			НоваяСтрока.Период = ТочкаИсточник.Текст;
			
			Попытка 
				ЗначениеИсточник = ДиаграммаИсточник.ПолучитьЗначение(ТочкаИсточник, СерияИсточник);
				НоваяСтрока.Значение = ЗначениеИсточник.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	торо_ПоказателиKPI.ВывестиПодробноПоказательНаПечатьТаблица(ДокументРезультат, Макет, ВариантАнализа, ЭтаФорма, ТаблицаЗначений);
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Интегральная оценка

&НаСервере
Процедура ЗаполнитьИнтегральнуюОценку(СписокВариантовАнализа) 
	
	СвернутаяТабВариантовАнализа = торо_ПоказателиKPI.ПолучитьСписокПоказателейДляИнтегральнойОценки(СписокВариантовАнализа);
	
	Если СвернутаяТабВариантовАнализа.Количество() < 3 Тогда
		Элементы.ИнтегральнаяДиаграмма.Видимость = Ложь;
		Элементы.ПояснениеКИнтегральнойОценке.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ИнтегральнаяДиаграмма.Видимость = Истина;
		Элементы.ПояснениеКИнтегральнойОценке.Видимость = Ложь;
	КонецЕсли;
	
	торо_ПоказателиKPI.ЗаполнитьИнтегральнуюОценку(ИнтегральнаяДиаграмма, СвернутаяТабВариантовАнализа, ЭтаФорма);	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Мелкие

&НаСервереБезКонтекста
Функция ПолучитьПараметрыМетаданныхОтчетаРасшифровки(ИмяОтчетаДляРасшифровки, ПараметрыОтчета)
	
	ПараметрыМетаданных = Новый Структура("ЕстьОрганизация, ЕстьПодразделение, ЕстьОбъектРемонта, ЕстьПоказатель, ОтчетСуществует", 
														Ложь, Ложь, Ложь, Ложь, Истина);
	
	МетаданныеОтчета = Метаданные.Отчеты.Найти(ИмяОтчетаДляРасшифровки);
	Если МетаданныеОтчета = Неопределено Тогда
		ПараметрыМетаданных.Вставить("ОтчетСуществует", Ложь);	
		Возврат ПараметрыМетаданных;	
	КонецЕсли;
	
	Если ИмяОтчетаДляРасшифровки = "УниверсальныйОтчет" Тогда
		ПараметрыМетаданных.Вставить("ЕстьОрганизация", Истина);
		ПараметрыМетаданных.Вставить("ЕстьПодразделение", Истина);
		ПараметрыМетаданных.Вставить("ЕстьОбъектРемонта", Истина);
		ПараметрыМетаданных.Вставить("ЕстьПоказатель", Истина);
		
	Иначе

	   ПараметрыМетаданных.Вставить("ЕстьОрганизация", Истина);
		ПараметрыМетаданных.Вставить("ЕстьПодразделение", Истина);
		ПараметрыМетаданных.Вставить("ЕстьОбъектРемонта", Истина);
	
	КонецЕсли;
	
	Возврат ПараметрыМетаданных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиЭлементФормыПользовательскойНастройкиПоЗаголовку(Форма, Заголовок)
	
	Элементы = Форма.Элементы;
	ЭлементФормы = Неопределено;
	Для каждого Элемент из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеВвода
			И СтрНачинаетсяС(Элемент.Имя, "КомпоновщикНастроекПользовательскиеНастройкиЭлемент")
			И Элемент.Заголовок = Заголовок Тогда
			ЭлементФормы = Элемент;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ЭлементФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеПараметраИзПользовательскихНастроек(Форма, ИмяПараметра, ПреобразоватьКСпискуЗначений = Ложь)
	
	ЗначениеПараметра = Неопределено;
	Для каждого ЭлементНастройки из Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(ЭлементНастройки.Параметр) = ИмяПараметра Тогда
			ЗначениеПараметра = ЭлементНастройки.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеДляВозврата = ЗначениеПараметра;
	
	Если ПреобразоватьКСпискуЗначений И ТипЗнч(ЗначениеПараметра) <> Тип("СписокЗначений") Тогда
		ЗначениеДляВозврата = Новый СписокЗначений;
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеДляВозврата.Добавить(ЗначениеПараметра);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеДляВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИспользованиеПараметраИзПользовательскихНастроек(Форма, ИмяПараметра)
	
	ИспользованиеПараметра = Ложь;
	Для каждого ЭлементНастройки из Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(ЭлементНастройки.Параметр) = ИмяПараметра Тогда
			ИспользованиеПараметра = ЭлементНастройки.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИспользованиеПараметра;
	
КонецФункции

#КонецОбласти
