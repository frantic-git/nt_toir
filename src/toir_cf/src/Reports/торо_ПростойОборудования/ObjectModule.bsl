#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий  

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяИерархия = торо_ОтчетыСервер.ПолучитьЗначениеСтруктурыИерархии(КомпоновщикНастроек);
	
	торо_ОтчетыСервер.УстановитьЗапросыНаборовДанныхИерархииОР(СхемаКомпоновкиДанных, ТекущаяИерархия, "КонецПериода", "ДанныеПоПростоям");
	торо_ОтчетыСервер.УстановитьТипГруппировкиОбъектаИерархии(КомпоновщикНастроек, ТекущаяИерархия);
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДанныеПоПростоям = ДанныеПоПростоям(НастройкиОсновнойСхемы, ТекущаяИерархия);
		
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеПоПростоям", ДанныеПоПростоям);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ЗагрузитьНастройкиПриИзмененииПараметров = ЗагрузитьНастройкиПриИзмененииПараметров();

КонецПроцедуры

Функция ЗагрузитьНастройкиПриИзмененииПараметров()  
	
	Параметры = Новый Массив;
	Параметры.Добавить(Новый ПараметрКомпоновкиДанных("ИерархияТип"));	
	Возврат Параметры;
	
КонецФункции

Функция ДанныеПоПростоям(НастройкиОсновнойСхемы, ТекущаяИерархия)
	
	ТекущаяДата = ТекущаяДата();
	
	ПериодОтчета = НастройкиОсновнойСхемы.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	Если ПериодОтчета <> Неопределено И ПериодОтчета.Использование Тогда
		ДатаНачала = ПериодОтчета.Значение.ДатаНачала;
		Если Не ЗначениеЗаполнено(ПериодОтчета.Значение.ДатаОкончания)
			Или ПериодОтчета.Значение.ДатаОкончания > ТекущаяДата Тогда
			ДатаОкончания = ТекущаяДата;
		Иначе
			ДатаОкончания = ПериодОтчета.Значение.ДатаОкончания; 
		КонецЕсли;
	Иначе
		ДатаНачала = Дата("00010101");
		ДатаОкончания = ТекущаяДата;
	КонецЕсли;
	
	ОбъектыРемонтов = ОбъектыРемонтовСПользовательскимиОтборами(ТекущаяИерархия, ДатаНачала, ДатаОкончания);
	
	ПлановыеГрафикиРабот = ОбъектыРемонтов.ВыгрузитьКолонку("ПлановыйГрафикРаботы");
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВременныхТаблиц, ПлановыеГрафикиРабот, ДатаНачала, ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст ="ВЫБРАТЬ 
	|	ОбъектыРемонтов.Организация КАК Организация,
	|	ОбъектыРемонтов.Подразделение КАК Подразделение,
	|	ОбъектыРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	|	ОбъектыРемонтов.ДатаНачала КАК ДатаНачала,
	|	ОбъектыРемонтов.ДатаОкончания КАК ДатаОкончания,
	|	ОбъектыРемонтов.ВремяПростоя КАК ВремяПростоя,
	|	ОбъектыРемонтов.Регистратор КАК Регистратор,
	|	ОбъектыРемонтов.ПричинаПростоя КАК ПричинаПростоя,
	|	ОбъектыРемонтов.ДатаОстанова КАК ДатаОстанова,
	|	ОбъектыРемонтов.ДатаЗапуска КАК ДатаЗапуска,
	|	ОбъектыРемонтов.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
	|ПОМЕСТИТЬ ОбъектыРемонтов
	|ИЗ
	|	&ОбъектыРемонтов КАК ОбъектыРемонтов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ПлановыйГрафикРаботы,
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписанияРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТРасписанияРаботы.ДатаГрафика КАК ДатаГрафика,
	|	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА)) КАК ВремяНачала,
	|	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ВремяОкончания
	|ПОМЕСТИТЬ РасписанияОбъектовРемонтов
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы,
	|	ДатаГрафика,
	|	ВремяНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыРемонтов.Организация КАК Организация,
	|	ОбъектыРемонтов.Подразделение КАК Подразделение,
	|	ОбъектыРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	|	СУММА(ВЫБОР
	|			КОГДА РасписанияОбъектовРемонтов.ДатаГрафика <> НАЧАЛОПЕРИОДА(ОбъектыРемонтов.ДатаНачала, ДЕНЬ)
	|					И РасписанияОбъектовРемонтов.ДатаГрафика <> НАЧАЛОПЕРИОДА(ОбъектыРемонтов.ДатаОкончания, ДЕНЬ)
	|				ТОГДА РАЗНОСТЬДАТ(РасписанияОбъектовРемонтов.ВремяНачала, РасписанияОбъектовРемонтов.ВремяОкончания, СЕКУНДА)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ОбъектыРемонтов.ДатаНачала > РасписанияОбъектовРемонтов.ВремяОкончания
	|							ИЛИ ОбъектыРемонтов.ДатаОкончания < РасписанияОбъектовРемонтов.ВремяНачала
	|						ТОГДА 0
	|					КОГДА ОбъектыРемонтов.ДатаНачала > РасписанияОбъектовРемонтов.ВремяНачала
	|						ТОГДА ВЫБОР
	|								КОГДА ОбъектыРемонтов.ДатаОкончания > РасписанияОбъектовРемонтов.ВремяОкончания
	|									ТОГДА РАЗНОСТЬДАТ(ОбъектыРемонтов.ДатаНачала, РасписанияОбъектовРемонтов.ВремяОкончания, СЕКУНДА)
	|								ИНАЧЕ РАЗНОСТЬДАТ(ОбъектыРемонтов.ДатаНачала, ОбъектыРемонтов.ДатаОкончания, СЕКУНДА)
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ОбъектыРемонтов.ДатаОкончания > РасписанияОбъектовРемонтов.ВремяОкончания
	|								ТОГДА РАЗНОСТЬДАТ(РасписанияОбъектовРемонтов.ВремяНачала, РасписанияОбъектовРемонтов.ВремяОкончания, СЕКУНДА)
	|							ИНАЧЕ РАЗНОСТЬДАТ(РасписанияОбъектовРемонтов.ВремяНачала, ОбъектыРемонтов.ДатаОкончания, СЕКУНДА)
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ) КАК ВремяПростоя,
	|	ОбъектыРемонтов.Регистратор КАК Регистратор,
	|	ОбъектыРемонтов.ПричинаПростоя КАК ПричинаПростоя,
	|	ОбъектыРемонтов.ДатаОстанова КАК ДатаОстанова,
	|	ОбъектыРемонтов.ДатаЗапуска КАК ДатаЗапуска
	|ПОМЕСТИТЬ ОбъектыРемонтовСПростоем
	|ИЗ
	|	ОбъектыРемонтов КАК ОбъектыРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасписанияОбъектовРемонтов КАК РасписанияОбъектовРемонтов
	|		ПО ОбъектыРемонтов.ПлановыйГрафикРаботы = РасписанияОбъектовРемонтов.ГрафикРаботы
	|			И (РасписанияОбъектовРемонтов.ДатаГрафика >= НАЧАЛОПЕРИОДА(ОбъектыРемонтов.ДатаНачала, ДЕНЬ))
	|			И (РасписанияОбъектовРемонтов.ДатаГрафика <= НАЧАЛОПЕРИОДА(ОбъектыРемонтов.ДатаОкончания, ДЕНЬ))
	|			И (РасписанияОбъектовРемонтов.ВремяНачала < ОбъектыРемонтов.ДатаОкончания)
	|			И (ОбъектыРемонтов.ВремяПростоя = 0)
	|
	|СГРУППИРОВАТЬ ПО 
	|	ОбъектыРемонтов.Организация,
	|	ОбъектыРемонтов.Подразделение,
	|	ОбъектыРемонтов.ОбъектРемонта,
	|	ОбъектыРемонтов.Регистратор,
	|	ОбъектыРемонтов.ПричинаПростоя,
	|	ОбъектыРемонтов.ДатаОстанова,
	|	ОбъектыРемонтов.ДатаЗапуска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыРемонтов.Организация,
	|	ОбъектыРемонтов.Подразделение,
	|	ОбъектыРемонтов.ОбъектРемонта,
	|	ОбъектыРемонтов.ВремяПростоя,
	|	ОбъектыРемонтов.Регистратор,
	|	ОбъектыРемонтов.ПричинаПростоя,
	|	ОбъектыРемонтов.ДатаОстанова,
	|	ОбъектыРемонтов.ДатаЗапуска
	|ИЗ
	|	ОбъектыРемонтов КАК ОбъектыРемонтов
	|ГДЕ
	|	ОбъектыРемонтов.ВремяПростоя > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ДатаОстанова
	|;
	|

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ    
	|	ОбъектыРемонтов.Организация КАК Организация,
	|	ОбъектыРемонтов.Подразделение КАК Подразделение,
	|	ОбъектыРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	|	ОбъектыРемонтов.ОбъектРемонта КАК ОР,
	|	ОбъектыРемонтов.ВремяПростоя КАК Секунды,
	|	ОбъектыРемонтов.Регистратор КАК Регистратор,
	|	ОбъектыРемонтов.ПричинаПростоя КАК ПричинаПростоя,
	|	ОбъектыРемонтов.ДатаОстанова КАК ДатаОстанова,
	|	ОбъектыРемонтов.ДатаЗапуска КАК ДатаЗапуска,
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК СтатусОборудования,
	|	торо_ТекущееСостояниеОР.Примечание КАК Примечание,
	|   &ПолеОбъектИерархии КАК ОбъектИерархии
	|ИЗ
	|	ОбъектыРемонтовСПростоем КАК ОбъектыРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ОбъектыРемонтов.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И ОбъектыРемонтов.ДатаОстанова = торо_ТекущееСостояниеОР.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОстанова";
	
	Запрос.УстановитьПараметр("ОбъектыРемонтов", ОбъектыРемонтов);
	
	Если ТекущаяИерархия.СтроитсяАвтоматически Тогда
		ПолеОбъектИерархии = СтрШаблон("ВЫРАЗИТЬ(ОбъектыРемонтов.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта).%1", ТекущаяИерархия.РеквизитОР);
	Иначе
		ПолеОбъектИерархии = "ОбъектыРемонтов.ОбъектРемонта";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОбъектИерархии", ПолеОбъектИерархии);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектыРемонтовСПользовательскимиОтборами(ТекущаяИерархия, ДатаНачала, ДатаОкончания)
	
	СхемаКомпоновкиОтбор = ПолучитьМакет("СхемаКомпоновкиОтбор");
	
	ПараметрыИсходнойСхемы = СхемаКомпоновкиДанных.Параметры;
	Для каждого ПараметрИсходнойСхемы из ПараметрыИсходнойСхемы Цикл
		
		ПараметрСхемыОтбора = СхемаКомпоновкиОтбор.Параметры.Найти(ПараметрИсходнойСхемы.Имя);
		Если ПараметрСхемыОтбора = Неопределено Тогда
			ПараметрСхемыОтбора = СхемаКомпоновкиОтбор.Параметры.Добавить();
			ПараметрСхемыОтбора.Имя = ПараметрИсходнойСхемы.Имя;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрСхемыОтбора, ПараметрыИсходнойСхемы);
	КонецЦикла;
	
	КомпоновщикСхемыОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикСхемыОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиОтбор));
	КомпоновщикСхемыОтбора.ЗагрузитьНастройки(СхемаКомпоновкиОтбор.НастройкиПоУмолчанию);
	
	Если ТекущаяИерархия.СтроитсяАвтоматически Тогда
		ПараметрОбъектИерархии = СтрШаблон("ВЫРАЗИТЬ(ОбъектыРемонтов.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта).%1", ТекущаяИерархия.РеквизитОР);              
	Иначе
		ПараметрОбъектИерархии = "ОбъектыРемонтов.ОбъектРемонта";
	КонецЕсли;
	
	СхемаКомпоновкиОтбор.НаборыДанных.ДанныеПоПростоям.Запрос = 
		СтрЗаменить(СхемаКомпоновкиОтбор.НаборыДанных.ДанныеПоПростоям.Запрос, "&ОбъектИерархии", ПараметрОбъектИерархии);
	СхемаКомпоновкиОтбор.НаборыДанных.Иерархия.Запрос = СхемаКомпоновкиДанных.НаборыДанных.Иерархия.Запрос;
	СхемаКомпоновкиОтбор.НаборыДанных.Контроль.Запрос = СхемаКомпоновкиДанных.НаборыДанных.Контроль.Запрос;
	
	НастройкиИсходнойСхемы = КомпоновщикНастроек.ПолучитьНастройки(); 	
	Для каждого ПараметрИсходнойСхемы из НастройкиИсходнойСхемы.ПараметрыДанных.Элементы Цикл
		
		ПараметрСхемыОтбора = КомпоновщикСхемыОтбора.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрИсходнойСхемы.Параметр);
		Если ПараметрСхемыОтбора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ПараметрСхемыОтбора.Параметр) = "НачалоПериода" Тогда 
			КомпоновщикСхемыОтбора.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрИсходнойСхемы.Параметр, ДатаНачала);	
		ИначеЕсли Строка(ПараметрСхемыОтбора.Параметр) = "КонецПериода" Тогда
			КомпоновщикСхемыОтбора.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрИсходнойСхемы.Параметр, ДатаОкончания);
		Иначе
			КомпоновщикСхемыОтбора.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрИсходнойСхемы.Параметр, ПараметрИсходнойСхемы.Значение);	
			ПараметрСхемыОтбора.Использование = ПараметрИсходнойСхемы.Использование; 
		КонецЕсли;
	КонецЦикла;
			
	Для каждого ЭлементОтбораИсходнойСхемы из НастройкиИсходнойСхемы.Отбор.Элементы Цикл
		
		ТипОтбораЭлемент = ТипЗнч(ЭлементОтбораИсходнойСхемы) = Тип("ЭлементОтбораКомпоновкиДанных");
		
		Если ТипОтбораЭлемент Тогда
			ПолеНеДоступноДляОтбора = КомпоновщикСхемыОтбора.Настройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбораИсходнойСхемы.ЛевоеЗначение) = Неопределено;
			Если ПолеНеДоступноДляОтбора Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;	
		
		НовыйОтбор = КомпоновщикСхемыОтбора.Настройки.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбораИсходнойСхемы));
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ЭлементОтбораИсходнойСхемы);
		Если ТипОтбораЭлемент Тогда
			Если ТипЗнч(ЭлементОтбораИсходнойСхемы.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				НовыйОтбор.ПравоеЗначение.ЗагрузитьЗначения(ЭлементОтбораИсходнойСхемы.ПравоеЗначение.ВыгрузитьЗначения());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Настройки = КомпоновщикСхемыОтбора.ПолучитьНастройки();
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиОтбор, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ОбъектыРемонтов = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ОбъектыРемонтов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ОбъектыРемонтов;
	
КонецФункции	

#КонецОбласти

#КонецЕсли