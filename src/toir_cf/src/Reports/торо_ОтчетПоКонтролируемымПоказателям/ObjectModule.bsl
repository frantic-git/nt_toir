#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекИерархия = торо_ОтчетыСервер.ПолучитьЗначениеСтруктурыИерархии(КомпоновщикНастроек);
	
	торо_ОтчетыСервер.УстановитьЗапросыНаборовДанныхИерархииОР(СхемаКомпоновкиДанных, ТекИерархия, "ДатаКон");
	
	Если ТекИерархия.СтроитсяАвтоматически Тогда
				
		СхемаКомпоновкиДанных.НаборыДанных.Объекты.Запрос =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ЗначенияКонтролируемыхПоказателей.Показатель КАК Показатель,
		|	торо_ЗначенияКонтролируемыхПоказателей.Значение КАК Значение,
		|	торо_ЗначенияКонтролируемыхПоказателей.Регистратор КАК Документ,
		|	торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля КАК ДатаКонтроля,
		|	НАЧАЛОПЕРИОДА(торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля, МЕСЯЦ) КАК Месяц,
		|	торо_ЗначенияКонтролируемыхПоказателей.Значение КАК ЗначениеMAX,
		|	торо_ОбъектыРемонта." + ТекИерархия.РеквизитОР + " КАК ОбъектИерархии,
		|	ВЫБОР
		|		КОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗначениеКПОР,
		|	ВЫБОР
		|		КОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
		|			ТОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение.ВыделятьКакНедопустимоеЗначение
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВыделятьКакНедопустимоеЗначение,
		|	ВЫБОР
		|		КОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
		|			ТОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение.ВыделятьКакКритическоеЗначение
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВыделятьКакКритическоеЗначение
		|ИЗ
		|	РегистрСведений.торо_ЗначенияКонтролируемыхПоказателей КАК торо_ЗначенияКонтролируемыхПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_УчетКонтролируемыхПоказателей КАК торо_УчетКонтролируемыхПоказателей
		|		ПО торо_ЗначенияКонтролируемыхПоказателей.Регистратор = торо_УчетКонтролируемыхПоказателей.Ссылка
		|{ГДЕ
		|	(торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля >= &ДатаНач
		|			И торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля <= &ДатаКон)}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ";

		торо_ОтчетыКлиентСервер.УстановитьТипИерархическойГруппировкиВНастройках(КомпоновщикНастроек, "ОбъектИерархии", ТипГруппировкиКомпоновкиДанных.Иерархия);
		
	Иначе

		торо_ОтчетыКлиентСервер.УстановитьТипИерархическойГруппировкиВНастройках(КомпоновщикНастроек, "ОбъектИерархии", ТипГруппировкиКомпоновкиДанных.ТолькоИерархия);

		СхемаКомпоновкиДанных.НаборыДанных.Объекты.Запрос = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ЗначенияКонтролируемыхПоказателей.Показатель КАК Показатель,
		|	торо_ЗначенияКонтролируемыхПоказателей.Значение КАК Значение,
		|	торо_ЗначенияКонтролируемыхПоказателей.Регистратор КАК Документ,
		|	торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля КАК ДатаКонтроля,
		|	НАЧАЛОПЕРИОДА(торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля, МЕСЯЦ) КАК Месяц,
		|	торо_ЗначенияКонтролируемыхПоказателей.Значение КАК ЗначениеMAX,
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
		|	ВЫБОР
		|		КОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗначениеКПОР,
		|	ВЫБОР
		|		КОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
		|			ТОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение.ВыделятьКакНедопустимоеЗначение
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВыделятьКакНедопустимоеЗначение,
		|	ВЫБОР
		|		КОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
		|			ТОГДА торо_ЗначенияКонтролируемыхПоказателей.Значение.ВыделятьКакКритическоеЗначение
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВыделятьКакКритическоеЗначение
		|ИЗ
		|	РегистрСведений.торо_ЗначенияКонтролируемыхПоказателей КАК торо_ЗначенияКонтролируемыхПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_УчетКонтролируемыхПоказателей КАК торо_УчетКонтролируемыхПоказателей
		|		ПО торо_ЗначенияКонтролируемыхПоказателей.Регистратор = торо_УчетКонтролируемыхПоказателей.Ссылка
		|{ГДЕ
		|	(торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля >= &ДатаНач
		|			И торо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля <= &ДатаКон)}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ";
		
	КонецЕсли;
	
	ОбъектыРемонта = ПолучитьСписокОбъектовРемонта();
	ТаблицаГраницПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектыРемонта,,Истина,,,Истина);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ГраницыПоказателей", ТаблицаГраницПоказателей);
	
	// Сгенерируем макет компоновки данных при помощи компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();

	// В качестве схемы компоновки будет выступать схема самого отчета.
	// В качестве настроек отчета - текущие настройки отчета.
	// Данные расшифровки будем помещать в свойство расширения формы - ДанныеРасшифровки.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,ДанныеРасшифровки,Истина);
	
	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;

	// выводим отчет
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ЗагрузитьНастройкиПриИзмененииПараметров = ЗагрузитьНастройкиПриИзмененииПараметров();

КонецПроцедуры

Функция ЗагрузитьНастройкиПриИзмененииПараметров()  
	
	Параметры = Новый Массив;
	Параметры.Добавить(Новый ПараметрКомпоновкиДанных("ИерархияТип"));	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьСписокОбъектовРемонта()
	
	ТаблицаОбъектовРемонта = Новый ТаблицаЗначений;
	
	СКД = ПолучитьМакет("СхемаКомпоновкиОтбор");
	СКД.НаборыДанных.Объекты.Запрос = СхемаКомпоновкиДанных.НаборыДанных.Объекты.Запрос;
	СКД.НаборыДанных.Иерархия.Запрос = СхемаКомпоновкиДанных.НаборыДанных.Иерархия.Запрос;
	СКД.НаборыДанных.Контроль.Запрос = СхемаКомпоновкиДанных.НаборыДанных.Контроль.Запрос;
	
	СписокПараметровДляКопирования = СхемаКомпоновкиДанных.Параметры;
	
	Для каждого Параметр из СписокПараметровДляКопирования Цикл
		НайденныйПараметр = СКД.Параметры.Найти(Параметр.Имя);
		Если НайденныйПараметр = Неопределено Тогда
			НайденныйПараметр = СКД.Параметры.Добавить();
			НайденныйПараметр.Имя = Параметр.Имя;
		КонецЕсли;
		
		НайденныйПараметр.Использование = Параметр.Использование;
		НайденныйПараметр.Выражение = Параметр.Выражение;
		НайденныйПараметр.ДоступенСписокЗначений = Параметр.ДоступенСписокЗначений;
		НайденныйПараметр.Значение = Параметр.Значение;
		НайденныйПараметр.ОграничениеИспользования = Параметр.ОграничениеИспользования;
		НайденныйПараметр.ВключатьВДоступныеПоля = Параметр.ВключатьВДоступныеПоля;
	КонецЦикла;
	
	НастройкиДляКопирования = КомпоновщикНастроек.ПолучитьНастройки(); 
		
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	
	Для каждого Параметр из НастройкиДляКопирования.ПараметрыДанных.Элементы Цикл
		НайденныйПараметр = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
		Если НайденныйПараметр <> Неопределено Тогда
			Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Параметр, Параметр.Значение);	
			НайденныйПараметр.Использование = Параметр.Использование;
		КонецЕсли;
	КонецЦикла;
	
	Поле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("ОбъектРемонта");
	
	ЭлементСтруктуры = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных")); 
	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Поле = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("ОбъектРемонта");
	
	Для каждого ЭлементОтбора из НастройкиДляКопирования.Отбор.Элементы Цикл
		НовыйОтбор = Компоновщик.Настройки.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ЭлементОтбора);
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				НовыйОтбор.ПравоеЗначение.ЗагрузитьЗначения(ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Настройки = Компоновщик.ПолучитьНастройки();
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаОбъектовРемонта);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонта");;
	
КонецФункции

#КонецОбласти

#КонецЕсли

