#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("28DD") И НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("5DD5") Тогда
		ТекстОшибки = НСтр("ru='Лицензия не обнаружена! Формирование отчета невозможно.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТекущаяИерархия = торо_ОтчетыСервер.ПолучитьЗначениеСтруктурыИерархии(КомпоновщикНастроек);
	
	торо_ОтчетыСервер.УстановитьЗапросыНаборовДанныхИерархииОР(СхемаКомпоновкиДанных, ТекущаяИерархия, "ДатаОкончания", "НаборДанныхТрудозатраты");
	торо_ОтчетыСервер.УстановитьПолеОбъектИерархии(СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхТрудозатраты.Запрос, "Вт_ДанныеИтоги.ОбъектРемонта", ТекущаяИерархия);
	торо_ОтчетыСервер.УстановитьТипГруппировкиОбъектаИерархии(КомпоновщикНастроек, ТекущаяИерархия);
	
	ИспользоватьОтборПоПериоду = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодВыполнения")).ИдентификаторПользовательскойНастройки).Использование;
	Если ИспользоватьОтборПоПериоду Тогда
		ПареметрДатаНачала = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНачала"));
		ПареметрДатаНачала.Использование = Истина;
		ПараметрДатаОкончания = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОкончания"));
		ПараметрДатаОкончания.Использование = Истина;
	Иначе
		ПареметрДатаНачала = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНачала"));
		ПареметрДатаНачала.Использование = Ложь;
		ПараметрДатаОкончания = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОкончания"));
		ПараметрДатаОкончания.Использование = Ложь;
	КонецЕсли;
	
	// Настроим вывод колонок с видом документа.
	НастройкиКД = КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройкиКД = КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ИдентификаторПараметраВидДокумента = НастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидДокумента")).ИдентификаторПользовательскойНастройки;
	ПараметрВидДокумента = ПользовательскиеНастройкиКД.Элементы.Найти(ИдентификаторПараметраВидДокумента);
	
	Если ПараметрВидДокумента <> Неопределено Тогда
		
		ВидДокумента = ?(ПараметрВидДокумента.Использование, ПараметрВидДокумента.Значение, Ложь);
		
		Для каждого Настройка из НастройкиКД.Структура Цикл
			Если ТипЗнч(Настройка) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для каждого Колонка из Настройка.Колонки Цикл
					Если Колонка.Имя = "ВидДокумента" Тогда
						Колонка.Использование = ВидДокумента;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ФункцииОтчетовКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПослеЗаполненияПанелиБыстрыхНастроек = Истина;
	
	Настройки.ЗагрузитьНастройкиПриИзмененииПараметров = ЗагрузитьНастройкиПриИзмененииПараметров();

КонецПроцедуры

Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт

	ПользовательскиеНастройкиЭлементы = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;	
	ПрименитьФункциональныеОпцииКНастройкам(ПользовательскиеНастройкиЭлементы);
	
КонецПроцедуры

Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ПользовательскиеНастройкиЭлементы = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;	
	ПрименитьФункциональныеОпцииКНастройкам(ПользовательскиеНастройкиЭлементы);
	
КонецПроцедуры

Процедура ПрименитьФункциональныеОпцииКНастройкам(ПользовательскиеНастройкиЭлементы)
	
	Для каждого Элемент Из ПользовательскиеНастройкиЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если (Строка(Элемент.Параметр) = "УчитыватьПланГрафикиППР"
				И Не ПолучитьЗначениеФО("торо_ИспользоватьППР"))Тогда
				Элемент.Значение      = Ложь;
				Элемент.Использование = Ложь;
				Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				Продолжить;
			ИначеЕсли (Строка(Элемент.Параметр) = "УчитыватьРегламентныеМероприятия"
				И Не ПолучитьЗначениеФО("торо_ИспользоватьРегламентныеМероприятия")) Тогда 
				Элемент.Значение      = Ложь;
				Элемент.Использование = Ложь;
				Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				Продолжить;
			ИначеЕсли (Строка(Элемент.Параметр) = "УчитыватьСметыПоДефектам"
				И (Не ПолучитьЗначениеФО("торо_УчетВыявленныхДефектовОборудования")
				ИЛИ Не ПолучитьЗначениеФО("торо_ИспользоватьСметыРемонта")) ) Тогда 
				Элемент.Значение      = Ложь;
				Элемент.Использование = Ложь;
				Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				Продолжить;
			ИначеЕсли (Строка(Элемент.Параметр) = "УчитыватьСметыПоВнешнимОснованиям"
				И (Не ПолучитьЗначениеФО("торо_ИспользоватьВнешниеОснованияДляРабот")
				ИЛИ Не ПолучитьЗначениеФО("торо_ИспользоватьСметыРемонта")) ) Тогда 
				Элемент.Значение      = Ложь;
				Элемент.Использование = Ложь; 
				Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
	
	Если Найти(Форма.ИмяФормы,"НастройкиОтчета") > 0  Тогда
		
		ЭлементыФормы = Форма.Элементы;
		ЭлементГруппаГлавное = ЭлементыФормы.Найти("ОбычныеОтборы");
		Если Не ЭлементГруппаГлавное = Неопределено Тогда
			ЭлементГруппаГлавное.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьЗначениеФО(ТекущаяОпция) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию(ТекущаяОпция);
	
КонецФункции

Функция ЗагрузитьНастройкиПриИзмененииПараметров()  
	
	Параметры = Новый Массив;
	Параметры.Добавить(Новый ПараметрКомпоновкиДанных("ИерархияТип"));	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#КонецЕсли