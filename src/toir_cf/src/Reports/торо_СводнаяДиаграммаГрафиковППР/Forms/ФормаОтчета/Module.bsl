
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбора(Элементы.ОтборПоВРВидСравнения.СписокВыбора);
	ЗаполнитьСписокВыбора(Элементы.ОтборПоОРВидСравнения.СписокВыбора);
	ЗаполнитьСписокВыбора(Элементы.ОтборПоРодителюВидСравнения.СписокВыбора);
	ЗаполнитьСписокВыбора(Элементы.ОтборПоОрганизацииВидСравнения.СписокВыбора);
	ОтборПоВРВидСравнения = ВидСравнения.Равно;
	ОтборПоОРВидСравнения = ВидСравнения.Равно;
	ОтборПоРодителюВидСравнения = ВидСравнения.Равно;
	ОтборПоОрганизацииВидСравнения = ВидСравнения.Равно;
	
	Элементы.ОрганизацияКонтрагент.СписокВыбора.Добавить(Справочники.Организации.ПустаяСсылка(), "Организация");
	Элементы.ОрганизацияКонтрагент.СписокВыбора.Добавить(Справочники.Контрагенты.ПустаяСсылка(), "Контрагент");
	ОрганизацияКонтрагент = Элементы.ОрганизацияКонтрагент.СписокВыбора[0].Значение;
	
	ОтборПоВРЗначение = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
	ОтборПоОРЗначение = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	ОтборПоОрганизацииЗначение = ОрганизацияКонтрагент;
		
	ДатаНач = НачалоГода(ТекущаяДата());
	ДатаКон = КонецГода(ТекущаяДата());
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_УчетЗамещающихРемонтов") Тогда
		Элементы.ФормаОтображатьЗамещенные.Видимость = Ложь;
		ОтображатьЗамещенные = Ложь;
	КонецЕсли;
		
	ЗаполнитьРеквизитыШапки();
	
	Если Не ЗначениеЗаполнено(ИерархияОР) Тогда
		ИерархияОР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР","ОсновнаяСтруктураИерархии",Истина);
		
		Если Не ЗначениеЗаполнено(ИерархияОР) Тогда
			ИерархияОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
		КонецЕсли;
	КонецЕсли;
	
	// видимость легенды диаграммы
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказатьЛегенду.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеВнешнимВидомФормы();
	УстановитьПараметрыВыбораРодителя();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ОтборПоОРПриИзменении(Элемент)
	Элементы.ОтборПоОРВидСравнения.Доступность = ОтборПоОР;
	Элементы.ОтборПоОРЗначение.Доступность = ОтборПоОР;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВРПриИзменении(Элемент)
	Элементы.ОтборПоВРВидСравнения.Доступность = ОтборПоВР;
	Элементы.ОтборПоВРЗначение.Доступность = ОтборПоВР;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	Элементы.ОтборПоОрганизацииВидСравнения.Доступность = ОтборПоОрганизации;
	Элементы.ОтборПоОрганизацииЗначение.Доступность = ОтборПоОрганизации;
	Элементы.ОрганизацияКонтрагент.Доступность = ОтборПоОрганизации;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	Если ТипЗнч(Расшифровки) = Тип("Массив") Тогда
		
		СтандартнаяОбработка = Ложь;
		Расшифровка = Расшифровки[Расшифровки.Количество()-1];
		ПоказатьЗначение(Неопределено, Расшифровка.ДокументППР);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИерархиюПриИзменении(Элемент)
	Элементы.ИерархияОР.Доступность = ОтображатьИерархию;
	Элементы.Родитель.Доступность = ОтображатьИерархию;
	Элементы.ОтборПоРодителюВидСравнения.Доступность = ОтображатьИерархию;
	Если НЕ ЗначениеЗаполнено(Родитель) И ОтображатьИерархию И ЗначениеЗаполнено(ИерархияОР) Тогда 
		ОпределитьТипРодителя();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИерархияОРПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ИерархияОР) Тогда 
		ОпределитьТипРодителя();
		УстановитьПараметрыВыбораРодителя();
	Иначе
		Родитель = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоРодителюВидСравненияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ИерархияОР) Тогда 
		ОпределитьТипРодителя(Истина);
	Иначе
		Родитель = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		Диаграмма.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		Диаграмма.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		Диаграмма.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		Диаграмма.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОРВидСравненияПриИзменении(Элемент)
	
	Если ОтборПоОРВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоОРВидСравнения = ВидСравнения.НеРавно Тогда
		Если ОтборПоОРЗначение = Неопределено Тогда
			
			ОтборПоОРЗначение = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
			
		ИначеЕсли ТипЗнч(ОтборПоОРЗначение) = Тип("СписокЗначений") Тогда
			
			ОтборПоОРЗначение = ?(ОтборПоОРЗначение.Количество(),ОтборПоОРЗначение[0].Значение, ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"));
			
		КонецЕсли;
	Иначе
		Если ОтборПоОРЗначение <> Тип("СписокЗначений") Тогда
			
			ОтборПоОРЗначение = Новый СписокЗначений;
			ОтборПоОРЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВРВидСравненияПриИзменении(Элемент)
	
	Если ОтборПоВРВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоВРВидСравнения = ВидСравнения.НеРавно Тогда
		Если ОтборПоВРЗначение = Неопределено Тогда
			
			ОтборПоВРЗначение = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
			
		ИначеЕсли ТипЗнч(ОтборПоВРЗначение) = Тип("СписокЗначений") Тогда
			
			ОтборПоВРЗначение = ?(ОтборПоВРЗначение.Количество(),ОтборПоВРЗначение[0].Значение, ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка"));
			
		КонецЕсли;
	Иначе
		Если ОтборПоВРЗначение <> Тип("СписокЗначений") Тогда
			
			ОтборПоВРЗначение = Новый СписокЗначений;
			ОтборПоВРЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииВидСравненияПриИзменении(Элемент)
	
	Если ОтборПоОрганизацииВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоОрганизацииВидСравнения = ВидСравнения.НеРавно Тогда
		Если ОтборПоОрганизацииЗначение = Неопределено Тогда
			
			ОтборПоОрганизацииЗначение = ОрганизацияКонтрагент; 
			
		ИначеЕсли ТипЗнч(ОтборПоОрганизацииЗначение) = Тип("СписокЗначений") Тогда
			
			ОтборПоОрганизацииЗначение = ?(ОтборПоОрганизацииЗначение.Количество(),ОтборПоОрганизацииЗначение[0].Значение, ОрганизацияКонтрагент);
			
		КонецЕсли;
	Иначе
		Если ОтборПоОрганизацииЗначение <> Тип("СписокЗначений") Тогда
			
			ОтборПоОрганизацииЗначение = Новый СписокЗначений;
			ОтборПоОрганизацииЗначение.ТипЗначения = ?(ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации"), Новый ОписаниеТипов("СправочникСсылка.Организации"), Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИсполнительПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПодразделениеИсполнитель) Тогда 
		КонтрагентИсполнитель = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентИсполнительПриИзменении(Элемент)
	Если ЗначениеЗаполнено(КонтрагентИсполнитель) Тогда 
		ПодразделениеИсполнитель = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СортироватьПоОР(Команда)
	СортироватьПоОР = НЕ СортироватьПоОР;
	Элементы.СортироватьПоОР.Пометка = СортироватьПоОР;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для каждого ТочкаДиаграммы Из Диаграмма.Точки Цикл
		Диаграмма.РазвернутьТочку(ТочкаДиаграммы, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для каждого ТочкаДиаграммы Из Диаграмма.Точки Цикл
		Диаграмма.СвернутьТочку(ТочкаДиаграммы, Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛегенду(Команда)
	Элементы.ПоказатьЛегенду.Пометка = НЕ Элементы.ПоказатьЛегенду.Пометка;
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказатьЛегенду.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДатаНач) ИЛИ НЕ ЗначениеЗаполнено(ДатаКон) Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заполнен период отчета!'"));
		Возврат;
		
	ИначеЕсли (ДатаНач > ДатаКон) или (ДатаНач <= Дата("10000101000000")) или (ДатаКон >= Дата("30000101000000")) Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Неправильно установлен период отчета, возможно дата окончания меньше даты начала, дата больше 3000 года или меньше 1000.'"));
		Возврат;
		
	ИначеЕсли ОтображатьИерархию И НЕ ЗначениеЗаполнено(ИерархияОР) Тогда 
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана иерархия для отображения.'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПостроения = ПолучитьПараметрыПостроенияДиаграммыНаКлиенте();
	
	Диаграмма.Очистить();	
	СформироватьНаСервере(Диаграмма, Истина, ПараметрыПостроения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)
	ОтображатьЗамещенные = НЕ ОтображатьЗамещенные;
	Элементы.ФормаОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакИзображение(Команда)
	
	Если Диаграмма.Точки.Количество() = 0 ИЛИ Диаграмма.Серии.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для сохранения отчета его необходимо сформировать.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Формат PNG (*.png)|*.png|'")
		+ НСтр("ru = 'Формат BMP (*.bmp)|*.bmp|'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьКакИзображениеПослеВыбораФайла", ЭтотОбъект);
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакИзображениеПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		
		ИмяФайла = ВыбранныеФайлы[0];
		
		Попытка
			Картинка = Диаграмма.ПолучитьКартинку(Элементы.Диаграмма.Ширина*15, Элементы.Диаграмма.Высота*15, ФорматКартинки[Прав(ИмяФайла,3)]);
			Картинка.Записать(ИмяФайла);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать файл!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПечатьДиаграммы(Команда)
	
	ПараметрыПостроения = ПолучитьПараметрыПостроенияДиаграммыНаКлиенте();
	ТабДок = ПолучитьТабличныйДокумент(ПараметрыПостроения);
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
 
	ИдентификаторПечатнойФормы = "Сводная диаграмма графиков ППР";
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = "Сводная диаграмма графиков ППР";
	ПечатнаяФорма.ТабличныйДокумент = ТабДок;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = "Сводная диаграмма графиков ППР";
 
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = ДатаНач;
	Диалог.Период.ДатаОкончания = ДатаКон;
	Диалог.Показать(Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьПараметрыПостроенияДиаграммыНаКлиенте()
	
	СтруктураПараметров = Новый Структура(
		"ОтображатьИерархию,ИерархияОР,Родитель, 
		|ОтборПоОР,ОтборПоОРЗначение,ОтборПоОРВидСравнения,
		|ПодразделениеВладелец,ПодразделениеИсполнитель,КонтрагентИсполнитель,
		|ОтборПоВР,ОтборПоВРЗначение,ОтборПоВРВидСравнения,
		|ОтборПоОрганизации,ОтборПоОрганизацииЗначение,ОтборПоОрганизацииВидСравнения,
		|ДатаНач,ДатаКон,
		|ОтображатьЗамещенные,СортироватьПоОР");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтаФорма);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьОтборПоИерархииИРодителю(Запрос, ИерархияОР, РодительОР, ДатаНач, ОтборПоРодителюВидСравнения)
	ПараметрыИерархии = торо_РаботаСИерархией20.ПолучитьПараметрыИерархии(ИерархияОР);
	УстановитьДопОтбор = Ложь;
	Если ЗначениеЗаполнено(РодительОР) Тогда 
		Если ТипЗнч(РодительОР) = Тип("СписокЗначений") Тогда 
			ПараметрРодительОР = Новый Массив;
			Для Каждого Элемент Из РодительОР Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда 
					ПараметрРодительОР.Добавить(Элемент.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПараметрРодительОР = РодительОР;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрРодительОР) Тогда 
			ПодчиненныеОР = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(ПараметрРодительОР, ИерархияОР, ДатаНач, Истина);
			Если ОтборПоРодителюВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоРодителюВидСравнения = ВидСравнения.ВСписке Тогда
				ВидСравненияПоРодителюТекст = "В";
			Иначе
				ВидСравненияПоРодителюТекст = "НЕ В";
			КонецЕсли;
			Если ПараметрыИерархии.СтроитсяАвтоматически Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборыПоИерархииИРодителю", СтрШаблон("торо_ОбъектыРемонта.Ссылка %1 (&ПодчиненныеОР)", ВидСравненияПоРодителюТекст));
				Запрос.УстановитьПараметр("ПодчиненныеОР", ПодчиненныеОР);
				Возврат;
			Иначе
				ДопОтборы = СтрШаблон("ОбъектИерархии %1 (&ПодчиненныеОР)", ВидСравненияПоРодителюТекст);
				УстановитьДопОтбор = Истина;
			КонецЕсли;
		Иначе
			ДопОтборы = "Истина";
		КонецЕсли;
	ИначеЕсли ПараметрыИерархии.СтроитсяАвтоматически Тогда 
		Запрос.УстановитьПараметр("ОтборыПоИерархииИРодителю", Истина);
		Возврат;
	Иначе
		ДопОтборы = "Истина";
	КонецЕсли;
	
	ЗапросИерархии = Новый Запрос;
	Если ПараметрыИерархии.ИзменяетсяДокументами Тогда 
		ЗапросИерархии.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			&ДатаСреза,
		|			СтруктураИерархии = &СтруктураИерархии
		|				И &ДопОтборы) КАК Таблица
		|ГДЕ
		|	НЕ Таблица.Удален
		|	И НЕ Таблица.ОбъектИерархии.ЭтоГруппа";
		ЗапросИерархии.УстановитьПараметр("ДатаСреза", ДатаНач);
	ИначеЕсли НЕ ПараметрыИерархии.СтроитсяАвтоматически Тогда
		ЗапросИерархии.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК Таблица
		|ГДЕ
		|	Таблица.СтруктураИерархии = &СтруктураИерархии
		|	И НЕ Таблица.ОбъектИерархии.ЭтоГруппа
		|	И &ДопОтборы";
	КонецЕсли;
	ЗапросИерархии.УстановитьПараметр("СтруктураИерархии", ИерархияОР);
	ЗапросИерархии.Текст = СтрЗаменить(ЗапросИерархии.Текст, "&ДопОтборы", ДопОтборы); 
	Если УстановитьДопОтбор Тогда 
		ЗапросИерархии.УстановитьПараметр("ПодчиненныеОР", ПодчиненныеОР); 
	КонецЕсли;
	РезЗапроса = ЗапросИерархии.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		МассивОРДляОтбора = Новый Массив;
	Иначе
		МассивОРДляОтбора = РезЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектИерархии");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборыПоИерархииИРодителю", "торо_ОбъектыРемонта.Ссылка В (&МассивОРДляОтбора)");
	Запрос.УстановитьПараметр("МассивОРДляОтбора", МассивОРДляОтбора);
КонецПроцедуры
	
&НаСервере
Процедура СформироватьНаСервере(ЭлементВыводаДиаграммы, ДиаграммаДляОтчета, ПараметрыПостроения, МакетОтчета = Неопределено)
	
	// Заполнить параметры
	ОтображатьИерархию  		= ПараметрыПостроения.ОтображатьИерархию;
	ИерархияОР  				= ПараметрыПостроения.ИерархияОР;
	РодительОР					= ПараметрыПостроения.Родитель;
	ОтборПоОР    				= ПараметрыПостроения.ОтборПоОР;
	ОтборПоОРЗначение     		= ПараметрыПостроения.ОтборПоОРЗначение;
	ОтборПоОРВидСравнения  		= ПараметрыПостроения.ОтборПоОРВидСравнения;
	ПодразделениеВладелец   	= ПараметрыПостроения.ПодразделениеВладелец;
	Если ЗначениеЗаполнено(ПараметрыПостроения.ПодразделениеИсполнитель) Тогда 
		Исполнитель = ПараметрыПостроения.ПодразделениеИсполнитель;
	Иначе
		Исполнитель = ПараметрыПостроения.КонтрагентИсполнитель;
	КонецЕсли;
	
	ОтборПоВР           		= ПараметрыПостроения.ОтборПоВР;
	ОтборПоВРЗначение   		= ПараметрыПостроения.ОтборПоВРЗначение;
	ОтборПоВРВидСравнения   	= ПараметрыПостроения.ОтборПоВРВидСравнения;
	ОтборПоОрганизации           		= ПараметрыПостроения.ОтборПоОрганизации;
	ОтборПоОрганизацииЗначение   		= ПараметрыПостроения.ОтборПоОрганизацииЗначение;
	ОтборПоОрганизацииВидСравнения   	= ПараметрыПостроения.ОтборПоОрганизацииВидСравнения;
	ДатаНач           			= ПараметрыПостроения.ДатаНач;
	ДатаКон      				= ПараметрыПостроения.ДатаКон;
	ОтображатьЗамещенные     	= ПараметрыПостроения.ОтображатьЗамещенные;
	СортироватьПоОР     		= ПараметрыПостроения.СортироватьПоОР;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыеДаты.IDРемонта КАК IDРемонта,
	|	ПлановыеДаты.ДатаНачала КАК ДатаНачала,
	|	ПлановыеДаты.ДатаОкончания КАК ДатаОкончания,
	|	ПлановыеДаты.ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ ВТ_ПлановыеДаты
	|ИЗ
	|	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК ПлановыеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|		ПО ПлановыеДаты.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	|			И (ПлановыеДаты.ДокументНачалаЦепочки ССЫЛКА Документ.торо_ПланГрафикРемонта)
	|			И (ПлановыеДаты.ДатаНачала МЕЖДУ &ПолеВводаДатаНачала И &ПолеВводаДатаКонца)
	|			И (&ОтборыПоОбъектуРемонта)
	|			И (&ОтборыПоИерархииИРодителю)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблОбъектовРем.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	ТаблОбъектовРем.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ТаблОбъектовРем.ДатаНачалаРемонтныхРабот КАК ДатаНач,
	|	ТаблОбъектовРем.ДатаОкончанияРемонтныхРабот КАК ДатаКон,
	|	ТаблОбъектовРем.Регистратор КАК ДокументППР,
	|	ТаблОбъектовРем.ID КАК ID,
	|	ТаблОбъектовРем.Замещен КАК Замещен,
	|	ТаблОбъектовРем.Отменен КАК Отменен
	|ПОМЕСТИТЬ ВТ_ПлановыеРемонты
	|ИЗ
	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	|			,
	|			ID В
	|				(ВЫБРАТЬ
	|					ВТ_ПлановыеДаты.IDРемонта КАК IDРемонта
	|				ИЗ
	|					ВТ_ПлановыеДаты КАК ВТ_ПлановыеДаты)) КАК ТаблОбъектовРем
	|ГДЕ
	|	НЕ ТаблОбъектовРем.Отменен
	|	И (&ПоказыватьЗамещенные
	|			ИЛИ НЕ ТаблОбъектовРем.Замещен)
	|	И &БлокОтборов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПлановыеРемонты.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	ВТ_ПлановыеРемонты.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ВТ_ПлановыеДаты.ДатаНачала КАК ДатаНач,
	|	ВТ_ПлановыеДаты.ДатаОкончания КАК ДатаКон,
	|	ВТ_ПлановыеРемонты.ДокументППР КАК ДокументППР,
	|	ВТ_ПлановыеРемонты.ID КАК ID,
	|	ВТ_ПлановыеРемонты.Замещен КАК Замещен,
	|	ВТ_ПлановыеРемонты.Отменен КАК Отменен,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаНачСт,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаКонСт,
	|	ЛОЖЬ КАК ЗамещенСт,
	|	ЛОЖЬ КАК ЕстьВЗ,
	|	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
	|	ИСТИНА КАК ДоступенДляРедактирования,
	|	0 КАК НомерОР
	|ИЗ
	|	ВТ_ПлановыеРемонты КАК ВТ_ПлановыеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПлановыеДаты КАК ВТ_ПлановыеДаты
	|		ПО ВТ_ПлановыеРемонты.ID = ВТ_ПлановыеДаты.IDРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	&БлокУпорядочиваний";
	
	ОтборыПоОбъектуРемонта = "";
	
	Если ОтборПоОР Тогда
		Если ОтборПоОРЗначение <> Неопределено Тогда
			ВидСравненияВЗапросе = торо_ПечатьСервер.ПолучитьВидСравненияДляЗапроса(ОтборПоОРВидСравнения);
			ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
			| торо_ОбъектыРемонта.Ссылка " + ВидСравненияВЗапросе.ВидСравненияНачало + "&ПолеВводаОбъектРемонта" + ВидСравненияВЗапросе.ВидСравненияКонец;
		Иначе
			ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
			|  торо_ОбъектыРемонта.Ссылка = Значение(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)"; 
		КонецЕсли;
	КонецЕсли;
	
	Если ОтображатьИерархию Тогда
		УстановитьОтборПоИерархииИРодителю(Запрос, ИерархияОР, РодительОР, ДатаНач, ОтборПоРодителюВидСравнения);		
	Иначе
		Запрос.УстановитьПараметр("ОтборыПоИерархииИРодителю", Истина);
	КонецЕсли;

	Если ОтборПоОрганизации Тогда
		Если ОтборПоОрганизацииЗначение <> Неопределено Тогда
			ВидСравненияВЗапросе = торо_ПечатьСервер.ПолучитьВидСравненияДляЗапроса(ОтборПоОрганизацииВидСравнения);
			Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
				ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
				| торо_ОбъектыРемонта.Организация " + ВидСравненияВЗапросе.ВидСравненияНачало + "&ПолеВводаОрганизации" + ВидСравненияВЗапросе.ВидСравненияКонец;
			Иначе
				ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
				| торо_ОбъектыРемонта.Контрагент " + ВидСравненияВЗапросе.ВидСравненияНачало + "&ПолеВводаОрганизации" + ВидСравненияВЗапросе.ВидСравненияКонец;
			КонецЕсли;		
		Иначе
			Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда	
				ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
				|  торо_ОбъектыРемонта.Организация = Значение(Справочник.Организации.ПустаяСсылка)";		
			Иначе
				ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
				|  торо_ОбъектыРемонта.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка)";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодразделениеВладелец) Тогда
		ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
		|  торо_ОбъектыРемонта.Подразделение = &ПолеВводаПодразделениеВладелец";
	КонецЕсли;
		
	////////////////////////////////////////////////////////////////////////////
	
	БлокОтборов = "";
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		БлокОтборов = БлокОтборов + " И	 
		|  ТаблОбъектовРем.Исполнитель = &ПолеВводаИсполнитель";
	КонецЕсли;

	Если ОтборПоВР Тогда
		Если ОтборПоВРЗначение <> Неопределено Тогда
			ВидСравненияВЗапросе = торо_ПечатьСервер.ПолучитьВидСравненияДляЗапроса(ОтборПоВРВидСравнения);
			БлокОтборов = БлокОтборов + " И	 
			| ТаблОбъектовРем.ВидРемонтныхРабот " + ВидСравненияВЗапросе.ВидСравненияНачало + "&ПолеВводаВидРемонта" + ВидСравненияВЗапросе.ВидСравненияКонец;
		Иначе
			БлокОтборов = БлокОтборов + " И	 
			|  ТаблОбъектовРем.ВидРемонтныхРабот = Значение(Справочник.торо_ВидыРемонтов.ПустаяСсылка)";		
		КонецЕсли;	
	КонецЕсли;

	БлокУпорядочиваний = "";
	Если СортироватьПоОР И НЕ ДиаграммаДляОтчета Тогда
	    БлокУпорядочиваний = БлокУпорядочиваний + "ОбъектРемонтныхРабот.Наименование";
	Иначе
	    БлокУпорядочиваний = БлокУпорядочиваний + "ВидРемонтныхРабот.Наименование";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ПолеВводаОбъектРемонта", ОтборПоОРЗначение);
	Запрос.УстановитьПараметр("ПолеВводаПодразделениеВладелец", ПодразделениеВладелец);
	Запрос.УстановитьПараметр("ПолеВводаИсполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ПолеВводаВидРемонта",    ОтборПоВРЗначение);
	Запрос.УстановитьПараметр("ПолеВводаОрганизации",    ОтборПоОрганизацииЗначение);
	Запрос.УстановитьПараметр("СтруктураИерархии",      ИерархияОР); 
	Запрос.УстановитьПараметр("ПолеВводаДатаНачала",    ДатаНач);
	Запрос.УстановитьПараметр("ПолеВводаДатаКонца",     ДатаКон);
	Запрос.УстановитьПараметр("ПоказыватьЗамещенные",	ОтображатьЗамещенные);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (&ОтборыПоОбъектуРемонта)", ОтборыПоОбъектуРемонта);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &БлокОтборов", БлокОтборов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&БлокУпорядочиваний", БлокУпорядочиваний);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
				
		Если ДиаграммаДляОтчета Тогда
			
			ЭлементВыводаДиаграммы.Обновление = Ложь;
			Если НЕ ОтображатьИерархию Тогда
				торо_Ремонты.ПостроитьДиаграммуГантаДляППР(ЭлементВыводаДиаграммы, РезультатЗапроса.Выгрузить(), ИерархияОР, 
					ОтображатьИерархию, Ложь, Ложь, Истина, СортироватьПоОР);
			Иначе
				ТаблицаКонечныхДанных = РезультатЗапроса.Выгрузить();
				ТаблицаКонечныхДанных.Индексы.Добавить("ОбъектРемонтныхРабот");
				МассивРазличныхОР = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаКонечныхДанных.ВыгрузитьКолонку("ОбъектРемонтныхРабот"));

				ПустойРодитель = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(ИерархияОР);
				ТаблицаДанныхРодителей = ПолучитьТаблицуРодителей(ИерархияОР, МассивРазличныхОР, ПустойРодитель, ДатаНач);
				
				Если Не СортироватьПоОР Тогда
					ОтсортироватьПоИерархии(ТаблицаДанныхРодителей);				
				КонецЕсли;
				
				СерияРемонт = ЭлементВыводаДиаграммы.Серии.Добавить();
				СерияРемонт.Текст = "График ремонта";
				
				ВывестиИерархиюВДиаграмму(ЭлементВыводаДиаграммы, ТаблицаДанныхРодителей, ТаблицаКонечныхДанных, ПустойРодитель, СерияРемонт);
					
			КонецЕсли;
		
		Иначе // Печать
			
			РезультатТЧ = РезультатЗапроса.Выгрузить();
			
			Область = МакетОтчета.ПолучитьОбласть("Шапка");
			ЭлементВыводаДиаграммы.Вывести(Область);
			МассивОбъектов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатТЧ.ВыгрузитьКолонку("ОбъектРемонтныхРабот"));

			Если ОтображатьИерархию Тогда 
				ПустойРодитель = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(ИерархияОР);
				ТаблицаДанныхРодителей = ПолучитьТаблицуРодителей(ИерархияОР, МассивОбъектов, ПустойРодитель, ДатаНач);
				
				Если Не СортироватьПоОР Тогда			
					ОтсортироватьПоИерархии(ТаблицаДанныхРодителей);			
				КонецЕсли;
				
				ОтсортированныйСписок = Новый СписокЗначений;
				ОтсортироватьОбъектыРемонтаПоИерархии(ТаблицаДанныхРодителей, ПустойРодитель, ОтсортированныйСписок); 
				МассивОбъектов = ОтсортированныйСписок.ВыгрузитьЗначения();
			КонецЕсли;
					
			ШиринаТаблицы = Область.ШиринаТаблицы;
			
			МассивВременныхИнтервалов = Новый Массив;
			ПериодКонРасчетный = КонецМесяца(ДатаКон);
			ТемпДата = НачалоМесяца(ДатаНач);
			ПериодовВОтчете = 0;
			СледующийМесяц = Истина;
			Пока СледующийМесяц Цикл
				Область = МакетОтчета.ПолучитьОбласть("СтолбецДня");
				ОбластьОформления = Область.Область("Знач");
				
				Область.Параметры.НомИнтервала = торо_ПечатьСервер.НазваниеМесяцаСтрокойПадежное(Месяц(ТемпДата)) + Символы.ПС + Сред(ТемпДата, 7, 4); 
				ЭлементВыводаДиаграммы.Присоединить(Область);
				
				ЕдиничныйИнтервал = Новый Структура;
				ЕдиничныйИнтервал.Вставить("НачИнт", НачалоМесяца(ТемпДата));
				ЕдиничныйИнтервал.Вставить("КонИнт", КонецМесяца(ТемпДата));	
				МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);

				ТемпДата = ДобавитьМесяц(ТемпДата, 1);
				Если ТемпДата > ПериодКонРасчетный Тогда
					СледующийМесяц = Ложь;		
				КонецЕсли;	
				
				ПериодовВОтчете = ПериодовВОтчете + 1;
			КонецЦикла;
			
			ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете * Область.ШиринаТаблицы;
			
			НСТР = 1;
			Для Каждого СтрокаТЧ Из МассивОбъектов Цикл
				
				Область = МакетОтчета.ПолучитьОбласть("СтрокаЗаполнения");
				
				ФорматнаяОбласть = Область.Область("НаимПрим");
				ФорматнаяОбласть.Примечание.Текст = СтрокаТЧ.ПлановыйГрафикРаботы.Наименование;
				
				Область.Параметры.НПП = НСТР;
				Область.Параметры.НаименовОбъекта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(СтрокаТЧ);
				
				ЭлементВыводаДиаграммы.Вывести(Область);
				
				Условие = Новый Структура;
				Условие.Вставить("ОбъектРемонтныхРабот", СтрокаТЧ);
				
				НайденныеСтроки = РезультатТЧ.НайтиСтроки(Условие);
				Для Сч = 1 по  МассивВременныхИнтервалов.Количество() Цикл
					
					БуфГод = "";
					ТекущийПериодНач = МассивВременныхИнтервалов[Сч - 1].НачИнт;
					ТекущийПериодКон = МассивВременныхИнтервалов[Сч - 1].КонИнт;
					
					Область = МакетОтчета.ПолучитьОбласть("ЗначенияДня");
					ОбластьФормат = Область.Область();
					
					Для Каждого ОбъектСравнения Из НайденныеСтроки Цикл
						
						Если ОбъектСравнения.ДатаКон < ОбъектСравнения.ДатаНач Тогда
							КонечнаяДата = КонецДня(ОбъектСравнения.ДатаНач);
						Иначе
							КонечнаяДата = ОбъектСравнения.ДатаКон;
						КонецЕсли;
						
						Если  ((ТекущийПериодКон >= ОбъектСравнения.ДатаНач) И (ТекущийПериодНач <= КонечнаяДата)) Или
							((ТекущийПериодКон > ОбъектСравнения.ДатаНач) И (ТекущийПериодНач <= КонечнаяДата)) Тогда
							
							ОбластьФормат.ЦветФона = Новый Цвет(255, 251, 240);
							
							ПредставлениеВидаРемонта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ОбъектСравнения.ВидРемонтныхРабот);
							БуфГод = БуфГод + ПредставлениеВидаРемонта + ", ";			
							
							ОбластьФормат.Примечание.Текст =  ОбластьФормат.Примечание.Текст + ПредставлениеВидаРемонта +
							" (" + Лев(ОбъектСравнения.ДатаНач, 10) + " - " + Лев(ОбъектСравнения.ДатаКон, 10) + ") "; 
							
							Если ОбъектСравнения.Замещен Тогда 
								ОбластьФормат.Примечание.Текст = ОбластьФормат.Примечание.Текст + "(Замещен)";
							КонецЕсли;
							
							ОбластьФормат.Примечание.Текст = ОбластьФормат.Примечание.Текст + Символы.ПС;
														
						КонецЕсли;
						
					КонецЦикла;
					
					Область.Параметры.заполнение = Лев(БуфГод, СтрДлина(БуфГод) - 2);
					ЭлементВыводаДиаграммы.Присоединить(Область);
					
				КонецЦикла;
				
				НСТР = НСТР + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДиаграммаДляОтчета Тогда
		
		ЭлементВыводаДиаграммы.АвтоОпределениеПолногоИнтервала = Ложь;
	 	ЭлементВыводаДиаграммы.УстановитьПолныйИнтервал(НачалоДня(ДатаНач), КонецДня(ДатаКон));  
	 	ЭлементВыводаДиаграммы.ОтображатьЛегенду = Ложь;
		ЭлементВыводаДиаграммы.Обновление = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтсортироватьОбъектыРемонтаПоИерархии(ТаблицаИерархии, Родитель, СписокСортировки)
	ТекУровень = ТаблицаИерархии.НайтиСтроки(Новый Структура("РодительИерархии", Родитель));
	Если ТекУровень.Количество() Тогда 
		Для Каждого ОбъектРемонта Из ТекУровень Цикл
			ОтсортироватьОбъектыРемонтаПоИерархии(ТаблицаИерархии, ОбъектРемонта.ОбъектИерархии, СписокСортировки);
		КонецЦикла;
	Иначе
		СписокСортировки.Добавить(Родитель);
	КонецЕсли;
КонецПроцедуры
			
&НаСервереБезКонтекста
Функция ПолучитьТаблицуРодителей(ИерархияОР, МассивРазличныхОР, ПустойРодитель, ДатаНачала)
	ТаблицаИерархии = торо_РаботаСИерархией20.ПолучитьТаблицуИерархии(ИерархияОР, ДатаНачала);
	ТаблицаИерархии.Индексы.Добавить("ОбъектИерархии");
	
	ТаблицаДанныхРодителей = Новый ТаблицаЗначений;
	ТаблицаДанныхРодителей.Колонки.Добавить("ОбъектИерархии");
	ТаблицаДанныхРодителей.Колонки.Добавить("РодительИерархии");
	ТаблицаДанныхРодителей.Колонки.Добавить("ЗначениеСортировки");
	
	ТаблицаДанныхРодителей.Индексы.Добавить("ОбъектИерархии");
	ТаблицаДанныхРодителей.Индексы.Добавить("РодительИерархии");
	
	ДополнитьТаблицуДанныхРодителейРекурсивно(ТаблицаДанныхРодителей, ТаблицаИерархии, МассивРазличныхОР, ПустойРодитель);
	ТаблицаДанныхРодителей.Сортировать("ЗначениеСортировки");
	Возврат ТаблицаДанныхРодителей;
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьТаблицуДанныхРодителейРекурсивно(ТаблицаДанныхРодителей, ТаблицаИерархии, МассивРазличныхОР, ПустойРодитель)
	
	Если МассивРазличныхОР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивРазличныхРодителей = Новый Массив;
	
	Для каждого ОбъектРемонта из МассивРазличныхОР Цикл
		НайденнаяСтрока = ТаблицаДанныхРодителей.Найти(ОбъектРемонта, "ОбъектИерархии");
		Если НайденнаяСтрока <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРодителя = ТаблицаИерархии.Найти(ОбъектРемонта, "ОбъектИерархии");
		Если СтрокаРодителя <> Неопределено Тогда
			РодительОР = СтрокаРодителя.РодительИерархии;
		Иначе
			РодительОР = ПустойРодитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РодительОР) И МассивРазличныхРодителей.Найти(РодительОР) = Неопределено Тогда
			МассивРазличныхРодителей.Добавить(РодительОР);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДанныхРодителей.Добавить();
		НоваяСтрока.ОбъектИерархии = ОбъектРемонта;
		НоваяСтрока.РодительИерархии = РодительОР;
		НоваяСтрока.ЗначениеСортировки = Строка(ОбъектРемонта);
	КонецЦикла;
	
	ДополнитьТаблицуДанныхРодителейРекурсивно(ТаблицаДанныхРодителей, ТаблицаИерархии, МассивРазличныхРодителей, ПустойРодитель);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиИерархиюВДиаграмму(Диаграмма, ТаблицаДанныхРодителей, ТаблицаКонечныхДанных, ТекущийРодитель, Серия, ТочкаРодителя = Неопределено)
	СтрокиПодчиненных = ТаблицаДанныхРодителей.НайтиСтроки(Новый Структура("РодительИерархии", ТекущийРодитель));
	Для каждого Строка из СтрокиПодчиненных Цикл
		Если ТочкаРодителя = Неопределено Тогда
			НоваяТочкаОР = Диаграмма.Точки.Добавить();
		Иначе
			НоваяТочкаОР = ТочкаРодителя.Точки.Добавить();
		КонецЕсли;
		
		НоваяТочкаОР.Текст = СокрЛП(Строка.ОбъектИерархии);
		НоваяТочкаОР.Расшифровка = Строка.ОбъектИерархии;
		
		СтрокиКонечныхДанных = ТаблицаКонечныхДанных.НайтиСтроки(Новый Структура("ОбъектРемонтныхРабот", Строка.ОбъектИерархии));
		Для каждого СтрокаДанных из СтрокиКонечныхДанных Цикл
			ТочкаВР = ПолучитьТочкуВидаРемонта(НоваяТочкаОР, СтрокаДанных.ВидРемонтныхРабот);
			ДобавитьИнтервалВДиаграмму(Диаграмма, СтрокаДанных, Серия, ТочкаВР);
		КонецЦикла;
		
		ВывестиИерархиюВДиаграмму(Диаграмма, ТаблицаДанныхРодителей, ТаблицаКонечныхДанных, Строка.ОбъектИерархии, Серия, НоваяТочкаОР);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТочкуВидаРемонта(ТочкаОР, ВидРемонта)
	
	ТочкаВР = Неопределено;
	
	Для Каждого Точка1 Из ТочкаОР.Точки Цикл
		Если Точка1.Расшифровка = ВидРемонта Тогда
			ТочкаВР = Точка1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТочкаВР = Неопределено Тогда
		ТочкаВР = ТочкаОР.Точки.Добавить();
		ТочкаВР.Текст = СокрЛП(ВидРемонта);
		ТочкаВР.Расшифровка = ВидРемонта;
	КонецЕсли;
	
	Возврат ТочкаВР;
		
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьИнтервалВДиаграмму(Диаграмма, СтрокаДанных, Серия, Точка)
	
	ТекДата = ТекущаяДата();
	
	Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
	Интервал = Значение.Добавить();
	
	Интервал.Начало = СтрокаДанных.ДатаНач;
	Интервал.Конец  = КонецДня(?(СтрокаДанных.ДатаКон > СтрокаДанных.ДатаНач, СтрокаДанных.ДатаКон, СтрокаДанных.ДатаНач + 3600));
	Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
	Интервал.Цвет	= ?(СтрокаДанных.ДатаНач < ТекДата, WebЦвета.Черный, ?(СтрокаДанных.Замещен, WebЦвета.СветлоСерый, WebЦвета.Васильковый));

	СкопироватьИнтервалВверхПоТочкамДиаграммы(Диаграмма, Интервал, Серия, Точка.Родитель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьИнтервалВверхПоТочкамДиаграммы(Диаграмма, КопируемыйИнтервал, Серия, Точка)
	
	Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
	Интервал = Значение.Добавить();
	
	Интервал.Начало = КопируемыйИнтервал.Начало;
	Интервал.Конец  = КопируемыйИнтервал.Конец;
	Интервал.Текст  = КопируемыйИнтервал.Текст;
	Интервал.Цвет = КопируемыйИнтервал.Цвет;
	
	Если ТипЗнч(Точка.Родитель) = Тип("ТочкаДиаграммыГанта") Тогда
		СкопироватьИнтервалВверхПоТочкамДиаграммы(Диаграмма, КопируемыйИнтервал, Серия, Точка.Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Список)
	
	Список.Добавить(ВидСравнения.Равно, "Равно");   
	Список.Добавить(ВидСравнения.НеРавно, "Не равно");
	Список.Добавить(ВидСравнения.ВСписке, "В списке");
	Список.Добавить(ВидСравнения.НеВСписке, "Не в списке"); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокумент(ПараметрыПостроения)
	
	ТД = Новый ТабличныйДокумент;
	
	МакетОтчета = Отчеты.торо_СводнаяДиаграммаГрафиковППР.ПолучитьМакет("ПФ_MXL_СводнаяДиаграммаГрафиковППР");
	
	ЗаголовокМакета = МакетОтчета.ПолучитьОбласть("Заголовок|Параметры");
	ЗаголовокМакета.Параметры.ДатаНачала = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
	ЗаголовокМакета.Параметры.ДатаОкончания = Формат(ДатаКон, "ДФ=dd.MM.yyyy");	
	ТД.Вывести(ЗаголовокМакета);
	
	Отступ = МакетОтчета.ПолучитьОбласть("Отступ");
	ТД.Вывести(Отступ);
	
	ВыводитьОтсутп = Ложь;
	
	Если ОтборПоОР И ЗначениеЗаполнено(ОтборПоОРЗначение) Тогда
		
		ОбъектРемонтаПараметр = МакетОтчета.ПолучитьОбласть("ОбъектРемонта|Параметры");
		ОбъектРемонтаПараметр.Параметры.ОбъектРемонта = ОтборПоОРЗначение;
		ОбъектРемонтаПараметр.Параметры.ВидСравнения = ОтборПоОРВидСравнения;
		ТД.Вывести(ОбъектРемонтаПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ОтборПоВР И ЗначениеЗаполнено(ОтборПоВРЗначение) Тогда
		
		ВидРемонтаПараметр = МакетОтчета.ПолучитьОбласть("ВидРемонта|Параметры");
		ВидРемонтаПараметр.Параметры.ВидРемонта = ОтборПоВРЗначение;
		ВидРемонтаПараметр.Параметры.ВидСравнения = ОтборПоВРВидСравнения;
		ТД.Вывести(ВидРемонтаПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ОтборПоОрганизации И ЗначениеЗаполнено(ОтборПоОрганизацииЗначение) Тогда
		
		ОрганизацияПараметр = МакетОтчета.ПолучитьОбласть("Организация|Параметры");
		Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
			ОрганизацияПараметр.Параметры.ОрганизацияКонтрагент = "Организация";
		Иначе
			ОрганизацияПараметр.Параметры.ОрганизацияКонтрагент = "Контрагент";
		КонецЕсли;
		ОрганизацияПараметр.Параметры.Организация = ОтборПоОрганизацииЗначение;
		ОрганизацияПараметр.Параметры.ВидСравнения = ОтборПоОрганизацииВидСравнения;
		ТД.Вывести(ОрганизацияПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ВыводитьОтсутп Тогда
		ТД.Вывести(Отступ);
	КонецЕсли;
	
	ВыводитьОтсутп = Ложь;
	
	Если Не ПодразделениеВладелец.Пустая() Тогда
		
		ПодразделениеВладелецПараметр = МакетОтчета.ПолучитьОбласть("ПодразделениеВладелец|Параметры");
		ПодразделениеВладелецПараметр.Параметры.ПодразделениеВладелец = ПодразделениеВладелец;
		ТД.Вывести(ПодразделениеВладелецПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если Не ПодразделениеИсполнитель.Пустая() ИЛИ НЕ КонтрагентИсполнитель.Пустая() Тогда
		
		ИсполнительПараметр = МакетОтчета.ПолучитьОбласть("Исполнитель|Параметры");
		ИсполнительПараметр.Параметры.Исполнитель = ?(ЗначениеЗаполнено(ПодразделениеИсполнитель), ПодразделениеИсполнитель, КонтрагентИсполнитель);
		ТД.Вывести(ИсполнительПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ВыводитьОтсутп Тогда
		ТД.Вывести(Отступ);
	КонецЕсли;
	
	ВыводитьОтсутп = Ложь;
	
	Если ОтображатьИерархию Тогда
		
		ИерархияПараметр = МакетОтчета.ПолучитьОбласть("Иерархия|Параметры");
		ИерархияПараметр.Параметры.Иерархия = ИерархияОР;
		ТД.Вывести(ИерархияПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ОтображатьЗамещенные Тогда
		
		ЗамещенныеПараметр = МакетОтчета.ПолучитьОбласть("Замещенные|Параметры");
		ЗамещенныеПараметр.Параметры.ОтображатьЗамещенные = ОтображатьЗамещенные;
		ТД.Вывести(ЗамещенныеПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;

	Если ВыводитьОтсутп Тогда
		ТД.Вывести(Отступ);
	КонецЕсли;
	
	ВыводитьОтсутп = Ложь;
	
	СформироватьНаСервере(ТД, Ложь, ПараметрыПостроения, МакетОтчета);
	
	ТД.ПолеСверху = 5;
	ТД.ПолеСлева = 5;
	ТД.ПолеСправа = 5;
	ТД.ПолеСнизу = 5;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Возврат ТД;
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьРеквизитыШапки()
	
	струкПараметров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастрйокиТОиР", "ПараметрыОтчета_СводнаяДиаграммаГрафиковППР", Неопределено);
	Если струкПараметров <> Неопределено Тогда
		
		струкПараметров.Свойство("ОтборПоОР", ОтборПоОР);
		струкПараметров.Свойство("ОтборПоОРВидСравнения", ОтборПоОРВидСравнения);
		струкПараметров.Свойство("ОтборПоОРЗначение", ОтборПоОРЗначение);
		
		струкПараметров.Свойство("ОтборПоВР",ОтборПоВР);
		струкПараметров.Свойство("ОтборПоВРВидСравнения",ОтборПоВРВидСравнения);
		струкПараметров.Свойство("ОтборПоВРЗначение",ОтборПоВРЗначение);
		
		струкПараметров.Свойство("ОтборПоОрганизации",ОтборПоОрганизации);
		струкПараметров.Свойство("ОтборПоОрганизацииВидСравнения",ОтборПоОрганизацииВидСравнения);
		струкПараметров.Свойство("ОтборПоОрганизацииЗначение",ОтборПоОрганизацииЗначение);
		
		струкПараметров.Свойство("ОтображатьИерархию",ОтображатьИерархию);
		струкПараметров.Свойство("ИерархияОР", ИерархияОР);
		
		струкПараметров.Свойство("ПодразделениеВладелец", ПодразделениеВладелец);
		струкПараметров.Свойство("ПодразделениеИсполнитель", ПодразделениеИсполнитель);
		
		Если НЕ ЗначениеЗаполнено(Родитель) И ОтображатьИерархию И ЗначениеЗаполнено(ИерархияОР) Тогда 
			ОпределитьТипРодителя();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВнешнимВидомФормы()
	Элементы.ОтборПоОРВидСравнения.Доступность = ОтборПоОР;
	Элементы.ОтборПоОРЗначение.Доступность = ОтборПоОР;
	
	Элементы.ОтборПоВРВидСравнения.Доступность = ОтборПоВР;
	Элементы.ОтборПоВРЗначение.Доступность = ОтборПоВР;
	
	Элементы.ОтборПоОрганизацииВидСравнения.Доступность = ОтборПоОрганизации;
	Элементы.ОтборПоОрганизацииЗначение.Доступность = ОтборПоОрганизации;
	Элементы.ОрганизацияКонтрагент.Доступность = ОтборПоОрганизации;
		
	Элементы.ИерархияОР.Доступность = ОтображатьИерархию;
	Элементы.Родитель.Доступность = ОтображатьИерархию;
	Элементы.ОтборПоРодителюВидСравнения.Доступность = ОтображатьИерархию;
	
КонецПроцедуры

&НаСервере 
Процедура ПриЗакрытииНаСервере()
	струкПараметров = Новый Структура(
		"ОтборПоОР, ОтборПоОРВидСравнения, ОтборПоОРЗначение, ОтборПоВР, ОтборПоВРВидСравнения, 
			|ОтборПоВРЗначение, ОтборПоОрганизации, ОтборПоОрганизацииВидСравнения, 
			|ОтборПоОрганизацииЗначение, ОтображатьИерархию, ИерархияОР, ПодразделениеВладелец, ПодразделениеИсполнитель",
		ОтборПоОР, ОтборПоОРВидСравнения, ОтборПоОРЗначение, ОтборПоВР, ОтборПоВРВидСравнения, 
			ОтборПоВРЗначение, ОтборПоОрганизации, ОтборПоОрганизацииВидСравнения, 
			ОтборПоОрганизацииЗначение, ОтображатьИерархию, ИерархияОР, ПодразделениеВладелец, ПодразделениеИсполнитель);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастрйокиТОиР", "ПараметрыОтчета_СводнаяДиаграммаГрафиковППР", струкПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКонтрагентПриИзменении(Элемент)
	ОтборПоОрганизацииЗначение = ОрганизацияКонтрагент;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДатаНач = Результат.ДатаНачала;
		ДатаКон = Результат.ДатаОкончания; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОпределитьТипРодителя(СохранитьЗначение = Ложь)
	ТипРеквизитаОР = ИерархияОР.ТипРеквизитаОР;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	Если ЗначениеЗаполнено(ТипРеквизитаОР) Тогда
		ПустаяСсылка = Справочники[ТипРеквизитаОР].ПустаяСсылка();
		МассивТипов.Добавить(ТипЗнч(ПустаяСсылка));
	КонецЕсли;
	
	НовыйТип = Новый ОписаниеТипов(МассивТипов);
	
	Если ОтборПоРодителюВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоРодителюВидСравнения = ВидСравнения.НеРавно Тогда
		Если СохранитьЗначение Тогда 
			Если ТипЗнч(Родитель) = Тип("СписокЗначений") И Родитель.Количество() Тогда 
				Родитель = Родитель[0].Значение;
			КонецЕсли;
		Иначе
			Родитель = Неопределено;
		КонецЕсли;
		Элементы.Родитель.ОграничениеТипа = НовыйТип;
	Иначе
		СтарыйРодитель = Родитель;
		СтарыйТип = Элементы.Родитель.ОграничениеТипа;
		Элементы.Родитель.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Родитель = Новый СписокЗначений;
		Родитель.ТипЗначения = НовыйТип;
		Если СохранитьЗначение Тогда 
			Если ТипЗнч(СтарыйРодитель) = Тип("СписокЗначений") И СтарыйРодитель.Количество() Тогда 
				Родитель.ЗагрузитьЗначения(СтарыйРодитель.ВыгрузитьЗначения());
			ИначеЕсли ТипЗнч(СтарыйРодитель) <> Тип("СписокЗначений") И ЗначениеЗаполнено(СтарыйРодитель) Тогда
				Родитель.Добавить(СтарыйРодитель);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораРодителя()
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("СтруктураИерархии", ИерархияОР));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы));
	Элементы.Родитель.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
КонецПроцедуры

&НаСервере
Процедура ОтсортироватьПоИерархии(ТаблицаДанныхРодителей)
	Счетчик = 1; 
	СписокОР = ТаблицаДанныхРодителей.ВыгрузитьКолонку("ОбъектИерархии");
	ТаблицаДанныхРодителей.Колонки.Добавить("Порядок");
	
	Если ЗначениеЗаполнено(ИерархияОР.ТипРеквизитаОР) Тогда 
		Если Метаданные.Справочники[ИерархияОР.ТипРеквизитаОР].ДлинаКода > 0 Тогда
			ЗапросСТипомЗначения = Новый Запрос;
			ЗапросСТипомЗначения.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
			|	СправочникСсылка.Код КАК Код
			|ИЗ
			|	Справочник."+ИерархияОР.ТипРеквизитаОР+" КАК СправочникСсылка
			|ГДЕ
			|	СправочникСсылка.Ссылка В(&СписокОР)
			|УПОРЯДОЧИТЬ ПО
			|	Код"; 
			
			ЗапросСТипомЗначения.УстановитьПараметр("СписокОР",ТаблицаДанныхРодителей);
			ВыборкаРеквизита = ЗапросСТипомЗначения.Выполнить().Выбрать();
			
		Иначе
			ЗапросСТипомЗначения = Новый Запрос;
			ЗапросСТипомЗначения.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
			|	СправочникСсылка.Наименование КАК Наименование
			|ИЗ
			|	Справочник."+ИерархияОР.ТипРеквизитаОР+" КАК СправочникСсылка
			|ГДЕ
			|	СправочникСсылка.Ссылка В(&СписокОР)
			|УПОРЯДОЧИТЬ ПО
			|	Наименование"; 
			
			ЗапросСТипомЗначения.УстановитьПараметр("СписокОР",ТаблицаДанныхРодителей);
			ВыборкаРеквизита = ЗапросСТипомЗначения.Выполнить().Выбрать();
		КонецЕсли;;
		
		Пока ВыборкаРеквизита.Следующий() Цикл
			НайденнаяСтрока = ТаблицаДанныхРодителей.Найти(ВыборкаРеквизита.ОбъектИерархии,"ОбъектИерархии");
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				НайденнаяСтрока.Порядок = Счетчик;
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗапросСПорядком = Новый Запрос;
	ЗапросСПорядком.Текст ="ВЫБРАТЬ
	|	ЕстьNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР,0) КАК ПорядокОР,
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта КАК ОбъектРемонта
	|ИЗ
	|	РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
	|ГДЕ
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта В(&СписокОР)
	|	И торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии";
	ЗапросСПорядком.УстановитьПараметр("СписокОР",ТаблицаДанныхРодителей);
	ЗапросСПорядком.УстановитьПараметр("СтруктураИерархии",ИерархияОР);
	РезультатЗапросаПорядка = ЗапросСПорядком.Выполнить().Выгрузить();
	РезультатЗапросаПорядка.Индексы.Добавить("ОбъектРемонта");
	
	Для Каждого Строка из ТаблицаДанныхРодителей Цикл
		
		НайденнаяСтрока = РезультатЗапросаПорядка.Найти(Строка.ОбъектИерархии,"ОбъектРемонта");
		Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
			Строка.Порядок = НайденнаяСтрока.ПорядокОР + Счетчик;
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаДанныхРодителей.Сортировать("Порядок"); 	
	
КонецПроцедуры

#КонецОбласти