///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ДатаОкончания) И ДатаОкончания < ДатаНачала Тогда
		ТекстСообщения = НСтр("ru = 'Дата окончания меньше даты начала. Скорее всего, дата окончания заполнена неверно.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("Справочник.Календари");
	
	Если Не УчитыватьПраздники Тогда
		// Если график работы не учитывает праздники, то нужно удалить интервалы предпраздничного дня.
		РасписаниеПредпраздничногоДня = РасписаниеРаботы.НайтиСтроки(Новый Структура("НомерДня", 0));
		Для Каждого СтрокаРасписания Из РасписаниеПредпраздничногоДня Цикл
			РасписаниеРаботы.Удалить(СтрокаРасписания);
		КонецЦикла;
	КонецЕсли;
	
	// ТОИР++
	торо_ПроверитьПересечениеПереходящегоВремени(Отказ);
	// ТОИР--
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Если дата окончания не указана, она будет подобрана по производственному календарю.
	ДатаОкончанияЗаполнения = ДатаОкончания;

	ПараметрыЗаполнения = РегистрыСведений.КалендарныеГрафики.ПараметрыЗаполненияГрафика();
	ПараметрыЗаполнения.СпособЗаполнения = СпособЗаполнения;
	ПараметрыЗаполнения.ШаблонЗаполнения = ШаблонЗаполнения;
	ПараметрыЗаполнения.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	ПараметрыЗаполнения.УчитыватьПраздники = УчитыватьПраздники;
	ПараметрыЗаполнения.УчитыватьНерабочиеПериоды = УчитыватьНерабочиеПериоды;
	ПараметрыЗаполнения.ДатаОтсчета = ДатаОтсчета;
	ДниВключенныеВГрафик = РегистрыСведений.КалендарныеГрафики.ДниВключенныеВГрафик(
		ДатаНачала, ДатаОкончанияЗаполнения, ПараметрыЗаполнения);
									
	РегистрыСведений.КалендарныеГрафики.ЗаписатьДанныеГрафикаВРегистр(
		Ссылка, ДниВключенныеВГрафик, ДатаНачала, ДатаОкончанияЗаполнения);
	
КонецПроцедуры

#КонецОбласти

// ТОИР++
#Область СлужебныеПроцедурыИФункции

Процедура торо_ПроверитьПересечениеПереходящегоВремени(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Расписание.НомерДня КАК НомерДня,
	|	Расписание.ВремяНачала КАК ВремяНачала,
	|	Расписание.ВремяОкончания КАК ВремяОкончания,
	|	Расписание.торо_ПереходящееВремяНаСледующийДень КАК торо_ПереходящееВремяНаСледующийДень
	|ПОМЕСТИТЬ Расписание
	|ИЗ
	|	&РасписаниеРаботы КАК Расписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредыдущийДень.НомерДня КАК НомерДняПред,
	|	ПредыдущийДень.ВремяНачала КАК ВремяНачалаПред,
	|	ПредыдущийДень.ВремяОкончания КАК ВремяОкончанияПред,
	|	СледующийДень.НомерДня КАК НомерДня,
	|	СледующийДень.ВремяНачала КАК ВремяНачала,
	|	СледующийДень.ВремяОкончания КАК ВремяОкончания
	|ИЗ
	|	Расписание КАК СледующийДень
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расписание КАК ПредыдущийДень
	|		ПО (ВЫБОР
	|					КОГДА ПредыдущийДень.НомерДня + 1 > &ПоследнийНомерДня
	|						ТОГДА 1
	|					ИНАЧЕ ПредыдущийДень.НомерДня + 1
	|				КОНЕЦ = СледующийДень.НомерДня
	|				ИЛИ ПредыдущийДень.НомерДня = 0)
	|			И (ПредыдущийДень.торо_ПереходящееВремяНаСледующийДень = ИСТИНА)
	|			И (СледующийДень.торо_ПереходящееВремяНаСледующийДень = ЛОЖЬ)
	|			И СледующийДень.ВремяНачала < ПредыдущийДень.ВремяОкончания
	|			И (ПредыдущийДень.ВремяОкончания >= ПредыдущийДень.ВремяОкончания)");
	Запрос.УстановитьПараметр("РасписаниеРаботы", РасписаниеРаботы.Выгрузить());
	Запрос.УстановитьПараметр("ПоследнийНомерДня", ШаблонЗаполнения.Количество());
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Отказ = Истина;
		
		МассивТекстов = Новый Массив;
		МассивТекстов.Добавить(НСтр("ru = 'Обнаружены пересечения периодов между днями графика:'"));
		
		ПредставленияДнейГрафика = Новый Соответствие;
		ПредставленияДнейГрафика.Вставить(0, "предпраздничный день");
		Если СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям Тогда
			ПредставленияДнейГрафика.Вставить(1, "понедельник");
			ПредставленияДнейГрафика.Вставить(2, "вторник");
			ПредставленияДнейГрафика.Вставить(3, "среда");
			ПредставленияДнейГрафика.Вставить(4, "четверг");
			ПредставленияДнейГрафика.Вставить(5, "пятница");
			ПредставленияДнейГрафика.Вставить(6, "суббота");
			ПредставленияДнейГрафика.Вставить(7, "воскресенье");
		Иначе
			Для Сч = 1 По ШаблонЗаполнения.Количество() Цикл
				ПредставленияДнейГрафика.Вставить(Сч, СтрШаблон("%1 день", Сч));
			КонецЦикла;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ФорматДаты = "ДФ=ЧЧ:мм; ДП=00:00";
			МассивТекстов.Добавить(СтрШаблон("Уберите пересечение переходящего периода %1 %2-%3 на период %4 %5-%6",
				ПредставленияДнейГрафика.Получить(Выборка.НомерДняПред), Формат(Выборка.ВремяНачалаПред, ФорматДаты), Формат(Выборка.ВремяОкончанияПред, ФорматДаты),
				ПредставленияДнейГрафика.Получить(Выборка.НомерДня), Формат(Выборка.ВремяНачала, ФорматДаты), Формат(Выборка.ВремяОкончания, ФорматДаты)
				));
		КонецЦикла;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрСоединить(МассивТекстов, Символы.ПС);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
// ТОИР--

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли