///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РасписаниеДня = Параметры.РасписаниеРаботы;
	УточнитьФорматПолейВремени();
	
	// ТОИР++
	СоздатьРеквизитыИЭлементыТОИР();
	// ТОИР--
	
	Для Каждого ОписаниеИнтервала Из РасписаниеДня Цикл
		ЗаполнитьЗначенияСвойств(РасписаниеРаботы.Добавить(), ОписаниеИнтервала);
	КонецЦикла;
	// ТОИР++
	// РасписаниеРаботы.Сортировать("ВремяНачала");
	РасписаниеРаботы.Сортировать("торо_ПереходящееВремяНаСледующийДень, ВремяНачала");
	// ТОИР--
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
		Элементы.ФормаОтмена.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РасписаниеРаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	// ТОИР++
	// ГрафикиРаботыКлиент.ВосстановитьПорядокСтрокКоллекцииПослеРедактирования(РасписаниеРаботы, "ВремяНачала", Элемент.ТекущиеДанные);
	РасписаниеРаботы.Сортировать("торо_ПереходящееВремяНаСледующийДень, ВремяНачала");
	// ТОИР--
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	ОповеститьОВыборе(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция РасписаниеДня()
	
	Отказ = Ложь;
	
	РасписаниеДня = Новый Массив;
	
	ОкончаниеДня = Неопределено;
	
	Для Каждого СтрокаРасписания Из РасписаниеРаботы Цикл
		ИндексСтроки = РасписаниеРаботы.Индекс(СтрокаРасписания);
		Если СтрокаРасписания.ВремяНачала > СтрокаРасписания.ВремяОкончания 
			И ЗначениеЗаполнено(СтрокаРасписания.ВремяОкончания) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Время начала больше времени окончания'"), ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("РасписаниеРаботы[%1].ВремяОкончания", ИндексСтроки), ,
				Отказ);
		КонецЕсли;
		Если СтрокаРасписания.ВремяНачала = СтрокаРасписания.ВремяОкончания Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Длительность интервала не определена'"), ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("РасписаниеРаботы[%1].ВремяОкончания", ИндексСтроки), ,
				Отказ);
		КонецЕсли;
		Если ОкончаниеДня <> Неопределено Тогда
			Если ОкончаниеДня > СтрокаРасписания.ВремяНачала 
									// ТОИР++
									+ ?(СтрокаРасписания.торо_ПереходящееВремяНаСледующийДень, 86400,0)
									// ТОИР--
				Или Не ЗначениеЗаполнено(ОкончаниеДня) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Обнаружены пересекающиеся интервалы'"), ,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("РасписаниеРаботы[%1].ВремяНачала", ИндексСтроки), ,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		ОкончаниеДня = СтрокаРасписания.ВремяОкончания;
		// ТОИР++
		//РасписаниеДня.Добавить(Новый Структура("ВремяНачала, ВремяОкончания", СтрокаРасписания.ВремяНачала, СтрокаРасписания.ВремяОкончания));
		РасписаниеДня.Добавить(Новый Структура("ВремяНачала, ВремяОкончания, торо_ПереходящееВремяНаСледующийДень", СтрокаРасписания.ВремяНачала, СтрокаРасписания.ВремяОкончания, СтрокаРасписания.торо_ПереходящееВремяНаСледующийДень));
		Если СтрокаРасписания.торо_ПереходящееВремяНаСледующийДень Тогда
			ОкончаниеДня = СтрокаРасписания.ВремяОкончания + 86400;
		КонецЕсли;
		// ТОИР--
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РасписаниеДня;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	РасписаниеДня = РасписаниеДня();
	Если РасписаниеДня = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	ОповеститьОВыборе(Новый Структура("РасписаниеРаботы", РасписаниеДня));
	
КонецПроцедуры

&НаСервере
Процедура УточнитьФорматПолейВремени()
	
	ФорматВремени = ?(ГрафикиРаботы.ДвенадцатиЧасовойФорматВремени(),
		НСтр("ru = 'ДФ=''чч:мм вв''; ДП='"), НСтр("ru = 'ДФ=ЧЧ:мм; ДП='"));
	ФорматВремениРедактирования = ?(ГрафикиРаботы.ДвенадцатиЧасовойФорматВремени(),
		НСтр("ru = 'ДФ=''чч:мм вв'''"), НСтр("ru = 'ДФ=ЧЧ:мм'"));
	
	Элементы.РасписаниеРаботыВремяНачала.Формат = ФорматВремени;
	Элементы.РасписаниеРаботыВремяНачала.ФорматРедактирования = ФорматВремениРедактирования;
	
	Элементы.РасписаниеРаботыВремяОкончания.Формат = ФорматВремени;
	Элементы.РасписаниеРаботыВремяОкончания.ФорматРедактирования = ФорматВремениРедактирования;
	
КонецПроцедуры

// ТОИР++
&НаСервере
Процедура СоздатьРеквизитыИЭлементыТОИР()
	
	// Реквизиты
	МассивРеквизитов = Новый Массив;
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	МетаРекв = Метаданные.Справочники.Календари.ТабличныеЧасти.РасписаниеРаботы.Реквизиты.торо_ПереходящееВремяНаСледующийДень;
	ИмяРекв = МетаРекв.Имя;
	ЗаголовокРекв = МетаРекв.Синоним;
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРекв, ОписаниеБулево, "РасписаниеРаботы", Заголовок));
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Элементы
	ЭлементРодитель = Элементы.РасписаниеРаботы;
	ИмяЭлемента = СтрШаблон("%1_%2", ЭлементРодитель.Имя, ИмяРекв);
	ЭлементПризнакПереходящегоВремени = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементРодитель);
	ЭлементПризнакПереходящегоВремени.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПризнакПереходящегоВремени.ПутьКДанным = СтрШаблон("%1.%2", ЭлементРодитель.ПутьКДанным, ИмяРекв);
	ЭлементПризнакПереходящегоВремени.Заголовок = ЗаголовокРекв;
	
	// Предупреждение о времени окончания
	Группа = Элементы.Добавить("торо_ГруппаПредупреждение", Тип("ГруппаФормы"), ЭтаФорма);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.РастягиватьПоГоризонтали = Истина;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	ДекорацияКартинка = Элементы.Добавить("торо_ДекорацияПредупреждениеКартинка", Тип("ДекорацияФормы"), Группа);
	ДекорацияКартинка.Вид = ВидДекорацииФормы.Картинка;
	ДекорацияКартинка.Ширина = 2;
	ДекорацияКартинка.Высота = 1;
	ДекорацияКартинка.Картинка = БиблиотекаКартинок.Предупреждение;
	
	ДекорацияНадпись = Элементы.Добавить("торо_ДекорацияПредупреждениеТекст", Тип("ДекорацияФормы"), Группа);
	ДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияНадпись.РастягиватьПоГоризонтали = Истина;
	ДекорацияНадпись.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияНадпись.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ДекорацияНадпись.Заголовок = НСтр("ru='Необходимо указывать окончание смены 23:59:00 (указание более позднего времени может привести к ошибкам в расчетах и отчетах).'");
		
КонецПроцедуры // ТОИР--

#КонецОбласти
