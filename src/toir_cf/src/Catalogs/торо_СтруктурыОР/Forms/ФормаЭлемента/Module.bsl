#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьРеквизитаОР();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПредпросмотрИерархии(Команда)
	
	Если Объект.СтроитсяАвтоматически И Не ЗначениеЗаполнено(Объект.РеквизитОР) Тогда
		ТекстСообщения = НСтр("ru='Укажите реквизит объекта ремонта'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Ссылка, ИзменяетсяДокументами, СтроитсяАвтоматически, РеквизитОР, ТипРеквизитаОР, РазрешенВводНовыхОР, КонечныеЭлементыВДереве");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОткрытьФорму("Справочник.торо_СтруктурыОР.Форма.ПредпросмотрСтруктурыИерархии", СтруктураПараметров,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтроитсяАвтоматическиПриИзменении(Элемент)
		
	стрВопрос = "";
	Если Объект.СтроитсяАвтоматически Тогда
		стрВопрос = НСтр("ru = 'Иерархия будет строиться автоматически, продолжить?'");
	Иначе
		стрВопрос = НСтр("ru = 'Иерархия очистится, продолжить?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаИзмененияФлагаСтроитсяАвтоматически", ЭтотОбъект);
	Если НЕ ИерархияПустая(Объект.ИзменяетсяДокументами, НЕ Объект.СтроитсяАвтоматически) Тогда
		ПоказатьВопрос(Оповещение, стрВопрос, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьРеквизитаОР();
	
	Если Объект.СтроитсяАвтоматически Тогда
		Объект.ИзменяетсяДокументами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаИзмененияФлагаСтроитсяАвтоматически(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Объект.СтроитсяАвтоматически = НЕ Объект.СтроитсяАвтоматически;
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.СтроитсяАвтоматически Тогда
		ОчиститьРегистры();
	КонецЕсли;
	
	УстановитьДоступностьРеквизитаОР();
	Если Объект.СтроитсяАвтоматически Тогда
		Объект.ИзменяетсяДокументами = Ложь;
	Иначе 
		Объект.РеквизитОР = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитОРНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначРеквизита = Неопределено;

	ОткрытьФорму("Справочник.торо_СтруктурыОР.Форма.ФормаВыбораРеквизитаОР", Новый Структура("ТекЗнач", Объект.РеквизитОР), Элемент,,,, Новый ОписаниеОповещения("РеквизитОРНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменяетсяДокументамиПриИзменении(Элемент)
	
	стрВопрос = "";
	Если Объект.ИзменяетсяДокументами Тогда
		стрВопрос = НСтр("ru='Будет создан документ добавления существующих объектов ремонта в иерархию. Это может занять продолжительное время. Продолжить?'");
	Иначе
		стрВопрос = НСтр("ru='История добавления объектов в иерархию и их перемещения по иерархии будет утеряна. Продолжить?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаИзмененияФлагаИзменяетсяДокументами", ЭтотОбъект);
	Если НЕ ИерархияПустая(НЕ Объект.ИзменяетсяДокументами, Объект.СтроитсяАвтоматически) Тогда
		ПоказатьВопрос(Оповещение, стрВопрос, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаИзмененияФлагаИзменяетсяДокументами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Объект.ИзменяетсяДокументами = НЕ Объект.ИзменяетсяДокументами;
		Возврат; 
	КонецЕсли;
	
	Если Объект.ИзменяетсяДокументами Тогда
		ИерархияТеперьСИсториейИзменений();
	Иначе
		ИерархияТеперьБезИсторииИзменений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
	МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РеквизитОРНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗначРеквизита = Результат;	
    
    Если ЗначРеквизита <> Неопределено Тогда
        
        Объект.РеквизитОР     = ЗначРеквизита.Реквизит;
        Объект.ТипРеквизитаОР = ЗначРеквизита.ТипРеквизита; 
        
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитаОР()
	
	Элементы.РеквизитОР.Доступность = Объект.СтроитсяАвтоматически;
	Элементы.ИзменяетсяДокументами.Доступность = НЕ Объект.СтроитсяАвтоматически;
	
КонецПроцедуры

&НаСервере
Процедура ИерархияТеперьСИсториейИзменений()
	
	ТаблицаИерархии = торо_РаботаСИерархией20.ПолучитьТаблицуИерархии(Объект.Ссылка); 
	
	докОбъект = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
	докОбъект.Заполнить(Неопределено); // Заполнение шапки.
	докОбъект.Дата = ТекущаяДата();
	докОбъект.Комментарий = НСтр("ru='Документ создан автоматически.'");
	докОбъект.СтруктураИерархии = Объект.Ссылка;
	
	Для каждого Строка из ТаблицаИерархии Цикл
		НоваяСтрока = докОбъект.ПоложенияВСтруктуреИерархии.Добавить();
		НоваяСтрока.ОбъектИерархии = Строка.ОбъектИерархии;
		НоваяСтрока.РодительИерархии = Строка.РодительИерархии;
		НоваяСтрока.ПредыдущееПоложение = НСтр("ru='Внесен в структуру иерархии'");
	КонецЦикла;
	
	докОбъект.ДополнительныеСвойства.Вставить("НеФормироватьДвиженияПоИстоииФМ", Истина);
	
	НачатьТранзакцию();
	Попытка
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Записать();
		НаборЗаписей = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
		НаборЗаписей.Записать();
		
		НаборЗаписейГруппы = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
		НаборЗаписейГруппы.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
		НаборЗаписейГруппы.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru='Произошла ошибка: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ИерархияТеперьБезИсторииИзменений()
	
	ТаблицаИерархии = торо_РаботаСИерархией20.ПолучитьТаблицуИерархии(Объект.Ссылка); 
	
	Если ТаблицаИерархии.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИзменениеПоложенияВСтруктуреИерархии.Ссылка
		               |ИЗ
		               |	Документ.торо_ИзменениеПоложенияВСтруктуреИерархии КАК торо_ИзменениеПоложенияВСтруктуреИерархии
		               |ГДЕ
		               |	торо_ИзменениеПоложенияВСтруктуреИерархии.СтруктураИерархии = &СтруктураИерархии
		               |	И торо_ИзменениеПоложенияВСтруктуреИерархии.ПометкаУдаления = ЛОЖЬ
		               |	И торо_ИзменениеПоложенияВСтруктуреИерархии.Проведен = ИСТИНА
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ИзменениеПоложенияВСтруктуреИерархии.Ссылка
		               |ИЗ
		               |	Документ.торо_ИзменениеПоложенияВСтруктуреИерархии КАК торо_ИзменениеПоложенияВСтруктуреИерархии
		               |ГДЕ
		               |	торо_ИзменениеПоложенияВСтруктуреИерархии.СтруктураИерархии = &СтруктураИерархии
		               |	И торо_ИзменениеПоложенияВСтруктуреИерархии.ПометкаУдаления = ЛОЖЬ
		               |	И торо_ИзменениеПоложенияВСтруктуреИерархии.Проведен = ЛОЖЬ";
		   
		Запрос.УстановитьПараметр("СтруктураИерархии", Объект.Ссылка);
		РезЗапроса = Запрос.ВыполнитьПакет();
		резЗапрос1 = РезЗапроса[0];
		резЗапрос2 = РезЗапроса[1];
		
		Если НЕ резЗапрос1.Пустой() Тогда
			МассивПроведенныхДокументов = РезЗапрос1.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		Если НЕ резЗапрос2.Пустой() Тогда
			МассивНЕПроведенныхДокументов = РезЗапрос2.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
		
		НаборЗаписейГруппы = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
		НаборЗаписейГруппы.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
		
		тзГруппы = ТаблицаИерархии.Скопировать(,"РодительИерархии");
		тзГруппы.Свернуть("РодительИерархии");
		
		НачатьТранзакцию();
		Для каждого Строка из ТаблицаИерархии Цикл
			нс = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(нс, Строка);
			нс.СтруктураИерархии = Объект.Ссылка;
		КонецЦикла;
		
		Для каждого текСтрока из тзГруппы Цикл
			Если ЗначениеЗаполнено(текСтрока.РодительИерархии) 
				И НЕ текСтрока.РодительИерархии.ЭтоГруппа
				И ТипЗнч(текСтрока.РодительИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта")
				Тогда
				нс2 = НаборЗаписейГруппы.Добавить();
				нс2.ОбъектИерархии = текСтрока.РодительИерархии;
				нс2.СтруктураИерархии = Объект.Ссылка;
				нс2.ОбъектГруппа = Истина;
			КонецЕсли;			
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
			НаборЗаписейГруппы.Записать();
			Если МассивПроведенныхДокументов <> Неопределено Тогда
				Для каждого текСтрока из МассивПроведенныхДокументов цикл
					докОбъект = текСтрока.ПолучитьОбъект();
					докОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					докОбъект.ПометкаУдаления = Истина;
					докОбъект.Записать();
				КонецЦикла;
			КонецЕсли;
			
			Если МассивНЕПроведенныхДокументов <> Неопределено Тогда
				Для каждого текСтрока из МассивНЕПроведенныхДокументов цикл
					докОбъект = текСтрока.ПолучитьОбъект();
					докОбъект.ПометкаУдаления = Истина;
					докОбъект.Записать();
				КонецЦикла;
			КонецЕсли;
			
			Записать();
		Исключение
			ШаблонСообщения = НСтр("ru='Произошла ошибка: %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОчиститьРегистры()
	Набор = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьНаборЗаписей();
	Набор.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
	Набор.Записать();
КонецПроцедуры

&НаСервере 
Функция ИерархияПустая(ИзменяетсяДокументами, СтроитсяАвтоматически)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если СтроитсяАвтоматически Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ТипРеквизитаОР) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	табСправочник.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник."+Объект.ТипРеквизитаОР+" КАК табСправочник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	торо_ОбъектыРемонта.Ссылка
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|ГДЕ
		|	торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ";
		
	ИначеЕсли ИзменяетсяДокументами Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ТаблицаИерархии.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии КАК ТаблицаИерархии
		|ГДЕ
		|	ТаблицаИерархии.СтруктураИерархии = &СтруктураИерархии";
		
		Запрос.УстановитьПараметр("СтруктураИерархии", Объект.Ссылка);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
		
		Запрос.УстановитьПараметр("СтруктураИерархии", Объект.Ссылка);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
	
КонецФункции

#КонецОбласти