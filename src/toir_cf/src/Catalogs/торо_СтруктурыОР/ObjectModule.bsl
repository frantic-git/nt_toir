Перем ИзменилсяРеквизит;

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЭтоГруппа И СтроитсяАвтоматически Тогда
		ПроверяемыеРеквизиты.Добавить("РеквизитОР");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЭтоГруппа Тогда
   	ИзменилсяРеквизит = (РеквизитОР <> Ссылка.РеквизитОР);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтроитсяАвтоматически Тогда
		ИерархияТеперьАвтоматическая();
	КонецЕсли;   
    
	Если Не ИзменяетсяДокументами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &Ссылка) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекстСообщения = НСтр("ru = 'По данной структуре существуют движения документов, должен быть установлени признак ""Изменяется документами""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтроитсяАвтоматически И ИзменилсяРеквизит Тогда
		
		ОбъектМетаданных = Метаданные.Справочники.Найти(ТипРеквизитаОР);
		
		Если Не ОбъектМетаданных = Неопределено Тогда
			Иерархический = ОбъектМетаданных.Иерархический;
		Иначе
			Иерархический = Неопределено;
		КонецЕсли; 
		
		СтруктураАтоматическойИерархии = Новый Структура();
		СтруктураАтоматическойИерархии.Вставить("СтроитсяАвтоматически", СтроитсяАвтоматически);
		СтруктураАтоматическойИерархии.Вставить("ТипРеквизитаОР"       , ТипРеквизитаОР);
		СтруктураАтоматическойИерархии.Вставить("РеквизитОР"           , РеквизитОР);
		СтруктураАтоматическойИерархии.Вставить("Иерархический"        , Иерархический);
		
		ТаблицаИерархии = ПолучитьТаблицуИерархии(Ссылка, СтруктураАтоматическойИерархии);
		
		Если Не ТаблицаИерархии = Неопределено Тогда
			
			ОбъектИерархии = Справочники[ТипРеквизитаОР].ПустаяСсылка();
			
			МассивСтрок = ТаблицаИерархии.НайтиСтроки(Новый Структура("РодительИерархии", ОбъектИерархии));
			
			НомерПоПорядку = 1;
			
			НаборЗаписейРС = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьНаборЗаписей();
			НаборЗаписейРС.Отбор.СтруктураИерархии.Установить(Ссылка);
			
			Для каждого Строка Из МассивСтрок Цикл
				Если ТипЗнч(Строка.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
					НС = НаборЗаписейРС.Добавить();
					НС.ОбъектРемонта = Строка.ОбъектИерархии;
					НС.СтруктураИерархии = Ссылка;
					НС.РеквизитДопУпорядочиванияОР = НомерПоПорядку;
					НомерПоПорядку = НомерПоПорядку + 1;
				КонецЕсли;
				ДополнитьНаборЗаписей(ТаблицаИерархии,НомерПоПорядку,Строка.ОбъектИерархии,НаборЗаписейРС);
			КонецЦикла;
			
			Попытка
				НаборЗаписейРС.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр сведений ""Порядок ОР по иерархии""'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
		РазрешенВводНовыхОР = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииПредставленийНаСервере() Экспорт
	МультиязычностьСервер.ПриЧтенииПредставленийНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуИерархии(Ссылка, СтруктураАтоматическойИерархии)
	
	Запрос = Новый Запрос;	
			
	Если СтруктураАтоматическойИерархии.Иерархический = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СправочникДляПостроения.Ссылка КАК ОбъектИерархии,
	|	" + ?(СтруктураАтоматическойИерархии.Иерархический, "СправочникДляПостроения.Родитель", "Значение(Справочник." + СтруктураАтоматическойИерархии.ТипРеквизитаОР + ".ПустаяСсылка)") + " КАК РодительИерархии,
	|	СправочникДляПостроения.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ИСТИНА КАК ЭтоРеквизитОР
	|ИЗ
	|	Справочник." + СтруктураАтоматическойИерархии.ТипРеквизитаОР + " КАК СправочникДляПостроения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ОбъектыРемонта.Ссылка,
	|	торо_ОбъектыРемонта." + СтруктураАтоматическойИерархии.РеквизитОР + ",
	|	торо_ОбъектыРемонта.ПометкаУдаления,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	НЕ торо_ОбъектыРемонта.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("СтруктураИерархии", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДополнитьНаборЗаписей(ТаблицаИерархии, НомерПоПорядку, ТекущийРодитель, НаборЗаписейРС)
	
	МассивСтрок = ТаблицаИерархии.НайтиСтроки(Новый Структура("РодительИерархии", ТекущийРодитель));
	Для каждого Строка Из МассивСтрок Цикл
		Если ТипЗнч(Строка.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			НС = НаборЗаписейРС.Добавить();
			НС.ОбъектРемонта = Строка.ОбъектИерархии;
			НС.СтруктураИерархии = Ссылка;
			НС.РеквизитДопУпорядочиванияОР = НомерПоПорядку;
			НомерПоПорядку = НомерПоПорядку + 1;
		КонецЕсли;
		ДополнитьНаборЗаписей(ТаблицаИерархии,НомерПоПорядку,Строка.ОбъектИерархии,НаборЗаписейРС);
	КонецЦикла;

КонецПроцедуры

Процедура ИерархияТеперьАвтоматическая()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
       |	торо_ИзменениеПоложенияВСтруктуреИерархии.Ссылка
       |ИЗ
       |	Документ.торо_ИзменениеПоложенияВСтруктуреИерархии КАК торо_ИзменениеПоложенияВСтруктуреИерархии
       |ГДЕ
       |	торо_ИзменениеПоложенияВСтруктуреИерархии.СтруктураИерархии = &СтруктураИерархии
       |	И торо_ИзменениеПоложенияВСтруктуреИерархии.ПометкаУдаления = ЛОЖЬ
       |	И торо_ИзменениеПоложенияВСтруктуреИерархии.Проведен = ИСТИНА
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	торо_ИзменениеПоложенияВСтруктуреИерархии.Ссылка
       |ИЗ
       |	Документ.торо_ИзменениеПоложенияВСтруктуреИерархии КАК торо_ИзменениеПоложенияВСтруктуреИерархии
       |ГДЕ
       |	торо_ИзменениеПоложенияВСтруктуреИерархии.СтруктураИерархии = &СтруктураИерархии
       |	И торо_ИзменениеПоложенияВСтруктуреИерархии.ПометкаУдаления = ЛОЖЬ
       |	И торо_ИзменениеПоложенияВСтруктуреИерархии.Проведен = ЛОЖЬ";
	   
	Запрос.УстановитьПараметр("СтруктураИерархии", Ссылка);
	РезЗапроса = Запрос.ВыполнитьПакет();
	резЗапрос1 = РезЗапроса[0];
	резЗапрос2 = РезЗапроса[1];	
	
	Если НЕ резЗапрос1.Пустой() Тогда
		МассивПроведенныхДокументов = РезЗапрос1.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	Если НЕ резЗапрос2.Пустой() Тогда
		МассивНЕПроведенныхДокументов = РезЗапрос2.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтруктураИерархии.Установить(Ссылка);
	
	ИзменяетсяДокументами = Ложь;
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
		Если МассивПроведенныхДокументов <> Неопределено Тогда
			Для каждого текСтрока из МассивПроведенныхДокументов цикл
				докОбъект = текСтрока.ПолучитьОбъект();
				докОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				докОбъект.ПометкаУдаления = Истина;
				докОбъект.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если МассивНЕПроведенныхДокументов <> Неопределено Тогда
			Для каждого текСтрока из МассивНЕПроведенныхДокументов цикл
				докОбъект = текСтрока.ПолучитьОбъект();
				докОбъект.ПометкаУдаления = Истина;
				докОбъект.Записать();
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Произошла ошибка: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
