
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
			Объект.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;
	КонецЕсли;	
	
	ВалютыУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Элементы.ГиперссылкаНормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Объект.НормаВремени);	
	ОбновитьНадписьВалюта();
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		Элементы.РасценкаВВалютеУчета.Заголовок = СформироватьРасценкаВВалютеУчёта(Объект.Расценка, Объект.Валюта, ВалютыУчета);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.торо_ФормаПодбораПродолжительности" Тогда
		Элементы.ГиперссылкаНормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);
		Объект.НормаВремени = ВыбранноеЗначение;
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
			ИмяТЧ = "МатериальныеЗатраты";
			ИмяРеквизита = "Номенклатура";
		Иначе
			ИмяТЧ = "ИнструментыИТехника";
			ИмяРеквизита = "Инструмент";
		КонецЕсли;
		
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, ИмяТЧ, ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ФОИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	
	// ТЧ Материальные Затраты
	Для Каждого ТекДанные Из Объект.МатериальныеЗатраты Цикл
		
		ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекДанные.Номенклатура);
		Если ФОИспользоватьХарактеристики И ХарактеристикиИспользуются И Не ЗначениеЗаполнено(ТекДанные.Характеристика) Тогда
			Если Не ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Номенклатура"" в таблице ""Материальные затраты""!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.МатериальныеЗатраты",, Отказ);
				Возврат;
			КонецЕсли;
			
			Если Объект.МатериальныеЗатраты.Количество() > 1 Тогда 
				Отбор = Новый Структура;
				Отбор.Вставить ("Номенклатура", ТекДанные.Номенклатура);
				Отбор.Вставить("Характеристика", ТекДанные.Характеристика);
				ДублиНоменклатуры = Объект.МатериальныеЗатраты.НайтиСтроки(Отбор);
				Если ДублиНоменклатуры.Количество()>1 Тогда
					ТекстСообщения = НСтр("ru = 'Обнаружены повторяющаяся поля ""Номенклатура"" ""(%1)"" в таблице материальные затраты!'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ТекДанные.Номенклатура);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.МатериальныеЗатраты",, Отказ);
					Возврат;
				 КонецЕсли;
			 КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	// ТЧ Материальные Затраты
	
	// ТЧ Трудовые Затраты
	Для Каждого ТекДанные Из Объект.ТрудовыеЗатраты Цикл
		
		Если Объект.ТрудовыеЗатраты.Количество() > 1 Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Квалификация", ТекДанные.Квалификация); 
			ДублиКвалификации = Объект.ТрудовыеЗатраты.НайтиСтроки(Отбор);
			Если ДублиКвалификации.Количество() > 1 И ЗначениеЗаполнено(ТекДанные.Квалификация) Тогда 
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющаяся поля ""Квалификация"" ""(%1)"" в таблице трудовые затраты!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.Квалификация);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ТрудовыеЗатраты",, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	// ТЧ Трудовые Затраты
	
	// ТЧ Инструменты И Техника
	Для Каждого ТекДанные Из Объект.ИнструментыИТехника Цикл	
		Если НЕ ЗначениеЗаполнено(ТекДанные.Инструмент) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Инструмент"" в таблице ""Инструменты и техника""!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ИнструментыИТехника",, Отказ);
		КонецЕсли;
		
		Если Объект.ИнструментыИТехника.Количество() > 1 Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Инструмент", ТекДанные.Инструмент); 
			ДублиИнструментов = Объект.ИнструментыИТехника.НайтиСтроки(Отбор);
			Если ДублиИнструментов.Количество()>1 Тогда 
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Инструмент"" ""(%1)"" в таблице ""Инструменты и техника""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.Инструмент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ИнструментыИТехника",, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;	
	// ТЧ Инструменты И Техника
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
	МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасценкаПриИзменении(Элемент)
	
	Элементы.РасценкаВВалютеУчета.Заголовок = СформироватьРасценкаВВалютеУчёта(Объект.Расценка, Объект.Валюта, ВалютыУчета);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаНадписьНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВалютаНажатиеЗавершение", ЭтаФорма);
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.Валюты.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПродолжительностиПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаПродолжительности = Неопределено Тогда
		Возврат;
		
	ИначеЕсли Объект.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоНормамТрудозатрат") Тогда 
		Модифицированность = Истина;
		Объект.НормаВремени = РассчитатьПродолжительностьПоТрудозатратам();
		Элементы.ГиперссылкаНормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Объект.НормаВремени);
		
	ИначеЕсли Объект.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПроизвольноеЗначение") Тогда
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(Объект.НормаВремени, ЭтаФорма, Объект.Ссылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструментыИТехника

&НаКлиенте
Процедура ИнструментыИТехникаУпаковкаПриИзменении(Элемент)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ТекДанные.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНаСервере(ТекДанные.Упаковка);
		ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ПолучитьКоэффициентУпаковкиНаСервере(ТекДанные.Упаковка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаКоличествоУпаковокПриИзменении(Элемент)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличествИлиУпаковки(ТекДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнтрументыИТехникаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.ИнструментыИТехника.ТекущиеДанные.Инструмент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяРаботы, Элемент, Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаВремяРаботыТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
		ТекущиеДанные.ВремяРаботы      = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяРаботы, Элемент, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
		ТекущиеДанные.ВремяРаботы      = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты

&НаКлиенте
Процедура МатериальныеЗатратыУпаковкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличествИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличествИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	Иначе
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор инструментов и техники'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("Склад", ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад"));
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Перерассчитать(Команда)
	СпособРасчетаПродолжительностиПриИзменении(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьНаименование(Команда)
	Объект.НаименованиеПолное = Объект.Наименование;
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для каждого Стр Из Объект.ТрудовыеЗатраты Цикл
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
	КонецЦикла;
	
	Для каждого Стр Из Объект.ИнструментыИТехника Цикл
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	Если РольДоступна("ЧтениеНоменклатуры") Или РольДоступна("ПолныеПрава") Тогда
		// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнтрументыИТехникаЕдиницаИзмерения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИнструментыИТехника.Упаковка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.Упаковка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		// Условное оформление для использования/неиспользования характеристик.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристика.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
		
	КонецЕсли;

КонецПроцедуры // УстановитьУсловноеОформление()

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.МатериальныеЗатраты,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьВалюта()
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		Элементы.ВалютаНадпись.Заголовок = Объект.Валюта;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаНажатиеЗавершение(ЗначениеВалюты, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеВалюты = Неопределено Тогда
		Объект.Валюта = ЗначениеВалюты;
		Модифицированность = Истина;
		Элементы.РасценкаВВалютеУчета.Заголовок = СформироватьРасценкаВВалютеУчёта(Объект.Расценка, Объект.Валюта, ВалютыУчета);
	КонецЕсли;
	ОбновитьНадписьВалюта();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " м. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьРасценкаВВалютеУчёта(Знач Расценка, Знач Валюта, ВалютыУчета)
	
	Если Расценка = 0 Тогда
		
		Возврат "0,00";
		
	Иначе
		
		Возврат РаботаСКурсамиВалют.ПересчитатьВВалюту(Расценка, Валюта, ВалютыУчета, ТекущаяДата());
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияНаСервере(Упаковка)
	
	Возврат Упаковка.Владелец.ЕдиницаИзмерения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	
	Возврат Упаковка.Коэффициент;
	
КонецФункции

&НаКлиенте
Процедура ПриСменеЗначенийКоличествИлиУпаковки(ТекущиеДанные, ИзменениеКоличестваЕдиниц = Ложь)
	
	КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиНаСервере(ТекущиеДанные.Упаковка);	
	
	Если КоэффициентУпаковки = 0 Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли; 
	
	Если ИзменениеКоличестваЕдиниц Тогда
		ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.Количество / КоэффициентУпаковки;
	Иначе	
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок * КоэффициентУпаковки;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, ИмяТЧ, ИмяРеквизита)
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		Если ИмяТЧ = "МатериальныеЗатраты" Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", текСтрока.Номенклатура, текСтрока.Характеристика);
		Иначе
			СтруктураПоиска = Новый Структура("Инструмент", текСтрока.Номенклатура);
		КонецЕсли;
			
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			нс.Количество = текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
		Иначе
			
			нс = НайС[0];
			Если НЕ ЗначениеЗаполнено(нс.Упаковка)Тогда
				нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			ИначеЕсли нс.Упаковка <> текСтрока.Упаковка Тогда
				нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр / ?(ЗначениеЗаполнено(нс.Упаковка), нс.Упаковка.Коэффициент, 1);
			Иначе
				нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			нс.Количество = нс.Количество + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьПродолжительностьПоТрудозатратам()
	
	Продолжительность = 0;
	
	Для Каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Продолжительность = Продолжительность + Строка.ВремяРаботы*Строка.Количество;
	КонецЦикла; 
	
	Возврат Продолжительность;
	
КонецФункции

#КонецОбласти