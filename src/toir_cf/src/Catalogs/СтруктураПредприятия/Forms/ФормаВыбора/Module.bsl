#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("ИспользоватьВариантУчетаИерархииЭлементов") Тогда
		ИспользоватьВариантУчетаИерархииЭлементов = Истина;
		Элементы.ВариантУчетаИерархииЭлементов.Видимость = Истина;
		ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.НеУчитыватьИерархию;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимОтображенияСписка") Тогда
		Если Параметры.РежимОтображенияСписка = "Список" Тогда
			РежимОтображенияСписка = "Список";
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если РежимОтображенияСписка = "Список" Тогда
	    Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	УстановитьОтборПоРасформированным();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьРасформированныеПриИзменении(Элемент)
	УстановитьОтборПоРасформированным();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные.Расформировано Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранное подразделение расформировано!'"));
	ИначеЕсли ИспользоватьВариантУчетаИерархииЭлементов
		И ЗначениеЗаполнено(ВариантУчетаИерархииЭлементов)
		И НЕ ВариантУчетаИерархииЭлементов = ПредопределенноеЗначение("Перечисление.торо_ВариантыУчетаИерархииЭлементовПриПодборе.НеУчитыватьИерархию") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОповеститьОВыборе(СформироватьМассивВыбранныхЗначений(Значение, ВариантУчетаИерархииЭлементов));
		
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста 
Функция СформироватьМассивВыбранныхЗначений(ВыбранноеЗначение, ВариантУчетаИерархииЭлементов)
	
	Запрос = Новый Запрос;
	# Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Ссылка)";
	# КонецОбласти
	Запрос.УстановитьПараметр("Ссылка", ВыбранноеЗначение);
	
	
	Если ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.УчитыватьИерархиюТолько1Уровня 
		ИЛИ ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.УчитыватьИерархию1Уровня Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Ссылка В ИЕРАРХИИ(&Ссылка)", ".Родитель = &Ссылка");
	КонецЕсли; 	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивВозврата = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.УчитыватьИерархиюТолько1Уровня Тогда
			Возврат МассивВозврата;
		КонецЕсли;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивВозврата.Добавить(Выборка.Ссылка);	
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если НЕ ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.УчитыватьИерархиюТолько1Уровня Тогда
		МассивВозврата.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоРасформированным()
	ЭлементыОтбора = Список.Отбор.Элементы;	
	Если ЭлементыОтбора.Количество() > 0 И ЭлементыОтбора[0].Представление = "ПоказыватьРасформированные" Тогда
		ЭлементОтбора = ЭлементыОтбора[0]; 
	Иначе
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Представление = "ПоказыватьРасформированные";
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Расформировано");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
	КонецЕсли;
	ЭлементОтбора.Использование = Не ПоказыватьРасформированные;
КонецПроцедуры

#КонецОбласти

