#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Проверить зацикливание зависимых остановочных.
//
// Параметры:
//  ВР	 - СправочникСсылка.торо_ВидыРемонта - Вид ремонта проверяемый на зацикливание. 
//  ВыбранныйВР	 - СправочникСсылка.торо_ВидыРемонта - Выбранный вид ремонта. 
//  ОР	 - СправочникСсылка.торо_ОбъектыРемонта - Объект ремонта проверяемый на зацикливание.
//  ВыбранныйОР	 - СправочникСсылка.торо_ОбъектыРемонта - Выбранный объект ремонта.
//  Основной - Булево - признак, что выбирается основной или связанный ОР.
//  ТабДляПроверки - ТаблицаЗначений - таблица для проверки зацикливания.
// Возвращаемое значение:
//  Булево - Истина - происходит зацикливание, Ложь - зацикливания не происходит.
Функция ПроверитьЗацикливаниеЗависимыхОстановочных(ВР, ВыбранныйВР, ОР, ВыбранныйОР, Основной, ТабДляПроверки) Экспорт 	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ОбъектРемонта КАК %ВыбираемыйОР%,
	|	&ВидРемонта КАК %ВыбираемыйВР%";
	
	Если Основной Тогда
		ВыбираемыйОР 	= "ОсновнойОбъектРемонта";
		ВыбираемыйВР 	= "ВидРемонтаОсновногоОбъекта";
		
	Иначе
		ВыбираемыйОР 	= "СвязанныйОбъектРемонта";
		ВыбираемыйВР 	= "ВидРемонтаЗависимогоОбъекта";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыбираемыйОР%", ВыбираемыйОР);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыбираемыйВР%", ВыбираемыйВР);
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОбъектРемонта", ВыбранныйОР);
	Запрос.УстановитьПараметр("ВидРемонта", ВыбранныйВР);
	
	Зависимые = Запрос.Выполнить().Выгрузить();
	
	Если Зависимые.НайтиСтроки(Новый Структура(ВыбираемыйОР + ", " + ВыбираемыйВР, ОР, ВР)).Количество() > 0
		ИЛИ Зависимые.НайтиСтроки(Новый Структура(ВыбираемыйОР + ", " + ВыбираемыйВР, ОР, Справочники.торо_ВидыРемонтов.ПустаяСсылка())).Количество() > 0
		ИЛИ ТабДляПроверки.НайтиСтроки(Новый Структура("ОбъектРемонта, " + ВыбираемыйВР, ВыбранныйОР, ВР)).Количество() > 0
		ИЛИ ТабДляПроверки.НайтиСтроки(Новый Структура("ОбъектРемонта, " + ВыбираемыйВР, ВыбранныйОР, Справочники.торо_ВидыРемонтов.ПустаяСсылка())).Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат ПроверитьЗацикливаниеЗависимыхОстановочныхРек(Зависимые, ОР, ВР, Основной, ТабДляПроверки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	ФорматнаяСтрока = торо_РаботаСПользовательскимПредставлениемПовтИсп.ПолучитьФорматнуюСтроку("Справочники.торо_ОбъектыРемонта");
	Если ФорматнаяСтрока = Неопределено Тогда
		МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МассивЛокализуемыхПолей = Новый Массив;
	МассивЛокализуемыхПолей.Добавить("Наименование");
	
	СписокПолей = торо_РаботаСПользовательскимПредставлением.ПолучитьСписокПолей(ФорматнаяСтрока);
	
	Для Каждого Поле Из СписокПолей Цикл
		Поля.Добавить(Поле);
		
		Если МассивЛокализуемыхПолей.Найти(Поле) <> Неопределено Тогда
			Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
				Поля.Добавить(Поле + "Язык1");
			КонецЕсли;
			Если МультиязычностьСервер.ИспользуетсяВторойДополнительныйЯзык() Тогда
				Поля.Добавить(Поле +"Язык2");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Поля.Добавить("ЭтоГруппа");

КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ФорматнаяСтрока = торо_РаботаСПользовательскимПредставлениемПовтИсп.ПолучитьФорматнуюСтроку("Справочники.торо_ОбъектыРемонта");
	Если ФорматнаяСтрока = Неопределено Тогда
		МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если Данные.Свойство("ЭтоГруппа") И НЕ Данные.ЭтоГруппа Тогда 
		СтандартнаяОбработка = Ложь;
		Представление = торо_РаботаСПользовательскимПредставлением.ПолучитьПредставлениеПоФорматнойСтроке(ФорматнаяСтрока, Данные, Истина);
	ИначеЕсли Данные.Свойство("Ссылка") И НЕ Данные.Ссылка.ЭтоГруппа Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Наименование", Данные.Наименование);
		СтруктураДанные.Вставить("ЭтоГруппа", Данные.Ссылка.ЭтоГруппа);
		Представление = торо_РаботаСПользовательскимПредставлением.ПолучитьПредставлениеПоФорматнойСтроке(ФорматнаяСтрока, СтруктураДанные, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РазрешитьВыборФМ = ?(Параметры.Свойство("РазрешитьВыборФМ"), Параметры.РазрешитьВыборФМ, Истина);
	
	Если НЕ РазрешитьВыборФМ Тогда
		МассивТиповНеФМ = Новый Массив;
		МассивТиповНеФМ.Добавить(Перечисления.торо_ТипыОбъектовRCM.Объект);
		МассивТиповНеФМ.Добавить(Перечисления.торо_ТипыОбъектовRCM.ПустаяСсылка());
		
		Параметры.Отбор.Вставить("ТипОбъекта", Новый ФиксированныйМассив(МассивТиповНеФМ));
	КонецЕсли;
	
	МассивСсылок = ПолучитьМассивСсылокДляСпискаВыбора(Параметры);
	Если МассивСсылок <> Неопределено Тогда
		Параметры.Отбор.Вставить("Ссылка", Новый ФиксированныйМассив(МассивСсылок));
	КонецЕсли;
	
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.торо_ОбъектыРемонта);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт 
	
	торо_СозданиеНаОсновании.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Паспорт объекта ремонта
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.торо_ОбъектыРемонта";
	КомандаПечати.Идентификатор = "ПаспортОР";
	КомандаПечати.Представление = НСтр("ru = 'Паспорт объекта ремонта'");
	КомандаПечати.Обработчик = "торо_Печать.ЗапроситьДопПараметрыПечатиОР";
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ПечатьДокументовБезПредварительногоПросмотра",
		Ложь);
		
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПаспортОР") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"ПаспортОР", 
			"Паспорт объекта ремонта", 
			ПечатьПаспортаОР(МассивОбъектов, ПараметрыПечати));
	КонецЕсли;
		
КонецПроцедуры

// Функция - заполняет список реквизитов, которые можно использовать при формировании форматной строки в конструкторе.
//
// Параметры:
//  СписокРеквизитов - СписокЗначений - пустой список значений для заполнения.
Процедура ЗаполнитьСписокРеквизитовДляФорматнойСтроки(СписокРеквизитов) Экспорт
	
	СписокРеквизитов.Добавить("Наименование",			"Наименование");
	СписокРеквизитов.Добавить("Код",					"Код");
	СписокРеквизитов.Добавить("АдресМестонахождения",	"Адрес местонахождения");
	СписокРеквизитов.Добавить("ДатаВводаВЭксплуатацию",	"Дата ввода в эксплуатацию");
	СписокРеквизитов.Добавить("ДатаВыпуска",			"Дата выпуска (постройки)");
	СписокРеквизитов.Добавить("ЗаводскойНомер",			"Заводской №");
	СписокРеквизитов.Добавить("Изготовитель",			"Изготовитель");
	СписокРеквизитов.Добавить("ИнвентарныйНомер",		"Инвентарный №");
	СписокРеквизитов.Добавить("Контрагент",				"Контрагент");	
	СписокРеквизитов.Добавить("Направление",			"Направление");
	СписокРеквизитов.Добавить("КодПоОКОФ",				"Код по ОКОФ");
	СписокРеквизитов.Добавить("НомерПаспорта",			"Номер паспорта (регистрационный)");
	СписокРеквизитов.Добавить("Организация",			"Организация");
	СписокРеквизитов.Добавить("ПлановыйГрафикРаботы",	"Плановый график работы");
	СписокРеквизитов.Добавить("Подразделение",			"Подразделение");
	СписокРеквизитов.Добавить("Приоритет",				"Критичность");
	СписокРеквизитов.Добавить("ТехНомер",				"Технологический №");
	СписокРеквизитов.Добавить("ТиповойОР",				"Типовой ОР");
	СписокРеквизитов.Добавить("Комментарий",			"Комментарий");
	
КонецПроцедуры

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;
	
КонецПроцедуры

Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
	
	Реквизиты.Добавить("НаборСвойств");
		
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив Из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("ФайлКартинки");
	НеРедактируемыеРеквизиты.Добавить("ТипОбъекта");
	НеРедактируемыеРеквизиты.Добавить("Родитель");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьМассивСсылокДляСпискаВыбора(Параметры)
	
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	МассивСсылок = Неопределено;
	
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		
		Если Параметры.Свойство("Документ") И Параметры.Документ = "Выявленные дефекты_ОтказавшийЭлемент" Тогда
			
			СтруктураИерархии = Параметры.СтруктураИерархии;
			ОбъектРемонта     = Параметры.ОтборОбъектРемонта;
			МассивДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();
			МассивОРВетки = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(ОбъектРемонта, СтруктураИерархии,, Истина, МассивДоступныхСтатусов);
			МассивОРОтборПоСтатусам = торо_СтатусыОРВУчете.ОтборатьОбъектыПоСтатусамВУчете(МассивОРВетки, МассивДоступныхСтатусов,,Ложь);
			
			Возврат МассивОРОтборПоСтатусам;
		КонецЕсли;
			
		Если Параметры.Свойство("ОтборПоСтатусам") И Параметры.ОтборПоСтатусам Тогда
			Если Параметры.Свойство("ДоступныеСтатусы") Тогда 
				МассивДоступныхСтатусов = Параметры.ДоступныеСтатусы;
			ИначеЕсли Параметры.Свойство("ИсключитьНепринятые") Тогда
				МассивДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора(Параметры.ИсключитьНепринятые);
			Иначе
				МассивДоступныхСтатусов = торо_СтатусыОРВУчете.СписокСтатусовДляПодбора();
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
			               |	торо_ОбъектыРемонта.Код КАК Код
			               |ПОМЕСТИТЬ ОбъектыРемонта
			               |ИЗ
			               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |ГДЕ
			               |	&ПоляОтбораПоСтроке
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	МАКСИМУМ(торо_СтатусыОбъектовРемонтаВУчете.Период) КАК Период,
			               |	ОбъектыРемонта.Ссылка КАК Ссылка
			               |ПОМЕСТИТЬ ПоследниеДатыСтатусовПоОбъектамРемонта
			               |ИЗ
			               |	ОбъектыРемонта КАК ОбъектыРемонта
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
			               |		ПО ОбъектыРемонта.Ссылка = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ОбъектыРемонта.Ссылка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ОбъектыРемонта.Ссылка КАК Ссылка,
			               |	ОбъектыРемонта.Код КАК Код
			               |ИЗ
			               |	ОбъектыРемонта КАК ОбъектыРемонта
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДатыСтатусовПоОбъектамРемонта КАК ПоследниеДатыСтатусовПоОбъектамРемонта
			               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
			               |			ПО ПоследниеДатыСтатусовПоОбъектамРемонта.Период = торо_СтатусыОбъектовРемонтаВУчете.Период
			               |				И ПоследниеДатыСтатусовПоОбъектамРемонта.Ссылка = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
			               |		ПО ОбъектыРемонта.Ссылка = ПоследниеДатыСтатусовПоОбъектамРемонта.Ссылка
			               |ГДЕ
			               |	ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВучете.НеПринятоКУчету)) В (&СтатусОР)";
			
			Запрос.УстановитьПараметр("СтрокаПоиска", "%"+Параметры.СтрокаПоиска+"%");
			Запрос.УстановитьПараметр("СтатусОР", МассивДоступныхСтатусов);
			
			ПоляОтбораПоСтроке = Новый Массив;
			ПоляОтбораПоСтроке.Добавить("торо_ОбъектыРемонта.Наименование ПОДОБНО &СтрокаПоиска");
			ПоляОтбораПоСтроке.Добавить("торо_ОбъектыРемонта.Код ПОДОБНО &СтрокаПоиска");
			
			Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
				ПоляОтбораПоСтроке.Добавить("торо_ОбъектыРемонта.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска");
			КонецЕсли;
			
			Если МультиязычностьСервер.ИспользуетсяВторойДополнительныйЯзык() Тогда
				ПоляОтбораПоСтроке.Добавить("торо_ОбъектыРемонта.НаименованиеЯзык2 ПОДОБНО &СтрокаПоиска");
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОтбораПоСтроке", СтрСоединить(ПоляОтбораПоСтроке, " ИЛИ "));
			
			МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
	Иначе
		
		Если Параметры.Свойство("Документ") И ЗначениеЗаполнено(Параметры.Документ) Тогда
			
			Документ = Параметры.Документ;
			
			Если Документ = "Выявленные дефекты_ОтказавшийЭлемент" Тогда
				СтруктураИерархии = Параметры.СтруктураИерархии;
				ОбъектРемонта     = Параметры.ОтборОбъектРемонта;
				МассивОРВетки = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектов(ОбъектРемонта, СтруктураИерархии,, Истина);
				МассивСсылок = МассивОРВетки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ПроверитьЗацикливаниеЗависимыхОстановочныхРек(Основные, ОР, ВР, Основной, ТабДляПроверки)
	
	Если Основные.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		ТекстЗапроса = "ВЫБРАТЬ
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйОР% КАК %ОтборПоОР%,
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйВР% КАК %ОтборПоВР%
		|ПОМЕСТИТЬ Основные
		|ИЗ
		|	&Основные КАК торо_РемонтыОсновногоЗависимогоОборудования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйОР%,
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйВР%
		|ИЗ
		|	Основные КАК Основные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
		|		ПО Основные.%ОтборПоОР% = торо_РемонтыОсновногоЗависимогоОборудования.%ОтборПоОР%
		|			И Основные.%ОтборПоВР% = торо_РемонтыОсновногоЗависимогоОборудования.%ОтборПоВР%
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйОР%,
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйВР%
		|ИЗ
		|	Основные КАК Основные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
		|		ПО Основные.%ОтборПоОР% = торо_РемонтыОсновногоЗависимогоОборудования.%ОтборПоОР%
		|			И (торо_РемонтыОсновногоЗависимогоОборудования.%ОтборПоВР% = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
		|				ИЛИ Основные.%ОтборПоВР% = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка))";
		Запрос.УстановитьПараметр("Основные", Основные);
		
		Если Основной Тогда
			ВыбираемыйОР 	= "ОсновнойОбъектРемонта";
			ВыбираемыйВР 	= "ВидРемонтаОсновногоОбъекта";
			ОтборПоОР		= "СвязанныйОбъектРемонта";
			ОтборПоВР		= "ВидРемонтаЗависимогоОбъекта";
		Иначе
			ВыбираемыйОР 	= "СвязанныйОбъектРемонта";
			ВыбираемыйВР 	= "ВидРемонтаЗависимогоОбъекта";
			ОтборПоОР		= "ОсновнойОбъектРемонта";
			ОтборПоВР		= "ВидРемонтаОсновногоОбъекта";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыбираемыйОР%", ВыбираемыйОР);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыбираемыйВР%", ВыбираемыйВР);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОР%", ОтборПоОР);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоВР%", ОтборПоВР);
		
		Запрос.Текст = ТекстЗапроса;
		Зависимые = Запрос.Выполнить().Выгрузить();
		
		Если Зависимые.НайтиСтроки(Новый Структура(ВыбираемыйОР + ", " + ВыбираемыйВР, ОР, ВР)).Количество() > 0
			ИЛИ Зависимые.НайтиСтроки(Новый Структура(ВыбираемыйОР + ", " + ВыбираемыйВР, ОР, Справочники.торо_ВидыРемонтов.ПустаяСсылка())).Количество() > 0
			ИЛИ ТабДляПроверки.НайтиСтроки(Новый Структура("ОбъектРемонта, " + ВыбираемыйВР, ОР, ВР)).Количество() > 0 
			ИЛИ ТабДляПроверки.НайтиСтроки(Новый Структура("ОбъектРемонта, " + ВыбираемыйВР, ОР, Справочники.торо_ВидыРемонтов.ПустаяСсылка())).Количество() > 0 Тогда
			Возврат Истина;
		Иначе
			Если Зависимые.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Устранение возможного бесконечного зацикливания, если объект ремонта выбран сам себе зависимым или главным.
			СтруктураПоиска = Новый Структура(ВыбираемыйОР + ", " + ВыбираемыйВР);
			Для Каждого Строка из Основные Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
				НайденныеСтроки = Зависимые.НайтиСтроки(СтруктураПоиска);
				Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
					Зависимые.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЦикла;

			Возврат ПроверитьЗацикливаниеЗависимыхОстановочныхРек(Зависимые, ОР, ВР, Основной, ТабДляПроверки);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область Печать

Функция ПечатьПаспортаОР(МассивОбъектов, ПараметрыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.торо_ОбъектыРемонта.ПФ_MXL_ПаспортОР");
	
	Если ПараметрыПечати.Свойство("ПечатаемыеРазделы") Тогда
		ПечатаемыеРазделы = ПараметрыПечати.ПечатаемыеРазделы;
	Иначе
		ПечатаемыеРазделы = ДоступныеПечатныеРазделыПаспортаОР();
	КонецЕсли;
    Если ПараметрыПечати.Свойство("ТекСтруктураИерархии") Тогда
		ТекСтруктураИерархии = ПараметрыПечати.ТекСтруктураИерархии;
	Иначе
		ТекСтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	
	ЗаголовокИОсновныеДанные = ПолучитьВыборкуДляПечатиПаспортаОР(МассивОбъектов, ТекСтруктураИерархии);
	
	ЭтоПервый = Истина;
	ИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьРегламентныеМероприятия = ПолучитьФункциональнуюОпцию("торо_ИспользоватьРегламентныеМероприятия");
	ИспользоватьКоэффициентыРемОсобенностей = ПолучитьФункциональнуюОпцию("торо_ИспользоватьКоэффициентыРемОсобенностей");
	
	Пока ЗаголовокИОсновныеДанные.Следующий() Цикл
		
		Если НЕ ЭтоПервый Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ЭтоПервый = Ложь;
		
		ЭтоЕдиницаОборудования = Истина;
		Если ИспользоватьФМ И ЗаголовокИОсновныеДанные.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
			ЭтоЕдиницаОборудования = Ложь;
		КонецЕсли;
		
		ТабДок.Вывести(Макет.ПолучитьОбласть("НаименованиеПФ"));
				
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("Заголовок"),  ТабДок, ЗаголовокИОсновныеДанные);
		
		// Флаг основные
		Если ПечатаемыеРазделы.Свойство("ФлагОсновные") И ПечатаемыеРазделы.ФлагОсновные = Истина Тогда
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлОсновные"), ТабДок);
			ДатаСнятия = ПолучитьДатуСнятияСУчета(МассивОбъектов);
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбщиеБлок1"), Табдок, ЗаголовокИОсновныеДанные, ДатаСнятия);
			
			Если Константы.торо_ИспользоватьДокументыПринятияИСписанияОборудования.Получить() Тогда 
				ТабДок.Область("СнятиеСУчета").Видимость = Истина;
			Иначе
				ТабДок.Область("СнятиеСУчета").Видимость = Ложь;
			КонецЕсли;
			
			ТабДок.Область("ОблИнвентарныйНомер").Видимость = ЭтоЕдиницаОборудования;
			ТабДок.Область("ОблСрокПолезногоИспользования").Видимость = ЭтоЕдиницаОборудования;
			
			Если ЗаголовокИОсновныеДанные.ВнешнийОбъект И ЭтоЕдиницаОборудования Тогда
				ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбщиеБлок3"), Табдок, ЗаголовокИОсновныеДанные);
			Иначе
				Область = Макет.ПолучитьОбласть("ОбщиеБлок2");
				Область.Параметры.Организация = торо_ЗаполнениеДокументов.ПолучитьПредставлениеОрганизацииДляПечати(ЗаголовокИОсновныеДанные.Организация);
				Область.Параметры.Подразделение = ЗаголовокИОсновныеДанные.Подразделение;
				ТабДок.Вывести(Область);
			КонецЕсли; 
			
			Если ЭтоЕдиницаОборудования Тогда
				ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбщиеБлок4"), Табдок, ЗаголовокИОсновныеДанные);
			КонецЕсли;
			
			КонтактнаяИнформацияАдрес = ПолучитьАдрес(ЗаголовокИОсновныеДанные.Ссылка);
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбластьМестоположение"), Табдок, ЗаголовокИОсновныеДанные);
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбластьАдрес"), Табдок, КонтактнаяИнформацияАдрес);
		
		КонецЕсли;
		
		// Характеристики
		Если ПечатаемыеРазделы.Свойство("ФлагХарактеристики") И ПечатаемыеРазделы.ФлагХарактеристики = Истина И ИспользоватьДополнительныеРеквизитыИСведения
			И ЭтоЕдиницаОборудования Тогда
			
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлСвойства"), ТабДок);
			
			Результат = УправлениеСвойствами.ЗначенияСвойств(ЗаголовокИОсновныеДанные.Ссылка);	
			
			// заполнить недублирующиеся свойства из типового ор
			Если ЗначениеЗаполнено(ЗаголовокИОсновныеДанные.ТиповойОР) Тогда
				СписокЗаполненныхСвойств = Новый массив;
				Для каждого СтрокаДопРеквизита из ЗаголовокИОсновныеДанные.Ссылка.ДополнительныеРеквизиты Цикл
					Если ЗначениеЗаполнено(СтрокаДопРеквизита.Значение) Тогда
						СписокЗаполненныхСвойств.Добавить(СтрокаДопРеквизита.Свойство);
					КонецЕсли;
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 	"ВЫБРАТЬ
				|	торо_ТиповыеОРДополнительныеРеквизиты.Ссылка КАК Источник,
				|	торо_ТиповыеОРДополнительныеРеквизиты.Свойство,
				|	торо_ТиповыеОРДополнительныеРеквизиты.Значение
				|ИЗ
				|	Справочник.торо_ТиповыеОР.ДополнительныеРеквизиты КАК торо_ТиповыеОРДополнительныеРеквизиты
				|ГДЕ
				|	торо_ТиповыеОРДополнительныеРеквизиты.Ссылка = &ТиповойОР
				|	И НЕ торо_ТиповыеОРДополнительныеРеквизиты.Свойство В (&Свойства)";
				
				Запрос.УстановитьПараметр("ТиповойОР", ЗаголовокИОсновныеДанные.ТиповойОР);
				Запрос.УстановитьПараметр("Свойства", СписокЗаполненныхСвойств);
				
				ВыборкаСвойств = Запрос.Выполнить().Выбрать();
				Пока ВыборкаСвойств.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаСвойств.Значение) Тогда
						Продолжить;
					Конецесли;
					
					НовСтр = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСвойств);
				КонецЦикла;
			КонецЕсли;
			
			Если Результат.Количество() <> 0 Тогда
				ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокСвойства"),ТабДок);
				Область = Макет.ПолучитьОбласть("ТаблСвойства");
				
				Для каждого Характеристика Из Результат Цикл
					ЗаполнитьИВывестиОбласть(Область, ТабДок, Характеристика);
				КонецЦикла;
			КонецЕсли; 
			
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////
		// Флаг Показатели 
		Если ПечатаемыеРазделы.Свойство("ФлагКонтролируемыеПоказатели") И ПечатаемыеРазделы.ФлагКонтролируемыеПоказатели = Истина
			И ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей") Тогда
			ПечатьПаспортаОР_КонтролируемыеПоказатели(ТабДок, Макет, ЗаголовокИОсновныеДанные);
		КонецЕсли;                                                                    
		
		///////////////////////////////////////////////////////////////////////////
		// Флаг Наработка
		Если ПечатаемыеРазделы.Свойство("ФлагНаработка") И ПечатаемыеРазделы.ФлагНаработка = Истина
			И ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования") Тогда	
			ПечатьПаспортаОР_Наработка(ТабДок, Макет, ЗаголовокИОсновныеДанные);
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////
		// Флаг Ремонты
		Если ПечатаемыеРазделы.Свойство("ФлагРемонты") И ПечатаемыеРазделы.ФлагРемонты = Истина Тогда
			ПечатьПаспортаОР_Ремонты(ТабДок, Макет, ЗаголовокИОсновныеДанные, НЕ ЭтоЕдиницаОборудования);
		КонецЕсли;	
		
		///////////////////////////////////////////////////////////////////////////
		// Флаг Нормативные ремонты
		Если ПечатаемыеРазделы.Свойство("ФлагНормативныеРемонты") И ПечатаемыеРазделы.ФлагНормативныеРемонты = Истина  Тогда
			ПечатьПаспортаОР_НормативныеРемонты(ТабДок, Макет, ЗаголовокИОсновныеДанные);
		КонецЕсли;

		///////////////////////////////////////////////////////////////////////////
		// Флаг Запчасти ремонты
		Если ПечатаемыеРазделы.Свойство("ФлагЗапчасти") И ПечатаемыеРазделы.ФлагЗапчасти = Истина
			И ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей") Тогда
			ПечатьПаспортаОР_Запчасти(ТабДок, Макет, ЗаголовокИОсновныеДанные);
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////
		// Флаг Состав техкарт
		Если ПечатаемыеРазделы.Свойство("ФлагТехкарты") И ПечатаемыеРазделы.ФлагТехкарты = Истина  Тогда
			ПечатьПаспортаОР_СоставТехКарт(ТабДок, Макет, ЗаголовокИОсновныеДанные);
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// Флаг Регламентные мероприятия
		Если ИспользоватьРегламентныеМероприятия Тогда
			Если ПечатаемыеРазделы.Свойство("ФлагРегМероприятия") И ПечатаемыеРазделы.ФлагРегМероприятия = Истина Тогда 
				ПечатьПаспортаОР_Мероприятия(ТабДок, Макет, ЗаголовокИОсновныеДанные);
			КонецЕсли;
		КонецЕсли;
				
		///////////////////////////////////////////////////////////////////////////
		// Флаг ФлагКоэффициентыРемонтныхОсобенностей
		Если ИспользоватьКоэффициентыРемОсобенностей И ПечатаемыеРазделы.Свойство("ФлагКоэффициентыРемонтныхОсобенностей")
			И ПечатаемыеРазделы.ФлагКоэффициентыРемонтныхОсобенностей = Истина И ЭтоЕдиницаОборудования Тогда
			ПечатьПаспортаОР_КоэффициентыРемонтныхОсобенностей(ТабДок, Макет, ЗаголовокИОсновныеДанные);
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////
		// Флаг Дополнительно
		Если ПечатаемыеРазделы.Свойство("ФлагДополнительно") И ПечатаемыеРазделы.ФлагДополнительно = Истина  Тогда
			
			Дополнительно = Макет.ПолучитьОбласть("Дополнительно");	
			Дополнительно.Параметры.Приоритет                  = ЗаголовокИОсновныеДанные.Приоритет;
			Дополнительно.Параметры.РемонтноеПодразделение     = ЗаголовокИОсновныеДанные.ПодразделениеИсполнитель;
			Дополнительно.Параметры.КонтрагентИсполнительРемонта = ЗаголовокИОсновныеДанные.КонтрагентИсполнительРемонта;
			Дополнительно.Параметры.НеУчаствуетВПланировании   = ЗаголовокИОсновныеДанные.НеУчаствуетВПланировании;
			Дополнительно.Параметры.ВестиУчетСерийныхЗапчастей = ЗаголовокИОсновныеДанные.ВестиУчетСерийныхЗапчастей;
			Если ЗначениеЗаполнено(ЗаголовокИОсновныеДанные.ШтрихКод) Тогда 
				Обработки.торо_ГенерацияШтрихКодов.ОтрисоватьШтрихКод(ЗаголовокИОсновныеДанные.ШтрихКод, 
					ЗаголовокИОсновныеДанные.ТипШтрихКода, Дополнительно);
			Иначе
				Дополнительно.Рисунки.ШтрихКод.Картинка = Новый Картинка;
			КонецЕсли;

			ТабДок.Вывести(Дополнительно);
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////
		// Флаг ПрикрепленныеФайлы
		Если ПечатаемыеРазделы.Свойство("ФлагПрикрепленныеФайлы") И ПечатаемыеРазделы.ФлагПрикрепленныеФайлы = Истина Тогда
			
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлФайлы"), ТабДок);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ОбъектыРемонтаПрисоединенныеФайлы.Наименование,
			|	торо_ОбъектыРемонтаПрисоединенныеФайлы.Описание
			|ИЗ
			|	Справочник.торо_ОбъектыРемонтаПрисоединенныеФайлы КАК торо_ОбъектыРемонтаПрисоединенныеФайлы
			|ГДЕ
			|	торо_ОбъектыРемонтаПрисоединенныеФайлы.ВладелецФайла = &ОбъектРемонта";
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокФайлы"),ТабДок);
				Файл = Результат.Выбрать();
				Область = Макет.ПолучитьОбласть("ТаблФайлы");
				
				Пока Файл.Следующий() Цикл
					ЗаполнитьИВывестиОбласть(Область, ТабДок, Файл);
				КонецЦикла;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.КлючПараметровПечати = "торо_ПечатьОР_ПаспортОР";
	
	Возврат ТабДок;	
	
КонецФункции // ПечатьПаспортаОР(МассивОбъектов, ПараметрыПечати)

Функция ПолучитьВыборкуДляПечатиПаспортаОР(МассивОбъектов, СтруктураИерархии)
	
	Запрос = Новый Запрос;
	Если СтруктураИерархии.СтроитсяАвтоматически Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта.Код,
		|	торо_ОбъектыРемонта.Наименование,
		|   торо_ОбъектыРемонта.ТипОбъекта, 
		|	торо_ОбъектыРемонта.Направление,
		|	торо_ОбъектыРемонта.ТиповойОР,
		|	торо_ОбъектыРемонта.ИнвентарныйНомер,
		|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию,
		|	торо_ОбъектыРемонта.СрокПолезногоИспользования,
		|	торо_ОбъектыРемонта.ПлановыйГрафикРаботы,
		|	торо_ОбъектыРемонта.Организация,
		|	торо_ОбъектыРемонта.Подразделение,
		|	торо_ОбъектыРемонта.ВнешнийОбъект,
		|	торо_ОбъектыРемонта.Контрагент,
		|	торо_ОбъектыРемонта.Комментарий,
		|	торо_ОбъектыРемонта.ДоговорКонтрагента,
		|	торо_ОбъектыРемонта.Изготовитель,
		|	торо_ОбъектыРемонта.ЗаводскойНомер,
		|	торо_ОбъектыРемонта.ТехНомер,
		|	торо_ОбъектыРемонта.КодПоОКОФ,
		|	торо_ОбъектыРемонта.ДатаВыпуска,
		|	торо_ОбъектыРемонта.НомерПаспорта,
		|	торо_ОбъектыРемонта.АдресМестонахождения,
		|	торо_ОбъектыРемонта.ПодразделениеИсполнитель,
		|	торо_ОбъектыРемонта.КонтрагентИсполнительРемонта,
		|	торо_ОбъектыРемонта.НеУчаствуетВПланировании,
		|	торо_ОбъектыРемонта.ВестиУчетСерийныхЗапчастей,
		|	торо_ОбъектыРемонта.Приоритет,
		|	торо_ОбъектыРемонта.ШтрихКод,
		|	торо_ОбъектыРемонта.ТипШтрихкода,
		|	торо_ОбъектыРемонта."+СтруктураИерархии.РеквизитОР+" КАК Родитель
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|ГДЕ 
		| торо_ОбъектыРемонта.Ссылка В (&Ссылка)
		|";
		
	Иначе
			
		Если СтруктураИерархии.ИзменяетсяДокументами Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
			|	торо_ОбъектыРемонта.Код КАК Код,
			|	торо_ОбъектыРемонта.Наименование КАК Наименование,
			|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
			|	торо_ОбъектыРемонта.Направление КАК Направление,
			|	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
			|	торо_ОбъектыРемонта.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
			|	торо_ОбъектыРемонта.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
			|	торо_ОбъектыРемонта.Организация КАК Организация,
			|	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
			|	торо_ОбъектыРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
			|	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
			|	торо_ОбъектыРемонта.Комментарий КАК Комментарий,
			|	торо_ОбъектыРемонта.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	торо_ОбъектыРемонта.Изготовитель КАК Изготовитель,
			|	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
			|	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
			|	торо_ОбъектыРемонта.КодПоОКОФ КАК КодПоОКОФ,
			|	торо_ОбъектыРемонта.ДатаВыпуска КАК ДатаВыпуска,
			|	торо_ОбъектыРемонта.НомерПаспорта КАК НомерПаспорта,
			|	торо_ОбъектыРемонта.АдресМестонахождения КАК АдресМестонахождения,
			|	торо_ОбъектыРемонта.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
			|	торо_ОбъектыРемонта.КонтрагентИсполнительРемонта КАК КонтрагентИсполнительРемонта,
			|	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
			|	торо_ОбъектыРемонта.ВестиУчетСерийныхЗапчастей КАК ВестиУчетСерийныхЗапчастей,
			|	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК Родитель,
			|	торо_ОбъектыРемонта.ШтрихКод КАК ШтрихКод,
			|	торо_ОбъектыРемонта.ТипШтрихКода КАК ТипШтрихКода
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
			|			И (торо_ОбъектыРемонта.Ссылка В (&Ссылка))";

		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
			|	торо_ОбъектыРемонта.Код КАК Код,
			|	торо_ОбъектыРемонта.Наименование КАК Наименование,
			|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта,
			|	торо_ОбъектыРемонта.Направление КАК Направление,
			|	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
			|	торо_ОбъектыРемонта.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
			|	торо_ОбъектыРемонта.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
			|	торо_ОбъектыРемонта.Организация КАК Организация,
			|	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
			|	торо_ОбъектыРемонта.ВнешнийОбъект КАК ВнешнийОбъект,
			|	торо_ОбъектыРемонта.Контрагент КАК Контрагент,
			|	торо_ОбъектыРемонта.Комментарий КАК Комментарий,
			|	торо_ОбъектыРемонта.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	торо_ОбъектыРемонта.Изготовитель КАК Изготовитель,
			|	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
			|	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
			|	торо_ОбъектыРемонта.КодПоОКОФ КАК КодПоОКОФ,
			|	торо_ОбъектыРемонта.ДатаВыпуска КАК ДатаВыпуска,
			|	торо_ОбъектыРемонта.НомерПаспорта КАК НомерПаспорта,
			|	торо_ОбъектыРемонта.АдресМестонахождения КАК АдресМестонахождения,
			|	торо_ОбъектыРемонта.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
			|	торо_ОбъектыРемонта.КонтрагентИсполнительРемонта КАК КонтрагентИсполнительРемонта,
			|	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланировании,
			|	торо_ОбъектыРемонта.ВестиУчетСерийныхЗапчастей КАК ВестиУчетСерийныхЗапчастей,
			|	торо_ОбъектыРемонта.Приоритет КАК Приоритет,
			|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Родитель,
			|	торо_ОбъектыРемонта.ШтрихКод КАК ШтрихКод,
			|	торо_ОбъектыРемонта.ТипШтрихКода КАК ТипШтрихКода
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			|			И (торо_ОбъектыРемонта.Ссылка В (&Ссылка))
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";

		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
			
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Возврат Выборка;
	
КонецФункции

Функция ПолучитьДатуСнятияСУчета (МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_СтатусыОбъектовРемонтаВУчете.СтатусОР КАК СтатусОР,
	               |	торо_СтатусыОбъектовРемонтаВУчете.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(, ОбъектРемонта В (&Ссылка)) КАК торо_СтатусыОбъектовРемонтаВУчете
	               |ГДЕ
	               |	торо_СтатусыОбъектовРемонтаВУчете.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.СнятоСУчета)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Период;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Процедура ПечатьПаспортаОР_КонтролируемыеПоказатели(ТабДок, Макет, ЗаголовокИОсновныеДанные)
	
	// Область "ГлПоказатели"
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлПоказатели"),Табдок,ЗаголовокИОсновныеДанные);
	
	ТаблицаРодителейТОР = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(ЗаголовокИОсновныеДанные.ТиповойОР);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Таб.Родитель КАК ТОР
	|ПОМЕСТИТЬ ТабРодителейТОР
	|ИЗ
	|	&ТабРодителейТОР КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель КАК Показатель,
	|	ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка) КАК ТиповойОР,
	|	1 КАК Приоритет,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум КАК ДопустимыйМинимум,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум КАК ДопустимыйМаксимум,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум КАК КритическийМинимум,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум КАК КритическийМаксимум,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР КАК ЗначенияКонтролируемыхПоказателейИзОР,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера КАК ТочкаЗамера,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален КАК Удален
	|ПОМЕСТИТЬ ПоказателиОРИТиповогоОР
	|ИЗ
	|	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	|ГДЕ
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка),
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта,
	|	0,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален
	|ИЗ
	|	ТабРодителейТОР КАК ТабРодителейТОР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	|		ПО ТабРодителейТОР.ТОР = торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПриоритетовПолная.Показатель КАК Показатель,
	|	МАКСИМУМ(ТаблицаПриоритетовПолная.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаПриоритетов
	|ИЗ
	|	ПоказателиОРИТиповогоОР КАК ТаблицаПриоритетовПолная
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПриоритетовПолная.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОРИТиповогоОР.Показатель КАК Показатель,
	|	ПоказателиОРИТиповогоОР.ДопустимыйМинимум КАК ДопустимыйМинимум,
	|	ПоказателиОРИТиповогоОР.ДопустимыйМаксимум КАК ДопустимыйМаксимум,
	|	ПоказателиОРИТиповогоОР.КритическийМинимум КАК КритическийМинимум,
	|	ПоказателиОРИТиповогоОР.КритическийМаксимум КАК КритическийМаксимум,
	|	ПоказателиОРИТиповогоОР.ЗначенияКонтролируемыхПоказателейИзОР КАК ЗначенияКонтролируемыхПоказателейИзОР,
	|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЕдиницаИзмерения КАК ЕдИзм
	|ИЗ
	|	ПоказателиОРИТиповогоОР КАК ПоказателиОРИТиповогоОР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПриоритетов КАК ТаблицаПриоритетов
	|		ПО ПоказателиОРИТиповогоОР.Показатель = ТаблицаПриоритетов.Показатель
	|			И ПоказателиОРИТиповогоОР.Приоритет = ТаблицаПриоритетов.Приоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	|		ПО ПоказателиОРИТиповогоОР.Показатель = торо_ИзмеряемыеПоказателиОбъектовРемонта.Ссылка
	|ГДЕ
	|	НЕ ПоказателиОРИТиповогоОР.Удален";
	
	Запрос.УстановитьПараметр("ТабРодителейТОР", ТаблицаРодителейТОР);
	Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
	Запрос.УстановитьПараметр("СсылкаТиповойОбъект", ЗаголовокИОсновныеДанные.ТиповойОР);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпПоказатели"),ТабДок);
		Показатели = Результат.Выбрать();
		Область = Макет.ПолучитьОбласть("ТблПоказатели");
		
		Пока Показатели.Следующий() Цикл
			ЗаполнитьИВывестиОбласть(Область, ТабДок, Показатели);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПечатьПаспортаОР_Наработка(ТабДок, Макет, ЗаголовокИОсновныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
	|ПОМЕСТИТЬ Таб3
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(, ОбъектРемонта = &ОбъектРемонта) КАК торо_ПараметрыНаработкиОбъектовРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_НаработкаОбъектовРемонта.Период,
	|	торо_НаработкаОбъектовРемонта.Регистратор,
	|	торо_НаработкаОбъектовРемонта.ОбъектРемонта,
	|	Таб3.Показатель                                КАК ПоказательНаработки,
	|	торо_НаработкаОбъектовРемонта.ДатаКон,
	|	торо_НаработкаОбъектовРемонта.Наработка        КАК Наработка,
	|	Таб3.ЕдиницаИзмерения                          КАК ЕдИзм,
	|	Таб3.ПлановаяНаработка                         КАК ПлановаяНаработка,
	|	Таб3.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериода,
	|	Таб3.ПериодПлановойНаработки                   КАК ПериодПлановойНаработки,
	|	Таб3.КоэффициентИспользованияОборудования      КАК Коэф
	|ИЗ
	|	Таб3 КАК Таб3
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	|		ПО    (торо_НаработкаОбъектовРемонта.ОбъектРемонта = Таб3.ОбъектРемонта)
	|			И (торо_НаработкаОбъектовРемонта.Показатель = Таб3.Показатель)
	|ИТОГИ
	|	СУММА(Наработка),
	|	МИНИМУМ(ЕдИзм),
	|	МИНИМУМ(ПлановаяНаработка),
	|	МИНИМУМ(ПродолжительностьПериода),
	|	МИНИМУМ(ПериодПлановойНаработки),
	|	МИНИМУМ(Коэф)
	|ПО
	|	ПоказательНаработки";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлНаработка"), Табдок);
		
		// Определим области, которые будут использоваться в цикле, чтобы не получать их постоянно.
		
		ОбластьТаблШапкаПоказатели      = Макет.ПолучитьОбласть("ТблШпПоказателиНаработки");
		ОбластьТаблПоказатели           = Макет.ПолучитьОбласть("ТблПоказателиНаработки");
		
		ОбластьТаблШапкаЖурналНаработки = Макет.ПолучитьОбласть("ТблШпЖурналНаработки");
		ОбластьТаблЖурналНаработки      = Макет.ПолучитьОбласть("ТблЖурналНаработки");
		
		ОбластьНаработкаИтого           = Макет.ПолучитьОбласть("ТблЖурналНаработкиИтоги");
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИВывестиОбласть(ОбластьТаблШапкаПоказатели, Табдок);
			ЗаполнитьИВывестиОбласть(ОбластьТаблПоказатели, Табдок, Выборка);
			
			ВыборкаВторогоУровня = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
			
			Если ВыборкаВторогоУровня.Количество() > 0 Тогда
				
				ЗаполнитьИВывестиОбласть(ОбластьТаблШапкаЖурналНаработки, Табдок);
				
				Пока ВыборкаВторогоУровня.Следующий() Цикл 
					ЗаполнитьИВывестиОбласть(ОбластьТаблЖурналНаработки,Табдок, ВыборкаВторогоУровня);
				КонецЦикла;
				
				ЗаполнитьИВывестиОбласть(ОбластьНаработкаИтого,Табдок, Выборка);
				
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПечатьПаспортаОР_Ремонты(ТабДок, Макет, ЗаголовокИОсновныеДанные, ЭтоФункциональноеМесто = Ложь)
	
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлРемонты"), Табдок);
	
	МассивОбъектов = Новый Массив;
	Если ЭтоФункциональноеМесто Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                |	торо_СоставФункциональныхМест.ОбъектРемонта КАК УстановленныйОР
		                |ИЗ
		                |	РегистрСведений.торо_СоставФункциональныхМест КАК торо_СоставФункциональныхМест
		                |ГДЕ
		                |	торо_СоставФункциональныхМест.ФункциональноеМесто = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивОбъектов.Добавить(Выборка.УстановленныйОР);
		КонецЦикла;
		
	Иначе
		МассивОбъектов.Добавить(ЗаголовокИОсновныеДанные.Ссылка);
	КонецЕсли;
		
	//////////////////////////////////////////////////////////////////////////	
	// Область "Внешние основания"
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот") Тогда 
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ВнешниеОснования"), Табдок);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ВнешниеОснованияДляРаботСрезПоследних.Регистратор КАК Регистратор,
		               |	торо_ВнешниеОснованияДляРаботСрезПоследних.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
		               |	торо_ВнешниеОснованияДляРаботСрезПоследних.Описание КАК Описание
		               |ПОМЕСТИТЬ ВТ_ВнешниеОснования
		               |ИЗ
		               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(, ОбъектРемонта В (&МассивОР)) КАК торо_ВнешниеОснованияДляРаботСрезПоследних
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Регистратор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ВнешнееОснованиеДляРабот.Номер КАК Номер,
		               |	ВТ_ВнешниеОснования.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
		               |	ВТ_ВнешниеОснования.Описание КАК Описание
		               |ИЗ
		               |	ВТ_ВнешниеОснования КАК ВТ_ВнешниеОснования
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
		               |		ПО ВТ_ВнешниеОснования.Регистратор = торо_ВнешнееОснованиеДляРабот.Ссылка
		               |ГДЕ
		               |	торо_ВнешнееОснованиеДляРабот.Проведен
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПлановаяДатаРемонта";
		
		Запрос.УстановитьПараметр("МассивОР", МассивОбъектов);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпВнешниеОснования"), Табдок);
			Область = Макет.ПолучитьОбласть("ТблВнешниеОснования");
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИВывестиОбласть(Область, Табдок, Выборка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////	
	// Область "Выявленные дефекты"
	Если ПолучитьФункциональнуюОпцию("торо_УчетВыявленныхДефектовОборудования") Тогда 
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ВыявленныеДефекты"), Табдок);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК Ссылка,
		               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка.Номер КАК Номер,
		               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка.Дата КАК Дата,
		               |	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент КАК ОтказавшийЭлемент,
		               |	торо_ВыявленныеДефектыСписокДефектов.ВидДефекта КАК ВидДефекта,
		               |	торо_ВыявленныеДефектыСписокДефектов.ДефектПричина КАК ПричинаДефекта,
		               |	торо_ВыявленныеДефектыСписокДефектов.КритичностьДефекта КАК КритичностьДефекта,
		               |	торо_ВыявленныеДефектыСписокДефектов.ДефектОписание КАК ОписаниеДефекта,
		               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка.ДатаОбнаружения КАК ДатаОбнаружения
		               |ИЗ
		               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		               |ГДЕ
		               |	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта В(&МассивОР)
		               |	И торо_ВыявленныеДефектыСписокДефектов.Ссылка.Проведен
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	торо_ВыявленныеДефектыСписокДефектов.Ссылка.Дата";
		
		Запрос.УстановитьПараметр("МассивОР", МассивОбъектов);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпВыявленныеДефекты"), Табдок);
			Область = Макет.ПолучитьОбласть("ТблВыявленныеДефекты");
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИВывестиОбласть(Область, Табдок, Выборка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////
	// Область "ПредстоящиеРемонты"
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ПредстоящиеРемонты"),ТабДок);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот КАК ДатаНачалаРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаОкончанияРемонтныхРабот КАК ДатаОкончанияРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор КАК Регистратор,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID КАК ID
	|ПОМЕСТИТЬ ВТ_ПлановыеРемонтныеРаботы
	|ИЗ
	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, ОбъектРемонтныхРабот В (&МассивОР)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	|ГДЕ
	|	НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен
	|	И НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот КАК НачалоРемонта,
	|	ВТ_ПлановыеРемонтныеРаботы.ДатаОкончанияРемонтныхРабот КАК ОкончаниеРемонта,
	|	ВТ_ПлановыеРемонтныеРаботы.Регистратор КАК Регистратор,
	|	ВТ_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ВТ_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	ВТ_ПлановыеРемонтныеРаботы.ID КАК ID
	|ИЗ
	|	ВТ_ПлановыеРемонтныеРаботы КАК ВТ_ПлановыеРемонтныеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|		ПО ВТ_ПлановыеРемонтныеРаботы.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	|ГДЕ
	|	НЕ торо_ОбщиеДанныеПоРемонтам.Завершен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРемонтныхРабот,
	|	НачалоРемонта";
	
	Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата());
	Запрос.УстановитьПараметр("МассивОР", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпПредстоящиеРемонты"),ТабДок);	
		Выборка = Результат.Выбрать();
		ТаблВыполненныеРемонты = Макет.ПолучитьОбласть("ТблПредстоящиеРемонты");
		
		Пока Выборка.Следующий() Цикл
			ТаблВыполненныеРемонты.Параметры.Заполнить(Выборка);
			ТаблВыполненныеРемонты.Параметры.ВидРемонтныхРабот = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(Выборка.ВидРемонтныхРабот);
			ТабДок.Вывести(ТаблВыполненныеРемонты, Выборка.Уровень()); 
		КонецЦикла;
	КонецЕсли;

	//////////////////////////////////////////////////////////////////////////	
	// Область "Заявки на ремонт"
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьСметыРемонта") Тогда
	    ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаявкиНаРемонт"), Табдок);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК НачалоРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ОкончаниеРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Дата КАК ДатаДокумента,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Номер КАК Номер
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		|ГДЕ
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта В (&МассивОР)
		|	И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала";
		
		Запрос.УстановитьПараметр("МассивОР", МассивОбъектов);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпЗаявкиНаРемонт"), Табдок);
			Область = Макет.ПолучитьОбласть("ТблЗаявкиНаРемонт");
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИВывестиОбласть(Область, Табдок, Выборка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	//////////////////////////////////////////////////////////////////////////	
	// Область "Наряды на выполнение ремонтных работ"
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаВыполнениеРабот") Тогда 
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("НарядыНаРемРаботы"), Табдок);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка КАК Ссылка,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Дата КАК Дата,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Номер КАК Номер,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		               |ГДЕ
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ОбъектРемонта В (&МассивОР)
		               |	И торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Проведен
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Дата";
		
		Запрос.УстановитьПараметр("МассивОР", МассивОбъектов);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпНарядыНаРемРаботы"), Табдок);
			Область = Макет.ПолучитьОбласть("ТблНарядыНаРемРаботы");
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИВывестиОбласть(Область, Табдок, Выборка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
			
	//////////////////////////////////////////////////////////////////////////
	// Область "ВыполненныеРемонты"
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ВыполненныеРемонты"),ТабДок);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыНачала.ДатаНачала, торо_ЗавершенныеРемонтныеРаботы.ДатаОкончания) КАК ПланДатаНачалаРемонтныхРабот,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыНачала.ДатаОкончания, торо_ЗавершенныеРемонтныеРаботы.ДатаОкончания) КАК ПланДатаЗавершенияРемонтныхРабот,
	               |	ЕСТЬNULL(торо_СвернутыеФактическиеДатыРемонтов.ДатаНачала, торо_ЗавершенныеРемонтныеРаботы.ДатаОкончания) КАК ФактДатаНачалаРемонтныхРабот,
	               |	ЕСТЬNULL(торо_СвернутыеФактическиеДатыРемонтов.ДатаОкончания, торо_ЗавершенныеРемонтныеРаботы.ДатаОкончания) КАК ФактДатаЗавершенияРемонтныхРабот,
	               |	торо_ЗавершенныеРемонтныеРаботы.Регистратор КАК Документ
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыНачала
	               |		ПО торо_ЗавершенныеРемонтныеРаботы.ID = торо_АктуальныеПлановыеДатыНачала.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов КАК торо_СвернутыеФактическиеДатыРемонтов
	               |		ПО торо_ЗавершенныеРемонтныеРаботы.ID = торо_СвернутыеФактическиеДатыРемонтов.IDРемонта
	               |ГДЕ
	               |	торо_ЗавершенныеРемонтныеРаботы.ОбъектРемонта В(&МассивОР)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот,
	               |	ПланДатаНачалаРемонтныхРабот";
	
	Запрос.УстановитьПараметр("МассивОР", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпВыполненныеРемонты"),ТабДок);
		Выборка = Результат.Выбрать();
		ТаблВыполненныеРемонты = Макет.ПолучитьОбласть("ТблВыполненныеРемонты");
		
		Пока Выборка.Следующий() Цикл
			ТаблВыполненныеРемонты.Параметры.Заполнить(Выборка);
			ТаблВыполненныеРемонты.Параметры.ВидРемонтныхРабот = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(Выборка.ВидРемонтныхРабот);
			ТабДок.Вывести(ТаблВыполненныеРемонты, Выборка.Уровень()); 
		КонецЦикла;
	КонецЕсли; 
	
	//////////////////////////////////////////////////////////////////////////	
	// Область "Акты о приемке оборудования"
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьАктПриемкиОборудования") Тогда 
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("АктыПриемкиОборудования"), Табдок);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка КАК Ссылка,
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка.Номер КАК Номер,
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка.Дата КАК Дата,
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.ДатаНачала КАК ДатаНачала,
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
		               |ГДЕ
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.ОбъектРемонта В (&МассивОР)
		               |	И торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка.Проведен
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка.Дата";
		
		Запрос.УстановитьПараметр("МассивОР", МассивОбъектов);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпАктыПриемкиОборудования"), Табдок);
			Область = Макет.ПолучитьОбласть("ТблАктыПриемкиОборудования");
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИВывестиОбласть(Область, Табдок, Выборка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПечатьПаспортаОР_Мероприятия(ТабДок, Макет, ЗаголовокИОсновныеДанные)
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлМероприятия"), Табдок);
	
	//////////////////////////////////////////////////////////////////////////	
	// Область "Предстоящие регламентные мероприятия"
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ПредстоящиеРМ"), ТабДок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов КАК СписокОбъектов
	               |ПОМЕСТИТЬ СписокОбъектовРМ
	               |ИЗ
	               |	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
	               |ГДЕ
	               |	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта = &ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ПлановыеМероприятияСрезПоследних.ДатаНачала КАК ДатаНачала,
	               |	торо_ПлановыеМероприятияСрезПоследних.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ПлановыеМероприятияСрезПоследних.Регистратор КАК Регистратор,
	               |	торо_ПлановыеМероприятияСрезПоследних.ВидМероприятия КАК ВидМероприятия,
	               |	торо_ПлановыеМероприятияСрезПоследних.СписокОбъектов КАК СписокОбъектов,
	               |	торо_ПлановыеМероприятияСрезПоследних.ID КАК ID
	               |ПОМЕСТИТЬ ВТ_ПлановыеМероприятия
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних(
	               |			,
	               |			СписокОбъектов В
	               |				(ВЫБРАТЬ
	               |					СписокОбъектовРМ.СписокОбъектов КАК СписокОбъектов
	               |				ИЗ
	               |					СписокОбъектовРМ КАК СписокОбъектовРМ)) КАК торо_ПлановыеМероприятияСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ПлановыеМероприятияСрезПоследних.Отменен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ПлановыеМероприятия.ДатаНачала КАК ДатаНачала,
	               |	ВТ_ПлановыеМероприятия.ДатаОкончания КАК ДатаОкончания,
	               |	ВТ_ПлановыеМероприятия.Регистратор КАК Регистратор,
	               |	ВТ_ПлановыеМероприятия.ВидМероприятия КАК ВидМероприятия,
	               |	ВТ_ПлановыеМероприятия.СписокОбъектов КАК СписокОбъектов,
	               |	ВТ_ПлановыеМероприятия.ID КАК ID
	               |ИЗ
	               |	ВТ_ПлановыеМероприятия КАК ВТ_ПлановыеМероприятия
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	               |		ПО ВТ_ПлановыеМероприятия.ID = торо_ОбщиеДанныеПоРемонтам.IDРемонта
	               |ГДЕ
	               |	НЕ торо_ОбщиеДанныеПоРемонтам.Завершен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_ПлановыеМероприятия.ВидМероприятия.Наименование,
	               |	ДатаНачала";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
	Результат = Запрос.Выполнить();
		
	Если Не Результат.Пустой() Тогда
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпПредстоящиеРМ"),ТабДок);	
		Выборка = Результат.Выбрать();
		Область = Макет.ПолучитьОбласть("ТблПредстоящиеРМ");
		
		Пока Выборка.Следующий() Цикл
			Область.Параметры.Заполнить(Выборка);
			Область.Параметры.ВидМероприятия = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(Выборка.ВидМероприятия);
			ТабДок.Вывести(Область, Выборка.Уровень()); 
		КонецЦикла;
	КонецЕсли;


	//////////////////////////////////////////////////////////////////////////	
	// Область "Наряды на регламентные мероприятия"
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаРегламентноеМероприятие") Тогда 
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("НарядыРМ"), ТабДок);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов КАК СписокОбъектов
		               |ПОМЕСТИТЬ СписокОбъектовРМ
		               |ИЗ
		               |	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
		               |ГДЕ
		               |	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта = &ОбъектРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка КАК Ссылка,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.Дата КАК Дата,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.Номер КАК Номер,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ВидРемонтныхРабот КАК ВидМероприятия,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаНачала КАК ДатаНачала,
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
		               |ГДЕ
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ОбъектРемонта В
		               |			(ВЫБРАТЬ
		               |				СписокОбъектовРМ.СписокОбъектов КАК СписокОбъектов
		               |			ИЗ
		               |				СписокОбъектовРМ КАК СписокОбъектовРМ)
		               |	И торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.Проведен
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.Дата";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпНарядыРМ"), Табдок);
			Область = Макет.ПолучитьОбласть("ТблНарядыРМ");
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИВывестиОбласть(Область, Табдок, Выборка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////	
	// Область "Выполненные регламентные мероприятия"
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ВыполненныеРМ"), ТабДок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов КАК СписокОбъектов
	               |ПОМЕСТИТЬ СписокОбъектовРМ
	               |ИЗ
	               |	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
	               |ГДЕ
	               |	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта = &ОбъектРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СписокОбъектов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеМероприятия.ВидМероприятия КАК ВидМероприятия,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыНачала.ДатаНачала, торо_ЗавершенныеМероприятия.ДатаОкончания) КАК ПланДатаНачалаРемонтныхРабот,
	               |	ЕСТЬNULL(торо_АктуальныеПлановыеДатыНачала.ДатаОкончания, торо_ЗавершенныеМероприятия.ДатаОкончания) КАК ПланДатаЗавершенияРемонтныхРабот,
	               |	ЕСТЬNULL(торо_СвернутыеФактическиеДатыРемонтов.ДатаНачала, торо_ЗавершенныеМероприятия.ДатаОкончания) КАК ФактДатаНачалаРемонтныхРабот,
	               |	ЕСТЬNULL(торо_СвернутыеФактическиеДатыРемонтов.ДатаОкончания, торо_ЗавершенныеМероприятия.ДатаОкончания) КАК ФактДатаЗавершенияРемонтныхРабот,
	               |	торо_ЗавершенныеМероприятия.Регистратор КАК Документ
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеМероприятия КАК торо_ЗавершенныеМероприятия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыНачала
	               |		ПО торо_ЗавершенныеМероприятия.ID = торо_АктуальныеПлановыеДатыНачала.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СвернутыеФактическиеДатыРемонтов КАК торо_СвернутыеФактическиеДатыРемонтов
	               |		ПО торо_ЗавершенныеМероприятия.ID = торо_СвернутыеФактическиеДатыРемонтов.IDРемонта
	               |ГДЕ
	               |	торо_ЗавершенныеМероприятия.СписокОбъектов В
	               |			(ВЫБРАТЬ
	               |				СписокОбъектовРМ.СписокОбъектов КАК СписокОбъектов
	               |			ИЗ
	               |				СписокОбъектовРМ КАК СписокОбъектовРМ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	торо_ЗавершенныеМероприятия.ВидМероприятия,
	               |	ПланДатаНачалаРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпВыполненныеРМ"),ТабДок);
		Выборка = Результат.Выбрать();
		Область = Макет.ПолучитьОбласть("ТблВыполненныеРМ");
		
		Пока Выборка.Следующий() Цикл
			Область.Параметры.Заполнить(Выборка);
			Область.Параметры.ВидМероприятия = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(Выборка.ВидМероприятия);
			ТабДок.Вывести(Область, Выборка.Уровень()); 
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры 

Процедура ПечатьПаспортаОР_НормативныеРемонты(ТабДок, Макет, ЗаголовокИОсновныеДанные)
	
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("НормативныеРемонты"),ТабДок);
	
	// Область "ТаблНормативныеРемонты" 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
	|	торо_НормативныеРемонтыОборудования.ВидРемонта,
	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	|	торо_НормативныеРемонтыОборудования.СпособПланирования,
	|	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	|	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета
	|ПОМЕСТИТЬ НормРемонты
	|ИЗ
	|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОР
	|	И торо_НормативныеРемонтыОборудования.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта,
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта
	|ПОМЕСТИТЬ ПредшРемонты
	|ИЗ
	|	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
	|ГДЕ
	|	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта = &ОР
	|	И торо_ПредшествующиеНормативныеРемонтыОборудования.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница
	|ПОМЕСТИТЬ ПараметрыЗамещения
	|ИЗ
	|	РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
	|ГДЕ
	|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта = &ОР
	|	И торо_ПараметрыЗамещенияПланированияРемонтныхРабот.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НормРемонты.ВидРемонта,
	|	НормРемонты.НормативныйРемонт,
	|	НормРемонты.СпособПланирования,
	|	НормРемонты.ГрафикРемонтныхРабот,
	|	НормРемонты.СпособВыполнения,
	|	НормРемонты.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	НормРемонты.СпособУчетаДатыОтсчета,
	|	""Предшеств"" КАК Груп,
	|	NULL КАК ЗамещаемыйВидРемонта,
	|	NULL КАК НачальнаяГраница,
	|	NULL КАК КонечнаяГраница,
	|	NULL КАК СпособЗамещения,
	|	ПредшРемонты.ПредшествующийВидРемонта
	|ПОМЕСТИТЬ ИтогТаб
	|ИЗ
	|	НормРемонты КАК НормРемонты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредшРемонты КАК ПредшРемонты
	|		ПО НормРемонты.ОбъектРемонта = ПредшРемонты.ОбъектРемонта
	|			И НормРемонты.ВидРемонта = ПредшРемонты.ВидРемонта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НормРемонты.ВидРемонта,
	|	НормРемонты.НормативныйРемонт,
	|	НормРемонты.СпособПланирования,
	|	НормРемонты.ГрафикРемонтныхРабот,
	|	НормРемонты.СпособВыполнения,
	|	НормРемонты.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	НормРемонты.СпособУчетаДатыОтсчета,
	|	""Зам"",
	|	ПараметрыЗамещения.ЗамещаемыйВидРемонта,
	|	ПараметрыЗамещения.НачальнаяГраница,
	|	ПараметрыЗамещения.КонечнаяГраница,
	|	ПараметрыЗамещения.СпособЗамещения,
	|	NULL
	|ИЗ
	|	НормРемонты КАК НормРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗамещения КАК ПараметрыЗамещения
	|		ПО НормРемонты.ОбъектРемонта = ПараметрыЗамещения.ОбъектРемонта
	|			И НормРемонты.ВидРемонта = ПараметрыЗамещения.ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогТаб.ВидРемонта КАК ВидРемонта,
	|	ИтогТаб.НормативныйРемонт КАК НормативныйРемонт,
	|	ИтогТаб.СпособПланирования КАК СпособПланирования,
	|	ИтогТаб.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот,
	|	ИтогТаб.СпособВыполнения КАК СпособВыполнения,
	|	ИтогТаб.НеИспользоватьВПланированииДатуВводаВЭксплуатацию КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	ИтогТаб.СпособУчетаДатыОтсчета КАК СпособУчетаДатыОтсчета,
	|	ИтогТаб.Груп КАК Груп,
	|	ИтогТаб.ЗамещаемыйВидРемонта,
	|	ИтогТаб.НачальнаяГраница,
	|	ИтогТаб.КонечнаяГраница,
	|	ИтогТаб.СпособЗамещения,
	|	ИтогТаб.ПредшествующийВидРемонта
	|ИЗ
	|	ИтогТаб КАК ИтогТаб
	|ИТОГИ
	|	МИНИМУМ(НормативныйРемонт),
	|	МИНИМУМ(СпособПланирования),
	|	МИНИМУМ(ГрафикРемонтныхРабот),
	|	МИНИМУМ(СпособВыполнения),
	|	МИНИМУМ(НеИспользоватьВПланированииДатуВводаВЭксплуатацию),
	|	МИНИМУМ(СпособУчетаДатыОтсчета)
	|ПО
	|	ВидРемонта,
	|	Груп";
	
	Запрос.УстановитьПараметр("ОР", ЗаголовокИОсновныеДанные.Ссылка);
	
	Результат = Запрос.Выполнить();
	ВыборкаПервогоУровня = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВидНормативногоРемонта = Макет.ПолучитьОбласть     ("ВидНормативногоРемонта");
	ЗаголовокНормативныеРемонты = Макет.ПолучитьОбласть("ЗаголовокНормативныеРемонты");
	ТаблНормативныеРемонты = Макет.ПолучитьОбласть     ("ТаблНормативныеРемонты");
	
	Пока ВыборкаПервогоУровня.Следующий() Цикл
		
		ЗаполнитьИВывестиОбласть(ВидНормативногоРемонта,ТабДок,ВыборкаПервогоУровня);
		ТабДок.Вывести(ЗаголовокНормативныеРемонты);
		ЗаполнитьИВывестиОбласть(ТаблНормативныеРемонты,ТабДок,ВыборкаПервогоУровня);
		
		ВыборкаВторогоУровня = ВыборкаПервогоУровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаВторогоУровня.Следующий() Цикл 
			Если ВыборкаВторогоУровня.Груп = "Предшеств" Тогда 
				ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокПредшРем"),ТабДок);
				ТаблПредшРем = Макет.ПолучитьОбласть("ТаблПредшРем");
				ВыборкаТретьегоУровня = ВыборкаВторогоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				Пока ВыборкаТретьегоУровня.Следующий() Цикл 
					ЗаполнитьИВывестиОбласть(ТаблПредшРем,ТабДок,ВыборкаТретьегоУровня);
				КонецЦикла;
				
			ИначеЕсли ВыборкаВторогоУровня.Груп = "Зам" Тогда 
				ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокЗамещРем"),ТабДок);
				ТаблЗамещРем = Макет.ПолучитьОбласть("ТаблЗамещРем");
				ВыборкаТретьегоУровня = ВыборкаВторогоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				Пока ВыборкаТретьегоУровня.Следующий() Цикл 
					ЗаполнитьИВывестиОбласть(ТаблЗамещРем,ТабДок,ВыборкаТретьегоУровня);
				КонецЦикла; 
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьПаспортаОР_Запчасти(ТабДок, Макет, ЗаголовокИОсновныеДанные)
	
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	
	// Область "ЗапчастиШапка"
	Если ИспользоватьХарактеристики Тогда
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗапчастиШапка"),ТабДок);
	Иначе
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗапчастиШапкаФО"),ТабДок);
	КонецЕсли;
	// Область "ЗапчастиСтрока" 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_Запчасти.Номенклатура КАК ЗапчастиНоменклатура,
	|	торо_Запчасти.Качество КАК ЗапчастиКачество,
	|	торо_Запчасти.Характеристика КАК ЗапчастиХарактеристика,
	|	торо_Запчасти.Количество КАК ЗапчастиКоличество
	|ИЗ
	|	РегистрСведений.торо_Запчасти КАК торо_Запчасти
	|ГДЕ
	|	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ИспользоватьХарактеристики Тогда
			ОбластьЗапчастиСтрока = Макет.ПолучитьОбласть("ЗапчастиСтрока");
		Иначе
			ОбластьЗапчастиСтрока = Макет.ПолучитьОбласть("ЗапчастиСтрокаФО");
		КонецЕсли;
		ОбластьЗапчастиСтрока.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗапчастиСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьПаспортаОР_СоставТехКарт(ТабДок, Макет, ЗаголовокИОсновныеДанные)
	
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТехКартыРемонта"),ТабДок);
	
	//////////////////////////////////////////////////////////////////////////	
	
	// Область "ТаблВидыРемонта" 
	РезультатыЗапроса = ПолучитьВидыРемонта(ЗаголовокИОсновныеДанные.Ссылка);
	
	ЗаголовокВидыРемонта = Макет.ПолучитьОбласть("ЗаголовокВидыРемонта");
	ТаблВидыРемонта = Макет.ПолучитьОбласть("ТаблВидыРемонта");
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	
	МассивВыведенныхТК = Новый Массив;
	ВыборкаПервогоУровня = РезультатыЗапроса.РезультатЗапроса;
		
	Пока ВыборкаПервогоУровня.Следующий() Цикл
	
		ТабДок.Вывести(ЗаголовокВидыРемонта);
		
		ЗаполнитьИВывестиОбласть(ТаблВидыРемонта,ТабДок,ВыборкаПервогоУровня);
		
		МассивВыведенныхТК.Добавить(ВыборкаПервогоУровня.НормативныйРемонт);
		
		ПодготовитьВложенныеТК(РезультатыЗапроса.ТаблицаВложенныхТК, ВыборкаПервогоУровня.НормативныйРемонт, ВыборкаПервогоУровня.ВидРемонта, Макет, Табдок);
		
		Если ИспользоватьХарактеристики Тогда
			ЗаголовокИнструкции = Макет.ПолучитьОбласть("ЗаголовокИнструкции");			
			ЗаголовокНоменклатура = Макет.ПолучитьОбласть("ЗаголовокНоменклатураФО"); 
		Иначе
			ЗаголовокИнструкции = Макет.ПолучитьОбласть("ЗаголовокИнструкции");			
			ЗаголовокНоменклатура = Макет.ПолучитьОбласть("ЗаголовокНоменклатура"); 
		КонецЕсли;
		
		ВыборкаВторогоУровня = ВыборкаПервогоУровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаВторогоУровня.Следующий() Цикл 						
			
			Если ВыборкаВторогоУровня.Операция <> "ДокИУслуги" Тогда
				ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТаблСписокОпераций"),ТабДок,ВыборкаВторогоУровня);
				ВыборкаТретьегоУровня = ВыборкаВторогоУровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);			
					
				Пока ВыборкаТретьегоУровня.Следующий() Цикл 
						
					Если ВыборкаТретьегоУровня.ДопКолонка = "Материалы" Тогда
						Если ИспользоватьХарактеристики Тогда 
							ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокМатерЗатратыФО"),ТабДок);
						Иначе
							ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокМатерЗатраты"),ТабДок);
						КонецЕсли;
						ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
						
						Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
							Если ИспользоватьХарактеристики Тогда 
								ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТаблМатерЗатратыФО"),ТабДок, ВыборкаЧетвертогоУровня);
							Иначе 
								ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТаблМатерЗатраты"),ТабДок, ВыборкаЧетвертогоУровня);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
							
					Если ВыборкаТретьегоУровня.ДопКолонка = "Трудозатраты" Тогда
						ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокКвалификация"),ТабДок); 												
						ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);						
						
						Пока ВыборкаЧетвертогоУровня.Следующий() Цикл
							Если ЗначениеЗаполнено(ВыборкаЧетвертогоУровня.Квалификация)Тогда 
								Область = Макет.ПолучитьОбласть("ТаблКвалификация");
								ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаЧетвертогоУровня);
								Область.Параметры.ВремяРаботы = ПреобразоватьСекундыВоВремя(ВыборкаЧетвертогоУровня.ВремяРаботы);
								Табдок.Вывести(Область);
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;
						
					Если ВыборкаТретьегоУровня.ДопКолонка = "Инструменты" Тогда
						ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокИнструменты"),ТабДок);									
						ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой); 						
						ТаблИнструменты = Макет.ПолучитьОбласть("ТаблИнструменты");
						Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
							Если  ЗначениеЗаполнено(ВыборкаЧетвертогоУровня.Инструмент)Тогда 
								ЗаполнитьИВывестиОбласть(ТаблИнструменты, ТабДок, ВыборкаЧетвертогоУровня);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ВыборкаТретьегоУровня.ДопКолонка = "Показатели" Тогда
						
						ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
						ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокИзмерПоказатели"),ТабДок); 					
						ТаблИзмерПоказатели = Макет.ПолучитьОбласть("ТаблИзмерПоказатели");
						
						Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
							Если  ЗначениеЗаполнено(ВыборкаЧетвертогоУровня.Показатель)Тогда
								ЗаполнитьИВывестиОбласть(ТаблИзмерПоказатели,ТабДок,ВыборкаЧетвертогоУровня);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
						
				КонецЦикла;
					
				Граница = Макет.ПолучитьОбласть("Граница");
				ТабДок.Вывести(Граница);
				
			Иначе  					               
					
				ВыборкаТретьегоУровня = ВыборкаВторогоУровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				Пока ВыборкаТретьегоУровня.Следующий() Цикл 
					
					Если ВыборкаТретьегоУровня.ДопКолонка = "Номенклатура" Тогда
						ТабДок.Вывести(ЗаголовокНоменклатура); 
						ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
						Пока ВыборкаЧетвертогоУровня.Следующий() Цикл
							Если ИспользоватьХарактеристики Тогда
								ТаблНоменклитура = Макет.ПолучитьОбласть("ТаблНоменклитураФО");	
							Иначе 
								ТаблНоменклитура = Макет.ПолучитьОбласть("ТаблНоменклитура");
							КонецЕсли;
							ТаблНоменклитура.Параметры.Заполнить(ВыборкаЧетвертогоУровня);
							ТабДок.Вывести(ТаблНоменклитура, ВыборкаЧетвертогоУровня.Уровень()); 
						КонецЦикла;
					КонецЕсли;
					
					Если ВыборкаТретьегоУровня.ДопКолонка = "МерыБезопасности" Тогда
						ТабДок.Вывести(ЗаголовокИнструкции); 
						ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
						Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
							ТаблИнструкции = Макет.ПолучитьОбласть("ТаблИнструкции");
							ТаблИнструкции.Параметры.Заполнить(ВыборкаЧетвертогоУровня);
							ТабДок.Вывести(ТаблИнструкции, ВыборкаЧетвертогоУровня.Уровень()); 
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				Граница = Макет.ПолучитьОбласть("Граница2");
				ТабДок.Вывести(Граница);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВывестиТКБезОпераций(МассивВыведенныхТК, РезультатыЗапроса.ТаблицаВложенныхТК, Макет, ТабДок, ЗаголовокВидыРемонта, ТаблВидыРемонта);
	
КонецПроцедуры

Процедура ВывестиТКБезОпераций(МассивВыведенныхТК, ТаблицаВложенныхТК, Макет, ТабДок, ЗаголовокВидыРемонта, ТаблВидыРемонта)
	Для Каждого Значение Из МассивВыведенныхТК Цикл
		ВыведенныеТК = ТаблицаВложенныхТК.НайтиСтроки(Новый Структура("Владелец", Значение));
		Для Каждого ЭлементНаУдаление Из ВыведенныеТК Цикл
			ТаблицаВложенныхТК.Удалить(ЭлементНаУдаление);
		КонецЦикла;
	КонецЦикла;
	
	ОставшиесяТК = Новый ТаблицаЗначений;
	ОставшиесяТК.Колонки.Добавить("НормативныйРемонт", Новый ОписаниеТипов("СправочникСсылка.торо_ИдентификаторыТехКарт"));
	ОставшиесяТК.Колонки.Добавить("ВидРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ОставшиесяТК.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Значение Из ТаблицаВложенныхТК Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НормативныйРемонт", Значение.Владелец);
		СтруктураПоиска.Вставить("ВидРемонта", Значение.ВидРемонта);
		Если ОставшиесяТК.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			СтрокаОставшихся = ОставшиесяТК.Добавить();
			СтрокаОставшихся.НормативныйРемонт = Значение.Владелец;
			СтрокаОставшихся.ВидРемонта = Значение.ВидРемонта;
			СтрокаОставшихся.Сумма = "-";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Значение Из ОставшиесяТК Цикл
		ТабДок.Вывести(ЗаголовокВидыРемонта);
		ЗаполнитьИВывестиОбласть(ТаблВидыРемонта,ТабДок,Значение);
		
		ПодготовитьВложенныеТК(ТаблицаВложенныхТК, Значение.НормативныйРемонт, Значение.ВидРемонта, Макет, Табдок);
	КонецЦикла;
КонецПроцедуры

Процедура ПодготовитьВложенныеТК(ТаблицаВложенныхТК, Владелец, ВидРемонта, Макет, Табдок)
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Владелец", Владелец);
	СтруктураПоиска.Вставить("ВидРемонта", ВидРемонта);
	МассивВложенныхТК = ТаблицаВложенныхТК.НайтиСтроки(СтруктураПоиска);
	Если МассивВложенныхТК.Количество() > 0 Тогда
		ШапкаВложенныхТК = Макет.ПолучитьОбласть("ВложенныеТКШапка");
		ТабДок.Вывести(ШапкаВложенныхТК);
				
		ВывестиВложенныеТК(МассивВложенныхТК, Макет, Табдок);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиВложенныеТК(МассивВложенныхТК, Макет, Табдок)
	Для Каждого Значение Из МассивВложенныхТК Цикл
		ВложенныеТКСтроки = Макет.ПолучитьОбласть("ВложенныеТКСтроки");
		ВложенныеТКСтроки.Параметры.НаименованиеТК = Значение.НормативныйРемонт;
		ТабДок.Вывести(ВложенныеТКСтроки);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьВидыРемонта(ОР)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт
	               |ПОМЕСТИТЬ ВсеНормативы
	               |ИЗ
	               |	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |ГДЕ
	               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОР
	               |	И торо_НормативныеРемонтыОборудования.Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКарты_СписокОпераций.Ссылка КАК ТехКарта,
	               |	торо_ТехКарты_СписокОпераций.Продолжительность КАК Продолжительность,
	               |	торо_ТехКарты_СписокОпераций.ID КАК ID,
	               |	ВЫБОР
	               |		КОГДА торо_ТехКарты_СписокОпераций.Операция.НаименованиеПолное = """"
	               |			ТОГДА торо_ТехКарты_СписокОпераций.Операция.Наименование
	               |		ИНАЧЕ торо_ТехКарты_СписокОпераций.Операция.НаименованиеПолное
	               |	КОНЕЦ КАК Операция,
	               |	торо_ТехКарты_СписокОпераций.Ссылка КАК Ссылка,
	               |	торо_ТехКарты_СписокОпераций.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ТехКарты_СписокОпераций.Количество КАК Кратность,
	               |	ВсеНормативы.ВидРемонта КАК ВидРемонта,
	               |	ВсеНормативы.НормативныйРемонт КАК НормативныйРемонт
	               |ПОМЕСТИТЬ СписокОпераций
	               |ИЗ
	               |	ВсеНормативы КАК ВсеНормативы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(
	               |				,
	               |				ИдентификаторТехКарты В
	               |					(ВЫБРАТЬ
	               |						ВсеНормативы.НормативныйРемонт
	               |					ИЗ
	               |						ВсеНормативы КАК ВсеНормативы)) КАК торо_ВерсииТехКартСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты_СписокОпераций
	               |			ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты_СписокОпераций.Ссылка
	               |		ПО ВсеНормативы.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	СписокОпераций.ВидРемонта КАК ВидРемонта,
	               |	СписокОпераций.НормативныйРемонт КАК НормативныйРемонт,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
	               |	ИСТИНА КАК Приоритет,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения
	               |ПОМЕСТИТЬ МинимПриоритеты
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	               |		ПО СписокОпераций.ВидРемонта = торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта
	               |			И (торо_НормыЗапчастейНаОбъектыРемонта.Приоритет)
	               |ГДЕ
	               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.ВидРемонта КАК ВидРемонта,
	               |	СписокОпераций.НормативныйРемонт КАК НормативныйРемонт,
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокОпераций.Продолжительность КАК Продолжительность,
	               |	СписокОпераций.СпособВыполнения КАК СпособВыполнения,
	               |	""Материалы"" КАК ДопКолонка,
	               |	торо_РемонтыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	               |	торо_РемонтыМатериальныеЗатраты.КоличествоУпаковок КАК Количество,
	               |	торо_РемонтыМатериальныеЗатраты.Характеристика КАК Характеристика,
	               |	ВЫБОР
	               |		КОГДА торо_РемонтыМатериальныеЗатраты.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА торо_РемонтыМатериальныеЗатраты.Номенклатура.ЕдиницаИзмерения
	               |		ИНАЧЕ торо_РемонтыМатериальныеЗатраты.Упаковка
	               |	КОНЕЦ КАК ЕдиницаИзмерения,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * торо_РемонтыМатериальныеЗатраты.Количество * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК Сумма,
	               |	NULL КАК Квалификация,
	               |	NULL КАК ВремяРаботы,
	               |	NULL КАК Инструмент,
	               |	NULL КАК Показатель,
	               |	NULL КАК МерыБезопасности,
	               |	NULL КАК НомерСтроки
	               |ИЗ
	               |	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_РемонтыМатериальныеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_РемонтыМатериальныеЗатраты.Ссылка = СписокОпераций.Ссылка
	               |			И торо_РемонтыМатериальныеЗатраты.ID = СписокОпераций.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	               |			ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
	               |		ПО торо_РемонтыМатериальныеЗатраты.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			И торо_РемонтыМатериальныеЗатраты.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СписокОпераций.ВидРемонта,
	               |	СписокОпераций.НормативныйРемонт,
	               |	СписокОпераций.Операция,
	               |	СписокОпераций.Продолжительность,
	               |	СписокОпераций.СпособВыполнения,
	               |	""Трудозатраты"",
	               |	NULL,
	               |	торо_РемонтыТрудовыеЗатраты.Количество,
	               |	NULL,
	               |	NULL,
	               |	ВЫРАЗИТЬ(торо_СтоимостьЧасаКвалификации.Стоимость * торо_РемонтыТрудовыеЗатраты.Количество * торо_РемонтыТрудовыеЗатраты.ВремяРаботы / 3600 * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(10, 2)),
	               |	торо_РемонтыТрудовыеЗатраты.Квалификация,
	               |	торо_РемонтыТрудовыеЗатраты.ВремяРаботы,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_РемонтыТрудовыеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_РемонтыТрудовыеЗатраты.Ссылка = СписокОпераций.Ссылка
	               |			И торо_РемонтыТрудовыеЗатраты.ID = СписокОпераций.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации.СрезПоследних КАК торо_СтоимостьЧасаКвалификации
	               |		ПО торо_РемонтыТрудовыеЗатраты.Квалификация = торо_СтоимостьЧасаКвалификации.Квалификация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	               |		ПО (торо_СтоимостьЧасаКвалификации.Валюта = КурсыВалютСрезПоследних.Валюта)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СписокОпераций.ВидРемонта,
	               |	СписокОпераций.НормативныйРемонт,
	               |	СписокОпераций.Операция,
	               |	СписокОпераций.Продолжительность,
	               |	СписокОпераций.СпособВыполнения,
	               |	""Инструменты"",
	               |	NULL,
	               |	торо_РемонтыИнструментыИТехника.КоличествоУпаковок,
	               |	NULL,
	               |	ВЫБОР
	               |		КОГДА торо_РемонтыИнструментыИТехника.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА торо_РемонтыИнструментыИТехника.Инструмент.ЕдиницаИзмерения
	               |		ИНАЧЕ торо_РемонтыИнструментыИТехника.Упаковка
	               |	КОНЕЦ,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	торо_РемонтыИнструментыИТехника.Инструмент,
	               |	NULL,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	Справочник.торо_ТехКарты.ИнструментыИТехника КАК торо_РемонтыИнструментыИТехника
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_РемонтыИнструментыИТехника.Ссылка = СписокОпераций.Ссылка
	               |			И торо_РемонтыИнструментыИТехника.ID = СписокОпераций.ID
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СписокОпераций.ВидРемонта,
	               |	СписокОпераций.НормативныйРемонт,
	               |	СписокОпераций.Операция,
	               |	СписокОпераций.Продолжительность,
	               |	СписокОпераций.СпособВыполнения,
	               |	""Показатели"",
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	торо_РемонтыИзмеряемыеПоказатели.Показатель,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	Справочник.торо_ТехКарты.ИзмеряемыеПоказатели КАК торо_РемонтыИзмеряемыеПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_РемонтыИзмеряемыеПоказатели.Ссылка = СписокОпераций.Ссылка
	               |			И торо_РемонтыИзмеряемыеПоказатели.ID = СписокОпераций.ID
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СписокОпераций.ВидРемонта,
	               |	СписокОпераций.НормативныйРемонт,
	               |	""ДокИУслуги"",
	               |	NULL,
	               |	NULL,
	               |	""МерыБезопасности"",
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	торо_ТехКартыМерыБезопасности.МераБезопасности,
	               |	торо_ТехКартыМерыБезопасности.НомерСтроки
	               |ИЗ
	               |	Справочник.торо_ТехКарты.МерыБезопасности КАК торо_ТехКартыМерыБезопасности
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_ТехКартыМерыБезопасности.Ссылка = СписокОпераций.Ссылка
	               |			И торо_ТехКартыМерыБезопасности.ID = СписокОпераций.ID
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	МинимПриоритеты.ВидРемонта,
	               |	МинимПриоритеты.НормативныйРемонт,
	               |	""ДокИУслуги"",
	               |	NULL,
	               |	NULL,
	               |	""Номенклатура"",
	               |	МинимПриоритеты.Номенклатура,
	               |	МинимПриоритеты.Количество,
	               |	МинимПриоритеты.Характеристика,
	               |	МинимПриоритеты.НоменклатураЕдиницаИзмерения,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * МинимПриоритеты.Количество * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1),
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	МинимПриоритеты КАК МинимПриоритеты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	               |			ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
	               |		ПО МинимПриоритеты.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			И МинимПриоритеты.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	               |ИТОГИ
	               |	МАКСИМУМ(НормативныйРемонт),
	               |	МАКСИМУМ(Продолжительность),
	               |	МАКСИМУМ(СпособВыполнения),
	               |	СУММА(Сумма)
	               |ПО
	               |	ВидРемонта,
	               |	Операция,
	               |	ДопКолонка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(торо_ТехКарты_СписокОпераций.Операция) = ТИП(СПравочник.торо_ИдентификаторыТехКарт)
	               |			ТОГДА торо_ТехКарты_СписокОпераций.Операция
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК НормативныйРемонт,
	               |	ВсеНормативы.ВидРемонта КАК ВидРемонта,
	               |	ВсеНормативы.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВсеНормативы.НормативныйРемонт КАК Владелец
	               |ПОМЕСТИТЬ СписокТКПодготовка
	               |ИЗ
	               |	ВсеНормативы КАК ВсеНормативы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(
	               |				,
	               |				ИдентификаторТехКарты В
	               |					(ВЫБРАТЬ
	               |						ВсеНормативы.НормативныйРемонт
	               |					ИЗ
	               |						ВсеНормативы КАК ВсеНормативы)) КАК торо_ВерсииТехКартСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты_СписокОпераций
	               |			ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты_СписокОпераций.Ссылка
	               |		ПО ВсеНормативы.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокТКПодготовка.НормативныйРемонт КАК НормативныйРемонт,
	               |	СписокТКПодготовка.ВидРемонта КАК ВидРемонта,
	               |	СписокТКПодготовка.ОбъектРемонта КАК ОбъектРемонта,
	               |	СписокТКПодготовка.Владелец КАК Владелец
	               |ИЗ
	               |	СписокТКПодготовка КАК СписокТКПодготовка
	               |ГДЕ
	               |	НЕ СписокТКПодготовка.НормативныйРемонт ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ОР", ОР);
	Запрос.УстановитьПараметр("ВидЦены", Константы.торо_ТипЦеныДляРасчетаСебестоимостиРемонта.Получить());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПервогоУровня = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ВыборкаТК = Результат[5].Выгрузить();

	
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("РезультатЗапроса", ВыборкаПервогоУровня);
	СтруктураВозврата.Вставить("ТаблицаВложенныхТК", ВыборкаТК);
	Возврат СтруктураВозврата;
КонецФункции

Процедура ПечатьПаспортаОР_КоэффициентыРемонтныхОсобенностей(ТабДок, Макет, ЗаголовокИОсновныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.Период КАК ДатаВвода,
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента КАК ВидКоэффициента,
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ЗначениеКоэффициента,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.Рассчитываемый,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ЗависитОтНаработки,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.СчитатьВозрастОтДатыИзготовления,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьГрафикРаботыОборудования,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьПростоиОборудования,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ПараметрНаработки
	|ИЗ
	|	РегистрСведений.торо_ЗначенияКоэффициентовРемонтныхОсобенностей.СрезПоследних(
	|			,
	|			ОбъектРемонта = &ОбъектРемонта
	|				И Использование) КАК торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ВидыКоэффициентовРемонтныхОсобенностей КАК торо_ВидыКоэффициентовРемонтныхОсобенностей
	|		ПО торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента = торо_ВидыКоэффициентовРемонтныхОсобенностей.Ссылка
	|ГДЕ
	|	НЕ торо_ВидыКоэффициентовРемонтныхОсобенностей.ПометкаУдаления";
	Запрос.УстановитьПараметр("ОбъектРемонта", ЗаголовокИОсновныеДанные.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаКоэффициентов = РезультатЗапроса.Выгрузить().СкопироватьКолонки("ДатаВвода,ВидКоэффициента, ЗначениеКоэффициента");
	ТаблицаКоэффициентов.Колонки.Добавить("Коэффициент");
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Рассчитываемый Тогда
			Если Выборка.ЗависитОтНаработки Тогда
				
				НаработкаОР = торо_РаботаСНаработкой.ЗначениеНаработкиНаДатуСУчетомПлана(ЗаголовокИОсновныеДанные.Ссылка, Выборка.ПараметрНаработки, Выборка.УчитыватьПростоиОборудования);
				Если НЕ НаработкаОР = Неопределено Тогда
					СтруктураКоэффициент = торо_РаботаСНормативамиСервер.ПолучитьРассчитываемыйКоэффициентРемонтныхОсобенностей(НаработкаОР, Выборка.ВидКоэффициента);
					Если НЕ СтруктураКоэффициент = Неопределено Тогда
						
						НС = ТаблицаКоэффициентов.Добавить();
						НС.ДатаВвода = Выборка.ДатаВвода;
						НС.ВидКоэффициента = Выборка.ВидКоэффициента;
						НС.ЗначениеКоэффициента = СтруктураКоэффициент.ЗначениеКоэффициента;
						НС.Коэффициент = СтруктураКоэффициент.Коэффициент;
						
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Если Выборка.УчитыватьГрафикРаботыОборудования Тогда
					ВозрастОР = торо_РаботаСНормативамиСервер.ВычислитьВремяРаботыОборудованияСУчетомГрафика(ЗаголовокИОсновныеДанные.Ссылка,Выборка.СчитатьВозрастОтДатыИзготовления);	
				Иначе
					Если Выборка.СчитатьВозрастОтДатыИзготовления Тогда
						ВозрастОР = Год(ТекущаяДата()) - Год(ЗаголовокИОсновныеДанные.ДатаВыпуска) + 1;
					Иначе
						ВозрастОР = Год(ТекущаяДата()) - Год(ЗаголовокИОсновныеДанные.ДатаВводаВЭксплуатацию) + 1;
					КонецЕсли;
				КонецЕсли;
				
				СтруктураКоэффициент = торо_РаботаСНормативамиСервер.ПолучитьРассчитываемыйКоэффициентРемонтныхОсобенностей(ВозрастОР, Выборка.ВидКоэффициента);
				Если НЕ СтруктураКоэффициент = Неопределено Тогда
					
					НС = ТаблицаКоэффициентов.Добавить();
					НС.ДатаВвода            = Выборка.ДатаВвода;
					НС.ВидКоэффициента      = Выборка.ВидКоэффициента;
					НС.ЗначениеКоэффициента = СтруктураКоэффициент.ЗначениеКоэффициента;
					НС.Коэффициент          = СтруктураКоэффициент.Коэффициент;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			НС = ТаблицаКоэффициентов.Добавить();
			НС.ДатаВвода            = Выборка.ДатаВвода;
			НС.ВидКоэффициента      = Выборка.ВидКоэффициента;
			НС.ЗначениеКоэффициента = Выборка.ЗначениеКоэффициента;
			НС.Коэффициент          = Выборка.ЗначениеКоэффициента.Коэффициент;
			
		КонецЕсли;
	КонецЦикла;
	
	Граница3 = Макет.ПолучитьОбласть("Граница3");
	ТабДок.Вывести(Граница3);
	
	// Заголовок
	ЗаголовокКоэфРемОсобенностей = Макет.ПолучитьОбласть("КоэффициентыРемонтныхОсобенностей");
	ТабДок.Вывести(ЗаголовокКоэфРемОсобенностей);
	
	// Шапка таблицы
	ШапкаКоэфРемОсобенностей = Макет.ПолучитьОбласть("ЗаголовокКоэфРемОсобенностей");
	ТабДок.Вывести(ШапкаКоэфРемОсобенностей);
	
	// Таблица
	Для Каждого Строка Из ТаблицаКоэффициентов Цикл
		СтрокаТаблицы = Макет.ПолучитьОбласть("ТаблКоэфРемОсобенностей");
		СтрокаТаблицы.Параметры.ДатаВвода            = Строка.ДатаВвода;
		СтрокаТаблицы.Параметры.ВидКоэффициента      = Строка.ВидКоэффициента;
		СтрокаТаблицы.Параметры.ЗначениеКоэффициента = Строка.ЗначениеКоэффициента;
		СтрокаТаблицы.Параметры.Коэффициент          = Строка.Коэффициент;
		ТабДок.Вывести(СтрокаТаблицы);
	КонецЦикла;                         
	
	Граница4 = Макет.ПолучитьОбласть("Граница4");
	ТабДок.Вывести(Граница4);
	
КонецПроцедуры

Процедура ЗаполнитьИВывестиОбласть(Область,ТабДок, ДанныеЗаполнения = Неопределено, ДатаСнятия = Неопределено)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		
		ТабДок.Вывести(Область);
		
	Иначе
		ЗаполнитьЗначенияСвойств(Область.Параметры,ДанныеЗаполнения);
		Если ДатаСнятия <> Неопределено И ТипЗнч(ДатаСнятия) = Тип("Дата") Тогда  
			Область.Параметры.ДатаСнятияСУчета = ДатаСнятия;
		КонецЕсли;
		
		// Обработка представления видов ремонта для печати
		Для Инд = 0 по Область.Параметры.Количество()-1 Цикл
			ТекПараметр = Область.Параметры.Получить(Инд);
			Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				Область.Параметры.Установить(Инд, торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ТекПараметр));
			КонецЕсли;
		КонецЦикла;
		
		ТабДок.Вывести(Область);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьСекундыВоВремя(Секунды)
	
	Часы    = Цел(Секунды / 3600);
	Минуты  = Цел((Секунды - 3600 * Часы) / 60);
	Время = ""+Часы + "час. " + Минуты + "мин.";
	Возврат(Время);
КонецФункции

Функция ПолучитьАдрес(СсылкаНаОбъектРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(торо_ОбъектыРемонтаКонтактнаяИнформация.Представление, """") КАК КонтактнаяИнформацияАдрес
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта.КонтактнаяИнформация КАК торо_ОбъектыРемонтаКонтактнаяИнформация
	               |ГДЕ
	               |	торо_ОбъектыРемонтаКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И торо_ОбъектыРемонтаКонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъектРемонта);
	Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
КонецФункции

Функция ДоступныеПечатныеРазделыПаспортаОР()
	
	Разделы = Новый Структура;
	
    Разделы.Вставить("ФлагХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения"));
	Разделы.Вставить("ФлагРегМероприятия", ПолучитьФункциональнуюОпцию("торо_ИспользоватьРегламентныеМероприятия"));
	Разделы.Вставить("ФлагКоэффициентыРемонтныхОсобенностей", ПолучитьФункциональнуюОпцию("торо_ИспользоватьКоэффициентыРемОсобенностей"));
	Разделы.Вставить("ФлагКонтролируемыеПоказатели", ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей"));
	Разделы.Вставить("ФлагНаработка", ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования"));
	Разделы.Вставить("ФлагЗапчасти", ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей"));
	
	Разделы.Вставить("ФлагОсновные", Истина);
	Разделы.Вставить("ФлагРемонты", Истина);
	Разделы.Вставить("ФлагНормативныеРемонты", Истина);
	Разделы.Вставить("ФлагТехкарты", Истина);
	Разделы.Вставить("ФлагПрикрепленныеФайлы", Истина);
	Разделы.Вставить("ФлагДополнительно", Истина);
	Разделы.Вставить("ФлагДокументация", Истина);
	
	Возврат Разделы;
	
КонецФункции	

#КонецОбласти

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	| ВЫБОР
	|	КОГДА ЭтоГруппа
	|		ТОГДА ЗначениеРазрешено(Организация)
	|			И ЗначениеРазрешено(Подразделение)
	|	КОГДА ВнешнийОбъект
	|		ТОГДА ЗначениеРазрешено(Ссылка)
	|			И ЗначениеРазрешено(Контрагент)
	|	ИНАЧЕ ЗначениеРазрешено(Ссылка)
	|		И ЗначениеРазрешено(Организация)
	|  	И ЗначениеРазрешено(Подразделение)
	| КОНЕЦ";

	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли
