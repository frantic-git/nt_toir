
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяСтруктураИерархии",
		Истина);

	ИерархияДляВводаНовыхОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	
	Если НЕ ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		ТекСтруктураИерархии = ИерархияДляВводаНовыхОР;
	КонецЕсли;
	
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	Если Не ФОИспользоватьДокументыЖЦОборудования Тогда
		Элементы.СтатусВУчете.Видимость = Ложь;
	КонецЕсли;
	
	ОбработатьИзменениеИерархииНаСервере();
	
	ПравоИнтерактивнаяПометкаУдаления = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоИнтерактивноеДобавление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.торо_ОбъектыРемонта);
	
	Элементы.СтраницыФормы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	РазрешитьПеретаскиваниеОРВИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "РазрешитьПеретаскиваниеОРВИерархии", Истина);
	
	Если ИспользоватьКартинкиТОР Тогда 
		Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.КартинкаОтображаемая";
		Элементы.ДеревоПолное.ПутьКДаннымКартинкиСтроки = "ДеревоПолное.КартинкаОтображаемая";
	Иначе 
		Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.Картинка";
		Элементы.ДеревоПолное.ПутьКДаннымКартинкиСтроки = "ДеревоПолное.Картинка";
	КонецЕсли;
	
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	Элементы.ДобавитьФМ.Видимость = ФОИспользоватьФМ И ПравоИнтерактивноеДобавление И НЕ ТекСтруктураИерархии.СтроитсяАвтоматически;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ ЗначениеЗаполнено(ИерархияДляВводаНовыхОР) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, Новый ФорматированнаяСтрока(НСтр("ru = 'Не заполнено значение константы ""Иерархия для ввода новых объектов ремонта""!'"),,,,"e1cib/app/Обработка.торо_ПанельАдминистрированияТОиР"));
		Возврат;
	КонецЕсли;
	
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандФормы(ЭтаФорма);
	торо_РаботаСИерархией20Клиент.ОбновитьПутьКОбъектуРемонта(ЭтаФорма,, ИспользоватьКартинкиТОР);
	
	ЭтаФорма.Элементы.НеОтображатьГруппы.Доступность = Не ЭтаФорма.Элементы.ФормаИерархическийПросмотр.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаПометкаУдаленияОР" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОбИзмененииПометкиУдаленияОбъектаРемонта(ЭтаФорма, Параметр, "Дерево");
		Если КореньПолногоДерева <> Неопределено Тогда 
			торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОбИзмененииПометкиУдаленияОбъектаРемонта(ЭтаФорма, Параметр, "ДеревоПолное", СтруктураПараметровИерархииПолноеДерево);
			ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
		КонецЕсли;
		Если ИспользоватьКартинкиТОР Тогда
			ОбновитьКартинкиЭлементовДереваНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписанОбъектРемонта" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОЗаписиОбъектаРемонта(ЭтаФорма, Параметр, "Дерево");
		Если КореньПолногоДерева <> Неопределено Тогда 
			торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОЗаписиОбъектаРемонта(ЭтаФорма, Параметр, "ДеревоПолное", СтруктураПараметровИерархииПолноеДерево);
			ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
		КонецЕсли;
		Если ИспользоватьКартинкиТОР Тогда
			ОбновитьКартинкиЭлементовДереваНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененПорядокОбъектаРемонта" Тогда
		Если Параметр.СтруктураИерархии = ТекСтруктураИерархии Тогда
			торо_НастройкаПорядкаЭлементовКлиент.ИзменитьПорядокЭлементаВДереве(ЭтаФорма, Параметр);
			Если КореньПолногоДерева <> Неопределено Тогда 
				торо_НастройкаПорядкаЭлементовКлиент.ИзменитьПорядокЭлементаВДереве(ЭтаФорма, Параметр, "ДеревоПолное", "");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененаСтруктураИерархииОР" Тогда
		Если Параметр = Неопределено ИЛИ Параметр = ТекСтруктураИерархии Тогда
			торо_РаботаСИерархией20Клиент.ОбновитьДеревоИерархии(ЭтаФорма, "Дерево");
			Если КореньПолногоДерева <> Неопределено Тогда 
				ОбновитьПолноеДерево(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИзменитьТекущийЭлемент(Команда)
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДеревоПолное Тогда
		торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элементы.ДеревоПолное, Ложь, ЭтаФорма);
	Иначе
		торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элементы.Список, Ложь, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаВидДерева(Команда)
	
	Если ТекущийЭлемент = Элементы.Дерево Тогда
		ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если КореньПолногоДерева <> ТекущиеДанные.Ссылка Тогда
		КореньПолногоДерева = ТекущиеДанные.Ссылка;
		торо_РаботаСИерархией20КлиентСервер.ПостроитьДеревоСКонечнымиЭлементами(ДеревоПолное, СтруктураПараметровИерархии, КореньПолногоДерева);
		СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоПолное",,Истина);
	КонецЕсли;
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДеревоПолное;
	
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтображатьГруппы(Команда)
	УстановитьОтображениеГрупп();
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаОбычныйВид(Команда)
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОбычныйВид;
	
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолноеДерево(Команда)
	
	торо_РаботаСИерархией20Клиент.ОбновитьПолноеДеревоИерархии(ЭтаФорма, СтруктураПараметровИерархииПолноеДерево);
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеДерево_Создать(Команда)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломДобавленияВПолноеДерево(Ложь, Ложь, ЭтаФорма, Ложь, "ДеревоПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеДерево_СоздатьГруппу(Команда)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломДобавленияВПолноеДерево(Ложь, Ложь, ЭтаФорма, Истина, "ДеревоПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеДерево_Скопировать(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПолное.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_РаботаСИерархией20Клиент.ПередНачаломДобавленияВПолноеДерево(Ложь, Истина, ЭтаФорма, ТекущиеДанные.ЭтоГруппа, "ДеревоПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДругойИерархии(Команда)
	
	ТекущиеДанныеДерева = Элементы.Дерево.ТекущиеДанные;
	ТекущаяСсылка = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Ссылка);
	
	торо_РаботаСИерархией20Клиент.ВыбратьИерархиюИзКоторойДобавитьОР(ЭтаФорма, ТекущаяСсылка, "Дерево", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовоеФМ(Команда)
	
	ТекущиеДанныеДерева = Элементы.Дерево.ТекущиеДанные;
	ТекущийРодитель = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Ссылка);
	ТекущаяСсылка = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Ссылка);
	ИндексКартинки = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Картинка);
	
	торо_РаботаСИерархией20Клиент.СоздатьОбъектРемонтаСОткрытиемФормы(ЭтаФорма, Ложь, Ложь, ТекущийРодитель, ТекущаяСсылка, ИндексКартинки, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИерархическийПросмотр(Команда)
	торо_РаботаСИерархией20Клиент.ИерархическийПросмотр(ЭтаФорма, НЕ ВключенИерархическийПросмотр);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПутьКОРНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРодителейОРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаСИерархией20Клиент.ТаблицаРодителейОРВыбор(ВыбраннаяСтрока, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	торо_РаботаСИерархией20Клиент.УправлениеОтборомВСписке(ЭтаФорма,,,,НеОтображатьГруппы);
	торо_РаботаСИерархией20Клиент.ПроверитьНеобходимостьОбновленияПутиКОбъектуРемонта(ЭтаФорма,, ИспользоватьКартинкиТОР);
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандДереваПриАктивизацииСтроки(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	торо_РаботаСИерархией20Клиент.ДеревоПередРазворачиванием(Дерево, Строка, СтруктураПараметровИерархии);
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере(Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	торо_РаботаСИерархией20Клиент.ОбработатьВыборОРДляДерева(ЭтаФорма,ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = РазрешитьПеретаскиваниеОРВИерархии;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	торо_РаботаСИерархией20Клиент.ОбработкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПолное

&НаКлиенте
Процедура ДеревоПолноеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеПриАктивизацииСтроки(Элемент)
	
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандПолногоДереваПриАктивизацииСтроки(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = РазрешитьПеретаскиваниеОРВИерархии;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ОбработкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Истина, "ДеревоПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	торо_РаботаСИерархией20Клиент.ОбработатьВыборОРДляДерева(ЭтаФорма,ВыбранноеЗначение,"ДеревоПолное");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		торо_РаботаСИерархией20Клиент.ВыделитьРодителяВДереве(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандСпискаПриАктивизацииСтроки(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломДобавления(Отказ, Копирование, ЭтаФорма, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаСИерархией20Клиент.СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = РазрешитьПеретаскиваниеОРВИерархии;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ОбработкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	торо_РаботаСИерархией20.СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки, ИспользоватьКартинкиТОР);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Оповещение о закрытии, вызывается при выполнении команды "Настройка иерархии".
&НаКлиенте
Процедура НастройкаИерархииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекСтруктураИерархии = ВыбранноеЗначение;
		ОбработатьИзменениеИерархииНаСервере();
		торо_РаботаСИерархией20Клиент.ОбработатьИзменениеИерархииНаКлиенте(ЭтаФорма);	
		
		Если ИспользоватьФМ() Тогда
			Элементы.ДобавитьФМ.Видимость = НЕ СтруктураПараметровИерархии.СтроитсяАвтоматически;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИерархииНаСервере()
	
	торо_РаботаСИерархией20.ОбработатьИзменениеИерархииНаСервере(ЭтаФорма, Список, Дерево, ФОИспользоватьДокументыЖЦОборудования);

	КореньПолногоДерева = Неопределено;
	ДеревоПолное.ПолучитьЭлементы().Очистить();
	
	СтруктураПараметровИерархииПолноеДерево = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметровИерархии);
	СтруктураПараметровИерархииПолноеДерево.КонечныеЭлементыВДереве = Истина;
	
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьКартинкиЭлементовПолногоДереваНаСервере()
	торо_РаботаСИерархией20.ОбновитьКартинкиЭлементовПолногоДереваНаСервере(ДеревоПолное);
КонецПроцедуры

&НаСервере 
Процедура ОбновитьКартинкиЭлементовДереваНаСервере(ИдентификаторСтроки = 0)
	торо_РаботаСИерархией20.ОбновитьКартинкиЭлементовДереваНаСервере(Дерево, ИдентификаторСтроки);
КонецПроцедуры

&НаСервере
Функция ИспользоватьФМ()
	Возврат Константы.торо_ИспользоватьФункциональныеМеста.Получить();
КонецФункции

&НаКлиенте
Процедура УстановитьОтображениеГрупп()
	НеОтображатьГруппы = Не НеОтображатьГруппы;
	Элементы.НеОтображатьГруппы.Пометка = НеОтображатьГруппы;
	
	торо_РаботаСИерархией20Клиент.УправлениеОтборомВСписке(ЭтаФорма,,,, НеОтображатьГруппы);
	торо_РаботаСИерархией20Клиент.ПроверитьНеобходимостьОбновленияПутиКОбъектуРемонта(ЭтаФорма,, ИспользоватьКартинкиТОР);
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандДереваПриАктивизацииСтроки(ЭтаФорма, Элементы.Дерево.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти
