
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Параметры.Свойство("ОбъектРемонта") Тогда
	    Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекСтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	Если Параметры.Свойство("ТекСтруктураИерархии") Тогда
	    ТекСтруктураИерархии = Параметры.ТекСтруктураИерархии;
	Иначе
		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);
	КонецЕсли;
	
	ОбъектРемонта = Параметры.ОбъектРемонта;
	
	Если Параметры.Свойство("ДатаВводаВЭксплуатацию") И ЗначениеЗаполнено(Параметры.ДатаВводаВЭксплуатацию) Тогда 
		ДатаВводаВЭксплуатацию = Параметры.ДатаВводаВЭксплуатацию;
	Иначе
		ДатаВводаВЭксплуатацию = ОбъектРемонта.ДатаВводаВЭксплуатацию; 
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаСнятияСУчета") И ЗначениеЗаполнено(Параметры.ДатаСнятияСУчета) Тогда 
		ДатаСнятияСУчета = Параметры.ДатаСнятияСУчета;
	ИначеЕсли ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.Регистратор.ДатаСписания КАК ДатаСписания
		               |ИЗ
		               |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(, ОбъектРемонта = &ОбъектРемонта) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
		               |ГДЕ
		               |	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.СнятоСУчета)";
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ДатаСнятияСУчета = Выборка.ДатаСписания;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСнятияСУчета) Тогда
		ДатаСнятияСУчета =  '29991231'
	КонецЕсли;
	
	КоличествоПусков.Загрузить(РегистрыНакопления.торо_КоличествоПусковОР.Обороты(,, Новый Структура("ОбъектРемонта", ОбъектРемонта)));
	
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	
	Если ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования") Тогда
		Элементы.СтраницыСостояний.Видимость = Истина;
		
		ТекущаяДата = ТекущаяДатаСеанса();
		ОтборПоПериоду = Истина;
		ДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), -2);
		ДатаОкончания = КонецМесяца(ТекущаяДата);
	Иначе
		Элементы.СтраницыСостояний.Видимость = Ложь;
	КонецЕсли;
	
	ТиповойОР = ОбъектРемонта.ТиповойОР;
	
	Элементы.ПредстоящиеРемонтыОтображатьОтмененные.Пометка = Ложь;
	Элементы.ВнешниеОснованияОтображатьОтмененныеВО.Пометка = Ложь;
	Элементы.ВыявленныеДефектыОтображатьОтмененныеВД.Пометка = Ложь;
	
	ПрочитатьПраваДоступа();
	УстановитьПараметрыЗапросовНаСервере();
	ОбновитьЗначенияКонтролируемыхПоказателейНаСервере();
	ТаблицаСостоянийОР.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", ОбъектРемонта);
	УстановитьВидимостьДоступностьФМ();
	
	ФОИспользоватьВнешниеОснования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот");
	Если Не ФОИспользоватьВнешниеОснования Тогда
	    Элементы.СтраницаВнешниеОснования.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ИзРМТехнолога") И Параметры.ИзРМТехнолога Тогда
	    Элементы.СтраницыЖурналаОР.ТекущаяСтраница = Элементы.СтраницаРемонты;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписьДокументаВыявленныеДефекты" Тогда
		Элементы.ВыявленныеДефекты.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПоказателейЭксплуатацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаНаработка Тогда
		ОбновитьЖурналНаработки(Команды.Найти("ОбновитьЖурналНаработки"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСостояниеОР Тогда
		ПостроитьГрафикСостоянийОР();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияИнтервалаГрафикаПриИзменении(Элемент)
	Если ПолосаРегулированияИнтервалаГрафика < 1 Тогда
		ГрафикСостоянийОР.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		ГрафикСостоянийОР.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ГрафикСостоянийОР.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени["День"];
		ГрафикСостоянийОР.КратностьПериодическогоВарианта = ПолосаРегулированияИнтервалаГрафика;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПериодуПриИзменении(Элемент)
	Если ОтборПоПериоду Тогда
		Элементы.ДатаНачала.Доступность = Истина;
		Элементы.ДатаОкончания.Доступность = Истина;
	Иначе
		Элементы.ДатаНачала.Доступность = Ложь;
		Элементы.ДатаОкончания.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Если ДатаНачала < ДатаВводаВЭксплуатацию Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала меньше, чем дата ввода в эксплуатацию объекта ремонта'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрафикСостоянийОРОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	// Обход бага платформы, который выводит в расшифровке множество дублей одного документа.
	Если ТипЗнч(Расшифровки) = Тип("Массив") И Расшифровки.Количество() > 2 Тогда
		Расшифровки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Расшифровки);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Расшифровки, Неопределено);
		Если Расшифровки.Количество() = 1 Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(Неопределено, Расшифровки[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТДТаблицаСостоянийПриАктивизации(Элемент)
	СтрокаДокумент = СписокСостояний.НайтиСтроки(Новый Структура("Лево, Низ", Элемент.ТекущаяОбласть.Лево, Элемент.ТекущаяОбласть.Низ));
	Если ЗначениеЗаполнено(СтрокаДокумент) Тогда
		ПоказатьЗначение(неопределено, СтрокаДокумент[0].Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияКонтролируемыхПоказателей

&НаКлиенте
Процедура ЗначенияКонтролируемыхПоказателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент, "Регистратор");
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияКонтролируемыхПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаВыработкиОбъектаРемонта

&НаКлиенте
Процедура ТаблицаВыработкиОбъектаРемонтаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент, "Регистратор");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыработкиОбъектаРемонтаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		МассивСтрок = ТаблицаВыработкиОбъектаРемонта.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель));
		НаработкаАбсолютная  = 0;
		НаработкаПослеСброса = 0;
		Для Каждого Строка Из МассивСтрок Цикл
			Наработка = ?(Строка.ВидДвижения = ВидДвиженияНакопления.Приход, 1, -1) * Строка.Наработка;
			НаработкаПослеСброса = НаработкаПослеСброса + Наработка;
			Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НаработкаАбсолютная = НаработкаАбсолютная + Наработка;
			КонецЕсли;
		КонецЦикла;
		ТекстПодвалаНаработки = Строка(НаработкаПослеСброса) + " / " + Строка(НаработкаАбсолютная);
	Иначе
		ТекстПодвалаНаработки = "0 / 0";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСостоянийОР

&НаКлиенте
Процедура ТаблицаСостоянийОРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент, "Регистратор");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЖурналыДокументов

&НаКлиенте
Процедура ВыявленныеДефектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеОснованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НарядыНаВыполнениеРемонтныхРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыполненныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПредстоящиеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не СтрНайти(Поле.Имя, "Документ") = 0 Тогда
	    ИмяПоля = СтрЗаменить(Поле.Имя, "ПредстоящиеРемонты", "");
		ТаблицаВыбор(Элемент, ИмяПоля);
	Иначе
	    ТаблицаВыбор(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПредстоящиеРегламентныеМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НарядыНаРегламентныеМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыполненныеРегламентныеМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АктПриемкиОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаВыбор(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	Если Элементы.СтраницыЖурналаОР.ТекущаяСтраница = Элементы.СтраницаРемонты Тогда
		ИмяВложеннойСтраницы = Элементы.СтраницыРемонтов.ТекущаяСтраница.Имя;
	ИначеЕсли Элементы.СтраницыЖурналаОР.ТекущаяСтраница = Элементы.СтраницаРегламентныеМероприятия Тогда
		ИмяВложеннойСтраницы = Элементы.СтраницыРегламентныхМероприятий.ТекущаяСтраница.Имя;
	Иначе
	    Возврат;
	КонецЕсли;
	
	ИмяТаблицы = СтрЗаменить(ИмяВложеннойСтраницы, "Страница", "");
	Элементы[ИмяТаблицы].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеДефекты(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеВнешниеОснования(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеППР(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеЗаявки(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеНаряды(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеАкты(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеАктыПриемки(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеРМ(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеНарядыНаРМ(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеАктыРМ(Команда)
	ОтображатьТолькоПроведенныеДокументы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДефект(Команда)
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ОбъектРемонта", ОбъектРемонта);
		
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ФормаДокумента = ОткрытьФорму("Документ.торо_ВыявленныеДефекты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВводЗначенияКонтролируемыхПоказателей(Команда)
	
	СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ОбъектРемонта);
	Если СтруктураВозврата.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для выбранного объекта ремонта не заданы контролируемые показатели.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ПараметрыОповещения = Новый Структура("ИмяДокумента", "торо_УчетКонтролируемыхПоказателей");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПоказателиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ТекстЗаголовкаОкна = НСтр("ru = 'Выберите необходимые показатели'");
	
	ОбщийСписокКонтролируемыхПоказателей = Новый СписокЗначений;
	Для каждого Строка Из СтруктураВозврата Цикл
	    ОбщийСписокКонтролируемыхПоказателей.Добавить(Строка.Показатель,, Истина);
	КонецЦикла; 
	
	ОбщийСписокКонтролируемыхПоказателей.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияКонтролируемыхПоказателей(Команда)
	ОбновитьЗначенияКонтролируемыхПоказателейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоКонтролируемымПоказателям(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	ПараметрыОтбора = Новый Структура("ПериодОтчета", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура("ОбъектРемонта", ОбъектРемонта);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_ОтчетПоКонтролируемымПоказателям.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСостоянияПоПоказателям(Команда)
	ТекущиеДанные = Элементы.ЗначенияКонтролируемыхПоказателей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В журнале контролируемых показателей нет ни одной строки. Невозможно сформировать отчет.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	ПараметрыОтбора = Новый Структура("ПериодВыполнени", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	ПараметрыОтчет = Новый Структура();
	ПараметрыОтчет.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыОтчет.Вставить("ОбъектРемонта", ОбъектРемонта);	
	ПараметрыОтчет.Вставить("ТекПоказатель", ТекущиеДанные.Показатель);
	ПараметрыОтчет.Вставить("ТекПоказательНаработки", Неопределено);
	ПараметрыОтчет.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОтчет.Вставить("ВыводитьСуммуВыделенныхЯчеек", Ложь);
	
	ОткрытьФорму("Отчет.торо_СостояниеОборудования.Форма",ПараметрыОтчет);
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияКонтролируемыхПоказателейПоказатьЛегенду(Команда)
	ЭлементФормыКнопка = Элементы.ЗначенияКонтролируемыхПоказателейПоказатьЛегенду;
	ВидимостьЛегенды = Не ЭлементФормыКнопка.Пометка;
	ЭлементФормыКнопка.Пометка = ВидимостьЛегенды;
	Элементы.ЗначенияКонтролируемыхПоказателейЛегенда.Видимость = ВидимостьЛегенды;
КонецПроцедуры

&НаКлиенте
Процедура ВводНаработки(Команда)
	
	СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработки(ОбъектРемонта, ТиповойОР);
	Если СтруктураВозврата.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для выбранного объекта ремонта не заданы показатели наработки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ОбщийСписокКонтролируемыхПоказателей = Новый СписокЗначений;
	СписокНезаполненныхПоказателей = Новый СписокЗначений;
	Для каждого Строка Из СтруктураВозврата Цикл
		Если ОбщийСписокКонтролируемыхПоказателей.НайтиПоЗначению(Строка.Показатель) = Неопределено 
			И ЗначениеЗаполнено(Строка.ПродолжительностьПериодаПлановойНаработки) Тогда
			ОбщийСписокКонтролируемыхПоказателей.Добавить(Строка.Показатель,, Истина);
		Иначе
			СписокНезаполненныхПоказателей.Добавить(Строка.Показатель,, Истина);
		КонецЕсли;
	КонецЦикла; 
	
	Если Не ОбщийСписокКонтролируемыхПоказателей.Количество() = 0 Тогда
		ПараметрыОповещения = Новый Структура("ИмяДокумента", "торо_УчетНаработкиОборудования");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПоказателиЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ТекстЗаголовкаОкна = НСтр("ru = 'Выберите необходимые показатели'");
	
		ОбщийСписокКонтролируемыхПоказателей.ПоказатьОтметкуЭлементов(ОписаниеОповещения, ТекстЗаголовкаОкна);
	КонецЕсли;
	
	Для Каждого Значение Из СписокНезаполненныхПоказателей Цикл	
		ШаблонСообщения = НСтр("ru = 'Для показателя <%1> не заполнено значение плановой наработки.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Значение.Значение);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЖурналНаработки(Команда)
	МассивСтрокНаработки = ПолучитьМассивДокументовНаработки(ОбъектРемонта);
	ТаблицаВыработкиОбъектаРемонта.Очистить();
	Для каждого Элемент Из МассивСтрокНаработки Цикл
		НС = ТаблицаВыработкиОбъектаРемонта.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетНаработкаОборудования(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	ПараметрыОтбора = Новый Структура("Период", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура("ОбъектРемонта", ОбъектРемонта);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_НаработкаОборудования.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетНаработкаОборудованияСПоследнихРемонтов(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	ПараметрыОтбора = Новый Структура("Период", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОбъектРемонта", ОбъектРемонта);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_НаработкаОборудованияСПоследнихРемонтов.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСостоянияПоНаработке(Команда)
	ТекущиеДанные = Элементы.ТаблицаВыработкиОбъектаРемонта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В журнале наработки нет ни одной строки. Невозможно сформировать отчет.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	ПараметрыОтбора = Новый Структура("ПериодВыполнени", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	ПараметрыОтчет = Новый Структура();
	ПараметрыОтчет.Вставить("ОбъектРемонта",ОбъектРемонта);
	ПараметрыОтчет.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыОтчет.Вставить("ТекПоказатель", Неопределено);
	ПараметрыОтчет.Вставить("ТекПоказательНаработки", ТекущиеДанные.Показатель);
	ПараметрыОтчет.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОтчет.Вставить("ВыводитьСуммуВыделенныхЯчеек", Ложь);
	
	ОткрытьФорму("Отчет.торо_СостояниеОборудования.Форма", ПараметрыОтчет);
КонецПроцедуры

&НаКлиенте
Процедура ВводСостоянияНаДату(Команда)
	ВводСостояния();
КонецПроцедуры

&НаКлиенте
Процедура ВводСостоянияНаПериод(Команда)
	ВводСостояния(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостоянияОР(Команда)
	Элементы.ТаблицаСостоянийОР.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Строить = Истина;
	Если ОтборПоПериоду Тогда
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			Строить = Ложь;
			ТекстСообщения = НСтр("ru = 'Не заполнена дата начала для отбора!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			Строить = Ложь;
			ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания для отбора!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Строить И ДатаНачала > ДатаОкончания Тогда
			Строить = Ложь;
			ТекстСообщения = НСтр("ru = 'Дата начала для отбора больше даты окончания!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
		
	Если Строить Тогда	
		ПостроитьГрафикСостоянийОР();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЛегенду(Команда)
	Элементы.ПоказыватьЛегенду.Пометка = Не Элементы.ПоказыватьЛегенду.Пометка;
	Элементы.ЛегендаГрафика.Видимость = Элементы.ПоказыватьЛегенду.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПуски(Команда)
	ОбновитьПускиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПростойОборудования(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	ПараметрыОтбора = Новый Структура("ПериодОтчета", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура("ОбъектРемонта", ОбъектРемонта);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_ПростойОборудования.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстановЗапускОборудования(Команда)
	Период = Новый СтандартныйПериод();
	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	ПараметрыОтбора = Новый Структура("Период", Период);
	ПараметрыОтчета = Новый Структура("ПараметрыОтбора", ПараметрыОтбора);
	
	Отбор = Новый Структура("ОбъектРемонта", ОбъектРемонта);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.торо_ИсторияОстановаЗапускаОборудования.Форма", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ТаблицаВыбор(Элемент, Поле = "Документ")
	Если Не ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
	    Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ТекущиеДанные[Поле];
	ID = "";
	ИмяФормыДляОткрытия = "Документ." + ПолучитьИмяОбъектаМетаданных(Документ) + ".ФормаОбъекта";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ID = ТекущиеДанные.ID;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Документ);
	Если ЗначениеЗаполнено(ID) Тогда
	    ПараметрыФормы.Вставить("ID", ID);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяОбъектаМетаданных(Ссылка)
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
	    Возврат "";
	КонецЕсли;
	
	Возврат Ссылка.Метаданные().Имя;
КонецФункции

&НаСервере
Процедура УстановитьПараметрыЗапросовНаСервере()
	МассивОбъектов = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") 
		И ОбъектРемонта.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		                |	торо_СоставФункциональныхМест.ОбъектРемонта КАК УстановленныйОР
		                |ИЗ
		                |	РегистрСведений.торо_СоставФункциональныхМест КАК торо_СоставФункциональныхМест
		                |ГДЕ
		                |	торо_СоставФункциональныхМест.ФункциональноеМесто = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
				МассивОбъектов.Добавить(Выборка.УстановленныйОР);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
			МассивОбъектов.Добавить(ОбъектРемонта);
		КонецЕсли;
	КонецЕсли;
	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеЗаявки;
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("МассивОбъектов", МассивОбъектов);
	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеДефекты;
	ВыявленныеДефекты.Параметры.УстановитьЗначениеПараметра("МассивОбъектов", МассивОбъектов);
	ВыявленныеДефекты.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	Кнопка = Элементы.ВыявленныеДефектыОтображатьОтмененныеВД;
	ВыявленныеДефекты.Параметры.УстановитьЗначениеПараметра("ОтображатьОтмененные", Кнопка.Пометка);

	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеВнешниеОснования;
	ВнешниеОснования.Параметры.УстановитьЗначениеПараметра("МассивОбъектов", МассивОбъектов);
	ВнешниеОснования.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);	
	Кнопка = Элементы.ВнешниеОснованияОтображатьОтмененныеВО;
	ВнешниеОснования.Параметры.УстановитьЗначениеПараметра("ОтображатьОтмененные", Кнопка.Пометка);

	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеАкты;
	ВыполненныеРемонты.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ВыполненныеРемонты.Параметры.УстановитьЗначениеПараметра("МассивОбъектов", МассивОбъектов);                             
	
	Кнопка = Элементы.ВыполненныеРемонтыОтображатьТолькоЗавершенные;
	ВыполненныеРемонты.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоЗавершенные", Кнопка.Пометка);
	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеППР;
	ПредстоящиеРемонты.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	Кнопка = Элементы.ПредстоящиеРемонтыОтображатьОтмененные;
	ПредстоящиеРемонты.Параметры.УстановитьЗначениеПараметра("ОтображатьОтмененные", Кнопка.Пометка);

	ПредстоящиеРемонты.Параметры.УстановитьЗначениеПараметра("МассивОбъектов", МассивОбъектов);
	ПредстоящиеРемонты.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ТекущаяДата());
	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеРМ;
	ПредстоящиеРегламентныеМероприятия.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ПредстоящиеРегламентныеМероприятия.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", ОбъектРемонта);
	ПредстоящиеРегламентныеМероприятия.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ТекущаяДата());
	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеНаряды;
	НарядыНаВыполнениеРемонтныхРабот.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	НарядыНаВыполнениеРемонтныхРабот.Параметры.УстановитьЗначениеПараметра("МассивОбъектов", МассивОбъектов);
	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеАктыПриемки;
	АктыПриемкиОборудования.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	АктыПриемкиОборудования.Параметры.УстановитьЗначениеПараметра("МассивОбъектов", МассивОбъектов);
	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеНарядыНаРМ;
	НарядыНаРегламентныеМероприятия.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	НарядыНаРегламентныеМероприятия.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", ОбъектРемонта);
	
	Кнопка = Элементы.ОтображатьТолькоПроведенныеАктыРМ;
	ВыполненныеРегламентныеМероприятия.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ВыполненныеРегламентныеМероприятия.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", ОбъектРемонта);
	
	Кнопка = Элементы.ВыполненныеРегламентныеМероприятияОтображатьТолькоЗавершенныеАктыРМ;
	ВыполненныеРегламентныеМероприятия.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоЗавершенные", Кнопка.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеДокументы(ЭлементФормы)
	Если Не ТипЗнч(ЭлементФормы) = Тип("Строка") Тогда
	    Возврат;
	КонецЕсли;
	
	Кнопка = Элементы[ЭлементФормы];
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаСервере
Функция ПроверитьСтатус(ВидСоздаваемогоДокумента)
	
	Если Не ФОИспользоватьДокументыЖЦОборудования Тогда
		Возврат Истина;
	КонецЕсли; 	
	
	ТекущийСтатусОР = РегистрыСведений.торо_СтатусыОбъектовРемонтаВУчете.ПолучитьТекущийСтатусОР(ОбъектРемонта);
	
	ДоступныеЗначения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныеЗначения.Добавить(Выборка.СтатусОРВУчете);
	КонецЦикла;
	
	Если ВидСоздаваемогоДокумента = "торо_УчетНаработкиОборудования"
		ИЛИ ВидСоздаваемогоДокумента = "торо_СостоянияОбъектовРемонта" Тогда
		
		Если ТекущийСтатусОР <> Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету
			И Не ДоступныеЗначения.НайтиПоЗначению(ТекущийСтатусОР) = Неопределено Тогда
			Возврат Истина;
		Иначе
			ШаблонСообщения = НСтр("ru = 'В статусе <%1> создание документа недоступно.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийСтатусОР);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидСоздаваемогоДокумента = "торо_УчетКонтролируемыхПоказателей" Тогда 
		
		Если Не ДоступныеЗначения.НайтиПоЗначению(ТекущийСтатусОР) = Неопределено Тогда
			Возврат Истина;
		Иначе
			ШаблонСообщения = НСтр("ru = 'В статусе <%1> создание документа недоступно.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийСтатусОР);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивДокументовНаработки(Ссылка)
	Массив = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НаработкаОбъектовРемонта.Период КАК Период,
	|	торо_НаработкаОбъектовРемонта.Регистратор КАК Регистратор,
	|	торо_НаработкаОбъектовРемонта.Показатель КАК Показатель,
	|	торо_НаработкаОбъектовРемонта.Наработка КАК Наработка,
	|	торо_НаработкаОбъектовРемонта.ДатаНач КАК ДатаНач,
	|	торо_НаработкаОбъектовРемонта.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА торо_НаработкаОбъектовРемонта.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА 28
	|		ИНАЧЕ 29
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	|ГДЕ
	|	торо_НаработкаОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И НЕ торо_НаработкаОбъектовРемонта.Регистратор.Организация ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
				   
	Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Структура = Новый Структура("Период, Регистратор, Показатель, Наработка, ВидДвижения, Картинка");
			ЗаполнитьЗначенияСвойств(Структура, Выборка);
			Массив.Добавить(Структура);	
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Массив;
КонецФункции

&НаСервере
Процедура ПостроитьГрафикСостоянийОР()
	
	ГрафикСостоянийОР.Очистить();
	ГрафикСостоянийОР.АвтоОпределениеПолногоИнтервала = Ложь;
	ГрафикСостоянийОР.ОтображатьЛегенду = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК ВидЭксплуатации,
	|	торо_ТекущееСостояниеОР.Период КАК Период,
	|	торо_ТекущееСостояниеОР.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаСостояний
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|ГДЕ
	|	торо_ТекущееСостояниеОР.ОбъектРемонта = &ОбъектРемонта
	|	И торо_ТекущееСостояниеОР.Период > &ДатаНачала
	|	И торо_ТекущееСостояниеОР.Период < &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации,
	|	торо_ТекущееСостояниеОРСрезПоследних.Период,
	|	торо_ТекущееСостояниеОРСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ДатаНачала, ОбъектРемонта = &ОбъектРемонта) КАК торо_ТекущееСостояниеОРСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	торо_ТекущееСостояниеОРСрезПервых.ВидЭксплуатации,
	|	торо_ТекущееСостояниеОРСрезПервых.Период,
	|	торо_ТекущееСостояниеОРСрезПервых.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПервых(&ДатаОкончания, ОбъектРемонта = &ОбъектРемонта) КАК торо_ТекущееСостояниеОРСрезПервых
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСостояний.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ТаблицаСостояний.Период КАК Период,
	|	МИНИМУМ(ЕСТЬNULL(ВспромогательнаяТаблица.Период, &ТекДата)) КАК ДатаКон,
	|	ТаблицаСостояний.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВспромогательнаяТаблица.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОткрытоеСостояние
	|ИЗ
	|	ТаблицаСостояний КАК ТаблицаСостояний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСостояний КАК ВспромогательнаяТаблица
	|		ПО ТаблицаСостояний.Период < ВспромогательнаяТаблица.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСостояний.Период,
	|	ТаблицаСостояний.ВидЭксплуатации,
	|	ТаблицаСостояний.Регистратор,
	|	ВЫБОР
	|		КОГДА ВспромогательнаяТаблица.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	ВидЭксплуатации";
	
	НачальныйПериод = Макс('0001.01.01', ДатаВводаВЭксплуатацию);
	КонечныйПериод = ?(ДатаСнятияСУчета = '0001.01.01','2999.12.31',Мин('2999.12.31', ДатаСнятияСУчета));
	Если ОтборПоПериоду Тогда			   
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Если ДатаНачала > ДатаОкончания Тогда
			ТекстСообщения = НСтр("ru = 'Дата окончания периода меньше даты начала!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", НачальныйПериод); 
		Запрос.УстановитьПараметр("ДатаОкончания", '2999.12.31');
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПоВидЭксплуатации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаполнитьТабличноеПолеСостоянийОР(Результат);
	
	Серия = ГрафикСостоянийОР.Серии.Добавить();
	Серия.Цвет = WebЦвета.Красный;
	
	НачалоПериода = Дата('0001.01.01');
	КонецПериода = Дата('0001.01.01');
	
	ГрафикСостоянийОР.Окантовка = Истина;
	
	Пока ВыборкаПоВидЭксплуатации.Следующий() Цикл
		ТочкаДиаграммы = ГрафикСостоянийОР.Точки.Добавить();
		ТочкаДиаграммы.Текст = ВыборкаПоВидЭксплуатации.ВидЭксплуатации; 
		
		Если ТочкаДиаграммы.Текст = "" Тогда
			ТочкаДиаграммы.Текст = "Не установлено";
		КонецЕсли;
		
		Выборка = ВыборкаПоВидЭксплуатации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  Выборка.Следующий() Цикл
			Если Выборка.Период > Выборка.ДатаКон Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ГрафикСостоянийОР.ПолучитьЗначение(ТочкаДиаграммы, Серия);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.Период;
			Интервал.Расшифровка = Выборка.Регистратор;
			
			Если Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Эксплуатация Тогда
				Интервал.Цвет = WebЦвета.Зеленый;
			ИначеЕсли Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
				Интервал.Цвет = WebЦвета.Красный;
			ИначеЕсли Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Испытания Тогда
				Интервал.Цвет = WebЦвета.Синий;
			КонецЕсли;
			
			НачалоПериода = ?(НачалоПериода = Дата('0001.01.01'), Выборка.Период, Мин(НачалоПериода, Выборка.Период));	
			
			КонецПериода = Макс(Выборка.ДатаКон, КонецПериода);
			
			Если Выборка.ОткрытоеСостояние Тогда
				Интервал.Текст = "с " + Строка(Выборка.Период);
				Интервал.Конец = КонецДня(?(КонечныйПериод = '2999.12.31', Макс(Выборка.ДатаКон, ТекущаяДата()), Макс(Выборка.ДатаКон, КонечныйПериод, ТекущаяДата())));
			Иначе 
				Интервал.Текст = Строка(Выборка.Период) + " - " + Строка(Выборка.ДатаКон);
				Интервал.Конец = Выборка.ДатаКон;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ОтборПоПериоду Тогда
		ДатаПланированияДляИнтервала = ДатаНачала;
		ДатаОкончанияДляИнтервала = ДатаОкончания;
	Иначе	
		Если ЗначениеЗаполнено(НачальныйПериод) Тогда
			ДатаПланированияДляИнтервала = НачальныйПериод;
		Иначе
			Если ЗначениеЗаполнено(НачалоПериода) Тогда
				ДатаПланированияДляИнтервала = НачалоПериода;
			Иначе
				ДатаПланированияДляИнтервала = '1000.01.01';
			КонецЕсли;
		КонецЕсли;	

		Если ЗначениеЗаполнено(КонецПериода) И Не КонечныйПериод = '2999.12.31' Тогда
			ДатаОкончанияДляИнтервала = Макс(КонецПериода, КонечныйПериод);
		Иначе
			Если КонечныйПериод = '2999.12.31' И ЗначениеЗаполнено(КонецПериода) Тогда
				ДатаОкончанияДляИнтервала = Макс(ТекущаяДата(), КонецПериода);
			ИначеЕсли КонечныйПериод = '2999.12.31' Тогда
				ДатаОкончанияДляИнтервала = ТекущаяДата();
			Иначе
				ДатаОкончанияДляИнтервала = КонечныйПериод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ГрафикСостоянийОР.УстановитьПолныйИнтервал(НачалоДня(ДатаПланированияДляИнтервала),КонецДня(ДатаОкончанияДляИнтервала)); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличноеПолеСостоянийОР(РезультатЗапроса)
	ПолеТДТаблицаСостояний.Очистить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТЗСостояний = РезультатЗапроса.Выгрузить();
	ТЗСостояний.Сортировать("Период Возр");
	Пока ТЗСостояний[0].Период = null Цикл
		ТзСостояний.Удалить(0);
	КонецЦикла;
	ТабДок = ПолеТДТаблицаСостояний;
	ПервичныйСдвигСтрок = 0;
	
	ВыборкаПоВидЭксплуатации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивВидов = Новый Массив;
	Пока ВыборкаПоВидЭксплуатации.Следующий() Цикл
		МассивВидов.Добавить(ВыборкаПоВидЭксплуатации.ВидЭксплуатации); 	
	КонецЦикла;
	
	ИндексСтроки = 2 + ТЗСостояний.Количество() + 1;
	флВсеНарисовано = Ложь;
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	ВысотаТаблицыОтКоличества = 3 + МассивВидов.Количество();
	
	КоличествоСостояний = ТЗСостояний.Количество();
	КоличествоКолонокПоляТД = 15;
	ЭтоПерваяЧастьТаблицы = Истина;

	Пока Не флВсеНарисовано Цикл
		Если КоличествоКолонокПоляТД = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоСостояний + 1 > КоличествоКолонокПоляТД Тогда
			ЧертитьКолонок = КоличествоКолонокПоляТД;
			КоличествоСостояний = КоличествоСостояний - КоличествоКолонокПоляТД + 1;
		Иначе 
			ЧертитьКолонок = КоличествоСостояний + 1;
			флВсеНарисовано = Истина;
		КонецЕсли;
		
		ОбластьВывода = ТабДок.Область(1,1,1,1);
		ОбластьВывода.ШиринаКолонки = 4; 
		
		ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД,2,ВысотаТаблицыОтКоличества + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
		ОбластьВывода.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ОбластьВывода.ВысотаСтроки = 22;
		
		ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД,2,ВысотаТаблицыОтКоличества + СдвигСтрокПоляТД+1);
		ОбластьВывода.ШиринаКолонки = 15;
		ОбластьВывода.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		Если НЕ ЭтоПерваяЧастьТаблицы Тогда
			ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД - 1, 2);
			ОбластьВывода.Текст = "Продолжение";
		КонецЕсли;
		
		ЭтоПерваяЧастьТаблицы = Ложь;
		ОбластьВывода = ТабДок.Область(3 + СдвигСтрокПоляТД, 3,3 + СдвигСтрокПоляТД,ЧертитьКолонок+1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода.Объединить();
		
		ОбластьВывода.Текст = "Период:";
		ОбластьВывода = ТабДок.Область(3 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Состояние:"; 
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
		СдвигПоляТекущий = 4;
		Для Каждого ТекущийВидЭксплуатации Из МассивВидов Цикл
			ОбластьВывода = ТабДок.Область(СдвигПоляТекущий + СдвигСтрокПоляТД, 2);
			ОбластьВывода.Текст = ТекущийВидЭксплуатации;
			ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			СдвигПоляТекущий = СдвигПоляТекущий + 1;
		КонецЦикла;
		
		СдвигСтрокПоляТД = СдвигСтрокПоляТД + ВысотаТаблицыОтКоличества;
	КонецЦикла;
	
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	Номер = 1;
	
	СписокСостояний.Очистить();
	
	Для Каждого СтрокаСостояния Из ТЗСостояний Цикл
		ДопИндекс = 4;
		Для Каждого ТекущийВидЭксплуатации Из МассивВидов Цикл
			Если СтрокаСостояния.ВидЭксплуатации = ТекущийВидЭксплуатации Тогда
				Прервать;
			КонецЕсли;
			ДопИндекс = ДопИндекс + 1;
		КонецЦикла;
		
		
		ОбластьВывода2 = ТабДок.Область(ДопИндекс + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода2.ШиринаКолонки = 10;
		ОбластьВывода2.Текст = Строка(Формат(СтрокаСостояния.Период,"ДФ=dd.MM.yyyy")) + " -"+ Символы.ПС + Строка(Формат(СтрокаСостояния.ДатаКон,"ДФ=dd.MM.yyyy"));
		
		Номер = Номер + 1;
		
		Если ОбластьВывода2.Лево = КоличествоКолонокПоляТД + 1 Тогда
			СдвигСтрокПоляТД = СдвигСтрокПоляТД + ВысотаТаблицыОтКоличества;
			Номер = 1;	
		КонецЕсли;
		
		ДобавитьСостояние(СтрокаСостояния, ОбластьВывода2.Лево, ДопИндекс + СдвигСтрокПоляТД);
		
	КонецЦикла;
	
	Если СтрокаСостояния.ОткрытоеСостояние Тогда
		ОбластьВывода2.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода2.Текст ="с " + Строка(Формат(СтрокаСостояния.Период,"ДФ=dd.MM.yyyy"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВводСостояния(ВидЭксплуатацииНаПериод = Ложь)
	Если Не ПроверитьСтатус("торо_СостоянияОбъектовРемонта") Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = ?(Не ВидЭксплуатацииНаПериод, ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации"), ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод"));
	
	Попытка
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
		ЗначенияЗаполнения.Вставить("ОбъектРемонта", ОбъектРемонта);
		ЗначенияЗаполнения.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, СтруктураИерархии", ЗначенияЗаполнения, ТекСтруктураИерархии);
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Исключение
		ПоказатьПредупреждение(Неопределено, ИнформацияОбОшибке().Причина.Описание);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПускиНаСервере()
	КоличествоПусков.Загрузить(РегистрыНакопления.торо_КоличествоПусковОР.Обороты(,, Новый Структура("ОбъектРемонта", ОбъектРемонта)));
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПраваДоступа()
	Элементы.СтраницаКонтролируемыеПоказатели.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_УчетКонтролируемыхПоказателей);
	Элементы.СтраницаНаработка.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_УчетНаработкиОборудования);
	Элементы.СтраницаСостояниеОР.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_СостоянияОбъектовРемонта);
	Элементы.СтраницаПуски.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_СостоянияОбъектовРемонта);
	Элементы.СтраницаВыявленныеДефекты.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_ВыявленныеДефекты);
	Элементы.СтраницаВнешниеОснования.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_ВнешнееОснованиеДляРабот);
	Элементы.СтраницаПредстоящиеРемонты.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_ПланГрафикРемонта);
	Элементы.СтраницаЗаявкиНаРемонт.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_ЗаявкаНаРемонт);
	Элементы.СтраницаНарядыНаВыполнениеРемонтныхРабот.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_НарядНаВыполнениеРемонтныхРабот);
	Элементы.СтраницаВыполненныеРемонты.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_АктОВыполненииЭтапаРабот);
	Элементы.СтраницаАктыПриемкиОборудования.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_АктПриемкиОборудования);
	Элементы.СтраницаПредстоящиеРегламентныеМероприятия.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_ГрафикРегламентныхМероприятийТОиР);
	Элементы.СтраницаНарядыНаРегламентныеМероприятия.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_НарядНаРегламентноеМероприятие);
	Элементы.СтраницаВыполненныеРегламентныеМероприятия.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.торо_АктОВыполненииРегламентногоМероприятия);
	
	Элементы.ЗначенияКонтролируемыхПоказателейВводЗначенияКонтролируемыхПоказателей.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.торо_УчетКонтролируемыхПоказателей);
	Элементы.ТаблицаВыработкиОбъектаРемонтаВводНаработки.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.торо_УчетНаработкиОборудования);
	Элементы.ВводСостоянияНаДату.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.торо_СостоянияОбъектовРемонта);
	Элементы.ВводСостоянияНаПериод.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.торо_СостоянияОбъектовРемонта);
	Элементы.ВыявленныеДефектыВвестиДефект.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.торо_ВыявленныеДефекты);

	ФОИспользоватьДокументыПринятияИСписанияОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	Если ФОИспользоватьДокументыПринятияИСписанияОборудования Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе КАК ДоступностьПриПодборе
			|ИЗ
			|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
			|ГДЕ
			|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете = &СтатусОРВУчете";
		
		ТекСтатусВУчете = РегистрыСведений.торо_СтатусыОбъектовРемонтаВУчете.ПолучитьТекущийСтатусОР(ОбъектРемонта.Ссылка);
		Запрос.УстановитьПараметр("СтатусОРВУчете", ТекСтатусВУчете);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.ДоступностьПриПодборе = Ложь Тогда
				Элементы.ЗначенияКонтролируемыхПоказателейВводЗначенияКонтролируемыхПоказателей.Видимость = Ложь;
				Элементы.ТаблицаВыработкиОбъектаРемонтаВводНаработки.Видимость = Ложь;
				Элементы.ВводСостояния.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияКонтролируемыхПоказателейНаСервере()
	СписокТиповых = Новый Массив;
	Если ЗначениеЗаполнено(ТиповойОР) Тогда
		СписокТиповых.Добавить(ТиповойОР);
	КонецЕсли;
	
	ТаблицаРодителейТиповых = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейСпискаОбъектов(СписокТиповых, Тип("СправочникСсылка.торо_ТиповыеОР"), Истина);
	ТаблицаРодителейТиповых.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаРодителейТиповых.ЗаполнитьЗначения(ОбъектРемонта, "ОбъектРемонта");
	
	ТаблицаПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,, Истина,, ТаблицаРодителейТиповых, Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаМаксимальныхЗначенийПоказателей.ДопустимыйМинимум КАК ДопустимыйМинимум,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.ДопустимыйМаксимум КАК ДопустимыйМаксимум,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.КритическийМинимум КАК КритическийМинимум,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.КритическийМаксимум КАК КритическийМаксимум,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.ИсходныйОР КАК ОбъектРемонта,
	               |	ТаблицаМаксимальныхЗначенийПоказателей.Показатель КАК Показатель
	               |ПОМЕСТИТЬ ВТ_ТаблицаМаксимальныхЗначенийПоказателей
	               |ИЗ
	               |	&ТаблицаМаксимальныхЗначений КАК ТаблицаМаксимальныхЗначенийПоказателей
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Показатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Период КАК Период,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Регистратор КАК Регистратор,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.НомерСтроки КАК НомерСтроки,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Активность КАК Активность,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.ДатаКонтроля КАК ДатаКонтроля,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта КАК ОбъектРемонта,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Показатель КАК Показатель,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение КАК Значение,
	               |	РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.МоментВремени КАК МоментВремени,
	               |	ВТ_ТаблицаМаксимальныхЗначенийПоказателей.ДопустимыйМинимум КАК ДопустимыйМинимум,
	               |	ВТ_ТаблицаМаксимальныхЗначенийПоказателей.ДопустимыйМаксимум КАК ДопустимыйМаксимум,
	               |	ВТ_ТаблицаМаксимальныхЗначенийПоказателей.КритическийМинимум КАК КритическийМинимум,
	               |	ВТ_ТаблицаМаксимальныхЗначенийПоказателей.КритическийМаксимум КАК КритическийМаксимум,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЗначениеКПОР,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
	               |			ТОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение.ВыделятьКакНедопустимоеЗначение
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ВыделятьКакНедопустимоеЗначение,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение ССЫЛКА Справочник.торо_ЗначенияИзмеряемыхПоказателейОбъектовРемонта
	               |			ТОГДА РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Значение.ВыделятьКакКритическоеЗначение
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ВыделятьКакКритическоеЗначение
	               |ИЗ
	               |	РегистрСведений.торо_ЗначенияКонтролируемыхПоказателей КАК РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаМаксимальныхЗначенийПоказателей КАК ВТ_ТаблицаМаксимальныхЗначенийПоказателей
	               |		ПО РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта = ВТ_ТаблицаМаксимальныхЗначенийПоказателей.ОбъектРемонта
	               |			И РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Показатель = ВТ_ТаблицаМаксимальныхЗначенийПоказателей.Показатель
	               |ГДЕ
	               |	НЕ РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.Регистратор.Организация ЕСТЬ NULL
	               |	И РегистрСведенийторо_ЗначенияКонтролируемыхПоказателей.ОбъектРемонта = &ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ТаблицаМаксимальныхЗначений", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ЗначенияКонтролируемыхПоказателей.Загрузить(Результат);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьФМ()
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	ЭтоФункциональноеМесто = ОбъектРемонта.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто");
	ВидимостьКогдаФМ = ФОИспользоватьФМ И ЭтоФункциональноеМесто;
	ВидимостьКогдаЕД = Не ВидимостьКогдаФМ; 
	
	Элементы.ВыявленныеДефектыВвестиДефект.Видимость = Элементы.ВыявленныеДефектыВвестиДефект.Видимость И ВидимостьКогдаЕД;
	
	Элементы.ВнешниеОснованияОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.ВыявленныеДефектыОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.ПредстоящиеРемонтыОбъектРемонтныхРабот.Видимость = ВидимостьКогдаФМ;
	Элементы.ЗаявкиНаРемонтОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.НарядыНаВыполнениеРемонтныхРаботОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.ВыполненныеРемонтыОбъектРемонта.Видимость = ВидимостьКогдаФМ;
	Элементы.АктыПриемкиОборудованияОбъектРемонта.Видимость = ВидимостьКогдаФМ;
КонецПроцедуры

#Область ВводПоказателей

&НаКлиенте
Процедура ПолучитьПоказателиЗавершение(СписокЗначенийСПометками, ДополнительныеПараметры) Экспорт
	
	Если СписокЗначенийСПометками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОснования = ПолучитьСтруктуруОснованияПоказателей(СписокЗначенийСПометками);
	Если Не ЗначениеЗаполнено(СтруктураОснования) Тогда
	    Возврат;
	КонецЕсли;
	
	ИмяДокумента = "Документ." + ДополнительныеПараметры.ИмяДокумента + ".ФормаОбъекта";
	
	ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
	ОткрытьФорму("Документ." + ДополнительныеПараметры.ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруОснованияПоказателей(СписокЗначенийСПометками)
	
	ВыбранныеПоказатели = Новый Массив;
	
	Для каждого Показатель из СписокЗначенийСПометками Цикл
		Если Показатель.Пометка Тогда
			СтруктураСтроки = Новый Структура("Иерархия, Показатель", ТекСтруктураИерархии, Показатель.Значение);
			ВыбранныеПоказатели.Добавить(СтруктураСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранныеПоказатели.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОР = Новый Структура("ОбъектРемонта, Показатели", ОбъектРемонта, ВыбранныеПоказатели);
	
	МассивОР = Новый Массив();
	МассивОР.Добавить(СтруктураОР);
	
	СтруктураОснования = Новый Структура("ОбъектыРемонта", МассивОР);
	Возврат СтруктураОснования;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ОбъектРемонта)
	Возврат ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,, Истина);
КонецФункции

&НаКлиенте
Процедура ОтображатьТолькоЗавершенные(Команда)
	Кнопка = Элементы.ВыполненныеРемонтыОтображатьТолькоЗавершенные;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоЗавершенныеАктыРМ(Команда)
	Кнопка = Элементы.ВыполненныеРегламентныеМероприятияОтображатьТолькоЗавершенныеАктыРМ;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмененные(Команда)
	Кнопка = Элементы.ПредстоящиеРемонтыОтображатьОтмененные;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмененныеВО(Команда)
	Кнопка = Элементы.ВнешниеОснованияОтображатьОтмененныеВО;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмененныеВД(Команда)
	Кнопка = Элементы.ВыявленныеДефектыОтображатьОтмененныеВД;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьСостояние(СтрокаСостояния, Лево, Низ)
	НоваяСтрока = СписокСостояний.Добавить();
	НоваяСтрока.Ссылка = СтрокаСостояния.Регистратор;
	НоваяСтрока.Лево = Лево;
	НоваяСтрока.Низ = Низ;
КонецПроцедуры

#КонецОбласти

#КонецОбласти