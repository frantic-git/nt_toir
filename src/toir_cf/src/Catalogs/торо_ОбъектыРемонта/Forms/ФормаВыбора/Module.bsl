
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СтруктураИерархии") И ЗначениеЗаполнено(Параметры.СтруктураИерархии) Тогда
		ТекСтруктураИерархии = Параметры.СтруктураИерархии;
	Иначе
		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);
	КонецЕсли;

	ИерархияДляВводаНовыхОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	
	Если НЕ ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		ТекСтруктураИерархии = ИерархияДляВводаНовыхОР;
	КонецЕсли;
	
	// Для основного реквизита формы это свойство установится автоматически,
	// а для дерева сделаем вручную.
	Если Параметры.МножественныйВыбор <> Неопределено Тогда
		Элементы.Дерево.МножественныйВыбор = Параметры.МножественныйВыбор;
		Элементы.Дерево.РежимВыделения = РежимВыделенияТаблицы.Множественный;
		Элементы.ДеревоПолное.МножественныйВыбор = Параметры.МножественныйВыбор;
		Элементы.ДеревоПолное.РежимВыделения = РежимВыделенияТаблицы.Множественный;
	КонецЕсли;	
	
	Если Параметры.Свойство("РазрешитьВыборКорняИерархии") Тогда
		РазрешитьВыборКорняИерархии = Параметры.РазрешитьВыборКорняИерархии;
	КонецЕсли;
	
	Если Параметры.Свойство("ВернутьИерархию") Тогда
		ВернутьИерархию = Параметры.ВернутьИерархию;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборОбъектРемонта") Тогда
		ОтборОбъектРемонта = Параметры.ОтборОбъектРемонта;
	КонецЕсли;
	
	Если Параметры.Свойство("СписокОР") Тогда
		СписокОР = Параметры.СписокОР;
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьИзмеряемыеПоказатели") Тогда
		СтруктураОтбора = Новый Структура("Ключ, Значение", "ЕстьИзмеряемыеПоказатели", Истина);
		ОтборПоНормативам.Добавить(СтруктураОтбора);
	КонецЕсли; 
	
	Если Параметры.Свойство("ЕстьПараметрыНаработки") Тогда
		СтруктураОтбора = Новый Структура("Ключ, Значение", "ЕстьПараметрыНаработки", Истина);
		ОтборПоНормативам.Добавить(СтруктураОтбора);
	КонецЕсли; 
	
	Если Параметры.Свойство("ЕстьНормативы") Тогда
		СтруктураОтбора = Новый Структура("Ключ, Значение", "ЕстьНормативы", Истина);
		ОтборПоНормативам.Добавить(СтруктураОтбора);
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрНаработки") Тогда
		ПараметрНаработки = Параметры.ПараметрНаработки;
	КонецЕсли;
	
	ЭтаФорма.РазрешитьВыборФМ = ?(Параметры.Свойство("РазрешитьВыборФМ"), Параметры.РазрешитьВыборФМ, Истина);
	ТолькоФМ = ?(Параметры.Свойство("ТолькоФМ"), Параметры.ТолькоФМ, Ложь);
	
	Если Параметры.Свойство("СписокСтатусов") Тогда
		Если ТипЗнч(Параметры.СписокСтатусов) = Тип("СписокЗначений") Тогда
			СписокСтатусов.ЗагрузитьЗначения(Параметры.СписокСтатусов.ВыгрузитьЗначения());
		ИначеЕсли ТипЗнч(Параметры.СписокСтатусов) = Тип("ФиксированныйМассив") Тогда
			СписокСтатусов.ЗагрузитьЗначения(Новый Массив(Параметры.СписокСтатусов));
		ИначеЕсли ТипЗнч(Параметры.СписокСтатусов) = Тип("Массив") Тогда
			СписокСтатусов.ЗагрузитьЗначения(Параметры.СписокСтатусов);
		КонецЕсли;
	КонецЕсли;
	
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	Если Не ФОИспользоватьДокументыЖЦОборудования Тогда
		Элементы.СтатусВУчете.Видимость = Ложь;
	КонецЕсли;

	ПолучатьСтатусыВУчетеДляДерева = ФОИспользоватьДокументыЖЦОборудования;
	
	ОбработатьИзменениеИерархииНаСервере();
	
	ПравоИнтерактивнаяПометкаУдаления = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоИнтерактивноеДобавление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.торо_ОбъектыРемонта);
	
	Если Параметры.Свойство("ЗапретитьИзменениеИерархии") И Параметры.ЗапретитьИзменениеИерархии = Истина Тогда
		Элементы.ФормаНастройкаИерархии.Доступность = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ИспользоватьВариантУчетаИерархииЭлементов") Тогда
		ИспользоватьВариантУчетаИерархииЭлементов = Параметры.ИспользоватьВариантУчетаИерархииЭлементов;
		ВариантУчетаИерархииЭлементов = Перечисления.торо_ВариантыУчетаИерархииЭлементовПриПодборе.НеУчитыватьИерархию;
	КонецЕсли;
	Элементы.ВариантУчетаИерархииЭлементов.Видимость = ИспользоватьВариантУчетаИерархииЭлементов;
	Элементы.ВариантУчетаИерархииЭлементов1.Видимость = ИспользоватьВариантУчетаИерархииЭлементов;
	
	Если ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
		ЭлементПриОткрытии = Параметры.ТекущаяСтрока;
		РодительПриОткрытии = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(Параметры.ТекущаяСтрока, ТекСтруктураИерархии,,Истина,Истина);
	КонецЕсли;
	
	Элементы.СтраницыФормы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	РазрешитьПеретаскиваниеОРВИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "РазрешитьПеретаскиваниеОРВИерархии", Истина);
	
	Если ИспользоватьКартинкиТОР Тогда 
		Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.КартинкаОтображаемая";
		Элементы.ДеревоПолное.ПутьКДаннымКартинкиСтроки = "ДеревоПолное.КартинкаОтображаемая";
	Иначе 
		Элементы.Дерево.ПутьКДаннымКартинкиСтроки = "Дерево.Картинка";
		Элементы.ДеревоПолное.ПутьКДаннымКартинкиСтроки = "ДеревоПолное.Картинка";
	КонецЕсли;
	
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	Элементы.ДобавитьФМ.Видимость = ФОИспользоватьФМ И НЕ ТекСтруктураИерархии.СтроитсяАвтоматически;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ ЗначениеЗаполнено(ИерархияДляВводаНовыхОР) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, Новый ФорматированнаяСтрока(НСтр("ru = 'Не заполнено значение константы ""Иерархия для ввода новых объектов ремонта""!'"),,,,"e1cib/app/Обработка.торо_ПанельАдминистрированияТОиР"));
		Возврат;
	КонецЕсли;	
	
	// Если установлен отбор по одному объекту ремонта, то развернем дерево целиком.
	Если ЗначениеЗаполнено(ОтборОбъектРемонта) Тогда
		МассивСтрок = Дерево.ПолучитьЭлементы()[0].ПолучитьЭлементы();
		Если МассивСтрок.Количество() > 0 Тогда
			ИДСтроки = МассивСтрок[0].ПолучитьИдентификатор();
			СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "Дерево", ИДСтроки, Истина);
		КонецЕсли;
		
		КореньПолногоДерева = ОтборОбъектРемонта;
		торо_РаботаСИерархией20КлиентСервер.ПостроитьДеревоСКонечнымиЭлементами(ДеревоПолное, СтруктураПараметровИерархии, КореньПолногоДерева, ПолучатьСтатусыВУчетеДляДерева, СписокСтатусов);
		СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоПолное",,Истина);
		ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДеревоПолное;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РодительПриОткрытии) Тогда
		СтруктураСтроки = Новый Структура("Ссылка, Родитель", ЭлементПриОткрытии, РодительПриОткрытии);
		торо_РаботаСИерархией20Клиент.ВыделитьРодителяВДереве(ЭтаФорма, СтруктураСтроки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементПриОткрытии) Тогда
		Элементы.Список.ТекущаяСтрока = ЭлементПриОткрытии;
	КонецЕсли;
	
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандФормы(ЭтаФорма);
	торо_РаботаСИерархией20Клиент.ОбновитьПутьКОбъектуРемонта(ЭтаФорма,, ИспользоватьКартинкиТОР);
	
	ЭтаФорма.Элементы.НеОтображатьГруппы.Доступность = Не ЭтаФорма.Элементы.ФормаИерархическийПросмотр.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаПометкаУдаленияОР" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОбИзмененииПометкиУдаленияОбъектаРемонта(ЭтаФорма, Параметр, "Дерево");
		Если КореньПолногоДерева <> Неопределено Тогда 
			торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОбИзмененииПометкиУдаленияОбъектаРемонта(ЭтаФорма, Параметр, "ДеревоПолное", СтруктураПараметровИерархииПолноеДерево);
			ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
		КонецЕсли;
		Если ИспользоватьКартинкиТОР Тогда
			ОбновитьКартинкиЭлементовДереваНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписанОбъектРемонта" Тогда
		торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОЗаписиОбъектаРемонта(ЭтаФорма, Параметр, "Дерево");
		Если КореньПолногоДерева <> Неопределено Тогда 
			торо_РаботаСИерархией20Клиент.ОбработкаОповещенияОЗаписиОбъектаРемонта(ЭтаФорма, Параметр, "ДеревоПолное", СтруктураПараметровИерархииПолноеДерево);
			ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
		КонецЕсли;
		Если ИспользоватьКартинкиТОР Тогда
			ОбновитьКартинкиЭлементовДереваНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененПорядокОбъектаРемонта" Тогда
		Если Параметр.СтруктураИерархии = ТекСтруктураИерархии Тогда
			торо_НастройкаПорядкаЭлементовКлиент.ИзменитьПорядокЭлементаВДереве(ЭтаФорма, Параметр);
			Если КореньПолногоДерева <> Неопределено Тогда 
				торо_НастройкаПорядкаЭлементовКлиент.ИзменитьПорядокЭлементаВДереве(ЭтаФорма, Параметр, "ДеревоПолное", "");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененаСтруктураИерархииОР" Тогда
		Если Параметр = Неопределено ИЛИ Параметр = ТекСтруктураИерархии Тогда
			торо_РаботаСИерархией20Клиент.ОбновитьДеревоИерархии(ЭтаФорма, "Дерево");
			Если КореньПолногоДерева <> Неопределено Тогда 
				ОбновитьПолноеДерево(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьТекущийЭлемент(Команда)
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДеревоПолное Тогда
		торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элементы.ДеревоПолное, Ложь, ЭтаФорма);
	Иначе
		торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элементы.Список, Ложь, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыборЗначения();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаВидДерева(Команда)
	
	Если ТекущийЭлемент = Элементы.Дерево Тогда
		ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если КореньПолногоДерева <> ТекущиеДанные.Ссылка Тогда
		КореньПолногоДерева = ТекущиеДанные.Ссылка;
		торо_РаботаСИерархией20КлиентСервер.ПостроитьДеревоСКонечнымиЭлементами(ДеревоПолное, СтруктураПараметровИерархии, КореньПолногоДерева, ПолучатьСтатусыВУчетеДляДерева, СписокСтатусов);
		СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоПолное",,Истина);
	КонецЕсли;
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДеревоПолное;
	
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтображатьГруппы(Команда)
	УстановитьОтображениеГрупп();
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаОбычныйВид(Команда)
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОбычныйВид;
	
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолноеДерево(Команда)
	
	торо_РаботаСИерархией20Клиент.ОбновитьПолноеДеревоИерархии(ЭтаФорма, СтруктураПараметровИерархииПолноеДерево);
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовПолногоДереваНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеДерево_Создать(Команда)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломДобавленияВПолноеДерево(Ложь, Ложь, ЭтаФорма, Ложь, "ДеревоПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеДерево_СоздатьГруппу(Команда)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломДобавленияВПолноеДерево(Ложь, Ложь, ЭтаФорма, Истина, "ДеревоПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеДерево_Скопировать(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПолное.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_РаботаСИерархией20Клиент.ПередНачаломДобавленияВПолноеДерево(Ложь, Истина, ЭтаФорма, ТекущиеДанные.ЭтоГруппа, "ДеревоПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДругойИерархии(Команда)
	
	ТекущиеДанныеДерева = Элементы.Дерево.ТекущиеДанные;
	ТекущаяСсылка = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Ссылка);
	
	торо_РаботаСИерархией20Клиент.ВыбратьИерархиюИзКоторойДобавитьОР(ЭтаФорма, ТекущаяСсылка, "Дерево", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовоеФМ(Команда)
	
	ТекущиеДанныеДерева = Элементы.Дерево.ТекущиеДанные;
	ТекущийРодитель = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Ссылка);
	ТекущаяСсылка = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Ссылка);
	ИндексКартинки = ?(ТекущиеДанныеДерева = Неопределено, Неопределено, ТекущиеДанныеДерева.Картинка);
	
	торо_РаботаСИерархией20Клиент.СоздатьОбъектРемонтаСОткрытиемФормы(ЭтаФорма, Ложь, Ложь, ТекущийРодитель, ТекущаяСсылка, ИндексКартинки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархическийПросмотр(Команда)
	торо_РаботаСИерархией20Клиент.ИерархическийПросмотр(ЭтаФорма, НЕ ВключенИерархическийПросмотр);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПутьКОРНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРодителейОРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаСИерархией20Клиент.ТаблицаРодителейОРВыбор(ВыбраннаяСтрока, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	торо_РаботаСИерархией20Клиент.УправлениеОтборомВСписке(ЭтаФорма,,,ОтборОбъектРемонта, НеОтображатьГруппы);
	торо_РаботаСИерархией20Клиент.ПроверитьНеобходимостьОбновленияПутиКОбъектуРемонта(ЭтаФорма,, ИспользоватьКартинкиТОР);
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандДереваПриАктивизацииСтроки(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
		
	торо_РаботаСИерархией20Клиент.ДеревоПередРазворачиванием(Дерево, Строка, СтруктураПараметровИерархии, ПолучатьСтатусыВУчетеДляДерева, СписокСтатусов);
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере(Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	торо_РаботаСИерархией20Клиент.ОбработатьВыборОРДляДерева(ЭтаФорма,ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = РазрешитьПеретаскиваниеОРВИерархии;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ОбработкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПолное

&НаКлиенте
Процедура ДеревоПолноеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборЗначения();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеПриАктивизацииСтроки(Элемент)
	
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандПолногоДереваПриАктивизацииСтроки(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = РазрешитьПеретаскиваниеОРВИерархии;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ОбработкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Истина, "ДеревоПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолноеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	торо_РаботаСИерархией20Клиент.ОбработатьВыборОРДляДерева(ЭтаФорма,ВыбранноеЗначение,"ДеревоПолное");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		торо_РаботаСИерархией20Клиент.ВыделитьРодителяВДереве(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандСпискаПриАктивизацииСтроки(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	торо_РаботаСИерархией20Клиент.ПередНачаломДобавления(Отказ, Копирование, ЭтаФорма, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Массив") Тогда
		ВыбранноеЗначение = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ВыбранноеЗначение = ВыбраннаяСтрока;
	КонецЕсли;
	торо_РаботаСИерархией20Клиент.СписокВыбор(Элемент, ВыбранноеЗначение, Поле, СтандартнаяОбработка, ЭтаФорма);
	
	// Если кликнули не на элемент с подчиненными, то СтандартнаяОбработка сброшена не будет,
	// и можно реализовывать выбор элемента.
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = Ложь;
		ВыборЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = РазрешитьПеретаскиваниеОРВИерархии;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархией20Клиент.ОбработкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
	торо_РаботаСИерархией20.СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки, ИспользоватьКартинкиТОР);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Оповещение о закрытии, вызывается при выполнении команды "Настройка иерархии".
&НаКлиенте
Процедура НастройкаИерархииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекСтруктураИерархии = ВыбранноеЗначение;
		ОбработатьИзменениеИерархииНаСервере();
		торо_РаботаСИерархией20Клиент.ОбработатьИзменениеИерархииНаКлиенте(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИерархииНаСервере()
	
	торо_РаботаСИерархией20.ОбработатьИзменениеИерархииНаСервере(ЭтаФорма, Список, Дерево, ФОИспользоватьДокументыЖЦОборудования, СписокСтатусов, ОтборОбъектРемонта,,ОтборПоНормативам);

	Если СписокОР.Количество() > 0 Тогда
		НаложитьОтборПоСпискуОбъектовИГруппам();
	ИначеЕсли ЗначениеЗаполнено(ОтборОбъектРемонта) Тогда
		НаложитьОтборПоОР();
	КонецЕсли;
	
	КореньПолногоДерева = Неопределено;
	ДеревоПолное.ПолучитьЭлементы().Очистить();
	
	СтруктураПараметровИерархииПолноеДерево = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметровИерархии);
	СтруктураПараметровИерархииПолноеДерево.КонечныеЭлементыВДереве = Истина;
	
	Если ИспользоватьКартинкиТОР Тогда
		ОбновитьКартинкиЭлементовДереваНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаложитьОтборПоОР()
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", ОтборОбъектРемонта, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
КонецПроцедуры

&НаСервере
Процедура НаложитьОтборПоСпискуОбъектовИГруппам()
	
	// Накладываем отбор: Объект ремонта в списке ИЛИ ЭтоГруппа ИЛИ есть подчиненные.

	ГруппаОтборов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, "Отбор по ссылке", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборов, "Ссылка", СписокОР, ВидСравненияКомпоновкиДанных.ВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборов, "ЭтоГруппа", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	РазрешенныеИндексыКартинок = Новый Массив;
	РазрешенныеИндексыКартинок.Добавить(2);
	РазрешенныеИндексыКартинок.Добавить(3);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборов, "ИндексКартинки", РазрешенныеИндексыКартинок, ВидСравненияКомпоновкиДанных.ВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения()
	
	УчтываетсяИерархияЭлементов = ИспользоватьВариантУчетаИерархииЭлементов И ЗначениеЗаполнено(ВариантУчетаИерархииЭлементов)
		И ВариантУчетаИерархииЭлементов <> ПредопределенноеЗначение("Перечисление.торо_ВариантыУчетаИерархииЭлементовПриПодборе.НеУчитыватьИерархию");
	
	РазрешитьВыборНеОР = (Параметры.КлючНазначенияИспользования = "ДобавлениеВИерархию");
	МассивВыбранныхСтрок = торо_РаботаСИерархией20Клиент.ПолучитьМассивДанныхВыделенныхСтрок(ЭтаФорма,,РазрешитьВыборКорняИерархии,РазрешитьВыборНеОР ИЛИ УчтываетсяИерархияЭлементов, УчтываетсяИерархияЭлементов ИЛИ РазрешитьВыборФМ);

	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РазрешитьВыборГрупп = (Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы
									ИЛИ Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
									
	Если УчтываетсяИерархияЭлементов Тогда
		МассивВыбранныхСтрок = торо_РаботаСИерархией20.ДополнитьОтобратьМассивВыбранныхСтрок(МассивВыбранныхСтрок, ВариантУчетаИерархииЭлементов, ТекСтруктураИерархии, РазрешитьВыборГрупп,,,,РазрешитьВыборФМ);
		
		Если МассивВыбранныхСтрок.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
									
	НаличиеДанныхПомеченныхНаУдаление = Ложь;
	
	Для Каждого ДанныеСтр Из МассивВыбранныхСтрок Цикл
		
		Если торо_РаботаСИерархией20КлиентСервер.ЭтоОбычнаяГруппаПоКартинке(ДанныеСтр.ИндексКартинки) И НЕ РазрешитьВыборГрупп Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя выбрать группу!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		ИначеЕсли типЗнч(ДанныеСтр.Ссылка) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
			Если РазрешитьВыборКорняИерархии Тогда
				ЭтаФорма.ЗакрыватьПриВыборе = Истина;
				ОповеститьОВыборе(ПустойРодитель);
				Возврат;
			Иначе
				ТекстСообщения = НСтр("ru = 'Нельзя выбирать корень!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		ИначеЕсли ТолькоФМ И НЕ ЭтоФМ(ДанныеСтр.Ссылка) Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя выбрать не функциональное место!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		ИначеЕсли ДанныеСтр.ПометкаУдаления = Истина Тогда
			НаличиеДанныхПомеченныхНаУдаление = Истина;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	ДопПараметры = Новый Структура("МассивВыбранныхСтрок", МассивВыбранныхСтрок);
	
	Если НаличиеДанныхПомеченныхНаУдаление Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗначенияПослеПроверкиПометкиУдаления", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = НСтр("ru = 'Выбранные данные помечены на удаление.
											|Выполнить выбор этих данных?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыборЗначенияПослеПроверкиПометкиУдаления(КодВозвратаДиалога.Да, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияПослеПроверкиПометкиУдаления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыбранныхСтрок = ДополнительныеПараметры.МассивВыбранныхСтрок;
	МассивОР = Новый Массив;
	
	Если ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда 
		
		Если Параметры.КлючНазначенияИспользования = "ДобавлениеВИерархию" Тогда
			
			ЕстьПодчиненные = Ложь;
			Для каждого ТекДанные из МассивВыбранныхСтрок Цикл
				
				Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
					Если ТипЗнч(ТекДанные.Ссылка) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
						ЕстьПодчиненные = Истина;
					КонецЕсли;
				Иначе
					Если торо_РаботаСИерархией20КлиентСервер.ЭтоОбъектСподчиненнымиПоКартинке(ТекДанные.ИндексКартинки) Тогда
						ЕстьПодчиненные = Истина;
					КонецЕсли;
				КонецЕсли;
				
				МассивОР.Добавить(ТекДанные.Ссылка);
			КонецЦикла;
			
			ДопПараметры = Новый Структура("МассивОР", МассивОР);
			
			Если ЕстьПодчиненные Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗначенияПослеВопросаОПодчиненных", ЭтотОбъект, ДопПараметры);
				ТекстВопроса = НСтр("ru = 'Выбрать все подчиненные объекты ремонта вместе с текущим?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			Иначе
				ВыборЗначенияПослеВопросаОПодчиненных(КодВозвратаДиалога.Нет, ДопПараметры); 				
			КонецЕсли;
							
		ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_НастройкаРегистрацииНаработкиЗависимыхОР" Тогда

			ШаблонСообщения = НСтр("ru = 'У выбранного объекта ремонта не ведется учет наработки по параметру ""%1"".'");
			
			Для каждого ТекДанные из МассивВыбранныхСтрок Цикл
				ВыбранноеЗначениеОР = СписокОР.НайтиПоЗначению(ТекДанные.Ссылка);
				Если ВыбранноеЗначениеОР = Неопределено Тогда
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрНаработки);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Иначе
					МассивОР.Добавить(ТекДанные.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			ВыполнитьОповещениеОВыборе(МассивОР);
			
	   КонецЕсли;
	
	Иначе
		
		Для каждого ТекДанные из МассивВыбранныхСтрок Цикл
			МассивОР.Добавить(ТекДанные.Ссылка);
		КонецЦикла;
		
		ВыполнитьОповещениеОВыборе(МассивОР);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияПослеВопросаОПодчиненных(Результат, ДополнительныеПараметры) Экспорт

	МассивОР = ДополнительныеПараметры.МассивОР;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивПодчиненных = торо_РаботаСИерархией20.ПолучитьМассивПодчиненныхОбъектовПоТаблицеИерархии(МассивОР, ТекСтруктураИерархии);
		ВыбранноеЗначение = МассивПодчиненных;
	Иначе
		ВыбранноеЗначение = МассивОР;
	КонецЕсли;
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("ОбъектРемонта", ВыбранноеЗначение);
	стрПараметров.Вставить("Иерархия", ТекСтруктураИерархии);
	стрПараметров.Вставить("КореньВетки", МассивОР[0]);
	
	ОповеститьОВыборе(стрПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОповещениеОВыборе(МассивОР)
	
	Если МассивОР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьВариантУчетаИерархииЭлементов ИЛИ НЕ ЗначениеЗаполнено(ВариантУчетаИерархииЭлементов)
		ИЛИ ВариантУчетаИерархииЭлементов = ПредопределенноеЗначение("Перечисление.торо_ВариантыУчетаИерархииЭлементовПриПодборе.НеУчитыватьИерархию") Тогда
		
		Если Элементы.Список.МножественныйВыбор Тогда
			ВыбранноеЗначение = МассивОР;
		Иначе
			ВыбранноеЗначение = МассивОР[0];
		КонецЕсли;
		
	Иначе
		ВыбранноеЗначение = МассивОР;
	КонецЕсли;
	
	Если ВернутьИерархию Тогда
		стрПараметров = Новый Структура;
		стрПараметров.Вставить("ОбъектРемонта", ВыбранноеЗначение);
		стрПараметров.Вставить("Иерархия", ТекСтруктураИерархии);
		
		ОповеститьОВыборе(стрПараметров);
	Иначе
		ОповеститьОВыборе(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьКартинкиЭлементовПолногоДереваНаСервере()
	торо_РаботаСИерархией20.ОбновитьКартинкиЭлементовПолногоДереваНаСервере(ДеревоПолное);
КонецПроцедуры

&НаСервере 
Процедура ОбновитьКартинкиЭлементовДереваНаСервере(ИдентификаторСтроки = 0) 
	торо_РаботаСИерархией20.ОбновитьКартинкиЭлементовДереваНаСервере(Дерево, ИдентификаторСтроки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоФМ(ТекЗначение)
	
	 ИспользоватьФМ = Константы.торо_ИспользоватьФункциональныеМеста.Получить();
	 Если ИспользоватьФМ И ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ТекЗначение.ЭтоГруппа 
	   И ТекЗначение.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
	     Возврат Истина;
	 КонецЕсли;
	 
	 Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтображениеГрупп() Экспорт
	НеОтображатьГруппы = Не НеОтображатьГруппы;
	Элементы.НеОтображатьГруппы.Пометка = НеОтображатьГруппы;
	
	торо_РаботаСИерархией20Клиент.УправлениеОтборомВСписке(ЭтаФорма,,,ОтборОбъектРемонта, НеОтображатьГруппы);
	торо_РаботаСИерархией20Клиент.ПроверитьНеобходимостьОбновленияПутиКОбъектуРемонта(ЭтаФорма,, ИспользоватьКартинкиТОР);
	торо_РаботаСИерархией20Клиент.УстановитьДоступностьКомандДереваПриАктивизацииСтроки(ЭтаФорма, Элементы.Дерево.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти
