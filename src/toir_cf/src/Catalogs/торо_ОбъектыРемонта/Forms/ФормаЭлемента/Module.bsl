////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПравоРедактирования = ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные());
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	Контекст.Вставить("ПроизвольныйОбъект",         Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	
	торо_УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Неопределено);
	ПривязатьОбработчикИзмененияДопРеквизитов();
	УнаследоватьДопРеквизитыИзТиповогоОР();
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "КонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	
	РастянутьПоляКонтактнойИнформации();
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	Если Параметры.Свойство("СтруктураИерархии") И ЗначениеЗаполнено(Параметры.СтруктураИерархии) Тогда
		ТекСтруктураИерархии = Параметры.СтруктураИерархии;
	Иначе
		ТекСтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОписаниеОшибки = "";
		Если НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("28DD") И НЕ слкМенеджерЗащиты.ПроверитьЛицензиюСеанса("5DD5") Тогда
			ТекстСообщения = НСтр("ru='Лицензия не обнаружена! Создание объекта ремонта невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		РодительИерархии = ?(Параметры.Свойство("РодительИерархии"), Параметры.РодительИерархии, Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		ЭтоНовыйЭлемент = Истина;
		
		Модифицированность = Истина;
		ЗаполнитьПослеКопирования();
	КонецЕсли;
	
	Родитель = НайтиРодителяИерархии(ТекСтруктураИерархии, Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(Родитель) и ЗначениеЗаполнено(РодительИерархии) Тогда
		Родитель = РодительИерархии;
	КонецЕсли;

	ОтображатьИзображение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР","ОбъектыРемонта_ОтображатьИзображение", Ложь);
	
	ТекТиповойОР  = Объект.ТиповойОР;
	ПредТиповойОР = ?(Параметры.Ключ.Пустая(), Справочники.торо_ТиповыеОР.ПустаяСсылка(), Объект.ТиповойОР);

	МодифицированностьНормРемонтов          = Ложь;
	
	// ЖЦ Оборудования++
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		ЗаполнитьДатыЭксплуатации();
		УстановитьФлагПланированияИДоступность(Не ЗначениеЗаполнено(Объект.Ссылка));
	КонецЕсли; 
	// ЖЦ Оборудования--
	
	// Гарантии++
	ФОИспользоватьГарантии = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	Если ФОИспользоватьГарантии Тогда
		
		ТаблицаГарантий = торо_ГарантийноеОбслуживание.ПолучитьТаблицуГарантий(Объект.Ссылка);
		
		Если Не ТаблицаГарантий = Неопределено  Тогда
			ГарантииОбъектаРемонта.Загрузить(ТаблицаГарантий);
		КонецЕсли; 
		
		Если ГарантииОбъектаРемонта.Количество() > 0 Тогда
			ЕстьГарантияДляОбъекта = Истина;
		Иначе
			ЕстьГарантияДляОбъекта = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	// Гарантии--
		
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	Если ФОИспользоватьФМ И Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		ЗаполнитьДеревоОграниченийНаСервере();
		ЗаполнитьТиповойСостав();
		ЗаполнитьУстановленныеОР();
	КонецЕсли;
		
	// Ремонты_по_состоянию++
	ФОИспользоватьРемонтыПоСостоянию = ПолучитьФункциональнуюОпцию("торо_ИспользоватьРемонтыПоСостоянию");
	// Ремонты_по_состоянию--
	
	УстановитьВидимостьДоступность(Истина);
	УстановитьПараметрыЗапросовНаСервере();
	
	ФОХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	ФОРасширенныйРежимМТО = ПолучитьФункциональнуюОпцию("торо_РасширенныйРежимМТО");
	Элементы.Организация.АвтоОтметкаНезаполненного = ФОРасширенныйРежимМТО;
	Элементы.Подразделение.АвтоОтметкаНезаполненного = ФОРасширенныйРежимМТО;
	
	ФОИспользоватьКоэффициентыРемонтныхОсобенностей = ПолучитьФункциональнуюОпцию("торо_ИспользоватьКоэффициентыРемОсобенностей");
	Элементы.СтраницаКоэффициентыРемонтныхОсобенностей.Видимость = ФОИспользоватьКоэффициентыРемонтныхОсобенностей;
	
	ФОИспользованиеОценокРМ = ПолучитьФункциональнуюОпцию("торо_ИспользованиеОценокРМ");
	Элементы.СтраницаОценкаРМ.Видимость = ФОИспользованиеОценокРМ;
	
	ФОУчетЗапчастей = ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	Элементы.СтраницаЗапчасти.Видимость = ФОУчетЗапчастей;
	
	ФОИспользоватьПланированиеПоЖесткимРемЦиклам = ПолучитьФункциональнуюОпцию("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам");
	Элементы.СтраницаФиксированныеРемонтныеЦиклы.Видимость = ФОИспользоватьПланированиеПоЖесткимРемЦиклам;
		
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("ТабЗапчастейОбъектовРемонта");
	ИменаТаблицФормы.Добавить("ТабЗатратПоВидамРемонта");
	ИменаТаблицФормы.Добавить("НормативныеРемонты");
	ИменаТаблицФормы.Добавить("ПредшествующиеРемонты");
	ИменаТаблицФормы.Добавить("ЗамещаемыеРемонты");
	ИменаТаблицФормы.Добавить("ТаблицаОценокРМ");
	ИменаТаблицФормы.Добавить("ТабличноеПолеРемонтныеЦиклыОборудования");  
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	торо_УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Неопределено);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
	Иначе
		АдресКартинки = "";
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
				
	Если ЗначениеЗаполнено(Объект.ТиповойОР) И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТиповойОРПриИзменении(Элементы.ТиповойОР);
	КонецЕсли;
	
	ВыбраноОсновное = Истина;
	ВыборОсновногоЗависимого = "Основное";
	
	Кнопка = ЭтаФорма.ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаГлобальные.ПодчиненныеЭлементы.Найти("ПодменюПечать");
	Если Кнопка <> Неопределено Тогда
		Кнопка.Вид = ВидГруппыФормы.Подменю;
		Кнопка.Картинка = БиблиотекаКартинок.Печать;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Проверка выполняется только если отключена возможность вводить документ ЖЦ оборудования.
	Если НЕ ФОИспользоватьДокументыЖЦОборудования
		И ЗначениеЗаполнено(Объект.ДатаВводаВЭксплуатацию) 
		И Объект.ДатаВыпуска > Объект.ДатаВводаВЭксплуатацию Тогда
		
		ТекстСообщение = НСтр("ru = 'Дата выпуска не может быть больше даты ввода в эксплуатацию!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщение,,,, Отказ);
	КонецЕсли;
	
	// Проверка уникальности штрих-кода
	Если Не ШтрихКодУникален() Тогда
		ТекстСообщение = НСтр("ru = 'Введённый штрих-код не уникален!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщение,, "Объект.ШтрихКод",, Отказ);

	КонецЕсли;
	
	// ТЧ НОРМАТИВНЫЕ РЕМОНТЫ
	Для Каждого ТекДанные Из НормативныеРемонты Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Вид ремонта"" в таблице ""Нормативные ремонты""!'");
			Поле = СтрШаблон("НормативныеРемонты[%1].ВидРемонта", НормативныеРемонты.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		МассивСтрок = НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид ремонта"" ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
			Иначе
				ТекстСообщения = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Вид ремонта"" в таблице ""Нормативные ремонты""!'");
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "НормативныеРемонты" ,, Отказ);
			КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекДанные.НормативныйРемонт) Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Технологическая карта"" для вида ремонта ""(%1)"" в таблице ""Нормативные ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
			Поле = СтрШаблон("НормативныеРемонты[%1].НормативныйРемонт", НормативныеРемонты.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекДанные.СпособПланирования) Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Способ планирования"" для вида ремонта ""(%1)"" в таблице ""Нормативные ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);  
			Поле = СтрШаблон("НормативныеРемонты[%1].СпособПланирования", НормативныеРемонты.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
	КонецЦикла;
	// ТЧ НОРМАТИВНЫЕ РЕМОНТЫ
	
	// ТЧ ПРЕДШЕСТВУЮЩИЕ РЕМОНТЫ
	Для Каждого ТекДанные Из ПредшествующиеРемонты Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.ПредшествующийВидРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Предшествующий вид ремонта"" в таблице ""Предшествующие ремонты""!'");
			Поле = СтрШаблон("ПредшествующиеРемонты[%1].ПредшествующийВидРемонта", ПредшествующиеРемонты.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		МассивСтрок = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта, ПредшествующийВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта, ТекДанные.ПредшествующийВидРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Предшествующий вид ремонта"" ""(%1)"" в таблице ""Предшествующие ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ПредшествующийВидРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ПредшествующиеРемонты",, Отказ);

		КонецЕсли;	
	КонецЦикла;
	// ТЧ ПРЕДШЕСТВУЮЩИЕ РЕМОНТЫ
	
	// ТЧ ЗАМЕЩАЕМЫЕ РЕМОНТЫ
	Для Каждого ТекДанные Из ЗамещаемыеРемонты Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.ЗамещаемыйВидРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Замещ. вид ремонта"" в таблице ""Замещаемые ремонты""!'");
			Поле = СтрШаблон("ЗамещаемыеРемонты[%1].ЗамещаемыйВидРемонта", ЗамещаемыеРемонты.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		МассивСтрок = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта, ТиповойОР, ЗамещаемыйВидРемонта", 
									ТекДанные.ВидРемонта, ТекДанные.ТиповойОР, ТекДанные.ЗамещаемыйВидРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Замещ. вид ремонта"" ""(%1)"" в таблице ""Замещаемые ремонты""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ЗамещаемыйВидРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ЗамещаемыеРемонты",, Отказ);

		КонецЕсли;
	КонецЦикла;
	// ТЧ ЗАМЕЩАЕМЫЕ РЕМОНТЫ
	
	// ТЧ ТабличноеПолеРемонтныеЦиклыОборудования
	Для Каждого ТекДанные Из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
		Если НЕ ЗначениеЗаполнено(ТекДанные.ВидЦепочки) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Вид цепочки"" в таблице ""Ремонтные циклы оборудования""!'");
			Поле = СтрШаблон("ТабличноеПолеРемонтныеЦиклыОборудования[%1].ВидЦепочки", ТабличноеПолеРемонтныеЦиклыОборудования.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,,Отказ);
		КонецЕсли;
		
		МассивСтрок = ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ВидЦепочки", ТекДанные.ВидЦепочки));
		Если МассивСтрок.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид цепочки"" ""(%1)"" в таблице ""Ремонтные циклы оборудования""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидЦепочки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТабличноеПолеРемонтныеЦиклыОборудования",, Отказ);

		КонецЕсли;
		
		Если ПроверитьПересеченияНаСервере(ТекДанные.ВидЦепочки) Тогда
			Отказ = Истина;

		КонецЕсли;
	КонецЦикла;
	
	// ТЧ ТабличноеПолеРемонтныеЦиклыОборудования	
	
	// ТЧ ТабЗапчастейОбъектовРемонта

	Для Каждого ТекДанные Из ТабЗапчастейОбъектовРемонта Цикл
		ТекстОшибки = "";
		Если ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Номенклатура"" в таблице ""Запчасти""!'");  
			Поле = СтрШаблон("ТабЗапчастейОбъектовРемонта[%1].Номенклатура", ТабЗапчастейОбъектовРемонта.Индекс(ТекДанные));
		ИначеЕсли ТекДанные.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")
			И ТекДанные.ХарактеристикиИспользуются = Истина И ФОХарактеристикиИспользуются = Истина И Не ТекДанные.Удален = Истина Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружены незаполненная поля ""Характеристика номенклатуры"" в таблице запчасти!'"); 
			Поле = СтрШаблон("ТабЗапчастейОбъектовРемонта[%1].Характеристика", ТабЗапчастейОбъектовРемонта.Индекс(ТекДанные));
		Иначе
			СтруктураПараметр = Новый Структура;
			СтруктураПараметр.Вставить("Номенклатура",ТекДанные.Номенклатура);
			СтруктураПараметр.Вставить("Характеристика",ТекДанные.Характеристика);
			СтруктураПараметр.Вставить("Удален", Ложь);
			СтруктураПараметр.Вставить("ИзТипового", Ложь);
			Поле = "ТабЗапчастейОбъектовРемонта";
			СтрокиНоменклатуры = ТабЗапчастейОбъектовРемонта.НайтиСтроки(СтруктураПараметр);
			Если СтрокиНоменклатуры.Количество() > 1 Тогда
				Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Номенклатура"" (""%1"") в таблице ""Запчасти""!'");
					ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Номенклатура);
				Иначе
					ТекстОшибки = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Номенклатура"" в таблице ""Запчасти""!'");
				КонецЕсли;
			ИначеЕсли ТекДанные.Количество = 0 Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Количество номенклатуры"" для номенклатуры ""%1"" в таблице ""Запчасти""!'");
				Поле = СтрШаблон("ТабЗапчастейОбъектовРемонта[%1].Количество", ТабЗапчастейОбъектовРемонта.Индекс(ТекДанные));
				ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Номенклатура);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = "" И НЕ ТекДанные.Удален Тогда
			
			Поле = "ТабЗапчастейОбъектовРемонта";
			МассивСтрок = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Удален", 
				Текданные.Номенклатура, Текданные.Характеристика, Ложь));
			
			МаксКол = 0;
			
			Для Каждого Элем Из МассивСтрок Цикл
				Если Элем.Количество > МаксКол Тогда
					МаксКол = Элем.Количество;
					ВР = Элем.ВидРемонта;
				КонецЕсли;
			КонецЦикла;
			
			Если МаксКол > ТекДанные.Количество Тогда
				Если ЗначениеЗаполнено(ВР) Тогда
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для вида ремонта ""%2"" больше, чем количество в составе объекта ремонта!'"),МаксКол,ВР);
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для незаполненного вида ремонта больше, чем количество в составе объекта ремонта!'"),МаксКол);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ТекстОшибки = "" Тогда
			#Если НЕ ВебКлиент Тогда
				Отказ = Истина;
			#КонецЕсли
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, Поле);

		КонецЕсли;
	КонецЦикла;
	// ТЧ ТабЗапчастейОбъектовРемонта	
		
	// ТЧ ТабЗатратПоВидамРемонта
	Для Каждого ТекДанные Из ТабЗатратПоВидамРемонта Цикл 
		
		Если ТекДанные.Удален Тогда 
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Удален", ТекДанные.Номенклатура, ТекДанные.Характеристика, Ложь);
		ТекДанныеЗапчастей = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Отбор)[0];
		
		ТекстОшибки = "";

		// проверка
		Если ТекДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Вид ремонта"" в таблице ""Нормативные затраты при ТОиР""!'");
			Поле = СтрШаблон("ТабЗатратПоВидамРемонта[%1].ВидРемонта", ТабЗатратПоВидамРемонта.Индекс(ТекДанные));
		Иначе
			Если ТекДанные.Количество = 0 Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Кол-во"" для вида ремонта ""%1"" в таблице ""Нормативные затраты при ТОиР""!'");
				ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта); 
				Поле = СтрШаблон("ТабЗатратПоВидамРемонта[%1].Количество", ТабЗатратПоВидамРемонта.Индекс(ТекДанные));
			Иначе
				Если ТекДанныеЗапчастей <> Неопределено Тогда
					Поле = "ТабЗатратПоВидамРемонта";
					СтруктураПараметр = Новый Структура("ВидРемонта, Номенклатура, Характеристика, Удален, ИзТипового");
					ЗаполнитьЗначенияСвойств(СтруктураПараметр,ТекДанные);
					СтруктураПараметр.Удален = Ложь;
										
					СтрокиНоменклатуры = ТабЗатратПоВидамРемонта.НайтиСтроки(СтруктураПараметр);
					Если СтрокиНоменклатуры.Количество() > 1 Тогда
						ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид ремонта"" ""(%1)"" в таблице ""Нормативные затраты при ТОиР""!'");
						ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
					КонецЕсли;
				
					Если ТекДанные.Количество > ТекДанныеЗапчастей.Количество Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для (%2) при виде ремонта (%3) больше, чем количество в составе объекта ремонта!'"),ТекДанные.Количество, ТекДанные.Номенклатура, ТекДанные.ВидРемонта);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Если ТекстОшибки <> "" Тогда
			#Если НЕ ВебКлиент Тогда
				Отказ = Истина;
			#КонецЕсли
				
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, Поле);

		КонецЕсли;

	КонецЦикла;
	// ТЧ ТабЗатратПоВидамРемонта
	
	// ТЧ ТаблицаОценокРМ
	Для Каждого ТекДанные Из ТаблицаОценокРМ Цикл
		Если Не ЗначениеЗаполнено(ТекДанные.Период) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Дата"" в таблице ""Оценка РМ""!'");
			Поле = СтрШаблон("ТаблицаОценокРМ[%1].Период", ТаблицаОценокРМ.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Вид ремонта"" в таблице ""Оценка РМ""!'");
			Поле = СтрШаблон("ТаблицаОценокРМ[%1].ВидРемонта", ТаблицаОценокРМ.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.ВероятностьВыходаИзСтроя) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Вероятность выхода из строя"" в таблице ""Оценка РМ""!'");
			Поле = СтрШаблон("ТаблицаОценокРМ[%1].ВероятностьВыходаИзСтроя", ТаблицаОценокРМ.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.Ущерб) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Ущерб"" в таблице ""Оценка РМ""!'");
			Поле = СтрШаблон("ТаблицаОценокРМ[%1].Ущерб", ТаблицаОценокРМ.Индекс(ТекДанные));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
	КонецЦикла;
	// ТЧ ТаблицаОценокРМ
	
	// ТЧ Основное и зависимое оборудование 
	СохранитьДанныеИзЭлементовФормы(ЭтаФорма);
	Основное = ОсновноеОборудование.ПолучитьЭлементы();
	ОсновноеСоответствие = Новый Соответствие;
	Для Каждого ТекДанные Из Основное Цикл
		Если НЕ ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Объект ремонта"" в таблице ""Основное оборудование""!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СписокОбъектовРемонта",, Отказ);
		ИначеЕсли ОсновноеСоответствие.Получить(ТекДанные.ОбъектРемонта) = Неопределено Тогда
			ОсновноеСоответствие.Вставить(ТекДанные.ОбъектРемонта, ТекДанные.ОбъектРемонта);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Объект ремонта"" ""(%1)"" в таблице ""Основное оборудование""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СписокОбъектовРемонта",, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Зависисмое = ЗависимоеОборудование.ПолучитьЭлементы();
	ЗависимоеСоответствие = Новый Соответствие;
	Для Каждого ТекДанные Из Зависисмое Цикл
		Если НЕ ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Объект ремонта"" в таблице ""Зависимое оборудование""!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СписокОбъектовРемонта",, Отказ);
		ИначеЕсли ЗависимоеСоответствие.Получить(ТекДанные.ОбъектРемонта) = Неопределено Тогда
			ЗависимоеСоответствие.Вставить(ТекДанные.ОбъектРемонта, ТекДанные.ОбъектРемонта);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Объект ремонта"" ""(%1)"" в таблице ""Зависимое оборудование""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СписокОбъектовРемонта",, Отказ);
		КонецЕсли;
	КонецЦикла;
	// ТЧ Основное и зависимое оборудование
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеНормативныхРемонтов(Отказ);
	ПроверитьЗаполнениеЗамещаемыхРемонтов(Отказ);
	ПроверитьЗаполнениеГарантийОбъектовРемонта(Отказ);
	ПроверитьЗаполнениеХарактеристикЗапчастей(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ДублиСредиЦепочекРЦ() Тогда
		ШаблонСообщения = НСтр("ru = 'Типовой объект ремонта ""%1"" содержит в себе уже указанные для объекта ремонта фиксированные ремонтные циклы, запись невозможна'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Объект.ТиповойОР);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли; 
	
	Если ИспользоватьФМ() 
		И Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда
		
		Объект.ВнешнийОбъект = Ложь;
		Объект.ЭтоАктив = Ложь;
		Объект.СрокПолезногоИспользования = Неопределено;
		Объект.Изготовитель = Неопределено;
		Объект.ДатаВыпуска = ?(ЗначениеЗаполнено(Объект.ДатаВводаВЭксплуатацию), Объект.ДатаВводаВЭксплуатацию, ТекущаяДата());
		Объект.НомерПаспорта = "";
		Объект.ЗаводскойНомер = "";
		Объект.КодПоОКОФ = Неопределено;
		
		ПроверкаНаличияРеквизита = Новый Структура("Свойства_ИспользоватьДопРеквизиты");
		ЗаполнитьЗначенияСвойств(ПроверкаНаличияРеквизита, ЭтаФорма);
		
		Если ТипЗнч(ПроверкаНаличияРеквизита.Свойства_ИспользоватьДопРеквизиты) = Тип("Булево") Тогда
			Для каждого Строка Из ЭтаФорма.Свойства_ЗначенияДополнительныхРеквизитов Цикл
				Строка.Значение             = Неопределено;
				Строка.ЗаполнятьОбязательно = Ложь;
			КонецЦикла;				
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВнешнийОбъект Тогда
		Объект.Организация = Неопределено;
		Объект.Подразделение = Неопределено;
	Иначе
		Объект.Контрагент = Неопределено;
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		
		Если Не ЗначениеЗаполнено(ДатаВводаВЭксплуатацию) Тогда 
			ТекстСообщения = НСтр("ru = 'Объект ремонта будет недоступен для подбора в документы ""Ввод начальных данных"", ""Учет наработки оборудования"", ""Состояния объектов ремонта"". Введите документ ""Принятие объекта ремонта к учету"" (Группа ""Статус объекта ремонта"")'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ВвестиОткрытьДокументПринятиеКУчету");
		КонецЕсли;
		
		Объект.ДатаВводаВЭксплуатацию = ДатаВводаВЭксплуатацию;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВводаВЭксплуатацию) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле <Дата ввода в эксплуатацию>. Запись не выполнена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ДатаВводаВЭксплуатацию",, Отказ);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если (МодифицированностьНормРемонтов Или МодифицированностьЗамещаемыхРемонтов Или  МодифицированностьПредшествующихРемонтов)
		И ЗначениеЗаполнено(ВРНачалоЦикла) Тогда
		
		ОчиститьЗакладкуСтруктураРемонтногоЦикла();
		
		ТекстСообщения = НСтр("ru = 'Данные на вкладке <Структура ремонтного цикла> были очищены, так как нормативы изменены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
			
	Для каждого Ремонт Из НормативныеРемонты Цикл 
		
		СтрокиПредРемонтов = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", Ремонт.ТиповойОР, Ремонт.ВидРемонта));
		
		Если СтрокиПредРемонтов.Количество() = 0 И Ремонт.Удален = Ложь И ЗначениеЗаполнено(Ремонт.ВидРемонта) Тогда 
			ШаблонСообщения = НСтр("ru = 'Для ремонта ""%1"" в нормативных ремонтах не заполнены предшествующие ремонты. Запись была отменена!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Ремонт.ВидРемонта);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		 КонецЕсли;		 
	 КонецЦикла;
	 
	 Если НЕ Отказ и ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
		 Для каждого Ремонт Из НормативныеРемонты Цикл 
			 Если НЕ ЗначениеЗаполнено(Ремонт.ТиповойОР) И Ремонт.Удален = Ложь Тогда
				 СовпадающиеРемонты = НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", Объект.ТиповойОР, Ремонт.ВидРемонта));
				 Если СовпадающиеРемонты.Количество() > 0 Тогда 
					 СовпадающиеРемонты[0].Удален = Истина;
					 МодифицированностьНормРемонтов = Истина;
				 КонецЕсли;
			 КонецЕсли;
		 КонецЦикла;
	 КонецЕсли;
	 
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекСтруктураИерархии", ТекСтруктураИерархии);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РодительИерархии", РодительИерархии);
	КонецЕсли;
	
	СтеретьЗначенияУнаследованныхРеквизитовТиповогоОР();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	 
	 МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);
	 
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекОбъект = Объект.Ссылка;
	Иначе
		ТекОбъект = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	ЗаписатьЗапчасти(ТекОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ЗаписатьНормативныеРемонты(ТекОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ЗаписатьРемонтныеЦиклы(ТекОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьОценкиРМ(ТекОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьГарантии(ТекОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьОсновноеЗависимоеОборудование(ТекОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзменениеРодителя(Отказ);
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") Тогда 
		ЭтоФМ = Ложь;
		Если ТекОбъект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
			ЭтоФМ = Истина;
			ЗаписатьОграниченияНаХарактеристики(ТекОбъект, Отказ);
			ЗаписатьТиповойСостав(ТекОбъект, Отказ);
		КонецЕсли;
		
     	ЗаписатьОбъектВРегистрДляПроверкиТребований(ТекОбъект, ЭтоФМ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПредТиповойОР = Объект.ТиповойОР;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		Если Не Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Доступность = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	УнаследоватьДопРеквизитыИзТиповогоОР();
	УстановитьПараметрыЗапросовНаСервере();
	УстановитьВидимостьДоступность();
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") 
	  И Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		ОбновитьСтраницуОграничений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Для обновления данных в дереве ОР.
	СтруктураРеквизитов = Новый Структура("Ссылка, ПометкаУдаления, Наименование, ТипОбъекта", Объект.Ссылка, Объект.ПометкаУдаления, Объект.Наименование, Объект.ТипОбъекта);
	
	Если ЭтоНовыйЭлемент Тогда
		СтруктураРеквизитов.Вставить("ЭтоНовый", ЭтоНовыйЭлемент);						
		СтруктураРеквизитов.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		СтруктураРеквизитов.Вставить("РодительИерархии", РодительИерархии);
	КонецЕсли;
	
	Оповестить("ЗаписанОбъектРемонта", СтруктураРеквизитов, ЭтаФорма);
	
	Если МодифицированностьРодителя Тогда
		Оповестить("ИзмененаСтруктураИерархииОР", ТекСтруктураИерархии, ЭтаФорма);
		МодифицированностьРодителя = Ложь;
	КонецЕсли;
	
	УстановитьКоличествоОсновногоЗависимогоОборудования();
	
	ЭтоНовыйЭлемент = Ложь;
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере(ОтображатьИзображение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(ОтображатьИзображение)
	ХранилищеОбщихНастроек.Сохранить("НастройкиТОиР", "ОбъектыРемонта_ОтображатьИзображение", ОтображатьИзображение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонтаПрисоединенныеФайлы") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Объект.ФайлКартинки = ВыбранноеЗначение;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ФОИспользоватьДокументыЖЦОборудования
		И ИмяСобытия  = "СОЗДАН_ДОКУМЕНТ_ПРИНЯТИЕ_К_УЧЕТУ"
		И Параметр.Свойство("ОбъектРемонта")
		И Параметр.ОбъектРемонта = Объект.Ссылка Тогда
		
		Прочитать();
		ЗаполнитьДатыЭксплуатации();
		
		Если ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Заголовок   = РегистраторСнятияСУчета;
		Иначе
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Заголовок   = НСтр("ru = 'Ввести документ ""Выбытие объекта ремонта""'");
		КонецЕсли;
		
		УстановитьФлагПланированияИДоступность(Истина);
		УстановитьВидимостьДоступность();
		
	ИначеЕсли ФОИспользоватьДокументыЖЦОборудования
		И ИмяСобытия  = "СОЗДАН_ДОКУМЕНТ_СНЯТИЕ_С_УЧЕТА" И Параметр = Объект.Ссылка Тогда	
		
		Прочитать();
		ЗаполнитьДатыЭксплуатации();
		УстановитьФлагПланированияИДоступность(Истина);
		УстановитьВидимостьДоступность();
		
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" ИЛИ ИмяСобытия = "Запись_Файл" Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = Неопределено;
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			Если Источник.Количество() > 0 Тогда
				СсылкаНаФайл = Источник[0];
			КонецЕсли;
		Иначе
			СсылкаНаФайл = Источник;
		КонецЕсли;
		
		Если ВыборИзображения И СсылкаНаФайл <> Неопределено Тогда
			
			Объект.ФайлКартинки = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
						
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИЗМЕНЕН_ТИПОВОЙ_ОБЪЕКТ" Тогда
		Если Модифицированность = Ложь Тогда
			ТиповойОРПриИзменении(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		торо_УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
    МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	торо_УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Направление = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР,"Направление") Тогда
		Элемент.ЦветТекста = Новый Цвет(128,128,128);
	Иначе
		Элемент.ЦветТекста = Новый Цвет(0,0,0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТипОбъекта) Тогда
		ТипОбъектаПриИзменении_Сервер()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТиповойОРПриИзменении(Элемент)
	
	Если ИспользоватьФМ() Тогда  
		Если ЗначениеЗаполнено(Объект.ТиповойОР) И НЕ ПроверитьТипТОР(Объект.ТиповойОР) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Тип объекта выбранного Типового ОР не соответствует типу объекта ремонта!'"));
			Объект.ТиповойОР = ТекТиповойОР;
			Возврат;
		КонецЕсли;
		
		Если Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда
			ЗаполнитьОграниченияИзТОР();
		КонецЕсли;
	КонецЕсли;
				
	ЗаполнитьНормативныеРемонты();
	
	// обновить нормативные ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуНормативныхРемонтов(Объект.ТиповойОР);		
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			НормативныеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Элем Из СтруктураВозврата Цикл
		НС = НормативныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;	
	
	// обновить предшествующие ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуПредшествующихРемонтов(Объект.ТиповойОР);
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ПредшествующиеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из СтруктураВозврата Цикл
		НС = ПредшествующиеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;	
	МодифицированностьПредшествующихРемонтов = Истина;
	
	// Обновить фиксированные ремонтные циклы
	МассивЦепочек = ОбновитьФиксированныеРемонтныеЦиклы(Объект.Ссылка, Объект.ТиповойОР, Ложь);
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда 
		СтрокиДляУдаления = ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов, ТиповойОР", ТекТиповойОР, Истина));
		Для каждого Строка Из СтрокиДляУдаления Цикл 
			ТабличноеПолеРемонтныеЦиклыОборудования.Удалить(Строка);
		КонецЦикла;
		
		СтрокиДляУдаления = РемЦиклыОборудования.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов, ТиповойОР", ТекТиповойОР, Истина));
		Для каждого Строка Из СтрокиДляУдаления Цикл
			РемЦиклыОборудования.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Элем Из МассивЦепочек Цикл
		НС = ТабличноеПолеРемонтныеЦиклыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		
		НС = РемЦиклыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	МодифицированностьРемЦиклов = Истина;
	
	// Обновить замещаемые ремонты
	СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуЗамещаемыхРемонтов(Объект.ТиповойОР);
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ЗамещаемыеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из СтруктураВозврата Цикл
		НС = ЗамещаемыеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	МодифицированностьЗамещаемыхРемонтов = Истина;
	
	Если Элемент = Элементы.ТиповойОР Тогда
		ИзмененИзготовитель = Ложь;
		ИзмененоНаправление = Ложь;
		текИзготовительТипового = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР, "Изготовитель");
		текНаправлениеТипового = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР, "Направление");
		Если текИзготовительТипового = Объект.Изготовитель ИЛИ НЕ ЗначениеЗаполнено(Объект.Изготовитель) Тогда
			Объект.Изготовитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ТиповойОР, "Изготовитель");
			Элементы.Изготовитель.ЦветТекста = Новый Цвет(128,128,128);
		КонецЕсли; 
		Если текНаправлениеТипового = Объект.Направление ИЛИ НЕ ЗначениеЗаполнено(Объект.Направление) Тогда
			Объект.Направление  = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ТиповойОР, "Направление");
			Элементы.Направление.ЦветТекста = Новый Цвет(128,128,128);
		КонецЕсли; 
		
	КонецЕсли;	
	
	МодифицированностьНормРемонтов = Истина;
	
	ТекТиповойОР = Объект.ТиповойОР;
	
	// Заполнить таблицу запчастей.
	Если НЕ МодифицированностьЗапчастейОР Тогда
		СтруктураВозврата = ЗаполнитьТабЗапчастейОбъектовРемонта(Параметры.Ключ);
		Если СтруктураВозврата.Свойство("Запчасти") Тогда
			
			ТабЗапчастейОбъектовРемонта.Очистить();
			Для Каждого Стр Из СтруктураВозврата.Запчасти Цикл
				
				НС = ТабЗапчастейОбъектовРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Стр);
				НС.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(НС.Номенклатура);
				
			КонецЦикла;
			
		КонецЕсли;
		Если СтруктураВозврата.Свойство("НормаЗапчастей") Тогда
			
			ТабЗатратПоВидамРемонта.Очистить();
			Для Каждого Стр Из СтруктураВозврата.НормаЗапчастей Цикл
				
				НС = ТабЗатратПоВидамРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Стр);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
		
		СтрВозврата = ПолучитьЗапчастиИзТиповогоОР(Объект.ТиповойОР);
		
		// ТабЗатратПоВидамРемонта
		мУдаления = Новый Массив;
		Для каждого ТекСтрока из ТабЗатратПоВидамРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			ТабЗатратПоВидамРемонта.Удалить(текСтрока);
		КонецЦикла;
		
		Если СтрВозврата.Свойство("НормативныеЗатраты") Тогда
			Для каждого ТекСтрока из СтрВозврата.НормативныеЗатраты Цикл
				нс = ТабЗатратПоВидамРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ТекСтрока);
				нс.ИзТипового = Истина;
				нс.ТиповойОр = Объект.ТиповойОР;
				нс.ОбъектРемонта = Объект.Ссылка;
			КонецЦикла;
		КонецЕсли;
		
		// ТабЗапчастейОбъектовРемонта
		мУдаления.Очистить();
		Для каждого ТекСтрока из ТабЗапчастейОбъектовРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			ТабЗапчастейОбъектовРемонта.Удалить(текСтрока);
		КонецЦикла;
		
		Если СтрВозврата.Свойство("Запчасти") Тогда
			Для каждого ТекСтрока из СтрВозврата.Запчасти Цикл
				НайС = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", ТекСтрока.Номенклатура, ТекСтрока.Характеристика));
				нс = ТабЗапчастейОбъектовРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ТекСтрока);
				нс.ИзТипового = Истина;
				нс.ТиповойОр = Объект.ТиповойОР;
				нс.ОбъектРемонта = Объект.Ссылка;
				нс.Удален = НайС.Количество() > 0;
				нс.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекСтрока.Номенклатура);
				
				Если нс.Удален тогда
					НайС = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового", 
						ТекСтрока.Номенклатура, ТекСтрока.Характеристика, истина));
						
					Для каждого текЗатрата из Найс цикл
						текЗатрата.Удален = Истина;	
					КонецЦикла;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
	Иначе
		
		мУдаления = Новый Массив;
		Для каждого ТекСтрока из ТабЗапчастейОбъектовРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			ТабЗапчастейОбъектовРемонта.Удалить(текСтрока);
		КонецЦикла;
		
		мУдаления.Очистить();
		Для каждого ТекСтрока из ТабЗатратПоВидамРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			ТабЗатратПоВидамРемонта.Удалить(текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИспользоватьФМ() И Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто") Тогда
		ЗаполнитьДеревоОграниченийНаСервере();
	КонецЕсли;
	
	ПанельОРПриСменеСтраницы(Элементы.ПанельОР, Элементы.ПанельОР.ТекущаяСтраница);
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	торо_УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)

	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
	Иначе
		АдресКартинки = "";
	Конецесли;

КонецПроцедуры // ФайлКартинкиПриИзменении()

&НаКлиенте
Процедура ВнешнийОбъектПриИзменении(Элемент)
	ПоказыватьКонтрагента = Объект.ВнешнийОбъект;
	Элементы.СтраницаКонтрагента.Видимость = ПоказыватьКонтрагента;
	Элементы.СтарницаОрганизации.Видимость = НЕ ПоказыватьКонтрагента;
КонецПроцедуры

&НаКлиенте
Процедура ПанельОРПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// устанавливаем фильтры для таблиц
	Если ТекущаяСтраница = Элементы.СтраницаНормативыПланирования Тогда
		СтраницыНормативыПланированияПриСменеСтраницы(Элементы.СтраницыНормативыПланирования,Элементы.СтраницыНормативыПланирования.ПодчиненныеЭлементы[0]);
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизиты Тогда
		торо_УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновноеИЗависимоеОборудование Тогда
		Если Не МодифицированностьОсновныхЗависимых Тогда
			Если Не ВкладкаОсновноеЗависимоеОткрывалась Тогда
				ИнициализироватьОсновноеЗависимоеОборудование();
			КонецЕсли;
		КонецЕсли;
	Иначе
		// на случай неправильной (старой) компоновки страниц
		Если Элементы.СтраницыНормативыПланирования.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) <> -1 Тогда
			СтраницыНормативыПланированияПриСменеСтраницы(Элемент, ТекущаяСтраница);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзготовительПриИзменении(Элемент)
	
	Если Объект.Изготовитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР,"Изготовитель") Тогда
		Элемент.ЦветТекста = Новый Цвет(128,128,128);
	Иначе
		Элемент.ЦветТекста = Новый Цвет(0,0,0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодОткрытие(Элемент, СтандартнаяОбработка)  
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ШтрихКод, ТипШтрихКода, РежимПросмотра", Объект.ШтрихКод, Объект.ТипШтрихКода, ЗначениеЗаполнено(ДатаСнятияСУчета));
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ГенерацияШтрихкодаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.торо_ГенерацияШтрихКодов.Форма.ФормаШтрихкода", ПараметрыФормы,,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;  
	Объект.ШтрихКод = "";
	Объект.ТипШтрихКода = ПредопределенноеЗначение("Перечисление.торо_ТипыШтрихКодов.ПустаяСсылка");
	Модифицированность = Истина;
КонецПроцедуры

#Область НОРМАТИВЫ_ПЛАНИРОВАНИЯ

&НаКлиенте
Процедура СтраницыНормативыПланированияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаНормативныеРемонты Тогда
		
		ЗаполнитьНормативныеРемонты();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗапчасти Тогда
		
		ЗаполнитьЗапчасти();
			
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОценкаРМ Тогда
		
		ЗаполнитьОценкиРМ();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКоэффициентыРемонтныхОсобенностей Тогда
		
		ОбновитьКоэффициентыРемонтныхОсобенностей();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаФиксированныеРемонтныеЦиклы Тогда
		
		ЗаполнитьРемонтныеЦиклы();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВизуализацияРемонтногоЦикла Тогда
		
		ИнициализироватьЗакладкуСтруктураРемонтногоЦикла();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтраница = Элементы.ПанельОР.ТекущаяСтраница;
	
	Если МодифицированностьНормРемонтов ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ДопПараметры = Новый Структура("ТекущаяСтраница", ТекущаяСтраница);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВРНачалоЦиклаНачалоВыбора_ПослеВопросаОЗаписи", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Для продолжения необходимо записать информацию об объекте. Записать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если НормативныеРемонты.Количество() = 0 Тогда 
			ЗаполнитьНормативныеРемонты();
		КонецЕсли;
		
		СписокЗначВР = Новый СписокЗначений;
		Для каждого Элем Из НормативныеРемонты Цикл
			Если НЕ (Элем.Удален Или Элем.НеУчаствуетВПланировании) И СписокЗначВР.НайтиПоЗначению(Элем.ВидРемонта) = Неопределено Тогда
				СписокЗначВР.Добавить(Элем.ВидРемонта);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокЗначВР.Количество() > 0 Тогда
			СписокЗначВР.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВРНачалоЦиклаНачалоВыбораВыборИзСписка", ЭтаФорма, Новый Структура("Элемент", Элемент)), НСтр("ru = 'Выберите вид ремонта'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Нормативные ремонты отсутствуют!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаПриИзменении(Элемент)
	
	Если НЕ ВРНачалоЦикла = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") Тогда
		Элементы.Перерасчитать.Доступность 	= Истина;
		Элементы.Построить.Доступность 		= Истина;
		Элементы.Настройки.Доступность 		= Истина;
	Иначе 
		Элементы.Перерасчитать.Доступность 	= Ложь;
		Элементы.Построить.Доступность 		= Ложь;
		Элементы.Настройки.Доступность 		= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМнемосхемыВыбор(Элемент)
	
	Если НЕ Элемент.ТекущийЭлемент = Неопределено Тогда
		Масс = СоответствиеИндексаИНомераКолонки.НайтиСтроки(Новый Структура("ТекЭлементИмя", Элемент.ТекущийЭлемент.Имя));
		Если Масс.Количество() = 0 Тогда
			Масс = СоответствиеИндексаИНомераКолонки.НайтиСтроки(Новый Структура("ТекЭлементИмя", Элемент.ТекущийЭлемент.КонецЭлемент.Имя));
			СтруктураНомерКолонкиСдвиг = Масс[0];
		Иначе
			СтруктураНомерКолонкиСдвиг = Масс[0];
		КонецЕсли;
		НомерКолонки = СтруктураНомерКолонкиСдвиг.НомерКолонки;
		СдвигСтрок = СтруктураНомерКолонкиСдвиг.СдвигСтрок;
		ИндексСтроки = 9 + КолонкиНаработки.Количество();
		Элементы.ПолеТД.ТекущаяОбласть = ПолеТД.Область(3+СдвигСтрок,НомерКолонки,6 + ИндексСтроки - 7+СдвигСтрок);
		ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОсновногоЗависимогоПриИзменении(Элемент)
	
	// Сначала необходимо сохранить текущие настройки в ТЗ.
	СохранитьДанныеИзЭлементовФормы(ЭтаФорма);
	УстановитьКоличествоОсновногоЗависимогоОборудования();
	
	ВыбраноОсновное = (ВыборОсновногоЗависимого = "Основное");
	
	УстановитьВидимостьЭлементовФормыОсновноеЗависимое();
	ЗаполнитьОсновныеИЗависимыеРемонтыНаФорме();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормативныеРемонты

&НаКлиенте
Процедура НормативныеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьНормРемонтов = Истина;
		ТекДанные = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта) Тогда
			Если НоваяСтрока Тогда
				// переопределим предшествующие ремонты
				СтрокиПредшРемонтов = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта));
				Если СтрокиПредшРемонтов.Количество() Тогда
					Для Каждого Строка Из СтрокиПредшРемонтов Цикл
						НС = ПредшествующиеРемонты.Добавить();
						ЗаполнитьЗначенияСвойств(НС, Строка);
						НС.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
					КонецЦикла;
				Иначе 
					НС = ПредшествующиеРемонты.Добавить();
					НС.ВидРемонта = ТекДанные.ВидРемонта;
					НС.ПредшествующийВидРемонта = ТекДанные.ВидРемонта;
					НС.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
				КонецЕсли;
				
				// переопределим замещаемые ремонты
				СтрокиЗамещРемонтов = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта));
				Для Каждого Строка Из СтрокиЗамещРемонтов Цикл
					НС = ЗамещаемыеРемонты.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Строка);
					НС.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
				КонецЦикла;
				Если СтрокиЗамещРемонтов.Количество() Тогда
					МодифицированностьЗамещаемыхРемонтов = Истина;
				КонецЕсли;
				
				МодифицированностьПредшествующихРемонтов = Истина;
				
				Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ТекДанные.ВидРемонта)).Количество() = 0 Тогда
					НС = ЗапланированныеРемонты.Добавить();
					НС.ВидРемонтныхРабот = ТекДанные.ВидРемонта;
					НС.Цвет = Новый Цвет(255, 255, 255);
					НС.ЦветТекста = Новый Цвет(0, 0, 0);
					НС.Выбран = Истина;
				КонецЕсли;
				
			Иначе
				
				СтарыйВидРемонта = СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта;
				СтрокиЗапланированныхРемонтов = ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", СтарыйВидРемонта)); 
				Для каждого Строка из СтрокиЗапланированныхРемонтов Цикл
					Строка.ВидРемонтныхРабот = ТекДанные.ВидРемонта;
					Строка.Цвет = Новый Цвет(255, 255, 255);
					Строка.ЦветТекста = Новый Цвет(0, 0, 0);
					Строка.Выбран = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НормативныеРемонтыПриАктивизацииСтроки(Элементы.НормативныеРемонты);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПослеУдаления(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
		
	Если Копирование Тогда
		
		ТекДанные.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
		ТекДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
		ТекДанные.Удален = Ложь;
		МодифицированностьНормРемонтов = Истина;
		
	ИначеЕсли НоваяСтрока Тогда
		
		ТекДанные.ГрафикРемонтныхРабот = ПолучитьЗначениеГрафикаРемРаботНаСервере();
			
		ТекДанные.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ");
			
		ТекДанные.СпособУчетаДатыОтсчета = ПредопределенноеЗначение("Перечисление.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.ИспользоватьДатуВводаВЭксплуатацию");
		
		МодифицированностьНормРемонтов = Истина;
			
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ОтменаРедактирования Тогда
		МассивСтрок = НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид ремонта"" ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
			Иначе
				ТекстСообщения = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Вид ремонта"" в таблице ""Нормативные ремонты""!'");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"НормативныеРемонты",, Отказ);
			Возврат;
		КонецЕсли;
		
		Если Не Отказ И Не НоваяСтрока И СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено
			И СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта <> ТекДанные.ВидРемонта 
			И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидРемонта) Тогда
			СтарыйВР = СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта;
			НайденныеСтроки = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ВидРемонта, ТиповойОР", СтарыйВР, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ВидРемонта = ТекДанные.ВидРемонта;
			КонецЦикла;
			НайденныеСтроки = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта, ТиповойОР", СтарыйВР, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ПредшествующийВидРемонта = ТекДанные.ВидРемонта;
			КонецЦикла;
			НайденныеСтроки = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта, ТиповойОР", СтарыйВР, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ВидРемонта = ТекДанные.ВидРемонта;
			КонецЦикла;
			НайденныеСтроки = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ЗамещаемыйВидРемонта, ТиповойОР", СтарыйВР, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ЗамещаемыйВидРемонта = ТекДанные.ВидРемонта;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("ВидРемонта, ТиповойОР", Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта, Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР);
		Элементы.ПредшествующиеРемонты.ОтборСтрок = ПараметрыОтбора;
		Элементы.ЗамещаемыеРемонты.ОтборСтрок = ПараметрыОтбора;
		
		ЗапретРедактированияНормРемонтов = ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР) ИЛИ НЕ ПравоРедактирования;
		
		Элементы.ГрафикРемонтныхРабот.Доступность = НЕ ЗапретРедактированияНормРемонтов;
		Элементы.СпособВыполнения.Доступность = НЕ ЗапретРедактированияНормРемонтов;
		Элементы.СпособУчетаДатыОтсчета.Доступность = НЕ ЗапретРедактированияНормРемонтов;
		Элементы.ГруппаФлажкиДополнительноНормативныеРемонты.Доступность = НЕ ЗапретРедактированияНормРемонтов;
	Иначе
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("ВидРемонта, ТиповойОР", Неопределено, Неопределено);
		Элементы.ПредшествующиеРемонты.ОтборСтрок = ПараметрыОтбора;
		Элементы.ЗамещаемыеРемонты.ОтборСтрок = ПараметрыОтбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.ТиповойОР) Тогда
		
		Отказ = Истина;
		Если НЕ ТекДанные.Удален Тогда
		
			СтруктураСвязанныхСтрок = НайтиСвязанныеСтроки(ТекДанные.ВидРемонта,ТекДанные.ТиповойОР);
			ТекстВопроса = "";
			Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокПредшествующиеРемонты.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Предшествующие ремонты'");
			КонецЕсли;
			
			Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗамещаемыеРемонты.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Замещаемые ремонты'");
			КонецЕсли;
			
			Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Нормативные затраты при ТОиР'");
			КонецЕсли;
			
			Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокРМ.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Оценка РМ'");
			КонецЕсли;
			
			Если ЕстьОсновноеЗависимоеОборудованиеПоВидуРемонта(ТекДанные.ВидРемонта) Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Виды ремонта для настройки основного и зависимого оборудования остановочных ремонтов'");
			КонецЕсли;
						
			Если ТекстВопроса <> "" Тогда
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Выбранный вид ремонта используется в таблицах:%1
					|При удалении вида ремонта, связанные строки в этих таблицах будут удалены. Продолжить?'"),ТекстВопроса);
				СтруктураСвязанныхСтрок.Вставить("ТекДанные",ТекДанные);
				ПоказатьВопрос(Новый ОписаниеОповещения("НормативныеРемонтыПередУдалениемЗавершение",ЭтаФорма,СтруктураСвязанныхСтрок),ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			Иначе
				ТекДанные.Удален = НЕ ТекДанные.Удален;
				Для Каждого Элем Из СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗапланированныеРемонты Цикл
					ЗапланированныеРемонты.Удалить(Элем);
				КонецЦикла;
				УстановитьОтборНеИспользуемыхСтрок(Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка,"НормативныеРемонты");
				МодифицированностьНормРемонтов = Истина;
			КонецЕсли;
		Иначе
			ТекДанные.Удален = Ложь;
			МодифицированностьНормРемонтов = Истина;
		КонецЕсли;
			
	Иначе
		
		СтруктураСвязанныхСтрок = НайтиСвязанныеСтроки(ТекДанные.ВидРемонта,ТекДанные.ТиповойОР);
		
		ТекстВопроса = "";
		Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокПредшествующиеРемонты.Количество() > 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Предшествующие ремонты'");
		КонецЕсли;
		
		Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗамещаемыеРемонты.Количество() > 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Замещаемые ремонты'");
		КонецЕсли;
		
		Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта.Количество() > 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Нормативные затраты при ТОиР'");
		КонецЕсли;
		
		Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокРМ.Количество() > 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Оценка РМ'");
		КонецЕсли;
		
		Если ЕстьОсновноеЗависимоеОборудованиеПоВидуРемонта(ТекДанные.ВидРемонта) Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Виды ремонта для настройки основного и зависимого оборудования остановочных ремонтов'");
		КонецЕсли;
		
		Если ТекстВопроса <> "" Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Выбранный вид ремонта используется в таблицах:%1
				|При удалении вида ремонта, связанные строки в этих таблицах будут удалены. Продолжить?'"),ТекстВопроса);
			Отказ = Истина;
			СтруктураСвязанныхСтрок.Вставить("ТекДанные",ТекДанные);
			ПоказатьВопрос(Новый ОписаниеОповещения("НормативныеРемонтыПередУдалениемЗавершение",ЭтаФорма,СтруктураСвязанныхСтрок),ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		Иначе
			Для Каждого Элем Из СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗапланированныеРемонты Цикл
				ЗапланированныеРемонты.Удалить(Элем);
			КонецЦикла;
			МодифицированностьНормРемонтов = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРемонтныхРаботПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособВыполненияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаДатыОтсчетаПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьВПланированииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРаботОборудованияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРемонтныхРаботПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПродолжительностьПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПростоиОборудованияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыРассчитыватьНаработкуВПростоеПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКоэффициентыРемонтныхОсобенностейПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыНеИспользоватьВПланированииДатуВводаВЭксплуатациюПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыРазрешитьСокращатьМежремонтныйПериодПриПланированииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыИспользоватьДатыЗамещающихРемонтовПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыВидРемонтаПриИзменении(Элемент)	
	
	МасВидовЦепочек = Новый Массив;
	
	Для Каждого ЭлементРемонтныхЦикловОборудования Из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
		МасВидовЦепочек.Добавить(ЭлементРемонтныхЦикловОборудования.ВидЦепочки);
	КонецЦикла;		
	
	ДобавлятьВидРемонта = ПроверитьПересеченияСЦепочкойНаСервере(Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта, МасВидовЦепочек);	
	Если НЕ ДобавлятьВидРемонта Тогда
		Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СтратегияОбслуживанияНормативаПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСтратегииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшествующиеРемонты
&НаКлиенте
Процедура ПредшествующиеРемонтыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено 
		Или Не ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан нормативный ремонт!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	ИначеЕсли ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ПредшествующиеРемонты.ТекущиеДанные.ВидРемонта = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если не ОтменаРедактирования Тогда
		МодифицированностьПредшествующихРемонтов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПослеУдаления(Элемент)
	МодифицированностьПредшествующихРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	Для каждого Строка Из НормативныеРемонты Цикл
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписокРемонтовДляВыбора = Новый СписокЗначений;
	
	Для Каждого строка из НормативныеРемонты Цикл
		СписокРемонтовДляВыбора.Добавить(строка.ВидРемонта);	
	КонецЦикла;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокРемонтовДляВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗамещаемыеРемонты
&НаКлиенте
Процедура ЗамещаемыеРемонтыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено 
		Или Не ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан нормативный ремонт!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	ИначеЕсли ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ЗамещаемыеРемонты.ТекущиеДанные.ВидРемонта = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если не ОтменаРедактирования Тогда
		МодифицированностьЗамещаемыхРемонтов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПослеУдаления(Элемент)
	МодифицированностьЗамещаемыхРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыЗамещаемыйВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта = Строка.ВидРемонта И НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыЗамещаемыйВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	ТекущиеДанныеНормативов = Элементы.НормативныеРемонты.ТекущиеДанные;
	Если ТекущиеДанныеНормативов <> Неопределено Тогда
		ТекущийВидРемонта = ТекущиеДанныеНормативов.ВидРемонта;
	КонецЕсли; 
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален И ТекущийВидРемонта <> Строка.ВидРемонта Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыЗамещаемыйВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	ТекущиеДанныеНормативов = Элементы.НормативныеРемонты.ТекущиеДанные;
	Если ТекущиеДанныеНормативов <> Неопределено Тогда
		ТекущийВидРемонта = ТекущиеДанныеНормативов.ВидРемонта;
	КонецЕсли; 
	Для каждого Строка Из НормативныеРемонты Цикл
		Если НЕ Строка.Удален И ТекущийВидРемонта <> Строка.ВидРемонта Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличноеПолеРемонтныеЦиклыОборудования
&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекСтрокаРемонтныеЦиклыОборудования = Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаРемонтныеЦиклыОборудования = Неопределено Тогда
		ТабличноеПолеСоставРемонтногоЦикла.Очистить();			
	Иначе
		
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияУдалить.Доступность     = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияИзменить.Доступность    = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияСкопировать.Доступность = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияКонтекстноеМенюУдалить.Доступность     = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияКонтекстноеМенюИзменить.Доступность    = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияКонтекстноеМенюСкопировать.Доступность = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		
		
		МассивРемонтов = ЗаполнитьПоследовательностьРемонтовНаСервере(ТекСтрокаРемонтныеЦиклыОборудования.ВидЦепочки);
		
		ТабличноеПолеСоставРемонтногоЦикла.Очистить();
		Для каждого Элем Из МассивРемонтов Цикл
			
			НС = ТабличноеПолеСоставРемонтногоЦикла.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ТиповойОР Тогда	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		МодифицированностьРемЦиклов = Истина;
		ТабличноеПолеРемонтныеЦиклыОборудованияПриАктивизацииСтроки(Элементы.ТабличноеПолеРемонтныеЦиклыОборудования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередУдалением(Элемент, Отказ)
	МодифицированностьРемЦиклов = Истина;
	Если Элемент.ТекущиеДанные.ТиповойОР Тогда	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияВидЦепочкиПриИзменении(Элемент)
	
	Если НормативныеРемонты.Количество() = 0 Тогда 
		ЗаполнитьНормативныеРемонты();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ГруппаОбъектовРемонтов = Объект.Ссылка;
	Иначе	
    	// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные;
	
	Если Не НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабЗапчастейОбъектовРемонта

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) И Не НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		МодифицированностьЗапчастейОР = Истина;
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
		Модифицированность = Истина;
		ПредыдущиеДанные = СтруктураДанныхДоРедактирования[Элемент.Имя];
		Если ТекДанные.ИзТипового Тогда
			Отказ = Истина;
			ТекДанные.Удален = НЕ ТекДанные.Удален;
			
			Если ТекДанные.Удален Тогда
				УстановитьОтборНеИспользуемыхСтрок(Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка,"ТабЗапчастейОбъектовРемонта");
			КонецЕсли;
			
			МассивСтрок = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового",
				ПредыдущиеДанные.Номенклатура, ПредыдущиеДанные.Характеристика, Истина)); 
			Если МассивСтрок.Количество() > 0 Тогда
				МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
			КонецЕсли;
				
			Для Каждого СтрокаНорм Из МассивСтрок Цикл
				СтрокаНорм.Удален = ТекДанные.Удален;
			КонецЦикла;
			
			текДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
			Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = 
				УстановитьОтборДляТЧТабЗатратПоВидамРемонта(?(текДанные = неопределено, неопределено, текДанные.Номенклатура),
															?(текДанные = неопределено, неопределено, текДанные.Характеристика),
															?(текДанные = неопределено, неопределено, текДанные.ТиповойОР));
		Иначе
			
			УдалитьСвязанныеСтрокиПоЗапчастям(ПредыдущиеДанные.Номенклатура, ПредыдущиеДанные.Характеристика);
			ПометитьСнятьПометкуЗапчастиИзТиповогоКУдалению(ТекДанные, Ложь);
		КонецЕсли;
		Элементы.ТабЗатратПоВидамРемонта.Обновить();
	ИначеЕсли Не ОтменаРедактирования Тогда
		
		МодифицированностьЗапчастейОР = Истина;
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
		Модифицированность = Истина;
		Если НоваяСтрока Тогда
			Элемент.ТекущиеДанные.ОбъектРемонта = Параметры.Ключ;
		КонецЕсли;
		ТекДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
		
		ПометитьСнятьПометкуЗапчастиИзТиповогоКУдалению(ТекДанные, Истина);

		Если СтруктураДанныхДоРедактирования[Элемент.Имя] = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПредыдущиеДанные = СтруктураДанныхДоРедактирования[Элемент.Имя];
		
		Если ТекДанные.Номенклатура <> ПредыдущиеДанные.Номенклатура ИЛИ ТекДанные.Характеристика <> ПредыдущиеДанные.Характеристика Тогда 
			ПометитьСнятьПометкуЗапчастиИзТиповогоКУдалению(ПредыдущиеДанные, Ложь)
		КонецЕсли;
		
		Если НЕ НоваяСтрока И ТекДанные <> Неопределено Тогда
			// Заменим номенклатуру в существующих строках нормативных затрат запчастей.
			МассивСтрок = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового",
				ПредыдущиеДанные.Номенклатура, ПредыдущиеДанные.Характеристика, Ложь));
			Для Каждого Эл Из МассивСтрок Цикл
				МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
				Эл.Номенклатура = ТекДанные.Номенклатура;
				Эл.Характеристика = ТекДанные.Характеристика;
			КонецЦикла;
			
		КонецЕсли;
		Если ТекДанные <> Неопределено И НоваяСтрока Или ТекДанные.Номенклатура <> СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура 
			Или ТекДанные.Характеристика <> СтруктураДанныхДоРедактирования[Элемент.Имя].Характеристика Тогда
			СтруктураОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика, ИзТипового", ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.ИзТипового);
			Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = СтруктураОтбора;
			УстановитьОтборНеИспользуемыхСтрок(Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка,
				"ТабЗапчастейОбъектовРемонта");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПослеУдаления(Элемент)
	
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		
		ТекущаяНоменклатура = ТекДанные.Номенклатура;
		ТекущаяХарактеристика = ТекДанные.Характеристика;
		
		СтруктураОтбора = УстановитьОтборДляТЧТабЗатратПоВидамРемонта(ТекущаяНоменклатура, ТекущаяХарактеристика, ТекДанные.ТиповойОР);
		Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = СтруктураОтбора;
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Запчасть", ТекущаяНоменклатура);
		Элементы.ТабИсторииЗаменыЗЧ.ОтборСтрок 		= СтруктураОтбора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПередУдалением(Элемент, Отказ)
 	
	ТекДанные = Элемент.ТекущиеДанные;
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	Модифицированность = Истина;
	Если ТекДанные.ИзТипового Тогда
		Отказ = Истина;
		ТекДанные.Удален = НЕ ТекДанные.Удален;
		
		Если НЕ ТекДанные.Удален Тогда
			ПереопределенныеСтроки = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Удален, ИзТипового",
				ТекДанные.Номенклатура, ТекДанные.Характеристика, Ложь, Ложь));
			ТекДанные.Удален = ПереопределенныеСтроки.Количество() > 0;
		Иначе			
			УстановитьОтборНеИспользуемыхСтрок(Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка, "ТабЗапчастейОбъектовРемонта");
		КонецЕсли;
		
		МассивСтрок = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового",
			ТекДанные.Номенклатура, ТекДанные.Характеристика, Истина)); 
		Если МассивСтрок.Количество() > 0 Тогда
			МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
		КонецЕсли;
			
		Для Каждого СтрокаНорм Из МассивСтрок Цикл
			СтрокаНорм.Удален = ТекДанные.Удален;
		КонецЦикла;
		
		текДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
		Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = 
			УстановитьОтборДляТЧТабЗатратПоВидамРемонта(?(текДанные = неопределено, неопределено, текДанные.Номенклатура),
														?(текДанные = неопределено, неопределено, текДанные.Характеристика),
														?(текДанные = неопределено, неопределено, текДанные.ТиповойОР));
	Иначе	
		УдалитьСвязанныеСтрокиПоЗапчастям(ТекДанные.Номенклатура, ТекДанные.Характеристика);
		ПометитьСнятьПометкуЗапчастиИзТиповогоКУдалению(ТекДанные, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		МодифицированностьЗапчастейОР = Истина;
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
		Модифицированность = Истина;
		
		СтруктураПараметр = Новый Структура();
		СтруктураПараметр.Вставить("Номенклатура", ВыбранноеЗначение);
		СтруктураПараметр.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПараметр.Вставить("Удален", Ложь);
		СтруктураПараметр.Вставить("ИзТипового", Ложь);
		
		Если ТабЗапчастейОбъектовРемонта.НайтиСтроки(СтруктураПараметр).Количество() = 0 Тогда
			НС = ТабЗапчастейОбъектовРемонта.Добавить();
			НС.ИзТипового = Ложь;
			НС.Количество = 1;
			НС.Номенклатура = ВыбранноеЗначение;
			НС.ОбъектРемонта = Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		МассивИндексов = Новый Массив;
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, МассивИндексов);
		Для Каждого Индекс Из МассивИндексов Цикл 
			ТекСтрока = ТабЗапчастейОбъектовРемонта.Получить(Индекс);
			ПометитьСнятьПометкуЗапчастиИзТиповогоКУдалению(ТекСтрока, Истина)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;

	Если Копирование Тогда 
		ТекДанные.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
		ТекДанные.Удален = Ложь; 
		ТекДанные.ИзТипового = Ложь;
		МодифицированностьЗапчастейОР = Истина;  
	КонецЕсли; 
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		СтруктураПараметр = Новый Структура;
		СтруктураПараметр.Вставить("Номенклатура",ТекДанные.Номенклатура);
		СтруктураПараметр.Вставить("Характеристика",ТекДанные.Характеристика);
		СтруктураПараметр.Вставить("Удален",Ложь);
		СтруктураПараметр.Вставить("ИзТипового",Ложь);
		
		СтрокиНоменклатуры = ТабЗапчастейОбъектовРемонта.НайтиСтроки(СтруктураПараметр);
		Если СтрокиНоменклатуры.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Номенклатура"" (""%1"") в таблице ""Запчасти""!'");
				ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Номенклатура);
			Иначе
				ТекстОшибки = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Номенклатура"" в таблице ""Запчасти""!'");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ТабЗапчастейОбъектовРемонта",,Отказ);
		КонецЕсли;
	ИначеЕсли НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабЗатратПоВидамРемонта

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПослеУдаления(Элемент)
	
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
		
		ТекущиеДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяНоменклатура = ТекущиеДанные.Номенклатура;
			ТекущаяХарактеристика = ТекущиеДанные.Характеристика;
			ТекущийТиповойОР = ТекущиеДанные.ТиповойОР;
			
			Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = УстановитьОтборДляТЧТабЗатратПоВидамРемонта(ТекущаяНоменклатура, ТекущаяХарактеристика, ТекущийТиповойОР);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекДанныеЗапчастей = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	Если ТекДанныеЗапчастей = Неопределено Или Не ЗначениеЗаполнено(ТекДанныеЗапчастей.Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Добавление нормативных затрат по видам ремонта возможно только для конкретных запчастей!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	Если ТекДанныеЗапчастей.Удален Тогда
		ТекстСообщения = НСтр("ru = 'Добавление нормативных затрат по видам ремонта возможно только для используемых запчастей!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанныеЗапчастей.ТиповойОР) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ТабЗатратПоВидамРемонта.ТекущиеДанные.ОбъектРемонта = Параметры.Ключ;
		Элементы.ТабЗатратПоВидамРемонта.ТекущиеДанные.Номенклатура = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура;
		Элементы.ТабЗатратПоВидамРемонта.ТекущиеДанные.Характеристика = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Характеристика;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НормативныеРемонты.Количество() = 0 Тогда
		ЗаполнитьНормативныеРемонты();
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда

		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ИзТипового Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	текЗапчасть = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	
	СписокОтбора = Новый СписокЗначений(); 	
	
	Для каждого Строка Из НормативныеРемонты Цикл		
		СписокОтбора.Добавить(Строка.ВидРемонта);		
	КонецЦикла; 
	
	НайденВНормативах = СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если НайденВНормативах = Неопределено тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено, СтрЗаменить(Нстр("ru = 'Вид ремонта %ВидРемонта% не найден в списке нормативных ремонтов!'"),
		"%ВидРемонта%", ВыбранноеЗначение),,НСтр("ru = 'Выбор вида ремонта...'"));	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Текст) Тогда
			ДанныеВыбора = Новый СписокЗначений;
			Для каждого ТекСтрока из НормативныеРемонты Цикл
				Если СтрНачинаетсяС(ВРег(ТекСтрока.ВидРемонта), ВРег(текст)) Тогда
					ДанныеВыбора.Добавить(ТекСтрока.ВидРемонта);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПриИзменении(Элемент)
	МодифицированностьЗапчастейОР = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОценокРМ
&НаКлиенте
Процедура ТаблицаОценокРМПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	Если ТипЗнч(ТекСтрока.ГруппаОбъектовРемонтов) = Тип("СправочникСсылка.торо_ТиповыеОР") Тогда  
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
		Если Не ТекДанные.ГруппаОбъектовРемонтов = Объект.Ссылка Тогда
			ТекДанные.ГруппаОбъектовРемонтов = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		
		СтруктураПараметр = Новый Структура("ГруппаОбъектовРемонтов, ВидРемонта,Сезон,Период");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр,ТекДанные);
		
		Строки = ТаблицаОценокРМ.НайтиСтроки(СтруктураПараметр);
		Количество = 0;
		Если Строки.Количество() > 1 Тогда 
			ТекстСообщения = НСтр("ru = 'Текущая строка оценок риск-менеджмента дублирует уже введенную!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
		ТаблицаОценокРММодифицированность = Истина;
		Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
		
		Если НоваяСтрока Тогда
			ЗаполнитьЗначенияСвойств(РСНЗТаблицаОценокРМ.Добавить(),ТекДанные);
		Иначе
			ДанныеДоРедактирования = СтруктураДанныхДоРедактирования[Элемент.Имя];
			Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период", ДанныеДоРедактирования.ВидРемонта, ДанныеДоРедактирования.Сезон, ДанныеДоРедактирования.Период));
			Если Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Строки[0],ТекДанные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период",ТекДанные.ВидРемонта,ТекДанные.Сезон,ТекДанные.Период));
	Для Каждого Строка Из Строки Цикл
		РСНЗТаблицаОценокРМ.Удалить(Строка);
	КонецЦикла; 
	ТаблицаОценокРММодифицированность = Истина;
	Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;

	Если ЗначениеЗаполнено(ВыбранноеЗначение) И СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектовРемонта

&НаКлиенте
Процедура СписокОбъектовРемонтаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборВТЧВидыРемонтаЭтогоОбъекта();
	УстановитьПараметрыВыбораВидаРемонтаосновногоСвязанного();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьКоличествоОсновногоЗависимогоОборудования();
	МодифицированностьОсновныхЗависимых = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекстВопроса = НСтр("ru = 'Связанные данные будут очищены. Продолжить?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("СписокОбъектовРемонтаПередУдалениемЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокОбъектовРемонта.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СписокОбъектовРемонта.ДанныеСтроки(ВыделеннаяСтрока);
			
			СтруктураПоиска = Новый Структура("ОбъектРемонта", ДанныеСтроки.ОбъектРемонта);
			НайденныеСтрокиВР = ВидыРемонтаЭтогоОбъекта.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаВР из НайденныеСтрокиВР Цикл
				СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидРемонтаЭтогоОбъекта", СтрокаВР.ОбъектРемонта, СтрокаВР.ВидРемонта);
				НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ВидыРемонтаОсновногоСвязанного.Удалить(НайденнаяСтрока);
				КонецЦикла;
				
				ВидыРемонтаЭтогоОбъекта.Удалить(СтрокаВР);
			КонецЦикла;
						
			СписокОбъектовРемонта.Удалить(СписокОбъектовРемонта.НайтиПоИдентификатору(ВыделеннаяСтрока));
		КонецЦикла;
		
		УстановитьКоличествоОсновногоЗависимогоОборудования();
		
		МодифицированностьОсновныхЗависимых = Истина;
		Модифицированность = Истина; 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаОбъектРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СписокОбъектовРемонтаОбъектРемонтаПриИзмененииИзменитьСвязанныеТЧ(ТекущиеДанные.ОбъектРемонта, ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаОбъектРемонтаПриИзменении(Элемент)
	
	УстановитьОтборВТЧВидыРемонтаЭтогоОбъекта();
	УстановитьПараметрыВыбораВидаРемонтаосновногоСвязанного();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРемонтаЭтогоОбъекта

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПриАктивизацииСтроки(Элемент)
	УстановитьОтборВТЧОсновныеЗависимыеРемонты();
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанныеСпискаОР = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
	
	Если ТекущиеДанныеСпискаОР = Неопределено ИЛИ Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	СтрокиВР = ВидыРемонтаЭтогоОбъекта.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущиеДанныеСпискаОР.ОбъектРемонта));
	ЕстьЛюбойВР = Ложь;
	Для каждого Строка из СтрокиВР Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ВидРемонта) Тогда
			ЕстьЛюбойВР = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЛюбойВР Тогда
		ТекстСообщения = НСтр("ru='В таблице уже указано значение <любой вид ремонта>, добавление отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанныеОР = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
		Если ТекущиеДанныеОР <> Неопределено Тогда
			ТекущиеДанные.ОбъектРемонта = ТекущиеДанныеОР.ОбъектРемонта;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
			Если ВидыРемонтаЭтогоОбъекта.НайтиСтроки(Новый Структура("ОбъектРемонта, ВидРемонта", ТекДанные.ОбъектРемонта, ТекДанные.ВидРемонта)).Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Выбранный вид ремонта уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьОтборВТЧОсновныеЗависимыеРемонты();
	
	МодифицированностьОсновныхЗависимых = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекстВопроса = НСтр("ru = 'Связанные данные будут очищены. Продолжить?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ВидыРемонтаЭтогоОбъектаПередУдалениемЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ВидыРемонтаЭтогоОбъекта.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ВидыРемонтаЭтогоОбъекта.ДанныеСтроки(ВыделеннаяСтрока);
			
			СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидРемонтаЭтогоОбъекта", ДанныеСтроки.ОбъектРемонта, ДанныеСтроки.ВидРемонта);
			НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ВидыРемонтаОсновногоСвязанного.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			ВидыРемонтаЭтогоОбъекта.Удалить(ВидыРемонтаЭтогоОбъекта.НайтиПоИдентификатору(ВыделеннаяСтрока));
		КонецЦикла;
		
		МодифицированностьОсновныхЗависимых = Истина;
		Модифицированность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "Визуализация", СписокОтбора);	
	ОткрытьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидыРемонтаЭтогоОбъектаПриИзмененииИзменитьСвязанныеТЧ(ТекущиеДанные.ВидРемонта, ВыбранноеЗначение, ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаВидРемонтаПриИзменении(Элемент)
	
	УстановитьОтборВТЧОсновныеЗависимыеРемонты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРемонтаОсновногоСвязанного

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанныеВР = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
	
	Если ТекущиеДанныеВР = Неопределено ИЛИ Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	СтрокиВР = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(Новый Структура("ОбъектРемонта, ВидРемонтаЭтогоОбъекта", ТекущиеДанныеВР.ОбъектРемонта, ТекущиеДанныеВР.ВидРемонта));
	ЕстьЛюбойВР = Ложь;
	Для каждого Строка из СтрокиВР Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ВидРемонтаСвязанногоОбъекта) Тогда
			ЕстьЛюбойВР = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЛюбойВР Тогда
		ТекстСообщения = НСтр("ru='В таблице уже указано значение <любой вид ремонта>, добавление отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВидыРемонтаОсновногоСвязанного.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанныеВРЭтогоОбъекта = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
		Если ТекущиеДанныеВРЭтогоОбъекта <> Неопределено Тогда
			ТекущиеДанные.ВидРемонтаЭтогоОбъекта = ТекущиеДанныеВРЭтогоОбъекта.ВидРемонта;
			ТекущиеДанные.ОбъектРемонта = ТекущиеДанныеВРЭтогоОбъекта.ОбъектРемонта;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ВидыРемонтаОсновногоСвязанного.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
			
			СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидРемонтаЭтогоОбъекта, ВидРемонтаСвязанногоОбъекта", 
												ТекущиеДанные.ОбъектРемонта,
												ТекущиеДанные.ВидРемонтаЭтогоОбъекта,
												ТекущиеДанные.ВидРемонтаСвязанногоОбъекта);
			
			Если ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Выбранный вид ремонта уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	МодифицированностьОсновныхЗависимых = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоПриИзменении(Элемент)
	
	МодифицированностьОсновныхЗависимых = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Гарантии

&НаКлиенте
Процедура ЕстьГарантияДляОбъектаПриИзменении(Элемент)
	
	Если ЕстьГарантияДляОбъекта Тогда
		Элементы.СтраницаГарантийныеРемонты.Видимость = Истина;
	Иначе
		Если ГарантииОбъектаРемонта.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСнятияФлажкаГарантий",ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Таблица сроков гарантий заполнена. Очистить таблицу гарантий?'"),РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Для объекта ремонта имеется гарантия'"));
		Иначе
			Элементы.СтраницаГарантийныеРемонты.Видимость = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыГарантииОбъектаРемонта

&НаКлиенте
Процедура ГарантииОбъектаРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не (НоваяСтрока И ОтменаРедактирования) И ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.УсловияГарантии) Тогда
		РеквизитыГарантии = торо_ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанные.УсловияГарантии, "ПроверятьПериодГарантии, ДатаНачалаГарантии");
		Если РеквизитыГарантии.ПроверятьПериодГарантии 
			И РеквизитыГарантии.ДатаНачалаГарантии < Объект.ДатаВыпуска Тогда
			ШаблонСообщения = НСтр("ru = 'Дата начала гарантии не может быть меньше даты выпуска (%1)!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Объект.ДатаВыпуска,"ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	МодифицированностьГарантий = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГарантииОбъектаРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
		Если НоваяСтрока И ГарантииОбъектаРемонта.Количество() = 1 Тогда
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГарантииОбъектаРемонтаПередУдалением(Элемент, Отказ)
	ТекущиеДаные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДаные = Неопределено
		И Не ТекущиеДаные.ОбъектРемонта = Объект.Ссылка Тогда
		Отказ = Истина;
	КонецЕсли; 
	Если Не Отказ Тогда
		МодифицированностьГарантий = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГарантииОбъектаРемонтаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДаные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДаные = Неопределено И Не ТекущиеДаные.ОбъектРемонта = Объект.Ссылка Тогда
		Элементы.ГарантииОбъектаРемонтаУдалить.Доступность = Ложь;
	Иначе
		Элементы.ГарантииОбъектаРемонтаУдалить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИсторияПеремещенияОборудования

&НаКлиенте
Процедура ВыборВидаИерархииИсторияПриИзменении(Элемент)
	ПолучитьИсториюПеремещения();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПеремещенияОборудования1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Регистратор);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеРеквизиты

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриИзменении(Элемент)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки(Элемент)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовВыбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДополнительныйРеквизитПриИзменении(Элемент)

	Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		ТекущиеДанные = Элементы.Свойства_ЗначенияДополнительныхРеквизитов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаУнаследованного = УнаследованныеДопРеквизиты.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
			
			Если СтрокаУнаследованного.Количество() > 0 Тогда
				СтрокаУнаследованного = СтрокаУнаследованного[0];
				ТекущиеДанные.ЭтоУнаследованный = (ТекущиеДанные.Значение = СтрокаУнаследованного.Значение);
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		
		ИмяРеквизитаЗначение = Элемент.Имя;
		СтрокаУнаследованного = УнаследованныеДопРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ИмяРеквизитаЗначение));
		
		Если СтрокаУнаследованного.Количество() > 0 Тогда
			СтрокаУнаследованного = СтрокаУнаследованного[0];
			ЭтоУнаследованный = (ЭтаФорма[ИмяРеквизитаЗначение] = СтрокаУнаследованного.Значение);
			УстановитьОформлениеДопРеквизита(Элемент, ЭтоУнаследованный);
		КонецЕсли;
		
	КонецЕсли;
	
	МодифицированностьДопРеквизитов = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДополнительныйРеквизитОчистка(Элемент, СтандартнаяОбработка)

	Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		ТекущиеДанные = Элементы.Свойства_ЗначенияДополнительныхРеквизитов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаУнаследованного = УнаследованныеДопРеквизиты.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
			
			Если СтрокаУнаследованного.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				СтрокаУнаследованного = СтрокаУнаследованного[0];
				ТекущиеДанные.Значение = СтрокаУнаследованного.Значение;
				ТекущиеДанные.ЭтоУнаследованный = Истина;
			Иначе
				СтрокаОписания = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
				Если СтрокаОписания.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;
				СтрокаОписания = СтрокаОписания[0];
				
				УнаследоватьРеквизитЕслиВозможно(СтрокаОписания.ИмяРеквизитаЗначение, СтрокаОписания.Свойство, СтандартнаяОбработка, ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИмяРеквизитаЗначение = Элемент.Имя;
		СтрокаУнаследованного = УнаследованныеДопРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ИмяРеквизитаЗначение));
		Если СтрокаУнаследованного.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			СтрокаУнаследованного = СтрокаУнаследованного[0];
			ЭтаФорма[ИмяРеквизитаЗначение] = СтрокаУнаследованного.Значение;
			УстановитьОформлениеДопРеквизита(Элемент, Истина);
		Иначе
			СтрокаОписания = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ИмяРеквизитаЗначение));
			Если СтрокаОписания.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			СтрокаОписания = СтрокаОписания[0];
			
			УнаследоватьРеквизитЕслиВозможно(ИмяРеквизитаЗначение, СтрокаОписания.Свойство, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	 УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	 УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	 УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Процедура РастянутьПоляКонтактнойИнформации()
	
	// В БСП поля адреса имеют фиксированную ширину.
	// Растягиваем здесь, чтобы не менять модуль БСП.
	Для каждого Описание из ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		ЭлементКИ = Элементы.Найти(Описание.ИмяРеквизита);
		Если ЭлементКИ <> Неопределено И ТипЗнч(ЭлементКИ) = Тип("ПолеФормы") Тогда
			ЭлементКИ.АвтомаксимальнаяШирина = Ложь;
			ЭлементКИ.РастягиватьПоГоризонтали = Истина; 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОграничений
&НаКлиенте
Процедура ДеревоОграниченийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		
		АвтоматическаяИерархия = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "СтроитсяАвтоматически");
		Если АвтоматическаяИерархия Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Автоматическую иерархию нельзя добавить в дерево!'"));
			Возврат;
		КонецЕсли;
		
		Если ПроверитьНаличиеИерархии(ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Иерархия уже добавлена в дерево ограничений!'"));
			Возврат;
		КонецЕсли;
		
		ДобавитьИерархиюВДерево(ВыбранноеЗначение);
		Модифицированность = Истина;
		МодифицированностьОграничений = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОграниченияНаХарактеристикиОборудования") Тогда

		ТекущиеДанные = Элементы.ДеревоОграничений.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено 
		  ИЛИ ТипЗнч(ТекущиеДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_ОграниченияНаХарактеристикиОборудования") Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ограничение должно быть вложено в иерархию!'"));
			Возврат;
		КонецЕсли;  
		
		Если ПроверитьНаличиеОграничения(ТекущиеДанные.ИерархияОграничение, ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбранной иерархии уже добавлено это ограничение!'"));
			Возврат;
		КонецЕсли;
				
		ДобавитьОграничениеВДерево(ВыбранноеЗначение, ТекущиеДанные.ИерархияОграничение);
		Модифицированность = Истина;
		МодифицированностьОграничений = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОграниченийПриИзменении(Элемент)
	МодифицированностьОграничений = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОграниченийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если ТипЗнч(ТекущиеДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
			
			СтруктураВозврата = ПроверитьИерархию(Элемент.ТекущаяСтрока);
			
			Если НЕ СтруктураВозврата.РазрешеноИзменение Тогда
				Если СтруктураВозврата.Причина = "АвтоматическаяИерархия" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Автоматическую иерархию нельзя добавить в дерево!'"));
				ИначеЕсли СтруктураВозврата.Причина = "ДублирующееЗначение" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Иерархия уже добавлена в дерево ограничений!'"));
				ИначеЕсли СтруктураВозврата.Причина = "ЕстьРодитель" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Иерархию можно добавить только на первый уровень дерева!'"));
				КонецЕсли;
				
				ТекущиеДанные.ИерархияОграничение = ТекИерархияОграничение;
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ Отказ Тогда	
				ИзменитьИерархию(ТекИерархияОграничение, ТекущиеДанные.ИерархияОграничение);
			КонецЕсли;
			
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_ОграниченияНаХарактеристикиОборудования") Тогда
			
			СтруктураВозврата = ПроверитьОграничение(Элемент.ТекущаяСтрока);
			
			Если НЕ СтруктураВозврата.РазрешеноИзменение Тогда
				Если СтруктураВозврата.Причина = "ДублирующееЗначение" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбранной иерархии уже добавлено это ограничение!'"));
				ИначеЕсли СтруктураВозврата.Причина = "НеверныйУровеньВложенности" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ограничение должно быть вложено в иерархию!'"));
				КонецЕсли;
				
				ТекущиеДанные.ИерархияОграничение = ТекИерархияОграничение;
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ Отказ Тогда	
				ИзменитьОграничение(Элемент.ТекущаяСтрока, ТекИерархияОграничение, ТекущиеДанные.ИерархияОграничение); 	
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТекущиеДанные.ИерархияОграничение = ТекИерархияОграничение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОграниченийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекИерархияОграничение = ТекДанные.ИерархияОграничение;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОграниченийПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		Если ТекДанные.ИзТиповогоОР Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ТекДанные.ИерархияОграничение) = Тип("Строка") Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли ТипЗнч(ТекДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
			УдалитьИерархию(ТекДанные.ИерархияОграничение);
		ИначеЕсли ТипЗнч(ТекДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_ОграниченияНаХарактеристикиОборудования") Тогда
			УдалитьОграничение(Элемент.ТекущаяСтрока, ТекДанные.ИерархияОграничение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТиповойСостав
&НаКлиенте
Процедура ТиповойСоставУстановленныйОРАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗаполнитьДанныеВыбораИзУстановленных(ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСоставУстановленныйОРОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗаполнитьДанныеВыбораИзУстановленных(ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСоставПослеУдаления(Элемент)
	ОбновитьУстановленныеОР();
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСоставУстановленныйОРПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТиповойСостав.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтруктураДанных = ПолучитьДанныеУстановленногоОР(ТекДанные.УстановленныйОР);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных); 
	КонецЕсли;
	ОбновитьУстановленныеОР();
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ИсторияПеремещенияОборудованияФМ1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ЭтоФМ = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.торо_ТипыОбъектовRCM.ФункциональноеМесто");
	Если ТекДанные <> Неопределено Тогда
		Если ЭтоФМ Тогда
			СсылкаНаОбъект = ТекДанные.ОбъектРемонта;
		Иначе
			СсылкаНаОбъект = ТекДанные.ФункциональноеМесто;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		 ПоказатьЗначение(, СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Скопировать(Команда)
	
	ДанныеДляКопирования = ПолучитьДанныеДляКопирования(Объект.Ссылка, ТекСтруктураИерархии);
	
	РодительИерархииДляКопирования  = ДанныеДляКопирования.РодительИерархии;
	СтруктураИерархииДляКопирования = ДанныеДляКопирования.ИерархияДляВводаНовыхОР;
	
	торо_РаботаСИерархией20Клиент.СоздатьОбъектРемонтаКопированием(ЭтаФорма, Объект.Ссылка, Объект.ЭтоГруппа, СтруктураИерархииДляКопирования, РодительИерархииДляКопирования);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВвестиОткрытьДокументПринятиеКУчету(Команда)
	
	Если ЗначениеЗаполнено(РегистраторПринятияКУчету) Тогда
		ОткрытьФорму("Документ.торо_ПринятиеОРКУчету.ФормаОбъекта", Новый Структура("Ключ", РегистраторПринятияКУчету), ЭтаФорма);
	Иначе
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ОбъектРемонта", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ТекСтруктураИерархии", ТекСтруктураИерархии);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.торо_ПринятиеОРКУчету.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОткрытьДокументСнятияСУчета(Команда)
	
	Если ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда
		ОткрытьФорму("Документ.торо_ВыбытиеОбъектаРемонта.ФормаОбъекта", Новый Структура("Ключ", РегистраторСнятияСУчета), ЭтаФорма);
	Иначе
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ОбъектРемонта", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ТекСтруктураИерархии", ТекСтруктураИерархии);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);

		ОткрытьФорму("Документ.торо_ВыбытиеОбъектаРемонта.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИзображение(Команда)
	ОтображатьИзображение = Не ОтображатьИзображение;
	Элементы.ФормаПоказатьСкрытьИзображение.Пометка = ОтображатьИзображение;
	Элементы.ГруппаИзображениеОР.Видимость      = ОтображатьИзображение;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПоложениеВИерархии(Команда)
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока, СтруктураИерархии", Объект.Ссылка, ТекСтруктураИерархии);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоложениеВИерархии(Команда)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПравоРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		Возврат;
	КонецЕсли;
	
	АвтоматическаяИерархия = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекСтруктураИерархии, "СтроитсяАвтоматически");
	Если АвтоматическаяИерархия = Истина Тогда
		ШаблонСообщения = НСтр("ru='Структура иерархии ""%1"" строится автоматически. Изменение положения недоступно.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ТекСтруктураИерархии));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПоложениеВИерархииЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыФормы.Вставить("ЗапретитьИзменениеИерархии", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РазрешитьВыборКорняИерархии", Истина);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Родитель);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыФормы,  ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоложениеВИерархииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Родитель = ВыбранноеЗначение;
		РодительИерархии = ВыбранноеЗначение;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			МодифицированностьРодителя = Истина;
		КонецЕсли;   
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТехническиеДанные(Команда)
	ТиповойОРПриИзменении(Элементы.ТиповойОР);
КонецПроцедуры

#Область НОРМАТИВЫ_ПЛАНИРОВАНИЯ

&НаКлиенте
Процедура ПоказыватьУдаленныеНормативы(Команда)
	Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка = НЕ Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка;
	УстановитьОтборНеИспользуемыхСтрок(Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка,"НормативныеРемонты");
КонецПроцедуры

&НаКлиенте
Процедура РемонтныеЦиклыОбъекта(Команда)
	
	Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыОбъекта.Пометка = Не Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыОбъекта.Пометка;
	НаложитьОтборНаРемЦиклы(Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыОбъекта.Пометка, Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыГруппы.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтныеЦиклыГруппы(Команда)
	
	Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыГруппы.Пометка = Не Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыГруппы.Пометка;
	НаложитьОтборНаРемЦиклы(Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыОбъекта.Пометка, Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыГруппы.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастаниюРемЦиклы(Команда)
	СортироватьПоВозрастаниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбываниюРемЦиклы(Команда)
	СортироватьПоУбываниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Перерасчитать(Команда)
	
	МассивНормативныхРемонтов = торо_РасчетСтруктурыРемонтногоЦикла.ПолучитьТаблицуНормативныхРемонтов(Объект.Ссылка);
	
	СписокВидовРемонтов = Новый СписокЗначений();
	Для каждого Строка из МассивНормативныхРемонтов Цикл
		СписокВидовРемонтов.Добавить(Строка.ВидРемонта,,Истина);
	КонецЦикла;
	
	Если СписокВидовРемонтов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно рассчитать структуру ремонтного цикла, так как не заполнены нормативные ремонты'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("МассивНормативныхРемонтов", МассивНормативныхРемонтов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерерасчитатьЗавершение", ЭтотОбъект, ДопПараметры);
	СписокВидовРемонтов.ПоказатьОтметкуЭлементов(ОписаниеОповещения, НСтр("ru = 'Выберите виды ремонтных работ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Построить(Команда)
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		торо_РасчетСтруктурыРемонтногоЦиклаКлиент.НарисоватьМнемосхему(ЭтаФорма);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	МассивРемонтов = Новый Массив;
	
	Для каждого Стр из ЗапланированныеРемонты Цикл
		СтруктураПараметр = Новый Структура("ВидРемонтныхРабот, Выбран, Цвет, ЦветТекста, Шрифт");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр,Стр);
		МассивРемонтов.Добавить(СтруктураПараметр);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыНастроек", ЭтаФорма);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВРВизуализация", Новый Структура("МассивРемонтов, Нормировать",МассивРемонтов, Нормировать),ЭтаФорма,ЭтаФорма,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если МожноПечататьВизуализацию Тогда
		ТабДок = ПечатьСруктурыРЦНаСервере();
		КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("СтруктураРемонтногоЦикла");
		КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
		УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм);
	Иначе
		ТекстСообщения = НСтр("ru = 'Невозможно распечатать структуру ремонтного цикла, так как она еще не построена!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗапчастей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",        Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                 Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                   Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",          Истина);
	ПараметрыФормы.Вставить("Заголовок",                                НСтр("ru = 'Подбор запчастей'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                     ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                 Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				"ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",					Новый Массив(Элементы.ТабЗапчастейОбъектовРемонтаНоменклатура.ПараметрыВыбора[0].Значение));
	
	Склад = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад");
	Если Не ЗначениеЗаполнено(Склад) Тогда
	    Склад = Объект.СкладОбеспеченияМТР;
	КонецЕсли;
	ПараметрыФормы.Вставить("Склад", Склад);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, Элементы.ТабЗапчастейОбъектовРемонта, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеЗапчасти(Команда)
	
	Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка = НЕ Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка;
	УстановитьОтборНеИспользуемыхСтрок(Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка,"ТабЗапчастейОбъектовРемонта");
	
	ТекущиеДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = УстановитьОтборДляТЧТабЗатратПоВидамРемонта(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.ТиповойОР);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИсторию(Команда)
	
	Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка = НЕ Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка;
	ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыРемонтовИзНормативов(Команда)
	
	Для Каждого ТекСтрока Из НормативныеРемонты Цикл
		ВведенныеОценки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта, Период", ТекСтрока.ВидРемонта, НачалоМесяца(ТекущаяДата())));
		Если ВведенныеОценки.Количество() = 0 Тогда 
			НС = РСНЗТаблицаОценокРМ.Добавить();
			НС.Период = НачалоМесяца(ТекущаяДата());
			НС.ВидРемонта = ТекСтрока.ВидРемонта;
			НС.ГруппаОбъектовРемонтов = Объект.Ссылка;
			НС.Сезон = ПредопределенноеЗначение("Справочник.торо_Сезоны.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	
	ТаблицаОценокРММодифицированность = Истина;
	Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРМ(Команда)
	
	МассивСтруктурСтрокТЧ = Новый Массив;
	КолонкиТЧ = "НомерСтроки, Период, ГруппаОбъектовРемонтов, ВидРемонта, Сезон, ВероятностьВыходаИзСтроя, Ущерб";
	Для каждого СтрокаТЧ Из ТаблицаОценокРМ Цикл
		Если НЕ СтрокаТЧ.ТиповойОР Тогда
			СтруктураСтроки = Новый Структура(КолонкиТЧ);
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
			СтруктураСтроки.НомерСтроки = ТаблицаОценокРМ.Индекс(СтрокаТЧ) + 1;
			МассивСтруктурСтрокТЧ.Добавить(СтруктураСтроки);
		КонецЕсли; 
	КонецЦикла;
	
	МассивВидовРемонта = Новый Массив;
	Для каждого Ремонт Из НормативныеРемонты Цикл
		Результат = МассивВидовРемонта.Найти(Ремонт.ВидРемонта);
		Если Результат = Неопределено Тогда
			МассивВидовРемонта.Добавить(Ремонт.ВидРемонта);	
		КонецЕсли; 
	КонецЦикла; 
	
	ПараметрыФормыЗаполнения = Новый Структура("МассивСтруктурСтрокТЧ, Ссылка, МассивВидовРемонта", МассивСтруктурСтрокТЧ, Объект.Ссылка, МассивВидовРемонта);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьДанныеОбИзмененииРМ", ЭтотОбъект);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаЗаполненияОценкиРМ", ПараметрыФормыЗаполнения, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновныеИЗависимыеПоИерархии(Команда)
	
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ЗаполнитьОсновныеИЗависимыеПоИерархииВыбранаИерархия", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗацикливаниеОсновногоЗависимогоОборудования(Команда)
	
	СохранитьДанныеИзЭлементовФормы(ЭтаФорма);
	УстановитьКоличествоОсновногоЗависимогоОборудования();
	ЗаполнитьОсновныеИЗависимыеРемонтыНаФорме();
	
	ЕстьЗацикливание = Ложь;
	
	ПроверитьЗацикливаниеОсновногоЗависимогоОборудованияНаСервере(ЕстьЗацикливание);
	
	Если НЕ ЕстьЗацикливание Тогда
		ТекстСообщения = НСтр("ru='Зацикливания нет.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроставитьУстановленныеОР(Команда)
	ПроставитьУстановленныеОРСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИерархию(Команда)
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора",, Элементы.ДеревоОграничений);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОграничение(Команда)
	ОткрытьФорму("Справочник.торо_ОграниченияНаХарактеристикиОборудования.ФормаВыбора",, Элементы.ДеревоОграничений);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеОграничениям(Команда)
	ПроверитьСоответствиеОграничениямНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСИзображением

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Если ЭтаФорма.ПроверитьЗаполнение() Тогда
			 Если ЭтаФорма.Записать() Тогда
				 ДобавитьИзображениеФрагмент();
			 КонецЕсли;
		 КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
    
    ВыборИзображения = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, торо_ОбщегоНазначенияКлиентСервер.ФильтрФайловИзображений());
    ВыборИзображения = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ЭтаФорма.Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторФормы;
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ПараметрыДанныхФайла).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Если ЭтаФорма.ПроверитьЗаполнение() Тогда
			 Если ЭтаФорма.Записать() Тогда
				 ДобавитьИзображениеНаКлиентеФрагмент();
			 КонецЕсли;
		 КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, торо_ОбщегоНазначенияКлиентСервер.ФильтрФайловИзображений());
    ВыборИзображения   = Ложь;

КонецПроцедуры

#КонецОбласти

#Область НОРМАТИВЫ_ПЛАНИРОВАНИЯ

#Область НормативныеРемонты

&НаКлиенте
Процедура ЗаполнитьНормативныеРемонты()
		
	Если НЕ МодифицированностьНормРемонтов Тогда
		
		СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуНормативныхРемонтов(Объект.Ссылка);
		
		НормативныеРемонты.Очистить();
		Для каждого Элем Из СтруктураВозврата Цикл
			НС = НормативныеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
		Для каждого Ремонт Из НормативныеРемонты Цикл 
			Если НЕ ЗначениеЗаполнено(Ремонт.ТиповойОР) И Ремонт.Удален = Ложь Тогда
				СовпадающиеРемонты = НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", Объект.ТиповойОР, Ремонт.ВидРемонта));
				Если СовпадающиеРемонты.Количество() > 0 Тогда 
					СовпадающиеРемонты[0].Удален = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если не МодифицированностьПредшествующихРемонтов Тогда
		СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуПредшествующихРемонтов(Объект.Ссылка);
		
		ПредшествующиеРемонты.Очистить();
		Для Каждого Элем Из СтруктураВозврата Цикл
			НС = ПредшествующиеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	Если не МодифицированностьЗамещаемыхРемонтов Тогда
		СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуЗамещаемыхРемонтов(Объект.Ссылка);
		
		ЗамещаемыеРемонты.Очистить();
		Для Каждого Элем Из СтруктураВозврата Цикл
			НС = ЗамещаемыеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПредшествующиеРемонтыНаСервере(ОбъектРемонта, ТекТиповойОР, НовТиповойОР)
	
	НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(ТекТиповойОР);
	НаборЗаписей.Записать(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ТиповыеОРПредшествующиеРемонты.ВидРемонта КАК ВидРемонта,
	|	торо_ТиповыеОРПредшествующиеРемонты.ПредшествующийВидРемонта
	|ПОМЕСТИТЬ ВТ_ПредшествующиеРемонты
	|ИЗ
	|	Справочник.торо_ТиповыеОР.ПредшествующиеРемонты КАК торо_ТиповыеОРПредшествующиеРемонты
	|ГДЕ
	|	торо_ТиповыеОРПредшествующиеРемонты.Ссылка = &ТиповойОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта КАК ВидРемонта
	|ПОМЕСТИТЬ ВТ_ВидРемонта_Действует
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|ГДЕ
	|	торо_ТиповыеОРНормативныеРемонты.Статус = &СтатусДействует
	|	И торо_ТиповыеОРНормативныеРемонты.Ссылка = &ТиповойОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПредшествующиеРемонты.ВидРемонта,
	|	ВТ_ПредшествующиеРемонты.ПредшествующийВидРемонта
	|ИЗ
	|	ВТ_ПредшествующиеРемонты КАК ВТ_ПредшествующиеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидРемонта_Действует КАК ВТ_ВидРемонта_Действует
	|		ПО ВТ_ПредшествующиеРемонты.ВидРемонта = ВТ_ВидРемонта_Действует.ВидРемонта";
	
	Запрос.УстановитьПараметр("ТиповойОР", НовТиповойОР);
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(НовТиповойОР);
	НаборЗаписей.Прочитать();
	
	Пока Выборка.Следующий() Цикл
		
		НС = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
		НС.ОбъектРемонта = ОбъектРемонта;
		НС.ТиповойОР = НовТиповойОР;
		НС.Приоритет = Истина;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗамещаемыеРемонтыНаСервере(ОбъектРемонта, ТекТиповойОР, НовТиповойОР)
	
	НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(ТекТиповойОР);
	НаборЗаписей.Записать(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ТиповыеОРЗамещаемыеРемонты.ВидРемонта,
	|	торо_ТиповыеОРЗамещаемыеРемонты.ЗамещаемыйВидРемонта,
	|	торо_ТиповыеОРЗамещаемыеРемонты.СпособЗамещения,
	|	торо_ТиповыеОРЗамещаемыеРемонты.НачальнаяГраница,
	|	торо_ТиповыеОРЗамещаемыеРемонты.КонечнаяГраница
	|ИЗ
	|	Справочник.торо_ТиповыеОР.ЗамещаемыеРемонты КАК торо_ТиповыеОРЗамещаемыеРемонты
	|ГДЕ
	|	торо_ТиповыеОРЗамещаемыеРемонты.Ссылка = &ТиповойОР";
	
	Запрос.УстановитьПараметр("ТиповойОР", НовТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(НовТиповойОР);
	НаборЗаписей.Прочитать();
	
	Пока Выборка.Следующий() Цикл
		
		НС = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
		НС.ОбъектРемонта = ОбъектРемонта;
		НС.ТиповойОР = НовТиповойОР;
		НС.Приоритет = Истина;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеНормативныхРемонтов(Отказ)

	Если МодифицированностьНормРемонтов Тогда		 
			
		Для Каждого Стр Из НормативныеРемонты Цикл
			Если Не Стр.Удален Тогда
				Если НЕ ЗначениеЗаполнено(Стр.ВидРемонта) Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Вид ремонта"" в строке № %1'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор()+1));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.НормативныйРемонт) Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Технологическая карта"" в строке № %1'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор()+1));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.СпособПланирования) Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ планирования"" в строке № %1'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор()+1));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.ГрафикРемонтныхРабот) Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""График ремонтных работ"" в строке № %1'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор()+1));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.СпособВыполнения) Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ выполнения"" в строке № %1'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор()+1));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.СпособУчетаДатыОтсчета) Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ учета даты отсчета"" в строке № %1'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Стр.ПолучитьИдентификатор()+1));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеЗамещаемыхРемонтов(Отказ)
	
	Для каждого СтрЗамещРемонта Из ЗамещаемыеРемонты Цикл
		Если ЗначениеЗаполнено(СтрЗамещРемонта.ЗамещаемыйВидРемонта) Тогда
			Если ЗначениеЗаполнено(СтрЗамещРемонта.ТиповойОР) Тогда 
				Продолжить;
			КонецЕсли;
			
			МежремонтныйИнтервал = ВычислениеМежремонтногоИнтервала(СтрЗамещРемонта);
			Если НЕ МежремонтныйИнтервал = Неопределено Тогда
				Если МежремонтныйИнтервал <= СтрЗамещРемонта.НачальнаяГраница Тогда
					ШаблонСообщения = НСтр("ru = 'Некорректно заполнено поле ""Дней от начала"" для ремонта %1 в строке %2'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрЗамещРемонта.ВидРемонта, СтрЗамещРемонта.ЗамещаемыйВидРемонта);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
				Если МежремонтныйИнтервал <= СтрЗамещРемонта.КонечнаяГраница Тогда
					ШаблонСообщения = НСтр("ru = 'Некорректно заполнено поле ""Дней от окончания"" для ремонта %1 в строке %2'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрЗамещРемонта.ВидРемонта, СтрЗамещРемонта.ЗамещаемыйВидРемонта);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСДублями = Новый ТаблицаЗначений;
	ТаблицаСДублями.Колонки.Добавить("Ремонт"); 
	Для Каждого СтрокаЗамещения ИЗ ЗамещаемыеРемонты Цикл
		Для Каждого СтрокаЗамещения1 Из ЗамещаемыеРемонты Цикл
			Если СтрокаЗамещения.ВидРемонта = СтрокаЗамещения1.ВидРемонта
				И СтрокаЗамещения.ЗамещаемыйВидРемонта = СтрокаЗамещения1.ЗамещаемыйВидРемонта
				И СтрокаЗамещения.ТиповойОР = СтрокаЗамещения1.ТиповойОР
				И СтрокаЗамещения <> СтрокаЗамещения1 Тогда
				ТаблицаСДублями.Добавить().Ремонт = СтрокаЗамещения.ВидРемонта;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаСДублями.Свернуть("Ремонт");
	
	Если ЗначениеЗаполнено(ТаблицаСДублями) Тогда
		ТекстСообщения = НСтр("ru = 'Не корректно настроены замещаемые ремонты у видов ремонта:'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Для Каждого СтрокаРемонта Из ТаблицаСДублями Цикл
			ТекстСообщения = " - " + СтрокаРемонта.Ремонт;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеХарактеристикЗапчастей(Отказ)
	Если ФОХарактеристикиИспользуются Тогда
		Для каждого Запчасть Из ТабЗапчастейОбъектовРемонта Цикл
			Если Запчасть.ХарактеристикиИспользуются = Истина
				И Запчасть.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			
				ШаблонСообщения = НСтр("ru = 'Не заполнена обязательная характеристика для запчасти %1'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Запчасть.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);	
			
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВычислениеМежремонтногоИнтервала(ТекДанные)
	
	Перем МежремонтныйИнтервал;
	
	Запрос = Новый Запрос;
	Таб = НормативныеРемонты.Выгрузить(,"ВидРемонта, СпособПланирования");
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.СпособПланирования
	|ПОМЕСТИТЬ ОпредСпособПланирования
	|ИЗ
	|	&Таб КАК Таб
	|ГДЕ
	|	Таб.ВидРемонта = &ВидРемонта
	|	И Таб.СпособПланирования <>ЗНАЧЕНИЕ(Справочник.торо_СпособыПланированияРемонтныхРабот.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПараметрыНаработки,
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПериодичность,
	|	торо_СпособыПланированияРемонтныхРабот.КоличествоПериодов,
	|	торо_СпособыПланированияРемонтныхРабот.ПериодичностьРемонтныхРабот КАК Периодичность,
	|	ОпредСпособПланирования.СпособПланирования КАК СпособПланирования
	|ИЗ
	|	ОпредСпособПланирования КАК ОпредСпособПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_СпособыПланированияРемонтныхРабот КАК торо_СпособыПланированияРемонтныхРабот
	|		ПО ОпредСпособПланирования.СпособПланирования = торо_СпособыПланированияРемонтныхРабот.Ссылка";
	
	
	Запрос.УстановитьПараметр("ВидРемонта", ТекДанные.ЗамещаемыйВидРемонта);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДляПериодичности = Результат.Выбрать();
	
	Если ВыборкаДляПериодичности.Следующий() Тогда
		
		Если ВыборкаДляПериодичности.ИспользоватьПериодичность Тогда
			
			Если ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Год Тогда
				Период = 365;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Полугодие Тогда
				Период = 182;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Квартал Тогда
				Период = 90;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Месяц Тогда
				Период = 28;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Декада Тогда
				Период = 10;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Неделя Тогда
				Период = 7;
			Иначе Период = 1;
			КонецЕсли;
			
			МежремонтныйИнтервал = ВыборкаДляПериодичности.КоличествоПериодов * Период;
			
		КонецЕсли;
		
		Если ВыборкаДляПериодичности.ИспользоватьПараметрыНаработки Тогда
			
			Запрос3 = Новый Запрос;
			
			СписокОтбора = Новый СписокЗначений;
			СписокОтбора.Добавить(Объект.Ссылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
			|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
			|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
			|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
			|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
			|ИЗ
			|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
			|ГДЕ
			|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта В(&СписокОтбора)";
			
			Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
			
			Результат = Запрос.Выполнить();
			ТаблНараб = Результат.Выгрузить();
			
			Запрос3.УстановитьПараметр("ТаблНараб", ТаблНараб);
			
			
			Запрос3.Текст = 
			"ВЫБРАТЬ
			|	ТаблНараб.Показатель,
			|	ТаблНараб.ПродолжительностьПериодаПлановойНаработки,
			|	ТаблНараб.ПериодПлановойНаработки,
			|	ТаблНараб.ПлановаяНаработка * ТаблНараб.КоэффициентИспользованияОборудования КАК ПлановаяНаработка
			|ПОМЕСТИТЬ ВыбрПараметрыНаработки
			|ИЗ
			|	&ТаблНараб КАК ТаблНараб
			|ГДЕ
			|	ТаблНараб.ОбъектРемонта = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки,
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ПараметрНаработки
			|ПОМЕСТИТЬ ВыбрСпобобыПланирования
			|ИЗ
			|	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
			|ГДЕ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыбрСпобобыПланирования.ЗначениеПараметраНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки,0) КАК ПродолжительностьПериодаПлановойНаработки,
			|	ВыбрПараметрыНаработки.ПериодПлановойНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПлановаяНаработка,0) КАК ПлановаяНаработка
			|ИЗ
			|	ВыбрСпобобыПланирования КАК ВыбрСпобобыПланирования
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыбрПараметрыНаработки КАК ВыбрПараметрыНаработки
			|		ПО ВыбрСпобобыПланирования.ПараметрНаработки = ВыбрПараметрыНаработки.Показатель";
			
			
			Запрос3.УстановитьПараметр("Ссылка", ВыборкаДляПериодичности.СпособПланирования);
			Запрос3.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
			
			Результат = Запрос3.Выполнить();
			
			ВыборкаДляНаработки = Результат.Выбрать();
			ВыборкаДляНаработки.Следующий();
			
			Если ВыборкаДляНаработки.ПлановаяНаработка > 0 И ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки > 0 Тогда
				
				
				Если ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Год Тогда
					ПериодПлановойНаработки = 365;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Полугодие Тогда
					ПериодПлановойНаработки = 182;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Квартал Тогда
					ПериодПлановойНаработки = 90;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Месяц Тогда
					ПериодПлановойНаработки = 28;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Декада Тогда
					ПериодПлановойНаработки = 10;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Неделя Тогда
					ПериодПлановойНаработки = 7;
				Иначе ПериодПлановойНаработки = 1;
				КонецЕсли;
				
				ПериодВДнях = ПериодПлановойНаработки * ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки;
				ПланНарабВДень = ВыборкаДляНаработки.ПлановаяНаработка / ПериодВДнях;
				
				МежремИнтервал = ВыборкаДляНаработки.ЗначениеПараметраНаработки / ПланНарабВДень;
				Если ЗначениеЗаполнено(МежремонтныйИнтервал) Тогда
					Если МежремИнтервал < МежремонтныйИнтервал Тогда
						МежремонтныйИнтервал = МежремИнтервал;
					КонецЕсли;
				Иначе МежремонтныйИнтервал = МежремИнтервал;
				КонецЕсли;
			Иначе 
				ШаблонСообщения = НСтр("ru = 'Проверьте заполнение:
                                        |1) показателей на вкладке ""Наработка"" формы ""Настройка показателей эксплуатации"";
                                        |2) параметров планирования по наработке в способе планирования ""%1"".'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаДляПериодичности.СпособПланирования);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе 
		ТекстСообщения = НСтр("ru = 'Проверьте заполнение ""Способ планирования""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат МежремонтныйИнтервал;
	
КонецФункции 

&НаСервере
Процедура ЗаписатьНормативныеРемонты(ТекОбъект, Отказ)

	Если МодифицированностьНормРемонтов Тогда
		
		Попытка
			
			НаборЗаписейДействующие = РегистрыСведений.торо_НормативныеРемонтыОборудования.СоздатьНаборЗаписей();
			НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписейУдаленные	= РегистрыСведений.торо_НормативныеРемонтыОборудованияУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			
			Для Каждого СтрокаНорматива Из НормативныеРемонты Цикл
					
				Если НЕ ЗначениеЗаполнено(СтрокаНорматива.ТиповойОР) Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Истина;
					
				ИначеЕсли СтрокаНорматива.Удален Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Ложь;
					
					НС = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаНорматива,"ТиповойОР,ВидРемонта");
					НС.ОбъектРемонта = ТекОбъект;
					
				Иначе	
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта,ТиповойОР",СтрокаНорматива.ВидРемонта,Справочники.торо_ТиповыеОР.ПустаяСсылка())).Количество() = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписейДействующие.Записать();
			НаборЗаписейУдаленные.Записать();
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать нормативные ремонты: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьНормРемонтов ИЛИ МодифицированностьПредшествующихРемонтов Тогда
		
		Попытка
			Если ПредТиповойОР <> Объект.ТиповойОР Тогда
				ИзменитьПредшествующиеРемонтыНаСервере(ТекОбъект, ПредТиповойОР, Объект.ТиповойОР);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписей.Отбор.ТиповойОР.Установить(Справочники.торо_ТиповыеОР.ПустаяСсылка());
			НаборЗаписей.Записать(Истина);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТабТекПредшествующих",ПредшествующиеРемонты.Выгрузить(Новый Структура("ТиповойОР",Справочники.торо_ТиповыеОР.ПустаяСсылка())));
			Запрос.УстановитьПараметр("ОбъектРемонта",ТекОбъект);
			Запрос.Текст = "ВЫБРАТЬ
			|	ТабПредРемонтов.ВидРемонта,
			|	ТабПредРемонтов.ПредшествующийВидРемонта,
			|	ТабПредРемонтов.ТиповойОР
			|ПОМЕСТИТЬ ТабПредРемонтов
			|ИЗ
			|	&ТабТекПредшествующих КАК ТабПредРемонтов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
			|	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
			|	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР,
			|	ЛОЖЬ КАК Приоритет
			|ПОМЕСТИТЬ ТабСПриоритетами
			|ИЗ
			|	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
			|ГДЕ
			|	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТабПредРемонтов.ВидРемонта,
			|	ТабПредРемонтов.ПредшествующийВидРемонта,
			|	ТабПредРемонтов.ТиповойОР,
			|	ИСТИНА
			|ИЗ
			|	ТабПредРемонтов КАК ТабПредРемонтов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ТиповойОР,
			|	МАКСИМУМ(ТабСПриоритетами.Приоритет) КАК Приоритет
			|ПОМЕСТИТЬ ТабСМаксПриоритетами
			|ИЗ
			|	ТабСПриоритетами КАК ТабСПриоритетами
			|
			|СГРУППИРОВАТЬ ПО
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ТиповойОР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ПредшествующийВидРемонта,
			|	ТабСПриоритетами.ТиповойОР,
			|	&ОбъектРемонта КАК ОбъектРемонта,
			|	ВЫБОР
			|		КОГДА торо_НормативныеРемонтыОборудования.ВидРемонта ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ТабСПриоритетами.Приоритет
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	ТабСМаксПриоритетами КАК ТабСМаксПриоритетами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСПриоритетами КАК ТабСПриоритетами
			|		ПО ТабСМаксПриоритетами.ВидРемонта = ТабСПриоритетами.ВидРемонта
			|			И ТабСМаксПриоритетами.ТиповойОР = ТабСПриоритетами.ТиповойОР
			|			И ТабСМаксПриоритетами.Приоритет = ТабСПриоритетами.Приоритет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|		ПО ТабСМаксПриоритетами.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
			|			И (торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			|				И торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
			|				И торо_НормативныеРемонтыОборудования.Приоритет)";
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ПредшествующийВидРемонта) Тогда
						ШаблонСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты: для вида ремонта <%1> не заполнено поле ""Предшествующий вид ремонта""'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					ИначеЕсли Не ЗначениеЗаполнено(Выборка.ВидРемонта) Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты: в одной из строк не заполнено поле ""Вид ремонта""'");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
					КонецЕсли;
					
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
					
					НаборЗаписейОР = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
					НаборЗаписейОР.Отбор.ОбъектРемонта.Установить(ТекОбъект);
					НаборЗаписейОР.Отбор.ТиповойОР.Установить(Выборка.ТиповойОР);
					НаборЗаписейОР.Отбор.ВидРемонта.Установить(Выборка.ВидРемонта);
					НаборЗаписейОР.Отбор.ПредшествующийВидРемонта.Установить(Выборка.ПредшествующийВидРемонта);
					
					ЗаполнитьЗначенияСвойств(НаборЗаписейОР.Добавить(),Выборка);
					
					НаборЗаписейОР.Записать(Истина);
					
				КонецЦикла;
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьНормРемонтов ИЛИ МодифицированностьЗамещаемыхРемонтов Тогда
		
		Попытка
			Если ПредТиповойОР <> Объект.ТиповойОР Тогда
				ИзменитьЗамещаемыеРемонтыНаСервере(ТекОбъект, ПредТиповойОР, Объект.ТиповойОР);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписей.Отбор.ТиповойОР.Установить(Справочники.торо_ТиповыеОР.ПустаяСсылка());
			НаборЗаписей.Записать(Истина);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТабТекЗамещающих",ЗамещаемыеРемонты.Выгрузить(Новый Структура("ТиповойОР",Справочники.торо_ТиповыеОР.ПустаяСсылка())));
			Запрос.УстановитьПараметр("ОбъектРемонта",ТекОбъект);
			Запрос.Текст = "ВЫБРАТЬ
			|	ТабТекЗамещающих.ВидРемонта,
			|	ТабТекЗамещающих.ЗамещаемыйВидРемонта,
			|	ТабТекЗамещающих.ТиповойОР,
			|	ТабТекЗамещающих.СпособЗамещения,
			|	ТабТекЗамещающих.НачальнаяГраница,
			|	ТабТекЗамещающих.КонечнаяГраница
			|ПОМЕСТИТЬ ТабТекЗамещающих
			|ИЗ
			|	&ТабТекЗамещающих КАК ТабТекЗамещающих
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница,
			|	ЛОЖЬ КАК Приоритет
			|ПОМЕСТИТЬ ТабСПриоритетами
			|ИЗ
			|	РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
			|ГДЕ
			|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта = &ОбъектРемонта
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТабТекЗамещающих.ВидРемонта,
			|	ТабТекЗамещающих.ЗамещаемыйВидРемонта,
			|	ТабТекЗамещающих.ТиповойОР,
			|	ТабТекЗамещающих.СпособЗамещения,
			|	ТабТекЗамещающих.НачальнаяГраница,
			|	ТабТекЗамещающих.КонечнаяГраница,
			|	ИСТИНА
			|ИЗ
			|	ТабТекЗамещающих КАК ТабТекЗамещающих
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ТиповойОР,
			|	МАКСИМУМ(ТабСПриоритетами.Приоритет) КАК Приоритет
			|ПОМЕСТИТЬ ТабСМаксПриоритетами
			|ИЗ
			|	ТабСПриоритетами КАК ТабСПриоритетами
			|
			|СГРУППИРОВАТЬ ПО
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ТиповойОР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабСПриоритетами.ВидРемонта,
			|	ТабСПриоритетами.ЗамещаемыйВидРемонта,
			|	ТабСПриоритетами.ТиповойОР,
			|	ТабСПриоритетами.СпособЗамещения,
			|	ТабСПриоритетами.НачальнаяГраница,
			|	ТабСПриоритетами.КонечнаяГраница,
			|	ВЫБОР
			|		КОГДА торо_НормативныеРемонтыОборудования.ВидРемонта ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ТабСПриоритетами.Приоритет
			|	КОНЕЦ КАК Приоритет,
			|	&ОбъектРемонта КАК ОбъектРемонта
			|ИЗ
			|	ТабСМаксПриоритетами КАК ТабСМаксПриоритетами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСПриоритетами КАК ТабСПриоритетами
			|		ПО ТабСМаксПриоритетами.ВидРемонта = ТабСПриоритетами.ВидРемонта
			|			И ТабСМаксПриоритетами.ТиповойОР = ТабСПриоритетами.ТиповойОР
			|			И ТабСМаксПриоритетами.Приоритет = ТабСПриоритетами.Приоритет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|		ПО ТабСМаксПриоритетами.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
			|			И (торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			|				И торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
			|				И торо_НормативныеРемонтыОборудования.Приоритет)";
			
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ЗамещаемыйВидРемонта) Тогда
						ШаблонСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты: для вида ремонта <%1> не заполнено поле ""Замещаемый вид ремонта""'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
					ИначеЕсли Не ЗначениеЗаполнено(Выборка.ВидРемонта) Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось записать предшествующие ремонты: в одной из строк не заполнено поле ""Вид ремонта""'");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
					КонецЕсли;
					
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
					
					НаборЗаписейОР = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
					НаборЗаписейОР.Отбор.ОбъектРемонта.Установить(ТекОбъект);
					НаборЗаписейОР.Отбор.ТиповойОР.Установить(Выборка.ТиповойОР);
					НаборЗаписейОР.Отбор.ВидРемонта.Установить(Выборка.ВидРемонта);
					НаборЗаписейОР.Отбор.ЗамещаемыйВидРемонта.Установить(Выборка.ЗамещаемыйВидРемонта);
					
					ЗаполнитьЗначенияСвойств(НаборЗаписейОР.Добавить(),Выборка);
					
					НаборЗаписейОР.Записать(Истина);
					
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать замещаемые ремонты: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	МодифицированностьНормРемонтов = Ложь;
	МодифицированностьЗамещаемыхРемонтов = Ложь;
	МодифицированностьПредшествующихРемонтов = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСвязанныеСтроки(ВидРемонта,ТиповойОР)
	
	СтруктураВозврата = Новый Структура("МассивУдаляемыхСтрокПредшествующиеРемонты, МассивУдаляемыхСтрокЗамещаемыеРемонты,
										|МассивУдаляемыхСтрокТабЗатратПоВидамРемонта,МассивУдаляемыхСтрокЗапланированныеРемонты,
										|МассивУдаляемыхСтрокРМ");
	СтруктураВозврата.МассивУдаляемыхСтрокПредшествующиеРемонты = Новый Массив;
	СтруктураВозврата.МассивУдаляемыхСтрокЗамещаемыеРемонты = Новый Массив;
	СтруктураВозврата.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта = Новый Массив;
	СтруктураВозврата.МассивУдаляемыхСтрокЗапланированныеРемонты = Новый Массив;
	СтруктураВозврата.МассивУдаляемыхСтрокРМ = Новый Массив;
						
	МассивУдаляемыхСтрокПредшествующиеРемонты = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ВидРемонта, ТиповойОР", ВидРемонта, ТиповойОР));
	МассивУдаляемыхСтрокЗамещаемыеРемонты = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта,ТиповойОР", ВидРемонта, ТиповойОР));
	
	КолНормРемонтов = НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта,Удален",ВидРемонта,Ложь)).Количество();
	Если КолНормРемонтов = 1 Тогда
		
		ЕщеУдаляемыеСтрокиПредшествующиеРемонты = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта, ТиповойОР", ВидРемонта, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
		
		Для каждого Эл Из ЕщеУдаляемыеСтрокиПредшествующиеРемонты Цикл
			Если МассивУдаляемыхСтрокПредшествующиеРемонты.Найти(Эл) = Неопределено Тогда
				МассивУдаляемыхСтрокПредшествующиеРемонты.Добавить(Эл);
			КонецЕсли;
		КонецЦикла;
		
		ЕщеУдаляемыеСтрокиЗамещаемыеРемонты = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ЗамещаемыйВидРемонта, ТиповойОР", ВидРемонта, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
		
		Для каждого Эл Из ЕщеУдаляемыеСтрокиЗамещаемыеРемонты Цикл
			Если МассивУдаляемыхСтрокЗамещаемыеРемонты.Найти(Эл) = Неопределено Тогда
				МассивУдаляемыхСтрокЗамещаемыеРемонты.Добавить(Эл);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураВозврата.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("ВидРемонта", ВидРемонта));
		СтруктураВозврата.МассивУдаляемыхСтрокЗапланированныеРемонты = ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", ВидРемонта));
	КонецЕсли;
	
	СтруктураВозврата.МассивУдаляемыхСтрокПредшествующиеРемонты = МассивУдаляемыхСтрокПредшествующиеРемонты;
	СтруктураВозврата.МассивУдаляемыхСтрокЗамещаемыеРемонты = МассивУдаляемыхСтрокЗамещаемыеРемонты;
	
	Если НЕ ТаблицаОценокРММодифицированность Тогда
		МассивВозврата = ПрочитатьОценкиРМ(Объект.Ссылка, Объект.ТиповойОР);
		
		РСНЗТаблицаОценокРМ.Очистить();
		
		Для каждого Элем Из МассивВозврата Цикл
			
			НС = РСНЗТаблицаОценокРМ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
		КонецЦикла;
		
		ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	КонецЕсли;
	СтруктураВозврата.МассивУдаляемыхСтрокРМ = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта", ВидРемонта));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура НормативныеРемонтыПередУдалениемЗавершение(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокПредшествующиеРемонты Цикл
			ПредшествующиеРемонты.Удалить(Элем);
			МодифицированностьПредшествующихРемонтов = Истина;
		КонецЦикла;

		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокЗамещаемыеРемонты Цикл
			ЗамещаемыеРемонты.Удалить(Элем);
			МодифицированностьЗамещаемыхРемонтов = Истина;
		КонецЦикла;
		
		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта Цикл
			ТабЗатратПоВидамРемонта.Удалить(Элем);
			МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
			МодифицированностьЗапчастейОР = Истина;
		КонецЦикла;
		
		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокЗапланированныеРемонты Цикл
			ЗапланированныеРемонты.Удалить(Элем);
		КонецЦикла;
		
		УдалитьОсновноеЗависимоеОборудованиеПоВидуРемонта(ДополнительныеПараметры.ТекДанные.ВидРемонта);
			
		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокРМ Цикл
			РСНЗТаблицаОценокРМ.Удалить(Элем);
			НайденныеСтроки = ТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта, Сезон, Период", Элем.ВидРемонта, Элем.Сезон, Элем.Период));
			Для каждого Строка Из НайденныеСтроки Цикл
				ТаблицаОценокРМ.Удалить(Строка);
			КонецЦикла; 
			ТаблицаОценокРММодифицированность = Истина;
		КонецЦикла;	
				
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ТекДанные.ТиповойОР) Тогда
			ДополнительныеПараметры.ТекДанные.Удален = Истина;
			УстановитьОтборНеИспользуемыхСтрок(Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка,"НормативныеРемонты");
		Иначе
			Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
				СовпадающиеРемонты = НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", Объект.ТиповойОР, ДополнительныеПараметры.ТекДанные.ВидРемонта));
				Если СовпадающиеРемонты.Количество() > 0 Тогда 
					СовпадающиеРемонты[0].Удален = Ложь;
				КонецЕсли;
			КонецЕсли;
			НормативныеРемонты.Удалить(ДополнительныеПараметры.ТекДанные);
		КонецЕсли;
		
		МодифицированностьНормРемонтов = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПересеченияСЦепочкойНаСервере(ТекВидРемонта, МасВидовЦепочек)
	
	СтандартнаяОбработка = Истина;
		
	Если ЗначениеЗаполнено(ТекВидРемонта) Тогда
		
		Если НЕ ЗначениеЗаполнено(МасВидовЦепочек) И НЕ МодифицированностьРемЦиклов Тогда
			ВидыЦепочек = ОбновитьФиксированныеРемонтныеЦиклы(Объект.Ссылка, Объект.ТиповойОР);
			Для Каждого ЭлементВидовЦепочек Из ВидыЦепочек Цикл
				МасВидовЦепочек.Добавить(ЭлементВидовЦепочек.ВидЦепочки);	
			КонецЦикла;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
		               |ГДЕ
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка В(&МассивВидовЦепочек)
		               |	И торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта = &ВидРемонта";
		
		Запрос.УстановитьПараметр("МассивВидовЦепочек", МасВидовЦепочек);
		Запрос.УстановитьПараметр("ВидРемонта", ТекВидРемонта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтандартнаяОбработка = Ложь;
			ШаблонСообщения = НСтр("ru = 'Вид ремонта ""%1"" уже есть в выбранной цепочке ""%2"" в фиксированных ремонтных циклах!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта, Выборка.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;

	Возврат СтандартнаяОбработка;
	
КонецФункции

#КонецОбласти

#Область РемонтныеЦиклы

&НаКлиенте
Процедура ЗаполнитьРемонтныеЦиклы()
	
	Если НЕ МодифицированностьРемЦиклов Тогда
		МассивЦепочек = ОбновитьФиксированныеРемонтныеЦиклы(Объект.Ссылка, Объект.ТиповойОР);
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Очистить();
		РемЦиклыОборудования.Очистить();
		
		Для каждого Элем Из МассивЦепочек Цикл
			
			НС = ТабличноеПолеРемонтныеЦиклыОборудования.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
			НС = РемЦиклыОборудования.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПоследовательностьРемонтовНаСервере(Цепочка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НомерСтроки,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НормативныйРемонт,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособПланирования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособВыполнения,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПродолжительность
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Цепочка);
	
	Результат = Запрос.Выполнить();
	МассивРемонтов = торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Результат);
	
	Возврат МассивРемонтов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьФиксированныеРемонтныеЦиклы(ОбъектРемонта, ТиповойОР, ТолькоОР = Истина, ТолькоТиповыеОР = Истина)
	
	МассивЦепочек = Новый Массив;
	
	СписокОтбора = Новый СписокЗначений;
	Если ТолькоОР И ЗначениеЗаполнено(ОбъектРемонта) Тогда 
		СписокОтбора.Добавить(ОбъектРемонта);
	КонецЕсли;
	Если ТолькоТиповыеОР И ЗначениеЗаполнено(ТиповойОР) Тогда
		СписокОтбора.Добавить(ТиповойОР);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РемонтныеЦиклыОборудования.ВидЦепочки,
	|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов,
	|	торо_РемонтныеЦиклыОборудования.НеУчитыватьПростоиОборудования
	|ИЗ
	|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	|ГДЕ
	|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов В(&СписокОтбора)";
	
	Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	МассивЦепочек = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Структ = Новый Структура("ВидЦепочки, ГруппаОбъектовРемонтов, НеУчитыватьПростоиОборудования, ТиповойОР");
		ЗаполнитьЗначенияСвойств(Структ, Выборка);
		Структ.ТиповойОР = ?(ТипЗнч(Выборка.ГруппаОбъектовРемонтов) = Тип("СправочникСсылка.торо_ТиповыеОР"), Истина, Ложь);
		МассивЦепочек.Добавить(Структ);
		
	КонецЦикла;
	
	Возврат МассивЦепочек;
	
КонецФункции

&НаСервере
Процедура ЗаписатьРемонтныеЦиклы(ТекОбъект, Отказ)
	
	// Цепочки
	Если МодифицированностьРемЦиклов Тогда 
		
		Для каждого Строка из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ГруппаОбъектовРемонтов) Тогда
				Строка.ГруппаОбъектовРемонтов = ТекОбъект;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			ТаблицаЗначенийРемонтныеЦиклыОборудования = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
			МассивСтрокЦиклов = ТаблицаЗначенийРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекОбъект));
			ТаблицаБуфер = ТаблицаЗначенийРемонтныеЦиклыОборудования.Скопировать(МассивСтрокЦиклов);
			
			НаборРемонтныхЦикловОборудования = РегистрыСведений.торо_РемонтныеЦиклыОборудования.СоздатьНаборЗаписей();
			НаборРемонтныхЦикловОборудования.Отбор.ГруппаОбъектовРемонтов.Установить(ТекОбъект);
			НаборРемонтныхЦикловОборудования.Загрузить(ТаблицаБуфер);
			НаборРемонтныхЦикловОборудования.Записать();
			
			МодифицированностьРемЦиклов = Ложь;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать фиксированные ремонтные циклы: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НаложитьОтборНаРемЦиклы(ТолькоОР, ТолькоТиповыеОР)
	
	Если ТолькоОР и ТолькоТиповыеОР Тогда
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(РемЦиклыОборудования.Выгрузить());
		
	ИначеЕсли ТолькоОР Тогда
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(РемЦиклыОборудования.Выгрузить(Новый Структура("ТиповойОР", Ложь)));
		
	ИначеЕсли ТолькоТиповыеОР Тогда
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(РемЦиклыОборудования.Выгрузить(Новый Структура("ТиповойОР", Истина)));
		
	Иначе
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПересеченияНаСервере(ТекЦепочка)
	
	ПрерватьПроверку = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Ремонты
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РемонтыНовые
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ремонты.ВидРемонта КАК ВидРемонтаСтарый,
	|	РемонтыНовые.ВидРемонта КАК ВидРемонтаНовый,
	|	Ремонты.Ссылка КАК Ссылка
	|ИЗ
	|	Ремонты КАК Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыНовые КАК РемонтыНовые
	|		ПО Ремонты.ВидРемонта = РемонтыНовые.ВидРемонта";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	
	МассивЦепочек = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить().ВыгрузитьКолонку("ВидЦепочки");
	ИндексТекЦепочки = МассивЦепочек.Найти(ТекЦепочка);
	Если ИндексТекЦепочки <> Неопределено Тогда
		МассивЦепочек.Удалить(ИндексТекЦепочки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивЦепочек);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[2].Выбрать();
	
	флДобавлятьЦепочку = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ТекЦепочка Тогда
			флДобавлятьЦепочку = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ флДобавлятьЦепочку Тогда
		ПрерватьПроверку = Истина;
		ШаблонСообщения = НСтр("ru = 'Цепочку ""%1"" нельзя добавить в список фиксированных ремонтных циклов, так как она содержит виды ремонтов, входящие в другие выбранные цепочки.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекЦепочка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТабличноеПолеРемонтныеЦиклыОборудования");
	КонецЕсли;
	
	МассивРемонтов = НормативныеРемонты.Выгрузить().ВыгрузитьКолонку("ВидРемонта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|   торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта В (&МассивРемонтов)
	|	И торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("МассивРемонтов", МассивРемонтов);
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПрерватьПроверку = Истина;
		ШаблонСообщения = НСтр("ru = 'Вид ремонта ""%1"" из цепочки ""%2"" уже выбран в качестве нормативного ремонта!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта, Выборка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТабличноеПолеРемонтныеЦиклыОборудования");
	КонецЦикла;
	
	Возврат ПрерватьПроверку;
	
КонецФункции

&НаСервере
Процедура СортироватьПоВозрастаниюНаСервере()
	
	ТаблЦиклов = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
	ТаблЦиклов.Сортировать("ВидЦепочки Возр");
	ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(ТаблЦиклов);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьПоУбываниюНаСервере()
	
	ТаблЦиклов = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
	ТаблЦиклов.Сортировать("ВидЦепочки Убыв");
	ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(ТаблЦиклов);
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураРемонтногоЦикла

&НаКлиенте
Процедура ИнициализироватьЗакладкуСтруктураРемонтногоЦикла()
	
	Если МодифицированностьНормРемонтов ИЛИ МодифицированностьЗамещаемыхРемонтов ИЛИ МодифицированностьПредшествующихРемонтов 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОчиститьЗакладкуСтруктураРемонтногоЦикла();
		Возврат;   
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		МассивРемонтов = Новый Массив;
		Для каждого Ремонт Из ЗапланированныеРемонты Цикл
			МассивРемонтов.Добавить(Ремонт);	
		КонецЦикла;	
		
		Для каждого РемонтТекущий из МассивРемонтов Цикл
			Если НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", РемонтТекущий.ВидРемонтныхРабот)).Количество() = 0 Тогда	
				ЗапланированныеРемонты.Удалить(ЗапланированныеРемонты.Индекс(РемонтТекущий));	
			КонецЕсли;
		КонецЦикла;
		
		МассивНормативныхРемонтов = торо_РасчетСтруктурыРемонтногоЦикла.ПолучитьТаблицуНормативныхРемонтов(Объект.Ссылка);
		
		Для каждого РемонтТекущий из МассивНормативныхРемонтов Цикл
			Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", РемонтТекущий.Видремонта)).Количество() = 0 Тогда
				НС = ЗапланированныеРемонты.Добавить();
				НС.ВидРемонтныхРабот = РемонтТекущий.Видремонта;
				НС.Цвет = Новый Цвет(255, 255, 255);
				НС.ЦветТекста = Новый Цвет(0, 0, 0);
				НС.Выбран = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбора_ПослеВопросаОЗаписи(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		Если ЭтаФорма.Записать() Тогда
			ПанельОРПриСменеСтраницы(Элементы.ПанельОР, ДопПараметры.ТекущаяСтраница);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбораВыборИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВРНачалоЦикла = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ВРНачалоЦиклаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыНастроек(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапланированныеРемонты.Очистить();
	
	Для каждого Элем Из Результат.МассивРемонтов Цикл
		НС = ЗапланированныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	
	Нормировать = Результат.Нормировать;
	
	Если Результат.Пересчитать Тогда
		
		МожноПечататьВизуализацию = Ложь;
		
		ТаблицаРемонтовВизуализация.Очистить();
		
		Для каждого Стр Из ТаблицаРемонтов Цикл
			НС = ТаблицаРемонтовВизуализация.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
		КонецЦикла;
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
		ЗаполнитьПараметрыСтруктурыРемонтногоЦикла();
		
	Иначе
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СоответствиеЦветов.Очистить();
	Для Каждого СтрокаРемонт Из ЗапланированныеРемонты Цикл
		Если Не СтрокаРемонт.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НС = СоответствиеЦветов.Добавить();
		НС.ВидРемонтныхРабот = СтрокаРемонт.ВидРемонтныхРабот;
		НС.Цвет = СтрокаРемонт.Цвет;
		НС.ЦветТекста = СтрокаРемонт.ЦветТекста;
		НС.Шрифт = СтрокаРемонт.Шрифт;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчитатьЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивНужныхВР = Новый Массив;
	Для каждого ЭлементСписка из Список Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивНужныхВР.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	МассивНормативныхРемонтов = ДополнительныеПараметры.МассивНормативныхРемонтов;
	РасчетВыполнен = ПерерасчитатьНаСервере(МассивНужныхВР, МассивНормативныхРемонтов);
	
	Если Не РасчетВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	торо_РасчетСтруктурыРемонтногоЦиклаКлиент.НарисоватьМнемосхему(ЭтаФорма);
	 
КонецПроцедуры

&НаСервере
Функция ПерерасчитатьНаСервере(МассивНужныхВР, МассивНормативныхРемонтов)
	
	ПолеТД.Очистить();
	ПолеТД.АвтоМасштаб = Истина;
	
	СоответствиеИндексаИНомераКолонки.Очистить();
	ТаблицаРемонтовВизуализация.Очистить();
	НадписьКоличествоРемонтовСтруктураРЦ = "";
	
	МассивГрафиковРаботы = Новый Массив;
	МассивГрафиковРаботы.Добавить(Объект.ПлановыйГрафикРаботы);
	
	ТаблицаОбъектыРемонта = Новый ТаблицаЗначений;
	ТаблицаОбъектыРемонта.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаОбъектыРемонта.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаОбъектыРемонта.Колонки.Добавить("ПлановыйГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	ТаблицаОбъектыРемонта.Колонки.Добавить("РемонтнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	
	ТаблицаНормативов.Очистить();
	
	МассивИДТехКарт = Новый Массив;
	
	Для каждого Строка из МассивНормативныхРемонтов Цикл
		Если МассивНужныхВР.Найти(Строка.ВидРемонта) <> Неопределено Тогда
			НоваяСтрока = ТаблицаОбъектыРемонта.Добавить();
			НоваяСтрока.ОбъектРемонтныхРабот = Объект.Ссылка;
			НоваяСтрока.ВидРемонтныхРабот = Строка.ВидРемонта;
			НоваяСтрока.ПлановыйГрафикРаботы = Объект.ПлановыйГрафикРаботы;
			НоваяСтрока.РемонтнаяГруппа = Объект.ТиповойОР;
			
			НоваяСтрокаНорматива = ТаблицаНормативов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНорматива, Строка);
			НоваяСтрокаНорматива.ВидРемонтныхРабот = Строка.ВидРемонта;
			НоваяСтрокаНорматива.ПлановыйГрафикРаботы = Объект.ПлановыйГрафикРаботы;
			
			МассивИДТехКарт.Добавить(Строка.НормативныйРемонт);
			МассивГрафиковРаботы.Добавить(Строка.ГрафикРемонтныхРабот);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПродолжительности = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьПродолжительностиТехКарт(МассивИДТехКарт);
	Для каждого Строка из ТаблицаНормативов Цикл
		Строка.Продолжительность = СоответствиеПродолжительности[Строка.НормативныйРемонт];
	КонецЦикла;
	
	МассивГрафиковРаботы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивГрафиковРаботы);
	
	ТабПараметрыНаработки = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработкиДляСтруктурыРЦ(Объект.Ссылка);
	ТабРемонтов = торо_РасчетСтруктурыРемонтногоЦикла.РасчетСтруктурыРЦ(Объект.Ссылка, ВРНачалоЦикла, ТаблицаОбъектыРемонта, ТабПараметрыНаработки, МассивГрафиковРаботы);
	
	Если ТабРемонтов = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаРемонтов.Загрузить(ТабРемонтов);
	ТаблицаРемонтовВизуализация.Загрузить(ТабРемонтов);

	ЗаполнитьПараметрыСтруктурыРемонтногоЦикла();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСтруктурыРемонтногоЦикла()
	
	торо_РасчетСтруктурыРемонтногоЦикла.ЗаполнитьДатыПредшествующихВТаблицеРемонтов(ТаблицаРемонтовВизуализация, ТаблицаНормативов.Выгрузить(), Объект.ПлановыйГрафикРаботы);
	
	ИндексСтроки = 7;
	КолонкиНаработки.Очистить();
	ЗначенияНаработки.Очистить();
	
	МассивОР = Новый Массив;
	МассивОР.Добавить(Объект.Ссылка);
	
	торо_РасчетСтруктурыРемонтногоЦикла.РассчитатьНаработкуДляВизуализации(ТаблицаРемонтовВизуализация, МассивОР, КолонкиНаработки, ЗначенияНаработки, ИндексСтроки, "ДатаПредшествующего", ПолеТД);
	торо_РасчетСтруктурыРемонтногоЦикла.РассчитатьНаработкуДляВизуализации(ТаблицаРемонтовВизуализация, МассивОР, КолонкиНаработки, ЗначенияНаработки, ИндексСтроки, "ДатаПредшествующегоТогожеВида", ПолеТД);
	
КонецПроцедуры

&НаСервере
Функция ПечатьСруктурыРЦНаСервере()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Нормировать", Нормировать);
	ДополнительныеПараметры.Вставить("СписокВидовРемонтов", СписокВидовРемонтов);
	ДополнительныеПараметры.Вставить("ЗапланированныеРемонты", ЗапланированныеРемонты);
	ДополнительныеПараметры.Вставить("ПолеМнемосхемы", ПолеМнемосхемы);
	ДополнительныеПараметры.Вставить("ТаблицаРемонтовВизуализация", ТаблицаРемонтовВизуализация);
	ДополнительныеПараметры.Вставить("КолонкиНаработки", КолонкиНаработки);
	ДополнительныеПараметры.Вставить("ЗначенияНаработки", ЗначенияНаработки);
	ДополнительныеПараметры.Вставить("КолСтрокСхемы", КолСтрокСхемы);
	ДополнительныеПараметры.Вставить("ПлановыйГрафикРаботы", Объект.ПлановыйГрафикРаботы);
	
	Возврат торо_РасчетСтруктурыРемонтногоЦикла.ПечатьСтруктурыРЦ(Объект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ОчиститьЗакладкуСтруктураРемонтногоЦикла()
	
	Элементы.Перерасчитать.Доступность 	= Ложь;
	Элементы.Построить.Доступность 		= Ложь;
	Элементы.Настройки.Доступность 		= Ложь;
	
	ВРНачалоЦикла = Неопределено;
	торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
	ОчиститьПолеТабличногоДокумента();
	НадписьКоличествоРемонтовСтруктураРЦ = "";
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПолеТабличногоДокумента()
	
	ПолеТД.Очистить();

КонецПроцедуры	

#КонецОбласти

#Область Запчасти

&НаКлиенте
Процедура ЗаполнитьЗапчасти()
	
	Если НЕ МодифицированностьЗапчастейОР Тогда
		СтруктураВозврата = ЗаполнитьТабЗапчастейОбъектовРемонта(Параметры.Ключ);
		
		Если СтруктураВозврата.Свойство("Запчасти") Тогда
			
			ТабЗапчастейОбъектовРемонта.Очистить();
			Для Каждого Стр Из СтруктураВозврата.Запчасти Цикл
				НС = ТабЗапчастейОбъектовРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Стр);
				НС.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(НС.Номенклатура);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураВозврата.Свойство("НормаЗапчастей") Тогда
			
			ТабЗатратПоВидамРемонта.Очистить();
			Для Каждого Стр Из СтруктураВозврата.НормаЗапчастей Цикл
				НС = ТабЗатратПоВидамРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Стр);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивВозврата = ЗаполнитьИсториюЗапчастейОРНаСервере(Объект.Ссылка);
	Для Каждого Стр ИЗ МассивВозврата Цикл
		НС = ТабИсторииЗаменыЗЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьТабЗапчастейОбъектовРемонта(Ссылка)
	
	СтруктураДанных = Новый Структура();
	
	Если НЕ Ссылка.Пустая() Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_Запчасти.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_Запчасти.Номенклатура КАК Номенклатура,
		               |	торо_Запчасти.Качество КАК Качество,
		               |	торо_Запчасти.Характеристика КАК Характеристика,
		               |	торо_Запчасти.ТиповойОР КАК ТиповойОР,
		               |	торо_Запчасти.Количество КАК Количество,
		               |	ВЫБОР
		               |		КОГДА торо_Запчасти.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА торо_ЗапчастиУдаленные.ОбъектРемонта ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ИЗ
		               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗапчастиУдаленные КАК торо_ЗапчастиУдаленные
		               |		ПО торо_Запчасти.ОбъектРемонта = торо_ЗапчастиУдаленные.ОбъектРемонта
		               |			И торо_Запчасти.Номенклатура = торо_ЗапчастиУдаленные.Номенклатура
		               |			И торо_Запчасти.Характеристика = торо_ЗапчастиУдаленные.Характеристика
		               |			И торо_Запчасти.ТиповойОР = торо_ЗапчастиУдаленные.ТиповойОР
		               |ГДЕ
		               |	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта КАК ВидРемонта,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР КАК ТиповойОР,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
		               |	ВЫБОР
		               |		КОГДА торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ИЗ
		               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные КАК торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
		               |		ПО торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.Характеристика = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Характеристика
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ТиповойОР
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ВидРемонта
		               |ГДЕ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		МассивНормЗапчастей = Новый Массив;
		
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			
			МассивЗапчастей = Новый Массив;
			Выборка = МассивРезультатов[0].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтруктураПараметр = Новый Структура("ОбъектРемонта,Номенклатура,Качество,Характеристика,
													|Количество,ТиповойОР,Удален,ИзТипового");
				ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);				
				
				МассивЗапчастей.Добавить(СтруктураПараметр);
				
			КонецЦикла;
			
			СтруктураДанных.Вставить("Запчасти",МассивЗапчастей);
			
		КонецЕсли;
		
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			
			МассивНормЗапчастей = Новый Массив;
			
			Выборка = МассивРезультатов[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтруктураПараметр = Новый Структура("ОбъектРемонта,Номенклатура,ВидРемонта,Количество,
													|ТиповойОР,ИзТипового, Удален, Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
				
				МассивНормЗапчастей.Добавить(СтруктураПараметр);
				
			КонецЦикла;
			
			СтруктураДанных.Вставить("НормаЗапчастей",МассивНормЗапчастей);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьИсториюЗапчастейОРНаСервере(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ИсторияЗапчастейОбъектаРемонта.Регистратор КАК Ремонт,
	|	торо_ИсторияЗапчастейОбъектаРемонта.ОбъектРемонта,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Запчасть,
	|	торо_ИсторияЗапчастейОбъектаРемонта.СерийныйНомер,
	|	торо_ИсторияЗапчастейОбъектаРемонта.СтатусДвиженияЗЧ,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Количество,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Установлена,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Запчасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Период КАК ДатаЗамены
	|ИЗ
	|	РегистрСведений.торо_ИсторияЗапчастейОбъектаРемонта КАК торо_ИсторияЗапчастейОбъектаРемонта
	|ГДЕ
	|	торо_ИсторияЗапчастейОбъектаРемонта.ОбъектРемонта = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПараметр = Новый Структура("Ремонт,ОбъектРемонта,Запчасть,СерийныйНомер,СтатусДвиженияЗЧ,
											|Количество,Установлена,ЕдиницаИзмерения,ДатаЗамены");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
		
		МассивВозврата.Добавить(СтруктураПараметр);
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗапчастиИзТиповогоОР(ТиповойОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТиповыеОРЗапчасти.Номенклатура КАК Номенклатура,
	               |	торо_ТиповыеОРЗапчасти.Количество КАК Количество,
	               |	торо_ТиповыеОРЗапчасти.Характеристика КАК Характеристика,
	               |	торо_ТиповыеОРЗапчасти.Качество КАК Качество
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.Запчасти КАК торо_ТиповыеОРЗапчасти
	               |ГДЕ
	               |	торо_ТиповыеОРЗапчасти.Ссылка = &ТиповойОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Номенклатура КАК Номенклатура,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.ВидРемонта КАК ВидРемонта,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Количество КАК Количество,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Характеристика КАК Характеристика
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.НормативныеЗатратыПриТОиР КАК торо_ТиповыеОРНормативныеЗатратыПриТОиР
	               |ГДЕ
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Ссылка = &ТиповойОР";
	   
	Запрос.УстановитьПараметр("ТиповойОР", ТиповойОР);
	
	Результат = Запрос.ВыполнитьПакет();
	стрВозврата = Новый Структура;
	
	Если НЕ Результат[0].Пустой() Тогда
		Выборка = Результат[0].Выбрать();
		мВозврата = Новый массив;
		
		Пока Выборка.Следующий() Цикл
			СтруктураПараметр = Новый Структура("Номенклатура, Количество, Характеристика, Качество");					
			ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
			мВозврата.Добавить(СтруктураПараметр);
		КонецЦикла;
			
		стрВозврата.Вставить("Запчасти", мВозврата);
	КонецЕсли;
	
	Если НЕ Результат[1].Пустой() Тогда
		Выборка = Результат[1].Выбрать();
		мВозврата = Новый массив;
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПараметр = Новый Структура("Номенклатура, Количество, ВидРемонта, Характеристика");			
			ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);
			мВозврата.Добавить(СтруктураПараметр);
		КонецЦикла;
			
		стрВозврата.Вставить("НормативныеЗатраты", мВозврата);
	КонецЕсли;
	
	возврат стрВозврата;
		
КонецФункции

&НаСервере
Процедура ЗаписатьЗапчасти(ТекОбъект, Отказ)
	
	Если МодифицированностьЗапчастейОР или МодифицированностьНормативныхЗатратПоЗапчастям Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_Запчасти.Номенклатура КАК Номенклатура,
		               |	торо_Запчасти.Качество КАК Качество,
		               |	торо_Запчасти.Характеристика КАК Характеристика,
		               |	торо_Запчасти.ТиповойОР КАК ТиповойОР,
		               |	торо_Запчасти.Количество КАК Количество
		               |ПОМЕСТИТЬ ВТ_ЗапчастиТОР
		               |ИЗ
		               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
		               |ГДЕ
		               |	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
		               |	И торо_Запчасти.ТиповойОР = &ТиповойОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Качество,
		               |	Характеристика,
		               |	ТиповойОР,
		               |	Количество
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	таб.Номенклатура КАК Номенклатура,
		               |	таб.Качество КАК Качество,
		               |	таб.Характеристика КАК Характеристика,
		               |	таб.ТиповойОР КАК ТиповойОР,
		               |	таб.Количество КАК Количество,
		               |	таб.ИзТипового КАК ИзТипового,
		               |	таб.Удален КАК Удален
		               |ПОМЕСТИТЬ ВТ_ЗапчастиОР
		               |ИЗ
		               |	&Запчасти_ОР КАК таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Качество,
		               |	Характеристика,
		               |	ТиповойОР,
		               |	Количество
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта КАК ВидРемонта,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР КАК ТиповойОР,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество
		               |ПОМЕСТИТЬ ВТ_ВР_ТОР
		               |ИЗ
		               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
		               |ГДЕ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
		               |	И торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = &ТиповойОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	ВидРемонта,
		               |	ТиповойОР,
		               |	Характеристика,
		               |	Количество
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	таб.Номенклатура КАК Номенклатура,
		               |	таб.ВидРемонта КАК ВидРемонта,
		               |	таб.ТиповойОР КАК ТиповойОР,
		               |	таб.Характеристика КАК Характеристика,
		               |	таб.Количество КАК Количество,
		               |	таб.ИзТипового КАК ИзТипового,
		               |	таб.Удален КАК Удален
		               |ПОМЕСТИТЬ ВТ_ВР_ОР
		               |ИЗ
		               |	&ВР_ОР КАК таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	ВидРемонта,
		               |	ТиповойОР,
		               |	Характеристика,
		               |	Количество
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ВТ_ЗапчастиТОР.Номенклатура, ВТ_ЗапчастиОР.Номенклатура) КАК Номенклатура,
		               |	ЕСТЬNULL(ВТ_ЗапчастиТОР.Качество, ВТ_ЗапчастиОР.Качество) КАК Качество,
		               |	ЕСТЬNULL(ВТ_ЗапчастиТОР.Характеристика, ВТ_ЗапчастиОР.Характеристика) КАК Характеристика,
		               |	ЕСТЬNULL(ВТ_ЗапчастиТОР.Количество, ВТ_ЗапчастиОР.Количество) КАК Количество,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL
		               |			ТОГДА ВТ_ЗапчастиТОР.ТиповойОР
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР
		               |					ТОГДА ВТ_ЗапчастиОР.ТиповойОР
		               |				ИНАЧЕ &ПустойТОР
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ТиповойОР,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР
		               |					ТОГДА ИСТИНА
		               |				ИНАЧЕ ЛОЖЬ
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА (НЕ(ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL
		               |						ИЛИ ВТ_ЗапчастиОР.Номенклатура ЕСТЬ NULL)
		               |				ИЛИ ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР)
		               |				И ВТ_ЗапчастиОР.Удален
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Удален
		               |ПОМЕСТИТЬ ВТ_Запчасти
		               |ИЗ
		               |	ВТ_ЗапчастиТОР КАК ВТ_ЗапчастиТОР
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЗапчастиОР КАК ВТ_ЗапчастиОР
		               |		ПО ВТ_ЗапчастиТОР.Номенклатура = ВТ_ЗапчастиОР.Номенклатура
		               |			И ВТ_ЗапчастиТОР.Качество = ВТ_ЗапчастиОР.Качество
		               |			И ВТ_ЗапчастиТОР.Характеристика = ВТ_ЗапчастиОР.Характеристика
		               |			И ВТ_ЗапчастиТОР.Количество = ВТ_ЗапчастиОР.Количество
		               |			И ВТ_ЗапчастиТОР.ТиповойОР = ВТ_ЗапчастиОР.ТиповойОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика,
		               |	ИзТипового
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Запчасти.Номенклатура КАК Номенклатура,
		               |	ВТ_Запчасти.Характеристика КАК Характеристика,
		               |	СУММА(1) КАК КоличествоСтрок
		               |ПОМЕСТИТЬ ВТ_ДублиВЗапчастях
		               |ИЗ
		               |	ВТ_Запчасти КАК ВТ_Запчасти
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_Запчасти.Номенклатура,
		               |	ВТ_Запчасти.Характеристика
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(1) > 1
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Запчасти.Номенклатура КАК Номенклатура,
		               |	ВТ_Запчасти.Качество КАК Качество,
		               |	ВТ_Запчасти.Характеристика КАК Характеристика,
		               |	ВТ_Запчасти.Количество КАК Количество,
		               |	ВТ_Запчасти.ТиповойОР КАК ТиповойОР,
		               |	ВТ_Запчасти.ИзТипового КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА ВТ_ДублиВЗапчастях.Номенклатура ЕСТЬ NULL
		               |			ТОГДА ВТ_Запчасти.Удален
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ПОМЕСТИТЬ ВТ_Запчасти_Промежуточная
		               |ИЗ
		               |	ВТ_Запчасти КАК ВТ_Запчасти
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДублиВЗапчастях КАК ВТ_ДублиВЗапчастях
		               |		ПО ВТ_Запчасти.Номенклатура = ВТ_ДублиВЗапчастях.Номенклатура
		               |			И ВТ_Запчасти.Характеристика = ВТ_ДублиВЗапчастях.Характеристика
		               |			И (ВТ_Запчасти.ИзТипового)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ВТ_ВР_ТОР.Номенклатура, ВТ_ВР_ОР.Номенклатура) КАК Номенклатура,
		               |	ЕСТЬNULL(ВТ_ВР_ТОР.ВидРемонта, ВТ_ВР_ОР.ВидРемонта) КАК ВидРемонта,
		               |	ЕСТЬNULL(ВТ_ВР_ТОР.Характеристика, ВТ_ВР_ОР.Характеристика) КАК Характеристика,
		               |	ЕСТЬNULL(ВТ_ВР_ТОР.Количество, ВТ_ВР_ОР.Количество) КАК Количество,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ВР_ТОР.Номенклатура ЕСТЬ NULL
		               |			ТОГДА ВТ_ВР_ТОР.ТиповойОР
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ВТ_ВР_ОР.ТиповойОР ЕСТЬ NULL
		               |					ТОГДА &ПустойТОР
		               |				ИНАЧЕ ВТ_ВР_ОР.ТиповойОР
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ТиповойОР,
		               |	ВТ_ВР_ОР.ИзТипового КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА НЕ(ВТ_ВР_ТОР.Номенклатура ЕСТЬ NULL
		               |						ИЛИ ВТ_ВР_ОР.Номенклатура ЕСТЬ NULL)
		               |				И ВТ_ВР_ОР.Удален
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Удален
		               |ПОМЕСТИТЬ ВТ_ВР
		               |ИЗ
		               |	ВТ_ВР_ТОР КАК ВТ_ВР_ТОР
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВР_ОР КАК ВТ_ВР_ОР
		               |		ПО ВТ_ВР_ТОР.Номенклатура = ВТ_ВР_ОР.Номенклатура
		               |			И ВТ_ВР_ТОР.ВидРемонта = ВТ_ВР_ОР.ВидРемонта
		               |			И ВТ_ВР_ТОР.Характеристика = ВТ_ВР_ОР.Характеристика
		               |			И ВТ_ВР_ТОР.Количество = ВТ_ВР_ОР.Количество
		               |			И ВТ_ВР_ТОР.ТиповойОР = ВТ_ВР_ОР.ТиповойОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	ВидРемонта,
		               |	Характеристика,
		               |	ИзТипового
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ВР.Номенклатура КАК Номенклатура,
		               |	ВТ_ВР.ВидРемонта КАК ВидРемонта,
		               |	ВТ_ВР.Характеристика КАК Характеристика,
		               |	СУММА(1) КАК КоличествоСтрок
		               |ПОМЕСТИТЬ Вт_ДублиВВР
		               |ИЗ
		               |	ВТ_ВР КАК ВТ_ВР
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ВР.Номенклатура,
		               |	ВТ_ВР.ВидРемонта,
		               |	ВТ_ВР.Характеристика
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(1) > 1
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	ВидРемонта,
		               |	Характеристика
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ВР.Номенклатура КАК Номенклатура,
		               |	ВТ_ВР.ВидРемонта КАК ВидРемонта,
		               |	ВТ_ВР.Характеристика КАК Характеристика,
		               |	ВТ_ВР.Количество КАК Количество,
		               |	ВТ_ВР.ТиповойОР КАК ТиповойОР,
		               |	ВТ_ВР.ИзТипового КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА Вт_ДублиВВР.Номенклатура ЕСТЬ NULL
		               |			ТОГДА ВТ_ВР.Удален
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ПОМЕСТИТЬ ВТ_ВР_Финальная
		               |ИЗ
		               |	ВТ_ВР КАК ВТ_ВР
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ДублиВВР КАК Вт_ДублиВВР
		               |		ПО ВТ_ВР.Номенклатура = Вт_ДублиВВР.Номенклатура
		               |			И ВТ_ВР.ВидРемонта = Вт_ДублиВВР.ВидРемонта
		               |			И ВТ_ВР.Характеристика = Вт_ДублиВВР.Характеристика
		               |			И (ВТ_ВР.ИзТипового)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ВТ_Запчасти.Номенклатура, ВТ_ВР.Номенклатура) КАК Номенклатура,
		               |	ЕСТЬNULL(ВТ_Запчасти.Качество, &ПустоеКачество) КАК Качество,
		               |	ЕСТЬNULL(ВТ_Запчасти.Характеристика, ВТ_ВР.Характеристика) КАК Характеристика,
		               |	МАКСИМУМ(ЕСТЬNULL(ВТ_Запчасти.Количество, ВТ_ВР.Количество)) КАК Количество,
		               |	ЕСТЬNULL(ВТ_Запчасти.ТиповойОР, &ПустойТОР) КАК ТиповойОР,
		               |	ЕСТЬNULL(ВТ_Запчасти.ИзТипового, ЛОЖЬ) КАК ИзТипового,
		               |	ЕСТЬNULL(ВТ_Запчасти.Удален, ЛОЖЬ) КАК Удален,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ЕСТЬNULL(ВТ_ВР.Удален, ИСТИНА)
		               |				ТОГДА 0
		               |			ИНАЧЕ ВТ_ВР.Количество
		               |		КОНЕЦ) КАК КоличествоДляПроверки
		               |ИЗ
		               |	ВТ_Запчасти_Промежуточная КАК ВТ_Запчасти
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВР_Финальная КАК ВТ_ВР
		               |		ПО ВТ_Запчасти.Номенклатура = ВТ_ВР.Номенклатура
		               |			И ВТ_Запчасти.Характеристика = ВТ_ВР.Характеристика
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЕСТЬNULL(ВТ_Запчасти.Удален, ЛОЖЬ),
		               |	ЕСТЬNULL(ВТ_Запчасти.ТиповойОР, &ПустойТОР),
		               |	ЕСТЬNULL(ВТ_Запчасти.Номенклатура, ВТ_ВР.Номенклатура),
		               |	ЕСТЬNULL(ВТ_Запчасти.ИзТипового, ЛОЖЬ),
		               |	ЕСТЬNULL(ВТ_Запчасти.Характеристика, ВТ_ВР.Характеристика),
		               |	ЕСТЬNULL(ВТ_Запчасти.Качество, &ПустоеКачество)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ВР_Финальная.Номенклатура КАК Номенклатура,
		               |	ВТ_ВР_Финальная.ВидРемонта КАК ВидРемонта,
		               |	ВТ_ВР_Финальная.Характеристика КАК Характеристика,
		               |	ВТ_ВР_Финальная.Количество КАК Количество,
		               |	ВТ_ВР_Финальная.ТиповойОР КАК ТиповойОР,
		               |	ВТ_ВР_Финальная.ИзТипового КАК ИзТипового,
		               |	ВТ_ВР_Финальная.Удален КАК Удален
		               |ИЗ
		               |	ВТ_ВР_Финальная КАК ВТ_ВР_Финальная";
					   
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
					   
		Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТиповойОР", ?(ЗначениеЗаполнено(Объект.ТиповойОР), Объект.ТиповойОР, Неопределено));
		Запрос.УстановитьПараметр("Запчасти_ОР", ТабЗапчастейОбъектовРемонта.Выгрузить());
		Запрос.УстановитьПараметр("ВР_ОР", ТабЗатратПоВидамРемонта.Выгрузить());
		Запрос.УстановитьПараметр("ПустоеКачество", Перечисления.ГрадацииКачества.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойТОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());
		
		Результат = Запрос.ВыполнитьПакет();
		Запчасти = Результат[10].Выгрузить();
		ВидРемонтов = Результат[11].Выгрузить();
		
		Попытка
			
			Если МодифицированностьЗапчастейОР Тогда
				НаборЗаписейДействующие = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
				НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
				НаборЗаписейУдаленные	= РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
				НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			КонецЕсли;
			
			масОшибок = Новый Массив;
			Для Каждого СтрокаЗапчастей Из Запчасти Цикл
				
				Если СтрокаЗапчастей.Количество < СтрокаЗапчастей.КоличествоДляПроверки И НЕ СтрокаЗапчастей.Удален Тогда
					ШаблонОшибки = НСтр("ru = 'Количество нормативных затрат по номенклатуре ""%1"" превышает количество номенклатуры. Запись была отменена!'");
					масОшибок.Добавить(СтрШаблон(ШаблонОшибки, СтрокаЗапчастей.Номенклатура));
				КонецЕсли;
				
				Если МодифицированностьЗапчастейОР Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаЗапчастей.ТиповойОР) Тогда
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;
						НС.Приоритет = Истина;
						
					ИначеЕсли СтрокаЗапчастей.Удален Тогда
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;
						НС.Приоритет = Ложь;
						
						НС = НаборЗаписейУдаленные.Добавить();
						ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей, "ТиповойОР, Номенклатура, Характеристика");
						НС.ОбъектРемонта = ТекОбъект;
						
					Иначе	
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;
						НС.Приоритет = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ТиповойОР",
							СтрокаЗапчастей.Номенклатура, СтрокаЗапчастей.Характеристика, Справочники.торо_ТиповыеОР.ПустаяСсылка())).Количество() = 0;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ТекОшибка из масОшибок цикл
				ОбщегоНазначения.СообщитьПользователю(ТекОшибка,,,,Отказ);
			КонецЦикла;
			
			Если Отказ Тогда 
				Возврат; 
			КонецЕсли;
			
			Если МодифицированностьЗапчастейОР Тогда
				НаборЗаписейДействующие.Записать();
				НаборЗаписейУдаленные.Записать();
			КонецЕсли;
			
			МодифицированностьЗапчастейОР = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать запчасти: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьНормативныхЗатратПоЗапчастям Тогда		
		
		Попытка
			
			НаборЗаписейДействующие = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
			НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписейУдаленные	= РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			
			Для Каждого СтрокаЗапчастей Из ВидРемонтов Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаЗапчастей.ТиповойОР) Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Истина;
					
				ИначеЕсли СтрокаЗапчастей.Удален Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Ложь;
					
					НС = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаЗапчастей, "ТиповойОР, Номенклатура, ВидРемонта, Характеристика");
					НС.ОбъектРемонта = ТекОбъект;
					
				Иначе	
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					
					СтруктураПараметр = Новый Структура("Номенклатура, ВидРемонта, Характеристика");
					ЗаполнитьЗначенияСвойств(СтруктураПараметр, СтрокаЗапчастей);
					СтруктураПараметр.Вставить("ТиповойОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());					
					
					НС.Приоритет = ТабЗатратПоВидамРемонта.НайтиСтроки(СтруктураПараметр).Количество() = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписейДействующие.Записать();
			НаборЗаписейУдаленные.Записать();
			
			МодифицированностьНормативныхЗатратПоЗапчастям = Ложь;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать запчасти: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьОтборДляТЧТабЗатратПоВидамРемонта(ТекущаяНоменклатура, ТекущаяХарактеристика, ТекущийТиповойОР)
	
	Если Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка = Истина Тогда
		Струк = Новый Структура("Номенклатура, Характеристика, ТиповойОР", ТекущаяНоменклатура, ТекущаяХарактеристика, ТекущийТиповойОР);
	Иначе
		Струк = Новый Структура("Номенклатура, Характеристика, Удален, ТиповойОР", 
			ТекущаяНоменклатура, ТекущаяХарактеристика, Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка, ТекущийТиповойОР);
	КонецЕсли;
	СтруктураОтбора = Новый ФиксированнаяСтруктура(Струк);
	
	возврат СтруктураОтбора;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСвязанныеСтрокиПоЗапчастям(Запчасть, Характеристика)
	
	СтрокиНормативов = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового",
		Запчасть, Характеристика, Ложь));
	
	Для Каждого Стр Из СтрокиНормативов Цикл
		ТабЗатратПоВидамРемонта.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, МассивИндексов)
	
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		НайС = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового, Удален", 
			текСтрока.Номенклатура, текСтрока.Характеристика, Ложь, Ложь));
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);

		Если НайС.Количество() = 0 Тогда
			нс = ТабЗапчастейОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс.Количество = текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			нс.ОбъектРемонта = Параметры.Ключ;
			МассивИндексов.Добавить(ТабЗапчастейОбъектовРемонта.Индекс(нс));
		Иначе
			выбСтрока = НайС[0];
			выбСтрока.Количество = выбСтрока.Количество + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			МассивИндексов.Добавить(ТабЗапчастейОбъектовРемонта.Индекс(выбСтрока));
		КонецЕсли;
					
	КонецЦикла;
	
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОценкаРискМенеджмента

&НаКлиенте
Процедура ЗаполнитьОценкиРМ()
	
	Если НЕ ТаблицаОценокРММодифицированность Тогда
		МассивВозврата = ПрочитатьОценкиРМ(Объект.Ссылка, Объект.ТиповойОР);
		
		РСНЗТаблицаОценокРМ.Очистить();
		
		Для каждого Элем Из МассивВозврата Цикл
			НС = РСНЗТаблицаОценокРМ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
		ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбИзмененииРМ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия <> Неопределено Тогда
		РезультатТаблица = Новый ТаблицаЗначений;
		РезультатТаблица.Колонки.Добавить("НомерСтроки");
		РезультатТаблица.Колонки.Добавить("Период");
		РезультатТаблица.Колонки.Добавить("ВидРемонта");
		РезультатТаблица.Колонки.Добавить("Сезон");
		РезультатТаблица.Колонки.Добавить("ВероятностьВыходаИзСтроя");
		РезультатТаблица.Колонки.Добавить("Ущерб");
		Для каждого Элемент Из РезультатЗакрытия Цикл
			НовСтрока = РезультатТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
		КонецЦикла; 
		Для каждого Строка Из ТаблицаОценокРМ Цикл
			НайденныеСтроки = РезультатТаблица.НайтиСтроки(Новый Структура("НомерСтроки", ТаблицаОценокРМ.Индекс(Строка)+1));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
		Для каждого Строка Из РСНЗТаблицаОценокРМ Цикл
			НайденныеСтроки = РезультатТаблица.НайтиСтроки(Новый Структура("НомерСтроки", РСНЗТаблицаОценокРМ.Индекс(Строка)+1));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;		
		ТаблицаОценокРММодифицированность = Истина;
		Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьОценкиРМ(ОтображатьИсторию = Истина)
	
	Если ОтображатьИсторию Тогда
		ТаблицаОценокРМ.Загрузить(РСНЗТаблицаОценокРМ.Выгрузить());
	Иначе
		
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(Объект.Ссылка);
		СписокОтбора.Добавить(Объект.ТиповойОР);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_РМРемонтов.ВидРемонта КАК ВидРемонта,
		               |	торо_РМРемонтов.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
		               |	торо_РМРемонтов.Период КАК Период,
		               |	торо_РМРемонтов.Сезон КАК Сезон,
		               |	торо_РМРемонтов.ВероятностьВыходаИзСтроя КАК ВероятностьВыходаИзСтроя,
		               |	торо_РМРемонтов.Ущерб КАК Ущерб
		               |ПОМЕСТИТЬ РСНаборЗаписей
		               |ИЗ
		               |	&РСНаборЗаписей КАК торо_РМРемонтов
		               |ГДЕ
		               |	торо_РМРемонтов.Период <= &КонецПериода
		               |	И торо_РМРемонтов.Период >= &НачалоПериода
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_РМРемонтов.ВидРемонта КАК ВидРемонта,
		               |	торо_РМРемонтов.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
		               |	МАКСИМУМ(торо_РМРемонтов.Период) КАК Период,
		               |	торо_РМРемонтов.Сезон КАК Сезон
		               |ПОМЕСТИТЬ ДатыСреза
		               |ИЗ
		               |	РСНаборЗаписей КАК торо_РМРемонтов
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	торо_РМРемонтов.ГруппаОбъектовРемонтов,
		               |	торо_РМРемонтов.ВидРемонта,
		               |	торо_РМРемонтов.Сезон
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РСНаборЗаписей.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
		               |	РСНаборЗаписей.ВидРемонта КАК ВидРемонта,
		               |	РСНаборЗаписей.Сезон КАК Сезон,
		               |	РСНаборЗаписей.Период КАК Период,
		               |	РСНаборЗаписей.ВероятностьВыходаИзСтроя КАК ВероятностьВыходаИзСтроя,
		               |	РСНаборЗаписей.Ущерб КАК Ущерб,
		               |	ВЫБОР
		               |		КОГДА РСНаборЗаписей.ГруппаОбъектовРемонтов ССЫЛКА Справочник.торо_ТиповыеОР
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК ТиповойОР
		               |ИЗ
		               |	ДатыСреза КАК ДатыСреза
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РСНаборЗаписей КАК РСНаборЗаписей
		               |		ПО ДатыСреза.ГруппаОбъектовРемонтов = РСНаборЗаписей.ГруппаОбъектовРемонтов
		               |			И ДатыСреза.ВидРемонта = РСНаборЗаписей.ВидРемонта
		               |			И ДатыСреза.Сезон = РСНаборЗаписей.Сезон
		               |			И ДатыСреза.Период = РСНаборЗаписей.Период
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период";
		
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущаяДата()));
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ТекущаяДата()));
		Запрос.УстановитьПараметр("РСНаборЗаписей", РСНЗТаблицаОценокРМ.Выгрузить());
		
		Результат = Запрос.Выполнить();
		ТаблицаОценокРМ.Загрузить(Результат.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьОценкиРМ(ОР, ТиповойОР)
	
	Запрос = Новый Запрос;		   
				   
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_РМРемонтов.ВидРемонта КАК ВидРемонта,
	               |	торо_РМРемонтов.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
	               |	торо_РМРемонтов.Период КАК Период,
	               |	торо_РМРемонтов.Сезон КАК Сезон,
	               |	торо_РМРемонтов.ВероятностьВыходаИзСтроя КАК ВероятностьВыходаИзСтроя,
	               |	торо_РМРемонтов.Ущерб КАК Ущерб,
	               |	ВЫБОР
	               |		КОГДА торо_РМРемонтов.ГруппаОбъектовРемонтов ССЫЛКА Справочник.торо_ТиповыеОР
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТиповойОР
	               |ПОМЕСТИТЬ БезСортировки
	               |ИЗ
	               |	РегистрСведений.торо_РМРемонтов КАК торо_РМРемонтов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	               |		ПО торо_РМРемонтов.ГруппаОбъектовРемонтов = торо_ТиповыеОРНормативныеРемонты.Ссылка
	               |			И торо_РМРемонтов.ВидРемонта = торо_ТиповыеОРНормативныеРемонты.ВидРемонта
	               |ГДЕ
	               |	(торо_РМРемонтов.ГруппаОбъектовРемонтов = &ТиповойОР
	               |			ИЛИ торо_РМРемонтов.ГруппаОбъектовРемонтов = &ОР)
	               |	И ВЫБОР
	               |			КОГДА &ТиповойОР <> ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	               |				ТОГДА торо_ТиповыеОРНормативныеРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ТиповойОР <> ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	               |				ТОГДА торо_ТиповыеОРНормативныеРемонты.Ссылка = &ТиповойОР
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	торо_РМРемонтов.ВидРемонта,
	               |	торо_РМРемонтов.ГруппаОбъектовРемонтов,
	               |	торо_РМРемонтов.Период,
	               |	торо_РМРемонтов.Сезон,
	               |	торо_РМРемонтов.ВероятностьВыходаИзСтроя,
	               |	торо_РМРемонтов.Ущерб,
	               |	ЛОЖЬ
	               |ИЗ
	               |	РегистрСведений.торо_РМРемонтов КАК торо_РМРемонтов
	               |ГДЕ
	               |	торо_РМРемонтов.ГруппаОбъектовРемонтов = &ОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БезСортировки.ВидРемонта КАК ВидРемонта,
	               |	БезСортировки.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
	               |	БезСортировки.Период КАК Период,
	               |	БезСортировки.Сезон КАК Сезон,
	               |	БезСортировки.ВероятностьВыходаИзСтроя КАК ВероятностьВыходаИзСтроя,
	               |	БезСортировки.Ущерб КАК Ущерб,
	               |	БезСортировки.ТиповойОР КАК ТиповойОР
	               |ИЗ
	               |	БезСортировки КАК БезСортировки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Запрос.УстановитьПараметр("ОР", ОР);
	Запрос.УстановитьПараметр("ТиповойОР", ТиповойОР);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСтруктур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтруктураРМ = Новый Структура("ВидРемонта, ГруппаОбъектовРемонтов, Период, Сезон, ВероятностьВыходаИзСтроя, Ущерб, ТиповойОР");
		ЗаполнитьЗначенияСвойств(СтруктураРМ, Выборка);
		МассивСтруктур.Добавить(СтруктураРМ);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервере
Процедура ЗаписатьОценкиРМ(ТекОбъект, Отказ)
	
	Если ТаблицаОценокРММодифицированность Тогда
		
		Для каждого Строка из РСНЗТаблицаОценокРМ Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ГруппаОбъектовРемонтов) Тогда
				Строка.ГруппаОбъектовРемонтов = ТекОбъект;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			ТаблицаЗначенийОценокРМ = РСНЗТаблицаОценокРМ.Выгрузить();
			МассивСтрокОценокРМ = ТаблицаЗначенийОценокРМ.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекОбъект));
			ТаблицаБуфер = ТаблицаЗначенийОценокРМ.Скопировать(МассивСтрокОценокРМ);
			
			НаборНормативов = РегистрыСведений.торо_РМРемонтов.СоздатьНаборЗаписей();
			НаборНормативов.Отбор.ГруппаОбъектовРемонтов.Установить(ТекОбъект);
			НаборНормативов.Загрузить(ТаблицаБуфер);
			НаборНормативов.Записать();
			
			ТаблицаОценокРММодифицированность = Ложь;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать нормативы ремонтных работ: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КоэффициентыРемонтныхОсобенностей

&НаСервере
Процедура ОбновитьКоэффициентыРемонтныхОсобенностей()
	
	Перем МассивКоэффициентов;
	
	РассчитываемыеКоэффициенты.Очистить();
	УстанавливаемыеКоэффициенты.Очистить();
	
	МассивКоэффициентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента КАК Ссылка,
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ЗначениеКоэффициента КАК ЗначениеКоэффициента,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.Рассчитываемый КАК Рассчитываемый,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ЗависитОтНаработки КАК ЗависитОтНаработки,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.СчитатьВозрастОтДатыИзготовления КАК СчитатьВозрастОтДатыИзготовления,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьГрафикРаботыОборудования КАК УчитыватьГрафикРаботыОборудования,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьПростоиОборудования КАК УчитыватьПростоиОборудования,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ПараметрНаработки КАК ПараметрНаработки
	|ИЗ
	|	РегистрСведений.торо_ЗначенияКоэффициентовРемонтныхОсобенностей.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ВидыКоэффициентовРемонтныхОсобенностей КАК торо_ВидыКоэффициентовРемонтныхОсобенностей
	|		ПО торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента = торо_ВидыКоэффициентовРемонтныхОсобенностей.Ссылка
	|ГДЕ
	|	НЕ торо_ВидыКоэффициентовРемонтныхОсобенностей.ПометкаУдаления
	|	И торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.Использование";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Рассчитываемый Тогда
			Если Выборка.ЗависитОтНаработки Тогда
				
				НаработкаОР = торо_РаботаСНаработкой.ЗначениеНаработкиНаДатуСУчетомПлана(Объект.Ссылка, Выборка.ПараметрНаработки, Выборка.УчитыватьПростоиОборудования);
				Если НЕ НаработкаОР = Неопределено Тогда
					СтруктураКоэффициент = торо_РаботаСНормативамиСервер.ПолучитьРассчитываемыйКоэффициентРемонтныхОсобенностей(НаработкаОР, Выборка.Ссылка);
					Если НЕ СтруктураКоэффициент = Неопределено Тогда
						
						НС = РассчитываемыеКоэффициенты.Добавить();
						НС.ВидКоэффициента = Выборка.Ссылка;
						НС.ЗначениеКоэффициента = СтруктураКоэффициент.ЗначениеКоэффициента;
						НС.Коэффициент = СтруктураКоэффициент.Коэффициент;
						
						МассивКоэффициентов.Добавить(СтруктураКоэффициент.Коэффициент);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Если Выборка.УчитыватьГрафикРаботыОборудования Тогда
					ВозрастОР = торо_РаботаСНормативамиСервер.ВычислитьВремяРаботыОборудованияСУчетомГрафика(Объект.Ссылка, Выборка.СчитатьВозрастОтДатыИзготовления);	
				Иначе
					Если Выборка.СчитатьВозрастОтДатыИзготовления Тогда
						ВозрастОР = Год(ТекущаяДата()) - Год(Объект.ДатаВыпуска) + 1;
					Иначе
						ВозрастОР = Год(ТекущаяДата()) - Год(Объект.ДатаВводаВЭксплуатацию) + 1;
					КонецЕсли;
				КонецЕсли;
				
				СтруктураКоэффициент = торо_РаботаСНормативамиСервер.ПолучитьРассчитываемыйКоэффициентРемонтныхОсобенностей(ВозрастОР, Выборка.Ссылка);
				Если НЕ СтруктураКоэффициент = Неопределено Тогда
					
					НС = РассчитываемыеКоэффициенты.Добавить();
					НС.ВидКоэффициента = Выборка.Ссылка;
					НС.ЗначениеКоэффициента = СтруктураКоэффициент.ЗначениеКоэффициента;
					НС.Коэффициент = СтруктураКоэффициент.Коэффициент;
					
					МассивКоэффициентов.Добавить(СтруктураКоэффициент.Коэффициент);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			НС = УстанавливаемыеКоэффициенты.Добавить();
			НС.ВидКоэффициента = Выборка.Ссылка;
			НС.ЗначениеКоэффициента = Выборка.ЗначениеКоэффициента;
			НС.Коэффициент = Выборка.ЗначениеКоэффициента.Коэффициент;
			
			МассивКоэффициентов.Добавить(НС.Коэффициент);
		КонецЕсли;
	КонецЦикла;
	
	ИтогКоэф = 1;
	
	Для каждого Элем Из МассивКоэффициентов Цикл
		ИтогКоэф = ИтогКоэф * Элем;
	КонецЦикла; 
	
	Если НЕ МассивКоэффициентов.Количество() = 0 Тогда
		ИтоговыйКоэффициент = ИтогКоэф;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОсновноеИЗависимоеОборудование

&НаКлиенте
Процедура ИнициализироватьОсновноеЗависимоеОборудование()
	
	ВкладкаОсновноеЗависимоеОткрывалась = Истина;
	
	Если НормативныеРемонты.Количество() = 0 Тогда 
		ЗаполнитьНормативныеРемонты();
	КонецЕсли;
	
	ЗаполнитьОсновныеИЗависимыеРемонты();
	
	ВыбраноОсновное = ОсновноеОборудование.ПолучитьЭлементы().Количество() <> 0 Или ЗависимоеОборудование.ПолучитьЭлементы().Количество() = 0; 
	ВыборОсновногоЗависимого = ?(ВыбраноОсновное, "Основное", "Зависимое");
	
	УстановитьВидимостьЭлементовФормыОсновноеЗависимое();
	ЗаполнитьОсновныеИЗависимыеРемонтыНаФорме();
	УстановитьКоличествоОсновногоЗависимогоОборудования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновныеИЗависимыеРемонты()
	
	ОсновноеОборудование.ПолучитьЭлементы().Очистить();
	ЗависимоеОборудование.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_РемонтыОсновногоЗависимогоОборудования.ОсновнойОбъектРемонта КАК ОбъектРемонта,
	|	торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаЗависимогоОбъекта КАК ВидРемонтаЭтогоОбъекта,
	|	торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаОсновногоОбъекта КАК ВидРемонтаСвязанногоОбъекта
	|ИЗ
	|	РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
	|ГДЕ
	|	торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта = &ОбъектРемонта
	|ИТОГИ ПО
	|	ОбъектРемонта,
	|	ВидРемонтаЭтогоОбъекта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);

	ВыборкаПоОР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОбъектРемонта");
	Пока ВыборкаПоОР.Следующий() Цикл
		СтрокаОР = ОсновноеОборудование.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОР, ВыборкаПоОР);
		
		ВыборкаПоВР = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоВР.Следующий() Цикл
			СтрокаВР = СтрокаОР.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВР, ВыборкаПоВР);
			
			ВыборкаДеталей = ВыборкаПоВР.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ВыборкаДеталей.Следующий() Цикл
				СтрокаДеталей = СтрокаВР.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДеталей, ВыборкаДеталей);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта КАК ОбъектРемонта,
	|	торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаОсновногоОбъекта КАК ВидРемонтаЭтогоОбъекта,
	|	торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаЗависимогоОбъекта КАК ВидРемонтаСвязанногоОбъекта
	|ИЗ
	|	РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
	|ГДЕ
	|	торо_РемонтыОсновногоЗависимогоОборудования.ОсновнойОбъектРемонта = &ОбъектРемонта
	|ИТОГИ ПО
	|	ОбъектРемонта,
	|	ВидРемонтаЭтогоОбъекта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);

	ВыборкаПоОР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОбъектРемонта");
	Пока ВыборкаПоОР.Следующий() Цикл
		СтрокаОР = ЗависимоеОборудование.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОР, ВыборкаПоОР);
		
		ВыборкаПоВР = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоВР.Следующий() Цикл
			СтрокаВР = СтрокаОР.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВР, ВыборкаПоВР);
			
			ВыборкаДеталей = ВыборкаПоВР.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ВыборкаДеталей.Следующий() Цикл
				СтрокаДеталей = СтрокаВР.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДеталей, ВыборкаДеталей);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте  
Процедура УстановитьВидимостьЭлементовФормыОсновноеЗависимое()
	
	Если ВыбраноОсновное Тогда
		ЗаголовокТЧ = НСтр("ru='Виды ремонта основного объекта'");
		ЗаголовокКолонки = НСтр("ru='Вид ремонта основного объекта'");
	Иначе
		ЗаголовокТЧ = НСтр("ru='Виды ремонта зависимого объекта'");
		ЗаголовокКолонки = НСтр("ru='Вид ремонта зависимого объекта'");
	КонецЕсли; 
	
	Элементы.ВидыРемонтаОсновногоСвязанного.Заголовок = ЗаголовокТЧ;
	Элементы.ВидыРемонтаОсновногоСвязанногоВидРемонтаСвязанногоОбъекта.Заголовок = ЗаголовокКолонки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновныеИЗависимыеРемонтыНаФорме()
	
	СписокОбъектовРемонта.Очистить();
	ВидыРемонтаЭтогоОбъекта.Очистить();
	ВидыРемонтаОсновногоСвязанного.Очистить();
	
	ДеревоДляОбхода = ?(ВыбраноОсновное, ОсновноеОборудование, ЗависимоеОборудование);
	
	Для каждого СтрокаОР из ДеревоДляОбхода.ПолучитьЭлементы() Цикл
		Строка = СписокОбъектовРемонта.Добавить();
		Строка.ОбъектРемонта = СтрокаОР.ОбъектРемонта;
		
		Для каждого СтрокаВР из СтрокаОР.ПолучитьЭлементы() Цикл
			Строка = ВидыРемонтаЭтогоОбъекта.Добавить();
			Строка.ВидРемонта = СтрокаВР.ВидРемонтаЭтогоОбъекта;
			Строка.ОбъектРемонта = СтрокаВР.ОбъектРемонта;
			
			Для каждого СтрокаДеталей из СтрокаВР.ПолучитьЭлементы() Цикл
				Строка = ВидыРемонтаОсновногоСвязанного.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, СтрокаДеталей);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОсновногоЗависимогоОборудования()
	
	Основное = Элементы.ВыборОсновногоЗависимого.СписокВыбора.НайтиПоЗначению("Основное");
	Зависимое = Элементы.ВыборОсновногоЗависимого.СписокВыбора.НайтиПоЗначению("Зависимое");
	
	Если ВыбраноОсновное Тогда
		Основное.Представление = "Основное оборудование (" + СписокОбъектовРемонта.Количество()+ ")";
		Зависимое.Представление = "Зависимое оборудование (" + ЗависимоеОборудование.ПолучитьЭлементы().Количество()+ ")";
	Иначе
		Зависимое.Представление = "Зависимое оборудование (" + СписокОбъектовРемонта.Количество()+ ")";
		Основное.Представление = "Основное оборудование (" + ОсновноеОборудование.ПолучитьЭлементы().Количество()+ ")";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьДанныеИзЭлементовФормы(Форма)
		
	Если Форма.ВыбраноОсновное Тогда
		ДеревоДляРаботы = Форма.ОсновноеОборудование;
		ВтороеДерево = Форма.ЗависимоеОборудование;
	Иначе
		ДеревоДляРаботы = Форма.ЗависимоеОборудование;
		ВтороеДерево = Форма.ОсновноеОборудование;
	КонецЕсли; 
	
	ДеревоДляРаботы.ПолучитьЭлементы().Очистить();
	
	Для каждого ВыборкаОР из Форма.СписокОбъектовРемонта Цикл
		СтрокаОР = ДеревоДляРаботы.ПолучитьЭлементы().Добавить();
		СтрокаОР.ОбъектРемонта = ВыборкаОР.ОбъектРемонта;
		
		СтрокиВидовРемонта = Форма.ВидыРемонтаЭтогоОбъекта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыборкаОР.ОбъектРемонта));
		Если СтрокиВидовРемонта.Количество() = 0 Тогда
			// Если ОбъектРемонта есть, а видов ремонта нет, то считаем, что соответствие настройка для любых видов ремонта.
			СтрокаВР = СтрокаОР.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВР, СтрокаОР);
			
			СтрокаДеталей = СтрокаВР.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДеталей, СтрокаВР);
			
			НовСтр = Форма.ВидыРемонтаЭтогоОбъекта.Добавить();
			НовСтр.ОбъектРемонта = ВыборкаОР.ОбъектРемонта;
			
			НовСтр = Форма.ВидыРемонтаОсновногоСвязанного.Добавить();
			НовСтр.ОбъектРемонта = ВыборкаОР.ОбъектРемонта;
		Иначе
		
			Для каждого ВыборкаВР из СтрокиВидовРемонта Цикл
				СтрокаВР = СтрокаОР.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВР, СтрокаОР);
				СтрокаВР.ВидРемонтаЭтогоОбъекта = ВыборкаВР.ВидРемонта;
				
				СтрокиДеталей = Форма.ВидыРемонтаОсновногоСвязанного.НайтиСтроки(Новый Структура("ОбъектРемонта, ВидРемонтаЭтогоОбъекта",ВыборкаВР.ОбъектРемонта, ВыборкаВР.ВидРемонта));
				Если СтрокиДеталей.Количество() = 0 Тогда
					СтрокаДеталей = СтрокаВР.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДеталей, СтрокаВР);
					
					НовСтр = Форма.ВидыРемонтаОсновногоСвязанного.Добавить();
					НовСтр.ОбъектРемонта = ВыборкаВР.ОбъектРемонта;
					НовСтр.ВидРемонтаЭтогоОбъекта = ВыборкаВР.ВидРемонта;
				Иначе
					Для каждого ВыборкаДеталей из СтрокиДеталей Цикл
						СтрокаДеталей = СтрокаВР.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДеталей, СтрокаВР);
						СтрокаДеталей.ВидРемонтаСвязанногоОбъекта = ВыборкаДеталей.ВидРемонтаСвязанногоОбъекта;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Если мы добавили в одну из таблиц оборудования самого себя, 
		// то надо добавить себя также и во вторую таблицу, иначе при записи данные потеряются.
		// Только виды ремонта следует поменять местами.
		Если ВыборкаОР.ОбъектРемонта = Форма.Объект.Ссылка Тогда
			СтрокаОрДругая = Неопределено;
			Для каждого Строка из ВтороеДерево.ПолучитьЭлементы() Цикл
				Если Строка.ОбъектРемонта = ВыборкаОР.ОбъектРемонта Тогда
					СтрокаОрДругая = Строка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаОрДругая = Неопределено Тогда
				СтрокаОрДругая = ВтороеДерево.ПолучитьЭлементы().Добавить();
				СтрокаОрДругая.ОбъектРемонта = ВыборкаОР.ОбъектРемонта;
			КонецЕсли;
			
			СтрокаОрДругая.ПолучитьЭлементы().Очистить();
			
			СтрокиВР = Форма.ВидыРемонтаОсновногоСвязанного.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыборкаОР.ОбъектРемонта));
			СоответсивиеВР = Новый Соответствие;
			Для каждого СтрокаВР из СтрокиВР Цикл
				ЗначениеСоответствия = СоответсивиеВР[СтрокаВР.ВидРемонтаСвязанногоОбъекта];
				Если ЗначениеСоответствия = Неопределено Тогда
					ЗначениеСоответствия = Новый Массив;
				КонецЕсли;
				
				ЗначениеСоответствия.Добавить(СтрокаВР.ВидРемонтаЭтогоОбъекта);
				
				СоответсивиеВР.Вставить(СтрокаВР.ВидРемонтаСвязанногоОбъекта, ЗначениеСоответствия);
			КонецЦикла;
			
			Для каждого КлючИЗначение из СоответсивиеВР Цикл
				СтрокаВР = СтрокаОрДругая.ПолучитьЭлементы().Добавить();
				СтрокаВР.ОбъектРемонта = ВыборкаОР.ОбъектРемонта;
				СтрокаВР.ВидРемонтаЭтогоОбъекта = КлючИЗначение.Ключ;
				
				Для каждого ВидРемонта из КлючИЗначение.Значение Цикл
					СтрокаДеталей = СтрокаВР.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДеталей, СтрокаВР);
					СтрокаДеталей.ВидРемонтаСвязанногоОбъекта = ВидРемонта;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновныеИЗависимыеПоИерархииВыбранаИерархия(ВыбраннаяИерархия, ДополнтельныеПараметры) Экспорт
	
	Если ВыбраннаяИерархия <> Неопределено Тогда
		ЗаполнитьОсновныеИЗависимыеПоИерархииНаСервере(ВыбраннаяИерархия);
		УстановитьКоличествоОсновногоЗависимогоОборудования();
		МодифицированностьОсновныхЗависимых = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновныеИЗависимыеПоИерархииНаСервере(СтруктураОР)
	
	Запрос = Новый Запрос;
	
	Если СтруктураОР.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасположениеОРВСтруктуреИерархии.%НужноеПоле% КАК Значение
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Дата, СтруктураИерархии = &Иерархия) КАК РасположениеОРВСтруктуреИерархии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО РасположениеОРВСтруктуреИерархии.%НужноеПоле% = торо_ОбъектыРемонта.Ссылка
		|			И НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|ГДЕ
		|	НЕ РасположениеОРВСтруктуреИерархии.Удален
		|	И РасположениеОРВСтруктуреИерархии.%ОтборПоСсылке% = &Ссылка";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Иерархия", СтруктураОР);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.%НужноеПоле% КАК Значение
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_ИерархическиеСтруктурыОР.%НужноеПоле% = торо_ОбъектыРемонта.Ссылка
		|			И НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &Иерархия
		|	И торо_ИерархическиеСтруктурыОР.%ОтборПоСсылке% = &Ссылка";
		
		Запрос.УстановитьПараметр("Иерархия", СтруктураОР);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСсылке%", ?(ВыбраноОсновное, "ОбъектИерархии", "РодительИерархии"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НужноеПоле%", ?(НЕ ВыбраноОсновное, "ОбъектИерархии", "РодительИерархии"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СписокОбъектовРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Выборка.Значение)).Количество() = 0 Тогда
			СтрокаОР = СписокОбъектовРемонта.Добавить();
			СтрокаОР.ОбъектРемонта = Выборка.Значение;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ОбъектРемонта", Выборка.Значение);
		НайденныеСтроки = ВидыРемонтаЭтогоОбъекта.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаВР = ВидыРемонтаЭтогоОбъекта.Добавить();
			СтрокаВР.ОбъектРемонта = Выборка.Значение;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ОбъектРемонта", Выборка.Значение);
		НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НС = ВидыРемонтаОсновногоСвязанного.Добавить();
			НС.ОбъектРемонта = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновноеЗависимоеОборудование(ТекОбъект, Отказ)
	
	Если МодифицированностьОсновныхЗависимых Тогда
		
		СохранитьДанныеИзЭлементовФормы(ЭтаФорма);
		
		ПроверитьЗацикливаниеОсновногоЗависимогоОборудованияНаСервере(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		НаборЗаписейОсновного = РегистрыСведений.торо_РемонтыОсновногоЗависимогоОборудования.СоздатьНаборЗаписей();
		НаборЗаписейОсновного.Отбор.СвязанныйОбъектРемонта.Установить(Объект.Ссылка);
		
		Для каждого СтрокаОР Из ОсновноеОборудование.ПолучитьЭлементы() Цикл
			Для каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
				Для каждого СтрокаДеталей из СтрокаВР.ПолучитьЭлементы() Цикл
					МенеджерЗаписи = НаборЗаписейОсновного.Добавить();
					
					МенеджерЗаписи.ОсновнойОбъектРемонта       = СтрокаДеталей.ОбъектРемонта;
					МенеджерЗаписи.СвязанныйОбъектРемонта      = Объект.Ссылка;
					МенеджерЗаписи.ВидРемонтаОсновногоОбъекта  = СтрокаДеталей.ВидРемонтаСвязанногоОбъекта;
					МенеджерЗаписи.ВидРемонтаЗависимогоОбъекта = СтрокаДеталей.ВидРемонтаЭтогоОбъекта;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			НаборЗаписейОсновного.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
				Метаданные.Справочники.торо_ОбъектыРемонта,,ОписаниеОшибки());
		КонецПопытки; 
		
		НаборЗаписейЗависимого = РегистрыСведений.торо_РемонтыОсновногоЗависимогоОборудования.СоздатьНаборЗаписей();
		НаборЗаписейЗависимого.Отбор.ОсновнойОбъектРемонта.Установить(Объект.Ссылка);
		
		Для каждого СтрокаОР Из ЗависимоеОборудование.ПолучитьЭлементы() Цикл
			Для каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
				Для каждого СтрокаДеталей из СтрокаВР.ПолучитьЭлементы() Цикл
					МенеджерЗаписи = НаборЗаписейЗависимого.Добавить();
					
					МенеджерЗаписи.ОсновнойОбъектРемонта       = Объект.Ссылка;
					МенеджерЗаписи.СвязанныйОбъектРемонта      = СтрокаДеталей.ОбъектРемонта;
					МенеджерЗаписи.ВидРемонтаОсновногоОбъекта  = СтрокаДеталей.ВидРемонтаЭтогоОбъекта;
					МенеджерЗаписи.ВидРемонтаЗависимогоОбъекта = СтрокаДеталей.ВидРемонтаСвязанногоОбъекта;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			НаборЗаписейЗависимого.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение'"), УровеньЖурналаРегистрации.Предупреждение, 
				Метаданные.Справочники.торо_ОбъектыРемонта,,ОписаниеОшибки());
		КонецПопытки; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВТЧВидыРемонтаЭтогоОбъекта()
	
	ТекущиеДанные = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
	ОбъектРемонта = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ОбъектРемонта);

	СтруктураДляОтбора = Новый Структура;
	СтруктураДляОтбора.Вставить("ОбъектРемонта", ОбъектРемонта);

	Элементы.ВидыРемонтаЭтогоОбъекта.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураДляОтбора);
	
	УстановитьОтборВТЧОсновныеЗависимыеРемонты();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВТЧОсновныеЗависимыеРемонты()
	
	ТекущиеДанные = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
	ОбъектРемонта = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ОбъектРемонта);
	ВидРемонта = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ВидРемонта);
	
	СтруктураДляОтбора = Новый Структура;
	СтруктураДляОтбора.Вставить("ОбъектРемонта", ОбъектРемонта);
	СтруктураДляОтбора.Вставить("ВидРемонтаЭтогоОбъекта", ВидРемонта);
	
	Элементы.ВидыРемонтаОсновногоСвязанного.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураДляОтбора);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОсновноеЗависимоеОборудованиеПоВидуРемонта(ВидРемонта)
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ВкладкаОсновноеЗависимоеОткрывалась 
		И ОсновноеОборудование.ПолучитьЭлементы().Количество() = 0 
		И ЗависимоеОборудование.ПолучитьЭлементы().Количество() = 0 Тогда
		ИнициализироватьОсновноеЗависимоеОборудование();
	Иначе
		СохранитьДанныеИзЭлементовФормы(ЭтаФорма);
		УстановитьКоличествоОсновногоЗависимогоОборудования();
	КонецЕсли;
	
	Для каждого СтрокаОР из ОсновноеОборудование.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВР из СтрокаОР.ПолучитьЭлементы() Цикл
			Если СтрокаВР.ВидРемонтаЭтогоОбъекта = ВидРемонта Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаОР из ЗависимоеОборудование.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВР из СтрокаОР.ПолучитьЭлементы() Цикл
			Если СтрокаВР.ВидРемонтаЭтогоОбъекта = ВидРемонта Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УдалитьОсновноеЗависимоеОборудованиеПоВидуРемонта(ВидРемонта)
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОсновноеЗависимоеОборудованиеИДереваПоВидуРемонта(ОсновноеОборудование, ВидРемонта);
	УдалитьОсновноеЗависимоеОборудованиеИДереваПоВидуРемонта(ЗависимоеОборудование, ВидРемонта);

	ЗаполнитьОсновныеИЗависимыеРемонтыНаФорме();
	УстановитьКоличествоОсновногоЗависимогоОборудования();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОсновноеЗависимоеОборудованиеИДереваПоВидуРемонта(ДеревоДляРаботы, ВидРемонта)

	МассивДляУдаленияОР = Новый Массив;
	
	Для каждого СтрокаОР из ДеревоДляРаботы.ПолучитьЭлементы() Цикл
		МассивДляУдаленияВР = Новый Массив;
		Для каждого СтрокаВР из СтрокаОР.ПолучитьЭлементы() Цикл
			Если СтрокаВР.ВидРемонтаЭтогоОбъекта = ВидРемонта Тогда
				МассивДляУдаленияВР.Добавить(СтрокаВР);
				МодифицированностьОсновныхЗависимых = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивДляУдаленияВР.Количество() > 0 Тогда
			Для каждого Строка из МассивДляУдаленияВР Цикл
				СтрокаОР.ПолучитьЭлементы().Удалить(Строка);
			КонецЦикла;
			
			Если СтрокаОР.ПолучитьЭлементы().Количество() = 0 Тогда
				МассивДляУдаленияОР.Добавить(СтрокаОР);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка из МассивДляУдаленияОР Цикл
		ДеревоДляРаботы.ПолучитьЭлементы().Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаОбъектРемонтаПриИзмененииИзменитьСвязанныеТЧ(ОбъектРемонтаСтарый, ОбъектРемонтаНовый)
	
	Если ОбъектРемонтаСтарый <> ОбъектРемонтаНовый Тогда
		НайденныеСтроки = ВидыРемонтаЭтогоОбъекта.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонтаСтарый));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.ОбъектРемонта = ОбъектРемонтаНовый;
		КонецЦикла;
		
		НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонтаСтарый));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.ОбъектРемонта = ОбъектРемонтаНовый;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПриИзмененииИзменитьСвязанныеТЧ(ВидРемонтаСтарый, ВидРемонтаНовый, ОбъектРемонта)
	
	Если ВидРемонтаНовый <> ВидРемонтаСтарый Тогда
		НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(Новый Структура("ВидРемонтаЭтогоОбъекта, ОбъектРемонта", ВидРемонтаСтарый, ОбъектРемонта));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.ВидРемонтаЭтогоОбъекта = ВидРемонтаНовый;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗацикливаниеОсновногоЗависимогоОборудованияНаСервере(Отказ = Ложь)
	
	ПредставлениеПустогоВР = НСтр("ru='<любой вид ремонта>'");
	
	ТаблицаДляПроверки = ПолучитьТаблицуИзДереваДляПроверкиЗацикливания(ЗависимоеОборудование, Ложь);
	ШаблонСообщения = НСтр("ru='Обнаружено зацикливание для вида ремонта ""%1"" основного оборудования ""%2"" (вид ремонта текущего объекта ""%3"")!'");
	
	Для каждого СтрокаОР из ОсновноеОборудование.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВР из СтрокаОР.ПолучитьЭлементы() Цикл
			Для каждого СтрокаДеталей из СтрокаВР.ПолучитьЭлементы() Цикл
				ЕстьЗацикливание = ПроверитьЗацикливаниеОстановочных(СтрокаДеталей.ВидРемонтаСвязанногоОбъекта, СтрокаДеталей.ВидРемонтаЭтогоОбъекта, СтрокаДеталей.ОбъектРемонта, Истина, ТаблицаДляПроверки);
				Если ЕстьЗацикливание Тогда
					ТекстСообщения = СтрШаблон(ШаблонСообщения, 
						?(ЗначениеЗаполнено(СтрокаДеталей.ВидРемонтаСвязанногоОбъекта), СтрокаДеталей.ВидРемонтаСвязанногоОбъекта, ПредставлениеПустогоВР), 
						СтрокаДеталей.ОбъектРемонта, 
						?(ЗначениеЗаполнено(СтрокаДеталей.ВидРемонтаЭтогоОбъекта), СтрокаДеталей.ВидРемонтаЭтогоОбъекта, ПредставлениеПустогоВР));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДляПроверки = ПолучитьТаблицуИзДереваДляПроверкиЗацикливания(ОсновноеОборудование, Истина);
	ШаблонСообщения = НСтр("ru='Обнаружено зацикливание для вида ремонта ""%1"" зависимого оборудования ""%2"" (вид ремонта текущего объекта ""%3"")!'");
	
	Для каждого СтрокаОР из ЗависимоеОборудование.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВР из СтрокаОР.ПолучитьЭлементы() Цикл
			Для каждого СтрокаДеталей из СтрокаВР.ПолучитьЭлементы() Цикл
				ЕстьЗацикливание = ПроверитьЗацикливаниеОстановочных(СтрокаДеталей.ВидРемонтаСвязанногоОбъекта, СтрокаДеталей.ВидРемонтаЭтогоОбъекта, СтрокаДеталей.ОбъектРемонта, Ложь, ТаблицаДляПроверки);
				Если ЕстьЗацикливание Тогда
					ТекстСообщения = СтрШаблон(ШаблонСообщения, 
						?(ЗначениеЗаполнено(СтрокаДеталей.ВидРемонтаСвязанногоОбъекта), СтрокаДеталей.ВидРемонтаСвязанногоОбъекта, ПредставлениеПустогоВР), 
						СтрокаДеталей.ОбъектРемонта, 
						?(ЗначениеЗаполнено(СтрокаДеталей.ВидРемонтаЭтогоОбъекта), СтрокаДеталей.ВидРемонтаЭтогоОбъекта, ПредставлениеПустогоВР));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗацикливаниеОстановочных(ВыбранныйВР, ВР_ЭтогоОбъекта, ВыбранныйОР, ПроверкаДляОсновного = Истина, ТабДляПроверки = Неопределено)
	
	Если ТабДляПроверки <> Неопределено Тогда
		ТаблицаДляПроверки = ТабДляПроверки;
	Иначе
		ТаблицаДляПроверки = ?(ПроверкаДляОсновного, 
									ПолучитьТаблицуИзДереваДляПроверкиЗацикливания(ЗависимоеОборудование, Ложь), 
									ПолучитьТаблицуИзДереваДляПроверкиЗацикливания(ОсновноеОборудование, Истина));
	КонецЕсли;
	
	Возврат Справочники.торо_ОбъектыРемонта.ПроверитьЗацикливаниеЗависимыхОстановочных(ВР_ЭтогоОбъекта, ВыбранныйВР, Объект.Ссылка, ВыбранныйОР, ПроверкаДляОсновного, ТабДляПроверки);
		
КонецФункции

&НаСервере
Функция ПолучитьТаблицуИзДереваДляПроверкиЗацикливания(Дерево, ЭтоОсновное)
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаРезультат.Колонки.Добавить("ВидРемонтаОсновногоОбъекта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаРезультат.Колонки.Добавить("ВидРемонтаЗависимогоОбъекта", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	
	Для каждого СтрокаОР из Дерево.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВР из СтрокаОР.ПолучитьЭлементы() Цикл
			Для каждого СтрокаДеталей из СтрокаВР.ПолучитьЭлементы() Цикл
				НоваяСтрока = ТаблицаРезультат.Добавить();
				НоваяСтрока.ОбъектРемонта = СтрокаДеталей.ОбъектРемонта;
				НоваяСтрока.ВидРемонтаОсновногоОбъекта = ?(ЭтоОсновное, СтрокаДеталей.ВидРемонтаСвязанногоОбъекта, СтрокаДеталей.ВидРемонтаЭтогоОбъекта);
				НоваяСтрока.ВидРемонтаЗависимогоОбъекта = ?(ЭтоОсновное, СтрокаДеталей.ВидРемонтаЭтогоОбъекта, СтрокаДеталей.ВидРемонтаСвязанногоОбъекта);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаРезультат;	
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыВыбораВидаРемонтаОсновногоСвязанного()
	
	СписокОтбора = Новый Массив;
	
	ТекДанные = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтруктураВозврата = торо_РаботаСНормативамиСервер.ПолучитьТаблицуНормативныхРемонтов(ТекДанные.ОбъектРемонта);
		Для каждого СтруктураНормативногоРемонта Из СтруктураВозврата Цикл
			Если НЕ СтруктураНормативногоРемонта.Удален Тогда
				СписокОтбора.Добавить(СтруктураНормативногоРемонта.ВидРемонта);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СписокОтбора)));
	
	Элементы.ВидыРемонтаОсновногоСвязанногоВидРемонтаСвязанногоОбъекта.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Гарантии

&НаСервере
Процедура ПроверитьЗаполнениеГарантийОбъектовРемонта(Отказ)
	
	Если ГарантииОбъектаРемонта.Количество() > 0 Тогда
		СтруктураОтбора = Новый Структура("ОбъектРемонта", Объект.Ссылка);
		МассивСтрок = ГарантииОбъектаРемонта.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Строка Из МассивСтрок Цикл
			
			СтрокаСОрганизациейГарантииЗаполнена = Истина;
			СтрокаСУсловиямиГарантииЗаполнена	 = Истина;
			
			Если СтрокаСУсловиямиГарантииЗаполнена И Не ЗначениеЗаполнено(Строка.УсловияГарантии) Тогда
				ТекстСообщения = НСтр("ru = 'В таблице сроков гарантии объекта не все поля в колонке <Условия гарантии> заполнены. Запись не выполнена'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				СтрокаСУсловиямиГарантииЗаполнена = Ложь;
			КонецЕсли;
			
			Если СтрокаСОрганизациейГарантииЗаполнена И Не ЗначениеЗаполнено(Строка.ГарантирующаяОрганизация) Тогда
				ТекстСообщения = НСтр("ru = 'В таблице сроков гарантии объекта не все поля в колонке <Гарантирующая организация> заполнены. Запись не выполнена'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				СтрокаСОрганизациейГарантииЗаполнена = Ложь;
			КонецЕсли;
			
			Если Не СтрокаСОрганизациейГарантииЗаполнена 
				И НЕ СтрокаСУсловиямиГарантииЗаполнена Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли;
	
	Если МодифицированностьГарантий Тогда
		Для Каждого Строка Из ГарантииОбъектаРемонта Цикл
			Строка.ДатаНачала = Строка.УсловияГарантии.ДатаНачалаГарантии;
			Строка.ДатаОкончания = Строка.УсловияГарантии.ДатаОкончанияГарантии;
		КонецЦикла;
		
		ТЗГарантий = ГарантииОбъектаРемонта.Выгрузить();
		
		Для Каждого Строка Из ТЗГарантий Цикл
			
			СтруктураОтбора = Новый Структура("ДатаНачала, ДатаОкончания", Строка.ДатаНачала, Строка.ДатаОкончания);
			НайденныеСтроки = ТЗГарантий.НайтиСтроки(СтруктураОтбора);
			
			Если ЗначениеЗаполнено(Строка.ДатаНачала) И ЗначениеЗаполнено(Строка.ДатаОкончания) 
				И Строка.ДатаНачала >= Строка.ДатаОкончания Тогда
				ШаблонСообщения = НСтр("ru = 'Дата начала гарантии %1 не может быть больше либо равной дате окончания гарантии %2!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Строка.ДатаНачала,"ДФ=dd.MM.yyyy"), Формат(Строка.ДатаОкончания,"ДФ=dd.MM.yyyy"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				
			ИначеЕсли ЗначениеЗаполнено(Строка.ДатаНачала) И ЗначениеЗаполнено(Строка.ДатаОкончания) 
				И НайденныеСтроки.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Гарантийный период %1-%2 совпадает с другим гарантийным периодом!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Строка.ДатаНачала,"ДФ=dd.MM.yyyy"), Формат(Строка.ДатаОкончания,"ДФ=dd.MM.yyyy"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				
				Сч = НайденныеСтроки.ВГраница();
				Пока Сч > 0 Цикл
					ТЗГарантий.Удалить(НайденныеСтроки[Сч]);
					Сч = Сч - 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабГарантий.ДатаНачала,
		|	ТабГарантий.ДатаОкончания
		|ПОМЕСТИТЬ ТабГарантий
		|ИЗ
		|	&ТабГарантий КАК ТабГарантий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабГарантий1.ДатаНачала,
		|	ТабГарантий1.ДатаОкончания
		|ИЗ
		|	ТабГарантий КАК ТабГарантий1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабГарантий КАК ТабГарантий2
		|		ПО (ТабГарантий1.ДатаНачала >= ТабГарантий2.ДатаНачала
		|					И ТабГарантий1.ДатаНачала <= ТабГарантий2.ДатаОкончания
		|				ИЛИ ТабГарантий1.ДатаОкончания >= ТабГарантий2.ДатаНачала
		|					И ТабГарантий1.ДатаОкончания <= ТабГарантий2.ДатаОкончания)
		|			И НЕ (ТабГарантий1.ДатаНачала = ТабГарантий2.ДатаНачала
		|			И ТабГарантий1.ДатаОкончания = ТабГарантий2.ДатаОкончания)";
		
		Запрос.УстановитьПараметр("ТабГарантий", ГарантииОбъектаРемонта.Выгрузить());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ШаблонСообщения = НСтр("ru = 'Гарантийный период %1-%2 пересекается с другим гарантийным периодом!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Выборка.ДатаНачала,"ДФ=dd.MM.yyyy"), Формат(Выборка.ДатаОкончания,"ДФ=dd.MM.yyyy"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьГарантии(ТекОбъект, Отказ)
	
	Если МодифицированностьГарантий Тогда
		
		Для каждого Строка из ГарантииОбъектаРемонта Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ТекОбъект;
			КонецЕсли;
		КонецЦикла;
		
		МассивСтрок = ГарантииОбъектаРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекОбъект));
		
		НаборЗаписей = РегистрыСведений.торо_СрокиГарантииОбъектовРемонта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
		Для каждого Строка Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
			МодифицированностьГарантий = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Запись в регистр сведений <Сроки гарантии объектов ремонта> не выполнена.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецПопытки; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСнятияФлажкаГарантий(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ГарантииОбъектаРемонта.Очистить();
		Элементы.СтраницаГарантийныеРемонты.Видимость = Ложь;
		ОбнулениеРесурсаГарантии = Истина;
		МодифицированностьГарантий = Истина;
	Иначе
		ЕстьГарантияДляОбъекта = Истина;
	КонецЕсли; 	
КонецПроцедуры

#КонецОбласти

#Область ИсторияПеремещенияОборудования

&НаСервере
Процедура ПолучитьИсториюПеремещения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Период КАК Период,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Регистратор КАК Регистратор,
		|	0 КАК НомерСтроки,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии КАК СтруктураИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = &ОбъектИерархии
		|	И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии = &СтруктураИерархии
		|	И НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Регистратор.Организация ЕСТЬ NULL";
 
	Запрос.УстановитьПараметр("ОбъектИерархии", Объект.Ссылка);
	Запрос.УстановитьПараметр("СтруктураИерархии", ВыборВидаИерархииИстория);

	ИсторияПеремещенияОборудования.Загрузить(Запрос.Выполнить().Выгрузить());
	парам = 0;
	Для Каждого ТекСтрока Из ИсторияПеремещенияОборудования Цикл
		парам = парам + 1;
		ТекСтрока.НомерСтроки = парам;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРеквизиты

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	СтеретьЗначенияУнаследованныхРеквизитовТиповогоОР();
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	торо_УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Неопределено);
	УнаследоватьДопРеквизитыИзТиповогоОР();
	ПривязатьОбработчикИзмененияДопРеквизитов();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	ИндивидуальныйНабор = ПолучитьНаборДопРеквизитов();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьДополнительныеРеквизиты");
	
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("Набор", ИндивидуальныйНабор);
	ПараметрыПерехода.Вставить("Свойство", Неопределено);
	ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УнаследоватьДопРеквизитыИзТиповогоОР()
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
		СписокЗаполненныхСвойств = Новый массив;
		Для каждого СтрокаДопРеквизита из Объект.ДополнительныеРеквизиты Цикл
			Если ЗначениеЗаполнено(СтрокаДопРеквизита.Значение) Тогда
				СписокЗаполненныхСвойств.Добавить(СтрокаДопРеквизита.Свойство);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаДляНаследованияДопРеквизитов();
		
		Запрос.УстановитьПараметр("ТиповойОР", Объект.ТиповойОР);
		Запрос.УстановитьПараметр("Свойства", СписокЗаполненныхСвойств);
		
		ВыборкаСвойств = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСвойств.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСвойств.Значение) Тогда
				Продолжить;
			Конецесли;
			
			СтрокаОписания = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство", ВыборкаСвойств.Свойство));
			Если СтрокаОписания.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОписания = СтрокаОписания[0];
			
			НовСтр = УнаследованныеДопРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСвойств);
			НовСтр.ИмяРеквизитаЗначение = СтрокаОписания.ИмяРеквизитаЗначение;
			
			Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
				СтрокиТаблицы = ЭтаФорма.Свойства_ЗначенияДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство", ВыборкаСвойств.Свойство));
				Для каждого ТекущиеДанные из СтрокиТаблицы Цикл 
					ТекущиеДанные.Значение = ВыборкаСвойств.Значение;
					ТекущиеДанные.ЭтоУнаследованный = Истина;
				КонецЦикла;
			Иначе
				ЭтаФорма[СтрокаОписания.ИмяРеквизитаЗначение] = ВыборкаСвойств.Значение;
				УстановитьОформлениеДопРеквизита(ЭтаФорма.Элементы[СтрокаОписания.ИмяРеквизитаЗначение], Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтеретьЗначенияУнаследованныхРеквизитовТиповогоОР()
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		Для каждого ТекущиеДанные из ЭтаФорма.Свойства_ЗначенияДополнительныхРеквизитов Цикл
			Если ТекущиеДанные.ЭтоУнаследованный Тогда
				ТекущиеДанные.ЭтоУнаследованный = Ложь;
				ТекущиеДанные.Значение = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаДопРеквизита из УнаследованныеДопРеквизиты Цикл
			Если ЭтаФорма[СтрокаДопРеквизита.ИмяРеквизитаЗначение] = СтрокаДопРеквизита.Значение Тогда
				ЭтаФорма[СтрокаДопРеквизита.ИмяРеквизитаЗначение] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УнаследованныеДопРеквизиты.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаДляНаследованияДопРеквизитов()
	
	Текст = "ВЫБРАТЬ
	|	торо_ТиповыеОРДополнительныеРеквизиты.Ссылка КАК Источник,
	|	торо_ТиповыеОРДополнительныеРеквизиты.Свойство,
	|	торо_ТиповыеОРДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.торо_ТиповыеОР.ДополнительныеРеквизиты КАК торо_ТиповыеОРДополнительныеРеквизиты
	|ГДЕ
	|	торо_ТиповыеОРДополнительныеРеквизиты.Ссылка = &ТиповойОР
	|	И НЕ торо_ТиповыеОРДополнительныеРеквизиты.Свойство В (&Свойства)";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура ПривязатьОбработчикИзмененияДопРеквизитов()
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		Элемент = Элементы.Свойства_ЗначенияДополнительныхРеквизитовЗначение;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ДополнительныйРеквизитПриИзменении");
		Элемент.УстановитьДействие("Очистка", "Подключаемый_ДополнительныйРеквизитОчистка");
		
	Иначе
		
		Для каждого ОписаниеДопРеквизита из ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			Элемент = ЭтаФорма.Элементы[ОписаниеДопРеквизита.ИмяРеквизитаЗначение];
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ДополнительныйРеквизитПриИзменении");
			Попытка
				Элемент.КнопкаОчистки = Истина;
				Элемент.УстановитьДействие("Очистка", "Подключаемый_ДополнительныйРеквизитОчистка");
			Исключение
			КонецПопытки;
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УнаследоватьРеквизитЕслиВозможно(ИмяРеквизитаЗначение, Свойство, СтандартнаяОбработка, ИдентификаторСтроки = Неопределено)
	
	СтрокаСвоего = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
	Если СтрокаСвоего.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаСвоего = СтрокаСвоего[0];
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляНаследованияДопРеквизитов();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ торо_ТиповыеОРДополнительныеРеквизиты.Свойство В (&Свойства)", "И торо_ТиповыеОРДополнительныеРеквизиты.Свойство В (&Свойства)");
	
	Запрос.УстановитьПараметр("ТиповойОР", Объект.ТиповойОР);
	Запрос.УстановитьПараметр("Свойства", Свойство);

	ВыборкаСвойств = Запрос.Выполнить().Выбрать();
	Если ВыборкаСвойств.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаСвойств.Значение) Тогда
			Объект.ДополнительныеРеквизиты.Удалить(СтрокаСвоего);
			
			НовСтр = УнаследованныеДопРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСвойств);
			НовСтр.ИмяРеквизитаЗначение = ИмяРеквизитаЗначение;
			
			Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
				ТекущиеДанные = ЭтаФорма.Свойства_ЗначенияДополнительныхРеквизитов.НайтиПоИдентификатору(ИдентификаторСтроки);
				ТекущиеДанные.Значение = ВыборкаСвойств.Значение;
				ТекущиеДанные.ЭтоУнаследованный = Истина;
			Иначе
				ЭтаФорма[ИмяРеквизитаЗначение] = ВыборкаСвойств.Значение;
				УстановитьОформлениеДопРеквизита(ЭтаФорма.Элементы[ИмяРеквизитаЗначение], Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеДопРеквизита(Элемент, Унаследованный)
	
	Если Унаследованный Тогда
		ЦветТекста = WebЦвета.Синий; 
		ЦветЗаголовка = WebЦвета.Синий;
	Иначе
		ЦветТекста = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветТекстаПоля");
		ЦветЗаголовка = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветТекстаКнопки");
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		
		Элемент.ЦветТекстаЗаголовка = ЦветЗаголовка;

		Попытка
			Элемент.ЦветТекста = ЦветТекста;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДатыЭксплуатации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА торо_СтатусыОбъектовРемонтаВУчете.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПринятоКУчету)
	               |				ТОГДА торо_СтатусыОбъектовРемонтаВУчете.Период
	               |		КОНЕЦ) КАК ДатаПринятияКУчету,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА торо_СтатусыОбъектовРемонтаВУчете.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.СнятоСУчета)
	               |				ТОГДА торо_СтатусыОбъектовРемонтаВУчете.Период
	               |		КОНЕЦ) КАК ДатаСнятияСУчета,
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ПоследниеДатыСтатусов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
	               |ГДЕ
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта = &ОбъектРемонта
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследниеДатыСтатусов.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_СтатусыОбъектовРемонтаВУчете.Период КАК ДатаВводаВЭксплуатацию,
	               |	торо_СтатусыОбъектовРемонтаВУчете.Регистратор КАК РегистраторПринятияКУчету,
	               |	ВЫБОР
	               |		КОГДА НЕ ПоследниеДатыСтатусов.ДатаСнятияСУчета ЕСТЬ NULL 
	               |				И ПоследниеДатыСтатусов.ДатаПринятияКУчету < ПоследниеДатыСтатусов.ДатаСнятияСУчета
	               |			ТОГДА торо_СтатусыОбъектовРемонтаВУчете1.Период
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |	КОНЕЦ КАК ДатаСнятияСУчета,
	               |	ВЫБОР
	               |		КОГДА НЕ ПоследниеДатыСтатусов.ДатаСнятияСУчета ЕСТЬ NULL 
	               |				И ПоследниеДатыСтатусов.ДатаПринятияКУчету < ПоследниеДатыСтатусов.ДатаСнятияСУчета
	               |			ТОГДА торо_СтатусыОбъектовРемонтаВУчете1.Регистратор
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Документ.торо_ВыбытиеОбъектаРемонта.ПустаяСсылка)
	               |	КОНЕЦ КАК РегистраторСнятияСУчета
	               |ИЗ
	               |	ПоследниеДатыСтатусов КАК ПоследниеДатыСтатусов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
	               |		ПО ПоследниеДатыСтатусов.ДатаПринятияКУчету = торо_СтатусыОбъектовРемонтаВУчете.Период
	               |			И ПоследниеДатыСтатусов.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете1
	               |		ПО ПоследниеДатыСтатусов.ДатаСнятияСУчета = торо_СтатусыОбъектовРемонтаВУчете1.Период
	               |			И ПоследниеДатыСтатусов.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчете1.ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата",   ТекущаяДата());
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДатаВводаВЭксплуатацию     = Выборка.ДатаВводаВЭксплуатацию;
		РегистраторПринятияКУчету  = Выборка.РегистраторПринятияКУчету;
		ДатаСнятияСУчета           = Выборка.ДатаСнятияСУчета;
		РегистраторСнятияСУчета    = Выборка.РегистраторСнятияСУчета;
	Иначе
		ДатаВводаВЭксплуатацию     = Дата("00010101");
		РегистраторПринятияКУчету  = Документы.торо_ПринятиеОРКУчету.ПустаяСсылка();
		ДатаСнятияСУчета           = Дата("00010101");
		РегистраторСнятияСУчета    = Документы.торо_ВыбытиеОбъектаРемонта.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПослеКопирования()
	
	Если Параметры.Свойство("СписокПараметровКопирования") Тогда
		Если Параметры.СписокПараметровКопирования.Количество() > 0 И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Записать();
		КонецЕсли;
		
		торо_РаботаСИерархией20.ПеренестиПараметрыОРПослеКопирования(Параметры.ЗначениеКопирования, Объект.Ссылка, Параметры.СписокПараметровКопирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(ПриСозданииФормыНаСервере = Ложь)
	
	Если ПриСозданииФормыНаСервере Тогда
		
		Если Объект.Изготовитель = ТекТиповойОР.Изготовитель Тогда
			Элементы.Изготовитель.ЦветТекста = Новый Цвет(128,128,128);
		КонецЕсли;
		
		Если Объект.Направление = ТекТиповойОР.Направление Тогда
			Элементы.Направление.ЦветТекста = Новый Цвет(128,128,128);
		КонецЕсли;
		
		// Отбор не удаленных строк
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Удален", Ложь);
		Элементы.НормативныеРемонты.ОтборСтрок = ПараметрыОтбора;
		Элементы.ТабЗапчастейОбъектовРемонта.ОтборСтрок = ПараметрыОтбора;
		
		ПоказыватьКонтрагента = Объект.ВнешнийОбъект;
		Элементы.СтраницаКонтрагента.Видимость = ПоказыватьКонтрагента;
		Элементы.СтарницаОрганизации.Видимость = НЕ ПоказыватьКонтрагента;
	КонецЕсли;	
	
	// функциональные опции
	ФОУчетЗапчастей                 				= ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОУчетЗамещающихРемонтов        				= ПолучитьФункциональнуюОпцию("торо_УчетЗамещающихРемонтов");
	ФОИспользоватьКоэффициентыРемонтныхОсобенностей = ПолучитьФункциональнуюОпцию("торо_ИспользоватьКоэффициентыРемОсобенностей");
	ФОИспользоватьПланированиеПоЖесткимРемЦиклам 	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам");
	ФОИспользоватьОценкиРМ							= ПолучитьФункциональнуюОпцию("торо_ИспользованиеОценокРМ");
	ФОИспользоватьОстановочные						= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ФОИспользоватьГарантии                          = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	
	Элементы.СтраницаЗапчасти.Видимость                          = ФОУчетЗапчастей;
	Элементы.ГруппаЗамещаемые.Видимость                          = ФОУчетЗамещающихРемонтов;
	Элементы.СтраницаКоэффициентыРемонтныхОсобенностей.Видимость = ФОИспользоватьКоэффициентыРемонтныхОсобенностей;
	Элементы.СтраницаФиксированныеРемонтныеЦиклы.Видимость       = ФОИспользоватьПланированиеПоЖесткимРемЦиклам;
	Элементы.СтраницаОценкаРМ.Видимость 					     = ФОИспользоватьОценкиРМ;
	Элементы.ОсновноеИЗависимоеОборудование.Видимость 			 = ФОИспользоватьОстановочные;
	
	// Гарантии++
	Элементы.СтраницаГарантийныеРемонты.Видимость = ЕстьГарантияДляОбъекта;
	СтруктураОтбора = Новый Структура("ОбъектРемонта", Объект.Ссылка);
	МассивСтрок = ГарантииОбъектаРемонта.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрок.Количество() <> ГарантииОбъектаРемонта.Количество() Тогда // Значит имеются гарантии у одного из родителей ОР
		Элементы.ЕстьГарантияДляОбъекта.Доступность = Ложь;                    // и изменять значение флага нельзя.
	Иначе
		Элементы.ЕстьГарантияДляОбъекта.Доступность = Истина;
	КонецЕсли;
	// Гарантии--
	
	// ЖЦ Оборудования++
	УстановитьВидимостьДоступностьЖизненныйЦикл();
	// ЖЦ Оборудования--
	
	// Функциональные места++
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	УстановитьВидимостьДоступностьФМ(ФОИспользоватьФМ);
	// Функциональные места--
	
	ДополнитьЗаголовокФормыСостояниемОР();
	
	Элементы.ФормаПоказатьСкрытьИзображение.Пометка = ОтображатьИзображение;	
	Элементы.ГруппаИзображениеОР.Видимость = Элементы.ФормаПоказатьСкрытьИзображение.Пометка;
	Элементы.ПоказатьПоложениеВИерархии.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЖизненныйЦикл()
	
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		
		Элементы.ГруппаСтатусОбъектаРемонта.Видимость = Истина;
		Элементы.ДатаВводаВЭксплуатацию1.Видимость    = Ложь;

		Элементы.АдресКартинки.Высота = 9;
		
		Элементы.ДатаВводаВЭксплуатацию.ТолькоПросмотр = Истина; // ТолькоПросмотрДатыВводаВЭксплуатацию;
		Элементы.ДатаСнятияСУчета.ТолькоПросмотр       = Истина; // ТолькоПросмотрДатыСнятияСучета;
		
		Если Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Доступность = Ложь;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(РегистраторПринятияКУчету) Тогда
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Заголовок = РегистраторПринятияКУчету;
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Доступность = Истина;	
		Иначе
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Заголовок = НСтр("ru = 'Ввести документ ""Принятие объекта ремонта к учету""'");
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Доступность = Ложь;	
		КонецЕсли; 
		
		
		Если ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Заголовок   = РегистраторСнятияСУчета;
		Иначе
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Заголовок   = НСтр("ru = 'Ввести документ ""Выбытие объекта ремонта""'");
		КонецЕсли;
		
		ПравоВводаДокументовПринятияКУчету = ПравоДоступа("Добавление", Метаданные.Документы.торо_ПринятиеОРКУчету);
		ПравоВводаДокументовСнятияСУчета = ПравоДоступа("Добавление", Метаданные.Документы.торо_ВыбытиеОбъектаРемонта);
		Если НЕ ЗначениеЗаполнено(РегистраторПринятияКУчету) Тогда
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Доступность = Элементы.ВвестиОткрытьДокументПринятиеКУчету.Доступность И ПравоВводаДокументовПринятияКУчету;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Доступность = Элементы.ВвестиОткрытьДокументСнятияСУчета.Доступность И ПравоВводаДокументовСнятияСУчета;
		КонецЕсли;
		
		Элементы.НеУчаствуетВПланировании.Доступность = ДоступностьФлагаПланирования;
			
		ТекСтатусВУчете = РегистрыСведений.торо_СтатусыОбъектовРемонтаВУчете.ПолучитьТекущийСтатусОР(Объект.Ссылка);
		
		Если Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			ЭтаФорма.Заголовок = НСтр("ru = 'Объект ремонта (Создание)'");
		Иначе
			ЭтаФорма.Заголовок = Строка(Объект.Ссылка) + " [" + ТекСтатусВУчете + "]";
		КонецЕсли;
		
		Если ТекСтатусВУчете = Перечисления.торо_СтатусыОРВУчете.СнятоСУчета Тогда
			ЭтаФорма.ТолькоПросмотр                                = Истина;
			
			Элементы.ЕстьГарантияДляОбъекта.Доступность 		   = Ложь; 
			Элементы.ТабЗапчастейОбъектовРемонта.Доступность 	   = Ложь;
			Элементы.ТаблицаОценокРМ.Доступность 				   = Ложь;
			Элементы.ВидыРемонтаЭтогоОбъекта.Доступность 		   = Ложь;
			Элементы.СписокОбъектовРемонта.Доступность 			   = Ложь;
			Элементы.ВидыРемонтаОсновногоСвязанного.Доступность    = Ложь;
			Элементы.ГарантииОбъектаРемонта.Доступность            = Ложь;
			Если ЭтаФорма.Свойства_ИспользоватьСвойства И 
				ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
				Элементы.Свойства_ЗначенияДополнительныхРеквизитов.Доступность = Ложь;			
			КонецЕсли; 
			
		Иначе
			ЭтаФорма.ТолькоПросмотр                                = Ложь;
			
			Элементы.ТабЗапчастейОбъектовРемонта.Доступность 	   = Истина;
			Элементы.ТаблицаОценокРМ.Доступность 				   = Истина;
			Элементы.ВидыРемонтаЭтогоОбъекта.Доступность 		   = Истина;
			Элементы.СписокОбъектовРемонта.Доступность 			   = Истина;
			Элементы.ВидыРемонтаОсновногоСвязанного.Доступность    = Истина;
			Элементы.ГарантииОбъектаРемонта.Доступность            = Истина;
			Если ЭтаФорма.Свойства_ИспользоватьСвойства И 
				ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
				Элементы.Свойства_ЗначенияДополнительныхРеквизитов.Доступность = Истина;			
			КонецЕсли;			
		КонецЕсли;
		
	Иначе
		Элементы.АдресКартинки.Высота = 7;
		Элементы.ГруппаСтатусОбъектаРемонта.Видимость = Ложь;
		Элементы.ДатаВводаВЭксплуатацию1.Видимость    = Истина;
		
		Если Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			ЭтаФорма.Заголовок = НСтр("ru = 'Объект ремонта (Создание)'");
		Иначе
			ЭтаФорма.Заголовок = Строка(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДополнитьЗаголовокФормыСостояниемОР()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидЭксплуатации
		|ИЗ
		|	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ТекущееСостояниеОРСрезПоследних";
		Запрос.УстановитьПараметр("ОбъектРемонта",Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата", ТочнаяТекущаяДатаПользователя());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() И НЕ ЗначениеЗаполнено(ДатаСнятияСУчета) Тогда
			Если Выборка.ВидЭксплуатации = Справочники.торо_ВидыЭксплуатации.ПустаяСсылка() Тогда
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Вид эксплуатации не установлен]'");
			Иначе
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " [" + Выборка.ВидЭксплуатации + "]";
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд) КАК ЕстьНаряд
		|ИЗ
		|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
		|ГДЕ
		|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта = &ОбъектРемонта
		|	И НЕ торо_ОбщиеДанныеПоРемонтам.Завершен
		|	И (торо_ОбщиеДанныеПоРемонтам.ЕстьНаряд
		|			ИЛИ торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект))
		|	И НЕ торо_ОбщиеДанныеПоРемонтам.Отменен
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ЕстьНаряд = 1 Тогда
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Выполняется ремонт]'");
			Иначе
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Выявлен дефект]'");
			КонецЕсли;			
		Иначе
			Если Не (ЗначениеЗаполнено(РегистраторПринятияКУчету)
				И ЗначениеЗаполнено(РегистраторСнятияСУчета)
				И Константы.торо_ИспользоватьДокументыПринятияИСписанияОборудования.Получить()) Тогда
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Работает]'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагПланированияИДоступность(СменаСтатуса = Ложь)
	ЗначениеПеречисления = Перечисления.торо_СтатусыОРВУчете.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(РегистраторПринятияКУчету)
		И Не ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда // Принят к учету
		
		ЗначениеПеречисления = Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету;
		
	ИначеЕсли ЗначениеЗаполнено(РегистраторПринятияКУчету)
		И ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда // Снят с учета
		
		ЗначениеПеречисления = Перечисления.торо_СтатусыОРВУчете.СнятоСУчета;
		
	Иначе
		
		ЗначениеПеречисления = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету;
		
	КонецЕсли;
	
	НастройкиДоступностиОбъектовРемонта = РегистрыСведений.торо_НастройкиДоступностиОбъектовРемонта.Получить(Новый Структура("СтатусОРВУчете",ЗначениеПеречисления));
	
	Если Не НастройкиДоступностиОбъектовРемонта = Неопределено Тогда
		ДоступностьФлагаПланирования = НастройкиДоступностиОбъектовРемонта.ДоступностьФлага;
		Если СменаСтатуса Тогда
			Объект.НеУчаствуетВПланировании = НастройкиДоступностиОбъектовРемонта.ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНеИспользуемыхСтрок(ПоказыватьУдаленные,ИмяТаблицаФормы)
	Если ПоказыватьУдаленные Тогда
		Элементы[ИмяТаблицаФормы].ОтборСтрок = Неопределено;
	Иначе
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Удален", Ложь);
		Элементы[ИмяТаблицаФормы].ОтборСтрок = ПараметрыОтбора;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросовНаСервере()
	
	Если Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		ПараметрОбъектРемонта = ИсторияПеремещенияОборудованияФМ.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОбъектРемонта"));
		Если ПараметрОбъектРемонта <> Неопределено Тогда
			ПараметрОбъектРемонта.Использование = Ложь;
		КонецЕсли;
		ИсторияПеремещенияОборудованияФМ.Параметры.УстановитьЗначениеПараметра("ФункциональноеМесто", Объект.Ссылка);
	Иначе
		ПараметрФункциональноеМесто = ИсторияПеремещенияОборудованияФМ.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФункциональноеМесто"));
		Если ПараметрФункциональноеМесто <> Неопределено Тогда
			ПараметрФункциональноеМесто.Использование = Ложь;
		КонецЕсли;
		ИсторияПеремещенияОборудованияФМ.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеГрафикаРемРаботНаСервере()
	
	Возврат Константы.торо_ГрафикРемонтныхРабот.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиРодителяИерархии(Иерархия, ОбъектРемонта)
	
	РодительИерархии = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(ОбъектРемонта, Иерархия,,Истина,Истина);
	
	Возврат ?(ТипЗнч(РодительИерархии) <> Тип("СправочникСсылка.торо_ОбъектыРемонта"),
				Справочники.торо_ОбъектыРемонта.ПустаяСсылка(),
			  	РодительИерархии);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляКопирования(ОбъектРемонта, ИерархияДляВводаНовыхОР)

	ДанныеДляКопирования = Новый Структура;
	
	ДанныеДляКопирования.Вставить("ИерархияДляВводаНовыхОР", ИерархияДляВводаНовыхОР);
	ДанныеДляКопирования.Вставить("РодительИерархии", НайтиРодителяИерархии(ИерархияДляВводаНовыхОР, ОбъектРемонта));
	
	Возврат ДанныеДляКопирования;
	
КонецФункции

&НаСервере
Функция ШтрихКодУникален()
	
	Если Не ЗначениеЗаполнено(Объект.ШтрихКод) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка <> &Ссылка
	               |	И торо_ОбъектыРемонта.ШтрихКод = &ШтрихКод";
	
	Запрос.УстановитьПараметр("ШтрихКод", Объект.ШтрихКод);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Ссылка <> &Ссылка", "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Не Выборка.Следующий();

КонецФункции
	
#Область ФункциональныеМеста

&НаСервере
Процедура ЗаполнитьДеревоОграниченийНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	Дерево.Строки.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОграниченияТОР.Ограничение КАК Ограничение,
	               |	торо_ОграниченияТОР.СтруктураИерархии КАК Иерархия,
	               |	ИСТИНА КАК ИзТиповогоОР
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.ОграниченияНаХарактеристикиОборудования КАК торо_ОграниченияТОР
	               |ГДЕ
	               |	торо_ОграниченияТОР.Ссылка = &ТиповойОР
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ОграниченияОР.Ограничение,
	               |	торо_ОграниченияОР.СтруктураИерархии,
	               |	ЛОЖЬ
	               |ИЗ
	               |	РегистрСведений.торо_ОграниченияНаХарактеристикиОборудования КАК торо_ОграниченияОР
	               |ГДЕ
	               |	торо_ОграниченияОР.ФункциональноеМесто = &ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТиповойОР", Объект.ТиповойОР);
	
	Результат = Запрос.Выполнить().Выгрузить();
	СтрокаЛюбойИерархии = Дерево.Строки.Добавить();
	СтрокаЛюбойИерархии.ИерархияОграничение = Строка("Для всех иерархий");
	
	ТЗОграниченийТОР = Результат.Скопировать(Новый Структура("ИзТиповогоОР", Истина));		
	Если ТЗОграниченийТОР.Количество() > 0 Тогда
		
		ТЗОграниченийТОР.Свернуть("Иерархия");
		Для каждого Строка Из ТЗОграниченийТОР Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Иерархия) Тогда
				НоваяСтрокаДерева = Дерево.Строки.Найти("Для всех иерархий", "ИерархияОграничение");
			Иначе 
				НайденнаяСтрока = Дерево.Строки.Найти(Строка.Иерархия, "ИерархияОграничение");
				Если НайденнаяСтрока <> Неопределено Тогда
					НоваяСтрокаДерева = НайденнаяСтрока;				
				Иначе
					НоваяСтрокаДерева = Дерево.Строки.Добавить();
					НоваяСтрокаДерева.ИерархияОграничение = Строка.Иерархия;
					НоваяСтрокаДерева.ИзТиповогоОР = Истина;
					НоваяСтрокаДерева.ТиповойОР = Объект.ТиповойОР; 
				КонецЕсли; 
			КонецЕсли;
			
			МассивСтрок = Результат.НайтиСтроки(Новый Структура("Иерархия, ИзТиповогоОР", Строка.Иерархия, Истина));
			
			Для каждого Элемент Из МассивСтрок Цикл
				НоваяСтрока = НоваяСтрокаДерева.Строки.Добавить();
				НоваяСтрока.ИерархияОграничение = Элемент.Ограничение;
				НоваяСтрока.ИзТиповогоОР = Истина;
				НоваяСтрока.ТиповойОР = Объект.ТиповойОР;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ТЗОграниченийОР = Результат.Скопировать(Новый Структура("ИзТиповогоОР", Ложь));
	ТабОграничений.Загрузить(ТЗОграниченийОР);
	Если ТЗОграниченийОР.Количество() > 0 Тогда
		
		ТЗОграниченийОР.Свернуть("Иерархия");
		Для каждого Строка Из ТЗОграниченийОР Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Иерархия) Тогда
				НоваяСтрокаДерева = Дерево.Строки.Найти("Для всех иерархий", "ИерархияОграничение");
			Иначе 
				НайденнаяСтрока = Дерево.Строки.Найти(Строка.Иерархия, "ИерархияОграничение");
				Если НайденнаяСтрока <> Неопределено Тогда
					НоваяСтрокаДерева = НайденнаяСтрока;				
				Иначе
					НоваяСтрокаДерева = Дерево.Строки.Добавить();
					НоваяСтрокаДерева.ИерархияОграничение = Строка.Иерархия;
					НоваяСтрокаДерева.ИзТиповогоОР = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрок = Результат.НайтиСтроки(Новый Структура("Иерархия, ИзТиповогоОР", Строка.Иерархия, Ложь));
			
			Для каждого Элемент Из МассивСтрок Цикл
				НоваяСтрока = НоваяСтрокаДерева.Строки.Добавить();
				НоваяСтрока.ИерархияОграничение = Элемент.Ограничение;
				НоваяСтрока.ИзТиповогоОР = Ложь;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОграничений");
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповойСостав()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СоставФункциональныхМест.ТипОборудования КАК ТипОборудования,
	               |	торо_СоставФункциональныхМест.ОбъектРемонта КАК УстановленныйОР,
	               |	торо_СоставФункциональныхМест.ОбъектРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |	торо_СоставФункциональныхМест.ОбъектРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	торо_СоставФункциональныхМест.ОбъектРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	               |	МИНИМУМ(торо_ИсторияПеремещения.Период) КАК ДатаУстановкиНаФМ
	               |ИЗ
	               |	РегистрСведений.торо_СоставФункциональныхМест КАК торо_СоставФункциональныхМест
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИсторияПеремещенияОборудованияМеждуФМ.СрезПоследних КАК торо_ИсторияПеремещения
	               |		ПО торо_СоставФункциональныхМест.ОбъектРемонта = торо_ИсторияПеремещения.ОбъектРемонта
	               |			И торо_СоставФункциональныхМест.ФункциональноеМесто = торо_ИсторияПеремещения.ФункциональноеМесто
	               |ГДЕ
	               |	торо_СоставФункциональныхМест.ФункциональноеМесто = &ОбъектРемонта
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СоставФункциональныхМест.ТипОборудования,
	               |	торо_СоставФункциональныхМест.ОбъектРемонта,
	               |	торо_СоставФункциональныхМест.ОбъектРемонта.ИнвентарныйНомер,
	               |	торо_СоставФункциональныхМест.ОбъектРемонта.ЗаводскойНомер,
	               |	торо_СоставФункциональныхМест.ОбъектРемонта.ДатаВводаВЭксплуатацию
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СоставФункциональныхМест.ТипОборудования КАК ТипОборудования,
	               |	МИНИМУМ(торо_СоставФункциональныхМест.ФункциональноеМесто) КАК ФункциональноеМесто,
	               |	СУММА(1) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Сопоставленные
	               |ИЗ
	               |	РегистрСведений.торо_СоставФункциональныхМест КАК торо_СоставФункциональныхМест
	               |ГДЕ
	               |	торо_СоставФункциональныхМест.ФункциональноеМесто = &ОбъектРемонта
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СоставФункциональныхМест.ТипОборудования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ТиповойСоставФункциональныхМест.ТипОборудования КАК ТипОборудования,
	               |	торо_ТиповойСоставФункциональныхМест.Количество - ЕСТЬNULL(ВТ_Сопоставленные.Количество, 0) КАК Количество
	               |ИЗ
	               |	РегистрСведений.торо_ТиповойСоставФункциональныхМест КАК торо_ТиповойСоставФункциональныхМест
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сопоставленные КАК ВТ_Сопоставленные
	               |		ПО торо_ТиповойСоставФункциональныхМест.ТипОборудования = ВТ_Сопоставленные.ТипОборудования
	               |			И торо_ТиповойСоставФункциональныхМест.ФункциональноеМесто = ВТ_Сопоставленные.ФункциональноеМесто
	               |ГДЕ
	               |	торо_ТиповойСоставФункциональныхМест.ФункциональноеМесто = &ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет()[0].Выгрузить();
	Выборка = Запрос.ВыполнитьПакет()[2].Выбрать();
	
	ТиповойСостав.Загрузить(Результат);
	
	Пока Выборка.Следующий() Цикл
		
		Количество = Выборка.Количество;
		Пока Количество > 0 Цикл
			НСтр = ТиповойСостав.Добавить();
			НСтр.ТипОборудования = Выборка.ТипОборудования;
			Количество = Количество - 1;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУстановленныеОР()
	
	УстановленныеОР = ПолучитьУстановленныеОР();
	ТабУстановленныхОР.Загрузить(УстановленныеОР);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияИзТОР()
	
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
    Дерево.Строки.Очистить();	
	
	СтрокаЛюбойИерархии = Дерево.Строки.Добавить();
	СтрокаЛюбойИерархии.ИерархияОграничение = Строка("Для всех иерархий");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОграниченияТОР.Ограничение КАК Ограничение,
	               |	торо_ОграниченияТОР.СтруктураИерархии КАК Иерархия,
	               |	ИСТИНА КАК ИзТиповогоОР
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.ОграниченияНаХарактеристикиОборудования КАК торо_ОграниченияТОР
	               |ГДЕ
	               |	торо_ОграниченияТОР.Ссылка = &ТиповойОР";
	
	Запрос.УстановитьПараметр("ТиповойОР", Объект.ТиповойОР);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТЗОграниченийТОР = Результат.Скопировать();
	ТЗОграниченийТОР.Свернуть("Иерархия");
	Для каждого Строка Из ТЗОграниченийТОР Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Иерархия) Тогда
			НоваяСтрокаДерева = Дерево.Строки.Найти("Для всех иерархий", "ИерархияОграничение");
		Иначе 
			НайденнаяСтрока = Дерево.Строки.Найти(Строка.Иерархия, "ИерархияОграничение");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрокаДерева = НайденнаяСтрока;				
			Иначе
				НоваяСтрокаДерева = Дерево.Строки.Добавить();
				НоваяСтрокаДерева.ИерархияОграничение = Строка.Иерархия;
				НоваяСтрокаДерева.ИзТиповогоОР = Истина;
				НоваяСтрокаДерева.ТиповойОР = Объект.ТиповойОР; 
			КонецЕсли; 
		КонецЕсли;

		МассивСтрок = Результат.НайтиСтроки(Новый Структура("Иерархия", Строка.Иерархия));
		
		Для каждого Элемент Из МассивСтрок Цикл
			НоваяСтрока = НоваяСтрокаДерева.Строки.Добавить();
			НоваяСтрока.ИерархияОграничение = Элемент.Ограничение;
			НоваяСтрока.ИзТиповогоОР = Истина;
			НоваяСтрока.ТиповойОР = Объект.ТиповойОР;
		КонецЦикла;
	КонецЦикла;
	
	ТЗОграниченийОР = ТабОграничений.Выгрузить();
	Если ТЗОграниченийОР.Количество() > 0 Тогда
		
		ТЗОграниченийОР.Свернуть("Иерархия");
		Для каждого Строка Из ТЗОграниченийОР Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Иерархия) Тогда
				НоваяСтрокаДерева = Дерево.Строки.Найти("Для всех иерархий", "ИерархияОграничение");
			Иначе 
				НайденнаяСтрока = Дерево.Строки.Найти(Строка.Иерархия, "ИерархияОграничение");
				Если НайденнаяСтрока <> Неопределено Тогда
					НоваяСтрокаДерева = НайденнаяСтрока;				
				Иначе
					НоваяСтрокаДерева = Дерево.Строки.Добавить();
					НоваяСтрокаДерева.ИерархияОграничение = Строка.Иерархия;
					НоваяСтрокаДерева.ИзТиповогоОР = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрок = ТабОграничений.НайтиСтроки(Новый Структура("Иерархия, ИзТиповогоОР", Строка.Иерархия, Ложь));
			
			Для каждого Элемент Из МассивСтрок Цикл
				НоваяСтрока = НоваяСтрокаДерева.Строки.Добавить();
				НоваяСтрока.ИерархияОграничение = Элемент.Ограничение;
				НоваяСтрока.ИзТиповогоОР = Ложь;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОграничений");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУстановленныеОР()
	
	ТабУстановленных = Новый ТаблицаЗначений;
	ТабУСтановленных.Колонки.Добавить("УстановленныйОР");
	ТабУСтановленных.Колонки.Добавить("ТипОборудования");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		МассивПодчиненных = Новый Массив;
		МассивРодителя = Новый Массив;
		МассивРодителя.Добавить(Объект.Ссылка);
		ТабСопоставленных = ТиповойСостав.Выгрузить(, "УстановленныйОР");
		МассивСопоставленных = ТабСопоставленных.ВыгрузитьКолонку("УстановленныйОР");
		
		ДополнительныеОтборы = Новый СписокЗначений;
		СтруктураОтборов = Новый Структура("Ключ, Значение, ВидСравнения", "Ссылка", МассивСопоставленных, ВидСравненияКомпоновкиДанных.НеВСписке);
		ДополнительныеОтборы.Добавить(СтруктураОтборов);    
		
		торо_РаботаСИерархией20.ДополнитьМассивПодчиненнымиОР(МассивРодителя, МассивПодчиненных, Ложь,,,,ДополнительныеОтборы);
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                |	торо_ОбъектыРемонта.Ссылка КАК УстановленныйОР,
		                |	торо_ОбъектыРемонта.ТиповойОР КАК ТипОборудования,
		                |	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
		                |	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
		                |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		                |	МИНИМУМ(торо_ИсторияПеремещения.Период) КАК ДатаУстановкиНаФМ
		                |ИЗ
		                |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИсторияПеремещенияОборудованияМеждуФМ.СрезПоследних(
		                |				,
		                |				ФункциональноеМесто = &ФункциональноеМесто
		                |					И ОбъектРемонта В (&МассивОбъектов)) КАК торо_ИсторияПеремещения
		                |		ПО торо_ОбъектыРемонта.Ссылка = торо_ИсторияПеремещения.ОбъектРемонта
		                |ГДЕ
		                |	торо_ИсторияПеремещения.Событие = ЗНАЧЕНИЕ(Перечисление.торо_СобытияОборудованияНаФМ.Установка)
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	торо_ОбъектыРемонта.Ссылка,
		                |	торо_ОбъектыРемонта.ТиповойОР,
		                |	торо_ОбъектыРемонта.ИнвентарныйНомер,
		                |	торо_ОбъектыРемонта.ЗаводскойНомер,
		                |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию";
		
		Запрос.УстановитьПараметр("ФункциональноеМесто", Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивПодчиненных);
		
		ТабУстановленных = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТабУстановленных;
	
КонецФункции

&НаСервере
Процедура ПроставитьУстановленныеОРСервер()
	
	СтруктураОтбора = Новый Структура("УстановленныйОР", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
	МассивНесопоставленных = ТиповойСостав.НайтиСтроки(СтруктураОтбора);
	УстановленныеОР = ПолучитьУстановленныеОР();
	МассивГрупп = Новый Массив;
	
	Для каждого Элем Из МассивНесопоставленных Цикл
		Если НЕ Элем.ТипОборудования.ЭтоГруппа Тогда
			НайденнаяСтрока = УстановленныеОР.Найти(Элем.ТипОборудования, "ТипОборудования");
			Если НайденнаяСтрока <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Элем, НайденнаяСтрока);
				УстановленныеОР.Удалить(НайденнаяСтрока);
			КонецЕсли;
		Иначе
			МассивГрупп.Добавить(Элем);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элем Из МассивГрупп Цикл
		
		УдаляемаяСтрока = Неопределено;
		Для каждого Строка Из УстановленныеОР Цикл
			Если Элем.ТипОборудования = Строка.ТипОборудования.Родитель Тогда
				ЗаполнитьЗначенияСвойств(Элем, Строка);
				УдаляемаяСтрока = Строка;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Если УдаляемаяСтрока <> Неопределено Тогда
			УстановленныеОР.Удалить(УдаляемаяСтрока);
		КонецЕсли;
			
	КонецЦикла;
	
	ТабУстановленныхОР.Загрузить(УстановленныеОР);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеИерархии(ДобавляемаяИерархия)
	
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ДобавляемаяИерархия)); 
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеОграничения(ТекИерархия, ДобавляемоеОграничение)
	
	ЕстьДубли = Ложь;
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ТекИерархия));
	Для каждого Строка Из НайденныеСтроки Цикл
		МассивСтрок = Строка.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ДобавляемоеОграничение));
		Если МассивСтрок.Количество() > 0 Тогда
			ЕстьДубли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьДубли;
	
КонецФункции

&НаСервере
Процедура ДобавитьИерархиюВДерево(ДобавляемаяИерархия)
	
	НовСтрока = ТабОграничений.Добавить();
	НовСтрока.Иерархия = ДобавляемаяИерархия;
	
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	НоваяСтрокаДерева = Дерево.Строки.Добавить();
	НоваяСтрокаДерева.ИерархияОграничение = ДобавляемаяИерархия;
	НоваяСтрокаДерева.ИзТиповогоОР = Ложь;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОграничений");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОграничениеВДерево(ДобавляемоеОграничение, ТекИерархия)
	
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	
	Если ТипЗнч(ТекИерархия) = Тип("Строка") Тогда
		ТекИерархияТЧ = Справочники.торо_СтруктурыОР.ПустаяСсылка();
	Иначе
		ТекИерархияТЧ = ТекИерархия; 
	КонецЕсли;
		
	ПараметрыОтбора = Новый Структура("Иерархия, Ограничение", ТекИерархияТЧ, Справочники.торо_ОграниченияНаХарактеристикиОборудования.ПустаяСсылка());
	МассивСтрок = ТабОграничений.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() <> 0 Тогда
		МассивСтрок[0].Ограничение = ДобавляемоеОграничение;			
	Иначе
		НовСтрока = ТабОграничений.Добавить();
		НовСтрока.Иерархия = ТекИерархияТЧ;
		НовСтрока.Ограничение = ДобавляемоеОграничение;
	КонецЕсли;
	
	СтрокаРодителя = Дерево.Строки.Найти(ТекИерархия, "ИерархияОграничение");
	Если СтрокаРодителя <> Неопределено Тогда
		НоваяСтрокаДерева = СтрокаРодителя.Строки.Добавить();
		НоваяСтрокаДерева.ИерархияОграничение = ДобавляемоеОграничение;
		НоваяСтрокаДерева.ИзТиповогоОР = Ложь;
	КонецЕсли;
		
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОграничений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОграниченияНаХарактеристики(ТекОбъект, Отказ)
	
	Попытка
		НаборЗаписей = РегистрыСведений.торо_ОграниченияНаХарактеристикиОборудования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФункциональноеМесто.Установить(ТекОбъект);
		
		Для каждого СтрокаОграничений Из ТабОграничений Цикл
			Если НЕ СтрокаОграничений.ИзТиповогоОР И ЗначениеЗаполнено(СтрокаОграничений.Ограничение) Тогда
				
				НС = НаборЗаписей.Добавить();
				НС.ФункциональноеМесто = ТекОбъект;
				НС.СтруктураИерархии = СтрокаОграничений.Иерархия;
				НС.Ограничение = СтрокаОграничений.Ограничение;
				
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать ограничения на характеристики: '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат;
	КонецПопытки;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТиповойСостав(ТекОбъект, Отказ)
	
	Попытка
		НаборЗаписей = РегистрыСведений.торо_СоставФункциональныхМест.СоздатьНаборЗаписей();
      НаборЗаписей.Отбор.ФункциональноеМесто.Установить(ТекОбъект);
		
		Для каждого Строка Из ТиповойСостав Цикл
			Если ЗначениеЗаполнено(Строка.УстановленныйОР) Тогда
				НС = НаборЗаписей.Добавить();
				НС.ФункциональноеМесто = ТекОбъект;
				НС.ТипОборудования = Строка.ТипОборудования;
				НС.ОбъектРемонта = Строка.УстановленныйОР;
			КонецЕсли;
		КонецЦикла;
				
		НаборЗаписей.Записать(Истина);
		
		НаборЗаписейТиповой = РегистрыСведений.торо_ТиповойСоставФункциональныхМест.СоздатьНаборЗаписей();
		НаборЗаписейТиповой.Отбор.ФункциональноеМесто.Установить(ТекОбъект);
		
		ТиповойСоставКопия = ТиповойСостав.Выгрузить(,"ТипОборудования");
		ТиповойСоставКопия.Свернуть("ТипОборудования");
		
		Для каждого Строка Из ТиповойСоставКопия Цикл
			ПараметрыОтбора = Новый Структура("ТипОборудования", Строка.ТипОборудования);
			НайденныеСтроки = ТиповойСостав.НайтиСтроки(ПараметрыОтбора);
			
			НС = НаборЗаписейТиповой.Добавить();
			НС.ФункциональноеМесто = ТекОбъект;
			НС.ТипОборудования = Строка.ТипОборудования;
			НС.Количество = НайденныеСтроки.Количество();
		КонецЦикла;
		
		НаборЗаписейТиповой.Записать(Истина);
				
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать типовой состав функционального места: '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНесоответствующиеОР()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии,
	               	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии,
	               	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии КАК СтруктураИерархии
	               	|ПОМЕСТИТЬ ВТ_ВсеРодители
	               	|ИЗ
	               	|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, РодительИерархии = &Родитель) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
	               	|ГДЕ
	               	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
	               	|
	               	|ОБЪЕДИНИТЬ
	               	|
	               	|ВЫБРАТЬ
	               	|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
	               	|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
	               	|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
	               	|ИЗ
	               	|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
	               	|ГДЕ
	               	|	торо_ИерархическиеСтруктурыОР.РодительИерархии = &Родитель
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               	|	ВТ_ВсеРодители.РодительИерархии КАК ФункциональноеМесто,
	               	|	ВТ_ВсеРодители.ОбъектИерархии КАК ОбъектРемонта,
	               	|	ВТ_ВсеРодители.СтруктураИерархии КАК СтруктураИерархии
	               	|ПОМЕСТИТЬ ВТ_ОРДляПроверки
	               	|ИЗ
	               	|	ВТ_ВсеРодители КАК ВТ_ВсеРодители
	               	|ГДЕ
	               	|	НЕ ВТ_ВсеРодители.ОбъектИерархии.ЭтоГруппа
	               	|	И НЕ ВТ_ВсеРодители.ОбъектИерархии.ПометкаУдаления
	               	|	И ВТ_ВсеРодители.ОбъектИерархии.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.Объект)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
	               	|	ВТ_ВсеРодители.РодительИерархии,
	               	|	ВТ_ВсеРодители.ОбъектИерархии,
	               	|	ЗНАЧЕНИЕ(Справочник.торо_СтруктурыОР.ПустаяСсылка)
	               	|ИЗ
	               	|	ВТ_ВсеРодители КАК ВТ_ВсеРодители
	               	|ГДЕ
	               	|	НЕ ВТ_ВсеРодители.ОбъектИерархии.ЭтоГруппа
	               	|	И НЕ ВТ_ВсеРодители.ОбъектИерархии.ПометкаУдаления
	               	|	И ВТ_ВсеРодители.ОбъектИерархии.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.торо_ТипыОбъектовRCM.Объект)
	               	|
	               	|ИНДЕКСИРОВАТЬ ПО
	               	|	ОбъектРемонта,
					|	ФункциональноеМесто,
					|	СтруктураИерархии
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|УНИЧТОЖИТЬ ВТ_ВсеРодители";
	
	Запрос.УстановитьПараметр("Родитель", Объект.Ссылка);
	Результат = Запрос.Выполнить();

	ТабНесоответствующихОР = торо_РаботаСФункциональнымиМестами.ПолучитьНесоответствующиеОР(Запрос.МенеджерВременныхТаблиц, Истина);
	
	Возврат ТабНесоответствующихОР;

КонецФункции

&НаСервере
Функция ПолучитьМассивУстановленныхОР()
	
	МассивУстановленных = ТабУстановленныхОР.Выгрузить().ВыгрузитьКолонку("УстановленныйОР"); 
	Возврат МассивУстановленных;

КонецФункции

&НаСервере
Функция ИспользоватьФМ()
	Возврат ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
КонецФункции

&НаСервере
Процедура ТипОбъектаПриИзменении_Сервер()
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	Если ФОИспользоватьФМ И Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		ОбновитьСтраницуОграничений();
	КонецЕсли;

	УстановитьПараметрыЗапросовНаСервере();
	УстановитьВидимостьДоступностьФМ(ФОИспользоватьФМ);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуОграничений()
	ЗаполнитьДеревоОграниченийНаСервере();
	ЗаполнитьТиповойСостав();
	ЗаполнитьУстановленныеОР();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьФМ(ФОИспользоватьФМ)
	
    ЭтоФункциональноеМесто = Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто;
	Элементы.ГруппаТипОбъекта.Видимость = ФОИспользоватьФМ;
	
	ВидимостьКогдаФМ = ФОИспользоватьФМ И ЭтоФункциональноеМесто;
	ВидимостьКогдаЕД = НЕ ВидимостьКогдаФМ; 
	
    Элементы.СтарницаОрганизации.Видимость                       = ВидимостьКогдаФМ ИЛИ НЕ Объект.ВнешнийОбъект;
	Элементы.СтраницаКонтрагента.Видимость                       = ВидимостьКогдаЕД И Объект.ВнешнийОбъект;
	
	// функциональные опции
	ФОУчетЗапчастей                 				= ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОИспользоватьКоэффициентыРемонтныхОсобенностей = ПолучитьФункциональнуюОпцию("торо_ИспользоватьКоэффициентыРемОсобенностей");
	ФОИспользоватьПланированиеПоЖесткимРемЦиклам 	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам");
	ФОИспользоватьОценкиРМ							= ПолучитьФункциональнуюОпцию("торо_ИспользованиеОценокРМ");
	
	Элементы.ВнешнийОбъект.Видимость                             = ВидимостьКогдаЕД;
	Элементы.СрокПолезногоИспользования.Видимость                = ВидимостьКогдаЕД;
	Элементы.ИнвентарныйНомер.Видимость                          = ВидимостьКогдаЕД;
	Элементы.ДанныеИзготовителя.Видимость                        = ВидимостьКогдаЕД;
	Элементы.ЭтоАктив.Видимость                                  = ВидимостьКогдаЕД;
	Элементы.ЭтоПротяженныйОбъект.Видимость						 = ВидимостьКогдаЕД;
	Элементы.ГруппаДополнительныеРеквизиты.Видимость             = ВидимостьКогдаЕД;
	
	
	Элементы.СтраницаФиксированныеРемонтныеЦиклы.Видимость       = ФОИспользоватьПланированиеПоЖесткимРемЦиклам;
	Элементы.СтраницаЗапчасти.Видимость                          = ФОУчетЗапчастей;
	Элементы.СтраницаОценкаРМ.Видимость                          = ФОИспользоватьОценкиРМ;
	Элементы.СтраницаКоэффициентыРемонтныхОсобенностей.Видимость = ФОИспользоватьКоэффициентыРемонтныхОсобенностей;
	
	Элементы.ГарантииОбъектаРемонта.ТолькоПросмотр                          = ВидимостьКогдаФМ;
	Элементы.СтраницаОграниченияИТиповойСостав.Видимость                    = ВидимостьКогдаФМ;
	Элементы.ИсторияПеремещенияОборудованияФМ.Видимость                     = ФОИспользоватьФМ;
	Элементы.ИсторияПеремещенияОборудованияФМ1ОбъектРемонта.Видимость       = ВидимостьКогдаФМ;
	Элементы.ИсторияПеремещенияОборудованияФМ1ФункциональноеМесто.Видимость = ВидимостьКогдаЕД;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораИзУстановленных(ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивУстановленных = ПолучитьМассивУстановленныхОР();
	
	Если МассивУстановленных.Количество() > 0 Тогда
		СписокУстановленных = Новый СписокЗначений;
		СписокУстановленных.ЗагрузитьЗначения(МассивУстановленных);
		ДанныеВыбора = СписокУстановленных;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьТипТОР(ТиповойОР)
	
	Если ЗначениеЗаполнено(ТиповойОР) И Объект.ТипОбъекта = ТиповойОР.ТипОбъекта Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьУстановленныеОР()
	
	УстановленныеОР = ПолучитьУстановленныеОР();
	
	МассивПроставленныхОР = ТиповойСостав.Выгрузить(, "УстановленныйОР");
	
	Для каждого Элем Из МассивПроставленныхОР Цикл
		НайденнаяСтрока = УстановленныеОР.Найти(Элем, "УстановленныйОР");
		Если НайденнаяСтрока <> Неопределено Тогда
			УстановленныеОР.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ТабУстановленныхОР.Загрузить(УстановленныеОР);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеУстановленногоОР(УстановленныйОР)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИнвентарныйНомер");
	СтруктураВозврата.Вставить("ЗаводскойНомер");
	СтруктураВозврата.Вставить("ДатаВводаВЭксплуатацию");
	СтруктураВозврата.Вставить("ДатаУстановкиНаФМ");
	
	Если ЗначениеЗаполнено(УстановленныйОР) Тогда
		МассивСтрок = ТабУстановленныхОР.НайтиСтроки(Новый Структура("УстановленныйОР", УстановленныйОР));
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, МассивСтрок[0]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПроверитьИерархию(Идентификатор)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Причина", "");
	СтруктураВозврата.Вставить("РазрешеноИзменение", Истина);
	
	
	СтрокаДерева = ДеревоОграничений.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДерева <> Неопределено И ЗначениеЗаполнено(СтрокаДерева.ИерархияОграничение) Тогда
		ВыбраннаяИерархия = СтрокаДерева.ИерархияОграничение;
		
		ТекРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекРодитель <> Неопределено Тогда
			СтруктураВозврата.РазрешеноИзменение = Ложь;	
			СтруктураВозврата.Причина = "ЕстьРодитель";
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбраннаяИерархия) И ВыбраннаяИерархия.СтроитсяАвтоматически Тогда
			СтруктураВозврата.РазрешеноИзменение = Ложь;	
			СтруктураВозврата.Причина = "АвтоматическаяИерархия";
			Возврат СтруктураВозврата; 
		КонецЕсли;
		
		Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
		МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение, ИзТиповогоОР", ВыбраннаяИерархия, Ложь)); 
		Если МассивСтрок.Количество() > 1 Тогда
			СтруктураВозврата.РазрешеноИзменение = Ложь;	
			СтруктураВозврата.Причина = "ДублирующееЗначение";
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		
	Иначе
		СтруктураВозврата.Причина = "ПустоеЗначение";
		СтруктураВозврата.РазрешеноИзменение = Ложь;	
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПроверитьОграничение(Идентификатор)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Причина", "");
	СтруктураВозврата.Вставить("РазрешеноИзменение", Истина);
	
	СтрокаДерева = ДеревоОграничений.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДерева <> Неопределено И ЗначениеЗаполнено(СтрокаДерева.ИерархияОграничение) Тогда
		ВыбранноеОграничение = СтрокаДерева.ИерархияОграничение;
		
		ТекРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекРодитель = Неопределено ИЛИ (ТипЗнч(ТекРодитель.ИерархияОграничение) <> Тип("Строка") 
		  И ТипЗнч(ТекРодитель.ИерархияОграничение) <> Тип("СправочникСсылка.торо_СтруктурыОР")) Тогда
			СтруктураВозврата.РазрешеноИзменение = Ложь;	
			СтруктураВозврата.Причина = "НеверныйУровеньВложенности";
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
		СтрокаРодителя = Дерево.Строки.Найти(ТекРодитель.ИерархияОграничение, "ИерархияОграничение");
		Если СтрокаРодителя <> Неопределено Тогда
			МассивСтрок = СтрокаРодителя.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ВыбранноеОграничение));
			Если МассивСтрок.Количество() > 1 Тогда
				СтруктураВозврата.РазрешеноИзменение = Ложь;	
				СтруктураВозврата.Причина = "ДублирующееЗначение";
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураВозврата.Причина = "ПустоеЗначение";
		СтруктураВозврата.РазрешеноИзменение = Ложь;	
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ИзменитьИерархию(ПредЗначение, ТекИерархия)
	
	МассивСтрок = ТабОграничений.НайтиСтроки(Новый Структура("Иерархия", ПредЗначение)); 
	Для каждого Строка Из МассивСтрок Цикл
		Строка.Иерархия = ТекИерархия; 
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьОграничение(Идентификатор, ПредЗначение, ТекОграничение)
	
	СтрокаДерева = ДеревоОграничений.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДерева <> Неопределено Тогда
		ТекРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекРодитель <> Неопределено Тогда
			
			Если ТипЗнч(ТекРодитель.ИерархияОграничение) = Тип("Строка") Тогда
				ТекИерархия = Справочники.торо_СтруктурыОР.ПустаяСсылка();
			Иначе
				ТекИерархия = ТекРодитель.ИерархияОграничение; 
			КонецЕсли;

			МассивСтрок = ТабОграничений.НайтиСтроки(Новый Структура("Иерархия, Ограничение", ТекИерархия, ПредЗначение));
			Если МассивСтрок.Количество() > 0 Тогда
				МассивСтрок[0].Ограничение = ТекОграничение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИерархию(ТекИерархия)
	
	МассивСтрок = ТабОграничений.НайтиСтроки(Новый Структура("Иерархия", ТекИерархия)); 
	Для каждого Строка Из МассивСтрок Цикл
		ТабОграничений.Удалить(Строка); 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОграничение(Идентификатор, ТекОграничение)
	
	СтрокаДерева = ДеревоОграничений.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДерева <> Неопределено Тогда
		ТекРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекРодитель <> Неопределено Тогда
			
			Если ТипЗнч(ТекРодитель.ИерархияОграничение) = Тип("Строка") Тогда
				ТекИерархия = Справочники.торо_СтруктурыОР.ПустаяСсылка();
			Иначе
				ТекИерархия = ТекРодитель.ИерархияОграничение; 
			КонецЕсли;
			
			МассивСтрок = ТабОграничений.НайтиСтроки(Новый Структура("Иерархия, Ограничение", ТекИерархия, ТекОграничение));
			Если МассивСтрок.Количество() > 0 Тогда
				ТабОграничений.Удалить(МассивСтрок[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбъектВРегистрДляПроверкиТребований(ТекущийОбъект, ЭтоФМ)
	
	ОРУстановленНаФМ = Ложь;
	
	Если НЕ ЭтоФМ Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИсторияПеремещенияСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
		               |	МАКСИМУМ(торо_ИсторияПеремещенияСрезПоследних.Период) КАК Период
		               |ПОМЕСТИТЬ ВТ_МаксПериод
		               |ИЗ
		               |	РегистрСведений.торо_ИсторияПеремещенияОборудованияМеждуФМ.СрезПоследних(, ОбъектРемонта = &ОбъектРемонта) КАК торо_ИсторияПеремещенияСрезПоследних
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	торо_ИсторияПеремещенияСрезПоследних.ОбъектРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_МаксПериод.Период КАК ДатаСобытия,
		               |	торо_ИсторияПеремещения.ФункциональноеМесто КАК ФункциональноеМесто,
		               |	торо_ИсторияПеремещения.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ИсторияПеремещения.Событие КАК Событие
		               |ПОМЕСТИТЬ ВТ_ИзРегистра
		               |ИЗ
		               |	ВТ_МаксПериод КАК ВТ_МаксПериод
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИсторияПеремещенияОборудованияМеждуФМ КАК торо_ИсторияПеремещения
		               |		ПО ВТ_МаксПериод.ОбъектРемонта = торо_ИсторияПеремещения.ОбъектРемонта
		               |			И ВТ_МаксПериод.Период = торо_ИсторияПеремещения.Период
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ИзРегистра.ФункциональноеМесто КАК ФункциональноеМесто
		               |ИЗ
		               |	ВТ_ИзРегистра КАК ВТ_ИзРегистра
		               |ГДЕ
		               |	ВТ_ИзРегистра.Событие = &СобытиеУстановка";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ТекущийОбъект);
		Запрос.УстановитьПараметр("СобытиеУстановка", Перечисления.торо_СобытияОборудованияНаФМ.Установка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОРУстановленНаФМ = Истина;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если МодифицированностьОграничений ИЛИ (ПредТиповойОР <> ТекущийОбъект.ТиповойОР И (ОРУстановленНаФМ ИЛИ ЭтоФМ)) 
	  ИЛИ (МодифицированностьДопРеквизитов И ОРУстановленНаФМ) Тогда
		торо_РаботаСФункциональнымиМестами.ДобавитьОбъектДляПроверки(ТекущийОбъект.Ссылка);
		МодифицированностьОграничений = Ложь;
		МодифицированностьДопРеквизитов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеОграничениямНаСервере()

	НесоответствующиеОР = ПолучитьНесоответствующиеОР();	
	
	Если НесоответствующиеОР.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Все объекты ремонта удовлетворяют требованиям'"));
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из НесоответствующиеОР Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.СтруктураИерархии) Тогда
			ШаблонСообщения = НСтр("ru = 'Объект ремонта ""%1"" не соответствует ограничениям по иерархии ""%2""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.ОбъектРемонта, СтрокаТЧ.СтруктураИерархии);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Объект ремонта ""%1"" не соответствует ограничениям, указанным для всех иерархий'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.ОбъектРемонта);
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТЧ.ОбъектРемонта);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ДублиСредиЦепочекРЦ()
	
	МассивЦепочек = Новый Массив;
	
	Для каждого Строка Из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
		Если Строка.ТиповойОР = Ложь Тогда
			МассивЦепочек.Добавить(Строка.ВидЦепочки);
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РемонтныеЦиклыОборудования.ВидЦепочки КАК ВидЦепочки,
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов
		|ИЗ
		|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
		|ГДЕ
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов = &НовыйТиповой
		|	И торо_РемонтныеЦиклыОборудования.ВидЦепочки В(&МассивЦепочек)";
	
	Запрос.УстановитьПараметр("МассивЦепочек", МассивЦепочек);
	Запрос.УстановитьПараметр("НовыйТиповой", Объект.ТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаписатьИзменениеРодителя(Отказ)
	
	Если МодифицированностьРодителя Тогда
		ПредыдущийРодитель = торо_РаботаСИерархией20.ПолучитьТекущегоРодителяВИерархии(Объект.Ссылка, ТекСтруктураИерархии,,Истина,Истина);
		Если ПредыдущийРодитель <> РодительИерархии Тогда
			МассивОР = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
			торо_РаботаСИерархией20.ИзменитьПоложениеВИерархииНаСервере(МассивОР, ТекСтруктураИерархии, Родитель, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Флаг МодифицированностьРодителя сбрасывается в ложь на клиенте, после отправки оповещения.
	// Здесь не сбрасывать.
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено (Объект.ТиповойОР) 
		И Не торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ТиповойОР,"ТипОбъекта") = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ИзменитьТип", НСтр("ru = 'Изменить тип'"));
		СписокКнопок.Добавить("Очистить", НСтр("ru = 'Очистить'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить'"));
		ДопПараметры = Новый Структура("ВыбранныйТип, Ссылка", ВыбранноеЗначение, Объект.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТипыСоставаСпискаОР_ПослеВопроса", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = НСтр("ru = 'Тип объекта выбранного Типового ОР не соответствует типу объекта ремонта! 
		                          |Изменить тип у ТОР и входящих в его состав ОР или очистить ТОР у данного ОР?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипыСоставаСпискаОР_ПослеВопроса(Результат, ДопПараметры) Экспорт
	
	Если Результат = "ИзменитьТип" Тогда
		Объект.ТипОбъекта = ДопПараметры.ВыбранныйТип;
		ПерезаписатьТипыОбъектов(Объект.ТиповойОР, Объект.ТипОбъекта, ДопПараметры.Ссылка);
	ИначеЕсли Результат = "Очистить" Тогда
		Объект.ТиповойОР = Неопределено;
		Объект.ТипОбъекта = ДопПараметры.ВыбранныйТип;
		ТиповойОРПриИзменении(Элементы.ТиповойОР);
	КонецЕсли;
	
	Если Не Результат = "Отмена" Тогда
		ЭтаФорма.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьТипыОбъектов(ТиповойОР, ТипОбъекта, Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.ТиповойОР = &ТиповойОР
	               |	И НЕ торо_ОбъектыРемонта.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ТиповойОР", ТиповойОР);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ПерезаписатьТипОбъектаУОбъектаРемонта(ТиповойОР, ТипОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПерезаписатьТипОбъектаУОбъектаРемонта(Выборка.Ссылка, ТипОбъекта, Ссылка, ТиповойОР);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьТипОбъектаУОбъектаРемонта(ОбъектРемонта, ТипОбъекта, Ссылка = Неопределено, ТиповойОР = Неопределено)
	
	НачатьТранзакцию();
	ОбъектОР = ОбъектРемонта.ПолучитьОбъект();
	Если ОбъектОР <> Неопределено Тогда
		ОбъектОР.ТипОбъекта = ТипОбъекта;
		Если Ссылка = ОбъектРемонта Тогда
			ОбъектОР.ТиповойОР = ТиповойОР;
		КонецЕсли;
		ОбъектОР.Записать();
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьСнятьПометкуЗапчастиИзТиповогоКУдалению(ТекДанные, Пометка)
	ТиповыеКПометке = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового, Удален", 
		ТекДанные.Номенклатура, ТекДанные.Характеристика, Истина, Не Пометка));
	Для Каждого Строка Из ТиповыеКПометке Цикл
		Строка.Удален = Пометка;	
		СвязанныеВидыРемонта = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ТиповойОР, Удален", 
			Строка.Номенклатура, Строка.Характеристика, Строка.ТиповойОР, Не Пометка));
		Для Каждого СтрокаВР Из СвязанныеВидыРемонта Цикл
			СтрокаВР.Удален = Пометка;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ТочнаяТекущаяДатаПользователя()
	
	Результат = ОбщегоНазначения.РабочаяДатаПользователя(Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ГенерацияШтрихкодаЗавершение(Результат, ДопПараметры) Экспорт 
	Если Результат <> Неопределено И Результат.Свойство("ШтрихКод") Тогда 
		Объект.ШтрихКод = Результат.ШтрихКод; 
		Объект.ТипШтрихКода = Результат.ТипШтрихКода;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьНаборДопРеквизитов()
	Возврат УправлениеСвойствами.НаборСвойствПоИмени("Справочник_торо_ОбъектыРемонта_Общие");
КонецФункции

#КонецОбласти