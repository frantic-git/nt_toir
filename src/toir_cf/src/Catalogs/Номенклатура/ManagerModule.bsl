#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Проверяет могут ли переданные характеристика и упавка являться характеристикой и упаковой переданной
// номенклатуры. При проверке учитывается, что характеристики могут быть общими для вида номенклатуры,
// а упаковки общими для набора упаковок.
//
//		Параметры:
//			Номенклатура - СправочникСсылка.Номенклатура - номенклатура-владелец характеристик и упаковок,
//			Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - проверяемая характеристика,
//			Упаковка - СправочникСсылка.Упаковка - проверяемая упаковка.
//
//		Возвращаемое значение:
//			Структура - стуктура с полями
//				Характеристика - если проверяемая характеристика подходит, то записывается она, если нет - пустая ссылка,
//				Упаковка - если провуеряемая упаковка подходит, то записывается она, если нет - пустая ссылка,
//				ХарактеристикиИспользуются - равно ИСТИНА, если по номенклатуре ведется учет характеристик.
//
Функция ХарактеристикаИУпаковкаПринаджлежатВладельцу(Номенклатура, Характеристика, Упаковка) Экспорт
	
	СтруктураВозврата = Новый Структура("Характеристика, Упаковка, ХарактеристикиИспользуются");
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		СтруктураВозврата.Характеристика             = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СтруктураВозврата.Упаковка                   = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		СтруктураВозврата.ХарактеристикиИспользуются = Ложь;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(СпрУпаковки.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(СпрХарактеристики.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|		ПО (ВЫБОР
	|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА СпрНоменклатура.ВидНоменклатуры
	|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = СпрХарактеристики.Владелец)
	|			И (СпрХарактеристики.Ссылка = &Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (СпрНоменклатура.Ссылка = СпрУпаковки.Владелец)
	|			И (СпрУпаковки.Ссылка = &Упаковка)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	
    Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата,Выборка);
	
	Возврат СтруктураВозврата;

КонецФункции

// Проверяет используются ли характеристики для переданной номенклатуры
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//	Возвращаемое значение:
//		Булево - ИСТИНА, если характеристики используются.
//
Функция ХарактеристикиИспользуются(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикиИспользуются;
	
КонецФункции

// Функция - Неиспользуемые для контроля заполнения и отборов реквизиты
// Возвращаемое значение:
//  Массив Из Строка - Внутри строки с именами реквизитов.
Функция НеиспользуемыеДляКонтроляЗаполненияИОтборовРеквизиты() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("ФайлКартинки");
	Результат.Добавить("ФайлОписанияДляСайта");
	Результат.Добавить("НаборУпаковок");
	Результат.Добавить("ШаблонЦенника");
	Результат.Добавить("ШаблонЭтикетки");
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения реквизитов номеклатуры, если номенклатура не передана - возвращаются значения по умолчанию.
//
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - номенклатура, чьи реквизиты нужно вернуть.
//	Возвращаемое значение:
//		Структура - поля ВестиУчетПоГТД, ЕдиницаИзмерения, СтавкаНДС, ГруппаФинансовогоУчета, ПодакцизныйТовар, ЭтоУслуга.
//
Функция ЗначенияРеквизитовНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР КОГДА Номенклатура.ТипНоменклатуры НЕ В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВестиУчетПоГТД = Ложь;
		СтавкаНДС = Выборка.СтавкаНДС;
		ЭтоУслуга = Выборка.ЭтоУслуга;
		ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		ГруппаФинансовогоУчета = Неопределено;
		ПодакцизныйТовар = Ложь;
	Иначе
		ВестиУчетПоГТД = Ложь;
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ЭтоУслуга = Неопределено;
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		ГруппаФинансовогоУчета = Неопределено;
		ПодакцизныйТовар = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоГТД, СтавкаНДС, ЭтоУслуга, ЕдиницаИзмерения, ГруппаФинансовогоУчета, ПодакцизныйТовар",
		ВестиУчетПоГТД,
		СтавкаНДС,
		ЭтоУслуга,
		ЕдиницаИзмерения,
		ГруппаФинансовогоУчета,
		ПодакцизныйТовар);
	
	Возврат СтруктураРеквизитов;

КонецФункции // ЗначенияРеквизитовНоменклатуры()

// Заполняет реквизиты элемента номенклатуры значениями соответствующих реквизитов вида номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура	 - заполняемый элемент номенклатуры,
//  ПрерыватьЗаполнениеПриОшибкеПроверки - Булево - Истина - признак отмены выполнения заполнения данных,
//  Отказ - Булево - если происходит смена вида номенклатуры, то делается проверка корректности этой смены.
//                          Если та проверка выдает ошибку, то параметр выставляется в ИСТИНА
//  ЗаполнениеПоИсточникуКопирования - Булево - Истина - признак выполнения заполнения данных из источника копирования.
//
Процедура ЗаполнитьРеквизитыПоВидуНоменклатуры(Номенклатура,
												ПрерыватьЗаполнениеПриОшибкеПроверки = Ложь,
												Отказ = Ложь,
												ЗаполнениеПоИсточникуКопирования = Ложь) Экспорт
	
	Если Номенклатура.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры) Тогда
		Возврат;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		СтарыйВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.Ссылка, "ВидНоменклатуры");
	Иначе
		СтарыйВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	СтрогоБерутсяИзВида = "ТипНоменклатуры,ИспользованиеХарактеристик,СхемаОбеспечения";
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры = "ЕдиницаИзмерения,СтавкаНДС";
	
	// Очистим реквизиты, которые точно нужно перезаполнить по виду	
	ОчиститьЗначенияСвойств(Номенклатура, СтрогоБерутсяИзВида);
	
	// Получим реквизиты нового вида, если нужно заполнять только при создании, то просто не будем получать такие реквизиты.
	РеквизитыНовогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	Номенклатура.ВидНоменклатуры,
	СтрогоБерутсяИзВида
	+ ?(ЗначениеЗаполнено(СтарыйВидНоменклатуры), "", "," + ЗаполняютсяТолькоПриСозданииНоменклатуры));
	
	// Если номенклатура создается, то очистим реквизиты, которые при создании заполняются по виду, если в новом виде эти
	// реквизиты заполнены.
	Если Не ЗначениеЗаполнено(СтарыйВидНоменклатуры)
		И Не ЗаполнениеПоИсточникуКопирования Тогда
		
		ЗаполняютсяТолькоПриСозданииНоменклатурыМассив = СтрРазделить(ЗаполняютсяТолькоПриСозданииНоменклатуры, ",", Ложь);
		
		Для Каждого ИмяРеквизита Из ЗаполняютсяТолькоПриСозданииНоменклатурыМассив Цикл
			Если ЗначениеЗаполнено(РеквизитыНовогоВида[ИмяРеквизита]) Тогда
				Номенклатура[ИмяРеквизита] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполним только незаполненные реквизиты - те, которые нужно перезаполнять всегда были ранее принудительно очищены.
	ЗаполнитьЗначенияПустыхСвойств(Номенклатура, РеквизитыНовогоВида);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	ФорматнаяСтрока = торо_РаботаСПользовательскимПредставлениемПовтИсп.ПолучитьФорматнуюСтроку("Справочники.Номенклатура");
	Если ФорматнаяСтрока = Неопределено Тогда
		МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МассивЛокализуемыхПолей = Новый Массив;
	МассивЛокализуемыхПолей.Добавить("Наименование");
	МассивЛокализуемыхПолей.Добавить("НаименованиеПолное");
	МассивЛокализуемыхПолей.Добавить("Описание");
	
	СписокПолей = торо_РаботаСПользовательскимПредставлением.ПолучитьСписокПолей(ФорматнаяСтрока);
	
	Для Каждого Поле Из СписокПолей Цикл
		Поля.Добавить(Поле);
		
		Если МассивЛокализуемыхПолей.Найти(Поле) <> Неопределено Тогда
			Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
				Поля.Добавить(Поле + "Язык1");
			КонецЕсли;
			Если МультиязычностьСервер.ИспользуетсяВторойДополнительныйЯзык() Тогда
				Поля.Добавить(Поле +"Язык2");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ФорматнаяСтрока = торо_РаботаСПользовательскимПредставлениемПовтИсп.ПолучитьФорматнуюСтроку("Справочники.Номенклатура");
	Если ФорматнаяСтрока = Неопределено Тогда
		МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	Представление = торо_РаботаСПользовательскимПредставлением.ПолучитьПредставлениеПоФорматнойСтроке(ФорматнаяСтрока, Данные, Истина);
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.Номенклатура);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Карточка номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КарточкаНоменклатуры";
	КомандаПечати.Представление = НСтр("ru = 'Карточка номенклатуры'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Карточка номенклатуры'");
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаНоменклатуры") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"КарточкаНоменклатуры", 
			НСтр("ru = 'Карточка номенклатуры'"), 
			СформироватьПечатнуюФормуКарточкиНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ВидНоменклатуры");
	Результат.Добавить("СтавкаНДС");
	Результат.Добавить("ЕдиницаИзмерения");
	
	Возврат Результат;

КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив Из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("ВидНоменклатуры");
	НеРедактируемыеРеквизиты.Добавить("ИспользованиеХарактеристик");
	НеРедактируемыеРеквизиты.Добавить("НаименованиеПолное");
	НеРедактируемыеРеквизиты.Добавить("Описание");
	НеРедактируемыеРеквизиты.Добавить("ТипНоменклатуры");
	НеРедактируемыеРеквизиты.Добавить("ФайлКартинки");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Функция - заполняет список реквизитов, которые можно использовать при формировании форматной строки в конструкторе.
//
// Параметры:
//  СписокРеквизитов - СписокЗначений - пустой список значений для заполнения.
Процедура ЗаполнитьСписокРеквизитовДляФорматнойСтроки(СписокРеквизитов) Экспорт
	
	СписокРеквизитов.Добавить("Наименование",		"Наименование");
	СписокРеквизитов.Добавить("НаименованиеПолное",	"Полное наименование");
	СписокРеквизитов.Добавить("ВидНоменклатуры",	"Вид номенклатуры");
	СписокРеквизитов.Добавить("Артикул",			"Артикул");
	СписокРеквизитов.Добавить("ТипНоменклатуры",	"ТипНоменклатуры");

КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеДляПечатнойФормыКарточкаНоменклатуры(МассивОбъектов, ПараметрыПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.НаименованиеПолное КАК ТекстЗаголовка,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Номенклатура.Производитель КАК Производитель,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.Описание КАК Описание,
	|	Номенклатура.ФайлКартинки.Ссылка КАК КартинкаНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.НаименованиеПолное КАК НаименованиеХарактеристики,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО ХарактеристикиНоменклатуры.Владелец = ВТНоменклатура.Ссылка
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.НаименованиеПолное,
	|	ХарактеристикиНоменклатуры.Наименование
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО ХарактеристикиНоменклатуры.Владелец = ВТНоменклатура.ВидНоменклатуры
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Представление КАК НаименованиеУпаковки
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО УпаковкиНоменклатуры.Владелец = ВТНоменклатура.Ссылка
	|			И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Свойство.Заголовок КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО НоменклатураДополнительныеРеквизиты.Ссылка = ВТНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ДополнительныеРеквизиты КАК ВидыНоменклатурыРеквизитыБыстрогоОтбораНоменклатуры
	|		ПО НоменклатураДополнительныеРеквизиты.Ссылка = ВидыНоменклатурыРеквизитыБыстрогоОтбораНоменклатуры.Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", 			ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоХарактеристикам", ПакетРезультатовЗапроса[2]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоУпаковкам", 		ПакетРезультатовЗапроса[3]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоДопРеквизитам", 	ПакетРезультатовЗапроса[4]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументКарточкаНоменклатуры(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ДанныеПечатиХарактеристики = ДанныеДляПечати.РезультатПоХарактеристикам.Выгрузить();
	ДанныеПечатиУпаковки = ДанныеДляПечати.РезультатПоУпаковкам.Выгрузить();
	ДанныеПечатиДопРеквизиты = ДанныеДляПечати.РезультатПоДопРеквизитам.Выгрузить();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Номенклатура.ПФ_MXL_КарточкаНоменклатуры");
	
	ОбластьПараметровТемная  = Макет.ПолучитьОбласть("ОбластьПараметровТемная");
	ОбластьПараметровСветлая = Макет.ПолучитьОбласть("ОбластьПараметровСветлая");
	
	ПерваяКарточка = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ПерваяКарточка Тогда
			ПерваяКарточка = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПорядокПараметра = 1;
		
		// Вывод шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывод основных реквизитов номенклатуры
		Если ЗначениеЗаполнено(ДанныеПечати.Код) Тогда
			
			ОбластьМакета = ?(ПорядокПараметра%2 = 0, ОбластьПараметровТемная, ОбластьПараметровСветлая);
			СтруктураПараметровМакета = Новый Структура;
			СтруктураПараметровМакета.Вставить("ИмяПараметра", НСтр("ru='Код:'"));
			СтруктураПараметровМакета.Вставить("ЗначениеПараметра", ДанныеПечати.Код);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
			ОбластьЯчеек = ТабличныйДокумент.Вывести(ОбластьМакета);
			ПорядокПараметра = ПорядокПараметра + 1;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Артикул) Тогда
			
			ОбластьМакета = ?(ПорядокПараметра%2 = 0, ОбластьПараметровТемная, ОбластьПараметровСветлая);
			СтруктураПараметровМакета = Новый Структура;
			СтруктураПараметровМакета.Вставить("ИмяПараметра", НСтр("ru='Артикул:'"));
			СтруктураПараметровМакета.Вставить("ЗначениеПараметра", ДанныеПечати.Артикул);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
			ОбластьЯчеек = ТабличныйДокумент.Вывести(ОбластьМакета);
			ПорядокПараметра = ПорядокПараметра + 1;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.ТипНоменклатуры) Тогда
			Если ДанныеПечати.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга 
				ИЛИ ДанныеПечати.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				ОбластьМакета = ?(ПорядокПараметра%2 = 0, ОбластьПараметровТемная, ОбластьПараметровСветлая);
				СтруктураПараметровМакета = Новый Структура;
				СтруктураПараметровМакета.Вставить("ИмяПараметра", НСтр("ru='Тип:'"));
				СтруктураПараметровМакета.Вставить("ЗначениеПараметра", НСтр("ru='Услуга'"));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ПорядокПараметра = ПорядокПараметра + 1;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Производитель) Тогда
			
			ОбластьМакета = ?(ПорядокПараметра%2 = 0, ОбластьПараметровТемная, ОбластьПараметровСветлая);
			СтруктураПараметровМакета = Новый Структура;
			СтруктураПараметровМакета.Вставить("ИмяПараметра", НСтр("ru='Производитель:'"));
			СтруктураПараметровМакета.Вставить("ЗначениеПараметра", ДанныеПечати.Производитель);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ПорядокПараметра = ПорядокПараметра + 1;
			
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ДанныеПечати.ЕдиницаИзмерения) Тогда
			
			ОбластьМакета = ?(ПорядокПараметра%2 = 0, ОбластьПараметровТемная, ОбластьПараметровСветлая);
			СтруктураПараметровМакета = Новый Структура;
			СтруктураПараметровМакета.Вставить("ИмяПараметра", НСтр("ru='Единица измерения:'"));
			СтруктураПараметровМакета.Вставить("ЗначениеПараметра", ДанныеПечати.ЕдиницаИзмерения);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ПорядокПараметра = ПорядокПараметра + 1;
			
		КонецЕсли;
				
		// Вывод дополнительных реквизитов
		Если ДанныеПечатиДопРеквизиты.Количество() <> 0 Тогда
			Для каждого РеквизитОтбора Из ДанныеПечатиДопРеквизиты Цикл
				
				ОбластьМакета = ?(ПорядокПараметра%2 = 0, ОбластьПараметровТемная, ОбластьПараметровСветлая);
				СтруктураПараметровМакета = Новый Структура;
				СтруктураПараметровМакета.Вставить("ИмяПараметра", Строка(РеквизитОтбора.Свойство) + ":");
				СтруктураПараметровМакета.Вставить("ЗначениеПараметра", РеквизитОтбора.Значение);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ПорядокПараметра = ПорядокПараметра + 1;
				
			КонецЦикла;
		КонецЕсли;
		
		// Вывод картинки
		Если ЗначениеЗаполнено(ДанныеПечати.КартинкаНоменклатуры) Тогда
			КартинкаНоменклатуры = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеПечати.КартинкаНоменклатуры);
			
			Рисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
			Рисунок.Верх = 15; 
			Рисунок.Высота = 75; 
			Рисунок.Ширина = 75; 
			Рисунок.Лево = 100; 
			Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			
			Если ТипЗнч(КартинкаНоменклатуры) = Тип("Картинка") Тогда
				Рисунок.Картинка = КартинкаНоменклатуры;
			ИначеЕсли ТипЗнч(КартинкаНоменклатуры) = Тип("ДвоичныеДанные") Тогда
				Рисунок.Картинка = Новый Картинка(КартинкаНоменклатуры);
			КонецЕсли; 
		КонецЕсли;
		
		// Вывод описания
		Если ЗначениеЗаполнено(ДанныеПечати.Описание) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьОписание");
			СтруктураПараметровМакета = Новый Структура;
			СтруктураПараметровМакета.Вставить("Описание", ДанныеПечати.Описание);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		// Вывод характеристик
		Если ДанныеПечатиХарактеристики.Количество() <> 0 И ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры") Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьХарактеристики");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			Для каждого Характеристика из ДанныеПечатиХарактеристики Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаХарактеристики");
				СтруктураПараметровМакета = Новый Структура;
				НаименованиеХарактеристики = ?(ЗначениеЗаполнено(Характеристика.НаименованиеХарактеристики), Характеристика.НаименованиеХарактеристики, Характеристика.Наименование); 
				СтруктураПараметровМакета.Вставить("НаименованиеХарактеристики", " • " + НаименованиеХарактеристики);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		// Вывод упаковок
		Если ДанныеПечатиУпаковки.Количество() <> 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьУпаковки");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			Для каждого Упаковка из ДанныеПечатиУпаковки Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаУпаковки");
				СтруктураПараметровМакета = Новый Структура;
				СтруктураПараметровМакета.Вставить("НаименованиеУпаковки", " • " + Упаковка.НаименованиеУпаковки);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКарточкиНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КАРТОЧКАНОМЕНКЛАТУРЫ";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыКарточкаНоменклатуры(МассивОбъектов, ПараметрыПечати);
	ЗаполнитьТабличныйДокументКарточкаНоменклатуры(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ОчиститьЗначенияСвойств(Объект,Свойства)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Свойства);
	
	Для Каждого Свойство Из МассивСтрок Цикл
		Объект[Свойство] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПустыхСвойств(Приемник, Источник)
	
	Для каждого КлючЗначение Из Источник Цикл
		Если (ТипЗнч(Приемник[КлючЗначение.Ключ]) = Тип("Булево")
			И Не Приемник[КлючЗначение.Ключ])
			Или Не ЗначениеЗаполнено(Приемник[КлючЗначение.Ключ]) Тогда
			Приемник[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли