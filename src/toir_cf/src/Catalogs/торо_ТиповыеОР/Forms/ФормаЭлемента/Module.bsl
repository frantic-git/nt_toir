////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	
	СоответствиеСписков = Новый Соответствие;
	СоответствиеСписков.Вставить("СписокОР", "Справочник.торо_ОбъектыРемонта");
	торо_МультиязычностьСервер.ПриСозданииНаСервереОбработкаДинамическихСписков(ЭтотОбъект, СоответствиеСписков);
	
	ПравоРедактирования = ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные());
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	Контекст.Вставить("ПроизвольныйОбъект",         Ложь);
	Контекст.Вставить("ИмяРеквизитаНаборСвойств",   "НаборСвойствОР");
	Контекст.Вставить("УсловноеОформлениеЗаполнятьОбязательно",   Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	торо_УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойствОР);
	Если Объект.ЭтоГруппа Тогда
		Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьПоЗначениюКопирования(Параметры.ЗначениеКопирования);
	КонецЕсли;

	ОтображатьИзображение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ТОР_ОтображатьИзображение",
	Ложь);
	
	ФОИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	Если ФОИспользоватьФМ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипОбъекта) Тогда
			Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.Объект;
		КонецЕсли;
		
		Если Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
			ЗаполнитьДеревоОграниченийНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрСпискаСоставОР();
	УстановитьВидимостьДоступностьЭлементовФормы();
	ЗаполнитьДобавленныеКолонкиТаблиц();

	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("СписокИзмеряемыхПоказателей");
	ИменаТаблицФормы.Добавить("ПараметрыОповещенияПоСостояниямОР");
	ИменаТаблицФормы.Добавить("СписокПараметровНаработки");
	ИменаТаблицФормы.Добавить("ТабМаксимальныхЗначенийНаработки");
	ИменаТаблицФормы.Добавить("НормативныеРемонты");
	ИменаТаблицФормы.Добавить("ПредшествующиеРемонты");
	ИменаТаблицФормы.Добавить("ЗамещаемыеРемонты");
	ИменаТаблицФормы.Добавить("Запчасти");
	ИменаТаблицФормы.Добавить("НормативныеЗатратыПриТОиР");
	ИменаТаблицФормы.Добавить("ТабличноеПолеРемонтныеЦиклыОборудования");
	
	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	ЗаписатьИсходныеСтатусыНормативныхРемонтовИИзменитьЗаголовок();
	
	ПанельДопИнформацииПриСменеСтраницы(Элементы.ПанельДопИнформации, Элементы.ПанельДопИнформации.ТекущаяСтраница);
	
	торо_УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	
	// При создании на сервере не работает, поэтому здесь.
	Элементы.ФормаПечать.Видимость = НЕ Объект.ЭтоГруппа;
	Элементы.ФормаПечать1.Видимость = НЕ Объект.ЭтоГруппа;
	Если Элементы.ФормаПечать.Видимость И Элементы.ФормаПечать.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.ФормаПечать.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ФормаПечать1.Картинка = БиблиотекаКартинок.Печать;
		Элементы.ФормаПечать1.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "НаборСвойствОР");
	// Конец СтандартныеПодсистемы.Свойства
	торо_УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойствОР);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
	Иначе
		АдресКартинки = "";
	Конецесли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		торо_УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗаписанОбъектРемонта" Тогда
		Элементы.СписокОР.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" ИЛИ ИмяСобытия = "Запись_Файл" Тогда
		Модифицированность = Истина;
		
		СсылкаНаФайл = Неопределено;
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			Если Источник.Количество() > 0 Тогда
				СсылкаНаФайл = Источник[0];
			КонецЕсли;
		Иначе
			СсылкаНаФайл = Источник;
		КонецЕсли;
		
		Если ВыборИзображения И СсылкаНаФайл <> Неопределено Тогда
			Объект.ФайлКартинки = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеПараметровНаработки(Отказ);
	ПроверитьЗаполнениеИзмеряемыхПоказателей(Отказ);
	
	Если НЕ Объект.ЭтоГруппа Тогда

		ПроверитьЗаполнениеПредшествующихРемонтов(Отказ);
		
		// ТЧ НОРМАТИВНЫЕ РЕМОНТЫ
		Для Каждого ТекДанные Из Объект.НормативныеРемонты Цикл
			Если Не ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Вид ремонта"" в таблице ""Нормативные ремонты""!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НормативныеРемонты",, Отказ);
				Возврат;
			КонецЕсли;
			МассивСтрок = Объект.НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", ТекДанные.ВидРемонта));
			Если МассивСтрок.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид ремонта"" ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НормативныеРемонты",, Отказ);
				Возврат;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.НормативныйРемонт) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Технологическая карта"" для вида ремонта ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НормативныеРемонты",, Отказ);
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекДанные.СпособПланирования) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Способ планирования"" для вида ремонта ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НормативныеРемонты",, Отказ);
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекДанные.ГрафикРемонтныхРабот) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""График ремонтных работ"" для вида ремонта ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НормативныеРемонты",, Отказ);
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекДанные.СпособВыполнения) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Способ выполнения"" для вида ремонта ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НормативныеРемонты",, Отказ);
				Возврат;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекДанные.СпособУчетаДатыОтсчета) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Способ учета даты отсчета"" для вида ремонта ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.НормативныеРемонты",, Отказ);
				Возврат;
			КонецЕсли;	
			
			Если ТекДанные.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует") Тогда
				ТекстОшибки = ПроверитьЗаполнениеСтрокиНормативногоРемонта(ТекДанные);
				Если ТекстОшибки <> "" Тогда				
					ШаблонСообщения = НСтр("ru = 'Нельзя установить статус ""Действует"" для вида ремонта ""(%1)"": '") + ТекстОшибки;
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.НормативныеРемонты",,Отказ);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// ТЧ НОРМАТИВНЫЕ РЕМОНТЫ
		
		// ТЧ ПредшествующиеРемонты
		Для Каждого ТекДанные Из Объект.ПредшествующиеРемонты Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.ПредшествующийВидРемонта) Тогда
				ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Предшедствующий вид ремонта"" в таблице ""Предшедствующие ремонты""!'");
			Иначе
				СтрокиПоказателей = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта, ВидРемонта",ТекДанные.ПредшествующийВидРемонта, ТекДанные.ВидРемонта));
				Если СтрокиПоказателей.Количество() > 1 Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Предшедствующий вид ремонта"" ""(%1)"" в таблице ""Предшедствующие ремонты""!'");
					ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ПредшествующийВидРемонта);
				КонецЕсли;
			КонецЕсли;
			
			Если ТекстОшибки <> "" Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Объект.ПредшествующиеРемонты",, Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		// ТЧ ПредшествующиеРемонты
		
		// ТЧ ЗАМЕЩАЕМЫЕ РЕМОНТЫ
		Для Каждого ТекДанные Из Объект.ЗамещаемыеРемонты Цикл
			ТекстОшибки = "";
			Если НЕ ЗначениеЗаполнено(ТекДанные.ЗамещаемыйВидРемонта) Тогда
				ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Виды замещаемого ремонта"" в таблице ""Замещаемые ремонты""!'");
			ИначеЕсли ТекДанные.ЗамещаемыйВидРемонта = ТекДанные.ВидРемонта Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены замещающие ремонты ""(%1)"", выбранные в качестве замещаемого ""(%2)"" ремонта в таблице замещающие ремонты!'");
				ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ЗамещаемыйВидРемонта, ТекДанные.ВидРемонта);
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.СпособЗамещения) Тогда
				ТекстОшибки = НСтр("ru = 'Обнаружены незаполненные способы замещения в таблице замещаемые ремонты!.'");
			Иначе
				Строки = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта,ЗамещаемыйВидРемонта",ТекДанные.ВидРемонта,ТекДанные.ЗамещаемыйВидРемонта));
				Если Строки.Количество() > 1 Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид замещаемого ремонта"" ""(%1)"" для вида ремонта ""(%2)"" в таблице ""Замещаемые ремонты""!'");
					ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ЗамещаемыйВидРемонта, ТекДанные.ВидРемонта);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекДанные.ЗамещаемыйВидРемонта) Тогда
				МежремонтныйИнтервал = ВычислениеМежремонтногоИнтервала(ТекДанные);
				Если НЕ МежремонтныйИнтервал = Неопределено Тогда
					Если МежремонтныйИнтервал <= ТекДанные.НачальнаяГраница Тогда
						ШаблонСообщения = НСтр("ru = 'Некорректно заполнено поле ""Дней от начала"" вида замещаемого ремонта ""(%1)"" для вида ремонта ""(%2)""'");
						ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ЗамещаемыйВидРемонта, ТекДанные.ВидРемонта);
					ИначеЕсли МежремонтныйИнтервал <= ТекДанные.КонечнаяГраница Тогда
						ШаблонСообщения = НСтр("ru = 'Некорректно заполнено поле ""Дней от окончания"" вида замещаемого ремонта ""(%1)"" для вида ремонта ""(%2)""'");
						ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ЗамещаемыйВидРемонта, ТекДанные.ВидРемонта);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекстОшибки <> "" Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Объект.ЗамещаемыеРемонты",, Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		// ТЧ ЗАМЕЩАЕМЫЕ РЕМОНТЫ
		
		
		// ТЧ ТабличноеПолеРемонтныеЦиклыОборудования
		Для Каждого ТекДанные Из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
			Если НЕ ЗначениеЗаполнено(ТекДанные.ВидЦепочки) Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Вид цепочки"" в таблице ""Ремонтные циклы оборудования""!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТабличноеПолеРемонтныеЦиклыОборудования",,Отказ);
				Возврат;
			КонецЕсли;
			
			МассивСтрок = ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ВидЦепочки", ТекДанные.ВидЦепочки));
			Если МассивСтрок.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид цепочки"" ""(%1)"" в таблице ""Ремонтные циклы оборудования""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидЦепочки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТабличноеПолеРемонтныеЦиклыОборудования",, Отказ);
				Возврат;
			КонецЕсли;
			
			Если Не ПроверитьПересеченияНаСервере(ТекДанные.ВидЦепочки) Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		// ТЧ ТабличноеПолеРемонтныеЦиклыОборудования	
	
		// ТЧ Запчасти
		ФОХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
		Для Каждого Текданные Из Объект.Запчасти Цикл
			ТекстОшибки = "";
			Если ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
				ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Номенклатура"" в таблице ""Запчасти""!'");
			ИначеЕсли ТекДанные.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")
				И ТекДанные.ХарактеристикиИспользуются И ФОХарактеристикиИспользуются Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Характеристика"" для номенклатуры ""(%1)"" в таблице ""Запчасти!""'");
				ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Номенклатура);
			Иначе
				СтруктураПараметр = Новый Структура;
				СтруктураПараметр.Вставить("Номенклатура", ТекДанные.Номенклатура);
				СтруктураПараметр.Вставить("Характеристика", ТекДанные.Характеристика);
				
				СтрокиНоменклатуры = Объект.Запчасти.НайтиСтроки(СтруктураПараметр);
				Если СтрокиНоменклатуры.Количество() > 1 Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Номенклатура"" ""(%1)"" в таблице ""Запчасти""!'");
					ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Номенклатура);
				ИначеЕсли ТекДанные.Количество = 0 Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Кол-во"" для номенклатуры ""(%1)"" в таблице ""Запчасти""!'");
					ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Номенклатура);
				КонецЕсли;
			КонецЕсли;
			
			Если ТекстОшибки = "" Тогда
				МассивСтрок = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
					ТекДанные.Номенклатура, ТекДанные.Характеристика));
				
				МаксКол = 0;
				
				Для каждого Элем Из МассивСтрок Цикл
					Если Элем.Количество > МаксКол Тогда
						МаксКол = Элем.Количество;
						ВР = Элем.ВидРемонта;
					КонецЕсли;
				КонецЦикла;
				
				Если МаксКол > ТекДанные.Количество Тогда
					Если ЗначениеЗаполнено(ВР) Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для вида ремонта ""%2"" больше, чем количество в составе объекта ремонта.'"),МаксКол,ВР);
					Иначе
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для незаполненного вида ремонта больше, чем количество в составе объекта ремонта.'"),МаксКол);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекстОшибки <> "" Тогда
				#Если НЕ ВебКлиент Тогда
					Отказ = Истина;
				#КонецЕсли
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Объект.Запчасти");
				Возврат;
			КонецЕсли;
		КонецЦикла;
		// ТЧ Запчасти	
		
		// ТЧ НормативныеЗатратыПриТОиР
		Для Каждого ТекДанные Из Объект.НормативныеЗатратыПриТОиР Цикл
			
			Отбор = Новый Структура("Номенклатура, Характеристика", ТекДанные.Номенклатура, Текданные.Характеристика);
			ТекДанныеЗапчастей = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(Отбор)[0];
			
			ТекстОшибки = "";

			Если ТекДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") Тогда
				ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Вид ремонта"" в таблице ""Нормативные затраты при ТОиР""!'");
			Иначе
				Если ТекДанные.Количество = 0 Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Кол-во"" вида ремонта ""(%1)"" в таблице ""Нормативные затраты при ТОиР""!'");
					ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
				Иначе
					
					Если ТекДанныеЗапчастей <> Неопределено Тогда
						
						СтруктураПараметр = Новый Структура("ВидРемонта, Номенклатура, Характеристика");
						ЗаполнитьЗначенияСвойств(СтруктураПараметр,ТекДанные);					
						СтрокиНоменклатуры = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(СтруктураПараметр);
						
						Если СтрокиНоменклатуры.Количество() > 1 Тогда
							ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид ремонта"" ""(%1)"" в таблице ""Нормативные затраты при ТОиР""!'");
							ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
						КонецЕсли;
					
						Если ТекДанные.Количество > ТекДанныеЗапчастей.Количество Тогда
							ТекстОшибки = СтрШаблон(НСтр("ru = 'Количество затрат при ТОиР (%1) для (%2) при виде ремонта (%3) больше, чем количество в составе объекта ремонта.'"),ТекДанные.Количество, ТекДанные.Номенклатура, ТекДанные.ВидРемонта);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
			Если ТекстОшибки <> "" Тогда
				#Если НЕ ВебКлиент Тогда
					Отказ = Истина;
				#КонецЕсли
					
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Объект.НормативныеЗатратыПриТОиР");
				Возврат;
			КонецЕсли;

		КонецЦикла;
		// ТЧ НормативныеЗатратыПриТОиР
		
		// ТЧ ТаблицаОценокРМ
		Для Каждого ТекДанные Из ТаблицаОценокРМ Цикл
			Если Не ЗначениеЗаполнено(ТекДанные.Период) Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Период"" в таблице ""Оценка РМ""!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТаблицаОценокРМ",, Отказ);
				Возврат;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Вид ремонта"" в таблице ""Оценка РМ""!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТаблицаОценокРМ",, Отказ);
				Возврат;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекДанные.ВероятностьВыходаИзСтроя) Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Вероятность выхода из строя"" в таблице ""Оценка РМ""!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТаблицаОценокРМ",, Отказ);
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекДанные.Ущерб) Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено незаполненное поле ""Ущерб"" в таблице ""Оценка РМ""!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ТаблицаОценокРМ",, Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		// ТЧ ТаблицаОценокРМ
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)	
	Если Не Отказ Тогда
		Если (МодифицированностьНормРемонтов Или МодифицированностьЗамещаемыхРемонтов Или  МодифицированностьПредшествующихРемонтов)
			И ЗначениеЗаполнено(ВРНачалоЦикла) Тогда
			
			Элементы.Перерасчитать.Доступность 	= Ложь;
			Элементы.Построить.Доступность 		= Ложь;
			Элементы.Настройки.Доступность 		= Ложь; 			
			
			ВРНачалоЦикла = Неопределено;
			ПлановыйГрафикРаботы = Неопределено;
			торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
			ОчиститьПолеТабличногоДокумента();
			Элементы.НадписьКоличествоРемонтовСтруктураРЦ.Заголовок		= НСтр("ru = 'Всего: '");
			
			ТекстСообщения = НСтр("ru = 'Данные на вкладке <Структура ремонтного цикла> были очищены, так как нормативы изменены.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") 
		И Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		
		ТекущийОбъект.Изготовитель = Справочники.Контрагенты.ПустаяСсылка();
		
		Структура = Новый Структура("Свойства_ИспользоватьДопРеквизиты");
		ЗаполнитьЗначенияСвойств(Структура, ЭтаФорма);
		
		Если ТипЗнч(Структура.Свойства_ИспользоватьДопРеквизиты) = Тип("Булево") Тогда
			Для каждого Строка Из ЭтаФорма.Свойства_ЗначенияДополнительныхРеквизитов Цикл
				Строка.Значение             = Неопределено;
				Строка.ЗаполнятьОбязательно = Ложь;
			КонецЦикла;				
		КонецЕсли;
		
		МодифицированностьЗапчастей = ТекущийОбъект.Запчасти.Количество() > 0;
		МодифицированностьНормативныхЗатратПоЗапчастям = ТекущийОбъект.НормативныеЗатратыПриТОиР.Количество() > 0;
		ТекущийОбъект.Запчасти.Очистить();
		ТекущийОбъект.НормативныеЗатратыПриТОиР.Очистить();
		
		МодифицированностьРемЦиклов = ТабличноеПолеРемонтныеЦиклыОборудования.Количество() > 0;
		ТабличноеПолеРемонтныеЦиклыОборудования.Очистить();
		
		ТаблицаОценокРММодифицированность = ТаблицаОценокРМ.Количество() > 0;
		ТаблицаОценокРМ.Очистить();
		РСНЗТаблицаОценокРМ.Очистить();
		
	КонецЕсли;

	Если НЕ Объект.ЭтоГруппа Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
	Для Каждого НормРемонт Из ТекущийОбъект.НормативныеРемонты.НайтиСтроки(Новый Структура("Статус", Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ПустаяСсылка())) Цикл
		НормРемонт.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке;
	КонецЦикла;
	
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста") 
	  И (МодифицированностьДопРеквизитов ИЛИ МодифицированностьОграничений) Тогда
		торо_РаботаСФункциональнымиМестами.ДобавитьОбъектДляПроверки(ТекущийОбъект.Ссылка);
		МодифицированностьДопРеквизитов = Ложь;
		МодифицированностьОграничений = Ложь;
	КонецЕсли;	
		
	Если МодифицированностьНормРемонтов Тогда
		
		СтруктураВозврата = ПолучитьОРиВРИзТиповогоОР2(ТекущийОбъект.Ссылка, "НормативныеРемонты","торо_НормативныеРемонтыОборудования", ТекущийОбъект.НормативныеРемонты);
		НаборЗаписей = РегистрыСведений.торо_НормативныеРемонтыОборудования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
		
		НомерСтрокиТЧ = 0;
		Для Каждого Стр Из ТекущийОбъект.НормативныеРемонты Цикл
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			
			Если Не ЗначениеЗаполнено(Стр.ВидРемонта) Или Не ЗначениеЗаполнено(Стр.НормативныйРемонт) Или Не ЗначениеЗаполнено(Стр.СпособПланирования) 
				Или Не ЗначениеЗаполнено(Стр.ГрафикРемонтныхРабот) Или Не ЗначениеЗаполнено(Стр.СпособВыполнения) 
				Тогда
				Отказ = Истина;
			ИначеЕсли Стр.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует Тогда
				Для Каждого Элем Из СтруктураВозврата Цикл
					Если Элем.ВидРемонта = Стр.ВидРемонта Тогда
						
						СтрокаНабора = НаборЗаписей.Добавить();	
						
						ЗаполнитьЗначенияСвойств(СтрокаНабора, Элем);
						ЗаполнитьЗначенияСвойств(СтрокаНабора, Стр);
						
						СтрокаНабора.ТиповойОР = ТекущийОбъект.Ссылка; 
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла; 
		
		НаборЗаписей.Записать(Истина);
		
		Если Не Отказ Тогда
		    МодифицированностьНормРемонтов = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МодифицированностьИзмеряемыхПоказателей Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекущийОбъект.Ссылка);		
		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаПоказателя из СписокИзмеряемыхПоказателей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаПоказателя.ОбъектРемонта) Тогда
				СтрокаПоказателя.ОбъектРемонта = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		МассивСтрок = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущийОбъект.Ссылка));
		НаборЗаписей.Загрузить(СписокИзмеряемыхПоказателей.Выгрузить(МассивСтрок));
		
		НаборЗаписей.Записать();
		
		// Удалим из регистра строки, которые были удалены для конкретных ОР.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта,
		|	ИзмеряемыеПоказателиОбъектовРемонта.Показатель КАК Показатель
		|ИЗ
		|	(ВЫБРАТЬ
		|		торо_ОбъектыРемонта.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|	ГДЕ
		|		торо_ОбъектыРемонта.ТиповойОР = &ТиповойОР) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК ИзмеряемыеПоказателиОбъектовРемонта
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК ИзмеряемыеПоказателиТиповыхОР
		|			ПО ИзмеряемыеПоказателиОбъектовРемонта.Показатель = ИзмеряемыеПоказателиТиповыхОР.Показатель
		|				И (ИзмеряемыеПоказателиТиповыхОР.ОбъектРемонта = &ТиповойОР)
		|		ПО (ВложенныйЗапрос.Ссылка = (ВЫРАЗИТЬ(ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта)))
		|ГДЕ
		|	ИзмеряемыеПоказателиОбъектовРемонта.Удален
		|	И ИзмеряемыеПоказателиТиповыхОР.Показатель ЕСТЬ NULL 
		|ИТОГИ ПО
		|	Показатель";
		Запрос.УстановитьПараметр("ТиповойОР",ТекущийОбъект.Ссылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаПоказатели = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоказатели.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Показатель.Установить(ВыборкаПоказатели.Показатель);
				НаборЗаписей.ДополнительныеСвойства.Вставить("НеОбновлятьРегистрНаличиеНормативов", Истина);
				НаборЗаписей.Прочитать();
				ВыборкаДетЗаписи = ВыборкаПоказатели.Выбрать();
				МассивУдаляемых = Новый Массив;
				Для Каждого Запись Из НаборЗаписей Цикл
					Если ВыборкаДетЗаписи.НайтиСледующий(Новый Структура("ОбъектРемонта,Показатель",Запись.ОбъектРемонта,Запись.Показатель)) Тогда
						МассивУдаляемых.Добавить(Запись);
					КонецЕсли;
					ВыборкаДетЗаписи.Сбросить();
				КонецЦикла;
				Для Каждого ЭлМассива Из МассивУдаляемых Цикл
					НаборЗаписей.Удалить(ЭлМассива);
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		
		МодифицированностьИзмеряемыхПоказателей = Ложь;
		
	КонецЕсли;
	
	// Нет проверки на использование ФО, так как модифицированность не поднимется, если ФО отключена.
	Если МодифицированностьПараметровОповещенияОСостоянииОР Тогда
		
		Для каждого Строка из ПараметрыОповещенияПоСостояниямОР Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			НаборПараметровОповещения = РегистрыСведений.торо_ПараметрыОповещенияОСостоянииОборудования.СоздатьНаборЗаписей();
			НаборПараметровОповещения.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
			НайденныеСтроки = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(Новый Структура("ТиповойОР", Справочники.торо_ТиповыеОР.ПустаяСсылка()));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ТиповойОР = ТекущийОбъект.Ссылка;
			КонецЦикла;
			МассивСтрок = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(Новый Структура("ТиповойОР", ТекущийОбъект.Ссылка));
			НаборПараметровОповещения.Загрузить(ПараметрыОповещенияПоСостояниямОР.Выгрузить(МассивСтрок));			
			НаборПараметровОповещения.Записать();
			МодифицированностьПараметровОповещенияОСостоянииОР = Ложь;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать параметры оповещения о состоянии оборудования: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	
	Если МодифицированностьПредшествующихРемонтов ИЛИ МодифицированностьНормРемонтов Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
		
		СтруктураВозврата = ПолучитьОРиВРИзТиповогоОР2(ТекущийОбъект.Ссылка, "ПредшествующиеРемонты","торо_ПредшествующиеНормативныеРемонтыОборудования", ТекущийОбъект.ПредшествующиеРемонты); 
		ТЗПредшествующих = ПолучитьПредшествующиеИлиНормативные("ПредшествующийВидРемонта");
		
		Для каждого Стр Из ТЗПредшествующих Цикл
			Для каждого Элем Из СтруктураВозврата Цикл
				Если Элем.ВидРемонта = Стр.ВидРемонта Тогда
					
					СтрокаНабора = НаборЗаписей.Добавить();	
					ЗаполнитьЗначенияСвойств(СтрокаНабора, Элем);
					ЗаполнитьЗначенияСвойств(СтрокаНабора, Стр);
					СтрокаНабора.Приоритет = Элем.Приоритет;
					СтрокаНабора.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла; 
		
		НаборЗаписей.Записать(Истина);
		
		Если Не Отказ Тогда     			
			МодифицированностьПредшествующихРемонтов = Ложь;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МодифицированностьЗамещаемыхРемонтов ИЛИ МодифицированностьНормРемонтов Тогда
		СтруктураВозврата = ПолучитьОРиВРИзТиповогоОР2(ТекущийОбъект.Ссылка, "ЗамещаемыеРемонты","торо_ПараметрыЗамещенияПланированияРемонтныхРабот", ТекущийОбъект.ЗамещаемыеРемонты); 
		НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
		
		ТЗЗамещаемых = ПолучитьПредшествующиеИлиНормативные("ЗамещаемыйВидРемонта");
		
		Для каждого Стр Из ТЗЗамещаемых Цикл
			Для каждого Элем Из СтруктураВозврата Цикл
				Если Элем.ВидРемонта = Стр.ВидРемонта Тогда
					СтрокаНабора = НаборЗаписей.Добавить();	
					ЗаполнитьЗначенияСвойств(СтрокаНабора, Элем);
					ЗаполнитьЗначенияСвойств(СтрокаНабора, Стр);
					СтрокаНабора.Приоритет = Элем.Приоритет;
					СтрокаНабора.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла; 
		
		НаборЗаписей.Записать(Истина);
		Если Не Отказ Тогда
			МодифицированностьЗамещаемыхРемонтов = Ложь;		
		КонецЕсли;

	КонецЕсли;
	
	Если ТаблицаОценокРММодифицированность Тогда
		
		Для каждого Строка из РСНЗТаблицаОценокРМ Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ГруппаОбъектовРемонтов) Тогда
				Строка.ГруппаОбъектовРемонтов = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			ТаблицаЗначенийОценокРМ = РСНЗТаблицаОценокРМ.Выгрузить();
			МассивСтрокОценокРМ = ТаблицаЗначенийОценокРМ.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекущийОбъект.Ссылка));
			ТаблицаБуфер = ТаблицаЗначенийОценокРМ.Скопировать(МассивСтрокОценокРМ);
			
			НаборНормативов = РегистрыСведений.торо_РМРемонтов.СоздатьНаборЗаписей();
			НаборНормативов.Отбор.ГруппаОбъектовРемонтов.Установить(ТекущийОбъект.Ссылка);
			НаборНормативов.Загрузить(ТаблицаБуфер);
			НаборНормативов.Записать();
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать нормативы ремонтных работ: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьРемЦиклов Тогда
		
		Для каждого Строка из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ГруппаОбъектовРемонтов) Тогда
				Строка.ГруппаОбъектовРемонтов = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			ТаблицаЗначенийРемонтныеЦиклыОборудования = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
			МассивСтрокЦиклов = ТаблицаЗначенийРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекущийОбъект.Ссылка));
			ТаблицаБуфер = ТаблицаЗначенийРемонтныеЦиклыОборудования.Скопировать(МассивСтрокЦиклов);
			
			НаборРемонтныхЦикловОборудования = РегистрыСведений.торо_РемонтныеЦиклыОборудования.СоздатьНаборЗаписей();
			НаборРемонтныхЦикловОборудования.Отбор.ГруппаОбъектовРемонтов.Установить(ТекущийОбъект.Ссылка);
			НаборРемонтныхЦикловОборудования.Загрузить(ТаблицаБуфер);
			НаборРемонтныхЦикловОборудования.Записать();
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать фиксированные ремонтные циклы: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьПараметровНаработки Тогда
		
		Для каждого Строка из СписокПараметровНаработки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ТаблицаЗначенийПараметровНаработки = СписокПараметровНаработки.Выгрузить();
			МассивСтрокПараметров = ТаблицаЗначенийПараметровНаработки.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущийОбъект.Ссылка));
			ТаблицаБуфер = ТаблицаЗначенийПараметровНаработки.Скопировать(МассивСтрокПараметров);
			
			НаборПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборПараметровНаработки.Отбор.ОбъектРемонта.Установить(ТекущийОбъект.Ссылка);
			НаборПараметровНаработки.Загрузить(ТаблицаБуфер);
			НаборПараметровНаработки.Записать();
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать параметры наработки: '") + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если МодифицированностьМаксЗначНаработки Тогда
		
		ТабМаксЗнач = ТабМаксимальныхЗначенийНаработки.Выгрузить();
		ТабМаксЗнач.ЗаполнитьЗначения(ТекущийОбъект.Ссылка, "ОбъектРемонта");
		
		НаборКонтролируемыхПоказателей = РегистрыСведений.торо_МаксимальныеЗначенияНаработкиОР.СоздатьНаборЗаписей();
		НаборКонтролируемыхПоказателей.Отбор.ОбъектРемонта.Установить(ТекущийОбъект.Ссылка);
		НаборКонтролируемыхПоказателей.Загрузить(ТабМаксЗнач);
		НаборКонтролируемыхПоказателей.Записать();		
		
	КонецЕсли;
	
	Если МодифицированностьЗапчастей ИЛИ МодифицированностьНормативныхЗатратПоЗапчастям Тогда
		ЗапчастиИНормЗатраты = ПолучитьЗапчастиИНормативныеЗатраты();
	КонецЕсли;
	
	Если МодифицированностьЗапчастей Тогда
		
		ПоОрам = ЗапчастиИНормЗатраты.Запчасти;
		Пока ПоОрам.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ПоОрам.ОбъектРемонта);
			
			НаборЗаписейУдаленные = РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ПоОрам.ОбъектРемонта);
			
			ДетЗаписи = ПоОРам.выбрать();
			
			масОшибок = Новый Массив;
			
			Пока ДетЗаписи.Следующий() Цикл
				
				нс = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ДетЗаписи);
				нс.Приоритет = Истина;
				
				Если ДетЗаписи.ЭтоТиповой Тогда
					нс.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
				
				Если ДетЗаписи.Удален Тогда
					нс.Приоритет = Ложь;
					нс.ТиповойОР = ТекущийОбъект.Ссылка;
					
					нсу = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(нсу, детЗаписи);
					нсу.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого текОшибка из масОшибок Цикл
				ОбщегоНазначения.СообщитьПользователю(текОшибка,,,, Отказ);
			КонецЦикла;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			НаборЗаписей.Записать();			
			НаборЗаписейУдаленные.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МодифицированностьЗапчастей ИЛИ МодифицированностьНормативныхЗатратПоЗапчастям	Тогда
		
		ПоОрам = ЗапчастиИНормЗатраты.НормативныеЗатраты;
		Пока ПоОрам.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ПоОрам.ОбъектРемонта);
			
			НаборЗаписейУдаленные = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ПоОрам.ОбъектРемонта);
			
			ДетЗаписи = ПоОРам.выбрать();
			Пока ДетЗаписи.Следующий() Цикл
				
				нс = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ДетЗаписи);
				нс.Приоритет = Истина;
				
				Если ДетЗаписи.ЭтоТиповой Тогда
					нс.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
				
				Если ДетЗаписи.Удален Тогда
					нс.Приоритет = Ложь;
					нс.ТиповойОР = ТекущийОбъект.Ссылка;
					
					нсу = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(нсу, детЗаписи);
					нсу.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
				
			КонецЦикла;
			НаборЗаписей.Записать();			
			НаборЗаписейУдаленные.Записать();
			
		КонецЦикла;		
		
	КонецЕсли;
	
	Если ФОИспользоватьДопРеквизиты Тогда
		торо_УправлениеСвойствами.ЗаписатьДопРеквизитыСведенияНабора(ЭтаФорма, Отказ, "ДопРеквизит", ТекущийОбъект.НаборСвойствОР);
	КонецЕсли;
	
	ТаблицаОценокРММодифицированность = Ложь;
	МодифицированностьНормативныхЗатратПоЗапчастям = Ложь;
	МодифицированностьЗапчастей = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если НЕ Объект.ЭтоГруппа Тогда
		торо_УправлениеСвойствами.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, "НаборСвойствОР");
	КонецЕсли;
	
	УстановитьПараметрСпискаСоставОР();
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаписатьИсходныеСтатусыНормативныхРемонтовИИзменитьЗаголовок();	
	
	ПараметрыОповещения = Новый Структура("ТиповойОбъект", Объект.Ссылка);
	Оповестить("ИЗМЕНЕН_ТИПОВОЙ_ОБЪЕКТ", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ТиповыеОРПрисоединенныеФайлы") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Объект.ФайлКартинки = ВыбранноеЗначение;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		КонецЕсли;

	Иначе
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере(ОтображатьИзображение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(ОтображатьИзображение)
	
	ХранилищеОбщихНастроек.Сохранить("НастройкиТОиР", "ТОР_ОтображатьИзображение", ОтображатьИзображение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборЗапчастей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",        Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                 Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                   Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",          Истина);
	ПараметрыФормы.Вставить("Заголовок",                                НСтр("ru = 'Подбор запчастей'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                     ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                 Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				"ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",					Новый Массив(Элементы.ЗапчастиНоменклатура.ПараметрыВыбора[0].Значение));
	ПараметрыФормы.Вставить("Склад", ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад"));
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Построить(Команда)
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		торо_РасчетСтруктурыРемонтногоЦиклаКлиент.НарисоватьМнемосхему(ЭтаФорма);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтролируемыхПоказателей(Команда)
	
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из СписокИзмеряемыхПоказателей Цикл
		СписокОтбора.Добавить(Строка.Показатель);
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура();
	ПараметрыФормыСтруктура.Вставить("КлючНазначенияИспользования", "ОбъектыРемонта");
	ПараметрыФормыСтруктура.Вставить("СписокОтбора", СписокОтбора);
	ПараметрыФормыСтруктура.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормыСтруктура, Элементы.СписокИзмеряемыхПоказателей, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИсторию(Команда)
	Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка = НЕ Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка;
	ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыРемонтовИзНормативов(Команда)
	Действует = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует");
	Для Каждого ТекСтрока Из Объект.НормативныеРемонты Цикл
		Если ТекСтрока.Статус = Действует Тогда
			ВведенныеОценки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта, Период", ТекСтрока.ВидРемонта, НачалоМесяца(ТекущаяДата())));
			Если ВведенныеОценки.Количество() = 0 Тогда 
				НС = РСНЗТаблицаОценокРМ.Добавить();
				НС.Период = НачалоМесяца(ТекущаяДата());
				НС.ВидРемонта = ТекСтрока.ВидРемонта;
				НС.ГруппаОбъектовРемонтов = Объект.Ссылка;
				НС.Сезон = ПредопределенноеЗначение("Справочник.торо_Сезоны.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	
	ТаблицаОценокРММодифицированность = Истина;
	Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	МассивРемонтов = Новый Массив;
	
	Для каждого Стр из ЗапланированныеРемонты Цикл
		СтруктураПараметр = Новый Структура("ВидРемонтныхРабот, Выбран, Цвет, ЦветТекста, Шрифт");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр,Стр);
		МассивРемонтов.Добавить(СтруктураПараметр);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыНастроек", ЭтаФорма);
	ОткрытьФорму("Справочник.торо_ТиповыеОР.Форма.ФормаВРВизуализация", Новый Структура("МассивРемонтов, Нормировать",МассивРемонтов, Нормировать),ЭтаФорма,ЭтаФорма,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Перерасчитать(Команда)
	
	МассивНормативныхРемонтов = торо_РасчетСтруктурыРемонтногоЦикла.ПолучитьТаблицуНормативныхРемонтов(Объект.Ссылка);
	
	СписокВидовРемонтов = Новый СписокЗначений();
	Для каждого Строка из МассивНормативныхРемонтов Цикл
		СписокВидовРемонтов.Добавить(Строка.ВидРемонта,,Истина);
	КонецЦикла;
	
	Если СписокВидовРемонтов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно рассчитать структуру ремонтного цикла, так как не заполнены нормативные ремонты'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("МассивНормативныхРемонтов", МассивНормативныхРемонтов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерерасчитатьЗавершение", ЭтотОбъект, ДопПараметры);
	СписокВидовРемонтов.ПоказатьОтметкуЭлементов(ОписаниеОповещения, НСтр("ru = 'Выберите виды ремонтных работ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если МожноПечататьВизуализацию Тогда
		ТабДок = ПечатьСруктурыРЦНаСервере();
		КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("СтруктураРемонтногоЦикла");
		КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
		УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм);
	Иначе
		ТекстСообщения = НСтр("ru = 'Невозможно распечатать структуру ремонтного цикла, так как она еще не построена!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ДобавитьИерархию(Команда)
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора",, Элементы.ДеревоОграничений);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОграничение(Команда)
	ОткрытьФорму("Справочник.торо_ОграниченияНаХарактеристикиОборудования.ФормаВыбора",, Элементы.ДеревоОграничений);
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Для копирования необходимо выполнить запись данных.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Скопировать_ПослеВопросаОЗаписи", ЭтотОбъект);
		МассивКнопок = Новый СписокЗначений;
		МассивКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать и скопировать'"));
		МассивКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, МассивКнопок,,КодВозвратаДиалога.Да);
	Иначе
		СкопироватьЗавершение();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Скопировать_ПослеВопросаОЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			СкопироватьЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗавершение()
	
	Если Объект.ЭтоГруппа Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", Объект.Ссылка);
		ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаГруппы", ПараметрыФормы, ЭтаФорма); 
	Иначе
		ОтказУстановлен = Ложь;
		торо_РаботаСИерархией20Клиент.ПередКопированиемТиповогоОбъектаРемонта(ЭтаФорма, Объект.Ссылка, ОтказУстановлен);
		
		Если НЕ ОтказУстановлен Тогда
			ПараметрыФормы = Новый Структура("ЗначениеКопирования", Объект.Ссылка);
			ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаОбъекта", ПараметрыФормы, ЭтаФорма); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	торо_УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТипОбъекта) Тогда
		ПроверитьТипыСоставаСпискаОР();
		ТипОбъектаПриИзменении_Сервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьПредыдущийТипОбъекта();
КонецПроцедуры

&НаКлиенте
Процедура ПанельДопИнформацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаПоказателиЭксплуатации Тогда
		
		ТекСтраницаПараметр = Элементы.СтраницыПоказателиЭксплуатации.ТекущаяСтраница;
		Если ТекСтраницаПараметр = Неопределено Тогда
			ТекСтраницаПараметр = Элементы.СтраницыПоказателиЭксплуатации.ПодчиненныеЭлементы[0];
		КонецЕсли;
		СтраницыПоказателиЭксплуатацииПриСменеСтраницы(Элементы.СтраницыПоказателиЭксплуатации, ТекСтраницаПараметр);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНормативыПланирования Тогда
		
		ТекСтраницаПараметр = Элементы.СтраницыНормативыПланирования.ТекущаяСтраница;
		Если ТекСтраницаПараметр = Неопределено Тогда
			ТекСтраницаПараметр = Элементы.СтраницыНормативыПланирования.ПодчиненныеЭлементы[0];
		КонецЕсли;
		СтраницыНормативыПланированияПриСменеСтраницы(Элементы.СтраницыНормативыПланирования, ТекСтраницаПараметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыНормативыПланированияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаОценкаРМ Тогда
		
		ЗаполнитьОценкиРМ();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаФиксированныеРемонтныеЦиклы Тогда
		
		Если НЕ МодифицированностьРемЦиклов Тогда
			ОбновитьФиксированныеРемонтныеЦиклы(Объект, ТабличноеПолеРемонтныеЦиклыОборудования);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВизуализацияРемонтногоЦикла Тогда
		
		ИнициализироватьЗакладкуСтруктураРемонтногоЦикла();
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПоказателиЭксплуатацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаКонтролируемыеПоказатели Тогда
		
		Если НЕ МодифицированностьИзмеряемыхПоказателей Тогда
			ОбновитьИзмеряемыеПоказатели(Объект, СписокИзмеряемыхПоказателей);
		КонецЕсли;
		
		Если НЕ МодифицированностьПараметровОповещенияОСостоянииОР Тогда
			МассивСтруктурПараметровОповещения = ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(Объект.Ссылка, Объект.Родитель);
			ПараметрыОповещенияПоСостояниямОР.Очистить();
			Для Каждого ЭлементМассива Из МассивСтруктурПараметровОповещения Цикл
				
				ЗаполнитьЗначенияСвойств(ПараметрыОповещенияПоСостояниямОР.Добавить(),ЭлементМассива);
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНаработка Тогда
		
		Если Не МодифицированностьПараметровНаработки Тогда
			
			СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработки(Объект.Ссылка, Объект.Родитель);
			
			СписокПараметровНаработки.Очистить();
			
			Для каждого Элем Из СтруктураВозврата Цикл
				НС = СписокПараметровНаработки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не МодифицированностьМаксЗначНаработки Тогда
			
			СтруктураВозврата = ОбновитьМаксимальныеЗначенияПоказателейНаработки(Объект.Ссылка);
			
			ТабМаксимальныхЗначенийНаработки.Очистить();
			Для каждого Элем Из СтруктураВозврата Цикл
				НС = ТабМаксимальныхЗначенийНаработки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаПриИзменении(Элемент)
	Если НЕ ВРНачалоЦикла = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") И НЕ ПлановыйГрафикРаботы = ПредопределенноеЗначение("Справочник.Календари.ПустаяСсылка") Тогда
		Элементы.Перерасчитать.Доступность 	= Истина;
		Элементы.Построить.Доступность 		= Истина;
		Элементы.Настройки.Доступность 		= Истина;
	Иначе 
		Элементы.Перерасчитать.Доступность 	= Ложь;
		Элементы.Построить.Доступность 		= Ложь;
		Элементы.Настройки.Доступность 		= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПлановыйГрафикРаботыПриИзменении(Элемент)
	Если НЕ ВРНачалоЦикла = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") И НЕ ПлановыйГрафикРаботы = ПредопределенноеЗначение("Справочник.Календари.ПустаяСсылка") Тогда
		Элементы.Перерасчитать.Доступность 	= Истина;
		Элементы.Построить.Доступность 		= Истина;
		Элементы.Настройки.Доступность 		= Истина;
	Иначе 
		Элементы.Перерасчитать.Доступность 	= Ложь;
		Элементы.Построить.Доступность 		= Ложь;
		Элементы.Настройки.Доступность 		= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтраница = Элементы.ПанельДопИнформации.ТекущаяСтраница;
	
	Если МодифицированностьНормРемонтов ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ДопПараметры = Новый Структура("ТекущаяСтраница", ТекущаяСтраница);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВРНачалоЦиклаНачалоВыбора_ПослеВопросаОЗаписи", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Для продолжения необходимо записать информацию об объекте. Записать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		
		СписокЗначВР = Новый СписокЗначений;
		Для каждого Элем Из Объект.НормативныеРемонты Цикл
			Если Не Элем.НеУчаствуетВПланировании И СписокЗначВР.НайтиПоЗначению(Элем.ВидРемонта) = Неопределено Тогда
				СписокЗначВР.Добавить(Элем.ВидРемонта);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокЗначВР.Количество() > 0 Тогда
			СписокЗначВР.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВРНачалоЦиклаНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Элемент", Элемент)), НСтр("ru = 'Выберите вид ремонта'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Нормативные ремонты отсутствуют!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВРНачалоЦикла = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ВРНачалоЦиклаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМнемосхемыВыбор(Элемент)
	Если НЕ Элемент.ТекущийЭлемент = Неопределено Тогда
		Масс = СоответствиеИндексаИНомераКолонки.НайтиСтроки(Новый Структура("ТекЭлементИмя", Элемент.ТекущийЭлемент.Имя));
		Если Масс.Количество() = 0 Тогда
			Масс = СоответствиеИндексаИНомераКолонки.НайтиСтроки(Новый Структура("ТекЭлементИмя", Элемент.ТекущийЭлемент.КонецЭлемент.Имя));
			СтруктураНомерКолонкиСдвиг = Масс[0];
		Иначе
			СтруктураНомерКолонкиСдвиг = Масс[0];
		КонецЕсли;
		НомерКолонки = СтруктураНомерКолонкиСдвиг.НомерКолонки;
		СдвигСтрок = СтруктураНомерКолонкиСдвиг.СдвигСтрок;
		ИндексСтроки = 9 + КолонкиНаработки.Количество();
		Элементы.ПолеТД.ТекущаяОбласть = ПолеТД.Область(3+СдвигСтрок,НомерКолонки,6 + ИндексСтроки - 7+СдвигСтрок);
		ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТД;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
	МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставОР

&НаКлиенте
Процедура Подбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Подбор_ПослеВопросаОЗаписи", ЭтотОбъект), НСтр("ru = 'Для добавления объектов ремонта в состав типового его необходимо записать. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;

	Подбор_Завершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОРВСостав(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьОРВСостав_ПослеВопросаОЗаписи", ЭтотОбъект), НСтр("ru = 'Для добавления объектов ремонта в состав типового его необходимо записать. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДобавитьОРВСостав_Завершение();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОРОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивВыбранныхЗначений = Новый Массив;
	ИзменитьНаправлениеИИзготовителя = Неопределено;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ОбъектРемонта") Тогда
			МассивВыбранныхЗначений = ВыбранноеЗначение.ОбъектРемонта;
		КонецЕсли;
		Если ВыбранноеЗначение.Свойство("ИзменитьНаправлениеИИзготовителя") Тогда
			ИзменитьНаправлениеИИзготовителя = ВыбранноеЗначение.ИзменитьНаправлениеИИзготовителя;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивВыбранныхЗначений = ВыбранноеЗначение;
	Иначе
		МассивВыбранныхЗначений.Добавить(ВыбранноеЗначение);
	КонецЕсли;
		
	Если ИспользоватьФМ() Тогда
		ТипСовпадаетСТипомТОР = ПроверитьТипыДобавляемыхОР(МассивВыбранныхЗначений);
		Если НЕ ТипСовпадаетСТипомТОР Тогда
			ТекстСообщения = НСтр("ru = 'В состав типового могут входить только объекты ремонта с таким же типом!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивВыбранныхЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ДублиСредиЦепочекРЦ(МассивВыбранныхЗначений) Тогда
		Возврат;
	КонецЕсли; 
	
	МассивСтруктурЗначений = ПолучитьОбъектыРемонтаСТиповыми(МассивВыбранныхЗначений);
	МассивСтруктурЗначенийОчищенный = Новый Массив;
	ЕстьУжеСТиповым = Ложь;
		
	Для каждого Структура из МассивСтруктурЗначений Цикл
		Если ЗначениеЗаполнено(Структура.ТиповойОР) И Структура.ТиповойОР = Объект.Ссылка Тогда
			ШаблонСообщения = НСтр("ru = 'Выбранный объект ремонта ""%1"" уже входит в состав!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Структура.ОбъектРемонта);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Иначе
			МассивСтруктурЗначенийОчищенный.Добавить(Структура);
			
			Если ЗначениеЗаполнено(Структура.ТиповойОР) Тогда
				ЕстьУжеСТиповым = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтруктурЗначенийОчищенный.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ДопПараметры = Новый Структура("МассивСтруктурОР, ИзменитьНаправлениеИИзготовителя", МассивСтруктурЗначенийОчищенный, ИзменитьНаправлениеИИзготовителя);
	
	Если ЕстьУжеСТиповым Тогда
		Если МассивСтруктурЗначений.Количество() = 1 Тогда
			ШаблонВопроса = НСтр("ru = 'Выбранный объект ремонта входит в состав типового объекта ремонта ""%1"". Перенести объект ремонта?'");
			ТекстВопроса = СтрШаблон(ШаблонВопроса, МассивСтруктурЗначений[0].ТиповойОР);
		Иначе
			ТекстВопроса = НСтр("ru = 'Некоторые из выбранных объектов ремонта входят в состав другого типового объекта ремонта. Перенести такие объекты ремонта?'");
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоставОРОбработкаВыбораПослеВопросаОбИзмененииТипового", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		СоставОРОбработкаВыбораПослеВопросаОбИзмененииТипового(КодВозвратаДиалога.Да, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОР(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьОР_ПослеВопросаОЗаписи", ЭтотОбъект), НСтр("ru = 'Для добавления объектов ремонта в состав типового его необходимо записать. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
      Возврат;
	КонецЕсли;
	
	СоздатьОР_Завершение();
		
КонецПроцедуры

&НаКлиенте
Процедура СоставОРУдалить(Команда)
	
	МассивОР = Элементы.СписокОР.ВыделенныеСтроки;
	ОчиститьТиповойУОбъектовРемонта(МассивОР);
	
	Элементы.СписокОР.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОР(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОР_ПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Удалить все объекты ремонта из данного типового объекта? Это действие нельзя отменить.'"), РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормативныеРемонты
&НаКлиенте
Процедура НормативныеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтатусДоВсехИзменений = СтатусыНормативныхРемонтовДоИзменений.НайтиСтроки(Новый Структура("ИсходныйНомерСтроки", Элемент.ТекущиеДанные.ИсходныйНомерСтроки));
	
	Элементы.НормативныеРемонтыСтатус.СписокВыбора.Очистить();
	Если СтатусДоВсехИзменений.Количество() = 0 Или СтатусДоВсехИзменений[0].Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке") Тогда
		Элементы.НормативныеРемонтыСтатус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке"));
	КонецЕсли;
	Элементы.НормативныеРемонтыСтатус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
	Элементы.НормативныеРемонтыСтатус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Редактируется"));
	
	Если НоваяСтрока Тогда
		
		ТекСтрока = Элемент.ТекущиеДанные;
		ТекСтрока.ГрафикРемонтныхРабот = ПолучитьЗначениеГрафикаРемРаботНаСервере();
		ТекСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ");
		ТекСтрока.СпособУчетаДатыОтсчета = ПредопределенноеЗначение("Перечисление.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.ИспользоватьДатуВводаВЭксплуатацию");
		Попытка
			ТекСтрока.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке");
		Исключение
			ТекИдентификаторСтроки = Элемент.ТекущаяСтрока;
			УстановитьСтатусДляНовойСтрокиНормРемонтов(ТекИдентификаторСтроки);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Копирование Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		текСтрока.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
	ТекущийСтатусНормативногоРемонта = Элемент.ТекущиеДанные.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьНормРемонтов = Истина;
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если Не ЗначениеЗаполнено(ТекДанные.ВидРемонта) И Не НоваяСтрока Тогда
			УдалРемонт = СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта;
			УдалитьСвязныеЭлементыДляНормативныхРемонтов(УдалРемонт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
			Если НоваяСтрока Тогда
				НС = Объект.ПредшествующиеРемонты.Добавить();
				НС.ВидРемонта = ТекДанные.ВидРемонта;
				НС.ПредшествующийВидРемонта = ТекДанные.ВидРемонта;
				
				МодифицированностьПредшествующихРемонтов = Истина;
				
				Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ТекДанные.ВидРемонта)).Количество() = 0 Тогда
					НС = ЗапланированныеРемонты.Добавить();
					НС.ВидРемонтныхРабот = ТекДанные.ВидРемонта;
					НС.Цвет = Новый Цвет(255, 255, 255);
					НС.ЦветТекста = Новый Цвет(0, 0, 0);
					НС.Выбран = Истина;
				КонецЕсли;
				
			Иначе
				
				СтарыйВидРемонта = СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта;
				СтрокиЗапланированныхРемонтов = ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", СтарыйВидРемонта)); 
				Для каждого Строка из СтрокиЗапланированныхРемонтов Цикл
					Строка.ВидРемонтныхРабот = ТекДанные.ВидРемонта;
					Строка.Цвет = Новый Цвет(255, 255, 255);
					Строка.ЦветТекста = Новый Цвет(0, 0, 0);
					Строка.Выбран = Истина;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
		НормативныеРемонтыПриАктивизацииСтроки(Элементы.НормативныеРемонты);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПослеУдаления(Элемент)
	МодифицированностьНормРемонтов = Истина;
	МодифицированностьПредшествующихРемонтов = Истина;
	МодифицированностьЗамещаемыхРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПриАктивизацииСтроки(Элемент)
	
	Если не Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("ВидРемонта", Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта);
		Элементы.ПредшествующиеРемонты.ОтборСтрок = ПараметрыОтбора;
		Элементы.ЗамещаемыеРемонты.ОтборСтрок = ПараметрыОтбора;
		УстановитьДоступностьРедактированияНормативныхРемонтов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередУдалением(Элемент, Отказ)
	Если не Отказ Тогда
		УдалРемонт = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
		УдалитьСвязныеЭлементыДляНормативныхРемонтов(УдалРемонт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
		
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		
		МассивСтрок = Объект.НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", ТекДанные.ВидРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Вид ремонта"" ""(%1)"" в таблице ""Нормативные ремонты""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ВидРемонта);
			Иначе
				ТекстСообщения = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Вид ремонта"" в таблице ""Нормативные ремонты""!'");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.НормативныеРемонты",, Отказ);
			Возврат;
		КонецЕсли;
		
		Если Не Отказ И Не НоваяСтрока И СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено
			И СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта <> ТекДанные.ВидРемонта Тогда
			
			НайденныеСтроки = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта));
			Для каждого СтрокаСоСтарымВР Из НайденныеСтроки Цикл			
				СтрокаСоСтарымВР.ВидРемонта = ТекДанные.ВидРемонта;			
			КонецЦикла;
			НайденныеСтроки = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта", СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта));
			Для каждого СтрокаСоСтарымВР Из НайденныеСтроки Цикл			
				СтрокаСоСтарымВР.ПредшествующийВидРемонта = ТекДанные.ВидРемонта;			
			КонецЦикла;
			
			НайденныеСтроки = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта));
			Для каждого СтрокаСоСтарымВР Из НайденныеСтроки Цикл			
				СтрокаСоСтарымВР.ВидРемонта = ТекДанные.ВидРемонта;			
			КонецЦикла;
			НайденныеСтроки = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ЗамещаемыйВидРемонта", СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта));
			Для каждого СтрокаСоСтарымВР Из НайденныеСтроки Цикл			
				СтрокаСоСтарымВР.ЗамещаемыйВидРемонта = ТекДанные.ВидРемонта;			
			КонецЦикла;
			
			НормативныеРемонтыПриАктивизацииСтроки(Элемент);
		КонецЕсли;
		
	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыСтатусПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НормативныеРемонты.ТекущиеДанные;
		
	ТекущийСтатусНормативногоРемонта = ТекущиеДанные.Статус;
	МодифицированностьПредшествующихРемонтов = Истина;
	МодифицированностьНормРемонтов = Истина;
	УстановитьДоступностьРедактированияНормативныхРемонтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРемонтныхРаботПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособВыполненияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаДатыОтсчетаПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьВПланированииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРаботОборудованияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПродолжительностьПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПростоиОборудованияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКоэффициентыРемонтныхОсобенностейПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыРазрешитьСокращатьМежремонтныйПериодПриПланированииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРемонтныхРаботПриИзменении(Элемент)
 МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыВидРемонтаПриИзменении(Элемент)
	
	МасВидовЦепочек = Новый Массив;
	
	Для Каждого ЭлементРемонтныхЦикловОборудования Из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
		МасВидовЦепочек.Добавить(ЭлементРемонтныхЦикловОборудования.ВидЦепочки);
	КонецЦикла;	

	ДобавлятьВидРемонта = ПроверитьПересеченияСЦепочкойНаСервере(Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта, МасВидовЦепочек);	
	Если НЕ ДобавлятьВидРемонта Тогда
		Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
	КонецЕсли;		

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшествующиеРемонты
&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		
		СписокОтбора.Добавить(Строка.ВидРемонта);
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	 
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено 
		Или Не ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан нормативный ремонт!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ПредшествующиеРемонты.ТекущиеДанные.ВидРемонта = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
	КонецЕсли;

	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если не ОтменаРедактирования Тогда
		МодифицированностьПредшествующихРемонтов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПослеУдаления(Элемент)
	МодифицированностьПредшествующихРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	текДанные = Элементы.ПредшествующиеРемонты.ТекущиеДанные;
	
	Если текДанные.ПредшествующийВидРемонта = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
		
	СписокОтбора = Новый СписокЗначений(); 	
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл		
		СписокОтбора.Добавить(Строка.ВидРемонта);		
	КонецЦикла; 
	
	НайденВНормативах = СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если НайденВНормативах = Неопределено тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено, СтрЗаменить(Нстр("ru = 'Вид ремонта %ВидРемонта% не найден в списке нормативных ремонтов!'"),
		"%ВидРемонта%", ВыбранноеЗначение),,НСтр("ru = 'Выбор вида ремонта...'"));		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписокРемонтовДляВыбора = Новый СписокЗначений;
	
	Для Каждого строка из Объект.ПредшествующиеРемонты Цикл
		СписокРемонтовДляВыбора.Добавить(строка.ВидРемонта);	
	КонецЦикла;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокРемонтовДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		СписокОтбора.Добавить(Строка.ВидРемонта);
	КонецЦикла;
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗамещаемыеРемонты
&НаКлиенте
Процедура ЗамещаемыеРемонтыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено 
		Или Не ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан нормативный ремонт!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ЗамещаемыеРемонты.ТекущиеДанные.ВидРемонта = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если не ОтменаРедактирования Тогда
		МодифицированностьЗамещаемыхРемонтов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПослеУдаления(Элемент)
	МодифицированностьЗамещаемыхРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыЗамещаемыйВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		
		Если НЕ Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта = Строка.ВидРемонта Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыЗамещаемыйВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	ТекущиеДанныеНормативов = Элементы.НормативныеРемонты.ТекущиеДанные;
	Если ТекущиеДанныеНормативов <> Неопределено Тогда
		ТекущийВидРемонта = ТекущиеДанныеНормативов.ВидРемонта;
	КонецЕсли; 
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		Если ТекущийВидРемонта <> Строка.ВидРемонта Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыЗамещаемыйВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СписокОтбора = Новый СписокЗначений;
	ТекущиеДанныеНормативов = Элементы.НормативныеРемонты.ТекущиеДанные;
	Если ТекущиеДанныеНормативов <> Неопределено Тогда
		ТекущийВидРемонта = ТекущиеДанныеНормативов.ВидРемонта;
	КонецЕсли; 
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		Если ТекущийВидРемонта <> Строка.ВидРемонта Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИзмеряемыхПоказателей
&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьИзмеряемыхПоказателей = Истина;
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если Не НоваяСтрока И Не ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
			МассивСтрок = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(Новый Структура("ТиповойОР,Показатель",Объект.Ссылка,СтруктураДанныхДоРедактирования[Элемент.Имя].Показатель));
			Для Каждого СтрокаКУдалению Из МассивСтрок Цикл
				ПараметрыОповещенияПоСостояниямОР.Удалить(СтрокаКУдалению);
				МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
			КонецЦикла;
		КонецЕсли;

		Если НоваяСтрока Тогда
			Структура = ПолучитьЗначениеРеквизитов (ТекДанные.Показатель);
			Структура.Вставить("ОбъектРемонта", Объект.Ссылка);
			Структура.Вставить("Показатель"   , ТекДанные.Показатель);
            ЗаполнитьСтрокуДанными(ТекДанные,ТекДанные.Показатель);
			ЗначениеРеквизита = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Показатель, "ТипЗначения");
			Если Не ЗначениеРеквизита = Неопределено Тогда
				ТекДанные.Доступность = ЗначениеРеквизита.СодержитТип(Тип("Число"));
			КонецЕсли;
			МодифицированностьИзмеряемыхПоказателей = Истина;
			СписокИзмеряемыхПоказателейПриАктивизацииСтроки(Элементы.СписокИзмеряемыхПоказателей);
		КонецЕсли;
		
		Если Отказ <> Истина Тогда
			ТекДанные.ОбъектРемонта = Объект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
		
		Если Не СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", ВыбранноеЗначение)).Количество() > 0 Тогда
			НС = СписокИзмеряемыхПоказателей.Добавить();
			ЗаполнитьСтрокуДанными(НС,ВыбранноеЗначение);
			МодифицированностьИзмеряемыхПоказателей = Истина;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПослеУдаления(Элемент)
	МодифицированностьИзмеряемыхПоказателей = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("Показатель",Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.Показатель);
		Элементы.ПараметрыОповещенияПоСостояниямОР.ОтборСтрок = ОтборПараметровОповещений;
	Иначе
		ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("Показатель",ПредопределенноеЗначение("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка"));
		Элементы.ПараметрыОповещенияПоСостояниямОР.ОтборСтрок = ОтборПараметровОповещений;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейЗначенияКонтролируемыхПоказателейИзОРПриИзменении(Элемент)
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Структура = ПолучитьЗначениеРеквизитов (ТекДанные.Показатель);
	Структура.Вставить("ОбъектРемонта", Объект.Ссылка);
	Структура.Вставить("Показатель"   , ТекДанные.Показатель);
    ЗаполнитьСтрокуДанными(ТекДанные,ТекДанные.Показатель);
	МодифицированностьИзмеряемыхПоказателей = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) И ТекДанные.ОбъектРемонта <> Объект.Ссылка Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(Новый Структура("ТиповойОР,Показатель",Объект.Ссылка,Элемент.ТекущиеДанные.Показатель));
	Для Каждого СтрокаКУдалению Из МассивСтрок Цикл
		ПараметрыОповещенияПоСостояниямОР.Удалить(СтрокаКУдалению);
		МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопустимыйМинимумПриИзменении(Элемент)
	МодифицированностьИзмеряемыхПоказателей = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		МассивСтрок = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель));
		Если МассивСтрок.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Показатель"" ""(%1)"" в таблице ""Показатели""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.Показатель);
			Иначе
				ТекстСообщения = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Показатель"" в таблице ""Показатели""!'");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"СписокИзмеремыхПоказателей",, Отказ);
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормативныеЗатратыПриТОиР
&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.Запчасти.ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(Элементы.Запчасти.ТекущиеДанные.Номенклатура) тогда
		ТекстСообщения = НСтр("ru = 'Не указана номенклатура!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.НормативныеЗатратыПриТОиР.ТекущиеДанные.Номенклатура = Элементы.Запчасти.ТекущиеДанные.Номенклатура;
		Элементы.НормативныеЗатратыПриТОиР.ТекущиеДанные.Характеристика = Элементы.Запчасти.ТекущиеДанные.Характеристика;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		текСтрока.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	ТекДанные = Элемент.ТекущиеДанные;

	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПослеУдаления(Элемент)
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	текЗапчасть = Элементы.Запчасти.ТекущиеДанные;
	
	СписокОтбора = Новый СписокЗначений(); 	
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл		
		СписокОтбора.Добавить(Строка.ВидРемонта);		
	КонецЦикла; 
	
	НайденВНормативах = СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если НайденВНормативах = Неопределено тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено, СтрЗаменить(Нстр("ru = 'Вид ремонта %ВидРемонта% не найден в списке нормативных ремонтов!'"),
		"%ВидРемонта%", ВыбранноеЗначение),,НСтр("ru = 'Выбор вида ремонта...'"));		
	КонецЕсли;
		
		
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		
		СписокОтбора.Добавить(Строка.ВидРемонта);
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Текст) Тогда
			ДанныеВыбора = Новый СписокЗначений;
			Для каждого ТекСтрока из Объект.НормативныеРемонты Цикл
				Если СтрНачинаетсяС(ВРег(ТекСтрока.ВидРемонта), ВРег(текст)) Тогда
					ДанныеВыбора.Добавить(ТекСтрока.ВидРемонта);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчасти
&НаКлиенте
Процедура ЗапчастиПередУдалением(Элемент, Отказ)
	УдалитьСвязанныеСтрокиПоЗапчастям(Элемент.ТекущиеДанные.Номенклатура, Элемент.ТекущиеДанные.Характеристика);
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		
		ТекущаяНоменклатура = ТекДанные.Номенклатура;
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика", 
			ТекущаяНоменклатура, ТекДанные.Характеристика);
		Элементы.НормативныеЗатратыПриТОиР.ОтборСтрок = СтруктураОтбора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) И Не НоваяСтрока Тогда
			УдалитьСвязанныеСтрокиПоЗапчастям(СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура, СтруктураДанныхДоРедактирования[Элемент.Имя].Характеристика);
		КонецЕсли;
	
		МодифицированностьЗапчастей = Истина;
		ТекДанные = Элементы.Запчасти.ТекущиеДанные;
		Если СтруктураДанныхДоРедактирования[Элемент.Имя] = Неопределено Тогда
			СтруктураОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика", ТекДанные.Номенклатура, ТекДанные.Характеристика);
			Элементы.НормативныеЗатратыПриТОиР.ОтборСтрок = СтруктураОтбора;
			Возврат;
		КонецЕсли;
		Если НЕ НоваяСтрока И ТекДанные <> Неопределено Тогда
			// Заменим номенклатуру в существующих строках нормативных затрат запчастей.
			МассивСтрок = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
				СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура, 
				СтруктураДанныхДоРедактирования[Элемент.Имя].Характеристика));
			Для Каждого Эл Из МассивСтрок Цикл
				МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
				Эл.Номенклатура = ТекДанные.Номенклатура;
				Эл.Характеристика = ТекДанные.Характеристика;
			КонецЦикла;
			
		КонецЕсли;
		Если ТекДанные <> Неопределено и НоваяСтрока Или ТекДанные.Номенклатура <> СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура
			Или ТекДанные.Характеристика <> СтруктураДанныхДоРедактирования[Элемент.Имя].Характеристика Тогда
			СтруктураОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика", ТекДанные.Номенклатура, ТекДанные.Характеристика);
			Элементы.НормативныеЗатратыПриТОиР.ОтборСтрок = СтруктураОтбора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПослеУдаления(Элемент)
	
	МодифицированностьЗапчастей = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		СтруктураПараметр = Новый Структура;
		СтруктураПараметр.Вставить("Номенклатура", ТекДанные.Номенклатура);
		СтруктураПараметр.Вставить("Характеристика", ТекДанные.Характеристика);
			
		СтрокиНоменклатуры = Объект.Запчасти.НайтиСтроки(СтруктураПараметр);
		Если СтрокиНоменклатуры.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Номенклатура"" ""(%1)"" в таблице ""Запчасти""!'");
				ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Номенклатура);
			Иначе
				ТекстОшибки = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Номенклатура"" в таблице ""Запчасти""!'");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"СписокИзмеремыхПоказателей",, Отказ);
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МодифицированностьЗапчастей = Истина;
	Модифицированность = Истина;
	Характеристика_пустаяСсылка = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		
	Если Объект.Запчасти.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			ВыбранноеЗначение, Характеристика_пустаяСсылка)).Количество() = 0 Тогда
		
		НС = Объект.Запчасти.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НС.Количество = 1;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запчасти.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Запчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Запчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.Запчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Запчасти.ТекущиеДанные.Номенклатура) Тогда	
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Запчасти.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.Запчасти.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОценокРМ
&НаКлиенте
Процедура ТаблицаОценокРМПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Если Не Отказ Тогда
		
		Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период",ТекСтрока.ВидРемонта,ТекСтрока.Сезон,ТекСтрока.Период));
		Если Строки.Количество() > 0 Тогда
			ТекВРРМ = ТекСтрока.ВидРемонта;
			ТекСезонРМ = ТекСтрока.Сезон;
			ТекПериодРМ = ТекСтрока.Период;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
		Если Не ТекДанные.ГруппаОбъектовРемонтов = Объект.Ссылка Тогда
			
			ТекДанные.ГруппаОбъектовРемонтов = Объект.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		
		СтруктураПараметр = Новый Структура("ГруппаОбъектовРемонтов, ВидРемонта,Сезон,Период");
		ЗаполнитьЗначенияСвойств(СтруктураПараметр,ТекДанные);
		Строки = ТаблицаОценокРМ.НайтиСтроки(СтруктураПараметр);
		Количество = 0;
		Если Строки.Количество() > 1 Тогда 
			ТекстСообщения = НСтр("ru = 'Текущая строка оценок риск-менеджмента дублирует уже введенную!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		ТаблицаОценокРММодифицированность = Истина;
		Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
		
		Если НоваяСтрока Тогда
			ЗаполнитьЗначенияСвойств(РСНЗТаблицаОценокРМ.Добавить(),ТекДанные);
		Иначе
			Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период", ТекВРРМ, ТекСезонРМ, ТекПериодРМ));
			Если Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Строки[0],ТекДанные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период",ТекДанные.ВидРемонта,ТекДанные.Сезон,ТекДанные.Период));
	Если Строки.Количество() Тогда
		РСНЗТаблицаОценокРМ.Удалить(Строки[0]);
	КонецЕсли; 
	ТаблицаОценокРММодифицированность = Истина;
	Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		Если Строка.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует") Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);	
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Действует = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует");
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		Если Строка.Статус = Действует Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		СписокОтбора.Добавить(Строка.ВидРемонта);
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		СписокОтбора.Добавить(Строка.ВидРемонта);
	КонецЦикла;

	Если ЗначениеЗаполнено(ВыбранноеЗначение) И СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРМ(Команда)
	МассивСтруктурСтрокТЧ = Новый Массив;
	Действует = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует");
	КолонкиТЧ = "НомерСтроки, Период, ГруппаОбъектовРемонтов, ВидРемонта, Сезон, ВероятностьВыходаИзСтроя, Ущерб";
	Для каждого СтрокаТЧ Из ТаблицаОценокРМ Цикл
		СтруктураСтроки = Новый Структура(КолонкиТЧ);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
		СтруктураСтроки.НомерСтроки = ТаблицаОценокРМ.Индекс(СтрокаТЧ) + 1;
		МассивСтруктурСтрокТЧ.Добавить(СтруктураСтроки);
	КонецЦикла;
	МассивВидовРемонта = Новый Массив;
	Для каждого Ремонт Из Объект.НормативныеРемонты Цикл
		Результат = МассивВидовРемонта.Найти(Ремонт.ВидРемонта);
		Если Результат = Неопределено И Ремонт.Статус = Действует Тогда
			МассивВидовРемонта.Добавить(Ремонт.ВидРемонта);	
		КонецЕсли; 
	КонецЦикла; 
	ПараметрыФормыЗаполнения = Новый Структура("МассивСтруктурСтрокТЧ, Ссылка, МассивВидовРемонта", МассивСтруктурСтрокТЧ, Объект.Ссылка, МассивВидовРемонта);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьДанныеОбИзмененииРМ", ЭтотОбъект);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаЗаполненияОценкиРМ", ПараметрыФормыЗаполнения, ЭтаФорма,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличноеПолеРемонтныеЦиклыОборудования
&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриАктивизацииСтроки(Элемент)
	ТекСтрокаРемонтныеЦиклыОборудования = Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаРемонтныеЦиклыОборудования = Неопределено Тогда
		ТабличноеПолеСоставРемонтногоЦикла.Очистить();			
	Иначе
		
		МассивРемонтов = ЗаполнитьПоследовательностьРемонтовНаСервере(ТекСтрокаРемонтныеЦиклыОборудования.ВидЦепочки);
		
		ТабличноеПолеСоставРемонтногоЦикла.Очистить();
		Для каждого Элем Из МассивРемонтов Цикл
			
			НС = ТабличноеПолеСоставРемонтногоЦикла.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияВидЦепочкиПриИзменении(Элемент)
	МасСтрок = ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ВидЦепочки, ГруппаОбъектовРемонтов", Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки, Объект.Ссылка));
	Если МасСтрок.Количество() = 1 Тогда
		
		ДобавлятьЦепочку = ПроверитьПересеченияНаСервере(Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки);	
		Если НЕ ДобавлятьЦепочку Тогда
			Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки = ПредопределенноеЗначение("Справочник.торо_ЦепочкиРемонта.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
	
		ШаблонСообщения = НСтр("ru = 'Цепочка ""%1"" уже есть в списке фиксированных ремонтных циклов'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки = ПредопределенноеЗначение("Справочник.торо_ЦепочкиРемонта.ПустаяСсылка");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		МодифицированностьРемЦиклов = Истина;
		ТабличноеПолеРемонтныеЦиклыОборудованияПриАктивизацииСтроки(Элементы.ТабличноеПолеРемонтныеЦиклыОборудования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередУдалением(Элемент, Отказ)
	
	МодифицированностьРемЦиклов = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ГруппаОбъектовРемонтов = Объект.Ссылка;
	Иначе	
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные;
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОповещенияПоСостояниямОР
&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПослеУдаления(Элемент)
		МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.ТиповойОР = Объект.Ссылка;
			Элемент.ТекущиеДанные.Показатель = ТекДанные.Показатель;
			Элемент.ТекущиеДанные.ID = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;

	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные = Неопределено 
		Или Не ЗначениеЗаполнено(Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.Показатель) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран показатель ремонта!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПараметровНаработки
&НаКлиенте
Процедура СписокПараметровНаработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и НЕ Копирование Тогда 
		
		Элемент.ТекущиеДанные.Период = ТекущаяДата();
		
		Если НЕ Объект.ЭтоГруппа Тогда
			
			Элемент.ТекущиеДанные.КоэффициентИспользованияОборудования = 1;
			Элемент.ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Копирование ИЛИ НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		
		Если Не НоваяСтрока И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Показатель) Тогда
			УдалитьЗависимыеСтрокиИзТабМаксимальныхЗначенийНаработки(СтруктураДанныхДоРедактирования[Элемент.Имя].Показатель);
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Период) Тогда
			Элемент.ТекущиеДанные.Период = ТекущаяДата();
		КонецЕсли;
		
		МодифицированностьПараметровНаработки = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПослеУдаления(Элемент)
	МодифицированностьПараметровНаработки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		
		МассивСтрок = СписокПараметровНаработки.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель));
		Если МассивСтрок.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Показатель"" ""(%1)"" в таблице ""Наработка""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.Показатель);
			Иначе
				ТекстСообщения = НСтр("ru = 'Обнаружены повторяющиеся незаполненные поля ""Показатель"" в таблице ""Наработка""!'");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"СписокПараметровНаработки",, Отказ);
			Возврат;
		КонецЕсли;
			
	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередУдалением(Элемент, Отказ)
	
	ВыбранныеСтроки = Элемент.ВыделенныеСтроки;
	Для каждого ИдентСтроки из ВыбранныеСтроки цикл
		
		текСтрока = СписокПараметровНаработки.НайтиПоИдентификатору(ИдентСтроки);
		Если текСтрока.ОбъектРемонта <> Объект.Ссылка Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя удалять унаследованные параметры наработки!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Иначе 
			УдалитьЗависимыеСтрокиИзТабМаксимальныхЗначенийНаработки(текСтрока.Показатель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	старыйПоказатель = Элементы.СписокПараметровНаработки.ТекущиеДанные.Показатель;
	УстановитьОтборВТабМаксимальныхЗначенийНаработки(ВыбранноеЗначение);
	Если старыйПоказатель = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗависимыеСтрокиИзТабМаксимальныхЗначенийНаработки(старыйПоказатель);
		 
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда

		Если ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
			Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель",ТекДанные.Показатель);
		Иначе
			Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель","---------");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабМаксимальныхЗначенийНаработки
&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		МодифицированностьМаксЗначНаработки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	ТекСтрокаМаксимальногоЗначения = Элементы.ТабМаксимальныхЗначенийНаработки.ТекущиеДанные;

	Если Не ТекДанные = Неопределено 
		И Не ТекСтрокаМаксимальногоЗначения = Неопределено Тогда
		ТекСтрокаМаксимальногоЗначения.Показатель = ТекДанные.Показатель;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Или Не ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран показатель наработки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	ИначеЕсли Не ТекДанные = Неопределено Тогда
		МассивСтрок = ТабМаксимальныхЗначенийНаработки.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель));
		Если МассивСтрок.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Для показателя наработки <%1> уже введено его максимальное значение или назначенный ресурс.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.Показатель);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПриИзменении(Элемент)
	
	МодифицированностьМаксЗначНаработки = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеРеквизиты

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриИзменении(Элемент)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриИзменении(ЭтаФорма, Элемент);
	МодифицированностьДопРеквизитов = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки(Элемент)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПередНачаломДобавления(ЭтаФорма, Объект.НаборСвойствОР, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередУдалением(Элемент, Отказ)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПередУдалением(ЭтаФорма, Объект.НаборСвойствОР, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовВыбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОграничений
&НаКлиенте
Процедура ДеревоОграниченийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		
		АвтоматическаяИерархия = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "СтроитсяАвтоматически");
		Если АвтоматическаяИерархия Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Автоматическую иерархию нельзя добавить в дерево!'"));
			Возврат;
		КонецЕсли;
		
		Если ПроверитьНаличиеИерархии(ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Иерархия уже добавлена в дерево ограничений!'"));
			Возврат;
		КонецЕсли;
		
		ДобавитьИерархиюВДерево(ВыбранноеЗначение);
		Модифицированность = Истина;
		МодифицированностьОграничений = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОграниченияНаХарактеристикиОборудования") Тогда

		ТекущиеДанные = Элементы.ДеревоОграничений.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено 
		  ИЛИ ТипЗнч(ТекущиеДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_ОграниченияНаХарактеристикиОборудования") Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ограничение должно быть вложено в иерархию!'"));
			Возврат;
		КонецЕсли;  
		
		Если ПроверитьНаличиеОграничения(ТекущиеДанные.ИерархияОграничение, ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбранной иерархии уже добавлено это ограничение!'"));
			Возврат;
		КонецЕсли;
				
		ДобавитьОграничениеВДерево(ВыбранноеЗначение, ТекущиеДанные.ИерархияОграничение);
		Модифицированность = Истина;
		МодифицированностьОграничений = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОграниченийПриИзменении(Элемент)
	МодифицированностьОграничений = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОграниченийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекИерархияОграничение = ТекДанные.ИерархияОграничение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОграниченийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если ТипЗнч(ТекущиеДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
			
			СтруктураВозврата = ПроверитьИерархию(Элемент.ТекущаяСтрока);
			
			Если НЕ СтруктураВозврата.РазрешеноИзменение Тогда
				Если СтруктураВозврата.Причина = "АвтоматическаяИерархия" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Автоматическую иерархию нельзя добавить в дерево!'"));
				ИначеЕсли СтруктураВозврата.Причина = "ДублирующееЗначение" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Иерархия уже добавлена в дерево ограничений!'"));
				ИначеЕсли СтруктураВозврата.Причина = "ЕстьРодитель" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Иерархию можно добавить только на первый уровень дерева!'"));
				КонецЕсли;
				
				ТекущиеДанные.ИерархияОграничение = ТекИерархияОграничение;
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ Отказ Тогда	
				ИзменитьИерархию(ТекИерархияОграничение, ТекущиеДанные.ИерархияОграничение);
			КонецЕсли;
			
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_ОграниченияНаХарактеристикиОборудования") Тогда
			
			СтруктураВозврата = ПроверитьОграничение(Элемент.ТекущаяСтрока);
			
			Если НЕ СтруктураВозврата.РазрешеноИзменение Тогда
				Если СтруктураВозврата.Причина = "ДублирующееЗначение" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбранной иерархии уже добавлено это ограничение!'"));
				ИначеЕсли СтруктураВозврата.Причина = "НеверныйУровеньВложенности" Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ограничение должно быть вложено в иерархию!'"));
				КонецЕсли;
				
				ТекущиеДанные.ИерархияОграничение = ТекИерархияОграничение;
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ Отказ Тогда	
				ИзменитьОграничение(Элемент.ТекущаяСтрока, ТекИерархияОграничение, ТекущиеДанные.ИерархияОграничение); 	
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТекущиеДанные.ИерархияОграничение = ТекИерархияОграничение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОграниченийПередУдалением(Элемент, Отказ)
		
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		Если ТипЗнч(ТекДанные.ИерархияОграничение) = Тип("Строка") Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли ТипЗнч(ТекДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
			УдалитьИерархию(ТекДанные.ИерархияОграничение);
		ИначеЕсли ТипЗнч(ТекДанные.ИерархияОграничение) = Тип("СправочникСсылка.торо_ОграниченияНаХарактеристикиОборудования") Тогда
			УдалитьОграничение(Элемент.ТекущаяСтрока, ТекДанные.ИерархияОграничение);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДляМнемосхемы

&НаКлиенте
Процедура ИнициализироватьЗакладкуСтруктураРемонтногоЦикла()
	
	Если МодифицированностьНормРемонтов ИЛИ МодифицированностьЗамещаемыхРемонтов ИЛИ МодифицированностьПредшествующихРемонтов 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОчиститьЗакладкуСтруктураРемонтногоЦикла();
		Возврат;   
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		МассивРемонтов = Новый Массив;
		Для каждого Ремонт Из ЗапланированныеРемонты Цикл
			МассивРемонтов.Добавить(Ремонт);	
		КонецЦикла;	
		
		Для каждого РемонтТекущий из МассивРемонтов Цикл
			Если Объект.НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", РемонтТекущий.ВидРемонтныхРабот)).Количество() = 0 Тогда	
				ЗапланированныеРемонты.Удалить(ЗапланированныеРемонты.Индекс(РемонтТекущий));	
			КонецЕсли;
		КонецЦикла;
		
		МассивНормативныхРемонтов = торо_РасчетСтруктурыРемонтногоЦикла.ПолучитьТаблицуНормативныхРемонтов(Объект.Ссылка);
		
		Для каждого РемонтТекущий из МассивНормативныхРемонтов Цикл
			Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", РемонтТекущий.Видремонта)).Количество() = 0 Тогда
				НС = ЗапланированныеРемонты.Добавить();
				НС.ВидРемонтныхРабот = РемонтТекущий.Видремонта;
				НС.Цвет = Новый Цвет(255, 255, 255);
				НС.ЦветТекста = Новый Цвет(0, 0, 0);
				НС.Выбран = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбора_ПослеВопросаОЗаписи(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		Если ЭтаФорма.Записать() Тогда
			ПанельДопИнформацииПриСменеСтраницы(Элементы.ПанельДопИнформации, ДопПараметры.ТекущаяСтраница);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыНастроек(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапланированныеРемонты.Очистить();
	
	Для каждого Элем Из Результат.МассивРемонтов Цикл
		НС = ЗапланированныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	
	Нормировать = Результат.Нормировать;
	
	Если Результат.Пересчитать Тогда
		
		МожноПечататьВизуализацию = Ложь;
		
		ТаблицаРемонтовВизуализация.Очистить();
		
		Для каждого Стр Из ТаблицаРемонтов Цикл
			НС = ТаблицаРемонтовВизуализация.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
		КонецЦикла;
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
		ЗаполнитьПараметрыСтруктурыРемонтногоЦикла();
	Иначе
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СоответствиеЦветов.Очистить();
	Для Каждого СтрокаРемонт Из ЗапланированныеРемонты Цикл
		Если Не СтрокаРемонт.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НС = СоответствиеЦветов.Добавить();
		НС.ВидРемонтныхРабот = СтрокаРемонт.ВидРемонтныхРабот;
		НС.Цвет = СтрокаРемонт.Цвет;
		НС.ЦветТекста = СтрокаРемонт.ЦветТекста;
		НС.Шрифт = СтрокаРемонт.Шрифт;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчитатьЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивНужныхВР = Новый Массив;
	Для каждого ЭлементСписка из Список Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивНужныхВР.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	МассивНормативныхРемонтов = ДополнительныеПараметры.МассивНормативныхРемонтов;
	РасчетВыполнен = ПерерасчитатьНаСервере(МассивНужныхВР, МассивНормативныхРемонтов);
	
	Если Не РасчетВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	торо_РасчетСтруктурыРемонтногоЦиклаКлиент.НарисоватьМнемосхему(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПерерасчитатьНаСервере(МассивНужныхВР, МассивНормативныхРемонтов)
	
	ПолеТД.Очистить();
	ПолеТД.АвтоМасштаб = Истина;
	
	СоответствиеИндексаИНомераКолонки.Очистить();
	ТаблицаРемонтовВизуализация.Очистить();
	НадписьКоличествоРемонтовСтруктураРЦ = "";
	
	МассивГрафиковРаботы = Новый Массив;
	МассивГрафиковРаботы.Добавить(ПлановыйГрафикРаботы);
	
	ТаблицаОбъектыРемонта = Новый ТаблицаЗначений;
	ТаблицаОбъектыРемонта.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	ТаблицаОбъектыРемонта.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаОбъектыРемонта.Колонки.Добавить("ПлановыйГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	ТаблицаОбъектыРемонта.Колонки.Добавить("РемонтнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
		
	ТаблицаНормативов.Очистить();
	
	МассивИДТехКарт = Новый Массив;
	
	Для каждого Строка из МассивНормативныхРемонтов Цикл
		Если МассивНужныхВР.Найти(Строка.ВидРемонта) <> Неопределено Тогда
			НоваяСтрока = ТаблицаОбъектыРемонта.Добавить();
			НоваяСтрока.ОбъектРемонтныхРабот = Объект.Ссылка;
			НоваяСтрока.ВидРемонтныхРабот = Строка.ВидРемонта;
			НоваяСтрока.ПлановыйГрафикРаботы = ПлановыйГрафикРаботы;
			НоваяСтрока.РемонтнаяГруппа = Объект.Ссылка;
			
			НоваяСтрокаНорматива = ТаблицаНормативов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНорматива, Строка);
			НоваяСтрокаНорматива.ВидРемонтныхРабот = Строка.ВидРемонта;
			НоваяСтрокаНорматива.ПлановыйГрафикРаботы = ПлановыйГрафикРаботы;
			
			МассивИДТехКарт.Добавить(Строка.НормативныйРемонт);
			МассивГрафиковРаботы.Добавить(Строка.ГрафикРемонтныхРабот);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПродолжительности = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьПродолжительностиТехКарт(МассивИДТехКарт);
	Для каждого Строка из ТаблицаНормативов Цикл
		Строка.Продолжительность = СоответствиеПродолжительности[Строка.НормативныйРемонт];
	КонецЦикла;

	МассивГрафиковРаботы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивГрафиковРаботы);
		
	ТабПараметрыНаработки = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработкиДляСтруктурыРЦ(Объект.Ссылка);
	ТабРемонтов = торо_РасчетСтруктурыРемонтногоЦикла.РасчетСтруктурыРЦ(Объект.Ссылка, ВРНачалоЦикла, ТаблицаОбъектыРемонта, ТабПараметрыНаработки, МассивГрафиковРаботы);
	
	Если ТабРемонтов = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаРемонтов.Загрузить(ТабРемонтов);
	ТаблицаРемонтовВизуализация.Загрузить(ТабРемонтов);

	ЗаполнитьПараметрыСтруктурыРемонтногоЦикла();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСтруктурыРемонтногоЦикла()
	
	торо_РасчетСтруктурыРемонтногоЦикла.ЗаполнитьДатыПредшествующихВТаблицеРемонтов(ТаблицаРемонтовВизуализация, ТаблицаНормативов.Выгрузить(), ПлановыйГрафикРаботы);
	
	ИндексСтроки = 7;
	КолонкиНаработки.Очистить();
	ЗначенияНаработки.Очистить();
	
	МассивОР = Новый Массив;
	МассивОР.Добавить(Объект.Ссылка);
	
	торо_РасчетСтруктурыРемонтногоЦикла.РассчитатьНаработкуДляВизуализации(ТаблицаРемонтовВизуализация, МассивОР, КолонкиНаработки, ЗначенияНаработки, ИндексСтроки, "ДатаПредшествующего", ПолеТД);
	торо_РасчетСтруктурыРемонтногоЦикла.РассчитатьНаработкуДляВизуализации(ТаблицаРемонтовВизуализация, МассивОР, КолонкиНаработки, ЗначенияНаработки, ИндексСтроки, "ДатаПредшествующегоТогожеВида", ПолеТД);
	
КонецПроцедуры

&НаСервере
Функция ПечатьСруктурыРЦНаСервере()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Нормировать", Нормировать);
	ДополнительныеПараметры.Вставить("СписокВидовРемонтов", СписокВидовРемонтов);
	ДополнительныеПараметры.Вставить("ЗапланированныеРемонты", ЗапланированныеРемонты);
	ДополнительныеПараметры.Вставить("ПолеМнемосхемы", ПолеМнемосхемы);
	ДополнительныеПараметры.Вставить("ТаблицаРемонтовВизуализация", ТаблицаРемонтовВизуализация);
	ДополнительныеПараметры.Вставить("КолонкиНаработки", КолонкиНаработки);
	ДополнительныеПараметры.Вставить("ЗначенияНаработки", ЗначенияНаработки);
	ДополнительныеПараметры.Вставить("КолСтрокСхемы", КолСтрокСхемы);
	ДополнительныеПараметры.Вставить("ПлановыйГрафикРаботы", ПлановыйГрафикРаботы);
	
	Возврат торо_РасчетСтруктурыРемонтногоЦикла.ПечатьСтруктурыРЦ(Объект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ОчиститьЗакладкуСтруктураРемонтногоЦикла()
	
	Элементы.Перерасчитать.Доступность 	= Ложь;
	Элементы.Построить.Доступность 		= Ложь;
	Элементы.Настройки.Доступность 		= Ложь;
	
	ВРНачалоЦикла = Неопределено;
	ПлановыйГрафикРаботы = Неопределено;
	торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
	ОчиститьПолеТабличногоДокумента();
	НадписьКоличествоРемонтовСтруктураРЦ = "";
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПолеТабличногоДокумента()
	
	ПолеТД.Очистить();

КонецПроцедуры	

#КонецОбласти

#Область ПараметрыНаработки

&НаСервереБезКонтекста
Функция ОбновитьМаксимальныеЗначенияПоказателейНаработки(ОбъектРемонта)
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
		|	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
		|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
		|	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс
		|ИЗ
		|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
		|ГДЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		СтруктураВозврата = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПараметр = Новый Структура("ОбъектРемонта, Показатель, МаксимальноеЗначение, НазначенныйРесурс");
			ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка); 
			СтруктураВозврата.Добавить(СтруктураПараметр);
			
		КонецЦикла;
		
		Возврат СтруктураВозврата;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

&НаКлиенте 
Процедура УдалитьЗависимыеСтрокиИзТабМаксимальныхЗначенийНаработки(Показатель)
	
	стрПоиска = Новый Структура("Показатель", Показатель);
	
	НайС = СписокПараметровНаработки.НайтиСтроки(стрПоиска);
	Если НайС.количество() <= 1 тогда
		УдаляемыеСтроки = ТабМаксимальныхЗначенийНаработки.НайтиСтроки(стрПоиска);
		Для каждого текСтрока из УдаляемыеСтроки цикл
			ТабМаксимальныхЗначенийНаработки.Удалить(текСтрока);
		КонецЦикла;  		
	
		Если УдаляемыеСтроки.Количество() > 0 Тогда
			МодифицированностьМаксЗначНаработки = Истина;
		КонецЕсли; 	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
процедура УстановитьОтборВТабМаксимальныхЗначенийНаработки(Показатель = неопределено)
	
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда

		Если ЗначениеЗаполнено(Показатель) Тогда
			Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель",
				?(ЗначениеЗаполнено(Показатель),Показатель,ТекДанные.Показатель));
		Иначе
			Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель","---------");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПараметровНаработки(Отказ)
	
	ИндексСтроки = 0;
	ШаблонСообщения = НСтр("ru='В таблице параметров наработки в строке %1 не заполнено поле ""%2"".'");
	
	СтруктураПроверяемыхПолей = Новый Структура;
	СтруктураПроверяемыхПолей.Вставить("ПродолжительностьПериодаПлановойНаработки", "Продолжительность периода плановой наработки");
	СтруктураПроверяемыхПолей.Вставить("ПериодПлановойНаработки", "Период плановой наработки");
	СтруктураПроверяемыхПолей.Вставить("ПлановаяНаработка", "Плановая наработка");
	
	Для каждого Строчка Из СписокПараметровНаработки Цикл
		Если Строчка.ОбъектРемонта <> Объект.Ссылка Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строчка["Показатель"]) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(ИндексСтроки+1), "Показатель наработки");
			ПутьКДанным = "СписокПараметровНаработки["+ИндексСтроки+"].Показатель";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ПутьКДанным,,Отказ);
		КонецЕсли;
		
		Если НЕ Объект.ЭтоГруппа Тогда
			
			Для каждого КлючИЗначение из СтруктураПроверяемыхПолей Цикл
				Если НЕ ЗначениеЗаполнено(Строчка[КлючИЗначение.Ключ]) Тогда
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(ИндексСтроки+1), КлючИЗначение.Значение);
					ПутьКДанным = "СписокПараметровНаработки["+ИндексСтроки+"]."+КлючИЗначение.Ключ;
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ПутьКДанным,,Отказ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;

	КонецЦикла;

	Если НЕ Объект.ЭтоГруппа Тогда
		
		МаксимальноеЗначение = Истина;
		Для каждого Строчка Из ТабМаксимальныхЗначенийНаработки Цикл
			Если Строчка.МаксимальноеЗначение = 0 И Строчка.НазначенныйРесурс = 0 Тогда
				МаксимальноеЗначение = Ложь;
				Отказ = Истина;
			КонецЕсли;                                                               
		КонецЦикла;
		
		Если НЕ МаксимальноеЗначение Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Максимальное значение наработки"" или ""Назначенный ресурс""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеИзмеряемыхПоказателей(Отказ)
	
	ТекстОшибки = "";
	Для Каждого Текданные Из СписокИзмеряемыхПоказателей Цикл
		
		Если ТекДанные.Показатель = ПредопределенноеЗначение("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Показатель"" в таблице ""Контролируемые показатели""!'");
		Иначе
			СтрокиПоказателей = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель",ТекДанные.Показатель));
			Если СтрокиПоказателей.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Обнаружены повторяющиеся поля ""Показатель"" ""(%1)"" в таблице ""Контролируемые показатели""!'");
				ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекДанные.Показатель);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "СписокИзмеряемыхПоказателей",, Отказ);
			Возврат;
		КонецЕсли;
		
		Если ТекДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
			ТекстСообщения = "";
			Если ТипЗнч(ТекДанные.КритическийМинимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.ДопустимыйМинимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.ДопустимыйМаксимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.КритическийМаксимум) = Тип("Число") Тогда
				Если ТекДанные.КритическийМинимум > ТекДанные.ДопустимыйМинимум Тогда
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'критический минимум превышает допустимый минимум! '");
				КонецЕсли;
				Если ТекДанные.ДопустимыйМинимум > ТекДанные.ДопустимыйМаксимум Тогда
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'допустимый минимум превышает допустимый максимум! '");
				КонецЕсли;
				Если ТекДанные.ДопустимыйМаксимум > ТекДанные.КритическийМаксимум Тогда
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'допустимый максимум превышает критический максимум! '");
				КонецЕсли;
			КонецЕсли;
			Если ТекстСообщения <> "" Тогда
				ШаблонСообщения =  НСтр("ru = 'Для показателя ""(%1)"" '") + ТекстСообщения 
					+ НСтр("ru = 'Попробуйте отредактировать границы допустимых значений!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.Показатель);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СписокИзмеряемыхПоказателей",, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстОшибки = "";
	Для Каждого ТекДанные Из ПараметрыОповещенияПоСостояниямОР Цикл
		Если ТекДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Вид сравнения"" в таблице ""Параметры уведомлений и регистрации дефектов""!'");
		Иначе
			Если (ТекДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.ВИнтервале")
				ИЛИ ТекДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеВИнтервале"))
				И (НЕ ЗначениеЗаполнено(ТекДанные.ВариантЗначения) ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ВариантЗначения1)) Тогда
				ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Вид значения"" в таблице ""Параметры уведомлений и регистрации дефектов""!'");	
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.ВариантЗначения) Тогда
				ТекстОшибки = НСтр("ru = 'Обнаружено незаполненное поле ""Вид значения"" в таблице ""Параметры уведомлений и регистрации дефектов""!'");				
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "ПараметрыОповещенияПоСостояниямОР",, Отказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтролируемыеПоказатели

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИзмеряемыеПоказатели(Объект, СписокИзмеряемыхПоказателей)
	
	СтруктураКонтрПоказателей = ПолучитьИзмеряемыеПоказатели(Объект.Ссылка, Объект.Родитель);
	СписокИзмеряемыхПоказателей.Очистить();
	Для Каждого Элем Из СтруктураКонтрПоказателей Цикл
		НС = СписокИзмеряемыхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		
		Если ЗначениеЗаполнено(НС.Показатель) Тогда
			НС.Доступность = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(НС.Показатель, "ТипЗначения").СодержитТип(Тип("Число"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИзмеряемыеПоказатели(ТиповойОР, Родитель)
	
	СтруктураВозврата = Новый Массив;
	
	Если ЗначениеЗаполнено(ТиповойОР) Тогда 
		ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(ТиповойОР);
	Иначе
		ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(Родитель);
	КонецЕсли;
	
	Если ТаблицаРодителей.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРодителей.Родитель,
		|	ТаблицаРодителей.Уровень
		|ПОМЕСТИТЬ ТаблицаОР
		|ИЗ
		|	&ТаблицаРодителей КАК ТаблицаРодителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта,
		|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель КАК Показатель,
		|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.ДопустимыйМинимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум) КАК ДопустимыйМинимум,
		|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.ДопустимыйМаксимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум) КАК ДопустимыйМаксимум,
		|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.КритическийМаксимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум) КАК КритическийМаксимум,
		|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.КритическийМинимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум) КАК КритическийМинимум,
		|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР,
		|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера,
		|	ТаблицаОР.Уровень КАК Уровень
		|ПОМЕСТИТЬ ВТ_ВсеПоказатели
		|ИЗ
		|	ТаблицаОР КАК ТаблицаОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта1
		|			ПО торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = торо_ИзмеряемыеПоказателиОбъектовРемонта1.Ссылка
		|				И (НЕ торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР)
		|		ПО ТаблицаОР.Родитель = торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеПоказатели.Показатель КАК Показатель,
		|	МИНИМУМ(ВТ_ВсеПоказатели.Уровень) КАК Уровень
		|ПОМЕСТИТЬ ВТ_Приоритеты
		|ИЗ
		|	ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеПоказатели.Показатель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеПоказатели.ОбъектРемонта,
		|	ВТ_ВсеПоказатели.Показатель,
		|	ВТ_ВсеПоказатели.ДопустимыйМинимум,
		|	ВТ_ВсеПоказатели.ДопустимыйМаксимум,
		|	ВТ_ВсеПоказатели.КритическийМаксимум,
		|	ВТ_ВсеПоказатели.КритическийМинимум,
		|	ВТ_ВсеПоказатели.ЗначенияКонтролируемыхПоказателейИзОР,
		|	ВТ_ВсеПоказатели.ТочкаЗамера,
		|	ВТ_ВсеПоказатели.Уровень КАК Уровень
		|ИЗ
		|	ВТ_Приоритеты КАК ВТ_Приоритеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
		|		ПО ВТ_Приоритеты.Показатель = ВТ_ВсеПоказатели.Показатель
		|			И ВТ_Приоритеты.Уровень = ВТ_ВсеПоказатели.Уровень
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уровень УБЫВ";
		
		Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура("ОбъектРемонта, Показатель, ДопустимыйМинимум, ДопустимыйМаксимум,
											  |КритическийМинимум, КритическийМаксимум, 
											  |ЗначенияКонтролируемыхПоказателейИзОР, ТочкаЗамера");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки,Выборка);			
				
			Если НЕ ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.ДопустимыйМаксимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.КритическийМинимум) = Тип("Число") Тогда
				СтруктураСтроки.КритическийМинимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.КритическийМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.КритическийМаксимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.ДопустимыйМаксимум = 0;
			КонецЕсли;
				
			СтруктураВозврата.Добавить(СтруктураСтроки);

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(ТиповойОР, Родитель)
	
	Если ЗначениеЗаполнено(ТиповойОР) Тогда 
		ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(ТиповойОР);
	Иначе
		ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(Родитель);
	КонецЕсли;
	
	МассивВозврата = Новый Массив;
//	Если ЗначениеЗаполнено(ТиповойОР) Тогда
	Если ТаблицаРодителей.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.Родитель КАК ТОР,
		               |	Таб.Уровень КАК Уровень
		               |ПОМЕСТИТЬ ТабРодителей
		               |ИЗ
		               |	&ТабРодитлей КАК Таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ТОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Показатель КАК Показатель,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР КАК ТиповойОР,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения КАК ВариантЗначения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение КАК Значение,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.СобытиеВозникновенияОповещения КАК СобытиеВозникновенияОповещения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВидСравнения КАК ВидСравнения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ID КАК ID,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение1 КАК Значение1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения1 КАК ВариантЗначения1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ПараметрыВводаДефекта КАК ПараметрыВводаДефекта
		               |ИЗ
		               |	ТабРодителей КАК ТабРодителей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыОповещенияОСостоянииОборудования КАК торо_ПараметрыОповещенияОСостоянииОборудования
		               |		ПО ТабРодителей.ТОР = торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР";
		//Запрос.УстановитьПараметр("ТиповойОР",ТиповойОР);
		Запрос.УстановитьПараметр("ТабРодитлей", ТаблицаРодителей);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтруктураПараметр = Новый Структура("Показатель,ТиповойОР,ВариантЗначения,Значение,
													|СобытиеВозникновенияОповещения,ВидСравнения,ID,
													|Значение1,ВариантЗначения1,ПараметрыВводаДефекта");
				ЗаполнитьЗначенияСвойств(СтруктураПараметр,Выборка);				
				МассивВозврата.Добавить(СтруктураПараметр);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат МассивВозврата;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтрокуДанными(Строка, ИзмеряемыйПоказатель)
	
	СтруктураЗначенийПолей = ПолучитьЗначениеРеквизитов(ИзмеряемыйПоказатель);
	СтруктураЗначенийПолей.Вставить("ОбъектРемонта", Объект.Ссылка);
	СтруктураЗначенийПолей.Вставить("Показатель"   , ИзмеряемыйПоказатель);
	Если ЗначениеЗаполнено(ИзмеряемыйПоказатель) Тогда
		СтруктураЗначенийПолей.Вставить("Доступность", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ИзмеряемыйПоказатель, "ТипЗначения").СодержитТип(Тип("Число")));
	Иначе
		СтруктураЗначенийПолей.Вставить("Доступность", Ложь);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, СтруктураЗначенийПолей);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитов(ИзмеряемыйПоказатель)
	
	СтруктураЗначенийПолей = Новый Структура();
	Для каждого Реквизит Из ИзмеряемыйПоказатель.Метаданные().Реквизиты Цикл
	
		СтруктураЗначенийПолей.Вставить(Реквизит.Имя, ИзмеряемыйПоказатель[Реквизит.Имя]);
	
	КонецЦикла;
 	Возврат СтруктураЗначенийПолей;
	
КонецФункции

#КонецОбласти

#Область НормативныеРемонты

&НаСервере
Функция ПолучитьПредшествующиеИлиНормативные(ИмяВторойКолонки)
	
	Если ИмяВторойКолонки = "ПредшествующийВидРемонта" Тогда
		ТЗПредшествующихИлиЗамещаемых = Объект.ПредшествующиеРемонты.Выгрузить();
		
		ТЗНормативных = Объект.НормативныеРемонты.Выгрузить();
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТЗПредшествующихИлиЗамещаемых.ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.%ВидРемонта
		|ПОМЕСТИТЬ ТЗПредшествующихИлиЗамещаемых 
		|ИЗ
		|	&ТЗПредшествующихИлиЗамещаемых КАК ТЗПредшествующихИлиЗамещаемых
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗНормативных.ВидРемонта,
		|	ТЗНормативных.Статус
		|ПОМЕСТИТЬ ТЗНормативных
		|ИЗ
		|	&ТЗНормативных КАК ТЗНормативных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗНормативных.ВидРемонта
		|ПОМЕСТИТЬ ДействующиеВР
		|ИЗ
		|	ТЗНормативных КАК ТЗНормативных
		|ГДЕ
		|	ТЗНормативных.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗПредшествующихИлиЗамещаемых.ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.%ВидРемонта
		|ИЗ
		|	ДействующиеВР КАК ДействующиеВР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗПредшествующихИлиЗамещаемых КАК ТЗПредшествующихИлиЗамещаемых
		|		ПО ДействующиеВР.ВидРемонта = ТЗПредшествующихИлиЗамещаемых.ВидРемонта
		|			И (ТЗПредшествующихИлиЗамещаемых.%ВидРемонта В
		|				(ВЫБРАТЬ
		|					ДействующиеВР.ВидРемонта
		|				ИЗ
		|					ДействующиеВР КАК ДействующиеВР))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидРемонта", ИмяВторойКолонки);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТЗПредшествующихИлиЗамещаемых", ТЗПредшествующихИлиЗамещаемых);
		Запрос.УстановитьПараметр("ТЗНормативных", ТЗНормативных);
		Возврат Запрос.Выполнить().Выгрузить();		
	ИначеЕсли ИмяВторойКолонки = "ЗамещаемыйВидРемонта" Тогда
		ТЗПредшествующихИлиЗамещаемых = Объект.ЗамещаемыеРемонты.Выгрузить();
		
		ТЗНормативных = Объект.НормативныеРемонты.Выгрузить();
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТЗПредшествующихИлиЗамещаемых.ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.%ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.СпособЗамещения,
		|	ТЗПредшествующихИлиЗамещаемых.НачальнаяГраница,
		|	ТЗПредшествующихИлиЗамещаемых.КонечнаяГраница
		|ПОМЕСТИТЬ ТЗПредшествующихИлиЗамещаемых 
		|ИЗ
		|	&ТЗПредшествующихИлиЗамещаемых КАК ТЗПредшествующихИлиЗамещаемых
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗНормативных.ВидРемонта,
		|	ТЗНормативных.Статус
		|ПОМЕСТИТЬ ТЗНормативных
		|ИЗ
		|	&ТЗНормативных КАК ТЗНормативных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗНормативных.ВидРемонта
		|ПОМЕСТИТЬ ДействующиеВР
		|ИЗ
		|	ТЗНормативных КАК ТЗНормативных
		|ГДЕ
		|	ТЗНормативных.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗПредшествующихИлиЗамещаемых.ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.%ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.СпособЗамещения,
		|	ТЗПредшествующихИлиЗамещаемых.НачальнаяГраница,
		|	ТЗПредшествующихИлиЗамещаемых.КонечнаяГраница
		|ИЗ
		|	ДействующиеВР КАК ДействующиеВР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗПредшествующихИлиЗамещаемых КАК ТЗПредшествующихИлиЗамещаемых
		|		ПО ДействующиеВР.ВидРемонта = ТЗПредшествующихИлиЗамещаемых.ВидРемонта
		|			И (ТЗПредшествующихИлиЗамещаемых.%ВидРемонта В
		|				(ВЫБРАТЬ
		|					ДействующиеВР.ВидРемонта
		|				ИЗ
		|					ДействующиеВР КАК ДействующиеВР))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидРемонта", ИмяВторойКолонки);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТЗПредшествующихИлиЗамещаемых", ТЗПредшествующихИлиЗамещаемых);
		Запрос.УстановитьПараметр("ТЗНормативных", ТЗНормативных);
		Возврат Запрос.Выполнить().Выгрузить();		
	КонецЕсли;
	
	Если ТЗПредшествующихИлиЗамещаемых = Неопределено Тогда	
		Возврат ТЗПредшествующихИлиЗамещаемых;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОРиВРИзТиповогоОР2(ТиповойОР, ИмяТЧ, ИмяРегистра, тч)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК ОР
	               |ПОМЕСТИТЬ ВТ_ОРы
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.ТиповойОР = &ТиповойОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТОР.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ТОР
	               |ИЗ
	               |	&ТОР КАК ТОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОРы.ОР КАК ОР,
	               |	ВТ_ТОР.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ОРыИВидыРабот
	               |ИЗ
	               |	ВТ_ОРы КАК ВТ_ОРы,
	               |	ВТ_ТОР КАК ВТ_ТОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОР,
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ОРыИВидыРабот.ОР КАК ОбъектРемонта,
	               |	ВТ_ОРыИВидыРабот.ВидРемонта,
				   	|	(ВЫБОР КОГДА ДанныеРегистра.Приоритет ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Приоритет
	               |ИЗ
	               |	ВТ_ОРыИВидыРабот КАК ВТ_ОРыИВидыРабот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ ИмяРегистра +" КАК ДанныеРегистра
	               |		ПО ВТ_ОРыИВидыРабот.ОР = ДанныеРегистра.ОбъектРемонта
	               |			И ВТ_ОРыИВидыРабот.ВидРемонта = ДанныеРегистра.ВидРемонта
	               |			И (ДанныеРегистра.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ТОР", тч.выгрузить(,"ВидРемонта"));

	Запрос.УстановитьПараметр("ТиповойОР", ТиповойОР);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата.Добавить(Новый Структура("ОбъектРемонта, ВидРемонта, Приоритет", Выборка.ОбъектРемонта, Выборка.ВидРемонта, Выборка.Приоритет));
	КонецЦикла;
	Возврат СтруктураВозврата;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеГрафикаРемРаботНаСервере()
	
	Возврат Константы.торо_ГрафикРемонтныхРабот.Получить();
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИсходныеСтатусыНормативныхРемонтовИИзменитьЗаголовок()
	
	ЕстьНеУтвержденныеНормативныеРемонты = Ложь;
	ЕстьУтвержденныеНормативныеРемонты = Ложь;
	
	СтатусыНормативныхРемонтовДоИзменений.Очистить();
	Для Каждого Строка Из Объект.НормативныеРемонты Цикл
		НС = СтатусыНормативныхРемонтовДоИзменений.Добавить();
		НС.Статус = Строка.Статус;
		НС.ИсходныйНомерСтроки = Строка.ИсходныйНомерСтроки;
		
		Если Строка.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует") Тогда
			ЕстьУтвержденныеНормативныеРемонты = Истина;
		Иначе
			ЕстьНеУтвержденныеНормативныеРемонты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка") Тогда
		Если Объект.ЭтоГруппа Тогда
			ЭтаФорма.Заголовок = НСтр("ru = 'Типовые объекты ремонта (Создание группы)'");
		Иначе	
			ЭтаФорма.Заголовок = НСтр("ru = 'Типовой объект ремонта (Создание)'");
		КонецЕсли; 
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = '(Типовой объект ремонта) '") + Объект.Наименование;
	КонецЕсли;
	
	Если ЕстьУтвержденныеНормативныеРемонты И ЕстьНеУтвержденныеНормативныеРемонты Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Нормативы утверждены частично]'");
	ИначеЕсли ЕстьУтвержденныеНормативныеРемонты И Не ЕстьНеУтвержденныеНормативныеРемонты Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Нормативы утверждены]'");
	ИначеЕсли Не ЕстьУтвержденныеНормативныеРемонты И ЕстьНеУтвержденныеНормативныеРемонты Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Нормативы не утверждены]'");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРедактированияНормативныхРемонтов()
	
	ДоступностьЭлем = (Элементы.НормативныеРемонты.ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
		
	Элементы.ЗамещаемыеРемонты.Доступность = ДоступностьЭлем;
	Элементы.ПредшествующиеРемонты.Доступность = ДоступностьЭлем;
	Элементы.ИспользоватьКоэффициентыРемонтныхОсобенностей.Доступность = ДоступностьЭлем;
	Элементы.НеИспользоватьВПланировании.Доступность = ДоступностьЭлем;
	Элементы.НеУчитыватьПриПланированииГрафикРаботОборудования.Доступность = ДоступностьЭлем;
	Элементы.НеУчитыватьПриПланированииГрафикРемонтныхРабот.Доступность = ДоступностьЭлем;
	Элементы.НеУчитыватьПродолжительность.Доступность = ДоступностьЭлем;
	Элементы.НормативныеРемонтыРазрешитьСокращатьМежремонтныйПериодПриПланировании.Доступность = ДоступностьЭлем;
	Элементы.УчитыватьПростоиОборудования.Доступность = ДоступностьЭлем;
	Элементы.НормативныеРемонтыРассчитыватьНаработкуВПростое.Доступность = ДоступностьЭлем;
	Элементы.НормативныеРемонтыИспользоватьДатыЗамещающихРемонтов.Доступность = ДоступностьЭлем;
	Элементы.ГрафикРемонтныхРабот.Доступность = ДоступностьЭлем;
	Элементы.СпособВыполнения.Доступность = ДоступностьЭлем;
	Элементы.СпособУчетаДатыОтсчета.Доступность = ДоступностьЭлем;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусДляНовойСтрокиНормРемонтов(ТекИдентификаторСтроки)
	
	ТекСтрока = Объект.НормативныеРемонты.НайтиПоИдентификатору(ТекИдентификаторСтроки);
	Если Не ТекСтрока = Неопределено Тогда		
		ТекСтрока.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеСтрокиНормативногоРемонта(ТекущиеДанные)
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидРемонта) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите вид ремонта.'");
	Иначе
		Строки = Объект.НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта",ТекущиеДанные.ВидРемонта));
		Если Строки.Количество()> 1 Тогда
			ТекстОшибки = НСтр("ru = 'Данный вид ремонта уже указан в другой строке.'");
		Конецесли;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеПредшествующихРемонтов(Отказ)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НормативныеРемонты.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_НормативныеРемонты
	               |ИЗ
	               |	&НормативныеРемонты КАК НормативныеРемонты
	               |ГДЕ
	               |	НормативныеРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПредшествующиеРемонты.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ПредшествующиеРемонты
	               |ИЗ
	               |	&ПредшествующиеРемонты КАК ПредшествующиеРемонты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НормативныеРемонты.ВидРемонта КАК ВидРемонта
	               |ИЗ
	               |	ВТ_НормативныеРемонты КАК ВТ_НормативныеРемонты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредшествующиеРемонты КАК ВТ_ПредшествующиеРемонты
	               |		ПО ВТ_НормативныеРемонты.ВидРемонта = ВТ_ПредшествующиеРемонты.ВидРемонта
	               |ГДЕ
	               |	ВТ_ПредшествующиеРемонты.ВидРемонта ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("НормативныеРемонты", Объект.НормативныеРемонты.Выгрузить());
	Запрос.УстановитьПараметр("ПредшествующиеРемонты", Объект.ПредшествующиеРемонты.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаВР = РезультатЗапроса.Выбрать();
	Пока ВыборкаВР.Следующий() Цикл
		ШаблонСообщения = НСтр("ru = 'Ремонт ""%1"" в нормативных ремонтах переведен в статус ""Действует"". Для него не заполнены предшествующие ремонты. Запись была отменена!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаВР.ВидРемонта);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВычислениеМежремонтногоИнтервала(ТекДанные)
	
	Перем МежремонтныйИнтервал;
	
	Запрос = Новый Запрос;
	Таб = Объект.НормативныеРемонты.Выгрузить(,"ВидРемонта, СпособПланирования");
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.СпособПланирования
	|ПОМЕСТИТЬ ОпредСпособПланирования
	|ИЗ
	|	&Таб КАК Таб
	|ГДЕ
	|	Таб.ВидРемонта = &ВидРемонта
	|	И Таб.СпособПланирования <>ЗНАЧЕНИЕ(Справочник.торо_СпособыПланированияРемонтныхРабот.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПараметрыНаработки,
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПериодичность,
	|	торо_СпособыПланированияРемонтныхРабот.КоличествоПериодов,
	|	торо_СпособыПланированияРемонтныхРабот.ПериодичностьРемонтныхРабот КАК Периодичность,
	|	ОпредСпособПланирования.СпособПланирования КАК СпособПланирования
	|ИЗ
	|	ОпредСпособПланирования КАК ОпредСпособПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_СпособыПланированияРемонтныхРабот КАК торо_СпособыПланированияРемонтныхРабот
	|		ПО ОпредСпособПланирования.СпособПланирования = торо_СпособыПланированияРемонтныхРабот.Ссылка";
	
	
	Запрос.УстановитьПараметр("ВидРемонта", ТекДанные.ЗамещаемыйВидРемонта);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДляПериодичности = Результат.Выбрать();
	
	Если ВыборкаДляПериодичности.Следующий() Тогда
		
		Если ВыборкаДляПериодичности.ИспользоватьПериодичность Тогда
			
			Если ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Год Тогда
				Период = 365;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Полугодие Тогда
				Период = 182;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Квартал Тогда
				Период = 90;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Месяц Тогда
				Период = 28;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Декада Тогда
				Период = 10;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Неделя Тогда
				Период = 7;
			Иначе Период = 1;
			КонецЕсли;
			
			МежремонтныйИнтервал = ВыборкаДляПериодичности.КоличествоПериодов * Период;
			
		КонецЕсли;
		
		Если ВыборкаДляПериодичности.ИспользоватьПараметрыНаработки Тогда
			
			Запрос3 = Новый Запрос;
			
			Если СписокПараметровНаработки.Количество() > 0 Тогда
				
				ТаблНараб = СписокПараметровНаработки.Выгрузить(, "ОбъектРемонта,Показатель,ПродолжительностьПериодаПлановойНаработки,ПериодПлановойНаработки,ПлановаяНаработка,КоэффициентИспользованияОборудования"); 
				
			Иначе
				
				СписокОтбора = Новый СписокЗначений;
				СписокОтбора.Добавить(Объект.Ссылка);
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
				|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
				|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
				|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
				|ИЗ
				|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
				|ГДЕ
				|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта В(&СписокОтбора)";
				
				Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
				
				Результат = Запрос.Выполнить();
				ТаблНараб = Результат.Выгрузить();
				
			КонецЕсли;
			
			Запрос3.УстановитьПараметр("ТаблНараб", ТаблНараб);
			
			
			Запрос3.Текст = 
			"ВЫБРАТЬ
			|	ТаблНараб.Показатель,
			|	ТаблНараб.ПродолжительностьПериодаПлановойНаработки,
			|	ТаблНараб.ПериодПлановойНаработки,
			|	ТаблНараб.ПлановаяНаработка * ТаблНараб.КоэффициентИспользованияОборудования КАК ПлановаяНаработка
			|ПОМЕСТИТЬ ВыбрПараметрыНаработки
			|ИЗ
			|	&ТаблНараб КАК ТаблНараб
			|ГДЕ
			|	ТаблНараб.ОбъектРемонта = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки,
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ПараметрНаработки
			|ПОМЕСТИТЬ ВыбрСпобобыПланирования
			|ИЗ
			|	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
			|ГДЕ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыбрСпобобыПланирования.ЗначениеПараметраНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки,0) КАК ПродолжительностьПериодаПлановойНаработки,
			|	ВыбрПараметрыНаработки.ПериодПлановойНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПлановаяНаработка,0) КАК ПлановаяНаработка
			|ИЗ
			|	ВыбрСпобобыПланирования КАК ВыбрСпобобыПланирования
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыбрПараметрыНаработки КАК ВыбрПараметрыНаработки
			|		ПО ВыбрСпобобыПланирования.ПараметрНаработки = ВыбрПараметрыНаработки.Показатель";
			
			
			Запрос3.УстановитьПараметр("Ссылка", ВыборкаДляПериодичности.СпособПланирования);
			Запрос3.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
			
			Результат = Запрос3.Выполнить();
			
			ВыборкаДляНаработки = Результат.Выбрать();
			ВыборкаДляНаработки.Следующий();
			
			Если ВыборкаДляНаработки.ПлановаяНаработка > 0 И ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки > 0 Тогда
				
				
				Если ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Год Тогда
					ПериодПлановойНаработки = 365;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Полугодие Тогда
					ПериодПлановойНаработки = 183;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Квартал Тогда
					ПериодПлановойНаработки = 90;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Месяц Тогда
					ПериодПлановойНаработки = 30;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Декада Тогда
					ПериодПлановойНаработки = 10;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Неделя Тогда
					ПериодПлановойНаработки = 7;
				Иначе ПериодПлановойНаработки = 1;
				КонецЕсли;
				
				ПериодВДнях = ПериодПлановойНаработки * ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки;
				ПланНарабВДень = ВыборкаДляНаработки.ПлановаяНаработка / ПериодВДнях;
				
				МежремИнтервал = ВыборкаДляНаработки.ЗначениеПараметраНаработки / ПланНарабВДень;
				Если ЗначениеЗаполнено(МежремонтныйИнтервал) Тогда
					Если МежремИнтервал < МежремонтныйИнтервал Тогда
						МежремонтныйИнтервал = МежремИнтервал;
					КонецЕсли;
				Иначе МежремонтныйИнтервал = МежремИнтервал;
				КонецЕсли;
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверьте заполнение показателей на вкладке ""Наработка"", Параметров планирования по наработке в способе планирования %1'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаДляПериодичности.СпособПланирования);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Проверьте заполнение ""Способ планирования""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат МежремонтныйИнтервал;
КонецФункции 

&НаСервере
Функция ПроверитьПересеченияСЦепочкойНаСервере(ТекВидРемонта, МасВидовЦепочек)
	
	СтандартнаяОбработка = Истина;
	
	Если ЗначениеЗаполнено(ТекВидРемонта) Тогда
		
		Если НЕ ЗначениеЗаполнено(МасВидовЦепочек) И НЕ МодифицированностьРемЦиклов Тогда
			ВидыЦепочек = ПолучитьФиксированныеРемонтныеЦиклы(Объект.Ссылка);
			Для Каждого ЭлементВидовЦепочек Из ВидыЦепочек Цикл
				МасВидовЦепочек.Добавить(ЭлементВидовЦепочек.ВидЦепочки);
			КонецЦикла;	
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
		               |ГДЕ
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка В(&МассивВидовЦепочек)
		               |	И торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта = &ВидРемонта";
		
		Запрос.УстановитьПараметр("МассивВидовЦепочек", МасВидовЦепочек);
		Запрос.УстановитьПараметр("ВидРемонта", ТекВидРемонта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтандартнаяОбработка = Ложь;
			ШаблонСообщения = НСтр("ru = 'Вид ремонта ""%1"" уже есть в выбранной цепочке ""%2"" в фиксированных ремонтных циклах!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта, Выборка.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;

	Возврат СтандартнаяОбработка;
	
КонецФункции

#КонецОбласти

#Область РемонтныеЦиклы

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФиксированныеРемонтныеЦиклы(Объект, ТабличноеПолеРемонтныеЦиклыОборудования)
	
	МассивЦепочек = ПолучитьФиксированныеРемонтныеЦиклы(Объект.Ссылка);
	ТабличноеПолеРемонтныеЦиклыОборудования.Очистить();
	Для каждого Элем Из МассивЦепочек Цикл
		НС = ТабличноеПолеРемонтныеЦиклыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФиксированныеРемонтныеЦиклы(ТиповойОР)
	
	МассивЦепочек = Новый Массив;
	
	Если ЗначениеЗаполнено(ТиповойОР) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РемонтныеЦиклыОборудования.ВидЦепочки,
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов,
		|	торо_РемонтныеЦиклыОборудования.НеУчитыватьПростоиОборудования
		|ИЗ
		|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
		|ГДЕ
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов = &ГруппаОбъектовРемонтов";
		
		Запрос.УстановитьПараметр("ГруппаОбъектовРемонтов", ТиповойОР);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		МассивЦепочек = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			Структ = Новый Структура("ВидЦепочки, ГруппаОбъектовРемонтов, НеУчитыватьПростоиОборудования");
			ЗаполнитьЗначенияСвойств(Структ, Выборка);
			МассивЦепочек.Добавить(Структ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЦепочек;
	
КонецФункции

&НаСервере
Функция ПроверитьПересеченияНаСервере(ТекЦепочка)
	
	СтандартнаяОбработка = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Ремонты
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта КАК ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РемонтыНовые
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ремонты.ВидРемонта КАК ВидРемонтаСтарый,
	|	РемонтыНовые.ВидРемонта КАК ВидРемонтаНовый,
	|	Ремонты.Ссылка КАК Ссылка
	|ИЗ
	|	Ремонты КАК Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыНовые КАК РемонтыНовые
	|		ПО Ремонты.ВидРемонта = РемонтыНовые.ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ОбъектыРемонта
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.ТиповойОР = &ТиповойОР
	|	И &ТиповойОР <> ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_РемонтныеЦиклыОборудования.ВидЦепочки КАК ВидЦепочки,
	|	ВТ_ОбъектыРемонта.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ОбъектыРемонта КАК ВТ_ОбъектыРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	|		ПО ВТ_ОбъектыРемонта.Ссылка = торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов
	|ГДЕ
	|	торо_РемонтныеЦиклыОборудования.ВидЦепочки = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	Запрос.УстановитьПараметр("ТиповойОР", Объект.Ссылка);
	
	МассивЦепочек = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить().ВыгрузитьКолонку("ВидЦепочки");
	ИндексТекЦепочки = МассивЦепочек.Найти(ТекЦепочка);
	Если ИндексТекЦепочки <> Неопределено Тогда
		МассивЦепочек.Удалить(ИндексТекЦепочки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивЦепочек);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[2].Выбрать();
	
	флДобавлятьЦепочку = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ТекЦепочка Тогда
			флДобавлятьЦепочку = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ флДобавлятьЦепочку Тогда
		СтандартнаяОбработка = Ложь;
		ШаблонСообщения = НСтр("ru = 'Цепочку ""%1"" нельзя добавить в список фиксированных ремонтных циклов, так как она содержит виды ремонтов, входящие в другие выбранные цепочки'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекЦепочка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Выборка = Результат[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтандартнаяОбработка = Ложь;
		ШаблонСообщения = НСтр("ru = 'Цепочку ""%1"" нельзя добавить в список фиксированных ремонтных циклов, так как она уже содержится в объекте ремонта ""%2"" этого типового объекта ремонта'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекЦепочка, Выборка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	МассивРемонтов = Объект.НормативныеРемонты.Выгрузить().ВыгрузитьКолонку("ВидРемонта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|   торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта В (&МассивРемонтов)
	|	И торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("МассивРемонтов", МассивРемонтов);
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтандартнаяОбработка = Ложь;
		ШаблонСообщения = НСтр("ru = 'Вид ремонта ""%1"" из цепочки ""%2"" уже выбран в качестве нормативного ремонта!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРемонта, Выборка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПоследовательностьРемонтовНаСервере(Цепочка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НомерСтроки,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НормативныйРемонт,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособПланирования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособВыполнения,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПродолжительность
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Цепочка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	МассивРемонтов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структ = Новый Структура("НомерСтроки, ВидРемонта, НормативныйРемонт, СпособПланирования, ГрафикРемонтныхРабот, СпособВыполнения, 
		|РазрешитьСокращатьМежремонтныйПериодПриПланировании, НеУчитыватьПриПланированииГрафикРаботыОборудования, НеУчитыватьПриПланированииГрафикРемонтныхРабот, НеУчитыватьПродолжительность");
		
		ЗаполнитьЗначенияСвойств(Структ, Выборка);
		
		МассивРемонтов.Добавить(Структ);
		
	КонецЦикла;
	
	Возврат МассивРемонтов;
		
КонецФункции

#КонецОбласти

#Область Запчасти

&НаСервере 
Функция ПолучитьЗапчастиИНормативныеЗатраты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК ОР
	|ПОМЕСТИТЬ ВТ_СоставТОР
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.ТиповойОР = &ТОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТиповыеОРЗапчасти.Номенклатура КАК Номенклатура,
	|	торо_ТиповыеОРЗапчасти.Количество КАК Количество,
	|	торо_ТиповыеОРЗапчасти.Характеристика КАК Характеристика,
	|	торо_ТиповыеОРЗапчасти.Качество КАК Качество,
	|	торо_ТиповыеОРЗапчасти.Ссылка КАК ТиповойОР,
	|	ВТ_СоставТОР.ОР КАК ОР
	|ПОМЕСТИТЬ ВТ_ЗапчастиТОР
	|ИЗ
	|	Справочник.торо_ТиповыеОР.Запчасти КАК торо_ТиповыеОРЗапчасти,
	|	ВТ_СоставТОР КАК ВТ_СоставТОР
	|ГДЕ
	|	торо_ТиповыеОРЗапчасти.Ссылка = &ТОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ОР,
	|	ТиповойОР,
	|	Количество,
	|	Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_Запчасти.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_Запчасти.Номенклатура КАК Номенклатура,
	|	торо_Запчасти.Качество КАК Качество,
	|	торо_Запчасти.Характеристика КАК Характеристика,
	|	торо_Запчасти.Количество КАК Количество,
	|	торо_Запчасти.ТиповойОР КАК ТиповойОР
	|ПОМЕСТИТЬ ВТ_ЗапчастиОР
	|ИЗ
	|	РегистрСведений.торо_Запчасти КАК торо_Запчасти
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоставТОР КАК ВТ_СоставТОР
	|		ПО торо_Запчасти.ОбъектРемонта = ВТ_СоставТОР.ОР
	|ГДЕ
	|	торо_Запчасти.ТиповойОР = &ПустойТОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ОбъектРемонта,
	|	ТиповойОР,
	|	Качество,
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Характеристика КАК Характеристика,
	|	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Номенклатура КАК Номенклатура,
	|	торо_ТиповыеОРНормативныеЗатратыПриТОиР.ВидРемонта КАК ВидРемонта,
	|	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Количество КАК Количество,
	|	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Ссылка КАК ТиповойОР,
	|	ВТ_СоставТОР.ОР КАК ОР
	|ПОМЕСТИТЬ ВТ_НормЗатратыТОР
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеЗатратыПриТОиР КАК торо_ТиповыеОРНормативныеЗатратыПриТОиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|		ПО (торо_ТиповыеОРНормативныеЗатратыПриТОиР.Ссылка = &ТОР)
	|			И (торо_ТиповыеОРНормативныеРемонты.Ссылка = &ТОР)
	|			И торо_ТиповыеОРНормативныеЗатратыПриТОиР.ВидРемонта = торо_ТиповыеОРНормативныеРемонты.ВидРемонта
	|			И (торо_ТиповыеОРНормативныеРемонты.Статус = &СтатусДействует),
	|	ВТ_СоставТОР КАК ВТ_СоставТОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ОР,
	|	ТиповойОР,
	|	ВидРемонта,
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта КАК ВидРемонта,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР КАК ТиповойОР,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_НормыОР
	|ИЗ
	|	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоставТОР КАК ВТ_СоставТОР
	|		ПО торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = ВТ_СоставТОР.ОР
	|ГДЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = &ПустойТОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ТиповойОР,
	|	Характеристика,
	|	Номенклатура,
	|	ВидРемонта,
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ЗапчастиОР.ОбъектРемонта, ВТ_ЗапчастиТОР.ОР) КАК ОбъектРемонта,
	|	ЕСТЬNULL(ВТ_ЗапчастиОР.Номенклатура, ВТ_ЗапчастиТОР.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_ЗапчастиОР.Характеристика, ВТ_ЗапчастиТОР.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТ_ЗапчастиОР.Качество, ВТ_ЗапчастиТОР.Качество) КАК Качество,
	|	ЕСТЬNULL(ВТ_ЗапчастиОР.Количество, ВТ_ЗапчастиТОР.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоТиповой,
	|	ВЫБОР
	|		КОГДА торо_ЗапчастиУдаленные.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Удален
	|ПОМЕСТИТЬ ВТ_ЗапчастиТОРиОР
	|ИЗ
	|	ВТ_ЗапчастиТОР КАК ВТ_ЗапчастиТОР
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЗапчастиОР КАК ВТ_ЗапчастиОР
	|		ПО ВТ_ЗапчастиТОР.Номенклатура = ВТ_ЗапчастиОР.Номенклатура
	|			И ВТ_ЗапчастиТОР.Характеристика = ВТ_ЗапчастиОР.Характеристика
	|			И ВТ_ЗапчастиТОР.ОР = ВТ_ЗапчастиОР.ОбъектРемонта
	|			И ВТ_ЗапчастиТОР.Качество = ВТ_ЗапчастиОР.Качество
	|			И ВТ_ЗапчастиТОР.Количество = ВТ_ЗапчастиОР.Количество
	|			И ВТ_ЗапчастиТОР.ТиповойОР = ВТ_ЗапчастиОР.ТиповойОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗапчастиУдаленные КАК торо_ЗапчастиУдаленные
	|		ПО ВТ_ЗапчастиТОР.ОР = торо_ЗапчастиУдаленные.ОбъектРемонта
	|			И ВТ_ЗапчастиТОР.ТиповойОР = торо_ЗапчастиУдаленные.ТиповойОР
	|			И ВТ_ЗапчастиТОР.Номенклатура = торо_ЗапчастиУдаленные.Номенклатура
	|			И ВТ_ЗапчастиТОР.Характеристика = торо_ЗапчастиУдаленные.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗапчастиТОРиОР.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ЗапчастиТОРиОР.Номенклатура КАК Номенклатура,
	|	ВТ_ЗапчастиТОРиОР.Характеристика КАК Характеристика,
	|	ВТ_ЗапчастиТОРиОР.Качество КАК Качество,
	|	ВТ_ЗапчастиТОРиОР.Количество КАК Количество,
	|	ВТ_ЗапчастиТОРиОР.ЭтоТиповой КАК ЭтоТиповой,
	|	ВТ_ЗапчастиТОРиОР.Удален КАК Удален
	|ПОМЕСТИТЬ ВТ_Запачати_Промежуточная
	|ИЗ
	|	ВТ_ЗапчастиТОРиОР КАК ВТ_ЗапчастиТОРиОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Номенклатура,
	|	Характеристика,
	|	ЭтоТиповой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запачати_Промежуточная.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_Запачати_Промежуточная.Номенклатура КАК Номенклатура,
	|	ВТ_Запачати_Промежуточная.Характеристика КАК Характеристика,
	|	СУММА(1) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_Запчасти_Дубли
	|ИЗ
	|	ВТ_Запачати_Промежуточная КАК ВТ_Запачати_Промежуточная
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Запачати_Промежуточная.ОбъектРемонта,
	|	ВТ_Запачати_Промежуточная.Номенклатура,
	|	ВТ_Запачати_Промежуточная.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запачати_Промежуточная.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_Запачати_Промежуточная.Номенклатура КАК Номенклатура,
	|	ВТ_Запачати_Промежуточная.Характеристика КАК Характеристика,
	|	ВТ_Запачати_Промежуточная.Качество КАК Качество,
	|	ВТ_Запачати_Промежуточная.Количество КАК Количество,
	|	ВТ_Запачати_Промежуточная.ЭтоТиповой КАК ЭтоТиповой,
	|	ВЫБОР
	|		КОГДА ВТ_Запчасти_Дубли.ОбъектРемонта ЕСТЬ NULL
	|			ТОГДА ВТ_Запачати_Промежуточная.Удален
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Удален
	|ПОМЕСТИТЬ ВТ_Запчасти_БезВР
	|ИЗ
	|	ВТ_Запачати_Промежуточная КАК ВТ_Запачати_Промежуточная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запчасти_Дубли КАК ВТ_Запчасти_Дубли
	|		ПО ВТ_Запачати_Промежуточная.ОбъектРемонта = ВТ_Запчасти_Дубли.ОбъектРемонта
	|			И ВТ_Запачати_Промежуточная.Номенклатура = ВТ_Запчасти_Дубли.Номенклатура
	|			И ВТ_Запачати_Промежуточная.Характеристика = ВТ_Запчасти_Дубли.Характеристика
	|			И (ВТ_Запачати_Промежуточная.ЭтоТиповой)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_НормыОР.ОбъектРемонта, ВТ_НормЗатратыТОР.ОР) КАК ОбъектРемонта,
	|	ЕСТЬNULL(ВТ_НормыОР.Номенклатура, ВТ_НормЗатратыТОР.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_НормыОР.ВидРемонта, ВТ_НормЗатратыТОР.ВидРемонта) КАК ВидРемонта,
	|	ЕСТЬNULL(ВТ_НормыОР.Характеристика, ВТ_НормЗатратыТОР.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТ_НормыОР.Количество, ВТ_НормЗатратыТОР.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_НормЗатратыТОР.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоТиповой,
	|	ВЫБОР
	|		КОГДА торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Удален
	|ПОМЕСТИТЬ ВТ_нормЗатратыТОРиОР
	|ИЗ
	|	ВТ_НормЗатратыТОР КАК ВТ_НормЗатратыТОР
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_НормыОР КАК ВТ_НормыОР
	|		ПО ВТ_НормЗатратыТОР.Номенклатура = ВТ_НормыОР.Номенклатура
	|			И ВТ_НормЗатратыТОР.Характеристика = ВТ_НормыОР.Характеристика
	|			И ВТ_НормЗатратыТОР.ВидРемонта = ВТ_НормыОР.ВидРемонта
	|			И ВТ_НормЗатратыТОР.ОР = ВТ_НормыОР.ОбъектРемонта
	|			И ВТ_НормЗатратыТОР.ТиповойОР = ВТ_НормыОР.ТиповойОР
	|			И ВТ_НормЗатратыТОР.Количество = ВТ_НормыОР.Количество
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные КАК торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
	|		ПО ВТ_НормЗатратыТОР.ОР = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта
	|			И ВТ_НормЗатратыТОР.ТиповойОР = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ТиповойОР
	|			И ВТ_НормЗатратыТОР.Номенклатура = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура
	|			И ВТ_НормЗатратыТОР.Характеристика = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Характеристика
	|			И ВТ_НормЗатратыТОР.ВидРемонта = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ВидРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ВидРемонта,
	|	Номенклатура,
	|	Характеристика,
	|	ЭтоТиповой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_нормЗатратыТОРиОР.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_нормЗатратыТОРиОР.Номенклатура КАК Номенклатура,
	|	ВТ_нормЗатратыТОРиОР.ВидРемонта КАК ВидРемонта,
	|	ВТ_нормЗатратыТОРиОР.Характеристика КАК Характеристика,
	|	СУММА(1) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_ДублиВР
	|ИЗ
	|	ВТ_нормЗатратыТОРиОР КАК ВТ_нормЗатратыТОРиОР
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_нормЗатратыТОРиОР.Номенклатура,
	|	ВТ_нормЗатратыТОРиОР.ВидРемонта,
	|	ВТ_нормЗатратыТОРиОР.ОбъектРемонта,
	|	ВТ_нормЗатратыТОРиОР.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ВидРемонта,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_нормЗатратыТОРиОР.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_нормЗатратыТОРиОР.Номенклатура КАК Номенклатура,
	|	ВТ_нормЗатратыТОРиОР.ВидРемонта КАК ВидРемонта,
	|	ВТ_нормЗатратыТОРиОР.Характеристика КАК Характеристика,
	|	ВТ_нормЗатратыТОРиОР.Количество КАК Количество,
	|	ВТ_нормЗатратыТОРиОР.ЭтоТиповой КАК ЭтоТиповой,
	|	ВЫБОР
	|		КОГДА ВТ_ДублиВР.Номенклатура ЕСТЬ NULL
	|				И ВТ_Запчасти_Дубли.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВТ_нормЗатратыТОРиОР.Удален
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Удален
	|ПОМЕСТИТЬ ВТ_ВР_Финальная
	|ИЗ
	|	ВТ_нормЗатратыТОРиОР КАК ВТ_нормЗатратыТОРиОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДублиВР КАК ВТ_ДублиВР
	|		ПО ВТ_нормЗатратыТОРиОР.ОбъектРемонта = ВТ_ДублиВР.ОбъектРемонта
	|			И ВТ_нормЗатратыТОРиОР.Номенклатура = ВТ_ДублиВР.Номенклатура
	|			И ВТ_нормЗатратыТОРиОР.ВидРемонта = ВТ_ДублиВР.ВидРемонта
	|			И ВТ_нормЗатратыТОРиОР.Характеристика = ВТ_ДублиВР.Характеристика
	|			И (ВТ_нормЗатратыТОРиОР.ЭтоТиповой)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запчасти_Дубли КАК ВТ_Запчасти_Дубли
	|		ПО ВТ_нормЗатратыТОРиОР.ОбъектРемонта = ВТ_Запчасти_Дубли.ОбъектРемонта
	|			И ВТ_нормЗатратыТОРиОР.Номенклатура = ВТ_Запчасти_Дубли.Номенклатура
	|			И ВТ_нормЗатратыТОРиОР.Характеристика = ВТ_Запчасти_Дубли.Характеристика
	|			И (ВТ_нормЗатратыТОРиОР.ЭтоТиповой)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.ОбъектРемонта, ВТ_ВР_Финальная.ОбъектРемонта) КАК ОбъектРемонта,
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.Номенклатура, ВТ_ВР_Финальная.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.Характеристика, ВТ_ВР_Финальная.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.Качество, &ПустоеКачество) КАК Качество,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_Запчасти_БезВР.Количество, ВТ_ВР_Финальная.Количество)) КАК Количество,
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.ЭтоТиповой, ЛОЖЬ) КАК ЭтоТиповой,
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.Удален, ЛОЖЬ) КАК Удален,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ВР_Финальная.Количество, 0)) КАК КоличествоДляПроверки
	|ИЗ
	|	ВТ_Запчасти_БезВР КАК ВТ_Запчасти_БезВР
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВР_Финальная КАК ВТ_ВР_Финальная
	|		ПО ВТ_Запчасти_БезВР.ОбъектРемонта = ВТ_ВР_Финальная.ОбъектРемонта
	|			И ВТ_Запчасти_БезВР.Номенклатура = ВТ_ВР_Финальная.Номенклатура
	|			И ВТ_Запчасти_БезВР.Характеристика = ВТ_ВР_Финальная.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.Номенклатура, ВТ_ВР_Финальная.Номенклатура),
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.Характеристика, ВТ_ВР_Финальная.Характеристика),
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.Качество, &ПустоеКачество),
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.ЭтоТиповой, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.Удален, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_Запчасти_БезВР.ОбъектРемонта, ВТ_ВР_Финальная.ОбъектРемонта)
	|ИТОГИ ПО
	|	ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВР_Финальная.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ВР_Финальная.Номенклатура КАК Номенклатура,
	|	ВТ_ВР_Финальная.ВидРемонта КАК ВидРемонта,
	|	ВТ_ВР_Финальная.Характеристика КАК Характеристика,
	|	ВТ_ВР_Финальная.Количество КАК Количество,
	|	ВТ_ВР_Финальная.ЭтоТиповой КАК ЭтоТиповой,
	|	ВТ_ВР_Финальная.Удален КАК Удален
	|ИЗ
	|	ВТ_ВР_Финальная КАК ВТ_ВР_Финальная
	|ИТОГИ ПО
	|	ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ТОР", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустойТОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует);
	Запрос.УстановитьПараметр("ПустоеКачество", Перечисления.ГрадацииКачества.ПустаяСсылка());
	
	Результат = Запрос.ВыполнитьПакет();
	
	струкВозврата = Новый Структура;
	струкВозврата.Вставить("Запчасти", Результат[12].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	струкВозврата.Вставить("НормативныеЗатраты", Результат[13].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат струкВозврата;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСвязанныеСтрокиПоЗапчастям(Запчасть, Характеристика)
	
	СтрокиНормативов = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Запчасть, Характеристика));
	
	Для Каждого Стр Из СтрокиНормативов Цикл
		Объект.НормативныеЗатратыПриТОиР.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		НайС = Объект.Запчасти.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", текСтрока.Номенклатура, текСтрока.Характеристика));
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		
		Если НайС.Количество() = 0 Тогда
			нс = Объект.Запчасти.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс.Количество = текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
		Иначе
			выбСтрока = НайС[0];
			выбСтрока.Количество = выбСтрока.Количество + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
		КонецЕсли;
		
	КонецЦикла;
	
	МодифицированностьЗапчастей = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОценкиРМ

&НаКлиенте
Процедура ЗаполнитьОценкиРМ()
	
	Если НЕ ТаблицаОценокРММодифицированность Тогда
		МассивВозврата = ПрочитатьОценкиРМ(Объект.Ссылка);
		
		РСНЗТаблицаОценокРМ.Очистить();
		
		Для каждого Элем Из МассивВозврата Цикл
			НС = РСНЗТаблицаОценокРМ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
		ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОценкиРМ(ОтображатьИсторию = Истина)
	
	Если ОтображатьИсторию Тогда
		ТаблицаОценокРМ.Загрузить(РСНЗТаблицаОценокРМ.Выгрузить());
	Иначе
		
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(Объект.Ссылка);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_РМРемонтов.ВидРемонта КАК ВидРемонта,
		               |	торо_РМРемонтов.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
		               |	торо_РМРемонтов.Период КАК Период,
		               |	торо_РМРемонтов.Сезон КАК Сезон,
		               |	торо_РМРемонтов.ВероятностьВыходаИзСтроя КАК ВероятностьВыходаИзСтроя,
		               |	торо_РМРемонтов.Ущерб КАК Ущерб
		               |ПОМЕСТИТЬ РСНаборЗаписей
		               |ИЗ
		               |	&РСНаборЗаписей КАК торо_РМРемонтов
		               |ГДЕ
		               |	торо_РМРемонтов.Период <= &КонецПериода
		               |	И торо_РМРемонтов.Период >= &НачалоПериода
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_РМРемонтов.ВидРемонта КАК ВидРемонта,
		               |	торо_РМРемонтов.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
		               |	МАКСИМУМ(торо_РМРемонтов.Период) КАК Период,
		               |	торо_РМРемонтов.Сезон КАК Сезон
		               |ПОМЕСТИТЬ ДатыСреза
		               |ИЗ
		               |	РСНаборЗаписей КАК торо_РМРемонтов
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	торо_РМРемонтов.ГруппаОбъектовРемонтов,
		               |	торо_РМРемонтов.ВидРемонта,
		               |	торо_РМРемонтов.Сезон
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РСНаборЗаписей.ГруппаОбъектовРемонтов КАК ГруппаОбъектовРемонтов,
		               |	РСНаборЗаписей.ВидРемонта КАК ВидРемонта,
		               |	РСНаборЗаписей.Сезон КАК Сезон,
		               |	РСНаборЗаписей.Период КАК Период,
		               |	РСНаборЗаписей.ВероятностьВыходаИзСтроя КАК ВероятностьВыходаИзСтроя,
		               |	РСНаборЗаписей.Ущерб КАК Ущерб
		               |ИЗ
		               |	ДатыСреза КАК ДатыСреза
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РСНаборЗаписей КАК РСНаборЗаписей
		               |		ПО ДатыСреза.ГруппаОбъектовРемонтов = РСНаборЗаписей.ГруппаОбъектовРемонтов
		               |			И ДатыСреза.ВидРемонта = РСНаборЗаписей.ВидРемонта
		               |			И ДатыСреза.Сезон = РСНаборЗаписей.Сезон
		               |			И ДатыСреза.Период = РСНаборЗаписей.Период
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период";
		
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущаяДата()));
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ТекущаяДата()));
		Запрос.УстановитьПараметр("РСНаборЗаписей", РСНЗТаблицаОценокРМ.Выгрузить());
		
		Результат = Запрос.Выполнить();
		ТаблицаОценокРМ.Загрузить(Результат.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьОценкиРМ(ОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РМРемонтов.ВидРемонта,
	|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
	|	торо_РМРемонтов.Период КАК Период,
	|	торо_РМРемонтов.Сезон,
	|	торо_РМРемонтов.ВероятностьВыходаИзСтроя,
	|	торо_РМРемонтов.Ущерб
	|ИЗ
	|	РегистрСведений.торо_РМРемонтов КАК торо_РМРемонтов
	|ГДЕ
	|	торо_РМРемонтов.ГруппаОбъектовРемонтов = &ГруппаОбъектовРемонтов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("ГруппаОбъектовРемонтов", ОР);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСтруктур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтруктураРМ = Новый Структура("ВидРемонта, ГруппаОбъектовРемонтов, Период, Сезон, ВероятностьВыходаИзСтроя, Ущерб, ТиповойОР");
		ЗаполнитьЗначенияСвойств(СтруктураРМ, Выборка);
		МассивСтруктур.Добавить(СтруктураРМ);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеОбИзмененииРМ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия <> Неопределено Тогда
		РезультатТаблица = Новый ТаблицаЗначений;
		РезультатТаблица.Колонки.Добавить("НомерСтроки");
		РезультатТаблица.Колонки.Добавить("Период");
		РезультатТаблица.Колонки.Добавить("ВидРемонта");
		РезультатТаблица.Колонки.Добавить("Сезон");
		РезультатТаблица.Колонки.Добавить("ВероятностьВыходаИзСтроя");
		РезультатТаблица.Колонки.Добавить("Ущерб");
		Для каждого Элемент Из РезультатЗакрытия Цикл
			НовСтрока = РезультатТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
		КонецЦикла; 
		Для каждого Строка Из ТаблицаОценокРМ Цикл
			НайденныеСтроки = РезультатТаблица.НайтиСтроки(Новый Структура("НомерСтроки", ТаблицаОценокРМ.Индекс(Строка)+1));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
		Для каждого Строка Из РСНЗТаблицаОценокРМ Цикл
			НайденныеСтроки = РезультатТаблица.НайтиСтроки(Новый Структура("НомерСтроки", РСНЗТаблицаОценокРМ.Индекс(Строка)+1));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;		
		ТаблицаОценокРММодифицированность = Истина;
		Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСИзображением
&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИзображение(Команда)
	
	ОтображатьИзображение = Не ОтображатьИзображение;
	Элементы.ФормаПоказатьСкрытьИзображение.Пометка = ОтображатьИзображение;
	Элементы.СтраницаИзображение.Видимость = ОтображатьИзображение;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)
	
	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
	Иначе
		АдресКартинки = "";
	Конецесли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторФормы;
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ПараметрыДанныхФайла).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Если ЭтаФорма.ПроверитьЗаполнение() Тогда
			 Если ЭтаФорма.Записать() Тогда
				 ДобавитьИзображениеФрагмент();
			 КонецЕсли;
		 КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
    
    ВыборИзображения = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, торо_ОбщегоНазначенияКлиентСервер.ФильтрФайловИзображений());
    ВыборИзображения = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Если ЭтаФорма.ПроверитьЗаполнение() Тогда
			 Если ЭтаФорма.Записать() Тогда
				 ДобавитьИзображениеНаКлиентеФрагмент();
			 КонецЕсли;
		 КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, торо_ОбщегоНазначенияКлиентСервер.ФильтрФайловИзображений());
    ВыборИзображения   = Ложь;

КонецПроцедуры
#КонецОбласти

#Область ДополнительныеРеквизиты

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,,, "НаборСвойствОР");
	торо_УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойствОР);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СоставОР

&НаСервере
Процедура УстановитьПараметрСпискаСоставОР()
	
	ЗначениеПараметра = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено);
	СписокОР.Параметры.УстановитьЗначениеПараметра("ТиповойОР", ЗначениеПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ПослеВопросаОЗаписи(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьВыполнена = Записать();
	Если Не ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	Подбор_Завершение();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_Завершение()

	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, ИспользоватьВариантУчетаИерархииЭлементов, 
									  |МножественныйВыбор, КлючНазначенияИспользования");
	ПараметрыФормы.ЗакрыватьПриВыборе = Ложь;
	ПараметрыФормы.ИспользоватьВариантУчетаИерархииЭлементов = Истина;
	ПараметрыФормы.МножественныйВыбор = Истина;
	ПараметрыФормы.КлючНазначенияИспользования = "торо_ТиповыеОР";
	ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР", ПараметрыФормы, Элементы.СписокОР, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОРВСостав_ПослеВопросаОЗаписи(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьВыполнена = Записать();
	Если Не ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОРВСостав_Завершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОРВСостав_Завершение()

	ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора", ПараметрыФормы, Элементы.СписокОР, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОР_ПослеВопросаОЗаписи(Ответ, ДополнительныеПараметры) Экспорт
    
    Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьВыполнена = Записать();
	Если Не ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;
    
    СоздатьОР_Завершение();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОР_Завершение()
    
   ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Основание", Объект.Ссылка);
	ДанныеЗаполнения.Вставить("Направление", Объект.Направление);
	ДанныеЗаполнения.Вставить("Изготовитель", Объект.Изготовитель);
	ДанныеЗаполнения.Вставить("ТипОбъекта", Объект.ТипОбъекта);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения);

	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбъектыРемонтаСТиповыми(МассивОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
	|	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОР);
	Результат = Запрос.Выполнить();
	
	Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Результат);
	
КонецФункции

&НаКлиенте
Процедура СоставОРОбработкаВыбораПослеВопросаОбИзмененииТипового(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИзменятьТиповойОР", (Ответ = КодВозвратаДиалога.Да));	
	
	ИзменитьНаправлениеИИзготовителя = ДополнительныеПараметры.ИзменитьНаправлениеИИзготовителя;
	Если ИзменитьНаправлениеИИзготовителя = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоставОРОбработкаВыбораПослеВопросаОбИзмененииНаправления", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Изменить поля ""Изготовитель"" и ""Направление"" по типовому ОР?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		СоставОРОбработкаВыбораЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОРОбработкаВыбораПослеВопросаОбИзмененииНаправления(Ответ, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ИзменитьНаправлениеИИзготовителя", (Ответ = КодВозвратаДиалога.Да));
	СоставОРОбработкаВыбораЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОРОбработкаВыбораЗавершение(СтруктураПараметров)
	
	МассивСтруктурОР = СтруктураПараметров.МассивСтруктурОР;
	ИзменятьТиповойОР = СтруктураПараметров.ИзменятьТиповойОР;
	ИзменитьНаправлениеИИзготовителя = СтруктураПараметров.ИзменитьНаправлениеИИзготовителя;
	
	МассивОР = Новый Массив;
	
	Если ИзменятьТиповойОР Тогда
		Для каждого СтркуктураОР из МассивСтруктурОР Цикл
			МассивОР.Добавить(СтркуктураОР.ОбъектРемонта);
		КонецЦикла;
		ИзменитьТиповойУОбъектовРемонта(МассивОР, ИзменитьНаправлениеИИзготовителя);
	Иначе
		Для каждого СтруктураОР из МассивСтруктурОР Цикл
			Если НЕ ЗначениеЗаполнено(СтруктураОР.ТиповойОР) Тогда
				МассивОР.Добавить(СтруктураОР.ОбъектРемонта);
			КонецЕсли;
		КонецЦикла;
		ИзменитьТиповойУОбъектовРемонта(МассивОР, ИзменитьНаправлениеИИзготовителя);
	КонецЕсли;

	Элементы.СписокОР.Обновить();
	
КонецПроцедуры
	
&НаСервере
Процедура ИзменитьТиповойУОбъектовРемонта(МассивОР, ИзменитьНаправлениеИИзготовителя)
	
	Для каждого ОбъектРемонта из МассивОР Цикл
		торо_РаботаСНормативамиСервер.ЗаписатьНормативыОРПриИзмененииТиповогоОР(Объект.Ссылка, ОбъектРемонта);
		ОбъектОР = ОбъектРемонта.ПолучитьОбъект();
		ОбъектОР.ДополнительныеСвойства.Вставить("НеОбновлятьРегистрНаличиеНормативов", Истина);
		ОбъектОР.ТиповойОР = Объект.Ссылка;
		Если ИзменитьНаправлениеИИзготовителя Тогда
			ОбъектОР.Направление = Объект.Направление;
			ОбъектОР.Изготовитель = Объект.Изготовитель;
		КонецЕсли;
		ОбъектОР.Записать();
	КонецЦикла;
	
	торо_РаботаСНормативамиСервер.ОбновитьНаличиеНормативовОРПриИзмененииТиповогоОР(МассивОР);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТиповойУОбъектовРемонта(МассивОР)
	
	Для каждого ОбъектРемонта из МассивОР Цикл
		ОчиститьТиповойУОбъектаРемонта(ОбъектРемонта);
	КонецЦикла;
	
	торо_РаботаСНормативамиСервер.ОбновитьНаличиеНормативовОРПриИзмененииТиповогоОР(МассивОР);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТиповойУОбъектаРемонта(ОбъектРемонта, ИзменитьНаправлениеИИзготовителя = Ложь)
	
	НачатьТранзакцию();
	
	торо_РаботаСНормативамиСервер.ЗаписатьНормативыОРПриИзмененииТиповогоОР(Справочники.торо_ТиповыеОР.ПустаяСсылка(), ОбъектРемонта);
	ОбъектОР = ОбъектРемонта.ПолучитьОбъект();
	ОбъектОР.ДополнительныеСвойства.Вставить("НеОбновлятьРегистрНаличиеНормативов", Истина);
	Если ИзменитьНаправлениеИИзготовителя Тогда
		ОбъектОР.Направление = Справочники.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка();
		ОбъектОР.Изготовитель = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	ОбъектОР.ТиповойОР = Справочники.торо_ТиповыеОР.ПустаяСсылка();
	ОбъектОР.Записать();
	
	НаборЗаписейДляОчистки = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
	НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписейДляОчистки.Отбор.ТиповойОР.Установить(Объект.Ссылка);
	НаборЗаписейДляОчистки.Записать();
	
	НаборЗаписейДляОчистки = РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
	НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписейДляОчистки.Записать();
	
	НаборЗаписейДляОчистки = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
	НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписейДляОчистки.Отбор.ТиповойОР.Установить(Объект.Ссылка);
	НаборЗаписейДляОчистки.Записать();
	
	НаборЗаписейДляОчистки = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
	НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписейДляОчистки.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОР_ПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьОРНаСервере();
		Элементы.СписокОР.Обновить();
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ОчиститьОРНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               	|	торо_ОбъектыРемонта.Ссылка КАК Ссылка
	               	|ИЗ
	               	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               	|ГДЕ
	               	|	торо_ОбъектыРемонта.ТиповойОР = &ТиповойОР";
	
	Запрос.УстановитьПараметр("ТиповойОР", Объект.Ссылка);
	
	МассивОР = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОчиститьТиповойУОбъектовРемонта(МассивОР);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	// функциональные опции
	ФОУчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	ФОУчетЗамещающихРемонтов        = ПолучитьФункциональнуюОпцию("торо_УчетЗамещающихРемонтов");
	ФОУчетНаработкиОборудования     = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	ФОИспользоватьИнтеграциюСАИСДиспетчер = ПолучитьФункциональнуюОпцию("торо_ИспользоватьИнтеграциюСАИСДиспетчер");
	
	ВидимостьЭлемента = НЕ Объект.ЭтоГруппа;		
	Элементы.Нормативы.Видимость = ВидимостьЭлемента;	
	Элементы.СтраницаВизуализацияРемонтногоЦикла.Видимость = ВидимостьЭлемента;
	Элементы.СтраницаСостав.Видимость = ВидимостьЭлемента;
	
	Элементы.СтраницаКонтролируемыеПоказатели.Видимость = ФОУчетКонтролируемыхПоказателей;
	Элементы.ГруппаЗамещаемые.Видимость 				= ФОУчетЗамещающихРемонтов;
	Элементы.СтраницаНаработка.Видимость				= ФОУчетНаработкиОборудования;
	
	Элементы.Изготовитель.Видимость = ВидимостьЭлемента;
	Элементы.Направление.Видимость = ВидимостьЭлемента;
	
	Элементы.ПередаватьВАИСДиспетчер.Видимость = ФОИспользоватьИнтеграциюСАИСДиспетчер;
	
	// Для групп типовых ОР можно вводить только список показателей наработки и их единицы измерения.
	Элементы.СписокПараметровНаработкиПродолжительностьПериодаПлановойНаработки.Видимость = ВидимостьЭлемента;
	Элементы.СписокПараметровНаработкиПериодПлановойНаработки.Видимость = ВидимостьЭлемента;
	Элементы.СписокПараметровНаработкиПлановаяНаработка.Видимость = ВидимостьЭлемента;
	Элементы.СписокПараметровНаработкиКоэффициентИспользованияОборудования.Видимость = ВидимостьЭлемента;
	
	Элементы.ТабМаксимальныхЗначенийНаработки.Видимость = ВидимостьЭлемента;
	
	УстановитьВидимостьДоступностьФМ();
	
	Если НЕ Объект.ЭтоГруппа Тогда
		ИспользоватьКартинкиТОР = Константы.торо_ИспользоватьКартинкиТиповыхОбъектов.Получить();
		Элементы.ФормаПоказатьСкрытьИзображение.Видимость = ИспользоватьКартинкиТОР;
		Элементы.ФормаПоказатьСкрытьИзображение.Пометка = ИспользоватьКартинкиТОР И ОтображатьИзображение;
		Элементы.СтраницаИзображение.Видимость = Элементы.ФормаПоказатьСкрытьИзображение.Пометка;
	КонецЕсли;
	
	ПравоРедактированияИзмеряемыхПоказателей = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта);
	ПравоРедактированияПараметровОповещенияПоСостояниямОР = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.торо_ПараметрыОповещенияОСостоянииОборудования);
	ПравоРедактированияПараметровНаработки = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта);
	ПравоРедактированияМаксимальныхЗначенийНаработки = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.торо_МаксимальныеЗначенияНаработкиОР);
	
	Элементы.СписокИзмеряемыхПоказателей.ТолькоПросмотр = Не ПравоРедактированияИзмеряемыхПоказателей;
	Элементы.СписокИзмеряемыхПоказателейПодборКонтролируемыхПоказателей.Доступность = ПравоРедактированияИзмеряемыхПоказателей;
	Элементы.ПараметрыОповещенияПоСостояниямОР.ТолькоПросмотр = Не ПравоРедактированияИзмеряемыхПоказателей;
	Элементы.СписокПараметровНаработки.ТолькоПросмотр = Не ПравоРедактированияИзмеряемыхПоказателей;
	Элементы.ТабМаксимальныхЗначенийНаработки.ТолькоПросмотр = Не ПравоРедактированияИзмеряемыхПоказателей;

КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	// Заполнение признака использования характеристик в ТЧ "Запчасти".
	Для каждого СтрокаЗапчастей Из Объект.Запчасти Цикл 		
		СтрокаЗапчастей.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(СтрокаЗапчастей.Номенклатура); 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗначениюКопирования(ЗначениеКопирования)
		
	ОбновитьИзмеряемыеПоказатели(ЗначениеКопирования, СписокИзмеряемыхПоказателей);
	МодифицированностьИзмеряемыхПоказателей = Истина;
	Для каждого Строка из СписокИзмеряемыхПоказателей Цикл
		Если Строка.ОбъектРемонта = ЗначениеКопирования Тогда
			Строка.ОбъектРемонта = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	МассивСтруктурПараметровОповещения = ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(ЗначениеКопирования, Объект.Родитель);
	МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
	Для Каждого ЭлементМассива Из МассивСтруктурПараметровОповещения Цикл
		НоваяСтрока = ПараметрыОповещенияПоСостояниямОР.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
		Если НоваяСтрока.ТиповойОР = ЗначениеКопирования Тогда
			НоваяСтрока.ТиповойОР = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;

	СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТаблицуПараметровНаработки(ЗначениеКопирования, Объект.Родитель);
	МодифицированностьПараметровНаработки = Истина;
	Для каждого Элем Из СтруктураВозврата Цикл
		НоваяСтрока = СписокПараметровНаработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элем);
		Если НоваяСтрока.ОбъектРемонта = ЗначениеКопирования Тогда
			НоваяСтрока.ОбъектРемонта = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Объект.ЭтоГруппа Тогда
		
		СтруктураВозврата = ОбновитьМаксимальныеЗначенияПоказателейНаработки(ЗначениеКопирования);
		МодифицированностьМаксЗначНаработки = Истина;
		Для каждого Элем Из СтруктураВозврата Цикл
			НоваяСтрока = ТабМаксимальныхЗначенийНаработки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элем);
			Если НоваяСтрока.ОбъектРемонта = ЗначениеКопирования Тогда
				НоваяСтрока.ОбъектРемонта = Объект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьФиксированныеРемонтныеЦиклы(ЗначениеКопирования, ТабличноеПолеРемонтныеЦиклыОборудования);
		МодифицированностьРемЦиклов = Истина;
		Для каждого Строка из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
			Если Строка.ГруппаОбъектовРемонтов = ЗначениеКопирования Тогда
				Строка.ГруппаОбъектовРемонтов = Объект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураВозврата = ПрочитатьОценкиРМ(ЗначениеКопирования);
		ТаблицаОценокРММодифицированность = Истина;
		Для каждого Элем Из СтруктураВозврата Цикл
			НоваяСтрока = РСНЗТаблицаОценокРМ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элем);
			Если НоваяСтрока.ГруппаОбъектовРемонтов = ЗначениеКопирования Тогда
				НоваяСтрока.ГруппаОбъектовРемонтов = Объект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
		
	КонецЕсли;
	
	Модифицированность = Истина;		
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
	Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#Область ФункциональныеМеста
&НаСервере
Процедура ЗаполнитьДеревоОграниченийНаСервере()
		
		Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
		Дерево.Строки.Очистить();
		
		СтрокаЛюбойИерархии = Дерево.Строки.Добавить();
		СтрокаЛюбойИерархии.ИерархияОграничение = Строка("Для всех иерархий");
		
		Если Объект.ОграниченияНаХарактеристикиОборудования.Количество() > 0 Тогда
			
			ТЗОграничений = Объект.ОграниченияНаХарактеристикиОборудования.Выгрузить();
			ТЗОграничений.Свернуть("СтруктураИерархии");
			
			Для каждого Строка Из ТЗОграничений Цикл
				Если НЕ ЗначениеЗаполнено(Строка.СтруктураИерархии) Тогда
					НоваяСтрокаДерева = Дерево.Строки.Найти("Для всех иерархий", "ИерархияОграничение");
				Иначе 
					НоваяСтрокаДерева = Дерево.Строки.Добавить();
					НоваяСтрокаДерева.ИерархияОграничение = Строка.СтруктураИерархии;
				КонецЕсли;
	
				МассивСтрок = Объект.ОграниченияНаХарактеристикиОборудования.НайтиСтроки(Новый Структура("СтруктураИерархии", Строка.СтруктураИерархии));
				
				Для каждого Элемент Из МассивСтрок Цикл
					НоваяСтрока = НоваяСтрокаДерева.Строки.Добавить();
					НоваяСтрока.ИерархияОграничение = Элемент.Ограничение;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(Дерево, "ДеревоОграничений");
		
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеИерархии(ДобавляемаяИерархия)
	
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ДобавляемаяИерархия)); 
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеОграничения(ТекИерархия, ДобавляемоеОграничение)
	
	ЕстьДубли = Ложь;
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ТекИерархия));
	Для каждого Строка Из НайденныеСтроки Цикл
		МассивСтрок = Строка.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ДобавляемоеОграничение));
		Если МассивСтрок.Количество() > 0 Тогда
			ЕстьДубли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьДубли;
	
КонецФункции

&НаСервере
Функция ПроверитьИерархию(Идентификатор)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Причина", "");
	СтруктураВозврата.Вставить("РазрешеноИзменение", Истина);
	
	
	СтрокаДерева = ДеревоОграничений.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДерева <> Неопределено И ЗначениеЗаполнено(СтрокаДерева.ИерархияОграничение) Тогда
		ВыбраннаяИерархия = СтрокаДерева.ИерархияОграничение;
		
		ТекРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекРодитель <> Неопределено Тогда
			СтруктураВозврата.РазрешеноИзменение = Ложь;	
			СтруктураВозврата.Причина = "ЕстьРодитель";
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбраннаяИерархия) И ВыбраннаяИерархия.СтроитсяАвтоматически Тогда
			СтруктураВозврата.РазрешеноИзменение = Ложь;	
			СтруктураВозврата.Причина = "АвтоматическаяИерархия";
			Возврат СтруктураВозврата; 
		КонецЕсли;
		
		Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
		МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ВыбраннаяИерархия)); 
		Если МассивСтрок.Количество() > 1 Тогда
			СтруктураВозврата.РазрешеноИзменение = Ложь;	
			СтруктураВозврата.Причина = "ДублирующееЗначение";
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		
	Иначе
		СтруктураВозврата.Причина = "ПустоеЗначение";
		СтруктураВозврата.РазрешеноИзменение = Ложь;	
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПроверитьОграничение(Идентификатор)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Причина", "");
	СтруктураВозврата.Вставить("РазрешеноИзменение", Истина);
	
	СтрокаДерева = ДеревоОграничений.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДерева <> Неопределено И ЗначениеЗаполнено(СтрокаДерева.ИерархияОграничение) Тогда
		ВыбранноеОграничение = СтрокаДерева.ИерархияОграничение;
		
		ТекРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекРодитель = Неопределено ИЛИ (ТипЗнч(ТекРодитель.ИерархияОграничение) <> Тип("Строка") 
		  И ТипЗнч(ТекРодитель.ИерархияОграничение) <> Тип("СправочникСсылка.торо_СтруктурыОР")) Тогда
			СтруктураВозврата.РазрешеноИзменение = Ложь;	
			СтруктураВозврата.Причина = "НеверныйУровеньВложенности";
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
		СтрокаРодителя = Дерево.Строки.Найти(ТекРодитель.ИерархияОграничение, "ИерархияОграничение");
		Если СтрокаРодителя <> Неопределено Тогда
			МассивСтрок = СтрокаРодителя.Строки.НайтиСтроки(Новый Структура("ИерархияОграничение", ВыбранноеОграничение));
			Если МассивСтрок.Количество() > 1 Тогда
				СтруктураВозврата.РазрешеноИзменение = Ложь;	
				СтруктураВозврата.Причина = "ДублирующееЗначение";
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураВозврата.Причина = "ПустоеЗначение";
		СтруктураВозврата.РазрешеноИзменение = Ложь;	
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ИзменитьИерархию(ПредЗначение, ТекИерархия)
	
	МассивСтрок = Объект.ОграниченияНаХарактеристикиОборудования.НайтиСтроки(Новый Структура("СтруктураИерархии", ПредЗначение)); 
	Для каждого Строка Из МассивСтрок Цикл
		Строка.СтруктураИерархии = ТекИерархия; 
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьОграничение(Идентификатор, ПредЗначение, ТекОграничение)
	
	СтрокаДерева = ДеревоОграничений.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДерева <> Неопределено Тогда
		ТекРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекРодитель <> Неопределено Тогда
			
			Если ТипЗнч(ТекРодитель.ИерархияОграничение) = Тип("Строка") Тогда
				ТекИерархия = Справочники.торо_СтруктурыОР.ПустаяСсылка();
			Иначе
				ТекИерархия = ТекРодитель.ИерархияОграничение; 
			КонецЕсли;

			МассивСтрок = Объект.ОграниченияНаХарактеристикиОборудования.НайтиСтроки(Новый Структура("СтруктураИерархии, Ограничение", ТекИерархия, ПредЗначение));
			Если МассивСтрок.Количество() > 0 Тогда
				МассивСтрок[0].Ограничение = ТекОграничение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИерархию(ТекИерархия)
	
	МассивСтрок = Объект.ОграниченияНаХарактеристикиОборудования.НайтиСтроки(Новый Структура("СтруктураИерархии", ТекИерархия)); 
	Для каждого Строка Из МассивСтрок Цикл
		Объект.ОграниченияНаХарактеристикиОборудования.Удалить(Строка); 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОграничение(Идентификатор, ТекОграничение)
	
	СтрокаДерева = ДеревоОграничений.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаДерева <> Неопределено Тогда
		ТекРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекРодитель <> Неопределено Тогда
			
			Если ТипЗнч(ТекРодитель.ИерархияОграничение) = Тип("Строка") Тогда
				ТекИерархия = Справочники.торо_СтруктурыОР.ПустаяСсылка();
			Иначе
				ТекИерархия = ТекРодитель.ИерархияОграничение; 
			КонецЕсли;
			
			МассивСтрок = Объект.ОграниченияНаХарактеристикиОборудования.НайтиСтроки(Новый Структура("СтруктураИерархии, Ограничение", ТекИерархия, ТекОграничение));
			Если МассивСтрок.Количество() > 0 Тогда
				Объект.ОграниченияНаХарактеристикиОборудования.Удалить(МассивСтрок[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьИерархиюВДерево(ДобавляемаяИерархия)

	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	НоваяСтрокаДерева = Дерево.Строки.Добавить();
	НоваяСтрокаДерева.ИерархияОграничение = ДобавляемаяИерархия;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОграничений");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОграничениеВДерево(ДобавляемоеОграничение, ТекИерархия)
	
	Дерево = РеквизитФормыВЗначение("ДеревоОграничений");
	
	Если ТипЗнч(ТекИерархия) = Тип("Строка") Тогда
		ТекИерархияТЧ = Справочники.торо_СтруктурыОР.ПустаяСсылка();
	Иначе
		ТекИерархияТЧ = ТекИерархия; 
	КонецЕсли;
		
	НовСтрока = Объект.ОграниченияНаХарактеристикиОборудования.Добавить();
	НовСтрока.СтруктураИерархии = ТекИерархияТЧ;
	НовСтрока.Ограничение = ДобавляемоеОграничение;
	
	СтрокаРодителя = Дерево.Строки.Найти(ТекИерархия, "ИерархияОграничение");
	Если СтрокаРодителя <> Неопределено Тогда
		НоваяСтрокаДерева = СтрокаРодителя.Строки.Добавить();
		НоваяСтрокаДерева.ИерархияОграничение = ДобавляемоеОграничение;
	КонецЕсли;
		
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОграничений");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьФМ()
	
	ФОУчетЗапчастей 				= ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОИспользоватьПланированиеПоЖесткимРемЦиклам 	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам");
	ФОИспользоватьОценкиРМ							= ПолучитьФункциональнуюОпцию("торо_ИспользованиеОценокРМ");
	
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	ЭтоФункциональноеМесто = Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто;
	
	Элементы.ГруппаТипОбъекта.Видимость = ?(ФОИспользоватьФМ, НЕ Объект.ЭтоГруппа, Ложь);
	
	ВидимостьКогдаФМ = ФОИспользоватьФМ И ЭтоФункциональноеМесто;
	
	Элементы.Изготовитель.Видимость = НЕ Объект.ЭтоГруппа И НЕ ВидимостьКогдаФМ;
	Элементы.ГруппаДополнительныеРеквизиты.Видимость = НЕ Объект.ЭтоГруппа И НЕ ВидимостьКогдаФМ;
	Элементы.СтраницаФиксированныеРемонтныеЦиклы.Видимость = НЕ Объект.ЭтоГруппа И НЕ ВидимостьКогдаФМ И ФОИспользоватьПланированиеПоЖесткимРемЦиклам;
	Элементы.СтраницаЗапчасти.Видимость = НЕ Объект.ЭтоГруппа И НЕ ВидимостьКогдаФМ И ФОУчетЗапчастей;
	Элементы.СтраницаОценкаРМ.Видимость = НЕ Объект.ЭтоГруппа И НЕ ВидимостьКогдаФМ И ФОИспользоватьОценкиРМ;
	Элементы.СтраницаОграничения.Видимость = ВидимостьКогдаФМ;
	
КонецПроцедуры

&НаСервере
Процедура ТипОбъектаПриИзменении_Сервер()
	
	ФОИспользоватьФМ = ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
	Если ФОИспользоватьФМ И Объект.ТипОбъекта = Перечисления.торо_ТипыОбъектовRCM.ФункциональноеМесто Тогда
		ЗаполнитьДеревоОграниченийНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипыСоставаСпискаОР()
	
	МассивОР = ПолучитьМассивОбъектовНесоответствующихТипов();
	Если МассивОР.Количество() > 0 Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ИзменитьТип", НСтр("ru = 'Изменить тип'"));
		СписокКнопок.Добавить("Очистить", НСтр("ru = 'Очистить'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить'"));
	    ДопПараметры = Новый Структура("МассивОР", МассивОР);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТипыСоставаСпискаОР_ПослеВопроса", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = НСтр("ru = 'В состав типового могут входить только объекты ремонта с таким же типом. 
		                          |Изменить тип у объектов ремонта или очистить список объектов данного типового?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	КонецЕсли;
	УстановитьВидимостьДоступностьФМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипыСоставаСпискаОР_ПослеВопроса(Результат, ДопПараметры) Экспорт
	
	Если Результат = "ИзменитьТип" Тогда
		ПерезаписатьТипыОбъектов(ДопПараметры.МассивОР);
	ИначеЕсли Результат = "Очистить" Тогда
		ОчиститьОРНаСервере();
	ИначеЕсли Результат = "Отменить" Тогда
		ВернутьЗначениеТипаОбъекта();
	КонецЕсли;
	
	Элементы.СписокОР.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивОбъектовНесоответствующихТипов()
	
	МассивОР = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               	|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
		               	|	торо_ОбъектыРемонта.ТипОбъекта КАК ТипОбъекта
		               	|ИЗ
		               	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               	|ГДЕ
		               	|	торо_ОбъектыРемонта.ТиповойОР = &ТиповойОР
		               	|	И НЕ торо_ОбъектыРемонта.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("ТиповойОР", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипОбъекта <> Объект.ТипОбъекта Тогда
				МассивОР.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивОР;

КонецФункции

&НаСервере
Процедура ПерезаписатьТипыОбъектов(МассивОР)
	Для каждого Элем Из МассивОР Цикл
		ПерезаписатьТипОбъектаУОбъектаРемонта(Элем);	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПерезаписатьТипОбъектаУОбъектаРемонта(ОбъектРемонта)
	
	НачатьТранзакцию();
	ОбъектОР = ОбъектРемонта.ПолучитьОбъект();
	Если ОбъектОР <> Неопределено Тогда
		ОбъектОР.ТипОбъекта = Объект.ТипОбъекта;
		ОбъектОР.Записать();
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ВернутьЗначениеТипаОбъекта()
	Объект.ТипОбъекта = ПредТипОбъекта;
	УстановитьВидимостьДоступностьФМ();
КонецПроцедуры

&НаСервере
Функция ПроверитьТипыДобавляемыхОР(МассивВыбранныхОР)
	
	КолвоЭлементов = МассивВыбранныхОР.Количество();
	Если КолвоЭлементов > 0 Тогда 
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ТекИндекс = КолвоЭлементов - ОбратныйИндекс;
			ЭлементМассива = МассивВыбранныхОР[ТекИндекс]; 
			Если ЭлементМассива.ТипОбъекта <> Объект.ТипОбъекта Тогда 
				МассивВыбранныхОР.Удалить(ТекИндекс); 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	КолвоЭлементовНововое = МассивВыбранныхОР.Количество();
	Если КолвоЭлементовНововое = КолвоЭлементов Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ИспользоватьФМ()
	Возврат ПолучитьФункциональнуюОпцию("торо_ИспользоватьФункциональныеМеста");
КонецФункции

&НаСервере
Процедура ЗаполнитьПредыдущийТипОбъекта()
	ПредТипОбъекта = Объект.ТипОбъекта;
КонецПроцедуры

&НаСервере
Функция ДублиСредиЦепочекРЦ(МассивВыбранныхЗначений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_РемонтныеЦиклыОборудования.ВидЦепочки КАК ВидЦепочки
	               |ПОМЕСТИТЬ ВТ_ЦепочкиТОР
	               |ИЗ
	               |	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	               |ГДЕ
	               |	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_РемонтныеЦиклыОборудования.ВидЦепочки КАК ВидЦепочки,
	               |	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов КАК Ссылка
	               |ИЗ
	               |	ВТ_ЦепочкиТОР КАК ВТ_ЦепочкиТОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	               |		ПО ВТ_ЦепочкиТОР.ВидЦепочки = торо_РемонтныеЦиклыОборудования.ВидЦепочки
	               |ГДЕ
	               |	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов В(&МассивВыбранныхЗначений)";
	
	Запрос.УстановитьПараметр("МассивВыбранныхЗначений", МассивВыбранныхЗначений);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;

	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонСообщения = НСтр("ru = 'Объект ремонта ""%1"" содержит в себе указанный для типового объекта ремонта фиксированный ремонтный цикл ""%2"", добавление невозможно.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Ссылка, Выборка.ВидЦепочки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьСвязныеЭлементыДляНормативныхРемонтов(УдалРемонт)
		
	СтрокиДляУдаления = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", УдалРемонт));
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ПредшествующиеРемонты.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	СтрокиДляУдаления = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта", УдалРемонт));
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ПредшествующиеРемонты.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	СтрокиДляУдаления = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", УдалРемонт));
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ЗамещаемыеРемонты.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	СтрокиДляУдаления = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ЗамещаемыйВидРемонта", УдалРемонт));
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ЗамещаемыеРемонты.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", УдалРемонт));
	Для каждого Элем Из МассивУдаляемыхСтрок Цикл
		ЗапланированныеРемонты.Удалить(Элем);
	КонецЦикла;
	
	Если НЕ ТаблицаОценокРММодифицированность Тогда
		МассивВозврата = ПрочитатьОценкиРМ(Объект.Ссылка);
		РСНЗТаблицаОценокРМ.Очистить();
		Для каждого Элем Из МассивВозврата Цикл
			
			НС = РСНЗТаблицаОценокРМ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
		КонецЦикла;
		
		ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	КонецЕсли;
		
	МассивУдаляемыхСтрок = ТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта", УдалРемонт));
	Для каждого Элем Из МассивУдаляемыхСтрок Цикл
		ТаблицаОценокРММодифицированность = Истина;
		ТаблицаОценокРМ.Удалить(Элем);
	КонецЦикла;
	Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта",УдалРемонт));
	Для каждого Элем Из Строки Цикл
		РСНЗТаблицаОценокРМ.Удалить(Элем);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

