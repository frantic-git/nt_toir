////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ТехКартаКопируемаяСсылка = ПолучитьТехКартуПоИдентификатору(Параметры.ЗначениеКопирования);
		ТехКартаКопируемаяОбъект = ТехКартаКопируемаяСсылка.Скопировать();
		
		СоздатьНовуюВерсиюТехкарты(Истина, ТехКартаКопируемаяОбъект, Истина);
	Иначе	
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если Параметры.Свойство("ДатаСреза")
				И ЗначениеЗаполнено(Параметры.ДатаСреза) Тогда
				ЗаполнитьФормуПоТехКарте(,Параметры.ДатаСреза);
			Иначе
				ЗаполнитьФормуПоТехКарте();// получаем самую последнюю запись
			КонецЕсли; 
			
		Иначе
			СоздатьНовуюВерсиюТехкарты();
		КонецЕсли;
	КонецЕсли;
	
	СтараяДатаПринятия = ТехКарта.ДатаПринятия;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И Параметры.Свойство("Родитель") Тогда
		Объект.Родитель = Параметры.Родитель;
	КонецЕсли;
	
	ФОИспользоватьОпасноеПроизводство = ПолучитьФункциональнуюОпцию("торо_ИспользоватьОпасноеПроизводство");
	ФОИспользоватьНарядДопускОбязательно = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно");
	ФОИспользоватьОстановочныеРемонты = ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	ФОИспользоватьУчетСостояний = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");	
	Если ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей") = Ложь Тогда
		Элементы.ГруппаИзмеряемыеПоказатели.Видимость = Ложь;
	КонецЕсли;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	
	// Мультиязычность для реквизитов тех. карты
	Если НЕ МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь) Тогда
		Элементы.ТехКартаКомментарий.КнопкаОткрытия = Истина;
		Элементы.ТехКартаКомментарий.УстановитьДействие("Открытие", "Подключаемый_ОткрытиеТехКарта");
		ЭтаФорма.ПараметрыМультиязычныхРеквизитов.Вставить(Элементы.ТехКартаКомментарий.Имя, "Комментарий");
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.торо_ИдентификаторыТехКарт);
	
	УстановитьУсловноеОформление();

	УправлениеДоступностьюУтвержденияСтатуса();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СлужебныеРеквизитыЗаполнитьНаСервере();
	КонецЕсли;
	
	// Имена таблиц формы для которых необходимо сохранять строку до редактирования
	ИменаТаблицФормы = Новый Массив;
	ИменаТаблицФормы.Добавить("МатериальныеЗатраты");
	ИменаТаблицФормы.Добавить("ТрудовыеЗатраты");
	ИменаТаблицФормы.Добавить("ИнструментыИТехника");
	ИменаТаблицФормы.Добавить("ИзмеряемыеПоказатели");
	ИменаТаблицФормы.Добавить("МерыБезопасности");
	ИменаТаблицФормы.Добавить("ОказываемыеУслуги");

	СтруктураДанныхДоРедактирования = торо_СобытияФорм.ПодготовитьСтруктуруСохраненныхСтрок(ЭтотОбъект, ИменаТаблицФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.НормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.НормаВремени);
	Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.ВремяПростоя);
	
	Элементы.ГруппаОпасныхОпераций.Видимость = ФОИспользоватьНарядДопускОбязательно ИЛИ ФОИспользоватьОпасноеПроизводство;
	
	Элементы.КартинкаСодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	Элементы.СодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	Элементы.СписокОперацийСодержитОпасныеОперации.Видимость = ФОИспользоватьОпасноеПроизводство;
	
	Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	Элементы.СодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	Элементы.СписокОперацийСодержитРаботыПовышеннойОпасности.Видимость = ФОИспользоватьНарядДопускОбязательно;
	
	Элементы.ГруппаОстанова.Видимость = ФОИспользоватьОстановочныеРемонты И ФОИспользоватьУчетСостояний;
	Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.ВремяПростоя);
	УстановитьЗаголовокФормы();
	УстановитьДоступностьОтСтатуса();
	УстановитьПараметрыДинамическогоСписка(ТехКарта.Ссылка);
	
	ЗаполнитьКолонкиПараллельногоВыполненияТО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Модифицированность = Истина;
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.торо_ФормаПодбораПродолжительности" Тогда
		Если ЭтаФорма.ТекущийЭлемент.Имя = "Перерассчитать"  
			ИЛИ ЭтаФорма.ТекущийЭлемент.Имя = "ТехКартаСпособРасчетаПродолжительности" Тогда
			Элементы.НормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);
			ТехКарта.НормаВремени = ВыбранноеЗначение;
			ТехКарта.НормаВремениТекст = Элементы.НормаВремени.Заголовок;
			СписокОперацийМодифицированность = Истина;
		ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "ВвестиВремяПростоя" Тогда
			Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);
			ТехКарта.ВремяПростоя = ВыбранноеЗначение;
			ТехКарта.ВремяПростояТекст = Элементы.ВремяПростоя.Заголовок;
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеСписокОпераций = Элементы.СписокОпераций.ТекущиеДанные;
		
		Если ТекДанныеСписокОпераций = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	
		Если Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
			ИмяТЧ = "МатериальныеЗатраты";
			ИмяРеквизита = "Номенклатура";
		ИначеЕсли Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаИнструментыИТехника Тогда
			ИмяТЧ = "ИнструментыИТехника";
			ИмяРеквизита = "Инструмент";
		ИначеЕсли Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаОказываемыеУслуги Тогда
			ИмяТЧ = "ОказываемыеУслуги";
			ИмяРеквизита = "Номенклатура";			
		КонецЕсли;
		
		СтруктураСтрокиОпераций = Новый Структура("ID, Операция, Количество", ТекДанныеСписокОпераций.ID, ТекДанныеСписокОпераций.Операция, ТекДанныеСписокОпераций.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		ЗаполнитьДобавленныеКолонкиНоменклатуры();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ПодборЗакрыт" Тогда
		ПодборОпераций = Ложь;

	ИначеЕсли ИмяСобытия = "ИзменениеТехКарты" Тогда
		Если Параметр = ТехКарта.Ссылка Тогда
			ОбработатьОповещениеОбИзмененииТехКарты();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" ИЛИ ИмяСобытия = "Запись_Файл" Тогда
		Если ВыполняетсяДобавлениеФайлаОперации И Параметр.ЭтоНовый И Параметр.ВладелецФайла = ТехКарта.Ссылка  Тогда
			Если ИДОперацииДляДобавленияФайла <> "" Тогда
				ПрикрепитьФайлыКОперацииНаСервере(ТехКарта.Ссылка, ИДОперацииДляДобавленияФайла, Источник);
			КонецЕсли;
			ВыполняетсяДобавлениеФайлаОперации = Ложь;
			ИДОперацииДляДобавленияФайла = "";
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл_Отмена" Тогда
		Если Параметр = ТехКарта.Ссылка Тогда
			ВыполняетсяДобавлениеФайлаОперации = Ложь;
			ИДОперацииДляДобавленияФайла = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Параметры.Свойство("ДатаСреза")
			И ЗначениеЗаполнено(Параметры.ДатаСреза) Тогда
			ЗаполнитьФормуПоТехКарте(,Параметры.ДатаСреза);
		Иначе
			ЗаполнитьФормуПоТехКарте();// получаем самую последнюю запись
		КонецЕсли; 
		
	Иначе
		СоздатьНовуюВерсиюТехкарты();
	КонецЕсли;
		
	Элементы.КартинкаСодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	Элементы.СодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	Элементы.СписокОперацийСодержитОпасныеОперации.Видимость = ФОИспользоватьОпасноеПроизводство;
	
	Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	Элементы.СодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	Элементы.СписокОперацийСодержитРаботыПовышеннойОпасности.Видимость = ФОИспользоватьНарядДопускОбязательно;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не УстановитьБлокировкуДанныхНаСервере(ТехКарта.Ссылка, ТехКарта.ВерсияДанных, Ложь) Тогда
		ТекстСообщения = НСтр("ru = 'Объект был изменен или удален. Перечитайте данные объекта.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);

	Если НЕ ЗначениеЗаполнено(ТехКарта.ДатаПринятия) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Тех. карта принята с"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ТехКарта.ДатаПринятия",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТехКарта.НормаВремени) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Продолжительность"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ТехКарта.СпособРасчетаПродолжительности",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Статус"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Статус");
	КонецЕсли;
	
	ПроверитьЗаполнениеМатериальныхЗатратИИнструментов(Отказ);
		
	Если Модифицированность И НЕ Отказ Тогда
		ЗаписатьВерсиюТехКарты(ТекущийОбъект, Отказ);
	КонецЕсли;
	
	СообщитьОВозможномИзмененииПродолжительностиРемонта(СписокОперацийМодифицированность, ТрудозатратыМодифицированность);
	
	Если НЕ Отказ Тогда
		ТрудозатратыМодифицированность = Ложь;
		СписокОперацийМодифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Элементы.ТехКартаДатаПринятия.Доступность = Ложь;
	Элементы.Изменить.Доступность             = Истина;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	ИзменитьЗависимыеТехКарты();
	
	СоздаватьНовыйОбъект = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	ОповеститьФормуСпискаОбИзменении();
	ОповеститьСвязанныеТехКартыОбИзменении();
	УстановитьЗаголовокФормы();
	УстановитьПараметрыДинамическогоСписка(ТехКарта.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
	МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытиеТехКарта(Элемент, СтандартнаяОбработка)
	МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, ТехКарта, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаДатаПринятияПриИзменении(Элемент)
	
	МассивИдентификаторов = Новый Массив;
	
	Для каждого Строка Из ТехКарта.СписокОпераций Цикл
		Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			 МассивИдентификаторов.Добавить(Строка.Операция);
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивИдентификаторов.Количество() > 0 Тогда
		
		ДопПараметры = Новый Структура("МассивИдентификаторов", МассивИдентификаторов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросПриИзмененииДаты",ЭтаФорма,ДопПараметры);
		
		ТекстВопроса = НСтр("ru = 'В технологической карте имеются вложенные технологические карты.
		|Все вложенные технологические карты будут заменены на версии, соответсвующие новой дате принятия.
		|Если на указанную дату версий не будет найдено, то они будут удалены Из списка операций. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Смена даты принятияэ"));
		
	Иначе
		
		ОбработкаОтветаНаВопросПриИзмененииДаты(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаВыполнениеРемонтаТребуетОстановаОборудованияПриИзменении(Элемент)
	
	ДоступностьПолейПростоя = ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования;
	
	УстановитьДоступностьПолейПростоя(ДоступностьПолейПростоя);
	
	Если ДоступностьПолейПростоя И ТехКарта.ВремяПростоя = 0 Тогда
		ТехКарта.ВремяПростоя           = ТехКарта.НормаВремени;
		Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.ВремяПростоя);
		ТехКарта.ВремяПростояТекст      = Элементы.ВремяПростоя.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСпособРасчетаПродолжительностиПриИзменении(Элемент)
	
	Если ТехКарта.СпособРасчетаПродолжительности = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ТехКарта.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоНормамВремениТехОпераций") Тогда
		
		Модифицированность = Истина;		
		РассчитатьПродолжительностьПоОперациямНаСервере(Истина);
		Элементы.НормаВремени.Заголовок = ТехКарта.НормаВремениТекст;

	ИначеЕсли ТехКарта.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоНормамТрудозатрат") Тогда
		
		Модифицированность = Истина;
		РассчитатьПродолжительностьПоТрудозатратамНаСервере();
		Элементы.НормаВремени.Заголовок = ТехКарта.НормаВремениТекст;

	ИначеЕсли ТехКарта.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоПродолжительностиОперацийРемонтов") Тогда
		
		Модифицированность = Истина;
		РассчитатьПродолжительностьПоОперациямНаСервере();
		Элементы.НормаВремени.Заголовок = ТехКарта.НормаВремениТекст;
		
	ИначеЕсли ТехКарта.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПроизвольноеЗначение") Тогда
		
		Модифицированность = Истина;
		ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,ЭтаФорма,Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		ФормаПодбораПродолжительности.ПродолжительностьВСекундах = ТехКарта.НормаВремени;
		ФормаПодбораПродолжительности.Открыть();
		
	КонецЕсли;	
	
	Для каждого СтрокаОпераций Из ТехКарта.СписокОпераций Цикл
		СтрокаОпераций.ПродолжительностьТекст = СформироватьПродолжительность(СтрокаОпераций.НормаВремениВСекундах);
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьИндексКартинкиОперации(СтрокаОпераций, Истина);
	КонецЦикла; 

	СписокОперацийМодифицированность = Ложь;
	ТрудозатратыМодифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ТехКарта.ДатаПринятия) И ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует") Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru = 'Поле ""Тех. карта принята с"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ТехКарта.ДатаПринятия");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТехКарта.НормаВремени)  И ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует") Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru = 'Поле ""Продолжительность"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ТехКарта.СпособРасчетаПродолжительности");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	УстановитьДоступностьОтСтатуса();
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "ТехКарта.Комментарий");	
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПараллельноВыполняемые(Команда)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	торо_ТехнологическиеКартыКлиент.УказатьПараллельноВыполняемые(Элементы.СписокОпераций, ТехКарта.СписокОпераций);
	
	//СтруктураПараметров = Новый Структура();
	//СтруктураПараметров.Вставить("ID_ПараллельнойОперации", ТекущиеДанные.ID_ПараллельнойОперации);
	//СтруктураПараметров.Вставить("ID_Операции"            , ТекущиеДанные.ID);
	//
	//МассивСтруктур = Новый Массив();
	//
	//Для каждого Строка Из ТехКарта.СписокОпераций Цикл
	//	Если Строка.ID = ТекущиеДанные.ID Тогда
	//		Продолжить;
	//	КонецЕсли; 
	//	
	//	СтруктураСтроки = Новый Структура();
	//	
	//	СтруктураСтроки.Вставить("ТехОперация"            , Строка.Операция);
	//	СтруктураСтроки.Вставить("ID_Операции"            , Строка.ID);
	//	СтруктураСтроки.Вставить("ID_ПараллельнойОперации", Строка.ID_ПараллельнойОперации);
	//	
	//	МассивСтруктур.Добавить(СтруктураСтроки);
	//КонецЦикла; 

	//СтруктураПараметров.Вставить("СписокТехОпераций", МассивСтруктур);
	//ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.Форма.ВыборПараллельныхРабот", СтруктураПараметров, Элементы.СписокОпераций,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОпераций

&НаКлиенте
Процедура СписокОперацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	УдалитьЗатратыПриУдаленииОперации(ТекущиеДанные);
	
	Если ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ОткрепитьВсеФайлыОтОперацииНаСервере(ТехКарта.ССылка, ТекущиеДанные.ID);
	КонецЕсли;
	
	// Если удаляется одна из двух параллельных операций, то для оставшейся очищаем ID, чтобы
	// при активизации строки сразу корректно все перезаполнилось.
	СтруктураПоиска = Новый Структура("ID_ПараллельнойОперации", ID_ПараллельнойОперации);
	НайденныеСтроки = ТехКарта.СписокОпераций.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 2 Тогда
		Если НайденныеСтроки[0].ID = ТекущиеДанные.ID Тогда
			НайденныеСтроки[1].ID_ПараллельнойОперации = "";
		Иначе
			НайденныеСтроки[0].ID_ПараллельнойОперации = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПослеУдаления(Элемент)
	
	УстановитьНаличиеОпасныхИПовышеннойОпасностиОпераций();
	СписокОперацийМодифицированность = Истина;
	
	СтруктураПоиска = Новый Структура("ID_ПараллельнойОперации", ID_ПараллельнойОперации);
	НайденныеСтроки = ТехКарта.СписокОпераций.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 1 Тогда
	    НайденныеСтроки[0].ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	ТолькоПросмотрКарты = Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке"));
	Если Не ТолькоПросмотрКарты Тогда
		Если Поле.Имя = "СписокОперацийПродолжительностьТекст" Тогда
			ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,Элемент, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
			ФормаПодбораПродолжительности.ПродолжительностьВСекундах = ТекущиеДанные.НормаВремениВСекундах;
			ФормаПодбораПродолжительности.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПриИзменении(Элемент)

	// При перемещении оперции в списке вверх или вниз нужно перезаполнить параллельно выполняемые операции.
	Для каждого СтрокаОпераций Из ТехКарта.СписокОпераций Цикл
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьПараллельноВыполняемыеОперации(СтрокаОпераций, ТехКарта);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПриАктивизацииСтроки(Элемент)
	       	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УстановитьОтборыТаблицНормативов(ТекущиеДанные.ID, ТекущиеДанные.Операция);
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
	ТолькоПросмотрКарты = Объект.Статус <> ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке");
	ДоступныФайлыОперации = ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации");
	Элементы.ФайлыОперацийДобавитьФайлОперации.Доступность = ДоступныФайлыОперации И ПравоРедактирование И Не ТолькоПросмотрКарты;
	Элементы.ФайлыОперацийОткрытьСвойстваФайла.Доступность = ДоступныФайлыОперации И Не ТолькоПросмотрКарты;
	Элементы.ФайлыОперацийОткрытьФайлДляПросмотра.Доступность = ДоступныФайлыОперации И Не ТолькоПросмотрКарты;
	Элементы.ФайлыОперацийПодобратьФайлыОпераций.Доступность = ДоступныФайлыОперации И Не ТолькоПросмотрКарты;
	Элементы.ФайлыОперацийОткрепитьФайлОперации.Доступность = ДоступныФайлыОперации И Не ТолькоПросмотрКарты;
	
	Операция = ?(ДоступныФайлыОперации, ТекущиеДанные.ID, "");
	ТехКартаДляОтбора = ?(ДоступныФайлыОперации, ТехКарта.Ссылка, ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Операция));
	УстановитьОтборДинамическогоСписка(Операция, ТехКартаДляОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	СписокОперацийМодифицированность = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	// Подбор параллельных работ
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ПодборПараллельных") Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗаполнитьКолонкиПараллельногоВыполненияТО(ВыбранноеЗначение.СоответствиеРезультата);
		
		Возврат;
	// Ввод продолжительности	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекущиеДанные.НормаВремениВСекундах = ВыбранноеЗначение;
		ТекущиеДанные.ПродолжительностьТекст = СформироватьПродолжительность(ВыбранноеЗначение);
	// Подбор ТО или добавление ТО/ТК	
	ИначеЕсли ПодборОпераций Тогда 
		ВыбранныеЭлементы = Новый Массив();
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			ВыбранныеЭлементы = ВыбранноеЗначение;
		Иначе
			ВыбранныеЭлементы.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		ТекущаяСтрока = 0;
		
		Для каждого ВыбранныйЭлемент Из ВыбранныеЭлементы Цикл
			ТекущаяСтрока = ОбработкаВыбораОперацииНаСервере(ВыбранныйЭлемент, ?(ТекущиеДанные = Неопределено, "", ТекущиеДанные.ID));
		КонецЦикла;
		
		Элемент.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;

	ПодборОпераций = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораОперацииНаСервере(ТекущиеДанные.Операция, ТекущиеДанные.ID);
	
	СписокОперацийПриАктивизацииСтроки(Элементы.СписокОпераций);
	УстановитьНаличиеОпасныхИПовышеннойОпасностиОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПередНачаломИзменения(Элемент, Отказ)
	Если Не УстановитьБлокировкуДанныхНаСервере(ТехКарта.Ссылка, ТехКарта.ВерсияДанных, Ложь) Тогда
		ТекстСообщения = НСтр("ru = 'Объект был изменен или удален. Перечитайте данные объекта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ID) И НоваяСтрока = Истина Тогда
		ТекущиеДанные.ID = Новый УникальныйИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		
		Если НоваяСтрока Тогда
			СписокОперацийМодифицированность = Истина;
		КонецЕсли;
		
		ЗначВозврата = ПроверитьЗацикливаниеНаСервере(Элементы.СписокОпераций.ТекущиеДанные.Операция);
		Если ТипЗнч(ЗначВозврата) = Тип("Соответствие") Тогда
			Для каждого ЭлемСтруктуры Из ЗначВозврата Цикл
				ПоказатьПредупреждение(Неопределено,СтрШаблон(
				НСтр("ru = 'Тех. карта %1
				|не может быть включена в тех. карту
				|%2.
				|Использование замкнутых циклов ремонтов
				|приведет к неправильной работе программы!'"),СокрЛП(ЭлемСтруктуры.Значение),СокрЛП(ЭлемСтруктуры.Ключ)));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные  = Элементы.СписокОпераций.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПересчитатьКоличествоМатериальныхЗатратПоКоличествуОпераций(ТекущиеДанные.ID, ТекущиеДанные.Операция, ТекущиеДанные.Количество);
	ПересчитатьКоличествоТрудовыхЗатратПоКоличествуОпераций(ТекущиеДанные.ID, ТекущиеДанные.Операция, ТекущиеДанные.Количество);
	ПересчитатьКоличествоИнструментовПоКоличествуОпераций(ТекущиеДанные.ID, ТекущиеДанные.Операция, ТекущиеДанные.Количество);
	
	СписокОперацийМодифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтбора", ТехКарта.ДатаПринятия);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует")));
		
		ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")  Тогда 
		
		ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", , Элемент);	
	Иначе
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"));
		СписокВыбора.Добавить(Тип("СправочникСсылка.торо_ТехнологическиеОперации"));
		
		ДопПараметры = Новый Структура("Элемент", Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораТипаДанныхОперации", ЭтаФорма, ДопПараметры);
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,НСтр("ru = 'Выбор типа данных'"));
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено
		И ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.Форма.ФормаЭлемента",Новый Структура("Ключ, ДатаСреза", ТекущиеДанные.Операция, Техкарта.ДатаПринятия),,,,,Неопределено);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Параметры.Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Параметры.Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
		КонецЕсли;
		// очистка поля кнопкой Del
		Если Текст = "" И ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")  Тогда
			ЗначВозврата = ОбработкаВыбораОперацииНаСервере(ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка"), ТекущиеДанные.ID);
			ТекущиеДанные.Количество = 0;
		ИначеЕсли  Текст = "" И ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("Операция", ТекущиеДанные.Операция);
			МассивСтрок = тзМерыБезопасностиРемонтов.НайтиСтроки(СтруктураОтбора);
			Для Каждого ЭлМассива Из МассивСтрок Цикл
				тзМерыБезопасностиРемонтов.Удалить(ЭлМассива);
			КонецЦикла;
			ТекущиеДанные.ПродолжительностьТекст = СформироватьПродолжительность(0);
			ТекущиеДанные.Количество = 0;
			ТекущиеДанные.СпособВыполнения = Неопределено;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияОчистка(Элемент, СтандартнаяОбработка)

	ТекСтрока = Элементы.СписокОпераций.ТекущиеДанные;
	УдалитьЗатратыПриУдаленииОперации(ТекСтрока);
	
	Если ТипЗнч(ТекСтрока.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ОткрепитьВсеФайлыОтОперацииНаСервере(ТехКарта.ССылка, ТекСтрока.ID);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
	МассивСтрок = ТехКарта.СписокОпераций.НайтиСтроки(СтруктураОтбора);
	Для Каждого ЭлМассива Из МассивСтрок Цикл
		ТехКарта.СписокОпераций.Удалить(ЭлМассива);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПроверкаВозможностиВводаНормативов(Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.МатериальныеЗатраты.ТекущиеДанные);		
	Иначе
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.МатериальныеЗатраты.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда 
		
		Для Каждого Значение Из ВыделенныеСтроки Цикл
			ТекДанные = МатериальныеЗатраты.НайтиПоИдентификатору(Значение);
		
			Если НЕ ПроверитьВозможностьУдаления(ТекДанные) Тогда 
				ТекстСообщения =  СтрШаблон(НСтр("ru='Номенклатура ""%1"" не может быть удалена.'"), ТекДанные.Номенклатура);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
			Если НЕ ТекДанныеОперация = Неопределено Тогда
				Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(Новый Структура("ID, Номенклатура, Характеристика", ТекДанные.ID, ТекДанные.Номенклатура, ТекДанные.Характеристика));
					Для каждого Элем Из МассивСтрок Цикл
						тзМатериальныеЗатратыРемонтов.Удалить(Элем);
					КонецЦикла;
				Иначе
					МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID, Номенклатура, Характеристика", ТекДанные.ID, ТекДанные.Номенклатура, ТекДанные.Характеристика));
					Для каждого Элем Из МассивСтрок Цикл
						ТехКарта.МатериальныеЗатраты.Удалить(Элем);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID, Номенклатура, Характеристика", ТекДанные.ID, ТекДанные.Номенклатура, ТекДанные.Характеристика));
			Если МассивСтрок.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данная номенклатура уже добавлена!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			МатериальныеЗатраты.Удалить(МатериальныеЗатраты.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			ДанныеДоРедактирования = СтруктураДанныхДоРедактирования[Элемент.Имя];
			МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID, Номенклатура, Характеристика", ТекДанные.ID, ДанныеДоРедактирования.Номенклатура, ДанныеДоРедактирования.Характеристика));
			Для каждого Элем Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте 
Процедура МатериальныеЗатратыУпаковкаПриИзменении(Элемент)
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		ТекДанные.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНаСервере(ТекДанные.Упаковка);
		МатериальныеЗатратыКоличествоУпаковокПриИзменении(Элементы.МатериальныеЗатраты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоНаЕдиницуПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеМатЗатраты = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеМатЗатраты.Количество = ТекДанныеМатЗатраты.КоличествоНаЕдиницу * ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Номенклатура, Характеристика", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура, ТекДанныеМатЗатраты.Характеристика);
			МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.Количество = ТекДанныеМатЗатраты.Количество;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Номенклатура, Характеристика", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура, ТекДанныеМатЗатраты.Характеристика);
			МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.Количество = ТекДанныеМатЗатраты.Количество;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеМатЗатраты = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеМатЗатраты.Количество = ТекДанныеМатЗатраты.КоличествоУпаковок * ?(ТекДанныеМатЗатраты.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"), 1, ПолучитьКоэффициентУпаковкиНаСервере(ТекДанныеМатЗатраты.Упаковка));
		ТекДанныеМатЗатраты.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.Количество / ТекДанныеОперации.Количество;
		
		ТекДанныеМатЗатраты.КоличествоУпаковокНаЕдиницу = ТекДанныеМатЗатраты.КоличествоУпаковок / ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Номенклатура, Характеристика", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура, ТекДанныеМатЗатраты.Характеристика);
			МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоУпаковокНаЕдиницу = ТекДанныеМатЗатраты.КоличествоУпаковокНаЕдиницу;
				Стр.Количество                  = ТекДанныеМатЗатраты.Количество;
				Стр.КоличествоНаЕдиницу         = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.КоличествоУпаковок          = ТекДанныеМатЗатраты.КоличествоУпаковок;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Номенклатура, Характеристика", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура, ТекДанныеМатЗатраты.Характеристика);
			МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоУпаковокНаЕдиницу = ТекДанныеМатЗатраты.КоличествоУпаковокНаЕдиницу;
				Стр.Количество                  = ТекДанныеМатЗатраты.Количество;
				Стр.КоличествоНаЕдиницу         = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.КоличествоУпаковок          = ТекДанныеМатЗатраты.КоличествоУпаковок;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.ТрудовыеЗатраты.ТекущиеДанные);
	Иначе
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Если НЕ ПроверитьВозможностьУдаления(ТекДанные) Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзТрудовыеЗатратыРемонтов.НайтиСтроки(Новый Структура("ID, Квалификация", ТекДанные.ID, ТекДанные.Квалификация));
				Для каждого Элем Из МассивСтрок Цикл
					тзТрудовыеЗатратыРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID, Квалификация", ТекДанные.ID, ТекДанные.Квалификация));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.ТрудовыеЗатраты.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		
		Если НоваяСтрока Тогда
			ТрудозатратыМодифицированность = Истина;
		КонецЕсли;
	
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID, Квалификация", ТекДанные.ID, ТекДанные.Квалификация));
			Если МассивСтрок.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данная квалификация уже добавлена!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПослеУдаления(Элемент)
	ТрудозатратыМодифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Квалификация) Тогда
			ТрудовыеЗатраты.Удалить(ТрудовыеЗатраты.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 

	Иначе
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.ТрудовыеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			ДанныеДоРедактирования = СтруктураДанныхДоРедактирования[Элемент.Имя];
			МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID, Квалификация", ТекДанные.ID, ДанныеДоРедактирования.Квалификация));
			Для каждого Элем Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не Элементы.ТабЧасти.ТолькоПросмотр и Поле.Имя = "ТрудовыеЗатратыВремяРаботыТекст" Тогда
		
		ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,Элемент, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		ФормаПодбораПродолжительности.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаПодбораПродолжительности.ПродолжительностьВСекундах = Элементы.ТрудовыеЗатраты.ТекущиеДанные.ВремяРаботы;
		ФормаПодбораПродолжительности.Открыть();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Модифицированность = Истина;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТрудозатратыМодифицированность = Истина;
		ТекДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
		ТрудовыеЗатратыВремяРаботыПриИзменении(Элементы.ТрудовыеЗатраты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыНаЕдиницуПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеТрудЗатраты = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеТрудЗатраты.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу * ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеТрудЗатраты.Квалификация);
			МассивСтрок = тзТрудовыеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеТрудЗатраты.Квалификация);
			МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеТрудЗатраты = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботы / ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеТрудЗатраты.Квалификация);
			МассивСтрок = тзТрудовыеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеТрудЗатраты.Квалификация);
			МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструментыИТехника

&НаКлиенте
Процедура ИнструментыИТехникаВремяРаботыПриИзменении(Элемент)
	
	ТекДанныеОперации    = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеИнструменты = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеИнструменты.ВремяРаботыНаЕдиницу = ТекДанныеИнструменты.ВремяРаботы / ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеИнструменты.Инструмент);
			МассивСтрок = тзИнструментыИТехникаРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеИнструменты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеИнструменты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Инструмент", ТекДанныеОперации.ID, ТекДанныеИнструменты.Инструмент);
			МассивСтрок = ТехКарта.ИнструментыИТехника.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеИнструменты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеИнструменты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.ИнструментыИТехника.ТекущиеДанные);
	Иначе
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Если НЕ ПроверитьВозможностьУдаления(ТекДанные) Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзИнструментыИТехникаРемонтов.НайтиСтроки(Новый Структура("ID, Инструмент", ТекДанные.ID, ТекДанные.Инструмент));
				Для каждого Элем Из МассивСтрок Цикл
					тзИнструментыИТехникаРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.ИнструментыИТехника.НайтиСтроки(Новый Структура("ID, Инструмент", ТекДанные.ID, ТекДанные.Инструмент));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.ИнструментыИТехника.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = ИнструментыИТехника.НайтиСтроки(Новый Структура("ID, Инструмент", ТекДанные.ID, ТекДанные.Инструмент));
			Если МассивСтрок.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данный инструмент уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Инструмент) Тогда
			ИнструментыИТехника.Удалить(ИнструментыИТехника.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.ИнструментыИТехника.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			ДанныеДоРедактирования = СтруктураДанныхДоРедактирования[Элемент.Имя];
			МассивСтрок = ТехКарта.ИнструментыИТехника.НайтиСтроки(Новый Структура("ID, Инструмент", ТекДанные.ID, ДанныеДоРедактирования.Инструмент));
			Для каждого Элем Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИнструментыИТехникаВремяРаботыТекст" Тогда
		
		ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,Элемент, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		
		ФормаПодбораПродолжительности.ПродолжительностьВСекундах = Элементы.ИнструментыИТехника.ТекущиеДанные.ВремяРаботы;
		ФормаПодбораПродолжительности.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
	КонецЕсли;
	
	ИнструментыИТехникаВремяРаботыПриИзменении(Элементы.ИнструментыИТехника);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаУпаковкаПриИзменении(Элемент)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		ТекДанные.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНаСервере(ТекДанные.Упаковка);
		ИнструментыИТехникаКоличествоУпаковокПриИзменении(Элементы.МатериальныеЗатраты);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.ИнструментыИТехника.ТекущиеДанные.Инструмент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекДанныеИнструменты = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если НЕ ТекДанныеИнструменты = Неопределено Тогда
		ТекДанныеИнструменты.Количество = ТекДанныеИнструменты.КоличествоУпаковок * ?(ТекДанныеИнструменты.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"), 1, ПолучитьКоэффициентУпаковкиНаСервере(ТекДанныеИнструменты.Упаковка));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзмеряемыеПоказатели

&НаКлиенте
Процедура ИзмеряемыеПоказателиПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ИзмеряемыеПоказатели.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Если НЕ ПроверитьВозможностьУдаления(ТекДанные) Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзИзмеряемыеПоказателиРемонтов.НайтиСтроки(Новый Структура("ID, Показатель", ТекДанные.ID, ТекДанные.Показатель));
				Для каждого Элем Из МассивСтрок Цикл
					тзИзмеряемыеПоказателиРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.ИзмеряемыеПоказатели.НайтиСтроки(Новый Структура("ID, Показатель", ТекДанные.ID, ТекДанные.Показатель));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.ИзмеряемыеПоказатели.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ИзмеряемыеПоказатели.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = ИзмеряемыеПоказатели.НайтиСтроки(Новый Структура("ID, Показатель", ТекДанные.ID, ТекДанные.Показатель));
			Если МассивСтрок.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данный показатель уже добавлен!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.ИзмеряемыеПоказатели.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
			ИзмеряемыеПоказатели.Удалить(ИзмеряемыеПоказатели.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли;

	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.ИзмеряемыеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			ДанныеДоРедактирования = СтруктураДанныхДоРедактирования[Элемент.Имя];
			МассивСтрок = ТехКарта.ИзмеряемыеПоказатели.НайтиСтроки(Новый Структура("ID, Показатель", ТекДанные.ID, ДанныеДоРедактирования.Показатель));
			Для каждого Элем Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.ИзмеряемыеПоказатели.ТекущиеДанные);
	Иначе
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМерыБезопасности

&НаКлиенте
Процедура МерыБезопасностиПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.МерыБезопасности.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Если НЕ ПроверитьВозможностьУдаления(ТекДанные) Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
				
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзМерыБезопасностиРемонтов.НайтиСтроки(Новый Структура("ID, МераБезопасности", ТекДанные.ID, ТекДанные.МераБезопасности));
				Для каждого Элем Из МассивСтрок Цикл
					тзМерыБезопасностиРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.МерыБезопасности.НайтиСтроки(Новый Структура("ID, МераБезопасности", ТекДанные.ID, ТекДанные.МераБезопасности));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.МерыБезопасности.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.МерыБезопасности.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = МерыБезопасности.НайтиСтроки(Новый Структура("МераБезопасности", ТекДанные.МераБезопасности));
			Если МассивСтрок.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данная мера безопасности уже добавлена!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.МерыБезопасности.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.МераБезопасности) Тогда
			МерыБезопасности.Удалить(МерыБезопасности.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;

	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.МерыБезопасности.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			ДанныеДоРедактирования = СтруктураДанныхДоРедактирования[Элемент.Имя];
			МассивСтрок = ТехКарта.МерыБезопасности.НайтиСтроки(Новый Структура("ID, МераБезопасности", ТекДанные.ID, ДанныеДоРедактирования.МераБезопасности));
			Для каждого Элем Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элементы.МерыБезопасности.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указывать нормативные данные для ремонтов. Изменяйте нормативы у операций внутри ремонтов.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.МерыБезопасности.ТекущиеДанные);
	Иначе
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОказываемыеУслуги

&НаКлиенте
Процедура ОказываемыеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			ОказываемыеУслуги.Удалить(ОказываемыеУслуги.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.ОказываемыеУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			ДанныеДоРедактирования = СтруктураДанныхДоРедактирования[Элемент.Имя];
			МассивСтрок = ТехКарта.ОказываемыеУслуги.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ДанныеДоРедактирования.Номенклатура));
			Для каждого Элем Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаВозможностиВводаНормативов(Отказ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.ОказываемыеУслуги.ТекущиеДанные);		
	Иначе
		// Запись данных до редактирования
		торо_СобытияФормКлиентСервер.СохранитьДанныеСтрокиДоРедактирования(СтруктураДанныхДоРедактирования, Элемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = ОказываемыеУслуги.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
			Если МассивСтрок.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Данная услуга уже добавлена в список'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда 
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзОказываемыхУслугРемонтов.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
				Для каждого Элем Из МассивСтрок Цикл
					тзОказываемыхУслугРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.ОказываемыеУслуги.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.ОказываемыеУслуги.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыОпераций

&НаКлиенте
Процедура ФайлыОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОперацийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПрикрепитьФайлыКОперацииНаСервере(ТехКарта.Ссылка, ТекущиеДанные.ID, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение));
	Элементы.ФайлыОпераций.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВвестиВремяПростоя(Команда)
	
	ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,ЭтаФорма,Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбораПродолжительности.ПродолжительностьВСекундах = ТехКарта.ВремяПростоя;
	ФормаПодбораПродолжительности.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда) 	
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДатаОтбора", ТехКарта.ДатаПринятия);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует")));
	
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", ПараметрыФормы, Элементы.СписокОпераций);
	
	ПодборОпераций = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперацию(Команда)
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", 
		Новый Структура("МножественныйВыбор", Истина), Элементы.СписокОпераций);		
	
	ПодборОпераций = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНормативамТехОпераций(Команда)
	
	ТекДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено И ТипЗнч(ТекДанные.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоНормативамТехОперацийЗавершение", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), НСтр("ru = 'Продолжительность, материальные затраты, трудозатраты и инструменты будут заполнены на основании нормативных данных! Продолжать?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНормативамТехОперацийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоНормативамНаСервере(ТекДанные.ID, ТекДанные.Операция);
        Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДату(Команда)
Элементы.ТехКартаДатаПринятия.Доступность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура Перерассчитать(Команда)
	
	ТехКартаСпособРасчетаПродолжительностиПриИзменении(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДругиеВерсииТехкарты(Команда)
Если ЭтаФорма.Модифицированность Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораНеобходимостиСохраненияИзменений",ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),РежимДиалогаВопрос.ДаНетОтмена);
Иначе
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораТехкартыДляРедактирования",ЭтаФорма, Новый Структура("ТекущаяКарта", ТехКарта));
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.Форма.ФормаИсторииТехкарты",Новый Структура("Идентификатор",Объект.Ссылка),ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюВерсию(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		ПараметрыВопроса = Новый Структура("Назначение", "Создание_новой_версии");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораНеобходимостиСохраненияИзменений", ЭтаФорма, ПараметрыВопроса);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		СоздатьНовуюВерсиюТехкарты(Истина);
		УстановитьЗаголовокФормы();
		ТехКартаВыполнениеРемонтаТребуетОстановаОборудованияПриИзменении(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТехОпераций(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", ПараметрыФормы, Элементы.СписокОпераций);
	
	ПодборОпераций = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокТехКартВСоставе(Команда)
		
	СписокТехКарт = ПолучитьСписокТехКартВСоставе();
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", СписокТехКарт));
	ФормаСписка = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаСписка", ПараметрыФормы,,Объект.Ссылка);
	ФормаСписка.Элементы.Список.Отображение = ОтображениеТаблицы.Список; 	
	ФормаСписка.Открыть(); 	
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ПроверкаВозможностиВводаНормативов(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	Если Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	ИначеЕсли Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаИнструментыИТехника Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор инструментов и техники'"));
	ИначеЕсли Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаОказываемыеУслуги Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор услуг'"));
	    ПараметрыФормы.Вставить("ОтборПоУслугам", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("Склад", ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойСклад"));
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#Область РаботаСоСпискомФайловТехКартыВРазрезеОпераций

&НаКлиенте
Процедура ДобавитьФайлОперации(Команда)
	
	Если НЕ ТехКартаЗаписана() Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВыполняетсяДобавлениеФайлаОперации = Истина;
		ИДОперацииДляДобавленияФайла = ТекущиеДанные.ID;
		РаботаСФайламиКлиент.ДобавитьФайлы(ТехКарта.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваФайла(Команда)
	
	ТекущиеДанные = Элементы.ФайлыОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	ТекущиеДанные = Элементы.ФайлыОпераций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДанныеФайла = ПолучитьДанныеФайлаНаСервере(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФайлыОпераций(Команда)
	
	Если НЕ ТехКартаЗаписана() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура("ВладелецФайла", ТехКарта.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, ЗакрыватьПриВыборе", ПараметрыОтбора, Ложь);	
	ОткрытьФорму("Справочник.торо_ТехКартыПрисоединенныеФайлы.ФормаВыбора", ПараметрыФормы, Элементы.ФайлыОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрепитьФайлОперации(Команда)
	
	ТекущиеДанныеОперации = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанныеОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ФайлыОпераций.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрепитьФайлыОтОперацииНаСервере(ТехКарта.Ссылка, ТекущиеДанныеОперации.ID, ВыделенныеСтроки);
	Элементы.ФайлыОпераций.Обновить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ЗаполнениеТехКартДанными

&НаСервере
Процедура СоздатьНовуюВерсиюТехкарты(Знач ЗаполнитьТаблицы = Ложь, Знач ТехКартаОбъект = Неопределено, Знач Копирование = Ложь)
	
	ПредВерсияТехКарты = ТехКарта.Ссылка;
	Если ЗаполнитьТаблицы Тогда
		ТехКартаОбъект = ?(ТехКартаОбъект = Неопределено, РеквизитФормыВЗначение("ТехКарта").Скопировать(), ТехКартаОбъект);
		Объект.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке;
	Иначе
		ТехКартаОбъект = Справочники.торо_ТехКарты.СоздатьЭлемент();
	КонецЕсли; 
	
	ЗначениеВРеквизитФормы(ТехКартаОбъект, "ТехКарта");
	
	СоздаватьНовыйОбъект                      = Истина;
	Элементы.ТехКартаДатаПринятия.Доступность = Истина;
	Элементы.Изменить.Доступность             = Ложь;
	ТехКарта.ДатаПринятия                     = Дата("00010101");
	СтараяДатаПринятия                        = Дата("00010101");
	
	Если ЗаполнитьТаблицы И Копирование Тогда
		
		СтруктураТабличныхЧастейНормативов = Новый Структура();
		СтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты", тзМатериальныеЗатратыРемонтов);	
		СтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты", тзТрудовыеЗатратыРемонтов);
		СтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника", тзИнструментыИТехникаРемонтов);
		СтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", тзИзмеряемыеПоказателиРемонтов);
		СтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности", тзМерыБезопасностиРемонтов);
		СтруктураТабличныхЧастейНормативов.Вставить("ОказываемыеУслуги", тзОказываемыхУслугРемонтов);
		
		СоответствиеСтарыхИНовыхИД = Новый Соответствие;
		
		Для каждого Строка Из Техкарта.СписокОпераций Цикл          			
			СтарыйИДСтроки = Строка.ID;
			
			НовыйИДСтроки = СоответствиеСтарыхИНовыхИД[СтарыйИДСтроки];
			Если НовыйИДСтроки = Неопределено Тогда
				НовыйИДСтроки = Строка(Новый УникальныйИдентификатор);
				СоответствиеСтарыхИНовыхИД.Вставить(СтарыйИДСтроки, НовыйИДСтроки);						
			КонецЕсли;
			
			Строка.ID = НовыйИДСтроки;
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейНормативов Цикл 
				МассивСтрокКИзменению = Техкарта[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтарыйИДСтроки));
				Для каждого СтрокаКИзменениюID Из МассивСтрокКИзменению Цикл					
					СтрокаКИзменениюID.ID = НовыйИДСтроки;					
				КонецЦикла;
			КонецЦикла; 										
			
		КонецЦикла;
		
	КонецЕсли;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоТехКарте(ТехКартаСсылка = Неопределено, Дата = Неопределено)
	
	Если ТехКартаСсылка = Неопределено Тогда
		ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Объект.Ссылка, Дата);
	КонецЕсли;
	
	ТехКартаОбъект = ТехКартаСсылка.ПолучитьОбъект();
	
	Если НЕ МультиязычностьСервер.ЭтоОсновнойЯзык() Тогда
		ТехКартаОбъект.ПриЧтенииПредставленийНаСервере();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТехКартаОбъект, "ТехКарта");
	
	СтараяДатаПринятия = ТехКартаОбъект.ДатаПринятия;
	ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКарта.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКартаОбъект,
												тзМатериальныеЗатраты = Неопределено,
												тзТрудовыеЗатраты     = Неопределено,
												тзИзмеряемыеПоказатели= Неопределено,
												тзИнструментыИТехника = Неопределено,
												тзМерыБезопасности    = Неопределено,
												тзУслуг    			  = Неопределено)
												
	Если тзМатериальныеЗатраты = Неопределено Тогда
		тзМатериальныеЗатраты = тзМатериальныеЗатратыРемонтов;
	КонецЕсли; 											
	Если тзТрудовыеЗатраты = Неопределено Тогда
		тзТрудовыеЗатраты = тзТрудовыеЗатратыРемонтов;
	КонецЕсли;
	Если тзИзмеряемыеПоказатели = Неопределено Тогда
		тзИзмеряемыеПоказатели = тзИзмеряемыеПоказателиРемонтов;
	КонецЕсли;	
	Если тзИнструментыИТехника = Неопределено Тогда
		тзИнструментыИТехника = тзИнструментыИТехникаРемонтов;
	КонецЕсли;
	Если тзМерыБезопасности = Неопределено Тогда
		тзМерыБезопасности = тзМерыБезопасностиРемонтов;
	КонецЕсли;		
	Если тзУслуг= Неопределено Тогда
		тзУслуг = тзОказываемыхУслугРемонтов;
	КонецЕсли;	
	
	тзМатериальныеЗатраты.Очистить();
	тзТрудовыеЗатраты.Очистить();
	тзИзмеряемыеПоказатели.Очистить();
	тзИнструментыИТехника.Очистить();
	тзМерыБезопасности.Очистить();
	тзУслуг.Очистить();
	
	Если Не ТехКарта.СписокОпераций.Количество() Тогда
		МатериальныеЗатраты.Очистить();
		ТрудовыеЗатраты.Очистить();
		ИзмеряемыеПоказатели.Очистить();
		ИнструментыИТехника.Очистить();
		МерыБезопасности.Очистить();
		ОказываемыеУслуги.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаСОперацией Из ТехКарта.СписокОпераций Цикл	
			
		ТабМат = Новый ТаблицаЗначений;
		ТабМат.Колонки.Добавить("Номенклатура");
		ТабМат.Колонки.Добавить("ЕдиницаИзмерения");
		ТабМат.Колонки.Добавить("Количество");
		ТабМат.Колонки.Добавить("Качество");
		ТабМат.Колонки.Добавить("Упаковка");
		ТабМат.Колонки.Добавить("КоличествоУпаковок");
		ТабМат.Колонки.Добавить("КоличествоУпаковокНаЕдиницу");
		ТабМат.Колонки.Добавить("КоличествоНаЕдиницу");
		ТабМат.Колонки.Добавить("Характеристика");
		
		ТабТруд = Новый ТаблицаЗначений;
		ТабТруд.Колонки.Добавить("Квалификация", Новый ОписаниеТипов("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"));
		ТабТруд.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТабТруд.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
		ТабТруд.Колонки.Добавить("ВремяРаботыНаЕдиницу", Новый ОписаниеТипов("Число"));
		
		ТабИнстр = Новый ТаблицаЗначений;
		ТабИнстр.Колонки.Добавить("Инструмент", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабИнстр.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		ТабИнстр.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		Табинстр.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
		Табинстр.Колонки.Добавить("Расценка", Новый ОписаниеТипов("Число"));
		Табинстр.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТабИнстр.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
		ТабИнстр.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
		
		ТабПоказателей = Новый ТаблицаЗначений;
		ТабПоказателей.Колонки.Добавить("Показатель");
		
		ТабБезопасность = Новый ТаблицаЗначений;
		ТабБезопасность.Колонки.Добавить("МераБезопасности");
		
		ТабУслуг = Новый ТаблицаЗначений;
		ТабУслуг.Колонки.Добавить("Номенклатура");
		ТабУслуг.Колонки.Добавить("Контрагент");
		ТабУслуг.Колонки.Добавить("ДоговорКонтрагента");

		ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(СтрокаСОперацией.Операция, ТехКарта.ДатаПринятия); 
		
		ПолучитьМатериалыТехКарты(ТехКартаСсылка, ТабМат, ТехКартаСсылка.ДатаПринятия);	
		ПолучитьТрудЗатратыТехКарты(ТехКартаСсылка, ТабТруд, ТехКартаСсылка.ДатаПринятия);
		ПолучитьИнструментТехКарты(ТехКартаСсылка, ТабИнстр, ТехКартаСсылка.ДатаПринятия);
		ПолучитьМерыБезопасностиТехКарты(ТехКартаСсылка, ТабБезопасность, ТехКартаСсылка.ДатаПринятия);
		ПолучитьПоказателиТехКарты(ТехКартаСсылка, ТабПоказателей, ТехКартаСсылка.ДатаПринятия);
		ПолучитьУслугиТехКарты(ТехКартаСсылка, ТабУслуг, ТехКартаСсылка.ДатаПринятия);
		
		Табмат.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, Качество, Упаковка", "Количество, КоличествоУпаковок, КоличествоНаЕдиницу, КоличествоУпаковокНаЕдиницу");
		Табтруд.Свернуть("Квалификация, ВремяРаботыНаЕдиницу","Количество, ВремяРаботы");
		Табинстр.Свернуть("Инструмент, ЕдиницаИзмерения, Расценка, Валюта, Упаковка", "Количество, ВремяРаботы, КоличествоУпаковок");
		ТабПоказателей.Свернуть("Показатель");
		ТабБезопасность.Свернуть("МераБезопасности");
		ТабУслуг.Свернуть("Номенклатура, Контрагент, ДоговорКонтрагента");
		
		Для каждого ТекСтрока Из ТабМат Цикл 
			НС = тзМатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла; 		
					
		Для каждого ТекСтрока Из ТабТруд Цикл 
			НС = тзТрудовыеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТабПоказателей Цикл 
			НС = тзИзмеряемыеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла;
		
		Для каждого ТекСтрока Из Табинстр Цикл 
			НС = тзИнструментыИТехника.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла;
		
		ТабМерБезопасностиТехКарты = ТехКарта.МерыБезопасности.Выгрузить();
		Если ТипЗнч(тзМерыБезопасности) = ТИП("ТаблицаЗначений") Тогда
			ТабМерБезопасности = тзМерыБезопасности.Скопировать();
		Иначе
			ТабМерБезопасности = тзМерыБезопасности.Выгрузить();
		КонецЕсли;
		
		Для каждого ТекСтрока Из ТабБезопасность Цикл
			Если ТабМерБезопасности.Найти(ТекСтрока.МераБезопасности) = Неопределено Тогда
				НС = тзМерыБезопасности.Добавить();
				ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
				ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТабУслуг Цикл 
			Нс = тзУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла;  		
		
	КонецЦикла;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТехкартыДляРедактирования(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = ПредопределенноеЗначение("Справочник.торо_ТехКарты.ПустаяСсылка") Тогда
		
		СоздатьНовуюВерсиюТехкарты(Истина);
		УстановитьЗаголовокФормы();
		
	Иначе
		
		ЗаполнитьФормуПоТехКарте(Результат);
		СписокОперацийПриАктивизацииСтроки(Истина);
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.Родитель = Параметры.Родитель;
		КонецЕсли;
		
		УстановитьПризнакиОпаснойИПовышеннойОпасностиРаботВТЧ();
		
		ЭтаФорма.Модифицированность = Ложь;
		СоздаватьНовыйОбъект        = Ложь;
		УстановитьЗаголовокФормы();
		
		Элементы.НормаВремени.Заголовок = ТехКарта.НормаВремениТекст;
		
		ТехКартаВыполнениеРемонтаТребуетОстановаОборудованияПриИзменении(Истина);
		
		Для каждого Стр Из ТехКарта.СписокОпераций Цикл
			
			Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
			Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМатериалыТехКарты(ТехКартаОбъект, ТабМат, ДатаПринятия)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыМатериальныеЗатраты.НомерСтроки,
	               |	торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения,
	               |	торо_ТехКартыМатериальныеЗатраты.Количество КАК КоличествоНаЕдиницу,
	               |	торо_ТехКартыМатериальныеЗатраты.Количество,
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура,
	               |	торо_ТехКартыМатериальныеЗатраты.Качество,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок КАК КоличествоУпаковокНаЕдиницу,
	               |	торо_ТехКартыМатериальныеЗатраты.Упаковка,
	               |	торо_ТехКартыМатериальныеЗатраты.Характеристика
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыМатериальныеЗатраты.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыМатериальныеЗатраты.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТехКартаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Номенклатура) тогда
			НС = ТабМат.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Выборка);
		Иначе
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			ПолучитьМатериалыТехКарты(ТехКартаСсылка, ТабМат, ТехКартаСсылка.ДатаПринятия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТрудЗатратыТехКарты(ТехКартаОбъект, ТабТруд, ДатаПринятия)
	
	Если Не ЗначениеЗаполнено(ТехКартаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТиповРР = Новый Массив();
	МассивТиповРР.Добавить(Тип("СправочникСсылка.торо_ТехнологическиеОперации"));
	МассивТиповРР.Добавить(Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"));
	
	ТабТруд.Колонки.Добавить("ID_ПараллельнойОперации", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТабТруд.Колонки.Добавить("Родитель_ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТабТруд.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТабТруд.Колонки.Добавить("Операция", Новый ОписаниеТипов(МассивТиповРР));
	
	ПолучитьТрудЗатратыТехКартыРекурсивно(ТехКартаОбъект, ТабТруд, ДатаПринятия);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ
	               |	"""" КАК IDРемонта,
	               |	"""" КАК Документ,
	               |	Трудозатраты.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	Трудозатраты.Родитель_ID КАК Родитель_ID,
	               |	Трудозатраты.Количество КАК Количество,
	               |	Трудозатраты.ID КАК ID,
	               |	Трудозатраты.Операция КАК РемонтнаяРабота,
	               |	ВЫБОР
	               |		КОГДА Трудозатраты.Квалификация = ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ Трудозатраты.Квалификация
	               |	КОНЕЦ КАК ОбъектПотребности,
	               |	Трудозатраты.ВремяРаботы КАК ВремяРаботы,
	               |	Трудозатраты.ВремяРаботыНаЕдиницу КАК ВремяРаботыНаЕдиницу
	               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	               |ИЗ
	               |	&Трудозатраты КАК Трудозатраты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектПотребности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |ГДЕ
	               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
	               |ИТОГИ ПО
	               |	IDРемонта,
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
	               |	ВТ_ИтоговыеДанные.ID КАК ID,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
	               |	ВТ_ИтоговыеДанные.Количество КАК Количество
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные";
    
	Запрос.УстановитьПараметр("Трудозатраты", ТабТруд);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРемонтов = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщая = РезультатЗапроса[2].Выбрать();
	
	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("ОбъектПотребности", "Квалификация");
	ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяПлановаяПотребностьВКвалификациях");
	ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяПлановаяПотребностьВКвалификациях");
	ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.торо_КвалификацииРемонтногоПерсонала");
	
	ПотребностьКвалификаций = торо_Ремонты.ОбновитьПотребностьПоРемонтам("", ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПотребностьКвалификаций.Квалификация КАК ОбъектПотребности,
	               |	ПотребностьКвалификаций.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТ_ПотребностьКвалификаций
	               |ИЗ
	               |	&ПотребностьКвалификаций КАК ПотребностьКвалификаций
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_ПотребностьКвалификаций.Количество, 0)) КАК Количество,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК Квалификация,
	               |	СУММА(ВТ_ИтоговыеДанные.ВремяРаботы) КАК ВремяРаботы,
				   |	СУММА(ВТ_ИтоговыеДанные.ВремяРаботыНаЕдиницу) КАК ВремяРаботыНаЕдиницу
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПотребностьКвалификаций КАК ВТ_ПотребностьКвалификаций
	               |		ПО ВТ_ИтоговыеДанные.ОбъектПотребности = ВТ_ПотребностьКвалификаций.ОбъектПотребности
	               |ГДЕ
	               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
	               |	И НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности";
    
	Запрос.УстановитьПараметр("ПотребностьКвалификаций", ПотребностьКвалификаций);
	
	ТабТруд = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТрудЗатратыТехКартыРекурсивно(ТехКартаОбъект, ТабТруд, ДатаПринятия, Родитель_ID = "")
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
				   |	&Родитель_ID КАК Родитель_ID,
				   |	торо_ТехКартыСписокОпераций.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыТрудовыеЗатраты.НомерСтроки,
	               |	торо_ТехКартыТрудовыеЗатраты.Количество,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	ЕСТЬNULL(торо_ТехКартыТрудовыеЗатраты.Квалификация, НЕОПРЕДЕЛЕНО) КАК Квалификация,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботы,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботыНаЕдиницу КАК ВремяРаботыНаЕдиницу
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыТрудовыеЗатраты.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыТрудовыеЗатраты.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТехКартаОбъект);
	Запрос.УстановитьПараметр("Родитель_ID", Родитель_ID);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Квалификация) тогда
			ЗаполнитьЗначенияСвойств(ТабТруд.Добавить(), Выборка);
		ИначеЕсли Выборка.Операция_Техкарта Тогда
			ЗаполнитьЗначенияСвойств(ТабТруд.Добавить(), Выборка);
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			ПолучитьТрудЗатратыТехКартыРекурсивно(ТехКартаСсылка, ТабТруд, ТехКартаСсылка.ДатаПринятия, Выборка.ID);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнструментТехКарты(ТехКартаОбъект, ТабИнструм, ДатаПринятия)
	
	Если Не ЗначениеЗаполнено(ТехКартаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТиповРР = Новый Массив();
	МассивТиповРР.Добавить(Тип("СправочникСсылка.торо_ТехнологическиеОперации"));
	МассивТиповРР.Добавить(Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"));
	
	ТабИнструм.Колонки.Добавить("ID_ПараллельнойОперации", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТабИнструм.Колонки.Добавить("Родитель_ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТабИнструм.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТабИнструм.Колонки.Добавить("Операция", Новый ОписаниеТипов(МассивТиповРР));
	
	ПолучитьИнструментТехКартыРекурсивно(ТехКартаОбъект, ТабИнструм, ДатаПринятия);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ
	               |	"""" КАК IDРемонта,
	               |	"""" КАК Документ,
	               |	Инструменты.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	Инструменты.Родитель_ID КАК Родитель_ID,
	               |	Инструменты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Инструменты.Количество КАК Количество,
	               |	Инструменты.ID КАК ID,
	               |	Инструменты.Операция КАК РемонтнаяРабота,
	               |	ВЫБОР
	               |		КОГДА Инструменты.Инструмент = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ Инструменты.Инструмент
	               |	КОНЕЦ КАК ОбъектПотребности,
	               |	Инструменты.ВремяРаботы КАК ВремяРаботы,
	               |	Инструменты.Расценка КАК Расценка,
	               |	Инструменты.Валюта КАК Валюта,
	               |	Инструменты.Упаковка КАК Упаковка,
	               |	Инструменты.КоличествоУпаковок КАК КоличествоУпаковок
	               |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	               |ИЗ
	               |	&Инструменты КАК Инструменты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектПотребности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |ГДЕ
	               |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
	               |ИТОГИ ПО
	               |	IDРемонта,
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ИтоговыеДанные.IDРемонта КАК IDРемонта,
	               |	ВТ_ИтоговыеДанные.Документ КАК Документ,
	               |	ВТ_ИтоговыеДанные.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	ВТ_ИтоговыеДанные.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ВТ_ИтоговыеДанные.Родитель_ID КАК Родитель_ID,
	               |	ВТ_ИтоговыеДанные.ID КАК ID,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК ОбъектПотребности,
	               |	ВТ_ИтоговыеДанные.Количество КАК Количество
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные";
    
	Запрос.УстановитьПараметр("Инструменты", ТабИнструм);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРемонтов = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщая = РезультатЗапроса[2].Выбрать();
	
	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("ОбъектПотребности", "Инструмент");
	ПараметрыРасчета.Вставить("РСПотребности", "РегистрСведений.торо_ИтоговаяПлановаяПотребностьВИнструментах");
	ПараметрыРасчета.Вставить("РСПотребностиИмя", "торо_ИтоговаяПлановаяПотребностьВИнструментах");
	ПараметрыРасчета.Вставить("ТипОбъектаПотребности", "СправочникСсылка.Номенклатура");
	
	ПотребностьИнструментов = торо_Ремонты.ОбновитьПотребностьПоРемонтам("", ВыборкаРемонтов, ВыборкаОбщая, ПараметрыРасчета, Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПотребностьИнструментов.Инструмент КАК ОбъектПотребности,
	               |	ПотребностьИнструментов.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТ_ПотребностьИнструментов
	               |ИЗ
	               |	&ПотребностьИнструментов КАК ПотребностьИнструментов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИтоговыеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_ПотребностьИнструментов.Количество, 0)) КАК Количество,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности КАК Инструмент,
	               |	СУММА(ВТ_ИтоговыеДанные.ВремяРаботы) КАК ВремяРаботы,
	               |	ВТ_ИтоговыеДанные.Расценка КАК Расценка,
	               |	ВТ_ИтоговыеДанные.Валюта КАК Валюта,
	               |	ВТ_ИтоговыеДанные.Упаковка КАК Упаковка,
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_ПотребностьИнструментов.Количество, 0)) КАК КоличествоУпаковок
	               |ИЗ
	               |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПотребностьИнструментов КАК ВТ_ПотребностьИнструментов
	               |		ПО ВТ_ИтоговыеДанные.ОбъектПотребности = ВТ_ПотребностьИнструментов.ОбъектПотребности
				   |ГДЕ
				   |	НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = НЕОПРЕДЕЛЕНО
				   |	И НЕ ВТ_ИтоговыеДанные.ОбъектПотребности = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ИтоговыеДанные.ЕдиницаИзмерения,
	               |	ВТ_ИтоговыеДанные.ОбъектПотребности,
	               |	ВТ_ИтоговыеДанные.Расценка,
	               |	ВТ_ИтоговыеДанные.Упаковка,
	               |	ВТ_ИтоговыеДанные.Валюта";
    
	Запрос.УстановитьПараметр("ПотребностьИнструментов", ПотребностьИнструментов);
	
	ТабИнструм = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнструментТехКартыРекурсивно(ТехКартаОбъект, ТабИнструм, ДатаПринятия, Родитель_ID = "")
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	&Родитель_ID КАК Родитель_ID,
	               |	торо_ТехКартыСписокОпераций.Ссылка КАК Ссылка,
	               |	торо_ТехКартыСписокОпераций.ID_ПараллельнойОперации КАК ID_ПараллельнойОперации,
	               |	торо_ТехКартыИнструментыИТехника.НомерСтроки КАК НомерСтроки,
	               |	торо_ТехКартыИнструментыИТехника.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	торо_ТехКартыИнструментыИТехника.Количество КАК Количество,
	               |	торо_ТехКартыСписокОпераций.ID КАК ID,
	               |	торо_ТехКартыСписокОпераций.Операция КАК Операция,
	               |	ЕСТЬNULL(торо_ТехКартыИнструментыИТехника.Инструмент, НЕОПРЕДЕЛЕНО) КАК Инструмент,
	               |	торо_ТехКартыИнструментыИТехника.ВремяРаботы КАК ВремяРаботы,
	               |	торо_ТехКартыИнструментыИТехника.Расценка КАК Расценка,
	               |	торо_ТехКартыИнструментыИТехника.Валюта КАК Валюта,
	               |	торо_ТехКартыИнструментыИТехника.ЕдиницаИзмерения КАК Упаковка,
	               |	торо_ТехКартыИнструментыИТехника.Количество КАК КоличествоУпаковок,
	               |	торо_ТехКартыИнструментыИТехника.ВремяРаботы КАК ВремяРаботыНаЕдиницу
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ИнструментыИТехника КАК торо_ТехКартыИнструментыИТехника
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыИнструментыИТехника.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыИнструментыИТехника.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
    
	Запрос.УстановитьПараметр("Ссылка", ТехКартаОбъект);
	Запрос.УстановитьПараметр("Родитель_ID", Родитель_ID);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Инструмент) тогда
			ЗаполнитьЗначенияСвойств(ТабИнструм.Добавить(), Выборка);
		ИначеЕсли Выборка.Операция_Техкарта Тогда
			ЗаполнитьЗначенияСвойств(ТабИнструм.Добавить(), Выборка);
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			ПолучитьИнструментТехКартыРекурсивно(ТехКартаСсылка, ТабИнструм, ТехКартаСсылка.ДатаПринятия, Выборка.ID);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМерыБезопасностиТехКарты(ТехКартаОбъект, ТабБезопасность, ДатаПринятия)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка
				   |	И торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт";
	
	Запрос.УстановитьПараметр("Ссылка", ТехКартаОбъект);
	
	Для каждого СтрМБ Из ТехКартаОбъект.МерыБезопасности Цикл
		ЗаполнитьЗначенияСвойств(ТабБезопасность.Добавить(), СтрМБ);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
		ПолучитьМерыБезопасностиТехКарты(ТехКартаСсылка, ТабБезопасность, ТехКартаСсылка.ДатаПринятия);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьУслугиТехКарты(ТехКартаОбъект, ТабУслуг, ДатаПринятия)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыОказываемыеУслуги.НомерСтроки,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыОказываемыеУслуги.Номенклатура,
	               |	торо_ТехКартыОказываемыеУслуги.Контрагент,
	               |	торо_ТехКартыОказываемыеУслуги.ДоговорКонтрагента
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ОказываемыеУслуги КАК торо_ТехКартыОказываемыеУслуги
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыОказываемыеУслуги.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыОказываемыеУслуги.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТехКартаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Номенклатура) тогда
			ЗаполнитьЗначенияСвойств(ТабУслуг.Добавить(),Выборка);
		Иначе
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			ПолучитьУслугиТехКарты(ТехКартаСсылка, ТабУслуг, ТехКартаСсылка.ДатаПринятия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПоказателиТехКарты(ТехКартаОбъект, ТабПоказателей, ДатаПринятия)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыИзмеряемыеПоказатели.НомерСтроки,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыИзмеряемыеПоказатели.Показатель
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ИзмеряемыеПоказатели КАК торо_ТехКартыИзмеряемыеПоказатели
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыИзмеряемыеПоказатели.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыИзмеряемыеПоказатели.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТехКартаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Показатель) тогда
			ЗаполнитьЗначенияСвойств(ТабПоказателей.Добавить(),Выборка);
		Иначе
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			
			ПолучитьПоказателиТехКарты(ТехКартаСсылка, ТабПоказателей, ТехКартаСсылка.ДатаПринятия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСпискомФайловТехКартыВРазрезеОпераций

&НаКлиенте
Процедура УстановитьПараметрыДинамическогоСписка(Знач СсылкаТехКарта, БезОпераций = Ложь)
	
	ФайлыОпераций.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", СсылкаТехКарта);
	ФайлыОпераций.Параметры.УстановитьЗначениеПараметра("БезОпераций", БезОпераций);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическогоСписка(ID_Операции, ТехКартаОтбор)
	
	Если ID_Операции = "" Тогда
		СписокТехКарт = ПолучитьСписокВложенныхТехКарт(ТехКартаОтбор, ТехКарта.ДатаПринятия);
		УстановитьПараметрыДинамическогоСписка(СписокТехКарт, Истина);
	Иначе
		ТекущийОтбор = ФайлыОпераций.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
		Если ТекущийОтбор.Значение <> ТехКартаОтбор Тогда
			УстановитьПараметрыДинамическогоСписка(ТехКартаОтбор);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФайлыОпераций, "ID_Операции", ID_Операции,,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрикрепитьФайлыКОперацииНаСервере(ТехКартаССылка, ID_Операции, МассивФайлов)
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 1 Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ФайлыОперацийВТехКартах.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТехКарта.Установить(ТехКартаССылка);
		НаборЗаписей.Отбор.ID_Операции.Установить(ID_Операции);
		НаборЗаписей.Прочитать();
		
		Для каждого НовыйФайл из МассивФайлов Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ТехКарта = ТехКартаССылка;
			Запись.ID_Операции = ID_Операции;
			Запись.ПрисоединенныйФайл = НовыйФайл;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр("ru='Не удалось прикрепить файлы к операции. '") + Символы.ПС + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	Иначе
		
		НовыйФайл = МассивФайлов[0];
		Запись = РегистрыСведений.торо_ФайлыОперацийВТехКартах.СоздатьМенеджерЗаписи();
		Запись.ТехКарта = ТехКартаССылка;
		Запись.ID_Операции = ID_Операции;
		Запись.ПрисоединенныйФайл = МассивФайлов[0];
	      
		Попытка
			Запись.Записать(Истина);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонСообщения = НСтр("ru='Не удалось прикрепить файл ""%1"" к операции. '");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НовыйФайл) + Символы.ПС + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОткрепитьФайлыОтОперацииНаСервере(ТехКартаССылка, ID_Операции, МассивФайлов)
	
	Для каждого Файл из МассивФайлов Цикл
		Запись = РегистрыСведений.торо_ФайлыОперацийВТехКартах.СоздатьМенеджерЗаписи();
		Запись.ТехКарта = ТехКартаССылка;
		Запись.ID_Операции = ID_Операции;
		Запись.ПрисоединенныйФайл = Файл;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Попытка
				Запись.Удалить();
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ШаблонСообщения = НСтр("ru='Не удалось открепить файл ""%1"" от операции. '");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Файл) + Символы.ПС + ОписаниеОшибки;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОткрепитьВсеФайлыОтОперацииНаСервере(ТехКартаССылка, ID_Операции)
	
	НаборЗаписей = РегистрыСведений.торо_ФайлыОперацийВТехКартах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТехКарта.Установить(ТехКартаССылка);
	НаборЗаписей.Отбор.ID_Операции.Установить(ID_Операции);
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ШаблонСообщения = НСтр("ru='Не удалось открепить файлы от операции. '");
		ТекстСообщения = ШаблонСообщения + Символы.ПС + ОписаниеОшибки;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(ПрисоединенныйФайл, УникальныйИдентификатор)
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
	
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);
	
КонецФункции

&НаКлиенте
Функция ТехКартаЗаписана()
	
	Если НЕ ЗначениеЗаполнено(ТехКарта.Ссылка) Тогда
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru='Для прикрепления файлов необходимо записать элемент.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		#КонецЕсли
		
		ТекстСообщения = НСтр("ru='Для прикрепления файлов необходимо записать элемент. 
										|Выполнить запись?'");
		
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписи", ЭтотОбъект); 
		
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписи(Результат, Параметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВнешнийВидФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	Если РольДоступна("ЧтениеНоменклатуры") ИЛИ РольДоступна("ПолныеПрава") Тогда
		// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатериальныеЗатраты.Упаковка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		// Чтобы не отображалась единица измерения в Инструментах, когда заполнена Упаковка.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнструментыИТехникаИнструментЕдиницаИзмерения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнструментыИТехника.Упаковка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		// Оформление поля "Характеристика" для табличной части мат. затрат.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристика.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатериальныеЗатраты.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
		//
		
		// Оформление поля "Характеристика" для табличной части мат. затрат.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристика.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатериальныеЗатраты.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
		
		// Оформление для табличной части мер безопасности
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МерыБезопасности.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МерыБезопасности.ЭтоТехКарта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
		
	КонецЕсли;
	
	торо_ТехнологическиеКарты.ДобавитьУсловноеОформлениеДляПараллельныхТОТК(ЭтаФорма, "СписокОпераций", "ТехКарта.СписокОпераций");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Попытка
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда // значит Новый идентификатор не создается
			Если Не СоздаватьНовыйОбъект Тогда
				СтрокаНаименования = СтрШаблон(НСтр("ru = '%1 (Технологическая карта ремонтов) [Принята с: %2 г.][%3]'"), Объект.Наименование, Формат(ТехКарта.ДатаПринятия,"ДФ=dd.MM.yyyy"), Объект.Статус);
			Иначе
				СтрокаНаименования = СтрШаблон(НСтр("ru = '%1 (Технологическая карта ремонтов) (создание новой версии)'"), Объект.Наименование);
			КонецЕсли; 
		Иначе
			СтрокаНаименования = НСтр("ru = 'Технологическая карта ремонтов (создание)'");
		КонецЕсли;
		
		ЭтаФорма.Заголовок = СтрокаНаименования;
	Исключение
		// Обработка не требуется.
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОтСтатуса()
	
	ТолькоПросмотрКарты = Объект.Статус <> ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке")
		ИЛИ НЕ ПравоРедактирование;
		
	Если Не УстановитьБлокировкуДанныхНаСервере(ТехКарта.Ссылка, ТехКарта.ВерсияДанных, ТолькоПросмотрКарты) Тогда
		ТекстСообщения = НСтр("ru = 'Объект был изменен или удален. Перечитайте данные объекта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Исключения = Новый Соответствие; 
	Исключения.Вставить("ГруппаГлобальные", Новый Структура("СПодчиненными", Истина));
	Исключения.Вставить("ФормаЗаписатьИЗакрыть", Новый Структура("СПодчиненными", Ложь));
	Исключения.Вставить("ФормаЗаписать", Новый Структура("СПодчиненными", Ложь));
	Исключения.Вставить("ФормаСкопировать", Новый Структура("СПодчиненными", Ложь));
	Исключения.Вставить("ФормаПеречитать", Новый Структура("СПодчиненными", Ложь));
	Исключения.Вставить("ФормаУстановитьПометкуУдаления", Новый Структура("СПодчиненными", Ложь));
	Исключения.Вставить("ПодменюСоздатьНаОсновании", Новый Структура("СПодчиненными", Истина)); 
	Исключения.Вставить("ПодменюПечатьОбычное", Новый Структура("СПодчиненными", Истина));
	Исключения.Вставить("Форматоро_Перейти", Новый Структура("СПодчиненными", Истина));
	Исключения.Вставить("СписокОперацийОткрытьСписокТехКартВСоставе", Новый Структура("СПодчиненными", Ложь));
	Исключения.Вставить("ТехКартаСписокОперацийОперация", Новый Структура("СПодчиненными", Ложь));
	Исключения.Вставить("НаименованиеИКод", Новый Структура("СПодчиненными", Ложь));
	Исключения.Вставить("Статус", Новый Структура("СПодчиненными", Ложь));
	
	торо_РаботаССогласованиямиКлиентСервер.УстановитьТолькоПросмотрФормы(ЭтаФорма, Исключения, ТолькоПросмотрКарты);
	
	Если ТолькоПросмотрКарты Тогда
		Элементы.ТехКартаСписокОперацийОперация.РедактированиеТекста = Ложь;
		Элементы.ТехКартаСписокОперацийОперация.КнопкаВыбора = Ложь;
		Элементы.ТехКартаСписокОперацийОперация.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
	Иначе 
		Элементы.ТехКартаСписокОперацийОперация.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.Авто;
		Элементы.ТехКартаСписокОперацийОперация.РедактированиеТекста = Истина;
		Элементы.ТехКартаСписокОперацийОперация.КнопкаВыбора = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьПолейПростоя(ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования И Не ТолькоПросмотрКарты);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюУтвержденияСтатуса()
	
	Если Пользователи.РолиДоступны("торо_УтверждениеТехнологическихКарт") Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеСтатусы = Новый Массив;
	
	Если Объект.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует Тогда
		ДоступныеСтатусы.Добавить(Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует);	
	Иначе
		ДоступныеСтатусы.Добавить(Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке);
		ДоступныеСтатусы.Добавить(Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Закрыта);
	КонецЕсли;

	Элементы.Статус.СписокВыбора.ЗагрузитьЗначения(ДоступныеСтатусы); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПолейПростоя(ДоступностьПолейПростоя)
	
	Элементы.ВвестиВремяПростоя.Доступность = ДоступностьПолейПростоя И ПравоРедактирование;
	Элементы.ТехКартаВидПростоя.Доступность = ДоступностьПолейПростоя И ПравоРедактирование;
	
КонецПроцедуры

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()

	ЗаполнитьДобавленныеКолонкиНоменклатуры();
	ЗаполнитьДобавленныеКолонкиМерБезопасности(ЭтаФорма);
	УстановитьПризнакиОпаснойИПовышеннойОпасностиРаботВТЧ();
	
	Для каждого СтрокаОпераций Из ТехКарта.СписокОпераций Цикл
		СтрокаОпераций.ПродолжительностьТекст = СформироватьПродолжительность(СтрокаОпераций.НормаВремениВСекундах);
		Если ЗначениеЗаполнено(СтрокаОпераций.Операция) Тогда
			торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьРеквизитыПараллельностиТО(СтрокаОпераций, ТехКарта, Истина);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиНоменклатуры()

	// Тут должен был бы быть вызов НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции,
	// но, к сожалению, данная БСПшная процедурка не все коллекции поддерживает. Поэтому:
	Для Каждого СтрокаМатЗатрат Из МатериальныеЗатраты Цикл
		СтрокаМатЗатрат.ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(СтрокаМатЗатрат.Номенклатура);
		Если Не СтрокаМатЗатрат.ХарактеристикиИспользуются Тогда
			СтрокаМатЗатрат.Характеристика = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиМерБезопасности(Форма)
	
	Для каждого Строка из Форма.МерыБезопасности Цикл
		Строка.ЭтоТехКарта = ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиОпаснойИПовышеннойОпасностиРаботВТЧ()
	
	ТабОпераций = ТехКарта.СписокОпераций.Выгрузить(, "Операция");
	
	МассивОпераций = ТабОпераций.ВыгрузитьКолонку("Операция");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ВерсииТехКартСрезПоследних.ТехКарта,
	|	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
	|ИЗ
	|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаСреза, ИдентификаторТехКарты В (&МассивОпераций)) КАК торо_ВерсииТехКартСрезПоследних"; // обработано
	
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	Запрос.УстановитьПараметр("ДатаСреза", ТехКарта.ДатаПринятия);
	
	ТабТехКарт = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Если ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Стр.СодержитОпасныеОперации = Стр.Операция.Опасная;
			Стр.СодержитРаботыПовышеннойОпасности = Стр.Операция.РаботаПовышеннойОпасности;
		Иначе
			
			НайденнаяСтрока = ТабТехКарт.Найти(Стр.Операция, "ИдентификаторТехКарты");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Стр.СодержитОпасныеОперации = НайденнаяСтрока.ТехКарта.СодержитОпасныеОперации;
				Стр.СодержитРаботыПовышеннойОпасности = НайденнаяСтрока.ТехКарта.СодержитРаботыПовышеннойОпасности;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " м. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПересчетРеквизитовШапки

&НаСервере
Процедура РассчитатьПродолжительностьПоОперациямНаСервере(ПоНормамТО = Ложь)
	
	торо_ТехнологическиеКарты.РассчитатьПродолжительностьПоОперациям(ТехКарта, ПоНормамТО);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПродолжительностьПоТрудозатратамНаСервере()
	
	торо_ТехнологическиеКарты.РассчитатьПродолжительностьПоТрудозатратам(ТехКарта);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаличиеОпасныхИПовышеннойОпасностиОпераций()
	
	Если ФОИспользоватьОпасноеПроизводство ИЛИ ФОИспользоватьНарядДопускОбязательно Тогда
		
		МассивОпераций = Новый Массив;
		
		Для каждого Стр Из ТехКарта.СписокОпераций Цикл
			МассивОпераций.Добавить(Стр.Операция);
		КонецЦикла; 
		
		Если ТехКарта.СодержитОпасныеОперации Тогда
			ЕстьОпасныеОперации = торо_ТехнологическиеКарты.ПроверитьНаличиеОпасныхОпераций(МассивОпераций, ТехКарта.ДатаПринятия);
			ТехКарта.СодержитОпасныеОперации = ЕстьОпасныеОперации;
			Элементы.СодержитОпасныеОперации.Видимость = ЕстьОпасныеОперации;
			Элементы.КартинкаСодержитОпасныеОперации.Видимость = ЕстьОпасныеОперации;
		КонецЕсли;
		
		Если ТехКарта.СодержитРаботыПовышеннойОпасности Тогда
			ЕстьРаботыПовышеннойОпасности = торо_ТехнологическиеКарты.ПроверитьНаличиеРаботПовышеннойОпасности(МассивОпераций, ТехКарта.ДатаПринятия);
			ТехКарта.СодержитРаботыПовышеннойОпасности = ЕстьРаботыПовышеннойОпасности;
			Элементы.СодержитРаботыПовышеннойОпасности.Видимость = ЕстьРаботыПовышеннойОпасности;
			Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = ЕстьРаботыПовышеннойОпасности;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСвязанныхТехКарт

&НаСервере
Процедура ИзменитьЗависимыеТехКарты()
	
	СписокИзмененныхСвязанныхТехКарт.Очистить();
	
	Если Не ТехКарта = Неопределено Тогда
		
		ТекстИзмененныхТехКарт = "";
		ТекстСозданныхТехКарт  = "";
		ТекстСообщения         = "";
		ИмеютсяСозданные       = Ложь;
		ИмеютсяИзмененные      = Ложь;
		
		ИзменитьВидимыеТехКарты_Завершение(ТехКарта, Объект.Ссылка, ИмеютсяСозданные, ИмеютсяИзмененные, ТекстИзмененныхТехКарт, ТекстСозданныхТехКарт);
				
		Если ИмеютсяИзмененные Тогда
			ТекстСообщения = 
			СтрШаблон(НСтр("ru = 'Изменены связанные тех. карты: %1'"), ТекстИзмененныхТехКарт);
		КонецЕсли;  
		
		Если ИмеютсяСозданные Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + 
			СтрШаблон(НСтр("ru = 'Созданы новые версии тех. карт: %1'"),ТекстСозданныхТехКарт);
		КонецЕсли; 
		
		Если ТекстСообщения <> "" Тогда 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимыеТехКарты_Завершение(ТехКарта, ИдентификаторТехКарты, ИмеютсяСозданные, ИмеютсяИзмененные, ТекстИзмененныхТехКарт, ТекстСозданныхТехКарт)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТехКарты.Ссылка КАК ТехКарта,
	               |	торо_ТехКарты.ДатаПринятия КАК ДатаПринятия
	               |ПОМЕСТИТЬ ТехКартыДляИзменения
	               |ИЗ
	               |	Справочник.торо_ТехКарты КАК торо_ТехКарты
	               |ГДЕ
	               |	торо_ТехКарты.СписокОпераций.Операция = &ИдентификаторТехКарты
	               |	И торо_ТехКарты.ДатаПринятия >= &Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВерсииТехКарт.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
	               |	торо_ВерсииТехКарт.ТехКарта КАК ТехКарта
	               |ПОМЕСТИТЬ Идентификаторы
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	               |ГДЕ
	               |	торо_ВерсииТехКарт.ТехКарта В
	               |			(ВЫБРАТЬ
	               |				ТехкартыДляИзменения.ТехКарта
	               |			ИЗ
	               |				ТехкартыДляИзменения КАК ТехкартыДляИзменения)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТехкартыДляИзменения.ТехКарта,
	         	   |	Идентификаторы.ИдентификаторТехКарты,
		           |	ТехкартыДляИзменения.ДатаПринятия
	               |ИЗ
	               |	ТехкартыДляИзменения КАК ТехкартыДляИзменения
		           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Идентификаторы КАК Идентификаторы
		           |		ПО ТехкартыДляИзменения.ТехКарта = Идентификаторы.ТехКарта";

	Запрос.УстановитьПараметр("ИдентификаторТехКарты", ИдентификаторТехКарты);
	Запрос.УстановитьПараметр("Период", ТехКарта.ДатаПринятия);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			ТехКартаДляПолученияДанных = ПолучитьТехКартуПоИдентификатору(ИдентификаторТехКарты, Выборка.ДатаПринятия).ПолучитьОбъект();
			ТехКартаОбъект = Выборка.ТехКарта.ПолучитьОбъект();
			
			тзМатериальныеЗатраты  = Новый ТаблицаЗначений();
			тзТрудовыеЗатраты      = Новый ТаблицаЗначений();
			тзИзмеряемыеПоказатели = Новый ТаблицаЗначений();
			тзИнструментыИТехника  = Новый ТаблицаЗначений();
			тзМерыБезопасности     = Новый ТаблицаЗначений();
			
			тзМатериальныеЗатраты.Колонки.Добавить("Номенклатура");
			тзМатериальныеЗатраты.Колонки.Добавить("ЕдиницаИзмерения");
			тзМатериальныеЗатраты.Колонки.Добавить("Количество");
			тзМатериальныеЗатраты.Колонки.Добавить("Качество");
			тзМатериальныеЗатраты.Колонки.Добавить("Упаковка");
			тзМатериальныеЗатраты.Колонки.Добавить("КоличествоУпаковок");
			тзМатериальныеЗатраты.Колонки.Добавить("КоличествоУпаковокНаЕдиницу");
			тзМатериальныеЗатраты.Колонки.Добавить("КоличествоНаЕдиницу");
			тзМатериальныеЗатраты.Колонки.Добавить("ID");
			тзМатериальныеЗатраты.Колонки.Добавить("Операция");
			
			тзТрудовыеЗатраты.Колонки.Добавить("Квалификация");
			тзТрудовыеЗатраты.Колонки.Добавить("Количество");
			тзТрудовыеЗатраты.Колонки.Добавить("ВремяРаботы");
			тзТрудовыеЗатраты.Колонки.Добавить("ID");
			тзТрудовыеЗатраты.Колонки.Добавить("Операция");
			
			тзИнструментыИТехника.Колонки.Добавить("Инструмент");
			тзИнструментыИТехника.Колонки.Добавить("ЕдиницаИзмерения");
			тзИнструментыИТехника.Колонки.Добавить("Количество");
			тзИнструментыИТехника.Колонки.Добавить("ВремяРаботы");
			тзИнструментыИТехника.Колонки.Добавить("Расценка");
			тзИнструментыИТехника.Колонки.Добавить("Валюта");
			тзИнструментыИТехника.Колонки.Добавить("Упаковка");
			тзИнструментыИТехника.Колонки.Добавить("КоличествоУпаковок");
			тзИнструментыИТехника.Колонки.Добавить("ID");
			тзИнструментыИТехника.Колонки.Добавить("Операция");
			
			тзИзмеряемыеПоказатели.Колонки.Добавить("Показатель");
			тзИзмеряемыеПоказатели.Колонки.Добавить("ID");
			тзИзмеряемыеПоказатели.Колонки.Добавить("Операция");
			
			тзМерыБезопасности.Колонки.Добавить("МерыБезопасности");
			тзМерыБезопасности.Колонки.Добавить("ID");
			тзМерыБезопасности.Колонки.Добавить("Операция");
			
			ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКартаОбъект.Ссылка,
				тзМатериальныеЗатраты,
				тзТрудовыеЗатраты,
				тзИзмеряемыеПоказатели,
				тзИнструментыИТехника,
				тзМерыБезопасности);
			
			СтруктураТабличныхЧастейНормативов = Новый Структура();
			СтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты", тзМатериальныеЗатраты);	
			СтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты", тзТрудовыеЗатраты);
			СтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника", тзИнструментыИТехника);
			СтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", тзИзмеряемыеПоказатели);
			СтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности", тзМерыБезопасности);
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейНормативов Цикл // Для каждой табличной части
				
				Для каждого Строка Из ТехКартаОбъект.СписокОпераций Цикл          // по каждой операции Из техкарты
					
					Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
						
						МассивСтрокКУдалению = ТехКартаОбъект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID",Строка.ID));
						
						Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
							ТехКартаОбъект[КлючИЗначение.Ключ].Удалить(СтрокаКУдалению);
						КонецЦикла;
						
						МассивСтрокКДобавлению = КлючИЗначение.Значение.НайтиСтроки(Новый Структура("ID",Строка.ID));
						Для каждого СтрокаКДобавлению Из МассивСтрокКДобавлению Цикл
							НС = ТехКартаОбъект[КлючИЗначение.Ключ].Добавить();
							ЗаполнитьЗначенияСвойств(НС,СтрокаКДобавлению);
						КонецЦикла; 
						
					КонецЕсли; 
				КонецЦикла; 										
			КонецЦикла;
			
			СлужебныеРеквизитыЗаполнитьНаСервере();
			
			Для каждого Строка Из ТехКартаОбъект.СписокОпераций Цикл
				Если Строка.Операция = ИдентификаторТехКарты Тогда
					Строка.НормаВремениВСекундах = ТехКартаДляПолученияДанных.НормаВремени;
				КонецЕсли;
			КонецЦикла;
			
			Если ТехКартаОбъект.СпособРасчетаПродолжительности = Перечисления.торо_СпособыРасчетаПродолжительности.ПоНормамВремениТехОпераций Тогда
				торо_ТехнологическиеКарты.РассчитатьПродолжительностьПоОперациям(ТехКартаОбъект, Истина);
			ИначеЕсли ТехКартаОбъект.СпособРасчетаПродолжительности = Перечисления.торо_СпособыРасчетаПродолжительности.ПоНормамТрудозатрат Тогда
				торо_ТехнологическиеКарты.РассчитатьПродолжительностьПоТрудозатратам(ТехКартаОбъект);
			ИначеЕсли ТехКартаОбъект.СпособРасчетаПродолжительности = Перечисления.торо_СпособыРасчетаПродолжительности.ПоПродолжительностиОперацийРемонтов Тогда
				торо_ТехнологическиеКарты.РассчитатьПродолжительностьПоОперациям(ТехКартаОбъект);
			КонецЕсли;
			
			Попытка
				ТехКартаОбъект.Записать();
				
				СписокИзмененныхСвязанныхТехКарт.Добавить(ТехКартаОбъект.Ссылка);
				ТекстИзмененныхТехКарт = ТекстИзмененныхТехКарт + Символы.ПС +
				СтрШаблон(НСтр("ru = '    <%1> (действует с %2)'"),
				Выборка.ИдентификаторТехКарты, Формат(ТехКартаОбъект.ДатаПринятия, "ДФ=dd.MM.yyyy"));
				
				ИмеютсяИзмененные = Истина;
			Исключение
				ЗаписьЖурналаРегистрации("Исключение", УровеньЖурналаРегистрации.Предупреждение, 
					Метаданные.Справочники.торо_ИдентификаторыТехКарт,,ОписаниеОшибки());
			КонецПопытки; 
			
			ИзменитьВидимыеТехКарты_Завершение(ТехКартаОбъект, Выборка.ИдентификаторТехКарты, ИмеютсяСозданные, ИмеютсяИзмененные, ТекстИзмененныхТехКарт, ТекстСозданныхТехКарт);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьФормуСпискаОбИзменении()
	Оповестить("ОбновитьСписокТехКарт", ,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьСвязанныеТехКартыОбИзменении()
	
	Для каждого СвязанннаяТехКарта из СписокИзмененныхСвязанныхТехКарт Цикл
		Оповестить("ИзменениеТехКарты", СвязанннаяТехКарта.Значение, Объект.Ссылка);
	КонецЦикла;
	
	СписокИзмененныхСвязанныхТехКарт.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииТехКарты()
	
	ОбработатьОповещениеОбИзмененииТехКартыНаСервере();
		
	Элементы.НормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.НормаВремени);
	Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.ВремяПростоя);
	
	Элементы.КартинкаСодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	Элементы.СодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	
	Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	Элементы.СодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	
	УстановитьЗаголовокФормы();
	
	СписокОперацийПриАктивизацииСтроки(Элементы.СписокОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОбИзмененииТехКартыНаСервере()
	
	ТехКартаОбъект = ТехКарта.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ТехКартаОбъект, "ТехКарта");
	ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКарта.Ссылка);
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПроверкаВозможностиВводаНормативов(Отказ)
	
	Если Элементы.СписокОпераций.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Если ТипЗнч(Элементы.СписокОпераций.ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указывать нормативные данные для ремонтов. Изменяйте нормативы у операций внутри ремонтов.'"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не УстановитьБлокировкуДанныхНаСервере(ТехКарта.Ссылка, ТехКарта.ВерсияДанных, Ложь) Тогда
		ТекстСообщения = НСтр("ru = 'Объект был изменен или удален. Перечитайте данные объекта.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьУдаления(ТекСтрока)
	
	Если ТипЗнч(текСтрока.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьБлокировкуДанныхНаСервере(Ссылка, Версия, ТолькоПросмотрКарты)
	
	Попытка
		Если не ТолькоПросмотрКарты Тогда
			ЗаблокироватьДанныеДляРедактирования(Ссылка,Версия);
		КонецЕсли;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

&НаСервере
Функция ПолучитьСписокТехКартВСоставе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ТехКарты.Ссылка,
		|	торо_ВерсииТехКарт.ИдентификаторТехКарты КАК ТехКарта
		|ИЗ
		|	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		|	ПО торо_ВерсииТехКарт.ТехКарта = торо_ТехКарты.Ссылка
		|ГДЕ
		|	торо_ТехКарты.Операция = &ИдентификаторТехКарты";
	
	Запрос.УстановитьПараметр("ИдентификаторТехКарты", Объект.Ссылка);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();	
	
	Возврат ТаблицаРезультат.ВыгрузитьКолонку("ТехКарта");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВложенныхТехКарт(ТехКарта, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ВерсииТехКартСрезПоследних.ТехКарта КАК ТехКарта
	|ПОМЕСТИТЬ ВТ_ТехКарта
	|ИЗ
	|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&Период, ИдентификаторТехКарты = &ТехКарта) КАК торо_ВерсииТехКартСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СоставИерархическихТехКартРемонтов.Состав КАК Ссылка
	|ИЗ
	|	ВТ_ТехКарта КАК ВТ_ТехКарта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
	|		ПО ВТ_ТехКарта.ТехКарта = торо_СоставИерархическихТехКартРемонтов.ТехКарта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТехКарта.ТехКарта
	|ИЗ
	|	ВТ_ТехКарта КАК ВТ_ТехКарта";
	
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТехКартуПоИдентификатору(Идентификатор, Дата = Неопределено)
	
	Возврат РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(Идентификатор, Дата);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияНаСервере(Упаковка)
	
	Возврат Упаковка.Владелец.ЕдиницаИзмерения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	
	Возврат Упаковка.Коэффициент;
	
КонецФункции

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	Операция = СтруктураСтроки.Операция;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		Если ИмяТЧ = "МатериальныеЗатраты" Тогда
			СтруктураПоиска = Новый Структура("ID, Номенклатура, Характеристика", ID, текСтрока.Номенклатура, текСтрока.Характеристика);
		ИначеЕсли ИмяТЧ = "ИнструментыИТехника" Тогда 
			СтруктураПоиска = Новый Структура("ID, Инструмент", ID, текСтрока.Номенклатура);
		ИначеЕсли ИмяТЧ = "ОказываемыеУслуги" Тогда 
			СтруктураПоиска = Новый Структура("ID, Номенклатура", ID, текСтрока.Номенклатура);	
		КонецЕсли;
			
		НайденныеСтроки = ЭтотОбъект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрока);
			НоваяСтрока[ИмяРеквизита] = текСтрока.Номенклатура;
			Если ИмяТЧ <> "ОказываемыеУслуги" Тогда				
				НоваяСтрока.Количество = текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			КонецЕсли;
			
			Если ИмяТЧ = "МатериальныеЗатраты" Тогда
				НоваяСтрока.КоличествоНаЕдиницу = НоваяСтрока.Количество / Кол;
				НоваяСтрока.КоличествоУпаковокНаЕдиницу = НоваяСтрока.КоличествоУпаковок / Кол;
			КонецЕсли;
		
			НоваяСтрока.ID = ID;
			НоваяСтрока.Операция = Операция;
			
			НоваяСтрокаТехКарты = ТехКарта[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТехКарты, НоваяСтрока);
			
		Иначе
			Если ИмяТЧ <> "ОказываемыеУслуги" Тогда	
				
				НоваяСтрока = НайденныеСтроки[0];
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
				ИначеЕсли НоваяСтрока.Упаковка <> текСтрока.Упаковка Тогда
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр / ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка), НоваяСтрока.Упаковка.Коэффициент, 1);
				Иначе
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + текСтрока.КоличествоУпаковок;
				КонецЕсли;
				
				НоваяСтрока.Количество = НоваяСтрока.Количество + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
				
				Если ИмяТЧ = "МатериальныеЗатраты" Тогда
					НоваяСтрока.КоличествоНаЕдиницу = НоваяСтрока.Количество / Кол;
					НоваяСтрока.КоличествоУпаковокНаЕдиницу = НоваяСтрока.КоличествоУпаковок / Кол;
				КонецЕсли;
				
				НоваяСтрокаТехКарты = ТехКарта[ИмяТЧ].НайтиСтроки(СтруктураПоиска)[0];
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТехКарты, НоваяСтрока);
				
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(СтрокаТабличнойЧасти)
	
	СтрокаОпераций = Элементы.СписокОпераций.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Операция = СтрокаОпераций.Операция;
	СтрокаТабличнойЧасти.ID       = СтрокаОпераций.ID;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПоНормативамНаСервере(ТекДанныеID, ТекДанныеОперация)
	
	МассивОпераций = ТехКарта.СписокОпераций.НайтиСтроки(Новый Структура("ID, Операция", ТекДанныеID, ТекДанныеОперация));
	Если МассивОпераций.Количество() Тогда
		
		Строка = МассивОпераций[0];
		
		Строка.Продолжительность      = ТекДанныеОперация.НормаВремени / 3600;
		Строка.ПродолжительностьТекст = СформироватьПродолжительность(ТекДанныеОперация.НормаВремени);
		Строка.НормаВремениВСекундах  = ТекДанныеОперация.НормаВремени;
		Строка.СпособВыполнения       = Перечисления.СпособыСтроительства.Хозспособ;
		Строка.Количество	          = 1;
		
	КонецЕсли;
	
	// Заполнение табличных частей нормативов.
	
	СтруктураСоответствияТЧРемонта = Новый Структура();
	СтруктураСоответствияТЧРемонта.Вставить("МатериальныеЗатраты", ТехКарта.МатериальныеЗатраты);
	СтруктураСоответствияТЧРемонта.Вставить("ТрудовыеЗатраты", ТехКарта.ТрудовыеЗатраты);
	СтруктураСоответствияТЧРемонта.Вставить("ИнструментыИТехника", ТехКарта.ИнструментыИТехника);
	
	Для Каждого КлючИЗначение Из СтруктураСоответствияТЧРемонта Цикл
		
		МассивСтрок = КлючИЗначение.Значение.НайтиСтроки(Новый Структура("ID, Операция", ТекДанныеID, ТекДанныеОперация));
		
		Для каждого Стр Из МассивСтрок Цикл
			КлючИЗначение.Значение.Удалить(КлючИЗначение.Значение.Индекс(Стр));
		КонецЦикла;
		
		ТЧОперации = ТекДанныеОперация[КлючИЗначение.Ключ];
		Для каждого СтрокаТЧ Из ТЧОперации Цикл
			
			НоваяСтрокаТЧ = КлючИЗначение.Значение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
			НоваяСтрокаТЧ.ID = ТекДанныеID;
			НоваяСтрокаТЧ.Операция = ТекДанныеОперация;
			
			Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
				НоваяСтрокаТЧ.КоличествоНаЕдиницу = СтрокаТЧ.Количество;
				НоваяСтрокаТЧ.КоличествоУпаковокНаЕдиницу = СтрокаТЧ.КоличествоУпаковок;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	УстановитьОтборыТаблицНормативов(ТекДанныеID, ТекДанныеОперация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНормативыОпераций(ТехКартаОбъект)
	
	Если МатериальныеЗатраты.Количество() > 0 тогда
		текСтрока = МатериальныеЗатраты[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.МатериальныеЗатраты;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			ТаблицаНормативов.Удалить(ЭлМассива);
		КонецЦикла;
		
		Для каждого ТекСтрока Из МатериальныеЗатраты Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.МатериальныеЗатраты.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТрудовыеЗатраты.Количество() > 0 тогда
		текСтрока = ТрудовыеЗатраты[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.ТрудовыеЗатраты;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			ТаблицаНормативов.Удалить(ЭлМассива);
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТрудовыеЗатраты Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.ТрудовыеЗатраты.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	если ИнструментыИТехника.Количество() > 0 тогда
		текСтрока = ИнструментыИТехника[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.ИнструментыИТехника;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			ТаблицаНормативов.Удалить(ЭлМассива);
		КонецЦикла;
		
		Для каждого ТекСтрока Из ИнструментыИТехника Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.ИнструментыИТехника.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	если ИзмеряемыеПоказатели.Количество() > 0 тогда
		текСтрока = ИзмеряемыеПоказатели[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.ИзмеряемыеПоказатели;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			ТаблицаНормативов.Удалить(ЭлМассива);
		КонецЦикла;
		
		Для каждого ТекСтрока Из ИзмеряемыеПоказатели Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.ИзмеряемыеПоказатели.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	если МерыБезопасности.Количество() > 0 тогда
		текСтрока = МерыБезопасности[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.МерыБезопасности;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			ТаблицаНормативов.Удалить(ЭлМассива);
		КонецЦикла;
		
		Для каждого ТекСтрока Из МерыБезопасности Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.МерыБезопасности.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьЗатратыРемонтов(СтрокаОперации)
	
	Табмат = Новый ТаблицаЗначений;
	Табмат.Колонки.Добавить("Номенклатура");
	Табмат.Колонки.Добавить("Характеристика");
	Табмат.Колонки.Добавить("ЕдиницаИзмерения");
	Табмат.Колонки.Добавить("Количество");
	Табмат.Колонки.Добавить("Качество");
	Табмат.Колонки.Добавить("КоличествоНаЕдиницу");
	ТабМат.Колонки.Добавить("Упаковка");
	ТабМат.Колонки.Добавить("КоличествоУпаковок");
	ТабМат.Колонки.Добавить("КоличествоУпаковокНаЕдиницу");
	
	ТабТруд = Новый ТаблицаЗначений;
	ТабТруд.Колонки.Добавить("Квалификация", Новый ОписаниеТипов("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"));
	ТабТруд.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТабТруд.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
	Табтруд.Колонки.Добавить("ВремяРаботыНаЕдиницу", Новый ОписаниеТипов("Число"));
	
	Табинстр = Новый ТаблицаЗначений;
	ТабИнстр.Колонки.Добавить("Инструмент", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабИнстр.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТабИнстр.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Табинстр.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
	Табинстр.Колонки.Добавить("Расценка", Новый ОписаниеТипов("Число"));
	Табинстр.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТабИнстр.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТабИнстр.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
		
	ТабПоказателей = Новый ТаблицаЗначений;
	ТабПоказателей.Колонки.Добавить("Показатель");
	
	ТабБезопасность = Новый ТаблицаЗначений;
	ТабБезопасность.Колонки.Добавить("МераБезопасности");
	
	ТабУслуг = Новый ТаблицаЗначений;
	ТабУслуг.Колонки.Добавить("Номенклатура");
	ТабУслуг.Колонки.Добавить("Контрагент");
	ТабУслуг.Колонки.Добавить("ДоговорКонтрагента");
	
	ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(СтрокаОперации.Операция, ТехКарта.ДатаПринятия); 
	
	ПолучитьматериалыТехКарты(ТехКартаСсылка, Табмат, ТехКартаСсылка.ДатаПринятия);
	ПолучитьТрудЗатратыТехКарты(ТехКартаСсылка, Табтруд, ТехКартаСсылка.ДатаПринятия);
	ПолучитьИнструментТехКарты(ТехКартаСсылка, Табинстр, ТехКартаСсылка.ДатаПринятия);
	ПолучитьПоказателиТехКарты(ТехКартаСсылка, ТабПоказателей, ТехКартаСсылка.ДатаПринятия);
	ПолучитьМерыБезопасностиТехКарты(ТехКартаСсылка, ТабБезопасность, ТехКартаСсылка.ДатаПринятия);
	ПолучитьУслугиТехКарты(ТехКартаСсылка, ТабУслуг, ТехКартаСсылка.ДатаПринятия);
	
	Табмат.Свернуть("Номенклатура,ЕдиницаИзмерения,Качество, Упаковка, КоличествоНаЕдиницу, КоличествоУпаковокНаединицу, Характеристика","Количество, КоличествоУпаковок");
	Табтруд.Свернуть("Квалификация, ВремяРаботыНаЕдиницу","Количество,ВремяРаботы");
	Табинстр.Свернуть("Инструмент,ЕдиницаИзмерения, ВремяРаботы, Расценка, Валюта, Упаковка","Количество, КоличествоУпаковок");
	ТабПоказателей.Свернуть("Показатель");
	ТабБезопасность.Свернуть("МераБезопасности");
	ТабУслуг.Свернуть("Номенклатура, Контрагент, ДоговорКонтрагента");
	
	Для каждого Текстрока Из Табмат Цикл 
		Нс = тзМатериальныеЗатратыРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
		Нс.Количество = СтрокаОперации.Количество * ТекСтрока.Количество;
	КонецЦикла;
	
	Для каждого Текстрока Из Табтруд Цикл 
		Нс = тзТрудовыеЗатратыРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
		Нс.ВремяРаботы = СтрокаОперации.Количество * ТекСтрока.ВремяРаботы;
	КонецЦикла;
	
	Для каждого Текстрока Из ТабПоказателей Цикл 
		Нс = тзИзмеряемыеПоказателиРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
	КонецЦикла;
	
	Для каждого Текстрока Из Табинстр Цикл 
		Нс = тзИнструментыИТехникаРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
	КонецЦикла;
	
	ТабМерБезопасности = ТехКарта.МерыБезопасности.Выгрузить();
	ТабМерБезопасностиРемонтов = тзМерыБезопасностиРемонтов.Выгрузить();
	
	Для каждого Текстрока Из ТабБезопасность Цикл 
		Если ТабМерБезопасности.Найти(ТекСтрока.МераБезопасности) = Неопределено 
			И ТабМерБезопасностиРемонтов.Найти(ТекСтрока.МераБезопасности) = Неопределено Тогда
			Нс = тзМерыБезопасностиРемонтов.Добавить();
			ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
			ЗаполнитьЗначенияСвойств(Нс,Текстрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Текстрока Из ТабУслуг Цикл 
		Нс = тзОказываемыхУслугРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТипаДанныхОперации(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		СтруктураОтбора = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтбора", ТехКарта.ДатаПринятия);
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		
		ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", ПараметрыФормы, Элементы.ТехКартаСписокОперацийОперация);
	ИначеЕсли Результат.Значение = Тип("СправочникСсылка.торо_ТехнологическиеОперации")  Тогда 
		ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", , Элементы.ТехКартаСписокОперацийОперация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗатратыПриУдаленииОперации(СтрокаОперации)
	
	мСтруктураТабличныхЧастейНормативов = Новый Структура();
	мСтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты", "тзМатериальныеЗатратыРемонтов");	
	мСтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты", "тзТрудовыеЗатратыРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника", "тзИнструментыИТехникаРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", "тзИзмеряемыеПоказателиРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности", "тзМерыБезопасностиРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ОказываемыеУслуги", "тзОказываемыхУслугРемонтов");
	
	Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейНормативов Цикл
		
		ТаблицаНормативов = ТехКарта[КлючИЗначение.Ключ];
		
		СтруктураОтбора = Новый Структура("Операция, ID", СтрокаОперации.Операция, СтрокаОперации.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			ТаблицаНормативов.Удалить(ЭлМассива);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ТаблицаНормативов = ЭтаФорма[КлючИЗначение.Значение];
			
			СтруктураОтбора = Новый Структура("Операция, ID", СтрокаОперации.Операция, СтрокаОперации.ID);
			МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
			Для Каждого ЭлМассива Из МассивСтрок Цикл 
				ТаблицаНормативов.Удалить(ЭлМассива);
			КонецЦикла;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ <> "МерыБезопасности" Тогда
			ЭтаФорма[КлючИЗначение.Ключ].Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДатуНаСервере(Дата, Идентификатор, ТехКарта, МассивИдентификаторов)
	
	// проверка на возможность смены даты по самой техкарте
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ВерсииТехКарт.ТехКарта
	|ИЗ
	|	РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|ГДЕ
	|	торо_ВерсииТехКарт.Период = &Период
	|	И торо_ВерсииТехКарт.ИдентификаторТехКарты = &ИдентификаторТехКарты
	|	И торо_ВерсииТехКарт.ТехКарта <> &ТехКарта";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ИдентификаторТехКарты", Идентификатор);
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'На указанную дату уже имеется технологическая карта.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка на возможность установки даты по всем техкартам, куда она входит в состав.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СоставИерархическихТехКартРемонтов.ТехКарта,
	               |	торо_СоставИерархическихТехКартРемонтов.ТехКарта.ДатаПринятия КАК ДатаПринятия
	               |ИЗ
	               |	РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
	               |ГДЕ
	               |	торо_СоставИерархическихТехКартРемонтов.Состав = &ТехКарта
	               |	И торо_СоставИерархическихТехКартРемонтов.ТехКарта.ДатаПринятия < &ДатаПринятия";
	
	Запрос.УстановитьПараметр("ДатаПринятия", Дата);
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		ШаблонСообщения = НСтр("ru = 'Невозможно изменить дату, так как данная технологическая карта входит в состав <%1> с датой принятия %2'");
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ТехКарта, Выборка.ДатаПринятия);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла; 
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	// проверка по составу техкарт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты КАК ИдентификаторТехКарты
	|ИЗ
	|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&Дата, ИдентификаторТехКарты В (&МассивИдентификаторов)) КАК торо_ВерсииТехКартСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("МассивИдентификаторов",МассивИдентификаторов);
	
	МассивИмеющихся = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторТехКарты");
	
	МассивСтрокКУдалению = Новый Массив;
	
	Для каждого Элемент Из МассивИдентификаторов Цикл
		Если МассивИмеющихся.Найти(Элемент) = Неопределено Тогда // значит нет такой версии на указанную дату
			МассивСтрокКУдалению.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла; 	
	
	Если МассивСтрокКУдалению.Количество() > 0 Тогда
		Возврат МассивСтрокКУдалению;
	КонецЕсли; 
	
	
	Возврат Истина;	
КонецФункции

&НаСервере
Функция ПроверитьЗацикливаниеНаСервере(ТехОперация)
	
	ЗнОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ЗнОбъект.ЕстьЗацикливаниеРемонтов(ТехОперация, Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыТаблицНормативов(ID, Операция)
	
	мСтруктураТабличныхЧастейНормативов = Новый Структура();
	мСтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты", "тзМатериальныеЗатратыРемонтов");	
	мСтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты", "тзТрудовыеЗатратыРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника", "тзИнструментыИТехникаРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", "тзИзмеряемыеПоказателиРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ОказываемыеУслуги", "тзОказываемыхУслугРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности", "тзМерыБезопасностиРемонтов");
	
	Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейНормативов Цикл
		
		Если ТипЗнч(Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ЭтаФорма[КлючИЗначение.Ключ].Загрузить(ЭтаФорма[КлючИЗначение.Значение].Выгрузить(Новый Структура("ID", ID)));	
			Элементы[КлючИЗначение.Ключ].ЦветТекста = Новый Цвет(128,128,128);
		Иначе
			ЭтаФорма[КлючИЗначение.Ключ].Загрузить(ТехКарта[КлючИЗначение.Ключ].Выгрузить(Новый Структура("ID", ID)));
			Элементы[КлючИЗначение.Ключ].ЦветТекста = Новый Цвет(51,51,51);
		КонецЕсли;	
		
	КонецЦикла;
	
	Для каждого Стр Из ТрудовыеЗатраты Цикл
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
	КонецЦикла;
	
	Для каждого Стр Из ИнструментыИТехника Цикл
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
	КонецЦикла;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНеобходимостиСохраненияИзменений(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 	
	
	Если Не ДопПараметры = Неопределено
		И ДопПараметры.Свойство("Назначение")
		И ДопПараметры.Назначение = "Создание_новой_версии" Тогда
		СоздатьНовуюВерсиюТехкарты(Истина);
		УстановитьЗаголовокФормы();
		
		ТехКартаВыполнениеРемонтаТребуетОстановаОборудованияПриИзменении(Истина);
		
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораТехкартыДляРедактирования",ЭтаФорма, Новый Структура("ТекущаяКарта", ТехКарта));
		ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.Форма.ФормаИсторииТехкарты",Новый Структура("Идентификатор",Объект.Ссылка),ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросПриИзмененииДаты(Результат, ДопПараметры) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	Если Не ДопПараметры = Неопределено
		И ДопПараметры.Свойство("МассивИдентификаторов") Тогда
		МассивИдентификаторов = ДопПараметры.МассивИдентификаторов;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВозможностьИзменитьДату = ПроверитьДатуНаСервере(ТехКарта.ДатаПринятия, Объект.Ссылка, ТехКарта.Ссылка, МассивИдентификаторов);
		
		Если ТипЗнч(ВозможностьИзменитьДату) = Тип("Массив") Тогда
			
			Для каждого Элемент Из ВозможностьИзменитьДату Цикл
				МассивСтрокКУдалению = ТехКарта.СписокОпераций.НайтиСтроки(Новый Структура("Операция",Элемент));
				Для каждого Строка Из МассивСтрокКУдалению Цикл
					ТехКарта.СписокОпераций.Удалить(Строка);
				КонецЦикла; 
			КонецЦикла; 
			ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКарта.Ссылка);
		Иначе
			
			Если Не ВозможностьИзменитьДату Тогда
				ТехКарта.ДатаПринятия = СтараяДатаПринятия;
			Иначе
				ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКарта.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
		СписокОперацийПриАктивизацииСтроки(Истина);
		ДатаПринятияИзменена = Истина;
		
	Иначе
		ТехКарта.ДатаПринятия = СтараяДатаПринятия;
		ДатаПринятияИзменена = Ложь;
	КонецЕсли;
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
		Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);

	КонецЦикла; 

	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьОВозможномИзмененииПродолжительностиРемонта(СписокОперацийМодифицированность, ТрудозатратыМодифицированность)
	
	Если СписокОперацийМодифицированность Тогда
		ТекстСообщения = НСтр("ru = 'Изменен состав операций технологической карты, перерассчитайте продолжительность ремонта!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ТрудозатратыМодифицированность Тогда
		ТекстСообщения = НСтр("ru = 'Изменены трудозатраты операций технологической карты, перерассчитайте продолжительность ремонта!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеМатериальныхЗатратИИнструментов(Отказ)
	
	ФОИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	
	Для каждого СтрокаТаблицы Из ТехКарта.МатериальныеЗатраты Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			
			ШаблонСообщения = НСтр("ru = 'В табличной части ""Материальные затраты"" для операции ""%1"": Не заполнено значение реквизита ""Количество""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СокрЛП(СтрокаТаблицы.Операция.Наименование));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЕсли;
		
		ХарактеристикиИспользуются = торо_НоменклатураСервер.ПолучитьХарактеристикиИспользуются(СтрокаТаблицы.Номенклатура);
		
		Если ФОИспользоватьХарактеристики И ХарактеристикиИспользуются И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика) Тогда
			
			ШаблонСообщения = НСтр("ru = 'В табличной части ""Материальные затраты"" для операции ""%1"": Не заполнено значение реквизита ""Характеристика""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СокрЛП(СтрокаТаблицы.Операция.Наименование));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЕсли;				
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ТехКарта.ИнструментыИТехника Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			
			ШаблонСообщения = НСтр("ru = 'В табличной части ""Инструменты и техника"" для операции ""%1"": Не заполнено значение реквизита ""Количество""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СокрЛП(СтрокаТаблицы.Операция.Наименование));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВерсиюТехКарты(ТекущийОбъект, Отказ)
	
	Если СоздаватьНовыйОбъект Тогда
		
		НовОбъект = Справочники.торо_ТехКарты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовОбъект, ТехКарта, , "Код");
		
		Если НЕ МультиязычностьСервер.ЭтоОсновнойЯзык() Тогда
			// Делаем до заполнения наименования, т.к. в ТекущийОбъект наименования
			// уже поменяны местами, их не надо менять снова. А вот комментарии переставить нужно.
			МультиязычностьСервер.ПередЗаписьюНаСервере(НовОбъект);
		КонецЕсли;
		
		НовОбъект.Наименование = ТекущийОбъект.Наименование;
		НовОбъект.НаименованиеЯзык1 = ТекущийОбъект.НаименованиеЯзык1;
		НовОбъект.НаименованиеЯзык2 = ТекущийОбъект.НаименованиеЯзык2;
		
		НовОбъект.СписокОпераций.Загрузить(ТехКарта.СписокОпераций.Выгрузить());
		НовОбъект.ОказываемыеУслуги.Загрузить(ТехКарта.ОказываемыеУслуги.Выгрузить());
		НовОбъект.МатериальныеЗатраты.Загрузить(ТехКарта.МатериальныеЗатраты.Выгрузить());
		НовОбъект.ТрудовыеЗатраты.Загрузить(ТехКарта.ТрудовыеЗатраты.Выгрузить());
		НовОбъект.ИнструментыИТехника.Загрузить(ТехКарта.ИнструментыИТехника.Выгрузить());
		НовОбъект.ИзмеряемыеПоказатели.Загрузить(ТехКарта.ИзмеряемыеПоказатели.Выгрузить());
		НовОбъект.МерыБезопасности.Загрузить(ТехКарта.МерыБезопасности.Выгрузить());
		
		ЗаписатьНормативыОпераций(НовОбъект);
		
		Если НовОбъект.ПроверитьЗаполнение() Тогда
			НовОбъект.Записать();
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		РаботаСФайламиСлужебный.СкопироватьПрисоединенныеФайлы(ПредВерсияТехКарты, НовОбъект.Ссылка);
		
		НаборЗаписей = РегистрыСведений.торо_ВерсииТехКарт.СоздатьНаборЗаписей();
		
		НС = НаборЗаписей.Добавить();
		НС.ИдентификаторТехКарты = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(ТекущийОбъект);
		НС.Период                = НовОбъект.ДатаПринятия;
		НС.ТехКарта              = НовОбъект.Ссылка;
		НаборЗаписей.Записать(Ложь);
		
		ЗаполнитьФормуПоТехКарте(НовОбъект.Ссылка);
		
	Иначе
		
		ТехКартаОбъект = РеквизитФормыВЗначение("ТехКарта");
		
		Если НЕ МультиязычностьСервер.ЭтоОсновнойЯзык() Тогда
			// Делаем до заполнения наименования, т.к. в ТекущийОбъект наименования
			// уже поменяны местами, их не надо менять снова. А вот комментарии переставить нужно.
			МультиязычностьСервер.ПередЗаписьюНаСервере(ТехКартаОбъект);
		КонецЕсли;
		
		ТехКартаОбъект.Наименование = ТекущийОбъект.Наименование;
		ТехКартаОбъект.НаименованиеЯзык1 = ТекущийОбъект.НаименованиеЯзык1;
		ТехКартаОбъект.НаименованиеЯзык2 = ТекущийОбъект.НаименованиеЯзык2;
		
		Если ТехКартаОбъект.ПроверитьЗаполнение() Тогда
			ТехКартаОбъект.Записать();
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ДатаПринятияИзменена Тогда
			
			МенеджерЗаписи = РегистрыСведений.торо_ВерсииТехКарт.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.ИдентификаторТехКарты = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(ТекущийОбъект);
			МенеджерЗаписи.Период                = СтараяДатаПринятия;
			МенеджерЗаписи.ТехКарта              = ТехКартаОбъект.Ссылка;
			
			МенеджерЗаписи.Прочитать(); 
			
			МенеджерЗаписи.ТехКарта              = ТехКартаОбъект.Ссылка;
			МенеджерЗаписи.Период                = ТехКартаОбъект.ДатаПринятия;
			МенеджерЗаписи.ИдентификаторТехКарты = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(ТекущийОбъект);
			
			МенеджерЗаписи.Записать(Истина);
			
			СтараяДатаПринятия                   = ТехКартаОбъект.ДатаПринятия;
			
		КонецЕсли; 
		
		Если НЕ МультиязычностьСервер.ЭтоОсновнойЯзык() Тогда
			ТехКартаОбъект.ПриЧтенииПредставленийНаСервере();
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ТехКартаОбъект,"ТехКарта");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоМатериальныхЗатратПоКоличествуОпераций(ИДОперации, Операция, КоличествоОпераций)
	
	Для каждого Стр Из МатериальныеЗатраты Цикл
		Стр.Количество = Стр.КоличествоНаЕдиницу * КоличествоОпераций;
		Стр.КоличествоУпаковок = Стр.КоличествоУпаковокНаЕдиницу * КоличествоОпераций;
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ID", ИДОперации);
	
	Если ТипЗнч(Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
	Иначе
		МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
	КонецЕсли;
	
	Для каждого Стр Из МассивСтрок Цикл
		Стр.Количество = Стр.КоличествоНаЕдиницу * КоличествоОпераций;
		Стр.КоличествоУпаковок = Стр.КоличествоУпаковокНаЕдиницу * КоличествоОпераций;
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоТрудовыхЗатратПоКоличествуОпераций(ИДОперации, Операция, КоличествоОпераций)
	
	Для каждого Стр Из ТрудовыеЗатраты Цикл
		Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * КоличествоОпераций;
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ID", ИДОперации);
	
	Если ТипЗнч(Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		МассивСтрок = тзТрудовыеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
	Иначе
		МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(СтруктураОтбора);
	КонецЕсли;
	
	Для каждого Стр Из МассивСтрок Цикл
		Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * КоличествоОпераций;
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоИнструментовПоКоличествуОпераций(ИДОперации, Операция, КоличествоОпераций)
	
	Для каждого Стр Из ИнструментыИТехника Цикл
		Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * КоличествоОпераций;
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ID", ИДОперации);
	
	Если ТипЗнч(Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		МассивСтрок = тзИнструментыИТехникаРемонтов.НайтиСтроки(СтруктураОтбора);
	Иначе
		МассивСтрок = ТехКарта.ИнструментыИТехника.НайтиСтроки(СтруктураОтбора);
	КонецЕсли;
	
	Для каждого Стр Из МассивСтрок Цикл
		Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * КоличествоОпераций;
	КонецЦикла;
	
КонецПроцедуры

#Область ПараллельноеВыполнениеТО

&НаКлиенте 
Процедура ЗаполнитьКолонкиПараллельногоВыполненияТО(СоответствиеРезультата = Неопределено)
	
	Для каждого СтрокаОпераций Из ТехКарта.СписокОпераций Цикл
		Если ЗначениеЗаполнено(СоответствиеРезультата) И ЗначениеЗаполнено(СоответствиеРезультата[СтрокаОпераций.ID]) Тогда
			СтрокаОпераций.ID_ПараллельнойОперации = СоответствиеРезультата[СтрокаОпераций.ID].ID_ПараллельнойОперации;
		ИначеЕсли ЗначениеЗаполнено(СоответствиеРезультата) Или ТипЗнч(СоответствиеРезультата) = Тип("Соответствие") Тогда
			СтрокаОпераций.ID_ПараллельнойОперации = "";
		КонецЕсли; 
		
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьРеквизитыПараллельностиТО(СтрокаОпераций, ТехКарта, Истина);
	КонецЦикла;
	
	// Нужен еще один отдельный цикл, т.к. в предыдущем реквизит ID_ПараллельнойОперации только заполняется,
	// и для следующих, неообработанных строк пересчет будет некорректный.
	Для каждого СтрокаОпераций Из ТехКарта.СписокОпераций Цикл
		торо_ТехнологическиеКартыКлиентСервер.ЗаполнитьРеквизитыПараллельностиТО(СтрокаОпераций, ТехКарта, Истина);
	КонецЦикла;
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ID_ПараллельнойОперации = ТекущиеДанные.ID_ПараллельнойОперации;
	Иначе
		ID_ПараллельнойОперации = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ОбработкаВыбораОперацииНаСервере(ТехОперация, ID)	

	ОперацияДляЗаполнения = Неопределено;
	
	// Затраты по ТК не хранятся в ТЧ, а подтягиваются в соответствующий реквизит формы "тз...".
	// Поэтому при изменении ТО/ТК (не при подборе) нужно удалить старые затраты: для ТК из реквизитов
	// формы, для ТО - из ТехКарта.
	СтруктураСоответствияТЧРемонта = Новый Структура();
	Если ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		СтруктураСоответствияТЧРемонта.Вставить("МатериальныеЗатраты",	тзМатериальныеЗатратыРемонтов);
		СтруктураСоответствияТЧРемонта.Вставить("ТрудовыеЗатраты", тзТрудовыеЗатратыРемонтов);
		СтруктураСоответствияТЧРемонта.Вставить("ИнструментыИТехника",	тзИнструментыИТехникаРемонтов);
		СтруктураСоответствияТЧРемонта.Вставить("МерыБезопасности",	тзМерыБезопасностиРемонтов);
		СтруктураСоответствияТЧРемонта.Вставить("ИзмеряемыеПоказатели",	тзИзмеряемыеПоказателиРемонтов);
	ИначеЕсли ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
	    СтруктураСоответствияТЧРемонта.Вставить("МатериальныеЗатраты",	ТехКарта.МатериальныеЗатраты);
		СтруктураСоответствияТЧРемонта.Вставить("ТрудовыеЗатраты", ТехКарта.ТрудовыеЗатраты);
		СтруктураСоответствияТЧРемонта.Вставить("ИнструментыИТехника",	ТехКарта.ИнструментыИТехника);
		
		ОперацияДляЗаполнения = ТехОперация;
	КонецЕсли;
	
	// Подбор ТО или добавление ТК/ТО
	Если ПодборОпераций И ЗначениеЗаполнено(ТехОперация) Тогда
	    НоваяСтрокаОперации = ТехКарта.СписокОпераций.Добавить();
		НоваяСтрокаОперации.ID = Новый УникальныйИдентификатор();
	// Изменение ТК/ТО в существующей строке	
	Иначе
		СтруктураОтбора = Новый Структура("ID", ID);
	
		Массив = ТехКарта.СписокОпераций.НайтиСтроки(СтруктураОтбора);
		Если Массив.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			НоваяСтрокаОперации = Массив[0];
		КонецЕсли;
		
		// Удалить старые матзатраты и т.п.
		Для каждого КлючИЗначение Из СтруктураСоответствияТЧРемонта Цикл
			КоллекцияСтрок = КлючИЗначение.Значение;
			
	    	МассивУдаляемыхСтрок = КоллекцияСтрок.НайтиСтроки(СтруктураОтбора);
			Для каждого Элемент Из МассивУдаляемыхСтрок Цикл
				КоллекцияСтрок.Удалить(КоллекцияСтрок.Индекс(Элемент));
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	// Проверку выбранного значения и самой ТК выполняем после очистки удаления 
	Если Не ЗначениеЗаполнено(ТехОперация) Тогда
	    Возврат НоваяСтрокаОперации.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		СтруктураВозврата = ПроверитьЗацикливаниеНаСервере(ТехОперация);
		Если СтруктураВозврата.Количество() > 0 Тогда
			Для каждого ЭлемСтруктуры Из СтруктураВозврата Цикл
				ШаблонСообщения = НСтр("ru = 'Тех. карта ""%1"" не может быть включена в тех. карту ""%2"".
											|Использование замкнутых циклов ремонтов приведет к неправильной работе программы!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СокрЛП(ЭлемСтруктуры.Значение), СокрЛП(ЭлемСтруктуры.Ключ));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
			
			Возврат Неопределено;
		КонецЕсли;
		
		ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(ТехОперация, ТехКарта.ДатаПринятия);
		Если Не ЗначениеЗаполнено(ТехКартаСсылка) Тогда
			ШаблонСообщения = НСтр("ru = 'На дату %1 отсутствуют версии тех. карты ""%2"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТехКарта.ДатаПринятия, ТехОперация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Возврат Неопределено;
		КонецЕсли;
		
		ОперацияДляЗаполнения = ТехКартаСсылка;
	КонецЕсли;
	
	НоваяСтрокаОперации.Операция = ТехОперация;
	НоваяСтрокаОперации.Продолжительность = ОперацияДляЗаполнения.НормаВремени / 3600;					
	НоваяСтрокаОперации.НормаВремениВСекундах = ОперацияДляЗаполнения.НормаВремени;
	НоваяСтрокаОперации.ПродолжительностьТекст = СформироватьПродолжительность(НоваяСтрокаОперации.НормаВремениВСекундах);
	НоваяСтрокаОперации.СпособВыполнения = Перечисления.СпособыСтроительства.Хозспособ;
	НоваяСтрокаОперации.Количество = 1;

	Если ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		НоваяСтрокаОперации.СодержитОпасныеОперации = ТехКартаСсылка.СодержитОпасныеОперации;				
		НоваяСтрокаОперации.СодержитРаботыПовышеннойОпасности = ТехКартаСсылка.СодержитРаботыПовышеннойОпасности;
		НоваяСтрокаОперации.Картинка = 0;
		
		ДополнитьЗатратыРемонтов(НоваяСтрокаОперации);
	ИначеЕсли ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		НоваяСтрокаОперации.СодержитОпасныеОперации = ТехОперация.Опасная;
		НоваяСтрокаОперации.СодержитРаботыПовышеннойОпасности = ТехОперация.РаботаПовышеннойОпасности;
		НоваяСтрокаОперации.Картинка = 2;
		
		// Заполнение табличных частей нормативов.
		Для Каждого КлючИЗначение Из СтруктураСоответствияТЧРемонта Цикл
			ТЧОперации = ТехОперация[КлючИЗначение.Ключ];
			Для каждого СтрокаТЧ Из ТЧОперации Цикл
				НоваяСтрокаТЧ = КлючИЗначение.Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				НоваяСтрокаТЧ.ID = НоваяСтрокаОперации.ID;
				НоваяСтрокаТЧ.Операция = ТехОперация;
				
				Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
					НоваяСтрокаТЧ.КоличествоНаЕдиницу = СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.КоличествоУпаковокНаЕдиницу = СтрокаТЧ.КоличествоУпаковок;
				КонецЕсли;
				
				Если КлючИЗначение.Ключ = "ИнструментыИТехника" Или КлючИЗначение.Ключ = "ТрудовыеЗатраты" Тогда
					НоваяСтрокаТЧ.ВремяРаботыНаЕдиницу = НоваяСтрокаТЧ.ВремяРаботы / НоваяСтрокаОперации.Количество;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	Если ФОИспользоватьОпасноеПроизводство И НоваяСтрокаОперации.СодержитОпасныеОперации Тогда
		ТехКарта.СодержитОпасныеОперации = Истина;
	КонецЕсли;
	
	Если ФОИспользоватьОпасноеПроизводство И НоваяСтрокаОперации.СодержитРаботыПовышеннойОпасности Тогда
		ТехКарта.СодержитРаботыПовышеннойОпасности = Истина;
	КонецЕсли;
		
	Возврат НоваяСтрокаОперации.ПолучитьИдентификатор();
		
КонецФункции

#КонецОбласти