#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	ФорматнаяСтрока = торо_РаботаСПользовательскимПредставлениемПовтИсп.ПолучитьФорматнуюСтроку("Справочники.торо_ИдентификаторыТехКарт");
	Если ФорматнаяСтрока = Неопределено Тогда
		МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("Наименование");
	
	Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
		Поля.Добавить("НаименованиеЯзык1");
	КонецЕсли;
	Если МультиязычностьСервер.ИспользуетсяВторойДополнительныйЯзык() Тогда
		Поля.Добавить("НаименованиеЯзык2");
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ФорматнаяСтрока = торо_РаботаСПользовательскимПредставлениемПовтИсп.ПолучитьФорматнуюСтроку("Справочники.торо_ИдентификаторыТехКарт");
	Если ФорматнаяСтрока = Неопределено Тогда
		МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	СписокПолей = торо_РаботаСПользовательскимПредставлением.ПолучитьСписокПолей(ФорматнаяСтрока);
	Если СписокПолей.Количество() > 0 Тогда
		
		ВерсияТК = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(Данные.Ссылка);
		Если ЗначениеЗаполнено(ВерсияТК) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			МассивЛокализуемыхПолей = Новый Массив;
			МассивЛокализуемыхПолей.Добавить("Наименование");
			МассивЛокализуемыхПолей.Добавить("Комментарий");
			
			ДопСписокПолей = Новый Массив;
			Для каждого Поле из СписокПолей Цикл
				Если МассивЛокализуемыхПолей.Найти(Поле) <> Неопределено Тогда
					Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
						ДопСписокПолей.Добавить(Поле + "Язык1");
					КонецЕсли;
					Если МультиязычностьСервер.ИспользуетсяВторойДополнительныйЯзык() Тогда
						ДопСписокПолей.Добавить(Поле +"Язык2");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокПолей, ДопСписокПолей);
			
			СтрокаРеквизитов = СтрСоединить(СписокПолей, ",");
			РеквизитыВерсииТК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияТК, СтрокаРеквизитов);
			Представление = торо_РаботаСПользовательскимПредставлением.ПолучитьПредставлениеПоФорматнойСтроке(ФорматнаяСтрока, РеквизитыВерсииТК, Истина);
			
		Иначе
			МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
		КонецЕсли;
	
	Иначе
		СтандартнаяОбработка = Ложь;
		Представление = ФорматнаяСтрока;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.торо_ИдентификаторыТехКарт);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Технологическая карта
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.торо_ИдентификаторыТехКарт";
	КомандаПечати.Идентификатор = "ТехКарта";
	КомандаПечати.Представление = НСтр("ru = 'Технологическая карта'");
	КомандаПечати.Обработчик = "торо_Печать.ПечататьТекущуюВерсиюТехКары";
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТехКарта") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
															"ТехКарта", 
															"Технологическая карта", 
															ПечатьТехКарты(МассивОбъектов, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Функция - заполняет список реквизитов, которые можно использовать при формировании форматной строки в конструкторе.
//
// Параметры:
//  СписокРеквизитов - СписокЗначений - пустой список значений для заполнения.
Процедура ЗаполнитьСписокРеквизитовДляФорматнойСтроки(СписокРеквизитов) Экспорт
	
	СписокРеквизитов.Добавить("Наименование",		"Наименование");
	СписокРеквизитов.Добавить("Код",				"Код");
	СписокРеквизитов.Добавить("ДатаПринятия",		"Дата принятия");
	СписокРеквизитов.Добавить("НормаВремениТекст",	"Норма времени");
	СписокРеквизитов.Добавить("ВремяПростояТекст",	"Время простоя");
	СписокРеквизитов.Добавить("Комментарий",		"Комментарий");

КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт 
	
	торо_СозданиеНаОсновании.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьТехКарты(МассивОбъектов, ПараметрыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.торо_ИдентификаторыТехКарт.ПФ_MXL_ТехКарта"); 
	ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
	ЭтоПервый = Истина;
		
	Для каждого Объект из МассивОбъектов Цикл
		
		Если ПараметрыПечати.Свойство("ДатаПринятия") Тогда
			ДатаПринятия =  ПараметрыПечати.ДатаПринятия;
		Иначе 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ВерсииТехКартСрезПоследних.ТехКарта.ДатаПринятия КАК ДатаПринятия
			               |ИЗ
			               |	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(, ИдентификаторТехКарты = &Ссылка) КАК торо_ВерсииТехКартСрезПоследних";
			
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаПринятия = Результат.Выгрузить()[0].ДатаПринятия;
		КонецЕсли;
	
		ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(Объект, ДатаПринятия);
		
		Если НЕ ЗначениеЗаполнено(ТехКарта)Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭтоПервый Тогда
			ТабДок.Вывести(ОбластьОтступ);
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ЭтоПервый = Ложь;
		
		ОбластьНаименования = Макет.ПолучитьОбласть("Название");
		ОбластьНаименования.Параметры.Наименование = Строка(Объект);
		ТабДок.Вывести(ОбластьНаименования);
		
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапки.Параметры.Наименование = Строка(Объект);
		ОбластьШапки.Параметры.ПродолжительностьТехКарты = ПреобразоватьВремя(ТехКарта.НормаВремени);
		ОбластьШапки.Параметры.ДатаНачала = Формат(ТехКарта.ДатаПринятия, "ДФ=dd.MM.yyyy");
		ТабДок.Вывести(ОбластьШапки);
		
		ОблКомментарийТК = Макет.ПолучитьОбласть("КомментарийТК");
		ОблКомментарийТК.Параметры.КомментарийТК = ТехКарта.Комментарий; 
		ТабДок.Вывести(ОблКомментарийТК);	
				
		ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДок.Вывести(ШапкаТаблицы);
		
		ТЗ = Новый ТаблицаЗначений;
		Дерево = Новый ДеревоЗначений;
		Индекс = 0;
		ЗаполнитьТЗ(Объект, "", ТЗ, Индекс, , ТехКарта.ДатаПринятия);
		ИндексДерева = 0;
		ЗаполнитьДерево(Объект, Дерево, ИндексДерева, , ТехКарта.ДатаПринятия);
				
		НовыйТЗ = Новый ТаблицаЗначений;
		НовыйТЗ = ТЗ.Скопировать();
		
		Если ТЗ.Количество() <> 0 Тогда
			НовыйТЗ.Свернуть("Родитель1, Операция, СпособВыполнения, Кратность, ID, IDРодителя");
		КонецЕсли;
		
		ИтоговаяТз = Новый ТаблицаЗначений;
		ИтоговаяТз.Колонки.Добавить("Родитель1");
		ИтоговаяТз.Колонки.Добавить("ТехнологическаяОперация");
		ИтоговаяТз.Колонки.Добавить("Продолжительность");
		ИтоговаяТз.Колонки.Добавить("СпособВыполнения");
		ИтоговаяТз.Колонки.Добавить("МатериальныеЗатратыИКоличество");
		ИтоговаяТз.Колонки.Добавить("ТрудозатратыКоличествоВремяРаботы");
		ИтоговаяТз.Колонки.Добавить("ИнстурментыИТехника");
		ИтоговаяТз.Колонки.Добавить("Показатель");
		ИтоговаяТз.Колонки.Добавить("ПолноеНаименование");
		ИтоговаяТз.Колонки.Добавить("Кратность");
		ИтоговаяТз.Колонки.Добавить("Комментарий");
				
		Для Каждого СтрокаНовыйТЗ Из НовыйТЗ Цикл
			
			МассивСтрок = ТЗ.НайтиСтроки(Новый Структура("Родитель1, Операция, ID, IDРодителя", СтрокаНовыйТЗ.Родитель1, СтрокаНовыйТЗ.Операция, СтрокаНовыйТЗ.ID, СтрокаНовыйТЗ.IDРодителя));
			НоваяСтрокаИтоговойТаблицы = ИтоговаяТз.Добавить();
			
			НоваяСтрокаИтоговойТаблицы.Родитель1 = СтрокаНовыйТЗ.Родитель1; 
			НоваяСтрокаИтоговойТаблицы.ТехнологическаяОперация = СтрокаНовыйТЗ.Операция;
			НоваяСтрокаИтоговойТаблицы.СпособВыполнения = СтрокаНовыйТЗ.СпособВыполнения;
			НоваяСтрокаИтоговойТаблицы.Кратность = СтрокаНовыйТЗ.Кратность;
						
			Если ТипЗнч(СтрокаНовыйТЗ.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				НоваяСтрокаИтоговойТаблицы.ПолноеНаименование = СтрокаНовыйТЗ.Операция.СодержаниеРабот;
			КонецЕсли;
			
			ВремяЧасов = Цел(МассивСтрок[0].Продолжительность/60/60);
			ВремяМинут = Цел(Число(МассивСтрок[0].Продолжительность - 3600 * ВремяЧасов) / 60);
			
			НоваяСтрокаИтоговойТаблицы.Продолжительность = Строка(ВремяЧасов) + " ч. " + Строка(ВремяМинут) + " мин. ";
			
			Материалы = "";
			Трудозатраты = "";
			Инструмент = "";
			Показатель = "";
			Комментарий = "";
			
			ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
						
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				
				Если ЗначениеЗаполнено(СтрокаМассива.Номенклатура) Тогда
					МатериалыХарактеристика =  "";
					ПереносСПервойСтроки = ?(Материалы = "","", Символы.ПС);
					Если ИспользоватьХарактеристики Тогда
						МатериалыХарактеристика = ?(ЗначениеЗаполнено(СтрокаМассива.Характеристика), ", " + СтрокаМассива.Характеристика, 
				                          ?(ЗначениеЗаполнено(СтрокаМассива.НаименованиеХарактеристики), ", " + СтрокаМассива.НаименованиеХарактеристики,""));				  
					КонецЕсли;
					Материалы = Материалы + ПереносСПервойСтроки + Строка(СтрокаМассива.Номенклатура) + МатериалыХарактеристика + ", " + Строка(СтрокаМассива.Количество) + " " + Строка(СтрокаМассива.ЕдиницаИзмерения) + ".";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаМассива.Квалификация) Тогда
					ПереносСПервойСтроки = ?(Трудозатраты = "", "", Символы.ПС);
					Трудозатраты = Трудозатраты + ПереносСПервойСтроки + Строка(СтрокаМассива.Квалификация) + ", " + Строка(СтрокаМассива.КолКвалификаций) + ", " + ПреобразоватьВремя(СтрокаМассива.ВремяРаботы);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаМассива.Инструмент) Тогда
					ПереносСПервойСтроки = ?(Инструмент = "", "", Символы.ПС);
					Инструмент = Инструмент + ПереносСПервойСтроки + Строка(СтрокаМассива.Инструмент) + ", " + Строка(СтрокаМассива.КолИнстр) + " " + Строка(СтрокаМассива.ЕдИзмИнстр);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаМассива.Показатель) Тогда
					ПереносСПервойСтроки = ?(Показатель = "", "", Символы.ПС);
					Показатель = Показатель + ПереносСПервойСтроки + Строка(СтрокаМассива.Показатель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаМассива.Комментарий) Тогда 
				    Комментарий = СтрокаМассива.Комментарий;
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрокаИтоговойТаблицы.МатериальныеЗатратыИКоличество = Материалы;
			НоваяСтрокаИтоговойТаблицы.ТрудозатратыКоличествоВремяРаботы = Трудозатраты;
			НоваяСтрокаИтоговойТаблицы.ИнстурментыИТехника = Инструмент;
			НоваяСтрокаИтоговойТаблицы.Показатель = Показатель;
			НоваяСтрокаИтоговойТаблицы.Комментарий = Комментарий;
		КонецЦикла;
		
		МассивУровней = Новый Массив;
		
		ПредУровень = 0;
		ТабДок.НачатьАвтогруппировкуСтрок();
		Для Каждого Строка Из ИтоговаяТз Цикл
			
			МассивСтрокДерева = Дерево.Строки.НайтиСтроки(Новый Структура("Родитель1, Операция", Строка.Родитель1, Строка.ТехнологическаяОперация), Истина);
			Уровень = МассивСтрокДерева[0].Уровень();
			
			Если ПредУровень > Уровень Тогда
				Для Счетчик = 1 По ПредУровень Цикл 
					МассивУровней[Счетчик] = 0; 
				КонецЦикла;
			КонецЕсли;
			ПредУровень = Уровень;
			
			КолЭлем = МассивУровней.ВГраница();
			Если КолЭлем >= Уровень Тогда
				Номер = МассивУровней.Получить(Уровень);
				МассивУровней.Удалить(Уровень);
				МассивУровней.Вставить(Уровень, Номер + 1);
			Иначе
				МассивУровней.Вставить(Уровень, 1);
			КонецЕсли;
			
			СтрокаОперации = Макет.ПолучитьОбласть("СтрокаТаблицы");
			СтрокаОперации.Параметры.Заполнить(Строка);
			СтрокаОперации.Параметры.НомерТО = МассивУровней.Получить(Уровень);
			
			Если ТипЗнч(Строка.ТехнологическаяОперация) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") И Не Строка.ТехнологическаяОперация.НаименованиеПолное = "" Тогда
			    СтрокаОперации.Параметры.ТехнологическаяОперация = Строка.ТехнологическаяОперация.НаименованиеПолное;
			Иначе
			    СтрокаОперации.Параметры.ТехнологическаяОперация = Строка.ТехнологическаяОперация.Наименование;
			КонецЕсли;
			
			НоваяСтрока = ТабДок.Вывести(СтрокаОперации, Уровень);
			ТабДок.Область(НоваяСтрока.Верх, 1).Отступ = Уровень * 2;
			ТабДок.Область(НоваяСтрока.Верх, 2).Отступ = Уровень * 2;
			Если ТипЗнч(Строка.ТехнологическаяОперация) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				ТабДок.Область("СтрокаТаблицыЗаливка").ЦветФона = Новый Цвет(156, 156, 156);
			КонецЕсли;
			
		КонецЦикла;
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		ТабДок.Область("C1").ШиринаКолонки = 2 * МассивУровней.Количество();
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.КлючПараметровПечати = "торо_ПечатьТехКарты";
	
	Возврат ТабДок;
	
КонецФункции

Процедура ЗаполнитьДерево(ТехКарта, Дерево, ИндексДерева, СтрокаРодитель = Неопределено, Дата = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ТехКарта КАК Родитель1,
	               |	торо_ТехКарты_СписокОпераций.Продолжительность,
	               |	торо_ТехКарты_СписокОпераций.ID,
	               |	торо_ТехКарты_СписокОпераций.Операция
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаСреза, ИдентификаторТехКарты = &ТехКарта) КАК торо_ВерсииТехКартСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты_СписокОпераций
	               |		ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты_СписокОпераций.Ссылка";

	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	Запрос.УстановитьПараметр("ДатаСреза", Дата);

	Таблица = Запрос.Выполнить().Выгрузить();

	Для каждого Строка Из Таблица Цикл
		
		Если ИндексДерева = 0 Тогда
			
			ДобавитьКолонкиВДерево(Дерево, Строка, ИндексДерева);
			
		КонецЕсли;
		
		Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Если СтрокаРодитель = Неопределено Тогда
				НС = Дерево.Строки.Добавить();
			Иначе
				НС = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НС, Строка);
			ЗаполнитьДерево(Строка.Операция, Дерево, ИндексДерева, НС, Дата);
			
		Иначе
			Если СтрокаРодитель = Неопределено Тогда
				НС = Дерево.Строки.Добавить();
			Иначе
				НС = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НС, Строка);
						
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТЗ(ТехКарта, ID_ТехКарты, ТЗ, Индекс, СтрокаРодитель = Неопределено, Дата = Неопределено) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТехКарты_СписокОпераций.НормаВремениВСекундах КАК Продолжительность,
	               |	торо_ТехКарты_СписокОпераций.ID КАК ID,
	               |	торо_ТехКарты_СписокОпераций.Операция КАК Операция,
	               |	торо_ТехКарты_СписокОпераций.Ссылка КАК Ссылка,
	               |	торо_ТехКарты_СписокОпераций.СпособВыполнения КАК СпособВыполнения,
	               |	торо_ТехКарты_СписокОпераций.Количество КАК Кратность,
	               |	ВЫРАЗИТЬ(торо_ТехКарты_СписокОпераций.Операция КАК Справочник.торо_ТехнологическиеОперации).Комментарий КАК Комментарий
	               |ПОМЕСТИТЬ СписокОпераций
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&Дата, ИдентификаторТехКарты = &ТехКарта) КАК торо_ВерсииТехКартСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты_СписокОпераций
	               |		ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты_СписокОпераций.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА торо_ТехКартыМатериальныеЗатраты.Номенклатура.ЕдиницаИзмерения
	               |		ИНАЧЕ торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения
	               |	КОНЕЦ КАК ЕдиницаИзмерения,
	               |	торо_ТехКартыМатериальныеЗатраты.Количество КАК Количество,
				   |	торо_ТехКартыМатериальныеЗатраты.Характеристика КАК ХарактеристикаСсылка,
	               |	торо_ТехКартыМатериальныеЗатраты.Характеристика.НаименованиеПолное КАК Характеристика,
	               |	торо_ТехКартыМатериальныеЗатраты.Характеристика.Наименование КАК НаименованиеХарактеристики,
	               |	торо_ТехКартыМатериальныеЗатраты.ID КАК ID,
	               |	NULL КАК Квалификация,
	               |	NULL КАК ВремяРаботы,
	               |	NULL КАК КолКвалификаций,
	               |	NULL КАК Инструмент,
	               |	NULL КАК КолИнстр,
	               |	NULL КАК ЕдИзмИнстр,
	               |	NULL КАК Показатель
	               |ПОМЕСТИТЬ СписокМатериалов
	               |ИЗ
	               |	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_ТехКартыМатериальныеЗатраты.Ссылка = СписокОпераций.Ссылка
	               |			И торо_ТехКартыМатериальныеЗатраты.ID = СписокОпераций.ID
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
				   |	NULL,
	               |	торо_ТехКартыТрудовыеЗатраты.ID,
	               |	торо_ТехКартыТрудовыеЗатраты.Квалификация,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботы,
	               |	торо_ТехКартыТрудовыеЗатраты.Количество,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_ТехКартыТрудовыеЗатраты.Ссылка = СписокОпераций.Ссылка
	               |			И торо_ТехКартыТрудовыеЗатраты.ID = СписокОпераций.ID
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
				   |	NULL,
	               |	торо_ТехКартыИнструментыИТехника.ID,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	торо_ТехКартыИнструментыИТехника.Инструмент,
	               |	торо_ТехКартыИнструментыИТехника.Количество,
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыИнструментыИТехника.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА торо_ТехКартыИнструментыИТехника.Инструмент.ЕдиницаИзмерения
	               |		ИНАЧЕ торо_ТехКартыИнструментыИТехника.ЕдиницаИзмерения
	               |	КОНЕЦ,
	               |	NULL
	               |ИЗ
	               |	Справочник.торо_ТехКарты.ИнструментыИТехника КАК торо_ТехКартыИнструментыИТехника
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_ТехКартыИнструментыИТехника.Ссылка = СписокОпераций.Ссылка
	               |			И торо_ТехКартыИнструментыИТехника.ID = СписокОпераций.ID
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
				   |	NULL,
	               |	торо_ТехКартыИзмеряемыеПоказатели.ID,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	торо_ТехКартыИзмеряемыеПоказатели.Показатель
	               |ИЗ
	               |	Справочник.торо_ТехКарты.ИзмеряемыеПоказатели КАК торо_ТехКартыИзмеряемыеПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_ТехКартыИзмеряемыеПоказатели.Ссылка = СписокОпераций.Ссылка
	               |			И торо_ТехКартыИзмеряемыеПоказатели.ID = СписокОпераций.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ТехКарта КАК Родитель1,
				   |	&IDРодителя КАК IDРодителя, 
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокОпераций.Продолжительность КАК Продолжительность,
	               |	СписокМатериалов.Номенклатура КАК Номенклатура,
	               |	СписокМатериалов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЕСТЬNULL(СписокМатериалов.Количество, 0) КАК Количество,
				   |	СписокМатериалов.ХарактеристикаСсылка КАК ХарактеристикаСсылка,
	               |	СписокМатериалов.Характеристика КАК Характеристика,
	               |	СписокМатериалов.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	               |	СписокМатериалов.Квалификация КАК Квалификация,
	               |	СписокМатериалов.ВремяРаботы КАК ВремяРаботы,
	               |	СписокМатериалов.КолКвалификаций КАК КолКвалификаций,
	               |	СписокМатериалов.Инструмент КАК Инструмент,
	               |	СписокМатериалов.КолИнстр КАК КолИнстр,
	               |	СписокМатериалов.Показатель КАК Показатель,
	               |	СписокМатериалов.ЕдИзмИнстр КАК ЕдИзмИнстр,
	               |	СписокОпераций.СпособВыполнения КАК СпособВыполнения,
	               |	СписокОпераций.Комментарий КАК Комментарий,
	               |	СписокОпераций.Кратность КАК Кратность,
	               |	СписокОпераций.ID КАК ID
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокМатериалов КАК СписокМатериалов
	               |		ПО (СписокМатериалов.ID = СписокОпераций.ID)";
				  
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	Запрос.УстановитьПараметр("IDРодителя", ID_ТехКарты); 
	Запрос.УстановитьПараметр("Дата", Дата);
		
	Таблица = Запрос.Выполнить().Выгрузить();

	Для каждого Строка Из Таблица Цикл
 		Если Индекс = 0 Тогда
			ДобавитьКолонкиВТЗ(ТЗ, Строка, Индекс);
		КонецЕсли;
		
		Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			НС = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Строка);	
			ТехнолКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьВерсиюТехКарты(Строка.Операция);
			НС.Комментарий = ТехнолКарта.Комментарий;
			Если ID_ТехКарты = "" Тогда 
				ЗаполнитьТЗ(Строка.Операция, Строка.ID, ТЗ, Индекс,, Дата);	
			Иначе
				ЗаполнитьТЗ(Строка.Операция, ID_ТехКарты, ТЗ, Индекс,, Дата);
			КонецЕсли;
			
		Иначе	
			НС = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Строка);
		КонецЕсли;
	
	КонецЦикла;
 
КонецПроцедуры

Процедура ДобавитьКолонкиВДерево(Дерево,Строка,ИндексДерева)

	Колонки = Строка.Владелец().Колонки;
	Для Каждого Колонка из Колонки Цикл
		Дерево.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
 ИндексДерева = ИндексДерева +1;
КонецПроцедуры

Процедура ДобавитьКолонкиВТЗ(ТЗ,Строка, Индекс)

	Колонки = Строка.Владелец().Колонки;
	Для Каждого Колонка из Колонки Цикл
		ТЗ.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
    Индекс = Индекс +1;
	 
КонецПроцедуры

Функция ПреобразоватьВремя(ВремяРаботы)
	
	Часы   = Цел(ВремяРаботы / 3600);
	Минуты = Цел((ВремяРаботы - Часы * 3600) / 60);
	Сек    = ВремяРаботы - Часы * 3600 - Минуты * 60;
	
	ИтоговаяСтрока = Строка(Часы) + "ч. " + Строка(Минуты) + "мин." + Строка(Сек) + "с.";
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

#КонецОбласти

#КонецЕсли


