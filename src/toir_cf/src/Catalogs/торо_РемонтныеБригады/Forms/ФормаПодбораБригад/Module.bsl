
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СоставБригады.Параметры.УстановитьЗначениеПараметра("НачалоПериода", ТекущаяДата());
	
	ПодразделениеДляОтбора =  Параметры.Подразделение;
	ИспользоватьОтборПоПодразделениюПриИзмененииНаСервере();
			
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Квалификация КАК Квалификация,
	               |	Таб.Количество КАК Количество,
	               |	Таб.ВремяРаботыТекст КАК ВремяРаботыТекст,
	               |	Таб.ВремяРаботы КАК ВремяРаботы,
	               |	Таб.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	               |ПОМЕСТИТЬ Вт_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |ГДЕ
	               |	Таб.РемонтыОборудования_ID = &РемонтыОборудования_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_Данные.Квалификация КАК Квалификация,
	               |	МАКСИМУМ(Вт_Данные.РемонтыОборудования_ID) КАК РемонтыОборудования_ID,
	               |	Вт_Данные.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА Вт_Данные.ВремяРаботы = 0
	               |			ТОГДА ""Не заполнено""
	               |		ИНАЧЕ Вт_Данные.ВремяРаботыТекст
	               |	КОНЕЦ КАК ВремяРаботы
	               |ИЗ
	               |	Вт_Данные КАК Вт_Данные
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Вт_Данные.Квалификация,
	               |	Вт_Данные.Количество,
				   |	Вт_Данные.ВремяРаботы,
	               |	Вт_Данные.ВремяРаботыТекст";
	
	Запрос.УстановитьПараметр("Таб", Параметры.ТрудовыеЗатраты.Выгрузить());
	Запрос.УстановитьПараметр("РемонтыОборудования_ID", Параметры.РемонтыОборудования_ID);
	
	Результат = Запрос.Выполнить();
	ТаблицаПлановыхТрудозатрат.Загрузить(Результат.Выгрузить());	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокБригадПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокБригад.ТекущиеДанные;
	СоставБригады.Отбор.Элементы.Очистить();
	ЗавершенныеРемонты.Отбор.Элементы.Очистить();
	ЗапланированныеРемонты.Отбор.Элементы.Очистить();
	
	Если ТекущиеДанные = Неопределено тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СоставБригады,
		    "РемонтнаяБригада",
		    "",,,
		    Истина);
			
		Для каждого Строка Из ТаблицаПлановыхТрудозатрат Цикл 
			Строка.ВходитВСоставТекБригады = Ложь;
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СоставБригады,
		    "РемонтнаяБригада",
		    ТекущиеДанные.Ссылка,,,
		    Истина);
			
		КвалификацииТекущейБригады = ПолучитьКвалификацииТекущейБригады(ТекущиеДанные.Ссылка);
		Для каждого Строка Из ТаблицаПлановыхТрудозатрат Цикл 
			Индекс = КвалификацииТекущейБригады.Найти(Строка.Квалификация);
			Если Индекс <> Неопределено Тогда 
				Строка.ВходитВСоставТекБригады = Истина;
			Иначе 
				Строка.ВходитВСоставТекБригады = Ложь;
			КонецЕсли;
		КонецЦикла;
	    
	КонецЕсли;
	
	
	ПоказатьВыполненныеРемонты();
	ПоказатьЗапланированныеРемонты();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПодходящиеПоСоставуПриИзменении(Элемент) 
	
	Если ОтображатьТолькоПодходящиеПоСоставу Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокБригад, 
		    "Ссылка", 
		    ПолучитьСписокПодходящихПоСоставуБригад(), 
			ВидСравненияКомпоновкиДанных.ВСписке,,
		    Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокБригад, "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокБригадВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекБригада = Элемент.ТекущиеДанные;
	ВыбратьБригаду(ТекБригада);	
		
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПлановыхТрудозатрат
&НаКлиенте
Процедура ТаблицаПлановыхТрудозатратПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПлановыхТрудозатратПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПлановыхТрудозатратПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапланированныеРемонты  
&НаКлиенте
Процедура ЗапланированныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗапланированныеРемонты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТипЗнч(ТекДанные.Регистратор) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Регистратор), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗавершенныеРемонты  
&НаКлиенте
Процедура ЗавершенныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные =  Элементы.ЗавершенныеРемонты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		Если ТипЗнч(ТекДанные.Регистратор) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
			ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Регистратор), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы  
&НаКлиенте
Процедура ИзменитьСоставБригады(Команда)
	
	ТекущиеДанные = Элементы.СписокБригад.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("РемонтнаяБригада", ТекущиеДанные.Ссылка);
		ПараметрыЗаполнения.Вставить("СоставБригады", ПолучитьНовыйСоставБригады(ТекущиеДанные.Ссылка));
		ОткрытьФорму("Документ.торо_ИзменениеСоставаРемонтнойБригады.ФормаОбъекта", ПараметрыЗаполнения, ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекБригада = Элементы.СписокБригад.ТекущиеДанные;
	ВыбратьБригаду(ТекБригада);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ПолучитьКвалификацииТекущейБригады(РемонтнаяБригада)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СоставРемонтныхБригадСрезПоследних.Квалификация КАК Квалификация,
	               |	торо_СоставРемонтныхБригадСрезПоследних.Исполнитель КАК Исполнитель,
	               |	торо_СоставРемонтныхБригадСрезПоследних.Бригадир КАК Бригадир
	               |ИЗ
	               |	РегистрСведений.торо_СоставРемонтныхБригад.СрезПоследних(&НачалоПериода, РемонтнаяБригада = &РемонтнаяБригада) КАК торо_СоставРемонтныхБригадСрезПоследних
	               |ГДЕ
	               |	торо_СоставРемонтныхБригадСрезПоследних.ИсключенИзБригады = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("РемонтнаяБригада", РемонтнаяБригада);
	Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("Квалификация");
	
КонецФункции

&НаСервере
Функция ПолучитьСписокПодходящихПоСоставуБригад()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ 
	                |	НеобходимыеКвалификации.Квалификация КАК Квалификация
	                |ПОМЕСТИТЬ вт_НеобходимыеКвалификации
	                |ИЗ
	                |	&НеобходимыеКвалификации КАК НеобходимыеКвалификации
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ 
					|   СписокБригад.РемонтнаяБригада,
					|   вт_НеобходимыеКвалификации.Квалификация КАК Квалификация
					|ПОМЕСТИТЬ вт_Таб
                    |ИЗ
	                |	вт_НеобходимыеКвалификации КАК вт_НеобходимыеКвалификации,
					|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		торо_РемонтныеБригады.Ссылка КАК РемонтнаяБригада
	                |	ИЗ
	                |		Справочник.торо_РемонтныеБригады КАК торо_РемонтныеБригады) КАК СписокБригад
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	вт_Таб.РемонтнаяБригада КАК РемонтнаяБригада,
					|	МИНИМУМ(ВЫБОР
					|		КОГДА СоставБригад.Квалификация ЕСТЬ NULL
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ) КАК НаличиеКвалификацииВБригаде
					|ПОМЕСТИТЬ вт_ПредварительныйИтог
					|ИЗ
					|	вт_Таб КАК вт_Таб
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
					|			РегистрСведенийторо_СоставРемонтныхБригадСрезПоследних.РемонтнаяБригада КАК РемонтнаяБригада,
					|			РегистрСведенийторо_СоставРемонтныхБригадСрезПоследних.Квалификация КАК Квалификация
					|		ИЗ
					|			РегистрСведений.торо_СоставРемонтныхБригад.СрезПоследних(&НачалоПериода, ) КАК РегистрСведенийторо_СоставРемонтныхБригадСрезПоследних
					|		ГДЕ
					|			РегистрСведенийторо_СоставРемонтныхБригадСрезПоследних.ИсключенИзБригады = ЛОЖЬ) КАК СоставБригад
					|		ПО вт_Таб.Квалификация = СоставБригад.Квалификация
					|          И вт_Таб.РемонтнаяБригада = СоставБригад.РемонтнаяБригада
					|СГРУППИРОВАТЬ ПО
					|   вт_Таб.РемонтнаяБригада
					|
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
                    |   вт_ПредварительныйИтог.РемонтнаяБригада КАК РемонтнаяБригада
					|ИЗ
					|   вт_ПредварительныйИтог КАК вт_ПредварительныйИтог
					|ГДЕ 
					|   вт_ПредварительныйИтог.НаличиеКвалификацииВБригаде
					|";
	
	Запрос.УстановитьПараметр("НеобходимыеКвалификации", ТаблицаПлановыхТрудозатрат.Выгрузить(, "Квалификация"));
	Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	 
	НовыйСписокБригад = Новый СписокЗначений;
	НовыйСписокБригад.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("РемонтнаяБригада"));
	
	Возврат НовыйСписокБригад;
	
КонецФункции

&НаСервере
Функция ПолучитьНовыйСоставБригады(РемонтнаяБригада)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	НеобходимыеКвалификации.Квалификация КАК Квалификация
	                |ПОМЕСТИТЬ вт_НеобходимыеКвалификации
	                |ИЗ
	                |	&НеобходимыеКвалификации КАК НеобходимыеКвалификации
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	торо_СоставРемонтныхБригадСрезПоследних.Квалификация КАК Квалификация,
	                |	торо_СоставРемонтныхБригадСрезПоследних.Исполнитель КАК Исполнитель,
	                |	торо_СоставРемонтныхБригадСрезПоследних.Бригадир КАК Бригадир
	                |ПОМЕСТИТЬ вт_СоставБригады
	                |ИЗ
	                |	РегистрСведений.торо_СоставРемонтныхБригад.СрезПоследних(&НачалоПериода, РемонтнаяБригада = &РемонтнаяБригада) КАК торо_СоставРемонтныхБригадСрезПоследних
	                |ГДЕ
	                |	торо_СоставРемонтныхБригадСрезПоследних.ИсключенИзБригады = ЛОЖЬ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	вт_СоставБригады.Квалификация КАК Квалификация,
	                |	вт_СоставБригады.Исполнитель КАК Исполнитель,
	                |	вт_СоставБригады.Бригадир КАК Бригадир 
	                |ИЗ
	                |	вт_СоставБригады КАК вт_СоставБригады
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ
	                |	вт_НеобходимыеКвалификации.Квалификация,
	                |	NULL,
	                |	NULL
	                |ИЗ
	                |	вт_НеобходимыеКвалификации КАК вт_НеобходимыеКвалификации
	                |		ЛЕВОЕ СОЕДИНЕНИЕ вт_СоставБригады КАК вт_СоставБригады
	                |		ПО вт_НеобходимыеКвалификации.Квалификация = вт_СоставБригады.Квалификация
	                |ГДЕ
	                |	вт_СоставБригады.Квалификация ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("РемонтнаяБригада", РемонтнаяБригада);
	Запрос.УстановитьПараметр("НеобходимыеКвалификации", ТаблицаПлановыхТрудозатрат.Выгрузить(, "Квалификация"));
	Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата());
	Результат = Запрос.Выполнить().Выгрузить();
	
	НовыйСоставБригады = Новый Массив;
	Для каждого Строка Из Результат Цикл
		НовыйСоставБригады.Добавить(Новый Структура("Квалификация, Исполнитель, Бригадир, КТУ", 
		                            Строка.Квалификация, 
									Строка.Исполнитель, 
									?(ЗначениеЗаполнено(Строка.Бригадир), Строка.Бригадир, Ложь), 1)); 
	КонецЦикла;
	
	Возврат НовыйСоставБригады;
	
КонецФункции

&НаКлиенте 
Процедура ВыбратьБригаду(ТекБригада)
	
	Если ТекБригада <> Неопределено И НЕ ТекБригада.ЭтоГруппа Тогда 
		ОповеститьОВыборе(ТекБригада.Ссылка);
	Иначе
		ТекстСообщения = НСтр("ru = 'Выберите бригаду!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИспользоватьОтборПоПодразделениюПриИзмененииНаСервере()
	Если ИспользоватьОтборПоПодразделению Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокБригад, 
		    "Подразделение", 
		    ПодразделениеДляОтбора, 
			ВидСравненияКомпоновкиДанных.Равно,,
		    Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			СписокБригад,
			"Подразделение");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоПодразделениюПриИзменении(Элемент)
	ИспользоватьОтборПоПодразделениюПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеЗапланированныеРемонтыПриИзменении(Элемент)
	ПоказатьЗапланированныеРемонты();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеВыполненныеРемонтыПриИзменении(Элемент)
	ПоказатьВыполненныеРемонты();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыполненныеРемонты()
	ТекущиеДанные = Элементы.СписокБригад.ТекущиеДанные;
	Если ПоказатьВсеВыполненныеРемонты Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			ЗавершенныеРемонты,
			"РемонтнаяБригада");
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗавершенныеРемонты,
		    "РемонтнаяБригада",
		    "",,,
		    Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗавершенныеРемонты,
		    "РемонтнаяБригада",
		    ТекущиеДанные.Ссылка,,,
		    Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗапланированныеРемонты()
	ТекущиеДанные = Элементы.СписокБригад.ТекущиеДанные;
	Если ПоказатьВсеЗапланированныеРемонты Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			ЗапланированныеРемонты,
			"РемонтнаяБригада");
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗапланированныеРемонты,
		    "РемонтнаяБригада",
		    "",,,
		    Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗапланированныеРемонты,
		    "РемонтнаяБригада",
		    ТекущиеДанные.Ссылка,,,
		    Истина);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти 



