
#Область ОбработчикиСобытийФормы

//++ Проф-ИТ, #369, Корнилов М.С., 05.11.2023
&НаСервере
Процедура проф_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)

	Элементы.ФормаПечатьДиаграммы.Видимость = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("проф_ГруппаПечать", Тип("ГруппаФормы"), Элементы.ФормаКоманднаяПанель); 
	НовыйЭлемент.Вид = ВидГруппыФормы.Подменю;
	НовыйЭлемент.Заголовок = "Печать";
	НовыйЭлемент.Картинка = БиблиотекаКартинок.Печать;
	
	НоваяКоманда = Команды.Добавить("проф_СводнаяДиаграммаГрафиковППР");
	НоваяКоманда.Действие = "проф_СводнаяДиаграммаГрафиковППР";
	
	НовыйЭлемент = Элементы.Добавить("проф_СводнаяДиаграммаГрафиковППР", Тип("КнопкаФормы"), Элементы.проф_ГруппаПечать);
	НовыйЭлемент.Заголовок = "Сводная диаграмма графиков ППР";
	НовыйЭлемент.ИмяКоманды = "проф_СводнаяДиаграммаГрафиковППР";
	
	НоваяКоманда = Команды.Добавить("проф_СводнаяДиаграммаГрафиковППРПоДням");
	НоваяКоманда.Действие = "проф_СводнаяДиаграммаГрафиковППРПоДням";
	
	НовыйЭлемент = Элементы.Добавить("проф_СводнаяДиаграммаГрафиковППРПоДням", Тип("КнопкаФормы"), Элементы.проф_ГруппаПечать);
	НовыйЭлемент.Заголовок = "Сводная диаграмма графиков ППР по дням";
	НовыйЭлемент.ИмяКоманды = "проф_СводнаяДиаграммаГрафиковППРПоДням";
	
КонецПроцедуры 
//-- Проф-ИТ, #369, Корнилов М.С., 05.11.2023

#КонецОбласти 

#Область ОбработчикиКомандФормы

//++ Проф-ИТ, #369, Корнилов М.С., 05.11.2023
&НаКлиенте
Процедура проф_СводнаяДиаграммаГрафиковППР(Команда)

	ПараметрыПостроения = ПолучитьПараметрыПостроенияДиаграммыНаКлиенте();
	ТабДок = ПолучитьТабличныйДокумент(ПараметрыПостроения);
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
 
	ИдентификаторПечатнойФормы = "Сводная диаграмма графиков ППР";
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = "Сводная диаграмма графиков ППР";
	ПечатнаяФорма.ТабличныйДокумент = ТабДок;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = "Сводная диаграмма графиков ППР";
 
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура проф_СводнаяДиаграммаГрафиковППРПоДням(Команда)

	ПараметрыПостроения = ПолучитьПараметрыПостроенияДиаграммыНаКлиенте();
	ТабДок = проф_ПолучитьТабличныйДокумент(ПараметрыПостроения);
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
 
	ИдентификаторПечатнойФормы = "Сводная диаграмма графиков ППР по дням";
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = "Сводная диаграмма графиков ППР по дням";
	ПечатнаяФорма.ТабличныйДокумент = ТабДок;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = "Сводная диаграмма графиков ППР по дням";
 
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,,ЭтаФорма);	
	
КонецПроцедуры
//-- Проф-ИТ, #369, Корнилов М.С., 05.11.2023

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

//++ Проф-ИТ, #369, Корнилов М.С., 05.11.2023
&НаСервере
Функция проф_ПолучитьТабличныйДокумент(ПараметрыПостроения)
	
	ТД = Новый ТабличныйДокумент;
	
	МакетОтчета = Отчеты.торо_СводнаяДиаграммаГрафиковППР.ПолучитьМакет("проф_ПФ_MXL_СводнаяДиаграммаГрафиковППРПоДням");
	
	ЗаголовокМакета = МакетОтчета.ПолучитьОбласть("Заголовок|Параметры");
	ЗаголовокМакета.Параметры.ДатаНачала = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
	ЗаголовокМакета.Параметры.ДатаОкончания = Формат(ДатаКон, "ДФ=dd.MM.yyyy");	
	ТД.Вывести(ЗаголовокМакета);
	
	Отступ = МакетОтчета.ПолучитьОбласть("Отступ");
	ТД.Вывести(Отступ);
	
	ВыводитьОтсутп = Ложь;
	
	Если ОтборПоОР И ЗначениеЗаполнено(ОтборПоОРЗначение) Тогда
		
		ОбъектРемонтаПараметр = МакетОтчета.ПолучитьОбласть("ОбъектРемонта|Параметры");
		ОбъектРемонтаПараметр.Параметры.ОбъектРемонта = ОтборПоОРЗначение;
		ОбъектРемонтаПараметр.Параметры.ВидСравнения = ОтборПоОРВидСравнения;
		ТД.Вывести(ОбъектРемонтаПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ОтборПоВР И ЗначениеЗаполнено(ОтборПоВРЗначение) Тогда
		
		ВидРемонтаПараметр = МакетОтчета.ПолучитьОбласть("ВидРемонта|Параметры");
		ВидРемонтаПараметр.Параметры.ВидРемонта = ОтборПоВРЗначение;
		ВидРемонтаПараметр.Параметры.ВидСравнения = ОтборПоВРВидСравнения;
		ТД.Вывести(ВидРемонтаПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ОтборПоОрганизации И ЗначениеЗаполнено(ОтборПоОрганизацииЗначение) Тогда
		
		ОрганизацияПараметр = МакетОтчета.ПолучитьОбласть("Организация|Параметры");
		Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
			ОрганизацияПараметр.Параметры.ОрганизацияКонтрагент = "Организация";
		Иначе
			ОрганизацияПараметр.Параметры.ОрганизацияКонтрагент = "Контрагент";
		КонецЕсли;
		ОрганизацияПараметр.Параметры.Организация = ОтборПоОрганизацииЗначение;
		ОрганизацияПараметр.Параметры.ВидСравнения = ОтборПоОрганизацииВидСравнения;
		ТД.Вывести(ОрганизацияПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ВыводитьОтсутп Тогда
		ТД.Вывести(Отступ);
	КонецЕсли;
	
	ВыводитьОтсутп = Ложь;
	
	Если Не ПодразделениеВладелец.Пустая() Тогда
		
		ПодразделениеВладелецПараметр = МакетОтчета.ПолучитьОбласть("ПодразделениеВладелец|Параметры");
		ПодразделениеВладелецПараметр.Параметры.ПодразделениеВладелец = ПодразделениеВладелец;
		ТД.Вывести(ПодразделениеВладелецПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если Не ПодразделениеИсполнитель.Пустая() ИЛИ НЕ КонтрагентИсполнитель.Пустая() Тогда
		
		ИсполнительПараметр = МакетОтчета.ПолучитьОбласть("Исполнитель|Параметры");
		ИсполнительПараметр.Параметры.Исполнитель = ?(ЗначениеЗаполнено(ПодразделениеИсполнитель), ПодразделениеИсполнитель, КонтрагентИсполнитель);
		ТД.Вывести(ИсполнительПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ВыводитьОтсутп Тогда
		ТД.Вывести(Отступ);
	КонецЕсли;
	
	ВыводитьОтсутп = Ложь;
	
	Если ОтображатьИерархию Тогда
		
		ИерархияПараметр = МакетОтчета.ПолучитьОбласть("Иерархия|Параметры");
		ИерархияПараметр.Параметры.Иерархия = ИерархияОР;
		ТД.Вывести(ИерархияПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;
	
	Если ОтображатьЗамещенные Тогда
		
		ЗамещенныеПараметр = МакетОтчета.ПолучитьОбласть("Замещенные|Параметры");
		ЗамещенныеПараметр.Параметры.ОтображатьЗамещенные = ОтображатьЗамещенные;
		ТД.Вывести(ЗамещенныеПараметр);
		ВыводитьОтсутп = Истина;
		
	КонецЕсли;

	Если ВыводитьОтсутп Тогда
		ТД.Вывести(Отступ);
	КонецЕсли;
	
	ВыводитьОтсутп = Ложь;
	
	проф_СформироватьНаСервере(ТД, Ложь, ПараметрыПостроения, МакетОтчета);
	
	ТД.ПолеСверху = 5;
	ТД.ПолеСлева = 5;
	ТД.ПолеСправа = 5;
	ТД.ПолеСнизу = 5;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Возврат ТД;
	
КонецФункции 

&НаСервере
Процедура проф_СформироватьНаСервере(ЭлементВыводаДиаграммы, ДиаграммаДляОтчета, ПараметрыПостроения, МакетОтчета = Неопределено)
	
	// Заполнить параметры
	ОтображатьИерархию  		= ПараметрыПостроения.ОтображатьИерархию;
	ИерархияОР  				= ПараметрыПостроения.ИерархияОР;
	РодительОР					= ПараметрыПостроения.Родитель;
	ОтборПоОР    				= ПараметрыПостроения.ОтборПоОР;
	ОтборПоОРЗначение     		= ПараметрыПостроения.ОтборПоОРЗначение;
	ОтборПоОРВидСравнения  		= ПараметрыПостроения.ОтборПоОРВидСравнения;
	ПодразделениеВладелец   	= ПараметрыПостроения.ПодразделениеВладелец;
	Если ЗначениеЗаполнено(ПараметрыПостроения.ПодразделениеИсполнитель) Тогда 
		Исполнитель = ПараметрыПостроения.ПодразделениеИсполнитель;
	Иначе
		Исполнитель = ПараметрыПостроения.КонтрагентИсполнитель;
	КонецЕсли;
	
	ОтборПоВР           		= ПараметрыПостроения.ОтборПоВР;
	ОтборПоВРЗначение   		= ПараметрыПостроения.ОтборПоВРЗначение;
	ОтборПоВРВидСравнения   	= ПараметрыПостроения.ОтборПоВРВидСравнения;
	ОтборПоОрганизации           		= ПараметрыПостроения.ОтборПоОрганизации;
	ОтборПоОрганизацииЗначение   		= ПараметрыПостроения.ОтборПоОрганизацииЗначение;
	ОтборПоОрганизацииВидСравнения   	= ПараметрыПостроения.ОтборПоОрганизацииВидСравнения;
	ДатаНач           			= ПараметрыПостроения.ДатаНач;
	ДатаКон      				= ПараметрыПостроения.ДатаКон;
	ОтображатьЗамещенные     	= ПараметрыПостроения.ОтображатьЗамещенные;
	СортироватьПоОР     		= ПараметрыПостроения.СортироватьПоОР;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыеДаты.IDРемонта КАК IDРемонта,
	|	ПлановыеДаты.ДатаНачала КАК ДатаНачала,
	|	ПлановыеДаты.ДатаОкончания КАК ДатаОкончания,
	|	ПлановыеДаты.ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ ВТ_ПлановыеДаты
	|ИЗ
	|	РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК ПлановыеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|		ПО ПлановыеДаты.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	|			И (ПлановыеДаты.ДокументНачалаЦепочки ССЫЛКА Документ.торо_ПланГрафикРемонта)
	|			И (ПлановыеДаты.ДатаНачала МЕЖДУ &ПолеВводаДатаНачала И &ПолеВводаДатаКонца)
	|			И (&ОтборыПоОбъектуРемонта)
	|			И (&ОтборыПоИерархииИРодителю)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблОбъектовРем.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	ТаблОбъектовРем.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ТаблОбъектовРем.ДатаНачалаРемонтныхРабот КАК ДатаНач,
	|	ТаблОбъектовРем.ДатаОкончанияРемонтныхРабот КАК ДатаКон,
	|	ТаблОбъектовРем.Регистратор КАК ДокументППР,
	|	ТаблОбъектовРем.ID КАК ID,
	|	ТаблОбъектовРем.Замещен КАК Замещен,
	|	ТаблОбъектовРем.Отменен КАК Отменен
	|ПОМЕСТИТЬ ВТ_ПлановыеРемонты
	|ИЗ
	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	|			,
	|			ID В
	|				(ВЫБРАТЬ
	|					ВТ_ПлановыеДаты.IDРемонта КАК IDРемонта
	|				ИЗ
	|					ВТ_ПлановыеДаты КАК ВТ_ПлановыеДаты)) КАК ТаблОбъектовРем
	|ГДЕ
	|	НЕ ТаблОбъектовРем.Отменен
	|	И (&ПоказыватьЗамещенные
	|			ИЛИ НЕ ТаблОбъектовРем.Замещен)
	|	И &БлокОтборов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПлановыеРемонты.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
	|	ВТ_ПлановыеРемонты.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ВТ_ПлановыеДаты.ДатаНачала КАК ДатаНач,
	|	ВТ_ПлановыеДаты.ДатаОкончания КАК ДатаКон,
	|	ВТ_ПлановыеРемонты.ДокументППР КАК ДокументППР,
	|	ВТ_ПлановыеРемонты.ID КАК ID,
	|	ВТ_ПлановыеРемонты.Замещен КАК Замещен,
	|	ВТ_ПлановыеРемонты.Отменен КАК Отменен,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаНачСт,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаКонСт,
	|	ЛОЖЬ КАК ЗамещенСт,
	|	ЛОЖЬ КАК ЕстьВЗ,
	|	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
	|	ИСТИНА КАК ДоступенДляРедактирования,
	|	0 КАК НомерОР
	|ИЗ
	|	ВТ_ПлановыеРемонты КАК ВТ_ПлановыеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПлановыеДаты КАК ВТ_ПлановыеДаты
	|		ПО ВТ_ПлановыеРемонты.ID = ВТ_ПлановыеДаты.IDРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	&БлокУпорядочиваний";
	
	ОтборыПоОбъектуРемонта = "";
	
	Если ОтборПоОР Тогда
		Если ОтборПоОРЗначение <> Неопределено Тогда
			ВидСравненияВЗапросе = торо_ПечатьСервер.ПолучитьВидСравненияДляЗапроса(ОтборПоОРВидСравнения);
			ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
			| торо_ОбъектыРемонта.Ссылка " + ВидСравненияВЗапросе.ВидСравненияНачало + "&ПолеВводаОбъектРемонта" + ВидСравненияВЗапросе.ВидСравненияКонец;
		Иначе
			ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
			|  торо_ОбъектыРемонта.Ссылка = Значение(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)"; 
		КонецЕсли;
	КонецЕсли;
	
	Если ОтображатьИерархию Тогда
		УстановитьОтборПоИерархииИРодителю(Запрос, ИерархияОР, РодительОР, ДатаНач, ОтборПоРодителюВидСравнения);		
	Иначе
		Запрос.УстановитьПараметр("ОтборыПоИерархииИРодителю", Истина);
	КонецЕсли;

	Если ОтборПоОрганизации Тогда
		Если ОтборПоОрганизацииЗначение <> Неопределено Тогда
			ВидСравненияВЗапросе = торо_ПечатьСервер.ПолучитьВидСравненияДляЗапроса(ОтборПоОрганизацииВидСравнения);
			Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
				ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
				| торо_ОбъектыРемонта.Организация " + ВидСравненияВЗапросе.ВидСравненияНачало + "&ПолеВводаОрганизации" + ВидСравненияВЗапросе.ВидСравненияКонец;
			Иначе
				ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
				| торо_ОбъектыРемонта.Контрагент " + ВидСравненияВЗапросе.ВидСравненияНачало + "&ПолеВводаОрганизации" + ВидСравненияВЗапросе.ВидСравненияКонец;
			КонецЕсли;		
		Иначе
			Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда	
				ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
				|  торо_ОбъектыРемонта.Организация = Значение(Справочник.Организации.ПустаяСсылка)";		
			Иначе
				ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
				|  торо_ОбъектыРемонта.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка)";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодразделениеВладелец) Тогда
		ОтборыПоОбъектуРемонта = ОтборыПоОбъектуРемонта + " И	 
		|  торо_ОбъектыРемонта.Подразделение = &ПолеВводаПодразделениеВладелец";
	КонецЕсли;
		
	////////////////////////////////////////////////////////////////////////////
	
	БлокОтборов = "";
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		БлокОтборов = БлокОтборов + " И	 
		|  ТаблОбъектовРем.Исполнитель = &ПолеВводаИсполнитель";
	КонецЕсли;

	Если ОтборПоВР Тогда
		Если ОтборПоВРЗначение <> Неопределено Тогда
			ВидСравненияВЗапросе = торо_ПечатьСервер.ПолучитьВидСравненияДляЗапроса(ОтборПоВРВидСравнения);
			БлокОтборов = БлокОтборов + " И	 
			| ТаблОбъектовРем.ВидРемонтныхРабот " + ВидСравненияВЗапросе.ВидСравненияНачало + "&ПолеВводаВидРемонта" + ВидСравненияВЗапросе.ВидСравненияКонец;
		Иначе
			БлокОтборов = БлокОтборов + " И	 
			|  ТаблОбъектовРем.ВидРемонтныхРабот = Значение(Справочник.торо_ВидыРемонтов.ПустаяСсылка)";		
		КонецЕсли;	
	КонецЕсли;

	БлокУпорядочиваний = "";
	Если СортироватьПоОР И НЕ ДиаграммаДляОтчета Тогда
	    БлокУпорядочиваний = БлокУпорядочиваний + "ОбъектРемонтныхРабот.Наименование";
	Иначе
	    БлокУпорядочиваний = БлокУпорядочиваний + "ВидРемонтныхРабот.Наименование";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ПолеВводаОбъектРемонта", ОтборПоОРЗначение);
	Запрос.УстановитьПараметр("ПолеВводаПодразделениеВладелец", ПодразделениеВладелец);
	Запрос.УстановитьПараметр("ПолеВводаИсполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ПолеВводаВидРемонта",    ОтборПоВРЗначение);
	Запрос.УстановитьПараметр("ПолеВводаОрганизации",    ОтборПоОрганизацииЗначение);
	Запрос.УстановитьПараметр("СтруктураИерархии",      ИерархияОР); 
	Запрос.УстановитьПараметр("ПолеВводаДатаНачала",    ДатаНач);
	Запрос.УстановитьПараметр("ПолеВводаДатаКонца",     ДатаКон);
	Запрос.УстановитьПараметр("ПоказыватьЗамещенные",	ОтображатьЗамещенные);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (&ОтборыПоОбъектуРемонта)", ОтборыПоОбъектуРемонта);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &БлокОтборов", БлокОтборов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&БлокУпорядочиваний", БлокУпорядочиваний);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
				
		Если ДиаграммаДляОтчета Тогда
			
			ЭлементВыводаДиаграммы.Обновление = Ложь;
			Если НЕ ОтображатьИерархию Тогда
				торо_Ремонты.ПостроитьДиаграммуГантаДляППР(ЭлементВыводаДиаграммы, РезультатЗапроса.Выгрузить(), ИерархияОР, 
					ОтображатьИерархию, Ложь, Ложь, Истина, СортироватьПоОР);
			Иначе
				ТаблицаКонечныхДанных = РезультатЗапроса.Выгрузить();
				ТаблицаКонечныхДанных.Индексы.Добавить("ОбъектРемонтныхРабот");
				МассивРазличныхОР = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаКонечныхДанных.ВыгрузитьКолонку("ОбъектРемонтныхРабот"));

				ПустойРодитель = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(ИерархияОР);
				ТаблицаДанныхРодителей = ПолучитьТаблицуРодителей(ИерархияОР, МассивРазличныхОР, ПустойРодитель, ДатаНач);
				
				Если Не СортироватьПоОР Тогда
					ОтсортироватьПоИерархии(ТаблицаДанныхРодителей);				
				КонецЕсли;
				
				СерияРемонт = ЭлементВыводаДиаграммы.Серии.Добавить();
				СерияРемонт.Текст = "График ремонта";
				
				ВывестиИерархиюВДиаграмму(ЭлементВыводаДиаграммы, ТаблицаДанныхРодителей, ТаблицаКонечныхДанных, ПустойРодитель, СерияРемонт);
					
			КонецЕсли;
		
		Иначе // Печать
			
			РезультатТЧ = РезультатЗапроса.Выгрузить();
			
			Область = МакетОтчета.ПолучитьОбласть("Шапка");
			ЭлементВыводаДиаграммы.Вывести(Область);
			МассивОбъектов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатТЧ.ВыгрузитьКолонку("ОбъектРемонтныхРабот"));

			Если ОтображатьИерархию Тогда 
				ПустойРодитель = торо_РаботаСИерархией20.ПустойРодительПоСтруктуреИерархии(ИерархияОР);
				ТаблицаДанныхРодителей = ПолучитьТаблицуРодителей(ИерархияОР, МассивОбъектов, ПустойРодитель, ДатаНач);
				
				Если Не СортироватьПоОР Тогда			
					ОтсортироватьПоИерархии(ТаблицаДанныхРодителей);			
				КонецЕсли;
				
				ОтсортированныйСписок = Новый СписокЗначений;
				ОтсортироватьОбъектыРемонтаПоИерархии(ТаблицаДанныхРодителей, ПустойРодитель, ОтсортированныйСписок); 
				МассивОбъектов = ОтсортированныйСписок.ВыгрузитьЗначения();
			КонецЕсли;
					
			ШиринаТаблицы = Область.ШиринаТаблицы;
			
			МассивВременныхИнтервалов = Новый Массив;
			ПериодКонРасчетный = КонецМесяца(ДатаКон);
			ТемпДата = НачалоМесяца(ДатаНач);
			ПериодовВОтчете = 0;
			СледующийДень = Истина;
			Пока СледующийДень Цикл
				Область = МакетОтчета.ПолучитьОбласть("СтолбецДня");
				ОбластьОформления = Область.Область("Знач");
				
				Область.Параметры.НомИнтервала = Формат(ТемпДата, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
				Если ДеньНедели(Дата(Год(ТемпДата), Месяц(ТемпДата), День(ТемпДата), 0,0,0))=6 Или ДеньНедели(Дата(Год(ТемпДата), Месяц(ТемпДата), День(ТемпДата), 0,0,0))=7 Тогда
					//ОбластьОформления.ЦветФона = Новый Цвет(255,251,240);
					ОбластьОформления.ЦветТекста = Новый Цвет(0,0,0);
				КонецЕсли;
				
				ЕдиничныйИнтервал = Новый Структура;
				ЕдиничныйИнтервал.Вставить("НачИнт",НачалоДня(ТемпДата));
				ЕдиничныйИнтервал.Вставить("КонИнт",КонецДня(ТемпДата));	
				МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);
				
				ЭлементВыводаДиаграммы.Присоединить(Область);
				ТемпДата = ТемпДата+60*60*24; 
				Если ТемпДата > ПериодКонРасчетный Тогда
					СледующийДень = Ложь;		
				КонецЕсли;  
				
				ПериодовВОтчете = ПериодовВОтчете + 1;
								
			КонецЦикла;
			
			ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете * Область.ШиринаТаблицы;
			
			НСТР = 1;
			Для Каждого СтрокаТЧ Из МассивОбъектов Цикл
				
				Область = МакетОтчета.ПолучитьОбласть("СтрокаЗаполнения");
				
				ФорматнаяОбласть = Область.Область("НаимПрим");
				ФорматнаяОбласть.Примечание.Текст = СтрокаТЧ.ПлановыйГрафикРаботы.Наименование;
				
				Область.Параметры.НПП = НСТР;
				Область.Параметры.НаименовОбъекта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(СтрокаТЧ);
				
				ЭлементВыводаДиаграммы.Вывести(Область);
				
				Условие = Новый Структура;
				Условие.Вставить("ОбъектРемонтныхРабот", СтрокаТЧ);
				
				НайденныеСтроки = РезультатТЧ.НайтиСтроки(Условие);
				Для Сч = 1 по  МассивВременныхИнтервалов.Количество() Цикл
					
					БуфГод = "";
					ТекущийПериодНач = МассивВременныхИнтервалов[Сч - 1].НачИнт;
					ТекущийПериодКон = МассивВременныхИнтервалов[Сч - 1].КонИнт;
					
					Область = МакетОтчета.ПолучитьОбласть("ЗначенияДня");
					ОбластьФормат = Область.Область();
					
					Для Каждого ОбъектСравнения Из НайденныеСтроки Цикл
						
						Если ОбъектСравнения.ДатаКон < ОбъектСравнения.ДатаНач Тогда
							КонечнаяДата = КонецДня(ОбъектСравнения.ДатаНач);
						Иначе
							КонечнаяДата = ОбъектСравнения.ДатаКон;
						КонецЕсли;
						
						Если  ((ТекущийПериодКон >= ОбъектСравнения.ДатаНач) И (ТекущийПериодНач <= КонечнаяДата)) Или
							((ТекущийПериодКон > ОбъектСравнения.ДатаНач) И (ТекущийПериодНач <= КонечнаяДата)) Тогда
							
							ОбластьФормат.ЦветФона = Новый Цвет(255, 251, 240);
							
							ПредставлениеВидаРемонта = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ОбъектСравнения.ВидРемонтныхРабот);
							БуфГод = БуфГод + ПредставлениеВидаРемонта + ", ";			
							
							ОбластьФормат.Примечание.Текст =  ОбластьФормат.Примечание.Текст + ПредставлениеВидаРемонта +
							" (" + Лев(ОбъектСравнения.ДатаНач, 10) + " - " + Лев(ОбъектСравнения.ДатаКон, 10) + ") "; 
							
							Если ОбъектСравнения.Замещен Тогда 
								ОбластьФормат.Примечание.Текст = ОбластьФормат.Примечание.Текст + "(Замещен)";
							КонецЕсли;
							
							ОбластьФормат.Примечание.Текст = ОбластьФормат.Примечание.Текст + Символы.ПС;
														
						КонецЕсли;
						
					КонецЦикла;
					
					Область.Параметры.заполнение = Лев(БуфГод, СтрДлина(БуфГод) - 2);
					ЭлементВыводаДиаграммы.Присоединить(Область);
					
				КонецЦикла;
				
				НСТР = НСТР + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДиаграммаДляОтчета Тогда
		
		ЭлементВыводаДиаграммы.АвтоОпределениеПолногоИнтервала = Ложь;
	 	ЭлементВыводаДиаграммы.УстановитьПолныйИнтервал(НачалоДня(ДатаНач), КонецДня(ДатаКон));  
	 	ЭлементВыводаДиаграммы.ОтображатьЛегенду = Ложь;
		ЭлементВыводаДиаграммы.Обновление = Истина;

	КонецЕсли;
	
КонецПроцедуры
//-- Проф-ИТ, #369, Корнилов М.С., 05.11.2023

#КонецОбласти
