//++ Проф-ИТ, #398, Соловьев А.А., 18.12.2023

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрСклад = ПолучитьПараметр(КомпоновщикНастроек, "Склад");
	ПараметрНоменклатура = ПолучитьПараметр(КомпоновщикНастроек, "Номенклатура");
	
	СтруктураПараметров = СтруктураПараметровЗапроса();
	СтруктураПараметров.Период = ПолучитьПараметр(КомпоновщикНастроек, "Период").Значение;
	СтруктураПараметров.НоменклатураИспользование = ПараметрНоменклатура.Использование;
	СтруктураПараметров.Номенклатура = ПараметрНоменклатура.Значение;
	СтруктураПараметров.СкладИспользование = ПараметрСклад.Использование;
	СтруктураПараметров.Склад = ПараметрСклад.Значение;
	СтруктураПараметров.ВыводитьТолькоРазницу = ПолучитьПараметр(КомпоновщикНастроек, "ВыводитьТолькоРазницу").Значение;
	
	ТаблицаДанных = СформироватьТаблицуЗначениДляОтчета(СтруктураПараметров);
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить данные из ЕРП'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ТаблицаДанных);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьДанныеОтчетаВРСпроф_СравненияОстатковРазница() Экспорт
	
	КодУзлаЕРП = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", "КодУзлаЕРП");
	УзелОбменаСсылка = ПланыОбмена.ОбменТОИР30ЕРП20.НайтиПоКоду(КодУзлаЕРП);
	НомерПринятого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбменаСсылка, "НомерПринятого");
	
	Если НомерПринятого % 10 = 0 Тогда 
		
		СтруктураПараметров = СтруктураПараметровЗапроса();
		СтруктураПараметров.Период = ТекущаяДатаСеанса();
		СтруктураПараметров.ВыводитьТолькоРазницу = Ложь;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		ТаблицаДанных = СформироватьТаблицуЗначениДляОтчета(СтруктураПараметров);
		
		Расхождение = Ложь;
		
		Если ТаблицаДанных.Количество() <> 0 Тогда 
			
			Построитель = Новый ПостроительОтчета;
			Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДанных);
			Построитель.Вывести(ТабличныйДокумент);
			
			Расхождение = (ТаблицаДанных[0].Расхождение > 0);
			
		КонецЕсли;
		
		Хранилище = Новый ХранилищеЗначения(ТабличныйДокумент);
		Период = ТекущаяДатаСеанса();
		
		Менеджер = РегистрыСведений.проф_СравненияОстатковРазница.СоздатьМенеджерЗаписи();
		Менеджер.НомерПакета = НомерПринятого;
		Менеджер.Прочитать();
		Менеджер.Период				= Период;
		Менеджер.НомерПакета		= НомерПринятого;
		Менеджер.Хранилище			= Хранилище;
		Менеджер.ПризнакРасхождения = Расхождение;
		Менеджер.Записать();
		
		Если Расхождение Тогда
			СоздатьЗадачуИсполнителю(Период);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуЗначениДляОтчета(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	проф_ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	проф_ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	проф_ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	проф_ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|	проф_ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	|ПОМЕСТИТЬ втДанныеРегистра
	|ИЗ
	|	РегистрНакопления.проф_ТоварыНаСкладах.Остатки(
	|			&Период,
	|			&ОтборПоНоменклатуре
	|				И &ОтборПоСкладу) КАК проф_ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхЕРП.Номенклатура КАК Номенклатура,
	|	ТаблицаДанныхЕРП.Характеристика КАК Характеристика,
	|	ТаблицаДанныхЕРП.Склад КАК Склад,
	|	ТаблицаДанныхЕРП.Назначение КАК Назначение,
	|	ТаблицаДанныхЕРП.ВНаличииОстаток КАК ВНаличииОстаток
	|ПОМЕСТИТЬ втДанныеЕРП
	|ИЗ
	|	&ТаблицаДанныхЕРП КАК ТаблицаДанныхЕРП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втДанныеРегистра.Номенклатура, втДанныеЕРП.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(втДанныеРегистра.Характеристика, втДанныеЕРП.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(втДанныеРегистра.Склад, втДанныеЕРП.Склад) КАК Склад,
	|	ЕСТЬNULL(втДанныеРегистра.Назначение, втДанныеЕРП.Назначение) КАК Назначение,
	|	ЕСТЬNULL(втДанныеРегистра.ВНаличииОстаток, 0) КАК ВНаличииТОиР,
	|	ЕСТЬNULL(втДанныеЕРП.ВНаличииОстаток, 0) КАК ВНаличииЕРП,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втДанныеРегистра.ВНаличииОстаток, 0) > ЕСТЬNULL(втДанныеЕРП.ВНаличииОстаток, 0)
	|			ТОГДА ЕСТЬNULL(втДанныеРегистра.ВНаличииОстаток, 0) - ЕСТЬNULL(втДанныеЕРП.ВНаличииОстаток, 0)
	|		ИНАЧЕ ЕСТЬNULL(втДанныеЕРП.ВНаличииОстаток, 0) - ЕСТЬNULL(втДанныеРегистра.ВНаличииОстаток, 0)
	|	КОНЕЦ КАК Расхождение
	|ИЗ
	|	втДанныеРегистра КАК втДанныеРегистра
	|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеЕРП КАК втДанныеЕРП
	|		ПО втДанныеРегистра.Номенклатура = втДанныеЕРП.Номенклатура
	|			И втДанныеРегистра.Характеристика = втДанныеЕРП.Характеристика
	|			И втДанныеРегистра.Склад = втДанныеЕРП.Склад
	|			И втДанныеРегистра.Назначение = втДанныеЕРП.Назначение
	|ГДЕ
	|	&ОтборРасхождения
	|	И &ОбщийОтборПоНоменклатуре
	|	И &ОбщийОтборПоСкладу
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Расхождение УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.Период) Тогда 
		Период = ТекущаяДатаСеанса();
	Иначе
		Период = СтруктураПараметров.Период;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", Период);
	
	ТаблицаДанныхЕРП = ТаблицаДанныхЕРП(Период);
	
	Если ТаблицаДанныхЕРП = Неопределено Тогда 
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДанныхЕРП", ТаблицаДанныхЕРП);
	
	Если СтруктураПараметров.ВыводитьТолькоРазницу Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборРасхождения", "ЕСТЬNULL(втДанныеЕРП.ВНаличииОстаток, 0) <> ЕСТЬNULL(втДанныеРегистра.ВНаличииОстаток, 0)");
	Иначе
		Запрос.УстановитьПараметр("ОтборРасхождения", Истина);
	КонецЕсли;
	
	Если СтруктураПараметров.НоменклатураИспользование Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоНоменклатуре", "Номенклатура В(&ОтборПоНоменклатуре)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбщийОтборПоНоменклатуре", "ЕСТЬNULL(втДанныеРегистра.Номенклатура, втДанныеЕРП.Номенклатура) В(&ОтборПоНоменклатуре)");
		Номенклатура = СтруктураПараметров.Номенклатура;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбщийОтборПоНоменклатуре", "&ОтборПоНоменклатуре");
		Номенклатура = Истина;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтборПоНоменклатуре", Номенклатура);
	
	Если СтруктураПараметров.СкладИспользование Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСкладу", "Склад В(&ОтборПоСкладу)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбщийОтборПоСкладу", "ЕСТЬNULL(втДанныеРегистра.Склад, втДанныеЕРП.Склад) В(&ОтборПоСкладу)");
		Склад = СтруктураПараметров.Склад;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбщийОтборПоСкладу", "&ОтборПоСкладу");
		Склад = Истина;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтборПоСкладу", Склад);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция СтруктураПараметровЗапроса()
	
	Возврат Новый Структура("Период, НоменклатураИспользование, Номенклатура, СкладИспользование, Склад, ВыводитьТолькоРазницу");
	
КонецФункции

Функция ПреобразоватьМассивВТаблицуЗначений(МассивДанных)
	
	ТаблицаДанные = Новый ТаблицаЗначений;
	
	ТаблицаДанные.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанные.Колонки.Добавить("Характеристика",	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанные.Колонки.Добавить("Склад",				Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДанные.Колонки.Добавить("Назначение",		Новый ОписаниеТипов("СправочникСсылка.проф_Назначения"));
	ТаблицаДанные.Колонки.Добавить("ВНаличииОстаток",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		
		НоваяСтрока = ТаблицаДанные.Добавить();
		
		Номенклатура = XMLЗначение(Тип("СправочникСсылка.Номенклатура"), СтруктураДанных.Номенклатура);
		НоваяСтрока.Номенклатура = Номенклатура;
		
		Характеристика = XMLЗначение(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), СтруктураДанных.Характеристика);
		НоваяСтрока.Характеристика = Характеристика;
		
		Склад = XMLЗначение(Тип("СправочникСсылка.Склады"), СтруктураДанных.Склад);
		НоваяСтрока.Склад = Склад;
		
		Назначение = XMLЗначение(Тип("СправочникСсылка.проф_Назначения"), СтруктураДанных.Назначение);
		НоваяСтрока.Назначение = Назначение;
		
		НоваяСтрока.ВНаличииОстаток = СтруктураДанных.ВНаличииОстаток;
		
	КонецЦикла;
	
	Возврат ТаблицаДанные;
	
КонецФункции

Функция ТаблицаДанныхЕРП(Период)
	
	СтруктураПараметров = Новый Структура("Период", Строка(Период));
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураПараметров);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	БазаАвторизации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", 
		"БазаАвторизации");
	
	Отказ = Ложь;
	Если БазаАвторизации = Неопределено Тогда
		
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка отправки запроса в ЕРП при попытке сравнения остатков товаров на складах.'"),
						УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,,
						НСтр("ru = 'Не заполнен элемент ""БазаАвторизации"" справочника ""Настройки системы""'"));
		
	КонецЕсли;
	
	СерверССервисомАвторизации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", 
		"СерверССервисомАвторизации");
	
	Если СерверССервисомАвторизации = Неопределено Тогда 
		
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка отправки запроса в ЕРП при попытке сравнения остатков товаров на складах.'"),
						УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,,
						НСтр("ru = 'Не заполнен элемент ""СерверССервисомАвторизации"" справочника ""Настройки системы""'"));
						
	КонецЕсли;
	
	Пользователь = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", "ПользовательОбменПоУмолчанию");
	
	Если Пользователь = Неопределено Тогда 
		
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка отправки запроса в ЕРП при попытке сравнения остатков товаров на складах.'"),
						УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,,
						НСтр("ru = 'Не заполнен элемент ""ПользовательОбменПоУмолчанию"" справочника ""Настройки системы""'"));
		
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("%1/", СерверССервисомАвторизации);
	АдресЗапроса = СтрШаблон("%1/hs/toir/balanses_merge_toir_erp", БазаАвторизации);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	Пароль = "";
	
	Если ПользовательИБ = Неопределено Тогда
		
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка отправки запроса в ЕРП при попытке сравнения остатков товаров на складах.'"),
						УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(АдресРесурса, , ПользовательИБ.Имя, Пароль, , 30);
	Запрос = Новый HTTPЗапрос(АдресЗапроса);
	
	Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Попытка
		
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
		МассивДанных = ОбработкаОтвета(Ответ);
		
		Если МассивДанных <> Неопределено Тогда 
			Возврат ПреобразоватьМассивВТаблицуЗначений(МассивДанных);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка отправки запроса в ЕРП при попытке сравнения остатков товаров на складах.'"),
						УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОбработкаОтвета(Ответ)
	
	Попытка
		
		Если Ответ.КодСостояния = 200 Тогда 
			
			ОтветJSON = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветJSON);
			
			МассивСтруктур = ПрочитатьJSON(ЧтениеJSON);
			
			Возврат МассивСтруктур;
			
		Иначе
			
			ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка получения данных из ЕРП при попытке сравнения остатков товаров на складах.'"),
						УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка обработки ответа из ЕРП при попытке сравнения остатков товаров на складах.'"),
						УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПараметр(ОбъектНастройки, Параметр)
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(ОбъектНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из ОбъектНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из ОбъектНастройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = ОбъектНастройки.ФиксированныеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Процедура СоздатьЗадачуИсполнителю(Период)
	
	ПользовательСлужебный = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", "ПользовательОбменПоУмолчанию");
	
	ЗадачаОбъект = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗадачаОбъект.Дата			= Период;
	ЗадачаОбъект.Важность		= Перечисления.ВариантыВажностиЗадачи.Высокая;
	ЗадачаОбъект.Автор			= ПользовательСлужебный;
	ЗадачаОбъект.АвторСтрокой	= Строка(ПользовательСлужебный);
	ЗадачаОбъект.ДатаНачала		= Период;
	ЗадачаОбъект.Описание		= НСтр("ru = 'Расхождение остатков ЕРП и ТОиР'");
	ЗадачаОбъект.Наименование	= ЗадачаОбъект.Описание;
	ЗадачаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

//-- Проф-ИТ, #398, Соловьев А.А., 18.12.2023