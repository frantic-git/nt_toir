
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура проф_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	//++ Проф-ИТ, #26, Ровенский О.В., 24.07.2023
	НовыйЭлемент = Элементы.Добавить("НаправлениеДеятельности", Тип("ПолеФормы"), Элементы.ГруппаПодразделение);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_НаправлениеДеятельности";	
	//-- Проф-ИТ, #26, Ровенский О.В., 24.07.2023
	
	//++ Проф-ИТ, #168, Лавриненко Т.В.,21.08.2023 
	Элементы.ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлемент = Элементы.Добавить("ТипЗаказа", Тип("ПолеФормы"), Элементы.ГруппаШапка);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_ТипЗаказа";	
	//-- Проф-ИТ, #168, Лавриненко Т.В.,21.08.2023	
	
	//++ Проф-ИТ, #27, Соловьев А.А., 25.08.2023
	Элементы.ГруппаПодразделение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлемент = Элементы.Добавить("Назначение", Тип("ПолеФормы"), Элементы.ГруппаПодразделение);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_Назначение";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	//-- Проф-ИТ, #27, Соловьев А.А., 25.08.2023
	
	//++ Проф-ИТ, #238, Башинская А.Ю., 29.08.2023 
	НовыйЭлемент = Элементы.Добавить("СтатусСогласования", Тип("ПолеФормы"), Элементы.ДатаИНомер);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_СтатусСогласования";
	НовыйЭлемент.Ширина = 16;
    НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;  
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;  
	
	//++ Проф-ИТ, #228, Соловьев А.А., 04.10.2023
	ГруппаПрофИТ						= Элементы.Добавить("ГруппаПрофИТ", Тип("ГруппаФормы"), Элементы.ГруппаШапка);
	ГруппаПрофИТ.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПрофИТ.Отображение			= ОтображениеОбычнойГруппы.Нет;
	ГруппаПрофИТ.ОтображатьЗаголовок	= Ложь; 
	ГруппаПрофИТ.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	НовыйЭлемент = Элементы.Добавить("КВыполнению", Тип("ПолеФормы"), ГруппаПрофИТ);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_КВыполнению";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	//-- Проф-ИТ, #228, Соловьев А.А., 04.10.2023 
	
	СоздатьТаблицуМатЗатратыИЗапчасти();	
	//-- Проф-ИТ, #238, Башинская А.Ю., 29.08.2023 
	
	//++ Проф-ИТ, #205, Карпов Д. Ю., 12.10.2023
	Элементы.МатериальныеЗатраты.УстановитьДействие("ПриНачалеРедактирования",
													"проф_МатериальныеЗатратыПриНачалеРедактирования");
	Элементы.ЗапчастиРемонта.УстановитьДействие("ПриНачалеРедактирования",
													"проф_ЗапчастиРемонтаПриНачалеРедактирования");
	//-- Проф-ИТ, #205, Карпов Д. Ю., 12.10.2023
	
	//++ Проф-ИТ, #326, Соловьев А.А., 31.10.2023
	НовыйЭлемент = Элементы.Добавить("проф_ЭксплуатацияВозможна", Тип("ПолеФормы"), ГруппаПрофИТ);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	НовыйЭлемент.ВидПереключателя = ВидПереключателя.Тумблер;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_ЭксплуатацияВозможна";
	НовыйЭлемент.СписокВыбора.Добавить("Да", "Да");
	НовыйЭлемент.СписокВыбора.Добавить("Нет", "Нет");
	//-- Проф-ИТ, #326, Соловьев А.А., 31.10.2023
	
	//++ Проф-ИТ, #332, Корнилов М.С., 07.11.2023 
	НовыйПараметр = Новый Массив;
	НовыйПараметр.Добавить(Новый ПараметрВыбора("Отбор.проф_ПризнакПодразделенияОрганизации", Ложь));
	Элементы.Подразделение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйПараметр);	
	//-- Проф-ИТ, #332, Корнилов М.С., 07.11.2023
	
	//++ Проф-ИТ, #400, Корнилов М.С., 18.12.2023
	НовыйЭлемент = Элементы.Добавить("ДатаУтверждения", Тип("ПолеФормы"), Элементы.ДатаИНомер);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_ДатаУтверждения";
	
	НовыйЭлемент = Элементы.Добавить("ОтветственныйПоЗакупкам", Тип("ПолеФормы"), Элементы.ГруппаПодразделение);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_ОтветственныйПоЗакупкам";
	
	НовыйЭлемент = Элементы.Добавить("КЗНР", Тип("ПолеФормы"), Элементы.ДатаИНомер);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.ПутьКДанным = "Объект.проф_КЗНР";
	
	Если проф_ОбщегоНазначенияВызовСервера.ЕстьРоль("проф_СостоянияДОЗНР") Тогда 
		Элементы.ДатаУтверждения.ТолькоПросмотр = Ложь;
		Элементы.КЗНР.ТолькоПросмотр = Ложь;
	КонецЕсли;
	//-- Проф-ИТ, #400, Корнилов М.С., 18.12.2023
	
	//++ Проф-ИТ, #401, Соловьев А.А., 11.12.2023
	проф_ОбщегоНазначенияВызовСервера.УстановитьПараметрВыбораПодразделения(Элементы);
	//-- Проф-ИТ, #401, Соловьев А.А., 11.12.2023
	
	//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
	НовыйЭлемент = Элементы.Добавить("МатериальныеЗатратыпроф_Отменено", Тип("ПолеФормы"), Элементы.МатериальныеЗатраты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.МатериальныеЗатраты.проф_Отменено";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент = Элементы.Добавить("МатериальныеЗатратыпроф_ПричинаОтмены", Тип("ПолеФормы"), Элементы.МатериальныеЗатраты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.МатериальныеЗатраты.проф_ПричинаОтмены";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент = Элементы.Добавить("МатериальныеЗатратыпроф_Отменил", Тип("ПолеФормы"), Элементы.МатериальныеЗатраты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.МатериальныеЗатраты.проф_Отменил";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент = Элементы.Добавить("ЗапчастиРемонтапроф_Отменено", Тип("ПолеФормы"), Элементы.ЗапчастиРемонта);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.ЗапчастиРемонта.проф_Отменено";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент = Элементы.Добавить("ЗапчастиРемонтапроф_ПричинаОтмены", Тип("ПолеФормы"), Элементы.ЗапчастиРемонта);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.ЗапчастиРемонта.проф_ПричинаОтмены";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент = Элементы.Добавить("ЗапчастиРемонтапроф_Отменил", Тип("ПолеФормы"), Элементы.ЗапчастиРемонта);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.ЗапчастиРемонта.проф_Отменил";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024
	
	//++ Проф-ИТ, #317, Соловьев А.А., 27.10.2023
	НовыйЭлемент = Элементы.Добавить("МатериальныеЗатратыпроф_КЗаказу", Тип("ПолеФормы"), Элементы.МатериальныеЗатраты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.МатериальныеЗатраты.проф_КЗаказу";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент = Элементы.Добавить("ЗапчастиРемонтапроф_КЗаказу", Тип("ПолеФормы"), Элементы.ЗапчастиРемонта);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.ЗапчастиРемонта.проф_КЗаказу";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	//-- Проф-ИТ, #317, Соловьев А.А., 27.10.2023
	
	//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
	НоваяКоманда = Команды.Добавить("проф_Редактировать");
	НоваяКоманда.Действие = "проф_Редактировать";
	
	НовыйЭлемент = Элементы.Добавить("проф_Редактировать", Тип("КнопкаФормы"), Элементы.ФормаКоманднаяПанель);
	НовыйЭлемент.Заголовок   = "Редактировать";
	НовыйЭлемент.ИмяКоманды  = "проф_Редактировать";
	НовыйЭлемент.Доступность = Ложь;
	
	Если РольДоступна("ПолныеПрава") 
		Или проф_ОбщегоНазначенияВызовСервера.ЕстьРоль("проф_РедактироватьСмету") Тогда 
		Элементы.проф_Редактировать.Доступность = Истина;
	КонецЕсли;
		
	ДеревоРемонтныхРаботОбъект = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	ДеревоРемонтныхРаботОбъект.Колонки.Добавить("проф_БлокировкаСтроки", Новый ОписаниеТипов("Булево"));
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("проф_БлокировкаСтроки", Новый ОписаниеТипов("Булево"), "ДеревоРемонтныхРабот"));
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗначениеВРеквизитФормы(ДеревоРемонтныхРаботОбъект, "ДеревоРемонтныхРабот");
	//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024
	
	//++ Проф-ИТ, #379, Корнилов М.С., 07.12.2023
	Если Не проф_ОбщегоНазначенияВызовСервера.ЕстьРоль("проф_ИзменениеСтатусовСогласованияУСметы") Тогда
		//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
		проф_УстановитьУсловноеОформлениеДляТЧ();
		//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024
		
		Если Объект.проф_СтатусСогласования = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый Тогда
			Элементы.СтатусСогласования.ТолькоПросмотр = Истина;
			Элементы.КВыполнению.ТолькоПросмотр        = Истина;
		Иначе 
			ТолькоПросмотр = (Объект.проф_СтатусСогласования = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении) 
				Или (Объект.проф_СтатусСогласования = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
		КонецЕсли;
	КонецЕсли;
	//-- Проф-ИТ, #379, Корнилов М.С., 07.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура проф_ПослеЗаписиПосле(ПараметрыЗаписи)
	//++ Проф-ИТ, #238, Башинская А.Ю., 29.08.2023   
	Элементы.ГруппаМатЗатратыИЗапчасти.Заголовок = "Плановые мат. затраты и запчасти" + ?(Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти.Количество()=0, "", " (" + Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти.Количество()+ ")");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
&НаКлиенте
Процедура проф_Редактировать(Команда)
	
	Объект.проф_СтатусСогласования = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый");
	Записать();
	ЭтаФорма.Прочитать();
	
КонецПроцедуры
//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования

//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
&НаКлиенте
Процедура проф_РемонтыОборудованияПередУдалениемПеред(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	проф_ПроверкаПередУдалениемСтрокиТЧ(ТекДанные.проф_БлокировкаСтроки, Отказ);
	
КонецПроцедуры
//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
&НаКлиенте
Процедура проф_ДокументыОснованияПередУдалениемПеред(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	проф_ПроверкаПередУдалениемСтрокиТЧ(ТекДанные.проф_БлокировкаСтроки, Отказ);
	
КонецПроцедуры
//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты

//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
&НаКлиенте
Процедура проф_МатериальныеЗатратыПередУдалениемПеред(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	проф_ПроверкаПередУдалениемСтрокиТЧ(ТекДанные.проф_БлокировкаСтроки, Отказ);
	
КонецПроцедуры
//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструменты

//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
&НаКлиенте
Процедура проф_ИнструментыПередУдалениемПеред(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	проф_ПроверкаПередУдалениемСтрокиТЧ(ТекДанные.проф_БлокировкаСтроки, Отказ);	
	
КонецПроцедуры
//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчастиРемонта

//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
&НаКлиенте
Процедура проф_ЗапчастиРемонтаПередУдалениемПеред(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	проф_ПроверкаПередУдалениемСтрокиТЧ(ТекДанные.проф_БлокировкаСтроки, Отказ); 
	
КонецПроцедуры
//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
&НаКлиенте
Процедура проф_ДеревоРемонтныхРаботПередУдалениемПеред(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	проф_ПроверкаПередУдалениемСтрокиТЧ(ТекДанные.проф_БлокировкаСтроки, Отказ);
	
КонецПроцедуры
//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
&После("УстановитьДоступностьДляРедактированияПоТекРемонту")
Процедура проф_УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения, ОбъектРемонта)
	
	//++ Проф-ИТ, #66, Башинская А.Ю., 11.09.2023  
	проф_ОграничитьРедактированияДляУтвержденногоДокумента();
	
КонецПроцедуры


//++ Проф-ИТ, #238, Башинская А.Ю., 29.08.2023 

&НаСервере
Процедура СоздатьТаблицуМатЗатратыИЗапчасти()
	
	НовыйЭлементыСтраница = Элементы.Добавить("ГруппаМатЗатратыИЗапчасти", Тип("ГруппаФормы"), Элементы.ПанельЗатрат);
    НовыйЭлементыСтраница.Вид = ВидГруппыФормы.Страница;
    НовыйЭлементыСтраница.Заголовок = "Плановые мат. затраты и запчасти"; 
	НовыйЭлементыСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	// Добавление ТаблицыЗначений на форму
	ТаблицаПолейВыбора = Элементы.Добавить("ТаблицаМатЗатратыИЗапчасти", Тип("ТаблицаФормы"), НовыйЭлементыСтраница);
	ТаблицаПолейВыбора.ПутьКДанным = "Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти";
	ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
	ТаблицаПолейВыбора.Заголовок = "Плановые мат. затраты и запчасти";
	ТаблицаПолейВыбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТаблицаПолейВыбора.ЦветТекстаЗаголовка = ЦветаСтиля.ГруппаВариантовОтчетовЦвет; 
	ТаблицаПолейВыбора.ШрифтЗаголовка = Новый Шрифт(, 10, Истина, , ); 
	ТаблицаПолейВыбора.ТолькоПросмотр  = Истина;
			
	НовыйЭлементНоменклатура = Элементы.Добавить("ТаблицаМатЗатратыИЗапчастиНоменклатура", Тип("ПолеФормы"), ТаблицаПолейВыбора);
	НовыйЭлементНоменклатура.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементНоменклатура.ПутьКДанным = "Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти.Номенклатура";
	НовыйЭлементНоменклатура.Заголовок = "Номенклатура";
	НовыйЭлементНоменклатура.Видимость = Истина;
    НовыйЭлементНоменклатура.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементХарактеристика = Элементы.Добавить("ТаблицаМатЗатратыИЗапчастиХарактеристика", Тип("ПолеФормы"), ТаблицаПолейВыбора);
	НовыйЭлементХарактеристика.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлементХарактеристика.ПутьКДанным = "Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти.ХарактеристикаНоменклатуры";   
	НовыйЭлементХарактеристика.Заголовок = "Характеристика";	
	НовыйЭлементХарактеристика.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлементХарактеристика.Видимость = Истина;
	 		
	НовыйЭлементНоменклатураЕдиницаИзмерения = Элементы.Добавить("ТаблицаМатЗатратыИЗапчастиНоменклатураЕдиницаИзмерения", Тип("ПолеФормы"), ТаблицаПолейВыбора);
	НовыйЭлементНоменклатураЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлементНоменклатураЕдиницаИзмерения.ПутьКДанным = "Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти.Номенклатура.ЕдиницаИзмерения";
	НовыйЭлементНоменклатураЕдиницаИзмерения.Заголовок = "Ед. изм.";
	НовыйЭлементНоменклатураЕдиницаИзмерения.Видимость = Истина;
    НовыйЭлементНоменклатураЕдиницаИзмерения.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

	НовыйЭлементКоличество = Элементы.Добавить("ТаблицаМатЗатратыИЗапчастиКоличество", Тип("ПолеФормы"), ТаблицаПолейВыбора);
	НовыйЭлементКоличество.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлементКоличество.ПутьКДанным = "Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти.Количество";   
	НовыйЭлементКоличество.Заголовок = "Количество";	
	НовыйЭлементКоличество.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлементКоличество.Видимость = Истина;
	
КонецПроцедуры	

//-- Проф-ИТ, #238, Башинская А.Ю., 29.08.2023 

&НаКлиенте
&ИзменениеИКонтроль("ДобавитьЗаказФрагмент")
Процедура проф_ДобавитьЗаказФрагмент(Знач МассивСтрокНоменклатуры, Знач ТекущийРемонт)

	Перем ОписаниеОповещения, СтруктураПараметров, СтруктураПередаваемыхВОбработчикПараметров;

	СтруктураПараметров = Новый Структура();

	СтрокаКомментарий = НСтр(СтрШаблон("ru = 'Смета ремонта (Заявка на ремонт) %1 от %2 %3 %4 %5'",
	Объект.Номер, Объект.Дата, ТекущийРемонт.ОбъектРемонта, ТекущийРемонт.ВидРемонтныхРабот,
	Формат(ТекущийРемонт.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'"))));

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);

	ТекДата = ТекущаяДата();
	Если НЕ ТекДата > ТекущийРемонт.ДатаНачала Тогда 
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", ТекущийРемонт.ДатаНачала);
	КонецЕсли;

	ЗначенияЗаполнения.Вставить("Комментарий", СтрокаКомментарий);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	#Вставка
	//++ Проф-ИТ, #27, Соловьев А.А., 25.08.2023
	Если Не ЗначениеЗаполнено(Объект.проф_Назначение) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Реквизит ""Назначение"" не заполнен'"),, 
			"Объект.проф_Назначение");
		Возврат;
	КонецЕсли;	
	ЗначенияЗаполнения.Вставить("проф_Назначение", Объект.проф_Назначение);
	//-- Проф-ИТ, #27, Соловьев А.А., 25.08.2023
	//++ Проф-ИТ, #73, Соловьев А.А., 31.08.2023
	ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
	//-- Проф-ИТ, #73, Соловьев А.А., 31.08.2023 	
	//++ Проф-ИТ, #205, Карпов Д. Ю., 04.10.2023  
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ТекущийРемонт.ID, Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("проф_СписокID", Соответствие);
	//-- Проф-ИТ, #205, Карпов Д. Ю., 04.10.2023
	#КонецВставки

	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID", ТекущийРемонт.ID);

	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов", ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ДобавитьЗаказСводный")
Процедура проф_ДобавитьЗаказСводный(МассивСтрокНоменклатуры, МассивID, СтрокаКомментария)

	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("МассивID", МассивID);

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);

	ДатаОтргрузкиСводный = ПолучитьСводнуюДатуОтгрузки(МассивID);
	Если НЕ ДатаОтргрузкиСводный = "" Тогда 
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", ДатаОтргрузкиСводный);
	КонецЕсли;

	ЗначенияЗаполнения.Вставить("Комментарий", СтрокаКомментария);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	#Вставка
	//++ Проф-ИТ, #27, Соловьев А.А., 25.08.2023
	Если Не ЗначениеЗаполнено(Объект.проф_Назначение) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Реквизит ""Назначение"" не заполнен'"),, 
			"Объект.проф_Назначение");
		Возврат;
	КонецЕсли;
	ЗначенияЗаполнения.Вставить("проф_Назначение", Объект.проф_Назначение);
	//-- Проф-ИТ, #27, Соловьев А.А., 25.08.2023
	//++ Проф-ИТ, #73, Соловьев А.А., 31.08.2023
	ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
	//-- Проф-ИТ, #73, Соловьев А.А., 31.08.2023
	//++ Проф-ИТ, #205, Карпов Д. Ю., 04.10.2023  
	проф_СписокID = Новый Соответствие; 
	Для Каждого Cтрока Из МассивID Цикл
		проф_СписокID.Вставить(Cтрока, Объект.Ссылка);
	КонецЦикла;
	ЗначенияЗаполнения.Вставить("проф_СписокID", проф_СписокID);
	//-- Проф-ИТ, #205, Карпов Д. Ю., 04.10.2023
	#КонецВставки

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный", ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("УправлениеФормой")
Процедура проф_УправлениеФормой(ТекущиеДанные)

	УстановитьДоступностьКнопокРемонтныхРабот();
	УстановитьДоступностьКнопокИсполнителей();

	Если Не ТекущиеДанные=Неопределено Тогда
		Найденный = МассивIDЛотов.НайтиПоЗначению(ТекущиеДанные.ID);
		Если Найденный <> Неопределено Тогда
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Истина;
		Иначе
			Элементы.ИсполнителиПоРемонтамЗаполнитьИзЛотов.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#Вставка
	//++ Проф-ИТ, #238, Башинская А.Ю., 29.08.2023 
	Элементы.ГруппаМатЗатратыИЗапчасти.Заголовок = "Плановые мат. затраты и запчасти" + ?(Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти.Количество()=0, "", " (" + Объект.проф_ПлановыеМатериальныеЗатратыИЗапчасти.Количество()+ ")");
	
	//++ Проф-ИТ, #66, Башинская А.Ю., 11.09.2023  
	проф_ОграничитьРедактированияДляУтвержденногоДокумента();
	#КонецВставки

КонецПроцедуры

&НаКлиенте
Процедура проф_ОграничитьРедактированияДляУтвержденногоДокумента()  
//++ Проф-ИТ, #66, Башинская А.Ю., 11.09.2023  

	Если Объект.проф_СтатусСогласования = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден") 
		//++ Проф-ИТ, #379, Корнилов М.С., 07.12.2023
	    И Не проф_ОбщегоНазначенияВызовСервера.ЕстьРоль("проф_ИзменениеСтатусовСогласованияУСметы") Тогда
		//-- Проф-ИТ, #379, Корнилов М.С., 07.12.2023
		// Блокируем всё, кроме трех кнопок  
		Элементы.ДатаИНомер.ТолькоПросмотр = Истина; 
		Элементы.Шапка.ТолькоПросмотр = Истина;
		Элементы.ГруппаСтатусСогласования.ТолькоПросмотр = Истина;
		Элементы.ГруппаРемонтыОборудованияИРемонтныеРаботы.ТолькоПросмотр = Истина; 
		Элементы.ГоризонтальнаяГруппа.ТолькоПросмотр = Истина;
		Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр = Истина;
		Элементы.ГруппаИнструменты.ТолькоПросмотр = Истина;
		Элементы.ГруппаЗапчасти.ТолькоПросмотр = Истина;
		Элементы.ГруппаИсполнители.ТолькоПросмотр = Истина;
		Элементы.ГруппаМерыБезопасности.ТолькоПросмотр = Истина;
		Элементы.МатериальныеЗатраты.ТолькоПросмотр = Истина;
		Элементы.ДокументыЗаказНаВнПотребелениеЗаказНаВнутреннееПотребление.ТолькоПросмотр = Истина;
		Элементы.ДокументыЗаказНаВнПотреблениеЗаказНаВнутреннееПотреблениеДатаОтгрузки.ТолькоПросмотр = Истина;
		Элементы.ДокументыЗаказНаВнПотреблениеЗаказНаВнутреннееПотреблениеСклад.ТолькоПросмотр = Истина;
		Элементы.ДокументыЗаказНаВнПотреблениеОбеспечен.ТолькоПросмотр = Истина;
		Элементы.ГруппаДокументыОснования.ТолькоПросмотр = Истина;
		Элементы.ГруппаДополнительныеРеквизиты.ТолькоПросмотр = Истина;	
		Элементы.КомментарийИОтветственный.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//++ Проф-ИТ, #379, Корнилов М.С., 07.12.2023
	Если Объект.проф_СтатусСогласования = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый") 	
		И Не проф_ОбщегоНазначенияВызовСервера.ЕстьРоль("проф_ИзменениеСтатусовСогласованияУСметы") Тогда
		Элементы.СтатусСогласования.ТолькоПросмотр = Истина;
	КонецЕсли;
	//-- Проф-ИТ, #379, Корнилов М.С., 07.12.2023
	
КонецПроцедуры  

&НаСервере
&ИзменениеИКонтроль("СформироватьМассивНоменклатурыКЗаказуСервере")
Функция проф_СформироватьМассивНоменклатурыКЗаказуСервере(ID)
	
	УжеЗаказаннаяНоменклатура = ПолучитьТаблицуЗаказаннойНоменклатуры(ID);
	
	Если ТипЗнч(ID) = Тип("Массив") Тогда
		НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить();
		ЗапчастиКСписанию = Объект.ЗапчастиРемонта.Выгрузить();
	Иначе
		НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
		ЗапчастиКСписанию = Объект.ЗапчастиРемонта.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	КонецЕсли;	
	#Удаление	
	Для Каждого СтрокаЗапчасти Из ЗапчастиКСписанию Цикл
		СтрокаНоменклатуры = НоменклатураКСписанию.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, СтрокаЗапчасти);
		СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаЗапчасти.Количество;
	КонецЦикла;
	#КонецУдаления
	#Вставка 
	//++ Проф-ИТ, #205, Карпов Д. Ю., 05.10.2023 
	НоменклатураКСписанию.Колонки.Добавить("проф_ПризнакЗапчасти", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаЗапчасти Из ЗапчастиКСписанию Цикл
		СтрокаНоменклатуры = НоменклатураКСписанию.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, СтрокаЗапчасти);
		СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаЗапчасти.Количество;
		СтрокаНоменклатуры.проф_ПризнакЗапчасти = Истина;
	КонецЦикла;
	//-- Проф-ИТ, #205, Карпов Д. Ю., 05.10.2023
	#КонецВставки

	
    #Удаление
	НоменклатураКСписанию.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоЕдиниц");
	#КонецУдаления
	#Вставка 
	//++ Проф-ИТ, #205, Карпов Д. Ю., 22.09.2023                                                                                
	СтрКолонкиГруппировок = "Номенклатура, ХарактеристикаНоменклатуры, ID, РемонтыОборудования_ID, проф_ПризнакЗапчасти"; 
	НоменклатураКСписанию.Свернуть(СтрКолонкиГруппировок, "КоличествоЕдиниц");
	//-- Проф-ИТ, #205, Карпов Д. Ю., 22.09.2023
	#КонецВставки
	Товары = Новый Массив;
	Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	Работа = Перечисления.ТипыНоменклатуры.Работа;
		
	Для каждого Строка Из НоменклатураКСписанию Цикл
		
		Если Строка.Номенклатура.ТипНоменклатуры = Услуга 
			ИЛИ Строка.Номенклатура.ТипНоменклатуры = Работа Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеЗаказаннаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеЗаказаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеЗаказаннаяНоменклатура.Количество() = 0
			ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			#Удаление
			Структура = Новый Структура("Номенклатура, Характеристика, Количество",
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры));
			#КонецУдаления
			#Вставка 
			//++ Проф-ИТ, #205, Карпов Д. Ю., 22.09.2023
			Структура = Новый Структура("Номенклатура, Характеристика, Количество, ID,
										|РемонтыОборудования_ID, проф_ПризнакЗапчасти");
			ЗаполнитьЗначенияСвойств(Структура, Строка);
			Структура.Вставить("Характеристика", Строка.ХарактеристикаНоменклатуры);
			Структура.Вставить("Количество", Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры);			
			//-- Проф-ИТ, #205, Карпов Д. Ю., 22.09.2023
			#КонецВставки

			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции 

&НаКлиенте
&Перед("МатериальныеЗатратыПередНачаломДобавления")
Процедура проф_МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	//++ Проф-ИТ, #205, Карпов Д. Ю., 22.09.2023
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Копирование Тогда 
		ТекСтрокаДереваРемонтныхРабот.проф_ИДСтроки = "";	
	КонецЕсли;
	//++ Проф-ИТ, #205, Карпов Д. Ю., 22.09.2023
КонецПроцедуры   

&НаКлиенте
Процедура проф_МатериальныеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ Проф-ИТ, #205, Карпов Д. Ю., 12.10.2023 
	Если НоваяСтрока И Копирование Тогда
		ТекСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			ТекСтрока.проф_ИДСтроки = "";
		КонецЕсли;	
	КонецЕсли;
	//++ Проф-ИТ, #205, Карпов Д. Ю., 12.10.2023

КонецПроцедуры  

&НаКлиенте
Процедура проф_ЗапчастиРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ Проф-ИТ, #205, Карпов Д. Ю., 12.10.2023 
	Если НоваяСтрока И Копирование Тогда 
		ТекСтрока = Элементы.ЗапчастиРемонта.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			ТекСтрока.проф_ИДСтроки = "";
		КонецЕсли;
	КонецЕсли;
	//++ Проф-ИТ, #205, Карпов Д. Ю., 12.10.2023

КонецПроцедуры

//++ Проф-ИТ, #414, Сергеев Д. С., 10.01.2024 

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура УстановитьУсловноеОформлениеПоСтатусуУтверждения()
	
	Если Не проф_ОбщегоНазначенияВызовСервера.ЕстьРоль("проф_ИзменениеСтатусовСогласованияУСметы") Тогда 
		ТолькоПросмотр = (Объект.проф_СтатусСогласования = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении) 
				Или (Объект.проф_СтатусСогласования = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
	КонецЕсли;
	
КонецПроцедуры // УстановитьУсловноеОформлениеПоСтатусуУтверждения()

&НаСервере
Процедура проф_ПриЧтенииНаСервереПосле(ТекущийОбъект)
	УстановитьУсловноеОформлениеПоСтатусуУтверждения();
КонецПроцедуры

//-- Проф-ИТ, #414, Сергеев Д. С., 10.01.2024

//++ Проф-ИТ, #439, Корнилов М.С., 18.01.2024
Процедура проф_УстановитьУсловноеОформлениеДляТЧ()

	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтаНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтаХарактеристикаНоменклатуры.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтаКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтапроф_Отменено.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтапроф_ПричинаОтмены.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтапроф_Отменил.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтапроф_КЗаказу.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапчастиРемонта.проф_БлокировкаСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнструментыИнструмент.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнструментыЕдиницаИзмерения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнструментыКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Инструменты.проф_БлокировкаСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыЕстьАналоги.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристикаНоменклатуры.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыЕдиницаИзмерения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыпроф_Отменено.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыпроф_ПричинаОтмены.Имя); 
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыпроф_Отменил.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыпроф_КЗаказу.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.проф_БлокировкаСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботРемонтнаяРабота.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботИсполнитель.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРемонтныхРаботДоговорБригада.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.проф_БлокировкаСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияОбъектРемонта.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияВидРемонтныхРабот.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияДатаНачала.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияДатаОкончания.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияОписаниеРемонта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.проф_БлокировкаСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыОснованияДокументОснование.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументыОснования.проф_БлокировкаСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура проф_ПроверкаПередУдалениемСтрокиТЧ(БлокировкаСтроки, Отказ)
	
	Если Не проф_ОбщегоНазначенияВызовСервера.ЕстьРоль("проф_ИзменениеСтатусовСогласованияУСметы")
		И БлокировкаСтроки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя удалять ранее согласованные записи!";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
//-- Проф-ИТ, #439, Корнилов М.С., 18.01.2024

#КонецОбласти