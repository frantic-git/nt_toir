
#Область ОбработчикиСобытий

&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура проф_ОбработкаЗаполнения(Основание)

	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");

	ДокОснование = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);

		Основание.Свойство("ДокументОснование", ДокОснование);

		Если Основание.Свойство("ВидОперации") Тогда
			ВидОперации = Основание.ВидОперации;
		КонецЕсли;

		// Создание из формы объекта ремонта
		Если Основание.Свойство("ОбъектРемонта") Тогда
			НС = ОбъектыРемонта.Добавить();
			НС.ОбъектРемонта = Основание.ОбъектРемонта;
			НС.ДатаОкончания = ТекущаяДата();
			Если Основание.Свойство("СтруктураИерархии") Тогда
				НС.СтруктураИерархии = Основание.СтруктураИерархии;
			Иначе
				НС.СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнаяСтруктураИерархии",
				Истина);
			КонецЕсли;
		КонецЕсли;

	Иначе
		ДокОснование = Основание;
	КонецЕсли;

	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда

		Организация = ДокОснование.Организация;
		Подразделение = ДокОснование.Подразделение;
		ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
		ДокументОснование = ДокОснование;

		Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("СтруктураИерархии") Тогда
			СтруктураИерархии = Основание.СтруктураИерархии;
		Иначе
			СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);
		КонецЕсли;

		#Удаление
		ВидЭксплуатацииПриСозданииНаОсновании = Константы.торо_ВидЭксплуатацииДляВводаНаОснованииВыявленногоДефекта.Получить();		
		#КонецУдаления
		#Вставка
		//++ Проф-ИТ, #326, Соловьев А.А., 01.11.2023
		Если ДокОснование.проф_ЭксплуатацияВозможна = "Да" Тогда 
			ВидЭксплуатацииПриСозданииНаОсновании = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
				"АвтоматическоеСозданиеСостояниеОбъектаРемонта", "ВидЭксплуатацииРегистрацияДефектаБезОстанова");
		Иначе
			ВидЭксплуатацииПриСозданииНаОсновании = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
				"АвтоматическоеСозданиеСостояниеОбъектаРемонта", "ВидЭксплуатацииРегистрацияДефектаСОстановом");
		КонецЕсли;
		//-- Проф-ИТ, #326, Соловьев А.А., 01.11.2023
		
		//++ Проф-ИТ, #326, СоловьевА.А., 01.11.2023
		Если ВидЭксплуатацииПриСозданииНаОсновании = Неопределено Тогда
			ВидЭксплуатацииПриСозданииНаОсновании = ПредопределенноеЗначение("Справочник.торо_ВидыЭксплуатации.ПустаяСсылка");
		КонецЕсли;
		
		ПричинаПростоя = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
			"УАТ", "ПричинаПростояДляВводаНаОснованииВыявленногоДефекта");
		//++ Проф-ИТ, #326, СоловьевА.А., 01.11.2023
		#КонецВставки

		Если ФОИспользоватьОстановочные = Истина Тогда 

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ВыявленныеДефектыСписокДефектов.НомерСтроки КАК НомерСтроки,
			|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
			|	НЕ торо_ВыявленныеДефектыСписокДефектов.ТиповойДефект = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеДефектыОборудования.ПустаяСсылка) КАК ЕстьТиповойДефект,
			|	торо_ВыявленныеДефектыСписокДефектов.ТиповойДефект.ТехнологическаяКарта КАК ИдентификаторТКТиповогоДефекта,
			|	торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Значение КАК ВидРемонтаПриВводеНаОснованииВыявленныхДефектов
			|ПОМЕСТИТЬ втОбъектыРемонта
			|ИЗ
			|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов,
			|	Константа.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов КАК торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов
			|ГДЕ
			|	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_НормативныеРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
			|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК ИдентификаторТК
			|ПОМЕСТИТЬ втНормативныеРемонты
			|ИЗ
			|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыРемонта КАК втОбъектыРемонта
			|		ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = втОбъектыРемонта.ОбъектРемонта
			|			И торо_НормативныеРемонтыОборудования.ВидРемонта = втОбъектыРемонта.ВидРемонтаПриВводеНаОснованииВыявленныхДефектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудованияУдаленные КАК торо_НормативныеРемонтыОборудованияУдаленные
			|		ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта
			|			И торо_НормативныеРемонтыОборудования.ВидРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ВидРемонта
			|			И торо_НормативныеРемонтыОборудования.ТиповойОР = торо_НормативныеРемонтыОборудованияУдаленные.ТиповойОР
			|ГДЕ
			|	торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта ЕСТЬ NULL
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОбъектыРемонта.НомерСтроки КАК НомерСтроки,
			|	втОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
			|	НЕ втНормативныеРемонты.ОбъектРемонта ЕСТЬ NULL КАК ЕстьНормативныйРемонт,
			|	ЕСТЬNULL(втНормативныеРемонты.ИдентификаторТК, ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)) КАК ИдентификаторТКНормативногоРемонта,
			|	втОбъектыРемонта.ЕстьТиповойДефект КАК ЕстьТиповойДефект,
			|	втОбъектыРемонта.ИдентификаторТКТиповогоДефекта КАК ИдентификаторТКТиповогоДефекта,
			|	НЕ торо_ТехнологическаяКартаПриВводеНаОснованииВыявленныхДефектов.Значение = ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка) КАК ЗаполненаТКПриВводеНаОснованииВД,
			|	торо_ТехнологическаяКартаПриВводеНаОснованииВыявленныхДефектов.Значение КАК ИдентификаторТКПриВводеНаОснованииВД
			|ПОМЕСТИТЬ втПредварительныеДанные
			|ИЗ
			|	втОбъектыРемонта КАК втОбъектыРемонта
			|		ЛЕВОЕ СОЕДИНЕНИЕ втНормативныеРемонты КАК втНормативныеРемонты
			|		ПО втОбъектыРемонта.ОбъектРемонта = втНормативныеРемонты.ОбъектРемонта,
			|	Константа.торо_ТехнологическаяКартаПриВводеНаОснованииВыявленныхДефектов КАК торо_ТехнологическаяКартаПриВводеНаОснованииВыявленныхДефектов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
			|	ВЫБОР
			|		КОГДА торо_ВерсииТехКартСрезПоследних.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования
			|			ТОГДА торо_ВерсииТехКартСрезПоследних.ТехКарта.ВидПростоя
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)
			|	КОНЕЦ КАК ВидПростоя
			|ПОМЕСТИТЬ втВерсииТехКарт
			|ИЗ
			|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(
			|			&ДатаОбнаруженияДефекта,
			|			ИдентификаторТехКарты В
			|				(ВЫБРАТЬ
			|					втПредварительныеДанные.ИдентификаторТКНормативногоРемонта КАК ИдентификаторТК
			|				ИЗ
			|					втПредварительныеДанные КАК втПредварительныеДанные
			|			
			|				ОБЪЕДИНИТЬ
			|			
			|				ВЫБРАТЬ
			|					втПредварительныеДанные.ИдентификаторТКТиповогоДефекта
			|				ИЗ
			|					втПредварительныеДанные КАК втПредварительныеДанные
			|			
			|				ОБЪЕДИНИТЬ
			|			
			|				ВЫБРАТЬ
			|					втПредварительныеДанные.ИдентификаторТКПриВводеНаОснованииВД
			|				ИЗ
			|					втПредварительныеДанные КАК втПредварительныеДанные)) КАК торо_ВерсииТехКартСрезПоследних
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ИдентификаторТехКарты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втПредварительныеДанные.ОбъектРемонта КАК ОбъектРемонта,
			|	втПредварительныеДанные.ЕстьНормативныйРемонт КАК ЕстьНормативныйРемонт,
			|	ЕСТЬNULL(ВерсииТехКартНормативныйРемонт.ВидПростоя, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидПростояНормативныйРемонт,
			|	втПредварительныеДанные.ЕстьТиповойДефект КАК ЕстьТиповойДефект,
			|	ЕСТЬNULL(ВерсииТехКартТиповойДефект.ВидПростоя, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидПростояТиповойДефект,
			|	втПредварительныеДанные.ЗаполненаТКПриВводеНаОснованииВД КАК ЗаполненаТКПриВводеНаОснованииВД,
			|	ЕСТЬNULL(ВерсииТехКартТКПриВводеНаОснованииВД.ВидПростоя, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидПростояПриВводеНаОснованииВД
			|ИЗ
			|	втПредварительныеДанные КАК втПредварительныеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВерсииТехКарт КАК ВерсииТехКартНормативныйРемонт
			|		ПО втПредварительныеДанные.ИдентификаторТКНормативногоРемонта = ВерсииТехКартНормативныйРемонт.ИдентификаторТехКарты
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВерсииТехКарт КАК ВерсииТехКартТиповойДефект
			|		ПО втПредварительныеДанные.ИдентификаторТКТиповогоДефекта = ВерсииТехКартТиповойДефект.ИдентификаторТехКарты
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВерсииТехКарт КАК ВерсииТехКартТКПриВводеНаОснованииВД
			|		ПО втПредварительныеДанные.ИдентификаторТКПриВводеНаОснованииВД = ВерсииТехКартТКПриВводеНаОснованииВД.ИдентификаторТехКарты
			|
			|УПОРЯДОЧИТЬ ПО
			|	втПредварительныеДанные.НомерСтроки";						   

			Запрос.УстановитьПараметр("Ссылка", ДокОснование);			
			Запрос.УстановитьПараметр("ДатаОбнаруженияДефекта", ДокОснование.ДатаОбнаружения);

			РезультатЗапроса = Запрос.Выполнить();

			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл

				НоваяСтрока = ОбъектыРемонта.Добавить();
				НоваяСтрока.ОбъектРемонта = Выборка.ОбъектРемонта;
				НоваяСтрока.ДатаОкончания = ДокОснование.ДатаОбнаружения;
				НоваяСтрока.СтруктураИерархии = СтруктураИерархии;

				Если Выборка.ЕстьНормативныйРемонт Тогда
					НоваяСтрока.ВидЭксплуатации = Выборка.ВидПростояНормативныйРемонт;
				ИначеЕсли Выборка.ЕстьТиповойДефект Тогда
					НоваяСтрока.ВидЭксплуатации = Выборка.ВидПростояТиповойДефект;
				ИначеЕсли Выборка.ЗаполненаТКПриВводеНаОснованииВД Тогда 
					НоваяСтрока.ВидЭксплуатации = Выборка.ВидПростояПриВводеНаОснованииВД;
				Иначе
					НоваяСтрока.ВидЭксплуатации = ВидЭксплуатацииПриСозданииНаОсновании;
				КонецЕсли;
				#Вставка
				//++ Проф-ИТ, #326, Соловьев А.А., 19.12.2023
				НоваяСтрока.ПричинаПростоя = ПричинаПростоя;
				//-- Проф-ИТ, #326, Соловьев А.А., 19.12.2023
				#КонецВставки
			КонецЦикла;

		Иначе
			Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("МассивОР") Тогда

				Для Каждого ОР Из Основание.МассивОР Цикл
					НоваяСтрока = ОбъектыРемонта.Добавить();
					НоваяСтрока.ОбъектРемонта = ОР;
					НоваяСтрока.ДатаОкончания = ДокОснование.ДатаОбнаружения;
					НоваяСтрока.ВидЭксплуатации = ВидЭксплуатацииПриСозданииНаОсновании;
					НоваяСтрока.СтруктураИерархии = СтруктураИерархии;
				КонецЦикла;
				
			#Вставка
			//++ Проф-ИТ, #326, СоловьевА.А., 01.11.2023	
			Иначе
				
				ВидЭксплуатации = ВидЭксплуатацииПриСозданииНаОсновании;
				ЗаполнитьТЧОбъектыРемонтаНаОснованииДокументаВыявленныеДефекты(ДокОснование, ВидЭксплуатацииПриСозданииНаОсновании);		
			//-- Проф-ИТ, #326, СоловьевА.А., 01.11.2023	
			#КонецВставки
			КонецЕсли;
		КонецЕсли;

		#Удаление
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		#КонецУдаления 
		#Вставка
		//++ Проф-ИТ, #326, Соловьев А.А., 01.11.2023
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда 
		ЗаполнитьНаОснованииАктаОВыполненииЭтапаРабот(ДокОснование);
		//-- Проф-ИТ, #326, Соловьев А.А., 01.11.2023
		
		//++ Проф-ИТ, #326, СоловьевА.А., 01.11.2023
		// типовой модуль при получении МассиваОР выдает ошибку, нет версии запроса для наряда
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда 
		//-- Проф-ИТ, #326, СоловьевА.А., 01.11.2023
		#КонецВставки
		Организация = ДокОснование.Организация;
		Подразделение = ДокОснование.Подразделение;
		ВидОперации = ?(ЗначениеЗаполнено(ВидОперации), ВидОперации, Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
		ДокументОснование = ДокОснование;

		СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
											"НастройкиТОиР",
											"ОсновнаяСтруктураИерархии",
											Истина);

		Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("МассивОР") Тогда
			МассивОР = ПолучитьСтруктуруОбъектовРемонтаИПростоевИзДокументаОснования(ДокОснование, Основание.МассивОР);
		Иначе
			МассивОР = ПолучитьСтруктуруОбъектовРемонтаИПростоевИзДокументаОснования(ДокОснование);
		КонецЕсли;

		ИспользоватьОстановочныеРемонты = Константы.торо_ИспользоватьОстановочныеРемонты.Получить();

		Если ЗначениеЗаполнено(МассивОР) И МассивОР[0].Свойство("ОбъектРемонта") Тогда
			ПредыдущийОР = МассивОР[0].ОбъектРемонта;
		КонецЕсли;

		МассивСОдинаковымОР = Новый Массив;		
		Для Каждого ТекСтрока Из МассивОР Цикл			
			ТекущийОР = ТекСтрока.ОбъектРемонта;
			Если НЕ ТекущийОР = ПредыдущийОР Тогда
				МассивСОдинаковымОРСОбъединениемЗаписей = ОбработатьПериодыДляМассиваСОдинаковымОР(МассивСОдинаковымОР);
				ЗаполнитьТабЧастьОбъектыРемонта(МассивСОдинаковымОРСОбъединениемЗаписей, СтруктураИерархии, ИспользоватьОстановочныеРемонты);				
				МассивСОдинаковымОР.Очистить();
			КонецЕсли;
			МассивСОдинаковымОР.Добавить(ТекСтрока);
			Если ТекСтрока = МассивОР[МассивОР.ВГраница()] Тогда
				МассивСОдинаковымОРСОбъединениемЗаписей = ОбработатьПериодыДляМассиваСОдинаковымОР(МассивСОдинаковымОР);
				ЗаполнитьТабЧастьОбъектыРемонта(МассивСОдинаковымОРСОбъединениемЗаписей, СтруктураИерархии, ИспользоватьОстановочныеРемонты);				
			КонецЕсли;
			ПредыдущийОР = ТекСтрока.ОбъектРемонта;
		КонецЦикла;
    #Вставка
	//++ Проф-ИТ, #326, СоловьевА.А., 01.11.2023
		ПараметрВидЭксплуатации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
			"УАТ", "ВидЭксплуатацииДляВводаНаОснованииАктОВыполненииЭтапаРабот");
		
		ПричинаПростоя = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
			"УАТ", "ПричинаПростояДляВводаНаОснованииАктОВыполненииЭтапаРабот");
		
		Если ПараметрВидЭксплуатации = Неопределено Тогда
			ПараметрВидЭксплуатации = ПредопределенноеЗначение("Справочник.торо_ВидыЭксплуатации.ПустаяСсылка");
		КонецЕсли;	                                                            
		
		Если ПричинаПростоя = Неопределено Тогда
			ПричинаПростоя = ПредопределенноеЗначение("Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка");
		КонецЕсли;	
		
		ВидЭксплуатации = ПараметрВидЭксплуатации;
		Для Каждого Стр Из ОбъектыРемонта Цикл
			Стр.ВидЭксплуатации = ВидЭксплуатации;
			Стр.ПричинаПростоя = ПричинаПростоя;
		КонецЦикла;				
	
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		ЗаполнитьНаОснованииНарядаНаВыполнениеРемонтныхРабот(ДокОснование);
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		ЗаполнитьНаОснованииЗаявкиНаРемонт(ДокОснование);
	//-- Проф-ИТ, #326, СоловьевА.А., 01.11.2023	
	#КонецВставки
	КонецЕсли;

	торо_ЗаполнениеДокументов.ЗаполнитьСтандартныеРеквизитыШапкиПоУмолчанию(ЭтотОбъект); 
	
	#Вставка
	//++ Проф-ИТ, #237, Карпов.Д.Ю., 15.08.2023,Проверить пересечение дат состояние ОР  
	УстановитьДатыСостоянияОР();
	//++ Проф-ИТ, #237, Карпов.Д.Ю., 15.08.2023,
    #КонецВставки
КонецПроцедуры

&После("ПередЗаписью")
Процедура проф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//++ Проф-ИТ, #401, Соловьев А.А., 11.12.2023
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		проф_ОбщегоНазначенияВызовСервера.ПроверитьПризнакПодразделенияОрганизации(ЭтотОбъект["Подразделение"], Отказ);
	КонецЕсли;
	//-- Проф-ИТ, #401, Соловьев А.А., 11.12.2023
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

//++ Проф-ИТ, #326, СоловьевА.А., 01.11.2023

Процедура ЗаполнитьНаОснованииЗаявкиНаРемонт(ДокОснование) Экспорт
	
	//++ Проф-ИТ, #326, Соловьев А.А., 01.11.2023
	Если ДокОснование.проф_ЭксплуатацияВозможна = "Да" Тогда 
		ПараметрВидЭксплуатации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
			"АвтоматическоеСозданиеСостояниеОбъектаРемонта", "ВидЭксплуатацииРемонтЗапланированБезОстанова");
	Иначе
		ПараметрВидЭксплуатации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
			"АвтоматическоеСозданиеСостояниеОбъектаРемонта", "ВидЭксплуатацииРемонтЗапланированСОстановом");
	КонецЕсли;
	//-- Проф-ИТ, #326, Соловьев А.А., 01.11.2023
	
	ПричинаПростоя = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
		"УАТ", "ПричинаПростояДляВводаНаОснованииЗаявкаНаРемонт");	
	
	Если ПараметрВидЭксплуатации = Неопределено Тогда
		ПараметрВидЭксплуатации = ПредопределенноеЗначение("Справочник.торо_ВидыЭксплуатации.ПустаяСсылка");
	КонецЕсли;
	
	Если ПричинаПростоя = Неопределено Тогда
		ПричинаПростоя = ПредопределенноеЗначение("Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидЭксплуатации", ПараметрВидЭксплуатации);
	Запрос.УстановитьПараметр("ПричинаПростоя", ПричинаПростоя);
	Запрос.Текст = "ВЫБРАТЬ
		|	торо_ЗаявкаНаРемонт.Ссылка КАК ДокументОснование,
		|	торо_ЗаявкаНаРемонт.Организация КАК Организация,
		|	торо_ЗаявкаНаРемонт.Подразделение КАК Подразделение,
		|	ЗНАЧЕНИЕ(Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации) КАК ВидОперации,
		|	&ВидЭксплуатации КАК ВидЭксплуатации
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
		|ГДЕ
		|	торо_ЗаявкаНаРемонт.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		|	&ВидЭксплуатации КАК ВидЭксплуатации,  
		//++ Проф-ИТ, #222, Башинская А.Ю., 09.08.2023, создание док.Состояние ОР на основании 
		|	Минимум(РемонтыОборудования.ДатаНачала) КАК ДатаОкончания, //++ Проф-ИТ, #237, Карпов.Д.Ю., 14.08.2023,Установил ""Минимум""  для поля
		//-- Проф-ИТ, #222, Башинская А.Ю., 09.08.2023	
		|	&ПричинаПростоя КАК ПричинаПростоя,  
		
		|	ПРЕДСТАВЛЕНИЕ(РемонтыОборудования.ОбъектРемонта) КАК ОбъектРемонтаПредставление
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК РемонтыОборудования
		|ГДЕ
		|	РемонтыОборудования.Ссылка = &ДокументОснование
		//++ Проф-ИТ, #237, Карпов.Д.Ю., 14.08.2023, Если в ТЧ заявки используется один ОР в двух строках с одинаковой датой начала
		//											то необходимо чтобы в документе состояния была одна строка
		|Сгруппировать ПО 
		|	РемонтыОборудования.ОбъектРемонта, 
		|	&ВидЭксплуатации,         
		|	&ПричинаПростоя  
		//++ Проф-ИТ, #237, Карпов.Д.Ю., 14.08.2023,
		| ";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = РезультатЗапроса[0].Выбрать();
	ВыборкаОбъектыРемонта = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаШапка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	КонецЕсли;	     
	
	ОбъектыРемонта.Очистить();
	Пока ВыборкаОбъектыРемонта.Следующий() Цикл		
		НСтр = ОбъектыРемонта.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, ВыборкаОбъектыРемонта);
	КонецЦикла;		
	
КонецПроцедуры	

Процедура ЗаполнитьНаОснованииНарядаНаВыполнениеРемонтныхРабот(ДокОснование) Экспорт
			
	ПараметрВидЭксплуатации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
		"УАТ", "ВидЭксплуатацииДляВводаНаОснованииНарядНаВыполнениеРемонтныхРабот");
	
	ПричинаПростоя = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
		"УАТ", "ПричинаПростояДляВводаНаОснованииНарядНаВыполнениеРемонтныхРабот");
		
	Если ПараметрВидЭксплуатации = Неопределено Тогда
		ПараметрВидЭксплуатации = ПредопределенноеЗначение("Справочник.торо_ВидыЭксплуатации.ПустаяСсылка");
	КонецЕсли;	
	
	Если ПричинаПростоя = Неопределено Тогда
		ПричинаПростоя = ПредопределенноеЗначение("Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидЭксплуатации", ПараметрВидЭксплуатации);
	Запрос.УстановитьПараметр("ПричинаПростоя", ПричинаПростоя);
	Запрос.Текст = "ВЫБРАТЬ
       |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка КАК ДокументОснование,
       |	торо_НарядНаВыполнениеРемонтныхРабот.Организация КАК Организация,
       |	торо_НарядНаВыполнениеРемонтныхРабот.Подразделение КАК Подразделение,
       |	ЗНАЧЕНИЕ(Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации) КАК ВидОперации,
       |	&ВидЭксплуатации КАК ВидЭксплуатации
       |ИЗ
       |	Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
       |ГДЕ
       |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка = &ДокументОснование
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
       |	&ВидЭксплуатации КАК ВидЭксплуатации,
	   |	&ПричинаПростоя КАК ПричинаПростоя, 
	   //++ Проф-ИТ, #237, Карпов.Д.Ю., 15.08.2023, исправление ошибки, на основании наряда должна в состоние устанавливаться дата начала
	   |	Минимум(РемонтыОборудования.ДатаНачала) КАК ДатаОкончания, 
	   //++ Проф-ИТ, #237, Карпов.Д.Ю., 15.08.2023,	
	   |	ПРЕДСТАВЛЕНИЕ(РемонтыОборудования.ОбъектРемонта) КАК ОбъектРемонтаПредставление
       |ИЗ
       |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК РемонтыОборудования
       |ГДЕ
       |	РемонтыОборудования.Ссылка = &ДокументОснование
	   //++ Проф-ИТ, #237, Карпов.Д.Ю., 14.08.2023, Если в ТЧ заявки используется один ОР в двух строках с одинаковой датой начала
		//											то необходимо чтобы в документе состояния была одна строка
		|Сгруппировать ПО 
		|	РемонтыОборудования.ОбъектРемонта, 
		|	&ВидЭксплуатации,
		|	ПРЕДСТАВЛЕНИЕ(РемонтыОборудования.ОбъектРемонта),
		|	&ПричинаПростоя  
		//++ Проф-ИТ, #237, Карпов.Д.Ю., 14.08.2023,
		| ";	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = РезультатЗапроса[0].Выбрать();
	ВыборкаОбъектыРемонта = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаШапка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	КонецЕсли;	                                           
	
	Пока ВыборкаОбъектыРемонта.Следующий() Цикл		
		НСтр = ОбъектыРемонта.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, ВыборкаОбъектыРемонта);		
	КонецЦикла;			
	
КонецПроцедуры	

Процедура ЗаполнитьТЧОбъектыРемонтаНаОснованииДокументаВыявленныеДефекты(ДокОснование, ВидЭксплуатацииПриСозданииНаОсновании) Экспорт
	
	ПричинаПростояПриСозданииНаОсновании = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
		"УАТ", "ПричинаПростояДляВводаНаОснованииВыявленногоДефекта");
	
	Если ПричинаПростояПриСозданииНаОсновании = Неопределено Тогда
		ПричинаПростояПриСозданииНаОсновании = ПредопределенноеЗначение("Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидЭксплуатации", ВидЭксплуатацииПриСозданииНаОсновании);
	Запрос.УстановитьПараметр("ПричинаПростоя", ПричинаПростояПриСозданииНаОсновании);
	Запрос.Текст =
	"ВЫБРАТЬ
//++ Проф-ИТ, #221, Горетовская М.С., 26.09.2023 - Автоматическое создание документов состояние ОР на разных этапах жизненного цикла - устранение повторящихся строк
	|	РАЗЛИЧНЫЕ
//-- Проф-ИТ, #221, Горетовская М.С., 26.09.2023 - Автоматическое создание документов состояние ОР на разных этапах жизненного цикла - устранение повторящихся строк
	|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
	|	&ВидЭксплуатации КАК ВидЭксплуатации,
	|	&ПричинаПростоя КАК ПричинаПростоя,
	|	ПРЕДСТАВЛЕНИЕ(торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта) КАК ОбъектРемонтаПредставление,
	|	торо_ВыявленныеДефекты.ДатаОбнаружения КАК ДатаОкончания
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	|		ПО торо_ВыявленныеДефектыСписокДефектов.Ссылка = торо_ВыявленныеДефекты.Ссылка
	|ГДЕ
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка = &ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НСтр = ОбъектыРемонта.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, Выборка);
	КонецЦикла;	
		
КонецПроцедуры	

//-- Проф-ИТ, #326, СоловьевА.А., 01.11.2023

//++ Проф-ИТ, #326, Соловьев А.А., 01.11.2023
Процедура ЗаполнитьНаОснованииАктаОВыполненииЭтапаРабот(ДокОснование)
	
	Если ДокОснование.проф_ЭксплуатацияВозможна = "Да" Тогда 
		ПараметрВидЭксплуатации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
			"АвтоматическоеСозданиеСостояниеОбъектаРемонта", "ВидЭксплуатацииРегистрацияДефектаБезОстанова");
	ИначеЕсли ДокОснование.проф_ЭксплуатацияВозможна = "Нет" Тогда
		ПараметрВидЭксплуатации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
			"АвтоматическоеСозданиеСостояниеОбъектаРемонта", "ВидЭксплуатацииРегистрацияДефектаСОстановом");
	Иначе
		ПараметрВидЭксплуатации = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
			"УАТ", "ВидЭксплуатацииДляВводаНаОснованииАктОВыполненииЭтапаРабот");
	КонецЕсли;
	
	Организация = ДокОснование.Организация;
	Подразделение = ДокОснование.Подразделение;
	ВидОперации = ?(ЗначениеЗаполнено(ВидОперации), ВидОперации, Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
	ДокументОснование = ДокОснование;
	
	СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяСтруктураИерархии",
		Истина);
	
	ПричинаПростоя = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы(
		"УАТ", "ПричинаПростояДляВводаНаОснованииАктОВыполненииЭтапаРабот");
	
	Если ПараметрВидЭксплуатации = Неопределено Тогда
		ПараметрВидЭксплуатации = ПредопределенноеЗначение("Справочник.торо_ВидыЭксплуатации.ПустаяСсылка");
	КонецЕсли;
	
	Если ПричинаПростоя = Неопределено Тогда
		ПричинаПростоя = ПредопределенноеЗначение("Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбъектыРемонта();
	Запрос.УстановитьПараметр("ДатаДокумента", ДокОснование.Дата);
	Запрос.УстановитьПараметр("Ссылка", ДокОснование);
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбъектыРемонта.Загрузить(РезультатЗапроса.Выгрузить());

	Для Каждого Стр Из ОбъектыРемонта Цикл
		Стр.ВидЭксплуатации = ПараметрВидЭксплуатации;
		Стр.ПричинаПростоя = ПричинаПростоя;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаОбъектыРемонта()
	
	ИспользоватьОстановочныеРемонты = Константы.торо_ИспользоватьОстановочныеРемонты.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	|	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
	|	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	|	РемонтыОборудования.ID КАК ID,
	|	РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	|	РемонтныеРаботы.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ИсхДанныеАктРМ
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК РемонтныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
	|		ПО РемонтныеРаботы.РемонтыОборудования_ID = РемонтыОборудования.ID
	|ГДЕ
	|	РемонтыОборудования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	торо_ИсторияПеремещенияМеждуФМ.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ИсторияПеремещенияМеждуФМ.ФункциональноеМесто КАК ФункциональноеМесто
	|ПОМЕСТИТЬ торо_ИсторияПеремещенияМеждуФМ
	|ИЗ 
	|	РегистрСведений.торо_ИсторияПеремещенияОборудованияМеждуФМ.СрезПоследних КАК торо_ИсторияПеремещенияМеждуФМ
	|ГДЕ
	|	торо_ИсторияПеремещенияМеждуФМ.Событие = ЗНАЧЕНИЕ(Перечисление.торо_СобытияОборудованияНаФМ.Установка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	|	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
	|	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	|	РемонтыОборудования.ID КАК ID,
	|	РемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	|	РемонтныеРаботы.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ИсхДанныеПодготовка
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК РемонтыОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК РемонтныеРаботы
	|		ПО (РемонтныеРаботы.РемонтыОборудования_ID = РемонтыОборудования.ID)
	|			И (РемонтныеРаботы.Ссылка = РемонтыОборудования.Ссылка)
	|ГДЕ
	|	РемонтыОборудования.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РемонтыОборудования.ОбъектРемонта,
	|	РемонтыОборудования.ДатаНачала,
	|	РемонтыОборудования.ДатаОкончания,
	|	РемонтыОборудования.ID,
	|	РемонтныеРаботы.РемонтнаяРабота,
	|	РемонтныеРаботы.Родитель_ID
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК РемонтныеРаботы
	|		ПО РемонтыОборудования.ID = РемонтныеРаботы.РемонтыОборудования_ID
	|			И РемонтыОборудования.Ссылка = РемонтныеРаботы.Ссылка
	|ГДЕ
	|	РемонтыОборудования.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсхДанныеАктРМ.ОбъектРемонта,
	|	ИсхДанныеАктРМ.ДатаНачала,
	|	ИсхДанныеАктРМ.ДатаОкончания,
	|	ИсхДанныеАктРМ.ID,
	|	ИсхДанныеАктРМ.РемонтнаяРабота,
	|	ИсхДанныеАктРМ.Родитель_ID
	|ИЗ
	|	ИсхДанныеАктРМ КАК ИсхДанныеАктРМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ИсторияПеремещенияМеждуФМ.ОбъектРемонта,
	|	ИсхДанныеАктРМ.ДатаНачала,
	|	ИсхДанныеАктРМ.ДатаОкончания,
	|	ИсхДанныеАктРМ.ID,
	|	ИсхДанныеАктРМ.РемонтнаяРабота,
	|	ИсхДанныеАктРМ.Родитель_ID
	|ИЗ
	|	ИсхДанныеАктРМ КАК ИсхДанныеАктРМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ торо_ИсторияПеремещенияМеждуФМ КАК торо_ИсторияПеремещенияМеждуФМ
	|		ПО ИсхДанныеАктРМ.ОбъектРемонта = торо_ИсторияПеремещенияМеждуФМ.ФункциональноеМесто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтнаяРабота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(торо_ВыявленныеДефекты.ОбъектРемонта, ИсхДанныеПодготовка.ОбъектРемонта) КАК ОбъектРемонта,
	|	ИсхДанныеПодготовка.ДатаНачала КАК ДатаНачала,
	|	ИсхДанныеПодготовка.ДатаОкончания КАК ДатаОкончания,
	|	ИсхДанныеПодготовка.ID КАК ID,
	|	ИсхДанныеПодготовка.РемонтнаяРабота КАК РемонтнаяРабота,
	|	ИсхДанныеПодготовка.Родитель_ID КАК Родитель_ID,
	|	РемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	|ПОМЕСТИТЬ ИсхДанные
	|ИЗ
	|	ИсхДанныеПодготовка КАК ИсхДанныеПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	|		ПО ИсхДанныеПодготовка.ID = торо_ВыявленныеДефекты.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
	|		ПО ИсхДанныеПодготовка.ID = РемонтыОборудования.ID
	|ГДЕ
	|	РемонтыОборудования.Ссылка = &Ссылка";
	
	Если ИспользоватьОстановочныеРемонты = Истина Тогда
		
		ТекстЗапроса = ТекстЗапроса + ";"+
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
		|	ИсхДанные.ДатаНачала КАК ДатаНачала,
		|	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
		|	ИсхДанные.ID КАК ID,
		|	ИсхДанные.ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ПОМЕСТИТЬ ИсхДанныеСвернуто
		|ИЗ
		|	ИсхДанные КАК ИсхДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
		|	торо_ВерсииТехКартСрезПоследних.ТехКарта КАК ТехКарта
		|ПОМЕСТИТЬ торо_ВерсииТехКартСрезПоследних
		|ИЗ
		|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаДокумента, ) КАК торо_ВерсииТехКартСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1 
		|	МИНИМУМ(торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.НомерСтроки) КАК НомерСтроки,
		|	МАКСИМУМ(торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота) КАК РемонтнаяРабота,
		|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	ЕСТЬNULL(торо_ВерсииТехКартСрезПоследних.ТехКарта, ЗНАЧЕНИЕ(Справочник.торо_ТехКарты.ПустаяСсылка)) КАК ТехКарта
		|ПОМЕСТИТЬ ВТ_ВерхниеТК
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_ВерсииТехКартСрезПоследних КАК торо_ВерсииТехКартСрезПоследних
		|		ПО торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
		|ГДЕ
		|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Ссылка = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота) = ТИП(Справочник.торо_ИдентификаторыТехКарт)
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID,
		|	ЕСТЬNULL(торо_ВерсииТехКартСрезПоследних.ТехКарта, ЗНАЧЕНИЕ(Справочник.торо_ТехКарты.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РемонтыОборудования_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсхДанныеСвернуто.ВидРемонтныхРабот КАК ВидРемонта,
		|	ИсхДанныеСвернуто.ОбъектРемонта КАК ОбъектРемонта,
		|	ЕСТЬNULL(торо_НормативныеРемонтыОборудования.НормативныйРемонт, ВТ_ВерхниеТК.РемонтнаяРабота) КАК НормативныйРемонт,
		|	ЕСТЬNULL(торо_ВерсииТехКартСрезПоследних.ТехКарта, ВТ_ВерхниеТК.ТехКарта) КАК ТехКарта,
		|	ИсхДанныеСвернуто.ID КАК ID
		|ПОМЕСТИТЬ НормативнаяТК
		|ИЗ
		|	ИсхДанныеСвернуто КАК ИсхДанныеСвернуто
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|			ЛЕВОЕ СОЕДИНЕНИЕ торо_ВерсииТехКартСрезПоследних КАК торо_ВерсииТехКартСрезПоследних
		|			ПО торо_НормативныеРемонтыОборудования.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
		|		ПО ИсхДанныеСвернуто.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
		|			И ИсхДанныеСвернуто.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВерхниеТК КАК ВТ_ВерхниеТК
		|		ПО ИсхДанныеСвернуто.ID = ВТ_ВерхниеТК.РемонтыОборудования_ID
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта,
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
		|	ИсхДанные.ДатаНачала КАК ДатаНачала,
		|	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
		|	ИсхДанные.ID КАК ID,
		|	ВЫБОР
		|		КОГДА НЕ НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования ЕСТЬ NULL
		|				И НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования = ИСТИНА
		|				И ИсхДанные.ВидРемонтныхРабот = НормативнаяТК.ВидРемонта
		|			ТОГДА НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ТребуетОстанова,
		|	ВЫБОР
		|		КОГДА НЕ НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования ЕСТЬ NULL
		|				И НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования = ИСТИНА
		|				И ИсхДанные.ВидРемонтныхРабот = НормативнаяТК.ВидРемонта
		|			ТОГДА НормативнаяТК.ТехКарта.ВремяПростоя
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВремяПростоя,
		|	ВЫБОР
		|		КОГДА НЕ НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования ЕСТЬ NULL
		|				И НормативнаяТК.ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования = ИСТИНА
		|				И ИсхДанные.ВидРемонтныхРабот = НормативнаяТК.ВидРемонта
		|			ТОГДА НормативнаяТК.ТехКарта.ВидПростоя
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидПростоя
		|ПОМЕСТИТЬ ФинДанные
		|ИЗ
		|	ИсхДанныеСвернуто КАК ИсхДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ НормативнаяТК КАК НормативнаяТК
		|		ПО (НормативнаяТК.ID = ИсхДанные.ID)
		|			И (НормативнаяТК.ОбъектРемонта = ИсхДанные.ОбъектРемонта)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФинДанные.ОбъектРемонта КАК ОбъектРемонта,
		|	ФинДанные.ДатаНачала КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ФинДанные.ТребуетОстанова = ИСТИНА
		|			ТОГДА ДОБАВИТЬКДАТЕ(ФинДанные.ДатаНачала, СЕКУНДА, ФинДанные.ВремяПростоя)
		|		ИНАЧЕ ФинДанные.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	ФинДанные.ВидПростоя КАК ВидПростоя
		|ПОМЕСТИТЬ ВТ_Выгрузка
		|ИЗ
		|	ФинДанные КАК ФинДанные"; 
	Иначе
		ТекстЗапроса = ТекстЗапроса + ";" + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсхДанные.ОбъектРемонта КАК ОбъектРемонта,
		|	ИсхДанные.ДатаНачала КАК ДатаНачала,
		|	ИсхДанные.ДатаОкончания КАК ДатаОкончания,
		|	ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка) КАК ВидПростоя
		|ПОМЕСТИТЬ ВТ_Выгрузка
		|ИЗ
		|	ИсхДанные КАК ИсхДанные";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования") Тогда
		ТекстЗапроса = ТекстЗапроса + ";" + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР КАК СтатусОР,
		|	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта
		|ПОМЕСТИТЬ торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
		|ИЗ 
		|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Выгрузка.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_Выгрузка.ДатаНачала КАК ДатаНачала,
		|	ВТ_Выгрузка.ДатаОкончания КАК ДатаОкончания,
		|	ВТ_Выгрузка.ВидПростоя КАК ВидПростоя,
		|	ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету)) КАК СтатусОР
		|ПОМЕСТИТЬ ВТ_СтатусыОР
		|ИЗ
		|	ВТ_Выгрузка КАК ВТ_Выгрузка
		|		ЛЕВОЕ СОЕДИНЕНИЕ торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
		|		ПО ВТ_Выгрузка.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтатусыОР.ОбъектРемонта КАК ОбъектРемонта,
		|	МИНИМУМ(ВТ_СтатусыОР.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ВТ_СтатусыОР.ДатаОкончания) КАК ДатаОкончания,
		|	ВТ_СтатусыОР.ВидПростоя КАК ВидПростоя
		|ИЗ
		|	ВТ_СтатусыОР КАК ВТ_СтатусыОР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
		|		ПО ВТ_СтатусыОР.СтатусОР = торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
		|ГДЕ
		|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтатусыОР.ОбъектРемонта,
		|	ВТ_СтатусыОР.ВидПростоя
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_СтатусыОР.ОбъектРемонта";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ";" + 
		"ВЫБРАТЬ
		|	ВТ_Выгрузка.ОбъектРемонта КАК ОбъектРемонта,
		|	МИНИМУМ(ВТ_Выгрузка.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ВТ_Выгрузка.ДатаОкончания) КАК ДатаОкончания,
		|	ВТ_Выгрузка.ВидПростоя КАК ВидПростоя
		|ИЗ
		|	ВТ_Выгрузка КАК ВТ_Выгрузка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Выгрузка.ОбъектРемонта,
		|	ВТ_Выгрузка.ВидПростоя
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Выгрузка.ОбъектРемонта";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- Проф-ИТ, #326, Соловьев А.А., 01.11.2023

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&ИзменениеИКонтроль("ИзменитьДвиженияРегистратора_ВремяНахожденияВСостоянииПоДням")
Процедура проф_ИзменитьДвиженияРегистратора_ВремяНахожденияВСостоянииПоДням(Регистратор, Выборка)

	ИзмененияБыли = Ложь;

	МассивЗаписейКУдалению = Новый Массив;

	НаборЗаписейРегистратора = РегистрыНакопления.торо_ВремяНахожденияВСостоянииПоДатам.СоздатьНаборЗаписей();
	НаборЗаписейРегистратора.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписейРегистратора.Прочитать();

	ТаблицаНабораЗаписей = НаборЗаписейРегистратора.Выгрузить();
	ТаблицаНабораЗаписей.Индексы.Добавить("ОбъектРемонта, Период");

	СтруктураПоиска = Новый Структура("ОбъектРемонта, Период");

	Пока Выборка.Следующий() Цикл 

		Если Выборка.Обработка = "Удалить" Тогда

			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);

			НайденныеСтроки = ТаблицаНабораЗаписей.НайтиСтроки(СтруктураПоиска);
			Для Каждого Запись из НайденныеСтроки Цикл
				МассивЗаписейКУдалению.Добавить(Запись);	
			КонецЦикла; 

		ИначеЕсли Выборка.Обработка = "Добавить" Тогда

			Запись = ТаблицаНабораЗаписей.Добавить(); 
			Запись.Активность = Истина;

			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЕсли; 

		ИзмененияБыли = Истина;
	КонецЦикла;

	#Удаление
	Для каждого ЗаписьКУдалению из МассивЗаписейКУдалению Цикл		
		ТаблицаНабораЗаписей.Удалить(ЗаписьКУдалению);
	КонецЦикла;
	#КонецУдаления
	#Вставка   
	//++ Проф-ИТ, #245, Башинская А.Ю., 08.09.2023
	// В некоторых случаях дублирует записи к удалению,
	// вероятно ошибка в типовом запросе формирования записей по дням  
	// Поэтому удаляем через соответствие
	МэпКУдалению = Новый Соответствие;
	Для Каждого Элемент Из МассивЗаписейКУдалению Цикл
		МэпКУдалению.Вставить(Элемент, Элемент);
	КонецЦикла;	                                
	
	Для Каждого ЗаписьКУдалению Из МэпКУдалению Цикл		
		ТаблицаНабораЗаписей.Удалить(ЗаписьКУдалению.Значение);		
	КонецЦикла;		
	//-- Проф-ИТ, #245, Башинская А.Ю., 08.09.2023
	#КонецВставки
	
	Если ИзмененияБыли Тогда  
		НаборЗаписейРегистратора.Загрузить(ТаблицаНабораЗаписей);
		НаборЗаписейРегистратора.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

//++ Проф-ИТ, #237, Карпов.Д.Ю., 15.08.2023

Процедура УстановитьДатыСостоянияОР()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
			|	торо_ТекущееСостояниеОР.ОбъектРемонта КАК ОбъектРемонта,
			|	торо_ТекущееСостояниеОР.Период КАК Период
			|ИЗ
			|	РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
			|ГДЕ
			|	торо_ТекущееСостояниеОР.ОбъектРемонта В (&ОбъектРемонта)
			|	И торо_ТекущееСостояниеОР.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектыРемонта.ВыгрузитьКолонку("ОбъектРемонта"));
	Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(ДобавитьМесяц(ЭтотОбъект.Дата,-1))); 
	Запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(ДобавитьМесяц(ЭтотОбъект.Дата,1))); 
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		ТаблицаРезультат = Результат.Выгрузить();
		Для каждого строка из ОбъектыРемонта Цикл 
			Строка.ДатаОкончания = ПодобратьПериодДляОР(ТаблицаРезультат,строка.ОбъектРемонта,Строка.ДатаОкончания);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

Функция ПодобратьПериодДляОР(ТаблицаПоиска,ОР,Период)

	Структура = Новый Структура();
	Структура.Вставить("ОбъектРемонта",ОР);
	Структура.Вставить("Период",Период);
	РезультатПоиска = ТаблицаПоиска.НайтиСтроки(Структура);
	Если РезультатПоиска.Количество()>0 Тогда 
		Возврат ПодобратьПериодДляОР(ТаблицаПоиска,ОР,Период+1)
	Иначе 
		Возврат Период; 
	КонецЕсли;
КонецФункции

//-- Проф-ИТ, #237, Карпов.Д.Ю., 15.08.2023

#КонецОбласти

