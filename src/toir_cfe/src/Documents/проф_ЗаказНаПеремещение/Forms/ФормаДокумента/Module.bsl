
// ++ Проф-ИТ, #72, Соловьев А.А, 05.10.2023

#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//++ Проф-ИТ, #379, Корнилов М.С., 07.12.2023
	Если Не проф_ОбщегоНазначенияВызовСервера.ЕстьРоль("проф_ИзменениеСтатусовСогласованияУЗаказаНаПеремещение") Тогда
		Если Объект.СтатусСогласованияЗаказа = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый Тогда
			Элементы.СтатусСогласованияЗаказа.ТолькоПросмотр = Истина;
		Иначе	
			ТолькоПросмотр = (Объект.СтатусСогласованияЗаказа = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении) 
				Или (Объект.СтатусСогласованияЗаказа = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
		КонецЕсли;
	КонецЕсли;
	//-- Проф-ИТ, #379, Корнилов М.С., 07.12.2023
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ПодразделенияСлужбыТОИР = Справочники.проф_НастройкиСистемы.ПолучитьСпЗначНастройкиСистемы(
												"Подразделения", "ПодразделенияСлужбыТОИР");
	УстановитьУсловноеОформление();
	
	Элементы.Переместить(Элементы.Форматоро_Перейти, Элементы.ФормаКоманднаяПанель, Элементы.ФормаЗапроситьПеремещение);
	
	//++ Проф-ИТ, #401, Соловьев А.А., 11.12.2023
	проф_ОбщегоНазначенияВызовСервера.УстановитьПараметрВыбораПодразделения(Элементы);
	//-- Проф-ИТ, #401, Соловьев А.А., 11.12.2023
	
	//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
	СтатусДоступностиОтмены = (Объект.СтатусСогласованияЗаказа = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый)
			Или (Объект.СтатусСогласованияЗаказа = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Отклонен);
	
	Элементы.ТоварыОтменено.ТолькоПросмотр = Не СтатусДоступностиОтмены;
	Элементы.ТоварыПричинаОтмены.ТолькоПросмотр = Не СтатусДоступностиОтмены;
	//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение); 
	КонецЕсли;
	
КонецПроцедуры

//++ Проф-ИТ, #349, Соловьев А.А., 15.11.2023
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Отказ
		И Не ВопросЗадан
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ЗадатьВопросСкладСтатусСогласования(Объект.СкладОтправитель, Объект.СтатусСогласованияЗаказа) Тогда 
		
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемОбработчикОповещения", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Документ находится в статусе ""Новый"". Изменить на ""Утвержден""?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВопросЗадан = Ложь;
	КонецЕсли;
	
КонецПроцедуры
//-- Проф-ИТ, #349, Соловьев А.А., 15.11.2023
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
&НаКлиенте
Процедура СтатусСогласованияЗаказаПриИзменении(Элемент)
	
	СтатусДоступностиОтмены = (Объект.СтатусСогласованияЗаказа = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый"))
			Или (Объект.СтатусСогласованияЗаказа = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Отклонен"));
	
	Элементы.ТоварыОтменено.ТолькоПросмотр = Не СтатусДоступностиОтмены;
	Элементы.ТоварыПричинаОтмены.ТолькоПросмотр = Не СтатусДоступностиОтмены;
	
КонецПроцедуры
//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьНазначения(Команда)
	
	ЗаполнитьДоступностьНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступность(Команда)

	 ЗаполнитьДоступностьНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Поле ""Склад отправитель"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.СкладОтправитель");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад", Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ВидимостьСерий", Истина);

	МассивТиповНоменклатуры = ПолучитьМассивТиповНоменклатуры();
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);

	ПараметрыНоменклатураПриИзмененииПереопределяемый = Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
																		 ЭтаФорма.ИмяФормы, "Товары");

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",
								 ПараметрыНоменклатураПриИзмененииПереопределяемый);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СерииИспользуются = ПолучитьСерииИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.Серия = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивТиповНоменклатуры = ПолучитьМассивТиповНоменклатуры();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(МассивТиповНоменклатуры)); 
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",
				 ПараметрыФормы, Элемент, , , , ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ПараметрыХарактеристикаПриИзмененииПереопределяемый = Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
																			 ЭтаФорма.ИмяФормы, "Товары");
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый",
								 ПараметрыХарактеристикаПриИзмененииПереопределяемый);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные =  Элементы.Товары.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
											ТекДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыВидНоменклатуры = Новый Структура("ВидНоменклатуры", ВидНоменклатуры);
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыВидНоменклатуры);
		ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
										ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
									ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
	И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
										ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
															ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.Товары.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено
	И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ТекВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
											ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", ТекВидНоменклатуры);
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОкончаниеВводаТекста(Элемент,
												   Текст,
												   ДанныеВыбора,
												   ПараметрыПолученияДанных,
												   СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
										ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
													ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение(
				"Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаАвтоПодбор(Элемент,
										 Текст,
										 ДанныеВыбора,
										 ПараметрыПолученияДанных,
										 Ожидание,
										 СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатуры = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
										ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ИспользованиеХарактеристик = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
													ВидНоменклатуры, "ИспользованиеХарактеристик");
		ПараметрыПолученияДанных.Отбор.Очистить();
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение(
				"Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры") Тогда
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ВидНоменклатуры);
		Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Номенклатура);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.проф_Отменил = ТекущиеДанныеОтменил(ТекущиеДанные.Отменено);
	
КонецПроцедуры
//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

//++ Проф-ИТ, #370, Соловьев А.А., 28.11.2023
// СтандартныеПодсистемы.Печать 
&НаКлиенте 
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда) 
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект); 
КонецПроцедуры 
// Конец СтандартныеПодсистемы.Печать 
//-- Проф-ИТ, #370, Соловьев А.А., 28.11.2023

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСерииИспользуются(Знач Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	               |ГДЕ
	               |	Номенклатура.Ссылка = &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИспользоватьСерии;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивТиповНоменклатуры()
	
	МассивТиповНоменклатуры = Новый Массив();
	Для Каждого текСтрока Из Перечисления.ТипыНоменклатуры Цикл
		Если текСтрока = Перечисления.ТипыНоменклатуры.Услуга
		ИЛИ текСтрока = Перечисления.ТипыНоменклатуры.Работа Тогда
			Продолжить;
		КонецЕсли;
		МассивТиповНоменклатуры.Добавить(текСтрока);
	КонецЦикла;
	
	Возврат МассивТиповНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	СтрЭлементОтбораКомпоновкиДанных = "ЭлементОтбораКомпоновкиДанных";
	СтрЦветТекста = "ЦветТекста";

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип(СтрЭлементОтбораКомпоновкиДанных));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип(СтрЭлементОтбораКомпоновкиДанных));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра(СтрЦветТекста, ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип(СтрЭлементОтбораКомпоновкиДанных));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра(СтрЦветТекста, ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// Оформление поля Серия	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип(СтрЭлементОтбораКомпоновкиДанных));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(СтрЦветТекста, WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	СтрНоменклатура = "Номенклатура";
	
	ПараметрыЗаполнитьПризнакХарактеристикиИспользуются = Новый Структура(СтрНоменклатура, "ХарактеристикиИспользуются");	
	ПараметрыЗаполнитьПризнакТипНоменклатуры = Новый Структура(СтрНоменклатура, "ТипНоменклатуры");
	ПараметрыЗаполнитьПризнакАртикул = Новый Структура(СтрНоменклатура, "Артикул");
	ПараметрыЗаполнитьПризнакСерииИспользуются = Новый Структура(СтрНоменклатура, "СерииИспользуются");
	
	СтруктураДействий = Новый Структура;                                  	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								 ПараметрыЗаполнитьПризнакХарактеристикиИспользуются);	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", ПараметрыЗаполнитьПризнакТипНоменклатуры);	
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", ПараметрыЗаполнитьПризнакАртикул);	
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", ПараметрыЗаполнитьПризнакСерииИспользуются);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступностьНаСервере(ПоОтклоненным)

	Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда 
		ТекстСообщения = НСтр("ru = 'Поле ""Склад-отправитель"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СкладОтправитель");
	Иначе
		Документы.проф_ЗаказНаПеремещение.ПерезаполнитьДоступностьИНазначения(Объект.Товары, ПоОтклоненным, 
			Объект.СкладОтправитель, Объект.Дата, ПодразделенияСлужбыТОИР);
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьПеремещение(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РезультатИзДругойФормы", ЭтотОбъект);	
	АдресТовары = ПоместитьТоварыВХранилище();
	ПараметрыФормы = Новый Структура("АдресТовары", АдресТовары);
	ОткрытьФорму("Обработка.проф_ЗапроситьПеремещениеУДругогоПодразделения.Форма.Форма",
		ПараметрыФормы, ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	ТаблицаТовары = Объект.Товары.Выгрузить(, "НомерСтроки, Номенклатура, Характеристика, Количество");
	ТаблицаТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникССылка.Склады"));
	ТаблицаТовары.Очистить();
	Для Каждого ТекСтрока Из Объект.Товары Цикл  
		Если ТекСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.Отклонен
			ИЛИ ТекСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.Ошибка	
			ИЛИ Не ЗначениеЗаполнено(ТекСтрока.СогласованиеКорректировки) Тогда
			
			новСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(новСтрока, ТекСтрока); 
			новСтрока.Склад       = Объект.СкладОтправитель; 
			
		КонецЕсли;
	КонецЦикла;    
	
	СтруктураТовары = Новый Структура("ТаблицаТовары, ДокументДляСогласования", ТаблицаТовары, Объект.Ссылка);
	Возврат ПоместитьВоВременноеХранилище(СтруктураТовары, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура РезультатИзДругойФормы(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = Неопределено Тогда
		
		//ЗаполнитьИОтправитьНаСогласование(Результат);
		
		ЗаполнитьНазначенияИзОбработки(Результат);
		//ОтправитьНаСогласованиеНаСервере();
		Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИОтправитьНаСогласование(Результат)
	
	НачатьТранзакцию();
	Попытка
		ЗаполнитьНазначенияИзОбработки(Результат);
		ОтправитьНаСогласованиеНаСервере();
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		//ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	Для Каждого ТекущаяСтрока Из ТаблицаПодбора Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия", 
			ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ТекущаяСтрока.Серия);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + ТекущаяСтрока.КоличествоУпаковок;
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	Если ТаблицаПодбора.Количество() > 0 Тогда 
		ЗаполнитьДоступностьНаСервере(Ложь);
	КонецЕсли;	
	
КонецПроцедуры  

&НаСервере 
Процедура ЗаполнитьНазначенияИзОбработки(Адрес)
	
	Если Адрес = Неопределено Тогда  
		Возврат;
	КонецЕсли;  
	
	СтруктураТовары = ПолучитьИзВременногоХранилища(Адрес);
	Товары.Загрузить(СтруктураТовары.Товары); 
	
	ТекДата = ТекущаяДата(); 
	
	
	
	Для каждого текСтрока Из Объект.Товары Цикл 
		КолИсходное                  = текСтрока.Количество;
		ДоступноИсходное             = текСтрока.Доступно; 
		СогласованиеКорректировкиИсх = текСтрока.СогласованиеКорректировки;
		СтруктураПоиска = Новый Структура("НомерСтрокиИсточника", текСтрока.НомерСтроки);
		
		НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;	
		КонецЕсли;     
		
		КолПодбора = 0; 
		Итерация = 1;
		Для каждого текСтрокаПодбора Из НайденныеСтроки Цикл
			Если текСтрокаПодбора.Количество = 0 Тогда
				Продолжить;		
			КонецЕсли;
			
			Если Итерация = 1 Тогда
				текСтрока.Количество         = текСтрокаПодбора.Количество; 
				текСтрока.КоличествоУпаковок = текСтрокаПодбора.Количество;
				текСтрока.НазначениеИсходное = текСтрокаПодбора.Назначение;
				текСтрока.Доступно           = текСтрокаПодбора.Количество;
				текСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.ОбменСERP;
			Иначе
				новСтрока = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(новСтрока, текСтрока, , "КодСтроки");
				
				новСтрока.Количество         = текСтрокаПодбора.Количество;
				новСтрока.КоличествоУпаковок = текСтрокаПодбора.Количество;
				новСтрока.НазначениеИсходное = текСтрокаПодбора.Назначение;
				новСтрока.Доступно           = текСтрокаПодбора.Количество;
				новСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.ОбменСERP;
			КонецЕсли;
			
			ЕДИзм = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текСтрокаПодбора.Номенклатура, "ЕдиницаИзмерения"); 
			ТекстКомментария = НСтр("ru = '""Снятие резерва по %1, %2 %3, %4, %5.""'");
			ТекстКомментария = СтрШаблон(ТекстКомментария, текСтрокаПодбора.Номенклатура, текСтрокаПодбора.Количество,
			                             ЕДИзм, текСтрокаПодбора.Назначение, ТекДата);
			Объект.Комментарий = Объект.Комментарий + Символы.ПС + ТекстКомментария; 
			
			КолИсходное = КолИсходное - текСтрокаПодбора.Количество;
			КолПодбора  = КолПодбора + текСтрокаПодбора.Количество;  
			Итерация = Итерация + 1; 
			Модифицированность = Истина;
		КонецЦикла;
		
		Если КолИсходное > 0 
			И КолПодбора > 0 Тогда 
			новСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(новСтрока, текСтрока, , "КодСтроки");
			
			новСтрока.Количество         = КолИсходное; 
			новСтрока.КоличествоУпаковок = КолИсходное;
			новСтрока.НазначениеИсходное = Неопределено;
			новСтрока.Доступно           = 0; 
			//новСтрока.СогласованиеКорректировки = СогласованиеКорректировкиИсх;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаСогласование()  
	
	ПолучитьТаблицуОстаков();
	
	НаименованиеШаблона = "Согласование изменения заказа";
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ЕстьОшибки Тогда
		СтрокиИтог = ДеревоТовары.ПолучитьЭлементы();
		Для каждого СтрИтог Из СтрокиИтог Цикл
			
			СтрокиОстаткиНом = СтрИтог.ПолучитьЭлементы();
			Для каждого СтрОстаткиНом Из СтрокиОстаткиНом Цикл
				
				Если СтрОстаткиНом.Количество = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокиОстаткиПодр = СтрОстаткиНом.ПолучитьЭлементы();
				Для каждого СтрОстаткиПодр Из СтрокиОстаткиПодр Цикл
					ТекстОписанияИтог = "";
					
					СтрокиИДЗаказа = СтрОстаткиПодр.ПолучитьЭлементы();
					Для каждого СтрИДЗаказа Из СтрокиИДЗаказа Цикл
						
						
						СтрокиОстатки = СтрИДЗаказа.ПолучитьЭлементы();
						Для каждого СтрОстатки Из СтрокиОстатки Цикл
							
							
							ТекстОписания = Нстр("ru = 'Согласовать снятие резерва: %1 - %2 - %3 %4 для назначения: %5'");
							ТекЕИ = ПолучитьЕдиницуИзмерения(СтрОстатки.Номенклатура);
							ТекстОписания = СтрШаблон(ТекстОписания, Символы.ПС, СтрОстатки.Номенклатура, СтрОстатки.Количество, ТекЕИ, СтрОстатки.Назначение);
							
							ТекстОписанияИтог = ?(ТекстОписанияИтог = "", ТекстОписания, ТекстОписанияИтог + Символы.ПС + ТекстОписания);
						КонецЦикла;
						
						ПредметID = "";
						Если ЗначениеЗаполнено(СтрИДЗаказа.ИДЗаказа) Тогда			
							//ПредметID = Строка(ДокументДляСогласования.УникальныйИдентификатор());
							ПредметID = СтрИДЗаказа.ИДЗаказа;
						КонецЕсли;
						
						ПараметрыФормы = Новый Структура;
						
						ПредметБизнесПроцесса = Новый Структура;
						ПредметБизнесПроцесса.Вставить("ID", ПредметID); //ПредметID
						ПредметБизнесПроцесса.Вставить("type", "DMInternalDocument");     
						
						name = ПолучитьОписаниеПредметаСогласования(Объект.Ссылка);
						
						ПредметБизнесПроцесса.Вставить("name", name); 
						
						Если ЗначениеЗаполнено(ПредметID) Тогда
							ПараметрыФормы.Вставить("Предмет", ПредметБизнесПроцесса);
						КонецЕсли;  
						
						ПараметрыФормы.Вставить("Описание", ТекстОписанияИтог);
						
						ШаблонБизнесПроцесса = Новый Структура;
						ШаблонБизнесПроцесса.Вставить("ID", "32fccb2e-ac94-11ed-bca8-3cecef0dcbf1");
						ШаблонБизнесПроцесса.Вставить("type", "DMBusinessProcessApprovalTemplate");
						ПараметрыФормы.Вставить("Шаблон", ШаблонБизнесПроцесса);
						
						ТипПроцесса = "DMBusinessProcessApproval"; 
						
						ПараметрыОтбора = Новый Структура("Номенклатура, НазначениеИсходное", СтрОстатки.Номенклатура, СтрОстатки.Назначение); 
						НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
						
						Попытка
							Если ЗаполнитьСтартоватьПроцесс(ТипПроцесса, ПараметрыФормы) Тогда
								
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Стартован бизнес-процесс по шаблону ""%1"".';
								|en = 'Business process started by template ""%1"".'"), НаименованиеШаблона);
								ТекстЗаголовка = НСтр("ru = 'Стартован процесс';
								|en = 'Process is started'");
								ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
								
								ПараметрыОповещения = Новый Структура;
								ПараметрыОповещения.Вставить("ID", ПроцессID);
								ПараметрыОповещения.Вставить("Стартован", Истина);
								
								// Соберем предметы.
								Предметы = Новый Массив;;
								Предметы.Добавить(ПредметБизнесПроцесса);
								
								ПараметрыОповещения.Вставить("Предметы", Предметы);
								
								Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, ВладелецФормы);  
								Для каждого текСтрока Из НайденныеСтроки Цикл
									текСтрока.СогласованиеКорректировки = ПредопределенноеЗначение("Перечисление.проф_СогласованиеКорректировки.НаСогласовании");
								КонецЦикла
							Иначе
								ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ТипПроцесса, Неопределено, , ПараметрыФормы);
							КонецЕсли; 
						Исключение 
							ПричинаОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
							ТекстОшибки = Нстр("ru = 'Задание по снятию резерва по %1, %2, %3, %4 в ДО не сформировано! Причина: %5%6'");
							ТекстОшибки = СтрШаблон(ТекстОшибки, СтрОстатки.Номенклатура, СтрОстатки.Количество, ТекЕИ, СтрОстатки.Назначение, Символы.ПС, ПричинаОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
							Для каждого текСтрока Из НайденныеСтроки Цикл
								текСтрока.СогласованиеКорректировки = ПредопределенноеЗначение("Перечисление.проф_СогласованиеКорректировки.Ошибка");
							КонецЦикла
						КонецПопытки;
						
					КонецЦикла;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьНаСогласованиеНаСервере()  
	
	ПолучитьТаблицуОстаков();
	
	НаименованиеШаблона = "Согласование изменения заказа";
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ЕстьОшибки Тогда
		СтрокиИтог = ДеревоТовары.ПолучитьЭлементы();
		Для каждого СтрИтог Из СтрокиИтог Цикл
			
			СтрокиОстаткиНом = СтрИтог.ПолучитьЭлементы();
			Для каждого СтрОстаткиНом Из СтрокиОстаткиНом Цикл
				
				Если СтрОстаткиНом.Количество = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокиОстаткиПодр = СтрОстаткиНом.ПолучитьЭлементы();
				Для каждого СтрОстаткиПодр Из СтрокиОстаткиПодр Цикл
					ТекстОписанияИтог = "";
					
					СтрокиИДЗаказа = СтрОстаткиПодр.ПолучитьЭлементы();
					Для каждого СтрИДЗаказа Из СтрокиИДЗаказа Цикл
						
						
						СтрокиОстатки = СтрИДЗаказа.ПолучитьЭлементы();
						Для каждого СтрОстатки Из СтрокиОстатки Цикл
							
							
							ТекстОписания = Нстр("ru = 'Согласовать снятие резерва: %1 - %2 - %3 %4 для назначения: %5'");
							ТекЕИ = ПолучитьЕдиницуИзмерения(СтрОстатки.Номенклатура);
							ТекстОписания = СтрШаблон(ТекстОписания, Символы.ПС, СтрОстатки.Номенклатура, СтрОстатки.Количество, ТекЕИ, СтрОстатки.Назначение);
							
							ТекстОписанияИтог = ?(ТекстОписанияИтог = "", ТекстОписания, ТекстОписанияИтог + Символы.ПС + ТекстОписания);
						КонецЦикла;
						
						ПредметID = "";
						Если ЗначениеЗаполнено(СтрИДЗаказа.ИДЗаказа) Тогда			
							//ПредметID = Строка(ДокументДляСогласования.УникальныйИдентификатор());
							ПредметID = СтрИДЗаказа.ИДЗаказа;
						КонецЕсли;
						
						ПараметрыФормы = Новый Структура;
						
						ПредметБизнесПроцесса = Новый Структура;
						ПредметБизнесПроцесса.Вставить("ID", ПредметID); //ПредметID
						ПредметБизнесПроцесса.Вставить("type", "DMInternalDocument");     
						
						name = ПолучитьОписаниеПредметаСогласования(Объект.Ссылка);
						
						ПредметБизнесПроцесса.Вставить("name", name); 
						
						Если ЗначениеЗаполнено(ПредметID) Тогда
							ПараметрыФормы.Вставить("Предмет", ПредметБизнесПроцесса);
						КонецЕсли;  
						
						ПараметрыФормы.Вставить("Описание", ТекстОписанияИтог);
						
						ШаблонБизнесПроцесса = Новый Структура;
						ШаблонБизнесПроцесса.Вставить("ID", "32fccb2e-ac94-11ed-bca8-3cecef0dcbf1");
						ШаблонБизнесПроцесса.Вставить("type", "DMBusinessProcessApprovalTemplate");
						ПараметрыФормы.Вставить("Шаблон", ШаблонБизнесПроцесса);
						
						ТипПроцесса = "DMBusinessProcessApproval"; 
						
						ПараметрыОтбора = Новый Структура("Номенклатура, НазначениеИсходное", СтрОстатки.Номенклатура, СтрОстатки.Назначение); 
						НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
						
						Попытка
							Если ЗаполнитьСтартоватьПроцесс(ТипПроцесса, ПараметрыФормы) Тогда
								
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Стартован бизнес-процесс по шаблону ""%1"".';
								|en = 'Business process started by template ""%1"".'"), НаименованиеШаблона);
								ТекстЗаголовка = НСтр("ru = 'Стартован процесс';
								|en = 'Process is started'");
								//ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
								
								ПараметрыОповещения = Новый Структура;
								ПараметрыОповещения.Вставить("ID", ПроцессID);
								ПараметрыОповещения.Вставить("Стартован", Истина);
								
								// Соберем предметы.
								Предметы = Новый Массив;;
								Предметы.Добавить(ПредметБизнесПроцесса);
								
								ПараметрыОповещения.Вставить("Предметы", Предметы);
								
								//Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, ВладелецФормы);  
								Для каждого текСтрока Из НайденныеСтроки Цикл
									текСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.НаСогласовании;
								КонецЦикла
							Иначе
								//ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ТипПроцесса, Неопределено, , ПараметрыФормы);
							КонецЕсли; 
						Исключение 
							ПричинаОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
							ТекстОшибки = Нстр("ru = 'Задание по снятию резерва по %1, %2, %3, %4 в ДО не сформировано! Причина: %5%6'");
							ТекстОшибки = СтрШаблон(ТекстОшибки, СтрОстатки.Номенклатура, СтрОстатки.Количество, ТекЕИ, СтрОстатки.Назначение, Символы.ПС, ПричинаОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
							Для каждого текСтрока Из НайденныеСтроки Цикл
								текСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.Ошибка;
							КонецЦикла
						КонецПопытки;
						
					КонецЦикла;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуОстаков() 
	
	мсвГруппировкиКолонок = Новый Массив;
	мсвГруппировкиКолонок.Добавить("Подразделение");
	мсвГруппировкиКолонок.Добавить("Номенклатура");
	мсвГруппировкиКолонок.Добавить("ИДЗаказа");
	
	текДеревоОстатки = ТаблицаЗначенийВДеревоЗначений(Товары.Выгрузить(), мсвГруппировкиКолонок);
	
	ЗначениеВРеквизитФормы(текДеревоОстатки, "ДеревоТовары");
	
КонецПроцедуры // ПолучитьТаблицуОстаков()

&НаСервере
Функция ТаблицаЗначенийВДеревоЗначений(ТаблЗначений, мсвГруппировкиКолонок)
	
	ПострЗапроса             		= Новый ПостроительЗапроса;
	ПострЗапроса.ИсточникДанных             = Новый ОписаниеИсточникаДанных(ТаблЗначений);
	
	ПострЗапроса.ДобавлениеПредставлений 	= ТипДобавленияПредставлений.НеДобавлять; 
	Для каждого текЭлемент Из мсвГруппировкиКолонок Цикл
	    ПострЗапроса.ИсточникДанных.Колонки[текЭлемент].Измерение = Истина;
	КонецЦикла;  
	
	ПострЗапроса.ИсточникДанных.Колонки["Количество"].Итог = "Сумма(Количество)";
	
	ПострЗапроса.ЗаполнитьНастройки();
	ПострЗапроса.Выполнить();
	
	ДеревоЗн = ПострЗапроса.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ДеревоЗн;

КонецФункции

&НаСервере
Функция ПолучитьЕдиницуИзмерения(Номенклатура)
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

&НаСервере
Функция ПолучитьОписаниеПредметаСогласования(ДокументДляСогласования)
	
	Если ЗначениеЗаполнено(ДокументДляСогласования) Тогда		
		возврат "Заказ на ВПТ "+ДокументДляСогласования.Номер + " от "+ДокументДляСогласования.Дата+"/"+ДокументДляСогласования.Подразделение;
	иначе		
		возврат "";		
	КонецЕсли; 
	
	////"Заказ на ВПТ  
КонецФункции

 &НаСервере
Функция ЗаполнитьСтартоватьПроцесс(ТипПроцесса, ПараметрыЗапуска)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ПараметрыЗапуска.Свойство("Предмет") Тогда
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон, ПараметрыЗапуска.Предмет);
	Иначе
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон);
	КонецЕсли;
	ШаблонПроцесса.description = ПараметрыЗапуска.Описание;   
	
	НовыйПроцесс = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ШаблонПроцесса.ObjectID.type);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйПроцесс, ШаблонПроцесса);
	
	РезультатЗапуска = ИнтеграцияС1СДокументооборот.ЗапуститьБизнесПроцесс(Прокси, НовыйПроцесс);
		
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, РезультатЗапуска, "DMError") Тогда
		Возврат Ложь;
	Иначе
		ПроцессID = РезультатЗапуска.businessProcess.ObjectID.ID;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//++ Проф-ИТ, #349, Соловьев А.А., 15.11.2023
&НаСервереБезКонтекста
Функция ЗадатьВопросСкладСтатусСогласования(СкладОтправитель, СтатусСогласованияЗаказа)
	
	ЦентральныйСкладБилибино = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", 
		"ЦентральныйСкладБилибино");
	
	Возврат СкладОтправитель = ЦентральныйСкладБилибино
		И СтатусСогласованияЗаказа = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый;
	
КонецФункции
	
&НаКлиенте
Процедура ПередЗакрытиемОбработчикОповещения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.СтатусСогласованияЗаказа = ПредопределенноеЗначение("Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден");
		ВопросЗадан = Истина;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры
//-- Проф-ИТ, #349, Соловьев А.А., 15.11.2023

//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
&НаСервереБезКонтекста
Функция ТекущиеДанныеОтменил(Отменено)
	
	Возврат ?(Отменено, ПараметрыСеанса.ТекущийПользователь, Справочники.Пользователи.ПустаяСсылка());
	
КонецФункции
//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024

#КонецОбласти

// -- Проф-ИТ, #72, Соловьев А.А, 05.10.2023