
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс	

//++ Проф-ИТ, #338, Корнилов М.С., 04.11.2023

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ИменаОбъектовМетаданных = РегистрыСведений.торо_ВводНаОсновании.ИменаДоступныхОбъектовМетаданныхДляВводаНаОсновании(
		 Метаданные.Документы.проф_ЗаказНаПеремещение.Имя);
		 
	Для Каждого ИмяОбъектаМетаданных Из ИменаОбъектовМетаданных Цикл
		Документы[ИмяОбъектаМетаданных].ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);		 
	КонецЦикла;		 
		
	торо_СозданиеНаОсновании.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
		
КонецПроцедуры

// Добавляет команду создания документа "Заказ на перемещение (Проф-ИТ)".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.проф_ЗаказНаПеремещение) Тогда
        КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
        КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.проф_ЗаказНаПеремещение.ПолноеИмя();
        КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.проф_ЗаказНаПеремещение);
        КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
        Возврат КомандаСоздатьНаОсновании;
	КонецЕсли; 
	
    Возврат Неопределено;
	
КонецФункции

//-- Проф-ИТ, #338, Корнилов М.С., 04.11.2023

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// ++ Проф-ИТ, #72, Соловьев А.А., 19.09.2023

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапроспроф_ЗаказыНаПеремещение(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
КонецПроцедуры

Функция ТекстЗапроспроф_ЗаказыНаПеремещение(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "проф_ЗаказыНаПеремещение";
	
	Если НЕ ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	проф_ЗаказНаПеремещение.Ссылка КАК ЗаказНаПеремещение,
	|	проф_ЗаказНаПеремещение.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	проф_ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	проф_ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
	|	проф_ЗаказНаПеремещениеТовары.Серия КАК Серия,
	|	проф_ЗаказНаПеремещениеТовары.КодСтроки КАК КодСтроки,
	|	проф_ЗаказНаПеремещениеТовары.Количество КАК КОформлению
	|ИЗ
	|	Документ.проф_ЗаказНаПеремещение КАК проф_ЗаказНаПеремещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.проф_ЗаказНаПеремещение.Товары КАК проф_ЗаказНаПеремещениеТовары
	|		ПО проф_ЗаказНаПеремещениеТовары.Ссылка = проф_ЗаказНаПеремещение.Ссылка
	|ГДЕ
	|	проф_ЗаказНаПеремещение.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)

	Если ЗначениеЗаполнено(Регистры) Тогда
		
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			МассивРегистров = Новый Структура(Регистры);
		Иначе
			МассивРегистров = Регистры;
		КонецЕсли;
		
		Если НЕ МассивРегистров.Свойство(ИмяРегистра) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

// -- Проф-ИТ, #72, Соловьев А.А., 19.09.2023

#КонецОбласти

#Область Печать

//++ Проф-ИТ, #370, Соловьев А.А., 28.11.2023

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.проф_ЗаказНаПеремещение";
	КомандаПечати.Идентификатор = "проф_ЗаказНаПеремещение";
	КомандаПечати.Представление = НСтр("ru = 'Заказ на перемещение'");
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР", "ПечатьДокументовБезПредварительногоПросмотра", Ложь);
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "проф_ЗаказНаПеремещение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"проф_ЗаказНаПеремещение", 
			"Заказ на перемещение", 
			проф_ПечатьЗаказНаПеремещение(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.проф_ЗаказНаПеремещение.ПФ_MXL_ЗаказНаПеремещение");
	КонецЕсли;
	
КонецПроцедуры 

 Функция проф_ПечатьЗаказНаПеремещение(МассивОбъектов, ОбъектыПечати) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	проф_ЗаказНаПеремещение.Ссылка КАК Ссылка,
	|	проф_ЗаказНаПеремещение.Номер КАК НомерДокумента,
	|	проф_ЗаказНаПеремещение.Дата КАК ДатаДокумента,
	|	СправочникСкладОтправитель.Представление КАК СкладОтправитель,
	|	СправочникСкладПолучатель.Представление КАК СкладПолучатель,
	|	Пользователи.Представление КАК Ответственный,
	|	Организации.Представление КАК Организация
	|ИЗ
	|	Документ.проф_ЗаказНаПеремещение КАК проф_ЗаказНаПеремещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО проф_ЗаказНаПеремещение.Организация = Организации.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СправочникСкладОтправитель
	|		ПО проф_ЗаказНаПеремещение.СкладОтправитель = СправочникСкладОтправитель.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СправочникСкладПолучатель
	|		ПО проф_ЗаказНаПеремещение.СкладПолучатель = СправочникСкладПолучатель.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО проф_ЗаказНаПеремещение.Ответственный = Пользователи.Ссылка
	|ГДЕ
	|	проф_ЗаказНаПеремещение.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	проф_ЗаказНаПеремещениеТовары.Ссылка КАК Ссылка,
	|	проф_ЗаказНаПеремещениеТовары.НомерСтроки КАК НомерСтроки,
	|	СправочникНоменклатура.НаименованиеПолное КАК Номенклатура,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	проф_ЗаказНаПеремещениеТовары.Количество КАК Количество,
	|	проф_ЗаказНаПеремещениеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА проф_ЗаказНаПеремещениеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ЕдиницыИзмерения.Наименование
	|	КОНЕЦ КАК ЕдИзм,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдИзм
	|ИЗ
	|	Документ.проф_ЗаказНаПеремещение.Товары КАК проф_ЗаказНаПеремещениеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО проф_ЗаказНаПеремещениеТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|			ПО УпаковкиНоменклатуры.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|		ПО проф_ЗаказНаПеремещениеТовары.Упаковка = УпаковкиНоменклатуры.Ссылка
	|ГДЕ
	|	проф_ЗаказНаПеремещениеТовары.Ссылка В(&МассивСсылок)";
	
	МакетПечати = ПолучитьМакет("ПФ_MXL_ЗаказНаПеремещение");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_проф_ЗаказНаПеремещение";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = МассивРезультатов[0].Выбрать();
	ВыборкаТовары 		= МассивРезультатов[1].Выбрать();
	
	ОбластьЗаголовок	= МакетПечати.ПолучитьОбласть("Заголовок");
	ОбластьШапка 		= МакетПечати.ПолучитьОбласть("Шапка");
	ОбластьСтрока		= МакетПечати.ПолучитьОбласть("Строка");
	ОбластьПодвал		= МакетПечати.ПолучитьОбласть("Подвал");
	
	ПервыйДокумент = Истина;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПоДокументам.НомерДокумента, Истина, Истина);
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.НомерДокумента = НомерДокумента;
		ОбластьЗаголовок.Параметры.ДатаДокумента = Формат(ВыборкаПоДокументам.ДатаДокумента, "ДЛФ=Д");
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы + 2;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Пока ВыборкаТовары.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка)) Цикл
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаТовары);
			Если ТабличныйДокумент.ПроверитьВывод(ОбластьПодвал) Тогда
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаТовары.Сбросить();
		
		ОбластьПодвал.Параметры.Заполнить(ВыборкаПоДокументам);
		
		Если ТабличныйДокумент.ПроверитьВывод(ОбластьПодвал) Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//-- Проф-ИТ, #370, Соловьев А.А., 28.11.2023

#КонецОбласти

// ++ Проф-ИТ, #72, Соловьев А.А., 19.09.2023

Функция ТаблицаДоступнойНоменклатурыПоНазначениям(ТаблицаТовары, Дата, ПодразделенияСлужбыТОиР) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Доступно КАК Доступно
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура КАК Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика КАК Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Назначение КАК Назначение,
	|	СУММА(проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток) КАК ВНаличииОстаток
	|ПОМЕСТИТЬ втЗапасыИПотребности
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&Дата,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					втТовары.Номенклатура КАК Номенклатура,
	|					втТовары.Характеристика КАК Характеристика,
	|					втТовары.Склад КАК Склад
	|				ИЗ
	|					втТовары КАК втТовары)) КАК проф_ЗапасыИПотребностиОстатки
	|ГДЕ
	|	проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура КАК Номенклатура,
	|	втЗапасыИПотребности.Характеристика КАК Характеристика,
	|	втЗапасыИПотребности.Назначение КАК Назначение,
	|	СУММА(втЗапасыИПотребности.ВНаличииОстаток) КАК Доступно
	|ПОМЕСТИТЬ втОбщая
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО втЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОиР))
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Назначение,
	|	втЗапасыИПотребности.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Назначение,
	|	СУММА(втЗапасыИПотребности.ВНаличииОстаток)
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|ГДЕ
	|	втЗапасыИПотребности.Назначение = ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Назначение,
	|	втЗапасыИПотребности.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбщая.Номенклатура КАК Номенклатура,
	|	втОбщая.Характеристика КАК Характеристика,
	|	втОбщая.Назначение КАК Назначение,
	|	СУММА(втОбщая.Доступно) - СУММА(ЕСТЬNULL(втТовары.Доступно, 0)) КАК Доступно
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втОбщая КАК втОбщая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО втОбщая.Номенклатура = втТовары.Номенклатура
	|			И втОбщая.Характеристика = втТовары.Характеристика
	|			И втОбщая.Назначение = втТовары.Назначение
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбщая.Характеристика,
	|	втОбщая.Назначение,
	|	втОбщая.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура КАК Номенклатура,
	|	втЗапасыИПотребности.Характеристика КАК Характеристика,
	|	СУММА(втЗапасыИПотребности.ВНаличииОстаток) КАК РезервНеТОиР
	|ПОМЕСТИТЬ втРезервНеТОиР
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО втЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			И (НЕ проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.Номенклатура КАК Номенклатура,
	|	втИтоговая.Характеристика КАК Характеристика,
	|	втИтоговая.Назначение КАК Назначение,
	|	втИтоговая.Доступно КАК Доступно,
	|	0 КАК РезервНеТОиР
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|ГДЕ
	|	втИтоговая.Доступно > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втРезервНеТОиР.Номенклатура,
	|	втРезервНеТОиР.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка),
	|	0,
	|	втРезервНеТОиР.РезервНеТОиР
	|ИЗ
	|	втРезервНеТОиР КАК втРезервНеТОиР
	|ГДЕ
	|	втРезервНеТОиР.РезервНеТОиР > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Доступно УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ПодразделенияСлужбыТОиР", ПодразделенияСлужбыТОиР);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПерезаполнитьДоступностьИНазначения(Товары,
											  ПоОтклоненным,
											  Склад,
											  Дата,
											  ПодразделенияСлужбыТОиР) Экспорт
	
	СтрСклад = "Склад";
	
	Если ПоОтклоненным Тогда 
		СтруктураПоиска = Новый Структура("СогласованиеКорректировки", Перечисления.проф_СогласованиеКорректировки.Отклонен);
	Иначе
		СтруктураПоиска = Новый Структура("Доступно", 0);
	КонецЕсли;
	
	СтрокиТЧ = Товары.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТЧ.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаТовары = Товары.Выгрузить(, "Номенклатура, Характеристика, Назначение, СогласованиеКорректировки, Доступно");
	
	ОбнулитьДоступностьПоСтруктуреПоиска(ПоОтклоненным, ТаблицаТовары, СтруктураПоиска);
		
	ТаблицаТовары.Свернуть("Номенклатура, Характеристика, Назначение", "Доступно");
	ТаблицаТовары.Колонки.Добавить(СтрСклад, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТовары.ЗаполнитьЗначения(Склад, СтрСклад);
	
	ДатаОстатков = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	ТаблицаДоступнойНоменклатурыПоНазначениям = ТаблицаДоступнойНоменклатурыПоНазначениям(
		ТаблицаТовары, ДатаОстатков, ПодразделенияСлужбыТОиР);
	
	Если ТаблицаДоступнойНоменклатурыПоНазначениям.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдены остатки по складу %1'"), Склад);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	проф_ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	проф_ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
	|	проф_ЗаказНаПеремещениеТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	&Товары КАК проф_ЗаказНаПеремещениеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.Номенклатура КАК Номенклатура,
	|	втИтоговая.Характеристика КАК Характеристика,
	|	втИтоговая.Упаковка КАК Упаковка,
	|	Склады.Представление КАК СкладПредставление,
	|	СправочникНоменклатура.Представление КАК НоменклатураПредставление,
	|	ВЫБОР
	|		КОГДА втИтоговая.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЕдиницыИзмерения.Представление
	|		ИНАЧЕ УпаковкиНоменклатуры.Представление
	|	КОНЕЦ КАК УпаковкаПредставление,
	|	ХарактеристикиНоменклатуры.Представление КАК ХарактеристикаПредставление
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|			ПО СправочникНоменклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|		ПО втИтоговая.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО втИтоговая.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО втИтоговая.Упаковка = УпаковкиНоменклатуры.Ссылка,
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Склад";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.УстановитьПараметр(СтрСклад, Склад);
	
	ТаблицаПредставлений = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТовары Из СтрокиТЧ Цикл
		
		СтрокаТовары.Доступно = 0;
		Если ЗначениеЗаполнено(СтрокаТовары.НазначениеИсходное) Тогда 
			СтрокаТовары.Доступно = СтрокаТовары.КоличествоУпаковок;
			Если Не ЗначениеЗаполнено(СтрокаТовары.Назначение) Тогда 
				СтрокаТовары.Назначение = СтрокаТовары.НазначениеИсходное;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
		СтрокиПоНазначениям = ТаблицаДоступнойНоменклатурыПоНазначениям.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПоНазначениям.Количество() = 0 Тогда 
			СообщитьОНехватке(СтрокаТовары, ТаблицаПредставлений, СтрокаТовары.КоличествоУпаковок);
			Товары.Удалить(СтрокаТовары);
			Возврат;
		КонецЕсли;
		
		Результат = ПерезаполнитьДоступностьИНазначенияСтрокПоНазначениям(СтрокаТовары,
																		  СтрокиПоНазначениям,
																		  Товары,
																		  ТаблицаПредставлений);
		Если Не Результат Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПерезаполнитьДоступностьИНазначенияСтрокПоНазначениям(СтрокаТовары,
																СтрокиПоНазначениям,
																Товары,
																ТаблицаПредставлений)
	
	ИндексСтроки = 0;
	Для Каждого СтрокаПоНазначению Из СтрокиПоНазначениям Цикл
		
		Если СтрокаПоНазначению.Доступно = 0
			И СтрокаПоНазначению.РезервНеТОиР = 0 Тогда
			
			СообщитьОНехватке(СтрокаТовары, ТаблицаПредставлений, СтрокаТовары.КоличествоУпаковок);
			Товары.Удалить(СтрокаТовары);
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтрокаТовары.КоличествоУпаковок <= СтрокаПоНазначению.Доступно Тогда
			
			СтрокаТовары.Доступно 					= СтрокаТовары.КоличествоУпаковок;
			//++ Проф-ИТ, #372, Соловьев А.А., 29.11.2023
			Если Не ЗначениеЗаполнено(СтрокаТовары.Назначение) Тогда 
				СтрокаТовары.Назначение 			= СтрокаПоНазначению.Назначение;
			КонецЕсли;
			//-- Проф-ИТ, #372, Соловьев А.А., 29.11.2023
			СтрокаТовары.НазначениеИсходное			= СтрокаПоНазначению.Назначение;
			СтрокаТовары.СогласованиеКорректировки	= Перечисления.проф_СогласованиеКорректировки.НеТребуется;
			СтрокаПоНазначению.Доступно				= СтрокаПоНазначению.Доступно - СтрокаТовары.КоличествоУпаковок;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПоНазначению.Доступно > 0 Тогда
			
			НоваяСтрока = Товары.Вставить(СтрокаТовары.НомерСтроки + ИндексСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.КоличествоУпаковок	= СтрокаПоНазначению.Доступно;
			НоваяСтрока.Количество			= СтрокаПоНазначению.Доступно;
			НоваяСтрока.Доступно			= СтрокаПоНазначению.Доступно;
			//++ Проф-ИТ, #372, Соловьев А.А., 29.11.2023
			Если Не ЗначениеЗаполнено(НоваяСтрока.Назначение) Тогда 
				НоваяСтрока.Назначение		= СтрокаПоНазначению.Назначение;
			КонецЕсли;
			//-- Проф-ИТ, #372, Соловьев А.А., 29.11.2023
			НоваяСтрока.НазначениеИсходное	= СтрокаПоНазначению.Назначение;
			НоваяСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.НеТребуется;
			
			СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок - СтрокаПоНазначению.Доступно;
			СтрокаТовары.Количество = СтрокаТовары.КоличествоУпаковок;
			СтрокаПоНазначению.Доступно = 0;
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
		ПоследняяСтрока = (ИндексСтроки = СтрокиПоНазначениям.Количество());
		Если Не ПоследняяСтрока Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПоНазначению.РезервНеТОиР < СтрокаТовары.КоличествоУпаковок Тогда 
			СообщитьОНехватке(СтрокаТовары, ТаблицаПредставлений, 
				СтрокаТовары.КоличествоУпаковок - СтрокаПоНазначению.РезервНеТОиР);
		КонецЕсли;
		
		Доступно = Мин(СтрокаТовары.КоличествоУпаковок, СтрокаПоНазначению.РезервНеТОиР);
		
		СтрокаТовары.КоличествоУпаковок = Доступно;
		СтрокаТовары.Количество 		= Доступно;
		
		СтрокаПоНазначению.РезервНеТОиР = СтрокаПоНазначению.РезервНеТОиР - Доступно;
		
		Если СтрокаТовары.Количество = 0 Тогда 
			Товары.Удалить(СтрокаТовары);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбнулитьДоступностьПоСтруктуреПоиска(ПоОтклоненным, ТаблицаТовары, СтруктураПоиска)
	
	Если Не ПоОтклоненным Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТовары Из СтрокиТовары Цикл
		СтрокаТовары.Доступно = 0;
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОНехватке(СтрокаТовары, ТаблицаПредставлений, Количество)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
	СтрокиПредставлений = ТаблицаПредставлений.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТаблицаПредставлений Из СтрокиПредставлений Цикл
		
		ТекстСообщения = НСтр("ru = 'Невозможно добавить %1 %2 по %3. Нет доступного количества на %4'");
		Если Не ПустаяСтрока(СтрокаТаблицаПредставлений.ХарактеристикаПредставление) Тогда 
			Номенклатура = СтрокаТаблицаПредставлений.НоменклатураПредставление + " " + СтрокаТаблицаПредставлений.ХарактеристикаПредставление;
		Иначе
			Номенклатура = СтрокаТаблицаПредставлений.НоменклатураПредставление;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ТекстСообщения, 
			Количество, 
			СтрокаТаблицаПредставлений.УпаковкаПредставление, 
			Номенклатура,
			СтрокаТаблицаПредставлений.СкладПредставление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры	

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// -- Проф-ИТ, #72, Соловьев А.А., 19.09.2023
#КонецОбласти

#КонецЕсли
