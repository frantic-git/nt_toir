
#Область СлужебныйПрограммныйИнтерфейс

//++ Проф-ИТ, #338, Корнилов М.С., 04.11.2023

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ИменаОбъектовМетаданных = РегистрыСведений.торо_ВводНаОсновании.ИменаДоступныхОбъектовМетаданныхДляВводаНаОсновании(
		 Метаданные.Документы.ЗаказНаВнутреннееПотребление.Имя);
		 
	Для Каждого ИмяОбъектаМетаданных Из ИменаОбъектовМетаданных Цикл
		Документы[ИмяОбъектаМетаданных].ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);		 
	КонецЦикла;		 
		
	торо_СозданиеНаОсновании.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
		
КонецПроцедуры

// Добавляет команду создания документа "Заказы на внутренние потребления".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
        КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
        КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказНаВнутреннееПотребление.ПолноеИмя();
        КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаВнутреннееПотребление);
        КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
        Возврат КомандаСоздатьНаОсновании;
	КонецЕсли; 
	
    Возврат Неопределено;
	
КонецФункции

//-- Проф-ИТ, #338, Корнилов М.С., 04.11.2023

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023

Функция ПолучитьIDРемонтныхРаботПоОснованиюНаСервере(ЗаявкаНаРемонт, ВнутреннееПотребление) Экспорт
	
	Структура = Новый Структура("ID, РемонтыОборудования_ID");
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
			|	торо_ИнтеграцияДокументов.ID КАК ID
			|ПОМЕСТИТЬ ВТ_ИДРемонтныхРабот
			|ИЗ
			|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
			|ГДЕ
			|	торо_ИнтеграцияДокументов.ДокументТОИР = &ДокументЗаявкаНаРемонт
			|	И торо_ИнтеграцияДокументов.ДокументЕРП = &ДокументВнутреннееПотребление

			|ИНДЕКСИРОВАТЬ ПО
			|	ID
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID КАК ID,
			|	ВТ_ИДРемонтныхРабот.ID КАК РемонтыОборудования_ID
			|ИЗ
			|	ВТ_ИДРемонтныхРабот КАК ВТ_ИДРемонтныхРабот
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
			|		ПО (ВТ_ИДРемонтныхРабот.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID)
			|			И (торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации)
			|ГДЕ
			|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = &ДокументЗаявкаНаРемонт";
	Запрос.УстановитьПараметр("ДокументЗаявкаНаРемонт", ЗаявкаНаРемонт); 
	Запрос.УстановитьПараметр("ДокументВнутреннееПотребление", ВнутреннееПотребление);
    Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Структура,Выборка);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции	

Процедура ОбработатьЗаменуНоменклатурыНаАналоги(ИзДокумента, Объект, ТаблицаДанных, СтруктураТекущейСтроки, Номенклатура, Характеристика = Неопределено) Экспорт
	
	// 1. найти исходную строку строку в ТЧ товаров. Если ее нет, а замену отменили (количество > 0), то создать строку. 
	//    Если количество после замены = 0, то удалить, иначе присвоить количество
	// 2. Найти строку-аналог. Если ее нет, а она не удалена - создать новую и записать туда количество. Если она есть, но удалена
	//    с формы - удалить в ТЧ Товаров. Если она есть и не удалена - заполнить количество
	// 3. Найти строку в ТЧ замененных материалов по КодСтрокиНоменклатуры+КодСтрокиАналога. Если есть и исходная строка не нулевая
	//    то поменять количество замененное
	// 4. Если ее нет (уже ранее полностью заменили) найти строку в ТЧ замененных материалов по КодСтрокиАналога. Если есть и исходная строка не нулевая
	//    то поменять количество замененное

	КодСтрокиНоменклатуры = 0;
	
	//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
	Структура = ПолучитьIDРемонтныхРаботПоОснованиюНаСервере(Объект.ДокументОснование, Объект.Ссылка);
	ID_Рандом =  Структура.ID;
	РемонтыОборудования_ID_Рандом = Структура.РемонтыОборудования_ID;
	//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если СтрокаТЗ.Исходная Тогда
			СтруктураПоискаИсходногоТовара = Новый Структура("КодСтроки", СтрокаТЗ.КодСтрокиНоменклатуры);
			НайденныеСтрокиИсходногоТовара = Объект.Товары.НайтиСтроки(СтруктураПоискаИсходногоТовара);
						
			Если НайденныеСтрокиИсходногоТовара.Количество() = 0 И СтрокаТЗ.Количество > 0 Тогда
				КодСтрокиНоменклатуры = Объект.МаксимальныйКодСтроки + 1;
				
				НоваяСтрокаТЗ = Объект.Товары.Добавить();
				НоваяСтрокаТЗ.КодСтроки = КодСтрокиНоменклатуры;
				НоваяСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
				НоваяСтрокаТЗ.Характеристика = СтрокаТЗ.ХарактеристикаНоменклатуры;
				НоваяСтрокаТЗ.КоличествоУпаковок = СтрокаТЗ.Количество;
				НоваяСтрокаТЗ.Упаковка = СтрокаТЗ.ЕдиницаИзмерения;
				НоваяСтрокаТЗ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
				Если ИзДокумента Тогда 
					НоваяСтрокаТЗ.ЕстьАналоги = 1;
				КонецЕсли;
				
				Объект.МаксимальныйКодСтроки = КодСтрокиНоменклатуры;
				
				СтруктураПоискаЗамененныхАналогов = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Упаковка", НоваяСтрокаТЗ.Номенклатура, НоваяСтрокаТЗ.Характеристика, НоваяСтрокаТЗ.Упаковка);
				НайденныеСтрокиЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				
				Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
					СтрокаТЧ.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
				КонецЦикла;
				
				СтруктураДействий = Новый Структура();
				Если ИзДокумента Тогда 
					СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрокаТЗ.Характеристика);
				КонецЕсли;	
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрокаТЗ.Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТЗ, СтруктураДействий, Неопределено); 
				
				//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023 
				СтруктураПоискаЗамененныхАналогов = Новый Структура("Номенклатура, Характеристика, Упаковка", НоваяСтрокаТЗ.Номенклатура, НоваяСтрокаТЗ.Характеристика, НоваяСтрокаТЗ.Упаковка);
				НайденныеСтрокиЗамененныхАналогов = Объект.проф_ТоварыИсточника.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				Если НайденныеСтрокиЗамененныхАналогов.Количество()=0 Тогда 
					строка = Объект.проф_ТоварыИсточника.Добавить();
					ЗаполнитьЗначенияСвойств(строка,НоваяСтрокаТЗ); 		
					строка.ID = ID_Рандом;
					строка.РемонтыОборудования_ID  = РемонтыОборудования_ID_Рандом;	
				Иначе
					Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
						СтрокаТЧ.КодСтроки = КодСтрокиНоменклатуры;
					КонецЦикла;  
				КонецЕсли; 
				Если НоваяСтрокаТЗ.Отменено Тогда
					Количество = 0;
				Иначе
					Количество = НоваяСтрокаТЗ.Количество;
				КонецЕсли;   
				ПересчитатьКоличествоТоварыИсточника(Объект, СтрокаТЧ.КодСтроки,Количество)
				//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
			ИначеЕсли НайденныеСтрокиИсходногоТовара.Количество() > 0 И СтрокаТЗ.Количество > 0 Тогда
				НайденныеСтрокиИсходногоТовара[0].КоличествоУпаковок = СтрокаТЗ.Количество;
				КодСтрокиНоменклатуры = НайденныеСтрокиИсходногоТовара[0].КодСтроки;
				
				СтруктураДействий = Новый Структура();
				Если ИзДокумента Тогда 
					СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НайденныеСтрокиИсходногоТовара[0].Характеристика);
				КонецЕсли;	
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НайденныеСтрокиИсходногоТовара[0].Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденныеСтрокиИсходногоТовара[0], СтруктураДействий, Неопределено);
				//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
				Если НайденныеСтрокиИсходногоТовара[0].Отменено Тогда
					Количество = 0;
				Иначе
					Количество = НайденныеСтрокиИсходногоТовара[0].Количество;
				КонецЕсли;  
				ПересчитатьКоличествоТоварыИсточника(Объект, НайденныеСтрокиИсходногоТовара[0].КодСтроки,Количество);
				//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
			ИначеЕсли НайденныеСтрокиИсходногоТовара.Количество() > 0 И СтрокаТЗ.Количество = 0 Тогда
				
				//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023 
				СтрокиТовары = Объект.проф_ТоварыИсточника.НайтиСтроки(Новый Структура("КодСтроки",НайденныеСтрокиИсходногоТовара[0].КодСтроки));
				Для каждого строка из СтрокиТовары Цикл
					строка.КодСтроки = 0;
					строка.Количество = 0; 
					строка.КоличествоУпаковок = 0;
				КонецЦикла;
				//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023 
				
				Объект.Товары.Удалить(НайденныеСтрокиИсходногоТовара[0]);
				
				СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиНоменклатуры", СтрокаТЗ.КодСтрокиНоменклатуры);
				НайденныеСтрокиЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				
				Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
					СтрокаТЧ.КодСтрокиНоменклатуры = 0;
				КонецЦикла;
				
				КодСтрокиНоменклатуры = 0;
			КонецЕсли;
		Иначе 
			//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
			НайденныеСтрокиЗамененныхАналогов = Объект.проф_ТоварыИсточника.НайтиСтроки(Новый Структура("КодСтроки", СтрокаТЗ.КодСтрокиНоменклатуры)); 
			Если НайденныеСтрокиЗамененныхАналогов.Количество() > 0 Тогда  
				ID =  НайденныеСтрокиЗамененныхАналогов[0].ID; 
				РемонтыОборудования_ID =  НайденныеСтрокиЗамененныхАналогов[0].РемонтыОборудования_ID;
			Иначе 
				ID =  ID_Рандом; 
				РемонтыОборудования_ID =  РемонтыОборудования_ID_Рандом;
			КонецЕсли;
			//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
			
			СтруктураПоискаАналога = Новый Структура("КодСтроки", СтрокаТЗ.КодСтрокиАналога);
			НайденныеСтрокиАналога = Объект.Товары.НайтиСтроки(СтруктураПоискаАналога);
			
			Если НайденныеСтрокиАналога.Количество() = 0 И Не СтрокаТЗ.Удален Тогда
				ТекущийКодСтроки = Объект.МаксимальныйКодСтроки + 1;
				
				НоваяСтрокаТЗ = Объект.Товары.Добавить();
				НоваяСтрокаТЗ.КодСтроки = ТекущийКодСтроки;
				НоваяСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
				НоваяСтрокаТЗ.Характеристика = СтрокаТЗ.ХарактеристикаНоменклатуры;
				НоваяСтрокаТЗ.КоличествоУпаковок = СтрокаТЗ.Количество;
				НоваяСтрокаТЗ.Упаковка = СтрокаТЗ.ЕдиницаИзмерения;
				НоваяСтрокаТЗ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
				Если ИзДокумента Тогда 
					НоваяСтрокаТЗ.ЕстьАналоги = 0;
				КонецЕсли;	
				
				НоваяСтрокаЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.Добавить();
				НоваяСтрокаЗамененныхАналогов.КодСтрокиАналога = ТекущийКодСтроки;
				НоваяСтрокаЗамененныхАналогов.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
				НоваяСтрокаЗамененныхАналогов.ХарактеристикаНоменклатуры = Характеристика;
				НоваяСтрокаЗамененныхАналогов.Номенклатура = Номенклатура;
				НоваяСтрокаЗамененныхАналогов.КоличествоУпаковок = СтрокаТЗ.ЗамененноеКоличество;
				
				Объект.МаксимальныйКодСтроки = ТекущийКодСтроки;
				
				СтруктураДействий = Новый Структура();
				Если ИзДокумента Тогда 
					СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрокаТЗ.Характеристика);
				КонецЕсли;	
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрокаТЗ.Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				
				//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТЗ, СтруктураДействий, Неопределено);
				строка = Объект.проф_ТоварыИсточника.Добавить();
				ЗаполнитьЗначенияСвойств(строка,НоваяСтрокаТЗ); 		
				строка.ID = ID;
				строка.РемонтыОборудования_ID  = РемонтыОборудования_ID;
				//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023 
				
			ИначеЕсли НайденныеСтрокиАналога.Количество() > 0 И Не СтрокаТЗ.Удален Тогда
				НайденныеСтрокиАналога[0].КоличествоУпаковок = СтрокаТЗ.Количество;
				
				СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиАналога, Номенклатура, ХарактеристикаНоменклатуры", СтрокаТЗ.КодСтрокиАналога, СтруктураТекущейСтроки.Номенклатура, СтруктураТекущейСтроки.Характеристика);
				НайденныеСтрокиЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				
				Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЗ.ЗамененноеКоличество;
					СтрокаТЧ.КодСтрокиНоменклатуры = КодСтрокиНоменклатуры;
				КонецЦикла;
				
				СтруктураДействий = Новый Структура();
				Если ИзДокумента Тогда 
					СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НайденныеСтрокиАналога[0].Характеристика);
				КонецЕсли;	
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НайденныеСтрокиАналога[0].Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденныеСтрокиАналога[0], СтруктураДействий, Неопределено);
				
				//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
				Если НайденныеСтрокиАналога[0].Отменено Тогда
					Количество = 0;
				Иначе
					Количество = НайденныеСтрокиАналога[0].Количество;
				КонецЕсли;
				ПересчитатьКоличествоТоварыИсточника(Объект, НайденныеСтрокиАналога[0].КодСтроки,Количество);
				//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
				
			ИначеЕсли НайденныеСтрокиАналога.Количество() > 0 И СтрокаТЗ.Удален Тогда
				Объект.Товары.Удалить(НайденныеСтрокиАналога[0]);
				
				СтруктураПоискаЗамененныхАналогов = Новый Структура("КодСтрокиАналога", СтрокаТЗ.КодСтрокиАналога);
				НайденныеСтрокиЗамененныхАналогов = Объект.торо_ЗамененныеАналогамиМатериалы.НайтиСтроки(СтруктураПоискаЗамененныхАналогов);
				
				Для каждого СтрокаТЧ Из НайденныеСтрокиЗамененныхАналогов Цикл
					Объект.торо_ЗамененныеАналогамиМатериалы.Удалить(СтрокаТЧ);
				КонецЦикла; 
				//++ Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
				НайденныеСтрокиТоварыИсточника = Объект.проф_ТоварыИсточника.НайтиСтроки(новый Структура("КодСтроки",СтрокаТЗ.КодСтрокиАналога)); 
				Для каждого СтрокаТЧ Из НайденныеСтрокиТоварыИсточника Цикл
					Объект.проф_ТоварыИсточника.Удалить(СтрокаТЧ);
				КонецЦикла; 
				//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьКоличествоТоварыИсточника(Объект, КодСтроки, КоличествоУпаковок) Экспорт  
	
	СтрокиТоварыИсточника = Объект.проф_ТоварыИсточника.НайтиСтроки(Новый Структура("КодСтроки", КодСтроки));
	
	КолвоСтрок = СтрокиТоварыИсточника.Количество();
	
	Если КолвоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если КолвоСтрок = 1 Тогда  
		СтрокиТоварыИсточника[0].КоличествоУпаковок = КоличествоУпаковок;
		СтрокиТоварыИсточника[0].Количество			= КоличествоУпаковок;
		Возврат;
	КонецЕсли;
			
	КоличествоТовара = КоличествоУпаковок; 
	КоличествоТовараИсточника = Объект.проф_ТоварыИсточника.Выгрузить(
		СтрокиТоварыИсточника,"КоличествоУпаковок").Итог("КоличествоУпаковок");
	
	Если КоличествоТовара<КоличествоТовараИсточника Тогда
		КоличествоУменьшено = Истина;
		Разница = КоличествоТовараИсточника - КоличествоТовара;
	ИначеЕсли КоличествоТовара>КоличествоТовараИсточника Тогда
		КоличествоУменьшено = Ложь;	
		Разница = КоличествоТовара - КоличествоТовараИсточника; 
	Иначе 
		//Количество осталось прежним пересчет не требуется.
		Возврат;
	КонецЕсли;
	
	Для Каждого строка Из СтрокиТоварыИсточника Цикл 
		
		Если КоличествоУменьшено
		И строка.КоличествоУпаковок >= Разница Тогда 
			строка.КоличествоУпаковок = Строка.КоличествоУпаковок - Разница;
			строка.Количество = Строка.Количество - Разница;
			Прервать;			
		КонецЕсли;   
					
		Если КоличествоУменьшено Тогда 
			Разница = Разница - строка.КоличествоУпаковок;
			строка.КоличествоУпаковок = 0;
			строка.Количество = 0;		
		Иначе  
			строка.КоличествоУпаковок = Строка.КоличествоУпаковок + Разница;
			строка.Количество = Строка.Количество + Разница;
			Прервать;
		КонецЕсли;			
		
	КонецЦикла;	
	
КонецПроцедуры

//-- Проф-ИТ, #205, Карпов Д. Ю., 03.10.2023

//++ Проф-ИТ, #228, Соловьев А.А., 17.10.2023

Процедура ЗаписьВРегистрЗаменаНаАналоги(СтруктураПараметров) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	проф_ЗаменаНаАналоги.Период КАК Период,
	|	проф_ЗаменаНаАналоги.Регистратор КАК Регистратор,
	|	проф_ЗаменаНаАналоги.Номенклатура КАК Номенклатура,
	|	проф_ЗаменаНаАналоги.Характеристика КАК Характеристика,
	|	проф_ЗаменаНаАналоги.Разрешение КАК Разрешение,
	|	проф_ЗаменаНаАналоги.УпаковкаМатериала КАК УпаковкаМатериала,
	|	проф_ЗаменаНаАналоги.Аналог КАК Аналог,
	|	проф_ЗаменаНаАналоги.ХарактеристикаАналога КАК ХарактеристикаАналога,
	|	проф_ЗаменаНаАналоги.УпаковкаАналога КАК УпаковкаАналога,
	|	проф_ЗаменаНаАналоги.КоличествоАналога КАК КоличествоАналога,
	|	проф_ЗаменаНаАналоги.КоличествоМатериала КАК КоличествоМатериала,
	|	проф_ЗаменаНаАналоги.КоличествоУпаковокАналога КАК КоличествоУпаковокАналога,
	|	проф_ЗаменаНаАналоги.КоличествоУпаковокМатериала КАК КоличествоУпаковокМатериала
	|ПОМЕСТИТЬ втТаблицаДанных
	|ИЗ
	|	РегистрСведений.проф_ЗаменаНаАналоги КАК проф_ЗаменаНаАналоги
	|ГДЕ
	|	проф_ЗаменаНаАналоги.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Регистратор,
	|	&Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	&Разрешение,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|	&НоменклатураАналог,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|	&КоличествоАналога,
	|	&КоличествоКЗамене,
	|	&КоличествоАналога,
	|	&КоличествоКЗамене
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанных.Период КАК Период,
	|	втТаблицаДанных.Регистратор КАК Регистратор,
	|	втТаблицаДанных.Номенклатура КАК Номенклатура,
	|	втТаблицаДанных.Характеристика КАК Характеристика,
	|	втТаблицаДанных.Разрешение КАК Разрешение,
	|	втТаблицаДанных.УпаковкаМатериала КАК УпаковкаМатериала,
	|	втТаблицаДанных.Аналог КАК Аналог,
	|	втТаблицаДанных.ХарактеристикаАналога КАК ХарактеристикаАналога,
	|	втТаблицаДанных.УпаковкаАналога КАК УпаковкаАналога,
	|	СУММА(втТаблицаДанных.КоличествоАналога) КАК КоличествоАналога,
	|	СУММА(втТаблицаДанных.КоличествоМатериала) КАК КоличествоМатериала,
	|	СУММА(втТаблицаДанных.КоличествоУпаковокАналога) КАК КоличествоУпаковокАналога,
	|	СУММА(втТаблицаДанных.КоличествоУпаковокМатериала) КАК КоличествоУпаковокМатериала
	|ИЗ
	|	втТаблицаДанных КАК втТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаДанных.УпаковкаМатериала,
	|	втТаблицаДанных.УпаковкаАналога,
	|	втТаблицаДанных.Регистратор,
	|	втТаблицаДанных.Период,
	|	втТаблицаДанных.Номенклатура,
	|	втТаблицаДанных.Характеристика,
	|	втТаблицаДанных.Разрешение,
	|	втТаблицаДанных.Аналог,
	|	втТаблицаДанных.ХарактеристикаАналога";
	
	Запрос.УстановитьПараметр("Регистратор",		СтруктураПараметров.Заказ);
	Запрос.УстановитьПараметр("Период",				СтруктураПараметров.Заказ.Дата);
	Запрос.УстановитьПараметр("Номенклатура",		СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Разрешение",			СтруктураПараметров.Разрешение);
	Запрос.УстановитьПараметр("НоменклатураАналог",	СтруктураПараметров.НоменклатураАналог);
	Запрос.УстановитьПараметр("КоличествоАналога",	СтруктураПараметров.КоличествоАналога);
	Запрос.УстановитьПараметр("КоличествоКЗамене",	СтруктураПараметров.КоличествоКЗамене);

	Набор = РегистрыСведений.проф_ЗаменаНаАналоги.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(СтруктураПараметров.Заказ);
	Набор.Прочитать();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать(Истина);	
	
КонецПроцедуры

//-- Проф-ИТ, #228, Соловьев А.А., 17.10.2023

//++ Проф-ИТ, #359, Соловьев А.А., 23.11.2023
#Область Назначения

// Возвращает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЗаказНаВнутреннееПотребление, ДанныеФормыСтруктура - заказ на внутреннее потребление, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		См. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.проф_Назначения.ШаблонНового();
	
	ШаблонНазначения.НаправлениеДеятельности = Объект.проф_НаправлениеДеятельности;
	
	ШаблонНазначения.Заказ = Объект.Ссылка;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти
//-- Проф-ИТ, #359, Соловьев А.А., 23.11.2023

#КонецОбласти