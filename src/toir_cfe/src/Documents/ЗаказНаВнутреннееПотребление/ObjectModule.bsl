
//++ Проф-ИТ, #228, Соловьев А.А., 08.09.2023
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа
//-- Проф-ИТ, #228, Соловьев А.А., 08.09.2023

#Область ОбработчикиСобытий

&ИзменениеИКонтроль("ПередЗаписью")
Процедура проф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	Если ПометкаУдаления <> Ссылка.ПометкаУдаления И торо_СозданПоПотребности И НЕ ДополнительныеСвойства.Свойство("УстановкаПометкиУдаленияОбработана") Тогда 
		ТекстСообщения = Нстр("ru = 'Невозможно изменить пометку удаления документа, автоматически созданного по потребности.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

	УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");

	Если НЕ Ссылка.Пустая() И
		#Вставка
		//++ Проф-ИТ, #228, Соловьев А.А., 20.10.2023
		БезусловнаяЗапись <> Истина И
		//-- Проф-ИТ, #228, Соловьев А.А., 20.10.2023
		#КонецВставки
		((РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления И Проведен)
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Таб.ЗаказНаВнутреннееПотребление КАК ДокИсточник
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров КАК Таб
		|ГДЕ
		|	Таб.ЗаказНаВнутреннееПотребление = &Ссылка
		|	И Таб.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление
		|ИЗ
		|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(, ЗаказНаВнутреннееПотребление = &Ссылка) КАК торо_РезервыНаСкладахОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление
		|ИЗ
		|	РегистрНакопления.торо_ТоварыНаРуках.Остатки(, ЗаказНаВнутреннееПотребление = &Ссылка) КАК торо_ТоварыНаРукахОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таб.ЗаказНаВнутреннееПотребление
		|ИЗ
		|	Документ.торо_ЗакрытиеЗаказаНаВнутреннееПотребление КАК Таб
		|ГДЕ
		|	Таб.ЗаказНаВнутреннееПотребление = &Ссылка
		|	И Таб.Ссылка.Проведен";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезЗапроса = Запрос.Выполнить();
		Если НЕ РезЗапроса.Пустой() Тогда
			Если (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления) Тогда
				ТекстСообщения = Нстр("ru='Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				ТекстСообщения = Нстр("ru='Невозможно проведение документа, есть документы, введенные на основании данного!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
			Возврат;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ИнтеграцияДокументов.ID КАК ID
		|ПОМЕСТИТЬ ВТ_IDРемонтов
		|ИЗ
		|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		|ГДЕ
		|	торо_ИнтеграцияДокументов.ДокументТОИР.Проведен = ИСТИНА
		|	И торо_ИнтеграцияДокументов.ДокументЕРП.Ссылка = &Ссылка
		|	И торо_ИнтеграцияДокументов.ДокументТОИР ССЫЛКА Документ.торо_ЗаявкаНаРемонт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ИнтеграцияДокументов.ID КАК ID
		|ИЗ
		|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		|ГДЕ
		|	торо_ИнтеграцияДокументов.ID В
		|			(ВЫБРАТЬ
		|				ВТ_IDРемонтов.ID КАК ID
		|			ИЗ
		|				ВТ_IDРемонтов КАК ВТ_IDРемонтов)
		|	И торо_ИнтеграцияДокументов.ДокументТОИР ССЫЛКА Документ.торо_АктОВыполненииЭтапаРабот
		|	И торо_ИнтеграцияДокументов.ДокументЕРП ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
		|	И торо_ИнтеграцияДокументов.ДокументТОИР.Проведен = ИСТИНА
		|	И торо_ИнтеграцияДокументов.ДокументЕРП.Проведен = ИСТИНА";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезЗапроса = Запрос.Выполнить();
		Если НЕ РезЗапроса.Пустой() Тогда
			Если (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления) Тогда
				ТекстСообщения = Нстр("ru='Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Иначе
				ТекстСообщения = Нстр("ru='Невозможно перепровести документ, так как имеются созданные на его основании проведенные документы!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ЭтоНовый() Тогда
		торо_Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	#Вставка 
	//++ Проф-ИТ, #253, Корнилов М.С., 12.01.2024
	ТаблицаСпецОдежда = Неопределено;
	Если Товары.Количество() > 0 Тогда
	    ТаблицаСпецОдежда = СоздатьТаблицуВидНоменклатурыСпецодежда();
	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьВидНоменклатуры(ТаблицаСпецОдежда, Отказ);
	КонецЕсли;
	//-- Проф-ИТ, #253, Корнилов М.С., 12.01.2024
	
	//++ Проф-ИТ, #73, Соловьев А.А., 08.09.2023
	Если проф_ХозяйственнаяОперация = Перечисления.проф_ХозяйственнаяОперация.СписаниеТоваровПоТребованию Тогда 
		Для Каждого СтрокаТовары Из Товары Цикл
			СтрокаТовары.проф_КатегорииЭксплуатации = Справочники.проф_КатегорииЭксплуатации.ПустаяСсылка();
			Если Не НоменклатураЯвляетсяСпецОдеждой(СтрокаТовары.Номенклатура, ТаблицаСпецОдежда) Тогда
			    СтрокаТовары.проф_ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();		
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	//-- Проф-ИТ, #73, Соловьев А.А., 08.09.2023
	
	//++ Проф-ИТ, #359, Соловьев А.А., 23.11.2023
	Если проф_ЗаказДляЗакупки Тогда 
		ШаблонНазначения = Документы.ЗаказНаВнутреннееПотребление.ШаблонНазначения(ЭтотОбъект);
		Справочники.проф_Назначения.ПроверитьЗаполнитьПередЗаписью(проф_Назначение, ШаблонНазначения, ЭтотОбъект, "проф_НаправлениеДеятельности", Отказ);
	КонецЕсли;
	//-- Проф-ИТ, #359, Соловьев А.А., 23.11.2023
	
	//++ Проф-ИТ, #401, Соловьев А.А., 11.12.2023
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		проф_ОбщегоНазначенияВызовСервера.ПроверитьПризнакПодразделенияОрганизации(ЭтотОбъект["Подразделение"], Отказ);
	КонецЕсли;
	//-- Проф-ИТ, #401, Соловьев А.А., 11.12.2023
	#КонецВставки
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаПроверкиЗаполнения")
Процедура проф_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)


	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;


	МассивНепроверяемыхРеквизитов = Новый Массив;

	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаОтгрузки");

	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Товары", "Отменено");	

	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ДатаОтгрузки) И 
		ДатаОтгрузки < НачалоДня(Дата) Тогда

		ШаблонСообщения = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Дата,"ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаОтгрузки",, Отказ);

	КонецЕсли;

	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	Если ФОИспользоватьХарактеристикиНоменклатуры = Истина тогда
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	КонецЕсли;

	// ТОИР-->
	Если Не Константы.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление.Получить() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("торо_СтатусУтверждения");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.торо_СтатусУтверждения");
	КонецЕсли;
	// <--ТОИР

	#Вставка  
	//++ Проф-ИТ, #253, Корнилов М.С., 12.01.2024
	ТаблицаСпецОдежда = СоздатьТаблицуВидНоменклатурыСпецодежда();
	//-- Проф-ИТ, #253, Корнилов М.С., 12.01.2024
	//++ Проф-ИТ, #73, Соловьев А.А., 08.09.2023
	Если проф_ХозяйственнаяОперация <> Перечисления.проф_ХозяйственнаяОперация.ПередачаВЭксплуатацию Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("Товары.проф_КатегорииЭксплуатации");  
		Если Товары.Количество() > 0  
			И НЕ НоменклатураЯвляетсяСпецОдеждой(Товары[0].Номенклатура, ТаблицаСпецОдежда) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.проф_ФизическоеЛицо");	
		КонецЕсли;
	КонецЕсли;	
	
	Если проф_ЗаказДляЗакупки Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("проф_Назначение");
	КонецЕсли;	
	//-- Проф-ИТ, #73, Соловьев А.А., 08.09.2023
	
	//++ Проф-ИТ, #418, Корнилов М.С., 12.01.2024
	Если Не ЗначениеЗаполнено(ЭтотОбъект["проф_ТипЗаказа"]) Тогда
		проф_ЗаполнитьТипЗаказа();
	КонецЕсли;
	//-- Проф-ИТ, #418, Корнилов М.С., 12.01.2024
	
	//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если СтрокаТЧ.Отменено И Не ЗначениеЗаполнено(СтрокаТЧ.проф_ПричинаОтмены) Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена причина отмены в строке %1'"), СтрокаТЧ.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "проф_ПричинаОтмены");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ И ЗначениеЗаполнено(ДокументОснование) 
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ПроверитьЗаполнитьПризнакОтмененоОснования(Отказ);
	КонецЕсли;
	//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024
	#КонецВставки
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура проф_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// ТОиР
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("МассивСтрокНоменклатуры") 
		Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		#Вставка 
		//++ Проф-ИТ, #205, Карпов Д. Ю., 20.09.2023	
		ОснованиеЯвляетсяЗаявкаНаРемонт = ДанныеЗаполнения.Свойство("ДокументОснование") 
												и ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт");
		//-- Проф-ИТ, #205, Карпов Д. Ю., 20.09.2023
		#КонецВставки
				
		Для каждого Строка Из ДанныеЗаполнения.МассивСтрокНоменклатуры Цикл
			НС = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Строка);
			НС.КоличествоУпаковок = Строка.Количество;
			#Вставка 
			//++ Проф-ИТ, #205, Карпов Д. Ю., 20.09.2023  
			Если ОснованиеЯвляетсяЗаявкаНаРемонт Тогда
				НС = проф_ТоварыИсточника.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Строка);
				НС.КоличествоУпаковок = Строка.Количество; 
			КонецЕсли;
			//-- Проф-ИТ, #205, Карпов Д. Ю., 20.09.2023
			#КонецВставки

		КонецЦикла; 
		#Вставка 
		//++ Проф-ИТ, #205, Карпов Д. Ю., 20.09.2023 
		Если ОснованиеЯвляетсяЗаявкаНаРемонт Тогда
			Товары.Свернуть("Номенклатура,Характеристика,проф_ПризнакЗапчасти","КоличествоУпаковок,Количество");
			УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары"); 
			Для каждого строка из Товары Цикл
				НС = проф_ТоварыИсточника.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",строка.Номенклатура,строка.Характеристика));
				Для каждого стр из НС Цикл
					стр.КодСтроки = строка.КодСтроки;
				КонецЦикла;
			КонецЦикла; 
		//++ Проф-ИТ, #334, Сергеев Д.Н., 02.11.2023
		торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден;
		//-- Проф-ИТ, #334, Сергеев Д.Н., 02.11.2023	
		КонецЕсли;    
		//-- Проф-ИТ, #205, Карпов Д. Ю., 20.09.2023
		#КонецВставки
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	Если Константы.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление.Получить() Тогда
	    торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении;
		
		Для каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияСтрокЗаказовНаВП.НаУтверждении;
		КонецЦикла;
	КонецЕсли;
	// ТОиР
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура проф_ОбработкаПроведения(Отказ, РежимПроведения)
	//++ Проф-ИТ, #205, Карпов Д.Ю., 21.09.2023 
	Если НЕ Отказ и ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		Если ДополнительныеСвойства.Свойство("ПроверкаПерезаполненияМатреиалов") Тогда
			Возврат;
		КонецЕсли;

		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Номенклатура КАК Номенклатура,
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Характеристика КАК ХарактеристикаНоменклатуры,
				//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
				//|	ВЫБОР
				//|		КОГДА ЗаказНаВнутреннееПотреблениеТовары.Отменено
				//|			ТОГДА 0
				//|		ИНАЧЕ ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок
				//|	КОНЕЦ КАК Количество,
				|	ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок КАК Количество,
				//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.ID КАК ID,
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Серия КАК Серия,
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Упаковка КАК ЕдиницаИзмерения,
				|	ЕСТЬNULL(ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураЗамененная,
				|	ЕСТЬNULL(ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаЗамененная
				|ПОМЕСТИТЬ ВТ_ПризнакЗапчастиИстина
				|ИЗ
				|	Документ.ЗаказНаВнутреннееПотребление.проф_ТоварыИсточника КАК ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
				|			ПО (ЗаказНаВнутреннееПотреблениеТовары.Ссылка = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка)
				|				И (ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиАналога = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки)
				|		ПО (ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Ссылка = ЗаказНаВнутреннееПотреблениеТовары.Ссылка)
				|			И (ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.КодСтроки = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки)
				|ГДЕ
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Ссылка = &Ссылка
				|	И ЗаказНаВнутреннееПотреблениеТовары.проф_ПризнакЗапчасти
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Номенклатура КАК Номенклатура,
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Характеристика КАК ХарактеристикаНоменклатуры,
				//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
				//|	ВЫБОР
				//|		КОГДА ЗаказНаВнутреннееПотреблениеТовары.Отменено
				//|			ТОГДА 0
				//|		ИНАЧЕ ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок
				//|	КОНЕЦ КАК Количество,
				|	ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок КАК Количество,
				//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.ID КАК ID,
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Серия КАК Серия,
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Упаковка КАК ЕдиницаИзмерения,
				|	ЕСТЬNULL(ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураЗамененная,
				|	ЕСТЬNULL(ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаЗамененная
				|ПОМЕСТИТЬ ВТ_ПризнакЗапчастиЛожь
				|ИЗ
				|	Документ.ЗаказНаВнутреннееПотребление.проф_ТоварыИсточника КАК ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.торо_ЗамененныеАналогамиМатериалы КАК ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы
				|			ПО ЗаказНаВнутреннееПотреблениеТовары.Ссылка = ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.Ссылка
				|				И (ЗаказНаВнутреннееПотреблениеторо_ЗамененныеАналогамиМатериалы.КодСтрокиНоменклатуры = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки)
				|		ПО ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Ссылка = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
				|			И ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.КодСтроки = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки
				|ГДЕ
				|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.Ссылка = &Ссылка
				|	И ЗаказНаВнутреннееПотреблениеТовары.проф_ПризнакЗапчасти = ЛОЖЬ
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ПризнакЗапчастиИстина.НоменклатураЗамененная КАК Номенклатура,
				|	ВТ_ПризнакЗапчастиИстина.ХарактеристикаЗамененная КАК ХарактеристикаНоменклатуры,
				|	ВТ_ПризнакЗапчастиИстина.ID КАК ID,
				|	ВТ_ПризнакЗапчастиИстина.РемонтыОборудования_ID КАК РемонтыОборудования_ID
				|ИЗ
				|	ВТ_ПризнакЗапчастиИстина КАК ВТ_ПризнакЗапчастиИстина
				|ГДЕ
				|	ВТ_ПризнакЗапчастиИстина.НоменклатураЗамененная <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)

				|СГРУППИРОВАТЬ ПО
				|	ВТ_ПризнакЗапчастиИстина.НоменклатураЗамененная,
				|	ВТ_ПризнакЗапчастиИстина.ХарактеристикаЗамененная,
				|	ВТ_ПризнакЗапчастиИстина.ID,
				|	ВТ_ПризнакЗапчастиИстина.РемонтыОборудования_ID
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ПризнакЗапчастиЛожь.НоменклатураЗамененная КАК Номенклатура,
				|	ВТ_ПризнакЗапчастиЛожь.ХарактеристикаЗамененная КАК ХарактеристикаНоменклатуры,
				|	ВТ_ПризнакЗапчастиЛожь.ID КАК ID,
				|	ВТ_ПризнакЗапчастиЛожь.РемонтыОборудования_ID КАК РемонтыОборудования_ID
				|ИЗ
				|	ВТ_ПризнакЗапчастиЛожь КАК ВТ_ПризнакЗапчастиЛожь
				|ГДЕ
				|	ВТ_ПризнакЗапчастиЛожь.НоменклатураЗамененная <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)

				|СГРУППИРОВАТЬ ПО
				|	ВТ_ПризнакЗапчастиЛожь.НоменклатураЗамененная,
				|	ВТ_ПризнакЗапчастиЛожь.ХарактеристикаЗамененная,
				|	ВТ_ПризнакЗапчастиЛожь.ID,
				|	ВТ_ПризнакЗапчастиЛожь.РемонтыОборудования_ID
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ПризнакЗапчастиИстина.Номенклатура КАК Номенклатура,
				|	ВТ_ПризнакЗапчастиИстина.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	ВТ_ПризнакЗапчастиИстина.Количество КАК Количество,				 
				|	ВТ_ПризнакЗапчастиИстина.Количество КАК КоличествоЕдиниц,
				|	ВТ_ПризнакЗапчастиИстина.ID КАК ID,
				|	ВТ_ПризнакЗапчастиИстина.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
				|	ВТ_ПризнакЗапчастиИстина.Серия КАК Серия,
				|	ВТ_ПризнакЗапчастиИстина.ЕдиницаИзмерения КАК ЕдиницаИзмерения
				|ИЗ
				|	ВТ_ПризнакЗапчастиИстина КАК ВТ_ПризнакЗапчастиИстина
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ПризнакЗапчастиЛожь.Номенклатура КАК Номенклатура,
				|	ВТ_ПризнакЗапчастиЛожь.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	ВТ_ПризнакЗапчастиЛожь.Количество КАК Количество, 
				|	ВТ_ПризнакЗапчастиЛожь.Количество КАК КоличествоЕдиниц,
				|	ВТ_ПризнакЗапчастиЛожь.ID КАК ID,
				|	ВТ_ПризнакЗапчастиЛожь.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
				|	ВТ_ПризнакЗапчастиЛожь.Серия КАК Серия,
				|	ВТ_ПризнакЗапчастиЛожь.ЕдиницаИзмерения КАК ЕдиницаИзмерения
				|ИЗ
				|	ВТ_ПризнакЗапчастиЛожь КАК ВТ_ПризнакЗапчастиЛожь"; 
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Результат = Запрос.ВыполнитьПакет();
				
		ПроводитьДокумент = Ложь;
		ОснованиеОбъект = ДокументОснование.ПолучитьОбъект();
				
		ОбработатьТаблицыЗаявкиНаРемонт(ОснованиеОбъект.ЗапчастиРемонта
										,Результат[4].Выбрать()
										,Результат[2].Выбрать()
										,ПроводитьДокумент); 
										
		ОбработатьТаблицыЗаявкиНаРемонт(ОснованиеОбъект.МатериальныеЗатраты
										,Результат[5].Выбрать()
										,Результат[3].Выбрать()
										,ПроводитьДокумент);
										
		Если ПроводитьДокумент Тогда 
		Попытка
			ОснованиеОбъект.БезусловнаяЗапись = Истина;
			ОснованиеОбъект.ДополнительныеСвойства.Вставить("ПроверкаПерезаполненияМатреиалов");
			ОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);  
		Исключение   
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки(),,,,Отказ);
		КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	//-- Проф-ИТ, #205, Карпов Д.Ю., 21.09.2023
КонецПроцедуры

&После("ПриЗаписи")
Процедура проф_ПриЗаписи(Отказ)
	
	//++ Проф-ИТ, #359, Соловьев А.А., 23.11.2023
	Если проф_ЗаказДляЗакупки Тогда 
		ШаблонНазначения = Документы.ЗаказНаВнутреннееПотребление.ШаблонНазначения(ЭтотОбъект);
		НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(проф_НаправлениеДеятельности, "НалогообложениеНДС");
		Справочники.проф_Назначения.ПриЗаписиДокумента(проф_Назначение, ШаблонНазначения, ЭтотОбъект, Подразделение, НалогообложениеНДС);
	КонецЕсли;
	//-- Проф-ИТ, #359, Соловьев А.А., 23.11.2023
	
КонецПроцедуры

&После("ПриКопировании")
Процедура проф_ПриКопировании(ОбъектКопирования)
	
	проф_ДатаУтверждения = Дата(1, 1, 1);
	проф_КЗВП            = Неопределено;  
	проф_Назначение      = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
&После("ИнициализироватьДокумент")
Процедура проф_ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	//++ Проф-ИТ, #27, Соловьев А.А., 25.08.2023
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("проф_Назначение") Тогда 
		проф_Назначение = ДанныеЗаполнения.проф_Назначение;
	КонецЕсли;	
	//-- Проф-ИТ, #27, Соловьев А.А., 25.08.2023
	//++ Проф-ИТ, #73, Соловьев А.А., 31.08.2023
	торо_СтатусУтверждения = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый;
	//-- Проф-ИТ, #73, Соловьев А.А., 31.08.2023
	
КонецПроцедуры

//++ Проф-ИТ, #205, Карпов Д.Ю., 04.10.2023 

Процедура ОбработатьТаблицыЗаявкиНаРемонт(ТаблицаЗаявки,ВыборкаТовары,ВыборкаЗамененныеТовары,ПроводитьДокумент)
	
	Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	Работа = Перечисления.ТипыНоменклатуры.Работа;
	
	сч = ТаблицаЗаявки.Количество() - 1;
	Пока сч>=0 Цикл 
		
		СтрокаТаблицы = ТаблицаЗаявки[сч];  
		
		Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры = Услуга 
			ИЛИ СтрокаТаблицы.Номенклатура.ТипНоменклатуры = Работа Тогда
			сч = сч -1;
			Продолжить;
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаТаблицы);
		Если НЕ ВыборкаТовары.НайтиСледующий(СтруктураПоиска) Тогда 
			ТаблицаЗаявки.Удалить(СтрокаТаблицы);
		КонецЕсли;
		сч = сч -1;
		ВыборкаТовары.Сбросить();
	КонецЦикла;
	
	//Сначала пробежимся по замененной номенклатуре и удалим её из таблицы документа
	Пока ВыборкаЗамененныеТовары.Следующий() Цикл 
		СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаЗамененныеТовары);
		СтрокиТЧ = ТаблицаЗаявки.НайтиСтроки(СтруктураПоиска); 
		
		//Может возникнуть ситуация, что номенклатура лишь частично заменена на аналог
		//такую номенклатуру не удаляем, количество пересчитается позже
		Если НЕ ВыборкаТовары.НайтиСледующий(СтруктураПоиска) Тогда
			Для каждого строка из СтрокиТЧ Цикл 
				ТаблицаЗаявки.Удалить(строка);
				ПроводитьДокумент = Истина;
			КонецЦикла; 
		КонецЕсли; 
		ВыборкаТовары.Сбросить();
	КонецЦикла;
	
	Пока ВыборкаТовары.Следующий() Цикл
		СтруктураКоличество = Новый Структура("Количество,КоличествоЕдиниц"); 
		ЗаполнитьЗначенияСвойств(СтруктураКоличество,ВыборкаТовары);
		
		СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры"); 
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаТовары);
		СтрокиТЧ = ТаблицаЗаявки.НайтиСтроки(СтруктураПоиска);  
		Если СтрокиТЧ.Количество() = 0 Тогда
			Если ВыборкаТовары.Количество = 0 Тогда 
				Продолжить;
			КонецЕсли;
			//Если номенклатуры нет, то делаем новую запись
			НС = ТаблицаЗаявки.Добавить();
			ЗаполнитьЗначенияСвойств(НС,ВыборкаТовары); 
			ЗаполнитьЗначенияСвойств(НС,СтруктураКоличество);
			ПроводитьДокумент = Истина;
		ИначеЕсли СтрокиТЧ.Количество() > 1 Тогда
			//Если номенклатуры в документе несколько, то удалем все, оставляем лишь одну строку
			Для каждого строка из СтрокиТЧ Цикл
				ТаблицаЗаявки.Удалить(строка);
			КонецЦикла; 
			Если ВыборкаТовары.Количество = 0 Тогда 
				Продолжить;
			КонецЕсли;
			НС = ТаблицаЗаявки.Добавить();
			ЗаполнитьЗначенияСвойств(НС,ВыборкаТовары);
			ЗаполнитьЗначенияСвойств(НС,СтруктураКоличество);
			ПроводитьДокумент = Истина;
		Иначе   
			строка = СтрокиТЧ[0]; 
			//Если количество = 0, то номенклатура отменена, и из заявки нужно удалить
			Если ВыборкаТовары.Количество = 0 Тогда  
				ТаблицаЗаявки.Удалить(строка);
				ПроводитьДокумент = Истина;
			ИначеЕсли ВыборкаТовары.Количество <> строка.Количество Тогда 
				//Количество отличается, перезаписываем
				ЗаполнитьЗначенияСвойств(строка,СтруктураКоличество);
				ПроводитьДокумент = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//-- Проф-ИТ, #205, Карпов Д.Ю., 04.10.2023 

//++ Проф-ИТ, #253, Корнилов М.С., 12.01.2024

Процедура ПроверитьВидНоменклатуры(ТаблицаСпецОдежда, Отказ)
	
	НайденаСпецодежда = Ложь;  
	
	МассивОшибок = Новый Массив;
	ВсеПозицииСпецОдежда = Истина;
	Для каждого текСтрока Из ТаблицаСпецОдежда Цикл
		Если Не текСтрока.ВидНомСпецодежда Тогда  
			ВсеПозицииСпецОдежда = Ложь; 
			
			ТекстОшибки = НСтр("ru='""%1"" не относится к спецодежде. Заказ на спецодежду должен формироваться отдельно от других видов номенклатуры'"); 
			ТекстОшибки = СтрШаблон(ТекстОшибки, текСтрока.Номенклатура);
			
			НовОшибка = Новый Структура("НомерСтроки, ТекстОшибки");
			НовОшибка.НомерСтроки = текСтрока.НомерСтроки;
			НовОшибка.ТекстОшибки = ТекстОшибки;
			МассивОшибок.Добавить(НовОшибка);
		Иначе
			НайденаСпецодежда = Истина;	
		КонецЕсли; 
	КонецЦикла;  
	
	Если НайденаСпецодежда
		И НЕ ВсеПозицииСпецОдежда Тогда
		
		Для каждого текОшибка Из МассивОшибок Цикл
			ОбщегоНазначения.СообщитьПользователю(
				текОшибка.ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", текОшибка.НомерСтроки, "Номенклатура"),
				,
				Отказ);		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьТаблицуВидНоменклатурыСпецодежда()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	тНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ПОМЕСТИТЬ ВТ_ВидыНоменклатуры
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК тНоменклатура
		|		ПО ВТ_Товары.Номенклатура = тНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тСписок.Значение КАК Значение
		|ПОМЕСТИТЬ ВТ_НастройкиСистемы
		|ИЗ
		|	Справочник.проф_НастройкиСистемы.Список КАК тСписок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_НастройкиСистемы КАК проф_НастройкиСистемы
		|		ПО тСписок.Ссылка = проф_НастройкиСистемы.Ссылка
		|ГДЕ
		|	проф_НастройкиСистемы.Наименование = ""ВидыНоменклатурыСпецодежды""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВидыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВТ_ВидыНоменклатуры.НомерСтроки КАК НомерСтроки,
		|	ВТ_ВидыНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиСистемы.Значение ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВидНомСпецодежда,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТ_ВидыНоменклатуры.Номенклатура) КАК НоменклатураПредставление
		|ИЗ
		|	ВТ_ВидыНоменклатуры КАК ВТ_ВидыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиСистемы КАК ВТ_НастройкиСистемы
		|		ПО ВТ_ВидыНоменклатуры.ВидНоменклатуры = ВТ_НастройкиСистемы.Значение";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, "Номенклатура, НомерСтроки"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();	

КонецФункции

//-- Проф-ИТ, #253, Корнилов М.С., 12.01.2024

//++ Проф-ИТ, #418, Корнилов М.С., 12.01.2024
Процедура проф_ЗаполнитьТипЗаказа()

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда 
		проф_ТипЗаказа = Перечисления.проф_ТипЗаказа.ЗапасныеЧастиАвтоинструментКонтейнеры;	
	КонецЕсли;                                                                             
	
	Если ДокументОснование = Неопределено Тогда 
		МассивВидыНоменклатуры = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("Спецодежда", "ВидыНоменклатурыСпецодежды");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спр_Номенклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|			ПО спр_Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		|		ПО ВТ_Товары.Номенклатура = спр_Номенклатура.Ссылка
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка В(&МассивВидыНоменклатуры)";
		
		Запрос.УстановитьПараметр("Товары", Товары);
		Запрос.УстановитьПараметр("МассивВидыНоменклатуры", МассивВидыНоменклатуры);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда 
			проф_ТипЗаказа = Перечисления.проф_ТипЗаказа.СпецодеждаСИЗ;		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//-- Проф-ИТ, #418, Корнилов М.С., 12.01.2024

//++ Проф-ИТ, #253, Корнилов М.С., 12.01.2024
Функция НоменклатураЯвляетсяСпецОдеждой(Номенклатура, ТабСпецОдежда)
	
	НайденнаяСтрока = ТабСпецОдежда.Найти(Номенклатура, "Номенклатура");
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.ВидНомСпецодежда;	
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции
//-- Проф-ИТ, #253, Корнилов М.С., 12.01.2024

//++ Проф-ИТ, #424, Соловьев А.А., 16.01.2024
Процедура ПроверитьЗаполнитьПризнакОтмененоОснования(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНаВнутреннееПотреблениеТовары.проф_ПричинаОтмены КАК проф_ПричинаОтмены,
	|	ЗаказНаВнутреннееПотреблениеТовары.проф_Отменил КАК проф_Отменил,
	|	ЗаказНаВнутреннееПотреблениеТовары.КодСтроки КАК КодСтроки,
	|	&ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втДанныеТовары
	|ИЗ
	|	&Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.ID КАК ID,
	|	ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	втДанныеТовары.проф_ПричинаОтмены КАК проф_ПричинаОтмены,
	|	втДанныеТовары.проф_Отменил КАК проф_Отменил,
	|	втДанныеТовары.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втДанныеЗаказа
	|ИЗ
	|	втДанныеТовары КАК втДанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.проф_ТоварыИсточника КАК ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника
	|		ПО втДанныеТовары.КодСтроки = ЗаказНаВнутреннееПотреблениепроф_ТоварыИсточника.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID КАК ID,
	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	втДанныеЗаказа.проф_ПричинаОтмены КАК проф_ПричинаОтмены,
	|	втДанныеЗаказа.проф_Отменил КАК проф_Отменил,
	|	ИСТИНА КАК проф_Отменено
	|ИЗ
	|	втДанныеЗаказа КАК втДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.МатериальныеЗатраты КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
	|		ПО втДанныеЗаказа.ДокументОснование = торо_ЗаявкаНаРемонтМатериальныеЗатраты.Ссылка
	|			И втДанныеЗаказа.Номенклатура = торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура
	|			И втДанныеЗаказа.ID = торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID
	|			И втДанныеЗаказа.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID
	|			И (НЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.проф_Отменено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура КАК Номенклатура,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ID КАК ID,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	втДанныеЗаказа.проф_ПричинаОтмены КАК проф_ПричинаОтмены,
	|	втДанныеЗаказа.проф_Отменил КАК проф_Отменил,
	|	ИСТИНА КАК проф_Отменено
	|ИЗ
	|	втДанныеЗаказа КАК втДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ЗапчастиРемонта КАК торо_ЗаявкаНаРемонтЗапчастиРемонта
	|		ПО втДанныеЗаказа.ДокументОснование = торо_ЗаявкаНаРемонтЗапчастиРемонта.Ссылка
	|			И втДанныеЗаказа.Номенклатура = торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура
	|			И втДанныеЗаказа.ID = торо_ЗаявкаНаРемонтЗапчастиРемонта.ID
	|			И втДанныеЗаказа.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID
	|			И (НЕ торо_ЗаявкаНаРемонтЗапчастиРемонта.проф_Отменено)";
	
	СтруктураОтбора = Новый Структура("Отменено", Истина);
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(СтруктураОтбора, "Номенклатура, проф_ПричинаОтмены, проф_Отменил, КодСтроки"));
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[2].Пустой() И РезультатЗапроса[3].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыборкаМатериальныеЗатраты = РезультатЗапроса[2].Выбрать();
	ВыборкаЗапчастиРемонта = РезультатЗапроса[3].Выбрать();
	
	ЗаявкаНаРемонтОбъект = ДокументОснование.ПолучитьОбъект();
	
	Пока ВыборкаМатериальныеЗатраты.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Номенклатура, ID, РемонтыОборудования_ID");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаМатериальныеЗатраты);
		СтрокиТЧ = ЗаявкаНаРемонтОбъект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаМатериальныеЗатраты);
		КонецЦикла;
	КонецЦикла;
	
	Пока ВыборкаЗапчастиРемонта.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Номенклатура, ID, РемонтыОборудования_ID");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаЗапчастиРемонта);
		СтрокиТЧ = ЗаявкаНаРемонтОбъект.ЗапчастиРемонта.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаЗапчастиРемонта);
		КонецЦикла;
	КонецЦикла;
	
	Попытка
		ЗаявкаНаРемонтОбъект.Записать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ %1 по причине: ""%2""'"), ДокументОснование, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);
	КонецПопытки;
	
КонецПроцедуры
//-- Проф-ИТ, #424, Соловьев А.А., 16.01.2024

#КонецОбласти
