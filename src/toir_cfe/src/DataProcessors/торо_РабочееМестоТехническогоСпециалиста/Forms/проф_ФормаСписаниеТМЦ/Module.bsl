//++ Проф-ИТ, #329, Соловьев А.А., 08.11.2023

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗакрытыеАкты(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьПолнуюТаблицуРасшифровки();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытыеАкты(Команда)
	
	Элементы.АктыИЗаказыЗакрытыеАкты.Пометка = Не Элементы.АктыИЗаказыЗакрытыеАкты.Пометка;
	
	ЭтотОбъект.АктыИЗаказы.Отбор.Элементы.Очистить();
	
	Если Элементы.АктыИЗаказыЗакрытыеАкты.Пометка Тогда 
		
		ЭлементОтбора = ЭтотОбъект.АктыИЗаказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗавершитьРемонтныеРаботы");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Элементы.АктыИЗаказыЗакрытыеАкты.Пометка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицы(Команда)
	
	ОбновлениеТаблиц(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКоличествоНеСписанныхТМЦ(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.проф_КоличествоНеСписанныхТМЦ.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйДокументВнутреннееПотребление(Команда)
	
	ТекущиеДанные = Элементы.АктыИЗаказы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ДанныеДокументаАктОВыполненииЭтапаРабот(ТекущиеДанные.АктПоРемонту, ТекущиеДанные.ВнутреннееПотребление);
	
	Если СтруктураПараметров = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.МассивСтрокНоменклатуры.Количество() = 0 Тогда
		
		СтруктураПараметровОповещения = Новый Структура("МассивID, СтрокаКомментария", 
			СтруктураПараметров.МассивID, СтруктураПараметров.СтрокаКомментария);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗаказЗавершение", ЭтотОбъект, СтруктураПараметровОповещения);
		СтрокаВопроса = НСтр("ru = 'По ремонту отсутствуют материальные затраты или по всем материальным затратам
			|созданы заказы на потребление. Ввести новый заказ на внутреннее потребление?'");
		ПоказатьВопрос(ОписаниеОповещения, СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("МассивID", СтруктураПараметров.МассивID);
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("АктПоРемонту", ТекущиеДанные.АктПоРемонту);
	
	СтруктураПараметровДокумента = Новый Структура("ЗначенияЗаполнения", СтруктураПараметров);
	СтруктураПараметровДокумента.Вставить("ID", СтруктураПараметров.МассивID);
	
	ИмяОбработчика = "ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный";
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяОбработчика, ЭтаФорма, СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента", 
		СтруктураПараметровДокумента, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписаниеНеТребуется(Команда)
	
	ВыбранныеСтроки = Расшифровка.НайтиСтроки(Новый Структура("СформироватьДокумент", Истина));
	
	Если ВыбранныеСтроки.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Выберите строки для создания документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеАкт = Элементы.АктыИЗаказы.ТекущиеДанные;
	СписаниеНеТребуетсяНаСервере(ТекущиеДанныеАкт.АктПоРемонту);
	ОбновлениеТаблиц(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктыИЗаказы

&НаКлиенте
Процедура АктыИЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.АктыИЗаказы.ТекущиеДанные;
	Если Поле.Имя <> "АктыИЗаказыДатаЗавершенияРемонта" Тогда 
		ИмяКолонки = СтрЗаменить(Поле.Имя, "АктыИЗаказы", "");
		ПоказатьЗначение(, ТекущиеДанные[ИмяКолонки]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктыИЗаказыПриАктивизацииСтроки(Элемент)
	
	Расшифровка.Очистить();
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбора = Новый Структура("АктПоРемонту", ТекущиеДанные.АктПоРемонту);
		СтрокиРасшифровки = РасшифровкаПолная.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
			НоваяСтрока = Расшифровка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаСформироватьДокумент.Имя);
	ПолеПравоеЗначение = Новый ПолеКомпоновкиДанных("Расшифровка.КоличествоВП");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, 
		"Расшифровка.КоличествоАкт", ВидСравненияКомпоновкиДанных.Равно, ПолеПравоеЗначение, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолнуюТаблицуРасшифровки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	проф_ОстатокТМЦКСписаниюПоЗакрытымАктамНаРемонтОстатки.АктОВыполненииЭтапаРабот КАК АктОВыполненииЭтапаРабот,
	|	проф_ОстатокТМЦКСписаниюПоЗакрытымАктамНаРемонтОстатки.Номенклатура КАК Номенклатура,
	|	проф_ОстатокТМЦКСписаниюПоЗакрытымАктамНаРемонтОстатки.Характеристика КАК Характеристика,
	|	проф_ОстатокТМЦКСписаниюПоЗакрытымАктамНаРемонтОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.проф_ОстатокТМЦКСписаниюПоЗакрытымАктамНаРемонт.Остатки КАК проф_ОстатокТМЦКСписаниюПоЗакрытымАктамНаРемонтОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстатки.АктОВыполненииЭтапаРабот КАК АктПоРемонту,
	|	проф_СоответствиеАктовИВнутреннегоПотребления.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотребление,
	|	втОстатки.Номенклатура КАК Номенклатура,
	|	втОстатки.Характеристика КАК Характеристика,
	|	втОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ втСоответвие
	|ИЗ
	|	втОстатки КАК втОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.проф_СоответствиеАктовИВнутреннегоПотребления КАК проф_СоответствиеАктовИВнутреннегоПотребления
	|		ПО втОстатки.АктОВыполненииЭтапаРабот = проф_СоответствиеАктовИВнутреннегоПотребления.АктОВыполненииЭтапаРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоответвие.АктПоРемонту КАК АктПоРемонту,
	|	втСоответвие.ВнутреннееПотребление КАК ВнутреннееПотребление,
	|	втСоответвие.Номенклатура КАК НоменклатураАкт,
	|	втСоответвие.Характеристика КАК ХарактеристикаАкт,
	|	втСоответвие.КоличествоОстаток КАК КоличествоАкт,
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура КАК НоменклатураВП,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика КАК ХарактеристикаВП,
	|	ВнутреннееПотреблениеТоваровТовары.Количество КАК КоличествоВП
	|ИЗ
	|	втСоответвие КАК втСоответвие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|		ПО втСоответвие.ВнутреннееПотребление = ВнутреннееПотреблениеТоваровТовары.Ссылка
	|			И втСоответвие.Номенклатура = ВнутреннееПотреблениеТоваровТовары.Номенклатура
	|			И втСоответвие.Характеристика = ВнутреннееПотреблениеТоваровТовары.Характеристика
	|			И втСоответвие.КоличествоОстаток = ВнутреннееПотреблениеТоваровТовары.Количество
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСоответвие.АктПоРемонту,
	|	втСоответвие.ВнутреннееПотребление,
	|	втСоответвие.Номенклатура,
	|	втСоответвие.Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Количество,
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Количество
	|ИЗ
	|	втСоответвие КАК втСоответвие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|		ПО втСоответвие.ВнутреннееПотребление = ВнутреннееПотреблениеТоваровТовары.Ссылка
	|			И втСоответвие.Номенклатура = ВнутреннееПотреблениеТоваровТовары.Номенклатура
	|			И втСоответвие.Характеристика = ВнутреннееПотреблениеТоваровТовары.Характеристика
	|			И втСоответвие.КоличествоОстаток > ВнутреннееПотреблениеТоваровТовары.Количество
	|ГДЕ
	|	ЕСТЬNULL(ВнутреннееПотреблениеТоваровТовары.Количество, 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСоответвие.АктПоРемонту,
	|	втСоответвие.ВнутреннееПотребление,
	|	втСоответвие.Номенклатура,
	|	втСоответвие.Характеристика,
	|	втСоответвие.КоличествоОстаток - ЕСТЬNULL(ВнутреннееПотреблениеТоваровТовары.Количество, 0),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0
	|ИЗ
	|	втСоответвие КАК втСоответвие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|		ПО втСоответвие.ВнутреннееПотребление = ВнутреннееПотреблениеТоваровТовары.Ссылка
	|			И втСоответвие.Номенклатура = ВнутреннееПотреблениеТоваровТовары.Номенклатура
	|			И втСоответвие.Характеристика = ВнутреннееПотреблениеТоваровТовары.Характеристика
	|			И (втСоответвие.КоличествоОстаток > ЕСТЬNULL(ВнутреннееПотреблениеТоваровТовары.Количество, 0))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСоответвие.АктПоРемонту,
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка,
	|	втСоответвие.Номенклатура,
	|	втСоответвие.Характеристика,
	|	втСоответвие.КоличествоОстаток,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0
	|ИЗ
	|	втСоответвие КАК втСоответвие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|		ПО втСоответвие.ВнутреннееПотребление = ВнутреннееПотреблениеТоваровТовары.Ссылка
	|			И втСоответвие.Номенклатура = ВнутреннееПотреблениеТоваровТовары.Номенклатура
	|			И втСоответвие.Характеристика = ВнутреннееПотреблениеТоваровТовары.Характеристика
	|ГДЕ
	|	ВнутреннееПотреблениеТоваровТовары.Количество ЕСТЬ NULL";
	
	РасшифровкаПолная.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеТаблиц(ОбновитьРасшифровку)
	
	Элементы.АктыИЗаказы.Обновить();
	Если ОбновитьРасшифровку Тогда 
		ЗаполнитьПолнуюТаблицуРасшифровки();
	КонецЕсли;
	АктыИЗаказыПриАктивизацииСтроки(Элементы.АктыИЗаказы);
	
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСводный(Результат, ДополнительныеПараметры) Экспорт
	
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);
	ОбновлениеТаблиц(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДокументаАктОВыполненииЭтапаРабот(ДокументСсылка, ВнутреннееПотребление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРабот.Организация КАК Организация,
	|	торо_АктОВыполненииЭтапаРабот.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = торо_АктОВыполненииЭтапаРабот.Ссылка
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРабот.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.Количество КАК Количество,
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.Сумма КАК Сумма,
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.КоличествоЕдиниц КАК КоличествоЕдиниц
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.МатериальныеЗатраты КАК торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботМатериальныеЗатраты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура КАК Номенклатура,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры КАК СерияНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая КАК НоменклатураНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая КАК ХарактеристикаНоменклатурыНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая КАК СерияНоменклатурыНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ КАК СтатусДвиженияСерийныхЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество КАК Количество,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ КАК СтатусДвиженияНовойЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ЕдиницаИзмеренияНовая КАК ЕдиницаИзмеренияНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое КАК КоличествоНовое
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.СерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	
	ШаблонКомментария = "%1 %2 %3 %4 - %5";
	
	МассивID = Новый Массив;
	
	СтрокаКомментария = "";
	
	Пока Выборка.Следующий() Цикл
		СтрокаКомментария = СтрШаблон(ШаблонКомментария, Строка(ДокументСсылка), Выборка.ОбъектРемонта,
			Выборка.ВидРемонтныхРабот, Выборка.ДатаНачала, Выборка.ДатаОкончания);
		
		МассивID.Добавить(Выборка.ID);
		Организация = Выборка.Организация;
		Подразделение = Выборка.Подразделение;
	КонецЦикла;
	
	МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКСписаниюНаСервере(РезультатЗапроса, ВнутреннееПотребление);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	ЗначенияЗаполнения.Вставить("Подразделение", Подразделение);
	ЗначенияЗаполнения.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
	ЗначенияЗаполнения.Вставить("КлючНазначенияИспользования", "СОЗДАНИЕ_ПОТРЕБЛЕНИЯ_ИЗ_ТОИР");
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры", МассивСтрокНоменклатуры);
	ЗначенияЗаполнения.Вставить("Комментарий", СтрокаКомментария);
	ЗначенияЗаполнения.Вставить("МассивID", МассивID);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьМассивНоменклатурыКСписаниюНаСервере(РезультатЗапроса, ВнутреннееПотребление)
	
	УжеСписаннаяНоменклатура = ПолучитьТаблицуСписаннойНоменклатуры(ВнутреннееПотребление);
	
	НоменклатураКЗаказу = РезультатЗапроса[1].Выгрузить();
	Запчасти = РезультатЗапроса[2].Выгрузить();
	
	НоменклатураКЗаказу.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	Для Каждого Строка Из Запчасти Цикл
		НС = НоменклатураКЗаказу.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка);
		НС.Номенклатура = Строка.НоменклатураНовая;
		НС.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатурыНовая;
		НС.Количество = Строка.КоличествоНовое;
		НС.ЕдиницаИзмерения = Строка.ЕдиницаИзмеренияНовая;
		НС.КоличествоЕдиниц = Строка.КоличествоНовое;
		НС.Серия = Строка.СерияНоменклатурыНовая;
		НС.ХарактеристикиИспользуются = Строка.ХарактеристикиИспользуютсяДляНовой;
	КонецЦикла;
	
	Для Каждого Стр Из НоменклатураКЗаказу Цикл 
		Если Не ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда 
			Стр.КоличествоЕдиниц = Стр.Количество * 1;
		КонецЕсли;
	КонецЦикла;
		
	НоменклатураКЗаказу.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Серия", "КоличествоЕдиниц");
	
	МассивТовары = Новый Массив;
	Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	Работа = Перечисления.ТипыНоменклатуры.Работа;
	
	Для Каждого Строка Из НоменклатураКЗаказу Цикл
		
		Если Строка.Номенклатура.ТипНоменклатуры = Услуга
			ИЛИ Строка.Номенклатура.ТипНоменклатуры = Работа Тогда
			Продолжить;
		КонецЕсли; 
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеСписаннаяНоменклатура.Количество() > 0 Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика",
				Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры);
				
			НайдСтроки = УжеСписаннаяНоменклатура.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого НайденнаяСтрока Из НайдСтроки Цикл
				КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
			КонецЦикла; 
		КонецЕсли;
		
		Если УжеСписаннаяНоменклатура.Количество() = 0
			Или Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Количество, Серия",
				Строка.Номенклатура,
				Строка.ХарактеристикаНоменклатуры,
				Ложь,
				(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры),
				Строка.Серия);
			МассивТовары.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивТовары;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуСписаннойНоменклатуры(ВнутреннееПотребление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	СУММА(ТоварыНаСкладах.ВНаличии) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|ГДЕ 
	|	ТоварыНаСкладах.Регистратор = &ВнутреннееПотребление
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика";
	
	Запрос.УстановитьПараметр("ВнутреннееПотребление", ВнутреннееПотребление);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Функция СформироватьМассивНоменклатурыКЗаказуСервере(ID)
	
	//УжеЗаказаннаяНоменклатура = ПолучитьТаблицуЗаказаннойНоменклатуры(ID);
	//
	//Если ТипЗнч(ID) = Тип("Массив") Тогда
	//	НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить();
	//	ЗапчастиКСписанию = Объект.ЗапчастиРемонта.Выгрузить();
	//Иначе
	//	НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	//	ЗапчастиКСписанию = Объект.ЗапчастиРемонта.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	//КонецЕсли;	
	//
	//Для Каждого СтрокаЗапчасти Из ЗапчастиКСписанию Цикл
	//	СтрокаНоменклатуры = НоменклатураКСписанию.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, СтрокаЗапчасти);
	//	СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаЗапчасти.Количество;
	//КонецЦикла;

	//НоменклатураКСписанию.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоЕдиниц");
	//
	//Товары = Новый Массив;
	//Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	//Работа = Перечисления.ТипыНоменклатуры.Работа;
	//	
	//Для Каждого Строка Из НоменклатураКСписанию Цикл
	//	
	//	Если Строка.Номенклатура.ТипНоменклатуры = Услуга 
	//		ИЛИ Строка.Номенклатура.ТипНоменклатуры = Работа Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	КоличествоУжеЗаказаннойНоменклатуры = 0;
	//	
	//	Если УжеЗаказаннаяНоменклатура.Количество() > 0 Тогда
	//		НайдСтроки = УжеЗаказаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
	//		
	//		Если Не НайдСтроки = Неопределено Тогда
	//			Для Каждого НайденнаяСтрока Из НайдСтроки Цикл
	//				КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
	//			КонецЦикла; 
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если УжеЗаказаннаяНоменклатура.Количество() = 0
	//		ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
	//		
	//		Структура = Новый Структура("Номенклатура, Характеристика, Количество",
	//		Строка.Номенклатура,
	//		Строка.ХарактеристикаНоменклатуры,
	//		(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры));
	//		Товары.Добавить(Структура);
	//		
	//	КонецЕсли;	
	//	
	//КонецЦикла;
	//
	//Если Товары.Количество() > 0 Тогда
	//	Возврат Товары;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура СписаниеНеТребуетсяНаСервере(АктПоРемонту)
	
	НовыйДокумент = Документы.проф_СписаниеТМЦНеТребуется.СоздатьДокумент();
	НовыйДокумент.Автор = ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.АктОВыполненииЭтапаРабот = АктПоРемонту;
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	
	ВыбранныеСтроки = Расшифровка.НайтиСтроки(Новый Структура("СформироватьДокумент", Истина));
	
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		
		НоваяСтрока = НовыйДокумент.Товары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.НоменклатураАкт;
		НоваяСтрока.Характеристика = СтрокаТЧ.ХарактеристикаАкт;
		НоваяСтрока.Количество = СтрокаТЧ.КоличествоАкт;
		
	КонецЦикла;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан документ %1'"), НовыйДокумент.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, НовыйДокумент.Ссылка);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать документ по причине: %1'"), ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	ЗаполнитьПолнуюТаблицуРасшифровки();
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры)
	
	Если Результат <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Документы.торо_АктОВыполненииЭтапаРабот.проф_ДвиженияПоРегистру_проф_СоответствиеАктовИВнутреннегоПотребления(ДополнительныеПараметры.АктПоРемонту);
		ЗаполнитьПолнуюТаблицуРасшифровки();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- Проф-ИТ, #329, Соловьев А.А., 08.11.2023