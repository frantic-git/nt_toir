
//++ Проф-ИТ, #225, Башинская А., 13.10.2023	

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Сохраните файл";  
	ДиалогОткрытияФайла.Расширение = "json";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Путь = ДиалогОткрытияФайла.ПолноеИмяФайла;  
	КонецЕсли;
	
	СериализацияВJson(Путь); 
	ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("Создан файл %1", Путь));
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если ПроверитьЗаполнение() Тогда 
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = "Выберите файл для загрузки";
		Фильтр = НСтр("ru = 'json'; en = 'json'")
								+ "(*.json)";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Путь = ДиалогОткрытияФайла.ПолноеИмяФайла; 
		КонецЕсли;
		
		ДеСериализацияJson(Путь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

 &НаКлиенте
Процедура ДеСериализацияJsonЗавершение(ОписаниеПомещенногоФайла, Дополнительно) Экспорт
	
	ДеСериализацияJsonНаСервере(ОписаниеПомещенногоФайла.Адрес);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СериализацияВJson(Путь)

	АдресДокументаВХранилище = СериализацияНаСервере();
	НачатьПолучениеФайлаССервера(, АдресДокументаВХранилище, Путь);  
	
КонецПроцедуры	

&НаСервере
Функция СериализацияНаСервере()
	
	ИмяФайла = ПолучитьИмяВременногоФайла("json");	
	Запись = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	Запись.ОткрытьФайл(ИмяФайла,,, ПараметрыЗаписиJSON);
	Запись.ЗаписатьНачалоМассива();
	
	РезультатЗапроса = ТоварыКОтгрузке(); 
	ДокументыОтгрузки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Реквизиты = Новый Структура;
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Реквизиты.Вставить(Колонка.Имя, ДокументыОтгрузки[Колонка.Имя]);
	КонецЦикла;
	
	Пока ДокументыОтгрузки.Следующий() Цикл 
		Запись.ЗаписатьНачалоОбъекта(); 

		Запись.ЗаписатьИмяСвойства("ДокументОтгрузки");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.ДокументОтгрузки);
		
		Запись.ЗаписатьИмяСвойства("Дата");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.Дата); 

		Запись.ЗаписатьИмяСвойства("Номер");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.Номер); 

		Запись.ЗаписатьИмяСвойства("ВидРемонтныхРабот");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.ОбщийВидРемонта);
		
		Запись.ЗаписатьИмяСвойства("ДатаНачала");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.ДатаНачалаФактическая); 

		Запись.ЗаписатьИмяСвойства("ДатаОкончания");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.ДатаЗавершенияФактическая); 
		
		Запись.ЗаписатьИмяСвойства("Автор");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.Автор); 
		
		Запись.ЗаписатьИмяСвойства("ОбъектЭксплуатации");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.ОбъектЭксплуатации); 
		
		Запись.ЗаписатьИмяСвойства("Автор");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.Автор); 
		
		Запись.ЗаписатьИмяСвойства("Организация");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.Организация); 
		
		Запись.ЗаписатьИмяСвойства("Ответственный");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.Ответственный); 
		
		Запись.ЗаписатьИмяСвойства("Период");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.Период); 
		
		Запись.ЗаписатьИмяСвойства("Подразделение");
		ЗаписатьЗначениеРеквизита(Запись, ДокументыОтгрузки.Подразделение); 
		
		Запись.ЗаписатьИмяСвойства("МатериальныеЗатраты");
		Запись.ЗаписатьНачалоМассива();
		Выборка = ДокументыОтгрузки.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Запись.ЗаписатьНачалоОбъекта(); 
			
			Запись.ЗаписатьИмяСвойства("Номенклатура");
			ЗаписатьЗначениеРеквизита(Запись, Выборка.Номенклатура); 
			
			Запись.ЗаписатьИмяСвойства("КОформлению");
			ЗаписатьЗначениеРеквизита(Запись, Выборка.КОформлению); 
			
			Запись.ЗаписатьКонецОбъекта();
		КонецЦикла;
		Запись.ЗаписатьКонецМассива();
		Запись.ЗаписатьКонецОбъекта();
	КонецЦикла;   
	
	Запись.ЗаписатьКонецМассива();  
	Запись.Закрыть();
	АдресДокументаВХранилище =  ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресДокументаВХранилище;
	
КонецФункции 

&НаСервере
Функция ТоварыКОтгрузке()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.ПериодДень КАК Период,
		|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОбороты.КОформлениюРасход КАК КОформлению,
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ВтТоварыКОтгрузкеОбороты
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ДокументОтгрузки ССЫЛКА Документ.ЗаказНаРемонт) КАК ТоварыКОтгрузкеОбороты
		|ГДЕ
		|	ТоварыКОтгрузкеОбороты.Регистратор ССЫЛКА Документ.ВнутреннееПотребление
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыКОтгрузкеОбороты.Период КАК Период,
		|	ВтТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
		|	ВтТоварыКОтгрузкеОбороты.КОформлению КАК КОформлению,
		|	ВтТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ЗаказНаРемонт.Организация КАК Организация,
		|	ЗаказНаРемонт.Подразделение КАК Подразделение,
		|	ЗаказНаРемонт.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
		|	ЗаказНаРемонт.Автор КАК Автор,
		|	ЗаказНаРемонт.Дата КАК Дата,
		|	ЗаказНаРемонт.Номер КАК Номер,
		|	ЗаказНаРемонт.ОбщийВидРемонта.Наименование КАК ОбщийВидРемонта,
		|
		|	ЗаказНаРемонт.ДатаНачалаФактическая КАК ДатаНачалаФактическая,
		|	ЗаказНаРемонт.ДатаЗавершенияФактическая КАК ДатаЗавершенияФактическая,
		|	ЗаказНаРемонт.Ответственный КАК Ответственный
		|ИЗ
		|	ВтТоварыКОтгрузкеОбороты КАК ВтТоварыКОтгрузкеОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт КАК ЗаказНаРемонт
		|		ПО ВтТоварыКОтгрузкеОбороты.ДокументОтгрузки = ЗаказНаРемонт.Ссылка
		|ИТОГИ
		|	МАКСИМУМ(Период),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(Подразделение),
		|	МАКСИМУМ(ОбъектЭксплуатации),
		|	МАКСИМУМ(Автор),
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(Номер),
		|	МАКСИМУМ(ОбщийВидРемонта),
		|	МАКСИМУМ(ДатаНачалаФактическая),
		|	МАКСИМУМ(ДатаЗавершенияФактическая),
		|	МАКСИМУМ(Ответственный)
		|ПО
		|	ДокументОтгрузки";	
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Процедура ЗаписатьЗначениеРеквизита(Запись, Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка")
	Или ТипЗнч(Значение) = Тип("Число")	 Тогда 
		Запись.ЗаписатьЗначение(Значение); 
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда 
		Запись.ЗаписатьЗначение(ЗаписатьДатуJSON(Значение, ФорматДатыJSON.ISO));
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда 
		Запись.ЗаписатьЗначение(Значение); 
		Запись.ЗаписатьНачалоОбъекта();    
		Запись.ЗаписатьИмяСвойства(Значение.Метаданные().Имя);
		Запись.ЗаписатьЗначение(Строка(Значение)); 
		Запись.ЗаписатьКонецОбъекта();
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(Значение.Метаданные()) Тогда  
		Запись.ЗаписатьНачалоОбъекта();
		РеквизитыСпр = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Значение, "Ссылка, Наименование");  
		СериализаватьСсылочныйОбъект(Запись, Значение, РеквизитыСпр);
		Запись.ЗаписатьКонецОбъекта(); 
	Иначе 
		Запись.ЗаписатьЗначение(Строка(Значение)); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СериализаватьСсылочныйОбъект(Запись, Значение, РеквизитыСпр)
	
	Для Каждого РеквизитСпр Из РеквизитыСпр Цикл 
		Запись.ЗаписатьИмяСвойства(РеквизитСпр.Ключ);
		Если РеквизитСпр.Ключ = "Ссылка" Тогда  
			Запись.ЗаписатьЗначение(Строка(Значение.УникальныйИдентификатор())); 
		Иначе 
			Запись.ЗаписатьЗначение(РеквизитСпр.Значение); 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДеСериализацияJson(Путь)
	
	АдресВременногоХранилища = "";
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ДеСериализацияJsonЗавершение", ЭтотОбъект);
	НачатьПомещениеФайлаНаСервер(ОповещениеОЗавершении, , , АдресВременногоХранилища, Путь, УникальныйИдентификатор);
	
КонецПроцедуры  

&НаСервере
Процедура ДеСериализацияJsonНаСервере(Знач АдресДокументаВХранилище)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДокументаВХранилище);
	
	ИмяПромежуточногоФайла = ПолучитьИмяВременногоФайла("xml");
	Данные.Записать(ИмяПромежуточногоФайла);
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ИмяПромежуточногоФайла);
	
	МассивДокументов = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	
	Попытка
		УдалитьФайлы(ИмяПромежуточногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка.проф_ЗагрузкаИсторическихДанныхОФактическихЗатратахНаОР'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	

	СоздатьДокументы(МассивДокументов);
	 
КонецПроцедуры    

&НаСервере
Процедура СоздатьДокументы(МассивДокументов) 
	
	Список.Очистить();

	Для Каждого Док Из МассивДокументов Цикл 
		Отказ = Ложь;
		
		ДанныеЗаполненияВнешнееОснование = Новый Структура;
		ДокументВнешнееОснованиеПодготовитьДанныеЗаполнения(ДанныеЗаполненияВнешнееОснование, Док, Отказ); 
		
		ДанныеЗаполненияАкт = Новый Структура; 
		ДанныеЗаполненияАкт.Вставить("ВнешнееОснование", ДанныеЗаполненияВнешнееОснование);
		ДокументАктПодготовитьДанныеЗаполнения(ДанныеЗаполненияАкт, Док, Отказ);

		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		ДокОбъектВнешнееОснование = НайтиСоздатьДокументВнешнееОснованиеДляРабот(
										ДанныеЗаполненияВнешнееОснование.проф_ДокументОтгрузки,
										ДанныеЗаполненияВнешнееОснование.ДатаСоздания);
		ДокОбъектВнешнееОснование.Заполнить(ДанныеЗаполненияВнешнееОснование);
		ДокОбъектВнешнееОснование.БезусловнаяЗапись = Истина;
		НачатьТранзакцию();
		Попытка 
			ДокОбъектВнешнееОснование.Записать(РежимЗаписиДокумента.Проведение); 
			Список.Добавить(ДокОбъектВнешнееОснование.Ссылка);
		
			ДокОбъектАктОВыполненииЭтапа = НайтиСоздатьДокументАкт(ДокОбъектВнешнееОснование.Ссылка);
			ЗаполнитьПоДаннымЗаполненияДокументАкт(ДокОбъектАктОВыполненииЭтапа, ДанныеЗаполненияАкт);
			ДокОбъектАктОВыполненииЭтапа.Заполнить(ДокОбъектВнешнееОснование.Ссылка);

			СтрокаОборудования = ДокОбъектАктОВыполненииЭтапа.РемонтыОборудования[0];
			Если ДанныеЗаполненияАкт.Свойство("ВидРемонтныхРабот") Тогда				
				СтрокаОборудования.ВидРемонтныхРабот = ДанныеЗаполненияАкт.ВидРемонтныхРабот;
			КонецЕсли;  
			Если ДанныеЗаполненияАкт.Свойство("ДатаНачала") Тогда
				СтрокаОборудования.ДатаНачала = ДанныеЗаполненияАкт.ДатаНачала;
			КонецЕсли;  
			Если ДанныеЗаполненияАкт.Свойство("ДатаОкончания") Тогда
				СтрокаОборудования.ДатаОкончания = ДанныеЗаполненияАкт.ДатаОкончания;
			КонецЕсли;  

			ДокОбъектАктОВыполненииЭтапа.БезусловнаяЗапись = Истина;
			ЗавершитьРемонт(ДокОбъектАктОВыполненииЭтапа);

			// при записи нового документа срабатывает механизм установки нового номера с префиксом
			ЕстьДокСНомером = НайтиДокПоНомеру(ДокОбъектАктОВыполненииЭтапа.Номер,
											   ДокОбъектАктОВыполненииЭтапа.Дата,
											   "Документ.торо_АктОВыполненииЭтапаРабот",
											   ДокОбъектАктОВыполненииЭтапа.Ссылка);
			Если Не ЕстьДокСНомером тогда
				НомерДок = ДокОбъектАктОВыполненииЭтапа.Номер;
				ДокОбъектАктОВыполненииЭтапа.Записать(РежимЗаписиДокумента.Запись);
				ДокОбъектАктОВыполненииЭтапа.Номер = НомерДок;
			Иначе
				ДокОбъектАктОВыполненииЭтапа.Комментарий = СтрШаблон("%1 %2",
					ДокОбъектАктОВыполненииЭтапа.Номер, ДокОбъектАктОВыполненииЭтапа.Комментарий);
				ДокОбъектАктОВыполненииЭтапа.УстановитьНовыйНомер();
				ДокОбъектАктОВыполненииЭтапа.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;

			ДокОбъектАктОВыполненииЭтапа.Записать(РежимЗаписиДокумента.Проведение);
			Список.Добавить(ДокОбъектАктОВыполненииЭтапа.Ссылка); 
			ЗафиксироватьТранзакцию(); 
		Исключение
			ОтменитьТранзакцию();
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДокументВнешнееОснованиеПодготовитьДанныеЗаполнения(ДанныеЗаполнения, Док, Отказ)
	
	Перем ОбследованноеОборудование, ТекущаяСтрока;
	
	СтрДата = "Дата";

	СтрПериод = "Период";
	СтрОтветственный = "Ответственный";
	СтрСправочникПользователи = "Справочник.Пользователи";

	Если Док.Свойство(СтрПериод) Тогда 
		ДанныеЗаполнения.Вставить(СтрДата,  ПрочитатьДатуJSON(Док[СтрПериод], ФорматДатыJSON.ISO)); 
		ДанныеЗаполнения.Вставить("ДатаСоздания",  ПрочитатьДатуJSON(Док[СтрПериод], ФорматДатыJSON.ISO)); 
	КонецЕсли;  

	Если Док.Свойство(СтрДата) Тогда 
		ДанныеЗаполнения.Вставить(СтрДата,  ПрочитатьДатуJSON(Док.Дата, ФорматДатыJSON.ISO) - 1); 
		ДанныеЗаполнения.Вставить("ДатаСоздания",  ПрочитатьДатуJSON(Док.Дата, ФорматДатыJSON.ISO) - 1);
	КонецЕсли;
	
	Если Док.Свойство("ОбъектЭксплуатации") Тогда 
		ДанныеЗаполнения.Вставить("проф_ДокументОтгрузки", Док.ОбъектЭксплуатации.Ссылка);
	КонецЕсли;  
	Если Док.Свойство("Организация") Тогда 
		ДанныеЗаполнения.Вставить("Организация", НайтиСсылкуПоУИД("Справочник.Организации", Док.Организация, Отказ));
	КонецЕсли;  
	
	Если Док.Свойство("Подразделение") Тогда 
		ДанныеЗаполнения.Вставить("Подразделение",
			НайтиСсылкуПоУИД("Справочник.СтруктураПредприятия", Док.Подразделение, Отказ));
	КонецЕсли; 
	
	Если Док.Свойство(СтрОтветственный) Тогда
		// ++ fix #225 Горетовская, чтобы шел дальше
		//ДанныеЗаполнения.Вставить(СтрОтветственный, НайтиСсылкуПоУИД(СтрСправочникПользователи, Док.Ответственный, Отказ));
		Отказ2 = Ложь;
		ДанныеЗаполнения.Вставить(СтрОтветственный, НайтиСсылкуПоУИД(СтрСправочникПользователи, Док.Ответственный, Отказ2));
		// -- fix #225 Горетовская, чтобы шел дальше
	КонецЕсли; 
	
	Если Док.Свойство("Автор") Тогда
		// ++ fix #225 Горетовская, чтобы шел дальше
		//ДанныеЗаполнения.Вставить("Автор", НайтиСсылкуПоУИД(СтрСправочникПользователи, Док.Автор, Отказ));
		Отказ2 = Ложь; 
		ДанныеЗаполнения.Вставить("Автор", НайтиСсылкуПоУИД(СтрСправочникПользователи, Док.Автор, Отказ2));
		// -- fix #225 Горетовская, чтобы шел дальше
	КонецЕсли; 
	
	ДанныеЗаполнения.Вставить("Комментарий",
		"Документ создан обработкой 'Загрузка исторических данных о фактических затратах на ОР'");
	
	Если Док.Свойство("ОбъектЭксплуатации") Тогда
		ID = Новый УникальныйИдентификатор();
		ОбследованноеОборудование = Новый Массив;
		ТекущаяСтрока = Новый Структура;
		ТекущаяСтрока.Вставить("ОбъектРемонта",
			НайтиСсылкуПоУИД("Справочник.торо_ОбъектыРемонта", Док.ОбъектЭксплуатации, Отказ));
		// ++ fix #225 Горетовская	
		//ТекущаяСтрока.Вставить(СтрОтветственный, НайтиСсылкуПоУИД(СтрСправочникПользователи, Док.Ответственный, Отказ));
		Отказ2 = Ложь;
		ТекущаяСтрока.Вставить(СтрОтветственный, НайтиСсылкуПоУИД("Справочник.Сотрудники", Док.Ответственный, Отказ2)); 
		// -- fix #225 Горетовская	
		ТекущаяСтрока.Вставить("ПлановаяДатаРемонта", ДанныеЗаполнения.Дата); 
		ТекущаяСтрока.Вставить("ID", ID);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРемонта) Тогда 
			ОбследованноеОборудование.Добавить(ТекущаяСтрока);
			ДанныеЗаполнения.Вставить("МассивСтрокТЧОбследованноеОборудование", ОбследованноеОборудование);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаРемонтныеРаботы = Новый Структура;
	СтрокаРемонтныеРаботы.Вставить("РемонтнаяРабота", РемонтнаяРабота);
	СтрокаРемонтныеРаботы.Вставить("Предписание_ID", ID);
	СтрокаРемонтныеРаботы.Вставить("ID", Новый УникальныйИдентификатор());
	СтрокаРемонтныеРаботы.Вставить("Количество", 1);
	
	МассивСтрокТЧРемонтныеРаботы = Новый Массив;
	МассивСтрокТЧРемонтныеРаботы.Добавить(СтрокаРемонтныеРаботы);
	ДанныеЗаполнения.Вставить("МассивСтрокТЧРемонтныеРаботы", МассивСтрокТЧРемонтныеРаботы);

КонецПроцедуры  

&НаСервере
Процедура ДокументАктПодготовитьДанныеЗаполнения(ДанныеЗаполнения, Док, Отказ)
	
	Перем ОбследованноеОборудование, ТекущаяСтрока;
	
	СтрДата = "Дата";

	Если Док.Свойство("Организация") Тогда 
		ДанныеЗаполнения.Вставить("Организация", НайтиСсылкуПоУИД("Справочник.Организации", Док.Организация, Отказ));
	КонецЕсли;  
	
	Если Док.Свойство("Подразделение") Тогда 
		ДанныеЗаполнения.Вставить("Подразделение",
			НайтиСсылкуПоУИД("Справочник.СтруктураПредприятия", Док.Подразделение, Отказ));
	КонецЕсли; 
	
	Если Док.Свойство("Ответственный") Тогда 
		// ++ fix #225 Горетовская, чтобы шел дальше
		//ДанныеЗаполнения.Вставить("Ответственный", НайтиСсылкуПоУИД("Справочник.Пользователи", Док.Ответственный, Отказ));
		Отказ2 = Ложь; 
		ДанныеЗаполнения.Вставить("Ответственный", НайтиСсылкуПоУИД("Справочник.Пользователи", Док.Ответственный, Отказ2));
		// -- fix #225 Горетовская, чтобы шел дальше
	КонецЕсли; 
	
	Если Док.Свойство("Автор") Тогда
		// ++ fix #225 Горетовская, чтобы шел дальше
		//ДанныеЗаполнения.Вставить("Автор", НайтиСсылкуПоУИД("Справочник.Пользователи", Док.Автор, Отказ));
		Отказ2 = Ложь; 
		ДанныеЗаполнения.Вставить("Автор", НайтиСсылкуПоУИД("Справочник.Пользователи", Док.Автор, Отказ2));
		// -- fix #225 Горетовская, чтобы шел дальше
	КонецЕсли; 
	
	СтрПериод = "Период";
	Если Док.Свойство(СтрПериод) Тогда 
		// Дата документа должна быть больше даты документа-основания! добавил одну секунду 
		ДанныеЗаполнения.Вставить(СтрДата,  (ПрочитатьДатуJSON(Док[СтрПериод], ФорматДатыJSON.ISO) + 1)); 
		ДанныеЗаполнения.Вставить("ДатаСоздания",  (ПрочитатьДатуJSON(Док[СтрПериод], ФорматДатыJSON.ISO) + 1)); 
	КонецЕсли;  
	
	Если Док.Свойство(СтрДата) Тогда 
		ДанныеЗаполнения.Вставить("ДатаСоздания",  (ПрочитатьДатуJSON(Док.Дата, ФорматДатыJSON.ISO) + 1)); 
	КонецЕсли;
	
	Если Док.Свойство("Номер") Тогда 
		ДанныеЗаполнения.Вставить("Номер", Док.Номер);
		ДанныеЗаполнения.Вставить("НомерДок", Док.Номер);
	КонецЕсли;  
	
	ДобавитьВДанныеЗаполненияВидРемонтныхРабот(Док, ДанныеЗаполнения);

	Если Док.Свойство("ДатаНачала") Тогда
		ДанныеЗаполнения.Вставить("ДатаНачала",  ПрочитатьДатуJSON(Док.ДатаНачала, ФорматДатыJSON.ISO));
	КонецЕсли;  

	Если Док.Свойство("ДатаОкончания") Тогда
		ДанныеЗаполнения.Вставить(СтрДата,  ПрочитатьДатуJSON(Док.ДатаОкончания, ФорматДатыJSON.ISO)); 
		ДанныеЗаполнения.Вставить("ДатаОкончания", ПрочитатьДатуJSON(Док.ДатаОкончания, ФорматДатыJSON.ISO));
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Комментарий",
		"Документ создан обработкой 'Загрузка исторических данных о фактических затратах на ОР'");
	
	Если Не Док.Свойство("МатериальныеЗатраты") Тогда
		Возврат;	
	КонецЕсли;	
	
	МатериальныеЗатраты = Новый Массив;
	Для Каждого ТекСтрока Из Док.МатериальныеЗатраты Цикл
		Строка = Новый Структура;
		Строка.Вставить("Номенклатура", НайтиСсылкуПоУИД("Справочник.Номенклатура", ТекСтрока.Номенклатура, Отказ));
		Строка.Вставить("Количество", ТекСтрока.КОформлению);
		Строка.Вставить("КоличествоЕдиниц", ТекСтрока.КОформлению);
		
		РемонтыОборудования = ДанныеЗаполнения.ВнешнееОснование.МассивСтрокТЧРемонтныеРаботы[0];	
		Строка.Вставить("РемонтыОборудования_ID", РемонтыОборудования.Предписание_ID);
		Строка.Вставить("ID", РемонтыОборудования.ID);  
		
		МатериальныеЗатраты.Добавить(Строка);	
	КонецЦикла;
	ДанныеЗаполнения.Вставить("МатериальныеЗатраты", МатериальныеЗатраты);
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьПоДаннымЗаполненияДокументАкт(ДокОбъект, ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("МатериальныеЗатраты") Тогда 
		Для Каждого ТекСтрока Из ДанныеЗаполнения.МатериальныеЗатраты Цикл 
			 Строка = ДокОбъект.МатериальныеЗатраты.Добавить();
			 ЗаполнитьЗначенияСвойств(Строка, ТекСтрока);
		 КонецЦикла;
		 
		 КолонкиГруппировок = "ID, ЕдиницаИзмерения, Номенклатура, ХарактеристикаНоменклатуры, РемонтыОборудования_ID";
		 КолонкиСуммирования = "Количество, Сумма, КоличествоЕдиниц";

		 ДокОбъект.МатериальныеЗатраты.Свернуть(КолонкиГруппировок, КолонкиСуммирования);		 	

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВДанныеЗаполненияВидРемонтныхРабот(Док, ДанныеЗаполнения)
	
	Если Док.Свойство("ВидРемонтныхРабот") Тогда
		РазмерНаименования = 50;
		ТочноеСовпадение = ?(СтрДлина(Док.ВидРемонтныхРабот) > РазмерНаименования, Ложь, Истина);
		ВидРемонта = Справочники.торо_ВидыРемонтов.НайтиПоНаименованию(Док.ВидРемонтныхРабот, ТочноеСовпадение);
		Если ЗначениеЗаполнено(ВидРемонта) Тогда
			ДанныеЗаполнения.Вставить("ВидРемонтныхРабот", ВидРемонта);
		КонецЕсли;  
	КонецЕсли; 

КонецПроцедуры	

&НаСервере
Процедура ЗавершитьРемонт(ДокОбъект) 
	
	Для Каждого Строка Из ДокОбъект.РемонтыОборудования Цикл 
		Строка.ЗавершитьРемонт = Истина;	
	КонецЦикла;
	
	Для Каждого Строка Из ДокОбъект.РемонтныеРаботы Цикл 
		Строка.Выполнено = Истина;	
	КонецЦикла;  
	
	ДокОбъект.ЗавершитьРемонтныеРаботы = Истина;

КонецПроцедуры
	
&НаСервере
Функция НайтиСсылкуПоУИД(ПолноеИмя, Значение, Отказ) 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Объект.Ссылка КАК Ссылка
		|ИЗ
		|	&Объект КАК Объект
		|ГДЕ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Объект.Ссылка) = &УИД
		|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Объект", ПолноеИмя);
	Запрос.УстановитьПараметр("УИД", Новый УникальныйИдентификатор(Значение.Ссылка));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Не найден %1 наименование: %2", ПолноеИмя, Значение.Наименование));
		Отказ = Истина;
		Возврат ПредопределенноеЗначение(ПолноеИмя + ".ПустаяСсылка");
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

 &НаСервере
Функция НайтиСоздатьДокументВнешнееОснованиеДляРабот(ДокументОтгрузки, Дата)
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	торо_ВнешнееОснованиеДляРабот.Ссылка КАК Ссылка
	 |ИЗ
	 |	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
	 |ГДЕ
	 |	торо_ВнешнееОснованиеДляРабот.проф_ДокументОтгрузки = &проф_ДокументОтгрузки";
	 Запрос.Текст = Запрос.Текст + "
	 | И торо_ВнешнееОснованиеДляРабот.Дата = &Дата";
	 
	 Запрос.УстановитьПараметр("Дата", Дата);
	 
	 Запрос.УстановитьПараметр("проф_ДокументОтгрузки", ДокументОтгрузки);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 Если РезультатЗапроса.Пустой() Тогда  
		 ДокОбъект = Документы.торо_ВнешнееОснованиеДляРабот.СоздатьДокумент();
	 Иначе
		 Выборка = РезультатЗапроса.Выбрать();
		 Выборка.Следующий();
		 ДокОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		 ДокОбъект.ОбследованноеОборудование.Очистить();
		 ДокОбъект.РемонтныеРаботы.Очистить();
	 КонецЕсли;
	 
	 Возврат ДокОбъект;
	 
 КонецФункции  

&НаСервере
Функция НайтиСоздатьДокументАкт(ДокументОснование)
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка КАК Ссылка
	 |ИЗ
	 |	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_АктОВыполненииЭтапаРаботДокументыОснования
	 |ГДЕ
	 |	торо_АктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование = &ДокументОснование";
	 
	 Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 Если РезультатЗапроса.Пустой() Тогда  
		 ДокОбъект = Документы.торо_АктОВыполненииЭтапаРабот.СоздатьДокумент();
	 Иначе
		 Выборка = РезультатЗапроса.Выбрать();
		 Выборка.Следующий();
		 ДокОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		 ДокОбъект.ДокументыОснования.Очистить();
		 ДокОбъект.МатериальныеЗатраты.Очистить();
		 ДокОбъект.РемонтныеРаботы.Очистить();
		 ДокОбъект.РемонтыОборудования.Очистить();
		 ДокОбъект.ЗакрываемыеПредписания.Очистить();
		 ДокОбъект.СерийныеЗапчасти.Очистить();
		 ДокОбъект.ТрудовыеЗатраты.Очистить();
		 ДокОбъект.ИсполнителиПоРемонтам.Очистить();
		 ДокОбъект.ДополнительныеРеквизиты.Очистить();
	 КонецЕсли;
	 
	 Возврат ДокОбъект;
	 
 КонецФункции
 
 &НаСервереБезКонтекста
Функция НайтиДокПоНомеру(НомерДок, Период, ТипДокумента, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерДок", НомерДок);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	&ТипДокумента КАК Т
		|ГДЕ
		|	Т.Номер ПОДОБНО &НомерДок
		|	И Т.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ГОД) И КОНЕЦПЕРИОДА(&Период, ГОД)
		|	и Т.Ссылка <> &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТипДокумента", ТипДокумента);
	Запрос.Текст = ТекстЗапроса;

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();
	
КонецФункции

#КонецОбласти

//-- Проф-ИТ, #225, Башинская А., 13.10.2023	