
#Область ОбработчикиСобытий

//-- Проф-ИТ, #228, Соловьев А.А., 29.08.2023

&НаСервере
Процедура проф_ПриСозданииНаСервереВместо(Отказ, СтандартнаяОбработка)
	
	ДобавитьНовыеРеквизиты();
	УстановитьПредопределенныеЗначения();
	ИзменитьЭлементыФормы();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

//-- Проф-ИТ, #228, Соловьев А.А., 29.08.2023

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//++ Проф-ИТ, #228, Соловьев А.А., 31.08.2023

&НаКлиенте
Процедура проф_СкладПриИзменении(Элемент)
	
	ОбновитьНаКлиенте();
	УстановитьОтборНаСвязанныеТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура проф_ЗаказНаВнутреннееПотреблениеПриИзменении(Элемент)
	
	ОбновитьНаКлиенте();
	УстановитьОтборНаСвязанныеТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура проф_НоменклатураПриИзменении(Элемент)
	
	ОбновитьНаКлиенте();
	УстановитьОтборНаСвязанныеТаблицы();
	
КонецПроцедуры

//-- Проф-ИТ, #228, Соловьев А.А., 31.08.2023

//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024
&НаКлиенте
Процедура ЗВПДляЗакупкиПриИзменении(Элемент)
	
	ОбновитьНаКлиенте();
	УстановитьОтборНаСвязанныеТаблицы();
	
КонецПроцедуры
//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024

#КонецОбласти

#Область ОбработчикиКомандФормы

//++ Проф-ИТ, #228, Соловьев А.А., 04.10.2023

&НаКлиенте
Процедура ОткрытьФормуРабочееМестоТехническогоСпециалиста(Команда)

	ОткрытьФорму("Обработка.торо_РабочееМестоТехническогоСпециалиста.Форма.Форма");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасчетСтраховогоЗапаса(Команда)
	
	//++ Проф-ИТ, #174, Соловьев А.А., 19.10.2023
	ОткрытьФорму("Обработка.проф_РасчетСтраховогоЗапаса.Форма.Форма");
	//-- Проф-ИТ, #174, Соловьев А.А., 19.10.2023
	
КонецПроцедуры

&НаКлиенте
Процедура проф_СоздатьЗаказНаВнутреннееПотребление(Команда)
	
	ОчиститьСообщения();
	
	Если ЭтотОбъект["СтрокиЗаказовДляОбработки"].Количество() > 0 
		Или ЭтотОбъект["СписокЗаказовДляОбработки"].Количество() > 0 Тогда 
		
		УстановитьФлагиКВыполнениюКЗаказу();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Выполнено'"), , , , 
			СтатусОповещенияПользователя.Информация);
			
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не найдены документы для выполнения'"), , , , 
			СтатусОповещенияПользователя.Информация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаявкиПоВозрастанию(Команда)
	
	ЭтотОбъект["ТипСортировки"] = "ДатаПотребности ВОЗР";
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаявкиПоУбыванию(Команда)
	
	ЭтотОбъект["ТипСортировки"] = "ДатаПотребности УБЫВ";
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаПоВозрастанию(Команда)
	
	ЭтотОбъект["ТипСортировки"] = "НаименованиеОборудования ВОЗР";
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаПоУбыванию(Команда)
	
	ЭтотОбъект["ТипСортировки"] = "НаименованиеОборудования УБЫВ";	
	ОбновитьНаКлиенте();
	
КонецПроцедуры

//-- Проф-ИТ, #228, Соловьев А.А., 04.10.2023

//++ Проф-ИТ, #295, Соловьев А.А., 17.10.2023

&НаКлиенте
Процедура СформироватьПеремещенияДляСогласования(Команда)
		
	Если ЭтотОбъект["ПозицииДляПеремещения"].Количество() > 0 Тогда 
		СформироватьПеремещенияДляСогласованияНаСервере();
	Иначе
		ТекстСообщения = НСтр("ru = 'Выберите номенклатуру для перемещения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура проф_УдалитьСтрокуПозицииДляПеремещения(Команда)
	
	ТекущиеДанные = Элементы["ПозицииДляПеремещения"].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ЭтотОбъект["ПозицииДляПеремещения"].Удалить(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

//-- Проф-ИТ, #295, Соловьев А.А., 17.10.2023

&НаКлиенте
Процедура проф_ПерейтиКВедомостиВместо(Команда)
	
	//++ Проф-ИТ, #294, Соловьев А.А., 24.10.2023
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка с номенклатурой.'"));
		Возврат;
	КонецЕсли;
	
	ОтборОтчета = Новый Структура;
	ОтборОтчета.Вставить("Номенклатура");
	ОтборОтчета.Вставить("Склад"); 
	Если ИспользоватьХарактеристики Тогда
		ОтборОтчета.Вставить("Характеристика");
	КонецЕсли;
	
	Если ГруппировкаДанных = 0 Тогда
		
		ЗаполнитьЗначенияСвойств(ОтборОтчета, ТекущиеДанные);
		МассивСклады = Новый Массив;

		Если ТекущиеДанные.ЭтоНоменклатура Тогда
			
			Для Каждого СтрокаСклад Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				МассивСклады.Добавить(СтрокаСклад.Данные);
			КонецЦикла;
			
		ИначеЕсли ТекущиеДанные.ЭтоСклад Тогда
			
			МассивСклады.Добавить(ТекущиеДанные.Данные);
			
		ИначеЕсли ТекущиеДанные.ЭтоЗаказ Тогда
			
			МассивСклады.Добавить(ТекущиеДанные.ПолучитьРодителя().Данные);
		КонецЕсли;
		
		ОтборОтчета.Склад = МассивСклады;
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		МассивНоменклатура = Новый Массив;
		МассивСклады = Новый Массив;
		Если ИспользоватьХарактеристики Тогда
			Характеристики = Новый Массив;
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоСклад Тогда
			
			МассивСклады.Добавить(ТекущиеДанные.Данные);
			
			Для Каждого СтрокаЗаказ Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				
				Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
					
					Если МассивНоменклатура.Найти(СтрокаНоменклатура.Номенклатура) = Неопределено Тогда
						МассивНоменклатура.Добавить(СтрокаНоменклатура.Номенклатура); 
					КонецЕсли;
					Если ИспользоватьХарактеристики 
						И Характеристики.Найти(СтрокаНоменклатура.Характеристика) = Неопределено Тогда
						Характеристики.Добавить(СтрокаНоменклатура.Характеристика);
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ТекущиеДанные.ЭтоЗаказ Тогда
			
			МассивСклады.Добавить(ТекущиеДанные.ПолучитьРодителя().Данные);
			
			Для Каждого СтрокаНоменклатура Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				
				МассивНоменклатура.Добавить(СтрокаНоменклатура.Номенклатура);
				Если ИспользоватьХарактеристики 
					И Характеристики.Найти(СтрокаНоменклатура.Характеристика) = Неопределено Тогда
					Характеристики.Добавить(СтрокаНоменклатура.Характеристика);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТекущиеДанные.ЭтоНоменклатура Тогда
			
			СтрокаЗаказ = ТекущиеДанные.ПолучитьРодителя();
			МассивСклады.Добавить(СтрокаЗаказ.ПолучитьРодителя().Данные);
			
			МассивНоменклатура.Добавить(ТекущиеДанные.Номенклатура);
			Если ИспользоватьХарактеристики Тогда
				Характеристики.Добавить(ТекущиеДанные.Характеристика);
			КонецЕсли;
		КонецЕсли;
		
		ОтборОтчета.Номенклатура = МассивНоменклатура;
		ОтборОтчета.Склад = МассивСклады;
		Если ИспользоватьХарактеристики Тогда
			ОтборОтчета.Характеристика = Характеристики;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормыОтчета = Новый Структура;
	ПараметрыФормыОтчета.Вставить("Отбор", ОтборОтчета);
	ПараметрыФормыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ВедомостьПоТоварамНаСкладах.Форма", ПараметрыФормыОтчета);
	//-- Проф-ИТ, #294, Соловьев А.А., 24.10.2023
	
КонецПроцедуры

//++ Проф-ИТ, #372, Соловьев А.А., 24.11.2023

&НаКлиенте
Процедура проф_СоздатьЗаказыНаПеремещение(Команда)
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект["СкладОтправитель"]) Тогда 
		ТекстСообщения = НСтр("ru = 'Укажите склад-отправитель'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СкладОтправитель");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.ЭтоЗаказ Тогда
		ТекстСообщения = НСтр("ru = 'Укажите Заказ на внутреннее потребление'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ЭтотОбъект["ДанныеДерево"]);
		Возврат;
	КонецЕсли;
	
	СкладПолучатель = ТекущиеДанные.ПолучитьРодителя().Данные;
	
	Если СкладПолучатель = ЭтотОбъект["СкладОтправитель"] Тогда
		ТекстСообщения = НСтр("ru = 'Склад-получатель    не должен быть равен складу-отправителю'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СкладОтправитель");
		Возврат;
	КонецЕсли;
	
	СоздатьЗаказыНаВП(Элементы.ДанныеДерево.ВыделенныеСтроки);
	
КонецПроцедуры

//-- Проф-ИТ, #372, Соловьев А.А., 24.11.2023

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеДерево

//++ Проф-ИТ, #424, Соловьев А.А., 17.01.2024

&НаКлиенте
Процедура проф_ДанныеДеревоВыборПеред(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Если Поле = Элементы.ДанныеДеревоСнятьПотребность И ЗначениеЗаполнено(ТекущиеДанные.СнятьПотребность) Тогда
	//	
	//	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	//	ПараметрыОповещения = Новый Структура("ИдентификаторСтрокиДерева", ВыбраннаяСтрока);
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПричиныОтмены", ЭтотОбъект, ПараметрыОповещения);
	//	ОткрытьФорму("Справочник.проф_ПричиныОтмены.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	//	
	//КонецЕсли;
	
КонецПроцедуры

//-- Проф-ИТ, #424, Соловьев А.А., 17.01.2024

//++ Проф-ИТ, #228, Соловьев А.А., 04.10.2023

&НаКлиенте
Процедура проф_ДанныеДеревоВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Поле = Элементы.ДанныеДеревоНазначение
		Или Поле = Элементы.ДанныеДеревоНаименованиеОборудования Тогда
		
		ПоказатьЗначение(, ТекущиеДанные[СтрЗаменить(Поле.Имя, "ДанныеДерево", "")]);
		
	ИначеЕсли Поле = Элементы.ДанныеДеревопроф_СоздатьРезерв И ТекущиеДанные.проф_СоздатьРезерв Тогда
		
		Если ТекущиеДанные.КВыполнению Тогда 
			Возврат;
		КонецЕсли;
		
		СообщениеОПревышенииМинимальногоОстатка = ПодготовитьСообщениеОПревышенииМинимальногоОстатка(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(СообщениеОПревышенииМинимальногоОстатка) Тогда 
			ПараметрыОповещения = Новый Структура("ИдентификаторСтрокиДерева", ВыбраннаяСтрока);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьРезервирование", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(ОписаниеОповещения, СообщениеОПревышенииМинимальногоОстатка, РежимДиалогаВопрос.ДаНет);
		Иначе 
			ЗарезервироватьНоменклатуру(ВыбраннаяСтрока); 
			
			УстановитьОтборНаСвязанныеТаблицы();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура проф_ДанныеДеревоПриАктивизацииСтрокиПосле(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЭтотОбъект["СписокНоменклатураАналог"].Отбор.Элементы.Очистить();
		
		ЭлементОтбора = ЭтотОбъект["СписокНоменклатураАналог"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НоменклатураОсновная");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Номенклатура;
		
		ЭлементОтбора = ЭтотОбъект["СписокНоменклатураАналог"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХарактеристикаОсновная");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Характеристика;
		
		//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024
		ЭтотОбъект["СписокТоварыВПути"].Отбор.Элементы.Очистить();
		
		ЭлементОтбора = ЭтотОбъект["СписокТоварыВПути"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Номенклатура;
		//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура проф_ДанныеДеревоПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ДанныеДеревоДоступно" Тогда 
			
			Если ГруппировкаДанных = 1 И ТекущиеДанные.ЭтоНоменклатура Тогда 
				СтрокСоСкладом = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
				Склад = СтрокСоСкладом.Данные;
			ИначеЕсли ГруппировкаДанных = 0 И ТекущиеДанные.ЭтоСклад Тогда
				Склад = ТекущиеДанные.Данные;
			ИначеЕсли ГруппировкаДанных = 0 И ТекущиеДанные.ЭтоЗаказ Тогда	
				СтрокСоСкладом = ТекущиеДанные.ПолучитьРодителя();
				Склад = СтрокСоСкладом.Данные;
			Иначе
				Возврат;
			КонецЕсли;
			
			ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Очистить();
			
			ЭлементОтбора = ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Номенклатура;
			
			ЭлементОтбора = ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Характеристика;
			
			ЭлементОтбора = ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Склад;
			
			ЭлементОтбора = ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяПоля");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = "ДоступноОсновнаяТаблица";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура проф_ДанныеДеревоКОбеспечениюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.КОбеспечению > ТекущиеДанные.КОбеспечениюПоУмолчанию Тогда
			ТекстСообщения = НСтр("ru = 'Корректировка возможна только в меньшую сторону'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.КОбеспечению = ТекущиеДанные.КОбеспечениюПоУмолчанию;
		//++ Проф-ИТ, #424, Соловьев А.А., 17.01.2024
		//Иначе
		//	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
		//	ПараметрыОповещения = Новый Структура("ТекущиеДанные", ТекущиеДанные);
		//	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПричиныОтмены", ЭтотОбъект, ПараметрыОповещения);
		//	ОткрытьФорму("Справочник.проф_ПричиныОтмены.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
		//-- Проф-ИТ, #424, Соловьев А.А., 17.01.2024
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьЗависимыеПоказателиДанныеДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура проф_ДанныеДеревоКВыполнениюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	
	Если ГруппировкаДанных = 1 Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) 
			И ТипЗнч(ТекущиеДанные.ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			ЭлементСписка = ЭтотОбъект["СписокЗаказовДляОбработки"].НайтиПоЗначению(ТекущиеДанные.ДокументОснование);
			Если ЭлементСписка = Неопределено Тогда 
				ЭтотОбъект["СписокЗаказовДляОбработки"].Добавить(ТекущиеДанные.ДокументОснование, , ТекущиеДанные["КВыполнению"]);
			Иначе
				ЭлементСписка.Пометка = ТекущиеДанные["КВыполнению"];
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ПодчиненнаяСтрока["КВыполнению"] = ТекущиеДанные["КВыполнению"];
			КЗаказу = (ТекущиеДанные["КВыполнению"] И ПодчиненнаяСтрока["ОсталосьОбеспечить"] > 0);
			Если ПодчиненнаяСтрока["проф_КЗаказу"] <> КЗаказу Тогда 
				ПодчиненнаяСтрока["проф_КЗаказу"] = КЗаказу;
				ДобавитьСтрокиЗаказовДляОбработки(ПодчиненнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) 
			И ТипЗнч(ТекущиеДанные.ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			ЭлементСписка = ЭтотОбъект["СписокЗаказовДляОбработки"].НайтиПоЗначению(ТекущиеДанные.ДокументОснование);
			Если ЭлементСписка = Неопределено Тогда 
				ЭтотОбъект["СписокЗаказовДляОбработки"].Добавить(ТекущиеДанные.ДокументОснование, , ТекущиеДанные["КВыполнению"]);
			Иначе
				ЭлементСписка.Пометка = ТекущиеДанные["КВыполнению"];
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущиеДанные["проф_КЗаказу"] = (ТекущиеДанные["КВыполнению"] И ТекущиеДанные["ОсталосьОбеспечить"] > 0);
		ДобавитьСтрокиЗаказовДляОбработки(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура проф_ДанныеДеревоРекомендованоКРезервуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.РекомендованоКРезерву > ТекущиеДанные.Доступно Тогда
			ТекстСообщения = НСтр("ru = 'Количество к резерву не может быть больше доступного'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.РекомендованоКРезерву = ТекущиеДанные.Доступно;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.проф_СоздатьРезерв = (ТекущиеДанные.РекомендованоКРезерву > 0); 
	ОбновитьЗависимыеПоказателиДанныеДерево();
	
КонецПроцедуры

//-- Проф-ИТ, #228, Соловьев А.А., 04.10.2023

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатураАналог

//++ Проф-ИТ, #228, Соловьев А.А., 04.10.2023

&НаКлиенте
Процедура проф_СписокНоменклатураАналогВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы["СписокНоменклатураАналогАналог"] 
		Или Поле = Элементы["СписокНоменклатураАналогХарактеристикаАналога"] 
		Или Поле = Элементы["СписокНоменклатураАналогСклад"]
		Или Поле = Элементы["СписокНоменклатураАналогРазрешение"] Тогда 
		
		ПоказатьЗначение(, ТекущиеДанные[СтрЗаменить(Поле.Имя, "СписокНоменклатураАналог", "")]);
		Возврат;
	КонецЕсли;
		
	Если Поле = Элементы["СписокНоменклатураАналогЗаменаНоменклатурыАналогом"] Тогда
		ПодобратьАналогиНаКлиенте(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

//-- Проф-ИТ, #228, Соловьев А.А., 04.10.2023

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОстаткиПоСкладам

//++ Проф-ИТ, #228, Соловьев А.А., 04.10.2023

&НаКлиенте
Процедура проф_ОстаткиПоСкладамПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Очистить();
		
		ЭлементОтбора = ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Номенклатура;
		
		ЭлементОтбора = ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Характеристика;
		
		ЭлементОтбора = ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Склад;
		
		ЭлементОтбора = ЭтотОбъект["ОстаткиПоНазначению"].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяПоля");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ОстаткиПоСкладам", "");
		
	КонецЕсли;
	
КонецПроцедуры

//-- Проф-ИТ, #228, Соловьев А.А., 04.10.2023

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьНовыеРеквизиты()
	
	//++ Проф-ИТ, #228, Соловьев А.А., 18.09.2023
	ТипДанныхЧисло 				= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ТипДанныхЧисло10			= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ТипДанныхБулево 			= Новый ОписаниеТипов("Булево");
	ТипДанныхДата 				= Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипДанныхСтрока 			= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	ТипДанныхСклад 				= Новый ОписаниеТипов("СправочникСсылка.Склады");
	ТипДанныхНоменклатура		= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипДанныхНазначение			= Новый ОписаниеТипов("СправочникСсылка.проф_Назначения");
	ТипДанныхЗВП				= Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление");
	ТипДанныхДокументОснование	= Новый ОписаниеТипов("
		|ДокументСсылка.торо_ПланГрафикРемонта, 
		|ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР, 
		|ДокументСсылка.ЗаказНаВнутреннееПотребление, 
		|ДокументСсылка.торо_ЗаявкаНаРемонт");
	
	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("ЗаказНаВнутреннееПотребление", ТипДанныхЗВП); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Склад", ТипДанныхСклад); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	//++ Проф-ИТ, #319, Соловьев А.А., 10.11.2023
	НовыйРеквизит = Новый РеквизитФормы("СкладОтправитель", ТипДанныхСклад); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	//-- Проф-ИТ, #319, Соловьев А.А., 10.11.2023
	НовыйРеквизит = Новый РеквизитФормы("ПодразделенияСлужбыТОИР", Новый ОписаниеТипов("СписокЗначений"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ФОИспользоватьВнешниеОснования", ТипДанныхБулево);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ФОИспользоватьДефекты", ТипДанныхБулево);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ФОИспользоватьППР", ТипДанныхБулево);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ТипСортировки", ТипДанныхСтрока);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СкладБГЛЦ", ТипДанныхСклад);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("проф_СоздатьРезерв", ТипДанныхБулево, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Назначение", ТипДанныхНазначение, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ЗаказДляЗакупки", ТипДанныхБулево, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("КодСтроки", ТипДанныхЧисло10, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ДокументОснование", ТипДанныхДокументОснование, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ПрошлаЗакупка", ТипДанныхЧисло, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("НаПеремещении", ТипДанныхЧисло, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("КОбеспечениюПоУмолчанию", ТипДанныхЧисло, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ЕстьАналоги", ТипДанныхБулево, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("КВыполнению", ТипДанныхБулево, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ПрогнозДатыПоступления", ТипДанныхДата, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СостояниеЗакупки", ТипДанныхСтрока, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ТоварыВПути", ТипДанныхЧисло, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Доступно", ТипДанныхЧисло, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("НаименованиеОборудования", 
		Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта, ДокументСсылка.торо_ЗаявкаНаРемонт"), "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Номенклатура", ТипДанныхНоменклатура); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("НаПеремещении", ТипДанныхЧисло, "ОстаткиПоСкладам");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Поступит", ТипДанныхЧисло, "ОстаткиПоСкладам");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ТипыРеквизита = Новый Массив;
	ТипыРеквизита.Добавить(Тип("ДинамическийСписок"));
	ОписаниеТиповДинамическийСписок = Новый ОписаниеТипов(ТипыРеквизита); 
	СписокНоменклатураАналог = Новый РеквизитФормы("СписокНоменклатураАналог", ОписаниеТиповДинамическийСписок);
	ДобавляемыеРеквизиты.Добавить(СписокНоменклатураАналог);
	
	ДинамическийСписок = Новый РеквизитФормы("ОстаткиПоНазначению", ОписаниеТиповДинамическийСписок);
	ДобавляемыеРеквизиты.Добавить(ДинамическийСписок);
	
	//++ Проф-ИТ, #295, Соловьев А.А., 09.10.2023
	ТипыРеквизита = Новый Массив;
	ТипыРеквизита.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(ТипыРеквизита); 
	ПозицииДляПеремещения = Новый РеквизитФормы("ПозицииДляПеремещения", ОписаниеТиповТаблицаЗначений);
	ДобавляемыеРеквизиты.Добавить(ПозицииДляПеремещения);
	
	НовыйРеквизит = Новый РеквизитФормы("Номенклатура", ТипДанныхНоменклатура, "ПозицииДляПеремещения"); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Характеристика", 
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"), "ПозицииДляПеремещения"); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СкладОтправитель", ТипДанныхСклад, "ПозицииДляПеремещения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СкладПолучатель", ТипДанныхСклад, "ПозицииДляПеремещения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Назначение", ТипДанныхНазначение, "ПозицииДляПеремещения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("НазначениеИсходное", ТипДанныхНазначение, "ПозицииДляПеремещения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Количество", ТипДанныхЧисло, "ПозицииДляПеремещения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СогласованиеКорректировки", 
		Новый ОписаниеТипов("ПеречислениеСсылка.проф_СогласованиеКорректировки"), "ПозицииДляПеремещения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ДокументОснование", ТипДанныхДокументОснование, "ПозицииДляПеремещения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	//-- Проф-ИТ, #295, Соловьев А.А., 09.10.2023
	
	//++ Проф-ИТ, #317, Соловьев А.А., 30.10.2023 
	НовыйРеквизит = Новый РеквизитФормы("проф_КЗаказу", ТипДанныхБулево, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	СписокЗаказовДляОбработки = Новый РеквизитФормы("СписокЗаказовДляОбработки", Новый ОписаниеТипов("СписокЗначений"));
	ДобавляемыеРеквизиты.Добавить(СписокЗаказовДляОбработки);
	
	СтрокиЗаказовДляОбработки = Новый РеквизитФормы("СтрокиЗаказовДляОбработки", ОписаниеТиповТаблицаЗначений);
	ДобавляемыеРеквизиты.Добавить(СтрокиЗаказовДляОбработки);
	
	НовыйРеквизит = Новый РеквизитФормы("ЗаказНаВнутреннееПотребление", ТипДанныхЗВП, "СтрокиЗаказовДляОбработки"); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("КодСтроки", ТипДанныхЧисло10, "СтрокиЗаказовДляОбработки"); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("КЗаказу", ТипДанныхБулево, "СтрокиЗаказовДляОбработки"); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	//-- Проф-ИТ, #317, Соловьев А.А., 30.10.2023
	
	//++ Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	НовыйРеквизит = Новый РеквизитФормы("СтатусЗаказа", 
		Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыУтвержденияЗаказовНаВП"), "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("СтрокаЗаблокирована", ТипДанныхБулево, "ДанныеДерево");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	//-- Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	
	//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024	
	НовыйРеквизит = Новый РеквизитФормы("ЗВПДляЗакупки", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0)); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	//-- Проф-ИТ, #228, Соловьев А.А., 18.09.2023
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭлементыФормы()
	
	//++ Проф-ИТ, #228, Соловьев А.А., 18.09.2023
	Элементы.Отборы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	проф_ГруппаОтборВерх						= Элементы.Добавить("проф_ГруппаОтборВерх", Тип("ГруппаФормы"), Элементы.Отборы);
	проф_ГруппаОтборВерх.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	проф_ГруппаОтборВерх.Отображение			= ОтображениеОбычнойГруппы.Нет;
	проф_ГруппаОтборВерх.ОтображатьЗаголовок	= Ложь; 
	проф_ГруппаОтборВерх.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	проф_ГруппаОтборНиз					= Элементы.Добавить("проф_ГруппаОтборНиз", Тип("ГруппаФормы"), Элементы.Отборы);
	проф_ГруппаОтборНиз.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	проф_ГруппаОтборНиз.Отображение			= ОтображениеОбычнойГруппы.Нет;
	проф_ГруппаОтборНиз.ОтображатьЗаголовок = Ложь; 
	проф_ГруппаОтборНиз.Группировка 		= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	проф_ГруппаРасчет 						= Элементы.Добавить("проф_ГруппаРасчет", Тип("ГруппаФормы"), Элементы.Отборы);
	проф_ГруппаРасчет.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
	проф_ГруппаРасчет.Отображение 			= ОтображениеОбычнойГруппы.Нет;
	проф_ГруппаРасчет.ОтображатьЗаголовок 	= Ложь; 
	проф_ГруппаРасчет.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	НовыйЭлементЗаказ  						= Элементы.Добавить("проф_ЗаказНаВнутреннееПотребление", Тип("ПолеФормы"), проф_ГруппаОтборНиз);
	НовыйЭлементЗаказ.Вид 					= ВидПоляФормы.ПолеВвода;
	НовыйЭлементЗаказ.ПодсказкаВвода 		= НСтр("ru = 'Заказ на внутреннее потребление'");
	НовыйЭлементЗаказ.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлементЗаказ.ПутьКДанным 			= "ЗаказНаВнутреннееПотребление";
	НовыйЭлементЗаказ.КнопкаОчистки			= Истина;
	НовыйЭлементЗаказ.УстановитьДействие("ПриИзменении", "проф_ЗаказНаВнутреннееПотреблениеПриИзменении");
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.проф_ЗаказДляЗакупки", Ложь);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	НовыйЭлементЗаказ.ПараметрыВыбора = НовыеПараметры;
	
	НовыйЭлемент  					= Элементы.Добавить("проф_Склад", Тип("ПолеФормы"), проф_ГруппаОтборНиз);
	НовыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПодсказкаВвода 	= НСтр("ru = 'Склад'");
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ПутьКДанным 		= "Склад";
	НовыйЭлемент.КнопкаОчистки		= Истина;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "проф_СкладПриИзменении");
	
	//++ Проф-ИТ, #319, Соловьев А.А., 10.11.2023
	НовыйЭлемент  					= Элементы.Добавить("проф_СкладОтправитель", Тип("ПолеФормы"), проф_ГруппаОтборНиз);
	НовыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПодсказкаВвода 	= НСтр("ru = 'Склад-отправитель'");
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ПутьКДанным 		= "СкладОтправитель";
	НовыйЭлемент.КнопкаОчистки		= Истина;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "проф_СкладПриИзменении");
	//-- Проф-ИТ, #319, Соловьев А.А., 10.11.2023
	
	Элементы.Переместить(Элементы.Организация, 						проф_ГруппаОтборВерх);
	Элементы.Переместить(Элементы.Подразделение, 					проф_ГруппаОтборВерх); 
	Элементы.Переместить(Элементы.ТолькоНеобеспеченные, 			проф_ГруппаОтборВерх); 
	Элементы.Переместить(Элементы.ГоризонтПланирования, 			проф_ГруппаОтборВерх); 
	Элементы.Переместить(Элементы.Декорация1, 						проф_ГруппаОтборВерх); 
	Элементы.Переместить(Элементы.ПериодУчетаКрайнихСроковЗаказов, 	проф_ГруппаОтборВерх); 
	Элементы.Переместить(Элементы.Декорация2, 						проф_ГруппаОтборВерх); 
	
	ТекстЗапросаРезервыСписок = ТекстЗапросаСписок(Истина);
	СтруктураСвойствРезервыСписок = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствРезервыСписок.ТекстЗапроса = ТекстЗапросаРезервыСписок;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.РезервыСписок, СтруктураСвойствРезервыСписок);
	
	ТекстЗапросаЗаказыПоставщикуСписок = ТекстЗапросаСписок(Ложь);
	СтруктураСвойствЗаказыПоставщикуСписок = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствЗаказыПоставщикуСписок.ТекстЗапроса = ТекстЗапросаЗаказыПоставщикуСписок;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ЗаказыПоставщикуСписок, СтруктураСвойствЗаказыПоставщикуСписок);
	
	Элементы.Правая.Видимость = Ложь;
	
	НоваяКоманда = Команды.Добавить("ОткрытьФормуРабочееМестоТехническогоСпециалиста");
	НоваяКоманда.Заголовок = НСтр("ru = 'Рабочее место технического специалиста'");
	НоваяКоманда.Действие = "ОткрытьФормуРабочееМестоТехническогоСпециалиста";
	
	НовыйЭлемент = Элементы.Добавить("РабочееМестоТехническогоСпециалиста", Тип("КнопкаФормы"), КоманднаяПанель);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Рабочее место технического специалиста'");
	НовыйЭлемент.ИмяКоманды = "ОткрытьФормуРабочееМестоТехническогоСпециалиста";
	
	//++ Проф-ИТ, #174, Соловьев А.А., 19.10.2023
	НоваяКоманда = Команды.Добавить("ОткрытьРасчетСтраховогоЗапаса");
	НоваяКоманда.Заголовок = НСтр("ru = 'Расчет страхового запаса'");
	НоваяКоманда.Действие = "ОткрытьРасчетСтраховогоЗапаса";
	
	НовыйЭлемент = Элементы.Добавить("ОткрытьРасчетСтраховогоЗапаса", Тип("КнопкаФормы"), КоманднаяПанель);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Расчет страхового запаса'");
	НовыйЭлемент.ИмяКоманды = "ОткрытьРасчетСтраховогоЗапаса";
	//-- Проф-ИТ, #174, Соловьев А.А., 19.10.2023
	
	ВывестиОстаткиПоНазначению();
	
	Элементы.ОстаткиПоСкладам.УстановитьДействие("ПриАктивизацииЯчейки", "проф_ОстаткиПоСкладамПриАктивизацииЯчейки");
	
	ВывестиСписокАналогов();
	
	//
	
	НоваяКоманда = Команды.Добавить("ДатаЗаявкиПоВозрастанию");
	НоваяКоманда.Действие = "ДатаЗаявкиПоВозрастанию";
	
	НоваяКоманда = Команды.Добавить("ДатаЗаявкиПоУбыванию");
	НоваяКоманда.Действие = "ДатаЗаявкиПоУбыванию";
	
	НоваяКоманда = Команды.Добавить("ОбъектРемонтаПоВозрастанию");
	НоваяКоманда.Действие = "ОбъектРемонтаПоВозрастанию";
	
	НоваяКоманда = Команды.Добавить("ОбъектРемонтаПоУбыванию");
	НоваяКоманда.Действие = "ОбъектРемонтаПоУбыванию";
	
	ГруппаСортировка = Элементы.Добавить("ГруппаСортировка", Тип("ГруппаФормы"), Элементы.ДанныеДеревоКоманднаяПанель);
    ГруппаСортировка.Вид = ВидГруппыФормы.Подменю;
	ГруппаСортировка.Заголовок = НСтр("ru = 'Сортировка данных'");
	
	ЭлементДатаЗаявкиВозр = Элементы.Добавить("ДатаЗаявкиПоВозрастанию", Тип("КнопкаФормы"), ГруппаСортировка);
	ЭлементДатаЗаявкиВозр.Заголовок = НСтр("ru = 'Дата заявки по возрастанию'");
	ЭлементДатаЗаявкиВозр.ИмяКоманды = "ДатаЗаявкиПоВозрастанию";
	
	ЭлементДатаЗаявкиУбыв = Элементы.Добавить("ДатаЗаявкиПоУбыванию", Тип("КнопкаФормы"), ГруппаСортировка);
	ЭлементДатаЗаявкиУбыв.Заголовок = НСтр("ru = 'Дата заявки по убыванию'");
	ЭлементДатаЗаявкиУбыв.ИмяКоманды = "ДатаЗаявкиПоУбыванию";
	
	ЭлементОбъектРемонтаВозр = Элементы.Добавить("ОбъектРемонтаПоВозрастанию", Тип("КнопкаФормы"), ГруппаСортировка);
	ЭлементОбъектРемонтаВозр.Заголовок = НСтр("ru = 'Объект ремонта по возрастанию'");
	ЭлементОбъектРемонтаВозр.ИмяКоманды = "ОбъектРемонтаПоВозрастанию";
	
	ЭлементОбъектРемонтаУбыв = Элементы.Добавить("ОбъектРемонтаПоУбыванию", Тип("КнопкаФормы"), ГруппаСортировка);
	ЭлементОбъектРемонтаУбыв.Заголовок = НСтр("ru = 'Объект ремонта по убыванию'");
	ЭлементОбъектРемонтаУбыв.ИмяКоманды = "ОбъектРемонтаПоУбыванию";
	
	Элементы.ДанныеДеревоРекомендованоКРезерву.УстановитьДействие("ПриИзменении", "проф_ДанныеДеревоРекомендованоКРезервуПриИзменении");
	Элементы.ДанныеДерево.УстановитьДействие("ПриАктивизацииЯчейки", "проф_ДанныеДеревоПриАктивизацииЯчейки");
	
	Элементы.ДанныеДеревоОстатокНаСкладе.Видимость			= Ложь;
	Элементы.ДанныеДеревоПереместить.Видимость				= Ложь;
	Элементы.ДанныеДеревоКрайнийСрокЗаказа.Видимость		= Ложь;
	Элементы.ДанныеДеревоЗаказНаДатуПотребности.Видимость	= Ложь;
	Элементы.ДанныеДеревоЗаказВсего.Видимость				= Ложь;
	Элементы.ДанныеДеревоЗаказ.Видимость					= Ложь;
	Элементы.ДанныеДеревоСвободныйОстаток.Видимость			= Ложь;
	Элементы.ДанныеДеревоСоздатьРезерв.Видимость			= Ложь;
	Элементы.ДанныеДеревоКОбеспечению.Вид					= ВидПоляФормы.ПолеВвода;
	
	Элементы.ДанныеДеревоКОбеспечению.Подсказка = НСтр("ru = 'Количество номенклатуры не может быть больше указанной в Заказе на внутреннее потребление'");
	Элементы.ДанныеДеревоКОбеспечению.УстановитьДействие("ПриИзменении", "проф_ДанныеДеревоКОбеспечениюПриИзменении");
	
	ЭлементПрошлаЗакупка = Элементы.Добавить("ДанныеДеревоПрошлаЗакупка", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементПрошлаЗакупка.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПрошлаЗакупка.Заголовок = НСтр("ru = 'Прошла закупка'");
	ЭлементПрошлаЗакупка.ПутьКДанным = "ДанныеДерево.ПрошлаЗакупка";
	ЭлементПрошлаЗакупка.ТолькоПросмотр = Истина;
	
	ЭлементНазначение = Элементы.Добавить("ДанныеДеревоНазначение", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементНазначение.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНазначение.Заголовок = НСтр("ru = 'Назначение'");
	ЭлементНазначение.ПутьКДанным = "ДанныеДерево.Назначение";
	ЭлементНазначение.ТолькоПросмотр = Истина;
	
	ЭлементНаПеремещении = Элементы.Добавить("ДанныеДеревоНаПеремещении", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементНаПеремещении.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНаПеремещении.Заголовок = НСтр("ru = 'На перемещении'");
	ЭлементНаПеремещении.ПутьКДанным = "ДанныеДерево.НаПеремещении";
	ЭлементНаПеремещении.ТолькоПросмотр = Истина;
	
	ЭлементЕстьАналоги = Элементы.Добавить("ДанныеДеревоЕстьАналоги", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементЕстьАналоги.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементЕстьАналоги.Заголовок = НСтр("ru = 'Есть аналоги'");
	ЭлементЕстьАналоги.ПутьКДанным = "ДанныеДерево.ЕстьАналоги";
	ЭлементЕстьАналоги.КартинкаШапки = БиблиотекаКартинок.Заменить;
	ЭлементЕстьАналоги.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементЕстьАналоги.КартинкаЗначений = БиблиотекаКартинок.Заменить;
	
	Элементпроф_СоздатьРезерв = Элементы.Добавить("ДанныеДеревопроф_СоздатьРезерв", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	Элементпроф_СоздатьРезерв.Вид = ВидПоляФормы.ПолеКартинки;
	Элементпроф_СоздатьРезерв.Заголовок = НСтр("ru = 'Есть аналоги'");
	Элементпроф_СоздатьРезерв.ПутьКДанным = "ДанныеДерево.проф_СоздатьРезерв";
	Элементпроф_СоздатьРезерв.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элементпроф_СоздатьРезерв.КартинкаЗначений = БиблиотекаКартинок.ПереключитьАктивность;
	Элементпроф_СоздатьРезерв.КартинкаШапки = БиблиотекаКартинок.ПереключитьАктивность;
	
	ЭлементКВыполнению = Элементы.Добавить("ДанныеДеревоКВыполнению", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементКВыполнению.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементКВыполнению.Заголовок = НСтр("ru = 'К выполнению'");
	ЭлементКВыполнению.ПутьКДанным = "ДанныеДерево.КВыполнению";
	ЭлементКВыполнению.УстановитьДействие("ПриИзменении", "проф_ДанныеДеревоКВыполнениюПриИзменении");
	
	ЭлементПрогнозДатыПоступления = Элементы.Добавить("ДанныеДеревоПрогнозДатыПоступления", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементПрогнозДатыПоступления.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПрогнозДатыПоступления.Заголовок = НСтр("ru = 'Прогноз даты поступления в Билибино'");
	ЭлементПрогнозДатыПоступления.ПутьКДанным = "ДанныеДерево.ПрогнозДатыПоступления";
	ЭлементПрогнозДатыПоступления.ТолькоПросмотр = Истина;
	//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	ЭлементПрогнозДатыПоступления.Видимость = Ложь;
	//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	
	ЭлементСостояниеЗакупки = Элементы.Добавить("ДанныеДеревоСостояниеЗакупки", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементСостояниеЗакупки.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементСостояниеЗакупки.Заголовок = НСтр("ru = 'Состояние закупки'");
	ЭлементСостояниеЗакупки.ПутьКДанным = "ДанныеДерево.СостояниеЗакупки";
	ЭлементСостояниеЗакупки.ТолькоПросмотр = Истина;
	//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	ЭлементСостояниеЗакупки.Видимость = Ложь;
	//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	
	ЭлементТоварыВПути = Элементы.Добавить("ДанныеДеревоТоварыВПути", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементТоварыВПути.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементТоварыВПути.Заголовок = НСтр("ru = 'Товары в пути'");
	ЭлементТоварыВПути.ПутьКДанным = "ДанныеДерево.ТоварыВПути";
	ЭлементТоварыВПути.ТолькоПросмотр = Истина;
	
	ЭлементДоступно = Элементы.Добавить("ДанныеДеревоДоступно", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементДоступно.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементДоступно.Заголовок = НСтр("ru = 'Доступно'");
	ЭлементДоступно.ПутьКДанным = "ДанныеДерево.Доступно";
	ЭлементДоступно.ТолькоПросмотр = Истина;
	
	ЭлементНаименованиеОборудования = Элементы.Добавить("ДанныеДеревоНаименованиеОборудования", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементНаименованиеОборудования.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНаименованиеОборудования.Заголовок = НСтр("ru = 'Наименование оборудования'");
	ЭлементНаименованиеОборудования.ПутьКДанным = "ДанныеДерево.НаименованиеОборудования";
	ЭлементНаименованиеОборудования.ТолькоПросмотр = Истина;
	
	//++ Проф-ИТ, #317, Соловьев А.А., 30.10.2023
	ЭлементКЗаказу = Элементы.Добавить("ДанныеДеревопроф_КЗаказу", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементКЗаказу.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементКЗаказу.Заголовок = НСтр("ru = 'К заказу'");
	ЭлементКЗаказу.ПутьКДанным = "ДанныеДерево.проф_КЗаказу";
	ЭлементКЗаказу.УстановитьДействие("ПриИзменении", "проф_КЗаказуПриИзменении");
	//-- Проф-ИТ, #317, Соловьев А.А., 30.10.2023
	
	//++ Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	ЭлементСтатусЗаказа = Элементы.Добавить("ДанныеДеревоСтатусЗаказа", Тип("ПолеФормы"), Элементы.ДанныеДерево);
	ЭлементСтатусЗаказа.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементСтатусЗаказа.Заголовок = НСтр("ru = 'Статус заказа'");
	ЭлементСтатусЗаказа.ПутьКДанным = "ДанныеДерево.СтатусЗаказа";
	ЭлементСтатусЗаказа.ТолькоПросмотр = Истина;
	//-- Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	
	Элементы.Переместить(ГруппаСортировка,							Элементы.ДанныеДеревоКоманднаяПанель, Элементы.ФормаСвернутьРазвернуть);
	Элементы.Переместить(ЭлементКВыполнению,						Элементы.ДанныеДерево, Элементы.ДанныеДеревоКОбеспечению);
	Элементы.Переместить(ЭлементКЗаказу,							Элементы.ДанныеДерево, Элементы.ДанныеДеревоКОбеспечению);
	Элементы.Переместить(ЭлементНазначение,							Элементы.ДанныеДерево, Элементы.ДанныеДеревоКОбеспечению);
	Элементы.Переместить(ЭлементЕстьАналоги,						Элементы.ДанныеДерево, Элементы.ДанныеДеревоДанныеИДата);
	Элементы.Переместить(Элементы.ДанныеДеревоМинОстаток,			Элементы.ДанныеДерево, Элементы.ДанныеДеревоЗаказВсего);
	Элементы.Переместить(ЭлементНаПеремещении,						Элементы.ДанныеДерево, Элементы.ДанныеДеревоМинОстаток);
	Элементы.Переместить(ЭлементПрошлаЗакупка,						Элементы.ДанныеДерево, Элементы.ДанныеДеревоМинОстаток);
	Элементы.Переместить(ЭлементПрогнозДатыПоступления,				Элементы.ДанныеДерево, Элементы.ДанныеДеревоМинОстаток);
	Элементы.Переместить(ЭлементСостояниеЗакупки,					Элементы.ДанныеДерево, Элементы.ДанныеДеревоМинОстаток);
	Элементы.Переместить(ЭлементТоварыВПути,						Элементы.ДанныеДерево, Элементы.ДанныеДеревоМинОстаток);
	Элементы.Переместить(Элементы.ДанныеДеревоОсталосьОбеспечить,	Элементы.ДанныеДерево, Элементы.ДанныеДеревоСнятьПотребность);
	Элементы.Переместить(ЭлементДоступно,							Элементы.ДанныеДерево, Элементы.ДанныеДеревоРезервирование);
	Элементы.Переместить(ЭлементНаименованиеОборудования,			Элементы.ДанныеДерево, ЭлементКВыполнению);
	Элементы.Переместить(Элементпроф_СоздатьРезерв,					Элементы.ДанныеДерево, ЭлементНаПеремещении);
	//++ Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	Элементы.Переместить(ЭлементСтатусЗаказа,						Элементы.ДанныеДерево, ЭлементКВыполнению);
	//-- Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	
	//
	
	Элементы.ОстаткиПоСкладам.ТолькоПросмотр = Истина;
	Элементы.ОстаткиПоСкладамСвободныйОстаток.Заголовок = НСтр("ru = 'Доступно/Резерв ТОиР'");
	Элементы.ОстаткиПоСкладамРезерв.Заголовок = НСтр("ru = 'Резерв не ТОиР'");
	Элементы.ОстаткиПоСкладамОстаток.Заголовок = НСтр("ru = 'На складе'");
	
	ЭлементНаПеремещении = Элементы.Добавить("ОстаткиПоСкладамНаПеремещении", Тип("ПолеФормы"), Элементы.ОстаткиПоСкладам);
	ЭлементНаПеремещении.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНаПеремещении.Заголовок = НСтр("ru = 'На перемещении'");
	ЭлементНаПеремещении.ПутьКДанным = "ОстаткиПоСкладам.НаПеремещении";
	ЭлементНаПеремещении.ТолькоПросмотр = Истина;
	
	ЭлементПоступит = Элементы.Добавить("ОстаткиПоСкладамПоступит", Тип("ПолеФормы"), Элементы.ОстаткиПоСкладам);
	ЭлементПоступит.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПоступит.Заголовок = НСтр("ru = 'Поступит'");
	ЭлементПоступит.ПутьКДанным = "ОстаткиПоСкладам.Поступит";
	ЭлементПоступит.ТолькоПросмотр = Истина;
	
	Элементы.Переместить(ЭлементНаПеремещении,						Элементы.ОстаткиПоСкладам, Элементы.ОстаткиПоСкладамМинОстаток);
	Элементы.Переместить(ЭлементПоступит,							Элементы.ОстаткиПоСкладам, Элементы.ОстаткиПоСкладамМинОстаток);
	Элементы.Переместить(Элементы.ОстаткиПоСкладамЗаказано,			Элементы.ОстаткиПоСкладам, ЭлементПоступит);
	Элементы.Переместить(Элементы.ОстаткиПоСкладамСвободныйОстаток,	Элементы.ОстаткиПоСкладам, Элементы.ОстаткиПоСкладамРезерв);
	
	НоваяКоманда = Команды.Добавить("проф_СоздатьЗаказНаВнутреннееПотребление");
	НоваяКоманда.Заголовок = НСтр("ru = 'Создать заказ на внутреннее потребление'");
	НоваяКоманда.Действие = "проф_СоздатьЗаказНаВнутреннееПотребление";
	
	НовыйЭлемент = Элементы.Добавить("проф_СоздатьЗаказНаВнутреннееПотребление", Тип("КнопкаФормы"), КоманднаяПанель);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Выполнить'");
	НовыйЭлемент.ИмяКоманды = "проф_СоздатьЗаказНаВнутреннееПотребление";
	
	НовыйЭлемент  					= Элементы.Добавить("проф_Номенклатура", Тип("ПолеФормы"), проф_ГруппаОтборНиз);
	НовыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПодсказкаВвода 	= НСтр("ru = 'Номенклатура'");
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ПутьКДанным 		= "Номенклатура";
	НовыйЭлемент.КнопкаОчистки		= Истина;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "проф_НоменклатураПриИзменении");
	
	//-- Проф-ИТ, #228, Соловьев А.А., 18.09.2023
	
	//++ Проф-ИТ, #295, Соловьев А.А., 09.10.2023
	НоваяКоманда = Команды.Добавить("СформироватьПеремещенияДляСогласования");
	НоваяКоманда.Заголовок = НСтр("ru = 'Сформировать перемещения для согласования'");
	НоваяКоманда.Действие = "СформироватьПеремещенияДляСогласования";
	
	НовыйЭлемент = Элементы.Добавить("СформироватьПеремещенияДляСогласования", Тип("КнопкаФормы"), КоманднаяПанель);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Сформировать перемещения для согласования'");
	НовыйЭлемент.ИмяКоманды = "СформироватьПеремещенияДляСогласования";
	
	ВывестиПозицииДляПеремещения();
	//-- Проф-ИТ, #295, Соловьев А.А., 09.10.2023
	
	//++ Проф-ИТ, #372, Соловьев А.А., 24.11.2023
	НоваяКоманда = Команды.Добавить("проф_СоздатьЗаказыНаПеремещение");
	НоваяКоманда.Заголовок = НСтр("ru = 'Создать заказы на перемещение'");
	НоваяКоманда.Действие = "проф_СоздатьЗаказыНаПеремещение";
	
	НовыйЭлемент = Элементы.Добавить("проф_СоздатьЗаказыНаПеремещение", Тип("КнопкаФормы"), Элементы.ДанныеДеревоДокументы);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Заказы на перемещение'");
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = "проф_СоздатьЗаказыНаПеремещение";
	//-- Проф-ИТ, #372, Соловьев А.А., 24.11.2023
	
	//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	проф_ГруппаГруппировкаОтбор						= Элементы.Вставить("проф_ГруппаГруппировкаОтбор", Тип("ГруппаФормы"), ЭтотОбъект, Элементы.Колонки);
	проф_ГруппаГруппировкаОтбор.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	проф_ГруппаГруппировкаОтбор.Отображение			= ОтображениеОбычнойГруппы.Нет;
	проф_ГруппаГруппировкаОтбор.ОтображатьЗаголовок = Ложь; 
	проф_ГруппаГруппировкаОтбор.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	Элементы.Переместить(Элементы.ГруппировкаДанных, проф_ГруппаГруппировкаОтбор);
	
	НовыйЭлемент = Элементы.Добавить("ЗВПДляЗакупки", Тип("ПолеФормы"), проф_ГруппаГруппировкаОтбор);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Показывать'");
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	НовыйЭлемент.ПутьКДанным = "ЗВПДляЗакупки";
	НовыйЭлемент.СписокВыбора.Добавить(0, "ЗВП для ремонтов");
	НовыйЭлемент.СписокВыбора.Добавить(1, "ЗВП для закупки");
	НовыйЭлемент.ВидПереключателя = ВидПереключателя.Тумблер;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЗВПДляЗакупкиПриИзменении");
	
	проф_ОбщегоНазначенияВызовСервера.ВывестиТоварыВПути(ЭтотОбъект, ЭтотОбъект["Номенклатура"], ЭтотОбъект["ПодразделенияСлужбыТОИР"], Элементы.Левая, Элементы.Легенда);
	//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	
КонецПроцедуры

//++ Проф-ИТ, #228, Соловьев А.А., 04.10.2023

&НаСервере
Процедура УстановитьПредопределенныеЗначения()
	
	ЭтотОбъект["СкладБГЛЦ"] = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("ОтчетОбеспечениеРемонта", 
		"СкладБГЛЦ");
	
	ЭтотОбъект["ПодразделенияСлужбыТОИР"] = Справочники.проф_НастройкиСистемы.ПолучитьСпЗначНастройкиСистемы(
		"Подразделения", "ПодразделенияСлужбыТОИР");
	
	ЭтотОбъект["ФОИспользоватьВнешниеОснования"] =	ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот");
	ЭтотОбъект["ФОИспользоватьДефекты"] =			ПолучитьФункциональнуюОпцию("торо_УчетВыявленныхДефектовОборудования");
	ЭтотОбъект["ФОИспользоватьППР"] =				ПолучитьФункциональнуюОпцию("торо_ИспользоватьППР");
	
	ЭтотОбъект["ТипСортировки"] = "ДатаПотребности ВОЗР";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиОстаткиПоНазначению()
	
	ИмяСписка = "ОстаткиПоНазначению";
	
	РеквизитДинамическийСписок = ЭтаФорма[ИмяСписка];
	РеквизитДинамическийСписок.ПроизвольныйЗапрос = Истина;
	РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапросаОстаткиПоНазначению();
	
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("Склад", ЭтотОбъект["Склад"]);
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("Номенклатура", ЭтотОбъект["Номенклатура"]);
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ИспользоватьОтборПоСкладу", ЗначениеЗаполнено(ЭтотОбъект["Склад"]));
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ИспользоватьОтборПоНоменклатуре", ЗначениеЗаполнено(ЭтотОбъект["Номенклатура"]));
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ПодразделенияСлужбыТОИР", ЭтотОбъект["ПодразделенияСлужбыТОИР"]);
	
	ГруппаОстатки = Элементы.Добавить("Группа" + ИмяСписка, Тип("ГруппаФормы"), ЭтотОбъект);
	ГруппаОстатки.Вид						= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОстатки.Заголовок					= НСтр("ru = 'Расшифровка назначения'");
	ГруппаОстатки.Отображение				= ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаОстатки.Группировка				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОстатки.Поведение					= ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаОстатки.ОтображениеУправления 	= ОтображениеУправленияОбычнойГруппы.Картинка;
	ГруппаОстатки.ОтображатьЗаголовок		= Истина;
	ГруппаОстатки.РастягиватьПоГоризонтали	= Истина;
	ГруппаОстатки.Скрыть();
	
	Элементы.Переместить(ГруппаОстатки, Элементы.Левая, Элементы.ГруппаСвязанныеДокументы);
	
	ТаблицаФормы = Элементы.Добавить(ИмяСписка, Тип("ТаблицаФормы"), ГруппаОстатки);
	ТаблицаФормы.ПутьКДанным = ИмяСписка;
	ТаблицаФормы.КоманднаяПанель.Видимость = Ложь;
	ТаблицаФормы.Высота = 3;
	ТаблицаФормы.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("Номенклатура", Ложь);
	СтруктураКолонок.Вставить("Характеристика", Ложь);
	СтруктураКолонок.Вставить("Склад", Ложь);
	СтруктураКолонок.Вставить("Назначение", Истина);
	СтруктураКолонок.Вставить("Количество", Истина);
	СтруктураКолонок.Вставить("ИмяПоля", Ложь);
	
	проф_ОбщегоНазначенияВызовСервера.ВывестиКолонкиДинамическогоСписка(ЭтотОбъект, ИмяСписка, СтруктураКолонок, ТаблицаФормы);
	
	ЭлементОтбора = ЭтотОбъект[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаОстаткиПоНазначению()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура КАК Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика КАК Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Назначение КАК Назначение,
	|	проф_ЗапасыИПотребностиОстатки.Склад КАК Склад,
	|	проф_ЗапасыИПотребностиОстатки.КОбеспечениюОстаток КАК КОбеспечениюОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ПоступитОстаток КАК ПоступитОстаток,
	|	проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток КАК РезервироватьНаСкладеОстаток,
	|	проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток КАК РезервироватьПоМереПоступленияОстаток
	|ПОМЕСТИТЬ ДанныеРегистраЗапасыИПотребности
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&ТекущаяДата,
	|			&ИспользоватьОтборПоСкладу
	|				И Склад = &Склад
	|				И &ИспользоватьОтборПоНоменклатуре
	|				И Номенклатура = &Номенклатура) КАК проф_ЗапасыИПотребностиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Назначение,
	|	проф_ЗапасыИПотребностиОстатки.Склад,
	|	проф_ЗапасыИПотребностиОстатки.КОбеспечениюОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ПоступитОстаток,
	|	проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток,
	|	проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&ТекущаяДата,
	|			НЕ &ИспользоватьОтборПоСкладу
	|				И &ИспользоватьОтборПоНоменклатуре
	|				И Номенклатура = &Номенклатура) КАК проф_ЗапасыИПотребностиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Назначение,
	|	проф_ЗапасыИПотребностиОстатки.Склад,
	|	проф_ЗапасыИПотребностиОстатки.КОбеспечениюОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ПоступитОстаток,
	|	проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток,
	|	проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&ТекущаяДата,
	|			&ИспользоватьОтборПоСкладу
	|				И Склад = &Склад
	|				И НЕ &ИспользоватьОтборПоНоменклатуре) КАК проф_ЗапасыИПотребностиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Назначение,
	|	проф_ЗапасыИПотребностиОстатки.Склад,
	|	проф_ЗапасыИПотребностиОстатки.КОбеспечениюОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ПоступитОстаток,
	|	проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток,
	|	проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&ТекущаяДата,
	|			НЕ &ИспользоватьОтборПоСкладу
	|				И НЕ &ИспользоватьОтборПоНоменклатуре) КАК проф_ЗапасыИПотребностиОстатки
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистраЗапасыИПотребности.Номенклатура КАК Номенклатура,
	|	ДанныеРегистраЗапасыИПотребности.Характеристика КАК Характеристика,
	|	ДанныеРегистраЗапасыИПотребности.Назначение КАК Назначение,
	|	ДанныеРегистраЗапасыИПотребности.Склад КАК Склад,
	|	ДанныеРегистраЗапасыИПотребности.КОбеспечениюОстаток КАК КОбеспечениюОстаток,
	|	ДанныеРегистраЗапасыИПотребности.ВНаличииОстаток КАК ВНаличииОстаток,
	|	ДанныеРегистраЗапасыИПотребности.ПоступитОстаток КАК ПоступитОстаток,
	|	0 КАК НаПеремещении
	|ПОМЕСТИТЬ ЗапасыИПотребностиПредварительно
	|ИЗ
	|	ДанныеРегистраЗапасыИПотребности КАК ДанныеРегистраЗапасыИПотребности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	проф_ЗаказыНаПеремещениеОстатки.Номенклатура,
	|	проф_ЗаказыНаПеремещениеОстатки.Характеристика,
	|	проф_ЗаказНаПеремещениеТовары.Назначение,
	|	проф_ЗаказНаПеремещение.СкладОтправитель,
	|	0,
	|	0,
	|	0,
	|	проф_ЗаказыНаПеремещениеОстатки.КОформлениюОстаток
	|ИЗ
	|	РегистрНакопления.проф_ЗаказыНаПеремещение.Остатки(
	|			&ТекущаяДата,
	|			&ИспользоватьОтборПоНоменклатуре
	|				И Номенклатура = &Номенклатура) КАК проф_ЗаказыНаПеремещениеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.проф_ЗаказНаПеремещение КАК проф_ЗаказНаПеремещение
	|		ПО проф_ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение = проф_ЗаказНаПеремещение.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.проф_ЗаказНаПеремещение.Товары КАК проф_ЗаказНаПеремещениеТовары
	|		ПО проф_ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение = проф_ЗаказНаПеремещениеТовары.Ссылка
	|			И проф_ЗаказыНаПеремещениеОстатки.КодСтроки = проф_ЗаказНаПеремещениеТовары.КодСтроки
	|			И проф_ЗаказыНаПеремещениеОстатки.Номенклатура = проф_ЗаказНаПеремещениеТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	проф_ЗаказыНаПеремещениеОстатки.Номенклатура,
	|	проф_ЗаказыНаПеремещениеОстатки.Характеристика,
	|	проф_ЗаказНаПеремещениеТовары.Назначение,
	|	проф_ЗаказНаПеремещение.СкладОтправитель,
	|	0,
	|	0,
	|	0,
	|	проф_ЗаказыНаПеремещениеОстатки.КОформлениюОстаток
	|ИЗ
	|	РегистрНакопления.проф_ЗаказыНаПеремещение.Остатки(&ТекущаяДата, НЕ &ИспользоватьОтборПоНоменклатуре) КАК проф_ЗаказыНаПеремещениеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.проф_ЗаказНаПеремещение КАК проф_ЗаказНаПеремещение
	|		ПО проф_ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение = проф_ЗаказНаПеремещение.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.проф_ЗаказНаПеремещение.Товары КАК проф_ЗаказНаПеремещениеТовары
	|		ПО проф_ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение = проф_ЗаказНаПеремещениеТовары.Ссылка
	|			И проф_ЗаказыНаПеремещениеОстатки.КодСтроки = проф_ЗаказНаПеремещениеТовары.КодСтроки
	|			И проф_ЗаказыНаПеремещениеОстатки.Номенклатура = проф_ЗаказНаПеремещениеТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеРегистраЗапасыИПотребности.Номенклатура КАК Номенклатура,
	|	ДанныеРегистраЗапасыИПотребности.Характеристика КАК Характеристика,
	|	ДанныеРегистраЗапасыИПотребности.Назначение КАК Назначение,
	|	ДанныеРегистраЗапасыИПотребности.Склад КАК Склад,
	|	ДанныеРегистраЗапасыИПотребности.ВНаличииОстаток - ДанныеРегистраЗапасыИПотребности.РезервироватьНаСкладеОстаток - ДанныеРегистраЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток КАК Доступно,
	|	0 КАК РезервНеТОиР
	|ПОМЕСТИТЬ втОстаткиДоступноРезервНеТОиРПредварительно
	|ИЗ
	|	ДанныеРегистраЗапасыИПотребности КАК ДанныеРегистраЗапасыИПотребности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО ДанныеРегистраЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистраЗапасыИПотребности.Номенклатура,
	|	ДанныеРегистраЗапасыИПотребности.Характеристика,
	|	ДанныеРегистраЗапасыИПотребности.Назначение,
	|	ДанныеРегистраЗапасыИПотребности.Склад,
	|	ДанныеРегистраЗапасыИПотребности.ВНаличииОстаток - ДанныеРегистраЗапасыИПотребности.РезервироватьНаСкладеОстаток - ДанныеРегистраЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток,
	|	0
	|ИЗ
	|	ДанныеРегистраЗапасыИПотребности КАК ДанныеРегистраЗапасыИПотребности
	|ГДЕ
	|	ДанныеРегистраЗапасыИПотребности.Назначение = ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистраЗапасыИПотребности.Номенклатура,
	|	ДанныеРегистраЗапасыИПотребности.Характеристика,
	|	ДанныеРегистраЗапасыИПотребности.Назначение,
	|	ДанныеРегистраЗапасыИПотребности.Склад,
	|	0,
	|	ДанныеРегистраЗапасыИПотребности.ВНаличииОстаток - ДанныеРегистраЗапасыИПотребности.РезервироватьНаСкладеОстаток - ДанныеРегистраЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток
	|ИЗ
	|	ДанныеРегистраЗапасыИПотребности КАК ДанныеРегистраЗапасыИПотребности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО ДанныеРегистраЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			И (НЕ проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстаткиДоступноРезервНеТОиР.Номенклатура КАК Номенклатура,
	|	втОстаткиДоступноРезервНеТОиР.Характеристика КАК Характеристика,
	|	втОстаткиДоступноРезервНеТОиР.Назначение КАК Назначение,
	|	втОстаткиДоступноРезервНеТОиР.Склад КАК Склад,
	|	СУММА(втОстаткиДоступноРезервНеТОиР.Доступно) КАК Доступно,
	|	СУММА(втОстаткиДоступноРезервНеТОиР.РезервНеТОиР) КАК РезервНеТОиР
	|ПОМЕСТИТЬ втДоступноРезервНеТОиР
	|ИЗ
	|	втОстаткиДоступноРезервНеТОиРПредварительно КАК втОстаткиДоступноРезервНеТОиР
	|
	|СГРУППИРОВАТЬ ПО
	|	втОстаткиДоступноРезервНеТОиР.Назначение,
	|	втОстаткиДоступноРезервНеТОиР.Характеристика,
	|	втОстаткиДоступноРезервНеТОиР.Номенклатура,
	|	втОстаткиДоступноРезервНеТОиР.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыИПотребностиПредварительно.Номенклатура КАК Номенклатура,
	|	ЗапасыИПотребностиПредварительно.Характеристика КАК Характеристика,
	|	ЗапасыИПотребностиПредварительно.Назначение КАК Назначение,
	|	ЗапасыИПотребностиПредварительно.Склад КАК Склад,
	|	СУММА(ЗапасыИПотребностиПредварительно.КОбеспечениюОстаток) - СУММА(ЗапасыИПотребностиПредварительно.ВНаличииОстаток) КАК Заказано,
	|	СУММА(ЗапасыИПотребностиПредварительно.ПоступитОстаток) КАК Поступит,
	|	СУММА(ЗапасыИПотребностиПредварительно.НаПеремещении) КАК НаПеремещении
	|ПОМЕСТИТЬ втЗапасыИПотребности
	|ИЗ
	|	ЗапасыИПотребностиПредварительно КАК ЗапасыИПотребностиПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыИПотребностиПредварительно.Характеристика,
	|	ЗапасыИПотребностиПредварительно.Номенклатура,
	|	ЗапасыИПотребностиПредварительно.Назначение,
	|	ЗапасыИПотребностиПредварительно.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.КоличествоОстаток КАК Резерв
	|ПОМЕСТИТЬ втРезервыПоНоменклатуре
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			&ТекущаяДата,
	|			&ИспользоватьОтборПоСкладу
	|				И Склад = &Склад
	|				И &ИспользоватьОтборПоНоменклатуре
	|				И Номенклатура = &Номенклатура) КАК Регистр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистр.Номенклатура,
	|	Регистр.Характеристика,
	|	Регистр.Склад,
	|	Регистр.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			&ТекущаяДата,
	|			НЕ &ИспользоватьОтборПоСкладу
	|				И &ИспользоватьОтборПоНоменклатуре
	|				И Номенклатура = &Номенклатура) КАК Регистр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистр.Номенклатура,
	|	Регистр.Характеристика,
	|	Регистр.Склад,
	|	Регистр.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			&ТекущаяДата,
	|			&ИспользоватьОтборПоСкладу
	|				И Склад = &Склад
	|				И НЕ &ИспользоватьОтборПоНоменклатуре) КАК Регистр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистр.Номенклатура,
	|	Регистр.Характеристика,
	|	Регистр.Склад,
	|	Регистр.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			&ТекущаяДата,
	|			НЕ &ИспользоватьОтборПоСкладу
	|				И НЕ &ИспользоватьОтборПоНоменклатуре) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втДоступноРезервНеТОиР.Номенклатура, втЗапасыИПотребности.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(втДоступноРезервНеТОиР.Характеристика, втЗапасыИПотребности.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(втДоступноРезервНеТОиР.Назначение, втЗапасыИПотребности.Назначение) КАК Назначение,
	|	ЕСТЬNULL(втДоступноРезервНеТОиР.Склад, втЗапасыИПотребности.Склад) КАК Склад,
	|	СУММА(ЕСТЬNULL(втДоступноРезервНеТОиР.Доступно, 0)) КАК Доступно,
	|	СУММА(ЕСТЬNULL(втДоступноРезервНеТОиР.РезервНеТОиР, 0)) КАК РезервНеТОиР,
	|	СУММА(ЕСТЬNULL(втЗапасыИПотребности.НаПеремещении, 0)) КАК НаПеремещении,
	|	СУММА(ЕСТЬNULL(втЗапасыИПотребности.Заказано, 0)) КАК Заказано,
	|	СУММА(ЕСТЬNULL(втЗапасыИПотребности.Поступит, 0)) КАК Поступит
	|ПОМЕСТИТЬ втОстаткиИтоговая
	|ИЗ
	|	втДоступноРезервНеТОиР КАК втДоступноРезервНеТОиР
	|		ПОЛНОЕ СОЕДИНЕНИЕ втЗапасыИПотребности КАК втЗапасыИПотребности
	|		ПО втДоступноРезервНеТОиР.Номенклатура = втЗапасыИПотребности.Номенклатура
	|			И втДоступноРезервНеТОиР.Характеристика = втЗапасыИПотребности.Характеристика
	|			И втДоступноРезервНеТОиР.Назначение = втЗапасыИПотребности.Назначение
	|			И втДоступноРезервНеТОиР.Склад = втЗапасыИПотребности.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втДоступноРезервНеТОиР.Номенклатура, втЗапасыИПотребности.Номенклатура),
	|	ЕСТЬNULL(втДоступноРезервНеТОиР.Характеристика, втЗапасыИПотребности.Характеристика),
	|	ЕСТЬNULL(втДоступноРезервНеТОиР.Назначение, втЗапасыИПотребности.Назначение),
	|	ЕСТЬNULL(втДоступноРезервНеТОиР.Склад, втЗапасыИПотребности.Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстаткиИтоговая.Номенклатура КАК Номенклатура,
	|	втОстаткиИтоговая.Характеристика КАК Характеристика,
	|	втОстаткиИтоговая.Назначение КАК Назначение,
	|	втОстаткиИтоговая.Склад КАК Склад,
	|	втОстаткиИтоговая.Доступно КАК Количество,
	|	""СвободныйОстаток"" КАК ИмяПоля
	|ИЗ
	|	втОстаткиИтоговая КАК втОстаткиИтоговая
	|ГДЕ
	|	втОстаткиИтоговая.Доступно > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОстаткиИтоговая.Номенклатура,
	|	втОстаткиИтоговая.Характеристика,
	|	втОстаткиИтоговая.Назначение,
	|	втОстаткиИтоговая.Склад,
	|	втОстаткиИтоговая.РезервНеТОиР,
	|	""Резерв""
	|ИЗ
	|	втОстаткиИтоговая КАК втОстаткиИтоговая
	|ГДЕ
	|	втОстаткиИтоговая.РезервНеТОиР > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОстаткиИтоговая.Номенклатура,
	|	втОстаткиИтоговая.Характеристика,
	|	втОстаткиИтоговая.Назначение,
	|	втОстаткиИтоговая.Склад,
	|	втОстаткиИтоговая.НаПеремещении,
	|	""НаПеремещении""
	|ИЗ
	|	втОстаткиИтоговая КАК втОстаткиИтоговая
	|ГДЕ
	|	втОстаткиИтоговая.НаПеремещении > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОстаткиИтоговая.Номенклатура,
	|	втОстаткиИтоговая.Характеристика,
	|	втОстаткиИтоговая.Назначение,
	|	втОстаткиИтоговая.Склад,
	|	втОстаткиИтоговая.Заказано,
	|	""Заказано""
	|ИЗ
	|	втОстаткиИтоговая КАК втОстаткиИтоговая
	|ГДЕ
	|	втОстаткиИтоговая.Заказано > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОстаткиИтоговая.Номенклатура,
	|	втОстаткиИтоговая.Характеристика,
	|	втОстаткиИтоговая.Назначение,
	|	втОстаткиИтоговая.Склад,
	|	втОстаткиИтоговая.Поступит,
	|	""Поступит""
	|ИЗ
	|	втОстаткиИтоговая КАК втОстаткиИтоговая
	|ГДЕ
	|	втОстаткиИтоговая.Поступит > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОстаткиИтоговая.Номенклатура,
	|	втОстаткиИтоговая.Характеристика,
	|	втОстаткиИтоговая.Назначение,
	|	втОстаткиИтоговая.Склад,
	|	ВЫБОР
	|		КОГДА втОстаткиИтоговая.Доступно > 0
	|			ТОГДА втОстаткиИтоговая.Доступно - ЕСТЬNULL(втРезервыПоНоменклатуре.Резерв, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	""ДоступноОсновнаяТаблица""
	|ИЗ
	|	втОстаткиИтоговая КАК втОстаткиИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервыПоНоменклатуре КАК втРезервыПоНоменклатуре
	|		ПО втОстаткиИтоговая.Номенклатура = втРезервыПоНоменклатуре.Номенклатура
	|			И втОстаткиИтоговая.Характеристика = втРезервыПоНоменклатуре.Характеристика
	|			И втОстаткиИтоговая.Склад = втРезервыПоНоменклатуре.Склад
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втОстаткиИтоговая.Доступно > 0
	|				ТОГДА втОстаткиИтоговая.Доступно - ЕСТЬNULL(втРезервыПоНоменклатуре.Резерв, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПодобратьАналогиНаКлиентеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьНаКлиенте();
		УстановитьОтборНаСвязанныеТаблицы();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//++ Стандартное УО
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоСоздатьЗаказ.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.СкрытьФлагЗаказа", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоДатаПотребности.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.ЭтоЗаказ", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДерево.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.ЭтоНоменклатура", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ГруппировкаДанных", ВидСравненияКомпоновкиДанных.Равно, 0, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(245, 245, 245));
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревопроф_СоздатьРезерв.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоПереместить.Имя);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(245, 245, 245));
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоДанные.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоОбеспечено.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоСоздатьРезерв.Имя);
	ГруппаОтбораИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"РемонтыДерево.Обеспечено", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"РемонтыДерево.Завершен", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(238, 245, 241));
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоДанные.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоОбеспечено.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоСоздатьРезерв.Имя);
	ГруппаОтбораИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"РемонтыДерево.Обеспечено", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"РемонтыДерево.Завершен", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(249, 236, 236));
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоДанные.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоОбеспечено.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоСоздатьРезерв.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РемонтыДерево.Дата", ВидСравненияКомпоновкиДанных.Больше, КрайняяДатаГоризонта, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона",
		Метаданные.ЭлементыСтиля.ПравоРедактированияФон.Значение);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Метаданные.ЭлементыСтиля.НепринятаяВерсия.Значение);
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоДанные.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоОбеспечено.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДеревоСоздатьРезерв.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РемонтыДерево.Завершен", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(244, 244, 244));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Метаданные.ЭлементыСтиля.НепринятаяВерсия.Значение);
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоКрайнийСрокЗаказа.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.КрайнийСрокЗаказа", ВидСравненияКомпоновкиДанных.Заполнено, , , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.КрайнийСрокЗаказа", ВидСравненияКомпоновкиДанных.Меньше, НачалоДня(ТекущаяДатаСеанса()), , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт.Значение);
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДерево.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.ЭтоЗаказ", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ГруппировкаДанных", ВидСравненияКомпоновкиДанных.Равно, 1, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(245, 245, 245));
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДерево.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.СвязанСТекущейСтрокойРемонтыДерево", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Роса);
		
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоМинОстаток.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ГруппировкаДанных", ВидСравненияКомпоновкиДанных.Равно, 1, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//-- Стандартное УО
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоКВыполнению.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.ЭтоЗаказ", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревопроф_КЗаказу.Имя);
	
	ГруппаОтбораИли = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораИли.Представление = "ДанныеДеревоКОбеспечениюГруппаИли";
	
	ГруппаОтбораИ1 = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ГруппировкаДанных;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ1,
		"ДанныеДерево.ЭтоЗаказ", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	
	ГруппаОтбораИ2 = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ГруппировкаДанных;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ2,
		"ДанныеДерево.ЭтоНоменклатура", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоКОбеспечению.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоРекомендованоКРезерву.Имя);
	
	ГруппаОтбораИли = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораИли.Представление = "ДанныеДеревоКОбеспечениюГруппаИли";
	
	ГруппаОтбораИ1 = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ГруппировкаДанных;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ1,
		"ДанныеДерево.ЭтоЗаказ", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ1,
		"ДанныеДерево.КВыполнению", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	
	ГруппаОтбораИ2 = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ГруппировкаДанных;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ2,
		"ДанныеДерево.ЭтоНоменклатура", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ2,
		"ДанныеДерево.КВыполнению", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	//
	
	//++ Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоСтатусЗаказа.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДанныеДерево.ЭтоЗаказ", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	СписокСтатусНовый = Новый СписокЗначений;
	СписокСтатусНовый.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.проф_Новый);
	СписокСтатусНовый.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.ПустаяСсылка());
	
	СписокСтатусовУтвержден = Новый СписокЗначений;
	СписокСтатусовУтвержден.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.НаУтверждении);
	СписокСтатусовУтвержден.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоКВыполнению.Имя);
	
	ГруппаОтбораИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.СтатусЗаказа", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусНовый, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.КВыполнению", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Истина);
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоКВыполнению.Имя);
	
	ГруппаОтбораИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.СтатусЗаказа", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовУтвержден, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.СтрокаЗаблокирована", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.КВыполнению", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.проф_КЗаказу", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревопроф_КЗаказу.Имя);
	
	ГруппаОтбораИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.СтатусЗаказа", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовУтвержден, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.СтрокаЗаблокирована", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.КВыполнению", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.проф_КЗаказу", ВидСравненияКомпоновкиДанных.Равно, Ложь, , Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Истина);
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревопроф_КЗаказу.Имя);
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДеревоКВыполнению.Имя);
	
	ГруппаОтбораИ = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.СтатусЗаказа", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовУтвержден, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.СтрокаЗаблокирована", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.КВыполнению", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ДанныеДерево.проф_КЗаказу", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	//-- Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСписокАналогов()
	
	ИмяСписка = "СписокНоменклатураАналог";     
	
	РеквизитДинамическийСписок = ЭтаФорма[ИмяСписка];
	РеквизитДинамическийСписок.ПроизвольныйЗапрос = Истина;
	РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапросаТаблицаАналогов();
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("Склад", ЭтотОбъект.Склад);
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("Организация", ЭтотОбъект.Организация);
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ИспользоватьОтборПоСкладу", ЗначениеЗаполнено(ЭтотОбъект.Склад));
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ИспользоватьОтборПоОрганизации", ЗначениеЗаполнено(ЭтотОбъект.Организация));
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
	РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ПодразделенияСлужбыТОИР", ЭтотОбъект["ПодразделенияСлужбыТОИР"]);
	
	ГруппаСписокНоменклатураАналог = Элементы.Добавить("ГруппаСписокНоменклатураАналог", Тип("ГруппаФормы"), ЭтотОбъект);
	ГруппаСписокНоменклатураАналог.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСписокНоменклатураАналог.Заголовок 				= НСтр("ru = 'Аналоги'");
	ГруппаСписокНоменклатураАналог.Отображение 				= ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаСписокНоменклатураАналог.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСписокНоменклатураАналог.Поведение 				= ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаСписокНоменклатураАналог.ОтображениеУправления 	= ОтображениеУправленияОбычнойГруппы.Картинка;
	ГруппаСписокНоменклатураАналог.ОтображатьЗаголовок 		= Истина;
	ГруппаСписокНоменклатураАналог.РастягиватьПоГоризонтали = Истина;
	ГруппаСписокНоменклатураАналог.Скрыть();
	
	Элементы.Переместить(ГруппаСписокНоменклатураАналог, Элементы.Левая, Элементы.ГруппаСвязанныеДокументы);
	
	ТаблицаФормы = Элементы.Добавить(ИмяСписка, Тип("ТаблицаФормы"), ГруппаСписокНоменклатураАналог);
	ТаблицаФормы.ПутьКДанным = ИмяСписка;
	ТаблицаФормы.КоманднаяПанель.Видимость = Ложь;
	
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("НоменклатураОсновная",	Ложь);
	СтруктураКолонок.Вставить("ХарактеристикаОсновная",	Ложь);
	СтруктураКолонок.Вставить("Склад",					Истина);
	СтруктураКолонок.Вставить("Аналог",					Истина);
	СтруктураКолонок.Вставить("ХарактеристикаАналога",	Ложь);
	СтруктураКолонок.Вставить("Разрешение",				Истина);
	СтруктураКолонок.Вставить("УказаниеПоПрименению",	Истина);
	СтруктураКолонок.Вставить("Доступно",				Истина);
	СтруктураКолонок.Вставить("РезервНеТОиР",			Истина);
	СтруктураКолонок.Вставить("ЗаказИнициатора",		Истина);
	СтруктураКолонок.Вставить("Поступит",				Истина);
	СтруктураКолонок.Вставить("ЗаменаНоменклатурыАналогом", Истина);
	
	проф_ОбщегоНазначенияВызовСервера.ВывестиКолонкиДинамическогоСписка(ЭтотОбъект, ИмяСписка, СтруктураКолонок, ТаблицаФормы);
	
	ИмяЭлементаЗамена = ИмяСписка + "ЗаменаНоменклатурыАналогом";
	Элементы[ИмяЭлементаЗамена].Вид 				= ВидПоляФормы.ПолеКартинки;
	Элементы[ИмяЭлементаЗамена].КартинкаШапки 		= БиблиотекаКартинок.СтартБизнесПроцесса;
	Элементы[ИмяЭлементаЗамена].ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элементы[ИмяЭлементаЗамена].КартинкаЗначений 	= БиблиотекаКартинок.СтартБизнесПроцесса;
	
	Элементы.СписокНоменклатураАналогРезервНеТОиР.Заголовок = НСтр("ru = 'Резерв не ТОиР'");
	
	ТаблицаФормы.МаксимальнаяВысота = 10;
	ТаблицаФормы.АвтоМаксимальнаяВысота = Ложь;
	
	ТаблицаФормы.УстановитьДействие("Выбор", "проф_СписокНоменклатураАналогВыбор");
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаТаблицаАналогов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АналогиНоменклатурыДляРемонтов.Материал КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ФОИспользоватьХарактеристикиНоменклатуры
	|			ТОГДА торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	торо_АналогиНоменклатурыДляРемонтов.Аналог КАК Аналог,
	|	ВЫБОР
	|		КОГДА &ФОИспользоватьХарактеристикиНоменклатуры
	|			ТОГДА торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаАналога
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаАналога,
	|	торо_УстановкаАналоговНоменклатурыДляРемонтов.Ссылка КАК Разрешение,
	|	торо_УстановкаАналоговНоменклатурыДляРемонтов.УказаниеПоПрименению КАК УказаниеПоПрименению
	|ПОМЕСТИТЬ втТаблицаАналогов
	|ИЗ
	|	РегистрСведений.торо_АналогиНоменклатурыДляРемонтов КАК торо_АналогиНоменклатурыДляРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|			ПО СправочникНоменклатура.ВидНоменклатуры = СправочникВидыНоменклатуры.Ссылка
	|		ПО торо_АналогиНоменклатурыДляРемонтов.Аналог = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_УстановкаАналоговНоменклатурыДляРемонтов КАК торо_УстановкаАналоговНоменклатурыДляРемонтов
	|		ПО торо_АналогиНоменклатурыДляРемонтов.Регистратор = торо_УстановкаАналоговНоменклатурыДляРемонтов.Ссылка
	|ГДЕ
	|	торо_АналогиНоменклатурыДляРемонтов.Период <= &ТекущаяДата
	|	И торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АналогиНоменклатурыДляРемонтов.Материал,
	|	ВЫБОР
	|		КОГДА &ФОИспользоватьХарактеристикиНоменклатуры
	|			ТОГДА торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	торо_АналогиНоменклатурыДляРемонтов.Аналог,
	|	ВЫБОР
	|		КОГДА &ФОИспользоватьХарактеристикиНоменклатуры
	|			ТОГДА торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаАналога
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	торо_УстановкаАналоговНоменклатурыДляРемонтов.Ссылка,
	|	торо_УстановкаАналоговНоменклатурыДляРемонтов.УказаниеПоПрименению
	|ИЗ
	|	РегистрСведений.торо_АналогиНоменклатурыДляРемонтов КАК торо_АналогиНоменклатурыДляРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|			ПО СправочникНоменклатура.ВидНоменклатуры = СправочникВидыНоменклатуры.Ссылка
	|		ПО торо_АналогиНоменклатурыДляРемонтов.Аналог = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_УстановкаАналоговНоменклатурыДляРемонтов КАК торо_УстановкаАналоговНоменклатурыДляРемонтов
	|		ПО торо_АналогиНоменклатурыДляРемонтов.Регистратор = торо_УстановкаАналоговНоменклатурыДляРемонтов.Ссылка
	|ГДЕ
	|	торо_АналогиНоменклатурыДляРемонтов.Период <= &ТекущаяДата
	|	И торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения >= &ТекущаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Аналог,
	|	ХарактеристикаАналога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура КАК Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика КАК Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Склад КАК Склад,
	|	проф_ЗапасыИПотребностиОстатки.Назначение КАК Назначение,
	|	проф_ЗапасыИПотребностиОстатки.КОбеспечениюОстаток КАК ЗаказИнициатора,
	|	проф_ЗапасыИПотребностиОстатки.ПоступитОстаток КАК Поступит,
	|	проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток КАК ВНаличии
	|ПОМЕСТИТЬ втЗапасыИПотребности
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&ТекущаяДата,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						втТаблицаАналогов.Аналог КАК Аналог,
	|						втТаблицаАналогов.ХарактеристикаАналога КАК ХарактеристикаАналога
	|					ИЗ
	|						втТаблицаАналогов КАК втТаблицаАналогов)
	|				И НЕ &ИспользоватьОтборПоСкладу) КАК проф_ЗапасыИПотребностиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Склад,
	|	проф_ЗапасыИПотребностиОстатки.Назначение,
	|	проф_ЗапасыИПотребностиОстатки.КОбеспечениюОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ПоступитОстаток,
	|	проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&ТекущаяДата,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						втТаблицаАналогов.Аналог КАК Аналог,
	|						втТаблицаАналогов.ХарактеристикаАналога КАК ХарактеристикаАналога
	|					ИЗ
	|						втТаблицаАналогов КАК втТаблицаАналогов)
	|				И &ИспользоватьОтборПоСкладу
	|				И Склад = &Склад) КАК проф_ЗапасыИПотребностиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура КАК Номенклатура,
	|	втЗапасыИПотребности.Характеристика КАК Характеристика,
	|	втЗапасыИПотребности.Назначение КАК Назначение,
	|	втЗапасыИПотребности.Склад КАК Склад,
	|	втЗапасыИПотребности.ВНаличии КАК Доступно,
	|	0 КАК РезервНеТОиР,
	|	0 КАК Поступит,
	|	0 КАК ЗаказИнициатора
	|ПОМЕСТИТЬ втДанныеРегистровПредв
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО втЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Назначение,
	|	втЗапасыИПотребности.Склад,
	|	втЗапасыИПотребности.ВНаличии,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|ГДЕ
	|	втЗапасыИПотребности.Назначение = ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Назначение,
	|	втЗапасыИПотребности.Склад,
	|	0,
	|	втЗапасыИПотребности.ВНаличии,
	|	0,
	|	0
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО втЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			И (НЕ проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Назначение,
	|	втЗапасыИПотребности.Склад,
	|	0,
	|	0,
	|	втЗапасыИПотребности.Поступит,
	|	втЗапасыИПотребности.ЗаказИнициатора
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеРегистровПредв.Номенклатура КАК Номенклатура,
	|	втДанныеРегистровПредв.Характеристика КАК Характеристика,
	|	втДанныеРегистровПредв.Склад КАК Склад,
	|	СУММА(втДанныеРегистровПредв.Доступно) КАК Доступно,
	|	СУММА(втДанныеРегистровПредв.РезервНеТОиР) КАК РезервНеТОиР,
	|	СУММА(втДанныеРегистровПредв.ЗаказИнициатора) КАК ЗаказИнициатора,
	|	СУММА(втДанныеРегистровПредв.Поступит) КАК Поступит
	|ПОМЕСТИТЬ втДанныеРегистров
	|ИЗ
	|	втДанныеРегистровПредв КАК втДанныеРегистровПредв
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеРегистровПредв.Номенклатура,
	|	втДанныеРегистровПредв.Склад,
	|	втДанныеРегистровПредв.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.МинимальныйОстаток КАК МинимальныйОстаток
	|ПОМЕСТИТЬ втМинимальныеОстаткиНоменклатуры
	|ИЗ
	|	РегистрСведений.торо_МинимальныеОстаткиНоменклатуры.СрезПоследних(
	|			&ТекущаяДата,
	|			&ИспользоватьОтборПоСкладу
	|				И &ИспользоватьОтборПоОрганизации
	|				И Склад = &Склад
	|				И Организация = &Организация) КАК торо_МинимальныеОстаткиНоменклатурыСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.Номенклатура,
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры,
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.МинимальныйОстаток
	|ИЗ
	|	РегистрСведений.торо_МинимальныеОстаткиНоменклатуры.СрезПоследних(
	|			&ТекущаяДата,
	|			&ИспользоватьОтборПоСкладу
	|				И Склад = &Склад
	|				И НЕ &ИспользоватьОтборПоОрганизации) КАК торо_МинимальныеОстаткиНоменклатурыСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.Номенклатура,
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры,
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.МинимальныйОстаток
	|ИЗ
	|	РегистрСведений.торо_МинимальныеОстаткиНоменклатуры.СрезПоследних(
	|			&ТекущаяДата,
	|			НЕ &ИспользоватьОтборПоСкладу
	|				И НЕ &ИспользоватьОтборПоОрганизации) КАК торо_МинимальныеОстаткиНоменклатурыСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.Номенклатура,
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры,
	|	торо_МинимальныеОстаткиНоменклатурыСрезПоследних.МинимальныйОстаток
	|ИЗ
	|	РегистрСведений.торо_МинимальныеОстаткиНоменклатуры.СрезПоследних(
	|			&ТекущаяДата,
	|			НЕ &ИспользоватьОтборПоСкладу
	|				И &ИспользоватьОтборПоОрганизации
	|				И Организация = &Организация) КАК торо_МинимальныеОстаткиНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаАналогов.Номенклатура КАК НоменклатураОсновная,
	|	втТаблицаАналогов.Характеристика КАК ХарактеристикаОсновная,
	|	втТаблицаАналогов.Аналог КАК Аналог,
	|	втТаблицаАналогов.ХарактеристикаАналога КАК ХарактеристикаАналога,
	|	ЕСТЬNULL(втДанныеРегистров.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	0 КАК ЗаменаНоменклатурыАналогом,
	|	втТаблицаАналогов.УказаниеПоПрименению КАК УказаниеПоПрименению,
	|	втТаблицаАналогов.Разрешение КАК Разрешение,
	|	ЕСТЬNULL(втДанныеРегистров.Доступно, 0) КАК Доступно,
	|	ЕСТЬNULL(втДанныеРегистров.РезервНеТОиР, 0) КАК РезервНеТОиР,
	|	ЕСТЬNULL(втДанныеРегистров.Поступит, 0) КАК Поступит,
	|	ЕСТЬNULL(втДанныеРегистров.ЗаказИнициатора, 0) КАК ЗаказИнициатора,
	|	ЕСТЬNULL(втМинимальныеОстаткиНоменклатуры.МинимальныйОстаток, 0) КАК МинимальныйОстаток
	|ИЗ
	|	втТаблицаАналогов КАК втТаблицаАналогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистров КАК втДанныеРегистров
	|		ПО втТаблицаАналогов.Аналог = втДанныеРегистров.Номенклатура
	|			И втТаблицаАналогов.ХарактеристикаАналога = втДанныеРегистров.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМинимальныеОстаткиНоменклатуры КАК втМинимальныеОстаткиНоменклатуры
	|		ПО втТаблицаАналогов.Аналог = втМинимальныеОстаткиНоменклатуры.Номенклатура
	|			И втТаблицаАналогов.ХарактеристикаАналога = втМинимальныеОстаткиНоменклатуры.ХарактеристикаНоменклатуры
	|ГДЕ
	|	НЕ &ИспользоватьОтборПоСкладу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТаблицаАналогов.Номенклатура,
	|	втТаблицаАналогов.Характеристика,
	|	втТаблицаАналогов.Аналог,
	|	втТаблицаАналогов.ХарактеристикаАналога,
	|	втДанныеРегистров.Склад,
	|	0,
	|	втТаблицаАналогов.УказаниеПоПрименению,
	|	втТаблицаАналогов.Разрешение,
	|	втДанныеРегистров.Доступно,
	|	втДанныеРегистров.РезервНеТОиР,
	|	втДанныеРегистров.Поступит,
	|	втДанныеРегистров.ЗаказИнициатора,
	|	ЕСТЬNULL(втМинимальныеОстаткиНоменклатуры.МинимальныйОстаток, 0)
	|ИЗ
	|	втТаблицаАналогов КАК втТаблицаАналогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеРегистров КАК втДанныеРегистров
	|		ПО втТаблицаАналогов.Аналог = втДанныеРегистров.Номенклатура
	|			И втТаблицаАналогов.ХарактеристикаАналога = втДанныеРегистров.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМинимальныеОстаткиНоменклатуры КАК втМинимальныеОстаткиНоменклатуры
	|		ПО втТаблицаАналогов.Аналог = втМинимальныеОстаткиНоменклатуры.Номенклатура
	|			И втТаблицаАналогов.ХарактеристикаАналога = втМинимальныеОстаткиНоменклатуры.ХарактеристикаНоменклатуры
	|ГДЕ
	|	&ИспользоватьОтборПоСкладу";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//++ Проф-ИТ, #317, Соловьев А.А., 04.10.2023

&НаСервере
Процедура УстановитьФлагиКВыполнениюКЗаказу()
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЭтотОбъект["СтрокиЗаказовДляОбработки"].Количество() > 0 Тогда 
			
			ТаблицаЗаказов = ЭтотОбъект["СтрокиЗаказовДляОбработки"].Выгрузить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаЗаказов.ЗаказНаВнутреннееПотребление КАК Заказ,
			|	ТаблицаЗаказов.КодСтроки КАК КодСтроки,
			|	ТаблицаЗаказов.КЗаказу КАК КЗаказу
			|ПОМЕСТИТЬ втТаблицаЗаказов
			|ИЗ
			|	&ТаблицаЗаказов КАК ТаблицаЗаказов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втТаблицаЗаказов.Заказ КАК Заказ,
			|	втТаблицаЗаказов.КодСтроки КАК КодСтроки,
			|	втТаблицаЗаказов.КЗаказу КАК КЗаказу
			|ИЗ
			|	втТаблицаЗаказов КАК втТаблицаЗаказов
			|ИТОГИ ПО
			|	Заказ";
			
			Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЗаказ.Следующий() Цикл
				
				ЗаказНаВПОбъект = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
				ЗаказНаВПОбъект.БезусловнаяЗапись = Истина;
				ИзменитьСтрокиОснования = Ложь;
				
				ЗаказДокументОснование = ЗаказНаВПОбъект.ДокументОснование;
				
				Если ЗначениеЗаполнено(ЗаказДокументОснование)
					И ТипЗнч(ЗаказДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда 
					
					ИзменитьСтрокиОснования = Истина;
					ЗаявкаНаРемонтОбъект = ЗаказДокументОснование.ПолучитьОбъект();
					ЗаявкаНаРемонтОбъект.БезусловнаяЗапись = Истина;
					
					ЭлементСписокаЗаказов = ЭтотОбъект["СписокЗаказовДляОбработки"].НайтиПоЗначению(ЗаказДокументОснование);
					Если ЭлементСписокаЗаказов <> Неопределено Тогда 
						ЗаявкаНаРемонтОбъект.проф_КВыполнению = ЭлементСписокаЗаказов.Пометка;
						ЭтотОбъект["СписокЗаказовДляОбработки"].Удалить(ЭлементСписокаЗаказов);
					КонецЕсли;
					
				КонецЕсли;
				
				Выборка = ВыборкаЗаказ.Выбрать();
				
				УстановитьФлагКЗаказуВТЧ(Выборка, ЗаказНаВПОбъект, ЗаявкаНаРемонтОбъект, ИзменитьСтрокиОснования);
				
				ЗаказНаВПОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Если ИзменитьСтрокиОснования Тогда 
					ЗаявкаНаРемонтОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ЭлементСписка Из ЭтотОбъект["СписокЗаказовДляОбработки"] Цикл
			ЗаявкаНаРемонтОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
			ЗаявкаНаРемонтОбъект.проф_КВыполнению = ЭлементСписка.Пометка;
			ЗаявкаНаРемонтОбъект.БезусловнаяЗапись = Истина;
			ЗаявкаНаРемонтОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ЭтотОбъект["СтрокиЗаказовДляОбработки"].Очистить();
		ЭтотОбъект["СписокЗаказовДляОбработки"].Очистить();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось изменить документы по причине: %1'"),
			ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагКЗаказуВТЧ(Выборка, ЗаказНаВПОбъект, ЗаявкаНаРемонтОбъект, ИзменитьСтрокиОснования)
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаЗаказ = ЗаказНаВПОбъект.Товары.Найти(Выборка.КодСтроки, "КодСтроки");
		Если СтрокаЗаказ <> Неопределено Тогда
			СтрокаЗаказ.проф_КЗаказу = Выборка.КЗаказу;
		КонецЕсли;
		
		Если Не ИзменитьСтрокиОснования Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТоварыИсточника = ЗаказНаВПОбъект.проф_ТоварыИсточника.Найти(Выборка.КодСтроки, "КодСтроки");
		Если СтрокаТоварыИсточника <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, ID");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоварыИсточника);
			СтрокиЗатратыИсточника = ЗаявкаНаРемонтОбъект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаЗатратыИсточника Из СтрокиЗатратыИсточника Цикл
				СтрокаЗатратыИсточника.проф_КЗаказу = Выборка.КЗаказу;
			КонецЦикла;
			СтрокиЗапчастиИсточника = ЗаявкаНаРемонтОбъект.ЗапчастиРемонта.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаЗапчастиИсточника Из СтрокиЗапчастиИсточника Цикл
				СтрокаЗапчастиИсточника.проф_КЗаказу = Выборка.КЗаказу;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-- Проф-ИТ, #317, Соловьев А.А., 04.10.2023

&НаСервере
Функция ТекстЗапросаСписок(РезервыСписок)

	Если РезервыСписок Тогда 
		Возврат 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Регистр.Склад КАК Склад,
		|	Регистр.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
		|	Регистр.КоличествоОстаток КАК Количество,
		|	Регистр.ДокументРезерв КАК Документ
		|ИЗ
		|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
		|			,
		|			{Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика}
		|				{ДокументРезерв.Организация = &Организация}
		|				{ДокументРезерв.Подразделение = &Подразделение}
		|				{Склад = &Склад}
		|				{ЗаказНаВнутреннееПотребление = &ЗаказНаВП}) КАК Регистр";
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект["ЗаказНаВнутреннееПотребление"]) Тогда 
		Возврат
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПоставщику.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втЗаказыПоставщику
		|ИЗ 
		|	Документ.торо_ЗаказПоставщику КАК ЗаказПоставщику
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаказПоставщику.ДокументыОснования КАК ЗаказПоставщикуДокументыОснования 
		|		ПО ЗаказПоставщику.Ссылка = ЗаказПоставщикуДокументыОснования.Ссылка
		|			И (ЗаказПоставщикуДокументыОснования.ДокументОснование = &ЗаказНаВнутреннееПотребление)
		|ГДЕ
		|	&ОтборПоОрганизации
		|	И &ОтборПоПодразделению
		|	И &ОтборПоСкладу
		|
		|СГРУППИРОВАТЬ ПО 
		|	ЗаказПоставщику.Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ЗаказыПоставщикуОстатки.Склад КАК Склад,
		|	торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику КАК Документ,
		|	торо_ЗаказыПоставщикуОстатки.КоличествоОстаток КАК Количество,
		|	торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику.ДатаПоставки КАК ДатаПоставки
		|ИЗ
		|	РегистрНакопления.торо_ЗаказыПоставщику.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				{ЗаказПоставщику.Организация = &Организация}
		|				{Склад = &Склад}
		|				{ЗаказПоставщику.Подразделение = &Подразделение}
		|				И ЗаказПоставщику В 
		|					(ВЫБРАТЬ 
		|						втЗаказыПоставщику.Ссылка 
		|					ИЗ 
		|						втЗаказыПоставщику КАК втЗаказыПоставщику)) КАК торо_ЗаказыПоставщикуОстатки";	
	Иначе
		Возврат
		"ВЫБРАТЬ
		|	торо_ЗаказыПоставщикуОстатки.Склад КАК Склад,
		|	торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику КАК Документ,
		|	торо_ЗаказыПоставщикуОстатки.КоличествоОстаток КАК Количество,
		|	торо_ЗаказыПоставщикуОстатки.ЗаказПоставщику.ДатаПоставки КАК ДатаПоставки
		|ИЗ
		|	РегистрНакопления.торо_ЗаказыПоставщику.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				{ЗаказПоставщику.Организация = &Организация}
		|				{Склад = &Склад}
		|				{ЗаказПоставщику.Подразделение = &Подразделение}) КАК торо_ЗаказыПоставщикуОстатки";
		
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура проф_КЗаказуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;
	
	ДобавитьСтрокиЗаказовДляОбработки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиЗаказовДляОбработки(ТекущиеДанные)
	
	СтрокиПоКодуСтроки = ЭтотОбъект["СтрокиЗаказовДляОбработки"].НайтиСтроки(Новый Структура("КодСтроки", ТекущиеДанные.КодСтроки));
	
	Если СтрокиПоКодуСтроки.Количество() = 0 Тогда 
		НоваяСтрокаЗаказ = ЭтотОбъект["СтрокиЗаказовДляОбработки"].Добавить();
	Иначе
		НоваяСтрокаЗаказ = СтрокиПоКодуСтроки[0];
	КонецЕсли;
	
	Если ГруппировкаДанных = 0 Тогда
		НоваяСтрокаЗаказ.ЗаказНаВнутреннееПотребление = ТекущиеДанные.Данные;
		НоваяСтрокаЗаказ.КодСтроки = ТекущиеДанные.КодСтроки;
		НоваяСтрокаЗаказ.КЗаказу = ТекущиеДанные.проф_КЗаказу;
	Иначе
		СтрокаЗаказ = ТекущиеДанные.ПолучитьРодителя();
		НоваяСтрокаЗаказ.КодСтроки = ТекущиеДанные.КодСтроки;
		НоваяСтрокаЗаказ.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;
		НоваяСтрокаЗаказ.КЗаказу = ТекущиеДанные.проф_КЗаказу;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
&Вместо("ОбновитьЗависимыеПоказателиДанныеДерево")
Процедура проф_ОбновитьЗависимыеПоказателиДанныеДерево()
	
	Если ГруппировкаДанных = 0 Тогда
		
		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			ИтогоКОбеспечениюПоНоменклатуре = 0;
			ИтогоРекомендованоКРезервуПоНоменклатуре = 0;
			ИтогоРезервПоНоменклатуре = 0;
			ИтогоДоступноПоНоменклатуре = 0;
			
			Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
				
				РекомендованоКРезервуПоСкладу = 0;
				КОбеспечениюПоСкладу = 0;
				РезервПоСкладу = 0;
				
				Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
					
					ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаЗаказ, Ложь, Ложь);
					РекомендованоКРезервуПоСкладу = РекомендованоКРезервуПоСкладу + СтрокаЗаказ.РекомендованоКРезерву;
					КОбеспечениюПоСкладу = КОбеспечениюПоСкладу + СтрокаЗаказ.КОбеспечению;
					РезервПоСкладу = РезервПоСкладу + СтрокаЗаказ.Резерв;
					
				КонецЦикла;
				
				СтрокаСклад.РекомендованоКРезерву = РекомендованоКРезервуПоСкладу;
				СтрокаСклад.КОбеспечению = КОбеспечениюПоСкладу;
				СтрокаСклад.Резерв = РезервПоСкладу;
				
				ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаСклад,,, Ложь);
				
				ИтогоКОбеспечениюПоНоменклатуре = ИтогоКОбеспечениюПоНоменклатуре + СтрокаСклад.КОбеспечению;
				ИтогоРекомендованоКРезервуПоНоменклатуре = ИтогоРекомендованоКРезервуПоНоменклатуре + СтрокаСклад.РекомендованоКРезерву;
				ИтогоРезервПоНоменклатуре = ИтогоРезервПоНоменклатуре + СтрокаСклад.Резерв;
				ИтогоДоступноПоНоменклатуре = ИтогоДоступноПоНоменклатуре + СтрокаСклад.Доступно;
				
			КонецЦикла;
			
			СтрокаНоменклатура.КОбеспечению = ИтогоКОбеспечениюПоНоменклатуре;
			СтрокаНоменклатура.РекомендованоКРезерву = ИтогоРекомендованоКРезервуПоНоменклатуре;
			СтрокаНоменклатура.Резерв = ИтогоРезервПоНоменклатуре;
			СтрокаНоменклатура.Доступно = ИтогоДоступноПоНоменклатуре;
			
			ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаНоменклатура,, Ложь, Ложь);
			
		КонецЦикла;
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда
		
		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл
				
				ИтогоКОбеспечениюПоЗаказу = 0; 
				ИтогоРекомендуемыйРезервПоЗаказу = 0;
				ИтогоРезервПоЗаказу = 0;
				ИтогоОсталосьОбеспечитьПоЗаказу = 0;
				ИтогоДоступноПоЗаказу = 0;
				
				Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
					
					ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаНоменклатура); 
					ИтогоКОбеспечениюПоЗаказу = ИтогоКОбеспечениюПоЗаказу + СтрокаНоменклатура.КОбеспечению;
					ИтогоРекомендуемыйРезервПоЗаказу = ИтогоРекомендуемыйРезервПоЗаказу + СтрокаНоменклатура.РекомендованоКРезерву;
					ИтогоРезервПоЗаказу = ИтогоРезервПоЗаказу + СтрокаНоменклатура.Резерв;
					ИтогоОсталосьОбеспечитьПоЗаказу = ИтогоОсталосьОбеспечитьПоЗаказу + СтрокаНоменклатура.ОсталосьОбеспечить;
					ИтогоДоступноПоЗаказу = ИтогоДоступноПоЗаказу + СтрокаНоменклатура.Доступно;
					
				КонецЦикла;
				
				СтрокаЗаказ.КОбеспечению = ИтогоКОбеспечениюПоЗаказу;
				СтрокаЗаказ.РекомендованоКРезерву = ИтогоРекомендуемыйРезервПоЗаказу;
				СтрокаЗаказ.Резерв = ИтогоРезервПоЗаказу;
				СтрокаЗаказ.ОсталосьОбеспечить = ИтогоОсталосьОбеспечитьПоЗаказу;
				СтрокаЗаказ.Доступно = ИтогоДоступноПоЗаказу;
				ОбновитьВидимостьИнтерактивныхЭлементовСтрокиДанныеДерево(СтрокаЗаказ,, Ложь);
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
&Вместо("ОбновитьДанные")
Процедура проф_ОбновитьДанные()
	
	ИспользоватьХарактеристики = Константы.торо_ИспользоватьХарактеристикиНоменклатуры.Получить();
	ИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();
	ИспользоватьУтверждениеЗаказовНаВП = Константы.торо_ИспользоватьУтверждениеЗаказовНаВнутреннееПотребление.Получить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СобратьЗапросЗаказыНаВнутреннееПотреблениеНачальная(Запрос, ИспользоватьУтверждениеЗаказовНаВП);
	РезультатЗапроса = Запрос.Выполнить();
	
	торо_МТОСервер.РассчитатьКрайнийСрок(Запрос.МенеджерВременныхТаблиц, "ЗаказыНаВнутреннееПотреблениеНачальная");
	
	Запрос.Текст = ТекстЗапросаДляОбновленияДереваРемонтов();	
	
	Запрос.УстановитьПараметр("ДатаГоризонтаПланирования",
		КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), ГоризонтПланирования)));
	Запрос.УстановитьПараметр("ПериодУчетаКрайнихСроковЗаказов",
		ТекущаяДатаСеанса() + ПериодУчетаКрайнихСроковЗаказов * 86400);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновитьДеревоРемонтов(Запрос.МенеджерВременныхТаблиц);
		
	Запрос.Текст = ТекстЗапросаОбновитьДанные();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ЗаказПоставщику.Организация =  &Организация"); 
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоПодразделению", "ЗаказПоставщику.Подразделение = &Подразделение");
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению", Истина);
	КонецЕсли;
	Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Регистр.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	//++ Проф-ИТ, #319, Соловьев А.А., 10.11.2023
	Если ЗначениеЗаполнено(ЭтотОбъект["СкладОтправитель"]) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&ОтборПоСкладуОтправителю", 
			"втЗапасыИПотребности.Склад = &СкладОтправитель");
		Запрос.УстановитьПараметр("СкладОтправитель", ЭтотОбъект["СкладОтправитель"]);
	Иначе
		Запрос.УстановитьПараметр("СкладОтправитель", Истина);
		Запрос.УстановитьПараметр("ОтборПоСкладуОтправителю", Истина);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДоступностьНаСкладеОтправителе",
			"ЛЕВОЕ СОЕДИНЕНИЕ втДоступностьНаСкладеОтправителе");
	КонецЕсли;
	//-- Проф-ИТ, #319, Соловьев А.А., 10.11.2023
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СкладБГЛЦ", ЭтотОбъект["СкладБГЛЦ"]);
	Запрос.УстановитьПараметр("ПодразделенияСлужбыТОИР", ЭтотОбъект["ПодразделенияСлужбыТОИР"]);
	
	ФОИспользоватьВнешниеОснования	= ЭтотОбъект["ФОИспользоватьВнешниеОснования"];
	ФОИспользоватьДефекты			= ЭтотОбъект["ФОИспользоватьДефекты"];
	ФОИспользоватьППР				= ЭтотОбъект["ФОИспользоватьППР"];
	
	СписокВидовИсточников = Новый Массив;
	Если ФОИспользоватьВнешниеОснования Тогда
		СписокВидовИсточников.Добавить(Перечисления.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВнешнееОснованиеДляРабот);
	КонецЕсли;
	Если ФОИспользоватьДефекты Тогда
		СписокВидовИсточников.Добавить(Перечисления.торо_ВидыДокументовНачалаЦепочкиРемонтов.ВыявленныйДефект);
	КонецЕсли;
	Если ФОИспользоватьППР Тогда
		СписокВидовИсточников.Добавить(Перечисления.торо_ВидыДокументовНачалаЦепочкиРемонтов.ПланГрафикППР);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокВидовИсточников", СписокВидовИсточников);
	
	Если ГруппировкаДанных = 0 Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаИтогов", "Номенклатура, Характеристика, Склад");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаИтогов", "Склад, ЗаказНаВнутреннееПотребление");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаСортировки", ЭтотОбъект["ТипСортировки"]);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЗаполнитьОстаткиПоСкладамПриОбновленииДанных(РезультатЗапроса);
	
	Если РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказанныеПозиции = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	
	Если ЭтоАдресВременногоХранилища(АдресЗаказовПоставщикам) Тогда
		ПоместитьВоВременноеХранилище(ЗаказанныеПозиции, АдресЗаказовПоставщикам);
	Иначе
		АдресЗаказовПоставщикам = ПоместитьВоВременноеХранилище(ЗаказанныеПозиции, УникальныйИдентификатор);
	КонецЕсли;
	
	ВыборкаДанных = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗаполнитьДанныеДерево(ВыборкаДанных, ЗаказанныеПозиции);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиПоСкладамПриОбновленииДанных(РезультатЗапроса) 

	ОстаткиПоСкладам.Загрузить(РезультатЗапроса[РезультатЗапроса.ВГраница() - 2].Выгрузить());
	Для Каждого Строка Из ОстаткиПоСкладам Цикл 
		Если Строка.СвободныйОстаток > 0 Тогда 
			Строка.Переместить = БиблиотекаКартинок.СтартБизнесПроцесса;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СобратьЗапросЗаказыНаВнутреннееПотреблениеНачальная(Запрос, ИспользоватьУтверждениеЗаказовНаВП)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Номенклатура.СхемаОбеспечения КАК СхемаОбеспечения,
	|	&Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.КодСтроки КАК КодСтроки,
	|	Регистр.КОформлениюОстаток КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыНаВнутреннееПотреблениеРС
	|ИЗ
	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
	|			,
	|			&ОтборПоОрганизации
	|				И &ОтборПоНоменклатуре
	|				И &ОтборПоПодразделению
	|				И &ОтборПоСкладу
	|				И &ОтборПоЗаказуНаВнутреннееПотребление
	|				И &ОтборПоСтатусуУтверждения) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	СхемаОбеспечения,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаВнутреннееПотреблениеРС.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Документ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Документ.Организация КАК Организация,
	|	Документ.Подразделение КАК Подразделение,
	|	Документ.торо_СозданПоПотребности КАК торо_СозданПоПотребности,
	|	Документ.ДокументОснование КАК ДокументОснование,
	|	Документ.проф_Назначение КАК проф_Назначение,
	|	Документ.проф_ЗаказДляЗакупки КАК проф_ЗаказДляЗакупки,
	|	ЕСТЬNULL(торо_ЗаявкаНаРемонт.проф_КВыполнению, ЛОЖЬ) КАК КВыполнению,
	|	ЗаказыНаВнутреннееПотреблениеРС.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеРС.КодСтроки КАК КодСтроки,
	|	ЗаказыНаВнутреннееПотреблениеРС.СхемаОбеспечения КАК СхемаОбеспечения,
	|	ЗаказыНаВнутреннееПотреблениеРС.Характеристика КАК Характеристика,
	|	ЗаказыНаВнутреннееПотреблениеРС.Склад КАК Склад,
	|	ЗаказыНаВнутреннееПотреблениеРС.КОформлениюОстаток КАК КОформлениюОстаток,
	|	ЕСТЬNULL(ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей, ЕСТЬNULL(СхемыОбеспечения.СпособОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))) КАК СпособОбеспеченияПотребностей
	|ПОМЕСТИТЬ ЗаказыНаВнутреннееПотреблениеНачальная
	|ИЗ
	|	ЗаказыНаВнутреннееПотреблениеРС КАК ЗаказыНаВнутреннееПотреблениеРС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК ВариантыОбеспеченияТоварами
	|		ПО ЗаказыНаВнутреннееПотреблениеРС.Номенклатура = ВариантыОбеспеченияТоварами.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеРС.Характеристика = ВариантыОбеспеченияТоварами.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеРС.Склад = ВариантыОбеспеченияТоварами.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспечения
	|		ПО ЗаказыНаВнутреннееПотреблениеРС.СхемаОбеспечения = СхемыОбеспечения.СхемаОбеспечения
	|			И ЗаказыНаВнутреннееПотреблениеРС.Склад = СхемыОбеспечения.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК Документ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	|			ПО Документ.ДокументОснование = торо_ЗаявкаНаРемонт.Ссылка
	|		ПО ЗаказыНаВнутреннееПотреблениеРС.ЗаказНаВнутреннееПотребление = Документ.Ссылка
	|			И (Документ.Дата <= &ДатаГоризонтПланирования)
	//++ Проф-ИТ, #317, Соловьев А.А., 31.10.2023
	|			И (Документ.торо_СтатусУтверждения = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден))
	//-- Проф-ИТ, #317, Соловьев А.А., 31.10.2023
	//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	|			И (Документ.проф_ЗаказДляЗакупки = &ЗВПДляЗакупки)
	//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	СхемаОбеспечения,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление";
	
	Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Регистр.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборПоОрганизации", "ЗаказНаВнутреннееПотребление.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОрганизации", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборПоПодразделению", "ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект["Склад"]) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСкладу", "Склад = &Склад");
		Запрос.УстановитьПараметр("Склад", ЭтотОбъект["Склад"]);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСкладу", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект["Номенклатура"]) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоНоменклатуре", "Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", ЭтотОбъект["Номенклатура"]);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоНоменклатуре", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект["ЗаказНаВнутреннееПотребление"]) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
								  "&ОтборПоЗаказуНаВнутреннееПотребление",
								  "ЗаказНаВнутреннееПотребление = &ЗаказНаВнутреннееПотребление");
		Запрос.УстановитьПараметр("ЗаказНаВнутреннееПотребление", ЭтотОбъект["ЗаказНаВнутреннееПотребление"]);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоЗаказуНаВнутреннееПотребление", Истина);
	КонецЕсли;
	
	//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	Запрос.УстановитьПараметр("ЗВПДляЗакупки", ЭтотОбъект["ЗВПДляЗакупки"] = 1);
	//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024
	
	ОтборПоСтатусамВЗапросеЗаказыНаВнутреннеПотреблениеНачальная(Запрос, ИспользоватьУтверждениеЗаказовНаВП);
	
	Запрос.УстановитьПараметр("ДатаГоризонтПланирования", 
		КонецМесяца(ДобавитьМесяц(ТекущаяДата(), ГоризонтПланирования)));
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСтатусамВЗапросеЗаказыНаВнутреннеПотреблениеНачальная(Запрос, ИспользоватьУтверждениеЗаказовНаВП)

	Если ИспользоватьУтверждениеЗаказовНаВП Тогда
		МассивСтатусов = Новый Массив();
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден);
		МассивСтатусов.Добавить(Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.УтвержденЧастично);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборПоСтатусуУтверждения", "ЗаказНаВнутреннееПотребление.торо_СтатусУтверждения В(&МассивСтатусов)");
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтатусуУтверждения", Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДляОбновленияДереваРемонтов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_ИсходныеДатыПоставки
	|ИЗ
	|	ЗаказыНаВнутреннееПотреблениеНачальная КАК ЗаказыНаВнутреннееПотреблениеНачальная
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ИсходныеДатыПоставки.ДатаОтгрузки КАК ДатаОтгрузки,
	|	МАКСИМУМ(ВТРасписанияРаботы.ДатаГрафика) КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_ДатыПоставок
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсходныеДатыПоставки КАК ВТ_ИсходныеДатыПоставки
	|		ПО ВТРасписанияРаботы.ДатаГрафика < ВТ_ИсходныеДатыПоставки.ДатаОтгрузки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДатыПоставки.ДатаОтгрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаВнутреннееПотреблениеНачальная.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.КодСтроки КАК КодСтроки,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Характеристика КАК Характеристика,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Склад КАК Склад,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток КАК КОформлениюОстатокВсего,
	|	ВЫБОР
	|		КОГДА ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки <= &ДатаГоризонтаПланирования
	|				И ЕСТЬNULL(ВТ_КрайниеДатыЗаказов.ДатаПоКалендарю, ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) <= &ПериодУчетаКрайнихСроковЗаказов
	|			ТОГДА ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОформлениюОстаток,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЕСТЬNULL(ВТ_КрайниеДатыЗаказов.ДатаПоКалендарю, ДАТАВРЕМЯ(1, 1, 1)) КАК КрайнийСрокЗаказа,
	|	ЕСТЬNULL(ВТ_ДатыПоставок.ДатаГрафика, ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки) КАК ДатаПоставки,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Организация КАК Организация,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.Подразделение КАК Подразделение,
	|	ЗаказНаВнутреннееПотреблениеТовары.Количество КАК ПотребностьВЗаказе,
	|	ЗаказНаВнутреннееПотреблениеТовары.проф_КЗаказу КАК проф_КЗаказу,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.торо_СозданПоПотребности
	|		ИЛИ ЗаказыНаВнутреннееПотреблениеНачальная.КОформлениюОстаток <> ЗаказНаВнутреннееПотреблениеТовары.Количество КАК ЕстьСвязанные,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.ДокументОснование КАК ДокументОснование,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.проф_Назначение КАК проф_Назначение,
	|	ЗаказыНаВнутреннееПотреблениеНачальная.проф_ЗаказДляЗакупки КАК проф_ЗаказДляЗакупки,
	//++ Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	|	ЕСТЬNULL(торо_ЗаявкаНаРемонт.проф_СтатусСогласования, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыУтвержденияЗаказовНаВП.ПустаяСсылка)) КАК СтатусЗаказа,
	//-- Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	|	ЗаказыНаВнутреннееПотреблениеНачальная.КВыполнению КАК КВыполнению
	|ПОМЕСТИТЬ ЗаказыНаВнутреннееПотребление
	|ИЗ
	|	ЗаказыНаВнутреннееПотреблениеНачальная КАК ЗаказыНаВнутреннееПотреблениеНачальная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КрайниеДатыЗаказов КАК ВТ_КрайниеДатыЗаказов
	|		ПО ЗаказыНаВнутреннееПотреблениеНачальная.СпособОбеспеченияПотребностей = ВТ_КрайниеДатыЗаказов.СпособОбеспеченияПотребностей
	|			И ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки = ВТ_КрайниеДатыЗаказов.ДатаОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыПоставок КАК ВТ_ДатыПоставок
	|		ПО ЗаказыНаВнутреннееПотреблениеНачальная.ДатаОтгрузки = ВТ_ДатыПоставок.ДатаОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	|		ПО ЗаказыНаВнутреннееПотреблениеНачальная.ЗаказНаВнутреннееПотребление = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
	|			И ЗаказыНаВнутреннееПотреблениеНачальная.Номенклатура = ЗаказНаВнутреннееПотреблениеТовары.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеНачальная.Характеристика = ЗаказНаВнутреннееПотреблениеТовары.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеНачальная.КодСтроки = ЗаказНаВнутреннееПотреблениеТовары.КодСтроки
	//++ Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	|		ПО ЗаказыНаВнутреннееПотреблениеНачальная.ДокументОснование = торо_ЗаявкаНаРемонт.Ссылка
	//-- Проф-ИТ, #382, Соловьев А.А., 06.12.2023
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Регистр.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ РезервыПоЗаказам
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура,
	|					Потребность.Характеристика
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ТоварыНаРукахОстатки.Номенклатура КАК Номенклатура,
	|	торо_ТоварыНаРукахОстатки.Характеристика КАК Характеристика,
	|	торо_ТоварыНаРукахОстатки.Склад КАК Склад,
	|	торо_ТоварыНаРукахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	торо_ТоварыНаРукахОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ПОМЕСТИТЬ ТоварыНаРуках
	|ИЗ
	|	РегистрНакопления.торо_ТоварыНаРуках.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад, ЗаказНаВнутреннееПотребление) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура КАК Номенклатура,
	|					Потребность.Характеристика КАК Характеристика,
	|					Потребность.Склад КАК Склад,
	|					Потребность.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК торо_ТоварыНаРукахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	ЗаказНаВнутреннееПотребление";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОбновитьДанные()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезервыПоЗаказам.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ПОМЕСТИТЬ СвязанныеДокументыБезГрупп
	|ИЗ
	|	РезервыПоЗаказам КАК РезервыПоЗаказам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыНаРуках.ЗаказНаВнутреннееПотребление
	|ИЗ
	|	ТоварыНаРуках КАК ТоварыНаРуках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязанныеДокументыБезГрупп.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ПОМЕСТИТЬ СвязанныеДокументы
	|ИЗ
	|	СвязанныеДокументыБезГрупп КАК СвязанныеДокументыБезГрупп
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязанныеДокументыБезГрупп.ЗаказНаВнутреннееПотребление
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Склад КАК Склад,
	|	Регистр.Номенклатура КАК Номенклатура,
	|	Регистр.МинимальныйОстаток КАК МинимальныйОстаток,
	|	Регистр.ХарактеристикаНоменклатуры КАК Характеристика
	|ПОМЕСТИТЬ МинимальныеОстатки
	|ИЗ
	|	РегистрСведений.торо_МинимальныеОстаткиНоменклатуры.СрезПоследних(
	|			,
	|			(Номенклатура, ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура КАК Номенклатура,
	|					Потребность.Характеристика КАК ХарактеристикаНоменклатуры
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	Регистр.Склад КАК Склад,
	|	Регистр.Назначение КАК Назначение,
	|	Регистр.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Регистр.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ втДанныеРегистраЗаказыПоставщику
	|ИЗ
	|	РегистрНакопления.проф_ЗаказыПоставщику.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Назначение) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура КАК Номенклатура,
	|					Потребность.Характеристика КАК Характеристика,
	|					Потребность.проф_Назначение КАК Назначение
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК Регистр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АналогиНоменклатурыДляРемонтов.Материал КАК Номенклатура,
	|	торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала КАК Характеристика
	|ПОМЕСТИТЬ втТаблицаАналоговПредварительно
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АналогиНоменклатурыДляРемонтов КАК торо_АналогиНоменклатурыДляРемонтов
	|		ПО ЗаказыНаВнутреннееПотребление.Номенклатура = торо_АналогиНоменклатурыДляРемонтов.Материал
	|			И ЗаказыНаВнутреннееПотребление.Характеристика = торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала
	|ГДЕ
	|	торо_АналогиНоменклатурыДляРемонтов.Период <= &ТекущаяДата
	|	И торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АналогиНоменклатурыДляРемонтов.Материал,
	|	торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АналогиНоменклатурыДляРемонтов КАК торо_АналогиНоменклатурыДляРемонтов
	|		ПО ЗаказыНаВнутреннееПотребление.Номенклатура = торо_АналогиНоменклатурыДляРемонтов.Материал
	|			И ЗаказыНаВнутреннееПотребление.Характеристика = торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала
	|ГДЕ
	|	торо_АналогиНоменклатурыДляРемонтов.Период <= &ТекущаяДата
	|	И торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1) = ЛОЖЬ
	|	И торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения >= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаАналоговПредварительно.Номенклатура КАК Номенклатура,
	|	втТаблицаАналоговПредварительно.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТаблицаАналогов
	|ИЗ
	|	втТаблицаАналоговПредварительно КАК втТаблицаАналоговПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаАналоговПредварительно.Номенклатура,
	|	втТаблицаАналоговПредварительно.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	проф_ЗаказыНаПеремещениеОстатки.Номенклатура КАК Номенклатура,
	|	проф_ЗаказыНаПеремещениеОстатки.Характеристика КАК Характеристика,
	|	СУММА(проф_ЗаказыНаПеремещениеОстатки.КОформлениюОстаток) КАК КОформлению,
	|	проф_ЗаказНаПеремещение.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втЗаказыНаПеремещение
	|ИЗ
	|	РегистрНакопления.проф_ЗаказыНаПеремещение.Остатки(&ТекущаяДата, ) КАК проф_ЗаказыНаПеремещениеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.проф_ЗаказНаПеремещение КАК проф_ЗаказНаПеремещение
	|		ПО проф_ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение = проф_ЗаказНаПеремещение.Ссылка
	|ГДЕ
	|	проф_ЗаказНаПеремещение.СкладОтправитель <> &СкладБГЛЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	проф_ЗаказыНаПеремещениеОстатки.Характеристика,
	|	проф_ЗаказыНаПеремещениеОстатки.Номенклатура,
	|	проф_ЗаказНаПеремещение.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеРегистраЗаказыПоставщику.Номенклатура КАК Номенклатура,
	|	втДанныеРегистраЗаказыПоставщику.Характеристика КАК Характеристика,
	|	СУММА(втДанныеРегистраЗаказыПоставщику.КоличествоОстаток) КАК КоличествоОстаток,
	|	втДанныеРегистраЗаказыПоставщику.Назначение КАК Назначение
	|ПОМЕСТИТЬ втЗаказыПоставщикуПрошлаЗакупка
	|ИЗ
	|	втДанныеРегистраЗаказыПоставщику КАК втДанныеРегистраЗаказыПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаказПоставщику КАК торо_ЗаказПоставщику
	|		ПО втДанныеРегистраЗаказыПоставщику.ЗаказПоставщику = торо_ЗаказПоставщику.Ссылка
	|			И (торо_ЗаказПоставщику.проф_Статус В (ЗНАЧЕНИЕ(Перечисление.проф_ПеречислениеСтатусыЗаказовПоставщикам.Согласован), ЗНАЧЕНИЕ(Перечисление.проф_ПеречислениеСтатусыЗаказовПоставщикам.Подтвержден)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО втДанныеРегистраЗаказыПоставщику.Назначение = проф_Назначения.Ссылка
	|			И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеРегистраЗаказыПоставщику.Номенклатура,
	|	втДанныеРегистраЗаказыПоставщику.Характеристика,
	|	втДанныеРегистраЗаказыПоставщику.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
	|	торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втДанныеПоРемонтам
	|ИЗ
	|	РегистрСведений.торо_ОбщиеДанныеПоРемонтам КАК торо_ОбщиеДанныеПоРемонтам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_АктуальныеПлановыеДатыРемонтов КАК торо_АктуальныеПлановыеДатыРемонтов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|			ПО торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование = ЗаказыНаВнутреннееПотребление.ДокументОснование
	|		ПО торо_ОбщиеДанныеПоРемонтам.IDРемонта = торо_АктуальныеПлановыеДатыРемонтов.IDРемонта
	|			И (торо_ОбщиеДанныеПоРемонтам.ВидДокументаНачалаЦепочки В (&СписокВидовИсточников))
	|			И (торо_АктуальныеПлановыеДатыРемонтов.ДатаНачала <= &ТекущаяДата)
	|			И (НЕ торо_ОбщиеДанныеПоРемонтам.Отменен)
	|ГДЕ
	|	торо_ОбщиеДанныеПоРемонтам.Замещен = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(торо_ОбщиеДанныеПоРемонтам.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта),
	|	торо_АктуальныеПлановыеДатыРемонтов.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток
	|ПОМЕСТИТЬ втТоварыНаСкладахОстатки
	|ИЗ
	|	РегистрНакопления.проф_ТоварыНаСкладах.Остатки(
	|			&ТекущаяДата,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура КАК Номенклатура,
	|					Потребность.Характеристика КАК Характеристика
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура КАК Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика КАК Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Склад КАК Склад,
	|	проф_ЗапасыИПотребностиОстатки.Назначение КАК Назначение,
	|	проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток КАК ВНаличии
	|ПОМЕСТИТЬ втЗапасыИПотребностиВНаличии
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&ТекущаяДата,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					Потребность.Номенклатура КАК Номенклатура,
	|					Потребность.Характеристика КАК Характеристика
	|				ИЗ
	|					ЗаказыНаВнутреннееПотребление КАК Потребность)) КАК проф_ЗапасыИПотребностиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура КАК Номенклатура,
	|	втЗапасыИПотребности.Характеристика КАК Характеристика,
	|	втЗапасыИПотребности.Назначение КАК Назначение,
	|	втЗапасыИПотребности.Склад КАК Склад,
	|	втЗапасыИПотребности.ВНаличии КАК Доступно,
	|	0 КАК РезервНеТОиР
	|ПОМЕСТИТЬ втДоступноРезервНеТОиР
	|ИЗ
	|	втЗапасыИПотребностиВНаличии КАК втЗапасыИПотребности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО втЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Назначение,
	|	втЗапасыИПотребности.Склад,
	|	втЗапасыИПотребности.ВНаличии,
	|	0
	|ИЗ
	|	втЗапасыИПотребностиВНаличии КАК втЗапасыИПотребности
	|ГДЕ
	|	втЗапасыИПотребности.Назначение = ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Назначение,
	|	втЗапасыИПотребности.Склад,
	|	0,
	|	втЗапасыИПотребности.ВНаличии
	|ИЗ
	|	втЗапасыИПотребностиВНаличии КАК втЗапасыИПотребности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО втЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			И (НЕ проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыИПотребностиПредварительно.Номенклатура КАК Номенклатура,
	|	ЗапасыИПотребностиПредварительно.Характеристика КАК Характеристика,
	|	ЗапасыИПотребностиПредварительно.Склад КАК Склад,
	|	СУММА(ЗапасыИПотребностиПредварительно.КОбеспечениюОстаток) - СУММА(ЗапасыИПотребностиПредварительно.ВНаличииОстаток) КАК Заказано,
	|	СУММА(ЗапасыИПотребностиПредварительно.ПоступитОстаток) КАК Поступит,
	|	СУММА(ЗапасыИПотребностиПредварительно.Доступно) КАК Доступно,
	|	СУММА(ЗапасыИПотребностиПредварительно.РезервНеТОиР) КАК РезервНеТОиР,
	|	СУММА(ЗапасыИПотребностиПредварительно.НаПеремещении) КАК НаПеремещении
	|ПОМЕСТИТЬ втЗапасыИПотребности
	|ИЗ
	|	(ВЫБРАТЬ
	|		проф_ЗапасыИПотребностиОстатки.Номенклатура КАК Номенклатура,
	|		проф_ЗапасыИПотребностиОстатки.Характеристика КАК Характеристика,
	|		проф_ЗапасыИПотребностиОстатки.Склад КАК Склад,
	|		проф_ЗапасыИПотребностиОстатки.Назначение КАК Назначение,
	|		проф_ЗапасыИПотребностиОстатки.КОбеспечениюОстаток КАК КОбеспечениюОстаток,
	|		проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
	|		0 КАК ПоступитОстаток,
	|		0 КАК Доступно,
	|		0 КАК РезервНеТОиР,
	|		0 КАК НаПеремещении
	|	ИЗ
	|		РегистрНакопления.проф_ЗапасыИПотребности.Остатки(&ТекущаяДата, ) КАК проф_ЗапасыИПотребностиОстатки
	|	ГДЕ
	|		проф_ЗапасыИПотребностиОстатки.КОбеспечениюОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		проф_ЗапасыИПотребностиОстатки.Номенклатура,
	|		проф_ЗапасыИПотребностиОстатки.Характеристика,
	|		проф_ЗапасыИПотребностиОстатки.Склад,
	|		проф_ЗапасыИПотребностиОстатки.Назначение,
	|		0,
	|		0,
	|		проф_ЗапасыИПотребностиОстатки.ПоступитОстаток,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.проф_ЗапасыИПотребности.Остатки(&ТекущаяДата, ) КАК проф_ЗапасыИПотребностиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втДоступноРезервНеТОиР.Номенклатура,
	|		втДоступноРезервНеТОиР.Характеристика,
	|		втДоступноРезервНеТОиР.Склад,
	|		втДоступноРезервНеТОиР.Назначение,
	|		0,
	|		0,
	|		0,
	|		втДоступноРезервНеТОиР.Доступно,
	|		втДоступноРезервНеТОиР.РезервНеТОиР,
	|		0
	|	ИЗ
	|		втДоступноРезервНеТОиР КАК втДоступноРезервНеТОиР
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		проф_ЗаказыНаПеремещениеОстатки.Номенклатура,
	|		проф_ЗаказыНаПеремещениеОстатки.Характеристика,
	|		проф_ЗаказНаПеремещение.СкладОтправитель,
	|		ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка),
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		проф_ЗаказыНаПеремещениеОстатки.КОформлениюОстаток
	|	ИЗ
	|		РегистрНакопления.проф_ЗаказыНаПеремещение.Остатки(&ТекущаяДата, ) КАК проф_ЗаказыНаПеремещениеОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.проф_ЗаказНаПеремещение КАК проф_ЗаказНаПеремещение
	|			ПО проф_ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение = проф_ЗаказНаПеремещение.Ссылка) КАК ЗапасыИПотребностиПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыИПотребностиПредварительно.Характеристика,
	|	ЗапасыИПотребностиПредварительно.Номенклатура,
	|	ЗапасыИПотребностиПредварительно.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезервыПоЗаказам.Номенклатура КАК Номенклатура,
	|	РезервыПоЗаказам.Характеристика КАК Характеристика,
	|	РезервыПоЗаказам.Склад КАК Склад,
	|	СУММА(РезервыПоЗаказам.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ РезервыПоНоменклатуре
	|ИЗ
	|	РезервыПоЗаказам КАК РезервыПоЗаказам
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыПоЗаказам.Номенклатура,
	|	РезервыПоЗаказам.Характеристика,
	|	РезервыПоЗаказам.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапасыИПотребности.Номенклатура КАК Номенклатура,
	|	втЗапасыИПотребности.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втДоступностьНаСкладеОтправителе
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|ГДЕ
	|	втЗапасыИПотребности.Склад = &СкладОтправитель
	|	И втЗапасыИПотребности.Доступно + втЗапасыИПотребности.РезервНеТОиР > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втЗапасыИПотребности.Номенклатура КАК Номенклатура,
	|	втЗапасыИПотребности.Характеристика КАК Характеристика,
	|	втЗапасыИПотребности.Склад КАК Склад,
	|	СУММА(втЗапасыИПотребности.Доступно) + СУММА(втЗапасыИПотребности.РезервНеТОиР) КАК ОстатокНаСкладе,
	|	СУММА(втЗапасыИПотребности.Доступно) КАК СвободныйОстаток,
	|	СУММА(втЗапасыИПотребности.РезервНеТОиР) КАК Резерв,
	|	СУММА(втЗапасыИПотребности.Заказано) КАК Заказано,
	|	СУММА(втЗапасыИПотребности.Поступит) КАК Поступит,
	|	СУММА(втЗапасыИПотребности.НаПеремещении) КАК НаПеремещении,
	|	МАКСИМУМ(ЕСТЬNULL(МинимальныеОстатки.МинимальныйОстаток, 0)) КАК МинОстаток
	|ИЗ
	|	втЗапасыИПотребности КАК втЗапасыИПотребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеОстатки КАК МинимальныеОстатки
	|		ПО втЗапасыИПотребности.Номенклатура = МинимальныеОстатки.Номенклатура
	|			И втЗапасыИПотребности.Характеристика = МинимальныеОстатки.Характеристика
	|			И втЗапасыИПотребности.Склад = МинимальныеОстатки.Склад
	|ГДЕ
	|	&ОтборПоСкладуОтправителю
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗапасыИПотребности.Номенклатура,
	|	втЗапасыИПотребности.Характеристика,
	|	втЗапасыИПотребности.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	проф_ВнутреннееТовародвижение.Номенклатура КАК Номенклатура,
	|	СУММА(проф_ВнутреннееТовародвижение.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыВПутиПоНоменклатуре
	|ИЗ
	|	РегистрСведений.проф_ВнутреннееТовародвижение КАК проф_ВнутреннееТовародвижение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|		ПО проф_ВнутреннееТовародвижение.Назначение = проф_Назначения.Ссылка
	|			И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|ГДЕ
	|	проф_ВнутреннееТовародвижение.Номенклатура В
	|			(ВЫБРАТЬ
	|				ЗаказыНаВнутреннееПотребление.Номенклатура
	|			ИЗ
	|				ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление)
	|
	|СГРУППИРОВАТЬ ПО
	|	проф_ВнутреннееТовародвижение.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.КодСтроки КАК КодСтроки,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	ВЫБОР
	|		КОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) > 0
	|			ТОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОбеспечению,
	|	ВЫБОР
	|		КОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0) > 0
	|			ТОГДА ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(ТоварыНаруках.КоличествоОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОбеспечениюПоУмолчанию,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(РезервыПоЗаказам.КоличествоОстаток, 0) - ЕСТЬNULL(втЗаказыНаПеремещение.КОформлению, 0) КАК ОсталосьОбеспечить,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втЗапасыИПотребности.Доступно, 0) > 0
	|			ТОГДА втЗапасыИПотребности.Доступно - ЕСТЬNULL(РезервыПоНоменклатуре.КоличествоОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Доступно,
	|	ЕСТЬNULL(РезервыПоЗаказам.КоличествоОстаток, 0) КАК Резерв,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(втЗапасыИПотребности.Доступно, 0) > 0
	|					ТОГДА втЗапасыИПотребности.Доступно - ЕСТЬNULL(РезервыПоНоменклатуре.КоличествоОстаток, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ < ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(РезервыПоЗаказам.КоличествоОстаток, 0) - ЕСТЬNULL(втЗаказыНаПеремещение.КОформлению, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(втЗапасыИПотребности.Доступно, 0) > 0
	|						ТОГДА втЗапасыИПотребности.Доступно - ЕСТЬNULL(РезервыПоНоменклатуре.КоличествоОстаток, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(РезервыПоЗаказам.КоличествоОстаток, 0) - ЕСТЬNULL(втЗаказыНаПеремещение.КОформлению, 0)
	|	КОНЕЦ КАК РекомендованоКРезерву,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(втЗапасыИПотребности.Доступно, 0) > 0
	|					ТОГДА втЗапасыИПотребности.Доступно - ЕСТЬNULL(РезервыПоНоменклатуре.КоличествоОстаток, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ < ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(РезервыПоЗаказам.КоличествоОстаток, 0) - ЕСТЬNULL(втЗаказыНаПеремещение.КОформлению, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(втЗапасыИПотребности.Доступно, 0) > 0
	|						ТОГДА втЗапасыИПотребности.Доступно - ЕСТЬNULL(РезервыПоНоменклатуре.КоличествоОстаток, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстатокВсего - ЕСТЬNULL(РезервыПоЗаказам.КоличествоОстаток, 0) - ЕСТЬNULL(втЗаказыНаПеремещение.КОформлению, 0)
	|	КОНЕЦ > 0 КАК проф_СоздатьРезерв,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДатаОтгрузки КАК ДатаПотребности,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДатаПоставки КАК ДатаПоставки,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.КрайнийСрокЗаказа КАК КрайнийСрокЗаказа,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Организация КАК Организация,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Подразделение КАК Подразделение,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.КВыполнению КАК КВыполнению,
	|	ЕСТЬNULL(МинимальныеОстатки.МинимальныйОстаток, 0) КАК МинОстаток,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ПотребностьВЗаказе КАК ПотребностьВЗаказе,
	|	втТаблицаАналогов.Номенклатура ЕСТЬ НЕ NULL  КАК ЕстьАналогиНоменклатуры,
	|	ЕСТЬNULL(втЗаказыНаПеремещение.КОформлению, 0) КАК НаПеремещении,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЕстьСвязанные
	|		ИЛИ НЕ СвязанныеДокументы.ЗаказНаВнутреннееПотребление ЕСТЬ NULL КАК ЕстьСвязанныеДокументы,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.проф_Назначение КАК Назначение,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.проф_КЗаказу КАК проф_КЗаказу,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.проф_ЗаказДляЗакупки КАК ЗаказДляЗакупки,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.ДокументОснование КАК ДокументОснование,
	|	втДанныеПоРемонтам.ОбъектРемонта КАК НаименованиеОборудования,
	|	ЕСТЬNULL(втЗаказыПоставщикуПрошлаЗакупка.КоличествоОстаток, 0) КАК ПрошлаЗакупка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втЗаказыПоставщикуПрошлаЗакупка.КоличествоОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(втТоварыВПутиПоНоменклатуре.Количество, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТоварыВПути,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.СтатусЗаказа КАК СтатусЗаказа,
	|	ЗаказыНаВнутреннееПотреблениеОстатки.КВыполнению КАК СтрокаЗаблокирована,
	|	0 КАК ОстатокНаСкладе
	|ИЗ
	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотреблениеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗапасыИПотребности КАК втЗапасыИПотребности
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = втЗапасыИПотребности.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = втЗапасыИПотребности.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Склад = втЗапасыИПотребности.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДоступностьНаСкладеОтправителе КАК втДоступностьНаСкладеОтправителе
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = втДоступностьНаСкладеОтправителе.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = втДоступностьНаСкладеОтправителе.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоЗаказам КАК РезервыПоЗаказам
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = РезервыПоЗаказам.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = РезервыПоЗаказам.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Склад = РезервыПоЗаказам.Склад
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление = РезервыПоЗаказам.ЗаказНаВнутреннееПотребление
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыПоНоменклатуре КАК РезервыПоНоменклатуре
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = РезервыПоНоменклатуре.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = РезервыПоНоменклатуре.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Склад = РезервыПоНоменклатуре.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеОстатки КАК МинимальныеОстатки
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = МинимальныеОстатки.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = МинимальныеОстатки.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Склад = МинимальныеОстатки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаРуках КАК ТоварыНаруках
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = ТоварыНаруках.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = ТоварыНаруках.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Склад = ТоварыНаруках.Склад
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление = ТоварыНаруках.ЗаказНаВнутреннееПотребление
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязанныеДокументы КАК СвязанныеДокументы
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление = СвязанныеДокументы.ЗаказНаВнутреннееПотребление
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаАналогов КАК втТаблицаАналогов
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = втТаблицаАналогов.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = втТаблицаАналогов.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказыНаПеремещение КАК втЗаказыНаПеремещение
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = втЗаказыНаПеремещение.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = втЗаказыНаПеремещение.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление = втЗаказыНаПеремещение.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказыПоставщикуПрошлаЗакупка КАК втЗаказыПоставщикуПрошлаЗакупка
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = втЗаказыПоставщикуПрошлаЗакупка.Номенклатура
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика = втЗаказыПоставщикуПрошлаЗакупка.Характеристика
	|			И ЗаказыНаВнутреннееПотреблениеОстатки.проф_Назначение = втЗаказыПоставщикуПрошлаЗакупка.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПоРемонтам КАК втДанныеПоРемонтам
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.ДокументОснование = втДанныеПоРемонтам.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыВПутиПоНоменклатуре КАК втТоварыВПутиПоНоменклатуре
	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = втТоварыВПутиПоНоменклатуре.Номенклатура
	|ГДЕ
	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	&СтрокаСортировки
	|ИТОГИ
	|	СУММА(КОбеспечению),
	|	СУММА(ОсталосьОбеспечить),
	|	МАКСИМУМ(Доступно),
	|	СУММА(Резерв),
	|	СУММА(РекомендованоКРезерву),
	|	МИНИМУМ(ДатаПотребности),
	|	МИНИМУМ(ДатаПоставки),
	|	МАКСИМУМ(СпособОбеспеченияПотребностей),
	|	МАКСИМУМ(КВыполнению),
	|	МИНИМУМ(МинОстаток),
	|	СУММА(ПотребностьВЗаказе),
	|	МАКСИМУМ(ЕстьАналогиНоменклатуры),
	|	МАКСИМУМ(ДокументОснование),
	|	СУММА(ПрошлаЗакупка),
	|	МАКСИМУМ(СтатусЗаказа),
	|	МАКСИМУМ(СтрокаЗаблокирована),
	|	СУММА(ОстатокНаСкладе)
	|ПО
	|	&СтрокаИтогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщику.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщику.Характеристика КАК Характеристика,
	|	ЗаказыПоставщику.Склад КАК Склад,
	|	СУММА(ЗаказыПоставщику.КоличествоОстаток) КАК Количество,
	|	торо_ЗаказПоставщику.ДатаПоставки КАК ДатаПоставки
	|ИЗ
	|	втДанныеРегистраЗаказыПоставщику КАК ЗаказыПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаказПоставщику КАК торо_ЗаказПоставщику
	|		ПО ЗаказыПоставщику.ЗаказПоставщику = торо_ЗаказПоставщику.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщику.Номенклатура,
	|	ЗаказыПоставщику.Характеристика,
	|	ЗаказыПоставщику.Склад,
	|	торо_ЗаказПоставщику.ДатаПоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоставки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- Проф-ИТ, #228, Соловьев А.А., 04.10.2023

&НаКлиенте
&ИзменениеИКонтроль("ПереместитьТоварОбработкаВыбораИзТЧ")
Процедура проф_ПереместитьТоварОбработкаВыбораИзТЧ(ВыбраннаяСтрока)

	ТекущиеДанныеТЧ = ОстаткиПоСкладам.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ТекущиеДанныеДерево = Элементы.ДанныеДерево.ТекущиеДанные; 

	КоличествоПоСкладам = Новый Соответствие;

	Если ГруппировкаДанных = 0 Тогда

		#Удаление
		Если ТекущиеДанныеДерево.ЭтоНоменклатура Тогда

			Для Каждого СтрокаСклад Из ТекущиеДанныеДерево.ПолучитьЭлементы() Цикл
				КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву);
			КонецЦикла;	

		ИначеЕсли ТекущиеДанныеДерево.ЭтоСклад Тогда

			СтрокаСклад = ТекущиеДанныеДерево;
			КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву);

		ИначеЕсли ТекущиеДанныеДерево.ЭтоЗаказ Тогда

			СтрокаСклад = ТекущиеДанныеДерево.ПолучитьРодителя();
			КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву);
		КонецЕсли;	
		#КонецУдаления
		#Вставка
		//++ Проф-ИТ, #295, Соловьев А.А., 11.10.2023
		Если ТекущиеДанныеДерево.ЭтоЗаказ Тогда
			СтрокаСклад = ТекущиеДанныеДерево.ПолучитьРодителя();
			КоличествоПоСкладам.Вставить(СтрокаСклад.Данные,
				СтрокаСклад.ОсталосьОбеспечить - СтрокаСклад.РекомендованоКРезерву);
		Иначе
			ТекстСообщения = НСтр("ru = 'Выберите заказ для перемещения'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	
		//-- Проф-ИТ, #295, Соловьев А.А., 11.10.2023
		#КонецВставки

	ИначеЕсли ГруппировкаДанных = 1 Тогда 

		Если Не ТекущиеДанныеДерево.ЭтоНоменклатура Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана строка с номенклатурой.'"));
			Возврат;
		КонецЕсли;

		СтрокаНоменклатура = ТекущиеДанныеДерево;
		СтрокаЗаказ = СтрокаНоменклатура.ПолучитьРодителя();
		СтрокаСклад = СтрокаЗаказ.ПолучитьРодителя();

		КоличествоПоСкладам.Вставить(СтрокаСклад.Данные, СтрокаНоменклатура.ОсталосьОбеспечить - СтрокаНоменклатура.РекомендованоКРезерву);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склады", КоличествоПоСкладам);
	ПараметрыФормы.Вставить("ОстатокСклада", ТекущиеДанныеТЧ.СвободныйОстаток);
	ПараметрыФормы.Вставить("СкладОтправитель", ТекущиеДанныеТЧ.Склад);
	ПараметрыФормы.Вставить("МинОстаток", ТекущиеДанныеТЧ.МинОстаток);
	#Вставка
	//++ Проф-ИТ, #295, Соловьев А.А., 09.10.2023
	АдресТаблицыОстатковНаСкладе = ПолучитьАдресТаблицыОстатковНаСкладе(ТекущиеДанныеДерево.Номенклатура, 
		ТекущиеДанныеДерево.Характеристика, ТекущиеДанныеТЧ.Склад);
		
	Если АдресТаблицыОстатковНаСкладе = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанныеДерево.Характеристика) Тогда 
			СтрокаНоменклатура = СтрШаблон("%1 %2", ТекущиеДанныеДерево.Номенклатура, ТекущиеДанныеДерево.Характеристика);
		Иначе
			СтрокаНоменклатура = Строка(ТекущиеДанныеДерево.Номенклатура);
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Не найдено остатков по номенклатуре %1 на складе %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаНоменклатура, ТекущиеДанныеТЧ.Склад);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресТаблицыОстатковНаСкладе", АдресТаблицыОстатковНаСкладе);
	ПараметрыФормы.Вставить("ОсталосьОбеспечить", ТекущиеДанныеДерево.ОсталосьОбеспечить);
	
	Если ТекущиеДанныеДерево.ОсталосьОбеспечить = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не найдена потребность в обеспечении'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	//-- Проф-ИТ, #295, Соловьев А.А., 09.10.2023
	#КонецВставки

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Номенклатура", ТекущиеДанныеДерево.Номенклатура);
	ПараметрыОповещения.Вставить("Характеристика", ТекущиеДанныеДерево.Характеристика);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьСкладПолучательЗавершение", ЭтотОбъект, ПараметрыОповещения);

	ОткрытьФорму("Обработка.торо_РабочееМестоСпециалистаОбеспечения.Форма.ФормаВыбораСкладовДляПеремещения", 
	ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("УстановитьОтборНаСвязанныеТаблицы")
Процедура проф_УстановитьОтборНаСвязанныеТаблицы()

	ТекущиеДанные = Элементы.ДанныеДерево.ТекущиеДанные;

	// Остатки по складам.
	Если ТекущиеДанные = Неопределено Тогда 
		ПустойОтбор = Новый Структура("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		Элементы.ОстаткиПоСкладам.ОтборСтрок = Новый ФиксированнаяСтруктура(ПустойОтбор);
		Возврат;
	Иначе
		ОтборСтрок = Новый Структура("Номенклатура, Характеристика", ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
		Элементы.ОстаткиПоСкладам.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	КонецЕсли;

	// Резервы и заказы поставщику.
	Если ГруппировкаДанных = 1 И ТекущиеДанные.ЭтоЗаказ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Номенклатура", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Характеристика", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "ЗаказНаВП", ТекущиеДанные.Данные);
	ИначеЕсли ГруппировкаДанных = 1 И ТекущиеДанные.ЭтоНоменклатура Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Номенклатура", ТекущиеДанные.Номенклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Характеристика", ТекущиеДанные.Характеристика);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "ЗаказНаВП", ТекущиеДанные.ПолучитьРодителя().Данные);	
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Номенклатура", ТекущиеДанные.Номенклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Характеристика", ТекущиеДанные.Характеристика);	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "ЗаказНаВП", Неопределено, Ложь);
	КонецЕсли;

	Если ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Организация", Организация); 
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Организация", Организация);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Организация", Неопределено, Ложь); 
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Организация", Неопределено, Ложь); 
	КонецЕсли;    
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Подразделение", Подразделение);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Подразделение", Подразделение);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Подразделение", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Подразделение", Неопределено, Ложь);
	КонецЕсли;

	#Вставка
	//++ Проф-ИТ, #228, Соловьев А.А., 29.08.2023
	Если ЗначениеЗаполнено(ЭтотОбъект["Склад"]) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Склад", ЭтотОбъект["Склад"]);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Склад", ЭтотОбъект["Склад"]);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "Склад", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Склад", Неопределено, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект["ЗаказНаВнутреннееПотребление"]) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "ЗаказНаВнутреннееПотребление", ЭтотОбъект["ЗаказНаВнутреннееПотребление"]);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "ЗаказНаВнутреннееПотребление", ЭтотОбъект["ЗаказНаВнутреннееПотребление"]);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РезервыСписок, "ЗаказНаВнутреннееПотребление", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "ЗаказНаВнутреннееПотребление", Неопределено, Ложь);
	КонецЕсли;
	//-- Проф-ИТ, #228, Соловьев А.А., 29.08.2023
	#КонецВставки
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Номенклатура", ТекущиеДанные.Номенклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыПоставщикуСписок, "Характеристика", ТекущиеДанные.Характеристика);

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДанныеДерево")
Процедура проф_ЗаполнитьДанныеДерево(ВыборкаДанных, ЗаказанныеПозиции)

	СтруктураПоискаЗаказов = Новый Структура("Номенклатура, Характеристика, Склад");
	ЗаказанныеПозиции.Индексы.Добавить("Номенклатура, Характеристика, Склад");

	ЭлементыКорняДерева = ДанныеДерево.ПолучитьЭлементы();

	Если ГруппировкаДанных = 1 Тогда // По заказам.

		ВыборкаПоСкладам = ВыборкаДанных;
		Пока ВыборкаПоСкладам.Следующий() Цикл

			Если ТолькоНеобеспеченные и ВыборкаПоСкладам.ОсталосьОбеспечить = 0 Тогда
				Продолжить;
			КонецЕсли;	

			СтрокаСклад = ЭлементыКорняДерева.Добавить();

			СтрокаСклад.Данные = ВыборкаПоСкладам.Склад;			
			СтрокаСклад.СкрытьФлагЗаказа = Истина;
			СтрокаСклад.ЭтоСклад = Истина;
			#Вставка
			//++ Проф-ИТ, #228, Соловьев А.А., 28.09.2023
			СтрокаСклад.ЕстьАналоги = ВыборкаПоСкладам.ЕстьАналогиНоменклатуры;
			//-- Проф-ИТ, #228, Соловьев А.А., 28.09.2023
			#КонецВставки

			СтрокиЗаказов = СтрокаСклад.ПолучитьЭлементы();
			ВыборкаПоЗаказам = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоЗаказам.Следующий() Цикл

				Если ТолькоНеобеспеченные и ВыборкаПоЗаказам.ОсталосьОбеспечить = 0 Тогда
					Продолжить;
				КонецЕсли;  

				СтрокаЗаказ = СтрокиЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаПоЗаказам,, "ОстатокНаСкладе");

				СтрокаЗаказ.Данные = ВыборкаПоЗаказам.ЗаказНаВнутреннееПотребление;				
				СтрокаЗаказ.ЭтоЗаказ = Истина;
				#Вставка
				//++ Проф-ИТ, #228, Соловьев А.А., 28.09.2023
				СтрокаЗаказ.ЕстьАналоги = ВыборкаПоЗаказам.ЕстьАналогиНоменклатуры;
				//-- Проф-ИТ, #228, Соловьев А.А., 28.09.2023
				//++ Проф-ИТ, #437, Соловьев А.А., 19.01.2024
				СтрокаЗаказ.НаименованиеОборудования = ВыборкаПоЗаказам.ДокументОснование;
				//-- Проф-ИТ, #437, Соловьев А.А., 19.01.2024
				#КонецВставки
				
				СтрокиНоменклатур = СтрокаЗаказ.ПолучитьЭлементы();
				ВыборкаПоНоменклатуре = ВыборкаПоЗаказам.Выбрать();
				Пока ВыборкаПоНоменклатуре.Следующий() Цикл

					Если ТолькоНеобеспеченные и ВыборкаПоНоменклатуре.ОсталосьОбеспечить = 0 Тогда
						Продолжить;
					КонецЕсли; 

					СтрокаНоменклатура = СтрокиНоменклатур.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаПоНоменклатуре);

					Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Характеристика) Тогда 
						СтрокаНоменклатура.Данные = СтрШаблон("%1 [%2]", ВыборкаПоНоменклатуре.Номенклатура, ВыборкаПоНоменклатуре.Характеристика);	
					Иначе
						СтрокаНоменклатура.Данные = ВыборкаПоНоменклатуре.Номенклатура;
					КонецЕсли;
					#Удаление
					СтрокаНоменклатура.СвободныйОстаток = ВыборкаПоНоменклатуре.СвободныйОстатокНаСкладе;
					#КонецУдаления
					СтрокаНоменклатура.ЭтоНоменклатура = Истина;
					#Вставка
					//++ Проф-ИТ, #228, Соловьев А.А., 28.09.2023
					СтрокаНоменклатура.ЕстьАналоги = ВыборкаПоНоменклатуре.ЕстьАналогиНоменклатуры;
					//-- Проф-ИТ, #228, Соловьев А.А., 28.09.2023
					#КонецВставки

					ЗаполнитьЗначенияСвойств(СтруктураПоискаЗаказов, СтрокаНоменклатура);
					СтруктураПоискаЗаказов.Склад = СтрокаСклад.Данные;
					ЗаказанныеПозицииОтбор = ЗаказанныеПозиции.НайтиСтроки(СтруктураПоискаЗаказов);

					Для Каждого ЗаказаннаяПозиция Из ЗаказанныеПозицииОтбор Цикл 

						Если ЗаказаннаяПозиция.ДатаПоставки <= СтрокаНоменклатура.ДатаПотребности Тогда
							СтрокаНоменклатура.ЗаказНаДатуПотребности = СтрокаНоменклатура.ЗаказНаДатуПотребности + ЗаказаннаяПозиция.Количество;
						КонецЕсли;  
						СтрокаНоменклатура.ЗаказВсего = СтрокаНоменклатура.ЗаказВсего + ЗаказаннаяПозиция.Количество;
					КонецЦикла;    
				КонецЦикла;

				ЗаполнитьЗначенияСвойств(СтрокаЗаказ, СтрокаНоменклатура, 
				"ЕстьСвязанныеДокументы, Организация, Подразделение");

			КонецЦикла;	
		КонецЦикла;

	ИначеЕсли ГруппировкаДанных = 0 Тогда // По номенклатуре.

		ВыборкаНоменклатур = ВыборкаДанных;
		Пока ВыборкаНоменклатур.Следующий() Цикл

			Если ТолькоНеобеспеченные и ВыборкаНоменклатур.ОсталосьОбеспечить = 0 Тогда
				Продолжить;
			КонецЕсли; 

			ВыборкаХарактеристик = ВыборкаНоменклатур.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл

				Если ТолькоНеобеспеченные и ВыборкаХарактеристик.ОсталосьОбеспечить = 0 Тогда
					Продолжить;
				КонецЕсли; 

				СтрокаНоменклатура = ЭлементыКорняДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаХарактеристик);
				Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ВыборкаХарактеристик.Характеристика) Тогда 
					СтрокаНоменклатура.Данные = СтрШаблон("%1 [%2]", ВыборкаНоменклатур.Номенклатура, ВыборкаХарактеристик.Характеристика);	
				Иначе
					СтрокаНоменклатура.Данные = ВыборкаНоменклатур.Номенклатура;
				КонецЕсли;
				СтрокаНоменклатура.МинОстаток = 0;
				СтрокаНоменклатура.ЭтоНоменклатура = Истина;
				#Вставка
				//++ Проф-ИТ, #228, Соловьев А.А., 28.09.2023
				СтрокаНоменклатура.ЕстьАналоги = ВыборкаХарактеристик.ЕстьАналогиНоменклатуры;
				//-- Проф-ИТ, #228, Соловьев А.А., 28.09.2023
				#КонецВставки

				ОстатокПоНоменклатуре = 0;
				СвободныйОстаток = 0;
				ЗаказПоНоменклатуре = 0;

				МинимальныйКрайнийСрокСкладов = Дата(3999, 1, 1);

				СтрокиСклады = СтрокаНоменклатура.ПолучитьЭлементы();

				ВыборкаСкладов = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСкладов.Следующий() Цикл
					Если ТолькоНеобеспеченные и ВыборкаСкладов.ОсталосьОбеспечить = 0 Тогда
						Продолжить;
					КонецЕсли; 
					СтрокаСклад = СтрокиСклады.Добавить();

					СтрокаСклад.Данные = ВыборкаСкладов.Склад;
					ЗаполнитьЗначенияСвойств(СтрокаСклад, ВыборкаСкладов);
					#Удаление
					СтрокаСклад.СвободныйОстаток = ВыборкаСкладов.ОстатокНаСкладе - ВыборкаСкладов.Резерв;
					#КонецУдаления
					СтрокаСклад.ЭтоСклад = Истина;

					Если СтрокаСклад.СвободныйОстаток > 0 Тогда
						СтрокаСклад.Переместить = БиблиотекаКартинок.СтартБизнесПроцесса;
					КонецЕсли;
					
					ОстатокПоНоменклатуре = ОстатокПоНоменклатуре + ВыборкаСкладов.ОстатокНаСкладе; 
					СвободныйОстаток = СвободныйОстаток + СтрокаСклад.СвободныйОстаток;

					ЗаказПоСкладу = 0;
					ВнешниеЗаказыДобавлены = Ложь;

					ЗаполнитьЗначенияСвойств(СтруктураПоискаЗаказов, ВыборкаСкладов);
					НайденныеЗаказыПоставщику = ЗаказанныеПозиции.НайтиСтроки(СтруктураПоискаЗаказов);

					МинимальныйКрайнийСрокЗаказов = Дата(3999, 1, 1);

					СтрокиВнутренниеЗаказы = СтрокаСклад.ПолучитьЭлементы(); 

					ВыборкаЗаказов = ВыборкаСкладов.Выбрать();
					Пока ВыборкаЗаказов.Следующий() Цикл 
						Если ТолькоНеобеспеченные и ВыборкаЗаказов.ОсталосьОбеспечить = 0 Тогда
							Продолжить;
						КонецЕсли; 
						СтрокаЗаказ = СтрокиВнутренниеЗаказы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаЗаказов);
						СтрокаЗаказ.ОстатокНаСкладе = 0;
						СтрокаЗаказ.МинОстаток = 0;
						СтрокаЗаказ.СкрытьФлагЗаказа = Истина;
						СтрокаЗаказ.ЭтоЗаказ = Истина;
						СтрокаЗаказ.Данные = ВыборкаЗаказов.ЗаказНаВнутреннееПотребление;
						ОсталосьОбеспечить = СтрокаЗаказ.ОсталосьОбеспечить - СтрокаЗаказ.РекомендованоКРезерву;
						Для Каждого ЗаказПоставщику Из НайденныеЗаказыПоставщику Цикл 
							Если НЕ ВнешниеЗаказыДобавлены Тогда
								СтрокаСклад.ЗаказВсего = СтрокаСклад.ЗаказВсего + ЗаказПоставщику.Количество;
							КонецЕсли;
							Если ОсталосьОбеспечить > 0 И ЗаказПоставщику.Количество <> 0 И ЗаказПоставщику.ДатаПоставки <= ВыборкаЗаказов.ДатаПотребности Тогда
								Количество = Мин(ОсталосьОбеспечить, ЗаказПоставщику.Количество); 
								СтрокаЗаказ.ЗаказНаДатуПотребности = СтрокаЗаказ.ЗаказНаДатуПотребности + Количество;
								ЗаказПоставщику.Количество = ЗаказПоставщику.Количество - Количество;
								ОсталосьОбеспечить = ОсталосьОбеспечить - Количество;
							КонецЕсли;
						КонецЦикла;

						ВнешниеЗаказыДобавлены = Истина;

						ЗаказПоСкладу = ЗаказПоСкладу + СтрокаЗаказ.ЗаказНаДатуПотребности;

						Если ЗначениеЗаполнено(ВыборкаЗаказов.КрайнийСрокЗаказа)
							И ВыборкаЗаказов.КрайнийСрокЗаказа < МинимальныйКрайнийСрокЗаказов Тогда
							МинимальныйКрайнийСрокЗаказов = ВыборкаЗаказов.КрайнийСрокЗаказа;
						КонецЕсли; 

					КонецЦикла;
					СтрокаСклад.ЗаказНаДатуПотребности = ЗаказПоСкладу;

					ЗаказПоНоменклатуре = ЗаказПоНоменклатуре + ЗаказПоСкладу;
					СтрокаНоменклатура.ЗаказВсего = СтрокаНоменклатура.ЗаказВсего + СтрокаСклад.ЗаказВсего;

					Если МинимальныйКрайнийСрокЗаказов = Дата(3999, 1, 1) Тогда
						МинимальныйКрайнийСрокЗаказов = Дата(1, 1, 1);
					КонецЕсли; 

					СтрокаСклад.КрайнийСрокЗаказа = МинимальныйКрайнийСрокЗаказов;

					Если ЗначениеЗаполнено(МинимальныйКрайнийСрокЗаказов)
						И СтрокаСклад.КрайнийСрокЗаказа < МинимальныйКрайнийСрокСкладов Тогда
						МинимальныйКрайнийСрокСкладов = СтрокаСклад.КрайнийСрокЗаказа;
					КонецЕсли; 

				КонецЦикла;

				СтрокаНоменклатура.ОстатокНаСкладе = ОстатокПоНоменклатуре;
				#Удаление
				СтрокаНоменклатура.СвободныйОстаток = СвободныйОстаток;
				#КонецУдаления
				СтрокаНоменклатура.ЗаказНаДатуПотребности = ЗаказПоНоменклатуре;

				Если МинимальныйКрайнийСрокСкладов = Дата(3999, 1, 1) Тогда
					МинимальныйКрайнийСрокСкладов = Дата(1, 1, 1);
				КонецЕсли;

				СтрокаНоменклатура.КрайнийСрокЗаказа = МинимальныйКрайнийСрокСкладов; 
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;

	ОбновитьЗависимыеПоказателиДанныеДерево();

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("АдресДанныхДляЗаказовПоставщикам")
Функция проф_АдресДанныхДляЗаказовПоставщикам()

	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3))); 
	ТаблицаТоваров.Колонки.Добавить("КомпенсацияДоМинимальногоОстатка", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("ДатаПоставки", Новый ОписаниеТипов("Дата"));
	ТаблицаТоваров.Колонки.Добавить("СпособОбеспеченияПотребностей", Новый ОписаниеТипов("СправочникСсылка.СпособыОбеспеченияПотребностей"));
	ТаблицаТоваров.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));
	#Вставка
	//++ Проф-ИТ, #27, Соловьев А.А., 31.08.2023
	ТаблицаТоваров.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.проф_Назначения"));
	//-- Проф-ИТ, #27, Соловьев А.А., 31.08.2023
	#КонецВставки

	ТаблицаЗаказовНаВП = Новый ТаблицаЗначений;
	ТаблицаЗаказовНаВП.Колонки.Добавить("ЗаказНаВП", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление"));
	ТаблицаЗаказовНаВП.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ТаблицаЗаказовНаВП.Колонки.Добавить("ИдентификаторТовара", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));

	Если ГруппировкаДанных = 0 Тогда

		Для Каждого СтрокаНоменклатура Из ДанныеДерево.ПолучитьЭлементы() Цикл

			Если СтрокаНоменклатура.СоздатьЗаказ Тогда

				Для Каждого СтрокаСклад Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл

					Если СтрокаСклад.СоздатьЗаказ Тогда  

						НоваяСтрокаТовара = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаСклад);
						НоваяСтрокаТовара.Склад = СтрокаСклад.Данные;
						НоваяСтрокаТовара.Количество = СтрокаСклад.РекомендованоКЗаказу; 
						НоваяСтрокаТовара.Идентификатор = Строка(Новый УникальныйИдентификатор);

						РекомендованоКЗаказуПоЗаказам = 0;

						Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл

							Если СтрокаЗаказ.РекомендованоКЗаказу > 0 Тогда 
								НоваяСтрокаЗаказа = ТаблицаЗаказовНаВП.Добавить();
								НоваяСтрокаЗаказа.ЗаказНаВП = СтрокаЗаказ.Данные; 
								НоваяСтрокаЗаказа.Количество = СтрокаЗаказ.РекомендованоКЗаказу;
								НоваяСтрокаЗаказа.ИдентификаторТовара = НоваяСтрокаТовара.Идентификатор;
								#Вставка
								//++ Проф-ИТ, #27, Соловьев А.А., 31.08.2023
								НоваяСтрокаТовара.Назначение = СтрокаЗаказ.Назначение;
								//-- Проф-ИТ, #27, Соловьев А.А., 31.08.2023
								#КонецВставки
							КонецЕсли;

							РекомендованоКЗаказуПоЗаказам = РекомендованоКЗаказуПоЗаказам + СтрокаЗаказ.РекомендованоКЗаказу;
						КонецЦикла;

						НоваяСтрокаТовара.КомпенсацияДоМинимальногоОстатка = СтрокаСклад.РекомендованоКЗаказу - РекомендованоКЗаказуПоЗаказам;
					КонецЕсли;
					СтрокаСклад.СоздатьЗаказ = Ложь;
				КонецЦикла;
				СтрокаНоменклатура.СоздатьЗаказ = Ложь;
			КонецЕсли;
		КонецЦикла;  

	ИначеЕсли ГруппировкаДанных = 1 Тогда

		СтруктураПоискаДублей = Новый Структура;
		СтруктураПоискаДублей.Вставить("Номенклатура");
		СтруктураПоискаДублей.Вставить("Характеристика");
		СтруктураПоискаДублей.Вставить("Склад");

		ТаблицаТоваров.Индексы.Добавить("Номенклатура, Характеристика, Склад");

		Для Каждого СтрокаСклад Из ДанныеДерево.ПолучитьЭлементы() Цикл

			СтруктураПоискаДублей.Склад = СтрокаСклад.Данные;

			Для Каждого СтрокаЗаказ Из СтрокаСклад.ПолучитьЭлементы() Цикл	

				Если СтрокаЗаказ.СоздатьЗаказ Тогда

					Для Каждого СтрокаНоменклатура Из СтрокаЗаказ.ПолучитьЭлементы() Цикл

						Если СтрокаНоменклатура.СоздатьЗаказ Тогда

							ЗаполнитьЗначенияСвойств(СтруктураПоискаДублей, СтрокаНоменклатура, "Номенклатура, Характеристика");
							ТаблицаТоваровПоОтбору = ТаблицаТоваров.НайтиСтроки(СтруктураПоискаДублей);							

							Если ТаблицаТоваровПоОтбору.Количество() > 0 Тогда
								НоваяСтрокаТовар = ТаблицаТоваровПоОтбору[0];
								НоваяСтрокаТовар.Количество = НоваяСтрокаТовар.Количество + СтрокаНоменклатура.РекомендованоКЗаказу;
								НоваяСтрокаТовар.ДатаПоставки = Мин(НоваяСтрокаТовар.ДатаПоставки, СтрокаНоменклатура.ДатаПоставки);
							Иначе
								НоваяСтрокаТовар = ТаблицаТоваров.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаТовар, СтрокаНоменклатура);
								НоваяСтрокаТовар.Склад = СтрокаСклад.Данные;
								НоваяСтрокаТовар.КомпенсацияДоМинимальногоОстатка = СтрокаНоменклатура.МинОстаток - (СтрокаНоменклатура.ЗаказВсего - СтрокаНоменклатура.ЗаказНаДатуПотребности); 
								НоваяСтрокаТовар.Идентификатор = Строка(Новый УникальныйИдентификатор); 
								НоваяСтрокаТовар.Количество = СтрокаНоменклатура.РекомендованоКЗаказу + НоваяСтрокаТовар.КомпенсацияДоМинимальногоОстатка;
							КонецЕсли;

							НоваяСтрокаЗаказ = ТаблицаЗаказовНаВП.Добавить();
							НоваяСтрокаЗаказ.ЗаказНаВП = СтрокаЗаказ.Данные; 
							НоваяСтрокаЗаказ.Количество = СтрокаНоменклатура.РекомендованоКЗаказу;
							НоваяСтрокаЗаказ.ИдентификаторТовара = НоваяСтрокаТовар.Идентификатор;

							СтрокаНоменклатура.СоздатьЗаказ = Ложь;
						КонецЕсли;
					КонецЦикла;
					СтрокаЗаказ.СоздатьЗаказ = Ложь;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла; 
	КонецЕсли;

	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	

	ДанныеДляЗаказов = Новый Структура;
	ДанныеДляЗаказов.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	ДанныеДляЗаказов.Вставить("ПотребностиПоЗаказамНаВП", ТаблицаЗаказовНаВП);

	Возврат ПоместитьВоВременноеХранилище(ДанныеДляЗаказов, УникальныйИдентификатор);

КонецФункции

//++ Проф-ИТ, #295, Соловьев А.А., 09.10.2023

&НаСервере
Процедура ВывестиПозицииДляПеремещения()
	
	ГруппаПозицииДляПеремещения = Элементы.Добавить("ГруппаПозицииДляПеремещения", Тип("ГруппаФормы"), ЭтотОбъект);
	ГруппаПозицииДляПеремещения.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПозицииДляПеремещения.Заголовок 				= НСтр("ru = 'Позиции для перемещения'");
	ГруппаПозицииДляПеремещения.Отображение 			= ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаПозицииДляПеремещения.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПозицииДляПеремещения.Поведение 				= ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаПозицииДляПеремещения.ОтображениеУправления 	= ОтображениеУправленияОбычнойГруппы.Картинка;
	ГруппаПозицииДляПеремещения.ОтображатьЗаголовок 	= Истина;
	ГруппаПозицииДляПеремещения.РастягиватьПоГоризонтали = Истина;
	ГруппаПозицииДляПеремещения.Скрыть();
	
	Элементы.Переместить(ГруппаПозицииДляПеремещения, Элементы.Левая, Элементы.ГруппаСвязанныеДокументы);
	
	НоваяКоманда = Команды.Добавить("проф_УдалитьСтрокуПозицииДляПеремещения");
	НоваяКоманда.Заголовок = "Удалить";
	НоваяКоманда.Действие = "проф_УдалитьСтрокуПозицииДляПеремещения";
	НоваяКоманда.Картинка =  БиблиотекаКартинок.Удалить;
	
	ТаблицаФормы = Элементы.Добавить("ПозицииДляПеремещения", Тип("ТаблицаФормы"), ГруппаПозицииДляПеремещения);
	ТаблицаФормы.ПутьКДанным = "ПозицииДляПеремещения";
	ТаблицаФормы.ИзменятьПорядокСтрок = Ложь;
	ТаблицаФормы.ИзменятьСоставСтрок = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("проф_УдалитьСтрокуПозицииДляПеремещения", Тип("КнопкаФормы"), ТаблицаФормы.КоманднаяПанель);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Удалить'");
	НовыйЭлемент.ИмяКоманды = "проф_УдалитьСтрокуПозицииДляПеремещения";
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияНоменклатура", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.Номенклатура";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияХарактеристика", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.Характеристика";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияУпаковка", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.Заголовок = НСтр("ru = 'Упаковка'");
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.Номенклатура.ЕдиницаИзмерения";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияСкладОтправитель", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
	НовыйЭлемент.Заголовок = НСтр("ru = 'Склад-отправитель'");
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.СкладОтправитель";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияСкладПолучатель", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.Заголовок = НСтр("ru = 'Склад-получатель'");
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.СкладПолучатель";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияНазначение", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.Назначение";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияНазначениеИсходное", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.Заголовок = НСтр("ru = 'Назначение исходное'");
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.НазначениеИсходное";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияКоличество", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.Количество";
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияСогласованиеКорректировки", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.Заголовок = НСтр("ru = 'Согласование корректировки'");
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.СогласованиеКорректировки";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент  = Элементы.Добавить("ПозицииДляПеремещенияДокументОснование", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.Заголовок = НСтр("ru = 'Документ-основание'");
	НовыйЭлемент.ПутьКДанным = "ПозицииДляПеремещения.ДокументОснование";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресТаблицыОстатковНаСкладе(Номенклатура, Характеристика, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	проф_ЗапасыИПотребности.Назначение КАК Назначение,
	|	СУММА(проф_ЗапасыИПотребности.ВНаличииОстаток - проф_ЗапасыИПотребности.РезервироватьНаСкладеОстаток - проф_ЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			&ТекущаяДата,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Склад = &Склад) КАК проф_ЗапасыИПотребности
	|
	|СГРУППИРОВАТЬ ПО
	|	проф_ЗапасыИПотребности.Назначение";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(РезультатЗапроса.Выгрузить());
	
КонецФункции
	
&НаСервере
Процедура ДобавитьСтрокиВТаблицуДляПеремещения(АдресТаблицы, ТекущиеДанныеДерево)
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	проф_Назначения.Ссылка КАК Назначение,
	|	проф_Назначения.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.проф_Назначения КАК проф_Назначения
	|ГДЕ
	|	проф_Назначения.Ссылка В(&Назначения)
	|
	|СГРУППИРОВАТЬ ПО
	|	проф_Назначения.Ссылка,
	|	проф_Назначения.Подразделение";
	
	Запрос.УстановитьПараметр("Назначения", ТаблицаДанных.ВыгрузитьКолонку("НазначениеИсходное"));
	
	ПодразделенияНазначений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, 
			|СкладОтправитель, СкладПолучатель, Назначение, НазначениеИсходное, ДокументОснование");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанныеДерево);
		
		СтрокиПеремещения = ЭтотОбъект["ПозицииДляПеремещения"].НайтиСтроки(СтруктураПоиска);
		Если СтрокиПеремещения.Количество() = 0 Тогда 
			НоваяСтрока = ЭтотОбъект["ПозицииДляПеремещения"].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанныеДерево);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.НазначениеИсходное) Тогда 
				НоваяСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.НеТребуется;
			Иначе
				СтрокаНазначения = ПодразделенияНазначений.Найти(НоваяСтрока.НазначениеИсходное, "Назначение");
				Если СтрокаНазначения <> Неопределено
					И ЭтотОбъект["ПодразделенияСлужбыТОИР"].НайтиПоЗначению(СтрокаНазначения.Подразделение) <> Неопределено Тогда
					НоваяСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.НеТребуется; 
				Иначе
					НоваяСтрока.СогласованиеКорректировки = Перечисления.проф_СогласованиеКорректировки.ОбменСERP;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			СтрокаТЧ = СтрокиПеремещения[0];
			СтрокаТЧ.Количество = СтрокаТЧ.Количество + СтрокаДанных.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПеремещенияДляСогласованияНаСервере(ТаблицаДляПеремещения = Неопределено, СводныйДокумент = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПозицииДляПеремещения.Номенклатура КАК Номенклатура,
	|	ПозицииДляПеремещения.Характеристика КАК Характеристика,
	|	ПозицииДляПеремещения.СкладОтправитель КАК СкладОтправитель,
	|	ПозицииДляПеремещения.СкладПолучатель КАК СкладПолучатель,
	|	ПозицииДляПеремещения.Назначение КАК Назначение,
	|	ПозицииДляПеремещения.НазначениеИсходное КАК НазначениеИсходное,
	|	ПозицииДляПеремещения.Количество КАК Количество,
	|	ПозицииДляПеремещения.СогласованиеКорректировки КАК СогласованиеКорректировки,
	|	ПозицииДляПеремещения.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ втПозицииДляПеремещения
	|ИЗ
	|	&ПозицииДляПеремещения КАК ПозицииДляПеремещения";
	
	//++ Проф-ИТ, #372, Соловьев А.А., 24.11.2023
	Если СводныйДокумент Тогда
		
		Запрос.Текст = Запрос.Текст + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПозицииДляПеремещения.Номенклатура КАК Номенклатура,
		|	втПозицииДляПеремещения.Характеристика КАК Характеристика,
		|	втПозицииДляПеремещения.СкладОтправитель КАК СкладОтправитель,
		|	ЗаказНаВнутреннееПотребление.Склад КАК СкладПолучатель,
		|	втПозицииДляПеремещения.Назначение КАК Назначение,
		|	втПозицииДляПеремещения.НазначениеИсходное КАК НазначениеИсходное,
		|	втПозицииДляПеремещения.Количество КАК Количество,
		|	СУММА(втПозицииДляПеремещения.Количество) КАК КоличествоУпаковок,
		|	0 КАК Доступно,
		|	ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка) КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Перечисление.проф_СогласованиеКорректировки.ПустаяСсылка) КАК СогласованиеКорректировки,
		|	ЗаказНаВнутреннееПотребление.Организация КАК Организация,
		|	ЗаказНаВнутреннееПотребление.Подразделение КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка) КАК проф_Назначение,
		|	&ТекущаяДата КАК ДатаОтгрузки
		|ИЗ
		|	втПозицииДляПеремещения КАК втПозицииДляПеремещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|		ПО втПозицииДляПеремещения.ДокументОснование = ЗаказНаВнутреннееПотребление.Ссылка
		|ГДЕ
		|	втПозицииДляПеремещения.Количество > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	втПозицииДляПеремещения.Номенклатура,
		|	втПозицииДляПеремещения.Характеристика,
		|	втПозицииДляПеремещения.СкладОтправитель,
		|	ЗаказНаВнутреннееПотребление.Склад,
		|	втПозицииДляПеремещения.Назначение,
		|	втПозицииДляПеремещения.НазначениеИсходное,
		|	втПозицииДляПеремещения.Количество,
		|	ЗаказНаВнутреннееПотребление.Подразделение,
		|	ЗаказНаВнутреннееПотребление.ДатаОтгрузки,
		|	ЗаказНаВнутреннееПотребление.Организация,
		|	ЗаказНаВнутреннееПотребление.проф_НаправлениеДеятельности
		|ИТОГИ
		|	МАКСИМУМ(Организация)
		|ПО
		|	СкладОтправитель,
		|	СкладПолучатель,
		|	Подразделение";
		
		Запрос.УстановитьПараметр("ПозицииДляПеремещения", ТаблицаДляПеремещения);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПозицииДляПеремещения.Номенклатура КАК Номенклатура,
		|	втПозицииДляПеремещения.Характеристика КАК Характеристика,
		|	втПозицииДляПеремещения.СкладОтправитель КАК СкладОтправитель,
		|	втПозицииДляПеремещения.СкладПолучатель КАК СкладПолучатель,
		|	втПозицииДляПеремещения.Назначение КАК Назначение,
		|	втПозицииДляПеремещения.НазначениеИсходное КАК НазначениеИсходное,
		|	втПозицииДляПеремещения.Количество КАК Количество,
		|	втПозицииДляПеремещения.Количество КАК КоличествоУпаковок,
		|	втПозицииДляПеремещения.Количество КАК Доступно,
		|	втПозицииДляПеремещения.ДокументОснование КАК ДокументОснование,
		|	втПозицииДляПеремещения.СогласованиеКорректировки КАК СогласованиеКорректировки,
		|	ЗаказНаВнутреннееПотребление.Организация КАК Организация,
		|	ЗаказНаВнутреннееПотребление.Подразделение КАК Подразделение,
		|	ЗаказНаВнутреннееПотребление.проф_Назначение КАК проф_Назначение,
		|	ЗаказНаВнутреннееПотребление.Комментарий КАК Комментарий,
		|	ЗаказНаВнутреннееПотребление.проф_НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗаказНаВнутреннееПотребление.ДатаОтгрузки КАК ЖелаемаяДатаПоступления,
		|	&ТекущаяДата КАК ДатаОтгрузки
		|ИЗ
		|	втПозицииДляПеремещения КАК втПозицииДляПеремещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|		ПО втПозицииДляПеремещения.ДокументОснование = ЗаказНаВнутреннееПотребление.Ссылка
		|ГДЕ 
		|	втПозицииДляПеремещения.Количество > 0
		|ИТОГИ
		|	МАКСИМУМ(проф_Назначение),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(Подразделение),
		|	МАКСИМУМ(Назначение),
		|	МАКСИМУМ(Комментарий),
		|	МАКСИМУМ(НаправлениеДеятельности),
		|	МАКСИМУМ(ЖелаемаяДатаПоступления)
		|ПО
		|	СкладОтправитель,
		|	СкладПолучатель,
		|	ДокументОснование";
		
		Запрос.УстановитьПараметр("ПозицииДляПеремещения", ЭтотОбъект["ПозицииДляПеремещения"].Выгрузить());
		
	КонецЕсли;
	//-- Проф-ИТ, #372, Соловьев А.А., 24.11.2023
	
	МассивНовыхДокументов = Новый Массив;
	
	ОшибкаВТранзакции = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаСкладОтправитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСкладОтправитель.Следующий() Цикл
			
			ВыборкаСкладПолучатель = ВыборкаСкладОтправитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСкладПолучатель.Следующий() Цикл
				
				Выборка = ВыборкаСкладПолучатель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				СоздатьЗаказыНаПеремещениеДляСогласованияНаОсновании(Выборка, МассивНовыхДокументов);
				
			КонецЦикла;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОшибкаВТранзакции = Истина;
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать документы по причине %1'"), ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Если ОшибкаВТранзакции = Ложь Тогда
		Для Каждого НовыйДокументСсылка Из МассивНовыхДокументов Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан документ %1'"), НовыйДокументСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, НовыйДокументСсылка);
		КонецЦикла;
		
		ЭтотОбъект["ПозицииДляПеремещения"].Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказыНаПеремещениеДляСогласованияНаОсновании(ВыборкаДокументОснование, МассивНовыхДокументов)
	
	//++ Проф-ИТ, #349, Соловьев А.А., 15.11.2023
	ЦентральныйСкладБилибино = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", 
		"ЦентральныйСкладБилибино");
	//-- Проф-ИТ, #349, Соловьев А.А., 15.11.2023
	
	Пока ВыборкаДокументОснование.Следующий() Цикл
		
		НовыйДокумент = Документы.проф_ЗаказНаПеремещение.СоздатьДокумент();
		НовыйДокумент.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДокументОснование);

		//++ Проф-ИТ, #349, Соловьев А.А., 15.11.2023
		Если НовыйДокумент.СкладОтправитель = ЦентральныйСкладБилибино И ЗначениеЗаполнено(НовыйДокумент.ДокументОснование) Тогда
			НовыйДокумент.СтатусСогласованияЗаказа = Перечисления.торо_СтатусыУтвержденияЗаказовНаВП.Утвержден;
		КонецЕсли;
		НовыйДокумент.СпособДоставки = Перечисления.проф_СпособДоставки.Самовывоз;
		//-- Проф-ИТ, #349, Соловьев А.А., 15.11.2023
		НовыйДокумент.Назначение = ВыборкаДокументОснование.проф_Назначение;
		НовыйДокумент.торо_СозданПоПотребности = Истина;
		
		ВыборкаДетальныеЗаписи = ВыборкаДокументОснование.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = НовыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		МассивНовыхДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналогиНаКлиенте(ТекущиеДанные)
	
	Если ТекущиеДанные.Доступно <= 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет доступного к перемещению количества'"));
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры = Элементы.ДанныеДерево.ТекущиеДанные;
	
	СтрокаДанныеНоменклатуры = Неопределено;
	
	Если ГруппировкаДанных = 1 И ДанныеНоменклатуры.ЭтоНоменклатура Тогда
		СтрокаДанныеНоменклатуры = ДанныеНоменклатуры.ПолучитьРодителя();
	ИначеЕсли ГруппировкаДанных = 0 И ДанныеНоменклатуры.ЭтоЗаказ Тогда
		СтрокаДанныеНоменклатуры = ДанныеНоменклатуры;
	КонецЕсли;
	
	Если СтрокаДанныеНоменклатуры = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'Выберите заказ для замены номенклатуры на аналог'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДокументОснование = СтрокаДанныеНоменклатуры.Данные;
	КоличествоКЗамене = ДанныеНоменклатуры.ОсталосьОбеспечить;
	
	Если КоличествоКЗамене <= 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Нет количества для обеспечения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Номенклатура", 		ДанныеНоменклатуры.Номенклатура);
	СтруктураДанных.Вставить("НоменклатураАналог",	ТекущиеДанные.Аналог);
	СтруктураДанных.Вставить("Доступно",			ТекущиеДанные.Доступно);
	СтруктураДанных.Вставить("КоличествоКЗамене",	КоличествоКЗамене);
	СтруктураДанных.Вставить("КодСтроки",			ДанныеНоменклатуры.КодСтроки);
	СтруктураДанных.Вставить("Заказ",				ДокументОснование);
	СтруктураДанных.Вставить("Разрешение",			ТекущиеДанные.Разрешение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьАналогиНаКлиентеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.торо_РабочееМестоСпециалистаОбеспечения.Форма.проф_ФормаЗаменаАналогом", 
				СтруктураДанных,
				ЭтаФорма,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
&Вместо("ВыбратьСкладПолучательЗавершение")
Процедура проф_ВыбратьСкладПолучательЗавершение(Результат, ДополнительныеПараметры)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеДерево = Элементы.ДанныеДерево.ТекущиеДанные;
	СтруктураТекущиеДанные = Новый Структура("Номенклатура, Характеристика, Назначение, ДокументОснование");
	ЗаполнитьЗначенияСвойств(СтруктураТекущиеДанные, ТекущиеДанныеДерево);
	
	Если ГруппировкаДанных = 1 И ТекущиеДанныеДерево.ЭтоНоменклатура Тогда
		СтруктураТекущиеДанные.ДокументОснование = ТекущиеДанныеДерево.ПолучитьРодителя().Данные;
	Иначе
		СтруктураТекущиеДанные.ДокументОснование = ТекущиеДанныеДерево.Данные;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураТекущиеДанные.ДокументОснование) Тогда 
		ТекстСообщения = НСтр("ru = 'Выберите заказ для перемещения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокиВТаблицуДляПеремещения(Результат, СтруктураТекущиеДанные);
	
КонецПроцедуры

&НаСервере
&Вместо("ОбновитьДанныеПослеИзмененияРезервов")
Процедура проф_ОбновитьДанныеПослеИзмененияРезервов(ТоварыСИзмененнымРезервом)
	
	Если ТоварыСИзмененнымРезервом.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ГруппировкаДанных = 0 Тогда
		
		СтруктураОтбораДляНоменклатуры = Новый Структура("Номенклатура, Характеристика");
		СтруктураОтбораДляСклада = Новый Структура("Номенклатура, Характеристика, Склад");
		СтруктураОтбораПоЗаказу = Новый Структура("Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление");
		
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Номенклатура, Характеристика");
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Номенклатура, Характеристика, Склад");
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление");
		
		СтрокиНоменклатур = ДанныеДерево.ПолучитьЭлементы();
		Для Каждого СтрокаНоменклатура Из СтрокиНоменклатур Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораДляНоменклатуры, СтрокаНоменклатура);
			
			ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляНоменклатуры);
			ИзмененоРезерваПоНоменклатуре = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
			
			Если ИзмененоРезерваПоНоменклатуре = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			проф_ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаНоменклатура, ИзмененоРезерваПоНоменклатуре);
			
			СтрокиСкладов = СтрокаНоменклатура.ПолучитьЭлементы();
			Для Каждого СтрокаСклад Из СтрокиСкладов Цикл 
				
				ЗаполнитьЗначенияСвойств(СтруктураОтбораДляСклада, СтрокаСклад);
				СтруктураОтбораДляСклада.Склад = СтрокаСклад.Данные;	
				
				ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляСклада);
				ИзмененоРезерваПоСкладу = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
				
				Если ИзмененоРезерваПоСкладу = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				проф_ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаСклад, ИзмененоРезерваПоСкладу);
				
				СтрокиЗаказов = СтрокаСклад.ПолучитьЭлементы();
				Для Каждого СтрокаЗаказ Из СтрокиЗаказов Цикл 
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДляНоменклатуры, СтрокаСклад);
					ЗаполнитьЗначенияСвойств(СтруктураОтбораПоЗаказу, СтрокаСклад);
					СтруктураОтбораПоЗаказу.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;
					
					ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораПоЗаказу);
					ИзмененоРезерваПоНоменклатуре = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
					
					Если ИзмененоРезерваПоНоменклатуре <> 0 Тогда
						СтрокаЗаказ.Резерв = СтрокаЗаказ.Резерв + ИзмененоРезерваПоНоменклатуре;
						СтрокаЗаказ.ОсталосьОбеспечить = СтрокаЗаказ.ОсталосьОбеспечить - ИзмененоРезерваПоНоменклатуре;
					КонецЕсли;
					
					ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляНоменклатуры);
					ИзмененоРезерваПоЗаказу = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
					
					Если ИзмененоРезерваПоЗаказу <> 0 Тогда
						проф_ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаЗаказ, 
							ИзмененоРезерваПоЗаказу, Истина, ТоварыСИзмененнымРезервомПоОтбору[0].ЕстьСвязанныеДокументы);	
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ГруппировкаДанных = 1 Тогда

		СтруктураОтбораДляСклада = Новый Структура("Склад");
		СтруктураОтбораДляЗаказа = Новый Структура("ЗаказНаВнутреннееПотребление");
		СтруктураОтбораДляНоменклатуры = Новый Структура("Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление"); 
		
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Склад");
		ТоварыСИзмененнымРезервом.Индексы.Добавить("ЗаказНаВнутреннееПотребление");
		ТоварыСИзмененнымРезервом.Индексы.Добавить("Номенклатура, Характеристика, ЗаказНаВнутреннееПотребление");
		
		СтрокиСкладов = ДанныеДерево.ПолучитьЭлементы();
		Для Каждого СтрокаСклад Из СтрокиСкладов Цикл
			
			СтруктураОтбораДляСклада.Склад = СтрокаСклад.Данные;
			
			ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляСклада);
			ИзмененоРезерваПоСкладу = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
			
			Если ИзмененоРезерваПоСкладу = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиЗаказов = СтрокаСклад.ПолучитьЭлементы();
			Для Каждого СтрокаЗаказ Из СтрокиЗаказов Цикл
				
				СтруктураОтбораДляЗаказа.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;
				
				ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляЗаказа);
				ИзмененоРезерваПоЗаказу = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
				
				Если ИзмененоРезерваПоЗаказу = 0 Тогда
					Продолжить; 
				КонецЕсли;
				
				проф_ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаЗаказ, 
					ИзмененоРезерваПоЗаказу, Истина, ТоварыСИзмененнымРезервомПоОтбору[0].ЕстьСвязанныеДокументы);
				
				СтрокиНоменклатур = СтрокаЗаказ.ПолучитьЭлементы();
				Для Каждого СтрокаНоменклатура Из СтрокиНоменклатур Цикл 
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДляНоменклатуры, СтрокаНоменклатура);
					СтруктураОтбораДляНоменклатуры.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;
					
					ТоварыСИзмененнымРезервомПоОтбору = ТоварыСИзмененнымРезервом.НайтиСтроки(СтруктураОтбораДляНоменклатуры);
					ИзмененоРезерваПоНоменклатуре = ИтогПоМассивуСтрокТаблицыЗначений(ТоварыСИзмененнымРезервомПоОтбору, "Количество");
					
					Если ИзмененоРезерваПоНоменклатуре = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаНоменклатура.Резерв = СтрокаНоменклатура.Резерв + ИзмененоРезерваПоНоменклатуре;
					СтрокаНоменклатура.ОсталосьОбеспечить = СтрокаНоменклатура.ОсталосьОбеспечить - ИзмененоРезерваПоНоменклатуре;
					проф_ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаНоменклатура, 
						ИзмененоРезерваПоНоменклатуре,, ТоварыСИзмененнымРезервомПоОтбору[0].ЕстьСвязанныеДокументы);
					
					// Уменьшим свободный остаток по этой номенклатуре в соседних по ветке заказах.
					Для Каждого СтрокаСоседнийЗаказ Из СтрокиЗаказов Цикл
						Если СтрокаСоседнийЗаказ = СтрокаЗаказ Тогда
							Продолжить;
						КонецЕсли;
						
						проф_ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаСоседнийЗаказ, 
							ИзмененоРезерваПоЗаказу, Истина, ТоварыСИзмененнымРезервомПоОтбору[0].ЕстьСвязанныеДокументы);
						
						СтрокиСоседнихНоменклатур = СтрокаСоседнийЗаказ.ПолучитьЭлементы();
						Для Каждого СтрокаСоседняяНоменклатура Из СтрокиСоседнихНоменклатур Цикл
							Если Не (СтрокаСоседняяНоменклатура.Номенклатура = СтрокаНоменклатура.Номенклатура
								И СтрокаСоседняяНоменклатура.Характеристика = СтрокаНоменклатура.Характеристика) Тогда
								Продолжить;
							КонецЕсли;
							
							проф_ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаСоседняяНоменклатура, ИзмененоРезерваПоНоменклатуре);
							СтрокаСоседняяНоменклатура.СвободныйОстаток = СтрокаСоседняяНоменклатура.СвободныйОстаток - ИзмененоРезерваПоНоменклатуре;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьЗависимыеПоказателиДанныеДерево();
	
	ОбновитьОбеспечениеВДеревеРемонтов();
	
КонецПроцедуры

&НаСервере
Процедура проф_ЗаполнитьОсновныеДанныеСтрокиПослеИзмененияРезерва(СтрокаДанныеДерево, ЗарезервированоПоСтроке, ИсключитьОстаток = Ложь, ЕстьСвязанныеДокументы = Неопределено)
	
	СтрокаДанныеДерево.Доступно = СтрокаДанныеДерево.Доступно - ЗарезервированоПоСтроке;
	СтрокаДанныеДерево.РекомендованоКРезерву = Мин(СтрокаДанныеДерево.Доступно, СтрокаДанныеДерево.ОсталосьОбеспечить);
	Если ГруппировкаДанных = 0 И СтрокаДанныеДерево.ЭтоЗаказ Или ГруппировкаДанных = 1 И СтрокаДанныеДерево.ЭтоНоменклатура Тогда 
		СтрокаДанныеДерево.проф_СоздатьРезерв = (СтрокаДанныеДерево.РекомендованоКРезерву > 0);
	КонецЕсли;
	
	Если Не ИсключитьОстаток Тогда
		СтрокаДанныеДерево.СвободныйОстаток = СтрокаДанныеДерево.СвободныйОстаток - ЗарезервированоПоСтроке;
	КонецЕсли;
	
	Если ЕстьСвязанныеДокументы <> Неопределено Тогда
		СтрокаДанныеДерево.ЕстьСвязанныеДокументы = ЕстьСвязанныеДокументы;
	КонецЕсли;
	
КонецПроцедуры

//-- Проф-ИТ, #295, Соловьев А.А., 09.10.2023

//++ Проф-ИТ, #294, Соловьев А.А., 24.10.2023

&НаСервере
&Вместо("СоздатьДокументыОтменыРезервирования")
Функция проф_СоздатьДокументыОтменыРезервирования(ТоварыКОтменеРезерва)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Склад КАК Склад,
	|	Товары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗаказНаВП.Ссылка КАК ЗаказНаВнутреннееПотребление,
	|	торо_РезервыНаСкладахОстатки.Склад КАК Склад,
	|	ДокументЗаказНаВП.Организация КАК Организация,
	|	ДокументЗаказНаВП.Подразделение КАК Подразделение,
	|	ДокументЗаказНаВП.проф_Назначение КАК проф_НазначениеИсходное,
	|	ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка) КАК проф_Назначение,
	|	торо_РезервыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Серия КАК Серия,
	|	торо_РезервыНаСкладахОстатки.ДокументРезерв КАК ДокументРезерв,
	|	-торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	|	-торо_РезервыНаСкладахОстатки.КоличествоОстаток КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.торо_РезервыНаСкладах.Остатки(
	|			,
	|			(ЗаказНаВнутреннееПотребление, Склад, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					втТовары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|					втТовары.Склад КАК Склад,
	|					втТовары.Номенклатура КАК Номенклатура,
	|					втТовары.Характеристика КАК Характеристика
	|				ИЗ
	|					втТовары КАК втТовары)) КАК торо_РезервыНаСкладахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК ДокументЗаказНаВП
	|		ПО торо_РезервыНаСкладахОстатки.ЗаказНаВнутреннееПотребление = ДокументЗаказНаВП.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Склад)
	|ПО
	|	ЗаказНаВнутреннееПотребление";
	
	Запрос.УстановитьПараметр("Товары", ТоварыКОтменеРезерва);
	
	Если ИспользоватьХарактеристики Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "торо_РезервыНаСкладахОстатки.Характеристика");
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()); 
	КонецЕсли;
	Если ИспользоватьСерии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Серия", "торо_РезервыНаСкладахОстатки.Серия");
	Иначе
		Запрос.УстановитьПараметр("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка()); 
	КонецЕсли;
	
	СтруктураОтбораТоваров = Новый Структура("ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика");
	ТоварыКОтменеРезерва.Индексы.Добавить("ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоЗаказам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаказам.Следующий() Цикл
		
		ДокументОбъект = Документы.торо_РезервПодВнутреннийЗаказ.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаПоЗаказам); 
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокументОбъект.ОтменаРезерва = Истина;
		
		ВыборкаПоТоварам = ВыборкаПоЗаказам.Выбрать();
		Пока ВыборкаПоТоварам.Следующий() Цикл 
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось отменить резервирование для ""%1"". Подробнее в журнале регистрации.'"), 
			ВыборкаПоЗаказам.ЗаказНаВнутреннееПотребление));
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка проведения при отмене резервирования из рабочего места специалиста по обеспечению.'"),
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Продолжить;
		КонецПопытки;
		
		ВыборкаПоТоварам.Сбросить();
		Пока ВыборкаПоТоварам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбораТоваров, ВыборкаПоТоварам);
			ТоварыКРезервуПоОтбору = ТоварыКОтменеРезерва.НайтиСтроки(СтруктураОтбораТоваров);
			
			СтрокаТовараПоОтбору = ТоварыКРезервуПоОтбору[0];
			СтрокаТовараПоОтбору.Количество = СтрокаТовараПоОтбору.Количество + ВыборкаПоТоварам.Количество;
			СтрокаТовараПоОтбору.ДействиеВыполнено = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПолучитьТоварыСИзменнымРезервом(ТоварыКОтменеРезерва);
	
КонецФункции

&НаСервере
&Вместо("СоздатьДокументыРезервирования")
Функция проф_СоздатьДокументыРезервирования(ТоварыКРезерву, ВыводитьСообщенияОЗарезервированныхПозициях)
	
	Запрос = Новый Запрос;
	Если ИспользоватьСерии Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Организация КАК Организация,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Склад КАК Склад,
	|	Товары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Доступно
	|ПОМЕСТИТЬ втДанныеРегистраТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.проф_ТоварыНаСкладах.Остатки(
	|			&ТекущаяДата,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					втТовары.Номенклатура КАК Номенклатура,
	|					втТовары.Характеристика КАК Характеристика,
	|					втТовары.Склад КАК Склад
	|				ИЗ
	|					втТовары КАК втТовары)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТовары.Организация КАК Организация,
	|	втТовары.Подразделение КАК Подразделение,
	|	втТовары.Склад КАК Склад,
	|	втТовары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Назначение КАК Назначение,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Количество КАК Количество,
	|	ТоварыНаСкладахОстатки.Доступно КАК Доступно,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ втТоварыДоступность
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеРегистраТоварыНаСкладах КАК ТоварыНаСкладахОстатки
	|		ПО (ТоварыНаСкладахОстатки.Номенклатура = втТовары.Номенклатура)
	|			И (ТоварыНаСкладахОстатки.Характеристика = втТовары.Характеристика)
	|			И (ТоварыНаСкладахОстатки.Склад = втТовары.Склад)
	|			И (ТоварыНаСкладахОстатки.Назначение = втТовары.Назначение)
	|			И (ТоварыНаСкладахОстатки.Доступно > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТовары.Организация,
	|	втТовары.Подразделение,
	|	втТовары.Склад,
	|	втТовары.ЗаказНаВнутреннееПотребление,
	|	втТовары.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка),
	|	втТовары.Характеристика,
	|	втТовары.Количество,
	|	ТоварыНаСкладахОстатки.Доступно,
	|	2
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеРегистраТоварыНаСкладах КАК ТоварыНаСкладахОстатки
	|		ПО (ТоварыНаСкладахОстатки.Номенклатура = втТовары.Номенклатура)
	|			И (ТоварыНаСкладахОстатки.Характеристика = втТовары.Характеристика)
	|			И (ТоварыНаСкладахОстатки.Склад = втТовары.Склад)
	|			И (ТоварыНаСкладахОстатки.Назначение <> втТовары.Назначение)
	|			И (ТоварыНаСкладахОстатки.Назначение = ЗНАЧЕНИЕ(Справочник.проф_Назначения.ПустаяСсылка))
	|			И (ТоварыНаСкладахОстатки.Доступно > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТовары.Организация,
	|	втТовары.Подразделение,
	|	втТовары.Склад,
	|	втТовары.ЗаказНаВнутреннееПотребление,
	|	втТовары.Номенклатура,
	|	ТоварыНаСкладахОстатки.Назначение,
	|	втТовары.Характеристика,
	|	втТовары.Количество,
	|	ТоварыНаСкладахОстатки.Доступно,
	|	3
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеРегистраТоварыНаСкладах КАК ТоварыНаСкладахОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|			ПО ТоварыНаСкладахОстатки.Назначение = проф_Назначения.Ссылка
	|				И (проф_Назначения.Подразделение В (&ПодразделенияСлужбыТОИР))
	|		ПО (ТоварыНаСкладахОстатки.Номенклатура = втТовары.Номенклатура)
	|			И (ТоварыНаСкладахОстатки.Характеристика = втТовары.Характеристика)
	|			И (ТоварыНаСкладахОстатки.Склад = втТовары.Склад)
	|			И (ТоварыНаСкладахОстатки.Назначение <> втТовары.Назначение)
	|			И (ТоварыНаСкладахОстатки.Доступно > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыДоступность.Организация КАК Организация,
	|	втТоварыДоступность.Подразделение КАК Подразделение,
	|	втТоварыДоступность.Склад КАК Склад,
	|	втТоварыДоступность.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	втТоварыДоступность.Номенклатура КАК Номенклатура,
	|	втТоварыДоступность.Назначение КАК проф_НазначениеИсходное,
	|	ДокументЗаказНаВнутреннееПотребление.проф_Назначение КАК проф_Назначение,
	|	втТоварыДоступность.Характеристика КАК Характеристика,
	|	МАКСИМУМ(втТоварыДоступность.Количество) КАК Количество,
	|	СУММА(втТоварыДоступность.Доступно) КАК Доступно,
	|	втТоварыДоступность.Приоритет КАК Приоритет
	|ИЗ
	|	втТоварыДоступность КАК втТоварыДоступность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК ДокументЗаказНаВнутреннееПотребление
	|		ПО втТоварыДоступность.ЗаказНаВнутреннееПотребление = ДокументЗаказНаВнутреннееПотребление.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварыДоступность.Склад,
	|	втТоварыДоступность.ЗаказНаВнутреннееПотребление,
	|	втТоварыДоступность.Назначение,
	|	втТоварыДоступность.Характеристика,
	|	втТоварыДоступность.Номенклатура,
	|	втТоварыДоступность.Подразделение,
	|	втТоварыДоступность.Организация,
	|	втТоварыДоступность.Приоритет,
	|	ДокументЗаказНаВнутреннееПотребление.проф_Назначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	втТоварыДоступность.Назначение
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(Количество),
	|	МИНИМУМ(Приоритет)
	|ПО
	|	ЗаказНаВнутреннееПотребление,
	|	проф_НазначениеИсходное
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Товары", ТоварыКРезерву);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПодразделенияСлужбыТОИР", ЭтотОбъект["ПодразделенияСлужбыТОИР"]);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураОтбораТоваров = Новый Структура("ЗаказНаВнутреннееПотребление");
	ТоварыКРезерву.Индексы.Добавить("ЗаказНаВнутреннееПотребление");
	
	ВыборкаПоЗаказам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаказам.Следующий() Цикл
		
		КоличествоДляРаспределения = ВыборкаПоЗаказам.Количество;
		
		ДокументОбъект = Документы.торо_РезервПодВнутреннийЗаказ.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаПоЗаказам);
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ВыборкаПоНазначениям = ВыборкаПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНазначениям.Следующий() Цикл
			
			ВыборкаПоТоварам = ВыборкаПоНазначениям.Выбрать();
			Пока ВыборкаПоТоварам.Следующий() Цикл
				
				Если КоличествоДляРаспределения = 0 Тогда 
					Прервать;
				КонецЕсли;
				
				НоваяСтрока = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "Номенклатура, Характеристика, проф_Назначение, проф_НазначениеИсходное");
				КоличествоРаспределено = Мин(ВыборкаПоТоварам.Доступно, КоличествоДляРаспределения);
				НоваяСтрока.КоличествоУпаковок = КоличествоРаспределено;
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
				КоличествоДляРаспределения = КоличествоДляРаспределения - КоличествоРаспределено;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДокументОбъект.Товары.Количество() > 0 Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'Не удалось зарезервировать товар под ""%1"". Подробнее в журнале регистрации.'"), 
					ВыборкаПоЗаказам.ЗаказНаВнутреннееПотребление));
					
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка проведения при попытке резервирования из рабочего места специалиста по обеспечению.'"),
						УровеньЖурналаРегистрации.Ошибка,
						ДокументОбъект,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
				Продолжить;
			КонецПопытки;
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораТоваров, ВыборкаПоЗаказам);
			ТоварыКРезервуПоОтбору = ТоварыКРезерву.НайтиСтроки(СтруктураОтбораТоваров);
			Для Каждого ТоварКРезерву Из ТоварыКРезервуПоОтбору Цикл 
				
				Если ВыводитьСообщенияОЗарезервированныхПозициях Тогда 
					Если ИспользоватьХарактеристики И ЗначениеЗаполнено(ТоварКРезерву.Характеристика) Тогда
						ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
							НСтр("ru = 'Зарезервировано %1 ед. номенклатуры %2 [%3] на складе ""%4"" под ""%5"".'"), 
							ТоварКРезерву.Количество, ТоварКРезерву.Номенклатура, ТоварКРезерву.Характеристика,
							ТоварКРезерву.Склад, ТоварКРезерву.ЗаказНаВнутреннееПотребление));
					Иначе
						ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
							НСтр("ru = 'Зарезервировано %1 ед. номенклатуры %2 на складе ""%3"" под ""%4"".'"), 
							ТоварКРезерву.Количество, ТоварКРезерву.Номенклатура,
							ТоварКРезерву.Склад, ТоварКРезерву.ЗаказНаВнутреннееПотребление))
					КонецЕсли;
				КонецЕсли;
				
				ТоварКРезерву.ДействиеВыполнено = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолучитьТоварыСИзменнымРезервом(ТоварыКРезерву);
	
КонецФункции

//-- Проф-ИТ, #294, Соловьев А.А., 24.10.2023

&НаСервере
&ИзменениеИКонтроль("ДобавитьСтрокуТовараКИзменениюРезерва")
Процедура проф_ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаЗаказ, СтрокаНоменклатура, ОтменаРезервирования, ИмяКоличестваРезерва)

	НовыйТовар = Товары.Добавить();
	НовыйТовар.Склад = СтрокаСклад.Данные;
	НовыйТовар.ЗаказНаВнутреннееПотребление = СтрокаЗаказ.Данные;
	#Вставка
	//++ Проф-ИТ, #294, Соловьев А.А., 24.10.2023
	НовыйТовар.Назначение = СтрокаЗаказ.Назначение;
	//-- Проф-ИТ, #294, Соловьев А.А., 24.10.2023
	#КонецВставки

	Если ГруппировкаДанных = 0 Тогда
		СтрокаСКоличеством = СтрокаЗаказ;	
	ИначеЕсли ГруппировкаДанных = 1 Тогда 
		СтрокаСКоличеством = СтрокаНоменклатура;
	КонецЕсли;	

	НовыйТовар.Номенклатура = СтрокаСКоличеством.Номенклатура;
	НовыйТовар.Характеристика = СтрокаСКоличеством.Характеристика;

	Если Не ОтменаРезервирования Тогда	
		НовыйТовар.Количество = СтрокаСКоличеством[ИмяКоличестваРезерва]; 
		НовыйТовар.Организация = СтрокаЗаказ.Организация;
		НовыйТовар.Подразделение =  СтрокаЗаказ.Подразделение;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ТоварыКИзменениюРезерва")
Функция проф_ТоварыКИзменениюРезерва(СтрокаДерева, ОтменаРезервирования)

	Товары = Новый ТаблицаЗначений;

	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("ЗаказНаВнутреннееПотребление", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление"));	
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("ДействиеВыполнено", Новый ОписаниеТипов("Булево"));
	#Вставка
	//++ Проф-ИТ, #294, Соловьев А.А., 24.10.2023
	Товары.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.проф_Назначения"));
	//-- Проф-ИТ, #294, Соловьев А.А., 24.10.2023
	#КонецВставки

	Если ОтменаРезервирования Тогда
		ИмяКоличестваРезерва = "Резерв";
	Иначе
		ИмяКоличестваРезерва = "РекомендованоКРезерву";
		Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
		Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;

	Если ГруппировкаДанных = 0 Тогда

		Если СтрокаДерева.ЭтоНоменклатура Тогда

			СтрокиСкладов = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаСклад Из СтрокиСкладов Цикл

				Если СтрокаСклад[ИмяКоличестваРезерва] = 0 Тогда
					Продолжить;
				КонецЕсли;	

				СтрокиЗаказов = СтрокаСклад.ПолучитьЭлементы();
				Для Каждого СтрокаЗаказ Из СтрокиЗаказов Цикл
					Если СтрокаЗаказ[ИмяКоличестваРезерва] = 0 Тогда
						Продолжить;
					КонецЕсли;	

					ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаЗаказ,, ОтменаРезервирования, ИмяКоличестваРезерва);	
				КонецЦикла;	
			КонецЦикла;	

		ИначеЕсли СтрокаДерева.ЭтоСклад Тогда

			СтрокиЗаказов = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаЗаказ Из СтрокиЗаказов Цикл
				Если СтрокаЗаказ[ИмяКоличестваРезерва] = 0 Тогда
					Продолжить;
				КонецЕсли;	

				ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаДерева, СтрокаЗаказ,, ОтменаРезервирования, ИмяКоличестваРезерва);		
			КонецЦикла;		

		ИначеЕсли СтрокаДерева.ЭтоЗаказ Тогда

			СтрокаСклад = СтрокаДерева.ПолучитьРодителя();

			ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаДерева,, ОтменаРезервирования, ИмяКоличестваРезерва);
		КонецЕсли;	

	ИначеЕсли ГруппировкаДанных = 1 Тогда

		Если СтрокаДерева.ЭтоНоменклатура Тогда

			СтрокаЗаказ = СтрокаДерева.ПолучитьРодителя();
			СтрокаСклад = СтрокаЗаказ.ПолучитьРодителя();

			ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаЗаказ, СтрокаДерева, ОтменаРезервирования, ИмяКоличестваРезерва);

		ИначеЕсли СтрокаДерева.ЭтоЗаказ Тогда

			СтрокиНоменклатур = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаНоменклатура Из СтрокиНоменклатур Цикл
				Если СтрокаНоменклатура[ИмяКоличестваРезерва] = 0 Тогда
					Продолжить;
				КонецЕсли;

				СтрокаСклад = СтрокаДерева.ПолучитьРодителя();

				ДобавитьСтрокуТовараКИзменениюРезерва(Товары, СтрокаСклад, СтрокаДерева, СтрокаНоменклатура, ОтменаРезервирования, ИмяКоличестваРезерва);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;

	Возврат Товары;

КонецФункции

&НаСервере
&ИзменениеИКонтроль("ОтменитьЗаказыНаВНутреннееПотребление")
Функция проф_ОтменитьЗаказыНаВНутреннееПотребление(СтрокаДерева)

	#Вставка
	//++ Проф-ИТ, #424, Соловьев А.А., 17.01.2024
	ПричинаОтмены = Неопределено;
	
	Если ТипЗнч(СтрокаДерева) = Тип("Структура") Тогда 
		
		ПричинаОтмены = СтрокаДерева.ПричинаОтмены;
		СтрокаДерева = ДанныеДерево.НайтиПоИдентификатору(СтрокаДерева.ИдентификаторСтрокиДерева);
		
	КонецЕсли;
	//-- Проф-ИТ, #424, Соловьев А.А., 17.01.2024
	#КонецВставки
	
	ОтменитьЗаказПолностью = Ложь;
	Если ГруппировкаДанных = 0 Тогда

		ЗаказНаВнутреннееПотребление = СтрокаДерева.Данные;
		Номенклатура = СтрокаДерева.Номенклатура;
		Характеристика = СтрокаДерева.Характеристика;

	ИначеЕсли ГруппировкаДанных = 1 Тогда

		Если СтрокаДерева.ЭтоЗаказ Тогда

			ЗаказНаВнутреннееПотребление = СтрокаДерева.Данные;
			ОтменитьЗаказПолностью = Истина;   

		ИначеЕсли СтрокаДерева.ЭтоНоменклатура Тогда

			ЗаказНаВнутреннееПотребление = СтрокаДерева.ПолучитьРодителя().Данные;
			Номенклатура = СтрокаДерева.Номенклатура;
			Характеристика = СтрокаДерева.Характеристика;
		КонецЕсли;
	КонецЕсли;	

	ДокументОбъект = ЗаказНаВнутреннееПотребление.ПолучитьОбъект();
	Если ОтменитьЗаказПолностью Тогда
		ТоварыКОтмене = ДокументОбъект.Товары;
	Иначе 
		ОтборПоТовару = Новый Структура;
		ОтборПоТовару.Вставить("Номенклатура", Номенклатура);
		ОтборПоТовару.Вставить("Характеристика", Характеристика); 

		ТоварыКОтмене = ДокументОбъект.Товары.НайтиСтроки(ОтборПоТовару);
	КонецЕсли; 

	#Вставка
	//++ Проф-ИТ, #424, Соловьев А.А., 17.01.2024
	Отменил = ПараметрыСеанса.ТекущийПользователь;
	//-- Проф-ИТ, #424, Соловьев А.А., 17.01.2024
	#КонецВставки
	Для Каждого Товар Из ТоварыКОтмене Цикл
		Товар.Отменено = Истина;
		#Вставка
		//++ Проф-ИТ, #424, Соловьев А.А., 17.01.2024
		Если ЗначениеЗаполнено(ПричинаОтмены) Тогда 
			Товар.проф_ПричинаОтмены = ПричинаОтмены;
			Товар.проф_Отменил = Отменил;
		КонецЕсли;
		//-- Проф-ИТ, #424, Соловьев А.А., 17.01.2024
		#КонецВставки
	КонецЦикла;

	Попытка
		#Вставка
		//++ Проф-ИТ, #228, Соловьев А.А., 25.10.2023
		ДокументОбъект.БезусловнаяЗапись = Истина;
		//-- Проф-ИТ, #228, Соловьев А.А., 25.10.2023
		#КонецВставки
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
		НСтр("ru = 'Не удалось снять потребность с ""%1"". Подробнее в журнале регистрации.'"), 
		ЗаказНаВнутреннееПотребление));

		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка проведения при попытке отмены потребности из рабочего места специалиста по обеспечению.'"),
		УровеньЖурналаРегистрации.Ошибка,
		ДокументОбъект,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;	
	КонецПопытки;  

	Возврат Истина;

КонецФункции

//++ Проф-ИТ, #372, Соловьев А.А., 24.11.2023
&НаСервере
Процедура СоздатьЗаказыНаВП(Знач ВыделенныеСтроки)
	
	ТаблицаДляПеремещения = ЭтотОбъект["ПозицииДляПеремещения"].Выгрузить();
	ТаблицаДляПеремещения.Очистить();
	
	Остатки = ОстаткиПоСкладам.Выгрузить(Новый Структура("Склад", ЭтотОбъект["СкладОтправитель"]));
	
	Для Каждого ИндексСтроки Из ВыделенныеСтроки Цикл
		СтрокаДерева = ДанныеДерево.НайтиПоИдентификатору(ИндексСтроки);
		
		Если ГруппировкаДанных = 0 Тогда
			
			Если СтрокаДерева.ЭтоЗаказ Тогда 
				ЗаполнитьСтрокуДляПеремещения(СтрокаДерева, Остатки, ТаблицаДляПеремещения, СтрокаДерева.Данные);
			КонецЕсли;
			
		Иначе
			
			Если СтрокаДерева.ЭтоЗаказ Тогда
				
				СтрокиНоменклатур = СтрокаДерева.ПолучитьЭлементы();
				Для Каждого СтрокаНоменклатура Из СтрокиНоменклатур Цикл
					ЗаполнитьСтрокуДляПеремещения(СтрокаНоменклатура, Остатки, ТаблицаДляПеремещения, СтрокаДерева.Данные);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если ТаблицаДляПеремещения.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена номенклатура для формирования заказа на перемещение'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СформироватьПеремещенияДляСогласованияНаСервере(ТаблицаДляПеремещения, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДляПеремещения(СтрокаДерева, Остатки, ТаблицаДляПеремещения, ДокументОснование)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика",
		СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика);
	ОстаткиПоСкладу = Остатки.НайтиСтроки(СтруктураПоиска);
	
	Если ОстаткиПоСкладу.Количество() = 0 Тогда 
		Возврат;
	Иначе
		ОстатокНаСкладе = ОстаткиПоСкладу[0].ОстатокНаСкладе;
	КонецЕсли;
	
	Если СтрокаДерева.ОсталосьОбеспечить > 0 И ОстатокНаСкладе > 0 Тогда 
		
		НоваяСтрока = ТаблицаДляПеремещения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.СкладОтправитель = ЭтотОбъект["СкладОтправитель"];
		НоваяСтрока.Количество = Мин(СтрокаДерева.ОсталосьОбеспечить, ОстатокНаСкладе);
		НоваяСтрока.ДокументОснование = ДокументОснование;
		
		ОстаткиПоСкладу[0].ОстатокНаСкладе = ОстаткиПоСкладу[0].ОстатокНаСкладе - НоваяСтрока.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&После("ОбновитьНаКлиенте")
Процедура проф_ОбновитьНаКлиенте()
	
	ЭтотОбъект["СтрокиЗаказовДляОбработки"].Очистить();
	ЭтотОбъект["СписокЗаказовДляОбработки"].Очистить();
	
КонецПроцедуры
//-- Проф-ИТ, #372, Соловьев А.А., 24.11.2023

//++ Проф-ИТ, #424, Соловьев А.А., 17.01.2024
&НаСервере
&Вместо("СнятьПотребность")
Процедура проф_СнятьПотребность(ИдентификаторСтрокиДерева)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПричиныОтмены(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Неопределено;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если ДополнительныеПараметры.Свойство("ТекущиеДанные", ТекущиеДанные) Тогда
			
			Если ГруппировкаДанных = 0 Тогда
				ЗаказНаВнутреннееПотребление = ТекущиеДанные.Данные;
			ИначеЕсли ГруппировкаДанных = 1 Тогда
				ЗаказНаВнутреннееПотребление = ТекущиеДанные.ПолучитьРодителя().Данные;
			КонецЕсли;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ЗаказНаВнутреннееПотребление", ЗаказНаВнутреннееПотребление);
			СтруктураДанных.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			СтруктураДанных.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			СтруктураДанных.Вставить("КОбеспечению", ТекущиеДанные.КОбеспечению);
			СтруктураДанных.Вставить("КОбеспечениюПоУмолчанию", ТекущиеДанные.КОбеспечениюПоУмолчанию);
			
			ОтменитьПотребностьЧастично(ВыбранноеЗначение, СтруктураДанных);
			
		Иначе
			проф_СнятьПотребностьНаСервере(ВыбранноеЗначение, ДополнительныеПараметры.ИдентификаторСтрокиДерева);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Свойство("ТекущиеДанные", ТекущиеДанные) Тогда 
		ТекущиеДанные.КОбеспечению = ТекущиеДанные.КОбеспечениюПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура проф_СнятьПотребностьНаСервере(ПричинаОтмены, ИдентификаторСтрокиДерева)
	
	СтруктураОтмены = Новый Структура("ПричинаОтмены, ИдентификаторСтрокиДерева", ПричинаОтмены, ИдентификаторСтрокиДерева);
	ПотребностьСнята = ОтменитьЗаказыНаВНутреннееПотребление(СтруктураОтмены);
	
	Если ПотребностьСнята Тогда
		СтрокаДерева = ДанныеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
		ОбновитьДанныеПослеСнятияПотребности(СтрокаДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПотребностьЧастично(ПричинаОтмены, СтруктураДанных)
	
	Номенклатура = СтруктураДанных.Номенклатура;
	Характеристика = СтруктураДанных.Характеристика;
	КОбеспечениюПоУмолчанию = СтруктураДанных.КОбеспечениюПоУмолчанию;
	ДокументОбъект = СтруктураДанных.ЗаказНаВнутреннееПотребление.ПолучитьОбъект();
	
	ОтборПоТовару = Новый Структура;
	ОтборПоТовару.Вставить("Номенклатура", Номенклатура);
	ОтборПоТовару.Вставить("Характеристика", Характеристика);
	ОтборПоТовару.Вставить("Количество", КОбеспечениюПоУмолчанию);
	
	Отменил = ПараметрыСеанса.ТекущийПользователь;
	
	ТоварыКОтмене = ДокументОбъект.Товары.НайтиСтроки(ОтборПоТовару);
	Для Каждого СтрокаТовары Из ТоварыКОтмене Цикл
		
		Если СтруктураДанных.КОбеспечению <> 0 Тогда
			ДокументОбъект.МаксимальныйКодСтроки = ДокументОбъект.МаксимальныйКодСтроки + 1;
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.Количество = СтруктураДанных.КОбеспечению;
			НоваяСтрока.КоличествоУпаковок = СтруктураДанных.КОбеспечению;
			НоваяСтрока.КодСтроки = ДокументОбъект.МаксимальныйКодСтроки;
			
			СтрокаТовары.Количество = СтрокаТовары.Количество - НоваяСтрока.Количество;
			СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
			
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиТоварыИсточника = ДокументОбъект.проф_ТоварыИсточника.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТоварыИсточника Из СтрокиТоварыИсточника Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаТоварыИсточника, СтрокаТовары, "Количество, КоличествоУпаковок");
				
				НоваяСтрокаТоварыИсточника = ДокументОбъект.проф_ТоварыИсточника.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыИсточника, СтрокаТоварыИсточника);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыИсточника, НоваяСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаТовары.Отменено = Истина; 
		СтрокаТовары.проф_ПричинаОтмены = ПричинаОтмены;
		СтрокаТовары.проф_Отменил = Отменил;
		
	КонецЦикла;
	
	Попытка
		ДокументОбъект.БезусловнаяЗапись = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось снять потребность с ""%1"". Подробнее в журнале регистрации.'"), 
			СтруктураДанных.ЗаказНаВнутреннееПотребление));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка проведения при попытке изменения количества потребности из рабочего места специалиста по обеспечению.'"),
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры
//-- Проф-ИТ, #424, Соловьев А.А., 17.01.2024

#КонецОбласти
