
//++ Проф-ИТ, #72, Сергеев Д., 13.10.2023

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресТовары") И Параметры.АдресТовары <> Неопределено Тогда
		СтруктураТовары = ПолучитьИзВременногоХранилища(Параметры.АдресТовары);
		ТоварыИсходные.Загрузить(СтруктураТовары.ТаблицаТовары);
		ДокументДляСогласования = СтруктураТовары.ДокументДляСогласования;
	Иначе
		Отказ = Истина;
	КонецЕсли; 
	
	ЗаполнитьСписокВыбораНазначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Запросить(Команда)
	
	ОтправитьИЗакрыть = Истина;  
	
	ПроверитьПередОтправкойНаСогласование(ОтправитьИЗакрыть); 
	Если ОтправитьИЗакрыть Тогда
		Закрыть(ПоместитьТоварыВХранилище());	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)

	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	СтруктураТовары = Новый Структура("Товары, ТоварыИсходные");
	СтруктураТовары.Товары         = Товары.Выгрузить();
	СтруктураТовары.ТоварыИсходные = ТоварыИсходные.Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураТовары, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораНазначения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад КАК Склад,
	|	Таблица.Количество КАК КоличествоИсходное
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	проф_НастройкиСистемыСписок.Значение КАК Значение
	|ПОМЕСТИТЬ ВТ_ПодразделениеИсключить
	|ИЗ
	|	Справочник.проф_НастройкиСистемы.Список КАК проф_НастройкиСистемыСписок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_НастройкиСистемы КАК проф_НастройкиСистемы
	|		ПО проф_НастройкиСистемыСписок.Ссылка = проф_НастройкиСистемы.Ссылка
	|ГДЕ
	|	проф_НастройкиСистемы.Наименование = ""ПодразделенияСлужбыТОиР""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	проф_НастройкиСистемы.Значение
	|ИЗ
	|	Справочник.проф_НастройкиСистемы КАК проф_НастройкиСистемы
	|ГДЕ
	|	проф_НастройкиСистемы.Наименование = ""ПодразделенияСлужбыТОиР""
	|;
	|
	//++ Проф-ИТ, #337, Соловьев А.А., 04.11.2023
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура КАК Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика КАК Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Назначение КАК Назначение,
	|	проф_ЗапасыИПотребностиОстатки.Склад КАК Склад,
	|	СУММА(проф_ЗапасыИПотребностиОстатки.ВНаличииОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток - проф_ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток) КАК ВНаличии
	|ПОМЕСТИТЬ втЗапасыИПотребности
	|ИЗ
	|	РегистрНакопления.проф_ЗапасыИПотребности.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ВТ_Товары.Номенклатура КАК Номенклатура,
	|					ВТ_Товары.Характеристика КАК Характеристика,
	|					ВТ_Товары.Склад КАК Склад
	|				ИЗ
	|					ВТ_Товары КАК ВТ_Товары)) КАК проф_ЗапасыИПотребностиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	проф_ЗапасыИПотребностиОстатки.Номенклатура,
	|	проф_ЗапасыИПотребностиОстатки.Характеристика,
	|	проф_ЗапасыИПотребностиОстатки.Назначение,
	|	проф_ЗапасыИПотребностиОстатки.Склад
	|;
	//-- Проф-ИТ, #337, Соловьев А.А., 04.11.2023
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Товары.НомерСтроки КАК НомерСтрокиИсточника,
	|	ЕСТЬNULL(втЗапасыИПотребности.Назначение, НЕОПРЕДЕЛЕНО) КАК Назначение,
	|	СУММА(ЕСТЬNULL(втЗапасыИПотребности.ВНаличии, 0)) КАК КоличествоОстаток,
	|	проф_Назначения.Подразделение КАК Подразделение,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Склад КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.КоличествоИсходное КАК КоличествоИсходное,
	|	проф_Назначения.ИДЗаказа КАК ИДЗаказа
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗапасыИПотребности КАК втЗапасыИПотребности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.проф_Назначения КАК проф_Назначения
	|			ПО втЗапасыИПотребности.Назначение = проф_Назначения.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодразделениеИсключить КАК ВТ_ПодразделениеИсключить
	|			ПО (проф_Назначения.Подразделение = ВТ_ПодразделениеИсключить.Значение)
	|		ПО ВТ_Товары.Номенклатура = втЗапасыИПотребности.Номенклатура
	|			И ВТ_Товары.Характеристика = втЗапасыИПотребности.Характеристика
	|			И ВТ_Товары.Склад = втЗапасыИПотребности.Склад
	|ГДЕ
	|	НЕ проф_Назначения.Заказ ССЫЛКА Документ.торо_ЗаявкаНаРемонт
	|	И ВТ_ПодразделениеИсключить.Значение ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.НомерСтроки,
	|	ЕСТЬNULL(втЗапасыИПотребности.Назначение, НЕОПРЕДЕЛЕНО),
	|	проф_Назначения.Подразделение,
	|	ВТ_Товары.Характеристика,
	|	ВТ_Товары.Склад,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.КоличествоИсходное,
	|	проф_Назначения.ИДЗаказа";
	
	Запрос.УстановитьПараметр("Таблица", ТоварыИсходные.Выгрузить(, "НомерСтроки, Номенклатура, Характеристика, Склад, Количество"));
	РезультатЗапроса = Запрос.Выполнить();  
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
	//ВыборкаНомерСтроки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Выборка = РезультатЗапроса.Выбрать();
	
	//СоответствиеНомерСтроки = Новый Соответствие;
	//Пока ВыборкаНомерСтроки.Следующий() Цикл
	//	
	//	Выборка = ВыборкаНомерСтроки.Выбрать(); 
	//	мсвНазначений = Новый Массив;
	//	Пока Выборка.Следующий() Цикл  
	//		СтруктураНазначения = Новый Структура("Назначение, Подразделение, КоличествоОстаток", Выборка.Назначение, Выборка.Подразделение, Выборка.КоличествоОстаток);
	//		мсвНазначений.Добавить(СтруктураНазначения);			
	//	КонецЦикла;
	//	СоответствиеНомерСтроки.Вставить(ВыборкаНомерСтроки.НомерСтроки, мсвНазначений); 
	//	
	//КонецЦикла;
	
	//АдресСписокВыбораНазначений = ПоместитьВоВременноеХранилище(СоответствиеНомерСтроки, УникальныйИдентификатор);
	
КонецПроцедуры // ЗаполнитьСписокВыбораНазначения()

&НаКлиенте
Процедура ПроверитьПередОтправкойНаСогласование(ОтправитьИЗакрыть)  
	
	ПолучитьТаблицуОстаков();
	
	НаименованиеШаблона = "Согласование изменения заказа";
	
	ЕстьОшибки = Ложь;
	
	Для каждого текСтрока Из ТоварыИсходные Цикл 
		ПараметрОтбора = Новый Структура("НомерСтрокиИсточника", текСтрока.НомерСтроки);
		НайденныеСтроки = Товары.НайтиСтроки(ПараметрОтбора);
		
		Если НайденныеСтроки <> Неопределено Тогда
	
			Количество = 0;
			Для каждого текЭлемент Из НайденныеСтроки Цикл
			    Количество = Количество + текЭлемент.Количество;
			КонецЦикла;
		
		КонецЕсли;
		
		Если текСтрока.Количество < Количество Тогда
			
			ТекстСообщения = Нстр("ru = 'Нельзя запросить больше, чем указано в документе по строке № %1!'"); 
			ТекстСообщения = СтрШаблон(ТекстСообщения, текСтрока.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЕстьОшибки = Истина;
		
		КонецЕсли;		
	КонецЦикла;	
  	
	СтрокиОстаткиНом = ДеревоТовары.ПолучитьЭлементы();
	Для каждого СтрОстаткиНом Из СтрокиОстаткиНом Цикл
		
		СтрокиОстаткиПодр = СтрОстаткиНом.ПолучитьЭлементы();
		Для каждого СтрОстаткиПодр Из СтрокиОстаткиПодр Цикл
			
			СтрокиИДЗаказа = СтрОстаткиПодр.ПолучитьЭлементы();
			Для каждого СтрИДЗаказа Из СтрокиИДЗаказа Цикл
				
				
				СтрокиОстатки = СтрИДЗаказа.ПолучитьЭлементы(); 
				Для каждого СтрОстатки Из СтрокиОстатки Цикл
					Если СтрОстатки.Количество < 0 Тогда
						ТекстСообщения = Нстр("ru = 'Нельзя запросить больше, чем есть в наличии по строке %1!'"); 
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрОстатки.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						ЕстьОшибки = Истина; 
					КонецЕсли;     
					
					Если СтрОстатки.Количество > СтрОстатки.КоличествоОстаток Тогда 
						ТекстСообщения = Нстр("ru = 'Строка %1 - количество к согласованию должно быть не больше остатка резерва.'"); 
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрОстатки.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						ЕстьОшибки = Истина;
					КонецЕсли; 
				КонецЦикла;
				
			КонецЦикла;
			
			
		КонецЦикла;	
	КонецЦикла;

	ОтправитьИЗакрыть = НЕ ЕстьОшибки;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтартоватьПроцесс(ТипПроцесса, ПараметрыЗапуска)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ПараметрыЗапуска.Свойство("Предмет") Тогда
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон, ПараметрыЗапуска.Предмет);
	Иначе
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон);
	КонецЕсли;
	ШаблонПроцесса.description = ПараметрыЗапуска.Описание;   
	
	НовыйПроцесс = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ШаблонПроцесса.ObjectID.type);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйПроцесс, ШаблонПроцесса);
	
	РезультатЗапуска = ИнтеграцияС1СДокументооборот.ЗапуститьБизнесПроцесс(Прокси, НовыйПроцесс);
		
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, РезультатЗапуска, "DMError") Тогда
		Возврат Ложь;
	Иначе
		ПроцессID = РезультатЗапуска.businessProcess.ObjectID.ID;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьОписаниеПредметаСогласования(ДокументДляСогласования)
	
	Если ЗначениеЗаполнено(ДокументДляСогласования) Тогда		
		возврат "Заказ на ВПТ "+ДокументДляСогласования.Номер + " от "+ДокументДляСогласования.Дата+"/"+ДокументДляСогласования.Подразделение;
	иначе		
		возврат "";		
	КонецЕсли; 
	
	////"Заказ на ВПТ  
КонецФункции


&НаКлиенте
Процедура ТоварыНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СоответствиеНомерСтроки = ПолучитьИзВременногоХранилища(АдресСписокВыбораНазначений);
	НомерСтроки = Элементы.Товары.ТекущаяСтрока + 1;
	мсвНазначения = СоответствиеНомерСтроки.Получить(НомерСтроки);  
	
	Элемент.СписокВыбора.Очистить();
	Если мсвНазначения <> Неопределено Тогда
		Для каждого текЭлемент Из мсвНазначения Цикл
			Элемент.СписокВыбора.Добавить(текЭлемент.Назначение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СоответствиеНомерСтроки = ПолучитьИзВременногоХранилища(АдресСписокВыбораНазначений);
		НомерСтроки = Элементы.Товары.ТекущаяСтрока + 1;
		мсвНазначения = СоответствиеНомерСтроки.Получить(НомерСтроки); 
		
		текСтрока = Товары[Элементы.Товары.ТекущаяСтрока];
		Для каждого текЭлемент Из мсвНазначения Цикл 
			Если текЭлемент.Назначение = ВыбранноеЗначение Тогда
			    текСтрока.КоличествоОстаток = текЭлемент.КоличествоОстаток; 
				текСтрока.Подразделение     = текЭлемент.Подразделение;
			КонецЕсли;
			Элемент.СписокВыбора.Добавить(текЭлемент.Назначение);
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуОстаков() 
	
	мсвГруппировкиКолонок = Новый Массив;
	мсвГруппировкиКолонок.Добавить("Подразделение");
	мсвГруппировкиКолонок.Добавить("Номенклатура");
	мсвГруппировкиКолонок.Добавить("ИДЗаказа");
	
	текДеревоОстатки = ТаблицаЗначенийВДеревоЗначений(Товары.Выгрузить(), мсвГруппировкиКолонок);
	
	ЗначениеВРеквизитФормы(текДеревоОстатки, "ДеревоТовары");
	
КонецПроцедуры // ПолучитьТаблицуОстаков()

&НаСервере
Функция ТаблицаЗначенийВДеревоЗначений(ТаблЗначений, мсвГруппировкиКолонок)
	
	ПострЗапроса             		= Новый ПостроительЗапроса;
	ПострЗапроса.ИсточникДанных             = Новый ОписаниеИсточникаДанных(ТаблЗначений);
	
	ПострЗапроса.ДобавлениеПредставлений 	= ТипДобавленияПредставлений.НеДобавлять; 
	Для каждого текЭлемент Из мсвГруппировкиКолонок Цикл
	    ПострЗапроса.ИсточникДанных.Колонки[текЭлемент].Измерение = Истина;
	КонецЦикла;
	
	ПострЗапроса.ЗаполнитьНастройки();
	ПострЗапроса.Выполнить();
	
	ДеревоЗн = ПострЗапроса.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ДеревоЗн;

КонецФункции

&НаСервере
Функция ПолучитьЕдиницуИзмерения(Номенклатура)            
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
	
		 ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		 
	КонецЕсли;
	
    Возврат ЕдиницаИзмерения;
	
КонецФункции // ()

#КонецОбласти

//-- Проф-ИТ, #72, Сергеев Д., 13.10.2023
