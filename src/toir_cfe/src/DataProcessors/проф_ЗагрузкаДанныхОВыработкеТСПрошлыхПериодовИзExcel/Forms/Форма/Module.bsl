
//++ Проф-ИТ, #130, Башинская А., 13.10.2023

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДанныеПолучены = Ложь;
	Элементы.Декорация2.Видимость = ДанныеПолучены;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлПриИзменении(Элемент)
	
	Если Объект.Файл = "" Тогда
		ДанныеПолучены = Ложь;
		Элементы.Декорация2.Видимость = ДанныеПолучены;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборФайла("");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыборФайла(Команда)
    НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ВыборФайлаЗавершение4", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Файл) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите файл для загрузки";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Объект.Файл = "" Тогда
		СП = Новый СообщениеПользователю;
		СП.Текст = "Не выбран файл загрузки!";
		СП.Сообщить();
	Иначе 
		// читаем данные из файла
		Файл = Новый Файл(Объект.Файл);
		ФайлИсточник = Файл.ПолноеИмя;
		
		Если ЗагрузкаДанных(ФайлИсточник) тогда
			ТабОшибки = УстановитьСоответствияСформироватьДокументы();
			ЭтотОбъект.Протокол = ТабОшибки;
		Иначе
			СП = Новый СообщениеПользователю;
			СП.Текст = "Загрузка данных из файла не выполнена";
			СП.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Состояние("");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыборФайла

&НаКлиенте
Процедура ВыборФайлаЗавершение4(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ  Подключено Тогда
		НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ВыборФайлаЗавершение3", ЭтотОбъект));
		Возврат;
	КонецЕсли;
	
	ВыборФайлаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение3(ДополнительныеПараметры) Экспорт
	
	ВыборФайлаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаФрагмент()
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ВыборФайлаЗавершение2", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение2(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытия.Каталог = ""; 
		ДиалогОткрытия.МножественныйВыбор = Ложь; 
		Фильтр = "файл (*.xls;*.xlsx)|*.xls;*.xlsx";
		ДиалогОткрытия.Фильтр = Фильтр;
		ДиалогОткрытия.Заголовок = "Выберите файл"; 
				
		ДополнительныеПараметры = Новый Структура("ДиалогОткрытия", ДиалогОткрытия);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение1", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогОткрытия.Показать(ОписаниеОповещения);
	Иначе                                             
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения,
			НСтр("ru ='Данная возможность недоступна, так как не подключено расширение работы с файлами.'", "ru"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение1(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытия = ДополнительныеПараметры.ДиалогОткрытия;
	
	ДанныеПолучены = Ложь;
	Элементы.Декорация2.Видимость = ДанныеПолучены;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда 
		Объект.Файл = ДиалогОткрытия.ПолноеИмяФайла;
		Объект.Каталог = ДиалогОткрытия.Каталог;
		Объект.ИмяФайла = Прав(Объект.Файл, СтрДлина(ДиалогОткрытия.ПолноеИмяФайла) - СтрДлина(ДиалогОткрытия.Каталог));
		
		Если НРег(Прав(Объект.Файл, 3)) = "xls"
		Или НРег(Прав(Объект.Файл, 4)) = "xlsx" Тогда
			ПомещаемыеФайлы = Новый Массив;
        	Описание = Новый ОписаниеПередаваемогоФайла(Объект.Файл, "");
        	ПомещаемыеФайлы.Добавить(Описание);
			ПомещенныеФайлы = Новый Массив;
			Результат = Ложь;
			Попытка
				АдресХранилищаИлиОшибка = "";
				ДопПараметры = Новый Структура("ПомещенныеФайлы", ПомещенныеФайлы);                
				ОписаниеОповещения = Новый ОписаниеОповещения("ФормированиеТабДок", ЭтотОбъект, ДопПараметры);
			    НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь);
			Исключение
				// Преобразование в асинхронную процедуру невозможно:
				ВызватьИсключение "Невозможно прочитать выбранный файл. Возможно, он открыт другим приложением.";
			КонецПопытки;			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайлаВТабДокИТабДок1

&НаКлиенте
Процедура ФормированиеТабДок(ПомещенныеФайлы1, ДополнительныеПараметры) Экспорт
	
	ПомещенныеФайлы = ДополнительныеПараметры.ПомещенныеФайлы;
	
	Если  ПомещенныеФайлы1.Количество() > 0 Тогда
		НачатьСозданиеДвоичныхДанныхИзФайла(
			Новый ОписаниеОповещения("СоздатьДвоичныеДанные", ЭтотОбъект, ДополнительныеПараметры), Объект.Файл);
	КонецЕсли;
	
 КонецПроцедуры

&НаКлиенте
Процедура СоздатьДвоичныеДанные(ДвоичныеДанныеФайла, ДополнительныеПараметры) Экспорт
 
    ПомещенныеФайлы = ДополнительныеПараметры.ПомещенныеФайлы;
	АдресВХ = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	РезультатЗагрузки = ФормированиеТабДокНаСервере(ПомещенныеФайлы, АдресВХ, ТабДок, ТабДок1);
	Если РезультатЗагрузки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Данные из файла получены";				
		Сообщение.Сообщить();		
		
		ДанныеПолучены = Истина;
		Элементы.Декорация2.Видимость = ДанныеПолучены;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не получены данные из файла!";				
		Сообщение.Сообщить();				
	КонецЕсли;
КонецПроцедуры
 
 &НаСервере
Функция ФормированиеТабДокНаСервере(ПомещенныеФайлы, АдресВХ, ТабДок, ТабДок1)
	
	// Удаление временного файла в 2-х местах ниже. Сонар может не видеть.
    Если СтрНайти(Объект.Файл, ".xlsx") > 0 Тогда        
		ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
    Иначе
        ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xls");
	КонецЕсли;
	
	ФайлИзХран = ПолучитьИзВременногоХранилища(АдресВХ);

	ФайлИзХран.Записать(ПолноеИмяФайла);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабДок.Очистить();
	ТабДок1.Очистить();
	Попытка
		// Выполняется долго на больших файлах.		
		ТабличныйДокумент.Прочитать(ПолноеИмяФайла);    
		Для к = 1 По ТабличныйДокумент.Области.Количество() Цикл
			ОбластьТД = ТабличныйДокумент.ПолучитьОбласть(ТабличныйДокумент.Области[к - 1].Имя);
			ТабДок.Вывести(ОбластьТД);
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки;				
		Сообщение.Сообщить();				

		Попытка
			УдалитьФайлы(ПолноеИмяФайла);
		Исключение
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка наработок'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ОписаниеОшибки);
		КонецПопытки;		

		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ПолноеИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка наработок'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Функция ЗагрузкаДанных(ФайлИсточник)
	
	Если НРег(Прав(Объект.Файл, 3)) = "xls"
	Или НРег(Прав(Объект.Файл,4)) = "xlsx" Тогда
		Возврат ЗагрузкаЭкселя(ФайлИсточник);
	Иначе
		СП = Новый СообщениеПользователю;
		СП.Текст = "Неизвестный тип файла!";
		СП.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗагрузкаЭкселя(ФайлИсточник)
	Возврат ЗагрузкаЭкселяНаСервере();										
КонецФункции

&НаСервере
Функция ЗагрузкаЭкселяНаСервере()	
	
	ТЧОбъекта = Объект.ТЧ;
	ТЧОбъекта.Очистить();
	
	// первый лист
	ОбластьФайла = ТабДок;
	
	КолвоСтрокФайла = ОбластьФайла.ВысотаТаблицы;
	КолВоКолонокФайла = ОбластьФайла.ШиринаТаблицы;
	
	мНомерНачальнойСтроки = 2;
	
	Для НС = мНомерНачальнойСтроки По КолвоСтрокФайла Цикл        
		
		Если ОбластьФайла.Область(НС, 3).Текст = "" Тогда 
			Продолжить;
		КонецЕсли;
		
		Стр = Объект.ТЧ.Добавить();
		
		Попытка
			Стр.Период = Дата(ОбластьФайла.Область(НС, 1).Текст);
		Исключение
			Стр.Период = Дата(1, 1, 1);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Невозможно определить период по строке %1%2", Стр.НомерСтроки, мНомерНачальнойСтроки); 
			Сообщение.Сообщить();
		КонецПопытки;
		
		стр.ОрганизацияИзФайла 			= СокрЛП(ОбластьФайла.Область(НС, 2).Текст);
		стр.ОбъектЭксплуатацииИзФайла 	= СокрЛП(ОбластьФайла.Область(НС, 3).Текст);
		стр.ПоказательИзФайла 			= СокрЛП(ОбластьФайла.Область(НС, 4).Текст);
		стр.Показания 					= СокрЛП(ОбластьФайла.Область(НС, 5).Текст);
		стр.ОтветственныйИзФайла 		= СокрЛП(ОбластьФайла.Область(НС, 6).Текст);
		стр.ДокументИзФайла 			= СокрЛП(ОбластьФайла.Область(НС, 7).Текст);
		стр.проф_ГУИДДокументаОснованияERP = СокрЛП(ОбластьФайла.Область(НС, 8).Текст);
		стр.КодОрганизации 				= СокрЛП(ОбластьФайла.Область(НС, 9).Текст);
		стр.КодОбъекта 					= СокрЛП(ОбластьФайла.Область(НС, 10).Текст);
		стр.КодОтветственного 			= СокрЛП(ОбластьФайла.Область(НС, 11).Текст);
		стр.ПодразделениеИзФайла 		= СокрЛП(ОбластьФайла.Область(НС, 12).Текст);
		стр.КодПодразделения 			= СокрЛП(ОбластьФайла.Область(НС, 13).Текст);
		стр.НомерДок 					= СокрЛП(ОбластьФайла.Область(НС, 14).Текст);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УстановкаСоответствий

&НаСервере
Функция УстановитьСоответствияСформироватьДокументы()
		
	// Организация
	ТЗОрганизации = ТЗОрганизации();

	// Подразделение
	ТЗПодразделения = ТЗПодразделения();
	
	// Ответственный
	ТЗОтветственные = ТЗОтветственные();
		
	// Показатель
	ТЗПоказатели = ТЗПоказатели();
		
	СоответствиеПоказателя = Новый Соответствие;
	
	Пробег = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", "Пробег");
	Если Пробег = Неопределено Тогда
		Пробег = ПредопределенноеЗначение("Справочник.ПараметрыВыработкиОС.ПустаяСсылка");
	КонецЕсли;	                                                                          
	
	Моточасы = Справочники.проф_НастройкиСистемы.ПолучитьНастройкуСистемы("НастройкиОбменаТОИР", "Моточасы");
	Если Моточасы = Неопределено Тогда
		Моточасы = ПредопределенноеЗначение("Справочник.ПараметрыВыработкиОС.ПустаяСсылка");
	КонецЕсли;	
	
	СоответствиеПоказателя.Вставить("Пробег", Пробег);
	СоответствиеПоказателя.Вставить("Моточасы", Моточасы);
	
	// протокол загрузки
	ТЗПротокол = Новый ТаблицаЗначений;
	ТЗПротокол.Колонки.Добавить("НеЗагруженныхОбъектов");
	ТЗПротокол.Колонки.Добавить("НеЗагруженныхОбъектовПричина");
	ТЗПротокол.Колонки.Добавить("СозданныхДокументов");
	ТЗПротокол.Колонки.Добавить("СозданныхДокументовПричина");
	ТЗПротокол.Колонки.Добавить("ПроведенныхДокументов");
	ТЗПротокол.Колонки.Добавить("ПроведенныхДокументовПричина");
	ТЗПротокол.Колонки.Добавить("НеПроведенныхДокументов");
	ТЗПротокол.Колонки.Добавить("НеПроведенныхДокументовПричина");
	
	СозданныхДокументов = 0;
	ПроведенныхДокументов = 0;
	
	// Док                                    
	КолонкиВыгрузки = "ДокументИзФайла, проф_ГУИДДокументаОснованияERP, ДокУчетНаработки, КодОрганизации,
		|КодПодразделения, КодОтветственного, Период, НомерДок";
	КолонкиГруппировки = "ДокументИзФайла, проф_ГУИДДокументаОснованияERP, ДокУчетНаработки, КодОрганизации,
		|КодПодразделения, КодОтветственного, Период, НомерДок";
	ТЗДокУчетНаработки = Объект.ТЧ.Выгрузить(, КолонкиВыгрузки);
	ТЗДокУчетНаработки.Свернуть(КолонкиГруппировки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныеДанные", Объект.ТЧ.Выгрузить());
	Запрос.УстановитьПараметр("ТЗОрганизации", ТЗОрганизации);
	Запрос.УстановитьПараметр("ТЗПодразделения", ТЗПодразделения);
	Запрос.УстановитьПараметр("ТЗОтветственные", ТЗОтветственные);
	Запрос.УстановитьПараметр("ТЗПоказатели", ТЗПоказатели);
	Запрос.УстановитьПараметр("ТЗДокУчетНаработки", ТЗДокУчетНаработки);
	Запрос.Текст = ТекстЗапросаУстановитьСоответствияСформироватьДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Период, проф_ГУИДДокументаОснованияERP, КодОрганизации, КодПодразделения");
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);			
		СтрокиТЧ = Объект.ТЧ.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧ.Количество() = 0 Тогда
			СтрокаПротокола = ТЗПротокол.Добавить();
			СтрокаПротокола.НеПроведенныхДокументов = 1;
			СтрокаПротокола.НеПроведенныхДокументовПричина = СтрШаблон("Возможно, дублирующий информацию документ %1",
																							Выборка.ДокУчетНаработки);
			Продолжить;
		КонецЕсли;
		
		ДокОбъект = УстановитьДокумент(Выборка, СозданныхДокументов);
		
		ЗаполнитьТЧНаработкаОбъектов(ДокОбъект, СтрокиТЧ, СоответствиеПоказателя, ТЗПротокол);
		
		Если ДокОбъект.НаработкаОбъектов.Количество() = 0 Тогда			
			Продолжить;
		КонецЕсли;
				
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);			
			
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ПроведенныхДокументов = ПроведенныхДокументов + 1;
		Исключение
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());			
			СтрокаПротокола = ТЗПротокол.Добавить();
			СтрокаПротокола.НеПроведенныхДокументов = 1;
			СтрокаПротокола.НеПроведенныхДокументовПричина = СтрШаблон("%1 %2", ДокОбъект, ОписаниеОшибки);						
		КонецПопытки;
			
	КонецЦикла;
	
	КолонкиСверткиПротокола = "НеЗагруженныхОбъектовПричина, НеПроведенныхДокументовПричина, НеЗагруженныхОбъектов,
		|СозданныхДокументов, ПроведенныхДокументов, НеПроведенныхДокументов";
	ТЗПротокол.Свернуть(КолонкиСверткиПротокола);
	ТабПротокол = ПолучитьПротокол(ТЗПротокол, СозданныхДокументов, ПроведенныхДокументов);
	
	Возврат ТабПротокол;
	
КонецФункции

&НаСервере
Функция ТЗОрганизации()
	
	ТЗОрганизации = Объект.ТЧ.Выгрузить(, "ОрганизацияИзФайла, КодОрганизации, Организация");
	ТЗОрганизации.Свернуть("ОрганизацияИзФайла, КодОрганизации, Организация");
	Для Каждого стр Из ТЗОрганизации Цикл
		Если стр.ОрганизацияИзФайла = "" Тогда
			Продолжить;
		КонецЕсли;
		стр.Организация = НайтиСсылкуПоУИД("Справочник.Организации", стр.КодОрганизации, стр.ОрганизацияИзФайла).Объект;
	КонецЦикла;

	Возврат ТЗОрганизации;
	
КонецФункции	

&НаСервере
Функция ТЗПодразделения()
	
	ТЗПодразделения = Объект.ТЧ.Выгрузить(, "ПодразделениеИзФайла, КодПодразделения, Подразделение");
	ТЗПодразделения.Свернуть("ПодразделениеИзФайла, КодПодразделения, Подразделение");
	Для Каждого стр Из ТЗПодразделения Цикл
		Если стр.ПодразделениеИзФайла = "" Тогда
			Продолжить;
		КонецЕсли;
		стр.Подразделение = НайтиСсылкуПоУИД("Справочник.СтруктураПредприятия",
								стр.КодПодразделения, стр.ПодразделениеИзФайла).Объект;
	КонецЦикла;
	
	Возврат ТЗПодразделения;
	
КонецФункции	

&НаСервере
Функция ТЗОтветственные()
	
	ТЗОтветственные = Объект.ТЧ.Выгрузить(,"ОтветственныйИзФайла, КодОтветственного, Ответственный");
	ТЗОтветственные.Свернуть("ОтветственныйИзФайла, КодОтветственного, Ответственный");
	Для Каждого стр Из ТЗОтветственные Цикл
		Если стр.ОтветственныйИзФайла = "" Тогда
			Продолжить;
		КонецЕсли;
		стр.Ответственный = НайтиСсылкуПоУИД("Справочник.Пользователи",
								стр.КодОтветственного, стр.ОтветственныйИзФайла).Объект;
	КонецЦикла;	
	
	Возврат ТЗОтветственные;
	
КонецФункции	

&НаСервере
Функция ТЗПоказатели()
	
	ТЗПоказатели = Объект.ТЧ.Выгрузить(, "ПоказательИзФайла, Показатель");
	ТЗПоказатели.Свернуть("ПоказательИзФайла, Показатель");
	Для Каждого стр из ТЗПоказатели Цикл
		Если стр.ПоказательИзФайла = "" Тогда
			Продолжить;
		КонецЕсли;
		стр.Показатель = Справочники.ПараметрыВыработкиОС.НайтиПоНаименованию(стр.ПоказательИзФайла, Истина);
	КонецЦикла;
	
	Возврат ТЗПоказатели;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьТЧНаработкаОбъектов(ДокОбъект, СтрокиТЧ, СоответствиеПоказателя, ТЗПротокол)
	
	Для Каждого стрТЧ Из СтрокиТЧ Цикл
		Показатель = СоответствиеПоказателя.Получить(СтрТЧ.ПоказательИзФайла);
		СоздатьСтрокуТЧНаработкаОбъектов(ДокОбъект, стрТЧ, Показатель, ТЗПротокол);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ТекстЗапросаУстановитьСоответствияСформироватьДокументы()
	
	ТекстЗапроса = "ВЫБРАТЬ
       |	ИД.Период КАК Период,
       |	ИД.НомерДок КАК НомерДок,
       |	ИД.ДокументИзФайла КАК ДокументИзФайла,
       |	ИД.проф_ГУИДДокументаОснованияERP КАК проф_ГУИДДокументаОснованияERP,
       |	ИД.КодОрганизации КАК КодОрганизации,
       |	ИД.КодПодразделения КАК КодПодразделения,
       |	ИД.КодОтветственного КАК КодОтветственного,
       |	ЛОЖЬ КАК СозданНовый,
       |	ЛОЖЬ КАК Изменен
       |ПОМЕСТИТЬ ВТ_ДокУчетНаработки
       |ИЗ
       |	&ТЗДокУчетНаработки КАК ИД
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	ИД.ОрганизацияИзФайла КАК ОрганизацияИзФайла,
       |	ИД.КодОрганизации КАК КодОрганизации,
       |	ИД.Организация КАК Организация
       |ПОМЕСТИТЬ ВТ_Организации
       |ИЗ
       |	&ТЗОрганизации КАК ИД
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	ИД.ПодразделениеИзФайла КАК ПодразделениеИзФайла,
       |	ИД.КодПодразделения КАК КодПодразделения,
       |	ИД.Подразделение КАК Подразделение
       |ПОМЕСТИТЬ ВТ_Подразделения
       |ИЗ
       |	&ТЗПодразделения КАК ИД
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	ИД.ОтветственныйИзФайла КАК ОтветственныйИзФайла,
       |	ИД.КодОтветственного КАК КодОтветственного,
       |	ИД.Ответственный КАК Ответственный
       |ПОМЕСТИТЬ ВТ_Ответственные
       |ИЗ
       |	&ТЗОтветственные КАК ИД
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ РАЗЛИЧНЫЕ
       |	ВТ_Исходный.Период КАК Период,
       |	ВТ_Исходный.НомерДок КАК НомерДок,
       |	ВТ_Исходный.ДокументИзФайла КАК ДокументИзФайла,
       |	ВТ_Исходный.проф_ГУИДДокументаОснованияERP КАК проф_ГУИДДокументаОснованияERP,
       |	ВТ_Исходный.КодОрганизации КАК КодОрганизации,
       |	ВТ_Исходный.КодПодразделения КАК КодПодразделения,
       |	ВТ_Исходный.КодОтветственного КАК КодОтветственного,
       |	ЕСТЬNULL(торо_УчетНаработкиОборудования.Ссылка, ЗНАЧЕНИЕ(Документ.торо_УчетНаработкиОборудования.ПустаяСсылка)) КАК ДокУчетНаработки,
       |	ВТ_Организации.Организация КАК Организация,
       |	ВТ_Подразделения.Подразделение КАК Подразделение,
       |	ВТ_Ответственные.Ответственный КАК Ответственный
       |ИЗ
       |	ВТ_ДокУчетНаработки КАК ВТ_Исходный
       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
       |		ПО ВТ_Исходный.КодОрганизации = ВТ_Организации.КодОрганизации
       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
       |		ПО ВТ_Исходный.КодПодразделения = ВТ_Подразделения.КодПодразделения
       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ответственные КАК ВТ_Ответственные
       |		ПО ВТ_Исходный.КодОтветственного = ВТ_Ответственные.КодОтветственного
       |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_УчетНаработкиОборудования КАК торо_УчетНаработкиОборудования
       |		ПО ВТ_Исходный.проф_ГУИДДокументаОснованияERP = торо_УчетНаработкиОборудования.проф_ГУИДДокументаОснованияERP
       |			И (торо_УчетНаработкиОборудования.Проведен)
       |			И (торо_УчетНаработкиОборудования.Организация = ВТ_Организации.Организация)
       |			И (торо_УчетНаработкиОборудования.Подразделение = ВТ_Подразделения.Подразделение)
       |
       |УПОРЯДОЧИТЬ ПО
       |	ВТ_Исходный.Период,
       |	ВТ_Исходный.проф_ГУИДДокументаОснованияERP,
       |	ВТ_Исходный.КодОрганизации,
       |	ВТ_Исходный.КодПодразделения";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

&НаСервере
Функция ПолучитьТекущееЗначениеНаработки(ОбъектРемонта, Показатель, ДокОбъект) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_НаработкаОбъектовРемонтаОстатки.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_НаработкаОбъектовРемонтаОстатки.Показатель КАК Показатель,
	|	торо_НаработкаОбъектовРемонтаОстатки.НаработкаОстаток КАК НаработкаОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта.Остатки(
	|			&ДатаСреза,
	|			ОбъектРемонта = &ОбъектРемонта
	|				И Показатель = &Показатель) КАК торо_НаработкаОбъектовРемонтаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель,
	|	торо_ПериодыНаработкиОРСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТ_Даты
	|ИЗ
	|	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(
	|			&ДатаСреза,
	|			ОбъектРемонта = &ОбъектРемонта
	|				И Показатель = &Показатель
	|				И Регистратор <> &Регистратор) КАК торо_ПериодыНаработкиОРСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Даты.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_Даты.Показатель КАК Показатель,
	|	ВТ_Даты.Период КАК НаработаноДата,
	|	ЕСТЬNULL(ВТ_Остатки.НаработкаОстаток, 0) КАК НаработаноЗначение
	|ИЗ
	|	ВТ_Даты КАК ВТ_Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ВТ_Даты.ОбъектРемонта = ВТ_Остатки.ОбъектРемонта
	|			И ВТ_Даты.Показатель = ВТ_Остатки.Показатель";
	
	
	Запрос.УстановитьПараметр("Показатель", Показатель);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Регистратор", ДокОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза", ДокОбъект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураРезультат = Новый Структура;
	Если Выборка.Следующий() Тогда
		
		СтруктураРезультат.Вставить("НаработаноЗначение", Выборка.НаработаноЗначение);
		СтруктураРезультат.Вставить("НаработаноДата", Выборка.НаработаноДата);
		
	Иначе
		
		СтруктураРезультат.Вставить("НаработаноДата", ОбъектРемонта.ДатаВводаВЭксплуатацию);
		СтруктураРезультат.Вставить("НаработаноЗначение", 0);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция НайтиСсылкуПоУИД(ПолноеИмя, Код, Наименование) 
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Объект.Ссылка КАК Ссылка
		|ИЗ
		|	&Объект КАК Объект
		|ГДЕ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Объект.Ссылка) = &УИД
		|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Объект", ПолноеИмя);
	Запрос.УстановитьПараметр("УИД", Новый УникальныйИдентификатор(Код));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = СтрШаблон("Не найден %1 наименование: %2", ПолноеИмя, Наименование); 
		ТекОбъект = ПредопределенноеЗначение(ПолноеИмя + ".ПустаяСсылка");
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТекОбъект = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Новый Структура("Объект, ТекстОшибки", ТекОбъект, ТекстОшибки);
	
КонецФункции

&НаСервере
Функция НайтиДокПоНомеру(НомерДок, Период)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерДок", НомерДок);
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.торо_УчетНаработкиОборудования КАК Т
		|ГДЕ
		|	Т.Номер ПОДОБНО &НомерДок
		|	И Т.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ГОД) И КОНЕЦПЕРИОДА(&Период, ГОД)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УстановитьДокумент(ТЗДоков, СозданныхДокументов)
	
	Если ЗначениеЗаполнено(ТЗДоков.ДокУчетНаработки) Тогда
		ДокОбъект = ТЗДоков.ДокУчетНаработки.ПолучитьОбъект();
		ДокОбъект.Дата = ТЗДоков.Период;
		ДокОбъект.Номер = ТЗДоков.НомерДок;
		ДокОбъект.НаработкаОбъектов.Очистить();
		ДокОбъект.Проведен = Ложь;
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Комментарий = СтрШаблон(" ## Загружено обработкой от %1", ТекущаяДатаСеанса());
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		ДокОбъект = Документы.торо_УчетНаработкиОборудования.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокОбъект, ТЗДоков);
		ДокОбъект.Дата = ТЗДоков.Период;
		ДокОбъект.Номер = ТЗДоков.НомерДок;
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Комментарий = СтрШаблон(" ## Загружено обработкой от %1", ТекущаяДатаСеанса());
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		СозданныхДокументов = СозданныхДокументов + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТЗДоков.НомерДок)
	И ДокОбъект.Номер <> ТЗДоков.НомерДок тогда
		ДокОбъект.Комментарий = СтрШаблон("%1 %2", ТЗДоков.НомерДок, ДокОбъект.Комментарий);
	КонецЕсли;
	
	ДокОбъект.ОбменДанными.Загрузка = Ложь;
	
	Возврат ДокОбъект;
	
КонецФункции

&НаСервере
Процедура СоздатьСтрокуТЧНаработкаОбъектов(ДокОбъект, СтрТЧ, Показатель, ТЗПротокол)
	
	РезультатПоискаОбъекта = НайтиСсылкуПоУИД("Справочник.торо_ОбъектыРемонта",
								СтрТЧ.КодОбъекта, СтрТЧ.ОбъектЭксплуатацииИзФайла);
	
	ТекОбъект = РезультатПоискаОбъекта.Объект;
	Если не ЗначениеЗаполнено(ТекОбъект) Тогда
		СтрокаПротокола = ТЗПротокол.Добавить();
		СтрокаПротокола.НеЗагруженныхОбъектов = 1;
		СтрокаПротокола.НеЗагруженныхОбъектовПричина = РезультатПоискаОбъекта.ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	НоваяСтрокаТЧ = ДокОбъект.НаработкаОбъектов.Добавить();
	
	НоваяСтрокаТЧ.Объект = ТекОбъект;
	НоваяСтрокаТЧ.Показатель = Показатель;
	НоваяСтрокаТЧ.Наработка = СтрТЧ.Показания;
	НоваяСтрокаТЧ.ДатаРаботыПо = СтрТЧ.Период;
	
	ЗначениеНаработки = ПолучитьТекущееЗначениеНаработки(ТекОбъект, Показатель, ДокОбъект);	
	Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
		НоваяСтрокаТЧ.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
		НоваяСтрокаТЧ.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
		НоваяСтрокаТЧ.НовоеЗначение = НоваяСтрокаТЧ.СтароеЗначение + НоваяСтрокаТЧ.Наработка;
	Иначе
		НоваяСтрокаТЧ.НовоеЗначение = НоваяСтрокаТЧ.Наработка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПротокол(ТЗПротокол,СозданныхДокументов,ПроведенныхДокументов)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Протокол");
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабПротокол = Новый ТабличныйДокумент;
	Область.Параметры.Заголовок = СтрШаблон(
		"Протокол ошибок загрузки данных о выработке ТС прошлых периодов из Excel от %1", Дата(ТекущаяДатаСеанса()));
		
	ТабПротокол.Вывести(Область);
	Область = Макет.ПолучитьОбласть("Строка");
	ТабДокНеЗагружено = Новый ТабличныйДокумент;
	ТабДокНеПроведено = Новый ТабличныйДокумент;
	
	ВывестиТЗПротокол(ТЗПротокол, ТабДокНеЗагружено, ТабДокНеПроведено, Область);
		
	Если ТабДокНеЗагружено.ВысотаТаблицы <> 0 Тогда
		Если ТЗПротокол.Итог("НеЗагруженныхОбъектов") > 50 Тогда
			Область.Параметры.Показатель = "Не загружено объектов";
			Область.Параметры.Количество = ТЗПротокол.Итог("НеЗагруженныхОбъектов");
			Область.Параметры.Описание = "первые 50 ниже";
			ТабПротокол.Вывести(Область);
		КонецЕсли;
			
		ТабПротокол.Присоединить(ТабДокНеЗагружено);
	Иначе
		Область.Параметры.Показатель = "Не загружен объект";
		Область.Параметры.Количество = 0;
		Область.Параметры.Описание = "";
		ТабПротокол.Вывести(Область);
	КонецЕсли;	
	
	Область.Параметры.Показатель = "Создано документов ""Учет наработки оборудования""";
	Область.Параметры.Количество = СозданныхДокументов;
	Область.Параметры.Описание = "";
	ТабПротокол.Вывести(Область);
	
	Область.Параметры.Показатель = "Проведено документов";
	Область.Параметры.Количество = ПроведенныхДокументов;
	Область.Параметры.Описание = "";
	ТабПротокол.Вывести(Область);
	
	Если ТабДокНеПроведено.ВысотаТаблицы <> 0 тогда
		ТабПротокол.Присоединить(ТабДокНеПроведено);
	Иначе
		Область.Параметры.Показатель = "Не проведен документ";
		Область.Параметры.Количество = 0;
		Область.Параметры.Описание = "";
		ТабПротокол.Вывести(Область);
	КонецЕсли;
	
	Возврат ТабПротокол;
КонецФункции

Процедура ВывестиТЗПротокол(ТЗПротокол, ТабДокНеЗагружено, ТабДокНеПроведено, Область)
	
	Для Каждого стр Из ТЗПротокол Цикл
		Если стр.НеЗагруженныхОбъектов <> 0
		И стр.НеЗагруженныхОбъектов <> Неопределено Тогда
			Если ТабДокНеЗагружено.ВысотаТаблицы < 50 Тогда
				Область.Параметры.Показатель = "Не загружен объект";
				Область.Параметры.Количество = стр.НеЗагруженныхОбъектов;
				Область.Параметры.Описание = стр.НеЗагруженныхОбъектовПричина;
				ТабДокНеЗагружено.Вывести(Область);
			КонецЕсли;
		ИначеЕсли стр.НеПроведенныхДокументов <> 0
		И стр.НеПроведенныхДокументов <> Неопределено Тогда	
			Если ТабДокНеПроведено.ВысотаТаблицы < 50 Тогда
				Область.Параметры.Показатель = "Не проведен документ";
				Область.Параметры.Количество = стр.НеПроведенныхДокументов;
				Область.Параметры.Описание = стр.НеПроведенныхДокументовПричина;
				ТабДокНеПроведено.Вывести(Область);
			КонецЕсли;
		Иначе	
			Продолжить;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

//-- Проф-ИТ, #130, Башинская А., 13.10.2023








