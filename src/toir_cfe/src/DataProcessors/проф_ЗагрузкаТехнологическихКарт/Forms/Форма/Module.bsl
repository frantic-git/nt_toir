
//++ Проф-ИТ, #48, Соловьёв А., 11.10.2023

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ДиалогВыбора           = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Выберите файл";
	ДиалогВыбора.Фильтр    = "Файл Excel(*.xls; *.xlsx)|*.xls; *.xlsx";	 
	ДиалогВыбора.ИндексФильтра = 0;
	Оповещение = Новый ОписаниеОповещения("завершениеОткрытияФайла", ЭтотОбъект);
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры  

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ЗавершениеОткрытияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ПутьКФайлу = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(Объект.ПутьКФайлу) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите файл'"), , , "Объект.ПутьКФайлу");
	КонецЕсли;	
	
	ПрочитатьФайлНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписатьЭлементыСправочника(Команда) 
	
	ОчиститьСообщения();
	
	Если Не ФайлСоответствуетФормату() Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьЭлементыСправочника();
	Состояние(НСтр("ru = 'Завершено'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

&НаСервере
Процедура ПрочитатьФайлНаСервере()
	
	Объект.ДанныеФайла.Очистить();
	ТабДок = Новый ТабличныйДокумент; 
	Попытка
		Табдок.Прочитать(Объект.ПутьКФайлу, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	Исключение 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось прочитать файл по причине: %1'"), ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	ПостроительЗапроса 						   = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных		   = Новый ОписаниеИсточникаДанных(ТабДок.Область());
	ПостроительЗапроса.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ПостроительЗапроса.ЗаполнитьНастройки();
	ПостроительЗапроса.Выполнить();
	
	НомерСтроки = 1;
	
	ВыборкаИзФайла = ПостроительЗапроса.Результат.Выбрать();
	Пока ВыборкаИзФайла.Следующий() Цикл
		
		Попытка
			КоличествоКолонок = ВыборкаИзФайла[25];
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл не соответствует шаблону'"));
			Прервать;
		КонецПопытки;
		
		Если Не ВСтрокеЕстьДанные(ВыборкаИзФайла) Тогда 
			Прервать;
		КонецЕсли;
		
		СтрокаДанных								  = Объект.ДанныеФайла.Добавить();  
		СтрокаДанных.КодТК 							  = СокрЛП(ВыборкаИзФайла[0]); 
		СтрокаДанных.ГруппаВхожденияТК 				  = СтрЗаменить(СокрЛП(ВыборкаИзФайла[1]), Символы.ВК + Символы.ПС, "");
		СтрокаДанных.РодительГруппыТК  				  = СтрЗаменить(СокрЛП(ВыборкаИзФайла[2]), Символы.ВК + Символы.ПС, "");
		СтрокаДанных.НаименованиеТК 				  = СтрЗаменить(СокрЛП(ВыборкаИзФайла[3]), Символы.ВК + Символы.ПС, "");
		СтрокаДанных.ДатаПринятияТК 				  = Лев(СокрЛП(ВыборкаИзФайла[4]), 10);
		СтрокаДанных.СтатусТК 						  = СокрЛП(ВыборкаИзФайла[5]);
		
		СтрокаДанных.ПродолжительностьТК 			  = СокрЛП(ВыборкаИзФайла[6]);
		СтрокаДанных.ВыполнениеРемонтаТребуетОстанова = СокрЛП(ВыборкаИзФайла[7]);
		СтрокаДанных.ВремяПростоя 				      = СокрЛП(ВыборкаИзФайла[8]);
		СтрокаДанных.ВидПростоя 				      = СокрЛП(ВыборкаИзФайла[9]);
		
		СтрокаДанных.КодТО							  = СокрЛП(ВыборкаИзФайла[10]);
		СтрокаДанных.ГруппаВхожденияТО 				  = СокрЛП(ВыборкаИзФайла[11]);
		СтрокаДанных.РодительГруппыТО 				  = СокрЛП(ВыборкаИзФайла[12]);
		СтрокаДанных.НаименованиеТО 				  = СокрЛП(ВыборкаИзФайла[13]);
		СтрокаДанных.НормаВремениТО 				  = СокрЛП(ВыборкаИзФайла[14]);
		
		СтрокаДанных.НоменклатураМА					  = СокрЛП(ВыборкаИзФайла[15]);
		СтрокаДанных.КодНоменклатуры 				  = СокрЛП(ВыборкаИзФайла[16]);
		СтрокаДанных.АртикулНоменклатуры 			  = СокрЛП(ВыборкаИзФайла[17]);
		СтрокаДанных.ХарактеристикаНоменклатуры 	  = СокрЛП(ВыборкаИзФайла[18]);
		СтрокаДанных.ЕдИзмеренияНоменклатуры 		  = СокрЛП(ВыборкаИзФайла[19]);
		СтрокаДанных.КоличествоНоменклатуры 		  = СокрЛП(ВыборкаИзФайла[20]);
		СтрокаДанных.Квалификация 					  = СокрЛП(ВыборкаИзФайла[21]);
		СтрокаДанных.КолВоСотрудниковИсполнителейТО   = СокрЛП(ВыборкаИзФайла[22]);
		СтрокаДанных.ВремяТрудоЗатрат 				  = СокрЛП(ВыборкаИзФайла[23]);
		СтрокаДанных.МерыБезопасности 				  = СокрЛП(ВыборкаИзФайла[24]);
		СтрокаДанных.Комментарий 					  = СокрЛП(ВыборкаИзФайла[25]);
		
		//++ Проф-ИТ, #328, Соловьев А.А., 31.10.2023
		ЗаполнитьНаименованиеИРодителяГруппыПоКодуТО(СтрокаДанных);
		//-- Проф-ИТ, #328, Соловьев А.А., 31.10.2023
		
		Если Не ПустаяСтрока(СтрокаДанных.НаименованиеТК) Тогда
			ОсновнаяСтрока = СтрокаДанных;
		ИначеЕсли ОсновнаяСтрока = Неопределено Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнено наименование ТК в строке %1'"), НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Объект.ДанныеФайла.Удалить(СтрокаДанных);
			Продолжить;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ОсновнаяСтрока, 
				"КодТК, ГруппаВхожденияТК, РодительГруппыТК, НаименованиеТК, 
				|ДатаПринятияТК, СтатусТК, ВыполнениеРемонтаТребуетОстанова, ВремяПростоя, ВидПростоя");
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаДанных.КодТО) Тогда 
			ОсновнаяСтрокаТО = СтрокаДанных;
		ИначеЕсли ОсновнаяСтрокаТО = Неопределено Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен код ТО в строке %1'"), НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Объект.ДанныеФайла.Удалить(СтрокаДанных);
			Продолжить;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ОсновнаяСтрокаТО, 
				"КодТО, ГруппаВхожденияТО, РодительГруппыТО, НаименованиеТО, НормаВремениТО"); 
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если Объект.ДанныеФайла.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не удалось прочитать файл, не заполнены обязательные поля'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

//++ Проф-ИТ, #328, Соловьев А.А., 31.10.2023

&НаСервере
Процедура ЗаполнитьНаименованиеИРодителяГруппыПоКодуТО(СтрокаДанных)
	
	Если ЗначениеЗаполнено(СтрокаДанных.КодТО) И 
		(Не ЗначениеЗаполнено(СтрокаДанных.НаименованиеТО) 
		Или Не ЗначениеЗаполнено(СтрокаДанных.РодительГруппыТО)) Тогда
		ТехОперация = Справочники.торо_ТехнологическиеОперации.НайтиПоКоду(СтрокаДанных.КодТО);
		Если ЗначениеЗаполнено(ТехОперация) Тогда
			ЗначенияРеквизитовТО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
										ТехОперация, "Наименование, Родитель.Представление");
			СтрокаДанных.НаименованиеТО = ЗначенияРеквизитовТО.Наименование;
			СтрокаДанных.РодительГруппыТО = ЗначенияРеквизитовТО.РодительПредставление;
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдена тех. операция с кодом %1'"), СтрокаДанных.КодТО);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//-- Проф-ИТ, #328, Соловьев А.А., 31.10.2023

&НаСервере
Функция СтрокаВДату(ВремяСтрокой, ВСекундах = Ложь)
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	
	Попытка
		Разделитель 	= СтрНайти(ВремяСтрокой, ":");	
		Часы   			= ОписаниеТипа.ПривестиЗначение(Сред(ВремяСтрокой, 0, Разделитель - 1));
		Минуты 			= ОписаниеТипа.ПривестиЗначение(Сред(ВремяСтрокой, Разделитель + 1, 2));
		ЧислоМинутВЧасе = 60;
		СекундВМинуте   = 60;
		
		Если ВСекундах Тогда		
			ВремяКВозврату = (Часы * ЧислоМинутВЧасе + Минуты) * СекундВМинуте;		
		Иначе			
			ВремяКВозврату = Часы * ЧислоМинутВЧасе + Минуты;		
		КонецЕсли;
		
		Возврат ВремяКВозврату;
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЧасыМинутыСекунды(ПродолжительностьВСекундах)
	
	СтруктураВозврата = Новый Структура("Часы, Минуты, Секунды");
	СтруктураВозврата.Часы    = Цел(ПродолжительностьВСекундах / 3600);
	СтруктураВозврата.Минуты  = Цел((ПродолжительностьВСекундах - 3600 * СтруктураВозврата.Часы) / 60);
	СтруктураВозврата.Секунды = ПродолжительностьВСекундах - 3600 * СтруктураВозврата.Часы - СтруктураВозврата.Минуты * 60;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ФайлСоответствуетФормату()
	
	Если Объект.ДанныеФайла.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните данные из файла'"));
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьПустоеЗначение    = Ложь;
	ТекущаяНаименованиеТК = ""; 
	
	Для Каждого СтрокаТЧ Из Объект.ДанныеФайла Цикл
		
		Если Не ПустаяСтрока(СтрокаТЧ.НоменклатураМА) И ПустаяСтрока(СтрокаТЧ.КодНоменклатуры) Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указан код номенклатуры в строке %1'"), СтрокаТЧ.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
				"Объект.ДанныеФайла[" + (СтрокаТЧ.НомерСтроки - 1) + "].КодНоменклатуры");
			ЕстьПустоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не ЕстьПустоеЗначение;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыСправочника()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСоздатьЭлементыСправочника();	
	Запрос.УстановитьПараметр("втИзФайла", Объект.ДанныеФайла.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	РодительГруппы = Неопределено;
	Родитель = Неопределено;
	
	ВыборкаРодительГруппыТК = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРодительГруппыТК.Следующий() Цикл
		
		Если РодительГруппы = Неопределено И ТипЗнч(ВыборкаРодительГруппыТК.РодительГруппыТК) = Тип("Строка") Тогда
			РодительГруппы = СоздатьГруппыСправочника(ВыборкаРодительГруппыТК.РодительГруппыТК);
			Если РодительГруппы = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
		Иначе
			РодительГруппы = ВыборкаРодительГруппыТК.РодительГруппыТК;
		КонецЕсли;
	
		ВыборкаГруппаВхожденияТК = ВыборкаРодительГруппыТК.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбработатьВыборкаГруппаВхожденияТК(ВыборкаГруппаВхожденияТК, Родитель, РодительГруппы);
				
		РодительГруппы = Неопределено;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСоздатьЭлементыСправочника()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	вт.НомерСтроки КАК НомерСтроки,
	|	вт.КодТК КАК Код,
	|	вт.ГруппаВхожденияТК КАК ГруппаВхожденияТК,
	|	вт.РодительГруппыТК КАК РодительГруппыТК,
	|	вт.НаименованиеТК КАК НаименованиеТК,
	|	вт.ДатаПринятияТК КАК ДатаПринятияТК,
	|	вт.ПродолжительностьТК КАК ПродолжительностьТК,
	|	вт.ВыполнениеРемонтаТребуетОстанова КАК ВыполнениеРемонтаТребуетОстанова,
	|	вт.ВремяПростоя КАК ВремяПростоя,
	|	вт.ВидПростоя КАК ВидПростоя,
	|	вт.КодТО КАК КодТО,
	|	вт.ГруппаВхожденияТО КАК ГруппаВхожденияТО,
	|	вт.РодительГруппыТО КАК РодительГруппыТО,
	|	вт.НаименованиеТО КАК НаименованиеТО,
	|	вт.НормаВремениТО КАК НормаВремениТО,
	|	вт.НоменклатураМА КАК НоменклатураМА,
	|	вт.КодНоменклатуры КАК КодНоменклатуры,
	|	вт.АртикулНоменклатуры КАК АртикулНоменклатуры,
	|	вт.ХарактеристикаНоменклатуры КАК Характеристика,
	|	вт.ЕдИзмеренияНоменклатуры КАК ЕдИзмеренияНоменклатуры,
	|	вт.КоличествоНоменклатуры КАК КоличествоНоменклатуры,
	|	вт.Квалификация КАК Квалификация,
	|	вт.КолВоСотрудниковИсполнителейТО КАК КолВоСотрудниковИсполнителейТО,
	|	вт.ВремяТрудоЗатрат КАК ВремяТрудоЗатрат,
	|	вт.МерыБезопасности КАК МерыБезопасности,
	|	вт.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ втИзФайла
	|ИЗ
	|	&втИзФайла КАК вт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИзФайла.НомерСтроки КАК НомерСтроки,
	|	втИзФайла.Код КАК Код,
	|	втИзФайла.ГруппаВхожденияТК КАК ГруппаВхожденияТК,
	|	втИзФайла.РодительГруппыТК КАК РодительГруппыТК,
	|	втИзФайла.НаименованиеТК КАК НаименованиеТК,
	|	втИзФайла.ДатаПринятияТК КАК ДатаПринятияТК,
	|	втИзФайла.ПродолжительностьТК КАК ПродолжительностьТК,
	|	втИзФайла.ВыполнениеРемонтаТребуетОстанова КАК ВыполнениеРемонтаТребуетОстанова,
	|	втИзФайла.ВремяПростоя КАК ВремяПростоя,
	|	втИзФайла.ВидПростоя КАК ВидПростоя,
	|	втИзФайла.КодТО КАК КодТО,
	|	втИзФайла.ГруппаВхожденияТО КАК ГруппаВхожденияТО,
	|	втИзФайла.РодительГруппыТО КАК РодительГруппыТО,
	|	втИзФайла.НаименованиеТО КАК НаименованиеТО,
	|	втИзФайла.НормаВремениТО КАК НормаВремениТО,
	|	втИзФайла.НоменклатураМА КАК НоменклатураМА,
	|	втИзФайла.КодНоменклатуры КАК КодНоменклатуры,
	|	втИзФайла.АртикулНоменклатуры КАК АртикулНоменклатуры,
	|	втИзФайла.Характеристика КАК Характеристика,
	|	втИзФайла.ЕдИзмеренияНоменклатуры КАК ЕдИзмеренияНоменклатуры,
	|	втИзФайла.КоличествоНоменклатуры КАК КоличествоНоменклатуры,
	|	втИзФайла.Квалификация КАК Квалификация,
	|	втИзФайла.КолВоСотрудниковИсполнителейТО КАК КолВоСотрудниковИсполнителейТО,
	|	втИзФайла.ВремяТрудоЗатрат КАК ВремяТрудоЗатрат,
	|	втИзФайла.МерыБезопасности КАК МерыБезопасности,
	|	втИзФайла.Комментарий КАК Комментарий,
	|	торо_ИдентификаторыТехКарт.Ссылка ЕСТЬ NULL КАК СоздаватьТехКарту
	|ПОМЕСТИТЬ втТКУникальные
	|ИЗ
	|	втИзФайла КАК втИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ИдентификаторыТехКарт КАК торо_ИдентификаторыТехКарт
	|		ПО втИзФайла.НаименованиеТК = торо_ИдентификаторыТехКарт.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТКУникальные.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ИдентификаторРодительГруппыТК.Ссылка, втТКУникальные.РодительГруппыТК) КАК РодительГруппыТК,
	|	ЕСТЬNULL(ИдентификаторРодительТК.Ссылка, втТКУникальные.ГруппаВхожденияТК) КАК ГруппаВхожденияТК,
	|	втТКУникальные.Код КАК Код,
	|	втТКУникальные.НаименованиеТК КАК НаименованиеТК,
	|	втТКУникальные.ДатаПринятияТК КАК ДатаПринятияТК,
	|	втТКУникальные.ПродолжительностьТК КАК ПродолжительностьТК,
	|	ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует) КАК СтатусТК,
	|	ЗНАЧЕНИЕ(Перечисление.торо_СпособыРасчетаПродолжительности.ПроизвольноеЗначение) КАК СпособРасчетаПродолжительности,
	|	втТКУникальные.ВыполнениеРемонтаТребуетОстанова = ""да"" КАК ВыполнениеРемонтаТребуетОстановаОборудования,
	|	втТКУникальные.ВремяПростоя КАК ВремяПростоя,
	|	ЕСТЬNULL(торо_ВидыЭксплуатации.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидПростоя,
	|	втТКУникальные.Комментарий КАК Комментарий,
	|	ЕСТЬNULL(торо_ТехнологическиеОперации.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_ТехнологическиеОперации.ПустаяСсылка)) КАК ТехОперация,
	|	втТКУникальные.НормаВремениТО КАК НормаВремениТО,
	|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураСсылка,
	|	втТКУникальные.КодНоменклатуры КАК КодНоменклатуры,
	|	втТКУникальные.АртикулНоменклатуры КАК АртикулНоменклатуры,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, втТКУникальные.Характеристика) КАК ХарактеристикаСсылка,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияСсылка,
	|	втТКУникальные.КоличествоНоменклатуры КАК КоличествоНоменклатуры,
	|	ЕСТЬNULL(торо_КвалификацииРемонтногоПерсонала.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)) КАК КвалификацияСсылка,
	|	втТКУникальные.КолВоСотрудниковИсполнителейТО КАК КолВоСотрудниковИсполнителейТО,
	|	втТКУникальные.ВремяТрудоЗатрат КАК ВремяТрудоЗатрат,
	|	ЕСТЬNULL(торо_МерыБезопасности.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_МерыБезопасности.ПустаяСсылка)) КАК МераБезопасностиСсылка,
	|	втТКУникальные.ГруппаВхожденияТК КАК ГруппаВхожденияТКСтрока,
	|	втТКУникальные.СоздаватьТехКарту КАК СоздаватьТехКарту
	|ИЗ
	|	втТКУникальные КАК втТКУникальные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ИдентификаторыТехКарт КАК ИдентификаторРодительТК
	|		ПО втТКУникальные.ГруппаВхожденияТК = ИдентификаторРодительТК.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ИдентификаторыТехКарт КАК ИдентификаторРодительГруппыТК
	|		ПО втТКУникальные.РодительГруппыТК = ИдентификаторРодительГруппыТК.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
	|		ПО втТКУникальные.КодТО = торо_ТехнологическиеОперации.Код
	|			И втТКУникальные.НаименованиеТО = торо_ТехнологическиеОперации.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_КвалификацииРемонтногоПерсонала КАК торо_КвалификацииРемонтногоПерсонала
	|		ПО втТКУникальные.Квалификация = торо_КвалификацииРемонтногоПерсонала.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО втТКУникальные.КодНоменклатуры = Номенклатура.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО втТКУникальные.Характеристика = ХарактеристикиНоменклатуры.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ВидыЭксплуатации КАК торо_ВидыЭксплуатации
	|		ПО втТКУникальные.ВидПростоя = торо_ВидыЭксплуатации.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_МерыБезопасности КАК торо_МерыБезопасности
	|		ПО втТКУникальные.МерыБезопасности = торо_МерыБезопасности.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	втТКУникальные.НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Код),
	|	МАКСИМУМ(ДатаПринятияТК),
	|	МАКСИМУМ(ПродолжительностьТК),
	|	МАКСИМУМ(СтатусТК),
	|	МАКСИМУМ(СпособРасчетаПродолжительности),
	|	МАКСИМУМ(ВыполнениеРемонтаТребуетОстановаОборудования),
	|	МАКСИМУМ(ВремяПростоя),
	|	МАКСИМУМ(ВидПростоя),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(НормаВремениТО),
	|	МАКСИМУМ(СоздаватьТехКарту)
	|ПО
	|	РодительГруппыТК,
	|	ГруппаВхожденияТК,
	|	НаименованиеТК,
	|	ТехОперация";
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Процедура ОбработатьВыборкаГруппаВхожденияТК(ВыборкаГруппаВхожденияТК, Родитель, РодительГруппы)
	
	Пока ВыборкаГруппаВхожденияТК.Следующий() Цикл
		
		Если Родитель = Неопределено И ТипЗнч(ВыборкаГруппаВхожденияТК.ГруппаВхожденияТК) = Тип("Строка") Тогда 
			Родитель = СоздатьГруппыСправочника(ВыборкаГруппаВхожденияТК.ГруппаВхожденияТК, РодительГруппы);
			Если Родитель = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
		Иначе
			Родитель = ВыборкаГруппаВхожденияТК.ГруппаВхожденияТК;
		КонецЕсли;
		
		ВыборкаТК = ВыборкаГруппаВхожденияТК.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТК.Следующий() Цикл
			СоздатьЭлементСправочника(ВыборкаТК, Родитель);
		КонецЦикла;
		
		Родитель = Неопределено;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СоздатьГруппыСправочника(Наименование, Родитель = Неопределено)
	
	Если ПустаяСтрока(Наименование) Тогда 
		Возврат Справочники.торо_ИдентификаторыТехКарт.ПустаяСсылка();
	КонецЕсли;
	
	Попытка
		ГруппаОпераций  			 = Справочники.торо_ИдентификаторыТехКарт.СоздатьГруппу();
		ГруппаОпераций.Наименование  = Наименование;
		ГруппаОпераций.Родитель      = Родитель;
		ГруппаОпераций.УстановитьНовыйКод();
		ГруппаОпераций.Записать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать группу %1 по причине: %2'"), 
			Наименование, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ГруппаОпераций.Ссылка;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементСправочника(ВыборкаТК, Родитель)
	
	// Версии тех карт
	Если Не ВыборкаТК.СоздаватьТехКарту Тогда 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Тех. карта %1 уже создана ранее'"), ВыборкаТК.НаименованиеТК);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТехКарта = Справочники.торо_ТехКарты.СоздатьЭлемент(); 
	ЗаполнитьЗначенияСвойств(ТехКарта, ВыборкаТК);
	
	ВремяСтрокой = СтрокаВДату(ВыборкаТК.ПродолжительностьТК, Истина);
	СтруктураВремя = ЗаполнитьЧасыМинутыСекунды(СтрокаВДату(ВыборкаТК.ПродолжительностьТК, Истина));
	
	ТехКарта.Наименование   = ВыборкаТК.НаименованиеТК;
	ТехКарта.ДатаПринятия   = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ВыборкаТК.ДатаПринятияТК);
	ТехКарта.ВремяПростоя   = СтрокаВДату(ВыборкаТК.ВремяПростоя);
	ТехКарта.НормаВремени   = ВремяСтрокой;
	ТехКарта.НормаВремениТекст	= СтрШаблон(НСтр("ru = '%1 ч. %2 мин. %3 с.'"),
		СтруктураВремя.Часы, СтруктураВремя.Минуты, СтруктураВремя.Секунды);
	
	// Тех карты
	ИдентификаторТехКарты = Справочники.торо_ИдентификаторыТехКарт.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ИдентификаторТехКарты, ВыборкаТК);
	ИдентификаторТехКарты.Наименование 	= ВыборкаТК.НаименованиеТК;  
	ИдентификаторТехКарты.Родитель 		= Родитель;
	ИдентификаторТехКарты.Статус		= ВыборкаТК.СтатусТК;
	
	ВыборкаТО = ВыборкаТК.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТО.Следующий() Цикл
		
		ИдСтроки = Новый УникальныйИдентификатор();
		
		Если ЗначениеЗаполнено(ВыборкаТО.ТехОперация) Тогда
			СтрокаТЧСО							= ТехКарта.СписокОпераций.Добавить();
			СтрокаТЧСО.ID						= ИдСтроки;
			СтрокаТЧСО.Операция					= ВыборкаТО.ТехОперация;  
			СтрокаТЧСО.Количество				= 1;
			Если Не ПустаяСтрока(ВыборкаТО.НормаВремениТО) Тогда 
				СтрокаТЧСО.НормаВремениВСекундах = СтрокаВДату(ВыборкаТО.НормаВремениТО, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Выборка = ВыборкаТО.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьТабличныеЧастиТехКарты(ТехКарта, Выборка, ВыборкаТО.ТехОперация, ИдСтроки);
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		
		ТехКарта.Записать();
		
		ИдентификаторТехКарты.Записать();
		
		НаборЗаписей 			 = РегистрыСведений.торо_ВерсииТехКарт.СоздатьНаборЗаписей();
		Запись					 = НаборЗаписей.Добавить();
		Запись.Период            = ТехКарта.ДатаПринятия;
		Запись.ТехКарта          = ТехКарта.Ссылка;
		Запись.ИдентификаторТехКарты = ИдентификаторТехКарты.Ссылка;
		НаборЗаписей.Записать(Ложь);
		
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать элемент %1 с кодом %2 по причине: %3'"), 
			ВыборкаТК.НаименованиеТК, ВыборкаТК.Код, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныеЧастиТехКарты(ОбъектСправочникаТехКарта, Выборка, Операция, ИдСтроки)
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	
	Если ЗначениеЗаполнено(Выборка.НоменклатураСсылка) Тогда			
		СтрокаТЧМА 					= ОбъектСправочникаТехКарта.МатериальныеЗатраты.Добавить();
		СтрокаТЧМА.Id 				= ИдСтроки;
		СтрокаТЧМА.Операция			= Операция;
		СтрокаТЧМА.Номенклатура		= Выборка.НоменклатураСсылка;
		СтрокаТЧМА.Характеристика	= Выборка.ХарактеристикаСсылка;
		СтрокаТЧМА.ЕдиницаИзмерения = Выборка.ЕдиницаИзмеренияСсылка;
		Попытка
			СтрокаТЧМА.Количество	= ОписаниеТипа.ПривестиЗначение(Выборка.КоличествоНоменклатуры);
		Исключение
			СтрокаТЧМА.Количество	= 0;
		КонецПопытки;
		СтрокаТЧМА.КоличествоУпаковок = СтрокаТЧМА.Количество;
		СтрокаТЧМА.КоличествоНаЕдиницу = СтрокаТЧМА.Количество;
		СтрокаТЧМА.КоличествоУпаковокНаЕдиницу = СтрокаТЧМА.Количество;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.КвалификацияСсылка) Тогда			
		СтрокаТЧТрудЗ 			    = ОбъектСправочникаТехКарта.ТрудовыеЗатраты.Добавить();
		СтрокаТЧТрудЗ.Id 			= ИдСтроки;
		СтрокаТЧТрудЗ.Операция		= Операция;
		СтрокаТЧТрудЗ.Квалификация  = Выборка.КвалификацияСсылка;
		СтрокаТЧТрудЗ.Количество    = Выборка.КолВоСотрудниковИсполнителейТО;
		Если Не ПустаяСтрока(Выборка.ВремяТрудоЗатрат) Тогда 
			СтрокаТЧТрудЗ.ВремяРаботы   = СтрокаВДату(Выборка.ВремяТрудоЗатрат, Истина);
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Выборка.МераБезопасностиСсылка) Тогда
		СтрокаТЧМБ 					= ОбъектСправочникаТехКарта.МерыБезопасности.Добавить();
		СтрокаТЧМБ.Id 				= ИдСтроки;
		СтрокаТЧМБ.Операция			= Операция;
		СтрокаТЧМБ.МераБезопасности = Выборка.МераБезопасностиСсылка;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВСтрокеЕстьДанные(СтрокаДанных)

	Для Индекс = 0 По 25 Цикл
		Если ЗначениеЗаполнено(СтрокаДанных[Индекс]) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

//-- Проф-ИТ, #48, Соловьёв А., 11.10.2023